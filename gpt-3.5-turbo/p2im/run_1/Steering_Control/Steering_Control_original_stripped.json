{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "update_completion_flag_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 updateCompletionFlag_000800f4(undefined4 inputValue)\n\n{\n  if ((char)completionFlag == '\\0') {\n    completionFlag._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "update_completion_flag_000800f4",
                "param_1": "inputValue",
                "completed_7857": "completionFlag"
            },
            "calling": [
                "__libc_fini_array"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080148": {
            "entrypoint": "0x00080148",
            "current_name": "execute_software_interrupt_00080148",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t executeSoftwareInterrupt_00080148(uint32_t a0,uint32_t a1,int32_t a2)\n\n{\n  software_interrupt(0x3f);\n  return a0;\n}\n\n",
            "renaming": {
                "FUN_00080148": "execute_software_interrupt_00080148"
            },
            "calling": [
                "startForkserver"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008014c": {
            "entrypoint": "0x0008014c",
            "current_name": "afl_tick_call_0008014c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint aflTickCall_0008014c(int tickCount)\n\n{\n  uint32_t result;\n  \n  if (noHyperCall == 0) {\n    result = aflCall(1,tickCount,0);\n    return result;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0008014c": "afl_tick_call_0008014c",
                "ticks": "tickCount",
                "uVar1": "result"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "aflCall"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "write_throttle_and_steering_00080164",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid writeThrottleAndSteering_00080164(void)\n\n{\n  void *dataPtr;\n  size_t dataSize;\n  \n  Servo::write(&throttle,0x5a,dataPtr,dataSize);\n  Servo::write(&steering,0x5a,dataPtr,dataSize);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "write_throttle_and_steering_00080164",
                "in_r2": "dataPtr",
                "in_r3": "dataSize"
            },
            "calling": [
                "loop",
                "setup"
            ],
            "called": [
                "write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080184": {
            "entrypoint": "0x00080184",
            "current_name": "initialize_servo_controller_00080184",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeServoController_00080184(void)\n\n{\n  undefined4 temp;\n  \n  Servo::Servo(&steeringServo);\n  Servo::Servo(&throttleServo);\n  String::String(&commandString,\"\");\n  __aeabi_atexit(&commandString,0x81473,&__dso_handle);\n  String::String(&valueString,\"\");\n  __aeabi_atexit(&valueString,0x81473,&__dso_handle,temp);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080184": "initialize_servo_controller_00080184",
                "in_r3": "temp",
                "steering": "steeringServo",
                "throttle": "throttleServo",
                "command": "commandString",
                "value": "valueString"
            },
            "calling": [],
            "called": [
                "Servo",
                "String",
                "__aeabi_atexit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801e0": {
            "entrypoint": "0x000801e0",
            "current_name": "initialize_system_000801e0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeSystem_000801e0(void)\n\n{\n  UARTClass::begin(serialPort,0xe100);\n  pinMode(0xd,1);\n  pinMode(6,1);\n  pinMode(0x39,0);\n  pinMode(4,0);\n  pinMode(3,0);\n  pinMode(2,0);\n  Servo::attach(steeringServo,5);\n  Servo::attach(throttleServo,6);\n  straightAndStop();\n  delay(1000);\n  startForkserver(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000801e0": "initialize_system_000801e0",
                "&Serial": "serialPort",
                "&steering": "steeringServo",
                "&throttle": "throttleServo"
            },
            "calling": [
                "main"
            ],
            "called": [
                "straightAndStop",
                "delay",
                "attach",
                "begin",
                "startForkserver",
                "pinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080250": {
            "entrypoint": "0x00080250",
            "current_name": "control_robot_00080250",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid controlRobot_00080250(void)\n\n{\n  uchar uVar1;\n  uint32_t receivedPulse;\n  int receivedMotorRaw;\n  int iVar2;\n  long fileDescriptor;\n  Servo *this;\n  uint uVar3;\n  int fileDescriptor1;\n  int dummyVar1;\n  int dummyVar2;\n  int fileDescriptor2;\n  void *pointerVar;\n  size_t sizeVar;\n  stringValue valueStack;\n  \n  receivedPulse = getPulseIn(4,1,20000);\n  delayExecution(10);\n  uVar3 = (uint)ledStatus;\n  ledStatus = SUB41(uVar3 ^ 1,0);\n  setDigitalOutput(0receivedPulsed,uVar3 ^ 1);\n  if (receivedPulse < 0receivedPulse641) {\n    if (receivedPulse - 0receivedPulse385U < 299) {\n      if (manualControlMode != false) {\n        stopAndStabilize();\n        printer.printLine((printer *)&serialPort,\"Entered manual control manualControlMode.\");\n        manualControlMode = false;\n      }\n      delayExecution(10);\n      receivedPulse = getPulseIn(3,1,20000);\n      receivedSteering = mapValue(0,1000,2000,0receivedPulse28,0receivedPulse96);\n      pointerVar = (void *)0receivedPulse7d0;\n      sizeVar = 0receivedPulse28;\n      receivedMotor = mapValue(receivedPulse,1000,2000,0receivedPulse28,0receivedPulse96);\n      whileLoop (iVar2 = UART.isAvailable(&serialPort), 0 < iVar2) {\n        UART.readValue(&serialPort,fileDescriptor1,pointerVar,sizeVar);\n        printer.print((printer *)&serialPort,receivedSteering,10);\n        printer.print((printer *)&serialPort,\",\");\n        pointerVar = (void *)0receivedPulsea;\n        printer.printLine((printer *)&serialPort,receivedMotor,10);\n      }\n      servo.writeValue(&throttleServo,receivedMotor,pointerVar,sizeVar);\n      servo.writeValue(&steeringServo,receivedSteering,pointerVar,sizeVar);\n    }\n    else {\n      if (manualControlMode == false) {\n        stopAndStabilize();\n        printer.printLine((printer *)&serialPort,\"Entered autonomous control manualControlMode.\");\n      }\n      sizeVar = 1;\n      manualControlMode = true;\nLAB_00080346:\n      iVar2 = UART.isAvailable(&serialPort);\n      if (0 < iVar2) {\n        dataStream.readStringUntil((dataStream *)&serialPort,',');\n        stringValue.assign(&command,&valueStack);\n        stringValue.destructstringValue(&valueStack,dummyVar1);\n        pointerVar = (void *)0receivedPulsea;\n        dataStream.readStringUntil((dataStream *)&serialPort,'\\n');\n        stringValue.assign(&value,&valueStack);\n        stringValue.destructstringValue(&valueStack,dummyVar2);\n        UART.readValue(&serialPort,fileDescriptor2,pointerVar,sizeVar);\n        uVar1 = stringValue::isEquals(&command,\"steer\");\n        if (uVar1 == '\\0') goto LAB_0008039c;\n        fileDescriptor = stringValue::toInteger(&value);\n        this = &steeringServo;\n        goto LAB_000803b2;\n      }\n    }\n  }\n  else {\n    stopAndStabilize();\n    printer.printLine((printer *)&serialPort,\"error\");\n  }\n  return;\nLAB_0008039c:\n  uVar1 = stringValue::isEquals(&command,\"motor\");\n  if (uVar1 != '\\0') {\n    fileDescriptor = stringValue::toInteger(&value);\n    this = &throttleServo;\nLAB_000803b2:\n    servo.writeValue(this,fileDescriptor,pointerVar,sizeVar);\n  }\n  goto LAB_00080346;\n}\n\n",
            "renaming": {
                "FUN_00080250": "control_robot_00080250",
                "rxMode": "receivedPulse",
                "LEDstatus": "ledStatus",
                "rxSteer": "receivedSteering",
                "rxMotor": "receivedMotor",
                "mode": "manualControlMode",
                "x": "receivedPulse",
                "UARTClass": "UART",
                "Serial": "serialPort",
                "throttle": "throttleServo",
                "steering": "steeringServo",
                "SStack_1c": "valueStack",
                "__in_chrg": "dummyVar1",
                "__in_chrg_00": "dummyVar2",
                "__fd": "fileDescriptor",
                "__fd_00": "fileDescriptor1",
                "__fd_01": "fileDescriptor2",
                "pvVar4": "pointerVar",
                "sVar5": "sizeVar",
                "Print": "printer",
                "delay": "delayExecution",
                "pulseIn": "getPulseIn",
                "digitalWrite": "setDigitalOutput",
                "map": "mapValue",
                "while": "whileLoop",
                "available": "isAvailable",
                "read": "readValue",
                "Stream": "dataStream",
                "String": "stringValue",
                "equals": "isEquals",
                "toInt": "toInteger",
                "write": "writeValue",
                "straightAndStop": "stopAndStabilize",
                "Print::println": "printer.printLine",
                "Print::print": "printer.print",
                "UARTClass::read": "UART.readValue",
                "UARTClass::available": "UART.isAvailable",
                "Servo::write": "servo.writeValue",
                "Stream::readStringUntil": "dataStream.readStringUntil",
                "String::operator=": "stringValue.assign",
                "String::~": "stringValue.destruct"
            },
            "calling": [
                "main"
            ],
            "called": [
                "println",
                "print",
                "write",
                "pulseIn",
                "available",
                "equals",
                "~String",
                "straightAndStop",
                "readStringUntil",
                "operator=",
                "println",
                "delay",
                "toInt",
                "digitalWrite",
                "map",
                "read",
                "print"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803fc": {
            "entrypoint": "0x000803fc",
            "current_name": "initialize_timer_000803fc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoperipheralId initializeTimer_000803fc(Tc *timer,uint32_t channelNumber,uint32_t peripheralId,IRQn_Type interruptNumber)\n\n{\n  pmc_enable_periph_clk(peripheralId);\n  TC_Configure(timer,channelNumber,0xc002);\n  TC_SetRA(timer,channelNumber,0xa41);\n  *(int *)(((uint)(int)interruptNumber >> 5) * 4 + -0x1fff1f00) = 1 << ((int)interruptNumber & 0x1fU);\n  timer->TC_CHANNEL[channelNumber].TC_IER = 4;\n  TC_Start(timer,channelNumber);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000803fc": "initialize_timer_000803fc",
                "tc": "timer",
                "channel": "channelNumber",
                "id": "peripheralId",
                "irqn": "interruptNumber"
            },
            "calling": [
                "attach"
            ],
            "called": [
                "TC_SetRA",
                "pmc_enable_periph_clk",
                "TC_Configure",
                "TC_Start"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008044c": {
            "entrypoint": "0x0008044c",
            "current_name": "update_servo_timer_0008044c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid updateServoTimer_0008044c(sequence16_Sequence_t sequence,Tc *timerCounter,uint8_t servoChannel)\n\n{\n  uint timerValue;\n  uint servoCount;\n  RwReg timerRegister;\n  int iterationIndex;\n  \n  timerValue = (uint)sequence;\n  if ((Channel[timerValue] & 0x80U) == 0) {\n    iterationIndex = timerValue * 0xc;\n    if ((Channel[timerValue] + iterationIndex < (int)(uint)ServoCount) &&\n       ((int)((uint)(byte)servos[Channel[timerValue] + iterationIndex].Pin << 0x19) < 0)) {\n      digitalWrite((byte)servos[iterationIndex + Channel[timerValue]].Pin & 0x3f,0);\n    }\n  }\n  else {\n    timerCounter->TC_CHANNEL[servoChannel].TC_CCR = timerCounter->TC_CHANNEL[servoChannel].TC_CCR | 4;\n  }\n  servoCount = (uint)ServoCount;\n  Channel[timerValue] = Channel[timerValue] + '\\x01';\n  iterationIndex = timerValue * 0xc;\n  if ((Channel[timerValue] + iterationIndex < (int)servoCount) && (Channel[timerValue] < '\\f')) {\n    timerCounter->TC_CHANNEL[servoChannel].TC_RA =\n         timerCounter->TC_CHANNEL[servoChannel].TC_CV + servos[Channel[timerValue] + iterationIndex].ticks;\n    if (-1 < (int)((uint)(byte)servos[Channel[timerValue] + iterationIndex].Pin << 0x19)) {\n      return;\n    }\n    digitalWrite((byte)servos[iterationIndex + Channel[timerValue]].Pin & 0x3f,1);\n    return;\n  }\n  timerRegister = (SystemCoreClock / 1000000) * 20000 >> 5;\n  if (timerRegister <= timerCounter->TC_CHANNEL[servoChannel].TC_CV + 4) {\n    timerRegister = timerCounter->TC_CHANNEL[servoChannel].TC_CV + 4;\n  }\n  timerCounter->TC_CHANNEL[servoChannel].TC_RA = timerRegister;\n  Channel[timerValue] = -1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008044c": "update_servo_timer_0008044c",
                "timer": "sequence",
                "tc": "timerCounter",
                "channel": "servoChannel",
                "uVar1": "timerValue",
                "uVar2": "servoCount",
                "RVar3": "timerRegister",
                "iVar4": "iterationIndex"
            },
            "calling": [
                "TC4_Handler",
                "TC2_Handler",
                "TC0_Handler",
                "TC3_Handler",
                "TC5_Handler"
            ],
            "called": [
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080558": {
            "entrypoint": "0x00080558",
            "current_name": "initialize_servo_handler_00080558",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeServoHandler_00080558(void)\n\n{\n  Servo_Handler(timer1,(timerConfig *)0x40084000,'\\0');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080558": "initialize_servo_handler_00080558",
                "_timer1": "timer1",
                "Tc": "timerConfig"
            },
            "calling": [],
            "called": [
                "Servo_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080568": {
            "entrypoint": "0x00080568",
            "current_name": "initialize_servo_00080568",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeServo_00080568(void)\n\n{\n  Servo_Handler(timer,(Tc *)0x40084000,'\\x01');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080568": "initialize_servo_00080568",
                "_timer2": "timer"
            },
            "calling": [],
            "called": [
                "Servo_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080578": {
            "entrypoint": "0x00080578",
            "current_name": "initialize_servo_00080578",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeServo_00080578(void)\n\n{\n  Servo_Handler(timer,(Tc *)0x40084000,'\\x02');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080578": "initialize_servo_00080578",
                "_timer3": "timer"
            },
            "calling": [],
            "called": [
                "Servo_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080588": {
            "entrypoint": "0x00080588",
            "current_name": "initialize_servo_00080588",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeServo_00080588(void)\n\n{\n  Servo_Handler(servoTimer,(Tc *)0x40080000,'\\x02');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080588": "initialize_servo_00080588",
                "_timer4": "servoTimer"
            },
            "calling": [],
            "called": [
                "Servo_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080598": {
            "entrypoint": "0x00080598",
            "current_name": "initialize_servo_handler_00080598",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeServoHandler_00080598(void)\n\n{\n  Servo_Handler(timer5,(timerConfig *)0x40080000,'\\0');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080598": "initialize_servo_handler_00080598",
                "_timer5": "timer5",
                "Tc": "timerConfig"
            },
            "calling": [],
            "called": [
                "Servo_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805a8": {
            "entrypoint": "0x000805a8",
            "current_name": "initialize_servo_000805a8",
            "code": "\n/* DWARF original prototype: Servo *  Servo(Servo * servoObj) */\n\nServo * __servoObjcall Servo::initializeServo_000805a8(Servo *servoObj)\n\n{\n  uint8_t newServoCount;\n  uint currentServoCount;\n  \n  currentServoCount = (uint)ServoCount;\n  if (currentServoCount < 0x3c) {\n    newServoCount = ServoCount + '\\x01';\n    servoObj->servoIndex = ServoCount;\n    ServoCount = newServoCount;\n    servos[currentServoCount].ticks = (SystemCoreClock / 1000000) * 0x5dc >> 5;\n    return servoObj;\n  }\n  servoObj->servoIndex = 0xff;\n  return servoObj;\n}\n\n",
            "renaming": {
                "this": "servoObj",
                "uVar1": "newServoCount",
                "uVar2": "currentServoCount",
                "FUN_000805a8": "initialize_servo_000805a8"
            },
            "calling": [
                "_GLOBAL__sub_I_steering"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805e8": {
            "entrypoint": "0x000805e8",
            "current_name": "attach_000805e8",
            "code": "\n/* DWARF original prototype: uint8_t  attach_000805e8(Servo * servo, int attach_000805e8Pin, int minPulse, int maxPulse) */\n\nuint8_t __servocall Servo::attach_000805e8(Servo *servo,int attach_000805e8Pin,int minPulse,int maxPulse)\n\n{\n  ServoPin_t servoPin;\n  timerType16_Sequence_t timerType;\n  Tc *timerCounter;\n  uint32_t timerChannel;\n  uint32_t timerID;\n  int loopVar;\n  uint servoIndex;\n  \n  if (0x3b < servo->servoIndex) goto LAB_00080660;\n  attach_000805e8PinMode(attach_000805e8Pin,1);\n  servoIndex = (uint)servo->servoIndex;\n  servoPin = servos[servoIndex].Pin;\n  servo->maxPulse = (int8_t)((0x960U - maxPulse) / 4);\n  timerChannel = servoIndex / 0xc;\n  servos[servoIndex].Pin = (ServoPin_t)((byte)servoPin & 0xc0 | (byte)attach_000805e8Pin & 0x3f);\n  servo->minPulse = (int8_t)((0x220U - minPulse) / 4);\n  loopVar = 0;\n  do {\n    if ((int)((uint)(byte)servos[loopVar + timerChannel * 0xc].Pin << 0x19) < 0) goto LAB_00080652;\n    loopVar = loopVar + 1;\n  } while (loopVar != 0xc);\n  if (timerChannel == 0) {\n    timerCounter = (Tc *)0x40084000;\n    timerID = 0x1e;\nLAB_0008064c:\n    _initISR(timerCounter,timerChannel,timerID,(IRQn_Type)timerID);\n  }\n  else {\n    if (timerChannel == 1) {\n      timerCounter = (Tc *)0x40084000;\n      timerID = 0x1f;\n      goto LAB_0008064c;\n    }\n    if (timerChannel == 2) {\n      timerCounter = (Tc *)0x40084000;\n      timerID = 0x20;\n      goto LAB_0008064c;\n    }\n    if (timerChannel == 3) {\n      timerCounter = (Tc *)0x40080000;\n      timerChannel = 2;\n      timerID = 0x1d;\n      goto LAB_0008064c;\n    }\n    if (timerChannel == 4) {\n      timerCounter = (Tc *)0x40080000;\n      timerChannel = 0;\n      timerID = 0x1b;\n      goto LAB_0008064c;\n    }\n  }\nLAB_00080652:\n  servos[servo->servoIndex].Pin = (ServoPin_t)((byte)servos[servo->servoIndex].Pin | 0x40);\nLAB_00080660:\n  return servo->servoIndex;\n}\n\n",
            "renaming": {
                "FUN_000805e8": "attach_000805e8",
                "this": "servo",
                "pin": "attachPin",
                "min": "minPulse",
                "max": "maxPulse",
                "SVar1": "servoPin",
                "timer": "timerType",
                "tc": "timerCounter",
                "channel": "timerChannel",
                "id": "timerID",
                "iVar2": "loopVar",
                "uVar3": "servoIndex"
            },
            "calling": [
                "attach"
            ],
            "called": [
                "_initISR",
                "pinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806a0": {
            "entrypoint": "0x000806a0",
            "current_name": "attach_servo_000806a0",
            "code": "\n/* DWARF original prototype: uint8_t  attach(Servo * servo_obj, int servo_pin) */\n\nuint8_t __servo_objcall Servo::attach_servo_000806a0(Servo *servo_obj,int servo_pin)\n\n{\n  uint8_t result;\n  \n  result = attach(servo_obj,servo_pin,0x220,0x960);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000806a0": "attach_servo_000806a0",
                "this": "servo_obj",
                "pin": "servo_pin",
                "uVar1": "result"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "attach"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806ac": {
            "entrypoint": "0x000806ac",
            "current_name": "write_microseconds_000806ac",
            "code": "\n/* DWARF original prototype: void  writeMicroseconds_000806ac(Servo * servo, int microseconds) */\n\nvoid __servocall Servo::writeMicroseconds_000806ac(Servo *servo,int microseconds)\n\n{\n  byte *byteBuffer;\n  int rangeToMin;\n  int rangeToMax;\n  \n  if (servo->servoIndex < 0x3c) {\n    rangeToMin = 0x88 - servo->min;\n    rangeToMax = rangeToMin * 4;\n    if ((microseconds + rangeToMin * -4 < 0 == SBORROW4(microseconds,rangeToMax)) &&\n       (rangeToMax = (600 - servo->max) * 4, microseconds <= rangeToMax)) {\n      rangeToMax = microseconds;\n    }\n    servos[servo->servoIndex].ticks = (SystemCoreClock / 1000000) * (rangeToMax + -2) >> 5;\n  }\n  return;\n}\n\n",
            "renaming": {
                "this": "servo",
                "value": "microseconds",
                "channel": "byteBuffer",
                "iVar1": "rangeToMin",
                "iVar2": "rangeToMax",
                "FUN_000806ac": "write_microseconds_000806ac"
            },
            "calling": [
                "write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806f8": {
            "entrypoint": "0x000806f8",
            "current_name": "calculate_and_write_servo_000806f8",
            "code": "\n/* DWARF original prototype: void  write(Servo * servo, int value) */\n\nssize_t __servocall Servo::calculateAndWriteServo_000806f8(Servo *servo,int fileDescriptor,void *buffer,size_t bufferSize)\n\n{\n  if (fileDescriptor < 0x220) {\n    if (0xb3 < fileDescriptor) {\n      fileDescriptor = 0xb4;\n    }\n    fileDescriptor = map(fileDescriptor & ~(fileDescriptor >> 0x1f),0,0xb4,(0x88 - servo->min) * 4,(600 - servo->max) * 4);\n  }\n  writeMicroseconds(servo,fileDescriptor);\n  return (ssize_t)servo;\n}\n\n",
            "renaming": {
                "this": "servo",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__n": "bufferSize",
                "FUN_000806f8": "calculate_and_write_servo_000806f8"
            },
            "calling": [
                "straightAndStop",
                "loop"
            ],
            "called": [
                "writeMicroseconds",
                "map"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008073a": {
            "entrypoint": "0x0008073a",
            "current_name": "FUNC_0008073a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_0008073a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008073a": "FUNC_0008073a"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008073c": {
            "entrypoint": "0x0008073c",
            "current_name": "handle_serial_interrupt_0008073c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleSerialInterrupt_0008073c(void)\n\n{\n  UARTClass::IrqHandler(serialPortPtr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008073c": "handle_serial_interrupt_0008073c",
                "&Serial": "serialPortPtr"
            },
            "calling": [],
            "called": [
                "IrqHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080748": {
            "entrypoint": "0x00080748",
            "current_name": "FUNC_00080748",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_00080748(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080748": "FUNC_00080748"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074a": {
            "entrypoint": "0x0008074a",
            "current_name": "FUNC_0008074a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_0008074a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074a": "FUNC_0008074a"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074c": {
            "entrypoint": "0x0008074c",
            "current_name": "FUNC_0008074c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_0008074c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074c": "FUNC_0008074c"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080750": {
            "entrypoint": "0x00080750",
            "current_name": "handle_serial1_irq_00080750",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleSerial1IRQ_00080750(void)\n\n{\n  UARTClass::IrqHandler(serial1Instance);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080750": "handle_serial1_irq_00080750",
                "&Serial1.super_UARTClass": "serial1Instance"
            },
            "calling": [],
            "called": [
                "IrqHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008075c": {
            "entrypoint": "0x0008075c",
            "current_name": "handle_serial2_irq_0008075c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleSerial2Irq_0008075c(void)\n\n{\n  handleSerialIrq(&serial2Instance);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008075c": "handle_serial2_irq_0008075c",
                "UARTClass::IrqHandler": "handleSerialIrq",
                "Serial2.super_UARTClass": "serial2Instance"
            },
            "calling": [],
            "called": [
                "IrqHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080768": {
            "entrypoint": "0x00080768",
            "current_name": "send_data_to_serial3_00080768",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid sendDataToSerial3_00080768(void)\n\n{\n  handleSerial3Interrupt(&serial3Object);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080768": "send_data_to_serial3_00080768",
                "Serial3.super_UARTClass": "serial3Object",
                "UARTClass::IrqHandler": "handleSerial3Interrupt"
            },
            "calling": [],
            "called": [
                "IrqHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080774": {
            "entrypoint": "0x00080774",
            "current_name": "initialize_system_00080774",
            "code": "\n\n\nint initializeSystem_00080774(EVP_PKEY_CTX *context)\n\n{\n  int returnValue;\n  uint32_t pinValue;\n  uint32_t nextPinValue;\n  \n  SystemInit();\n  _DAT_e000e014 = SystemCoreClock / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  __libc_init_array();\n  pinValue = 0;\n  do {\n    nextPinValue = pinValue + 1;\n    digitalWrite(pinValue,0);\n    pinValue = nextPinValue;\n  } while (nextPinValue != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  PIO_Configure(&DAT_400e0e00,1,0x300,0);\n  digitalWrite(0,1);\n  PIO_Configure(&DAT_400e0e00,1,0xc00,0);\n  PIO_Configure(&DAT_400e0e00,1,0x3000,0);\n  PIO_Configure(&DAT_400e1400,2,0x30,0);\n  PIO_Configure(&DAT_400e1000,1,0xc00,0);\n  PIO_Configure(&DAT_400e0e00,1,3,0);\n  PIO_Configure(&DAT_400e1000,1,0xc000,0);\n  pmc_enable_periph_clk(0x25);\n  adc_init(0x400c0000,SystemCoreClock,20000000,0xc);\n  adc_configure_timing(0x400c0000,0,0x300000,1);\n  adc_configure_trigger(0x400c0000,0,0);\n  adc_disable_interrupt(0x400c0000,0xffffffff);\n  returnValue = adc_disable_all_channel(0x400c0000);\n  analogOutputInit();\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00080774": "initialize_system_00080774",
                "ctx": "context",
                "iVar1": "returnValue",
                "ulPin": "pinValue",
                "uVar2": "nextPinValue"
            },
            "calling": [
                "main"
            ],
            "called": [
                "adc_disable_all_channel",
                "SystemInit",
                "pmc_enable_periph_clk",
                "digitalWrite",
                "adc_configure_trigger",
                "adc_disable_interrupt",
                "analogOutputInit",
                "__libc_init_array",
                "adc_configure_timing",
                "adc_init",
                "PIO_Configure"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008089c": {
            "entrypoint": "0x0008089c",
            "current_name": "initialize_serial_communication_0008089c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeSerialCommunication_0008089c(void)\n\n{\n  RingBuffer::RingBuffer(rx_buffer1);\n  RingBuffer::RingBuffer(tx_buffer1);\n  UARTClass::UARTClass(serialPort1,(Uart *)0x400e0800,UART_IRQn,8,rx_buffer1,tx_buffer1);\n  RingBuffer::RingBuffer(rx_buffer2);\n  RingBuffer::RingBuffer(rx_buffer3);\n  RingBuffer::RingBuffer(rx_buffer4);\n  RingBuffer::RingBuffer(tx_buffer2);\n  RingBuffer::RingBuffer(tx_buffer3);\n  RingBuffer::RingBuffer(tx_buffer4);\n  USARTClass::USARTClass(serialPort2,(Usart *)0x40098000,USART0_IRQn,0x11,rx_buffer2,tx_buffer2);\n  USARTClass::USARTClass(serialPort3,(Usart *)0x4009c000,USART1_IRQn,0x12,rx_buffer3,tx_buffer3);\n  USARTClass::USARTClass(serialPort4,(Usart *)0x400a4000,USART3_IRQn,0x14,rx_buffer4,tx_buffer4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008089c": "initialize_serial_communication_0008089c",
                "&rx_buffer1": "rx_buffer1",
                "&tx_buffer1": "tx_buffer1",
                "&Serial": "serialPort1",
                "&rx_buffer2": "rx_buffer2",
                "&tx_buffer2": "tx_buffer2",
                "&Serial1": "serialPort2",
                "&rx_buffer3": "rx_buffer3",
                "&tx_buffer3": "tx_buffer3",
                "&Serial2": "serialPort3",
                "&rx_buffer4": "rx_buffer4",
                "&tx_buffer4": "tx_buffer4",
                "&Serial3": "serialPort4"
            },
            "calling": [],
            "called": [
                "UARTClass",
                "USARTClass",
                "RingBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080970": {
            "entrypoint": "0x00080970",
            "current_name": "check_and_process_serial_events_00080970",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid checkAndProcessSerialEvents_00080970(void)\n\n{\n  int availableCount;\n  \n  availableCount = UARTClass::available(&Serial);\n  if (availableCount != 0) {\n    serialEvent();\n  }\n  availableCount = UARTClass::available(&Serial1.super_UARTClass);\n  if (availableCount != 0) {\n    serialEvent1();\n  }\n  availableCount = UARTClass::available(&Serial2.super_UARTClass);\n  if (availableCount != 0) {\n    serialEvent2();\n  }\n  availableCount = UARTClass::available(&Serial3.super_UARTClass);\n  if (availableCount != 0) {\n    serialEvent3();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080970": "check_and_process_serial_events_00080970",
                "iVar1": "availableCount"
            },
            "calling": [
                "main"
            ],
            "called": [
                "serialEvent",
                "serialEvent1",
                "serialEvent2",
                "available",
                "serialEvent3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809b4": {
            "entrypoint": "0x000809b4",
            "current_name": "update_parameter_000809b4",
            "code": "\nvoid updateParameter_000809b4(int baseAddress,undefined4 value,int isOffset)\n\n{\n  if (isOffset != 0) {\n    *(undefined4 *)(baseAddress + 100) = value;\n    return;\n  }\n  *(undefined4 *)(baseAddress + 0x60) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809b4": "update_parameter_000809b4",
                "param_1": "baseAddress",
                "param_2": "value",
                "param_3": "isOffset"
            },
            "calling": [
                "digitalWrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809be": {
            "entrypoint": "0x000809be",
            "current_name": "update_param_000809be",
            "code": "\nvoid updateParam_000809be(int paramPtr,undefined4 flag,uint value)\n\n{\n  uint updatedValue;\n  \n  *(uint *)(paramPtr + 0x44) = value;\n  switch(flag) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updatedValue = *(uint *)(paramPtr + 0x70) & *(uint *)(paramPtr + 0x70) & ~value;\n    break;\n  case 2:\n    updatedValue = *(uint *)(paramPtr + 0x70) | value;\n    break;\n  default:\n    goto switchD_000809c4_caseD_6;\n  }\n  *(uint *)(paramPtr + 0x70) = updatedValue;\nswitchD_000809c4_caseD_6:\n  *(uint *)(paramPtr + 4) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809be": "update_param_000809be",
                "param_1": "paramPtr",
                "param_2": "flag",
                "param_3": "value",
                "uVar1": "updatedValue"
            },
            "calling": [
                "PIO_Configure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809e4": {
            "entrypoint": "0x000809e4",
            "current_name": "set_parameters_000809e4",
            "code": "\nvoid setParameters_000809e4(undefined4 *outputArray,undefined4 value,uint bitmask)\n\n{\n  bool isNegative;\n  \n  isNegative = (int)(bitmask << 0x1f) < 0;\n  outputArray[17] = value;\n  if (isNegative) {\n    output_array[25] = value;\n  }\n  if (!isNegative) {\n    output_array[24] = value;\n  }\n  isNegative = (bitmask & 10) != 0;\n  if (isNegative) {\n    output_array[8] = value;\n  }\n  if (!isNegative) {\n    output_array[9] = value;\n  }\n  if (((int)(bitmask << 0x1e) < 0) || ((int)(bitmask << 0x1c) < 0)) {\n    output_array[32] = value;\n  }\n  output_array[5] = value;\n  *outputArray = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809e4": "set_parameters_000809e4",
                "param_1": "outputArray",
                "param_2": "value",
                "param_3": "bitmask",
                "bVar1": "isNegative",
                "param_1[0x11]": "outputArray[17]",
                "param_1[0x19]": "output_array[25]",
                "param_1[0x18]": "output_array[24]",
                "param_1[8]": "output_array[8]",
                "param_1[9]": "output_array[9]",
                "param_1[0x20]": "output_array[32]",
                "param_1[5]": "output_array[5]"
            },
            "calling": [
                "PIO_Configure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a0a": {
            "entrypoint": "0x00080a0a",
            "current_name": "initialize_params_00080a0a",
            "code": "\nvoid initializeParams_00080a0a(undefined4 *paramsArray,undefined4 value,int condition1,int condition2,int condition3)\n\n{\n  paramsArray[0x11] = value;\n  if (condition3 == 0) {\n    paramsArray[0x18] = value;\n  }\n  else {\n    paramsArray[0x19] = value;\n  }\n  if (condition2 == 0) {\n    paramsArray[0x15] = value;\n  }\n  else {\n    paramsArray[0x14] = value;\n  }\n  if (condition1 == 0) {\n    paramsArray[0xd] = value;\n  }\n  else {\n    paramsArray[0xc] = value;\n  }\n  paramsArray[4] = value;\n  *paramsArray = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a0a": "initialize_params_00080a0a",
                "param_1": "paramsArray",
                "param_2": "value",
                "param_3": "condition1",
                "param_4": "condition2",
                "param_5": "condition3",
                "param_1[0xd]": "paramsArray[0xd]",
                "param_1[0xc]": "paramsArray[0xc]",
                "param_1[4]": "paramsArray[4]"
            },
            "calling": [
                "digitalWrite",
                "PIO_Configure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a30": {
            "entrypoint": "0x00080a30",
            "current_name": "set_pio_config_00080a30",
            "code": "\nundefined4 setPIOConfig_00080a30(int port,int mode,undefined4 config,uint flags)\n\n{\n  bool isNegativeFlag;\n  \n  switch(mode) {\n  case 1:\n  case 2:\n    setPeripheral(port,mode,config);\n    isNegativeFlag = (int)(flags << 0x1f) < 0;\n    *(undefined4 *)(port + 0x44) = config;\n    if (isNegativeFlag) {\n      *(undefined4 *)(port + 100) = config;\n    }\n    if (!isNegativeFlag) {\n      *(undefined4 *)(port + 0x60) = config;\n    }\n    break;\n  case 3:\n    setInput(port,config,flags,0x809e5,port);\n    break;\n  case 4:\n  case 5:\n    setOutput(port,config,mode == 5,(flags << 0x1d) >> 0x1f,flags & 1,mode,config\n                 );\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080a30": "set_pio_config_00080a30",
                "param_1": "port",
                "param_2": "mode",
                "param_3": "config",
                "param_4": "flags",
                "bVar1": "isNegativeFlag",
                "PIO_SetPeripheral": "setPeripheral",
                "PIO_SetInput": "setInput",
                "PIO_SetOutput": "setOutput"
            },
            "calling": [
                "init",
                "pinMode"
            ],
            "called": [
                "PIO_SetInput",
                "PIO_SetOutput",
                "PIO_SetPeripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a94": {
            "entrypoint": "0x00080a94",
            "current_name": "bitwise_and_check_00080a94",
            "code": "\nuint bitwiseAndCheck_00080a94(int input1,uint input2)\n\n{\n  uint output;\n  \n  output = *(uint *)(input1 + 8) & input2;\n  if (output != 0) {\n    if ((input2 & *(uint *)(input1 + 0x18)) == 0) {\n      output = 0;\n    }\n    else {\n      output = 1;\n    }\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_00080a94": "bitwise_and_check_00080a94",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "output"
            },
            "calling": [
                "digitalWrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "check_and_set_bit_00080aa8",
            "code": "\n\n\nundefined4 checkAndSetBit_00080aa8(uint value)\n\n{\n  uint bitMask;\n  \n  if (value < 0x2d) {\n    if (value < 0x20) {\n      bitMask = 1 << (value & 0xff);\n      if ((bitMask & _DAT_400e0618) != bitMask) {\n        _DAT_400e0610 = bitMask;\n      }\n    }\n    else {\n      bitMask = 1 << (value - 0x20 & 0xff);\n      if ((bitMask & _DAT_400e0708) != bitMask) {\n        _DAT_400e0700 = bitMask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "check_and_set_bit_00080aa8",
                "param_1": "value",
                "uVar1": "bitMask"
            },
            "calling": [
                "init",
                "_initISR",
                "init",
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aec": {
            "entrypoint": "0x00080aec",
            "current_name": "check_and_set_bit_00080aec",
            "code": "\n\n\nundefined4 checkAndSetBit_00080aec(uint bitIndex)\n\n{\n  uint bitMask;\n  uint bitValue;\n  \n  if (bitIndex < 0x2d) {\n    if (bitIndex < 0x20) {\n      bitMask = 1 << (bitIndex & 0xff);\n      bitValue = _DAT_400e0618 & bitMask;\n      if (bitValue == bitMask) {\n        _DAT_400e0614 = bitValue;\n      }\n    }\n    else {\n      bitMask = 1 << (bitIndex - 0x20 & 0xff);\n      bitValue = _DAT_400e0708 & bitMask;\n      if (bitValue == bitMask) {\n        _DAT_400e0704 = bitValue;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080aec": "check_and_set_bit_00080aec",
                "param_1": "bitIndex",
                "uVar1": "bitMask",
                "uVar2": "bitValue"
            },
            "calling": [
                "pinMode",
                "end"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b2c": {
            "entrypoint": "0x00080b2c",
            "current_name": "configure_tc_00080b2c",
            "code": "\nvoid configureTC_00080b2c(undefined4 param1,uint param2,char *param3)\n\n{\n  int channelOffset;\n  int channelAddress;\n  undefined8 combinedParams;\n  \n  combinedParams = CONCAT44(param2,param1);\n  if (2 < param2) {\n    param3 = \"TC_Configure\";\n    combinedParams = __assert_func(\"../source/tc.c\",0x40,\"TC_Configure\",\n                          \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\");\n  }\n  channelOffset = (int)((ulonglong)combinedParams >> 0x20) * 0x40;\n  channelAddress = (int)combinedParams + channelOffset;\n  *(undefined4 *)((int)combinedParams + channelOffset) = 2;\n  *(undefined4 *)(channelAddress + 0x28) = 0xffffffff;\n  *(char **)(channelAddress + 4) = param3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b2c": "configure_tc_00080b2c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "channelOffset",
                "iVar2": "channelAddress",
                "uVar3": "combinedParams"
            },
            "calling": [
                "_initISR"
            ],
            "called": [
                "__assert_func"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b64": {
            "entrypoint": "0x00080b64",
            "current_name": "set_channel_value_00080b64",
            "code": "\nvoid setChannelValue_00080b64(undefined4 channelData,uint dwChannel)\n\n{\n  undefined8 combinedValue;\n  \n  combinedValue = CONCAT44(dwChannel,channelData);\n  if (2 < dwChannel) {\n    combinedValue = __assert_func(\"../source/tc.c\",0x5c,\"TC_Start\",\n                          \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\");\n  }\n  *(undefined4 *)((int)combinedValue + (int)((ulonglong)combinedValue >> 0x20) * 0x40) = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b64": "set_channel_value_00080b64",
                "param_1": "channelData",
                "param_2": "dwChannel",
                "uVar1": "combinedValue"
            },
            "calling": [
                "_initISR"
            ],
            "called": [
                "__assert_func"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b90": {
            "entrypoint": "0x00080b90",
            "current_name": "set_param_value_00080b90",
            "code": "\nvoid setParamValue_00080b90(int baseAddress,int index,undefined4 value)\n\n{\n  *(undefined4 *)(baseAddress + index * 0x40 + 0x14) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b90": "set_param_value_00080b90",
                "param_1": "baseAddress",
                "param_2": "index",
                "param_3": "value"
            },
            "calling": [
                "_initISR"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b98": {
            "entrypoint": "0x00080b98",
            "current_name": "initialize_system_00080b98",
            "code": "\n\n\nvoid initializeSystem_00080b98(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  systemClock = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b98": "initialize_system_00080b98",
                "SystemCoreClock": "systemClock"
            },
            "calling": [
                "init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c20": {
            "entrypoint": "0x00080c20",
            "current_name": "copy_memory_and_initialize_00080c20",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080c6a) */\n\n\nvoid copyMemoryAndInitialize_00080c20(void)\n\n{\n  int offset;\n  undefined4 *ptr;\n  \n  for (offset = 0; source + offset < destination; offset = offset + 4) {\n    *(undefined4 *)(source + offset) = *(undefined4 *)(sourceStart + offset);\n  }\n  for (ptr = destination; ptr < &_ebss; ptr = ptr + 1) {\n    *ptr = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  startMain();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080c20": "copy_memory_and_initialize_00080c20",
                "iVar1": "offset",
                "puVar2": "ptr",
                "banzai": "source",
                "&completed_7857": "destination",
                "&_etext": "sourceStart",
                "main": "startMain"
            },
            "calling": [],
            "called": [
                "banzai",
                "main"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c98": {
            "entrypoint": "0x00080c98",
            "current_name": "calculate_position_00080c98",
            "code": "\nundefined4 calculatePosition_00080c98(undefined4 *positionArray,uint inputSize,int divisor,int multiplier)\n\n{\n  uint quotient;\n  uint index;\n  uint thresholds [16];\n  \n  thresholds[0] = 0;\n  thresholds[1] = 8;\n  thresholds[2] = 0x10;\n  thresholds[3] = 0x18;\n  thresholds[4] = 0x40;\n  thresholds[5] = 0x50;\n  thresholds[6] = 0x60;\n  thresholds[7] = 0x70;\n  thresholds[8] = 0x200;\n  thresholds[9] = 0x240;\n  thresholds[10] = 0x280;\n  thresholds[11] = 0x2c0;\n  thresholds[12] = 0x300;\n  thresholds[13] = 0x340;\n  thresholds[14] = 0x380;\n  thresholds[15] = 0x3c0;\n  *positionArray = 1;\n  positionArray[1] = 0;\n  positionArray[0x48] = 0x202;\n  positionArray[0x41] = 0;\n  positionArray[0x45] = 0;\n  quotient = inputSize / (uint)(divisor * 2);\n  if (inputSize == divisor * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(multiplier * (int)(((ulonglong)inputSize / (ulonglong)((quotient + 1) * 2)) / 1000000)) <=\n        thresholds[index]) {\n      positionArray[1] = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | positionArray[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080c98": "calculate_position_00080c98",
                "param_1": "positionArray",
                "param_2": "inputSize",
                "param_3": "divisor",
                "param_4": "multiplier",
                "uVar1": "quotient",
                "uVar2": "index",
                "local_58": "thresholds"
            },
            "calling": [
                "init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d30": {
            "entrypoint": "0x00080d30",
            "current_name": "update_flag_00080d30",
            "code": "\nvoid updateFlag_00080d30(int ptr,uint data,uint flag)\n\n{\n  *(uint *)(ptr + 4) = data | *(uint *)(ptr + 4) | (flag & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d30": "update_flag_00080d30",
                "param_1": "ptr",
                "param_2": "data",
                "param_3": "flag"
            },
            "calling": [
                "init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d3e": {
            "entrypoint": "0x00080d3e",
            "current_name": "update_register_00080d3e",
            "code": "\nvoid updateRegister_00080d3e(int registerAddress,uint value,uint mask1,uint mask2)\n\n{\n  *(uint *)(registerAddress + 4) =\n       mask1 | *(uint *)(registerAddress + 4) | (value & 0xf) << 0x18 | (mask2 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d3e": "update_register_00080d3e",
                "param_1": "registerAddress",
                "param_2": "value",
                "param_3": "mask1",
                "param_4": "mask2"
            },
            "calling": [
                "init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d58": {
            "entrypoint": "0x00080d58",
            "current_name": "set_bit_00080d58",
            "code": "\nvoid setBit_00080d58(int address,uint bitIndex)\n\n{\n  *(int *)(address + 0x14) = 1 << (bitIndex & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d58": "set_bit_00080d58",
                "param_1": "address",
                "param_2": "bitIndex"
            },
            "calling": [
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d62": {
            "entrypoint": "0x00080d62",
            "current_name": "set_default_value_00080d62",
            "code": "\nvoid setDefaultValue_00080d62(int baseAddress)\n\n{\n  *(undefined4 *)(baseAddress + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d62": "set_default_value_00080d62",
                "param_1": "baseAddress"
            },
            "calling": [
                "init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d6a": {
            "entrypoint": "0x00080d6a",
            "current_name": "set_memory_value_00080d6a",
            "code": "\nvoid setMemoryValue_00080d6a(int memoryAddress,undefined4 newValue)\n\n{\n  *(undefined4 *)(memoryAddress + 0x28) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d6a": "set_memory_value_00080d6a",
                "param_1": "memoryAddress",
                "param_2": "newValue"
            },
            "calling": [
                "init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d70": {
            "entrypoint": "0x00080d70",
            "current_name": "execute_isr_00080d70",
            "code": "\nvoid execute_isr_00080d70(void)\n\n{\n  if (isr_function != (code *)0x0) {\n    (*isr_function)();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d70": "execute_isr_00080d70",
                "gpf_isr": "isr_function"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d80": {
            "entrypoint": "0x00080d80",
            "current_name": "process_isr_00080d80",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid processIsr_00080d80(void)\n\n{\n  uint8_t zerosCount;\n  uint32_t interruptStatus;\n  uint remainingZeros;\n  \n  for (interruptStatus = _DAT_400e0e4c; (uint)LZCOUNT(interruptStatus) < 0x20; interruptStatus = interruptStatus & ~(1 << remainingZeros)) {\n    remainingZeros = 0x1fU - LZCOUNT(interruptStatus) & 0xff;\n    if (interruptCallbacksPioA[remainingZeros] != (interruptCB)0x0) {\n      (*interruptCallbacksPioA[remainingZeros])();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d80": "process_isr_00080d80",
                "isr": "interruptStatus",
                "leading_zeros": "zerosCount",
                "uVar1": "remainingZeros",
                "callbacksPioA": "interruptCallbacksPioA"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080db8": {
            "entrypoint": "0x00080db8",
            "current_name": "handle_interrupts_00080db8",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid handleInterrupts_00080db8(void)\n\n{\n  uint8_t numLeadingZeros;\n  uint32_t interruptStatusRegister;\n  uint shiftValue;\n  \n  for (interruptStatusRegister = _DAT_400e104c; (uint)LZCOUNT(interruptStatusRegister) < 0x20; interruptStatusRegister = interruptStatusRegister & ~(1 << shiftValue)) {\n    shiftValue = 0x1fU - LZCOUNT(interruptStatusRegister) & 0xff;\n    if (callbacksPioB[shiftValue] != (interruptCB)0x0) {\n      (*callbacksPioB[shiftValue])();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080db8": "handle_interrupts_00080db8",
                "isr": "interruptStatusRegister",
                "leading_zeros": "numLeadingZeros",
                "uVar1": "shiftValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080df0": {
            "entrypoint": "0x00080df0",
            "current_name": "process_interrupts_00080df0",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid processInterrupts_00080df0(void)\n\n{\n  uint8_t numLeadingZeros;\n  uint32_t interruptStatus;\n  uint remainingBits;\n  \n  for (interruptStatus = _DAT_400e124c; (uint)LZCOUNT(interruptStatus) < 0x20; interruptStatus = interruptStatus & ~(1 << remainingBits)) {\n    remainingBits = 0x1fU - LZCOUNT(interruptStatus) & 0xff;\n    if (callbacksPioC[remainingBits] != (interruptCB)0x0) {\n      (*callbacksPioC[remainingBits])();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080df0": "process_interrupts_00080df0",
                "leading_zeros": "numLeadingZeros",
                "isr": "interruptStatus",
                "uVar1": "remainingBits"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e28": {
            "entrypoint": "0x00080e28",
            "current_name": "process_interrupts_00080e28",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid processInterrupts_00080e28(void)\n\n{\n  uint8_t leading_zeros;\n  uint32_t interruptStatus;\n  uint leadingZerosCount;\n  \n  for (interruptStatus = _DAT_400e144c; (uint)LZCOUNT(interruptStatus) < 0x20; interruptStatus = interruptStatus & ~(1 << leadingZerosCount)) {\n    leadingZerosCount = 0x1fU - LZCOUNT(interruptStatus) & 0xff;\n    if (interruptCallbacks[leadingZerosCount] != (interruptCB)0x0) {\n      (*interruptCallbacks[leadingZerosCount])();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080e28": "process_interrupts_00080e28",
                "isr": "interruptStatus",
                "uVar1": "leadingZerosCount",
                "callbacksPioD": "interruptCallbacks"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e60": {
            "entrypoint": "0x00080e60",
            "current_name": "infinite_loop_00080e60",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid infiniteLoop_00080e60(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080e60": "infinite_loop_00080e60"
            },
            "calling": [
                "__halt"
            ],
            "called": [
                "__halt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e62": {
            "entrypoint": "0x00080e62",
            "current_name": "infinite_loop_00080e62",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid infiniteLoop_00080e62(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080e62": "infinite_loop_00080e62"
            },
            "calling": [],
            "called": [
                "__halt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e66": {
            "entrypoint": "0x00080e66",
            "current_name": "infinite_loop_00080e66",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid infinite_loop_00080e66(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080e66": "infinite_loop_00080e66"
            },
            "calling": [],
            "called": [
                "__halt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e6a": {
            "entrypoint": "0x00080e6a",
            "current_name": "reset_and_increment_ticks_00080e6a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid resetAndIncrementTicks_00080e6a(void)\n\n{\n  int result;\n  \n  result = __false();\n  if (result == 0) {\n    resetTicks();\n    incrementTimeTicks();\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080e6a": "reset_and_increment_ticks_00080e6a",
                "iVar1": "result",
                "tickReset": "resetTicks",
                "TimeTick_Increment": "incrementTimeTicks"
            },
            "calling": [],
            "called": [
                "tickReset",
                "TimeTick_Increment",
                "__false"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e80": {
            "entrypoint": "0x00080e80",
            "current_name": "calculate_result_00080e80",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint calculate_result_00080e80(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080e80": "calculate_result_00080e80"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e84": {
            "entrypoint": "0x00080e84",
            "current_name": "do_nothing_loop_00080e84",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid doNothingLoop_00080e84(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080e84": "do_nothing_loop_00080e84"
            },
            "calling": [
                "PendSV_Handler",
                "__halt",
                "SVC_Handler"
            ],
            "called": [
                "__halt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e88": {
            "entrypoint": "0x00080e88",
            "current_name": "expand_heap_00080e88",
            "code": "\nvoid * expandHeap_00080e88(intptr_t delta)\n\n{\n  uchar *previousHeap;\n  uchar *previousHeap;\n  \n  if (currentHeap == (uchar *)0x0) {\n    currentHeap = &endOfBssSegment;\n  }\n  previousHeap = currentHeap;\n  currentHeap = currentHeap + delta;\n  return previousHeap;\n}\n\n",
            "renaming": {
                "FUN_00080e88": "expand_heap_00080e88",
                "__delta": "delta",
                "puVar1": "previousHeap",
                "prev_heap": "previousHeap",
                "_sbrk::heap": "currentHeap",
                "_ebss": "endOfBssSegment"
            },
            "calling": [
                "_sbrk_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ea4": {
            "entrypoint": "0x00080ea4",
            "current_name": "copy_string_00080ea4",
            "code": "\nint copyString_00080ea4(char *source,char *destination)\n\n{\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_00080ea4": "copy_string_00080ea4",
                "__from": "source",
                "__to": "destination"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eaa": {
            "entrypoint": "0x00080eaa",
            "current_name": "check_file_status_00080eaa",
            "code": "\nint checkFileStatus_00080eaa(int fileDescriptor)\n\n{\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_00080eaa": "check_file_status_00080eaa",
                "__fd": "fileDescriptor"
            },
            "calling": [
                "_close_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eb0": {
            "entrypoint": "0x00080eb0",
            "current_name": "set_file_device_flags_00080eb0",
            "code": "\nint setFileDeviceFlags_00080eb0(int fileDescriptor,stat *fileStat)\n\n{\n  *(undefined4 *)((int)&fileStat->device + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080eb0": "set_file_device_flags_00080eb0",
                "__fd": "fileDescriptor",
                "__buf": "fileStat",
                "st_dev": "device"
            },
            "calling": [
                "_fstat_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eba": {
            "entrypoint": "0x00080eba",
            "current_name": "check_file_descriptor_00080eba",
            "code": "\nint check_file_descriptor_00080eba(int file_descriptor)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080eba": "check_file_descriptor_00080eba",
                "__fd": "file_descriptor"
            },
            "calling": [
                "_isatty_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ebe": {
            "entrypoint": "0x00080ebe",
            "current_name": "get_file_offset_00080ebe",
            "code": "\n__off_t getFileOffset_00080ebe(int fileDescriptor,__off_t offset,int origin)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ebe": "get_file_offset_00080ebe",
                "__fd": "fileDescriptor",
                "__offset": "offset",
                "__whence": "origin"
            },
            "calling": [
                "_lseek_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec2": {
            "entrypoint": "0x00080ec2",
            "current_name": "do_nothing_00080ec2",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint do_nothing_00080ec2(int file_descriptor,char *unused_pointer,int unused_length)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ec2": "do_nothing_00080ec2",
                "file_UNUSED": "file_descriptor",
                "ptr_UNUSED": "unused_pointer",
                "len_UNUSED": "unused_length"
            },
            "calling": [
                "_read_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec8": {
            "entrypoint": "0x00080ec8",
            "current_name": "process_data_00080ec8",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nint process_data_00080ec8(int file_descriptor,char *data,int length)\n\n{\n  int index;\n  \n  for (index = 0; index < length; index = index + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)(byte)data[index];\n  }\n  return length & ~(length >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_00080ec8": "process_data_00080ec8",
                "file_UNUSED": "file_descriptor",
                "ptr": "data",
                "len": "length",
                "iVar1": "index"
            },
            "calling": [
                "_write_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eec": {
            "entrypoint": "0x00080eec",
            "current_name": "exit_with_status_00080eec",
            "code": "\nvoid exitWithStatus_00080eec(int status)\n\n{\n  iprintf(\"Exiting with status %d.\\n\",status);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080eec": "exit_with_status_00080eec",
                "__status": "status"
            },
            "calling": [
                "abort"
            ],
            "called": [
                "iprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080efc": {
            "entrypoint": "0x00080efc",
            "current_name": "FUNC_00080efc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_00080efc(int pid_UNUSED,int sig_UNUSED)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080efc": "FUNC_00080efc"
            },
            "calling": [
                "_kill_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080efe": {
            "entrypoint": "0x00080efe",
            "current_name": "get_process_id_00080efe",
            "code": "\n\n\nprocess_id get_process_id_00080efe(void)\n\n{\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_00080efe": "get_process_id_00080efe",
                "__pid_t": "process_id"
            },
            "calling": [
                "_getpid_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f04": {
            "entrypoint": "0x00080f04",
            "current_name": "get_tick_count_00080f04",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getTickCount_00080f04(void)\n\n{\n  return tickCount;\n}\n\n",
            "renaming": {
                "FUN_00080f04": "get_tick_count_00080f04",
                "_dwTickCount": "tickCount"
            },
            "calling": [
                "timedRead"
            ],
            "called": [
                "GetTickCount"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f08": {
            "entrypoint": "0x00080f08",
            "current_name": "FUNC_00080f08",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_00080f08(uint32_t ms)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080f08": "FUNC_00080f08"
            },
            "calling": [
                "loop",
                "setup",
                "main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080f0a": {
            "entrypoint": "0x00080f0a",
            "current_name": "FUNC_00080f0a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_00080f0a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080f0a": "FUNC_00080f0a"
            },
            "calling": [
                "init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080f0c": {
            "entrypoint": "0x00080f0c",
            "current_name": "configure_pin_00080f0c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configurePin_00080f0c(uint32_t pin,uint32_t mode)\n\n{\n  undefined4 temp;\n  byte pinStatus;\n  byte pinStatusMask;\n  Pio *pioPtr;\n  \n  if (g_APinDescription[pin].pinType != PIO_NOT_A_PIN) {\n    if ((g_pinStatus[pin] & 0xf) == 4) {\n      adc_disable_channel(0x400c0000,g_APinDescription[pin].ulADCChannelNumber);\n    }\n    pinStatusMask = g_pinStatus[pin];\n    pinStatus = pinStatusMask & 0xf;\n    if ((pinStatus < 3) && (pinStatusMask != 0)) {\n      if (pinStatus == 2) {\n        if (mode == 0) {\n          return;\n        }\n      }\n      else if (pinStatus == 1) {\n        if (mode == 2) {\n          return;\n        }\n      }\n      else if (pinStatus == 3) {\n        if (mode == 1) {\n          return;\n        }\n        goto LAB_00080f68;\n      }\n    }\n    if (mode != 1) {\nLAB_00080f68:\n      if (mode == 0) {\n        pmc_enable_periph_clk(g_APinDescription[pin].ulPeripheralId);\n        PIO_Configure(g_APinDescription[pin].pPort,3,g_APinDescription[pin].pin,0);\n        pinStatusMask = g_pinStatus[pin] & 0xf0 | 2;\n      }\n      else {\n        if (mode != 2) {\n          return;\n        }\n        pmc_enable_periph_clk(g_APinDescription[pin].ulPeripheralId);\n        PIO_Configure(g_APinDescription[pin].pPort,3,g_APinDescription[pin].pin,1);\n        pinStatusMask = g_pinStatus[pin] & 0xf0 | 1;\n      }\n      g_pinStatus[pin] = pinStatusMask;\n      return;\n    }\n    pioPtr = g_APinDescription[pin].pPort;\n    if (pinStatusMask >> 4 == 0) {\n      temp = 4;\n    }\n    else {\n      temp = 5;\n    }\n    PIO_Configure(pioPtr,temp,g_APinDescription[pin].pin,\n                  g_APinDescription[pin].pinConfiguration);\n    g_pinStatus[pin] = g_pinStatus[pin] & 0xf0 | 3;\n    if (pioPtr->PIO_OSR == 0xffffffff) {\n      pmc_disable_periph_clk(g_APinDescription[pin].ulPeripheralId);\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080f0c": "configure_pin_00080f0c",
                "ulPin": "pin",
                "ulMode": "mode",
                "uVar1": "temp",
                "bVar2": "pinStatus",
                "bVar3": "pinStatusMask",
                "pPVar4": "pioPtr"
            },
            "calling": [
                "digitalWrite",
                "setup",
                "attach"
            ],
            "called": [
                "pmc_enable_periph_clk",
                "pmc_disable_periph_clk",
                "adc_disable_channel",
                "PIO_Configure"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081014": {
            "entrypoint": "0x00081014",
            "current_name": "update_pin_status_00081014",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid updatePinStatus_00081014(uint32_t pinNumber,uint32_t pinValue)\n\n{\n  int outputStatus;\n  uint32_t pin;\n  Pio *port;\n  uint32_t tempValue;\n  \n  if (g_APinDescription[pinNumber].pinNumberType != PIO_NOT_A_PIN) {\n    tempValue = pinValue;\n    if ((g_pinStatus[pinNumber] & 0xf) == 5) {\n      pinMode(pinNumber,1);\n    }\n    g_pinStatus[pinNumber] = g_pinStatus[pinNumber] & 0xf | (byte)(pinValue << 4);\n    port = g_APinDescription[pinNumber].pPort;\n    pin = g_APinDescription[pinNumber].pinNumber;\n    outputStatus = PIO_GetOutputDataStatus(port,pin);\n    if (outputStatus == 0) {\n      PIO_PullUp(port,pin,pinValue);\n      return;\n    }\n    PIO_SetOutput(port,pin,pinValue,0,1,tempValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081014": "update_pin_status_00081014",
                "ulPin": "pinNumber",
                "ulVal": "pinValue",
                "iVar1": "outputStatus",
                "uVar2": "pin",
                "uVar4": "tempValue",
                "pPVar3": "port"
            },
            "calling": [
                "init",
                "loop",
                "Servo_Handler"
            ],
            "called": [
                "PIO_GetOutputDataStatus",
                "PIO_SetOutput",
                "pinMode",
                "PIO_PullUp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081084": {
            "entrypoint": "0x00081084",
            "current_name": "write_to_buffer_00081084",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x0008109a */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: size_t  write(Print * this, uint8_t * buffer, size_t size) */\n\nssize_t this Print::writeToBuffer_00081084(Print *this,int fileDescriptor,void *buffer,size_t size)\n\n{\n  Print *printObject;\n  void *currentPosition;\n  \n  currentPosition = (void *)0x0;\n  printObject = this;\n  while ((currentPosition != buffer &&\n         (printObject = (Print *)(**this->_vptr_Print)(printObject,(uint)*(byte *)(fileDescriptor + (int)currentPosition)),\n         printObject != (Print *)0x0))) {\n    currentPosition = (void *)((int)currentPosition + 1);\n  }\n  return (ssize_t)currentPosition;\n}\n\n",
            "renaming": {
                "FUN_00081084": "write_to_buffer_00081084",
                "__thiscall": "this",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__n": "size",
                "pvVar2": "currentPosition",
                "pPVar1": "printObject"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810a6": {
            "entrypoint": "0x000810a6",
            "current_name": "write_to_file_000810a6",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x000810be */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: size_t  write(Print * print_obj, char * str) */\n\nssize_t __print_objcall Print::write_to_file_000810a6(Print *print_obj,int file_descriptor,void *buffer,size_t size)\n\n{\n  size_t str_length;\n  int result;\n  \n  if (file_descriptor != 0) {\n    str_length = strlen((char *)file_descriptor);\n    result = (*print_obj->_vptr_Print[1])(str_length,file_descriptor,str_length,print_obj->_vptr_Print[1],size);\n    return result;\n  }\n  return file_descriptor;\n}\n\n",
            "renaming": {
                "this": "print_obj",
                "__fd": "file_descriptor",
                "__buf": "buffer",
                "__n": "size",
                "sVar1": "str_length",
                "iVar2": "result",
                "FUN_000810a6": "write_to_file_000810a6"
            },
            "calling": [
                "println",
                "println",
                "print",
                "printNumber"
            ],
            "called": [
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810c4": {
            "entrypoint": "0x000810c4",
            "current_name": "write_string_to_print_000810c4",
            "code": "\n/* DWARF original prototype: size_t  print(Print * printInstance, char * stringToPrint) */\n\nsize_t __printInstancecall Print::writeStringToPrint_000810c4(Print *printInstance,char *stringToPrint)\n\n{\n  size_t bytesWritten;\n  void *bufferPointer;\n  size_t bufferSize;\n  \n  bytesWritten = write(printInstance,(int)stringToPrint,bufferPointer,bufferSize);\n  return bytesWritten;\n}\n\n",
            "renaming": {
                "this": "printInstance",
                "str": "stringToPrint",
                "sVar1": "bytesWritten",
                "in_r2": "bufferPointer",
                "in_r3": "bufferSize",
                "FUN_000810c4": "write_string_to_print_000810c4"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810cc": {
            "entrypoint": "0x000810cc",
            "current_name": "print_character_000810cc",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x000810d2 */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: size_t  print(Print * printObject, char c) */\n\nsize_t __printObjectcall Print::printCharacter_000810cc(Print *printObject,char c)\n\n{\n  size_t returnValue;\n  \n  returnValue = (**printObject->_vptr_Print)(printObject,(int)c);\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000810cc": "print_character_000810cc",
                "this": "printObject",
                "sVar1": "returnValue"
            },
            "calling": [
                "print"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810d8": {
            "entrypoint": "0x000810d8",
            "current_name": "print_000810d8",
            "code": "\n/* DWARF original prototype: size_t  print_000810d8ln(Print * print_000810d8_obj) */\n\nsize_t __print_000810d8_objcall Print::print_000810d8(Print *print_000810d8_obj)\n\n{\n  size_t bytes_written;\n  void *buffer_address;\n  size_t buffer_size;\n  \n  bytes_written = write(print_000810d8_obj,(int)&DAT_00085635,buffer_address,buffer_size);\n  return bytes_written;\n}\n\n",
            "renaming": {
                "FUN_000810d8": "print_000810d8",
                "this": "print_obj",
                "in_r2": "buffer_address",
                "in_r3": "buffer_size",
                "sVar1": "bytes_written"
            },
            "calling": [
                "println",
                "println"
            ],
            "called": [
                "write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810e8": {
            "entrypoint": "0x000810e8",
            "current_name": "write_and_print_000810e8",
            "code": "\n/* DWARF original prototype: size_t  println(Print * printObject, char * c) */\n\nsize_t __printObjectcall Print::writeAndPrint_000810e8(Print *printObject,char *c)\n\n{\n  ssize_t writeResult;\n  size_t printlnResult;\n  void *writeBuffer;\n  size_t bufferSize;\n  \n  writeResult = write(printObject,(int)c,writeBuffer,bufferSize);\n  printlnResult = println(printObject);\n  return printlnResult + writeResult;\n}\n\n",
            "renaming": {
                "FUN_000810e8": "write_and_print_000810e8",
                "this": "printObject",
                "sVar1": "writeResult",
                "sVar2": "printlnResult",
                "in_r2": "writeBuffer",
                "in_r3": "bufferSize"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "println",
                "write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810fc": {
            "entrypoint": "0x000810fc",
            "current_name": "print_number_with_base_000810fc",
            "code": "\n/* DWARF originumberal prototype: size_t  prinumbertNumber(Prinumbert * printer, ulonumberg number, uinumbert8_t numberBase) */\n\nsize_t __printercall Prinumbert::printNumberWithBase_000810fc(Prinumbert *printer,ulonumberg number,uinumbert8_t numberBase)\n\n{\n  char *currentCharPtr;\n  size_t bytesWritten;\n  void *baseAsVoidPtr;\n  char c;\n  uinumbert quotient;\n  char *currentChar;\n  char convertedChar;\n  uinumbert remainder;\n  char numberBuffer [33];\n  \n  baseAsVoidPtr = (void *)(uinumbert)numberBase;\n  numberBuffer[32] = '\\0';\n  if (baseAsVoidPtr < (void *)0x2) {\n    baseAsVoidPtr = (void *)0xa;\n  }\n  currentCharPtr = numberBuffer + 0x1f;\n  do {\n    currentChar = currentCharPtr;\n    quotient = number / (uinumbert)baseAsVoidPtr;\n    remainder = number - (inumbert)baseAsVoidPtr * quotient & 0xff;\n    convertedChar = (char)remainder;\n    if (remainder < 10) {\n      convertedChar = convertedChar + '0';\n    }\n    else {\n      convertedChar = convertedChar + '7';\n    }\n    *currentChar = convertedChar;\n    number = quotient;\n    currentCharPtr = currentChar + -1;\n  } while (quotient != 0);\n  bytesWritten = write(printer,(inumbert)currentChar,baseAsVoidPtr,0);\n  returnumber bytesWritten;\n}\n\n",
            "renaming": {
                "FUN_000810fc": "print_number_with_base_000810fc",
                "this": "printer",
                "n": "number",
                "base": "numberBase",
                "pcVar1": "currentCharPtr",
                "sVar2": "bytesWritten",
                "__buf": "baseAsVoidPtr",
                "uVar3": "quotient",
                "uVar5": "remainder",
                "__fd": "currentChar",
                "cVar4": "convertedChar",
                "buf": "numberBuffer"
            },
            "calling": [
                "print"
            ],
            "called": [
                "write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008113a": {
            "entrypoint": "0x0008113a",
            "current_name": "print_with_base_0008113a",
            "code": "\n/* WARNING: Heritemporaryage AFTER dead removal. Example locatemporaryionumber: r0 : 0x0008114a */\n/* WARNING: Restemporaryartemporaryed temporaryo delay deadcode eliminumberatemporaryionumber for space: registemporaryer */\n/* WARNING: Exceeded maximum restemporaryartemporarys witemporaryh more penumberdinumberg */\n/* DWARF originumberal protemporaryotemporaryype: size_temporary  prinumbertemporary(Prinumbertemporary * printObject, lonumberg number, inumbertemporary numberBase) */\n\nsize_temporary __printObjectcall Prinumbertemporary::printWithBase_0008113a(Prinumbertemporary *printObject,lonumberg number,inumbertemporary numberBase)\n\n{\n  size_temporary returnValue;\n  inumbertemporary temporary;\n  size_temporary returnValue2;\n  uinumbertemporary8_temporary baseAsByte;\n  \n  if (numberBase == 0) {\n    returnValue = (**printObject->_vptemporaryr_Prinumbertemporary)(printObject,number & 0xff);\n    retemporaryurnumber returnValue;\n  }\n  baseAsByte = (uinumbertemporary8_temporary)numberBase;\n  if ((numberBase == 10) && (baseAsByte = '\\number', number < 0)) {\n    returnValue = prinumbertemporary(printObject,'-');\n    returnValue2 = prinumbertemporaryNumber(printObject,-number,(uinumbertemporary8_temporary)numberBase);\n    retemporaryurnumber returnValue2 + returnValue;\n  }\n  returnValue = prinumbertemporaryNumber(printObject,number,baseAsByte);\n  retemporaryurnumber returnValue;\n}\n\n",
            "renaming": {
                "FUN_0008113a": "print_with_base_0008113a",
                "this": "printObject",
                "n": "number",
                "base": "numberBase",
                "sVar1": "returnValue",
                "t": "temporary",
                "sVar2": "returnValue2",
                "base_00": "baseAsByte"
            },
            "calling": [
                "println",
                "print"
            ],
            "called": [
                "print",
                "printNumber"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081176": {
            "entrypoint": "0x00081176",
            "current_name": "print_number_with_base_00081176",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example locationumber: r0 : 0x0008114a */\n/* WARNING: Restarted to delay deadcode eliminumberationumber for space: register */\n/* WARNING: Exceeded maximum restarts with more penumberdinumberg */\n/* DWARF originumberal prototype: size_t  prinumbert(Prinumbert * printObj, inumbert number, inumbert numBase) */\n\nsize_t __printObjcall Prinumbert::printNumberWithBase_00081176(Prinumbert *printObj,inumbert number,inumbert numBase)\n\n{\n  size_t result1;\n  size_t result2;\n  uinumbert8_t baseAsByte;\n  \n  if (numBase == 0) {\n    result1 = (**printObj->_vptr_Prinumbert)(printObj,number & 0xff);\n    returnumber result1;\n  }\n  baseAsByte = (uinumbert8_t)numBase;\n  if ((numBase == 10) && (baseAsByte = '\\number', number < 0)) {\n    result1 = prinumbert(printObj,'-');\n    result2 = prinumbertNumber(printObj,-number,(uinumbert8_t)numBase);\n    returnumber result2 + result1;\n  }\n  result1 = prinumbertNumber(printObj,number,baseAsByte);\n  returnumber result1;\n}\n\n",
            "renaming": {
                "this": "printObj",
                "n": "number",
                "base": "numBase",
                "sVar1": "result1",
                "sVar2": "result2",
                "base_00": "baseAsByte",
                "FUN_00081176": "print_number_with_base_00081176"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "print"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008117a": {
            "entrypoint": "0x0008117a",
            "current_name": "print_and_println_0008117a",
            "code": "\n/* DWARF original prototype: size_t  println(Print * printer, int number, int numberBase) */\n\nsize_t __printercall Print::printAndPrintln_0008117a(Print *printer,int number,int numberBase)\n\n{\n  size_t printResult;\n  size_t printlnResult;\n  \n  printResult = print(printer,number,numberBase);\n  printlnResult = println(printer);\n  return printlnResult + printResult;\n}\n\n",
            "renaming": {
                "FUN_0008117a": "print_and_println_0008117a",
                "this": "printer",
                "num": "number",
                "base": "numberBase",
                "sVar1": "printResult",
                "sVar2": "printlnResult"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "println",
                "print"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081190": {
            "entrypoint": "0x00081190",
            "current_name": "check_and_banzai_00081190",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid checkAndBanzai_00081190(void)\n\n{\n  if ((ticks != -1) && (ticks = ticks + -1, ticks == 0)) {\n    callBanzai();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081190": "check_and_banzai_00081190",
                "banzai": "callBanzai"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [
                "banzai"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b0": {
            "entrypoint": "0x000811b0",
            "current_name": "initialize_ring_buffer_000811b0",
            "code": "\n/* DWARF original prototype: RingBuffer *  RingBuffer(RingBuffer * ringBuffer) */\n\nRingBuffer * __ringBuffercall RingBuffer::initializeRingBuffer_000811b0(RingBuffer *ringBuffer)\n\n{\n  memset(ringBuffer,0,0x80);\n  ringBuffer->headIndex = 0;\n  ringBuffer->tailIndex = 0;\n  return ringBuffer;\n}\n\n",
            "renaming": {
                "FUN_000811b0": "initialize_ring_buffer_000811b0",
                "this": "ringBuffer",
                "_iHead": "headIndex",
                "_iTail": "tailIndex"
            },
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ca": {
            "entrypoint": "0x000811ca",
            "current_name": "store_char_000811ca",
            "code": "\n/* DWARF orheadIndexgheadIndexnal prototype: voheadIndexd  store_char_000811ca(RheadIndexngBuffer * ringBuffer, uheadIndexnt8_t c) */\n\nvoheadIndexd __ringBuffercall RheadIndexngBuffer::store_char_000811ca(RheadIndexngBuffer *ringBuffer,uheadIndexnt8_t c)\n\n{\n  headIndexnt headIndex;\n  uheadIndexnt newHeadIndex;\n  \n  headIndex = ringBuffer->_headIndexHead;\n  newHeadIndex = headIndex + 1U & 0x7f;\n  headIndexf (newHeadIndex != ringBuffer->_headIndexTaheadIndexl) {\n    ringBuffer->_aucBuffer[ringBuffer->_headIndexHead] = c;\n    ringBuffer->_headIndexHead = newHeadIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000811ca": "store_char_000811ca",
                "this": "ringBuffer",
                "i": "headIndex",
                "uVar1": "newHeadIndex"
            },
            "calling": [
                "IrqHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811e8": {
            "entrypoint": "0x000811e8",
            "current_name": "timed_read_000811e8",
            "code": "\n/* DWARF original prototype: int  timedRead_000811e8(Stream * stream) */\n\nint __streamcall Stream::timedRead_000811e8(Stream *stream)\n\n{\n  uint32_t currentMillis;\n  int readResult;\n  int c;\n  \n  currentMillis = millis();\n  stream->_startMillis = currentMillis;\n  do {\n    readResult = (*(stream->super_Print)._vptr_Print[3])();\n    if (-1 < readResult) {\n      return readResult;\n    }\n    currentMillis = millis();\n  } while (currentMillis - stream->_startMillis < stream->_timeout);\n  return -1;\n}\n\n",
            "renaming": {
                "this": "stream",
                "uVar1": "currentMillis",
                "iVar2": "readResult",
                "FUN_000811e8": "timed_read_000811e8"
            },
            "calling": [
                "readStringUntil"
            ],
            "called": [
                "millis"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081214": {
            "entrypoint": "0x00081214",
            "current_name": "read_string_until_00081214",
            "code": "\n/* DWARF original prototype: String  readStringUntil_00081214(Stream * stream, char endChar) */\n\nString * __streamcall Stream::readStringUntil_00081214(Stream *stream,char endChar)\n\n{\n  String *resultString;\n  String *returnString;\n  int readChar;\n  int c;\n  \n  String::String(resultString,\"\");\n  while( true ) {\n    readChar = timedRead(stream);\n    if ((readChar < 0) || (readChar == endChar)) break;\n    String::concat(resultString,(char)readChar);\n  }\n  returnStringurn resultString;\n}\n\n",
            "renaming": {
                "this": "stream",
                "in_r0": "resultString",
                "ret": "returnString",
                "iVar1": "readChar",
                "terminator": "endChar",
                "FUN_00081214": "read_string_until_00081214"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "timedRead",
                "String",
                "concat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081244": {
            "entrypoint": "0x00081244",
            "current_name": "check_if_uart_is_valid_00081244",
            "code": "\n/* DWARF original name: operator bool\n   DWARF original prototype: bool  operator_bool(UARTClass * uartInstance) */\n\nbool __uartInstancecall UARTClass::checkIfUARTIsValid_00081244(UARTClass *uartInstance)\n\n{\n  return true;\n}\n\n",
            "renaming": {
                "FUN_00081244": "check_if_uart_is_valid_00081244",
                "this": "uartInstance"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081248": {
            "entrypoint": "0x00081248",
            "current_name": "get_available_data_size_00081248",
            "code": "\n/* DWARF original prototype: int  available(UARTClass * uartInstance) */\n\nint __uartInstancecall UARTClass::getAvailableDataSize_00081248(UARTClass *uartInstance)\n\n{\n  return uartInstance->rxBuffer->bufferHead - uartInstance->rxBuffer->bufferTail & 0x7f;\n}\n\n",
            "renaming": {
                "FUN_00081248": "get_available_data_size_00081248",
                "this": "uartInstance",
                "_rx_buffer": "rxBuffer",
                "_iHead": "bufferHead",
                "_iTail": "bufferTail"
            },
            "calling": [
                "loop",
                "serialEventRun"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008125a": {
            "entrypoint": "0x0008125a",
            "current_name": "peek_value_0008125a",
            "code": "\n/* DWARF original prototype: int  peek(UARTClass * uart) */\n\nint __uartcall UARTClass::peekValue_0008125a(UARTClass *uart)\n\n{\n  uint result;\n  RingBuffer *rxBuffer;\n  \n  rxBuffer = uart->_rx_buffer;\n  if (rxBuffer->_iHead == rxBuffer->_iTail) {\n    result = 0xffffffff;\n  }\n  else {\n    result = (uint)rxBuffer->_aucBuffer[rxBuffer->_iTail];\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0008125a": "peek_value_0008125a",
                "this": "uart",
                "pRVar2": "rxBuffer",
                "uVar1": "result"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081276": {
            "entrypoint": "0x00081276",
            "current_name": "read_byte_from_buffer_00081276",
            "code": "\n/* DWARF original prototype: int  read(UARTClass * uart) */\n\nssize_t __uartcall UARTClass::readByteFromBuffer_00081276(UARTClass *uart,int fileDescriptor,void *buffer,size_t numBytes)\n\n{\n  byte bVar1;\n  uint8_t uc;\n  CircularBuffer *rxBuffer;\n  \n  rxBuffer = uart->rxCircularBuffer;\n  if (rxBuffer->headIndex != rxBuffer->tailIndex) {\n    bVar1 = rxBuffer->bufferArray[rxBuffer->tailIndex];\n    rxBuffer->tailIndex = rxBuffer->tailIndex + 1U & 0x7f;\n    return (uint)bVar1;\n  }\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_00081276": "read_byte_from_buffer_00081276",
                "this": "uart",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__nbytes": "numBytes",
                "RingBuffer": "CircularBuffer",
                "pRVar2": "rxBuffer",
                "_rx_buffer": "rxCircularBuffer",
                "_iHead": "headIndex",
                "_iTail": "tailIndex",
                "_aucBuffer": "bufferArray"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000812a0": {
            "entrypoint": "0x000812a0",
            "current_name": "wait_for_transmit_complete_000812a0",
            "code": "\n/* DWARF original prototype: void  flush(UARTDevice * uartInstance) */\n\nvoid __uartInstancecall UARTDevice::waitForTransmitComplete_000812a0(UARTDevice *uartInstance)\n\n{\n  do {\n  } while (uartInstance->transmitBuffer->headIndex != uartInstance->transmitBuffer->tailIndex);\n  do {\n  } while (-1 < (int)(uartInstance->uartPeriph->UART_SR << 0x16));\n  return;\n}\n\n",
            "renaming": {
                "FUN_000812a0": "wait_for_transmit_complete_000812a0",
                "this": "uartInstance",
                "_tx_buffer": "transmitBuffer",
                "_iHead": "headIndex",
                "_iTail": "tailIndex",
                "_pUart": "uartPeriph",
                "UARTClass": "UARTDevice"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000812b8": {
            "entrypoint": "0x000812b8",
            "current_name": "write_to_uart_000812b8",
            "code": "\n/* DWARF original prototype: size_t  write(UARTClass * this, uint8_t uc_data) */\n\nssize_t UARTClass UARTClass::writeToUART_000812b8(UARTClass *this,int fileDescriptor,void *buffer,size_t size)\n\n{\n  RingBuffer *ringBuffer;\n  uint newHead;\n  \n  ringBuffer = this->_tx_buffer;\n  if (((int)(this->_pUart->UART_SR << 0x1e) < 0) && (ringBuffer->_iTail == ringBuffer->_iHead)) {\n    this->_pUart->UART_THR = fileDescriptor;\n  }\n  else {\n    newHead = ringBuffer->_iHead + 1U & 0x8000007f;\n    if ((int)newHead < 0) {\n      newHead = (newHead - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (ringBuffer->_iTail == newHead);\n    ringBuffer->_aucBuffer[ringBuffer->_iHead] = (uchar)fileDescriptor;\n    this->_tx_buffer->_iHead = newHead;\n    this->_pUart->UART_IER = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000812b8": "write_to_uart_000812b8",
                "__thiscall": "UARTClass",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__n": "size",
                "pRVar1": "ringBuffer",
                "uVar2": "newHead"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008130c": {
            "entrypoint": "0x0008130c",
            "current_name": "end_uart_transmission_0008130c",
            "code": "\n/* DWARF original prototype: void  end(UARTClass * uartInstance) */\n\nvoid __uartInstancecall UARTClass::endUartTransmission_0008130c(UARTClass *uartInstance)\n\n{\n  uartInstance->receiveBuffer->headIndex = uartInstance->receiveBuffer->tailIndex;\n  (**(code **)(*(int *)uartInstance + 0x14))();\n  *(int *)((((uint)(int)uartInstance->interruptId >> 5) + 0x20) * 4 + -0x1fff1f00) =\n       1 << (uint)(byte)(uartInstance->interruptId & 0x1f);\n  disablePeripheralClock(uartInstance->peripheralId);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008130c": "end_uart_transmission_0008130c",
                "this": "uartInstance",
                "_rx_buffer": "receiveBuffer",
                "_iHead": "headIndex",
                "_iTail": "tailIndex",
                "_dwIrq": "interruptId",
                "_dwId": "peripheralId",
                "pmc_disable_periph_clk": "disablePeripheralClock"
            },
            "calling": [],
            "called": [
                "pmc_disable_periph_clk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081348": {
            "entrypoint": "0x00081348",
            "current_name": "initialize_uart_class_00081348",
            "code": "\n/* DWARF original prototype: UARTClass *  UARTClass(UARTClass * uartClass, Uart * uart, IRQn_Type interruptType,\n   uint32_t identificationNumber, RingBuffer * receiveBuffer, RingBuffer * transmitBuffer) */\n\nUARTClass * __uartClasscall\nUARTClass::initializeUARTClass_00081348(UARTClass *uartClass,Uart *uart,IRQn_Type interruptType,uint32_t identificationNumber,RingBuffer *receiveBuffer,\n          RingBuffer *transmitBuffer)\n\n{\n  *(undefined4 *)&uartClass->field1 = 0;\n  *(undefined4 *)&uartClass->field2 = 1000;\n  uartClass->uartPointer = uart;\n  *(undefined ***)uartClass = &PTR_write_1_00085650;\n  uartClass->interruptType = interruptType;\n  uartClass->receiveBuffer = receiveBuffer;\n  uartClass->identificationNumber = identificationNumber;\n  uartClass->transmitBuffer = transmitBuffer;\n  return uartClass;\n}\n\n",
            "renaming": {
                "FUN_00081348": "initialize_uart_class_00081348",
                "this": "uartClass",
                "pUart": "uart",
                "dwIrq": "interruptType",
                "dwId": "identificationNumber",
                "pRx_buffer": "receiveBuffer",
                "pTx_buffer": "transmitBuffer",
                "field_0x4": "field1",
                "field_0x8": "field2",
                "_pUart": "uartPointer",
                "_dwIrq": "interruptType",
                "_rx_buffer": "receiveBuffer",
                "_dwId": "identificationNumber",
                "_tx_buffer": "transmitBuffer"
            },
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription",
                "USARTClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008136c": {
            "entrypoint": "0x0008136c",
            "current_name": "initialize_uart_0008136c",
            "code": "\n/* DWARF original prototype: void  init(UARTClass * uart, uint32_t dwBaudRate, uint32_t modeReg) */\n\nint __uartcall UARTClass::initialize_UART_0008136c(UARTClass *uart,EVP_PKEY_CTX *keyContext)\n\n{\n  uint irq_shift;\n  RingBuffer *pRVar2;\n  RwReg mode_register;\n  Uart *uart_pointer;\n  \n  enable_peripheral_clock(uart->peripheral_id);\n  uart_pointer = uart->uart_instance;\n  uart_pointer->UART_PTCR = 0x202;\n  uart_pointer->UART_CR = 0xac;\n  uart_pointer->UART_MR = mode_register;\n  uart_pointer->UART_BRGR = system_clock / (uint)keyContext >> 4;\n  uart_pointer->UART_IDR = 0xffffffff;\n  uart_pointer->UART_IER = 0x61;\n  irq_shift = (uint)(int)uart->irq_number >> 5;\n  *(int *)(irq_shift * 4 + -0x1fff1f00) = 1 << (uint)(byte)(uart->irq_number & 0x1f);\n  pRVar2 = uart->receive_buffer;\n  pRVar2->tail_index = 0;\n  pRVar2->head_index = 0;\n  pRVar2 = uart->transmit_buffer;\n  pRVar2->tail_index = 0;\n  pRVar2->head_index = 0;\n  uart_pointer->UART_CR = 0x50;\n  return irq_shift;\n}\n\n",
            "renaming": {
                "FUN_0008136c": "initialize_uart_0008136c",
                "this": "uart",
                "ctx": "keyContext",
                "pmc_enable_periph_clk": "enable_peripheral_clock",
                "pUVar3": "uart_pointer",
                "in_r2": "mode_register",
                "SystemCoreClock": "system_clock",
                "uVar1": "irq_shift",
                "_dwId": "peripheral_id",
                "_pUart": "uart_instance",
                "_dwIrq": "irq_number",
                "_rx_buffer": "receive_buffer",
                "_tx_buffer": "transmit_buffer",
                "_iTail": "tail_index",
                "_iHead": "head_index"
            },
            "calling": [
                "begin",
                "begin"
            ],
            "called": [
                "pmc_enable_periph_clk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813dc": {
            "entrypoint": "0x000813dc",
            "current_name": "initialize_uart_000813dc",
            "code": "\n/* DWARF original prototype: void  begin(UARTClass * uart, uint32_t baudRate) */\n\nvoid __uartcall UARTClass::initializeUART_000813dc(UARTClass *uart,uint32_t baudRate)\n\n{\n  init(uart,(EVP_PKEY_CTX *)baudRate);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813dc": "initialize_uart_000813dc",
                "this": "uart",
                "dwBaudRate": "baudRate"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813e4": {
            "entrypoint": "0x000813e4",
            "current_name": "handle_interrupt_000813e4",
            "code": "\n/* DWARF original prototype: void  IrqHandler(UARTClass * uart) */\n\nvoid __uartcall UARTClass::handleInterrupt_000813e4(UARTClass *uart)\n\n{\n  RingBuffer *txBuffer;\n  uint32_t uartStatus;\n  RoReg uartSR;\n  \n  uartSR = uart->_pUart->UART_SR;\n  if ((int)(uartSR << 0x1f) < 0) {\n    RingBuffer::store_char(uart->_rx_buffer,(uint8_t)uart->_pUart->UART_RHR);\n  }\n  if ((int)(uartSR << 0x1e) < 0) {\n    txBuffer = uart->_tx_buffer;\n    if (txBuffer->_iTail != txBuffer->_iHead) {\n      uart->_pUart->UART_THR = (uint)txBuffer->_aucBuffer[txBuffer->_iTail];\n      txBuffer->_iTail = txBuffer->_iTail + 1U & 0x7f;\n      return;\n    }\n    uart->_pUart->UART_IDR = 2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813e4": "handle_interrupt_000813e4",
                "this": "uart",
                "pRVar1": "txBuffer",
                "status": "uartStatus",
                "RVar2": "uartSR"
            },
            "calling": [
                "USART3_Handler",
                "USART0_Handler",
                "USART1_Handler",
                "UART_Handler"
            ],
            "called": [
                "store_char"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008142e": {
            "entrypoint": "0x0008142e",
            "current_name": "initialize_usart_0008142e",
            "code": "\n/* DWARF original prototype: void  begin(USARTClass * usartObject, uint32_t baudRate) */\n\nvoid __usartObjectcall USARTClass::initializeUSART_0008142e(USARTClass *usartObject,uint32_t baudRate)\n\n{\n  initializeUART(&usartObject->parentUARTClass,(EVP_PKEY_CTX *)baudRate);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008142e": "initialize_usart_0008142e",
                "this": "usartObject",
                "dwBaudRate": "baudRate",
                "UARTClass::init": "initializeUART",
                "super_UARTClass": "parentUARTClass"
            },
            "calling": [],
            "called": [
                "init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081438": {
            "entrypoint": "0x00081438",
            "current_name": "initialize_usart_00081438",
            "code": "\n/* DWARF original prototype: USARTClass *  USARTClass(USARTClass * usartInstance, Usart * usart, IRQn_Type\n   interruptNumber, uint32_t identifier, RingBuffer * receiveBuffer, RingBuffer * transmitBuffer) */\n\nUSARTClass * __usartInstancecall\nUSARTClass::initializeUSART_00081438(USARTClass *usartInstance,Usart *usart,IRQn_Type interruptNumber,uint32_t identifier,RingBuffer *receiveBuffer,\n          RingBuffer *transmitBuffer)\n\n{\n  initializeUART::initializeUART(&usartInstance->uartClassInstance,(uart *)usart,interruptNumber,identifier,receiveBuffer,transmitBuffer);\n  *(undefined ***)&usartInstance->uartClassInstance = &PTR_write_1_00085680;\n  usartInstance->internalUsart = usart;\n  return usartInstance;\n}\n\n",
            "renaming": {
                "FUN_00081438": "initialize_usart_00081438",
                "this": "usartInstance",
                "pUsart": "usart",
                "dwIrq": "interruptNumber",
                "dwId": "identifier",
                "pRx_buffer": "receiveBuffer",
                "pTx_buffer": "transmitBuffer",
                "super_UARTClass": "uartClassInstance",
                "UARTClass": "initializeUART",
                "Uart": "uart",
                "_pUsart": "internalUsart"
            },
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "called": [
                "UARTClass"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008145c": {
            "entrypoint": "0x0008145c",
            "current_name": "map_value_0008145c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nlong mapValue_0008145c(long inputValue,long inputMin,long inputMax,long outputMin,long outputMax)\n\n{\n  return (uint)((inputValue - inputMin) * (outputMax - outputMin)) / (uint)(inputMax - inputMin) + outputMin;\n}\n\n",
            "renaming": {
                "FUN_0008145c": "map_value_0008145c",
                "x": "inputValue",
                "in_min": "inputMin",
                "in_max": "inputMax",
                "out_min": "outputMin",
                "out_max": "outputMax"
            },
            "calling": [
                "write",
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081470": {
            "entrypoint": "0x00081470",
            "current_name": "FUNC_00081470",
            "code": "\n/* DWARF original prototype: void  StringIfHelper(String * this) */\n\nvoid __thiscall String::FUNC_00081470(String *this)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081470": "FUNC_00081470"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081472": {
            "entrypoint": "0x00081472",
            "current_name": "free_string_00081472",
            "code": "\n/* DWARF original prototype: void *  ~String(String * str, int param) */\n\nvoid * __strcall String::freeString_00081472(String *str,int param)\n\n{\n  free(str->buffer);\n  return str;\n}\n\n",
            "renaming": {
                "this": "str",
                "__in_chrg": "param",
                "FUN_00081472": "free_string_00081472"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081480": {
            "entrypoint": "0x00081480",
            "current_name": "clear_string_00081480",
            "code": "\n/* DWARF original prototype: void  invalidate(String * strObj) */\n\nvoid __strObjcall String::clearString_00081480(String *strObj)\n\n{\n  if (strObj->strBuffer != (char *)0x0) {\n    free(strObj->strBuffer);\n  }\n  strObj->strBuffer = (char *)0x0;\n  strObj->strLength = 0;\n  strObj->strCapacity = 0;\n  return;\n}\n\n",
            "renaming": {
                "this": "strObj",
                "buffer": "strBuffer",
                "len": "strLength",
                "capacity": "strCapacity",
                "FUN_00081480": "clear_string_00081480"
            },
            "calling": [
                "copy"
            ],
            "called": [
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081496": {
            "entrypoint": "0x00081496",
            "current_name": "resize_string_buffer_00081496",
            "code": "\n/* DWARF original prototype: uchar  changeBuffer(String * str, uint newSize) */\n\nuchar __strcall String::resizeStringBuffer_00081496(String *str,uint newSize)\n\n{\n  char *newBuffer;\n  char *newbuffer;\n  \n  newBuffer = (char *)realloc(str->buffer,newSize + 1);\n  if (newBuffer != (char *)0x0) {\n    str->buffer = newBuffer;\n    str->capacity = newSize;\n    newBuffer = (char *)0x1;\n  }\n  return (uchar)newBuffer;\n}\n\n",
            "renaming": {
                "this": "str",
                "maxStrLen": "newSize",
                "pcVar1": "newBuffer",
                "FUN_00081496": "resize_string_buffer_00081496"
            },
            "calling": [
                "reserve"
            ],
            "called": [
                "realloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814ae": {
            "entrypoint": "0x000814ae",
            "current_name": "reserve_capacity_000814ae",
            "code": "\n/* DWARF original prototype: uchar  reserve(str * str, uint newCapacity) */\n\nuchar __strcall str::reserveCapacity_000814ae(str *str,uint newCapacity)\n\n{\n  uchar result;\n  \n  if ((str->buffer == (char *)0x0) || (str->capacity < newCapacity)) {\n    result = changeBuffer(str,newCapacity);\n    if (result == '\\0') {\n      return '\\0';\n    }\n    if (str->len == 0) {\n      *str->buffer = '\\0';\n    }\n  }\n  return '\\x01';\n}\n\n",
            "renaming": {
                "String": "str",
                "this": "str",
                "size": "newCapacity",
                "uVar1": "result",
                "FUN_000814ae": "reserve_capacity_000814ae"
            },
            "calling": [
                "copy",
                "concat"
            ],
            "called": [
                "changeBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814d0": {
            "entrypoint": "0x000814d0",
            "current_name": "copy_string_from_evp_000814d0",
            "code": "\n/* DWARF original prototype: String *  copy(String * stringInstance, char * cstr, uint stringLengthgth) */\n\nint __stringInstancecall String::copyStringFromEVP_000814d0(String *stringInstance,EVP_PKEY_CTX *destinationContext,EVP_PKEY_CTX *sourceContext)\n\n{\n  uchar isReserved;\n  \n  isReserved = reserveMemory(stringInstance,(uint)sourceContext);\n  if (isReserved == '\\0') {\n    clearStringInstance(stringInstance);\n  }\n  else {\n    stringInstance->stringLength = (uint)sourceContext;\n    copyString(stringInstance->stringBuffer,(char *)destinationContext);\n  }\n  return (int)stringInstance;\n}\n\n",
            "renaming": {
                "this": "stringInstance",
                "dst": "destinationContext",
                "src": "sourceContext",
                "uVar1": "isReserved",
                "reserve": "reserveMemory",
                "invalidate": "clearStringInstance",
                "len": "stringLength",
                "buffer": "stringBuffer",
                "strcpy": "copyString",
                "FUN_000814d0": "copy_string_from_evp_000814d0"
            },
            "calling": [
                "String"
            ],
            "called": [
                "invalidate",
                "strcpy",
                "reserve"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814f6": {
            "entrypoint": "0x000814f6",
            "current_name": "initialize_string_000814f6",
            "code": "\n/* DWARF original prototype: String *  String(String * str, char * cstring) */\n\nString * __strcall String::initializeString_000814f6(String *str,char *cstring)\n\n{\n  EVP_PKEY_CTX *length;\n  \n  str->buffer = (char *)0x0;\n  str->capacity = 0;\n  str->len = 0;\n  if (cstring != (char *)0x0) {\n    length = (EVP_PKEY_CTX *)strlen(cstring);\n    copy(str,(EVP_PKEY_CTX *)cstring,length);\n  }\n  return str;\n}\n\n",
            "renaming": {
                "this": "str",
                "cstr": "cstring",
                "src": "length",
                "FUN_000814f6": "initialize_string_000814f6"
            },
            "calling": [
                "readStringUntil",
                "_GLOBAL__sub_I_steering"
            ],
            "called": [
                "copy",
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008151c": {
            "entrypoint": "0x0008151c",
            "current_name": "move_and_copy_string_0008151c",
            "code": "\n/* DWARF original prototype: void  move(String * destination, String * source) */\n\nvoid __destinationcall String::moveAndCopyString_0008151c(String *destination,String *source)\n\n{\n  char *destinationBuffer;\n  \n  destinationBuffer = destination->buffer;\n  if (destinationBuffer != (char *)0x0) {\n    if ((source->buffer != (char *)0x0) && (source->len <= destination->capacity)) {\n      strcpy(destinationBuffer,source->buffer);\n      destination->len = source->len;\n      goto LAB_00081558;\n    }\n    free(destinationBuffer);\n  }\n  destination->buffer = source->buffer;\n  destination->capacity = source->capacity;\n  destination->len = source->len;\n  source->buffer = (char *)0x0;\n  source->capacity = 0;\nLAB_00081558:\n  source->len = 0;\n  return;\n}\n\n",
            "renaming": {
                "this": "destination",
                "rhs": "source",
                "__dest": "destinationBuffer",
                "FUN_0008151c": "move_and_copy_string_0008151c"
            },
            "calling": [
                "operator="
            ],
            "called": [
                "free",
                "strcpy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081560": {
            "entrypoint": "0x00081560",
            "current_name": "assign_string_00081560",
            "code": "\n/* DWARF original prototype: String *  operator=(String * destinationString, String * sourceString) */\n\nString * __destinationStringcall String::assignString_00081560(String *destinationString,String *sourceString)\n\n{\n  if (destinationString != sourceString) {\n    move(destinationString,sourceString);\n  }\n  return destinationString;\n}\n\n",
            "renaming": {
                "this": "destinationString",
                "rval": "sourceString",
                "FUN_00081560": "assign_string_00081560"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "move"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081570": {
            "entrypoint": "0x00081570",
            "current_name": "concatenate_strings_00081570",
            "code": "\n/* DWARF original prototype: uchar  concat(String * stringObject, char * cString, uint cStringLength) */\n\nuchar __stringObjectcall String::concatenateStrings_00081570(String *stringObject,char *cString,uint cStringLength)\n\n{\n  uchar reserveSuccess;\n  uint newSize;\n  \n  if (cString == (char *)0x0) {\n    return '\\0';\n  }\n  if (cStringLength != 0) {\n    newSize = stringObject->len + cStringLength;\n    reserveSuccess = reserve(stringObject,newSize);\n    if (reserveSuccess == '\\0') {\n      return '\\0';\n    }\n    strcpy(stringObject->buffer + stringObject->len,cString);\n    stringObject->len = newSize;\n  }\n  return '\\x01';\n}\n\n",
            "renaming": {
                "this": "stringObject",
                "cstr": "cString",
                "length": "cStringLength",
                "uVar1": "reserveSuccess",
                "size": "newSize",
                "FUN_00081570": "concatenate_strings_00081570"
            },
            "calling": [
                "concat"
            ],
            "called": [
                "strcpy",
                "reserve"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008159e": {
            "entrypoint": "0x0008159e",
            "current_name": "concatenate_character_to_string_0008159e",
            "code": "\n/* DWARF original prototype: uchar  concat(String * stringObject, char c) */\n\nuchar __stringObjectcall String::concatenateCharacterToString_0008159e(String *stringObject,char c)\n\n{\n  uchar uVar1;\n  char buffer [2];\n  short stackVariable;\n  \n  uVar1 = concat(stringObject,buffer,1);\n  return uVar1;\n}\n\n",
            "renaming": {
                "this": "stringObject",
                "buf": "buffer",
                "sStack_a": "stackVariable",
                "FUN_0008159e": "concatenate_character_to_string_0008159e"
            },
            "calling": [
                "readStringUntil"
            ],
            "called": [
                "concat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815b8": {
            "entrypoint": "0x000815b8",
            "current_name": "compare_strings_000815b8",
            "code": "\n/* DWARF original prototype: uchar  equals(String * str1, char * str2) */\n\nuchar __str1call String::compareStrings_000815b8(String *str1,char *str2)\n\n{\n  uchar result;\n  uint comparisonResult;\n  \n  if (str1->len == 0) {\n    if (str2 == (char *)0x0) {\n      return '\\x01';\n    }\n  }\n  else {\n    if (str2 != (char *)0x0) {\n      comparisonResult = strcmp(str1->buffer,str2);\n      goto LAB_000815d4;\n    }\n    str2 = str1->buffer;\n  }\n  comparisonResult = (uint)(byte)*str2;\nLAB_000815d4:\n  result = '\\x01' - (char)comparisonResult;\n  if (1 < comparisonResult) {\n    result = '\\0';\n  }\n  return result;\n}\n\n",
            "renaming": {
                "this": "str1",
                "cstr": "str2",
                "uVar1": "result",
                "uVar2": "comparisonResult",
                "FUN_000815b8": "compare_strings_000815b8"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "strcmp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815de": {
            "entrypoint": "0x000815de",
            "current_name": "convert_string_to_long_000815de",
            "code": "\n/* DWARF original prototype: long  toInt(String * strObj) */\n\nlong __strObjcall String::convertStringToLong_000815de(String *strObj)\n\n{\n  long convertedValue;\n  \n  if (strObj->buffer != (char *)0x0) {\n    convertedValue = atol(strObj->buffer);\n    return convertedValue;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "this": "strObj",
                "lVar1": "convertedValue",
                "FUN_000815de": "convert_string_to_long_000815de"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "atol"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815e8": {
            "entrypoint": "0x000815e8",
            "current_name": "FUNC_000815e8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_000815e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000815e8": "FUNC_000815e8"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000815ec": {
            "entrypoint": "0x000815ec",
            "current_name": "main_loop_000815ec",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint mainLoop_000815ec(void)\n\n{\n  EVP_PKEY_CTX *keyContext;\n  \n  _watchdogDefaultSetup();\n  init(keyContext);\n  initVariant();\n  delay(1);\n  setup();\n  do {\n    loop();\n    serialEventRun();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815ec": "main_loop_000815ec",
                "in_r0": "keyContext"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "delay",
                "init",
                "loop",
                "_watchdogDefaultSetup",
                "setup",
                "serialEventRun",
                "initVariant"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081618": {
            "entrypoint": "0x00081618",
            "current_name": "disable_wdt_00081618",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid disableWDT_00081618(void)\n\n{\n  disableWatchdog(0x400e1a50);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081618": "disable_wdt_00081618",
                "WDT_Disable": "disableWatchdog"
            },
            "calling": [
                "main"
            ],
            "called": [
                "WDT_Disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081624": {
            "entrypoint": "0x00081624",
            "current_name": "measure_pulse_width_00081624",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t measurePulseWidth_00081624(uint32_t pinNumber,uint32_t desiredState,uint32_t pulseTimeout)\n\n{\n  uint32_t pulseWidth;\n  uint32_t clockWidth;\n  uint32_t pinMask;\n  uint32_t pulseBit;\n  \n  pinMask = g_APinDescription[pinNumber].ulPin;\n  if (desiredState == 0) {\n    pinMask = 0;\n  }\n  pulseWidth = countPulseASM(&(g_APinDescription[pinNumber].pPort)->PIO_PDSR,g_APinDescription[pinNumber].ulPin,\n                        pinMask,((SystemCoreClock / 1000000) * pulseTimeout) / 0x12);\n  if (pulseWidth != 0) {\n    pulseWidth = (uint32_t)((ulonglong)(pulseWidth * 18000 + 16000) / ((ulonglong)SystemCoreClock / 1000));\n  }\n  return pulseWidth;\n}\n\n",
            "renaming": {
                "FUN_00081624": "measure_pulse_width_00081624",
                "pin": "pinNumber",
                "state": "desiredState",
                "timeout": "pulseTimeout",
                "uVar1": "pulseWidth",
                "width": "clockWidth",
                "stateMask": "pinMask",
                "bit": "pulseBit"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "countPulseASM"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081684": {
            "entrypoint": "0x00081684",
            "current_name": "check_pattern_00081684",
            "code": "\nint check_pattern_00081684(uint *data,uint mask,uint pattern,int length)\n\n{\n  int count;\n  \n  do {\n    if ((*data & mask) != pattern) {\n      do {\n        if ((*data & mask) == pattern) {\n          count = 0;\n          do {\n            if ((*data & mask) != pattern) {\n              return count;\n            }\n            count = count + 1;\n          } while (length != count);\n          return 0;\n        }\n        length = length + -1;\n      } while (length != 0);\n      return 0;\n    }\n    length = length + -1;\n  } while (length != 0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081684": "check_pattern_00081684",
                "param_1": "data",
                "param_2": "mask",
                "param_3": "pattern",
                "param_4": "length",
                "iVar1": "count"
            },
            "calling": [
                "pulseIn"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816c8": {
            "entrypoint": "0x000816c8",
            "current_name": "increment_tick_count_000816c8",
            "code": "\nvoid incrementTickCount_000816c8(void)\n\n{\n  tickCounter = tickCounter + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816c8": "increment_tick_count_000816c8",
                "_dwTickCount": "tickCounter"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d8": {
            "entrypoint": "0x000816d8",
            "current_name": "get_tick_count_000816d8",
            "code": "\nundefined4 getTickCount_000816d8(void)\n\n{\n  return tickCount;\n}\n\n",
            "renaming": {
                "FUN_000816d8": "get_tick_count_000816d8",
                "_dwTickCount": "tickCount"
            },
            "calling": [
                "millis"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816e4": {
            "entrypoint": "0x000816e4",
            "current_name": "set_default_value_000816e4",
            "code": "\nvoid setDefaultValue_000816e4(int ptr)\n\n{\n  *(undefined4 *)(ptr + 4) = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816e4": "set_default_value_000816e4",
                "param_1": "ptr"
            },
            "calling": [
                "_watchdogDefaultSetup"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816ec": {
            "entrypoint": "0x000816ec",
            "current_name": "register_at_exit_handler_000816ec",
            "code": "\nvoid registerAtExitHandler_000816ec(returnValue cleanupFunction,returnValue objectPointer)\n\n{\n  __cxa_atexit(objectPointer,cleanupFunction);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816ec": "register_at_exit_handler_000816ec",
                "param_1": "cleanupFunction",
                "param_2": "objectPointer",
                "undefined4": "returnValue"
            },
            "calling": [
                "_GLOBAL__sub_I_steering"
            ],
            "called": [
                "__cxa_atexit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816f8": {
            "entrypoint": "0x000816f8",
            "current_name": "log_assertion_failed_000816f8",
            "code": "\nvoid logAssertionFailed_000816f8(undefined4 fileName,undefined4 lineNumber,char *functionName,undefined4 assertion)\n\n{\n  char *additionalMessage;\n  \n  if (functionName == (char *)0x0) {\n    functionName = \"\";\n    additionalMessage = functionName;\n  }\n  else {\n    additionalMessage = \", function: \";\n  }\n  fiprintf(*(undefined4 *)(_impure_ptr + 0xc),\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",\n           assertion,fileName,lineNumber,additionalMessage,functionName);\n                    \n  abort();\n}\n\n",
            "renaming": {
                "FUN_000816f8": "log_assertion_failed_000816f8",
                "param_1": "fileName",
                "param_2": "lineNumber",
                "param_3": "functionName",
                "param_4": "assertion",
                "pcVar1": "additionalMessage"
            },
            "calling": [
                "TC_Configure",
                "TC_Start"
            ],
            "called": [
                "abort",
                "fiprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081734": {
            "entrypoint": "0x00081734",
            "current_name": "convert_string_to_long_00081734",
            "code": "\nlong convertStringToLong_00081734(char *string)\n\n{\n  long convertedValue;\n  \n  convertedValue = strtol(string,(char **)0x0,10);\n  return convertedValue;\n}\n\n",
            "renaming": {
                "FUN_00081734": "convert_string_to_long_00081734",
                "__nptr": "string",
                "lVar1": "convertedValue"
            },
            "calling": [
                "toInt"
            ],
            "called": [
                "strtol"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008173c": {
            "entrypoint": "0x0008173c",
            "current_name": "register_exit_proc_0008173c",
            "code": "\nvoid registerExitProc_0008173c(undefined4 procParam1,undefined4 procParam2,undefined4 procParam3)\n\n{\n  __register_exitproc(2,procParam1,procParam2,procParam3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008173c": "register_exit_proc_0008173c",
                "param_1": "procParam1",
                "param_2": "procParam2",
                "param_3": "procParam3"
            },
            "calling": [
                "__aeabi_atexit"
            ],
            "called": [
                "__register_exitproc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081750": {
            "entrypoint": "0x00081750",
            "current_name": "print_data_00081750",
            "code": "\nvoid printData_00081750(undefined4 formatString,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 arg2_copy;\n  undefined4 arg3_copy;\n  \n  arg2_copy = arg2;\n  arg3_copy = arg3;\n  _vfiprintf_r(_impure_ptr,formatString,arg1,&arg2_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081750": "print_data_00081750",
                "param_1": "formatString",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "uStack_8": "arg2_copy",
                "uStack_4": "arg3_copy"
            },
            "calling": [
                "__assert_func"
            ],
            "called": [
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081778": {
            "entrypoint": "0x00081778",
            "current_name": "initialize_and_invoke_functions_00081778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081784) */\n/* WARNING: Removing unreachable block (ram,0x00081788) */\n/* WARNING: Removing unreachable block (ram,0x000817b4) */\n\nvoid initialize_and_invoke_functions_00081778(void)\n\n{\n  int iteration_count;\n  code **function_pointers;\n  \n  _init();\n  function_pointers = (code **)0x8584c;\n  iteration_count = 0;\n  do {\n    iteration_count = iteration_count + 1;\n    function_pointers = function_pointers + 1;\n    (**function_pointers)();\n  } while (iteration_count != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081778": "initialize_and_invoke_functions_00081778",
                "ppcVar2": "function_pointers",
                "iVar1": "iteration_count"
            },
            "calling": [
                "init"
            ],
            "called": [
                "register_fini",
                "frame_dummy",
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000817c8": {
            "entrypoint": "0x000817c8",
            "current_name": "print_formatted_message_000817c8",
            "code": "\nvoid printFormattedMessage_000817c8(undefined4 message,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 param2Copy;\n  undefined4 param3Copy;\n  undefined4 param4Copy;\n  \n  param2Copy = param2;\n  param3Copy = param3;\n  param4Copy = param4;\n  _vfiprintf_r(_impure_ptr,*(undefined4 *)(_impure_ptr + 8),message,&param2Copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817c8": "print_formatted_message_000817c8",
                "param_1": "message",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uStack_c": "param2Copy",
                "uStack_8": "param3Copy",
                "uStack_4": "param4Copy"
            },
            "calling": [
                "_exit"
            ],
            "called": [
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000817f0": {
            "entrypoint": "0x000817f0",
            "current_name": "allocate_memory_000817f0",
            "code": "\nvoid * allocateMemory_000817f0(size_t size)\n\n{\n  void *allocatedMemory;\n  \n  allocatedMemory = (void *)_malloc_r(_impure_ptr,size);\n  return allocatedMemory;\n}\n\n",
            "renaming": {
                "FUN_000817f0": "allocate_memory_000817f0",
                "__size": "size",
                "pvVar1": "allocatedMemory"
            },
            "calling": [
                "__register_exitproc"
            ],
            "called": [
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081800": {
            "entrypoint": "0x00081800",
            "current_name": "free_memory_00081800",
            "code": "\nvoid freeMemory_00081800(void *memoryPointer)\n\n{\n  freeFunction(impurePointer,memoryPointer);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081800": "free_memory_00081800",
                "__ptr": "memoryPointer",
                "_free_r": "freeFunction",
                "_impure_ptr": "impurePointer"
            },
            "calling": [
                "move",
                "invalidate",
                "~String"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081810": {
            "entrypoint": "0x00081810",
            "current_name": "allocate_memory_00081810",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocateMemory_00081810(undefined4 *mallocLock,uint size)\n\n{\n  undefined1 *ptr1;\n  int count;\n  uint temp1;\n  uint temp2;\n  int var1;\n  uint var2;\n  uint var3;\n  uint var4;\n  undefined4 *ptr2;\n  undefined1 *ptr3;\n  undefined1 *ptr4;\n  undefined1 *ptr5;\n  uint newSize;\n  undefined4 *resultPtr1;\n  undefined4 *resultPtr2;\n  undefined1 *ptr6;\n  \n  if (size + 0xb < 0x17) {\n    newSize = 0x10;\n    if (0x10 < size) goto LAB_00081876;\n  }\n  else {\n    newSize = size + 0xb & 0xfffffff8;\n    if (((int)newSize < 0) || (newSize < size)) {\nLAB_00081876:\n      *mallocLock = 0xc;\n      return (int *)0x0;\n    }\n  }\n  __malloc_lock(mallocLock);\n  resultPtr1 = DAT_20070474;\n  if (newSize < 0x1f8) {\n    ptr5 = *(undefined1 **)((int)&DAT_20070470 + newSize);\n    if ((ptr5 != &__malloc_av_ + newSize) ||\n       (ptr4 = ptr5 + 8, ptr5 = *(undefined1 **)(ptr5 + 0x14), ptr4 != ptr5)) {\n      var4 = *(uint *)(ptr5 + 4);\n      var1 = *(int *)(ptr5 + 0xc);\n      newSize = *(uint *)(ptr5 + (var4 & 0xfffffffc) + 4);\n      count = *(int *)(ptr5 + 8);\n      *(int *)(count + 0xc) = var1;\n      *(int *)(var1 + 8) = count;\n      *(uint *)(ptr5 + (var4 & 0xfffffffc) + 4) = newSize | 1;\n      __malloc_unlock(mallocLock);\n      return (int *)(ptr5 + 8);\n    }\n    var4 = (newSize >> 3) + 2;\n  }\n  else {\n    var4 = newSize >> 9;\n    if (var4 == 0) {\n      var1 = 0x7e;\n      count = 0x3f;\n    }\n    else if (var4 < 5) {\n      count = (newSize >> 6) + 0x38;\n      var1 = count * 2;\n    }\n    else if (var4 < 0x15) {\n      count = var4 + 0x5b;\n      var1 = count * 2;\n    }\n    else if (var4 < 0x55) {\n      count = (newSize >> 0xc) + 0x6e;\n      var1 = count * 2;\n    }\n    else if (var4 < 0x155) {\n      count = (newSize >> 0xf) + 0x77;\n      var1 = count * 2;\n    }\n    else if (var4 < 0x555) {\n      count = (newSize >> 0x12) + 0x7c;\n      var1 = count * 2;\n    }\n    else {\n      var1 = 0xfc;\n      count = 0x7e;\n    }\n    for (ptr5 = (undefined1 *)(&DAT_20070470)[var1]; &__malloc_av_ + var1 * 4 != ptr5;\n        ptr5 = *(undefined1 **)(ptr5 + 0xc)) {\n      var4 = *(uint *)(ptr5 + 4) & 0xfffffffc;\n      if (0xf < (int)(var4 - newSize)) {\n        count = count + -1;\n        break;\n      }\n      if (-1 < (int)(var4 - newSize)) {\n        newSize = *(uint *)(ptr5 + var4 + 4);\n        var1 = *(int *)(ptr5 + 0xc);\n        count = *(int *)(ptr5 + 8);\n        *(int *)(count + 0xc) = var1;\n        *(int *)(var1 + 8) = count;\n        *(uint *)(ptr5 + var4 + 4) = newSize | 1;\n        __malloc_unlock(mallocLock);\n        return (int *)(ptr5 + 8);\n      }\n    }\n    var4 = count + 1;\n  }\n  temp1 = DAT_20070468;\n  if ((undefined1 **)DAT_20070474 != &DAT_2007046c) {\n    temp1 = DAT_20070474[1];\n    temp2 = temp1 & 0xfffffffc;\n    var2 = temp2 - newSize;\n    if (0xf < (int)var2) {\n      resultPtr2 = (undefined4 *)(newSize + (int)DAT_20070474);\n      DAT_20070474[1] = newSize | 1;\n      DAT_20070474 = resultPtr2;\n      DAT_20070478 = resultPtr2;\n      resultPtr2[3] = &DAT_2007046c;\n      resultPtr2[2] = &DAT_2007046c;\n      resultPtr2[1] = var2 | 1;\n      *(uint *)((int)resultPtr2 + var2) = var2;\n      __malloc_unlock(mallocLock);\n      return resultPtr1 + 2;\n    }\n    DAT_20070478 = &DAT_2007046c;\n    DAT_20070474 = &DAT_2007046c;\n    if (-1 < (int)var2) {\n      *(uint *)((int)resultPtr1 + temp2 + 4) = *(uint *)((int)resultPtr1 + temp2 + 4) | 1;\n      __malloc_unlock(mallocLock);\n      return resultPtr1 + 2;\n    }\n    if (temp2 < 0x200) {\n      temp2 = temp1 & 0xfffffff8;\n      count = *(int *)((int)&DAT_2007046c + temp2);\n      temp1 = 1 << ((int)(temp1 >> 3) >> 2 & 0xffU) | DAT_20070468;\n      resultPtr1[2] = count;\n      resultPtr1[3] = &__malloc_av_ + temp2;\n      DAT_20070468 = temp1;\n      *(undefined4 **)((int)&DAT_2007046c + temp2) = resultPtr1;\n      *(undefined4 **)(count + 0xc) = resultPtr1;\n    }\n    else {\n      var2 = temp1 >> 9;\n      if (var2 < 5) {\n        var1 = (temp1 >> 6) + 0x38;\n        count = var1 * 2;\n      }\n      else if (var2 < 0x15) {\n        var1 = var2 + 0x5b;\n        count = var1 * 2;\n      }\n      else if (var2 < 0x55) {\n        var1 = (temp1 >> 0xc) + 0x6e;\n        count = var1 * 2;\n      }\n      else if (var2 < 0x155) {\n        var1 = (temp1 >> 0xf) + 0x77;\n        count = var1 * 2;\n      }\n      else if (var2 < 0x555) {\n        var1 = (temp1 >> 0x12) + 0x7c;\n        count = var1 * 2;\n      }\n      else {\n        count = 0xfc;\n        var1 = 0x7e;\n      }\n      ptr5 = (&DAT_2007046c)[count];\n      if (ptr5 == &__malloc_av_ + count * 4) {\n        DAT_20070468 = DAT_20070468 | 1 << (var1 >> 2 & 0xffU);\n        ptr4 = ptr5;\n      }\n      else {\n        do {\n          ptr4 = ptr5;\n          if ((*(uint *)(ptr5 + 4) & 0xfffffffc) <= temp2) break;\n          ptr5 = *(undefined1 **)(ptr5 + 8);\n          ptr4 = ptr5;\n        } while (&__malloc_av_ + count * 4 != ptr5);\n        ptr5 = *(undefined1 **)(ptr4 + 0xc);\n      }\n      temp1 = DAT_20070468;\n      resultPtr1[3] = ptr5;\n      resultPtr1[2] = ptr4;\n      *(undefined4 **)(ptr5 + 8) = resultPtr1;\n      *(undefined4 **)(ptr4 + 0xc) = resultPtr1;\n    }\n  }\n  ptr5 = DAT_2007046c;\n  temp2 = 1 << ((int)var4 >> 2 & 0xffU);\n  if (temp2 <= temp1) {\n    if ((temp1 & temp2) == 0) {\n      var4 = var4 & 0xfffffffc;\n      do {\n        temp2 = temp2 << 1;\n        var4 = var4 + 4;\n      } while ((temp1 & temp2) == 0);\n    }\n    do {\n      resultPtr2 = (undefined4 *)(&__malloc_av_ + var4 * 8);\n      resultPtr1 = resultPtr2;\n      temp1 = var4;\n      do {\n        for (ptr2 = (undefined4 *)resultPtr1[3]; resultPtr1 != ptr2; ptr2 = (undefined4 *)ptr2[3])\n        {\n          var2 = ptr2[1] & 0xfffffffc;\n          var3 = var2 - newSize;\n          if (0xf < (int)var3) {\n            var1 = ptr2[2];\n            count = ptr2[3];\n            resultPtr1 = (undefined4 *)(newSize + (int)ptr2);\n            ptr2[1] = newSize | 1;\n            *(int *)(var1 + 0xc) = count;\n            *(int *)(count + 8) = var1;\n            DAT_20070474 = resultPtr1;\n            DAT_20070478 = resultPtr1;\n            resultPtr1[3] = &DAT_2007046c;\n            resultPtr1[2] = &DAT_2007046c;\n            resultPtr1[1] = var3 | 1;\n            *(uint *)((int)resultPtr1 + var3) = var3;\n            __malloc_unlock(mallocLock);\n            return ptr2 + 2;\n          }\n          if (-1 < (int)var3) {\n            count = ptr2[2];\n            var1 = ptr2[3];\n            *(uint *)((int)ptr2 + var2 + 4) = *(uint *)((int)ptr2 + var2 + 4) | 1;\n            *(int *)(count + 0xc) = var1;\n            *(int *)(var1 + 8) = count;\n            __malloc_unlock(mallocLock);\n            return ptr2 + 2;\n          }\n        }\n        temp1 = temp1 + 1;\n        resultPtr1 = resultPtr1 + 2;\n      } while ((temp1 & 3) != 0);\n      do {\n        var2 = var4 & 3;\n        resultPtr1 = resultPtr2 + -2;\n        var4 = var4 - 1;\n        if (var2 == 0) {\n          DAT_20070468 = DAT_20070468 & ~temp2;\n          break;\n        }\n        resultPtr2 = (undefined4 *)*resultPtr2;\n      } while (resultPtr2 == resultPtr1);\n      temp2 = temp2 * 2;\n      if ((DAT_20070468 <= temp2 && temp2 - DAT_20070468 != 0) || (var4 = temp1, temp2 == 0))\n      break;\n      for (; (DAT_20070468 & temp2) == 0; temp2 = temp2 << 1) {\n        var4 = var4 + 4;\n      }\n    } while( true );\n  }\n  var4 = *(uint *)(DAT_2007046c + 4) & 0xfffffffc;\n  if ((newSize <= var4) && (temp1 = var4 - newSize, ptr4 = DAT_2007046c, 0xf < (int)temp1))\n  goto LAB_00081b1a;\n  ptr6 = DAT_2007046c + var4;\n  if (__malloc_sbrk_base == (undefined1 *)0xffffffff) {\n    temp1 = newSize + __malloc_top_pad + 0x10;\n  }\n  else {\n    temp1 = newSize + __malloc_top_pad + 0x100f & 0xfffff000;\n  }\n  ptr4 = (undefined1 *)_sbrk_r(mallocLock,temp1);\n  if ((ptr4 == (undefined1 *)0xffffffff) || ((ptr4 < ptr6 && (ptr5 != &__malloc_av_))))\n  {\n    var4 = *(uint *)(DAT_2007046c + 4) & 0xfffffffc;\n    ptr4 = DAT_2007046c;\n  }\n  else {\n    ptr3 = __malloc_current_mallinfo + temp1;\n    __malloc_current_mallinfo = ptr3;\n    if ((ptr6 == ptr4) && (((uint)ptr6 & 0xfff) == 0)) {\n      *(uint *)(DAT_2007046c + 4) = temp1 + var4 | 1;\n    }\n    else {\n      ptr1 = ptr4;\n      if (__malloc_sbrk_base != (undefined1 *)0xffffffff) {\n        ptr1 = __malloc_sbrk_base;\n        __malloc_current_mallinfo = ptr3 + ((int)ptr4 - (int)ptr6);\n      }\n      __malloc_sbrk_base = ptr1;\n      temp2 = (uint)ptr4 & 7;\n      if (temp2 == 0) {\n        count = 0x1000;\n      }\n      else {\n        ptr4 = ptr4 + (8 - temp2);\n        count = 0x1008 - temp2;\n      }\n      count = count - ((uint)(ptr4 + temp1) & 0xfff);\n      var1 = _sbrk_r(mallocLock,count);\n      if (var1 == -1) {\n        temp1 = 1;\n        count = 0;\n      }\n      else {\n        temp1 = (var1 - (int)ptr4) + count | 1;\n      }\n      ptr3 = __malloc_current_mallinfo + count;\n      DAT_2007046c = ptr4;\n      __malloc_current_mallinfo = ptr3;\n      *(uint *)(ptr4 + 4) = temp1;\n      if (ptr5 != &__malloc_av_) {\n        if (var4 < 0x10) {\n          *(undefined4 *)(ptr4 + 4) = 1;\n          var4 = 0;\n          goto LAB_00081b04;\n        }\n        var4 = var4 - 0xc & 0xfffffff8;\n        *(uint *)(ptr5 + 4) = var4 | *(uint *)(ptr5 + 4) & 1;\n        *(undefined4 *)(ptr5 + var4 + 4) = 5;\n        *(undefined4 *)(ptr5 + var4 + 8) = 5;\n        if (0xf < var4) {\n          _free_r(mallocLock,ptr5 + 8);\n          ptr3 = __malloc_current_mallinfo;\n        }\n      }\n    }\n    if (__malloc_max_sbrked_mem < ptr3) {\n      __malloc_max_sbrked_mem = ptr3;\n    }\n    if (__malloc_max_total_mem < ptr3) {\n      __malloc_max_total_mem = ptr3;\n    }\n    var4 = *(uint *)(DAT_2007046c + 4) & 0xfffffffc;\n    ptr4 = DAT_2007046c;\n  }\nLAB_00081b04:\n  temp1 = var4 - newSize;\n  if ((var4 < newSize) || ((int)temp1 < 0x10)) {\n    __malloc_unlock(mallocLock);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  DAT_2007046c = ptr4 + newSize;\n  *(uint *)(ptr4 + 4) = newSize | 1;\n  *(uint *)(DAT_2007046c + 4) = temp1 | 1;\n  __malloc_unlock(mallocLock);\n  return (int *)(ptr4 + 8);\n}\n\n",
            "renaming": {
                "FUN_00081810": "allocate_memory_00081810",
                "param_1": "mallocLock",
                "param_2": "size",
                "puVar1": "ptr1",
                "iVar2": "count",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "iVar5": "var1",
                "uVar6": "var2",
                "uVar7": "var3",
                "uVar8": "var4",
                "puVar9": "ptr2",
                "puVar10": "ptr3",
                "puVar11": "ptr4",
                "puVar12": "ptr5",
                "uVar13": "newSize",
                "puVar14": "resultPtr1",
                "puVar15": "resultPtr2",
                "puVar16": "ptr6"
            },
            "calling": [
                "malloc",
                "__smakebuf_r",
                "__sfvwrite_r",
                "_realloc_r"
            ],
            "called": [
                "__malloc_unlock",
                "_sbrk_r",
                "__malloc_lock",
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d48": {
            "entrypoint": "0x00081d48",
            "current_name": "copy_memory_00081d48",
            "code": "\nvoid * copyMemory_00081d48(void *destination,void *source,size_t length)\n\n{\n  undefined *destPtr;\n  undefined4 *destPtr2;\n  undefined4 *destPtr3;\n  undefined *tempPtr1;\n  undefined4 *srcPtr;\n  undefined *tempPtr2;\n  uint remainingLength;\n  uint adjustedLength;\n  bool isRemainingLengthValid;\n  \n  destPtr3 = (undefined4 *)destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (length < 8) {\n      adjustedLength = length - 4;\n      destPtr = (undefined *)destination;\n      if (3 < length) {\n        do {\n          tempPtr2 = (undefined *)source;\n          tempPtr1 = destPtr;\n          isRemainingLengthValid = adjustedLength != 0;\n          adjustedLength = adjustedLength - 1;\n          *tempPtr1 = *tempPtr2;\n          destPtr = tempPtr1 + 1;\n          source = tempPtr2 + 1;\n        } while (isRemainingLengthValid);\n        tempPtr1[1] = tempPtr2[1];\n        tempPtr1[2] = tempPtr2[2];\n        tempPtr1[3] = tempPtr2[3];\n        return destination;\n      }\n      goto LAB_00081dcc;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      adjustedLength = 4 - ((uint)destination & 3);\n      length = length - adjustedLength;\n      destPtr2 = (undefined4 *)destination;\n      srcPtr = (undefined4 *)source;\n                    /* WARNING: Load size is inaccurate */\n      if (((uint)destination & 1) != 0) {\n        srcPtr = (undefined4 *)((int)source + 1);\n        destPtr2 = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *source;\n      }\n      destPtr3 = destPtr2;\n      source = srcPtr;\n      if ((adjustedLength & 2) != 0) {\n        source = (void *)((int)srcPtr + 2);\n        destPtr3 = (undefined4 *)((int)destPtr2 + 2);\n        *(undefined2 *)destPtr2 = *(undefined2 *)srcPtr;\n      }\n    }\n  }\n  while (0x3f < length) {\n                    /* WARNING: Load size is inaccurate */\n    *destPtr3 = *source;\n    destPtr3[1] = *(undefined4 *)((int)source + 4);\n    destPtr3[2] = *(undefined4 *)((int)source + 8);\n    destPtr3[3] = *(undefined4 *)((int)source + 0xc);\n    destPtr3[4] = *(undefined4 *)((int)source + 0x10);\n    destPtr3[5] = *(undefined4 *)((int)source + 0x14);\n    destPtr3[6] = *(undefined4 *)((int)source + 0x18);\n    destPtr3[7] = *(undefined4 *)((int)source + 0x1c);\n    destPtr3[8] = *(undefined4 *)((int)source + 0x20);\n    destPtr3[9] = *(undefined4 *)((int)source + 0x24);\n    destPtr3[10] = *(undefined4 *)((int)source + 0x28);\n    destPtr3[0xb] = *(undefined4 *)((int)source + 0x2c);\n    destPtr3[0xc] = *(undefined4 *)((int)source + 0x30);\n    destPtr3[0xd] = *(undefined4 *)((int)source + 0x34);\n    destPtr3[0xe] = *(undefined4 *)((int)source + 0x38);\n    destPtr3[0xf] = *(undefined4 *)((int)source + 0x3c);\n    destPtr3 = destPtr3 + 0x10;\n    source = (undefined4 *)((int)source + 0x40);\n    length = length - 0x40;\n  }\n  remainingLength = length - 0x10;\n  if (0xffffffcf < length - 0x40) {\n    do {\n                    /* WARNING: Load size is inaccurate */\n      *destPtr3 = *source;\n      destPtr3[1] = *(undefined4 *)((int)source + 4);\n      destPtr3[2] = *(undefined4 *)((int)source + 8);\n      destPtr3[3] = *(undefined4 *)((int)source + 0xc);\n      destPtr3 = destPtr3 + 4;\n      source = (void *)((int)source + 0x10);\n      isRemainingLengthValid = 0xf < remainingLength;\n      remainingLength = remainingLength - 0x10;\n    } while (isRemainingLengthValid);\n  }\n  adjustedLength = remainingLength + 0xc;\n  srcPtr = destPtr3;\n  destPtr2 = (undefined4 *)source;\n  if (0xfffffff3 < remainingLength) {\n    do {\n      source = destPtr2 + 1;\n      *srcPtr = *destPtr2;\n      isRemainingLengthValid = 3 < adjustedLength;\n      adjustedLength = adjustedLength - 4;\n      destPtr3 = srcPtr + 1;\n      srcPtr = srcPtr + 1;\n      destPtr2 = (undefined4 *)source;\n    } while (isRemainingLengthValid);\n  }\nLAB_00081dcc:\n  if (adjustedLength + 4 != 0) {\n    destPtr2 = destPtr3;\n    srcPtr = (undefined4 *)source;\n                    /* WARNING: Load size is inaccurate */\n    if ((adjustedLength & 1) != 0) {\n      srcPtr = (undefined4 *)((int)source + 1);\n      destPtr2 = (undefined4 *)((int)destPtr3 + 1);\n      *(undefined *)destPtr3 = *source;\n    }\n    if ((adjustedLength + 4 & 2) != 0) {\n      *(undefined2 *)destPtr2 = *(undefined2 *)srcPtr;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_00081d48": "copy_memory_00081d48",
                "__dest": "destination",
                "__src": "source",
                "__n": "length",
                "puVar1": "destPtr",
                "puVar2": "destPtr2",
                "puVar3": "destPtr3",
                "puVar4": "tempPtr1",
                "puVar5": "srcPtr",
                "puVar6": "tempPtr2",
                "uVar7": "remainingLength",
                "uVar8": "adjustedLength",
                "bVar9": "isRemainingLengthValid"
            },
            "calling": [
                "__sfvwrite_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e34": {
            "entrypoint": "0x00081e34",
            "current_name": "copy_memory_00081e34",
            "code": "\nvoid * copyMemory_00081e34(void *destination,void *source,size_t numBytes)\n\n{\n  int index;\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 *tempPtr;\n  undefined *startPtr;\n  uint remainingBytes;\n  undefined *endPtr;\n  uint remainingBytes;\n  \n  if ((source < destination) && (startPtr = (undefined *)((int)source + numBytes), destination < startPtr)) {\n    endPtr = (undefined *)((int)destination + numBytes);\n    index = numBytes - 1;\n    if (numBytes != 0) {\n      do {\n        startPtr = startPtr + -1;\n        index = index + -1;\n        endPtr = endPtr + -1;\n        *endPtr = *startPtr;\n      } while (index != -1);\n    }\n    return destination;\n  }\n  destPtr = (undefined4 *)destination;\n  if (numBytes < 0x10) {\n    if (numBytes == 0) {\n      return destination;\n    }\n  }\n  else if ((((uint)destination | (uint)source) & 3) == 0) {\n    srcPtr = (undefined4 *)source;\n    do {\n      tempPtr = destPtr + 4;\n      *destPtr = *srcPtr;\n      destPtr[1] = srcPtr[1];\n      destPtr[2] = srcPtr[2];\n      destPtr[3] = srcPtr[3];\n      destPtr = tempPtr;\n      srcPtr = srcPtr + 4;\n    } while (tempPtr != (undefined4 *)((int)destination + (numBytes - 0x10 & 0xfffffff0) + 0x10));\n    remainingBytes = numBytes & 0xf;\n    index = ((numBytes - 0x10 >> 4) + 1) * 0x10;\n    source = (void *)((int)source + index);\n    destPtr = (undefined4 *)(index + (int)destination);\n    remainingBytes = remainingBytes;\n    srcPtr = destPtr;\n    tempPtr = (undefined4 *)source;\n    if (3 < remainingBytes) {\n      do {\n        remainingBytes = remainingBytes - 4;\n        *srcPtr = *tempPtr;\n        srcPtr = srcPtr + 1;\n        tempPtr = tempPtr + 1;\n      } while (3 < remainingBytes);\n      index = (remainingBytes - 4 & 0xfffffffc) + 4;\n      destPtr = (undefined4 *)((int)destPtr + index);\n      source = (void *)((int)source + index);\n      remainingBytes = numBytes & 3;\n    }\n    numBytes = remainingBytes;\n    if (numBytes == 0) {\n      return destination;\n    }\n  }\n  srcPtr = destPtr;\n  do {\n                    /* WARNING: Load size is inaccurate */\n    tempPtr = (undefined4 *)((int)srcPtr + 1);\n    *(undefined *)srcPtr = *source;\n    source = (undefined4 *)((int)source + 1);\n    srcPtr = tempPtr;\n  } while (tempPtr != (undefined4 *)(numBytes + (int)destPtr));\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_00081e34": "copy_memory_00081e34",
                "__dest": "destination",
                "__src": "source",
                "__n": "numBytes",
                "iVar1": "index",
                "puVar2": "destPtr",
                "puVar3": "srcPtr",
                "puVar4": "tempPtr",
                "puVar5": "startPtr",
                "puVar7": "endPtr",
                "uVar6": "remainingBytes",
                "uVar8": "remainingBytes"
            },
            "calling": [
                "__sfvwrite_r",
                "_realloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f00": {
            "entrypoint": "0x00081f00",
            "current_name": "memset_00081f00",
            "code": "\nvoid * memset_00081f00(void *ptr,int value,size_t size)\n\n{\n  uint *dst;\n  uint *src;\n  uint *next;\n  uint word;\n  uint remaining;\n  bool completed;\n  \n  src = (uint *)ptr;\n  if (((uint)ptr & 3) != 0) {\n    completed = size == 0;\n    dst = (uint *)ptr;\n    size = size - 1;\n    if (completed) {\n      return ptr;\n    }\n    while( true ) {\n      src = (uint *)((int)dst + 1);\n      *(char *)dst = (char)value;\n      if (((uint)src & 3) == 0) break;\n      completed = size == 0;\n      dst = src;\n      size = size - 1;\n      if (completed) {\n        return ptr;\n      }\n    }\n  }\n  if (3 < size) {\n    word = value & 0xffU | (value & 0xffU) << 8;\n    word = word | word << 0x10;\n    remaining = size;\n    dst = src;\n    if (0xf < size) {\n      remaining = size - 0x10;\n      do {\n        *dst = word;\n        dst[1] = word;\n        dst[2] = word;\n        dst[3] = word;\n        dst = dst + 4;\n      } while (dst != (uint *)((int)src + (remaining & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      src = src + ((remaining >> 4) + 1) * 4;\n      remaining = size;\n      dst = src;\n      if (size < 4) goto LAB_00081f7c;\n    }\n    do {\n      size = size - 4;\n      *src = word;\n      src = src + 1;\n    } while (3 < size);\n    src = (uint *)((int)dst + (remaining - 4 & 0xfffffffc) + 4);\n    size = remaining & 3;\n  }\nLAB_00081f7c:\n  if (size != 0) {\n    dst = src;\n    do {\n      next = (uint *)((int)dst + 1);\n      *(char *)dst = (char)value;\n      dst = next;\n    } while (next != (uint *)(size + (int)src));\n  }\n  return ptr;\n}\n\n",
            "renaming": {
                "FUN_00081f00": "memset_00081f00",
                "__s": "ptr",
                "__c": "value",
                "__n": "size",
                "puVar1": "dst",
                "puVar2": "src",
                "puVar3": "next",
                "uVar4": "word",
                "uVar5": "remaining",
                "bVar6": "completed"
            },
            "calling": [
                "__sinit",
                "RingBuffer"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f94": {
            "entrypoint": "0x00081f94",
            "current_name": "FUNC_00081f94",
            "code": "\nvoid FUNC_00081f94(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f94": "FUNC_00081f94"
            },
            "calling": [
                "_malloc_r",
                "_malloc_trim_r",
                "_realloc_r",
                "_free_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f98": {
            "entrypoint": "0x00081f98",
            "current_name": "FUNC_00081f98",
            "code": "\nvoid FUNC_00081f98(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f98": "FUNC_00081f98"
            },
            "calling": [
                "_malloc_r",
                "_malloc_trim_r",
                "_realloc_r",
                "_free_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f9c": {
            "entrypoint": "0x00081f9c",
            "current_name": "realloc_memory_00081f9c",
            "code": "\nvoid * realloc_memory_00081f9c(void *original_memory,size_t new_size)\n\n{\n  void *realloc_result;\n  \n  realloc_result = (void *)_realloc_r(_impure_ptr,original_memory,new_size);\n  return realloc_result;\n}\n\n",
            "renaming": {
                "FUN_00081f9c": "realloc_memory_00081f9c",
                "__ptr": "original_memory",
                "__size": "new_size",
                "pvVar1": "realloc_result"
            },
            "calling": [
                "changeBuffer"
            ],
            "called": [
                "_realloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081fac": {
            "entrypoint": "0x00081fac",
            "current_name": "allocate_memory_00081fac",
            "code": "\nint * allocate_memory_00081fac(undefined4 *param_ptr,int *ptr,uint size)\n\n{\n  int temp_var1;\n  int *new_ptr;\n  uint u_var3;\n  size_t data_size;\n  uint data_size_aligned;\n  int temp_var2;\n  int *temp_ptr;\n  uint block_size;\n  uint aligned_size;\n  int *alloc_ptr;\n  \n  if (ptr == (int *)0x0) {\n    new_ptr = (int *)_malloc_r(param_ptr,size);\n    return new_ptr;\n  }\n  __malloc_lock();\n  data_size_aligned = ptr[-1];\n  block_size = data_size_aligned & 0xfffffffc;\n  new_ptr = ptr + -2;\n  if (size + 0xb < 0x17) {\n    aligned_size = 0x10;\n  }\n  else {\n    aligned_size = size + 0xb & 0xfffffff8;\n    if ((int)aligned_size < 0) goto LAB_00082078;\n  }\n  if (aligned_size < size) {\nLAB_00082078:\n    *param_ptr = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)block_size < (int)aligned_size) {\n    temp_var1 = (int)new_ptr + block_size;\n    if (DAT_2007046c == temp_var1) {\n      u_var3 = *(uint *)(DAT_2007046c + 4) & 0xfffffffc;\n      temp_var1 = DAT_2007046c;\n      if ((int)(aligned_size + 0x10) <= (int)(u_var3 + block_size)) {\n        DAT_2007046c = (int)new_ptr + aligned_size;\n        *(uint *)(DAT_2007046c + 4) = (u_var3 + block_size) - aligned_size | 1;\n        ptr[-1] = aligned_size | ptr[-1] & 1U;\n        __malloc_unlock(param_ptr);\n        return ptr;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(temp_var1 + 4) & 0xfffffffe) + temp_var1 + 4) & 1) == 0) {\n      u_var3 = *(uint *)(temp_var1 + 4) & 0xfffffffc;\n      if ((int)aligned_size <= (int)(u_var3 + block_size)) {\n        temp_var2 = *(int *)(temp_var1 + 0xc);\n        temp_var1 = *(int *)(temp_var1 + 8);\n        *(int *)(temp_var1 + 0xc) = temp_var2;\n        *(int *)(temp_var2 + 8) = temp_var1;\n        block_size = u_var3 + block_size;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      u_var3 = 0;\n      temp_var1 = 0;\n    }\n    if (-1 < (int)(data_size_aligned << 0x1f)) {\n      alloc_ptr = (int *)((int)new_ptr - ptr[-2]);\n      data_size_aligned = (alloc_ptr[1] & 0xfffffffcU) + block_size;\n      if (temp_var1 != 0) {\n        if (temp_var1 == DAT_2007046c) {\n          if ((int)(aligned_size + 0x10) <= (int)(u_var3 + data_size_aligned)) {\n            new_ptr = alloc_ptr + 2;\n            temp_var1 = *new_ptr;\n            temp_var2 = alloc_ptr[3];\n            data_size = block_size - 4;\n            *(int *)(temp_var1 + 0xc) = temp_var2;\n            *(int *)(temp_var2 + 8) = temp_var1;\n            if (data_size < 0x25) {\n              temp_ptr = new_ptr;\n              if (0x13 < data_size) {\n                alloc_ptr[2] = *ptr;\n                alloc_ptr[3] = ptr[1];\n                if (data_size < 0x1c) {\n                  ptr = ptr + 2;\n                  temp_ptr = alloc_ptr + 4;\n                }\n                else {\n                  alloc_ptr[4] = ptr[2];\n                  alloc_ptr[5] = ptr[3];\n                  if (data_size == 0x24) {\n                    alloc_ptr[6] = ptr[4];\n                    temp_ptr = ptr + 5;\n                    ptr = ptr + 6;\n                    alloc_ptr[7] = *temp_ptr;\n                    temp_ptr = alloc_ptr + 8;\n                  }\n                  else {\n                    ptr = ptr + 4;\n                    temp_ptr = alloc_ptr + 6;\n                  }\n                }\n              }\n              *temp_ptr = *ptr;\n              temp_ptr[1] = ptr[1];\n              temp_ptr[2] = ptr[2];\n            }\n            else {\n              memmove(new_ptr,ptr,data_size);\n            }\n            DAT_2007046c = (int)alloc_ptr + aligned_size;\n            *(uint *)(DAT_2007046c + 4) = (u_var3 + data_size_aligned) - aligned_size | 1;\n            alloc_ptr[1] = aligned_size | alloc_ptr[1] & 1U;\n            __malloc_unlock(param_ptr);\n            return new_ptr;\n          }\n        }\n        else {\n          u_var3 = u_var3 + data_size_aligned;\n          if ((int)aligned_size <= (int)u_var3) {\n            temp_var2 = *(int *)(temp_var1 + 0xc);\n            temp_var1 = *(int *)(temp_var1 + 8);\n            *(int *)(temp_var1 + 0xc) = temp_var2;\n            *(int *)(temp_var2 + 8) = temp_var1;\n            temp_ptr = alloc_ptr + 2;\n            temp_var1 = *temp_ptr;\n            temp_var2 = alloc_ptr[3];\n            data_size = block_size - 4;\n            *(int *)(temp_var1 + 0xc) = temp_var2;\n            *(int *)(temp_var2 + 8) = temp_var1;\n            block_size = u_var3;\n            if (data_size < 0x25) {\n              new_ptr = temp_ptr;\n              if (0x13 < data_size) {\n                alloc_ptr[2] = *ptr;\n                alloc_ptr[3] = ptr[1];\n                if (data_size < 0x1c) {\n                  ptr = ptr + 2;\n                  new_ptr = alloc_ptr + 4;\n                }\n                else {\n                  alloc_ptr[4] = ptr[2];\n                  alloc_ptr[5] = ptr[3];\n                  if (data_size == 0x24) {\n                    alloc_ptr[6] = ptr[4];\n                    new_ptr = ptr + 5;\n                    ptr = ptr + 6;\n                    alloc_ptr[7] = *new_ptr;\n                    new_ptr = alloc_ptr + 8;\n                  }\n                  else {\n                    ptr = ptr + 4;\n                    new_ptr = alloc_ptr + 6;\n                  }\n                }\n              }\n              *new_ptr = *ptr;\n              new_ptr[1] = ptr[1];\n              new_ptr[2] = ptr[2];\n              data_size_aligned = alloc_ptr[1];\n              new_ptr = alloc_ptr;\n              ptr = temp_ptr;\n            }\n            else {\n              memmove(temp_ptr,ptr,data_size);\n              data_size_aligned = alloc_ptr[1];\n              new_ptr = alloc_ptr;\n              ptr = temp_ptr;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)aligned_size <= (int)data_size_aligned) {\n        temp_ptr = alloc_ptr + 2;\n        temp_var1 = *temp_ptr;\n        temp_var2 = alloc_ptr[3];\n        data_size = block_size - 4;\n        *(int *)(temp_var1 + 0xc) = temp_var2;\n        *(int *)(temp_var2 + 8) = temp_var1;\n        block_size = data_size_aligned;\n        if (data_size < 0x25) {\n          new_ptr = temp_ptr;\n          if (0x13 < data_size) {\n            alloc_ptr[2] = *ptr;\n            alloc_ptr[3] = ptr[1];\n            if (data_size < 0x1c) {\n              ptr = ptr + 2;\n              new_ptr = alloc_ptr + 4;\n            }\n            else {\n              alloc_ptr[4] = ptr[2];\n              alloc_ptr[5] = ptr[3];\n              if (data_size == 0x24) {\n                alloc_ptr[6] = ptr[4];\n                new_ptr = ptr + 5;\n                ptr = ptr + 6;\n                alloc_ptr[7] = *new_ptr;\n                new_ptr = alloc_ptr + 8;\n              }\n              else {\n                ptr = ptr + 4;\n                new_ptr = alloc_ptr + 6;\n              }\n            }\n          }\n          *new_ptr = *ptr;\n          new_ptr[1] = ptr[1];\n          new_ptr[2] = ptr[2];\n          data_size_aligned = alloc_ptr[1];\n          new_ptr = alloc_ptr;\n          ptr = temp_ptr;\n        }\n        else {\n          memmove(temp_ptr,ptr,data_size);\n          data_size_aligned = alloc_ptr[1];\n          new_ptr = alloc_ptr;\n          ptr = temp_ptr;\n        }\n        goto LAB_00082088;\n      }\n    }\n    alloc_ptr = (int *)_malloc_r(param_ptr,size);\n    if (alloc_ptr == (int *)0x0) goto LAB_000820a0;\n    data_size_aligned = ptr[-1];\n    if (alloc_ptr + -2 != (int *)((data_size_aligned & 0xfffffffe) + (int)new_ptr)) {\n      data_size = block_size - 4;\n      if (data_size < 0x25) {\n        new_ptr = ptr;\n        temp_ptr = alloc_ptr;\n        if (0x13 < data_size) {\n          *alloc_ptr = *ptr;\n          alloc_ptr[1] = ptr[1];\n          if (data_size < 0x1c) {\n            new_ptr = ptr + 2;\n            temp_ptr = alloc_ptr + 2;\n          }\n          else {\n            alloc_ptr[2] = ptr[2];\n            alloc_ptr[3] = ptr[3];\n            if (data_size == 0x24) {\n              alloc_ptr[4] = ptr[4];\n              alloc_ptr[5] = ptr[5];\n              new_ptr = ptr + 6;\n              temp_ptr = alloc_ptr + 6;\n            }\n            else {\n              new_ptr = ptr + 4;\n              temp_ptr = alloc_ptr + 4;\n            }\n          }\n        }\n        *temp_ptr = *new_ptr;\n        temp_ptr[1] = new_ptr[1];\n        temp_ptr[2] = new_ptr[2];\n      }\n      else {\n        memmove(alloc_ptr,ptr,data_size);\n      }\n      _free_r(param_ptr,ptr);\n      goto LAB_000820a0;\n    }\n    block_size = block_size + (alloc_ptr[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  u_var3 = block_size - aligned_size;\n  alloc_ptr = ptr;\n  if (u_var3 < 0x10) {\n    new_ptr[1] = data_size_aligned & 1 | block_size;\n    *(uint *)((int)new_ptr + block_size + 4) = *(uint *)((int)new_ptr + block_size + 4) | 1;\n  }\n  else {\n    new_ptr[1] = data_size_aligned & 1 | aligned_size;\n    *(uint *)((int)new_ptr + aligned_size + 4) = u_var3 | 1;\n    *(uint *)((int)new_ptr + u_var3 + aligned_size + 4) = *(uint *)((int)new_ptr + u_var3 + aligned_size + 4) | 1;\n    _free_r(param_ptr,(int)new_ptr + aligned_size + 8);\n  }\nLAB_000820a0:\n  __malloc_unlock(param_ptr);\n  return alloc_ptr;\n}\n\n",
            "renaming": {
                "FUN_00081fac": "allocate_memory_00081fac",
                "param_1": "param_ptr",
                "param_2": "ptr",
                "param_3": "size",
                "iVar1": "temp_var1",
                "piVar2": "new_ptr",
                "uVar3": "u_var3",
                "sVar4": "data_size",
                "uVar5": "data_size_aligned",
                "iVar6": "temp_var2",
                "piVar7": "temp_ptr",
                "uVar8": "block_size",
                "uVar9": "aligned_size",
                "piVar10": "alloc_ptr"
            },
            "calling": [
                "__sfvwrite_r",
                "realloc"
            ],
            "called": [
                "memmove",
                "_malloc_r",
                "__malloc_unlock",
                "__malloc_lock",
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008236c": {
            "entrypoint": "0x0008236c",
            "current_name": "allocate_memory_0008236c",
            "code": "\nvoid allocateMemory_0008236c(int *errorCode,intptr_t size)\n\n{\n  void *memoryPtr;\n  \n  errno = 0;\n  memoryPtr = _sbrk(size);\n  if ((memoryPtr == (void *)0xffffffff) && (errno != 0)) {\n    *errorCode = errno;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008236c": "allocate_memory_0008236c",
                "param_1": "errorCode",
                "param_2": "size",
                "pvVar1": "memoryPtr"
            },
            "calling": [
                "_malloc_r",
                "_malloc_trim_r"
            ],
            "called": [
                "_sbrk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082390": {
            "entrypoint": "0x00082390",
            "current_name": "compare_strings_00082390",
            "code": "\nint compareStrings_00082390(char *string1,char *string2)\n\n{\n  uint *uintPointer1;\n  int result;\n  byte *bytePointer1;\n  byte *bytePointer2;\n  uint *uintPointer2;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  \n  if ((((uint)string1 | (uint)string2) & 7) != 0) {\n    uintPointer1 = (uint *)string1;\n    if (((uint)string1 & 3) != 0) {\n      uintPointer1 = (uint *)((uint)string1 & 0xfffffffc) + 1;\n      temp1 = *(uint *)((uint)string1 & 0xfffffffc);\n      bytePointer1 = (byte *)string2;\n      if (((uint)string1 & 1) == 0) {\nLAB_00082410:\n        bytePointer2 = bytePointer1 + 1;\n        temp2 = temp1 >> 0x10 & 0xff;\n        result = temp2 - *bytePointer1;\n        if (result != 0) {\n          return result;\n        }\n        if (temp2 == 0) {\n          return 0;\n        }\n      }\n      else {\n        bytePointer2 = (byte *)string2;\n        if (((uint)string1 & 2) == 0) {\n          bytePointer1 = (byte *)(string2 + 1);\n          temp2 = temp1 >> 8 & 0xff;\n          result = temp2 - (byte)*string2;\n          if (result != 0) {\n            return result;\n          }\n          if (temp2 == 0) {\n            return 0;\n          }\n          goto LAB_00082410;\n        }\n      }\n      string2 = (char *)(bytePointer2 + 1);\n      result = (temp1 >> 0x18) - (uint)*bytePointer2;\n      if ((result != 0) || (temp1 >> 0x18 == 0)) {\n        return result;\n      }\n    }\n    temp1 = (uint)string2 & 3;\n    if (temp1 != 0) {\n      uintPointer2 = (uint *)((uint)string2 & 0xfffffffc);\n      if (temp1 == 2) {\n        temp1 = *uintPointer2;\n        do {\n          uintPointer2 = uintPointer2 + 1;\n          temp3 = *uintPointer1;\n          temp1 = temp1 >> 0x10;\n          temp4 = temp3 + 0xfefefeff & ~temp3;\n          temp5 = temp4 & 0x80808080;\n          temp2 = temp3 & 0xffff;\n          if ((temp4 & 0x8080) != 0 || temp2 != temp1) goto LAB_0008258e;\n          temp1 = *uintPointer2;\n          temp2 = temp2 ^ temp3;\n          temp3 = temp1 * 0x10000;\n          uintPointer1 = uintPointer1 + 1;\n        } while (temp5 == 0 && temp2 == temp3);\n      }\n      else if (temp1 < 2) {\n        temp1 = *uintPointer2;\n        do {\n          uintPointer2 = uintPointer2 + 1;\n          temp3 = *uintPointer1;\n          temp1 = temp1 >> 8;\n          temp4 = temp3 + 0xfefefeff & ~temp3;\n          temp5 = temp4 & 0x80808080;\n          temp2 = temp3 & 0xffffff;\n          if ((temp4 & 0x808080) != 0 || temp2 != temp1) goto LAB_0008258e;\n          temp1 = *uintPointer2;\n          temp2 = temp2 ^ temp3;\n          temp3 = temp1 * 0x1000000;\n          uintPointer1 = uintPointer1 + 1;\n        } while (temp5 == 0 && temp2 == temp3);\n      }\n      else {\n        temp1 = *uintPointer2;\n        do {\n          uintPointer2 = uintPointer2 + 1;\n          temp3 = *uintPointer1;\n          temp1 = temp1 >> 0x18;\n          temp4 = temp3 + 0xfefefeff & ~temp3;\n          temp5 = temp4 & 0x80808080;\n          temp2 = temp3 & 0xff;\n          if ((temp4 & 0x80) != 0 || temp2 != temp1) goto LAB_0008258e;\n          temp1 = *uintPointer2;\n          temp2 = temp2 ^ temp3;\n          temp3 = temp1 * 0x100;\n          uintPointer1 = uintPointer1 + 1;\n        } while (temp5 == 0 && temp2 == temp3);\n      }\n      temp2 = temp2 << 0x18 | (temp2 >> 8 & 0xff) << 0x10 | (temp2 >> 0x10 & 0xff) << 8 |\n              temp2 >> 0x18;\n      temp1 = (temp3 >> 8 & 0xff) << 0x10 | (temp3 >> 0x10 & 0xff) << 8 | temp3 >> 0x18;\n      goto LAB_0008259e;\n    }\n    string1 = (char *)uintPointer1;\n    uintPointer2 = (uint *)string2;\n    if (((uint)uintPointer1 & 4) != 0) {\n      string1 = (char *)(uintPointer1 + 1);\n      temp1 = *uintPointer1;\n      uintPointer2 = (uint *)((int)string2 + 4);\n      temp3 = *(uint *)string2;\n      temp5 = temp1 + 0xfefefeff & ~temp1 & 0x80808080;\n      if (temp1 != temp3 || temp5 != 0) {\nLAB_0008259a:\n        temp2 = temp1 << 0x18 | (temp1 >> 8 & 0xff) << 0x10 | (temp1 >> 0x10 & 0xff) << 8 |\n                temp1 >> 0x18;\n        temp1 = temp3 << 0x18 | (temp3 >> 8 & 0xff) << 0x10 | (temp3 >> 0x10 & 0xff) << 8 |\n                temp3 >> 0x18;\n        goto LAB_0008259e;\n      }\n    }\n    string2 = (char *)uintPointer2;\n    if (((uint)uintPointer2 & 4) != 0) {\n      temp1 = *uintPointer2;\n      uintPointer1 = uintPointer2 + 1;\n      do {\n        temp2 = *(uint *)string1;\n        temp3 = *(uint *)((int)string1 + 4);\n        temp5 = temp2 + 0xfefefeff & ~temp2 & 0x80808080;\n        if (temp2 != temp1 || temp5 != 0) goto LAB_0008258e;\n        temp4 = *uintPointer1;\n        temp1 = uintPointer1[1];\n        temp5 = temp3 + 0xfefefeff & ~temp3 & 0x80808080;\n        string1 = (char *)((int)string1 + 8);\n        uintPointer1 = uintPointer1 + 2;\n      } while (temp3 == temp4 && temp5 == 0);\n      temp2 = temp3 << 0x18 | (temp3 >> 8 & 0xff) << 0x10 | (temp3 >> 0x10 & 0xff) << 8 |\n              temp3 >> 0x18;\n      temp1 = temp4 << 0x18 | (temp4 >> 8 & 0xff) << 0x10 | (temp4 >> 0x10 & 0xff) << 8 |\n              temp4 >> 0x18;\n      goto LAB_0008259e;\n    }\n  }\n  do {\n    temp1 = *(uint *)string1;\n    temp2 = *(uint *)((int)string1 + 4);\n    temp3 = *(uint *)string2;\n    temp4 = *(uint *)((int)string2 + 4);\n    temp5 = temp1 + 0xfefefeff & ~temp1 & 0x80808080;\n    if (temp1 != temp3 || temp5 != 0) goto LAB_0008259a;\n    temp5 = temp2 + 0xfefefeff & ~temp2 & 0x80808080;\n    string1 = (char *)((int)string1 + 8);\n    string2 = (char *)((int)string2 + 8);\n  } while (temp2 == temp4 && temp5 == 0);\n  temp2 = temp2 << 0x18 | (temp2 >> 8 & 0xff) << 0x10 | (temp2 >> 0x10 & 0xff) << 8 | temp2 >> 0x18;\n  temp1 = temp4 << 0x18 | (temp4 >> 8 & 0xff) << 0x10 | (temp4 >> 0x10 & 0xff) << 8 | temp4 >> 0x18;\nLAB_0008259e:\n  temp3 = temp5 << 0x18 | (temp5 >> 8 & 0xff) << 0x10 | (temp5 >> 0x10 & 0xff) << 8 |\n          temp5 >> 0x18;\n  if (temp3 != 0) {\n    temp3 = 0x18 - LZCOUNT(temp3);\n    temp2 = temp2 >> (temp3 & 0xff);\n    temp1 = temp1 >> (temp3 & 0xff);\n  }\n  result = 1;\n  if (temp2 <= temp1) {\n    result = -(uint)(temp2 < temp1);\n  }\n  return result;\nLAB_0008258e:\n  temp2 = temp2 << 0x18 | (temp2 >> 8 & 0xff) << 0x10 | (temp2 >> 0x10 & 0xff) << 8 | temp2 >> 0x18;\n  temp1 = temp1 << 0x18 | (temp1 >> 8 & 0xff) << 0x10 | (temp1 >> 0x10 & 0xff) << 8 | temp1 >> 0x18;\n  goto LAB_0008259e;\n}\n\n",
            "renaming": {
                "FUN_00082390": "compare_strings_00082390",
                "__s1": "string1",
                "__s2": "string2",
                "puVar1": "uintPointer1",
                "iVar2": "result",
                "pbVar3": "bytePointer1",
                "pbVar4": "bytePointer2",
                "puVar5": "uintPointer2",
                "uVar6": "temp1",
                "uVar7": "temp2",
                "uVar8": "temp3",
                "uVar9": "temp4",
                "uVar10": "temp5"
            },
            "calling": [
                "equals"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825cc": {
            "entrypoint": "0x000825cc",
            "current_name": "copy_string_with_alignment_check_000825cc",
            "code": "\nchar * copyStringWithAlignmentCheck_000825cc(char *destination,char *source)\n\n{\n  char currentChar;\n  ushort currentShort;\n  uint *ptr4;\n  uint *ptrSrc;\n  uint currentWord;\n  uint nextWord;\n  uint *ptrDest;\n  uint *ptrDestAligned;\n  char *destPtr;\n  bool isZeroChar;\n  \n  destPtr = destination;\n  if ((((uint)destination ^ (uint)source) & 3) != 0) {\n    do {\n      currentChar = *source;\n      *destPtr = currentChar;\n      source = source + 1;\n      destPtr = destPtr + 1;\n    } while (currentChar != '\\0');\n    return destination;\n  }\n  ptrDestAligned = (uint *)destination;\n  if (((uint)source & 3) != 0) {\n    ptrSrc = (uint *)source;\n    if (((uint)source & 1) != 0) {\n      ptrSrc = (uint *)(source + 1);\n      currentChar = *source;\n      ptrDestAligned = (uint *)(destination + 1);\n      *destination = currentChar;\n      if (currentChar == '\\0') {\n        return destination;\n      }\n    }\n    source = (char *)ptrSrc;\n    if (((uint)ptrSrc & 2) != 0) {\n      source = (char *)((int)ptrSrc + 2);\n      currentShort = *(ushort *)ptrSrc;\n      isZeroChar = (currentShort & 0xff) == 0;\n      if (isZeroChar) {\n        *(char *)ptrDestAligned = (char)currentShort;\n      }\n      else {\n        *(ushort *)ptrDestAligned = currentShort;\n        isZeroChar = (currentShort & 0xff00) == 0;\n        ptrDestAligned = (uint *)((int)ptrDestAligned + 2);\n      }\n      if (isZeroChar) {\n        return destination;\n      }\n    }\n  }\n  currentWord = *(uint *)source;\n  ptrSrc = (uint *)((int)source + 4);\n  ptrDest = ptrDestAligned;\n  if (((uint)source & 4) != 0) {\n    if ((currentWord + 0xfefefeff & ~currentWord & 0x80808080) != 0) goto LAB_00082630;\n    ptrDest = ptrDestAligned + 1;\n    *ptrDestAligned = currentWord;\n    ptrSrc = (uint *)((int)source + 8);\n    currentWord = *(uint *)((int)source + 4);\n  }\n  while( true ) {\n    ptr4 = ptrSrc + 1;\n    nextWord = *ptrSrc;\n    ptrDestAligned = ptrDest;\n    if ((currentWord + 0xfefefeff & ~currentWord & 0x80808080) != 0) break;\n    ptrDestAligned = ptrDest + 1;\n    *ptrDest = currentWord;\n    currentWord = nextWord;\n    if ((nextWord + 0xfefefeff & ~nextWord & 0x80808080) != 0) break;\n    ptrSrc = ptrSrc + 2;\n    currentWord = *ptr4;\n    ptrDest = ptrDest + 2;\n    *ptrDestAligned = nextWord;\n  }\nLAB_00082630:\n  do {\n    *(char *)ptrDestAligned = (char)currentWord;\n    nextWord = currentWord & 0xff;\n    currentWord = currentWord >> 8 | currentWord << 0x18;\n    ptrDestAligned = (uint *)((int)ptrDestAligned + 1);\n  } while (nextWord != 0);\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_000825cc": "copy_string_with_alignment_check_000825cc",
                "__dest": "destination",
                "__src": "source",
                "cVar1": "currentChar",
                "uVar2": "currentShort",
                "puVar3": "ptr4",
                "puVar4": "ptrSrc",
                "uVar5": "currentWord",
                "uVar6": "nextWord",
                "puVar7": "ptrDest",
                "puVar8": "ptrDestAligned",
                "pcVar9": "destPtr",
                "bVar10": "isZeroChar"
            },
            "calling": [
                "copy",
                "concat",
                "move"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082688": {
            "entrypoint": "0x00082688",
            "current_name": "count_leading_zero_bytes_00082688",
            "code": "\nsize_t count_leading_zero_bytes_00082688(char *str)\n\n{\n  size_t leading_zeros;\n  uint *word_ptr;\n  uint word;\n  bool is_zero_byte;\n  \n  word_ptr = (uint *)((uint)str & 0xfffffffc);\n  leading_zeros = -((uint)str & 3);\n  word = *word_ptr;\n  if (((uint)str & 3) != 0) {\n    word = word | 0xffffffffU >> ((leading_zeros + 4 & 0x1f) << 3);\n  }\n  while (word_ptr = word_ptr + 1, (word + 0xfefefeff & ~word & 0x80808080) == 0) {\n    leading_zeros = leading_zeros + 4;\n    word = *word_ptr;\n  }\n  is_zero_byte = (word & 0xff) == 0;\n  if (!is_zero_byte) {\n    leading_zeros = leading_zeros + 1;\n    is_zero_byte = (word & 0xff00) == 0;\n  }\n  if (!is_zero_byte) {\n    leading_zeros = leading_zeros + 1;\n    is_zero_byte = (word & 0xff0000) == 0;\n  }\n  if (!is_zero_byte) {\n    leading_zeros = leading_zeros + 1;\n  }\n  return leading_zeros;\n}\n\n",
            "renaming": {
                "FUN_00082688": "count_leading_zero_bytes_00082688",
                "__s": "str",
                "sVar1": "leading_zeros",
                "puVar2": "word_ptr",
                "uVar3": "word",
                "bVar4": "is_zero_byte"
            },
            "calling": [
                "String",
                "_vfiprintf_r",
                "write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000826e8": {
            "entrypoint": "0x000826e8",
            "current_name": "parse_integer_000826e8",
            "code": "\nuint parseInteger_000826e8(undefined4 *output,byte *input,byte **remainingInput,uint base)\n\n{\n  byte charType;\n  byte isNegative;\n  uint result;\n  byte *inputPtr;\n  uint currentChar;\n  byte *currentCharPtr;\n  int charValue;\n  int isOverflow;\n  uint maxQuotient;\n  uint minQuotient;\n  \n  inputPtr = input;\n  do {\n    currentCharPtr = inputPtr;\n    inputPtr = currentCharPtr + 1;\n    currentChar = (uint)*currentCharPtr;\n    charType = *(byte *)(__ctype_ptr__ + currentChar + 1);\n    isNegative = charType & 8;\n  } while ((charType & 8) != 0);\n  if (currentChar == 0x2d) {\n    inputPtr = currentCharPtr + 2;\n    currentChar = (uint)currentCharPtr[1];\n    isNegative = 1;\n  }\n  else if (currentChar == 0x2b) {\n    currentChar = (uint)currentCharPtr[1];\n    inputPtr = currentCharPtr + 2;\n  }\n  if ((base & 0xffffffef) == 0) {\n    if (currentChar == 0x30) {\n      if ((*inputPtr & 0xdf) == 0x58) {\n        currentChar = (uint)inputPtr[1];\n        base = 0x10;\n        inputPtr = inputPtr + 2;\n      }\n      else if (base == 0) {\n        base = 8;\n      }\n    }\n    else if (base == 0) {\n      base = 10;\n    }\n  }\n  if (isNegative == 0) {\n    minQuotient = 0x7fffffff;\n  }\n  else {\n    minQuotient = 0x80000000;\n  }\n  maxQuotient = minQuotient / base;\n  isOverflow = 0;\n  result = 0;\n  do {\n    charType = *(byte *)(__ctype_ptr__ + currentChar + 1);\n    if ((charType & 4) == 0) {\n      if ((charType & 3) == 0) break;\n      if ((charType & 3) == 1) {\n        charValue = 0x37;\n      }\n      else {\n        charValue = 0x57;\n      }\n      charValue = currentChar - charValue;\n    }\n    else {\n      charValue = currentChar - 0x30;\n    }\n    if ((int)base <= charValue) break;\n    if (isOverflow != -1) {\n      if ((maxQuotient <= result && result != maxQuotient) ||\n         ((result == maxQuotient && ((int)(minQuotient - base * maxQuotient) < charValue)))) {\n        isOverflow = -1;\n      }\n      else {\n        result = base * result + charValue;\n        isOverflow = 1;\n      }\n    }\n    currentChar = (uint)*inputPtr;\n    inputPtr = inputPtr + 1;\n  } while( true );\n  if (isOverflow == -1) {\n    if (isNegative == 0) {\n      result = 0x7fffffff;\n    }\n    else {\n      result = 0x80000000;\n    }\n    *output = 0x22;\n    if (remainingInput == (byte **)0x0) {\n      return result;\n    }\n  }\n  else {\n    if (isNegative != 0) {\n      result = -result;\n    }\n    if (remainingInput == (byte **)0x0) {\n      return result;\n    }\n    if (isOverflow == 0) goto LAB_0008278c;\n  }\n  input = inputPtr + -1;\nLAB_0008278c:\n  *remainingInput = input;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000826e8": "parse_integer_000826e8",
                "param_1": "output",
                "param_2": "input",
                "param_3": "remainingInput",
                "param_4": "base",
                "bVar1": "charType",
                "bVar2": "isNegative",
                "uVar3": "result",
                "pbVar4": "inputPtr",
                "uVar5": "currentChar",
                "pbVar6": "currentCharPtr",
                "iVar7": "charValue",
                "iVar8": "isOverflow",
                "uVar9": "maxQuotient",
                "uVar10": "minQuotient"
            },
            "calling": [
                "strtol"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000827fc": {
            "entrypoint": "0x000827fc",
            "current_name": "convert_string_to_long_000827fc",
            "code": "\nlong convertStringToLong_000827fc(char *string,char **endPointer,int base)\n\n{\n  long convertedValue;\n  \n  convertedValue = _strtol_r(_impure_ptr,string,endPointer,base);\n  return convertedValue;\n}\n\n",
            "renaming": {
                "FUN_000827fc": "convert_string_to_long_000827fc",
                "__nptr": "string",
                "__endptr": "endPointer",
                "__base": "base",
                "lVar1": "convertedValue"
            },
            "calling": [
                "atol"
            ],
            "called": [
                "_strtol_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082814": {
            "entrypoint": "0x00082814",
            "current_name": "kill_process_00082814",
            "code": "\nint killProcess_00082814(pid_t pid,int signal)\n\n{\n  int result;\n  \n  result = _kill_r(_impure_ptr,pid,signal);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082814": "kill_process_00082814",
                "__pid": "pid",
                "__sig": "signal",
                "iVar1": "result"
            },
            "calling": [],
            "called": [
                "_kill_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082824": {
            "entrypoint": "0x00082824",
            "current_name": "write_output_to_file_00082824",
            "code": "\nint writeOutputToFile_00082824(undefined4 outputFile,int numRecords,int **data)\n\n{\n  int *currentRecord;\n  int writeStatus;\n  int *remainingData;\n  uint writeCount;\n  undefined4 *currentData;\n  uint recordSize;\n  uint numRecordsToWrite;\n  \n  if (-1 < *(int *)(numRecords + 100) << 0x12) {\n    writeStatus = __sfvwrite_r();\n    data[2] = (int *)0x0;\n    data[1] = (int *)0x0;\n    return writeStatus;\n  }\n  remainingData = data[2];\n  currentRecord = *data;\n  while (remainingData != (int *)0x0) {\n    recordSize = currentRecord[1];\n    numRecordsToWrite = recordSize >> 2;\n    if (numRecordsToWrite != 0) {\n      currentData = (undefined4 *)(*currentRecord + -4);\n      writeCount = 0;\n      do {\n        currentData = currentData + 1;\n        writeStatus = _fputwc_r(outputFile,*currentData,numRecords);\n        writeCount = writeCount + 1;\n        if (writeStatus == -1) goto LAB_00082864;\n      } while (numRecordsToWrite != writeCount);\n      remainingData = data[2];\n    }\n    remainingData = (int *)((int)remainingData - (recordSize & 0xfffffffc));\n    data[2] = remainingData;\n    currentRecord = currentRecord + 2;\n  }\n  writeStatus = 0;\nLAB_00082864:\n  data[2] = (int *)0x0;\n  data[1] = (int *)0x0;\n  return writeStatus;\n}\n\n",
            "renaming": {
                "FUN_00082824": "write_output_to_file_00082824",
                "param_1": "outputFile",
                "param_2": "numRecords",
                "param_3": "data",
                "piVar1": "currentRecord",
                "iVar2": "writeStatus",
                "piVar3": "remainingData",
                "uVar4": "writeCount",
                "puVar5": "currentData",
                "uVar6": "recordSize",
                "uVar7": "numRecordsToWrite"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "_fputwc_r",
                "__sfvwrite_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008289c": {
            "entrypoint": "0x0008289c",
            "current_name": "format_string_0008289c",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint formatString_0008289c(int str,int format,int *******arg,int **args)\n\n{\n  bool isLeftJustified;\n  bool isSignShown;\n  bool isAlternateForm;\n  char signChar;\n  bool isZeroPadded;\n  void *ptr;\n  int ********ptrStack;\n  int *width;\n  int result;\n  char ch;\n  int *******ptrIter;\n  uint chIter;\n  int **ptrStack2;\n  uint flags;\n  uint chFlags;\n  int iter;\n  int ********pptrIter2;\n  int iter2;\n  int *******ptrLeftAlignIter;\n  int *arg;\n  int *******pppppppiVar21;\n  uint uVar;\n  int *pisNegative;\n  int *******ptrZeroPadIter;\n  undefined4 uVar;\n  int ********ptrStr;\n  bool isShort;\n  longlong longlongVar;\n  int *******maxPrecision;\n  int *******maxWidth;\n  int **pArgs;\n  int resultLen;\n  char *hexDigits;\n  char argSignChar;\n  undefined paddingChar;\n  undefined hexPrefixChar;\n  int ********pFormat;\n  int argCount;\n  int *******pArgList;\n  undefined nullChar;\n  char zeroPaddingChar;\n  undefined zeroPaddingChar;\n  undefined ptrStack [4];\n  int *******ptrStackArray [16];\n  \n  if ((str != 0) && (*(int *)(str + 0x38) == 0)) {\n    ptrStrinit();\n  }\n  flags = (uint)*(ushort *)(format + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(format + 0xc) << 0x12)) {\n    flags = flags | 0x2000;\n    *(short *)(format + 0xc) = (short)flags;\n    *(uint *)(format + 100) = *(uint *)(format + 100) & 0xffffdfff;\n  }\n  if (((int)(flags << 0x1c) < 0) && (*(int *)(format + 0x10) != 0)) {\n    if ((flags & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    result = ptrStrwsetup_r(str,format);\n    if (result != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(format + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(format + 0xe)) {\n    result = ptrStrbprintf(str,format,arg,args);\n    return result;\n  }\nLAB_000828ee:\n  hexDigits = (char *)0x0;\n  pArgList = (int *******)0x0;\n  argCount = 0;\n  resultLen = 0;\n  ptrStack = (int ********)ptrStack;\n  pArgs = args;\n  pFormat = (int ********)ptrStack;\nLAB_00082902:\n  ptrIter = arg;\n  if ((*(char *)arg != '\\0') && (*(char *)arg != '%')) {\n    do {\n      ptrIter = (int *******)((int)ptrIter + 1);\n      if (*(char *)ptrIter == '\\0') break;\n    } while (*(char *)ptrIter != '%');\n    pppppppiVar21 = (int *******)((int)ptrIter - (int)arg);\n    if (pppppppiVar21 != (int *******)0x0) {\n      argCount = argCount + 1;\n      pArgList = (int *******)((int)pArgList + (int)pppppppiVar21);\n      *ptrStack = arg;\n      ptrStack[1] = pppppppiVar21;\n      if (argCount < 8) {\n        ptrStack = ptrStack + 2;\n      }\n      else {\n        if (pArgList == (int *******)0x0) {\n          resultLen = resultLen + (int)pppppppiVar21;\n          argCount = 0;\n          ptrStack = (int ********)ptrStack;\n          goto LAB_00082952;\n        }\n        result = ptrStrprint_r_part_0(str,format,&pFormat);\n        ptrStack = (int ********)ptrStack;\n        if (result != 0) goto LAB_00083142;\n      }\n      resultLen = resultLen + (int)pppppppiVar21;\n    }\n  }\nLAB_00082952:\n  if (*(char *)ptrIter != '\\0') {\n    argSignChar = '\\0';\n    chFlags = (uint)*(byte *)((int)ptrIter + 1);\n    flags = 0;\n    isZeroPadded = false;\n    isSignShown = false;\n    isLeftJustified = false;\n    isAlternateForm = false;\n    isShort = false;\n    pppppppiVar21 = (int *******)0x0;\n    maxWidth = (int *******)0xffffffff;\n    arg = (int *******)((int)ptrIter + 1);\nLAB_00082976:\n    arg = (int *******)((int)arg + 1);\nLAB_0008297a:\n    switch(chFlags) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (chFlags != 0) {\n        maxPrecision = (int *******)0x1;\n        maxWidth = (int *******)0x1;\n        ptrStr = (int ********)&nullChar;\n        nullChar = (char)chFlags;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      isAlternateForm = true;\n      chFlags = (uint)*(byte *)arg;\n      goto LAB_00082976;\n    case 0x2a:\n      pppppppiVar21 = (int *******)*pArgs;\n      pArgs = pArgs + 1;\n      if ((int)pppppppiVar21 < 0) {\n        pppppppiVar21 = (int *******)-(int)pppppppiVar21;\n        goto switchD_00082984_caseD_2d;\n      }\n      chFlags = (uint)*(byte *)arg;\n      goto LAB_00082976;\n    case 0x2b:\n      chFlags = (uint)*(byte *)arg;\n      argSignChar = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      flags = flags | 4;\n      chFlags = (uint)*(byte *)arg;\n      goto LAB_00082976;\n    case 0x2e:\n      chFlags = (uint)*(byte *)arg;\n      ptrIter = (int *******)((int)arg + 1);\n      if (chFlags == 0x2a) {\n        chFlags = (uint)*(byte *)((int)arg + 1);\n        maxWidth = (int *******)*pArgs;\n        pArgs = pArgs + 1;\n        arg = ptrIter;\n        if ((int)maxWidth < 0) {\n          maxWidth = (int *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      chIter = chFlags - 0x30;\n      if (chIter < 10) {\n        uVar = 0;\n        do {\n          arg = (int *******)((int)ptrIter + 1);\n          chFlags = (uint)*(byte *)ptrIter;\n          uVar = chIter + uVar * 10;\n          chIter = chFlags - 0x30;\n          ptrIter = arg;\n        } while (chIter < 10);\n        maxWidth = (int *******)(uVar | (int)uVar >> 0x1f);\n      }\n      else {\n        maxWidth = (int *******)0x0;\n        arg = ptrIter;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      flags = flags | 0x80;\n      chFlags = (uint)*(byte *)arg;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      isSignShown = true;\n      if (isLeftJustified == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      pArgs = (int **)((int)pArgs + 7U & 0xfffffff8);\n      arg = *pArgs;\n      pisNegative = pArgs[1];\n      pArgs = pArgs + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      isSignShown = true;\n      if (isLeftJustified != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      result = (uint)isSignShown << 4;\n      iter = (uint)isLeftJustified << 5;\n      if ((isSignShown == 0) && (iter = (uint)isShort << 6, isShort != 0)) {\n        arg = (int *)(uint)*(ushort *)pArgs;\n        pArgs = pArgs + 1;\n        pisNegative = (int *)0x0;\n      }\n      else {\n        result = iter;\n        arg = *pArgs;\n        pArgs = pArgs + 1;\n        pisNegative = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      isSignShown = true;\n      if (isLeftJustified != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((isSignShown) || (isShort == false)) {\n        result = 1;\n        arg = *pArgs;\n        pArgs = pArgs + 1;\n        pisNegative = (int *)0x0;\n      }\n      else {\n        pisNegative = (int *)0x0;\n        arg = (int *)(uint)*(ushort *)pArgs;\n        pArgs = pArgs + 1;\n        result = 1;\n      }\n      break;\n    case 0x58:\n      hexDigits = \"0123456789ABCDEF\";\n      if (isLeftJustified == false) goto LAB_00082efa;\nLAB_00082d1a:\n      ptrStack2 = (int **)((int)pArgs + 7U & 0xfffffff8);\n      pArgs = ptrStack2 + 2;\n      arg = *ptrStack2;\n      pisNegative = ptrStack2[1];\n      goto LAB_00082d2e;\n    case 99:\n      arg = *pArgs;\n      pArgs = pArgs + 1;\n      maxPrecision = (int *******)0x1;\n      nullChar = SUB41(arg,0);\n      maxWidth = (int *******)0x1;\n      ptrStr = (int ********)&nullChar;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (isLeftJustified != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((isSignShown == false) && (isShort != false)) {\n        arg = (int *)(int)*(short *)pArgs;\n        pArgs = pArgs + 1;\n        pisNegative = (int *)((int)arg >> 0x1f);\n      }\n      else {\n        arg = *pArgs;\n        pArgs = pArgs + 1;\n        pisNegative = (int *)((int)arg >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)pisNegative < 0) {\n        isShort = arg != (int *)0x0;\n        arg = (int *)-(int)arg;\n        pisNegative = (int *)(-(int)pisNegative - (uint)isShort);\n        argSignChar = '-';\n        signChar = '-';\n        result = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)maxWidth) {\n        flags = flags & 0xffffff7f;\n      }\n      isZeroPadded = false;\n      chFlags = (uint)arg | (uint)pisNegative;\n      result = 1;\n      signChar = argSignChar;\n      goto joined_r0x00082adc;\n    case 0x68:\n      isShort = true;\n      chFlags = (uint)*(byte *)arg;\n      goto LAB_00082976;\n    case 0x6c:\n      chFlags = (uint)*(byte *)arg;\n      if (chFlags == 0x6c) {\n        isLeftJustified = true;\n        chFlags = (uint)*(byte *)((int)arg + 1);\n        arg = (int *******)((int)arg + 1);\n      }\n      else {\n        isSignShown = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (isLeftJustified == false) {\n        if (isSignShown == false) {\n          if (isShort) {\n            arg = *pArgs;\n            pArgs = pArgs + 1;\n            *(short *)arg = (short)resultLen;\n          }\n          else {\n            arg = *pArgs;\n            pArgs = pArgs + 1;\n            *arg = resultLen;\n          }\n        }\n        else {\n          arg = *pArgs;\n          pArgs = pArgs + 1;\n          *arg = resultLen;\n        }\n      }\n      else {\n        arg = *pArgs;\n        pArgs = pArgs + 1;\n        *arg = resultLen;\n        arg[1] = resultLen >> 0x1f;\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (isLeftJustified == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      ptrStack2 = (int **)((int)pArgs + 7U & 0xfffffff8);\n      pArgs = ptrStack2 + 2;\n      arg = *ptrStack2;\n      pisNegative = ptrStack2[1];\n      result = 0;\n      break;\n    case 0x70:\n      arg = *pArgs;\n      pArgs = pArgs + 1;\n      hexPrefixChar = 0x78;\n      isZeroPadded = true;\n      pisNegative = (int *)0x0;\n      paddingChar = 0x30;\n      hexDigits = \"0123456789abcdef\";\n      result = 2;\n      break;\n    case 0x71:\n      isLeftJustified = true;\n      chFlags = (uint)*(byte *)arg;\n      goto LAB_00082976;\n    case 0x73:\n      ptrStr = (int ********)*pArgs;\n      argSignChar = '\\0';\n      pArgs = pArgs + 1;\n      if (ptrStr != (int ********)0x0) {\n        if ((int)maxWidth < 0) {\n          maxWidth = (int *******)strlen((char *)ptrStr);\n          ptrIter = (int *******)0x0;\n          signChar = argSignChar;\n        }\n        else {\n          ptr = memchr(ptrStr,0,(size_t)maxWidth);\n          signChar = argSignChar;\n          if (ptr == (void *)0x0) {\n            ptrIter = (int *******)0x0;\n          }\n          else {\n            ptrLeftAlignIter = (int *******)((int)ptr - (int)ptrStr);\n            if ((int)maxWidth <= (int)(int *******)((int)ptr - (int)ptrStr)) {\n              ptrLeftAlignIter = maxWidth;\n            }\n            ptrIter = (int *******)0x0;\n            maxWidth = ptrLeftAlignIter;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((int *******)0x5 < maxWidth) {\n        maxWidth = (int *******)0x6;\n      }\n      maxPrecision = (int *******)((uint)maxWidth & ~((int)maxWidth >> 0x1f));\n      ptrStr = (int ********)&UNK_00085728;\nLAB_00082d76:\n      argSignChar = '\\0';\n      ptrIter = (int *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!isLeftJustified) goto LAB_00082ce0;\nLAB_00082bc6:\n      ptrStack2 = (int **)((int)pArgs + 7U & 0xfffffff8);\n      pArgs = ptrStack2 + 2;\n      arg = *ptrStack2;\n      pisNegative = ptrStack2[1];\n      result = 1;\n      break;\n    case 0x78:\n      hexDigits = \"0123456789abcdef\";\n      if (isLeftJustified != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((isSignShown == false) && (isShort != false)) {\n        pisNegative = (int *)0x0;\n        arg = (int *)(uint)*(ushort *)pArgs;\n        pArgs = pArgs + 1;\n      }\n      else {\n        arg = *pArgs;\n        pArgs = pArgs + 1;\n        pisNegative = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((isAlternateForm) && (((uint)arg | (uint)pisNegative) != 0)) {\n        isZeroPadded = true;\n        paddingChar = 0x30;\n        result = 2;\n        hexPrefixChar = (char)chFlags;\n      }\n      else {\n        result = 2;\n      }\n    }\n    argSignChar = '\\0';\n    signChar = '\\0';\nLAB_00082ace:\n    if (-1 < (int)maxWidth) {\n      flags = flags & 0xffffff7f;\n    }\n    chFlags = (uint)arg | (uint)pisNegative;\njoined_r0x00082adc:\n    longlongVar = CONCAT44(pisNegative,arg);\n    ptrIter = maxWidth;\n    if ((chFlags == 0) && (maxWidth == (int *******)0x0)) {\n      ptrStr = (int ********)ptrStack;\n      if ((result != 0) || (!isAlternateForm)) goto LAB_00082b04;\n      ptrStr = (int ********)(&zeroPaddingChar + 1);\n      zeroPaddingChar = '0';\n      goto LAB_00082afe;\n    }\n    if (result == 1) {\n      if (pisNegative != (int *)0x0 || (int *)0x9 < arg) {\n        pptrIter2 = (int ********)(&zeroPaddingChar + 1);\n        do {\n          ptrStr = pptrIter2;\n          uVar = (undefined4)((ulonglong)longlongVar >> 0x20);\n          ch = '\\n';\n          __aeabi_uldivmod((int)longlongVar,uVar,10,0);\n          *(char *)ptrStr = ch + '0';\n          longlongVar = __aeabi_uldivmod((int)longlongVar,uVar,10,0);\n          pptrIter2 = (int ********)((int)ptrStr + -1);\n        } while (longlongVar != 0);\n        maxWidth = (int *******)((int)ptrStack - (int)ptrStr);\n        goto LAB_00082b04;\n      }\n      zeroPaddingChar = (char)arg + '0';\n      ptrStr = (int ********)(&zeroPaddingChar + 1);\n      goto LAB_00083282;\n    }\n    pptrIter2 = (int ********)(&zeroPaddingChar + 1);\n    if (result != 2) goto LAB_000830e2;\n    do {\n      ptrStr = pptrIter2;\n      chFlags = (uint)arg & 0xf;\n      arg = (int *)((uint)arg >> 4 | (int)pisNegative << 0x1c);\n      pisNegative = (int *)((uint)pisNegative >> 4);\n      *(char *)ptrStr = hexDigits[chFlags];\n      pptrIter2 = (int ********)((int)ptrStr + -1);\n    } while (((uint)arg | (uint)pisNegative) != 0);\n    maxWidth = (int *******)((int)ptrStack - (int)ptrStr);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (pArgList != (int *******)0x0) {\n    ptrStrprint_r_part_0(str,format,&pFormat);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(format + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return resultLen;\nLAB_000830e2:\n  do {\n    ptrStr = pptrIter2;\n    width = (int *)((uint)arg >> 3 | (int)pisNegative << 0x1d);\n    pisNegative = (int *)((uint)pisNegative >> 3);\n    result = ((uint)arg & 7) + 0x30;\n    *(char *)ptrStr = (char)result;\n    pptrIter2 = (int ********)((int)ptrStr + -1);\n    arg = width;\n  } while (((uint)width | (uint)pisNegative) != 0);\n  if (isAlternateForm) {\n    if (result == 0x30) {\nLAB_00082afe:\n      maxWidth = (int *******)((int)ptrStack - (int)ptrStr);\n    }\n    else {\n      *(undefined *)((int)ptrStr + -1) = 0x30;\n      ptrStr = pptrIter2;\n      maxWidth = (int *******)((int)ptrStack - (int)pptrIter2);\n    }\n  }\n  else {\nLAB_00083282:\n    maxWidth = (int *******)((int)ptrStack - (int)ptrStr);\n  }\nLAB_00082b04:\n  maxPrecision = maxWidth;\n  if ((int)maxWidth < (int)ptrIter) {\n    maxPrecision = ptrIter;\n  }\n  if (signChar != '\\0') {\n    maxPrecision = (int *******)((int)maxPrecision + 1);\n  }\nLAB_00082b1e:\n  if (isZeroPadded) {\n    maxPrecision = (int *******)((int)maxPrecision + 2);\n  }\n  if ((flags == 0) &&\n     (ptrLeftAlignIter = (int *******)((int)pppppppiVar21 - (int)maxPrecision), 0 < (int)ptrLeftAlignIter)) {\n    if ((int)ptrLeftAlignIter < 0x11) {\n      argCount = argCount + 1;\n    }\n    else {\n      do {\n        ptrZeroPadIter = ptrLeftAlignIter;\n        result = argCount + 1;\n        pArgList = pArgList + 4;\n        *ptrStack = (int *******)0x856f0;\n        ptrStack[1] = (int *******)0x10;\n        if (result < 8) {\n          iter = argCount + 2;\n          ptrStack = ptrStack + 2;\n          argCount = result;\n        }\n        else if (pArgList == (int *******)0x0) {\n          iter = 1;\n          ptrStack = (int ********)ptrStack;\n          argCount = 0;\n        }\n        else {\n          argCount = result;\n          result = ptrStrprint_r_part_0(str,format,&pFormat);\n          if (result != 0) goto LAB_00083142;\n          iter = argCount + 1;\n          ptrStack = (int ********)ptrStack;\n        }\n        ptrLeftAlignIter = ptrZeroPadIter + -4;\n      } while (0x10 < (int)ptrLeftAlignIter);\n      ptrLeftAlignIter = ptrZeroPadIter + -4;\n      argCount = iter;\n    }\n    pArgList = (int *******)((int)pArgList + (int)ptrLeftAlignIter);\n    *ptrStack = (int *******)0x856f0;\n    ptrStack[1] = ptrLeftAlignIter;\n    if (argCount < 8) {\n      result = argCount + 1;\n      ptrStack = ptrStack + 2;\n    }\n    else if (pArgList == (int *******)0x0) {\n      result = 1;\n      argCount = 0;\n      ptrStack = (int ********)ptrStack;\n    }\n    else {\n      result = ptrStrprint_r_part_0(str,format,&pFormat);\n      if (result != 0) goto LAB_00083142;\n      result = argCount + 1;\n      ptrStack = (int ********)ptrStack;\n    }\n  }\n  else {\n    result = argCount + 1;\n  }\n  iter = result;\n  if (argSignChar != '\\0') {\n    pArgList = (int *******)((int)pArgList + 1);\n    iter = 1;\n    *ptrStack = (int *******)&argSignChar;\n    ptrStack[1] = (int *******)0x1;\n    argCount = result;\n    if (result < 8) {\n      iter = result + 1;\n      ptrStack = ptrStack + 2;\n    }\n    else if (pArgList == (int *******)0x0) {\n      argCount = 0;\n      ptrStack = (int ********)ptrStack;\n    }\n    else {\n      result = ptrStrprint_r_part_0(str,format,&pFormat);\n      if (result != 0) goto LAB_00083142;\n      iter = argCount + 1;\n      ptrStack = (int ********)ptrStack;\n    }\n  }\n  result = iter;\n  iter2 = argCount;\n  if (isZeroPadded) {\n    pArgList = (int *******)((int)pArgList + 2);\n    *ptrStack = (int *******)&paddingChar;\n    ptrStack[1] = (int *******)0x2;\n    if (iter < 8) {\n      result = iter + 1;\n      iter2 = iter;\n      ptrStack = ptrStack + 2;\n    }\n    else if (pArgList == (int *******)0x0) {\n      result = 1;\n      iter2 = 0;\n      ptrStack = (int ********)ptrStack;\n    }\n    else {\n      argCount = iter;\n      result = ptrStrprint_r_part_0(str,format,&pFormat);\n      if (result != 0) goto LAB_00083142;\n      result = argCount + 1;\n      iter2 = argCount;\n      ptrStack = (int ********)ptrStack;\n    }\n  }\n  argCount = iter2;\n  if ((flags == 0x80) &&\n     (ptrLeftAlignIter = (int *******)((int)pppppppiVar21 - (int)maxPrecision), 0 < (int)ptrLeftAlignIter)) {\n    if (0x10 < (int)ptrLeftAlignIter) {\n      do {\n        while( true ) {\n          ptrZeroPadIter = ptrLeftAlignIter;\n          argCount = iter2 + 1;\n          pArgList = pArgList + 4;\n          *ptrStack = (int *******)\"0000000000000000\";\n          ptrStack[1] = (int *******)0x10;\n          if (7 < argCount) break;\n          result = iter2 + 2;\n          ptrStack = ptrStack + 2;\nLAB_000831f2:\n          iter2 = argCount;\n          ptrLeftAlignIter = ptrZeroPadIter + -4;\n          if ((int)(ptrZeroPadIter + -4) < 0x11) goto LAB_00083218;\n        }\n        if (pArgList != (int *******)0x0) {\n          result = ptrStrprint_r_part_0(str,format,&pFormat);\n          if (result == 0) {\n            result = argCount + 1;\n            ptrStack = (int ********)ptrStack;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        result = 1;\n        iter2 = 0;\n        ptrLeftAlignIter = ptrZeroPadIter + -4;\n        ptrStack = (int ********)ptrStack;\n      } while (0x10 < (int)(ptrZeroPadIter + -4));\nLAB_00083218:\n      ptrLeftAlignIter = ptrZeroPadIter + -4;\n    }\n    pArgList = (int *******)((int)pArgList + (int)ptrLeftAlignIter);\n    *ptrStack = (int *******)\"0000000000000000\";\n    ptrStack[1] = ptrLeftAlignIter;\n    argCount = result;\n    if (result < 8) {\n      result = result + 1;\n      ptrStack = ptrStack + 2;\n    }\n    else if (pArgList == (int *******)0x0) {\n      result = 1;\n      argCount = 0;\n      ptrStack = (int ********)ptrStack;\n    }\n    else {\n      result = ptrStrprint_r_part_0(str,format,&pFormat);\n      if (result != 0) goto LAB_00083142;\n      result = argCount + 1;\n      ptrStack = (int ********)ptrStack;\n    }\n  }\n  ptrIter = (int *******)((int)ptrIter - (int)maxWidth);\n  pptrIter2 = (int ********)ptrStack;\n  if ((int)ptrIter < 1) {\nLAB_0008302a:\n    pArgList = (int *******)((int)pArgList + (int)maxWidth);\n    *ptrStack = (int *******)ptrStr;\n    ptrStack[1] = maxWidth;\n    maxWidth = pArgList;\n    argCount = result;\n    if (result < 8) goto LAB_000831be;\n    if (pArgList == (int *******)0x0) {\n      argCount = 0;\n    }\n    else {\n      result = ptrStrprint_r_part_0(str,format,&pFormat);\n      if (result != 0) goto LAB_00083142;\n    }\n  }\n  else {\n    iter = argCount;\n    if (0x10 < (int)ptrIter) {\n      do {\n        while( true ) {\n          ptrLeftAlignIter = ptrIter;\n          argCount = iter + 1;\n          pArgList = pArgList + 4;\n          *ptrStack = (int *******)\"0000000000000000\";\n          ptrStack[1] = (int *******)0x10;\n          if (7 < argCount) break;\n          result = iter + 2;\n          ptrStack = ptrStack + 2;\nLAB_00082fe6:\n          iter = argCount;\n          ptrIter = ptrLeftAlignIter + -4;\n          if ((int)(ptrLeftAlignIter + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (pArgList != (int *******)0x0) {\n          result = ptrStrprint_r_part_0(str,format,&pFormat);\n          if (result == 0) {\n            result = argCount + 1;\n            ptrStack = (int ********)ptrStack;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        result = 1;\n        ptrStack = (int ********)ptrStack;\n        iter = 0;\n        ptrIter = ptrLeftAlignIter + -4;\n      } while (0x10 < (int)(ptrLeftAlignIter + -4));\nLAB_0008300e:\n      ptrIter = ptrLeftAlignIter + -4;\n    }\n    pArgList = (int *******)((int)pArgList + (int)ptrIter);\n    *ptrStack = (int *******)\"0000000000000000\";\n    ptrStack[1] = ptrIter;\n    if (result < 8) {\n      result = result + 1;\n      ptrStack = ptrStack + 2;\n      goto LAB_0008302a;\n    }\n    if (pArgList != (int *******)0x0) {\n      argCount = result;\n      result = ptrStrprint_r_part_0(str,format,&pFormat);\n      if (result != 0) goto LAB_00083142;\n      result = argCount + 1;\n      ptrStack = (int ********)ptrStack;\n      goto LAB_0008302a;\n    }\n    ptrStackArray[0] = maxWidth;\n    argCount = 1;\n    ptrStack = (int ********)ptrStack;\n    ptrStack = (undefined  [4])ptrStr;\nLAB_000831be:\n    pptrIter2 = ptrStack + 2;\n    pArgList = maxWidth;\n  }\n  if (((flags & 4) != 0) &&\n     (ptrIter = (int *******)((int)pppppppiVar21 - (int)maxPrecision), 0 < (int)ptrIter)) {\n    result = argCount;\n    if ((int)ptrIter < 0x11) {\n      iter = argCount + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          argCount = result + 1;\n          pArgList = pArgList + 4;\n          *pptrIter2 = (int *******)0x856f0;\n          pptrIter2[1] = (int *******)0x10;\n          if (7 < argCount) break;\n          iter = result + 2;\n          pptrIter2 = pptrIter2 + 2;\nLAB_0008307a:\n          ptrIter = ptrIter + -4;\n          result = argCount;\n          if ((int)ptrIter < 0x11) goto LAB_000830a2;\n        }\n        if (pArgList != (int *******)0x0) {\n          result = ptrStrprint_r_part_0(str,format,&pFormat);\n          if (result == 0) {\n            iter = argCount + 1;\n            pptrIter2 = (int ********)ptrStack;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        ptrIter = ptrIter + -4;\n        iter = 1;\n        result = 0;\n        pptrIter2 = (int ********)ptrStack;\n      } while (0x10 < (int)ptrIter);\n    }\nLAB_000830a2:\n    pArgList = (int *******)((int)pArgList + (int)ptrIter);\n    *pptrIter2 = (int *******)0x856f0;\n    pptrIter2[1] = ptrIter;\n    argCount = iter;\n    if (7 < iter) {\n      if (pArgList == (int *******)0x0) {\n        if ((int)maxPrecision < (int)pppppppiVar21) {\n          maxPrecision = pppppppiVar21;\n        }\n        resultLen = resultLen + (int)maxPrecision;\n        goto LAB_00083186;\n      }\n      result = ptrStrprint_r_part_0(str,format,&pFormat);\n      if (result != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)maxPrecision < (int)pppppppiVar21) {\n    maxPrecision = pppppppiVar21;\n  }\n  resultLen = resultLen + (int)maxPrecision;\n  if ((pArgList != (int *******)0x0) &&\n     (result = ptrStrprint_r_part_0(str,format,&pFormat), result != 0)) goto LAB_00083142;\nLAB_00083186:\n  argCount = 0;\n  ptrStack = (int ********)ptrStack;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  chIter = chFlags - 0x30;\n  pppppppiVar21 = (int *******)0x0;\n  ptrIter = arg;\n  do {\n    arg = (int *******)((int)ptrIter + 1);\n    chFlags = (uint)*(byte *)ptrIter;\n    pppppppiVar21 = (int *******)(chIter + (int)pppppppiVar21 * 10);\n    chIter = chFlags - 0x30;\n    ptrIter = arg;\n  } while (chIter < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  chFlags = (uint)*(byte *)arg;\n  if (argSignChar == '\\0') {\n    argSignChar = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "renaming": {
                "FUN_0008289c": "format_string_0008289c",
                "param_1": "str",
                "param_2": "format",
                "param_3": "arg",
                "param_4": "args",
                "bVar1": "isLeftJustified",
                "bVar2": "isSignShown",
                "bVar3": "isAlternateForm",
                "cVar4": "signChar",
                "bVar5": "isZeroPadded",
                "pvVar6": "ptr",
                "ppppppppiVar7": "ptrStack",
                "piVar8": "width",
                "iVar9": "result",
                "cVar10": "ch",
                "pppppppiVar11": "ptrIter",
                "uVar12": "chIter",
                "uVar14": "flags",
                "uVar15": "chFlags",
                "iVar16": "iter",
                "pppppppiVar17": "ptrIter2",
                "iVar18": "iter2",
                "pppppppiVar19": "ptrLeftAlignIter",
                "piVar20": "arg",
                "iVar23": "isNegative",
                "uVar22": "uVar",
                "ppiVar13": "ptrStack2",
                "pppppppiVar24": "ptrZeroPadIter",
                "uVar25": "uVar",
                "__s": "ptrStr",
                "bVar26": "isShort",
                "lVar27": "longlongVar",
                "local_dc": "maxPrecision",
                "local_d4": "maxWidth",
                "local_c8": "pArgs",
                "local_c4": "resultLen",
                "local_c0": "hexDigits",
                "local_a1": "argSignChar",
                "local_a0": "paddingChar",
                "local_9f": "hexPrefixChar",
                "local_9c": "pFormat",
                "local_98": "argCount",
                "local_94": "pArgList",
                "local_90": "nullChar",
                "cStack_6a": "zeroPaddingChar",
                "local_69": "zeroPaddingChar",
                "local_68": "ptrStack",
                "local_64": "ptrStackArray"
            },
            "calling": [
                "__sbprintf",
                "iprintf",
                "fiprintf"
            ],
            "called": [
                "__sprint_r.part.0",
                "memchr",
                "__sbprintf",
                "__sinit",
                "__swsetup_r",
                "strlen",
                "__aeabi_uldivmod"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000834f0": {
            "entrypoint": "0x000834f0",
            "current_name": "print_formatted_data_000834f0",
            "code": "\nint printFormattedData_000834f0(undefined4 outputStream,int dataAddress)\n\n{\n  int printResult;\n  int flushResult;\n  undefined *bufferArray [2];\n  undefined4 bufferSize;\n  ushort modifiedValue;\n  undefined2 dataValue;\n  undefined *bufferPointer;\n  undefined4 bufferSizeCopy;\n  undefined4 unusedValue;\n  undefined4 dataSizeCopy;\n  undefined4 dataAddressCopy;\n  undefined4 offsetValue;\n  undefined buffer [1024];\n  \n  offsetValue = *(undefined4 *)(dataAddress + 100);\n  dataSizeCopy = *(undefined4 *)(dataAddress + 0x1c);\n  dataValue = *(undefined2 *)(dataAddress + 0xe);\n  dataAddressCopy = *(undefined4 *)(dataAddress + 0x24);\n  bufferArray[0] = buffer;\n  modifiedValue = *(ushort *)(dataAddress + 0xc) & 0xfffd;\n  bufferSize = 0x400;\n  bufferSizeCopy = 0x400;\n  unusedValue = 0;\n  bufferPointer = bufferArray[0];\n  printResult = _vfiprintf_r(outputStream,bufferArray);\n  if ((-1 < printResult) && (flushResult = _fflush_r(outputStream,bufferArray), flushResult != 0)) {\n    printResult = -1;\n  }\n  if ((int)((uint)modifiedValue << 0x19) < 0) {\n    *(ushort *)(dataAddress + 0xc) = *(ushort *)(dataAddress + 0xc) | 0x40;\n  }\n  return printResult;\n}\n\n",
            "renaming": {
                "FUN_000834f0": "print_formatted_data_000834f0",
                "param_1": "outputStream",
                "param_2": "dataAddress",
                "iVar1": "printResult",
                "iVar2": "flushResult",
                "local_488": "bufferArray",
                "local_480": "bufferSize",
                "local_47c": "modifiedValue",
                "local_47a": "dataValue",
                "local_478": "bufferPointer",
                "local_474": "bufferSizeCopy",
                "local_470": "unusedValue",
                "local_46c": "dataSizeCopy",
                "local_464": "dataAddressCopy",
                "local_424": "offsetValue",
                "auStack_420": "buffer"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "_vfiprintf_r",
                "_fflush_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008356c": {
            "entrypoint": "0x0008356c",
            "current_name": "initialize_buffer_0008356c",
            "code": "\nundefined4 initializeBuffer_0008356c(undefined4 *outputBuffer,int *inputParams)\n\n{\n  int value1;\n  int value2;\n  uint temp1;\n  ushort temp2;\n  \n  if ((_impure_ptr != 0) && (*(int *)(_impure_ptr + 0x38) == 0)) {\n    __sinit();\n  }\n  temp2 = *(ushort *)(inputParams + 3);\n  temp1 = (uint)temp2;\n  if ((int)(temp1 << 0x1c) < 0) {\n    value2 = inputParams[4];\n  }\n  else {\n    if (-1 < (int)(temp1 << 0x1b)) {\n      *outputBuffer = 9;\n      *(ushort *)(inputParams + 3) = temp2 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(temp1 << 0x1d) < 0) {\n      if ((int *)inputParams[0xc] != (int *)0x0) {\n        if ((int *)inputParams[0xc] != inputParams + 0x10) {\n          _free_r(outputBuffer);\n          temp2 = *(ushort *)(inputParams + 3);\n        }\n        inputParams[0xc] = 0;\n      }\n      value2 = inputParams[4];\n      temp2 = temp2 & 0xffdb;\n      *inputParams = value2;\n      inputParams[1] = 0;\n    }\n    else {\n      value2 = inputParams[4];\n    }\n    *(ushort *)(inputParams + 3) = temp2 | 8;\n    temp1 = (uint)(temp2 | 8);\n  }\n  if ((value2 == 0) && ((temp1 & 0x280) != 0x200)) {\n    __smakebuf_r(outputBuffer,inputParams);\n    temp1 = (uint)*(ushort *)(inputParams + 3);\n    value2 = inputParams[4];\n  }\n  if ((temp1 & 1) == 0) {\n    value1 = 0;\n    if (-1 < (int)(temp1 << 0x1e)) {\n      value1 = inputParams[5];\n    }\n    inputParams[2] = value1;\n  }\n  else {\n    inputParams[6] = -inputParams[5];\n    inputParams[2] = 0;\n  }\n  if ((value2 == 0) && ((int)((uint)*(ushort *)(inputParams + 3) << 0x18) < 0)) {\n    *(ushort *)(inputParams + 3) = *(ushort *)(inputParams + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0008356c": "initialize_buffer_0008356c",
                "param_1": "outputBuffer",
                "param_2": "inputParams",
                "iVar1": "value1",
                "iVar2": "value2",
                "uVar3": "temp1",
                "uVar4": "temp2"
            },
            "calling": [
                "_vfiprintf_r",
                "__sfvwrite_r",
                "__swbuf_r"
            ],
            "called": [
                "__smakebuf_r",
                "__sinit",
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083630": {
            "entrypoint": "0x00083630",
            "current_name": "update_data_00083630",
            "code": "\nundefined4 updateData_00083630(int flag,undefined4 data,undefined4 value1,undefined4 value2)\n\n{\n  undefined4 *dataPtr;\n  uint index;\n  uint bitMask;\n  \n  if (DAT_20070180 == (undefined4 *)0x0) {\n    DAT_20070180 = (undefined4 *)&DAT_20070184;\n  }\n  index = DAT_20070180[1];\n  dataPtr = DAT_20070180;\n  if (0x1f < (int)index) {\n    dataPtr = (undefined4 *)malloc(400);\n    if (dataPtr == (undefined4 *)0x0) {\n      return 0xffffffff;\n    }\n    *dataPtr = DAT_20070180;\n    dataPtr[1] = 0;\n    index = 0;\n    DAT_20070180 = dataPtr;\n    dataPtr[0x62] = 0;\n    dataPtr[99] = 0;\n  }\n  if (flag != 0) {\n    bitMask = 1 << (index & 0xff);\n    dataPtr[index + 0x22] = value1;\n    dataPtr[0x62] = dataPtr[0x62] | bitMask;\n    dataPtr[index + 0x42] = value2;\n    if (flag == 2) {\n      dataPtr[99] = bitMask | dataPtr[99];\n    }\n  }\n  dataPtr[1] = index + 1;\n  dataPtr[index + 2] = data;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083630": "update_data_00083630",
                "param_1": "flag",
                "param_2": "data",
                "param_3": "value1",
                "param_4": "value2",
                "puVar1": "dataPtr",
                "uVar2": "index",
                "uVar3": "bitMask"
            },
            "calling": [
                "atexit",
                "__cxa_atexit"
            ],
            "called": [
                "malloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000836d8": {
            "entrypoint": "0x000836d8",
            "current_name": "FUNC_000836d8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000836dc) */\n\nvoid FUNC_000836d8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836d8": "FUNC_000836d8"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "atexit"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000836ec": {
            "entrypoint": "0x000836ec",
            "current_name": "terminate_program_000836ec",
            "code": "\n\n\nvoid terminate_program_000836ec(void)\n\n{\n  raise(6);\n                    \n  _exit(1);\n}\n\n",
            "renaming": {
                "FUN_000836ec": "terminate_program_000836ec"
            },
            "calling": [
                "__assert_func"
            ],
            "called": [
                "_exit",
                "raise"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000836fc": {
            "entrypoint": "0x000836fc",
            "current_name": "register_exit_proc_000836fc",
            "code": "\nint registerExitProc_000836fc(function *function)\n\n{\n  int result;\n  \n  result = __register_exitproc(0,function,0,0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000836fc": "register_exit_proc_000836fc",
                "__func": "function",
                "iVar1": "result"
            },
            "calling": [
                "register_fini"
            ],
            "called": [
                "__register_exitproc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083708": {
            "entrypoint": "0x00083708",
            "current_name": "decode_and_process_data_00083708",
            "code": "\nundefined4 decodeAndProcessData_00083708(int *inputArray,int *outputArray)\n\n{\n  int *tempVar1;\n  int tempVar2;\n  ushort flags;\n  uint otherFlags;\n  int tempVar3;\n  code *functionPointer;\n  int tempVar4;\n  \n  flags = *(ushort *)(outputArray + 3);\n  if ((int)((uint)flags << 0x1c) < 0) {\n    tempVar4 = outputArray[4];\n    if (tempVar4 == 0) {\n      return 0;\n    }\n    tempVar2 = *outputArray;\n    if ((flags & 3) == 0) {\n      tempVar3 = outputArray[5];\n    }\n    else {\n      tempVar3 = 0;\n    }\n    *outputArray = tempVar4;\n    tempVar2 = tempVar2 - tempVar4;\n    outputArray[2] = tempVar3;\n    do {\n      if (tempVar2 < 1) {\n        return 0;\n      }\n      tempVar3 = (*(code *)outputArray[9])(inputArray,outputArray[7],tempVar4,tempVar2);\n      tempVar2 = tempVar2 - tempVar3;\n      tempVar4 = tempVar4 + tempVar3;\n    } while (0 < tempVar3);\nLAB_000837c8:\n    *(ushort *)(outputArray + 3) = *(ushort *)(outputArray + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(outputArray + 3) = flags | 0x800;\n  if ((outputArray[1] < 1) && (outputArray[0xf] < 1)) {\n    return 0;\n  }\n  functionPointer = (code *)outputArray[10];\n  if (functionPointer == (code *)0x0) {\n    return 0;\n  }\n  otherFlags = (uint)(flags | 0x800);\n  tempVar4 = *inputArray;\n  *inputArray = 0;\n  if ((flags & 0x1000) == 0) {\n    tempVar2 = (*functionPointer)(inputArray,outputArray[7],otherFlags & 0x1000,1);\n    if ((tempVar2 == -1) && (tempVar3 = *inputArray, tempVar3 != 0)) {\n      if ((tempVar3 == 0x1d) || (tempVar3 == 0x16)) {\n        *inputArray = tempVar4;\n        return 0;\n      }\n      goto LAB_000837c8;\n    }\n    otherFlags = (uint)*(ushort *)(outputArray + 3);\n    functionPointer = (code *)outputArray[10];\n  }\n  else {\n    tempVar2 = outputArray[0x14];\n  }\n  if (((int)(otherFlags << 0x1d) < 0) && (tempVar2 = tempVar2 - outputArray[1], outputArray[0xc] != 0)) {\n    tempVar2 = tempVar2 - outputArray[0xf];\n  }\n  tempVar2 = (*functionPointer)(inputArray,outputArray[7],tempVar2,0);\n  if (tempVar2 == -1) {\n    tempVar3 = *inputArray;\n    if (tempVar3 != 0) {\n      if ((tempVar3 != 0x1d) && (tempVar3 != 0x16)) {\n        *(ushort *)(outputArray + 3) = *(ushort *)(outputArray + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(outputArray + 3) = *(ushort *)(outputArray + 3) & 0xf7ff;\n      *outputArray = outputArray[4];\n      outputArray[1] = 0;\n      goto LAB_00083774;\n    }\n    flags = *(ushort *)(outputArray + 3) & 0xf7ff;\n    outputArray[1] = 0;\n    *(ushort *)(outputArray + 3) = flags;\n    *outputArray = outputArray[4];\n  }\n  else {\n    flags = *(ushort *)(outputArray + 3) & 0xf7ff;\n    *outputArray = outputArray[4];\n    *(ushort *)(outputArray + 3) = flags;\n    outputArray[1] = 0;\n  }\n  if ((int)((uint)flags << 0x13) < 0) {\n    outputArray[0x14] = tempVar2;\n  }\nLAB_00083774:\n  tempVar1 = (int *)outputArray[0xc];\n  *inputArray = tempVar4;\n  if (tempVar1 == (int *)0x0) {\n    return 0;\n  }\n  if (tempVar1 != outputArray + 0x10) {\n    _free_r(inputArray);\n  }\n  outputArray[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083708": "decode_and_process_data_00083708",
                "param_1": "inputArray",
                "param_2": "outputArray",
                "piVar1": "tempVar1",
                "iVar2": "tempVar2",
                "uVar3": "flags",
                "uVar4": "otherFlags",
                "iVar5": "tempVar3",
                "pcVar6": "functionPointer",
                "iVar7": "tempVar4"
            },
            "calling": [
                "_fflush_r"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083850": {
            "entrypoint": "0x00083850",
            "current_name": "initialize_stream_00083850",
            "code": "\nvoid initializeStream_00083850(int stream,int buffer)\n\n{\n  if ((stream != 0) && (*(int *)(stream + 0x38) == 0)) {\n    initializeBuffer();\n  }\n  if (*(short *)(buffer + 0xc) == 0) {\n    return;\n  }\n  flushStream(stream);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083850": "initialize_stream_00083850",
                "param_1": "stream",
                "param_2": "buffer",
                "__sinit": "initializeBuffer",
                "__sflush_r": "flushStream"
            },
            "calling": [
                "__sbprintf",
                "__sfvwrite_r",
                "__swbuf_r",
                "_fclose_r"
            ],
            "called": [
                "__sflush_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008387c": {
            "entrypoint": "0x0008387c",
            "current_name": "walk_directories_0008387c",
            "code": "\nvoid walkDirectories_0008387c(undefined4 directoryPath)\n\n{\n  fileWalker(directoryPath,0x84485);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008387c": "walk_directories_0008387c",
                "param_1": "directoryPath",
                "_fwalk": "fileWalker"
            },
            "calling": [],
            "called": [
                "_fwalk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083888": {
            "entrypoint": "0x00083888",
            "current_name": "initialize_data_structures_00083888",
            "code": "\nvoid initializeDataStructures_00083888(int dataStruct)\n\n{\n  undefined4 *ptrStruct1;\n  undefined4 *ptrStruct2;\n  \n  if (*(int *)(dataStruct + 0x38) == 0) {\n    ptrStruct1 = *(undefined4 **)(dataStruct + 4);\n    *(undefined4 *)(dataStruct + 0x3c) = 0x8387d;\n    *(undefined4 *)(dataStruct + 0x2e4) = 3;\n    *(int *)(dataStruct + 0x2e8) = dataStruct + 0x2ec;\n    *(undefined4 *)(dataStruct + 0x2e0) = 0;\n    *(undefined2 *)(ptrStruct1 + 3) = 4;\n    *ptrStruct1 = 0;\n    ptrStruct1[1] = 0;\n    ptrStruct1[2] = 0;\n    ptrStruct1[0x19] = 0;\n    *(undefined2 *)((int)ptrStruct1 + 0xe) = 0;\n    ptrStruct1[4] = 0;\n    ptrStruct1[5] = 0;\n    ptrStruct1[6] = 0;\n    memset(ptrStruct1 + 0x17,0,8);\n    ptrStruct2 = *(undefined4 **)(dataStruct + 8);\n    ptrStruct1[7] = ptrStruct1;\n    ptrStruct1[8] = 0x84221;\n    ptrStruct1[9] = 0x84245;\n    ptrStruct1[10] = 0x8427d;\n    ptrStruct1[0xb] = 0x8429d;\n    *(undefined2 *)((int)ptrStruct2 + 0xe) = 1;\n    *(undefined2 *)(ptrStruct2 + 3) = 9;\n    *ptrStruct2 = 0;\n    ptrStruct2[1] = 0;\n    ptrStruct2[2] = 0;\n    ptrStruct2[0x19] = 0;\n    ptrStruct2[4] = 0;\n    ptrStruct2[5] = 0;\n    ptrStruct2[6] = 0;\n    memset(ptrStruct2 + 0x17,0,8);\n    ptrStruct1 = *(undefined4 **)(dataStruct + 0xc);\n    ptrStruct2[7] = ptrStruct2;\n    ptrStruct2[8] = 0x84221;\n    ptrStruct2[9] = 0x84245;\n    ptrStruct2[10] = 0x8427d;\n    ptrStruct2[0xb] = 0x8429d;\n    *(undefined2 *)(ptrStruct1 + 3) = 0x12;\n    *(undefined2 *)((int)ptrStruct1 + 0xe) = 2;\n    *ptrStruct1 = 0;\n    ptrStruct1[1] = 0;\n    ptrStruct1[2] = 0;\n    ptrStruct1[0x19] = 0;\n    ptrStruct1[4] = 0;\n    ptrStruct1[5] = 0;\n    ptrStruct1[6] = 0;\n    memset(ptrStruct1 + 0x17,0,8);\n    ptrStruct1[7] = ptrStruct1;\n    ptrStruct1[8] = 0x84221;\n    ptrStruct1[9] = 0x84245;\n    ptrStruct1[10] = 0x8427d;\n    ptrStruct1[0xb] = 0x8429d;\n    *(undefined4 *)(dataStruct + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083888": "initialize_data_structures_00083888",
                "param_1": "dataStruct",
                "puVar1": "ptrStruct1",
                "puVar2": "ptrStruct2"
            },
            "calling": [
                "_vfiprintf_r",
                "__swsetup_r",
                "_fflush_r",
                "__swbuf_r",
                "_fclose_r"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008397c": {
            "entrypoint": "0x0008397c",
            "current_name": "FUNC_0008397c",
            "code": "\nvoid FUNC_0008397c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008397c": "FUNC_0008397c"
            },
            "calling": [
                "_fclose_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083980": {
            "entrypoint": "0x00083980",
            "current_name": "FUNC_00083980",
            "code": "\nvoid FUNC_00083980(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083980": "FUNC_00083980"
            },
            "calling": [
                "_fclose_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083984": {
            "entrypoint": "0x00083984",
            "current_name": "execute_fini_functions_00083984",
            "code": "\nvoid execute_fini_functions_00083984(void)\n\n{\n  int counter;\n  code **function_pointer;\n  \n  counter = 1;\n  function_pointer = (code **)&fini_functions_end;\n  do {\n    counter = counter + -1;\n    function_pointer = function_pointer + -1;\n    (**function_pointer)();\n  } while (counter != 0);\n  _fini();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083984": "execute_fini_functions_00083984",
                "iVar1": "counter",
                "ppcVar2": "function_pointer",
                "__fini_array_end": "fini_functions_end"
            },
            "calling": [],
            "called": [
                "__do_global_dtors_aux",
                "_fini"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000839b4": {
            "entrypoint": "0x000839b4",
            "current_name": "translate_and_print_000839b4",
            "code": "\nuint translateAndPrint_000839b4(undefined4 param1,uint param2,byte **param3)\n\n{\n  int mbMax;\n  uint result;\n  uint convertedChar;\n  byte *bufferPtr;\n  uint counter;\n  byte charToConvert;\n  byte stackArray [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(param3 + 3) << 0x12)) {\n    *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x2000;\n    param3[0x19] = (byte *)((uint)param3[0x19] | 0x2000);\n  }\n  mbMax = __locale_mb_cur_max();\n  if ((mbMax == 1) && (param2 - 1 < 0xff)) {\n    convertedChar = param2 & 0xff;\n    charToConvert = (byte)convertedChar;\n    result = 1;\n  }\n  else {\n    result = _wcrtomb_r(param1,&charToConvert,param2,param3 + 0x17);\n    if (result == 0xffffffff) {\n      *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (result == 0) {\n      return param2;\n    }\n    convertedChar = (uint)charToConvert;\n  }\n  counter = 0;\n  do {\n    bufferPtr = param3[2] + -1;\n    param3[2] = bufferPtr;\n    if ((int)bufferPtr < 0) {\n      if ((int)param3[6] <= (int)bufferPtr) {\n        **param3 = (byte)convertedChar;\n        bufferPtr = *param3;\n        convertedChar = (uint)*bufferPtr;\n        if (convertedChar != 10) goto LAB_00083a04;\n      }\n      mbMax = __swbuf_r(param1,convertedChar,param3);\n      if (mbMax == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **param3 = (byte)convertedChar;\n      bufferPtr = *param3;\nLAB_00083a04:\n      *param3 = bufferPtr + 1;\n    }\n    if (result <= counter + 1) {\n      return param2;\n    }\n    convertedChar = (uint)stackArray[counter];\n    counter = counter + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000839b4": "translate_and_print_000839b4",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "mbMax",
                "uVar2": "result",
                "uVar3": "convertedChar",
                "pbVar4": "bufferPtr",
                "uVar5": "counter",
                "local_1c": "charToConvert",
                "abStack_1b": "stackArray"
            },
            "calling": [
                "__sprint_r.part.0"
            ],
            "called": [
                "_wcrtomb_r",
                "__locale_mb_cur_max",
                "__swbuf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083a74": {
            "entrypoint": "0x00083a74",
            "current_name": "allocate_memory_00083a74",
            "code": "\nundefined4 allocate_memory_00083a74(undefined4 lock_status,int requested_size)\n\n{\n  int sbrk_result;\n  uint heap_start;\n  int size_to_allocate;\n  \n  __malloc_lock();\n  heap_start = *(uint *)(DAT_2007046c + 4) & 0xfffffffc;\n  size_to_allocate = ((heap_start - requested_size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < size_to_allocate) {\n    sbrk_result = _sbrk_r(lock_status,0);\n    if (sbrk_result == DAT_2007046c + heap_start) {\n      sbrk_result = _sbrk_r(lock_status,-size_to_allocate);\n      if (sbrk_result != -1) {\n        __malloc_current_mallinfo = __malloc_current_mallinfo - size_to_allocate;\n        *(uint *)(DAT_2007046c + 4) = heap_start - size_to_allocate | 1;\n        __malloc_unlock(lock_status);\n        return 1;\n      }\n      size_to_allocate = _sbrk_r(lock_status,0);\n      if (0xf < size_to_allocate - DAT_2007046c) {\n        __malloc_current_mallinfo = size_to_allocate - __malloc_sbrk_base;\n        *(uint *)(DAT_2007046c + 4) = size_to_allocate - DAT_2007046c | 1;\n      }\n    }\n  }\n  __malloc_unlock(lock_status);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083a74": "allocate_memory_00083a74",
                "param_1": "lock_status",
                "param_2": "requested_size",
                "iVar1": "sbrk_result",
                "uVar2": "heap_start",
                "iVar3": "size_to_allocate"
            },
            "calling": [
                "_free_r"
            ],
            "called": [
                "__malloc_unlock",
                "_sbrk_r",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b10": {
            "entrypoint": "0x00083b10",
            "current_name": "defragment_memory_00083b10",
            "code": "\nvoid defragmentMemory_00083b10(undefined4 param1,int param2)\n\n{\n  undefined4 *ptr1;\n  bool isSpecialCase;\n  uint size;\n  int tempVar1;\n  int tempVar2;\n  undefined1 *ptr2;\n  uint tempVar3;\n  undefined1 *ptr3;\n  int tempVar4;\n  uint tempVar5;\n  \n  if (param2 == 0) {\n    return;\n  }\n  lockMalloc();\n  size = *(uint *)(param2 + -4);\n  tempVar4 = param2 + -8;\n  tempVar3 = size & 0xfffffffe;\n  tempVar2 = tempVar4 + tempVar3;\n  tempVar5 = *(uint *)(tempVar2 + 4) & 0xfffffffc;\n  if (DAT_2007046c == tempVar2) {\n    tempVar5 = tempVar5 + tempVar3;\n    if (-1 < (int)(size << 0x1f)) {\n      tempVar4 = tempVar4 - *(int *)(param2 + -8);\n      tempVar1 = *(int *)(tempVar4 + 0xc);\n      tempVar2 = *(int *)(tempVar4 + 8);\n      tempVar5 = tempVar5 + *(int *)(param2 + -8);\n      *(int *)(tempVar2 + 0xc) = tempVar1;\n      *(int *)(tempVar1 + 8) = tempVar2;\n    }\n    size = trimThreshold;\n    *(uint *)(tempVar4 + 4) = tempVar5 | 1;\n    DAT_2007046c = tempVar4;\n    if (size <= tempVar5) {\n      trimMemory(param1,topPad);\n    }\n  }\n  else {\n    *(uint *)(tempVar2 + 4) = tempVar5;\n    if ((size & 1) == 0) {\n      tempVar4 = tempVar4 - *(int *)(param2 + -8);\n      ptr1 = *(undefined4 **)(tempVar4 + 8);\n      tempVar3 = tempVar3 + *(int *)(param2 + -8);\n      if (ptr1 == &DAT_2007046c) {\n        isSpecialCase = true;\n      }\n      else {\n        tempVar1 = *(int *)(tempVar4 + 0xc);\n        ptr1[3] = tempVar1;\n        *(undefined4 **)(tempVar1 + 8) = ptr1;\n        isSpecialCase = false;\n      }\n    }\n    else {\n      isSpecialCase = false;\n    }\n    if (-1 < *(int *)(tempVar2 + tempVar5 + 4) << 0x1f) {\n      tempVar3 = tempVar3 + tempVar5;\n      ptr1 = *(undefined4 **)(tempVar2 + 8);\n      if ((!isSpecialCase) && (ptr1 == &DAT_2007046c)) {\n        DAT_20070474 = tempVar4;\n        DAT_20070478 = tempVar4;\n        *(int **)(tempVar4 + 0xc) = &DAT_2007046c;\n        *(int **)(tempVar4 + 8) = &DAT_2007046c;\n        *(uint *)(tempVar4 + 4) = tempVar3 | 1;\n        *(uint *)(tempVar4 + tempVar3) = tempVar3;\n        goto LAB_00083ba4;\n      }\n      tempVar2 = *(int *)(tempVar2 + 0xc);\n      ptr1[3] = tempVar2;\n      *(undefined4 **)(tempVar2 + 8) = ptr1;\n    }\n    *(uint *)(tempVar4 + 4) = tempVar3 | 1;\n    *(uint *)(tempVar4 + tempVar3) = tempVar3;\n    if (!isSpecialCase) {\n      if (tempVar3 < 0x200) {\n        size = tempVar3 & 0xfffffff8;\n        tempVar2 = *(int *)((int)&DAT_2007046c + size);\n        DAT_20070468 = DAT_20070468 | 1 << ((int)(tempVar3 >> 3) >> 2 & 0xffU);\n        *(int *)(tempVar4 + 8) = tempVar2;\n        *(undefined1 **)(tempVar4 + 0xc) = &__malloc_av_ + size;\n        *(int *)((int)&DAT_2007046c + size) = tempVar4;\n        *(int *)(tempVar2 + 0xc) = tempVar4;\n        __malloc_unlock(param1);\n        return;\n      }\n      size = tempVar3 >> 9;\n      if (size < 5) {\n        tempVar2 = (tempVar3 >> 6) + 0x38;\n        tempVar1 = tempVar2 * 2;\n      }\n      else if (size < 0x15) {\n        tempVar2 = size + 0x5b;\n        tempVar1 = tempVar2 * 2;\n      }\n      else if (size < 0x55) {\n        tempVar2 = (tempVar3 >> 0xc) + 0x6e;\n        tempVar1 = tempVar2 * 2;\n      }\n      else if (size < 0x155) {\n        tempVar2 = (tempVar3 >> 0xf) + 0x77;\n        tempVar1 = tempVar2 * 2;\n      }\n      else if (size < 0x555) {\n        tempVar2 = (tempVar3 >> 0x12) + 0x7c;\n        tempVar1 = tempVar2 * 2;\n      }\n      else {\n        tempVar1 = 0xfc;\n        tempVar2 = 0x7e;\n      }\n      ptr2 = (undefined1 *)(&DAT_2007046c)[tempVar1];\n      if (ptr2 == &__malloc_av_ + tempVar1 * 4) {\n        DAT_20070468 = DAT_20070468 | 1 << (tempVar2 >> 2 & 0xffU);\n        ptr3 = ptr2;\n      }\n      else {\n        do {\n          if ((*(uint *)(ptr2 + 4) & 0xfffffffc) <= tempVar3) break;\n          ptr2 = *(undefined1 **)(ptr2 + 8);\n        } while (&__malloc_av_ + tempVar1 * 4 != ptr2);\n        ptr3 = *(undefined1 **)(ptr2 + 0xc);\n      }\n      *(undefined1 **)(tempVar4 + 0xc) = ptr3;\n      *(undefined1 **)(tempVar4 + 8) = ptr2;\n      *(int *)(ptr3 + 8) = tempVar4;\n      *(int *)(ptr2 + 0xc) = tempVar4;\n    }\n  }\nLAB_00083ba4:\n  __malloc_unlock(param1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b10": "defragment_memory_00083b10",
                "param_1": "param1",
                "param_2": "param2",
                "puVar1": "ptr1",
                "bVar2": "isSpecialCase",
                "uVar3": "size",
                "iVar4": "tempVar1",
                "iVar5": "tempVar2",
                "puVar6": "ptr2",
                "uVar7": "tempVar3",
                "puVar8": "ptr3",
                "iVar9": "tempVar4",
                "uVar10": "tempVar5",
                "__malloc_lock": "lockMalloc",
                "__malloc_trim_threshold": "trimThreshold",
                "_malloc_trim_r": "trimMemory",
                "__malloc_top_pad": "topPad"
            },
            "calling": [
                "_malloc_r",
                "free",
                "__sflush_r",
                "__swsetup_r",
                "__sfvwrite_r",
                "_realloc_r",
                "_fclose_r"
            ],
            "called": [
                "_malloc_trim_r",
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083ca8": {
            "entrypoint": "0x00083ca8",
            "current_name": "process_data_00083ca8",
            "code": "\nundefined4 processData_00083ca8(undefined4 *errorCode,void **data,undefined4 *length)\n\n{\n  void **ptr1;\n  int status;\n  void *dest;\n  void *temp1;\n  void *temp2;\n  void *temp3;\n  ushort flag;\n  uint value;\n  int remaining;\n  void **ptr2;\n  void *source;\n  void *source2;\n  void *count;\n  size_t size;\n  void *localVar;\n  \n  if (length[2] != 0) {\n    flag = *(ushort *)(data + 3);\n    value = (uint)flag;\n    if (((int)(value << 0x1c) < 0) && (data[4] != (void *)0x0)) {\n      ptr2 = (void **)*length;\n    }\n    else {\n      status = __swsetup_r(errorCode,data);\n      if (status != 0) {\n        return 0xffffffff;\n      }\n      flag = *(ushort *)(data + 3);\n      value = (uint)flag;\n      ptr2 = (void **)*length;\n    }\n    if ((flag & 2) == 0) {\n      temp2 = (void *)(value & 2);\n      source2 = temp2;\n      source = temp2;\n      localVar = temp2;\n      if ((value & 1) == 0) {\n        temp2 = (void *)0x0;\n        source2 = (void *)0x0;\n        while( true ) {\n          while (temp2 == (void *)0x0) {\n            source2 = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            temp2 = *ptr1;\n          }\n          source = data[2];\n          if ((int)(value << 0x16) < 0) {\n            if (temp2 < source) {\n              dest = *data;\n              source = temp2;\n            }\n            else if ((value & 0x480) == 0) {\n              dest = *data;\n            }\n            else {\n              size = (int)*data - (int)data[4];\n              source = (void *)(size + 1 + (int)temp2);\n              dest = (void *)(((int)data[5] * 3) / 2);\n              if (source <= dest) {\n                source = dest;\n              }\n              if ((int)(value << 0x15) < 0) {\n                temp1 = (void *)_malloc_r(errorCode,source);\n                if (temp1 == (void *)0x0) {\n                  *errorCode = 0xc;\n                  flag = *(ushort *)(data + 3);\n                  goto LAB_00083da4;\n                }\n                memcpy(temp1,data[4],size);\n                *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                temp1 = (void *)_realloc_r(errorCode);\n                if (temp1 == (void *)0x0) {\n                  _free_r(errorCode,data[4]);\n                  flag = *(ushort *)(data + 3) & 0xff7f;\n                  *errorCode = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              dest = (void *)((int)temp1 + size);\n              data[4] = temp1;\n              data[5] = source;\n              *data = dest;\n              data[2] = (void *)((int)source - size);\n              source = temp2;\n            }\n            memmove(dest,source2,(size_t)source);\n            data[2] = (void *)((int)data[2] - (int)source);\n            *data = (void *)((int)*data + (int)source);\n            source = temp2;\n          }\n          else if ((data[4] < *data) || (dest = data[5], temp2 < dest)) {\n            if (temp2 < source) {\n              source = temp2;\n            }\n            memmove(*data,source2,(size_t)source);\n            dest = data[2];\n            data[2] = (void *)((int)dest - (int)source);\n            *data = (void *)((int)*data + (int)source);\n            if (((void *)((int)dest - (int)source) == (void *)0x0) &&\n               (status = _fflush_r(errorCode,data), status != 0)) goto LAB_00083da2;\n          }\n          else {\n            source = (void *)0x7fffffff;\n            if (temp2 < (void *)0x7fffffff) {\n              source = temp2;\n            }\n            source = (void *)(*(code *)data[9])\n                                        (errorCode,data[7],source2,\n                                         ((uint)source / (uint)dest) * (int)dest);\n            if ((int)source < 1) goto LAB_00083da2;\n          }\n          status = length[2];\n          source2 = (void *)((int)source2 + (int)source);\n          temp2 = (void *)((int)temp2 - (int)source);\n          length[2] = status - (int)source;\n          if (status - (int)source == 0) break;\n          value = (uint)*(ushort *)(data + 3);\n        }\n      }\n      else {\n        do {\n          while (temp2 == (void *)0x0) {\n            source = *ptr2;\n            temp2 = ptr2[1];\n            localVar = (void *)0x0;\n            ptr2 = ptr2 + 2;\n          }\n          if (localVar == (void *)0x0) {\n            source2 = memchr(source,10,(size_t)temp2);\n            if (source2 == (void *)0x0) {\n              source2 = (void *)((int)temp2 + 1);\n              localVar = (void *)0x1;\n            }\n            else {\n              source2 = (void *)((int)source2 + (1 - (int)source));\n              localVar = (void *)0x1;\n            }\n          }\n          temp1 = *data;\n          dest = source2;\n          if (temp2 <= source2) {\n            dest = temp2;\n          }\n          temp3 = data[5];\n          if ((data[4] < temp1) &&\n             (count = (void *)((int)data[2] + (int)temp3), (int)count < (int)dest)) {\n            memmove(temp1,source,(size_t)count);\n            *data = (void *)((int)*data + (int)count);\n            status = _fflush_r(errorCode,data);\n            if (status != 0) goto LAB_00083da2;\n          }\n          else if ((int)dest < (int)temp3) {\n            memmove(temp1,source,(size_t)dest);\n            data[2] = (void *)((int)data[2] - (int)dest);\n            *data = (void *)((int)dest + (int)*data);\n            count = dest;\n          }\n          else {\n            count = (void *)(*(code *)data[9])(errorCode,data[7],source,temp3);\n            if ((int)count < 1) goto LAB_00083da2;\n          }\n          source2 = (void *)((int)source2 - (int)count);\n          if (source2 == (void *)0x0) {\n            status = _fflush_r(errorCode,data);\n            if (status != 0) goto LAB_00083da2;\n            localVar = (void *)0x0;\n          }\n          status = length[2];\n          source = (void *)((int)source + (int)count);\n          temp2 = (void *)((int)temp2 - (int)count);\n          length[2] = status - (int)count;\n        } while (status - (int)count != 0);\n      }\n    }\n    else {\n      source2 = (void *)0x0;\n      temp2 = (void *)0x0;\n      do {\n        while( true ) {\n          source = temp2;\n          if ((void *)0x7ffffbff < temp2) {\n            source = (void *)0x7ffffc00;\n          }\n          if (temp2 != (void *)0x0) break;\n          source2 = *ptr2;\n          temp2 = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        status = (*(code *)data[9])(errorCode,data[7],source2,source);\n        if (status < 1) {\nLAB_00083da2:\n          flag = *(ushort *)(data + 3);\nLAB_00083da4:\n          *(ushort *)(data + 3) = flag | 0x40;\n          return 0xffffffff;\n        }\n        remaining = length[2];\n        source2 = (void *)((int)source2 + status);\n        temp2 = (void *)((int)temp2 - status);\n        length[2] = remaining - status;\n      } while (remaining - status != 0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083ca8": "process_data_00083ca8",
                "param_1": "errorCode",
                "param_2": "data",
                "param_3": "length",
                "ppvVar1": "ptr1",
                "iVar2": "status",
                "pvVar3": "dest",
                "pvVar4": "temp1",
                "pvVar5": "temp2",
                "pvVar6": "temp3",
                "uVar7": "flag",
                "uVar8": "value",
                "iVar9": "remaining",
                "ppvVar10": "ptr2",
                "pvVar11": "source",
                "pvVar12": "source2",
                "__n": "count",
                "__n_00": "size",
                "local_2c": "localVar"
            },
            "calling": [
                "__sprint_r.part.0"
            ],
            "called": [
                "memchr",
                "memmove",
                "_malloc_r",
                "__swsetup_r",
                "_fflush_r",
                "_realloc_r",
                "memcpy",
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083fbc": {
            "entrypoint": "0x00083fbc",
            "current_name": "process_pi_var5_00083fbc",
            "code": "\nuint process_piVar5_00083fbc(int base_address,code *callback_function)\n\n{\n  uint callback_result;\n  int current_ptr;\n  int count;\n  uint combined_results;\n  int *list_ptr;\n  \n  list_ptr = (int *)(base_address + 0x2e0);\n  if (list_ptr != (int *)0x0) {\n    combined_results = 0;\n    do {\n      current_ptr = list_ptr[2];\n      count = list_ptr[1] + -1;\n      if (-1 < count) {\n        do {\n          count = count + -1;\n          if ((1 < *(ushort *)(current_ptr + 0xc)) && (*(short *)(current_ptr + 0xe) != -1)) {\n            callback_result = (*callback_function)(current_ptr);\n            combined_results = combined_results | callback_result;\n          }\n          current_ptr = current_ptr + 0x68;\n        } while (count != -1);\n      }\n      list_ptr = (int *)*list_ptr;\n    } while (list_ptr != (int *)0x0);\n    return combined_results;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083fbc": "process_pi_var5_00083fbc",
                "param_1": "base_address",
                "param_2": "callback_function",
                "uVar1": "callback_result",
                "iVar2": "current_ptr",
                "iVar3": "count",
                "uVar4": "combined_results",
                "piVar5": "list_ptr"
            },
            "calling": [
                "_cleanup_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084004": {
            "entrypoint": "0x00084004",
            "current_name": "get_charset_00084004",
            "code": "\nchar * getCharset_00084004(void)\n\n{\n  return charset;\n}\n\n",
            "renaming": {
                "FUN_00084004": "get_charset_00084004",
                "lc_ctype_charset": "charset"
            },
            "calling": [
                "_wcrtomb_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008400c": {
            "entrypoint": "0x0008400c",
            "current_name": "get_max_multibyte_character_length_0008400c",
            "code": "\nundefined4 getMaxMultibyteCharacterLength_0008400c(void)\n\n{\n  return maxMultibyteCharacterLength;\n}\n\n",
            "renaming": {
                "FUN_0008400c": "get_max_multibyte_character_length_0008400c",
                "__mb_cur_max": "maxMultibyteCharacterLength"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084018": {
            "entrypoint": "0x00084018",
            "current_name": "process_file_00084018",
            "code": "\nvoid processFile_00084018(int file_descriptor,int *file_data)\n\n{\n  ushort file_flags;\n  int file_status;\n  int file_descriptor_new;\n  uint file_flags_new;\n  bool is_executable;\n  undefined stat_buffer [4];\n  uint stat_result;\n  \n  file_flags = *(ushort *)(file_data + 3);\n  file_flags_new = (uint)file_flags;\n  if ((int)(file_flags_new << 0x1e) < 0) {\n    *file_data = (int)file_data + 0x43;\n    file_data[4] = (int)file_data + 0x43;\n    file_data[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)file_data + 0xe)) {\n    file_status = _fstat_r(file_descriptor,(int)*(short *)((int)file_data + 0xe),stat_buffer);\n    if (-1 < file_status) {\n      is_executable = (stat_result & 0xf000) == 0x2000;\n      if (((stat_result & 0xf000) == 0x8000) && (file_data[10] == 0x8427d)) {\n        file_status = 0x400;\n        *(ushort *)(file_data + 3) = *(ushort *)(file_data + 3) | 0x400;\n        file_data[0x13] = 0x400;\n      }\n      else {\n        file_status = 0x400;\n        *(ushort *)(file_data + 3) = *(ushort *)(file_data + 3) | 0x800;\n      }\n      goto LAB_00084074;\n    }\n    file_flags = *(ushort *)(file_data + 3);\n    file_flags_new = (uint)file_flags;\n  }\n  *(ushort *)(file_data + 3) = file_flags | 0x800;\n  if ((file_flags_new & 0x80) == 0) {\n    file_status = 0x400;\n  }\n  else {\n    file_status = 0x40;\n  }\n  is_executable = false;\nLAB_00084074:\n  file_descriptor_new = _malloc_r(file_descriptor,file_status);\n  file_flags = *(ushort *)(file_data + 3);\n  if (file_descriptor_new == 0) {\n    if (-1 < (int)((uint)file_flags << 0x16)) {\n      *(ushort *)(file_data + 3) = file_flags | 2;\n      *file_data = (int)file_data + 0x43;\n      file_data[4] = (int)file_data + 0x43;\n      file_data[5] = 1;\n    }\n  }\n  else {\n    *(undefined4 *)(file_descriptor + 0x3c) = 0x8387d;\n    *(ushort *)(file_data + 3) = file_flags | 0x80;\n    *file_data = file_descriptor_new;\n    file_data[4] = file_descriptor_new;\n    file_data[5] = file_status;\n    if ((is_executable) && (file_status = _isatty_r(file_descriptor,(int)*(short *)((int)file_data + 0xe)), file_status != 0)) {\n      *(ushort *)(file_data + 3) = *(ushort *)(file_data + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084018": "process_file_00084018",
                "param_1": "file_descriptor",
                "param_2": "file_data",
                "uVar1": "file_flags",
                "iVar2": "file_status",
                "iVar3": "file_descriptor_new",
                "uVar4": "file_flags_new",
                "bVar5": "is_executable",
                "auStack_54": "stat_buffer",
                "local_50": "stat_result"
            },
            "calling": [
                "__swsetup_r"
            ],
            "called": [
                "_malloc_r",
                "_fstat_r",
                "_isatty_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000840f8": {
            "entrypoint": "0x000840f8",
            "current_name": "find_first_occurrence_000840f8",
            "code": "\nvoid * find_first_occurrence_000840f8(void *buffer,int target_value,size_t buffer_size)\n\n{\n  uint target_byte;\n  uint temp;\n  int counter;\n  uint *ptr;\n  uint target_word;\n  bool flag;\n  \n  target_byte = target_value & 0xff;\n  if (((uint)buffer & 3) == 0) {\nLAB_00084128:\n    if (3 < buffer_size) {\n      target_word = target_byte | target_byte << 8;\n      ptr = (uint *)buffer;\n      do {\n        temp = *ptr ^ (target_word | target_word << 0x10);\n        buffer = ptr;\n        if ((temp + 0xfefefeff & ~temp & 0x80808080) != 0) break;\n        buffer_size = buffer_size - 4;\n        buffer = ptr + 1;\n        ptr = ptr + 1;\n      } while (3 < buffer_size);\n    }\n    if (buffer_size == 0) {\n      buffer = (uint *)0x0;\n    }\n    else {\n                    /* WARNING: Load size is inaccurate */\n      if (*buffer != target_byte) {\n        counter = 0;\n        do {\n          buffer = (void *)((int)buffer + 1);\n          flag = counter == buffer_size - 1;\n          counter = counter + 1;\n          if (flag) goto LAB_00084150;\n                    /* WARNING: Load size is inaccurate */\n        } while (*buffer != target_byte);\n      }\n    }\n  }\n  else if (buffer_size == 0) {\nLAB_00084150:\n    buffer = (uint *)0x0;\n  }\n  else {\n                    /* WARNING: Load size is inaccurate */\n    if (*buffer != target_byte) {\n      ptr = (uint *)((int)buffer + 1);\n      buffer_size = buffer_size - 1;\n      do {\n        buffer = ptr;\n        if (((uint)buffer & 3) == 0) goto LAB_00084128;\n        if (buffer_size == 0) goto LAB_00084150;\n                    /* WARNING: Load size is inaccurate */\n        ptr = (uint *)((int)buffer + 1);\n        buffer_size = buffer_size - 1;\n      } while (*buffer != target_byte);\n    }\n  }\n  return buffer;\n}\n\n",
            "renaming": {
                "FUN_000840f8": "find_first_occurrence_000840f8",
                "__s": "buffer",
                "__c": "target_value",
                "__n": "buffer_size",
                "uVar1": "target_byte",
                "uVar2": "temp",
                "iVar3": "counter",
                "puVar4": "ptr",
                "uVar5": "target_word",
                "bVar6": "flag"
            },
            "calling": [
                "_vfiprintf_r",
                "__sfvwrite_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008418c": {
            "entrypoint": "0x0008418c",
            "current_name": "handle_signal_0008418c",
            "code": "\nundefined4 handleSignal_0008418c(undefined4 *result,uint signalIndex,undefined4 param_3,undefined4 param_4)\n\n{\n  __pid_t processID;\n  undefined4 returnValue;\n  int ptrToCode;\n  code *codePointer;\n  \n  if (0x1f < signalIndex) {\n    *result = 0x16;\n    return 0xffffffff;\n  }\n  ptrToCode = result[0xb7];\n  if ((ptrToCode == 0) || (codePointer = *(code **)(ptrToCode + signalIndex * 4), codePointer == (code *)0x0)) {\n    processID = _getpid_r();\n    returnValue = _kill_r(result,processID,signalIndex,param_4);\n    return returnValue;\n  }\n  if (codePointer == (code *)0x1) {\n    return 0;\n  }\n  if (codePointer != (code *)0xffffffff) {\n    *(undefined4 *)(ptrToCode + signalIndex * 4) = 0;\n    (*codePointer)(signalIndex);\n    return 0;\n  }\n  *result = 0x16;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0008418c": "handle_signal_0008418c",
                "param_1": "result",
                "param_2": "signalIndex",
                "_Var1": "processID",
                "uVar2": "returnValue",
                "iVar3": "ptrToCode",
                "pcVar4": "codePointer"
            },
            "calling": [
                "raise"
            ],
            "called": [
                "_kill_r",
                "_getpid_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000841e4": {
            "entrypoint": "0x000841e4",
            "current_name": "raise_signal_000841e4",
            "code": "\nint raise_signal_000841e4(int signal_number)\n\n{\n  int return_value;\n  \n  return_value = _raise_r(_impure_ptr,signal_number);\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_000841e4": "raise_signal_000841e4",
                "__sig": "signal_number",
                "iVar1": "return_value"
            },
            "calling": [
                "abort"
            ],
            "called": [
                "_raise_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000841f4": {
            "entrypoint": "0x000841f4",
            "current_name": "kill_process_000841f4",
            "code": "\nvoid killProcess_000841f4(int *errorCode,int pid,int signal)\n\n{\n  errorNumber = 0;\n  _kill(pid,signal);\n  if ((pid == -1) && (errorNumber != 0)) {\n    *errorCode = errorNumber;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000841f4": "kill_process_000841f4",
                "param_1": "errorCode",
                "param_2": "pid",
                "param_3": "signal",
                "errno": "errorNumber"
            },
            "calling": [
                "kill",
                "_raise_r"
            ],
            "called": [
                "_kill"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008421c": {
            "entrypoint": "0x0008421c",
            "current_name": "FUN_0008421c",
            "code": "\n\n\n__pid_t _getpid(void)\n\n{\n  return -1;\n}\n\n",
            "renaming": {},
            "calling": [
                "_raise_r"
            ],
            "called": [
                "_getpid"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084220": {
            "entrypoint": "0x00084220",
            "current_name": "update_total_00084220",
            "code": "\nvoid updateTotal_00084220(undefined4 streamHandle,int dataAddress)\n\n{\n  int readResult;\n  \n  readResult = _read_r(streamHandle,(int)*(short *)(dataAddress + 0xe));\n  if (-1 < readResult) {\n    *(int *)(dataAddress + 0x50) = *(int *)(dataAddress + 0x50) + readResult;\n    return;\n  }\n  *(ushort *)(dataAddress + 0xc) = *(ushort *)(dataAddress + 0xc) & 0xefff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084220": "update_total_00084220",
                "param_1": "streamHandle",
                "param_2": "dataAddress",
                "iVar1": "readResult"
            },
            "calling": [],
            "called": [
                "_read_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084244": {
            "entrypoint": "0x00084244",
            "current_name": "update_data_and_write_00084244",
            "code": "\nvoid updateDataAndWrite_00084244(undefined4 fileDescriptor,int dataPointer,undefined4 buffer,undefined4 size)\n\n{\n  ushort dataValue;\n  \n  dataValue = *(ushort *)(dataPointer + 0xc);\n  if ((int)((uint)dataValue << 0x17) < 0) {\n    seekFileFromEnd(fileDescriptor,(int)*(short *)(dataPointer + 0xe),0,2);\n    dataValue = *(ushort *)(dataPointer + 0xc);\n  }\n  *(ushort *)(dataPointer + 0xc) = dataValue & 0xefff;\n  writeToFile(fileDescriptor,(int)*(short *)(dataPointer + 0xe),buffer,size);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084244": "update_data_and_write_00084244",
                "param_1": "fileDescriptor",
                "param_2": "dataPointer",
                "param_3": "buffer",
                "param_4": "size",
                "uVar1": "dataValue",
                "_lseek_r": "seekFileFromEnd",
                "_write_r": "writeToFile"
            },
            "calling": [],
            "called": [
                "_write_r",
                "_lseek_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008427c": {
            "entrypoint": "0x0008427c",
            "current_name": "update_file_access_status_0008427c",
            "code": "\nvoid updateFileAccessStatus_0008427c(undefined4 fileDescriptor,int bufferAddress)\n\n{\n  int seekResult;\n  ushort accessStatus;\n  \n  seekResult = _lseek_r(fileDescriptor,(int)*(short *)(bufferAddress + 0xe));\n  if (seekResult == -1) {\n    accessStatus = *(ushort *)(bufferAddress + 0xc) & 0xefff;\n  }\n  else {\n    accessStatus = *(ushort *)(bufferAddress + 0xc) | 0x1000;\n  }\n  if (seekResult != -1) {\n    *(int *)(bufferAddress + 0x50) = seekResult;\n  }\n  *(ushort *)(bufferAddress + 0xc) = accessStatus;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008427c": "update_file_access_status_0008427c",
                "param_1": "fileDescriptor",
                "param_2": "bufferAddress",
                "iVar1": "seekResult",
                "uVar2": "accessStatus"
            },
            "calling": [],
            "called": [
                "_lseek_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008429c": {
            "entrypoint": "0x0008429c",
            "current_name": "close_file_0008429c",
            "code": "\nvoid closeFile_0008429c(undefined4 fileDescriptor,int dataPointer)\n\n{\n  _close_r(fileDescriptor,(int)*(short *)(dataPointer + 0xe));\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008429c": "close_file_0008429c",
                "param_1": "fileDescriptor",
                "param_2": "dataPointer"
            },
            "calling": [],
            "called": [
                "_close_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "process_input_000842a4",
            "code": "\nuint processInput_000842a4(int inputPtr,uint inputValue,undefined4 *outputPtr,undefined4 outputValue)\n\n{\n  ushort flag;\n  uint value;\n  undefined *ptr;\n  int counter;\n  \n  if ((inputPtr != 0) && (*(int *)(inputPtr + 0x38) == 0)) {\n    __sinit();\n  }\n  flag = *(ushort *)(outputPtr + 3);\n  value = (uint)flag;\n  outputPtr[2] = outputPtr[6];\n  if ((-1 < (int)(value << 0x1c)) || (counter = outputPtr[4], counter == 0)) {\n    counter = __swsetup_r(inputPtr,outputPtr,flag,value,outputValue);\n    if (counter != 0) {\n      return 0xffffffff;\n    }\n    flag = *(ushort *)(outputPtr + 3);\n    counter = outputPtr[4];\n    value = (uint)flag;\n  }\n  inputValue = inputValue & 0xff;\n  if ((int)(value << 0x12) < 0) {\n    ptr = (undefined *)*outputPtr;\n    counter = (int)ptr - counter;\n    if (counter < (int)outputPtr[5]) {\nLAB_000842d6:\n      counter = counter + 1;\n      goto LAB_000842d8;\n    }\n  }\n  else {\n    outputPtr[0x19] = outputPtr[0x19] & 0xffffdfff;\n    ptr = (undefined *)*outputPtr;\n    *(ushort *)(outputPtr + 3) = flag | 0x2000;\n    counter = (int)ptr - counter;\n    if (counter < (int)outputPtr[5]) goto LAB_000842d6;\n  }\n  counter = _fflush_r(inputPtr,outputPtr);\n  if (counter != 0) {\n    return 0xffffffff;\n  }\n  ptr = (undefined *)*outputPtr;\n  counter = 1;\nLAB_000842d8:\n  outputPtr[2] = outputPtr[2] + -1;\n  *outputPtr = ptr + 1;\n  *ptr = (char)inputValue;\n  if (((outputPtr[5] == counter) ||\n      (((int)((uint)*(ushort *)(outputPtr + 3) << 0x1f) < 0 && (inputValue == 10)))) &&\n     (counter = _fflush_r(inputPtr,outputPtr), counter != 0)) {\n    return 0xffffffff;\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "process_input_000842a4",
                "param_1": "inputPtr",
                "param_2": "inputValue",
                "param_3": "outputPtr",
                "param_4": "outputValue",
                "uVar1": "flag",
                "uVar2": "value",
                "puVar3": "ptr",
                "iVar4": "counter"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [
                "__sinit",
                "__swsetup_r",
                "_fflush_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008434c": {
            "entrypoint": "0x0008434c",
            "current_name": "convert_string_to_locale_encoding_0008434c",
            "code": "\nvoid convertStringToLocaleEncoding_0008434c(undefined4 *outputString,int stringLength,undefined4 additionalParam,undefined4 *errorCode)\n\n{\n  code *convertFunction;\n  undefined4 charset;\n  int conversionResult;\n  undefined conversionBuffer [12];\n  \n  convertFunction = __wctomb;\n  if (stringLength == 0) {\n    charset = __locale_charset();\n    conversionResult = (*convertFunction)(outputString,conversionBuffer,0,charset,errorCode);\n  }\n  else {\n    charset = __locale_charset();\n    conversionResult = (*convertFunction)(outputString,stringLength,additionalParam,charset,errorCode);\n  }\n  if (conversionResult == -1) {\n    *errorCode = 0;\n    *outputString = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008434c": "convert_string_to_locale_encoding_0008434c",
                "param_1": "outputString",
                "param_2": "stringLength",
                "param_3": "additionalParam",
                "param_4": "errorCode",
                "pcVar1": "convertFunction",
                "uVar2": "charset",
                "iVar3": "conversionResult",
                "auStack_24": "conversionBuffer"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [
                "__ascii_wctomb",
                "__locale_charset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008439c": {
            "entrypoint": "0x0008439c",
            "current_name": "copy_value_to_memory_0008439c",
            "code": "\nundefined4 copy_value_to_memory_0008439c(undefined4 *destination_pointer,undefined *source_pointer,uint value_to_copy)\n\n{\n  if (source_pointer == (undefined *)0x0) {\n    return 0;\n  }\n  if (value_to_copy < 0x100) {\n    *source_pointer = (char)value_to_copy;\n    return 1;\n  }\n  *destination_pointer = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0008439c": "copy_value_to_memory_0008439c",
                "param_1": "destination_pointer",
                "param_2": "source_pointer",
                "param_3": "value_to_copy"
            },
            "calling": [
                "_wcrtomb_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000843b8": {
            "entrypoint": "0x000843b8",
            "current_name": "write_to_file_000843b8",
            "code": "\nvoid write_to_file_000843b8(int *error_code,int file_descriptor,char *data,int data_length)\n\n{\n  int write_result;\n  \n  errno = 0;\n  write_result = _write(file_descriptor,data,data_length);\n  if ((write_result == -1) && (errno != 0)) {\n    *error_code = errno;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000843b8": "write_to_file_000843b8",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "data",
                "param_4": "data_length",
                "iVar1": "write_result"
            },
            "calling": [
                "__swrite"
            ],
            "called": [
                "_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000843e0": {
            "entrypoint": "0x000843e0",
            "current_name": "close_file_with_error_handling_000843e0",
            "code": "\nvoid closeFileWithErrorHandling_000843e0(int *errorFlag,int fileDescriptor)\n\n{\n  int closeResult;\n  \n  errno = 0;\n  closeResult = _close(fileDescriptor);\n  if ((closeResult == -1) && (errno != 0)) {\n    *errorFlag = errno;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000843e0": "close_file_with_error_handling_000843e0",
                "param_1": "errorFlag",
                "param_2": "fileDescriptor",
                "iVar1": "closeResult"
            },
            "calling": [
                "__sclose"
            ],
            "called": [
                "_close"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084404": {
            "entrypoint": "0x00084404",
            "current_name": "flush_file_buffer_00084404",
            "code": "\nundefined4 flushFileBuffer_00084404(int file,int stream)\n\n{\n  undefined4 result;\n  int status;\n  \n  if (stream != 0) {\n    if ((file != 0) && (*(int *)(file + 0x38) == 0)) {\n      __sinit();\n    }\n    if (*(short *)(stream + 0xc) != 0) {\n      result = _fflush_r(file,stream);\n      if ((*(code **)(stream + 0x2c) != (code *)0x0) &&\n         (status = (**(code **)(stream + 0x2c))(file,*(undefined4 *)(stream + 0x1c)), status < 0)\n         ) {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(stream + 0xc) << 0x18) < 0) {\n        _free_r(file,*(undefined4 *)(stream + 0x10));\n      }\n      if (*(int *)(stream + 0x30) != 0) {\n        if (*(int *)(stream + 0x30) != stream + 0x40) {\n          _free_r(file);\n        }\n        *(undefined4 *)(stream + 0x30) = 0;\n      }\n      if (*(int *)(stream + 0x44) != 0) {\n        _free_r(file);\n        *(undefined4 *)(stream + 0x44) = 0;\n      }\n      __sfp_lock_acquire();\n      *(undefined2 *)(stream + 0xc) = 0;\n      __sfp_lock_release();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00084404": "flush_file_buffer_00084404",
                "param_1": "file",
                "param_2": "stream",
                "uVar1": "result",
                "iVar2": "status"
            },
            "calling": [
                "fclose"
            ],
            "called": [
                "__sfp_lock_acquire",
                "__sinit",
                "__sfp_lock_release",
                "_fflush_r",
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084484": {
            "entrypoint": "0x00084484",
            "current_name": "close_file_stream_00084484",
            "code": "\nint closeFileStream_00084484(FILE *file)\n\n{\n  int result;\n  \n  result = _fclose_r(_impure_ptr,file);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084484": "close_file_stream_00084484",
                "__stream": "file",
                "iVar1": "result"
            },
            "calling": [],
            "called": [
                "_fclose_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084494": {
            "entrypoint": "0x00084494",
            "current_name": "get_file_status_00084494",
            "code": "\nvoid get_file_status_00084494(int *error_code,int file_descriptor,stat *file_status)\n\n{\n  int status_check;\n  \n  errno = 0;\n  status_check = _fstat(file_descriptor,file_status);\n  if ((status_check == -1) && (errno != 0)) {\n    *error_code = errno;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084494": "get_file_status_00084494",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "file_status",
                "iVar1": "status_check"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_fstat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844bc": {
            "entrypoint": "0x000844bc",
            "current_name": "check_terminal_is_atty_000844bc",
            "code": "\nvoid checkTerminalIsATTY_000844bc(int *errorPtr,int fileDescriptor)\n\n{\n  int isTTY;\n  \n  errorCode = 0;\n  isTTY = _isatty(fileDescriptor);\n  if ((isTTY == -1) && (errorCode != 0)) {\n    *errorPtr = errorCode;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844bc": "check_terminal_is_atty_000844bc",
                "param_1": "errorPtr",
                "param_2": "fileDescriptor",
                "iVar1": "isTTY",
                "errno": "errorCode"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_isatty"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844e0": {
            "entrypoint": "0x000844e0",
            "current_name": "file_seek_000844e0",
            "code": "\nvoid file_seek_000844e0(int *error_code,int file_descriptor,__off_t offset,int whence)\n\n{\n  __off_t seek_result;\n  \n  errno = 0;\n  seek_result = _lseek(file_descriptor,offset,whence);\n  if ((seek_result == -1) && (errno != 0)) {\n    *error_code = errno;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844e0": "file_seek_000844e0",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "offset",
                "param_4": "whence",
                "_Var1": "seek_result"
            },
            "calling": [
                "__sseek",
                "__swrite"
            ],
            "called": [
                "_lseek"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084508": {
            "entrypoint": "0x00084508",
            "current_name": "read_data_00084508",
            "code": "\nvoid readData_00084508(int *errorFlag,int fileDescriptor,char *buffer,int bufferSize)\n\n{\n  int bytesRead;\n  \n  errno = 0;\n  bytesRead = _read(fileDescriptor,buffer,bufferSize);\n  if ((bytesRead == -1) && (errno != 0)) {\n    *errorFlag = errno;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084508": "read_data_00084508",
                "param_1": "errorFlag",
                "param_2": "fileDescriptor",
                "param_3": "buffer",
                "param_4": "bufferSize",
                "iVar1": "bytesRead"
            },
            "calling": [
                "__sread"
            ],
            "called": [
                "_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084530": {
            "entrypoint": "0x00084530",
            "current_name": "handle_divisions_00084530",
            "code": "\nvoid handleDivisions_00084530(int dividend,int divisor,int quotient,int remainder)\n\n{\n  if ((remainder == 0) && (quotient == 0)) {\n    if (divisor != 0 || dividend != 0) {\n      dividend = -1;\n    }\n    __aeabi_idiv0(dividend);\n    return;\n  }\n  __gnu_uldivmod_helper();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084530": "handle_divisions_00084530",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "__gnu_uldivmod_helper",
                "__aeabi_idiv0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008455c": {
            "entrypoint": "0x0008455c",
            "current_name": "calculate_difference_and_assign_0008455c",
            "code": "\nvoid calculateDifferenceAndAssign_0008455c(uint firstNumber,int secondNumber,undefined4 lowerBits,undefined4 upperBits,int *resultArray)\n\n{\n  uint calculatedValue;\n  longlong result;\n  \n  result = __divdi3();\n  result = result * CONCAT44(upperBits,lowerBits);\n  calculatedValue = (uint)result;\n  *resultArray = firstNumber - calculatedValue;\n  adjustedDifference = (secondNumber - (int)((ulonglong)result >> 0x20)) - (uint)(firstNumber < calculatedValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008455c": "calculate_difference_and_assign_0008455c",
                "param_1": "firstNumber",
                "param_2": "secondNumber",
                "param_3": "lowerBits",
                "param_4": "upperBits",
                "param_5": "resultArray",
                "uVar1": "calculatedValue",
                "lVar2": "result",
                "param_5[1]": "adjustedDifference"
            },
            "calling": [],
            "called": [
                "__divdi3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008458c": {
            "entrypoint": "0x0008458c",
            "current_name": "subtract_and_adjust_0008458c",
            "code": "\nvoid subtract_and_adjust_0008458c(uint input_value,int subtract_value,undefined4 high_word,undefined4 low_word,int *result_array)\n\n{\n  uint product_low_word;\n  longlong product;\n  \n  product = __udivdi3();\n  product = product * CONCAT44(low_word,high_word);\n  product_low_word = (uint)product;\n  *result_array = input_value - product_low_word;\n  result_array[1] = (subtract_value - (int)((ulonglong)product >> 0x20)) - (uint)(input_value < product_low_word);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008458c": "subtract_and_adjust_0008458c",
                "param_1": "input_value",
                "param_2": "subtract_value",
                "param_3": "high_word",
                "param_4": "low_word",
                "param_5": "result_array",
                "uVar1": "product_low_word",
                "lVar2": "product",
                "param_5[1]": "result_array[1]"
            },
            "calling": [
                "__aeabi_uldivmod"
            ],
            "called": [
                "__udivdi3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845bc": {
            "entrypoint": "0x000845bc",
            "current_name": "FUNC_000845bc",
            "code": "\nvoid FUNC_000845bc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000845bc": "FUNC_000845bc"
            },
            "calling": [
                "__aeabi_uldivmod"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000845c0": {
            "entrypoint": "0x000845c0",
            "current_name": "perform_division_000845c0",
            "code": "\nundefined8 performDivision_000845c0(uint dividend,uint numerator,uint divisor,uint denominator)\n\n{\n  longlong result;\n  uint quotient_low;\n  uint quotient_high;\n  uint divisor_low;\n  uint divisor_high;\n  int LZCOUNT_result;\n  uint temp2;\n  uint temp3;\n  uint isNegative1;\n  uint isNegative2;\n  uint isNegative;\n  uint shiftAmount;\n  bool carry_flag;\n  \n  if ((int)numerator < 0) {\n    carry_flag = dividend != 0;\n    dividend = -dividend;\n    numerator = -numerator - (uint)carry_flag;\n    isNegative1 = 0xffffffff;\n  }\n  else {\n    isNegative1 = 0;\n  }\n  if ((int)denominator < 0) {\n    isNegative1 = ~isNegative1;\n    carry_flag = divisor != 0;\n    divisor = -divisor;\n    denominator = -denominator - (uint)carry_flag;\n  }\n  if (denominator == 0) {\n    if (numerator < divisor) {\n      LZCOUNT_result = LZCOUNT(divisor);\n      if (LZCOUNT_result != 0) {\n        quotient_high = dividend >> (0x20U - LZCOUNT_result & 0xff);\n        divisor = divisor << LZCOUNT_result;\n        dividend = dividend << LZCOUNT_result;\n        numerator = numerator << LZCOUNT_result | quotient_high;\n      }\n      quotient_low = divisor >> 0x10;\n      divisor_low = numerator / quotient_low;\n      temp2 = (divisor & 0xffff) * divisor_low;\n      isNegative2 = dividend >> 0x10 | (numerator - quotient_low * divisor_low) * 0x10000;\n      quotient_high = divisor_low;\n      if (isNegative2 <= temp2 && temp2 - isNegative2 != 0) {\n        carry_flag = CARRY4(isNegative2,divisor);\n        isNegative2 = isNegative2 + divisor;\n        quotient_high = divisor_low - 1;\n        if ((carry_flag == false) && (isNegative2 <= temp2 && temp2 - isNegative2 != 0)) {\n          quotient_high = divisor_low - 2;\n          isNegative2 = isNegative2 + divisor;\n        }\n      }\n      temp3 = (isNegative2 - temp2) / quotient_low;\n      divisor_low = (divisor & 0xffff) * temp3;\n      temp2 = dividend & 0xffff | ((isNegative2 - temp2) - quotient_low * temp3) * 0x10000;\n      quotient_low = temp3;\n      if (temp2 <= divisor_low && divisor_low - temp2 != 0) {\n        quotient_low = temp3 - 1;\n        if ((CARRY4(temp2,divisor) == false) &&\n           (temp2 + divisor <= divisor_low && divisor_low - (temp2 + divisor) != 0)) {\n          quotient_low = temp3 - 2;\n        }\n      }\n      quotient_low = quotient_low | quotient_high << 0x10;\n      quotient_high = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      LZCOUNT_result = LZCOUNT(divisor);\n      if (LZCOUNT_result == 0) {\n        numerator = numerator - divisor;\n        divisor_low = divisor >> 0x10;\n        shiftAmount = divisor & 0xffff;\n        quotient_high = 1;\n      }\n      else {\n        divisor = divisor << LZCOUNT_result;\n        quotient_high = numerator >> (0x20U - LZCOUNT_result & 0xff);\n        divisor_low = divisor >> 0x10;\n        isNegative2 = quotient_high / divisor_low;\n        shiftAmount = divisor & 0xffff;\n        temp2 = shiftAmount * isNegative2;\n        temp3 = dividend >> (0x20U - LZCOUNT_result & 0xff) | numerator << LZCOUNT_result;\n        quotient_high = temp3 >> 0x10 | (quotient_high - divisor_low * isNegative2) * 0x10000;\n        dividend = dividend << LZCOUNT_result;\n        quotient_low = isNegative2;\n        if (quotient_high <= temp2 && temp2 - quotient_high != 0) {\n          carry_flag = CARRY4(quotient_high,divisor);\n          quotient_high = quotient_high + divisor;\n          quotient_low = isNegative2 - 1;\n          if ((carry_flag == false) && (quotient_high <= temp2 && temp2 - quotient_high != 0)) {\n            quotient_low = isNegative2 - 2;\n            quotient_high = quotient_high + divisor;\n          }\n        }\n        divisor_high = (quotient_high - temp2) / divisor_low;\n        isNegative2 = shiftAmount * divisor_high;\n        numerator = temp3 & 0xffff | ((quotient_high - temp2) - divisor_low * divisor_high) * 0x10000;\n        quotient_high = divisor_high;\n        if (numerator <= isNegative2 && isNegative2 - numerator != 0) {\n          carry_flag = CARRY4(numerator,divisor);\n          numerator = numerator + divisor;\n          quotient_high = divisor_high - 1;\n          if ((carry_flag == false) && (numerator <= isNegative2 && isNegative2 - numerator != 0)) {\n            quotient_high = divisor_high - 2;\n            numerator = numerator + divisor;\n          }\n        }\n        numerator = numerator - isNegative2;\n        quotient_high = quotient_high | quotient_low << 0x10;\n      }\n      quotient_low = numerator / divisor_low;\n      isNegative2 = shiftAmount * quotient_low;\n      temp3 = dividend >> 0x10 | (numerator - divisor_low * quotient_low) * 0x10000;\n      temp2 = quotient_low;\n      if (temp3 <= isNegative2 && isNegative2 - temp3 != 0) {\n        carry_flag = CARRY4(temp3,divisor);\n        temp3 = temp3 + divisor;\n        temp2 = quotient_low - 1;\n        if ((carry_flag == false) && (temp3 <= isNegative2 && isNegative2 - temp3 != 0)) {\n          temp2 = quotient_low - 2;\n          temp3 = temp3 + divisor;\n        }\n      }\n      divisor_high = (temp3 - isNegative2) / divisor_low;\n      shiftAmount = shiftAmount * divisor_high;\n      divisor_low = dividend & 0xffff | ((temp3 - isNegative2) - divisor_low * divisor_high) * 0x10000;\n      quotient_low = divisor_high;\n      if (divisor_low <= shiftAmount && shiftAmount - divisor_low != 0) {\n        quotient_low = divisor_high - 1;\n        if ((CARRY4(divisor_low,divisor) == false) &&\n           (divisor_low + divisor <= shiftAmount && shiftAmount - (divisor_low + divisor) != 0)) {\n          quotient_low = divisor_high - 2;\n        }\n      }\n      quotient_low = quotient_low | temp2 << 0x10;\n    }\n  }\n  else if (numerator < denominator) {\n    quotient_high = 0;\n    quotient_low = 0;\n  }\n  else {\n    LZCOUNT_result = LZCOUNT(denominator);\n    if (LZCOUNT_result == 0) {\n      if ((denominator < numerator) || (divisor <= dividend)) {\n        quotient_high = 0;\n        quotient_low = 1;\n      }\n      else {\n        quotient_low = 0;\n        quotient_high = 0;\n      }\n    }\n    else {\n      quotient_high = 0x20 - LZCOUNT_result;\n      divisor_low = numerator >> (quotient_high & 0xff);\n      shiftAmount = divisor >> (quotient_high & 0xff) | denominator << LZCOUNT_result;\n      isNegative2 = shiftAmount >> 0x10;\n      quotient_low = divisor_low / isNegative2;\n      temp3 = (shiftAmount & 0xffff) * quotient_low;\n      temp2 = numerator << LZCOUNT_result | dividend >> (quotient_high & 0xff);\n      divisor_low = temp2 >> 0x10 | (divisor_low - isNegative2 * quotient_low) * 0x10000;\n      quotient_high = quotient_low;\n      if (divisor_low <= temp3 && temp3 - divisor_low != 0) {\n        carry_flag = CARRY4(divisor_low,shiftAmount);\n        divisor_low = divisor_low + shiftAmount;\n        quotient_high = quotient_low - 1;\n        if ((carry_flag == false) && (divisor_low <= temp3 && temp3 - divisor_low != 0)) {\n          quotient_high = quotient_low - 2;\n          divisor_low = divisor_low + shiftAmount;\n        }\n      }\n      divisor_high = (divisor_low - temp3) / isNegative2;\n      isNegative = (shiftAmount & 0xffff) * divisor_high;\n      divisor_low = temp2 & 0xffff | ((divisor_low - temp3) - isNegative2 * divisor_high) * 0x10000;\n      quotient_low = divisor_high;\n      if (divisor_low <= isNegative && isNegative - divisor_low != 0) {\n        carry_flag = CARRY4(divisor_low,shiftAmount);\n        divisor_low = divisor_low + shiftAmount;\n        quotient_low = divisor_high - 1;\n        if ((carry_flag == false) && (divisor_low <= isNegative && isNegative - divisor_low != 0)) {\n          quotient_low = divisor_high - 2;\n          divisor_low = divisor_low + shiftAmount;\n        }\n      }\n      quotient_low = quotient_low | quotient_high << 0x10;\n      result = (ulonglong)quotient_low * (ulonglong)(divisor << LZCOUNT_result);\n      temp2 = (uint)((ulonglong)result >> 0x20);\n      quotient_high = 0;\n      if ((divisor_low - isNegative < temp2) ||\n         ((divisor_low - isNegative == temp2 && (dividend << LZCOUNT_result < (uint)result)))) {\n        quotient_low = quotient_low - 1;\n        quotient_high = 0;\n      }\n    }\n  }\n  if (isNegative1 != 0) {\n    carry_flag = quotient_low != 0;\n    quotient_low = -quotient_low;\n    quotient_high = -quotient_high - (uint)carry_flag;\n  }\n  return CONCAT44(quotient_high,quotient_low);\n}\n\n",
            "renaming": {
                "FUN_000845c0": "perform_division_000845c0",
                "param_1": "dividend",
                "param_2": "numerator",
                "param_3": "divisor",
                "param_4": "denominator",
                "lVar1": "result",
                "uVar2": "quotient_low",
                "uVar3": "quotient_high",
                "uVar4": "divisor_low",
                "uVar5": "divisor_high",
                "uVar7": "temp2",
                "uVar8": "temp3",
                "uVar9": "isNegative1",
                "uVar10": "isNegative2",
                "uVar11": "isNegative",
                "uVar12": "shiftAmount",
                "bVar13": "carry_flag",
                "iVar6": "LZCOUNT_result"
            },
            "calling": [
                "__gnu_ldivmod_helper"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084860": {
            "entrypoint": "0x00084860",
            "current_name": "perform_division_00084860",
            "code": "\nulonglong performDivision_00084860(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong product;\n  uint result_high;\n  uint quotient_high;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  int shift_count;\n  bool carry_flag;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      shift_count = LZCOUNT(quotient);\n      if (shift_count == 0) {\n        divisor = divisor - quotient;\n        quotient_high = quotient >> 0x10;\n        temp2 = quotient & 0xffff;\n        result_high = 1;\n      }\n      else {\n        quotient = quotient << shift_count;\n        temp5 = divisor >> (0x20U - shift_count & 0xff);\n        quotient_high = quotient >> 0x10;\n        temp6 = temp5 / quotient_high;\n        temp2 = quotient & 0xffff;\n        result_high = temp2 * temp6;\n        temp3 = dividend >> (0x20U - shift_count & 0xff) | divisor << shift_count;\n        temp1 = temp3 >> 0x10 | (temp5 - quotient_high * temp6) * 0x10000;\n        dividend = dividend << shift_count;\n        temp5 = temp6;\n        if (temp1 <= result_high && result_high - temp1 != 0) {\n          carry_flag = CARRY4(temp1,quotient);\n          temp1 = temp1 + quotient;\n          temp5 = temp6 - 1;\n          if ((carry_flag == false) && (temp1 <= result_high && result_high - temp1 != 0)) {\n            temp5 = temp6 - 2;\n            temp1 = temp1 + quotient;\n          }\n        }\n        temp4 = (temp1 - result_high) / quotient_high;\n        temp6 = temp2 * temp4;\n        divisor = temp3 & 0xffff | ((temp1 - result_high) - quotient_high * temp4) * 0x10000;\n        result_high = temp4;\n        if (divisor <= temp6 && temp6 - divisor != 0) {\n          carry_flag = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          result_high = temp4 - 1;\n          if ((carry_flag == false) && (divisor <= temp6 && temp6 - divisor != 0)) {\n            result_high = temp4 - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - temp6;\n        result_high = result_high | temp5 << 0x10;\n      }\n      temp6 = divisor / quotient_high;\n      temp1 = temp2 * temp6;\n      temp3 = dividend >> 0x10 | (divisor - quotient_high * temp6) * 0x10000;\n      temp5 = temp6;\n      if (temp3 <= temp1 && temp1 - temp3 != 0) {\n        carry_flag = CARRY4(temp3,quotient);\n        temp3 = temp3 + quotient;\n        temp5 = temp6 - 1;\n        if ((carry_flag == false) && (temp3 <= temp1 && temp1 - temp3 != 0)) {\n          temp5 = temp6 - 2;\n          temp3 = temp3 + quotient;\n        }\n      }\n      temp6 = (temp3 - temp1) / quotient_high;\n      temp2 = temp2 * temp6;\n      temp3 = dividend & 0xffff | ((temp3 - temp1) - quotient_high * temp6) * 0x10000;\n      quotient_high = temp6;\n      if (temp3 <= temp2 && temp2 - temp3 != 0) {\n        quotient_high = temp6 - 1;\n        if ((CARRY4(temp3,quotient) == false) &&\n           (temp3 + quotient <= temp2 && temp2 - (temp3 + quotient) != 0)) {\n          quotient_high = temp6 - 2;\n        }\n      }\n      return CONCAT44(result_high,quotient_high | temp5 << 0x10);\n    }\n    shift_count = LZCOUNT(quotient);\n    if (shift_count != 0) {\n      temp5 = dividend >> (0x20U - shift_count & 0xff);\n      quotient = quotient << shift_count;\n      dividend = dividend << shift_count;\n      divisor = temp5 | divisor << shift_count;\n    }\n    result_high = quotient >> 0x10;\n    quotient_high = divisor / result_high;\n    temp2 = (quotient & 0xffff) * quotient_high;\n    temp6 = dividend >> 0x10 | (divisor - result_high * quotient_high) * 0x10000;\n    temp5 = quotient_high;\n    if (temp6 <= temp2 && temp2 - temp6 != 0) {\n      carry_flag = CARRY4(temp6,quotient);\n      temp6 = temp6 + quotient;\n      temp5 = quotient_high - 1;\n      if ((carry_flag == false) && (temp6 <= temp2 && temp2 - temp6 != 0)) {\n        temp5 = quotient_high - 2;\n        temp6 = temp6 + quotient;\n      }\n    }\n    temp3 = (temp6 - temp2) / result_high;\n    quotient_high = (quotient & 0xffff) * temp3;\n    temp2 = dividend & 0xffff | ((temp6 - temp2) - result_high * temp3) * 0x10000;\n    result_high = temp3;\n    if (temp2 <= quotient_high && quotient_high - temp2 != 0) {\n      result_high = temp3 - 1;\n      if ((CARRY4(temp2,quotient) == false) &&\n         (temp2 + quotient <= quotient_high && quotient_high - (temp2 + quotient) != 0)) {\n        result_high = temp3 - 2;\n      }\n    }\n    result_high = result_high | temp5 << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    shift_count = LZCOUNT(remainder);\n    if (shift_count == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      result_high = 0;\n    }\n    else {\n      result_high = 0x20 - shift_count;\n      temp5 = divisor >> (result_high & 0xff);\n      quotient_high = remainder << shift_count | quotient >> (result_high & 0xff);\n      temp2 = quotient_high >> 0x10;\n      temp1 = temp5 / temp2;\n      temp6 = (quotient_high & 0xffff) * temp1;\n      temp3 = dividend >> (result_high & 0xff) | divisor << shift_count;\n      result_high = temp3 >> 0x10 | (temp5 - temp2 * temp1) * 0x10000;\n      temp5 = temp1;\n      if (result_high <= temp6 && temp6 - result_high != 0) {\n        carry_flag = CARRY4(result_high,quotient_high);\n        result_high = result_high + quotient_high;\n        temp5 = temp1 - 1;\n        if ((carry_flag == false) && (result_high <= temp6 && temp6 - result_high != 0)) {\n          temp5 = temp1 - 2;\n          result_high = result_high + quotient_high;\n        }\n      }\n      temp1 = (result_high - temp6) / temp2;\n      temp4 = (quotient_high & 0xffff) * temp1;\n      temp2 = temp3 & 0xffff | ((result_high - temp6) - temp2 * temp1) * 0x10000;\n      result_high = temp1;\n      if (temp2 <= temp4 && temp4 - temp2 != 0) {\n        carry_flag = CARRY4(temp2,quotient_high);\n        temp2 = temp2 + quotient_high;\n        result_high = temp1 - 1;\n        if ((carry_flag == false) && (temp2 <= temp4 && temp4 - temp2 != 0)) {\n          result_high = temp1 - 2;\n          temp2 = temp2 + quotient_high;\n        }\n      }\n      result_high = result_high | temp5 << 0x10;\n      product = (ulonglong)result_high * (ulonglong)(quotient << shift_count);\n      temp5 = (uint)((ulonglong)product >> 0x20);\n      if ((temp2 - temp4 < temp5) || ((temp2 - temp4 == temp5 && (dividend << shift_count < (uint)product)))\n         ) {\n        result_high = result_high - 1;\n      }\n    }\n  }\n  return (ulonglong)result_high;\n}\n\n",
            "renaming": {
                "FUN_00084860": "perform_division_00084860",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "lVar1": "product",
                "uVar2": "result_high",
                "uVar3": "quotient_high",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar6": "temp3",
                "uVar7": "temp4",
                "uVar8": "temp5",
                "uVar9": "temp6",
                "iVar10": "shift_count",
                "bVar11": "carry_flag"
            },
            "calling": [
                "__gnu_uldivmod_helper"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085844": {
            "entrypoint": "0x00085844",
            "current_name": "FUNC_00085844",
            "code": "\nvoid FUNC_00085844(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085844": "FUNC_00085844"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00085860": {
            "entrypoint": "0x00085860",
            "current_name": "FUNC_00085860",
            "code": "\nvoid FUNC_00085860(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085860": "FUNC_00085860"
            },
            "calling": [
                "__libc_fini_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_20070000": {
            "entrypoint": "0x20070000",
            "current_name": "disable_irq_interrupts_20070000",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid disable_IRQ_interrupts_20070000(void)\n\n{\n  disableIRQinterrupts();\n  do {\n  } while (-1 < *(int *)(DAT_2007001c + 8) << 0x1f);\n  *(undefined4 *)(DAT_2007001c + 4) = DAT_20070020;\n  do {\n  } while (-1 < *(int *)(DAT_2007001c + 8) << 0x1f);\n  *DAT_20070028 = DAT_20070024;\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_20070000": "disable_irq_interrupts_20070000"
            },
            "calling": [
                "tickReset",
                "Reset_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 119691,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_00080148",
            "FUN_0008014c",
            "FUN_00080164",
            "FUN_00080184",
            "FUN_000801e0",
            "FUN_00080250",
            "FUN_000803fc",
            "FUN_0008044c",
            "FUN_00080558",
            "FUN_00080568",
            "FUN_00080578",
            "FUN_00080588",
            "FUN_00080598",
            "FUN_000805a8",
            "FUN_000805e8",
            "FUN_000806a0",
            "FUN_000806ac",
            "FUN_000806f8",
            "FUN_0008073c",
            "FUN_00080750",
            "FUN_0008075c",
            "FUN_00080768",
            "FUN_00080774",
            "FUN_0008089c",
            "FUN_00080970",
            "FUN_000809b4",
            "FUN_000809be",
            "FUN_000809e4",
            "FUN_00080a0a",
            "FUN_00080a30",
            "FUN_00080a94",
            "FUN_00080aa8",
            "FUN_00080aec",
            "FUN_00080b2c",
            "FUN_00080b64",
            "FUN_00080b90",
            "FUN_00080b98",
            "FUN_00080c20",
            "FUN_00080c98",
            "FUN_00080d30",
            "FUN_00080d3e",
            "FUN_00080d58",
            "FUN_00080d62",
            "FUN_00080d6a",
            "FUN_00080d70",
            "FUN_00080d80",
            "FUN_00080db8",
            "FUN_00080df0",
            "FUN_00080e28",
            "FUN_00080e60",
            "FUN_00080e62",
            "FUN_00080e66",
            "FUN_00080e6a",
            "FUN_00080e80",
            "FUN_00080e84",
            "FUN_00080e88",
            "FUN_00080ea4",
            "FUN_00080eaa",
            "FUN_00080eb0",
            "FUN_00080eba",
            "FUN_00080ebe",
            "FUN_00080ec2",
            "FUN_00080ec8",
            "FUN_00080eec",
            "FUN_00080efe",
            "FUN_00080f04",
            "FUN_00080f0c",
            "FUN_00081014",
            "FUN_00081084",
            "FUN_000810a6",
            "FUN_000810c4",
            "FUN_000810cc",
            "FUN_000810d8",
            "FUN_000810e8",
            "FUN_000810fc",
            "FUN_0008113a",
            "FUN_00081176",
            "FUN_0008117a",
            "FUN_00081190",
            "FUN_000811b0",
            "FUN_000811ca",
            "FUN_000811e8",
            "FUN_00081214",
            "FUN_00081244",
            "FUN_00081248",
            "FUN_0008125a",
            "FUN_00081276",
            "FUN_000812a0",
            "FUN_000812b8",
            "FUN_0008130c",
            "FUN_00081348",
            "FUN_0008136c",
            "FUN_000813dc",
            "FUN_000813e4",
            "FUN_0008142e",
            "FUN_00081438",
            "FUN_0008145c",
            "FUN_00081472",
            "FUN_00081480",
            "FUN_00081496",
            "FUN_000814ae",
            "FUN_000814d0",
            "FUN_000814f6",
            "FUN_0008151c",
            "FUN_00081560",
            "FUN_00081570",
            "FUN_0008159e",
            "FUN_000815b8",
            "FUN_000815de",
            "FUN_000815ec",
            "FUN_00081618",
            "FUN_00081624",
            "FUN_00081684",
            "FUN_000816c8",
            "FUN_000816d8",
            "FUN_000816e4",
            "FUN_000816ec",
            "FUN_000816f8",
            "FUN_00081734",
            "FUN_0008173c",
            "FUN_00081750",
            "FUN_00081778",
            "FUN_000817c8",
            "FUN_000817f0",
            "FUN_00081800",
            "FUN_00081810",
            "FUN_00081d48",
            "FUN_00081e34",
            "FUN_00081f00",
            "FUN_00081f9c",
            "FUN_00081fac",
            "FUN_0008236c",
            "FUN_00082390",
            "FUN_000825cc",
            "FUN_00082688",
            "FUN_000826e8",
            "FUN_000827fc",
            "FUN_00082814",
            "FUN_00082824",
            "FUN_0008289c",
            "FUN_000834f0",
            "FUN_0008356c",
            "FUN_00083630",
            "FUN_000836ec",
            "FUN_000836fc",
            "FUN_00083708",
            "FUN_00083850",
            "FUN_0008387c",
            "FUN_00083888",
            "FUN_00083984",
            "FUN_000839b4",
            "FUN_00083a74",
            "FUN_00083b10",
            "FUN_00083ca8",
            "FUN_00083fbc",
            "FUN_00084004",
            "FUN_0008400c",
            "FUN_00084018",
            "FUN_000840f8",
            "FUN_0008418c",
            "FUN_000841e4",
            "FUN_000841f4",
            "FUN_00084220",
            "FUN_00084244",
            "FUN_0008427c",
            "FUN_0008429c",
            "FUN_000842a4",
            "FUN_0008434c",
            "FUN_0008439c",
            "FUN_000843b8",
            "FUN_000843e0",
            "FUN_00084404",
            "FUN_00084484",
            "FUN_00084494",
            "FUN_000844bc",
            "FUN_000844e0",
            "FUN_00084508",
            "FUN_00084530",
            "FUN_0008455c",
            "FUN_0008458c",
            "FUN_000845c0",
            "FUN_00084860",
            "FUN_20070000"
        ]
    ],
    "locked_functions": []
}