{
    "functions": {
        "FUN_000809b4": {
            "renaming": {
                "FUN_000809b4": "set_value_000809b4",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "flag",
                "*(undefined4 *)(param_1 + 100)": "*(int *)(base_address + 100)",
                "*(undefined4 *)(param_1 + 0x60)": "*(int *)(base_address + 96)"
            },
            "code": "void set_value_000809b4(int base_address, int value, int flag) {\n  if (flag != 0) {\n    *(int *)(base_address + 100) = value;\n    return;\n  }\n  *(int *)(base_address + 96) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000809b4",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "set_value_000809b4"
        },
        "FUN_00081560": {
            "renaming": {
                "String::operator_": "move_string",
                "this": "this_string",
                "rval": "other_string",
                "PTR_": "PTR_",
                "DAT_": "DAT_",
                "FUN_00081560": "move_string_00081560"
            },
            "code": "String* __thiscall move_string_00081560(String* this_string, String* other_string) {\n  if (this_string != other_string) {\n    move(this_string, other_string);\n  }\n  return this_string;\n}",
            "called": [
                "move"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081560",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "move_string_00081560"
        },
        "FUN_00083980": {
            "renaming": {
                "FUN_00083980": "do_nothing_00083980"
            },
            "code": "\nvoid do_nothing_00083980(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083980",
            "calling": [
                "_fclose_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00083980"
        },
        "FUN_00080e6a": {
            "renaming": {
                "FUN_00080e6a": "reset_and_increment_time_tick_if_false_00080e6a",
                "iVar1": "is_false",
                "__false": "__false",
                "tickReset": "tickReset",
                "TimeTick_Increment": "TimeTick_Increment"
            },
            "code": "void reset_and_increment_time_tick_if_false_00080e6a(void)\n{\n  int is_false = __false();\n  if (is_false == 0) {\n    tickReset();\n    TimeTick_Increment();\n    return;\n  }\n  return;\n}",
            "called": [
                "TimeTick_Increment",
                "tickReset",
                "__false"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e6a",
            "calling": [],
            "imported": false,
            "current_name": "reset_and_increment_time_tick_if_false_00080e6a"
        },
        "FUN_00081684": {
            "renaming": {
                "FUN_00081684": "find_bitmask_match_count_00081684",
                "param_1": "data",
                "param_2": "bitmask",
                "param_3": "match_value",
                "param_4": "max_iterations",
                "iVar1": "match_count"
            },
            "code": "int find_bitmask_match_count_00081684(uint *data, uint bitmask, uint match_value, int max_iterations) {\n    int match_count = 0;\n    do {\n        if ((*data & bitmask) != match_value) {\n            int i = max_iterations;\n            do {\n                if ((*data & bitmask) == match_value) {\n                    return match_count;\n                }\n                match_count++;\n            } while (--i);\n            return 0;\n        }\n        max_iterations--;\n        data++;\n    } while (max_iterations);\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081684",
            "calling": [
                "pulseIn"
            ],
            "imported": false,
            "current_name": "find_bitmask_match_count_00081684"
        },
        "FUN_000825cc": {
            "renaming": {
                "FUN_000825cc": "copy_string_000825cc",
                "__dest": "destination",
                "__src": "source",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "puVar3": "source_ptr_1",
                "puVar4": "source_ptr_2",
                "uVar5": "current_int_1",
                "uVar6": "current_int_2",
                "puVar7": "destination_ptr_1",
                "puVar8": "destination_ptr_2",
                "pcVar9": "destination_ptr_1",
                "bVar10": "current_bool"
            },
            "code": "char* copy_string_000825cc(char* destination, char* source) {\n    char current_char;\n    unsigned short current_short;\n    unsigned int* source_ptr_1;\n    unsigned int* source_ptr_2;\n    unsigned int current_int_1;\n    unsigned int current_int_2;\n    unsigned int* destination_ptr_1;\n    unsigned int* destination_ptr_2;\n    bool current_bool;\n\n    destination_ptr_1 = (unsigned int*)destination;\n    if ((((unsigned int)destination ^ (unsigned int)source) & 3) != 0) {\n        do {\n            current_char = *source;\n            *destination_ptr_1 = current_char;\n            source++;\n            destination_ptr_1++;\n        } while (current_char != '\\0');\n        return destination;\n    }\n    if (((unsigned int)source & 3) != 0) {\n        source_ptr_2 = (unsigned int*)source;\n        if (((unsigned int)source & 1) != 0) {\n            source_ptr_2 = (unsigned int*)(source + 1);\n            current_char = *source;\n            destination_ptr_2 = (unsigned int*)(destination + 1);\n            *destination = current_char;\n            if (current_char == '\\0') {\n                return destination;\n            }\n        }\n        source = (char*)source_ptr_2;\n        if (((unsigned int)source_ptr_2 & 2) != 0) {\n            source = (char*)((int)source_ptr_2 + 2);\n            current_short = *(unsigned short*)source_ptr_2;\n            current_bool = (current_short & 0xff) == 0;\n            if (current_bool) {\n                *(char*)destination_ptr_2 = (char)current_short;\n            }\n            else {\n                *(unsigned short*)destination_ptr_2 = current_short;\n                current_bool = (current_short & 0xff00) == 0;\n                destination_ptr_2 = (unsigned int*)((int)destination_ptr_2 + 2);\n            }\n            if (current_bool) {\n                return destination;\n            }\n        }\n    }\n    current_int_1 = *(unsigned int*)source;\n    source_ptr_2 = (unsigned int*)((int)source + 4);\n    destination_ptr_1 = destination_ptr_2;\n    if (((unsigned int)source & 4) != 0) {\n        if ((current_int_1 + 0xfefefeff & ~current_int_1 & 0x80808080) != 0) goto LAB_00082630;\n        destination_ptr_1 = destination_ptr_2 + 1;\n        *destination_ptr_2 = current_int_1;\n        source_ptr_2 = (unsigned int*)((int)source + 8);\n        current_int_1 = *(unsigned int*)((int)source + 4);\n    }\n    while (true) {\n        source_ptr_1 = source_ptr_2 + 1;\n        current_int_2 = *source_ptr_2;\n        destination_ptr_2 = destination_ptr_1;\n        if ((current_int_1 + 0xfefefeff & ~current_int_1 & 0x80808080) != 0) break;\n        destination_ptr_2 = destination_ptr_1 + 1;\n        *destination_ptr_1 = current_int_1;\n        current_int_1 = current_int_2;\n        if ((current_int_2 + 0xfefefeff & ~current_int_2 & 0x80808080) != 0) break;\n        source_ptr_2 = source_ptr_2 + 2;\n        current_int_1 = *source_ptr_1;\n        destination_ptr_1 = destination_ptr_1 + 2;\n        *destination_ptr_2 = current_int_2;\n    }\nLAB_00082630:\n    do {\n        *(char*)destination_ptr_2 = (char)current_int_1;\n        current_int_2 = current_int_1 & 0xff;\n        current_int_1 = current_int_1 >> 8 | current_int_1 << 0x18;\n        destination_ptr_2 = (unsigned int*)((int)destination_ptr_2 + 1);\n    } while (current_int_2 != 0);\n    return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825cc",
            "calling": [
                "copy",
                "concat",
                "move"
            ],
            "imported": false,
            "current_name": "copy_string_000825cc"
        },
        "FUN_00083984": {
            "renaming": {
                "FUN_00083984": "call_global_destructors_00083984",
                "iVar1": "num_destructors",
                "ppcVar2": "destructor_ptr"
            },
            "code": "void call_global_destructors_00083984() {\n  int num_destructors = (int)PTR___fini_array_end_000839b0 - (int)PTR___do_global_dtors_aux_fini_array_entry_000839ac >> 2;\n  if (num_destructors != 0) {\n    code **destructor_ptr = (code **)(PTR___do_global_dtors_aux_fini_array_entry_000839ac + num_destructors * 4);\n    do {\n      num_destructors--;\n      destructor_ptr--;\n      (**destructor_ptr)();\n    } while (num_destructors != 0);\n  }\n  _fini();\n  return;\n}",
            "called": [
                "_fini",
                "__do_global_dtors_aux"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083984",
            "calling": [],
            "imported": false,
            "current_name": "call_global_destructors_00083984"
        },
        "FUN_00080598": {
            "renaming": {
                "FUN_00080598": "handle_servo_timer5_00080598",
                "_timer5": "timer",
                "DAT_000805a4": "servo_position",
                "'\\0'": "null_terminator"
            },
            "code": "void handle_servo_timer5_00080598(void)\\n{\\n  Servo_Handler(timer=5, DAT_000805a4=DAT_000805a4, null_terminator=\"\\0\");\\n  return;\\n}",
            "called": [
                "Servo_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080598",
            "calling": [],
            "imported": false,
            "current_name": "handle_servo_timer5_00080598"
        },
        "FUN_00080aa8": {
            "renaming": {
                "FUN_00080aa8": "set_bit_00080aa8",
                "param_1": "bit_position",
                "uVar1": "bit_mask",
                "DAT_00080ae8": "PTR_DATA"
            },
            "code": "int set_bit_00080aa8(uint bit_position)\n{\n  uint bit_mask;\n  if (bit_position < 45) {\n    if (bit_position < 32) {\n      bit_mask = 1 << (bit_position & 0xff);\n      if ((bit_mask & *(uint *)(DAT_00080ae8 + 0x18)) != bit_mask) {\n        *(uint *)(DAT_00080ae8 + 0x10) = bit_mask;\n      }\n    }\n    else {\n      bit_mask = 1 << (bit_position - 0x20 & 0xff);\n      if ((bit_mask & *(uint *)(DAT_00080ae8 + 0x108)) != bit_mask) {\n        *(uint *)(DAT_00080ae8 + 0x100) = bit_mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aa8",
            "calling": [
                "pinMode",
                "init",
                "init",
                "_initISR"
            ],
            "imported": false,
            "current_name": "set_bit_00080aa8"
        },
        "FUN_00080118": {
            "renaming": {
                "FUN_00080118": "execute_function_if_exists_00080118",
                "param_1": "param_1",
                "param_2": "object",
                "param_3": "param_3",
                "param_4": "param_4",
                "DAT_00080134": "global_flag",
                "PTR_object_7862_0008013c": "object_pointer",
                "PTR__etext_00080140": "end_of_text",
                "DAT_00080144": "function_pointer"
            },
            "code": "void execute_function_if_exists_00080118(int param_1, char* object, int param_3, int param_4)\n{\n  if (DAT_00080134 != 0)\n  {\n    object = PTR_object_7862_0008013c;\n  }\n  \n  if ((*(int *)PTR__etext_00080140 != 0) && (DAT_00080144 != (code *)0x0))\n  {\n    (*DAT_00080144)(PTR__etext_00080140, object, param_3, DAT_00080144, param_4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080118",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "execute_function_if_exists_00080118"
        },
        "FUN_00083a74": {
            "renaming": {
                "FUN_00083a74": "allocate_memory_00083a74",
                "param_1": "heap",
                "param_2": "size",
                "puVar1": "malloc_av",
                "puVar2": "current_mallinfo",
                "iVar3": "sbrk_result",
                "uVar4": "heap_size",
                "iVar5": "required_size",
                "_sbrk_r": "_sbrk_r"
            },
            "code": "int allocate_memory_00083a74(void *heap, int size) {\n  void *malloc_av = PTR___malloc_av__00083b04;\n  void *current_mallinfo = PTR___malloc_current_mallinfo_00083b08;\n  void *sbrk_base = PTR___malloc_sbrk_base_00083b0c;\n  __malloc_lock();\n  uint heap_size = *(uint *)(*(int *)(malloc_av + 8) + 4) & 0xfffffffc;\n  int required_size = ((heap_size - size) + 0xfef & 0xfffff000) - 0x1000;\n  int result = 0;\n  if (0xfff < required_size) {\n    int sbrk_result = _sbrk_r(heap,0);\n    if (sbrk_result == *(int *)(malloc_av + 8) + heap_size) {\n      sbrk_result = _sbrk_r(heap,-required_size);\n      if (sbrk_result != -1) {\n        int current_size = *(int *)current_mallinfo;\n        *(uint *)(*(int *)(malloc_av + 8) + 4) = heap_size - required_size | 1;\n        *(int *)current_mallinfo = current_size - required_size;\n        __malloc_unlock(heap);\n        result = 1;\n      }\n      else {\n        int heap_size_after_sbrk = _sbrk_r(heap,0);\n        uint new_heap_size = heap_size_after_sbrk - *(int *)(malloc_av + 8);\n        if (0xf < (int)new_heap_size) {\n          int sbrk_base_value = *(int *)sbrk_base;\n          *(uint *)(*(int *)(malloc_av + 8) + 4) = new_heap_size | 1;\n          *(int *)current_mallinfo = heap_size_after_sbrk - sbrk_base_value;\n        }\n      }\n    }\n  }\n  __malloc_unlock(heap);\n  return result;\n}",
            "called": [
                "__malloc_lock",
                "__malloc_unlock",
                "_sbrk_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083a74",
            "calling": [
                "_free_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_00083a74"
        },
        "FUN_00080e80": {
            "renaming": {
                "FUN_00080e80": "always_returns_zero_00080e80"
            },
            "code": "int always_returns_zero_00080e80(void) {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e80",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "always_returns_zero_00080e80"
        },
        "FUN_00080d62": {
            "renaming": {
                "FUN_00080d62": "set_default_value_00080d62",
                "param_1": "input_parameter"
            },
            "code": "void set_default_value_00080d62(int input_parameter){\n    *(undefined4 *)(input_parameter + 0x14) = 0xffff;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d62",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "set_default_value_00080d62"
        },
        "FUN_00080e84": {
            "renaming": {
                "FUN_00080e84": "wait_forever_00080e84"
            },
            "code": "void wait_forever_00080e84(void)\n{\n  while(true);\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e84",
            "calling": [
                "SVC_Handler",
                "__halt",
                "PendSV_Handler"
            ],
            "imported": false,
            "current_name": "wait_forever_00080e84"
        },
        "FUN_000814f6": {
            "renaming": {
                "FUN_000814f6::FUN_000814f6": "initialize_buffer",
                "this": "self",
                "cstr": "input_string",
                "length": "input_length",
                "FUN_000814f6": "initialize_buffer_000814f6"
            },
            "code": "initialize_buffer_000814f6 * __thiscall initialize_buffer_000814f6(initialize_buffer_000814f6 *this,char *input_string)\n{\n  size_t input_length;\n  this->buffer = (char *)0x0;\n  this->capacity = 0;\n  this->len = 0;\n  if (input_string != (char *)0x0) {\n    input_length = strlen(input_string);\n    copy(this,input_string,input_length);\n  }\n  return this;\n}",
            "called": [
                "copy",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814f6",
            "calling": [
                "_GLOBAL__sub_I_steering",
                "readStringUntil"
            ],
            "imported": false,
            "current_name": "initialize_buffer_000814f6"
        },
        "FUN_0008397c": {
            "renaming": {
                "FUN_0008397c": "do_nothing_0008397c"
            },
            "code": "\nvoid do_nothing_0008397c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008397c",
            "calling": [
                "_fclose_r"
            ],
            "imported": false,
            "current_name": "do_nothing_0008397c"
        },
        "FUN_00080e88": {
            "renaming": {
                "FUN_00080e88": "allocate_memory_00080e88",
                "incr": "increment",
                "puVar1": "heap_pointer",
                "pcVar2": "allocated_memory"
            },
            "code": "caddr_t allocate_memory_00080e88(int increment)\n{\n  undefined *heap_pointer;\n  caddr_t allocated_memory;\n  \n  heap_pointer = PTR_heap_00080e9c;\n  if (*(int *)PTR_heap_00080e9c == 0) {\n    *(undefined **)PTR_heap_00080e9c = PTR__ebss_00080ea0;\n  }\n  allocated_memory = *(caddr_t *)heap_pointer;\n  *(caddr_t *)heap_pointer = allocated_memory + increment;\n  return allocated_memory;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e88",
            "calling": [
                "_sbrk_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_00080e88"
        },
        "FUN_000836d8": {
            "renaming": {
                "FUN_000836d8": "check_and_register_exit_function_000836d8",
                "DAT_000836e4": "should_register_exit_function",
                "DAT_000836e8": "exit_function_ptr"
            },
            "code": "void check_and_register_exit_function_000836d8(void)\n{\n    if (DAT_000836e4 != 0) {\n        atexit(DAT_000836e8);\n        return;\n    }\n    return;\n}",
            "called": [
                "atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000836d8",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "check_and_register_exit_function_000836d8"
        },
        "FUN_000812b8": {
            "renaming": {
                "__thiscall UARTClass::FUN_000812b8": "send_data",
                "this": "self",
                "uc_data": "data",
                "RingBuffer *pRVar1": "RingBuffer *tx_buffer",
                "uint uVar2": "uint next_head",
                "DAT_00081308": "DAT_CONSTANT",
                "pRVar1->_iTail": "tx_buffer->_iTail",
                "pRVar1->_iHead": "tx_buffer->_iHead",
                "pRVar1->_aucBuffer": "tx_buffer->_aucBuffer",
                "this->_tx_buffer": "self->_tx_buffer",
                "this->_pUart->UART_SR": "self->_pUart->UART_SR",
                "this->_pUart->UART_THR": "self->_pUart->UART_THR",
                "this->_pUart->UART_IER": "self->_pUart->UART_IER",
                "FUN_000812b8": "send_data_000812b8"
            },
            "code": "size_t __thiscall UARTClass::send_data_000812b8(UARTClass *this, uint8_t data) \\n\\\n    {\\n\\\n        RingBuffer *tx_buffer = this->_tx_buffer;\\n\\\n        if (((int)(this->_pUart->UART_SR << 0x1e) < 0) && (tx_buffer->_iTail == tx_buffer->_iHead)) {\\n\\\n            this->_pUart->UART_THR = (uint)data;\\n\\\n        }\\n\\\n        else {\\n\\\n            uint next_head = (DAT_00081308 & tx_buffer->_iHead + 1U);\\n\\\n            if ((int)next_head < 0) {\\n\\\n                next_head = (next_head - 1 | 0xffffff80) + 1;\\n\\\n            }\\n\\\n            do {\\n\\\n            } while (tx_buffer->_iTail == next_head);\\n\\\n            tx_buffer->_aucBuffer[tx_buffer->_iHead] = data;\\n\\\n            this->_tx_buffer->_iHead = next_head;\\n\\\n            this->_pUart->UART_IER = 2;\\n\\\n        }\\n\\\n        return 1;\\n\\\n    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000812b8",
            "calling": [],
            "imported": false,
            "current_name": "send_data_000812b8"
        },
        "FUN_00081570": {
            "renaming": {
                "String::FUN_00081570": "string_reserve_and_append",
                "*this": "this",
                "cstr": "string_to_append",
                "length": "length",
                "size": "new_size",
                "uVar1": "success",
                "FUN_00081570": "string_reserve_and_append_00081570"
            },
            "code": "uchar __thiscall string_reserve_and_append_00081570(String *this, char *string_to_append, uint length) {\n  uchar success = 1;\n  uint new_size;\n  if (string_to_append == NULL) {\n    return 0;\n  }\n  if (length != 0) {\n    new_size = this->length + length;\n    success = reserve(this, new_size);\n    if (success == 0) {\n      return 0;\n    }\n    strcpy(this->buffer + this->length, string_to_append);\n    this->length = new_size;\n  }\n  return 1;\n}",
            "called": [
                "strcpy",
                "reserve"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081570",
            "calling": [
                "concat"
            ],
            "imported": false,
            "current_name": "string_reserve_and_append_00081570"
        },
        "FUN_000803fc": {
            "renaming": {
                "FUN_000803fc": "configure_timer_000803fc",
                "tc": "timer",
                "channel": "channel",
                "id": "peripheral_id",
                "irqn": "irqn",
                "pmc_enable_periph_clk": "enable_peripheral_clock",
                "TC_Configure": "configure_timer_mode",
                "TC_SetRA": "set_register_a_value",
                "DAT_00080448": "interrupt_register_base_address",
                "tc->TC_CHANNEL[channel].TC_IER": "timer_channel_interrupt_enable_register",
                "TC_Start": "start_timer"
            },
            "code": "void configure_timer_000803fc(Tc *timer, uint32_t channel, uint32_t peripheral_id, IRQn_Type irqn){\n    pmc_enable_periph_clk(peripheral_id);\n    TC_Configure(timer, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC | TC_CMR_TCCLKS_TIMER_CLOCK4);\n    TC_SetRA(timer, channel, 0xA41);\n    uint32_t* interrupt_register = (uint32_t*)(DAT_00080448 + ((uint)(int)irqn >> 5) * 4);\n    *interrupt_register = 1 << ((int)irqn & 0x1fU);\n    timer->TC_CHANNEL[channel].TC_IER = TC_IER_CPCS;\n    TC_Start(timer, channel);\n    return;\n}",
            "called": [
                "TC_Start",
                "pmc_enable_periph_clk",
                "TC_Configure",
                "TC_SetRA"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000803fc",
            "calling": [
                "attach"
            ],
            "imported": false,
            "current_name": "configure_timer_000803fc"
        },
        "FUN_00083630": {
            "renaming": {
                "FUN_00083630": "add_to_buffer_00083630",
                "param_1": "buffer_size",
                "param_2": "data",
                "param_3": "flag",
                "param_4": "additional_data",
                "puVar1": "buffer",
                "uVar2": "buffer_index",
                "iVar3": "global_impure_ptr",
                "uVar4": "bit_flag",
                "new_buffer": "new_buffer"
            },
            "code": "int add_to_buffer_00083630(int buffer_size, int data, int flag, int additional_data) {\n  int global_impure_ptr = *(int*)PTR__global_impure_ptr_000836d0;\n  undefined4 *buffer = *(undefined4 **)(global_impure_ptr + 0x148);\n  if (buffer == (undefined4 *)0x0) {\n    buffer = (undefined4 *)(global_impure_ptr + 0x14c);\n    *(undefined4 **)(global_impure_ptr + 0x148) = buffer;\n  }\n  uint buffer_index = buffer[1];\n  if (buffer_index > 31) {\n    if (DAT_000836d4 != 0) {\n      undefined4 *new_buffer = (undefined4 *)malloc(400);\n      if (new_buffer != (undefined4 *)0x0) {\n        *new_buffer = *(undefined4 *)(global_impure_ptr + 0x148);\n        new_buffer[1] = 0;\n        buffer_index = 0;\n        *(undefined4 **)(global_impure_ptr + 0x148) = new_buffer;\n        new_buffer[0x62] = 0;\n        new_buffer[99] = 0;\n        goto LAB_00083686;\n      }\n    }\n    return 0xffffffff;\n  }\nLAB_00083686:\n  if (buffer_size != 0) {\n    uint bit_flag = 1 << (buffer_index & 0xff);\n    buffer[buffer_index + 0x22] = flag;\n    buffer[0x62] = buffer[0x62] | bit_flag;\n    buffer[buffer_index + 0x42] = additional_data;\n    if (buffer_size == 2) {\n      buffer[99] = bit_flag | buffer[99];\n    }\n  }\n  buffer[1] = buffer_index + 1;\n  buffer[buffer_index + 2] = data;\n  return 0;\n}",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083630",
            "calling": [
                "__cxa_atexit",
                "atexit"
            ],
            "imported": false,
            "current_name": "add_to_buffer_00083630"
        },
        "FUN_00081214": {
            "renaming": {
                "FUN_00081214": "read_until_terminator_00081214",
                "this": "stream",
                "terminator": "terminator",
                "iVar1": "current_char",
                "__return_storage_ptr__": "__return_storage_ptr__",
                "PTR_DAT_00081240": "PTR_DAT_00081240"
            },
            "code": "String* __thiscall read_until_terminator_00081214(String* __return_storage_ptr__, Stream* stream, char terminator)\n{\n  int current_char;\n  String::String(__return_storage_ptr__, PTR_DAT_00081240);\n  while(true)\n  {\n    current_char = timedRead(stream);\n    if(current_char < 0 || current_char == terminator)\n    {\n      break;\n    }\n    String::concat(__return_storage_ptr__, (char)current_char);\n  }\n  return __return_storage_ptr__;\n}",
            "called": [
                "concat",
                "String",
                "timedRead"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081214",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "read_until_terminator_00081214"
        },
        "FUN_0008439c": {
            "renaming": {
                "FUN_0008439c": "write_byte_or_return_error_code_0008439c",
                "param_1": "buffer",
                "param_2": "byte",
                "param_3": "buffer_size",
                "*param_1": "*buffer",
                "*param_2": "*byte"
            },
            "code": "int write_byte_or_return_error_code_0008439c(int* buffer, unsigned char byte, uint buffer_size) {\n    if (buffer == NULL) {\n        return 0;\n    }\n    if (buffer_size < 256) {\n        *buffer = (int)byte;\n        return 1;\n    }\n    *buffer = 138;\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008439c",
            "calling": [
                "_wcrtomb_r"
            ],
            "imported": false,
            "current_name": "write_byte_or_return_error_code_0008439c"
        },
        "FUN_0008427c": {
            "renaming": {
                "FUN_0008427c": "seek_and_update_0008427c",
                "param_1": "file_descriptor",
                "param_2": "params",
                "iVar1": "seek_position",
                "uVar2": "updated_short"
            },
            "code": "void seek_and_update_0008427c(int file_descriptor, int* params) {\n  int seek_position = _lseek_r(file_descriptor, (int)*(short *)(params + 0xe));\n  ushort updated_short;\n  if (seek_position == -1) {\n    updated_short = *(ushort *)(params + 0xc) & 0xefff;\n  }\n  else {\n    updated_short = *(ushort *)(params + 0xc) | 0x1000;\n    *(int *)(params + 0x50) = seek_position;\n  }\n  *(ushort *)(params + 0xc) = updated_short;\n  return;\n}",
            "called": [
                "_lseek_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008427c",
            "calling": [],
            "imported": false,
            "current_name": "seek_and_update_0008427c"
        },
        "FUN_000809be": {
            "renaming": {
                "FUN_000809be": "update_flags_000809be",
                "param_1": "flags_address",
                "param_2": "operation_type",
                "param_3": "new_flag_value",
                "uVar1": "current_flags"
            },
            "code": "void update_flags_000809be(int flags_address, uint8_t operation_type, uint32_t new_flag_value)\n{\n  uint32_t current_flags = *(uint32_t *)(flags_address + 0x70);\n  switch(operation_type) {\n    case 0:\n    case 3:\n    case 4:\n    case 5:\n      return;\n    case 1:\n      current_flags = current_flags & ~new_flag_value;\n      break;\n    case 2:\n      current_flags = current_flags | new_flag_value;\n      break;\n    default:\n      goto switchD_000809c4_caseD_6;\n  }\n  *(uint32_t *)(flags_address + 0x70) = current_flags;\nswitchD_000809c4_caseD_6:\n  *(uint32_t *)(flags_address + 0x44) = new_flag_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000809be",
            "calling": [
                "PIO_Configure"
            ],
            "imported": false,
            "current_name": "update_flags_000809be"
        },
        "FUN_00080d70": {
            "renaming": {
                "FUN_00080d70": "call_global_isr_if_exists_00080d70",
                "PTR_gpf_isr_00080d7c": "global_isr_ptr"
            },
            "code": "void call_global_isr_if_exists_00080d70(void)\n{\n  code **PTR_gpf_isr_00080d7c = *(code **)(PTR_gpf_isr_00080d7c);\n  if (PTR_gpf_isr_00080d7c != NULL) {\n    (*PTR_gpf_isr_00080d7c)();\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d70",
            "calling": [],
            "imported": false,
            "current_name": "call_global_isr_if_exists_00080d70"
        },
        "FUN_000840f8": {
            "renaming": {
                "reverse_and_find": "reverse_and_find",
                "__s": "string",
                "__c": "character",
                "__n": "size",
                "puVar1": "last_word",
                "puVar2": "current_word",
                "uVar3": "character_mask",
                "uVar4": "difference",
                "pbVar5": "current_byte",
                "pbVar6": "last_byte",
                "uVar7": "character_mask_shifted",
                "bVar8": "found_character",
                "FUN_000840f8": "reverse_and_find_000840f8"
            },
            "code": "void * reverse_and_find_000840f8(void *string, int character, size_t size) {\n  uint *current_word;\n  uint *last_word;\n  uint character_mask;\n  uint character_mask_shifted;\n  byte *current_byte;\n  byte *last_byte;\n  uint difference;\n  bool found_character;\n  character_mask = character & 0xff;\n  if (((uint)string & 3) == 0) {\n    current_word = (uint *)string;\n    last_word = (uint *)size;\n    if ((uint *)0x3 < size) {\n      character_mask_shifted = character_mask | character_mask << 8 | character_mask << 16 | character_mask << 24;\n      do {\n        difference = *current_word ^ character_mask_shifted;\n        current_word = (uint *)string;\n        last_word = (uint *)size;\n        if ((difference + 0xfefefeff & ~difference & 0x80808080) != 0) break;\n        size -= 4;\n        current_word = (uint *)((int)string + 4);\n        string = (uint *)((int)string + 4);\n        last_word = (uint *)size;\n      } while ((uint *)0x3 < size);\n    }\n    string = last_word;\n    last_byte = (byte *)((int)string - 1);\n    if (((uint *)string != (uint *)0x0) && (string = current_word, *(byte *)current_word != character_mask)) {\n      current_byte = (byte *)0x0;\n      do {\n        string = (void *)((int)string + 1);\n        found_character = current_byte == last_byte;\n        current_byte = current_byte + 1;\n        if (found_character) goto LAB_00084150;\n      } while (*string != character_mask);\n    }\n  }\n  else if (size == 0) {\n    string = (uint *)0x0;\n  }\n  else {\n    if (*string != character_mask) {\n      current_word = (uint *)((int)string + 1);\n      size = (size_t)(size - 1);\n      do {\n        string = current_word;\n        if (((uint)string & 3) == 0) goto LAB_00084128;\n        if ((uint *)size == (uint *)0x0) goto LAB_00084150;\n        current_word = (uint *)((int)string + 1);\n        size = (size_t)(size + -1);\n      } while (*string != character_mask);\n    }\n  }\n  return string;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000840f8",
            "calling": [
                "_vfiprintf_r",
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "reverse_and_find_000840f8"
        },
        "FUN_000813e4": {
            "renaming": {
                "FUN_000813e4": "receive_data_000813e4",
                "pRVar1": "receive_buffer",
                "RVar2": "status_register"
            },
            "code": "void __thiscall UARTClass::receive_data_000813e4(UARTClass *this)\n{\n    RingBuffer *receive_buffer;\n    RoReg status_register;\n\n    status_register = this->_pUart->UART_SR;\n\n    if (status_register & (1 << 0)) {\n        RingBuffer::store_char(this->_rx_buffer, (uint8_t)this->_pUart->UART_RHR);\n    }\n\n    if (status_register & (1 << 1)) {\n        receive_buffer = this->_tx_buffer;\n\n        if (receive_buffer->_iTail != receive_buffer->_iHead) {\n            this->_pUart->UART_THR = (uint)receive_buffer->_aucBuffer[receive_buffer->_iTail];\n            receive_buffer->_iTail = (receive_buffer->_iTail + 1) & 0x7F;\n        }\n        else {\n            this->_pUart->UART_IDR = 2;\n        }\n    }\n}",
            "called": [
                "store_char"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813e4",
            "calling": [
                "USART1_Handler",
                "USART3_Handler",
                "USART0_Handler",
                "UART_Handler"
            ],
            "imported": false,
            "current_name": "receive_data_000813e4"
        },
        "FUN_0008289c": {
            "renaming": {
                "FUN_0008289c": "FUNC_0008289c"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_0008289c(int param_1,int param_2,byte *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  undefined *puVar6;\n  int iVar7;\n  byte *pbVar8;\n  byte ********ppppppppbVar9;\n  int *piVar10;\n  int iVar11;\n  byte **ppbVar12;\n  char cVar13;\n  byte *******pppppppbVar14;\n  uint uVar15;\n  int **ppiVar16;\n  uint uVar17;\n  uint uVar18;\n  byte *******pppppppbVar19;\n  byte *******pppppppbVar20;\n  byte ********ppppppppbVar21;\n  byte *******pppppppbVar22;\n  int *piVar23;\n  byte *******pppppppbVar24;\n  byte *******pppppppbVar25;\n  uint uVar26;\n  int *piVar27;\n  undefined4 uVar28;\n  byte ********__s;\n  bool bVar29;\n  longlong lVar30;\n  byte *******local_dc;\n  byte *******local_d4;\n  int **local_c8;\n  byte *local_c4;\n  undefined *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  byte ********local_9c;\n  byte *******local_98;\n  byte *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  byte *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    __sinit();\n  }\n  uVar17 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar17 = uVar17 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar17;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar17 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar17 & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    iVar11 = __swsetup_r(param_1,param_2);\n    if (iVar11 != 0) {\n      return (byte *)0xffffffff;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    pbVar8 = (byte *)__sbprintf(param_1,param_2,param_3,param_4);\n    return pbVar8;\n  }\nLAB_000828ee:\n  local_c0 = (undefined *)0x0;\n  local_94 = (byte *******)0x0;\n  local_98 = (byte *******)0x0;\n  local_c4 = (byte *)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  local_c8 = param_4;\n  local_9c = (byte ********)local_68;\nLAB_00082902:\n  pppppppbVar14 = param_3;\n  if ((*(byte *)param_3 != 0) && (*(byte *)param_3 != 0x25)) {\n    do {\n      pppppppbVar14 = (byte *******)((int)pppppppbVar14 + 1);\n      if (*(byte *)pppppppbVar14 == 0) break;\n    } while (*(byte *)pppppppbVar14 != 0x25);\n    pppppppbVar25 = (byte *******)((int)pppppppbVar14 - (int)param_3);\n    if (pppppppbVar25 != (byte *******)0x0) {\n      local_98 = (byte *******)((int)local_98 + 1);\n      local_94 = (byte *******)((int)local_94 + (int)pppppppbVar25);\n      *ppppppppbVar9 = param_3;\n      ppppppppbVar9[1] = pppppppbVar25;\n      if ((int)local_98 < 8) {\n        ppppppppbVar9 = ppppppppbVar9 + 2;\n      }\n      else {\n        if (local_94 == (byte *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppbVar25;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n          goto LAB_00082952;\n        }\n        iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n        ppppppppbVar9 = (byte ********)local_68;\n        if (iVar11 != 0) goto LAB_00083142;\n      }\n      local_c4 = local_c4 + (int)pppppppbVar25;\n    }\n  }\nLAB_00082952:\n  if (*(byte *)pppppppbVar14 != 0) {\n    local_a1 = '\\0';\n    uVar18 = (uint)*(byte *)((int)pppppppbVar14 + 1);\n    uVar17 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar29 = false;\n    pppppppbVar25 = (byte *******)0x0;\n    local_d4 = (byte *******)0xffffffff;\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\nLAB_00082976:\n    param_3 = (byte *******)((int)param_3 + 1);\nLAB_0008297a:\n    switch(uVar18) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (uVar18 != 0) {\n        local_dc = (byte *******)0x1;\n        local_d4 = (byte *******)0x1;\n        __s = (byte ********)&local_90;\n        local_90 = (char)uVar18;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      bVar3 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2a:\n      pppppppbVar25 = (byte *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppbVar25 < 0) {\n        pppppppbVar25 = (byte *******)-(int)pppppppbVar25;\n        goto switchD_00082984_caseD_2d;\n      }\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2b:\n      uVar18 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      uVar17 = uVar17 | 4;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2e:\n      uVar18 = (uint)*(byte *)param_3;\n      pppppppbVar14 = (byte *******)((int)param_3 + 1);\n      if (uVar18 == 0x2a) {\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (byte *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppbVar14;\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      uVar15 = uVar18 - 0x30;\n      if (uVar15 < 10) {\n        uVar26 = 0;\n        do {\n          param_3 = (byte *******)((int)pppppppbVar14 + 1);\n          uVar18 = (uint)*(byte *)pppppppbVar14;\n          uVar26 = uVar15 + uVar26 * 10;\n          uVar15 = uVar18 - 0x30;\n          pppppppbVar14 = param_3;\n        } while (uVar15 < 10);\n        local_d4 = (byte *******)(uVar26 | (int)uVar26 >> 0x1f);\n      }\n      else {\n        local_d4 = (byte *******)0x0;\n        param_3 = pppppppbVar14;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      uVar17 = uVar17 | 0x80;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar23 = *local_c8;\n      piVar27 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      iVar11 = (uint)bVar2 << 4;\n      iVar7 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar7 = (uint)bVar29 << 6, bVar29 != 0)) {\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        iVar11 = iVar7;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((bVar2) || (bVar29 == false)) {\n        iVar11 = 1;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar11 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = PTR_s_0123456789ABCDEF_00082e50;\n      if (bVar1 == false) goto LAB_00082efa;\nLAB_00082d1a:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      goto LAB_00082d2e;\n    case 99:\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (byte *******)0x1;\n      local_90 = SUB41(piVar23,0);\n      local_d4 = (byte *******)0x1;\n      __s = (byte ********)&local_90;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((bVar2 == false) && (bVar29 != false)) {\n        piVar23 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)piVar27 < 0) {\n        bVar29 = piVar23 != (int *)0x0;\n        piVar23 = (int *)-(int)piVar23;\n        piVar27 = (int *)(-(int)piVar27 - (uint)bVar29);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar11 = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)local_d4) {\n        uVar17 = uVar17 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar18 = (uint)piVar23 | (uint)piVar27;\n      iVar11 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082adc;\n    case 0x68:\n      bVar29 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x6c:\n      uVar18 = (uint)*(byte *)param_3;\n      if (uVar18 == 0x6c) {\n        bVar1 = true;\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (byte *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar29) {\n            piVar23 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar23 = (short)local_c4;\n          }\n          else {\n            ppbVar12 = (byte **)*local_c8;\n            local_c8 = local_c8 + 1;\n            *ppbVar12 = local_c4;\n          }\n        }\n        else {\n          ppbVar12 = (byte **)*local_c8;\n          local_c8 = local_c8 + 1;\n          *ppbVar12 = local_c4;\n        }\n      }\n      else {\n        ppbVar12 = (byte **)*local_c8;\n        local_c8 = local_c8 + 1;\n        *ppbVar12 = local_c4;\n        ppbVar12[1] = (byte *)((int)local_c4 >> 0x1f);\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 0;\n      break;\n    case 0x70:\n      local_c0 = PTR_s_0123456789abcdef_00083128;\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar27 = (int *)0x0;\n      local_a0 = 0x30;\n      iVar11 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x73:\n      __s = (byte ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (__s != (byte ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)strlen((char *)__s);\n          pppppppbVar14 = (byte *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          pppppppbVar14 = (byte *******)memchr(__s,0,(size_t)local_d4);\n          cVar4 = local_a1;\n          if (pppppppbVar14 != (byte *******)0x0) {\n            pppppppbVar20 = (byte *******)((int)pppppppbVar14 - (int)__s);\n            if ((int)local_d4 <= (int)(byte *******)((int)pppppppbVar14 - (int)__s)) {\n              pppppppbVar20 = local_d4;\n            }\n            pppppppbVar14 = (byte *******)0x0;\n            local_d4 = pppppppbVar20;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((byte *******)0x5 < local_d4) {\n        local_d4 = (byte *******)0x6;\n      }\n      local_dc = (byte *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      __s = (byte ********)PTR_s__null__000834e8;\nLAB_00082d76:\n      local_a1 = '\\0';\n      pppppppbVar14 = (byte *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!bVar1) goto LAB_00082ce0;\nLAB_00082bc6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 1;\n      break;\n    case 0x78:\n      local_c0 = PTR_s_0123456789abcdef_00083128;\n      if (bVar1 != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((bVar2 == false) && (bVar29 != false)) {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((bVar3) && (((uint)piVar23 | (uint)piVar27) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar11 = 2;\n        local_9f = (char)uVar18;\n      }\n      else {\n        iVar11 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082ace:\n    if (-1 < (int)local_d4) {\n      uVar17 = uVar17 & 0xffffff7f;\n    }\n    uVar18 = (uint)piVar23 | (uint)piVar27;\njoined_r0x00082adc:\n    lVar30 = CONCAT44(piVar27,piVar23);\n    pppppppbVar14 = local_d4;\n    if ((uVar18 == 0) && (local_d4 == (byte *******)0x0)) {\n      __s = (byte ********)local_68;\n      if ((iVar11 != 0) || (!bVar3)) goto LAB_00082b04;\n      __s = (byte ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082afe;\n    }\n    if (iVar11 == 1) {\n      if (piVar27 != (int *)0x0 || (int *)0x9 < piVar23) {\n        ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n        do {\n          __s = ppppppppbVar21;\n          uVar28 = (undefined4)((ulonglong)lVar30 >> 0x20);\n          cVar13 = '\\n';\n          __aeabi_uldivmod((int)lVar30,uVar28,10,0);\n          *(char *)__s = cVar13 + '0';\n          lVar30 = __aeabi_uldivmod((int)lVar30,uVar28,10,0);\n          ppppppppbVar21 = (byte ********)((int)__s + -1);\n        } while (lVar30 != 0);\n        local_d4 = (byte *******)((int)local_68 - (int)__s);\n        goto LAB_00082b04;\n      }\n      local_69 = (char)piVar23 + '0';\n      __s = (byte ********)(&cStack_6a + 1);\n      goto LAB_00083282;\n    }\n    ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n    if (iVar11 != 2) goto LAB_000830e2;\n    do {\n      __s = ppppppppbVar21;\n      uVar18 = (uint)piVar23 & 0xf;\n      piVar23 = (int *)((uint)piVar23 >> 4 | (int)piVar27 << 0x1c);\n      piVar27 = (int *)((uint)piVar27 >> 4);\n      *(undefined *)__s = local_c0[uVar18];\n      ppppppppbVar21 = (byte ********)((int)__s + -1);\n    } while (((uint)piVar23 | (uint)piVar27) != 0);\n    local_d4 = (byte *******)((int)local_68 - (int)__s);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (local_94 != (byte *******)0x0) {\n    __sprint_r_part_0(param_1,param_2,&local_9c);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return (byte *)0xffffffff;\n  }\n  return local_c4;\nLAB_000830e2:\n  do {\n    __s = ppppppppbVar21;\n    piVar10 = (int *)((uint)piVar23 >> 3 | (int)piVar27 << 0x1d);\n    piVar27 = (int *)((uint)piVar27 >> 3);\n    iVar11 = ((uint)piVar23 & 7) + 0x30;\n    *(char *)__s = (char)iVar11;\n    ppppppppbVar21 = (byte ********)((int)__s + -1);\n    piVar23 = piVar10;\n  } while (((uint)piVar10 | (uint)piVar27) != 0);\n  if (bVar3) {\n    if (iVar11 == 0x30) {\nLAB_00082afe:\n      local_d4 = (byte *******)((int)local_68 - (int)__s);\n    }\n    else {\n      *(undefined *)((int)__s + -1) = 0x30;\n      __s = ppppppppbVar21;\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar21);\n    }\n  }\n  else {\nLAB_00083282:\n    local_d4 = (byte *******)((int)local_68 - (int)__s);\n  }\nLAB_00082b04:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppbVar14) {\n    local_dc = pppppppbVar14;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (byte *******)((int)local_dc + 1);\n  }\nLAB_00082b1e:\n  pppppppbVar20 = (byte *******)PTR_blanks_6717_00082e4c;\n  if (bVar5) {\n    local_dc = (byte *******)((int)local_dc + 2);\n  }\n  if ((uVar17 == 0) &&\n     (pppppppbVar22 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar22)) {\n    if ((int)pppppppbVar22 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar20 = (byte *******)PTR_blanks_6717_00083474;\n    }\n    else {\n      do {\n        pppppppbVar24 = pppppppbVar22;\n        pppppppbVar22 = (byte *******)((int)local_98 + 1);\n        local_94 = local_94 + 4;\n        *ppppppppbVar9 = pppppppbVar20;\n        ppppppppbVar9[1] = (byte *******)0x10;\n        if ((int)pppppppbVar22 < 8) {\n          pppppppbVar19 = (byte *******)((int)local_98 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\n          local_98 = pppppppbVar22;\n        }\n        else if (local_94 == (byte *******)0x0) {\n          pppppppbVar19 = (byte *******)0x1;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n        }\n        else {\n          local_98 = pppppppbVar22;\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 != 0) goto LAB_00083142;\n          pppppppbVar19 = (byte *******)((int)local_98 + 1);\n          ppppppppbVar9 = (byte ********)local_68;\n        }\n        pppppppbVar22 = pppppppbVar24 + -4;\n      } while (0x10 < (int)pppppppbVar22);\n      pppppppbVar22 = pppppppbVar24 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar22);\n    *ppppppppbVar9 = pppppppbVar20;\n    ppppppppbVar9[1] = pppppppbVar22;\n    local_98 = pppppppbVar19;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar19 = (byte *******)((int)pppppppbVar19 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar19 = (byte *******)0x1;\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  else {\n    pppppppbVar19 = (byte *******)((int)local_98 + 1);\n  }\n  pppppppbVar20 = pppppppbVar19;\n  if (local_a1 != '\\0') {\n    local_94 = (byte *******)((int)local_94 + 1);\n    pppppppbVar20 = (byte *******)0x1;\n    *ppppppppbVar9 = (byte *******)&local_a1;\n    ppppppppbVar9[1] = (byte *******)0x1;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 1);\n      local_98 = pppppppbVar19;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else {\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n      if (local_94 != (byte *******)0x0) {\n        local_98 = pppppppbVar19;\n        iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n        if (iVar11 != 0) goto LAB_00083142;\n        pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      }\n    }\n  }\n  pppppppbVar22 = pppppppbVar20;\n  pppppppbVar19 = local_98;\n  if (bVar5) {\n    local_94 = (byte *******)((int)local_94 + 2);\n    *ppppppppbVar9 = (byte *******)&local_a0;\n    ppppppppbVar9[1] = (byte *******)0x2;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar22 = (byte *******)((int)pppppppbVar20 + 1);\n      pppppppbVar19 = pppppppbVar20;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar22 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar20;\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar22 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_zeroes_6718_00083470;\n  pppppppbVar20 = pppppppbVar22;\n  if ((uVar17 == 0x80) &&\n     (pppppppbVar24 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar24)) {\n    if (0x10 < (int)pppppppbVar24) {\n      do {\n        while( true ) {\n          pppppppbVar20 = pppppppbVar24;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar22 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_000831f2:\n          pppppppbVar19 = local_98;\n          pppppppbVar24 = pppppppbVar20 + -4;\n          if ((int)(pppppppbVar20 + -4) < 0x11) goto LAB_00083218;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar22 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar22 = (byte *******)0x1;\n        pppppppbVar19 = local_94;\n        pppppppbVar24 = pppppppbVar20 + -4;\n        ppppppppbVar9 = (byte ********)local_68;\n      } while (0x10 < (int)(pppppppbVar20 + -4));\nLAB_00083218:\n      pppppppbVar24 = pppppppbVar20 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar24);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar24;\n    if ((int)pppppppbVar22 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar22 + 1);\n      pppppppbVar19 = pppppppbVar22;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar20 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar22;\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_zeroes_6718_0008312c;\n  pppppppbVar14 = (byte *******)((int)pppppppbVar14 - (int)local_d4);\n  ppppppppbVar21 = (byte ********)local_68;\n  if ((int)pppppppbVar14 < 1) {\nLAB_0008302a:\n    local_94 = (byte *******)((int)local_94 + (int)local_d4);\n    *ppppppppbVar9 = (byte *******)__s;\n    ppppppppbVar9[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = pppppppbVar20;\n    if ((int)pppppppbVar20 < 8) goto LAB_000831be;\n    local_98 = local_94;\n    if ((local_94 != (byte *******)0x0) &&\n       (local_98 = pppppppbVar20, iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c), iVar11 != 0\n       )) goto LAB_00083142;\n  }\n  else {\n    if (0x10 < (int)pppppppbVar14) {\n      do {\n        while( true ) {\n          pppppppbVar22 = pppppppbVar14;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_00082fe6:\n          pppppppbVar19 = local_98;\n          pppppppbVar14 = pppppppbVar22 + -4;\n          if ((int)(pppppppbVar22 + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar20 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar20 = (byte *******)0x1;\n        ppppppppbVar9 = (byte ********)local_68;\n        pppppppbVar19 = local_94;\n        pppppppbVar14 = pppppppbVar22 + -4;\n      } while (0x10 < (int)(pppppppbVar22 + -4));\nLAB_0008300e:\n      pppppppbVar14 = pppppppbVar22 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar14);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar14;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar20 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n      goto LAB_0008302a;\n    }\n    if (local_94 != (byte *******)0x0) {\n      local_98 = pppppppbVar20;\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n      goto LAB_0008302a;\n    }\n    local_64[0] = local_d4;\n    local_98 = (byte *******)0x1;\n    ppppppppbVar9 = (byte ********)local_68;\n    local_68 = (undefined  [4])__s;\nLAB_000831be:\n    ppppppppbVar21 = ppppppppbVar9 + 2;\n    local_94 = local_d4;\n  }\n  pppppppbVar14 = (byte *******)PTR_blanks_6717_00083130;\n  if (((uVar17 & 4) != 0) &&\n     (pppppppbVar20 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar20)) {\n    pppppppbVar22 = local_98;\n    if ((int)pppppppbVar20 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar14 = (byte *******)PTR_blanks_6717_000834ec;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = (byte *******)((int)pppppppbVar22 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar21 = pppppppbVar14;\n          ppppppppbVar21[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar19 = (byte *******)((int)pppppppbVar22 + 2);\n          ppppppppbVar21 = ppppppppbVar21 + 2;\nLAB_0008307a:\n          pppppppbVar20 = pppppppbVar20 + -4;\n          pppppppbVar22 = local_98;\n          if ((int)pppppppbVar20 < 0x11) goto LAB_000830a2;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar19 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar21 = (byte ********)local_68;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar20 = pppppppbVar20 + -4;\n        pppppppbVar19 = (byte *******)0x1;\n        pppppppbVar22 = local_94;\n        ppppppppbVar21 = (byte ********)local_68;\n      } while (0x10 < (int)pppppppbVar20);\n    }\nLAB_000830a2:\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar20);\n    *ppppppppbVar21 = pppppppbVar14;\n    ppppppppbVar21[1] = pppppppbVar20;\n    local_98 = pppppppbVar19;\n    if (7 < (int)pppppppbVar19) {\n      if (local_94 == (byte *******)0x0) {\n        if ((int)local_dc < (int)pppppppbVar25) {\n          local_dc = pppppppbVar25;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083186;\n      }\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)local_dc < (int)pppppppbVar25) {\n    local_dc = pppppppbVar25;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (byte *******)0x0) &&\n     (iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c), iVar11 != 0)) goto LAB_00083142;\nLAB_00083186:\n  local_98 = (byte *******)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  uVar15 = uVar18 - 0x30;\n  pppppppbVar25 = (byte *******)0x0;\n  pppppppbVar14 = param_3;\n  do {\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\n    uVar18 = (uint)*(byte *)pppppppbVar14;\n    pppppppbVar25 = (byte *******)(uVar15 + (int)pppppppbVar25 * 10);\n    uVar15 = uVar18 - 0x30;\n    pppppppbVar14 = param_3;\n  } while (uVar15 < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  uVar18 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "called": [
                "__sbprintf",
                "__aeabi_uldivmod",
                "__swsetup_r",
                "strlen",
                "__sprint_r.part.0",
                "memchr",
                "__sinit"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0008289c",
            "calling": [
                "__sbprintf",
                "iprintf",
                "fiprintf"
            ],
            "imported": false,
            "current_name": "FUNC_0008289c"
        },
        "FUN_00081d48": {
            "renaming": {
                "FUN_00081d48": "copy_memory_00081d48",
                "__dest": "destination",
                "__src": "source",
                "__n": "num_bytes",
                "puVar1": "d",
                "puVar2": "dest",
                "puVar3": "dest",
                "puVar4": "d",
                "puVar5": "src",
                "puVar6": "s",
                "uVar7": "bytes_remaining",
                "uVar8": "bytes_remaining",
                "bVar9": "loop_condition"
            },
            "code": "void * copy_memory_00081d48(void *destination, void *source, size_t num_bytes) {\n    uint32_t *dest = (uint32_t *)destination;\n    uint32_t *src = (uint32_t *)source;\n    if ((((uint32_t)source | (uint32_t)destination) & 3) != 0) {\n        if (num_bytes < 8) {\n            uint8_t *d = (uint8_t *)destination;\n            uint8_t *s = (uint8_t *)source;\n            while (num_bytes--) {\n                *d++ = *s++;\n            }\n            return destination;\n        }\n        if ((((uint32_t)source & 3) != 0) && (((uint32_t)destination & 3) != 0)) {\n            uint32_t n_align = 4 - ((uint32_t)destination & 3);\n            num_bytes -= n_align;\n            while (n_align--) {\n                *(uint8_t *)dest++ = *(uint8_t *)src++;\n            }\n        }\n    }\n    while (num_bytes >= 16) {\n        *dest++ = *src++;\n        *dest++ = *src++;\n        *dest++ = *src++;\n        *dest++ = *src++;\n        num_bytes -= 16;\n    }\n    if (num_bytes & 8) {\n        *dest++ = *src++;\n        *dest++ = *src++;\n    }\n    if (num_bytes & 4) {\n        *dest++ = *src++;\n    }\n    if (num_bytes & 2) {\n        *(uint16_t *)dest = *(uint16_t *)src;\n    }\n    if (num_bytes & 1) {\n        *(uint8_t *)dest = *(uint8_t *)src;\n    }\n    return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d48",
            "calling": [
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "copy_memory_00081d48"
        },
        "FUN_00083fbc": {
            "renaming": {
                "FUN_00083fbc": "find_and_execute_code_blocks_00083fbc",
                "param_1": "base_address",
                "param_2": "block",
                "uVar1": "block_result",
                "iVar2": "current_block_address",
                "iVar3": "block_size",
                "uVar4": "result",
                "piVar5": "block_pointer"
            },
            "code": "uint find_and_execute_code_blocks_00083fbc(int base_address, code *block){\n  uint result = 0;\n  int *block_pointer = (int *)(base_address + 0x2e0);\n  if (block_pointer != (int *)0x0) {\n    do {\n      int block_size = block_pointer[1] + -1;\n      int current_block_address = block_pointer[2];\n      if (-1 < block_size) {\n        do {\n          block_size = block_size + -1;\n          if ((1 < *(ushort *)(current_block_address + 0xc)) && (*(short *)(current_block_address + 0xe) != -1)) {\n            uint block_result = (*block)(current_block_address);\n            result = result | block_result;\n          }\n          current_block_address = current_block_address + 0x68;\n        } while (block_size != -1);\n      }\n      block_pointer = (int *)*block_pointer;\n    } while (block_pointer != (int *)0x0);\n    return result;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083fbc",
            "calling": [
                "_cleanup_r"
            ],
            "imported": false,
            "current_name": "find_and_execute_code_blocks_00083fbc"
        },
        "FUN_00084494": {
            "renaming": {
                "FUN_00084494": "file_status_00084494",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "file_stats",
                "puVar1": "errno_ptr",
                "iVar2": "status"
            },
            "code": "void file_status_00084494(int *error_code, int file_descriptor, struct stat *file_stats)\n{\n  int status = 0;\n  int *errno_ptr = PTR_errno_000844b8;\n  *errno_ptr = 0;\n  status = _fstat(file_descriptor, file_stats);\n  if ((status == -1) && (*(int *)errno_ptr != 0)) {\n    *error_code = *(int *)errno_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_fstat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084494",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "file_status_00084494"
        },
        "FUN_00084018": {
            "renaming": {
                "FUN_00084018": "allocate_memory_00084018",
                "param_1": "file_descriptor",
                "param_2": "memory_block",
                "uVar1": "permissions",
                "iVar2": "file_status",
                "iVar3": "allocated_memory",
                "uVar4": "permissions_as_uint",
                "bVar5": "is_regular_file",
                "auStack_54": "stack_buffer",
                "local_50": "file_info"
            },
            "code": "void allocate_memory_00084018(int file_descriptor, int *memory_block) {\n  ushort permissions = *(ushort *)(memory_block + 3);\n  uint permissions_as_uint = (uint)permissions;\n  if ((int)(permissions_as_uint << 0x1e) < 0) {\n    *memory_block = (int)memory_block + 0x43;\n    memory_block[4] = (int)memory_block + 0x43;\n    memory_block[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)memory_block + 0xe)) {\n    int file_status = _fstat_r(file_descriptor,(int)*(short *)((int)memory_block + 0xe),auStack_54);\n    if (-1 < file_status) {\n      bool is_regular_file = (local_50 & 0xf000) == 0x2000;\n      if (((local_50 & 0xf000) == 0x8000) && (memory_block[10] == permissions)) {\n        int block_size = 0x400;\n        *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) | 0x400;\n        memory_block[0x13] = 0x400;\n      }\n      else {\n        int block_size = 0x400;\n        *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) | 0x800;\n      }\n      goto LAB_00084074;\n    }\n    permissions = *(ushort *)(memory_block + 3);\n    permissions_as_uint = (uint)permissions;\n  }\n  *(ushort *)(memory_block + 3) = permissions | 0x800;\n  int block_size;\n  if ((permissions_as_uint & 0x80) == 0) {\n    block_size = 0x400;\n  }\n  else {\n    block_size = 0x40;\n  }\n  bool is_regular_file = false;\nLAB_00084074:\n  int *allocated_memory = _malloc_r(file_descriptor,block_size);\n  permissions = *(ushort *)(memory_block + 3);\n  if (allocated_memory == 0) {\n    if (-1 < (int)((uint)permissions << 0x16)) {\n      *(ushort *)(memory_block + 3) = permissions | 2;\n      *memory_block = (int)memory_block + 0x43;\n      memory_block[4] = (int)memory_block + 0x43;\n      memory_block[5] = 1;\n    }\n  }\n  else {\n    *(undefined4 *)(file_descriptor + 0x3c) = permissions;\n    *(ushort *)(memory_block + 3) = permissions | 0x80;\n    *memory_block = allocated_memory;\n    memory_block[4] = allocated_memory;\n    memory_block[5] = block_size;\n    if ((is_regular_file) && (_isatty_r(file_descriptor,(int)*(short *)((int)memory_block + 0xe)) != 0)) {\n      *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) | 1;\n    }\n  }\n  return;\n}",
            "called": [
                "_malloc_r",
                "_isatty_r",
                "_fstat_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084018",
            "calling": [
                "__swsetup_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_00084018"
        },
        "FUN_000815de": {
            "renaming": {
                "String::FUN_000815de": "extract_long_from_string",
                "this": "str_obj",
                "lVar1": "extracted_long",
                "(char *)0x0": "NULL",
                "buffer": "str",
                "0": "0",
                "FUN_000815de": "extract_long_from_string_000815de"
            },
            "code": "long extract_long_from_string_000815de(String *str_obj)\n{\n  long extracted_long;\n  if (str_obj->buffer != NULL) {\n    extracted_long = atol(str_obj->buffer);\n    return extracted_long;\n  }\n  return 0;\n}",
            "called": [
                "atol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815de",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "extract_long_from_string_000815de"
        },
        "FUN_00080578": {
            "renaming": {
                "FUN_00080578": "servo_handler_timer3_00080578",
                "DAT_00080584": "data",
                "'\\x02'": "value",
                "Servo_Handler": "servo_handler",
                "_timer3": "timer"
            },
            "code": "void servo_handler_timer3_00080578(int timer, int DAT_00080584, char value){\n  Servo_Handler(timer, DAT_00080584, value);\n  return;\n}",
            "called": [
                "Servo_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080578",
            "calling": [],
            "imported": false,
            "current_name": "servo_handler_timer3_00080578"
        },
        "FUN_000841e4": {
            "renaming": {
                "FUN_000841e4": "signal_handler_000841e4",
                "__sig": "signal",
                "iVar1": "result",
                "_FUN_000841e4_r": "signal_handler_r"
            },
            "code": "int signal_handler_000841e4(int signal) {\n  int result;\n  result = signal_handler_000841e4_r(*(undefined4 *)PTR__impure_ptr_000841f0, signal);\n  return result;\n}",
            "called": [
                "_raise_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000841e4",
            "calling": [
                "abort"
            ],
            "imported": false,
            "current_name": "signal_handler_000841e4"
        },
        "FUN_0008400c": {
            "renaming": {
                "FUN_0008400c": "get_max_mb_cur_0008400c",
                "PTR___mb_cur_max_00084014": "max_mb_cur_ptr"
            },
            "code": "int get_max_mb_cur_0008400c(void)\n{\n    int* PTR___mb_cur_max_00084014 = (int*) PTR___mb_cur_max_00084014;\n    return *PTR___mb_cur_max_00084014;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008400c",
            "calling": [
                "_fputwc_r"
            ],
            "imported": false,
            "current_name": "get_max_mb_cur_0008400c"
        },
        "FUN_00080e60": {
            "renaming": {
                "FUN_00080e60": "wait_forever_00080e60"
            },
            "code": "void wait_forever_00080e60(void)\n{\n  while (true) {\n    // Do nothing\n  }\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e60",
            "calling": [
                "__halt"
            ],
            "imported": false,
            "current_name": "wait_forever_00080e60"
        },
        "FUN_000814d0": {
            "renaming": {
                "String::FUN_000814d0": "improved_string_function",
                "this": "str_obj",
                "cstr": "c_string",
                "length": "length",
                "uVar1": "result",
                "reserve": "reserve",
                "invalidate": "invalidate",
                "len": "length",
                "buffer": "buffer",
                "FUN_000814d0": "improved_string_function_000814d0"
            },
            "code": "String* __thiscall improved_string_function_000814d0(String* str_obj, char* c_string, uint length) {\n    uchar result = reserve(str_obj, length);\n    if (result == '\\0') {\n        invalidate(str_obj);\n    }\n    else {\n        str_obj->length = length;\n        strcpy(str_obj->buffer, c_string);\n    }\n    return str_obj;\n}",
            "called": [
                "strcpy",
                "reserve",
                "invalidate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814d0",
            "calling": [
                "String"
            ],
            "imported": false,
            "current_name": "improved_string_function_000814d0"
        },
        "FUN_00080c20": {
            "renaming": {
                "FUN_00080c20": "copy_and_clear_sections_00080c20",
                "puVar1": "source_ptr",
                "puVar2": "destination_ptr",
                "iVar3": "i",
                "puVar4": "clear_ptr",
                "PTR_banzai_00080c7c": "banzai_section_start",
                "PTR__etext_00080c78": "etext_section_start",
                "PTR_completed_7857_00080c80": "completed_section_start",
                "PTR_completed_7857_00080c84": "completed_section_end",
                "DAT_00080c90": "exception_table_end",
                "PTR__ebss_00080c88": "ebss_section_end",
                "PTR_exception_table_00080c8c": "exception_table_start",
                "DAT_00080c94": "completed_function"
            },
            "code": "void copy_and_clear_sections_00080c20(void)\n{\n  uint32_t *source_ptr;\n  uint32_t *destination_ptr;\n  uint32_t *clear_ptr;\n  int i;\n  source_ptr = PTR_banzai_00080c7c;\n  destination_ptr = PTR__etext_00080c78;\n  clear_ptr = PTR_completed_7857_00080c80;\n  if (PTR__etext_00080c78 != PTR_banzai_00080c7c) {\n    for (i = 0; clear_ptr + i < PTR_completed_7857_00080c84; i += 4) {\n      *(uint32_t *)(source_ptr + i) = *(uint32_t *)(destination_ptr + i);\n    }\n  }\n  for (; clear_ptr < PTR__ebss_00080c88; clear_ptr++) {\n    *clear_ptr = 0;\n  }\n  destination_ptr = PTR_exception_table_00080c8c - 0x20000000;\n  *(uint32_t *)(DAT_00080c90 + 8) = (uint32_t)PTR_exception_table_00080c8c & 0x1fffff80;\n  if (destination_ptr < (uint32_t *)0x100000) {\n    *(uint32_t *)(PTR__ebss_00080c88 + 8) = *(uint32_t *)(PTR__ebss_00080c88 + 8) | 0x20000000;\n  }\n  (*DAT_00080c94)();\n  while(true);\n}\n",
            "called": [
                "main",
                "banzai"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c20",
            "calling": [],
            "imported": false,
            "current_name": "copy_and_clear_sections_00080c20"
        },
        "FUN_00080e62": {
            "renaming": {
                "FUN_00080e62": "do_nothing_loop_00080e62"
            },
            "code": "void do_nothing_loop_00080e62(void)\n{\n  while(true) {\n    // do nothing\n  }\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e62",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_loop_00080e62"
        },
        "FUN_00080efc": {
            "renaming": {
                "FUN_00080efc": "do_nothing_00080efc"
            },
            "code": "\nvoid do_nothing_00080efc(int pid_UNUSED,int sig_UNUSED)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080efc",
            "calling": [
                "_kill_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00080efc"
        },
        "FUN_0008044c": {
            "renaming": {
                "FUN_0008044c": "servo_timer_handler_0008044c",
                "timer": "timer_index",
                "tc": "timer_counter",
                "channel": "channel_index",
                "bVar1": "current_count",
                "puVar2": "channel_array",
                "puVar3": "servo_count",
                "puVar4": "servos_array",
                "uVar5": "temp_var",
                "RVar6": "clock_speed",
                "iVar7": "servo_index"
            },
            "code": "void servo_timer_handler_0008044c(timer16_Sequence_t timer, Tc *timer_counter, uint8_t channel) {\n  uint8_t* servo_count = PTR_ServoCount_00080554;\n  uint8_t* channel_array = PTR_Channel_00080544;\n  uint32_t timer_index = (uint32_t)timer;\n  if ((channel_array[timer_index] & 0x80) == 0) {\n    int servo_index = timer_index * 0xc;\n    if (((char)channel_array[timer_index] + servo_index < (int)(uint8_t)*servo_count) && ((int)((uint32_t)(uint8_t)PTR_servos_00080548[((char)channel_array[timer_index] + servo_index) * 8] << 0x19) < 0)) {\n      digitalWrite((uint8_t)PTR_servos_00080548[(servo_index + (char)channel_array[timer_index]) * 8] & 0x3f, LOW);\n    }\n  }\n  else {\n    timer_counter->TC_CHANNEL[channel].TC_CCR = timer_counter->TC_CHANNEL[channel].TC_CCR | 4;\n  }\n  uint8_t current_count = channel_array[timer_index];\n  channel_array[timer_index] = current_count + 1;\n  uint8_t* servos_array = PTR_servos_00080548;\n  int servo_index = timer_index * 0xc;\n  if (((char)channel_array[timer_index] + servo_index < (int)(uint8_t)*servo_count) && ((char)channel_array[timer_index] < '\f')) {\n    timer_counter->TC_CHANNEL[channel].TC_RA = timer_counter->TC_CHANNEL[channel].TC_CV + *(int *)(PTR_servos_00080548 + ((char)channel_array[timer_index] + servo_index) * 8 + 4);\n    if (-1 < (int)((uint32_t)(uint8_t)servos_array[((char)channel_array[timer_index] + servo_index) * 8] << 0x19)) {\n      return;\n    }\n    digitalWrite((uint8_t)servos_array[(servo_index + (char)channel_array[timer_index]) * 8] & 0x3f, HIGH);\n    return;\n  }\n  uint32_t clock_speed = (*(uint32_t *)PTR_SystemCoreClock_0008054c / DAT_00080550) * 20000 >> 5;\n  if (clock_speed <= timer_counter->TC_CHANNEL[channel].TC_CV + 4) {\n    clock_speed = timer_counter->TC_CHANNEL[channel].TC_CV + 4;\n  }\n  timer_counter->TC_CHANNEL[channel].TC_RA = clock_speed;\n  channel_array[timer_index] = 0xff;\n}\n",
            "called": [
                "digitalWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008044c",
            "calling": [
                "TC5_Handler",
                "TC3_Handler",
                "TC4_Handler",
                "TC2_Handler",
                "TC0_Handler"
            ],
            "imported": false,
            "current_name": "servo_timer_handler_0008044c"
        },
        "FUN_00080efe": {
            "renaming": {
                "FUN_00080efe": "get_default_pid_00080efe"
            },
            "code": "__pid_t get_default_pid_00080efe()\n{\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080efe",
            "calling": [
                "_getpid_r"
            ],
            "imported": false,
            "current_name": "get_default_pid_00080efe"
        },
        "FUN_00081e34": {
            "renaming": {
                "FUN_00081e34": "reverse_copy_00081e34",
                "__dest": "destination",
                "__src": "source",
                "__n": "n",
                "iVar1": "i",
                "puVar2": "destination_word_ptr",
                "puVar3": "source_word_ptr",
                "puVar4": "destination_word_ptr",
                "puVar5": "destination_byte_ptr",
                "uVar6": "remaining_bytes",
                "puVar7": "destination_byte_ptr",
                "uVar8": "remaining_bytes"
            },
            "code": "void * reverse_copy_00081e34(void *destination, void *source, size_t n)\n{\n    int i;\n    uint remaining_bytes;\n    uint remaining_words;\n    uint *destination_word_ptr;\n    uint *source_word_ptr;\n    uchar *destination_byte_ptr;\n    uchar *source_byte_ptr;\n\n    if (source < destination && source + n > destination)\n    {\n        destination_byte_ptr = (uchar *)destination + n;\n        remaining_bytes = n - 1;\n        do\n        {\n            source_byte_ptr = (uchar *)source + remaining_bytes;\n            destination_byte_ptr--;\n            *destination_byte_ptr = *source_byte_ptr;\n            remaining_bytes--;\n        } while (remaining_bytes != -1);\n        return destination;\n    }\n\n    destination_word_ptr = (uint *)destination;\n    if (n >= 0x10 && ((uint)destination | (uint)source) % 4 == 0)\n    {\n        source_word_ptr = (uint *)source;\n        remaining_words = (n - 0x10) & 0xFFFFFFF0;\n        do\n        {\n            *destination_word_ptr++ = *source_word_ptr++;\n            *destination_word_ptr++ = *source_word_ptr++;\n            *destination_word_ptr++ = *source_word_ptr++;\n            *destination_word_ptr++ = *source_word_ptr++;\n        } while (destination_word_ptr != (uint *)((int)destination + remaining_words + 0x10));\n\n        remaining_bytes = n & 3;\n        source_byte_ptr = (uchar *)source + remaining_words;\n        destination_byte_ptr = (uchar *)destination_word_ptr;\n        for (i = 0; i < remaining_bytes; i++)\n        {\n            *destination_byte_ptr++ = *source_byte_ptr++;\n        }\n        return destination;\n    }\n\n    destination_byte_ptr = (uchar *)destination;\n    source_byte_ptr = (uchar *)source;\n    remaining_bytes = n;\n    while (remaining_bytes--)\n    {\n        *destination_byte_ptr++ = *source_byte_ptr++;\n    }\n    return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e34",
            "calling": [
                "_realloc_r",
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "reverse_copy_00081e34"
        },
        "FUN_00080e66": {
            "renaming": {
                "FUN_00080e66": "do_nothing_forever_00080e66"
            },
            "code": "void do_nothing_forever_00080e66(void)\n{\n  while (true) {\n    // Do nothing\n  }\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e66",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_forever_00080e66"
        },
        "FUN_000826e8": {
            "renaming": {
                "FUN_000826e8": "parse_uint_from_string_000826e8",
                "param_1": "result",
                "param_2": "str",
                "param_3": "endptr",
                "param_4": "base",
                "bVar1": "char_properties",
                "bVar2": "is_negative",
                "uVar3": "value",
                "pbVar4": "current_char_ptr",
                "uVar5": "current_char",
                "pbVar6": "next_char_ptr",
                "iVar7": "hex_digit_value",
                "iVar8": "is_valid",
                "uVar9": "quotient_limit",
                "uVar10": "quotient"
            },
            "code": "uint parse_uint_from_string_000826e8(undefined4 *result, byte *str, byte **endptr, uint base) {\n    byte current_char;\n    byte next_char;\n    uint quotient_limit;\n    uint quotient;\n    int sign;\n    uint value;\n    int valid_digit;\n    int valid_hex_digit;\n    *endptr = str;\n    do {\n        current_char = **endptr;\n        (*endptr)++;\n        valid_digit = isdigit(current_char);\n        valid_hex_digit = isxdigit(current_char);\n        if (!valid_digit && !valid_hex_digit) {\n            if (current_char != 0x2d) {\n                if (current_char != 0x2b) {\n                    return 0x22;\n                }\n                sign = 1;\n                next_char = **endptr;\n                (*endptr)++;\n            }\n            else {\n                sign = -1;\n                next_char = **endptr;\n                (*endptr)++;\n            }\n            if ((base & 0xffffffef) == 0) {\n                if (next_char == 0x30) {\n                    next_char = **endptr;\n                    (*endptr)++;\n                    if ((next_char & 0xdf) == 0x58) {\n                        base = 0x10;\n                        next_char = **endptr;\n                        (*endptr)++;\n                    }\n                    else if (base == 0) {\n                        base = 8;\n                    }\n                }\n                else if (base == 0) {\n                    base = 10;\n                }\n            }\n            break;\n        }\n    } while (valid_digit || valid_hex_digit);\n    if (current_char == 0x2d || current_char == 0x2b) {\n        return 0x22;\n    }\n    quotient_limit = (sign == -1) ? 0x80000000 : 0x7fffffff;\n    quotient = quotient_limit / base;\n    value = 0;\n    do {\n        current_char = **endptr;\n        (*endptr)++;\n        valid_digit = isdigit(current_char);\n        valid_hex_digit = isxdigit(current_char);\n        if (!valid_digit && !valid_hex_digit) {\n            break;\n        }\n        if (valid_digit) {\n            current_char -= 0x30;\n        }\n        else {\n            if ((current_char & 3) == 1) {\n                current_char -= 0x37;\n            }\n            else {\n                current_char -= 0x57;\n            }\n        }\n        if ((int)base <= current_char) {\n            break;\n        }\n        if (value != -1) {\n            if (quotient <= value && value != quotient) {\n                value = -1;\n            }\n            else {\n                value = base * value + current_char;\n            }\n        }\n    } while (valid_digit || valid_hex_digit);\n    if (value == -1) {\n        *result = 0x22;\n        if (endptr == 0) {\n            return quotient_limit;\n        }\n    }\n    else {\n        if (sign == -1) {\n            value = -value;\n        }\n        if (endptr == 0) {\n            return value;\n        }\n        if (value != 0) {\n            *endptr = *endptr - 1;\n        }\n    }\n    *endptr = *endptr - 1;\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000826e8",
            "calling": [
                "strtol"
            ],
            "imported": false,
            "current_name": "parse_uint_from_string_000826e8"
        },
        "FUN_00080df0": {
            "renaming": {
                "FUN_00080df0": "count_leading_zeroes_and_call_callbacks_00080df0",
                "uVar1": "leading_zeroes",
                "uVar2": "current_bitmask",
                "PTR_callbacksPioC_00080e24": "callbacks_pointer",
                "DAT_00080e20": "data_pointer"
            },
            "code": "void count_leading_zeroes_and_call_callbacks_00080df0(void)\n{\n  uint current_bitmask = *(uint *)(DAT_00080e20 + 0x4c);\n  while( true ) {\n    uint leading_zeroes = count_leading_zeroes(current_bitmask);\n    if (leading_zeroes > 0x1f) break;\n    uint index = 0x1f - leading_zeroes;\n    if (*(code **)(PTR_callbacksPioC_00080e24 + index * 4) != (code *)0x0) {\n      (**(code **)(PTR_callbacksPioC_00080e24 + index * 4))();\n    }\n    current_bitmask &= ~(1 << index);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080df0",
            "calling": [],
            "imported": false,
            "current_name": "count_leading_zeroes_and_call_callbacks_00080df0"
        },
        "FUN_00083850": {
            "renaming": {
                "FUN_00083850": "flush_stream_if_not_empty_00083850",
                "param_1": "stream_ptr",
                "param_2": "buffer_ptr",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void flush_stream_if_not_empty_00083850(int stream_ptr, int buffer_ptr)\n{\n    if ((stream_ptr != 0) && (*(int *)(stream_ptr + 0x38) == 0)) {\n        __sinit();\n    }\n    if (*(short *)(buffer_ptr + 0xc) == 0) {\n        return;\n    }\n    __sflush_r(stream_ptr);\n    return;\n}",
            "called": [
                "__sflush_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083850",
            "calling": [
                "__sbprintf",
                "__swbuf_r",
                "_fclose_r",
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "flush_stream_if_not_empty_00083850"
        },
        "FUN_000815ec": {
            "renaming": {
                "FUN_000815ec": "main_loop_000815ec",
                "in_r0": "key_ctx",
                "DAT_00081614": "data_var"
            },
            "code": "int main_loop_000815ec(void)\n{\n  EVP_PKEY_CTX *key_ctx;\n  \n  _watchdogDefaultSetup();\n  init(key_ctx);\n  initVariant();\n  delay(1);\n  setup();\n  do {\n    do {\n      loop();\n    } while (DAT_00081614 == 0);\n    serialEventRun();\n  } while( true );\n}",
            "called": [
                "serialEventRun",
                "setup",
                "_watchdogDefaultSetup",
                "delay",
                "loop",
                "init",
                "initVariant"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815ec",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "main_loop_000815ec"
        },
        "FUN_000827fc": {
            "renaming": {
                "FUN_000827fc": "convert_string_to_long_000827fc",
                "__nptr": "string",
                "__endptr": "end_of_conversion",
                "__base": "base",
                "lVar1": "converted_number",
                "_FUN_000827fc_r": "_convert_string_to_long_r"
            },
            "code": "long convert_string_to_long_000827fc(char *string, char **end_of_conversion, int base) {\n  long converted_number;\n  converted_number = _convert_string_to_long_000827fc_r(*(undefined4 *)PTR__impure_ptr_00082810,string,end_of_conversion,base);\n  return converted_number;\n}",
            "called": [
                "_strtol_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000827fc",
            "calling": [
                "atol"
            ],
            "imported": false,
            "current_name": "convert_string_to_long_000827fc"
        },
        "FUN_00080588": {
            "renaming": {
                "FUN_00080588": "servo_timer_handler_00080588",
                "DAT_00080594": "pin",
                "PTR_": "PTR_",
                "TIMER4": "timer",
                "Servo_Handler": "Servo_Handler",
                "angle": "angle"
            },
            "code": "void servo_timer_handler_00080588(void)\n{\n  Servo_Handler(timer=TIMER4, DAT_00080594=PTR_00080594, angle=2);\n  return;\n}",
            "called": [
                "Servo_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080588",
            "calling": [],
            "imported": false,
            "current_name": "servo_timer_handler_00080588"
        },
        "FUN_00080d3e": {
            "renaming": {
                "FUN_00080d3e": "update_data_00080d3e",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void update_data_00080d3e(uint32_t* data, uint32_t value1, uint32_t value2, uint32_t value3)\n{\n    uint32_t mask1 = 0xf000000u; // mask to set bits 28-31 to value2\n    uint32_t mask2 = 0x30000000u; // mask to set bits 30-31 to value3\n    uint32_t current_value = *(data + 1); // current value of data[1]\n    *(data + 1) = current_value | value1 | ((value2 << 24) & mask1) | ((value3 << 28) & mask2);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d3e",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "update_data_00080d3e"
        },
        "FUN_00081438": {
            "renaming": {
                "FUN_00081438::FUN_00081438": "initialize_UART",
                "*this": "class_instance",
                "Usart": "uart",
                "dwIrq": "irq",
                "dwId": "id",
                "RingBuffer": "ring_buffer",
                "pRx_buffer": "rx_buffer",
                "pTx_buffer": "tx_buffer",
                "PTR_PTR_write_1_00081458": "write_function",
                "_pUsart": "uart",
                "FUN_00081438": "UARTClass_00081438"
            },
            "code": "UARTClass_00081438::UARTClass_00081438(UARTClass_00081438 *uart_class, Uart *uart, IRQn_Type irq, uint32_t id, RingBuffer *rx_buffer, RingBuffer *tx_buffer)\n{\n  uart_class->super_UARTClass_00081438 = (Uart *)uart;\n  uart_class->irq = irq;\n  uart_class->id = id;\n  uart_class->rx_buffer = rx_buffer;\n  uart_class->tx_buffer = tx_buffer;\n}\n\nUARTClass_00081438 * __thiscall initialize_UART(UARTClass_00081438 *this, Uart *uart, IRQn_Type irq, uint32_t id, RingBuffer *rx_buffer, RingBuffer *tx_buffer)\n{\n  UARTClass_00081438::UARTClass_00081438(&this->uart_class, uart, irq, id, rx_buffer, tx_buffer);\n  this->PTR_PTR_write_1_00081458 = PTR_PTR_write_1_00081458;\n  this->uart = uart;\n  return this;\n}",
            "called": [
                "UARTClass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081438",
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "imported": false,
            "current_name": "UARTClass_00081438"
        },
        "FUN_000841f4": {
            "renaming": {
                "FUN_000841f4": "kill_process_and_return_error_code_if_failed_000841f4",
                "param_1": "error_code",
                "param_2": "process_id",
                "param_3": "signal_number",
                "puVar1": "error_ptr"
            },
            "code": "void kill_process_and_return_error_code_if_failed_000841f4(int *error_code, int process_id, int signal_number)\n{\n  undefined *error_ptr;\n  error_ptr = PTR_errno_00084218;\n  *(undefined4 *)PTR_errno_00084218 = 0;\n  _kill(process_id, signal_number);\n  if ((process_id == -1) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_kill"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000841f4",
            "calling": [
                "_raise_r",
                "kill"
            ],
            "imported": false,
            "current_name": "kill_process_and_return_error_code_if_failed_000841f4"
        },
        "FUN_000812a0": {
            "renaming": {
                "FUN_000812a0": "wait_until_tx_buffer_empty_000812a0",
                "_tx_buffer->_iHead": "tx_buffer_head",
                "_tx_buffer->_iTail": "tx_buffer_tail",
                "_pUart->UART_SR": "uart_sr"
            },
            "code": "void __thiscall UARTClass::wait_until_tx_buffer_empty_000812a0(UARTClass *this)\n{\n  while (this->tx_buffer_head != this->tx_buffer_tail) {};\n  while (-1 < (int)(this->_pUart->UART_SR << 0x16)) {};\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000812a0",
            "calling": [],
            "imported": false,
            "current_name": "wait_until_tx_buffer_empty_000812a0"
        },
        "FUN_0008130c": {
            "renaming": {
                "FUN_0008130c": "uart_class_update_rx_buffer_0008130c",
                "this": "uart_instance",
                "_rx_buffer": "rx_buffer",
                "_iHead": "head",
                "_iTail": "tail",
                "**(code **)(*(int *)this + 0x14))()": "call_uart_callback_function",
                "DAT_00081344": "data_register",
                "_dwIrq": "irq",
                "_dwId": "id",
                "pmc_disable_periph_clk": "disable_peripheral_clock"
            },
            "code": "void __thiscall uart_class_update_rx_buffer_0008130c(UARTClass *this)\n{\n    this->rx_buffer->head = this->rx_buffer->tail;\n    (**(code **)(*(int *)this + 0x14))();\n    *(int *)(DAT_00081344 + (((uint)(int)this->irq >> 5) + 0x20) * 4) = 1 << (uint)(byte)(this->irq & 0x1f);\n    pmc_disable_periph_clk(this->id);\n    return;\n}",
            "called": [
                "pmc_disable_periph_clk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008130c",
            "calling": [],
            "imported": false,
            "current_name": "uart_class_update_rx_buffer_0008130c"
        },
        "FUN_0008142e": {
            "renaming": {
                "FUN_0008142e": "usart_set_baud_rate_0008142e",
                "dwBaudRate": "baud_rate"
            },
            "code": "void __thiscall usart_set_baud_rate_0008142e(USARTClass *this, uint32_t baud_rate) {\n  UARTClass::init(&this->super_UARTClass, baud_rate, 0x8c0);\n  return;\n}",
            "called": [
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008142e",
            "calling": [],
            "imported": false,
            "current_name": "usart_set_baud_rate_0008142e"
        },
        "FUN_00080d58": {
            "renaming": {
                "FUN_00080d58": "set_bit_at_position_00080d58",
                "param_1": "base_address",
                "param_2": "bit_position",
                "*(int *)(param_1 + 0x14)": "memory_address",
                "1 << (param_2 & 0xff)": "bit_mask"
            },
            "code": "void set_bit_at_position_00080d58(int base_address, uint8_t bit_position) {\n  int* memory_address = (int*)(base_address + 0x14);\n  int bit_mask = 1 << (bit_position & 0xff);\n  *memory_address = bit_mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d58",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_00080d58"
        },
        "FUN_00081084": {
            "renaming": {
                "__thiscall Print::FUN_00081084": "print_buffer",
                "this": "print_object",
                "buffer": "buffer",
                "size": "buffer_size",
                "sVar2": "bytes_printed",
                "pPVar1": "print_ptr",
                "FUN_00081084": "print_buffer_00081084"
            },
            "code": "size_t __thiscall print_buffer_00081084(Print *print_object, uint8_t *buffer, size_t buffer_size)\n{\n  Print *print_ptr;\n  size_t bytes_printed = 0;\n  print_ptr = print_object;\n  while ((bytes_printed != buffer_size && (print_ptr = (Print *)(**print_object->_vptr_Print)(print_ptr, (uint)buffer[bytes_printed]), print_ptr != (Print *)0x0))) {\n    bytes_printed++;\n  }\n  return bytes_printed;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081084",
            "calling": [],
            "imported": false,
            "current_name": "print_buffer_00081084"
        },
        "FUN_00080558": {
            "renaming": {
                "FUN_00080558": "servo_handler_timer1_00080558",
                "DAT_00080564": "servo",
                "'\\0'": "null_terminator"
            },
            "code": "void servo_handler_timer1_00080558(char DAT_00080564, char null_terminator) {\n  Servo_Handler(_timer1, DAT_00080564, null_terminator);\n  return;\n}",
            "called": [
                "Servo_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080558",
            "calling": [],
            "imported": false,
            "current_name": "servo_handler_timer1_00080558"
        },
        "FUN_00083708": {
            "renaming": {
                "decompress": "decompress",
                "param_1": "input_buffer",
                "param_2": "output_buffer",
                "piVar1": "next_block_pointer",
                "iVar2": "block_size",
                "uVar3": "flags",
                "uVar4": "flag_mask",
                "iVar5": "bytes_written",
                "pcVar6": "decompressor_function",
                "iVar7": "total_bytes_written",
                "FUN_00083708": "decompress_00083708"
            },
            "code": "int decompress_00083708(int *input_buffer, int *output_buffer){\n    int *next_block_pointer;\n    int block_size;\n    ushort flags;\n    uint flag_mask;\n    int bytes_written;\n    code *decompress_00083708or_function;\n    int total_bytes_written;\n    \n    flags = *(ushort *)(output_buffer + 3);\n    if ((int)((uint)flags << 0x1c) < 0) {\n        next_block_pointer = output_buffer[4];\n        if (next_block_pointer == 0) {\n            return 0;\n        }\n        block_size = *output_buffer;\n        if ((flags & 3) == 0) {\n            bytes_written = output_buffer[5];\n        }\n        else {\n            bytes_written = 0;\n        }\n        *output_buffer = next_block_pointer;\n        block_size = block_size - next_block_pointer;\n        output_buffer[2] = bytes_written;\n        do {\n            if (block_size < 1) {\n                return 0;\n            }\n            bytes_written = (*(code *)output_buffer[9])(input_buffer,output_buffer[7],next_block_pointer,block_size);\n            block_size = block_size - bytes_written;\n            next_block_pointer = next_block_pointer + bytes_written;\n        } while (0 < bytes_written);\n        *(ushort *)(output_buffer + 3) = *(ushort *)(output_buffer + 3) | 0x40;\n        return 0xffffffff;\n    }\n    *(ushort *)(output_buffer + 3) = flags | 0x800;\n    if ((output_buffer[1] < 1) && (output_buffer[0xf] < 1)) {\n        return 0;\n    }\n    decompress_00083708or_function = (code *)output_buffer[10];\n    if (decompress_00083708or_function == (code *)0x0) {\n        return 0;\n    }\n    flag_mask = (uint)(flags | 0x800);\n    total_bytes_written = *input_buffer;\n    *input_buffer = 0;\n    if ((flags & 0x1000) == 0) {\n        bytes_written = (*decompress_00083708or_function)(input_buffer,output_buffer[7],flag_mask & 0x1000,1);\n        if ((bytes_written == -1) && (block_size = *input_buffer, block_size != 0)) {\n            if ((block_size == 0x1d) || (block_size == 0x16)) {\n                *input_buffer = total_bytes_written;\n                return 0;\n            }\n            *(ushort *)(output_buffer + 3) = *(ushort *)(output_buffer + 3) | 0x40;\n            return 0xffffffff;\n        }\n        flags = *(ushort *)(output_buffer + 3);\n        decompress_00083708or_function = (code *)output_buffer[10];\n    }\n    else {\n        block_size = output_buffer[0x14];\n    }\n    if (((int)(flag_mask << 0x1d) < 0) && (block_size = block_size - output_buffer[1], output_buffer[0xc] != 0)) {\n        block_size = block_size - output_buffer[0xf];\n    }\n    bytes_written = (*decompress_00083708or_function)(input_buffer,output_buffer[7],block_size,0);\n    if (bytes_written == -1) {\n        total_bytes_written = *input_buffer;\n        if (total_bytes_written != 0) {\n            if ((total_bytes_written != 0x1d) && (total_bytes_written != 0x16)) {\n                *(ushort *)(output_buffer + 3) = *(ushort *)(output_buffer + 3) | 0x40;\n                return 0xffffffff;\n            }\n            *(ushort *)(output_buffer + 3) = *(ushort *)(output_buffer + 3) & 0xf7ff;\n            *output_buffer = output_buffer[4];\n            output_buffer[1] = 0;\n            goto LAB_00083774;\n        }\n        flags = *(ushort *)(output_buffer + 3) & 0xf7ff;\n        output_buffer[1] = 0;\n        *(ushort *)(output_buffer + 3) = flags;\n        *output_buffer = output_buffer[4];\n    }\n    else {\n        flags = *(ushort *)(output_buffer + 3) & 0xf7ff;\n        *output_buffer = output_buffer[4];\n        *(ushort *)(output_buffer + 3) = flags;\n        output_buffer[1] = 0;\n    }\n    if ((int)((uint)flags << 0x13) < 0) {\n        output_buffer[0x14] = bytes_written;\n    }\nLAB_00083774:\n    next_block_pointer = (int *)output_buffer[0xc];\n    *input_buffer = total_bytes_written;\n    if (next_block_pointer == (int *)0x0) {\n        return 0;\n    }\n    if (next_block_pointer != output_buffer + 0x10) {\n        _free_r(input_buffer);\n    }\n    output_buffer[0xc] = 0;\n    return 0;\n}",
            "called": [
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083708",
            "calling": [
                "_fflush_r"
            ],
            "imported": false,
            "current_name": "decompress_00083708"
        },
        "FUN_0008458c": {
            "renaming": {
                "FUN_0008458c": "calculate_difference_0008458c",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "multiplier_low",
                "param_4": "multiplier_high",
                "param_5": "difference",
                "uVar1": "quotient_low",
                "lVar2": "quotient"
            },
            "code": "void calculate_difference_0008458c(uint value1, int value2, uint32_t multiplier_low, uint32_t multiplier_high, int *difference) {\n  uint64_t product = (uint64_t)multiplier_high << 32 | multiplier_low;\n  uint64_t quotient = value1 * product;\n  uint32_t quotient_low = (uint32_t)quotient;\n  uint32_t quotient_high = (uint32_t)(quotient >> 32);\n  difference[0] = value1 - quotient_low;\n  difference[1] = value2 - quotient_high - (value1 < quotient_low);\n}",
            "called": [
                "__udivdi3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008458c",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "calculate_difference_0008458c"
        },
        "FUN_0008434c": {
            "renaming": {
                "FUN_0008434c": "convert_wchar_to_multibyte_string_0008434c",
                "param_1": "output_string",
                "param_2": "output_buffer_size",
                "param_3": "input_char",
                "param_4": "conversion_result",
                "uVar1": "locale_charset",
                "iVar2": "conversion_status",
                "pcVar3": "conversion_function",
                "auStack_24": "conversion_buffer"
            },
            "code": "void convert_wchar_to_multibyte_string_0008434c(unsigned int *output_string, int output_buffer_size, unsigned int input_char, unsigned int *conversion_result) {\n  unsigned int locale_charset;\n  int conversion_status;\n  code *conversion_function;\n  unsigned int conversion_buffer[3];\n  \n  if (output_buffer_size == 0) {\n    conversion_function = *(code **)PTR___wctomb_00084398;\n    locale_charset = __locale_charset();\n    conversion_status = (*conversion_function)(output_string,conversion_buffer,0,locale_charset,conversion_result);\n  }\n  else {\n    conversion_function = *(code **)PTR___wctomb_00084398;\n    locale_charset = __locale_charset();\n    conversion_status = (*conversion_function)(output_string,output_buffer_size,input_char,locale_charset,conversion_result);\n  }\n  if (conversion_status == -1) {\n    *conversion_result = 0;\n    *output_string = 0x8a;\n  }\n  return;\n}",
            "called": [
                "__ascii_wctomb",
                "__locale_charset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008434c",
            "calling": [
                "_fputwc_r"
            ],
            "imported": false,
            "current_name": "convert_wchar_to_multibyte_string_0008434c"
        },
        "FUN_0008151c": {
            "renaming": {
                "FUN_0008151c": "string_copy_0008151c",
                "this": "self",
                "rhs": "other",
                "__dest": "destination",
                "PTR_DAT_0008155c": "global_constant"
            },
            "code": "void __thiscall string_copy_0008151c(String *this, String *rhs) {\n    char *destination = this->buffer;\n    if (destination != NULL) {\n        if (rhs->buffer != NULL && PTR_DAT_0008155c != 0 && rhs->len <= this->capacity) {\n            strcpy(destination, rhs->buffer);\n            this->len = rhs->len;\n            return;\n        }\n        free(destination);\n    }\n    this->buffer = rhs->buffer;\n    this->capacity = rhs->capacity;\n    this->len = rhs->len;\n    rhs->buffer = NULL;\n    rhs->capacity = 0;\n    rhs->len = 0;\n}\n",
            "called": [
                "strcpy",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008151c",
            "calling": [
                "operator="
            ],
            "imported": false,
            "current_name": "string_copy_0008151c"
        },
        "FUN_000816f8": {
            "renaming": {
                "FUN_000816f8": "print_assertion_failed_message_000816f8",
                "param_1": "line_number",
                "param_2": "file_name",
                "param_3": "function_name",
                "param_4": "expression",
                "PTR_s__00081730": "value",
                "PTR_s___function__00081728": "assertion_failed_message",
                "PTR__impure_ptr_00081724": "impure_ptr"
            },
            "code": "void print_assertion_failed_message_000816f8(int line_number, const char* file_name, const char* function_name, const char* expression, const char* PTR_s__00081730)\n{\n  const char* PTR_s___function__00081728 = \"Assertion failed: %s\\nValue: %s\\nExpression: %s\\nFile: %s\\nLine: %d\\n\";\n  if (PTR_s__00081730 == NULL) {\n    PTR_s__00081730 = \"NULL\";\n  }\n  printf(PTR_s___function__00081728, expression, PTR_s__00081730, function_name, file_name, line_number);\n  exit(EXIT_FAILURE);\n}",
            "called": [
                "abort",
                "fiprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816f8",
            "calling": [
                "TC_Start",
                "TC_Configure"
            ],
            "imported": false,
            "current_name": "print_assertion_failed_message_000816f8"
        },
        "FUN_00084484": {
            "renaming": {
                "FUN_00084484": "process_file_00084484",
                "__stream": "file_ptr",
                "iVar1": "result",
                "_FUN_00084484_r": "_process_file_r"
            },
            "code": "int process_file_00084484(FILE* file_ptr) {\n  int result = _process_file_00084484_r(*(undefined4 *)PTR__impure_ptr_00084490, file_ptr);\n  return result;\n}",
            "called": [
                "_fclose_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084484",
            "calling": [],
            "imported": false,
            "current_name": "process_file_00084484"
        },
        "FUN_00084244": {
            "renaming": {
                "FUN_00084244": "write_data_to_file_00084244",
                "param_1": "file",
                "param_2": "data_offset",
                "param_3": "data",
                "param_4": "size",
                "uVar1": "data_size"
            },
            "code": "void write_data_to_file_00084244(FILE* file, int data_offset, void* data, size_t size) {\n    ushort data_size = *(ushort*)(data_offset + 0xc);\n    if ((int)((uint)data_size << 0x17) < 0) {\n        _lseek_r(file, (int)*(short*)(data_offset + 0xe), 0, 2);\n        data_size = *(ushort*)(data_offset + 0xc);\n    }\n    *(ushort*)(data_offset + 0xc) = data_size & 0xefff;\n    _write_r(file, (int)*(short*)(data_offset + 0xe), data, size);\n    return;\n}",
            "called": [
                "_write_r",
                "_lseek_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084244",
            "calling": [],
            "imported": false,
            "current_name": "write_data_to_file_00084244"
        },
        "FUN_00084004": {
            "renaming": {
                "FUN_00084004": "get_ctype_charset_00084004",
                "PTR_lc_ctype_charset_00084008": "ctype_charset_pointer"
            },
            "code": "char* get_ctype_charset_00084004() {\n    return PTR_lc_ctype_charset_00084008;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084004",
            "calling": [
                "_wcrtomb_r"
            ],
            "imported": false,
            "current_name": "get_ctype_charset_00084004"
        },
        "FUN_000816ec": {
            "renaming": {
                "FUN_000816ec": "register_cleanup_callback_000816ec",
                "param_1": "callback",
                "param_2": "arg"
            },
            "code": "void register_cleanup_callback_000816ec(void (*callback)(void*), void* arg) {\n  __cxa_atexit(callback, arg);\n  return;\n}",
            "called": [
                "__cxa_atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816ec",
            "calling": [
                "_GLOBAL__sub_I_steering"
            ],
            "imported": false,
            "current_name": "register_cleanup_callback_000816ec"
        },
        "FUN_00080568": {
            "renaming": {
                "FUN_00080568": "servo_handler_timer2_00080568",
                "_timer2": "timer",
                "DAT_00080574": "data",
                "'\\x01'": "value"
            },
            "code": "void servo_handler_timer2_00080568(int timer, int DAT_00080574, char value)\n{\n  Servo_Handler(timer, DAT_00080574, value);\n  return;\n}",
            "called": [
                "Servo_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080568",
            "calling": [],
            "imported": false,
            "current_name": "servo_handler_timer2_00080568"
        },
        "FUN_000814ae": {
            "renaming": {
                "String::FUN_000814ae": "string_resize",
                "*this": "this",
                "size": "new_size",
                "uVar1": "success",
                "this->buffer": "this->buffer",
                "this->capacity": "this->capacity",
                "changeBuffer": "change_string_buffer",
                "this->len": "this->length",
                "FUN_000814ae": "string_resize_000814ae"
            },
            "code": "uchar __thiscall string_resize_000814ae(String *this, uint new_size) {\n  uchar success = '\\x01';\n  if ((this->buffer == NULL) || (this->capacity < new_size)) {\n    success = change_string_buffer(this, new_size);\n    if (success == NULL) {\n      return NULL;\n    }\n    if (this->length == 0) {\n      *this->buffer = '\\0';\n    }\n  }\n  return success;\n}",
            "called": [
                "changeBuffer"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814ae",
            "calling": [
                "copy",
                "concat"
            ],
            "imported": false,
            "current_name": "string_resize_000814ae"
        },
        "FUN_00081778": {
            "renaming": {
                "FUN_00081778": "run_preinit_array_and_fini_functions_00081778",
                "puVar1": "fini_functions_start",
                "puVar2": "fini_functions_end",
                "iVar3": "i",
                "ppcVar4": "preinit_array_functions/fini_array_functions",
                "iVar5": "preinit_array_size/fini_array_size"
            },
            "code": "void run_preinit_array_and_fini_functions_00081778(void)\n{\n  int preinit_array_size = (int)PTR___preinit_array_end_000817b8 - (int)PTR___preinit_array_end_000817bc >> 2;\n  if (preinit_array_size != 0) {\n    code **preinit_array_functions = (code **)(PTR___preinit_array_end_000817bc + -4);\n    for (int i = 0; i < preinit_array_size; i++) {\n      preinit_array_functions++;\n      (**preinit_array_functions)();\n    }\n  }\n  undefined *fini_functions_start = PTR___preinit_array_end_000817c4;\n  undefined *fini_functions_end = PTR__fini_000817c0;\n  _init();\n  int fini_array_size = (int)fini_functions_end - (int)fini_functions_start >> 2;\n  if (fini_array_size != 0) {\n    code **fini_array_functions = (code **)(fini_functions_start + -4);\n    for (int i = 0; i < fini_array_size; i++) {\n      fini_array_functions++;\n      (**fini_array_functions)();\n    }\n  }\n}\n",
            "called": [
                "_init",
                "register_fini",
                "frame_dummy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081778",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "run_preinit_array_and_fini_functions_00081778"
        },
        "FUN_00080d30": {
            "renaming": {
                "FUN_00080d30": "update_param_00080d30",
                "param_1": "param_buffer",
                "param_2": "new_param_value",
                "param_3": "bit_mask",
                "PTR_": "param_",
                "DAT_": "data_"
            },
            "code": "void update_param_00080d30(uint32_t* PTR_buffer, uint32_t new_PTR_value, uint32_t bit_mask)\n{\n    uint32_t* PTR_ptr = PTR_buffer + 1;\n    uint32_t current_PTR_value = *PTR_ptr;\n    current_PTR_value |= new_PTR_value;\n    current_PTR_value |= (bit_mask & 1) << 7;\n    *PTR_ptr = current_PTR_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d30",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "update_param_00080d30"
        },
        "FUN_00080eec": {
            "renaming": {
                "FUN_00080eec": "exit_with_status_00080eec",
                "PTR_s_Exiting_with_status__d__00080ef8": "exit_status_message"
            },
            "code": "void exit_with_status_00080eec(int status)\n{\n  iprintf(PTR_s_Exiting_with_status__d__00080ef8, status);\n  while(true){}\n}",
            "called": [
                "iprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eec",
            "calling": [
                "abort"
            ],
            "imported": false,
            "current_name": "exit_with_status_00080eec"
        },
        "FUN_000815e8": {
            "renaming": {
                "FUN_000815e8": "do_nothing_000815e8"
            },
            "code": "\nvoid do_nothing_000815e8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815e8",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "do_nothing_000815e8"
        },
        "FUN_000806f8": {
            "renaming": {
                "FUN_000806f8": "map_value_to_microseconds_000806f8",
                "this": "servo",
                "value": "input_value",
                "min": "min_value",
                "max": "max_value",
                "mapped_value": "mapped_value"
            },
            "code": "void __thiscall Servo::map_value_to_microseconds_000806f8(Servo *servo, int value) {\n  int min_value = servo->min;\n  int max_value = servo->max;\n  int mapped_value = 0;\n  if (value < 546) {\n    if (179 < value) {\n      value = 180;\n    }\n    mapped_value = map(value & ~(value >> 31), 0, 180, (1360 - min_value * 4), (2400 - max_value * 4));\n  }\n  map_value_to_microseconds_000806f8Microseconds(servo, mapped_value);\n  return;\n}",
            "called": [
                "map",
                "writeMicroseconds"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000806f8",
            "calling": [
                "straightAndStop",
                "loop"
            ],
            "imported": false,
            "current_name": "map_value_to_microseconds_000806f8"
        },
        "FUN_00082390": {
            "renaming": {
                "FUN_00082390": "FUNC_00082390"
            },
            "code": "\nint FUNC_00082390(char *__s1,char *__s2)\n\n{\n  uint *puVar1;\n  int iVar2;\n  byte *pbVar3;\n  byte *pbVar4;\n  uint *puVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  \n  if ((((uint)__s1 | (uint)__s2) & 7) != 0) {\n    puVar1 = (uint *)__s1;\n    if (((uint)__s1 & 3) != 0) {\n      puVar1 = (uint *)((uint)__s1 & 0xfffffffc) + 1;\n      uVar6 = *(uint *)((uint)__s1 & 0xfffffffc);\n      pbVar3 = (byte *)__s2;\n      if (((uint)__s1 & 1) == 0) {\nLAB_00082410:\n        pbVar4 = pbVar3 + 1;\n        uVar7 = uVar6 >> 0x10 & 0xff;\n        iVar2 = uVar7 - *pbVar3;\n        if (iVar2 != 0) {\n          return iVar2;\n        }\n        if (uVar7 == 0) {\n          return 0;\n        }\n      }\n      else {\n        pbVar4 = (byte *)__s2;\n        if (((uint)__s1 & 2) == 0) {\n          pbVar3 = (byte *)(__s2 + 1);\n          uVar7 = uVar6 >> 8 & 0xff;\n          iVar2 = uVar7 - (byte)*__s2;\n          if (iVar2 != 0) {\n            return iVar2;\n          }\n          if (uVar7 == 0) {\n            return 0;\n          }\n          goto LAB_00082410;\n        }\n      }\n      __s2 = (char *)(pbVar4 + 1);\n      iVar2 = (uVar6 >> 0x18) - (uint)*pbVar4;\n      if ((iVar2 != 0) || (uVar6 >> 0x18 == 0)) {\n        return iVar2;\n      }\n    }\n    uVar6 = (uint)__s2 & 3;\n    if (uVar6 != 0) {\n      puVar5 = (uint *)((uint)__s2 & 0xfffffffc);\n      if (uVar6 == 2) {\n        uVar6 = *puVar5;\n        do {\n          puVar5 = puVar5 + 1;\n          uVar8 = *puVar1;\n          uVar6 = uVar6 >> 0x10;\n          uVar9 = uVar8 + 0xfefefeff & ~uVar8;\n          uVar10 = uVar9 & 0x80808080;\n          uVar7 = uVar8 & 0xffff;\n          if ((uVar9 & 0x8080) != 0 || uVar7 != uVar6) goto LAB_0008258e;\n          uVar6 = *puVar5;\n          uVar7 = uVar7 ^ uVar8;\n          uVar8 = uVar6 * 0x10000;\n          puVar1 = puVar1 + 1;\n        } while (uVar10 == 0 && uVar7 == uVar8);\n      }\n      else if (uVar6 < 2) {\n        uVar6 = *puVar5;\n        do {\n          puVar5 = puVar5 + 1;\n          uVar8 = *puVar1;\n          uVar6 = uVar6 >> 8;\n          uVar9 = uVar8 + 0xfefefeff & ~uVar8;\n          uVar10 = uVar9 & 0x80808080;\n          uVar7 = uVar8 & 0xffffff;\n          if ((uVar9 & 0x808080) != 0 || uVar7 != uVar6) goto LAB_0008258e;\n          uVar6 = *puVar5;\n          uVar7 = uVar7 ^ uVar8;\n          uVar8 = uVar6 * 0x1000000;\n          puVar1 = puVar1 + 1;\n        } while (uVar10 == 0 && uVar7 == uVar8);\n      }\n      else {\n        uVar6 = *puVar5;\n        do {\n          puVar5 = puVar5 + 1;\n          uVar8 = *puVar1;\n          uVar6 = uVar6 >> 0x18;\n          uVar9 = uVar8 + 0xfefefeff & ~uVar8;\n          uVar10 = uVar9 & 0x80808080;\n          uVar7 = uVar8 & 0xff;\n          if ((uVar9 & 0x80) != 0 || uVar7 != uVar6) goto LAB_0008258e;\n          uVar6 = *puVar5;\n          uVar7 = uVar7 ^ uVar8;\n          uVar8 = uVar6 * 0x100;\n          puVar1 = puVar1 + 1;\n        } while (uVar10 == 0 && uVar7 == uVar8);\n      }\n      uVar7 = uVar7 << 0x18 | (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 |\n              uVar7 >> 0x18;\n      uVar6 = (uVar8 >> 8 & 0xff) << 0x10 | (uVar8 >> 0x10 & 0xff) << 8 | uVar8 >> 0x18;\n      goto LAB_0008259e;\n    }\n    __s1 = (char *)puVar1;\n    puVar5 = (uint *)__s2;\n    if (((uint)puVar1 & 4) != 0) {\n      __s1 = (char *)(puVar1 + 1);\n      uVar6 = *puVar1;\n      puVar5 = (uint *)((int)__s2 + 4);\n      uVar8 = *(uint *)__s2;\n      uVar10 = uVar6 + 0xfefefeff & ~uVar6 & 0x80808080;\n      if (uVar6 != uVar8 || uVar10 != 0) {\nLAB_0008259a:\n        uVar7 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 |\n                uVar6 >> 0x18;\n        uVar6 = uVar8 << 0x18 | (uVar8 >> 8 & 0xff) << 0x10 | (uVar8 >> 0x10 & 0xff) << 8 |\n                uVar8 >> 0x18;\n        goto LAB_0008259e;\n      }\n    }\n    __s2 = (char *)puVar5;\n    if (((uint)puVar5 & 4) != 0) {\n      uVar6 = *puVar5;\n      puVar1 = puVar5 + 1;\n      do {\n        uVar7 = *(uint *)__s1;\n        uVar8 = *(uint *)((int)__s1 + 4);\n        uVar10 = uVar7 + 0xfefefeff & ~uVar7 & 0x80808080;\n        if (uVar7 != uVar6 || uVar10 != 0) goto LAB_0008258e;\n        uVar9 = *puVar1;\n        uVar6 = puVar1[1];\n        uVar10 = uVar8 + 0xfefefeff & ~uVar8 & 0x80808080;\n        __s1 = (char *)((int)__s1 + 8);\n        puVar1 = puVar1 + 2;\n      } while (uVar8 == uVar9 && uVar10 == 0);\n      uVar7 = uVar8 << 0x18 | (uVar8 >> 8 & 0xff) << 0x10 | (uVar8 >> 0x10 & 0xff) << 8 |\n              uVar8 >> 0x18;\n      uVar6 = uVar9 << 0x18 | (uVar9 >> 8 & 0xff) << 0x10 | (uVar9 >> 0x10 & 0xff) << 8 |\n              uVar9 >> 0x18;\n      goto LAB_0008259e;\n    }\n  }\n  do {\n    uVar6 = *(uint *)__s1;\n    uVar7 = *(uint *)((int)__s1 + 4);\n    uVar8 = *(uint *)__s2;\n    uVar9 = *(uint *)((int)__s2 + 4);\n    uVar10 = uVar6 + 0xfefefeff & ~uVar6 & 0x80808080;\n    if (uVar6 != uVar8 || uVar10 != 0) goto LAB_0008259a;\n    uVar10 = uVar7 + 0xfefefeff & ~uVar7 & 0x80808080;\n    __s1 = (char *)((int)__s1 + 8);\n    __s2 = (char *)((int)__s2 + 8);\n  } while (uVar7 == uVar9 && uVar10 == 0);\n  uVar7 = uVar7 << 0x18 | (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 | uVar7 >> 0x18;\n  uVar6 = uVar9 << 0x18 | (uVar9 >> 8 & 0xff) << 0x10 | (uVar9 >> 0x10 & 0xff) << 8 | uVar9 >> 0x18;\nLAB_0008259e:\n  uVar8 = uVar10 << 0x18 | (uVar10 >> 8 & 0xff) << 0x10 | (uVar10 >> 0x10 & 0xff) << 8 |\n          uVar10 >> 0x18;\n  if (uVar8 != 0) {\n    iVar2 = count_leading_zeroes(uVar8);\n    uVar7 = uVar7 >> (0x18U - iVar2 & 0xff);\n    uVar6 = uVar6 >> (0x18U - iVar2 & 0xff);\n  }\n  iVar2 = 1;\n  if (uVar7 <= uVar6) {\n    iVar2 = -(uint)(uVar7 < uVar6);\n  }\n  return iVar2;\nLAB_0008258e:\n  uVar7 = uVar7 << 0x18 | (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 | uVar7 >> 0x18;\n  uVar6 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 | uVar6 >> 0x18;\n  goto LAB_0008259e;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00082390",
            "calling": [
                "equals"
            ],
            "imported": false,
            "current_name": "FUNC_00082390"
        },
        "FUN_000816c8": {
            "renaming": {
                "FUN_000816c8": "increment_tick_count_000816c8",
                "PTR__dwTickCount_000816d4": "tick_count_ptr"
            },
            "code": "void increment_tick_count_000816c8(void)\n{\n  int* PTR__dwTickCount_000816d4 = (int*)PTR__dwTickCount_000816d4;\n  *PTR__dwTickCount_000816d4 += 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816c8",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "increment_tick_count_000816c8"
        },
        "FUN_000810fc": {
            "renaming": {
                "__thiscall Print::FUN_000810fc": "print_number",
                "this": "printer",
                "n": "number",
                "base": "base",
                "pcVar1": "buffer_position",
                "sVar2": "write_result",
                "uVar3": "base_value",
                "uVar4": "quotient",
                "str": "current_position",
                "cVar5": "digit",
                "uVar6": "remainder",
                "buf": "buffer",
                "FUN_000810fc": "print_number_000810fc"
            },
            "code": "size_t __thiscall print_number_000810fc(Print *printer, ulong number, uint8_t base) {\n    char *buffer_position;\n    size_t write_result;\n    uint base_value;\n    uint remainder;\n    char buffer[33];\n    \n    base_value = (uint)base;\n    buffer[32] = '\\0';\n    if (base_value < 2) {\n        base_value = 10;\n    }\n    \n    buffer_position = buffer + 0x1f;\n    do {\n        char *current_position = buffer_position;\n        uint quotient = number / base_value;\n        remainder = number - base_value * quotient & 0xff;\n        char digit;\n        if (remainder < 10) {\n            digit = remainder + '0';\n        }\n        else {\n            digit = remainder + '7';\n        }\n        *current_position = digit;\n        number = quotient;\n        buffer_position = current_position - 1;\n    } while (quotient != 0);\n    \n    write_result = write(printer, buffer);\n    return write_result;\n}",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810fc",
            "calling": [
                "print"
            ],
            "imported": false,
            "current_name": "print_number_000810fc"
        },
        "FUN_00080ec2": {
            "renaming": {
                "FUN_00080ec2": "zero_out_file_contents_00080ec2",
                "file_UNUSED": "file_descriptor",
                "ptr_UNUSED": "buffer",
                "len_UNUSED": "buffer_length"
            },
            "code": "int zero_out_file_contents_00080ec2(int file_descriptor, char *buffer, int buffer_length) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ec2",
            "calling": [
                "_read_r"
            ],
            "imported": false,
            "current_name": "zero_out_file_contents_00080ec2"
        },
        "FUN_00080774": {
            "renaming": {
                "FUN_00080774": "initialize_adc_00080774",
                "context": "ctx",
                "puVar1": "clock_ptr",
                "puVar2": "data_ptr",
                "iVar3": "pin3",
                "iVar4": "pin4",
                "iVar5": "pin5",
                "iVar6": "return_val",
                "ulPin": "pin_num",
                "uVar7": "next_pin_num",
                "DAT_0008087c": "data_array",
                "DAT_00080880": "pin_config_array",
                "DAT_00080884": "pin0",
                "DAT_00080888": "pin1",
                "DAT_0008088c": "pin2",
                "DAT_00080890": "pin6",
                "DAT_00080894": "adc_mode",
                "DAT_00080898": "adc_module"
            },
            "code": "int initialize_adc_00080774(EVP_PKEY_CTX *context) {\n  uint32_t pin_num;\n  uint32_t clock_speed = *(uint *)PTR_SystemCoreClock_00080878 / 1000 - 1;\n  pinMode(LED_BUILTIN, OUTPUT);\n  memset(DAT_00080884 + 0xa0, 0xff, 4);\n  memset(DAT_00080888 + 0xa0, 0xff, 4);\n  memset(DAT_0008088c + 0xa0, 0xff, 4);\n  memset(DAT_00080890 + 0xa0, 0xff, 4);\n  PIO_Configure(DAT_00080884, 1, 0x300, 0);\n  digitalWrite(LED_BUILTIN, HIGH);\n  PIO_Configure(DAT_00080884, 1, 0xc00, 0);\n  PIO_Configure(DAT_00080884, 1, 0x3000, 0);\n  PIO_Configure(DAT_0008088c, 2, 0x30, 0);\n  PIO_Configure(DAT_00080888, 1, 0xc00, 0);\n  PIO_Configure(DAT_00080884, 1, 3, 0);\n  PIO_Configure(DAT_00080888, 1, 0xc000, 0);\n  pmc_enable_periph_clk(0x25);\n  adc_initialize_adc_00080774(DAT_00080898, *(undefined4 *)PTR_SystemCoreClock_00080878, DAT_00080894, 0xc);\n  adc_configure_timing(DAT_00080898, 0, 0x300000, 1);\n  adc_configure_trigger(DAT_00080898, 0, 0);\n  adc_disable_interrupt(DAT_00080898, 0xffffffff);\n  pin_num = 0;\n  do {\n    digitalWrite(pin_num, LOW);\n    pin_num++;\n  } while (pin_num != 0x4f);\n  analogOutputInit();\n  return adc_disable_all_channel(DAT_00080898);\n}",
            "called": [
                "SystemInit",
                "adc_disable_all_channel",
                "adc_configure_timing",
                "adc_disable_interrupt",
                "PIO_Configure",
                "__libc_init_array",
                "pmc_enable_periph_clk",
                "digitalWrite",
                "adc_init",
                "analogOutputInit",
                "adc_configure_trigger"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080774",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_adc_00080774"
        },
        "FUN_00081624": {
            "renaming": {
                "FUN_00081624": "count_pulse_00081624",
                "pin": "pin_number",
                "state": "state",
                "timeout": "timeout_in_microseconds",
                "puVar1": "system_clock",
                "uVar2": "pulse_count",
                "uVar3": "pin_description_value",
                "PTR_SystemCoreClock_0008167c": "system_clock",
                "PTR_g_APinDescription_00081678": "pin_description",
                "DAT_00081680": "constant_value"
            },
            "code": "uint32_t count_pulse_00081624(uint32_t pin_number, uint32_t state, uint32_t timeout_in_microseconds)\n{\n  uint32_t* PTR_SystemCoreClock_0008167c = PTR_SystemCoreClock_0008167c;\n  uint32_t PTR_g_APinDescription_00081678 = PTR_g_APinDescription_00081678;\n  uint32_t pin_offset = pin_number * 0x1c;\n  uint32_t PTR_g_APinDescription_00081678_address = PTR_g_APinDescription_00081678 + pin_offset;\n  uint32_t PTR_g_APinDescription_00081678_value = *(uint32_t*)(PTR_g_APinDescription_00081678_address + 4);\n  if (state == 0) {\n    PTR_g_APinDescription_00081678_value = 0;\n  }\n  uint32_t pulse_count = countPulseASM(*(int*)(PTR_g_APinDescription_00081678_address) + 0x3c, *(uint32_t*)(PTR_g_APinDescription_00081678_address + 4), PTR_g_APinDescription_00081678_value, ((*(uint32_t*)PTR_SystemCoreClock_0008167c / DAT_00081680) * timeout_in_microseconds) / 0x12);\n  if (pulse_count != 0) {\n    pulse_count = (uint32_t)((ulonglong)(pulse_count * 18000 + 16000) / ((ulonglong)*(uint32_t*)PTR_SystemCoreClock_0008167c / 1000));\n  }\n  return pulse_count;\n}",
            "called": [
                "countPulseASM"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081624",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "count_pulse_00081624"
        },
        "FUN_00080ec8": {
            "renaming": {
                "FUN_00080ec8": "copy_to_data_00080ec8",
                "file_UNUSED": "file_unused",
                "ptr": "data_ptr",
                "len": "data_len",
                "iVar1": "index",
                "DAT_00080ee8": "data_buffer"
            },
            "code": "int copy_to_data_00080ec8(int file_unused, char *data_ptr, int data_len) {\n  int index;\n  for (index = 0; index < data_len; index++) {\n    do {\n    } while (-1 < *(int *)(DAT_00080ee8 + 0x14) << 0x1e);\n    *(uint *)(DAT_00080ee8 + 0x1c) = (uint)(byte)data_ptr[index];\n  }\n  return data_len & ~(data_len >> 0x1f);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ec8",
            "calling": [
                "_write_r"
            ],
            "imported": false,
            "current_name": "copy_to_data_00080ec8"
        },
        "FUN_0008117a": {
            "renaming": {
                "FUN_0008117a": "print_and_get_size_0008117a",
                "this": "this",
                "num": "number",
                "base": "base",
                "sVar1": "print_size",
                "sVar2": "total_size"
            },
            "code": "size_t __thiscall Print::print_and_get_size_0008117a(Print *this, int number, int base)\n{\n  size_t print_size = print(this, number, base);\n  size_t total_size = this->get_total_size();\n  return total_size + print_size;\n}",
            "called": [
                "println",
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008117a",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "print_and_get_size_0008117a"
        },
        "FUN_000843e0": {
            "renaming": {
                "FUN_000843e0": "close_file_with_error_handling_000843e0",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "puVar1": "error_ptr",
                "iVar2": "close_result"
            },
            "code": "void close_file_with_error_handling_000843e0(int *error_code, int file_descriptor){\n    undefined *error_ptr;\n    int close_result;\n    error_ptr = PTR_errno_00084400;\n    *(undefined4 *)PTR_errno_00084400 = 0;\n    close_result = _close(file_descriptor);\n    if ((close_result == -1) && (*(int *)error_ptr != 0)) {\n        *error_code = *(int *)error_ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000843e0",
            "calling": [
                "__sclose"
            ],
            "imported": false,
            "current_name": "close_file_with_error_handling_000843e0"
        },
        "FUN_000817f0": {
            "renaming": {
                "FUN_000817f0": "allocate_memory_000817f0",
                "__size": "size",
                "pvVar1": "allocated_ptr"
            },
            "code": "void *allocate_memory_000817f0(size_t size)\n{\n  void *allocated_ptr;\n  allocated_ptr = (void *)_allocate_memory_000817f0_r(*(undefined4 *)PTR__impure_ptr_000817fc, size);\n  return allocated_ptr;\n}",
            "called": [
                "_malloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000817f0",
            "calling": [
                "__register_exitproc"
            ],
            "imported": false,
            "current_name": "allocate_memory_000817f0"
        },
        "FUN_00080eba": {
            "renaming": {
                "FUN_00080eba": "return_always_true_00080eba",
                "file_UNUSED": "file_unused"
            },
            "code": "int return_always_true_00080eba(int file_unused)\n{\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eba",
            "calling": [
                "_isatty_r"
            ],
            "imported": false,
            "current_name": "return_always_true_00080eba"
        },
        "FUN_0008173c": {
            "renaming": {
                "FUN_0008173c": "register_exit_process_0008173c",
                "param_1": "exit_code",
                "param_2": "func_ptr",
                "param_3": "arg_ptr",
                "__register_exitproc": "register_exit_proc",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void register_exit_process_0008173c(int exit_code, void (*func_ptr)(void), void *arg_ptr, void *dso_handle) {\n    __register_exitproc(exit_code, func_ptr, arg_ptr, dso_handle);\n    return;\n}",
            "called": [
                "__register_exitproc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008173c",
            "calling": [
                "__aeabi_atexit"
            ],
            "imported": false,
            "current_name": "register_exit_process_0008173c"
        },
        "FUN_00081fac": {
            "renaming": {
                "FUN_00081fac": "FUNC_00081fac"
            },
            "code": "\nint * FUNC_00081fac(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  size_t sVar5;\n  uint uVar6;\n  int *piVar7;\n  uint uVar8;\n  uint uVar9;\n  int *piVar10;\n  int iVar11;\n  \n  if (param_2 == (int *)0x0) {\n    piVar3 = (int *)_malloc_r(param_1,param_3);\n    return piVar3;\n  }\n  __malloc_lock();\n  puVar1 = PTR___malloc_av__00082368;\n  uVar6 = param_2[-1];\n  uVar8 = uVar6 & 0xfffffffc;\n  piVar3 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar9 = 0x10;\n  }\n  else {\n    uVar9 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar9 < 0) goto LAB_00082078;\n  }\n  if (uVar9 < param_3) {\nLAB_00082078:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)uVar8 < (int)uVar9) {\n    iVar2 = (int)piVar3 + uVar8;\n    iVar11 = *(int *)(PTR___malloc_av__00082368 + 8);\n    if (iVar11 == iVar2) {\n      uVar4 = *(uint *)(iVar11 + 4) & 0xfffffffc;\n      iVar2 = iVar11;\n      if ((int)(uVar9 + 0x10) <= (int)(uVar4 + uVar8)) {\n        *(uint *)(PTR___malloc_av__00082368 + 8) = (int)piVar3 + uVar9;\n        *(uint *)((int)piVar3 + uVar9 + 4) = (uVar4 + uVar8) - uVar9 | 1;\n        param_2[-1] = uVar9 | param_2[-1] & 1U;\n        __malloc_unlock(param_1);\n        return param_2;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(iVar2 + 4) & 0xfffffffe) + iVar2 + 4) & 1) == 0) {\n      uVar4 = *(uint *)(iVar2 + 4) & 0xfffffffc;\n      if ((int)uVar9 <= (int)(uVar4 + uVar8)) {\n        iVar11 = *(int *)(iVar2 + 0xc);\n        iVar2 = *(int *)(iVar2 + 8);\n        *(int *)(iVar2 + 0xc) = iVar11;\n        *(int *)(iVar11 + 8) = iVar2;\n        uVar8 = uVar4 + uVar8;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      uVar4 = 0;\n      iVar2 = 0;\n    }\n    if (-1 < (int)(uVar6 << 0x1f)) {\n      piVar10 = (int *)((int)piVar3 - param_2[-2]);\n      uVar6 = (piVar10[1] & 0xfffffffcU) + uVar8;\n      if (iVar2 != 0) {\n        if (iVar2 == iVar11) {\n          if ((int)(uVar9 + 0x10) <= (int)(uVar4 + uVar6)) {\n            piVar3 = piVar10 + 2;\n            iVar2 = *piVar3;\n            iVar11 = piVar10[3];\n            sVar5 = uVar8 - 4;\n            *(int *)(iVar2 + 0xc) = iVar11;\n            *(int *)(iVar11 + 8) = iVar2;\n            if (sVar5 < 0x25) {\n              piVar7 = piVar3;\n              if (0x13 < sVar5) {\n                piVar10[2] = *param_2;\n                piVar10[3] = param_2[1];\n                if (sVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar7 = piVar10 + 4;\n                }\n                else {\n                  piVar10[4] = param_2[2];\n                  piVar10[5] = param_2[3];\n                  if (sVar5 == 0x24) {\n                    piVar10[6] = param_2[4];\n                    piVar7 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar10[7] = *piVar7;\n                    piVar7 = piVar10 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar7 = piVar10 + 6;\n                  }\n                }\n              }\n              *piVar7 = *param_2;\n              piVar7[1] = param_2[1];\n              piVar7[2] = param_2[2];\n            }\n            else {\n              memmove(piVar3,param_2,sVar5);\n            }\n            *(uint *)(puVar1 + 8) = (int)piVar10 + uVar9;\n            *(uint *)((int)piVar10 + uVar9 + 4) = (uVar4 + uVar6) - uVar9 | 1;\n            piVar10[1] = uVar9 | piVar10[1] & 1U;\n            __malloc_unlock(param_1);\n            return piVar3;\n          }\n        }\n        else {\n          uVar4 = uVar4 + uVar6;\n          if ((int)uVar9 <= (int)uVar4) {\n            iVar11 = *(int *)(iVar2 + 0xc);\n            iVar2 = *(int *)(iVar2 + 8);\n            *(int *)(iVar2 + 0xc) = iVar11;\n            *(int *)(iVar11 + 8) = iVar2;\n            piVar7 = piVar10 + 2;\n            iVar2 = *piVar7;\n            iVar11 = piVar10[3];\n            sVar5 = uVar8 - 4;\n            *(int *)(iVar2 + 0xc) = iVar11;\n            *(int *)(iVar11 + 8) = iVar2;\n            uVar8 = uVar4;\n            if (sVar5 < 0x25) {\n              piVar3 = piVar7;\n              if (0x13 < sVar5) {\n                piVar10[2] = *param_2;\n                piVar10[3] = param_2[1];\n                if (sVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar3 = piVar10 + 4;\n                }\n                else {\n                  piVar10[4] = param_2[2];\n                  piVar10[5] = param_2[3];\n                  if (sVar5 == 0x24) {\n                    piVar10[6] = param_2[4];\n                    piVar3 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar10[7] = *piVar3;\n                    piVar3 = piVar10 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar3 = piVar10 + 6;\n                  }\n                }\n              }\n              *piVar3 = *param_2;\n              piVar3[1] = param_2[1];\n              piVar3[2] = param_2[2];\n              uVar6 = piVar10[1];\n              piVar3 = piVar10;\n              param_2 = piVar7;\n            }\n            else {\n              memmove(piVar7,param_2,sVar5);\n              uVar6 = piVar10[1];\n              piVar3 = piVar10;\n              param_2 = piVar7;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)uVar9 <= (int)uVar6) {\n        piVar7 = piVar10 + 2;\n        iVar2 = *piVar7;\n        iVar11 = piVar10[3];\n        sVar5 = uVar8 - 4;\n        *(int *)(iVar2 + 0xc) = iVar11;\n        *(int *)(iVar11 + 8) = iVar2;\n        uVar8 = uVar6;\n        if (sVar5 < 0x25) {\n          piVar3 = piVar7;\n          if (0x13 < sVar5) {\n            piVar10[2] = *param_2;\n            piVar10[3] = param_2[1];\n            if (sVar5 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar3 = piVar10 + 4;\n            }\n            else {\n              piVar10[4] = param_2[2];\n              piVar10[5] = param_2[3];\n              if (sVar5 == 0x24) {\n                piVar10[6] = param_2[4];\n                piVar3 = param_2 + 5;\n                param_2 = param_2 + 6;\n                piVar10[7] = *piVar3;\n                piVar3 = piVar10 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar3 = piVar10 + 6;\n              }\n            }\n          }\n          *piVar3 = *param_2;\n          piVar3[1] = param_2[1];\n          piVar3[2] = param_2[2];\n          uVar6 = piVar10[1];\n          piVar3 = piVar10;\n          param_2 = piVar7;\n        }\n        else {\n          memmove(piVar7,param_2,sVar5);\n          uVar6 = piVar10[1];\n          piVar3 = piVar10;\n          param_2 = piVar7;\n        }\n        goto LAB_00082088;\n      }\n    }\n    piVar10 = (int *)_malloc_r(param_1,param_3);\n    if (piVar10 == (int *)0x0) goto LAB_000820a0;\n    uVar6 = param_2[-1];\n    if (piVar10 + -2 != (int *)((uVar6 & 0xfffffffe) + (int)piVar3)) {\n      sVar5 = uVar8 - 4;\n      if (sVar5 < 0x25) {\n        piVar3 = param_2;\n        piVar7 = piVar10;\n        if (0x13 < sVar5) {\n          *piVar10 = *param_2;\n          piVar10[1] = param_2[1];\n          if (sVar5 < 0x1c) {\n            piVar3 = param_2 + 2;\n            piVar7 = piVar10 + 2;\n          }\n          else {\n            piVar10[2] = param_2[2];\n            piVar10[3] = param_2[3];\n            if (sVar5 == 0x24) {\n              piVar10[4] = param_2[4];\n              piVar10[5] = param_2[5];\n              piVar3 = param_2 + 6;\n              piVar7 = piVar10 + 6;\n            }\n            else {\n              piVar3 = param_2 + 4;\n              piVar7 = piVar10 + 4;\n            }\n          }\n        }\n        *piVar7 = *piVar3;\n        piVar7[1] = piVar3[1];\n        piVar7[2] = piVar3[2];\n      }\n      else {\n        memmove(piVar10,param_2,sVar5);\n      }\n      _free_r(param_1,param_2);\n      goto LAB_000820a0;\n    }\n    uVar8 = uVar8 + (piVar10[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  uVar4 = uVar8 - uVar9;\n  piVar10 = param_2;\n  if (uVar4 < 0x10) {\n    piVar3[1] = uVar6 & 1 | uVar8;\n    *(uint *)((int)piVar3 + uVar8 + 4) = *(uint *)((int)piVar3 + uVar8 + 4) | 1;\n  }\n  else {\n    piVar3[1] = uVar6 & 1 | uVar9;\n    *(uint *)((int)piVar3 + uVar9 + 4) = uVar4 | 1;\n    *(uint *)((int)piVar3 + uVar4 + uVar9 + 4) = *(uint *)((int)piVar3 + uVar4 + uVar9 + 4) | 1;\n    _free_r(param_1,(int)piVar3 + uVar9 + 8);\n  }\nLAB_000820a0:\n  __malloc_unlock(param_1);\n  return piVar10;\n}\n\n",
            "called": [
                "__malloc_lock",
                "_free_r",
                "_malloc_r",
                "__malloc_unlock",
                "memmove"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081fac",
            "calling": [
                "realloc",
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "FUNC_00081fac"
        },
        "FUN_00081190": {
            "renaming": {
                "FUN_00081190": "tick_countdown_00081190",
                "PTR_ticks_000811a8": "PTR_ticks",
                "DAT_000811ac": "DAT_callback"
            },
            "code": "void tick_countdown_00081190(void)\n{\n  int countdown_value = *(int *)PTR_ticks_000811a8_000811a8;\n  if (countdown_value != -1)\n  {\n    countdown_value--;\n    *(int *)PTR_ticks_000811a8_000811a8 = countdown_value;\n    if (countdown_value == 0)\n    {\n      (*DAT_000811ac)();\n    }\n  }\n  return;\n}",
            "called": [
                "banzai"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081190",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "tick_countdown_00081190"
        },
        "FUN_000805e8": {
            "renaming": {
                "__thiscall Servo::FUN_000805e8": "servo_controller",
                "this": "servo",
                "pin": "pin_number",
                "min": "min_angle",
                "max": "max_angle",
                "bVar1": "servo_data",
                "puVar2": "servo_pointer",
                "pTVar3": "timer",
                "channel": "channel",
                "id": "id",
                "iVar4": "i",
                "uVar5": "pin_number",
                "FUN_000805e8": "servo_controller_000805e8"
            },
            "code": "uint8_t __thiscall servo_controller_000805e8(Servo *servo, int pin, int min_angle, int max_angle) {\n  byte servo_data;\n  undefined *servo_pointer;\n  Tc *timer;\n  uint32_t channel;\n  uint32_t id;\n  int i;\n  uint pin_number;\n  \n  if (servo->servoIndex > 59) goto LAB_00080660;\n  pinMode(pin, OUTPUT);\n  servo_pointer = PTR_servos_00080694;\n  pin_number = (uint)servo->servoIndex;\n  servo_data = PTR_servos_00080694[pin_number * 8];\n  servo->max = (int8_t)((0x960U - max_angle) / 4);\n  channel = pin_number / 12;\n  servo_pointer[pin_number * 8] = servo_data & 0xc0 | (byte)pin & 0x3f;\n  servo->min = (int8_t)((0x220U - min_angle) / 4);\n  i = 0;\n  do {\n    if ((int)((uint)(byte)servo_pointer[(i + channel * 12) * 8] << 0x19) < 0) goto LAB_00080652;\n    i++;\n  } while (i != 12);\n  timer = DAT_00080698;\n  if (channel == 0) {\n    id = 0x1e;\nLAB_0008064c:\n    _initISR(timer, channel, id, (IRQn_Type)id);\n  }\n  else {\n    if (channel == 1) {\n      id = 0x1f;\n      goto LAB_0008064c;\n    }\n    if (channel == 2) {\n      id = 0x20;\n      goto LAB_0008064c;\n    }\n    timer = DAT_0008069c;\n    if (channel == 3) {\n      channel = 2;\n      id = 0x1d;\n      goto LAB_0008064c;\n    }\n    if (channel == 4) {\n      channel = 0;\n      id = 0x1b;\n      goto LAB_0008064c;\n    }\n  }\nLAB_00080652:\n  servo_pointer[(uint)servo->servoIndex * 8] = servo_pointer[(uint)servo->servoIndex * 8] | 0x40;\nLAB_00080660:\n  return servo->servoIndex;\n}",
            "called": [
                "pinMode",
                "_initISR"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000805e8",
            "calling": [
                "attach"
            ],
            "imported": false,
            "current_name": "servo_controller_000805e8"
        },
        "FUN_00080ebe": {
            "renaming": {
                "FUN_00080ebe": "zero_return_00080ebe",
                "file_UNUSED": "unused_file",
                "ptr_UNUSED": "unused_ptr",
                "dir_UNUSED": "unused_dir"
            },
            "code": "int zero_return_00080ebe(int unused_file, int unused_ptr, int unused_dir) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ebe",
            "calling": [
                "_lseek_r"
            ],
            "imported": false,
            "current_name": "zero_return_00080ebe"
        },
        "FUN_000816d8": {
            "renaming": {
                "FUN_000816d8": "get_tick_count_000816d8",
                "PTR__dwTickCount_000816e0": "tick_count_ptr"
            },
            "code": "uint32_t get_tick_count_000816d8(void)\n{\n    return *(uint32_t*)PTR__dwTickCount_000816e0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816d8",
            "calling": [
                "millis"
            ],
            "imported": false,
            "current_name": "get_tick_count_000816d8"
        },
        "FUN_000815b8": {
            "renaming": {
                "String::FUN_000815b8": "string_compare",
                "this": "string",
                "cstr": "c_string",
                "uVar1": "result",
                "uVar2": "comparison_result",
                "len": "length",
                "buffer": "buffer",
                "FUN_000815b8": "string_compare_000815b8"
            },
            "code": "uchar __thiscall string_compare_000815b8(String *string, char *cstr) {\n  uchar result;\n  uint comparison_result;\n  \n  if (string->length == 0) {\n    if (cstr == NULL) {\n      result = 1;\n    }\n  }\n  else {\n    if (cstr != NULL) {\n      comparison_result = strcmp(string->buffer, cstr);\n      goto compare;\n    }\n    cstr = string->buffer;\n  }\n  comparison_result = (uint)(byte)*cstr;\n  \n  compare:\n  result = 1 - (uchar)comparison_result;\n  if (comparison_result > 1) {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815b8",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "string_compare_000815b8"
        },
        "FUN_00080e28": {
            "renaming": {
                "FUN_00080e28": "count_leading_zeroes_and_call_callbacks_00080e28",
                "DAT_00080e58": "data_pointer",
                "PTR_callbacksPioD_00080e5c": "callbacks_pointer",
                "uVar1": "leading_zeroes",
                "uVar2": "bit_vector",
                "uVar3": "bit_position",
                "uVar4": "callback"
            },
            "code": "void count_leading_zeroes_and_call_callbacks_00080e28() {\n  uint bit_vector = *(uint *)(DAT_00080e58 + 0x4c);\n  while (true) {\n    uint leading_zeroes = count_leading_zeroes(bit_vector);\n    if (leading_zeroes > 0x1f) break;\n    uint bit_position = 0x1f - leading_zeroes;\n    code *callback = *(code **)(PTR_callbacksPioD_00080e5c + bit_position * 4);\n    if (callback != (code *)0x0) {\n      (*callback)();\n    }\n    bit_vector &= ~(1 << bit_position);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e28",
            "calling": [],
            "imported": false,
            "current_name": "count_leading_zeroes_and_call_callbacks_00080e28"
        },
        "FUN_00084220": {
            "renaming": {
                "FUN_00084220": "read_and_update_00084220",
                "param_1": "file_descriptor",
                "param_2": "buffer_address",
                "iVar1": "bytes_read"
            },
            "code": "void read_and_update_00084220(int file_descriptor, int buffer_address) {\n    int bytes_read = _read_r(file_descriptor, (int)*(short *)(buffer_address + 0xe));\n    if (bytes_read >= 0) {\n        *(int *)(buffer_address + 0x50) += bytes_read;\n        return;\n    }\n    *(ushort *)(buffer_address + 0xc) &= 0xefff;\n}",
            "called": [
                "_read_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084220",
            "calling": [],
            "imported": false,
            "current_name": "read_and_update_00084220"
        },
        "FUN_00081750": {
            "renaming": {
                "FUN_00081750": "process_data_00081750",
                "param_1": "data_size",
                "param_2": "data_offset",
                "param_3": "data_ptr",
                "param_4": "data_flags",
                "uStack_8": "size",
                "uStack_4": "offset",
                "_vFUN_00081750_r": "_process_data_r"
            },
            "code": "void process_data_00081750(undefined4 data_size, undefined4 data_offset, undefined4 data_ptr, undefined4 data_flags)\n{\n  undefined4 size = data_size;\n  undefined4 offset = data_offset;\n  _process_data_00081750_r(*(undefined4 *)PTR__impure_ptr_00081774, size, offset, &data_ptr);\n  return;\n}",
            "called": [
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081750",
            "calling": [
                "__assert_func"
            ],
            "imported": false,
            "current_name": "process_data_00081750"
        },
        "FUN_00080db8": {
            "renaming": {
                "FUN_00080db8": "count_leading_zeroes_and_call_callbacks_00080db8",
                "uVar1": "leading_zeros",
                "uVar2": "bit_field",
                "bit_mask": "bit_mask",
                "DAT_00080de8": "DAT_00080de8",
                "PTR_callbacksPioB_00080dec": "PTR_callbacksPioB_00080dec"
            },
            "code": "void count_leading_zeroes_and_call_callbacks_00080db8(void)\n{\n  uint bit_mask;\n  uint bit_field = *(uint *)(DAT_00080de8 + 0x4c);\n  while(true)\n  {\n    uint leading_zeros = count_leading_zeroes(bit_field);\n    if(leading_zeros > 0x1f)\n    {\n      break;\n    }\n    uint bit_index = 0x1f - leading_zeros;\n    if(*(code **)(PTR_callbacksPioB_00080dec + bit_index * 4) != (code *)0x0)\n    {\n      (**(code **)(PTR_callbacksPioB_00080dec + bit_index * 4))();\n    }\n    bit_mask = ~(1 << bit_index);\n    bit_field &= bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080db8",
            "calling": [],
            "imported": false,
            "current_name": "count_leading_zeroes_and_call_callbacks_00080db8"
        },
        "FUN_0008421c": {
            "renaming": {
                "FUN_0008421c": "get_process_id_0008421c"
            },
            "code": "__pid_t get_process_id_0008421c(void)\n{\n  return -1;\n}",
            "called": [
                "_getpid"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008421c",
            "calling": [
                "_raise_r"
            ],
            "imported": false,
            "current_name": "get_process_id_0008421c"
        },
        "FUN_0008089c": {
            "renaming": {
                "FUN_0008089c": "initialize_uart_buffers_0008089c",
                "*puVar1": "rx_buffer1",
                "*puVar2": "tx_buffer1",
                "*this": "rx_buffer3",
                "*this_00": "tx_buffer4",
                "*this_01": "rx_buffer2",
                "*this_02": "tx_buffer2"
            },
            "code": "void initialize_uart_buffers_0008089c(void)\n{\n  RingBuffer *rx_buffer1 = (RingBuffer *)PTR_rx_buffer1_00080930;\n  RingBuffer::RingBuffer(rx_buffer1);\n\n  RingBuffer *tx_buffer1 = (RingBuffer *)PTR_tx_buffer1_00080934;\n  RingBuffer::RingBuffer(tx_buffer1);\n\n  RingBuffer *rx_buffer2 = (RingBuffer *)PTR_rx_buffer2_00080968;\n  RingBuffer::RingBuffer(rx_buffer2);\n\n  RingBuffer *rx_buffer3 = (RingBuffer *)PTR_rx_buffer3_0008093c;\n  RingBuffer::RingBuffer(rx_buffer3);\n\n  RingBuffer *rx_buffer4 = (RingBuffer *)PTR_rx_buffer4_00080944;\n  RingBuffer::RingBuffer(rx_buffer4);\n\n  RingBuffer *tx_buffer2 = (RingBuffer *)PTR_tx_buffer2_0008096c;\n  RingBuffer::RingBuffer(tx_buffer2);\n\n  RingBuffer *tx_buffer3 = (RingBuffer *)PTR_tx_buffer3_00080948;\n  RingBuffer::RingBuffer(tx_buffer3);\n\n  RingBuffer *tx_buffer4 = (RingBuffer *)PTR_tx_buffer4_0008094c;\n  RingBuffer::RingBuffer(tx_buffer4);\n\n  UARTClass::UARTClass((UARTClass *)PTR_Serial_00080940, DAT_00080938, UART_IRQn, 8, rx_buffer1, tx_buffer1);\n\n  USARTClass::USARTClass((USARTClass *)PTR_Serial1_00080954, DAT_00080950, USART0_IRQn, 0x11, rx_buffer2, tx_buffer2);\n\n  USARTClass::USARTClass((USARTClass *)PTR_Serial2_0008095c, DAT_00080958, USART1_IRQn, 0x12, rx_buffer3, tx_buffer3);\n\n  USARTClass::USARTClass((USARTClass *)PTR_Serial3_00080964, DAT_00080960, USART3_IRQn, 0x14, rx_buffer4, tx_buffer4);\n}\n",
            "called": [
                "UARTClass",
                "USARTClass",
                "RingBuffer"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008089c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_uart_buffers_0008089c"
        },
        "FUN_000816e4": {
            "renaming": {
                "FUN_000816e4": "set_flag_000816e4",
                "param_1": "flag_address",
                "PTR_": "pointer_",
                "DAT_": "data_"
            },
            "code": "void set_flag_000816e4(int flag_address)\n{\n    int flag_value = 0x8000;\n    *(int *)(flag_address + 4) = flag_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816e4",
            "calling": [
                "_watchdogDefaultSetup"
            ],
            "imported": false,
            "current_name": "set_flag_000816e4"
        },
        "FUN_000817c8": {
            "renaming": {
                "FUN_000817c8": "process_data_000817c8",
                "param_1": "data",
                "param_2": "ptr_to_data_2",
                "param_3": "ptr_to_data_3",
                "param_4": "ptr_to_data_4",
                "uStack_c": "data_2",
                "uStack_8": "data_3",
                "uStack_4": "data_4"
            },
            "code": "void process_data_000817c8(int data, int* ptr_to_data_2, int* ptr_to_data_3, int* ptr_to_data_4)\n{\n  int data_2 = *ptr_to_data_2;\n  int data_3 = *ptr_to_data_3;\n  int data_4 = *ptr_to_data_4;\n  call_helper_function(*(int *)PTR__impure_ptr_000817ec, *(int *)(*(int *)PTR__impure_ptr_000817ec + 8), data, &data_2);\n  return;\n}",
            "called": [
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000817c8",
            "calling": [
                "_exit"
            ],
            "imported": false,
            "current_name": "process_data_000817c8"
        },
        "FUN_00080750": {
            "renaming": {
                "FUN_00080750": "handle_uart_interrupt_00080750",
                "PTR_Serial1_00080758": "serial1_ptr"
            },
            "code": "void handle_uart_interrupt_00080750(void)\n{\n  UARTClass::IrqHandler((UARTClass *)PTR_Serial1_00080758);\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080750",
            "calling": [],
            "imported": false,
            "current_name": "handle_uart_interrupt_00080750"
        },
        "FUN_00080f0a": {
            "renaming": {
                "FUN_00080f0a": "do_nothing_00080f0a"
            },
            "code": "\nvoid do_nothing_00080f0a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f0a",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "do_nothing_00080f0a"
        },
        "FUN_00080ea4": {
            "renaming": {
                "FUN_00080ea4": "negative_one_return_00080ea4",
                "cOld_UNUSED": "old_string_unused",
                "cNew_UNUSED": "new_string_unused"
            },
            "code": "int negative_one_return_00080ea4(char* old_string_unused, char* new_string_unused) { return -1; }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ea4",
            "calling": [],
            "imported": false,
            "current_name": "negative_one_return_00080ea4"
        },
        "FUN_00082814": {
            "renaming": {
                "FUN_00082814": "call_function_with_pid_and_signal_00082814",
                "__pid": "pid",
                "__sig": "signal",
                "iVar1": "result"
            },
            "code": "int call_function_with_pid_and_signal_00082814(__pid_t pid, int signal) {\n  int result = _call_function_with_pid_and_signal_00082814_r(*(undefined4 *)PTR__impure_ptr_00082820, pid, signal);\n  return result;\n}",
            "called": [
                "_kill_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082814",
            "calling": [],
            "imported": false,
            "current_name": "call_function_with_pid_and_signal_00082814"
        },
        "FUN_00080f0c": {
            "renaming": {
                "FUN_00080f0c": "configure_pin_00080f0c",
                "ulPin": "pin",
                "ulMode": "mode",
                "*puVar1": "pin_desc_ptr",
                "*puVar2": "pin_status_ptr",
                "uVar3": "pio_config",
                "bVar4": "pin_mode",
                "bVar5": "pin_status",
                "iVar6": "pin_desc_index",
                "iVar7": "pin_peripheral_id"
            },
            "code": "void configure_pin_00080f0c(uint32_t pin, uint32_t mode)\n{\n  uint8_t* pin_status_ptr = g_pin_status;\n  PinDescription* pin_desc_ptr = g_pin_desc;\n  if (pin_desc_ptr[pin].ulPinAttribute != 0)\n  {\n    if ((pin_status_ptr[pin] & 0xf) == PIN_STATUS_ANALOG)\n    {\n      adc_disable_channel(ADC, pin_desc_ptr[pin].ulADCChannelNumber);\n    }\n    uint8_t pin_status = pin_status_ptr[pin];\n    uint8_t pin_mode = pin_status & 0xf;\n    if ((pin_mode < PIN_MODE_PULLUP) && (pin_status != 0))\n    {\n      if (pin_mode == PIN_MODE_PULLDOWN)\n      {\n        if (mode == PIN_MODE_INPUT_PULLUP)\n        {\n          return;\n        }\n      }\n      else if (pin_mode == PIN_MODE_INPUT)\n      {\n        if (mode == PIN_MODE_OUTPUT)\n        {\n          return;\n        }\n      }\n      else if (pin_mode == PIN_MODE_OUTPUT)\n      {\n        if (mode == PIN_MODE_INPUT)\n        {\n          return;\n        }\n        else\n        {\n          goto configure_pin_00080f0c_output;\n        }\n      }\n    }\n    if (mode == PIN_MODE_INPUT)\n    {\n      int pin_desc_index = pin * sizeof(PinDescription);\n      int pin_peripheral_id = pin_desc_ptr[pin].ulPeripheralId;\n      pmc_enable_periph_clk(pin_peripheral_id);\n      PIO_Configure(pin_desc_ptr[pin_desc_index].pPort, PIO_INPUT, pin_desc_ptr[pin_desc_index].ulPinType, pin_desc_ptr[pin_desc_index].ulPinConfiguration);\n      pin_status = (pin_status & 0xf0) | PIN_STATUS_INPUT;\n    }\n    else if (mode == PIN_MODE_OUTPUT)\n    {\n      configure_pin_00080f0c_output:\n      int pin_desc_index = pin * sizeof(PinDescription);\n      int pin_peripheral_id = pin_desc_ptr[pin].ulPeripheralId;\n      pmc_enable_periph_clk(pin_peripheral_id);\n      PIO_Configure(pin_desc_ptr[pin_desc_index].pPort, PIO_OUTPUT_0, pin_desc_ptr[pin_desc_index].ulPinType, pin_desc_ptr[pin_desc_index].ulPinConfiguration);\n      pin_status = (pin_status & 0xf0) | PIN_STATUS_OUTPUT;\n    }\n    else if (mode == PIN_MODE_INPUT_PULLUP)\n    {\n      int pin_desc_index = pin * sizeof(PinDescription);\n      int pin_peripheral_id = pin_desc_ptr[pin].ulPeripheralId;\n      pmc_enable_periph_clk(pin_peripheral_id);\n      PIO_Configure(pin_desc_ptr[pin_desc_index].pPort, PIO_INPUT, pin_desc_ptr[pin_desc_index].ulPinType, pin_desc_ptr[pin_desc_index].ulPinConfiguration);\n      PIO_SetOutput(pin_desc_ptr[pin_desc_index].pPort, pin_desc_ptr[pin_desc_index].ulPinType, pin_desc_ptr[pin_desc_index].ulPinConfiguration, 1);\n      pin_status = (pin_status & 0xf0) | PIN_STATUS_INPUT_PULLUP;\n    }\n    else\n    {\n      return;\n    }\n    pin_status_ptr[pin] = pin_status;\n    if (PIO_GetOutputDataStatus(pin_desc_ptr[pin_desc_index].pPort) == 0)\n    {\n      pmc_disable_periph_clk(pin_peripheral_id);\n    }\n  }\n}\n",
            "called": [
                "PIO_Configure",
                "pmc_enable_periph_clk",
                "pmc_disable_periph_clk",
                "adc_disable_channel"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f0c",
            "calling": [
                "attach",
                "setup",
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "configure_pin_00080f0c"
        },
        "FUN_000844e0": {
            "renaming": {
                "FUN_000844e0": "seek_file_000844e0",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "offset",
                "param_4": "whence",
                "puVar1": "error_ptr",
                "iVar2": "seek_result"
            },
            "code": "void seek_file_000844e0(int *error_code, int file_descriptor, int offset, int whence) {\n    int seek_result = 0;\n    int *error_ptr = PTR_errno_00084504;\n    *(int *)error_ptr = 0;\n    seek_result = _lseek(file_descriptor, offset, whence);\n    if (seek_result == -1 && *(int *)error_ptr != 0) {\n        *error_code = *(int *)error_ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "_lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844e0",
            "calling": [
                "__sseek",
                "__swrite"
            ],
            "imported": false,
            "current_name": "seek_file_000844e0"
        },
        "FUN_00083b10": {
            "renaming": {
                "FUN_00083b10": "FUNC_00083b10"
            },
            "code": "\nvoid FUNC_00083b10(undefined4 param_1,int param_2)\n\n{\n  undefined *puVar1;\n  uint uVar2;\n  int iVar3;\n  int iVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  undefined *puVar8;\n  \n  if (param_2 == 0) {\n    return;\n  }\n  __malloc_lock();\n  puVar8 = PTR___malloc_av__00083c98;\n  uVar2 = *(uint *)(param_2 + -4);\n  iVar6 = param_2 + -8;\n  uVar5 = uVar2 & 0xfffffffe;\n  iVar4 = iVar6 + uVar5;\n  uVar7 = *(uint *)(iVar4 + 4) & 0xfffffffc;\n  if (*(int *)(PTR___malloc_av__00083c98 + 8) == iVar4) {\n    uVar7 = uVar7 + uVar5;\n    if (-1 < (int)(uVar2 << 0x1f)) {\n      iVar6 = iVar6 - *(int *)(param_2 + -8);\n      iVar3 = *(int *)(iVar6 + 0xc);\n      iVar4 = *(int *)(iVar6 + 8);\n      uVar7 = uVar7 + *(int *)(param_2 + -8);\n      *(int *)(iVar4 + 0xc) = iVar3;\n      *(int *)(iVar3 + 8) = iVar4;\n    }\n    uVar2 = *(uint *)PTR___malloc_trim_threshold_00083ca0;\n    *(uint *)(iVar6 + 4) = uVar7 | 1;\n    *(int *)(puVar8 + 8) = iVar6;\n    if (uVar2 <= uVar7) {\n      _malloc_trim_r(param_1,*(undefined4 *)PTR___malloc_top_pad_00083ca4);\n    }\n  }\n  else {\n    uVar2 = uVar2 & 1;\n    *(uint *)(iVar4 + 4) = uVar7;\n    if (uVar2 == 0) {\n      iVar6 = iVar6 - *(int *)(param_2 + -8);\n      puVar1 = *(undefined **)(iVar6 + 8);\n      uVar5 = uVar5 + *(int *)(param_2 + -8);\n      if (puVar1 == puVar8 + 8) {\n        uVar2 = 1;\n      }\n      else {\n        iVar3 = *(int *)(iVar6 + 0xc);\n        *(int *)(puVar1 + 0xc) = iVar3;\n        *(undefined **)(iVar3 + 8) = puVar1;\n      }\n    }\n    else {\n      uVar2 = 0;\n    }\n    if (-1 < *(int *)(iVar4 + uVar7 + 4) << 0x1f) {\n      uVar5 = uVar5 + uVar7;\n      puVar1 = *(undefined **)(iVar4 + 8);\n      if ((uVar2 == 0) && (puVar1 == PTR_PTR___malloc_av__00083c9c)) {\n        *(int *)(puVar8 + 0x14) = iVar6;\n        *(int *)(puVar8 + 0x10) = iVar6;\n        *(undefined **)(iVar6 + 0xc) = puVar1;\n        *(undefined **)(iVar6 + 8) = puVar1;\n        *(uint *)(iVar6 + 4) = uVar5 | 1;\n        *(uint *)(iVar6 + uVar5) = uVar5;\n        goto LAB_00083ba4;\n      }\n      iVar4 = *(int *)(iVar4 + 0xc);\n      *(int *)(puVar1 + 0xc) = iVar4;\n      *(undefined **)(iVar4 + 8) = puVar1;\n    }\n    *(uint *)(iVar6 + 4) = uVar5 | 1;\n    *(uint *)(iVar6 + uVar5) = uVar5;\n    if (uVar2 == 0) {\n      if (uVar5 < 0x200) {\n        uVar2 = *(uint *)(puVar8 + 4);\n        puVar1 = puVar8 + (uVar5 & 0xfffffff8);\n        iVar4 = *(int *)(puVar1 + 8);\n        *(int *)(iVar6 + 8) = iVar4;\n        *(undefined **)(iVar6 + 0xc) = puVar1;\n        *(uint *)(puVar8 + 4) = uVar2 | 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU);\n        *(int *)(puVar1 + 8) = iVar6;\n        *(int *)(iVar4 + 0xc) = iVar6;\n        __malloc_unlock(param_1);\n        return;\n      }\n      uVar2 = uVar5 >> 9;\n      if (uVar2 < 5) {\n        iVar4 = (uVar5 >> 6) + 0x38;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x15) {\n        iVar4 = uVar2 + 0x5b;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x55) {\n        iVar4 = (uVar5 >> 0xc) + 0x6e;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x155) {\n        iVar4 = (uVar5 >> 0xf) + 0x77;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x555) {\n        iVar4 = (uVar5 >> 0x12) + 0x7c;\n        iVar3 = iVar4 * 2;\n      }\n      else {\n        iVar3 = 0xfc;\n        iVar4 = 0x7e;\n      }\n      puVar8 = puVar8 + iVar3 * 4;\n      puVar1 = *(undefined **)(puVar8 + 8);\n      if (puVar1 == puVar8) {\n        *(uint *)(PTR___malloc_av__00083c98 + 4) =\n             *(uint *)(PTR___malloc_av__00083c98 + 4) | 1 << (iVar4 >> 2 & 0xffU);\n        puVar8 = puVar1;\n      }\n      else {\n        do {\n          if ((*(uint *)(puVar1 + 4) & 0xfffffffc) <= uVar5) break;\n          puVar1 = *(undefined **)(puVar1 + 8);\n        } while (puVar8 != puVar1);\n        puVar8 = *(undefined **)(puVar1 + 0xc);\n      }\n      *(undefined **)(iVar6 + 0xc) = puVar8;\n      *(undefined **)(iVar6 + 8) = puVar1;\n      *(int *)(puVar8 + 8) = iVar6;\n      *(int *)(puVar1 + 0xc) = iVar6;\n    }\n  }\nLAB_00083ba4:\n  __malloc_unlock(param_1);\n  return;\n}\n\n",
            "called": [
                "__malloc_lock",
                "_malloc_trim_r",
                "__malloc_unlock"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083b10",
            "calling": [
                "_realloc_r",
                "__sflush_r",
                "_malloc_r",
                "__swsetup_r",
                "_fclose_r",
                "__sfvwrite_r",
                "free"
            ],
            "imported": false,
            "current_name": "FUNC_00083b10"
        },
        "FUN_0008236c": {
            "renaming": {
                "FUN_0008236c": "allocate_memory_0008236c",
                "param_1": "error_code",
                "param_2": "size",
                "puVar1": "error_ptr",
                "pcVar2": "memory_ptr"
            },
            "code": "void allocate_memory_0008236c(int *error_code, int size)\n{\n  undefined *error_ptr = PTR_errno_0008238c;\n  *(undefined4 *)PTR_errno_0008238c = 0;\n  caddr_t memory_ptr = _sbrk(size);\n  if ((memory_ptr == (caddr_t)0xffffffff) && (*(int *)error_ptr != 0))\n  {\n    *error_code = *(int *)error_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_sbrk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008236c",
            "calling": [
                "_malloc_r",
                "_malloc_trim_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_0008236c"
        },
        "FUN_000842a4": {
            "renaming": {
                "FUN_000842a4": "write_character_to_file_000842a4",
                "param_1": "file_descriptor",
                "param_2": "character",
                "param_3": "stream_buffer",
                "param_4": "buffer_size",
                "uVar1": "character_as_ushort",
                "uVar2": "character_as_uint",
                "puVar3": "buffer_pointer",
                "iVar4": "setup_result"
            },
            "code": "uint write_character_to_file_000842a4(int file_descriptor, uint character, undefined4 *stream_buffer, undefined4 buffer_size)\n{\n  ushort character_as_ushort;\n  uint character_as_uint;\n  undefined *buffer_pointer;\n  int setup_result;\n  \n  if ((file_descriptor != 0) && (*(int *)(file_descriptor + 0x38) == 0)) {\n    __sinit();\n  }\n  character_as_ushort = *(ushort *)(stream_buffer + 3);\n  character_as_uint = (uint)character_as_ushort;\n  stream_buffer[2] = stream_buffer[6];\n  if ((-1 < (int)(character_as_uint << 0x1c)) || (setup_result = stream_buffer[4], setup_result == 0)) {\n    setup_result = __swsetup_r(file_descriptor, stream_buffer, character_as_ushort, character_as_uint, buffer_size);\n    if (setup_result != 0) {\n      return 0xffffffff;\n    }\n    character_as_ushort = *(ushort *)(stream_buffer + 3);\n    setup_result = stream_buffer[4];\n    character_as_uint = (uint)character_as_ushort;\n  }\n  character = character & 0xff;\n  if ((int)(character_as_uint << 0x12) < 0) {\n    buffer_pointer = (undefined *)*stream_buffer;\n    setup_result = (int)buffer_pointer - setup_result;\n    if (setup_result < (int)stream_buffer[5]) {\nLAB_000842d6:\n      setup_result = setup_result + 1;\n      goto LAB_000842d8;\n    }\n  }\n  else {\n    stream_buffer[0x19] = stream_buffer[0x19] & 0xffffdfff;\n    buffer_pointer = (undefined *)*stream_buffer;\n    *(ushort *)(stream_buffer + 3) = character_as_ushort | 0x2000;\n    setup_result = (int)buffer_pointer - setup_result;\n    if (setup_result < (int)stream_buffer[5]) goto LAB_000842d6;\n  }\n  setup_result = _fflush_r(file_descriptor, stream_buffer);\n  if (setup_result != 0) {\n    return 0xffffffff;\n  }\n  buffer_pointer = (undefined *)*stream_buffer;\n  setup_result = 1;\nLAB_000842d8:\n  stream_buffer[2] = stream_buffer[2] + -1;\n  *stream_buffer = buffer_pointer + 1;\n  *buffer_pointer = (char)character;\n  if (((stream_buffer[5] == setup_result) ||\n      (((int)((uint)*(ushort *)(stream_buffer + 3) << 0x1f) < 0 && (character == 10)))) &&\n     (setup_result = _fflush_r(file_descriptor, stream_buffer), setup_result != 0)) {\n    return 0xffffffff;\n  }\n  return character;\n}",
            "called": [
                "_fflush_r",
                "__swsetup_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000842a4",
            "calling": [
                "_fputwc_r"
            ],
            "imported": false,
            "current_name": "write_character_to_file_000842a4"
        },
        "FUN_0008074a": {
            "renaming": {
                "FUN_0008074a": "do_nothing_0008074a"
            },
            "code": "\nvoid do_nothing_0008074a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008074a",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_0008074a"
        },
        "FUN_0008074c": {
            "renaming": {
                "FUN_0008074c": "do_nothing_0008074c"
            },
            "code": "\nvoid do_nothing_0008074c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008074c",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_0008074c"
        },
        "FUN_000839b4": {
            "renaming": {
                "FUN_000839b4": "print_string_to_stream_000839b4",
                "param_1": "stream",
                "param_2": "length",
                "param_3": "buffer",
                "uVar1": "max_bytes_per_char",
                "iVar2": "write_result",
                "uVar3": "current_byte",
                "pbVar4": "current_buffer_position",
                "uVar5": "bytes_processed",
                "local_1c": "current_byte_value",
                "abStack_1b": "previous_byte_values"
            },
            "code": "uint print_string_to_stream_000839b4(undefined4 stream, uint length, byte **buffer)\n{\n  uint current_char;\n  int write_result;\n  uint current_byte;\n  byte *current_buffer_position;\n  byte current_byte_value;\n  byte previous_byte_values[3];\n  \n  if (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x12)) {\n    *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x2000;\n    buffer[0x19] = (byte *)((uint)buffer[0x19] | 0x2000);\n  }\n  uint max_bytes_per_char = __locale_mb_cur_max();\n  if ((max_bytes_per_char == 1) && (length - 1 < 0xff)) {\n    current_byte = length & 0xff;\n    current_byte_value = (byte)current_byte;\n  }\n  else {\n    uint bytes_written = _wcrtomb_r(stream, &current_byte_value, length, buffer + 0x17);\n    if (bytes_written == 0xffffffff) {\n      *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (bytes_written == 0) {\n      return length;\n    }\n    current_byte = (uint)current_byte_value;\n  }\n  uint bytes_processed = 0;\n  do {\n    current_buffer_position = buffer[2] + -1;\n    buffer[2] = current_buffer_position;\n    if ((int)current_buffer_position < 0) {\n      if ((int)buffer[6] <= (int)current_buffer_position) {\n        **buffer = (byte)current_byte;\n        current_buffer_position = *buffer;\n        current_byte = (uint)*current_buffer_position;\n        if (current_byte != 10) goto LAB_00083a04;\n      }\n      write_result = __swbuf_r(stream, current_byte, buffer);\n      if (write_result == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **buffer = (byte)current_byte;\n      current_buffer_position = *buffer;\nLAB_00083a04:\n      *buffer = current_buffer_position + 1;\n    }\n    if (max_bytes_per_char <= bytes_processed + 1) {\n      return length;\n    }\n    current_byte = (uint)previous_byte_values[bytes_processed];\n    bytes_processed = bytes_processed + 1;\n  } while( true );\n}",
            "called": [
                "_wcrtomb_r",
                "__swbuf_r",
                "__locale_mb_cur_max"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000839b4",
            "calling": [
                "__sprint_r.part.0"
            ],
            "imported": false,
            "current_name": "print_string_to_stream_000839b4"
        },
        "FUN_00081176": {
            "renaming": {
                "__thiscall Print::FUN_00081176": "print_number",
                "this": "self",
                "n": "number",
                "base": "base",
                "sVar1": "result",
                "sVar2": "second_result",
                "FUN_00081176": "print_number_00081176",
                "FUN_00081176Number": "print_unsigned_number"
            },
            "code": "size_t __thiscall print_number_00081176(Print *self, int number, int base) {\n  size_t result;\n  if (base == 0) {\n    result = (**self->_vptr_Print)(self, number & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    if (number < 0) {\n      result = print_number_00081176(self, '-', 10);\n      result += print_unsigned_number(self, -number, 10);\n      return result;\n    }\n  } else {\n    base &= 0xff;\n  }\n  result = print_unsigned_number(self, number, base);\n  return result;\n}\n",
            "called": [
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081176",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "print_number_00081176"
        },
        "FUN_00080eb0": {
            "renaming": {
                "FUN_00080eb0": "set_file_mode_to_binary_00080eb0",
                "file_UNUSED": "UNUSED",
                "st": "file_stat",
                "st->st_mode": "file_stat->st_mode",
                "0x2000": "S_IFREG | S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH",
                "return 0;": "return 0;"
            },
            "code": "int set_file_mode_to_binary_00080eb0(stat *file_stat) {\n  file_stat->st_mode = S_IFREG | S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eb0",
            "calling": [
                "_fstat_r"
            ],
            "imported": false,
            "current_name": "set_file_mode_to_binary_00080eb0"
        },
        "FUN_00081734": {
            "renaming": {
                "FUN_00081734": "convert_string_to_long_00081734",
                "__nptr": "str",
                "lVar1": "result"
            },
            "code": "long convert_string_to_long_00081734(char *str)\n{\n  long result = strtol(str, (char **)0x0, 10);\n  return result;\n}",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081734",
            "calling": [
                "toInt"
            ],
            "imported": false,
            "current_name": "convert_string_to_long_00081734"
        },
        "FUN_00080768": {
            "renaming": {
                "FUN_00080768": "handle_uart_interrupt_00080768",
                "PTR_Serial3_00080770": "PTR_Serial3"
            },
            "code": "void handle_uart_interrupt_00080768(void)\n{\n  UARTClass::IrqHandler((UARTClass *)PTR_Serial3_00080770);\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080768",
            "calling": [],
            "imported": false,
            "current_name": "handle_uart_interrupt_00080768"
        },
        "FUN_00082824": {
            "renaming": {
                "__sprint_r_part_0": "__sfvwrite_r",
                "param_1": "stream",
                "param_2": "buf",
                "param_3": "px",
                "piVar1": "current_buf_data",
                "iVar2": "write_result",
                "piVar3": "last_buf",
                "uVar4": "i",
                "puVar5": "current_buf_data",
                "uVar6": "current_buf_size",
                "uVar7": "current_buf_size_in_ints",
                "FUN_00082824": "__sfvwrite_r_00082824"
            },
            "code": "int __sfvwrite_r_00082824(int stream, int *buf, int size, int **px) {\n  int *current_buf = *px;\n  int *last_buf = px[2];\n  while (current_buf != (int *)0x0) {\n    uint current_buf_size = current_buf[1];\n    uint current_buf_size_in_ints = current_buf_size >> 2;\n    if (current_buf_size_in_ints != 0) {\n      undefined4 *current_buf_data = (undefined4 *)(*current_buf + -4);\n      uint i = 0;\n      do {\n        current_buf_data++;\n        int write_result = _fputwc_r(stream, *current_buf_data, size);\n        i++;\n        if (write_result == -1) goto LAB_00082864;\n      } while (current_buf_size_in_ints != i);\n      current_buf = *px;\n    }\n    current_buf = (int *)((int)current_buf - (current_buf_size & 0xfffffffc));\n    px[2] = current_buf;\n    px++;\n  }\n  return 0;\n  LAB_00082864:\n  px[2] = (int *)0x0;\n  px[1] = (int *)0x0;\n  return -1;\n}",
            "called": [
                "__sfvwrite_r",
                "_fputwc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082824",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "__sfvwrite_r_00082824"
        },
        "FUN_00080a94": {
            "renaming": {
                "FUN_00080a94": "check_bits_set_in_both_00080a94",
                "param_1": "ptr_param_1",
                "uVar1": "result"
            },
            "code": "uint check_bits_set_in_both_00080a94(uint ptr_param_1, uint param_2)\n{\n  uint result = *(uint *)(ptr_param_1 + 8) & param_2;\n  if (result != 0) {\n    if ((param_2 & *(uint *)(ptr_param_1 + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a94",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "check_bits_set_in_both_00080a94"
        },
        "FUN_00081618": {
            "renaming": {
                "FUN_00081618": "disable_watchdog_timer_00081618",
                "DAT_00081620": "wdt_ptr"
            },
            "code": "void disable_watchdog_timer_00081618(void)\n{\n    WDT_Disable(DAT_00081620);\n    return;\n}",
            "called": [
                "WDT_Disable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081618",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "disable_watchdog_timer_00081618"
        },
        "FUN_0008455c": {
            "renaming": {
                "FUN_0008455c": "calculate_difference_0008455c",
                "param_1": "numerator",
                "param_2": "denominator",
                "param_3": "factor_low",
                "param_4": "factor_high",
                "param_5": "difference",
                "uVar1": "quotient",
                "lVar2": "product"
            },
            "code": "void calculate_difference_0008455c(uint numerator, int denominator, uint factor_low, uint factor_high, int *difference) {\n  uint product = numerator * ((ulonglong)factor_high << 32 | factor_low);\n  uint quotient = product / denominator;\n  difference[0] = numerator - quotient;\n  difference[1] = denominator - ((int)(product >> 32) + (numerator < quotient));\n}",
            "called": [
                "__divdi3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008455c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_difference_0008455c"
        },
        "FUN_00081f00": {
            "renaming": {
                "FUN_00081f00": "write_memory_00081f00",
                "__s": "dest",
                "__c": "value",
                "__n": "num_bytes",
                "puVar1": "word_ptr",
                "puVar2": "dest_ptr",
                "puVar3": "word_ptr",
                "uVar4": "value32",
                "uVar5": "num_words",
                "bVar6": "empty"
            },
            "code": "void * write_memory_00081f00(void *dest, int value, size_t num_bytes) {\n  uint32_t *dest_ptr = (uint32_t *)dest;\n  if (((uint32_t)dest & 3) != 0) {\n    bool empty = num_bytes == 0;\n    uint8_t *byte_ptr = (uint8_t *)dest;\n    num_bytes -= 1;\n    if (empty) {\n      return dest;\n    }\n    while (true) {\n      dest_ptr = (uint32_t *)((int)byte_ptr + 1);\n      *byte_ptr = (uint8_t)value;\n      if (((uint32_t)dest_ptr & 3) == 0) {\n        break;\n      }\n      empty = num_bytes == 0;\n      byte_ptr = (uint8_t *)dest_ptr;\n      num_bytes -= 1;\n      if (empty) {\n        return dest;\n      }\n    }\n  }\n  if (3 < num_bytes) {\n    uint32_t value32 = value & 0xffU | (value & 0xffU) << 8;\n    value32 |= value32 << 0x10;\n    uint32_t num_words = num_bytes;\n    uint32_t *word_ptr = dest_ptr;\n    if (0xf < num_bytes) {\n      num_words = num_bytes - 0x10;\n      do {\n        *word_ptr = value32;\n        word_ptr[1] = value32;\n        word_ptr[2] = value32;\n        word_ptr[3] = value32;\n        word_ptr += 4;\n      } while (word_ptr != (uint32_t *)((int)dest_ptr + (num_words & 0xfffffff0) + 0x10));\n      num_bytes &= 0xf;\n      dest_ptr += ((num_words >> 4) + 1) * 4;\n      num_words = num_bytes;\n      word_ptr = dest_ptr;\n      if (num_bytes < 4) {\n        goto LAB_00081f7c;\n      }\n    }\n    do {\n      num_bytes -= 4;\n      *dest_ptr = value32;\n      dest_ptr += 1;\n    } while (3 < num_bytes);\n    dest_ptr = (uint32_t *)((int)word_ptr + (num_words - 4 & 0xfffffffc) + 4);\n    num_bytes = num_words & 3;\n  }\nLAB_00081f7c:\n  if (num_bytes != 0) {\n    uint8_t *byte_ptr = (uint8_t *)dest_ptr;\n    do {\n      uint32_t *word_ptr = (uint32_t *)((int)byte_ptr + 1);\n      *byte_ptr = (uint8_t)value;\n      byte_ptr = (uint8_t *)word_ptr;\n    } while (word_ptr != (uint32_t *)(num_bytes + (int)dest_ptr));\n  }\n  return dest;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f00",
            "calling": [
                "__sinit",
                "RingBuffer"
            ],
            "imported": false,
            "current_name": "write_memory_00081f00"
        },
        "FUN_0008075c": {
            "renaming": {
                "FUN_0008075c": "handle_serial_interrupt_0008075c",
                "PTR_Serial2_00080764": "PTR_Serial2"
            },
            "code": "void handle_serial_interrupt_0008075c(void)\n{\n  UARTClass::IrqHandler((UARTClass *)PTR_Serial2_00080764);\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008075c",
            "calling": [],
            "imported": false,
            "current_name": "handle_serial_interrupt_0008075c"
        },
        "FUN_00080eaa": {
            "renaming": {
                "FUN_00080eaa": "return_error_00080eaa",
                "file_UNUSED": "file_unused"
            },
            "code": "int return_error_00080eaa(int file_unused)\n{\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eaa",
            "calling": [
                "_close_r"
            ],
            "imported": false,
            "current_name": "return_error_00080eaa"
        },
        "FUN_00084530": {
            "renaming": {
                "FUN_00084530": "divide_by_zero_handler_00084530",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient_ptr",
                "param_4": "remainder_ptr"
            },
            "code": "void divide_by_zero_handler_00084530(int dividend, int divisor, int quotient_ptr, int remainder_ptr)\n{\n  if ((divisor == 0) && (quotient_ptr == 0)) {\n    if (remainder_ptr != 0 || dividend != 0) {\n      dividend = -1;\n    }\n    __aeabi_idiv0(dividend);\n    return;\n  }\n  __gnu_uldivmod_helper();\n  return;\n}",
            "called": [
                "__aeabi_idiv0",
                "__gnu_uldivmod_helper"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084530",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "divide_by_zero_handler_00084530"
        },
        "FUN_00085860": {
            "renaming": {
                "FUN_00085860": "do_nothing_00085860"
            },
            "code": "\nvoid do_nothing_00085860(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085860",
            "calling": [
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "do_nothing_00085860"
        },
        "FUN_00080970": {
            "renaming": {
                "FUN_00080970": "check_available_uart_ports_00080970",
                "iVar1": "available_bytes"
            },
            "code": "void check_available_uart_ports_00080970(void)\n{\n\tint available_bytes;\n\n\tavailable_bytes = UARTClass::available((UARTClass *)PTR_Serial_000809a4);\n\tif (available_bytes > 0) {\n\t\tserialEvent();\n\t}\n\n\tavailable_bytes = UARTClass::available((UARTClass *)PTR_Serial1_000809a8);\n\tif (available_bytes > 0) {\n\t\tserialEvent1();\n\t}\n\n\tavailable_bytes = UARTClass::available((UARTClass *)PTR_Serial2_000809ac);\n\tif (available_bytes > 0) {\n\t\tserialEvent2();\n\t}\n\n\tavailable_bytes = UARTClass::available((UARTClass *)PTR_Serial3_000809b0);\n\tif (available_bytes > 0) {\n\t\tserialEvent3();\n\t}\n}",
            "called": [
                "serialEvent3",
                "serialEvent",
                "available",
                "serialEvent2",
                "serialEvent1"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080970",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "check_available_uart_ports_00080970"
        },
        "FUN_000806ac": {
            "renaming": {
                "FUN_000806ac": "set_position_000806ac",
                "this": "servo",
                "value": "position",
                "servoIndex": "index",
                "min": "min_position",
                "max": "max_position",
                "iVar1": "min_distance_from_min",
                "iVar2": "max_distance_from_min",
                "PTR_servos_000806f4": "servo_address_pointer",
                "PTR_SystemCoreClock_000806ec": "clock_speed_pointer",
                "DAT_000806f0": "frequency_divider"
            },
            "code": "void __thiscall Servo::set_position_000806ac(Servo *this, int position) {\n    int min_distance_from_min = 0x88 - this->min;\n    int max_distance_from_min = min_distance_from_min * 4;\n    if ((position + min_distance_from_min * -4 < 0 == SBORROW4(position, max_distance_from_min)) &&\n       (max_distance_from_min = (600 - this->max) * 4, position <= max_distance_from_min)) {\n      max_distance_from_min = position;\n    }\n    uint32_t servo_address = PTR_servos_000806f4 + (uint)this->servoIndex * 8 + 4;\n    uint32_t clock_speed = *(uint *)PTR_SystemCoreClock_000806ec;\n    uint32_t clock_speed_divided_by_frequency = clock_speed / DAT_000806f0;\n    uint32_t calculated_position = clock_speed_divided_by_frequency * (max_distance_from_min + -2) >> 5;\n    *(uint *)servo_address = calculated_position;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000806ac",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "set_position_000806ac"
        },
        "FUN_20070000": {
            "renaming": {
                "FUN_20070000": "wait_until_flag_is_set_20070000",
                "DAT_2007001c": "global_data_ptr",
                "DAT_20070020": "data_1",
                "DAT_20070028": "data_ptr_2",
                "DAT_20070024": "data_2"
            },
            "code": "void wait_until_flag_is_set_20070000(void)\n{\n  disable_IRQ_interrupts();\n  do {\n  } while (-1 < *(int *)(DAT_2007001c + 8) << 0x1f);\n  *(undefined4 *)(DAT_2007001c + 4) = DAT_20070020;\n  do {\n  } while (-1 < *(int *)(DAT_2007001c + 8) << 0x1f);\n  *DAT_20070028 = DAT_20070024;\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x20070000",
            "calling": [
                "tickReset",
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "wait_until_flag_is_set_20070000"
        },
        "FUN_000834f0": {
            "renaming": {
                "FUN_000834f0": "print_formatted_string_000834f0",
                "param_1": "output_file",
                "param_2": "input_parameter",
                "iVar1": "printf_result",
                "iVar2": "fflush_result",
                "local_488": "buffer_pointer",
                "local_480": "mask",
                "local_47c": "flags",
                "local_47a": "formatting_length",
                "local_478": "flags_pointer",
                "local_474": "buffer_size",
                "local_470": "unused",
                "local_46c": "unused_2",
                "local_464": "unused_3",
                "local_424": "unused_4",
                "auStack_420": "buffer"
            },
            "code": "int print_formatted_string_000834f0(FILE* output_file, int input_parameter)\n{\n    int printf_result;\n    int fflush_result;\n    char buffer[1024];\n    char* buffer_pointer = buffer;\n    unsigned short flags = *(unsigned short*)(input_parameter + 0xC) & 0xFFFD;\n    unsigned short* flags_pointer = (unsigned short*)(input_parameter + 0xC);\n    unsigned short mask = 0x400;\n    unsigned int shifted_flags = (unsigned int)flags << 0x19;\n    unsigned int negative_mask = 0x80000000;\n    unsigned int is_negative = shifted_flags & negative_mask;\n    if (is_negative)\n    {\n        *flags_pointer = *flags_pointer | 0x40;\n    }\n    snprintf(buffer, sizeof(buffer), \"%.*s\", *(unsigned short*)(input_parameter + 0xE), input_parameter + 0x20);\n    printf_result = fprintf(output_file, \"%s\", buffer_pointer);\n    fflush_result = fflush(output_file);\n    if (printf_result < 0 || fflush_result != 0)\n    {\n        printf_result = -1;\n    }\n    return printf_result;\n}",
            "called": [
                "_fflush_r",
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000834f0",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "print_formatted_string_000834f0"
        },
        "FUN_0008125a": {
            "renaming": {
                "FUN_0008125a": "get_next_byte_0008125a",
                "_rx_buffer": "rx_buffer",
                "uVar1": "next_byte",
                "pRVar2": "rx_buffer",
                "_iHead": "_iHead",
                "_iTail": "_iTail",
                "_aucBuffer": "_aucBuffer"
            },
            "code": "int __thiscall UARTClass::get_next_byte_0008125a(UARTClass *this)\n{\n  uint32_t next_byte;\n  RingBuffer *rx_buffer = this->_rx_buffer;\n  if (rx_buffer->_iHead == rx_buffer->_iTail) {\n    next_byte = 0xffffffff;\n  }\n  else {\n    next_byte = (uint32_t)rx_buffer->_aucBuffer[rx_buffer->_iTail];\n  }\n  return next_byte;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008125a",
            "calling": [],
            "imported": false,
            "current_name": "get_next_byte_0008125a"
        },
        "FUN_0008113a": {
            "renaming": {
                "__thiscall Print::FUN_0008113a": "print_number",
                "this": "self",
                "n": "number",
                "base": "base",
                "sVar1": "digits_printed",
                "sVar2": "unsigned_digits_printed",
                "FUN_0008113a": "print_number_0008113a",
                "uint8_t": "unsigned_char",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "size_t __thiscall Print::print_number_0008113a(Print *this,long number,int base)\n{\n  size_t digits_printed;\n  if (base == 0) {\n    digits_printed = (**this->_vptr_Print)(this,number & 0xff);\n    return digits_printed;\n  }\n  if (base == 10) {\n    if (number < 0) {\n      digits_printed = print_number_0008113a(this,'-');\n      digits_printed += print_unsigned_number(this,-number,(uint8_t)base);\n      return digits_printed;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  digits_printed = print_unsigned_number(this,number,(uint8_t)base);\n  return digits_printed;\n}\n",
            "called": [
                "printNumber",
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008113a",
            "calling": [
                "println",
                "print"
            ],
            "imported": false,
            "current_name": "print_number_0008113a"
        },
        "FUN_000810d8": {
            "renaming": {
                "FUN_000810d8": "print_message_000810d8",
                "this": "printer",
                "sVar1": "bytes_written",
                "PTR_DAT_000810e4": "message"
            },
            "code": "size_t __thiscall print_message_000810d8(Print *printer)\n{\n  size_t bytes_written;\n  bytes_written = write(printer, PTR_DAT_000810e4);\n  return bytes_written;\n}",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810d8",
            "calling": [
                "println",
                "println"
            ],
            "imported": false,
            "current_name": "print_message_000810d8"
        },
        "FUN_00080f04": {
            "renaming": {
                "FUN_00080f04": "get_tick_count_00080f04",
                "PTR__dwTickCount_000816e0": "tick_count_ptr"
            },
            "code": "uint32_t get_tick_count_00080f04(void)\n{\n  return *(uint32_t *)PTR__dwTickCount_000816e0;\n}",
            "called": [
                "GetTickCount"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f04",
            "calling": [
                "timedRead"
            ],
            "imported": false,
            "current_name": "get_tick_count_00080f04"
        },
        "FUN_000805a8": {
            "renaming": {
                "FUN_000805a8::FUN_000805a8": "servo_controller::servo_controller",
                "this": "this",
                "bVar1": "servo_count",
                "puVar2": "core_clock_ptr",
                "PTR_FUN_000805a8Count_000805d8": "servo_count_ptr",
                "PTR_SystemCoreClock_000805dc": "core_clock_freq_ptr",
                "PTR_servos_000805e4": "servo_array_ptr",
                "DAT_000805e0": "servo_clock_divider",
                "FUN_000805a8": "servo_controller_000805a8"
            },
            "code": "class ServoController * __thiscall servo_controller_000805a8::servo_controller_000805a8(class ServoController *this)\n{\n  byte servo_count;\n  undefined *core_clock_ptr;\n  \n  servo_count = *PTR_servo_controller_000805a8Count_000805d8;\n  if (servo_count < 0x3c) {\n    *PTR_servo_controller_000805a8Count_000805d8 = servo_count + 1;\n    core_clock_ptr = PTR_SystemCoreClock_000805dc;\n    this->servo_index = servo_count;\n    *(uint *)(PTR_servos_000805e4 + (uint)servo_count * 8 + 4) =\n         (*(uint *)core_clock_ptr / DAT_000805e0) * 0x5dc >> 5;\n    return this;\n  }\n  this->servo_index = 0xff;\n  return this;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000805a8",
            "calling": [
                "_GLOBAL__sub_I_steering"
            ],
            "imported": false,
            "current_name": "servo_controller_000805a8"
        },
        "FUN_00080184": {
            "renaming": {
                "FUN_00080184": "init_servos_and_strings_00080184",
                "this": "this_string",
                "cstr": "string_constant",
                "uVar1": "exit_function",
                "puVar2": "dso_handle",
                "this_00": "string_value",
                "in_r3": "in_r3"
            },
            "code": "void init_servos_and_strings_00080184()\n{\n  undefined *this_string = PTR_command_000801c8;\n  undefined *string_value = PTR_value_000801dc;\n  Servo::Servo((Servo *)PTR_steering_000801c4);\n  Servo::Servo((Servo *)PTR_throttle_000801d0);\n  undefined *dso_handle = PTR___dso_handle_000801d8;\n  undefined4 exit_function = DAT_000801d4;\n  String::String((String *)this_string, PTR_DAT_000801cc);\n  __aeabi_atexit(this_string, exit_function, dso_handle);\n  String::String((String *)string_value, PTR_DAT_000801cc);\n  __aeabi_atexit(string_value, exit_function, dso_handle, in_r3);\n}",
            "called": [
                "__aeabi_atexit",
                "Servo",
                "String"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080184",
            "calling": [],
            "imported": false,
            "current_name": "init_servos_and_strings_00080184"
        },
        "FUN_00080f08": {
            "renaming": {
                "FUN_00080f08": "do_nothing_00080f08"
            },
            "code": "\nvoid do_nothing_00080f08(uint32_t ms)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f08",
            "calling": [
                "setup",
                "main",
                "loop"
            ],
            "imported": false,
            "current_name": "do_nothing_00080f08"
        },
        "FUN_000810cc": {
            "renaming": {
                "__thiscall Print::FUN_000810cc": "print_character",
                "this": "printer",
                "c": "character",
                "sVar1": "result",
                "FUN_000810cc": "print_character_000810cc"
            },
            "code": "size_t __thiscall print_character_000810cc(Print *printer, char character) {\n  size_t result = (**printer->_vptr_Print)(printer, (int)character);\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810cc",
            "calling": [
                "print"
            ],
            "imported": false,
            "current_name": "print_character_000810cc"
        },
        "FUN_00081276": {
            "renaming": {
                "FUN_00081276": "read_byte_00081276",
                "__fd": "file_descriptor",
                "__buf": "buffer",
                "__nbytes": "num_bytes",
                "bVar1": "byte_read",
                "pRVar2": "rx_buffer",
                "_rx_buffer": "rx_buffer",
                "_iHead": "_iHead",
                "_iTail": "_iTail",
                "_aucBuffer": "_aucBuffer"
            },
            "code": "ssize_t __thiscall UARTClass::read_byte_00081276(UARTClass *this, int file_descriptor, void *buffer, size_t num_bytes) {\n  byte byte_read;\n  RingBuffer *rx_buffer = this->_rx_buffer;\n  if (rx_buffer->_iHead != rx_buffer->_iTail) {\n    byte_read = rx_buffer->_aucBuffer[rx_buffer->_iTail];\n    rx_buffer->_iTail = (rx_buffer->_iTail + 1U) & 0x7f;\n    return (uint)byte_read;\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081276",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "read_byte_00081276"
        },
        "FUN_000844bc": {
            "renaming": {
                "FUN_000844bc": "check_isatty_000844bc",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "puVar1": "error_ptr",
                "iVar2": "is_terminal"
            },
            "code": "void check_isatty_000844bc(int *error_code, int file_descriptor) {\n  undefined *error_ptr;\n  int is_terminal;\n  error_ptr = PTR_errno_000844dc;\n  *(undefined4 *)PTR_errno_000844dc = 0;\n  is_terminal = _isatty(file_descriptor);\n  if ((is_terminal == -1) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844bc",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "check_isatty_000844bc"
        },
        "FUN_00080b90": {
            "renaming": {
                "FUN_00080b90": "set_value_at_index_00080b90",
                "param_1": "base_address",
                "param_2": "index",
                "param_3": "value"
            },
            "code": "void set_value_at_index_00080b90(int base_address, int index, int value)\n{\n  int offset = index * 0x40 + 0x14;\n  int* ptr = (int*)(base_address + offset);\n  *ptr = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b90",
            "calling": [
                "_initISR"
            ],
            "imported": false,
            "current_name": "set_value_at_index_00080b90"
        },
        "FUN_00080748": {
            "renaming": {
                "FUN_00080748": "do_nothing_00080748"
            },
            "code": "\nvoid do_nothing_00080748(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080748",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_00080748"
        },
        "FUN_0008356c": {
            "renaming": {
                "FUN_0008356c": "sanitize_input_0008356c",
                "param_1": "output",
                "param_2": "input",
                "uVar1": "is_odd",
                "iVar2": "buffer_size",
                "uVar3": "input_value",
                "uVar4": "temp"
            },
            "code": "undefined4 sanitize_input_0008356c(undefined4 *output, int *input) {\n  uint input_value = (uint)*(ushort *)(input + 3);\n  int buffer_size = input[4];\n  if ((*(int *)PTR__impure_ptr_0008362c != 0) && (*(int *)(*(int *)PTR__impure_ptr_0008362c + 0x38) == 0)) {\n    __sinit();\n  }\n  if ((int)(input_value << 0x1c) < 0) {\n    buffer_size = input[4];\n  }\n  else {\n    if (-1 < (int)(input_value << 0x1b)) {\n      *output = 9;\n      *(ushort *)(input + 3) = input_value | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(input_value << 0x1d) < 0) {\n      if ((int *)input[0xc] != (int *)0x0) {\n        if ((int *)input[0xc] != input + 0x10) {\n          _free_r(output);\n          input_value = *(ushort *)(input + 3);\n        }\n        input[0xc] = 0;\n      }\n      buffer_size = input[4];\n      input_value &= 0xffdb;\n      *input = buffer_size;\n      input[1] = 0;\n    }\n    else {\n      buffer_size = input[4];\n    }\n    *(ushort *)(input + 3) = input_value | 8;\n    input_value |= 8;\n  }\n  if ((buffer_size == 0) && ((input_value & 0x280) != 0x200)) {\n    __smakebuf_r(output, input);\n    input_value = (uint)*(ushort *)(input + 3);\n    buffer_size = input[4];\n  }\n  uint is_odd = input_value & 1;\n  if (is_odd == 0) {\n    if (-1 < (int)(input_value << 0x1e)) {\n      buffer_size = input[5];\n    }\n    input[2] = buffer_size;\n  }\n  else {\n    input[6] = -input[5];\n    input[2] = 0;\n  }\n  if ((buffer_size == 0) && ((int)(input_value << 0x18) < 0)) {\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}",
            "called": [
                "_free_r",
                "__smakebuf_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008356c",
            "calling": [
                "_vfiprintf_r",
                "__swbuf_r",
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "sanitize_input_0008356c"
        },
        "FUN_00080b98": {
            "renaming": {
                "FUN_00080b98": "initialize_system_clock_00080b98",
                "puVar1": "clock_ctrl_reg",
                "iVar2": "system_clock_freq",
                "DAT_00080c04": "DAT_CLOCK_CTRL_REG_00080c04",
                "DAT_00080c08": "DAT_CLOCK_CTRL_REG_00080c08",
                "DAT_00080c10": "DAT_CLOCK_CTRL_REG_00080c10",
                "DAT_00080c0c": "DAT_CLOCK_CTRL_REG_00080c0c",
                "DAT_00080c14": "DAT_CLOCK_CTRL_REG_00080c14",
                "DAT_00080c18": "DAT_SYSTEM_CLOCK_FREQ_00080c18",
                "PTR_SystemCoreClock_00080c1c": "PTR_SYSTEM_CLOCK_FREQ_00080c1c"
            },
            "code": "void initialize_system_clock_00080b98(void)\n{\n  uint32_t* clock_ctrl_reg = DAT_00080c08;\n  uint32_t* system_clock_freq = PTR_SystemCoreClock_00080c1c;\n  \n  *DAT_00080c04 = 0x400;\n  clock_ctrl_reg[0x80] = 0x400;\n  \n  if (-1 < (clock_ctrl_reg[0x20] << 7)) {\n    clock_ctrl_reg[0x20] = DAT_00080c10;\n    while (-1 < (clock_ctrl_reg[0x68] << 0x1f));\n  }\n  \n  clock_ctrl_reg[0x20] = DAT_00080c0c;\n  while (-1 < (clock_ctrl_reg[0x68] << 0xf));\n  \n  *(uint32_t*)(clock_ctrl_reg + 0x30) = *(uint32_t*)(clock_ctrl_reg + 0x30) & 0xfffffffc | 1;\n  while (-1 < (clock_ctrl_reg[0x68] << 0x1c));\n  \n  clock_ctrl_reg[0x28] = DAT_00080c14;\n  while (-1 < (clock_ctrl_reg[0x68] << 0x1e));\n  \n  *(uint32_t*)(clock_ctrl_reg + 0x30) = 0x11;\n  while (-1 < (clock_ctrl_reg[0x68] << 0x1c));\n  \n  *(uint32_t*)(clock_ctrl_reg + 0x30) = 0x12;\n  while (-1 < (clock_ctrl_reg[0x68] << 0x1c));\n  \n  *system_clock_freq = DAT_00080c18;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b98",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "initialize_system_clock_00080b98"
        },
        "FUN_000810e8": {
            "renaming": {
                "FUN_000810e8": "print_write_and_count_000810e8",
                "this": "printer",
                "c": "string_to_print",
                "sVar1": "bytes_written",
                "sVar2": "total_bytes_written"
            },
            "code": "size_t __thiscall print_write_and_count_000810e8(Print *printer,char *string_to_print)\n{\n  size_t bytes_written;\n  size_t total_bytes_written;\n  bytes_written = write(printer,string_to_print);\n  total_bytes_written = print_write_and_count_000810e8(printer);\n  return total_bytes_written + bytes_written;\n}",
            "called": [
                "write",
                "println"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810e8",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "print_write_and_count_000810e8"
        },
        "FUN_000843b8": {
            "renaming": {
                "FUN_000843b8": "write_to_file_000843b8",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar1": "error_ptr",
                "iVar2": "write_result"
            },
            "code": "void write_to_file_000843b8(int *error_code, int file_descriptor, char *buffer, int buffer_size){\n  undefined *error_ptr;\n  int write_result;\n  error_ptr = PTR_errno_000843dc;\n  *(undefined4 *)PTR_errno_000843dc = 0;\n  write_result = _write(file_descriptor, buffer, buffer_size);\n  if ((write_result == -1) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000843b8",
            "calling": [
                "__swrite"
            ],
            "imported": false,
            "current_name": "write_to_file_000843b8"
        },
        "FUN_0008073a": {
            "renaming": {
                "FUN_0008073a": "do_nothing_0008073a"
            },
            "code": "\nvoid do_nothing_0008073a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008073a",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_0008073a"
        },
        "FUN_0008073c": {
            "renaming": {
                "FUN_0008073c": "handle_uart_interrupt_0008073c",
                "PTR_Serial_00080744": "uart"
            },
            "code": "void handle_uart_interrupt_0008073c(void)\n{\n  UARTClass::IrqHandler(PTR_Serial_00080744);\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008073c",
            "calling": [],
            "imported": false,
            "current_name": "handle_uart_interrupt_0008073c"
        },
        "FUN_00081480": {
            "renaming": {
                "FUN_00081480": "clear_string_00081480",
                "this": "this",
                "buffer": "buffer",
                "len": "len",
                "capacity": "capacity"
            },
            "code": "void __thiscall clear_string_00081480(String *this)\n{\n  if (this->buffer != NULL)\n  {\n    free(this->buffer);\n    this->buffer = NULL;\n  }\n  this->len = 0;\n  this->capacity = 0;\n  return;\n}",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081480",
            "calling": [
                "copy"
            ],
            "imported": false,
            "current_name": "clear_string_00081480"
        },
        "FUN_00081f9c": {
            "renaming": {
                "FUN_00081f9c": "allocate_memory_00081f9c",
                "__ptr": "__ptr",
                "__size": "__size",
                "pvVar1": "allocated_memory"
            },
            "code": "void* allocate_memory_00081f9c(void* __ptr, size_t __size)\n{\n    void* allocated_memory;\n    allocated_memory = (void*) _allocate_memory_00081f9c_r(*(undefined4*)PTR__impure_ptr_00081fa8, __ptr, __size);\n    return allocated_memory;\n}",
            "called": [
                "_realloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f9c",
            "calling": [
                "changeBuffer"
            ],
            "imported": false,
            "current_name": "allocate_memory_00081f9c"
        },
        "FUN_00081244": {
            "renaming": {
                "FUN_00081244": "is_operational_00081244",
                "this": "this"
            },
            "code": "bool UARTClass::is_operational_00081244() const { return true; }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081244",
            "calling": [],
            "imported": false,
            "current_name": "is_operational_00081244"
        },
        "FUN_000836fc": {
            "renaming": {
                "FUN_000836fc": "register_exit_proc_000836fc",
                "__func": "func_name",
                "iVar1": "exit_proc_id",
                "__register_exitproc": "__register_exit_proc"
            },
            "code": "int register_exit_proc_000836fc(__func *func_name)\n{\n  int exit_proc_id;\n  exit_proc_id = __register_exitproc(0, func_name, 0, 0);\n  return exit_proc_id;\n}",
            "called": [
                "__register_exitproc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000836fc",
            "calling": [
                "register_fini"
            ],
            "imported": false,
            "current_name": "register_exit_proc_000836fc"
        },
        "FUN_00085844": {
            "renaming": {
                "FUN_00085844": "do_nothing_00085844"
            },
            "code": "\nvoid do_nothing_00085844(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085844",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "do_nothing_00085844"
        },
        "FUN_00081248": {
            "renaming": {
                "FUN_00081248": "get_received_data_count_00081248",
                "_rx_buffer": "receive_buffer",
                "_iHead": "head_index",
                "_iTail": "tail_index"
            },
            "code": "int __thiscall UARTClass::get_received_data_count_00081248(UARTClass *this)\n{\n    int head = this->_rx_buffer->_iHead;\n    int tail = this->_rx_buffer->_iTail;\n    int count = head - tail & 0x7f;\n    return count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081248",
            "calling": [
                "serialEventRun",
                "loop"
            ],
            "imported": false,
            "current_name": "get_received_data_count_00081248"
        },
        "FUN_00081800": {
            "renaming": {
                "reversePointer": "reversePointer",
                "__ptr": "pointer",
                "_reversePointer_r": "_recursiveReverse",
                "FUN_00081800": "reversePointer_00081800"
            },
            "code": "void reversePointer_00081800(void *__ptr)\n{\n  _recursiveReverse(*(undefined4 *)PTR__impure_ptr_0008180c,__ptr);\n  return;\n}",
            "called": [
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081800",
            "calling": [
                "~String",
                "invalidate",
                "move"
            ],
            "imported": false,
            "current_name": "reversePointer_00081800"
        },
        "FUN_0008418c": {
            "renaming": {
                "FUN_0008418c": "execute_function_0008418c",
                "param_1": "function_table",
                "param_2": "function_index",
                "param_3": "arg1",
                "param_4": "arg2",
                "_Var1": "pid",
                "uVar2": "result",
                "iVar3": "function_ptr",
                "pcVar4": "function"
            },
            "code": "int execute_function_0008418c(int* function_table, int function_index, int arg1, int arg2) {\n  if (function_index > 31) {\n    *function_table = 22;\n    return -1;\n  }\n  int function_ptr = function_table[183];\n  if (function_ptr == 0 || function_table[function_index] == 0) {\n    __pid_t pid = _getpid_r();\n    int result = _kill_r(function_table, pid, function_index, arg2);\n    return result;\n  }\n  if (function_table[function_index] == 1) {\n    return 0;\n  }\n  if (function_table[function_index] != -1) {\n    function_table[function_index] = 0;\n    (*(code *)function_ptr)(function_index);\n    return 0;\n  }\n  *function_table = 22;\n  return 1;\n}",
            "called": [
                "_getpid_r",
                "_kill_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008418c",
            "calling": [
                "raise"
            ],
            "imported": false,
            "current_name": "execute_function_0008418c"
        },
        "FUN_000845c0": {
            "renaming": {
                "FUN_000845c0": "FUNC_000845c0"
            },
            "code": "\nundefined8 FUNC_000845c0(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if ((int)param_2 < 0) {\n    bVar13 = param_1 != 0;\n    param_1 = -param_1;\n    param_2 = -param_2 - (uint)bVar13;\n    uVar9 = 0xffffffff;\n  }\n  else {\n    uVar9 = 0;\n  }\n  if ((int)param_4 < 0) {\n    uVar9 = ~uVar9;\n    bVar13 = param_3 != 0;\n    param_3 = -param_3;\n    param_4 = -param_4 - (uint)bVar13;\n  }\n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 != 0) {\n        uVar2 = param_1 >> (0x20 - uVar5 & 0xff);\n        param_3 = param_3 << (uVar5 & 0xff);\n        param_1 = param_1 << (uVar5 & 0xff);\n        param_2 = param_2 << (uVar5 & 0xff) | uVar2;\n      }\n      uVar2 = param_3 >> 0x10;\n      uVar3 = param_2 / uVar2;\n      uVar6 = (param_3 & 0xffff) * uVar3;\n      uVar10 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar10 <= uVar6 && uVar6 - uVar10 != 0) {\n        bVar13 = CARRY4(uVar10,param_3);\n        uVar10 = uVar10 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar10 <= uVar6 && uVar6 - uVar10 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar10 = uVar10 + param_3;\n        }\n      }\n      uVar7 = (uVar10 - uVar6) / uVar2;\n      uVar3 = (param_3 & 0xffff) * uVar7;\n      uVar6 = param_1 & 0xffff | ((uVar10 - uVar6) - uVar2 * uVar7) * 0x10000;\n      uVar2 = uVar7;\n      if (uVar6 <= uVar3 && uVar3 - uVar6 != 0) {\n        uVar2 = uVar7 - 1;\n        if ((CARRY4(uVar6,param_3) == false) &&\n           (uVar6 + param_3 <= uVar3 && uVar3 - (uVar6 + param_3) != 0)) {\n          uVar2 = uVar7 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n      uVar10 = 0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar12 = param_3 & 0xffff;\n        uVar10 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar5 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar5 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar10 = uVar3 / uVar2;\n        uVar12 = param_3 & 0xffff;\n        uVar6 = uVar12 * uVar10;\n        uVar7 = param_1 >> (0x20 - uVar5 & 0xff) | param_2 << (uVar5 & 0xff);\n        uVar3 = uVar7 >> 0x10 | (uVar3 - uVar2 * uVar10) * 0x10000;\n        param_1 = param_1 << (uVar5 & 0xff);\n        uVar5 = uVar10;\n        if (uVar3 <= uVar6 && uVar6 - uVar3 != 0) {\n          bVar13 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar5 = uVar10 - 1;\n          if ((bVar13 == false) && (uVar3 <= uVar6 && uVar6 - uVar3 != 0)) {\n            uVar5 = uVar10 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar8 = (uVar3 - uVar6) / uVar2;\n        uVar4 = uVar12 * uVar8;\n        param_2 = uVar7 & 0xffff | ((uVar3 - uVar6) - uVar2 * uVar8) * 0x10000;\n        uVar10 = uVar8;\n        if (param_2 <= uVar4 && uVar4 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar10 = uVar8 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar4 && uVar4 - param_2 != 0)) {\n            uVar10 = uVar8 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar4;\n        uVar10 = uVar10 | uVar5 << 0x10;\n      }\n      uVar3 = param_2 / uVar2;\n      uVar6 = uVar12 * uVar3;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar4 = (uVar7 - uVar6) / uVar2;\n      uVar12 = uVar12 * uVar4;\n      uVar3 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar2 * uVar4) * 0x10000;\n      uVar2 = uVar4;\n      if (uVar3 <= uVar12 && uVar12 - uVar3 != 0) {\n        uVar2 = uVar4 - 1;\n        if ((CARRY4(uVar3,param_3) == false) &&\n           (uVar3 + param_3 <= uVar12 && uVar12 - (uVar3 + param_3) != 0)) {\n          uVar2 = uVar4 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n    }\n  }\n  else if (param_2 < param_4) {\n    uVar3 = 0;\n    uVar10 = 0;\n  }\n  else {\n    uVar5 = count_leading_zeroes(param_4);\n    if (uVar5 == 0) {\n      if ((param_4 < param_2) || (uVar3 = uVar5, uVar10 = uVar5, param_3 <= param_1)) {\n        uVar3 = 1;\n        uVar10 = 0;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar5;\n      uVar6 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_3 >> (uVar2 & 0xff) | param_4 << (uVar5 & 0xff);\n      uVar7 = uVar4 >> 0x10;\n      uVar3 = uVar6 / uVar7;\n      uVar12 = (uVar4 & 0xffff) * uVar3;\n      uVar10 = param_2 << (uVar5 & 0xff) | param_1 >> (uVar2 & 0xff);\n      uVar6 = uVar10 >> 0x10 | (uVar6 - uVar7 * uVar3) * 0x10000;\n      uVar2 = uVar3;\n      if (uVar6 <= uVar12 && uVar12 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar2 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar12 && uVar12 - uVar6 != 0)) {\n          uVar2 = uVar3 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar8 = (uVar6 - uVar12) / uVar7;\n      uVar11 = (uVar4 & 0xffff) * uVar8;\n      uVar6 = uVar10 & 0xffff | ((uVar6 - uVar12) - uVar7 * uVar8) * 0x10000;\n      uVar3 = uVar8;\n      if (uVar6 <= uVar11 && uVar11 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar3 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar11 && uVar11 - uVar6 != 0)) {\n          uVar3 = uVar8 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar3 = uVar3 | uVar2 << 0x10;\n      lVar1 = (ulonglong)uVar3 * (ulonglong)(param_3 << (uVar5 & 0xff));\n      uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar6 - uVar11 < uVar2) ||\n         ((uVar10 = 0, uVar6 - uVar11 == uVar2 && (param_1 << (uVar5 & 0xff) < (uint)lVar1)))) {\n        uVar3 = uVar3 - 1;\n        uVar10 = 0;\n      }\n    }\n  }\n  if (uVar9 != 0) {\n    bVar13 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar10 = -uVar10 - (uint)bVar13;\n  }\n  return CONCAT44(uVar10,uVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000845c0",
            "calling": [
                "__gnu_ldivmod_helper"
            ],
            "imported": false,
            "current_name": "FUNC_000845c0"
        },
        "FUN_00080b64": {
            "renaming": {
                "FUN_00080b64": "set_channel_00080b64",
                "param_1": "channel_number",
                "param_2": "source",
                "uVar1": "channel_source"
            },
            "code": "void set_channel_00080b64(uint32_t channel_number, uint32_t source){\n  uint64_t channel_source = ((uint64_t)source << 32) | channel_number;\n  if (channel_number > 2) {\n    channel_source = (*DAT_00080b8c)(PTR_s____source_tc_c_00080b80,0x5c,PTR_s_set_channel_00080b64_00080b84,PTR_s_dwChannel____sizeof__pTc__TC_CHA_00080b88);\n  }\n  *(uint32_t *)((int)channel_source + (int)(channel_source >> 0x20) * 0x40) = 5;\n  return;\n}",
            "called": [
                "__assert_func"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b64",
            "calling": [
                "_initISR"
            ],
            "imported": false,
            "current_name": "set_channel_00080b64"
        },
        "FUN_0008014c": {
            "renaming": {
                "FUN_0008014c": "call_afl_if_no_hypercall_0008014c",
                "ticks": "ticks",
                "uVar1": "result",
                "PTR_noHyperCall_00080160": "PTR_noHyperCall_00080160",
                "aflCall": "aflCall"
            },
            "code": "int call_afl_if_no_hypercall_0008014c(int ticks)\n{\n  uint32_t result;\n  if (*(int *)PTR_noHyperCall_00080160 == 0) {\n    result = aflCall(1, ticks, 0);\n    return result;\n  }\n  return 0;\n}",
            "called": [
                "aflCall"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008014c",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "call_afl_if_no_hypercall_0008014c"
        },
        "FUN_0008159e": {
            "renaming": {
                "String::FUN_0008159e": "string_process_character",
                "this": "this_string",
                "c": "character",
                "uVar1": "processed_character",
                "buf": "buffer",
                "sStack_a": "stack_variable",
                "FUN_0008159e": "string_process_character_0008159e"
            },
            "code": "uchar __thiscall string_process_character_0008159e(String *this, char character) {\n  uchar processed_character;\n  char buffer[2];\n  short stack_variable;\n  processed_character = string_process_character_0008159e(this, buffer, 1);\n  return processed_character;\n}",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008159e",
            "calling": [
                "readStringUntil"
            ],
            "imported": false,
            "current_name": "string_process_character_0008159e"
        },
        "FUN_000806a0": {
            "renaming": {
                "FUN_000806a0": "set_pin_state_000806a0",
                "this": "servo",
                "pin": "pin",
                "uVar1": "state"
            },
            "code": "uint8_t __thiscall Servo::set_pin_state_000806a0(Servo *servo, int pin)\n{\n  uint8_t state;\n  state = set_pin_state_000806a0(servo, pin, 0x220, 0x960);\n  return state;\n}",
            "called": [
                "attach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000806a0",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "set_pin_state_000806a0"
        },
        "FUN_000811ca": {
            "renaming": {
                "FUN_000811ca": "add_byte_to_buffer_000811ca",
                "this": "buffer",
                "c": "byte",
                "_iHead": "head_position",
                "uVar1": "head_position",
                "_iTail": "tail_position",
                "_aucBuffer": "buffer_array"
            },
            "code": "void __thiscall RingBuffer::add_byte_to_buffer_000811ca(RingBuffer *buffer, uint8_t byte)\n{\n  uint head_position = (buffer->_iHead + 1U) & 0x7f;\n  if (head_position != buffer->_iTail) {\n    buffer->_aucBuffer[buffer->_iHead] = byte;\n    buffer->_iHead = head_position;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811ca",
            "calling": [
                "IrqHandler"
            ],
            "imported": false,
            "current_name": "add_byte_to_buffer_000811ca"
        },
        "FUN_00080164": {
            "renaming": {
                "FUN_00080164": "set_servo_positions_00080164",
                "PTR_throttle_0008017c": "throttle_servo",
                "PTR_steering_00080180": "steering_servo"
            },
            "code": "void set_servo_positions_00080164(void)\n{\n  Servo::write(PTR_throttle_0008017c, 90);\n  Servo::write(PTR_steering_00080180, 90);\n  return;\n}",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080164",
            "calling": [
                "setup",
                "loop"
            ],
            "imported": false,
            "current_name": "set_servo_positions_00080164"
        },
        "FUN_00081496": {
            "renaming": {
                "FUN_00081496": "string_resize_00081496",
                "this": "string",
                "maxStrLen": "max_string_length",
                "pcVar1": "new_buffer"
            },
            "code": "uchar __thiscall string_resize_00081496(String *string, uint max_string_length) {\n  char *new_buffer = (char *)realloc(string->buffer, max_string_length + 1);\n  if (new_buffer != (char *)0x0) {\n    string->buffer = new_buffer;\n    string->capacity = max_string_length;\n    return (uchar)1;\n  }\n  return (uchar)0;\n}",
            "called": [
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081496",
            "calling": [
                "reserve"
            ],
            "imported": false,
            "current_name": "string_resize_00081496"
        },
        "FUN_00081014": {
            "renaming": {
                "FUN_00081014": "set_pin_status_00081014",
                "ulPin": "pin_number",
                "ulVal": "pin_value",
                "puVar1": "pin_description",
                "puVar2": "pin_status",
                "iVar3": "output_status",
                "uVar4": "port",
                "uVar5": "pin",
                "uVar6": "pin_state"
            },
            "code": "void set_pin_status_00081014(uint32_t pin_number, uint32_t pin_value) {\n  undefined *pin_status = PTR_g_pinStatus_00081080;\n  undefined *pin_description = PTR_g_APinDescription_0008107c;\n  if (pin_description[pin_number * 0x1c + 0xc] != '\\0') {\n    uint32_t pin_state = pin_value;\n    if ((pin_status[pin_number] & 0xf) == 5) {\n      pinMode(pin_number, OUTPUT);\n    }\n    pin_status[pin_number] = pin_status[pin_number] & 0xf | (byte)(pin_value << 4);\n    undefined4 port = *(undefined4 *)(pin_description + pin_number * 0x1c);\n    undefined4 pin = *(undefined4 *)(pin_description + pin_number * 0x1c + 4);\n    int output_status = PIO_GetOutputDataStatus(port, pin);\n    if (output_status == 0) {\n      PIO_PullUp(port, pin, pin_value);\n      return;\n    }\n    PIO_SetOutput(port, pin, pin_value, 0, 1, pin_state);\n  }\n  return;\n}",
            "called": [
                "pinMode",
                "PIO_PullUp",
                "PIO_SetOutput",
                "PIO_GetOutputDataStatus"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081014",
            "calling": [
                "Servo_Handler",
                "loop",
                "init"
            ],
            "imported": false,
            "current_name": "set_pin_status_00081014"
        },
        "FUN_000845bc": {
            "renaming": {
                "FUN_000845bc": "do_nothing_000845bc"
            },
            "code": "\nvoid do_nothing_000845bc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000845bc",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "do_nothing_000845bc"
        },
        "FUN_00083ca8": {
            "renaming": {
                "FUN_00083ca8": "FUNC_00083ca8"
            },
            "code": "\nundefined4 FUNC_00083ca8(undefined4 *param_1,void **param_2,undefined4 *param_3)\n\n{\n  void **ppvVar1;\n  int iVar2;\n  void *pvVar3;\n  void *pvVar4;\n  ushort uVar5;\n  uint uVar6;\n  int iVar7;\n  void **ppvVar8;\n  void *pvVar9;\n  void *pvVar10;\n  void *pvVar11;\n  void *pvVar12;\n  void *__n;\n  size_t __n_00;\n  void *local_2c;\n  \n  if (param_3[2] != 0) {\n    uVar5 = *(ushort *)(param_2 + 3);\n    uVar6 = (uint)uVar5;\n    if (((int)(uVar6 << 0x1c) < 0) && (param_2[4] != (void *)0x0)) {\n      ppvVar8 = (void **)*param_3;\n      pvVar3 = DAT_00083fb8;\n    }\n    else {\n      iVar2 = __swsetup_r(param_1,param_2);\n      if (iVar2 != 0) {\n        return 0xffffffff;\n      }\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar6 = (uint)uVar5;\n      ppvVar8 = (void **)*param_3;\n      pvVar3 = DAT_00083fb8;\n    }\n    DAT_00083fb8 = pvVar3;\n    if ((uVar5 & 2) == 0) {\n      pvVar3 = (void *)(uVar6 & 2);\n      pvVar11 = (void *)(uVar6 & 1);\n      pvVar9 = pvVar3;\n      pvVar10 = pvVar3;\n      local_2c = pvVar3;\n      pvVar12 = pvVar11;\n      if (pvVar11 == (void *)0x0) {\n        while( true ) {\n          while (pvVar11 == (void *)0x0) {\n            pvVar12 = *ppvVar8;\n            ppvVar1 = ppvVar8 + 1;\n            ppvVar8 = ppvVar8 + 2;\n            pvVar11 = *ppvVar1;\n          }\n          pvVar3 = param_2[2];\n          if ((int)(uVar6 << 0x16) < 0) {\n            if (pvVar11 < pvVar3) {\n              pvVar9 = *param_2;\n              pvVar3 = pvVar11;\n            }\n            else if ((uVar6 & 0x480) == 0) {\n              pvVar9 = *param_2;\n            }\n            else {\n              __n_00 = (int)*param_2 - (int)param_2[4];\n              pvVar3 = (void *)(__n_00 + 1 + (int)pvVar11);\n              pvVar9 = (void *)(((int)param_2[5] * 3) / 2);\n              if (pvVar3 <= pvVar9) {\n                pvVar3 = pvVar9;\n              }\n              if ((int)(uVar6 << 0x15) < 0) {\n                pvVar10 = (void *)_malloc_r(param_1,pvVar3);\n                if (pvVar10 == (void *)0x0) {\n                  *param_1 = 0xc;\n                  uVar5 = *(ushort *)(param_2 + 3);\n                  goto LAB_00083da4;\n                }\n                memcpy(pvVar10,param_2[4],__n_00);\n                *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                pvVar10 = (void *)_realloc_r(param_1);\n                if (pvVar10 == (void *)0x0) {\n                  _free_r(param_1,param_2[4]);\n                  uVar5 = *(ushort *)(param_2 + 3) & 0xff7f;\n                  *param_1 = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              pvVar9 = (void *)((int)pvVar10 + __n_00);\n              param_2[4] = pvVar10;\n              param_2[5] = pvVar3;\n              *param_2 = pvVar9;\n              param_2[2] = (void *)((int)pvVar3 - __n_00);\n              pvVar3 = pvVar11;\n            }\n            memmove(pvVar9,pvVar12,(size_t)pvVar3);\n            param_2[2] = (void *)((int)param_2[2] - (int)pvVar3);\n            *param_2 = (void *)((int)*param_2 + (int)pvVar3);\n            pvVar3 = pvVar11;\n          }\n          else if ((param_2[4] < *param_2) || (pvVar9 = param_2[5], pvVar11 < pvVar9)) {\n            if (pvVar11 < pvVar3) {\n              pvVar3 = pvVar11;\n            }\n            memmove(*param_2,pvVar12,(size_t)pvVar3);\n            pvVar9 = param_2[2];\n            param_2[2] = (void *)((int)pvVar9 - (int)pvVar3);\n            *param_2 = (void *)((int)*param_2 + (int)pvVar3);\n            if (((void *)((int)pvVar9 - (int)pvVar3) == (void *)0x0) &&\n               (iVar2 = _fflush_r(param_1,param_2), iVar2 != 0)) goto LAB_00083da2;\n          }\n          else {\n            pvVar3 = (void *)0x7fffffff;\n            if (pvVar11 < (void *)0x7fffffff) {\n              pvVar3 = pvVar11;\n            }\n            pvVar3 = (void *)(*(code *)param_2[9])\n                                       (param_1,param_2[7],pvVar12,\n                                        ((uint)pvVar3 / (uint)pvVar9) * (int)pvVar9);\n            if ((int)pvVar3 < 1) goto LAB_00083da2;\n          }\n          iVar2 = param_3[2];\n          pvVar11 = (void *)((int)pvVar11 - (int)pvVar3);\n          param_3[2] = iVar2 - (int)pvVar3;\n          if (iVar2 - (int)pvVar3 == 0) break;\n          uVar6 = (uint)*(ushort *)(param_2 + 3);\n          pvVar12 = (void *)((int)pvVar12 + (int)pvVar3);\n        }\n      }\n      else {\n        do {\n          while (pvVar3 == (void *)0x0) {\n            pvVar10 = *ppvVar8;\n            pvVar3 = ppvVar8[1];\n            local_2c = (void *)0x0;\n            ppvVar8 = ppvVar8 + 2;\n          }\n          if (local_2c == (void *)0x0) {\n            pvVar9 = memchr(pvVar10,10,(size_t)pvVar3);\n            if (pvVar9 == (void *)0x0) {\n              pvVar9 = (void *)((int)pvVar3 + 1);\n              local_2c = (void *)0x1;\n            }\n            else {\n              pvVar9 = (void *)((int)pvVar9 + (1 - (int)pvVar10));\n              local_2c = (void *)0x1;\n            }\n          }\n          pvVar12 = *param_2;\n          pvVar11 = pvVar9;\n          if (pvVar3 <= pvVar9) {\n            pvVar11 = pvVar3;\n          }\n          pvVar4 = param_2[5];\n          if ((param_2[4] < pvVar12) &&\n             (__n = (void *)((int)param_2[2] + (int)pvVar4), (int)__n < (int)pvVar11)) {\n            memmove(pvVar12,pvVar10,(size_t)__n);\n            *param_2 = (void *)((int)*param_2 + (int)__n);\n            iVar2 = _fflush_r(param_1,param_2);\n            if (iVar2 != 0) goto LAB_00083da2;\n          }\n          else if ((int)pvVar11 < (int)pvVar4) {\n            memmove(pvVar12,pvVar10,(size_t)pvVar11);\n            param_2[2] = (void *)((int)param_2[2] - (int)pvVar11);\n            *param_2 = (void *)((int)pvVar11 + (int)*param_2);\n            __n = pvVar11;\n          }\n          else {\n            __n = (void *)(*(code *)param_2[9])(param_1,param_2[7],pvVar10,pvVar4);\n            if ((int)__n < 1) goto LAB_00083da2;\n          }\n          pvVar9 = (void *)((int)pvVar9 - (int)__n);\n          if ((pvVar9 == (void *)0x0) &&\n             (iVar2 = _fflush_r(param_1,param_2), local_2c = pvVar9, iVar2 != 0)) goto LAB_00083da2;\n          iVar2 = param_3[2];\n          pvVar10 = (void *)((int)pvVar10 + (int)__n);\n          pvVar3 = (void *)((int)pvVar3 - (int)__n);\n          param_3[2] = iVar2 - (int)__n;\n        } while (iVar2 - (int)__n != 0);\n      }\n    }\n    else {\n      pvVar10 = (void *)0x0;\n      pvVar9 = (void *)0x0;\n      do {\n        while( true ) {\n          pvVar11 = pvVar9;\n          if (pvVar3 <= pvVar9) {\n            pvVar11 = pvVar3;\n          }\n          if (pvVar9 != (void *)0x0) break;\n          pvVar10 = *ppvVar8;\n          pvVar9 = ppvVar8[1];\n          ppvVar8 = ppvVar8 + 2;\n        }\n        iVar2 = (*(code *)param_2[9])(param_1,param_2[7],pvVar10,pvVar11);\n        if (iVar2 < 1) {\nLAB_00083da2:\n          uVar5 = *(ushort *)(param_2 + 3);\nLAB_00083da4:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n          return 0xffffffff;\n        }\n        iVar7 = param_3[2];\n        pvVar10 = (void *)((int)pvVar10 + iVar2);\n        pvVar9 = (void *)((int)pvVar9 - iVar2);\n        param_3[2] = iVar7 - iVar2;\n      } while (iVar7 - iVar2 != 0);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "_fflush_r",
                "_realloc_r",
                "_free_r",
                "_malloc_r",
                "memcpy",
                "__swsetup_r",
                "memchr",
                "memmove"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083ca8",
            "calling": [
                "__sprint_r.part.0"
            ],
            "imported": false,
            "current_name": "FUNC_00083ca8"
        },
        "FUN_00084404": {
            "renaming": {
                "FUN_00084404": "flush_and_free_00084404",
                "param_1": "file_stream",
                "param_2": "stream_buffer",
                "uVar1": "result",
                "iVar2": "flush_result"
            },
            "code": "undefined4 flush_and_free_00084404(int file_stream, int stream_buffer) {\n  undefined4 result;\n  int flush_result;\n\n  if (stream_buffer != 0) {\n    if ((file_stream != 0) && (*(int *)(file_stream + 0x38) == 0)) {\n      __sinit();\n    }\n    if (*(short *)(stream_buffer + 0xc) != 0) {\n      result = _fflush_r(file_stream, stream_buffer);\n      if ((*(code **)(stream_buffer + 0x2c) != (code *)0x0) && ((flush_result = (**(code **)(stream_buffer + 0x2c))(file_stream, *(undefined4 *)(stream_buffer + 0x1c))) < 0)) {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(stream_buffer + 0xc) << 0x18) < 0) {\n        _free_r(file_stream, *(undefined4 *)(stream_buffer + 0x10));\n      }\n      if (*(int *)(stream_buffer + 0x30) != 0) {\n        if (*(int *)(stream_buffer + 0x30) != stream_buffer + 0x40) {\n          _free_r(file_stream, *(undefined4 *)(stream_buffer + 0x30));\n        }\n        *(undefined4 *)(stream_buffer + 0x30) = 0;\n      }\n      if (*(int *)(stream_buffer + 0x44) != 0) {\n        _free_r(file_stream, *(undefined4 *)(stream_buffer + 0x44));\n        *(undefined4 *)(stream_buffer + 0x44) = 0;\n      }\n      __sfp_lock_acquire();\n      *(undefined2 *)(stream_buffer + 0xc) = 0;\n      __sfp_lock_release();\n      return result;\n    }\n  }\n  return 0;\n}",
            "called": [
                "_fflush_r",
                "__sfp_lock_acquire",
                "__sfp_lock_release",
                "_free_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084404",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "flush_and_free_00084404"
        },
        "FUN_00081810": {
            "renaming": {
                "FUN_00081810": "FUNC_00081810"
            },
            "code": "\nint * FUNC_00081810(undefined4 *param_1,uint param_2)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  uint uVar3;\n  uint uVar4;\n  undefined *puVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined4 *puVar10;\n  undefined *puVar11;\n  undefined *puVar12;\n  undefined *puVar13;\n  undefined4 *puVar14;\n  uint uVar15;\n  undefined4 *puVar16;\n  undefined *puVar17;\n  \n  if (param_2 + 0xb < 0x17) {\n    uVar15 = 0x10;\n    if (0x10 < param_2) goto LAB_00081876;\n  }\n  else {\n    uVar15 = param_2 + 0xb & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_00081876:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n  }\n  __malloc_lock(param_1);\n  puVar1 = PTR___malloc_av__00081b3c;\n  if (uVar15 < 0x1f8) {\n    puVar13 = *(undefined **)(PTR___malloc_av__00081b3c + uVar15 + 0xc);\n    if ((puVar13 != PTR___malloc_av__00081b3c + uVar15) ||\n       (puVar12 = puVar13 + 8, puVar13 = *(undefined **)(puVar13 + 0x14), puVar12 != puVar13)) {\n      uVar9 = *(uint *)(puVar13 + 4);\n      iVar6 = *(int *)(puVar13 + 0xc);\n      uVar15 = *(uint *)(puVar13 + (uVar9 & 0xfffffffc) + 4);\n      iVar2 = *(int *)(puVar13 + 8);\n      *(int *)(iVar2 + 0xc) = iVar6;\n      *(int *)(iVar6 + 8) = iVar2;\n      *(uint *)(puVar13 + (uVar9 & 0xfffffffc) + 4) = uVar15 | 1;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    uVar9 = (uVar15 >> 3) + 2;\n  }\n  else {\n    uVar9 = uVar15 >> 9;\n    if (uVar9 == 0) {\n      iVar6 = 0x7e;\n      iVar2 = 0x3f;\n    }\n    else if (uVar9 < 5) {\n      iVar2 = (uVar15 >> 6) + 0x38;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x15) {\n      iVar2 = uVar9 + 0x5b;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x55) {\n      iVar2 = (uVar15 >> 0xc) + 0x6e;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x155) {\n      iVar2 = (uVar15 >> 0xf) + 0x77;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x555) {\n      iVar2 = (uVar15 >> 0x12) + 0x7c;\n      iVar6 = iVar2 * 2;\n    }\n    else {\n      iVar6 = 0xfc;\n      iVar2 = 0x7e;\n    }\n    for (puVar13 = *(undefined **)(PTR___malloc_av__00081b3c + iVar6 * 4 + 0xc);\n        PTR___malloc_av__00081b3c + iVar6 * 4 != puVar13; puVar13 = *(undefined **)(puVar13 + 0xc))\n    {\n      uVar9 = *(uint *)(puVar13 + 4) & 0xfffffffc;\n      if (0xf < (int)(uVar9 - uVar15)) {\n        iVar2 = iVar2 + -1;\n        break;\n      }\n      if (-1 < (int)(uVar9 - uVar15)) {\n        uVar15 = *(uint *)(puVar13 + uVar9 + 4);\n        iVar6 = *(int *)(puVar13 + 0xc);\n        iVar2 = *(int *)(puVar13 + 8);\n        *(int *)(iVar2 + 0xc) = iVar6;\n        *(int *)(iVar6 + 8) = iVar2;\n        *(uint *)(puVar13 + uVar9 + 4) = uVar15 | 1;\n        __malloc_unlock(param_1);\n        return (int *)(puVar13 + 8);\n      }\n    }\n    uVar9 = iVar2 + 1;\n  }\n  puVar13 = *(undefined **)(PTR___malloc_av__00081b3c + 0x10);\n  puVar12 = PTR___malloc_av__00081b3c + 8;\n  if (puVar13 == puVar12) {\n    uVar3 = *(uint *)(PTR___malloc_av__00081b3c + 4);\n  }\n  else {\n    uVar3 = *(uint *)(puVar13 + 4);\n    uVar4 = uVar3 & 0xfffffffc;\n    uVar7 = uVar4 - uVar15;\n    if (0xf < (int)uVar7) {\n      puVar5 = puVar13 + uVar15;\n      *(uint *)(puVar13 + 4) = uVar15 | 1;\n      *(undefined **)(puVar1 + 0x14) = puVar5;\n      *(undefined **)(puVar1 + 0x10) = puVar5;\n      *(undefined **)(puVar5 + 0xc) = puVar12;\n      *(undefined **)(puVar5 + 8) = puVar12;\n      *(uint *)(puVar5 + 4) = uVar7 | 1;\n      *(uint *)(puVar5 + uVar7) = uVar7;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    *(undefined **)(PTR___malloc_av__00081b3c + 0x14) = puVar12;\n    *(undefined **)(puVar1 + 0x10) = puVar12;\n    if (-1 < (int)uVar7) {\n      *(uint *)(puVar13 + uVar4 + 4) = *(uint *)(puVar13 + uVar4 + 4) | 1;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    if (uVar4 < 0x200) {\n      puVar5 = puVar1 + (uVar3 & 0xfffffff8);\n      iVar2 = *(int *)(puVar5 + 8);\n      uVar3 = 1 << ((int)(uVar3 >> 3) >> 2 & 0xffU) | *(uint *)(puVar1 + 4);\n      *(int *)(puVar13 + 8) = iVar2;\n      *(undefined **)(puVar13 + 0xc) = puVar5;\n      *(uint *)(puVar1 + 4) = uVar3;\n      *(undefined **)(puVar5 + 8) = puVar13;\n      *(undefined **)(iVar2 + 0xc) = puVar13;\n    }\n    else {\n      uVar7 = uVar3 >> 9;\n      if (uVar7 < 5) {\n        iVar6 = (uVar3 >> 6) + 0x38;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x15) {\n        iVar6 = uVar7 + 0x5b;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x55) {\n        iVar6 = (uVar3 >> 0xc) + 0x6e;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x155) {\n        iVar6 = (uVar3 >> 0xf) + 0x77;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x555) {\n        iVar6 = (uVar3 >> 0x12) + 0x7c;\n        iVar2 = iVar6 * 2;\n      }\n      else {\n        iVar2 = 0xfc;\n        iVar6 = 0x7e;\n      }\n      puVar5 = puVar1 + iVar2 * 4;\n      puVar17 = *(undefined **)(puVar5 + 8);\n      if (puVar17 == puVar5) {\n        uVar3 = *(uint *)(PTR___malloc_av__00081d44 + 4) | 1 << (iVar6 >> 2 & 0xffU);\n        *(uint *)(PTR___malloc_av__00081d44 + 4) = uVar3;\n        puVar11 = puVar17;\n      }\n      else {\n        do {\n          puVar11 = puVar17;\n          if ((*(uint *)(puVar17 + 4) & 0xfffffffc) <= uVar4) break;\n          puVar17 = *(undefined **)(puVar17 + 8);\n          puVar11 = puVar17;\n        } while (puVar5 != puVar17);\n        puVar17 = *(undefined **)(puVar11 + 0xc);\n        uVar3 = *(uint *)(puVar1 + 4);\n      }\n      *(undefined **)(puVar13 + 0xc) = puVar17;\n      *(undefined **)(puVar13 + 8) = puVar11;\n      *(undefined **)(puVar17 + 8) = puVar13;\n      *(undefined **)(puVar11 + 0xc) = puVar13;\n    }\n  }\n  uVar4 = 1 << ((int)uVar9 >> 2 & 0xffU);\n  if (uVar4 <= uVar3) {\n    if ((uVar3 & uVar4) == 0) {\n      uVar9 = uVar9 & 0xfffffffc;\n      do {\n        uVar4 = uVar4 << 1;\n        uVar9 = uVar9 + 4;\n      } while ((uVar3 & uVar4) == 0);\n    }\n    do {\n      puVar16 = (undefined4 *)(puVar1 + uVar9 * 8);\n      puVar14 = puVar16;\n      uVar3 = uVar9;\n      do {\n        for (puVar10 = (undefined4 *)puVar14[3]; puVar14 != puVar10;\n            puVar10 = (undefined4 *)puVar10[3]) {\n          uVar7 = puVar10[1] & 0xfffffffc;\n          uVar8 = uVar7 - uVar15;\n          if (0xf < (int)uVar8) {\n            iVar6 = puVar10[2];\n            iVar2 = puVar10[3];\n            puVar13 = (undefined *)(uVar15 + (int)puVar10);\n            puVar10[1] = uVar15 | 1;\n            *(int *)(iVar6 + 0xc) = iVar2;\n            *(int *)(iVar2 + 8) = iVar6;\n            *(undefined **)(puVar1 + 0x14) = puVar13;\n            *(undefined **)(puVar1 + 0x10) = puVar13;\n            *(undefined **)(puVar13 + 0xc) = puVar12;\n            *(undefined **)(puVar13 + 8) = puVar12;\n            *(uint *)(puVar13 + 4) = uVar8 | 1;\n            *(uint *)(puVar13 + uVar8) = uVar8;\n            __malloc_unlock(param_1);\n            return puVar10 + 2;\n          }\n          if (-1 < (int)uVar8) {\n            iVar2 = puVar10[2];\n            iVar6 = puVar10[3];\n            *(uint *)((int)puVar10 + uVar7 + 4) = *(uint *)((int)puVar10 + uVar7 + 4) | 1;\n            *(int *)(iVar2 + 0xc) = iVar6;\n            *(int *)(iVar6 + 8) = iVar2;\n            __malloc_unlock(param_1);\n            return puVar10 + 2;\n          }\n        }\n        uVar3 = uVar3 + 1;\n        puVar14 = puVar14 + 2;\n      } while ((uVar3 & 3) != 0);\n      do {\n        uVar7 = uVar9 & 3;\n        puVar14 = puVar16 + -2;\n        uVar9 = uVar9 - 1;\n        if (uVar7 == 0) {\n          uVar7 = *(uint *)(puVar1 + 4) & ~uVar4;\n          *(uint *)(puVar1 + 4) = uVar7;\n          goto LAB_00081c5e;\n        }\n        puVar16 = (undefined4 *)*puVar16;\n      } while (puVar16 == puVar14);\n      uVar7 = *(uint *)(puVar1 + 4);\nLAB_00081c5e:\n      uVar4 = uVar4 * 2;\n      if ((uVar7 <= uVar4 && uVar4 - uVar7 != 0) || (uVar9 = uVar3, uVar4 == 0)) break;\n      for (; (uVar7 & uVar4) == 0; uVar4 = uVar4 << 1) {\n        uVar9 = uVar9 + 4;\n      }\n    } while( true );\n  }\n  puVar13 = PTR___malloc_sbrk_base_00081b44;\n  puVar12 = *(undefined **)(puVar1 + 8);\n  uVar9 = *(uint *)(puVar12 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar9) && (uVar3 = uVar9 - uVar15, puVar5 = puVar12, 0xf < (int)uVar3))\n  goto LAB_00081b1a;\n  puVar17 = puVar12 + uVar9;\n  if (*(int *)PTR___malloc_sbrk_base_00081b44 == -1) {\n    uVar3 = uVar15 + *(int *)PTR___malloc_top_pad_00081b40 + 0x10;\n  }\n  else {\n    uVar3 = uVar15 + *(int *)PTR___malloc_top_pad_00081b40 + 0x100f & 0xfffff000;\n  }\n  puVar5 = (undefined *)_sbrk_r(param_1,uVar3);\n  puVar11 = PTR___malloc_current_mallinfo_00081b50;\n  if ((puVar5 == (undefined *)0xffffffff) || ((puVar5 < puVar17 && (puVar12 != puVar1)))) {\n    puVar5 = *(undefined **)(puVar1 + 8);\n    uVar9 = *(uint *)(puVar5 + 4) & 0xfffffffc;\n  }\n  else {\n    uVar4 = *(int *)PTR___malloc_current_mallinfo_00081b50 + uVar3;\n    *(uint *)PTR___malloc_current_mallinfo_00081b50 = uVar4;\n    if ((puVar17 == puVar5) && (((uint)puVar17 & 0xfff) == 0)) {\n      *(uint *)(*(int *)(puVar1 + 8) + 4) = uVar3 + uVar9 | 1;\n    }\n    else {\n      if (*(int *)puVar13 == -1) {\n        *(undefined **)PTR___malloc_sbrk_base_00081b44 = puVar5;\n      }\n      else {\n        *(undefined **)puVar11 = puVar5 + (uVar4 - (int)puVar17);\n      }\n      uVar4 = (uint)puVar5 & 7;\n      if (uVar4 == 0) {\n        iVar2 = 0x1000;\n      }\n      else {\n        puVar5 = puVar5 + (8 - uVar4);\n        iVar2 = 0x1008 - uVar4;\n      }\n      iVar2 = iVar2 - ((uint)(puVar5 + uVar3) & 0xfff);\n      iVar6 = _sbrk_r(param_1,iVar2);\n      if (iVar6 == -1) {\n        uVar3 = 1;\n        iVar2 = 0;\n      }\n      else {\n        uVar3 = (iVar6 - (int)puVar5) + iVar2 | 1;\n      }\n      uVar4 = *(int *)puVar11 + iVar2;\n      *(undefined **)(puVar1 + 8) = puVar5;\n      *(uint *)puVar11 = uVar4;\n      *(uint *)(puVar5 + 4) = uVar3;\n      puVar13 = PTR___malloc_current_mallinfo_00081b50;\n      if (puVar12 != puVar1) {\n        if (uVar9 < 0x10) {\n          *(undefined4 *)(puVar5 + 4) = 1;\n          uVar9 = 0;\n          goto LAB_00081b04;\n        }\n        uVar9 = uVar9 - 0xc & 0xfffffff8;\n        *(uint *)(puVar12 + 4) = uVar9 | *(uint *)(puVar12 + 4) & 1;\n        *(undefined4 *)(puVar12 + uVar9 + 4) = 5;\n        *(undefined4 *)(puVar12 + uVar9 + 8) = 5;\n        if (0xf < uVar9) {\n          _free_r(param_1,puVar12 + 8);\n          uVar4 = *(uint *)puVar13;\n        }\n      }\n    }\n    puVar5 = *(undefined **)(puVar1 + 8);\n    if (*(uint *)PTR___malloc_max_sbrked_mem_00081b48 < uVar4) {\n      *(uint *)PTR___malloc_max_sbrked_mem_00081b48 = uVar4;\n    }\n    if (*(uint *)PTR___malloc_max_total_mem_00081b4c < uVar4) {\n      *(uint *)PTR___malloc_max_total_mem_00081b4c = uVar4;\n    }\n    uVar9 = *(uint *)(puVar5 + 4) & 0xfffffffc;\n  }\nLAB_00081b04:\n  uVar3 = uVar9 - uVar15;\n  if ((uVar9 < uVar15) || ((int)uVar3 < 0x10)) {\n    __malloc_unlock(param_1);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  *(uint *)(puVar5 + 4) = uVar15 | 1;\n  *(undefined **)(puVar1 + 8) = puVar5 + uVar15;\n  *(uint *)(puVar5 + uVar15 + 4) = uVar3 | 1;\n  __malloc_unlock(param_1);\n  return (int *)(puVar5 + 8);\n}\n\n",
            "called": [
                "__malloc_lock",
                "_free_r",
                "__malloc_unlock",
                "_sbrk_r"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081810",
            "calling": [
                "_realloc_r",
                "__smakebuf_r",
                "malloc",
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "FUNC_00081810"
        },
        "FUN_000800f4": {
            "renaming": {
                "FUN_000800f4": "check_if_completed_000800f4",
                "*param_1": "text_section_end",
                "*PTR_completed_7857_0008010c": "completed",
                "DAT_00080110": "data_section_end",
                "PTR__etext_00080114": "text_section_end"
            },
            "code": "char* check_if_*check_if_completed_000800f4(char* PTR__etext_00080114) {\n    static char *check_if_completed_000800f4 = 0;\n    if (*check_if_completed_000800f4 == 0) {\n        if (DAT_00080110 != 0) {\n            PTR__etext_00080114 = DAT_00080110;\n        }\n        *check_if_completed_000800f4 = 1;\n    }\n    return PTR__etext_00080114;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000800f4",
            "calling": [
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "check_if_completed_000800f4"
        },
        "FUN_00080aec": {
            "renaming": {
                "FUN_00080aec": "check_bit_00080aec",
                "param_1": "bit_pos",
                "uVar1": "bit_mask",
                "uVar2": "data_mask",
                "DAT_00080b28": "data_location"
            },
            "code": "int check_bit_00080aec(uint bit_pos) {\n  uint bit_mask;\n  uint *data_ptr;\n  if (bit_pos < 0x2d) {\n    if (bit_pos < 0x20) {\n      bit_mask = 1 << (bit_pos & 0xff);\n      data_ptr = (uint *)(DAT_00080b28 + 0x18);\n      if ((*data_ptr & bit_mask) == bit_mask) {\n        *(data_ptr + 1) = bit_mask;\n      }\n    }\n    else {\n      bit_mask = 1 << (bit_pos - 0x20 & 0xff);\n      data_ptr = (uint *)(DAT_00080b28 + 0x108);\n      if ((*data_ptr & bit_mask) == bit_mask) {\n        *(data_ptr + 1) = bit_mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aec",
            "calling": [
                "pinMode",
                "end"
            ],
            "imported": false,
            "current_name": "check_bit_00080aec"
        },
        "FUN_0008136c": {
            "renaming": {
                "FUN_0008136c": "initialize_uart_0008136c",
                "this": "uart",
                "dwBaudRate": "baud_rate",
                "modeReg": "mode_reg",
                "_dwId": "_id",
                "_pUart": "_uart_instance",
                "PTR_SystemCoreClock_000813d4": "clock_speed",
                "_dwIrq": "_irq",
                "DAT_000813d8": "interrupt_enable_register",
                "_rx_buffer": "rx_buffer",
                "_tx_buffer": "tx_buffer"
            },
            "code": "void __thiscall initialize_uart_0008136c(UARTClass *uart, uint32_t baud_rate, uint32_t mode_reg) {\n  pmc_enable_periph_clk(uart->_dwId);\n  Uart *uart_instance = uart->_pUart;\n  uart_instance->UART_PTCR = 0x202;\n  uart_instance->UART_CR = 0xac;\n  uint32_t PTR_SystemCoreClock_000813d4 = *(uint *)(PTR_SystemCoreClock_000813d4);\n  uint32_t baud_rate_divisor = PTR_SystemCoreClock_000813d4 / baud_rate >> 4;\n  uart_instance->UART_MR = mode_reg;\n  uart_instance->UART_BRGR = baud_rate_divisor;\n  uart_instance->UART_IDR = 0xffffffff;\n  uart_instance->UART_IER = 0x61;\n  uint32_t interrupt_bit = 1 << (uint)(byte)(uart->_dwIrq & 0x1f);\n  uint32_t *DAT_000813d8 = (uint32_t *)(DAT_000813d8 + ((uint)(int)uart->_dwIrq >> 5) * 4);\n  *DAT_000813d8 = interrupt_bit;\n  RingBuffer *rx_buffer = uart->_rx_buffer;\n  rx_buffer->_iTail = 0;\n  rx_buffer->_iHead = 0;\n  RingBuffer *tx_buffer = uart->_tx_buffer;\n  tx_buffer->_iTail = 0;\n  tx_buffer->_iHead = 0;\n  uart_instance->UART_CR = 0x50;\n}",
            "called": [
                "pmc_enable_periph_clk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008136c",
            "calling": [
                "begin",
                "begin"
            ],
            "imported": false,
            "current_name": "initialize_uart_0008136c"
        },
        "FUN_000810c4": {
            "renaming": {
                "Print::FUN_000810c4": "print_write",
                "this": "this",
                "str": "string_to_write",
                "sVar1": "bytes_written",
                "FUN_000810c4": "print_write_000810c4"
            },
            "code": "size_t __thiscall print_write_000810c4(Print *this, char *string_to_write) {\n  size_t bytes_written = write(this, string_to_write);\n  return bytes_written;\n}",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810c4",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "print_write_000810c4"
        },
        "FUN_00080c98": {
            "renaming": {
                "FUN_00080c98": "calculate_value_00080c98",
                "param_1": "result",
                "param_2": "input",
                "param_3": "divisor",
                "param_4": "multiplier",
                "local_58": "intermediate",
                "uVar1": "quotient",
                "uVar2": "i"
            },
            "code": "uint calculate_value_00080c98(uint *result, uint input, int divisor, int multiplier)\n{\n    uint intermediate[16];\n    intermediate[0] = *(uint *)PTR_DAT_00080d28;\n    intermediate[1] = *(uint *)(PTR_DAT_00080d28 + 4);\n    intermediate[2] = *(uint *)(PTR_DAT_00080d28 + 8);\n    intermediate[3] = *(uint *)(PTR_DAT_00080d28 + 0xc);\n    intermediate[4] = *(uint *)(PTR_DAT_00080d28 + 0x10);\n    intermediate[5] = *(uint *)(PTR_DAT_00080d28 + 0x14);\n    intermediate[6] = *(uint *)(PTR_DAT_00080d28 + 0x18);\n    intermediate[7] = *(uint *)(PTR_DAT_00080d28 + 0x1c);\n    intermediate[8] = *(uint *)(PTR_DAT_00080d28 + 0x20);\n    intermediate[9] = *(uint *)(PTR_DAT_00080d28 + 0x24);\n    intermediate[10] = *(uint *)(PTR_DAT_00080d28 + 0x28);\n    intermediate[11] = *(uint *)(PTR_DAT_00080d28 + 0x2c);\n    intermediate[12] = *(uint *)(PTR_DAT_00080d28 + 0x30);\n    intermediate[13] = *(uint *)(PTR_DAT_00080d28 + 0x34);\n    intermediate[14] = *(uint *)(PTR_DAT_00080d28 + 0x38);\n    intermediate[15] = *(uint *)(PTR_DAT_00080d28 + 0x3c);\n    *result = 1;\n    result[1] = 0;\n    result[0x48] = 0x202;\n    result[0x41] = 0;\n    result[0x45] = 0;\n    uint quotient = input / (uint)(divisor * 2);\n    if (input == divisor * 2 * quotient) {\n        quotient = quotient - 1;\n    }\n    uint i = 0;\n    do {\n        if ((uint)(multiplier * (int)(((uint64_t)input / (uint64_t)((quotient + 1) * 2)) / (uint64_t)DAT_00080d2c)) <= intermediate[i]) {\n            result[1] = (i & 0xf) << 0x10 | (quotient & 0xff) << 8 | result[1];\n            return 0;\n        }\n        i = i + 1;\n    } while (i != 0x10);\n    return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c98",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "calculate_value_00080c98"
        },
        "FUN_000811e8": {
            "renaming": {
                "FUN_000811e8": "wait_for_data_000811e8",
                "uVar1": "current_millis",
                "iVar2": "received_byte",
                "_startMillis": "start_millis",
                "this": "this",
                "super_Print": "super_Print",
                "_vptr_Print": "_vptr_Print",
                "DAT_00000004": "timeout"
            },
            "code": "int __thiscall Stream::wait_for_data_000811e8(Stream *this)\n{\n  uint32_t current_millis;\n  int received_byte;\n\n  current_millis = millis();\n  this->start_millis = current_millis;\n  do {\n    received_byte = (*(this->super_Print)._vptr_Print[3])();\n    if (received_byte >= 0) {\n      return received_byte;\n    }\n    current_millis = millis();\n  } while (current_millis - this->start_millis < this->DAT_00000004);\n  return -1;\n}",
            "called": [
                "millis"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811e8",
            "calling": [
                "readStringUntil"
            ],
            "imported": false,
            "current_name": "wait_for_data_000811e8"
        },
        "FUN_00080250": {
            "renaming": {
                "FUN_00080250": "process_manual_and_autonomous_control_00080250",
                "puVar2": "rx_mode",
                "puVar3": "mode",
                "uVar4": "result",
                "uVar5": "pulse_width",
                "lVar6": "pulse_width_mapped",
                "iVar7": "bytes_available",
                "__fd": "file_descriptor",
                "__in_chrg": "in_charge",
                "__in_chrg_00": "in_charge_00",
                "__fd_00": "file_descriptor_00",
                "pvVar8": "printable_value",
                "sVar9": "string_length",
                "SStack_1c": "input_string"
            },
            "code": "void process_manual_and_autonomous_control_00080250() {\n  uint32_t pulse_width = pulseIn(4, 1, 20000);\n  rx_mode = pulse_width;\n  delay(10);\n  byte led_status = *LED_status;\n  *LED_status = (char)(led_status ^ 1);\n  digitalWrite(13, led_status ^ 1);\n  if (rx_mode < 1601) {\n    if (rx_mode > 902) {\n      if (*mode != 0) {\n        straight_and_stop();\n        Serial.println(\"Entered manual control mode.\");\n        *mode = 0;\n      }\n      delay(10);\n      long steer_pulse_width = map(pulseIn(3, 1, 20000), 1000, 2000, 40, 150);\n      rx_steer = steer_pulse_width;\n      long motor_pulse_width = map(pulse_width, 1000, 2000, 40, 150);\n      rx_motor = motor_pulse_width;\n      while (UART.available()) {\n        int read_byte = UART.read();\n        Serial.print(rx_steer);\n        Serial.print(\",\");\n        Serial.println(rx_motor);\n      }\n      throttle.write(rx_motor);\n      steering.write(rx_steer);\n    }\n    else {\n      if (*mode == 0) {\n        straight_and_stop();\n        Serial.println(\"Entered autonomous control mode.\");\n      }\n      *mode = 1;\n      goto label;\n    }\n  }\n  else {\n    straight_and_stop();\n    Serial.println(\"Error.\");\n  }\n  label:\n  if (UART.available()) {\n    String command = UART.readStringUntil(\",\");\n    String value = UART.readStringUntil(\"\\n\");\n    int read_byte = UART.read();\n    if (command.equals(\"steer\")) {\n      long steer_value = value.toInt();\n      steering.write(steer_value);\n    }\n    else if (command.equals(\"motor\")) {\n      long motor_value = value.toInt();\n      throttle.write(motor_value);\n    }\n    goto label;\n  }\n}\n",
            "called": [
                "map",
                "println",
                "pulseIn",
                "print",
                "print",
                "println",
                "delay",
                "~String",
                "toInt",
                "straightAndStop",
                "available",
                "write",
                "equals",
                "digitalWrite",
                "read",
                "readStringUntil",
                "operator="
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080250",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "process_manual_and_autonomous_control_00080250"
        },
        "FUN_00080d6a": {
            "renaming": {
                "FUN_00080d6a": "set_parameter_00080d6a",
                "param_1": "base_address",
                "param_2": "parameter_value",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void set_parameter_00080d6a(int base_address, int parameter_value)\n{\n    *(int *)(base_address + 0x28) = parameter_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d6a",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "set_parameter_00080d6a"
        },
        "FUN_000813dc": {
            "renaming": {
                "FUN_000813dc": "initialize_uart_000813dc",
                "this": "uart_object",
                "dwBaudRate": "baud_rate"
            },
            "code": "void __thiscall UARTClass::initialize_uart_000813dc(UARTClass *uart_object,uint32_t baud_rate)\n{\n  init(uart_object,baud_rate,0x800);\n  return;\n}",
            "called": [
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813dc",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "initialize_uart_000813dc"
        },
        "FUN_00080a0a": {
            "renaming": {
                "FUN_00080a0a": "update_params_and_set_first_param_to_value_00080a0a",
                "param_1": "params",
                "param_2": "value",
                "param_3": "has_third_param",
                "param_4": "has_fourth_param",
                "param_5": "has_fifth_param"
            },
            "code": "void update_params_and_set_first_param_to_value_00080a0a(int *params, int value, int has_third_param, int has_fourth_param, int has_fifth_param) {\n  params[17] = value;\n  if (has_fifth_param == 0) {\n    params[24] = value;\n  }\n  else {\n    params[25] = value;\n  }\n  if (has_fourth_param == 0) {\n    params[21] = value;\n  }\n  else {\n    params[20] = value;\n  }\n  if (has_third_param == 0) {\n    params[13] = value;\n  }\n  else {\n    params[12] = value;\n  }\n  params[4] = value;\n  *params = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a0a",
            "calling": [
                "PIO_Configure",
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "update_params_and_set_first_param_to_value_00080a0a"
        },
        "FUN_00080b2c": {
            "renaming": {
                "FUN_00080b2c": "initialize_channel_00080b2c",
                "param_1": "channel_id",
                "param_2": "channel_size",
                "param_3": "channel_ptr",
                "uVar3": "channel_identifier",
                "iVar1": "channel_offset",
                "iVar2": "channel_address"
            },
            "code": "void initialize_channel_00080b2c(int channel_id, uint32_t channel_size, void* channel_ptr)\n{\n    uint64_t channel_identifier = ((uint64_t)channel_size << 32) | channel_id;\n    if (channel_size > 2) {\n        channel_ptr = __func__;\n        channel_identifier = (*DAT_00080b60)(\"s____source_tc_c_00080b54\", 0x40, __func__, \"s_dwChannel____sizeof__pTc__TC_CHA_00080b5c\");\n    }\n    int channel_offset = (int)(channel_identifier >> 0x20) * 0x40;\n    int channel_address = (int)channel_identifier + channel_offset;\n    *(int *)(channel_identifier + channel_offset) = 2;\n    *(int *)(channel_address + 0x28) = 0xffffffff;\n    *(void **)(channel_address + 4) = channel_ptr;\n}",
            "called": [
                "__assert_func"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b2c",
            "calling": [
                "_initISR"
            ],
            "imported": false,
            "current_name": "initialize_channel_00080b2c"
        },
        "FUN_00083888": {
            "renaming": {
                "FUN_00083888": "initialize_data_structures_00083888",
                "param_1": "data_structure_ptr",
                "puVar5": "ptr_1",
                "puVar6": "ptr_2",
                "uVar1": "constant_1",
                "uVar2": "constant_2",
                "uVar3": "constant_3",
                "uVar4": "constant_4"
            },
            "code": "void initialize_data_structures_00083888(int param_1)\n{\n    if (*(int *)(param_1 + 0x38) == 0) {\n        undefined4 *ptr_1 = *(undefined4 **)(param_1 + 4);\n        undefined4 *ptr_2 = *(undefined4 **)(param_1 + 8);\n        undefined4 *ptr_3 = *(undefined4 **)(param_1 + 0xc);\n        ptr_1[0] = 0;\n        ptr_1[1] = 0;\n        ptr_1[2] = 0;\n        ptr_1[3] = DAT_00083968;\n        ptr_1[4] = 0;\n        ptr_1[5] = 0;\n        ptr_1[6] = 0;\n        *(undefined2 *)(ptr_1 + 7) = 4;\n        *(undefined2 *)(ptr_1 + 8) = 0;\n        *(int *)(param_1 + 0x2e8) = param_1 + 0x2ec;\n        *(undefined4 *)(param_1 + 0x2e0) = 0;\n        *(undefined4 *)(param_1 + 0x2e4) = 3;\n        memset(ptr_1 + 0x17, 0, 8);\n        ptr_1[0x19] = 0;\n        ptr_1[0xb] = DAT_00083978;\n        ptr_1[0xc] = DAT_00083974;\n        ptr_1[0xd] = DAT_00083970;\n        ptr_1[0xe] = DAT_0008396c;\n        ptr_1[0xf] = ptr_1;\n        ptr_2[0] = 0;\n        ptr_2[1] = 0;\n        ptr_2[2] = 0;\n        *(undefined2 *)(ptr_2 + 3) = 9;\n        *(undefined2 *)(ptr_2 + 4) = 1;\n        memset(ptr_2 + 0x17, 0, 8);\n        ptr_2[0x19] = 0;\n        ptr_2[0xb] = DAT_00083978;\n        ptr_2[0xc] = DAT_00083974;\n        ptr_2[0xd] = DAT_00083970;\n        ptr_2[0xe] = DAT_0008396c;\n        ptr_2[0xf] = ptr_2;\n        ptr_3[0] = 0;\n        ptr_3[1] = 0;\n        ptr_3[2] = 0;\n        *(undefined2 *)(ptr_3 + 3) = 0x12;\n        *(undefined2 *)(ptr_3 + 4) = 2;\n        memset(ptr_3 + 0x17, 0, 8);\n        ptr_3[0x19] = 0;\n        ptr_3[0xb] = DAT_00083978;\n        ptr_3[0xc] = DAT_00083974;\n        ptr_3[0xd] = DAT_00083970;\n        ptr_3[0xe] = DAT_0008396c;\n        ptr_3[0xf] = ptr_3;\n        *(int *)(param_1 + 0x38) = 1;\n    }\n    return;\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083888",
            "calling": [
                "_fflush_r",
                "_vfiprintf_r",
                "__swbuf_r",
                "__swsetup_r",
                "_fclose_r"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_00083888"
        },
        "FUN_00081348": {
            "renaming": {
                "FUN_00081348::FUN_00081348": "uart_init",
                "*this": "self",
                "*pUart": "uart",
                "dwIrq": "irq",
                "dwId": "id",
                "*pRx_buffer": "rx_buffer",
                "*pTx_buffer": "tx_buffer",
                "puVar1": "baud_rate",
                "FUN_00081348": "uart_init_00081348"
            },
            "code": "uart_init_00081348 * __thiscall uart_init_00081348(uart_init_00081348 *this, Uart *uart, IRQn_Type irq, uint32_t id, RingBuffer *rx_buffer, RingBuffer *tx_buffer)\n{\n  uint32_t baud_rate = 1000;\n  this->_pUart = uart;\n  this->_dwIrq = irq;\n  this->_rx_buffer = rx_buffer;\n  this->_dwId = id;\n  this->_tx_buffer = tx_buffer;\n  *(uint32_t *)&this->field_0x4 = 0;\n  *(uint32_t *)&this->field_0x8 = baud_rate;\n  return this;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081348",
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription",
                "USARTClass"
            ],
            "imported": false,
            "current_name": "uart_init_00081348"
        },
        "FUN_000801e0": {
            "renaming": {
                "FUN_000801e0": "initialize_car_000801e0",
                "0xe100": "57600",
                "0xd": "13",
                "0x39": "57",
                "PTR_Serial_00080244": "serial_ptr",
                "PTR_steering_00080248": "steering_ptr",
                "PTR_throttle_0008024c": "throttle_ptr",
                "straightAndStop": "move_to_initial_position",
                "startForkserver": "start_fork_server"
            },
            "code": "void initialize_car_000801e0()\n{\n  // Initialize UART communication\n  UARTClass::begin((UARTClass *)PTR_Serial_00080244, 57600);\n  // Set pin modes\n  pinMode(13, OUTPUT);\n  pinMode(6, OUTPUT);\n  pinMode(57, INPUT);\n  pinMode(4, INPUT);\n  pinMode(3, INPUT);\n  pinMode(2, INPUT);\n  // Attach servos\n  Servo::attach((Servo *)PTR_steering_00080248, 5);\n  Servo::attach((Servo *)PTR_throttle_0008024c, 6);\n  // Move car to initial position\n  straightAndStop();\n  delay(1000);\n  // Start fork server\n  startForkserver(0);\n  return;\n}",
            "called": [
                "pinMode",
                "straightAndStop",
                "startForkserver",
                "delay",
                "attach",
                "begin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000801e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_car_000801e0"
        },
        "FUN_00080d80": {
            "renaming": {
                "FUN_00080d80": "count_leading_zeros_and_call_callbacks_ones_00080d80",
                "uVar1": "leading_zeros_count",
                "uVar2": "bitfield",
                "DAT_00080db0": "PTR_bitfield_start",
                "PTR_callbacksPioA_00080db4": "PTR_callback_functions_start",
                "code": "callback_function_pointer"
            },
            "code": "void count_leading_zeros_and_call_callbacks_ones_00080d80(uint32_t bitfield) {\n  uint32_t bit_mask;\n  uint32_t leading_zeros_count;\n  uint32_t callback_index;\n  while(true) {\n    leading_zeros_count = count_leading_zeros(bitfield);\n    if(leading_zeros_count > 31) {\n      break;\n    }\n    callback_index = 31 - leading_zeros_count;\n    bit_mask = 1 << callback_index;\n    if(*((void (**)(void)) (PTR_callbacksPioA_00080db4 + callback_index * 4)) != NULL) {\n      (*((void (**)(void)) (PTR_callbacksPioA_00080db4 + callback_index * 4)))();\n    }\n    bitfield &= ~bit_mask;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d80",
            "calling": [],
            "imported": false,
            "current_name": "count_leading_zeros_and_call_callbacks_ones_00080d80"
        },
        "FUN_000811b0": {
            "renaming": {
                "FUN_000811b0": "initialize_buffer_000811b0",
                "this": "buffer",
                "_iHead": "head_index",
                "_iTail": "tail_index"
            },
            "code": "initialize_buffer_000811b0* __thiscall initialize_buffer_000811b0(initialize_buffer_000811b0* buffer)\n{\n    memset(buffer, 0, 128);\n    buffer->head_index = 0;\n    buffer->tail_index = 0;\n    return buffer;\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811b0",
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "imported": false,
            "current_name": "initialize_buffer_000811b0"
        },
        "FUN_0008387c": {
            "renaming": {
                "FUN_0008387c": "walk_functions_0008387c",
                "param_1": "ptr",
                "DAT_00083884": "data"
            },
            "code": "void walk_functions_0008387c(void* ptr)\n{\n  _fwalk(ptr, DAT_00083884);\n  return;\n}",
            "called": [
                "_fwalk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008387c",
            "calling": [],
            "imported": false,
            "current_name": "walk_functions_0008387c"
        },
        "FUN_0008145c": {
            "renaming": {
                "FUN_0008145c": "map_value_to_range_0008145c",
                "x": "input_value",
                "in_min": "input_min",
                "in_max": "input_max",
                "out_min": "output_min",
                "out_max": "output_max",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "uint32_t map_value_to_range_0008145c(uint32_t input_value, uint32_t input_min, uint32_t input_max, uint32_t output_min, uint32_t output_max) {\n    uint32_t input_range = input_max - input_min;\n    uint32_t output_range = output_max - output_min;\n    uint32_t mapped_value = ((input_value - input_min) * output_range) / input_range + output_min;\n    return mapped_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008145c",
            "calling": [
                "write",
                "loop"
            ],
            "imported": false,
            "current_name": "map_value_to_range_0008145c"
        },
        "FUN_00081f94": {
            "renaming": {
                "FUN_00081f94": "do_nothing_00081f94"
            },
            "code": "\nvoid do_nothing_00081f94(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f94",
            "calling": [
                "_realloc_r",
                "_free_r",
                "_malloc_r",
                "_malloc_trim_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00081f94"
        },
        "FUN_00081f98": {
            "renaming": {
                "FUN_00081f98": "do_nothing_00081f98"
            },
            "code": "\nvoid do_nothing_00081f98(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f98",
            "calling": [
                "_realloc_r",
                "_free_r",
                "_malloc_r",
                "_malloc_trim_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00081f98"
        },
        "FUN_000809e4": {
            "renaming": {
                "FUN_000809e4": "set_values_at_indices_000809e4",
                "param_1": "data",
                "param_2": "value",
                "param_3": "index_mask",
                "bVar1": "is_index_0x11_set",
                "PTR_": "data",
                "DAT_": "value"
            },
            "code": "void set_values_at_indices_000809e4(uint32_t* PTR_, uint32_t DAT_, uint32_t index_mask) {\n    bool is_index_0x11_set = (int)(index_mask << 0x1f) < 0;\n    PTR_[0x11] = DAT_;\n    if (is_index_0x11_set) {\n        PTR_[0x19] = DAT_;\n    }\n    if (!is_index_0x11_set) {\n        PTR_[0x18] = DAT_;\n    }\n    bool is_index_8_set = (index_mask & 10) != 0;\n    if (is_index_8_set) {\n        PTR_[8] = DAT_;\n    }\n    if (!is_index_8_set) {\n        PTR_[9] = DAT_;\n    }\n    bool are_indices_0x20_or_0x1e_or_0x1c_set = ((int)(index_mask << 0x1e) < 0) || ((int)(index_mask << 0x1c) < 0);\n    if (are_indices_0x20_or_0x1e_or_0x1c_set) {\n        PTR_[0x20] = DAT_;\n    }\n    PTR_[5] = DAT_;\n    *PTR_ = DAT_;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000809e4",
            "calling": [
                "PIO_Configure"
            ],
            "imported": false,
            "current_name": "set_values_at_indices_000809e4"
        },
        "FUN_00081470": {
            "renaming": {
                "FUN_00081470": "do_nothing_00081470"
            },
            "code": "\nvoid __thiscall String::do_nothing_00081470(String *this)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081470",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_00081470"
        },
        "FUN_00081472": {
            "renaming": {
                "String::_String": "String_free_buffer",
                "this": "string_ptr",
                "__in_chrg": "is_owner",
                "free": "free",
                "buffer": "buffer",
                "FUN_00081472": "String_free_buffer_00081472"
            },
            "code": "void* String_free_buffer_00081472(String* string_ptr, int is_owner)\n{\n    free(string_ptr->buffer);\n    return string_ptr;\n}",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081472",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "String_free_buffer_00081472"
        },
        "FUN_00084860": {
            "renaming": {
                "FUN_00084860": "FUNC_00084860"
            },
            "code": "\nundefined8 FUNC_00084860(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  bool bVar11;\n  \n  if (param_4 == 0) {\n    if (param_3 <= param_2) {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar9 = count_leading_zeroes(param_3);\n      if (uVar9 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar9 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar9 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar8 = uVar3 / uVar2;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = uVar4 * uVar8;\n        uVar5 = param_1 >> (0x20 - uVar9 & 0xff) | param_2 << (uVar9 & 0xff);\n        uVar3 = uVar5 >> 0x10 | (uVar3 - uVar2 * uVar8) * 0x10000;\n        param_1 = param_1 << (uVar9 & 0xff);\n        uVar9 = uVar8;\n        if (uVar3 <= uVar7 && uVar7 - uVar3 != 0) {\n          bVar11 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar9 = uVar8 - 1;\n          if ((bVar11 == false) && (uVar3 <= uVar7 && uVar7 - uVar3 != 0)) {\n            uVar9 = uVar8 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar6 = (uVar3 - uVar7) / uVar2;\n        uVar8 = uVar4 * uVar6;\n        param_2 = uVar5 & 0xffff | ((uVar3 - uVar7) - uVar2 * uVar6) * 0x10000;\n        uVar7 = uVar6;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar11 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar7 = uVar6 - 1;\n          if ((bVar11 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar7 = uVar6 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        uVar7 = uVar7 | uVar9 << 0x10;\n      }\n      uVar8 = param_2 / uVar2;\n      uVar3 = uVar4 * uVar8;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar2 * uVar8) * 0x10000;\n      uVar9 = uVar8;\n      if (uVar5 <= uVar3 && uVar3 - uVar5 != 0) {\n        bVar11 = CARRY4(uVar5,param_3);\n        uVar5 = uVar5 + param_3;\n        uVar9 = uVar8 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar3 && uVar3 - uVar5 != 0)) {\n          uVar9 = uVar8 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar8 = (uVar5 - uVar3) / uVar2;\n      uVar4 = uVar4 * uVar8;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar3) - uVar2 * uVar8) * 0x10000;\n      uVar2 = uVar8;\n      if (uVar5 <= uVar4 && uVar4 - uVar5 != 0) {\n        uVar2 = uVar8 - 1;\n        if ((CARRY4(uVar5,param_3) == false) &&\n           (uVar5 + param_3 <= uVar4 && uVar4 - (uVar5 + param_3) != 0)) {\n          uVar2 = uVar8 - 2;\n        }\n      }\n      return CONCAT44(uVar7,uVar2 | uVar9 << 0x10);\n    }\n    uVar9 = count_leading_zeroes(param_3);\n    if (uVar9 != 0) {\n      uVar7 = param_1 >> (0x20 - uVar9 & 0xff);\n      param_3 = param_3 << (uVar9 & 0xff);\n      param_1 = param_1 << (uVar9 & 0xff);\n      param_2 = uVar7 | param_2 << (uVar9 & 0xff);\n    }\n    uVar7 = param_3 >> 0x10;\n    uVar2 = param_2 / uVar7;\n    uVar4 = (param_3 & 0xffff) * uVar2;\n    uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar2) * 0x10000;\n    uVar9 = uVar2;\n    if (uVar8 <= uVar4 && uVar4 - uVar8 != 0) {\n      bVar11 = CARRY4(uVar8,param_3);\n      uVar8 = uVar8 + param_3;\n      uVar9 = uVar2 - 1;\n      if ((bVar11 == false) && (uVar8 <= uVar4 && uVar4 - uVar8 != 0)) {\n        uVar9 = uVar2 - 2;\n        uVar8 = uVar8 + param_3;\n      }\n    }\n    uVar5 = (uVar8 - uVar4) / uVar7;\n    uVar2 = (param_3 & 0xffff) * uVar5;\n    uVar4 = param_1 & 0xffff | ((uVar8 - uVar4) - uVar7 * uVar5) * 0x10000;\n    uVar7 = uVar5;\n    if (uVar4 <= uVar2 && uVar2 - uVar4 != 0) {\n      uVar7 = uVar5 - 1;\n      if ((CARRY4(uVar4,param_3) == false) &&\n         (uVar4 + param_3 <= uVar2 && uVar2 - (uVar4 + param_3) != 0)) {\n        uVar7 = uVar5 - 2;\n      }\n    }\n    uVar9 = uVar7 | uVar9 << 0x10;\n    uVar7 = 0;\n  }\n  else {\n    if (param_2 < param_4) {\n      return 0;\n    }\n    uVar9 = count_leading_zeroes(param_4);\n    if (uVar9 == 0) {\n      if ((param_4 < param_2) || (uVar7 = uVar9, param_3 <= param_1)) {\n        return 1;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar9;\n      uVar7 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_4 << (uVar9 & 0xff) | param_3 >> (uVar2 & 0xff);\n      uVar8 = uVar4 >> 0x10;\n      uVar6 = uVar7 / uVar8;\n      uVar5 = (uVar4 & 0xffff) * uVar6;\n      uVar3 = param_1 >> (uVar2 & 0xff) | param_2 << (uVar9 & 0xff);\n      uVar2 = uVar3 >> 0x10 | (uVar7 - uVar8 * uVar6) * 0x10000;\n      uVar7 = uVar6;\n      if (uVar2 <= uVar5 && uVar5 - uVar2 != 0) {\n        bVar11 = CARRY4(uVar2,uVar4);\n        uVar2 = uVar2 + uVar4;\n        uVar7 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar2 <= uVar5 && uVar5 - uVar2 != 0)) {\n          uVar7 = uVar6 - 2;\n          uVar2 = uVar2 + uVar4;\n        }\n      }\n      uVar6 = (uVar2 - uVar5) / uVar8;\n      uVar10 = (uVar4 & 0xffff) * uVar6;\n      uVar8 = uVar3 & 0xffff | ((uVar2 - uVar5) - uVar8 * uVar6) * 0x10000;\n      uVar2 = uVar6;\n      if (uVar8 <= uVar10 && uVar10 - uVar8 != 0) {\n        bVar11 = CARRY4(uVar8,uVar4);\n        uVar8 = uVar8 + uVar4;\n        uVar2 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar8 <= uVar10 && uVar10 - uVar8 != 0)) {\n          uVar2 = uVar6 - 2;\n          uVar8 = uVar8 + uVar4;\n        }\n      }\n      uVar2 = uVar2 | uVar7 << 0x10;\n      lVar1 = (ulonglong)uVar2 * (ulonglong)(param_3 << (uVar9 & 0xff));\n      uVar7 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar8 - uVar10 < uVar7) ||\n         ((uVar8 - uVar10 == uVar7 && (param_1 << (uVar9 & 0xff) < (uint)lVar1)))) {\n        uVar9 = uVar2 - 1;\n        uVar7 = 0;\n      }\n      else {\n        uVar9 = uVar2;\n        uVar7 = 0;\n      }\n    }\n  }\n  return CONCAT44(uVar7,uVar9);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00084860",
            "calling": [
                "__gnu_uldivmod_helper"
            ],
            "imported": false,
            "current_name": "FUNC_00084860"
        },
        "FUN_000836ec": {
            "renaming": {
                "FUN_000836ec": "raise_signal_and_exit_000836ec",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void raise_signal_and_exit_000836ec(void)\n{\n    raise(SIGABRT);\n    _exit(EXIT_FAILURE);\n}",
            "called": [
                "_exit",
                "raise"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000836ec",
            "calling": [
                "__assert_func"
            ],
            "imported": false,
            "current_name": "raise_signal_and_exit_000836ec"
        },
        "FUN_00080148": {
            "renaming": {
                "FUN_00080148": "software_interrupt_handler_00080148",
                "a0": "interrupt_code",
                "a1": "data",
                "a2": "status"
            },
            "code": "uint32_t software_interrupt_handler_00080148(uint32_t interrupt_code, uint32_t data, int32_t status){\n  software_interrupt(interrupt_code);\n  return data;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080148",
            "calling": [
                "startForkserver"
            ],
            "imported": false,
            "current_name": "software_interrupt_handler_00080148"
        },
        "FUN_00082688": {
            "renaming": {
                "FUN_00082688": "calculate_string_length_00082688",
                "__s": "string",
                "sVar1": "offset",
                "puVar2": "word_ptr",
                "uVar3": "word",
                "bVar4": "byte_is_zero"
            },
            "code": "size_t calculate_string_length_00082688(char* string)\n{\n  size_t length = 0;\n  uint* word_ptr = (uint*)((uint)string & 0xfffffffc);\n  size_t offset = -((uint)string & 3);\n  uint word = *word_ptr;\n  if ((uint)string & 3)\n  {\n    word |= 0xffffffffU >> ((offset + 4 & 0x1f) << 3);\n  }\n  while ((word + 0xfefefeff & ~word & 0x80808080) == 0)\n  {\n    offset += 4;\n    word = *(++word_ptr);\n  }\n  bool byte_is_zero = (word & 0xff) == 0;\n  if (!byte_is_zero)\n  {\n    offset++;\n    byte_is_zero = (word & 0xff00) == 0;\n  }\n  if (!byte_is_zero)\n  {\n    offset++;\n    byte_is_zero = (word & 0xff0000) == 0;\n  }\n  if (!byte_is_zero)\n  {\n    offset++;\n  }\n  length = offset;\n  return length;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082688",
            "calling": [
                "write",
                "_vfiprintf_r",
                "String"
            ],
            "imported": false,
            "current_name": "calculate_string_length_00082688"
        },
        "FUN_00084508": {
            "renaming": {
                "FUN_00084508": "read_file_00084508",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar1": "error_ptr",
                "iVar2": "read_result"
            },
            "code": "void read_file_00084508(int *error_code, int file_descriptor, char *buffer, int buffer_size)\n{\n    int read_result;\n    int *error_ptr = PTR_errno_0008452c;\n    *(undefined4 *)PTR_errno_0008452c = 0;\n    read_result = _read(file_descriptor, buffer, buffer_size);\n    if ((read_result == -1) && (*(int *)error_ptr != 0)) {\n        *error_code = *(int *)error_ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "_read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084508",
            "calling": [
                "__sread"
            ],
            "imported": false,
            "current_name": "read_file_00084508"
        },
        "FUN_0008429c": {
            "renaming": {
                "FUN_0008429c": "close_file_descriptor_0008429c",
                "param_1": "file_descriptor",
                "param_2": "offset"
            },
            "code": "void close_file_descriptor_0008429c(void* file_descriptor, int offset) {\n    _close_r(file_descriptor, (int)*(short *)(offset + 0xe));\n    return;\n}",
            "called": [
                "_close_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008429c",
            "calling": [],
            "imported": false,
            "current_name": "close_file_descriptor_0008429c"
        },
        "FUN_00080a30": {
            "renaming": {
                "FUN_00080a30": "process_input_00080a30",
                "param_1": "input_buffer",
                "param_2": "input_type",
                "param_3": "input_value",
                "param_4": "input_flag",
                "bVar1": "is_negative"
            },
            "code": "int process_input_00080a30(int input_buffer, int input_type, int input_value, uint32_t input_flag) {\n  bool is_negative = (int)(input_flag << 0x1f) < 0;\n  switch(input_type) {\n    case 1:\n    case 2:\n      (*PTR_FUN_00080a88)(input_buffer, input_type, input_value);\n      *(int *)(input_buffer + 0x44) = input_value;\n      if (is_negative) {\n        *(int *)(input_buffer + 100) = input_value;\n      }\n      if (!is_negative) {\n        *(int *)(input_buffer + 0x60) = input_value;\n      }\n      break;\n    case 3:\n      (*PTR_FUN_00080a8c)(input_buffer, input_value, input_flag, PTR_DAT_00080a8c, input_buffer);\n      break;\n    case 4:\n    case 5:\n      (*PTR_FUN_00080a90)(input_buffer, input_value, input_type == 5, (input_flag << 0x1d) >> 0x1f, input_flag & 1, input_type, input_value);\n      break;\n    default:\n      return 0;\n  }\n  return 1;\n}",
            "called": [
                "PIO_SetOutput",
                "PIO_SetInput",
                "PIO_SetPeripheral"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a30",
            "calling": [
                "pinMode",
                "init"
            ],
            "imported": false,
            "current_name": "process_input_00080a30"
        },
        "FUN_000810a6": {
            "renaming": {
                "__thiscall Print::FUN_000810a6": "print_string",
                "this": "this",
                "str": "string",
                "sVar1": "string_length",
                "sVar2": "print_length",
                "FUN_000810a6": "print_string_000810a6"
            },
            "code": "size_t __thiscall print_string_000810a6(Print *this, char *string) {\\n\\\n    size_t string_length;\\n\\\n    size_t print_length;\\n\\\n    if (string != NULL) {\\n\\\n        string_length = strlen(string);\\n\\\n        print_length = (*this->_vptr_Print[1])(string_length, string, string_length);\\n\\\n        return print_length;\\n\\\n    }\\n\\\n    return (size_t)string;\\n\\\n}",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810a6",
            "calling": [
                "print",
                "println",
                "println",
                "printNumber"
            ],
            "imported": false,
            "current_name": "print_string_000810a6"
        }
    },
    "used_tokens": 143014,
    "layers": [
        [
            "FUN_000809b4",
            "FUN_00080e6a",
            "FUN_00081684",
            "FUN_000825cc",
            "FUN_00083984",
            "FUN_00080598",
            "FUN_00080aa8",
            "FUN_00080118",
            "FUN_00083a74",
            "FUN_00080e80",
            "FUN_00080d62",
            "FUN_00080e84",
            "FUN_00080e88",
            "FUN_000836d8",
            "FUN_000812b8",
            "FUN_00081570",
            "FUN_000803fc",
            "FUN_00083630",
            "FUN_00081214",
            "FUN_0008439c",
            "FUN_0008427c",
            "FUN_000809be",
            "FUN_00080d70",
            "FUN_000840f8",
            "FUN_000813e4",
            "FUN_00081d48",
            "FUN_00083fbc",
            "FUN_00084494",
            "FUN_00084018",
            "FUN_000815de",
            "FUN_00080578",
            "FUN_0008400c",
            "FUN_00080e60",
            "FUN_000814d0",
            "FUN_00080c20",
            "FUN_00080e62",
            "FUN_0008044c",
            "FUN_00080efe",
            "FUN_00081e34",
            "FUN_00080e66",
            "FUN_000826e8",
            "FUN_00080df0",
            "FUN_00083850",
            "FUN_000815ec",
            "FUN_00080588",
            "FUN_00080d3e",
            "FUN_000841f4",
            "FUN_000812a0",
            "FUN_0008130c",
            "FUN_0008142e",
            "FUN_00080d58",
            "FUN_00081084",
            "FUN_00080558",
            "FUN_00083708",
            "FUN_0008458c",
            "FUN_0008434c",
            "FUN_0008151c",
            "FUN_000816f8",
            "FUN_00084244",
            "FUN_00084004",
            "FUN_000816ec",
            "FUN_00080568",
            "FUN_000814ae",
            "FUN_00081778",
            "FUN_00080d30",
            "FUN_00080eec",
            "FUN_000816c8",
            "FUN_000810fc",
            "FUN_00080ec2",
            "FUN_00081624",
            "FUN_00080ec8",
            "FUN_000843e0",
            "FUN_00080eba",
            "FUN_0008173c",
            "FUN_00081190",
            "FUN_000805e8",
            "FUN_00080ebe",
            "FUN_000816d8",
            "FUN_000815b8",
            "FUN_00080e28",
            "FUN_00084220",
            "FUN_00080db8",
            "FUN_0008421c",
            "FUN_0008089c",
            "FUN_000816e4",
            "FUN_00080750",
            "FUN_00080ea4",
            "FUN_00080f0c",
            "FUN_000844e0",
            "FUN_0008236c",
            "FUN_000842a4",
            "FUN_000839b4",
            "FUN_00080eb0",
            "FUN_00081734",
            "FUN_00080768",
            "FUN_00080a94",
            "FUN_00081618",
            "FUN_0008455c",
            "FUN_00081f00",
            "FUN_0008075c",
            "FUN_00080eaa",
            "FUN_00084530",
            "FUN_00080970",
            "FUN_000806ac",
            "FUN_20070000",
            "FUN_000834f0",
            "FUN_0008125a",
            "FUN_000810d8",
            "FUN_00080f04",
            "FUN_000805a8",
            "FUN_00080184",
            "FUN_000810cc",
            "FUN_00081276",
            "FUN_000844bc",
            "FUN_00080b90",
            "FUN_0008356c",
            "FUN_00080b98",
            "FUN_000843b8",
            "FUN_0008073c",
            "FUN_00081480",
            "FUN_00081244",
            "FUN_000836fc",
            "FUN_00081248",
            "FUN_0008418c",
            "FUN_0008014c",
            "FUN_000811ca",
            "FUN_00080164",
            "FUN_00081496",
            "FUN_00081014",
            "FUN_00084404",
            "FUN_000800f4",
            "FUN_00080aec",
            "FUN_0008136c",
            "FUN_000810c4",
            "FUN_00080c98",
            "FUN_000811e8",
            "FUN_00080250",
            "FUN_00080d6a",
            "FUN_000813dc",
            "FUN_00080a0a",
            "FUN_00080b2c",
            "FUN_00083888",
            "FUN_00081348",
            "FUN_000801e0",
            "FUN_00080d80",
            "FUN_0008387c",
            "FUN_0008145c",
            "FUN_000809e4",
            "FUN_000836ec",
            "FUN_00080148",
            "FUN_00082688",
            "FUN_00084508",
            "FUN_0008429c",
            "FUN_00080a30",
            "FUN_000810a6"
        ],
        [
            "FUN_00081560",
            "FUN_000814f6",
            "FUN_000841e4",
            "FUN_000827fc",
            "FUN_00081438",
            "FUN_00084484",
            "FUN_000806f8",
            "FUN_00080774",
            "FUN_0008117a",
            "FUN_000817f0",
            "FUN_00081750",
            "FUN_000817c8",
            "FUN_00082814",
            "FUN_00081176",
            "FUN_00082824",
            "FUN_0008113a",
            "FUN_000810e8",
            "FUN_00081f9c",
            "FUN_00081800",
            "FUN_00080b64",
            "FUN_0008159e",
            "FUN_000806a0",
            "FUN_000811b0",
            "FUN_00081472"
        ],
        [
            "FUN_000840f8"
        ],
        [
            "FUN_00083708",
            "FUN_00081800"
        ]
    ],
    "locked_functions": []
}