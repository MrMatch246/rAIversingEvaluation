{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "initialize_flag_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initialize_flag_000800f4(undefined4 input)\n\n{\n  if ((flag)DAT_200708a0 == '\\0') {\n    DAT_200708a0._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "initialize_flag_000800f4",
                "param_1": "input",
                "char": "flag"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000800f4": {
                    "2": "update_flag",
                    "22": "initialize_flag",
                    "1": "initialize_global_flag",
                    "4": "set_flag_if_not_set"
                },
                "param_1": {
                    "13": "input",
                    "2": "input_param",
                    "11": "input_value",
                    "1": "input_flag"
                },
                "DAT_200708a0": {
                    "14": "flag",
                    "2": "flag_variable",
                    "1": "flag_var"
                },
                "char DAT_200708a0": {
                    "1": "flag_variable"
                },
                "char": {
                    "1": "flag"
                }
            }
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "process_data_00080164",
            "code": "\nvoid process_data_00080164(undefined4 unused_param,undefined4 unused_param,undefined4 length_param,undefined4 data_param)\n\n{\n  process_data_00080164(&DAT_200708e8,0x5a);\n  process_data_00080164(&DAT_200708d4,0x5a,length_param,data_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "process_data_00080164",
                "param_1": "unused_param",
                "param_2": "unused_param",
                "param_3": "length_param",
                "param_4": "data_param",
                "process_data_000806f8": "process_data"
            },
            "calling": [
                "FUN_000801e0",
                "FUN_00080250"
            ],
            "called": [
                "FUN_000806f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080164": {
                    "1": "process_data_and_return",
                    "11": "process_data",
                    "3": "initialize_data_processing",
                    "2": "process_and_send_data"
                },
                "param_1": {
                    "1": "first_param",
                    "3": "unused_parameter",
                    "6": "unused_param",
                    "2": "param_1"
                },
                "param_2": {
                    "1": "length",
                    "3": "arg2",
                    "8": "unused_param",
                    "2": "param_2"
                },
                "param_3": {
                    "2": "data_1",
                    "1": "extra_param_1",
                    "4": "length_param",
                    "3": "arg3"
                },
                "param_4": {
                    "1": "data_value",
                    "2": "data_2",
                    "3": "arg4"
                },
                "data": {
                    "2": "data",
                    "1": "data_buffer"
                },
                "length": {
                    "1": "data_length",
                    "2": "length"
                },
                "process_data_000806f8": {
                    "1": "send_data",
                    "6": "process_data"
                },
                "DAT_200708e8": {
                    "1": "data_array_1"
                },
                "DAT_200708d4": {
                    "1": "data_array_2"
                },
                "byte *data": {
                    "1": "data"
                },
                "uint length": {
                    "1": "data_length"
                }
            }
        },
        "FUN_000801e0": {
            "entrypoint": "0x000801e0",
            "current_name": "initialize_and_configure_peripherals_000801e0",
            "code": "\nundefined8 initialize_and_configure_peripherals_000801e0(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  initialize_peripheral(&DAT_20070be8,0xe100,param3,param4,param4);\n  set_pin_mode(0xd,1);\n  set_pin_mode(6,1);\n  set_pin_mode(0x39,0);\n  set_pin_mode(4,0);\n  set_pin_mode(3,0);\n  set_pin_mode(2,0);\n  attach_interrupt(&DAT_200708d4,5);\n  attach_interrupt(&DAT_200708e8,6);\n  move_straight_and_stop();\n  delay_milliseconds(1000);\n  if (DAT_200708bc == 0) {\n    trigger_software_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000801e0": "initialize_and_configure_peripherals_000801e0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "initialize_peripheral_000813dc": "initialize_peripheral",
                "pinMode": "set_pin_mode",
                "attach": "attach_interrupt",
                "straightAndStop": "move_straight_and_stop",
                "delay": "delay_milliseconds",
                "software_interrupt": "trigger_software_interrupt",
                "pin": "pin_number"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_00080f0c",
                "FUN_000806a0",
                "FUN_00080164",
                "FUN_00080f08",
                "FUN_000813dc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000801e0": {
                    "3": "initialize_and_check_peripherals",
                    "1": "initialize_peripheral_and_check_errors",
                    "8": "initialize_and_configure_peripherals",
                    "4": "initialize_and_configure_peripheral"
                },
                "param_1": {
                    "1": "pin_mode1",
                    "3": "channel",
                    "4": "param_1",
                    "18": "param1"
                },
                "param_2": {
                    "1": "mode2",
                    "18": "param2",
                    "3": "arg2",
                    "4": "param_2"
                },
                "param_3": {
                    "1": "pin_config_1",
                    "16": "param3",
                    "3": "arg3",
                    "2": "pin1"
                },
                "param_4": {
                    "16": "param4",
                    "3": "arg4",
                    "2": "mode",
                    "1": "input_param_4"
                },
                "initialize_peripheral_000813dc": {
                    "1": "set_peripheral_parameters",
                    "26": "initialize_peripheral",
                    "2": "initialize_peripherals"
                },
                "pinMode": {
                    "5": "configure_pin_mode",
                    "1": "configure_pin",
                    "13": "set_pin_mode"
                },
                "attach": {
                    "1": "attach_pin_interrupt",
                    "18": "attach_interrupt"
                },
                "straightAndStop": {
                    "1": "perform_straight_stop",
                    "6": "move_straight_and_stop",
                    "2": "move_robot_straight_and_stop"
                },
                "delay": {
                    "1": "delay_millis",
                    "4": "delay_execution",
                    "2": "delay",
                    "3": "wait",
                    "6": "delay_milliseconds"
                },
                "DAT_200708bc": {
                    "1": "interrupt_check",
                    "10": "interrupt_flag",
                    "3": "interrupt_status"
                },
                "software_interrupt": {
                    "4": "trigger_interrupt",
                    "1": "handle_interrupt",
                    "11": "trigger_software_interrupt"
                },
                "DAT_20070be8": {
                    "7": "peripheral_data",
                    "1": "peripheral1"
                },
                "DAT_200708d4": {
                    "1": "interrupt_data1",
                    "2": "interrupt_data_1"
                },
                "DAT_200708e8": {
                    "1": "peripheral3",
                    "2": "interrupt_data_2"
                },
                "configure_peripheral_00080f0c": {
                    "17": "configure_peripheral"
                },
                "initialize_pin_000806a0": {
                    "17": "initialize_pin"
                },
                "FUN_00080164": {
                    "1": "perform_operation",
                    "2": "initialize_pins",
                    "3": "configure_interrupts"
                },
                "FUNC_00080f08": {
                    "5": "straight_and_stop",
                    "1": "perform_another_function",
                    "2": "perform_interrupt"
                },
                "channel": {
                    "1": "peripheral_channel"
                },
                "mode": {
                    "1": "peripheral_mode"
                },
                "data": {
                    "2": "pin_data"
                },
                "pin": {
                    "1": "pin_number"
                },
                "param1": {
                    "1": "channel"
                },
                "param2": {
                    "1": "mode"
                },
                "0xe100": {
                    "1": "peripheral_channel"
                },
                "0xd": {
                    "1": "pin_1"
                },
                "6": {
                    "1": "pin_2"
                },
                "0x39": {
                    "1": "pin_3"
                },
                "4": {
                    "1": "pin_4"
                },
                "3": {
                    "1": "pin_5"
                },
                "2": {
                    "1": "pin_6"
                },
                "&DAT_200708d4": {
                    "1": "interrupt_handler_1"
                },
                "&DAT_200708e8": {
                    "1": "interrupt_handler_2"
                }
            }
        },
        "FUN_00080250": {
            "entrypoint": "0x00080250",
            "current_name": "control_robot_00080250",
            "code": "\nvoid control_robot_00080250(void)\n\n{\n  undefined4 pulse_duration;\n  int available_data;\n  undefined *data_ptr;\n  undefined input_buffer [12];\n  \n  DAT_200708c0 = measure_pulse(4,1,20000);\n  wait(10);\n  DAT_200708c4 = DAT_200708c4 ^ 1;\n  set_pin_state(0xd);\n  if (DAT_200708c0 < 0x641) {\n    if (DAT_200708c0 - 0x385U < 299) {\n      if (DAT_200708eb != '\\0') {\n        stop_motor();\n        calculate_sum(&DAT_20070be8,\"Entered manual control mode.\");\n        DAT_200708eb = '\\0';\n      }\n      wait(10);\n      pulse_duration = measure_pulse(3,1,20000);\n      DAT_200708d8 = map_values(0,1000,2000,0x28,0x96);\n      DAT_200708ec = map_values(pulse_duration,1000,2000,0x28,0x96);\n      while (available_data = check_available(&DAT_20070be8), 0 < available_data) {\n        read_data(&DAT_20070be8);\n        print_data(&DAT_20070be8,DAT_200708d8,10);\n        process_string(&DAT_20070be8,&DAT_00084b13);\n        print_data_line(&DAT_20070be8,DAT_200708ec,10);\n      }\n      process_data(&DAT_200708e8,DAT_200708ec);\n      process_data(&DAT_200708d4,DAT_200708d8);\n    }\n    else {\n      if (DAT_200708eb == '\\0') {\n        stop_motor();\n        calculate_sum(&DAT_20070be8,\"Entered autonomous control mode.\");\n      }\n      DAT_200708eb = '\\x01';\nprocess_command:\n      available_data = check_available(&DAT_20070be8);\n      if (0 < available_data) {\n        read_until(input_buffer,&DAT_20070be8,0x2c);\n        assign_value(&DAT_200708dc,input_buffer);\n        delete_string(input_buffer);\n        read_until(input_buffer,&DAT_20070be8,10);\n        assign_value(&DAT_200708c8,input_buffer);\n        delete_string(input_buffer);\n        read_data(&DAT_20070be8);\n        available_data = is_equal(&DAT_200708dc,\"control_steer\");\n        if (available_data == 0) goto LAB_0008039c;\n        pulse_duration = convert_to_int(&DAT_200708c8);\n        data_ptr = &DAT_200708d4;\n        goto LAB_000803b2;\n      }\n    }\n  }\n  else {\n    stop_motor();\n    calculate_sum(&DAT_20070be8,\"error\");\n  }\n  return;\nLAB_0008039c:\n  available_data = is_equal(&DAT_200708dc,\"control_motor\");\n  if (available_data != 0) {\n    pulse_duration = convert_to_int(&DAT_200708c8);\n    data_ptr = &DAT_200708e8;\nLAB_000803b2:\n    process_data(data_ptr,pulse_duration);\n  }\n  goto process_command;\n}\n\n",
            "renaming": {
                "FUN_00080250": "control_robot_00080250",
                "uVar1": "pulse_duration",
                "iVar2": "available_data",
                "puVar3": "data_ptr",
                "auStack_1c": "input_buffer",
                "pulseIn": "measure_pulse",
                "delay": "wait",
                "digitalWrite": "set_pin_state",
                "straightAndStop": "stop_motor",
                "calculate_sum_000810e8": "calculate_sum",
                "process_string_000810c4": "process_string",
                "available": "check_available",
                "read": "read_data",
                "print": "print_data",
                "println": "print_data_line",
                "map": "map_values",
                "process_data_000806f8": "process_data",
                "equals": "is_equal",
                "toInt": "convert_to_int",
                "readStringUntil": "read_until",
                "operator=": "assign_value",
                "~String": "delete_string",
                "steer": "control_steer",
                "motor": "control_motor",
                "LAB_00080346": "process_command",
                "String": "create_string"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_00081014",
                "FUN_000806f8",
                "FUN_00081472",
                "FUN_00080f08",
                "FUN_000810c4",
                "FUN_00081560",
                "FUN_00081624",
                "FUN_00081276",
                "FUN_000815de",
                "FUN_0008145c",
                "FUN_00081176",
                "FUN_00081214",
                "FUN_00080164",
                "FUN_00081248",
                "FUN_000810e8",
                "FUN_000815b8",
                "FUN_0008117a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080250": {
                    "1": "control_function",
                    "3": "control_motor",
                    "8": "control_robot",
                    "5": "control_system",
                    "6": "control_mode",
                    "2": "control_mode_switch",
                    "4": "control_and_process_data"
                },
                "uVar1": {
                    "1": "mapped_value",
                    "10": "pulse_duration",
                    "3": "duration",
                    "4": "result"
                },
                "iVar2": {
                    "1": "index",
                    "7": "count",
                    "9": "available_data"
                },
                "puVar3": {
                    "1": "data_buffer",
                    "9": "data_ptr",
                    "6": "data_pointer",
                    "3": "ptr"
                },
                "auStack_1c": {
                    "9": "input_buffer",
                    "1": "input_data_temp",
                    "2": "end_marker",
                    "8": "buffer"
                },
                "pulseIn": {
                    "1": "get_pulse",
                    "7": "measure_pulse",
                    "4": "get_pulse_duration"
                },
                "delay": {
                    "1": "delay_execution",
                    "9": "wait",
                    "2": "delay"
                },
                "digitalWrite": {
                    "1": "set_pin",
                    "2": "set_digital_pin",
                    "5": "set_pin_state"
                },
                "straightAndStop": {
                    "1": "stop_straight_movement",
                    "2": "stop_motor"
                },
                "calculate_sum_000810e8": {
                    "19": "calculate_sum",
                    "1": "calculate_checksum"
                },
                "process_string_000810c4": {
                    "19": "process_string",
                    "1": "parse_and_process_string"
                },
                "available": {
                    "1": "is_available",
                    "2": "get_available",
                    "3": "check_available"
                },
                "read": {
                    "9": "read_data",
                    "2": "read_input",
                    "1": "read_from_stream"
                },
                "print": {
                    "1": "print_to_stream",
                    "8": "print_data"
                },
                "println": {
                    "1": "print_data_with_new_line",
                    "5": "print_line"
                },
                "map": {
                    "3": "map_value",
                    "1": "remap_values"
                },
                "process_data_000806f8": {
                    "20": "process_data"
                },
                "equals": {
                    "1": "is_string_equal",
                    "2": "check_equality",
                    "3": "compare_strings",
                    "7": "is_equal"
                },
                "toInt": {
                    "11": "convert_to_int",
                    "1": "parse_integer"
                },
                "readStringUntil": {
                    "1": "read_string_until_delimiter",
                    "2": "read_string",
                    "4": "read_until"
                },
                "operator=": {
                    "1": "assign",
                    "11": "assign_value"
                },
                "~String": {
                    "2": "deallocate_string",
                    "6": "delete_string",
                    "1": "free_memory"
                },
                "steer": {
                    "1": "steer_value"
                },
                "motor": {
                    "1": "motor_control"
                },
                "set_pin_mode_00081014": {
                    "13": "set_pin_mode"
                },
                "free_memory_00081472": {
                    "8": "free_memory"
                },
                "FUNC_00080f08": {
                    "1": "unsupported_function"
                },
                "check_and_move_00081560": {
                    "12": "check_and_move"
                },
                "calculate_pulse_duration_00081624": {
                    "1": "calculate_duration",
                    "15": "calculate_pulse_duration"
                },
                "extract_byte_from_buffer_00081276": {
                    "11": "extract_byte_from_buffer",
                    "5": "extract_byte"
                },
                "parse_integer_000815de": {
                    "14": "parse_integer",
                    "2": "parse_int"
                },
                "calculate_interpolation_0008145c": {
                    "16": "calculate_interpolation",
                    "1": "interpolate_values"
                },
                "read_and_concatenate_00081214": {
                    "1": "concatenate_data",
                    "14": "read_and_concatenate"
                },
                "process_data_00080164": {
                    "10": "process_data",
                    "1": "process_data_with_length"
                },
                "calculate_difference_00081248": {
                    "18": "calculate_difference"
                },
                "compare_bytes_000815b8": {
                    "1": "compare_strings",
                    "2": "compare_byte_arrays",
                    "15": "compare_bytes"
                },
                "calculate_sum_of_formatted_number_and_string_0008117a": {
                    "6": "calculate_sum_of_formatted_number_and_string",
                    "2": "calculate_sum_formatted_number_and_string",
                    "1": "calculate_sum_from_string"
                },
                "DAT_200708c0": {
                    "3": "pulse_duration"
                },
                "DAT_200708c4": {
                    "1": "state_variable",
                    "2": "control_mode_flag"
                },
                "DAT_200708eb": {
                    "1": "control_mode"
                },
                "DAT_200708d8": {
                    "1": "motor_value"
                },
                "DAT_200708ec": {
                    "1": "motor_value"
                },
                "DAT_20070be8": {
                    "1": "input_buffer",
                    "2": "data_buffer"
                },
                "DAT_00084b13": {
                    "1": "calculation_buffer"
                },
                "operator~": {
                    "1": "negate_value"
                },
                "DAT_200708dc": {
                    "1": "input_value1"
                },
                "DAT_200708c8": {
                    "1": "value_string"
                },
                "operator==": {
                    "1": "compare"
                },
                "LAB_00080346": {
                    "1": "process_command"
                },
                "Lab_0008039c": {
                    "1": "process_motor_command"
                },
                "DAT_200708e8": {
                    "1": "motor_data2"
                },
                "String": {
                    "1": "create_string"
                },
                "lab_00080346": {
                    "1": "loop_start"
                },
                "pin_index": {
                    "1": "pin_index"
                },
                "output_value": {
                    "1": "output_value"
                },
                "param": {
                    "1": "parameter"
                },
                "data": {
                    "1": "data"
                },
                "length": {
                    "1": "length"
                },
                "value1": {
                    "1": "value1"
                },
                "value2": {
                    "1": "value2"
                },
                "index": {
                    "1": "index"
                },
                "flag": {
                    "1": "flag"
                },
                "multiplier": {
                    "1": "multiplier"
                },
                "input": {
                    "1": "input"
                },
                "input_stream": {
                    "1": "input_stream"
                },
                "end_marker": {
                    "1": "end_marker"
                },
                "unused_param": {
                    "1": "unused_param"
                },
                "length_param": {
                    "1": "length_param"
                },
                "data_param": {
                    "1": "data_param"
                },
                "string_array": {
                    "1": "string_array"
                },
                "comparison_string": {
                    "1": "comparison_string"
                },
                "input_value": {
                    "1": "input_value"
                },
                "start_value": {
                    "1": "start_value"
                },
                "input_value_2": {
                    "1": "input_value2"
                },
                "input_value_3": {
                    "1": "input_value3"
                },
                "input_value_4": {
                    "1": "input_value4"
                },
                "input_value_5": {
                    "1": "input_value5"
                },
                "output_buffer": {
                    "1": "output_buffer"
                },
                "DAT_200708d4": {
                    "1": "motor_data"
                },
                "D1isAmFufTUM959akevle86OGvz1OZt9Usq1aLfn82mBpQmfY7": {
                    "1": "input_buffer"
                },
                "calculateSumOfFormattedNumberAndString_0008117a": {
                    "1": "calculate_sum_of_formatted_number_and_string"
                },
                "UART_BUFFER_SIZE": {
                    "1": "buffer_size"
                },
                "toString": {
                    "1": "convert_to_string"
                },
                "strcmp": {
                    "1": "compare_strings"
                }
            }
        },
        "FUN_000803fc": {
            "entrypoint": "0x000803fc",
            "current_name": "configure_timer_000803fc",
            "code": "\nvoid configure_timer_000803fc(int channel,uint channel,undefined4 clock,uint bit_position)\n\n{\n  undefined4 file_path;\n  undefined4 assert_func_param2;\n  undefined8 combined_params;\n  \n  combined_params = CONCAT44(channel,channel);\n  enable_peripheral_clock(clock);\n  configure_timer_000803fc(channel,channel,0xc002);\n  set_timer_ra(channel,channel,0xa41);\n  *(int *)((bit_position >> 5) * 4 + -0x1fff1f00) = 1 << (bit_position & 0x1f);\n  *(undefined4 *)(channel + channel * 0x40 + 0x24) = 4;\n  if (2 < channel) {\n    combined_params = assert_function(\"../source/tc.c\",0x5c,\"start_timer\",\n                          \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\",\n                          file_path,assert_func_param2);\n  }\n  *(undefined4 *)((int)combined_params + (int)((ulonglong)combined_params >> 0x20) * 0x40) = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000803fc": "configure_timer_000803fc",
                "param_1": "channel",
                "param_2": "channel",
                "param_3": "clock",
                "param_4": "bit_position",
                "unaff_r4": "file_path",
                "in_lr": "assert_func_param2",
                "uVar1": "combined_params",
                "pmc_enable_periph_clk": "enable_peripheral_clock",
                "TC_Configure": "configure_timer",
                "TC_SetRA": "set_timer_ra",
                "__assert_func": "assert_function",
                "TC_Start": "start_timer",
                "assert_func": "assert_function"
            },
            "calling": [
                "FUN_000806a0"
            ],
            "called": [
                "FUN_00080aa8",
                "FUN_000816f8",
                "FUN_00080b2c",
                "FUN_00080b90"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000803fc": {
                    "1": "configure_timer_channel",
                    "9": "initialize_timer",
                    "2": "initialize_tc",
                    "13": "configure_timer",
                    "4": "configure_tc"
                },
                "param_1": {
                    "4": "timer_id",
                    "1": "peripheral_index",
                    "5": "timer_index",
                    "13": "channel"
                },
                "param_2": {
                    "1": "param2_value",
                    "2": "timer",
                    "3": "timer_channel",
                    "4": "mode",
                    "6": "channel"
                },
                "param_3": {
                    "4": "peripheral_clock",
                    "12": "clock",
                    "2": "clock_id",
                    "1": "clock_port"
                },
                "param_4": {
                    "3": "bit_mask",
                    "4": "bit",
                    "7": "bit_position",
                    "1": "bit_flag"
                },
                "unaff_r4": {
                    "1": "temp_var1",
                    "2": "file_path"
                },
                "in_lr": {
                    "1": "assert_message2",
                    "2": "assert_func_arg2"
                },
                "uVar1": {
                    "1": "merged_params",
                    "3": "combined_param",
                    "7": "concatenated_params",
                    "5": "concatenated_value",
                    "9": "combined_params"
                },
                "pmc_enable_periph_clk": {
                    "1": "enable_clock_for_peripheral",
                    "8": "enable_peripheral_clock"
                },
                "TC_Configure": {
                    "6": "configure_timer",
                    "2": "configure_tc",
                    "3": "configure_timer_channel"
                },
                "TC_SetRA": {
                    "7": "set_timer_ra",
                    "1": "set_ra"
                },
                "*(int *)((param_4 >> 5) * 4 + -0x1fff1f00)": {
                    "1": "bit_address"
                },
                "*(undefined4 *)(param_1 + param_2 * 0x40 + 0x24)": {
                    "1": "timer_control"
                },
                "2": {
                    "1": "max_channel"
                },
                "__assert_func": {
                    "1": "assert",
                    "7": "assert_function"
                },
                "../source/tc.c": {
                    "1": "source_file_path"
                },
                "0x5c": {
                    "2": "line_number"
                },
                "TC_Start": {
                    "2": "start_timer"
                },
                "*(undefined4 *)((int)uVar1 + (int)((ulonglong)uVar1 >> 0x20) * 0x40)": {
                    "1": "channel_configuration"
                },
                "FUN_00080aa8": {
                    "1": "some_function1"
                },
                "FUN_000816f8": {
                    "1": "function2"
                },
                "FUN_00080b2c": {
                    "1": "function3"
                },
                "FUN_00080b90": {
                    "1": "some_function4"
                },
                "assert_func": {
                    "2": "assert_function"
                },
                "param_4 >> 5": {
                    "1": "shifted_offset"
                },
                "param_4 & 0x1f": {
                    "1": "bit_offset"
                },
                "(sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))": {
                    "1": "array_size"
                }
            }
        },
        "FUN_0008044c": {
            "entrypoint": "0x0008044c",
            "current_name": "update_data_0008044c",
            "code": "\nvoid update_data_0008044c(int index,int data,int offset)\n\n{\n  uint max_value;\n  int offset_multiplier;\n  \n  offset = offset * 0x40;\n  if (((&DAT_200708f1)[index] & 0x80) == 0) {\n    offset_multiplier = index * 0xc;\n    if (((char)(&DAT_200708f1)[index] + offset_multiplier < (int)(uint)DAT_200708f0) &&\n       ((int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + offset_multiplier) * 8] << 0x19) < 0\n       )) {\n      set_pin_state((&DAT_200708f8)[(offset_multiplier + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,0);\n    }\n  }\n  else {\n    *(uint *)(data + offset) = *(uint *)(data + offset) | 4;\n  }\n  max_value = (uint)DAT_200708f0;\n  (&DAT_200708f1)[index] = (&DAT_200708f1)[index] + '\\x01';\n  offset_multiplier = index * 0xc;\n  if (((char)(&DAT_200708f1)[index] + offset_multiplier < (int)max_value) &&\n     ((char)(&DAT_200708f1)[index] < '\\f')) {\n    *(int *)(data + offset + 0x14) =\n         *(int *)(data + offset + 0x10) +\n         *(int *)(&DAT_200708fc + ((char)(&DAT_200708f1)[index] + offset_multiplier) * 8);\n    if (-1 < (int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + offset_multiplier) * 8] << 0x19\n                  )) {\n      return;\n    }\n    set_pin_state((&DAT_200708f8)[(offset_multiplier + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,1);\n    return;\n  }\n  data = data + offset;\n  max_value = (rel_array[6].r_offset / 1000000) * 20000 >> 5;\n  if (max_value <= *(int *)(data + 0x10) + 4U) {\n    max_value = *(int *)(data + 0x10) + 4;\n  }\n  *(uint *)(data + 0x14) = max_value;\n  (&DAT_200708f1)[index] = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008044c": "update_data_0008044c",
                "param_1": "index",
                "param_2": "data",
                "param_3": "offset",
                "uVar1": "max_value",
                "iVar2": "offset_multiplier",
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "digitalWrite": "set_pin_state"
            },
            "calling": [],
            "called": [
                "FUN_00081014"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008044c": {
                    "1": "update_values",
                    "5": "process_data",
                    "4": "update_parameter",
                    "2": "update_param",
                    "12": "update_data"
                },
                "param_1": {
                    "4": "device_index",
                    "1": "device_id",
                    "26": "index"
                },
                "param_2": {
                    "14": "data",
                    "1": "data_storage",
                    "3": "data_ptr",
                    "4": "buffer"
                },
                "param_3": {
                    "1": "offset_multiplier",
                    "26": "offset",
                    "4": "multiplier"
                },
                "uVar1": {
                    "4": "threshold",
                    "1": "max_offset",
                    "2": "data_limit",
                    "9": "max_value",
                    "8": "limit"
                },
                "iVar2": {
                    "1": "offset_temp",
                    "2": "temp_var",
                    "3": "index",
                    "7": "offset_multiplier",
                    "5": "offset"
                },
                "FUN_00081014": {
                    "1": "update_register_value"
                },
                "DAT_200708f1": {
                    "1": "state_array"
                },
                "DAT_200708f0": {
                    "1": "size"
                },
                "DAT_200708f8": {
                    "1": "digital_port"
                },
                "DAT_200708fc": {
                    "1": "value_array"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "rels",
                    "2": "rel_array"
                },
                "DIGITAL_PORT_MASK": {
                    "1": "port_mask"
                },
                "digitalWrite": {
                    "1": "write_digital_data"
                },
                "&DAT_200708f1": {
                    "1": "data1"
                }
            }
        },
        "FUN_000805a8": {
            "entrypoint": "0x000805a8",
            "current_name": "process_data_000805a8",
            "code": "\nvoid process_data_000805a8(byte *output_buffer)\n\n{\n  char next_value;\n  uint counter;\n  \n  counter = (uint)DAT_200708f0;\n  if (counter < 0x3c) {\n    next_value = DAT_200708f0 + 1;\n    *output_buffer = DAT_200708f0;\n    DAT_200708f0 = next_value;\n    *(uint *)(&DAT_200708fc + counter * 8) =\n         (rel_array[6].offset / 1000000) * 0x5dc >> 5;\n    return;\n  }\n  *output_buffer = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805a8": "process_data_000805a8",
                "param_1": "output_buffer",
                "cVar1": "next_value",
                "uVar2": "counter",
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "r_offset": "offset"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000805a8": {
                    "7": "process_data",
                    "1": "copy_data",
                    "2": "update_parameter_value"
                },
                "param_1": {
                    "1": "output_data",
                    "2": "output_param",
                    "5": "output_byte",
                    "6": "output",
                    "12": "output_buffer"
                },
                "cVar1": {
                    "2": "new_element",
                    "1": "next_data",
                    "9": "next_value",
                    "3": "current_value"
                },
                "uVar2": {
                    "1": "value",
                    "19": "counter",
                    "3": "current_index",
                    "4": "current_value"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "elf_rel_array",
                    "2": "relocation_array",
                    "4": "rel_array"
                },
                "r_offset": {
                    "1": "offset"
                },
                "PTR_DAT_200708fc": {
                    "1": "pointer"
                },
                "PTR_DAT_200708f0": {
                    "1": "data"
                },
                "*(uint *)(&DAT_200708fc + uVar2 * 8)": {
                    "1": "result"
                }
            }
        },
        "FUN_000806a0": {
            "entrypoint": "0x000806a0",
            "current_name": "initialize_pin_000806a0",
            "code": "\nbyte initialize_pin_000806a0(byte *data,undefined4 pin)\n\n{\n  byte original_pin_mode;\n  undefined4 base_address;\n  uint index;\n  undefined4 irq_number;\n  int counter;\n  uint data_value;\n  \n  if (0x3b < *data) goto skip_initialization;\n  set_pin_mode(pin,1,0x220,*data,0x960);\n  data_value = (uint)*data;\n  original_pin_mode = (&DAT_200708f8)[data_value * 8];\n  data[2] = 0;\n  index = data_value / 0xc;\n  (&DAT_200708f8)[data_value * 8] = original_pin_mode & 0xc0 | (byte)pin & 0x3f;\n  data[1] = 0;\n  counter = 0;\n  do {\n    if ((int)((uint)(byte)(&DAT_200708f8)[(counter + index * 0xc) * 8] << 0x19) < 0)\n    goto LAB_00080652;\n    counter = counter + 1;\n  } while (counter != 0xc);\n  if (index == 0) {\n    base_address = 0x40084000;\n    irq_number = 0x1e;\nLAB_0008064c:\n    initialize_isr(base_address,index,irq_number,irq_number);\n  }\n  else {\n    if (index == 1) {\n      base_address = 0x40084000;\n      irq_number = 0x1f;\n      goto LAB_0008064c;\n    }\n    if (index == 2) {\n      base_address = 0x40084000;\n      irq_number = 0x20;\n      goto LAB_0008064c;\n    }\n    if (index == 3) {\n      base_address = 0x40080000;\n      index = 2;\n      irq_number = 0x1d;\n      goto LAB_0008064c;\n    }\n    if (index == 4) {\n      base_address = 0x40080000;\n      index = 0;\n      irq_number = 0x1b;\n      goto LAB_0008064c;\n    }\n  }\nLAB_00080652:\n  (&DAT_200708f8)[(uint)*data * 8] = (&DAT_200708f8)[(uint)*data * 8] | 0x40;\nskip_initialization:\n  return *data;\n}\n\n",
            "renaming": {
                "FUN_000806a0": "initialize_pin_000806a0",
                "param_1": "data",
                "param_2": "pin",
                "bVar1": "original_pin_mode",
                "uVar2": "base_address",
                "uVar3": "index",
                "uVar4": "irq_number",
                "iVar5": "counter",
                "uVar6": "data_value",
                "_initISR": "initialize_isr",
                "LAB_00080660": "skip_initialization",
                "pinMode": "set_pin_mode"
            },
            "calling": [
                "FUN_000801e0"
            ],
            "called": [
                "FUN_00080f0c",
                "FUN_000803fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000806a0": {
                    "3": "pin_mode_and_init_isr",
                    "1": "initialize_gpio",
                    "5": "initialize_pin",
                    "4": "configure_pin",
                    "2": "set_pin_mode_and_init_isr"
                },
                "param_1": {
                    "3": "input_buffer",
                    "12": "data",
                    "1": "pin_data",
                    "6": "pin_value",
                    "4": "input_data"
                },
                "param_2": {
                    "9": "pin_number",
                    "1": "pin_mode_address",
                    "3": "pin_mode",
                    "2": "mode",
                    "11": "pin"
                },
                "bVar1": {
                    "1": "current_value",
                    "2": "value",
                    "3": "original_pin_mode"
                },
                "uVar2": {
                    "4": "address",
                    "1": "peripheral_address",
                    "21": "base_address"
                },
                "uVar3": {
                    "1": "register2",
                    "4": "offset",
                    "17": "index"
                },
                "uVar4": {
                    "1": "offset",
                    "2": "interrupt_config",
                    "3": "irq_number"
                },
                "iVar5": {
                    "4": "loop_index",
                    "2": "loop_var",
                    "1": "loop_idx",
                    "12": "counter",
                    "3": "index"
                },
                "uVar6": {
                    "1": "pin_value_copy",
                    "2": "temp_value",
                    "4": "pin_value",
                    "5": "value",
                    "7": "data_value"
                },
                "_initISR": {
                    "4": "initialize_isr",
                    "1": "initialize_interrupt_service_routine"
                },
                "LAB_00080660": {
                    "1": "skip_initialization"
                },
                "pinMode": {
                    "1": "set_pin_mode"
                },
                "*param_1": {
                    "1": "pin"
                }
            }
        },
        "FUN_000806f8": {
            "entrypoint": "0x000806f8",
            "current_name": "process_data_000806f8",
            "code": "\nvoid process_data_000806f8(byte *data,uint length)\n\n{\n  uint clamped_length;\n  \n  if ((int)length < 0x220) {\n    clamped_length = length;\n    if (0xb3 < (int)length) {\n      clamped_length = 0xb4;\n    }\n    length = calculate_value(clamped_length & ~((int)clamped_length >> 0x1f),0,0xb4,(0x88 - (char)value1) * 4,\n                  (600 - (char)value2) * 4,length);\n  }\n  if (*data < 0x3c) {\n    clamped_length = (0x88 - (char)value1) * 4;\n    if (((int)(length + (0x88 - (char)value1) * -4) < 0 == is_subtraction_overflow) &&\n       (clamped_length = (600 - (char)value2) * 4, (int)length <= (int)clamped_length)) {\n      clamped_length = length;\n    }\n    *(uint *)(&DAT_200708fc + (uint)*data * 8) =\n         (offset / 1000000) * (clamped_length - 2) >> 5;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000806f8": "process_data_000806f8",
                "param_1": "data",
                "param_2": "length",
                "uVar1": "clamped_length",
                "param_1[1]": "value1",
                "param_1[2]": "value2",
                "map": "calculate_value",
                "Elf32_Rel_ARRAY_20070000[6].r_offset": "offset",
                "SBORROW4(param_2,uVar1)": "is_subtraction_overflow",
                "SBORROW4": "is_subtraction_overflow",
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00080164",
                "FUN_00080250"
            ],
            "called": [
                "FUN_0008145c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000806f8": {
                    "1": "map_coordinates",
                    "2": "map_and_update_values",
                    "18": "process_data"
                },
                "param_1": {
                    "16": "data",
                    "2": "x",
                    "1": "input_data",
                    "3": "buffer"
                },
                "param_2": {
                    "1": "value2",
                    "2": "y",
                    "8": "size",
                    "13": "length"
                },
                "uVar1": {
                    "1": "updated_length",
                    "3": "adjusted_size",
                    "4": "adjusted_length",
                    "7": "clamped_length"
                },
                "param_1[1]": {
                    "2": "byte1",
                    "1": "data_byte1",
                    "7": "value1"
                },
                "param_1[2]": {
                    "1": "variable_2",
                    "2": "byte2",
                    "7": "value2"
                },
                "param_1[3]": {
                    "1": "val3"
                },
                "param_1[4]": {
                    "1": "val4"
                },
                "param_1[5]": {
                    "1": "val5"
                },
                "param_1[6]": {
                    "1": "val6"
                },
                "param_1[7]": {
                    "1": "val7"
                },
                "0x3c": {
                    "1": "threshold3"
                },
                "0x220": {
                    "1": "limit"
                },
                "0xb3": {
                    "1": "threshold2"
                },
                "0xb4": {
                    "1": "new_limit"
                },
                "0x88": {
                    "1": "constant1"
                },
                "600": {
                    "1": "constant2"
                },
                "map": {
                    "3": "calculate_value",
                    "1": "update_values",
                    "2": "perform_mapping"
                },
                "DAT_200708fc": {
                    "1": "output_data_ptr",
                    "2": "result"
                },
                "Elf32_Rel_ARRAY_20070000[6].r_offset": {
                    "5": "offset",
                    "1": "offset_value"
                },
                "FUN_0008145c": {
                    "3": "calculate_value",
                    "1": "calculate_new_value"
                },
                "param_3": {
                    "1": "param_3",
                    "2": "z"
                },
                "param_4": {
                    "1": "value4",
                    "2": "a"
                },
                "param_5": {
                    "2": "b",
                    "1": "value5"
                },
                "*param_1": {
                    "1": "byte_val",
                    "8": "first_byte"
                },
                "SBORROW4(param_2,uVar1)": {
                    "1": "is_subtraction_overflow"
                },
                "*(uint *)(&DAT_200708fc + (uint)*param_1 * 8)": {
                    "2": "result",
                    "1": "output_value"
                },
                "SBORROW4": {
                    "1": "calculate_sborrow",
                    "2": "is_subtraction_overflow"
                },
                "(Elf32_Rel_ARRAY_20070000[6].r_offset / 1000000)": {
                    "1": "offset_divided_by_million"
                },
                "&DAT_200708fc": {
                    "1": "result_address"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "rel_array"
                },
                "DAT_20070000": {
                    "1": "elf_data_array"
                },
                "param_2_map": {
                    "1": "mapped_length"
                },
                "param_1_map": {
                    "1": "offset_map"
                },
                "param_1_value": {
                    "1": "first_value"
                },
                "param_2_value": {
                    "1": "second_value"
                },
                "uVar1 & ~((int)uVar1 >> 0x1f)": {
                    "1": "min_value"
                },
                "(0x88 - (char)param_1[1]) * 4": {
                    "1": "calculation1"
                },
                "(600 - (char)param_1[2]) * 4": {
                    "1": "calculation2"
                },
                "&DAT_200708fc + *param_1 * 8": {
                    "1": "relocation_data_address"
                },
                "0x88 - (char)param_1[1]": {
                    "1": "value1_difference"
                },
                "0x88 - (char)param_1[1]) * 4": {
                    "1": "value1_scaled"
                },
                "600 - (char)param_1[2]": {
                    "1": "value2_difference"
                },
                "600 - (char)param_1[2]) * 4": {
                    "1": "value2_scaled"
                },
                "Elf32_Rel_ARRAY_20070000[6].r_offset / 1000000": {
                    "1": "elf32_rel_array_20070000[6].r_offset_scaled"
                },
                "MAP_CONSTANT": {
                    "1": "max_value"
                },
                "r_offset": {
                    "1": "offset"
                }
            }
        },
        "FUN_0008073a": {
            "entrypoint": "0x0008073a",
            "current_name": "FUNC_0008073a",
            "code": "\nvoid FUNC_0008073a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008073a": "FUNC_0008073a"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080748": {
            "entrypoint": "0x00080748",
            "current_name": "FUNC_00080748",
            "code": "\nvoid FUNC_00080748(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080748": "FUNC_00080748"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074a": {
            "entrypoint": "0x0008074a",
            "current_name": "FUNC_0008074a",
            "code": "\nvoid FUNC_0008074a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074a": "FUNC_0008074a"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074c": {
            "entrypoint": "0x0008074c",
            "current_name": "FUNC_0008074c",
            "code": "\nvoid FUNC_0008074c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074c": "FUNC_0008074c"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080774": {
            "entrypoint": "0x00080774",
            "current_name": "initialize_system_00080774",
            "code": "\n\n\nvoid initialize_system_00080774(void)\n\n{\n  int index;\n  int next_index;\n  \n  initialize_system_00080774();\n  _DAT_e000e014 = buffer_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  initialize_libc_array();\n  index = 0;\n  do {\n    next_index = index + 1;\n    write_digital(index,0);\n    index = next_index;\n  } while (next_index != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  configure_pio(0x400e0e00,1,0x300,0);\n  write_digital(0,1);\n  configure_pio(0x400e0e00,1,0xc00,0);\n  configure_pio(0x400e0e00,1,0x3000,0);\n  configure_pio(0x400e1400,2,0x30,0);\n  configure_pio(0x400e1000,1,0xc00,0);\n  configure_pio(0x400e0e00,1,3,0);\n  configure_pio(0x400e1000,1,0xc000,0);\n  enable_periph_clock(0x25);\n  initialize_adc(0x400c0000,buffer_offset,20000000,0xc);\n  configure_adc_timing(0x400c0000,0,0x300000,1);\n  configure_adc_trigger(0x400c0000,0,0);\n  disable_adc_interrupt(0x400c0000,0xffffffff);\n  disable_all_adc_channels(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080774": "initialize_system_00080774",
                "Elf32_Rel_ARRAY_20070000": "elf_rel_array",
                "__libc_init_array": "initialize_libc_array",
                "PIO_Configure": "configure_pio",
                "pmc_enable_periph_clk": "enable_periph_clock",
                "adc_init": "initialize_adc",
                "adc_configure_timing": "configure_adc_timing",
                "adc_configure_trigger": "configure_adc_trigger",
                "adc_disable_interrupt": "disable_adc_interrupt",
                "adc_disable_all_channel": "disable_all_adc_channels",
                "iVar1": "index",
                "iVar2": "next_index",
                "SystemInit": "initialize_system",
                "digitalWrite": "write_digital",
                "Elf32_Rel_ARRAY_20070000[6].r_offset": "buffer_offset"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_00081014",
                "FUN_00080d62",
                "FUN_00080c98",
                "FUN_00080d6a",
                "FUN_00080aa8",
                "FUN_00080a30",
                "FUN_00080d3e",
                "FUN_00081778",
                "FUN_00080d30",
                "FUN_00080b98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080774": {
                    "31": "initialize_system"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "2": "elf_rel_array",
                    "1": "array"
                },
                "DIGITAL_WRITE_PIN": {
                    "1": "write_digital_pin"
                },
                "_DAT_e000e014": {
                    "1": "system_clock"
                },
                "DAT_e000ed23": {
                    "1": "data_e000ed23",
                    "3": "constant_value"
                },
                "_DAT_e000e018": {
                    "1": "variable1",
                    "2": "value1"
                },
                "_DAT_e000e010": {
                    "1": "unknown_data_3",
                    "2": "value2"
                },
                "__libc_init_array": {
                    "1": "initialize_c_library_array",
                    "3": "initialize_libc_array",
                    "2": "initialize_libraries"
                },
                "PINA": {
                    "1": "iterator"
                },
                "_DAT_400e0ea0": {
                    "1": "data_400e0ea0",
                    "2": "value3"
                },
                "_DAT_400e10a0": {
                    "1": "register2",
                    "2": "value4"
                },
                "_DAT_400e12a0": {
                    "1": "data6",
                    "2": "value5"
                },
                "_DAT_400e14a0": {
                    "1": "data7",
                    "2": "value6"
                },
                "PIO_Configure": {
                    "8": "configure_pio"
                },
                "pmc_enable_periph_clk": {
                    "1": "enable_pmc_peripheral_clock",
                    "2": "enable_peripheral_clock",
                    "4": "enable_periph_clock"
                },
                "adc_init": {
                    "8": "initialize_adc"
                },
                "adc_configure_timing": {
                    "8": "configure_adc_timing"
                },
                "adc_configure_trigger": {
                    "8": "configure_adc_trigger"
                },
                "adc_disable_interrupt": {
                    "8": "disable_adc_interrupt"
                },
                "adc_disable_all_channel": {
                    "8": "disable_all_adc_channels"
                },
                "FUN_00081014": {
                    "3": "set_digital_output",
                    "1": "execute_function1"
                },
                "FUN_00080d62": {
                    "1": "digital_write_pin",
                    "2": "digital_write_loop",
                    "4": "digital_write"
                },
                "FUN_00080c98": {
                    "1": "execute_function3",
                    "7": "configure_pio",
                    "2": "initialize_adc",
                    "3": "configure_adc"
                },
                "FUN_00080d6a": {
                    "1": "execute_function4",
                    "2": "configure_adc_pin"
                },
                "FUN_00080aa8": {
                    "1": "configure_adc_pin",
                    "2": "configure_adc",
                    "3": "configure_timing"
                },
                "FUN_00080a30": {
                    "1": "adc_initialize",
                    "2": "adc_configure",
                    "5": "configure_adc"
                },
                "FUN_00080d3e": {
                    "2": "configure_adc_trigger",
                    "1": "adc_disable_interrupt"
                },
                "FUN_00081778": {
                    "1": "disable_all_adc_channels",
                    "2": "disable_adc",
                    "4": "disable_adc_interrupt"
                },
                "FUN_00080d30": {
                    "1": "disable_channel",
                    "2": "disable_all_adc_channels"
                },
                "FUN_00080b98": {
                    "1": "enable_peripheral_clock",
                    "3": "disable_all_adc_channels"
                },
                "iVar1": {
                    "4": "i",
                    "1": "loop_index",
                    "6": "index"
                },
                "iVar2": {
                    "9": "next_index",
                    "3": "next_counter"
                },
                "SystemInit": {
                    "5": "initialize_system",
                    "1": "initialize_system_modules"
                },
                "digitalWrite": {
                    "1": "digital_write"
                },
                "Fun_00081014": {
                    "1": "configure_digital_write"
                },
                "Elf32_Rel_ARRAY_20070000[6].r_offset": {
                    "1": "buffer_offset"
                }
            }
        },
        "FUN_0008089c": {
            "entrypoint": "0x0008089c",
            "current_name": "initialize_communication_0008089c",
            "code": "\nvoid initialize_communication_0008089c(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  initialize_ring_buffer(&DAT_20070c0c);\n  initialize_ring_buffer(&DAT_20070b60);\n  initialize_uart(&DAT_20070be8,0x400e0800,8,8,&DAT_20070c0c,&DAT_20070b60,param3);\n  initialize_ring_buffer(&DAT_20070e6c);\n  initialize_ring_buffer(&DAT_20070ef4);\n  initialize_ring_buffer(&DAT_20070f7c);\n  initialize_ring_buffer(&DAT_20070ad8);\n  initialize_ring_buffer(&DAT_20070d0c);\n  initialize_ring_buffer(&DAT_20070d94);\n  initialize_usart(&DAT_20070c94,0x40098000,0x11,0x11,&DAT_20070e6c,&DAT_20070ad8);\n  initialize_usart(&DAT_20070cbc,0x4009c000,0x12,0x12,&DAT_20070ef4,&DAT_20070d0c);\n  initialize_usart(&DAT_20070ce4,0x400a4000,0x14,0x14,&DAT_20070f7c,&DAT_20070d94);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008089c": "initialize_communication_0008089c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "RingBuffer": "initialize_ring_buffer",
                "UARTClass": "initialize_uart",
                "USARTClass": "initialize_usart"
            },
            "calling": [],
            "called": [
                "FUN_00081438",
                "FUN_00081348",
                "FUN_000811b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008089c": {
                    "2": "initialize_serial_communication",
                    "3": "initialize_hardware",
                    "1": "initialize_communication_devices",
                    "5": "initialize_peripherals",
                    "16": "initialize_communication"
                },
                "param_1": {
                    "1": "config_uart",
                    "5": "usart",
                    "19": "param1"
                },
                "param_2": {
                    "1": "arg2",
                    "18": "param2",
                    "5": "base_address"
                },
                "param_3": {
                    "1": "uart_baud_rate",
                    "4": "data_bits",
                    "18": "param3"
                },
                "RingBuffer": {
                    "2": "create_ring_buffer",
                    "17": "initialize_ring_buffer"
                },
                "UARTClass": {
                    "1": "initialize_uart_class",
                    "17": "initialize_uart"
                },
                "USARTClass": {
                    "17": "initialize_usart",
                    "1": "initialize_usart_class"
                },
                "FUN_00081438": {
                    "1": "update_ring_buffer1",
                    "7": "initialize_ring_buffer",
                    "2": "configure_ring_buffer"
                },
                "FUN_00081348": {
                    "1": "set_uart_class",
                    "4": "configure_uart",
                    "3": "initialize_uart",
                    "2": "configure_usart"
                },
                "param_4": {
                    "5": "param4",
                    "2": "data_bits",
                    "1": "parity",
                    "3": "stop_bits"
                },
                "FUN_000811b0": {
                    "1": "reverse_data",
                    "2": "initialize_usart_class",
                    "3": "initialize_usart"
                },
                "undefined4 param_1": {
                    "1": "parameter1"
                },
                "undefined4 param_2": {
                    "1": "parameter2"
                },
                "undefined4 param_3": {
                    "1": "parameter3"
                },
                "DAT_20070c0c": {
                    "1": "ring_buffer_data1"
                },
                "DAT_20070b60": {
                    "1": "ring_buffer_data2"
                },
                "DAT_20070be8": {
                    "1": "uart_data"
                },
                "DAT_20070e6c": {
                    "1": "ring_buffer3"
                },
                "DAT_20070ef4": {
                    "1": "ring_buffer4"
                },
                "DAT_20070f7c": {
                    "1": "usart_data3"
                },
                "DAT_20070ad8": {
                    "1": "ring_buffer6"
                },
                "DAT_20070d0c": {
                    "1": "ring_buffer7"
                },
                "DAT_20070d94": {
                    "1": "ring_buffer_data5"
                },
                "DAT_20070c94": {
                    "1": "usart1"
                },
                "DAT_20070cbc": {
                    "1": "usart_data5"
                },
                "DAT_20070ce4": {
                    "1": "usart3"
                }
            }
        },
        "FUN_00080970": {
            "entrypoint": "0x00080970",
            "current_name": "process_serial_events_00080970",
            "code": "\nvoid process_serial_events_00080970(void)\n\n{\n  int is_available;\n  \n  is_available = check_availability(&DAT_20070be8);\n  if (is_available != 0) {\n    process_serial_event();\n  }\n  is_available = check_availability(&DAT_20070c94);\n  if (is_available != 0) {\n    process_serial_event1();\n  }\n  is_available = check_availability(&DAT_20070cbc);\n  if (is_available != 0) {\n    process_serial_event2();\n  }\n  is_available = check_availability(&DAT_20070ce4);\n  if (is_available != 0) {\n    process_serial_event3();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080970": "process_serial_events_00080970",
                "iVar1": "is_available",
                "available": "check_availability",
                "serialEvent": "process_serial_event",
                "serialEvent1": "process_serial_event1",
                "serialEvent2": "process_serial_event2",
                "serialEvent3": "process_serial_event3"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_0008074c",
                "FUN_00081248",
                "FUN_0008074a",
                "FUN_00080748",
                "FUN_0008073a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080970": {
                    "1": "check_and_process_serial_events",
                    "18": "process_serial_events",
                    "2": "check_and_handle_serial_events",
                    "7": "check_serial_events"
                },
                "iVar1": {
                    "1": "available_count",
                    "3": "num_available",
                    "9": "is_available"
                },
                "FUNC_0008074c": {
                    "10": "serial_event"
                },
                "FUN_00081248": {
                    "4": "process_serial_event",
                    "1": "available_data_count"
                },
                "FUNC_0008074a": {
                    "10": "serial_event1"
                },
                "FUNC_00080748": {
                    "10": "serial_event2"
                },
                "FUNC_0008073a": {
                    "10": "serial_event3"
                },
                "available": {
                    "1": "check_if_data_available",
                    "4": "check_availability"
                },
                "serialEvent": {
                    "13": "process_serial_event",
                    "5": "handle_serial_event"
                },
                "serialEvent1": {
                    "13": "process_serial_event1",
                    "5": "handle_serial_event1"
                },
                "serialEvent2": {
                    "13": "process_serial_event2",
                    "5": "handle_serial_event2"
                },
                "serialEvent3": {
                    "5": "handle_serial_event3",
                    "13": "process_serial_event3"
                },
                "&DAT_20070be8": {
                    "1": "data_buffer1"
                },
                "&DAT_20070c94": {
                    "1": "data_buffer2"
                },
                "&DAT_20070cbc": {
                    "1": "data_buffer3"
                },
                "&DAT_20070ce4": {
                    "1": "data_buffer4"
                }
            }
        },
        "FUN_000809be": {
            "entrypoint": "0x000809be",
            "current_name": "update_parameter_000809be",
            "code": "\nvoid update_parameter_000809be(int base_address,undefined4 option,uint new_value)\n\n{\n  uint updated_value;\n  \n  *(uint *)(base_address + 0x44) = new_value;\n  switch(option) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updated_value = *(uint *)(base_address + 0x70) & *(uint *)(base_address + 0x70) & ~new_value;\n    break;\n  case 2:\n    updated_value = *(uint *)(base_address + 0x70) | new_value;\n    break;\n  default:\n    goto default_case;\n  }\n  *(uint *)(base_address + 0x70) = updated_value;\ndefault_case:\n  *(uint *)(base_address + 4) = new_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809be": "update_parameter_000809be",
                "param_1": "base_address",
                "param_2": "option",
                "param_3": "new_value",
                "uVar1": "updated_value",
                "switchD_000809c4_caseD_6": "default_case"
            },
            "calling": [
                "FUN_00080a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000809be": {
                    "4": "update_memory",
                    "1": "update_memory_region",
                    "2": "update_value",
                    "10": "update_parameter",
                    "7": "update_parameter_value"
                },
                "param_1": {
                    "1": "context",
                    "4": "object_address",
                    "17": "base_address"
                },
                "param_2": {
                    "1": "setting_type",
                    "2": "condition",
                    "3": "operation_type",
                    "6": "option",
                    "4": "mode"
                },
                "param_3": {
                    "1": "bit_mask",
                    "21": "new_value",
                    "7": "value"
                },
                "uVar1": {
                    "1": "modified_value",
                    "24": "updated_value",
                    "3": "result"
                },
                "switchD_000809c4_caseD_6": {
                    "1": "default_case"
                }
            }
        },
        "FUN_000809e4": {
            "entrypoint": "0x000809e4",
            "current_name": "set_parameters_000809e4",
            "code": "\nvoid set_parameters_000809e4(undefined4 *parameters,undefined4 value,uint flags)\n\n{\n  bool is_negative;\n  \n  is_negative = (int)(flags << 0x1f) < 0;\n  output_array[17] = value;\n  if (is_negative) {\n    output_array[25] = value;\n  }\n  if (!is_negative) {\n    output_array[24] = value;\n  }\n  is_negative = (flags & 10) != 0;\n  if (is_negative) {\n    output_array[8] = value;\n  }\n  if (!is_negative) {\n    output_array[9] = value;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    output_array[32] = value;\n  }\n  output_array[5] = value;\n  *parameters = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809e4": "set_parameters_000809e4",
                "param_1": "parameters",
                "param_2": "value",
                "param_3": "flags",
                "bVar1": "is_negative",
                "param_1[0x11]": "output_array[17]",
                "param_1[0x19]": "output_array[25]",
                "param_1[0x18]": "output_array[24]",
                "param_1[8]": "output_array[8]",
                "param_1[9]": "output_array[9]",
                "param_1[0x20]": "output_array[32]",
                "param_1[5]": "output_array[5]"
            },
            "calling": [
                "FUN_00080a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000809e4": {
                    "5": "update_parameters",
                    "1": "set_flags_and_values",
                    "3": "update_data",
                    "4": "set_values"
                },
                "param_1": {
                    "4": "output_array",
                    "6": "array",
                    "3": "data_array",
                    "1": "data_entries",
                    "2": "param_array",
                    "7": "parameters"
                },
                "param_2": {
                    "1": "new_data",
                    "11": "new_value",
                    "17": "value"
                },
                "param_3": {
                    "1": "bit_flags",
                    "2": "bitmask",
                    "25": "flags"
                },
                "bVar1": {
                    "1": "is_negative_shift",
                    "16": "is_negative",
                    "7": "is_negative_flag",
                    "2": "is_flag_set"
                },
                "param_1[0x11]": {
                    "1": "data_array[17]",
                    "3": "array[17]",
                    "2": "parameter1"
                },
                "param_1[0x19]": {
                    "1": "param_array[25]",
                    "3": "array[25]"
                },
                "param_1[0x18]": {
                    "1": "param_array[24]",
                    "3": "array[24]"
                },
                "param_1[8]": {
                    "1": "parameter8",
                    "3": "output_array[8]"
                },
                "param_1[9]": {
                    "1": "values[9]",
                    "3": "output_array[9]"
                },
                "param_1[0x20]": {
                    "1": "param_value6",
                    "3": "output_array[32]"
                },
                "param_1[5]": {
                    "1": "data_entries[5]",
                    "3": "output_array[5]",
                    "2": "parameter5"
                },
                "0x11": {
                    "1": "index_1",
                    "3": "index1"
                },
                "0x19": {
                    "1": "index_2",
                    "2": "index2"
                },
                "0x18": {
                    "2": "index3",
                    "1": "index_3"
                },
                "8": {
                    "1": "index_4",
                    "3": "index4"
                },
                "9": {
                    "3": "index5",
                    "1": "flag_index5"
                },
                "0x20": {
                    "1": "index_6",
                    "3": "index6"
                },
                "5": {
                    "1": "flag_index7",
                    "3": "index7"
                },
                "*param_1": {
                    "1": "param_array[0]",
                    "2": "output_array[0]",
                    "3": "array[0]"
                }
            }
        },
        "FUN_00080a0a": {
            "entrypoint": "0x00080a0a",
            "current_name": "set_param_values_00080a0a",
            "code": "\nvoid set_param_values_00080a0a(undefined4 *param_array,undefined4 value,int flag1,int flag2,int flag3)\n\n{\n  output_array[index1] = value;\n  if (flag3 == 0) {\n    output_array[index6] = value;\n  }\n  else {\n    output_array[index7] = value;\n  }\n  if (flag2 == 0) {\n    output_array[index2] = value;\n  }\n  else {\n    output_array[index3] = value;\n  }\n  if (flag1 == 0) {\n    output_array[index4] = value;\n  }\n  else {\n    output_array[index5] = value;\n  }\n  output_array[4] = value;\n  *param_array = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a0a": "set_param_values_00080a0a",
                "param_1": "param_array",
                "param_2": "value",
                "param_3": "flag1",
                "param_4": "flag2",
                "param_5": "flag3",
                "param_1[0x11]": "output_array[index1]",
                "param_1[0x15]": "output_array[index2]",
                "param_1[0x14]": "output_array[index3]",
                "param_1[0xd]": "output_array[index4]",
                "param_1[0xc]": "output_array[index5]",
                "param_1[0x18]": "output_array[index6]",
                "param_1[0x19]": "output_array[index7]",
                "param_1[4]": "output_array[4]"
            },
            "calling": [
                "FUN_00081014",
                "FUN_00080a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080a0a": {
                    "1": "assign_values_to_memory",
                    "2": "update_param_values",
                    "4": "update_params",
                    "3": "update_parameters",
                    "9": "set_param_values"
                },
                "param_1": {
                    "4": "parameters",
                    "3": "array",
                    "1": "ptr_array",
                    "5": "params",
                    "7": "param_array",
                    "2": "params_array"
                },
                "param_2": {
                    "6": "param_value",
                    "17": "value",
                    "7": "new_value",
                    "1": "new_param"
                },
                "param_3": {
                    "9": "condition1",
                    "1": "flag_a",
                    "12": "flag1",
                    "5": "is_param3_zero",
                    "2": "condition_1"
                },
                "param_4": {
                    "9": "condition2",
                    "1": "param_check2",
                    "5": "is_param4_zero",
                    "2": "condition_2",
                    "12": "flag2"
                },
                "param_5": {
                    "5": "is_param5_zero",
                    "1": "param_check3",
                    "12": "flag3",
                    "9": "condition3",
                    "2": "condition_3"
                },
                "param_1[0x11]": {
                    "1": "output_array[index1]"
                },
                "param_1[0x15]": {
                    "1": "output_array[index2]"
                },
                "param_1[0x14]": {
                    "1": "params_array[20]"
                },
                "param_1[0xd]": {
                    "1": "params_array[13]"
                },
                "param_1[0xc]": {
                    "1": "params_array[12]"
                },
                "param_1[0x18]": {
                    "1": "output_array[index6]"
                },
                "param_1[0x19]": {
                    "1": "params_array[25]"
                },
                "param_1[4]": {
                    "1": "output_array[4]"
                },
                "*param_1": {
                    "1": "params_array[0]"
                }
            }
        },
        "FUN_00080a30": {
            "entrypoint": "0x00080a30",
            "current_name": "set_peripheral_00080a30",
            "code": "\nundefined4 set_peripheral_00080a30(int device,int peripheral_type,undefined4 peripheral,uint flags)\n\n{\n  bool is_negative;\n  \n  switch(peripheral_type) {\n  case 1:\n  case 2:\n    set_peripheral_00080a30(device,peripheral_type,peripheral);\n    is_negative = (int)(flags << 0x1f) < 0;\n    *(undefined4 *)(device + 0x44) = peripheral;\n    if (is_negative) {\n      *(undefined4 *)(device + 100) = peripheral;\n    }\n    if (!is_negative) {\n      *(undefined4 *)(device + 0x60) = peripheral;\n    }\n    break;\n  case 3:\n    set_input(device,peripheral,flags,0x809e5,device);\n    break;\n  case 4:\n  case 5:\n    set_output(device,peripheral,peripheral_type == 5,(flags << 0x1d) >> 0x1f,flags & 1,peripheral_type,peripheral\n                 );\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080a30": "set_peripheral_00080a30",
                "param_1": "device",
                "param_2": "peripheral_type",
                "param_3": "peripheral",
                "param_4": "flags",
                "bVar1": "is_negative",
                "PIO_SetPeripheral": "set_peripheral",
                "PIO_SetInput": "set_input",
                "PIO_SetOutput": "set_output"
            },
            "calling": [
                "FUN_00080f0c",
                "FUN_00080774"
            ],
            "called": [
                "FUN_00080a0a",
                "FUN_000809e4",
                "FUN_000809be"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080a30": {
                    "1": "set_pio_configuration",
                    "2": "set_peripheral_state",
                    "6": "configure_peripheral",
                    "7": "set_peripheral"
                },
                "param_1": {
                    "6": "device_address",
                    "2": "port",
                    "16": "device",
                    "3": "base_address",
                    "1": "dev_addr"
                },
                "param_2": {
                    "3": "peripheral",
                    "1": "state",
                    "2": "operation",
                    "9": "peripheral_type",
                    "7": "mode"
                },
                "param_3": {
                    "5": "config",
                    "6": "peripheral",
                    "1": "config_option",
                    "2": "peripheral_value"
                },
                "param_4": {
                    "5": "flag",
                    "1": "parameter",
                    "3": "peripheral_config",
                    "9": "flags"
                },
                "bVar1": {
                    "1": "is_flag_negative",
                    "22": "is_negative",
                    "4": "is_negative_flag",
                    "2": "is_flag_set"
                },
                "param_1 + 0x44": {
                    "11": "register1",
                    "1": "register_a"
                },
                "param_1 + 100": {
                    "1": "auxiliary_address",
                    "11": "register2"
                },
                "param_1 + 0x60": {
                    "1": "peripheral_register3",
                    "11": "register3"
                },
                "FUN_00080a0a": {
                    "1": "configure_peripheral",
                    "3": "set_peripheral"
                },
                "param_5": {
                    "1": "param_5"
                },
                "FUN_000809e4": {
                    "8": "set_input",
                    "1": "set_input_helper"
                },
                "FUN_000809be": {
                    "8": "set_output",
                    "1": "set_output_helper"
                },
                "PIO_SetPeripheral": {
                    "1": "set_peripheral_mode",
                    "3": "set_peripheral"
                },
                "PIO_SetInput": {
                    "4": "set_input",
                    "1": "set_input_function"
                },
                "PIO_SetOutput": {
                    "4": "set_output",
                    "1": "set_output_function"
                },
                "param_4 << 0x1f": {
                    "1": "shifted_flag"
                },
                "*(undefined4 *)(param_1 + 0x44)": {
                    "1": "peripheral_config_register"
                },
                "*(undefined4 *)(param_1 + 100)": {
                    "1": "alt_peripheral_config1"
                },
                "*(undefined4 *)(param_1 + 0x60)": {
                    "1": "alt_peripheral_config2"
                },
                "case 3": {
                    "1": "input_mode"
                },
                "0x809e5": {
                    "1": "input_settings"
                },
                "case 4": {
                    "1": "output_mode1"
                },
                "case 5": {
                    "1": "output_mode2"
                },
                "param_4 << 0x1d": {
                    "1": "shifted_flags1"
                },
                "(param_4 << 0x1d) >> 0x1f": {
                    "1": "shifted_flags2"
                },
                "param_4 & 1": {
                    "1": "bitwise_and_result"
                },
                "PTR_*": {
                    "1": "<unchanged>"
                },
                "DAT_*": {
                    "1": "<unchanged>"
                },
                "param_6": {
                    "1": "mode"
                },
                "param_7": {
                    "1": "value"
                }
            }
        },
        "FUN_00080a94": {
            "entrypoint": "0x00080a94",
            "current_name": "check_bitwise_conditions_00080a94",
            "code": "\nuint check_bitwise_conditions_00080a94(int input_value,uint mask)\n\n{\n  uint result;\n  \n  result = *(uint *)(input_value + 8) & mask;\n  if (result != 0) {\n    if ((mask & *(uint *)(input_value + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080a94": "check_bitwise_conditions_00080a94",
                "param_1": "input_value",
                "param_2": "mask",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00081014"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080a94": {
                    "1": "check_bitwise_compatibility",
                    "5": "check_bitwise_conditions",
                    "3": "check_flags",
                    "2": "check_permissions"
                },
                "param_1": {
                    "1": "input_data",
                    "9": "input_value",
                    "3": "data_pointer",
                    "2": "input_param"
                },
                "param_2": {
                    "12": "mask",
                    "1": "input_2",
                    "2": "permission_mask",
                    "3": "flags",
                    "5": "bit_mask"
                },
                "uVar1": {
                    "1": "output_mask",
                    "30": "result"
                }
            }
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "check_and_set_bit_00080aa8",
            "code": "\n\n\nundefined4 check_and_set_bit_00080aa8(uint bit_position)\n\n{\n  uint bit_mask;\n  \n  if (bit_position < 0x2d) {\n    if (bit_position < 0x20) {\n      bit_mask = 1 << (bit_position & 0xff);\n      if ((bit_mask & _DAT_400e0618) != bit_mask) {\n        _DAT_400e0610 = bit_mask;\n      }\n    }\n    else {\n      bit_mask = 1 << (bit_position - 0x20 & 0xff);\n      if ((bit_mask & _DAT_400e0708) != bit_mask) {\n        _DAT_400e0700 = bit_mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "check_and_set_bit_00080aa8",
                "param_1": "bit_position",
                "uVar1": "bit_mask"
            },
            "calling": [
                "FUN_00080f0c",
                "FUN_000803fc",
                "FUN_00080774",
                "FUN_000813dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080aa8": {
                    "4": "check_bit_and_set",
                    "1": "check_bit_position",
                    "3": "update_bitmask",
                    "9": "check_and_set_bit"
                },
                "param_1": {
                    "7": "value",
                    "1": "bit_pos",
                    "10": "bit_position",
                    "2": "index"
                },
                "uVar1": {
                    "1": "bit",
                    "4": "bitmask",
                    "2": "bit_value",
                    "22": "bit_mask"
                },
                "_DAT_400e0618": {
                    "1": "first_bit_mask"
                },
                "_DAT_400e0610": {
                    "1": "first_bit_result"
                },
                "_DAT_400e0708": {
                    "1": "second_bit_mask"
                },
                "_DAT_400e0700": {
                    "1": "second_bit_result"
                }
            }
        },
        "FUN_00080b2c": {
            "entrypoint": "0x00080b2c",
            "current_name": "configure_tc_channel_00080b2c",
            "code": "\nvoid configure_tc_channel_00080b2c(undefined4 param1,uint param2,char *channel_name)\n\n{\n  int offset;\n  int address;\n  undefined8 combined_params;\n  \n  combined_params = CONCAT44(param2,param1);\n  if (2 < param2) {\n    channel_name = \"TC_Configure\";\n    combined_params = __assert_func(\"../source/tc.c\",0x40,\"TC_Configure\",\n                          \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\");\n  }\n  offset = (int)((ulonglong)combined_params >> 0x20) * 0x40;\n  address = (int)combined_params + offset;\n  *(undefined4 *)((int)combined_params + offset) = 2;\n  *(undefined4 *)(address + 0x28) = 0xffffffff;\n  *(char **)(address + 4) = channel_name;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b2c": "configure_tc_channel_00080b2c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "channel_name",
                "iVar1": "offset",
                "iVar2": "address",
                "uVar3": "combined_params"
            },
            "calling": [
                "FUN_000803fc"
            ],
            "called": [
                "FUN_000816f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080b2c": {
                    "4": "configure_channel",
                    "1": "configure_peripheral",
                    "3": "configure_tc",
                    "18": "configure_tc_channel"
                },
                "param_1": {
                    "1": "first_param",
                    "2": "param",
                    "16": "param1"
                },
                "param_2": {
                    "1": "arg2",
                    "13": "param2",
                    "6": "channel_index"
                },
                "param_3": {
                    "13": "channel_name",
                    "9": "param3",
                    "3": "message",
                    "2": "error_message",
                    "1": "param_3"
                },
                "iVar1": {
                    "1": "channel_index",
                    "15": "offset",
                    "2": "index",
                    "5": "channel_offset"
                },
                "iVar2": {
                    "10": "address",
                    "1": "tc_channel_index",
                    "9": "channel_address",
                    "3": "channel_index",
                    "2": "channel_pointer"
                },
                "uVar3": {
                    "1": "channel_config",
                    "2": "combined_param",
                    "16": "combined_params"
                },
                "FUN_000816f8": {
                    "1": "update_tc_channel",
                    "2": "sub_function"
                },
                "param_4": {
                    "1": "new_value"
                }
            }
        },
        "FUN_00080b90": {
            "entrypoint": "0x00080b90",
            "current_name": "set_param_value_00080b90",
            "code": "\nvoid set_param_value_00080b90(int base_address,int index,undefined4 value)\n\n{\n  *(undefined4 *)(base_address + index * 0x40 + 0x14) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b90": "set_param_value_00080b90",
                "param_1": "base_address",
                "param_2": "index",
                "param_3": "value"
            },
            "calling": [
                "FUN_000803fc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080b90": {
                    "1": "store_value_at_offset",
                    "4": "set_parameter_value",
                    "3": "update_parameter_value",
                    "11": "set_param_value"
                },
                "param_1": {
                    "1": "param_base_address",
                    "23": "base_address"
                },
                "param_2": {
                    "1": "multiplier",
                    "2": "param_index",
                    "7": "offset",
                    "17": "index"
                },
                "param_3": {
                    "1": "value_to_set",
                    "20": "value",
                    "9": "new_value"
                },
                "PTR_": {
                    "1": "unchanged"
                },
                "DAT_": {
                    "1": "unchanged"
                }
            }
        },
        "FUN_00080b98": {
            "entrypoint": "0x00080b98",
            "current_name": "initialize_memory_00080b98",
            "code": "\n\n\nvoid initialize_memory_00080b98(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  array_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b98": "initialize_memory_00080b98",
                "Elf32_Rel_ARRAY_20070000": "relocation_table",
                "Elf32_Rel_ARRAY_20070000[6].r_offset": "array_offset"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080b98": {
                    "1": "initialize_memory_addresses",
                    "22": "initialize_memory",
                    "5": "initialize_data"
                },
                "_DAT_400e0a00": {
                    "2": "memory_block1",
                    "1": "memory_address_1",
                    "5": "memory_size1"
                },
                "_DAT_400e0c00": {
                    "2": "memory_block2",
                    "1": "variable2",
                    "6": "memory_size2"
                },
                "_DAT_400e0620": {
                    "1": "data_value",
                    "2": "memory_address",
                    "6": "shifted_value",
                    "3": "offset",
                    "4": "memory_value"
                },
                "_DAT_400e0668": {
                    "1": "conditional_value",
                    "2": "temporary_value",
                    "3": "loop_variable",
                    "5": "loop_counter"
                },
                "_DAT_400e0628": {
                    "2": "constant1",
                    "1": "signal_value1",
                    "6": "constant_value1",
                    "3": "offset"
                },
                "_DAT_400e0630": {
                    "1": "flag_value",
                    "6": "constant_value2",
                    "3": "constant",
                    "2": "constant2"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "memory_array",
                    "3": "elf_rel_array",
                    "7": "relocation_table",
                    "2": "elf_relocations"
                },
                "Elf32_Rel_ARRAY_20070000[6].r_offset": {
                    "1": "array_offset"
                }
            }
        },
        "FUN_00080c20": {
            "entrypoint": "0x00080c20",
            "current_name": "initialize_memory_00080c20",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080c6a) */\n\n\nvoid initialize_memory_00080c20(void)\n\n{\n  int offset;\n  undefined4 *ptr;\n  \n  for (offset = 0; (undefined4 *)((int)base_address + offset) < &DAT_200708a0\n      ; offset = offset + 4) {\n    *(undefined4 *)((int)base_address + offset) =\n         *(undefined4 *)(&DAT_00085878 + offset);\n  }\n  for (ptr = &DAT_200708a0; ptr < (undefined4 *)0x20071248; ptr = ptr + 1) {\n    *ptr = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  start_execution();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080c20": "initialize_memory_00080c20",
                "iVar1": "offset",
                "puVar2": "ptr",
                "&Elf32_Rel_ARRAY_20070000[0].r_offset": "base_address",
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "&Elf32_Rel_ARRAY_20070000": "relocation_array",
                "main": "start_execution",
                "r_offset": "offset"
            },
            "calling": [],
            "called": [
                "FUN_000815ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080c20": {
                    "1": "initialize_binary_data",
                    "2": "copy_relocation_data",
                    "9": "initialize_memory"
                },
                "iVar1": {
                    "1": "iteration_index",
                    "14": "offset",
                    "10": "index"
                },
                "puVar2": {
                    "1": "current_address",
                    "6": "pointer",
                    "13": "ptr",
                    "2": "current_pointer"
                },
                "&Elf32_Rel_ARRAY_20070000[0].r_offset": {
                    "1": "base_address"
                },
                "&DAT_200708a0": {
                    "1": "end_address"
                },
                "&DAT_00085878": {
                    "1": "source_data"
                },
                "_DAT_e000ed08": {
                    "1": "system_memory_size",
                    "4": "constant",
                    "5": "constant_value"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "elf_relocations",
                    "2": "array1",
                    "5": "relocation_array",
                    "6": "rel_array"
                },
                "DAT_200708a0": {
                    "1": "elf_offset_table",
                    "3": "end_ptr",
                    "2": "end_pointer"
                },
                "&Elf32_Rel_ARRAY_20070000": {
                    "1": "relocation_array"
                },
                "FUN_000815ec": {
                    "1": "reverse_pointer",
                    "2": "perform_operation"
                },
                "main": {
                    "2": "start_execution"
                },
                "DAT_00085878": {
                    "3": "source_data",
                    "1": "array2"
                },
                "r_offset": {
                    "7": "offset"
                }
            }
        },
        "FUN_00080c98": {
            "entrypoint": "0x00080c98",
            "current_name": "calculate_threshold_00080c98",
            "code": "\nundefined4 calculate_threshold_00080c98(undefined4 *threshold,uint input_size,int divisor,int multiplier)\n\n{\n  uint quotient;\n  uint index;\n  uint thresholds [16];\n  \n  thresholds[0] = 0;\n  thresholds[1] = 8;\n  thresholds[2] = 0x10;\n  thresholds[3] = 0x18;\n  thresholds[4] = 0x40;\n  thresholds[5] = 0x50;\n  thresholds[6] = 0x60;\n  thresholds[7] = 0x70;\n  thresholds[8] = 0x200;\n  thresholds[9] = 0x240;\n  thresholds[10] = 0x280;\n  thresholds[11] = 0x2c0;\n  thresholds[12] = 0x300;\n  thresholds[13] = 0x340;\n  thresholds[14] = 0x380;\n  thresholds[15] = 0x3c0;\n  *threshold = 1;\n  threshold[1] = 0;\n  threshold[0x48] = 0x202;\n  threshold[0x41] = 0;\n  threshold[0x45] = 0;\n  quotient = input_size / (uint)(divisor * 2);\n  if (input_size == divisor * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(multiplier * (int)(((ulonglong)input_size / (ulonglong)((quotient + 1) * 2)) / 1000000)) <=\n        thresholds[index]) {\n      threshold[1] = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | threshold[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080c98": "calculate_threshold_00080c98",
                "param_1": "threshold",
                "param_2": "input_size",
                "param_3": "divisor",
                "param_4": "multiplier",
                "uVar1": "quotient",
                "uVar2": "index",
                "local_58": "thresholds"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080c98": {
                    "1": "update_parameters",
                    "23": "calculate_threshold"
                },
                "param_1": {
                    "9": "threshold",
                    "5": "output_array",
                    "1": "result_array",
                    "6": "output",
                    "4": "result",
                    "2": "output_buffer"
                },
                "param_2": {
                    "1": "total_memory",
                    "2": "data_size",
                    "4": "input_value",
                    "9": "input_size",
                    "5": "size"
                },
                "param_3": {
                    "1": "calculation_factor",
                    "7": "divisor",
                    "2": "factor",
                    "5": "block_size"
                },
                "param_4": {
                    "2": "threshold",
                    "1": "threshold_factor",
                    "3": "divisor",
                    "10": "multiplier"
                },
                "uVar1": {
                    "4": "num_blocks",
                    "1": "num_cycles",
                    "17": "quotient"
                },
                "uVar2": {
                    "1": "current_index",
                    "5": "i",
                    "24": "index"
                },
                "local_58": {
                    "1": "threshold_table",
                    "17": "thresholds",
                    "9": "threshold_values",
                    "3": "threshold_array"
                },
                "totalMemory": {
                    "1": "total_memory"
                },
                "usedMemory": {
                    "1": "used_memory"
                },
                "divisor": {
                    "1": "divisor"
                }
            }
        },
        "FUN_00080d30": {
            "entrypoint": "0x00080d30",
            "current_name": "update_flags_00080d30",
            "code": "\nvoid update_flags_00080d30(int base_address,uint value,uint flag)\n\n{\n  *(uint *)(base_address + 4) = value | *(uint *)(base_address + 4) | (flag & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d30": "update_flags_00080d30",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "flag"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080d30": {
                    "3": "update_parameter",
                    "1": "update_parameters",
                    "2": "update_parameter_value",
                    "5": "update_flags"
                },
                "param_1": {
                    "2": "ptr",
                    "1": "memory_address",
                    "4": "register_address",
                    "8": "base_address"
                },
                "param_2": {
                    "1": "new_flags",
                    "7": "new_value",
                    "9": "value",
                    "3": "new_bits",
                    "2": "flag_value"
                },
                "param_3": {
                    "9": "flag",
                    "2": "bit",
                    "1": "new_param3",
                    "5": "bit_mask"
                },
                "*(uint *)(param_1 + 4)": {
                    "1": "current_flag_bits",
                    "3": "current_value",
                    "2": "flags"
                },
                "*(uint *)(param_1 + 4) | (param_3 & 1) << 7": {
                    "2": "updated_value"
                },
                "param_2 | *(uint *)(param_1 + 4) | (param_3 & 1) << 7": {
                    "1": "final_flags"
                },
                "param_1 + 4": {
                    "2": "flags_address",
                    "1": "address_to_update"
                },
                "param_2 | *(uint *)(param_1 + 4)": {
                    "1": "new_config_value"
                },
                "(param_3 & 1) << 7": {
                    "1": "masked_bit",
                    "2": "shifted_bit",
                    "3": "flag_shifted"
                },
                "param_4": {
                    "1": "bit_index"
                },
                "param_3 & 1": {
                    "1": "masked_bit"
                },
                "(param_1 + 4)": {
                    "1": "current_value"
                },
                "(param_3 & 1)": {
                    "1": "bit_mask"
                }
            }
        },
        "FUN_00080d3e": {
            "entrypoint": "0x00080d3e",
            "current_name": "update_flags_00080d3e",
            "code": "\nvoid update_flags_00080d3e(int base_address,uint value1,uint value2,uint value3)\n\n{\n  *(uint *)(base_address + 4) =\n       value2 | *(uint *)(base_address + 4) | (value1 & 0xf) << 0x18 | (value3 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d3e": "update_flags_00080d3e",
                "param_1": "base_address",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080d3e": {
                    "1": "combine_bitfields",
                    "2": "update_parameters",
                    "4": "update_register_values",
                    "5": "update_flags"
                },
                "param_1": {
                    "1": "memory_address",
                    "2": "data_ptr",
                    "3": "data_address",
                    "11": "base_address"
                },
                "param_2": {
                    "1": "input_a",
                    "2": "bit_mask",
                    "11": "value1",
                    "3": "input1"
                },
                "param_3": {
                    "1": "original_value",
                    "3": "input2",
                    "2": "mask1",
                    "11": "value2"
                },
                "param_4": {
                    "2": "mask2",
                    "1": "value_c",
                    "11": "value3",
                    "3": "input3"
                },
                "*(uint *)(param_1 + 4)": {
                    "1": "parameter_to_update",
                    "2": "flags"
                },
                "(param_2 & 0xf)": {
                    "1": "masked_value1"
                },
                "(param_4 & 3)": {
                    "1": "masked_value2"
                },
                "param_1 + 4": {
                    "1": "register_address"
                },
                "param_2 & 0xf": {
                    "1": "masked_input_a"
                },
                "param_4 & 3": {
                    "1": "shifted_value"
                },
                "(param_2 & 0xf) << 0x18": {
                    "1": "input_masked_value"
                },
                "(param_4 & 3) << 0x1c": {
                    "1": "masked_value"
                },
                "param_3 | *(uint *)(param_1 + 4) | (param_2 & 0xf) << 0x18 | (param_4 & 3) << 0x1c": {
                    "1": "combined_value"
                },
                "<original_function_name>": {
                    "1": "update_configuration"
                },
                "<param_1>": {
                    "1": "config_ptr"
                },
                "<param_2>": {
                    "1": "input_config1"
                },
                "<param_3>": {
                    "1": "input_config2"
                },
                "<param_4>": {
                    "1": "input_config3"
                },
                "0xf": {
                    "1": "mask"
                },
                "0x18": {
                    "1": "bit_offset1"
                },
                "0x1c": {
                    "1": "bit_offset2"
                }
            }
        },
        "FUN_00080d58": {
            "entrypoint": "0x00080d58",
            "current_name": "set_bit_00080d58",
            "code": "\nvoid set_bit_00080d58(int base_address,uint bit_position)\n\n{\n  *(int *)(base_address + 0x14) = 1 << (bit_position and 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d58": "set_bit_00080d58",
                "param_1": "base_address",
                "param_2": "bit_position",
                "&": "and"
            },
            "calling": [
                "FUN_00080f0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080d58": {
                    "1": "set_bit_flag",
                    "11": "set_bit",
                    "6": "set_bit_at_position",
                    "2": "set_bit_in_integer",
                    "3": "set_bit_at_index"
                },
                "param_1": {
                    "1": "base_pointer",
                    "26": "base_address",
                    "2": "array_address"
                },
                "param_2": {
                    "22": "bit_position",
                    "8": "bit_index",
                    "1": "bit_number"
                },
                "*(int *)(param_1 + 0x14)": {
                    "1": "bit_mask"
                },
                "param_3": {
                    "1": "num_bits"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "DAT_": {
                    "1": "dat_"
                },
                "0x14": {
                    "1": "offset"
                },
                "&": {
                    "1": "and"
                }
            }
        },
        "FUN_00080d62": {
            "entrypoint": "0x00080d62",
            "current_name": "set_default_value_00080d62",
            "code": "\nvoid set_default_value_00080d62(int base_address)\n\n{\n  *(undefined4 *)(base_address + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d62": "set_default_value_00080d62",
                "param_1": "base_address"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080d62": {
                    "1": "set_variable_to_max_value",
                    "2": "initialize_memory",
                    "12": "set_default_value",
                    "6": "initialize_value"
                },
                "param_1": {
                    "2": "data_address",
                    "1": "param",
                    "4": "object_address",
                    "12": "base_address"
                },
                "*(undefined4 *)(param_1 + 0x14)": {
                    "1": "value_ptr"
                },
                "0x14": {
                    "2": "offset"
                },
                "0xffff": {
                    "1": "max_value"
                },
                "(param_1 + 0x14)": {
                    "1": "target_address"
                },
                "<original_variable_name_1>": {
                    "1": "error_code"
                },
                "*(undefined4 *)(objectAddress + 0x14)": {
                    "1": "variable_at_offset20"
                },
                "<original_variable_name_2>": {
                    "1": "value"
                }
            }
        },
        "FUN_00080d6a": {
            "entrypoint": "0x00080d6a",
            "current_name": "set_param_value_00080d6a",
            "code": "\nvoid set_param_value_00080d6a(int object_address,undefined4 new_value)\n\n{\n  *(undefined4 *)(object_address + 0x28) = new_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d6a": "set_param_value_00080d6a",
                "param_1": "object_address",
                "param_2": "new_value"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080d6a": {
                    "9": "set_parameter_value",
                    "2": "update_parameter_value",
                    "1": "set_param_at_offset",
                    "13": "set_param_value"
                },
                "param_1": {
                    "18": "object_address",
                    "1": "parameter_address",
                    "7": "base_address",
                    "2": "obj_ptr"
                },
                "param_2": {
                    "4": "param_value",
                    "10": "value",
                    "11": "new_value",
                    "6": "parameter_value"
                },
                "*(undefined4 *)(param_1 + 0x28)": {
                    "1": "target_address"
                },
                "*objectAddress + 0x28": {
                    "1": "param2_address"
                }
            }
        },
        "FUN_00080e80": {
            "entrypoint": "0x00080e80",
            "current_name": "initialize_00080e80",
            "code": "\nvoid initialize_00080e80(void)\n\n{\n  status 0;\n}\n\n",
            "renaming": {
                "FUN_00080e80": "initialize_00080e80",
                "undefined4": "void",
                "return": "status"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080e80": {
                    "17": "initialize",
                    "6": "get_default_value",
                    "2": "get_return_value",
                    "1": "get_zero"
                },
                "undefined4": {
                    "1": "status",
                    "7": "void",
                    "2": "int"
                },
                "PTR_12345678": {
                    "1": "new_parameter"
                },
                "DAT_12345678": {
                    "1": "buffer"
                },
                "DAT_87654321": {
                    "1": "result"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "<no parameters>": {
                    "1": ""
                },
                "<no variables>": {
                    "1": ""
                },
                "return": {
                    "1": "status"
                },
                "<original_variable_name>": {
                    "1": "result"
                },
                "<no_changes>": {
                    "1": "<no_changes>"
                }
            }
        },
        "FUN_00080e88": {
            "entrypoint": "0x00080e88",
            "current_name": "calculate_sum_00080e88",
            "code": "\nint calculate_sum_00080e88(int input_value)\n\n{\n  int previous_value;\n  \n  if (DAT_20071208 == 0) {\n    DAT_20071208 = 0x20071248;\n  }\n  previous_value = DAT_20071208;\n  DAT_20071208 = input_value + DAT_20071208;\n  return previous_value;\n}\n\n",
            "renaming": {
                "FUN_00080e88": "calculate_sum_00080e88",
                "param_1": "input_value",
                "iVar1": "previous_value"
            },
            "calling": [
                "FUN_0008236c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080e88": {
                    "12": "calculate_sum",
                    "1": "calculate_updated_value",
                    "7": "calculate_new_value",
                    "2": "add_and_return_previous_value"
                },
                "param_1": {
                    "1": "number",
                    "18": "input_value",
                    "5": "value",
                    "3": "input_number",
                    "2": "num"
                },
                "iVar1": {
                    "6": "previous_sum",
                    "1": "result",
                    "2": "original_value",
                    "16": "previous_value"
                },
                "DAT_20071208": {
                    "1": "stored_value"
                },
                "F": {
                    "1": "add_and_update"
                }
            }
        },
        "FUN_00080eaa": {
            "entrypoint": "0x00080eaa",
            "current_name": "get_return_value_00080eaa",
            "code": "\nuint32_t get_return_value_00080eaa(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080eaa": "get_return_value_00080eaa",
                "undefined4": "uint32_t"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080eaa": {
                    "1": "get_result",
                    "2": "get_default_value",
                    "7": "get_error_code",
                    "10": "get_return_value",
                    "3": "initialize_return_value"
                },
                "<original_variable_name_1>": {
                    "1": "error_code"
                },
                "undefined4": {
                    "1": "unsigned_integer",
                    "2": "int",
                    "4": "uint32",
                    "6": "uint32_t"
                },
                "0xffffffff": {
                    "4": "error_value",
                    "2": "invalid_value",
                    "1": "error_code"
                },
                "DAT_": {
                    "1": "data_"
                },
                "<unknown_parameter_1>": {
                    "1": "<new_parameter_name_1>"
                },
                "<original_variable_name>": {
                    "1": "error_code"
                },
                "PTR_": {
                    "1": "ptr_"
                }
            }
        },
        "FUN_00080eb0": {
            "entrypoint": "0x00080eb0",
            "current_name": "initialize_memory_00080eb0",
            "code": "\nundefined4 initialize_memory_00080eb0(undefined4 param1,int memory_address)\n\n{\n  *(undefined4 *)(memory_address + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080eb0": "initialize_memory_00080eb0",
                "param_1": "param1",
                "param_2": "memory_address"
            },
            "calling": [
                "FUN_00084494"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080eb0": {
                    "2": "initialize_parameter",
                    "1": "set_memory_flag",
                    "4": "set_memory_value",
                    "3": "set_memory_size",
                    "9": "initialize_memory"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "param_1",
                    "9": "param1",
                    "5": "param"
                },
                "param_2": {
                    "4": "address",
                    "3": "base_address",
                    "1": "memory_offset",
                    "2": "buffer",
                    "8": "memory_address"
                },
                "*(undefined4 *)(param_2 + 4)": {
                    "1": "next_page_size",
                    "2": "memory_value"
                },
                "param_2 + 4": {
                    "1": "memory_size"
                },
                "0x2000": {
                    "1": "constant_value"
                }
            }
        },
        "FUN_00080eba": {
            "entrypoint": "0x00080eba",
            "current_name": "get_return_value_00080eba",
            "code": "\nint get_return_value_00080eba(void)\n\n{\n  result 1;\n}\n\n",
            "renaming": {
                "FUN_00080eba": "get_return_value_00080eba",
                "undefined4": "int",
                "return": "result"
            },
            "calling": [
                "FUN_000844bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080eba": {
                    "2": "initialize",
                    "1": "get_status",
                    "6": "get_one",
                    "3": "initialize_flag",
                    "15": "get_return_value"
                },
                "undefined4": {
                    "1": "void",
                    "11": "int"
                },
                "return": {
                    "1": "return",
                    "6": "result"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "1": {
                    "1": "1"
                }
            }
        },
        "FUN_00080ebe": {
            "entrypoint": "0x00080ebe",
            "current_name": "initialize_00080ebe",
            "code": "\nvoid initialize_00080ebe(void)\n\n{\n  result 0;\n}\n\n",
            "renaming": {
                "FUN_00080ebe": "initialize_00080ebe",
                "undefined4": "void",
                "return": "result"
            },
            "calling": [
                "FUN_000844e0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080ebe": {
                    "1": "initialize_program",
                    "17": "initialize",
                    "6": "get_default_value",
                    "2": "get_return_value"
                },
                "undefined4": {
                    "1": "uint32",
                    "10": "void"
                },
                "original_parameter_name_1": {
                    "1": "param1"
                },
                "original_variable_name_1": {
                    "1": "var1"
                },
                "<original_variable_name_1>": {
                    "2": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "2": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "2": "<new_variable_name_n>"
                },
                "<original_variable_name>": {
                    "1": "result"
                },
                "return": {
                    "1": "result"
                },
                "new_function_name": {
                    "1": "fun_00080ebe"
                },
                "original_variable_name_2": {
                    "1": "variable2"
                },
                "<original_function_name>": {
                    "1": "<more_descriptive_function_name>"
                },
                "<original_parameter_name_1>": {
                    "1": "<new_parameter_name_1>"
                },
                "<original_parameter_name_2>": {
                    "1": "<new_parameter_name_2>"
                },
                "<original_parameter_name_n>": {
                    "1": "<new_parameter_name_n>"
                }
            }
        },
        "FUN_00080ec2": {
            "entrypoint": "0x00080ec2",
            "current_name": "initialize_00080ec2",
            "code": "\nvoid initialize_00080ec2(void)\n\n{\n  result 0;\n}\n\n",
            "renaming": {
                "FUN_00080ec2": "initialize_00080ec2",
                "undefined4": "void",
                "return": "result"
            },
            "calling": [
                "FUN_00084508"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080ec2": {
                    "1": "get_zero",
                    "14": "initialize",
                    "3": "get_default_value",
                    "5": "initialize_application",
                    "2": "initialize_data"
                },
                "<original_variable_name_1>": {
                    "3": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "2": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "2": "<new_variable_name_n>"
                },
                "undefined4": {
                    "7": "void",
                    "2": "int"
                },
                "return value": {
                    "1": "success"
                },
                "<original_variable_name>": {
                    "1": "<new_variable_name>"
                },
                "return": {
                    "1": "status",
                    "2": "result"
                },
                "PTR_00000004": {
                    "1": "ptr_result"
                },
                "DAT_00000008": {
                    "1": "data"
                },
                "DAT_0000000c": {
                    "1": "data_length"
                },
                "PTR_": {
                    "1": "ptr"
                },
                "DAT_": {
                    "1": "dat"
                }
            }
        },
        "FUN_00080ec8": {
            "entrypoint": "0x00080ec8",
            "current_name": "copy_bytes_00080ec8",
            "code": "\n\n\nuint copy_bytes_00080ec8(undefined4 param1,int source,uint num_bytes)\n\n{\n  int index;\n  \n  for (index = 0; index < (int)num_bytes; index = index + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(source + index);\n  }\n  return num_bytes & ~((int)num_bytes >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_00080ec8": "copy_bytes_00080ec8",
                "param_1": "param1",
                "param_2": "source",
                "param_3": "num_bytes",
                "iVar1": "index"
            },
            "calling": [
                "FUN_00084244"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080ec8": {
                    "7": "process_data",
                    "18": "copy_bytes",
                    "1": "process_bytes"
                },
                "param_1": {
                    "1": "result",
                    "2": "param_1",
                    "3": "dest",
                    "8": "param1",
                    "5": "param"
                },
                "param_2": {
                    "1": "input_data",
                    "3": "src",
                    "2": "byte_array",
                    "5": "source"
                },
                "param_3": {
                    "11": "num_bytes",
                    "3": "array_length",
                    "1": "num_elements",
                    "4": "size",
                    "5": "length"
                },
                "iVar1": {
                    "1": "current_index",
                    "12": "i",
                    "14": "index"
                }
            }
        },
        "FUN_00080eec": {
            "entrypoint": "0x00080eec",
            "current_name": "exit_with_status_00080eec",
            "code": "\nvoid exit_with_status_00080eec(undefined4 status,undefined4 unused,undefined4 unused,undefined4 unused)\n\n{\n  iprintf(\"Exiting with status %d.\\n\",status,unused,unused,unused);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080eec": "exit_with_status_00080eec",
                "param_1": "status",
                "param_2": "unused",
                "param_3": "unused",
                "param_4": "unused"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "FUN_000817c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080eec": {
                    "1": "print_and_exit",
                    "30": "exit_with_status"
                },
                "param_1": {
                    "31": "status"
                },
                "param_2": {
                    "1": "format_string",
                    "3": "unused1",
                    "6": "unused",
                    "4": "unused_param"
                },
                "param_3": {
                    "1": "param_3",
                    "2": "unused_param2",
                    "7": "unused",
                    "3": "unused2",
                    "5": "unused_param_1"
                },
                "param_4": {
                    "5": "unused_param_2",
                    "2": "unused_param2",
                    "3": "unused_param",
                    "1": "unused2",
                    "7": "unused"
                },
                "FUN_000817c8": {
                    "1": "print_status",
                    "3": "print_exit_status"
                }
            }
        },
        "FUN_00080efc": {
            "entrypoint": "0x00080efc",
            "current_name": "FUNC_00080efc",
            "code": "\nvoid FUNC_00080efc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080efc": "FUNC_00080efc"
            },
            "calling": [
                "FUN_000841e4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080efe": {
            "entrypoint": "0x00080efe",
            "current_name": "get_error_code_00080efe",
            "code": "\nint get_error_code_00080efe(void)\n\n{\n  error_value 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080efe": "get_error_code_00080efe",
                "undefined4": "int",
                "return": "error_value"
            },
            "calling": [
                "FUN_0008421c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080efe": {
                    "6": "get_default_value",
                    "10": "get_error_code",
                    "4": "get_negative_one",
                    "1": "initialize_return_value",
                    "2": "get_return_value"
                },
                "undefined4": {
                    "1": "error",
                    "6": "uint32_t"
                },
                "0xffffffff": {
                    "1": "error_code"
                },
                "PTR_": {
                    "1": "unchanged"
                },
                "DAT_": {
                    "1": "unchanged"
                },
                "return_value": {
                    "1": "result"
                },
                "FUN_00080ede": {
                    "1": "get_error_code"
                },
                "DAT_00080f20": {
                    "1": "default_value"
                },
                "return": {
                    "1": "error_value"
                },
                "return value": {
                    "1": "default_value"
                }
            }
        },
        "FUN_00080f04": {
            "entrypoint": "0x00080f04",
            "current_name": "FUN_00080f04",
            "code": "\nundefined4 GetTickCount(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_000811e8"
            ],
            "called": [
                "FUN_000816d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f08": {
            "entrypoint": "0x00080f08",
            "current_name": "FUNC_00080f08",
            "code": "\nvoid FUNC_00080f08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080f08": "FUNC_00080f08"
            },
            "calling": [
                "FUN_000801e0",
                "FUN_00080250",
                "FUN_000815ec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080f0c": {
            "entrypoint": "0x00080f0c",
            "current_name": "configure_peripheral_00080f0c",
            "code": "\n\n\nint configure_peripheral_00080f0c(int channel,int mode)\n\n{\n  int result;\n  uint pin_mask;\n  undefined4 configure_mode;\n  uint mask;\n  byte pin_mode;\n  byte pin_config;\n  int offset;\n  int pin_config;\n  \n  result = channel;\n  if ((&DAT_00084b50)[channel * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[channel] & 0xf) == 4) {\n      result = adc_disable_channel(0x400c0000,(&DAT_00084b5d)[channel * 0x1c]);\n    }\n    pin_config = (&DAT_20070e1c)[channel];\n    pin_mode = pin_config & 0xf;\n    if ((pin_mode < 3) && (pin_config != 0)) {\n      if (pin_mode == 2) {\n        if (mode == 0) {\n          return result;\n        }\n      }\n      else if (pin_mode == 1) {\n        if (mode == 2) {\n          return result;\n        }\n      }\n      else if (pin_mode == 3) {\n        if (mode == 1) {\n          return result;\n        }\n        goto LAB_00080f68;\n      }\n    }\n    if (mode != 1) {\nLAB_00080f68:\n      if (mode == 0) {\n        result = channel * 0x1c;\n        enable_peripheral_clock(*(undefined4 *)(&DAT_00084b4c + result));\n        result = configure_pio(*(undefined4 *)(&DAT_00084b44 + result),3,\n                              *(undefined4 *)(&DAT_00084b48 + result),0);\n        pin_config = (&DAT_20070e1c)[channel] & 0xf0 | 2;\n      }\n      else {\n        if (mode != 2) {\n          return result;\n        }\n        result = channel * 0x1c;\n        enable_peripheral_clock(*(undefined4 *)(&DAT_00084b4c + result));\n        result = configure_pio(*(undefined4 *)(&DAT_00084b44 + result),3,\n                              *(undefined4 *)(&DAT_00084b48 + result),1);\n        pin_config = (&DAT_20070e1c)[channel] & 0xf0 | 1;\n      }\n      (&DAT_20070e1c)[channel] = pin_config;\n      return result;\n    }\n    offset = channel * 0x1c;\n    pin_config = *(int *)(&DAT_00084b44 + offset);\n    if (pin_config >> 4 == 0) {\n      configure_mode = 4;\n    }\n    else {\n      configure_mode = 5;\n    }\n    result = configure_pio(pin_config,configure_mode,*(undefined4 *)(&DAT_00084b48 + offset),\n                          *(undefined4 *)(&DAT_00084b54 + offset));\n    (&DAT_20070e1c)[channel] = (&DAT_20070e1c)[channel] & 0xf0 | 3;\n    if (*(int *)(pin_config + 0x18) == -1) {\n      pin_mask = *(uint *)(&DAT_00084b4c + offset);\n      if (0x2c < pin_mask) {\n        return 1;\n      }\n      if (pin_mask < 0x20) {\n        pin_mask = 1 << (pin_mask & 0xff);\n        mask = _DAT_400e0618 & pin_mask;\n        if (mask == pin_mask) {\n          _DAT_400e0614 = mask;\n        }\n      }\n      else {\n        pin_mask = 1 << (pin_mask - 0x20 & 0xff);\n        mask = _DAT_400e0708 & pin_mask;\n        if (mask == pin_mask) {\n          _DAT_400e0704 = mask;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080f0c": "configure_peripheral_00080f0c",
                "param_1": "channel",
                "param_2": "mode",
                "iVar1": "result",
                "uVar2": "pin_mask",
                "uVar3": "configure_mode",
                "uVar4": "mask",
                "bVar5": "pin_mode",
                "bVar6": "pin_config",
                "iVar7": "offset",
                "iVar8": "pin_config",
                "pmc_enable_periph_clk": "enable_peripheral_clock",
                "PIO_Configure": "configure_pio"
            },
            "calling": [
                "FUN_000806a0",
                "FUN_00081014",
                "FUN_000801e0"
            ],
            "called": [
                "FUN_00080aa8",
                "FUN_00080a30",
                "FUN_00080d58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00080f0c": {
                    "1": "configure_input_output",
                    "10": "configure_peripheral"
                },
                "param_1": {
                    "9": "pin_index",
                    "1": "channel_number",
                    "3": "pin_number",
                    "13": "channel",
                    "4": "channel_index"
                },
                "param_2": {
                    "1": "configuration",
                    "21": "mode",
                    "3": "config_option"
                },
                "iVar1": {
                    "30": "result"
                },
                "uVar2": {
                    "1": "pin_id",
                    "7": "pin_mask",
                    "5": "pin",
                    "2": "pin_number"
                },
                "uVar3": {
                    "1": "periph_mode",
                    "4": "configure_mode",
                    "2": "config",
                    "3": "pin_config"
                },
                "uVar4": {
                    "1": "tmp3",
                    "8": "mask",
                    "3": "pin_mask",
                    "2": "pio_mask"
                },
                "bVar5": {
                    "1": "mode_bits",
                    "3": "lower_nibble",
                    "9": "pin_mode",
                    "2": "mode_low",
                    "5": "channel_type"
                },
                "bVar6": {
                    "1": "mode2",
                    "2": "config_value",
                    "4": "channel_config",
                    "6": "pin_config"
                },
                "iVar7": {
                    "4": "index",
                    "1": "pin_settings_index",
                    "6": "offset",
                    "5": "config_index",
                    "3": "config_offset"
                },
                "iVar8": {
                    "1": "port_settings",
                    "3": "config_address",
                    "6": "pin_config",
                    "2": "pio_settings",
                    "4": "pio_config"
                },
                "pmc_enable_periph_clk": {
                    "2": "enable_clock",
                    "6": "enable_peripheral_clock",
                    "1": "enable_periph_clock"
                },
                "PIO_Configure": {
                    "9": "configure_pio"
                },
                "_DAT_400e0618": {
                    "1": "register_a"
                },
                "_DAT_400e0614": {
                    "1": "pio_set_output"
                },
                "_DAT_400e0708": {
                    "1": "piob_mskr"
                },
                "_DAT_400e0704": {
                    "1": "piob_mask"
                },
                "FUN_00080aa8": {
                    "2": "disable_channel",
                    "1": "disable_peripheral"
                },
                "FUN_00080a30": {
                    "1": "configure_peripheral",
                    "2": "pio_configure"
                },
                "FUN_00080d58": {
                    "1": "pmc_enable_periph_clk"
                },
                "DAT_00084b50": {
                    "1": "is_enabled"
                },
                "DAT_20070e1c": {
                    "1": "pin_config"
                },
                "DAT_00084b5d": {
                    "1": "adc_channel"
                },
                "DAT_00084b4c": {
                    "1": "pmc_periph_clock"
                },
                "DAT_00084b44": {
                    "1": "pio_periph"
                },
                "DAT_00084b48": {
                    "1": "pio_pin"
                },
                "DAT_00084b54": {
                    "1": "pio_attribute"
                },
                "FUM_00080f0c": {
                    "1": "configure_peripheral"
                },
                "param_3": {
                    "1": "io_attributes"
                },
                "param_4": {
                    "1": "pin_mask"
                }
            }
        },
        "FUN_00081014": {
            "entrypoint": "0x00081014",
            "current_name": "set_pin_mode_00081014",
            "code": "\nvoid set_pin_mode_00081014(int pin_index,int output_value,undefined4 param)\n\n{\n  int output_status;\n  undefined4 output_data;\n  int output_pin;\n  \n  if ((&DAT_00084b50)[pin_index * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[pin_index] & 0xf) == 5) {\n      set_pin_mode_00081014(pin_index,1,param,5,pin_index,output_value,param);\n    }\n    (&DAT_20070e1c)[pin_index] = (&DAT_20070e1c)[pin_index] & 0xf | (byte)(output_value << 4);\n    output_pin = *(int *)(&DAT_00084b44 + pin_index * 0x1c);\n    output_data = *(undefined4 *)(&DAT_00084b48 + pin_index * 0x1c);\n    output_status = get_output_data_status(output_pin,output_data);\n    if (output_status == 0) {\n      if (output_value != 0) {\n        *(undefined4 *)(output_pin + 100) = output_data;\n        return;\n      }\n      *(undefined4 *)(output_pin + 0x60) = output_data;\n      return;\n    }\n    set_output(output_pin,output_data,output_value,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081014": "set_pin_mode_00081014",
                "param_1": "pin_index",
                "param_2": "output_value",
                "param_3": "param",
                "iVar1": "output_status",
                "uVar2": "output_data",
                "iVar3": "output_pin",
                "pinMode": "set_pin_mode",
                "PIO_GetOutputDataStatus": "get_output_data_status",
                "PIO_SetOutput": "set_output"
            },
            "calling": [
                "FUN_0008044c",
                "FUN_00080250",
                "FUN_00080774"
            ],
            "called": [
                "FUN_00080a0a",
                "FUN_00080f0c",
                "FUN_00080a94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081014": {
                    "1": "update_pin_mode_and_output",
                    "2": "set_pin_mode_and_output_data",
                    "5": "configure_pin",
                    "8": "set_pin_mode",
                    "7": "update_pin_mode",
                    "3": "set_pin_mode_and_output"
                },
                "param_1": {
                    "15": "pin_index",
                    "12": "pin_number",
                    "1": "io_port"
                },
                "param_2": {
                    "2": "state",
                    "1": "output_data_value",
                    "7": "output_value",
                    "3": "value",
                    "6": "mode"
                },
                "param_3": {
                    "2": "undefined_param",
                    "1": "undefined_parameter",
                    "6": "param3",
                    "4": "param_3",
                    "11": "param"
                },
                "iVar1": {
                    "19": "output_status",
                    "11": "output_data_status",
                    "1": "status"
                },
                "uVar2": {
                    "3": "data",
                    "2": "pin_mask",
                    "4": "output_value",
                    "1": "output_data_value",
                    "17": "output_data"
                },
                "iVar3": {
                    "1": "pin_port",
                    "2": "port_address",
                    "8": "output_pin",
                    "4": "pio"
                },
                "FUN_00080a0a": {
                    "1": "update_pin_mode_ex",
                    "2": "update_pin_mode",
                    "3": "configure_pin",
                    "8": "set_pin_mode"
                },
                "FUN_00080f0c": {
                    "1": "check_output_data_status",
                    "23": "pio_get_output_data_status"
                },
                "FUN_00080a94": {
                    "1": "set_output_pin",
                    "23": "pio_set_output"
                },
                "&DAT_00084b50": {
                    "1": "pin_enabled"
                },
                "&DAT_20070e1c": {
                    "1": "pins"
                },
                "&DAT_00084b44": {
                    "1": "pin_data_table"
                },
                "&DAT_00084b48": {
                    "1": "pin_data_values"
                },
                "param_4": {
                    "1": "param"
                },
                "param_5": {
                    "2": "param",
                    "1": "flag2"
                },
                "pinMode": {
                    "1": "configure_pin_mode",
                    "3": "set_pin_mode"
                },
                "PIO_GetOutputDataStatus": {
                    "4": "get_output_data_status"
                },
                "PIO_SetOutput": {
                    "4": "set_output"
                },
                "*(undefined4 *)(iVar3 + 100)": {
                    "1": "set_output_data_high"
                },
                "*(undefined4 *)(iVar3 + 0x60)": {
                    "1": "set_output_data_low"
                }
            }
        },
        "FUN_000810a6": {
            "entrypoint": "0x000810a6",
            "current_name": "process_string_000810a6",
            "code": "\nvoid process_string_000810a6(int *array,int string,undefined4 arg1,undefined4 arg2)\n\n{\n  undefined4 string_length;\n  \n  if (string != 0) {\n    string_length = strlen(string);\n    (**(code **)(*array + 4))(array,string,string_length,*(code **)(*array + 4),arg2);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810a6": "process_string_000810a6",
                "param_1": "array",
                "param_2": "string",
                "param_3": "arg1",
                "param_4": "arg2",
                "uVar1": "string_length"
            },
            "calling": [
                "FUN_000810d8",
                "FUN_000810fc",
                "FUN_000810c4",
                "FUN_000810e8"
            ],
            "called": [
                "FUN_00082688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000810a6": {
                    "1": "execute_function_based_on_condition",
                    "4": "process_data",
                    "3": "reverse_string",
                    "5": "process_string"
                },
                "param_1": {
                    "1": "str_pointer",
                    "6": "array",
                    "2": "function_ptr",
                    "3": "input_array",
                    "5": "array_ptr"
                },
                "param_2": {
                    "1": "string_param",
                    "3": "size",
                    "2": "string_ptr",
                    "7": "string",
                    "4": "length"
                },
                "param_3": {
                    "6": "param3",
                    "1": "size",
                    "8": "arg1",
                    "2": "param_3",
                    "3": "length"
                },
                "param_4": {
                    "1": "value2",
                    "6": "param4",
                    "3": "arg4",
                    "8": "arg2"
                },
                "uVar1": {
                    "1": "input_length",
                    "15": "string_length",
                    "7": "str_length",
                    "3": "length"
                },
                "FUN_00082688": {
                    "1": "reverse_bits"
                },
                "<original_function_name>": {
                    "1": "process_data"
                },
                "<param_1>": {
                    "1": "data"
                },
                "<param_2>": {
                    "1": "size"
                },
                "<param_3>": {
                    "1": "arg3"
                },
                "<param_4>": {
                    "1": "arg4"
                }
            }
        },
        "FUN_000810c4": {
            "entrypoint": "0x000810c4",
            "current_name": "process_string_000810c4",
            "code": "\nvoid process_string_000810c4(void)\n\n{\n  process_string_000810c4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810c4": "process_string_000810c4",
                "string": "input_string",
                "process_string_000810a6": "process_string"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000810c4": {
                    "2": "execute_string_processing",
                    "1": "initialize_process",
                    "19": "process_string"
                },
                "string": {
                    "9": "input_string",
                    "2": "string_input",
                    "1": "string_array"
                },
                "process_string_000810a6": {
                    "1": "process_string_internal",
                    "10": "process_string"
                },
                "arg1": {
                    "2": "arg1",
                    "1": "configuration",
                    "13": "argument1"
                },
                "arg2": {
                    "13": "argument2",
                    "1": "second_argument",
                    "2": "arg2"
                },
                "array": {
                    "1": "data_array",
                    "5": "array",
                    "3": "string_array"
                },
                "int *array": {
                    "1": "data_array",
                    "2": "array"
                },
                "int string": {
                    "1": "string",
                    "2": "input_string"
                },
                "undefined4 arg1": {
                    "1": "arg1",
                    "2": "argument1"
                },
                "undefined4 arg2": {
                    "2": "argument2",
                    "1": "arg2"
                },
                "PTR_arg1": {
                    "1": "arg1"
                },
                "PTR_arg2": {
                    "1": "arg2"
                }
            }
        },
        "FUN_000810cc": {
            "entrypoint": "0x000810cc",
            "current_name": "execute_function_000810cc",
            "code": "\nvoid execute_function_000810cc(undefined4 *function_pointer)\n\n{\n  (**(code **)*function_pointer)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810cc": "execute_function_000810cc",
                "param_1": "function_pointer"
            },
            "calling": [
                "FUN_0008113a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000810cc": {
                    "2": "execute_callback",
                    "1": "execute_code_pointer",
                    "4": "execute_code",
                    "22": "execute_function"
                },
                "param_1": {
                    "1": "function_ptr",
                    "2": "callback",
                    "26": "function_pointer"
                },
                "*param_1": {
                    "1": "code_function"
                },
                "**(code **)*param_1": {
                    "1": "execute_code"
                },
                "*(code **)*function_pointer": {
                    "1": "function_address"
                }
            }
        },
        "FUN_000810d8": {
            "entrypoint": "0x000810d8",
            "current_name": "process_string_000810d8",
            "code": "\nvoid process_string_000810d8(undefined4 array,undefined4 string,undefined4 arg1,undefined4 arg2)\n\n{\n  process_string_000810d8(array,&DAT_00085635,arg1,arg2,arg2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810d8": "process_string_000810d8",
                "param_1": "array",
                "param_2": "string",
                "param_3": "arg1",
                "param_4": "arg2",
                "process_string_000810a6": "process_string",
                "string": "string_array"
            },
            "calling": [
                "FUN_000810e8",
                "FUN_0008117a"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000810d8": {
                    "2": "process_data",
                    "1": "process_and_print",
                    "7": "process_and_print_string",
                    "4": "process_and_return_string",
                    "13": "process_string"
                },
                "param_1": {
                    "2": "array_pointer",
                    "27": "array",
                    "1": "input_array"
                },
                "param_2": {
                    "11": "string",
                    "1": "param_2"
                },
                "param_3": {
                    "1": "param1",
                    "30": "arg1"
                },
                "param_4": {
                    "1": "param2",
                    "30": "arg2"
                },
                "process_string_000810a6": {
                    "1": "process_array_of_strings",
                    "4": "process_string"
                },
                "string": {
                    "1": "string_array"
                },
                "arg1": {
                    "1": "argument1"
                },
                "arg2": {
                    "1": "argument2"
                }
            }
        },
        "FUN_000810e8": {
            "entrypoint": "0x000810e8",
            "current_name": "calculate_sum_000810e8",
            "code": "\nint calculate_sum_000810e8(undefined4 input_value)\n\n{\n  int result1;\n  int result2;\n  \n  result1 = process_string1();\n  result2 = process_string2(input_value);\n  return result2 + result1;\n}\n\n",
            "renaming": {
                "FUN_000810e8": "calculate_sum_000810e8",
                "param_1": "input_value",
                "iVar1": "result1",
                "iVar2": "result2",
                "process_string_000810a6": "process_string1",
                "process_string_000810d8": "process_string2"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810d8",
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000810e8": {
                    "14": "calculate_sum",
                    "3": "add_processed_strings",
                    "2": "sum_of_processed_strings",
                    "1": "calculate_sum_of_strings",
                    "5": "calculate_sum_of_processed_strings"
                },
                "param_1": {
                    "9": "input_value",
                    "1": "array_of_strings",
                    "2": "input_string",
                    "5": "input_param"
                },
                "iVar1": {
                    "1": "result_var1",
                    "15": "result1",
                    "2": "string_processing_result1",
                    "6": "result_1"
                },
                "iVar2": {
                    "2": "string_processing_result2",
                    "1": "result_of_process_string_2",
                    "15": "result2",
                    "6": "result_2"
                },
                "process_string_000810a6": {
                    "1": "process_string_part1"
                },
                "process_string_000810d8": {
                    "1": "process_string2"
                }
            }
        },
        "FUN_000810fc": {
            "entrypoint": "0x000810fc",
            "current_name": "convert_to_base_000810fc",
            "code": "\nvoid convert_to_base_000810fc(undefined4 array,uint number,uint base)\n\n{\n  char *current_char;\n  uint quotient;\n  char *previous_char;\n  char converted_char;\n  uint remainder;\n  char converted_number [5];\n  \n  converted_number[1] = 0;\n  if (base < 2) {\n    base = 10;\n  }\n  current_char = converted_number;\n  do {\n    previous_char = current_char;\n    quotient = number / base;\n    remainder = number - base * quotient & 0xff;\n    converted_char = (char)remainder;\n    if (remainder < 10) {\n      converted_char = converted_char + '0';\n    }\n    else {\n      converted_char = converted_char + '7';\n    }\n    *previous_char = converted_char;\n    number = quotient;\n    current_char = previous_char + -1;\n  } while (quotient != 0);\n  process_string_000810a6(array,previous_char);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810fc": "convert_to_base_000810fc",
                "param_1": "array",
                "param_2": "number",
                "param_3": "base",
                "pcVar1": "current_char",
                "pcVar3": "previous_char",
                "uVar2": "quotient",
                "uVar5": "remainder",
                "cVar4": "converted_char",
                "local_15": "converted_number"
            },
            "calling": [
                "FUN_0008113a"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000810fc": {
                    "3": "convert_decimal_to_base",
                    "1": "convert_integer_to_base",
                    "6": "convert_number_to_string",
                    "5": "convert_number_to_base",
                    "11": "convert_to_base"
                },
                "param_1": {
                    "8": "output_array",
                    "14": "array",
                    "1": "output_string",
                    "5": "input_array",
                    "2": "result_array"
                },
                "param_2": {
                    "7": "decimal_number",
                    "1": "value",
                    "5": "input_number",
                    "16": "number",
                    "2": "number_to_convert"
                },
                "param_3": {
                    "30": "base",
                    "1": "conversion_base"
                },
                "pcVar1": {
                    "2": "result",
                    "3": "string_ptr",
                    "9": "current_char",
                    "1": "output"
                },
                "pcVar3": {
                    "1": "current_position",
                    "6": "previous_char",
                    "4": "current_char",
                    "2": "current_char_ptr",
                    "3": "previous_digit"
                },
                "uVar2": {
                    "21": "quotient"
                },
                "uVar5": {
                    "21": "remainder"
                },
                "cVar4": {
                    "2": "current_char",
                    "7": "converted_char",
                    "1": "digit",
                    "3": "digit_char",
                    "5": "converted_digit"
                },
                "local_15": {
                    "8": "converted_string",
                    "1": "result",
                    "2": "converted_digits",
                    "10": "converted_number"
                }
            }
        },
        "FUN_0008113a": {
            "entrypoint": "0x0008113a",
            "current_name": "print_formatted_number_0008113a",
            "code": "\nint print_formatted_number_0008113a(undefined4 *output_buffer,uint number,uint base,undefined4 format)\n\n{\n  int result;\n  int print_result;\n  \n  if (base == 0) {\n    result = (**(code **)*output_buffer)(output_buffer,number & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    base = 10;\n    if ((int)number < 0) {\n      result = execute_function(output_buffer,0x2d);\n      print_result = print_number_base(output_buffer,-number,10);\n      return print_result + result;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = print_number_base(output_buffer,number,base,format);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0008113a": "print_formatted_number_0008113a",
                "param_1": "output_buffer",
                "param_2": "number",
                "param_3": "base",
                "param_4": "format",
                "iVar1": "result",
                "iVar2": "print_result",
                "execute_function_000810cc": "execute_function",
                "printNumber": "print_number_base"
            },
            "calling": [
                "FUN_00081176",
                "FUN_0008117a"
            ],
            "called": [
                "FUN_000810fc",
                "FUN_000810cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008113a": {
                    "1": "convert_number_to_printable",
                    "26": "print_formatted_number",
                    "2": "print_number_with_base"
                },
                "param_1": {
                    "13": "function_pointer",
                    "1": "output",
                    "14": "output_buffer"
                },
                "param_2": {
                    "1": "number_to_print",
                    "29": "number"
                },
                "param_3": {
                    "30": "base",
                    "1": "radix"
                },
                "param_4": {
                    "1": "param",
                    "2": "format_flag",
                    "4": "param_4",
                    "3": "flags",
                    "9": "format"
                },
                "iVar1": {
                    "1": "function_return_value",
                    "22": "result",
                    "7": "return_value"
                },
                "iVar2": {
                    "1": "length",
                    "13": "print_result",
                    "2": "print_return_value",
                    "6": "negative_result"
                },
                "execute_function_000810cc": {
                    "1": "invoke_function",
                    "2": "execute_function"
                },
                "printNumber": {
                    "1": "print_number_base"
                },
                "FUN_000810fc": {
                    "1": "print_number_with_formatting"
                },
                "FUN_000810cc": {
                    "1": "execute_function"
                }
            }
        },
        "FUN_00081176": {
            "entrypoint": "0x00081176",
            "current_name": "FUN_00081176",
            "code": "\nint thunk_print_formatted_number_0008113a(undefined4 *param_1,uint param_2,uint param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  int iVar2;\n  \n  if (param_3 == 0) {\n    iVar1 = (**(code **)*param_1)(param_1,param_2 & 0xff);\n    return iVar1;\n  }\n  if (param_3 == 10) {\n    param_3 = 10;\n    if ((int)param_2 < 0) {\n      iVar1 = execute_function_000810cc(param_1,0x2d);\n      iVar2 = printNumber(param_1,-param_2,10);\n      return iVar2 + iVar1;\n    }\n  }\n  else {\n    param_3 = param_3 & 0xff;\n  }\n  iVar1 = printNumber(param_1,param_2,param_3,param_4);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_0008113a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008117a": {
            "entrypoint": "0x0008117a",
            "current_name": "calculate_sum_of_formatted_number_and_string_0008117a",
            "code": "\nint calculate_sum_of_formatted_number_and_string_0008117a(undefined4 input_number)\n\n{\n  int formatted_number;\n  int processed_string;\n  \n  formatted_number = get_formatted_number();\n  processed_string = process_string(input_number);\n  return processed_string + formatted_number;\n}\n\n",
            "renaming": {
                "FUN_0008117a": "calculate_sum_of_formatted_number_and_string_0008117a",
                "param_1": "input_number",
                "iVar1": "formatted_number",
                "iVar2": "processed_string",
                "print_formatted_number_0008113a": "get_formatted_number",
                "process_string_000810d8": "process_string"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810d8",
                "FUN_0008113a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008117a": {
                    "6": "calculate_sum",
                    "4": "calculate_sum_of_formatted_number_and_processed_string",
                    "1": "calculate_sum_of_printed_and_processed_numbers",
                    "10": "calculate_sum_of_formatted_number_and_string",
                    "3": "calculate_total",
                    "2": "calculate_sum_of_printed_number_and_processed_string"
                },
                "param_1": {
                    "4": "array",
                    "3": "input_parameter",
                    "1": "input_param",
                    "5": "input_value",
                    "9": "input_number",
                    "2": "input_data"
                },
                "iVar1": {
                    "1": "output1",
                    "2": "formatted_num",
                    "26": "formatted_number"
                },
                "iVar2": {
                    "1": "processed_string_result",
                    "26": "processed_string"
                },
                "print_formatted_number_0008113a": {
                    "1": "print_formatted_number",
                    "2": "get_formatted_number"
                },
                "process_string_000810d8": {
                    "3": "process_string",
                    "1": "process_input_string"
                }
            }
        },
        "FUN_00081190": {
            "entrypoint": "0x00081190",
            "current_name": "execute_if_r_info_is_zero_00081190",
            "code": "\nvoid execute_if_r_info_is_zero_00081190(void)\n\n{\n  if ((relocation_array[6].relocation_info != 0xffffffff) &&\n     (relocation_array[6].relocation_info = relocation_array[6].relocation_info - 1,\n     relocation_array[6].relocation_info == 0)) {\n    (*(function_to_execute *)((int)&relocation_array[0].relocation_offset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081190": "execute_if_r_info_is_zero_00081190",
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "r_info": "relocation_info",
                "r_offset": "relocation_offset",
                "code": "function_to_execute"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081190": {
                    "1": "execute_if_zero_incremented",
                    "2": "execute_if_info_not_minus_one",
                    "3": "execute_if_r_info_is_zero"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "rel_entries",
                    "2": "relocation_info_array",
                    "7": "rel_array",
                    "8": "relocation_array"
                },
                "r_info": {
                    "2": "entry_info",
                    "15": "relocation_info",
                    "1": "element_info",
                    "11": "info"
                },
                "r_offset": {
                    "1": "element_offset",
                    "14": "relocation_offset",
                    "12": "offset"
                },
                "code": {
                    "3": "function_to_execute",
                    "1": "callback_function"
                },
                "elfRelocationInfo": {
                    "1": "relocation_entry"
                }
            }
        },
        "FUN_000811b0": {
            "entrypoint": "0x000811b0",
            "current_name": "initialize_memory_000811b0",
            "code": "\nint initialize_memory_000811b0(int buffer)\n\n{\n  clear_buffer(buffer,0,0x80);\n  *(unsigned_int *)(buffer + 0x80) = 0;\n  *(unsigned_int *)(buffer + 0x84) = 0;\n  return buffer;\n}\n\n",
            "renaming": {
                "FUN_000811b0": "initialize_memory_000811b0",
                "param_1": "buffer",
                "memset": "clear_buffer",
                "undefined4": "unsigned_int"
            },
            "calling": [
                "FUN_0008089c"
            ],
            "called": [
                "FUN_00081f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000811b0": {
                    "6": "initialize_buffer",
                    "2": "clear_memory",
                    "1": "reset_memory",
                    "22": "initialize_memory"
                },
                "param_1": {
                    "2": "memory_pointer",
                    "9": "memory_buffer",
                    "1": "memory_address",
                    "15": "buffer"
                },
                "param_2": {
                    "2": "param",
                    "3": "param2",
                    "1": "unknown_flag",
                    "4": "value"
                },
                "param_3": {
                    "3": "param3",
                    "4": "length",
                    "1": "num",
                    "10": "size"
                },
                "DAT_00000080": {
                    "1": "counter"
                },
                "DAT_00000084": {
                    "1": "value"
                },
                "param_4": {
                    "1": "more_data"
                },
                "FUN_00081f00": {
                    "1": "initialize_memory"
                },
                "param_1[0x80]": {
                    "1": "buffer[128]"
                },
                "param_1[0x84]": {
                    "1": "buffer[132]"
                },
                "PTR_": {
                    "1": "pointer_"
                },
                "DAT_": {
                    "1": "data_"
                },
                "memset": {
                    "1": "clear_buffer"
                },
                "undefined4": {
                    "1": "unsigned_int"
                },
                "*(unsignedInt *)(buffer + 0x80)": {
                    "1": "buffer_start"
                },
                "*(unsignedInt *)(buffer + 0x84)": {
                    "1": "buffer_end"
                },
                "PTR_FUN_00081f00": {
                    "1": "subfunction_initialize"
                },
                "PTR_FUN_00081f00_param_1": {
                    "1": "ptr_buffer"
                },
                "PTR_FUN_00081f00_param_2": {
                    "1": "ptr_value"
                },
                "PTR_FUN_00081f00_param_3": {
                    "1": "ptr_length"
                },
                "undefined4 *param_1": {
                    "1": "buffer_ptr"
                },
                "undefined param_2": {
                    "1": "dummy"
                },
                "uint param_3": {
                    "1": "length"
                },
                "*(undefined4 *)(param_1 + 0x80)": {
                    "1": "buffer_end",
                    "2": "set_initial_value1"
                },
                "*(undefined4 *)(param_1 + 0x84)": {
                    "1": "buffer_ptr->value2",
                    "2": "set_initial_value2"
                },
                "PTR_00081f00": {
                    "1": "sub_function_pointer"
                },
                "PTR_000811b4": {
                    "1": "size_of_memory"
                },
                "param_1 + 0x80": {
                    "1": "starting_address"
                },
                "param_1 + 0x84": {
                    "1": "ending_address"
                },
                "PTR_XXXX": {
                    "1": "unchanged"
                },
                "<original_variable_name_1>": {
                    "1": "length"
                },
                "<original_variable_name_2>": {
                    "1": "first_value"
                },
                "<original_variable_name_n>": {
                    "1": "second_value"
                },
                "DAT_000811c0": {
                    "1": "buffer_end_address"
                },
                "ptr_PARAM_1": {
                    "1": "buffer_address"
                },
                "<original_variable_name>": {
                    "1": "<new_variable_name>"
                },
                "<param_2>": {
                    "1": "<new_parameter_name_2>"
                },
                "<param_3>": {
                    "1": "<new_parameter_name_3>"
                },
                "<undefined4>": {
                    "1": "<new_undefined4>"
                },
                "<undefined>": {
                    "1": "<new_undefined>"
                },
                "<uint>": {
                    "1": "<new_uint>"
                },
                "<undefined4 *param_1>": {
                    "1": "<new_param_1>"
                },
                "param_5": {
                    "1": "more_size"
                },
                "localVariable_1": {
                    "1": "temp_pointer"
                },
                "localVariable_2": {
                    "1": "temp_flag"
                },
                "localVariable_3": {
                    "1": "temp_num"
                }
            }
        },
        "FUN_000811ca": {
            "entrypoint": "0x000811ca",
            "current_name": "update_buffer_000811ca",
            "code": "\nvoid update_buffer_000811ca(int base_address,undefined new_value)\n\n{\n  uint updated_index;\n  \n  updated_index = *(int *)(base_address + 0x80) + 1U & 0x7f;\n  if (updated_index != *(uint *)(base_address + 0x84)) {\n    *(undefined *)(base_address + *(int *)(base_address + 0x80)) = new_value;\n    *(uint *)(base_address + 0x80) = updated_index;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000811ca": "update_buffer_000811ca",
                "param_1": "base_address",
                "param_2": "new_value",
                "uVar1": "updated_index"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000811ca": {
                    "1": "update_and_store_param",
                    "8": "update_buffer",
                    "4": "update_value",
                    "2": "update_data"
                },
                "param_1": {
                    "2": "data",
                    "1": "input_pointer",
                    "3": "buffer_address",
                    "8": "buffer"
                },
                "param_2": {
                    "3": "new_data",
                    "18": "new_value",
                    "1": "byte_to_store",
                    "6": "value"
                },
                "uVar1": {
                    "1": "updated_position",
                    "14": "updated_index",
                    "5": "next_index",
                    "8": "new_index",
                    "2": "current_index"
                }
            }
        },
        "FUN_000811e8": {
            "entrypoint": "0x000811e8",
            "current_name": "wait_for_condition_000811e8",
            "code": "\nint wait_for_condition_000811e8(int *parameters)\n\n{\n  int current_time;\n  \n  current_time = get_current_time();\n  start_time = current_time;\n  do {\n    current_time = (**(function_pointer **)(*parameters + 0xc))(parameters);\n    if (-1 < current_time) {\n      return current_time;\n    }\n    current_time = get_current_time();\n  } while ((uint)(current_time - start_time) < (uint)parameters[2]);\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_000811e8": "wait_for_condition_000811e8",
                "param_1": "parameters",
                "iVar1": "current_time",
                "millis": "get_current_time",
                "millis()": "get_current_time()",
                "param_1[3]": "start_time",
                "code": "function_pointer"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "FUN_00080f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000811e8": {
                    "3": "wait_for_timeout",
                    "1": "perform_operation",
                    "2": "wait_for_completion",
                    "10": "wait_for_condition"
                },
                "param_1": {
                    "1": "operation_params",
                    "2": "function_params",
                    "3": "condition",
                    "4": "condition_params",
                    "5": "parameters"
                },
                "iVar1": {
                    "24": "current_time",
                    "6": "current_millis",
                    "1": "result"
                },
                "*param_1": {
                    "1": "config_params_ptr"
                },
                "millis": {
                    "1": "get_millis",
                    "5": "get_current_time"
                },
                "(*param_1 + 0xc)": {
                    "1": "action_func",
                    "2": "function_pointer"
                },
                "-1": {
                    "1": "error_code"
                },
                "millis()": {
                    "1": "get_current_time()"
                },
                "param_1[3]": {
                    "1": "start_time"
                },
                "**(code **)(*param_1 + 0xc)": {
                    "1": "function_ptr"
                },
                "code": {
                    "1": "function_pointer"
                }
            }
        },
        "FUN_00081214": {
            "entrypoint": "0x00081214",
            "current_name": "read_and_concatenate_00081214",
            "code": "\nvoid read_and_concatenate_00081214(undefined4 output_buffer,undefined4 input_stream,uint end_marker)\n\n{\n  uint input_byte;\n  \n  String(output_buffer,&DAT_00085637);\n  while ((input_byte = read_byte_with_timeout(input_stream), -1 < (int)input_byte && (input_byte != end_marker))) {\n    append_to_buffer(output_buffer,input_byte & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081214": "read_and_concatenate_00081214",
                "param_1": "output_buffer",
                "param_2": "input_stream",
                "param_3": "end_marker",
                "uVar1": "input_byte",
                "timedRead": "read_byte_with_timeout",
                "concat": "append_to_buffer"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000814f6",
                "FUN_000811e8",
                "FUN_0008159e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081214": {
                    "2": "read_and_concat_bytes",
                    "1": "read_data_from_input",
                    "5": "read_and_concat",
                    "6": "read_and_concatenate_data",
                    "10": "read_and_concatenate"
                },
                "param_1": {
                    "1": "byte_array",
                    "4": "buffer",
                    "7": "output_string",
                    "15": "output_buffer"
                },
                "param_2": {
                    "2": "input_source",
                    "1": "string2",
                    "7": "input_stream",
                    "4": "input_handle",
                    "3": "input_data"
                },
                "param_3": {
                    "1": "arg2",
                    "15": "end_marker",
                    "3": "delimiter"
                },
                "uVar1": {
                    "2": "input_value",
                    "7": "input_byte",
                    "6": "read_value",
                    "1": "input_data",
                    "3": "read_byte"
                },
                "timedRead": {
                    "1": "read_byte_with_timeout"
                },
                "concat": {
                    "1": "append_to_buffer"
                },
                "FUN_000814f6": {
                    "3": "get_string",
                    "1": "find_end_marker_in_buffer"
                },
                "FUN_000811e8": {
                    "1": "is_eof"
                },
                "FUN_0008159e": {
                    "1": "print_error",
                    "2": "concat_strings"
                },
                "*param_1": {
                    "1": "integer_value"
                }
            }
        },
        "FUN_00081248": {
            "entrypoint": "0x00081248",
            "current_name": "calculate_difference_00081248",
            "code": "\nuint calculate_difference_00081248(int input_value)\n\n{\n  return *(int *)(*(int *)(input_value + 0x10) + 0x80) - *(int *)(*(int *)(input_value + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_00081248": "calculate_difference_00081248",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_00080970",
                "FUN_00080250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081248": {
                    "1": "calculate_result",
                    "2": "calculate_difference_and_mask",
                    "27": "calculate_difference"
                },
                "param_1": {
                    "6": "input",
                    "22": "input_value",
                    "1": "input_param"
                },
                "*(int *)(param_1 + 0x10)": {
                    "1": "base_addr",
                    "2": "ptr_to_data",
                    "3": "ptr_offset"
                },
                "*(int *)(data_ptr + 0x80)": {
                    "1": "first_value"
                },
                "*(int *)(data_ptr + 0x84)": {
                    "1": "second_value"
                },
                "param_1 + 0x10": {
                    "1": "base_address"
                },
                "*(int *)(param_1 + 0x10) + 0x80": {
                    "1": "first_address",
                    "3": "first_value_address"
                },
                "*(int *)(param_1 + 0x10) + 0x84": {
                    "1": "ptr_to_data_plus_offset2",
                    "3": "second_value_address"
                },
                "*(int *)(*(int *)(param_1 + 0x10) + 0x80)": {
                    "1": "source_value"
                },
                "*(int *)(*(int *)(param_1 + 0x10) + 0x84)": {
                    "1": "data_value2"
                },
                "0x10": {
                    "5": "offset",
                    "1": "base_address"
                },
                "0x80": {
                    "2": "first_value_offset",
                    "3": "first_offset",
                    "1": "offset1"
                },
                "0x84": {
                    "3": "second_offset",
                    "2": "second_value_offset",
                    "1": "offset_2"
                },
                "var_1": {
                    "1": "address1"
                },
                "var_2": {
                    "1": "address2"
                },
                "* (int *) (param_1 + 0x10)": {
                    "1": "pointer_to_address"
                },
                "* (int *) (param_1 + 0x10) + 0x80": {
                    "1": "address_offset_1"
                },
                "* (int *) (param_1 + 0x10) + 0x84": {
                    "1": "address_offset_2"
                },
                "*(int *) (address_offset_1)": {
                    "1": "value_1"
                },
                "*(int *) (address_offset_2)": {
                    "1": "value_2"
                },
                "*(*(param_1 + 0x10) + 0x80)": {
                    "1": "first_operand"
                },
                "*(*(param_1 + 0x10) + 0x84)": {
                    "1": "second_operand"
                },
                "& 0x7f": {
                    "1": "bitwise_and_mask"
                },
                "0x7f": {
                    "1": "bitwise_mask"
                },
                "*(int *)(ptr_x + 0x80)": {
                    "1": "a"
                },
                "*(int *)(ptr_x + 0x84)": {
                    "1": "b"
                },
                "*(int *)(ptrParamPlus10 + 0x80)": {
                    "1": "value1"
                },
                "*(int *)(ptrParamPlus10 + 0x84)": {
                    "1": "value2"
                },
                "*(int *)(*(int *)(param_1 + 0x10) + 0x80) - *(int *)(*(int *)(param_1 + 0x10) + 0x84)": {
                    "1": "difference"
                },
                "*(int *)(pointer1 + 0x80)": {
                    "1": "value1"
                },
                "*(int *)(pointer1 + 0x84)": {
                    "1": "value2"
                },
                "*(int *)(ptr_offset + 0x80)": {
                    "1": "value1"
                },
                "*(int *)(ptr_offset + 0x84)": {
                    "1": "value2"
                },
                "output": {
                    "1": "difference"
                },
                "*(int *)(address + 0x80)": {
                    "1": "num1"
                },
                "*(int *)(address + 0x84)": {
                    "1": "num2"
                }
            }
        },
        "FUN_00081276": {
            "entrypoint": "0x00081276",
            "current_name": "extract_byte_from_buffer_00081276",
            "code": "\nuint extract_byte_from_buffer_00081276(int buffer)\n\n{\n  byte extracted_byte;\n  int buffer_ptr;\n  \n  buffer_ptr = *(int *)(buffer + 0x10);\n  if (*(int *)(buffer_ptr + 0x80) != *(int *)(buffer_ptr + 0x84)) {\n    extracted_byte = *(byte *)(buffer_ptr + *(int *)(buffer_ptr + 0x84));\n    *(uint *)(buffer_ptr + 0x84) = *(int *)(buffer_ptr + 0x84) + 1U & 0x7f;\n    result (uint)extracted_byte;\n  }\n  result 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081276": "extract_byte_from_buffer_00081276",
                "param_1": "buffer",
                "bVar1": "extracted_byte",
                "iVar2": "buffer_ptr",
                "return": "result"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081276": {
                    "1": "decode_byte",
                    "12": "extract_byte_from_buffer",
                    "5": "get_next_byte",
                    "2": "get_value_from_buffer"
                },
                "param_1": {
                    "2": "memory_address",
                    "3": "buffer_ptr",
                    "1": "data_address",
                    "8": "buffer_address",
                    "9": "buffer"
                },
                "bVar1": {
                    "7": "next_byte",
                    "1": "result",
                    "15": "extracted_byte",
                    "2": "value",
                    "5": "byte_value"
                },
                "iVar2": {
                    "2": "buffer_offset",
                    "1": "data_offset",
                    "5": "buffer_ptr",
                    "3": "buffer_pointer",
                    "4": "buffer"
                },
                "*(int *)(param_1 + 0x10)": {
                    "1": "buffer"
                },
                "*(int *)(iVar2 + 0x80)": {
                    "1": "read_index"
                },
                "*(int *)(iVar2 + 0x84)": {
                    "1": "write_ptr"
                },
                "*(byte *)(iVar2 + *(int *)(iVar2 + 0x84))": {
                    "1": "byte_to_extract"
                },
                "*(uint *)(iVar2 + 0x84)": {
                    "1": "updated_current_position"
                },
                "return": {
                    "1": "result"
                }
            }
        },
        "FUN_000812b8": {
            "entrypoint": "0x000812b8",
            "current_name": "update_data_000812b8",
            "code": "\nundefined4 update_data_000812b8(int data_offset,undefined4 new_value)\n\n{\n  int data_ptr;\n  uint updated_value;\n  \n  data_ptr = *(int *)(data_offset + 0x14);\n  if ((*(int *)(*(int *)(data_offset + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(data_ptr + 0x84) == *(int *)(data_ptr + 0x80))) {\n    *(undefined4 *)(*(int *)(data_offset + 0x18) + 0x1c) = new_value;\n  }\n  else {\n    updated_value = *(int *)(data_ptr + 0x80) + 1U & 0x8000007f;\n    if ((int)updated_value < 0) {\n      updated_value = (updated_value - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(data_ptr + 0x84) == updated_value);\n    *(char *)(data_ptr + *(int *)(data_ptr + 0x80)) = (char)new_value;\n    *(uint *)(*(int *)(data_offset + 0x14) + 0x80) = updated_value;\n    *(undefined4 *)(*(int *)(data_offset + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000812b8": "update_data_000812b8",
                "param_1": "data_offset",
                "param_2": "new_value",
                "iVar1": "data_ptr",
                "uVar2": "updated_value"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000812b8": {
                    "1": "write_data_to_memory",
                    "2": "update_value_if_needed",
                    "18": "update_data"
                },
                "param_1": {
                    "2": "data_address",
                    "3": "memory_address",
                    "1": "input_param",
                    "5": "data_offset"
                },
                "param_2": {
                    "1": "parameter_value",
                    "23": "new_value",
                    "3": "value",
                    "2": "new_data"
                },
                "iVar1": {
                    "1": "ptr",
                    "2": "data_offset",
                    "4": "ptr1",
                    "3": "ptr_data"
                },
                "uVar2": {
                    "1": "calculation_result",
                    "2": "updated_index",
                    "10": "updated_value",
                    "3": "next_index",
                    "5": "new_index"
                }
            }
        },
        "FUN_00081348": {
            "entrypoint": "0x00081348",
            "current_name": "initialize_parameters_00081348",
            "code": "\nvoid initialize_parameters_00081348(undefined4 *parameters,undefined4 value2,undefined value3,undefined4 value4,\n                 undefined4 value5,undefined4 value6)\n\n{\n  param_array[1] = 0;\n  param_array[2] = 1000;\n  param_array[6] = value2;\n  *parameters = &PTR_write_1_00085650;\n  *(undefined *)(parameters + 7) = value3;\n  param_array[4] = value5;\n  param_array[8] = value4;\n  param_array[5] = value6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081348": "initialize_parameters_00081348",
                "param_1": "parameters",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "param_5": "value5",
                "param_6": "value6",
                "param_1[1]": "param_array[1]",
                "param_1[2]": "param_array[2]",
                "param_1[4]": "param_array[4]",
                "param_1[5]": "param_array[5]",
                "param_1[6]": "param_array[6]",
                "param_1[8]": "param_array[8]"
            },
            "calling": [
                "FUN_00081438",
                "FUN_0008089c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081348": {
                    "10": "initialize_params",
                    "1": "initialize_function",
                    "15": "initialize_parameters",
                    "2": "initialize_data"
                },
                "param_1": {
                    "5": "param_array",
                    "2": "output",
                    "1": "write_params",
                    "8": "parameters"
                },
                "param_2": {
                    "2": "param2_value",
                    "1": "param_2_value",
                    "3": "input_value",
                    "8": "value1",
                    "9": "value2"
                },
                "param_3": {
                    "7": "flag",
                    "1": "third_param",
                    "2": "param3_value",
                    "9": "value3",
                    "6": "value2"
                },
                "param_4": {
                    "3": "param4_value",
                    "1": "param",
                    "6": "value3",
                    "2": "value2",
                    "9": "value4"
                },
                "param_5": {
                    "3": "param5_value",
                    "1": "input_value3",
                    "9": "value5",
                    "2": "value2",
                    "6": "value4"
                },
                "param_6": {
                    "6": "value5",
                    "1": "param_value6",
                    "3": "param6_value",
                    "2": "value4",
                    "9": "value6"
                },
                "param_1[1]": {
                    "1": "params[1]"
                },
                "param_1[2]": {
                    "1": "timeout"
                },
                "param_1[4]": {
                    "1": "param_array[4]"
                },
                "param_1[5]": {
                    "1": "option"
                },
                "param_1[6]": {
                    "1": "params[6]"
                },
                "param_1[7]": {
                    "1": "params[7]"
                },
                "param_1[8]": {
                    "1": "params[8]"
                },
                "*param_1": {
                    "1": "write_func_ptr"
                },
                "*(undefined *)(param_1 + 7)": {
                    "1": "write_type"
                },
                "settings[1]": {
                    "1": "flag"
                },
                "settings[2]": {
                    "1": "timeout"
                },
                "settings[6]": {
                    "1": "param2"
                },
                "settings[4]": {
                    "1": "param5"
                },
                "settings[8]": {
                    "1": "param4"
                },
                "settings[5]": {
                    "1": "param6"
                },
                "data[1]": {
                    "1": "initialized_value1"
                },
                "data[2]": {
                    "1": "initialized_value2"
                },
                "data[4]": {
                    "1": "initialized_value3"
                },
                "data[5]": {
                    "1": "initialized_value4"
                },
                "data[6]": {
                    "1": "value1"
                },
                "data[8]": {
                    "1": "value3"
                },
                "data + 7": {
                    "1": "initialized_value2_ptr"
                },
                "data": {
                    "1": "write_data"
                },
                "value1": {
                    "1": "0"
                },
                "value2": {
                    "1": "1000"
                }
            }
        },
        "FUN_000813dc": {
            "entrypoint": "0x000813dc",
            "current_name": "initialize_peripheral_000813dc",
            "code": "\nvoid initialize_peripheral_000813dc(int param1,uint param2)\n\n{\n  int temp_var;\n  undefined4 *pointer_var;\n  \n  enable_peripheral_clock(*(undefined4 *)(param1 + 0x20));\n  pointer_var = *(undefined4 **)(param1 + 0x18);\n  pointer_var[0x48] = 0x202;\n  *pointer_var = 0xac;\n  pointer_var[1] = 0x800;\n  pointer_var[8] = relocation_array[6].relative_offset / param2 >> 4;\n  pointer_var[3] = 0xffffffff;\n  pointer_var[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(param1 + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(param1 + 0x1c) & 0x1f);\n  temp_var = *(int *)(param1 + 0x10);\n  *(undefined4 *)(temp_var + 0x84) = 0;\n  *(undefined4 *)(temp_var + 0x80) = 0;\n  temp_var = *(int *)(param1 + 0x14);\n  *(undefined4 *)(temp_var + 0x84) = 0;\n  *(undefined4 *)(temp_var + 0x80) = 0;\n  *pointer_var = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813dc": "initialize_peripheral_000813dc",
                "param_1": "param1",
                "param_2": "param2",
                "pmc_enable_periph_clk": "enable_peripheral_clock",
                "puVar2": "pointer_var",
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "iVar1": "temp_var",
                "puVar2[0x48]": "pointer_var[0x48]",
                "puVar2[1]": "pointer_var[1]",
                "puVar2[8]": "pointer_var[8]",
                "puVar2[3]": "pointer_var[3]",
                "puVar2[2]": "pointer_var[2]",
                "r_offset": "relative_offset"
            },
            "calling": [
                "FUN_000801e0"
            ],
            "called": [
                "FUN_00080aa8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000813dc": {
                    "21": "initialize_peripheral",
                    "1": "configure_peripheral",
                    "2": "init_peripheral",
                    "4": "initialize_periph"
                },
                "param_1": {
                    "3": "device_address",
                    "1": "param_addr",
                    "2": "param",
                    "4": "base_address",
                    "10": "param1",
                    "6": "peripheral_address"
                },
                "param_2": {
                    "1": "divide_factor",
                    "3": "param_value",
                    "11": "param2",
                    "5": "param_divisor",
                    "6": "divisor",
                    "2": "offset"
                },
                "pmc_enable_periph_clk": {
                    "1": "enable_clock",
                    "3": "enable_peripheral_clock"
                },
                "puVar2": {
                    "1": "ptr_device_config",
                    "2": "variable2",
                    "3": "register_pointer",
                    "7": "pointer_var"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "elf_array",
                    "2": "elf_relocation_array",
                    "3": "elf_rel_array"
                },
                "iVar1": {
                    "1": "internal_var1",
                    "4": "variable1",
                    "6": "temp_var",
                    "2": "temp_variable"
                },
                "param_1+0x20": {
                    "1": "param1_offset"
                },
                "param_1+0x18": {
                    "1": "param1_offset2"
                },
                "puVar2[0x48]": {
                    "1": "register_value1"
                },
                "puVar2[0]": {
                    "1": "pointer_var[0]"
                },
                "puVar2[1]": {
                    "1": "pointer_var[1]"
                },
                "puVar2[8]": {
                    "1": "pointer_var[8]"
                },
                "puVar2[3]": {
                    "1": "register_value5"
                },
                "puVar2[2]": {
                    "1": "register_value6"
                },
                "*puVar2": {
                    "1": "pointer_var[0]"
                },
                "0x50": {
                    "1": "0x50"
                },
                "<original_variable_name>": {
                    "1": "<new_variable_name>"
                },
                "*(undefined4 *)(param_1 + 0x20)": {
                    "1": "peripheral_clk_address"
                },
                "*(undefined4 **)(param_1 + 0x18)": {
                    "1": "register_array"
                },
                "*(byte *)(param_1 + 0x1c)": {
                    "1": "byte_value"
                },
                "*(int *)(((uint)(int)(char)*(byte *)(param_1 + 0x1c) >> 5) * 4 + -0x1fff1f00)": {
                    "1": "memory_address"
                },
                "*(int *)(param_1 + 0x10)": {
                    "1": "i_var2"
                },
                "*(undefined4 *)(iVar1 + 0x84)": {
                    "1": "sub_function_result1"
                },
                "*(undefined4 *)(iVar1 + 0x80)": {
                    "1": "sub_function_result2"
                },
                "*(int *)(param_1 + 0x14)": {
                    "1": "i_var3"
                },
                "r_offset": {
                    "1": "offset_value"
                }
            }
        },
        "FUN_00081438": {
            "entrypoint": "0x00081438",
            "current_name": "initialize_uart_00081438",
            "code": "\nundefined4 * initialize_uart_00081438(undefined4 *uart_instance,undefined4 input_value)\n\n{\n  UARTClass();\n  *uart_instance = &PTR_write_1_00085680;\n  uart_instance_baud_rate = input_value;\n  return uart_instance;\n}\n\n",
            "renaming": {
                "FUN_00081438": "initialize_uart_00081438",
                "param_1": "uart_instance",
                "param_2": "input_value",
                "param_1[9]": "uart_instance_baud_rate"
            },
            "calling": [
                "FUN_0008089c"
            ],
            "called": [
                "FUN_00081348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081438": {
                    "1": "configure_uart",
                    "29": "initialize_uart"
                },
                "param_1": {
                    "1": "uart_ptr",
                    "3": "uart_config",
                    "2": "uart",
                    "14": "uart_instance",
                    "6": "output_buffer"
                },
                "param_2": {
                    "4": "param",
                    "1": "input_param",
                    "7": "input_value",
                    "5": "baud_rate"
                },
                "param_3": {
                    "1": "param_3",
                    "3": "unused",
                    "4": "unused_param",
                    "2": "unknown_param"
                },
                "param_4": {
                    "2": "another_param",
                    "1": "unknown_param"
                },
                "PTR_write_1_00085680": {
                    "1": "write_function_ptr",
                    "7": "write_function"
                },
                "*param_1": {
                    "1": "initialized_uart"
                },
                "param_1[9]": {
                    "1": "uart_instance_baud_rate"
                },
                "*param_1[9]": {
                    "1": "baud_rate_ptr"
                },
                "FUN_00081348": {
                    "1": "configure_uart"
                },
                "&PTR_write_1_00085680": {
                    "1": "write_function"
                }
            }
        },
        "FUN_0008145c": {
            "entrypoint": "0x0008145c",
            "current_name": "calculate_interpolation_0008145c",
            "code": "\nint calculate_interpolation_0008145c(int start_value,int input_value_2,int input_value_3,int input_value_4,int input_value_5)\n\n{\n  return (unsigned_integer)((start_value - input_value_2) * (input_value_5 - input_value_4)) / (unsigned_integer)(input_value_3 - input_value_2) + input_value_4;\n}\n\n",
            "renaming": {
                "FUN_0008145c": "calculate_interpolation_0008145c",
                "param_1": "start_value",
                "param_2": "input_value_2",
                "param_3": "input_value_3",
                "param_4": "input_value_4",
                "param_5": "input_value_5",
                "uint": "unsigned_integer"
            },
            "calling": [
                "FUN_000806f8",
                "FUN_00080250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008145c": {
                    "2": "calculate_interpolation_value",
                    "1": "calculate_difference",
                    "3": "calculate_linear_interpolation",
                    "7": "calculate_interpolation",
                    "4": "calculate_result"
                },
                "param_1": {
                    "1": "first_param",
                    "3": "value_1",
                    "4": "value1",
                    "8": "start_value",
                    "2": "first_parameter"
                },
                "param_2": {
                    "1": "start2",
                    "3": "input_value_2",
                    "2": "value_2"
                },
                "param_3": {
                    "1": "reference_value2",
                    "2": "third_parameter",
                    "3": "end_value"
                },
                "param_4": {
                    "1": "subtract_end_point",
                    "3": "start_range",
                    "2": "value4"
                },
                "param_5": {
                    "1": "end_value2",
                    "3": "end_range",
                    "2": "end_result"
                },
                "result": {
                    "1": "output_value"
                },
                "<unnamed_variable_1>": {
                    "1": "difference_1"
                },
                "<unnamed_variable_2>": {
                    "1": "difference_2"
                },
                "param_1 - param_2": {
                    "1": "subtracted_result"
                },
                "param_5 - param_4": {
                    "1": "diff_fifth_fourth_param"
                },
                "param_3 - param_2": {
                    "1": "diff_third_second_param"
                },
                "param_4 + (uint)((param_1 - param_2) * (param_5 - param_4)) / (uint)(param_3 - param_2)": {
                    "1": "param_average"
                },
                "uint": {
                    "2": "unsigned_integer"
                },
                "value1": {
                    "1": "initial_value"
                },
                "value2": {
                    "1": "subtracted_value"
                },
                "value3": {
                    "1": "denominator"
                },
                "value4": {
                    "1": "subtract_end_point"
                },
                "value5": {
                    "1": "subtract_start_point"
                },
                "uint(param_1 - param_2)": {
                    "1": "unsigned_subtracted_result"
                },
                "uint(param_5 - param_4)": {
                    "1": "unsigned_subtract_range"
                },
                "unsigned_subtracted_result / unsigned_subtract_range": {
                    "1": "weighted_average"
                },
                "weighted_average + param_4": {
                    "1": "adjusted_weighted_average"
                },
                "param_n": {
                    "1": "new_parameter_n"
                },
                "param_m": {
                    "1": "new_parameter_m"
                },
                "original_variable_name_1": {
                    "1": "calculated_value"
                },
                "original_variable_name_2": {
                    "1": "interpolation_result"
                },
                "original_variable_name_n": {
                    "1": "new_variable_n"
                },
                "newVariable1": {
                    "1": "difference1"
                },
                "newVariable2": {
                    "1": "difference2"
                },
                "unsigned_integer(difference_a * difference_b)": {
                    "1": "product"
                },
                "product / unsigned_integer(difference_c)": {
                    "1": "result"
                },
                "param_6": {
                    "1": "result"
                }
            }
        },
        "FUN_00081472": {
            "entrypoint": "0x00081472",
            "current_name": "free_memory_00081472",
            "code": "\nvoid * free_memory_00081472(void *memory_block)\n\n{\n  free(*memory_block);\n  return memory_block;\n}\n\n",
            "renaming": {
                "FUN_00081472": "free_memory_00081472",
                "param_1": "memory_block",
                "undefined4": "void"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00081800"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081472": {
                    "24": "free_memory",
                    "5": "free_and_return_pointer",
                    "1": "free_memory_block"
                },
                "param_1": {
                    "1": "input_pointer",
                    "7": "memory_pointer",
                    "3": "pointer",
                    "2": "memory_ptr"
                },
                "FUN_00081800": {
                    "2": "execute_function",
                    "3": "do_something",
                    "5": "release_resource",
                    "1": "release_memory_block"
                },
                "*param_1": {
                    "1": "memory_to_release"
                },
                "undefined4": {
                    "1": "void"
                }
            }
        },
        "FUN_00081480": {
            "entrypoint": "0x00081480",
            "current_name": "reset_param_00081480",
            "code": "\nvoid reset_param_00081480(int *parameters)\n\n{\n  if (*parameters != 0) {\n    release_memory;\n  }\n  *parameters = 0;\n  param[2] = 0;\n  param[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081480": "reset_param_00081480",
                "param_1": "parameters",
                "param_1[1]": "param[1]",
                "param_1[2]": "param[2]",
                "free()": "release_memory"
            },
            "calling": [
                "FUN_000814d0"
            ],
            "called": [
                "FUN_00081800"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081480": {
                    "1": "reset_variable_values",
                    "3": "reset_variables",
                    "7": "reset_parameters",
                    "8": "reset_param"
                },
                "param_1": {
                    "1": "ptr",
                    "2": "pointer",
                    "7": "parameters",
                    "3": "memory_ptr",
                    "6": "param"
                },
                "*param_1": {
                    "1": "param",
                    "2": "value"
                },
                "param_1[1]": {
                    "1": "variables[1]",
                    "2": "param[1]"
                },
                "param_1[2]": {
                    "1": "variables[2]",
                    "2": "parameters[2]"
                },
                "FUN_00081800": {
                    "1": "free_memory",
                    "2": "perform_cleanup"
                },
                "free()": {
                    "1": "release_memory"
                }
            }
        },
        "FUN_00081496": {
            "entrypoint": "0x00081496",
            "current_name": "resize_array_00081496",
            "code": "\nint resize_array_00081496(int *array,int new_size,undefined4 element_size,undefined4 alignment)\n\n{\n  int new_array;\n  \n  new_array = realloc(*array,new_size + 1,element_size,alignment,alignment);\n  if (new_array != 0) {\n    *array = new_array;\n    array[1] = new_size;\n    new_array = 1;\n  }\n  return new_array;\n}\n\n",
            "renaming": {
                "FUN_00081496": "resize_array_00081496",
                "param_1": "array",
                "param_2": "new_size",
                "iVar1": "new_array",
                "param_3": "element_size",
                "param_4": "alignment"
            },
            "calling": [
                "FUN_000814ae"
            ],
            "called": [
                "FUN_00081f9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081496": {
                    "2": "realloc_and_assign",
                    "1": "resize_array_and_assign",
                    "20": "resize_array"
                },
                "param_1": {
                    "14": "array",
                    "5": "array_pointer",
                    "1": "ptr",
                    "2": "memory_pointer",
                    "4": "array_ptr"
                },
                "param_2": {
                    "1": "array_size",
                    "26": "new_size",
                    "3": "size"
                },
                "iVar1": {
                    "1": "allocated_memory_ptr",
                    "4": "new_array_pointer",
                    "10": "new_array",
                    "2": "realloc_result",
                    "3": "resized_array"
                },
                "param_3": {
                    "1": "size_parameter_1",
                    "3": "param3",
                    "7": "element_size",
                    "2": "new_size",
                    "6": "arg3"
                },
                "param_4": {
                    "3": "param4",
                    "1": "reserved_value2",
                    "2": "arg2",
                    "6": "alignment"
                },
                "FUN_00081f9c": {
                    "1": "some_function",
                    "2": "do_something"
                }
            }
        },
        "FUN_000814ae": {
            "entrypoint": "0x000814ae",
            "current_name": "check_and_update_buffer_000814ae",
            "code": "\nundefined4 check_and_update_buffer_000814ae(int *buffer,uint size)\n\n{\n  int result;\n  \n  if ((*buffer == 0) || ((uint)buffer_length < size)) {\n    result = update_buffer(buffer);\n    if (result == 0) {\n      return 0;\n    }\n    if (flag == 0) {\n      *(undefined *)*buffer = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000814ae": "check_and_update_buffer_000814ae",
                "param_1": "buffer",
                "param_2": "size",
                "iVar1": "result",
                "changeBuffer": "update_buffer",
                "param_1[1]": "buffer_length",
                "param_1[2]": "flag"
            },
            "calling": [
                "FUN_000814d0",
                "FUN_00081570"
            ],
            "called": [
                "FUN_00081496"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000814ae": {
                    "1": "check_and_change_buffer",
                    "2": "check_buffer_validity",
                    "18": "check_and_update_buffer"
                },
                "param_1": {
                    "31": "buffer"
                },
                "param_2": {
                    "2": "length",
                    "8": "buffer_size",
                    "1": "target",
                    "13": "size"
                },
                "iVar1": {
                    "1": "result_code",
                    "2": "status",
                    "19": "result"
                },
                "changeBuffer": {
                    "1": "update_buffer"
                },
                "param_1[1]": {
                    "1": "buffer_length"
                },
                "param_1[2]": {
                    "1": "flag"
                },
                "*param_1": {
                    "1": "buffer_data"
                }
            }
        },
        "FUN_000814d0": {
            "entrypoint": "0x000814d0",
            "current_name": "update_data_000814d0",
            "code": "\nundefined4 * update_data_000814d0(undefined4 *data,undefined4 source_string,undefined4 length)\n\n{\n  int reservation_status;\n  \n  reservation_status = check_availability(data,length);\n  if (reservation_status == 0) {\n    clear_buffer(data);\n  }\n  else {\n    data[2] = length;\n    strcpy(*data,source_string);\n  }\n  return data;\n}\n\n",
            "renaming": {
                "FUN_000814d0": "update_data_000814d0",
                "param_1": "data",
                "param_2": "source_string",
                "param_3": "length",
                "iVar1": "reservation_status",
                "reserve": "check_availability",
                "invalidate": "clear_buffer"
            },
            "calling": [
                "FUN_000814f6"
            ],
            "called": [
                "FUN_000814ae",
                "FUN_00081480",
                "FUN_000825cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000814d0": {
                    "1": "initialize_data",
                    "2": "update_buffer",
                    "3": "process_data",
                    "10": "update_data"
                },
                "param_1": {
                    "7": "data",
                    "2": "result_array",
                    "1": "input_data",
                    "6": "data_pointer",
                    "3": "buffer"
                },
                "param_2": {
                    "2": "input_string",
                    "19": "source_string",
                    "1": "string_input",
                    "6": "source"
                },
                "param_3": {
                    "6": "string_length",
                    "2": "source_length",
                    "1": "size_of_string",
                    "7": "size",
                    "8": "length",
                    "3": "new_size"
                },
                "iVar1": {
                    "3": "reserve_result",
                    "1": "availability_check_result",
                    "11": "reservation_status",
                    "6": "result"
                },
                "reserve": {
                    "1": "check_availability"
                },
                "invalidate": {
                    "1": "clear_buffer"
                },
                "FUN_000814ae": {
                    "1": "reserve"
                },
                "FUN_00081480": {
                    "1": "invalidate"
                },
                "FUN_000825cc": {
                    "1": "copy_data"
                }
            }
        },
        "FUN_000814f6": {
            "entrypoint": "0x000814f6",
            "current_name": "initialize_param_000814f6",
            "code": "\nundefined4 * initialize_param_000814f6(undefined4 *param_array,int input_string)\n\n{\n  undefined4 string_length;\n  \n  *param_array = 0;\n  output_array_length = 0;\n  src_string_length = 0;\n  if (input_string != 0) {\n    string_length = strlen(input_string);\n    copy_string(param_array,input_string,string_length);\n  }\n  return param_array;\n}\n\n",
            "renaming": {
                "FUN_000814f6": "initialize_param_000814f6",
                "param_1": "param_array",
                "param_2": "input_string",
                "uVar1": "string_length",
                "param_1[1]": "output_array_length",
                "param_1[2]": "src_string_length",
                "copy": "copy_string"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "FUN_00082688",
                "FUN_000814d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000814f6": {
                    "1": "initialize_and_copy_string",
                    "2": "copy_string",
                    "5": "initialize_param_array",
                    "4": "initialize_buffer"
                },
                "param_1": {
                    "3": "destination",
                    "5": "output_array",
                    "4": "array",
                    "1": "destination_buffer",
                    "7": "param_array",
                    "2": "result_array",
                    "6": "buffer"
                },
                "param_2": {
                    "16": "input_string",
                    "4": "source_string",
                    "3": "source",
                    "2": "string",
                    "1": "input_string_length"
                },
                "uVar1": {
                    "19": "string_length",
                    "2": "str_length",
                    "4": "source_length",
                    "3": "length"
                },
                "param_1[1]": {
                    "1": "output_array_length"
                },
                "param_1[2]": {
                    "1": "src_string_length"
                },
                "copy": {
                    "2": "copy_string"
                }
            }
        },
        "FUN_0008151c": {
            "entrypoint": "0x0008151c",
            "current_name": "update_parameters_0008151c",
            "code": "\nvoid update_parameters_0008151c(int *source_params,int *source)\n\n{\n  if (*source_params != 0) {\n    if ((*source != 0) && (param2_index_2 <= param1_index_1)) {\n      copy_string;\n      value_ptr_1_index_2 = value_ptr_2_index_2;\n      goto end_label;\n    }\n    release_memory;\n  }\n  *source_params = *source;\n  destination_index = source_index;\n  value_ptr_1_index_2 = value_ptr_2_index_2;\n  *source = 0;\n  source_index = 0;\nend_label:\n  value_ptr_2_index_2 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008151c": "update_parameters_0008151c",
                "param_1": "source_params",
                "param_2": "source",
                "strcpy()": "copy_string",
                "free()": "release_memory",
                "(uint)param_2[2]": "param2_index_2",
                "(uint)param_1[1]": "param1_index_1",
                "param_1[2]": "value_ptr_1_index_2",
                "param_2[2]": "value_ptr_2_index_2",
                "strcpy": "copy_string",
                "free": "release_memory",
                "LAB_00081558": "end_label",
                "param_1[1]": "destination_index",
                "param_2[1]": "source_index"
            },
            "calling": [
                "FUN_00081560"
            ],
            "called": [
                "FUN_00081800",
                "FUN_000825cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008151c": {
                    "5": "update_params",
                    "1": "copy_data_and_cleanup",
                    "3": "copy_data",
                    "2": "copy_parameters",
                    "9": "update_parameters"
                },
                "param_1": {
                    "4": "destination",
                    "1": "dest_ptr",
                    "8": "source_params",
                    "2": "source"
                },
                "param_2": {
                    "3": "target_params",
                    "2": "destination_params",
                    "1": "src",
                    "4": "source"
                },
                "strcpy()": {
                    "3": "copy_string",
                    "1": "copy_values"
                },
                "free()": {
                    "2": "free_memory",
                    "3": "release_memory"
                },
                "*param_1": {
                    "1": "value_ptr_1",
                    "2": "source_param"
                },
                "*param_2": {
                    "1": "target"
                },
                "(uint)param_2[2]": {
                    "1": "param2_index_2"
                },
                "(uint)param_1[1]": {
                    "1": "param1_index_1"
                },
                "param_1[2]": {
                    "1": "value_ptr_1_index_2"
                },
                "param_2[2]": {
                    "1": "source_value"
                },
                "*param_1 = *param_2;": {
                    "1": "update_value_ptr_1"
                },
                "param_1[1] = param_2[1];": {
                    "1": "update_value_ptr_1_index_1"
                },
                "param_1[2] = param_2[2];": {
                    "1": "update_value_ptr_1_index_2"
                },
                "*param_2 = 0;": {
                    "1": "clear_value_ptr_2"
                },
                "param_2[1] = 0;": {
                    "1": "clear_value_ptr_2_index_1"
                },
                "param_2[2] = 0;": {
                    "1": "clear_value_ptr_2_index_2"
                },
                "strcpy": {
                    "11": "copy_string"
                },
                "free": {
                    "9": "release_memory",
                    "2": "deallocate_memory"
                },
                "LAB_00081558": {
                    "2": "end_label"
                },
                "FUN_00081800": {
                    "1": "copy_data"
                },
                "FUN_000825cc": {
                    "1": "compare_data"
                },
                "goto LAB_00081558": {
                    "1": "jump_to_cleanup"
                },
                "param_1[1]": {
                    "1": "destination_index"
                },
                "param_2[1]": {
                    "1": "source_index"
                }
            }
        },
        "FUN_00081560": {
            "entrypoint": "0x00081560",
            "current_name": "check_and_move_00081560",
            "code": "\nint check_and_move_00081560(int value1,int value2)\n\n{\n  if (value1 != value2) {\n    execute_move();\n  }\n  return value1;\n}\n\n",
            "renaming": {
                "FUN_00081560": "check_and_move_00081560",
                "param_1": "value1",
                "param_2": "value2",
                "move": "execute_move"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_0008151c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081560": {
                    "1": "check_parameters_and_move",
                    "4": "check_and_move_if_different",
                    "18": "check_and_move"
                },
                "param_1": {
                    "4": "input_1",
                    "2": "input_value",
                    "9": "value_1",
                    "1": "first_param",
                    "13": "value1"
                },
                "param_2": {
                    "1": "second_param",
                    "2": "expected_value",
                    "9": "value_2",
                    "4": "input_2",
                    "13": "value2"
                },
                "FUN_0008151c": {
                    "1": "compare_pointers_and_assign",
                    "2": "update_parameters",
                    "7": "update_values"
                },
                "move": {
                    "1": "execute_move"
                }
            }
        },
        "FUN_00081570": {
            "entrypoint": "0x00081570",
            "current_name": "copy_and_extend_string_00081570",
            "code": "\nundefined4 copy_and_extend_string_00081570(int *array,int source_string,int length)\n\n{\n  int result;\n  int current_length;\n  \n  current_length = array[2];\n  if (source_string == 0) {\n    return 0;\n  }\n  if (length != 0) {\n    result = expand_array(array,current_length + length);\n    if (result == 0) {\n      return 0;\n    }\n    strcpy(*array + array[2],source_string);\n    array[2] = current_length + length;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081570": "copy_and_extend_string_00081570",
                "param_1": "array",
                "param_2": "source_string",
                "param_3": "length",
                "iVar1": "result",
                "iVar2": "current_length",
                "reserve": "expand_array"
            },
            "calling": [
                "FUN_0008159e"
            ],
            "called": [
                "FUN_000814ae",
                "FUN_000825cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081570": {
                    "1": "update_array",
                    "2": "resize_and_copy",
                    "3": "update_string"
                },
                "param_1": {
                    "1": "input_array",
                    "14": "array",
                    "3": "buffer",
                    "5": "string_array"
                },
                "param_2": {
                    "2": "data",
                    "1": "string_to_copy",
                    "16": "source_string",
                    "6": "source"
                },
                "param_3": {
                    "1": "new_size",
                    "2": "string_length",
                    "4": "additional_size",
                    "5": "additional_length",
                    "10": "length"
                },
                "iVar1": {
                    "2": "reserved_memory",
                    "1": "reserving_success",
                    "3": "reservation_result",
                    "5": "reservation_status",
                    "8": "result"
                },
                "iVar2": {
                    "2": "array_length",
                    "1": "array_index",
                    "4": "array_size",
                    "10": "current_length"
                },
                "FUN_000814ae": {
                    "1": "<unchanged>"
                },
                "FUN_000825cc": {
                    "1": "<unchanged>"
                },
                "reserve": {
                    "1": "expand_array"
                }
            }
        },
        "FUN_0008159e": {
            "entrypoint": "0x0008159e",
            "current_name": "copy_and_extend_string_0008159e",
            "code": "\nvoid copy_and_extend_string_0008159e(undefined4 array,undefined4 source_string,undefined4 length)\n\n{\n  undefined4 destination_string;\n  undefined4 source_length;\n  \n  source_length = length;\n  copy_and_extend_string_0008159e_00081570(array,&destination_string,1,0,array);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008159e": "copy_and_extend_string_0008159e",
                "param_1": "array",
                "param_2": "source_string",
                "param_3": "length",
                "local_c": "destination_string",
                "uStack_8": "source_length"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "FUN_00081570"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008159e": {
                    "9": "extend_and_copy_string",
                    "22": "copy_and_extend_string"
                },
                "param_1": {
                    "1": "destination_array",
                    "30": "array"
                },
                "param_2": {
                    "29": "source_string"
                },
                "param_3": {
                    "2": "source_string",
                    "1": "string_length",
                    "28": "length"
                },
                "local_c": {
                    "13": "destination_string",
                    "1": "copy_result",
                    "4": "destination_array",
                    "2": "extended_array"
                },
                "uStack_8": {
                    "2": "source_length",
                    "1": "temp_length"
                }
            }
        },
        "FUN_000815b8": {
            "entrypoint": "0x000815b8",
            "current_name": "compare_bytes_000815b8",
            "code": "\nint compare_bytes_000815b8(byte **string_array,byte *comparison_string)\n\n{\n  uint comparison_result;\n  int return_value;\n  \n  if (string_array[2] == (byte *)0x0) {\n    if (comparison_string == (byte *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    if (comparison_string != (byte *)0x0) {\n      comparison_result = strcmp(*string_array);\n      goto LAB_000815d4;\n    }\n    comparison_string = *string_array;\n  }\n  comparison_result = (uint)*comparison_string;\nLAB_000815d4:\n  return_value = 1 - comparison_result;\n  if (1 < comparison_result) {\n    return_value = 0;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_000815b8": "compare_bytes_000815b8",
                "param_1": "string_array",
                "param_2": "comparison_string",
                "uVar1": "comparison_result",
                "iVar2": "return_value"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00082390"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000815b8": {
                    "3": "compare_strings",
                    "9": "compare_bytes",
                    "1": "validate_input",
                    "4": "compare_and_return_result",
                    "2": "compare_byte_arrays"
                },
                "param_1": {
                    "1": "array1",
                    "3": "byte_array1",
                    "4": "input_strings",
                    "2": "strings",
                    "6": "string_array"
                },
                "param_2": {
                    "1": "target_string",
                    "2": "input_string",
                    "3": "byte_array2",
                    "5": "comparison_string"
                },
                "uVar1": {
                    "1": "string_compare_result",
                    "5": "string_comparison_result",
                    "20": "comparison_result"
                },
                "iVar2": {
                    "12": "return_value",
                    "1": "output_result",
                    "3": "comparison_result",
                    "10": "result"
                },
                "FUN_00082390": {
                    "1": "compare_arrays"
                }
            }
        },
        "FUN_000815de": {
            "entrypoint": "0x000815de",
            "current_name": "parse_integer_000815de",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000827e8) */\n/* WARNING: Removing unreachable block (ram,0x000827a8) */\n/* WARNING: Removing unreachable block (ram,0x000827a0) */\n/* WARNING: Removing unreachable block (ram,0x000827da) */\n/* WARNING: Removing unreachable block (ram,0x000827ec) */\n/* WARNING: Removing unreachable block (ram,0x000827e4) */\n/* WARNING: Removing unreachable block (ram,0x000827a4) */\n/* WARNING: Removing unreachable block (ram,0x0008278a) */\n/* WARNING: Removing unreachable block (ram,0x000827c8) */\n/* WARNING: Removing unreachable block (ram,0x0008278c) */\n\nuint parse_integer_000815de(byte **input)\n\n{\n  byte flag;\n  byte is_negative;\n  uint result;\n  byte *current_byte;\n  uint current_value;\n  byte *next_byte;\n  int temp_value;\n  int is_valid;\n  uint max_value;\n  uint min_value;\n  \n  current_byte = *input;\n  if (*input == (byte *)0x0) {\n    return 0;\n  }\n  do {\n    next_byte = current_byte;\n    current_byte = next_byte + 1;\n    current_value = (uint)*next_byte;\n    flag = *(byte *)(constant1 + current_value + 1);\n    is_negative = flag & 8;\n  } while ((flag & 8) != 0);\n  if (current_value == 0x2d) {\n    current_byte = next_byte + 2;\n    current_value = (uint)next_byte[1];\n    is_negative = 1;\n  }\n  else if (current_value == 0x2b) {\n    current_value = (uint)next_byte[1];\n    current_byte = next_byte + 2;\n  }\n  if (is_negative == 0) {\n    min_value = 0x7fffffff;\n  }\n  else {\n    min_value = 0x80000000;\n  }\n  max_value = min_value / 10;\n  is_valid = 0;\n  result = 0;\n  do {\n    flag = *(byte *)(constant1 + current_value + 1);\n    if ((flag & 4) == 0) {\n      if ((flag & 3) == 0) {\nLAB_0008277e:\n        if (is_valid == -1) {\n          if (is_negative == 0) {\n            result = 0x7fffffff;\n          }\n          else {\n            result = 0x80000000;\n          }\n          *(undefined4 *)constant2 = 0x22;\n        }\n        else if (is_negative != 0) {\n          result = -result;\n        }\n        return result;\n      }\n      if ((flag & 3) == 1) {\n        temp_value = 0x37;\n      }\n      else {\n        temp_value = 0x57;\n      }\n      temp_value = current_value - temp_value;\n    }\n    else {\n      temp_value = current_value - 0x30;\n    }\n    if (9 < temp_value) goto LAB_0008277e;\n    if (is_valid != -1) {\n      if ((max_value <= result && result != max_value) || ((result == max_value && ((int)(min_value % 10) < temp_value))))\n      {\n        is_valid = -1;\n      }\n      else {\n        result = result * 10 + temp_value;\n        is_valid = 1;\n      }\n    }\n    current_value = (uint)*current_byte;\n    current_byte = current_byte + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815de": "parse_integer_000815de",
                "param_1": "input",
                "bVar1": "flag",
                "bVar2": "is_negative",
                "uVar3": "result",
                "pbVar4": "current_byte",
                "uVar5": "current_value",
                "pbVar6": "next_byte",
                "iVar7": "temp_value",
                "iVar8": "is_valid",
                "uVar9": "max_value",
                "uVar10": "min_value",
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "Elf32_Rel_ARRAY_20070000[270].r_info": "constant1",
                "Elf32_Rel_ARRAY_20070000[140].r_offset": "constant2"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000815de": {
                    "13": "parse_integer",
                    "7": "parse_number",
                    "1": "extract_integer_from_bytes",
                    "3": "parse_integer_from_string"
                },
                "param_1": {
                    "8": "input",
                    "4": "byte_array",
                    "1": "input_array",
                    "3": "buffer",
                    "2": "input_data"
                },
                "bVar1": {
                    "5": "byte_value",
                    "1": "flag_byte",
                    "3": "flags",
                    "2": "flag1"
                },
                "bVar2": {
                    "2": "flag2",
                    "1": "negative_sign",
                    "15": "is_negative",
                    "6": "negative_flag"
                },
                "uVar3": {
                    "5": "parsed_integer",
                    "1": "parsed_value",
                    "19": "result"
                },
                "pbVar4": {
                    "1": "current",
                    "3": "current_char",
                    "9": "ptr",
                    "10": "current_byte"
                },
                "uVar5": {
                    "1": "current_char_value",
                    "2": "byte_val",
                    "5": "current_byte",
                    "8": "current_value"
                },
                "pbVar6": {
                    "1": "current",
                    "9": "next_byte",
                    "4": "current_byte",
                    "3": "next_char",
                    "2": "current_byte_ptr"
                },
                "iVar7": {
                    "1": "current_value",
                    "2": "digit",
                    "5": "temp_value",
                    "3": "adjusted_value"
                },
                "iVar8": {
                    "1": "parse_state",
                    "5": "is_valid",
                    "4": "sign_flag",
                    "2": "is_negative"
                },
                "uVar9": {
                    "2": "max_divisor",
                    "1": "division_variable",
                    "13": "max_value"
                },
                "uVar10": {
                    "1": "divisor",
                    "15": "min_value",
                    "2": "min_dividend",
                    "4": "limit"
                },
                "F\nUN_000815de": {
                    "1": "parse_number"
                },
                "*param_1": {
                    "1": "input_array"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "rel_array"
                },
                "Elf32_Rel_ARRAY_20070000[270].r_info": {
                    "1": "constant1"
                },
                "Elf32_Rel_ARRAY_20070000[140].r_offset": {
                    "1": "constant2"
                }
            }
        },
        "FUN_000815e8": {
            "entrypoint": "0x000815e8",
            "current_name": "FUNC_000815e8",
            "code": "\nvoid FUNC_000815e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000815e8": "FUNC_000815e8"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000815ec": {
            "entrypoint": "0x000815ec",
            "current_name": "run_system_000815ec",
            "code": "\nvoid run_system_000815ec(void)\n\n{\n  _watchdogDefaultSetup();\n  initialize_system();\n  initialize_variant();\n  short_delay(1);\n  setup_system();\n  do {\n    run_loop();\n    run_serial_event();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815ec": "run_system_000815ec",
                "initialize_system_00080774": "initialize_system",
                "setup": "setup_system",
                "loop": "run_loop",
                "serialEventRun": "run_serial_event",
                "initVariant": "initialize_variant",
                "delay": "short_delay"
            },
            "calling": [
                "FUN_00080c20"
            ],
            "called": [
                "FUN_00081618",
                "FUN_00080970",
                "FUN_000801e0",
                "FUN_00080f08",
                "FUN_00080250",
                "FUN_000815e8",
                "FUN_00080774"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000815ec": {
                    "8": "run_main_loop",
                    "1": "execute_main_loop",
                    "12": "run_system",
                    "3": "main_loop",
                    "2": "run_application"
                },
                "initialize_system_00080774": {
                    "22": "initialize_system",
                    "1": "setup_watchdog",
                    "8": "setup_system"
                },
                "initialize_data_00081618": {
                    "30": "initialize_data"
                },
                "process_serial_events_00080970": {
                    "30": "process_serial_events"
                },
                "FUN_000801e0": {
                    "3": "do_something",
                    "1": "initialize_components",
                    "2": "initialize_variant",
                    "4": "execute_function"
                },
                "FUNC_00080f08": {
                    "1": "run_loop",
                    "5": "perform_task",
                    "3": "execute_function",
                    "2": "execute_loop"
                },
                "FUN_00080250": {
                    "2": "perform_operation",
                    "1": "perform_initialization",
                    "4": "initialize"
                },
                "FUNC_000815e8": {
                    "1": "serial_event_run",
                    "2": "finalize_execution",
                    "3": "watchdog_setup",
                    "9": "cleanup"
                },
                "setup": {
                    "1": "system_setup",
                    "3": "setup_system",
                    "2": "setup"
                },
                "loop": {
                    "1": "perform_loop",
                    "3": "run_loop"
                },
                "serialEventRun": {
                    "3": "run_serial_event",
                    "1": "run_serial_events",
                    "2": "process_serial_events"
                },
                "initVariant": {
                    "1": "initialize_variant"
                },
                "delay": {
                    "2": "short_delay"
                }
            }
        },
        "FUN_00081618": {
            "entrypoint": "0x00081618",
            "current_name": "initialize_data_00081618",
            "code": "\n\n\nvoid initialize_data_00081618(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081618": "initialize_data_00081618"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081618": {
                    "1": "set_default_value",
                    "11": "initialize_memory",
                    "12": "initialize_data",
                    "2": "set_initial_value"
                },
                "_DAT_400e1a54": {
                    "1": "memory_value",
                    "4": "data_value",
                    "2": "data_flag",
                    "7": "memory_address"
                },
                "": {
                    "3": ""
                },
                "_000e1a54": {
                    "1": "memory_address"
                }
            }
        },
        "FUN_00081624": {
            "entrypoint": "0x00081624",
            "current_name": "calculate_pulse_duration_00081624",
            "code": "\nint calculate_pulse_duration_00081624(int index,int flag,int multiplier,undefined4 param)\n\n{\n  int pulse_count;\n  undefined4 pulse_value;\n  \n  pulse_value = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n  if (flag == 0) {\n    pulse_value = 0;\n  }\n  pulse_count = calculate_pulse_asm(*(int *)(&DAT_00084b44 + index * 0x1c) + 0x3c,\n                        *(undefined4 *)(&DAT_00084b48 + index * 0x1c),pulse_value,\n                        ((rel_array[6].r_offset / 1000000) * multiplier) / 0x12,param)\n  ;\n  if (pulse_count != 0) {\n    pulse_count = (int)((ulonglong)(pulse_count * 18000 + 16000) /\n                 ((ulonglong)rel_array[6].r_offset / 1000));\n  }\n  return pulse_count;\n}\n\n",
            "renaming": {
                "FUN_00081624": "calculate_pulse_duration_00081624",
                "param_1": "index",
                "param_2": "flag",
                "param_3": "multiplier",
                "param_4": "param",
                "iVar1": "pulse_count",
                "uVar2": "pulse_value",
                "countPulseASM": "calculate_pulse_asm",
                "Elf32_Rel_ARRAY_20070000": "rel_array"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00081684"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081624": {
                    "2": "calculate_pulse_time",
                    "1": "get_pulse_count",
                    "11": "calculate_pulse_count",
                    "12": "calculate_pulse_duration",
                    "3": "calculate_pulse"
                },
                "param_1": {
                    "1": "sensor_index",
                    "2": "pulse_index",
                    "26": "index"
                },
                "param_2": {
                    "18": "flag",
                    "1": "size",
                    "9": "is_zero",
                    "2": "condition"
                },
                "param_3": {
                    "1": "pulse_multiplier",
                    "28": "multiplier"
                },
                "param_4": {
                    "1": "constant",
                    "7": "param_4",
                    "2": "offset",
                    "20": "param"
                },
                "iVar1": {
                    "6": "pulse_duration",
                    "1": "pulse_rate",
                    "16": "pulse_count",
                    "8": "result"
                },
                "uVar2": {
                    "1": "pulse_length",
                    "3": "pulse_duration",
                    "2": "initial_value",
                    "5": "offset",
                    "6": "pulse_value"
                },
                "countPulseASM": {
                    "3": "count_pulse",
                    "2": "count_pulse_duration",
                    "1": "count_pulse_assembly",
                    "4": "calculate_pulse_asm"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "2": "pulse_array",
                    "1": "array_offset",
                    "3": "rel_array"
                },
                "FUN_00081684": {
                    "1": "count_pulse_asm"
                },
                "*(int *)(&DAT_00084b44 + param_1 * 0x1c) + 0x3c": {
                    "1": "pulse_start_addr"
                },
                "((Elf32_Rel_ARRAY_20070000[6].r_offset / 1000000) * param_3) / 0x12": {
                    "1": "timing_ratio"
                },
                "(int)((ulonglong)(iVar1 * 18000 + 16000) / ((ulonglong)Elf32_Rel_ARRAY_20070000[6].r_offset / 1000))": {
                    "1": "adjusted_pulse_duration"
                },
                "DAT_00084b44": {
                    "2": "base_address"
                },
                "DAT_00084b48": {
                    "1": "value_address"
                }
            }
        },
        "FUN_00081684": {
            "entrypoint": "0x00081684",
            "current_name": "check_and_return_index_00081684",
            "code": "\nint check_and_return_index_00081684(uint *array,uint mask,uint expected_value,int max_iterations)\n\n{\n  int index;\n  \n  do {\n    if ((*array & mask) != expected_value) {\n      do {\n        if ((*array & mask) == expected_value) {\n          index = 0;\n          do {\n            if ((*array & mask) != expected_value) {\n              result index;\n            }\n            index = index + 1;\n          } while (max_iterations != index);\n          result 0;\n        }\n        max_iterations = max_iterations + -1;\n      } while (max_iterations != 0);\n      result 0;\n    }\n    max_iterations = max_iterations + -1;\n  } while (max_iterations != 0);\n  result 0;\n}\n\n",
            "renaming": {
                "FUN_00081684": "check_and_return_index_00081684",
                "param_1": "array",
                "param_2": "mask",
                "param_3": "expected_value",
                "param_4": "max_iterations",
                "iVar1": "index",
                "return": "result"
            },
            "calling": [
                "FUN_00081624"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081684": {
                    "1": "find_first_occurrence",
                    "2": "check_and_return_index"
                },
                "param_1": {
                    "1": "bit_array",
                    "3": "data",
                    "6": "data_array",
                    "10": "array",
                    "2": "data_ptr",
                    "4": "input_array"
                },
                "param_2": {
                    "1": "pattern_mask",
                    "18": "mask",
                    "10": "bit_mask",
                    "2": "bitmask"
                },
                "param_3": {
                    "1": "expected_pattern",
                    "2": "comparison_value",
                    "12": "expected_value",
                    "4": "target"
                },
                "param_4": {
                    "5": "num_iterations",
                    "1": "count_limit",
                    "3": "length",
                    "2": "iteration_count",
                    "8": "max_iterations"
                },
                "iVar1": {
                    "1": "bit_count",
                    "7": "index",
                    "2": "iteration_count",
                    "5": "result"
                },
                "return": {
                    "1": "result"
                },
                "*param_1": {
                    "1": "data_value"
                }
            }
        },
        "FUN_000816d8": {
            "entrypoint": "0x000816d8",
            "current_name": "get_data_value_000816d8",
            "code": "\nundefined4 get_data_value_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "renaming": {
                "FUN_000816d8": "get_data_value_000816d8"
            },
            "calling": [
                "FUN_00080f04"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000816d8": {
                    "1": "get_constant_value",
                    "3": "get_global_value",
                    "5": "get_global_variable_value",
                    "7": "get_data_value",
                    "4": "get_dat_value"
                },
                "DAT_2007120c": {
                    "4": "global_variable_value",
                    "1": "data_value",
                    "3": "global_variable",
                    "2": "global_value"
                }
            }
        },
        "FUN_000816ec": {
            "entrypoint": "0x000816ec",
            "current_name": "update_data_000816ec",
            "code": "\nvoid update_data_000816ec(dword new_value1,dword new_value2,dword new_value3)\n\n{\n  dword *relocation_entry;\n  uint index;\n  uint bit_mask;\n  code *unrecovered_jump_table;\n  \n  if (relocations[48].r_offset == 0) {\n    relocations[48].r_offset = 0x20070184;\n  }\n  index = *(uint *)(relocations[48].r_offset + 4);\n  relocation_entry = (dword *)relocations[48].r_offset;\n  if (0x1f < (int)index) {\n    relocation_entry = (dword *)malloc(400);\n    if (relocation_entry == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*unrecovered_jump_table)(0xffffffff);\n      return;\n    }\n    *relocation_entry = relocations[48].r_offset;\n    relocation_entry[1] = 0;\n    index = 0;\n    relocations[48].r_offset = (dword)relocation_entry;\n    relocation_entry[0x62] = 0;\n    relocation_entry[99] = 0;\n  }\n  bit_mask = 1 << (index & 0xff);\n  relocation_entry[index + 0x22] = new_value1;\n  relocation_entry[0x62] = relocation_entry[0x62] | bit_mask;\n  relocation_entry[index + 0x42] = new_value3;\n  relocation_entry[99] = bit_mask | relocation_entry[99];\n  relocation_entry[1] = index + 1;\n  relocation_entry[index + 2] = new_value2;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*unrecovered_jump_table)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816ec": "update_data_000816ec",
                "param_1": "new_value1",
                "param_2": "new_value2",
                "param_3": "new_value3",
                "UNRECOVERED_JUMPTABLE_00": "unrecovered_jump_table",
                "Elf32_Rel_ARRAY_20070000": "relocations",
                "pdVar1": "relocation_entry",
                "uVar2": "index",
                "uVar3": "bit_mask"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000816ec": {
                    "1": "update_memory_values",
                    "2": "update_relocation_table",
                    "3": "update_params_and_call",
                    "5": "update_data"
                },
                "param_1": {
                    "3": "new_value",
                    "1": "new_data",
                    "11": "new_value1",
                    "2": "old_value"
                },
                "param_2": {
                    "4": "new_value",
                    "3": "value",
                    "1": "value2",
                    "11": "new_value2",
                    "2": "data_ptr"
                },
                "param_3": {
                    "3": "data3",
                    "1": "new_data",
                    "11": "new_value3",
                    "2": "extra_value"
                },
                "UNRECOVERED_JUMPTABLE_00": {
                    "1": "jump_table_function",
                    "4": "jump_table",
                    "2": "handle_error",
                    "6": "unrecovered_jump_table",
                    "3": "jump_function"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "3": "relocations",
                    "1": "rel_array",
                    "2": "relocation_array"
                },
                "pdVar1": {
                    "3": "rel_array",
                    "1": "updated_data_pointer",
                    "2": "dynamic_array",
                    "5": "relocation_entry"
                },
                "uVar2": {
                    "5": "entry_index",
                    "1": "current_index",
                    "23": "index"
                },
                "uVar3": {
                    "2": "mask",
                    "1": "bit_shifted_value",
                    "4": "bitmask",
                    "21": "bit_mask"
                },
                "dword param_1": {
                    "1": "new_value1"
                },
                "dword param_2": {
                    "1": "new_value2"
                },
                "dword param_3": {
                    "1": "new_value3"
                }
            }
        },
        "FUN_000816f8": {
            "entrypoint": "0x000816f8",
            "current_name": "print_assertion_failure_000816f8",
            "code": "\nvoid print_assertion_failure_000816f8(undefined4 file,undefined4 line,char *assertion,undefined4 function)\n\n{\n  undefined4 file_ptr;\n  undefined4 function_name;\n  char *additional_message;\n  undefined8 abort_result;\n  \n  file_ptr = *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0xc);\n  if (assertion == (char *)0x0) goto LAB_0008171c;\n  function_name = function;\n  additional_message = \", function: \";\n  do {\n    function = file;\n    fiprintf(file_ptr,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",function_name,file,line,\n             additional_message,assertion);\n    abort_result = abort();\n    line = (undefined4)((ulonglong)abort_result >> 0x20);\n    file_ptr = (undefined4)abort_result;\nLAB_0008171c:\n    assertion = \"\";\n    function_name = function;\n    additional_message = assertion;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816f8": "print_assertion_failure_000816f8",
                "param_1": "file",
                "param_2": "line",
                "param_3": "assertion",
                "param_4": "function",
                "uVar1": "file_ptr",
                "uVar2": "function_name",
                "pcVar3": "additional_message",
                "uVar4": "abort_result"
            },
            "calling": [
                "FUN_000803fc",
                "FUN_00080b2c"
            ],
            "called": [
                "FUN_000836ec",
                "FUN_00081750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000816f8": {
                    "6": "print_assertion_failure",
                    "5": "print_assertion_failed",
                    "1": "print_assert_failed_message",
                    "2": "log_assertion_failure",
                    "4": "print_assertion_error"
                },
                "param_1": {
                    "1": "file_location",
                    "5": "file_name",
                    "22": "file"
                },
                "param_2": {
                    "16": "line",
                    "12": "line_number",
                    "1": "file_name"
                },
                "param_3": {
                    "2": "assertion_expression",
                    "1": "message",
                    "5": "assertion_message",
                    "13": "assertion",
                    "3": "expression"
                },
                "param_4": {
                    "14": "function_name",
                    "1": "assert_line",
                    "15": "function"
                },
                "uVar1": {
                    "4": "file_handle",
                    "1": "format_buffer",
                    "3": "output_file",
                    "2": "output_stream",
                    "7": "file_ptr"
                },
                "uVar2": {
                    "3": "function_name_copy",
                    "2": "func_ptr",
                    "1": "function_handle",
                    "9": "function_name"
                },
                "pcVar3": {
                    "1": "suffix",
                    "4": "delimiter",
                    "6": "additional_message",
                    "2": "additional_text",
                    "3": "additional_info"
                },
                "uVar4": {
                    "1": "abort_address",
                    "2": "return_value",
                    "18": "abort_result",
                    "6": "result"
                }
            }
        },
        "FUN_00081750": {
            "entrypoint": "0x00081750",
            "current_name": "print_with_offset_00081750",
            "code": "\nvoid print_with_offset_00081750(undefined4 format_string,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 arg2_copy;\n  undefined4 arg3_copy;\n  \n  arg2_copy = arg2;\n  arg3_copy = arg3;\n  print_formatted_string(elf_relocation_array[140].r_offset,format_string,arg1,&arg2_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081750": "print_with_offset_00081750",
                "param_1": "format_string",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "uStack_8": "arg2_copy",
                "uStack_4": "arg3_copy",
                "_vfiprintf_r": "print_formatted_string",
                "Elf32_Rel_ARRAY_20070000": "elf_relocation_array"
            },
            "calling": [
                "FUN_000816f8"
            ],
            "called": [
                "FUN_0008289c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081750": {
                    "2": "print_formatted_string",
                    "1": "printf_with_offset",
                    "3": "print_formatted_message",
                    "5": "print_formatted_output",
                    "6": "print_with_offset"
                },
                "param_1": {
                    "1": "format_specifier",
                    "29": "format_string"
                },
                "param_2": {
                    "1": "format",
                    "26": "arg1"
                },
                "param_3": {
                    "2": "offset",
                    "1": "param_3",
                    "20": "arg2"
                },
                "param_4": {
                    "1": "arg_3",
                    "2": "stack_value2",
                    "20": "arg3",
                    "4": "arg2"
                },
                "uStack_8": {
                    "1": "arg_2_copy",
                    "4": "arg2_copy"
                },
                "uStack_4": {
                    "1": "stack_value2_copy",
                    "4": "arg3_copy",
                    "2": "arg4"
                },
                "_vfiprintf_r": {
                    "1": "print_formatted_string"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "elf_relocation_array"
                }
            }
        },
        "FUN_00081778": {
            "entrypoint": "0x00081778",
            "current_name": "execute_sub_functions_00081778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081784) */\n/* WARNING: Removing unreachable block (ram,0x00081788) */\n/* WARNING: Removing unreachable block (ram,0x000817b4) */\n\nvoid execute_sub_functions_00081778(void)\n\n{\n  int iteration_count;\n  code **function_pointers;\n  \n  initialize();\n  function_pointers = (code **)0x8584c;\n  iteration_count = 0;\n  do {\n    iteration_count = iteration_count + 1;\n    function_pointers = function_pointers + 1;\n    (**function_pointers)();\n  } while (iteration_count != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081778": "execute_sub_functions_00081778",
                "iVar1": "iteration_count",
                "ppcVar2": "function_pointers",
                "_init": "initialize"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [
                "FUN_000836d8",
                "FUN_00080118",
                "FUN_00085844"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081778": {
                    "1": "initialize_and_invoke_functions",
                    "2": "execute_four_functions",
                    "8": "execute_sub_functions",
                    "3": "execute_functions",
                    "4": "initialize_and_execute_functions"
                },
                "iVar1": {
                    "2": "iteration_counter",
                    "1": "count",
                    "4": "counter",
                    "18": "iteration_count"
                },
                "ppcVar2": {
                    "11": "function_pointers",
                    "5": "function_pointer_array",
                    "2": "function_array",
                    "1": "function_array_ptr",
                    "3": "function_list"
                },
                "FUNC_000836d8": {
                    "1": "reverse_data",
                    "3": "function_1",
                    "2": "sub_function_1"
                },
                "FUNC_00080118": {
                    "1": "sub_function2",
                    "3": "function_2",
                    "2": "sub_function_2"
                },
                "FUNC_00085844": {
                    "3": "function_3",
                    "1": "perform_operation",
                    "2": "sub_function_3"
                },
                "_init": {
                    "1": "initialize"
                },
                "FUCN_000836d8": {
                    "1": "reverse_something"
                }
            }
        },
        "FUN_000817c8": {
            "entrypoint": "0x000817c8",
            "current_name": "print_message_000817c8",
            "code": "\nvoid print_message_000817c8(undefined4 format_string,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 param_2_copy;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  \n  param_2_copy = param_2;\n  param_3_copy = param_3;\n  param_4_copy = param_4;\n  custom_printf(symbol_table[140].r_offset,\n               *(undefined4 *)(symbol_table[140].r_offset + 8),format_string,&param_2_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817c8": "print_message_000817c8",
                "param_1": "format_string",
                "uStack_c": "param_2_copy",
                "uStack_8": "param_3_copy",
                "uStack_4": "param_4_copy",
                "_vfiprintf_r": "custom_printf",
                "Elf32_Rel_ARRAY_20070000": "symbol_table"
            },
            "calling": [
                "FUN_00080eec"
            ],
            "called": [
                "FUN_0008289c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000817c8": {
                    "1": "print_param_from_array",
                    "2": "print_formatted_string",
                    "7": "print_message",
                    "4": "print_param_with_offset"
                },
                "param_1": {
                    "1": "message_pointer",
                    "3": "offset",
                    "7": "message",
                    "13": "format_string"
                },
                "param_2": {
                    "7": "param2",
                    "1": "stack_var_1",
                    "5": "arg1",
                    "8": "param_2",
                    "3": "arg2"
                },
                "param_3": {
                    "1": "stack_var_2",
                    "7": "param3",
                    "3": "arg3",
                    "8": "param_3",
                    "5": "arg2"
                },
                "param_4": {
                    "7": "param4",
                    "1": "value_3",
                    "9": "param_4",
                    "3": "arg4",
                    "5": "arg3"
                },
                "uStack_c": {
                    "1": "param_2",
                    "7": "param_2_copy",
                    "2": "stack_c",
                    "4": "param2_copy",
                    "3": "arg2_copy"
                },
                "uStack_8": {
                    "2": "stack_param3",
                    "7": "param_3_copy",
                    "4": "param3_copy",
                    "3": "arg3_copy",
                    "1": "stack_variable_8"
                },
                "uStack_4": {
                    "1": "stack_variable_4",
                    "3": "arg4_copy",
                    "2": "stack_4",
                    "7": "param_4_copy",
                    "4": "param4_copy"
                },
                "_vfiprintf_r": {
                    "1": "formatted_print"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "symbol_table"
                }
            }
        },
        "FUN_000817f0": {
            "entrypoint": "0x000817f0",
            "current_name": "allocate_memory_000817f0",
            "code": "\nvoid allocate_memory_000817f0(undefined4 size)\n\n{\n  _malloc_r(relocation_table[140].offset,size);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817f0": "allocate_memory_000817f0",
                "param_1": "size",
                "Elf32_Rel_ARRAY_20070000": "relocation_table",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "FUN_00081810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000817f0": {
                    "1": "allocate_relocation",
                    "29": "allocate_memory"
                },
                "param_1": {
                    "4": "data",
                    "1": "relocation_array",
                    "2": "data_ptr",
                    "17": "size"
                },
                "FUN_00081810": {
                    "18": "process_data",
                    "1": "copy_data_to_allocated_memory",
                    "5": "process_relocation"
                },
                "param_2": {
                    "4": "length",
                    "1": "size",
                    "14": "count"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "rel_array",
                    "2": "relocation_array",
                    "6": "relocation_table"
                },
                "140": {
                    "1": "index"
                },
                "r_offset": {
                    "1": "offset"
                }
            }
        },
        "FUN_00081800": {
            "entrypoint": "0x00081800",
            "current_name": "free_elf32_rel_entry_00081800",
            "code": "\nvoid free_elf32_rel_entry_00081800(undefined4 offset)\n\n{\n  _free_r(relocation_array[140].offset,offset);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081800": "free_elf32_rel_entry_00081800",
                "param_1": "offset",
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00081480",
                "FUN_00081472",
                "FUN_0008151c"
            ],
            "called": [
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081800": {
                    "8": "free_elf32_rel",
                    "1": "free_elf32_rel_array",
                    "4": "free_elf32_rel_offset",
                    "2": "free_elf_relocation"
                },
                "param_1": {
                    "4": "param",
                    "1": "r_offset",
                    "2": "entry",
                    "5": "offset",
                    "3": "arg"
                },
                "FUN_00083b10": {
                    "1": "update_data",
                    "4": "process_data",
                    "3": "do_something",
                    "2": "perform_operation"
                },
                "param_2": {
                    "1": "entry_size",
                    "2": "count",
                    "4": "index"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "elf_rel_array",
                    "3": "relocation_table",
                    "4": "relocation_array",
                    "2": "rel_array"
                },
                "140": {
                    "2": "index"
                },
                "r_offset": {
                    "1": "entry_address",
                    "3": "offset"
                }
            }
        },
        "FUN_00081810": {
            "entrypoint": "0x00081810",
            "current_name": "allocate_memory_00081810",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_memory_00081810(undefined4 *lock,uint size)\n\n{\n  dword rel_info;\n  int current_offset;\n  uint current_size;\n  uint aligned_size;\n  int temp_var4;\n  uint difference;\n  dword current_offset;\n  uint new_size;\n  int prev_offset;\n  undefined *ptr;\n  dword prev_offset;\n  dword previous_offset;\n  int index;\n  dword *rel_info_ptr;\n  uint aligned_size;\n  undefined *aligned_ptr;\n  dword *ptr_4;\n  uint index;\n  \n  if (size + 0xb < 0x17) {\n    aligned_size = 0x10;\n    if (0x10 < size) goto LAB_00081876;\n  }\n  else {\n    aligned_size = size + 0xb & 0xfffffff8;\n    if (((int)aligned_size < 0) || (aligned_size < size)) {\nLAB_00081876:\n      *lock = 0xc;\n      return (int *)0x0;\n    }\n  }\n  __malloc_lock(lock);\n  rel_info = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (aligned_size < 0x1f8) {\n    index = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + aligned_size);\n    if ((index != aligned_size + 0x20070464) ||\n       (current_offset = index + 8, index = *(int *)(index + 0x14), current_offset != index)) {\n      temp_var4 = *(int *)(index + 0xc);\n      prev_offset = (*(uint *)(index + 4) & 0xfffffffc) + index;\n      aligned_size = *(uint *)(prev_offset + 4);\n      current_offset = *(int *)(index + 8);\n      *(int *)(current_offset + 0xc) = temp_var4;\n      *(int *)(temp_var4 + 8) = current_offset;\n      *(uint *)(prev_offset + 4) = aligned_size | 1;\n      __malloc_unlock(lock);\n      return (int *)(index + 8);\n    }\n    index = (aligned_size >> 3) + 2;\n  }\n  else {\n    index = aligned_size >> 9;\n    if (index == 0) {\n      current_offset = 0x7e;\n      index = 0x3f;\n    }\n    else if (index < 5) {\n      index = (aligned_size >> 6) + 0x38;\n      current_offset = index * 2;\n    }\n    else if (index < 0x15) {\n      index = index + 0x5b;\n      current_offset = index * 2;\n    }\n    else if (index < 0x55) {\n      index = (aligned_size >> 0xc) + 0x6e;\n      current_offset = index * 2;\n    }\n    else if (index < 0x155) {\n      index = (aligned_size >> 0xf) + 0x77;\n      current_offset = index * 2;\n    }\n    else if (index < 0x555) {\n      index = (aligned_size >> 0x12) + 0x7c;\n      current_offset = index * 2;\n    }\n    else {\n      current_offset = 0xfc;\n      index = 0x7e;\n    }\n    for (current_offset = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[current_offset]; current_offset * 4 + 0x20070464U != current_offset\n        ; current_offset = *(dword *)(current_offset + 0xc)) {\n      index = *(uint *)(current_offset + 4) & 0xfffffffc;\n      temp_var4 = index - aligned_size;\n      if (0xf < temp_var4) {\n        index = index + -1;\n        break;\n      }\n      if (-1 < temp_var4) {\n        current_offset = index + current_offset;\n        aligned_size = *(uint *)(current_offset + 4);\n        temp_var4 = *(int *)(current_offset + 0xc);\n        index = *(int *)(current_offset + 8);\n        *(int *)(index + 0xc) = temp_var4;\n        *(int *)(temp_var4 + 8) = index;\n        *(uint *)(current_offset + 4) = aligned_size | 1;\n        __malloc_unlock(lock);\n        return (int *)(current_offset + 8);\n      }\n    }\n    index = index + 1;\n  }\n  current_offset = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    current_size = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    aligned_size = current_size & 0xfffffffc;\n    difference = aligned_size - aligned_size;\n    if (0xf < (int)difference) {\n      current_offset = aligned_size + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = aligned_size | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = current_offset;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = current_offset;\n      *(undefined4 *)(current_offset + 0xc) = 0x2007046c;\n      *(undefined4 *)(current_offset + 8) = 0x2007046c;\n      *(uint *)(current_offset + 4) = difference | 1;\n      *(uint *)(current_offset + difference) = difference;\n      __malloc_unlock(lock);\n      return (int *)(rel_info + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)difference) {\n      *(uint *)(aligned_size + rel_info + 4) = *(uint *)(aligned_size + rel_info + 4) | 1;\n      __malloc_unlock(lock);\n      return (int *)(rel_info + 8);\n    }\n    if (aligned_size < 0x200) {\n      aligned_size = current_size & 0xfffffff8;\n      index = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + aligned_size);\n      current_offset = 1 << ((int)(current_size >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(rel_info + 8) = index;\n      *(uint *)(rel_info + 0xc) = aligned_size + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = current_offset;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + aligned_size) = rel_info;\n      *(dword *)(index + 0xc) = rel_info;\n    }\n    else {\n      difference = current_size >> 9;\n      if (difference < 5) {\n        current_offset = (current_size >> 6) + 0x38;\n        index = current_offset * 2;\n      }\n      else if (difference < 0x15) {\n        current_offset = difference + 0x5b;\n        index = current_offset * 2;\n      }\n      else if (difference < 0x55) {\n        current_offset = (current_size >> 0xc) + 0x6e;\n        index = current_offset * 2;\n      }\n      else if (difference < 0x155) {\n        current_offset = (current_size >> 0xf) + 0x77;\n        index = current_offset * 2;\n      }\n      else if (difference < 0x555) {\n        current_offset = (current_size >> 0x12) + 0x7c;\n        index = current_offset * 2;\n      }\n      else {\n        index = 0xfc;\n        current_offset = 0x7e;\n      }\n      current_offset = index * 4 + 0x20070464;\n      prev_offset = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[index];\n      if (prev_offset == current_offset) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (current_offset >> 2 & 0xffU);\n        previous_offset = prev_offset;\n      }\n      else {\n        do {\n          previous_offset = prev_offset;\n          if ((*(uint *)(prev_offset + 4) & 0xfffffffc) <= aligned_size) break;\n          prev_offset = *(dword *)(prev_offset + 8);\n          previous_offset = prev_offset;\n        } while (current_offset != prev_offset);\n        prev_offset = *(dword *)(previous_offset + 0xc);\n      }\n      current_offset = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(rel_info + 0xc) = prev_offset;\n      *(dword *)(rel_info + 8) = previous_offset;\n      *(dword *)(prev_offset + 8) = rel_info;\n      *(dword *)(previous_offset + 0xc) = rel_info;\n    }\n  }\n  rel_info = Elf32_Rel_ARRAY_20070000[141].r_info;\n  current_size = 1 << ((int)index >> 2 & 0xffU);\n  if (current_size <= current_offset) {\n    if ((current_offset & current_size) == 0) {\n      index = index & 0xfffffffc;\n      do {\n        current_size = current_size << 1;\n        index = index + 4;\n      } while ((current_offset & current_size) == 0);\n    }\n    do {\n      ptr_4 = &Elf32_Rel_ARRAY_20070000[index + 0x8c].r_info;\n      rel_info_ptr = ptr_4;\n      aligned_size = index;\n      do {\n        for (ptr = (undefined *)rel_info_ptr[3]; rel_info_ptr != (dword *)ptr;\n            ptr = *(undefined **)(ptr + 0xc)) {\n          difference = *(uint *)(ptr + 4) & 0xfffffffc;\n          new_size = difference - aligned_size;\n          if (0xf < (int)new_size) {\n            current_offset = *(int *)(ptr + 8);\n            index = *(int *)(ptr + 0xc);\n            aligned_ptr = ptr + aligned_size;\n            *(uint *)(ptr + 4) = aligned_size | 1;\n            *(int *)(current_offset + 0xc) = index;\n            *(int *)(index + 8) = current_offset;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)aligned_ptr;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)aligned_ptr;\n            *(undefined4 *)(aligned_ptr + 0xc) = 0x2007046c;\n            *(undefined4 *)(aligned_ptr + 8) = 0x2007046c;\n            *(uint *)(aligned_ptr + 4) = new_size | 1;\n            *(uint *)(aligned_ptr + new_size) = new_size;\n            __malloc_unlock(lock);\n            return (int *)(ptr + 8);\n          }\n          if (-1 < (int)new_size) {\n            index = *(int *)(ptr + 8);\n            current_offset = *(int *)(ptr + 0xc);\n            *(uint *)(ptr + difference + 4) = *(uint *)(ptr + difference + 4) | 1;\n            *(int *)(index + 0xc) = current_offset;\n            *(int *)(current_offset + 8) = index;\n            __malloc_unlock(lock);\n            return (int *)(ptr + 8);\n          }\n        }\n        aligned_size = aligned_size + 1;\n        rel_info_ptr = rel_info_ptr + 2;\n      } while ((aligned_size & 3) != 0);\n      do {\n        difference = index & 3;\n        ptr = (undefined *)(ptr_4 + -2);\n        index = index - 1;\n        if (difference == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~current_size;\n          break;\n        }\n        ptr_4 = (dword *)*ptr_4;\n      } while (ptr_4 == (dword *)ptr);\n      current_size = current_size * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= current_size &&\n           current_size - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (index = aligned_size, current_size == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & current_size) == 0; current_size = current_size << 1) {\n        index = index + 4;\n      }\n    } while( true );\n  }\n  index = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((aligned_size <= index) &&\n     (current_size = index - aligned_size, current_offset = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)current_size))\n  goto LAB_00081b1a;\n  current_size = Elf32_Rel_ARRAY_20070000[141].r_info + index;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    aligned_size = aligned_size + DAT_20071218 + 0x10;\n  }\n  else {\n    aligned_size = aligned_size + DAT_20071218 + 0x100f & 0xfffff000;\n  }\n  current_offset = allocate_memory_00081810(lock,aligned_size);\n  if ((current_offset == 0xffffffff) || ((current_offset < current_size && (rel_info != 0x20070464)))) {\n    index = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    current_offset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    difference = DAT_2007121c + aligned_size;\n    DAT_2007121c = difference;\n    if ((current_size == current_offset) && ((current_size & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = aligned_size + index | 1;\n    }\n    else {\n      prev_offset = current_offset;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        prev_offset = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_2007121c = difference + (current_offset - current_size);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = prev_offset;\n      current_size = current_offset & 7;\n      if (current_size == 0) {\n        index = 0x1000;\n      }\n      else {\n        current_offset = current_offset + (8 - current_size);\n        index = 0x1008 - current_size;\n      }\n      index = index - (aligned_size + current_offset & 0xfff);\n      current_offset = allocate_memory_00081810(lock,index);\n      if (current_offset == -1) {\n        current_size = 1;\n        index = 0;\n      }\n      else {\n        current_size = (current_offset - current_offset) + index | 1;\n      }\n      difference = DAT_2007121c + index;\n      Elf32_Rel_ARRAY_20070000[141].r_info = current_offset;\n      DAT_2007121c = difference;\n      *(uint *)(current_offset + 4) = current_size;\n      if (rel_info != 0x20070464) {\n        if (index < 0x10) {\n          *(undefined4 *)(current_offset + 4) = 1;\n          index = 0;\n          goto LAB_00081b04;\n        }\n        index = index - 0xc & 0xfffffff8;\n        *(uint *)(rel_info + 4) = index | *(uint *)(rel_info + 4) & 1;\n        *(undefined4 *)(rel_info + index + 4) = 5;\n        *(undefined4 *)(rel_info + index + 8) = 5;\n        if (0xf < index) {\n          _free_r(lock,rel_info + 8);\n          difference = DAT_2007121c;\n        }\n      }\n    }\n    if (DAT_20071214 < difference) {\n      DAT_20071214 = difference;\n    }\n    if (DAT_20071210 < difference) {\n      DAT_20071210 = difference;\n    }\n    index = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    current_offset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00081b04:\n  current_size = index - aligned_size;\n  if ((index < aligned_size) || ((int)current_size < 0x10)) {\n    __malloc_unlock(lock);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  Elf32_Rel_ARRAY_20070000[141].r_info = aligned_size + current_offset;\n  *(uint *)(current_offset + 4) = aligned_size | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = current_size | 1;\n  __malloc_unlock(lock);\n  return (int *)(current_offset + 8);\n}\n\n",
            "renaming": {
                "FUN_00081810": "allocate_memory_00081810",
                "param_1": "lock",
                "param_2": "size",
                "dVar1": "rel_info",
                "iVar2": "current_offset",
                "uVar3": "current_size",
                "uVar4": "aligned_size",
                "iVar5": "temp_var4",
                "uVar6": "difference",
                "dVar7": "current_offset",
                "uVar8": "new_size",
                "iVar9": "prev_offset",
                "puVar10": "ptr",
                "dVar11": "prev_offset",
                "dVar12": "previous_offset",
                "iVar13": "index",
                "pdVar14": "rel_info_ptr",
                "uVar15": "aligned_size",
                "puVar16": "aligned_ptr",
                "pdVar17": "ptr_4",
                "uVar18": "index",
                "dVar17": "temp_info",
                "_sbrk_r": "allocate_memory"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_00081fac",
                "FUN_00084018",
                "FUN_000817f0"
            ],
            "called": [
                "FUN_0008236c",
                "FUN_00081f98",
                "FUN_00083b10",
                "FUN_00081f94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081810": {
                    "1": "improved_malloc",
                    "2": "allocate_memory_block",
                    "25": "allocate_memory"
                },
                "param_1": {
                    "1": "result_pointer",
                    "2": "result",
                    "10": "lock",
                    "6": "lock_param"
                },
                "param_2": {
                    "1": "block_size",
                    "25": "size"
                },
                "dVar1": {
                    "3": "rel_info",
                    "1": "entry",
                    "2": "info"
                },
                "iVar2": {
                    "1": "start",
                    "2": "current_offset"
                },
                "uVar3": {
                    "1": "new_size",
                    "2": "temp_var2",
                    "3": "current_size"
                },
                "uVar4": {
                    "1": "size_u_var4",
                    "4": "aligned_size",
                    "2": "diff",
                    "3": "adjusted_size"
                },
                "iVar5": {
                    "1": "missing_offset",
                    "2": "temp_var4"
                },
                "uVar6": {
                    "1": "temp199",
                    "2": "next_size",
                    "3": "diff",
                    "6": "difference"
                },
                "dVar7": {
                    "1": "var_30",
                    "2": "temp_offset",
                    "4": "current_offset"
                },
                "uVar8": {
                    "1": "temp3",
                    "2": "next_size",
                    "3": "new_size"
                },
                "iVar9": {
                    "1": "entry",
                    "2": "prev_offset"
                },
                "puVar10": {
                    "1": "block",
                    "2": "temp_ptr",
                    "6": "ptr"
                },
                "dVar11": {
                    "1": "new_size",
                    "2": "next_rel_offset",
                    "3": "prev_offset"
                },
                "dVar12": {
                    "1": "next_rel_offset_iter",
                    "2": "previous_offset"
                },
                "iVar13": {
                    "1": "block_index",
                    "2": "temp_index",
                    "9": "index"
                },
                "pdVar14": {
                    "1": "pd_var14",
                    "2": "rel_info_ptr"
                },
                "uVar15": {
                    "1": "new_block_size",
                    "3": "adjusted_size",
                    "12": "aligned_size",
                    "2": "block_size"
                },
                "puVar16": {
                    "1": "pointer3",
                    "2": "new_ptr",
                    "4": "aligned_ptr"
                },
                "pdVar17": {
                    "1": "info_array2",
                    "2": "ptr_4"
                },
                "uVar18": {
                    "1": "section_index",
                    "3": "index",
                    "2": "bucket_index"
                },
                "dVar17": {
                    "1": "rel_offset"
                },
                "dVar18": {
                    "1": "num_shifts"
                },
                "uVar19": {
                    "1": "temp_value"
                },
                "pvVar16": {
                    "1": "aligned_ptr"
                },
                "pvVar17": {
                    "1": "rel_info"
                },
                "uVar8 ": {
                    "1": "u4"
                },
                "_sbrk_r": {
                    "1": "allocate_memory"
                },
                "DAT_20071218": {
                    "1": "memory_padding"
                },
                "DAT_2007121c": {
                    "1": "current_memory"
                },
                "DAT_20071214": {
                    "1": "maximum_memory"
                },
                "DAT_20071210": {
                    "1": "minimum_memory"
                },
                "pNewBlock": {
                    "1": "var_ptr_8"
                },
                "info_array": {
                    "1": "array"
                },
                "info_array2": {
                    "1": "array2"
                },
                "ptr": {
                    "1": "pointer"
                },
                "ptr2": {
                    "1": "pointer2"
                }
            }
        },
        "FUN_00081d48": {
            "entrypoint": "0x00081d48",
            "current_name": "copy_memory_00081d48",
            "code": "\nundefined4 * copy_memory_00081d48(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *dest_end;\n  undefined4 *src_ptr;\n  uint remaining_size;\n  uint copy_size;\n  bool loop_condition;\n  \n  dest_end = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      copy_size = size - 4;\n      if (3 < size) {\n        do {\n          dest_ptr = source;\n          src_ptr = dest_end;\n          loop_condition = copy_size != 0;\n          copy_size = copy_size - 1;\n          *(undefined *)src_ptr = *(undefined *)dest_ptr;\n          dest_end = (undefined4 *)((int)src_ptr + 1);\n          source = (undefined4 *)((int)dest_ptr + 1);\n        } while (loop_condition);\n        *(undefined *)(undefined4 *)((int)src_ptr + 1) =\n             *(undefined *)(undefined4 *)((int)dest_ptr + 1);\n        *(undefined *)((int)src_ptr + 2) = *(undefined *)((int)dest_ptr + 2);\n        *(undefined *)((int)src_ptr + 3) = *(undefined *)((int)dest_ptr + 3);\n        return destination;\n      }\n      goto copy_remaining_bytes;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      copy_size = 4 - ((uint)destination & 3);\n      size = size - copy_size;\n      dest_ptr = destination;\n      src_ptr = source;\n      if (((uint)destination & 1) != 0) {\n        src_ptr = (undefined4 *)((int)source + 1);\n        dest_ptr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      dest_end = dest_ptr;\n      source = src_ptr;\n      if ((copy_size & 2) != 0) {\n        source = (undefined4 *)((int)src_ptr + 2);\n        dest_end = (undefined4 *)((int)dest_ptr + 2);\n        *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *dest_end = *source;\n    dest_end[1] = source[1];\n    dest_end[2] = source[2];\n    dest_end[3] = source[3];\n    dest_end[4] = source[4];\n    dest_end[5] = source[5];\n    dest_end[6] = source[6];\n    dest_end[7] = source[7];\n    dest_end[8] = source[8];\n    dest_end[9] = source[9];\n    dest_end[10] = source[10];\n    dest_end[0xb] = source[0xb];\n    dest_end[0xc] = source[0xc];\n    dest_end[0xd] = source[0xd];\n    dest_end[0xe] = source[0xe];\n    dest_end[0xf] = source[0xf];\n    dest_end = dest_end + 0x10;\n    source = source + 0x10;\n    size = size - 0x40;\n  }\n  remaining_size = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *dest_end = *source;\n      dest_end[1] = source[1];\n      dest_end[2] = source[2];\n      dest_end[3] = source[3];\n      dest_end = dest_end + 4;\n      source = source + 4;\n      loop_condition = 0xf < remaining_size;\n      remaining_size = remaining_size - 0x10;\n    } while (loop_condition);\n  }\n  copy_size = remaining_size + 0xc;\n  src_ptr = dest_end;\n  dest_ptr = source;\n  if (0xfffffff3 < remaining_size) {\n    do {\n      source = dest_ptr + 1;\n      *src_ptr = *dest_ptr;\n      loop_condition = 3 < copy_size;\n      copy_size = copy_size - 4;\n      dest_end = src_ptr + 1;\n      src_ptr = src_ptr + 1;\n      dest_ptr = source;\n    } while (loop_condition);\n  }\ncopy_remaining_bytes:\n  if (copy_size + 4 != 0) {\n    dest_ptr = dest_end;\n    src_ptr = source;\n    if ((copy_size & 1) != 0) {\n      src_ptr = (undefined4 *)((int)source + 1);\n      dest_ptr = (undefined4 *)((int)dest_end + 1);\n      *(undefined *)dest_end = *(undefined *)source;\n    }\n    if ((copy_size + 4 & 2) != 0) {\n      *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_00081d48": "copy_memory_00081d48",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "dest_end",
                "puVar3": "src_ptr",
                "uVar4": "remaining_size",
                "uVar5": "copy_size",
                "bVar6": "loop_condition",
                "LAB_00081dcc": "copy_remaining_bytes"
            },
            "calling": [
                "FUN_00083ca8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081d48": {
                    "2": "copy_data",
                    "1": "copy_and_pad_memory",
                    "26": "copy_memory"
                },
                "param_1": {
                    "26": "destination",
                    "5": "dest"
                },
                "param_2": {
                    "26": "source",
                    "5": "src"
                },
                "param_3": {
                    "2": "num_bytes",
                    "8": "length",
                    "20": "size",
                    "1": "byte_count"
                },
                "puVar1": {
                    "1": "d_ptr",
                    "25": "dest_ptr",
                    "3": "dest_pointer",
                    "2": "dst_ptr"
                },
                "puVar2": {
                    "2": "dest",
                    "4": "dest_end_ptr",
                    "1": "dst_end_ptr",
                    "5": "dest_end"
                },
                "puVar3": {
                    "1": "src_index",
                    "17": "src_ptr",
                    "3": "temp_ptr",
                    "2": "src"
                },
                "uVar4": {
                    "1": "copy_count",
                    "4": "remaining_length",
                    "18": "remaining_size"
                },
                "uVar5": {
                    "1": "remaining_size2",
                    "3": "loop_count",
                    "2": "temp_length",
                    "5": "copy_size"
                },
                "bVar6": {
                    "2": "is_not_zero",
                    "1": "is_remaining_size_positive",
                    "5": "loop_condition",
                    "3": "is_looping"
                },
                "LAB_00081dcc": {
                    "2": "copy_remaining_bytes",
                    "1": "copy_remaining"
                }
            }
        },
        "FUN_00081e34": {
            "entrypoint": "0x00081e34",
            "current_name": "copy_memory_00081e34",
            "code": "\nvoid copy_memory_00081e34(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  int index;\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *temp_ptr;\n  uint temp_size;\n  undefined *temp_ptr;\n  uint remainder;\n  \n  if ((source < destination) && (temp_ptr = (undefined4 *)((int)source + size), destination < temp_ptr)) {\n    temp_ptr = (undefined *)((int)destination + size);\n    index = size - 1;\n    if (size != 0) {\n      do {\n        temp_ptr = (undefined4 *)((int)temp_ptr + -1);\n        index = index + -1;\n        temp_ptr = temp_ptr + -1;\n        *temp_ptr = *(undefined *)temp_ptr;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (size < 0x10) {\n    if (size == 0) {\n      return;\n    }\n  }\n  else if ((((uint)destination | (uint)source) & 3) == 0) {\n    temp_ptr = destination;\n    src_ptr = source;\n    do {\n      dest_ptr = temp_ptr + 4;\n      *temp_ptr = *src_ptr;\n      temp_ptr[1] = src_ptr[1];\n      temp_ptr[2] = src_ptr[2];\n      temp_ptr[3] = src_ptr[3];\n      temp_ptr = dest_ptr;\n      src_ptr = src_ptr + 4;\n    } while (dest_ptr != (undefined4 *)((int)destination + (size - 0x10 & 0xfffffff0) + 0x10));\n    index = (size - 0x10 >> 4) + 1;\n    remainder = size & 0xf;\n    source = source + index * 4;\n    destination = destination + index * 4;\n    temp_size = remainder;\n    temp_ptr = destination;\n    src_ptr = source;\n    if (3 < remainder) {\n      do {\n        temp_size = temp_size - 4;\n        *temp_ptr = *src_ptr;\n        temp_ptr = temp_ptr + 1;\n        src_ptr = src_ptr + 1;\n      } while (3 < temp_size);\n      index = (remainder - 4 & 0xfffffffc) + 4;\n      destination = (undefined4 *)((int)destination + index);\n      source = (undefined4 *)((int)source + index);\n      remainder = size & 3;\n    }\n    size = remainder;\n    if (size == 0) {\n      return;\n    }\n  }\n  temp_ptr = destination;\n  do {\n    src_ptr = (undefined4 *)((int)temp_ptr + 1);\n    *(undefined *)temp_ptr = *(undefined *)source;\n    source = (undefined4 *)((int)source + 1);\n    temp_ptr = src_ptr;\n  } while (src_ptr != (undefined4 *)(size + (int)destination));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e34": "copy_memory_00081e34",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "iVar1": "index",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "puVar4": "temp_ptr",
                "uVar5": "temp_size",
                "puVar6": "temp_ptr",
                "uVar7": "remainder"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_00081fac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081e34": {
                    "2": "memcpy_reverse",
                    "13": "copy_memory",
                    "1": "reverse_data",
                    "9": "reverse_copy"
                },
                "param_1": {
                    "1": "dest_buffer",
                    "17": "destination",
                    "2": "source",
                    "11": "dest"
                },
                "param_2": {
                    "2": "destination",
                    "17": "source",
                    "11": "src",
                    "1": "src_buffer"
                },
                "param_3": {
                    "7": "length",
                    "24": "size"
                },
                "iVar1": {
                    "4": "iteration",
                    "1": "temp_counter",
                    "3": "i",
                    "2": "remaining_length",
                    "13": "index"
                },
                "puVar2": {
                    "1": "dest_pointer",
                    "2": "dst_ptr",
                    "22": "dest_ptr"
                },
                "puVar3": {
                    "25": "src_ptr",
                    "1": "dst_ptr"
                },
                "puVar4": {
                    "2": "src_end",
                    "1": "dest_ptr",
                    "10": "temp_ptr",
                    "6": "copy_ptr"
                },
                "uVar5": {
                    "1": "last_copy_size",
                    "2": "temp_length",
                    "8": "remaining_size",
                    "11": "temp_size"
                },
                "puVar6": {
                    "1": "src_last",
                    "2": "dest_byte_ptr",
                    "6": "temp_ptr",
                    "3": "dest_end"
                },
                "uVar7": {
                    "1": "length",
                    "5": "remaining_size",
                    "11": "remainder"
                },
                "puVar7": {
                    "1": "temp_dest_ptr"
                },
                "puVar8": {
                    "1": "dest_temp_ptr"
                }
            }
        },
        "FUN_00081f00": {
            "entrypoint": "0x00081f00",
            "current_name": "memset_00081f00",
            "code": "\nvoid memset_00081f00(undefined4 *dest,undefined value,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *next_dest_ptr;\n  undefined4 fill_value;\n  uint remaining_size;\n  bool is_zero;\n  \n  if (((uint)dest & 3) != 0) {\n    is_zero = size == 0;\n    dest_ptr = dest;\n    size = size - 1;\n    if (is_zero) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      if (((uint)dest & 3) == 0) break;\n      is_zero = size == 0;\n      dest_ptr = dest;\n      size = size - 1;\n      if (is_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    fill_value = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remaining_size = size;\n    dest_ptr = dest;\n    if (0xf < size) {\n      remaining_size = size - 0x10;\n      do {\n        *dest_ptr = fill_value;\n        dest_ptr[1] = fill_value;\n        dest_ptr[2] = fill_value;\n        dest_ptr[3] = fill_value;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)dest + (remaining_size & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      dest = dest + ((remaining_size >> 4) + 1) * 4;\n      remaining_size = size;\n      dest_ptr = dest;\n      if (size < 4) goto end_of_function;\n    }\n    do {\n      size = size - 4;\n      *dest = fill_value;\n      dest = dest + 1;\n    } while (3 < size);\n    dest = (undefined4 *)((int)dest_ptr + (remaining_size - 4 & 0xfffffffc) + 4);\n    size = remaining_size & 3;\n  }\nend_of_function:\n  if (size != 0) {\n    dest_ptr = dest;\n    do {\n      next_dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = next_dest_ptr;\n    } while (next_dest_ptr != (undefined4 *)(size + (int)dest));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f00": "memset_00081f00",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "next_dest_ptr",
                "uVar3": "fill_value",
                "uVar4": "remaining_size",
                "bVar5": "is_zero",
                "LAB_00081f7c": "end_of_function"
            },
            "calling": [
                "FUN_00083888",
                "FUN_000811b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081f00": {
                    "3": "memset_with_value",
                    "1": "memset_fill",
                    "6": "fill_memory",
                    "9": "memset",
                    "4": "initialize_memory",
                    "5": "fill_memory_with_byte"
                },
                "param_1": {
                    "1": "memory_ptr",
                    "10": "destination",
                    "12": "dest",
                    "6": "buffer"
                },
                "param_2": {
                    "27": "value",
                    "1": "byte_value",
                    "2": "byte_to_fill"
                },
                "param_3": {
                    "2": "num_bytes",
                    "3": "count",
                    "6": "length",
                    "20": "size"
                },
                "puVar1": {
                    "1": "dest_ptr1",
                    "19": "dest_ptr",
                    "3": "dst_ptr"
                },
                "puVar2": {
                    "1": "dest_ptr_temp2",
                    "10": "next_dest_ptr",
                    "2": "dest_ptr2",
                    "5": "next_ptr",
                    "3": "next_dst_ptr"
                },
                "uVar3": {
                    "1": "chunk_value",
                    "2": "value_32bit",
                    "6": "fill_value",
                    "5": "value32",
                    "3": "pattern"
                },
                "uVar4": {
                    "2": "remaining_count",
                    "1": "u_size",
                    "14": "remaining_size",
                    "6": "remaining_length"
                },
                "bVar5": {
                    "2": "is_length_zero",
                    "1": "is_empty",
                    "3": "is_zero_length",
                    "4": "is_size_zero",
                    "13": "is_zero"
                },
                "LAB_00081f7c": {
                    "2": "end_of_function",
                    "1": "end"
                }
            }
        },
        "FUN_00081f94": {
            "entrypoint": "0x00081f94",
            "current_name": "FUNC_00081f94",
            "code": "\nvoid FUNC_00081f94(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f94": "FUNC_00081f94"
            },
            "calling": [
                "FUN_00081fac",
                "FUN_00083b10",
                "FUN_00083a74",
                "FUN_00081810"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f98": {
            "entrypoint": "0x00081f98",
            "current_name": "FUNC_00081f98",
            "code": "\nvoid FUNC_00081f98(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f98": "FUNC_00081f98"
            },
            "calling": [
                "FUN_00081fac",
                "FUN_00083b10",
                "FUN_00083a74",
                "FUN_00081810"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f9c": {
            "entrypoint": "0x00081f9c",
            "current_name": "reallocate_memory_00081f9c",
            "code": "\nvoid reallocate_memory_00081f9c(undefined4 offset,undefined4 new_size)\n\n{\n  _realloc_r(relocation_array[140].offset,offset,new_size);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f9c": "reallocate_memory_00081f9c",
                "param_1": "offset",
                "param_2": "new_size",
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00081496"
            ],
            "called": [
                "FUN_00081fac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081f9c": {
                    "1": "resize_array",
                    "2": "realloc_elf32_rel",
                    "17": "reallocate_memory"
                },
                "param_1": {
                    "1": "input_array",
                    "2": "r_offset",
                    "5": "offset"
                },
                "param_2": {
                    "1": "last_relocation",
                    "2": "size_pointer",
                    "6": "size",
                    "8": "new_size",
                    "4": "old_size"
                },
                "FUN_00081fac": {
                    "1": "rearrange_data",
                    "5": "update_pointer",
                    "2": "process_relocation_table"
                },
                "param_3": {
                    "1": "num_relocations",
                    "5": "count",
                    "2": "size",
                    "3": "length"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "3": "relocation_array"
                },
                "r_offset": {
                    "1": "offset"
                }
            }
        },
        "FUN_00081fac": {
            "entrypoint": "0x00081fac",
            "current_name": "allocate_memory_00081fac",
            "code": "\nint * allocate_memory_00081fac(undefined4 *param_pointer,int *existing_memory,uint size)\n\n{\n  dword temp1;\n  int *new_memory;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  int temp5;\n  int *temp6;\n  uint temp7;\n  uint aligned_size;\n  int *temp_pointer2;\n  \n  if (existing_memory == (int *)0x0) {\n    new_memory = (int *)malloc_r(param_pointer,size);\n    return new_memory;\n  }\n  malloc_lock();\n  temp4 = prev_size;\n  temp7 = temp4 & 0xfffffffc;\n  new_memory = existing_memory + -2;\n  if (size + 0xb < 0x17) {\n    aligned_size = 0x10;\n  }\n  else {\n    aligned_size = size + 0xb & 0xfffffff8;\n    if ((int)aligned_size < 0) goto LAB_00082078;\n  }\n  if (aligned_size < size) {\nLAB_00082078:\n    *param_pointer = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)temp7 < (int)aligned_size) {\n    temp1 = (int)new_memory + temp7;\n    if (info_value == temp1) {\n      temp2 = *(uint *)(info_value + 4) & 0xfffffffc;\n      temp1 = info_value;\n      if ((int)(aligned_size + 0x10) <= (int)(temp2 + temp7)) {\n        info_value = (int)new_memory + aligned_size;\n        *(uint *)(info_value + 4) = (temp2 + temp7) - aligned_size | 1;\n        prev_size = aligned_size | prev_size & 1U;\n        malloc_unlock(param_pointer);\n        return existing_memory;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(temp1 + 4) & 0xfffffffe) + temp1 + 4) & 1) == 0) {\n      temp2 = *(uint *)(temp1 + 4) & 0xfffffffc;\n      if ((int)aligned_size <= (int)(temp2 + temp7)) {\n        temp5 = *(int *)(temp1 + 0xc);\n        temp3 = *(int *)(temp1 + 8);\n        *(int *)(temp3 + 0xc) = temp5;\n        *(int *)(temp5 + 8) = temp3;\n        temp7 = temp2 + temp7;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      temp2 = 0;\n      temp1 = 0;\n    }\n    if (-1 < (int)(temp4 << 0x1f)) {\n      temp_pointer2 = (int *)((int)new_memory - existing_memory[-2]);\n      temp4 = (temp_pointer2[1] & 0xfffffffcU) + temp7;\n      if (temp1 != 0) {\n        if (temp1 == info_value) {\n          if ((int)(aligned_size + 0x10) <= (int)(temp2 + temp4)) {\n            new_memory = temp_pointer2 + 2;\n            temp3 = *new_memory;\n            temp5 = temp_pointer2[3];\n            temp7 = temp7 - 4;\n            *(int *)(temp3 + 0xc) = temp5;\n            *(int *)(temp5 + 8) = temp3;\n            if (temp7 < 0x25) {\n              temp6 = new_memory;\n              if (0x13 < temp7) {\n                temp_pointer2[2] = *existing_memory;\n                temp_pointer2[3] = existing_memory[1];\n                if (temp7 < 0x1c) {\n                  existing_memory = existing_memory + 2;\n                  temp6 = temp_pointer2 + 4;\n                }\n                else {\n                  temp_pointer2[4] = existing_memory[2];\n                  temp_pointer2[5] = existing_memory[3];\n                  if (temp7 == 0x24) {\n                    temp_pointer2[6] = existing_memory[4];\n                    temp6 = existing_memory + 5;\n                    existing_memory = existing_memory + 6;\n                    temp_pointer2[7] = *temp6;\n                    temp6 = temp_pointer2 + 8;\n                  }\n                  else {\n                    existing_memory = existing_memory + 4;\n                    temp6 = temp_pointer2 + 6;\n                  }\n                }\n              }\n              *temp6 = *existing_memory;\n              temp6[1] = existing_memory[1];\n              temp6[2] = existing_memory[2];\n            }\n            else {\n              move_memory(new_memory,existing_memory);\n            }\n            info_value = (int)temp_pointer2 + aligned_size;\n            *(uint *)(info_value + 4) = (temp2 + temp4) - aligned_size | 1;\n            temp_pointer2[1] = aligned_size | temp_pointer2[1] & 1U;\n            malloc_unlock(param_pointer);\n            return new_memory;\n          }\n        }\n        else {\n          temp2 = temp2 + temp4;\n          if ((int)aligned_size <= (int)temp2) {\n            temp5 = *(int *)(temp1 + 0xc);\n            temp3 = *(int *)(temp1 + 8);\n            *(int *)(temp3 + 0xc) = temp5;\n            *(int *)(temp5 + 8) = temp3;\n            temp6 = temp_pointer2 + 2;\n            temp3 = *temp6;\n            temp5 = temp_pointer2[3];\n            temp4 = temp7 - 4;\n            *(int *)(temp3 + 0xc) = temp5;\n            *(int *)(temp5 + 8) = temp3;\n            temp7 = temp2;\n            if (temp4 < 0x25) {\n              new_memory = temp6;\n              if (0x13 < temp4) {\n                temp_pointer2[2] = *existing_memory;\n                temp_pointer2[3] = existing_memory[1];\n                if (temp4 < 0x1c) {\n                  existing_memory = existing_memory + 2;\n                  new_memory = temp_pointer2 + 4;\n                }\n                else {\n                  temp_pointer2[4] = existing_memory[2];\n                  temp_pointer2[5] = existing_memory[3];\n                  if (temp4 == 0x24) {\n                    temp_pointer2[6] = existing_memory[4];\n                    new_memory = existing_memory + 5;\n                    existing_memory = existing_memory + 6;\n                    temp_pointer2[7] = *new_memory;\n                    new_memory = temp_pointer2 + 8;\n                  }\n                  else {\n                    existing_memory = existing_memory + 4;\n                    new_memory = temp_pointer2 + 6;\n                  }\n                }\n              }\n              *new_memory = *existing_memory;\n              new_memory[1] = existing_memory[1];\n              new_memory[2] = existing_memory[2];\n              temp4 = temp_pointer2[1];\n              new_memory = temp_pointer2;\n              existing_memory = temp6;\n            }\n            else {\n              move_memory(temp6,existing_memory);\n              temp4 = temp_pointer2[1];\n              new_memory = temp_pointer2;\n              existing_memory = temp6;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)aligned_size <= (int)temp4) {\n        temp6 = temp_pointer2 + 2;\n        temp3 = *temp6;\n        temp5 = temp_pointer2[3];\n        temp2 = temp7 - 4;\n        *(int *)(temp3 + 0xc) = temp5;\n        *(int *)(temp5 + 8) = temp3;\n        temp7 = temp4;\n        if (temp2 < 0x25) {\n          new_memory = temp6;\n          if (0x13 < temp2) {\n            temp_pointer2[2] = *existing_memory;\n            temp_pointer2[3] = existing_memory[1];\n            if (temp2 < 0x1c) {\n              existing_memory = existing_memory + 2;\n              new_memory = temp_pointer2 + 4;\n            }\n            else {\n              temp_pointer2[4] = existing_memory[2];\n              temp_pointer2[5] = existing_memory[3];\n              if (temp2 == 0x24) {\n                temp_pointer2[6] = existing_memory[4];\n                new_memory = existing_memory + 5;\n                existing_memory = existing_memory + 6;\n                temp_pointer2[7] = *new_memory;\n                new_memory = temp_pointer2 + 8;\n              }\n              else {\n                existing_memory = existing_memory + 4;\n                new_memory = temp_pointer2 + 6;\n              }\n            }\n          }\n          *new_memory = *existing_memory;\n          new_memory[1] = existing_memory[1];\n          new_memory[2] = existing_memory[2];\n          temp4 = temp_pointer2[1];\n          new_memory = temp_pointer2;\n          existing_memory = temp6;\n        }\n        else {\n          move_memory(temp6,existing_memory);\n          temp4 = temp_pointer2[1];\n          new_memory = temp_pointer2;\n          existing_memory = temp6;\n        }\n        goto LAB_00082088;\n      }\n    }\n    temp_pointer2 = (int *)malloc_r(param_pointer,size);\n    if (temp_pointer2 == (int *)0x0) goto LAB_000820a0;\n    temp4 = prev_size;\n    if (temp_pointer2 + -2 != (int *)((temp4 & 0xfffffffe) + (int)new_memory)) {\n      temp7 = temp7 - 4;\n      if (temp7 < 0x25) {\n        new_memory = existing_memory;\n        temp6 = temp_pointer2;\n        if (0x13 < temp7) {\n          *temp_pointer2 = *existing_memory;\n          temp_pointer2[1] = existing_memory[1];\n          if (temp7 < 0x1c) {\n            new_memory = existing_memory + 2;\n            temp6 = temp_pointer2 + 2;\n          }\n          else {\n            temp_pointer2[2] = existing_memory[2];\n            temp_pointer2[3] = existing_memory[3];\n            if (temp7 == 0x24) {\n              temp_pointer2[4] = existing_memory[4];\n              temp_pointer2[5] = existing_memory[5];\n              new_memory = existing_memory + 6;\n              temp6 = temp_pointer2 + 6;\n            }\n            else {\n              new_memory = existing_memory + 4;\n              temp6 = temp_pointer2 + 4;\n            }\n          }\n        }\n        *temp6 = *new_memory;\n        temp6[1] = new_memory[1];\n        temp6[2] = new_memory[2];\n      }\n      else {\n        move_memory(temp_pointer2,existing_memory);\n      }\n      free_r(param_pointer,existing_memory);\n      goto LAB_000820a0;\n    }\n    temp7 = temp7 + (temp_pointer2[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  temp2 = temp7 - aligned_size;\n  temp_pointer2 = existing_memory;\n  if (temp2 < 0x10) {\n    new_memory[1] = temp4 & 1 | temp7;\n    *(uint *)((int)new_memory + temp7 + 4) = *(uint *)((int)new_memory + temp7 + 4) | 1;\n  }\n  else {\n    new_memory[1] = temp4 & 1 | aligned_size;\n    *(uint *)((int)new_memory + aligned_size + 4) = temp2 | 1;\n    *(uint *)((int)new_memory + temp2 + aligned_size + 4) = *(uint *)((int)new_memory + temp2 + aligned_size + 4) | 1;\n    free_r(param_pointer,(int)new_memory + aligned_size + 8);\n  }\nLAB_000820a0:\n  malloc_unlock(param_pointer);\n  return temp_pointer2;\n}\n\n",
            "renaming": {
                "FUN_00081fac": "allocate_memory_00081fac",
                "param_1": "param_pointer",
                "param_2": "existing_memory",
                "param_3": "size",
                "dVar1": "temp1",
                "piVar2": "new_memory",
                "uVar3": "temp2",
                "iVar4": "temp3",
                "uVar5": "temp4",
                "iVar6": "temp5",
                "piVar7": "temp6",
                "uVar8": "temp7",
                "uVar9": "aligned_size",
                "piVar10": "temp_pointer2",
                "Elf32_Rel_ARRAY_20070000[141].r_info": "info_value",
                "__malloc_lock": "malloc_lock",
                "__malloc_unlock": "malloc_unlock",
                "_malloc_r": "malloc_r",
                "_free_r": "free_r",
                "Elf32_Rel_ARRAY_20070000": "elf_rel_array",
                "memmove": "move_memory",
                "param_2[-1]": "prev_size"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_00081f9c"
            ],
            "called": [
                "FUN_00081f98",
                "FUN_00083b10",
                "FUN_00081810",
                "FUN_00081e34",
                "FUN_00081f94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00081fac": {
                    "2": "realloc_memory",
                    "1": "improved_allocate_memory",
                    "3": "reallocate_memory",
                    "19": "allocate_memory"
                },
                "param_1": {
                    "1": "param_1",
                    "4": "param_pointer",
                    "3": "context",
                    "2": "param"
                },
                "param_2": {
                    "1": "original_memory",
                    "3": "memory_block",
                    "7": "existing_memory",
                    "2": "param2",
                    "4": "ptr"
                },
                "param_3": {
                    "2": "requested_size",
                    "1": "block_size",
                    "3": "new_size",
                    "14": "size"
                },
                "dVar1": {
                    "3": "address",
                    "1": "rel_info",
                    "2": "data_var1",
                    "4": "temp",
                    "7": "temp1"
                },
                "piVar2": {
                    "3": "new_memory_block",
                    "1": "result_pointer",
                    "8": "new_memory"
                },
                "uVar3": {
                    "1": "size_difference",
                    "2": "size",
                    "8": "temp2"
                },
                "iVar4": {
                    "1": "temp4",
                    "4": "temp_var1",
                    "2": "temp_int1",
                    "6": "temp3"
                },
                "uVar5": {
                    "1": "previous_block_size",
                    "2": "var5",
                    "6": "temp4"
                },
                "iVar6": {
                    "6": "temp5",
                    "2": "temp_int2",
                    "1": "next_size",
                    "4": "temp_var2",
                    "3": "temp2"
                },
                "piVar7": {
                    "2": "temp_pointer",
                    "1": "pointer1",
                    "6": "temp6",
                    "3": "temp_ptr",
                    "5": "temp_pointer1"
                },
                "uVar8": {
                    "1": "temp4",
                    "3": "total_size",
                    "5": "temp7",
                    "2": "new_size"
                },
                "uVar9": {
                    "1": "new_size",
                    "2": "rounded_size",
                    "10": "aligned_size",
                    "5": "temp8"
                },
                "piVar10": {
                    "1": "temp4",
                    "5": "temp9",
                    "6": "temp_pointer2"
                },
                "Elf32_Rel_ARRAY_20070000[141].r_info": {
                    "1": "temp10"
                },
                "FUNC_00081f98": {
                    "1": "initialize_heap_manager"
                },
                "FUN_00083b10": {
                    "1": "lock_heap"
                },
                "FUN_00081810": {
                    "1": "allocate_new_memory"
                },
                "FUN_00081e34": {
                    "1": "move_data"
                },
                "FUNC_00081f94": {
                    "1": "unlock_heap"
                },
                "__malloc_lock": {
                    "1": "acquire_lock"
                },
                "__malloc_unlock": {
                    "1": "malloc_unlock"
                },
                "_malloc_r": {
                    "1": "allocate_memory_r"
                },
                "_free_r": {
                    "1": "free_r"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "symbol_table",
                    "2": "elf_rel_array"
                },
                "memmove": {
                    "2": "move_memory"
                },
                "Elf32_Rel_ARRAY_20070000[141].r_info + 4": {
                    "1": "temp11"
                },
                "param_1[0]": {
                    "1": "error_code"
                },
                "*(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc": {
                    "1": "temp12"
                },
                "param_2[-1]": {
                    "1": "prev_size"
                },
                "uVar8 & 0xfffffffc": {
                    "1": "aligned_prev_size"
                },
                "param_2 + -2": {
                    "1": "prev_block"
                },
                "param_3 + 0xb": {
                    "1": "new_size"
                },
                "uVar9 < param_3 + 0xb": {
                    "1": "need_reallocate"
                },
                "(int)uVar8 < (int)uVar9": {
                    "1": "can_split_block"
                },
                "intValue1": {
                    "1": "new_value1"
                },
                "intValue2": {
                    "1": "new_value2"
                }
            }
        },
        "FUN_0008236c": {
            "entrypoint": "0x0008236c",
            "current_name": "allocate_memory_0008236c",
            "code": "\nvoid allocate_memory_0008236c(int *result,undefined4 size)\n\n{\n  int allocation_result;\n  \n  DAT_20071244 = 0;\n  allocation_result = _sbrk(size);\n  if ((allocation_result == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008236c": "allocate_memory_0008236c",
                "param_1": "result",
                "param_2": "size",
                "iVar1": "allocation_result"
            },
            "calling": [
                "FUN_00083a74",
                "FUN_00081810"
            ],
            "called": [
                "FUN_00080e88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008236c": {
                    "30": "allocate_memory",
                    "1": "initialize_memory"
                },
                "param_1": {
                    "1": "output_buffer",
                    "5": "result_ptr",
                    "2": "memory_pointer",
                    "7": "result",
                    "3": "result_pointer"
                },
                "param_2": {
                    "1": "size_to_allocate",
                    "3": "allocation_size",
                    "25": "size"
                },
                "iVar1": {
                    "1": "result",
                    "2": "sbrk_result",
                    "5": "allocated_memory",
                    "13": "allocation_result"
                },
                "FUN_00080e88": {
                    "1": "check_allocation"
                }
            }
        },
        "FUN_00082390": {
            "entrypoint": "0x00082390",
            "current_name": "compare_uint_arrays_00082390",
            "code": "\nint compare_uint_arrays_00082390(uint *array1,uint *array2)\n\n{\n  uint *ptr1;\n  int result;\n  uint *ptr2;\n  uint *ptr3;\n  uint value1;\n  uint value1;\n  uint value2;\n  uint temp1;\n  uint temp2;\n  \n  if ((((uint)array1 | (uint)array2) & 7) != 0) {\n    ptr1 = array1;\n    if (((uint)array1 & 3) != 0) {\n      ptr1 = (uint *)((uint)array1 & 0xfffffffc) + 1;\n      value1 = *(uint *)((uint)array1 & 0xfffffffc);\n      ptr2 = array2;\n      if (((uint)array1 & 1) == 0) {\ncheck_loop:\n        ptr3 = (uint *)((int)ptr2 + 1);\n        value1 = value1 >> 0x10 & 0xff;\n        result = value1 - *(byte *)ptr2;\n        if (result != 0) {\n          return result;\n        }\n        if (value1 == 0) {\n          return 0;\n        }\n      }\n      else {\n        ptr3 = array2;\n        if (((uint)array1 & 2) == 0) {\n          ptr2 = (uint *)((int)array2 + 1);\n          value1 = value1 >> 8 & 0xff;\n          result = value1 - *(byte *)array2;\n          if (result != 0) {\n            return result;\n          }\n          if (value1 == 0) {\n            return 0;\n          }\n          goto check_loop;\n        }\n      }\n      array2 = (uint *)((int)ptr3 + 1);\n      result = (value1 >> 0x18) - (uint)*(byte *)ptr3;\n      if ((result != 0) || (value1 >> 0x18 == 0)) {\n        return result;\n      }\n    }\n    value1 = (uint)array2 & 3;\n    if (value1 != 0) {\n      array2 = (uint *)((uint)array2 & 0xfffffffc);\n      if (value1 == 2) {\n        value1 = *array2;\n        do {\n          array2 = array2 + 1;\n          value2 = *ptr1;\n          value1 = value1 >> 0x10;\n          temp1 = value2 + 0xfefefeff & ~value2;\n          temp2 = temp1 & 0x80808080;\n          value1 = value2 & 0xffff;\n          if ((temp1 & 0x8080) != 0 || value1 != value1) goto LAB_0008258e;\n          value1 = *array2;\n          value1 = value1 ^ value2;\n          value2 = value1 * 0x10000;\n          ptr1 = ptr1 + 1;\n        } while (temp2 == 0 && value1 == value2);\n      }\n      else if (value1 < 2) {\n        value1 = *array2;\n        do {\n          array2 = array2 + 1;\n          value2 = *ptr1;\n          value1 = value1 >> 8;\n          temp1 = value2 + 0xfefefeff & ~value2;\n          temp2 = temp1 & 0x80808080;\n          value1 = value2 & 0xffffff;\n          if ((temp1 & 0x808080) != 0 || value1 != value1) goto LAB_0008258e;\n          value1 = *array2;\n          value1 = value1 ^ value2;\n          value2 = value1 * 0x1000000;\n          ptr1 = ptr1 + 1;\n        } while (temp2 == 0 && value1 == value2);\n      }\n      else {\n        value1 = *array2;\n        do {\n          array2 = array2 + 1;\n          value2 = *ptr1;\n          value1 = value1 >> 0x18;\n          temp1 = value2 + 0xfefefeff & ~value2;\n          temp2 = temp1 & 0x80808080;\n          value1 = value2 & 0xff;\n          if ((temp1 & 0x80) != 0 || value1 != value1) goto LAB_0008258e;\n          value1 = *array2;\n          value1 = value1 ^ value2;\n          value2 = value1 * 0x100;\n          ptr1 = ptr1 + 1;\n        } while (temp2 == 0 && value1 == value2);\n      }\n      value1 = value1 << 0x18 | (value1 >> 8 & 0xff) << 0x10 | (value1 >> 0x10 & 0xff) << 8 |\n              value1 >> 0x18;\n      value1 = (value2 >> 8 & 0xff) << 0x10 | (value2 >> 0x10 & 0xff) << 8 | value2 >> 0x18;\n      goto LAB_0008259e;\n    }\n    array1 = ptr1;\n    ptr2 = array2;\n    if (((uint)ptr1 & 4) != 0) {\n      array1 = ptr1 + 1;\n      value1 = *ptr1;\n      ptr2 = array2 + 1;\n      value2 = *array2;\n      temp2 = value1 + 0xfefefeff & ~value1 & 0x80808080;\n      if (value1 != value2 || temp2 != 0) {\nLAB_0008259a:\n        value1 = value1 << 0x18 | (value1 >> 8 & 0xff) << 0x10 | (value1 >> 0x10 & 0xff) << 8 |\n                value1 >> 0x18;\n        value1 = value2 << 0x18 | (value2 >> 8 & 0xff) << 0x10 | (value2 >> 0x10 & 0xff) << 8 |\n                value2 >> 0x18;\n        goto LAB_0008259e;\n      }\n    }\n    array2 = ptr2;\n    if (((uint)ptr2 & 4) != 0) {\n      value1 = *ptr2;\n      ptr1 = ptr2 + 1;\n      do {\n        value1 = *array1;\n        value2 = array1[1];\n        temp2 = value1 + 0xfefefeff & ~value1 & 0x80808080;\n        if (value1 != value1 || temp2 != 0) goto LAB_0008258e;\n        temp1 = *ptr1;\n        value1 = ptr1[1];\n        temp2 = value2 + 0xfefefeff & ~value2 & 0x80808080;\n        array1 = array1 + 2;\n        ptr1 = ptr1 + 2;\n      } while (value2 == temp1 && temp2 == 0);\n      value1 = value2 << 0x18 | (value2 >> 8 & 0xff) << 0x10 | (value2 >> 0x10 & 0xff) << 8 |\n              value2 >> 0x18;\n      value1 = temp1 << 0x18 | (temp1 >> 8 & 0xff) << 0x10 | (temp1 >> 0x10 & 0xff) << 8 |\n              temp1 >> 0x18;\n      goto LAB_0008259e;\n    }\n  }\n  do {\n    value1 = *array1;\n    value1 = array1[1];\n    value2 = *array2;\n    temp1 = array2[1];\n    temp2 = value1 + 0xfefefeff & ~value1 & 0x80808080;\n    if (value1 != value2 || temp2 != 0) goto LAB_0008259a;\n    temp2 = value1 + 0xfefefeff & ~value1 & 0x80808080;\n    array1 = array1 + 2;\n    array2 = array2 + 2;\n  } while (value1 == temp1 && temp2 == 0);\n  value1 = value1 << 0x18 | (value1 >> 8 & 0xff) << 0x10 | (value1 >> 0x10 & 0xff) << 8 | value1 >> 0x18;\n  value1 = temp1 << 0x18 | (temp1 >> 8 & 0xff) << 0x10 | (temp1 >> 0x10 & 0xff) << 8 | temp1 >> 0x18;\nLAB_0008259e:\n  value2 = temp2 << 0x18 | (temp2 >> 8 & 0xff) << 0x10 | (temp2 >> 0x10 & 0xff) << 8 | temp2 >> 0x18;\n  if (value2 != 0) {\n    value2 = 0x18 - leading_zero_count(value2);\n    value1 = value1 >> (value2 & 0xff);\n    value1 = value1 >> (value2 & 0xff);\n  }\n  result = 1;\n  if (value1 <= value1) {\n    result = -(uint)(value1 < value1);\n  }\n  return result;\nLAB_0008258e:\n  value1 = value1 << 0x18 | (value1 >> 8 & 0xff) << 0x10 | (value1 >> 0x10 & 0xff) << 8 | value1 >> 0x18;\n  value1 = value1 << 0x18 | (value1 >> 8 & 0xff) << 0x10 | (value1 >> 0x10 & 0xff) << 8 | value1 >> 0x18;\n  goto LAB_0008259e;\n}\n\n",
            "renaming": {
                "FUN_00082390": "compare_uint_arrays_00082390",
                "param_1": "array1",
                "param_2": "array2",
                "puVar1": "ptr1",
                "iVar2": "result",
                "puVar3": "ptr2",
                "puVar4": "ptr3",
                "uVar5": "value1",
                "uVar6": "value1",
                "uVar7": "value2",
                "uVar8": "temp1",
                "uVar9": "temp2",
                "LZCOUNT": "leading_zero_count",
                "LAB_00082410": "check_loop"
            },
            "calling": [
                "FUN_000815b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00082390": {
                    "5": "compare_arrays",
                    "1": "compare_and_return_result",
                    "2": "compare_unsigned_arrays",
                    "6": "compare_uint_arrays",
                    "4": "compare_byte_arrays"
                },
                "param_1": {
                    "1": "ptr1",
                    "2": "unsigned_number1",
                    "17": "array1"
                },
                "param_2": {
                    "1": "numbers2",
                    "2": "unsigned_number2",
                    "17": "array2"
                },
                "puVar1": {
                    "1": "ptr_unsigned_number1",
                    "2": "ptr_array1",
                    "24": "ptr1"
                },
                "iVar2": {
                    "1": "comparison_result",
                    "30": "result"
                },
                "puVar3": {
                    "1": "data2_ptr",
                    "2": "ptr_array2",
                    "24": "ptr2"
                },
                "puVar4": {
                    "2": "ptr",
                    "24": "ptr3",
                    "1": "pointer3"
                },
                "uVar5": {
                    "1": "var1",
                    "2": "size",
                    "3": "length1",
                    "4": "value1"
                },
                "uVar6": {
                    "1": "first_byte",
                    "4": "value2",
                    "2": "element1",
                    "6": "value1"
                },
                "uVar7": {
                    "1": "temp_value3",
                    "2": "element2",
                    "4": "temp3",
                    "3": "value3",
                    "5": "value2"
                },
                "uVar8": {
                    "1": "temp2",
                    "5": "temp1",
                    "2": "temp_var4",
                    "4": "value4",
                    "3": "byte3"
                },
                "uVar9": {
                    "4": "value5",
                    "2": "byte4",
                    "1": "temp4",
                    "3": "temp",
                    "5": "temp2"
                },
                "LZCOUNT": {
                    "1": "leading_zeroes_count",
                    "2": "leading_zero_count"
                },
                "LAB_00082410": {
                    "1": "check_loop"
                }
            }
        },
        "FUN_000825cc": {
            "entrypoint": "0x000825cc",
            "current_name": "copy_string_000825cc",
            "code": "\nvoid copy_string_000825cc(uint *dest,uint *src)\n\n{\n  char current_char;\n  ushort current_short;\n  uint *src_ptr;\n  uint *src_ptr;\n  uint current_word;\n  uint temp;\n  uint *dest_ptr;\n  bool is_zero_byte;\n  \n  if ((((uint)dest ^ (uint)src) & 3) != 0) {\n    do {\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      src = (uint *)((int)src + 1);\n      dest = (uint *)((int)dest + 1);\n    } while (current_char != '\\0');\n    return;\n  }\n  if (((uint)src & 3) != 0) {\n    src_ptr = src;\n    if (((uint)src & 1) != 0) {\n      src_ptr = (uint *)((int)src + 1);\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      dest = (uint *)((int)dest + 1);\n      if (current_char == '\\0') {\n        return;\n      }\n    }\n    src = src_ptr;\n    if (((uint)src_ptr & 2) != 0) {\n      src = (uint *)((int)src_ptr + 2);\n      current_short = *(ushort *)src_ptr;\n      is_zero_byte = (current_short & 0xff) == 0;\n      if (is_zero_byte) {\n        *(char *)dest = (char)current_short;\n      }\n      else {\n        *(ushort *)dest = current_short;\n        is_zero_byte = (current_short & 0xff00) == 0;\n        dest = (uint *)((int)dest + 2);\n      }\n      if (is_zero_byte) {\n        return;\n      }\n    }\n  }\n  current_word = *src;\n  src_ptr = src + 1;\n  dest_ptr = dest;\n  if (((uint)src & 4) != 0) {\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) goto skip_copy_loop;\n    dest_ptr = dest + 1;\n    *dest = current_word;\n    src_ptr = src + 2;\n    current_word = src[1];\n  }\n  while( true ) {\n    src_ptr = src_ptr + 1;\n    temp = *src_ptr;\n    dest = dest_ptr;\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) break;\n    dest = dest_ptr + 1;\n    *dest_ptr = current_word;\n    current_word = temp;\n    if ((temp + 0xfefefeff & ~temp & 0x80808080) != 0) break;\n    src_ptr = src_ptr + 2;\n    current_word = *src_ptr;\n    dest_ptr = dest_ptr + 2;\n    *dest = temp;\n  }\nskip_copy_loop:\n  do {\n    *(char *)dest = (char)current_word;\n    temp = current_word & 0xff;\n    current_word = current_word >> 8 | current_word << 0x18;\n    dest = (uint *)((int)dest + 1);\n  } while (temp != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825cc": "copy_string_000825cc",
                "param_1": "dest",
                "param_2": "src",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "puVar3": "src_ptr",
                "puVar4": "src_ptr",
                "uVar5": "current_word",
                "uVar6": "temp",
                "puVar7": "dest_ptr",
                "bVar8": "is_zero_byte",
                "LAB_00082630": "skip_copy_loop"
            },
            "calling": [
                "FUN_0008151c",
                "FUN_000814d0",
                "FUN_00081570"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000825cc": {
                    "1": "copy_string_with_padding",
                    "4": "copy_string_with_alignment",
                    "20": "copy_string"
                },
                "param_1": {
                    "18": "dest",
                    "11": "destination",
                    "2": "dest_string"
                },
                "param_2": {
                    "1": "src_string",
                    "12": "source",
                    "17": "src"
                },
                "cVar1": {
                    "23": "current_char",
                    "1": "char",
                    "3": "curr_char"
                },
                "uVar2": {
                    "22": "current_short",
                    "1": "current_word",
                    "3": "curr_short"
                },
                "puVar3": {
                    "1": "next_int_ptr",
                    "3": "temp_ptr",
                    "2": "next_source",
                    "4": "src_ptr"
                },
                "puVar4": {
                    "1": "next_pointer2",
                    "2": "src_ptr"
                },
                "uVar5": {
                    "2": "src_value",
                    "11": "current_word",
                    "3": "current_value",
                    "1": "current_u_int",
                    "5": "current_uint"
                },
                "uVar6": {
                    "3": "current_byte",
                    "1": "current_word_temp",
                    "2": "current_value"
                },
                "puVar7": {
                    "1": "destination_pointer",
                    "6": "destination_ptr",
                    "11": "dest_ptr"
                },
                "bVar8": {
                    "12": "is_zero_byte",
                    "1": "is_null_byte",
                    "8": "is_zero",
                    "2": "is_short_zero"
                },
                "LAB_00082630": {
                    "1": "skip_copy_loop"
                }
            }
        },
        "FUN_00082688": {
            "entrypoint": "0x00082688",
            "current_name": "count_leading_zeros_00082688",
            "code": "\nint count_leading_zeros_00082688(uint input)\n\n{\n  int leading_zeros;\n  uint *ptr;\n  uint value;\n  bool is_zero;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  leading_zeros = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((leading_zeros + 4U & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    leading_zeros = leading_zeros + 4;\n    value = *ptr;\n  }\n  is_zero = (value & 0xff) == 0;\n  if (!is_zero) {\n    leading_zeros = leading_zeros + 1;\n    is_zero = (value & 0xff00) == 0;\n  }\n  if (!is_zero) {\n    leading_zeros = leading_zeros + 1;\n    is_zero = (value & 0xff0000) == 0;\n  }\n  if (!is_zero) {\n    leading_zeros = leading_zeros + 1;\n  }\n  return leading_zeros;\n}\n\n",
            "renaming": {
                "FUN_00082688": "count_leading_zeros_00082688",
                "param_1": "input",
                "iVar1": "leading_zeros",
                "puVar2": "ptr",
                "uVar3": "value",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_000814f6",
                "FUN_000810a6",
                "FUN_0008289c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00082688": {
                    "1": "count_zero_bytes",
                    "4": "count_trailing_zeros",
                    "20": "count_leading_zeros",
                    "2": "count_leading_zeroes"
                },
                "param_1": {
                    "22": "input",
                    "4": "value",
                    "3": "num",
                    "2": "input_value"
                },
                "iVar1": {
                    "4": "trailing_zeros",
                    "1": "leading_zeros_count",
                    "2": "count",
                    "19": "leading_zeros"
                },
                "puVar2": {
                    "1": "word_ptr",
                    "16": "ptr",
                    "2": "p_input"
                },
                "uVar3": {
                    "1": "word_value",
                    "2": "current_word",
                    "17": "value",
                    "6": "current_value",
                    "3": "word"
                },
                "bVar4": {
                    "1": "is_byte_zero",
                    "29": "is_zero"
                }
            }
        },
        "FUN_00082824": {
            "entrypoint": "0x00082824",
            "current_name": "write_to_file_00082824",
            "code": "\nint write_to_file_00082824(undefined4 stream,int buffer_size,int **buffer)\n\n{\n  int *current_buffer;\n  int result;\n  int *remaining_data;\n  uint counter;\n  undefined4 *current_element;\n  uint buffer_size;\n  uint word_count;\n  \n  if (-1 < *(int *)(buffer_size + 100) << 0x12) {\n    result = flush_buffer();\n    buffer[2] = (int *)0x0;\n    buffer[1] = (int *)0x0;\n    return result;\n  }\n  remaining_data = buffer[2];\n  current_buffer = *buffer;\n  while (remaining_data != (int *)0x0) {\n    buffer_size = current_buffer[1];\n    word_count = buffer_size >> 2;\n    if (word_count != 0) {\n      current_element = (undefined4 *)(*current_buffer + -4);\n      counter = 0;\n      do {\n        current_element = current_element + 1;\n        result = write_character(stream,*current_element,buffer_size);\n        counter = counter + 1;\n        if (result == -1) goto LAB_00082864;\n      } while (word_count != counter);\n      remaining_data = buffer[2];\n    }\n    remaining_data = (int *)((int)remaining_data - (buffer_size & 0xfffffffc));\n    buffer[2] = remaining_data;\n    current_buffer = current_buffer + 2;\n  }\n  result = 0;\nLAB_00082864:\n  buffer[2] = (int *)0x0;\n  buffer[1] = (int *)0x0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082824": "write_to_file_00082824",
                "param_1": "stream",
                "param_2": "buffer_size",
                "param_3": "buffer",
                "piVar1": "current_buffer",
                "iVar2": "result",
                "piVar3": "remaining_data",
                "uVar4": "counter",
                "puVar5": "current_element",
                "uVar6": "buffer_size",
                "uVar7": "word_count",
                "_fputwc_r": "write_character",
                "__sfvwrite_r": "flush_buffer"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00083ca8",
                "FUN_000839b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00082824": {
                    "19": "write_to_file",
                    "8": "write_data_to_file",
                    "1": "write_buffer_data"
                },
                "param_1": {
                    "8": "file_descriptor",
                    "1": "param",
                    "4": "file_stream",
                    "2": "file"
                },
                "param_2": {
                    "1": "length",
                    "18": "buffer_size",
                    "8": "file_descriptor"
                },
                "param_3": {
                    "5": "data",
                    "1": "buffer_array",
                    "2": "file_data",
                    "3": "data_buffer",
                    "6": "buffer"
                },
                "piVar1": {
                    "1": "data_pointer1",
                    "3": "data_pointer",
                    "7": "current_buffer",
                    "6": "current_data"
                },
                "iVar2": {
                    "4": "write_result",
                    "21": "result",
                    "3": "return_value",
                    "2": "write_status"
                },
                "piVar3": {
                    "1": "remaining_contents",
                    "2": "data_array_pointer",
                    "7": "remaining_data"
                },
                "uVar4": {
                    "5": "loop_counter",
                    "6": "index",
                    "1": "write_counter",
                    "8": "counter",
                    "2": "write_result"
                },
                "puVar5": {
                    "2": "current_byte",
                    "1": "word_ptr",
                    "7": "current_element",
                    "6": "current_char"
                },
                "uVar6": {
                    "4": "buffer_size",
                    "2": "current_size",
                    "1": "word",
                    "3": "current_value"
                },
                "uVar7": {
                    "1": "num_words",
                    "2": "num_buffers",
                    "5": "word_count",
                    "3": "loop_counter"
                },
                "_fputwc_r": {
                    "1": "write_character"
                },
                "__sfvwrite_r": {
                    "1": "flush_buffered_data"
                }
            }
        },
        "FUN_0008289c": {
            "entrypoint": "0x0008289c",
            "current_name": "format_string_0008289c",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint format_string_0008289c(int buffer,int format,int *******args,int **args_ptr)\n\n{\n  bool has_plus_flag;\n  bool is_left_justified;\n  bool has_hash_flag;\n  char sign_char;\n  bool has_zero_flag;\n  int ********format_args;\n  int *arg_ptr;\n  int result;\n  char temp_char;\n  int *******format_ptr;\n  uint digit;\n  int **arg_ptr;\n  uint flags;\n  uint ch;\n  int arg_index;\n  int ********temp_buffer_ptr;\n  int chunk_index;\n  int *******format_length;\n  int *arg_value;\n  int *******is_negative;\n  uint precision;\n  int *precision_ptr;\n  int *******temp_temp_format_ptr;\n  undefined4 temp_value;\n  int ********temp_temp_temp_buffer_ptr;\n  bool is_negative;\n  longlong combined_arg;\n  int *******max_width;\n  int *******remaining_width;\n  int **args_ptr;\n  int result_length;\n  char *hex_chars;\n  char sign_char;\n  undefined padding_char;\n  undefined padding_character_a0;\n  int ********buffer_ptr;\n  int arg_count;\n  int *******converted_args;\n  undefined padding_character_a1;\n  char temp_char;\n  undefined temp_char;\n  undefined temp_buffer [4];\n  int *******local_buffers [16];\n  \n  if ((buffer != 0) && (*(int *)(buffer + 0x38) == 0)) {\n    __sinit();\n  }\n  flags = (uint)*(ushort *)(format + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(format + 0xc) << 0x12)) {\n    flags = flags | 0x2000;\n    *(short *)(format + 0xc) = (short)flags;\n    *(uint *)(format + 100) = *(uint *)(format + 100) & 0xffffdfff;\n  }\n  if (((int)(flags << 0x1c) < 0) && (*(int *)(format + 0x10) != 0)) {\n    if ((flags & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    result = __swsetup_r(buffer,format);\n    if (result != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(format + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(format + 0xe)) {\n    result = __sbprintf(buffer,format,args,args_ptr);\n    return result;\n  }\nLAB_000828ee:\n  hex_chars = (char *)0x0;\n  converted_args = (int *******)0x0;\n  arg_count = 0;\n  result_length = 0;\n  format_args = (int ********)temp_buffer;\n  args_ptr = args_ptr;\n  buffer_ptr = (int ********)temp_buffer;\nLAB_00082902:\n  format_ptr = args;\n  if ((*(char *)args != '\\0') && (*(char *)args != '%')) {\n    do {\n      format_ptr = (int *******)((int)format_ptr + 1);\n      if (*(char *)format_ptr == '\\0') break;\n    } while (*(char *)format_ptr != '%');\n    is_negative = (int *******)((int)format_ptr - (int)args);\n    if (is_negative != (int *******)0x0) {\n      arg_count = arg_count + 1;\n      converted_args = (int *******)((int)converted_args + (int)is_negative);\n      *format_args = args;\n      format_args[1] = is_negative;\n      if (arg_count < 8) {\n        format_args = format_args + 2;\n      }\n      else {\n        if (converted_args == (int *******)0x0) {\n          result_length = result_length + (int)is_negative;\n          arg_count = 0;\n          format_args = (int ********)temp_buffer;\n          goto LAB_00082952;\n        }\n        result = __sprint_r_part_0(buffer,format,&buffer_ptr);\n        format_args = (int ********)temp_buffer;\n        if (result != 0) goto LAB_00083142;\n      }\n      result_length = result_length + (int)is_negative;\n    }\n  }\nLAB_00082952:\n  if (*(char *)format_ptr != '\\0') {\n    sign_char = '\\0';\n    ch = (uint)*(byte *)((int)format_ptr + 1);\n    flags = 0;\n    has_zero_flag = false;\n    is_left_justified = false;\n    has_plus_flag = false;\n    has_hash_flag = false;\n    is_negative = false;\n    is_negative = (int *******)0x0;\n    remaining_width = (int *******)0xffffffff;\n    args = (int *******)((int)format_ptr + 1);\nLAB_00082976:\n    args = (int *******)((int)args + 1);\nLAB_0008297a:\n    switch(ch) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (ch != 0) {\n        max_width = (int *******)0x1;\n        remaining_width = (int *******)0x1;\n        temp_temp_temp_buffer_ptr = (int ********)&padding_character_a1;\n        padding_character_a1 = (char)ch;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      has_hash_flag = true;\n      ch = (uint)*(byte *)args;\n      goto LAB_00082976;\n    case 0x2a:\n      is_negative = (int *******)*args_ptr;\n      args_ptr = args_ptr + 1;\n      if ((int)is_negative < 0) {\n        is_negative = (int *******)-(int)is_negative;\n        goto switchD_00082984_caseD_2d;\n      }\n      ch = (uint)*(byte *)args;\n      goto LAB_00082976;\n    case 0x2b:\n      ch = (uint)*(byte *)args;\n      sign_char = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      flags = flags | 4;\n      ch = (uint)*(byte *)args;\n      goto LAB_00082976;\n    case 0x2e:\n      ch = (uint)*(byte *)args;\n      format_ptr = (int *******)((int)args + 1);\n      if (ch == 0x2a) {\n        ch = (uint)*(byte *)((int)args + 1);\n        remaining_width = (int *******)*args_ptr;\n        args_ptr = args_ptr + 1;\n        args = format_ptr;\n        if ((int)remaining_width < 0) {\n          remaining_width = (int *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      digit = ch - 0x30;\n      if (digit < 10) {\n        precision = 0;\n        do {\n          args = (int *******)((int)format_ptr + 1);\n          ch = (uint)*(byte *)format_ptr;\n          precision = digit + precision * 10;\n          digit = ch - 0x30;\n          format_ptr = args;\n        } while (digit < 10);\n        remaining_width = (int *******)(precision | (int)precision >> 0x1f);\n      }\n      else {\n        remaining_width = (int *******)0x0;\n        args = format_ptr;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      flags = flags | 0x80;\n      ch = (uint)*(byte *)args;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      is_left_justified = true;\n      if (has_plus_flag == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      args_ptr = (int **)((int)args_ptr + 7U & 0xfffffff8);\n      arg_value = *args_ptr;\n      precision_ptr = args_ptr[1];\n      args_ptr = args_ptr + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      is_left_justified = true;\n      if (has_plus_flag != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      result = (uint)is_left_justified << 4;\n      arg_index = (uint)has_plus_flag << 5;\n      if ((is_left_justified == 0) && (arg_index = (uint)is_negative << 6, is_negative != 0)) {\n        arg_value = (int *)(uint)*(ushort *)args_ptr;\n        args_ptr = args_ptr + 1;\n        precision_ptr = (int *)0x0;\n      }\n      else {\n        result = arg_index;\n        arg_value = *args_ptr;\n        args_ptr = args_ptr + 1;\n        precision_ptr = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      is_left_justified = true;\n      if (has_plus_flag != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((is_left_justified) || (is_negative == false)) {\n        result = 1;\n        arg_value = *args_ptr;\n        args_ptr = args_ptr + 1;\n        precision_ptr = (int *)0x0;\n      }\n      else {\n        precision_ptr = (int *)0x0;\n        arg_value = (int *)(uint)*(ushort *)args_ptr;\n        args_ptr = args_ptr + 1;\n        result = 1;\n      }\n      break;\n    case 0x58:\n      hex_chars = \"0123456789ABCDEF\";\n      if (has_plus_flag == false) goto LAB_00082efa;\nLAB_00082d1a:\n      arg_ptr = (int **)((int)args_ptr + 7U & 0xfffffff8);\n      args_ptr = arg_ptr + 2;\n      arg_value = *arg_ptr;\n      precision_ptr = arg_ptr[1];\n      goto LAB_00082d2e;\n    case 99:\n      arg_value = *args_ptr;\n      args_ptr = args_ptr + 1;\n      max_width = (int *******)0x1;\n      padding_character_a1 = SUB41(arg_value,0);\n      remaining_width = (int *******)0x1;\n      temp_temp_temp_buffer_ptr = (int ********)&padding_character_a1;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (has_plus_flag != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((is_left_justified == false) && (is_negative != false)) {\n        arg_value = (int *)(int)*(short *)args_ptr;\n        args_ptr = args_ptr + 1;\n        precision_ptr = (int *)((int)arg_value >> 0x1f);\n      }\n      else {\n        arg_value = *args_ptr;\n        args_ptr = args_ptr + 1;\n        precision_ptr = (int *)((int)arg_value >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)precision_ptr < 0) {\n        is_negative = arg_value != (int *)0x0;\n        arg_value = (int *)-(int)arg_value;\n        precision_ptr = (int *)(-(int)precision_ptr - (uint)is_negative);\n        sign_char = '-';\n        sign_char = '-';\n        result = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)remaining_width) {\n        flags = flags & 0xffffff7f;\n      }\n      has_zero_flag = false;\n      ch = (uint)arg_value | (uint)precision_ptr;\n      result = 1;\n      sign_char = sign_char;\n      goto joined_r0x00082adc;\n    case 0x68:\n      is_negative = true;\n      ch = (uint)*(byte *)args;\n      goto LAB_00082976;\n    case 0x6c:\n      ch = (uint)*(byte *)args;\n      if (ch == 0x6c) {\n        has_plus_flag = true;\n        ch = (uint)*(byte *)((int)args + 1);\n        args = (int *******)((int)args + 1);\n      }\n      else {\n        is_left_justified = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (has_plus_flag == false) {\n        if (is_left_justified == false) {\n          if (is_negative) {\n            arg_value = *args_ptr;\n            args_ptr = args_ptr + 1;\n            *(short *)arg_value = (short)result_length;\n          }\n          else {\n            arg_value = *args_ptr;\n            args_ptr = args_ptr + 1;\n            *arg_value = result_length;\n          }\n        }\n        else {\n          arg_value = *args_ptr;\n          args_ptr = args_ptr + 1;\n          *arg_value = result_length;\n        }\n      }\n      else {\n        arg_value = *args_ptr;\n        args_ptr = args_ptr + 1;\n        *arg_value = result_length;\n        arg_value[1] = result_length >> 0x1f;\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (has_plus_flag == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      arg_ptr = (int **)((int)args_ptr + 7U & 0xfffffff8);\n      args_ptr = arg_ptr + 2;\n      arg_value = *arg_ptr;\n      precision_ptr = arg_ptr[1];\n      result = 0;\n      break;\n    case 0x70:\n      arg_value = *args_ptr;\n      args_ptr = args_ptr + 1;\n      padding_character_a0 = 0x78;\n      has_zero_flag = true;\n      precision_ptr = (int *)0x0;\n      padding_char = 0x30;\n      hex_chars = \"0123456789abcdef\";\n      result = 2;\n      break;\n    case 0x71:\n      has_plus_flag = true;\n      ch = (uint)*(byte *)args;\n      goto LAB_00082976;\n    case 0x73:\n      temp_temp_temp_buffer_ptr = (int ********)*args_ptr;\n      sign_char = '\\0';\n      args_ptr = args_ptr + 1;\n      if (temp_temp_temp_buffer_ptr != (int ********)0x0) {\n        if ((int)remaining_width < 0) {\n          remaining_width = (int *******)strlen(temp_temp_temp_buffer_ptr);\n          format_ptr = (int *******)0x0;\n          sign_char = sign_char;\n        }\n        else {\n          result = memchr(temp_temp_temp_buffer_ptr,0,remaining_width);\n          sign_char = sign_char;\n          if (result == 0) {\n            format_ptr = (int *******)0x0;\n          }\n          else {\n            format_length = (int *******)(result - (int)temp_temp_temp_buffer_ptr);\n            if ((int)remaining_width <= (int)(int *******)(result - (int)temp_temp_temp_buffer_ptr)) {\n              format_length = remaining_width;\n            }\n            format_ptr = (int *******)0x0;\n            remaining_width = format_length;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((int *******)0x5 < remaining_width) {\n        remaining_width = (int *******)0x6;\n      }\n      max_width = (int *******)((uint)remaining_width & ~((int)remaining_width >> 0x1f));\n      temp_temp_temp_buffer_ptr = (int ********)&UNK_00085728;\nLAB_00082d76:\n      sign_char = '\\0';\n      format_ptr = (int *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!has_plus_flag) goto LAB_00082ce0;\nLAB_00082bc6:\n      arg_ptr = (int **)((int)args_ptr + 7U & 0xfffffff8);\n      args_ptr = arg_ptr + 2;\n      arg_value = *arg_ptr;\n      precision_ptr = arg_ptr[1];\n      result = 1;\n      break;\n    case 0x78:\n      hex_chars = \"0123456789abcdef\";\n      if (has_plus_flag != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((is_left_justified == false) && (is_negative != false)) {\n        precision_ptr = (int *)0x0;\n        arg_value = (int *)(uint)*(ushort *)args_ptr;\n        args_ptr = args_ptr + 1;\n      }\n      else {\n        arg_value = *args_ptr;\n        args_ptr = args_ptr + 1;\n        precision_ptr = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((has_hash_flag) && (((uint)arg_value | (uint)precision_ptr) != 0)) {\n        has_zero_flag = true;\n        padding_char = 0x30;\n        result = 2;\n        padding_character_a0 = (char)ch;\n      }\n      else {\n        result = 2;\n      }\n    }\n    sign_char = '\\0';\n    sign_char = '\\0';\nLAB_00082ace:\n    if (-1 < (int)remaining_width) {\n      flags = flags & 0xffffff7f;\n    }\n    ch = (uint)arg_value | (uint)precision_ptr;\njoined_r0x00082adc:\n    combined_arg = CONCAT44(precision_ptr,arg_value);\n    format_ptr = remaining_width;\n    if ((ch == 0) && (remaining_width == (int *******)0x0)) {\n      temp_temp_temp_buffer_ptr = (int ********)temp_buffer;\n      if ((result != 0) || (!has_hash_flag)) goto LAB_00082b04;\n      temp_temp_temp_buffer_ptr = (int ********)(&temp_char + 1);\n      temp_char = '0';\n      goto LAB_00082afe;\n    }\n    if (result == 1) {\n      if (precision_ptr != (int *)0x0 || (int *)0x9 < arg_value) {\n        temp_buffer_ptr = (int ********)(&temp_char + 1);\n        do {\n          temp_temp_temp_buffer_ptr = temp_buffer_ptr;\n          temp_value = (undefined4)((ulonglong)combined_arg >> 0x20);\n          temp_char = '\\n';\n          __aeabi_uldivmod((int)combined_arg,temp_value,10,0);\n          *(char *)temp_temp_temp_buffer_ptr = temp_char + '0';\n          combined_arg = __aeabi_uldivmod((int)combined_arg,temp_value,10,0);\n          temp_buffer_ptr = (int ********)((int)temp_temp_temp_buffer_ptr + -1);\n        } while (combined_arg != 0);\n        remaining_width = (int *******)((int)temp_buffer - (int)temp_temp_temp_buffer_ptr);\n        goto LAB_00082b04;\n      }\n      temp_char = (char)arg_value + '0';\n      temp_temp_temp_buffer_ptr = (int ********)(&temp_char + 1);\n      goto LAB_00083282;\n    }\n    temp_buffer_ptr = (int ********)(&temp_char + 1);\n    if (result != 2) goto LAB_000830e2;\n    do {\n      temp_temp_temp_buffer_ptr = temp_buffer_ptr;\n      ch = (uint)arg_value & 0xf;\n      arg_value = (int *)((uint)arg_value >> 4 | (int)precision_ptr << 0x1c);\n      precision_ptr = (int *)((uint)precision_ptr >> 4);\n      *(char *)temp_temp_temp_buffer_ptr = hex_chars[ch];\n      temp_buffer_ptr = (int ********)((int)temp_temp_temp_buffer_ptr + -1);\n    } while (((uint)arg_value | (uint)precision_ptr) != 0);\n    remaining_width = (int *******)((int)temp_buffer - (int)temp_temp_temp_buffer_ptr);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (converted_args != (int *******)0x0) {\n    __sprint_r_part_0(buffer,format,&buffer_ptr);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(format + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return result_length;\nLAB_000830e2:\n  do {\n    temp_temp_temp_buffer_ptr = temp_buffer_ptr;\n    arg_ptr = (int *)((uint)arg_value >> 3 | (int)precision_ptr << 0x1d);\n    precision_ptr = (int *)((uint)precision_ptr >> 3);\n    result = ((uint)arg_value & 7) + 0x30;\n    *(char *)temp_temp_temp_buffer_ptr = (char)result;\n    temp_buffer_ptr = (int ********)((int)temp_temp_temp_buffer_ptr + -1);\n    arg_value = arg_ptr;\n  } while (((uint)arg_ptr | (uint)precision_ptr) != 0);\n  if (has_hash_flag) {\n    if (result == 0x30) {\nLAB_00082afe:\n      remaining_width = (int *******)((int)temp_buffer - (int)temp_temp_temp_buffer_ptr);\n    }\n    else {\n      *(undefined *)((int)temp_temp_temp_buffer_ptr + -1) = 0x30;\n      temp_temp_temp_buffer_ptr = temp_buffer_ptr;\n      remaining_width = (int *******)((int)temp_buffer - (int)temp_buffer_ptr);\n    }\n  }\n  else {\nLAB_00083282:\n    remaining_width = (int *******)((int)temp_buffer - (int)temp_temp_temp_buffer_ptr);\n  }\nLAB_00082b04:\n  max_width = remaining_width;\n  if ((int)remaining_width < (int)format_ptr) {\n    max_width = format_ptr;\n  }\n  if (sign_char != '\\0') {\n    max_width = (int *******)((int)max_width + 1);\n  }\nLAB_00082b1e:\n  if (has_zero_flag) {\n    max_width = (int *******)((int)max_width + 2);\n  }\n  if ((flags == 0) &&\n     (format_length = (int *******)((int)is_negative - (int)max_width), 0 < (int)format_length)) {\n    if ((int)format_length < 0x11) {\n      arg_count = arg_count + 1;\n    }\n    else {\n      do {\n        temp_temp_format_ptr = format_length;\n        result = arg_count + 1;\n        converted_args = converted_args + 4;\n        *format_args = (int *******)0x856f0;\n        format_args[1] = (int *******)0x10;\n        if (result < 8) {\n          arg_index = arg_count + 2;\n          format_args = format_args + 2;\n          arg_count = result;\n        }\n        else if (converted_args == (int *******)0x0) {\n          arg_index = 1;\n          format_args = (int ********)temp_buffer;\n          arg_count = 0;\n        }\n        else {\n          arg_count = result;\n          result = __sprint_r_part_0(buffer,format,&buffer_ptr);\n          if (result != 0) goto LAB_00083142;\n          arg_index = arg_count + 1;\n          format_args = (int ********)temp_buffer;\n        }\n        format_length = temp_temp_format_ptr + -4;\n      } while (0x10 < (int)format_length);\n      format_length = temp_temp_format_ptr + -4;\n      arg_count = arg_index;\n    }\n    converted_args = (int *******)((int)converted_args + (int)format_length);\n    *format_args = (int *******)0x856f0;\n    format_args[1] = format_length;\n    if (arg_count < 8) {\n      result = arg_count + 1;\n      format_args = format_args + 2;\n    }\n    else if (converted_args == (int *******)0x0) {\n      result = 1;\n      arg_count = 0;\n      format_args = (int ********)temp_buffer;\n    }\n    else {\n      result = __sprint_r_part_0(buffer,format,&buffer_ptr);\n      if (result != 0) goto LAB_00083142;\n      result = arg_count + 1;\n      format_args = (int ********)temp_buffer;\n    }\n  }\n  else {\n    result = arg_count + 1;\n  }\n  arg_index = result;\n  if (sign_char != '\\0') {\n    converted_args = (int *******)((int)converted_args + 1);\n    arg_index = 1;\n    *format_args = (int *******)&sign_char;\n    format_args[1] = (int *******)0x1;\n    arg_count = result;\n    if (result < 8) {\n      arg_index = result + 1;\n      format_args = format_args + 2;\n    }\n    else if (converted_args == (int *******)0x0) {\n      arg_count = 0;\n      format_args = (int ********)temp_buffer;\n    }\n    else {\n      result = __sprint_r_part_0(buffer,format,&buffer_ptr);\n      if (result != 0) goto LAB_00083142;\n      arg_index = arg_count + 1;\n      format_args = (int ********)temp_buffer;\n    }\n  }\n  result = arg_index;\n  chunk_index = arg_count;\n  if (has_zero_flag) {\n    converted_args = (int *******)((int)converted_args + 2);\n    *format_args = (int *******)&padding_char;\n    format_args[1] = (int *******)0x2;\n    if (arg_index < 8) {\n      result = arg_index + 1;\n      chunk_index = arg_index;\n      format_args = format_args + 2;\n    }\n    else if (converted_args == (int *******)0x0) {\n      result = 1;\n      chunk_index = 0;\n      format_args = (int ********)temp_buffer;\n    }\n    else {\n      arg_count = arg_index;\n      result = __sprint_r_part_0(buffer,format,&buffer_ptr);\n      if (result != 0) goto LAB_00083142;\n      result = arg_count + 1;\n      chunk_index = arg_count;\n      format_args = (int ********)temp_buffer;\n    }\n  }\n  arg_count = chunk_index;\n  if ((flags == 0x80) &&\n     (format_length = (int *******)((int)is_negative - (int)max_width), 0 < (int)format_length)) {\n    if (0x10 < (int)format_length) {\n      do {\n        while( true ) {\n          temp_temp_format_ptr = format_length;\n          arg_count = chunk_index + 1;\n          converted_args = converted_args + 4;\n          *format_args = (int *******)\"0000000000000000\";\n          format_args[1] = (int *******)0x10;\n          if (7 < arg_count) break;\n          result = chunk_index + 2;\n          format_args = format_args + 2;\nLAB_000831f2:\n          chunk_index = arg_count;\n          format_length = temp_temp_format_ptr + -4;\n          if ((int)(temp_temp_format_ptr + -4) < 0x11) goto LAB_00083218;\n        }\n        if (converted_args != (int *******)0x0) {\n          result = __sprint_r_part_0(buffer,format,&buffer_ptr);\n          if (result == 0) {\n            result = arg_count + 1;\n            format_args = (int ********)temp_buffer;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        result = 1;\n        chunk_index = 0;\n        format_length = temp_temp_format_ptr + -4;\n        format_args = (int ********)temp_buffer;\n      } while (0x10 < (int)(temp_temp_format_ptr + -4));\nLAB_00083218:\n      format_length = temp_temp_format_ptr + -4;\n    }\n    converted_args = (int *******)((int)converted_args + (int)format_length);\n    *format_args = (int *******)\"0000000000000000\";\n    format_args[1] = format_length;\n    arg_count = result;\n    if (result < 8) {\n      result = result + 1;\n      format_args = format_args + 2;\n    }\n    else if (converted_args == (int *******)0x0) {\n      result = 1;\n      arg_count = 0;\n      format_args = (int ********)temp_buffer;\n    }\n    else {\n      result = __sprint_r_part_0(buffer,format,&buffer_ptr);\n      if (result != 0) goto LAB_00083142;\n      result = arg_count + 1;\n      format_args = (int ********)temp_buffer;\n    }\n  }\n  format_ptr = (int *******)((int)format_ptr - (int)remaining_width);\n  temp_buffer_ptr = (int ********)temp_buffer;\n  if ((int)format_ptr < 1) {\nLAB_0008302a:\n    converted_args = (int *******)((int)converted_args + (int)remaining_width);\n    *format_args = (int *******)temp_temp_temp_buffer_ptr;\n    format_args[1] = remaining_width;\n    remaining_width = converted_args;\n    arg_count = result;\n    if (result < 8) goto LAB_000831be;\n    if (converted_args == (int *******)0x0) {\n      arg_count = 0;\n    }\n    else {\n      result = __sprint_r_part_0(buffer,format,&buffer_ptr);\n      if (result != 0) goto LAB_00083142;\n    }\n  }\n  else {\n    arg_index = arg_count;\n    if (0x10 < (int)format_ptr) {\n      do {\n        while( true ) {\n          format_length = format_ptr;\n          arg_count = arg_index + 1;\n          converted_args = converted_args + 4;\n          *format_args = (int *******)\"0000000000000000\";\n          format_args[1] = (int *******)0x10;\n          if (7 < arg_count) break;\n          result = arg_index + 2;\n          format_args = format_args + 2;\nLAB_00082fe6:\n          arg_index = arg_count;\n          format_ptr = format_length + -4;\n          if ((int)(format_length + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (converted_args != (int *******)0x0) {\n          result = __sprint_r_part_0(buffer,format,&buffer_ptr);\n          if (result == 0) {\n            result = arg_count + 1;\n            format_args = (int ********)temp_buffer;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        result = 1;\n        format_args = (int ********)temp_buffer;\n        arg_index = 0;\n        format_ptr = format_length + -4;\n      } while (0x10 < (int)(format_length + -4));\nLAB_0008300e:\n      format_ptr = format_length + -4;\n    }\n    converted_args = (int *******)((int)converted_args + (int)format_ptr);\n    *format_args = (int *******)\"0000000000000000\";\n    format_args[1] = format_ptr;\n    if (result < 8) {\n      result = result + 1;\n      format_args = format_args + 2;\n      goto LAB_0008302a;\n    }\n    if (converted_args != (int *******)0x0) {\n      arg_count = result;\n      result = __sprint_r_part_0(buffer,format,&buffer_ptr);\n      if (result != 0) goto LAB_00083142;\n      result = arg_count + 1;\n      format_args = (int ********)temp_buffer;\n      goto LAB_0008302a;\n    }\n    local_buffers[0] = remaining_width;\n    arg_count = 1;\n    format_args = (int ********)temp_buffer;\n    temp_buffer = (undefined  [4])temp_temp_temp_buffer_ptr;\nLAB_000831be:\n    temp_buffer_ptr = format_args + 2;\n    converted_args = remaining_width;\n  }\n  if (((flags & 4) != 0) &&\n     (format_ptr = (int *******)((int)is_negative - (int)max_width), 0 < (int)format_ptr)) {\n    result = arg_count;\n    if ((int)format_ptr < 0x11) {\n      arg_index = arg_count + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          arg_count = result + 1;\n          converted_args = converted_args + 4;\n          *temp_buffer_ptr = (int *******)0x856f0;\n          temp_buffer_ptr[1] = (int *******)0x10;\n          if (7 < arg_count) break;\n          arg_index = result + 2;\n          temp_buffer_ptr = temp_buffer_ptr + 2;\nLAB_0008307a:\n          format_ptr = format_ptr + -4;\n          result = arg_count;\n          if ((int)format_ptr < 0x11) goto LAB_000830a2;\n        }\n        if (converted_args != (int *******)0x0) {\n          result = __sprint_r_part_0(buffer,format,&buffer_ptr);\n          if (result == 0) {\n            arg_index = arg_count + 1;\n            temp_buffer_ptr = (int ********)temp_buffer;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        format_ptr = format_ptr + -4;\n        arg_index = 1;\n        result = 0;\n        temp_buffer_ptr = (int ********)temp_buffer;\n      } while (0x10 < (int)format_ptr);\n    }\nLAB_000830a2:\n    converted_args = (int *******)((int)converted_args + (int)format_ptr);\n    *temp_buffer_ptr = (int *******)0x856f0;\n    temp_buffer_ptr[1] = format_ptr;\n    arg_count = arg_index;\n    if (7 < arg_index) {\n      if (converted_args == (int *******)0x0) {\n        if ((int)max_width < (int)is_negative) {\n          max_width = is_negative;\n        }\n        result_length = result_length + (int)max_width;\n        goto LAB_00083186;\n      }\n      result = __sprint_r_part_0(buffer,format,&buffer_ptr);\n      if (result != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)max_width < (int)is_negative) {\n    max_width = is_negative;\n  }\n  result_length = result_length + (int)max_width;\n  if ((converted_args != (int *******)0x0) &&\n     (result = __sprint_r_part_0(buffer,format,&buffer_ptr), result != 0)) goto LAB_00083142;\nLAB_00083186:\n  arg_count = 0;\n  format_args = (int ********)temp_buffer;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  digit = ch - 0x30;\n  is_negative = (int *******)0x0;\n  format_ptr = args;\n  do {\n    args = (int *******)((int)format_ptr + 1);\n    ch = (uint)*(byte *)format_ptr;\n    is_negative = (int *******)(digit + (int)is_negative * 10);\n    digit = ch - 0x30;\n    format_ptr = args;\n  } while (digit < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  ch = (uint)*(byte *)args;\n  if (sign_char == '\\0') {\n    sign_char = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "renaming": {
                "FUN_0008289c": "format_string_0008289c",
                "param_1": "buffer",
                "param_2": "format",
                "param_3": "args",
                "param_4": "args_ptr",
                "bVar1": "has_plus_flag",
                "bVar2": "is_left_justified",
                "bVar3": "has_hash_flag",
                "bVar5": "has_zero_flag",
                "ppppppppiVar6": "format_args",
                "piVar7": "arg_ptr",
                "iVar8": "result",
                "cVar9": "temp_char",
                "pppppppiVar10": "format_ptr",
                "uVar11": "digit",
                "ppiVar12": "arg_ptr",
                "uVar13": "flags",
                "uVar14": "ch",
                "iVar15": "arg_index",
                "ppppppppiVar16": "temp_buffer_ptr",
                "iVar17": "chunk_index",
                "pppppppiVar18": "format_length",
                "piVar19": "arg_value",
                "pppppppiVar20": "is_negative",
                "uVar21": "precision",
                "piVar22": "precision_ptr",
                "pppppppiVar23": "temp_temp_format_ptr",
                "uVar24": "temp_value",
                "ppppppppiVar25": "temp_temp_temp_buffer_ptr",
                "bVar26": "is_negative",
                "lVar27": "combined_arg",
                "local_dc": "max_width",
                "local_d4": "remaining_width",
                "local_c8": "args_ptr",
                "local_c4": "result_length",
                "local_c0": "hex_chars",
                "local_a1": "sign_char",
                "local_a0": "padding_char",
                "local_9f": "padding_character_a0",
                "local_9c": "buffer_ptr",
                "local_98": "arg_count",
                "local_94": "converted_args",
                "local_90": "padding_character_a1",
                "cStack_6a": "temp_char",
                "local_69": "temp_char",
                "local_68": "temp_buffer",
                "local_64": "local_buffers",
                "pppppppiVar16": "temp_ptr",
                "iVar19": "arg_value",
                "cVar4": "sign_char",
                "pppppppiVar25": "arg_values_ptr",
                "iVar18": "ppppppp_arg_size_diff",
                "ppppppiVar20": "arg_value_ptr",
                "pppppppiVar6": "specifier_params",
                "ppiVar10": "format_specifier"
            },
            "calling": [
                "FUN_000834f0",
                "FUN_000817c8",
                "FUN_00081750"
            ],
            "called": [
                "FUN_00084530",
                "FUN_000834f0",
                "FUN_00082688",
                "FUN_0008356c",
                "FUN_00083888",
                "FUN_00082824",
                "FUN_000840f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008289c": {
                    "1": "print_formatted",
                    "2": "print_formatted_string",
                    "17": "format_string"
                },
                "param_1": {
                    "1": "str_pointer",
                    "2": "output_string",
                    "4": "format_string",
                    "8": "buffer",
                    "5": "output_buffer"
                },
                "param_2": {
                    "1": "length",
                    "2": "format_string",
                    "3": "format_buffer",
                    "9": "format"
                },
                "param_3": {
                    "1": "varargs_pointer",
                    "11": "args",
                    "3": "arguments",
                    "2": "format"
                },
                "param_4": {
                    "4": "args_ptr",
                    "1": "arg_ptr",
                    "2": "arg_pointer"
                },
                "bVar1": {
                    "1": "is_zero_padding",
                    "2": "is_flag_minus",
                    "4": "has_plus_flag"
                },
                "bVar2": {
                    "1": "has_numeric_flag",
                    "3": "is_left_justified",
                    "2": "has_plus_sign"
                },
                "bVar3": {
                    "1": "is_hash_flag",
                    "2": "is_sharp",
                    "4": "has_hash_flag"
                },
                "bVar5": {
                    "2": "is_width",
                    "1": "has_flag_zero",
                    "5": "has_zero_flag"
                },
                "ppppppppiVar6": {
                    "1": "arg_pointer_pointer",
                    "2": "arg_buffer",
                    "3": "format_args"
                },
                "piVar7": {
                    "1": "value1",
                    "3": "arg_ptr",
                    "2": "value"
                },
                "iVar8": {
                    "1": "var1",
                    "3": "index",
                    "2": "status",
                    "12": "result"
                },
                "cVar9": {
                    "1": "var2",
                    "3": "char_value",
                    "4": "temp_char",
                    "2": "digit"
                },
                "pppppppiVar10": {
                    "1": "curr_char_ptr",
                    "5": "format_ptr",
                    "2": "format_string_pointer"
                },
                "uVar11": {
                    "3": "digit_value",
                    "2": "temp_digit",
                    "1": "num_var",
                    "15": "digit"
                },
                "ppiVar12": {
                    "1": "arg_pointer_array",
                    "2": "temp_pointer"
                },
                "uVar13": {
                    "2": "flag",
                    "1": "flag_value",
                    "4": "format_flags",
                    "14": "flags"
                },
                "uVar14": {
                    "7": "ch",
                    "1": "flag_character",
                    "2": "current_char",
                    "3": "format_char"
                },
                "iVar15": {
                    "1": "flag_val",
                    "2": "index",
                    "4": "arg_index",
                    "3": "counter"
                },
                "ppppppppiVar16": {
                    "1": "temp_pointer2"
                },
                "iVar17": {
                    "1": "star_count",
                    "2": "chunk_index"
                },
                "pppppppiVar18": {
                    "1": "format_str_remainder",
                    "2": "temp_ptr",
                    "3": "format_length"
                },
                "piVar19": {
                    "1": "value2",
                    "2": "arg"
                },
                "pppppppiVar20": {
                    "1": "dynamic_width_value"
                },
                "uVar21": {
                    "1": "temp_width",
                    "3": "precision",
                    "2": "value"
                },
                "piVar22": {
                    "1": "temp_arg_pointer",
                    "2": "precision_ptr"
                },
                "pppppppiVar23": {
                    "1": "temp_width"
                },
                "uVar24": {
                    "1": "temp3",
                    "2": "temp_value"
                },
                "ppppppppiVar25": {
                    "1": "leading_zero_str_ptr"
                },
                "bVar26": {
                    "1": "is_short",
                    "7": "is_negative",
                    "2": "has_length_modifier"
                },
                "lVar27": {
                    "2": "value",
                    "1": "temp_variable8",
                    "3": "combined_arg"
                },
                "local_dc": {
                    "1": "total_data_size",
                    "4": "max_width",
                    "2": "buffer_length"
                },
                "local_d4": {
                    "1": "format_ptr_array",
                    "2": "remaining_args"
                },
                "local_c8": {
                    "2": "args_ptr",
                    "1": "arg_ptr_list"
                },
                "local_c4": {
                    "1": "character_count",
                    "2": "total_written",
                    "3": "result"
                },
                "local_c0": {
                    "1": "iteration_char",
                    "5": "hex_chars",
                    "2": "hex_digits",
                    "4": "digits"
                },
                "local_a1": {
                    "1": "width_flag",
                    "2": "conversion_flag",
                    "4": "sign_char"
                },
                "local_a0": {
                    "2": "zero_padding_char",
                    "1": "zero_flag",
                    "4": "pad_char",
                    "6": "padding_char"
                },
                "local_9f": {
                    "1": "format_char"
                },
                "local_9c": {
                    "1": "arg_pointer_array"
                },
                "local_98": {
                    "1": "num_args",
                    "5": "arg_count",
                    "2": "num_format_specifiers"
                },
                "local_94": {
                    "1": "param_block_ptr"
                },
                "local_90": {
                    "1": "zero_padding_char"
                },
                "cStack_6a": {
                    "1": "buffer_for_chars_written",
                    "6": "temp_char"
                },
                "local_69": {
                    "1": "zero_padding_char",
                    "2": "temp_char"
                },
                "local_68": {
                    "1": "temp_buf",
                    "2": "buffer_pointer"
                },
                "local_64": {
                    "1": "temp_temp_temp_buffer_ptr",
                    "2": "local_buffers"
                },
                "pppppppiVar19": {
                    "1": "pp_args"
                },
                "ppppppppiVar20": {
                    "1": "pp_format_specifier"
                },
                "pppppppiVar16": {
                    "1": "temp_formatted_string_ptr"
                },
                "iVar19": {
                    "1": "arg_value"
                },
                "cVar4": {
                    "2": "flag_char",
                    "1": "flag_character",
                    "7": "sign_char",
                    "3": "padding_char"
                },
                "pppppppiVar25": {
                    "1": "arg_values_ptr"
                },
                "pppppppvippppppivar18": {
                    "1": "remaining_format"
                },
                "pppppppppiVar19": {
                    "1": "arg_ptr2"
                },
                "ppppvivar23": {
                    "1": "number_of_digits"
                },
                "uVar27": {
                    "1": "dividend_lower"
                },
                "iVar18": {
                    "1": "ppppppp_arg_size_diff"
                },
                "ppppppppiVar23": {
                    "1": "pppppppp_temp_pointer_array"
                },
                "bffr1": {
                    "1": "format_buf"
                },
                "bffr2": {
                    "1": "format_buf2"
                },
                "bffr3": {
                    "1": "format_buf3"
                },
                "ppppppiVar20": {
                    "1": "arg_value_ptr"
                },
                "ppppppppiVar18": {
                    "1": "arg_offset"
                },
                "cVar26": {
                    "1": "is_long_arg"
                },
                "pppppppiVar6": {
                    "1": "args_ptr_array"
                },
                "ppiVar10": {
                    "1": "format_specifier"
                },
                "local_xxx": {
                    "1": "new_local_name"
                },
                "xxx": {
                    "1": "new_local_name"
                },
                "FUN_00084530": {
                    "1": "reverse_string"
                },
                "FUN_000834f0": {
                    "1": "unsigned_int_to_string"
                },
                "FUN_00082688": {
                    "1": "count_leading_zeros"
                },
                "FUN_0008356c": {
                    "1": "get_int_width"
                },
                "FUN_00083888": {
                    "1": "print_char"
                },
                "FUN_00082824": {
                    "1": "copy_string_to_buffer"
                },
                "FUN_000840f8": {
                    "1": "parse_format_specifier"
                },
                "\u00e2\u0080\u00a6": {
                    "1": "\u00e2\u0080\u00a6"
                },
                "ppppppppiVar10": {
                    "1": "str_ptr"
                },
                "cStack_69": {
                    "1": "char_stack_69"
                },
                "cStack_66": {
                    "1": "char_stack_66"
                },
                "local_68 [4]": {
                    "1": "temp_buff"
                },
                "local_64 [16]": {
                    "1": "temp_buff"
                },
                "ppVar12": {
                    "1": "arg_ptr_list"
                }
            }
        },
        "FUN_000834f0": {
            "entrypoint": "0x000834f0",
            "current_name": "print_and_flush_000834f0",
            "code": "\nint print_and_flush_000834f0(undefined4 output_stream,int data)\n\n{\n  int result;\n  int flush_result;\n  undefined *buffer [2];\n  undefined4 buffer_size;\n  ushort flag;\n  undefined2 value;\n  undefined *buffer_ptr;\n  undefined4 buffer_size_2;\n  undefined4 zero;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 temp_variable;\n  undefined stack_buffer [1024];\n  \n  temp_variable = *(undefined4 *)(data + 100);\n  value2 = *(undefined4 *)(data + 0x1c);\n  value = *(undefined2 *)(data + 0xe);\n  value3 = *(undefined4 *)(data + 0x24);\n  buffer = stack_buffer;\n  flag = *(ushort *)(data + 0xc) & 0xfffd;\n  buffer_size = 0x400;\n  buffer_size_2 = 0x400;\n  zero = 0;\n  buffer_ptr = buffer;\n  result = _vfiprintf_r(output_stream,buffer);\n  if ((-1 < result) && (flush_result = _fflush_r(output_stream,buffer), flush_result != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)flag << 0x19) < 0) {\n    *(ushort *)(data + 0xc) = *(ushort *)(data + 0xc) | 0x40;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000834f0": "print_and_flush_000834f0",
                "param_1": "output_stream",
                "param_2": "data",
                "iVar1": "result",
                "iVar2": "flush_result",
                "local_47c": "flag",
                "local_47a": "value",
                "local_478": "buffer_ptr",
                "local_488": "buffer",
                "local_480": "buffer_size",
                "local_474": "buffer_size_2",
                "local_470": "zero",
                "local_46c": "value2",
                "local_464": "value3",
                "local_424": "temp_variable",
                "auStack_420": "stack_buffer",
                "local_488[0]": "buffer"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00083850",
                "FUN_0008289c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000834f0": {
                    "1": "print_and_modify_flags",
                    "2": "print_formatted_output",
                    "13": "print_and_flush",
                    "4": "print_and_flush_data"
                },
                "param_1": {
                    "5": "stream",
                    "1": "file",
                    "2": "file_stream",
                    "18": "output_stream"
                },
                "param_2": {
                    "1": "num2",
                    "9": "data_ptr",
                    "3": "data_pointer",
                    "2": "data_address",
                    "4": "input_data"
                },
                "iVar1": {
                    "1": "output_result",
                    "2": "print_result",
                    "6": "printf_result",
                    "11": "result"
                },
                "iVar2": {
                    "17": "flush_result",
                    "1": "fflush_return_value",
                    "7": "fflush_result"
                },
                "local_47c": {
                    "6": "flag",
                    "2": "flags",
                    "1": "data_value",
                    "3": "modified_flag",
                    "4": "modified_value"
                },
                "local_47a": {
                    "4": "short_value",
                    "1": "flag_value",
                    "2": "data_value",
                    "11": "value"
                },
                "local_478": {
                    "1": "string_ptr",
                    "10": "buffer_ptr",
                    "4": "buffer_pointer",
                    "2": "output",
                    "8": "buffer",
                    "3": "output_buffer"
                },
                "FUN_00083850": {
                    "1": "merge_arrays"
                },
                "FUN_0008289c": {
                    "1": "calculate"
                },
                "param_3": {
                    "1": "ptr_3"
                },
                "param_4": {
                    "1": "ptr_4"
                },
                "local_488": {
                    "2": "string_buffer",
                    "1": "output_buffer",
                    "8": "buffer_array",
                    "12": "buffer"
                },
                "local_480": {
                    "1": "buffer_size1",
                    "22": "buffer_size",
                    "4": "buffer_size_1"
                },
                "local_474": {
                    "1": "flush_size",
                    "4": "buffer_size",
                    "5": "buffer_size_copy",
                    "7": "buffer_size_2"
                },
                "local_470": {
                    "1": "flush_result",
                    "2": "temp_value",
                    "5": "unused",
                    "10": "zero"
                },
                "local_46c": {
                    "1": "value_2",
                    "2": "value"
                },
                "local_464": {
                    "1": "local_value_2",
                    "2": "value_2"
                },
                "local_424": {
                    "1": "unused4",
                    "2": "temp_variable"
                },
                "auStack_420": {
                    "2": "stack_array",
                    "1": "temporary_stack_array",
                    "14": "stack_buffer"
                },
                "local_488[0]": {
                    "1": "buffer"
                },
                "local_488[2]": {
                    "1": "string_array"
                }
            }
        },
        "FUN_0008356c": {
            "entrypoint": "0x0008356c",
            "current_name": "process_data_0008356c",
            "code": "\nundefined4 process_data_0008356c(undefined4 *result,int *input)\n\n{\n  int temp_var1;\n  int temp_var2;\n  uint temp_var3;\n  ushort temp_var4;\n  \n  if ((rel_array[140].r_offset != 0) &&\n     (*(int *)(rel_array[140].r_offset + 0x38) == 0)) {\n    initialize;\n  }\n  temp_var4 = *(ushort *)(input + 3);\n  temp_var3 = (uint)temp_var4;\n  if ((int)(temp_var3 << 0x1c) < 0) {\n    temp_var2 = var_1;\n  }\n  else {\n    if (-1 < (int)(temp_var3 << 0x1b)) {\n      *result = 9;\n      *(ushort *)(input + 3) = temp_var4 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(temp_var3 << 0x1d) < 0) {\n      if ((int *)temp_ptr != (int *)0x0) {\n        if ((int *)temp_ptr != input + 0x10) {\n          free_memory(result);\n          temp_var4 = *(ushort *)(input + 3);\n        }\n        temp_ptr = 0;\n      }\n      temp_var2 = var_1;\n      temp_var4 = temp_var4 & 0xffdb;\n      *input = temp_var2;\n      var_2 = 0;\n    }\n    else {\n      temp_var2 = var_1;\n    }\n    *(ushort *)(input + 3) = temp_var4 | 8;\n    temp_var3 = (uint)(temp_var4 | 8);\n  }\n  if ((temp_var2 == 0) && ((temp_var3 & 0x280) != 0x200)) {\n    make_buffer(result,input);\n    temp_var3 = (uint)*(ushort *)(input + 3);\n    temp_var2 = var_1;\n  }\n  if ((temp_var3 & 1) == 0) {\n    temp_var1 = 0;\n    if (-1 < (int)(temp_var3 << 0x1e)) {\n      temp_var1 = var_3;\n    }\n    input[2] = temp_var1;\n  }\n  else {\n    input[6] = -var_3;\n    input[2] = 0;\n  }\n  if ((temp_var2 == 0) && ((int)((uint)*(ushort *)(input + 3) << 0x18) < 0)) {\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0008356c": "process_data_0008356c",
                "param_1": "result",
                "param_2": "input",
                "iVar1": "temp_var1",
                "iVar2": "temp_var2",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4",
                "__sinit": "initialize_system",
                "_free_r": "free_memory",
                "__smakebuf_r": "make_buffer",
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "param_2[0xc]": "temp_ptr",
                "param_2[4]": "var_1",
                "param_2[1]": "var_2",
                "param_2[5]": "var_3",
                "__sinit()": "initialize"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_000842a4",
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00083b10",
                "FUN_00084018",
                "FUN_00083888"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008356c": {
                    "1": "update_flags",
                    "8": "process_data",
                    "5": "initialize_buffer"
                },
                "param_1": {
                    "1": "output_variable",
                    "12": "result",
                    "2": "buffer",
                    "7": "output"
                },
                "param_2": {
                    "9": "input",
                    "6": "data",
                    "1": "input_param",
                    "2": "buffer",
                    "3": "input_array",
                    "5": "input_data"
                },
                "iVar1": {
                    "2": "value1",
                    "1": "result",
                    "17": "temp_var1"
                },
                "iVar2": {
                    "1": "flag2",
                    "17": "temp_var2",
                    "2": "value"
                },
                "uVar3": {
                    "1": "bit_shifted_value",
                    "14": "temp_var3",
                    "3": "temp",
                    "2": "value"
                },
                "uVar4": {
                    "1": "flags",
                    "15": "temp_var4"
                },
                "__sinit": {
                    "1": "initialize_system"
                },
                "_free_r": {
                    "1": "free_data"
                },
                "__smakebuf_r": {
                    "1": "make_buffer"
                },
                "FUN_00083b10": {
                    "1": "perform_operation"
                },
                "FUN_00084018": {
                    "1": "process_buffer"
                },
                "FUN_00083888": {
                    "1": "perform_action"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "rel_array"
                },
                "*param_1": {
                    "1": "result"
                },
                "*(ushort *)(param_2 + 3)": {
                    "1": "temporary_param"
                },
                "uVar4 | 0x40": {
                    "1": "updated_param"
                },
                "*(ushort *)(param_2 + 3) | 0x40": {
                    "1": "updated_temp_param"
                },
                "param_2[0xc]": {
                    "1": "temp_ptr"
                },
                "param_2 + 0x10": {
                    "1": "next_ptr"
                },
                "param_2[4]": {
                    "1": "var_1"
                },
                "param_2[1]": {
                    "1": "var_2"
                },
                "param_2[5]": {
                    "1": "var_3"
                },
                "__sinit()": {
                    "1": "initialize"
                },
                "*param_2": {
                    "1": "var_1"
                }
            }
        },
        "FUN_000836d8": {
            "entrypoint": "0x000836d8",
            "current_name": "FUNC_000836d8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x00083630) */\n/* WARNING: Removing unreachable block (ram,0x000836c4) */\n/* WARNING: Removing unreachable block (ram,0x00083642) */\n/* WARNING: Removing unreachable block (ram,0x00083648) */\n/* WARNING: Removing unreachable block (ram,0x00083654) */\n/* WARNING: Removing unreachable block (ram,0x0008366e) */\n/* WARNING: Removing unreachable block (ram,0x0008364c) */\n/* WARNING: Removing unreachable block (ram,0x00083686) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n/* WARNING: Removing unreachable block (ram,0x00083688) */\n\nvoid FUNC_000836d8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836d8": "FUNC_000836d8"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000836ec": {
            "entrypoint": "0x000836ec",
            "current_name": "raise_and_exit_000836ec",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n\nvoid raise_and_exit_000836ec(void)\n\n{\n  dword *pointer;\n  dword exit_status;\n  int index;\n  code *jump_table;\n  \n  raise(6);\n  jump_table = (code *)0x836fb;\n  exit_status = _exit(1);\n  if (relocation_array[48].r_offset == 0) {\n    relocation_array[48].r_offset = 0x20070184;\n  }\n  index = *(int *)(relocation_array[48].r_offset + 4);\n  pointer = (dword *)relocation_array[48].r_offset;\n  if (0x1f < index) {\n    pointer = (dword *)malloc(400);\n    if (pointer == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jump_table)(0xffffffff);\n      return;\n    }\n    *pointer = relocation_array[48].r_offset;\n    pointer[1] = 0;\n    index = 0;\n    relocation_array[48].r_offset = (dword)pointer;\n    pointer[0x62] = 0;\n    pointer[99] = 0;\n  }\n  pointer[1] = index + 1;\n  pointer[index + 2] = exit_status;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836ec": "raise_and_exit_000836ec",
                "pdVar1": "pointer",
                "dVar2": "exit_status",
                "iVar3": "index",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "Elf32_Rel_ARRAY_20070000": "relocation_array"
            },
            "calling": [
                "FUN_000816f8"
            ],
            "called": [
                "FUN_00080eec",
                "FUN_000841e4",
                "FUN_000817f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000836ec": {
                    "6": "handle_exception",
                    "10": "raise_and_exit",
                    "1": "execute_raise_and_exit",
                    "2": "handle_error_and_exit"
                },
                "pdVar1": {
                    "2": "dynamic_array",
                    "1": "rel_array",
                    "6": "pointer",
                    "3": "relocation_entry"
                },
                "dVar2": {
                    "7": "exit_code",
                    "2": "return_value",
                    "18": "exit_status",
                    "1": "result"
                },
                "iVar3": {
                    "2": "loop_counter",
                    "6": "count",
                    "3": "counter",
                    "1": "current_index",
                    "17": "index"
                },
                "UNRECOVERED_JUMPTABLE_00": {
                    "1": "handle_crash",
                    "15": "jump_table",
                    "5": "unrecovered_jump_table"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "2": "array",
                    "1": "elf_array",
                    "9": "relocation_array",
                    "4": "rel_array"
                },
                "FUN_00080eec": {
                    "1": "initialize_handler"
                },
                "FUN_000841e4": {
                    "1": "perform_operation",
                    "2": "check_relocation_offset"
                },
                "FUN_000817f0": {
                    "1": "display_message"
                },
                "param_1": {
                    "1": "param1"
                },
                "param_2": {
                    "1": "param_2"
                },
                "param_3": {
                    "1": "param3"
                },
                "param_4": {
                    "1": "param4"
                },
                "elf_rel_entry": {
                    "1": "current_relocation_entry"
                },
                "elf_rel_offset": {
                    "1": "elf_rel_offset"
                }
            }
        },
        "FUN_00083850": {
            "entrypoint": "0x00083850",
            "current_name": "process_data_00083850",
            "code": "\nundefined4 process_data_00083850(int *input_array,int *output_array)\n\n{\n  int *temp_ptr;\n  int temp_var;\n  ushort flags;\n  uint uint_var;\n  int temp_var2;\n  code *function_pointer;\n  undefined4 return_value;\n  int temp_var3;\n  \n  if ((input_array != (int *)0x0) && (input_array[0xe] == 0)) {\n    __sinit();\n  }\n  if (*(short *)(output_array + 3) == 0) {\n    return 0;\n  }\n  flags = *(ushort *)(output_array + 3);\n  if ((int)((uint)flags << 0x1c) < 0) {\n    temp_var3 = output_array[4];\n    if (temp_var3 == 0) {\n      return 0;\n    }\n    temp_var = *output_array;\n    if ((flags & 3) == 0) {\n      temp_var2 = output_array[5];\n    }\n    else {\n      temp_var2 = 0;\n    }\n    *output_array = temp_var3;\n    temp_var = temp_var - temp_var3;\n    output_array[2] = temp_var2;\n    do {\n      if (temp_var < 1) {\n        return 0;\n      }\n      temp_var2 = (*(code *)output_array[9])(input_array,output_array[7],temp_var3,temp_var,return_value);\n      temp_var = temp_var - temp_var2;\n      temp_var3 = temp_var3 + temp_var2;\n    } while (0 < temp_var2);\nLAB_000837c8:\n    *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(output_array + 3) = flags | 0x800;\n  if ((output_array[1] < 1) && (output_array[0xf] < 1)) {\n    return 0;\n  }\n  function_pointer = (code *)output_array[10];\n  if (function_pointer == (code *)0x0) {\n    return 0;\n  }\n  uint_var = (uint)(flags | 0x800);\n  temp_var3 = *input_array;\n  *input_array = 0;\n  if ((flags & 0x1000) == 0) {\n    temp_var = (*function_pointer)(input_array,output_array[7],uint_var & 0x1000,1);\n    if ((temp_var == -1) && (temp_var2 = *input_array, temp_var2 != 0)) {\n      if ((temp_var2 == 0x1d) || (temp_var2 == 0x16)) {\n        *input_array = temp_var3;\n        return 0;\n      }\n      goto LAB_000837c8;\n    }\n    uint_var = (uint)*(ushort *)(output_array + 3);\n    function_pointer = (code *)output_array[10];\n  }\n  else {\n    temp_var = output_array[0x14];\n  }\n  if (((int)(uint_var << 0x1d) < 0) && (temp_var = temp_var - output_array[1], output_array[0xc] != 0)) {\n    temp_var = temp_var - output_array[0xf];\n  }\n  temp_var = (*function_pointer)(input_array,output_array[7],temp_var,0);\n  if (temp_var == -1) {\n    temp_var2 = *input_array;\n    if (temp_var2 != 0) {\n      if ((temp_var2 != 0x1d) && (temp_var2 != 0x16)) {\n        *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) & 0xf7ff;\n      *output_array = output_array[4];\n      output_array[1] = 0;\n      goto LAB_00083774;\n    }\n    flags = *(ushort *)(output_array + 3) & 0xf7ff;\n    output_array[1] = 0;\n    *(ushort *)(output_array + 3) = flags;\n    *output_array = output_array[4];\n  }\n  else {\n    flags = *(ushort *)(output_array + 3) & 0xf7ff;\n    *output_array = output_array[4];\n    *(ushort *)(output_array + 3) = flags;\n    output_array[1] = 0;\n  }\n  if ((int)((uint)flags << 0x13) < 0) {\n    output_array[0x14] = temp_var;\n  }\nLAB_00083774:\n  temp_ptr = (int *)output_array[0xc];\n  *input_array = temp_var3;\n  if (temp_ptr == (int *)0x0) {\n    return 0;\n  }\n  if (temp_ptr != output_array + 0x10) {\n    _free_r(input_array);\n  }\n  output_array[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083850": "process_data_00083850",
                "param_1": "input_array",
                "param_2": "output_array",
                "piVar1": "temp_ptr",
                "iVar2": "temp_var",
                "uVar3": "flags",
                "uVar4": "uint_var",
                "iVar5": "temp_var2",
                "pcVar6": "function_pointer",
                "unaff_r4": "return_value",
                "iVar7": "temp_var3"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_000834f0",
                "FUN_00084484",
                "FUN_000842a4"
            ],
            "called": [
                "FUN_00083b10",
                "FUN_00083888"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00083850": {
                    "9": "process_data",
                    "1": "reverse_bytes",
                    "3": "decode_and_process_data"
                },
                "param_1": {
                    "3": "data_buffer",
                    "1": "input_param",
                    "15": "input_array",
                    "7": "input_data"
                },
                "param_2": {
                    "12": "output_array",
                    "2": "data_array",
                    "1": "decoded_data",
                    "5": "output_data",
                    "3": "output_buffer"
                },
                "piVar1": {
                    "4": "pointer_var1",
                    "2": "temp_var1",
                    "1": "internal_var1",
                    "10": "temp_ptr"
                },
                "iVar2": {
                    "1": "offset",
                    "3": "temp_var1",
                    "2": "temp_var2",
                    "5": "temp_var"
                },
                "uVar3": {
                    "5": "flag",
                    "1": "temp_ushort",
                    "2": "temp_var2",
                    "3": "ushort_var",
                    "7": "flags"
                },
                "uVar4": {
                    "3": "uint_var",
                    "1": "temp4",
                    "2": "temp_uint"
                },
                "iVar5": {
                    "1": "result",
                    "5": "temp_var2",
                    "3": "temp_var4",
                    "2": "int_var5",
                    "4": "temp_var"
                },
                "pcVar6": {
                    "1": "some_function",
                    "14": "function_pointer",
                    "7": "function_ptr",
                    "2": "callback_func",
                    "3": "process_function"
                },
                "unaff_r4": {
                    "1": "unaffected_register_4",
                    "14": "return_value",
                    "8": "result"
                },
                "iVar7": {
                    "5": "temp_var3",
                    "1": "temp_var6",
                    "2": "int_var7",
                    "3": "temp_var_2"
                }
            }
        },
        "FUN_00083888": {
            "entrypoint": "0x00083888",
            "current_name": "initialize_data_structures_00083888",
            "code": "\nvoid initialize_data_structures_00083888(int param)\n\n{\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  \n  if (*(int *)(param + 0x38) == 0) {\n    ptr1 = *(undefined4 **)(param + 4);\n    *(undefined **)(param + 0x3c) = label1;\n    *(undefined4 *)(param + 0x2e4) = 3;\n    *(int *)(param + 0x2e8) = param + 0x2ec;\n    *(undefined4 *)(param + 0x2e0) = 0;\n    *(undefined2 *)(ptr1 + 3) = 4;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    *(undefined2 *)((int)ptr1 + 0xe) = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    memset(ptr1 + 0x17,0,8);\n    ptr2 = *(undefined4 **)(param + 8);\n    ptr1[7] = ptr1;\n    ptr1[8] = 0x84221;\n    ptr1[9] = 0x84245;\n    ptr1[10] = 0x8427d;\n    ptr1[0xb] = label2;\n    *(undefined2 *)((int)ptr2 + 0xe) = 1;\n    *(undefined2 *)(ptr2 + 3) = 9;\n    *ptr2 = 0;\n    ptr2[1] = 0;\n    ptr2[2] = 0;\n    ptr2[0x19] = 0;\n    ptr2[4] = 0;\n    ptr2[5] = 0;\n    ptr2[6] = 0;\n    memset(ptr2 + 0x17,0,8);\n    ptr1 = *(undefined4 **)(param + 0xc);\n    ptr2[7] = ptr2;\n    ptr2[8] = 0x84221;\n    ptr2[9] = 0x84245;\n    ptr2[10] = 0x8427d;\n    ptr2[0xb] = label2;\n    *(undefined2 *)(ptr1 + 3) = 0x12;\n    *(undefined2 *)((int)ptr1 + 0xe) = 2;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    memset(ptr1 + 0x17,0,8);\n    ptr1[7] = ptr1;\n    ptr1[8] = 0x84221;\n    ptr1[9] = 0x84245;\n    ptr1[10] = 0x8427d;\n    ptr1[0xb] = label2;\n    *(undefined4 *)(param + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083888": "initialize_data_structures_00083888",
                "param_1": "param",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "&LAB_0008387c_1": "label1",
                "&LAB_0008429c_1": "label2"
            },
            "calling": [
                "FUN_00084484",
                "FUN_0008356c",
                "FUN_000842a4",
                "FUN_00083850",
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00081f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00083888": {
                    "2": "initialize_parameters",
                    "1": "initialize_function",
                    "3": "initialize_data_structure",
                    "17": "initialize_data_structures",
                    "4": "initialize_data"
                },
                "param_1": {
                    "2": "data_struct_addr",
                    "1": "data_container",
                    "4": "data_structure",
                    "5": "param"
                },
                "puVar1": {
                    "1": "param_ptr_uno",
                    "2": "pointer1",
                    "9": "ptr1"
                },
                "puVar2": {
                    "2": "param2",
                    "1": "second_array",
                    "9": "ptr2"
                },
                "&LAB_0008387c_1": {
                    "1": "label1"
                },
                "&LAB_0008429c_1": {
                    "1": "label2"
                }
            }
        },
        "FUN_0008397c": {
            "entrypoint": "0x0008397c",
            "current_name": "FUNC_0008397c",
            "code": "\nvoid FUNC_0008397c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008397c": "FUNC_0008397c"
            },
            "calling": [
                "FUN_00084484"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083980": {
            "entrypoint": "0x00083980",
            "current_name": "FUNC_00083980",
            "code": "\nvoid FUNC_00083980(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083980": "FUNC_00083980"
            },
            "calling": [
                "FUN_00084484"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000839b4": {
            "entrypoint": "0x000839b4",
            "current_name": "write_to_stream_000839b4",
            "code": "\nuint write_to_stream_000839b4(undefined4 locale,uint value,byte **data)\n\n{\n  int max_bytes;\n  uint result;\n  uint converted_char;\n  byte *buffer_ptr;\n  uint index;\n  byte single_byte;\n  byte conversion_buffer [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(data + 3) << 0x12)) {\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x2000;\n    data[0x19] = (byte *)((uint)data[0x19] | 0x2000);\n  }\n  max_bytes = __locale_mb_cur_max();\n  if ((max_bytes == 1) && (value - 1 < 0xff)) {\n    converted_char = value & 0xff;\n    single_byte = (byte)converted_char;\n    result = 1;\n  }\n  else {\n    result = _wcrtomb_r(locale,&single_byte,value,data + 0x17);\n    if (result == 0xffffffff) {\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (result == 0) {\n      return value;\n    }\n    converted_char = (uint)single_byte;\n  }\n  index = 0;\n  do {\n    buffer_ptr = data[2] + -1;\n    data[2] = buffer_ptr;\n    if ((int)buffer_ptr < 0) {\n      if ((int)data[6] <= (int)buffer_ptr) {\n        **data = (byte)converted_char;\n        buffer_ptr = *data;\n        converted_char = (uint)*buffer_ptr;\n        if (converted_char != 10) goto LAB_00083a04;\n      }\n      max_bytes = __swbuf_r(locale,converted_char,data);\n      if (max_bytes == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **data = (byte)converted_char;\n      buffer_ptr = *data;\nLAB_00083a04:\n      *data = buffer_ptr + 1;\n    }\n    if (result <= index + 1) {\n      return value;\n    }\n    converted_char = (uint)conversion_buffer[index];\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000839b4": "write_to_stream_000839b4",
                "param_1": "locale",
                "param_2": "value",
                "param_3": "data",
                "iVar1": "max_bytes",
                "uVar2": "result",
                "uVar3": "converted_char",
                "pbVar4": "buffer_ptr",
                "uVar5": "index",
                "local_1c": "single_byte",
                "abStack_1b": "conversion_buffer"
            },
            "calling": [
                "FUN_00082824"
            ],
            "called": [
                "FUN_0008400c",
                "FUN_0008434c",
                "FUN_000842a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000839b4": {
                    "4": "write_to_stream",
                    "1": "convert_string_to_multibyte",
                    "2": "convert_and_write_data",
                    "3": "convert_and_print_data"
                },
                "param_1": {
                    "4": "stream",
                    "1": "converter",
                    "2": "param",
                    "14": "locale",
                    "3": "param1"
                },
                "param_2": {
                    "4": "value",
                    "2": "input_size",
                    "1": "character_count",
                    "3": "length"
                },
                "param_3": {
                    "5": "data",
                    "2": "stream_buffer",
                    "1": "param_c",
                    "3": "buffer",
                    "4": "output_buffer"
                },
                "iVar1": {
                    "20": "max_bytes",
                    "1": "max",
                    "2": "max_mb_length"
                },
                "uVar2": {
                    "1": "converted_length",
                    "3": "bytes_written",
                    "16": "result",
                    "5": "conversion_result"
                },
                "uVar3": {
                    "7": "converted_byte",
                    "2": "converted_data",
                    "1": "data_byte",
                    "9": "converted_char",
                    "3": "byte_value"
                },
                "pbVar4": {
                    "3": "output_ptr",
                    "5": "buffer_ptr",
                    "1": "var_buffer",
                    "4": "current_byte",
                    "2": "output_buffer"
                },
                "uVar5": {
                    "2": "count",
                    "14": "index",
                    "1": "current_index",
                    "4": "byte_index",
                    "3": "iteration_count"
                },
                "local_1c": {
                    "1": "single_character",
                    "2": "char_to_convert",
                    "3": "temp_char",
                    "6": "single_byte"
                },
                "abStack_1b": {
                    "2": "additional_bytes",
                    "1": "var_stack",
                    "7": "conversion_buffer"
                },
                "FUN_0008400c": {
                    "1": "get_max_locale"
                },
                "FUN_0008434c": {
                    "1": "write_to_buffer"
                },
                "FUN_000842a4": {
                    "1": "translate_character"
                }
            }
        },
        "FUN_00083a74": {
            "entrypoint": "0x00083a74",
            "current_name": "allocate_memory_00083a74",
            "code": "\nundefined4 allocate_memory_00083a74(undefined4 lock,int size)\n\n{\n  int sbrk_result;\n  uint rel_info;\n  int adjusted_size;\n  \n  lock_memory();\n  rel_info = *(uint *)(rel_array[141].r_info + 4) & 0xfffffffc;\n  adjusted_size = ((rel_info - size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < adjusted_size) {\n    sbrk_result = sbrk_wrapper(lock,0);\n    if (sbrk_result == rel_array[141].r_info + rel_info) {\n      sbrk_result = sbrk_wrapper(lock,-adjusted_size);\n      if (sbrk_result != -1) {\n        DAT_2007121c = DAT_2007121c - adjusted_size;\n        *(uint *)(rel_array[141].r_info + 4) = rel_info - adjusted_size | 1;\n        unlock_memory(lock);\n        return 1;\n      }\n      adjusted_size = sbrk_wrapper(lock,0);\n      if (0xf < (int)(adjusted_size - rel_array[141].r_info)) {\n        DAT_2007121c = adjusted_size - rel_array[270].r_offset;\n        *(r_info_dword *)(rel_array[141].r_info + 4) =\n             adjusted_size - rel_array[141].r_info | 1;\n      }\n    }\n  }\n  unlock_memory(lock);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083a74": "allocate_memory_00083a74",
                "param_1": "lock",
                "param_2": "size",
                "iVar1": "sbrk_result",
                "uVar2": "rel_info",
                "iVar3": "adjusted_size",
                "_sbrk_r": "sbrk_wrapper",
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "__malloc_lock": "lock_memory",
                "__malloc_unlock": "unlock_memory",
                "dword": "r_info_dword"
            },
            "calling": [
                "FUN_00083b10"
            ],
            "called": [
                "FUN_0008236c",
                "FUN_00081f98",
                "FUN_00081f94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00083a74": {
                    "3": "improve_memory_allocation",
                    "1": "adjust_memory_layout",
                    "2": "improve_allocation",
                    "17": "allocate_memory"
                },
                "param_1": {
                    "1": "malloc_lock_handle",
                    "4": "param_1",
                    "2": "size",
                    "7": "param",
                    "8": "lock"
                },
                "param_2": {
                    "1": "old_size",
                    "3": "param_2",
                    "11": "size",
                    "2": "requested_size"
                },
                "iVar1": {
                    "1": "current_address",
                    "9": "sbrk_result",
                    "7": "allocation_result",
                    "5": "result",
                    "2": "brk_result"
                },
                "uVar2": {
                    "1": "r_info_value",
                    "2": "elf_rel_info",
                    "6": "rel_offset",
                    "7": "rel_info"
                },
                "iVar3": {
                    "1": "memory_offset",
                    "2": "adjusted_address",
                    "9": "adjusted_size",
                    "4": "adjusted_offset"
                },
                "_sbrk_r": {
                    "2": "sbrk",
                    "1": "allocate_memory",
                    "3": "sbrk_wrapper"
                },
                "DAT_2007121c": {
                    "1": "current_allocation",
                    "2": "heap_offset",
                    "3": "memory_offset"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "elf_rel_array",
                    "3": "rel_array"
                },
                "__malloc_lock": {
                    "1": "acquire_memory_lock",
                    "4": "lock_memory"
                },
                "__malloc_unlock": {
                    "4": "unlock_memory",
                    "1": "release_memory_lock"
                },
                "\tiVar3": {
                    "1": "adjusted_offset"
                },
                "dword": {
                    "1": "uint32_t"
                },
                "FUN_0008236c": {
                    "1": "initialize_ptr"
                },
                "FUNC_00081f98": {
                    "1": "lock_memory"
                },
                "FUNC_00081f94": {
                    "1": "unlock_memory"
                }
            }
        },
        "FUN_00083b10": {
            "entrypoint": "0x00083b10",
            "current_name": "reorganize_function_00083b10",
            "code": "\nvoid reorganize_function_00083b10(undefined4 lock,int size)\n\n{\n  int temp1;\n  bool flag;\n  uint header;\n  dword var4;\n  int index2;\n  uint offset;\n  dword var7;\n  uint var8;\n  dword var9;\n  \n  if (size == 0) {\n    return;\n  }\n  _lock_memory();\n  header = *(uint *)(size + -4);\n  var7 = size - 8;\n  offset = header & 0xfffffffe;\n  var4 = var7 + offset;\n  var8 = *(uint *)(var4 + 4) & 0xfffffffc;\n  if (rel_array[141].r_info == var4) {\n    var8 = var8 + offset;\n    if (-1 < (int)(header << 0x1f)) {\n      var7 = var7 - *(int *)(size + -8);\n      index2 = *(int *)(var7 + 0xc);\n      temp1 = *(int *)(var7 + 8);\n      var8 = var8 + *(int *)(size + -8);\n      *(int *)(temp1 + 0xc) = index2;\n      *(int *)(index2 + 8) = temp1;\n    }\n    var4 = rel_array[269].r_info;\n    *(uint *)(var7 + 4) = var8 | 1;\n    rel_array[141].r_info = var7;\n    if (var4 <= var8) {\n      trim_memory(lock,DAT_20071218);\n    }\n  }\n  else {\n    *(uint *)(var4 + 4) = var8;\n    if ((header & 1) == 0) {\n      var7 = var7 - *(int *)(size + -8);\n      temp1 = *(int *)(var7 + 8);\n      offset = offset + *(int *)(size + -8);\n      if (temp1 == 0x2007046c) {\n        flag = true;\n      }\n      else {\n        index2 = *(int *)(var7 + 0xc);\n        *(int *)(temp1 + 0xc) = index2;\n        *(int *)(index2 + 8) = temp1;\n        flag = false;\n      }\n    }\n    else {\n      flag = false;\n    }\n    if (-1 < *(int *)(var4 + var8 + 4) << 0x1f) {\n      offset = offset + var8;\n      temp1 = *(int *)(var4 + 8);\n      if ((!flag) && (temp1 == 0x2007046c)) {\n        rel_array[142].r_info = var7;\n        rel_array[143].r_offset = var7;\n        *(undefined4 *)(var7 + 0xc) = 0x2007046c;\n        *(undefined4 *)(var7 + 8) = 0x2007046c;\n        *(uint *)(var7 + 4) = offset | 1;\n        *(uint *)(var7 + offset) = offset;\n        goto LAB_00083ba4;\n      }\n      index2 = *(int *)(var4 + 0xc);\n      *(int *)(temp1 + 0xc) = index2;\n      *(int *)(index2 + 8) = temp1;\n    }\n    *(uint *)(var7 + 4) = offset | 1;\n    *(uint *)(var7 + offset) = offset;\n    if (!flag) {\n      if (offset < 0x200) {\n        header = offset & 0xfffffff8;\n        temp1 = *(int *)((int)&rel_array[0x8d].r_info + header);\n        rel_array[141].r_offset =\n             rel_array[141].r_offset | 1 << ((int)(offset >> 3) >> 2 & 0xffU);\n        *(int *)(var7 + 8) = temp1;\n        *(uint *)(var7 + 0xc) = header + 0x20070464;\n        *(dword *)((int)&rel_array[0x8d].r_info + header) = var7;\n        *(dword *)(temp1 + 0xc) = var7;\n        unlock_memory(lock);\n        return;\n      }\n      header = offset >> 9;\n      if (header < 5) {\n        temp1 = (offset >> 6) + 0x38;\n        index2 = temp1 * 2;\n      }\n      else if (header < 0x15) {\n        temp1 = header + 0x5b;\n        index2 = temp1 * 2;\n      }\n      else if (header < 0x55) {\n        temp1 = (offset >> 0xc) + 0x6e;\n        index2 = temp1 * 2;\n      }\n      else if (header < 0x155) {\n        temp1 = (offset >> 0xf) + 0x77;\n        index2 = temp1 * 2;\n      }\n      else if (header < 0x555) {\n        temp1 = (offset >> 0x12) + 0x7c;\n        index2 = temp1 * 2;\n      }\n      else {\n        index2 = 0xfc;\n        temp1 = 0x7e;\n      }\n      var9 = index2 * 4 + 0x20070464;\n      var4 = (&rel_array[0x8d].r_info)[index2];\n      if (var4 == var9) {\n        rel_array[141].r_offset =\n             rel_array[141].r_offset | 1 << (temp1 >> 2 & 0xffU);\n        var9 = var4;\n      }\n      else {\n        do {\n          if ((*(uint *)(var4 + 4) & 0xfffffffc) <= offset) break;\n          var4 = *(dword *)(var4 + 8);\n        } while (var9 != var4);\n        var9 = *(dword *)(var4 + 0xc);\n      }\n      *(dword *)(var7 + 0xc) = var9;\n      *(dword *)(var7 + 8) = var4;\n      *(dword *)(var9 + 8) = var7;\n      *(dword *)(var4 + 0xc) = var7;\n    }\n  }\nLAB_00083ba4:\n  unlock_memory(lock);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b10": "reorganize_function_00083b10",
                "param_1": "lock",
                "param_2": "size",
                "iVar1": "temp1",
                "bVar2": "flag",
                "uVar3": "header",
                "dVar4": "var4",
                "iVar5": "index2",
                "uVar6": "offset",
                "dVar7": "var7",
                "uVar8": "var8",
                "dVar9": "var9",
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "_malloc_lock": "lock_memory",
                "_malloc_trim_r": "trim_memory",
                "__malloc_unlock": "unlock_memory"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_00081fac",
                "FUN_00084484",
                "FUN_0008356c",
                "FUN_00081810",
                "FUN_00081800",
                "FUN_00083850"
            ],
            "called": [
                "FUN_00081f98",
                "FUN_00083a74",
                "FUN_00081f94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00083b10": {
                    "1": "reorder_and_trim",
                    "3": "reorganize_function",
                    "2": "deallocate_memory"
                },
                "param_1": {
                    "1": "context",
                    "4": "param1",
                    "2": "param_lock",
                    "8": "param",
                    "9": "lock"
                },
                "param_2": {
                    "3": "address",
                    "4": "param2",
                    "1": "input_param",
                    "2": "param_offset",
                    "5": "size"
                },
                "iVar1": {
                    "1": "current_relocation",
                    "5": "temp1",
                    "4": "temp_var1",
                    "2": "index"
                },
                "bVar2": {
                    "6": "flag",
                    "1": "var2",
                    "2": "is_true",
                    "3": "is_special_case",
                    "4": "is_condition_met"
                },
                "uVar3": {
                    "3": "value1",
                    "1": "relocation_value",
                    "2": "value"
                },
                "dVar4": {
                    "1": "header_ptr",
                    "2": "temp3",
                    "3": "var4"
                },
                "iVar5": {
                    "1": "temp3",
                    "2": "temp4",
                    "5": "index2",
                    "3": "var5"
                },
                "uVar6": {
                    "1": "value_2",
                    "3": "value2",
                    "2": "total_size",
                    "4": "offset"
                },
                "dVar7": {
                    "1": "temp_pointer",
                    "3": "var7",
                    "2": "temp4"
                },
                "uVar8": {
                    "1": "new_size",
                    "3": "var8",
                    "2": "temp7"
                },
                "dVar9": {
                    "1": "temp_element",
                    "3": "var9",
                    "2": "temp_var9"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "rel_array"
                },
                "_malloc_lock": {
                    "1": "lock_memory"
                },
                "_malloc_trim_r": {
                    "1": "trim_memory"
                },
                "DAT_20071218": {
                    "1": "memory_size"
                },
                "__malloc_unlock": {
                    "1": "unlock_memory"
                }
            }
        },
        "FUN_00083ca8": {
            "entrypoint": "0x00083ca8",
            "current_name": "process_data_00083ca8",
            "code": "\nundefined4 process_data_00083ca8(undefined4 *error_code,uint *input_data,uint **buffer)\n\n{\n  int result;\n  uint temp_var1;\n  uint temp_var2;\n  ushort flag;\n  uint temp_var4;\n  uint *ptr1;\n  uint *ptr2;\n  uint temp_var5;\n  uint temp_var6;\n  uint temp_var7;\n  uint temp_var8;\n  uint local_var;\n  \n  if (buffer[2] != (uint *)0x0) {\n    flag = *(ushort *)(input_data + 3);\n    temp_var4 = (uint)flag;\n    if (((int)(temp_var4 << 0x1c) < 0) && (input_data[4] != 0)) {\n      ptr2 = *buffer;\n    }\n    else {\n      result = initialize_input_array(error_code,input_data);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      flag = *(ushort *)(input_data + 3);\n      temp_var4 = (uint)flag;\n      ptr2 = *buffer;\n    }\n    if ((flag & 2) == 0) {\n      temp_var1 = temp_var4 & 2;\n      temp_var7 = temp_var1;\n      temp_var5 = temp_var1;\n      local_var = temp_var1;\n      if ((temp_var4 & 1) == 0) {\n        temp_var1 = 0;\n        temp_var7 = 0;\n        while( true ) {\n          while (temp_var1 == 0) {\n            temp_var7 = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            temp_var1 = *ptr1;\n          }\n          temp_var5 = input_data[2];\n          if ((int)(temp_var4 << 0x16) < 0) {\n            if (temp_var1 < temp_var5) {\n              temp_var4 = *input_data;\n              temp_var5 = temp_var1;\n            }\n            else if ((temp_var4 & 0x480) == 0) {\n              temp_var4 = *input_data;\n            }\n            else {\n              result = *input_data - input_data[4];\n              temp_var5 = result + 1 + temp_var1;\n              temp_var6 = (int)(input_data[5] * 3) / 2;\n              if (temp_var5 <= temp_var6) {\n                temp_var5 = temp_var6;\n              }\n              if ((int)(temp_var4 << 0x15) < 0) {\n                temp_var6 = allocate_memory(error_code,temp_var5);\n                if (temp_var6 == 0) {\n                  *error_code = 0xc;\n                  flag = *(ushort *)(input_data + 3);\n                  goto LABfunction_underscore00083da4;\n                }\n                copy_memory(temp_var6,input_data[4],result);\n                *(ushort *)(input_data + 3) = *(ushort *)(input_data + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                temp_var6 = reallocate_memory(error_code);\n                if (temp_var6 == 0) {\n                  free_memory(error_code,input_data[4]);\n                  flag = *(ushort *)(input_data + 3) & 0xff7f;\n                  *error_code = 0xc;\n                  goto LABfunction_underscore00083da4;\n                }\n              }\n              temp_var4 = temp_var6 + result;\n              input_data[4] = temp_var6;\n              input_data[5] = temp_var5;\n              *input_data = temp_var4;\n              input_data[2] = temp_var5 - result;\n              temp_var5 = temp_var1;\n            }\n            move_memory(temp_var4,temp_var7,temp_var5);\n            input_data[2] = input_data[2] - temp_var5;\n            *input_data = *input_data + temp_var5;\n            temp_var5 = temp_var1;\n          }\n          else if ((input_data[4] < *input_data) || (temp_var4 = input_data[5], temp_var1 < temp_var4)) {\n            if (temp_var1 < temp_var5) {\n              temp_var5 = temp_var1;\n            }\n            move_memory(*input_data,temp_var7,temp_var5);\n            temp_var4 = input_data[2];\n            input_data[2] = temp_var4 - temp_var5;\n            *input_data = *input_data + temp_var5;\n            if ((temp_var4 - temp_var5 == 0) && (result = flush_output(error_code,input_data), result != 0))\n            goto LABfunction_underscore00083da2;\n          }\n          else {\n            temp_var5 = 0x7fffffff;\n            if (temp_var1 < 0x7fffffff) {\n              temp_var5 = temp_var1;\n            }\n            temp_var5 = (*(callback_function *)input_data[9])(error_code,input_data[7],temp_var7,(temp_var5 / temp_var4) * temp_var4);\n            if ((int)temp_var5 < 1) goto LABfunction_underscore00083da2;\n          }\n          ptr1 = buffer[2];\n          temp_var7 = temp_var7 + temp_var5;\n          temp_var1 = temp_var1 - temp_var5;\n          buffer[2] = (uint *)((int)ptr1 - temp_var5);\n          if ((uint *)((int)ptr1 - temp_var5) == (uint *)0x0) break;\n          temp_var4 = (uint)*(ushort *)(input_data + 3);\n        }\n      }\n      else {\n        do {\n          while (temp_var1 == 0) {\n            temp_var5 = *ptr2;\n            temp_var1 = ptr2[1];\n            local_var = 0;\n            ptr2 = ptr2 + 2;\n          }\n          if (local_var == 0) {\n            result = find_character(temp_var5,10,temp_var1);\n            if (result == 0) {\n              temp_var7 = temp_var1 + 1;\n              local_var = 1;\n            }\n            else {\n              temp_var7 = (result + 1) - temp_var5;\n              local_var = 1;\n            }\n          }\n          temp_var6 = *input_data;\n          temp_var4 = temp_var7;\n          if (temp_var1 <= temp_var7) {\n            temp_var4 = temp_var1;\n          }\n          temp_var2 = input_data[5];\n          if ((input_data[4] < temp_var6) && (temp_var8 = input_data[2] + temp_var2, (int)temp_var8 < (int)temp_var4)) {\n            move_memory(temp_var6,temp_var5,temp_var8);\n            *input_data = *input_data + temp_var8;\n            result = flush_output(error_code,input_data);\n            if (result != 0) goto LABfunction_underscore00083da2;\n          }\n          else if ((int)temp_var4 < (int)temp_var2) {\n            move_memory(temp_var6,temp_var5,temp_var4);\n            input_data[2] = input_data[2] - temp_var4;\n            *input_data = temp_var4 + *input_data;\n            temp_var8 = temp_var4;\n          }\n          else {\n            temp_var8 = (*(callback_function *)input_data[9])(error_code,input_data[7],temp_var5,temp_var2);\n            if ((int)temp_var8 < 1) goto LABfunction_underscore00083da2;\n          }\n          temp_var7 = temp_var7 - temp_var8;\n          if (temp_var7 == 0) {\n            result = flush_output(error_code,input_data);\n            if (result != 0) goto LABfunction_underscore00083da2;\n            local_var = 0;\n          }\n          ptr1 = buffer[2];\n          temp_var5 = temp_var5 + temp_var8;\n          temp_var1 = temp_var1 - temp_var8;\n          buffer[2] = (uint *)((int)ptr1 - temp_var8);\n        } while ((uint *)((int)ptr1 - temp_var8) != (uint *)0x0);\n      }\n    }\n    else {\n      temp_var1 = 0;\n      temp_var4 = 0;\n      do {\n        while( true ) {\n          temp_var7 = temp_var4;\n          if (0x7ffffbff < temp_var4) {\n            temp_var7 = 0x7ffffc00;\n          }\n          if (temp_var4 != 0) break;\n          temp_var1 = *ptr2;\n          temp_var4 = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        result = (*(callback_function *)input_data[9])(error_code,input_data[7],temp_var1,temp_var7);\n        if (result < 1) {\nLABfunction_underscore00083da2:\n          flag = *(ushort *)(input_data + 3);\nLABfunction_underscore00083da4:\n          *(ushort *)(input_data + 3) = flag | 0x40;\n          return 0xffffffff;\n        }\n        ptr1 = buffer[2];\n        temp_var1 = temp_var1 + result;\n        temp_var4 = temp_var4 - result;\n        buffer[2] = (uint *)((int)ptr1 - result);\n      } while ((uint *)((int)ptr1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "param_1": "error_code",
                "param_2": "input_data",
                "param_3": "buffer",
                "iVar1": "result",
                "uVar2": "temp_var1",
                "uVar3": "temp_var2",
                "uVar4": "flag",
                "uVar5": "temp_var4",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "uVar8": "temp_var5",
                "uVar9": "temp_var6",
                "uVar10": "temp_var7",
                "uVar11": "temp_var8",
                "local_2c": "local_var",
                "__swsetup_r": "initialize_input_array",
                "_malloc_r": "allocate_memory",
                "memcpy": "copy_memory",
                "_realloc_r": "reallocate_memory",
                "_free_r": "free_memory",
                "memmove": "move_memory",
                "_fflush_r": "flush_output",
                "memchr": "find_character",
                "_": "function_underscore",
                "FUN_00083ca8": "process_data_00083ca8",
                "code": "callback_function"
            },
            "calling": [
                "FUN_00082824"
            ],
            "called": [
                "FUN_00081d48",
                "FUN_00081fac",
                "FUN_00083b10",
                "FUN_0008356c",
                "FUN_00081810",
                "FUN_00083850",
                "FUN_000840f8",
                "FUN_00081e34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "1": "input_param",
                    "7": "error_code",
                    "3": "input_data",
                    "2": "input_array"
                },
                "param_2": {
                    "4": "input_data",
                    "1": "buffer_data",
                    "2": "input"
                },
                "param_3": {
                    "1": "output_buffer",
                    "3": "output_data",
                    "2": "output",
                    "4": "buffer"
                },
                "iVar1": {
                    "1": "temp_var",
                    "2": "index",
                    "22": "result"
                },
                "uVar2": {
                    "9": "temp_var1",
                    "2": "read_size",
                    "1": "u_var_temp1",
                    "5": "temp1",
                    "3": "value1"
                },
                "uVar3": {
                    "1": "flag2",
                    "5": "temp2",
                    "9": "temp_var2",
                    "2": "temp_uint_2",
                    "3": "value2"
                },
                "uVar4": {
                    "11": "flag",
                    "6": "temp_var3",
                    "1": "flag_a",
                    "3": "flags",
                    "2": "temp_ushort"
                },
                "uVar5": {
                    "1": "temp4",
                    "2": "u_var5",
                    "3": "size",
                    "6": "temp_var4"
                },
                "puVar6": {
                    "1": "temp_data_ptr_1",
                    "2": "pointer_var1",
                    "13": "ptr1",
                    "5": "temp_ptr1",
                    "3": "pointer1"
                },
                "puVar7": {
                    "3": "pointer2",
                    "1": "pointer_b",
                    "5": "temp_ptr2",
                    "2": "pointer_var2",
                    "13": "ptr2"
                },
                "uVar8": {
                    "2": "copy_size",
                    "1": "offset",
                    "6": "temp_var5",
                    "4": "size"
                },
                "uVar9": {
                    "1": "start",
                    "2": "temp_uint_5",
                    "6": "temp_var6"
                },
                "uVar10": {
                    "1": "temp_value3",
                    "2": "temp_uint_6",
                    "6": "temp_var7"
                },
                "uVar11": {
                    "1": "result",
                    "2": "temp_uint_7",
                    "3": "temp2",
                    "6": "temp_var8"
                },
                "local_2c": {
                    "2": "temp_uint_8",
                    "1": "temp_var7",
                    "4": "temp_var9",
                    "7": "local_var",
                    "3": "temp3"
                },
                "__swsetup_r": {
                    "1": "setup_r"
                },
                "_malloc_r": {
                    "1": "allocate_memory_func",
                    "5": "allocate_memory"
                },
                "memcpy": {
                    "1": "copy_memory_func",
                    "5": "copy_memory"
                },
                "_realloc_r": {
                    "1": "realloc_function",
                    "4": "reallocate_memory"
                },
                "_free_r": {
                    "4": "free_memory",
                    "1": "free_allocated_memory"
                },
                "memmove": {
                    "1": "move_memory_func",
                    "5": "move_memory"
                },
                "_fflush_r": {
                    "1": "flush_memory"
                },
                "memchr": {
                    "1": "find_character_in_memory"
                },
                "_": {
                    "1": "function_underscore"
                },
                "FUN_00081d48": {
                    "1": "create_input_array"
                },
                "FUN_00081fac": {
                    "1": "create_count_array"
                },
                "FUN_00083b10": {
                    "1": "unspecified_function"
                },
                "FUN_0008356c": {
                    "1": "unspecified_function"
                },
                "FUN_00081810": {
                    "1": "initialize_count_array"
                },
                "FUN_00083850": {
                    "1": "unspecified_function"
                },
                "FUN_000840f8": {
                    "1": "modify_pointer_array"
                },
                "FUN_00081e34": {
                    "1": "unspecified_function"
                },
                "FUN_00083ca8": {
                    "1": "read_write_data",
                    "12": "process_data"
                },
                "sizeof": {
                    "1": "size_of"
                },
                "__realloc_r": {
                    "1": "resize_allocated_memory"
                },
                "copy_memory": {
                    "1": "copy_input_to_output"
                },
                "move_memory": {
                    "1": "move_input_to_output"
                },
                "allocate_memory": {
                    "1": "allocate_new_memory"
                },
                "resize_allocated_memory": {
                    "1": "resize_allocated_memory"
                },
                "free_allocated_memory": {
                    "1": "free_allocated_memory"
                },
                "flush_buffered_data": {
                    "1": "flush_buffered_data"
                },
                "search_character_in_memory": {
                    "1": "search_character_in_memory"
                },
                "_memset_r": {
                    "1": "set_memory"
                },
                "code": {
                    "1": "callback_function"
                }
            }
        },
        "FUN_00084004": {
            "entrypoint": "0x00084004",
            "current_name": "get_memory_address_00084004",
            "code": "\nuint32_t get_memory_address_00084004(void)\n\n{\n  memory_address 0x20070878;\n}\n\n",
            "renaming": {
                "FUN_00084004": "get_memory_address_00084004",
                "undefined4": "uint32_t",
                "return": "memory_address"
            },
            "calling": [
                "FUN_0008434c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00084004": {
                    "1": "get_constant_value",
                    "9": "get_magic_number",
                    "15": "get_memory_address"
                },
                "undefined4": {
                    "2": "uint32",
                    "1": "unsigned_integer",
                    "7": "uint32_t"
                },
                "0x20070878": {
                    "1": "base_address",
                    "4": "memory_address",
                    "2": "magic_number"
                },
                "<original_variable_name_1>": {
                    "1": "result"
                },
                "PTR_20070878": {
                    "1": "result"
                },
                "": {
                    "1": ""
                },
                "return": {
                    "1": "memory_address"
                }
            }
        },
        "FUN_0008400c": {
            "entrypoint": "0x0008400c",
            "current_name": "get_elf_relocation_offset_0008400c",
            "code": "\ndword get_elf_relocation_offset_0008400c(void)\n\n{\n  return offset_value;\n}\n\n",
            "renaming": {
                "FUN_0008400c": "get_elf_relocation_offset_0008400c",
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "r_offset": "offset",
                "Elf32_Rel_ARRAY_20070000[275].r_offset": "offset_value"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008400c": {
                    "1": "get_offset_from_rel_table",
                    "2": "get_rel_array_offset",
                    "9": "get_elf_relocation_offset",
                    "6": "get_elf32_rel_offset",
                    "3": "get_rel_offset"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "elf_relocations",
                    "4": "elf_relocation_array",
                    "3": "elf_rel_array",
                    "2": "elf_rel_table",
                    "5": "elf32_rel_array",
                    "6": "rel_array"
                },
                "r_offset": {
                    "1": "offset_275",
                    "4": "relocation_offset",
                    "5": "offset"
                },
                "275": {
                    "1": "entry_index",
                    "2": "index"
                },
                "Elf32_Rel_ARRAY_20070000[275].r_offset": {
                    "1": "relocation_offset"
                }
            }
        },
        "FUN_00084018": {
            "entrypoint": "0x00084018",
            "current_name": "process_file_00084018",
            "code": "\nvoid process_file_00084018(int file_descriptor,int *file_info)\n\n{\n  ushort file_mode;\n  int file_status;\n  int allocated_memory;\n  uint temp_var;\n  bool is_regular_file;\n  undefined stat_buffer [4];\n  uint file_mode;\n  \n  file_mode = *(ushort *)(file_info + 3);\n  temp_var = (uint)file_mode;\n  if ((int)(temp_var << 0x1e) < 0) {\n    *file_info = (int)file_info + 0x43;\n    pointer_to_param_array[4] = (int)file_info + 0x43;\n    pointer_to_param_array[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)file_info + 0xe)) {\n    file_status = get_file_status(file_descriptor,(int)*(short *)((int)file_info + 0xe),stat_buffer);\n    if (-1 < file_status) {\n      is_regular_file = (file_mode & 0xf000) == 0x2000;\n      if (((file_mode & 0xf000) == 0x8000) && (magic_number == 0x8427d)) {\n        file_status = 0x400;\n        *(ushort *)(file_info + 3) = *(ushort *)(file_info + 3) | 0x400;\n        file_info[0x13] = 0x400;\n      }\n      else {\n        file_status = 0x400;\n        *(ushort *)(file_info + 3) = *(ushort *)(file_info + 3) | 0x800;\n      }\n      goto skip_code;\n    }\n    file_mode = *(ushort *)(file_info + 3);\n    temp_var = (uint)file_mode;\n  }\n  *(ushort *)(file_info + 3) = file_mode | 0x800;\n  if ((temp_var & 0x80) == 0) {\n    file_status = 0x400;\n  }\n  else {\n    file_status = 0x40;\n  }\n  is_regular_file = false;\nskip_code:\n  allocated_memory = allocate_memory(file_descriptor,file_status);\n  file_mode = *(ushort *)(file_info + 3);\n  if (allocated_memory == 0) {\n    if (-1 < (int)((uint)file_mode << 0x16)) {\n      *(ushort *)(file_info + 3) = file_mode | 2;\n      *file_info = (int)file_info + 0x43;\n      pointer_to_param_array[4] = (int)file_info + 0x43;\n      pointer_to_param_array[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(file_descriptor + 0x3c) = unknown_function;\n    *(ushort *)(file_info + 3) = file_mode | 0x80;\n    *file_info = allocated_memory;\n    pointer_to_param_array[4] = allocated_memory;\n    pointer_to_param_array[5] = file_status;\n    if ((is_regular_file) && (file_status = is_terminal_device(file_descriptor,(int)*(short *)((int)file_info + 0xe)), file_status != 0)) {\n      *(ushort *)(file_info + 3) = *(ushort *)(file_info + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "param_1": "file_descriptor",
                "param_2": "file_info",
                "uVar1": "file_mode",
                "iVar2": "file_status",
                "iVar3": "allocated_memory",
                "uVar4": "temp_var",
                "bVar5": "is_regular_file",
                "auStack_54": "stat_buffer",
                "local_50": "file_mode",
                "_fstat_r": "get_file_status",
                "LAB_00084074": "skip_code",
                "_malloc_r": "allocate_memory",
                "_isatty_r": "is_terminal_device",
                "FUN_00084018": "process_file_00084018",
                "param_2[10]": "magic_number",
                "&LAB_0008387c_1": "unknown_function",
                "param_2[4]": "pointer_to_param_array[4]",
                "param_2[5]": "pointer_to_param_array[5]"
            },
            "calling": [
                "FUN_0008356c"
            ],
            "called": [
                "FUN_000844bc",
                "FUN_00084494",
                "FUN_00081810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "1": "original_param",
                    "23": "file_descriptor",
                    "2": "param_1",
                    "3": "param1"
                },
                "param_2": {
                    "2": "param_2",
                    "1": "output_buffer",
                    "13": "file_info",
                    "3": "file_data"
                },
                "uVar1": {
                    "1": "file_permissions",
                    "2": "file_attributes",
                    "7": "file_mode",
                    "3": "file_flags",
                    "4": "flags"
                },
                "iVar2": {
                    "1": "result1",
                    "5": "file_stat_result",
                    "8": "file_status",
                    "6": "status",
                    "3": "fstat_result",
                    "2": "result"
                },
                "iVar3": {
                    "8": "malloc_result",
                    "10": "allocated_memory",
                    "1": "result",
                    "3": "allocation_result",
                    "2": "memory_allocation_result"
                },
                "uVar4": {
                    "1": "file_flag_u",
                    "2": "u_var4",
                    "3": "temp_var"
                },
                "bVar5": {
                    "1": "isatty_result",
                    "13": "is_regular_file",
                    "2": "is_terminal",
                    "4": "is_tty"
                },
                "auStack_54": {
                    "1": "file_stats_buffer",
                    "2": "file_stats",
                    "3": "file_stat_buffer",
                    "4": "buffer",
                    "8": "stat_buffer"
                },
                "local_50": {
                    "1": "file_stat_flags",
                    "2": "file_stat",
                    "7": "file_mode",
                    "3": "file_permissions"
                },
                "_fstat_r": {
                    "1": "fstat_subfunction",
                    "6": "get_file_status"
                },
                "param_2 + 3": {
                    "1": "buffer[3]"
                },
                "(int)param_2 + 0xe": {
                    "1": "param_index"
                },
                "LAB_00084074": {
                    "1": "skip_code"
                },
                "0x8427d": {
                    "1": "magic_number"
                },
                "_malloc_r": {
                    "6": "allocate_memory",
                    "1": "malloc_subfunction"
                },
                "param_1 + 0x3c": {
                    "1": "file_struct_ptr"
                },
                "PARAM_2": {
                    "1": "param2"
                },
                "PARAM_3": {
                    "1": "param3"
                },
                "PARAM_4": {
                    "1": "param4"
                },
                "_isatty_r": {
                    "1": "check_terminal",
                    "2": "is_terminal_device"
                },
                "FUN_000844bc": {
                    "1": "subfunction1"
                },
                "FUN_00084494": {
                    "1": "subfunction2"
                },
                "FUN_00081810": {
                    "1": "subfunction3"
                },
                "FUN_00084018": {
                    "1": "allocate_memory_and_initialize",
                    "2": "initialize_file"
                },
                "param_2[10]": {
                    "1": "magic_number"
                },
                "&LAB_0008387c_1": {
                    "1": "unknown_function"
                },
                "*param_2": {
                    "1": "pointer_to_param_array"
                },
                "param_2[4]": {
                    "1": "pointer_to_param_array[4]"
                },
                "param_2[5]": {
                    "1": "pointer_to_param_array[5]"
                },
                "fun_000844bc": {
                    "1": "initialize_file_info"
                },
                "fun_00084494": {
                    "1": "initialize_file_info_with_params"
                },
                "fun_00081810": {
                    "1": "process_file"
                }
            }
        },
        "FUN_000840f8": {
            "entrypoint": "0x000840f8",
            "current_name": "find_first_occurrence_000840f8",
            "code": "\nuint * find_first_occurrence_000840f8(uint *array,char character,uint length)\n\n{\n  uint xor_result;\n  int index;\n  uint *ptr;\n  bool found;\n  \n  if (((uint)array & 3) == 0) {\nloop_start:\n    if (3 < length) {\n      ptr = array;\n      do {\n        xor_result = *ptr ^ CONCAT22(CONCAT11(character,character),CONCAT11(character,character));\n        array = ptr;\n        if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) break;\n        length = length - 4;\n        array = ptr + 1;\n        ptr = ptr + 1;\n      } while (3 < length);\n    }\n    if (length == 0) {\n      array = (uint *)0x0;\n    }\n    else if (*(char *)array != character) {\n      index = 0;\n      do {\n        array = (uint *)((int)array + 1);\n        found = index == length - 1;\n        index = index + 1;\n        if (found) goto no_occurrence;\n      } while (*(char *)array != character);\n    }\n  }\n  else if (length == 0) {\nno_occurrence:\n    array = (uint *)0x0;\n  }\n  else if (*(char *)array != character) {\n    ptr = (uint *)((int)array + 1);\n    length = length - 1;\n    do {\n      array = ptr;\n      if (((uint)array & 3) == 0) goto loop_start;\n      if (length == 0) goto no_occurrence;\n      ptr = (uint *)((int)array + 1);\n      length = length - 1;\n    } while (*(char *)array != character);\n  }\n  return array;\n}\n\n",
            "renaming": {
                "FUN_000840f8": "find_first_occurrence_000840f8",
                "param_1": "array",
                "param_2": "character",
                "param_3": "length",
                "uVar1": "xor_result",
                "iVar2": "index",
                "puVar3": "ptr",
                "bVar4": "found",
                "LAB_00084128": "loop_start",
                "LAB_00084150": "no_occurrence"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_0008289c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000840f8": {
                    "1": "find_character_in_buffer",
                    "3": "find_char_in_buffer",
                    "2": "find_char_in_array",
                    "4": "find_char_sequence",
                    "5": "find_character",
                    "12": "find_first_occurrence"
                },
                "param_1": {
                    "2": "sequence",
                    "14": "array",
                    "1": "char_array",
                    "4": "input_array",
                    "6": "buffer"
                },
                "param_2": {
                    "5": "target_char",
                    "11": "character",
                    "4": "target_value",
                    "1": "desired_char",
                    "9": "target"
                },
                "param_3": {
                    "8": "array_length",
                    "2": "array_size",
                    "1": "buffer_length",
                    "4": "size",
                    "14": "length"
                },
                "uVar1": {
                    "10": "xor_result",
                    "1": "value",
                    "7": "temp",
                    "2": "xored_value",
                    "6": "result"
                },
                "iVar2": {
                    "1": "i",
                    "2": "counter",
                    "27": "index"
                },
                "puVar3": {
                    "1": "p",
                    "8": "current_ptr",
                    "4": "current_element",
                    "3": "current",
                    "12": "ptr"
                },
                "bVar4": {
                    "6": "is_last_element",
                    "3": "is_last_iteration",
                    "4": "is_last_index",
                    "1": "reached_end",
                    "2": "is_last_char"
                },
                "LAB_00084128": {
                    "1": "loop_start"
                },
                "LAB_00084150": {
                    "1": "no_occurrence"
                },
                "FUNKY_FUNCTION_NAME": {
                    "1": "find_character_index"
                }
            }
        },
        "FUN_000841e4": {
            "entrypoint": "0x000841e4",
            "current_name": "process_signal_000841e4",
            "code": "\nint process_signal_000841e4(uint param)\n\n{\n  dword rel_offset;\n  undefined4 pid;\n  int function_ptr;\n  code *function_ptr;\n  undefined4 register4;\n  undefined4 register5;\n  undefined4 link_register;\n  undefined4 constant_value;\n  \n  rel_offset = array[140].r_offset;\n  constant_value = 0x20070460;\n  if (0x1f < param) {\n    *(undefined4 *)array[140].r_offset = 0x16;\n    return -1;\n  }\n  function_ptr = *(int *)(array[140].r_offset + 0x2dc);\n  if ((function_ptr == 0) || (function_ptr = *(code **)(function_ptr + param * 4), function_ptr == (code *)0x0)) {\n    pid = get_process_id(array[140].r_offset);\n    DAT_20071244 = 0;\n    function_ptr = kill_process(pid,param,param,0,constant_value,register4,register5,link_register);\n    if ((function_ptr == -1) && (DAT_20071244 != 0)) {\n      *(int *)rel_offset = DAT_20071244;\n      return -1;\n    }\n    return function_ptr;\n  }\n  if (function_ptr == (code *)0x1) {\n    return 0;\n  }\n  if (function_ptr != (code *)0xffffffff) {\n    *(undefined4 *)(function_ptr + param * 4) = 0;\n    (*function_ptr)(param);\n    return 0;\n  }\n  *(undefined4 *)array[140].r_offset = 0x16;\n  return 1;\n}\n\n",
            "renaming": {
                "param_1": "param",
                "dVar1": "rel_offset",
                "uVar2": "pid",
                "iVar3": "function_ptr",
                "pcVar4": "function_ptr",
                "uVar5": "constant_value",
                "FUN_000841e4": "process_signal_000841e4",
                "in_lr": "link_register",
                "unaff_r4": "register4",
                "unaff_r5": "register5",
                "_getpid_r": "get_process_id",
                "_kill": "kill_process",
                "Elf32_Rel_ARRAY_20070000": "array"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "FUN_0008421c",
                "FUN_00080efc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "2": "index",
                    "1": "value",
                    "4": "signal_number",
                    "5": "signal",
                    "6": "param",
                    "3": "input_param"
                },
                "dVar1": {
                    "10": "rel_offset",
                    "2": "relocation_offset",
                    "1": "memory_offset",
                    "8": "offset",
                    "3": "elf_rel_offset",
                    "4": "offset_value"
                },
                "uVar2": {
                    "1": "pid_result",
                    "23": "pid",
                    "6": "process_id"
                },
                "iVar3": {
                    "1": "result",
                    "3": "handler",
                    "5": "function_ptr",
                    "4": "value",
                    "2": "func_offset"
                },
                "pcVar4": {
                    "1": "current_handler",
                    "4": "signal_handler",
                    "2": "func_ptr",
                    "10": "function_ptr",
                    "3": "function"
                },
                "uVar5": {
                    "1": "rel_offset_code",
                    "2": "global_variable",
                    "8": "constant_value",
                    "5": "constant"
                },
                "FUN_000841e4": {
                    "1": "check_param_and_execute",
                    "8": "process_signal",
                    "4": "check_and_execute_function",
                    "2": "process_function"
                },
                "in_lr": {
                    "1": "unknown_var",
                    "2": "return_address",
                    "3": "link_register"
                },
                "unaff_r4": {
                    "1": "var1",
                    "2": "register4"
                },
                "unaff_r5": {
                    "1": "var2",
                    "2": "register5"
                },
                "_getpid_r": {
                    "3": "get_process_id"
                },
                "_kill": {
                    "1": "send_signal",
                    "2": "kill_process"
                },
                "DAT_20071244": {
                    "1": "error_code"
                },
                "FUNC_00080efc": {
                    "1": "do_something",
                    "2": "sub_function"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "array"
                }
            }
        },
        "FUN_0008421c": {
            "entrypoint": "0x0008421c",
            "current_name": "FUN_0008421c",
            "code": "\nundefined4 _getpid(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_000841e4"
            ],
            "called": [
                "FUN_00080efe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084220": {
            "entrypoint": "0x00084220",
            "current_name": "update_data_00084220",
            "code": "\nvoid update_data_00084220(undefined4 file_descriptor,int data_pointer)\n\n{\n  int read_result;\n  \n  read_result = _read_r(file_descriptor,(int)*(short *)(data_pointer + 0xe));\n  if (-1 < read_result) {\n    *(int *)(data_pointer + 0x50) = *(int *)(data_pointer + 0x50) + read_result;\n    return;\n  }\n  *(ushort *)(data_pointer + 0xc) = *(ushort *)(data_pointer + 0xc) & 0xefff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084220": "update_data_00084220",
                "param_1": "file_descriptor",
                "param_2": "data_pointer",
                "iVar1": "read_result"
            },
            "calling": [],
            "called": [
                "FUN_00084508"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00084220": {
                    "1": "update_total_read_bytes",
                    "2": "update_read_count",
                    "17": "update_data"
                },
                "param_1": {
                    "1": "arg1",
                    "13": "file_descriptor",
                    "11": "buffer"
                },
                "param_2": {
                    "5": "data_struct",
                    "1": "arg2",
                    "2": "data_offset",
                    "6": "data_pointer",
                    "3": "buffer"
                },
                "iVar1": {
                    "16": "read_result",
                    "1": "read_bytes",
                    "2": "read_status",
                    "12": "bytes_read"
                }
            }
        },
        "FUN_00084244": {
            "entrypoint": "0x00084244",
            "current_name": "write_to_file_00084244",
            "code": "\nvoid write_to_file_00084244(int *file_descriptor,int buffer_address,undefined4 data,undefined4 size)\n\n{\n  int write_result;\n  ushort data_value;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 unused3;\n  undefined4 unused4;\n  \n  data_value = *(ushort *)(buffer_address + 0xc);\n  if ((int)((uint)data_value << 0x17) < 0) {\n    seek_file(file_descriptor,(int)*(short *)(buffer_address + 0xe),0,2);\n    data_value = *(ushort *)(buffer_address + 0xc);\n  }\n  *(ushort *)(buffer_address + 0xc) = data_value & 0xefff;\n  DAT_20071244 = 0;\n  write_result = file_write((int)*(short *)(buffer_address + 0xe),data,size,size,unused1,unused2,unused3,\n                 unused4);\n  if ((write_result == -1) && (DAT_20071244 != 0)) {\n    *file_descriptor = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084244": "write_to_file_00084244",
                "param_1": "file_descriptor",
                "param_2": "buffer_address",
                "param_3": "data",
                "param_4": "size",
                "iVar1": "write_result",
                "uVar2": "data_value",
                "_lseek_r": "seek_file",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2",
                "unaff_r6": "unused3",
                "in_lr": "unused4",
                "_write": "file_write"
            },
            "calling": [],
            "called": [
                "FUN_000844e0",
                "FUN_00080ec8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00084244": {
                    "4": "write_data",
                    "12": "write_to_file",
                    "1": "write_with_offset",
                    "2": "write_to_memory",
                    "9": "write_data_to_file"
                },
                "param_1": {
                    "1": "output",
                    "30": "file_descriptor"
                },
                "param_2": {
                    "1": "memory_address",
                    "4": "data_pointer",
                    "2": "buffer",
                    "6": "buffer_address"
                },
                "param_3": {
                    "17": "data",
                    "1": "buffer_address",
                    "2": "data_address",
                    "7": "buffer"
                },
                "param_4": {
                    "2": "data_length",
                    "10": "size",
                    "4": "buffer_size",
                    "1": "number_of_bytes"
                },
                "iVar1": {
                    "27": "write_result",
                    "1": "write_status"
                },
                "uVar2": {
                    "5": "data_value",
                    "1": "file_offset",
                    "3": "value",
                    "2": "data_flag"
                },
                "_lseek_r": {
                    "1": "file_seek",
                    "2": "seek_file"
                },
                "DAT_20071244": {
                    "1": "error_code"
                },
                "unaff_r4": {
                    "3": "unaff1",
                    "8": "unused1",
                    "2": "unused_1",
                    "1": "unused_r4"
                },
                "unaff_r5": {
                    "1": "unused_param",
                    "2": "unused_var2",
                    "3": "unaff2",
                    "8": "unused2"
                },
                "unaff_r6": {
                    "1": "unused_r6",
                    "8": "unused3",
                    "3": "unaff3",
                    "2": "unused_var3"
                },
                "in_lr": {
                    "1": "unused_parameter4",
                    "2": "unused",
                    "8": "unused4"
                },
                "_write": {
                    "1": "file_write"
                }
            }
        },
        "FUN_0008427c": {
            "entrypoint": "0x0008427c",
            "current_name": "seek_and_set_flag_0008427c",
            "code": "\nvoid seek_and_set_flag_0008427c(undefined4 file_descriptor,int struct_address)\n\n{\n  int seek_result;\n  ushort flag;\n  \n  seek_result = custom_lseek(file_descriptor,(int)*(short *)(struct_address + 0xe));\n  if (seek_result == -1) {\n    flag = *(ushort *)(struct_address + 0xc) & 0xefff;\n  }\n  else {\n    flag = *(ushort *)(struct_address + 0xc) | 0x1000;\n  }\n  if (seek_result != -1) {\n    *(int *)(struct_address + 0x50) = seek_result;\n  }\n  *(ushort *)(struct_address + 0xc) = flag;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008427c": "seek_and_set_flag_0008427c",
                "param_1": "file_descriptor",
                "param_2": "struct_address",
                "iVar1": "seek_result",
                "uVar2": "flag",
                "_lseek_r": "custom_lseek"
            },
            "calling": [],
            "called": [
                "FUN_000844e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008427c": {
                    "1": "verify_file_access",
                    "3": "update_file_position",
                    "2": "update_seek_position",
                    "4": "update_file_pointer",
                    "6": "seek_and_set_flag"
                },
                "param_1": {
                    "30": "file_descriptor",
                    "1": "param1"
                },
                "param_2": {
                    "1": "data_struct_ptr",
                    "2": "struct_pointer",
                    "8": "struct_address",
                    "3": "buffer",
                    "4": "buffer_address"
                },
                "iVar1": {
                    "1": "lseek_result",
                    "4": "result",
                    "25": "seek_result"
                },
                "uVar2": {
                    "9": "flag",
                    "2": "flags",
                    "4": "updated_flag",
                    "1": "flag_value",
                    "3": "modified_flag"
                },
                "_lseek_r": {
                    "1": "custom_lseek"
                },
                "*(short *)(param_2 + 0xe)": {
                    "1": "offset"
                },
                "*(ushort *)(param_2 + 0xc)": {
                    "1": "current_flag"
                },
                "*(int *)(param_2 + 0x50)": {
                    "1": "new_file_descriptor"
                },
                "FUN_000844e0": {
                    "1": "update_buffer_data"
                },
                "param_3": {
                    "1": "param3"
                },
                "param_4": {
                    "1": "param4"
                },
                "FUM_0008427c": {
                    "1": "reverse_and_update_flags"
                }
            }
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "process_data_000842a4",
            "code": "\nuint process_data_000842a4(int input,uint flag,undefined4 *buffer,undefined4 size)\n\n{\n  ushort ushort_value;\n  uint uint_value;\n  undefined *ptr;\n  int index;\n  \n  if ((input != 0) && (*(int *)(input + 0x38) == 0)) {\n    initialize();\n  }\n  ushort_value = *(ushort *)(buffer + 3);\n  uint_value = (uint)ushort_value;\n  buffer[2] = buffer[6];\n  if ((-1 < (int)(uint_value << 0x1c)) || (index = buffer[4], index == 0)) {\n    index = setup_stream(input,buffer,ushort_value,uint_value,size);\n    if (index != 0) {\n      return 0xffffffff;\n    }\n    ushort_value = *(ushort *)(buffer + 3);\n    index = buffer[4];\n    uint_value = (uint)ushort_value;\n  }\n  flag = flag & 0xff;\n  if ((int)(uint_value << 0x12) < 0) {\n    ptr = (undefined *)*buffer;\n    index = (int)ptr - index;\n    if (index < (int)buffer[5]) {\nincrease_position:\n      index = index + 1;\n      goto LAB_000842d8;\n    }\n  }\n  else {\n    buffer[0x19] = buffer[0x19] & 0xffffdfff;\n    ptr = (undefined *)*buffer;\n    *(ushort *)(buffer + 3) = ushort_value | 0x2000;\n    index = (int)ptr - index;\n    if (index < (int)buffer[5]) goto increase_position;\n  }\n  index = flush_stream(input,buffer);\n  if (index != 0) {\n    return 0xffffffff;\n  }\n  ptr = (undefined *)*buffer;\n  index = 1;\nLAB_000842d8:\n  buffer[2] = buffer[2] + -1;\n  *buffer = ptr + 1;\n  *ptr = (char)flag;\n  if (((buffer[5] == index) ||\n      (((int)((uint)*(ushort *)(buffer + 3) << 0x1f) < 0 && (flag == 10)))) &&\n     (index = flush_stream(input,buffer), index != 0)) {\n    return 0xffffffff;\n  }\n  return flag;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "process_data_000842a4",
                "param_1": "input",
                "param_2": "flag",
                "param_3": "buffer",
                "param_4": "size",
                "uVar1": "ushort_value",
                "uVar2": "uint_value",
                "puVar3": "ptr",
                "iVar4": "index",
                "__sinit": "initialize",
                "__swsetup_r": "setup_stream",
                "_fflush_r": "flush_stream",
                "LAB_000842d6": "increase_position",
                "_sinit": "initialize_stream"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [
                "FUN_0008356c",
                "FUN_00083888",
                "FUN_00083850"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000842a4": {
                    "1": "decode_and_process_data",
                    "6": "process_input",
                    "12": "process_data",
                    "2": "process_function"
                },
                "param_1": {
                    "5": "data_ptr",
                    "2": "input_ptr",
                    "1": "input_data",
                    "3": "input_pointer"
                },
                "param_2": {
                    "6": "flag",
                    "3": "input_value",
                    "1": "arg2",
                    "5": "character",
                    "2": "value"
                },
                "param_3": {
                    "2": "data_array",
                    "1": "output",
                    "14": "buffer",
                    "3": "output_buffer"
                },
                "param_4": {
                    "4": "flag",
                    "1": "arg4",
                    "2": "parameter",
                    "6": "size"
                },
                "uVar1": {
                    "1": "number_of_bytes",
                    "2": "decoded_value",
                    "11": "ushort_value",
                    "3": "character_count"
                },
                "uVar2": {
                    "12": "uint_value",
                    "1": "uint_val",
                    "2": "decoded_uint"
                },
                "puVar3": {
                    "3": "byte_ptr",
                    "1": "stream_ptr",
                    "2": "ptr_value",
                    "6": "ptr"
                },
                "iVar4": {
                    "1": "result",
                    "3": "offset",
                    "2": "index_var",
                    "14": "index"
                },
                "__sinit": {
                    "1": "initialize_context",
                    "7": "initialize",
                    "4": "initialize_stream"
                },
                "__swsetup_r": {
                    "1": "setup_r",
                    "4": "setup_stream"
                },
                "_fflush_r": {
                    "1": "flush_output",
                    "2": "flush_buffer",
                    "3": "flush_stream"
                },
                "FUN_0008356c": {
                    "1": "subfunction1"
                },
                "FUN_00083888": {
                    "1": "sw_setup"
                },
                "FUN_00083850": {
                    "1": "subfunction3"
                },
                "LAB_000842d6": {
                    "1": "increase_position"
                },
                "_sinit": {
                    "1": "initialize_stream"
                }
            }
        },
        "FUN_0008434c": {
            "entrypoint": "0x0008434c",
            "current_name": "process_data_0008434c",
            "code": "\nvoid process_data_0008434c(undefined4 *output_buffer,int input_size,undefined4 param3,undefined4 *error_code)\n\n{\n  dword relocation_info;\n  undefined4 charset;\n  int result;\n  undefined buffer [12];\n  \n  relocation_info = Elf32_Rel_ARRAY_20070000[275].r_info;\n  if (input_size == 0) {\n    charset = __locale_charset();\n    result = (*(code *)relocation_info)(output_buffer,buffer,0,charset,error_code);\n  }\n  else {\n    charset = __locale_charset();\n    result = (*(code *)relocation_info)(output_buffer,input_size,param3,charset,error_code);\n  }\n  if (result == -1) {\n    *error_code = 0;\n    *output_buffer = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008434c": "process_data_0008434c",
                "param_1": "output_buffer",
                "param_2": "input_size",
                "param_3": "param3",
                "param_4": "error_code",
                "dVar1": "relocation_info",
                "uVar2": "charset",
                "iVar3": "result",
                "auStack_24": "buffer"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [
                "FUN_00084004",
                "FUN_0008439c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008434c": {
                    "6": "execute_function",
                    "1": "execute_function_with_params",
                    "2": "perform_action"
                },
                "param_1": {
                    "3": "output_array",
                    "2": "param_ptr",
                    "1": "input_ptr",
                    "4": "output",
                    "9": "output_buffer"
                },
                "param_2": {
                    "1": "parameter_count",
                    "2": "length",
                    "5": "size",
                    "6": "input_size"
                },
                "param_3": {
                    "1": "param",
                    "2": "constant_value",
                    "3": "input_value",
                    "6": "param3",
                    "4": "param_3"
                },
                "param_4": {
                    "2": "output_ptr",
                    "1": "result_code",
                    "8": "error_code",
                    "6": "status",
                    "3": "result"
                },
                "dVar1": {
                    "1": "elf_relocation",
                    "2": "info",
                    "7": "relocation_info",
                    "3": "rel_info",
                    "6": "r_info_value"
                },
                "uVar2": {
                    "5": "charset_value",
                    "25": "charset",
                    "1": "charset_code"
                },
                "iVar3": {
                    "1": "status",
                    "21": "result",
                    "9": "return_value"
                },
                "auStack_24": {
                    "5": "temporary_buffer",
                    "2": "auxiliary_stack",
                    "1": "stack_data",
                    "7": "buffer"
                }
            }
        },
        "FUN_0008439c": {
            "entrypoint": "0x0008439c",
            "current_name": "write_byte_to_memory_0008439c",
            "code": "\nuint32 write_byte_to_memory_0008439c(uint32 *output_pointer,void *output_buffer,uint value)\n\n{\n  if (output_buffer == (void *)0x0) {\n    success_flag 0;\n  }\n  if (value < 0x100) {\n    *output_buffer = value_as_char;\n    success_flag 1;\n  }\n  *output_pointer = 0x8a;\n  success_flag 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0008439c": "write_byte_to_memory_0008439c",
                "param_1": "output_pointer",
                "param_2": "output_buffer",
                "param_3": "value",
                "char": "output_character",
                "(char)param_3": "value_as_char",
                "undefined4": "uint32",
                "undefined": "void",
                "return": "success_flag"
            },
            "calling": [
                "FUN_0008434c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008439c": {
                    "1": "set_value_if_valid",
                    "3": "convert_int_to_char",
                    "2": "convert_uint_to_char",
                    "5": "write_byte_to_memory"
                },
                "param_1": {
                    "2": "address",
                    "5": "output",
                    "1": "output_buffer",
                    "6": "output_pointer",
                    "3": "output_value"
                },
                "param_2": {
                    "4": "output_buffer",
                    "2": "input_pointer",
                    "1": "byte_value",
                    "3": "buffer"
                },
                "param_3": {
                    "1": "value_length",
                    "6": "input_value",
                    "2": "byte_value",
                    "9": "value"
                },
                "*param_2": {
                    "1": "memory_content"
                },
                "*param_1": {
                    "1": "output_value"
                },
                "0x100": {
                    "1": "256"
                },
                "0x8a": {
                    "1": "error_code"
                },
                "char": {
                    "1": "char"
                },
                "(undefined *)0x0": {
                    "3": "null"
                },
                "(char)param_3": {
                    "1": "value_as_char"
                },
                "undefined4": {
                    "1": "uint32"
                },
                "undefined": {
                    "1": "void"
                },
                "0xffffffff": {
                    "1": "error_occurred"
                },
                "param_3 < 0x100": {
                    "1": "data_less_than_256"
                },
                "return": {
                    "1": "success_flag"
                }
            }
        },
        "FUN_00084484": {
            "entrypoint": "0x00084484",
            "current_name": "flush_and_free_resources_00084484",
            "code": "\nundefined4 flush_and_free_resources_00084484(int input)\n\n{\n  dword offset;\n  undefined4 result;\n  int return_value;\n  \n  offset = relocation_table[140].r_offset;\n  if (input != 0) {\n    if ((relocation_table[140].r_offset != 0) &&\n       (*(int *)(relocation_table[140].r_offset + 0x38) == 0)) {\n      initialize();\n    }\n    if (*(short *)(input + 0xc) != 0) {\n      result = flush(offset,input);\n      if ((*(function_pointer **)(input + 0x2c) != (function_pointer *)0x0) &&\n         (return_value = (**(function_pointer **)(input + 0x2c))(offset,*(undefined4 *)(input + 0x1c)), return_value < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(input + 0xc) << 0x18) < 0) {\n        free_resource(offset,*(undefined4 *)(input + 0x10));\n      }\n      if (*(int *)(input + 0x30) != 0) {\n        if (*(int *)(input + 0x30) != input + 0x40) {\n          free_resource(offset);\n        }\n        *(undefined4 *)(input + 0x30) = 0;\n      }\n      if (*(int *)(input + 0x44) != 0) {\n        free_resource(offset);\n        *(undefined4 *)(input + 0x44) = 0;\n      }\n      acquire_lock();\n      *(undefined2 *)(input + 0xc) = 0;\n      release_lock();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00084484": "flush_and_free_resources_00084484",
                "param_1": "input",
                "dVar1": "offset",
                "uVar2": "result",
                "iVar3": "return_value",
                "__sinit": "initialize",
                "_fflush_r": "flush",
                "__sfp_lock_acquire": "acquire_lock",
                "_free_r": "free_resource",
                "__sfp_lock_release": "release_lock",
                "Elf32_Rel_ARRAY_20070000": "relocation_table",
                "code": "function_pointer"
            },
            "calling": [],
            "called": [
                "FUN_00083b10",
                "FUN_00083888",
                "FUN_00083980",
                "FUN_0008397c",
                "FUN_00083850"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00084484": {
                    "1": "flush_output",
                    "2": "cleanup_and_flush",
                    "4": "flush_file",
                    "9": "flush_and_free_resources"
                },
                "param_1": {
                    "10": "input",
                    "2": "resource_handle",
                    "1": "output_buffer",
                    "3": "file_descriptor",
                    "4": "input_param"
                },
                "dVar1": {
                    "1": "file_offset",
                    "9": "rel_offset",
                    "14": "offset",
                    "2": "resource_offset"
                },
                "uVar2": {
                    "27": "result",
                    "3": "return_value",
                    "1": "return_val"
                },
                "iVar3": {
                    "1": "result",
                    "15": "return_value",
                    "8": "status",
                    "2": "comparison_result"
                },
                "__sinit": {
                    "5": "initialize",
                    "1": "initialize_sfp_library"
                },
                "_fflush_r": {
                    "1": "flush_resource",
                    "2": "flush"
                },
                "__sfp_lock_acquire": {
                    "1": "acquire_sf_plock",
                    "3": "acquire_stream_lock",
                    "5": "acquire_lock"
                },
                "_free_r": {
                    "2": "free_resources",
                    "1": "free",
                    "4": "free_resource"
                },
                "__sfp_lock_release": {
                    "5": "release_lock",
                    "1": "release_sf_plock",
                    "3": "release_stream_lock"
                },
                "FUN_00083b10": {
                    "3": "initialize",
                    "1": "flush_resource"
                },
                "FUN_00083888": {
                    "1": "cleanup_data",
                    "2": "free_resource"
                },
                "FUNC_00083980": {
                    "1": "helper_function_1"
                },
                "FUNC_0008397c": {
                    "1": "perform_task2"
                },
                "FUN_00083850": {
                    "2": "free_memory",
                    "3": "process_data",
                    "1": "some_function"
                },
                "param_1 + 0xc": {
                    "1": "condition"
                },
                "param_1 + 0x38": {
                    "1": "ptr_to_offset"
                },
                "param_1 + 0x2c": {
                    "1": "func_ptr1"
                },
                "param_1 + 0x1c": {
                    "1": "param_1c"
                },
                "param_1 + 0x10": {
                    "1": "param_10"
                },
                "param_1 + 0x30": {
                    "1": "ptr1"
                },
                "param_1 + 0x40": {
                    "1": "param_40"
                },
                "param_1 + 0x44": {
                    "1": "ptr2"
                },
                "FUC_00083980": {
                    "1": "initialize_lock"
                },
                "FUC_0008397c": {
                    "1": "release_lock"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "relocation_table"
                },
                "code": {
                    "4": "function_pointer"
                },
                "FUNC_0008397C": {
                    "1": "release_lock"
                },
                "param_2": {
                    "1": "status_ptr"
                },
                "FUCN_0008397c": {
                    "1": "sfp_lock_acquire"
                },
                "FUCN_00083980": {
                    "1": "sfp_lock_release"
                }
            }
        },
        "FUN_00084494": {
            "entrypoint": "0x00084494",
            "current_name": "check_file_status_00084494",
            "code": "\nvoid check_file_status_00084494(int *result,undefined4 file_descriptor,undefined4 stat_buffer,undefined4 buffer_size)\n\n{\n  int status;\n  \n  DAT_20071244 = 0;\n  status = get_file_stat(file_descriptor,stat_buffer,stat_buffer,0,buffer_size);\n  if ((status == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084494": "check_file_status_00084494",
                "param_1": "result",
                "param_2": "file_descriptor",
                "param_3": "stat_buffer",
                "param_4": "buffer_size",
                "iVar1": "status",
                "_fstat": "get_file_stat"
            },
            "calling": [
                "FUN_00084018"
            ],
            "called": [
                "FUN_00080eb0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00084494": {
                    "3": "get_file_stat",
                    "8": "check_file_status",
                    "1": "stat_and_assign_value",
                    "2": "check_and_assign_error"
                },
                "param_1": {
                    "2": "result_pointer",
                    "1": "file_attributes",
                    "3": "output",
                    "13": "result"
                },
                "param_2": {
                    "5": "fd",
                    "26": "file_descriptor"
                },
                "param_3": {
                    "2": "buf",
                    "3": "file_status",
                    "5": "stat_buf",
                    "1": "stat_struct_ptr",
                    "18": "stat_buffer"
                },
                "param_4": {
                    "1": "additional_info",
                    "13": "buffer_size",
                    "3": "path",
                    "5": "mode"
                },
                "iVar1": {
                    "2": "file_status_result",
                    "5": "file_status",
                    "1": "result",
                    "14": "status",
                    "4": "stat_result"
                },
                "DAT_20071244": {
                    "1": "file_status_error"
                },
                "_fstat": {
                    "2": "get_file_stat"
                }
            }
        },
        "FUN_000844bc": {
            "entrypoint": "0x000844bc",
            "current_name": "check_and_assign_value_000844bc",
            "code": "\nvoid check_and_assign_value_000844bc(int *output_value,undefined4 file_descriptor)\n\n{\n  int is_tty;\n  \n  DAT_20071244 = 0;\n  is_tty = check_if_terminal(file_descriptor);\n  if ((is_tty == -1) && (DAT_20071244 != 0)) {\n    *output_value = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844bc": "check_and_assign_value_000844bc",
                "param_1": "output_value",
                "param_2": "file_descriptor",
                "iVar1": "is_tty",
                "_isatty": "check_if_terminal"
            },
            "calling": [
                "FUN_00084018"
            ],
            "called": [
                "FUN_00080eba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000844bc": {
                    "1": "determine_console_mode",
                    "2": "check_if_tty",
                    "6": "check_and_assign_value",
                    "4": "check_is_terminal"
                },
                "param_1": {
                    "1": "output_value_ptr",
                    "2": "result_pointer",
                    "8": "output_value",
                    "3": "output",
                    "7": "result"
                },
                "param_2": {
                    "1": "terminal_number",
                    "25": "file_descriptor"
                },
                "iVar1": {
                    "7": "is_terminal",
                    "10": "is_tty",
                    "1": "is_stdin_redirected"
                },
                "DAT_20071244": {
                    "1": "saved_width",
                    "2": "saved_result"
                },
                "_isatty": {
                    "1": "is_terminal_interactive"
                },
                "*param_1": {
                    "1": "console_mode_pointer"
                },
                "FUN_00080eba": {
                    "1": "get_tty_status"
                }
            }
        },
        "FUN_000844e0": {
            "entrypoint": "0x000844e0",
            "current_name": "seek_and_assign_value_000844e0",
            "code": "\nvoid seek_and_assign_value_000844e0(int *result,undefined4 file_descriptor,undefined4 offset,undefined4 whence)\n\n{\n  int seek_result;\n  \n  DAT_20071244 = 0;\n  seek_result = _lseek(file_descriptor,offset,whence);\n  if ((seek_result == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844e0": "seek_and_assign_value_000844e0",
                "param_1": "result",
                "param_2": "file_descriptor",
                "param_3": "offset",
                "param_4": "whence",
                "iVar1": "seek_result"
            },
            "calling": [
                "FUN_00084244",
                "FUN_0008427c"
            ],
            "called": [
                "FUN_00080ebe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000844e0": {
                    "1": "improve_file_seek",
                    "6": "seek_and_assign_value",
                    "2": "seek_file"
                },
                "param_1": {
                    "1": "result_pointer",
                    "2": "cursor_position",
                    "3": "output",
                    "19": "result"
                },
                "param_2": {
                    "31": "file_descriptor"
                },
                "param_3": {
                    "1": "position",
                    "29": "offset"
                },
                "param_4": {
                    "12": "origin",
                    "1": "seek_whence",
                    "17": "whence"
                },
                "iVar1": {
                    "1": "result",
                    "19": "seek_result"
                }
            }
        },
        "FUN_00084508": {
            "entrypoint": "0x00084508",
            "current_name": "read_and_assign_error_00084508",
            "code": "\nvoid read_and_assign_error_00084508(int *result,undefined4 file_descriptor,undefined4 buffer,undefined4 count)\n\n{\n  int read_result;\n  \n  DAT_20071244 = 0;\n  read_result = _read(file_descriptor,buffer,count);\n  if ((read_result == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084508": "read_and_assign_error_00084508",
                "param_1": "result",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "count",
                "iVar1": "read_result"
            },
            "calling": [
                "FUN_00084220"
            ],
            "called": [
                "FUN_00080ec2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00084508": {
                    "1": "read_and_save_data",
                    "2": "read_and_assign_error_code",
                    "4": "read_and_check_error",
                    "9": "read_and_assign_error"
                },
                "param_1": {
                    "1": "result_pointer",
                    "3": "output_value",
                    "2": "result_ptr",
                    "7": "output",
                    "15": "result"
                },
                "param_2": {
                    "1": "data_source",
                    "23": "file_descriptor",
                    "4": "source",
                    "2": "buffer"
                },
                "param_3": {
                    "1": "dest_buffer",
                    "2": "size",
                    "25": "buffer"
                },
                "param_4": {
                    "2": "length",
                    "21": "count",
                    "1": "offset",
                    "5": "size"
                },
                "iVar1": {
                    "24": "read_result",
                    "2": "result",
                    "4": "read_status"
                },
                "DAT_20071244": {
                    "1": "saved_error"
                }
            }
        },
        "FUN_00084530": {
            "entrypoint": "0x00084530",
            "current_name": "calculate_result_00084530",
            "code": "\nint calculate_result_00084530(int input_1,int input_2,int input_3,int input_4)\n\n{\n  int result;\n  \n  if ((input_4 == 0) && (input_3 == 0)) {\n    if (input_2 != 0 || input_1 != 0) {\n      input_1 = -1;\n    }\n    return input_1;\n  }\n  result = __gnu_uldivmod_helper();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084530": "calculate_result_00084530",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_0008458c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00084530": {
                    "1": "perform_operation",
                    "2": "divide_and_check",
                    "3": "divmod_helper",
                    "13": "calculate_result"
                },
                "param_1": {
                    "15": "input_1",
                    "3": "input_param1",
                    "7": "dividend",
                    "1": "input_param_1",
                    "5": "input1"
                },
                "param_2": {
                    "1": "input_param_2",
                    "5": "input2",
                    "3": "input_param2",
                    "6": "divisor",
                    "15": "input_2"
                },
                "param_3": {
                    "10": "input_3",
                    "3": "input3",
                    "2": "quotient",
                    "1": "numerator"
                },
                "param_4": {
                    "2": "quotient",
                    "1": "condition_2",
                    "10": "input_4",
                    "3": "input4"
                },
                "iVar1": {
                    "29": "result"
                },
                "param_5": {
                    "1": "output_param"
                },
                "FUN_0008458c": {
                    "1": "process_data"
                }
            }
        },
        "FUN_0008455c": {
            "entrypoint": "0x0008455c",
            "current_name": "calculate_difference_0008455c",
            "code": "\nvoid calculate_difference_0008455c(uint input_value,int input_value_2,undefined4 high_32_bits_param_1,undefined4 high_32_bits_param_2,int *result_array)\n\n{\n  uint result;\n  longlong product;\n  \n  product = __divdi3();\n  product = product * CONCAT44(high_32_bits_param_2,high_32_bits_param_1);\n  result = (uint)product;\n  *result_array = input_value - result;\n  result_array[1] = (input_value_2 - (int)((ulonglong)product >> 0x20)) - (uint)(input_value < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008455c": "calculate_difference_0008455c",
                "param_1": "input_value",
                "param_2": "input_value_2",
                "param_5": "result_array",
                "lVar2": "product",
                "uVar1": "result",
                "param_3": "high_32_bits_param_1",
                "param_4": "high_32_bits_param_2"
            },
            "calling": [],
            "called": [
                "FUN_000845c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008455c": {
                    "1": "subtract_and_divide",
                    "5": "subtract_and_update",
                    "4": "subtract_and_store",
                    "6": "subtract_and_adjust"
                },
                "param_1": {
                    "2": "input1",
                    "15": "input_value",
                    "3": "input_param",
                    "1": "input_number_1"
                },
                "param_2": {
                    "1": "second_param",
                    "2": "input_param2",
                    "3": "input_value_2"
                },
                "param_5": {
                    "13": "result_array",
                    "2": "output_param",
                    "1": "result"
                },
                "lVar2": {
                    "1": "result_long",
                    "2": "result_2",
                    "4": "result2",
                    "9": "product"
                },
                "uVar1": {
                    "3": "calculated_value",
                    "1": "temporary_value",
                    "2": "result_upper",
                    "4": "result1",
                    "7": "result"
                },
                "param_3": {
                    "1": "value_param1"
                },
                "param_4": {
                    "1": "parameter_4"
                }
            }
        },
        "FUN_0008458c": {
            "entrypoint": "0x0008458c",
            "current_name": "subtract_and_adjust_0008458c",
            "code": "\nvoid subtract_and_adjust_0008458c(uint input_value,int subtract_value,undefined4 param3_value,undefined4 param4_value,int *result_array)\n\n{\n  uint result;\n  longlong product;\n  \n  product = unsigned_integer_division();\n  product = product * concatenate_values(param4_value,param3_value);\n  result = (uint)product;\n  *result_array = input_value - result;\n  result_array[1] = (subtract_value - (int)((ulonglong)product >> 0x20)) - (uint)(input_value < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008458c": "subtract_and_adjust_0008458c",
                "param_1": "input_value",
                "param_2": "subtract_value",
                "param_5": "result_array",
                "lVar2": "product",
                "uVar1": "result",
                "__udivdi3": "unsigned_integer_division",
                "CONCAT44": "concatenate_values",
                "param_3": "param3_value",
                "param_4": "param4_value"
            },
            "calling": [
                "FUN_00084530"
            ],
            "called": [
                "FUN_00084860"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0008458c": {
                    "1": "subtract_and_modify",
                    "5": "subtract_multiply",
                    "6": "calculate_difference",
                    "9": "subtract_and_adjust",
                    "2": "subtract_and_update_values"
                },
                "param_1": {
                    "1": "input_1_value",
                    "18": "input_value",
                    "2": "value1",
                    "3": "original_value",
                    "4": "input_param"
                },
                "param_2": {
                    "1": "num_iterations",
                    "2": "param_2",
                    "4": "subtract_value",
                    "3": "subtraction_value"
                },
                "param_5": {
                    "11": "result_array",
                    "1": "output_result",
                    "2": "result_values",
                    "3": "output_values"
                },
                "lVar2": {
                    "3": "temp_result",
                    "2": "result_2",
                    "1": "result_long",
                    "4": "multiplied_result",
                    "7": "product"
                },
                "uVar1": {
                    "1": "result_as_uint",
                    "2": "product",
                    "3": "unsigned_result",
                    "9": "result"
                },
                "__udivdi3": {
                    "1": "unsigned_division_function"
                },
                "CONCAT44": {
                    "1": "concatenate_func",
                    "2": "concatenate_values"
                },
                "param_3": {
                    "1": "first_param"
                },
                "param_4": {
                    "1": "value2"
                }
            }
        },
        "FUN_000845c0": {
            "entrypoint": "0x000845c0",
            "current_name": "divide_unsigned_integers_000845c0",
            "code": "\nundefined8 divide_unsigned_integers_000845c0(uint dividend,uint dividend_high,uint divisor,uint divisor_high)\n\n{\n  longlong product;\n  uint quotient;\n  uint quotient_high;\n  uint temp1;\n  uint temp2;\n  int shift_amount;\n  uint temp3;\n  uint temp4;\n  uint is_dividend_negative;\n  uint is_divisor_negative;\n  uint temp5;\n  uint temp6;\n  bool carry_flag;\n  \n  if ((int)dividend_high < 0) {\n    carry_flag = dividend != 0;\n    dividend = -dividend;\n    dividend_high = -dividend_high - (uint)carry_flag;\n    is_dividend_negative = 0xffffffff;\n  }\n  else {\n    is_dividend_negative = 0;\n  }\n  if ((int)divisor_high < 0) {\n    is_dividend_negative = ~is_dividend_negative;\n    carry_flag = divisor != 0;\n    divisor = -divisor;\n    divisor_high = -divisor_high - (uint)carry_flag;\n  }\n  if (divisor_high == 0) {\n    if (dividend_high < divisor) {\n      shift_amount = LZCOUNT(divisor);\n      if (shift_amount != 0) {\n        quotient_high = dividend >> (0x20U - shift_amount & 0xff);\n        divisor = divisor << shift_amount;\n        dividend = dividend << shift_amount;\n        dividend_high = dividend_high << shift_amount | quotient_high;\n      }\n      quotient = divisor >> 0x10;\n      temp1 = dividend_high / quotient;\n      temp3 = (divisor & 0xffff) * temp1;\n      is_divisor_negative = dividend >> 0x10 | (dividend_high - quotient * temp1) * 0x10000;\n      quotient_high = temp1;\n      if (is_divisor_negative <= temp3 && temp3 - is_divisor_negative != 0) {\n        carry_flag = CARRY4(is_divisor_negative,divisor);\n        is_divisor_negative = is_divisor_negative + divisor;\n        quotient_high = temp1 - 1;\n        if ((carry_flag == false) && (is_divisor_negative <= temp3 && temp3 - is_divisor_negative != 0)) {\n          quotient_high = temp1 - 2;\n          is_divisor_negative = is_divisor_negative + divisor;\n        }\n      }\n      temp4 = (is_divisor_negative - temp3) / quotient;\n      temp1 = (divisor & 0xffff) * temp4;\n      temp3 = dividend & 0xffff | ((is_divisor_negative - temp3) - quotient * temp4) * 0x10000;\n      quotient = temp4;\n      if (temp3 <= temp1 && temp1 - temp3 != 0) {\n        quotient = temp4 - 1;\n        if ((CARRY4(temp3,divisor) == false) &&\n           (temp3 + divisor <= temp1 && temp1 - (temp3 + divisor) != 0)) {\n          quotient = temp4 - 2;\n        }\n      }\n      quotient = quotient | quotient_high << 0x10;\n      quotient_high = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shift_amount = LZCOUNT(divisor);\n      if (shift_amount == 0) {\n        dividend_high = dividend_high - divisor;\n        temp1 = divisor >> 0x10;\n        temp6 = divisor & 0xffff;\n        quotient_high = 1;\n      }\n      else {\n        divisor = divisor << shift_amount;\n        quotient_high = dividend_high >> (0x20U - shift_amount & 0xff);\n        temp1 = divisor >> 0x10;\n        is_divisor_negative = quotient_high / temp1;\n        temp6 = divisor & 0xffff;\n        temp3 = temp6 * is_divisor_negative;\n        temp4 = dividend >> (0x20U - shift_amount & 0xff) | dividend_high << shift_amount;\n        quotient_high = temp4 >> 0x10 | (quotient_high - temp1 * is_divisor_negative) * 0x10000;\n        dividend = dividend << shift_amount;\n        quotient = is_divisor_negative;\n        if (quotient_high <= temp3 && temp3 - quotient_high != 0) {\n          carry_flag = CARRY4(quotient_high,divisor);\n          quotient_high = quotient_high + divisor;\n          quotient = is_divisor_negative - 1;\n          if ((carry_flag == false) && (quotient_high <= temp3 && temp3 - quotient_high != 0)) {\n            quotient = is_divisor_negative - 2;\n            quotient_high = quotient_high + divisor;\n          }\n        }\n        temp2 = (quotient_high - temp3) / temp1;\n        is_divisor_negative = temp6 * temp2;\n        dividend_high = temp4 & 0xffff | ((quotient_high - temp3) - temp1 * temp2) * 0x10000;\n        quotient_high = temp2;\n        if (dividend_high <= is_divisor_negative && is_divisor_negative - dividend_high != 0) {\n          carry_flag = CARRY4(dividend_high,divisor);\n          dividend_high = dividend_high + divisor;\n          quotient_high = temp2 - 1;\n          if ((carry_flag == false) && (dividend_high <= is_divisor_negative && is_divisor_negative - dividend_high != 0)) {\n            quotient_high = temp2 - 2;\n            dividend_high = dividend_high + divisor;\n          }\n        }\n        dividend_high = dividend_high - is_divisor_negative;\n        quotient_high = quotient_high | quotient << 0x10;\n      }\n      quotient = dividend_high / temp1;\n      is_divisor_negative = temp6 * quotient;\n      temp4 = dividend >> 0x10 | (dividend_high - temp1 * quotient) * 0x10000;\n      temp3 = quotient;\n      if (temp4 <= is_divisor_negative && is_divisor_negative - temp4 != 0) {\n        carry_flag = CARRY4(temp4,divisor);\n        temp4 = temp4 + divisor;\n        temp3 = quotient - 1;\n        if ((carry_flag == false) && (temp4 <= is_divisor_negative && is_divisor_negative - temp4 != 0)) {\n          temp3 = quotient - 2;\n          temp4 = temp4 + divisor;\n        }\n      }\n      temp2 = (temp4 - is_divisor_negative) / temp1;\n      temp6 = temp6 * temp2;\n      temp1 = dividend & 0xffff | ((temp4 - is_divisor_negative) - temp1 * temp2) * 0x10000;\n      quotient = temp2;\n      if (temp1 <= temp6 && temp6 - temp1 != 0) {\n        quotient = temp2 - 1;\n        if ((CARRY4(temp1,divisor) == false) &&\n           (temp1 + divisor <= temp6 && temp6 - (temp1 + divisor) != 0)) {\n          quotient = temp2 - 2;\n        }\n      }\n      quotient = quotient | temp3 << 0x10;\n    }\n  }\n  else if (dividend_high < divisor_high) {\n    quotient_high = 0;\n    quotient = 0;\n  }\n  else {\n    shift_amount = LZCOUNT(divisor_high);\n    if (shift_amount == 0) {\n      if ((divisor_high < dividend_high) || (divisor <= dividend)) {\n        quotient_high = 0;\n        quotient = 1;\n      }\n      else {\n        quotient = 0;\n        quotient_high = 0;\n      }\n    }\n    else {\n      quotient_high = 0x20 - shift_amount;\n      temp1 = dividend_high >> (quotient_high & 0xff);\n      temp6 = divisor >> (quotient_high & 0xff) | divisor_high << shift_amount;\n      is_divisor_negative = temp6 >> 0x10;\n      quotient = temp1 / is_divisor_negative;\n      temp4 = (temp6 & 0xffff) * quotient;\n      temp3 = dividend_high << shift_amount | dividend >> (quotient_high & 0xff);\n      temp1 = temp3 >> 0x10 | (temp1 - is_divisor_negative * quotient) * 0x10000;\n      quotient_high = quotient;\n      if (temp1 <= temp4 && temp4 - temp1 != 0) {\n        carry_flag = CARRY4(temp1,temp6);\n        temp1 = temp1 + temp6;\n        quotient_high = quotient - 1;\n        if ((carry_flag == false) && (temp1 <= temp4 && temp4 - temp1 != 0)) {\n          quotient_high = quotient - 2;\n          temp1 = temp1 + temp6;\n        }\n      }\n      temp2 = (temp1 - temp4) / is_divisor_negative;\n      temp5 = (temp6 & 0xffff) * temp2;\n      temp1 = temp3 & 0xffff | ((temp1 - temp4) - is_divisor_negative * temp2) * 0x10000;\n      quotient = temp2;\n      if (temp1 <= temp5 && temp5 - temp1 != 0) {\n        carry_flag = CARRY4(temp1,temp6);\n        temp1 = temp1 + temp6;\n        quotient = temp2 - 1;\n        if ((carry_flag == false) && (temp1 <= temp5 && temp5 - temp1 != 0)) {\n          quotient = temp2 - 2;\n          temp1 = temp1 + temp6;\n        }\n      }\n      quotient = quotient | quotient_high << 0x10;\n      product = (ulonglong)quotient * (ulonglong)(divisor << shift_amount);\n      temp3 = (uint)((ulonglong)product >> 0x20);\n      quotient_high = 0;\n      if ((temp1 - temp5 < temp3) ||\n         ((temp1 - temp5 == temp3 && (dividend << shift_amount < (uint)product)))) {\n        quotient = quotient - 1;\n        quotient_high = 0;\n      }\n    }\n  }\n  if (is_dividend_negative != 0) {\n    carry_flag = quotient != 0;\n    quotient = -quotient;\n    quotient_high = -quotient_high - (uint)carry_flag;\n  }\n  return CONCAT44(quotient_high,quotient);\n}\n\n",
            "renaming": {
                "FUN_000845c0": "divide_unsigned_integers_000845c0",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "uVar2": "quotient",
                "uVar3": "quotient_high",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar7": "temp3",
                "uVar8": "temp4",
                "uVar9": "is_dividend_negative",
                "uVar10": "is_divisor_negative",
                "uVar11": "temp5",
                "uVar12": "temp6",
                "bVar13": "carry_flag",
                "iVar6": "shift_amount",
                "lVar1": "product"
            },
            "calling": [
                "FUN_0008455c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000845c0": {
                    "1": "divisor_multiply",
                    "2": "divide_with_carry",
                    "5": "division_with_remainder",
                    "4": "divide_with_remainder",
                    "6": "divide_unsigned_integers"
                },
                "param_1": {
                    "1": "dividend_high",
                    "30": "dividend"
                },
                "param_2": {
                    "3": "dividend_sign",
                    "2": "dividend_low",
                    "1": "divisor_1",
                    "10": "dividend_high"
                },
                "param_3": {
                    "1": "quotient_high",
                    "2": "divisor_high",
                    "23": "divisor"
                },
                "param_4": {
                    "1": "divisor_upper_32bits",
                    "2": "divisor_lower",
                    "8": "divisor_high",
                    "3": "divisor_upper",
                    "4": "divisor_sign"
                },
                "uVar2": {
                    "1": "quo_low",
                    "5": "quotient_lower",
                    "6": "quotient_low",
                    "10": "quotient"
                },
                "uVar3": {
                    "4": "quotient_upper",
                    "1": "quotient_highword",
                    "11": "quotient_high"
                },
                "uVar4": {
                    "1": "quotient_partial3",
                    "2": "quotient_low",
                    "3": "temp",
                    "6": "temp1"
                },
                "uVar5": {
                    "1": "divisor_mul",
                    "2": "remainder_high",
                    "7": "temp2"
                },
                "uVar7": {
                    "1": "div_quotient_low",
                    "3": "temp",
                    "2": "temp1",
                    "4": "temp3"
                },
                "uVar8": {
                    "1": "partial_dividend1",
                    "2": "temp3",
                    "5": "temp4"
                },
                "uVar9": {
                    "2": "negate_dividend",
                    "10": "is_dividend_negative",
                    "1": "dividend_negative",
                    "4": "is_negative_dividend"
                },
                "uVar10": {
                    "1": "temp4",
                    "3": "temp5",
                    "2": "tmp3",
                    "4": "is_divisor_negative"
                },
                "uVar11": {
                    "1": "temp3",
                    "3": "temp6"
                },
                "uVar12": {
                    "2": "temp_divisor",
                    "1": "quotient_high_word_temp2",
                    "3": "temp7"
                },
                "bVar13": {
                    "2": "carry",
                    "3": "is_negative",
                    "1": "is_negative_dividend",
                    "15": "carry_flag"
                },
                "iVar6": {
                    "1": "number_of_leading_zeros",
                    "3": "shift_count",
                    "12": "shift_amount"
                },
                "uVar13": {
                    "1": "quotient_result4"
                },
                "lVar1": {
                    "1": "quotient",
                    "2": "temp",
                    "7": "product"
                },
                "uVar6": {
                    "1": "temp3"
                },
                "iVar7": {
                    "1": "count"
                },
                "bVar14": {
                    "1": "is_temp3_negative"
                },
                "bVar15": {
                    "1": "is_temp4_negative"
                },
                "uVar14": {
                    "1": "quotient_result5"
                },
                "uVar15": {
                    "1": "quotient_result6"
                },
                "uVar16": {
                    "1": "quotient_result7"
                },
                "uVar17": {
                    "1": "quotient_result8"
                },
                "bVar18": {
                    "1": "carry_flag"
                },
                "lVar19": {
                    "1": "intermediate_value"
                }
            }
        },
        "FUN_00084860": {
            "entrypoint": "0x00084860",
            "current_name": "calculate_quotient_00084860",
            "code": "\nulonglong calculate_quotient_00084860(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong result;\n  uint quotient;\n  uint quotient2;\n  uint quotient3;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  int shift_count;\n  bool carry_flag;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      shift_count = LZCOUNT(quotient);\n      if (shift_count == 0) {\n        divisor = divisor - quotient;\n        quotient2 = quotient >> 0x10;\n        temp2 = quotient & 0xffff;\n        quotient = 1;\n      }\n      else {\n        quotient = quotient << shift_count;\n        temp5 = divisor >> (0x20U - shift_count & 0xff);\n        quotient2 = quotient >> 0x10;\n        temp6 = temp5 / quotient2;\n        temp2 = quotient & 0xffff;\n        quotient = temp2 * temp6;\n        temp3 = dividend >> (0x20U - shift_count & 0xff) | divisor << shift_count;\n        quotient3 = temp3 >> 0x10 | (temp5 - quotient2 * temp6) * 0x10000;\n        dividend = dividend << shift_count;\n        temp5 = temp6;\n        if (quotient3 <= quotient && quotient - quotient3 != 0) {\n          carry_flag = CARRY4(quotient3,quotient);\n          quotient3 = quotient3 + quotient;\n          temp5 = temp6 - 1;\n          if ((carry_flag == false) && (quotient3 <= quotient && quotient - quotient3 != 0)) {\n            temp5 = temp6 - 2;\n            quotient3 = quotient3 + quotient;\n          }\n        }\n        temp4 = (quotient3 - quotient) / quotient2;\n        temp6 = temp2 * temp4;\n        divisor = temp3 & 0xffff | ((quotient3 - quotient) - quotient2 * temp4) * 0x10000;\n        quotient = temp4;\n        if (divisor <= temp6 && temp6 - divisor != 0) {\n          carry_flag = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          quotient = temp4 - 1;\n          if ((carry_flag == false) && (divisor <= temp6 && temp6 - divisor != 0)) {\n            quotient = temp4 - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - temp6;\n        quotient = quotient | temp5 << 0x10;\n      }\n      temp6 = divisor / quotient2;\n      quotient3 = temp2 * temp6;\n      temp3 = dividend >> 0x10 | (divisor - quotient2 * temp6) * 0x10000;\n      temp5 = temp6;\n      if (temp3 <= quotient3 && quotient3 - temp3 != 0) {\n        carry_flag = CARRY4(temp3,quotient);\n        temp3 = temp3 + quotient;\n        temp5 = temp6 - 1;\n        if ((carry_flag == false) && (temp3 <= quotient3 && quotient3 - temp3 != 0)) {\n          temp5 = temp6 - 2;\n          temp3 = temp3 + quotient;\n        }\n      }\n      temp6 = (temp3 - quotient3) / quotient2;\n      temp2 = temp2 * temp6;\n      temp3 = dividend & 0xffff | ((temp3 - quotient3) - quotient2 * temp6) * 0x10000;\n      quotient2 = temp6;\n      if (temp3 <= temp2 && temp2 - temp3 != 0) {\n        quotient2 = temp6 - 1;\n        if ((CARRY4(temp3,quotient) == false) &&\n           (temp3 + quotient <= temp2 && temp2 - (temp3 + quotient) != 0)) {\n          quotient2 = temp6 - 2;\n        }\n      }\n      return CONCAT44(quotient,quotient2 | temp5 << 0x10);\n    }\n    shift_count = LZCOUNT(quotient);\n    if (shift_count != 0) {\n      temp5 = dividend >> (0x20U - shift_count & 0xff);\n      quotient = quotient << shift_count;\n      dividend = dividend << shift_count;\n      divisor = temp5 | divisor << shift_count;\n    }\n    quotient = quotient >> 0x10;\n    quotient2 = divisor / quotient;\n    temp2 = (quotient & 0xffff) * quotient2;\n    temp6 = dividend >> 0x10 | (divisor - quotient * quotient2) * 0x10000;\n    temp5 = quotient2;\n    if (temp6 <= temp2 && temp2 - temp6 != 0) {\n      carry_flag = CARRY4(temp6,quotient);\n      temp6 = temp6 + quotient;\n      temp5 = quotient2 - 1;\n      if ((carry_flag == false) && (temp6 <= temp2 && temp2 - temp6 != 0)) {\n        temp5 = quotient2 - 2;\n        temp6 = temp6 + quotient;\n      }\n    }\n    temp3 = (temp6 - temp2) / quotient;\n    quotient2 = (quotient & 0xffff) * temp3;\n    temp2 = dividend & 0xffff | ((temp6 - temp2) - quotient * temp3) * 0x10000;\n    quotient = temp3;\n    if (temp2 <= quotient2 && quotient2 - temp2 != 0) {\n      quotient = temp3 - 1;\n      if ((CARRY4(temp2,quotient) == false) &&\n         (temp2 + quotient <= quotient2 && quotient2 - (temp2 + quotient) != 0)) {\n        quotient = temp3 - 2;\n      }\n    }\n    quotient = quotient | temp5 << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    shift_count = LZCOUNT(remainder);\n    if (shift_count == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      quotient = 0;\n    }\n    else {\n      quotient = 0x20 - shift_count;\n      temp5 = divisor >> (quotient & 0xff);\n      quotient2 = remainder << shift_count | quotient >> (quotient & 0xff);\n      temp2 = quotient2 >> 0x10;\n      quotient3 = temp5 / temp2;\n      temp6 = (quotient2 & 0xffff) * quotient3;\n      temp3 = dividend >> (quotient & 0xff) | divisor << shift_count;\n      quotient = temp3 >> 0x10 | (temp5 - temp2 * quotient3) * 0x10000;\n      temp5 = quotient3;\n      if (quotient <= temp6 && temp6 - quotient != 0) {\n        carry_flag = CARRY4(quotient,quotient2);\n        quotient = quotient + quotient2;\n        temp5 = quotient3 - 1;\n        if ((carry_flag == false) && (quotient <= temp6 && temp6 - quotient != 0)) {\n          temp5 = quotient3 - 2;\n          quotient = quotient + quotient2;\n        }\n      }\n      quotient3 = (quotient - temp6) / temp2;\n      temp4 = (quotient2 & 0xffff) * quotient3;\n      temp2 = temp3 & 0xffff | ((quotient - temp6) - temp2 * quotient3) * 0x10000;\n      quotient = quotient3;\n      if (temp2 <= temp4 && temp4 - temp2 != 0) {\n        carry_flag = CARRY4(temp2,quotient2);\n        temp2 = temp2 + quotient2;\n        quotient = quotient3 - 1;\n        if ((carry_flag == false) && (temp2 <= temp4 && temp4 - temp2 != 0)) {\n          quotient = quotient3 - 2;\n          temp2 = temp2 + quotient2;\n        }\n      }\n      quotient = quotient | temp5 << 0x10;\n      result = (ulonglong)quotient * (ulonglong)(quotient << shift_count);\n      temp5 = (uint)((ulonglong)result >> 0x20);\n      if ((temp2 - temp4 < temp5) || ((temp2 - temp4 == temp5 && (dividend << shift_count < (uint)result)))\n         ) {\n        quotient = quotient - 1;\n      }\n    }\n  }\n  return (ulonglong)quotient;\n}\n\n",
            "renaming": {
                "FUN_00084860": "calculate_quotient_00084860",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "uVar2": "quotient",
                "uVar3": "quotient2",
                "uVar4": "quotient3",
                "uVar5": "temp2",
                "uVar6": "temp3",
                "uVar7": "temp4",
                "uVar8": "temp5",
                "uVar9": "temp6",
                "iVar10": "shift_count",
                "bVar11": "carry_flag",
                "lVar1": "result"
            },
            "calling": [
                "FUN_0008458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00084860": {
                    "4": "calculate_division",
                    "1": "divide_with_carry",
                    "2": "divide_and_calculate_remainder",
                    "10": "calculate_quotient"
                },
                "param_1": {
                    "31": "dividend"
                },
                "param_2": {
                    "2": "dividend_upper",
                    "1": "dividend_hi",
                    "22": "divisor"
                },
                "param_3": {
                    "1": "multiplier",
                    "2": "remainder",
                    "8": "divisor",
                    "15": "quotient"
                },
                "param_4": {
                    "1": "special_case",
                    "15": "remainder",
                    "2": "divisor_upper"
                },
                "uVar2": {
                    "1": "upper_quotient_byte",
                    "2": "dividend_shifted",
                    "6": "quotient1",
                    "7": "quotient"
                },
                "uVar3": {
                    "1": "temp3",
                    "2": "q2",
                    "4": "quotient2"
                },
                "uVar4": {
                    "2": "temp1",
                    "1": "temp4",
                    "3": "quotient3"
                },
                "uVar5": {
                    "2": "remainder2",
                    "1": "divisor_bits"
                },
                "uVar6": {
                    "1": "temp4",
                    "2": "temp3"
                },
                "uVar7": {
                    "1": "partial_product_bits",
                    "2": "temp4"
                },
                "uVar8": {
                    "1": "divisor_value",
                    "2": "temp5"
                },
                "uVar9": {
                    "1": "remainder8",
                    "2": "temp6"
                },
                "iVar10": {
                    "1": "num_bits",
                    "10": "shift_amount",
                    "15": "shift_count"
                },
                "bVar11": {
                    "3": "is_carry",
                    "1": "has_carry",
                    "22": "carry_flag"
                },
                "lVar1": {
                    "1": "quotient_product",
                    "3": "temp",
                    "4": "result"
                },
                "uVar10": {
                    "1": "quotient3"
                },
                "uVar11": {
                    "1": "temp"
                }
            }
        },
        "FUN_00085844": {
            "entrypoint": "0x00085844",
            "current_name": "FUNC_00085844",
            "code": "\nvoid FUNC_00085844(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085844": "FUNC_00085844"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 480075,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_000803fc",
            "FUN_0008044c",
            "FUN_000805a8",
            "FUN_000806a0",
            "FUN_000806f8",
            "FUN_00080774",
            "FUN_0008089c",
            "FUN_00080970",
            "FUN_000809be",
            "FUN_000809e4",
            "FUN_00080a0a",
            "FUN_00080a30",
            "FUN_00080a94",
            "FUN_00080aa8",
            "FUN_00080b2c",
            "FUN_00080b90",
            "FUN_00080b98",
            "FUN_00080c20",
            "FUN_00080c98",
            "FUN_00080d30",
            "FUN_00080d3e",
            "FUN_00080d58",
            "FUN_00080d62",
            "FUN_00080d6a",
            "FUN_00080e80",
            "FUN_00080e88",
            "FUN_00080eaa",
            "FUN_00080eb0",
            "FUN_00080eba",
            "FUN_00080ebe",
            "FUN_00080ec2",
            "FUN_00080ec8",
            "FUN_00080eec",
            "FUN_00080efe",
            "FUN_00080f0c",
            "FUN_00081014",
            "FUN_000810a6",
            "FUN_000810cc",
            "FUN_00081190",
            "FUN_000811b0",
            "FUN_000811ca",
            "FUN_000811e8",
            "FUN_00081214",
            "FUN_00081248",
            "FUN_00081276",
            "FUN_000812b8",
            "FUN_00081348",
            "FUN_000813dc",
            "FUN_00081438",
            "FUN_0008145c",
            "FUN_00081472",
            "FUN_00081480",
            "FUN_00081496",
            "FUN_000814ae",
            "FUN_000814d0",
            "FUN_000814f6",
            "FUN_0008151c",
            "FUN_00081560",
            "FUN_00081570",
            "FUN_000815b8",
            "FUN_000815de",
            "FUN_00081618",
            "FUN_00081624",
            "FUN_00081684",
            "FUN_000816d8",
            "FUN_000816ec",
            "FUN_000816f8",
            "FUN_00081750",
            "FUN_00081778",
            "FUN_000817c8",
            "FUN_000817f0",
            "FUN_00081800",
            "FUN_00081810",
            "FUN_00081d48",
            "FUN_00081e34",
            "FUN_00081f00",
            "FUN_00081f9c",
            "FUN_00081fac",
            "FUN_0008236c",
            "FUN_00082390",
            "FUN_000825cc",
            "FUN_00082688",
            "FUN_00082824",
            "FUN_0008289c",
            "FUN_000834f0",
            "FUN_0008356c",
            "FUN_000836ec",
            "FUN_00083850",
            "FUN_00083888",
            "FUN_000839b4",
            "FUN_00083a74",
            "FUN_00083b10",
            "FUN_00083ca8",
            "FUN_00084004",
            "FUN_0008400c",
            "FUN_00084018",
            "FUN_000840f8",
            "FUN_000841e4",
            "FUN_00084220",
            "FUN_00084244",
            "FUN_0008427c",
            "FUN_000842a4",
            "FUN_0008434c",
            "FUN_0008439c",
            "FUN_00084484",
            "FUN_00084494",
            "FUN_000844bc",
            "FUN_000844e0",
            "FUN_00084508",
            "FUN_00084530",
            "FUN_0008455c",
            "FUN_0008458c",
            "FUN_000845c0",
            "FUN_00084860"
        ],
        [
            "FUN_00080164",
            "FUN_000801e0",
            "FUN_000810c4",
            "FUN_000810d8",
            "FUN_000810fc",
            "FUN_0008113a",
            "FUN_0008159e",
            "FUN_000815ec"
        ],
        [
            "FUN_000810e8",
            "FUN_0008117a"
        ],
        [
            "FUN_00080250"
        ]
    ],
    "locked_functions": []
}