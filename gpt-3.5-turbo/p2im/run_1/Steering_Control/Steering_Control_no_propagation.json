{
    "functions": {
        "FUN_000817c8": {
            "renaming": {
                "FUN_000817c8": "process_data_000817c8",
                "param_1": "data",
                "param_2": "ptr1",
                "param_3": "ptr2",
                "param_4": "ptr3",
                "uStack_c": "val1",
                "uStack_8": "val2",
                "uStack_4": "val3",
                "FUNC_0008289c": "perform_operation"
            },
            "code": "void process_data_000817c8(undefined4 data, undefined4* ptr1, undefined4* ptr2, undefined4* ptr3)\n{\n  undefined4 val1 = *ptr1;\n  undefined4 val2 = *ptr2;\n  undefined4 val3 = *ptr3;\n  perform_operation(*DAT_000817ec, *(undefined4 *)(*DAT_000817ec + 8), data, &val1);\n  return;\n}",
            "called": [
                "FUN_0008289c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000817c8",
            "calling": [
                "FUN_00080eec"
            ],
            "imported": false,
            "current_name": "process_data_000817c8"
        },
        "FUN_00081560": {
            "renaming": {
                "FUN_00081560": "check_params_match_00081560",
                "param_1": "param1",
                "param_2": "param2",
                "FUN_0008151c": "trigger_error"
            },
            "code": "int check_params_match_00081560(int param1, int param2)\n{\n  if (param1 != param2) {\n    trigger_error();\n  }\n  return param1;\n}",
            "called": [
                "FUN_0008151c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081560",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "check_params_match_00081560"
        },
        "FUN_00083980": {
            "renaming": {
                "FUN_00083980": "do_nothing_00083980"
            },
            "code": "\nvoid do_nothing_00083980(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083980",
            "calling": [
                "FUN_00084484"
            ],
            "imported": false,
            "current_name": "do_nothing_00083980"
        },
        "FUN_00081684": {
            "renaming": {
                "FUN_00081684": "count_bits_set_to_value_00081684",
                "param_1": "bit_array",
                "param_2": "bit_mask",
                "param_3": "bit_value",
                "param_4": "array_length",
                "iVar1": "count"
            },
            "code": "int count_bits_set_to_value_00081684(uint *bit_array, uint bit_mask, uint bit_value, int array_length) {\n  int count = 0;\n  \n  for (int i = 0; i < array_length; i++) {\n    if ((*bit_array & bit_mask) == bit_value) {\n      count++;\n    } else {\n      if ((*bit_array & bit_mask) != bit_value) {\n        break;\n      }\n    }\n    bit_array++;\n  }\n  \n  return (count == array_length) ? 0 : count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081684",
            "calling": [
                "FUN_00081624"
            ],
            "imported": false,
            "current_name": "count_bits_set_to_value_00081684"
        },
        "FUN_000825cc": {
            "renaming": {
                "FUN_000825cc": "copy_string_000825cc",
                "param_1": "source",
                "param_2": "destination",
                "puVar3": "next_source_ptr",
                "puVar4": "source_ptr",
                "puVar7": "destination_ptr",
                "uVar2": "current_short",
                "uVar5": "current_word",
                "uVar6": "next_word",
                "cVar1": "current_char",
                "bVar8": "end_of_string_reached"
            },
            "code": "void copy_string_000825cc(uint *source, uint *destination)\n{\n  char current_char;\n  ushort current_short;\n  uint *source_ptr;\n  uint *destination_ptr;\n  uint current_word;\n  uint next_word;\n  uint *next_source_ptr;\n  bool end_of_string_reached;\n  \n  if ((((uint)source ^ (uint)destination) & 3) != 0) {\n    do {\n      current_char = *(char *)destination;\n      *(char *)source = current_char;\n      destination = (uint *)((int)destination + 1);\n      source = (uint *)((int)source + 1);\n    } while (current_char != '\\0');\n    return;\n  }\n  if (((uint)destination & 3) != 0) {\n    source_ptr = destination;\n    if (((uint)destination & 1) != 0) {\n      source_ptr = (uint *)((int)destination + 1);\n      current_char = *(char *)destination;\n      *(char *)source = current_char;\n      source = (uint *)((int)source + 1);\n      if (current_char == '\\0') {\n        return;\n      }\n    }\n    destination = source_ptr;\n    if (((uint)source_ptr & 2) != 0) {\n      destination = (uint *)((int)source_ptr + 2);\n      current_short = *(ushort *)source_ptr;\n      end_of_string_reached = (current_short & 0xff) == 0;\n      if (end_of_string_reached) {\n        *(char *)source = (char)current_short;\n      }\n      else {\n        *(ushort *)source = current_short;\n        end_of_string_reached = (current_short & 0xff00) == 0;\n        source = (uint *)((int)source + 2);\n      }\n      if (end_of_string_reached) {\n        return;\n      }\n    }\n  }\n  current_word = *source_ptr;\n  next_source_ptr = source_ptr + 1;\n  destination_ptr = destination;\n  if (((uint)source_ptr & 4) != 0) {\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) goto LAB_00082630;\n    destination_ptr = source;\n    *destination = current_word;\n    next_source_ptr = source_ptr + 2;\n    current_word = source_ptr[1];\n  }\n  while( true ) {\n    next_word = *next_source_ptr;\n    source = destination_ptr;\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) break;\n    source = destination_ptr + 1;\n    *destination_ptr = current_word;\n    current_word = next_word;\n    if ((next_word + 0xfefefeff & ~next_word & 0x80808080) != 0) break;\n    next_source_ptr = next_source_ptr + 2;\n    current_word = *next_source_ptr;\n    destination_ptr = destination_ptr + 2;\n    *source = current_word;\n  }\nLAB_00082630:\n  do {\n    *(char *)destination_ptr = (char)current_word;\n    next_word = current_word & 0xff;\n    current_word = current_word >> 8 | current_word << 0x18;\n    destination_ptr = (uint *)((int)destination_ptr + 1);\n  } while (next_word != 0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825cc",
            "calling": [
                "FUN_00081570",
                "FUN_000814d0",
                "FUN_0008151c"
            ],
            "imported": false,
            "current_name": "copy_string_000825cc"
        },
        "FUN_00080118": {
            "renaming": {
                "FUN_00080118": "execute_function_if_not_null_00080118",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "DAT_00080134": "global_flag",
                "PTR_DAT_0008013c": "global_pointer",
                "DAT_00080140": "function_pointer",
                "DAT_00080144": "function_code_pointer"
            },
            "code": "void execute_function_if_not_null_00080118(int param1, void* param2, int param3, int param4) {\n  if (DAT_00080134 != 0) {\n    param2 = PTR_DAT_0008013c;\n  }\n  if ((*DAT_00080140 != 0) && (DAT_00080144 != (code *)0x0)) {\n    (*DAT_00080144)(DAT_00080140, param2, param3, DAT_00080144, param4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080118",
            "calling": [
                "FUN_00081778"
            ],
            "imported": false,
            "current_name": "execute_function_if_not_null_00080118"
        },
        "FUN_00080aa8": {
            "renaming": {
                "FUN_00080aa8": "set_bit_00080aa8",
                "param_1": "bit_position",
                "uVar1": "bit_mask"
            },
            "code": "int set_bit_00080aa8(uint bit_position)\n{\n    uint bit_mask;\n    if (bit_position < 45)\n    {\n        if (bit_position < 32)\n        {\n            bit_mask = 1 << (bit_position & 0xff);\n            if ((bit_mask & *(uint *)(DAT_00080ae8 + 0x18)) != bit_mask)\n            {\n                *(uint *)(DAT_00080ae8 + 0x10) = bit_mask;\n            }\n        }\n        else\n        {\n            bit_mask = 1 << (bit_position - 0x20 & 0xff);\n            if ((bit_mask & *(uint *)(DAT_00080ae8 + 0x108)) != bit_mask)\n            {\n                *(uint *)(DAT_00080ae8 + 0x100) = bit_mask;\n            }\n        }\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aa8",
            "calling": [
                "FUN_000803fc",
                "FUN_000813dc",
                "FUN_00080774",
                "FUN_00080f0c"
            ],
            "imported": false,
            "current_name": "set_bit_00080aa8"
        },
        "FUN_00080f0c": {
            "renaming": {
                "FUN_00080f0c": "process_data_00080f0c",
                "param_1": "index",
                "param_2": "mode",
                "puVar1": "data_ptr_1",
                "puVar2": "data_ptr_2",
                "iVar3": "result",
                "uVar4": "uVar1",
                "uVar5": "uVar2",
                "uVar6": "uVar3",
                "bVar7": "bVar4",
                "bVar8": "bVar5",
                "iVar9": "iVar6",
                "iVar10": "iVar7"
            },
            "code": "int process_data_00080f0c(int index, int mode) {\\n  undefined *data_ptr_1;\\n  undefined *data_ptr_2;\\n  int result;\\n  uint uVar1;\\n  undefined4 uVar2;\\n  uint uVar3;\\n  byte bVar4;\\n  byte bVar5;\\n  int iVar6;\\n  int iVar7;\\n  data_ptr_2 = PTR_DAT_0008100c;\\n  data_ptr_1 = PTR_DAT_00081008;\\n  result = index;\\n  if (PTR_DAT_00081008[index * 0x1c + 0xc] != \"\\0\") {\\n    if ((PTR_DAT_0008100c[index] & 0xf) == 4) {\\n      result = FUN_00080d58(DAT_00081010, PTR_DAT_00081008[index * 0x1c + 0x19]);\\n    }\\n    bVar5 = data_ptr_2[index];\\n    bVar4 = bVar5 & 0xf;\\n    if ((bVar4 < 3) && (bVar5 != 0)) {\\n      if (bVar4 == 2) {\\n        if (mode == 0) {\\n          return result;\\n        }\\n      }\\n      else if (bVar4 == 1) {\\n        if (mode == 2) {\\n          return result;\\n        }\\n      }\\n      else if (bVar4 == 3) {\\n        if (mode == 1) {\\n          return result;\\n        }\\n        goto LAB_00080f68;\\n      }\\n    }\\n    if (mode != 1) {\\nLAB_00080f68:\\n      if (mode == 0) {\\n        result = index * 0x1c;\\n        FUN_00080aa8(*(undefined4 *)(data_ptr_1 + result + 8));\\n        result = FUN_00080a30(*(undefined4 *)(data_ptr_1 + result), 3, *(undefined4 *)(data_ptr_1 + result + 4), 0);\\n        bVar5 = data_ptr_2[index] & 0xf0 | 2;\\n      }\\n      else {\\n        if (mode != 2) {\\n          return result;\\n        }\\n        result = index * 0x1c;\\n        FUN_00080aa8(*(undefined4 *)(data_ptr_1 + result + 8));\\n        result = FUN_00080a30(*(undefined4 *)(data_ptr_1 + result), 3, *(undefined4 *)(data_ptr_1 + result + 4), 1);\\n        bVar5 = data_ptr_2[index] & 0xf0 | 1;\\n      }\\n      data_ptr_2[index] = bVar5;\\n      return result;\\n    }\\n    iVar6 = index * 0x1c;\\n    iVar7 = *(int *)(data_ptr_1 + iVar6);\\n    if (bVar5 >> 4 == 0) {\\n      uVar2 = 4;\\n    }\\n    else {\\n      uVar2 = 5;\\n    }\\n    result = FUN_00080a30(iVar7, uVar2, *(undefined4 *)(data_ptr_1 + iVar6 + 4), *(undefined4 *)(data_ptr_1 + iVar6 + 0x10));\\n    data_ptr_2[index] = data_ptr_2[index] & 0xf0 | 3;\\n    if (*(int *)(iVar7 + 0x18) == -1) {\\n      uVar1 = *(uint *)(data_ptr_1 + iVar6 + 8);\\n      if (0x2c < uVar1) {\\n        return 1;\\n      }\\n      if (uVar1 < 0x20) {\\n        uVar1 = 1 << (uVar1 & 0xff);\\n        uVar3 = *(uint *)(DAT_00080b28 + 0x18) & uVar1;\\n        if (uVar3 == uVar1) {\\n          *(uint *)(DAT_00080b28 + 0x14) = uVar3;\\n        }\\n      }\\n      else {\\n        uVar1 = 1 << (uVar1 - 0x20 & 0xff);\\n        uVar3 = *(uint *)(DAT_00080b28 + 0x108) & uVar1;\\n        if (uVar3 == uVar1) {\\n          *(uint *)(DAT_00080b28 + 0x104) = uVar3;\\n        }\\n      }\\n      return 0;\\n    }\\n  }\\n  return result;\\n}",
            "called": [
                "FUN_00080a30",
                "FUN_00080aa8",
                "FUN_00080d58"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f0c",
            "calling": [
                "FUN_000806a0",
                "FUN_00081014",
                "FUN_000801e0"
            ],
            "imported": false,
            "current_name": "process_data_00080f0c"
        },
        "FUN_00083a74": {
            "renaming": {
                "FUN_00083a74": "allocate_memory_00083a74",
                "param_1": "address",
                "param_2": "size",
                "iVar1": "base_address",
                "puVar2": "ptr",
                "iVar3": "old_address",
                "uVar4": "aligned_size",
                "iVar5": "new_address"
            },
            "code": "int allocate_memory_00083a74(uint32_t address, int size)\n{\n  int base_address = DAT_00083b04;\n  do_nothing_00081f94();\n  uint32_t aligned_size = (*(uint32_t *)(*(int *)(base_address + 8) + 4) & 0xfffffffc);\n  int new_address = ((aligned_size - size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < new_address) {\n    int allocated_address = FUN_0008236c(address,0);\n    if (allocated_address == *(int *)(base_address + 8) + aligned_size) {\n      int adjusted_address = FUN_0008236c(address,-new_address);\n      undefined *ptr = PTR_DAT_00083b08;\n      if (adjusted_address != -1) {\n        int old_address = *(int *)PTR_DAT_00083b08;\n        *(uint32_t *)(*(int *)(base_address + 8) + 4) = aligned_size - new_address | 1;\n        *(int *)ptr = old_address - new_address;\n        do_nothing_00081f98(address);\n        return 1;\n      }\n      new_address = FUN_0008236c(address,0);\n      ptr = PTR_DAT_00083b08;\n      aligned_size = new_address - *(int *)(base_address + 8);\n      if (0xf < (int)aligned_size) {\n        int old_address = *DAT_00083b0c;\n        *(uint32_t *)(*(int *)(base_address + 8) + 4) = aligned_size | 1;\n        *(int *)ptr = new_address - old_address;\n      }\n    }\n  }\n  do_nothing_00081f98(address);\n  return 0;\n}",
            "called": [
                "FUN_00081f98",
                "FUN_00081f94",
                "FUN_0008236c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083a74",
            "calling": [
                "FUN_00083b10"
            ],
            "imported": false,
            "current_name": "allocate_memory_00083a74"
        },
        "FUN_000844e0": {
            "renaming": {
                "get_param_value": "get_param_value",
                "param_1": "output_value",
                "param_2": "input_param1",
                "param_3": "input_param2",
                "param_4": "input_param3",
                "puVar1": "data_pointer",
                "iVar2": "function_result",
                "FUN_000844e0": "get_param_value_000844e0"
            },
            "code": "void get_param_value_000844e0(int *output_value, undefined4 input_param1, undefined4 input_param2, undefined4 input_param3)\n{\n  undefined *data_pointer;\n  int function_result;\n  data_pointer = PTR_DAT_00084504;\n  *(undefined4 *)PTR_DAT_00084504 = 0;\n  function_result = FUN_00080ebe(input_param1, input_param2, input_param3);\n  if ((function_result == -1) && (*(int *)data_pointer != 0)) {\n    *output_value = *(int *)data_pointer;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080ebe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844e0",
            "calling": [
                "FUN_00084244",
                "FUN_0008427c"
            ],
            "imported": false,
            "current_name": "get_param_value_000844e0"
        },
        "FUN_00083b10": {
            "renaming": {
                "FUN_00083b10": "allocate_memory_block_00083b10",
                "param_1": "start_address",
                "param_2": "size",
                "iVar1": "prev_block_header",
                "uVar2": "block_header",
                "iVar3": "prev_block_footer",
                "uVar4": "block_footer",
                "iVar5": "block_end",
                "iVar6": "prev_block_next",
                "uVar7": "next_block_header",
                "iVar8": "heap_start",
                "uVar9": "heap_end",
                "PTR_DAT_00083ca4": "heap_max_size",
                "DAT_00083c98": "heap_start",
                "DAT_00083c9c": "heap_end",
                "DAT_00083ca0": "heap_end_address"
            },
            "code": "void allocate_memory_block_00083b10(uint32_t start_address, uint32_t size)\n{\n  if (size == 0) {\n    return;\n  }\n  do_nothing();\n  uint32_t DAT_00083c98 = DAT_00083c98;\n  uint32_t block_header = *(uint32_t *)(size + start_address - 4);\n  uint32_t block_footer = block_header & 0xfffffffe;\n  uint32_t block_end = start_address - 8 + block_footer;\n  uint32_t next_block_header = *(uint32_t *)(block_end + 4) & 0xfffffffc;\n  if (*(int *)(DAT_00083c98 + 8) == block_end) {\n    next_block_header += block_footer;\n    if (-1 < (int)(block_header << 0x1f)) {\n      uint32_t prev_block_end = start_address - *(int *)(size + start_address - 8);\n      uint32_t prev_block_header = *(int *)(prev_block_end + 8);\n      uint32_t prev_block_footer = *(int *)(prev_block_end + 12);\n      next_block_header += *(int *)(size + start_address - 8);\n      *(int *)(prev_block_header + 12) = prev_block_footer;\n      *(int *)(prev_block_footer + 8) = prev_block_header;\n    }\n    uint32_t DAT_00083c9c = *DAT_00083ca0;\n    *(uint32_t *)(start_address - 8 + block_footer + 4) = next_block_header | 1;\n    *(int *)(DAT_00083c98 + 8) = start_address - 8;\n    if (DAT_00083c9c <= start_address - 8 + block_footer) {\n      increase_heap_size(start_address, PTR_DAT_00083ca4);\n    }\n  }\n  else {\n    block_header = block_header & 1;\n    *(uint32_t *)(block_end + 4) = next_block_header;\n    if (block_header == 0) {\n      uint32_t prev_block_end = start_address - *(int *)(size + start_address - 8);\n      uint32_t prev_block_header = *(int *)(prev_block_end + 8);\n      uint32_t prev_block_footer = *(int *)(prev_block_end + 12);\n      uint32_t DAT_00083c98 = DAT_00083c98;\n      if (prev_block_header == DAT_00083c98 + 8) {\n        block_header = 1;\n      }\n      else {\n        uint32_t prev_block_next = *(int *)(prev_block_end + 12);\n        *(int *)(prev_block_header + 12) = prev_block_next;\n        *(int *)(prev_block_next + 8) = prev_block_header;\n      }\n    }\n    else {\n      block_header = 0;\n    }\n    if (-1 < *(int *)(block_end + block_footer + 4) << 0x1f) {\n      uint32_t DAT_00083c98 = DAT_00083c98;\n      uint32_t prev_block_end = start_address - *(int *)(size + start_address - 8);\n      uint32_t prev_block_header = *(int *)(prev_block_end + 8);\n      uint32_t prev_block_footer = *(int *)(prev_block_end + 12);\n      uint32_t next_block_start = block_end + block_footer + 8;\n      *(int *)(prev_block_header + 12) = next_block_start;\n      *(int *)(next_block_start + 8) = prev_block_header;\n    }\n    *(uint32_t *)(start_address - 8 + block_footer + 4) = block_footer | 1;\n    *(uint32_t *)(start_address - 8 + block_footer + block_footer) = block_footer;\n    if (block_header == 0) {\n      if (block_footer < 0x200) {\n        uint32_t DAT_00083c98 = DAT_00083c98;\n        uint32_t heap_bitfield = *(uint32_t *)(DAT_00083c98 + 4);\n        uint32_t heap_index = DAT_00083c98 + (block_footer & 0xfffffff8);\n        uint32_t heap_index_header = *(int *)(heap_index + 8);\n        uint32_t heap_index_footer = *(int *)(heap_index + 12);\n        *(int *)(start_address - 8 + block_footer + 8) = heap_index_footer;\n        *(int *)(start_address - 8 + block_footer + 12) = heap_index;\n        *(uint32_t *)(DAT_00083c98 + 4) = heap_bitfield | 1 << ((int)(block_footer >> 3) >> 2 & 0xffU);\n        *(int *)(heap_index + 8) = start_address - 8 + block_footer;\n        *(int *)(heap_index_footer + 12) = start_address - 8 + block_footer;\n        do_nothing_2();\n        return;\n      }\n      uint32_t heap_index = block_footer >> 9;\n      if (heap_index < 5) {\n        uint32_t heap_index_header = (block_footer >> 6) + 0x38;\n        uint32_t heap_index_multiplier = heap_index_header * 2;\n      }\n      else if (heap_index < 0x15) {\n        uint32_t heap_index_header = heap_index + 0x5b;\n        uint32_t heap_index_multiplier = heap_index_header * 2;\n      }\n      else if (heap_index < 0x55) {\n        uint32_t heap_index_header = (block_footer >> 0xc) + 0x6e;\n        uint32_t heap_index_multiplier = heap_index_header * 2;\n      }\n      else if (heap_index < 0x155) {\n        uint32_t heap_index_header = (block_footer >> 0xf) + 0x77;\n        uint32_t heap_index_multiplier = heap_index_header * 2;\n      }\n      else if (heap_index < 0x555) {\n        uint32_t heap_index_header = (block_footer >> 0x12) + 0x7c;\n        uint32_t heap_index_multiplier = heap_index_header * 2;\n      }\n      else {\n        uint32_t heap_index_header = 0xfc;\n        uint32_t heap_index_multiplier = 0x7e;\n      }\n      uint32_t DAT_00083c98 = DAT_00083c98;\n      uint32_t heap_index_address = DAT_00083c98 + heap_index_multiplier * 4;\n      uint32_t heap_index_header = *(int *)(heap_index_address + 8);\n      if (heap_index_header == heap_index_address) {\n        uint32_t heap_bitfield = *(uint32_t *)(DAT_00083c98 + 4);\n        *(uint32_t *)(DAT_00083c98 + 4) = heap_bitfield | 1 << (heap_index_multiplier >> 2 & 0xffU);\n        heap_index_header = heap_index_address;\n      }\n      else {\n        do {\n          if ((*(uint32_t *)(heap_index_header + 4) & 0xfffffffc) <= block_footer) break;\n          heap_index_header = *(int *)(heap_index_header + 8);\n        } while (heap_index_address != heap_index_header);\n        heap_index_header = *(int *)(heap_index_header + 12);\n      }\n      *(int *)(start_address - 8 + block_footer + 12) = heap_index_header;\n      *(int *)(start_address - 8 + block_footer + 8) = heap_index_address;\n      *(int *)(heap_index_header + 8) = start_address - 8 + block_footer;\n      *(int *)(heap_index_address + 12) = start_address - 8 + block_footer;\n    }\n  }\n  do_nothing_2();\n}\n",
            "called": [
                "FUN_00083a74",
                "FUN_00081f98",
                "FUN_00081f94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083b10",
            "calling": [
                "FUN_00081800",
                "FUN_00083850",
                "FUN_0008356c",
                "FUN_00084484",
                "FUN_00081fac",
                "FUN_00083ca8",
                "FUN_00081810"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_00083b10"
        },
        "FUN_00080e80": {
            "renaming": {
                "FUN_00080e80": "return_zero_00080e80"
            },
            "code": "int return_zero_00080e80(void) {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e80",
            "calling": [],
            "imported": false,
            "current_name": "return_zero_00080e80"
        },
        "thunk_FUN_0008113a": {
            "renaming": {
                "thunk_FUN_0008113a": "format_conversion_thunk_0008113a",
                "param_1": "format",
                "param_2": "arg",
                "param_3": "base",
                "param_4": "flags",
                "iVar1": "result",
                "iVar2": "sign",
                "FUN_000810cc": "format_write_char",
                "FUN_000810fc": "format_write_uint"
            },
            "code": "int format_conversion_thunk_0008113a(undefined4 *format, uint32_t arg, uint32_t base, undefined4 flags) {\n  int result;\n  if (base == 0) {\n    result = (**(code **)*format)(format, arg & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    if ((int)arg < 0) {\n      int sign = format_write_char(format, 0x2d);\n      int digits = format_write_uint(format, -arg, 10);\n      return digits + sign;\n    }\n  }\n  else {\n    base &= 0xff;\n  }\n  result = format_write_uint(format, arg, base, flags);\n  return result;\n}",
            "called": [
                "FUN_0008113a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081176",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "format_conversion_thunk_0008113a"
        },
        "FUN_0008236c": {
            "renaming": {
                "FUN_0008236c": "get_result_0008236c",
                "param_1": "result",
                "param_2": "input",
                "puVar1": "ptr",
                "iVar2": "func_result"
            },
            "code": "void get_result_0008236c(int *result, undefined4 input) {\n  undefined *ptr = PTR_DAT_0008238c;\n  *(undefined4 *)PTR_DAT_0008238c = 0;\n  int func_result = calculate(input);\n  if ((func_result == -1) && (*(int *)ptr != 0)) {\n    *result = *(int *)ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080e88"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008236c",
            "calling": [
                "FUN_00083a74",
                "FUN_00081810"
            ],
            "imported": false,
            "current_name": "get_result_0008236c"
        },
        "FUN_00080d62": {
            "renaming": {
                "FUN_00080d62": "set_default_value_00080d62",
                "param_1": "ptr_param",
                "undefined4": "int",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void set_default_value_00080d62(int PTR_param)\n                      {\n                          *(int *)(PTR_param + 0x14) = 0xffff;\n                          return;\n                      }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d62",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "set_default_value_00080d62"
        },
        "FUN_000842a4": {
            "renaming": {
                "process_input": "process_input",
                "param_1": "input_length",
                "param_2": "input_value",
                "param_3": "input_buffer",
                "param_4": "buffer_length",
                "uVar1": "ushort_value",
                "uVar2": "uint_value",
                "puVar3": "buffer_ptr",
                "iVar4": "buffer_start",
                "FUN_000842a4": "process_input_000842a4"
            },
            "code": "uint process_input_000842a4(int input_length, uint input_value, undefined4 *input_buffer, undefined4 buffer_length)\n{\n  ushort uVar1;\n  uint uVar2;\n  undefined *buffer_ptr;\n  int buffer_start;\n  \n  if ((input_length != 0) && (*(int *)(input_length + 0x38) == 0)) {\n    initialize_input();\n  }\n  uVar1 = *(ushort *)(input_buffer + 3);\n  uVar2 = (uint)uVar1;\n  input_buffer[2] = input_buffer[6];\n  if ((-1 < (int)(uVar2 << 0x1c)) || (buffer_start = input_buffer[4], buffer_start == 0)) {\n    buffer_start = process_buffer(input_length, input_buffer, uVar1, uVar2, buffer_length);\n    if (buffer_start != 0) {\n      return 0xffffffff;\n    }\n    uVar1 = *(ushort *)(input_buffer + 3);\n    buffer_start = input_buffer[4];\n    uVar2 = (uint)uVar1;\n  }\n  input_value = input_value & 0xff;\n  if ((int)(uVar2 << 0x12) < 0) {\n    buffer_ptr = (undefined *)*input_buffer;\n    buffer_start = (int)buffer_ptr - buffer_start;\n    if (buffer_start < (int)input_buffer[5]) {\nLAB_000842d6:\n      buffer_start = buffer_start + 1;\n      goto LAB_000842d8;\n    }\n  }\n  else {\n    input_buffer[0x19] = input_buffer[0x19] & 0xffffdfff;\n    buffer_ptr = (undefined *)*input_buffer;\n    *(ushort *)(input_buffer + 3) = uVar1 | 0x2000;\n    buffer_start = (int)buffer_ptr - buffer_start;\n    if (buffer_start < (int)input_buffer[5]) goto LAB_000842d6;\n  }\n  buffer_start = process_buffer(input_length, input_buffer);\n  if (buffer_start != 0) {\n    return 0xffffffff;\n  }\n  buffer_ptr = (undefined *)*input_buffer;\n  buffer_start = 1;\nLAB_000842d8:\n  input_buffer[2] = input_buffer[2] + -1;\n  *input_buffer = buffer_ptr + 1;\n  *buffer_ptr = (char)input_value;\n  if (((input_buffer[5] == buffer_start) ||\n      (((int)((uint)*(ushort *)(input_buffer + 3) << 0x1f) < 0 && (input_value == 10)))) &&\n     (buffer_start = process_buffer(input_length, input_buffer), buffer_start != 0)) {\n    return 0xffffffff;\n  }\n  return input_value;\n}",
            "called": [
                "FUN_00083888",
                "FUN_00083850",
                "FUN_0008356c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000842a4",
            "calling": [
                "FUN_000839b4"
            ],
            "imported": false,
            "current_name": "process_input_000842a4"
        },
        "FUN_000814f6": {
            "renaming": {
                "FUN_000814f6": "initialize_array_with_zeros_000814f6",
                "param_1": "array_start",
                "param_2": "array_length",
                "uVar1": "result_of_FUN_00082688"
            },
            "code": "undefined4* initialize_array_with_zeros_000814f6(undefined4* array_start, int array_length) {\n  // Initialize all elements of the array to zero\n  array_start[0] = 0;\n  array_start[1] = 0;\n  array_start[2] = 0;\n  // If the array has non-zero length, call another function to initialize it further\n  if (array_length != 0) {\n    undefined4 uVar1 = FUN_00082688(array_length);\n    FUN_000814d0(array_start, array_length, uVar1);\n  }\n  return array_start;\n}",
            "called": [
                "FUN_000814d0",
                "FUN_00082688"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814f6",
            "calling": [
                "FUN_00081214"
            ],
            "imported": false,
            "current_name": "initialize_array_with_zeros_000814f6"
        },
        "FUN_0008397c": {
            "renaming": {
                "FUN_0008397c": "do_nothing_0008397c"
            },
            "code": "\nvoid do_nothing_0008397c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008397c",
            "calling": [
                "FUN_00084484"
            ],
            "imported": false,
            "current_name": "do_nothing_0008397c"
        },
        "FUN_0008074a": {
            "renaming": {
                "FUN_0008074a": "do_nothing_0008074a"
            },
            "code": "\nvoid do_nothing_0008074a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008074a",
            "calling": [
                "FUN_00080970"
            ],
            "imported": false,
            "current_name": "do_nothing_0008074a"
        },
        "FUN_00080e88": {
            "renaming": {
                "FUN_00080e88": "calculate_sum_00080e88",
                "param_1": "new_value",
                "puVar1": "data_pointer",
                "iVar2": "current_value"
            },
            "code": "int calculate_sum_00080e88(int new_value) {\n  undefined *data_pointer;\n  int current_value;\n  data_pointer = PTR_DAT_00080e9c;\n  if (*(int *)PTR_DAT_00080e9c == 0) {\n    *(undefined4 *)PTR_DAT_00080e9c = DAT_00080ea0;\n  }\n  current_value = *(int *)data_pointer;\n  *(int *)data_pointer = new_value + current_value;\n  return current_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e88",
            "calling": [
                "FUN_0008236c"
            ],
            "imported": false,
            "current_name": "calculate_sum_00080e88"
        },
        "FUN_0008074c": {
            "renaming": {
                "FUN_0008074c": "do_nothing_0008074c"
            },
            "code": "\nvoid do_nothing_0008074c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008074c",
            "calling": [
                "FUN_00080970"
            ],
            "imported": false,
            "current_name": "do_nothing_0008074c"
        },
        "FUN_000836d8": {
            "renaming": {
                "FUN_000836d8": "process_data_000836d8",
                "puVar1": "data_ptr",
                "puVar2": "buffer_ptr",
                "iVar3": "data_count",
                "iVar4": "buffer_size",
                "UNRECOVERED_JUMPTABLE_00": "jump_table"
            },
            "code": "void process_data_000836d8(void)\n{\n  uint8_t *data_ptr;\n  uint32_t *buffer_ptr;\n  int buffer_size;\n  int data_count;\n  code *jump_table;\n  \n  data_ptr = PTR_DAT_000836e8;\n  if (DAT_000836e4 == 0) {\n    return;\n  }\n  buffer_size = *(int *)PTR_DAT_000836d0;\n  buffer_ptr = *(uint32_t **)(buffer_size + 0x148);\n  if (buffer_ptr == (uint32_t *)0x0) {\n    buffer_ptr = (uint32_t *)(buffer_size + 0x14c);\n    *(uint32_t **)(buffer_size + 0x148) = buffer_ptr;\n  }\n  data_count = buffer_ptr[1];\n  if (data_count > 0x1f) {\n    if ((DAT_000836d4 == 0) || (buffer_ptr = (uint32_t *)allocate_memory(400), buffer_ptr == (uint32_t *)0x0)) {\n      jump_table = (code *)PTR_FUN_000817f0;\n      jump_table(0xffffffff);\n      return;\n    }\n    *buffer_ptr = *(uint32_t *)(buffer_size + 0x148);\n    buffer_ptr[1] = 0;\n    data_count = 0;\n    *(uint32_t **)(buffer_size + 0x148) = buffer_ptr;\n    buffer_ptr[0x62] = 0;\n    buffer_ptr[99] = 0;\n  }\n  buffer_ptr[1] = data_count + 1;\n  buffer_ptr[data_count + 2] = data_ptr;\n  jump_table = (code *)PTR_FUN_000836f8;\n  jump_table(0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000836d8",
            "calling": [
                "FUN_00081778"
            ],
            "imported": false,
            "current_name": "process_data_000836d8"
        },
        "FUN_000812b8": {
            "renaming": {
                "FUN_000812b8": "write_data_to_buffer_000812b8",
                "param_1": "buffer_address",
                "param_2": "data",
                "iVar1": "buffer_info",
                "uVar2": "buffer_data_size",
                "buffer_info_address": "*(int *)(buffer_address + 0x18)",
                "buffer_size": "*(int *)(buffer_info_address + 0x14)",
                "buffer_data_address": "*(int *)(buffer_info_address + 0x80)",
                "buffer_next_address": "*(int *)(buffer_info_address + 0x84)"
            },
            "code": "int write_data_to_buffer_000812b8(int buffer_address, int data) {\n    int buffer_info_address = *(int *)(buffer_address + 0x18);\n    int buffer_info = *(int *)(buffer_info_address + 0x14);\n    int buffer_size = *(int *)(buffer_info_address + 0x14);\n    int buffer_data_address = *(int *)(buffer_info_address + 0x80);\n    int buffer_next_address = *(int *)(buffer_info_address + 0x84);\n\n    if ((buffer_size << 0x1e < 0) && (*(int *)(buffer_info + 0x84) == *(int *)(buffer_info + 0x80))) {\n        *(int *)(buffer_info_address + 0x1c) = data;\n    }\n    else {\n        uint buffer_data_size = DAT_00081308 & buffer_data_address + 1U;\n        if ((int)buffer_data_size < 0) {\n            buffer_data_size = (buffer_data_size - 1 | 0xffffff80) + 1;\n        }\n        do {\n        } while (*(uint *)(buffer_info + 0x84) == buffer_data_size);\n        *(char *)(buffer_data_address + buffer_size) = (char)data;\n        *(uint *)(buffer_info + 0x80) = buffer_data_size;\n        *(int *)(buffer_info_address + 8) = 2;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000812b8",
            "calling": [],
            "imported": false,
            "current_name": "write_data_to_buffer_000812b8"
        },
        "thunk_FUN_00080efe": {
            "renaming": {
                "thunk_FUN_00080efe": "return_error_code_thunk_00080efe",
                "undefined4": "int32_t"
            },
            "code": "int32_t return_error_code_thunk_00080efe(void)\n{\n    return -1;\n}",
            "called": [
                "FUN_00080efe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008421c",
            "calling": [
                "FUN_000841e4"
            ],
            "imported": false,
            "current_name": "return_error_code_thunk_00080efe"
        },
        "FUN_000839b4": {
            "renaming": {
                "FUN_000839b4": "process_input_000839b4",
                "param_1": "input_length",
                "param_2": "input_value",
                "param_3": "input_buffer",
                "uVar1": "result_1",
                "iVar2": "result_2",
                "uVar3": "current_value",
                "pbVar4": "current_byte",
                "local_1c": "current_char",
                "abStack_1b": "stack_buffer"
            },
            "code": "uint process_input_000839b4(uint input_length, uint input_value, byte **input_buffer){\n  uint result_1;\n  int result_2;\n  uint buffer_index;\n  byte *current_byte;\n  uint current_value;\n  byte current_char;\n  byte stack_buffer[3];\n  \n  if(-1 < (int)((uint)*(ushort *)(input_buffer + 3) << 0x12)) {\n    *(ushort *)(input_buffer + 3) = *(ushort *)(input_buffer + 3) | 0x2000;\n    input_buffer[0x19] = (byte *)((uint)input_buffer[0x19] | 0x2000);\n  }\n  \n  result_1 = check_input(input_length);\n  if ((result_1 == 1) && (input_value - 1 < 0xff)) {\n    current_value = input_value & 0xff;\n    current_char = (byte)current_value;\n  }\n  else {\n    result_1 = convert_input(input_length, &current_char, input_value, input_buffer + 0x17);\n    if(result_1 == 0xffffffff) {\n      *(ushort *)(input_buffer + 3) = *(ushort *)(input_buffer + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if(result_1 == 0) {\n      return input_value;\n    }\n    current_value = (uint)current_char;\n  }\n  buffer_index = 0;\n  do {\n    current_byte = input_buffer[2] + -1;\n    input_buffer[2] = current_byte;\n    if((int)current_byte < 0) {\n      if((int)input_buffer[6] <= (int)current_byte) {\n        **input_buffer = (byte)current_value;\n        current_byte = *input_buffer;\n        current_value = (uint)*current_byte;\n        if(current_value != 10) goto LAB_00083a04;\n      }\n      result_2 = process_char(input_length, current_value, input_buffer);\n      if(result_2 == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **input_buffer = (byte)current_value;\n      current_byte = *input_buffer;\nLAB_00083a04:\n      *input_buffer = current_byte + 1;\n    }\n    if(result_1 <= buffer_index + 1) {\n      return input_value;\n    }\n    current_value = (uint)stack_buffer[buffer_index];\n    buffer_index = buffer_index + 1;\n  } while(true);\n}",
            "called": [
                "FUN_0008400c",
                "FUN_0008434c",
                "FUN_000842a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000839b4",
            "calling": [
                "FUN_00082824"
            ],
            "imported": false,
            "current_name": "process_input_000839b4"
        },
        "FUN_00081570": {
            "renaming": {
                "FUN_00081570": "check_if_param2_is_not_zero_00081570",
                "param_1": "arr",
                "param_2": "arr_len",
                "param_3": "offset",
                "iVar1": "result",
                "iVar2": "current_offset"
            },
            "code": "int check_if_param2_is_not_zero_00081570(int *arr, int arr_len, int offset) {\n  int current_offset = arr[2];\n  if (arr_len == 0) {\n    return 0;\n  }\n  if (offset != 0) {\n    int result = FUN_000814ae(arr, current_offset + offset);\n    if (result == 0) {\n      return 0;\n    }\n    FUN_000825cc(*arr + arr[2], arr_len);\n    arr[2] = current_offset + offset;\n  }\n  return 1;\n}",
            "called": [
                "FUN_000814ae",
                "FUN_000825cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081570",
            "calling": [
                "FUN_0008159e"
            ],
            "imported": false,
            "current_name": "check_if_param2_is_not_zero_00081570"
        },
        "FUN_000803fc": {
            "renaming": {
                "FUN_000803fc": "set_channel_state_000803fc",
                "param_1": "channel_index",
                "param_2": "channel_state",
                "param_3": "channel_state_array",
                "param_4": "bit_index",
                "unaff_r4": "unused_register_4",
                "in_lr": "unused_register_lr",
                "uVar1": "combined_index",
                "FUN_00080aa8": "set_channel_status",
                "FUN_00080b2c": "set_channel_id",
                "FUN_00080b90": "set_channel_type",
                "DAT_00080448": "channel_state_array",
                "PTR_s____source_tc_c_00080b80": "start_channel",
                "PTR_s_TC_Start_00080b84": "start_channel_name",
                "PTR_s_dwChannel____sizeof__pTc__TC_CHA_00080b88": "start_channel_param_name"
            },
            "code": "void set_channel_state_000803fc(int channel_index, uint32_t channel_state, uint32_t *DAT_00080448, uint32_t bit_index)\n{\n  uint64_t combined_index = ((uint64_t)channel_state << 32) | channel_index;\n  set_channel_status(DAT_00080448, bit_index);\n  set_channel_id(channel_index, channel_state, 0xc002);\n  set_channel_type(channel_index, channel_state, 0xa41);\n  DAT_00080448[bit_index >> 5] = 1 << (bit_index & 0x1f);\n  *(uint32_t *)(DAT_00080448 + channel_index * 0x40 + 0x24) = 4;\n  if (channel_index > 2) {\n    combined_index = (*PTR_s____source_tc_c_00080b80)(\".source.tc.c\", 0x5c, \"TC_Start\", \"dwChannel\", combined_index, 0);\n  }\n  *(uint32_t *)((int)combined_index + (int)((uint64_t)combined_index >> 0x20) * 0x40) = 5;\n}\n",
            "called": [
                "FUN_00080b2c",
                "FUN_00080b90",
                "FUN_00080aa8",
                "FUN_000816f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000803fc",
            "calling": [
                "FUN_000806a0"
            ],
            "imported": false,
            "current_name": "set_channel_state_000803fc"
        },
        "FUN_00080eb0": {
            "renaming": {
                "FUN_00080eb0": "set_flags_00080eb0",
                "param_1": "buffer_address",
                "param_2": "flags",
                "*(undefined4 *)(param_2 + 4)": "*(int *)(buffer_address + 4)"
            },
            "code": "int set_flags_00080eb0(int buffer_address, int flags){\n  *(int *)(buffer_address + 4) = flags;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eb0",
            "calling": [
                "FUN_00084494"
            ],
            "imported": false,
            "current_name": "set_flags_00080eb0"
        },
        "FUN_00081214": {
            "renaming": {
                "FUN_00081214": "process_data_00081214",
                "param_1": "start_address",
                "param_2": "data_ptr",
                "param_3": "target_value",
                "uVar1": "current_value",
                "FUN_000814f6": "initialize_device",
                "FUN_000811e8": "read_data",
                "FUN_0008159e": "send_data"
            },
            "code": "void process_data_00081214(undefined4 start_address, undefined4 data_ptr, uint32_t target_value)\n{\n  uint32_t current_value;\n  initialize_device(start_address, PTR_DAT_00081240);\n  while ((current_value = read_data(data_ptr), current_value != -1 && current_value != target_value)) {\n    send_data(start_address, current_value & 0xff);\n  }\n  return;\n}",
            "called": [
                "FUN_0008159e",
                "FUN_000811e8",
                "FUN_000814f6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081214",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "process_data_00081214"
        },
        "FUN_0008439c": {
            "renaming": {
                "FUN_0008439c": "write_byte_or_return_error_code_0008439c",
                "param_1": "destination",
                "param_2": "byte",
                "param_3": "max_size",
                "*param_2": "*byte",
                "*param_1": "*destination"
            },
            "code": "int write_byte_or_return_error_code_0008439c(int *destination, unsigned char byte, unsigned int max_size) {\n    if (destination == NULL) {\n        return 0;\n    }\n    if (max_size < 256) {\n        *destination = (int)byte;\n        return 1;\n    }\n    *destination = 138;\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008439c",
            "calling": [
                "FUN_0008434c"
            ],
            "imported": false,
            "current_name": "write_byte_or_return_error_code_0008439c"
        },
        "FUN_00082824": {
            "renaming": {
                "FUN_00082824": "find_values_in_array_with_callback_00082824",
                "param_1": "callback_param",
                "param_2": "array_length",
                "param_3": "array",
                "piVar1": "current_array_item",
                "iVar2": "result",
                "piVar3": "current_array_size",
                "uVar4": "current_array_item_index",
                "puVar5": "current_array_item_ptr",
                "uVar6": "current_array_size_shifted",
                "uVar7": "current_array_item_count"
            },
            "code": "int find_values_in_array_with_callback_00082824(int callback_param, int array_length, int **array)\n{\n  int *current_array_item;\n  int result;\n  int *current_array_size;\n  uint current_array_size_shifted;\n  uint current_array_item_count;\n  undefined4 *current_array_item_ptr;\n  uint current_array_item_index;\n  if (-1 < *(int *)(array_length + 100) << 0x12) {\n    result = FUNC_00083ca8();\n    array[2] = (int *)0x0;\n    array[1] = (int *)0x0;\n    return result;\n  }\n  current_array_size = array[2];\n  current_array_item = *array;\n  while (current_array_size != (int *)0x0) {\n    current_array_size_shifted = current_array_item[1] >> 2;\n    if (current_array_size_shifted != 0) {\n      current_array_item_ptr = (undefined4 *)(*current_array_item + -4);\n      current_array_item_index = 0;\n      do {\n        current_array_item_ptr = current_array_item_ptr + 1;\n        result = FUN_000839b4(callback_param, *current_array_item_ptr, array_length);\n        current_array_item_index = current_array_item_index + 1;\n        if (result == -1) goto LAB_00082864;\n      } while (current_array_size_shifted != current_array_item_index);\n      current_array_size = array[2];\n    }\n    current_array_size = (int *)((int)current_array_size - (current_array_item[1] & 0xfffffffc));\n    array[2] = current_array_size;\n    current_array_item = current_array_item + 2;\n  }\n  result = 0;\nLAB_00082864:\n  array[2] = (int *)0x0;\n  array[1] = (int *)0x0;\n  return result;\n}",
            "called": [
                "FUN_000839b4",
                "FUN_00083ca8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082824",
            "calling": [
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "find_values_in_array_with_callback_00082824"
        },
        "FUN_0008427c": {
            "renaming": {
                "FUN_0008427c": "update_status_0008427c",
                "param_1": "status",
                "param_2": "data",
                "iVar1": "result",
                "uVar2": "new_status"
            },
            "code": "void update_status_0008427c(int status, int *data)\n{\n  int result = get_result(status, *(short *)(data + 0xe));\n  ushort new_status;\n  if (result == -1) {\n    new_status = *(ushort *)(data + 0xc) & 0xefff;\n  }\n  else {\n    new_status = *(ushort *)(data + 0xc) | 0x1000;\n  }\n  if (result != -1) {\n    *(int *)(data + 0x50) = result;\n  }\n  *(ushort *)(data + 0xc) = new_status;\n  return;\n}",
            "called": [
                "FUN_000844e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008427c",
            "calling": [],
            "imported": false,
            "current_name": "update_status_0008427c"
        },
        "FUN_000809be": {
            "renaming": {
                "FUN_000809be": "update_param_000809be",
                "param_1": "base_address",
                "param_2": "update_type",
                "param_3": "new_value",
                "uVar1": "current_value"
            },
            "code": "void update_param_000809be(uint32_t base_address, uint32_t new_value, uint32_t update_type)\n{\n  uint32_t current_value = *(uint32_t *)(base_address + 0x70);\n  switch(update_type) {\n    case 0:\n    case 3:\n    case 4:\n    case 5:\n      return;\n    case 1:\n      current_value = current_value & ~new_value;\n      break;\n    case 2:\n      current_value = current_value | new_value;\n      break;\n    default:\n      return;\n  }\n  *(uint32_t *)(base_address + 0x70) = current_value;\n  *(uint32_t *)(base_address + 0x44) = new_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000809be",
            "calling": [
                "FUN_00080a30"
            ],
            "imported": false,
            "current_name": "update_param_000809be"
        },
        "FUN_00080a94": {
            "renaming": {
                "FUN_00080a94": "check_flag_00080a94",
                "param_1": "flag_offset",
                "param_2": "flag_mask",
                "uVar1": "flag_value"
            },
            "code": "uint check_flag_00080a94(int flag_offset, uint flag_mask)\n{\n  uint flag_value = *(uint *)(flag_offset + 8) & flag_mask;\n  if (flag_value != 0) {\n    if ((flag_mask & *(uint *)(flag_offset + 0x18)) == 0) {\n      flag_value = 0;\n    }\n    else {\n      flag_value = 1;\n    }\n  }\n  return flag_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a94",
            "calling": [
                "FUN_00081014"
            ],
            "imported": false,
            "current_name": "check_flag_00080a94"
        },
        "FUN_00081618": {
            "renaming": {
                "FUN_00081618": "set_dat_pointer_to_0x8000_00081618",
                "DAT_00081620": "dat_pointer"
            },
            "code": "void set_dat_pointer_to_0x8000_00081618(void)\n{\n  *(undefined4 *)(DAT_00081620 + 4) = 0x8000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081618",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "set_dat_pointer_to_0x8000_00081618"
        },
        "FUN_0008455c": {
            "renaming": {
                "FUN_0008455c": "calculate_difference_0008455c",
                "param_1": "value_1",
                "param_2": "value_2",
                "param_3": "multiplier_low",
                "param_4": "multiplier_high",
                "param_5": "result_array",
                "uVar1": "lower_result",
                "lVar2": "multiplied_value"
            },
            "code": "void calculate_difference_0008455c(uint32_t value_1, int32_t value_2, uint32_t multiplier_low, uint32_t multiplier_high, int32_t* result_array)\n{\n  uint64_t multiplied_value = FUNC_000845c0();\n  multiplied_value *= ((uint64_t)multiplier_high << 32) | multiplier_low;\n  uint32_t lower_result = value_1 - (uint32_t)multiplied_value;\n  uint32_t upper_result = value_2 - (int32_t)(multiplied_value >> 32) - (uint32_t)(value_1 < (uint32_t)multiplied_value);\n  result_array[0] = lower_result;\n  result_array[1] = upper_result;\n}\n",
            "called": [
                "FUN_000845c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008455c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_difference_0008455c"
        },
        "FUN_000840f8": {
            "renaming": {
                "FUN_000840f8": "find_first_occurrence_of_char_000840f8",
                "param_1": "data",
                "param_2": "target_char",
                "param_3": "length",
                "puVar1": "current_ptr",
                "uVar2": "current_value",
                "pcVar3": "char_ptr1",
                "pcVar4": "char_ptr2",
                "bVar5": "condition_met"
            },
            "code": "uint* find_first_occurrence_of_char_000840f8(uint* data, char target_char, uint* length)\n{\n  uint* current_ptr;\n  uint current_value;\n  char* char_ptr1;\n  char* char_ptr2;\n  bool condition_met;\n  if (((uint)data & 3) == 0)\n  {\n    current_ptr = data;\n    if ((uint*)0x3 < length)\n    {\n      do\n      {\n        current_value = *data ^ CONCAT22(CONCAT11(target_char, target_char), CONCAT11(target_char, target_char));\n        current_ptr = data;\n        condition_met = (current_value + 0xfefefeff & ~current_value & 0x80808080) != 0;\n        if (condition_met)\n        {\n          break;\n        }\n        length = length - 1;\n        current_ptr = data + 1;\n        data = data + 1;\n      } while ((uint*)0x3 < length);\n    }\n    data = length;\n    char_ptr2 = (char*)((int)length - 1);\n    if ((length != (uint*)0x0) && (data = current_ptr, *(char*)current_ptr != target_char))\n    {\n      char_ptr1 = (char*)0x0;\n      do\n      {\n        data = (uint*)((int)data + 1);\n        condition_met = char_ptr1 == char_ptr2;\n        char_ptr1 = char_ptr1 + 1;\n        if (condition_met)\n        {\n          goto LAB_00084150;\n        }\n      } while (*(char*)data != target_char);\n    }\n  }\n  else if (length == (uint*)0x0)\n  {\n    data = (uint*)0x0;\n  }\n  else if (*(char*)data != target_char)\n  {\n    current_ptr = (uint*)((int)data + 1);\n    length = (uint*)((int)length - 1);\n    do\n    {\n      data = current_ptr;\n      if (((uint)data & 3) == 0)\n      {\n        current_ptr = data;\n        if ((uint*)0x3 < length)\n        {\n          do\n          {\n            current_value = *data ^ CONCAT22(CONCAT11(target_char, target_char), CONCAT11(target_char, target_char));\n            current_ptr = data;\n            condition_met = (current_value + 0xfefefeff & ~current_value & 0x80808080) != 0;\n            if (condition_met)\n            {\n              goto LAB_00084150;\n            }\n            length = length - 1;\n            current_ptr = data + 1;\n            data = data + 1;\n          } while ((uint*)0x3 < length);\n        }\n        data = length;\n        char_ptr2 = (char*)((int)length - 1);\n        if ((length != (uint*)0x0) && (data = current_ptr, *(char*)current_ptr != target_char))\n        {\n          char_ptr1 = (char*)0x0;\n          do\n          {\n            data = (uint*)((int)data + 1);\n            condition_met = char_ptr1 == char_ptr2;\n            char_ptr1 = char_ptr1 + 1;\n            if (condition_met)\n            {\n              goto LAB_00084150;\n            }\n          } while (*(char*)data != target_char);\n        }\n        break;\n      }\n      if (length == (uint*)0x0)\n      {\n        break;\n      }\n      current_ptr = (uint*)((int)data + 1);\n      length = (uint*)((int)length - 1);\n    } while (*(char*)data != target_char);\n  }\nLAB_00084150:\n  return data;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000840f8",
            "calling": [
                "FUN_0008289c",
                "FUN_00083ca8"
            ],
            "imported": false,
            "current_name": "find_first_occurrence_of_char_000840f8"
        },
        "FUN_0008289c": {
            "renaming": {
                "FUN_0008289c": "FUNC_0008289c"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_0008289c(int param_1,int param_2,byte *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  undefined *puVar6;\n  int iVar7;\n  byte *pbVar8;\n  byte ********ppppppppbVar9;\n  int *piVar10;\n  int iVar11;\n  byte **ppbVar12;\n  char cVar13;\n  byte *******pppppppbVar14;\n  uint uVar15;\n  int **ppiVar16;\n  uint uVar17;\n  uint uVar18;\n  byte *******pppppppbVar19;\n  byte *******pppppppbVar20;\n  byte ********ppppppppbVar21;\n  byte *******pppppppbVar22;\n  int *piVar23;\n  byte *******pppppppbVar24;\n  byte *******pppppppbVar25;\n  uint uVar26;\n  int *piVar27;\n  undefined4 uVar28;\n  byte ********ppppppppbVar29;\n  bool bVar30;\n  longlong lVar31;\n  byte *******local_dc;\n  byte *******local_d4;\n  int **local_c8;\n  byte *local_c4;\n  undefined *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  byte ********local_9c;\n  byte *******local_98;\n  byte *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  byte *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    FUN_00083888();\n  }\n  uVar17 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar17 = uVar17 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar17;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar17 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar17 & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    iVar11 = FUN_0008356c(param_1,param_2);\n    if (iVar11 != 0) {\n      return (byte *)0xffffffff;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    pbVar8 = (byte *)FUN_000834f0(param_1,param_2,param_3,param_4);\n    return pbVar8;\n  }\nLAB_000828ee:\n  local_c0 = (undefined *)0x0;\n  local_94 = (byte *******)0x0;\n  local_98 = (byte *******)0x0;\n  local_c4 = (byte *)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  local_c8 = param_4;\n  local_9c = (byte ********)local_68;\nLAB_00082902:\n  pppppppbVar14 = param_3;\n  if ((*(byte *)param_3 != 0) && (*(byte *)param_3 != 0x25)) {\n    do {\n      pppppppbVar14 = (byte *******)((int)pppppppbVar14 + 1);\n      if (*(byte *)pppppppbVar14 == 0) break;\n    } while (*(byte *)pppppppbVar14 != 0x25);\n    pppppppbVar25 = (byte *******)((int)pppppppbVar14 - (int)param_3);\n    if (pppppppbVar25 != (byte *******)0x0) {\n      local_98 = (byte *******)((int)local_98 + 1);\n      local_94 = (byte *******)((int)local_94 + (int)pppppppbVar25);\n      *ppppppppbVar9 = param_3;\n      ppppppppbVar9[1] = pppppppbVar25;\n      if ((int)local_98 < 8) {\n        ppppppppbVar9 = ppppppppbVar9 + 2;\n      }\n      else {\n        if (local_94 == (byte *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppbVar25;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n          goto LAB_00082952;\n        }\n        iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n        ppppppppbVar9 = (byte ********)local_68;\n        if (iVar11 != 0) goto LAB_00083142;\n      }\n      local_c4 = local_c4 + (int)pppppppbVar25;\n    }\n  }\nLAB_00082952:\n  if (*(byte *)pppppppbVar14 != 0) {\n    local_a1 = '\\0';\n    uVar18 = (uint)*(byte *)((int)pppppppbVar14 + 1);\n    uVar17 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar30 = false;\n    pppppppbVar25 = (byte *******)0x0;\n    local_d4 = (byte *******)0xffffffff;\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\nLAB_00082976:\n    param_3 = (byte *******)((int)param_3 + 1);\nLAB_0008297a:\n    switch(uVar18) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (uVar18 != 0) {\n        local_dc = (byte *******)0x1;\n        local_d4 = (byte *******)0x1;\n        ppppppppbVar29 = (byte ********)&local_90;\n        local_90 = (char)uVar18;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      bVar3 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2a:\n      pppppppbVar25 = (byte *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppbVar25 < 0) {\n        pppppppbVar25 = (byte *******)-(int)pppppppbVar25;\n        goto switchD_00082984_caseD_2d;\n      }\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2b:\n      uVar18 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      uVar17 = uVar17 | 4;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2e:\n      uVar18 = (uint)*(byte *)param_3;\n      pppppppbVar14 = (byte *******)((int)param_3 + 1);\n      if (uVar18 == 0x2a) {\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (byte *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppbVar14;\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      uVar15 = uVar18 - 0x30;\n      if (uVar15 < 10) {\n        uVar26 = 0;\n        do {\n          param_3 = (byte *******)((int)pppppppbVar14 + 1);\n          uVar18 = (uint)*(byte *)pppppppbVar14;\n          uVar26 = uVar15 + uVar26 * 10;\n          uVar15 = uVar18 - 0x30;\n          pppppppbVar14 = param_3;\n        } while (uVar15 < 10);\n        local_d4 = (byte *******)(uVar26 | (int)uVar26 >> 0x1f);\n      }\n      else {\n        local_d4 = (byte *******)0x0;\n        param_3 = pppppppbVar14;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      uVar17 = uVar17 | 0x80;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar23 = *local_c8;\n      piVar27 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      iVar11 = (uint)bVar2 << 4;\n      iVar7 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar7 = (uint)bVar30 << 6, bVar30 != 0)) {\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        iVar11 = iVar7;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((bVar2) || (bVar30 == false)) {\n        iVar11 = 1;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar11 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = PTR_s_0123456789ABCDEF_00082e50;\n      if (bVar1 == false) goto LAB_00082efa;\nLAB_00082d1a:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      goto LAB_00082d2e;\n    case 99:\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (byte *******)0x1;\n      local_90 = SUB41(piVar23,0);\n      local_d4 = (byte *******)0x1;\n      ppppppppbVar29 = (byte ********)&local_90;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar23 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)piVar27 < 0) {\n        bVar30 = piVar23 != (int *)0x0;\n        piVar23 = (int *)-(int)piVar23;\n        piVar27 = (int *)(-(int)piVar27 - (uint)bVar30);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar11 = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)local_d4) {\n        uVar17 = uVar17 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar18 = (uint)piVar23 | (uint)piVar27;\n      iVar11 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082adc;\n    case 0x68:\n      bVar30 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x6c:\n      uVar18 = (uint)*(byte *)param_3;\n      if (uVar18 == 0x6c) {\n        bVar1 = true;\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (byte *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar30) {\n            piVar23 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar23 = (short)local_c4;\n          }\n          else {\n            ppbVar12 = (byte **)*local_c8;\n            local_c8 = local_c8 + 1;\n            *ppbVar12 = local_c4;\n          }\n        }\n        else {\n          ppbVar12 = (byte **)*local_c8;\n          local_c8 = local_c8 + 1;\n          *ppbVar12 = local_c4;\n        }\n      }\n      else {\n        ppbVar12 = (byte **)*local_c8;\n        local_c8 = local_c8 + 1;\n        *ppbVar12 = local_c4;\n        ppbVar12[1] = (byte *)((int)local_c4 >> 0x1f);\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 0;\n      break;\n    case 0x70:\n      local_c0 = PTR_s_0123456789abcdef_00083128;\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar27 = (int *)0x0;\n      local_a0 = 0x30;\n      iVar11 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x73:\n      ppppppppbVar29 = (byte ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (ppppppppbVar29 != (byte ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)FUN_00082688(ppppppppbVar29);\n          pppppppbVar14 = (byte *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          pppppppbVar14 = (byte *******)FUN_000840f8(ppppppppbVar29,0,local_d4);\n          cVar4 = local_a1;\n          if (pppppppbVar14 != (byte *******)0x0) {\n            pppppppbVar20 = (byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29);\n            if ((int)local_d4 <= (int)(byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29)) {\n              pppppppbVar20 = local_d4;\n            }\n            pppppppbVar14 = (byte *******)0x0;\n            local_d4 = pppppppbVar20;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((byte *******)0x5 < local_d4) {\n        local_d4 = (byte *******)0x6;\n      }\n      local_dc = (byte *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      ppppppppbVar29 = (byte ********)PTR_s__null__000834e8;\nLAB_00082d76:\n      local_a1 = '\\0';\n      pppppppbVar14 = (byte *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!bVar1) goto LAB_00082ce0;\nLAB_00082bc6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 1;\n      break;\n    case 0x78:\n      local_c0 = PTR_s_0123456789abcdef_00083128;\n      if (bVar1 != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((bVar3) && (((uint)piVar23 | (uint)piVar27) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar11 = 2;\n        local_9f = (char)uVar18;\n      }\n      else {\n        iVar11 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082ace:\n    if (-1 < (int)local_d4) {\n      uVar17 = uVar17 & 0xffffff7f;\n    }\n    uVar18 = (uint)piVar23 | (uint)piVar27;\njoined_r0x00082adc:\n    lVar31 = CONCAT44(piVar27,piVar23);\n    pppppppbVar14 = local_d4;\n    if ((uVar18 == 0) && (local_d4 == (byte *******)0x0)) {\n      ppppppppbVar29 = (byte ********)local_68;\n      if ((iVar11 != 0) || (!bVar3)) goto LAB_00082b04;\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082afe;\n    }\n    if (iVar11 == 1) {\n      if (piVar27 != (int *)0x0 || (int *)0x9 < piVar23) {\n        ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n        do {\n          ppppppppbVar29 = ppppppppbVar21;\n          uVar28 = (undefined4)((ulonglong)lVar31 >> 0x20);\n          cVar13 = '\\n';\n          FUN_00084530((int)lVar31,uVar28,10,0);\n          *(char *)ppppppppbVar29 = cVar13 + '0';\n          lVar31 = FUN_00084530((int)lVar31,uVar28,10,0);\n          ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n        } while (lVar31 != 0);\n        local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n        goto LAB_00082b04;\n      }\n      local_69 = (char)piVar23 + '0';\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      goto LAB_00083282;\n    }\n    ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n    if (iVar11 != 2) goto LAB_000830e2;\n    do {\n      ppppppppbVar29 = ppppppppbVar21;\n      uVar18 = (uint)piVar23 & 0xf;\n      piVar23 = (int *)((uint)piVar23 >> 4 | (int)piVar27 << 0x1c);\n      piVar27 = (int *)((uint)piVar27 >> 4);\n      *(undefined *)ppppppppbVar29 = local_c0[uVar18];\n      ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    } while (((uint)piVar23 | (uint)piVar27) != 0);\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (local_94 != (byte *******)0x0) {\n    FUN_00082824(param_1,param_2,&local_9c);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return (byte *)0xffffffff;\n  }\n  return local_c4;\nLAB_000830e2:\n  do {\n    ppppppppbVar29 = ppppppppbVar21;\n    piVar10 = (int *)((uint)piVar23 >> 3 | (int)piVar27 << 0x1d);\n    piVar27 = (int *)((uint)piVar27 >> 3);\n    iVar11 = ((uint)piVar23 & 7) + 0x30;\n    *(char *)ppppppppbVar29 = (char)iVar11;\n    ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    piVar23 = piVar10;\n  } while (((uint)piVar10 | (uint)piVar27) != 0);\n  if (bVar3) {\n    if (iVar11 == 0x30) {\nLAB_00082afe:\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    }\n    else {\n      *(undefined *)((int)ppppppppbVar29 + -1) = 0x30;\n      ppppppppbVar29 = ppppppppbVar21;\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar21);\n    }\n  }\n  else {\nLAB_00083282:\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n  }\nLAB_00082b04:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppbVar14) {\n    local_dc = pppppppbVar14;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (byte *******)((int)local_dc + 1);\n  }\nLAB_00082b1e:\n  pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_00082e4c;\n  if (bVar5) {\n    local_dc = (byte *******)((int)local_dc + 2);\n  }\n  if ((uVar17 == 0) &&\n     (pppppppbVar22 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar22)) {\n    if ((int)pppppppbVar22 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_00083474;\n    }\n    else {\n      do {\n        pppppppbVar24 = pppppppbVar22;\n        pppppppbVar22 = (byte *******)((int)local_98 + 1);\n        local_94 = local_94 + 4;\n        *ppppppppbVar9 = pppppppbVar20;\n        ppppppppbVar9[1] = (byte *******)0x10;\n        if ((int)pppppppbVar22 < 8) {\n          pppppppbVar19 = (byte *******)((int)local_98 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\n          local_98 = pppppppbVar22;\n        }\n        else if (local_94 == (byte *******)0x0) {\n          pppppppbVar19 = (byte *******)0x1;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n        }\n        else {\n          local_98 = pppppppbVar22;\n          iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n          if (iVar11 != 0) goto LAB_00083142;\n          pppppppbVar19 = (byte *******)((int)local_98 + 1);\n          ppppppppbVar9 = (byte ********)local_68;\n        }\n        pppppppbVar22 = pppppppbVar24 + -4;\n      } while (0x10 < (int)pppppppbVar22);\n      pppppppbVar22 = pppppppbVar24 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar22);\n    *ppppppppbVar9 = pppppppbVar20;\n    ppppppppbVar9[1] = pppppppbVar22;\n    local_98 = pppppppbVar19;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar19 = (byte *******)((int)pppppppbVar19 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar19 = (byte *******)0x1;\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  else {\n    pppppppbVar19 = (byte *******)((int)local_98 + 1);\n  }\n  pppppppbVar20 = pppppppbVar19;\n  if (local_a1 != '\\0') {\n    local_94 = (byte *******)((int)local_94 + 1);\n    pppppppbVar20 = (byte *******)0x1;\n    *ppppppppbVar9 = (byte *******)&local_a1;\n    ppppppppbVar9[1] = (byte *******)0x1;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 1);\n      local_98 = pppppppbVar19;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else {\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n      if (local_94 != (byte *******)0x0) {\n        local_98 = pppppppbVar19;\n        iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n        if (iVar11 != 0) goto LAB_00083142;\n        pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      }\n    }\n  }\n  pppppppbVar22 = pppppppbVar20;\n  pppppppbVar19 = local_98;\n  if (bVar5) {\n    local_94 = (byte *******)((int)local_94 + 2);\n    *ppppppppbVar9 = (byte *******)&local_a0;\n    ppppppppbVar9[1] = (byte *******)0x2;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar22 = (byte *******)((int)pppppppbVar20 + 1);\n      pppppppbVar19 = pppppppbVar20;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar22 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar20;\n      iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar22 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_s_0000000000000000_00083470;\n  pppppppbVar20 = pppppppbVar22;\n  if ((uVar17 == 0x80) &&\n     (pppppppbVar24 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar24)) {\n    if (0x10 < (int)pppppppbVar24) {\n      do {\n        while( true ) {\n          pppppppbVar20 = pppppppbVar24;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar22 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_000831f2:\n          pppppppbVar19 = local_98;\n          pppppppbVar24 = pppppppbVar20 + -4;\n          if ((int)(pppppppbVar20 + -4) < 0x11) goto LAB_00083218;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar22 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar22 = (byte *******)0x1;\n        pppppppbVar19 = local_94;\n        pppppppbVar24 = pppppppbVar20 + -4;\n        ppppppppbVar9 = (byte ********)local_68;\n      } while (0x10 < (int)(pppppppbVar20 + -4));\nLAB_00083218:\n      pppppppbVar24 = pppppppbVar20 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar24);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar24;\n    if ((int)pppppppbVar22 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar22 + 1);\n      pppppppbVar19 = pppppppbVar22;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar20 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar22;\n      iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_s_0000000000000000_0008312c;\n  pppppppbVar14 = (byte *******)((int)pppppppbVar14 - (int)local_d4);\n  ppppppppbVar21 = (byte ********)local_68;\n  if ((int)pppppppbVar14 < 1) {\nLAB_0008302a:\n    local_94 = (byte *******)((int)local_94 + (int)local_d4);\n    *ppppppppbVar9 = (byte *******)ppppppppbVar29;\n    ppppppppbVar9[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = pppppppbVar20;\n    if ((int)pppppppbVar20 < 8) goto LAB_000831be;\n    local_98 = local_94;\n    if ((local_94 != (byte *******)0x0) &&\n       (local_98 = pppppppbVar20, iVar11 = FUN_00082824(param_1,param_2,&local_9c), iVar11 != 0))\n    goto LAB_00083142;\n  }\n  else {\n    if (0x10 < (int)pppppppbVar14) {\n      do {\n        while( true ) {\n          pppppppbVar22 = pppppppbVar14;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_00082fe6:\n          pppppppbVar19 = local_98;\n          pppppppbVar14 = pppppppbVar22 + -4;\n          if ((int)(pppppppbVar22 + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar20 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar20 = (byte *******)0x1;\n        ppppppppbVar9 = (byte ********)local_68;\n        pppppppbVar19 = local_94;\n        pppppppbVar14 = pppppppbVar22 + -4;\n      } while (0x10 < (int)(pppppppbVar22 + -4));\nLAB_0008300e:\n      pppppppbVar14 = pppppppbVar22 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar14);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar14;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar20 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n      goto LAB_0008302a;\n    }\n    if (local_94 != (byte *******)0x0) {\n      local_98 = pppppppbVar20;\n      iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n      goto LAB_0008302a;\n    }\n    local_64[0] = local_d4;\n    local_98 = (byte *******)0x1;\n    ppppppppbVar9 = (byte ********)local_68;\n    local_68 = (undefined  [4])ppppppppbVar29;\nLAB_000831be:\n    ppppppppbVar21 = ppppppppbVar9 + 2;\n    local_94 = local_d4;\n  }\n  pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_00083130;\n  if (((uVar17 & 4) != 0) &&\n     (pppppppbVar20 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar20)) {\n    pppppppbVar22 = local_98;\n    if ((int)pppppppbVar20 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_000834ec;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = (byte *******)((int)pppppppbVar22 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar21 = pppppppbVar14;\n          ppppppppbVar21[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar19 = (byte *******)((int)pppppppbVar22 + 2);\n          ppppppppbVar21 = ppppppppbVar21 + 2;\nLAB_0008307a:\n          pppppppbVar20 = pppppppbVar20 + -4;\n          pppppppbVar22 = local_98;\n          if ((int)pppppppbVar20 < 0x11) goto LAB_000830a2;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar19 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar21 = (byte ********)local_68;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar20 = pppppppbVar20 + -4;\n        pppppppbVar19 = (byte *******)0x1;\n        pppppppbVar22 = local_94;\n        ppppppppbVar21 = (byte ********)local_68;\n      } while (0x10 < (int)pppppppbVar20);\n    }\nLAB_000830a2:\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar20);\n    *ppppppppbVar21 = pppppppbVar14;\n    ppppppppbVar21[1] = pppppppbVar20;\n    local_98 = pppppppbVar19;\n    if (7 < (int)pppppppbVar19) {\n      if (local_94 == (byte *******)0x0) {\n        if ((int)local_dc < (int)pppppppbVar25) {\n          local_dc = pppppppbVar25;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083186;\n      }\n      iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)local_dc < (int)pppppppbVar25) {\n    local_dc = pppppppbVar25;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (byte *******)0x0) &&\n     (iVar11 = FUN_00082824(param_1,param_2,&local_9c), iVar11 != 0)) goto LAB_00083142;\nLAB_00083186:\n  local_98 = (byte *******)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  uVar15 = uVar18 - 0x30;\n  pppppppbVar25 = (byte *******)0x0;\n  pppppppbVar14 = param_3;\n  do {\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\n    uVar18 = (uint)*(byte *)pppppppbVar14;\n    pppppppbVar25 = (byte *******)(uVar15 + (int)pppppppbVar25 * 10);\n    uVar15 = uVar18 - 0x30;\n    pppppppbVar14 = param_3;\n  } while (uVar15 < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  uVar18 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "called": [
                "FUN_000834f0",
                "FUN_00084530",
                "FUN_00083888",
                "FUN_00082688",
                "FUN_0008356c",
                "FUN_00082824",
                "FUN_000840f8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0008289c",
            "calling": [
                "FUN_00081750",
                "FUN_000834f0",
                "FUN_000817c8"
            ],
            "imported": false,
            "current_name": "FUNC_0008289c"
        },
        "FUN_00081f00": {
            "renaming": {
                "FUN_00081f00": "write_to_memory_32bit_aligned_00081f00",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "uVar3": "val32bit",
                "uVar4": "remaining_size",
                "bVar5": "is_size_zero"
            },
            "code": "void write_to_memory_32bit_aligned_00081f00(uint32_t *memory, uint8_t value, uint32_t size) {\n    uint32_t *ptr1;\n    uint32_t *ptr2;\n    uint32_t val32bit;\n    uint32_t remaining_size;\n    bool is_size_zero;\n    if (((uint)memory & 3) != 0) {\n        is_size_zero = size == 0;\n        ptr1 = memory;\n        size = size - 1;\n        if (is_size_zero) {\n            return;\n        }\n        while (true) {\n            memory = (uint32_t *)((int)ptr1 + 1);\n            *(uint8_t *)ptr1 = value;\n            if (((uint)memory & 3) == 0) {\n                break;\n            }\n            is_size_zero = size == 0;\n            ptr1 = memory;\n            size = size - 1;\n            if (is_size_zero) {\n                return;\n            }\n        }\n    }\n    if (3 < size) {\n        val32bit = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n        remaining_size = size;\n        ptr1 = memory;\n        if (0xf < size) {\n            remaining_size = size - 0x10;\n            do {\n                *ptr1 = val32bit;\n                ptr1[1] = val32bit;\n                ptr1[2] = val32bit;\n                ptr1[3] = val32bit;\n                ptr1 = ptr1 + 4;\n            } while (ptr1 != (uint32_t *)((int)memory + (remaining_size & 0xfffffff0) + 0x10));\n            size = size & 0xf;\n            memory = memory + ((remaining_size >> 4) + 1) * 4;\n            remaining_size = size;\n            ptr1 = memory;\n            if (size < 4) {\n                goto LAB_00081f7c;\n            }\n        }\n        do {\n            size = size - 4;\n            *memory = val32bit;\n            memory = memory + 1;\n        } while (3 < size);\n        memory = (uint32_t *)((int)ptr1 + (remaining_size - 4 & 0xfffffffc) + 4);\n        size = remaining_size & 3;\n    }\nLAB_00081f7c:\n    if (size != 0) {\n        ptr1 = memory;\n        do {\n            ptr2 = (uint32_t *)((int)ptr1 + 1);\n            *(uint8_t *)ptr1 = value;\n            ptr1 = ptr2;\n        } while (ptr2 != (uint32_t *)(size + (int)memory));\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f00",
            "calling": [
                "FUN_00083888",
                "FUN_000811b0"
            ],
            "imported": false,
            "current_name": "write_to_memory_32bit_aligned_00081f00"
        },
        "FUN_00080eaa": {
            "renaming": {
                "FUN_00080eaa": "return_error_00080eaa",
                "undefined4": "int32_t"
            },
            "code": "int32_t return_error_00080eaa(void)\n{\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eaa",
            "calling": [],
            "imported": false,
            "current_name": "return_error_00080eaa"
        },
        "FUN_00081d48": {
            "renaming": {
                "FUN_00081d48": "copy_memory_00081d48",
                "param_1": "dst",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "dst_ptr",
                "puVar2": "src_ptr",
                "puVar3": "remaining_size",
                "uVar4": "i",
                "uVar5": "is_aligned",
                "bVar6": "is_remaining"
            },
            "code": "undefined4 *copy_memory_00081d48(undefined4 *dst, undefined4 *src, uint size)\n{\n  undefined4 *dst_ptr;\n  undefined4 *src_ptr;\n  uint remaining_size;\n  uint i;\n  bool is_aligned = (((uint)dst | (uint)src) & 3) == 0;\n\n  if (!is_aligned) {\n    if (size < 8) {\n      remaining_size = size - 4;\n      if (3 < size) {\n        do {\n          dst_ptr = dst;\n          src_ptr = src;\n          remaining_size--;\n          *(undefined *)dst_ptr = *(undefined *)src_ptr;\n          dst = (undefined4 *)((int)dst_ptr + 1);\n          src = (undefined4 *)((int)src_ptr + 1);\n        } while (remaining_size != 0);\n        *(undefined *)(undefined4 *)((int)dst_ptr + 1) = *(undefined *)(undefined4 *)((int)src_ptr + 1);\n        *(undefined *)((int)dst_ptr + 2) = *(undefined *)((int)src_ptr + 2);\n        *(undefined *)((int)dst_ptr + 3) = *(undefined *)((int)src_ptr + 3);\n        return dst_ptr;\n      }\n      goto LAB_00081dcc;\n    }\n    if ((((uint)src & 3) != 0) && (((uint)dst & 3) != 0)) {\n      remaining_size = 4 - ((uint)dst & 3);\n      size = size - remaining_size;\n      src_ptr = src;\n      dst_ptr = dst;\n      if (((uint)dst & 1) != 0) {\n        src_ptr = (undefined4 *)((int)src + 1);\n        dst_ptr = (undefined4 *)((int)dst + 1);\n        *(undefined *)dst = *(undefined *)src;\n      }\n      dst = dst_ptr;\n      src = src_ptr;\n      if ((remaining_size & 2) != 0) {\n        src = (undefined4 *)((int)src_ptr + 2);\n        dst = (undefined4 *)((int)dst_ptr + 2);\n        *(undefined2 *)dst_ptr = *(undefined2 *)src_ptr;\n      }\n    }\n  }\n  for (i = 0; i < size / 16; i++) {\n    dst_ptr[0] = src[0];\n    dst_ptr[1] = src[1];\n    dst_ptr[2] = src[2];\n    dst_ptr[3] = src[3];\n    dst_ptr[4] = src[4];\n    dst_ptr[5] = src[5];\n    dst_ptr[6] = src[6];\n    dst_ptr[7] = src[7];\n    dst_ptr[8] = src[8];\n    dst_ptr[9] = src[9];\n    dst_ptr[10] = src[10];\n    dst_ptr[11] = src[11];\n    dst_ptr[12] = src[12];\n    dst_ptr[13] = src[13];\n    dst_ptr[14] = src[14];\n    dst_ptr[15] = src[15];\n    dst_ptr += 16;\n    src += 16;\n  }\n  remaining_size = size - i * 16;\n  if (remaining_size >= 16) {\n    dst_ptr[0] = src[0];\n    dst_ptr[1] = src[1];\n    dst_ptr[2] = src[2];\n    dst_ptr[3] = src[3];\n    dst_ptr[4] = src[4];\n    dst_ptr[5] = src[5];\n    dst_ptr[6] = src[6];\n    dst_ptr[7] = src[7];\n    dst_ptr += 8;\n    src += 8;\n    remaining_size -= 8;\n  }\n  if (remaining_size >= 8) {\n    dst_ptr[0] = src[0];\n    dst_ptr[1] = src[1];\n    dst_ptr[2] = src[2];\n    dst_ptr[3] = src[3];\n    dst_ptr += 4;\n    src += 4;\n    remaining_size -= 4;\n  }\n  if (remaining_size >= 4) {\n    dst_ptr[0] = src[0];\n    dst_ptr[1] = src[1];\n    dst_ptr += 2;\n    src += 2;\n    remaining_size -= 2;\n  }\n  if (remaining_size >= 2) {\n    *(undefined2 *)dst_ptr = *(undefined2 *)src;\n  }\n  if (remaining_size & 1) {\n    *(undefined *)dst_ptr = *(undefined *)src;\n  }\n  return dst;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d48",
            "calling": [
                "FUN_00083ca8"
            ],
            "imported": false,
            "current_name": "copy_memory_00081d48"
        },
        "FUN_00084494": {
            "renaming": {
                "FUN_00084494": "initialize_value_if_not_set_00084494",
                "param_1": "result",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "ptr_to_value",
                "iVar2": "function_result"
            },
            "code": "void initialize_value_if_not_set_00084494(int *result, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n    undefined *ptr_to_value = PTR_DAT_000844b8;\n    *(undefined4 *)ptr_to_value = 0;\n    int function_result = FUN_00080eb0(param_2, param_3, param_3, 0, param_4);\n    if ((function_result == -1) && (*(int *)ptr_to_value != 0)) {\n        *result = *(int *)ptr_to_value;\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_00080eb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084494",
            "calling": [
                "FUN_00084018"
            ],
            "imported": false,
            "current_name": "initialize_value_if_not_set_00084494"
        },
        "FUN_00084530": {
            "renaming": {
                "FUN_00084530": "check_params_00084530",
                "param_1": "x",
                "param_2": "y",
                "param_3": "z",
                "param_4": "w",
                "iVar1": "result"
            },
            "code": "int check_params_00084530(int x, int y, int z, int w) {\n  if (w == 0 && z == 0) {\n    if (y != 0 || x != 0) {\n      x = -1;\n    }\n    return x;\n  }\n  int result = do_something();\n  return result;\n}",
            "called": [
                "FUN_0008458c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084530",
            "calling": [
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "check_params_00084530"
        },
        "FUN_00080970": {
            "renaming": {
                "FUN_00080970": "check_and_do_nothing_00080970",
                "iVar1": "check_result",
                "FUN_00081248": "check_pointer",
                "PTR_DAT_000809a4": "PTR_DAT_000809a4",
                "PTR_DAT_000809a8": "PTR_DAT_000809a8",
                "PTR_DAT_000809ac": "PTR_DAT_000809ac",
                "PTR_DAT_000809b0": "PTR_DAT_000809b0",
                "do_nothing_0008073a": "do_nothing_0008073a",
                "do_nothing_00080748": "do_nothing_00080748",
                "do_nothing_0008074a": "do_nothing_0008074a",
                "do_nothing_0008074c": "do_nothing_0008074c"
            },
            "code": "void check_and_do_nothing_00080970(void)\n{\n  int check_result;\n  check_result = check_pointer(PTR_DAT_000809a4);\n  if (check_result != 0) {\n    do_nothing_0008073a();\n  }\n  check_result = check_pointer(PTR_DAT_000809a8);\n  if (check_result != 0) {\n    do_nothing_00080748();\n  }\n  check_result = check_pointer(PTR_DAT_000809ac);\n  if (check_result != 0) {\n    do_nothing_0008074a();\n  }\n  check_result = check_pointer(PTR_DAT_000809b0);\n  if (check_result != 0) {\n    do_nothing_0008074c();\n  }\n  return;\n}",
            "called": [
                "FUN_0008073a",
                "FUN_00080748",
                "FUN_0008074c",
                "FUN_00081248",
                "FUN_0008074a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080970",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "check_and_do_nothing_00080970"
        },
        "FUN_00084018": {
            "renaming": {
                "FUN_00084018": "check_and_update_00084018",
                "param_1": "param",
                "param_2": "data",
                "uVar1": "value",
                "iVar2": "result",
                "iVar3": "flag",
                "uVar4": "mask",
                "bVar5": "condition",
                "auStack_54": "auStack_54",
                "local_50": "local_50"
            },
            "code": "void check_and_update_00084018(int param, int *data) {\n  ushort value = *(ushort *)(data + 3);\n  int result = 0;\n  int flag = 0;\n  uint mask = (uint)value;\n  bool condition = (mask << 0x1e) < 0;\n  if (condition) {\n    *data = (int)data + 0x43;\n    data[4] = (int)data + 0x43;\n    data[5] = 1;\n    return;\n  }\n  if (*(short *)((int)data + 0xe) >= -1) {\n    result = FUN_00084494(param, (int)*(short *)((int)data + 0xe), auStack_54);\n    if (result >= -1) {\n      bool is_flag_set = (local_50 & 0xf000) == 0x8000;\n      if (is_flag_set && ((undefined *)data[10] == PTR_FUN_0008427c_1_000840f4)) {\n        flag = 0x400;\n        *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x400;\n        data[0x13] = 0x400;\n      }\n      else {\n        flag = 0x400;\n        *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x800;\n      }\n      goto LAB_00084074;\n    }\n    value = *(ushort *)(data + 3);\n    mask = (uint)value;\n  }\n  *(ushort *)(data + 3) = value | 0x800;\n  if ((mask & 0x80) == 0) {\n    flag = 0x400;\n  }\n  else {\n    flag = 0x40;\n  }\n  bool is_valid = FUNC_00081810(param, flag) == 0;\n  value = *(ushort *)(data + 3);\n  if (is_valid) {\n    if ((uint)value << 0x16 >= 0) {\n      *(ushort *)(data + 3) = value | 2;\n      *data = (int)data + 0x43;\n      data[4] = (int)data + 0x43;\n      data[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(param + 0x3c) = PTR_LAB_0008387c_1_000840f0;\n    *(ushort *)(data + 3) = value | 0x80;\n    *data = result;\n    data[4] = result;\n    data[5] = flag;\n    bool is_flag_set = (local_50 & 0xf000) == 0x2000;\n    if (is_flag_set && FUN_000844bc(param, (int)*(short *)((int)data + 0xe)) != 0) {\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) | 1;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_000844bc",
                "FUN_00084494",
                "FUN_00081810"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084018",
            "calling": [
                "FUN_0008356c"
            ],
            "imported": false,
            "current_name": "check_and_update_00084018"
        },
        "FUN_000815de": {
            "renaming": {
                "FUN_000815de": "parse_integer_from_string_000815de",
                "param_1": "string_ptr",
                "pbVar4": "current_char",
                "uVar5": "current_byte",
                "bVar1": "digit_value",
                "bVar2": "is_negative",
                "iVar7": "digit_offset",
                "iVar8": "num_digits_parsed",
                "uVar3": "parsed_integer",
                "uVar9": "max_div_10",
                "uVar10": "max_value"
            },
            "code": "uint parse_integer_from_string_000815de(byte **string_ptr) {\n  if (*string_ptr == NULL) {\n    return 0;\n  }\n  byte *current_char = *string_ptr;\n  bool is_negative = false;\n  if (*current_char == '-') {\n    is_negative = true;\n    current_char++;\n  }\n  else if (*current_char == '+') {\n    current_char++;\n  }\n  uint max_value = is_negative ? 0x80000000 : 0x7fffffff;\n  uint max_div_10 = max_value / 10;\n  int num_digits_parsed = 0;\n  uint parsed_integer = 0;\n  while (true) {\n    byte current_byte = *current_char;\n    uint digit_value = *(byte *)(*PTR_DAT_000827f8 + current_byte + 1);\n    if ((digit_value & 4) == 0) {\n      if ((digit_value & 3) == 0) {\n        if (num_digits_parsed == 0) {\n          *PTR_DAT_00082810 = 0x22;\n          parsed_integer = max_value;\n        }\n        else if (is_negative) {\n          parsed_integer = -parsed_integer;\n        }\n        return parsed_integer;\n      }\n      if ((digit_value & 3) == 1) {\n        digit_value = 0x37;\n      }\n      else {\n        digit_value = 0x57;\n      }\n      digit_value = current_byte - digit_value;\n    }\n    else {\n      digit_value = current_byte - 0x30;\n    }\n    if (digit_value > 9) {\n      if (num_digits_parsed == 0) {\n        *PTR_DAT_00082810 = 0x22;\n        parsed_integer = max_value;\n      }\n      else if (is_negative) {\n        parsed_integer = -parsed_integer;\n      }\n      return parsed_integer;\n    }\n    if (num_digits_parsed != -1) {\n      if (max_div_10 <= parsed_integer && parsed_integer != max_div_10) {\n        num_digits_parsed = -1;\n      }\n      else {\n        parsed_integer = parsed_integer * 10 + digit_value;\n        num_digits_parsed = 1;\n      }\n    }\n    current_char++;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815de",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "parse_integer_from_string_000815de"
        },
        "FUN_000834f0": {
            "renaming": {
                "FUN_000834f0": "process_data_000834f0",
                "param_1": "param_1",
                "param_2": "data_ptr",
                "iVar1": "result",
                "iVar2": "func_result",
                "local_488": "data_stack",
                "local_480": "data_size",
                "local_47c": "data_flags",
                "local_47a": "data_header",
                "local_478": "data_buffer",
                "local_474": "data_length",
                "local_470": "data_checksum",
                "local_46c": "data_offset",
                "local_464": "data_key",
                "local_424": "auStack"
            },
            "code": "int process_data_000834f0(undefined4 param_1, int data_ptr) {\n  int result = 0;\n  int func_result = 0;\n  undefined *data_stack [2];\n  undefined4 data_size = 0x400;\n  ushort data_flags;\n  undefined2 data_header;\n  undefined *data_buffer;\n  undefined4 data_offset;\n  undefined4 data_length;\n  undefined4 data_checksum;\n  undefined4 data_key;\n  undefined auStack [1024];\n  data_key = *(undefined4 *)(data_ptr + 100);\n  data_offset = *(undefined4 *)(data_ptr + 0x1c);\n  data_header = *(undefined2 *)(data_ptr + 0xe);\n  data_checksum = *(undefined4 *)(data_ptr + 0x24);\n  data_stack[0] = auStack;\n  data_flags = *(ushort *)(data_ptr + 0xc) & 0xfffd;\n  data_size = 0x400;\n  data_buffer = data_stack[0];\n  result = FUNC_0008289c(param_1, data_stack);\n  if ((-1 < result) && (func_result = FUN_00083850(param_1, data_stack), func_result != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)data_flags << 0x19) < 0) {\n    *(ushort *)(data_ptr + 0xc) = *(ushort *)(data_ptr + 0xc) | 0x40;\n  }\n  return result;\n}",
            "called": [
                "FUN_00083850",
                "FUN_0008289c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000834f0",
            "calling": [
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "process_data_000834f0"
        },
        "FUN_000841e4": {
            "renaming": {
                "FUN_000841e4": "process_data_000841e4",
                "param_1": "data_size",
                "puVar1": "result_ptr",
                "uVar2": "arg1",
                "piVar3": "data_ptr",
                "iVar4": "func_ptr",
                "pcVar5": "func",
                "unaff_r4": "arg2",
                "unaff_r5": "arg3",
                "in_lr": "arg4",
                "ppiVar6": "data_array_ptr_copy",
                "DAT_000841f0": "data_array_ptr",
                "PTR_DAT_00084218": "result_array_ptr"
            },
            "code": "int process_data_000841e4(uint data_size) {\n  uint max_size = 0x1f;\n  int *data_ptr = *DAT_000841f0;\n  if (data_size > max_size) {\n    *data_ptr = 0x16;\n    return -1;\n  }\n  int func_ptr = data_ptr[0xb7];\n  if ((func_ptr == 0) || (*(code **)(func_ptr + data_size * 4) == (code *)0x0)) {\n    int **DAT_000841f0_copy = DAT_000841f0;\n    uint arg1 = thunk_get_arg1(data_ptr);\n    undefined4 *result_ptr = PTR_DAT_00084218;\n    *result_ptr = 0;\n    int result = do_nothing(arg1, data_size, data_size, 0, DAT_000841f0_copy, arg2, arg3, arg4);\n    if ((result == -1) && (*result_ptr != 0)) {\n      *data_ptr = *result_ptr;\n      return -1;\n    }\n    return result;\n  }\n  code *func = *(code **)(func_ptr + data_size * 4);\n  if (func == (code *)0x1) {\n    return 0;\n  }\n  if (func != (code *)0xffffffff) {\n    *(undefined4 *)(func_ptr + data_size * 4) = 0;\n    (*func)(data_size);\n    return 0;\n  }\n  *data_ptr = 0x16;\n  return 1;\n}",
            "called": [
                "thunk_FUN_00080efe",
                "FUN_00080efc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000841e4",
            "calling": [
                "FUN_000836ec"
            ],
            "imported": false,
            "current_name": "process_data_000841e4"
        },
        "FUN_0008113a": {
            "renaming": {
                "FUN_0008113a": "print_formatted_string_0008113a",
                "param_1": "format_string_ptr",
                "param_2": "value",
                "param_3": "base",
                "param_4": "pad_character",
                "iVar1": "result",
                "iVar2": "minus_sign_result",
                "FUN_000810cc": "print_minus_sign",
                "FUN_000810fc": "print_formatted_string"
            },
            "code": "int print_formatted_string_0008113a(undefined4 *format_string_ptr, uint32_t value, uint32_t base, undefined4 pad_character) {\n  int result;\n\n  if (base == 0) {\n    result = (**(code **)*format_string_ptr)(format_string_ptr, value & 0xff);\n    return result;\n  }\n\n  if (base == 10) {\n    if ((int)value < 0) {\n      int minus_sign_result = print_formatted_string_0008113a(format_string_ptr, 0x2d, 0, pad_character);\n      int absolute_value_result = print_formatted_string_0008113a(format_string_ptr, -value, 10, pad_character);\n      return absolute_value_result + minus_sign_result;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n\n  result = print_formatted_string_0008113a(format_string_ptr, value, base, pad_character);\n  return result;\n}",
            "called": [
                "FUN_000810fc",
                "FUN_000810cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008113a",
            "calling": [
                "thunk_FUN_0008113a",
                "FUN_0008117a"
            ],
            "imported": false,
            "current_name": "print_formatted_string_0008113a"
        },
        "FUN_0008400c": {
            "renaming": {
                "FUN_0008400c": "get_value_from_data_0008400c",
                "*DAT_00084014": "value_ptr"
            },
            "code": "int get_value_from_data_0008400c(void)\n{\n    int* *DAT_00084014 = DAT_00084014;\n    return **DAT_00084014;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008400c",
            "calling": [
                "FUN_000839b4"
            ],
            "imported": false,
            "current_name": "get_value_from_data_0008400c"
        },
        "FUN_000814d0": {
            "renaming": {
                "FUN_000814d0": "validate_and_process_input_000814d0",
                "param_1": "input_array",
                "param_2": "input_value_1",
                "param_3": "input_value_2",
                "iVar1": "validation_result",
                "FUN_000814ae": "validate_input",
                "FUN_00081480": "process_valid_input",
                "FUN_000825cc": "process_invalid_input"
            },
            "code": "undefined4* validate_and_process_input_000814d0(undefined4* input_array, undefined4 input_value_1, undefined4 input_value_2)\n{\n  int validation_result = validate_input(input_array, input_value_2);\n  if (validation_result == 0) {\n    process_valid_input(input_array);\n  }\n  else {\n    input_array[2] = input_value_2;\n    process_invalid_input(*input_array, input_value_1);\n  }\n  return input_array;\n}",
            "called": [
                "FUN_00081480",
                "FUN_000825cc",
                "FUN_000814ae"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814d0",
            "calling": [
                "FUN_000814f6"
            ],
            "imported": false,
            "current_name": "validate_and_process_input_000814d0"
        },
        "FUN_00080c20": {
            "renaming": {
                "FUN_00080c20": "initialize_memory_00080c20",
                "puVar1": "rel_array",
                "puVar2": "memory_array",
                "iVar3": "i",
                "puVar4": "dat_array",
                "memory_ptr": "PTR_DAT_00080c8c",
                "DAT_00080c90": "dat_1",
                "DAT_00080c78": "DAT_00080c78",
                "PTR_Elf32_Rel_ARRAY_00080c7c": "PTR_Elf32_Rel_ARRAY_00080c7c",
                "PTR_DAT_00080c80": "PTR_DAT_00080c80",
                "DAT_00080c84": "DAT_00080c84",
                "DAT_00080c88": "DAT_00080c88",
                "DAT_00080c94": "DAT_00080c94"
            },
            "code": "void initialize_memory_00080c20(void)\n{\n  uint32_t *rel_array = PTR_Elf32_Rel_ARRAY_00080c7c;\n  uint32_t *memory_array = DAT_00080c78;\n  uint32_t *dat_array = (uint32_t *)PTR_DAT_00080c80;\n  if (memory_array != rel_array) {\n    for (int i = 0; rel_array + i < PTR_DAT_00080c84; i += 4) {\n      *(uint32_t *)(rel_array + i) = *(uint32_t *)(memory_array + i);\n    }\n  }\n  for (; dat_array < DAT_00080c88; dat_array++) {\n    *dat_array = 0;\n  }\n  uint32_t *memory_ptr = PTR_DAT_00080c8c + -0x20000000;\n  *(uint32_t *)(DAT_00080c90 + 8) = (uint32_t)PTR_DAT_00080c8c & 0x1fffff80;\n  if (memory_ptr < (uint32_t *)0x100000) {\n    *(uint32_t *)(DAT_00080c90 + 8) |= 0x20000000;\n  }\n  (*DAT_00080c94)();\n  while(1);\n}",
            "called": [
                "FUN_000815ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c20",
            "calling": [],
            "imported": false,
            "current_name": "initialize_memory_00080c20"
        },
        "FUN_00080efc": {
            "renaming": {
                "FUN_00080efc": "do_nothing_00080efc"
            },
            "code": "\nvoid do_nothing_00080efc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080efc",
            "calling": [
                "FUN_000841e4"
            ],
            "imported": false,
            "current_name": "do_nothing_00080efc"
        },
        "FUN_0008044c": {
            "renaming": {
                "FUN_0008044c": "process_data_0008044c",
                "param_1": "num",
                "param_2": "data_array",
                "param_3": "multiplier",
                "bVar1": "byte_val",
                "puVar2": "data_ptr1",
                "puVar3": "data_ptr2",
                "puVar4": "data_ptr3",
                "uVar5": "u_val",
                "iVar6": "index"
            },
            "code": "void process_data_0008044c(int num, int data_array[], int multiplier) {\n    byte byte_val;\n    uint u_val;\n    int index;\n    int sum;\n    int target_index = num * 64;\n    \n    if ((data_array[num] & 0x80) == 0) {\n        index = num * 12;\n        byte_val = data_array[num];\n        if ((byte_val + index < (int)(byte)*PTR_DAT_00080554) && ((int)((uint)(byte)PTR_DAT_00080548[((int)byte_val + index) * 8] << 0x19) < 0)) {\n            FUN_00081014(PTR_DAT_00080548[(index + (int)byte_val) * 8] & 0x3f, 0);\n        }\n    }\n    else {\n        *(uint *)(data_array + target_index) = *(uint *)(data_array + target_index) | 4;\n    }\n    \n    byte_val = *PTR_DAT_00080554;\n    data_array[num]++;\n    \n    if ((data_array[num] + num * 12 < (int)(byte)byte_val) && ((char)PTR_DAT_00080544[num] < '\f')) {\n        index = num * 12;\n        sum = *(int *)(data_array + target_index + 0x10) + *(int *)(PTR_DAT_00080548 + ((int)PTR_DAT_00080544[num] + index) * 8 + 4);\n        *(int *)(data_array + target_index + 0x14) = sum;\n        u_val = (uint)(byte)PTR_DAT_00080548[((int)PTR_DAT_00080544[num] + index) * 8] << 0x19;\n        if (-1 < (int)u_val) {\n            return;\n        }\n        FUN_00081014(PTR_DAT_00080548[(index + (int)PTR_DAT_00080544[num]) * 8] & 0x3f, 1);\n        return;\n    }\n    \n    target_index += data_array;\n    u_val = (*DAT_0008054c / DAT_00080550) * 20000 >> 5;\n    if (u_val <= *(int *)(data_array + target_index + 0x10) + 4U) {\n        u_val = *(int *)(data_array + target_index + 0x10) + 4;\n    }\n    *(uint *)(data_array + target_index + 0x14) = u_val;\n    data_array[num] = 0xff;\n}",
            "called": [
                "FUN_00081014"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008044c",
            "calling": [],
            "imported": false,
            "current_name": "process_data_0008044c"
        },
        "FUN_000810d8": {
            "renaming": {
                "FUN_000810d8": "process_data_000810d8",
                "param_1": "data_size",
                "param_2": "data_ptr",
                "param_3": "param_3",
                "param_4": "param_4",
                "FUN_000810a6": "call_helper"
            },
            "code": "void process_data_000810d8(int data_size, int* data_ptr, int param_3, int param_4) {\n  call_helper(data_size, data_ptr, param_3, param_4, param_4);\n  return;\n}",
            "called": [
                "FUN_000810a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810d8",
            "calling": [
                "FUN_000810e8",
                "FUN_0008117a"
            ],
            "imported": false,
            "current_name": "process_data_000810d8"
        },
        "FUN_00080efe": {
            "renaming": {
                "FUN_00080efe": "return_error_00080efe",
                "undefined4": "int32_t"
            },
            "code": "int32_t return_error_00080efe(void)\n{\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080efe",
            "calling": [
                "thunk_FUN_00080efe"
            ],
            "imported": false,
            "current_name": "return_error_00080efe"
        },
        "FUN_00081e34": {
            "renaming": {
                "FUN_00081e34": "reverse_copy_00081e34",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "puVar4": "dest_ptr",
                "uVar5": "i",
                "puVar6": "dest_ptr",
                "uVar7": "remaining_size",
                "iVar1": "i",
                "PTR_DAT_00000008": "undefined4"
            },
            "code": "void reverse_copy_00081e34(PTR_DAT_00000008 *destination, PTR_DAT_00000008 *source, uint32_t size)\n{\n  if ((destination > source) && (destination < (PTR_DAT_00000008 *)((int)source + size))) {\n    undefined *dest_ptr = (undefined *)((int)destination + size);\n    int32_t i = size - 1;\n    if (size != 0) {\n      do {\n        source = (PTR_DAT_00000008 *)((int)source + 1);\n        dest_ptr = (undefined *)((int)dest_ptr - 1);\n        *(undefined *)dest_ptr = *(undefined *)source;\n        i = i - 1;\n      } while (i != -1);\n    }\n    return;\n  }\n  if (size >= 0x10) {\n    if ((((uint32_t)destination | (uint32_t)source) & 3) == 0) {\n      PTR_DAT_00000008 *dest_ptr = destination;\n      PTR_DAT_00000008 *src_ptr = source;\n      do {\n        dest_ptr[0] = src_ptr[0];\n        dest_ptr[1] = src_ptr[1];\n        dest_ptr[2] = src_ptr[2];\n        dest_ptr[3] = src_ptr[3];\n        src_ptr = src_ptr + 4;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (PTR_DAT_00000008 *)((int)destination + ((size - 0x10) & 0xfffffff0) + 0x10));\n      uint32_t i = (size - 0x10 >> 4) + 1;\n      uint32_t remaining_size = size & 0xf;\n      source = source + i * 4;\n      destination = destination + i * 4;\n      if (remaining_size > 3) {\n        do {\n          remaining_size = remaining_size - 4;\n          *destination = *source;\n          destination = destination + 1;\n          source = source + 1;\n        } while (remaining_size > 3);\n        uint32_t padding = (size & 3);\n        if (padding == 0) {\n          return;\n        }\n      }\n      else {\n        uint32_t padding = size & 3;\n        if (padding == 0) {\n          return;\n        }\n      }\n    }\n  }\n  uint32_t i = 0;\n  do {\n    destination[i] = source[i];\n    i = i + 1;\n  } while (i != size);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e34",
            "calling": [
                "FUN_00081fac",
                "FUN_00083ca8"
            ],
            "imported": false,
            "current_name": "reverse_copy_00081e34"
        },
        "FUN_000805a8": {
            "renaming": {
                "FUN_000805a8": "process_data_000805a8",
                "*param_1": "*data",
                "bVar1": "current_byte",
                "PTR_DAT_000805d8": "data_pointer",
                "PTR_DAT_000805e4": "second_array_pointer",
                "DAT_000805dc": "array_pointer",
                "DAT_000805e0": "data_divisor"
            },
            "code": "void process_data_000805a8(byte *data)\n{\n  byte current_byte = *PTR_DAT_000805d8;\n  if (current_byte < 0x3c) {\n    *PTR_DAT_000805d8 = current_byte + 1;\n    uint *data_array = DAT_000805dc;\n    *data = current_byte;\n    *(uint *)(PTR_DAT_000805e4 + (uint)current_byte * 8 + 4) = (*data_array / DAT_000805e0) * 0x5dc >> 5;\n    return;\n  }\n  *data = 0xff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000805a8",
            "calling": [],
            "imported": false,
            "current_name": "process_data_000805a8"
        },
        "FUN_00080f08": {
            "renaming": {
                "FUN_00080f08": "do_nothing_00080f08"
            },
            "code": "\nvoid do_nothing_00080f08(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f08",
            "calling": [
                "FUN_000815ec",
                "FUN_00080250",
                "FUN_000801e0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080f08"
        },
        "FUN_000810cc": {
            "renaming": {
                "FUN_000810cc": "execute_function_pointer_000810cc",
                "*param_1": "func_ptr"
            },
            "code": "void execute_function_pointer_000810cc(void *func_ptr){\n  (**(void (**)(void))func_ptr)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810cc",
            "calling": [
                "FUN_0008113a"
            ],
            "imported": false,
            "current_name": "execute_function_pointer_000810cc"
        },
        "FUN_00081276": {
            "renaming": {
                "FUN_00081276": "read_byte_from_buffer_00081276",
                "param_1": "buffer_ptr",
                "iVar2": "buffer",
                "*(int *)(param_1 + 0x10)": "buffer",
                "*(int *)(iVar2 + 0x80)": "write_index",
                "*(int *)(iVar2 + 0x84)": "read_index",
                "*(byte *)(iVar2 + *(int *)(iVar2 + 0x84))": "read_byte",
                "*(uint *)(iVar2 + 0x84)": "(read_index + 1U) & 0x7f",
                "bVar1": "read_byte"
            },
            "code": "uint read_byte_from_buffer_00081276(int buffer_ptr) {\n  int buffer = *(int *)(buffer_ptr + 0x10);\n  int read_index = *(int *)(buffer + 0x84);\n  int write_index = *(int *)(buffer + 0x80);\n  if (read_index != write_index) {\n    byte read_byte = *(byte *)(buffer + read_index);\n    *(int *)(buffer + 0x84) = (read_index + 1U) & 0x7f;\n    return (uint)read_byte;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081276",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "read_byte_from_buffer_00081276"
        },
        "FUN_000844bc": {
            "renaming": {
                "FUN_000844bc": "find_value_at_pointer_000844bc",
                "param_1": "result",
                "param_2": "input",
                "puVar1": "pointer",
                "iVar2": "status"
            },
            "code": "void find_value_at_pointer_000844bc(int *result, undefined4 input) {\n  undefined *pointer = PTR_DAT_000844dc;\n  *(undefined4 *)PTR_DAT_000844dc = 0;\n  int status = check_input(input);\n  if ((status == -1) && (*(int *)pointer != 0)) {\n    *result = *(int *)pointer;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080eba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844bc",
            "calling": [
                "FUN_00084018"
            ],
            "imported": false,
            "current_name": "find_value_at_pointer_000844bc"
        },
        "FUN_00083850": {
            "renaming": {
                "FUN_00083850": "process_data_00083850",
                "param_1": "data_ptr",
                "param_2": "info_ptr",
                "piVar1": "info_ptr_1",
                "iVar2": "data_offset",
                "uVar3": "data_info",
                "uVar4": "data_flags",
                "iVar5": "data_remaining",
                "pcVar6": "data_handler",
                "unaff_r4": "return_value",
                "iVar7": "data_remaining_1"
            },
            "code": "undefined4 process_data_00083850(int *data_ptr, int *info_ptr)\n{\n    int *info_ptr_1;\n    int data_offset;\n    ushort data_info;\n    uint data_flags;\n    int data_remaining;\n    code *data_handler;\n    undefined4 return_value;\n    int data_remaining_1;\n    \n    if ((data_ptr != NULL) && (data_ptr[14] == 0)) {\n        cleanup_and_exit();\n    }\n    if (*(short *)(info_ptr + 6) == 0) {\n        return 0;\n    }\n    data_info = *(ushort *)(info_ptr + 6);\n    if ((int)((uint)data_info << 0x1c) < 0) {\n        data_offset = info_ptr[4];\n        if (data_offset == 0) {\n            return 0;\n        }\n        data_remaining = *info_ptr;\n        if ((data_info & 3) == 0) {\n            data_remaining_1 = info_ptr[5];\n        }\n        else {\n            data_remaining_1 = 0;\n        }\n        *info_ptr = data_offset;\n        data_remaining = data_remaining - data_offset;\n        info_ptr[2] = data_remaining_1;\n        do {\n            if (data_remaining < 1) {\n                return 0;\n            }\n            data_remaining_1 = (*(code *)info_ptr[9])(data_ptr, info_ptr[7], data_offset, data_remaining, return_value);\n            data_remaining = data_remaining - data_remaining_1;\n            data_offset = data_offset + data_remaining_1;\n        } while (0 < data_remaining_1);\n        *(ushort *)(info_ptr + 6) = *(ushort *)(info_ptr + 6) | 0x40;\n        return 0xffffffff;\n    }\n    *(ushort *)(info_ptr + 6) = data_info | 0x800;\n    if ((info_ptr[1] < 1) && (info_ptr[15] < 1)) {\n        return 0;\n    }\n    data_handler = (code *)info_ptr[10];\n    if (data_handler == NULL) {\n        return 0;\n    }\n    data_flags = (uint)(data_info | 0x800);\n    data_remaining = *data_ptr;\n    *data_ptr = 0;\n    if ((data_info & 0x1000) == 0) {\n        data_offset = (*data_handler)(data_ptr, info_ptr[7], data_flags & 0x1000, 1);\n        if ((data_offset == -1) && (data_remaining_1 = *data_ptr, data_remaining_1 != 0)) {\n            if ((data_remaining_1 == 29) || (data_remaining_1 == 22)) {\n                *data_ptr = data_remaining;\n                return 0;\n            }\n            *(ushort *)(info_ptr + 6) = *(ushort *)(info_ptr + 6) | 0x40;\n            data_offset = info_ptr[4];\n            goto LAB_000837c8;\n        }\n        data_flags = (uint)*(ushort *)(info_ptr + 6);\n        data_handler = (code *)info_ptr[10];\n    }\n    else {\n        data_offset = info_ptr[20];\n    }\n    if (((int)(data_flags << 0x1d) < 0) && (data_offset = data_offset - info_ptr[1], info_ptr[12] != 0)) {\n        data_offset = data_offset - info_ptr[15];\n    }\n    data_offset = (*data_handler)(data_ptr, info_ptr[7], data_offset, 0);\n    if (data_offset == -1) {\n        data_remaining_1 = *data_ptr;\n        if (data_remaining_1 != 0) {\n            if ((data_remaining_1 != 29) && (data_remaining_1 != 22)) {\n                *(ushort *)(info_ptr + 6) = *(ushort *)(info_ptr + 6) | 0x40;\n                return 0xffffffff;\n            }\n            *(ushort *)(info_ptr + 6) = *(ushort *)(info_ptr + 6) & 0xf7ff;\n            *info_ptr = info_ptr[4];\n            info_ptr[1] = 0;\n            goto LAB_00083774;\n        }\n        data_info = *(ushort *)(info_ptr + 6) & 0xf7ff;\n        info_ptr[1] = 0;\n        *(ushort *)(info_ptr + 6) = data_info;\n        *info_ptr = info_ptr[4];\n    }\n    else {\n        data_info = *(ushort *)(info_ptr + 6) & 0xf7ff;\n        *info_ptr = info_ptr[4];\n        *(ushort *)(info_ptr + 6) = data_info;\n        info_ptr[1] = 0;\n    }\n    if ((int)((uint)data_info << 0x13) < 0) {\n        info_ptr[20] = data_offset;\n    }\nLAB_00083774:\n    info_ptr_1 = (int *)info_ptr[12];\n    *data_ptr = return_value;\n    if (info_ptr_1 == NULL) {\n        return 0;\n    }\n    if (info_ptr_1 != info_ptr + 16) {\n        cleanup(info_ptr_1);\n    }\n    info_ptr[12] = 0;\n    return 0;\n}",
            "called": [
                "FUN_00083888",
                "FUN_00083b10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083850",
            "calling": [
                "FUN_000834f0",
                "FUN_00084484",
                "FUN_00083ca8",
                "FUN_000842a4"
            ],
            "imported": false,
            "current_name": "process_data_00083850"
        },
        "FUN_000815ec": {
            "renaming": {
                "FUN_000815ec": "do_something_periodically_000815ec",
                "FUN_00081618": "initialize_system",
                "FUN_00080774": "setup_communication",
                "do_nothing_000815e8": "wait_for_signal",
                "do_nothing_00080f08": "activate_module",
                "FUN_000801e0": "perform_initialization",
                "FUN_00080250": "check_for_errors",
                "DAT_00081614": "data_received",
                "FUN_00080970": "process_data"
            },
            "code": "void do_something_periodically_000815ec(void)\n{\n  initialize_system();\n  setup_communication();\n  wait_for_signal();\n  activate_module(1);\n  perform_initialization();\n  do {\n    do {\n      check_for_errors();\n    } while (DAT_00081614 == 0);\n    process_data();\n  } while ( true );\n}",
            "called": [
                "FUN_00080970",
                "FUN_00080f08",
                "FUN_000815e8",
                "FUN_00080250",
                "FUN_00081618",
                "FUN_00080774",
                "FUN_000801e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815ec",
            "calling": [
                "FUN_00080c20"
            ],
            "imported": false,
            "current_name": "do_something_periodically_000815ec"
        },
        "FUN_00080d3e": {
            "renaming": {
                "FUN_00080d3e": "update_flags_00080d3e",
                "param_1": "data_ptr",
                "param_2": "flag1",
                "param_3": "flag2",
                "param_4": "flag3",
                "PTR_": "",
                "DAT_": "",
                "*(": "*",
                ")": "",
                "uint": "uint32_t",
                "|": "",
                "&": "mask",
                "mask_1": "mask1",
                "mask_2": "mask2",
                "value": "value",
                "return": "return"
            },
            "code": "void update_flags_00080d3e(uint32_t* data_ptr, uint32_t flag1, uint32_t flag2, uint32_t flag3){\n    uint32_t* ptr = data_ptr + 1;\n    uint32_t mask1 = flag2 & 0xf;\n    uint32_t mask2 = flag3 & 3;\n    uint32_t value = flag1 | *ptr | (mask1 << 0x18) | (mask2 << 0x1c);\n    *ptr = value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d3e",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "update_flags_00080d3e"
        },
        "FUN_00081438": {
            "renaming": {
                "FUN_00081438": "set_function_pointer_00081438",
                "param_1": "pointer_array",
                "param_2": "value",
                "FUN_00081348": "initialize_pointer_array"
            },
            "code": "undefined4 *set_function_pointer_00081438(undefined4 *pointer_array, undefined4 value) {\n  initialize_pointer_array();\n  *pointer_array = PTR_PTR_FUNCTION_1_00081458;\n  pointer_array[9] = value;\n  return pointer_array;\n}",
            "called": [
                "FUN_00081348"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081438",
            "calling": [
                "FUN_0008089c"
            ],
            "imported": false,
            "current_name": "set_function_pointer_00081438"
        },
        "FUN_00080b90": {
            "renaming": {
                "FUN_00080b90": "set_value_at_index_00080b90",
                "param_1": "base_address",
                "param_2": "index",
                "param_3": "value"
            },
            "code": "void set_value_at_index_00080b90(int base_address, int index, int value) {\n  *(int *)(base_address + index * 0x40 + 0x14) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b90",
            "calling": [
                "FUN_000803fc"
            ],
            "imported": false,
            "current_name": "set_value_at_index_00080b90"
        },
        "FUN_00080748": {
            "renaming": {
                "FUN_00080748": "do_nothing_00080748"
            },
            "code": "\nvoid do_nothing_00080748(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080748",
            "calling": [
                "FUN_00080970"
            ],
            "imported": false,
            "current_name": "do_nothing_00080748"
        },
        "FUN_0008356c": {
            "renaming": {
                "FUN_0008356c": "process_data_0008356c",
                "param_1": "output",
                "param_2": "input",
                "uVar1": "flag",
                "iVar2": "temp",
                "uVar3": "data",
                "uVar4": "result"
            },
            "code": "uint32_t process_data_0008356c(uint32_t *output, int *input)\n{\n    uint32_t data = *(uint16_t *)(input + 3);\n    uint32_t result = 0;\n    int32_t temp = 0;\n\n    if ((*PTR_DAT_0008362c != 0) && (*(int *)(*PTR_DAT_0008362c + 0x38) == 0)) {\n        initialize();\n    }\n\n    if ((int32_t)(data << 0x1c) < 0) {\n        temp = input[4];\n    }\n    else {\n        if (-1 < (int32_t)(data << 0x1b)) {\n            *output = 9;\n            *(uint16_t *)(input + 3) = data | 0x40;\n            return 0xFFFFFFFF;\n        }\n        if ((int32_t)(data << 0x1d) < 0) {\n            if ((int *)input[0xc] != (int *)0x0) {\n                if ((int *)input[0xc] != input + 0x10) {\n                    handle_error(output);\n                    data = *(uint16_t *)(input + 3);\n                }\n                input[0xc] = 0;\n            }\n            temp = input[4];\n            data &= 0xffdb;\n            *input = temp;\n            input[1] = 0;\n        }\n        else {\n            temp = input[4];\n        }\n        *(uint16_t *)(input + 3) = data | 8;\n        data |= 8;\n    }\n\n    if ((temp == 0) && ((data & 0x280) != 0x200)) {\n        process_data_0008356c(output, input);\n        data = *(uint16_t *)(input + 3);\n        temp = input[4];\n    }\n\n    uint32_t flag = data & 1;\n    if (flag == 0) {\n        if (-1 < (int32_t)(data << 0x1e)) {\n            flag = input[5];\n        }\n        input[2] = flag;\n    }\n    else {\n        input[6] = -input[5];\n        input[2] = 0;\n    }\n\n    if ((temp == 0) && ((int32_t)(data << 0x18) < 0)) {\n        *(uint16_t *)(input + 3) = *(uint16_t *)(input + 3) | 0x40;\n        return 0xFFFFFFFF;\n    }\n    return result;\n}",
            "called": [
                "FUN_00083888",
                "FUN_00083b10",
                "FUN_00084018"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008356c",
            "calling": [
                "FUN_0008289c",
                "FUN_00083ca8",
                "FUN_000842a4"
            ],
            "imported": false,
            "current_name": "process_data_0008356c"
        },
        "FUN_00080b98": {
            "renaming": {
                "FUN_00080b98": "initialize_data_00080b98",
                "puVar1": "data_ptr",
                "iVar2": "control_ptr",
                "DAT_00080c04": "data_start",
                "DAT_00080c08": "control_start",
                "DAT_00080c10": "control_value1",
                "DAT_00080c0c": "control_value2",
                "DAT_00080c14": "control_value3",
                "DAT_00080c1c": "control_flag_ptr",
                "DAT_00080c18": "control_flag_value"
            },
            "code": "void initialize_data_00080b98(void)\n{\n  int *data_ptr = DAT_00080c04;\n  *data_ptr = 0x400;\n  data_ptr[0x80] = 0x400;\n  int *control_ptr = DAT_00080c08;\n  if (-1 < *(int *)(control_ptr + 0x20) << 7) {\n    *(int *)(control_ptr + 0x20) = DAT_00080c10;\n    while (-1 < *(int *)(control_ptr + 0x68) << 0x1f);\n  }\n  *(int *)(control_ptr + 0x20) = DAT_00080c0c;\n  while (-1 < *(int *)(control_ptr + 0x68) << 0xf);\n  *(uint *)(control_ptr + 0x30) = *(uint *)(control_ptr + 0x30) & 0xfffffffc | 1;\n  while (-1 < *(int *)(control_ptr + 0x68) << 0x1c);\n  *(int *)(control_ptr + 0x28) = DAT_00080c14;\n  while (-1 < *(int *)(control_ptr + 0x68) << 0x1e);\n  *(int *)(control_ptr + 0x30) = 0x11;\n  while (-1 < *(int *)(control_ptr + 0x68) << 0x1c);\n  *(int *)(control_ptr + 0x30) = 0x12;\n  while (-1 < *(int *)(control_ptr + 0x68) << 0x1c);\n  *DAT_00080c1c = DAT_00080c18;\n  return;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b98",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "initialize_data_00080b98"
        },
        "FUN_000810e8": {
            "renaming": {
                "FUN_000810e8": "calculate_sum_of_two_values_000810e8",
                "param_1": "input_value",
                "iVar1": "first_value",
                "iVar2": "second_value",
                "FUN_000810a6": "get_first_value",
                "FUN_000810d8": "calculate_second_value"
            },
            "code": "int calculate_sum_of_two_values_000810e8(undefined4 input_value)\n{\n  int first_value = get_first_value();\n  int second_value = calculate_second_value(input_value);\n  return second_value + first_value;\n}",
            "called": [
                "FUN_000810a6",
                "FUN_000810d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810e8",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "calculate_sum_of_two_values_000810e8"
        },
        "FUN_0008073a": {
            "renaming": {
                "FUN_0008073a": "do_nothing_0008073a"
            },
            "code": "\nvoid do_nothing_0008073a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008073a",
            "calling": [
                "FUN_00080970"
            ],
            "imported": false,
            "current_name": "do_nothing_0008073a"
        },
        "FUN_00080d58": {
            "renaming": {
                "FUN_00080d58": "set_bit_at_position_00080d58",
                "param_1": "array_address",
                "param_2": "position",
                "PTR_": "",
                "DAT_": "",
                "*(int *)(param_1 + 0x14)": "*array_pointer",
                "1 << (param_2 & 0xff)": "1 << bit_position",
                "int": "uint32_t",
                "uint": "uint8_t"
            },
            "code": "void set_bit_at_position_00080d58(int array_address, uint8_t position)\n{\n    uint8_t bit_position = position & 0xff;\n    uint32_t *array_pointer = (uint32_t *)(array_address + 0x14);\n    *array_pointer = 1 << bit_position;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d58",
            "calling": [
                "FUN_00080f0c"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_00080d58"
        },
        "FUN_00081480": {
            "renaming": {
                "FUN_00081480": "reset_int_array_00081480",
                "param_1": "array"
            },
            "code": "void reset_int_array_00081480(int *array)\n{\n    if (*array != 0)\n    {\n        reset_int_array_00081480();\n    }\n    *array = 0;\n    array[2] = 0;\n    array[1] = 0;\n    return;\n}",
            "called": [
                "FUN_00081800"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081480",
            "calling": [
                "FUN_000814d0"
            ],
            "imported": false,
            "current_name": "reset_int_array_00081480"
        },
        "FUN_00081f9c": {
            "renaming": {
                "FUN_00081f9c": "call_function_with_params_00081f9c",
                "param_1": "param_1",
                "param_2": "param_2",
                "*DAT_00081fa8": "function_pointer"
            },
            "code": "void call_function_with_params_00081f9c(int* *DAT_00081fa8, int param_1, int param_2)\n{\n  *DAT_00081fa8(param_1, param_2);\n  return;\n}",
            "called": [
                "FUN_00081fac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f9c",
            "calling": [
                "FUN_00081496"
            ],
            "imported": false,
            "current_name": "call_function_with_params_00081f9c"
        },
        "FUN_00085844": {
            "renaming": {
                "FUN_00085844": "do_nothing_00085844"
            },
            "code": "\nvoid do_nothing_00085844(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085844",
            "calling": [
                "FUN_00081778"
            ],
            "imported": false,
            "current_name": "do_nothing_00085844"
        },
        "FUN_00081248": {
            "renaming": {
                "FUN_00081248": "calculate_difference_00081248",
                "param_1": "input_param",
                "PTR_": "ptr",
                "DAT_": "val"
            },
            "code": "uint calculate_difference_00081248(int input_param) {\n    int* PTR_1 = *(int **)(input_param + 0x10);\n    int* PTR_2 = PTR_1 + 0x20;\n    int DAT_1 = *PTR_2;\n    int DAT_2 = *(PTR_2 + 1);\n    int diff = DAT_1 - DAT_2 & 0x7f;\n    return diff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081248",
            "calling": [
                "FUN_00080970",
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "calculate_difference_00081248"
        },
        "FUN_00081800": {
            "renaming": {
                "FUN_00081800": "call_function_with_param_00081800",
                "param_1": "param",
                "*DAT_0008180c": "data",
                "FUN_00083b10": "call_function"
            },
            "code": "void call_function_with_param_00081800(void* *DAT_0008180c, undefined4 param)\n{\n  call_function(**DAT_0008180c, param);\n  return;\n}",
            "called": [
                "FUN_00083b10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081800",
            "calling": [
                "FUN_00081472",
                "FUN_0008151c",
                "FUN_00081480"
            ],
            "imported": false,
            "current_name": "call_function_with_param_00081800"
        },
        "FUN_0008458c": {
            "renaming": {
                "FUN_0008458c": "calculate_difference_0008458c",
                "param_1": "first_num",
                "param_2": "second_num",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "result",
                "uVar1": "multiplied_num",
                "lVar2": "shifted_num",
                "*param_5": "*result",
                "param_5[1]": "second_subtracted_num"
            },
            "code": "void calculate_difference_0008458c(uint first_num, int second_num, undefined4 param_3, undefined4 param_4, int *result){\n  uint multiplied_num = FUNC_00084860() * CONCAT44(param_4,param_3);\n  uint subtracted_num = first_num - multiplied_num;\n  uint shifted_num = (uint)((ulonglong)multiplied_num >> 0x20);\n  int second_subtracted_num = second_num - shifted_num - (uint)(first_num < multiplied_num);\n  *result = subtracted_num;\n  result[1] = second_subtracted_num;\n  return;\n}",
            "called": [
                "FUN_00084860"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008458c",
            "calling": [
                "FUN_00084530"
            ],
            "imported": false,
            "current_name": "calculate_difference_0008458c"
        },
        "FUN_0008434c": {
            "renaming": {
                "FUN_0008434c": "process_data_0008434c",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "param_3",
                "param_4": "result_ptr",
                "uVar1": "result",
                "iVar2": "function_result",
                "pcVar3": "function_ptr",
                "auStack_24": "stack_buffer"
            },
            "code": "void process_data_0008434c(undefined4 *data_ptr, int data_size, undefined4 param_3, undefined4 *result_ptr) {\n    undefined4 result;\n    int function_result;\n    code *function_ptr;\n    undefined stack_buffer[12];\n    \n    if (data_size == 0) {\n        function_ptr = *DAT_00084398;\n        result = get_data();\n        function_result = (*function_ptr)(data_ptr, stack_buffer, 0, result, result_ptr);\n    }\n    else {\n        function_ptr = *DAT_00084398;\n        result = get_data();\n        function_result = (*function_ptr)(data_ptr, data_size, param_3, result, result_ptr);\n    }\n    if (function_result == -1) {\n        *result_ptr = 0;\n        *data_ptr = 0x8a;\n    }\n    return;\n}",
            "called": [
                "FUN_00084004",
                "FUN_0008439c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008434c",
            "calling": [
                "FUN_000839b4"
            ],
            "imported": false,
            "current_name": "process_data_0008434c"
        },
        "FUN_000845c0": {
            "renaming": {
                "FUN_000845c0": "FUNC_000845c0"
            },
            "code": "\nundefined8 FUNC_000845c0(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if ((int)param_2 < 0) {\n    bVar13 = param_1 != 0;\n    param_1 = -param_1;\n    param_2 = -param_2 - (uint)bVar13;\n    uVar9 = 0xffffffff;\n  }\n  else {\n    uVar9 = 0;\n  }\n  if ((int)param_4 < 0) {\n    uVar9 = ~uVar9;\n    bVar13 = param_3 != 0;\n    param_3 = -param_3;\n    param_4 = -param_4 - (uint)bVar13;\n  }\n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 != 0) {\n        uVar2 = param_1 >> (0x20 - uVar5 & 0xff);\n        param_3 = param_3 << (uVar5 & 0xff);\n        param_1 = param_1 << (uVar5 & 0xff);\n        param_2 = param_2 << (uVar5 & 0xff) | uVar2;\n      }\n      uVar2 = param_3 >> 0x10;\n      uVar3 = param_2 / uVar2;\n      uVar6 = (param_3 & 0xffff) * uVar3;\n      uVar10 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar10 <= uVar6 && uVar6 - uVar10 != 0) {\n        bVar13 = CARRY4(uVar10,param_3);\n        uVar10 = uVar10 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar10 <= uVar6 && uVar6 - uVar10 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar10 = uVar10 + param_3;\n        }\n      }\n      uVar7 = (uVar10 - uVar6) / uVar2;\n      uVar3 = (param_3 & 0xffff) * uVar7;\n      uVar6 = param_1 & 0xffff | ((uVar10 - uVar6) - uVar2 * uVar7) * 0x10000;\n      uVar2 = uVar7;\n      if (uVar6 <= uVar3 && uVar3 - uVar6 != 0) {\n        uVar2 = uVar7 - 1;\n        if ((CARRY4(uVar6,param_3) == false) &&\n           (uVar6 + param_3 <= uVar3 && uVar3 - (uVar6 + param_3) != 0)) {\n          uVar2 = uVar7 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n      uVar10 = 0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar12 = param_3 & 0xffff;\n        uVar10 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar5 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar5 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar10 = uVar3 / uVar2;\n        uVar12 = param_3 & 0xffff;\n        uVar6 = uVar12 * uVar10;\n        uVar7 = param_1 >> (0x20 - uVar5 & 0xff) | param_2 << (uVar5 & 0xff);\n        uVar3 = uVar7 >> 0x10 | (uVar3 - uVar2 * uVar10) * 0x10000;\n        param_1 = param_1 << (uVar5 & 0xff);\n        uVar5 = uVar10;\n        if (uVar3 <= uVar6 && uVar6 - uVar3 != 0) {\n          bVar13 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar5 = uVar10 - 1;\n          if ((bVar13 == false) && (uVar3 <= uVar6 && uVar6 - uVar3 != 0)) {\n            uVar5 = uVar10 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar8 = (uVar3 - uVar6) / uVar2;\n        uVar4 = uVar12 * uVar8;\n        param_2 = uVar7 & 0xffff | ((uVar3 - uVar6) - uVar2 * uVar8) * 0x10000;\n        uVar10 = uVar8;\n        if (param_2 <= uVar4 && uVar4 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar10 = uVar8 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar4 && uVar4 - param_2 != 0)) {\n            uVar10 = uVar8 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar4;\n        uVar10 = uVar10 | uVar5 << 0x10;\n      }\n      uVar3 = param_2 / uVar2;\n      uVar6 = uVar12 * uVar3;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar4 = (uVar7 - uVar6) / uVar2;\n      uVar12 = uVar12 * uVar4;\n      uVar3 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar2 * uVar4) * 0x10000;\n      uVar2 = uVar4;\n      if (uVar3 <= uVar12 && uVar12 - uVar3 != 0) {\n        uVar2 = uVar4 - 1;\n        if ((CARRY4(uVar3,param_3) == false) &&\n           (uVar3 + param_3 <= uVar12 && uVar12 - (uVar3 + param_3) != 0)) {\n          uVar2 = uVar4 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n    }\n  }\n  else if (param_2 < param_4) {\n    uVar3 = 0;\n    uVar10 = 0;\n  }\n  else {\n    uVar5 = count_leading_zeroes(param_4);\n    if (uVar5 == 0) {\n      if ((param_4 < param_2) || (uVar3 = uVar5, uVar10 = uVar5, param_3 <= param_1)) {\n        uVar3 = 1;\n        uVar10 = 0;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar5;\n      uVar6 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_3 >> (uVar2 & 0xff) | param_4 << (uVar5 & 0xff);\n      uVar7 = uVar4 >> 0x10;\n      uVar3 = uVar6 / uVar7;\n      uVar12 = (uVar4 & 0xffff) * uVar3;\n      uVar10 = param_2 << (uVar5 & 0xff) | param_1 >> (uVar2 & 0xff);\n      uVar6 = uVar10 >> 0x10 | (uVar6 - uVar7 * uVar3) * 0x10000;\n      uVar2 = uVar3;\n      if (uVar6 <= uVar12 && uVar12 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar2 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar12 && uVar12 - uVar6 != 0)) {\n          uVar2 = uVar3 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar8 = (uVar6 - uVar12) / uVar7;\n      uVar11 = (uVar4 & 0xffff) * uVar8;\n      uVar6 = uVar10 & 0xffff | ((uVar6 - uVar12) - uVar7 * uVar8) * 0x10000;\n      uVar3 = uVar8;\n      if (uVar6 <= uVar11 && uVar11 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar3 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar11 && uVar11 - uVar6 != 0)) {\n          uVar3 = uVar8 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar3 = uVar3 | uVar2 << 0x10;\n      lVar1 = (ulonglong)uVar3 * (ulonglong)(param_3 << (uVar5 & 0xff));\n      uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar6 - uVar11 < uVar2) ||\n         ((uVar10 = 0, uVar6 - uVar11 == uVar2 && (param_1 << (uVar5 & 0xff) < (uint)lVar1)))) {\n        uVar3 = uVar3 - 1;\n        uVar10 = 0;\n      }\n    }\n  }\n  if (uVar9 != 0) {\n    bVar13 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar10 = -uVar10 - (uint)bVar13;\n  }\n  return CONCAT44(uVar10,uVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000845c0",
            "calling": [
                "FUN_0008455c"
            ],
            "imported": false,
            "current_name": "FUNC_000845c0"
        },
        "FUN_0008159e": {
            "renaming": {
                "FUN_0008159e": "send_data_to_device_0008159e",
                "param_1": "device_address",
                "param_2": "data",
                "param_3": "device_status",
                "local_c": "data_masked",
                "uStack_8": "device_status_stack"
            },
            "code": "void send_data_to_device_0008159e(uint device_address, uint data, uint device_status)\n{\n  uint data_masked;\n  undefined4 device_status_stack;\n  \n  data_masked = data & 0xffff00ff;\n  device_status_stack = device_status;\n  send_data(device_address, &data_masked, 1, 0, device_address);\n  return;\n}",
            "called": [
                "FUN_00081570"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008159e",
            "calling": [
                "FUN_00081214"
            ],
            "imported": false,
            "current_name": "send_data_to_device_0008159e"
        },
        "FUN_000806a0": {
            "renaming": {
                "FUN_000806a0": "process_data_000806a0",
                "*param_1": "*data",
                "param_2": "size",
                "bVar1": "result",
                "puVar2": "data_ptr",
                "uVar3": "temp_var",
                "uVar4": "data_value",
                "uVar5": "other_var",
                "iVar6": "i",
                "uVar7": "index",
                "FUN_00080f0c": "function_1",
                "DAT_00080698": "other_var",
                "DAT_0008069c": "other_var",
                "PTR_DAT_00080694": "data_ptr"
            },
            "code": "byte process_data_000806a0(byte *data, undefined4 size)\n{\n  byte result;\n  undefined *PTR_DAT_00080694;\n  undefined4 temp_var;\n  uint data_value;\n  undefined4 DAT_00080698;\n  int i;\n  uint index;\n  \n  if (0x3b < *data) goto LAB_00080660;\n  function_1(size, 1, 0x220, *data, 0x960);\n  PTR_DAT_00080694 = PTR_DAT_00080694;\n  data_value = (uint)*data;\n  result = PTR_DAT_00080694[data_value * 8];\n  data[2] = 0;\n  index = data_value / 0xc;\n  PTR_DAT_00080694[data_value * 8] = result & 0xc0 | (byte)size & 0x3f;\n  data[1] = 0;\n  i = 0;\n  do {\n    if ((int)((uint)(byte)PTR_DAT_00080694[(i + index * 0xc) * 8] << 0x19) < 0) goto LAB_00080652;\n    i = i + 1;\n  } while (i != 0xc);\n  DAT_00080698 = DAT_00080698;\n  if (index == 0) {\n    temp_var = 0x1e;\nLAB_0008064c:\n    function_2(DAT_00080698, index, temp_var, temp_var);\n  }\n  else {\n    if (index == 1) {\n      temp_var = 0x1f;\n      goto LAB_0008064c;\n    }\n    if (index == 2) {\n      temp_var = 0x20;\n      goto LAB_0008064c;\n    }\n    DAT_00080698 = DAT_0008069c;\n    if (index == 3) {\n      index = 2;\n      temp_var = 0x1d;\n      goto LAB_0008064c;\n    }\n    if (index == 4) {\n      index = 0;\n      temp_var = 0x1b;\n      goto LAB_0008064c;\n    }\n  }\nLAB_00080652:\n  PTR_DAT_00080694[(uint)*data * 8] = PTR_DAT_00080694[(uint)*data * 8] | 0x40;\nLAB_00080660:\n  return *data;\n}",
            "called": [
                "FUN_000803fc",
                "FUN_00080f0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000806a0",
            "calling": [
                "FUN_000801e0"
            ],
            "imported": false,
            "current_name": "process_data_000806a0"
        },
        "FUN_0008151c": {
            "renaming": {
                "FUN_0008151c": "copy_array_if_not_empty_0008151c",
                "param_1": "dest_array",
                "param_2": "source_array"
            },
            "code": "void copy_array_if_not_empty_0008151c(int *dest_array, int *source_array) {\n  if (*source_array != 0) {\n    if ((*source_array != 0) && (PTR_DAT_0008155c != (undefined *)0x0)) {\n      if ((uint)source_array[2] <= (uint)dest_array[1]) {\n        FUN_000825cc();\n        dest_array[2] = source_array[2];\n        goto LAB_00081558;\n      }\n    }\n    FUN_00081800();\n  }\n  *dest_array = *source_array;\n  dest_array[1] = source_array[1];\n  dest_array[2] = source_array[2];\n  *source_array = 0;\n  source_array[1] = 0;\n  LAB_00081558:\n  source_array[2] = 0;\n  return;\n}",
            "called": [
                "FUN_00081800",
                "FUN_000825cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008151c",
            "calling": [
                "FUN_00081560"
            ],
            "imported": false,
            "current_name": "copy_array_if_not_empty_0008151c"
        },
        "FUN_000816f8": {
            "renaming": {
                "FUN_000816f8": "assertion_failed_000816f8",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "msg",
                "param_4": "arg4",
                "uVar1": "var1",
                "uVar2": "var2",
                "puVar3": "msg_ptr",
                "uVar4": "var4"
            },
            "code": "void assertion_failed_000816f8(undefined4 arg1, undefined4 arg2, undefined *msg, undefined4 arg4) {\n    undefined4 var1 = *(undefined4 *)(*DAT_00081724 + 0xc);\n    undefined4 var2 = arg4;\n    undefined *msg_ptr = PTR_s___function__00081728;\n    if (msg == (undefined *)0x0) {\n        goto LAB_0008171c;\n    }\n    do {\n        arg4 = arg1;\n        FUN_00081750(var1, PTR_s_assertion___s__failed__file___s__0008172c, var2, arg1, arg2, msg_ptr, msg);\n        undefined8 var4 = FUN_000836ec();\n        arg2 = (undefined4)((ulonglong)var4 >> 0x20);\n        var1 = (undefined4)var4;\nLAB_0008171c:\n        msg = PTR_s__00081730;\n        var2 = arg4;\n        msg_ptr = PTR_s__00081730;\n    } while (true);\n}",
            "called": [
                "FUN_000836ec",
                "FUN_00081750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816f8",
            "calling": [
                "FUN_00080b2c",
                "FUN_000803fc"
            ],
            "imported": false,
            "current_name": "assertion_failed_000816f8"
        },
        "FUN_00084484": {
            "renaming": {
                "FUN_00084484": "process_data_00084484",
                "param_1": "data_ptr",
                "DAT_00084490": "DATA_START",
                "iVar3": "data",
                "FUN_00083888": "initialize_data",
                "short": "short",
                "param_1 + 0xc": "DATA_FIELD_OFFSET",
                "FUN_00083850": "process_data_logic",
                "code": "code",
                "param_1 + 0x2c": "CALLBACK_FUNC_OFFSET",
                "int": "int",
                "iVar2": "result",
                "uint": "uint",
                "ushort": "ushort",
                "int)((uint)*(ushort *)(param_1 + 0xc) << 0x18": "DATA_CLEANUP_OFFSET",
                "FUN_00083b10": "cleanup_data",
                "param_1 + 0x10": "CALLBACK_DATA_OFFSET",
                "param_1 + 0x30": "CALLBACK_DATA_SIZE",
                "param_1 + 0x40": "CALLBACK_DATA_SIZE",
                "param_1 + 0x44": "DATA_BUFFER_OFFSET",
                "do_nothing_0008397c": "do_nothing_0008397c",
                "undefined2": "undefined2",
                "do_nothing_00083980": "do_nothing_00083980",
                "undefined4": "undefined4"
            },
            "code": "int process_data_00084484(int data_ptr)\n{\n  int data = *DAT_00084490;\n  if (data_ptr != 0) {\n    if ((data != 0) && (*(int *)(data + DATA_OFFSET) == 0)) {\n      initialize_data();\n    }\n    if (*(short *)(data_ptr + DATA_FIELD_OFFSET) != 0) {\n      int result = process_data_00084484_logic(data, data_ptr);\n      if ((*(code **)(data_ptr + CALLBACK_FUNC_OFFSET) != (code *)0x0) && (result < 0)) {\n        return -1;\n      }\n      if ((int)((uint)*(ushort *)(data_ptr + DATA_FIELD_OFFSET) << 0x18) < 0) {\n        cleanup_data(data, *(undefined4 *)(data_ptr + DATA_CLEANUP_OFFSET));\n      }\n      if (*(int *)(data_ptr + CALLBACK_DATA_OFFSET) != 0) {\n        if (*(int *)(data_ptr + CALLBACK_DATA_OFFSET) != data_ptr + CALLBACK_DATA_SIZE) {\n          cleanup_data(data);\n        }\n        *(undefined4 *)(data_ptr + CALLBACK_DATA_OFFSET) = 0;\n      }\n      if (*(int *)(data_ptr + DATA_BUFFER_OFFSET) != 0) {\n        cleanup_data(data);\n        *(undefined4 *)(data_ptr + DATA_BUFFER_OFFSET) = 0;\n      }\n      do_nothing_0008397c();\n      *(undefined2 *)(data_ptr + DATA_FIELD_OFFSET) = 0;\n      do_nothing_00083980();\n      return result;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_0008397c",
                "FUN_00083888",
                "FUN_00083850",
                "FUN_00083b10",
                "FUN_00083980"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084484",
            "calling": [],
            "imported": false,
            "current_name": "process_data_00084484"
        },
        "FUN_000811ca": {
            "renaming": {
                "FUN_000811ca": "update_buffer_000811ca",
                "param_1": "buffer_address",
                "param_2": "new_data",
                "uVar1": "new_index"
            },
            "code": "void update_buffer_000811ca(int buffer_address, undefined new_data) {\n  uint new_index = (*(int *)(buffer_address + 0x80) + 1U) & 0x7f;\n  if (new_index != *(uint *)(buffer_address + 0x84)) {\n    *(undefined *)(buffer_address + *(int *)(buffer_address + 0x80)) = new_data;\n    *(uint *)(buffer_address + 0x80) = new_index;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811ca",
            "calling": [],
            "imported": false,
            "current_name": "update_buffer_000811ca"
        },
        "FUN_00080164": {
            "renaming": {
                "FUN_00080164": "send_data_to_device_00080164",
                "param_1": "device_ptr",
                "param_2": "data_byte",
                "param_3": "param_3",
                "param_4": "param_4",
                "FUN_000806f8": "send_byte_to_device",
                "PTR_DAT_0008017c": "device_ptr",
                "PTR_DAT_00080180": "device_ptr + 1"
            },
            "code": "void send_data_to_device_00080164(unsigned int* PTR_DAT_0008017c, unsigned char data_byte, unsigned int param_3, unsigned int param_4)\n{\n  send_byte_to_device(PTR_DAT_0008017c, 0x5a);\n  send_byte_to_device(PTR_DAT_00080180, 0x5a, param_3, param_4);\n  return;\n}",
            "called": [
                "FUN_000806f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080164",
            "calling": [
                "FUN_00080250",
                "FUN_000801e0"
            ],
            "imported": false,
            "current_name": "send_data_to_device_00080164"
        },
        "FUN_00084244": {
            "renaming": {
                "FUN_00084244": "process_data_00084244",
                "param_1": "output",
                "param_2": "input",
                "param_3": "arg1",
                "param_4": "arg2",
                "uVar4": "data2",
                "sVar1": "data1",
                "puVar2": "ptr",
                "iVar3": "result",
                "unaff_r4": "unaff_r4",
                "unaff_r5": "unaff_r5",
                "unaff_r6": "unaff_r6",
                "in_lr": "in_lr"
            },
            "code": "void process_data_00084244(int *output, int input, undefined4 arg1, undefined4 arg2) {\n  short data1 = *(short *)(input + 0xe);\n  ushort data2 = *(ushort *)(input + 0xc);\n\n  if ((int)((uint)data2 << 0x17) < 0) {\n    FUN_000844e0(output, data1, 0, 2);\n    data2 = *(ushort *)(input + 0xc);\n  }\n\n  *(ushort *)(input + 0xc) = data2 & 0xefff;\n  undefined *ptr = PTR_DAT_000843dc;\n  *(undefined4 *)ptr = 0;\n  int result = FUN_00080ec8((int)data1, arg1, arg2, arg2, unaff_r4, unaff_r5, unaff_r6, in_lr);\n\n  if ((result == -1) && (*(int *)ptr != 0)) {\n    *output = *(int *)ptr;\n    return;\n  }\n}\n",
            "called": [
                "FUN_00080ec8",
                "FUN_000844e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084244",
            "calling": [],
            "imported": false,
            "current_name": "process_data_00084244"
        },
        "FUN_00081496": {
            "renaming": {
                "FUN_00081496": "check_input_and_set_00081496",
                "param_1": "input_ptr",
                "param_2": "input_value",
                "iVar1": "result"
            },
            "code": "int check_input_and_set_00081496(int* input_ptr, int input_value, undefined4 param_3, undefined4 param_4) {\n    int result = FUN_00081f9c(*input_ptr, input_value + 1, param_3, param_4, param_4);\n    if (result != 0) {\n        *input_ptr = result;\n        input_ptr[1] = input_value;\n        result = 1;\n    }\n    return result;\n}",
            "called": [
                "FUN_00081f9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081496",
            "calling": [
                "FUN_000814ae"
            ],
            "imported": false,
            "current_name": "check_input_and_set_00081496"
        },
        "FUN_00084004": {
            "renaming": {
                "FUN_00084004": "get_data_from_address_00084004",
                "DAT_00084008": "data_address"
            },
            "code": "int get_data_from_address_00084004(void)\n{\n  return DAT_00084008;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084004",
            "calling": [
                "FUN_0008434c"
            ],
            "imported": false,
            "current_name": "get_data_from_address_00084004"
        },
        "FUN_00081014": {
            "renaming": {
                "FUN_00081014": "update_data_00081014",
                "param_1": "index",
                "param_2": "value",
                "param_3": "param_3",
                "puVar1": "data_ptr_1",
                "puVar2": "data_ptr_2",
                "iVar3": "result",
                "uVar4": "data_value",
                "iVar5": "data_index"
            },
            "code": "void update_data_00081014(int index, int value, undefined4 param_3)\\n{\\n  undefined *data_ptr_2 = PTR_DAT_00081080;\\n  undefined *data_ptr_1 = PTR_DAT_0008107c;\\n  if (data_ptr_1[index * 0x1c + 0xc] != \"\\0\") {\\n    if ((data_ptr_2[index] & 0xf) == 5) {\\n      FUN_00080f0c(index, 1, param_3, 5, index, value, param_3);\\n    }\\n    data_ptr_2[index] = data_ptr_2[index] & 0xf | (byte)(value << 4);\\n    int data_index = *(int *)(data_ptr_1 + index * 0x1c);\\n    undefined4 data_value = *(undefined4 *)(data_ptr_1 + index * 0x1c + 4);\\n    int result = FUN_00080a94(data_index, data_value);\\n    if (result == 0) {\\n      if (value != 0) {\\n        *(undefined4 *)(data_index + 100) = data_value;\\n        return;\\n      }\\n      *(undefined4 *)(data_index + 0x60) = data_value;\\n      return;\\n    }\\n    FUN_00080a0a(data_index, data_value, value, 0, 1);\\n  }\\n  return;\\n}",
            "called": [
                "FUN_00080a94",
                "FUN_00080a0a",
                "FUN_00080f0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081014",
            "calling": [
                "FUN_00080250",
                "FUN_0008044c",
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "update_data_00081014"
        },
        "FUN_000816ec": {
            "renaming": {
                "FUN_000816ec": "log_data_and_notify_000816ec",
                "param_1": "data",
                "param_2": "notification_bit",
                "param_3": "notification_data",
                "puVar1": "log_ptr",
                "uVar2": "log_index",
                "iVar3": "max_log_size",
                "uVar4": "bit_mask",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "PTR_DAT_000836d0": "max_log_size",
                "DAT_000836d4": "memory_allocation_flag",
                "PTR_DAT_00083652": "error_jump_table"
            },
            "code": "void log_data_and_notify_000816ec(uint32_t data, uint32_t notification_bit, uint32_t notification_data)\n{\n  uint32_t *log_ptr;\n  uint32_t log_index;\n  uint32_t *jump_table;\n  uint32_t PTR_DAT_000836d0 = *(uint32_t *)PTR_DAT_000836d0;\n  log_ptr = *(uint32_t **)(PTR_DAT_000836d0 + 0x148);\n  if (log_ptr == (uint32_t *)0x0) {\n    log_ptr = (uint32_t *)(PTR_DAT_000836d0 + 0x14c);\n    *(uint32_t **)(PTR_DAT_000836d0 + 0x148) = log_ptr;\n  }\n  log_index = log_ptr[1];\n  if (log_index > 31) {\n    if ((DAT_000836d4 == 0) ||\n       (log_ptr = (uint32_t *)allocate_memory(400), log_ptr == (uint32_t *)0x0)) {\n      jump_table = (uint32_t *)PTR_DAT_00083652;\n      jump_table(0xffffffff);\n      return;\n    }\n    *log_ptr = *(uint32_t *)(PTR_DAT_000836d0 + 0x148);\n    log_ptr[1] = 0;\n    log_index = 0;\n    *(uint32_t **)(PTR_DAT_000836d0 + 0x148) = log_ptr;\n    log_ptr[0x62] = 0;\n    log_ptr[99] = 0;\n  }\n  uint32_t bit_mask = 1 << (log_index & 0xff);\n  log_ptr[log_index + 0x22] = data;\n  log_ptr[0x62] = log_ptr[0x62] | bit_mask;\n  log_ptr[log_index + 0x42] = notification_data;\n  log_ptr[99] = bit_mask | log_ptr[99];\n  log_ptr[1] = log_index + 1;\n  log_ptr[log_index + 2] = notification_bit;\n  jump_table = (uint32_t *)PTR_DAT_00083696;\n  jump_table(0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816ec",
            "calling": [],
            "imported": false,
            "current_name": "log_data_and_notify_000816ec"
        },
        "FUN_00083ca8": {
            "renaming": {
                "FUN_00083ca8": "FUNC_00083ca8"
            },
            "code": "\nundefined4 FUNC_00083ca8(undefined4 *param_1,uint *param_2,uint **param_3)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  uint uVar4;\n  uint *puVar5;\n  uint *puVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint local_2c;\n  \n  if (param_3[2] != (uint *)0x0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar4 = (uint)uVar3;\n    if (((int)(uVar4 << 0x1c) < 0) && (param_2[4] != 0)) {\n      puVar6 = *param_3;\n      uVar2 = DAT_00083fb8;\n    }\n    else {\n      iVar1 = FUN_0008356c(param_1,param_2);\n      if (iVar1 != 0) {\n        return 0xffffffff;\n      }\n      uVar3 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar3;\n      puVar6 = *param_3;\n      uVar2 = DAT_00083fb8;\n    }\n    DAT_00083fb8 = uVar2;\n    if ((uVar3 & 2) == 0) {\n      uVar2 = uVar4 & 2;\n      uVar8 = uVar4 & 1;\n      uVar7 = uVar2;\n      uVar10 = uVar2;\n      local_2c = uVar2;\n      uVar9 = uVar8;\n      if (uVar8 == 0) {\n        while( true ) {\n          while (uVar8 == 0) {\n            uVar9 = *puVar6;\n            puVar5 = puVar6 + 1;\n            puVar6 = puVar6 + 2;\n            uVar8 = *puVar5;\n          }\n          uVar2 = param_2[2];\n          if ((int)(uVar4 << 0x16) < 0) {\n            if (uVar8 < uVar2) {\n              uVar4 = *param_2;\n              uVar2 = uVar8;\n            }\n            else if ((uVar4 & 0x480) == 0) {\n              uVar4 = *param_2;\n            }\n            else {\n              iVar1 = *param_2 - param_2[4];\n              uVar2 = iVar1 + 1 + uVar8;\n              uVar7 = (int)(param_2[5] * 3) / 2;\n              if (uVar2 <= uVar7) {\n                uVar2 = uVar7;\n              }\n              if ((int)(uVar4 << 0x15) < 0) {\n                uVar7 = FUNC_00081810(param_1,uVar2);\n                if (uVar7 == 0) {\n                  *param_1 = 0xc;\n                  uVar3 = *(ushort *)(param_2 + 3);\n                  goto LAB_00083da4;\n                }\n                FUN_00081d48(uVar7,param_2[4],iVar1);\n                *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                uVar7 = FUNC_00081fac(param_1);\n                if (uVar7 == 0) {\n                  FUN_00083b10(param_1,param_2[4]);\n                  uVar3 = *(ushort *)(param_2 + 3) & 0xff7f;\n                  *param_1 = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              uVar4 = uVar7 + iVar1;\n              param_2[4] = uVar7;\n              param_2[5] = uVar2;\n              *param_2 = uVar4;\n              param_2[2] = uVar2 - iVar1;\n              uVar2 = uVar8;\n            }\n            FUN_00081e34(uVar4,uVar9,uVar2);\n            param_2[2] = param_2[2] - uVar2;\n            *param_2 = *param_2 + uVar2;\n            uVar2 = uVar8;\n          }\n          else if ((param_2[4] < *param_2) || (uVar4 = param_2[5], uVar8 < uVar4)) {\n            if (uVar8 < uVar2) {\n              uVar2 = uVar8;\n            }\n            FUN_00081e34(*param_2,uVar9,uVar2);\n            uVar4 = param_2[2];\n            param_2[2] = uVar4 - uVar2;\n            *param_2 = *param_2 + uVar2;\n            if ((uVar4 - uVar2 == 0) && (iVar1 = FUN_00083850(param_1,param_2), iVar1 != 0))\n            goto LAB_00083da2;\n          }\n          else {\n            uVar2 = 0x7fffffff;\n            if (uVar8 < 0x7fffffff) {\n              uVar2 = uVar8;\n            }\n            uVar2 = (*(code *)param_2[9])(param_1,param_2[7],uVar9,(uVar2 / uVar4) * uVar4);\n            if ((int)uVar2 < 1) goto LAB_00083da2;\n          }\n          puVar5 = param_3[2];\n          uVar8 = uVar8 - uVar2;\n          param_3[2] = (uint *)((int)puVar5 - uVar2);\n          if ((uint *)((int)puVar5 - uVar2) == (uint *)0x0) break;\n          uVar4 = (uint)*(ushort *)(param_2 + 3);\n          uVar9 = uVar9 + uVar2;\n        }\n      }\n      else {\n        do {\n          while (uVar2 == 0) {\n            uVar10 = *puVar6;\n            uVar2 = puVar6[1];\n            local_2c = 0;\n            puVar6 = puVar6 + 2;\n          }\n          if (local_2c == 0) {\n            iVar1 = FUN_000840f8(uVar10,10,uVar2);\n            if (iVar1 == 0) {\n              uVar7 = uVar2 + 1;\n              local_2c = 1;\n            }\n            else {\n              uVar7 = (iVar1 + 1) - uVar10;\n              local_2c = 1;\n            }\n          }\n          uVar8 = *param_2;\n          uVar4 = uVar7;\n          if (uVar2 <= uVar7) {\n            uVar4 = uVar2;\n          }\n          uVar9 = param_2[5];\n          if ((param_2[4] < uVar8) && (uVar11 = param_2[2] + uVar9, (int)uVar11 < (int)uVar4)) {\n            FUN_00081e34(uVar8,uVar10,uVar11);\n            *param_2 = *param_2 + uVar11;\n            iVar1 = FUN_00083850(param_1,param_2);\n            if (iVar1 != 0) goto LAB_00083da2;\n          }\n          else if ((int)uVar4 < (int)uVar9) {\n            FUN_00081e34(uVar8,uVar10,uVar4);\n            param_2[2] = param_2[2] - uVar4;\n            *param_2 = uVar4 + *param_2;\n            uVar11 = uVar4;\n          }\n          else {\n            uVar11 = (*(code *)param_2[9])(param_1,param_2[7],uVar10,uVar9);\n            if ((int)uVar11 < 1) goto LAB_00083da2;\n          }\n          uVar7 = uVar7 - uVar11;\n          if ((uVar7 == 0) && (iVar1 = FUN_00083850(param_1,param_2), local_2c = uVar7, iVar1 != 0))\n          goto LAB_00083da2;\n          puVar5 = param_3[2];\n          uVar10 = uVar10 + uVar11;\n          uVar2 = uVar2 - uVar11;\n          param_3[2] = (uint *)((int)puVar5 - uVar11);\n        } while ((uint *)((int)puVar5 - uVar11) != (uint *)0x0);\n      }\n    }\n    else {\n      uVar7 = 0;\n      uVar4 = 0;\n      do {\n        while( true ) {\n          uVar10 = uVar4;\n          if (uVar2 <= uVar4) {\n            uVar10 = uVar2;\n          }\n          if (uVar4 != 0) break;\n          uVar7 = *puVar6;\n          uVar4 = puVar6[1];\n          puVar6 = puVar6 + 2;\n        }\n        iVar1 = (*(code *)param_2[9])(param_1,param_2[7],uVar7,uVar10);\n        if (iVar1 < 1) {\nLAB_00083da2:\n          uVar3 = *(ushort *)(param_2 + 3);\nLAB_00083da4:\n          *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n          return 0xffffffff;\n        }\n        puVar5 = param_3[2];\n        uVar7 = uVar7 + iVar1;\n        uVar4 = uVar4 - iVar1;\n        param_3[2] = (uint *)((int)puVar5 - iVar1);\n      } while ((uint *)((int)puVar5 - iVar1) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00083850",
                "FUN_0008356c",
                "FUN_000840f8",
                "FUN_00083b10",
                "FUN_00081fac",
                "FUN_00081d48",
                "FUN_00081e34",
                "FUN_00081810"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083ca8",
            "calling": [
                "FUN_00082824"
            ],
            "imported": false,
            "current_name": "FUNC_00083ca8"
        },
        "FUN_00081810": {
            "renaming": {
                "FUN_00081810": "FUNC_00081810"
            },
            "code": "\nint * FUNC_00081810(undefined4 *param_1,uint param_2)\n\n{\n  uint uVar1;\n  uint *puVar2;\n  undefined *puVar3;\n  int iVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  int iVar9;\n  int *piVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  int *piVar14;\n  uint uVar15;\n  int *piVar16;\n  uint uVar17;\n  uint uVar18;\n  \n  if (param_2 + 0xb < 0x17) {\n    uVar15 = 0x10;\n    if (0x10 < param_2) goto LAB_00081876;\n  }\n  else {\n    uVar15 = param_2 + 0xb & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_00081876:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n  }\n  do_nothing_00081f94(param_1);\n  uVar1 = DAT_00081b3c;\n  if (uVar15 < 0x1f8) {\n    iVar13 = *(int *)(DAT_00081b3c + uVar15 + 0xc);\n    if ((iVar13 != DAT_00081b3c + uVar15) ||\n       (iVar4 = iVar13 + 8, iVar13 = *(int *)(iVar13 + 0x14), iVar4 != iVar13)) {\n      iVar7 = *(int *)(iVar13 + 0xc);\n      iVar9 = (*(uint *)(iVar13 + 4) & 0xfffffffc) + iVar13;\n      uVar15 = *(uint *)(iVar9 + 4);\n      iVar4 = *(int *)(iVar13 + 8);\n      *(int *)(iVar4 + 0xc) = iVar7;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar9 + 4) = uVar15 | 1;\n      do_nothing_00081f98(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    uVar18 = (uVar15 >> 3) + 2;\n  }\n  else {\n    uVar18 = uVar15 >> 9;\n    if (uVar18 == 0) {\n      iVar4 = 0x7e;\n      iVar13 = 0x3f;\n    }\n    else if (uVar18 < 5) {\n      iVar13 = (uVar15 >> 6) + 0x38;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x15) {\n      iVar13 = uVar18 + 0x5b;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x55) {\n      iVar13 = (uVar15 >> 0xc) + 0x6e;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x155) {\n      iVar13 = (uVar15 >> 0xf) + 0x77;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x555) {\n      iVar13 = (uVar15 >> 0x12) + 0x7c;\n      iVar4 = iVar13 * 2;\n    }\n    else {\n      iVar4 = 0xfc;\n      iVar13 = 0x7e;\n    }\n    iVar7 = DAT_00081b3c + iVar4 * 4;\n    for (iVar4 = *(int *)(iVar7 + 0xc); iVar7 != iVar4; iVar4 = *(int *)(iVar4 + 0xc)) {\n      uVar18 = *(uint *)(iVar4 + 4) & 0xfffffffc;\n      iVar9 = uVar18 - uVar15;\n      if (0xf < iVar9) {\n        iVar13 = iVar13 + -1;\n        break;\n      }\n      if (-1 < iVar9) {\n        iVar7 = uVar18 + iVar4;\n        uVar15 = *(uint *)(iVar7 + 4);\n        iVar9 = *(int *)(iVar4 + 0xc);\n        iVar13 = *(int *)(iVar4 + 8);\n        *(int *)(iVar13 + 0xc) = iVar9;\n        *(int *)(iVar9 + 8) = iVar13;\n        *(uint *)(iVar7 + 4) = uVar15 | 1;\n        do_nothing_00081f98(param_1);\n        return (int *)(iVar4 + 8);\n      }\n    }\n    uVar18 = iVar13 + 1;\n  }\n  iVar13 = *(int *)(DAT_00081b3c + 0x10);\n  iVar4 = DAT_00081b3c + 8;\n  if (iVar13 == iVar4) {\n    uVar5 = *(uint *)(DAT_00081b3c + 4);\n  }\n  else {\n    uVar5 = *(uint *)(iVar13 + 4);\n    uVar6 = uVar5 & 0xfffffffc;\n    uVar8 = uVar6 - uVar15;\n    if (0xf < (int)uVar8) {\n      iVar7 = uVar15 + iVar13;\n      *(uint *)(iVar13 + 4) = uVar15 | 1;\n      *(int *)(uVar1 + 0x14) = iVar7;\n      *(int *)(uVar1 + 0x10) = iVar7;\n      *(int *)(iVar7 + 0xc) = iVar4;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar7 + 4) = uVar8 | 1;\n      *(uint *)(iVar7 + uVar8) = uVar8;\n      do_nothing_00081f98(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    *(int *)(DAT_00081b3c + 0x14) = iVar4;\n    *(int *)(uVar1 + 0x10) = iVar4;\n    if (-1 < (int)uVar8) {\n      *(uint *)(uVar6 + iVar13 + 4) = *(uint *)(uVar6 + iVar13 + 4) | 1;\n      do_nothing_00081f98(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    if (uVar6 < 0x200) {\n      iVar9 = uVar1 + (uVar5 & 0xfffffff8);\n      iVar7 = *(int *)(iVar9 + 8);\n      uVar5 = 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU) | *(uint *)(uVar1 + 4);\n      *(int *)(iVar13 + 8) = iVar7;\n      *(int *)(iVar13 + 0xc) = iVar9;\n      *(uint *)(uVar1 + 4) = uVar5;\n      *(int *)(iVar9 + 8) = iVar13;\n      *(int *)(iVar7 + 0xc) = iVar13;\n    }\n    else {\n      uVar8 = uVar5 >> 9;\n      if (uVar8 < 5) {\n        iVar9 = (uVar5 >> 6) + 0x38;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x15) {\n        iVar9 = uVar8 + 0x5b;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x55) {\n        iVar9 = (uVar5 >> 0xc) + 0x6e;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x155) {\n        iVar9 = (uVar5 >> 0xf) + 0x77;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x555) {\n        iVar9 = (uVar5 >> 0x12) + 0x7c;\n        iVar7 = iVar9 * 2;\n      }\n      else {\n        iVar7 = 0xfc;\n        iVar9 = 0x7e;\n      }\n      iVar7 = uVar1 + iVar7 * 4;\n      iVar12 = *(int *)(iVar7 + 8);\n      if (iVar12 == iVar7) {\n        uVar5 = *(uint *)(DAT_00081d44 + 4) | 1 << (iVar9 >> 2 & 0xffU);\n        *(uint *)(DAT_00081d44 + 4) = uVar5;\n        iVar9 = iVar12;\n      }\n      else {\n        do {\n          iVar9 = iVar12;\n          if ((*(uint *)(iVar12 + 4) & 0xfffffffc) <= uVar6) break;\n          iVar12 = *(int *)(iVar12 + 8);\n          iVar9 = iVar12;\n        } while (iVar7 != iVar12);\n        iVar12 = *(int *)(iVar9 + 0xc);\n        uVar5 = *(uint *)(uVar1 + 4);\n      }\n      *(int *)(iVar13 + 0xc) = iVar12;\n      *(int *)(iVar13 + 8) = iVar9;\n      *(int *)(iVar12 + 8) = iVar13;\n      *(int *)(iVar9 + 0xc) = iVar13;\n    }\n  }\n  uVar6 = 1 << ((int)uVar18 >> 2 & 0xffU);\n  if (uVar6 <= uVar5) {\n    if ((uVar5 & uVar6) == 0) {\n      uVar18 = uVar18 & 0xfffffffc;\n      do {\n        uVar6 = uVar6 << 1;\n        uVar18 = uVar18 + 4;\n      } while ((uVar5 & uVar6) == 0);\n    }\n    do {\n      piVar16 = (int *)(uVar1 + uVar18 * 8);\n      piVar14 = piVar16;\n      uVar5 = uVar18;\n      do {\n        for (piVar10 = (int *)piVar14[3]; piVar14 != piVar10; piVar10 = (int *)piVar10[3]) {\n          uVar8 = piVar10[1] & 0xfffffffc;\n          uVar17 = uVar8 - uVar15;\n          if (0xf < (int)uVar17) {\n            iVar9 = piVar10[2];\n            iVar13 = piVar10[3];\n            iVar7 = uVar15 + (int)piVar10;\n            piVar10[1] = uVar15 | 1;\n            *(int *)(iVar9 + 0xc) = iVar13;\n            *(int *)(iVar13 + 8) = iVar9;\n            *(int *)(uVar1 + 0x14) = iVar7;\n            *(int *)(uVar1 + 0x10) = iVar7;\n            *(int *)(iVar7 + 0xc) = iVar4;\n            *(int *)(iVar7 + 8) = iVar4;\n            *(uint *)(iVar7 + 4) = uVar17 | 1;\n            *(uint *)(iVar7 + uVar17) = uVar17;\n            do_nothing_00081f98(param_1);\n            return piVar10 + 2;\n          }\n          if (-1 < (int)uVar17) {\n            iVar13 = piVar10[2];\n            iVar4 = piVar10[3];\n            *(uint *)((int)piVar10 + uVar8 + 4) = *(uint *)((int)piVar10 + uVar8 + 4) | 1;\n            *(int *)(iVar13 + 0xc) = iVar4;\n            *(int *)(iVar4 + 8) = iVar13;\n            do_nothing_00081f98(param_1);\n            return piVar10 + 2;\n          }\n        }\n        uVar5 = uVar5 + 1;\n        piVar14 = piVar14 + 2;\n      } while ((uVar5 & 3) != 0);\n      do {\n        uVar8 = uVar18 & 3;\n        piVar14 = piVar16 + -2;\n        uVar18 = uVar18 - 1;\n        if (uVar8 == 0) {\n          uVar8 = *(uint *)(uVar1 + 4) & ~uVar6;\n          *(uint *)(uVar1 + 4) = uVar8;\n          goto LAB_00081c5e;\n        }\n        piVar16 = (int *)*piVar16;\n      } while (piVar16 == piVar14);\n      uVar8 = *(uint *)(uVar1 + 4);\nLAB_00081c5e:\n      uVar6 = uVar6 * 2;\n      if ((uVar8 <= uVar6 && uVar6 - uVar8 != 0) || (uVar18 = uVar5, uVar6 == 0)) break;\n      for (; (uVar8 & uVar6) == 0; uVar6 = uVar6 << 1) {\n        uVar18 = uVar18 + 4;\n      }\n    } while( true );\n  }\n  puVar2 = DAT_00081b44;\n  uVar18 = *(uint *)(uVar1 + 8);\n  uVar5 = *(uint *)(uVar18 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar5) && (uVar8 = uVar5 - uVar15, uVar6 = uVar18, 0xf < (int)uVar8))\n  goto LAB_00081b1a;\n  uVar8 = uVar18 + uVar5;\n  if (*DAT_00081b44 == 0xffffffff) {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00081b40 + 0x10;\n  }\n  else {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00081b40 + 0x100f & 0xfffff000;\n  }\n  uVar6 = FUN_0008236c(param_1,uVar17);\n  puVar3 = PTR_DAT_00081b50;\n  if ((uVar6 == 0xffffffff) || ((uVar6 < uVar8 && (uVar18 != uVar1)))) {\n    uVar6 = *(uint *)(uVar1 + 8);\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\n  else {\n    uVar11 = *(int *)PTR_DAT_00081b50 + uVar17;\n    *(uint *)PTR_DAT_00081b50 = uVar11;\n    if ((uVar8 == uVar6) && ((uVar8 & 0xfff) == 0)) {\n      *(uint *)(*(int *)(uVar1 + 8) + 4) = uVar17 + uVar5 | 1;\n    }\n    else {\n      if (*puVar2 == 0xffffffff) {\n        *DAT_00081b44 = uVar6;\n      }\n      else {\n        *(uint *)puVar3 = uVar11 + (uVar6 - uVar8);\n      }\n      uVar8 = uVar6 & 7;\n      if (uVar8 == 0) {\n        iVar13 = 0x1000;\n      }\n      else {\n        uVar6 = uVar6 + (8 - uVar8);\n        iVar13 = 0x1008 - uVar8;\n      }\n      iVar13 = iVar13 - (uVar17 + uVar6 & 0xfff);\n      iVar4 = FUN_0008236c(param_1,iVar13);\n      if (iVar4 == -1) {\n        uVar8 = 1;\n        iVar13 = 0;\n      }\n      else {\n        uVar8 = (iVar4 - uVar6) + iVar13 | 1;\n      }\n      uVar11 = *(int *)puVar3 + iVar13;\n      *(uint *)(uVar1 + 8) = uVar6;\n      *(uint *)puVar3 = uVar11;\n      *(uint *)(uVar6 + 4) = uVar8;\n      puVar3 = PTR_DAT_00081b50;\n      if (uVar18 != uVar1) {\n        if (uVar5 < 0x10) {\n          *(undefined4 *)(uVar6 + 4) = 1;\n          uVar18 = 0;\n          goto LAB_00081b04;\n        }\n        uVar5 = uVar5 - 0xc & 0xfffffff8;\n        *(uint *)(uVar18 + 4) = uVar5 | *(uint *)(uVar18 + 4) & 1;\n        *(undefined4 *)(uVar18 + uVar5 + 4) = 5;\n        *(undefined4 *)(uVar18 + uVar5 + 8) = 5;\n        if (0xf < uVar5) {\n          FUN_00083b10(param_1,uVar18 + 8);\n          uVar11 = *(uint *)puVar3;\n        }\n      }\n    }\n    uVar6 = *(uint *)(uVar1 + 8);\n    if (*(uint *)PTR_DAT_00081b48 < uVar11) {\n      *(uint *)PTR_DAT_00081b48 = uVar11;\n    }\n    if (*(uint *)PTR_DAT_00081b4c < uVar11) {\n      *(uint *)PTR_DAT_00081b4c = uVar11;\n    }\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\nLAB_00081b04:\n  uVar8 = uVar18 - uVar15;\n  if ((uVar18 < uVar15) || ((int)uVar8 < 0x10)) {\n    do_nothing_00081f98(param_1);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  *(uint *)(uVar6 + 4) = uVar15 | 1;\n  *(uint *)(uVar1 + 8) = uVar15 + uVar6;\n  *(uint *)(uVar15 + uVar6 + 4) = uVar8 | 1;\n  do_nothing_00081f98(param_1);\n  return (int *)(uVar6 + 8);\n}\n\n",
            "called": [
                "FUN_00081f98",
                "FUN_00081f94",
                "FUN_0008236c",
                "FUN_00083b10"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081810",
            "calling": [
                "FUN_000817f0",
                "FUN_00081fac",
                "FUN_00083ca8",
                "FUN_00084018"
            ],
            "imported": false,
            "current_name": "FUNC_00081810"
        },
        "FUN_000814ae": {
            "renaming": {
                "FUN_000814ae": "check_if_param1_is_zero_or_param2_is_greater_than_param1_1_000814ae",
                "param_1": "ptr_param1",
                "param_2": "param2",
                "iVar1": "ptr_param1_2"
            },
            "code": "int check_if_param1_is_zero_or_param2_is_greater_than_param1_1_000814ae(int *ptr_param1, uint param2) {\n  int result = 1;\n  if ((*ptr_param1 == 0) || ((uint)ptr_param1[1] < param2)) {\n    int ptr_param1_2 = FUN_00081496(ptr_param1);\n    if (ptr_param1_2 == 0) {\n      result = 0;\n    }\n    if (ptr_param1[2] == 0) {\n      *(undefined *)*ptr_param1 = 0;\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_00081496"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814ae",
            "calling": [
                "FUN_00081570",
                "FUN_000814d0"
            ],
            "imported": false,
            "current_name": "check_if_param1_is_zero_or_param2_is_greater_than_param1_1_000814ae"
        },
        "FUN_00081778": {
            "renaming": {
                "FUN_00081778": "execute_functions_from_array_00081778",
                "puVar1": "data_start",
                "puVar2": "data_end",
                "iVar3": "iteration_count",
                "ppcVar4": "function_pointer",
                "iVar5": "array_size"
            },
            "code": "void execute_functions_from_array_00081778(void) \\\n    {\\\n        code **function_array_end = (code **)PTR_DAT_000817b8;\\\n        code **function_array_start = (code **)PTR_DAT_000817bc;\\\n        int function_count = (int)(function_array_end - function_array_start) >> 2;\\\n        for (int i = 0; i < function_count; i++)\\\n        {\\\n            (**(function_array_start + i))();\\\n        }\\\n        undefined *data_end = PTR_DAT_000817c4;\\\n        undefined *data_start = PTR_LAB_000817c0;\\\n        do_nothing_00085844();\\\n        int data_count = (int)(data_start - data_end) >> 2;\\\n        for (int i = 0; i < data_count; i++)\\\n        {\\\n            (**(data_end + i))();\\\n        }\\\n    }",
            "called": [
                "FUN_00080118",
                "FUN_00085844",
                "FUN_000836d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081778",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "execute_functions_from_array_00081778"
        },
        "FUN_000800f4": {
            "renaming": {
                "FUN_000800f4": "check_if_initialized_000800f4",
                "param_1": "input_value",
                "*PTR_DAT_0008010c": "*PTR_DATA_FLAG",
                "DAT_00080110": "DATA_VALUE",
                "DAT_00080114": "DATA_STORE"
            },
            "code": "int check_if_initialized_000800f4(int input_value) {\\n  if (*PTR_DAT_0008010c == \"\\0\") {\\n    if (DAT_00080110 != 0) {\\n      input_value = DAT_00080114;\\n    }\\n    *PTR_DAT_0008010c = 1;\\n  }\\n  return input_value;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000800f4",
            "calling": [],
            "imported": false,
            "current_name": "check_if_initialized_000800f4"
        },
        "FUN_000810c4": {
            "renaming": {
                "FUN_000810c4": "execute_function_000810c4",
                "FUN_000810a6": "call_helper_function"
            },
            "code": "void execute_function_000810c4(void)\n{\n  call_helper_function();\n  return;\n}",
            "called": [
                "FUN_000810a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810c4",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "execute_function_000810c4"
        },
        "FUN_00080d30": {
            "renaming": {
                "FUN_00080d30": "update_param_00080d30",
                "param_1": "param_ptr",
                "param_2": "new_value",
                "param_3": "flag",
                "uint": "uint32_t",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void update_param_00080d30(uint32_t* param_ptr, uint32_t new_value, uint32_t flag)\n{\n    uint32_t* param_value_ptr = param_ptr + 1;\n    uint32_t current_value = *param_value_ptr;\n    uint32_t modified_value = new_value | current_value | ((flag & 1) << 7);\n    *param_value_ptr = modified_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d30",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "update_param_00080d30"
        },
        "FUN_00080c98": {
            "renaming": {
                "FUN_00080c98": "find_value_in_array_00080c98",
                "*param_1": "*output",
                "param_2": "input_length",
                "param_3": "param_3",
                "param_4": "param_4",
                "local_58": "array",
                "uVar1": "divisor",
                "uVar2": "i"
            },
            "code": "uint32_t find_value_in_array_00080c98(uint32_t *output, uint32_t input_length, int param_3, int param_4) {\n  uint32_t array[16];\n  for (int i = 0; i < 16; i++) {\n    array[i] = *(uint32_t *)(PTR_DAT_00080d28 + i * 4);\n  }\n  output[0] = 1;\n  output[1] = 0;\n  output[0x48] = 0x202;\n  output[0x41] = 0;\n  output[0x45] = 0;\n  uint32_t uVar1 = input_length / (uint32_t)(param_3 * 2);\n  if (input_length == param_3 * 2 * uVar1) {\n    uVar1 = uVar1 - 1;\n  }\n  for (int i = 0; i < 16; i++) {\n    if ((uint32_t)(param_4 * (int)(((uint64_t)input_length / (uint64_t)((uVar1 + 1) * 2)) / (uint64_t)DAT_00080d2c)) <= array[i]) {\n      output[1] = (i & 0xf) << 0x10 | (uVar1 & 0xff) << 8 | output[1];\n      return 0;\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c98",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "find_value_in_array_00080c98"
        },
        "FUN_00080eec": {
            "renaming": {
                "FUN_00080eec": "exit_with_status_00080eec",
                "param_1": "status_code",
                "FUN_000817c8": "exit",
                "PTR_s_Exiting_with_status__d__00080ef8": "N/A",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4"
            },
            "code": "void exit_with_status_00080eec(int status_code, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  exit(status_code);\n  do {\n    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}",
            "called": [
                "FUN_000817c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eec",
            "calling": [
                "FUN_000836ec"
            ],
            "imported": false,
            "current_name": "exit_with_status_00080eec"
        },
        "FUN_000811e8": {
            "renaming": {
                "FUN_000811e8": "calculate_result_000811e8",
                "param_1": "input_array",
                "iVar1": "current_value"
            },
            "code": "int calculate_result_000811e8(int *input_array)\n{\n  int current_value = thunk_get_current_value();\n  input_array[3] = current_value;\n  do {\n    current_value = (**(code **)(*input_array + 0xc))(input_array);\n    if (current_value >= 0) {\n      return current_value;\n    }\n    current_value = thunk_get_current_value();\n  } while ((uint)(current_value - input_array[3]) < (uint)input_array[2]);\n  return -1;\n}",
            "called": [
                "thunk_FUN_000816d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811e8",
            "calling": [
                "FUN_00081214"
            ],
            "imported": false,
            "current_name": "calculate_result_000811e8"
        },
        "FUN_000815e8": {
            "renaming": {
                "FUN_000815e8": "do_nothing_000815e8"
            },
            "code": "\nvoid do_nothing_000815e8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815e8",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "do_nothing_000815e8"
        },
        "FUN_000806f8": {
            "renaming": {
                "FUN_000806f8": "process_data_000806f8",
                "param_1": "input_data",
                "param_2": "data_length",
                "uVar1": "length",
                "FUN_0008145c": "calculate_length",
                "PTR_DAT_000806f4": "ptr_dat",
                "DAT_000806ec": "dat_1",
                "DAT_000806f0": "dat_2"
            },
            "code": "void process_data_000806f8(byte *input_data, uint data_length) {\n  uint length = data_length;\n  if (length < 544) {\n    if (length > 179) {\n      length = 180;\n    }\n    length = calculate_length(length & ~(length >> 31), 0, 180, (0x88 - (char)input_data[1]) * 4, (600 - (char)input_data[2]) * 4, length);\n  }\n  if (*input_data < 60) {\n    uint temp_length = (0x88 - (char)input_data[1]) * 4;\n    if (((int)(length + (0x88 - (char)input_data[1]) * -4) < 0 == SBORROW4(length,temp_length)) && (temp_length = (600 - (char)input_data[2]) * 4, (int)length <= (int)temp_length)) {\n      temp_length = length;\n    }\n    *(uint *)(PTR_DAT_000806f4 + (uint)*input_data * 8 + 4) = (*DAT_000806ec / DAT_000806f0) * (temp_length - 2) >> 5;\n  }\n  return;\n}",
            "called": [
                "FUN_0008145c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000806f8",
            "calling": [
                "FUN_00080164",
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "process_data_000806f8"
        },
        "FUN_00082390": {
            "renaming": {
                "FUN_00082390": "FUNC_00082390"
            },
            "code": "\nint FUNC_00082390(uint *param_1,uint *param_2)\n\n{\n  uint *puVar1;\n  int iVar2;\n  uint *puVar3;\n  uint *puVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  \n  if ((((uint)param_1 | (uint)param_2) & 7) != 0) {\n    puVar1 = param_1;\n    if (((uint)param_1 & 3) != 0) {\n      puVar1 = (uint *)((uint)param_1 & 0xfffffffc) + 1;\n      uVar5 = *(uint *)((uint)param_1 & 0xfffffffc);\n      puVar3 = param_2;\n      if (((uint)param_1 & 1) == 0) {\nLAB_00082410:\n        puVar4 = (uint *)((int)puVar3 + 1);\n        uVar6 = uVar5 >> 0x10 & 0xff;\n        iVar2 = uVar6 - *(byte *)puVar3;\n        if (iVar2 != 0) {\n          return iVar2;\n        }\n        if (uVar6 == 0) {\n          return 0;\n        }\n      }\n      else {\n        puVar4 = param_2;\n        if (((uint)param_1 & 2) == 0) {\n          puVar3 = (uint *)((int)param_2 + 1);\n          uVar6 = uVar5 >> 8 & 0xff;\n          iVar2 = uVar6 - *(byte *)param_2;\n          if (iVar2 != 0) {\n            return iVar2;\n          }\n          if (uVar6 == 0) {\n            return 0;\n          }\n          goto LAB_00082410;\n        }\n      }\n      param_2 = (uint *)((int)puVar4 + 1);\n      iVar2 = (uVar5 >> 0x18) - (uint)*(byte *)puVar4;\n      if ((iVar2 != 0) || (uVar5 >> 0x18 == 0)) {\n        return iVar2;\n      }\n    }\n    uVar5 = (uint)param_2 & 3;\n    if (uVar5 != 0) {\n      param_2 = (uint *)((uint)param_2 & 0xfffffffc);\n      if (uVar5 == 2) {\n        uVar5 = *param_2;\n        do {\n          param_2 = param_2 + 1;\n          uVar7 = *puVar1;\n          uVar5 = uVar5 >> 0x10;\n          uVar8 = uVar7 + 0xfefefeff & ~uVar7;\n          uVar9 = uVar8 & 0x80808080;\n          uVar6 = uVar7 & 0xffff;\n          if ((uVar8 & 0x8080) != 0 || uVar6 != uVar5) goto LAB_0008258e;\n          uVar5 = *param_2;\n          uVar6 = uVar6 ^ uVar7;\n          uVar7 = uVar5 * 0x10000;\n          puVar1 = puVar1 + 1;\n        } while (uVar9 == 0 && uVar6 == uVar7);\n      }\n      else if (uVar5 < 2) {\n        uVar5 = *param_2;\n        do {\n          param_2 = param_2 + 1;\n          uVar7 = *puVar1;\n          uVar5 = uVar5 >> 8;\n          uVar8 = uVar7 + 0xfefefeff & ~uVar7;\n          uVar9 = uVar8 & 0x80808080;\n          uVar6 = uVar7 & 0xffffff;\n          if ((uVar8 & 0x808080) != 0 || uVar6 != uVar5) goto LAB_0008258e;\n          uVar5 = *param_2;\n          uVar6 = uVar6 ^ uVar7;\n          uVar7 = uVar5 * 0x1000000;\n          puVar1 = puVar1 + 1;\n        } while (uVar9 == 0 && uVar6 == uVar7);\n      }\n      else {\n        uVar5 = *param_2;\n        do {\n          param_2 = param_2 + 1;\n          uVar7 = *puVar1;\n          uVar5 = uVar5 >> 0x18;\n          uVar8 = uVar7 + 0xfefefeff & ~uVar7;\n          uVar9 = uVar8 & 0x80808080;\n          uVar6 = uVar7 & 0xff;\n          if ((uVar8 & 0x80) != 0 || uVar6 != uVar5) goto LAB_0008258e;\n          uVar5 = *param_2;\n          uVar6 = uVar6 ^ uVar7;\n          uVar7 = uVar5 * 0x100;\n          puVar1 = puVar1 + 1;\n        } while (uVar9 == 0 && uVar6 == uVar7);\n      }\n      uVar6 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 |\n              uVar6 >> 0x18;\n      uVar5 = (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 | uVar7 >> 0x18;\n      goto LAB_0008259e;\n    }\n    param_1 = puVar1;\n    puVar3 = param_2;\n    if (((uint)puVar1 & 4) != 0) {\n      param_1 = puVar1 + 1;\n      uVar5 = *puVar1;\n      puVar3 = param_2 + 1;\n      uVar7 = *param_2;\n      uVar9 = uVar5 + 0xfefefeff & ~uVar5 & 0x80808080;\n      if (uVar5 != uVar7 || uVar9 != 0) {\nLAB_0008259a:\n        uVar6 = uVar5 << 0x18 | (uVar5 >> 8 & 0xff) << 0x10 | (uVar5 >> 0x10 & 0xff) << 8 |\n                uVar5 >> 0x18;\n        uVar5 = uVar7 << 0x18 | (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 |\n                uVar7 >> 0x18;\n        goto LAB_0008259e;\n      }\n    }\n    param_2 = puVar3;\n    if (((uint)puVar3 & 4) != 0) {\n      uVar5 = *puVar3;\n      puVar1 = puVar3 + 1;\n      do {\n        uVar6 = *param_1;\n        uVar7 = param_1[1];\n        uVar9 = uVar6 + 0xfefefeff & ~uVar6 & 0x80808080;\n        if (uVar6 != uVar5 || uVar9 != 0) goto LAB_0008258e;\n        uVar8 = *puVar1;\n        uVar5 = puVar1[1];\n        uVar9 = uVar7 + 0xfefefeff & ~uVar7 & 0x80808080;\n        param_1 = param_1 + 2;\n        puVar1 = puVar1 + 2;\n      } while (uVar7 == uVar8 && uVar9 == 0);\n      uVar6 = uVar7 << 0x18 | (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 |\n              uVar7 >> 0x18;\n      uVar5 = uVar8 << 0x18 | (uVar8 >> 8 & 0xff) << 0x10 | (uVar8 >> 0x10 & 0xff) << 8 |\n              uVar8 >> 0x18;\n      goto LAB_0008259e;\n    }\n  }\n  do {\n    uVar5 = *param_1;\n    uVar6 = param_1[1];\n    uVar7 = *param_2;\n    uVar8 = param_2[1];\n    uVar9 = uVar5 + 0xfefefeff & ~uVar5 & 0x80808080;\n    if (uVar5 != uVar7 || uVar9 != 0) goto LAB_0008259a;\n    uVar9 = uVar6 + 0xfefefeff & ~uVar6 & 0x80808080;\n    param_1 = param_1 + 2;\n    param_2 = param_2 + 2;\n  } while (uVar6 == uVar8 && uVar9 == 0);\n  uVar6 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 | uVar6 >> 0x18;\n  uVar5 = uVar8 << 0x18 | (uVar8 >> 8 & 0xff) << 0x10 | (uVar8 >> 0x10 & 0xff) << 8 | uVar8 >> 0x18;\nLAB_0008259e:\n  uVar7 = uVar9 << 0x18 | (uVar9 >> 8 & 0xff) << 0x10 | (uVar9 >> 0x10 & 0xff) << 8 | uVar9 >> 0x18;\n  if (uVar7 != 0) {\n    iVar2 = count_leading_zeroes(uVar7);\n    uVar6 = uVar6 >> (0x18U - iVar2 & 0xff);\n    uVar5 = uVar5 >> (0x18U - iVar2 & 0xff);\n  }\n  iVar2 = 1;\n  if (uVar6 <= uVar5) {\n    iVar2 = -(uint)(uVar6 < uVar5);\n  }\n  return iVar2;\nLAB_0008258e:\n  uVar6 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 | uVar6 >> 0x18;\n  uVar5 = uVar5 << 0x18 | (uVar5 >> 8 & 0xff) << 0x10 | (uVar5 >> 0x10 & 0xff) << 8 | uVar5 >> 0x18;\n  goto LAB_0008259e;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00082390",
            "calling": [
                "FUN_000815b8"
            ],
            "imported": false,
            "current_name": "FUNC_00082390"
        },
        "FUN_000810fc": {
            "renaming": {
                "FUN_000810fc": "convert_decimal_to_base_n_000810fc",
                "param_1": "input_number",
                "param_2": "base",
                "param_3": "output_buffer",
                "pcVar1": "output_ptr",
                "pcVar3": "output_ptr",
                "uVar2": "quotient",
                "uVar5": "remainder",
                "cVar4": "digit_char",
                "local_15": "output_buffer"
            },
            "code": "void convert_decimal_to_base_n_000810fc(const uint32_t input_number, uint32_t base, char* output_buffer)\n{\n    char* output_ptr = output_buffer;\n    char digit_char;\n    if (base < 2) {\n        base = 10;\n    }\n    do {\n        uint32_t quotient = input_number / base;\n        uint32_t remainder = input_number - base * quotient;\n        digit_char = (char)(remainder & 0xFF);\n        if (digit_char < 10) {\n            digit_char += '0';\n        }\n        else {\n            digit_char += '7';\n        }\n        *output_ptr++ = digit_char;\n        input_number = quotient;\n    } while (input_number != 0);\n    reverse_string(output_buffer, output_ptr - 1);\n}\n",
            "called": [
                "FUN_000810a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810fc",
            "calling": [
                "FUN_0008113a"
            ],
            "imported": false,
            "current_name": "convert_decimal_to_base_n_000810fc"
        },
        "FUN_00080250": {
            "renaming": {
                "FUN_00080250": "control_mode_switch_00080250",
                "puVar1": "ptr_undefined_1",
                "uVar2": "mode_val",
                "uVar3": "motor_val_temp",
                "iVar4": "counter",
                "puVar5": "ptr_undefined_2",
                "auStack_1c": "temp_stack",
                "PTR_DAT_000803bc": "mode",
                "PTR_DAT_000803c0": "ptr_toggle",
                "PTR_DAT_000803cc": "manual_mode",
                "PTR_DAT_000803c8": "ptr_control",
                "PTR_DAT_000803d4": "motor_val_ptr",
                "PTR_DAT_000803d8": "steer_val_ptr",
                "PTR_DAT_000803dc": "control_val",
                "PTR_DAT_000803e0": "motor_val",
                "PTR_DAT_000803e4": "steer_val",
                "PTR_DAT_000803e8": "autonomous_control_mode",
                "PTR_DAT_000803ec": "stack_1",
                "PTR_DAT_000803f0": "stack_2",
                "PTR_s_Entered_manual_control_mode__000803d0": "manual_control_mode",
                "PTR_s_Entered_autonomous_control_mode__000803e8": "autonomous_control_mode",
                "PTR_s_steer_000803f4": "steer_val_string",
                "PTR_s_motor_000803f8": "motor_val_string",
                "PTR_s_error_000803c4": "error_string"
            },
            "code": "void control_mode_switch_00080250(void)\n{\n    int counter = 0;\n    int *PTR_DAT_000803bc = PTR_DAT_000803bc;\n    int *PTR_DAT_000803cc = PTR_DAT_000803cc;\n    int *PTR_DAT_000803e0 = PTR_DAT_000803e0;\n    int *PTR_DAT_000803e4 = PTR_DAT_000803e4;\n    int PTR_DAT_000803e4_temp = 0;\n    int PTR_DAT_000803e0_temp = 0;\n\n    int PTR_DAT_000803bc_val = FUN_00081624(4, 1, 20000);\n    *PTR_DAT_000803bc = PTR_DAT_000803bc_val;\n    do_nothing_00080f08(10);\n    *PTR_DAT_000803c0 ^= 1;\n    FUN_00081014(0xd);\n\n    if (*PTR_DAT_000803bc < 0x641) {\n        if (*PTR_DAT_000803bc - 0x385U < 299) {\n            if (*PTR_DAT_000803cc != 0) {\n                FUN_00080164();\n                FUN_000810e8(PTR_DAT_000803c8, PTR_s_Entered_PTR_s_Entered_manual_control_PTR_DAT_000803bc__000803d0__000803d0);\n                *PTR_DAT_000803cc = 0;\n            }\n            do_nothing_00080f08(10);\n            int PTR_DAT_000803e4_temp = FUN_00081624(3, 1, 20000);\n            int PTR_DAT_000803e0_temp = FUN_0008145c(0, 1000, 2000, 0x28, 0x96);\n            *PTR_DAT_000803d4 = PTR_DAT_000803e0_temp;\n            *PTR_DAT_000803d8 = PTR_DAT_000803e4_temp;\n\n            while (counter = FUN_00081248(PTR_DAT_000803c8), counter > 0) {\n                FUN_00081276(PTR_DAT_000803c8);\n                thunk_FUN_0008113a(PTR_DAT_000803c8, *PTR_DAT_000803d4, 10);\n                FUN_000810c4(PTR_DAT_000803c8, PTR_DAT_000803dc);\n                FUN_0008117a(PTR_DAT_000803c8, *PTR_DAT_000803d8, 10);\n            }\n            FUN_000806f8(PTR_DAT_000803e0, *PTR_DAT_000803d8);\n            FUN_000806f8(PTR_DAT_000803e4, *PTR_DAT_000803d4);\n        }\n        else {\n            if (*PTR_DAT_000803cc == 0) {\n                FUN_00080164();\n                FUN_000810e8(PTR_DAT_000803c8, PTR_s_Entered_PTR_DAT_000803e8__000803e8);\n            }\n            *PTR_DAT_000803cc = 1;\n            while (counter = FUN_00081248(PTR_DAT_000803c8), counter > 0) {\n                FUN_00081214(auStack_1c, PTR_DAT_000803c8, 0x2c);\n                FUN_00081560(PTR_DAT_000803ec, auStack_1c);\n                FUNC_00081472(auStack_1c);\n                FUN_00081214(auStack_1c, PTR_DAT_000803c8, 10);\n                FUN_00081560(PTR_DAT_000803f0, auStack_1c);\n                FUNC_00081472(auStack_1c);\n                FUN_00081276(PTR_DAT_000803c8);\n                int PTR_DAT_000803e4_temp = FUN_000815b8(PTR_DAT_000803ec, PTR_s_steer_000803f4);\n                if (PTR_DAT_000803e4_temp != 0) {\n                    int PTR_DAT_000803e0_temp = FUN_000815de(PTR_DAT_000803f0);\n                    *PTR_DAT_000803e4 = PTR_DAT_000803e4_temp;\n                    *PTR_DAT_000803e0 = PTR_DAT_000803e0_temp;\n                }\n            }\n        }\n    }\n    else {\n        FUN_00080164();\n        FUN_000810e8(PTR_DAT_000803c8, PTR_s_error_000803c4);\n    }\n}\n",
            "called": [
                "FUN_0008145c",
                "FUN_00081276",
                "FUN_00081472",
                "FUN_00080f08",
                "FUN_00081014",
                "FUN_000815b8",
                "thunk_FUN_0008113a",
                "FUN_00081248",
                "FUN_00081214",
                "FUN_000810e8",
                "FUN_00080164",
                "FUN_0008117a",
                "FUN_000806f8",
                "FUN_000810c4",
                "FUN_000815de",
                "FUN_00081560",
                "FUN_00081624"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080250",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "control_mode_switch_00080250"
        },
        "FUN_00080d6a": {
            "renaming": {
                "FUN_00080d6a": "set_param_00080d6a",
                "param_1": "base_address",
                "param_2": "new_value",
                "*(undefined4 *)(param_1 + 0x28)": "*(int *)(base_address + 0x28)"
            },
            "code": "void set_param_00080d6a(int base_address, int new_value)\n{\n    *(int *)(base_address + 0x28) = new_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d6a",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "set_param_00080d6a"
        },
        "FUN_000813dc": {
            "renaming": {
                "FUN_000813dc": "set_up_device_000813dc",
                "param_1": "device_id",
                "param_2": "divisor",
                "puVar1": "DAT_000813d4",
                "iVar2": "device_2",
                "puVar3": "device_config",
                "DAT_000813d4": "DAT_000813d4",
                "DAT_000813d8": "DAT_000813d8"
            },
            "code": "void set_up_device_000813dc(uint device_id, uint divisor) {\n  uint *device_config = *(uint **)(device_id + 0x18);\n  device_config[0x48] = 0x202;\n  *device_config = 0xac;\n  uint *DAT_000813d4 = *(uint **)(0x000813d4);\n  device_config[1] = 0x800;\n  device_config[8] = *DAT_000813d4 / divisor >> 4;\n  device_config[3] = 0xffffffff;\n  device_config[2] = 0x61;\n  uint *data_register = *(uint **)(0x000813d8 + ((uint)(int)(char)*(byte *)(device_id + 0x1c) >> 5) * 4);\n  *data_register = 1 << (uint)(*(byte *)(device_id + 0x1c) & 0x1f);\n  int device_1 = *(int *)(device_id + 0x10);\n  *(uint *)(device_1 + 0x84) = 0;\n  *(uint *)(device_1 + 0x80) = 0;\n  int device_2 = *(int *)(device_id + 0x14);\n  *(uint *)(device_2 + 0x84) = 0;\n  *(uint *)(device_2 + 0x80) = 0;\n  *device_config = 0x50;\n}",
            "called": [
                "FUN_00080aa8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813dc",
            "calling": [
                "FUN_000801e0"
            ],
            "imported": false,
            "current_name": "set_up_device_000813dc"
        },
        "FUN_00080a0a": {
            "renaming": {
                "FUN_00080a0a": "update_param_values_00080a0a",
                "param_1": "param_array",
                "param_2": "new_value",
                "param_3": "has_third_param",
                "param_4": "has_fourth_param",
                "param_5": "has_fifth_param"
            },
            "code": "void update_param_values_00080a0a(int *param_array, int new_value, int has_third_param, int has_fourth_param, int has_fifth_param) {\n  param_array[17] = new_value;\n  if (has_fifth_param == 0) {\n    param_array[24] = new_value;\n  }\n  else {\n    param_array[25] = new_value;\n  }\n  if (has_fourth_param == 0) {\n    param_array[21] = new_value;\n  }\n  else {\n    param_array[20] = new_value;\n  }\n  if (has_third_param == 0) {\n    param_array[13] = new_value;\n  }\n  else {\n    param_array[12] = new_value;\n  }\n  param_array[4] = new_value;\n  *param_array = new_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a0a",
            "calling": [
                "FUN_00080a30",
                "FUN_00081014"
            ],
            "imported": false,
            "current_name": "update_param_values_00080a0a"
        },
        "FUN_00080b2c": {
            "renaming": {
                "FUN_00080b2c": "configure_tc_channel_00080b2c",
                "param_1": "channel_id",
                "param_2": "tc_config",
                "param_3": "channel_name",
                "uVar3": "tc_channel_address",
                "PTR_s_TC_Configure_00080b58": "DEFAULT_TC_CHANNEL_NAME",
                "DAT_00080b60": "tc_configure_function",
                "PTR_s____source_tc_c_00080b54": "DEFAULT_TC_SOURCE",
                "PTR_s_dwChannel____sizeof__pTc__TC_CHA_00080b5c": "sizeof(TC_CHANNEL)",
                "iVar1": "offset",
                "iVar2": "channel_address"
            },
            "code": "void configure_tc_channel_00080b2c(uint32_t channel_id, uint32_t tc_config, char *channel_name) {\n  uint64_t uVar1 = ((uint64_t)tc_config << 32) | channel_id;\n  if (tc_config > 2) {\n    channel_name = PTR_s_TC_Configure_00080b58;\n    uVar1 = (*DAT_00080b60)(PTR_s____source_tc_c_00080b54, 0x40, PTR_s_TC_Configure_00080b58, PTR_s_dwChannel____sizeof__pTc__TC_CHA_00080b5c);\n  }\n  int offset = (int)(uVar1 >> 0x20) * 0x40;\n  int channel_address = (int)uVar1 + offset;\n  *(uint32_t *)(channel_address) = 2;\n  *(uint32_t *)(channel_address + 0x28) = 0xffffffff;\n  *(char **)(channel_address + 4) = channel_name;\n}",
            "called": [
                "FUN_000816f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b2c",
            "calling": [
                "FUN_000803fc"
            ],
            "imported": false,
            "current_name": "configure_tc_channel_00080b2c"
        },
        "FUN_00080774": {
            "renaming": {
                "FUN_00080774": "initialize_system_00080774",
                "puVar1": "system_time_ptr",
                "puVar2": "system_settings_ptr",
                "iVar3": "device_settings",
                "iVar4": "device_count",
                "iVar5": "device_address",
                "iVar6": "device_settings_address",
                "iVar7": "device_index",
                "iVar8": "device_type",
                "DAT_00080878": "system_time_address",
                "DAT_0008087c": "system_settings_address",
                "DAT_00080884": "device_settings_address + 0x84",
                "DAT_00080888": "device_settings_address + 0x88",
                "DAT_0008088c": "device_settings_address + 0x8c",
                "DAT_00080890": "device_settings_address + 0x90",
                "DAT_00080894": "device_settings_address + 0x94",
                "DAT_00080898": "device_settings_address + 0x98"
            },
            "code": "void initialize_system_00080774(void)\n{\n    uint *system_time_ptr;\n    undefined4 *system_settings_ptr;\n    int i;\n    int device_count;\n    int device_index;\n    int device_type;\n    int device_address;\n    int device_settings;\n    \n    system_time_ptr = DAT_00080878;\n    initialize_time();\n    system_settings_ptr = DAT_0008087c;\n    DAT_0008087c[1] = *system_time_ptr / 1000 - 1;\n    *(undefined *)(DAT_0008087c + 0x23) = 0xf0;\n    system_settings_ptr[2] = 0;\n    *system_settings_ptr = 7;\n    initialize_devices();\n    device_index = 0;\n    do {\n        device_type = device_index + 1;\n        initialize_device(device_index, 0);\n        device_settings = device_settings_address;\n        device_address = device_address_address;\n        device_count = device_count_address;\n        device_index = device_type;\n    } while (device_type != 0x4f);\n    *(undefined4 *)(device_count + 0xa0) = 0xffffffff;\n    *(undefined4 *)(device_address + 0xa0) = 0xffffffff;\n    *(undefined4 *)(device_settings + 0xa0) = 0xffffffff;\n    *(undefined4 *)(DAT_0008088c) = 0xffffffff;\n    initialize_device_settings(device_count, 1, 0x300, 0);\n    initialize_device(device_index, 1);\n    initialize_device_settings(device_count, 1, 0xc00, 0);\n    initialize_device_settings(device_count, 1, 0x3000, 0);\n    initialize_device_settings(device_address, 2, 0x30, 0);\n    initialize_device_settings(device_settings, 1, 0xc00, 0);\n    initialize_device_settings(device_count, 1, 3, 0);\n    initialize_device_settings(device_settings, 1, 0xc000, 0);\n    initialize_device(0x25);\n    initialize_device_settings(device_settings_address, system_time_ptr, DAT_00080894, 0xc);\n    initialize_device_settings(device_settings_address, 0, 0x300000, 1);\n    initialize_device_settings(device_settings_address, 0, 0);\n    initialize_device_settings(device_settings_address, 0xffffffff);\n    initialize_device_settings(device_settings_address);\n}\n",
            "called": [
                "FUN_00080a30",
                "FUN_00080aa8",
                "FUN_00080d30",
                "FUN_00081778",
                "FUN_00081014",
                "FUN_00080b98",
                "FUN_00080d3e",
                "FUN_00080d6a",
                "FUN_00080d62",
                "FUN_00080c98"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080774",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "initialize_system_00080774"
        },
        "FUN_00080ec2": {
            "renaming": {
                "FUN_00080ec2": "function_returning_zero_00080ec2"
            },
            "code": "\nint32_t function_returning_zero_00080ec2(void)\n{\n    return 0;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ec2",
            "calling": [
                "FUN_00084508"
            ],
            "imported": false,
            "current_name": "function_returning_zero_00080ec2"
        },
        "FUN_00083888": {
            "renaming": {
                "FUN_00083888": "initialize_structures_00083888",
                "param_1": "struct_ptr",
                "puVar1": "ptr1",
                "uVar2": "val2",
                "puVar3": "ptr5",
                "puVar4": "ptr4",
                "puVar5": "main_struct",
                "puVar6": "sub_struct1"
            },
            "code": "void initialize_structures_00083888(int param_1)\n{\n  if (*(int *)(param_1 + 0x38) == 0) {\n    undefined4 *main_struct = *(undefined4 **)(param_1 + 4);\n    undefined *ptr1 = PTR_LAB_0008387c_1_00083968;\n    undefined4 val1 = 3;\n    int *ptr2 = (int *)(param_1 + 0x2e8);\n    undefined4 val2 = 0;\n    undefined2 *ptr3 = (undefined2 *)(main_struct + 3);\n    *main_struct = 0;\n    main_struct[1] = 0;\n    main_struct[2] = 0;\n    main_struct[0x19] = 0;\n    *(undefined2 *)((int)main_struct + 0xe) = 0;\n    main_struct[4] = 0;\n    main_struct[5] = 0;\n    main_struct[6] = 0;\n    FUN_00081f00(main_struct + 0x17,0,8);\n    undefined *ptr4 = PTR_LAB_0008429c_1_00083978;\n    undefined *ptr5 = PTR_FUN_0008427c_1_00083974;\n    undefined4 val3 = DAT_00083970;\n    undefined *ptr6 = PTR_FUN_00084220_1_0008396c;\n    undefined4 *sub_struct1 = *(undefined4 **)(param_1 + 8);\n    main_struct[7] = main_struct;\n    main_struct[8] = ptr6;\n    main_struct[9] = val3;\n    main_struct[10] = ptr5;\n    main_struct[0xb] = ptr4;\n    *(undefined2 *)((int)sub_struct1 + 0xe) = 1;\n    *(undefined2 *)(sub_struct1 + 3) = 9;\n    *sub_struct1 = 0;\n    sub_struct1[1] = 0;\n    sub_struct1[2] = 0;\n    sub_struct1[0x19] = 0;\n    sub_struct1[4] = 0;\n    sub_struct1[5] = 0;\n    sub_struct1[6] = 0;\n    FUN_00081f00(sub_struct1 + 0x17,0,8);\n    undefined4 *sub_struct2 = *(undefined4 **)(param_1 + 0xc);\n    sub_struct1[7] = sub_struct1;\n    sub_struct1[8] = ptr6;\n    sub_struct1[9] = val3;\n    sub_struct1[10] = ptr5;\n    sub_struct1[0xb] = ptr4;\n    *(undefined2 *)(sub_struct2 + 3) = 0x12;\n    *(undefined2 *)((int)sub_struct2 + 0xe) = 2;\n    *sub_struct2 = 0;\n    sub_struct2[1] = 0;\n    sub_struct2[2] = 0;\n    sub_struct2[0x19] = 0;\n    sub_struct2[4] = 0;\n    sub_struct2[5] = 0;\n    sub_struct2[6] = 0;\n    FUN_00081f00(sub_struct2 + 0x17,0,8);\n    sub_struct1[7] = sub_struct1;\n    sub_struct1[8] = ptr6;\n    sub_struct1[9] = val3;\n    sub_struct1[10] = ptr5;\n    sub_struct1[0xb] = ptr4;\n    *(undefined4 *)(param_1 + 0x38) = 1;\n  }\n  return;\n}",
            "called": [
                "FUN_00081f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083888",
            "calling": [
                "FUN_00083850",
                "FUN_0008289c",
                "FUN_0008356c",
                "FUN_00084484",
                "FUN_000842a4"
            ],
            "imported": false,
            "current_name": "initialize_structures_00083888"
        },
        "FUN_00081348": {
            "renaming": {
                "FUN_00081348": "initialize_params_00081348",
                "param_1": "params",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "param_5",
                "param_6": "param_6",
                "puVar1": "PTR_PTR_FUN_000812b8_1_00081368"
            },
            "code": "void initialize_params_00081348(int *params, int param_2, char param_3, int param_4, int param_5, int param_6) {\n  params[0] = (int)&PTR_PTR_FUN_000812b8_1_00081368;\n  params[1] = 0;\n  params[2] = 1000;\n  params[3] = param_5;\n  params[4] = param_4;\n  *(char *)(params + 7) = param_3;\n  params[5] = param_6;\n  params[6] = param_2;\n  params[7] = 0;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081348",
            "calling": [
                "FUN_00081438",
                "FUN_0008089c"
            ],
            "imported": false,
            "current_name": "initialize_params_00081348"
        },
        "FUN_00081624": {
            "renaming": {
                "FUN_00081624": "calculate_result_00081624",
                "param_1": "index",
                "param_2": "flag",
                "param_3": "multiplier",
                "param_4": "constant",
                "puVar1": "data_pointer",
                "iVar2": "result",
                "uVar3": "value"
            },
            "code": "int calculate_result_00081624(int index, int flag, int multiplier, undefined4 constant) {\n    uint *data_pointer;\n    int result;\n    undefined4 value;\n    \n    data_pointer = DAT_0008167c;\n    value = *(undefined4 *)(PTR_DAT_00081678 + index * 0x1c + 4);\n    if (flag == 0) {\n        value = 0;\n    }\n    result = FUN_00081684(\n        *(int *)(PTR_DAT_00081678 + index * 0x1c) + 0x3c,\n        *(undefined4 *)(PTR_DAT_00081678 + index * 0x1c + 4),\n        value,\n        ((*DAT_0008167c / DAT_00081680) * multiplier) / 0x12,\n        constant\n    );\n    if (result != 0) {\n        result = (int)((ulonglong)(result * 18000 + 16000) / ((ulonglong)*data_pointer / 1000));\n    }\n    return result;\n}",
            "called": [
                "FUN_00081684"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081624",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "calculate_result_00081624"
        },
        "FUN_00080ec8": {
            "renaming": {
                "FUN_00080ec8": "reverse_copy_string_00080ec8",
                "param_1": "memory_address",
                "param_2": "source_offset",
                "param_3": "string_length",
                "iVar1": "current_offset"
            },
            "code": "uint reverse_copy_string_00080ec8(undefined4 memory_address, int source_offset, uint string_length) {\n  int current_offset;\n  for (current_offset = 0; current_offset < (int)string_length; current_offset++) {\n    do {\n    } while (-1 < *(int *)(DAT_00080ee8 + 0x14) << 0x1e);\n    *(uint *)(DAT_00080ee8 + 0x1c) = (uint)*(byte *)(source_offset + current_offset);\n  }\n  return string_length & ~((int)string_length >> 0x1f);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ec8",
            "calling": [
                "FUN_00084244"
            ],
            "imported": false,
            "current_name": "reverse_copy_string_00080ec8"
        },
        "FUN_0008117a": {
            "renaming": {
                "FUN_0008117a": "add_result_of_two_functions_0008117a",
                "param_1": "input_parameter",
                "FUN_0008113a": "calculate_first_function",
                "FUN_000810d8": "calculate_second_function",
                "iVar1": "first_function_result",
                "iVar2": "second_function_result"
            },
            "code": "int add_result_of_two_functions_0008117a(int input_parameter)\n{\n  int first_function_result = calculate_first_function();\n  int second_function_result = calculate_second_function(input_parameter);\n  return second_function_result + first_function_result;\n}",
            "called": [
                "FUN_0008113a",
                "FUN_000810d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008117a",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "add_result_of_two_functions_0008117a"
        },
        "FUN_000801e0": {
            "renaming": {
                "FUN_000801e0": "check_input_and_trigger_000801e0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "FUN_000813dc": "check_input",
                "FUN_00080f0c": "trigger_action",
                "FUN_000806a0": "execute_action",
                "FUN_00080164": "validate_input",
                "do_nothing_00080f08": "wait_for",
                "PTR_DAT_00080244": "input_ptr",
                "PTR_DAT_00080248": "action_ptr_1",
                "PTR_DAT_0008024c": "action_ptr_2",
                "PTR_DAT_00080160": "validation_ptr",
                "software_interrupt": "raise_interrupt"
            },
            "code": "int check_input_and_trigger_000801e0(unsigned int input_1, unsigned int input_2, unsigned int input_3, unsigned int input_4)\n{\n  // Check input and trigger function\n  check_input(PTR_DAT_00080244, 0xe100, input_3, input_4, input_4);\n  \n  // Trigger specific actions\n  trigger_action(0xd, 1);\n  trigger_action(6, 1);\n  trigger_action(0x39, 0);\n  trigger_action(4, 0);\n  trigger_action(3, 0);\n  trigger_action(2, 0);\n  \n  // Execute additional actions\n  execute_action(PTR_DAT_00080248, 5);\n  execute_action(PTR_DAT_0008024c, 6);\n  \n  // Check if input is valid\n  validate_input();\n  \n  // Wait for a period of time\n  wait_for(1000);\n  \n  // Return 1 if input is invalid, 0 otherwise\n  if (*(int *)PTR_DAT_00080160 == 0) {\n    raise_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_00080f08",
                "FUN_00080164",
                "FUN_000806a0",
                "FUN_000813dc",
                "FUN_00080f0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000801e0",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "check_input_and_trigger_000801e0"
        },
        "FUN_000811b0": {
            "renaming": {
                "FUN_000811b0": "initialize_buffer_000811b0",
                "param_1": "buffer_address",
                "FUN_00081f00": "set_to_zero",
                "PTR_": "PTR_ (unchanged)",
                "DAT_": "DAT_ (unchanged)"
            },
            "code": "int initialize_buffer_000811b0(int buffer_address)\n{\n    set_to_zero(buffer_address, 0, 0x80);\n    *(int *)(buffer_address + 0x80) = 0;\n    *(int *)(buffer_address + 0x84) = 0;\n    return buffer_address;\n}",
            "called": [
                "FUN_00081f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811b0",
            "calling": [
                "FUN_0008089c"
            ],
            "imported": false,
            "current_name": "initialize_buffer_000811b0"
        },
        "FUN_000817f0": {
            "renaming": {
                "FUN_000817f0": "call_func_with_param_000817f0",
                "param_1": "param",
                "FUNC_00081810": "func_ptr",
                "*DAT_000817fc": "func_ptr"
            },
            "code": "void call_func_with_param_000817f0(void* *DAT_000817fc, undefined4 param){\n  *DAT_000817fc(param);\n  return;\n}",
            "called": [
                "FUN_00081810"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000817f0",
            "calling": [
                "FUN_000836ec"
            ],
            "imported": false,
            "current_name": "call_func_with_param_000817f0"
        },
        "FUN_0008145c": {
            "renaming": {
                "FUN_0008145c": "calculate_new_value_0008145c",
                "param_1": "current_value",
                "param_2": "previous_value",
                "param_3": "upper_bound",
                "param_4": "lower_bound",
                "param_5": "new_upper_bound",
                "uint": "unsigned_integer",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int calculate_new_value_0008145c(int current_value, int previous_value, int upper_bound, int lower_bound, int new_upper_bound) {\n    int numerator = (current_value - previous_value) * (new_upper_bound - lower_bound);\n    int denominator = (upper_bound - previous_value);\n    int result = numerator / denominator + lower_bound;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008145c",
            "calling": [
                "FUN_00080250",
                "FUN_000806f8"
            ],
            "imported": false,
            "current_name": "calculate_new_value_0008145c"
        },
        "FUN_00081f94": {
            "renaming": {
                "FUN_00081f94": "do_nothing_00081f94"
            },
            "code": "\nvoid do_nothing_00081f94(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f94",
            "calling": [
                "FUN_00083a74",
                "FUN_00083b10",
                "FUN_00081fac",
                "FUN_00081810"
            ],
            "imported": false,
            "current_name": "do_nothing_00081f94"
        },
        "FUN_00080eba": {
            "renaming": {
                "FUN_00080eba": "return_one_00080eba"
            },
            "code": "int return_one_00080eba(void)\n{\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eba",
            "calling": [
                "FUN_000844bc"
            ],
            "imported": false,
            "current_name": "return_one_00080eba"
        },
        "FUN_00081f98": {
            "renaming": {
                "FUN_00081f98": "do_nothing_00081f98"
            },
            "code": "\nvoid do_nothing_00081f98(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f98",
            "calling": [
                "FUN_00083a74",
                "FUN_00083b10",
                "FUN_00081fac",
                "FUN_00081810"
            ],
            "imported": false,
            "current_name": "do_nothing_00081f98"
        },
        "FUN_00081fac": {
            "renaming": {
                "FUN_00081fac": "FUNC_00081fac"
            },
            "code": "\nint * FUNC_00081fac(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  int iVar1;\n  int *piVar2;\n  uint uVar3;\n  int iVar4;\n  uint uVar5;\n  int *piVar6;\n  uint uVar7;\n  uint uVar8;\n  int *piVar9;\n  int iVar10;\n  \n  if (param_2 == (int *)0x0) {\n    piVar2 = (int *)FUNC_00081810(param_1,param_3);\n    return piVar2;\n  }\n  do_nothing_00081f94();\n  iVar4 = DAT_00082368;\n  uVar5 = param_2[-1];\n  uVar7 = uVar5 & 0xfffffffc;\n  piVar2 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar8 = 0x10;\n  }\n  else {\n    uVar8 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar8 < 0) goto LAB_00082078;\n  }\n  if (uVar8 < param_3) {\nLAB_00082078:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)uVar7 < (int)uVar8) {\n    iVar1 = (int)piVar2 + uVar7;\n    iVar10 = *(int *)(DAT_00082368 + 8);\n    if (iVar10 == iVar1) {\n      uVar3 = *(uint *)(iVar10 + 4) & 0xfffffffc;\n      iVar1 = iVar10;\n      if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar7)) {\n        *(uint *)(DAT_00082368 + 8) = (int)piVar2 + uVar8;\n        *(uint *)((int)piVar2 + uVar8 + 4) = (uVar3 + uVar7) - uVar8 | 1;\n        param_2[-1] = uVar8 | param_2[-1] & 1U;\n        do_nothing_00081f98(param_1);\n        return param_2;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(iVar1 + 4) & 0xfffffffe) + iVar1 + 4) & 1) == 0) {\n      uVar3 = *(uint *)(iVar1 + 4) & 0xfffffffc;\n      if ((int)uVar8 <= (int)(uVar3 + uVar7)) {\n        iVar10 = *(int *)(iVar1 + 0xc);\n        iVar4 = *(int *)(iVar1 + 8);\n        *(int *)(iVar4 + 0xc) = iVar10;\n        *(int *)(iVar10 + 8) = iVar4;\n        uVar7 = uVar3 + uVar7;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      uVar3 = 0;\n      iVar1 = 0;\n    }\n    if (-1 < (int)(uVar5 << 0x1f)) {\n      piVar9 = (int *)((int)piVar2 - param_2[-2]);\n      uVar5 = (piVar9[1] & 0xfffffffcU) + uVar7;\n      if (iVar1 != 0) {\n        if (iVar1 == iVar10) {\n          if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar5)) {\n            piVar2 = piVar9 + 2;\n            iVar1 = *piVar2;\n            iVar10 = piVar9[3];\n            uVar7 = uVar7 - 4;\n            *(int *)(iVar1 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar1;\n            if (uVar7 < 0x25) {\n              piVar6 = piVar2;\n              if (0x13 < uVar7) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar7 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar6 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar7 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar6 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar6;\n                    piVar6 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar6 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar6 = *param_2;\n              piVar6[1] = param_2[1];\n              piVar6[2] = param_2[2];\n            }\n            else {\n              FUN_00081e34(piVar2,param_2);\n            }\n            *(uint *)(iVar4 + 8) = (int)piVar9 + uVar8;\n            *(uint *)((int)piVar9 + uVar8 + 4) = (uVar3 + uVar5) - uVar8 | 1;\n            piVar9[1] = uVar8 | piVar9[1] & 1U;\n            do_nothing_00081f98(param_1);\n            return piVar2;\n          }\n        }\n        else {\n          uVar3 = uVar3 + uVar5;\n          if ((int)uVar8 <= (int)uVar3) {\n            iVar10 = *(int *)(iVar1 + 0xc);\n            iVar4 = *(int *)(iVar1 + 8);\n            *(int *)(iVar4 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar4;\n            piVar6 = piVar9 + 2;\n            iVar4 = *piVar6;\n            iVar1 = piVar9[3];\n            uVar5 = uVar7 - 4;\n            *(int *)(iVar4 + 0xc) = iVar1;\n            *(int *)(iVar1 + 8) = iVar4;\n            uVar7 = uVar3;\n            if (uVar5 < 0x25) {\n              piVar2 = piVar6;\n              if (0x13 < uVar5) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar2 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar5 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar2 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar2;\n                    piVar2 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar2 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar2 = *param_2;\n              piVar2[1] = param_2[1];\n              piVar2[2] = param_2[2];\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            else {\n              FUN_00081e34(piVar6,param_2);\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)uVar8 <= (int)uVar5) {\n        piVar6 = piVar9 + 2;\n        iVar4 = *piVar6;\n        iVar1 = piVar9[3];\n        uVar3 = uVar7 - 4;\n        *(int *)(iVar4 + 0xc) = iVar1;\n        *(int *)(iVar1 + 8) = iVar4;\n        uVar7 = uVar5;\n        if (uVar3 < 0x25) {\n          piVar2 = piVar6;\n          if (0x13 < uVar3) {\n            piVar9[2] = *param_2;\n            piVar9[3] = param_2[1];\n            if (uVar3 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar2 = piVar9 + 4;\n            }\n            else {\n              piVar9[4] = param_2[2];\n              piVar9[5] = param_2[3];\n              if (uVar3 == 0x24) {\n                piVar9[6] = param_2[4];\n                piVar2 = param_2 + 5;\n                param_2 = param_2 + 6;\n                piVar9[7] = *piVar2;\n                piVar2 = piVar9 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar2 = piVar9 + 6;\n              }\n            }\n          }\n          *piVar2 = *param_2;\n          piVar2[1] = param_2[1];\n          piVar2[2] = param_2[2];\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        else {\n          FUN_00081e34(piVar6,param_2);\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        goto LAB_00082088;\n      }\n    }\n    piVar9 = (int *)FUNC_00081810(param_1,param_3);\n    if (piVar9 == (int *)0x0) goto LAB_000820a0;\n    uVar5 = param_2[-1];\n    if (piVar9 + -2 != (int *)((uVar5 & 0xfffffffe) + (int)piVar2)) {\n      uVar7 = uVar7 - 4;\n      if (uVar7 < 0x25) {\n        piVar2 = param_2;\n        piVar6 = piVar9;\n        if (0x13 < uVar7) {\n          *piVar9 = *param_2;\n          piVar9[1] = param_2[1];\n          if (uVar7 < 0x1c) {\n            piVar2 = param_2 + 2;\n            piVar6 = piVar9 + 2;\n          }\n          else {\n            piVar9[2] = param_2[2];\n            piVar9[3] = param_2[3];\n            if (uVar7 == 0x24) {\n              piVar9[4] = param_2[4];\n              piVar9[5] = param_2[5];\n              piVar2 = param_2 + 6;\n              piVar6 = piVar9 + 6;\n            }\n            else {\n              piVar2 = param_2 + 4;\n              piVar6 = piVar9 + 4;\n            }\n          }\n        }\n        *piVar6 = *piVar2;\n        piVar6[1] = piVar2[1];\n        piVar6[2] = piVar2[2];\n      }\n      else {\n        FUN_00081e34(piVar9,param_2);\n      }\n      FUN_00083b10(param_1,param_2);\n      goto LAB_000820a0;\n    }\n    uVar7 = uVar7 + (piVar9[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  uVar3 = uVar7 - uVar8;\n  piVar9 = param_2;\n  if (uVar3 < 0x10) {\n    piVar2[1] = uVar5 & 1 | uVar7;\n    *(uint *)((int)piVar2 + uVar7 + 4) = *(uint *)((int)piVar2 + uVar7 + 4) | 1;\n  }\n  else {\n    piVar2[1] = uVar5 & 1 | uVar8;\n    *(uint *)((int)piVar2 + uVar8 + 4) = uVar3 | 1;\n    *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) = *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) | 1;\n    FUN_00083b10(param_1,(int)piVar2 + uVar8 + 8);\n  }\nLAB_000820a0:\n  do_nothing_00081f98(param_1);\n  return piVar9;\n}\n\n",
            "called": [
                "FUN_00081f98",
                "FUN_00081f94",
                "FUN_00083b10",
                "FUN_00081e34",
                "FUN_00081810"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081fac",
            "calling": [
                "FUN_00081f9c",
                "FUN_00083ca8"
            ],
            "imported": false,
            "current_name": "FUNC_00081fac"
        },
        "FUN_00081190": {
            "renaming": {
                "FUN_00081190": "decrement_and_call_if_zero_00081190",
                "iVar1": "count"
            },
            "code": "void decrement_and_call_if_zero_00081190(void)\n{\n  int count = *DAT_000811a8;\n  if ((count != -1) && (--count == 0)) {\n    (*DAT_000811ac)();\n  }\n  *DAT_000811a8 = count;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081190",
            "calling": [],
            "imported": false,
            "current_name": "decrement_and_call_if_zero_00081190"
        },
        "FUN_000809e4": {
            "renaming": {
                "FUN_000809e4": "update_data_at_indices_000809e4",
                "param_1": "data",
                "param_2": "value",
                "param_3": "indices",
                "bVar1": "is_highest_bit_set",
                "PTR_": "data",
                "DAT_": "value"
            },
            "code": "void update_data_at_indices_000809e4(uint32_t *PTR_, uint32_t DAT_, uint32_t indices) {\n  bool is_highest_bit_set = (int)(indices << 0x1f) < 0;\n  PTR_[17] = DAT_;\n  if (is_highest_bit_set) {\n    PTR_[25] = DAT_;\n  }\n  if (!is_highest_bit_set) {\n    PTR_[24] = DAT_;\n  }\n  bool is_second_bit_set = (indices & 10) != 0;\n  if (is_second_bit_set) {\n    PTR_[8] = DAT_;\n  }\n  if (!is_second_bit_set) {\n    PTR_[9] = DAT_;\n  }\n  bool is_30th_or_31st_bit_set = ((int)(indices << 0x1e) < 0) || ((int)(indices << 0x1c) < 0);\n  if (is_30th_or_31st_bit_set) {\n    PTR_[32] = DAT_;\n  }\n  PTR_[5] = DAT_;\n  *PTR_ = DAT_;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000809e4",
            "calling": [
                "FUN_00080a30"
            ],
            "imported": false,
            "current_name": "update_data_at_indices_000809e4"
        },
        "FUN_00080ebe": {
            "renaming": {
                "FUN_00080ebe": "zero_return_function_00080ebe"
            },
            "code": "\n\nint32_t zero_return_function_00080ebe(void)\n{\n  return 0;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ebe",
            "calling": [
                "FUN_000844e0"
            ],
            "imported": false,
            "current_name": "zero_return_function_00080ebe"
        },
        "thunk_FUN_000816d8": {
            "renaming": {
                "thunk_FUN_000816d8": "get_value_from_pointer_thunk_000816d8",
                "undefined4": "int",
                "*": "pointer",
                "PTR_DAT_000816e0": "value_pointer",
                "return": "return",
                "()": "()",
                "int": "int",
                "value": "value"
            },
            "code": "int get_value_from_pointer_thunk_000816d8() {\n    int *PTR_DAT_000816e0 = PTR_DAT_000816e0;\n    int value = *PTR_DAT_000816e0;\n    return value;\n}",
            "called": [
                "FUN_000816d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f04",
            "calling": [
                "FUN_000811e8"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_thunk_000816d8"
        },
        "FUN_000816d8": {
            "renaming": {
                "FUN_000816d8": "get_value_from_pointer_000816d8",
                "PTR_DAT_000816e0": "PTR_DATA"
            },
            "code": "get_value_from_pointer_000816d8() {\n    return *(undefined4 *)PTR_DAT_000816e0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816d8",
            "calling": [
                "thunk_FUN_000816d8"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_000816d8"
        },
        "FUN_000815b8": {
            "renaming": {
                "FUN_000815b8": "check_if_param_is_valid_000815b8",
                "param_1": "input_ptr",
                "param_2": "param_ptr",
                "uVar1": "param_len",
                "iVar2": "is_valid",
                "*param_1": "*input_ptr",
                "FUNC_00082390": "get_param_length"
            },
            "code": "int check_if_param_is_valid_000815b8(byte **input_ptr, byte *param_ptr) {\n  uint8_t param_len = 0;\n  int is_valid = 1;\n  if (input_ptr[2] == NULL) {\n    if (param_ptr == NULL) {\n      return is_valid;\n    }\n  } else {\n    if (param_ptr != NULL) {\n      param_len = get_param_length(*input_ptr);\n    } else {\n      param_ptr = *input_ptr;\n    }\n  }\n  if (param_len > 1) {\n    is_valid = 0;\n  }\n  return is_valid;\n}",
            "called": [
                "FUN_00082390"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815b8",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "check_if_param_is_valid_000815b8"
        },
        "FUN_00084220": {
            "renaming": {
                "FUN_00084220": "update_value_00084220",
                "param_1": "value",
                "param_2": "data",
                "iVar1": "result"
            },
            "code": "void update_value_00084220(int value, int* data)\n{\n    int result = get_value_from_param(value, (int)*(short *)(data + 0xe));\n    if (result >= 0)\n    {\n        *(int *)(data + 0x50) = *(int *)(data + 0x50) + result;\n    }\n    else\n    {\n        *(ushort *)(data + 0xc) = *(ushort *)(data + 0xc) & 0xefff;\n    }\n}",
            "called": [
                "FUN_00084508"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084220",
            "calling": [],
            "imported": false,
            "current_name": "update_value_00084220"
        },
        "FUN_00081472": {
            "renaming": {
                "FUN_00081472": "FUNC_00081472"
            },
            "code": "\nundefined4 * FUNC_00081472(undefined4 *param_1)\n\n{\n  FUN_00081800(*param_1);\n  return param_1;\n}\n\n",
            "called": [
                "FUN_00081800"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081472",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "FUNC_00081472"
        },
        "FUN_00084860": {
            "renaming": {
                "FUN_00084860": "FUNC_00084860"
            },
            "code": "\nundefined8 FUNC_00084860(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  bool bVar11;\n  \n  if (param_4 == 0) {\n    if (param_3 <= param_2) {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar9 = count_leading_zeroes(param_3);\n      if (uVar9 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar9 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar9 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar8 = uVar3 / uVar2;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = uVar4 * uVar8;\n        uVar5 = param_1 >> (0x20 - uVar9 & 0xff) | param_2 << (uVar9 & 0xff);\n        uVar3 = uVar5 >> 0x10 | (uVar3 - uVar2 * uVar8) * 0x10000;\n        param_1 = param_1 << (uVar9 & 0xff);\n        uVar9 = uVar8;\n        if (uVar3 <= uVar7 && uVar7 - uVar3 != 0) {\n          bVar11 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar9 = uVar8 - 1;\n          if ((bVar11 == false) && (uVar3 <= uVar7 && uVar7 - uVar3 != 0)) {\n            uVar9 = uVar8 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar6 = (uVar3 - uVar7) / uVar2;\n        uVar8 = uVar4 * uVar6;\n        param_2 = uVar5 & 0xffff | ((uVar3 - uVar7) - uVar2 * uVar6) * 0x10000;\n        uVar7 = uVar6;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar11 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar7 = uVar6 - 1;\n          if ((bVar11 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar7 = uVar6 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        uVar7 = uVar7 | uVar9 << 0x10;\n      }\n      uVar8 = param_2 / uVar2;\n      uVar3 = uVar4 * uVar8;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar2 * uVar8) * 0x10000;\n      uVar9 = uVar8;\n      if (uVar5 <= uVar3 && uVar3 - uVar5 != 0) {\n        bVar11 = CARRY4(uVar5,param_3);\n        uVar5 = uVar5 + param_3;\n        uVar9 = uVar8 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar3 && uVar3 - uVar5 != 0)) {\n          uVar9 = uVar8 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar8 = (uVar5 - uVar3) / uVar2;\n      uVar4 = uVar4 * uVar8;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar3) - uVar2 * uVar8) * 0x10000;\n      uVar2 = uVar8;\n      if (uVar5 <= uVar4 && uVar4 - uVar5 != 0) {\n        uVar2 = uVar8 - 1;\n        if ((CARRY4(uVar5,param_3) == false) &&\n           (uVar5 + param_3 <= uVar4 && uVar4 - (uVar5 + param_3) != 0)) {\n          uVar2 = uVar8 - 2;\n        }\n      }\n      return CONCAT44(uVar7,uVar2 | uVar9 << 0x10);\n    }\n    uVar9 = count_leading_zeroes(param_3);\n    if (uVar9 != 0) {\n      uVar7 = param_1 >> (0x20 - uVar9 & 0xff);\n      param_3 = param_3 << (uVar9 & 0xff);\n      param_1 = param_1 << (uVar9 & 0xff);\n      param_2 = uVar7 | param_2 << (uVar9 & 0xff);\n    }\n    uVar7 = param_3 >> 0x10;\n    uVar2 = param_2 / uVar7;\n    uVar4 = (param_3 & 0xffff) * uVar2;\n    uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar2) * 0x10000;\n    uVar9 = uVar2;\n    if (uVar8 <= uVar4 && uVar4 - uVar8 != 0) {\n      bVar11 = CARRY4(uVar8,param_3);\n      uVar8 = uVar8 + param_3;\n      uVar9 = uVar2 - 1;\n      if ((bVar11 == false) && (uVar8 <= uVar4 && uVar4 - uVar8 != 0)) {\n        uVar9 = uVar2 - 2;\n        uVar8 = uVar8 + param_3;\n      }\n    }\n    uVar5 = (uVar8 - uVar4) / uVar7;\n    uVar2 = (param_3 & 0xffff) * uVar5;\n    uVar4 = param_1 & 0xffff | ((uVar8 - uVar4) - uVar7 * uVar5) * 0x10000;\n    uVar7 = uVar5;\n    if (uVar4 <= uVar2 && uVar2 - uVar4 != 0) {\n      uVar7 = uVar5 - 1;\n      if ((CARRY4(uVar4,param_3) == false) &&\n         (uVar4 + param_3 <= uVar2 && uVar2 - (uVar4 + param_3) != 0)) {\n        uVar7 = uVar5 - 2;\n      }\n    }\n    uVar9 = uVar7 | uVar9 << 0x10;\n    uVar7 = 0;\n  }\n  else {\n    if (param_2 < param_4) {\n      return 0;\n    }\n    uVar9 = count_leading_zeroes(param_4);\n    if (uVar9 == 0) {\n      if ((param_4 < param_2) || (uVar7 = uVar9, param_3 <= param_1)) {\n        return 1;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar9;\n      uVar7 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_4 << (uVar9 & 0xff) | param_3 >> (uVar2 & 0xff);\n      uVar8 = uVar4 >> 0x10;\n      uVar6 = uVar7 / uVar8;\n      uVar5 = (uVar4 & 0xffff) * uVar6;\n      uVar3 = param_1 >> (uVar2 & 0xff) | param_2 << (uVar9 & 0xff);\n      uVar2 = uVar3 >> 0x10 | (uVar7 - uVar8 * uVar6) * 0x10000;\n      uVar7 = uVar6;\n      if (uVar2 <= uVar5 && uVar5 - uVar2 != 0) {\n        bVar11 = CARRY4(uVar2,uVar4);\n        uVar2 = uVar2 + uVar4;\n        uVar7 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar2 <= uVar5 && uVar5 - uVar2 != 0)) {\n          uVar7 = uVar6 - 2;\n          uVar2 = uVar2 + uVar4;\n        }\n      }\n      uVar6 = (uVar2 - uVar5) / uVar8;\n      uVar10 = (uVar4 & 0xffff) * uVar6;\n      uVar8 = uVar3 & 0xffff | ((uVar2 - uVar5) - uVar8 * uVar6) * 0x10000;\n      uVar2 = uVar6;\n      if (uVar8 <= uVar10 && uVar10 - uVar8 != 0) {\n        bVar11 = CARRY4(uVar8,uVar4);\n        uVar8 = uVar8 + uVar4;\n        uVar2 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar8 <= uVar10 && uVar10 - uVar8 != 0)) {\n          uVar2 = uVar6 - 2;\n          uVar8 = uVar8 + uVar4;\n        }\n      }\n      uVar2 = uVar2 | uVar7 << 0x10;\n      lVar1 = (ulonglong)uVar2 * (ulonglong)(param_3 << (uVar9 & 0xff));\n      uVar7 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar8 - uVar10 < uVar7) ||\n         ((uVar8 - uVar10 == uVar7 && (param_1 << (uVar9 & 0xff) < (uint)lVar1)))) {\n        uVar9 = uVar2 - 1;\n        uVar7 = 0;\n      }\n      else {\n        uVar9 = uVar2;\n        uVar7 = 0;\n      }\n    }\n  }\n  return CONCAT44(uVar7,uVar9);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00084860",
            "calling": [
                "FUN_0008458c"
            ],
            "imported": false,
            "current_name": "FUNC_00084860"
        },
        "FUN_000836ec": {
            "renaming": {
                "FUN_000836ec": "add_to_buffer_000836ec",
                "uVar1": "value",
                "puVar2": "buffer",
                "iVar3": "current_buffer_index",
                "iVar4": "buffer_address",
                "UNRECOVERED_JUMPTABLE_00": "function_pointer"
            },
            "code": "void add_to_buffer_000836ec(void)\n{\n    int current_buffer_index;\n    int *buffer;\n    int buffer_address = *(int *)PTR_DAT_000836d0;\n    buffer = *(int **)(buffer_address + 0x148);\n    if (buffer == (int *)0x0) {\n        buffer = (int *)(buffer_address + 0x14c);\n        *(int **)(buffer_address + 0x148) = buffer;\n    }\n    current_buffer_index = buffer[1];\n    if (current_buffer_index > 31) {\n        int *new_buffer = (int *)FUN_000817f0(400);\n        if (DAT_000836d4 == 0 || new_buffer == (int *)0x0) {\n            return;\n        }\n        new_buffer[0] = *(int *)(buffer_address + 0x148);\n        new_buffer[1] = 0;\n        current_buffer_index = 0;\n        *(int **)(buffer_address + 0x148) = new_buffer;\n        new_buffer[0x62] = 0;\n        new_buffer[99] = 0;\n        buffer = new_buffer;\n    }\n    buffer[1] = current_buffer_index + 1;\n    buffer[current_buffer_index + 2] = FUN_00080eec(1);\n    ((code *)0x836fb)(0);\n}",
            "called": [
                "FUN_000841e4",
                "FUN_000817f0",
                "FUN_00080eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000836ec",
            "calling": [
                "FUN_000816f8"
            ],
            "imported": false,
            "current_name": "add_to_buffer_000836ec"
        },
        "FUN_00081750": {
            "renaming": {
                "FUN_00081750": "process_data_00081750",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "ptr_1",
                "param_4": "ptr_2",
                "uStack_8": "stack_var_1",
                "uStack_4": "stack_var_2",
                "FUNC_0008289c": "call_function"
            },
            "code": "void process_data_00081750(undefined4 data_1, undefined4 data_2, undefined4 ptr_1, undefined4 ptr_2)\n{\n  undefined4 stack_var_1;\n  undefined4 stack_var_2;\n  \n  stack_var_1 = ptr_1;\n  stack_var_2 = ptr_2;\n  call_function(*DAT_00081774, data_1, data_2, &stack_var_1);\n  return;\n}",
            "called": [
                "FUN_0008289c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081750",
            "calling": [
                "FUN_000816f8"
            ],
            "imported": false,
            "current_name": "process_data_00081750"
        },
        "FUN_00082688": {
            "renaming": {
                "FUN_00082688": "get_string_length_00082688",
                "param_1": "address",
                "puVar2": "ptr",
                "iVar1": "offset",
                "uVar3": "word",
                "bVar4": "end_reached"
            },
            "code": "int get_string_length_00082688(uint address)\n{\n  int length = 0;\n  uint *ptr = (uint *)(address & 0xfffffffc);\n  int offset = -(address & 3);\n  uint word = *ptr;\n  if ((address & 3) != 0) {\n    word = word | 0xffffffffU >> ((offset + 4U & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (word + 0xfefefeff & ~word & 0x80808080) == 0) {\n    offset = offset + 4;\n    word = *ptr;\n  }\n  bool end_reached = (word & 0xff) == 0;\n  if (!end_reached) {\n    offset = offset + 1;\n    end_reached = (word & 0xff00) == 0;\n  }\n  if (!end_reached) {\n    offset = offset + 1;\n    end_reached = (word & 0xff0000) == 0;\n  }\n  if (!end_reached) {\n    offset = offset + 1;\n  }\n  return offset;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082688",
            "calling": [
                "FUN_000810a6",
                "FUN_000814f6",
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "get_string_length_00082688"
        },
        "FUN_00084508": {
            "renaming": {
                "FUN_00084508": "process_result_00084508",
                "param_1": "result",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "ptr_data",
                "iVar2": "status"
            },
            "code": "void process_result_00084508(int* result, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  undefined *ptr_data = PTR_DAT_0008452c;\n  *(undefined4 *)PTR_DAT_0008452c = 0;\n  int status = FUN_00080ec2(param_2, param_3, param_4);\n  if ((status == -1) && (*(int *)ptr_data != 0)) {\n    *result = *(int *)ptr_data;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080ec2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084508",
            "calling": [
                "FUN_00084220"
            ],
            "imported": false,
            "current_name": "process_result_00084508"
        },
        "FUN_00080a30": {
            "renaming": {
                "FUN_00080a30": "process_data_00080a30",
                "param_1": "data_ptr",
                "param_2": "data_type",
                "param_3": "data_value",
                "param_4": "data_flag",
                "bVar1": "is_negative"
            },
            "code": "int process_data_00080a30(int data_ptr, int data_type, int data_value, uint32_t data_flag) {\n    bool is_negative = (int)(data_flag << 0x1f) < 0;\n    switch(data_type) {\n        case 1:\n        case 2:\n            (*data_ptr)(data_ptr, data_type, data_value);\n            *(int *)(data_ptr + 0x44) = data_value;\n            if (is_negative) {\n                *(int *)(data_ptr + 100) = data_value;\n            }\n            if (!is_negative) {\n                *(int *)(data_ptr + 0x60) = data_value;\n            }\n            break;\n        case 3:\n            (*DAT_00080a8c)(data_ptr, data_value, data_flag, DAT_00080a8c, data_ptr);\n            break;\n        case 4:\n        case 5:\n            (*DAT_00080a90)(data_ptr, data_value, data_type == 5, (data_flag << 0x1d) >> 0x1f, data_flag & 1, data_type, data_value);\n            break;\n        default:\n            return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_000809be",
                "FUN_00080a0a",
                "FUN_000809e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a30",
            "calling": [
                "FUN_00080774",
                "FUN_00080f0c"
            ],
            "imported": false,
            "current_name": "process_data_00080a30"
        },
        "FUN_0008089c": {
            "renaming": {
                "FUN_0008089c": "initialize_data_structures_0008089c",
                "param_1": "param_1",
                "param_2": "param_2",
                "param_3": "param_3",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "puVar3": "ptr3",
                "puVar4": "ptr4",
                "puVar5": "ptr5",
                "puVar6": "ptr6",
                "PTR_DAT_00080930": "ptr1",
                "PTR_DAT_00080934": "ptr2",
                "PTR_DAT_0008093c": "ptr3",
                "PTR_DAT_00080940": "ptr4",
                "PTR_DAT_00080944": "ptr5",
                "PTR_DAT_00080948": "ptr6",
                "PTR_DAT_0008094c": "ptr7",
                "PTR_DAT_00080954": "ptr8",
                "PTR_DAT_0008095c": "ptr9",
                "PTR_DAT_00080964": "ptr10",
                "PTR_DAT_00080968": "ptr11",
                "PTR_DAT_0008096c": "ptr12",
                "FUN_000811b0": "function_1",
                "FUN_00081348": "function_2",
                "DAT_00080938": "DAT_00080938",
                "FUN_00081438": "function_3",
                "DAT_00080950": "DAT_00080950",
                "DAT_00080958": "DAT_00080958",
                "DAT_00080960": "DAT_00080960"
            },
            "code": "void initialize_data_structures_0008089c(void *param_1, void *param_2, void *param_3)\n{\n    void *PTR_DAT_00080930 = PTR_DAT_00080930;\n    void *PTR_DAT_00080934 = PTR_DAT_00080934;\n    void *PTR_DAT_0008093c = PTR_DAT_0008093c;\n    void *PTR_DAT_00080940 = PTR_DAT_00080940;\n    void *PTR_DAT_00080944 = PTR_DAT_00080944;\n    void *PTR_DAT_00080948 = PTR_DAT_00080948;\n    void *PTR_DAT_0008094c = PTR_DAT_0008094c;\n    void *PTR_DAT_00080954 = PTR_DAT_00080954;\n    void *PTR_DAT_0008095c = PTR_DAT_0008095c;\n    void *PTR_DAT_00080964 = PTR_DAT_00080964;\n    void *PTR_DAT_00080968 = PTR_DAT_00080968;\n    void *PTR_DAT_0008096c = PTR_DAT_0008096c;\n    function_1(PTR_DAT_00080930);\n    function_1(PTR_DAT_00080934);\n    function_1(PTR_DAT_00080968);\n    function_1(PTR_DAT_0008093c);\n    function_1(PTR_DAT_00080944);\n    function_1(PTR_DAT_00080948);\n    function_1(PTR_DAT_00080940, DAT_00080938, 8, 8, PTR_DAT_00080930, PTR_DAT_00080934, param_3);\n    function_1(PTR_DAT_0008094c);\n    function_1(PTR_DAT_0008096c);\n    function_1(PTR_DAT_00080954);\n    function_1(PTR_DAT_0008095c);\n    function_1(PTR_DAT_00080964);\n    function_2(PTR_DAT_00080954, DAT_00080950, 0x11, 0x11, PTR_DAT_00080968, PTR_DAT_0008096c);\n    function_2(PTR_DAT_0008095c, DAT_00080958, 0x12, 0x12, PTR_DAT_0008093c, PTR_DAT_00080954);\n    function_2(PTR_DAT_00080964, DAT_00080960, 0x14, 0x14, PTR_DAT_00080944, PTR_DAT_0008094c);\n    return;\n}",
            "called": [
                "FUN_00081348",
                "FUN_000811b0",
                "FUN_00081438"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008089c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_structures_0008089c"
        },
        "FUN_000810a6": {
            "renaming": {
                "FUN_000810a6": "process_data_000810a6",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "uVar1": "allocated_memory",
                "*(code **)(*param_1 + 4)": "*(function_ptr*)(*data_ptr + 4)"
            },
            "code": "void process_data_000810a6(int* data_ptr, int data_size, int param_3, int param_4) {\n  if (data_size != 0) {\n    int uVar1 = allocate_memory(data_size);\n    (*(function_ptr*)(*data_ptr + 4))(data_ptr, data_size, uVar1, *(function_ptr*)(*data_ptr + 4), param_4);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00082688"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810a6",
            "calling": [
                "FUN_000810e8",
                "FUN_000810d8",
                "FUN_000810fc",
                "FUN_000810c4"
            ],
            "imported": false,
            "current_name": "process_data_000810a6"
        }
    },
    "used_tokens": 114274,
    "layers": [
        [
            "FUN_000817c8",
            "FUN_00081560",
            "FUN_00081684",
            "FUN_000825cc",
            "FUN_00080118",
            "FUN_00080aa8",
            "FUN_00080f0c",
            "FUN_00083a74",
            "FUN_000844e0",
            "FUN_00083b10",
            "FUN_00080e80",
            "thunk_FUN_0008113a",
            "FUN_0008236c",
            "FUN_00080d62",
            "FUN_000842a4",
            "FUN_000814f6",
            "FUN_00080e88",
            "FUN_000836d8",
            "FUN_000812b8",
            "thunk_FUN_00080efe",
            "FUN_000839b4",
            "FUN_00081570",
            "FUN_000803fc",
            "FUN_00080eb0",
            "FUN_00081214",
            "FUN_0008439c",
            "FUN_00082824",
            "FUN_0008427c",
            "FUN_000809be",
            "FUN_00080a94",
            "FUN_00081618",
            "FUN_0008455c",
            "FUN_000840f8",
            "FUN_00081f00",
            "FUN_00080eaa",
            "FUN_00081d48",
            "FUN_00084494",
            "FUN_00084530",
            "FUN_00080970",
            "FUN_00084018",
            "FUN_000815de",
            "FUN_000834f0",
            "FUN_000841e4",
            "FUN_0008113a",
            "FUN_0008400c",
            "FUN_000814d0",
            "FUN_00080c20",
            "FUN_0008044c",
            "FUN_000810d8",
            "FUN_00080efe",
            "FUN_00081e34",
            "FUN_000805a8",
            "FUN_000810cc",
            "FUN_00081276",
            "FUN_000844bc",
            "FUN_00083850",
            "FUN_000815ec",
            "FUN_00080d3e",
            "FUN_00081438",
            "FUN_00080b90",
            "FUN_0008356c",
            "FUN_00080b98",
            "FUN_000810e8",
            "FUN_00080d58",
            "FUN_00081480",
            "FUN_00081f9c",
            "FUN_00081248",
            "FUN_00081800",
            "FUN_0008458c",
            "FUN_0008434c",
            "FUN_0008159e",
            "FUN_000806a0",
            "FUN_0008151c",
            "FUN_000816f8",
            "FUN_00084484",
            "FUN_000811ca",
            "FUN_00080164",
            "FUN_00084244",
            "FUN_00081496",
            "FUN_00084004",
            "FUN_00081014",
            "FUN_000816ec",
            "FUN_000814ae",
            "FUN_00081778",
            "FUN_000800f4",
            "FUN_000810c4",
            "FUN_00080d30",
            "FUN_00080c98",
            "FUN_00080eec",
            "FUN_000811e8",
            "FUN_000806f8",
            "FUN_000810fc",
            "FUN_00080250",
            "FUN_00080d6a",
            "FUN_000813dc",
            "FUN_00080a0a",
            "FUN_00080b2c",
            "FUN_00080774",
            "FUN_00080ec2",
            "FUN_00083888",
            "FUN_00081348",
            "FUN_00081624",
            "FUN_00080ec8",
            "FUN_0008117a",
            "FUN_000801e0",
            "FUN_000811b0",
            "FUN_000817f0",
            "FUN_0008145c",
            "FUN_00080eba",
            "FUN_00081190",
            "FUN_000809e4",
            "FUN_00080ebe",
            "thunk_FUN_000816d8",
            "FUN_000816d8",
            "FUN_000815b8",
            "FUN_00084220",
            "FUN_00081472",
            "FUN_000836ec",
            "FUN_00081750",
            "FUN_00082688",
            "FUN_00084508",
            "FUN_00080a30",
            "FUN_0008089c",
            "FUN_000810a6"
        ],
        [
            "FUN_000844e0",
            "FUN_000842a4",
            "FUN_00081472"
        ],
        [
            "FUN_00081472"
        ]
    ],
    "locked_functions": []
}