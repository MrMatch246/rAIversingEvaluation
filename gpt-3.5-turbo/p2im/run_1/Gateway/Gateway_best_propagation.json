{
    "functions": {
        "FUN_0800010c": {
            "entrypoint": "0x0800010c",
            "current_name": "initialize_flag_0800010c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000118) */\n\nundefined4 initialize_flag_0800010c(undefined4 input)\n\n{\n  if ((flag_value)DAT_200000f4 == '\\0') {\n    DAT_200000f4._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_0800010c": "initialize_flag_0800010c",
                "param_1": "input",
                "char": "flag_value"
            },
            "calling": [],
            "called": [
                "FUN_0800a424"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800010c": {
                    "6": "initialize_flag_if_not_set",
                    "1": "set_flag_if_zero",
                    "19": "initialize_flag",
                    "2": "set_flag_if_not_set"
                },
                "param_1": {
                    "14": "input",
                    "1": "input_param",
                    "10": "input_value",
                    "2": "flag_value"
                },
                "DAT_200000f4": {
                    "16": "flag",
                    "1": "flag_value"
                },
                "char": {
                    "1": "flag_value"
                }
            }
        },
        "FUN_08000178": {
            "entrypoint": "0x08000178",
            "current_name": "find_end_of_string_08000178",
            "code": "\nchar * find_end_of_string_08000178(char *string)\n\n{\n  char current_char;\n  char *next_char;\n  char *current_character;\n  \n  current_character = string;\n  do {\n    next_char = current_character + 1;\n    current_char = *current_character;\n    current_character = next_char;\n  } while (current_char != '\\0');\n  return next_char + (-1 - (int)string);\n}\n\n",
            "renaming": {
                "FUN_08000178": "find_end_of_string_08000178",
                "param_1": "string",
                "cVar1": "current_char",
                "pcVar2": "next_char",
                "pcVar3": "current_character"
            },
            "calling": [
                "FUN_080032a2",
                "FUN_08002e44"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000178": {
                    "1": "get_length",
                    "15": "find_end_of_string",
                    "5": "find_string_length",
                    "2": "reverse_string"
                },
                "param_1": {
                    "15": "string",
                    "14": "input_string",
                    "2": "str"
                },
                "cVar1": {
                    "10": "current_character",
                    "1": "character",
                    "14": "current_char",
                    "3": "current_character_value"
                },
                "pcVar2": {
                    "2": "next_char_pointer",
                    "11": "next_character",
                    "1": "next_character_pointer",
                    "12": "next_char"
                },
                "pcVar3": {
                    "6": "current_character",
                    "2": "current_char_pointer",
                    "5": "current_position",
                    "1": "current_char_ptr"
                },
                "ptr_1": {
                    "1": "start_of_string"
                }
            }
        },
        "FUN_08000188": {
            "entrypoint": "0x08000188",
            "current_name": "execute_system_call_08000188",
            "code": "\nvoid execute_system_call_08000188(void)\n\n{\n  trigger_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000188": "execute_system_call_08000188",
                "software_interrupt": "trigger_interrupt"
            },
            "calling": [
                "FUN_0800018c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000188": {
                    "2": "perform_system_interrupt",
                    "1": "call_software_interrupt",
                    "4": "send_software_interrupt",
                    "3": "execute_system_interrupt",
                    "6": "execute_system_call"
                },
                "software_interrupt": {
                    "4": "trigger_interrupt",
                    "1": "system_call",
                    "2": "interrupt_handler",
                    "3": "invoke_system_call"
                },
                "0x3f": {
                    "1": "interrupt_number"
                },
                "<original_variable_name_1>": {
                    "2": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_parameter_name_1>": {
                    "1": "<new_parameter_name_1>"
                }
            }
        },
        "FUN_0800018c": {
            "entrypoint": "0x0800018c",
            "current_name": "execute_afl_call_0800018c",
            "code": "\nundefined4 execute_afl_call_0800018c(undefined4 input_param,undefined4 unused_param,undefined4 unused_param2,undefined4 output_param)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000110 != 0) {\n    return 0;\n  }\n  result = afl_function(1,input_param,0,0,output_param);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800018c": "execute_afl_call_0800018c",
                "param_1": "input_param",
                "param_4": "output_param",
                "uVar1": "result",
                "param_2": "unused_param",
                "param_3": "unused_param2",
                "aflCall": "afl_function"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08000188"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800018c": {
                    "3": "process_data",
                    "1": "afl_call_wrapper",
                    "4": "call_afl_function",
                    "2": "call_afl",
                    "6": "execute_afl_call"
                },
                "param_1": {
                    "3": "input_1",
                    "1": "arg1",
                    "4": "input_data",
                    "2": "input1",
                    "10": "input_param"
                },
                "param_4": {
                    "1": "result",
                    "9": "output_param",
                    "3": "output",
                    "2": "input4"
                },
                "uVar1": {
                    "1": "afl_result",
                    "15": "result",
                    "2": "afl_call_result"
                },
                "param_2": {
                    "1": "second_param",
                    "2": "input_2",
                    "5": "unused_param"
                },
                "param_3": {
                    "2": "input_3",
                    "1": "third_param",
                    "3": "unused_param2"
                },
                "aflCall": {
                    "1": "afl_function"
                },
                "FUN_08000188": {
                    "1": "initialize"
                },
                "DAT_20000110": {
                    "1": "is_called_before"
                }
            }
        },
        "FUN_08000214": {
            "entrypoint": "0x08000214",
            "current_name": "control_pin_08000214",
            "code": "\nvoid control_pin_08000214(uint pin_number,undefined4 pin_value,undefined4 param3,undefined4 param4)\n\n{\n  bool is_servo;\n  int pin_mode;\n  \n  if (0x3b < (int)pin_number) {\n    exit;\n  }\n  pin_mode = get_pin_mode(&DAT_200003d4,pin_number,param3,param4,param4);\n  if (pin_mode == 3) {\n    if (pin_number < 0x3c) {\n      if ((&DAT_0800a908)[pin_number] == -1) {\n        pin_mode = 0;\n      }\n      else {\n        pin_mode = convert_to_digital_pin;\n        if (pin_mode == 0) {\n          pin_mode = 0;\n        }\n        else {\n          pin_mode = get_digital_pin_from_name((int)(char)(&DAT_0800a908)[pin_number]);\n          if (pin_mode == 1) {\n            pin_mode = 0;\n          }\n          else {\n            pin_mode = check_pin_in_pin_map((int)(char)(&DAT_0800a908)[pin_number],&DAT_0800a6cc);\n          }\n        }\n      }\n    }\n    else {\n      pin_mode = 0;\n    }\n    if (pin_mode != 0) {\n      write_analog(pin_number,pin_value);\n    }\n    set_pin_state(&DAT_200003d4,pin_number,pin_value);\n  }\n  else if (pin_mode == 4) {\n    if (pin_number < 0x3c) {\n      if ((&DAT_0800a908)[pin_number] == -1) {\n        is_servo = false;\n      }\n      else {\n        pin_mode = convert_to_digital_pin;\n        if (pin_mode == 0) {\n          is_servo = false;\n        }\n        else {\n          pin_mode = get_digital_pin_from_name((int)(char)(&DAT_0800a908)[pin_number]);\n          if (pin_mode == 1) {\n            is_servo = false;\n          }\n          else {\n            is_servo = true;\n          }\n        }\n      }\n    }\n    else {\n      is_servo = false;\n    }\n    if (is_servo) {\n      update_servo_position(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[pin_number] * 3,pin_value);\n    }\n    set_pin_state(&DAT_200003d4,pin_number,pin_value);\n    exit;\n  }\n  exit;\n}\n\n",
            "renaming": {
                "FUN_08000214": "control_pin_08000214",
                "param_1": "pin_number",
                "param_2": "pin_value",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "is_servo",
                "iVar2": "pin_mode",
                "pinNametoDigitalPin()": "convert_to_digital_pin",
                "analogWrite(param_1,param_2)": "write_analog(pin_number,pin_value)",
                "analogWrite": "write_analog_value",
                "setPinState": "set_pin_state",
                "update_servo_position_080026b0": "update_servo_position",
                "getPinMode": "get_pin_mode",
                "pinNametoDigitalPin": "get_digital_pin_from_name",
                "pin_in_pinmap": "check_pin_in_pin_map",
                "return": "exit"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_0800021a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000214": {
                    "1": "pin_mode_and_state_control",
                    "2": "digital_write_or_servo",
                    "4": "process_pin",
                    "6": "control_pin"
                },
                "param_1": {
                    "2": "pin_index",
                    "28": "pin_number",
                    "1": "pin"
                },
                "param_2": {
                    "3": "output_value",
                    "14": "pin_value",
                    "12": "value",
                    "1": "state"
                },
                "param_3": {
                    "19": "param3",
                    "1": "unused_param1",
                    "2": "arg3",
                    "7": "param_3"
                },
                "param_4": {
                    "19": "param4",
                    "8": "param_4",
                    "1": "unused_param2",
                    "2": "arg4"
                },
                "bVar1": {
                    "2": "valid_pin",
                    "10": "is_valid_pin",
                    "1": "is_servo_mode",
                    "11": "is_servo",
                    "3": "is_valid"
                },
                "iVar2": {
                    "1": "pin_mode_value",
                    "3": "pin_state",
                    "18": "pin_mode",
                    "2": "pin_mode_result"
                },
                "DAT_200003d4": {
                    "1": "pin_state_data"
                },
                "DAT_0800a908": {
                    "1": "digital_pin_array"
                },
                "DAT_0800a6cc": {
                    "2": "pin_map_array",
                    "1": "pin_map"
                },
                "pinNametoDigitalPin()": {
                    "1": "convert_to_digital_pin"
                },
                "pinNametoDigitalPin((int)(char)(&DAT_0800a908)[param_1])": {
                    "1": "convert_to_digital_pin((int)(char)pin_list[pin_number])"
                },
                "pin_in_pinmap((int)(char)(&DAT_0800a908)[param_1],&DAT_0800a6cc)": {
                    "1": "is_pin_in_pin_map"
                },
                "analogWrite(param_1,param_2)": {
                    "1": "write_analog(pin_number,pin_value)"
                },
                "setPinState(&DAT_200003d4,param_1,param_2)": {
                    "1": "set_pin_state(pin_state_arr,pin_number,pin_value)"
                },
                "analogWrite": {
                    "3": "analog_write",
                    "4": "write_to_analog_pin",
                    "1": "analog_write_to_pin",
                    "5": "write_analog_value"
                },
                "setPinState": {
                    "10": "set_pin_state",
                    "1": "set_pin_status",
                    "8": "update_pin_state"
                },
                "update_servo_position_080026b0": {
                    "20": "update_servo_position"
                },
                "DAT_2000022c": {
                    "1": "servo_position_data"
                },
                "DAT_200001f0": {
                    "1": "servo_pins"
                },
                "getPinMode": {
                    "11": "get_pin_mode",
                    "1": "fetch_pin_mode",
                    "2": "retrieve_pin_mode"
                },
                "0x3b": {
                    "1": "max_num_pins"
                },
                "0x3c": {
                    "1": "special_pin_threshold"
                },
                "&DAT_0800a908": {
                    "1": "digital_pin_to_analog_pin",
                    "2": "pin_mapping"
                },
                "pinNametoDigitalPin": {
                    "1": "get_digital_pin_from_alias",
                    "4": "get_digital_pin_from_name",
                    "3": "name_to_digital_pin",
                    "2": "get_digital_pin"
                },
                "pin_in_pinmap": {
                    "1": "is_pin_in_pin_map",
                    "5": "check_pin_in_pin_map",
                    "4": "check_pin_in_pinmap"
                },
                "4": {
                    "1": "servo_mode"
                },
                "0": {
                    "1": "no_pin_value"
                },
                "&DAT_2000022c": {
                    "3": "servo_position_data",
                    "1": "servo_base",
                    "4": "servo_positions"
                },
                "&DAT_200001f0": {
                    "1": "pin_to_servo_index",
                    "2": "servo_pin_array"
                },
                "FUN_0800021a": {
                    "1": "pin_nameto_digital_pin"
                },
                "&DAT_200003d4": {
                    "2": "pin_state",
                    "3": "pin_mode_data"
                },
                "pin_in_pinmap()": {
                    "1": "is_pin_in_pinmap"
                },
                "analogWrite()": {
                    "1": "write_analog"
                },
                "setPinState()": {
                    "1": "update_pin_state"
                },
                "update_servo_position_080026b0()": {
                    "2": "update_servo_position"
                },
                "&DAT_0800a6cc": {
                    "1": "pinmap",
                    "2": "pin_map"
                },
                "(int)(char)(&DAT_0800a908)[param_1]": {
                    "2": "pin_alias",
                    "1": "mapped_pin"
                },
                "byte)(&DAT_200001f0)[param_1]": {
                    "1": "servo_index"
                },
                "(uint)(byte)(&DAT_200001f0)[param_1]": {
                    "1": "servo_index"
                },
                "&DAT_0800a908[param_1]": {
                    "1": "pin_name"
                },
                "DAT_0800a908[param_1] == -1": {
                    "1": "is_special_pin"
                },
                "&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[param_1] * 3": {
                    "1": "servo_position"
                },
                "return": {
                    "1": "exit"
                }
            }
        },
        "FUN_0800021a": {
            "entrypoint": "0x0800021a",
            "current_name": "update_pin_state_0800021a",
            "code": "\nvoid update_pin_state_0800021a(uint pin_number,undefined4 pin_value,undefined4 param3,undefined4 param4)\n\n{\n  bool is_valid_pin;\n  int pin_mode;\n  \n  pin_mode = get_pin_mode(&DAT_200003d4,pin_number,param3,param4,param4);\n  if (pin_mode == 3) {\n    if (pin_number < 0x3c) {\n      if ((&DAT_0800a908)[pin_number] == -1) {\n        pin_mode = 0;\n      }\n      else {\n        pin_mode = convert_pin_name_to_digital_pin;\n        if (pin_mode == 0) {\n          pin_mode = 0;\n        }\n        else {\n          pin_mode = convert_pin_name_to_digital_pin((int)(char)(&DAT_0800a908)[pin_number]);\n          if (pin_mode == 1) {\n            pin_mode = 0;\n          }\n          else {\n            pin_mode = check_pin_in_pin_map((int)(char)(&DAT_0800a908)[pin_number],&DAT_0800a6cc);\n          }\n        }\n      }\n    }\n    else {\n      pin_mode = 0;\n    }\n    if (pin_mode != 0) {\n      write_analog_value(pin_number,pin_value);\n    }\n    set_pin_state(&DAT_200003d4,pin_number,pin_value);\n  }\n  else if (pin_mode == 4) {\n    if (pin_number < 0x3c) {\n      if ((&DAT_0800a908)[pin_number] == -1) {\n        is_valid_pin = false;\n      }\n      else {\n        pin_mode = convert_pin_name_to_digital_pin;\n        if (pin_mode == 0) {\n          is_valid_pin = false;\n        }\n        else {\n          pin_mode = convert_pin_name_to_digital_pin((int)(char)(&DAT_0800a908)[pin_number]);\n          if (pin_mode == 1) {\n            is_valid_pin = false;\n          }\n          else {\n            is_valid_pin = true;\n          }\n        }\n      }\n    }\n    else {\n      is_valid_pin = false;\n    }\n    if (is_valid_pin) {\n      update_servo_position(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[pin_number] * 3,pin_value);\n    }\n    set_pin_state(&DAT_200003d4,pin_number,pin_value);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800021a": "update_pin_state_0800021a",
                "param_1": "pin_number",
                "param_2": "pin_value",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "is_valid_pin",
                "iVar2": "pin_mode",
                "getPinMode": "get_pin_mode",
                "pinNametoDigitalPin": "convert_pin_name_to_digital_pin",
                "pin_in_pinmap": "check_pin_in_pin_map",
                "analogWrite": "write_analog_value",
                "setPinState": "set_pin_state",
                "update_servo_position_080026b0": "update_servo_position",
                "pinNametoDigitalPin()": "convert_pin_name_to_digital_pin"
            },
            "calling": [
                "FUN_08000214"
            ],
            "called": [
                "FUN_0800738a",
                "FUN_080036ac",
                "FUN_080088e0",
                "FUN_080026b0",
                "FUN_08002fc2",
                "FUN_08002fa0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800021a": {
                    "1": "analog_write_or_servo_control",
                    "2": "process_pin_data",
                    "4": "update_pin_state",
                    "3": "process_pin"
                },
                "param_1": {
                    "31": "pin_number"
                },
                "param_2": {
                    "22": "pin_value",
                    "8": "value",
                    "1": "output_value"
                },
                "param_3": {
                    "1": "input_param_1",
                    "2": "array",
                    "20": "param3",
                    "5": "param_3"
                },
                "param_4": {
                    "1": "mode2",
                    "20": "param4",
                    "5": "param_4"
                },
                "bVar1": {
                    "8": "is_pin_valid",
                    "2": "is_digital_pin",
                    "11": "is_valid_pin",
                    "1": "is_servo_control",
                    "6": "is_servo"
                },
                "iVar2": {
                    "1": "pin_state",
                    "3": "pin_mode_result",
                    "24": "pin_mode",
                    "2": "pin_status"
                },
                "getPinMode": {
                    "10": "get_pin_mode",
                    "2": "fetch_pin_mode",
                    "4": "find_pin_mode",
                    "1": "get_pin_type"
                },
                "pinNametoDigitalPin": {
                    "1": "name_to_digital_pin",
                    "2": "get_digital_pin",
                    "10": "convert_pin_name_to_digital_pin"
                },
                "pin_in_pinmap": {
                    "7": "check_pin_in_pin_map",
                    "4": "check_pin_in_pinmap",
                    "1": "check_if_pin_in_pinmap",
                    "2": "check_pin_map"
                },
                "analogWrite": {
                    "5": "write_analog_pin",
                    "1": "write_to_analog_pin",
                    "10": "write_analog_value"
                },
                "setPinState": {
                    "12": "set_pin_state",
                    "2": "set_pin_status",
                    "10": "update_pin_state"
                },
                "update_servo_position_080026b0": {
                    "25": "update_servo_position"
                },
                "find_value_0800738a": {
                    "1": "retrieve_value",
                    "23": "find_value"
                },
                "find_character_index_080036ac": {
                    "22": "find_character_index",
                    "2": "find_char_index",
                    "1": "retrieve_character_index"
                },
                "configure_pin_080088e0": {
                    "1": "configure_gpio_pin",
                    "24": "configure_pin"
                },
                "store_value_at_offset_08002fc2": {
                    "2": "store_value",
                    "23": "store_value_at_offset"
                },
                "get_value_from_offset_08002fa0": {
                    "2": "get_value",
                    "23": "get_value_from_offset"
                },
                "DAT_200003d4": {
                    "2": "pin_state_data",
                    "1": "pin_config"
                },
                "DAT_0800a908": {
                    "1": "pin_nameto_digital_pin_array",
                    "3": "pin_name_array"
                },
                "DAT_0800a6cc": {
                    "2": "pin_map_data"
                },
                "DAT_2000022c": {
                    "1": "servo_pos_array"
                },
                "DAT_200001f0": {
                    "2": "servo_pin_index_array",
                    "1": "servo_config_data"
                },
                "pinNameToDigitalPin": {
                    "1": "get_digital_pin"
                },
                "&DAT_200003d4": {
                    "1": "pin_state",
                    "3": "pin_state_array",
                    "2": "pin_configuration"
                },
                "&DAT_0800a908": {
                    "1": "pin_values",
                    "2": "pin_mapping",
                    "3": "pin_array"
                },
                "(int)(char)(&DAT_0800a908)[param_1]": {
                    "1": "get_digital_pin_from_name((char)pin_map_array[pin_number])",
                    "2": "pin_name"
                },
                "&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[param_1] * 3": {
                    "2": "servo_position",
                    "1": "servo_pin"
                },
                "&DAT_200001f0)[param_1]": {
                    "1": "character_index"
                },
                "&DAT_2000022c": {
                    "1": "servo_base_address",
                    "4": "servo_position_array",
                    "2": "servo_data"
                },
                "array": {
                    "1": "search_array"
                },
                "value": {
                    "1": "config_value"
                },
                "base_address": {
                    "2": "base_address"
                },
                "data_type": {
                    "3": "data_type"
                },
                "pinNametoDigitalPin()": {
                    "1": "find_value"
                },
                "pin_in_pinmap()": {
                    "2": "is_pin_in_pinmap"
                },
                "analogWrite()": {
                    "2": "write_analog_value",
                    "1": "configure_pin"
                },
                "setPinState()": {
                    "1": "store_pin_state"
                },
                "update_servo_position_080026b0()": {
                    "2": "update_servo_position"
                },
                "&DAT_200001f0": {
                    "1": "servo_position_index",
                    "2": "servo_pin_array"
                },
                "(char)(&DAT_0800a908)[param_1]": {
                    "1": "pin_name"
                },
                "&DAT_0800a6cc": {
                    "1": "pin_map_array_size",
                    "6": "pin_map"
                },
                "(uint)(byte)(&DAT_200001f0)[param_1]": {
                    "2": "servo_index"
                },
                "&DAT_0800a908[param_1]": {
                    "1": "array[pin_number]"
                },
                "find_value_0800738a()": {
                    "1": "find_character_value"
                },
                "find_character_index_080036ac()": {
                    "1": "find_character_index"
                },
                "configure_pin_080088e0()": {
                    "1": "configure_digital_pin"
                },
                "store_value_at_offset_08002fc2()": {
                    "1": "store_value_at_offset"
                },
                "get_value_from_offset_08002fa0()": {
                    "1": "get_value_from_offset"
                },
                "(uint)(byte)(&DAT_200001f0)[param_1] * 3": {
                    "1": "servo_offset"
                },
                "setPinState(&DAT_200003d4,param_1,param_2)": {
                    "1": "set_pin_state"
                },
                "update_servo_position_080026b0(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[param_1] * 3,param_2)": {
                    "1": "update_servo_position"
                }
            }
        },
        "FUN_08000488": {
            "entrypoint": "0x08000488",
            "current_name": "update_data_08000488",
            "code": "\nvoid update_data_08000488(uint index,int flag)\n\n{\n  undefined4 adc_value;\n  \n  if ((int)index < 0xe) {\n    if (flag == 0) {\n      DAT_20000114 = DAT_20000114 & ~(1 << (index & 0xff));\n      return;\n    }\n    DAT_20000114 = 1 << (index & 0xff) | DAT_20000114;\n    if (DAT_20000171 == '\\0') {\n      adc_value = extract_adc_value();\n      send_analog_data(&DAT_200003d4,index,adc_value);\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000488": "update_data_08000488",
                "param_1": "index",
                "param_2": "flag",
                "uVar1": "adc_value",
                "send_analog_data_08002ef2": "send_analog_data",
                "analogRead": "extract_adc_value"
            },
            "calling": [
                "FUN_080005f8"
            ],
            "called": [
                "FUN_08008880",
                "FUN_08002ef2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000488": {
                    "1": "update_data_and_send_analog",
                    "13": "update_data",
                    "2": "update_data_and_send"
                },
                "param_1": {
                    "3": "bit_position",
                    "4": "input_index",
                    "2": "input_value",
                    "1": "input_param",
                    "7": "index"
                },
                "param_2": {
                    "14": "flag",
                    "1": "toggle",
                    "3": "value",
                    "2": "state"
                },
                "uVar1": {
                    "18": "adc_value",
                    "12": "analog_value"
                },
                "extract_adc_value_08008880": {
                    "3": "extract_adc_value"
                },
                "send_analog_data_08002ef2": {
                    "5": "send_analog_data"
                },
                "DAT_20000114": {
                    "4": "data_register",
                    "1": "pin_data"
                },
                "DAT_20000171": {
                    "1": "is_reverse",
                    "2": "is_analog_enabled"
                },
                "analogRead": {
                    "2": "extract_adc_value"
                },
                "DAT_200003d4": {
                    "2": "base_address"
                }
            }
        },
        "FUN_080004d4": {
            "entrypoint": "0x080004d4",
            "current_name": "initialize_servos_080004d4",
            "code": "\nvoid initialize_servos_080004d4(int status,int value)\n\n{\n  int counter;\n  undefined *servo_ptr;\n  \n  if (status != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    servo_ptr = &DAT_2000022c;\n    for (counter = 0xb; -1 < counter; counter = counter + -1) {\n      Servo(servo_ptr);\n      servo_ptr = servo_ptr + 3;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004d4": "initialize_servos_080004d4",
                "param_1": "status",
                "param_2": "value",
                "iVar1": "counter",
                "puVar2": "servo_ptr"
            },
            "calling": [],
            "called": [
                "FUN_08002580"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080004d4": {
                    "1": "process_servo",
                    "4": "servo_control",
                    "5": "initialize_servos",
                    "2": "servo_controller",
                    "3": "process_servo_data"
                },
                "param_1": {
                    "4": "input_flag",
                    "1": "input_param",
                    "3": "input_value",
                    "10": "status"
                },
                "param_2": {
                    "1": "selection",
                    "2": "flag_value",
                    "19": "value"
                },
                "iVar1": {
                    "5": "loop_counter",
                    "3": "iteration",
                    "1": "loop_index",
                    "13": "counter",
                    "7": "index"
                },
                "puVar2": {
                    "1": "servo_data_pointer",
                    "3": "servo_address",
                    "4": "servo_data",
                    "2": "servo_data_ptr",
                    "7": "servo_ptr"
                }
            }
        },
        "FUN_08000500": {
            "entrypoint": "0x08000500",
            "current_name": "initialize_servo_08000500",
            "code": "\nvoid initialize_servo_08000500(int servo_index,int pin_mode,int timer_value,undefined4 unused)\n\n{\n  if (0xb < DAT_200001ed) {\n    send_error_message(&DAT_200003d4,\"Max servos attached\",timer_value,unused,unused);\n    return;\n  }\n  if (DAT_2000011c == 0) {\n    (&DAT_200001f0)[servo_index] = DAT_200001ed;\n    DAT_200001ed = DAT_200001ed + 1;\n  }\n  else {\n    (&DAT_200001f0)[servo_index] = (&DAT_2000011f)[DAT_2000011c];\n    DAT_2000011c = DAT_2000011c - 1;\n  }\n  if ((0 < pin_mode) && (0 < timer_value)) {\n    update_pin_mode_and_timer(&DAT_2000022c + (uint)(byte_data)(&DAT_200001f0)[servo_index] * 3,servo_index,pin_mode,timer_value);\n    return;\n  }\n  initialize_pin_mode_and_timer(&DAT_2000022c + (uint)(byte_data)(&DAT_200001f0)[servo_index] * 3,servo_index);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000500": "initialize_servo_08000500",
                "param_1": "servo_index",
                "param_2": "pin_mode",
                "param_3": "timer_value",
                "param_4": "unused",
                "send_string_with_offset_08002f14": "send_error_message",
                "update_pin_mode_and_timer_080025ac": "update_pin_mode_and_timer",
                "byte": "byte_data",
                "initialize_pin_mode_and_timer_08002634": "initialize_pin_mode_and_timer"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "called": [
                "FUN_080025ac",
                "FUN_08002634",
                "FUN_08002f14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000500": {
                    "1": "attach_or_update_servo",
                    "11": "attach_servo",
                    "13": "initialize_servo"
                },
                "param_1": {
                    "29": "servo_index",
                    "2": "pin_number"
                },
                "param_2": {
                    "4": "pin_number",
                    "1": "value1",
                    "24": "pin_mode"
                },
                "param_3": {
                    "1": "value2",
                    "3": "timer_mode",
                    "9": "timer_value",
                    "2": "timer_setting",
                    "4": "value1",
                    "6": "timer"
                },
                "param_4": {
                    "1": "unknown_param",
                    "5": "unused",
                    "2": "value",
                    "4": "value2",
                    "3": "unused_param"
                },
                "send_string_with_offset_08002f14": {
                    "1": "send_error",
                    "28": "send_error_message"
                },
                "DAT_200001ed": {
                    "1": "servo_limit",
                    "2": "max_servo_count",
                    "10": "max_servos"
                },
                "DAT_200003d4": {
                    "1": "error_message_offset",
                    "2": "error_string",
                    "12": "error_message"
                },
                "DAT_2000011c": {
                    "1": "reserve_index",
                    "2": "servo_stack_ptr",
                    "4": "servo_count"
                },
                "DAT_200001f0": {
                    "1": "servo_positions",
                    "2": "servo_data",
                    "6": "servo_array",
                    "4": "servo_mapping"
                },
                "DAT_2000011f": {
                    "1": "prev_servo_array",
                    "4": "servo_stack"
                },
                "update_pin_mode_and_timer_080025ac": {
                    "1": "update_pin_and_timer",
                    "3": "set_pin_mode_and_timer",
                    "24": "update_pin_mode_and_timer"
                },
                "DAT_2000022c": {
                    "2": "pin_mode_and_timer_data",
                    "1": "pin_config_array",
                    "12": "pin_data"
                },
                "byte": {
                    "1": "byte_value"
                },
                "initialize_pin_mode_and_timer_08002634": {
                    "1": "initialize_pin_and_timer",
                    "28": "initialize_pin_mode_and_timer"
                },
                "DAM_200003d4": {
                    "1": "error_message"
                },
                "DAM_2000011c": {
                    "1": "stack_pointer"
                },
                "DAT_20000111f": {
                    "1": "reverse_servo_array"
                },
                "&DAT_200001f0[param_1]": {
                    "1": "servo_count_ptr"
                },
                "&DAT_2000011f": {
                    "1": "servo_stack"
                },
                "&DAT_2000022c[param_1 * 3]": {
                    "1": "pin_mode_and_timer_ptr"
                },
                "&DAT_200003d4": {
                    "1": "error_message"
                },
                "&DAT_200001f0": {
                    "1": "servo_array"
                },
                "&DAT_2000022c": {
                    "1": "pin_modes_and_timers"
                },
                "D211c": {
                    "1": "dat_index"
                },
                "0 < DAT_200001ed": {
                    "1": "max_servos_exceeded"
                },
                "0 < param_2": {
                    "1": "valid_pin_mode"
                },
                "0 < param_3": {
                    "1": "valid_timer"
                },
                "(uint)(byte)(&DAT_200001f0)[servoIndex] * 3": {
                    "1": "servo_index_offset_calculation"
                }
            }
        },
        "FUN_08000588": {
            "entrypoint": "0x08000588",
            "current_name": "detach_and_update_data_08000588",
            "code": "\nvoid detach_and_update_data_08000588(int index)\n\n{\n  detach(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[index] * 3);\n  if (((&DAT_200001f0)[index] == DAT_200001ed) && (DAT_200001ed != '\\0')) {\n    DAT_200001ed = DAT_200001ed + -1;\n  }\n  else if (DAT_200001ed != '\\0') {\n    DAT_2000011c = DAT_2000011c + 1;\n    (&DAT_2000011f)[DAT_2000011c] = (&DAT_200001f0)[index];\n  }\n  (&DAT_200001f0)[index] = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000588": "detach_and_update_data_08000588",
                "param_1": "index"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "called": [
                "FUN_08002644"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000588": {
                    "1": "reverse_detached",
                    "9": "detach_and_update_data",
                    "2": "detach_and_reset_value",
                    "6": "detach_and_update"
                },
                "param_1": {
                    "1": "buffer",
                    "2": "input_index",
                    "27": "index"
                },
                "DAT_200001ed": {
                    "1": "counter",
                    "2": "last_value",
                    "3": "current_byte",
                    "8": "current_value"
                },
                "DAT_2000011c": {
                    "1": "new_index",
                    "7": "count",
                    "17": "counter"
                },
                "DAT_200001f0": {
                    "5": "data_array",
                    "4": "data",
                    "1": "input_array",
                    "3": "byte_array"
                },
                "&DAT_2000022c": {
                    "1": "ptr_data_a"
                },
                "&DAT_200001f0": {
                    "5": "data",
                    "3": "data_array",
                    "1": "ptr_data_2"
                },
                "&DAT_2000011f": {
                    "1": "added_values",
                    "2": "updated_data"
                },
                "DAT_2000022c": {
                    "1": "ptr_data",
                    "3": "data_offset",
                    "2": "data_pointer"
                },
                "DAT_2000011f": {
                    "2": "updated_data",
                    "1": "updated_status_array",
                    "3": "modified_array"
                },
                "FUN_08002644": {
                    "1": "update_data"
                },
                "param_2": {
                    "1": "param_2"
                },
                "param_3": {
                    "1": "param_3"
                },
                "param_4": {
                    "1": "param_4"
                },
                "0xff": {
                    "2": "reset_value"
                }
            }
        },
        "FUN_080005e0": {
            "entrypoint": "0x080005e0",
            "current_name": "initialize_data_080005e0",
            "code": "\nvoid initialize_data_080005e0(void)\n\n{\n  DAT_20000170 = 0;\n  DAT_20000004 = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005e0": "initialize_data_080005e0"
            },
            "calling": [
                "FUN_08000aec",
                "FUN_080005f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080005e0": {
                    "30": "initialize_data",
                    "1": "initialize_variables"
                },
                "DAT_20000170": {
                    "1": "initialized_flag",
                    "4": "data_counter",
                    "2": "data_initialized",
                    "10": "data_flag"
                },
                "DAT_20000004": {
                    "1": "default_byte",
                    "3": "max_value",
                    "4": "default_data_value",
                    "2": "value",
                    "6": "data_value"
                },
                "VAR_20000170": {
                    "1": "counter"
                },
                "VAR_20000004": {
                    "1": "default_byte"
                },
                "": {
                    "1": ""
                },
                "PTR_20000170": {
                    "1": "data_flag"
                }
            }
        },
        "FUN_080005f8": {
            "entrypoint": "0x080005f8",
            "current_name": "configure_pin_080005f8",
            "code": "\nvoid configure_pin_080005f8(uint pin_number,int pin_mode)\n\n{\n  int pin_mode_result;\n  char should_disable_i2_c;\n  bool is_valid_pin;\n  uint shifted_value;\n  \n  pin_mode_result = get_pin_mode(&DAT_200003d4,pin_number);\n  if (pin_mode_result != 0x7f) {\n    pin_mode_result = get_pin_mode(&DAT_200003d4,pin_number);\n    if (pin_mode_result == 6) {\n      if (DAT_20000170 == '\\0') {\n        should_disable_i2_c = '\\0';\n      }\n      else {\n        should_disable_i2_c = DAT_20000170;\n        if (pin_mode == 6) {\n          should_disable_i2_c = '\\0';\n        }\n      }\n    }\n    else {\n      should_disable_i2_c = '\\0';\n    }\n    if (should_disable_i2_c != '\\0') {\n      disable_i2_c_pins();\n    }\n    if (pin_number < 0x3c) {\n      if ((&DAT_0800a908)[pin_number] == -1) {\n        is_valid_pin = false;\n      }\n      else {\n        pin_mode_result = get_digital_pin_from_name();\n        if (pin_mode_result == 0) {\n          is_valid_pin = false;\n        }\n        else {\n          pin_mode_result = pin_name_to_digital_pin((int)(char)(&DAT_0800a908)[pin_number]);\n          if (pin_mode_result == 1) {\n            is_valid_pin = false;\n          }\n          else if (pin_mode == 4) {\n            is_valid_pin = false;\n          }\n          else {\n            is_valid_pin = true;\n          }\n        }\n      }\n    }\n    else {\n      is_valid_pin = false;\n    }\n    if (is_valid_pin) {\n      if ((byte)(&DAT_200001f0)[pin_number] < 0xc) {\n        pin_mode_result = is_attached(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[pin_number] * 3);\n      }\n      else {\n        pin_mode_result = 0;\n      }\n      if (pin_mode_result != 0) {\n        detach_servo(pin_number);\n      }\n    }\n    shifted_value = pin_number - 0x2e & 0xff;\n    if (shifted_value < 0xe) {\n      if (pin_number < 0x3c) {\n        pin_mode_result = (int)(char)(&DAT_0800a908)[pin_number];\n      }\n      else {\n        pin_mode_result = -1;\n      }\n      pin_mode_result = digital_pin_result;\n      if (pin_mode_result == 0) {\n        is_valid_pin = false;\n      }\n      else {\n        if (pin_number < 0x3c) {\n          pin_mode_result = (int)(char)(&DAT_0800a908)[pin_number];\n        }\n        else {\n          pin_mode_result = -1;\n        }\n        pin_mode_result = digital_pin_result;\n        if (pin_mode_result == 1) {\n          is_valid_pin = false;\n        }\n        else {\n          is_valid_pin = true;\n        }\n      }\n    }\n    else {\n      is_valid_pin = false;\n    }\n    if (is_valid_pin) {\n      report_analog_callback(shifted_value,pin_mode == 2);\n    }\n    if (pin_number < 0x3c) {\n      if ((&DAT_0800a908)[pin_number] == -1) {\n        is_valid_pin = false;\n      }\n      else {\n        pin_mode_result = get_digital_pin_from_name();\n        if (pin_mode_result == 0) {\n          is_valid_pin = false;\n        }\n        else {\n          pin_mode_result = pin_name_to_digital_pin((int)(char)(&DAT_0800a908)[pin_number]);\n          if (pin_mode_result == 1) {\n            is_valid_pin = false;\n          }\n          else {\n            is_valid_pin = true;\n          }\n        }\n      }\n    }\n    else {\n      is_valid_pin = false;\n    }\n    if (is_valid_pin) {\n      if ((pin_mode == 0) || (pin_mode == 0xb)) {\n        (&DAT_20000174)[pin_number >> 3] = (&DAT_20000174)[pin_number >> 3] | (byte)(1 << (pin_number & 7));\n      }\n      else {\n        (&DAT_20000174)[pin_number >> 3] = (&DAT_20000174)[pin_number >> 3] & ~(byte)(1 << (pin_number & 7));\n      }\n    }\n    set_pin_state(&DAT_200003d4,pin_number,0);\n    switch(pin_mode) {\n    case 0:\n      if (pin_number < 0x3c) {\n        if ((&DAT_0800a908)[pin_number] == -1) {\n          is_valid_pin = false;\n        }\n        else {\n          pin_mode_result = get_digital_pin_from_name();\n          if (pin_mode_result == 0) {\n            is_valid_pin = false;\n          }\n          else {\n            pin_mode_result = pin_name_to_digital_pin((int)(char)(&DAT_0800a908)[pin_number]);\n            if (pin_mode_result == 1) {\n              is_valid_pin = false;\n            }\n            else {\n              is_valid_pin = true;\n            }\n          }\n        }\n      }\n      else {\n        is_valid_pin = false;\n      }\n      if (is_valid_pin) {\n        set_pin_mode(pin_number,0);\n        set_pin_mode(&DAT_200003d4,pin_number,0);\n        return;\n      }\n      break;\n    case 1:\n      if (pin_number < 0x3c) {\n        if ((&DAT_0800a908)[pin_number] == -1) {\n          is_valid_pin = false;\n        }\n        else {\n          pin_mode_result = get_digital_pin_from_name();\n          if (pin_mode_result == 0) {\n            is_valid_pin = false;\n          }\n          else {\n            pin_mode_result = pin_name_to_digital_pin((int)(char)(&DAT_0800a908)[pin_number]);\n            if (pin_mode_result == 1) {\n              is_valid_pin = false;\n            }\n            else {\n              is_valid_pin = true;\n            }\n          }\n        }\n      }\n      else {\n        is_valid_pin = false;\n      }\n      if (is_valid_pin) {\n        pin_mode_result = get_pin_mode(&DAT_200003d4,pin_number);\n        if (pin_mode_result == 3) {\n          digital_write(pin_number,0);\n        }\n        set_pin_mode(pin_number,1);\n        set_pin_mode(&DAT_200003d4,pin_number,1);\n        return;\n      }\n      break;\n    case 2:\n      if (shifted_value < 0xe) {\n        if (pin_number < 0x3c) {\n          pin_mode_result = (int)(char)(&DAT_0800a908)[pin_number];\n        }\n        else {\n          pin_mode_result = -1;\n        }\n        pin_mode_result = digital_pin_result;\n        if (pin_mode_result == 0) {\n          is_valid_pin = false;\n        }\n        else {\n          if (pin_number < 0x3c) {\n            pin_mode_result = (int)(char)(&DAT_0800a908)[pin_number];\n          }\n          else {\n            pin_mode_result = -1;\n          }\n          pin_mode_result = digital_pin_result;\n          if (pin_mode_result == 1) {\n            is_valid_pin = false;\n          }\n          else {\n            is_valid_pin = true;\n          }\n        }\n      }\n      else {\n        is_valid_pin = false;\n      }\n      if (is_valid_pin) {\n        if (pin_number < 0x3c) {\n          if ((&DAT_0800a908)[pin_number] == -1) {\n            is_valid_pin = false;\n          }\n          else {\n            pin_mode_result = get_digital_pin_from_name();\n            if (pin_mode_result == 0) {\n              is_valid_pin = false;\n            }\n            else {\n              pin_mode_result = pin_name_to_digital_pin((int)(char)(&DAT_0800a908)[pin_number]);\n              if (pin_mode_result == 1) {\n                is_valid_pin = false;\n              }\n            }\n          }\n        }\n        else {\n          is_valid_pin = false;\n        }\n        if (is_valid_pin) {\n          set_pin_mode(pin_number,0);\n        }\n        set_pin_mode(&DAT_200003d4,pin_number,2);\n        return;\n      }\n      break;\n    case 3:\n      if (pin_number < 0x3c) {\n        if ((&DAT_0800a908)[pin_number] == -1) {\n          pin_mode_result = 0;\n        }\n        else {\n          pin_mode_result = get_digital_pin_from_name();\n          if (pin_mode_result == 0) {\n            pin_mode_result = 0;\n          }\n          else {\n            pin_mode_result = pin_name_to_digital_pin((int)(char)(&DAT_0800a908)[pin_number]);\n            if (pin_mode_result == 1) {\n              pin_mode_result = 0;\n            }\n            else {\n              pin_mode_result = is_pin_in_pin_map((int)(char)(&DAT_0800a908)[pin_number],&DAT_0800a6cc);\n            }\n          }\n        }\n      }\n      else {\n        pin_mode_result = 0;\n      }\n      if (pin_mode_result != 0) {\n        set_pin_mode(pin_number,1);\n        analog_write(pin_number,0);\n        set_pin_mode(&DAT_200003d4,pin_number,3);\n        return;\n      }\n      break;\n    case 4:\n      if (pin_number < 0x3c) {\n        if ((&DAT_0800a908)[pin_number] == -1) {\n          is_valid_pin = false;\n        }\n        else {\n          pin_mode_result = get_digital_pin_from_name();\n          if (pin_mode_result == 0) {\n            is_valid_pin = false;\n          }\n          else {\n            pin_mode_result = pin_name_to_digital_pin((int)(char)(&DAT_0800a908)[pin_number]);\n            if (pin_mode_result == 1) {\n              is_valid_pin = false;\n            }\n            else {\n              is_valid_pin = true;\n            }\n          }\n        }\n      }\n      else {\n        is_valid_pin = false;\n      }\n      if (is_valid_pin) {\n        set_pin_mode(&DAT_200003d4,pin_number,4);\n        if (((byte)(&DAT_200001f0)[pin_number] != 0xff) &&\n           (pin_mode_result = is_attached(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[pin_number] * 3), pin_mode_result != 0))\n        {\n          is_valid_pin = false;\n        }\n        if (is_valid_pin) {\n          attach_servo(pin_number,0xffffffff);\n          return;\n        }\n      }\n      break;\n    default:\n      send_error_message(&DAT_200003d4,\"Unknown pin mode\");\n      break;\n    case 6:\n      if (pin_number < 0x3c) {\n        if ((&DAT_0800a908)[pin_number] == -1) {\n          pin_mode_result = 0;\n        }\n        else {\n          pin_mode_result = get_digital_pin_from_name();\n          if (pin_mode_result == 0) {\n            pin_mode_result = 0;\n          }\n          else {\n            pin_mode_result = pin_name_to_digital_pin((int)(char)(&DAT_0800a908)[pin_number]);\n            if (pin_mode_result == 1) {\n              pin_mode_result = 0;\n            }\n            else {\n              pin_mode_result = is_pin_in_pin_map((int)(char)(&DAT_0800a908)[pin_number],&DAT_0800a69c);\n              if (pin_mode_result == 0) {\n                pin_mode_result = is_pin_in_pin_map((int)(char)(&DAT_0800a908)[pin_number],&DAT_0800a66c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        pin_mode_result = 0;\n      }\n      if (pin_mode_result != 0) {\n        set_pin_mode(&DAT_200003d4,pin_number,6);\n        return;\n      }\n      break;\n    case 10:\n      break;\n    case 0xb:\n      if (pin_number < 0x3c) {\n        if ((&DAT_0800a908)[pin_number] == -1) {\n          is_valid_pin = false;\n        }\n        else {\n          pin_mode_result = get_digital_pin_from_name();\n          if (pin_mode_result == 0) {\n            is_valid_pin = false;\n          }\n          else {\n            pin_mode_result = pin_name_to_digital_pin((int)(char)(&DAT_0800a908)[pin_number]);\n            if (pin_mode_result == 1) {\n              is_valid_pin = false;\n            }\n            else {\n              is_valid_pin = true;\n            }\n          }\n        }\n      }\n      else {\n        is_valid_pin = false;\n      }\n      if (is_valid_pin) {\n        set_pin_mode(pin_number,2);\n        set_pin_mode(&DAT_200003d4,pin_number,0xb);\n        set_pin_state(&DAT_200003d4,pin_number,1);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005f8": "configure_pin_080005f8",
                "param_1": "pin_number",
                "param_2": "pin_mode",
                "iVar1": "pin_mode_result",
                "cVar2": "should_disable_i2_c",
                "bVar3": "is_valid_pin",
                "uVar4": "shifted_value",
                "getPinMode": "get_pin_mode",
                "disableI2CPins": "disable_i2_c_pins",
                "pinNametoDigitalPin": "pin_name_to_digital_pin",
                "detachServo": "detach_servo",
                "reportAnalogCallback": "report_analog_callback",
                "setPinState": "set_pin_state",
                "pinNametoDigitalPin(iVar1)": "digital_pin_result",
                "attachServo": "attach_servo",
                "send_string_with_offset_08002f14": "send_error_message",
                "pinNametoDigitalPin()": "get_digital_pin_from_name()",
                "pinMode": "set_pin_mode",
                "digitalWrite": "digital_write",
                "analogWrite": "analog_write",
                "pin_in_pinmap": "is_pin_in_pin_map",
                "attached": "is_attached",
                "setPinMode": "set_pin_mode"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_08000a64",
                "FUN_08000aec"
            ],
            "called": [
                "FUN_0800738a",
                "FUN_080088e0",
                "FUN_08002f14",
                "FUN_08008a24",
                "FUN_08002fc2",
                "FUN_08002fa8",
                "FUN_08000500",
                "FUN_080036ac",
                "FUN_08000488",
                "FUN_080005e0",
                "FUN_08002fa0",
                "FUN_080026f8",
                "FUN_08008990",
                "FUN_08000588"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080005f8": {
                    "2": "pin_mode_handler",
                    "1": "pin_management",
                    "3": "handle_pin_mode",
                    "11": "configure_pin",
                    "7": "pin_mode_control"
                },
                "param_1": {
                    "2": "pin_index",
                    "28": "pin_number",
                    "1": "pin"
                },
                "param_2": {
                    "17": "pin_mode",
                    "1": "pin_mode_value",
                    "13": "mode"
                },
                "iVar1": {
                    "1": "mode",
                    "20": "pin_mode_result",
                    "6": "pin_mode_value"
                },
                "cVar2": {
                    "1": "pin_mode_param2_result",
                    "3": "pin_state"
                },
                "bVar3": {
                    "2": "bool_var",
                    "1": "is_proper_pin_mode",
                    "3": "is_pin_valid",
                    "5": "is_valid_pin",
                    "4": "is_true"
                },
                "uVar4": {
                    "3": "analog_callback_index",
                    "1": "u_var_result",
                    "13": "shifted_value",
                    "5": "analog_pin_index",
                    "2": "index"
                },
                "getPinMode": {
                    "5": "get_pin_mode",
                    "1": "get_pin_mode_from_config"
                },
                "DAT_200003d4": {
                    "1": "pin_data",
                    "2": "pin_config",
                    "3": "pin_config_array"
                },
                "DAT_20000170": {
                    "1": "global_var",
                    "2": "global_flag"
                },
                "param_2 == 6": {
                    "1": "is_param2_equal_to6"
                },
                "disableI2CPins": {
                    "1": "disable_i2_c",
                    "6": "disable_i2_c_pins"
                },
                "param_1 < 0x3c": {
                    "1": "pin_number_check"
                },
                "&DAT_0800a908[param_1]": {
                    "1": "pin_name_val"
                },
                "pinNametoDigitalPin": {
                    "1": "get_digital_pin_from_name",
                    "2": "pin_name_to_digital_pin"
                },
                "param_2 == 4": {
                    "1": "is_param2_equal_to4"
                },
                "byte(&DAT_200001f0)[param_1]": {
                    "1": "analog_pin_array_element"
                },
                "attached(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[param_1] * 3)": {
                    "1": "is_attached"
                },
                "detachServo": {
                    "7": "detach_servo"
                },
                "param_1 - 0x2e & 0xff": {
                    "1": "shifted_pin_number"
                },
                "reportAnalogCallback": {
                    "1": "callback_report_analog",
                    "5": "report_analog_callback"
                },
                "(param_2 == 0) || (param_2 == 0xb)": {
                    "1": "is_param2_equal_to0_or11"
                },
                "(&DAT_20000174)[param_1 >> 3]": {
                    "1": "pin_state_array_element"
                },
                "param_1 >> 3": {
                    "2": "array_index"
                },
                "(byte)(1 << (param_1 & 7))": {
                    "1": "shifted_bit_value"
                },
                "setPinState": {
                    "6": "set_pin_state",
                    "1": "set_pin_digital_state"
                },
                "case 0": {
                    "1": "case0"
                },
                "case 1": {
                    "1": "case1"
                },
                "case 2": {
                    "1": "case2"
                },
                "uVar4 < 0xe": {
                    "1": "is_shifted_value_less_than14"
                },
                "pinNametoDigitalPin(iVar1)": {
                    "1": "digital_pin_result"
                },
                "case 3": {
                    "1": "case3"
                },
                "case 4": {
                    "1": "case4"
                },
                "byte(&DAT_200001f0)[param_1] != 0xff": {
                    "1": "is_analog_pin_number"
                },
                "&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[param_1] * 3": {
                    "1": "pin_data_array_element"
                },
                "attachServo": {
                    "7": "attach_servo"
                },
                "case 6": {
                    "1": "case6"
                },
                "case 10": {
                    "1": "case10"
                },
                "case 0xb": {
                    "1": "case11"
                },
                "send_string_with_offset_08002f14": {
                    "1": "send_unknown_pin_mode_error",
                    "6": "send_error_message"
                },
                "initialize_data_080005e0": {
                    "7": "initialize_data"
                },
                "DAT_20000174": {
                    "1": "digital_pin_array",
                    "2": "pin_state"
                },
                "DAT_200001f0": {
                    "1": "analog_pin_map"
                },
                "DAT_2000022c": {
                    "1": "servo_pin_config"
                },
                "DAT_0800a908": {
                    "1": "pin_name_config",
                    "2": "pin_name_array"
                },
                "DAT_0800a6cc": {
                    "1": "digital_pins"
                },
                "DAT_0800a69c": {
                    "1": "unknown_data4"
                },
                "DAT_0800a66c": {
                    "1": "servo_pins"
                },
                "0x7f": {
                    "1": "some_value"
                },
                "6": {
                    "1": "i2_c_mode"
                },
                "0x3c": {
                    "1": "max_pin_value"
                },
                "0xff": {
                    "1": "invalid_char_value"
                },
                "0": {
                    "1": "zero"
                },
                "1": {
                    "1": "one"
                },
                "2": {
                    "1": "two"
                },
                "3": {
                    "1": "three"
                },
                "4": {
                    "1": "four"
                },
                "10": {
                    "1": "ten"
                },
                "0xb": {
                    "1": "success_value"
                },
                "&DAT_200003d4": {
                    "1": "pin_mode_array",
                    "2": "pin_data"
                },
                "&DAT_0800a908": {
                    "1": "pin_name_array"
                },
                "pinNametoDigitalPin()": {
                    "1": "get_digital_pin_from_name()"
                },
                "(int)(char)(&DAT_0800a908)[param_1]": {
                    "1": "pin_name"
                },
                "(byte)(&DAT_200001f0)[param_1]": {
                    "1": "analog_pin_value"
                },
                "&DAT_2000022c": {
                    "1": "servo_pins"
                },
                "&DAT_200001f0": {
                    "1": "servo_pin_array2"
                },
                "&DAT_20000174": {
                    "1": "pin_state_array"
                },
                "1 << (param_1 & 7)": {
                    "1": "bit_mask"
                },
                "0x2e": {
                    "1": "offset_value"
                },
                "&DAT_0800a6cc": {
                    "1": "pin_map_array1"
                },
                "&DAT_0800a66c": {
                    "1": "some_data"
                },
                "send_string_with_offset_08002f14(&DAT_200003d4,": {
                    "1": "print_error_message("
                },
                "PIN_MODE_0": {
                    "1": "input"
                },
                "PIN_MODE_1": {
                    "1": "output"
                },
                "PIN_MODE_2": {
                    "1": "servo"
                },
                "PIN_MODE_3": {
                    "1": "pwm"
                },
                "PIN_MODE_4": {
                    "1": "input_pullup"
                },
                "PIN_MODE_0xB": {
                    "1": "interrupt"
                },
                "configure_pin_080088e0": {
                    "1": "configure_pin_with_value",
                    "4": "configure_pin"
                },
                "configure_and_write_pin_08008a24": {
                    "6": "configure_and_write_pin"
                },
                "store_value_at_offset_08002fc2": {
                    "1": "store_value",
                    "6": "store_value_at_offset"
                },
                "update_character_08002fa8": {
                    "1": "update_character_at_offset",
                    "6": "update_character"
                },
                "FUN_08000500": {
                    "1": "configure_pin"
                },
                "find_character_index_080036ac": {
                    "7": "find_character_index"
                },
                "FUN_08000488": {
                    "1": "process_mode_two"
                },
                "get_value_from_offset_08002fa0": {
                    "1": "get_value",
                    "6": "get_value_from_offset"
                },
                "calculate_shifted_value_080026f8": {
                    "7": "calculate_shifted_value"
                },
                "configure_pin_08008990": {
                    "2": "configure_pin_with_mode",
                    "1": "configure_pin2",
                    "3": "configure_pin"
                },
                "detach_and_update_data_08000588": {
                    "7": "detach_and_update_data"
                },
                "pinMode": {
                    "1": "pin_mode",
                    "4": "set_pin_mode"
                },
                "digitalWrite": {
                    "1": "write_digital",
                    "3": "digital_write"
                },
                "analogWrite": {
                    "1": "write_analog_pin",
                    "3": "analog_write"
                },
                "pin_in_pinmap": {
                    "2": "is_pin_in_pin_map",
                    "1": "is_pin_in_pinmap"
                },
                "find_value_0800738a": {
                    "4": "find_value"
                },
                "&DAT_20000170": {
                    "1": "some_data"
                },
                "DAT_200001fc": {
                    "1": "unknown_value"
                },
                "&DAT_0800a69c": {
                    "1": "some_data"
                },
                "0xc": {
                    "1": "capped_value"
                },
                "0xe": {
                    "1": "capped_value"
                },
                "&DAT_200003d4[param_1]": {
                    "1": "pin_data_val"
                },
                "DAT_200001e0": {
                    "1": "pin_analog_callback"
                },
                "DAT_200002ac": {
                    "1": "unknown_data2"
                },
                "param_3": {
                    "2": "value",
                    "1": "param3"
                },
                "attached": {
                    "1": "is_servo_attached",
                    "2": "is_attached"
                },
                "setPinMode": {
                    "1": "set_pin_mode_in_config",
                    "2": "set_pin_mode"
                },
                "send_value_with_offset": {
                    "1": "send_value_message"
                }
            }
        },
        "FUN_08000a64": {
            "entrypoint": "0x08000a64",
            "current_name": "initialize_pins_08000a64",
            "code": "\nvoid initialize_pins_08000a64(void)\n\n{\n  int pin_status;\n  uint pin_index;\n  \n  for (pin_index = 0; pin_index < 0x3c; pin_index = pin_index + 1 & 0xff) {\n    if (pin_index < 0x3c) {\n      if ((&DAT_0800a908)[pin_index] == -1) {\n        pin_status = 0;\n      }\n      else {\n        pin_status = get_pin_number();\n        if (pin_status == 0) {\n          pin_status = 0;\n        }\n        else {\n          pin_status = get_pin_number((int)(character)(&DAT_0800a908)[pin_index]);\n          if (pin_status == 1) {\n            pin_status = 0;\n          }\n          else {\n            pin_status = check_pin_in_pinmap((int)(character)(&DAT_0800a908)[pin_index],&DAT_0800a69c);\n            if (pin_status == 0) {\n              pin_status = check_pin_in_pinmap((int)(character)(&DAT_0800a908)[pin_index],&DAT_0800a66c);\n            }\n          }\n        }\n      }\n    }\n    else {\n      pin_status = 0;\n    }\n    if (pin_status != 0) {\n      set_pin_mode(pin_index,6);\n    }\n  }\n  DAT_20000170 = 1;\n  initialize_i2c(&DAT_20000314);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000a64": "initialize_pins_08000a64",
                "uVar2": "pin_index",
                "iVar1": "pin_status",
                "pinNametoDigitalPin": "get_pin_number",
                "pin_in_pinmap": "check_pin_in_pinmap",
                "setPinModeCallback": "set_pin_mode",
                "initialize_i2c_08002a26": "initialize_i2c",
                "char": "character"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_0800738a",
                "FUN_080036ac",
                "FUN_08002a26",
                "FUN_080005f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000a64": {
                    "4": "initialize_pins_and_i2c",
                    "1": "configure_pin_modes",
                    "18": "initialize_pins",
                    "3": "configure_pins"
                },
                "uVar2": {
                    "1": "index",
                    "28": "pin_index"
                },
                "iVar1": {
                    "1": "pin_state",
                    "7": "pin_result",
                    "9": "pin_status",
                    "3": "pin_value",
                    "6": "result"
                },
                "&DAT_0800a908": {
                    "1": "pin_map",
                    "2": "pin_data_array",
                    "5": "pin_array"
                },
                "pinNametoDigitalPin": {
                    "1": "pin_name_to_digital_pin",
                    "2": "get_pin_number"
                },
                "pin_in_pinmap": {
                    "1": "pin_in_pin_map",
                    "2": "check_pin_in_pinmap"
                },
                "&DAT_0800a69c": {
                    "2": "pin_map_1",
                    "1": "pinmap_array_1"
                },
                "&DAT_0800a66c": {
                    "2": "pinmap2",
                    "1": "pin_map2"
                },
                "setPinModeCallback": {
                    "2": "configure_pin",
                    "4": "set_pin_mode_callback",
                    "6": "set_pin_mode"
                },
                "DAT_20000170": {
                    "3": "flag",
                    "7": "i2c_initialized",
                    "5": "is_initialized"
                },
                "initialize_i2c_08002a26": {
                    "3": "initialize_i2_c",
                    "15": "initialize_i2c"
                },
                "(int)(char)(&DAT_0800a908)[uVar2]": {
                    "2": "pin_name"
                },
                "find_value_0800738a": {
                    "1": "find_index",
                    "7": "find_value"
                },
                "find_character_index_080036ac": {
                    "8": "find_character_index"
                },
                "configure_pin_080005f8": {
                    "8": "configure_pin"
                },
                "F0N_08000a64": {
                    "1": "initialize_pins"
                },
                "DAT_0800a69c": {
                    "3": "pin_map1",
                    "1": "pin_map_a",
                    "2": "pin_map_1"
                },
                "DAT_0800a66c": {
                    "1": "pinmap_b",
                    "2": "pin_map_2",
                    "3": "pin_map2"
                },
                "&DAT_20000314": {
                    "1": "i2c_address"
                },
                "DAT_0800a908": {
                    "1": "pin_values",
                    "2": "pin_array"
                },
                "DAT_20000314": {
                    "1": "i2c_data",
                    "3": "i2c_device_address"
                },
                "array": {
                    "1": "pin_name"
                },
                "char": {
                    "1": "character"
                },
                "input_value": {
                    "1": "value"
                },
                "character": {
                    "1": "char_to_find"
                },
                "device_address": {
                    "1": "device_addr"
                },
                "config": {
                    "1": "config_param"
                },
                "param_3": {
                    "1": "param3"
                },
                "param_4": {
                    "1": "param4"
                },
                "pin_number": {
                    "1": "pin_num"
                },
                "pin_mode": {
                    "1": "pin_mode_value"
                }
            }
        },
        "FUN_08000aec": {
            "entrypoint": "0x08000aec",
            "current_name": "initialize_pins_08000aec",
            "code": "\nvoid initialize_pins_08000aec(void)\n\n{\n  bool is_pin_valid;\n  int digital_pin;\n  uint index;\n  \n  DAT_20000171 = 1;\n  if (DAT_20000170 != '\\0') {\n    disable_i2_c_pins();\n  }\n  for (index = 0; index < 5; index = index + 1 & 0xff) {\n    (&DAT_200001e8)[index] = 0;\n    (&DAT_20000174)[index] = 0;\n    (&DAT_20000180)[index] = 0;\n  }\n  for (index = 0; index < 0x3c; index = index + 1 & 0xff) {\n    if ((index - 0x2e & 0xff) < 0xe) {\n      if (index < 0x3c) {\n        digital_pin = (int)(char)(&DAT_0800a908)[index];\n      }\n      else {\n        digital_pin = -1;\n      }\n      digital_pin = convert_pin_name_to_digital_pin(digital_pin);\n      if (digital_pin == 0) {\n        is_pin_valid = false;\n      }\n      else {\n        if (index < 0x3c) {\n          digital_pin = (int)(char)(&DAT_0800a908)[index];\n        }\n        else {\n          digital_pin = -1;\n        }\n        digital_pin = convert_pin_name_to_digital_pin(digital_pin);\n        if (digital_pin == 1) {\n          is_pin_valid = false;\n        }\n        else {\n          is_pin_valid = true;\n        }\n      }\n    }\n    else {\n      is_pin_valid = false;\n    }\n    if (is_pin_valid) {\n      set_pin_mode(index,2);\n    }\n    else {\n      if ((((index < 0x3c) && ((&DAT_0800a908)[index] != -1)) &&\n          (digital_pin = convert_pin_name_to_digital_pin(), digital_pin != 0)) &&\n         (digital_pin = convert_pin_name_to_digital_pin((int)(char)(&DAT_0800a908)[index]), digital_pin != 1)) {\n        is_pin_valid = true;\n      }\n      if (is_pin_valid) {\n        set_pin_mode(index,1);\n      }\n    }\n    (&DAT_200001f0)[index] = 0xff;\n  }\n  DAT_20000114 = 0;\n  DAT_2000011c = 0;\n  DAT_200001ed = 0;\n  DAT_20000171 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000aec": "initialize_pins_08000aec",
                "bVar1": "is_pin_valid",
                "iVar2": "digital_pin",
                "uVar3": "index",
                "disableI2CPins": "disable_i2_c_pins",
                "pinNametoDigitalPin": "convert_pin_name_to_digital_pin",
                "setPinModeCallback": "set_pin_mode"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_080036ac",
                "FUN_080005e0",
                "FUN_080005f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000aec": {
                    "15": "initialize_pins",
                    "2": "initialize_i2_c",
                    "1": "initialize_gpio",
                    "6": "initialize_io",
                    "3": "initialize_pin_modes"
                },
                "bVar1": {
                    "6": "is_pin_valid",
                    "1": "is_pin_enabled",
                    "2": "is_pin_mode_callback",
                    "3": "is_digital_pin"
                },
                "iVar2": {
                    "1": "pin",
                    "6": "pin_number",
                    "4": "pin_value",
                    "2": "pin_name",
                    "12": "digital_pin"
                },
                "uVar3": {
                    "2": "loop_counter",
                    "1": "loop_index",
                    "4": "pin_index",
                    "3": "i",
                    "15": "index"
                },
                "disableI2CPins": {
                    "1": "disable_i2_c_function",
                    "2": "disable_i2_c_pin_functionality",
                    "3": "disable_i2_c_functionality",
                    "10": "disable_i2_c_pins"
                },
                "pinNametoDigitalPin": {
                    "1": "get_digital_pin",
                    "9": "convert_pin_name_to_digital_pin"
                },
                "setPinModeCallback": {
                    "1": "register_pin_mode_callback",
                    "7": "set_pin_mode_callback",
                    "17": "set_pin_mode"
                },
                "DAT_20000171": {
                    "1": "is_initialization_complete",
                    "11": "is_initialized"
                },
                "FUN_080036ac": {
                    "1": "calculate_index"
                },
                "FUN_080005e0": {
                    "1": "disable_i2_c_pins"
                },
                "FUN_080005f8": {
                    "1": "pin_mode_callback"
                },
                "DAT_20000170": {
                    "1": "disable_i2_c_pins_flag",
                    "7": "is_i2_c_enabled"
                },
                "DAT_200001e8": {
                    "1": "digital_pin_values"
                },
                "DAT_20000174": {
                    "1": "output_buffer"
                },
                "DAT_20000180": {
                    "1": "pin_mode_array3"
                },
                "DAT_200001f0": {
                    "1": "result_array"
                },
                "DAT_20000114": {
                    "1": "dat14",
                    "2": "variable1"
                },
                "DAT_2000011c": {
                    "1": "count2",
                    "2": "variable2"
                },
                "DAT_200001ed": {
                    "2": "variable3",
                    "1": "unknown_variable3"
                },
                "DAT_0800a908": {
                    "1": "dat_a908",
                    "2": "pin_names_array"
                },
                "param_1": {
                    "1": "unused"
                },
                "(&DAT_200001e8)[uVar3]": {
                    "1": "some_variable1"
                },
                "(&DAT_20000174)[uVar3]": {
                    "1": "some_variable2"
                },
                "(&DAT_20000180)[uVar3]": {
                    "1": "pin_mode_array[u_var3]"
                },
                "(int)(char)(&DAT_0800a908)[uVar3]": {
                    "1": "mapped_pin_name"
                },
                "(&DAT_200001f0)[uVar3]": {
                    "1": "variable4"
                },
                "&DAT_200001e8": {
                    "1": "array1"
                },
                "&DAT_20000174": {
                    "1": "digital_pin_array"
                },
                "&DAT_20000180": {
                    "1": "pin_mode_args"
                },
                "&DAT_200001f0": {
                    "1": "pin_statuses"
                },
                "(&DAT_0800a908)[uVar3]": {
                    "1": "pin_name"
                },
                "initializePins": {
                    "1": "initialize_pins"
                },
                "&DAT_0800a908": {
                    "1": "pin_name_array"
                },
                "initializeAndSetPinModes": {
                    "1": "void"
                },
                "D8s": {
                    "1": "number_of_pins"
                }
            }
        },
        "FUN_08000be8": {
            "entrypoint": "0x08000be8",
            "current_name": "send_digital_port_08000be8",
            "code": "\nvoid send_digital_port_08000be8(int port_offset,uint port_mask,int condition,undefined4 param)\n\n{\n  undefined1 *data_ptr;\n  undefined1 *filtered_data;\n  \n  data_ptr = &DAT_20000174;\n  filtered_data = (undefined1 *)((byte)(&DAT_20000174)[port_offset] & port_mask);\n  if ((condition != 0) ||\n     (data_ptr = (undefined1 *)(uint)(byte)(&DAT_20000180)[port_offset], filtered_data != data_ptr)) {\n    send_digital_port_08000be8_with_offset(&DAT_200003d4,port_offset,filtered_data,data_ptr,param);\n    (&DAT_20000180)[port_offset] = (char)filtered_data;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000be8": "send_digital_port_08000be8",
                "param_1": "port_offset",
                "param_2": "port_mask",
                "param_3": "condition",
                "param_4": "param",
                "puVar1": "data_ptr",
                "puVar2": "filtered_data",
                "send_digital_port_with_offset_08002efe": "send_digital_port_with_offset"
            },
            "calling": [
                "FUN_08000ef8"
            ],
            "called": [
                "FUN_08002efe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000be8": {
                    "10": "send_digital_port_data",
                    "1": "send_digital_with_offset",
                    "12": "send_digital_port",
                    "3": "send_port_data"
                },
                "param_1": {
                    "1": "data_index",
                    "8": "port_index",
                    "17": "port_offset",
                    "4": "port_number"
                },
                "param_2": {
                    "5": "mask",
                    "2": "param_mask",
                    "1": "filter",
                    "10": "port_mask",
                    "8": "bit_mask"
                },
                "param_3": {
                    "4": "flag",
                    "1": "condition_check",
                    "20": "condition"
                },
                "param_4": {
                    "2": "additional_param",
                    "5": "param4",
                    "1": "unknown_param",
                    "4": "param_4",
                    "12": "param"
                },
                "puVar1": {
                    "1": "port_start",
                    "4": "port_data",
                    "2": "data_ptr1",
                    "6": "data_ptr",
                    "3": "data_ptr_1"
                },
                "puVar2": {
                    "8": "filtered_data",
                    "1": "filtered_data_value",
                    "2": "filtered_data_ptr",
                    "3": "data_ptr_2"
                },
                "send_digital_port_with_offset_08002efe": {
                    "1": "send_digital_port_with_offset"
                }
            }
        },
        "FUN_08000ef8": {
            "entrypoint": "0x08000ef8",
            "current_name": "update_output_ports_08000ef8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001ade) */\n/* WARNING: Removing unreachable block (ram,0x08001a4a) */\n/* WARNING: Removing unreachable block (ram,0x080019b6) */\n/* WARNING: Removing unreachable block (ram,0x08001912) */\n/* WARNING: Removing unreachable block (ram,0x08001866) */\n/* WARNING: Removing unreachable block (ram,0x080017d2) */\n/* WARNING: Removing unreachable block (ram,0x0800173e) */\n/* WARNING: Removing unreachable block (ram,0x0800169a) */\n/* WARNING: Removing unreachable block (ram,0x080015ee) */\n/* WARNING: Removing unreachable block (ram,0x0800155a) */\n/* WARNING: Removing unreachable block (ram,0x08001490) */\n/* WARNING: Removing unreachable block (ram,0x080014a2) */\n/* WARNING: Removing unreachable block (ram,0x080014e4) */\n/* WARNING: Removing unreachable block (ram,0x080014b0) */\n/* WARNING: Removing unreachable block (ram,0x080014ba) */\n/* WARNING: Removing unreachable block (ram,0x080014e8) */\n/* WARNING: Removing unreachable block (ram,0x080014c2) */\n/* WARNING: Removing unreachable block (ram,0x080014b6) */\n/* WARNING: Removing unreachable block (ram,0x08001496) */\n/* WARNING: Removing unreachable block (ram,0x08001430) */\n/* WARNING: Removing unreachable block (ram,0x08001376) */\n/* WARNING: Removing unreachable block (ram,0x080012e2) */\n/* WARNING: Removing unreachable block (ram,0x0800124e) */\n/* WARNING: Removing unreachable block (ram,0x080011b8) */\n/* WARNING: Removing unreachable block (ram,0x08001100) */\n/* WARNING: Removing unreachable block (ram,0x0800106c) */\n/* WARNING: Removing unreachable block (ram,0x08000fd8) */\n/* WARNING: Removing unreachable block (ram,0x08000f42) */\n/* WARNING: Removing unreachable block (ram,0x08000f8e) */\n/* WARNING: Removing unreachable block (ram,0x08001022) */\n/* WARNING: Removing unreachable block (ram,0x080010b6) */\n/* WARNING: Removing unreachable block (ram,0x0800114a) */\n/* WARNING: Removing unreachable block (ram,0x08001204) */\n/* WARNING: Removing unreachable block (ram,0x08001298) */\n/* WARNING: Removing unreachable block (ram,0x0800132c) */\n/* WARNING: Removing unreachable block (ram,0x080013c0) */\n/* WARNING: Removing unreachable block (ram,0x0800147c) */\n/* WARNING: Removing unreachable block (ram,0x08001510) */\n/* WARNING: Removing unreachable block (ram,0x080015a4) */\n/* WARNING: Removing unreachable block (ram,0x08001638) */\n/* WARNING: Removing unreachable block (ram,0x080016f4) */\n/* WARNING: Removing unreachable block (ram,0x08001788) */\n/* WARNING: Removing unreachable block (ram,0x0800181c) */\n/* WARNING: Removing unreachable block (ram,0x080018b0) */\n/* WARNING: Removing unreachable block (ram,0x0800196c) */\n/* WARNING: Removing unreachable block (ram,0x08001a00) */\n/* WARNING: Removing unreachable block (ram,0x08001a94) */\n/* WARNING: Removing unreachable block (ram,0x08001b28) */\n/* WARNING: Removing unreachable block (ram,0x080014ca) */\n\nvoid update_output_ports_08000ef8(void)\n\n{\n  byte port_value;\n  int pin_value;\n  bool is_high;\n  byte output_value;\n  \n  port_value = DAT_20000174;\n  if (DAT_200001e8 != '\\0') {\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      output_value = 0;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(3);\n      if (pin_value == 1) {\n        output_value = 0;\n      }\n      else if ((port_value & 1) == 0) {\n        output_value = 0;\n      }\n      else {\n        pin_value = read_digital_pin(0);\n        if (pin_value == 0) {\n          output_value = 0;\n        }\n        else {\n          output_value = 1;\n        }\n      }\n    }\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      is_high = false;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(2);\n      if (pin_value == 1) {\n        is_high = false;\n      }\n      else if ((port_value & 2) == 0) {\n        is_high = false;\n      }\n      else {\n        pin_value = read_digital_pin(1);\n        if (pin_value == 0) {\n          is_high = false;\n        }\n        else {\n          is_high = true;\n        }\n      }\n    }\n    if (is_high) {\n      output_value = output_value | 2;\n    }\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      is_high = false;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(10);\n      if (pin_value == 1) {\n        is_high = false;\n      }\n      else if ((port_value & 4) == 0) {\n        is_high = false;\n      }\n      else {\n        pin_value = read_digital_pin(2);\n        if (pin_value == 0) {\n          is_high = false;\n        }\n        else {\n          is_high = true;\n        }\n      }\n    }\n    if (is_high) {\n      output_value = output_value | 4;\n    }\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      is_high = false;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(0x13);\n      if (pin_value == 1) {\n        is_high = false;\n      }\n      else if ((port_value & 8) == 0) {\n        is_high = false;\n      }\n      else {\n        pin_value = read_digital_pin(3);\n        if (pin_value == 0) {\n          is_high = false;\n        }\n        else {\n          is_high = true;\n        }\n      }\n    }\n    if (is_high) {\n      output_value = output_value | 8;\n    }\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      is_high = false;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(0x15);\n      if (pin_value == 1) {\n        is_high = false;\n      }\n      else if ((port_value & 0x10) == 0) {\n        is_high = false;\n      }\n      else {\n        pin_value = read_digital_pin(4);\n        if (pin_value == 0) {\n          is_high = false;\n        }\n        else {\n          is_high = true;\n        }\n      }\n    }\n    if (is_high) {\n      output_value = output_value | 0x10;\n    }\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      is_high = false;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(0x14);\n      if (pin_value == 1) {\n        is_high = false;\n      }\n      else if ((port_value & 0x20) == 0) {\n        is_high = false;\n      }\n      else {\n        pin_value = read_digital_pin(5);\n        if (pin_value == 0) {\n          is_high = false;\n        }\n        else {\n          is_high = true;\n        }\n      }\n    }\n    if (is_high) {\n      output_value = output_value | 0x20;\n    }\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      is_high = false;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(0x1a);\n      if (pin_value == 1) {\n        is_high = false;\n      }\n      else if ((port_value & 0x40) == 0) {\n        is_high = false;\n      }\n      else {\n        pin_value = read_digital_pin(6);\n        if (pin_value == 0) {\n          is_high = false;\n        }\n        else {\n          is_high = true;\n        }\n      }\n    }\n    if (is_high) {\n      output_value = output_value | 0x40;\n    }\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      is_high = false;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(8);\n      if (pin_value == 1) {\n        is_high = false;\n      }\n      else if ((port_value & 0x80) == 0) {\n        is_high = false;\n      }\n      else {\n        pin_value = read_digital_pin(7);\n        if (pin_value == 0) {\n          is_high = false;\n        }\n        else {\n          is_high = true;\n        }\n      }\n    }\n    if (is_high) {\n      output_value = output_value | 0x80;\n    }\n    set_output_port(0,output_value);\n  }\n  port_value = DAT_20000175;\n  if (DAT_200001e9 != '\\0') {\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      output_value = 0;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(9);\n      if (pin_value == 1) {\n        output_value = 0;\n      }\n      else if ((port_value & 1) == 0) {\n        output_value = 0;\n      }\n      else {\n        pin_value = read_digital_pin(8);\n        if (pin_value == 0) {\n          output_value = 0;\n        }\n        else {\n          output_value = 1;\n        }\n      }\n    }\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      is_high = false;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(0x27);\n      if (pin_value == 1) {\n        is_high = false;\n      }\n      else if ((port_value & 2) == 0) {\n        is_high = false;\n      }\n      else {\n        pin_value = read_digital_pin(9);\n        if (pin_value == 0) {\n          is_high = false;\n        }\n        else {\n          is_high = true;\n        }\n      }\n    }\n    if (is_high) {\n      output_value = output_value | 2;\n    }\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      is_high = false;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(0x16);\n      if (pin_value == 1) {\n        is_high = false;\n      }\n      else if ((port_value & 4) == 0) {\n        is_high = false;\n      }\n      else {\n        pin_value = read_digital_pin(10);\n        if (pin_value == 0) {\n          is_high = false;\n        }\n        else {\n          is_high = true;\n        }\n      }\n    }\n    if (is_high) {\n      output_value = output_value | 4;\n    }\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      is_high = false;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(7);\n      if (pin_value == 1) {\n        is_high = false;\n      }\n      else if ((port_value & 8) == 0) {\n        is_high = false;\n      }\n      else {\n        pin_value = read_digital_pin(0xb);\n        if (pin_value == 0) {\n          is_high = false;\n        }\n        else {\n          is_high = true;\n        }\n      }\n    }\n    if (is_high) {\n      output_value = output_value | 8;\n    }\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      is_high = false;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(6);\n      if (pin_value == 1) {\n        is_high = false;\n      }\n      else if ((port_value & 0x10) == 0) {\n        is_high = false;\n      }\n      else {\n        pin_value = read_digital_pin(0xc);\n        if (pin_value == 0) {\n          is_high = false;\n        }\n        else {\n          is_high = true;\n        }\n      }\n    }\n    if (is_high) {\n      output_value = output_value | 0x10;\n    }\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      is_high = false;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(5);\n      if (pin_value == 1) {\n        is_high = false;\n      }\n      else if ((port_value & 0x20) == 0) {\n        is_high = false;\n      }\n      else {\n        pin_value = read_digital_pin(0xd);\n        if (pin_value == 0) {\n          is_high = false;\n        }\n        else {\n          is_high = true;\n        }\n      }\n    }\n    if (is_high) {\n      output_value = output_value | 0x20;\n    }\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      is_high = false;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(0x19);\n      if (pin_value == 1) {\n        is_high = false;\n      }\n      else if ((port_value & 0x40) == 0) {\n        is_high = false;\n      }\n      else {\n        pin_value = read_digital_pin(0xe);\n        if (pin_value == 0) {\n          is_high = false;\n        }\n        else {\n          is_high = true;\n        }\n      }\n    }\n    if (is_high) {\n      output_value = output_value | 0x40;\n    }\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      is_high = false;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(0x18);\n      if (pin_value == 1) {\n        is_high = false;\n      }\n      else if ((port_value & 0x80) == 0) {\n        is_high = false;\n      }\n      else {\n        pin_value = read_digital_pin(0xf);\n        if (pin_value == 0) {\n          is_high = false;\n        }\n        else {\n          is_high = true;\n        }\n      }\n    }\n    if (is_high) {\n      output_value = output_value | 0x80;\n    }\n    set_output_port(1,output_value,0);\n  }\n  port_value = DAT_20000176;\n  if (DAT_200001ea != '\\0') {\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      output_value = 0;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(0x2a);\n      if (pin_value == 1) {\n        output_value = 0;\n      }\n      else if ((port_value & 1) == 0) {\n        output_value = 0;\n      }\n      else {\n        pin_value = read_digital_pin(0x10);\n        if (pin_value == 0) {\n          output_value = 0;\n        }\n        else {\n          output_value = 1;\n        }\n      }\n    }\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      is_high = false;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(0x2c);\n      if (pin_value == 1) {\n        is_high = false;\n      }\n      else if ((port_value & 2) == 0) {\n        is_high = false;\n      }\n      else {\n        pin_value = read_digital_pin(0x11);\n        if (pin_value == 0) {\n          is_high = false;\n        }\n        else {\n          is_high = true;\n        }\n      }\n    }\n    if (is_high) {\n      output_value = output_value | 2;\n    }\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      is_high = false;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(0xd);\n      if (pin_value == 1) {\n        is_high = false;\n      }\n      else if ((port_value & 8) == 0) {\n        is_high = false;\n      }\n      else {\n        pin_value = read_digital_pin(0x13);\n        if (pin_value == 0) {\n          is_high = false;\n        }\n        else {\n          is_high = true;\n        }\n      }\n    }\n    if (is_high) {\n      output_value = output_value | 8;\n    }\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      is_high = false;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(0xe);\n      if (pin_value == 1) {\n        is_high = false;\n      }\n      else if ((port_value & 0x10) == 0) {\n        is_high = false;\n      }\n      else {\n        pin_value = read_digital_pin(0x14);\n        if (pin_value == 0) {\n          is_high = false;\n        }\n        else {\n          is_high = true;\n        }\n      }\n    }\n    if (is_high) {\n      output_value = output_value | 0x10;\n    }\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      is_high = false;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(0xf);\n      if (pin_value == 1) {\n        is_high = false;\n      }\n      else if ((port_value & 0x20) == 0) {\n        is_high = false;\n      }\n      else {\n        pin_value = read_digital_pin(0x15);\n        if (pin_value == 0) {\n          is_high = false;\n        }\n        else {\n          is_high = true;\n        }\n      }\n    }\n    if (is_high) {\n      output_value = output_value | 0x20;\n    }\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      is_high = false;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(0x17);\n      if (pin_value == 1) {\n        is_high = false;\n      }\n      else if ((port_value & 0x40) == 0) {\n        is_high = false;\n      }\n      else {\n        pin_value = read_digital_pin(0x16);\n        if (pin_value == 0) {\n          is_high = false;\n        }\n        else {\n          is_high = true;\n        }\n      }\n    }\n    if (is_high) {\n      output_value = output_value | 0x40;\n    }\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      is_high = false;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(0x2d);\n      if (pin_value == 1) {\n        is_high = false;\n      }\n      else if ((port_value & 0x80) == 0) {\n        is_high = false;\n      }\n      else {\n        pin_value = read_digital_pin(0x17);\n        if (pin_value == 0) {\n          is_high = false;\n        }\n        else {\n          is_high = true;\n        }\n      }\n    }\n    if (is_high) {\n      output_value = output_value | 0x80;\n    }\n    set_output_port(2,output_value,0);\n  }\n  port_value = DAT_20000177;\n  if (DAT_200001eb != '\\0') {\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      output_value = 0;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(0x2e);\n      if (pin_value == 1) {\n        output_value = 0;\n      }\n      else if ((port_value & 1) == 0) {\n        output_value = 0;\n      }\n      else {\n        pin_value = read_digital_pin(0x18);\n        if (pin_value == 0) {\n          output_value = 0;\n        }\n        else {\n          output_value = 1;\n        }\n      }\n    }\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      is_high = false;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(0x2f);\n      if (pin_value == 1) {\n        is_high = false;\n      }\n      else if ((port_value & 2) == 0) {\n        is_high = false;\n      }\n      else {\n        pin_value = read_digital_pin(0x19);\n        if (pin_value == 0) {\n          is_high = false;\n        }\n        else {\n          is_high = true;\n        }\n      }\n    }\n    if (is_high) {\n      output_value = output_value | 2;\n    }\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      is_high = false;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(0x30);\n      if (pin_value == 1) {\n        is_high = false;\n      }\n      else if ((port_value & 4) == 0) {\n        is_high = false;\n      }\n      else {\n        pin_value = read_digital_pin(0x1a);\n        if (pin_value == 0) {\n          is_high = false;\n        }\n        else {\n          is_high = true;\n        }\n      }\n    }\n    if (is_high) {\n      output_value = output_value | 4;\n    }\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      is_high = false;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(0x31);\n      if (pin_value == 1) {\n        is_high = false;\n      }\n      else if ((port_value & 8) == 0) {\n        is_high = false;\n      }\n      else {\n        pin_value = read_digital_pin(0x1b);\n        if (pin_value == 0) {\n          is_high = false;\n        }\n        else {\n          is_high = true;\n        }\n      }\n    }\n    if (is_high) {\n      output_value = output_value | 8;\n    }\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      is_high = false;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(0x22);\n      if (pin_value == 1) {\n        is_high = false;\n      }\n      else if ((port_value & 0x10) == 0) {\n        is_high = false;\n      }\n      else {\n        pin_value = read_digital_pin(0x1c);\n        if (pin_value == 0) {\n          is_high = false;\n        }\n        else {\n          is_high = true;\n        }\n      }\n    }\n    if (is_high) {\n      output_value = output_value | 0x10;\n    }\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      is_high = false;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(0x23);\n      if (pin_value == 1) {\n        is_high = false;\n      }\n      else if ((port_value & 0x20) == 0) {\n        is_high = false;\n      }\n      else {\n        pin_value = read_digital_pin(0x1d);\n        if (pin_value == 0) {\n          is_high = false;\n        }\n        else {\n          is_high = true;\n        }\n      }\n    }\n    if (is_high) {\n      output_value = output_value | 0x20;\n    }\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      is_high = false;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(0x2b);\n      if (pin_value == 1) {\n        is_high = false;\n      }\n      else if ((port_value & 0x40) == 0) {\n        is_high = false;\n      }\n      else {\n        pin_value = read_digital_pin(0x1e);\n        if (pin_value == 0) {\n          is_high = false;\n        }\n        else {\n          is_high = true;\n        }\n      }\n    }\n    if (is_high) {\n      output_value = output_value | 0x40;\n    }\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      is_high = false;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(0x32);\n      if (pin_value == 1) {\n        is_high = false;\n      }\n      else if ((port_value & 0x80) == 0) {\n        is_high = false;\n      }\n      else {\n        pin_value = read_digital_pin(0x1f);\n        if (pin_value == 0) {\n          is_high = false;\n        }\n        else {\n          is_high = true;\n        }\n      }\n    }\n    if (is_high) {\n      output_value = output_value | 0x80;\n    }\n    set_output_port(3,output_value,0);\n  }\n  port_value = DAT_20000178;\n  if (DAT_200001ec != '\\0') {\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      output_value = 0;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(0x29);\n      if (pin_value == 1) {\n        output_value = 0;\n      }\n      else if ((port_value & 1) == 0) {\n        output_value = 0;\n      }\n      else {\n        pin_value = read_digital_pin(0x20);\n        if (pin_value == 0) {\n          output_value = 0;\n        }\n        else {\n          output_value = 1;\n        }\n      }\n    }\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      is_high = false;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(0x28);\n      if (pin_value == 1) {\n        is_high = false;\n      }\n      else if ((port_value & 2) == 0) {\n        is_high = false;\n      }\n      else {\n        pin_value = read_digital_pin(0x21);\n        if (pin_value == 0) {\n          is_high = false;\n        }\n        else {\n          is_high = true;\n        }\n      }\n    }\n    if (is_high) {\n      output_value = output_value | 2;\n    }\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      is_high = false;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(0x26);\n      if (pin_value == 1) {\n        is_high = false;\n      }\n      else if ((port_value & 4) == 0) {\n        is_high = false;\n      }\n      else {\n        pin_value = read_digital_pin(0x22);\n        if (pin_value == 0) {\n          is_high = false;\n        }\n        else {\n          is_high = true;\n        }\n      }\n    }\n    if (is_high) {\n      output_value = output_value | 4;\n    }\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      is_high = false;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(0x25);\n      if (pin_value == 1) {\n        is_high = false;\n      }\n      else if ((port_value & 8) == 0) {\n        is_high = false;\n      }\n      else {\n        pin_value = read_digital_pin(0x23);\n        if (pin_value == 0) {\n          is_high = false;\n        }\n        else {\n          is_high = true;\n        }\n      }\n    }\n    if (is_high) {\n      output_value = output_value | 8;\n    }\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      is_high = false;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(0xc);\n      if (pin_value == 1) {\n        is_high = false;\n      }\n      else if ((port_value & 0x10) == 0) {\n        is_high = false;\n      }\n      else {\n        pin_value = read_digital_pin(0x24);\n        if (pin_value == 0) {\n          is_high = false;\n        }\n        else {\n          is_high = true;\n        }\n      }\n    }\n    if (is_high) {\n      output_value = output_value | 0x10;\n    }\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      is_high = false;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(0xb);\n      if (pin_value == 1) {\n        is_high = false;\n      }\n      else if ((port_value & 0x20) == 0) {\n        is_high = false;\n      }\n      else {\n        pin_value = read_digital_pin(0x25);\n        if (pin_value == 0) {\n          is_high = false;\n        }\n        else {\n          is_high = true;\n        }\n      }\n    }\n    if (is_high) {\n      output_value = output_value | 0x20;\n    }\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      is_high = false;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(0x1c);\n      if (pin_value == 1) {\n        is_high = false;\n      }\n      else if ((port_value & 0x40) == 0) {\n        is_high = false;\n      }\n      else {\n        pin_value = read_digital_pin(0x26);\n        if (pin_value == 0) {\n          is_high = false;\n        }\n        else {\n          is_high = true;\n        }\n      }\n    }\n    if (is_high) {\n      output_value = output_value | 0x40;\n    }\n    pin_value = get_digital_pin_from_name();\n    if (pin_value == 0) {\n      is_high = false;\n    }\n    else {\n      pin_value = get_digital_pin_from_name(0x1b);\n      if (pin_value == 1) {\n        is_high = false;\n      }\n      else if ((port_value & 0x80) == 0) {\n        is_high = false;\n      }\n      else {\n        pin_value = read_digital_pin(0x27);\n        if (pin_value == 0) {\n          is_high = false;\n        }\n        else {\n          is_high = true;\n        }\n      }\n    }\n    if (is_high) {\n      output_value = output_value | 0x80;\n    }\n    set_output_port(4,output_value,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ef8": "update_output_ports_08000ef8",
                "bVar1": "port_value",
                "iVar2": "pin_value",
                "bVar3": "is_high",
                "bVar4": "output_value",
                "pinNametoDigitalPin": "get_digital_pin_from_name",
                "outputPort": "set_output_port",
                "digitalRead": "read_digital_pin"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [
                "FUN_08000be8",
                "FUN_080036ac",
                "FUN_08008a6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000ef8": {
                    "1": "configure_port",
                    "4": "process_digital_input",
                    "11": "update_output_ports",
                    "2": "configure_output_ports"
                },
                "param_1": {
                    "1": "b_var1"
                },
                "param_2": {
                    "1": "b_var2"
                },
                "param_3": {
                    "1": "pin"
                },
                "param_4": {
                    "1": "b_var4"
                },
                "bVar1": {
                    "1": "data_byte1",
                    "5": "port_value",
                    "3": "port_config",
                    "2": "data_byte"
                },
                "iVar2": {
                    "4": "pin",
                    "1": "pin_num",
                    "6": "pin_value",
                    "2": "result"
                },
                "bVar3": {
                    "2": "flag",
                    "1": "is_pin_enabled",
                    "12": "is_high"
                },
                "bVar4": {
                    "1": "output_port_state",
                    "2": "output_data",
                    "11": "output_value",
                    "3": "result"
                },
                "pinNametoDigitalPin": {
                    "1": "get_pin_number",
                    "3": "get_digital_pin_from_name",
                    "2": "get_digital_pin"
                },
                "DAT_20000174": {
                    "1": "input_data1"
                },
                "DAT_20000175": {
                    "1": "b_var1"
                },
                "DAT_20000176": {
                    "1": "input_data3"
                },
                "DAT_20000177": {
                    "1": "input_byte4"
                },
                "DAT_20000178": {
                    "1": "b_var1"
                },
                "outputPort": {
                    "1": "write_to_output_port",
                    "2": "set_output_port_value",
                    "4": "set_output_port"
                },
                "digitalRead": {
                    "1": "read_digital_value",
                    "6": "read_digital_pin"
                },
                "DAT_200001e8": {
                    "1": "dat_200001e8"
                },
                "DAT_200001e9": {
                    "1": "dat_200001e9"
                },
                "DAT_200001ea": {
                    "1": "input_flag3"
                },
                "DAT_200001eb": {
                    "1": "enable_output_port3"
                },
                "DAT_200001ec": {
                    "1": "dat_200001ec"
                },
                "DIGITAL_PIN_0": {
                    "1": "digital_pin0"
                },
                "DIGITAL_PIN_1": {
                    "1": "digital_pin1"
                },
                "DIGITAL_PIN_2": {
                    "1": "digital_pin2"
                },
                "DIGITAL_PIN_3": {
                    "1": "digital_pin3"
                },
                "DIGITAL_PIN_4": {
                    "1": "digital_pin4"
                },
                "DIGITAL_PIN_5": {
                    "1": "digital_pin5"
                },
                "DIGITAL_PIN_6": {
                    "1": "digital_pin6"
                },
                "DIGITAL_PIN_7": {
                    "1": "digital_pin7"
                },
                "DIGITAL_PIN_8": {
                    "1": "digital_pin8"
                },
                "DIGITAL_PIN_9": {
                    "1": "digital_pin9"
                },
                "DIGITAL_PIN_10": {
                    "1": "digital_pin10"
                },
                "DIGITAL_PIN_11": {
                    "1": "digital_pin11"
                },
                "DIGITAL_PIN_12": {
                    "1": "digital_pin12"
                },
                "DIGITAL_PIN_13": {
                    "1": "digital_pin13"
                },
                "DIGITAL_PIN_14": {
                    "1": "digital_pin14"
                },
                "DIGITAL_PIN_15": {
                    "1": "digital_pin15"
                },
                "DIGITAL_PIN_16": {
                    "1": "digital_pin16"
                },
                "DIGITAL_PIN_17": {
                    "1": "digital_pin17"
                },
                "DIGITAL_PIN_18": {
                    "1": "digital_pin18"
                },
                "DIGITAL_PIN_19": {
                    "1": "digital_pin19"
                },
                "DIGITAL_PIN_20": {
                    "1": "digital_pin20"
                },
                "DIGITAL_PIN_21": {
                    "1": "digital_pin21"
                },
                "DIGITAL_PIN_22": {
                    "1": "digital_pin22"
                },
                "DIGITAL_PIN_23": {
                    "1": "digital_pin23"
                },
                "DIGITAL_PIN_24": {
                    "1": "digital_pin24"
                },
                "DIGITAL_PIN_25": {
                    "1": "digital_pin25"
                },
                "DIGITAL_PIN_26": {
                    "1": "digital_pin26"
                },
                "DIGITAL_PIN_27": {
                    "1": "digital_pin27"
                },
                "DIGITAL_PIN_28": {
                    "1": "digital_pin28"
                },
                "DIGITAL_PIN_29": {
                    "1": "digital_pin29"
                },
                "DIGITAL_PIN_30": {
                    "1": "digital_pin30"
                },
                "DIGITAL_PIN_31": {
                    "1": "digital_pin31"
                },
                "DIGITAL_PIN_32": {
                    "1": "digital_pin32"
                },
                "DIGITAL_PIN_33": {
                    "1": "digital_pin33"
                },
                "DIGITAL_PIN_34": {
                    "1": "digital_pin34"
                },
                "DIGITAL_PIN_35": {
                    "1": "digital_pin35"
                },
                "DIGITAL_PIN_36": {
                    "1": "digital_pin36"
                },
                "DIGITAL_PIN_37": {
                    "1": "digital_pin37"
                },
                "DIGITAL_PIN_38": {
                    "1": "digital_pin38"
                },
                "DIGITAL_PIN_39": {
                    "1": "digital_pin39"
                },
                "D10": {
                    "1": "digital_pin10"
                },
                "D09": {
                    "1": "digital_pin9"
                },
                "D02": {
                    "1": "digital_pin2"
                },
                "D03": {
                    "1": "digital_pin3"
                },
                "D01": {
                    "1": "digital_pin1"
                },
                "D00": {
                    "1": "digital_pin0"
                },
                "D13": {
                    "1": "digital_pin13"
                },
                "D12": {
                    "1": "digital_pin12"
                },
                "D11": {
                    "1": "digital_pin11"
                },
                "D08": {
                    "1": "digital_pin8"
                },
                "D07": {
                    "1": "digital_pin7"
                },
                "D06": {
                    "1": "digital_pin6"
                },
                "D05": {
                    "1": "digital_pin5"
                },
                "D04": {
                    "1": "digital_pin4"
                },
                "D22": {
                    "1": "digital_pin22"
                },
                "D23": {
                    "1": "digital_pin23"
                },
                "D24": {
                    "1": "digital_pin24"
                },
                "D25": {
                    "1": "digital_pin25"
                },
                "D20": {
                    "1": "digital_pin20"
                },
                "D21": {
                    "1": "digital_pin21"
                },
                "D28": {
                    "1": "digital_pin28"
                },
                "D27": {
                    "1": "digital_pin27"
                },
                "D26": {
                    "1": "digital_pin26"
                },
                "D29": {
                    "1": "digital_pin29"
                },
                "D14": {
                    "1": "digital_pin14"
                },
                "D30": {
                    "1": "digital_pin30"
                },
                "D15": {
                    "1": "digital_pin15"
                },
                "D16": {
                    "1": "digital_pin16"
                },
                "D17": {
                    "1": "digital_pin17"
                },
                "D18": {
                    "1": "digital_pin18"
                },
                "D19": {
                    "1": "digital_pin19"
                },
                "D31": {
                    "1": "digital_pin31"
                },
                "bVar2": {
                    "1": "port2_status"
                },
                "iVar1": {
                    "1": "pin_index"
                },
                "DAT_200001ed": {
                    "1": "check_condition6"
                }
            }
        },
        "FUN_08001b48": {
            "entrypoint": "0x08001b48",
            "current_name": "initialize_gateway_08001b48",
            "code": "\nvoid initialize_gateway_08001b48(void)\n\n{\n  set_firmware_name_and_version\n            (&DAT_200003d4,\"/home/bo/p2im/p2im-real_firmware_scratch/Gateway/StandardFirmata.ino\",2,\n             5);\n  update_data(&DAT_200003d4,0xe0,0x8000215);\n  update_data(&DAT_200003d4,0x90,&label1);\n  update_data(&DAT_200003d4,0xc0,0x8000489);\n  update_data(&DAT_200003d4,0xd0,&label2);\n  update_data(&DAT_200003d4,0xf4,0x80005f9);\n  update_data(&DAT_200003d4,0xf5,&label3);\n  initialize_data(&DAT_200003d4,0xf0,0x8001cd1);\n  update_status_data(&DAT_200003d4,0xff,0x8000aed);\n  initialize_device(&DAT_200003d4,0xe100);\n  system_reset_callback();\n  start_fork_server(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001b48": "initialize_gateway_08001b48",
                "update_data_08002f2c": "update_data",
                "initialize_device_08003048": "initialize_device",
                "update_data_08002f84": "update_status_data",
                "initialize_data_08002f94": "initialize_data",
                "systemResetCallback": "system_reset_callback",
                "startForkserver": "start_fork_server",
                "setFirmwareNameAndVersion": "set_firmware_name_and_version",
                "LAB_080002ec_1": "label1",
                "LAB_08000c18_1": "label2",
                "LAB_080001a8_1": "label3"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [
                "FUN_08002f2c",
                "FUN_08003048",
                "FUN_08002f84",
                "FUN_08002f94",
                "FUN_0800018c",
                "FUN_08002e44",
                "FUN_08000aec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001b48": {
                    "26": "initialize_gateway",
                    "1": "initialize_system",
                    "4": "initialize_firmware"
                },
                "update_data_08002f2c": {
                    "3": "update_firmware_data",
                    "27": "update_data",
                    "1": "update_gateway_data"
                },
                "initialize_device_08003048": {
                    "1": "initialize_gateway_device",
                    "30": "initialize_device"
                },
                "update_data_08002f84": {
                    "1": "update_data2",
                    "3": "update_data_status",
                    "5": "update_status",
                    "20": "update_status_data"
                },
                "initialize_data_08002f94": {
                    "30": "initialize_data",
                    "1": "initialize_gateway_data"
                },
                "systemResetCallback": {
                    "1": "reset_system",
                    "2": "reset_system_callback",
                    "3": "system_reset_callback"
                },
                "startForkserver": {
                    "4": "start_fork_server",
                    "1": "start_gateway_forkserver"
                },
                "execute_afl_call_0800018c": {
                    "24": "execute_afl_call"
                },
                "extract_file_name_08002e44": {
                    "28": "extract_file_name"
                },
                "initialize_pins_08000aec": {
                    "27": "initialize_pins"
                },
                "setFirmwareNameAndVersion": {
                    "1": "set_firmware_info",
                    "2": "set_gateway_firmware_name_and_version",
                    "4": "set_firmware_name_and_version"
                },
                "param1": {
                    "1": "device_address"
                },
                "code": {
                    "1": "data_type"
                },
                "new_value": {
                    "1": "new_value"
                },
                "device_address": {
                    "1": "device_address"
                },
                "firmware_version": {
                    "1": "firmware_version"
                },
                "pin_number": {
                    "1": "pin_number"
                },
                "serial_port": {
                    "1": "serial_port"
                },
                "status": {
                    "1": "device_status"
                },
                "value": {
                    "1": "status_value"
                },
                "value_1": {
                    "1": "value1"
                },
                "value_2": {
                    "1": "value2"
                },
                "data_value": {
                    "1": "data_value"
                },
                "input_param": {
                    "1": "input_param"
                },
                "unused_param": {
                    "1": "unused_param"
                },
                "unused_param2": {
                    "1": "unused_param2"
                },
                "output_param": {
                    "1": "output_param"
                },
                "output_buffer": {
                    "1": "output_buffer"
                },
                "file_path": {
                    "1": "file_path"
                },
                "param3": {
                    "1": "file_param3"
                },
                "param4": {
                    "1": "file_param4"
                },
                "LAB_080002ec_1": {
                    "1": "label1"
                },
                "LAB_08000c18_1": {
                    "1": "label2"
                },
                "LAB_080001a8_1": {
                    "1": "label3"
                }
            }
        },
        "FUN_08001bf8": {
            "entrypoint": "0x08001bf8",
            "current_name": "write_data_to_device_08001bf8",
            "code": "\nvoid write_data_to_device_08001bf8(undefined4 device_address,undefined4 data,undefined4 data,undefined4 param_4)\n\n{\n  write_data(&DAT_20000314,device_address,data,param_4,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001bf8": "write_data_to_device_08001bf8",
                "param_1": "device_address",
                "param_3": "data",
                "write_data_0800288c": "write_data",
                "param_2": "data"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_0800288c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001bf8": {
                    "1": "write_data_from_device",
                    "4": "write_to_device",
                    "2": "write_data_wrapper",
                    "5": "write_data_to_address",
                    "16": "write_data_to_device"
                },
                "param_1": {
                    "30": "device_address",
                    "1": "device"
                },
                "param_3": {
                    "4": "data1",
                    "15": "data",
                    "1": "write_address",
                    "2": "data_address",
                    "6": "param_3"
                },
                "param_4": {
                    "1": "unused_param2",
                    "5": "data2",
                    "8": "param_4",
                    "2": "undefined_param",
                    "3": "data_length",
                    "6": "unused_param"
                },
                "write_data_0800288c": {
                    "1": "write_data_to_device_sub",
                    "4": "write_data",
                    "2": "write_data_to_device"
                },
                "data": {
                    "2": "data"
                },
                "param_2": {
                    "8": "data",
                    "1": "[remove]",
                    "5": "unused_param"
                },
                "device_address": {
                    "1": "device_address"
                }
            }
        },
        "FUN_08001c08": {
            "entrypoint": "0x08001c08",
            "current_name": "read_next_byte_08001c08",
            "code": "\nundefined read_next_byte_08001c08(void)\n\n{\n  undefined next_byte;\n  \n  next_byte = read_byte(&DAT_20000314);\n  return next_byte;\n}\n\n",
            "renaming": {
                "FUN_08001c08": "read_next_byte_08001c08",
                "uVar1": "next_byte",
                "get_next_byte_08002720": "read_byte"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [
                "FUN_08002720"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001c08": {
                    "17": "read_next_byte",
                    "4": "get_next_byte_from_data",
                    "7": "get_next_byte",
                    "2": "get_next_byte_from_data_section",
                    "1": "read_byte"
                },
                "uVar1": {
                    "28": "next_byte",
                    "1": "byte"
                },
                "get_next_byte_08002720": {
                    "1": "read_byte"
                }
            }
        },
        "FUN_08001c18": {
            "entrypoint": "0x08001c18",
            "current_name": "process_i2_c_data_08001c18",
            "code": "\nvoid process_i2_c_data_08001c18(undefined4 device_address,uint device_address,int expected_bytes,undefined4 data)\n\n{\n  undefined received_byte;\n  int i;\n  int difference;\n  bool has_data;\n  \n  if (device_address == 0xffffffff) {\n    device_address = 0;\n  }\n  else {\n    start_i2_c_transmission(&DAT_20000314,device_address);\n    write_wire_value(device_address & 0xff);\n    write_i2_c_data(&DAT_20000314,data);\n  }\n  request_from_i2_c(&DAT_20000314,device_address,expected_bytes);\n  i = calculate_difference(&DAT_20000314);\n  if (expected_bytes < i) {\n    send_error_message(&DAT_200003d4,\"I2C: Too many bytes received\");\n  }\n  else {\n    i = calculate_difference(&DAT_20000314);\n    if (i < expected_bytes) {\n      send_error_message(&DAT_200003d4,\"I2C: Too few bytes received\");\n    }\n  }\n  DAT_20000130 = (undefined)device_address;\n  DAT_20000131 = (undefined)device_address;\n  i = 0;\n  while( true ) {\n    if (i < expected_bytes) {\n      difference = calculate_difference(&DAT_20000314);\n      if (difference == 0) {\n        has_data = false;\n      }\n      else {\n        has_data = true;\n      }\n    }\n    else {\n      has_data = false;\n    }\n    if (!has_data) break;\n    received_byte = read_from_wire();\n    (&DAT_20000132)[i] = received_byte;\n    i = i + 1;\n  }\n  send_sysex_message(&DAT_200003d4,0x77,expected_bytes + 2U & 0xff,&DAT_20000130);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c18": "process_i2_c_data_08001c18",
                "param_1": "device_address",
                "param_2": "device_address",
                "param_3": "expected_bytes",
                "param_4": "data",
                "uVar1": "received_byte",
                "iVar2": "i",
                "iVar3": "difference",
                "bVar4": "has_data",
                "write_i2c_data_08002a58": "write_i2_c_data",
                "send_string_with_offset_08002f14": "send_error_message",
                "calculate_difference_0800270c": "calculate_difference",
                "wireRead": "read_from_wire",
                "send_sysex_with_offset_08002f0a": "send_sysex_message",
                "requestFrom": "request_from_i2_c",
                "wireWrite": "write_wire_value",
                "beginTransmission": "start_i2_c_transmission"
            },
            "calling": [
                "FUN_080022f8",
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_08002a58",
                "FUN_08002c14",
                "FUN_08002f14",
                "FUN_0800270c",
                "FUN_08002a30",
                "FUN_08002f0a",
                "FUN_08001c08",
                "FUN_08001bf8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001c18": {
                    "1": "process_i2_c_communication",
                    "12": "process_i2_c_data",
                    "2": "read_and_process_i2_c_data",
                    "5": "perform_i2_c_communication"
                },
                "param_1": {
                    "2": "address",
                    "22": "device_address",
                    "6": "status",
                    "1": "transmission_status"
                },
                "param_2": {
                    "3": "byte_count",
                    "6": "data_length",
                    "1": "transaction_code"
                },
                "param_3": {
                    "3": "expected_num_bytes",
                    "1": "bytes_to_receive",
                    "7": "expected_length",
                    "2": "expected_count",
                    "10": "expected_bytes"
                },
                "param_4": {
                    "8": "data",
                    "2": "data_to_send",
                    "3": "i2c_data",
                    "1": "i2c_data_address",
                    "7": "status",
                    "4": "input_data"
                },
                "uVar1": {
                    "1": "byte_value",
                    "5": "received_data",
                    "10": "received_byte",
                    "2": "read_byte"
                },
                "iVar2": {
                    "1": "count",
                    "9": "i",
                    "2": "received_length",
                    "7": "received_bytes",
                    "3": "difference"
                },
                "iVar3": {
                    "1": "remaining_data_length",
                    "3": "received_bytes",
                    "13": "difference"
                },
                "bVar4": {
                    "4": "has_data",
                    "1": "is_available",
                    "3": "bytes_received"
                },
                "write_i2c_data_08002a58": {
                    "2": "write_i2c_data",
                    "14": "write_i2_c_data",
                    "1": "write_data_to_i2_c"
                },
                "send_string_with_offset_08002f14": {
                    "7": "send_string_with_offset",
                    "16": "send_error_message",
                    "1": "send_error_msg"
                },
                "calculate_difference_0800270c": {
                    "2": "calculate_buffer_difference",
                    "1": "get_difference",
                    "18": "calculate_difference"
                },
                "DAT_20000130": {
                    "2": "address_byte",
                    "3": "device_address",
                    "1": "status_byte1"
                },
                "DAT_20000131": {
                    "1": "transaction_code",
                    "2": "num_bytes_byte"
                },
                "DAT_20000314": {
                    "1": "wire_buffer"
                },
                "DAT_200003d4": {
                    "1": "output_buffer"
                },
                "calculate_difference_0800270c_2": {
                    "1": "calculate_difference"
                },
                "wireRead": {
                    "1": "read_byte_from_wire",
                    "2": "read_wire",
                    "3": "read_from_wire"
                },
                "send_sysex_with_offset_08002f0a": {
                    "1": "send_data_message",
                    "14": "send_sysex_message",
                    "7": "send_sysex_with_offset"
                },
                "initialize_data_08002a30": {
                    "5": "initialize_data"
                },
                "FUN_08002c14": {
                    "1": "perform_additional_task"
                },
                "FUN_08001c08": {
                    "1": "initialize",
                    "2": "reverse_something"
                },
                "FUN_08001bf8": {
                    "1": "another_function"
                },
                "requestFrom": {
                    "1": "request_bytes_from_i2_c",
                    "4": "request_from_i2_c",
                    "2": "request_i2_c_data"
                },
                "DAT_20000132": {
                    "1": "received_data_array",
                    "3": "received_bytes",
                    "5": "received_data"
                },
                "wireWrite": {
                    "1": "write_byte_to_i2_c"
                },
                "beginTransmission": {
                    "2": "initialize_i2_c",
                    "1": "initialize_transmission"
                },
                "FUN_0800270c": {
                    "1": "calculate_difference"
                },
                "&DAT_200003d4": {
                    "1": "offset"
                },
                "&DAT_20000314": {
                    "1": "device_address_offset"
                },
                "calculateDifference_0800270c": {
                    "1": "current_difference"
                },
                "processI2CData": {
                    "1": "process_i2_c_packet"
                },
                "writeDataToI2C": {
                    "1": "write_data_to_device"
                },
                "calculate_time_difference": {
                    "1": "calculate_time_difference"
                },
                "getData": {
                    "1": "get_data"
                }
            }
        },
        "FUN_08001cd0": {
            "entrypoint": "0x08001cd0",
            "current_name": "process_command_08001cd0",
            "code": "\nvoid process_command_08001cd0(undefined4 command,int length,byte *data,undefined4 status)\n\n{\n  byte byte1;\n  byte byte2;\n  byte byte3;\n  undefined4 result;\n  byte byte4;\n  char char1;\n  int int_var1;\n  int int_var2;\n  uint uint_var1;\n  uint uint_var2;\n  int int_var3;\n  bool bool_var;\n  \n  switch(command) {\n  case 0x69:\n    execute_function(&DAT_200003d4,0xf0);\n    execute_function(&DAT_200003d4,0x6a);\n    for (uint_var1 = 0; uint_var1 < 0x3c; uint_var1 = uint_var1 + 1 & 0xff) {\n      uint_var2 = uint_var1 - 0x2e & 0xff;\n      if (uint_var2 < 0xe) {\n        if (uint_var1 < 0x3c) {\n          int_var1 = (int)(char)(&DAT_0800a908)[uint_var1];\n        }\n        else {\n          int_var1 = -1;\n        }\n        int_var1 = get_digital_pin(i_var7);\n        if (int_var1 == 0) {\n          uint_var2 = 0x7f;\n        }\n        else {\n          if (uint_var1 < 0x3c) {\n            int_var1 = (int)(char)(&DAT_0800a908)[uint_var1];\n          }\n          else {\n            int_var1 = -1;\n          }\n          int_var1 = get_digital_pin(i_var7);\n          if (int_var1 == 1) {\n            uint_var2 = 0x7f;\n          }\n        }\n      }\n      else {\n        uint_var2 = 0x7f;\n      }\n      execute_function(&DAT_200003d4,uint_var2);\n    }\n    execute_function(&DAT_200003d4,0xf7);\n    break;\n  case 0x6b:\n    execute_function(&DAT_200003d4,0xf0);\n    execute_function(&DAT_200003d4,0x6c);\n    for (uint_var1 = 0; uint_var1 < 0x3c; uint_var1 = uint_var1 + 1 & 0xff) {\n      if (uint_var1 < 0x3c) {\n        if ((&DAT_0800a908)[uint_var1] == -1) {\n          bool_var = false;\n        }\n        else {\n          int_var1 = get_digital_pin();\n          if (int_var1 == 0) {\n            bool_var = false;\n          }\n          else {\n            int_var1 = get_digital_pin((int)(char)(&DAT_0800a908)[uint_var1]);\n            if (int_var1 == 1) {\n              bool_var = false;\n            }\n            else {\n              bool_var = true;\n            }\n          }\n        }\n      }\n      else {\n        bool_var = false;\n      }\n      if (bool_var) {\n        execute_function(&DAT_200003d4,0);\n        execute_function(&DAT_200003d4,1);\n        execute_function(&DAT_200003d4,0xb);\n        execute_function(&DAT_200003d4,1);\n        execute_function(&DAT_200003d4,1);\n        execute_function(&DAT_200003d4,1);\n      }\n      if ((uint_var1 - 0x2e & 0xff) < 0xe) {\n        if (uint_var1 < 0x3c) {\n          int_var1 = (int)(char)(&DAT_0800a908)[uint_var1];\n        }\n        else {\n          int_var1 = -1;\n        }\n        int_var1 = get_digital_pin(i_var7);\n        if (int_var1 == 0) {\n          bool_var = false;\n        }\n        else {\n          if (uint_var1 < 0x3c) {\n            int_var1 = (int)(char)(&DAT_0800a908)[uint_var1];\n          }\n          else {\n            int_var1 = -1;\n          }\n          int_var1 = get_digital_pin(i_var7);\n          if (int_var1 == 1) {\n            bool_var = false;\n          }\n          else {\n            bool_var = true;\n          }\n        }\n      }\n      else {\n        bool_var = false;\n      }\n      if (bool_var) {\n        execute_function(&DAT_200003d4,2);\n        execute_function(&DAT_200003d4,10);\n      }\n      if (uint_var1 < 0x3c) {\n        if ((&DAT_0800a908)[uint_var1] == -1) {\n          int_var1 = 0;\n        }\n        else {\n          int_var1 = get_digital_pin();\n          if (int_var1 == 0) {\n            int_var1 = 0;\n          }\n          else {\n            int_var1 = get_digital_pin((int)(char)(&DAT_0800a908)[uint_var1]);\n            if (int_var1 == 1) {\n              int_var1 = 0;\n            }\n            else {\n              int_var1 = check_pin_in_map((int)(char)(&DAT_0800a908)[uint_var1],&DAT_0800a6cc);\n            }\n          }\n        }\n      }\n      else {\n        int_var1 = 0;\n      }\n      if (int_var1 != 0) {\n        execute_function(&DAT_200003d4,3);\n        execute_function(&DAT_200003d4,8);\n      }\n      if (uint_var1 < 0x3c) {\n        if ((&DAT_0800a908)[uint_var1] == -1) {\n          bool_var = false;\n        }\n        else {\n          int_var1 = get_digital_pin();\n          if (int_var1 == 0) {\n            bool_var = false;\n          }\n          else {\n            int_var1 = get_digital_pin((int)(char)(&DAT_0800a908)[uint_var1]);\n            if (int_var1 == 1) {\n              bool_var = false;\n            }\n            else {\n              bool_var = true;\n            }\n          }\n        }\n      }\n      else {\n        bool_var = false;\n      }\n      if (bool_var) {\n        execute_function(&DAT_200003d4,4);\n        execute_function(&DAT_200003d4,0xe);\n      }\n      if (uint_var1 < 0x3c) {\n        if ((&DAT_0800a908)[uint_var1] == -1) {\n          int_var1 = 0;\n        }\n        else {\n          int_var1 = get_digital_pin();\n          if (int_var1 == 0) {\n            int_var1 = 0;\n          }\n          else {\n            int_var1 = get_digital_pin((int)(char)(&DAT_0800a908)[uint_var1]);\n            if (int_var1 == 1) {\n              int_var1 = 0;\n            }\n            else {\n              int_var1 = check_pin_in_map((int)(char)(&DAT_0800a908)[uint_var1],&DAT_0800a69c);\n              if (int_var1 == 0) {\n                int_var1 = check_pin_in_map((int)(char)(&DAT_0800a908)[uint_var1],&DAT_0800a66c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        int_var1 = 0;\n      }\n      if (int_var1 != 0) {\n        execute_function(&DAT_200003d4,6);\n        execute_function(&DAT_200003d4,1);\n      }\n      execute_function(&DAT_200003d4,0x7f);\n    }\n    execute_function(&DAT_200003d4,0xf7);\n    return;\n  case 0x6d:\n    if (length != 0) {\n      byte1 = *data;\n      execute_function(&DAT_200003d4,0xf0);\n      execute_function(&DAT_200003d4,0x6e);\n      execute_function(&DAT_200003d4,byte1);\n      if (byte1 < 0x3c) {\n        result = get_pin_mode(&DAT_200003d4,byte1);\n        execute_function(&DAT_200003d4,result);\n        uint_var1 = get_pin_state(&DAT_200003d4,byte1);\n        execute_function(&DAT_200003d4,uint_var1 & 0x7f);\n        uint_var1 = get_pin_state(&DAT_200003d4,byte1);\n        if ((uint_var1 & 0xff80) != 0) {\n          int_var1 = get_pin_state(&DAT_200003d4,byte1);\n          execute_function(&DAT_200003d4,(uint)(int_var1 << 0x12) >> 0x19);\n        }\n        uint_var1 = get_pin_state(&DAT_200003d4,byte1);\n        if ((uint_var1 & 0xc000) != 0) {\n          int_var1 = get_pin_state(&DAT_200003d4,byte1);\n          execute_function(&DAT_200003d4,(uint)(int_var1 << 0xb) >> 0x19);\n        }\n      }\n      execute_function(&DAT_200003d4,0xf7);\n      return;\n    }\n    break;\n  case 0x6f:\n    if (1 < length) {\n      uint_var1 = (uint)data[1];\n      if (2 < length) {\n        uint_var1 = uint_var1 | (uint)data[2] << 7;\n      }\n      if (3 < length) {\n        uint_var1 = uint_var1 | (uint)data[3] << 0xe;\n      }\n      analog_write_callback(*data,uint_var1);\n      return;\n    }\n    break;\n  case 0x70:\n    if (4 < length) {\n      uint_var1 = (uint)*data;\n      byte1 = data[1];\n      byte4 = data[2];\n      byte2 = data[3];\n      byte3 = data[4];\n      if (uint_var1 < 0x3c) {\n        if ((&DAT_0800a908)[uint_var1] == -1) {\n          bool_var = false;\n        }\n        else {\n          int_var1 = get_digital_pin();\n          if (int_var1 == 0) {\n            bool_var = false;\n          }\n          else {\n            int_var1 = get_digital_pin((int)(char)(&DAT_0800a908)[uint_var1]);\n            if (int_var1 == 1) {\n              bool_var = false;\n            }\n            else {\n              bool_var = true;\n            }\n          }\n        }\n      }\n      else {\n        bool_var = false;\n      }\n      if (bool_var) {\n        if ((byte)(&DAT_200001f0)[uint_var1] < 0xc) {\n          int_var1 = is_attached(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[uint_var1] * 3);\n        }\n        else {\n          int_var1 = 0;\n        }\n        if (int_var1 != 0) {\n          detach_servo(uint_var1);\n        }\n        attach_servo(uint_var1,(uint)byte1 + (uint)byte4 * 0x80,(uint)byte2 + (uint)byte3 * 0x80);\n        set_pin_mode_callback(u_var9,4);\n        return;\n      }\n    }\n    break;\n  case 0x76:\n    byte1 = data[1];\n    byte4 = byte1 & 0x18;\n    if ((byte1 & 0x20) != 0) {\n      send_string_with_offset(&DAT_200003d4,\"10-bit addressing not supported\",byte4,byte1,status);\n      return;\n    }\n    byte2 = *data;\n    bool_var = (byte1 & 0x40) == 0;\n    if (byte4 < 0x19) {\n      switch(byte4) {\n      case 0:\n        start_transmission(&DAT_20000314,byte2);\n        for (uint_var1 = 2; (int)uint_var1 < length; uint_var1 = uint_var1 + 2 & 0xff) {\n          write_to_wire(data[uint_var1 + 1] * -0x80 + data[uint_var1]);\n        }\n        end_transmission(&DAT_20000314);\n        return;\n      case 8:\n        if (length == 6) {\n          int_var1 = (uint)data[2] + (uint)data[3] * 0x80;\n          char1 = data[4] + data[5] * -0x80;\n        }\n        else {\n          char1 = data[2] + data[3] * -0x80;\n          int_var1 = -1;\n        }\n        read_and_report_data(byte2,int_var1,char1);\n        return;\n      case 0x10:\n        if (DAT_20000004 + 1 < 8) {\n          if (length == 6) {\n            int_var1 = (uint)data[2] + (uint)data[3] * 0x80;\n            char1 = data[4] + data[5] * -0x80;\n          }\n          else {\n            char1 = data[2] + data[3] * -0x80;\n            int_var1 = -1;\n          }\n          DAT_20000004 = DAT_20000004 + '\\x01';\n          int_var2 = (int)DAT_20000004;\n          int_var3 = int_var2 * 0xc;\n          (&DAT_20000188)[int_var3] = byte2;\n          (&DAT_2000018c)[int_var2 * 3] = int_var1;\n          (&DAT_20000190)[int_var3] = char1;\n          (&DAT_20000191)[int_var3] = bool_var;\n          return;\n        }\n        send_string_with_offset(&DAT_200003d4,\"too many queries\",(int)DAT_20000004,bool_var,status);\n        return;\n      case 0x18:\n        if (DAT_20000004 < 1) {\n          DAT_20000004 = 0xff;\n          return;\n        }\n      }\n      for (uint_var1 = 0; int_var1 = DAT_20000004 + 1, (int)uint_var1 < int_var1; uint_var1 = uint_var1 + 1 & 0xff) {\n        if (byte2 == (&DAT_20000188)[uint_var1 * 0xc]) goto LAB_08001e66;\n      }\n      uint_var1 = 0;\nLAB_08001e66:\n      for (; (int)uint_var1 < int_var1; uint_var1 = uint_var1 + 1 & 0xff) {\n        if (uint_var1 < 8) {\n          int_var2 = (uint_var1 + 1) * 0xc;\n          int_var3 = uint_var1 * 0xc;\n          (&DAT_20000188)[int_var3] = (&DAT_20000188)[int_var2];\n          (&DAT_2000018c)[uint_var1 * 3] = (&DAT_2000018c)[(uint_var1 + 1) * 3];\n          (&DAT_20000190)[int_var3] = (&DAT_20000190)[int_var2];\n          (&DAT_20000191)[int_var3] = (&DAT_20000191)[int_var2];\n        }\n      }\n      DAT_20000004 = DAT_20000004 + -1;\n      return;\n    }\n    break;\n  case 0x78:\n    int_var1 = (uint)*data + (uint)data[1] * 0x80;\n    if ((1 < length) && (int_var1 != 0)) {\n      DAT_2000012c = int_var1;\n    }\n    if (DAT_20000170 == '\\0') {\n      enable_i2_c_pins();\n      return;\n    }\n    break;\n  case 0x7a:\n    if ((1 < length) &&\n       (DAT_20000008 = (uint)*data + (uint)data[1] * 0x80, DAT_20000008 == 0)) {\n      DAT_20000008 = 1;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cd0": "process_command_08001cd0",
                "param_1": "command",
                "param_2": "length",
                "param_3": "data",
                "param_4": "status",
                "bVar1": "byte1",
                "bVar2": "byte2",
                "bVar3": "byte3",
                "uVar4": "result",
                "bVar5": "byte4",
                "cVar6": "char1",
                "iVar7": "int_var1",
                "iVar8": "int_var2",
                "uVar9": "uint_var1",
                "uVar10": "uint_var2",
                "iVar11": "int_var3",
                "bVar12": "bool_var",
                "pinNametoDigitalPin": "get_digital_pin",
                "pin_in_pinmap": "check_pin_in_map",
                "execute_function_08002f1e": "execute_function",
                "getPinMode": "get_pin_mode",
                "getPinState": "get_pin_state",
                "analogWriteCallback": "analog_write_callback",
                "detachServo": "detach_servo",
                "attachServo": "attach_servo",
                "setPinModeCallback": "set_pin_mode_callback",
                "beginTransmission": "start_transmission",
                "wireWrite": "write_to_wire",
                "endTransmission": "end_transmission",
                "readAndReportData": "read_and_report_data",
                "send_string_with_offset_08002f14": "send_string_with_offset",
                "enableI2CPins": "enable_i2_c_pins",
                "attached": "is_attached",
                "pinNametoDigitalPin(iVar7)": "get_digital_pin(i_var7)",
                "setPinModeCallback(uVar9,4)": "set_pin_mode_callback(u_var9,4)"
            },
            "calling": [],
            "called": [
                "FUN_0800738a",
                "FUN_08002f14",
                "FUN_08001c18",
                "FUN_08000500",
                "FUN_080036ac",
                "FUN_08002f1e",
                "FUN_08002ac0",
                "FUN_08002fba",
                "FUN_08000a64",
                "FUN_08000214",
                "FUN_08002a30",
                "FUN_08002fa0",
                "FUN_080026f8",
                "FUN_080005f8",
                "FUN_08001bf8",
                "FUN_08000588"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001cd0": {
                    "6": "process_input",
                    "3": "process_data",
                    "1": "process_function",
                    "2": "handle_command",
                    "18": "process_command"
                },
                "param_1": {
                    "6": "input_type",
                    "1": "param1",
                    "7": "command_type",
                    "2": "command_code",
                    "14": "command"
                },
                "param_2": {
                    "1": "param_size",
                    "5": "param_count",
                    "2": "size",
                    "4": "param_length",
                    "3": "num_params",
                    "9": "length"
                },
                "param_3": {
                    "14": "data",
                    "1": "parameters",
                    "4": "param_array",
                    "2": "input_data"
                },
                "param_4": {
                    "1": "unused_param",
                    "10": "param4",
                    "2": "param",
                    "13": "status"
                },
                "bVar1": {
                    "15": "byte1",
                    "9": "byte_var1",
                    "2": "first_byte",
                    "1": "byte3"
                },
                "bVar2": {
                    "9": "byte_var2",
                    "1": "b2",
                    "15": "byte2",
                    "2": "second_byte"
                },
                "bVar3": {
                    "2": "third_byte",
                    "1": "byte4",
                    "9": "byte_var3",
                    "15": "byte3"
                },
                "uVar4": {
                    "1": "func_value",
                    "4": "u_var4",
                    "16": "result"
                },
                "bVar5": {
                    "8": "byte_var5",
                    "2": "byte_value4",
                    "1": "pin_state",
                    "14": "byte4"
                },
                "cVar6": {
                    "4": "char_value",
                    "2": "character",
                    "1": "c1",
                    "7": "char_var",
                    "6": "char_var6"
                },
                "iVar7": {
                    "1": "int_var",
                    "2": "int_value",
                    "10": "int_var1",
                    "3": "int1",
                    "6": "index"
                },
                "iVar8": {
                    "1": "i2",
                    "3": "int2",
                    "2": "value1",
                    "11": "int_var2"
                },
                "uVar9": {
                    "2": "loop_index",
                    "1": "value2",
                    "3": "uint1",
                    "10": "uint_var1"
                },
                "uVar10": {
                    "3": "uint2",
                    "10": "uint_var2",
                    "1": "u3"
                },
                "iVar11": {
                    "1": "temp_int3",
                    "3": "int3",
                    "11": "int_var3",
                    "4": "index3"
                },
                "bVar12": {
                    "5": "flag",
                    "1": "flag2",
                    "3": "is_true",
                    "12": "bool_var"
                },
                "pinNametoDigitalPin": {
                    "1": "map_to_digital_pin",
                    "2": "convert_pin_name_to_digital_pin",
                    "8": "get_digital_pin"
                },
                "pin_in_pinmap": {
                    "1": "pin_in_pinmap",
                    "3": "check_pin_in_map",
                    "2": "check_pin_in_pinmap"
                },
                "execute_function_08002f1e": {
                    "19": "execute_function"
                },
                "getPinMode": {
                    "7": "get_pin_mode",
                    "2": "read_pin_mode",
                    "3": "retrieve_pin_mode",
                    "1": "pin_mode_callback"
                },
                "getPinState": {
                    "3": "retrieve_pin_state",
                    "8": "get_pin_state",
                    "2": "get_state",
                    "1": "pin_state"
                },
                "analogWriteCallback": {
                    "3": "analog_write",
                    "1": "set_analog_write_callback",
                    "5": "analog_write_callback"
                },
                "detachServo": {
                    "1": "detach_servo_from_pin",
                    "15": "detach_servo"
                },
                "attachServo": {
                    "1": "attach_servo_to_pin",
                    "17": "attach_servo"
                },
                "setPinModeCallback": {
                    "1": "set_pin_mode_for_pin",
                    "12": "set_pin_mode_callback",
                    "3": "set_pin_mode"
                },
                "beginTransmission": {
                    "1": "start_i2_c_transmission",
                    "4": "begin_i2_c_transmission"
                },
                "wireWrite": {
                    "2": "wire_write",
                    "1": "write_i2_c",
                    "5": "write_to_wire"
                },
                "endTransmission": {
                    "5": "end_i2_c_transmission",
                    "1": "end_data_transmission",
                    "2": "stop_transmission"
                },
                "readAndReportData": {
                    "9": "read_and_report_data",
                    "1": "i2_c_read_and_report_data",
                    "3": "read_and_report"
                },
                "send_string_with_offset_08002f14": {
                    "14": "send_string_with_offset",
                    "1": "send_debug_message"
                },
                "enableI2CPins": {
                    "4": "enable_i2_c_pins",
                    "1": "enable_i2_c"
                },
                "find_value_0800738a": {
                    "15": "find_value"
                },
                "FUN_08001c18": {
                    "1": "process_command",
                    "2": "process_data"
                },
                "FUN_08000500": {
                    "1": "perform_operation",
                    "2": "process_data"
                },
                "find_character_index_080036ac": {
                    "13": "find_character_index",
                    "1": "find_char_index"
                },
                "FUN_08002ac0": {
                    "1": "callback4"
                },
                "get_value_from_offset_08002fba": {
                    "1": "get_value_from_array",
                    "16": "get_value_from_offset"
                },
                "FUN_08000a64": {
                    "2": "initialize",
                    "1": "function4"
                },
                "FUN_08000214": {
                    "2": "initialize_data",
                    "1": "callback_function5"
                },
                "initialize_data_08002a30": {
                    "16": "initialize_data",
                    "1": "initialize_data2"
                },
                "get_value_from_offset_08002fa0": {
                    "1": "retrieve_value_from_offset",
                    "5": "get_value_from_offset2",
                    "8": "get_value_from_offset"
                },
                "calculate_shifted_value_080026f8": {
                    "19": "calculate_shifted_value"
                },
                "FUN_080005f8": {
                    "1": "perform_operation",
                    "2": "process_data"
                },
                "FUN_08001bf8": {
                    "1": "process_command"
                },
                "detach_and_update_data_08000588": {
                    "14": "detach_and_update_data"
                },
                "&DAT_200003d4": {
                    "1": "data_buffer"
                },
                "0xf0": {
                    "1": "constant22"
                },
                "0x6a": {
                    "1": "constant2"
                },
                "0x3c": {
                    "1": "constant29"
                },
                "0x2e": {
                    "1": "constant4"
                },
                "0x7f": {
                    "1": "constant5"
                },
                "0xf7": {
                    "1": "constant6"
                },
                "0x6e": {
                    "1": "constant7"
                },
                "0xc0": {
                    "1": "constant8"
                },
                "0xc1": {
                    "1": "constant9"
                },
                "attached": {
                    "5": "is_attached"
                },
                "uint find_character_index_080036ac(int character)": {
                    "1": "find_character_index"
                },
                "&DAT_200001f0": {
                    "1": "data_array"
                },
                "0xd": {
                    "1": "constant10"
                },
                "0x12": {
                    "1": "constant11"
                },
                "0x19": {
                    "1": "constant12"
                },
                "0xb": {
                    "1": "constant13"
                },
                "0x2": {
                    "1": "constant14"
                },
                "0xa": {
                    "1": "constant15"
                },
                "0x3": {
                    "1": "constant16"
                },
                "0x8": {
                    "1": "constant26"
                },
                "0xe": {
                    "1": "constant18"
                },
                "6": {
                    "1": "constant19"
                },
                "1": {
                    "1": "constant20"
                },
                "4": {
                    "1": "constant24"
                },
                "8": {
                    "1": "constant23"
                },
                "0x18": {
                    "1": "constant25"
                },
                "0xff": {
                    "1": "constant27"
                },
                "0x7a": {
                    "1": "constant28"
                },
                "0x40": {
                    "1": "constant30"
                },
                "uVar11": {
                    "1": "third_index"
                },
                "attach": {
                    "1": "attach"
                },
                "pinNametoDigitalPin(iVar7)": {
                    "1": "get_digital_pin(i_var7)"
                },
                "function_pointer": {
                    "1": "function_pointer"
                },
                "DAT_200003d4": {
                    "1": "device_port"
                },
                "DAT_20000314": {
                    "1": "wire"
                },
                "DAT_200001f0": {
                    "1": "data_bytes"
                },
                "DAT_2000022c": {
                    "1": "device_cond1"
                },
                "setPinModeCallback(uVar9,4)": {
                    "1": "set_pin_mode_callback(u_var9,4)"
                },
                "enabledI2CPins": {
                    "2": "enable_i2_c_pins"
                },
                "&DAT_0800a908": {
                    "1": "pin_name_array"
                },
                "detach_and_update_data_08000588 ": {
                    "1": "detach_and_update_data"
                },
                "(int)(char)(&DAT_0800a908)[uVar9]": {
                    "1": "pin"
                },
                "*param_3": {
                    "1": "param3"
                },
                "data1": {
                    "1": "data1"
                },
                "mapPinToDigitalPin": {
                    "1": "map_pin_to_digital"
                },
                "void detach_servo": {
                    "1": "detach_servo"
                },
                "void attach_servo": {
                    "1": "attach_servo"
                },
                "byte1": {
                    "1": "byte1"
                },
                "uint1": {
                    "1": "uint1"
                },
                "status": {
                    "1": "status"
                },
                "input_value": {
                    "1": "input_value"
                },
                "array_value": {
                    "2": "array_value"
                },
                "base_address": {
                    "1": "base_address"
                },
                "index": {
                    "1": "index"
                },
                "undefined4": {
                    "1": "undefined4"
                },
                "input_byte": {
                    "1": "input_byte"
                },
                "character": {
                    "1": "character"
                },
                "byte5": {
                    "1": "byte2"
                },
                "byte2": {
                    "1": "byte3"
                },
                "byte3": {
                    "1": "byte4"
                },
                "byte4": {
                    "1": "byte5"
                },
                "&DAT_0800a6cc": {
                    "1": "pin_map_array1"
                },
                "&DAT_0800a69c": {
                    "1": "pin_map_array2"
                },
                "&DAT_0800a66c": {
                    "1": "pin_map_array3"
                },
                "DAT_20000004": {
                    "1": "number_of_queries"
                },
                "datatype": {
                    "1": "data_type"
                },
                "FUN_08000588": {
                    "1": "detach_and_update_data"
                },
                "FUN_080036ac": {
                    "1": "find_char_index"
                },
                "writelnWithOffset": {
                    "1": "send_string_with_offset"
                },
                "FUN_08002000": {
                    "1": "process_command_internal7"
                }
            }
        },
        "FUN_080022f8": {
            "entrypoint": "0x080022f8",
            "current_name": "process_digital_inputs_080022f8",
            "code": "\nvoid process_digital_inputs_080022f8(void)\n\n{\n  bool is_pin_valid;\n  int result;\n  undefined4 analog_value;\n  uint index;\n  uint adjusted_index;\n  \n  check_digital_inputs();\n  while (result = execute_function(&DAT_200003d4), result != 0) {\n    process_input(&DAT_200003d4);\n  }\n  DAT_20000118 = get_current_millis();\n  if (DAT_20000008 < (uint)(DAT_20000118 - DAT_2000017c)) {\n    DAT_2000017c = DAT_2000017c + DAT_20000008;\n    for (index = 0; index < 0x3c; index = index + 1 & 0xff) {\n      adjusted_index = index - 0x2e & 0xff;\n      if (adjusted_index < 0xe) {\n        if (index < 0x3c) {\n          result = (int)(char)(&DAT_0800a908)[index];\n        }\n        else {\n          result = -1;\n        }\n        result = convert_pin_name_to_digital_pin(result);\n        if (result == 0) {\n          is_pin_valid = false;\n        }\n        else {\n          if (index < 0x3c) {\n            result = (int)(char)(&DAT_0800a908)[index];\n          }\n          else {\n            result = -1;\n          }\n          result = convert_pin_name_to_digital_pin(result);\n          if (result == 1) {\n            is_pin_valid = false;\n          }\n          else {\n            result = get_pin_mode(&DAT_200003d4,index);\n            if (result == 2) {\n              is_pin_valid = true;\n            }\n            else {\n              is_pin_valid = false;\n            }\n          }\n        }\n      }\n      else {\n        is_pin_valid = false;\n      }\n      if ((is_pin_valid) && ((DAT_20000114 >> adjusted_index & 1U) != 0)) {\n        analog_value = read_analog_value(adjusted_index);\n        send_analog_data(&DAT_200003d4,adjusted_index,analog_value);\n      }\n    }\n    if (-1 < DAT_20000004) {\n      for (index = 0; (int)index < DAT_20000004 + 1; index = index + 1 & 0xff) {\n        result = index * 0xc;\n        read_and_report_data((&DAT_20000188)[result],(&DAT_2000018c)[index * 3],(&DAT_20000190)[result],\n                          (&DAT_20000191)[result]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022f8": "process_digital_inputs_080022f8",
                "uVar4": "index",
                "uVar5": "adjusted_index",
                "iVar2": "result",
                "bVar1": "is_pin_valid",
                "uVar3": "analog_value",
                "execute_function_08002ec4": "execute_function",
                "send_analog_data_08002ef2": "send_analog_data",
                "readAndReportData": "read_and_report_data",
                "checkDigitalInputs": "check_digital_inputs",
                "processInput": "process_input",
                "millis": "get_current_millis",
                "pinNametoDigitalPin": "convert_pin_name_to_digital_pin",
                "getPinMode": "get_pin_mode",
                "analogRead": "read_analog_value"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [
                "FUN_08002ed2",
                "FUN_08008880",
                "FUN_08001c18",
                "FUN_08002ec4",
                "FUN_080036ac",
                "FUN_08008abc",
                "FUN_08000ef8",
                "FUN_08002fa0",
                "FUN_08002ef2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080022f8": {
                    "2": "process_digital_input",
                    "14": "process_digital_inputs",
                    "7": "process_inputs",
                    "3": "process_input_loop",
                    "1": "update_digital_inputs"
                },
                "DAT_20000118": {
                    "1": "start_time",
                    "8": "current_millis"
                },
                "DAT_20000008": {
                    "2": "threshold",
                    "1": "time_interval",
                    "6": "interval"
                },
                "DAT_2000017c": {
                    "1": "prev_time",
                    "7": "previous_millis"
                },
                "uVar4": {
                    "3": "i",
                    "5": "index"
                },
                "uVar5": {
                    "1": "adjusted_pin_index",
                    "5": "adjusted_index"
                },
                "DAT_0800a908": {
                    "2": "pin_names",
                    "1": "pin_name_array"
                },
                "iVar2": {
                    "1": "input_result",
                    "2": "pin_value",
                    "5": "result"
                },
                "bVar1": {
                    "3": "is_pin_valid",
                    "1": "is_pin_enabled"
                },
                "DAT_20000114": {
                    "2": "analog_pin_mask",
                    "1": "pins_to_read"
                },
                "uVar3": {
                    "2": "adc_value",
                    "8": "analog_value"
                },
                "DAT_20000004": {
                    "1": "num_readings",
                    "3": "count"
                },
                "DAT_20000188": {
                    "3": "data1",
                    "1": "data_ptr"
                },
                "DAT_2000018c": {
                    "1": "buffer2",
                    "3": "data2"
                },
                "DAT_20000190": {
                    "3": "data3",
                    "1": "param3"
                },
                "DAT_20000191": {
                    "1": "buffer4",
                    "3": "data4"
                },
                "offset": {
                    "1": "data_offset"
                },
                "base_address": {
                    "2": "base_address"
                },
                "character": {
                    "1": "char_index"
                },
                "execute_function_08002ec4": {
                    "24": "execute_function"
                },
                "DAT_200003d4": {
                    "1": "data_buffer",
                    "2": "data_ptr"
                },
                "send_analog_data_08002ef2": {
                    "25": "send_analog_data"
                },
                "parse_and_process_data_08002ed2": {
                    "11": "parse_and_process_data",
                    "1": "process_data"
                },
                "extract_adc_value_08008880": {
                    "12": "extract_adc_value"
                },
                "FUN_08001c18": {
                    "1": "process_pin_value",
                    "2": "process_pin_data"
                },
                "find_character_index_080036ac": {
                    "12": "find_character_index"
                },
                "get_current_millisecond_08008abc": {
                    "1": "get_current_millis",
                    "9": "get_current_millisecond"
                },
                "update_output_ports_08000ef8": {
                    "12": "update_output_ports"
                },
                "get_value_from_offset_08002fa0": {
                    "12": "get_value_from_offset"
                },
                "readAndReportData": {
                    "1": "read_and_report_loop_data",
                    "21": "read_and_report_data"
                },
                "checkDigitalInputs": {
                    "13": "check_digital_inputs"
                },
                "processInput": {
                    "14": "process_input",
                    "1": "process_input_data"
                },
                "millis": {
                    "6": "get_current_millis",
                    "3": "get_milliseconds",
                    "1": "millis",
                    "5": "get_current_millisecond"
                },
                "pinNametoDigitalPin": {
                    "2": "pin_name_to_digital_pin",
                    "1": "convert_pin_nameto_digital_pin",
                    "4": "get_digital_pin",
                    "6": "convert_pin_name_to_digital_pin"
                },
                "getPinMode": {
                    "19": "get_pin_mode",
                    "1": "get_pin_mode_value"
                },
                "analogRead": {
                    "9": "read_analog_value",
                    "2": "read_analog",
                    "1": "read_analog_input",
                    "6": "read_analog_data"
                },
                "(&DAT_0800a908)[uVar4]": {
                    "1": "pin_name_array[u_var4]"
                },
                "(&DAT_20000188)[iVar2]": {
                    "1": "data_ptr_array[i_var2]"
                },
                "(&DAT_20000190)[iVar2]": {
                    "1": "data2_array[i_var2]"
                },
                "(&DAT_20000191)[iVar2]": {
                    "1": "data3_array[i_var2]"
                },
                "data_ptr": {
                    "1": "data_pointer"
                },
                "input_value": {
                    "1": "input_value"
                },
                "param_1": {
                    "1": "param1"
                },
                "param_2": {
                    "1": "param2"
                },
                "param_3": {
                    "1": "param3"
                },
                "param_4": {
                    "1": "param4"
                },
                "function_pointer": {
                    "1": "function_pointer"
                }
            }
        },
        "FUN_08002400": {
            "entrypoint": "0x08002400",
            "current_name": "check_flag_08002400",
            "code": "\nundefined4 check_flag_08002400(int index)\n\n{\n  uint counter;\n  \n  counter = 0;\n  while( true ) {\n    if (0xb < counter) {\n      return 0;\n    }\n    if (((&DAT_20000258)[(index * 0xc + counter) * 8] & 0x40) != 0) break;\n    counter = counter + 1 & 0xff;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002400": "check_flag_08002400",
                "param_1": "index",
                "uVar1": "counter"
            },
            "calling": [
                "FUN_080025ac",
                "FUN_08002644"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002400": {
                    "6": "check_flag",
                    "1": "check_param_validity",
                    "2": "check_bit_flag",
                    "4": "check_for_flag"
                },
                "param_1": {
                    "4": "input",
                    "1": "input_param",
                    "2": "flag_index",
                    "6": "input_value",
                    "15": "index"
                },
                "uVar1": {
                    "1": "current_value",
                    "2": "count",
                    "21": "counter",
                    "3": "index"
                }
            }
        },
        "FUN_0800242c": {
            "entrypoint": "0x0800242c",
            "current_name": "initialize_timer_0800242c",
            "code": "\nvoid initialize_timer_0800242c(u4 param1,u4 param2,u4 param3,u4 param4)\n\n{\n  initialize_timer_0800242c_pulse(param1,60000,0x5dc,callback_function,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800242c": "initialize_timer_0800242c",
                "param_1": "param1",
                "param_4": "param4",
                "param_2": "param2",
                "param_3": "param3",
                "undefined4": "u4",
                "&LAB_08002444_1": "callback_function",
                "TimerPulseInit": "initialize_timer_pulse",
                "LAB_08002444_1": "timer_callback"
            },
            "calling": [
                "FUN_080025ac"
            ],
            "called": [
                "FUN_08007648"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800242c": {
                    "22": "initialize_timer",
                    "1": "initialize_pulse_timer",
                    "7": "initialize_timer_pulse"
                },
                "param_1": {
                    "1": "timer_parameter1",
                    "4": "timer_param1",
                    "6": "arg1",
                    "2": "param_1",
                    "14": "param1"
                },
                "param_4": {
                    "4": "timer_param4",
                    "14": "param4",
                    "1": "timer_pulse_param4",
                    "2": "param_4",
                    "6": "arg4",
                    "3": "callback_function"
                },
                "param_2": {
                    "4": "param2",
                    "2": "param_2",
                    "1": "timer_pulse_param2",
                    "3": "arg2"
                },
                "param_3": {
                    "4": "param3",
                    "1": "timer_pulse_param3",
                    "2": "param_3",
                    "3": "arg3"
                },
                "FUN_08007648": {
                    "1": "update_data"
                },
                "undefined4": {
                    "1": "u4"
                },
                "&LAB_08002444_1": {
                    "1": "callback_function"
                },
                "TimerPulseInit": {
                    "1": "initialize_timer_pulse_init",
                    "3": "init_timer_pulse",
                    "9": "initialize_timer_pulse",
                    "2": "initialize_pulse_timer"
                },
                "LAB_08002444_1": {
                    "6": "timer_callback",
                    "1": "some_label",
                    "3": "timer_pulse_callback"
                }
            }
        },
        "FUN_08002578": {
            "entrypoint": "0x08002578",
            "current_name": "deinitialize_timer_pulse_08002578",
            "code": "\nvoid deinitialize_timer_pulse_08002578(void)\n\n{\n  TimerPulseDeinit();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002578": "deinitialize_timer_pulse_08002578"
            },
            "calling": [
                "FUN_08002644"
            ],
            "called": [
                "FUN_080076e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002578": {
                    "2": "disable_timer_pulse",
                    "14": "deinitialize_timer_pulse",
                    "11": "deinit_timer_pulse",
                    "1": "disable_timer_pulses"
                },
                "FUN_080076e0": {
                    "1": "process_timer_pulse",
                    "3": "initialize_timer_pulse",
                    "2": "update_parameter"
                },
                "param_1": {
                    "1": "timer_pulse_params"
                }
            }
        },
        "FUN_08002580": {
            "entrypoint": "0x08002580",
            "current_name": "initialize_data_08002580",
            "code": "\nvoid initialize_data_08002580(byte *output)\n\n{\n  char next_value;\n  uint counter;\n  \n  counter = (uint)DAT_20000250;\n  if (0xb < counter) {\n    *output = 0xff;\n    return;\n  }\n  next_value = DAT_20000250 + 1;\n  *output = DAT_20000250;\n  DAT_20000250 = next_value;\n  *(undefined4 *)(&DAT_2000025c + counter * 8) = 0x5dc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002580": "initialize_data_08002580",
                "param_1": "output",
                "cVar1": "next_value",
                "uVar2": "counter"
            },
            "calling": [
                "FUN_080004d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002580": {
                    "1": "decode_data",
                    "2": "update_data",
                    "11": "initialize_data",
                    "4": "initialize_value"
                },
                "param_1": {
                    "3": "output_buffer",
                    "2": "byte_array",
                    "1": "destination_buffer",
                    "6": "output"
                },
                "cVar1": {
                    "1": "current_value",
                    "4": "next_byte",
                    "19": "next_value"
                },
                "uVar2": {
                    "2": "index",
                    "1": "current_value",
                    "4": "array_size",
                    "3": "data_index",
                    "6": "counter"
                },
                "0xb": {
                    "2": "threshold"
                },
                "0xff": {
                    "1": "default_value"
                },
                "0x5dc": {
                    "1": "assigned_value"
                },
                "(&DAT_2000025c + uVar2 * 8)": {
                    "1": "some_memory_location"
                }
            }
        },
        "FUN_080025ac": {
            "entrypoint": "0x080025ac",
            "current_name": "update_pin_mode_and_timer_080025ac",
            "code": "\nbyte update_pin_mode_and_timer_080025ac(byte *data,uint pin_number,int value1,int value2)\n\n{\n  uint updated_value1;\n  uint updated_value2;\n  uint divided_value;\n  int temp_var;\n  \n  if (*data < 0xc) {\n    set_pin_mode(pin_number,1,value1,*data,value2);\n    updated_value2 = (uint)*data;\n    updated_value1 = (byte)(&DAT_20000258)[updated_value2 * 8] & 0xffffffc0 | pin_number & 0x3f;\n    (&DAT_20000258)[updated_value2 * 8] = (char)updated_value1;\n    temp_var = -value1 + 0x220;\n    if (temp_var < 0) {\n      temp_var = -value1 + 0x223;\n    }\n    byte1 = (byte)((uint)(temp_var << 0x16) >> 0x18);\n    temp_var = -value2 + 0x960;\n    if (temp_var < 0) {\n      temp_var = -value2 + 0x963;\n    }\n    byte2 = (byte)((uint)(temp_var << 0x16) >> 0x18);\n    divided_value = *data / 0xc;\n    temp_var = check_timer_status(divided_value,updated_value1,updated_value2,(uint)*data * -0x55555555);\n    if (temp_var == 0) {\n      DAT_200002fc = (undefined)divided_value;\n      initialize_isr();\n    }\n    (&DAT_20000258)[(uint)*data * 8] = (&DAT_20000258)[(uint)*data * 8] | 0x40;\n  }\n  return *data;\n}\n\n",
            "renaming": {
                "FUN_080025ac": "update_pin_mode_and_timer_080025ac",
                "param_1": "data",
                "param_2": "pin_number",
                "param_3": "value1",
                "param_4": "value2",
                "uVar1": "updated_value1",
                "uVar2": "updated_value2",
                "uVar3": "divided_value",
                "iVar4": "temp_var",
                "isTimerActive": "check_timer_status",
                "pinMode": "set_pin_mode",
                "initISR": "initialize_isr",
                "param_1[1]": "byte1",
                "param_1[2]": "byte2"
            },
            "calling": [
                "FUN_08000500",
                "FUN_08002634"
            ],
            "called": [
                "FUN_0800242c",
                "FUN_08002400",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080025ac": {
                    "3": "update_pin_mode_and_timer",
                    "1": "pin_mode_and_initialize",
                    "2": "update_pin_mode_and_activate_timer"
                },
                "param_1": {
                    "2": "input_data",
                    "10": "data",
                    "1": "input_array"
                },
                "param_2": {
                    "16": "pin_number",
                    "1": "pin_num",
                    "12": "pin"
                },
                "param_3": {
                    "1": "timer_config1",
                    "5": "param3",
                    "3": "val1",
                    "2": "value_1",
                    "14": "value1"
                },
                "param_4": {
                    "5": "param4",
                    "1": "arg2",
                    "14": "value2",
                    "3": "val2",
                    "2": "value_2"
                },
                "uVar1": {
                    "1": "masked_config1",
                    "3": "temp1",
                    "5": "updated_value1",
                    "2": "updated_pin_status"
                },
                "uVar2": {
                    "1": "temp1",
                    "3": "temp_var2",
                    "5": "updated_value2"
                },
                "uVar3": {
                    "2": "div_result",
                    "1": "modified_u_var3",
                    "4": "division_result",
                    "3": "temp3"
                },
                "iVar4": {
                    "1": "temp_value3",
                    "3": "temp4",
                    "2": "temp_var4",
                    "5": "temp_var"
                },
                "isTimerActive": {
                    "1": "check_if_timer_is_active",
                    "2": "check_timer",
                    "6": "check_timer_status"
                },
                "DAT_20000258": {
                    "1": "pin_config_array",
                    "2": "timer_data"
                },
                "DAT_200002fc": {
                    "1": "timer_status",
                    "7": "active_timer",
                    "3": "timer_data"
                },
                "pinMode": {
                    "1": "configure_pin",
                    "9": "set_pin_mode"
                },
                "initISR": {
                    "12": "initialize_isr",
                    "2": "initialize_interrupt_service_routine"
                },
                "param_1[1]": {
                    "1": "result1",
                    "2": "byte1"
                },
                "param_1[2]": {
                    "2": "byte2",
                    "1": "result2"
                },
                "FUN_0800242c": {
                    "2": "pin_mode"
                },
                "FUN_08002400": {
                    "1": "init_isr"
                },
                "FUN_08008990": {
                    "1": "init_isr"
                },
                "*param_1": {
                    "1": "pin_status"
                },
                "&DAT_20000258": {
                    "1": "pin_configuration_data"
                }
            }
        },
        "FUN_08002634": {
            "entrypoint": "0x08002634",
            "current_name": "initialize_pin_mode_and_timer_08002634",
            "code": "\nvoid initialize_pin_mode_and_timer_08002634(undefined4 data,undefined4 pin_number,undefined4 value1,undefined4 value2)\n\n{\n  update_pin_mode_and_timer(data,pin_number,0x220,0x960,value2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002634": "initialize_pin_mode_and_timer_08002634",
                "param_1": "data",
                "param_2": "pin_number",
                "param_4": "value2",
                "param_3": "value1",
                "update_pin_mode_and_timer_080025ac": "update_pin_mode_and_timer"
            },
            "calling": [
                "FUN_08000500"
            ],
            "called": [
                "FUN_080025ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002634": {
                    "3": "initialize_pins_and_timer",
                    "5": "configure_pin_mode_and_timer",
                    "1": "update_pin_mode_and_timer",
                    "14": "initialize_pin_mode_and_timer"
                },
                "param_1": {
                    "30": "data",
                    "1": "pin_data"
                },
                "param_2": {
                    "31": "pin_number"
                },
                "param_4": {
                    "2": "value1",
                    "1": "timer_data",
                    "22": "value2"
                },
                "param_3": {
                    "11": "value1"
                },
                "update_pin_mode_and_timer_080025ac": {
                    "1": "configure_pin_mode_and_timer_impl",
                    "3": "update_pin_mode_and_timer"
                }
            }
        },
        "FUN_08002644": {
            "entrypoint": "0x08002644",
            "current_name": "process_data_08002644",
            "code": "\nvoid process_data_08002644(byte *data,undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  byte byte_value;\n  uint index;\n  int is_active;\n  \n  index = (uint)*data;\n  byte_value = (&DAT_20000258)[index * 8];\n  (&DAT_20000258)[index * 8] = byte_value & 0xbf;\n  is_active = check_timer_active(index / 0xc,param1,byte_value & 0xbf,index * -0x55555555,param3);\n  if (is_active == 0) {\n    finish_isr(&DAT_200002b8);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002644": "process_data_08002644",
                "param_1": "data",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "bVar1": "byte_value",
                "uVar2": "index",
                "iVar3": "is_active",
                "isTimerActive": "check_timer_active",
                "finISR": "finish_isr"
            },
            "calling": [
                "FUN_08000588"
            ],
            "called": [
                "FUN_08002578",
                "FUN_08002400"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002644": {
                    "1": "execute_timer_function",
                    "14": "process_data",
                    "2": "perform_action_on_timer",
                    "7": "handle_timer_event",
                    "3": "process_timer"
                },
                "param_1": {
                    "22": "data",
                    "1": "event_payload",
                    "2": "timer_data"
                },
                "param_2": {
                    "1": "param",
                    "9": "param2",
                    "2": "value_1",
                    "13": "param1"
                },
                "param_3": {
                    "12": "param2",
                    "1": "arg2",
                    "6": "param3"
                },
                "param_4": {
                    "1": "parameter_4",
                    "9": "param4",
                    "13": "param3"
                },
                "bVar1": {
                    "1": "entry",
                    "4": "byte_value",
                    "2": "current_byte",
                    "3": "current_value"
                },
                "uVar2": {
                    "1": "key",
                    "3": "value",
                    "2": "event_code",
                    "10": "index",
                    "7": "first_byte"
                },
                "iVar3": {
                    "1": "active_timer",
                    "3": "timer_result",
                    "20": "is_active",
                    "4": "timer_status"
                },
                "isTimerActive": {
                    "1": "check_timer_active"
                },
                "finISR": {
                    "1": "finalize_isr",
                    "2": "finish_isr"
                }
            }
        },
        "FUN_0800267c": {
            "entrypoint": "0x0800267c",
            "current_name": "update_data_0800267c",
            "code": "\nvoid update_data_0800267c(byte *array,int value)\n\n{\n  int index;\n  \n  if (*array < 0xc) {\n    index = (0x88 - array_element1) * 4;\n    if ((index - value == 0 || index < value) &&\n       (index = (600 - array_element2) * 4,\n       value == index || value + (600 - array_element2) * -4 < 0 != is_negative))\n    {\n      index = value;\n    }\n    *(int *)(&DAT_2000025c + (uint)*array * 8) = index;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800267c": "update_data_0800267c",
                "param_1": "array",
                "param_2": "value",
                "iVar1": "index",
                "param_1[1]": "array_value_1",
                "SBORROW4(param_2,iVar1)": "is_negative",
                "param_1[2]": "array_value_2",
                "(char)param_1[1]": "array_element1",
                "(char)param_1[2]": "array_element2"
            },
            "calling": [
                "FUN_080026b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800267c": {
                    "1": "update_value_based_on_condition",
                    "2": "update_values",
                    "9": "update_array_value",
                    "12": "update_data"
                },
                "param_1": {
                    "9": "data",
                    "12": "array",
                    "1": "input_data",
                    "4": "data_pointer",
                    "2": "input_array"
                },
                "param_2": {
                    "1": "value_to_update",
                    "27": "value"
                },
                "iVar1": {
                    "5": "new_value",
                    "1": "calculation_result",
                    "6": "calculated_value",
                    "13": "index",
                    "3": "result"
                },
                "*param_1": {
                    "2": "array_value",
                    "1": "array_item"
                },
                "param_1[1]": {
                    "1": "array_item1",
                    "2": "array_value_1"
                },
                "(uint)*param_1": {
                    "1": "array_index"
                },
                "&DAT_2000025c": {
                    "1": "array_base_address"
                },
                "(600 - (char)param_1[2])": {
                    "1": "third_element_calc"
                },
                "SBORROW4(param_2,iVar1)": {
                    "1": "is_negative"
                },
                "param_1[2]": {
                    "1": "array_item2",
                    "2": "array_value_2"
                },
                "DAT_2000025c": {
                    "1": "output_array"
                },
                "(char)param_1[1]": {
                    "1": "array_element1"
                },
                "(char)param_1[2]": {
                    "1": "array_element2"
                },
                "(&DAT_2000025c + (uint)*param_1 * 8)": {
                    "1": "array_element_address"
                }
            }
        },
        "FUN_080026b0": {
            "entrypoint": "0x080026b0",
            "current_name": "update_servo_position_080026b0",
            "code": "\nvoid update_servo_position_080026b0(int servo_pin,int input_value)\n\n{\n  if (input_value < 0x220) {\n    if (input_value < 0) {\n      input_value = 0;\n    }\n    else if (0xb4 < input_value) {\n      input_value = 0xb4;\n    }\n    input_value = map_position(input_value,0,0xb4,(0x88 - *(char *)(servo_pin + 1)) * 4,\n                  (600 - *(char *)(servo_pin + 2)) * 4);\n  }\n  write_microseconds(servo_pin,input_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026b0": "update_servo_position_080026b0",
                "param_1": "servo_pin",
                "param_2": "input_value",
                "map": "map_position",
                "writeMicroseconds": "write_microseconds"
            },
            "calling": [
                "FUN_0800021a"
            ],
            "called": [
                "FUN_0800267c",
                "FUN_08008ef4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080026b0": {
                    "5": "write_mapped_microseconds",
                    "1": "adjust_and_write_microseconds",
                    "8": "update_servo_position",
                    "2": "write_microseconds_with_mapping"
                },
                "param_1": {
                    "1": "param_1_address",
                    "5": "pin_number",
                    "8": "pin",
                    "14": "servo_pin"
                },
                "param_2": {
                    "2": "value",
                    "9": "input_value",
                    "3": "angle",
                    "1": "desired_position",
                    "7": "position",
                    "6": "microseconds"
                },
                "map": {
                    "1": "map_range",
                    "8": "map_position",
                    "4": "map_value",
                    "2": "map_microseconds"
                },
                "writeMicroseconds": {
                    "3": "set_servo_microseconds",
                    "1": "write_to_microseconds",
                    "5": "write_microseconds"
                },
                "param_1 + 1": {
                    "1": "servo_data1"
                },
                "param_1 + 2": {
                    "1": "servo_data2"
                },
                "*(char *)(param_1 + 1)": {
                    "1": "offset1"
                },
                "*(char *)(param_1 + 2)": {
                    "1": "value2"
                }
            }
        },
        "FUN_080026f8": {
            "entrypoint": "0x080026f8",
            "current_name": "calculate_shifted_value_080026f8",
            "code": "\nuint calculate_shifted_value_080026f8(character *input_byte)\n\n{\n  output ((uint)(character)(&DAT_20000258)[(uint)*input_byte * 8] << 0x19) >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_080026f8": "calculate_shifted_value_080026f8",
                "param_1": "input_byte",
                "byte": "character",
                "return": "output"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080026f8": {
                    "1": "convert_byte_to_bit",
                    "2": "extract_bit_from_data",
                    "3": "calculate_shifted_value"
                },
                "param_1": {
                    "5": "input",
                    "7": "data",
                    "9": "input_byte",
                    "1": "color",
                    "4": "byte_array",
                    "2": "input_data"
                },
                "byte": {
                    "1": "character"
                },
                "&DAT_20000258": {
                    "2": "data_table",
                    "3": "data_array",
                    "1": "bit_lookup_table"
                },
                "*param_1": {
                    "1": "character_pointer",
                    "2": "input_byte",
                    "3": "byte_value",
                    "6": "first_byte"
                },
                "DAT_20000258": {
                    "3": "lookup_table",
                    "2": "byte_array",
                    "1": "bit_lookup_table"
                },
                "*param_1 * 8": {
                    "1": "index"
                },
                "(uint)(byte)(&DAT_20000258)[(uint)*param_1 * 8]": {
                    "1": "element_shifted"
                },
                "(uint)(byte)(&DAT_20000258)[(uint)*param_1 * 8] << 0x19": {
                    "1": "shifted_result"
                },
                "((uint)(byte)(&DAT_20000258)[(uint)*param_1 * 8] << 0x19) >> 0x1f": {
                    "1": "final_result"
                },
                "(uint)*param_1 * 8": {
                    "1": "byte_index"
                },
                "param_1*": {
                    "1": "bit_index"
                },
                "data": {
                    "1": "input_data"
                },
                "bitIndex": {
                    "1": "index"
                },
                "[(uint)*param_1 * 8]": {
                    "1": "index"
                },
                "0x19": {
                    "1": "shift_amount_start"
                },
                "0x1f": {
                    "1": "shift_amount_end"
                },
                "return": {
                    "1": "output"
                },
                "<< 0x19": {
                    "1": "shift_left_by25"
                },
                ">> 0x1f": {
                    "1": "shift_right_by31"
                },
                "(byte)(&DAT_20000258)[(uint)*param_1 * 8]": {
                    "1": "bit_value"
                }
            }
        },
        "FUN_0800270c": {
            "entrypoint": "0x0800270c",
            "current_name": "calculate_difference_0800270c",
            "code": "\nint calculate_difference_0800270c(void)\n\n{\n  return (uint)DAT_200003b7 - (uint)DAT_200003b5;\n}\n\n",
            "renaming": {
                "FUN_0800270c": "calculate_difference_0800270c"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800270c": {
                    "4": "calculate_data_difference",
                    "26": "calculate_difference",
                    "1": "get_difference"
                },
                "DAT_200003b7": {
                    "3": "data1",
                    "1": "first_dat",
                    "14": "value1"
                },
                "DAT_200003b5": {
                    "3": "data2",
                    "1": "data_value_2",
                    "14": "value2"
                }
            }
        },
        "FUN_08002720": {
            "entrypoint": "0x08002720",
            "current_name": "get_next_byte_08002720",
            "code": "\nuint get_next_byte_08002720(void)\n\n{\n  uint index;\n  \n  index = (uint)DAT_200003b5;\n  if (index < DAT_200003b7) {\n    DAT_200003b5 = DAT_200003b5 + 1;\n    return (uint)*(memory_value *)(DAT_200003c8 + index);\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08002720": "get_next_byte_08002720",
                "uVar1": "index",
                "byte": "memory_value"
            },
            "calling": [
                "FUN_08001c08"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002720": {
                    "3": "read_next_byte",
                    "1": "retrieve_byte_from_memory",
                    "7": "read_byte_from_memory",
                    "2": "extract_byte_from_memory"
                },
                "uVar1": {
                    "1": "offset",
                    "23": "index",
                    "5": "current_index"
                },
                "DAT_200003b5": {
                    "1": "current_offset",
                    "2": "start_address",
                    "15": "current_index"
                },
                "DAT_200003b7": {
                    "1": "max_offset",
                    "15": "max_index",
                    "2": "max_index_value"
                },
                "DAT_200003c8": {
                    "4": "byte_array",
                    "1": "array_start",
                    "5": "data_buffer",
                    "2": "base_address",
                    "3": "memory_address"
                },
                "byte": {
                    "1": "memory_value"
                },
                "return_value": {
                    "1": "byte_value"
                },
                "byte_value": {
                    "1": "value"
                }
            }
        },
        "FUN_080027f0": {
            "entrypoint": "0x080027f0",
            "current_name": "write_data_080027f0",
            "code": "\nuint write_data_080027f0(int device_address,undefined4 data,uint data_length)\n\n{\n  int write_result;\n  uint new_data_length;\n  \n  if (DAT_200003b4 == '\\0') {\n    write_result = write_data_080027f0_using_i2c(device_address + 0x14,data,data_length & 0xffff);\n    if (write_result == 0) {\n      return data_length;\n    }\n    return 0;\n  }\n  new_data_length = DAT_200003b8 + data_length;\n  if (DAT_200003c5 < new_data_length) {\n    if (new_data_length < 0x20) {\n      new_data_length = 0x20;\n    }\n    DAT_200003cc = reallocation(DAT_200003cc,new_data_length);\n    if (DAT_200003cc == 0) {\n      DAT_200003c5 = 0;\n    }\n    else {\n      DAT_200003c5 = (byte)new_data_length;\n    }\n  }\n  if (DAT_200003cc == 0) {\n    *(undefined4 *)(device_address + 4) = 1;\n    return 0;\n  }\n  copy_data((uint)DAT_200003b6 + DAT_200003cc,data,data_length);\n  DAT_200003b6 = DAT_200003b6 + (char)data_length;\n  DAT_200003b8 = DAT_200003b6;\n  return data_length;\n}\n\n",
            "renaming": {
                "FUN_080027f0": "write_data_080027f0",
                "param_1": "device_address",
                "param_2": "data",
                "param_3": "data_length",
                "iVar1": "write_result",
                "uVar2": "new_data_length",
                "i2c_slave_write_IT": "write_data_using_i2c",
                "realloc": "reallocation",
                "memcpy": "copy_data"
            },
            "calling": [],
            "called": [
                "FUN_080091b0",
                "FUN_08009908",
                "FUN_08007ede"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080027f0": {
                    "16": "write_data",
                    "1": "write_data_to_memory",
                    "3": "write_data_to_buffer",
                    "2": "write_to_i2c_slave"
                },
                "param_1": {
                    "4": "address",
                    "14": "device_address",
                    "1": "data_offset",
                    "2": "buffer_offset",
                    "3": "buffer_address"
                },
                "param_2": {
                    "24": "data",
                    "1": "data_pointer",
                    "6": "data_buffer"
                },
                "param_3": {
                    "15": "data_length",
                    "7": "data_size",
                    "5": "size",
                    "4": "length"
                },
                "iVar1": {
                    "15": "write_result",
                    "11": "result",
                    "4": "write_status",
                    "1": "error_code"
                },
                "uVar2": {
                    "1": "total_length",
                    "5": "new_size",
                    "7": "new_data_size",
                    "8": "new_data_length"
                },
                "FUN_080091b0": {
                    "1": "write_data_it",
                    "7": "i2c_slave_write_it",
                    "2": "write_to_i2c_slave"
                },
                "FUN_08009908": {
                    "1": "allocate_memory",
                    "3": "realloc_data_buffer",
                    "4": "realloc_buffer",
                    "2": "calculate_new_length"
                },
                "FUN_08007ede": {
                    "1": "memcpy_offset",
                    "3": "copy_data",
                    "2": "memcpy_data"
                },
                "i2c_slave_write_IT": {
                    "1": "write_i2c_slave_using_it"
                },
                "DAT_200003b4": {
                    "1": "is_realloc_needed"
                },
                "DAT_200003b8": {
                    "2": "buffer_end_address",
                    "1": "data_offset"
                },
                "DAT_200003c5": {
                    "1": "max_size",
                    "2": "buffer_max_size"
                },
                "DAT_200003cc": {
                    "1": "buffer_address",
                    "2": "data_buffer",
                    "3": "buffer"
                },
                "DAT_200003b6": {
                    "1": "current_buffer_ptr"
                },
                "realloc": {
                    "2": "reallocation"
                },
                "memcpy": {
                    "1": "copy_memory",
                    "5": "copy_data"
                },
                "param_1 + 0x14": {
                    "1": "buffer_start_address"
                },
                "*(undefined4 *)(param_1 + 4)": {
                    "1": "error_flag"
                }
            }
        },
        "FUN_0800288c": {
            "entrypoint": "0x0800288c",
            "current_name": "write_data_0800288c",
            "code": "\nundefined4 write_data_0800288c(int device_address,undefined data)\n\n{\n  undefined4 success;\n  int write_result;\n  uint new_size;\n  undefined byte_data;\n  \n  byte_data = data;\n  if (DAT_200003b4 == '\\0') {\n    write_result = write_byte_to_slave(device_address + 0x14,&byte_data,1);\n    if (write_result == 0) {\n      success = 1;\n    }\n    else {\n      success = 0;\n    }\n  }\n  else {\n    new_size = DAT_200003b8 + 1;\n    if (DAT_200003c5 < new_size) {\n      if (new_size < 0x20) {\n        new_size = 0x20;\n      }\n      DAT_200003cc = resize_memory(DAT_200003cc,new_size);\n      if (DAT_200003cc == 0) {\n        DAT_200003c5 = 0;\n      }\n      else {\n        DAT_200003c5 = (byte)new_size;\n      }\n    }\n    if (DAT_200003cc == 0) {\n      *(undefined4 *)(device_address + 4) = 1;\n      success = 0;\n    }\n    else {\n      *(undefined *)(DAT_200003cc + (uint)DAT_200003b6) = byte_data;\n      DAT_200003b6 = DAT_200003b6 + 1;\n      success = 1;\n      DAT_200003b8 = DAT_200003b6;\n    }\n  }\n  return success;\n}\n\n",
            "renaming": {
                "FUN_0800288c": "write_data_0800288c",
                "param_1": "device_address",
                "param_2": "data",
                "iVar2": "write_result",
                "uVar3": "new_size",
                "local_11": "byte_data",
                "i2c_slave_write_IT": "write_byte_to_slave",
                "realloc": "resize_memory",
                "uVar1": "success"
            },
            "calling": [
                "FUN_08001bf8"
            ],
            "called": [
                "FUN_08009908",
                "FUN_08007ede"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800288c": {
                    "22": "write_data",
                    "2": "write_data_to_i2_c",
                    "1": "send_data_over_i2c"
                },
                "param_1": {
                    "4": "address",
                    "24": "device_address",
                    "1": "buffer_address",
                    "2": "device_addr"
                },
                "param_2": {
                    "1": "data_to_write",
                    "25": "data",
                    "5": "data_byte"
                },
                "iVar2": {
                    "20": "write_result",
                    "6": "result",
                    "4": "write_status",
                    "1": "error_code"
                },
                "uVar3": {
                    "1": "realloc_size",
                    "9": "new_data_size",
                    "2": "new_buffer_size",
                    "17": "new_size"
                },
                "local_11": {
                    "2": "current_byte",
                    "1": "current_data",
                    "8": "byte_to_write",
                    "3": "new_data",
                    "10": "byte_data"
                },
                "i2c_slave_write_IT": {
                    "1": "write_data_to_slave_device"
                },
                "realloc": {
                    "1": "resize_allocated_memory",
                    "2": "resize_memory"
                },
                "uVar1": {
                    "2": "return_value",
                    "1": "status",
                    "4": "result",
                    "20": "success"
                },
                "DAT_200003b4": {
                    "5": "flag",
                    "1": "is_written"
                },
                "DAT_200003b8": {
                    "1": "current_size",
                    "2": "current_data_index"
                },
                "DAT_200003c5": {
                    "1": "max_size",
                    "2": "max_data_size"
                },
                "DAT_200003cc": {
                    "1": "buffer",
                    "4": "data_buffer"
                },
                "DAT_200003b6": {
                    "4": "buffer_index"
                },
                "FUN_08009908": {
                    "2": "i2c_slave_write_it"
                },
                "FUN_08007ede": {
                    "2": "realloc"
                }
            }
        },
        "FUN_0800291c": {
            "entrypoint": "0x0800291c",
            "current_name": "initialize_parameters_0800291c",
            "code": "\nvoid initialize_parameters_0800291c(undefined4 *parameters)\n\n{\n  param_array[1] = 0;\n  param_array[2] = 1000;\n  *parameters = &PTR_FUN_0800288c_1_0800a5a0;\n  *(undefined *)(parameters + 0x1b) = 0x19;\n  *(undefined *)((int)parameters + 0x6d) = 0x18;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800291c": "initialize_parameters_0800291c",
                "param_1": "parameters",
                "param_1[1]": "param_array[1]",
                "param_1[2]": "param_array[2]"
            },
            "calling": [
                "FUN_08002948"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800291c": {
                    "3": "initialize_params",
                    "1": "initialize_param_array",
                    "11": "initialize_parameters",
                    "5": "initialize_param",
                    "2": "initialize_data",
                    "7": "initialize_function"
                },
                "param_1": {
                    "2": "function_params",
                    "3": "function_data",
                    "4": "params",
                    "7": "param_array",
                    "1": "param",
                    "9": "parameters"
                },
                "param_1[1]": {
                    "5": "parameters[1]",
                    "1": "param_2",
                    "2": "variable1",
                    "4": "params[1]"
                },
                "param_1[2]": {
                    "1": "parameters.max_val",
                    "2": "variable2",
                    "4": "params[2]",
                    "5": "parameters[2]"
                },
                "*param_1": {
                    "4": "function_pointer",
                    "1": "function_params[0]",
                    "3": "parameters[0]",
                    "2": "param_array[0]"
                },
                "*(undefined *)(param_1 + 0x1b)": {
                    "1": "variable1",
                    "3": "parameters[27]"
                },
                "*(undefined *)((int)param_1 + 0x6d)": {
                    "1": "offset_2",
                    "3": "params[109]"
                },
                "param_1 + 0x1b": {
                    "1": "parameters[27]"
                },
                "(int)param_1 + 0x6d": {
                    "1": "parameters.unknown_val2"
                },
                "PTR_FUN_0800288c_1_0800a5a0": {
                    "1": "initial_value",
                    "6": "function_pointer"
                },
                "param_1[27]": {
                    "1": "param[27]"
                },
                "param_1[109]": {
                    "1": "param[109]"
                },
                "(param_1 + 0x1b)": {
                    "1": "param_offset1"
                },
                "((int)param_1 + 0x6d)": {
                    "1": "param_offset2"
                },
                "(int)param_1 + 0x1b": {
                    "1": "offset1"
                },
                "paramArray[1]": {
                    "1": "param_array[1]"
                },
                "paramArray[2]": {
                    "1": "param_array[2]"
                },
                "paramArray[27]": {
                    "1": "param_array[27]"
                },
                "functionParams[1]": {
                    "1": "variable1"
                },
                "functionParams[2]": {
                    "1": "variable2"
                },
                "*functionParams": {
                    "1": "function_pointer"
                },
                "functionParams[0x1b]": {
                    "1": "variable3"
                },
                "*(functionParams + 0x6d)": {
                    "1": "variable4"
                }
            }
        },
        "FUN_08002948": {
            "entrypoint": "0x08002948",
            "current_name": "process_param_08002948",
            "code": "\nvoid process_param_08002948(int status,int value)\n\n{\n  if (status != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    init_wire(&DAT_20000314);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002948": "process_param_08002948",
                "param_1": "status",
                "param_2": "value",
                "TwoWire": "init_wire"
            },
            "calling": [
                "FUN_08002c1e"
            ],
            "called": [
                "FUN_0800291c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002948": {
                    "1": "handle_param_update",
                    "6": "process_param",
                    "2": "handle_input",
                    "5": "handle_param"
                },
                "param_1": {
                    "3": "status",
                    "2": "value",
                    "1": "result"
                },
                "param_2": {
                    "4": "flag",
                    "1": "value2",
                    "3": "input_value",
                    "10": "value",
                    "2": "flag_value"
                },
                "TwoWire": {
                    "1": "execute_i2c_function"
                },
                "FUN_0800291c": {
                    "3": "initialize_wire",
                    "1": "configure_peripheral",
                    "2": "initialize_i2c"
                }
            }
        },
        "FUN_08002968": {
            "entrypoint": "0x08002968",
            "current_name": "initialize_i2_c_08002968",
            "code": "\nvoid initialize_i2_c_08002968(int device_address,uint config)\n\n{\n  int shifted_config;\n  int i2c_address;\n  \n  DAT_200003b5 = 0;\n  DAT_200003b7 = 0;\n  if (DAT_200003c8 != 0) {\n    clear_memory(DAT_200003c8,0,DAT_200003c4);\n  }\n  DAT_200003b6 = 0;\n  DAT_200003b8 = 0;\n  if (DAT_200003cc != 0) {\n    clear_memory(DAT_200003cc,0,DAT_200003c5);\n  }\n  DAT_200003b4 = 0;\n  shifted_config = (config & 0x7f) << 1;\n  *(char *)(device_address + 0x10) = (char)shifted_config;\n  if (config == 0x33) {\n    *(undefined *)(device_address + 0x11) = 1;\n  }\n  else {\n    *(undefined *)(device_address + 0x11) = 0;\n  }\n  i2c_address = device_address + 0x14;\n  custom_i2_c_init(i2c_address,100000,0x4000,shifted_config,*(undefined *)(device_address + 0x11));\n  if (*(char *)(device_address + 0x11) == '\\0') {\n    attach_slave_tx_event(i2c_address,slave_tx_event_handler);\n    attach_slave_rx_event(i2c_address,slave_rx_event_handler);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002968": "initialize_i2_c_08002968",
                "param_1": "device_address",
                "param_2": "config",
                "iVar1": "shifted_config",
                "iVar2": "i2c_address",
                "i2c_custom_init": "custom_i2_c_init",
                "i2c_attachSlaveTxEvent": "attach_slave_tx_event",
                "i2c_attachSlaveRxEvent": "attach_slave_rx_event",
                "LAB_08002774_1": "slave_tx_event_callback",
                "LAB_08002b00_1": "slave_rx_event_callback",
                "&LAB_08002774_1": "slave_tx_event_handler",
                "&LAB_08002b00_1": "slave_rx_event_handler",
                "memset": "clear_memory"
            },
            "calling": [
                "FUN_08002a1c"
            ],
            "called": [
                "FUN_08007f7c",
                "FUN_080077b0",
                "FUN_080091c6",
                "FUN_08007f8e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002968": {
                    "1": "initialize_i2c_device",
                    "2": "initialize_i2c",
                    "19": "initialize_i2_c",
                    "3": "initialize_communication"
                },
                "param_1": {
                    "3": "buffer_address",
                    "13": "device_address",
                    "11": "base_address",
                    "1": "i2c_base_address"
                },
                "param_2": {
                    "6": "config",
                    "1": "configuration",
                    "4": "config_value",
                    "2": "control_byte",
                    "5": "flags",
                    "3": "config_flags"
                },
                "iVar1": {
                    "7": "shifted_flags",
                    "1": "shift_control_byte",
                    "2": "config_shifted",
                    "8": "shifted_config"
                },
                "iVar2": {
                    "3": "device_address",
                    "1": "init_param",
                    "4": "i2c_custom_init_param",
                    "2": "i2c_device_address",
                    "5": "i2c_address"
                },
                "i2c_custom_init": {
                    "1": "custom_i2_c_initialize",
                    "2": "initialize_i2_c",
                    "7": "custom_i2_c_init",
                    "6": "custom_init_i2_c",
                    "5": "initialize_custom_i2_c"
                },
                "i2c_attachSlaveTxEvent": {
                    "1": "attach_slave_tx_event_to_i2_c",
                    "15": "attach_slave_tx_event"
                },
                "i2c_attachSlaveRxEvent": {
                    "1": "attach_slave_receive_event_handler",
                    "15": "attach_slave_rx_event"
                },
                "LAB_08002774_1": {
                    "1": "custom_tx_event_handler",
                    "3": "slave_tx_event_callback",
                    "2": "slave_tx_event_handler"
                },
                "LAB_08002b00_1": {
                    "2": "slave_rx_event_handler",
                    "3": "slave_rx_event_callback",
                    "1": "custom_event_handler_rx"
                },
                "&LAB_08002774_1": {
                    "3": "slave_tx_event_handler"
                },
                "&LAB_08002b00_1": {
                    "3": "slave_rx_event_handler"
                },
                "DAT_200003b5": {
                    "1": "some_variable1"
                },
                "DAT_200003b6": {
                    "1": "flag2"
                },
                "DAT_200003b7": {
                    "1": "some_variable3"
                },
                "DAT_200003b8": {
                    "1": "some_variable4"
                },
                "DAT_200003c4": {
                    "2": "buffer1_size"
                },
                "DAT_200003c5": {
                    "2": "buffer2_size"
                },
                "DAT_200003c8": {
                    "4": "buffer1"
                },
                "DAT_200003cc": {
                    "4": "buffer2"
                },
                "DAT_200003b4": {
                    "1": "variable5"
                },
                "FUN_08007f7c": {
                    "1": "i2c_custom_init"
                },
                "FUN_080077b0": {
                    "1": "i2c_attach_slave_tx_event"
                },
                "FUN_080091c6": {
                    "1": "i2c_attach_slave_rx_event"
                },
                "FUN_08007f8e": {
                    "1": "lab_08007f8e"
                },
                "memset": {
                    "1": "clear_memory"
                },
                "100000": {
                    "1": "clock_speed"
                },
                "0x4000": {
                    "1": "timeout_value"
                }
            }
        },
        "FUN_08002a1c": {
            "entrypoint": "0x08002a1c",
            "current_name": "initialize_i2c_08002a1c",
            "code": "\nvoid initialize_i2c_08002a1c(undefined4 device_address,undefined config,undefined4 param_3,undefined4 param_4)\n\n{\n  initialize_i2c_08002a1c(device_address,config,param_3,param_4,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a1c": "initialize_i2c_08002a1c",
                "param_1": "device_address",
                "param_2": "config",
                "initialize_i2_c_08002968": "initialize_i2c"
            },
            "calling": [
                "FUN_08002a26"
            ],
            "called": [
                "FUN_08002968"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002a1c": {
                    "1": "initialize_i2c_communication",
                    "7": "initialize_i2c_device",
                    "20": "initialize_i2c",
                    "2": "initialize_i2c_devices"
                },
                "param_1": {
                    "31": "device_address"
                },
                "param_2": {
                    "27": "config",
                    "3": "param_2"
                },
                "param_3": {
                    "1": "unspecified_param_1",
                    "2": "unused_param_1",
                    "5": "unused_param",
                    "10": "param_3"
                },
                "param_4": {
                    "3": "unused_param_2",
                    "1": "unnamed_param_4",
                    "10": "param_4",
                    "4": "unused_param"
                },
                "initialize_i2_c_08002968": {
                    "1": "initialize_i2c"
                }
            }
        },
        "FUN_08002a26": {
            "entrypoint": "0x08002a26",
            "current_name": "initialize_i2c_08002a26",
            "code": "\nvoid initialize_i2c_08002a26(undefined4 device_address,undefined4 config,undefined4 param_3,undefined4 param_4)\n\n{\n  initialize_i2c_08002a26_08002a1c(device_address,0x33,param_3,param_4,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a26": "initialize_i2c_08002a26",
                "param_1": "device_address",
                "param_2": "config"
            },
            "calling": [
                "FUN_08000a64"
            ],
            "called": [
                "FUN_08002a1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002a26": {
                    "1": "initialize_i2c_communication",
                    "18": "initialize_i2c",
                    "11": "initialize_i2c_device"
                },
                "param_1": {
                    "30": "device_address",
                    "1": "device"
                },
                "param_3": {
                    "8": "config",
                    "1": "unused_param_1",
                    "22": "param_3"
                },
                "param_4": {
                    "1": "unused_param_2",
                    "26": "param_4",
                    "4": "param_3"
                },
                "param_2": {
                    "20": "config",
                    "2": "param_2"
                }
            }
        },
        "FUN_08002a30": {
            "entrypoint": "0x08002a30",
            "current_name": "initialize_data_08002a30",
            "code": "\nvoid initialize_data_08002a30(undefined4 status,int input_value)\n\n{\n  DAT_200003b4 = 1;\n  DAT_200003d0 = (char)(input_value << 1);\n  DAT_200003b6 = 0;\n  DAT_200003b8 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a30": "initialize_data_08002a30",
                "param_1": "status",
                "param_2": "input_value"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08002b68",
                "FUN_08001cd0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002a30": {
                    "1": "set_flags",
                    "26": "initialize_data",
                    "2": "initialize_function"
                },
                "param_1": {
                    "1": "pattern",
                    "2": "parameter1",
                    "3": "param",
                    "8": "param1"
                },
                "param_2": {
                    "1": "input_param",
                    "6": "param2",
                    "9": "input_value",
                    "2": "parameter2",
                    "7": "value"
                },
                "DAT_200003d0": {
                    "1": "processed_value",
                    "5": "shifted_value",
                    "4": "shifted_param2"
                },
                "DAT_200003b4": {
                    "1": "initialized_flag",
                    "5": "is_initialized",
                    "2": "data_flag"
                },
                "DAT_200003b6": {
                    "6": "unused_variable",
                    "1": "extra_data1",
                    "2": "unused_var"
                },
                "DAT_200003b8": {
                    "7": "unused_variable2",
                    "2": "unused_var2",
                    "1": "extra_data2"
                },
                "param_n": {
                    "1": "new_parameter_name"
                },
                "param_2 << 1": {
                    "1": "shifted_input"
                }
            }
        },
        "FUN_08002a58": {
            "entrypoint": "0x08002a58",
            "current_name": "write_i2c_data_08002a58",
            "code": "\nundefined4 write_i2c_data_08002a58(int device_address)\n\n{\n  int result;\n  undefined4 return_value;\n  \n  if (*(char *)(device_address + 0x11) == '\\0') {\n    return_value = 4;\n  }\n  else {\n    result = i2c_master_write(device_address + 0x14,DAT_200003d0,DAT_200003cc,DAT_200003b8);\n    if (result == 0) {\n      return_value = 0;\n    }\n    else if (result == 1) {\n      return_value = 1;\n    }\n    else {\n      return_value = 4;\n    }\n    if (DAT_200003cc != 0) {\n      clear_memory(DAT_200003cc,0,DAT_200003c5);\n    }\n    DAT_200003b6 = 0;\n    DAT_200003b8 = 0;\n    DAT_200003b4 = 0;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_08002a58": "write_i2c_data_08002a58",
                "param_1": "device_address",
                "iVar1": "result",
                "uVar2": "return_value",
                "memset": "clear_memory"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08002b68",
                "FUN_08002ac0"
            ],
            "called": [
                "FUN_08007e74",
                "FUN_080091c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002a58": {
                    "4": "check_i2_c_write_status",
                    "5": "write_i2c_data",
                    "1": "check_status_and_write_data",
                    "3": "check_and_write_data",
                    "2": "perform_i2_c_write"
                },
                "param_1": {
                    "18": "device_address",
                    "2": "data_ptr",
                    "1": "input_param"
                },
                "iVar1": {
                    "12": "result",
                    "7": "write_status"
                },
                "uVar2": {
                    "8": "result",
                    "9": "return_value",
                    "6": "error_code"
                },
                "FUN_08007e74": {
                    "6": "i2c_master_write"
                },
                "param_2": {
                    "4": "value"
                },
                "param_3": {
                    "1": "length",
                    "3": "size"
                },
                "param_4": {
                    "1": "buffer_size"
                },
                "FUN_080091c6": {
                    "2": "memset",
                    "1": "initialize_data_buffer"
                },
                "DAT_200003d0": {
                    "1": "data_1",
                    "2": "data_buffer"
                },
                "DAT_200003cc": {
                    "1": "write_buffer"
                },
                "DAT_200003b8": {
                    "1": "var2"
                },
                "DAT_200003c5": {
                    "1": "buffer_size"
                },
                "DAT_200003b6": {
                    "1": "counter_1",
                    "2": "variable1"
                },
                "DAT_200003b4": {
                    "1": "write_status",
                    "2": "variable2"
                },
                "memset": {
                    "2": "clear_memory",
                    "1": "clear_data_buffer"
                },
                "param_1 + 0x11": {
                    "1": "is_data_null"
                },
                "param_1 + 0x14": {
                    "1": "write_address"
                },
                "DAT_200003cc != 0": {
                    "1": "has_data"
                },
                "memset(DAT_200003cc, 0, DAT_200003c5)": {
                    "1": "clear_data"
                }
            }
        },
        "FUN_08002ac0": {
            "entrypoint": "0x08002ac0",
            "current_name": "send_i2c_data_08002ac0",
            "code": "\nvoid send_i2c_data_08002ac0(undefined4 device_address,undefined4 unused_param,undefined4 data_1,undefined4 data_2)\n\n{\n  write_i2c_data_08002a58(device_address,1,data_1,data_2,data_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ac0": "send_i2c_data_08002ac0",
                "param_1": "device_address",
                "param_3": "data_1",
                "param_4": "data_2",
                "param_2": "unused_param"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_08002a58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002ac0": {
                    "5": "write_i2c_data_wrapper",
                    "4": "write_i2c_data",
                    "17": "send_i2c_data",
                    "2": "write_data_to_i2c_device",
                    "1": "write_i2c_data_to_device"
                },
                "param_1": {
                    "1": "device_handle",
                    "23": "device_address",
                    "6": "device"
                },
                "param_3": {
                    "4": "data1",
                    "1": "data_byte_1",
                    "3": "param_3",
                    "16": "data_1"
                },
                "param_4": {
                    "1": "length",
                    "4": "data2",
                    "3": "param_4",
                    "16": "data_2"
                },
                "param_2": {
                    "1": "param",
                    "3": "param2",
                    "2": "reserved",
                    "5": "unused_param",
                    "4": "param_2"
                }
            }
        },
        "FUN_08002acc": {
            "entrypoint": "0x08002acc",
            "current_name": "resize_memory_block_08002acc",
            "code": "\nvoid resize_memory_block_08002acc(uint requested_size,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  if (DAT_200003c4 < requested_size) {\n    if (requested_size < 0x20) {\n      requested_size = 0x20;\n    }\n    DAT_200003c8 = resize_memory(DAT_200003c8,requested_size,param3,(uint)DAT_200003c4,param4);\n    if (DAT_200003c8 == 0) {\n      DAT_200003c4 = 0;\n    }\n    else {\n      DAT_200003c4 = (byte)requested_size;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002acc": "resize_memory_block_08002acc",
                "param_1": "requested_size",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "realloc": "resize_memory"
            },
            "calling": [
                "FUN_08002b68"
            ],
            "called": [
                "FUN_08009908"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002acc": {
                    "1": "allocate_memory",
                    "7": "resize_memory_block",
                    "3": "resize_memory",
                    "2": "resize_array"
                },
                "param_1": {
                    "1": "size",
                    "2": "desired_size",
                    "15": "requested_size",
                    "11": "new_size"
                },
                "param_2": {
                    "16": "param2",
                    "1": "unused_1",
                    "2": "unused_param",
                    "5": "arg2"
                },
                "param_3": {
                    "1": "old_size",
                    "16": "param3",
                    "5": "arg3"
                },
                "param_4": {
                    "1": "unused_param2",
                    "16": "param4",
                    "5": "arg4"
                },
                "DAT_200003c4": {
                    "4": "current_size",
                    "1": "allocated_size"
                },
                "DAT_200003c8": {
                    "2": "allocated_memory",
                    "3": "memory_block"
                },
                "realloc": {
                    "1": "resize_block"
                }
            }
        },
        "FUN_08002b68": {
            "entrypoint": "0x08002b68",
            "current_name": "process_data_08002b68",
            "code": "\nundefined4\nprocess_data_08002b68(undefined4 *device,uint device_address,undefined4 status,uint data_size,byte data_size)\n\n{\n  int result;\n  uint data_length;\n  uint timeout;\n  \n  data_length = (uint)data_size;\n  if (*(char *)((int)device + 0x11) == '\\0') {\n    return 0;\n  }\n  timeout = data_size;\n  initialize_data(status);\n  if (DAT_200003c8 != 0) {\n    if (data_length != 0) {\n      start_transmission(device,device_address);\n      if (3 < data_length) {\n        data_length = 3;\n      }\n      while( true ) {\n        if (data_length == 0) break;\n        (**(code **)*device)(device,data_size >> ((data_length - 1 & 0x1f) << 3) & 0xff);\n        data_length = data_length - 1 & 0xff;\n      }\n      write_i2_c_data(device,0);\n    }\n    result = receive_data(device + 5,(device_address & 0x7f) << 1,DAT_200003c8,status,timeout);\n    if (result != 0) {\n      status = 0;\n    }\n    DAT_200003b5 = 0;\n    DAT_200003b7 = (char)status;\n    return status;\n  }\n  device[1] = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002b68": "process_data_08002b68",
                "param_1": "device",
                "param_2": "device_address",
                "param_3": "status",
                "param_4": "data_size",
                "param_5": "data_size",
                "iVar1": "result",
                "uVar2": "data_length",
                "uVar3": "timeout",
                "allocateRxBuffer": "initialize_data",
                "beginTransmission": "start_transmission",
                "write_i2c_data_08002a58": "write_i2_c_data",
                "i2c_master_read": "receive_data"
            },
            "calling": [
                "FUN_08002c00"
            ],
            "called": [
                "FUN_08002a58",
                "FUN_08002a30",
                "FUN_08007f0e",
                "FUN_08002acc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002b68": {
                    "2": "perform_i2_c_transaction",
                    "3": "read_i2c_data",
                    "1": "read_and_write_i2_c_data",
                    "10": "process_data"
                },
                "param_1": {
                    "1": "buffer",
                    "25": "device"
                },
                "param_2": {
                    "11": "address",
                    "13": "device_address",
                    "2": "size",
                    "1": "data_buffer_size"
                },
                "param_3": {
                    "1": "device_address",
                    "2": "data_size",
                    "4": "data_buffer",
                    "23": "status"
                },
                "param_4": {
                    "1": "data_address",
                    "16": "data_size",
                    "2": "data_buffer_size",
                    "5": "data_buffer"
                },
                "param_5": {
                    "1": "param",
                    "5": "byte_value",
                    "6": "data_size",
                    "3": "input_value",
                    "4": "data_buffer",
                    "2": "param_5"
                },
                "iVar1": {
                    "5": "read_result",
                    "19": "result",
                    "1": "return_value",
                    "4": "error_code"
                },
                "uVar2": {
                    "1": "i",
                    "4": "byte_count",
                    "2": "byte_value_as_uint",
                    "5": "data_length"
                },
                "uVar3": {
                    "3": "data_size",
                    "1": "param4_value",
                    "2": "requested_size",
                    "17": "timeout"
                },
                "allocateRxBuffer": {
                    "7": "initialize_data",
                    "4": "initialize_data_buffer",
                    "3": "initialize_data_08002a30",
                    "1": "allocate_receive_buffer"
                },
                "DAT_200003c8": {
                    "4": "data_buffer",
                    "3": "status",
                    "1": "buffer_status"
                },
                "beginTransmission": {
                    "1": "resize_memory_block",
                    "2": "write_i2c_data_08002a58"
                },
                "write_i2c_data_08002a58": {
                    "4": "write_i2c_data",
                    "2": "send_i2c_data",
                    "8": "write_i2_c_data",
                    "1": "write_data_to_i2_c"
                },
                "i2c_master_read": {
                    "1": "receive_i2_c_data",
                    "3": "receive_data_08007f0e",
                    "6": "receive_data"
                },
                "DAT_200003b5": {
                    "2": "error_flag",
                    "1": "param_3_temp"
                },
                "DAT_200003b7": {
                    "1": "value2",
                    "2": "flag_value"
                },
                "receive_data_08007f0e": {
                    "1": "receive_data_helper_function"
                },
                "resize_memory_block_08002acc": {
                    "4": "resize_memory_block"
                },
                "dataType": {
                    "1": "input_value"
                },
                "initialize_data_08002a30": {
                    "1": "initialize_data"
                }
            }
        },
        "FUN_08002c00": {
            "entrypoint": "0x08002c00",
            "current_name": "process_data_08002c00",
            "code": "\nvoid process_data_08002c00(void)\n\n{\n  process_data_08002c00();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c00": "process_data_08002c00",
                "process_data_08002b68": "process_data"
            },
            "calling": [
                "FUN_08002c14"
            ],
            "called": [
                "FUN_08002b68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002c00": {
                    "1": "process_device_data",
                    "21": "process_data",
                    "4": "process_and_return",
                    "2": "initialize_device"
                },
                "device": {
                    "3": "device",
                    "26": "device_ptr",
                    "1": "device_pointer"
                },
                "device_address": {
                    "27": "address",
                    "1": "addr",
                    "3": "device_addr"
                },
                "status": {
                    "2": "current_status",
                    "9": "status",
                    "8": "device_status",
                    "5": "dev_status",
                    "1": "state",
                    "6": "status_code"
                },
                "data_size": {
                    "6": "data",
                    "3": "size_of_data",
                    "18": "size",
                    "1": "byte_size"
                },
                "process_data_08002b68": {
                    "1": "extract_device_data",
                    "5": "process_data"
                },
                "byte": {
                    "2": "data"
                },
                "data": {
                    "11": "data",
                    "1": "input_data",
                    "4": "data_buffer"
                },
                "data_size_2": {
                    "1": "size_2"
                },
                "byte_data_size": {
                    "1": "data"
                }
            }
        },
        "FUN_08002c14": {
            "entrypoint": "0x08002c14",
            "current_name": "process_data_08002c14",
            "code": "\nvoid process_data_08002c14(void)\n\n{\n  process_data_08002c14();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c14": "process_data_08002c14",
                "process_data_08002c00": "process_data"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [
                "FUN_08002c00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002c14": {
                    "4": "process_and_return_data",
                    "1": "initialize_data_processing",
                    "22": "process_data"
                },
                "process_data_08002c00": {
                    "1": "retrieve_data",
                    "14": "process_data",
                    "2": "execute_data_processing",
                    "9": "process_data_helper",
                    "3": "process_data_internal"
                }
            }
        },
        "FUN_08002c1e": {
            "entrypoint": "0x08002c1e",
            "current_name": "initialize_process_08002c1e",
            "code": "\nvoid initialize_process_08002c1e(undefined4 status,undefined4 value,undefined4 param_3,undefined4 param_4)\n\n{\n  process_parameter(1,0xffff,param_3,param_4,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c1e": "initialize_process_08002c1e",
                "param_1": "status",
                "param_2": "value",
                "process_param_08002948": "process_parameter"
            },
            "calling": [],
            "called": [
                "FUN_08002948"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002c1e": {
                    "2": "process_and_return",
                    "1": "initialize_process_params",
                    "4": "process_parameters",
                    "5": "process_param",
                    "8": "initialize_process"
                },
                "param_1": {
                    "1": "param1",
                    "28": "status"
                },
                "param_2": {
                    "28": "value",
                    "1": "input_param_2"
                },
                "param_3": {
                    "5": "param3",
                    "1": "input1",
                    "2": "param_a",
                    "12": "param_3",
                    "3": "param"
                },
                "param_4": {
                    "2": "param_b",
                    "5": "param4",
                    "3": "param2",
                    "1": "arg2",
                    "12": "param_4"
                },
                "process_param_08002948": {
                    "1": "process_param_and_return_value",
                    "2": "process_parameter"
                }
            }
        },
        "FUN_08002c2c": {
            "entrypoint": "0x08002c2c",
            "current_name": "execute_callback_08002c2c",
            "code": "\nvoid execute_callback_08002c2c(undefined4 unused,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  if (DAT_200005d4 != (code *)0x0) {\n    (*DAT_200005d4)(arg1,arg2,arg2,DAT_200005d4,arg3);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c2c": "execute_callback_08002c2c",
                "param_1": "unused",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002c2c": {
                    "1": "call_function_if_not_null",
                    "24": "execute_callback",
                    "3": "execute_callback_function"
                },
                "param_1": {
                    "2": "unused_param",
                    "12": "unused",
                    "6": "arg1",
                    "1": "unknown_param",
                    "5": "callback_function"
                },
                "param_2": {
                    "1": "param",
                    "2": "argument1",
                    "12": "arg1",
                    "4": "param1",
                    "6": "arg2"
                },
                "param_3": {
                    "4": "param2",
                    "2": "param1",
                    "1": "input3",
                    "6": "arg3",
                    "12": "arg2"
                },
                "param_4": {
                    "2": "callback_param3",
                    "1": "input4",
                    "4": "param3",
                    "6": "arg4",
                    "12": "arg3"
                }
            }
        },
        "FUN_08002ce0": {
            "entrypoint": "0x08002ce0",
            "current_name": "initialize_firmata_08002ce0",
            "code": "\nint initialize_firmata_08002ce0(int base_address)\n\n{\n  int offset;\n  \n  marshal_data(base_address + 0x40);\n  offset = base_address + 0x44;\n  parse_data(offset,base_address,0x40);\n  *(undefined *)(base_address + 0xc4) = 0;\n  *(undefined4 *)(base_address + 200) = 0;\n  *(undefined *)(base_address + 0x1f8) = 0;\n  update_parameters(offset,0xe0,analog_callback + 1,0);\n  update_parameters(offset,0x90,&label_1,0);\n  update_parameters(offset,0xc0,&label_2,0);\n  update_parameters(offset,0xd0,&label_3,0);\n  update_parameters(offset,0xf4,&label_4,0);\n  update_parameters(offset,0xf5,&label_5,0);\n  update_params(offset,0x71,&label_6,0);\n  attach_callback(offset,0xf0,&label_7,0);\n  update_data(offset,0x79,&label_8,base_address);\n  update_params(offset,0xf9,&label_9,base_address);\n  update_params(offset,0xff,&label_10,0);\n  return base_address;\n}\n\n",
            "renaming": {
                "FUN_08002ce0": "initialize_firmata_08002ce0",
                "param_1": "base_address",
                "iVar1": "offset",
                "update_params_08003350": "update_params",
                "update_data_08003346": "update_data",
                "update_parameters_08003306": "update_parameters",
                "update_parameters_08003366": "update_params",
                "FirmataMarshaller": "marshal_data",
                "FirmataParser": "parse_data",
                "attach": "attach_callback",
                "update_data": "update_object_data",
                "update_parameter": "update_object_parameter",
                "update_params": "update_object_params",
                "staticAnalogCallback": "analog_callback",
                "LAB_08002c40_1": "label_1",
                "LAB_08002c7c_1": "label_2",
                "LAB_08002c90_1": "label_3",
                "LAB_08002c54_1": "label_4",
                "LAB_08002c68_1": "label_5",
                "LAB_08002ca4_1": "label_6",
                "LAB_08002cb8_1": "label_7",
                "LAB_08002e1a_1": "label_8",
                "LAB_08002dea_1": "label_9",
                "LAB_08002cd0_1": "label_10"
            },
            "calling": [
                "FUN_08002dbc"
            ],
            "called": [
                "FUN_08003350",
                "FUN_0800314e",
                "FUN_08003346",
                "FUN_08003306",
                "FUN_080032bc",
                "FUN_08003366",
                "FUN_08003370"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002ce0": {
                    "8": "initialize_firmata",
                    "2": "initialize_board",
                    "1": "initialize_device_and_parameters",
                    "3": "initialize_and_update_params",
                    "6": "initialize_device"
                },
                "param_1": {
                    "2": "device_address",
                    "1": "board_address",
                    "26": "base_address"
                },
                "iVar1": {
                    "1": "data_offset",
                    "3": "object_address",
                    "5": "offset",
                    "4": "data_address",
                    "2": "new_address"
                },
                "update_params_08003350": {
                    "1": "update_object_parameters",
                    "18": "update_params",
                    "2": "update_parameters"
                },
                "update_data_08003346": {
                    "1": "update_data_with_value",
                    "3": "update_object_data",
                    "25": "update_data"
                },
                "update_parameters_08003306": {
                    "1": "update_config_parameter",
                    "3": "update_parameter",
                    "2": "update_analog_parameters",
                    "20": "update_parameters"
                },
                "initialize_param_0800314e": {
                    "9": "initialize_param",
                    "4": "initialize_output_param",
                    "3": "initialize_parameter",
                    "1": "initialize_parameter_output"
                },
                "initialize_parameters_080032bc": {
                    "1": "init_parameters",
                    "18": "initialize_parameters"
                },
                "update_parameters_08003366": {
                    "5": "update_params",
                    "1": "update_additional_parameters",
                    "4": "update_parameters2",
                    "3": "update_parameters_2",
                    "2": "update_parameters"
                },
                "set_parameters_08003370": {
                    "1": "set_parameters70",
                    "21": "set_parameters"
                },
                "FirmataMarshaller": {
                    "3": "initialize_param_0800314e",
                    "1": "marshall_firmata",
                    "2": "marshal_firmata"
                },
                "FirmataParser": {
                    "1": "update_parameters_08003306",
                    "3": "parse_firmata",
                    "2": "initialize_parameters_080032bc"
                },
                "attach": {
                    "1": "set_parameters_08003370",
                    "2": "attach_object",
                    "4": "attach_callback"
                },
                "base_address": {
                    "1": "object_address"
                },
                "initialize_output_param": {
                    "1": "initialize_output_parameter"
                },
                "update_data": {
                    "1": "update_object_data"
                },
                "update_parameter": {
                    "1": "update_object_parameter"
                },
                "update_config_parameter": {
                    "1": "update_config_object_parameter"
                },
                "update_config_param": {
                    "1": "update_config_object_param"
                },
                "initialize_param_data_structure": {
                    "1": "initialize_data_structure_param"
                },
                "object_address": {
                    "2": "data_object_address"
                },
                "update_params": {
                    "1": "update_object_params"
                },
                "staticAnalogCallback": {
                    "2": "analog_callback"
                },
                "LAB_08002c40_1": {
                    "1": "label_1"
                },
                "LAB_08002c7c_1": {
                    "1": "param2_label"
                },
                "LAB_08002c90_1": {
                    "1": "param3_label"
                },
                "LAB_08002c54_1": {
                    "1": "callback4"
                },
                "LAB_08002c68_1": {
                    "1": "data5"
                },
                "LAB_08002ca4_1": {
                    "1": "device_callback5"
                },
                "LAB_08002cb8_1": {
                    "1": "attach_callback"
                },
                "LAB_08002e1a_1": {
                    "1": "param8_label"
                },
                "LAB_08002dea_1": {
                    "1": "data_callback2"
                },
                "LAB_08002cd0_1": {
                    "1": "label_10"
                },
                "value": {
                    "1": "param_value"
                },
                "data_structure": {
                    "1": "param_data_structure"
                },
                "param_value": {
                    "1": "param_data_value"
                },
                "param_data": {
                    "1": "param_data"
                }
            }
        },
        "FUN_08002dbc": {
            "entrypoint": "0x08002dbc",
            "current_name": "process_param_08002dbc",
            "code": "\nvoid process_param_08002dbc(int flag,int value)\n\n{\n  if (flag != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    execute_firmata_function(&DAT_200003d4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002dbc": "process_param_08002dbc",
                "param_1": "flag",
                "param_2": "value",
                "FirmataClass": "execute_firmata_function"
            },
            "calling": [],
            "called": [
                "FUN_08002ce0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002dbc": {
                    "1": "execute_if_condition_met",
                    "2": "process_params",
                    "5": "process_param",
                    "3": "handle_param"
                },
                "param_1": {
                    "5": "flag",
                    "1": "context",
                    "2": "command",
                    "3": "value1"
                },
                "param_2": {
                    "5": "flag",
                    "3": "value2",
                    "2": "code",
                    "1": "flag_value",
                    "8": "value"
                },
                "FUN_08002ce0": {
                    "1": "get_decompiled_value",
                    "2": "get_error_code",
                    "3": "check_condition",
                    "4": "calculate_result"
                },
                "FirmataClass": {
                    "1": "execute_firmata_function"
                }
            }
        },
        "FUN_08002ddc": {
            "entrypoint": "0x08002ddc",
            "current_name": "send_version_wrapper_08002ddc",
            "code": "\nvoid send_version_wrapper_08002ddc(int original_param,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  send_updated_version(original_param + 0x40,2,5,param_4,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ddc": "send_version_wrapper_08002ddc",
                "param_1": "original_param",
                "sendVersion": "send_updated_version"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [
                "FUN_0800322c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002ddc": {
                    "6": "send_version_wrapper",
                    "1": "send_version_and_receive_ack",
                    "4": "send_updated_version",
                    "2": "send_version_information"
                },
                "param_1": {
                    "3": "input_param",
                    "1": "base_param",
                    "5": "original_param"
                },
                "param_2": {
                    "1": "subfunction_param_1",
                    "2": "unknown_param_2",
                    "4": "param_2"
                },
                "param_3": {
                    "1": "arg2",
                    "2": "unknown_param_3",
                    "4": "param_3"
                },
                "param_4": {
                    "1": "version_param3",
                    "3": "data",
                    "5": "param_4",
                    "2": "output_param"
                },
                "sendVersion": {
                    "1": "send_version_with_offset"
                },
                "FUN_0800322c": {
                    "2": "update_version",
                    "1": "send_version_internal"
                }
            }
        },
        "FUN_08002df6": {
            "entrypoint": "0x08002df6",
            "current_name": "send_firmware_version_if_not_zero_08002df6",
            "code": "\nvoid send_firmware_version_if_not_zero_08002df6(int device_address)\n\n{\n  undefined *firmware_info;\n  \n  if (*(byte *)(device_address + 0xc4) == 0) {\n    return;\n  }\n  firmware_info = *(undefined **)(device_address + 200);\n  send_firmware_version(device_address + 0x40,*firmware_info,firmware_info_length,*(byte *)(device_address + 0xc4) - 2,firmware_info + 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002df6": "send_firmware_version_if_not_zero_08002df6",
                "param_1": "device_address",
                "puVar1": "firmware_info",
                "sendFirmwareVersion": "send_firmware_version",
                "puVar1[1]": "firmware_info_length"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [
                "FUN_080031ce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002df6": {
                    "1": "send_firmware_version_if_enabled",
                    "4": "send_firmware_version_if_valid",
                    "6": "send_firmware_version_if_not_zero",
                    "3": "send_firmware_version_if_flag_set",
                    "2": "send_firmware_version_if_required",
                    "5": "send_firmware_info"
                },
                "param_1": {
                    "12": "device_address",
                    "1": "param",
                    "3": "device",
                    "4": "device_ptr",
                    "5": "device_data"
                },
                "puVar1": {
                    "6": "firmware_data",
                    "14": "firmware_info",
                    "1": "firmware_version_info",
                    "3": "firmware_ptr"
                },
                "sendFirmwareVersion": {
                    "12": "send_firmware_version",
                    "1": "update_firmware_version"
                },
                "param_2": {
                    "1": "unknown_param",
                    "2": "param_2"
                },
                "param_3": {
                    "1": "arg2",
                    "2": "arg3"
                },
                "param_4": {
                    "1": "firmware_length",
                    "2": "arg4"
                },
                "param_5": {
                    "1": "arg4",
                    "2": "param_5"
                },
                "*(byte *)(param_1 + 0xc4)": {
                    "1": "firmware_supported",
                    "3": "firmware_status"
                },
                "param_1 + 0x40": {
                    "1": "data_address",
                    "2": "firmware_version_address"
                },
                "puVar1[0]": {
                    "1": "firmware_info_ptr"
                },
                "puVar1[1]": {
                    "1": "length"
                },
                "*(byte *)(param_1 + 0xc4) - 2": {
                    "1": "firmware_version_length"
                },
                "puVar1 + 2": {
                    "1": "additional_params"
                },
                "param_1 + 0xc4": {
                    "1": "device_flag_offset"
                },
                "param_1 + 200": {
                    "1": "buffer_address"
                },
                "PTR_FUN_080031ce": {
                    "1": "process_firmware_data"
                },
                "*puVar1": {
                    "1": "data_ptr"
                },
                "FUN_080031ce": {
                    "1": "send_firmware_version"
                },
                "*(undefined **)(param_1 + 200)": {
                    "1": "firmware_info_ptr"
                },
                "(*puVar1)[0]": {
                    "1": "version"
                },
                "DAT_08002e06": {
                    "1": "version_offset"
                },
                "DAT_08002e0b": {
                    "1": "size_offset"
                },
                "DAT_08002e0c": {
                    "1": "counter_offset"
                }
            }
        },
        "FUN_08002e26": {
            "entrypoint": "0x08002e26",
            "current_name": "update_device_info_08002e26",
            "code": "\nvoid update_device_info_08002e26(int device_address,undefined4 firmware_version)\n\n{\n  *(undefined4 *)(device_address + 0xc0) = firmware_version;\n  copy_value_to_destination(device_address + 0x40);\n  print_device_version(device_address);\n  print_device_firmware_version(device_address);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e26": "update_device_info_08002e26",
                "param_1": "device_address",
                "param_2": "firmware_version",
                "copy_value_to_pointer_08003154": "copy_value_to_destination",
                "printVersion": "print_device_version",
                "printFirmwareVersion": "print_device_firmware_version",
                "value": "val"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "FUN_08003154",
                "FUN_08002df6",
                "FUN_08002ddc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002e26": {
                    "2": "process_device_info",
                    "1": "update_device_settings",
                    "5": "initialize_device",
                    "11": "update_device_info"
                },
                "param_1": {
                    "14": "device_address",
                    "1": "device_info_pointer",
                    "8": "device_info",
                    "3": "device_info_address"
                },
                "param_2": {
                    "2": "version_number",
                    "18": "firmware_version",
                    "1": "firmware_value",
                    "8": "version"
                },
                "copy_value_to_pointer_08003154": {
                    "15": "copy_value_to_destination",
                    "1": "store_firmware_version",
                    "11": "copy_value_to_pointer"
                },
                "printVersion": {
                    "13": "print_device_version",
                    "1": "print_device_info_version",
                    "2": "display_device_version"
                },
                "printFirmwareVersion": {
                    "2": "print_installed_firmware_version",
                    "1": "print_firmware_version",
                    "7": "print_device_firmware_version"
                },
                "send_firmware_version_if_not_zero_08002df6": {
                    "6": "send_firmware_version_if_non_zero",
                    "2": "send_firmware_version",
                    "1": "send_firmware_if_non_zero"
                },
                "send_version_wrapper_08002ddc": {
                    "1": "update_version",
                    "13": "send_version_wrapper"
                },
                "destination": {
                    "1": "pointer_destination"
                },
                "value": {
                    "1": "value_to_copy"
                },
                "device_address": {
                    "1": "device_address_to_send"
                },
                "original_param": {
                    "2": "original_param"
                },
                "param_3": {
                    "2": "param3"
                },
                "param_4": {
                    "2": "param4"
                },
                "param_1 + 0xc0": {
                    "1": "destination_address"
                },
                "param_1 + 0x40": {
                    "1": "source_address"
                },
                "F_08002e26": {
                    "1": "update_device_info"
                }
            }
        },
        "FUN_08002e44": {
            "entrypoint": "0x08002e44",
            "current_name": "extract_file_name_08002e44",
            "code": "\nvoid extract_file_name_08002e44(int output_buffer,int file_path,undefined param3,undefined param4)\n\n{\n  byte file_name_length;\n  char file_name_length;\n  int cpp_index;\n  int last_slash_index;\n  undefined *new_buffer;\n  \n  cpp_index = find_string(file_path,\".cpp\");\n  last_slash_index = find_last_character(file_path,0x2f);\n  if (last_slash_index == 0) {\n    last_slash_index = find_last_character(file_path,0x5c);\n  }\n  if (last_slash_index != 0) {\n    file_path = last_slash_index + 1;\n  }\n  if (cpp_index == 0) {\n    file_name_length = get_string_length(file_path);\n    *(char *)(output_buffer + 0xc4) = file_name_length + '\\x02';\n  }\n  else {\n    *(char *)(output_buffer + 0xc4) = ((char)cpp_index - (char)file_path) + '\\x02';\n  }\n  deallocate_memory(*(undefined4 *)(output_buffer + 200));\n  file_name_length = *(byte *)(output_buffer + 0xc4);\n  new_buffer = (undefined *)allocate_memory(file_name_length + 1);\n  *(undefined **)(output_buffer + 200) = new_buffer;\n  new_buffer[file_name_length] = 0;\n  *new_buffer = param3;\n  new_buffer[1] = param4;\n  copy_string_with_length(new_buffer + 2,file_path,*(byte *)(output_buffer + 0xc4) - 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e44": "extract_file_name_08002e44",
                "param_1": "output_buffer",
                "param_2": "file_path",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "file_name_length",
                "cVar2": "file_name_length",
                "iVar3": "cpp_index",
                "iVar4": "last_slash_index",
                "puVar5": "new_buffer",
                "strstr": "find_string",
                "strrchr": "find_last_character",
                "strlen": "get_string_length",
                "free": "deallocate_memory",
                "malloc": "allocate_memory",
                "strncpy": "copy_string_with_length"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08000178",
                "FUN_080091a0",
                "FUN_0800997e",
                "FUN_080099a4",
                "FUN_08009190",
                "FUN_08009954"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002e44": {
                    "1": "extract_filename_from_path",
                    "10": "extract_file_name",
                    "2": "extract_file_name_from_path"
                },
                "param_1": {
                    "1": "file_info_ptr",
                    "3": "file_info",
                    "2": "file_data",
                    "14": "output_buffer"
                },
                "param_2": {
                    "1": "source_file_path",
                    "2": "input_file_path",
                    "9": "input_path",
                    "11": "file_path"
                },
                "param_3": {
                    "1": "undefined_1",
                    "11": "param3",
                    "2": "undefined_parameter1",
                    "3": "param_3",
                    "5": "undefined1"
                },
                "param_4": {
                    "1": "value_2",
                    "11": "param4",
                    "2": "undefined_param_4",
                    "3": "param_4",
                    "5": "undefined2"
                },
                "bVar1": {
                    "3": "length",
                    "2": "byte_value",
                    "8": "file_name_length",
                    "1": "char_length",
                    "5": "extension_length"
                },
                "cVar2": {
                    "1": "char_var2",
                    "4": "filename_length",
                    "5": "file_name_length",
                    "2": "char_var",
                    "3": "extension_length"
                },
                "iVar3": {
                    "13": "cpp_index",
                    "1": "str_str_result",
                    "2": "extension_start_index",
                    "3": "extension_index",
                    "5": "cpp_extension_index"
                },
                "iVar4": {
                    "1": "last_slash_backslash_index",
                    "2": "path_separator_index",
                    "9": "last_slash_index",
                    "6": "slash_index"
                },
                "puVar5": {
                    "1": "output_buffer",
                    "2": "filename_buffer",
                    "3": "new_file_name",
                    "5": "new_buffer",
                    "4": "file_name_buffer"
                },
                "strstr": {
                    "1": "find_string"
                },
                "strrchr": {
                    "1": "find_last_character"
                },
                "strcmp": {
                    "1": "compare_strings"
                },
                "strlen": {
                    "1": "get_string_length"
                },
                "free": {
                    "2": "deallocate_memory"
                },
                "malloc": {
                    "2": "allocate_memory"
                },
                "strncpy": {
                    "1": "copy_string_with_length"
                },
                "+ 0xc4": {
                    "1": "offset_value"
                },
                "free(*(undefined4 *)(param_1 + 200))": {
                    "1": "free_previous_file_name"
                },
                "*(undefined **)(param_1 + 200)": {
                    "1": "previous_file_name_pointer"
                },
                "(char)iVar3 - (char)param_2": {
                    "1": "cpp_filename_diff"
                },
                "*(byte *)(param_1 + 0xc4)": {
                    "1": "file_name_length"
                },
                "puVar5[bVar1] = 0": {
                    "1": "null_terminate_new_file_name"
                },
                "*puVar5 = param_3": {
                    "1": "assign_param3"
                },
                "puVar5[1] = param_4": {
                    "1": "assign_param4"
                },
                "strncpy(puVar5 + 2,param_2,*(byte *)(param_1 + 0xc4) - 2)": {
                    "1": "copy_file_name"
                },
                "outputBuffer": {
                    "1": "output_buffer"
                },
                "inputFilePath": {
                    "1": "input_file_path"
                },
                "param3": {
                    "1": "param3"
                },
                "param4": {
                    "1": "param4"
                },
                "fileNameLength": {
                    "1": "file_name_length"
                },
                "extensionLength": {
                    "1": "extension_length"
                },
                "cppIndex": {
                    "1": "cpp_index"
                },
                "lastSlashIndex": {
                    "1": "last_slash_index"
                },
                "fileName": {
                    "1": "file_name"
                }
            }
        },
        "FUN_08002ec4": {
            "entrypoint": "0x08002ec4",
            "current_name": "execute_function_08002ec4",
            "code": "\nvoid execute_function_08002ec4(pointer_to_function_pointer function_pointer)\n\n{\n  (**(function_pointer **)(**(pointer_to_function_pointer **)(function_pointer + 0xc0) + 8))();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ec4": "execute_function_08002ec4",
                "param_1": "function_pointer",
                "int": "pointer_to_function_pointer",
                "code": "function_pointer"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002ec4": {
                    "1": "execute_function_from_pointer",
                    "4": "execute_callback",
                    "2": "execute_dynamic_function",
                    "15": "execute_function",
                    "3": "execute_nested_function"
                },
                "param_1": {
                    "2": "callback_ptr",
                    "10": "function_pointer",
                    "1": "callback_pointer",
                    "3": "parameter"
                },
                "**(code **)(**(int **)(param_1 + 0xc0) + 8)": {
                    "1": "function_pointer()",
                    "4": "function_to_execute"
                },
                "**(int **)(param_1 + 0xc0)": {
                    "1": "function_pointer_table"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "param_1 + 0xc0": {
                    "1": "func_table"
                },
                "*(int *)(functionPointerTable + 8)": {
                    "1": "function_to_execute"
                },
                "0xc0": {
                    "1": "ptr_offset"
                },
                "8": {
                    "2": "function_index"
                },
                "param_2": {
                    "1": "variable2"
                },
                "<unchanged_variable>": {
                    "1": "<unchanged_variable>"
                },
                "int": {
                    "1": "pointer_to_function_pointer"
                },
                "code": {
                    "1": "function_pointer"
                },
                "c0": {
                    "1": "offset"
                },
                "ptr_": {
                    "1": "pointer_to"
                },
                "dat_": {
                    "1": "data_"
                },
                "**(int **)(param + 0xc0)": {
                    "1": "nested_function_pointer"
                },
                "**(code **)(nestedFunctionPointer + 8)": {
                    "1": "nested_function"
                },
                "7": {
                    "1": "function_offset"
                },
                "<variable_name>": {
                    "1": "<new_variable_name>"
                },
                "(**(int **)(param_1 + 0xc0) + 8)": {
                    "1": "callback_function"
                },
                "code **(funcPtr + 8)": {
                    "1": "function"
                },
                "**(int **)(param_1 + 0xc0) + 8": {
                    "1": "execute_function_ptr"
                },
                "param_1+0xc0": {
                    "1": "function_pointer_offset"
                }
            }
        },
        "FUN_08002ed2": {
            "entrypoint": "0x08002ed2",
            "current_name": "parse_and_process_data_08002ed2",
            "code": "\nvoid parse_and_process_data_08002ed2(int data_ptr)\n\n{\n  uint result;\n  \n  result = (**(code **)(**(int **)(data_ptr + 0xc0) + 0xc))();\n  if (result != 0xffffffff) {\n    process_parsed_data(data_ptr + 0x44,result & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed2": "parse_and_process_data_08002ed2",
                "param_1": "data_ptr",
                "uVar1": "result",
                "parse": "process_parsed_data"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [
                "FUN_08003474"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002ed2": {
                    "11": "parse_and_process_data",
                    "1": "parse_and_handle",
                    "4": "parse_and_process",
                    "2": "parse_and_extract_data",
                    "3": "parse_and_handle_data"
                },
                "param_1": {
                    "2": "data_address",
                    "1": "data_offset",
                    "5": "input_value",
                    "6": "input_data"
                },
                "uVar1": {
                    "25": "result",
                    "1": "result_code",
                    "4": "function_result"
                },
                "FUN_08003474": {
                    "1": "parse_and_handle",
                    "2": "parse_data",
                    "8": "parse"
                },
                "param_2": {
                    "1": "extracted_data",
                    "2": "parse_parameter",
                    "3": "value"
                },
                "parse": {
                    "1": "parse_subfunction",
                    "2": "process_parsed_data"
                },
                "FUNC_08003474": {
                    "1": "parse"
                }
            }
        },
        "FUN_08002ef2": {
            "entrypoint": "0x08002ef2",
            "current_name": "send_analog_data_08002ef2",
            "code": "\nvoid send_analog_data_08002ef2(int base_address,undefined4 param2,undefined2 param3,undefined4 param4)\n\n{\n  send_analog_signal(base_address + 0x40,param2,param3,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ef2": "send_analog_data_08002ef2",
                "param_1": "base_address",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "sendAnalog": "send_analog_signal"
            },
            "calling": [
                "FUN_080022f8",
                "FUN_08000488"
            ],
            "called": [
                "FUN_08003158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002ef2": {
                    "1": "send_analog_plus_offset",
                    "27": "send_analog_data"
                },
                "param_1": {
                    "4": "analog_data",
                    "1": "input_pointer",
                    "3": "device_id",
                    "5": "base_address"
                },
                "param_2": {
                    "14": "param2",
                    "1": "param",
                    "3": "size",
                    "2": "analog_data"
                },
                "param_3": {
                    "1": "arg2",
                    "2": "value",
                    "14": "param3"
                },
                "param_4": {
                    "19": "param4",
                    "1": "arg3",
                    "4": "param_4",
                    "2": "param"
                },
                "FUN_08003158": {
                    "1": "process_send_analog",
                    "2": "process_analog_data"
                },
                "sendAnalog": {
                    "1": "send_analog_data",
                    "2": "send_analog_signal"
                }
            }
        },
        "FUN_08002efe": {
            "entrypoint": "0x08002efe",
            "current_name": "send_digital_port_with_offset_08002efe",
            "code": "\nvoid send_digital_port_with_offset_08002efe(int port,undefined4 param2,undefined2 param3,undefined4 param4)\n\n{\n  send_data_to_digital_port(port + 0x40,param2,param3,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002efe": "send_digital_port_with_offset_08002efe",
                "param_1": "port",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "sendDigitalPort": "send_data_to_digital_port"
            },
            "calling": [
                "FUN_08000be8"
            ],
            "called": [
                "FUN_0800319e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002efe": {
                    "3": "send_port_data",
                    "1": "send_digital_port_with_data",
                    "7": "send_digital_port_wrapper",
                    "2": "send_data_over_port",
                    "8": "send_digital_port_with_offset"
                },
                "param_1": {
                    "1": "port_num",
                    "8": "port",
                    "2": "base_address",
                    "6": "port_number"
                },
                "param_2": {
                    "1": "data_value",
                    "11": "param2",
                    "3": "value",
                    "2": "param",
                    "7": "param_2"
                },
                "param_3": {
                    "3": "data",
                    "1": "arg2",
                    "12": "param3",
                    "8": "param_3"
                },
                "param_4": {
                    "1": "data_param3",
                    "13": "param4",
                    "8": "param_4",
                    "2": "param"
                },
                "sendDigitalPort": {
                    "1": "send_data_to_port"
                },
                "FUN_0800319e": {
                    "1": "send_digital_port"
                }
            }
        },
        "FUN_08002f0a": {
            "entrypoint": "0x08002f0a",
            "current_name": "send_sysex_with_offset_08002f0a",
            "code": "\nvoid send_sysex_with_offset_08002f0a(int offset)\n\n{\n  send_sysex(offset + 0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f0a": "send_sysex_with_offset_08002f0a",
                "param_1": "offset",
                "sendSysex": "send_sysex"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [
                "FUN_0800325a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002f0a": {
                    "1": "send_sysex_message",
                    "2": "send_sysex_with_data_offset",
                    "3": "send_sysex_data",
                    "8": "send_sysex_command",
                    "10": "send_sysex_with_offset"
                },
                "param_1": {
                    "1": "param",
                    "2": "data_offset",
                    "6": "command",
                    "9": "offset"
                },
                "param_2": {
                    "8": "param2",
                    "1": "unk_param",
                    "2": "unused_param",
                    "3": "unknown_param"
                },
                "param_3": {
                    "1": "sysex_length",
                    "8": "param3",
                    "2": "param_3",
                    "4": "length"
                },
                "param_4": {
                    "1": "unknown_param",
                    "8": "param4",
                    "3": "param_4",
                    "2": "index"
                },
                "sendSysex": {
                    "2": "send_sysex_data",
                    "3": "send_sysex"
                },
                "FUN_0800325a": {
                    "1": "process_data"
                },
                "param_1 + 0x40": {
                    "1": "sysex_data_offset"
                }
            }
        },
        "FUN_08002f14": {
            "entrypoint": "0x08002f14",
            "current_name": "send_string_with_offset_08002f14",
            "code": "\nvoid send_string_with_offset_08002f14(int offset)\n\n{\n  send_string(offset + 0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f14": "send_string_with_offset_08002f14",
                "param_1": "offset",
                "sendString": "send_string"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0",
                "FUN_08000500",
                "FUN_080005f8"
            ],
            "called": [
                "FUN_080032a2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002f14": {
                    "1": "send_adjusted_string",
                    "2": "send_modified_string",
                    "6": "send_string_from_offset",
                    "16": "send_string_with_offset"
                },
                "param_1": {
                    "2": "base_address",
                    "1": "input_data",
                    "3": "input_string",
                    "16": "offset"
                },
                "sendString": {
                    "7": "send_string",
                    "1": "send_data",
                    "2": "send_string_function"
                },
                "param_1 + 0x40": {
                    "1": "string_to_be_sent"
                },
                "param_2": {
                    "3": "unused_param2",
                    "1": "unchanged",
                    "2": "param_2"
                },
                "param_3": {
                    "3": "unused_param_3",
                    "2": "param_3",
                    "1": "unchanged"
                },
                "param_4": {
                    "3": "unused_param_4",
                    "1": "unchanged",
                    "2": "unused_param"
                },
                "FUN_080032a2": {
                    "1": "sub_function"
                },
                "0x40": {
                    "1": "offset"
                }
            }
        },
        "FUN_08002f1e": {
            "entrypoint": "0x08002f1e",
            "current_name": "execute_function_08002f1e",
            "code": "\nvoid execute_function_08002f1e(int function_pointer)\n\n{\n  (**(function_code **)**(undefined4 **)(function_pointer + 0xc0))();\n  void;\n}\n\n",
            "renaming": {
                "FUN_08002f1e": "execute_function_08002f1e",
                "param_1": "function_pointer",
                "return": "void",
                "code": "function_code"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002f1e": {
                    "6": "execute_callback",
                    "18": "execute_function",
                    "1": "call_function_from_pointer",
                    "2": "execute_function_from_pointer",
                    "3": "execute_callback_function"
                },
                "param_1": {
                    "19": "function_pointer",
                    "1": "callback_ptr",
                    "2": "callback_pointer"
                },
                "(code **)": {
                    "1": "function_pointer"
                },
                "(undefined4 **)": {
                    "1": "function_pointer_ptr"
                },
                "**(code **)**(undefined4 **)(param_1 + 0xc0)": {
                    "1": "execute_fn_ptr",
                    "2": "function_to_execute"
                },
                "**(undefined4 **)(param_1 + 0xc0)": {
                    "1": "function"
                },
                "param_1 + 0xc0": {
                    "1": "function_pointer_offset"
                },
                "return": {
                    "1": "void"
                },
                "code": {
                    "2": "function_code",
                    "1": "function"
                },
                "(param_1 + 0xc0)": {
                    "1": "callback_pointer"
                },
                "param_2": {
                    "1": "new_param_name"
                },
                "param_n": {
                    "1": "new_param_name"
                },
                "variable1": {
                    "1": "new_variable_name"
                },
                "variable2": {
                    "1": "new_variable_name"
                },
                "variable_n": {
                    "1": "new_variable_name"
                },
                "**(code **)**(undefined4 **)(param_1 + 0xc0))()": {
                    "1": "execute_callback_function"
                }
            }
        },
        "FUN_08002f2c": {
            "entrypoint": "0x08002f2c",
            "current_name": "update_data_08002f2c",
            "code": "\nvoid update_data_08002f2c(undefined4 param1,uint code,undefined4 new_value)\n\n{\n  undefined4 temp_value;\n  \n  if (code == 0xd0) {\n    DAT_200005f0 = new_value;\n    return;\n  }\n  if (0xd0 < code) {\n    if (code == 0xf4) {\n      DAT_200005e0 = new_value;\n      return;\n    }\n    temp_value = new_value;\n    if ((code != 0xf5) && (temp_value = DAT_200005e4, code == 0xe0)) {\n      DAT_200005d4 = new_value;\n      return;\n    }\n    DAT_200005e4 = temp_value;\n    return;\n  }\n  if (code == 0x90) {\n    DAT_200005dc = new_value;\n    return;\n  }\n  if (code != 0xc0) {\n    return;\n  }\n  DAT_200005ec = new_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f2c": "update_data_08002f2c",
                "param_1": "param1",
                "param_2": "code",
                "param_3": "new_value",
                "uVar1": "temp_value"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002f2c": {
                    "2": "update_parameter_value",
                    "1": "set_data_value",
                    "3": "update_data_value",
                    "17": "update_data"
                },
                "param_1": {
                    "1": "input_param",
                    "7": "status",
                    "3": "value1",
                    "8": "param1"
                },
                "param_2": {
                    "4": "data_code",
                    "1": "key",
                    "5": "code",
                    "2": "value",
                    "3": "value2"
                },
                "param_3": {
                    "13": "new_value",
                    "4": "param3",
                    "1": "new_data_value",
                    "7": "value",
                    "2": "value3"
                },
                "uVar1": {
                    "3": "temp_value"
                },
                "0xd0": {
                    "1": "constant_value"
                },
                "0xf4": {
                    "1": "special_constant_value1"
                },
                "0xf5": {
                    "1": "special_constant_value2"
                },
                "0xe0": {
                    "1": "special_constant_value3"
                },
                "0x90": {
                    "1": "special_constant_value4"
                },
                "0xc0": {
                    "1": "special_constant_value5"
                }
            }
        },
        "FUN_08002f84": {
            "entrypoint": "0x08002f84",
            "current_name": "update_data_08002f84",
            "code": "\nvoid update_data_08002f84(undefined4 status,int value,undefined4 new_value)\n\n{\n  if (value == 0xff) {\n    DAT_200005e8 = new_value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f84": "update_data_08002f84",
                "param_2": "value",
                "param_3": "new_value",
                "param_1": "status"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002f84": {
                    "1": "store_param3_if_param2_is_255",
                    "2": "update_param_if_max",
                    "17": "update_data"
                },
                "param_2": {
                    "3": "comparison_value",
                    "2": "status",
                    "1": "value_to_compare",
                    "10": "value"
                },
                "param_3": {
                    "3": "value_to_store",
                    "9": "new_value",
                    "1": "value_to_update",
                    "2": "param3",
                    "7": "new_data"
                },
                "param_1": {
                    "1": "data_address",
                    "3": "unused",
                    "2": "param1",
                    "5": "status"
                },
                "DAT_200005e8": {
                    "1": "saved_value"
                }
            }
        },
        "FUN_08002f94": {
            "entrypoint": "0x08002f94",
            "current_name": "initialize_data_08002f94",
            "code": "\nvoid initialize_data_08002f94(undefined4 value_1,undefined4 value_2,undefined4 data_value)\n\n{\n  DAT_200005d0 = data_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f94": "initialize_data_08002f94",
                "param_1": "value_1",
                "param_2": "value_2",
                "param_3": "data_value"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002f94": {
                    "3": "set_param_3",
                    "1": "save_param_3",
                    "2": "set_data",
                    "4": "initialize_data"
                },
                "param_1": {
                    "2": "data_address",
                    "1": "input1",
                    "4": "unused_param_1",
                    "3": "param1"
                },
                "param_2": {
                    "4": "value_2",
                    "3": "param2",
                    "2": "input_2",
                    "1": "parameter_2"
                },
                "param_3": {
                    "1": "value_3",
                    "2": "data_param",
                    "4": "data_value"
                },
                "DAT_200005d0": {
                    "1": "value"
                },
                "param_4": {
                    "1": "value_4"
                }
            }
        },
        "FUN_08002fa0": {
            "entrypoint": "0x08002fa0",
            "current_name": "get_value_from_offset_08002fa0",
            "code": "\nundefined get_value_from_offset_08002fa0(int offset,int base_address)\n\n{\n  return *(undefined *)(base_address + offset + 0xcc);\n}\n\n",
            "renaming": {
                "FUN_08002fa0": "get_value_from_offset_08002fa0",
                "param_1": "offset",
                "param_2": "base_address"
            },
            "calling": [
                "FUN_080022f8",
                "FUN_08001cd0",
                "FUN_0800021a",
                "FUN_080005f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002fa0": {
                    "1": "get_byte_at_offset",
                    "3": "get_value_at_offset",
                    "7": "get_value_from_offset",
                    "2": "extract_byte_from_offset"
                },
                "param_1": {
                    "29": "offset",
                    "2": "index"
                },
                "param_2": {
                    "1": "pointer",
                    "29": "base_address"
                }
            }
        },
        "FUN_08002fa8": {
            "entrypoint": "0x08002fa8",
            "current_name": "update_character_08002fa8",
            "code": "\nvoid update_character_08002fa8(int base_address,int offset,undefined new_value)\n\n{\n  if (*(char *)(base_address + offset + 0xcc) != '\\x7f') {\n    *(undefined *)(base_address + offset + 0xcc) = new_value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fa8": "update_character_08002fa8",
                "param_1": "base_address",
                "param_2": "offset",
                "param_3": "new_value"
            },
            "calling": [
                "FUN_080005f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002fa8": {
                    "2": "update_char_at_offset",
                    "1": "update_memory_byte",
                    "3": "update_value_if_not_equal",
                    "14": "update_character"
                },
                "param_1": {
                    "3": "character_address",
                    "1": "base_pointer",
                    "24": "base_address"
                },
                "param_2": {
                    "30": "offset",
                    "1": "index"
                },
                "param_3": {
                    "1": "new_byte",
                    "23": "new_value",
                    "6": "new_character"
                },
                "param_1 + param_2 + 0xcc": {
                    "1": "address_to_check"
                },
                "*(char *)(param_1 + param_2 + 0xcc)": {
                    "1": "character_value"
                },
                "*(undefined *)(param_1 + param_2 + 0xcc)": {
                    "1": "character_to_update"
                },
                "0xcc": {
                    "1": "character_field_offset"
                }
            }
        },
        "FUN_08002fba": {
            "entrypoint": "0x08002fba",
            "current_name": "get_value_from_offset_08002fba",
            "code": "\narray_value get_value_from_offset_08002fba(int base_address,int index)\n\n{\n  return *(array_value *)(base_address + (index + 0x42) * 4);\n}\n\n",
            "renaming": {
                "FUN_08002fba": "get_value_from_offset_08002fba",
                "param_1": "base_address",
                "param_2": "index",
                "undefined4": "array_value"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002fba": {
                    "3": "get_element_from_offset",
                    "1": "get_reversed_value",
                    "8": "get_value_from_offset",
                    "2": "get_value_from_array"
                },
                "param_1": {
                    "1": "array_base_address",
                    "2": "array_start",
                    "17": "base_address",
                    "3": "array_address"
                },
                "param_2": {
                    "4": "offset_index",
                    "2": "index_offset",
                    "1": "multiplier",
                    "10": "offset",
                    "13": "index"
                },
                "0x42": {
                    "2": "offset",
                    "1": "multiplier"
                },
                "* (undefined4 *)": {
                    "1": "dereference_as_uint32_ptr"
                },
                "param_1 + (param_2 + 0x42) * 4": {
                    "2": "address",
                    "1": "address_to_query"
                },
                "*PTR_<variable_name>": {
                    "1": "<new_variable_name>"
                },
                "*(undefined4 *)(param_1 + (param_2 + 0x42) * 4)": {
                    "1": "array_element",
                    "3": "value"
                },
                "4": {
                    "1": "element_size"
                },
                "param_n": {
                    "1": "unused_param"
                },
                "undefined4": {
                    "1": "array_value"
                },
                "param_3": {
                    "1": "element_size"
                },
                "param_4": {
                    "1": "offset"
                },
                "PTR_": {
                    "1": ""
                },
                "DAT_": {
                    "1": ""
                },
                "param_1 + param_2 * 4": {
                    "1": "element_offset"
                },
                "*(undefined4 *)(arrayBase + (index + 0x42) * 4)": {
                    "1": "element_value"
                },
                "* (undefined4 *)(param_1 + (param_2 + 0x42) * 4)": {
                    "1": "get_value_at_offset"
                }
            }
        },
        "FUN_08002fc2": {
            "entrypoint": "0x08002fc2",
            "current_name": "store_value_at_offset_08002fc2",
            "code": "\nvoid store_value_at_offset_08002fc2(int base_address,int index,data_type value)\n\n{\n  *(data_type *)(base_address + (index + 0x42) * 4) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fc2": "store_value_at_offset_08002fc2",
                "param_1": "base_address",
                "param_2": "index",
                "param_3": "value",
                "undefined4": "data_type"
            },
            "calling": [
                "FUN_0800021a",
                "FUN_080005f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002fc2": {
                    "5": "store_value_in_array",
                    "1": "set_element_at_index",
                    "4": "write_to_memory",
                    "2": "set_param_value",
                    "6": "store_value_at_offset"
                },
                "param_1": {
                    "1": "base_pointer",
                    "2": "array_address",
                    "13": "base_address",
                    "4": "array_base_address"
                },
                "param_2": {
                    "13": "offset",
                    "18": "index"
                },
                "param_3": {
                    "1": "data",
                    "27": "value",
                    "2": "value_to_store"
                },
                "param_4": {
                    "1": "length"
                },
                "undefined4": {
                    "1": "data_type"
                },
                "param_1 + (param_2 + 0x42) * 4": {
                    "1": "address_to_store"
                }
            }
        },
        "FUN_08002fca": {
            "entrypoint": "0x08002fca",
            "current_name": "blink_led_08002fca",
            "code": "\nvoid blink_led_08002fca(undefined4 pin_number,undefined4 led_pin,int num_blinks,undefined4 on_time,\n                 undefined4 off_time)\n\n{\n  uint blink_count;\n  \n  for (blink_count = 0; (int)blink_count < num_blinks; blink_count = blink_count + 1 & 0xff) {\n    wait_for_delay(off_time);\n    set_pin_state(led_pin,1);\n    wait_for_delay(on_time);\n    set_pin_state(led_pin,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fca": "blink_led_08002fca",
                "param_1": "pin_number",
                "param_2": "led_pin",
                "param_3": "num_blinks",
                "param_4": "on_time",
                "param_5": "off_time",
                "uVar1": "blink_count",
                "delay": "wait_for_delay",
                "digitalWrite": "set_pin_state"
            },
            "calling": [
                "FUN_08003002"
            ],
            "called": [
                "FUN_08008ac4",
                "FUN_08008a24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002fca": {
                    "27": "blink_led",
                    "2": "blink_le_ds",
                    "1": "toggle_led"
                },
                "param_1": {
                    "5": "pin_led",
                    "1": "pin",
                    "14": "pin_number",
                    "2": "pin1",
                    "3": "pin_mode"
                },
                "param_2": {
                    "2": "pin_state",
                    "1": "pin_param",
                    "3": "le_dpin",
                    "12": "led_pin"
                },
                "param_3": {
                    "6": "num_times",
                    "1": "blink_count_param",
                    "2": "blink_count",
                    "20": "num_blinks"
                },
                "param_4": {
                    "3": "delay1",
                    "7": "on_time",
                    "1": "delay_on_param",
                    "6": "on_delay",
                    "5": "delay_time1"
                },
                "param_5": {
                    "6": "off_delay",
                    "7": "off_time",
                    "1": "led_delay",
                    "5": "delay_time2",
                    "3": "delay2"
                },
                "uVar1": {
                    "2": "counter",
                    "1": "blink_iteration",
                    "3": "i",
                    "16": "blink_count"
                },
                "delay": {
                    "1": "wait_for_delay"
                },
                "digitalWrite": {
                    "1": "set_pin_state"
                }
            }
        },
        "FUN_08003002": {
            "entrypoint": "0x08003002",
            "current_name": "initialize_led_08003002",
            "code": "\nvoid initialize_led_08003002(int pin_number)\n\n{\n  if (*(pin_state *)(pin_number + 0x1f8) != '\\0') {\n    return;\n  }\n  set_pin_mode(0xd,1);\n  blink_led(pin_number,0xd,2,0x28,0xd2);\n  wait(0xfa);\n  blink_led(pin_number,0xd,5,0x28,0xd2);\n  wait(0x7d);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003002": "initialize_led_08003002",
                "param_1": "pin_number",
                "pinMode": "set_pin_mode",
                "strobeBlinkPin": "blink_led",
                "delay": "wait",
                "char": "pin_state"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "FUN_08002fca",
                "FUN_08008ac4",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003002": {
                    "2": "strobe_blink_sequence",
                    "1": "initialize_le_ds",
                    "4": "initialize_blinking",
                    "12": "initialize_led",
                    "3": "initialize_and_blink_led"
                },
                "param_1": {
                    "2": "address",
                    "4": "led_pin",
                    "7": "pin_number",
                    "1": "blink_parameter",
                    "3": "device_id",
                    "5": "pin"
                },
                "pinMode": {
                    "1": "set_output_mode",
                    "28": "set_pin_mode"
                },
                "strobeBlinkPin": {
                    "13": "blink_led",
                    "1": "strobe_blink_led",
                    "5": "blink_pin_with_strobe"
                },
                "delay": {
                    "2": "pause_execution",
                    "5": "wait_for",
                    "3": "custom_delay",
                    "1": "delay",
                    "8": "wait",
                    "4": "delay_milliseconds"
                },
                "0x1f8": {
                    "2": "led_status",
                    "1": "status_flag"
                },
                "0xd": {
                    "7": "led_pin",
                    "1": "le_dpin"
                },
                "0x28": {
                    "1": "strobe_delay1",
                    "2": "blink_count1"
                },
                "0xd2": {
                    "1": "strobe_delay2",
                    "2": "blink_count2"
                },
                "0xfa": {
                    "3": "short_delay",
                    "2": "delay1",
                    "1": "pause_time1"
                },
                "0x7d": {
                    "3": "long_delay",
                    "1": "delay_medium",
                    "2": "delay2"
                },
                "char": {
                    "1": "pin_state"
                },
                "FUN_08002fca": {
                    "2": "initialize_pin",
                    "1": "initialize_strobe"
                },
                "FUNC_08008ac4": {
                    "1": "perform_system_check"
                },
                "FUN_08008990": {
                    "1": "delay_milliseconds"
                },
                "param_2": {
                    "1": "pin2"
                },
                "param_3": {
                    "1": "param3"
                },
                "param_4": {
                    "1": "param4"
                },
                "2": {
                    "1": "blink_count1"
                },
                "5": {
                    "1": "blink_count2"
                }
            }
        },
        "FUN_08003048": {
            "entrypoint": "0x08003048",
            "current_name": "initialize_device_08003048",
            "code": "\nvoid initialize_device_08003048(undefined4 device_address,undefined4 firmware_version,undefined4 pin_number,undefined4 serial_port)\n\n{\n  initialize_led(&DAT_20000700,firmware_version,6,serial_port,serial_port);\n  blink_firmware_version(device_address);\n  update_device_info(device_address,&DAT_20000700);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003048": "initialize_device_08003048",
                "param_1": "device_address",
                "param_2": "firmware_version",
                "param_3": "pin_number",
                "param_4": "serial_port",
                "begin": "initialize_led",
                "blinkVersion": "blink_firmware_version",
                "update_device_info_08002e26": "update_device_info"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08002e26",
                "FUN_08003002",
                "FUN_08008c44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003048": {
                    "2": "initialize_system",
                    "1": "initialize_and_update_device_info",
                    "3": "initialize_and_update_device",
                    "25": "initialize_device"
                },
                "param_1": {
                    "31": "device_address"
                },
                "param_2": {
                    "30": "firmware_version",
                    "1": "pin_number"
                },
                "param_3": {
                    "1": "firmware_version",
                    "24": "pin_number",
                    "2": "serial_port"
                },
                "param_4": {
                    "1": "serial_config",
                    "3": "serial_configuration",
                    "20": "serial_port"
                },
                "begin": {
                    "15": "initialize_led",
                    "1": "initialize_serial"
                },
                "blinkVersion": {
                    "4": "blink_firmware_version",
                    "2": "check_firmware_version",
                    "1": "initialize_led",
                    "3": "get_firmware_version"
                },
                "update_device_info_08002e26": {
                    "23": "update_device_info"
                },
                "initialize_serial_08008c44": {
                    "24": "initialize_serial"
                },
                "configuration": {
                    "1": "serial_data_config"
                },
                "initialize_led_08003002": {
                    "11": "initialize_led"
                },
                "firmware_version": {
                    "1": "configuration"
                },
                "baud_rate": {
                    "1": "baud_rate"
                }
            }
        },
        "FUN_0800307a": {
            "entrypoint": "0x0800307a",
            "current_name": "decode_data_0800307a",
            "code": "\nvoid decode_data_0800307a(undefined4 *function_pointer,uint input_length,byte *input_data,uint max_output_length)\n\n{\n  uint current_byte;\n  uint bit_offset;\n  uint output_length;\n  uint byte_index;\n  \n  current_byte = (uint)*input_data;\n  if (max_output_length == 0) {\n    max_output_length = 0xffffffff;\n  }\n  byte_index = 0;\n  bit_offset = 0;\n  output_length = 0;\n  while ((byte_index < input_length && (output_length < max_output_length))) {\n    (***(code ***)(undefined4 *)*function_pointer)\n              ((undefined4 *)*function_pointer,((uint)input_data[byte_index] << (bit_offset & 0xff) | current_byte) & 0x7f);\n    current_byte = (int)(uint)input_data[byte_index] >> (7 - bit_offset & 0xff) & 0xff;\n    bit_offset = bit_offset + 1;\n    while ((output_length = output_length + 1, 6 < bit_offset && (output_length < max_output_length))) {\n      (***(code ***)(undefined4 *)*function_pointer)((undefined4 *)*function_pointer,current_byte & 0x7f);\n      current_byte = current_byte >> 7;\n      bit_offset = bit_offset - 7;\n    }\n    byte_index = byte_index + 1;\n  }\n  if ((bit_offset != 0) && (output_length < max_output_length)) {\n    (***(code ***)(undefined4 *)*function_pointer)((undefined4 *)*function_pointer,(1 << (bit_offset & 0xff)) - 1U & current_byte)\n    ;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800307a": "decode_data_0800307a",
                "param_1": "function_pointer",
                "param_2": "input_length",
                "param_3": "input_data",
                "param_4": "max_output_length",
                "uVar1": "current_byte",
                "uVar2": "bit_offset",
                "uVar3": "output_length",
                "uVar4": "byte_index"
            },
            "calling": [
                "FUN_08003106",
                "FUN_0800319e",
                "FUN_080031ce",
                "FUN_0800325a",
                "FUN_08003158"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800307a": {
                    "1": "decode_bits",
                    "20": "decode_data",
                    "3": "decode"
                },
                "param_1": {
                    "4": "function_pointers",
                    "1": "func_pointer",
                    "9": "function_pointer",
                    "2": "data_pointer",
                    "3": "function_ptr",
                    "5": "output_buffer"
                },
                "param_2": {
                    "2": "data_size",
                    "1": "num_input_bytes",
                    "9": "input_length",
                    "6": "input_size",
                    "7": "data_length"
                },
                "param_3": {
                    "3": "data",
                    "1": "input_bytes",
                    "4": "encoded_data",
                    "16": "input_data"
                },
                "param_4": {
                    "1": "output_limit",
                    "2": "max_output_bytes",
                    "3": "max_output_size",
                    "5": "output_length",
                    "7": "max_output_length",
                    "6": "max_iterations"
                },
                "uVar1": {
                    "1": "first_byte",
                    "26": "current_byte"
                },
                "uVar2": {
                    "3": "bit_counter",
                    "1": "bits_used",
                    "17": "bit_offset",
                    "5": "bit_position",
                    "2": "bit_count"
                },
                "uVar3": {
                    "1": "iteration_counter",
                    "3": "output_position",
                    "4": "iteration_count",
                    "5": "output_length"
                },
                "uVar4": {
                    "1": "data_offset",
                    "2": "input_counter",
                    "5": "current_index",
                    "7": "byte_index",
                    "3": "input_position"
                }
            }
        },
        "FUN_08003106": {
            "entrypoint": "0x08003106",
            "current_name": "process_data_08003106",
            "code": "\nvoid process_data_08003106(undefined4 *function_pointer,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  undefined4 *function_pointer;\n  \n  function_pointer = (undefined4 *)*function_pointer;\n  if (function_pointer != (undefined4 *)0x0) {\n    (**(code **)*function_pointer)(function_pointer,0xf0);\n    (***(code ***)(undefined4 *)*function_pointer)((undefined4 *)*function_pointer,0x6f);\n    (***(code ***)(undefined4 *)*function_pointer)((undefined4 *)*function_pointer,value1);\n    encode_data(function_pointer,value2,value3,value2);\n    (***(code ***)(undefined4 *)*function_pointer)((undefined4 *)*function_pointer,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003106": "process_data_08003106",
                "param_1": "function_pointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "puVar1": "function_pointer",
                "encodeByteStream": "encode_data"
            },
            "calling": [
                "FUN_08003158"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003106": {
                    "1": "perform_operation",
                    "6": "process_data",
                    "2": "encode_and_send_data",
                    "4": "execute_encoded_function",
                    "5": "decode_and_encode"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "data_pointer",
                    "12": "function_pointer",
                    "7": "data_ptr"
                },
                "param_2": {
                    "1": "param_2",
                    "5": "param2",
                    "3": "value_1",
                    "2": "param_value1",
                    "10": "value1"
                },
                "param_3": {
                    "1": "constant2",
                    "4": "param3",
                    "2": "param_3",
                    "3": "value_2",
                    "10": "value2"
                },
                "param_4": {
                    "4": "param4",
                    "1": "param",
                    "10": "value3",
                    "2": "param_value3",
                    "3": "value_3"
                },
                "puVar1": {
                    "1": "pointer_func",
                    "6": "function_pointer",
                    "2": "sub_func_ptr",
                    "5": "function_ptr",
                    "3": "function_pointer_value"
                },
                "FUN_0800307a": {
                    "9": "encode_byte_stream"
                },
                "byteStream": {
                    "1": "encoded_data"
                },
                "encodeByteStream": {
                    "1": "encode_data"
                }
            }
        },
        "FUN_0800314e": {
            "entrypoint": "0x0800314e",
            "current_name": "initialize_param_0800314e",
            "code": "\nvoid initialize_param_0800314e(undefined4 *output_param)\n\n{\n  *output_param = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800314e": "initialize_param_0800314e",
                "param_1": "output_param"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800314e": {
                    "3": "initialize_variable",
                    "2": "initialize_pointer",
                    "1": "clear_parameter",
                    "4": "initialize_value",
                    "8": "initialize_param",
                    "5": "initialize_parameter"
                },
                "param_1": {
                    "1": "value_pointer",
                    "3": "param",
                    "8": "output_param",
                    "2": "result_pointer"
                },
                "*param_1": {
                    "1": "output_value"
                }
            }
        },
        "FUN_08003154": {
            "entrypoint": "0x08003154",
            "current_name": "copy_value_to_pointer_08003154",
            "code": "\nvoid copy_value_to_pointer_08003154(undefined4 *destination,undefined4 value)\n\n{\n  *destination = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003154": "copy_value_to_pointer_08003154",
                "param_1": "destination",
                "param_2": "value"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003154": {
                    "1": "set_param_1_to_param_2",
                    "2": "set_value",
                    "3": "assign_parameter_value",
                    "5": "copy_value",
                    "4": "assign_value_to_pointer",
                    "7": "copy_value_to_pointer",
                    "6": "assign_value"
                },
                "param_1": {
                    "19": "destination",
                    "1": "result_pointer",
                    "2": "destination_pointer"
                },
                "param_2": {
                    "2": "value_to_assign",
                    "1": "input_param",
                    "12": "value",
                    "8": "source"
                }
            }
        },
        "FUN_08003158": {
            "entrypoint": "0x08003158",
            "current_name": "process_data_08003158",
            "code": "\nvoid process_data_08003158(undefined4 *data_ptr,uint value,ushort value)\n\n{\n  undefined4 *function_ptr;\n  ushort encoded_value;\n  \n  function_ptr = (undefined4 *)*data_ptr;\n  if (function_ptr != (undefined4 *)0x0) {\n    encoded_value = value;\n    if (((int)value < 0x10) && (value < 0x4000)) {\n      (**(code **)*function_ptr)(function_ptr,value | 0xe0);\n      encodeByteStream(data_ptr,2,&encoded_value);\n    }\n    else {\n      sendExtendedAnalog(data_ptr,value,2,&encoded_value);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003158": "process_data_08003158",
                "param_1": "data_ptr",
                "param_2": "value",
                "param_3": "value",
                "puVar1": "function_ptr",
                "local_a": "encoded_value"
            },
            "calling": [
                "FUN_08002ef2"
            ],
            "called": [
                "FUN_08003106",
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003158": {
                    "1": "send_command",
                    "19": "process_data",
                    "7": "send_data",
                    "2": "process_input_data"
                },
                "param_1": {
                    "5": "data",
                    "1": "command_ptr",
                    "12": "data_ptr",
                    "8": "data_pointer",
                    "2": "input_pointer"
                },
                "param_2": {
                    "3": "length",
                    "1": "flag_value",
                    "2": "input_value",
                    "10": "value"
                },
                "param_3": {
                    "1": "input_code",
                    "3": "value2",
                    "2": "input_value",
                    "8": "value",
                    "5": "length"
                },
                "puVar1": {
                    "8": "function_pointer",
                    "2": "func_ptr",
                    "1": "callback_ptr",
                    "11": "function_ptr"
                },
                "local_a": {
                    "1": "modified_value",
                    "2": "input_value",
                    "4": "stream_data",
                    "9": "encoded_data",
                    "10": "encoded_value"
                },
                "FUN_08003106": {
                    "1": "process_analog_data"
                },
                "FUN_0800307a": {
                    "1": "encode_byte_stream"
                }
            }
        },
        "FUN_0800319e": {
            "entrypoint": "0x0800319e",
            "current_name": "execute_and_encode_0800319e",
            "code": "\nvoid execute_and_encode_0800319e(undefined4 *function_pointer,uint flags,undefined2 data)\n\n{\n  undefined4 *function_ptr;\n  undefined2 encoded_data;\n  \n  function_ptr = (undefined4 *)*function_pointer;\n  if (function_ptr != (undefined4 *)0x0) {\n    encoded_data = data;\n    (**(code **)*function_ptr)(function_ptr,flags & 0xf | 0x90);\n    encodeByteStream(function_pointer,2,&encoded_data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800319e": "execute_and_encode_0800319e",
                "param_1": "function_pointer",
                "param_2": "flags",
                "param_3": "data",
                "local_a": "encoded_data",
                "puVar1": "function_ptr"
            },
            "calling": [
                "FUN_08002efe"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800319e": {
                    "1": "reverse_and_encode",
                    "8": "execute_encoded_function",
                    "2": "execute_function_and_encode",
                    "10": "execute_and_encode"
                },
                "param_1": {
                    "21": "function_pointer",
                    "1": "ptr_to_function_list",
                    "2": "data_pointer"
                },
                "param_2": {
                    "5": "input_value",
                    "1": "stream_size",
                    "14": "flags",
                    "2": "length"
                },
                "param_3": {
                    "14": "data",
                    "1": "byte_value",
                    "5": "input_data"
                },
                "local_a": {
                    "1": "decoded_data",
                    "17": "encoded_data",
                    "7": "encoded_value"
                },
                "puVar1": {
                    "1": "function_to_call",
                    "5": "function_pointer",
                    "2": "next_function_pointer",
                    "3": "ptr_to_function",
                    "6": "function_ptr"
                },
                "FUN_0800307a": {
                    "1": "encode_byte_stream"
                }
            }
        },
        "FUN_080031ce": {
            "entrypoint": "0x080031ce",
            "current_name": "process_data_080031ce",
            "code": "\nvoid process_data_080031ce(undefined4 *data_ptr,undefined4 param2,undefined4 param3,uint param4,int offset\n                 )\n\n{\n  undefined4 *function_pointer;\n  uint index;\n  \n  function_pointer = (undefined4 *)*data_ptr;\n  if (function_pointer != (undefined4 *)0x0) {\n    (**(code **)*function_pointer)(function_pointer,0xf0,param3,*(code **)*function_pointer,param4);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,0x79);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,param2);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,param3);\n    for (index = 0; index < param4; index = index + 1) {\n      encodeByteStream(data_ptr,1,offset + index,0);\n    }\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080031ce": "process_data_080031ce",
                "param_1": "data_ptr",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "offset",
                "puVar1": "function_pointer",
                "uVar2": "index"
            },
            "calling": [
                "FUN_08002df6"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080031ce": {
                    "1": "decode_and_encode_stream",
                    "7": "decode_and_encode_byte_stream",
                    "2": "decode_and_encode_bytes",
                    "4": "decode_and_encode",
                    "6": "decode_and_encode_data"
                },
                "param_1": {
                    "2": "stream",
                    "1": "stream_ptr",
                    "3": "input_data",
                    "6": "data_ptr",
                    "4": "data_pointer"
                },
                "param_2": {
                    "20": "param2",
                    "1": "second_param",
                    "2": "value1",
                    "3": "param_2"
                },
                "param_3": {
                    "1": "third_param",
                    "20": "param3",
                    "2": "value2",
                    "3": "param_3"
                },
                "param_4": {
                    "2": "length",
                    "4": "array_length",
                    "7": "param4",
                    "1": "stream_length",
                    "3": "size"
                },
                "param_5": {
                    "3": "start_position",
                    "1": "param_5",
                    "11": "offset",
                    "9": "param5"
                },
                "puVar1": {
                    "1": "stream_ptr",
                    "9": "function_pointer",
                    "5": "func_ptr",
                    "2": "pointer_to_function",
                    "6": "function_ptr"
                },
                "uVar2": {
                    "2": "loop_counter",
                    "3": "i",
                    "1": "byte_index",
                    "4": "counter",
                    "17": "index"
                }
            }
        },
        "FUN_0800322c": {
            "entrypoint": "0x0800322c",
            "current_name": "execute_function_0800322c",
            "code": "\nvoid execute_function_0800322c(undefined4 *function_ptr,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 *function_ptr;\n  \n  function_ptr = (undefined4 *)*function_ptr;\n  if (function_ptr != (undefined4 *)0x0) {\n    (**(code **)*function_ptr)(function_ptr,0xf9);\n    (***(code ***)(undefined4 *)*function_ptr)((undefined4 *)*function_ptr,param2);\n    (***(code ***)(undefined4 *)*function_ptr)((undefined4 *)*function_ptr,param3);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800322c": "execute_function_0800322c",
                "param_1": "function_ptr",
                "param_2": "param2",
                "param_3": "param3",
                "puVar1": "function_ptr"
            },
            "calling": [
                "FUN_08002ddc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800322c": {
                    "1": "execute_three_functions",
                    "17": "execute_function",
                    "2": "execute_function_with_params",
                    "3": "execute_operations"
                },
                "param_1": {
                    "4": "function_pointers",
                    "1": "command_list",
                    "7": "function_pointer",
                    "2": "function_ptr_list",
                    "11": "function_ptr"
                },
                "param_2": {
                    "8": "param2",
                    "1": "parameter_1",
                    "3": "param_value_1",
                    "4": "parameter_2",
                    "5": "param_2"
                },
                "param_3": {
                    "4": "parameter_3",
                    "3": "parameter3",
                    "8": "param3",
                    "1": "arg2",
                    "5": "param_3"
                },
                "puVar1": {
                    "3": "function_ptr_value",
                    "1": "pointed_function",
                    "5": "function_ptr",
                    "2": "function_ptr_address"
                },
                "*param_1": {
                    "1": "function_ptr_list_value"
                },
                "(code **)*puVar1": {
                    "1": "function_ptr"
                },
                "(***(code ***)(undefined4 *)*param_1)": {
                    "1": "execute_function"
                },
                "0x0": {
                    "1": "null"
                },
                "0xf9": {
                    "1": "some_value"
                }
            }
        },
        "FUN_0800325a": {
            "entrypoint": "0x0800325a",
            "current_name": "decode_and_encode_byte_stream_0800325a",
            "code": "\nvoid decode_and_encode_byte_stream_0800325a(undefined4 *data_pointer,undefined4 value,uint length,int offset)\n\n{\n  undefined4 *function_pointer;\n  uint index;\n  \n  function_pointer = (undefined4 *)*data_pointer;\n  if (function_pointer != (undefined4 *)0x0) {\n    (**(code **)*function_pointer)(function_pointer,0xf0);\n    (***(code ***)(undefined4 *)*data_pointer)((undefined4 *)*data_pointer,value);\n    for (index = 0; index < length; index = index + 1) {\n      encodeByteStream(data_pointer,1,offset + index,0);\n    }\n    (***(code ***)(undefined4 *)*data_pointer)((undefined4 *)*data_pointer,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800325a": "decode_and_encode_byte_stream_0800325a",
                "param_1": "data_pointer",
                "param_2": "value",
                "param_3": "length",
                "param_4": "offset",
                "puVar1": "function_pointer",
                "uVar2": "index"
            },
            "calling": [
                "FUN_080032a2",
                "FUN_08002f0a"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800325a": {
                    "1": "decode_and_process_data",
                    "7": "process_data",
                    "2": "decode_and_encode",
                    "4": "decode_and_encode_data",
                    "11": "decode_and_encode_byte_stream"
                },
                "param_1": {
                    "1": "input_pointer",
                    "3": "stream",
                    "2": "stream_pointer",
                    "5": "data_ptr",
                    "6": "data_pointer"
                },
                "param_2": {
                    "1": "constant_value",
                    "2": "param",
                    "5": "param2",
                    "8": "value",
                    "3": "param_2"
                },
                "param_3": {
                    "3": "stream_size",
                    "1": "stream_length",
                    "6": "byte_count",
                    "10": "length"
                },
                "param_4": {
                    "1": "base_param",
                    "2": "param_4",
                    "19": "offset"
                },
                "puVar1": {
                    "1": "pointer_value",
                    "8": "function_pointer",
                    "4": "func_ptr",
                    "7": "function_ptr",
                    "3": "stream_ptr"
                },
                "uVar2": {
                    "1": "stream_index",
                    "6": "i",
                    "4": "counter",
                    "17": "index"
                },
                "F_0800325a": {
                    "1": "decode_and_encode_byte_stream"
                }
            }
        },
        "FUN_080032a2": {
            "entrypoint": "0x080032a2",
            "current_name": "send_sysex_data_080032a2",
            "code": "\nvoid send_sysex_data_080032a2(undefined4 device,undefined4 message,undefined4 length,undefined4 extra_data)\n\n{\n  undefined4 message_length;\n  \n  message_length = strlen(message);\n  sendSysex(device,0x71,message_length,message,extra_data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080032a2": "send_sysex_data_080032a2",
                "param_1": "device",
                "param_2": "message",
                "param_4": "extra_data",
                "uVar1": "message_length",
                "param_3": "length"
            },
            "calling": [
                "FUN_08002f14"
            ],
            "called": [
                "FUN_08000178",
                "FUN_0800325a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080032a2": {
                    "1": "send_sysex_with_length",
                    "13": "send_sysex_data",
                    "3": "send_sysex_command",
                    "12": "send_sysex_message"
                },
                "param_1": {
                    "4": "device_address",
                    "14": "device",
                    "8": "device_handle",
                    "5": "device_id"
                },
                "param_2": {
                    "3": "data",
                    "2": "command",
                    "1": "sysex_data",
                    "23": "message"
                },
                "param_4": {
                    "1": "param",
                    "4": "callback",
                    "5": "extra_data",
                    "3": "timeout",
                    "2": "callback_function"
                },
                "uVar1": {
                    "1": "command_length",
                    "16": "message_length"
                },
                "param_3": {
                    "1": "param_3",
                    "3": "length",
                    "2": "message_length"
                }
            }
        },
        "FUN_080032bc": {
            "entrypoint": "0x080032bc",
            "current_name": "initialize_parameters_080032bc",
            "code": "\nvoid initialize_parameters_080032bc(int data_structure,int param_value,undefined4 param_data)\n\n{\n  *(int *)(data_structure + 4) = param_value;\n  *(undefined4 *)(data_structure + 8) = param_data;\n  *(undefined *)(data_structure + 0xc) = 0;\n  *(undefined *)(data_structure + 0xd) = 0;\n  *(undefined4 *)(data_structure + 0x10) = 0;\n  *(undefined *)(data_structure + 0x14) = 0;\n  *(undefined4 *)(data_structure + 0x18) = 0;\n  *(undefined4 *)(data_structure + 0x1c) = 0;\n  *(undefined4 *)(data_structure + 0x20) = 0;\n  *(undefined4 *)(data_structure + 0x24) = 0;\n  *(undefined4 *)(data_structure + 0x28) = 0;\n  *(undefined4 *)(data_structure + 0x2c) = 0;\n  *(undefined4 *)(data_structure + 0x30) = 0;\n  *(undefined4 *)(data_structure + 0x34) = 0;\n  *(undefined4 *)(data_structure + 0x38) = 0;\n  *(undefined4 *)(data_structure + 0x3c) = 0;\n  *(undefined4 *)(data_structure + 0x40) = 0;\n  *(undefined4 *)(data_structure + 0x44) = 0;\n  *(undefined4 *)(data_structure + 0x48) = 0;\n  *(undefined4 *)(data_structure + 0x4c) = 0;\n  *(undefined4 *)(data_structure + 0x50) = 0;\n  *(undefined4 *)(data_structure + 0x54) = 0;\n  *(undefined4 *)(data_structure + 0x58) = 0;\n  *(undefined4 *)(data_structure + 0x5c) = 0;\n  *(undefined4 *)(data_structure + 0x60) = 0;\n  *(undefined4 *)(data_structure + 100) = 0;\n  *(undefined4 *)(data_structure + 0x68) = 0;\n  *(undefined4 *)(data_structure + 0x6c) = 0;\n  *(undefined4 *)(data_structure + 0x70) = 0;\n  *(undefined4 *)(data_structure + 0x74) = 0;\n  *(undefined4 *)(data_structure + 0x78) = 0;\n  *(bool *)data_structure = param_value == 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080032bc": "initialize_parameters_080032bc",
                "param_1": "data_structure",
                "param_2": "param_value",
                "param_3": "param_data"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080032bc": {
                    "6": "initialize_data",
                    "5": "initialize_data_structure",
                    "9": "initialize_parameters",
                    "1": "initialize_param_struct",
                    "2": "initialize_function"
                },
                "param_1": {
                    "1": "param_struct",
                    "2": "param_base_address",
                    "3": "data_address",
                    "5": "data_structure"
                },
                "param_2": {
                    "14": "param_value",
                    "1": "function_parameter2",
                    "12": "value",
                    "2": "parameter_value"
                },
                "param_3": {
                    "1": "value_type",
                    "3": "param_3",
                    "2": "param3",
                    "4": "param_data"
                },
                "0x4": {
                    "1": "offset1"
                },
                "0x8": {
                    "1": "offset2"
                },
                "0xc": {
                    "1": "flag1"
                },
                "0xd": {
                    "1": "flag2"
                },
                "0x10": {
                    "1": "flag3"
                },
                "0x14": {
                    "1": "offset4"
                },
                "0x18": {
                    "1": "flag5"
                },
                "0x1c": {
                    "1": "flag6"
                },
                "0x20": {
                    "1": "offset7"
                },
                "0x24": {
                    "1": "flag8"
                },
                "0x28": {
                    "1": "flag9"
                },
                "0x2c": {
                    "1": "offset10"
                },
                "0x30": {
                    "1": "offset11"
                },
                "0x34": {
                    "1": "offset12"
                },
                "0x38": {
                    "1": "flag13"
                },
                "0x3c": {
                    "1": "offset14"
                },
                "0x40": {
                    "1": "offset15"
                },
                "0x44": {
                    "1": "flag16"
                },
                "0x48": {
                    "1": "flag17"
                },
                "0x4c": {
                    "1": "flag18"
                },
                "0x50": {
                    "1": "offset19"
                },
                "0x54": {
                    "1": "flag20"
                },
                "0x58": {
                    "1": "offset21"
                },
                "0x5c": {
                    "1": "flag22"
                },
                "0x60": {
                    "1": "offset23"
                },
                "0x64": {
                    "1": "offset3"
                },
                "0x68": {
                    "1": "flag24"
                },
                "0x6c": {
                    "1": "offset26"
                },
                "0x70": {
                    "1": "offset27"
                },
                "0x74": {
                    "1": "flag27"
                },
                "0x78": {
                    "1": "offset29"
                },
                "param_1 + 4": {
                    "1": "structure_address.field1"
                },
                "param_1 + 8": {
                    "1": "param3_address"
                },
                "param_1 + 0xc": {
                    "1": "structure_address.field3"
                },
                "param_1 + 0xd": {
                    "1": "initial_value2_address"
                },
                "param_1 + 0x10": {
                    "1": "structure_address.field5"
                },
                "param_1 + 0x14": {
                    "1": "param_struct.field4"
                },
                "param_1 + 0x18": {
                    "1": "param_1_offset_18"
                },
                "param_1 + 0x1c": {
                    "1": "initial_value6_address"
                },
                "param_1 + 0x20": {
                    "1": "initial_value7_address"
                },
                "param_1 + 0x24": {
                    "1": "variable8"
                },
                "param_1 + 0x28": {
                    "1": "param_struct.field9"
                },
                "param_1 + 0x2c": {
                    "1": "variable10"
                },
                "param_1 + 0x30": {
                    "1": "variable11"
                },
                "param_1 + 0x34": {
                    "1": "initial_value12_address"
                },
                "param_1 + 0x38": {
                    "1": "param_struct.field13"
                },
                "param_1 + 0x3c": {
                    "1": "structure_address.field16"
                },
                "param_1 + 0x40": {
                    "1": "variable15"
                },
                "param_1 + 0x44": {
                    "1": "param_1_offset_44"
                },
                "param_1 + 0x48": {
                    "1": "variable17"
                },
                "param_1 + 0x4c": {
                    "1": "variable18"
                },
                "param_1 + 0x50": {
                    "1": "structure_address.field21"
                },
                "param_1 + 0x54": {
                    "1": "initial_value20_address"
                },
                "param_1 + 0x58": {
                    "1": "param_struct.field21"
                },
                "param_1 + 0x5c": {
                    "1": "variable22"
                },
                "param_1 + 0x60": {
                    "1": "variable23"
                },
                "param_1 + 100": {
                    "1": "initial_value24_address"
                },
                "param_1 + 0x68": {
                    "1": "variable25"
                },
                "param_1 + 0x6c": {
                    "1": "variable26"
                },
                "param_1 + 0x70": {
                    "1": "initial_value27_address"
                },
                "param_1 + 0x74": {
                    "1": "structure_address.field30"
                },
                "param_1 + 0x78": {
                    "1": "param_1_offset_78"
                },
                "(bool)param_1": {
                    "1": "structure_address.is_value_zero"
                },
                "*(int *)(param_1 + 4)": {
                    "1": "data_ptr[1]"
                },
                "*(undefined4 *)(param_1 + 8)": {
                    "1": "set_buffer_data"
                },
                "*(undefined *)(param_1 + 0xc)": {
                    "1": "data_structure.variable1"
                },
                "*(undefined *)(param_1 + 0xd)": {
                    "1": "variable2"
                },
                "*(bool *)param_1": {
                    "2": "is_value_zero",
                    "1": "param_base[param2_zero]",
                    "3": "is_param_zero"
                },
                "*(undefined4 *)(param_1 + 0x10)": {
                    "1": "param_struct.field3"
                },
                "*(undefined4 *)(param_1 + 0x14)": {
                    "1": "data_structure->field4"
                },
                "*(undefined4 *)(param_1 + 0x18)": {
                    "1": "data_structure->field5"
                },
                "*(undefined4 *)(param_1 + 0x1c)": {
                    "1": "param_base[param28]"
                },
                "*(undefined4 *)(param_1 + 0x20)": {
                    "1": "data_structure->field7"
                },
                "*(undefined4 *)(param_1 + 0x24)": {
                    "1": "ptr8"
                },
                "*(undefined4 *)(param_1 + 0x28)": {
                    "1": "variable9_value"
                },
                "*(undefined4 *)(param_1 + 0x2c)": {
                    "1": "variable10"
                },
                "*(undefined4 *)(param_1 + 0x30)": {
                    "1": "variable11"
                },
                "*(undefined4 *)(param_1 + 0x34)": {
                    "1": "variable12_value"
                },
                "*(undefined4 *)(param_1 + 0x38)": {
                    "1": "ptr13"
                },
                "*(undefined4 *)(param_1 + 0x3c)": {
                    "1": "param_base[param60]"
                },
                "*(undefined4 *)(param_1 + 0x40)": {
                    "1": "variable15"
                },
                "*(undefined4 *)(param_1 + 0x44)": {
                    "1": "variable16_value"
                },
                "*(undefined4 *)(param_1 + 0x48)": {
                    "1": "data_structure->field17"
                },
                "*(undefined4 *)(param_1 + 0x4c)": {
                    "1": "param_base[param76]"
                },
                "*(undefined4 *)(param_1 + 0x50)": {
                    "1": "p_unknown19"
                },
                "*(undefined4 *)(param_1 + 0x54)": {
                    "1": "variable20"
                },
                "*(undefined4 *)(param_1 + 0x58)": {
                    "1": "param_struct.field21"
                },
                "*(undefined4 *)(param_1 + 0x5c)": {
                    "1": "variable22"
                },
                "*(undefined4 *)(param_1 + 0x60)": {
                    "1": "param_base[param96]"
                },
                "*(undefined4 *)(param_1 + 100)": {
                    "1": "p_unknown24"
                },
                "*(undefined4 *)(param_1 + 0x68)": {
                    "1": "variable25_value"
                },
                "*(undefined4 *)(param_1 + 0x6c)": {
                    "1": "variable26_value"
                },
                "*(undefined4 *)(param_1 + 0x70)": {
                    "1": "ptr27"
                },
                "*(undefined4 *)(param_1 + 0x74)": {
                    "1": "ptr28"
                },
                "*(undefined4 *)(param_1 + 0x78)": {
                    "1": "variable29_value"
                },
                "*(undefined *)(param_1 + 0x14)": {
                    "1": "param_struct.field4"
                },
                "*(int *)(pBuffer + 4)": {
                    "1": "p_buffer->value"
                },
                "*(undefined4 *)(pBuffer + 8)": {
                    "1": "p_buffer->data"
                },
                "*(undefined *)(pBuffer + 0xc)": {
                    "1": "p_buffer->unknown1"
                },
                "*(undefined *)(pBuffer + 0xd)": {
                    "1": "p_buffer->unknown2"
                },
                "*(undefined4 *)(pBuffer + 0x10)": {
                    "1": "p_buffer->unknown3"
                },
                "*(undefined *)(pBuffer + 0x14)": {
                    "1": "p_buffer->unknown4"
                },
                "*(undefined4 *)(pBuffer + 0x18)": {
                    "1": "p_buffer->unknown5"
                },
                "*(undefined4 *)(pBuffer + 0x1c)": {
                    "1": "p_buffer->unknown6"
                },
                "*(undefined4 *)(pBuffer + 0x20)": {
                    "1": "p_buffer->unknown7"
                },
                "*(undefined4 *)(pBuffer + 0x24)": {
                    "1": "p_buffer->unknown8"
                },
                "*(undefined4 *)(pBuffer + 0x28)": {
                    "1": "p_buffer->unknown9"
                },
                "*(undefined4 *)(pBuffer + 0x2c)": {
                    "1": "p_buffer->unknown10"
                },
                "*(undefined4 *)(pBuffer + 0x30)": {
                    "1": "p_buffer->unknown11"
                },
                "*(undefined4 *)(pBuffer + 0x34)": {
                    "1": "p_buffer->unknown12"
                },
                "*(undefined4 *)(pBuffer + 0x38)": {
                    "1": "p_buffer->unknown13"
                },
                "*(undefined4 *)(pBuffer + 0x3c)": {
                    "1": "p_buffer->unknown14"
                },
                "*(undefined4 *)(pBuffer + 0x40)": {
                    "1": "p_buffer->unknown15"
                },
                "*(undefined4 *)(pBuffer + 0x44)": {
                    "1": "p_buffer->unknown16"
                },
                "*(undefined4 *)(pBuffer + 0x48)": {
                    "1": "p_buffer->unknown17"
                },
                "*(undefined4 *)(pBuffer + 0x4c)": {
                    "1": "p_buffer->unknown18"
                },
                "*(undefined4 *)(pBuffer + 0x50)": {
                    "1": "p_buffer->unknown19"
                },
                "*(undefined4 *)(pBuffer + 0x54)": {
                    "1": "p_buffer->unknown20"
                },
                "*(undefined4 *)(pBuffer + 0x58)": {
                    "1": "p_buffer->unknown21"
                },
                "*(undefined4 *)(pBuffer + 0x5c)": {
                    "1": "p_buffer->unknown22"
                },
                "*(undefined4 *)(pBuffer + 0x60)": {
                    "1": "p_buffer->unknown23"
                },
                "*(undefined4 *)(pBuffer + 0x68)": {
                    "1": "p_buffer->unknown24"
                },
                "*(undefined4 *)(pBuffer + 0x6c)": {
                    "1": "p_buffer->unknown25"
                },
                "*(undefined4 *)(pBuffer + 0x70)": {
                    "1": "p_buffer->unknown26"
                },
                "*(undefined4 *)(pBuffer + 0x74)": {
                    "1": "p_buffer->unknown27"
                },
                "*(undefined4 *)(pBuffer + 0x78)": {
                    "1": "p_buffer->unknown28"
                },
                "*(bool *)pBuffer": {
                    "1": "p_buffer->is_value_zero"
                },
                "param_1 == 0": {
                    "1": "is_param2_zero"
                },
                "100": {
                    "1": "offset24"
                },
                "paramBaseAddress": {
                    "1": "base_addr"
                },
                "value": {
                    "1": "param_value"
                },
                "initialValue": {
                    "1": "init_value"
                },
                "0": {
                    "1": "zero"
                }
            }
        },
        "FUN_08003306": {
            "entrypoint": "0x08003306",
            "current_name": "update_parameters_08003306",
            "code": "\nvoid update_parameters_08003306(int base_address,uint value,undefined4 new_value1,undefined4 new_value2)\n\n{\n  if (value == 0xd0) {\n    *(undefined4 *)(base_address + 0x58) = new_value1;\n    *(undefined4 *)(base_address + 0x28) = new_value2;\n    return;\n  }\n  if (0xd0 < value) {\n    if (value == 0xf4) {\n      *(undefined4 *)(base_address + 0x5c) = new_value1;\n      *(undefined4 *)(base_address + 0x2c) = new_value2;\n      return;\n    }\n    if (value == 0xf5) {\n      *(undefined4 *)(base_address + 0x60) = new_value1;\n      *(undefined4 *)(base_address + 0x30) = new_value2;\n    }\n    else if (value == 0xe0) {\n      *(undefined4 *)(base_address + 0x4c) = new_value1;\n      *(undefined4 *)(base_address + 0x1c) = new_value2;\n      return;\n    }\n    return;\n  }\n  if (value == 0x90) {\n    *(undefined4 *)(base_address + 0x50) = new_value1;\n    *(undefined4 *)(base_address + 0x20) = new_value2;\n    return;\n  }\n  if (value == 0xc0) {\n    *(undefined4 *)(base_address + 0x54) = new_value1;\n    *(undefined4 *)(base_address + 0x24) = new_value2;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003306": "update_parameters_08003306",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "new_value1",
                "param_4": "new_value2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003306": {
                    "1": "update_memory_components",
                    "4": "update_data",
                    "2": "update_param_values",
                    "6": "update_parameters"
                },
                "param_1": {
                    "2": "data_address",
                    "1": "param_addr",
                    "16": "base_address"
                },
                "param_2": {
                    "5": "param_value",
                    "2": "register_value",
                    "1": "parameter_value",
                    "12": "value"
                },
                "param_3": {
                    "4": "data1",
                    "1": "new_parameter1",
                    "12": "new_value1",
                    "8": "value1"
                },
                "param_4": {
                    "4": "data2",
                    "1": "new_data2",
                    "12": "new_value2",
                    "8": "value2"
                },
                "param_5": {
                    "1": "new_data3"
                },
                "param_6": {
                    "1": "data4"
                },
                "param_7": {
                    "1": "data5"
                },
                "0xd0": {
                    "1": "constant_1"
                },
                "0xf4": {
                    "1": "constant_2"
                },
                "0xf5": {
                    "1": "constant_3"
                },
                "0xe0": {
                    "1": "constant_4"
                },
                "0x90": {
                    "1": "constant_5"
                },
                "0xc0": {
                    "1": "constant_6"
                }
            }
        },
        "FUN_08003346": {
            "entrypoint": "0x08003346",
            "current_name": "update_data_08003346",
            "code": "\nvoid update_data_08003346(int object_address,int value,undefined4 new_value1,undefined4 new_value2)\n\n{\n  if (value == 0x79) {\n    *(undefined4 *)(object_address + 0x70) = new_value1;\n    *(undefined4 *)(object_address + 0x34) = new_value2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003346": "update_data_08003346",
                "param_1": "object_address",
                "param_2": "value",
                "param_3": "new_value1",
                "param_4": "new_value2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003346": {
                    "2": "update_values",
                    "1": "set_params_if_equal",
                    "4": "update_params",
                    "7": "update_data"
                },
                "param_1": {
                    "1": "input_pointer",
                    "10": "object_address",
                    "8": "base_address",
                    "3": "data_address"
                },
                "param_2": {
                    "1": "value_to_compare",
                    "2": "input_value",
                    "4": "check_value",
                    "14": "value",
                    "6": "condition"
                },
                "param_3": {
                    "1": "new_param1_value",
                    "21": "new_value1",
                    "2": "new_param1",
                    "3": "value1"
                },
                "param_4": {
                    "21": "new_value2",
                    "1": "value_to_assign_to_offset0x34",
                    "2": "new_param2",
                    "3": "value2"
                },
                "param_5": {
                    "1": "value3"
                },
                "param_6": {
                    "1": "value4"
                },
                "param_1 + 0x70": {
                    "1": "address_to_update1"
                },
                "param_1 + 0x34": {
                    "1": "address_to_update2"
                }
            }
        },
        "FUN_08003350": {
            "entrypoint": "0x08003350",
            "current_name": "update_params_08003350",
            "code": "\nvoid update_params_08003350(int base_address,int value,undefined4 new_value1,undefined4 new_value2)\n\n{\n  if (value == 0xf9) {\n    *(undefined4 *)(base_address + 0x74) = new_value1;\n    *(undefined4 *)(base_address + 0x38) = new_value2;\n    return;\n  }\n  if (value != 0xff) {\n    return;\n  }\n  *(undefined4 *)(base_address + 0x78) = new_value1;\n  *(undefined4 *)(base_address + 0x48) = new_value2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003350": "update_params_08003350",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "new_value1",
                "param_4": "new_value2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003350": {
                    "1": "update_parameter_values",
                    "10": "update_params",
                    "9": "update_parameters",
                    "2": "update_values",
                    "3": "update_data"
                },
                "param_1": {
                    "1": "obj_ptr",
                    "5": "obj_address",
                    "4": "object_address",
                    "2": "context",
                    "6": "base_address"
                },
                "param_2": {
                    "4": "condition",
                    "5": "param_value",
                    "1": "param_code",
                    "17": "value"
                },
                "param_3": {
                    "2": "new_value_a",
                    "13": "new_value1",
                    "1": "data_value1",
                    "7": "new_param1",
                    "4": "value1"
                },
                "param_4": {
                    "13": "new_value2",
                    "1": "data_value2",
                    "2": "new_data2",
                    "7": "new_param2",
                    "4": "value2"
                },
                "0xf9": {
                    "1": "flag_a"
                },
                "0xff": {
                    "1": "flag_b"
                },
                "param_1 + 0x74": {
                    "1": "context.update_value1"
                },
                "param_1 + 0x38": {
                    "1": "context.update_value2"
                },
                "param_1 + 0x78": {
                    "1": "context.update_value3"
                },
                "param_1 + 0x48": {
                    "1": "context.update_value4"
                }
            }
        },
        "FUN_08003366": {
            "entrypoint": "0x08003366",
            "current_name": "update_parameters_08003366",
            "code": "\nvoid update_parameters_08003366(int base_address,int value,undefined4 new_value1,undefined4 new_value2)\n\n{\n  if (value == 0x71) {\n    *(undefined4 *)(base_address + 0x68) = new_value1;\n    *(undefined4 *)(base_address + 0x40) = new_value2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003366": "update_parameters_08003366",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "new_value1",
                "param_4": "new_value2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003366": {
                    "1": "copy_data_to_memory",
                    "5": "update_params",
                    "8": "update_data",
                    "10": "update_parameters"
                },
                "param_1": {
                    "1": "destination_address",
                    "10": "object_address",
                    "11": "base_address",
                    "2": "data_pointer",
                    "4": "data_address"
                },
                "param_2": {
                    "2": "flag",
                    "1": "source_value",
                    "5": "value_to_check",
                    "17": "value",
                    "4": "condition"
                },
                "param_3": {
                    "1": "new_data",
                    "20": "new_value1",
                    "2": "value1"
                },
                "param_4": {
                    "1": "new_param4",
                    "21": "new_value2",
                    "2": "value2"
                },
                "*(undefined4 *)(param_1 + 0x68)": {
                    "1": "updated_parameter1"
                },
                "*(undefined4 *)(param_1 + 0x40)": {
                    "1": "updated_parameter2"
                },
                "param_5": {
                    "1": "new_value3"
                },
                "param_6": {
                    "1": "new_value4"
                }
            }
        },
        "FUN_08003370": {
            "entrypoint": "0x08003370",
            "current_name": "set_parameters_08003370",
            "code": "\nvoid set_parameters_08003370(int object_address,undefined4 unused,undefined4 value1,undefined4 value2)\n\n{\n  *(undefined4 *)(object_address + 0x6c) = value1;\n  *(undefined4 *)(object_address + 0x44) = value2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003370": "set_parameters_08003370",
                "param_1": "object_address",
                "param_3": "value1",
                "param_4": "value2",
                "param_2": "unused"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003370": {
                    "6": "set_params",
                    "12": "set_parameters",
                    "3": "update_params",
                    "2": "set_param_values",
                    "5": "update_parameters",
                    "1": "save_params"
                },
                "param_1": {
                    "3": "obj_address",
                    "12": "object_address",
                    "2": "object_ptr",
                    "5": "object_pointer",
                    "8": "base_address",
                    "1": "object"
                },
                "param_3": {
                    "5": "new_value1",
                    "3": "parameter1",
                    "1": "parameter_a",
                    "2": "param_value1",
                    "13": "value1"
                },
                "param_4": {
                    "2": "param4_value",
                    "1": "parameter_value2",
                    "5": "new_value2",
                    "3": "parameter2",
                    "13": "value2"
                },
                "param_2": {
                    "1": "unused_param1",
                    "9": "unused",
                    "2": "unused_parameter",
                    "6": "unused_param"
                }
            }
        },
        "FUN_08003376": {
            "entrypoint": "0x08003376",
            "current_name": "update_data_08003376",
            "code": "\nvoid update_data_08003376(undefined *data,undefined value,uint index)\n\n{\n  bool is_index_valid;\n  \n  if (index < *(uint *)(data + 8)) {\n    is_index_valid = false;\n  }\n  else {\n    is_index_valid = true;\n    if (*(function_pointer **)(data + 100) != (function_pointer *)0x0) {\n      *data = 1;\n      (**(function_pointer **)(data + 100))(*(undefined4 *)(data + 0x3c));\n      if (index < *(uint *)(data + 8)) {\n        is_index_valid = false;\n      }\n      else {\n        is_index_valid = true;\n      }\n    }\n  }\n  if (!is_index_valid) {\n    *(undefined *)(*(int *)(data + 4) + index) = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003376": "update_data_08003376",
                "param_1": "data",
                "param_2": "value",
                "param_3": "index",
                "bVar1": "is_index_valid",
                "code": "function_pointer"
            },
            "calling": [
                "FUN_080033cc",
                "FUN_08003474"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003376": {
                    "2": "copy_data_to_buffer",
                    "1": "write_byte_if_valid",
                    "3": "copy_data",
                    "12": "update_data"
                },
                "param_1": {
                    "12": "data",
                    "2": "data_struct_ptr",
                    "1": "data_container",
                    "6": "data_struct"
                },
                "param_2": {
                    "2": "new_data",
                    "9": "new_value",
                    "1": "byte_to_write",
                    "16": "value"
                },
                "param_3": {
                    "1": "data_index",
                    "2": "offset",
                    "26": "index"
                },
                "bVar1": {
                    "1": "is_data_copied",
                    "4": "is_valid_index",
                    "2": "is_updated",
                    "3": "is_greater",
                    "5": "is_index_valid"
                },
                "*param_1": {
                    "1": "result"
                },
                "*(uint *)(param_1 + 8)": {
                    "1": "limit",
                    "3": "data_size"
                },
                "(code **)(param_1 + 100)": {
                    "1": "callback_function"
                },
                "*(code **)(param_1 + 100)": {
                    "3": "callback",
                    "1": "function_to_call"
                },
                "*(undefined4 *)(param_1 + 0x3c)": {
                    "1": "callback_argument",
                    "2": "param"
                },
                "*(int *)(param_1 + 4)": {
                    "1": "array"
                },
                "*(undefined *)(array + index)": {
                    "1": "element"
                },
                "code": {
                    "1": "function",
                    "3": "function_pointer"
                },
                "*(uint *)(param_1 + 4)": {
                    "1": "buffer_start"
                },
                "*(code *)0x0": {
                    "1": "null_func"
                },
                "(code *)(*(code **)(param_1 + 100))": {
                    "1": "callback"
                },
                "**(code **)(param_1 + 100)": {
                    "1": "execute_callback"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "DAT_": {
                    "1": "dat_"
                }
            }
        },
        "FUN_080033a8": {
            "entrypoint": "0x080033a8",
            "current_name": "copy_and_shift_bits_080033a8",
            "code": "\nvoid copy_and_shift_bits_080033a8(undefined4 source,uint length,int destination)\n\n{\n  byte current_byte;\n  int dest_index;\n  uint src_index;\n  \n  dest_index = 0;\n  for (src_index = 0; src_index < length; src_index = src_index + 2) {\n    current_byte = *(byte *)(destination + src_index);\n    *(byte *)(destination + dest_index) = current_byte;\n    *(byte *)(destination + dest_index) = *(char *)(destination + src_index + 1) << 7 | current_byte;\n    dest_index = dest_index + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033a8": "copy_and_shift_bits_080033a8",
                "param_1": "source",
                "param_2": "length",
                "param_3": "destination",
                "bVar1": "current_byte",
                "iVar2": "dest_index",
                "uVar3": "src_index"
            },
            "calling": [
                "FUN_080033cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080033a8": {
                    "3": "copy_and_shift",
                    "1": "copy_and_shift_values",
                    "5": "copy_and_shift_bytes",
                    "22": "copy_and_shift_bits"
                },
                "param_1": {
                    "2": "dest",
                    "1": "result",
                    "4": "source",
                    "3": "src"
                },
                "param_2": {
                    "3": "byte_count",
                    "1": "source_offset",
                    "10": "length"
                },
                "param_3": {
                    "2": "src",
                    "1": "source_address",
                    "5": "destination",
                    "3": "dest"
                },
                "bVar1": {
                    "1": "byte_val",
                    "26": "current_byte",
                    "2": "byte_value"
                },
                "iVar2": {
                    "10": "dest_index",
                    "1": "current_index",
                    "3": "dst_index",
                    "2": "output_index"
                },
                "uVar3": {
                    "1": "current_index",
                    "2": "current_offset",
                    "10": "src_index"
                }
            }
        },
        "FUN_080033cc": {
            "entrypoint": "0x080033cc",
            "current_name": "process_data_080033cc",
            "code": "\nvoid process_data_080033cc(int data,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  char first_char;\n  int decoded_length;\n  char *char_pointer;\n  \n  char_pointer = *(char **)(data + 4);\n  first_char = *char_pointer;\n  if (first_char == 'q') {\n    if (*(int *)(data + 0x68) != 0) {\n      decoded_length = decode(data,*(int *)(data + 0x18) + -1,char_pointer + 1,char_pointer,arg3);\n      store_data_at_position(data,0,decoded_length + 1);\n      (**(function_pointer **)(data + 0x68))(*(undefined4 *)(data + 0x40),*(int *)(data + 4) + 1);\n      return;\n    }\n  }\n  else if (first_char == 'y') {\n    if (*(function_pointer **)(data + 0x70) != (function_pointer *)0x0) {\n      if (*(uint *)(data + 0x18) < 3) {\n        (**(function_pointer **)(data + 0x70))(*(undefined4 *)(data + 0x34),0,0);\n        return;\n      }\n      decoded_length = decode(data,*(uint *)(data + 0x18) - 3,char_pointer + 3,char_pointer,arg3);\n      store_data_at_position(data,0,decoded_length + 3);\n      decoded_length = *(int *)(data + 4);\n      (**(function_pointer **)(data + 0x70))\n                (*(undefined4 *)(data + 0x34),*(undefined *)(decoded_length + 1),*(undefined *)(decoded_length + 2)\n                 ,decoded_length + 3);\n      return;\n    }\n  }\n  else if (*(function_pointer **)(data + 0x6c) != (function_pointer *)0x0) {\n    (**(function_pointer **)(data + 0x6c))\n              (*(undefined4 *)(data + 0x44),first_char,*(int *)(data + 0x18) + -1,char_pointer + 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033cc": "process_data_080033cc",
                "param_1": "data",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "cVar1": "first_char",
                "iVar2": "decoded_length",
                "pcVar3": "char_pointer",
                "decodeByteStream": "decode",
                "bufferDataAtPosition": "store_data_at_position",
                "code": "function_pointer"
            },
            "calling": [
                "FUN_08003474"
            ],
            "called": [
                "FUN_08003376",
                "FUN_080033a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080033cc": {
                    "5": "process_input",
                    "2": "decode_and_buffer_data",
                    "22": "process_data",
                    "1": "process_command"
                },
                "param_1": {
                    "1": "command_data",
                    "12": "data",
                    "4": "input_data",
                    "2": "context"
                },
                "param_2": {
                    "9": "arg1",
                    "1": "param",
                    "7": "param1",
                    "2": "arg2"
                },
                "param_3": {
                    "7": "param2",
                    "9": "arg2",
                    "1": "value2",
                    "2": "arg3"
                },
                "param_4": {
                    "9": "arg3",
                    "1": "value3",
                    "7": "param3",
                    "2": "arg4"
                },
                "cVar1": {
                    "27": "first_char",
                    "2": "first_character",
                    "1": "current_char"
                },
                "iVar2": {
                    "1": "decoded_data_length",
                    "2": "decoded_size",
                    "4": "stream_length",
                    "16": "decoded_length"
                },
                "pcVar3": {
                    "1": "text_pointer",
                    "5": "char_ptr",
                    "13": "char_pointer",
                    "2": "stream_ptr"
                },
                "decodeByteStream": {
                    "1": "decode_stream",
                    "2": "decode_data"
                },
                "bufferDataAtPosition": {
                    "2": "store_data_at_position",
                    "1": "store_data"
                },
                "(code *)(param_1 + 0x68)": {
                    "1": "function_ptr1"
                },
                "(code *)(param_1 + 0x70)": {
                    "1": "function_ptr2"
                },
                "(code *)(param_1 + 0x6c)": {
                    "1": "function_ptr3"
                },
                "code": {
                    "1": "callback_function"
                },
                "FUN_08003376": {
                    "1": "decode_byte_stream"
                },
                "FUN_080033a8": {
                    "1": "buffer_data_at_position"
                },
                "PTR_FUN_08003376": {
                    "1": "func_ptr1"
                },
                "PTR_FUN_080033a8": {
                    "1": "func_ptr2"
                }
            }
        },
        "FUN_0800344a": {
            "entrypoint": "0x0800344a",
            "current_name": "initialize_data_0800344a",
            "code": "\nvoid initialize_data_0800344a(int data_pointer)\n\n{\n  uint index;\n  \n  *(undefined4 *)(data_pointer + 0x10) = 0;\n  *(undefined *)(data_pointer + 0xc) = 0;\n  *(undefined *)(data_pointer + 0xd) = 0;\n  for (index = 0; index < *(uint *)(data_pointer + 8); index = index + 1) {\n    *(undefined *)(*(int *)(data_pointer + 4) + index) = 0;\n  }\n  *(undefined *)(data_pointer + 0x14) = 0;\n  *(undefined4 *)(data_pointer + 0x18) = 0;\n  if (*(code **)(data_pointer + 0x78) != (code *)0x0) {\n    (**(code **)(data_pointer + 0x78))(*(undefined4 *)(data_pointer + 0x48));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800344a": "initialize_data_0800344a",
                "param_1": "data_pointer",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08003474"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800344a": {
                    "1": "initialize_parameters",
                    "3": "initialize_data_structure",
                    "2": "initialize_data_structures",
                    "5": "initialize_memory",
                    "18": "initialize_data"
                },
                "param_1": {
                    "1": "memory_location",
                    "3": "data_struct",
                    "4": "data_address",
                    "6": "data_pointer",
                    "2": "param",
                    "5": "memory_address"
                },
                "uVar1": {
                    "1": "i",
                    "2": "iterator",
                    "27": "index"
                },
                "*(undefined4 *)(param_1 + 0x10)": {
                    "2": "data_size",
                    "1": "data_ptr->value"
                },
                "*(undefined *)(param_1 + 0xc)": {
                    "1": "initialized_flag",
                    "3": "flag1"
                },
                "*(undefined *)(param_1 + 0xd)": {
                    "1": "data_structure_field3",
                    "3": "flag2"
                },
                "*(uint *)(param_1 + 8)": {
                    "2": "array_size",
                    "1": "data_struct.length"
                },
                "*(undefined *)(*(int *)(param_1 + 4) + uVar1)": {
                    "2": "data",
                    "1": "data_struct.data[u_var1]"
                },
                "*(undefined *)(param_1 + 0x14)": {
                    "1": "byte3",
                    "3": "flag3"
                },
                "*(undefined4 *)(param_1 + 0x18)": {
                    "1": "data_structure_field5",
                    "3": "flag4"
                },
                "*(code **)(param_1 + 0x78)": {
                    "4": "function_pointer",
                    "1": "data_ptr->function_ptr",
                    "2": "function_ptr"
                },
                "(*(code **)(param_1 + 0x78))(*(undefined4 *)(param_1 + 0x48))": {
                    "1": "call_function"
                },
                "*(undefined4 *)(param_1 + 0x48)": {
                    "1": "data_structures.pointer_to_data"
                },
                "(code *)0x0": {
                    "1": "null_pointer"
                },
                "(**(code **)(param_1 + 0x78))(*(undefined4 *)(param_1 + 0x48))": {
                    "1": "execute_function(data_pointer)"
                },
                "_0x10": {
                    "1": "initialized_flag"
                },
                "_0xc": {
                    "1": "variable_c"
                },
                "_0xd": {
                    "1": "variable_d"
                },
                "_0x14": {
                    "1": "variable14"
                },
                "_0x18": {
                    "1": "variable18"
                },
                "param_1 + 0x10": {
                    "1": "data_ptr->value"
                },
                "param_1 + 0xc": {
                    "1": "data_ptr->flag1"
                },
                "param_1 + 0xd": {
                    "1": "data_structures.value2"
                },
                "*(int *)(param_1 + 4) + uVar1": {
                    "1": "data_structures.buffer[u_var1]"
                },
                "param_1 + 0x14": {
                    "1": "data_ptr->flag3"
                },
                "param_1 + 0x18": {
                    "1": "data_structures.result"
                },
                "*(int *)(param_1 + 4)": {
                    "1": "array_pointer"
                },
                "(**functionPointer)(*(undefined4 *)(param_1 + 0x48))": {
                    "1": "call_function"
                },
                "param_1 + 8": {
                    "1": "data_ptr->size"
                },
                "**(code **)(param_1 + 0x78))": {
                    "1": "callback_function"
                }
            }
        },
        "FUN_08003474": {
            "entrypoint": "0x08003474",
            "current_name": "process_midi_event_08003474",
            "code": "\nvoid process_midi_event_08003474(int event_data,uint event_type)\n\n{\n  byte status_byte;\n  \n  if (*(char *)(event_data + 0x14) != '\\0') {\n    if (event_type != 0xf7) {\n      store_data_at_position(event_data,event_type,*(undefined4 *)(event_data + 0x18));\n      *(int *)(event_data + 0x18) = *(int *)(event_data + 0x18) + 1;\n      return;\n    }\n    *(undefined *)(event_data + 0x14) = 0;\n    handle_sysex_message();\n    return;\n  }\n  if ((*(int *)(event_data + 0x10) == 0) || (0x7f < event_value)) {\n    if (event_value < 0xf0) {\n      *(byte *)(event_data + 0xd) = (byte)event_type & 0xf;\n      event_type = event_type & 0xf0;\n    }\n    if (event_type == 0xf0) {\n      *(undefined *)(event_data + 0x14) = 1;\n      *(undefined4 *)(event_data + 0x18) = 0;\n      return;\n    }\n    if (event_type < 0xf1) {\n      if (event_type != 0xc0) {\n        if (event_type < 0xc1) {\n          if (event_type != 0x90) {\n            return;\n          }\n        }\n        else {\n          if (event_type == 0xd0) goto LAB_0800359c;\n          if (event_type != 0xe0) {\n            return;\n          }\n        }\nLAB_08003586:\n        *(undefined4 *)(event_data + 0x10) = 2;\n        *(char *)(event_data + 0xc) = event_value_char;\n        return;\n      }\nLAB_0800359c:\n      *(undefined4 *)(event_data + 0x10) = 1;\n      *(char *)(event_data + 0xc) = event_value_char;\n      return;\n    }\n    if (event_type != 0xf9) {\n      if (0xf9 < event_type) {\n        if (event_type == 0xff) {\n          reset_system(event_data);\n          return;\n        }\n        return;\n      }\n      if (1 < event_type - 0xf4) {\n        return;\n      }\n      goto LAB_08003586;\n    }\n    if (*(code **)(event_data + 0x74) != (code *)0x0) {\n      (**(code **)(event_data + 0x74))(*(undefined4 *)(event_data + 0x38));\n    }\n  }\n  else {\n    *(int *)(event_data + 0x10) = *(int *)(event_data + 0x10) + -1;\n    store_data_at_position();\n    if ((*(int *)(event_data + 0x10) == 0) && (status_byte = *(byte *)(event_data + 0xc), status_byte != 0)) {\n      if (status_byte == 0xd0) {\n        if (*(code **)(event_data + 0x58) != (code *)0x0) {\n          (**(code **)(event_data + 0x58))\n                    (*(undefined4 *)(event_data + 0x28),*(undefined *)(event_data + 0xd),\n                     **(undefined **)(event_data + 4));\n        }\n      }\n      else if (status_byte < 0xd1) {\n        if (status_byte == 0x90) {\n          if (*(code **)(event_data + 0x50) != (code *)0x0) {\n            (**(code **)(event_data + 0x50))\n                      (*(undefined4 *)(event_data + 0x20),*(undefined *)(event_data + 0xd),\n                       (uint)(*(byte **)(event_data + 4))[1] + (uint)**(byte **)(event_data + 4) * 0x80);\n          }\n        }\n        else if ((status_byte == 0xc0) && (*(code **)(event_data + 0x54) != (code *)0x0)) {\n          (**(code **)(event_data + 0x54))\n                    (*(undefined4 *)(event_data + 0x24),*(undefined *)(event_data + 0xd),\n                     **(undefined **)(event_data + 4));\n        }\n      }\n      else if (status_byte == 0xf4) {\n        if (*(code **)(event_data + 0x5c) != (code *)0x0) {\n          (**(code **)(event_data + 0x5c))\n                    (*(undefined4 *)(event_data + 0x2c),(*(undefined **)(event_data + 4))[1],\n                     **(undefined **)(event_data + 4));\n        }\n      }\n      else if (status_byte == 0xf5) {\n        if (*(code **)(event_data + 0x60) != (code *)0x0) {\n          (**(code **)(event_data + 0x60))\n                    (*(undefined4 *)(event_data + 0x30),(*(undefined **)(event_data + 4))[1],\n                     **(undefined **)(event_data + 4));\n        }\n      }\n      else if ((status_byte == 0xe0) && (*(code **)(event_data + 0x4c) != (code *)0x0)) {\n        (**(code **)(event_data + 0x4c))\n                  (*(undefined4 *)(event_data + 0x1c),*(undefined *)(event_data + 0xd),\n                   (uint)(*(byte **)(event_data + 4))[1] + (uint)**(byte **)(event_data + 4) * 0x80);\n      }\n      *(undefined *)(event_data + 0xc) = 0;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003474": "process_midi_event_08003474",
                "param_1": "event_data",
                "param_2": "event_type",
                "bVar1": "status_byte",
                "bufferDataAtPosition": "store_data_at_position",
                "processSysexMessage": "handle_sysex_message",
                "systemReset": "reset_system",
                "(int)param_2": "event_value",
                "(char)param_2": "event_value_char",
                "bufferDataAtPosition()": "store_data_at_position()"
            },
            "calling": [
                "FUN_08002ed2"
            ],
            "called": [
                "FUN_0800344a",
                "FUN_080033cc",
                "FUN_08003376"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003474": {
                    "1": "handle_midi_event",
                    "25": "process_midi_event",
                    "5": "process_midi_message"
                },
                "param_1": {
                    "1": "message_data",
                    "22": "event_data",
                    "2": "midi_data"
                },
                "param_2": {
                    "1": "event_value",
                    "11": "event_type",
                    "2": "message",
                    "7": "event_code",
                    "3": "midi_byte"
                },
                "bVar1": {
                    "1": "sub_event_code",
                    "2": "byte_value",
                    "4": "status",
                    "7": "status_byte",
                    "3": "channel"
                },
                "bufferDataAtPosition": {
                    "1": "load_data_at_position",
                    "2": "buffer_data",
                    "3": "store_event_data"
                },
                "processSysexMessage": {
                    "1": "process_sysex_message",
                    "2": "process_sysex",
                    "10": "handle_sysex_message"
                },
                "systemReset": {
                    "1": "system_reset",
                    "5": "reset_system"
                },
                "param_1 + 0x14": {
                    "1": "event_struct.status_flag"
                },
                "param_1 + 0x18": {
                    "1": "note_number"
                },
                "param_1 + 0x10": {
                    "1": "nested_status"
                },
                "param_1 + 0xd": {
                    "1": "channel_byte"
                },
                "param_1 + 0xc": {
                    "1": "event_struct.channel"
                },
                "(param_1 + 0x74)": {
                    "1": "callback1"
                },
                "callback1": {
                    "1": "perform_action1"
                },
                "(param_1 + 0x38)": {
                    "1": "callback_param1"
                },
                "(param_1 + 0x58)": {
                    "1": "callback2"
                },
                "callback2": {
                    "1": "perform_action2"
                },
                "(param_1 + 0x28)": {
                    "1": "callback_param2"
                },
                "(param_1 + 0x50)": {
                    "1": "callback3"
                },
                "callback3": {
                    "1": "perform_action3"
                },
                "(param_1 + 0x20)": {
                    "1": "callback_param3"
                },
                "(param_1 + 0x54)": {
                    "1": "callback4"
                },
                "callback4": {
                    "1": "perform_action4"
                },
                "(param_1 + 0x24)": {
                    "1": "callback_param4"
                },
                "(param_1 + 0x5c)": {
                    "1": "callback5"
                },
                "callback5": {
                    "1": "perform_action5"
                },
                "(param_1 + 0x2c)": {
                    "1": "callback_param5"
                },
                "(param_1 + 0x60)": {
                    "1": "callback6"
                },
                "callback6": {
                    "1": "perform_action6"
                },
                "(param_1 + 0x30)": {
                    "1": "callback_param6"
                },
                "(param_1 + 0x4c)": {
                    "1": "callback7"
                },
                "callback7": {
                    "1": "perform_action7"
                },
                "(param_1 + 0x1c)": {
                    "1": "callback_param7"
                },
                "param_1 + 0x38": {
                    "1": "note_on_callback_data",
                    "2": "sysex_data"
                },
                "param_1 + 0x74": {
                    "1": "event_data[0x74]"
                },
                "param_1 + 0x58": {
                    "1": "event_struct.note_on_callback"
                },
                "param_1 + 0x50": {
                    "1": "note_off_callback"
                },
                "param_1 + 0x54": {
                    "1": "event_data[0x54]",
                    "2": "program_change_callback"
                },
                "param_1 + 0x5c": {
                    "1": "channel_pressure_callback"
                },
                "param_1 + 0x60": {
                    "1": "event_data[0x60]",
                    "2": "pitch_bend_callback"
                },
                "param_1 + 0x4c": {
                    "2": "control_change_callback",
                    "1": "event_struct.pitch_bend_change_callback"
                },
                "param_1 + 0xf0": {
                    "1": "note_off_status"
                },
                "param_1 + 0xc0": {
                    "1": "program_change_status"
                },
                "param_1 + 0xf9": {
                    "1": "midi_channel_after_touch_status"
                },
                "param_1 + 0xff": {
                    "1": "system_exclusive_status"
                },
                "param_1 + 0x28": {
                    "1": "note_off_callback_data"
                },
                "param_1 + 0x20": {
                    "1": "note_on_data1"
                },
                "param_1 + 0x24": {
                    "1": "program_change_data"
                },
                "param_1 + 0x2c": {
                    "1": "aftertouch_data1"
                },
                "param_1 + 0x30": {
                    "1": "pitch_bend_callback_data"
                },
                "param_1 + 0x1c": {
                    "1": "control_change_data1"
                },
                "DAT_0800a14d": {
                    "1": "buffer_data"
                },
                "DAT_0800a14f": {
                    "1": "buffer_data_size"
                },
                "DAT_0800a153": {
                    "1": "buffer_index"
                },
                "DAT_0800a12d": {
                    "1": "channel_max_value"
                },
                "FUN_0800344a": {
                    "1": "decrement_event_count",
                    "13": "buffer_data_at_position"
                },
                "FUN_080033cc": {
                    "1": "system_reset",
                    "3": "process_sysex_message",
                    "5": "process_note_on_event",
                    "2": "handle_note_on_event"
                },
                "FUN_08003376": {
                    "1": "handle_other_event",
                    "6": "system_reset"
                },
                "F_FUN_0800344a": {
                    "1": "buffer_data_at_position"
                },
                "F_FUN_080033cc": {
                    "1": "handle_note_on"
                },
                "F_FUN_08003376": {
                    "1": "handle_note_off"
                },
                "*(undefined4 *)(param_1 + 0x18)": {
                    "1": "count_value"
                },
                "*(int *)(param_1 + 0x10)": {
                    "1": "track_index"
                },
                "0x7f": {
                    "1": "max_value"
                },
                "(int)param_2": {
                    "1": "event_value"
                },
                "*(byte *)(param_1 + 0xd)": {
                    "1": "midi_channel"
                },
                "(byte)param_2 & 0xf": {
                    "1": "event_low_nibble"
                },
                "param_2 & 0xf0": {
                    "1": "event_high_nibble"
                },
                "param_2 == 0xf0": {
                    "1": "is_system_exclusive_message"
                },
                "*(undefined *)(param_1 + 0x14)": {
                    "1": "is_event_flag_set"
                },
                "*(undefined4 *)(param_1 + 0x10)": {
                    "1": "state"
                },
                "(char)param_2": {
                    "1": "(char)event"
                },
                "*(char *)(param_1 + 0xc)": {
                    "1": "event_data_char"
                },
                "param_2 < 0xf1": {
                    "1": "is_note_off_note_on_or_polyphonic_key_pressure"
                },
                "param_2 != 0xd0": {
                    "1": "is_note_off_or_polyphonic_key_pressure"
                },
                "param_2 != 0xe0": {
                    "1": "is_note_off_or_pitch_bend_change"
                },
                "param_2 < 0xc1": {
                    "1": "is_voice_message"
                },
                "param_2 != 0x90": {
                    "1": "is_control_change"
                },
                "param_2 == 0xf9": {
                    "1": "is_tuning_request"
                },
                "0xf9 < param_2": {
                    "1": "is_system_real_time_message"
                },
                "param_2 == 0xff": {
                    "1": "is_system_reset"
                },
                "*(code **)(param_1 + 0x74)": {
                    "1": "sysex_callback_function"
                },
                "(**(code **)(param_1 + 0x74))(*(undefined4 *)(param_1 + 0x38))": {
                    "1": "invoke_sysex_callback"
                },
                "*(int *)(param_1 + 0x10) = *(int *)(param_1 + 0x10) + -1": {
                    "1": "decrement_state"
                },
                "bufferDataAtPosition()": {
                    "1": "store_data_at_position()"
                },
                "*(byte *)(param_1 + 0xc)": {
                    "1": "event_data_char"
                },
                "**(byte **)(param_1 + 4)": {
                    "1": "event_data_pointer"
                },
                "**(byte **)(param_1 + 4) * 0x80": {
                    "1": "event_data_value"
                },
                "*(undefined4 *)(param_1 + 0x58)": {
                    "1": "note_off_callback_function"
                },
                "(**(code **)(param_1 + 0x58))( *(undefined4 *)(param_1 + 0x28),*(undefined *)(param_1 + 0xd),**(undefined **)(param_1 + 4) )": {
                    "1": "invoke_note_off_callback"
                },
                "*(undefined4 *)(param_1 + 0x50)": {
                    "1": "note_on_callback_function"
                },
                "(**(code **)(param_1 + 0x50))( *(undefined4 *)(param_1 + 0x20),*(undefined *)(param_1 + 0xd),(*(byte **)(param_1 + 4))[1] +(uint) **(byte **)(param_1 + 4) * 0x80)": {
                    "1": "invoke_note_on_callback"
                },
                "*(undefined4 *)(param_1 + 0x54)": {
                    "1": "polyphonic_key_pressure_callback_function"
                },
                "(**(code **)(param_1 + 0x54))( *(undefined4 *)(param_1 + 0x24),*(undefined *)(param_1 + 0xd),**(undefined **)(param_1 + 4))": {
                    "1": "invoke_polyphonic_key_pressure_callback"
                },
                "*(undefined4 *)(param_1 + 0x5c)": {
                    "1": "control_change_callback_function"
                },
                "(**(code **)(param_1 + 0x5c))( *(undefined4 *)(param_1 + 0x2c),(*(undefined **)(param_1 + 4))[1],**(undefined **)(param_1 + 4))": {
                    "1": "invoke_control_change_callback"
                },
                "*(undefined4 *)(param_1 + 0x60)": {
                    "1": "pitch_bend_change_callback_function"
                },
                "(**(code **)(param_1 + 0x60))( *(undefined4 *)(param_1 + 0x30),(*(undefined **)(param_1 + 4))[1],**(undefined **)(param_1 + 4))": {
                    "1": "invoke_pitch_bend_change_callback"
                },
                "*(undefined4 *)(param_1 + 0x4c)": {
                    "1": "note_on_or_pitch_bend_change_callback_function"
                },
                "(**(code **)(param_1 + 0x4c))( *(undefined4 *)(param_1 + 0x1c),*(undefined *)(param_1 + 0xd),(*(byte **)(param_1 + 4))[1] +(uint) **(byte **)(param_1 + 4) * 0x80)": {
                    "1": "invoke_note_on_or_pitch_bend_change_callback"
                },
                "*(undefined *)(param_1 + 0xc) = 0": {
                    "1": "reset_event_data_char"
                },
                "FUN_0800359c": {
                    "2": "handle_program_change"
                },
                "*(undefined4 *)(param_1 + 0x14)": {
                    "1": "is_running_status"
                },
                "0xf0": {
                    "1": "system_exclusive"
                },
                "0xf1": {
                    "1": "quarter_frame_message"
                },
                "0xc0": {
                    "1": "program_change"
                },
                "0x90": {
                    "1": "note_on"
                },
                "0xd1": {
                    "1": "undefined_status1"
                },
                "0xf4": {
                    "1": "undefined_status2"
                },
                "0xf5": {
                    "1": "undefined_status3"
                },
                "0xe0": {
                    "1": "pitch_bend"
                },
                "*(code **)(param_1 + 0x58)": {
                    "1": "callback2"
                },
                "*(code **)(param_1 + 0x50)": {
                    "1": "callback3"
                },
                "*(code **)(param_1 + 0x54)": {
                    "1": "callback4"
                },
                "*(code **)(param_1 + 0x5c)": {
                    "1": "callback5"
                },
                "*(code **)(param_1 + 0x60)": {
                    "1": "callback6"
                },
                "*(code **)(param_1 + 0x4c)": {
                    "1": "callback7"
                },
                "*(byte **)(param_1 + 4)": {
                    "1": "event_buffer"
                },
                "*(undefined4 *)(param_1 + 0x28)": {
                    "1": "param1"
                },
                "*(undefined4 *)(param_1 + 0x20)": {
                    "1": "param2"
                },
                "*(undefined4 *)(param_1 + 0x24)": {
                    "1": "param3"
                },
                "*(undefined4 *)(param_1 + 0x2c)": {
                    "1": "param4"
                },
                "*(undefined4 *)(param_1 + 0x30)": {
                    "1": "param5"
                },
                "param_2 & 0xf": {
                    "1": "note_value"
                },
                "param_2 == 0xc0": {
                    "1": "is_program_change"
                },
                "param_2 == 0x90": {
                    "1": "is_note_on_or_off"
                },
                "param_2 == 0xd0": {
                    "1": "is_aftertouch"
                },
                "param_2 == 0xe0": {
                    "1": "is_pitch_bend"
                },
                "param_2 < 0xf0": {
                    "1": "is_channel_voice"
                },
                "param_2 != 0xf9": {
                    "1": "is_realtime_message"
                },
                "code *(param_1 + 0x74)": {
                    "1": "sysex_callback"
                },
                "code *(param_1 + 0x58)": {
                    "1": "note_off_callback"
                },
                "code *(param_1 + 0x50)": {
                    "1": "note_on_callback"
                },
                "code *(param_1 + 0x54)": {
                    "1": "program_change_callback"
                },
                "code *(param_1 + 0x5c)": {
                    "1": "aftertouch_callback"
                },
                "*(undefined **)(param_1 + 4)": {
                    "1": "note_data"
                },
                "code *(param_1 + 0x60)": {
                    "1": "pitch_bend_callback"
                },
                "code *(param_1 + 0x4c)": {
                    "1": "control_change_callback"
                },
                "param_1 + 0xd0": {
                    "1": "event_data[0xd0]"
                }
            }
        },
        "FUN_080035b8": {
            "entrypoint": "0x080035b8",
            "current_name": "initialize_system_080035b8",
            "code": "\nvoid initialize_system_080035b8(void)\n\n{\n  int result;\n  uint hclk_freq;\n  undefined4 rcc_periph_clk_config [2];\n  undefined4 peripheral_clock_config;\n  undefined4 clock_source;\n  undefined4 sysclk_source;\n  undefined4 pll_config;\n  undefined4 apb2_prescaler;\n  undefined4 apb2_divider;\n  undefined4 oscillator_config [4];\n  undefined4 clock_config;\n  undefined4 clock_config;\n  undefined4 peripheral_clock_config;\n  undefined4 hclk_freq;\n  undefined4 i2c_speed;\n  \n  config_option = 2;\n  clock_config = 1;\n  clock_config = 0x10;\n  peripheral_clock_config = 2;\n  hclk_freq = 0;\n  i2c_speed = 0x380000;\n  result = configure_oscillator(oscillator_config);\n  if (result != 0) {\n    handle_error(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                   ,0x88);\n  }\n  clock_source = 0xf;\n  sysclk_source = 2;\n  pll_config = 0;\n  apb2_prescaler = 0x400;\n  apb2_divider = 0;\n  result = configure_clock(&clock_source);\n  if (result != 0) {\n    handle_error(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                   ,0x95);\n  }\n  uart_clock = 2;\n  peripheral_clock_config = 0x8000;\n  result = configure_periph_clock(rcc_periph_clk_config);\n  if (result != 0) {\n    handle_error(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                   ,0x9c);\n  }\n  hclk_freq = get_hclk_frequency();\n  configure_sys_tick(hclk_freq / 1000);\n  configure_sys_tick_clock_source(4);\n  set_priority(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035b8": "initialize_system_080035b8",
                "local_30": "oscillator_config",
                "local_20": "clock_config",
                "local_1c": "clock_config",
                "local_14": "peripheral_clock_config",
                "local_44": "clock_source",
                "local_40": "sysclk_source",
                "local_3c": "pll_config",
                "local_38": "apb2_prescaler",
                "local_54": "rcc_periph_clk_config",
                "local_4c": "peripheral_clock_config",
                "iVar1": "result",
                "uVar2": "hclk_freq",
                "local_c": "i2c_speed",
                "local_34": "apb2_divider",
                "local_10": "hclk_freq",
                "HAL_RCC_OscConfig": "configure_oscillator",
                "_Error_Handler": "handle_error",
                "HAL_RCC_ClockConfig": "configure_clock",
                "HAL_RCCEx_PeriphCLKConfig": "configure_periph_clock",
                "HAL_RCC_GetHCLKFreq": "get_hclk_frequency",
                "HAL_SYSTICK_Config": "configure_sys_tick",
                "HAL_SYSTICK_CLKSourceConfig": "configure_sys_tick_clock_source",
                "HAL_NVIC_SetPriority": "set_priority",
                "local_54[0]": "uart_clock",
                "local_30[0]": "config_option"
            },
            "calling": [
                "FUN_080072fa"
            ],
            "called": [
                "FUN_08005aa4",
                "FUN_08005a1c",
                "FUN_080073e8",
                "FUN_08004024",
                "FUN_08005460",
                "FUN_080058ac",
                "FUN_08003fd8",
                "FUN_08003f30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080035b8": {
                    "1": "configure_clock",
                    "2": "initialize_hardware",
                    "3": "configure_system_clock",
                    "16": "initialize_system",
                    "4": "configure_system"
                },
                "local_30": {
                    "6": "osc_config",
                    "1": "config_params",
                    "20": "oscillator_config"
                },
                "local_20": {
                    "2": "gpio_config",
                    "1": "option_value",
                    "5": "clock_source_config",
                    "3": "oscillator_type"
                },
                "local_1c": {
                    "1": "multiplier_config",
                    "2": "clock_frequency",
                    "4": "clock_config"
                },
                "local_14": {
                    "1": "peripheral_clk_config",
                    "2": "low_power_mode",
                    "3": "peripheral_clock_config"
                },
                "local_44": {
                    "1": "rcc_clk_init_struct",
                    "6": "clock_source",
                    "2": "rcc_clock_config",
                    "3": "clock_config"
                },
                "local_40": {
                    "1": "ahb_div",
                    "2": "mco_config",
                    "3": "sysclk_source"
                },
                "local_3c": {
                    "1": "apb1_divider",
                    "2": "ahb_prescaler",
                    "3": "pll_config"
                },
                "local_38": {
                    "1": "presc_bits",
                    "2": "hclk_config"
                },
                "local_54": {
                    "1": "rcc_periph_clock_type",
                    "2": "peripheral_clk_config",
                    "3": "rcc_periph_clk_config"
                },
                "local_4c": {
                    "1": "periph_clock_init_struct",
                    "3": "peripheral_clock_config"
                },
                "iVar1": {
                    "1": "error_code",
                    "13": "result"
                },
                "uVar2": {
                    "3": "hclk_frequency",
                    "1": "hclk_freq_value",
                    "9": "hclk_freq"
                },
                "local_c": {
                    "1": "hclk_prescaler"
                },
                "local_34": {
                    "1": "clock_config_param5",
                    "2": "apb2_divider"
                },
                "local_10": {
                    "1": "osc_config_value4",
                    "2": "sys_tick_config",
                    "3": "hclk_freq"
                },
                "HAL_RCC_OscConfig": {
                    "1": "configure_rcc_oscillators",
                    "3": "configure_oscillator"
                },
                "_Error_Handler": {
                    "4": "handle_error"
                },
                "HAL_RCC_ClockConfig": {
                    "1": "configure_rcc_clock",
                    "2": "configure_clock"
                },
                "HAL_RCCEx_PeriphCLKConfig": {
                    "1": "configure_peripheral_clock",
                    "2": "configure_periph_clock"
                },
                "HAL_RCC_GetHCLKFreq": {
                    "2": "get_hclk_frequency",
                    "1": "get_hclk_freq"
                },
                "HAL_SYSTICK_Config": {
                    "4": "configure_sys_tick"
                },
                "HAL_SYSTICK_CLKSourceConfig": {
                    "3": "configure_sys_tick_clock_source",
                    "1": "configure_sys_tick_clock"
                },
                "HAL_NVIC_SetPriority": {
                    "1": "set_nvic_priority",
                    "2": "set_priority"
                },
                "FUN_08005aa4": {
                    "1": "configure_flash_memory"
                },
                "FUN_080073e8": {
                    "1": "systick_init"
                },
                "FUN_08004024": {
                    "1": "handle_error"
                },
                "FUN_08005a1c": {
                    "1": "get_clock_frequency"
                },
                "FUN_08005460": {
                    "1": "configure_peripheral1"
                },
                "FUN_080058ac": {
                    "1": "configure_peripheral2"
                },
                "FUN_08003fd8": {
                    "1": "nvic_set_priority"
                },
                "FUN_08003f30": {
                    "1": "configure_peripheral4"
                },
                "local_54[0]": {
                    "1": "uart_clock"
                },
                "local_30[0]": {
                    "1": "config_option"
                }
            }
        },
        "FUN_08003658": {
            "entrypoint": "0x08003658",
            "current_name": "initialize_system_08003658",
            "code": "\nvoid initialize_system_08003658(void)\n\n{\n  int index;\n  undefined4 *ptr;\n  code *jump_table;\n  \n  for (index = 0; (undefined4 *)(index + 0x20000000) < &DAT_200000f4; index = index + 4) {\n    *(undefined4 *)(index + 0x20000000) = *(undefined4 *)(index + 0x800ac18);\n  }\n  for (ptr = &DAT_200000f4; ptr < &DAT_20000a3c; ptr = ptr + 1) {\n    *ptr = 0;\n  }\n  initialize_hardware();\n  initialize_library_array();\n  jump_table = (code *)0x800368a;\n  run_main();\n                    /* WARNING: Could not recover jumptable at 0x0800368a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003658": "initialize_system_08003658",
                "iVar1": "index",
                "puVar2": "ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "SystemInit": "initialize_hardware",
                "__libc_init_array": "initialize_library_array",
                "main": "run_main"
            },
            "calling": [],
            "called": [
                "FUN_08009148",
                "FUN_080073ec",
                "FUN_08008f1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003658": {
                    "1": "initialize_memory_and_run_main",
                    "20": "initialize_system",
                    "5": "initialize_program"
                },
                "iVar1": {
                    "3": "i",
                    "1": "offset",
                    "22": "index"
                },
                "puVar2": {
                    "1": "p",
                    "5": "pointer",
                    "4": "data_pointer",
                    "16": "ptr"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "1": "jmp_table",
                    "21": "jump_table",
                    "5": "jumptable"
                },
                "FUN_08009148": {
                    "1": "setup_memory",
                    "2": "initialize_memory"
                },
                "FUN_080073ec": {
                    "1": "clear_data",
                    "2": "clear_memory"
                },
                "FUN_08008f1c": {
                    "2": "initialize_libraries",
                    "1": "initialize_function3"
                },
                "SystemInit": {
                    "1": "initialize_hardware"
                },
                "__libc_init_array": {
                    "1": "initialize_library_array"
                },
                "main": {
                    "1": "run_main"
                }
            }
        },
        "FUN_080036a2": {
            "entrypoint": "0x080036a2",
            "current_name": "initialize_hardware_configuration_080036a2",
            "code": "\nvoid initialize_hardware_configuration_080036a2(void)\n\n{\n  initialize_hardware();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036a2": "initialize_hardware_configuration_080036a2",
                "hw_config_init": "initialize_hardware"
            },
            "calling": [
                "FUN_08008f0e"
            ],
            "called": [
                "FUN_080072fa"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080036a2": {
                    "7": "initialize_hardware_config",
                    "17": "initialize_hardware_configuration",
                    "6": "initialize_hardware",
                    "1": "initialize_hw_config"
                },
                "FUN_080072fa": {
                    "4": "configure_hardware",
                    "1": "calculate_checksum",
                    "5": "perform_additional_setup",
                    "2": "perform_additional_tasks",
                    "3": "perform_additional_configuration"
                },
                "hw_config_init": {
                    "1": "initialize_hw_config",
                    "2": "initialize_hardware_configuration",
                    "5": "initialize_hardware"
                }
            }
        },
        "FUN_080036ac": {
            "entrypoint": "0x080036ac",
            "current_name": "find_character_index_080036ac",
            "code": "\nuint find_character_index_080036ac(int character)\n\n{\n  uint index;\n  \n  if ((uint)(character << 0x18) >> 0x1c < 5) {\n    for (index = 0; (index < 0x3c && (character != (char)(&DAT_0800a908)[index])); index = index + 1)\n    {\n    }\n  }\n  else {\n    index = 0xffffffff;\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_080036ac": "find_character_index_080036ac",
                "param_1": "character",
                "uVar1": "index"
            },
            "calling": [
                "FUN_080022f8",
                "FUN_08001cd0",
                "FUN_08000ef8",
                "FUN_08000a64",
                "FUN_0800021a",
                "FUN_08000aec",
                "FUN_080005f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080036ac": {
                    "17": "find_character_index",
                    "1": "find_matching_character",
                    "4": "find_char_index",
                    "2": "find_character"
                },
                "param_1": {
                    "1": "input_val",
                    "19": "character",
                    "8": "input_value"
                },
                "uVar1": {
                    "1": "matching_index",
                    "26": "index",
                    "2": "result"
                },
                "&DAT_0800a908": {
                    "1": "character_array"
                }
            }
        },
        "FUN_080036d4": {
            "entrypoint": "0x080036d4",
            "current_name": "FUNC_080036d4",
            "code": "\nvoid FUNC_080036d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036d4": "FUNC_080036d4"
            },
            "calling": [
                "FUN_08003724"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080036d8": {
            "entrypoint": "0x080036d8",
            "current_name": "configure_sys_tick_080036d8",
            "code": "\nundefined4 configure_sys_tick_080036d8(uint priority_level)\n\n{\n  int result;\n  \n  result = configure_sys_tick_080036d8_interval(DAT_20000018 / (1000 / DAT_2000000c));\n  if (result != 0) {\n    return 1;\n  }\n  if (0xf < priority_level) {\n    return 1;\n  }\n  set_interrupt_priority(0xffffffff,priority_level,0);\n  DAT_20000010 = priority_level;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080036d8": "configure_sys_tick_080036d8",
                "param_1": "priority_level",
                "iVar1": "result",
                "HAL_SYSTICK_Config": "configure_sys_tick_interval",
                "HAL_NVIC_SetPriority": "set_interrupt_priority"
            },
            "calling": [
                "FUN_080058d2",
                "FUN_08003724"
            ],
            "called": [
                "FUN_08003fd8",
                "FUN_08003f30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080036d8": {
                    "15": "configure_sys_tick",
                    "1": "set_systick_config",
                    "4": "configure_systick",
                    "2": "initialize_sys_tick"
                },
                "param_1": {
                    "10": "priority",
                    "20": "priority_level"
                },
                "iVar1": {
                    "3": "systick_config_status",
                    "4": "systick_config_result",
                    "1": "status",
                    "8": "result"
                },
                "DAT_20000018": {
                    "1": "sys_tick_frequency",
                    "2": "sys_tick_interval"
                },
                "DAT_2000000c": {
                    "1": "ticks_per_millisecond",
                    "2": "sys_tick_interval"
                },
                "HAL_SYSTICK_Config": {
                    "1": "configure_sys_tick_timer",
                    "4": "configure_sys_tick_interval",
                    "2": "configure_sys_tick"
                },
                "HAL_NVIC_SetPriority": {
                    "6": "set_interrupt_priority",
                    "1": "set_irq_priority"
                },
                "DAT_20000010": {
                    "1": "interrupt_priority",
                    "5": "current_priority"
                },
                "uint param_1": {
                    "1": "priority"
                }
            }
        },
        "FUN_08003724": {
            "entrypoint": "0x08003724",
            "current_name": "initialize_hardware_08003724",
            "code": "\n\n\nundefined4 initialize_hardware_08003724(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  set_priority_grouping(3);\n  initialize_tick(0xf);\n  initialize_msp();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003724": "initialize_hardware_08003724",
                "HAL_NVIC_SetPriorityGrouping": "set_priority_grouping",
                "HAL_InitTick": "initialize_tick",
                "HAL_MspInit": "initialize_msp"
            },
            "calling": [
                "FUN_080072fa"
            ],
            "called": [
                "FUN_08003f0c",
                "FUN_080036d4",
                "FUN_080036d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003724": {
                    "1": "configure_system",
                    "8": "initialize_system",
                    "21": "initialize_hardware"
                },
                "FUN_08003f0c": {
                    "1": "configure_nvic",
                    "3": "set_priority",
                    "7": "configure_peripheral"
                },
                "FUNC_080036d4": {
                    "1": "perform_initialization",
                    "7": "initialize_tick"
                },
                "FUN_080036d8": {
                    "1": "initialize_periph",
                    "3": "initialize_peripheral",
                    "2": "initialize_nvic"
                },
                "_DAT_40022000": {
                    "1": "gpio_register",
                    "3": "hardware_flags"
                },
                "HAL_NVIC_SetPriorityGrouping": {
                    "8": "set_priority_grouping",
                    "5": "set_interrupt_priority_grouping",
                    "1": "configure_interrupt_priority",
                    "4": "set_interrupt_priority_group"
                },
                "HAL_InitTick": {
                    "11": "initialize_tick",
                    "2": "initialize_tick_module",
                    "1": "initialize_system_tick"
                },
                "HAL_MspInit": {
                    "1": "initialize_periph",
                    "13": "initialize_msp"
                },
                "param_1": {
                    "1": "parameter",
                    "2": "flags",
                    "4": "param"
                },
                "FUN_080036d4": {
                    "1": "do_something"
                }
            }
        },
        "FUN_08003748": {
            "entrypoint": "0x08003748",
            "current_name": "update_value_08003748",
            "code": "\nvoid update_value_08003748(void)\n\n{\n  DAT_20000a34 = (uint)DAT_2000000c + DAT_20000a34;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003748": "update_value_08003748"
            },
            "calling": [
                "FUN_08007246"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003748": {
                    "1": "sum_with_offset",
                    "2": "add_value_to_global_variable",
                    "3": "addition_operation"
                },
                "DAT_2000000c": {
                    "5": "input",
                    "1": "current_value",
                    "4": "value_to_add",
                    "7": "input_value",
                    "2": "offset"
                },
                "DAT_20000a34": {
                    "1": "total",
                    "3": "current_value",
                    "8": "result"
                }
            }
        },
        "FUN_08003760": {
            "entrypoint": "0x08003760",
            "current_name": "get_data_08003760",
            "code": "\nundefined4 get_data_08003760(void)\n\n{\n  return DAT_20000a34;\n}\n\n",
            "renaming": {
                "FUN_08003760": "get_data_08003760"
            },
            "calling": [
                "FUN_08005aa4",
                "FUN_08003e20",
                "FUN_0800376c",
                "FUN_08007e74",
                "FUN_080058d2",
                "FUN_08003a20",
                "FUN_08005460",
                "FUN_080067ac",
                "FUN_080066e8",
                "FUN_08007f0e",
                "FUN_08008500",
                "FUN_08003b8c",
                "FUN_0800723c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003760": {
                    "1": "get_some_data",
                    "4": "get_global_variable",
                    "2": "get_global_value",
                    "10": "get_data_value",
                    "11": "get_data"
                },
                "DAT_20000a34": {
                    "11": "data",
                    "1": "global_value",
                    "4": "global_variable",
                    "3": "data_value",
                    "2": "result"
                }
            }
        },
        "FUN_0800376c": {
            "entrypoint": "0x0800376c",
            "current_name": "calculate_delay_0800376c",
            "code": "\nundefined4 calculate_delay_0800376c(uint **input_params,uint timeout)\n\n{\n  int start_time;\n  uint clock_frequency;\n  int delay;\n  undefined4 result;\n  uint *ptr;\n  uint calculated_value;\n  uint counter;\n  \n  counter = 0;\n  start_time = HAL_GetTick();\n  calculated_value = DAT_20000018;\n  ptr = *input_params;\n  if ((ptr[2] & 0x100) == 0) {\n    if (((ptr[1] & 0x100) == 0) && ((ptr[0xb] & 0xf00000) == 0)) {\n      do {\n        if ((**input_params & 2) != 0) goto LAB_0800387e;\n      } while ((timeout == 0xffffffff) ||\n              ((timeout != 0 && (delay = HAL_GetTick(), (uint)(delay - start_time) <= timeout))));\n      input_params[10] = (uint *)((uint)input_params[10] | 4);\n      *(undefined *)(input_params + 9) = 0;\n      result = 3;\n    }\n    else {\n      clock_frequency = HAL_RCCEx_GetPeriphCLKFreq(2);\n      ptr = *input_params;\n      if (((ptr[4] & 0x24924924) == 0) && ((ptr[3] & 0x924924) == 0)) {\n        if ((ptr[4] & 0x12492492) == 0) {\n          if ((ptr[3] & 0x492492) == 0) {\n            delay = 0x14;\n          }\n          else {\n            delay = 0x29;\n          }\n        }\n        else {\n          delay = 0x29;\n        }\n      }\n      else if (((ptr[4] & 0x12492492) == 0) && ((ptr[3] & 0x492492) == 0)) {\n        delay = 0x54;\n      }\n      else if ((ptr[4] & 0x249249) == 0) {\n        if ((ptr[3] & 0x249249) == 0) {\n          delay = 0x54;\n        }\n        else {\n          delay = 0xfc;\n        }\n      }\n      else {\n        delay = 0xfc;\n      }\n      calculated_value = (calculated_value / clock_frequency) * delay;\n      for (; counter <= calculated_value && calculated_value - counter != 0; counter = counter + 1) {\n        if ((timeout != 0xffffffff) &&\n           ((timeout == 0 || (delay = HAL_GetTick(), timeout < (uint)(delay - start_time))))) {\n          input_params[10] = (uint *)((uint)input_params[10] | 4);\n          *(undefined *)(input_params + 9) = 0;\n          return 3;\n        }\n      }\nLAB_0800387e:\n      **input_params = 0xffffffed;\n      input_params[10] = (uint *)((uint)input_params[10] | 0x200);\n      if (((*input_params)[2] & 0xe0000) == 0xe0000) {\n        if (input_params[3] == (uint *)0x0) {\n          input_params[10] = (uint *)((uint)input_params[10] & 0xfffffeff);\n          if (((uint)input_params[10] & 0x1000) == 0) {\n            input_params[10] = (uint *)((uint)input_params[10] | 1);\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    input_params[10] = (uint *)((uint)input_params[10] | 0x20);\n    *(undefined *)(input_params + 9) = 0;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800376c": "calculate_delay_0800376c",
                "param_1": "input_params",
                "param_2": "timeout",
                "iVar1": "start_time",
                "uVar2": "clock_frequency",
                "iVar3": "delay",
                "uVar4": "result",
                "puVar5": "ptr",
                "uVar6": "calculated_value",
                "local_1c": "counter"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08005bb8",
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800376c": {
                    "1": "perform_operation",
                    "15": "calculate_delay",
                    "2": "calculate_timeout"
                },
                "param_1": {
                    "1": "frequency_params",
                    "7": "input_params",
                    "3": "config_params",
                    "2": "data_pointer",
                    "4": "input_data"
                },
                "param_2": {
                    "25": "timeout",
                    "1": "max_timeout",
                    "2": "max_delay",
                    "3": "time_limit"
                },
                "iVar1": {
                    "1": "start_ticks",
                    "4": "start_tick",
                    "22": "start_time",
                    "2": "tick_start"
                },
                "uVar2": {
                    "5": "freq",
                    "4": "periph_clk_freq",
                    "2": "clock_freq",
                    "1": "sys_clk_freq",
                    "7": "clock_frequency"
                },
                "iVar3": {
                    "2": "time_diff",
                    "1": "wait_time",
                    "3": "interval",
                    "5": "delay",
                    "4": "multiplier"
                },
                "uVar4": {
                    "30": "result",
                    "1": "return_value"
                },
                "puVar5": {
                    "2": "config_ptr",
                    "1": "current_values",
                    "3": "ptr"
                },
                "uVar6": {
                    "1": "adjusted_delay",
                    "3": "calculated_delay",
                    "2": "required_delay"
                },
                "local_1c": {
                    "2": "count",
                    "13": "counter",
                    "1": "delay_count",
                    "11": "current_delay",
                    "4": "current_value"
                }
            }
        },
        "FUN_080038dc": {
            "entrypoint": "0x080038dc",
            "current_name": "get_offset_value_080038dc",
            "code": "\nundefined4 get_offset_value_080038dc(int *input_array)\n\n{\n  return *(undefined4 *)(*input_array + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_080038dc": "get_offset_value_080038dc",
                "param_1": "input_array"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080038dc": {
                    "14": "get_offset_value",
                    "1": "extract_last_value_from_pointer",
                    "5": "get_offset",
                    "4": "get_value_from_offset"
                },
                "param_1": {
                    "2": "offset",
                    "1": "offset_list",
                    "3": "array_ptr",
                    "6": "input_array",
                    "5": "input_pointer"
                },
                "*param_1": {
                    "1": "input_pointer",
                    "2": "offset_value",
                    "3": "array_pointer"
                },
                "*(undefined4 *)(*param_1 + 0x4c)": {
                    "1": "offset_result",
                    "5": "offset_value"
                },
                "0x4c": {
                    "3": "offset"
                },
                "return_value": {
                    "1": "extracted_value"
                }
            }
        },
        "FUN_080038e4": {
            "entrypoint": "0x080038e4",
            "current_name": "update_configuration_080038e4",
            "code": "\nundefined4 update_configuration_080038e4(int *config,uint *values)\n\n{\n  undefined4 result;\n  uint index;\n  int counter;\n  \n  if (*(char *)(config + 9) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(config + 9) = 1;\n    index = value_b;\n    if (index < 7) {\n      index = index * 5 - 5;\n      *(uint *)(*config + 0x34) =\n           *values << (index & 0xff) | *(uint *)(*config + 0x34) & ~(0x1f << (index & 0xff));\n    }\n    else if (index < 0xd) {\n      index = index * 5 - 0x23;\n      *(uint *)(*config + 0x30) =\n           *values << (index & 0xff) | *(uint *)(*config + 0x30) & ~(0x1f << (index & 0xff));\n    }\n    else {\n      index = index * 5 - 0x41;\n      *(uint *)(*config + 0x2c) =\n           *values << (index & 0xff) | *(uint *)(*config + 0x2c) & ~(0x1f << (index & 0xff));\n    }\n    index = *values;\n    if (index < 10) {\n      *(uint *)(*config + 0x10) =\n           value_c << (index * 3 & 0xff) |\n           *(uint *)(*config + 0x10) & ~(7 << (index * 3 & 0xff));\n    }\n    else {\n      index = index * 3 - 0x1e;\n      *(uint *)(*config + 0xc) =\n           value_c << (index & 0xff) | *(uint *)(*config + 0xc) & ~(7 << (index & 0xff));\n    }\n    if (*values - 0x10 < 2) {\n      if (*config == 0x40012400) {\n        if ((some_register & 0x800000) == 0) {\n          some_register = some_register | 0x800000;\n          if (*values == 0x10) {\n            for (counter = (DAT_20000018 / 1000000) * 10; counter != 0; counter = counter + -1) {\n            }\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        config[10] = config[10] | 0x20;\n        result = 1;\n      }\n    }\n    else {\n      result = 0;\n    }\n    *(undefined *)(config + 9) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080038e4": "update_configuration_080038e4",
                "param_1": "config",
                "param_2": "values",
                "uVar1": "result",
                "uVar2": "index",
                "local_c": "counter",
                "param_2[1]": "value_b",
                "param_2[2]": "value_c",
                "uRam40012408": "some_register"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080038e4": {
                    "3": "update_config",
                    "1": "update_config_values",
                    "2": "update_values",
                    "11": "update_configuration",
                    "4": "update_settings"
                },
                "param_1": {
                    "1": "configuration",
                    "2": "config_array",
                    "8": "config",
                    "4": "settings",
                    "3": "config_ptr"
                },
                "param_2": {
                    "1": "update_values",
                    "17": "values",
                    "2": "values_ptr"
                },
                "uVar1": {
                    "1": "status",
                    "19": "result",
                    "10": "return_value"
                },
                "uVar2": {
                    "1": "multiplier",
                    "2": "shift_value",
                    "6": "value",
                    "10": "index"
                },
                "local_c": {
                    "2": "delay_counter",
                    "1": "temp",
                    "7": "count",
                    "15": "counter",
                    "4": "delay"
                },
                "*(char *)(param_1 + 9)": {
                    "2": "flag",
                    "1": "config_flag"
                },
                "*(undefined *)(param_1 + 9)": {
                    "1": "flag_value"
                },
                "*(uint *)(*param_1 + 0x34)": {
                    "1": "config_value_a"
                },
                "*(uint *)(*param_1 + 0x30)": {
                    "1": "config_value2"
                },
                "*(uint *)(*param_1 + 0x2c)": {
                    "1": "config_value_c"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "config_value_d"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "memory_location5"
                },
                "*param_2": {
                    "1": "value1"
                },
                "param_2[1]": {
                    "1": "value_b"
                },
                "param_2[2]": {
                    "1": "value_c"
                },
                "*param_1": {
                    "1": "config_address"
                },
                "DAT_20000018": {
                    "1": "some_constant",
                    "2": "constant"
                },
                "uRam40012408": {
                    "1": "register40012408"
                },
                "*param_1 == 0x40012400": {
                    "1": "is_address_valid"
                },
                "*param_2 == 0x10": {
                    "1": "is_value_equal"
                },
                "uRam40012408 & 0x800000": {
                    "1": "and_operation_result"
                },
                "DAT_20000018 / 1000000": {
                    "1": "division_result"
                },
                "0x34": {
                    "1": "register1"
                },
                "0x30": {
                    "1": "register2"
                },
                "0x2c": {
                    "1": "register3"
                },
                "0x10": {
                    "1": "register4"
                },
                "0xc": {
                    "1": "register5"
                },
                "<original_function_name>": {
                    "1": "decode_bitmask"
                }
            }
        },
        "FUN_08003a1c": {
            "entrypoint": "0x08003a1c",
            "current_name": "get_offset_value_08003a1c",
            "code": "\nreturn_type get_offset_value_08003a1c(int offset)\n\n{\n  return *(return_type *)(offset + 0x28);\n}\n\n",
            "renaming": {
                "FUN_08003a1c": "get_offset_value_08003a1c",
                "param_1": "offset",
                "undefined4": "return_type"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003a1c": {
                    "1": "get_value_at_offset",
                    "8": "get_offset_value",
                    "6": "get_value_from_offset"
                },
                "param_1": {
                    "4": "address",
                    "8": "offset",
                    "2": "memory_address",
                    "1": "input_pointer"
                },
                "*(undefined4 *)(param_1 + 0x28)": {
                    "1": "pointer_value",
                    "2": "value",
                    "3": "offset_value"
                },
                "param_1+0x28": {
                    "1": "pointer_offset"
                },
                "* (undefined4 *)": {
                    "1": "cast_to_undefined4_pointer"
                },
                "<original_variable_name1>": {
                    "1": "<new_variable_name1>"
                },
                "return_value": {
                    "1": "value"
                },
                "0x28": {
                    "1": "offset"
                },
                "<original_function_name>": {
                    "1": "get_value_from_offset"
                },
                "<param_1>": {
                    "1": "offset"
                },
                "<original_variable_name>": {
                    "1": "result"
                },
                "param_1 + 0x28": {
                    "1": "pointer_value"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "PTR_28": {
                    "1": "offset_pointer"
                },
                "undefined4": {
                    "1": "return_type"
                },
                "var_28": {
                    "1": "offset"
                }
            }
        },
        "FUN_08003a20": {
            "entrypoint": "0x08003a20",
            "current_name": "initialize_device_08003a20",
            "code": "\nundefined4 initialize_device_08003a20(int *device_data,undefined4 param)\n\n{\n  int current_tick;\n  undefined4 result;\n  int device_address;\n  uint delay_count;\n  \n  device_address = *device_data;\n  if ((*(uint *)(device_address + 8) & 1) == 0) {\n    *(uint *)(device_address + 8) = *(uint *)(device_address + 8) | 1;\n    for (delay_count = DAT_20000018 / 1000000; delay_count != 0; delay_count = delay_count - 1) {\n    }\n    device_address = get_current_tick(device_data,param,DAT_20000018 * 0x431bde83);\n    do {\n      if ((*(uint *)(*device_data + 8) & 1) != 0) {\n        return 0;\n      }\n      current_tick = get_current_tick();\n    } while ((uint)(current_tick - device_address) < 3);\n    flag1 = flag1 | 0x10;\n    flag2 = flag2 | 1;\n    *(undefined *)(device_data + 9) = 0;\n    result = 1;\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003a20": "initialize_device_08003a20",
                "param_1": "device_data",
                "param_2": "param",
                "iVar1": "current_tick",
                "iVar3": "device_address",
                "local_14": "delay_count",
                "HAL_GetTick": "get_current_tick",
                "uVar2": "result",
                "param_1[10]": "flag1",
                "param_1[0xb]": "flag2"
            },
            "calling": [
                "FUN_08003e20",
                "FUN_08003aa0"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003a20": {
                    "1": "perform_operation",
                    "3": "check_and_set_flag",
                    "11": "initialize_device",
                    "2": "handle_flag"
                },
                "param_1": {
                    "5": "data",
                    "2": "device_params",
                    "1": "hardware_data",
                    "3": "device",
                    "4": "input_array",
                    "7": "device_data"
                },
                "param_2": {
                    "3": "param2",
                    "1": "status",
                    "2": "input_value",
                    "6": "value",
                    "15": "param"
                },
                "iVar1": {
                    "15": "current_tick",
                    "3": "tick_start",
                    "1": "tick_after_loop",
                    "5": "current_time",
                    "2": "tick1"
                },
                "iVar3": {
                    "5": "device_address",
                    "1": "critical_section_address",
                    "2": "ptr_data",
                    "4": "device_value",
                    "3": "flag_value"
                },
                "local_14": {
                    "5": "delay_counter",
                    "1": "delay_time",
                    "6": "delay_count",
                    "3": "iteration_count",
                    "4": "delay"
                },
                "HAL_GetTick": {
                    "4": "get_current_tick",
                    "2": "get_tick"
                },
                "uVar2": {
                    "2": "status",
                    "12": "result",
                    "8": "return_value"
                },
                "DAT_20000018": {
                    "1": "constant_value"
                },
                "PTR_FUN_08003760": {
                    "1": "subfunction"
                },
                "param_1[10]": {
                    "1": "flag1"
                },
                "param_1[0xb]": {
                    "1": "flag2"
                }
            }
        },
        "FUN_08003aa0": {
            "entrypoint": "0x08003aa0",
            "current_name": "initialize_adc_08003aa0",
            "code": "\n\n\nint initialize_adc_08003aa0(int *adc_params)\n\n{\n  int result;\n  undefined4 *base_address;\n  int value;\n  \n  if (*(char *)(adc_params + 9) != '\\x01') {\n    *(undefined *)(adc_params + 9) = 1;\n    result = enable_adc;\n    if (result == 0) {\n      config = config & 0xfffffcfeU | 0x100;\n      base_address = (undefined4 *)*adc_params;\n      if ((base_address == (undefined4 *)0x40012800) && ((_DAT_40012404 & 0xf0000) != 0)) {\n        config = config | 0x100000;\n        if ((_DAT_40012404 & 0x400) != 0) {\n          config = config & 0xffffcfffU | 0x1000;\n        }\n      }\n      else {\n        config = config & 0xffefffff;\n        if ((ptr1 & 0x400) != 0) {\n          config = config & 0xffffcfffU | 0x1000;\n        }\n      }\n      if ((config & 0x1000U) == 0) {\n        var = 0;\n      }\n      else {\n        var = var & 0xfffffff9;\n      }\n      *(undefined *)(adc_params + 9) = 0;\n      *base_address = 0xfffffffd;\n      value = *adc_params;\n      if (((*(uint *)(value + 8) & 0xe0000) == 0xe0000) &&\n         ((value != 0x40012800 || ((_DAT_40012404 & 0xf0000) == 0)))) {\n        *(uint *)(value + 8) = *(uint *)(value + 8) | 0x500000;\n      }\n      else {\n        *(uint *)(value + 8) = *(uint *)(value + 8) | 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(adc_params + 9) = 0;\n    }\n    return result;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08003aa0": "initialize_adc_08003aa0",
                "param_1": "adc_params",
                "iVar1": "result",
                "puVar2": "base_address",
                "iVar3": "value",
                "ADC_Enable()": "enable_adc",
                "param_1[10]": "config",
                "param_1[0xb]": "var",
                "ADC_Enable": "enable_adc",
                "puVar2[1]": "ptr1"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003a20"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003aa0": {
                    "17": "initialize_adc",
                    "3": "configure_adc",
                    "1": "check_and_enable_adc",
                    "2": "enable_adc"
                },
                "param_1": {
                    "5": "config",
                    "2": "config_params",
                    "1": "param",
                    "3": "adc_config",
                    "6": "adc_params"
                },
                "iVar1": {
                    "1": "return_code",
                    "2": "enable_result",
                    "6": "enable_status",
                    "17": "result"
                },
                "puVar2": {
                    "1": "base_addr",
                    "4": "adc_config",
                    "7": "base_address",
                    "3": "pointer",
                    "2": "config_ptr",
                    "6": "ptr"
                },
                "iVar3": {
                    "5": "address",
                    "2": "current_value",
                    "1": "i_var",
                    "3": "config_value",
                    "6": "value"
                },
                "FUN_08003a20": {
                    "1": "set_config_bit",
                    "3": "set_adc_config",
                    "4": "configure_adc"
                },
                "param_2": {
                    "1": "param",
                    "3": "config_value"
                },
                "*param_1": {
                    "1": "pointer_value"
                },
                "_DAT_40012404": {
                    "1": "constant"
                },
                "(uint *)(iVar3 + 8)": {
                    "1": "pointer_to_value"
                },
                "*(char *)(parameters + 9)": {
                    "1": "flag"
                },
                "*(undefined *)(parameters + 9)": {
                    "1": "flag_value"
                },
                "ADC_Enable()": {
                    "1": "enable_adc"
                },
                "param_1[10]": {
                    "1": "flags"
                },
                "param_1[0xb]": {
                    "1": "var"
                },
                "*puVar2": {
                    "1": "ptr_value"
                },
                "(puVar2 == (undefined4 *)0x40012800)": {
                    "1": "check1"
                },
                "(_DAT_40012404 & 0xf0000)": {
                    "1": "check2"
                },
                "(_DAT_40012404 & 0x400)": {
                    "1": "check3"
                },
                "(puVar2[1] & 0x400)": {
                    "1": "check4"
                },
                "(param_1[10] & 0x1000U)": {
                    "1": "flag_check"
                },
                "(*(uint *)(iVar3 + 8) & 0xe0000)": {
                    "1": "check6"
                },
                "ADC_Enable": {
                    "4": "enable_adc",
                    "1": "enable_adc_subfunction"
                },
                "*(char *)(param_1 + 9)": {
                    "1": "flag"
                },
                "*(undefined *)(param_1 + 9)": {
                    "1": "flag_ptr"
                },
                "puVar2[1]": {
                    "1": "value2"
                },
                "param_1[9]": {
                    "1": "flag"
                },
                "DAT_40012404": {
                    "1": "constant"
                },
                "*(uint *)(iVar3 + 8)": {
                    "1": "register_value"
                }
            }
        },
        "FUN_08003b8c": {
            "entrypoint": "0x08003b8c",
            "current_name": "check_and_set_flags_08003b8c",
            "code": "\nundefined4 check_and_set_flags_08003b8c(int *input_array)\n\n{\n  int current_tick;\n  int initial_tick;\n  \n  initial_tick = *input_array;\n  if ((*(uint *)(initial_tick + 8) & 1) == 0) {\n    return 0;\n  }\n  *(uint *)(initial_tick + 8) = *(uint *)(initial_tick + 8) & 0xfffffffe;\n  initial_tick = get_current_time();\n  do {\n    if ((*(uint *)(*input_array + 8) & 1) == 0) {\n      return 0;\n    }\n    current_tick = get_current_time();\n  } while ((uint)(current_tick - initial_tick) < 3);\n  bitwise_or_value1 = bitwise_or_value1 | 0x10;\n  bitwise_or_value2 = bitwise_or_value2 | 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003b8c": "check_and_set_flags_08003b8c",
                "param_1": "input_array",
                "iVar1": "current_tick",
                "iVar2": "initial_tick",
                "HAL_GetTick": "get_current_time",
                "param_1[10]": "bitwise_or_value1",
                "param_1[0xb]": "bitwise_or_value2"
            },
            "calling": [
                "FUN_08003e20",
                "FUN_08003bd8",
                "FUN_08003ce8",
                "FUN_08003de4"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003b8c": {
                    "2": "check_and_update_flags",
                    "1": "update_flag_and_status",
                    "5": "check_and_set_flags"
                },
                "param_1": {
                    "1": "flag_array",
                    "9": "input_array",
                    "2": "status"
                },
                "iVar1": {
                    "14": "current_tick",
                    "1": "previous_tick",
                    "12": "current_time"
                },
                "iVar2": {
                    "1": "status_value",
                    "2": "element",
                    "4": "initial_tick",
                    "3": "value"
                },
                "HAL_GetTick": {
                    "6": "get_current_time",
                    "2": "get_tick_count"
                },
                "FUN_08003760": {
                    "1": "initialize"
                },
                "param_1[10]": {
                    "1": "bitwise_or_value1"
                },
                "param_1[0xb]": {
                    "1": "bitwise_or_value2"
                }
            }
        },
        "FUN_08003bd8": {
            "entrypoint": "0x08003bd8",
            "current_name": "initialize_adc_08003bd8",
            "code": "\nundefined4 initialize_adc_08003bd8(int *adc_params)\n\n{\n  int conversion_result;\n  uint var1;\n  uint var2;\n  \n  if (adc_params == (int *)0x0) {\n    return 1;\n  }\n  if (adc_params[10] == 0) {\n    adc_params[11] = 0;\n    *(undefined *)(adc_params + 9) = 0;\n    initialize_adc_08003bd8_peripheral();\n  }\n  conversion_result = stop_disable_conversion(adc_params);\n  if (((adc_params[10] & 0x10U) == 0) && (conversion_result == 0)) {\n    adc_params[10] = adc_params[10] & 0xffffeefdU | 2;\n    var1 = adc_params[1] | adc_params[7] | adc_params[3] << 1;\n    if (adc_params[2] == 0x100) {\n      var2 = 0x100;\n    }\n    else {\n      var2 = 0;\n      if (adc_params[2] == 1) {\n        var2 = 0x100;\n      }\n    }\n    if (adc_params[5] == 1) {\n      if (adc_params[3] == 0) {\n        var2 = var2 | (adc_params[6] + -1) * 0x2000 | 0x800;\n      }\n      else {\n        adc_params[10] = adc_params[10] | 0x20;\n        adc_params[11] = adc_params[11] | 1;\n      }\n    }\n    *(uint *)(*adc_params + 4) = var2 | *(uint *)(*adc_params + 4) & 0xffff16ff;\n    *(uint *)(*adc_params + 8) = *(uint *)(*adc_params + 8) & 0xffe1f7fd | var1;\n    if ((adc_params[2] == 0x100) || (adc_params[2] == 1)) {\n      var2 = (adc_params[4] + -1) * 0x100000;\n    }\n    else {\n      var2 = 0;\n    }\n    *(uint *)(*adc_params + 0x2c) = var2 | *(uint *)(*adc_params + 0x2c) & 0xff0fffff;\n    if (var1 != (*(uint *)(*adc_params + 8) & 0xff1f0efe)) {\n      adc_params[10] = adc_params[10] & 0xffffffedU | 0x10;\n      adc_params[11] = adc_params[11] | 1;\n      return 1;\n    }\n    adc_params[11] = 0;\n    adc_params[10] = adc_params[10] & 0xfffffffcU | 1;\n    return 0;\n  }\n  adc_params[10] = adc_params[10] | 0x10;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003bd8": "initialize_adc_08003bd8",
                "param_1": "adc_params",
                "iVar1": "conversion_result",
                "uVar2": "var1",
                "uVar3": "var2",
                "HAL_ADC_MspInit": "initialize_adc_peripheral",
                "ADC_ConversionStop_Disable": "stop_disable_conversion",
                "param_1[10]": "adc_params[10]",
                "param_1[0xb]": "adc_params[11]",
                "param_1[1]": "adc_params[1]",
                "param_1[7]": "adc_params[7]",
                "param_1[3]": "adc_params[3]",
                "param_1[2]": "adc_params[2]",
                "param_1[5]": "adc_params[5]",
                "param_1[6]": "adc_params[6]",
                "param_1[4]": "adc_params[4]"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c",
                "FUN_08006ca8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003bd8": {
                    "1": "perform_adc_conversion",
                    "18": "initialize_adc",
                    "6": "improve_adc_conversion",
                    "2": "configure_adc"
                },
                "param_1": {
                    "1": "parameters",
                    "4": "adc_parameters",
                    "6": "adc_config",
                    "11": "adc_params",
                    "2": "input_array",
                    "5": "adc_data"
                },
                "iVar1": {
                    "4": "stop_result",
                    "1": "conversion_stop_result",
                    "6": "result",
                    "2": "stop_disable_result",
                    "13": "conversion_result"
                },
                "uVar2": {
                    "1": "combined_values_1",
                    "2": "flags",
                    "3": "bitwise_or_result",
                    "4": "var1"
                },
                "uVar3": {
                    "1": "conditional_value",
                    "4": "var2",
                    "2": "config_flags"
                },
                "HAL_ADC_MspInit": {
                    "1": "initialize_adc_msp",
                    "2": "initialize_adc_peripherals",
                    "4": "initialize_adc_peripheral"
                },
                "ADC_ConversionStop_Disable": {
                    "1": "stop_disable_adc_conversion",
                    "2": "stop_disable_conversion"
                },
                "param_1[10]": {
                    "1": "adc_params[10]"
                },
                "param_1[0xb]": {
                    "1": "adc_params[11]"
                },
                "param_1[1]": {
                    "1": "adc_params[1]"
                },
                "param_1[7]": {
                    "1": "adc_params[7]"
                },
                "param_1[3]": {
                    "1": "adc_params[3]"
                },
                "param_1[2]": {
                    "1": "adc_params[2]"
                },
                "param_1[5]": {
                    "1": "adc_params[5]"
                },
                "param_1[6]": {
                    "1": "adc_params[6]"
                },
                "param_1[4]": {
                    "1": "adc_params[4]"
                },
                "*(undefined *)(param_1 + 9)": {
                    "1": "adc_flag"
                },
                "*(uint *)(*param_1 + 4)": {
                    "1": "register_value_1",
                    "2": "adc_register_1"
                },
                "*(uint *)(*param_1 + 8)": {
                    "2": "adc_register_2",
                    "1": "peripheral_reg2"
                },
                "*(uint *)(*param_1 + 0x2c)": {
                    "1": "peripheral_reg3",
                    "2": "adc_register_3"
                },
                "param_1[10] & 0x10U": {
                    "1": "bitwise_and_result_1"
                },
                "param_1[10] & 0xffffeefdU | 2": {
                    "1": "bitwise_or_result_1"
                },
                "param_1[1] | param_1[7] | param_1[3] << 1": {
                    "1": "bitwise_or_result_2"
                },
                "param_1[2] == 0x100": {
                    "1": "check_condition_1"
                },
                "param_1[2] == 1": {
                    "1": "check_condition_2"
                },
                "param_1[5] == 1": {
                    "1": "check_condition_3"
                },
                "param_1[3] == 0": {
                    "1": "check_condition_4"
                },
                "param_1[6] + -1": {
                    "1": "value_2"
                },
                "param_1[4] + -1": {
                    "1": "value_3"
                },
                "uVar2 != (*(uint *)(*param_1 + 8) & 0xff1f0efe)": {
                    "1": "check_condition_5"
                },
                "param_1[10] & 0xffffffedU | 0x10": {
                    "1": "bitwise_or_result_3"
                },
                "param_1[10] & 0xfffffffcU | 1": {
                    "1": "bitwise_or_result_4"
                },
                "FUN_08006ca8": {
                    "1": "configure_adc"
                },
                "*param_1": {
                    "1": "adc_params_addr"
                },
                "FUN_08003b8c": {
                    "1": "stop_disable"
                }
            }
        },
        "FUN_08003ce8": {
            "entrypoint": "0x08003ce8",
            "current_name": "initialize_adc_08003ce8",
            "code": "\nint initialize_adc_08003ce8(int *adc_params)\n\n{\n  int result;\n  \n  if (adc_params == (int *)0x0) {\n    result = 1;\n  }\n  else {\n    adc_config[10] = adc_config[10] | 2;\n    result = disable_adc_conversion_stop();\n    if (result == 0) {\n      *(undefined4 *)*adc_params = 0xffffffe0;\n      *(uint *)(*adc_params + 4) = *(uint *)(*adc_params + 4) & 0xff3f0000;\n      *(uint *)(*adc_params + 8) = *(uint *)(*adc_params + 8) & 0xff0106f0;\n      *(uint *)(*adc_params + 0xc) = *(uint *)(*adc_params + 0xc) & 0xff000000;\n      *(uint *)(*adc_params + 0x10) = *(uint *)(*adc_params + 0x10) & 0xc0000000;\n      *(uint *)(*adc_params + 0x14) = *(uint *)(*adc_params + 0x14) & 0xfffff000;\n      *(uint *)(*adc_params + 0x18) = *(uint *)(*adc_params + 0x18) & 0xfffff000;\n      *(uint *)(*adc_params + 0x1c) = *(uint *)(*adc_params + 0x1c) & 0xfffff000;\n      *(uint *)(*adc_params + 0x20) = *(uint *)(*adc_params + 0x20) & 0xfffff000;\n      *(uint *)(*adc_params + 0x24) = *(uint *)(*adc_params + 0x24) & 0xfffff000;\n      *(uint *)(*adc_params + 0x28) = *(uint *)(*adc_params + 0x28) & 0xfffff000;\n      *(uint *)(*adc_params + 0x2c) = *(uint *)(*adc_params + 0x2c) & 0xff000000;\n      *(uint *)(*adc_params + 0x2c) = *(uint *)(*adc_params + 0x2c) & 0xff000000;\n      *(uint *)(*adc_params + 0x30) = *(uint *)(*adc_params + 0x30) & 0xc0000000;\n      *(uint *)(*adc_params + 0x34) = *(uint *)(*adc_params + 0x34) & 0xc0000000;\n      *(uint *)(*adc_params + 0x38) = *(uint *)(*adc_params + 0x38) & 0xffc00000;\n      *(uint *)(*adc_params + 0x38) = *(uint *)(*adc_params + 0x38) & 0xffc00000;\n      deinitialize_adc_08003ce8(adc_params);\n      adc_config[0xb] = 0;\n      adc_config[10] = 0;\n    }\n    *(undefined *)(adc_params + 9) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "param_1": "adc_params",
                "iVar1": "result",
                "ADC_ConversionStop_Disable": "disable_adc_conversion_stop",
                "HAL_ADC_MspDeInit": "deinitialize_adc",
                "FUN_08003ce8": "initialize_adc_08003ce8",
                "param_1[10]": "adc_config[10]",
                "param_1[0xb]": "adc_config[0xb]"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08006d24",
                "FUN_08003b8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "1": "adc_configuration",
                    "6": "adc_config",
                    "11": "adc_params",
                    "3": "adc_settings",
                    "2": "input_array"
                },
                "iVar1": {
                    "27": "result",
                    "3": "return_value",
                    "1": "stop_result"
                },
                "ADC_ConversionStop_Disable": {
                    "2": "stop_adc_conversion",
                    "1": "is_conversion_stop_disabled",
                    "3": "disable_adc_conversion_stop"
                },
                "HAL_ADC_MspDeInit": {
                    "1": "deinitialize_adchal",
                    "13": "deinitialize_adc"
                },
                "FUN_08003ce8": {
                    "1": "reset_adc_config",
                    "3": "disable_adc_conversion",
                    "6": "initialize_adc",
                    "2": "clear_adc_configuration",
                    "4": "reset_adc"
                },
                "FUN_08006d24": {
                    "1": "reset_array",
                    "2": "stop_adc_conversion_disable",
                    "3": "hal_adc_msp_de_init"
                },
                "FUN_08003b8c": {
                    "1": "configure_adchal",
                    "7": "adc_conversion_stop_disable"
                },
                "param_1[10]": {
                    "1": "adc_config[10]"
                },
                "param_1[0xb]": {
                    "1": "adc_config[0xb]"
                }
            }
        },
        "FUN_08003de4": {
            "entrypoint": "0x08003de4",
            "current_name": "handle_adc_conversion_08003de4",
            "code": "\nint handle_adc_conversion_08003de4(int data)\n\n{\n  int result;\n  \n  if (*(char *)(data + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(data + 0x24) = 1;\n  result = disable_adc_conversion_stop();\n  if (result == 0) {\n    *(uint *)(data + 0x28) = *(uint *)(data + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(data + 0x24) = 0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003de4": "handle_adc_conversion_08003de4",
                "param_1": "data",
                "iVar1": "result",
                "ADC_ConversionStop_Disable": "disable_adc_conversion_stop"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003de4": {
                    "1": "process_adc_stop",
                    "2": "convert_adc",
                    "3": "handle_adc_conversion"
                },
                "param_1": {
                    "4": "input",
                    "2": "conversion_data",
                    "1": "instance_ptr"
                },
                "iVar1": {
                    "3": "conversion_status",
                    "1": "conversion_stop_result",
                    "4": "stop_status",
                    "9": "result",
                    "8": "conversion_result"
                },
                "ADC_ConversionStop_Disable": {
                    "2": "disable_conversion_stop",
                    "1": "stop_conversion_and_disable",
                    "3": "disable_adc_conversion_stop"
                },
                "*(char *)(param_1 + 0x24)": {
                    "1": "status_check",
                    "2": "is_enabled"
                },
                "*(undefined *)(param_1 + 0x24)": {
                    "1": "flag_value",
                    "2": "status"
                },
                "*(uint *)(param_1 + 0x28)": {
                    "3": "register_value",
                    "2": "data_value",
                    "1": "config"
                },
                "FUN_08003b8c": {
                    "1": "get_conversion_status"
                },
                "F0": {
                    "1": "check_and_update_bit"
                }
            }
        },
        "FUN_08003e20": {
            "entrypoint": "0x08003e20",
            "current_name": "initialize_adc_08003e20",
            "code": "\nint initialize_adc_08003e20(int *adc_data)\n\n{\n  uint periph_clk_freq;\n  int stop_result;\n  uint periph_clk_freq;\n  int start_time;\n  int current_time;\n  int loop_counter;\n  \n  if (*(char *)(adc_data + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(adc_data + 9) = 1;\n  stop_result = ADC_ConversionStop_Disable();\n  if (stop_result == 0) {\n    adc_data[10] = adc_data[10] & 0xffffeefdU | 2;\n    periph_clk_freq = DAT_20000018;\n    periph_clk_freq = HAL_RCCEx_GetPeriphCLKFreq(2);\n    for (loop_counter = periph_clk_freq / periph_clk_freq << 1; loop_counter != 0; loop_counter = loop_counter + -1) {\n    }\n    ADC_Enable(adc_data);\n    *(uint *)(*adc_data + 8) = *(uint *)(*adc_data + 8) | 8;\n    start_time = HAL_GetTick();\n    while (current_time = *adc_data, (*(uint *)(current_time + 8) & 8) != 0) {\n      current_time = HAL_GetTick();\n      if (10 < (uint)(current_time - start_time)) {\n        adc_data[10] = adc_data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(adc_data + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(current_time + 8) = *(uint *)(current_time + 8) | 4;\n    start_time = HAL_GetTick();\n    while ((*(uint *)(*adc_data + 8) & 4) != 0) {\n      current_time = HAL_GetTick();\n      if (10 < (uint)(current_time - start_time)) {\n        adc_data[10] = adc_data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(adc_data + 9) = 0;\n        return 1;\n      }\n    }\n    adc_data[10] = adc_data[10] & 0xfffffffcU | 1;\n  }\n  *(undefined *)(adc_data + 9) = 0;\n  return stop_result;\n}\n\n",
            "renaming": {
                "param_1": "adc_data",
                "uVar1": "periph_clk_freq",
                "iVar2": "stop_result",
                "uVar3": "periph_clk_freq",
                "iVar4": "start_time",
                "iVar5": "current_time",
                "local_14": "loop_counter",
                "FUN_08003e20": "initialize_adc_08003e20"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08005bb8",
                "FUN_08003a20",
                "FUN_08003b8c",
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "1": "adc_control",
                    "2": "adc_parameters",
                    "3": "input_array",
                    "8": "adc_params",
                    "10": "adc_data"
                },
                "uVar1": {
                    "1": "uart_baud_rate",
                    "9": "periph_clk_freq",
                    "2": "peripheral_freq"
                },
                "iVar2": {
                    "1": "adc_disable_result",
                    "2": "status",
                    "10": "stop_result",
                    "3": "result",
                    "5": "stop_disable_result"
                },
                "uVar3": {
                    "1": "temp_var2",
                    "2": "sys_clk_freq",
                    "3": "periph_freq"
                },
                "iVar4": {
                    "8": "start_tick",
                    "1": "start_ticks",
                    "14": "start_time",
                    "5": "tick_start"
                },
                "iVar5": {
                    "3": "tick_current",
                    "1": "param_1_val",
                    "9": "current_tick",
                    "14": "current_time"
                },
                "local_14": {
                    "18": "loop_counter",
                    "2": "iterations",
                    "6": "loop_count",
                    "1": "loop_iterations",
                    "4": "iteration_count"
                },
                "FUN_08003e20": {
                    "1": "convert_adc_to_voltage",
                    "16": "initialize_adc",
                    "5": "perform_adc_conversion"
                },
                "FUN_08005bb8": {
                    "1": "check_adc_conversion"
                },
                "FUN_08003a20": {
                    "1": "enable_adc"
                },
                "FUN_08003b8c": {
                    "1": "disable_adc_conversion_stop"
                },
                "FUN_08003760": {
                    "1": "get_system_tick"
                }
            }
        },
        "FUN_08003f0c": {
            "entrypoint": "0x08003f0c",
            "current_name": "update_register_value_08003f0c",
            "code": "\n\n\nvoid update_register_value_08003f0c(uint input_value)\n\n{\n  tempDATtempe000ed0c = (input_value & 7) << 8 | tempDATtempe000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f0c": "update_register_value_08003f0c",
                "param_1": "input_value",
                "_": "temp"
            },
            "calling": [
                "FUN_08003724",
                "FUN_08008f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003f0c": {
                    "1": "set_special_bits",
                    "2": "update_data_register",
                    "4": "update_configuration",
                    "8": "update_register_value",
                    "3": "update_data"
                },
                "param_1": {
                    "2": "data",
                    "4": "value",
                    "13": "input_value",
                    "1": "configuration"
                },
                "_DAT_e000ed0c": {
                    "1": "data_storage",
                    "2": "config_value",
                    "3": "existing_value",
                    "9": "register_value"
                },
                "_": {
                    "1": "temp"
                },
                "newData": {
                    "1": "new_data"
                },
                "<original_function_name>": {
                    "1": "update_configuration"
                }
            }
        },
        "FUN_08003f30": {
            "entrypoint": "0x08003f30",
            "current_name": "update_memory_08003f30",
            "code": "\n\n\nvoid update_memory_08003f30(uint address,uint mask,uint mask)\n\n{\n  uint shifted_bits;\n  uint remaining_bits;\n  \n  shifted_bits = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  remaining_bits = 7 - shifted_bits;\n  if (3 < remaining_bits) {\n    remaining_bits = 4;\n  }\n  if (shifted_bits + 4 < 7) {\n    shifted_bits = 0;\n  }\n  else {\n    shifted_bits = shifted_bits - 3;\n  }\n  shifted_bits = (mask & (1 << (remaining_bits & 0xff)) - 1U) << (shifted_bits & 0xff) |\n          (1 << (shifted_bits & 0xff)) - 1U & mask;\n  if ((int)address < 0) {\n    *(result_byte *)((address & 0xf) + 0xe000ed14) = (result_byte)(shifted_bits << 4);\n  }\n  else {\n    *(result_byte *)(address + 0xe000e400) = (result_byte)(shifted_bits << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f30": "update_memory_08003f30",
                "param_1": "address",
                "param_2": "mask",
                "param_3": "mask",
                "uVar1": "shifted_bits",
                "uVar2": "remaining_bits",
                "char": "result_byte"
            },
            "calling": [
                "FUN_080077b0",
                "FUN_08007648",
                "FUN_0800863c",
                "FUN_080036d8",
                "FUN_080035b8",
                "FUN_08008694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003f30": {
                    "1": "update_memory_address",
                    "2": "update_char_value",
                    "7": "update_memory",
                    "5": "update_character"
                },
                "param_1": {
                    "13": "address",
                    "1": "char_index",
                    "4": "character_index",
                    "3": "offset"
                },
                "param_2": {
                    "1": "input_data",
                    "7": "mask",
                    "3": "value",
                    "2": "source_value",
                    "5": "bit_mask"
                },
                "param_3": {
                    "2": "target_value",
                    "7": "mask",
                    "6": "data",
                    "1": "store_mask"
                },
                "uVar1": {
                    "1": "result",
                    "7": "shift_amount",
                    "2": "updated_value"
                },
                "uVar2": {
                    "1": "remaining_shifts",
                    "2": "shift_amount",
                    "8": "remaining_bits"
                },
                "uVar3": {
                    "1": "temp1"
                },
                "uVar4": {
                    "1": "temp2"
                },
                "uVar1_orig": {
                    "1": "u_var1"
                },
                "uVar2_orig": {
                    "1": "u_var2"
                },
                "param_2 & (1 << (uVar2 & 0xff)) - 1U": {
                    "1": "masked_data"
                },
                "(1 << (uVar1 & 0xff)) - 1U & param_3": {
                    "1": "updated_masked_data"
                },
                "*(char *)((param_1 & 0xf) + 0xe000ed14)": {
                    "1": "updated_data1"
                },
                "*(char *)(param_1 + 0xe000e400)": {
                    "1": "updated_data2"
                },
                "(char)(uVar1 << 4)": {
                    "1": "shifted_value"
                },
                "char": {
                    "1": "result_byte"
                },
                "uVar1 & 0xff": {
                    "1": "shifted_by"
                },
                "uVar2 & 0xff": {
                    "1": "count_minus_shift"
                },
                "uVar1 << 4": {
                    "1": "updated_data"
                },
                "(param_1 & 0xf) + 0xe000ed14": {
                    "1": "character_address_1"
                },
                "param_1 + 0xe000e400": {
                    "1": "character_address_2"
                }
            }
        },
        "FUN_08003f94": {
            "entrypoint": "0x08003f94",
            "current_name": "set_bit_in_array_08003f94",
            "code": "\nvoid set_bit_in_array_08003f94(uint bit_index)\n\n{\n  if (-1 < signed_input) {\n    *(int *)((bit_index >> 5) * 4 + -0x1fff1f00) = 1 << (bit_index & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f94": "set_bit_in_array_08003f94",
                "param_1": "bit_index",
                "(int)param_1": "signed_input"
            },
            "calling": [
                "FUN_080077b0",
                "FUN_08007648",
                "FUN_0800863c",
                "FUN_08008694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003f94": {
                    "7": "set_bit",
                    "1": "set_bit_in_integer",
                    "4": "set_bit_in_memory",
                    "5": "set_bit_at_index",
                    "9": "set_bit_in_array"
                },
                "param_1": {
                    "4": "bit_position",
                    "12": "bit_index",
                    "11": "index"
                },
                "*(int *)((param_1 >> 5) * 4 + -0x1fff1f00)": {
                    "1": "memory_address",
                    "2": "array",
                    "3": "bit_array"
                },
                "1 << (param_1 & 0x1f)": {
                    "3": "bit_mask"
                },
                "param_1 & 0x1f": {
                    "1": "bit_position",
                    "2": "bit_index"
                },
                "(int)param_1": {
                    "1": "signed_input"
                },
                "(param_1 >> 5)": {
                    "1": "shifted_input"
                },
                "(param_1 & 0x1f)": {
                    "1": "bit_position"
                },
                "param_1 >> 5": {
                    "1": "shifted_input"
                }
            }
        },
        "FUN_08003fb0": {
            "entrypoint": "0x08003fb0",
            "current_name": "set_bit_in_memory_08003fb0",
            "code": "\nvoid set_bit_in_memory_08003fb0(uint bit_index)\n\n{\n  if (-1 < signed_index) {\n    *(int *)(((bit_index >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (bit_index & 0x1f);\n    sync_data(0xf);\n    sync_instructions(0xf);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fb0": "set_bit_in_memory_08003fb0",
                "param_1": "bit_index",
                "(int)param_1": "signed_index",
                "DataSynchronizationBarrier": "sync_data",
                "InstructionSynchronizationBarrier": "sync_instructions"
            },
            "calling": [
                "FUN_080076e0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003fb0": {
                    "1": "update_bitwise_flag",
                    "3": "set_bit",
                    "14": "set_bit_in_memory",
                    "2": "write_bit_to_memory"
                },
                "param_1": {
                    "1": "position",
                    "11": "bit_position",
                    "16": "bit_index",
                    "2": "index"
                },
                "(int)param_1": {
                    "1": "signed_index"
                },
                "(param_1 >> 5)": {
                    "1": "divided_index"
                },
                "(param_1 >> 5) + 0x20": {
                    "1": "modified_index"
                },
                "(param_1 >> 5) * 4": {
                    "1": "offset"
                },
                "(param_1 & 0x1f)": {
                    "1": "bit_shift"
                },
                "*(int *)(((param_1 >> 5) + 0x20) * 4 + -0x1fff1f00)": {
                    "1": "bitmask_ptr"
                },
                "1 << (param_1 & 0x1f)": {
                    "1": "bit_shift_result"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "param_2": {
                    "1": "value"
                },
                "DataSynchronizationBarrier": {
                    "1": "sync_data"
                },
                "InstructionSynchronizationBarrier": {
                    "1": "perform_instr_sync_barrier"
                }
            }
        },
        "FUN_08003fd8": {
            "entrypoint": "0x08003fd8",
            "current_name": "initialize_memory_08003fd8",
            "code": "\n\n\nundefined4 initialize_memory_08003fd8(int value)\n\n{\n  if (value - 1U < 0x1000000) {\n    _DAT_e000e014 = value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003fd8": "initialize_memory_08003fd8",
                "param_1": "value"
            },
            "calling": [
                "FUN_080036d8",
                "FUN_080035b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003fd8": {
                    "2": "initialize_data",
                    "1": "initialize_register",
                    "3": "initialize_values",
                    "8": "initialize_memory"
                },
                "param_1": {
                    "1": "device_count",
                    "6": "input_value",
                    "14": "value",
                    "3": "size"
                },
                "_DAT_e000e014": {
                    "1": "initialized_value",
                    "2": "base_address",
                    "4": "updated_value",
                    "3": "memory_address"
                },
                "DAT_e000ed23": {
                    "1": "register2",
                    "8": "status",
                    "2": "memory_value",
                    "5": "constant_value"
                },
                "_DAT_e000e018": {
                    "1": "unused_register",
                    "2": "offset",
                    "9": "counter"
                },
                "_DAT_e000e010": {
                    "12": "flag",
                    "1": "limit",
                    "2": "flag_value"
                },
                "param_1 - 1U": {
                    "1": "adjusted_input"
                }
            }
        },
        "FUN_08004004": {
            "entrypoint": "0x08004004",
            "current_name": "set_bit_in_memory_08004004",
            "code": "\nvoid set_bit_in_memory_08004004(uint bit_index)\n\n{\n  if (-1 < (int)bit_index) {\n    *(int *)(((bit_index >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (bit_index & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004004": "set_bit_in_memory_08004004",
                "param_1": "bit_index"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004004": {
                    "4": "set_bit",
                    "1": "set_bit_at_position",
                    "12": "set_bit_in_memory",
                    "3": "set_bit_value",
                    "11": "set_bit_in_array"
                },
                "param_1": {
                    "7": "bit_position",
                    "15": "bit_index",
                    "1": "input_value",
                    "8": "index"
                },
                "*(int *)(((param_1 >> 5) + 0x60) * 4 + -0x1fff1f00)": {
                    "1": "memory_location"
                },
                "1 << (param_1 & 0x1f)": {
                    "2": "bit_value",
                    "1": "bit_mask"
                },
                "param_1 >> 5": {
                    "1": "divided_by32"
                },
                "param_1 & 0x1f": {
                    "1": "remainder"
                },
                "param_2": {
                    "1": "array"
                },
                "param_3": {
                    "1": "size"
                },
                "param_4": {
                    "1": "bit"
                },
                "param_5": {
                    "1": "value"
                },
                "(param_1 >> 5) + 0x60": {
                    "1": "byte_address"
                },
                "-0x1fff1f00": {
                    "1": "base_address"
                }
            }
        },
        "FUN_08004024": {
            "entrypoint": "0x08004024",
            "current_name": "update_control_register_08004024",
            "code": "\n\n\nvoid update_control_register_08004024(int flag)\n\n{\n  if (flag != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004024": "update_control_register_08004024",
                "param_1": "flag"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004024": {
                    "2": "set_e000e010_bit",
                    "1": "set_register_flag",
                    "4": "update_flag"
                },
                "param_1": {
                    "6": "flag_value",
                    "1": "param",
                    "3": "input_value",
                    "5": "status"
                },
                "_DAT_e000e010": {
                    "2": "status_register",
                    "1": "status_flags",
                    "4": "control_register",
                    "5": "flag_register",
                    "8": "register_value"
                }
            }
        },
        "FUN_08004044": {
            "entrypoint": "0x08004044",
            "current_name": "FUNC_08004044",
            "code": "\nvoid FUNC_08004044(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004044": "FUNC_08004044"
            },
            "calling": [
                "FUN_08004046"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004046": {
            "entrypoint": "0x08004046",
            "current_name": "initialize_systick_08004046",
            "code": "\nvoid initialize_systick_08004046(void)\n\n{\n  handle_systick_interrupt();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004046": "initialize_systick_08004046",
                "HAL_SYSTICK_Callback": "handle_systick_interrupt"
            },
            "calling": [
                "FUN_08007246"
            ],
            "called": [
                "FUN_08004044"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004046": {
                    "1": "update_system_tick_callback",
                    "2": "handle_sys_tick_interrupt",
                    "3": "update_sys_tick_callback",
                    "7": "initialize_systick"
                },
                "FUNC_08004044": {
                    "1": "initialize_hal",
                    "2": "perform_system_callback"
                },
                "HAL_SYSTICK_Callback": {
                    "3": "handle_systick_interrupt",
                    "1": "handle_systick"
                }
            }
        },
        "FUN_08004050": {
            "entrypoint": "0x08004050",
            "current_name": "initialize_data_08004050",
            "code": "\n\n\nundefined4 initialize_data_08004050(uint **data)\n\n{\n  uint *current_setting;\n  \n  if (*(char *)((int)data + 0x21) != '\\x02') {\n    error_code = (uint *)0x4;\n    return 1;\n  }\n  **data = **data & 0xfffffff1;\n  **data = **data & 0xfffffffe;\n  current_setting = *data;\n  if (current_setting == (uint *)0x40020008) {\n    tempDATtemp40020004 = 1;\n  }\n  else if (current_setting == (uint *)0x4002001c) {\n    tempDATtemp40020004 = 0x10;\n  }\n  else if (current_setting == (uint *)0x40020030) {\n    tempDATtemp40020004 = 0x100;\n  }\n  else if (current_setting == (uint *)0x40020044) {\n    tempDATtemp40020004 = 0x1000;\n  }\n  else if (current_setting == (uint *)0x40020058) {\n    tempDATtemp40020004 = 0x10000;\n  }\n  else if (current_setting == (uint *)0x4002006c) {\n    tempDATtemp40020004 = 0x100000;\n  }\n  else {\n    tempDATtemp40020004 = 0x1000000;\n  }\n  *(undefined *)((int)data + 0x21) = 1;\n  *(undefined *)(data + 8) = 0;\n  if (callback_function != (uint *)0x0) {\n    (*(function_to_execute *)callback_function)();\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004050": "initialize_data_08004050",
                "param_1": "data",
                "puVar1": "current_setting",
                "code": "function_to_execute",
                "param_1[0xe]": "error_code",
                "param_1[0xd]": "callback_function",
                "_": "temp"
            },
            "calling": [
                "FUN_080069ec",
                "FUN_08004f3c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004050": {
                    "1": "configure_peripheral",
                    "3": "initialize_settings",
                    "5": "set_configuration",
                    "4": "configure_settings",
                    "9": "initialize_data"
                },
                "param_1": {
                    "8": "data",
                    "5": "config",
                    "1": "configuration",
                    "2": "options",
                    "7": "settings"
                },
                "puVar1": {
                    "1": "param",
                    "2": "current_value",
                    "5": "current_setting",
                    "4": "current_config"
                },
                "_DAT_40020004": {
                    "1": "configuration_status",
                    "2": "configuration",
                    "3": "result"
                },
                "PTR_08004050": {
                    "1": "callback_function"
                },
                "code": {
                    "1": "callback_function"
                },
                "*(char *)((int)config + 0x21)": {
                    "1": "config_type"
                },
                "param_1[0xe]": {
                    "1": "status",
                    "3": "error_flag",
                    "4": "error_code"
                },
                "**param_1": {
                    "1": "config_value_ptr",
                    "3": "data_value",
                    "2": "config_value"
                },
                "*(undefined *)((int)config + 0x21)": {
                    "1": "is_configured"
                },
                "*(undefined *)(config + 8)": {
                    "1": "reserved"
                },
                "param_1[0xd]": {
                    "1": "callback_func",
                    "2": "callback",
                    "5": "callback_function"
                },
                "(*(code *)param_1[0xd])()": {
                    "1": "execute_callback"
                },
                "PTR_FUN_08004050": {
                    "1": "callback_function"
                },
                "*(char *)((int)param_1 + 0x21)": {
                    "3": "flag",
                    "1": "mode"
                },
                "*(undefined *)((int)param_1 + 0x21)": {
                    "1": "changed_mode",
                    "2": "flag_value"
                },
                "*(undefined *)(param_1 + 8)": {
                    "1": "is_processed"
                },
                "param_1 + 8": {
                    "2": "result"
                },
                "(code *)param_1[0xd]": {
                    "1": "code_func"
                },
                "PTR_40020004": {
                    "1": "data_register"
                },
                "PTR_40020008": {
                    "1": "setting1"
                },
                "PTR_4002001c": {
                    "1": "setting2"
                },
                "PTR_40020030": {
                    "1": "setting3"
                },
                "PTR_40020044": {
                    "1": "setting4"
                },
                "PTR_40020058": {
                    "1": "setting5"
                },
                "PTR_4002006c": {
                    "1": "setting6"
                },
                "PTR_FUN_08004abc": {
                    "1": "callback_function"
                },
                "_": {
                    "1": "temp"
                },
                "(int)param_1 + 0x21": {
                    "1": "flag_address"
                },
                "(uint *)0x40020008": {
                    "1": "case1"
                },
                "(uint *)0x4002001c": {
                    "1": "case2"
                },
                "(uint *)0x40020030": {
                    "1": "case3"
                },
                "(uint *)0x40020044": {
                    "1": "case4"
                },
                "(uint *)0x40020058": {
                    "1": "case5"
                },
                "(uint *)0x4002006c": {
                    "1": "case6"
                }
            }
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "update_registers_080040e8",
            "code": "\n\n\nvoid update_registers_080040e8(uint *output_params,uint *flags)\n\n{\n  uint *output_ptr;\n  uint bit_mask;\n  uint bit_check;\n  uint bit_index;\n  uint opcode;\n  uint new_value;\n  int bit_shift;\n  int register_index;\n  \n  new_value = 0;\n  bit_index = 0;\n  do {\n    if (0xf < bit_index) {\n      return;\n    }\n    bit_mask = 1 << (bit_index & 0xff);\n    bit_check = *flags & bit_mask;\n    if (bit_mask == bit_check) {\n      opcode = flags[1];\n      if (opcode == 0x12) {\n        new_value = flags[3] + 0xc;\n      }\n      else if (opcode < 0x13) {\n        if (opcode == 2) {\n          new_value = flags[3] + 8;\n        }\n        else if (opcode < 3) {\n          if (opcode == 0) goto LAB_0800423a;\n          if (opcode == 1) {\n            new_value = flags[3];\n          }\n        }\n        else if (opcode == 3) {\n          new_value = 0;\n        }\n        else if (opcode == 0x11) {\n          new_value = flags[3] + 4;\n        }\n      }\n      else if (opcode == 0x10210000) {\nLAB_0800423a:\n        if (flags[2] == 0) {\n          new_value = 4;\n        }\n        else if (flags[2] == 1) {\n          output_params[4] = bit_mask;\n          new_value = 8;\n        }\n        else {\n          output_params[5] = bit_mask;\n          new_value = 8;\n        }\n      }\n      else if (opcode < 0x10210001) {\n        if ((opcode == 0x10110000) || (opcode == 0x10120000)) goto LAB_0800423a;\n      }\n      else if ((opcode == 0x10310000) || ((opcode == 0x10320000 || (opcode == 0x10220000))))\n      goto LAB_0800423a;\n      bit_mask = bit_index;\n      output_ptr = output_params;\n      if (0xff < bit_check) {\n        bit_mask = bit_index - 8;\n        output_ptr = output_params + 1;\n      }\n      *output_ptr = *output_ptr & ~(0xf << (bit_mask << 2 & 0xff)) | new_value << (bit_mask << 2 & 0xff);\n      if ((flags[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        bit_shift = (bit_index & 3) << 2;\n        if (output_params == (uint *)0x40010800) {\n          register_index = 0;\n        }\n        else if (output_params == (uint *)0x40010c00) {\n          register_index = 1;\n        }\n        else if (output_params == (uint *)0x40011000) {\n          register_index = 2;\n        }\n        else if (output_params == (uint *)0x40011400) {\n          register_index = 3;\n        }\n        else {\n          register_index = 4;\n        }\n        *(uint *)(((bit_index >> 2) + 2) * 4 + 0x40010000) =\n             *(uint *)(((bit_index >> 2) + 2) * 4 + 0x40010000) & ~(0xf << bit_shift) | register_index << bit_shift;\n        if ((flags[1] & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~bit_check;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | bit_check;\n        }\n        if ((flags[1] & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~bit_check;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | bit_check;\n        }\n        if ((flags[1] & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~bit_check;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | bit_check;\n        }\n        if ((flags[1] & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~bit_check;\n        }\n        else {\n          _DAT_4001040c = bit_check | _DAT_4001040c;\n        }\n      }\n    }\n    bit_index = bit_index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080040e8": "update_registers_080040e8",
                "param_1": "output_params",
                "param_2": "flags",
                "uVar2": "bit_mask",
                "uVar3": "bit_check",
                "uVar4": "bit_index",
                "uVar5": "opcode",
                "uVar6": "new_value",
                "iVar7": "bit_shift",
                "iVar8": "register_index",
                "puVar1": "output_ptr"
            },
            "calling": [
                "FUN_08008078",
                "FUN_080077b0",
                "FUN_08006e68",
                "FUN_08006ca8",
                "FUN_08007258"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080040e8": {
                    "1": "update_param_1_based_on_param_2",
                    "3": "update_parameters",
                    "6": "update_registers",
                    "2": "update_values"
                },
                "param_1": {
                    "3": "output_values",
                    "1": "memory_map1",
                    "2": "register1",
                    "4": "output_params"
                },
                "param_2": {
                    "1": "flags_list",
                    "4": "flags",
                    "2": "input_flags",
                    "3": "input_values"
                },
                "uVar2": {
                    "2": "flag_bit",
                    "1": "current_bit",
                    "23": "bit_mask"
                },
                "uVar3": {
                    "2": "input_bit",
                    "1": "flag_value",
                    "4": "bit_result",
                    "5": "bit_check",
                    "3": "flag_check"
                },
                "uVar4": {
                    "3": "loop_counter",
                    "1": "iteration_count",
                    "12": "bit_index",
                    "4": "index"
                },
                "uVar5": {
                    "2": "condition_check",
                    "1": "operation_code",
                    "9": "opcode",
                    "3": "value"
                },
                "uVar6": {
                    "1": "register_value",
                    "13": "new_value",
                    "2": "config_value",
                    "9": "updated_value"
                },
                "iVar7": {
                    "2": "shift_offset",
                    "1": "index_shift",
                    "4": "shift",
                    "5": "bit_shift",
                    "3": "shift_amount1"
                },
                "iVar8": {
                    "1": "register_offset",
                    "2": "index2",
                    "3": "index",
                    "16": "register_index"
                },
                "puVar1": {
                    "4": "output_ptr",
                    "1": "mapped_var1",
                    "2": "updated_register"
                },
                "_DAT_40021018": {
                    "1": "gpio_registers"
                },
                "_DAT_40010400": {
                    "1": "gpio_out_clear_register"
                },
                "_DAT_40010404": {
                    "1": "register2"
                },
                "_DAT_40010408": {
                    "1": "gpio_out_enable_register"
                },
                "_DAT_4001040c": {
                    "1": "register4"
                }
            }
        },
        "FUN_080042d4": {
            "entrypoint": "0x080042d4",
            "current_name": "check_bit_080042d4",
            "code": "\nundefined4 check_bit_080042d4(int input_value,uint bit_mask)\n\n{\n  if ((bit_mask & *(uint *)(input_value + 8)) == 0) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080042d4": "check_bit_080042d4",
                "param_1": "input_value",
                "param_2": "bit_mask"
            },
            "calling": [
                "FUN_080072f0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080042d4": {
                    "2": "check_param",
                    "1": "check_bitwise_condition",
                    "20": "check_bit"
                },
                "param_1": {
                    "5": "address",
                    "1": "input_address",
                    "2": "flag_address",
                    "9": "input_value",
                    "4": "value",
                    "3": "data_address"
                },
                "param_2": {
                    "2": "flags",
                    "4": "mask",
                    "1": "flag_value",
                    "8": "bitmask",
                    "9": "bit_mask"
                },
                "param_1+8": {
                    "1": "data_ptr_offset"
                },
                "*(uint *)(param_1 + 8)": {
                    "2": "data_value",
                    "1": "bit_mask_value"
                },
                "result": {
                    "1": "bit_check_result"
                },
                "param_2 & *(uint *)(param_1 + 8)": {
                    "1": "param_2_bitwise_and_bitmask",
                    "2": "result"
                },
                "return 0": {
                    "2": "return_false",
                    "1": "return_bit_is_not_set"
                },
                "return 1": {
                    "1": "return_bit_is_set",
                    "2": "return_true"
                },
                "param_1 + 8": {
                    "1": "bitmask_address"
                },
                "return_0": {
                    "1": "matched_flags"
                },
                "return_1": {
                    "1": "unmatched_flags"
                },
                "0": {
                    "1": "not_found"
                },
                "1": {
                    "1": "found"
                }
            }
        },
        "FUN_080042e2": {
            "entrypoint": "0x080042e2",
            "current_name": "set_param_value_080042e2",
            "code": "\nvoid set_param_value_080042e2(int object_address,int value,int is_shifted)\n\n{\n  if (is_shifted == 0) {\n    *(int *)(object_address + 0x10) = value << 0x10;\n    return;\n  }\n  *(int *)(object_address + 0x10) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042e2": "set_param_value_080042e2",
                "param_1": "object_address",
                "param_2": "value",
                "param_3": "is_shifted"
            },
            "calling": [
                "FUN_080072d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080042e2": {
                    "2": "update_parameter_value",
                    "4": "set_param",
                    "1": "update_data",
                    "3": "update_param",
                    "14": "set_param_value"
                },
                "param_1": {
                    "1": "base_addr",
                    "2": "data_address",
                    "13": "object_address",
                    "7": "base_address"
                },
                "param_2": {
                    "17": "value",
                    "14": "new_value"
                },
                "param_3": {
                    "1": "is_shift",
                    "3": "use_shift",
                    "21": "is_shifted"
                },
                "0x10": {
                    "1": "offset"
                },
                "*(int *)(param_1 + 0x10)": {
                    "1": "obj_value",
                    "2": "object_value",
                    "3": "object_property"
                },
                "objectAddress + 0x10": {
                    "2": "property_address"
                },
                "param_2 << 0x10": {
                    "2": "shifted_value"
                },
                "param_1 + 0x10": {
                    "1": "property_address"
                },
                "param_1+0x10": {
                    "1": "object_pointer_offset"
                },
                "PTR_": {
                    "1": ""
                },
                "DAT_": {
                    "1": ""
                },
                "original_variable_name_1": {
                    "1": "offset"
                },
                "original_variable_name_2": {
                    "1": "shifted_value"
                },
                "new_variable_name_1": {
                    "1": "<new_variable_name_1>"
                },
                "new_variable_name_2": {
                    "1": "<new_variable_name_2>"
                },
                "new_variable_name_n": {
                    "1": "<new_variable_name_n>"
                },
                "new_value": {
                    "1": "updated_value"
                },
                "value": {
                    "1": "new_value"
                }
            }
        },
        "FUN_080042f0": {
            "entrypoint": "0x080042f0",
            "current_name": "update_gpio_exti_080042f0",
            "code": "\n\n\nvoid update_gpio_exti_080042f0(uint interrupt_mask)\n\n{\n  if ((_DAT_40010414 & interrupt_mask) != 0) {\n    _DAT_40010414 = interrupt_mask;\n    handle_gpio_interrupt();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042f0": "update_gpio_exti_080042f0",
                "param_1": "interrupt_mask",
                "HAL_GPIO_EXTI_Callback": "handle_gpio_interrupt"
            },
            "calling": [],
            "called": [
                "FUN_08009094"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080042f0": {
                    "1": "process_interrupt",
                    "5": "update_gpio_exti",
                    "2": "check_and_update_gpio",
                    "4": "update_gpio_interrupt"
                },
                "param_1": {
                    "4": "interrupt_mask",
                    "3": "value",
                    "1": "input_flags"
                },
                "_DAT_40010414": {
                    "1": "gpio_exti_data",
                    "2": "gpio_state",
                    "4": "gpio_register"
                },
                "HAL_GPIO_EXTI_Callback": {
                    "1": "handle_external_interrupt",
                    "5": "handle_gpio_interrupt",
                    "3": "handle_gpio_exti",
                    "4": "handle_gpio_exti_callback"
                },
                "FUN_08009094": {
                    "1": "initialize_gpio"
                }
            }
        },
        "FUN_0800430c": {
            "entrypoint": "0x0800430c",
            "current_name": "update_status_0800430c",
            "code": "\nundefined4 update_status_0800430c(int *data)\n\n{\n  if (*(char *)((int)data + 0x3e) == '@') {\n    if (flag == 0) {\n      *(uint *)(*data + 0x10) = value & 0xfe;\n    }\n    else {\n      *(uint *)(*data + 0x10) = value & 0xffU | 1;\n    }\n  }\n  else if (param_value_3 == 0x4000) {\n    if (*(char *)((int)data + 0x3d) == '!') {\n      *(uint *)(*data + 0x10) = value & 0xfe;\n    }\n    else {\n      *(uint *)(*data + 0x10) = value & 0xffU | 1;\n    }\n  }\n  else if (flag == 0) {\n    *(uint *)(*data + 0x10) = (uint)(value << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (flag == 1) {\n    *(uint *)(*data + 0x10) = (uint)(value << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800430c": "update_status_0800430c",
                "param_1": "data",
                "param_1[0x14]": "flag",
                "param_1[0x11]": "value",
                "param_1[4]": "param_value_3"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800430c": {
                    "1": "set_permissions",
                    "2": "update_param_value",
                    "3": "update_status"
                },
                "param_1": {
                    "3": "status",
                    "1": "flag_data",
                    "2": "permissions"
                },
                "*(char *)((int)param_1 + 0x3e)": {
                    "1": "char_value_1",
                    "4": "first_char",
                    "2": "char1"
                },
                "param_1[0x14]": {
                    "3": "flag",
                    "1": "param_value_1",
                    "2": "condition"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "flag_result",
                    "7": "result"
                },
                "param_1[0x11]": {
                    "1": "status_value",
                    "5": "value"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "char_value_2",
                    "2": "char_value2",
                    "4": "second_char"
                },
                "param_1[4]": {
                    "1": "param_1_index_4"
                },
                "*param_1": {
                    "1": "ptr",
                    "2": "flag_pointer"
                },
                "data": {
                    "2": "data"
                },
                "data[0x14]": {
                    "1": "flag"
                },
                "data[0x11]": {
                    "1": "value"
                },
                "0xfe": {
                    "1": "mask1"
                },
                "0xffU": {
                    "1": "0b11111111"
                },
                "0x4000": {
                    "1": "16384"
                },
                "0xf1": {
                    "1": "mask4"
                },
                "0xffU | 1": {
                    "1": "mask2"
                },
                "(uint)(param_1[0x11] << 0x10) >> 0x17 & 6 | 0xf0": {
                    "1": "permission_value_transformed"
                },
                "(uint)(param_1[0x11] << 0x10) >> 0x17 & 6 | 0xf1": {
                    "1": "computed_value2"
                },
                "0xf0": {
                    "1": "mask3"
                },
                "0": {
                    "1": "zero"
                },
                "*(char*)((int)param_1 + 0x3e)": {
                    "1": "char_at_index3_e"
                },
                "*(char*)((int)param_1 + 0x3d)": {
                    "1": "char_at_index3_d"
                },
                "*(uint*)(*param_1 + 0x10)": {
                    "1": "output_value"
                },
                "permissions[0x14]": {
                    "1": "permissions_count"
                },
                "permissions[0x11]": {
                    "1": "permission_value"
                },
                "permissions + 0x10": {
                    "1": "permission_address"
                },
                "param_1[0x14] == 1": {
                    "1": "is_flag_set"
                },
                "param_1[0x11] & 0xfe": {
                    "1": "value_and_mask1"
                },
                "param_1[0x11] & 0xffU | 1": {
                    "1": "value_and_mask2"
                },
                "[int]param_1+0x3e": {
                    "1": "config_data[0x3e]"
                },
                "[int]param_1+0x3d": {
                    "1": "config_data[0x3d]"
                },
                "[int]param_1+0x10": {
                    "1": "config_data[0x10]"
                },
                "input_array": {
                    "1": "input_array"
                },
                "input[0x14]": {
                    "1": "flag"
                },
                "input[0x11]": {
                    "1": "value"
                },
                "*(uint *)(*input + 0x10)": {
                    "1": "result"
                },
                "*(char *)((int)input + 0x3e)": {
                    "1": "char1"
                },
                "*(char *)((int)input + 0x3d)": {
                    "1": "char2"
                }
            }
        },
        "FUN_08004396": {
            "entrypoint": "0x08004396",
            "current_name": "set_param_value_08004396",
            "code": "\nundefined4 set_param_value_08004396(int *input_array)\n\n{\n  *(uint *)(*input_array + 0x10) = input_array[17] & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004396": "set_param_value_08004396",
                "param_1": "input_array",
                "param_1[0x11]": "input_array[17]"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004396": {
                    "1": "set_value_in_memory",
                    "2": "write_byte_to_memory",
                    "3": "set_byte_value"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "data",
                    "4": "param_array",
                    "7": "input_array",
                    "3": "memory_address"
                },
                "param_1[0x11]": {
                    "1": "array_value_at_index",
                    "2": "param_array[17]",
                    "3": "input_array[17]"
                },
                "*(uint *)(*memoryAddress + 0x10)": {
                    "1": "memory_location"
                },
                "0xff": {
                    "1": "mask"
                },
                "param_array": {
                    "1": "param_array"
                },
                "PTR_fun": {
                    "1": "param_array"
                },
                "DAT_0011": {
                    "1": "data_value"
                },
                "PTR_fun+0x10": {
                    "1": "param_value"
                },
                "data_value": {
                    "1": "data_value"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "memory_address_to_set",
                    "2": "destination",
                    "5": "target_address"
                },
                "param_1[0x11] & 0xff": {
                    "1": "byte_value",
                    "2": "masked_value"
                },
                "*param_1": {
                    "1": "input_array[0]"
                },
                "0x10": {
                    "1": "offset"
                },
                "valueToWrite & 0xff": {
                    "1": "new_value"
                },
                "& 0xff": {
                    "1": "bitwise_and_mask"
                },
                "*(uint *)(input_array + 16)": {
                    "1": "set_lower_byte_value"
                },
                "*param_1 + 0x10": {
                    "1": "address_plus_offset"
                }
            }
        },
        "FUN_080043a2": {
            "entrypoint": "0x080043a2",
            "current_name": "update_flags_080043a2",
            "code": "\nundefined4 update_flags_080043a2(uint **parameters)\n\n{\n  uint *flag_ptr;\n  \n  flag_ptr = parameters[11];\n  if ((*(char *)((int)parameters + 0x3d) == '\\\"') &&\n     ((parameters[20] != (uint *)0x0 || (*(char *)((int)parameters + 0x3e) != '@')))) {\n    if ((parameters[20] == (uint *)0x0) && (parameters[4] == (uint *)0xc000)) {\n      **parameters = **parameters | 0x100;\n      parameters[20] = (uint *)((int)parameters[20] + 1);\n    }\n    else {\n      if (*(short *)((int)parameters + 0x2a) == 0) {\n        **parameters = **parameters | 0x200;\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 1) {\n        if (flag_ptr == (uint *)0xffff0000) {\n          **parameters = **parameters & 0xfffffbff;\n          flag_ptr = *parameters;\n          if ((pointer_value_2 & 0x800) == 0) {\n            *flag_ptr = *flag_ptr | 0x200;\n          }\n          else {\n            *flag_ptr = *flag_ptr & 0xfffffbff;\n          }\n        }\n        else if (((flag_ptr == (uint *)0x4) || (flag_ptr == (uint *)0x8)) ||\n                (pointer_value2 == (uint *)0x12)) {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x200;\n        }\n        else if (parameters[11] == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 2) {\n        if (parameters[11] == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters | 0x800;\n          **parameters = **parameters & 0xfffffbff;\n        }\n        flag_ptr = *parameters;\n        if ((pointer_value_2 & 0x800) != 0) {\n          pointer_value_2 = pointer_value_2 | 0x1000;\n        }\n      }\n      else {\n        **parameters = **parameters | 0x400;\n        flag_ptr = *parameters;\n        if ((pointer_value_2 & 0x800) != 0) {\n          pointer_value_2 = pointer_value_2 | 0x1000;\n        }\n      }\n      parameters[20] = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080043a2": "update_flags_080043a2",
                "param_1": "parameters",
                "puVar1": "flag_ptr",
                "param_1[0x14]": "parameters[20]",
                "param_1[4]": "parameters[4]",
                "param_1[0xc]": "pointer_value2",
                "param_1[0xb]": "parameters[11]",
                "puVar1[1]": "pointer_value_2"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080043a2": {
                    "2": "update_flag",
                    "1": "update_flags_and_values",
                    "16": "update_flags",
                    "3": "process_flags"
                },
                "param_1": {
                    "9": "params",
                    "1": "input_data",
                    "14": "parameters",
                    "2": "param"
                },
                "puVar1": {
                    "1": "current_value",
                    "3": "value",
                    "2": "ptr1"
                },
                "char_1": {
                    "1": "quote_char"
                },
                "char_2": {
                    "1": "at_char"
                },
                "short_1": {
                    "1": "short_value"
                },
                "uint_1": {
                    "1": "flag_value"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "4": "char_value1",
                    "1": "char_check1",
                    "3": "char1",
                    "2": "char_value_1"
                },
                "param_1[0x14]": {
                    "1": "array_value3",
                    "3": "parameters[20]",
                    "2": "ptr_value"
                },
                "*(char *)((int)param_1 + 0x3e)": {
                    "1": "character_check2",
                    "3": "char2",
                    "4": "char_value2",
                    "2": "char_value_2"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "9": "short_value",
                    "3": "short_val",
                    "1": "param_1[42]",
                    "2": "short_check"
                },
                "**param_1": {
                    "1": "param_1_value"
                },
                "param_1[4]": {
                    "1": "pointer_value",
                    "2": "param4",
                    "3": "parameters[4]"
                },
                "c000": {
                    "1": "pointer_constant"
                },
                "param_1[0xc]": {
                    "1": "flags[12]"
                },
                "12": {
                    "1": "pointer_constant2"
                },
                "0xffff0000": {
                    "1": "pointer_constant3",
                    "2": "special_value1"
                },
                "0x4": {
                    "1": "special_value3"
                },
                "0x8": {
                    "1": "pointer_constant5"
                },
                "0x2": {
                    "1": "pointer_constant6"
                },
                "param_1[0xb]": {
                    "1": "flags[11]",
                    "3": "parameters[11]"
                },
                "*param_1": {
                    "1": "pointer_value"
                },
                "(*(short *)((int)param_1 + 0x2a)": {
                    "1": "short_value"
                },
                "uint *0xffff0000": {
                    "1": "const_value1"
                },
                "uint *0x4": {
                    "1": "const_value2"
                },
                "uint *0x8": {
                    "1": "const_value3"
                },
                "uint *0x12": {
                    "1": "const_value4"
                },
                "uint *puVar1": {
                    "1": "pointer_value"
                },
                "puVar1[1]": {
                    "1": "value_pointer[1]"
                },
                "0xb": {
                    "1": "param_index11"
                },
                "0x3d": {
                    "1": "char_index1"
                },
                "0x14": {
                    "1": "param_index14"
                },
                "0x3e": {
                    "1": "char_index2"
                },
                "4": {
                    "1": "param_index4"
                },
                "0xc000": {
                    "1": "constant_value"
                },
                "0x2a": {
                    "1": "short_index"
                },
                "0xc": {
                    "1": "param_index_c"
                },
                "0x12": {
                    "1": "constant_value2"
                },
                "*(char *)((int)parameters + 0x3d)": {
                    "1": "char_value"
                },
                "*(char *)((int)parameters + 0x3e)": {
                    "1": "second_char_value"
                },
                "*(short *)((int)parameters + 0x2a)": {
                    "1": "short_value"
                },
                "0x100": {
                    "1": "flag1"
                },
                "0x200": {
                    "1": "flag2"
                },
                "0xfffffbff": {
                    "1": "special_value2"
                },
                "0x400": {
                    "1": "flag3"
                },
                "0x800": {
                    "1": "flag4"
                },
                "0x1000": {
                    "1": "flag5"
                },
                "*puVar1": {
                    "1": "flag[0]"
                },
                "(int)param_1[0x14] + 1": {
                    "1": "updated_value_14"
                },
                "(int)param_1[0x14] + 1)": {
                    "1": "incremented_value"
                }
            }
        },
        "FUN_0800457c": {
            "entrypoint": "0x0800457c",
            "current_name": "update_data_0800457c",
            "code": "\nundefined4 update_data_0800457c(integer *array)\n\n{\n  byte *byte_pointer;\n  \n  if (*(short *)((integer)array + 0x2a) != 0) {\n    byte_pointer = (byte *)byte_array_index;\n    byte_array_index = (integer)(byte_pointer + 1);\n    *(uinteger *)(*array + 0x10) = (uinteger)*byte_pointer;\n    *(short *)((integer)array + 0x2a) = *(short *)((integer)array + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800457c": "update_data_0800457c",
                "param_1": "array",
                "pbVar1": "byte_pointer",
                "int": "integer",
                "param_1[9]": "byte_array_index"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800457c": {
                    "2": "decode_and_update",
                    "1": "update_array_pointer",
                    "4": "update_data",
                    "3": "update_value"
                },
                "param_1": {
                    "5": "array",
                    "1": "parameters",
                    "2": "param",
                    "3": "buffer"
                },
                "pbVar1": {
                    "8": "byte_ptr",
                    "1": "byte_data",
                    "14": "byte_pointer",
                    "4": "current_byte"
                },
                "*param_1": {
                    "1": "pointer"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "3": "short_value",
                    "2": "short_val",
                    "1": "counter"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "uint_val",
                    "2": "target_address"
                },
                "int": {
                    "1": "integer"
                },
                "ptr": {
                    "1": "pointer"
                },
                "param_1[9]": {
                    "1": "array_ptr",
                    "2": "byte_array_index"
                },
                "(byte *)param_1[9]": {
                    "1": "array_data",
                    "2": "byte_array"
                },
                "(int)(pbVar1 + 1)": {
                    "1": "incremented_byte_pointer"
                },
                "(uint)*pbVar1": {
                    "1": "byte_value"
                },
                "*(short *)((int)param_1 + 0x2a) + -1": {
                    "1": "decremented_short_value"
                }
            }
        },
        "FUN_0800459c": {
            "entrypoint": "0x0800459c",
            "current_name": "update_value_in_array_0800459c",
            "code": "\nundefined4 update_value_in_array_0800459c(int *array)\n\n{\n  undefined *ptr;\n  \n  if (*(short *)((int)array + 0x2a) != 0) {\n    ptr = (undefined *)character_pointer;\n    character_pointer = (int)(ptr + 1);\n    *ptr = (char)*(undefined4 *)(*array + 0x10);\n    *(short *)((int)array + 0x2a) = *(short *)((int)array + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800459c": "update_value_in_array_0800459c",
                "param_1": "array",
                "puVar1": "ptr",
                "param_1[9]": "character_pointer"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800459c": {
                    "1": "update_character",
                    "2": "update_param_value",
                    "3": "update_parameter_value"
                },
                "param_1": {
                    "4": "data",
                    "10": "array",
                    "1": "char_array",
                    "3": "parameter_array",
                    "2": "param"
                },
                "puVar1": {
                    "1": "temp_pointer",
                    "2": "ptr_to_char",
                    "3": "ptr"
                },
                "*puVar1": {
                    "1": "element_value",
                    "2": "value_to_update"
                },
                "(undefined4 *)(*param_1 + 0x10)": {
                    "1": "new_value"
                },
                "(int)param_1 + 0x2a": {
                    "1": "count_addr"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "2": "array_length",
                    "1": "short_variable",
                    "4": "count"
                },
                "*(short *)((int)param_1 + 0x2a) - 1": {
                    "1": "decremented_condition"
                },
                "*(short *)((int)param_1 + 0x2a) + -1": {
                    "1": "updated_array_length"
                },
                "param_1[9]": {
                    "1": "array_item"
                },
                "(int)(puVar1 + 1)": {
                    "1": "updated_character_pointer"
                },
                "(char)*(undefined4 *)(*param_1 + 0x10)": {
                    "1": "character_value"
                },
                "(undefined *)param_1[9]": {
                    "1": "next_element_ptr"
                },
                "*(undefined *)((undefined *)param_1[9] + 1)": {
                    "1": "next_element_value"
                },
                "*(undefined4 *)(*param_1 + 0x10)": {
                    "2": "char_value",
                    "1": "source_value",
                    "4": "value"
                },
                "*param_1": {
                    "1": "array"
                }
            }
        },
        "FUN_080045bc": {
            "entrypoint": "0x080045bc",
            "current_name": "FUNC_080045bc",
            "code": "\nvoid FUNC_080045bc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080045bc": "FUNC_080045bc"
            },
            "calling": [
                "FUN_080045c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080045c0": {
            "entrypoint": "0x080045c0",
            "current_name": "FUNC_080045c0",
            "code": "\nundefined4 FUNC_080045c0(uint **param_1)\n\n{\n  bool bVar1;\n  uint uVar2;\n  uint *puVar3;\n  uint uVar4;\n  \n  if (param_1 == (uint **)0x0) {\n    return 1;\n  }\n  if (*(char *)((int)param_1 + 0x3d) == '\\0') {\n    *(undefined *)(param_1 + 0xf) = 0;\n    HAL_I2C_MspInit();\n  }\n  *(undefined *)((int)param_1 + 0x3d) = 0x24;\n  **param_1 = **param_1 & 0xfffffffe;\n  uVar2 = HAL_RCC_GetPCLK1Freq();\n  if (param_1[1] < (uint *)0x186a1) {\n    if (uVar2 < 2000000) {\n      bVar1 = true;\n    }\n    else {\n      bVar1 = false;\n    }\n  }\n  else {\n    bVar1 = uVar2 < 4000000;\n  }\n  if (bVar1) {\n    return 1;\n  }\n  uVar4 = uVar2 / 1000000;\n  (*param_1)[1] = uVar4;\n  if ((uint *)0x186a0 < param_1[1]) {\n    uVar4 = (uVar4 * 300) / 1000;\n  }\n  (*param_1)[8] = uVar4 + 1;\n  puVar3 = param_1[1];\n  if (puVar3 < (uint *)0x186a1) {\n    uVar2 = (uVar2 - 1) / (uint)((int)puVar3 << 1) + 1 & 0xfff;\n    if (uVar2 < 4) {\n      uVar2 = 4;\n    }\n  }\n  else {\n    if (param_1[2] == (uint *)0x0) {\n      uVar4 = (uVar2 - 1) / (uint)((int)puVar3 * 3);\n    }\n    else {\n      uVar4 = (uVar2 - 1) / (uint)((int)puVar3 * 0x19);\n    }\n    if ((uVar4 + 1 & 0xfff) == 0) {\n      uVar2 = 1;\n    }\n    else if (param_1[2] == (uint *)0x0) {\n      uVar2 = (uVar2 - 1) / (uint)((int)puVar3 * 3) + 1 & 0xfff | 0x8000;\n    }\n    else {\n      uVar2 = (uVar2 - 1) / (uint)((int)puVar3 * 0x19) + 1 & 0xfff | 0xc000;\n    }\n  }\n  (*param_1)[7] = uVar2;\n  **param_1 = (uint)param_1[7] | (uint)param_1[8];\n  (*param_1)[2] = (uint)param_1[4] | (uint)param_1[3];\n  (*param_1)[3] = (uint)param_1[5] | (uint)param_1[6];\n  **param_1 = **param_1 | 1;\n  param_1[0x10] = (uint *)0x0;\n  *(undefined *)((int)param_1 + 0x3d) = 0x20;\n  param_1[0xc] = (uint *)0x0;\n  *(undefined *)((int)param_1 + 0x3e) = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080045c0": "FUNC_080045c0"
            },
            "calling": [
                "FUN_080077b0"
            ],
            "called": [
                "FUN_08005a28",
                "FUN_080045bc"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004728": {
            "entrypoint": "0x08004728",
            "current_name": "process_data_08004728",
            "code": "\nundefined4 process_data_08004728(uint **data,uint *param1,uint *param2,undefined2 param3)\n\n{\n  undefined4 result;\n  uint *ptr;\n  int counter;\n  \n  if (*(char *)((int)data + 0x3d) == ' ') {\n    counter = (DAT_20000018 / 25000) * 0x19;\n    do {\n      if (counter == 0) {\n        data[0xc] = (uint *)0x0;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        *(undefined *)(data + 0xf) = 0;\n        return 3;\n      }\n      ptr = *data;\n      counter = counter + -1;\n    } while ((ptr[6] & 2) != 0);\n    if (*(char *)(data + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(data + 0xf) = 1;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **data = **data & 0xfffff7ff;\n      *(undefined *)((int)data + 0x3d) = 0x21;\n      *(undefined *)((int)data + 0x3e) = 0x10;\n      result = 0;\n      pointer1 = (uint *)0x0;\n      data_param3 = param2;\n      *(undefined2 *)((int)data + 0x2a) = param3;\n      pointer2 = (uint *)0xffff0000;\n      *(undefined2 *)(data + 10) = *(undefined2 *)((int)data + 0x2a);\n      data_param1 = param1;\n      **data = **data | 0x100;\n      *(undefined *)(data + 0xf) = 0;\n      (*data)[1] = (*data)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004728": "process_data_08004728",
                "param_1": "data",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "uVar1": "result",
                "puVar2": "ptr",
                "local_c": "counter",
                "param_1[0x10]": "pointer1",
                "param_1[9]": "data_param3",
                "param_1[0xb]": "pointer2",
                "param_1[0x11]": "data_param1"
            },
            "calling": [
                "FUN_08007e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004728": {
                    "11": "process_data",
                    "1": "extract_and_process_data",
                    "2": "update_status"
                },
                "param_1": {
                    "2": "data_array",
                    "10": "data",
                    "1": "flag_array",
                    "3": "data_ptr"
                },
                "param_2": {
                    "4": "param_ptr1",
                    "1": "array1",
                    "6": "param1",
                    "2": "input1"
                },
                "param_3": {
                    "1": "result_array",
                    "2": "data2",
                    "6": "param2",
                    "5": "param_ptr2"
                },
                "param_4": {
                    "3": "status",
                    "1": "input_param",
                    "5": "param3",
                    "2": "value"
                },
                "uVar1": {
                    "17": "result",
                    "14": "return_value"
                },
                "puVar2": {
                    "1": "ptr_data",
                    "3": "current_ptr",
                    "2": "ptr_var",
                    "17": "ptr"
                },
                "local_c": {
                    "1": "loop_counter",
                    "4": "count",
                    "26": "counter"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "special_char"
                },
                "DAT_20000018": {
                    "1": "constant1"
                },
                "*(char *)(param_1 + 0xf)": {
                    "1": "flag"
                },
                "*puVar2": {
                    "1": "value_ptr"
                },
                "**param_1": {
                    "1": "double_ptr"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "char_ptr1"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "byte_ptr"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "byte_ptr2"
                },
                "param_1[0x10]": {
                    "1": "pointer1"
                },
                "param_1[9]": {
                    "1": "data_param3"
                },
                "*(undefined2 *)((int)param_1 + 0x2a)": {
                    "1": "status_flag"
                },
                "param_1[0xb]": {
                    "1": "pointer2"
                },
                "*(undefined2 *)(param_1 + 10)": {
                    "1": "status_flag2"
                },
                "param_1[0x11]": {
                    "1": "data_param1"
                },
                "(*param_1)[1]": {
                    "1": "value_ptr2"
                }
            }
        },
        "FUN_080047f4": {
            "entrypoint": "0x080047f4",
            "current_name": "process_data_080047f4",
            "code": "\nundefined4 process_data_080047f4(uint **data,uint *param2,uint *param3,undefined2 flag)\n\n{\n  undefined4 result;\n  uint *ptr;\n  int counter;\n  \n  if (*(char *)((int)data + 0x3d) == ' ') {\n    counter = (DAT_20000018 / 25000) * 0x19;\n    do {\n      if (counter == 0) {\n        ptr_var1 = (uint *)0x0;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        *(undefined *)(data + 0xf) = 0;\n        return 3;\n      }\n      ptr = *data;\n      counter = counter + -1;\n    } while ((ptr[6] & 2) != 0);\n    if (*(char *)(data + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(data + 0xf) = 1;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **data = **data & 0xfffff7ff;\n      *(undefined *)((int)data + 0x3d) = 0x22;\n      *(undefined *)((int)data + 0x3e) = 0x10;\n      result = 0;\n      ptr_var2 = (uint *)0x0;\n      ptr_var3 = param3;\n      *(undefined2 *)((int)data + 0x2a) = flag;\n      ptr_var4 = (uint *)0xffff0000;\n      *(undefined2 *)(data + 10) = *(undefined2 *)((int)data + 0x2a);\n      ptr_var5 = param2;\n      **data = **data | 0x400;\n      **data = **data | 0x100;\n      *(undefined *)(data + 0xf) = 0;\n      (*data)[1] = (*data)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080047f4": "process_data_080047f4",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "flag",
                "uVar1": "result",
                "puVar2": "ptr",
                "local_c": "counter",
                "param_1[0xc]": "ptr_var1",
                "param_1[0x10]": "ptr_var2",
                "param_1[9]": "ptr_var3",
                "param_1[0xb]": "ptr_var4",
                "param_1[0x11]": "ptr_var5"
            },
            "calling": [
                "FUN_08007f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080047f4": {
                    "2": "update_parameters",
                    "13": "process_data",
                    "6": "process_parameters",
                    "1": "check_and_update_flag"
                },
                "param_1": {
                    "8": "data",
                    "1": "input_ptr",
                    "2": "input_array",
                    "4": "parameters"
                },
                "param_2": {
                    "1": "input_a",
                    "3": "input1",
                    "2": "param_a",
                    "4": "data1",
                    "5": "param2"
                },
                "param_3": {
                    "1": "result",
                    "3": "param2",
                    "5": "param3",
                    "2": "param_b",
                    "4": "data2"
                },
                "param_4": {
                    "9": "flag",
                    "1": "param",
                    "6": "param4",
                    "3": "param3",
                    "2": "param_c"
                },
                "uVar1": {
                    "2": "status",
                    "18": "result",
                    "11": "return_value"
                },
                "puVar2": {
                    "1": "current_value",
                    "2": "temp_ptr",
                    "15": "ptr",
                    "4": "ptr_var"
                },
                "local_c": {
                    "3": "loop_counter",
                    "2": "count",
                    "26": "counter"
                },
                "**param_1": {
                    "1": "value1"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "char_var1"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "char_var2"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "char_var3"
                },
                "param_1[0xc]": {
                    "1": "ptr_var1"
                },
                "param_1[0x10]": {
                    "1": "ptr_var2"
                },
                "param_1[9]": {
                    "1": "ptr_var3"
                },
                "param_1[0xb]": {
                    "1": "ptr_var4"
                },
                "*(undefined2 *)(param_1 + 10)": {
                    "1": "unknown_var1"
                },
                "param_1[0x11]": {
                    "1": "ptr_var5"
                },
                "(*param_1)[1]": {
                    "1": "value2"
                }
            }
        },
        "FUN_080048c8": {
            "entrypoint": "0x080048c8",
            "current_name": "process_data_080048c8",
            "code": "\nundefined4 process_data_080048c8(uint **input_data,uint *param_ptr,int size,uint *output)\n\n{\n  undefined4 result;\n  uint *ptr;\n  \n  if (*(char *)((int)input_data + 0x3d) == '(') {\n    if (param_ptr == (uint *)0x0) {\n      result = 1;\n    }\n    else if (size == 0) {\n      result = 1;\n    }\n    else if (*(char *)(input_data + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(input_data + 0xf) = 1;\n      ptr = *input_data;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **input_data = **input_data & 0xfffff7ff;\n      *(undefined *)((int)input_data + 0x3d) = 0x29;\n      *(undefined *)((int)input_data + 0x3e) = 0x20;\n      result = 0;\n      var1 = (uint *)0x0;\n      var2 = param_ptr;\n      *(short *)((int)input_data + 0x2a) = (short)size;\n      var3 = output;\n      *(undefined2 *)(input_data + 10) = *(undefined2 *)((int)input_data + 0x2a);\n      *(undefined *)(input_data + 0xf) = 0;\n      (*input_data)[1] = (*input_data)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080048c8": "process_data_080048c8",
                "param_1": "input_data",
                "param_2": "param_ptr",
                "param_3": "size",
                "param_4": "output",
                "uVar1": "result",
                "puVar2": "ptr",
                "param_1[0x10]": "var1",
                "param_1[9]": "var2",
                "param_1[0xb]": "var3"
            },
            "calling": [
                "FUN_08007fa0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080048c8": {
                    "1": "check_input_and_update_data",
                    "3": "validate_input",
                    "4": "process_data",
                    "2": "process_params"
                },
                "param_1": {
                    "3": "param_array",
                    "1": "variable1",
                    "2": "input_array",
                    "4": "parameters",
                    "5": "input_data"
                },
                "param_2": {
                    "3": "input1",
                    "1": "variable2",
                    "2": "param2_ptr"
                },
                "param_3": {
                    "1": "array_length",
                    "2": "param2",
                    "3": "length",
                    "6": "size"
                },
                "param_4": {
                    "1": "pointer3",
                    "3": "output",
                    "2": "output_param"
                },
                "uVar1": {
                    "1": "result_code",
                    "24": "result",
                    "4": "return_value"
                },
                "puVar2": {
                    "1": "ptr_data",
                    "2": "ptr_var",
                    "11": "ptr"
                },
                "*param_1": {
                    "1": "val1"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "character_check"
                },
                "*(char *)(param_1 + 0xf)": {
                    "2": "flag",
                    "1": "flag_check"
                },
                "(*puVar2 & 1)": {
                    "1": "bit_check"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "char3",
                    "2": "char1"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "2": "char2",
                    "1": "undefined_at_offset_0x3e"
                },
                "param_1[0x10]": {
                    "1": "pointer1"
                },
                "param_1[9]": {
                    "1": "var2"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "2": "short_value",
                    "1": "short_at_offset_0x2a"
                },
                "param_1[0xb]": {
                    "1": "arg3_ptr"
                },
                "(*param_1)[1]": {
                    "1": "val2"
                },
                "*puVar2 & 1": {
                    "1": "bit_mask"
                },
                "**param_1": {
                    "1": "value"
                },
                "*(undefined2 *)((int)param_1 + 0x2a)": {
                    "1": "value2"
                },
                "(int)param_1 + 0x3d": {
                    "1": "char_offset"
                },
                "*(char *)((int)param_1 + 0x3e)": {
                    "1": "char_val"
                },
                "param_1 + 0xf": {
                    "1": "flag_ptr"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "flag_val"
                },
                "param_1 + 10": {
                    "1": "value_ptr"
                },
                "*(undefined2 *)(param_1 + 10)": {
                    "1": "undefined2_at_offset_10"
                }
            }
        },
        "FUN_08004954": {
            "entrypoint": "0x08004954",
            "current_name": "process_input_08004954",
            "code": "\nundefined4 process_input_08004954(uint **param_array,uint *data_ptr,int size,uint *output_array)\n\n{\n  undefined4 result;\n  uint *ptr;\n  \n  if (*(char *)((int)param_array + 0x3d) == '(') {\n    if (data_ptr == (uint *)0x0) {\n      result = 1;\n    }\n    else if (size == 0) {\n      result = 1;\n    }\n    else if (*(char *)(param_array + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(param_array + 0xf) = 1;\n      ptr = *param_array;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **param_array = **param_array & 0xfffff7ff;\n      *(undefined *)((int)param_array + 0x3d) = 0x2a;\n      *(undefined *)((int)param_array + 0x3e) = 0x20;\n      result = 0;\n      param_array_index0 = (uint *)0x0;\n      param_array_index9 = data_ptr;\n      *(short *)((int)param_array + 0x2a) = short_param3;\n      param_array_index11 = output_array;\n      *(undefined2 *)(param_array + 10) = *(undefined2 *)((int)param_array + 0x2a);\n      *(undefined *)(param_array + 0xf) = 0;\n      (*param_array)[1] = (*param_array)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004954": "process_input_08004954",
                "param_1": "param_array",
                "param_2": "data_ptr",
                "param_3": "size",
                "param_4": "output_array",
                "uVar1": "result",
                "puVar2": "ptr",
                "param_1[0x10]": "param_array_index0",
                "param_1[9]": "param_array_index9",
                "(short)param_3": "short_param3",
                "param_1[0xb]": "param_array_index11"
            },
            "calling": [
                "FUN_08007fa0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004954": {
                    "1": "check_parameter_validity",
                    "5": "process_input",
                    "2": "parse_params",
                    "3": "process_parameters"
                },
                "param_1": {
                    "1": "params_ptr",
                    "2": "input_ptr"
                },
                "param_2": {
                    "1": "input_param",
                    "4": "data",
                    "5": "data_ptr",
                    "3": "input_array",
                    "2": "input_data"
                },
                "param_3": {
                    "2": "array_length",
                    "4": "length",
                    "1": "value2",
                    "3": "count",
                    "7": "size"
                },
                "param_4": {
                    "3": "result",
                    "2": "output_buffer",
                    "1": "payload"
                },
                "uVar1": {
                    "3": "status",
                    "20": "result",
                    "6": "return_value"
                },
                "puVar2": {
                    "1": "ptr_options",
                    "4": "pointer",
                    "2": "ptr_to_data",
                    "8": "ptr"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "char_value1"
                },
                "*(char *)(param_1 + 0xf)": {
                    "1": "char2",
                    "2": "char_value2"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "undefined_value1"
                },
                "(uint *)0x0": {
                    "1": "null"
                },
                "(char *)((int)param_1 + 0x3d)": {
                    "1": "first_char_ptr"
                },
                "(char *)(param_1 + 0xf)": {
                    "1": "flag_ptr"
                },
                "(undefined *)(param_1 + 0xf)": {
                    "1": "flag_ptr"
                },
                "*param_1": {
                    "1": "val1"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "second_char"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "third_char"
                },
                "param_1[0x10]": {
                    "1": "param_array_index0"
                },
                "param_1[9]": {
                    "1": "array_pointer2"
                },
                "(short)param_3": {
                    "1": "short_param3"
                },
                "param_1[0xb]": {
                    "1": "output_data_ptr"
                },
                "(undefined2 *)(param_1 + 10)": {
                    "1": "short_flag_ptr"
                },
                "(*param_1)[1]": {
                    "1": "ptr_value1"
                },
                "[int]param_1": {
                    "1": "flag_char"
                },
                "[int]param_1 + 0x3d": {
                    "1": "flag_char_value"
                },
                "param_1 + 0xf": {
                    "1": "flag_byte"
                },
                "*param_1 & 1": {
                    "1": "is_flag_bit_set"
                },
                "**param_1": {
                    "1": "original_flag_value"
                },
                "*(ushort *)((int)param_1 + 0x2a)": {
                    "1": "short_value"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "2": "short_value"
                },
                "*(undefined2 *)(param_1 + 10)": {
                    "1": "value6"
                },
                "arrayPtr": {
                    "1": "array_ptr"
                },
                "paramPtr": {
                    "1": "param_ptr"
                },
                "size": {
                    "1": "size"
                },
                "dataPtr": {
                    "1": "data_ptr"
                },
                "param_2 == (uint *)0x0": {
                    "1": "input_data_is_null"
                },
                "param_3 == 0": {
                    "1": "length_is_zero"
                },
                "*puVar2 & 1 == 0": {
                    "1": "first_flag_check"
                },
                "**param_1 & 0xfffff7ff": {
                    "1": "value2"
                },
                "*puVar2": {
                    "1": "ptr_value"
                },
                "<original_function_name>": {
                    "1": "validate_input"
                },
                "<param_1>": {
                    "1": "config_array"
                },
                "<param_2>": {
                    "1": "param_ptr"
                },
                "<param_3>": {
                    "1": "param_size"
                },
                "<param_4>": {
                    "1": "param_data"
                },
                "<puVar2>": {
                    "1": "array_ptr"
                },
                "_arg1": {
                    "1": "ptr_param_1"
                },
                "_arg10": {
                    "1": "short_arg"
                },
                "_arg2": {
                    "1": "ptr_result"
                },
                "_arg3": {
                    "1": "ptr_result_ptr"
                }
            }
        },
        "FUN_080049e0": {
            "entrypoint": "0x080049e0",
            "current_name": "initialize_data_080049e0",
            "code": "\nundefined4 initialize_data_080049e0(uint **flags)\n\n{\n  uint *ptr;\n  \n  if (*(char *)(flags_address + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)(flags_address + 0x3d) = 0x28;\n  ptr = *flags;\n  if ((*ptr & 1) == 0) {\n    *ptr = *ptr | 1;\n  }\n  **flags = **flags | 0x400;\n  (*flags)[1] = (*flags)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080049e0": "initialize_data_080049e0",
                "param_1": "flags",
                "puVar1": "ptr",
                "(int)param_1": "flags_address"
            },
            "calling": [
                "FUN_08007f7c",
                "FUN_08008020",
                "FUN_08007f8e",
                "FUN_08007ff0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080049e0": {
                    "1": "perform_operation",
                    "4": "initialize_flags",
                    "2": "initialize_data_structures",
                    "10": "initialize_data",
                    "3": "update_data"
                },
                "param_1": {
                    "6": "flags",
                    "1": "data_struct_ptr",
                    "2": "permissions",
                    "5": "data_pointer"
                },
                "puVar1": {
                    "1": "first_param",
                    "7": "ptr",
                    "6": "first_element",
                    "2": "current_pointer"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "param_1_character",
                    "2": "value"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "replaced_char"
                },
                "*puVar1": {
                    "1": "flag_value",
                    "2": "ptr_value"
                },
                "(*puVar1 & 1)": {
                    "1": "is_bit_set"
                },
                "*param_1": {
                    "1": "setting"
                },
                "(**param_1 | 0x400)": {
                    "1": "param_value_or_0x400"
                },
                "(*param_1)[1]": {
                    "1": "value_3"
                },
                "((*param_1)[1] | 0x300)": {
                    "1": "param_value_index_1_or_0x300"
                },
                "**(param_1)": {
                    "1": "first_setting"
                },
                "((*param_1)[1])": {
                    "1": "second_setting"
                },
                "**param_1": {
                    "1": "pointer_content"
                },
                "(int)param_1": {
                    "1": "flags_address"
                },
                "(undefined *)((int)param_1 + 0x3d)": {
                    "1": "modified_char_variable"
                },
                "0x28": {
                    "1": "new_char_value"
                },
                "1": {
                    "1": "bitwise_flag"
                },
                "0x400": {
                    "1": "fourth_bit_mask"
                },
                "0x300": {
                    "1": "flag_value2"
                },
                "2": {
                    "1": "invalid_input_error_code"
                },
                "0": {
                    "1": "success_error_code"
                },
                "return 2": {
                    "1": "return_invalid_state"
                },
                "return 0": {
                    "1": "return_success"
                },
                "(*puVar1 | 1)": {
                    "1": "set_bit"
                },
                "(int)param_1 + 0x3d": {
                    "1": "flag_address"
                }
            }
        },
        "FUN_08004a1e": {
            "entrypoint": "0x08004a1e",
            "current_name": "FUNC_08004a1e",
            "code": "\nvoid FUNC_08004a1e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a1e": "FUNC_08004a1e"
            },
            "calling": [
                "FUN_08004ccc",
                "FUN_08004b82"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a20": {
            "entrypoint": "0x08004a20",
            "current_name": "FUNC_08004a20",
            "code": "\nvoid FUNC_08004a20(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a20": "FUNC_08004a20"
            },
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a22": {
            "entrypoint": "0x08004a22",
            "current_name": "FUNC_08004a22",
            "code": "\nvoid FUNC_08004a22(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a22": "FUNC_08004a22"
            },
            "calling": [
                "FUN_08004a24",
                "FUN_08004aec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a24": {
            "entrypoint": "0x08004a24",
            "current_name": "process_data_08004a24",
            "code": "\nundefined4 process_data_08004a24(int *data)\n\n{\n  char char_value;\n  byte *byte_ptr;\n  \n  char_value = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    byte_ptr = (byte *)data[9];\n    data[9] = (int)(byte_ptr + 1);\n    *(uint *)(*data + 0x10) = (uint)*byte_ptr;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (char_value == ')')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x21;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      handle_i2_c_transmission_complete();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004a24": "process_data_08004a24",
                "param_1": "data",
                "cVar1": "char_value",
                "pbVar2": "byte_ptr",
                "HAL_I2C_SlaveTxCpltCallback": "handle_i2_c_transmission_complete"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a22"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004a24": {
                    "1": "process_i2_c_packet",
                    "22": "process_data",
                    "2": "decode_and_transmit_data"
                },
                "param_1": {
                    "1": "input_array",
                    "18": "data",
                    "2": "input_data"
                },
                "cVar1": {
                    "1": "character_variable1",
                    "12": "char_value",
                    "8": "character",
                    "2": "current_char"
                },
                "pbVar2": {
                    "15": "byte_ptr",
                    "14": "byte_pointer",
                    "1": "byte_pointer_variable2"
                },
                "HAL_I2C_SlaveTxCpltCallback": {
                    "1": "transmission_complete_callback",
                    "2": "handle_i2_c_transmission_complete"
                }
            }
        },
        "FUN_08004a74": {
            "entrypoint": "0x08004a74",
            "current_name": "FUNC_08004a74",
            "code": "\nvoid FUNC_08004a74(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a74": "FUNC_08004a74"
            },
            "calling": [
                "FUN_08004a76",
                "FUN_08005084"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a76": {
            "entrypoint": "0x08004a76",
            "current_name": "process_data_08004a76",
            "code": "\nundefined4 process_data_08004a76(int *data)\n\n{\n  char char_value;\n  undefined *ptr;\n  \n  char_value = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    ptr = (undefined *)data[9];\n    data[9] = (int)(ptr + 1);\n    *ptr = (char)*(undefined4 *)(*data + 0x10);\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (char_value == '*')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x22;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      handle_i2_c_receive_complete();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004a76": "process_data_08004a76",
                "param_1": "data",
                "cVar1": "char_value",
                "puVar2": "ptr",
                "HAL_I2C_SlaveRxCpltCallback": "handle_i2_c_receive_complete"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004a76": {
                    "1": "update_data",
                    "2": "process_input_data",
                    "24": "process_data"
                },
                "param_1": {
                    "21": "data",
                    "2": "data_array",
                    "1": "input_array",
                    "4": "input_data"
                },
                "cVar1": {
                    "5": "flag",
                    "10": "char_value",
                    "4": "character",
                    "3": "last_char",
                    "1": "char_var",
                    "2": "current_char"
                },
                "puVar2": {
                    "1": "pointer1",
                    "5": "pointer",
                    "11": "ptr",
                    "2": "buffer"
                },
                "HAL_I2C_SlaveRxCpltCallback": {
                    "1": "handle_slave_rx_complete",
                    "2": "handle_i2_c_complete",
                    "8": "handle_i2_c_receive_complete"
                },
                "FUNC_08004a74": {
                    "1": "hal_i2_c_slave_rx_cplt_callback"
                }
            }
        },
        "FUN_08004ac2": {
            "entrypoint": "0x08004ac2",
            "current_name": "process_i2_c_address_08004ac2",
            "code": "\nundefined4 process_i2_c_address_08004ac2(int *i2c_data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 address;\n  uint flags;\n  \n  flags = *(uint *)(*i2c_data + 0x18);\n  if ((flags & 0x80) == 0) {\n    address = *(undefined2 *)(i2c_data + 3);\n  }\n  else {\n    address = *(undefined2 *)(i2c_data + 6);\n  }\n  handle_i2_c_address_callback(i2c_data,(*(uint *)(*i2c_data + 0x18) & 4) == 0,address,flags,param4);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004ac2": "process_i2_c_address_08004ac2",
                "param_1": "i2c_data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "address",
                "uVar2": "flags",
                "HAL_I2C_AddrCallback": "handle_i2_c_address_callback"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08007fa0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004ac2": {
                    "3": "process_i2_c_data",
                    "1": "perform_i2_c_address_callback",
                    "4": "i2c_address_callback",
                    "5": "process_i2_c_address"
                },
                "param_1": {
                    "3": "device",
                    "1": "i2c_handler",
                    "2": "i2c_params",
                    "11": "i2c_data"
                },
                "param_2": {
                    "15": "param2",
                    "1": "unknown_param_1",
                    "3": "param1",
                    "2": "arg2"
                },
                "param_3": {
                    "3": "param2",
                    "1": "arg2",
                    "15": "param3",
                    "2": "arg3"
                },
                "param_4": {
                    "4": "callback_param",
                    "13": "param4",
                    "1": "callback_param3",
                    "2": "arg4"
                },
                "uVar1": {
                    "14": "address",
                    "1": "i2c_address",
                    "2": "callback_value",
                    "5": "selected_address"
                },
                "uVar2": {
                    "1": "value2",
                    "2": "data_value",
                    "13": "flags",
                    "5": "address_value"
                },
                "HAL_I2C_AddrCallback": {
                    "1": "add_address_callback"
                },
                "*param_1": {
                    "1": "data"
                }
            }
        },
        "FUN_08004aec": {
            "entrypoint": "0x08004aec",
            "current_name": "handle_i2_c_event_08004aec",
            "code": "\nundefined4 handle_i2_c_event_08004aec(uint **event_data)\n\n{\n  if (((event_data[11] == (uint *)0x4) || (event_data[11] == (uint *)0x8)) &&\n     (*(char *)(parameter1_address + 0x3d) == '(')) {\n    event_data[11] = (uint *)0xffff0000;\n    (*event_data)[1] = (*event_data)[1] & 0xfffff8ff;\n    (*event_data)[5] = 0xfffffbff;\n    **event_data = **event_data & 0xfffffbff;\n    event_data[12] = (uint *)0x0;\n    *(undefined *)(parameter1_address + 0x3d) = 0x20;\n    *(undefined *)(parameter1_address + 0x3e) = 0;\n    on_i2_c_listen_complete();\n  }\n  else if (*(char *)(parameter1_address + 0x3d) == '!') {\n    event_data[11] = (uint *)0xffff0000;\n    event_data[12] = (uint *)0x21;\n    *(undefined *)(parameter1_address + 0x3d) = 0x20;\n    *(undefined *)(parameter1_address + 0x3e) = 0;\n    (*event_data)[1] = (*event_data)[1] & 0xfffff8ff;\n    (*event_data)[5] = 0xfffffbff;\n    **event_data = **event_data & 0xfffffbff;\n    on_i2_c_slave_transfer_complete();\n  }\n  else {\n    (*event_data)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004aec": "handle_i2_c_event_08004aec",
                "param_1": "event_data",
                "param_1[0xb]": "event_data[11]",
                "param_1[0xc]": "event_data[12]",
                "(int)param_1": "parameter1_address",
                "HAL_I2C_ListenCpltCallback": "handle_listen_complete",
                "HAL_I2C_SlaveTxCpltCallback": "handle_slave_tx_complete",
                "HAL_I2C_ListenCpltCallback()": "on_i2_c_listen_complete()",
                "HAL_I2C_SlaveTxCpltCallback()": "on_i2_c_slave_transfer_complete()"
            },
            "calling": [
                "FUN_080052f0"
            ],
            "called": [
                "FUN_08004a22",
                "FUN_08007ff0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004aec": {
                    "2": "process_i2_c_data",
                    "1": "perform_operation",
                    "3": "process_i2_c_event",
                    "5": "handle_i2_c_event"
                },
                "param_1": {
                    "1": "i2c_params",
                    "3": "param_array",
                    "2": "parameter",
                    "8": "event_data",
                    "4": "parameters"
                },
                "param_1[0xb]": {
                    "3": "param_array[11]",
                    "1": "condition_check1",
                    "2": "param_b",
                    "5": "event_data[11]"
                },
                "param_1[0xc]": {
                    "1": "i2c_data_12",
                    "5": "event_data[12]",
                    "2": "param_c",
                    "3": "param_array[12]"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "2": "event_data_char",
                    "1": "char_check1"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "i2c_char"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "callback_flag2"
                },
                "(*param_1)[1]": {
                    "1": "i2c_data_1"
                },
                "(*param_1)[5]": {
                    "1": "callback_params[5]"
                },
                "**param_1": {
                    "1": "param_array[0][0]"
                },
                "Hal_I2C_ListenCpltCallback": {
                    "1": "handle_listen_complete"
                },
                "Hal_I2C_SlaveTxCpltCallback": {
                    "1": "handle_slave_transmit_complete"
                },
                "(**param_1)": {
                    "1": "event_data_ptr"
                },
                "(int)param_1": {
                    "1": "parameter1_address"
                },
                "HAL_I2C_ListenCpltCallback": {
                    "1": "listen_complete_callback",
                    "4": "handle_listen_complete"
                },
                "HAL_I2C_SlaveTxCpltCallback": {
                    "1": "slave_tx_complete_callback",
                    "3": "handle_slave_tx_complete"
                },
                "(*param_1)": {
                    "1": "first_entry"
                },
                "(uint *)0x4": {
                    "1": "expected_size_4"
                },
                "(uint *)0x8": {
                    "1": "expected_size_8"
                },
                "(uint *)0x0": {
                    "1": "null_pointer"
                },
                "(uint *)0xffff0000": {
                    "1": "error_code"
                },
                "(uint *)0x21": {
                    "1": "slave_tx_complete"
                },
                "*(paramList + 0x3d)": {
                    "1": "operation_type"
                },
                "paramList[0xb]": {
                    "1": "operation_mode"
                },
                "paramList[0xc]": {
                    "1": "additional_flag"
                },
                "(*paramList)[1]": {
                    "1": "register_value1"
                },
                "(*paramList)[5]": {
                    "1": "register_value2"
                },
                "HAL_I2C_ListenCpltCallback()": {
                    "1": "on_i2_c_listen_complete()"
                },
                "HAL_I2C_SlaveTxCpltCallback()": {
                    "1": "handle_i2_c_slave_tx_cplt"
                },
                "*param_1": {
                    "1": "event_data[0]"
                }
            }
        },
        "FUN_08004b80": {
            "entrypoint": "0x08004b80",
            "current_name": "FUNC_08004b80",
            "code": "\nvoid FUNC_08004b80(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b80": "FUNC_08004b80"
            },
            "calling": [
                "FUN_08004ccc",
                "FUN_08004b82"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004b82": {
            "entrypoint": "0x08004b82",
            "current_name": "process_data_08004b82",
            "code": "\nundefined4 process_data_08004b82(uint **data)\n\n{\n  char char_value;\n  uint *ptr;\n  \n  char_value = *(char *)((int)data + 0x3d);\n  ptr = data[0xb];\n  if ((*(short *)(data + 10) == 0) && (char_value == '!')) {\n    if ((ptr == (uint *)0x4) || ((ptr == (uint *)0x8 || (ptr == (uint *)0xffff0000)))) {\n      (*data)[1] = (*data)[1] & 0xfffff8ff;\n      **data = **data | 0x200;\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      if (*(char *)((int)data + 0x3e) == '@') {\n        *(undefined *)((int)data + 0x3e) = 0;\n        handle_memory_transmit_completion;\n      }\n      else {\n        *(undefined *)((int)data + 0x3e) = 0;\n        handle_master_transmit_completion;\n      }\n    }\n    else {\n      (*data)[1] = (*data)[1] & 0xfffff8ff;\n      data[0xc] = (uint *)0x11;\n      *(undefined *)((int)data + 0x3e) = 0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      handle_master_transmit_completion;\n    }\n  }\n  else if ((char_value == '!') || ((*(char *)((int)data + 0x3e) == '@' && (char_value == '\\\"')))) {\n    if (*(short *)((int)data + 0x2a) == 0) {\n      (*data)[1] = (*data)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)data + 0x3e) == '@') {\n      if (data[0x14] == (uint *)0x0) {\n        if (data[0x13] == (uint *)0x1) {\n          (*data)[4] = (uint)data[0x12] & 0xff;\n          data[0x14] = (uint *)((int)data[0x14] + 2);\n        }\n        else {\n          (*data)[4] = (uint)((int)data[0x12] << 0x10) >> 0x18;\n          data[0x14] = (uint *)((int)data[0x14] + 1);\n        }\n      }\n      else if (data[0x14] == (uint *)0x1) {\n        (*data)[4] = (uint)data[0x12] & 0xff;\n        data[0x14] = (uint *)((int)data[0x14] + 1);\n      }\n      else if (data[0x14] == (uint *)0x2) {\n        if (*(char *)((int)data + 0x3d) == '\\\"') {\n          **data = **data | 0x100;\n        }\n        else if (*(char *)((int)data + 0x3d) == '!') {\n          ptr = data[9];\n          data[9] = (uint *)((int)ptr + 1);\n          (*data)[4] = (uint)*(byte *)ptr;\n          *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      ptr = data[9];\n      data[9] = (uint *)((int)ptr + 1);\n      (*data)[4] = (uint)*(byte *)ptr;\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004b82": "process_data_08004b82",
                "param_1": "data",
                "cVar1": "char_value",
                "puVar2": "ptr",
                "HAL_I2C_MemTxCpltCallback": "handle_mem_tx_cplt",
                "HAL_I2C_MasterTxCpltCallback": "handle_master_tx_cplt",
                "HAL_I2C_MemTxCpltCallback()": "handle_memory_transmit_completion",
                "HAL_I2C_MasterTxCpltCallback()": "handle_master_transmit_completion"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004b80",
                "FUN_08004a1e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004b82": {
                    "4": "process_i2_c_data",
                    "15": "process_data",
                    "1": "execute_operation",
                    "2": "process_callback",
                    "5": "handle_i2_c_event"
                },
                "param_1": {
                    "15": "data",
                    "1": "operation_params",
                    "5": "event_data",
                    "2": "parameters"
                },
                "cVar1": {
                    "10": "char_value",
                    "4": "character",
                    "1": "char_var1",
                    "7": "first_char",
                    "3": "char1"
                },
                "puVar2": {
                    "1": "ptr_var",
                    "2": "pointer_value",
                    "3": "pointer",
                    "5": "ptr",
                    "4": "ptr_value"
                },
                "HAL_I2C_MemTxCpltCallback": {
                    "3": "handle_mem_tx_cplt_callback",
                    "1": "on_mem_tx_cplt",
                    "5": "handle_mem_tx_cplt"
                },
                "HAL_I2C_MasterTxCpltCallback": {
                    "3": "handle_master_tx_cplt_callback",
                    "5": "handle_master_tx_cplt",
                    "1": "master_tx_complete_callback"
                },
                "HAL_I2C_MemTxCpltCallback()": {
                    "1": "handle_memory_transmit_completion"
                },
                "HAL_I2C_MasterTxCpltCallback()": {
                    "1": "handle_master_transmit_completion"
                },
                "FUNC_08004b80": {
                    "1": "hal_i2_c_mem_tx_cplt_callback"
                },
                "FUNC_08004a1e": {
                    "1": "hal_i2_c_master_tx_cplt_callback"
                }
            }
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "process_data_08004ccc",
            "code": "\nundefined4 process_data_08004ccc(uint **data)\n\n{\n  uint *value;\n  \n  value = data[0xb];\n  if (*(char *)((int)data + 0x3d) == '!') {\n    if (*(short *)((int)data + 0x2a) == 0) {\n      if (((value == (uint *)0x4) || (value == (uint *)0x8)) || (value == (uint *)0xffff0000)) {\n        (*data)[1] = (*data)[1] & 0xfffff8ff;\n        **data = **data | 0x200;\n        c_element_of_param1 = (uint *)0x0;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        if (*(char *)((int)data + 0x3e) == '@') {\n          *(undefined *)((int)data + 0x3e) = 0;\n          handle_mem_tx_cplt;\n        }\n        else {\n          *(undefined *)((int)data + 0x3e) = 0;\n          handle_master_tx_cplt;\n        }\n      }\n      else {\n        (*data)[1] = (*data)[1] & 0xfffff8ff;\n        c_element_of_param1 = (uint *)0x11;\n        *(undefined *)((int)data + 0x3e) = 0;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        handle_master_tx_cplt;\n      }\n    }\n    else {\n      value = data[9];\n      data[9] = (uint *)((int)value + 1);\n      (*data)[4] = (uint)*(byte *)value;\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "process_data_08004ccc",
                "param_1": "data",
                "puVar1": "value",
                "HAL_I2C_MemTxCpltCallback": "handle_mem_tx_cplt",
                "HAL_I2C_MasterTxCpltCallback": "handle_master_tx_cplt",
                "HAL_I2C_MemTxCpltCallback()": "handle_mem_tx_cplt",
                "HAL_I2C_MasterTxCpltCallback()": "handle_master_tx_cplt",
                "param_1[0xc]": "c_element_of_param1"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004b80",
                "FUN_08004a1e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004ccc": {
                    "5": "process_i2_c_data",
                    "1": "process_i2_c_event",
                    "13": "process_data",
                    "2": "handle_i2_c_event"
                },
                "param_1": {
                    "16": "data",
                    "1": "event_args",
                    "2": "params",
                    "4": "parameters"
                },
                "puVar1": {
                    "2": "ptr",
                    "1": "current_value",
                    "11": "value"
                },
                "HAL_I2C_MemTxCpltCallback": {
                    "4": "handle_mem_tx_cplt_callback",
                    "2": "handle_i2c_mem_tx_complete",
                    "1": "handle_i2c_mem_tx_cplt",
                    "3": "handle_i2_c_mem_tx_cplt",
                    "14": "handle_mem_tx_cplt"
                },
                "HAL_I2C_MasterTxCpltCallback": {
                    "4": "handle_master_tx_cplt_callback",
                    "15": "handle_master_tx_cplt",
                    "2": "handle_master_transmit_complete",
                    "1": "handle_i2c_master_tx_cplt",
                    "3": "handle_i2_c_master_tx_cplt"
                },
                "HAL_I2C_MemTxCpltCallback()": {
                    "1": "handle_mem_tx_cplt"
                },
                "HAL_I2C_MasterTxCpltCallback()": {
                    "1": "handle_master_tx_cplt"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "first_char"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "second_short"
                },
                "(uint *)0x4": {
                    "1": "pointer4"
                },
                "(uint *)0x8": {
                    "1": "pointer8"
                },
                "(uint *)0xffff0000": {
                    "1": "pointer_ffff0000"
                },
                "(*param_1)[1]": {
                    "1": "first_element_of_param1"
                },
                "**param_1": {
                    "1": "pointer_to_pointer"
                },
                "param_1[0xc]": {
                    "1": "c_element_of_param1"
                },
                "*(char *)((int)param_1 + 0x3e)": {
                    "1": "second_char"
                },
                "(uint *)((int)puVar1 + 1)": {
                    "1": "incremented_current_param"
                },
                "(*param_1)[4]": {
                    "1": "fifth_element_of_param1"
                },
                "(uint)*(byte *)puVar1": {
                    "1": "byte_value_from_current_param"
                },
                "FUNC_08004b80": {
                    "1": "initialize"
                },
                "FUNC_08004a1e": {
                    "1": "improve_something"
                }
            }
        },
        "FUN_08004d6a": {
            "entrypoint": "0x08004d6a",
            "current_name": "FUNC_08004d6a",
            "code": "\nvoid FUNC_08004d6a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d6a": "FUNC_08004d6a"
            },
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004d6c": {
            "entrypoint": "0x08004d6c",
            "current_name": "process_data_08004d6c",
            "code": "\nundefined4 process_data_08004d6c(uint **data)\n\n{\n  uint *temp_ptr;\n  \n  if (*(char *)((int)data + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)data + 0x2a) < 4) {\n      if (*(ushort *)((int)data + 0x2a) - 2 < 2) {\n        if (data[11] == (uint *)0x2) {\n          **data = **data | 0x400;\n        }\n        else {\n          **data = **data & 0xfffffbff;\n          **data = **data | 0x800;\n        }\n        (*data)[1] = (*data)[1] & 0xfffffbff;\n      }\n      else {\n        if (data[11] == (uint *)0x2) {\n          **data = **data | 0x400;\n        }\n        else {\n          **data = **data & 0xfffffbff;\n        }\n        (*data)[1] = (*data)[1] & 0xfffff8ff;\n        temp_ptr = data[9];\n        data[9] = (uint *)((int)temp_ptr + 1);\n        *(char *)temp_ptr = (char)(*data)[4];\n        *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        data[0xc] = (uint *)0x0;\n        if (*(char *)((int)data + 0x3e) == '@') {\n          *(undefined *)((int)data + 0x3e) = 0;\n          handle_mem_rx_cplt();\n        }\n        else {\n          *(undefined *)((int)data + 0x3e) = 0;\n          handle_master_rx_cplt();\n        }\n      }\n    }\n    else {\n      temp_ptr = data[9];\n      data[9] = (uint *)((int)temp_ptr + 1);\n      *(char *)temp_ptr = (char)(*data)[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "param_1": "data",
                "puVar1": "temp_ptr",
                "FUN_08004d6c": "process_data_08004d6c",
                "HAL_I2C_MemRxCpltCallback": "handle_mem_rx_cplt",
                "HAL_I2C_MasterRxCpltCallback": "handle_master_rx_cplt",
                "param_1[0xb]": "data[11]",
                "param_1[9]": "data[9]"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004d6a",
                "FUN_08004a20"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "F_UNDECODED_FUNCTION": {
                    "1": "decode_message"
                },
                "param_1": {
                    "19": "data",
                    "4": "params",
                    "1": "message_ptr",
                    "2": "input_data"
                },
                "puVar1": {
                    "4": "temp_var",
                    "1": "temp_pointer",
                    "15": "temp_ptr",
                    "2": "temp_var1"
                },
                "FUN_08004d6c": {
                    "1": "update_data",
                    "2": "update_flags_and_callback",
                    "23": "process_data"
                },
                "HAL_I2C_MemRxCpltCallback": {
                    "1": "handle_i2_c_mem_rx_cplt",
                    "2": "mem_receive_complete_callback",
                    "6": "handle_mem_rx_cplt"
                },
                "HAL_I2C_MasterRxCpltCallback": {
                    "6": "handle_master_rx_cplt",
                    "1": "handle_i2_c_master_rx_cplt",
                    "2": "handle_master_rx_cplt_callback",
                    "4": "master_receive_complete_callback"
                },
                "F_UNIMPROVED_08004d6c": {
                    "1": "update_param"
                },
                "F_FUNC_08004d6a": {
                    "1": "execute_callback_a"
                },
                "F_FUNC_08004a20": {
                    "1": "execute_callback_b"
                },
                "param_1[0xb]": {
                    "1": "data[11]"
                },
                "**param_1": {
                    "1": "data[0][0]"
                },
                "(*param_1)[1]": {
                    "1": "data[0][1]"
                },
                "param_1[9]": {
                    "1": "data[9]"
                },
                "(char *)((int)param_1 + 0x3d)": {
                    "1": "char_ptr"
                },
                "(ushort *)((int)param_1 + 0x2a)": {
                    "1": "ushort_ptr"
                },
                "(char)(*param_1)[4]": {
                    "1": "data[0][4]"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "short_var"
                },
                "(undefined *)((int)param_1 + 0x3d)": {
                    "1": "undefined_char_ptr"
                }
            }
        },
        "FUN_08004e3c": {
            "entrypoint": "0x08004e3c",
            "current_name": "process_data_08004e3c",
            "code": "\nundefined4 process_data_08004e3c(uint **data)\n\n{\n  uint *value;\n  \n  value = data[0xb];\n  if (*(short *)((int)data + 0x2a) == 3) {\n    if (((value == (uint *)0x4) || (value == (uint *)0x8)) || (value == (uint *)0xffff0000)) {\n      **data = **data & 0xfffffbff;\n    }\n    value = data[9];\n    data[9] = (uint *)((int)value + 1);\n    *(char *)value = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  else if (*(short *)((int)data + 0x2a) == 2) {\n    if (((value == (uint *)0x4) || (value == (uint *)0x8)) || (value == (uint *)0xffff0000)) {\n      (*data)[1] = (*data)[1] & 0xfffffcff;\n      **data = **data | 0x200;\n    }\n    else {\n      if (value == (uint *)0x2) {\n        **data = **data | 0x400;\n      }\n      else {\n        **data = **data & 0xfffffbff;\n      }\n      (*data)[1] = (*data)[1] & 0xfffffcff;\n    }\n    value = data[9];\n    data[9] = (uint *)((int)value + 1);\n    *(char *)value = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    value = data[9];\n    data[9] = (uint *)((int)value + 1);\n    *(char *)value = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    data[0xc] = (uint *)0x0;\n    if (*(char *)((int)data + 0x3e) == '@') {\n      *(undefined *)((int)data + 0x3e) = 0;\n      handle_mem_rx_cplt();\n    }\n    else {\n      *(undefined *)((int)data + 0x3e) = 0;\n      handle_master_rx_cplt();\n    }\n  }\n  else {\n    value = data[9];\n    data[9] = (uint *)((int)value + 1);\n    *(char *)value = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004e3c": "process_data_08004e3c",
                "param_1": "data",
                "puVar1": "value",
                "HAL_I2C_MemRxCpltCallback": "handle_mem_rx_cplt",
                "HAL_I2C_MasterRxCpltCallback": "handle_master_rx_cplt"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004d6a",
                "FUN_08004a20"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004e3c": {
                    "1": "process_input_data",
                    "28": "process_data"
                },
                "param_1": {
                    "24": "data",
                    "1": "param",
                    "4": "input_data"
                },
                "puVar1": {
                    "1": "pointer1",
                    "2": "ptr_value",
                    "16": "value",
                    "3": "value_ptr"
                },
                "HAL_I2C_MemRxCpltCallback": {
                    "2": "handle_mem_rx_complete",
                    "1": "handle_memory_receive_complete",
                    "14": "handle_mem_rx_cplt"
                },
                "HAL_I2C_MasterRxCpltCallback": {
                    "14": "handle_master_rx_cplt",
                    "1": "master_receive_complete_callback",
                    "2": "handle_master_rx_complete"
                },
                "FUNC_08004d6a": {
                    "1": "callback_function1",
                    "2": "callback1"
                },
                "FUNC_08004a20": {
                    "1": "callback_function2",
                    "2": "callback2"
                },
                "Hal_I2C_MemRxCpltCallback": {
                    "1": "handle_mem_rx_cplt_callback"
                },
                "Hal_I2C_MasterRxCpltCallback": {
                    "1": "handle_master_rx_cplt_callback"
                }
            }
        },
        "FUN_08004f3a": {
            "entrypoint": "0x08004f3a",
            "current_name": "FUNC_08004f3a",
            "code": "\nvoid FUNC_08004f3a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3a": "FUNC_08004f3a"
            },
            "calling": [
                "FUN_08004f3c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3c": {
            "entrypoint": "0x08004f3c",
            "current_name": "FUNC_08004f3c",
            "code": "\nvoid FUNC_08004f3c(uint **param_1)\n\n{\n  int iVar1;\n  uint *puVar2;\n  uint *puVar3;\n  \n  if (*(byte *)((int)param_1 + 0x3d) - 0x29 < 2) {\n    param_1[0xc] = (uint *)0x0;\n    *(undefined *)((int)param_1 + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)param_1 + 0x3d) != '`') && (((*param_1)[1] & 0x800) == 0)) {\n      *(undefined *)((int)param_1 + 0x3d) = 0x20;\n    }\n    param_1[0xc] = (uint *)0x0;\n    *(undefined *)((int)param_1 + 0x3e) = 0;\n  }\n  **param_1 = **param_1 & 0xfffff7ff;\n  puVar3 = *param_1;\n  if ((puVar3[1] & 0x800) == 0) {\n    if (*(char *)((int)param_1 + 0x3d) == '`') {\n      *(undefined *)((int)param_1 + 0x3d) = 0x20;\n      param_1[0x10] = (uint *)0x0;\n      if ((puVar3[5] & 0x40) != 0) {\n        puVar2 = param_1[9];\n        param_1[9] = (uint *)((int)puVar2 + 1);\n        *(char *)puVar2 = (char)puVar3[4];\n      }\n      **param_1 = **param_1 & 0xfffffffe;\n      HAL_I2C_AbortCpltCallback(param_1);\n    }\n    else {\n      if ((puVar3[5] & 0x40) != 0) {\n        puVar2 = param_1[9];\n        param_1[9] = (uint *)((int)puVar2 + 1);\n        *(char *)puVar2 = (char)puVar3[4];\n      }\n      HAL_I2C_ErrorCallback(param_1);\n    }\n  }\n  else {\n    puVar3[1] = puVar3[1] & 0xfffff7ff;\n    if (*(char *)((int)param_1[0xd] + 0x21) == '\\x01') {\n      param_1[0xe][0xd] = (uint)&LAB_080053cc_1;\n      iVar1 = HAL_DMA_Abort_IT(param_1[0xe]);\n      if (iVar1 != 0) {\n        if (((*param_1)[5] & 0x40) != 0) {\n          puVar3 = param_1[9];\n          param_1[9] = (uint *)((int)puVar3 + 1);\n          *(char *)puVar3 = (char)(*param_1)[4];\n        }\n        **param_1 = **param_1 & 0xfffffffe;\n        *(undefined *)((int)param_1 + 0x3d) = 0x20;\n        (*(code *)param_1[0xe][0xd])();\n      }\n    }\n    else {\n      param_1[0xd][0xd] = (uint)&LAB_080053cc_1;\n      iVar1 = HAL_DMA_Abort_IT(param_1[0xd]);\n      if (iVar1 != 0) {\n        **param_1 = **param_1 & 0xfffffffe;\n        *(undefined *)((int)param_1 + 0x3d) = 0x20;\n        (*(code *)param_1[0xd][0xd])();\n      }\n    }\n  }\n  if ((*(char *)((int)param_1 + 0x3d) == '(') && (((uint)param_1[0x10] & 4) != 0)) {\n    param_1[0xb] = (uint *)0xffff0000;\n    param_1[0xc] = (uint *)0x0;\n    *(undefined *)((int)param_1 + 0x3d) = 0x20;\n    *(undefined *)((int)param_1 + 0x3e) = 0;\n    HAL_I2C_ListenCpltCallback(param_1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3c": "FUNC_08004f3c"
            },
            "calling": [
                "FUN_080052f0",
                "FUN_08005084"
            ],
            "called": [
                "FUN_08008020",
                "FUN_08004050",
                "FUN_08004f3a",
                "FUN_08007ff0"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005084": {
            "entrypoint": "0x08005084",
            "current_name": "process_data_08005084",
            "code": "\nundefined4 process_data_08005084(uint **data)\n\n{\n  char character;\n  uint *ptr1;\n  uint *ptr2;\n  \n  character = *(char *)((int)data + 0x3d);\n  (*data)[1] = (*data)[1] & 0xfffff8ff;\n  **data = **data | 1;\n  **data = **data & 0xfffffbff;\n  ptr1 = *data;\n  if ((ptr1[1] & 0x800) != 0) {\n    if ((*(char *)((int)data + 0x3d) == '\\\"') || (*(char *)((int)data + 0x3d) == '*')) {\n      *(short *)((int)data + 0x2a) = (short)*(undefined4 *)(*param1_e + 4);\n    }\n    else {\n      *(short *)((int)data + 0x2a) = (short)*(undefined4 *)(*param1_d + 4);\n    }\n  }\n  if (*(short *)((int)data + 0x2a) != 0) {\n    if ((ptr1[5] & 4) != 0) {\n      ptr2 = p_counter;\n      p_counter = (uint *)((int)ptr2 + 1);\n      *(char *)ptr2 = (char)ptr1[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n    if (((*data)[5] & 0x40) != 0) {\n      ptr1 = p_counter;\n      p_counter = (uint *)((int)ptr1 + 1);\n      *(char *)ptr1 = (char)(*data)[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n    data[0x10] = (uint *)((uint)data[0x10] | 4);\n  }\n  if (data[0x10] == (uint *)0x0) {\n    if (((character == '(') || (character == '*')) || (character == ')')) {\n      data[0xb] = (uint *)0xffff0000;\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      handle_listen_complete();\n    }\n    else if ((data[0xc] == (uint *)0x22) || (character == '\\\"')) {\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      handle_slave_receive_complete();\n    }\n  }\n  else {\n    handle_i2c_error();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005084": "process_data_08005084",
                "param_1": "data",
                "cVar1": "character",
                "puVar2": "ptr1",
                "puVar3": "ptr2",
                "HAL_I2C_ListenCpltCallback": "handle_listen_complete",
                "HAL_I2C_SlaveRxCpltCallback": "handle_slave_receive_complete",
                "I2C_ITError": "handle_i2c_error",
                "param_1[9]": "p_counter",
                "param_1[0xe]": "param1_e",
                "param_1[0xd]": "param1_d"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a74",
                "FUN_08007ff0",
                "FUN_08004f3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005084": {
                    "8": "process_i2_c_data",
                    "1": "process_i2_c_packet",
                    "21": "process_data"
                },
                "param_1": {
                    "25": "data",
                    "1": "i2c_packet"
                },
                "cVar1": {
                    "1": "first_character",
                    "7": "char_value",
                    "9": "character",
                    "8": "first_char",
                    "2": "current_char"
                },
                "puVar2": {
                    "1": "ptr_data",
                    "10": "ptr1",
                    "6": "ptr"
                },
                "puVar3": {
                    "1": "var2",
                    "16": "ptr2"
                },
                "HAL_I2C_ListenCpltCallback": {
                    "1": "handle_listen_complete"
                },
                "HAL_I2C_SlaveRxCpltCallback": {
                    "1": "handle_slave_receive_complete"
                },
                "I2C_ITError": {
                    "1": "handle_i2c_error"
                },
                "param_1[9]": {
                    "1": "p_counter"
                },
                "param_1[0xe]": {
                    "1": "param1_e"
                },
                "param_1[0xd]": {
                    "1": "param1_d"
                },
                "FUN_08004a74": {
                    "1": "i2_c_it_error"
                },
                "FUN_08007ff0": {
                    "2": "hal_i2_c_listen_cplt_callback"
                },
                "FUN_08004f3c": {
                    "2": "hal_i2_c_slave_rx_cplt_callback"
                },
                "FUNC_08004a74": {
                    "1": "i2_c_it_error"
                }
            }
        },
        "FUN_08005188": {
            "entrypoint": "0x08005188",
            "current_name": "process_i2_c_data_08005188",
            "code": "\nvoid process_i2_c_data_08005188(int *i2c_data)\n\n{\n  int data_pointer;\n  uint flag1;\n  uint flag2;\n  uint flag3;\n  \n  data_pointer = *i2c_data;\n  flag3 = *(uint *)(data_pointer + 0x18);\n  flag1 = *(uint *)(data_pointer + 0x14);\n  flag2 = *(uint *)(data_pointer + 4);\n  if ((*(char *)((int)i2c_data + 0x3e) == '\\x10') || (*(char *)((int)i2c_data + 0x3e) == '@')) {\n    if (((flag1 & 0x10001) == 0) || ((flag2 & 0x200) == 0)) {\n      if (((flag1 & 0x10008) == 0) || ((flag2 & 0x200) == 0)) {\n        if (((flag1 & 0x10002) != 0) && ((flag2 & 0x200) != 0)) {\n          master_address(i2c_data);\n        }\n      }\n      else {\n        master_add10(i2c_data);\n      }\n    }\n    else {\n      master_start_bit(i2c_data);\n    }\n    if ((flag3 & 0x100004) == 0) {\n      if ((((flag1 & 0x10040) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        master_receive_rxne(i2c_data);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        master_receive_btf(i2c_data);\n        return;\n      }\n    }\n    else {\n      if ((((flag1 & 0x10080) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        master_transmit_txe(i2c_data);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        master_transmit_btf(i2c_data);\n        return;\n      }\n    }\n  }\n  else {\n    if (((flag1 & 0x10002) != 0) && ((flag2 & 0x200) != 0)) {\n      slave_address();\n      return;\n    }\n    if (((flag1 & 0x10010) != 0) && ((flag2 & 0x200) != 0)) {\n      handle_slave_stopf_event(i2c_data);\n      return;\n    }\n    if ((flag3 & 0x100004) == 0) {\n      if ((((flag1 & 0x10040) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        slave_receive_rxne(i2c_data);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        slave_receive_btf(i2c_data);\n      }\n    }\n    else {\n      if ((((flag1 & 0x10080) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        slave_transmit_txe(i2c_data);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        slave_transmit_btf(i2c_data);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005188": "process_i2_c_data_08005188",
                "param_1": "i2c_data",
                "iVar1": "data_pointer",
                "uVar2": "flag1",
                "uVar3": "flag2",
                "uVar4": "flag3",
                "I2C_Master_ADDR": "master_address",
                "I2C_Master_ADD10": "master_add10",
                "I2C_Master_SB": "master_start_bit",
                "I2C_MasterReceive_RXNE": "master_receive_rxne",
                "I2C_MasterReceive_BTF": "master_receive_btf",
                "I2C_MasterTransmit_TXE": "master_transmit_txe",
                "I2C_MasterTransmit_BTF": "master_transmit_btf",
                "I2C_Slave_ADDR": "slave_address",
                "I2C_Slave_STOPF": "handle_slave_stopf_event",
                "I2C_SlaveReceive_RXNE": "slave_receive_rxne",
                "I2C_SlaveReceive_BTF": "slave_receive_btf",
                "I2C_SlaveTransmit_TXE": "slave_transmit_txe",
                "I2C_SlaveTransmit_BTF": "slave_transmit_btf"
            },
            "calling": [],
            "called": [
                "FUN_08004d6c",
                "FUN_08004396",
                "FUN_08004a76",
                "FUN_0800459c",
                "FUN_0800457c",
                "FUN_08004a24",
                "FUN_08004e3c",
                "FUN_08004ac2",
                "FUN_08004ccc",
                "FUN_080043a2",
                "FUN_08004b82",
                "FUN_0800430c",
                "FUN_08005084"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005188": {
                    "6": "handle_i2_c_events",
                    "8": "process_i2_c_data",
                    "1": "process_i2_c_event",
                    "4": "process_i2_c_operation",
                    "2": "perform_i2_c_operation"
                },
                "param_1": {
                    "1": "command_data",
                    "7": "data",
                    "3": "data_ptr",
                    "2": "input_data",
                    "8": "i2c_data"
                },
                "iVar1": {
                    "4": "value",
                    "1": "data_element",
                    "2": "data_value"
                },
                "uVar2": {
                    "1": "status_register",
                    "7": "flag1",
                    "2": "value1"
                },
                "uVar3": {
                    "1": "var_3",
                    "2": "condition2",
                    "7": "flag2"
                },
                "uVar4": {
                    "1": "status_flag3",
                    "7": "flag3",
                    "2": "condition3"
                },
                "PTR_FUN_08004d6c": {
                    "1": "i2_c_master_addr"
                },
                "PTR_FUN_08004396": {
                    "1": "i2_c_master_add10"
                },
                "PTR_FUN_08004a76": {
                    "1": "i2_c_master_sb"
                },
                "PTR_FUN_0800459c": {
                    "1": "i2_c_master_receive_rxne"
                },
                "PTR_FUN_0800457c": {
                    "1": "i2_c_master_receive_btf"
                },
                "PTR_FUN_08004a24": {
                    "1": "i2_c_master_transmit_txe"
                },
                "PTR_FUN_08004e3c": {
                    "1": "i2_c_master_transmit_btf"
                },
                "PTR_FUN_08004ac2": {
                    "1": "i2_c_slave_addr"
                },
                "PTR_FUN_08004ccc": {
                    "1": "i2_c_slave_stopf"
                },
                "PTR_FUN_080043a2": {
                    "1": "i2_c_slave_receive_rxne"
                },
                "PTR_FUN_08004b82": {
                    "1": "i2_c_slave_receive_btf"
                },
                "PTR_FUN_0800430c": {
                    "1": "i2_c_slave_transmit_txe"
                },
                "PTR_FUN_08005084": {
                    "1": "i2_c_slave_transmit_btf"
                },
                "I2C_Master_ADDR": {
                    "1": "handle_master_address_event",
                    "2": "master_address"
                },
                "I2C_Master_ADD10": {
                    "2": "master_add10",
                    "1": "handle_master_add10_event"
                },
                "I2C_Master_SB": {
                    "2": "master_start_bit",
                    "1": "handle_master_sb_event"
                },
                "I2C_MasterReceive_RXNE": {
                    "2": "master_receive_rxne",
                    "1": "handle_master_receive_rxne_event"
                },
                "I2C_MasterReceive_BTF": {
                    "1": "handle_master_receive_btf_event",
                    "2": "master_receive_btf"
                },
                "I2C_MasterTransmit_TXE": {
                    "2": "master_transmit_txe",
                    "1": "handle_master_transmit_txe_event"
                },
                "I2C_MasterTransmit_BTF": {
                    "1": "handle_master_transmit_btf_event",
                    "2": "master_transmit_btf"
                },
                "I2C_Slave_ADDR": {
                    "2": "slave_address",
                    "1": "handle_slave_address_event"
                },
                "I2C_Slave_STOPF": {
                    "1": "handle_slave_stopf_event"
                },
                "I2C_SlaveReceive_RXNE": {
                    "2": "slave_receive_rxne",
                    "1": "handle_slave_receive_rxne_event"
                },
                "I2C_SlaveReceive_BTF": {
                    "2": "slave_receive_btf",
                    "1": "handle_slave_receive_btf_event"
                },
                "I2C_SlaveTransmit_TXE": {
                    "2": "slave_transmit_txe",
                    "1": "handle_slave_transmit_txe_event"
                },
                "I2C_SlaveTransmit_BTF": {
                    "2": "slave_transmit_btf",
                    "1": "handle_slave_transmit_btf_event"
                }
            }
        },
        "FUN_080052f0": {
            "entrypoint": "0x080052f0",
            "current_name": "process_flags_080052f0",
            "code": "\nvoid process_flags_080052f0(uint **data)\n\n{\n  char character;\n  uint *pointer;\n  uint flag1;\n  uint flag2;\n  \n  pointer = *data;\n  flag1 = pointer[5];\n  flag2 = pointer[1];\n  if (((flag1 & 0x10100) != 0) && ((flag2 & 0x100) != 0)) {\n    data[0x10] = (uint *)((uint)data[0x10] | 1);\n    pointer[5] = 0xfffffeff;\n    **data = **data | 0x8000;\n  }\n  if (((flag1 & 0x10200) != 0) && ((flag2 & 0x100) != 0)) {\n    data[0x10] = (uint *)((uint)data[0x10] | 2);\n    (*data)[5] = 0xfffffdff;\n  }\n  if (((flag1 & 0x10400) != 0) && ((flag2 & 0x100) != 0)) {\n    character = *(char *)((int)data + 0x3d);\n    if (((*(char *)((int)data + 0x3e) == ' ') && (*(short *)((int)data + 0x2a) == 0)) &&\n       (((character == '!' || (character == ')')) || ((character == '(' && (data[0xc] == (uint *)0x21)))))) {\n      handle_slave_af(data);\n    }\n    else {\n      data[0x10] = (uint *)((uint)data[0x10] | 4);\n      if (*(char *)((int)data + 0x3e) == '\\x10') {\n        **data = **data | 0x200;\n      }\n      (*data)[5] = 0xfffffbff;\n    }\n  }\n  if (((flag1 & 0x10800) != 0) && ((flag2 & 0x100) != 0)) {\n    data[0x10] = (uint *)((uint)data[0x10] | 8);\n    (*data)[5] = 0xfffff7ff;\n  }\n  if (data[0x10] != (uint *)0x0) {\n    handle_it_error(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052f0": "process_flags_080052f0",
                "param_1": "data",
                "cVar1": "character",
                "puVar2": "pointer",
                "uVar3": "flag1",
                "uVar4": "flag2",
                "I2C_Slave_AF": "handle_slave_af",
                "I2C_ITError": "handle_it_error"
            },
            "calling": [],
            "called": [
                "FUN_08004aec",
                "FUN_08004f3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080052f0": {
                    "1": "update_flags_and_errors",
                    "3": "process_flags",
                    "2": "update_flags_and_values"
                },
                "param_1": {
                    "8": "data",
                    "1": "status_flags",
                    "3": "param",
                    "2": "settings",
                    "7": "parameters"
                },
                "cVar1": {
                    "1": "character_var1",
                    "5": "char_value",
                    "12": "character",
                    "2": "char1",
                    "6": "char_var"
                },
                "puVar2": {
                    "1": "ptr_value",
                    "10": "pointer",
                    "9": "ptr",
                    "2": "pointer1"
                },
                "uVar3": {
                    "1": "status_value",
                    "11": "flag1",
                    "8": "value1"
                },
                "uVar4": {
                    "1": "status_flag2",
                    "8": "value2",
                    "11": "flag2"
                },
                "I2C_Slave_AF": {
                    "3": "handle_slave_af"
                },
                "I2C_ITError": {
                    "3": "handle_it_error"
                },
                "FUN_08004aec": {
                    "1": "update_params1"
                },
                "FUN_08004f3c": {
                    "1": "update_params2"
                }
            }
        },
        "FUN_0800542a": {
            "entrypoint": "0x0800542a",
            "current_name": "get_byte_from_offset_0800542a",
            "code": "\nundefined get_byte_from_offset_0800542a(int offset)\n\n{\n  return *(undefined *)(offset + 0x3d);\n}\n\n",
            "renaming": {
                "FUN_0800542a": "get_byte_from_offset_0800542a",
                "param_1": "offset"
            },
            "calling": [
                "FUN_08007e74",
                "FUN_08007f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800542a": {
                    "4": "get_value_from_offset",
                    "1": "extract_byte_from_address",
                    "9": "get_byte_from_offset",
                    "3": "get_byte_at_offset"
                },
                "param_1": {
                    "4": "base_address",
                    "1": "input_param",
                    "15": "offset",
                    "2": "memory_address"
                },
                "*(undefined *)(param_1 + 0x3d)": {
                    "2": "value_at_offset",
                    "1": "byte_at_offset",
                    "3": "value"
                },
                "0x3d": {
                    "2": "offset"
                },
                "*(undefined *)": {
                    "1": "dereference"
                },
                "param_2": {
                    "1": "new_param_name"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "DAT_": {
                    "1": "dat_"
                },
                "*undefined": {
                    "1": "byte_value"
                },
                "<original_function_name>": {
                    "1": "get_byte_from_offset"
                }
            }
        },
        "FUN_08005430": {
            "entrypoint": "0x08005430",
            "current_name": "get_offset_value_08005430",
            "code": "\nundefined4 get_offset_value_08005430(int base_address)\n\n{\n  return *(undefined4 *)(base_address + 0x40);\n}\n\n",
            "renaming": {
                "FUN_08005430": "get_offset_value_08005430",
                "param_1": "base_address"
            },
            "calling": [
                "FUN_08007e74",
                "FUN_08007f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005430": {
                    "7": "get_offset_value",
                    "1": "get_parameter_value",
                    "2": "get_pointer_value",
                    "3": "get_data_from_offset",
                    "6": "get_value_at_offset",
                    "4": "get_value_from_offset"
                },
                "param_1": {
                    "4": "address",
                    "1": "memory_address",
                    "10": "base_address",
                    "9": "offset",
                    "2": "input_address"
                },
                "param_1 + 0x40": {
                    "1": "ptr_offset"
                },
                "<unnamed_variable>": {
                    "1": "ptr_value"
                },
                "*(undefined4 *)(param_1 + 0x40)": {
                    "3": "value",
                    "1": "value_at_offset_0x40",
                    "4": "offset_value"
                },
                "* (param_1 + 0x40)": {
                    "1": "pointer_from_offset"
                },
                "offset_value": {
                    "1": "calculated_offset"
                },
                "+0x40": {
                    "1": "offset"
                },
                "<variable>": {
                    "1": "<new_variable_name>"
                },
                "0x40": {
                    "1": "offset"
                }
            }
        },
        "FUN_08005434": {
            "entrypoint": "0x08005434",
            "current_name": "calculate_iterations_08005434",
            "code": "\nvoid calculate_iterations_08005434(int input_value)\n\n{\n  bool should_continue;\n  int result;\n  \n  result = input_value * (DAT_20000018 / 8000);\n  do {\n    should_continue = result != 0;\n    result = result + -1;\n  } while (should_continue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005434": "calculate_iterations_08005434",
                "param_1": "input_value",
                "local_4": "result",
                "bVar1": "should_continue"
            },
            "calling": [
                "FUN_08005460"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005434": {
                    "1": "calculate_loop_iterations",
                    "8": "calculate_delay",
                    "18": "calculate_iterations"
                },
                "param_1": {
                    "4": "input",
                    "1": "seconds",
                    "26": "input_value"
                },
                "local_4": {
                    "1": "delayed_iterations",
                    "2": "delay",
                    "4": "calculated_value",
                    "5": "result"
                },
                "bVar1": {
                    "1": "is_not_zero"
                }
            }
        },
        "FUN_08005460": {
            "entrypoint": "0x08005460",
            "current_name": "handle_flags_08005460",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nundefined4 handle_flags_08005460(uint *flags)\n\n{\n  int start_time;\n  int current_time;\n  undefined4 result;\n  uint value;\n  bool flag;\n  \n  if ((*flags & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) != 0)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (flags[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      value = flags[1];\n      if (value == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (value == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (value == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (flags[1] == 0) {\n        start_time = get_current_time();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          current_time = get_current_time();\n          if (100 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        start_time = get_current_time();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          current_time = get_current_time();\n          if (100 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*flags & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (flags[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | flags[5] << 3;\n    }\n    else if (flags[4] == 0) {\n      _DAT_42420000 = 0;\n      start_time = get_current_time();\n      while ((_DAT_40021000 & 2) != 0) {\n        current_time = get_current_time();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      start_time = get_current_time();\n      while ((_DAT_40021000 & 2) == 0) {\n        current_time = get_current_time();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | flags[5] << 3;\n    }\n  }\n  if ((*flags & 8) != 0) {\n    if (flags[6] == 0) {\n      _DAT_42420480 = 0;\n      start_time = get_current_time();\n      while ((_DAT_40021024 & 2) != 0) {\n        current_time = get_current_time();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      start_time = get_current_time();\n      while ((_DAT_40021024 & 2) == 0) {\n        current_time = get_current_time();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n      delay(1);\n    }\n  }\n  if ((*flags & 4) != 0) {\n    flag = (_DAT_4002101c & 0x10000000) == 0;\n    if (flag) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      start_time = get_current_time();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        current_time = get_current_time();\n        if (100 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    value = flags[3];\n    if (value == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (value == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (value == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (flags[3] == 0) {\n      start_time = get_current_time();\n      while ((_DAT_40021020 & 2) != 0) {\n        current_time = get_current_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      start_time = get_current_time();\n      while ((_DAT_40021020 & 2) == 0) {\n        current_time = get_current_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    if (flag) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (flags[7] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (flags[7] == 2) {\n    _DAT_42420060 = 0;\n    start_time = get_current_time();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (flags[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | flags[2];\n        }\n        _DAT_40021004 = _DAT_40021004 & 0xffc2ffff | flags[8] | flags[9];\n        _DAT_42420060 = 1;\n        start_time = get_current_time();\n        do {\n          if ((_DAT_40021000 & 0x2000000) != 0) {\n            return 0;\n          }\n          current_time = get_current_time();\n        } while ((uint)(current_time - start_time) < 3);\n        return 3;\n      }\n      current_time = get_current_time();\n    } while ((uint)(current_time - start_time) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    start_time = get_current_time();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        return 0;\n      }\n      current_time = get_current_time();\n    } while ((uint)(current_time - start_time) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005460": "handle_flags_08005460",
                "param_1": "flags",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "uVar3": "result",
                "uVar4": "value",
                "bVar5": "flag",
                "HAL_GetTick": "get_current_time",
                "RCC_Delay": "delay"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [
                "FUN_08005434",
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005460": {
                    "1": "perform_operation",
                    "2": "process_flags"
                },
                "param_1": {
                    "1": "operation_params",
                    "2": "input_params",
                    "3": "input_data",
                    "4": "parameters",
                    "6": "flags"
                },
                "iVar1": {
                    "1": "tick_start",
                    "28": "start_time"
                },
                "iVar2": {
                    "1": "curr_time",
                    "27": "current_time"
                },
                "uVar3": {
                    "1": "status",
                    "27": "result",
                    "2": "return_value"
                },
                "uVar4": {
                    "1": "param_1_val",
                    "8": "param_value",
                    "2": "temp_var",
                    "13": "value"
                },
                "bVar5": {
                    "10": "flag",
                    "1": "is_condition_satisfied",
                    "2": "is_set",
                    "6": "is_condition_true",
                    "5": "is_flag_set"
                },
                "HAL_GetTick": {
                    "1": "get_tick_count",
                    "3": "get_tick",
                    "2": "get_elapsed_time",
                    "6": "get_current_time"
                },
                "RCC_Delay": {
                    "1": "delay_execution",
                    "8": "delay"
                },
                "PTR_FUN_08003760": {
                    "1": "sub_function"
                },
                "FUN_08005434": {
                    "2": "set_flag",
                    "1": "function1"
                },
                "FUN_08003760": {
                    "1": "check_flag"
                },
                "_DAT_40021004": {
                    "1": "register17"
                },
                "_DAT_40021000": {
                    "1": "register_10",
                    "2": "register2"
                },
                "_DAT_40021020": {
                    "1": "register6"
                },
                "_DAT_4002101c": {
                    "1": "register4"
                },
                "_DAT_40007000": {
                    "1": "register15"
                },
                "_DAT_40021024": {
                    "1": "register6",
                    "2": "register4"
                },
                "_DAT_42420000": {
                    "1": "register_3"
                },
                "_DAT_42420480": {
                    "1": "register_4"
                },
                "_DAT_42420060": {
                    "1": "register19"
                }
            }
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_delay_08005840",
            "code": "\n\n\nuint calculate_delay_08005840(void)\n\n{\n  uint delay;\n  undefined2 multiplier;\n  undefined4 constant1;\n  undefined4 constant2;\n  undefined4 constant2;\n  undefined4 constant4;\n  \n  constant4 = 0x10100f0e;\n  constant2 = 0xd0c0b0a;\n  constant2 = 0x9080706;\n  constant1 = 0x5040302;\n  multiplier = 0x201;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    delay = (uint)*(byte *)((int)&constant1 + ((_DAT_40021004 << 10) >> 0x1c));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      delay = delay * 4000000;\n    }\n    else {\n      delay = (delay * 8000000) /\n              (uint)*(byte *)((int)&multiplier - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n    }\n  }\n  else {\n    delay = 8000000;\n  }\n  return delay;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_delay_08005840",
                "uVar1": "delay",
                "local_1c": "multiplier",
                "uStack_18": "constant1",
                "uStack_14": "constant2",
                "uStack_10": "constant2",
                "uStack_c": "constant4"
            },
            "calling": [
                "FUN_080058d2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005840": {
                    "1": "calculate_descriptive_value",
                    "15": "calculate_delay",
                    "6": "calculate_execution_time",
                    "2": "calculate_processing_time",
                    "3": "calculate_time_delay"
                },
                "uVar1": {
                    "1": "delay_value",
                    "4": "result",
                    "6": "delay"
                },
                "local_1c": {
                    "2": "counter",
                    "1": "user_input",
                    "4": "multiplier"
                },
                "uStack_18": {
                    "1": "offset",
                    "4": "constant1",
                    "2": "byte_value",
                    "3": "value1"
                },
                "uStack_14": {
                    "2": "constant1",
                    "1": "array[1]",
                    "4": "constant2",
                    "3": "constant3"
                },
                "uStack_10": {
                    "1": "multiplier",
                    "3": "value3",
                    "4": "constant3",
                    "2": "value2",
                    "6": "constant2"
                },
                "uStack_c": {
                    "4": "constant4",
                    "1": "stack_var4",
                    "2": "constant3",
                    "3": "value4"
                },
                "_DAT_40021004": {
                    "1": "status_register",
                    "2": "status",
                    "3": "data_register",
                    "4": "register_value"
                },
                "PTR_08005840": {
                    "1": "result"
                }
            }
        },
        "FUN_080058ac": {
            "entrypoint": "0x080058ac",
            "current_name": "initialize_system_080058ac",
            "code": "\n\n\nundefined4 initialize_system_080058ac(uint *config_params,uint config_size)\n\n{\n  int start_time;\n  int current_time;\n  uint sys_clock_freq;\n  \n  if ((_DAT_40022000 & 7) < config_size) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | config_size;\n    if (config_size != (config_size & 7)) {\n      return 1;\n    }\n  }\n  if ((*config_params & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | config_params[2];\n  }\n  if ((*config_params & 1) != 0) {\n    sys_clock_freq = config_params[1];\n    if (sys_clock_freq == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((sys_clock_freq != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = sys_clock_freq | _DAT_40021004 & 0xfffffffc;\n    start_time = get_time();\n    if (config_params[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        current_time = get_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (config_params[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        current_time = get_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        current_time = get_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (config_size < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | config_size;\n    if (config_size != (config_size & 7)) {\n      return 1;\n    }\n  }\n  if ((*config_params & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | config_params[3];\n  }\n  if ((*config_params & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | config_params[4] << 3;\n  }\n  sys_clock_freq = get_sys_clock_frequency();\n  DAT_20000018 = sys_clock_freq >> (&DAT_0800a944)[(_DAT_40021004 << 0x18) >> 0x1c];\n  HAL_InitTick(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080058ac": "initialize_system_080058ac",
                "param_1": "config_params",
                "param_2": "config_size",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "uVar3": "sys_clock_freq",
                "HAL_GetTick": "get_time",
                "HAL_RCC_GetSysClockFreq": "get_sys_clock_frequency"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [
                "FUN_080058d2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080058ac": {
                    "2": "initialize_device",
                    "1": "initialize_clock_configuration",
                    "22": "initialize_system"
                },
                "param_1": {
                    "2": "config_data",
                    "1": "flags",
                    "14": "config_params"
                },
                "param_2": {
                    "1": "param",
                    "12": "config_size",
                    "2": "param_size",
                    "7": "num_params"
                },
                "iVar1": {
                    "1": "start_ticks",
                    "27": "start_time"
                },
                "iVar2": {
                    "1": "curr_time",
                    "26": "current_time"
                },
                "uVar3": {
                    "1": "temp_var",
                    "5": "system_clock_freq",
                    "24": "sys_clock_freq"
                },
                "uint *param_1": {
                    "1": "options"
                },
                "_DAT_40022000": {
                    "1": "clock_config_register"
                },
                "_DAT_40021004": {
                    "1": "device_configuration"
                },
                "HAL_GetTick": {
                    "1": "get_time"
                },
                "HAL_RCC_GetSysClockFreq": {
                    "1": "get_sys_clock_frequency"
                },
                "DAT_20000018": {
                    "1": "sys_clock_divisor"
                }
            }
        },
        "FUN_080058d2": {
            "entrypoint": "0x080058d2",
            "current_name": "initialize_system_080058d2",
            "code": "\n\n\nundefined4 initialize_system_080058d2(uint *flags,uint clock_source)\n\n{\n  int start_time;\n  int current_time;\n  uint sys_clock_freq;\n  \n  if ((*flags & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | flags[2];\n  }\n  if ((*flags & 1) != 0) {\n    sys_clock_freq = flags[1];\n    if (sys_clock_freq == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((sys_clock_freq != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = sys_clock_freq | _DAT_40021004 & 0xfffffffc;\n    start_time = get_current_tick;\n    if (flags[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        current_time = get_current_tick;\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (flags[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        current_time = get_current_tick;\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        current_time = get_current_tick;\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (clock_source < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | clock_source;\n    if (clock_source != (clock_source & 7)) {\n      return 1;\n    }\n  }\n  if ((*flags & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | flags[3];\n  }\n  if ((*flags & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | flags[4] << 3;\n  }\n  sys_clock_freq = get_sys_clock_freq;\n  DAT_20000018 = sys_clock_freq >> (&DAT_0800a944)[(_DAT_40021004 << 0x18) >> 0x1c];\n  initialize_tick(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080058d2": "initialize_system_080058d2",
                "param_1": "flags",
                "param_2": "clock_source",
                "uVar3": "sys_clock_freq",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "HAL_GetTick": "get_current_time",
                "HAL_RCC_GetSysClockFreq": "get_system_clock_freq",
                "HAL_GetTick()": "get_current_tick",
                "HAL_RCC_GetSysClockFreq()": "get_sys_clock_freq",
                "HAL_InitTick": "initialize_tick"
            },
            "calling": [
                "FUN_080058ac"
            ],
            "called": [
                "FUN_08005840",
                "FUN_080036d8",
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080058d2": {
                    "1": "initialize_system_clock",
                    "2": "configure_device",
                    "4": "initialize_hardware",
                    "11": "initialize_system",
                    "9": "initialize_device"
                },
                "param_1": {
                    "5": "device_config",
                    "4": "device_flags",
                    "1": "hardware_config",
                    "9": "flags",
                    "8": "config_flags",
                    "2": "configuration"
                },
                "param_2": {
                    "1": "num_bits",
                    "9": "clock_source",
                    "2": "config_size",
                    "3": "num_channels"
                },
                "uVar3": {
                    "1": "config_option",
                    "2": "system_clock_freq",
                    "16": "sys_clock_freq",
                    "3": "clock_frequency"
                },
                "iVar1": {
                    "24": "start_time",
                    "5": "start_tick"
                },
                "iVar2": {
                    "24": "current_time",
                    "5": "current_tick"
                },
                "_DAT_40021004": {
                    "1": "system_control"
                },
                "_DAT_40021000": {
                    "1": "system_settings2",
                    "2": "device_status"
                },
                "HAL_GetTick": {
                    "3": "get_current_tick",
                    "1": "get_tick_count",
                    "4": "get_current_time"
                },
                "HAL_RCC_GetSysClockFreq": {
                    "3": "get_system_clock_frequency",
                    "1": "get_sys_clock_frequency",
                    "4": "get_system_clock_freq"
                },
                "DAT_20000018": {
                    "1": "system_clock"
                },
                "_DAT_40022000": {
                    "1": "system_settings3",
                    "2": "clock_config"
                },
                "FUN_08005840": {
                    "1": "perform_operation"
                },
                "FUN_080036d8": {
                    "1": "perform_task_a"
                },
                "FUN_08003760": {
                    "1": "initialize_tick"
                },
                "DAT_40022000": {
                    "1": "device_status_register"
                },
                "&DAT_0800a944": {
                    "1": "sys_clock_entry"
                },
                "HAL_GetTick()": {
                    "1": "get_current_tick"
                },
                "HAL_RCC_GetSysClockFreq()": {
                    "1": "get_sys_clock_freq"
                },
                "DAT_0800a944": {
                    "1": "lookup_table"
                },
                "HAL_InitTick": {
                    "1": "initialize_tick"
                }
            }
        },
        "FUN_08005a1c": {
            "entrypoint": "0x08005a1c",
            "current_name": "get_data_08005a1c",
            "code": "\nundefined4 get_data_08005a1c(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_08005a1c": "get_data_08005a1c"
            },
            "calling": [
                "FUN_08005a48",
                "FUN_08005a28",
                "FUN_080035b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005a1c": {
                    "3": "get_dat_value",
                    "2": "get_global_data",
                    "7": "get_data_value",
                    "1": "get_data_pointer",
                    "12": "get_data"
                },
                "DAT_20000018": {
                    "9": "data",
                    "3": "global_variable",
                    "1": "result",
                    "2": "data_value"
                },
                "return_value": {
                    "1": "global_data"
                }
            }
        },
        "FUN_08005a28": {
            "entrypoint": "0x08005a28",
            "current_name": "get_hclk_frequency_08005a28",
            "code": "\n\n\nuint get_hclk_frequency_08005a28(void)\n\n{\n  uint hclk_freq;\n  \n  hclk_freq = get_hclk_frequency_08005a28();\n  return hclk_freq >> (&DAT_0800a954)[(uint)(_DAT_40021004 << 0x15) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08005a28": "get_hclk_frequency_08005a28",
                "uVar1": "hclk_freq",
                "HAL_RCC_GetHCLKFreq": "get_hclk_frequency"
            },
            "calling": [
                "FUN_08006538",
                "FUN_080075dc",
                "FUN_080045c0"
            ],
            "called": [
                "FUN_08005a1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005a28": {
                    "1": "calculate_shifted_frequency",
                    "2": "get_adjusted_frequency",
                    "4": "get_adjusted_hclk_freq",
                    "15": "get_hclk_frequency"
                },
                "uVar1": {
                    "5": "hclk_frequency",
                    "3": "frequency",
                    "1": "clock_frequency",
                    "13": "hclk_freq"
                },
                "_DAT_40021004": {
                    "3": "parameter",
                    "7": "register_value",
                    "2": "reg_value",
                    "1": "system_clock"
                },
                "HAL_RCC_GetHCLKFreq": {
                    "1": "get_rcc_hclk_frequency",
                    "4": "get_hclk_freq",
                    "2": "get_hclk_frequency_value",
                    "5": "get_hclk_frequency"
                },
                "DAT_0800a954": {
                    "1": "frequency_offsets",
                    "5": "shift_array"
                },
                "FUN_08005a1c": {
                    "2": "get_hclk_freq",
                    "1": "get_secondary_value"
                },
                "&DAT_0800a954": {
                    "2": "lookup_table",
                    "1": "lookup_table_1"
                },
                "(uint)(_DAT_40021004 << 0x15) >> 0x1d": {
                    "1": "adjusted_value"
                }
            }
        },
        "FUN_08005a48": {
            "entrypoint": "0x08005a48",
            "current_name": "get_hclk_frequency_08005a48",
            "code": "\n\n\nuint get_hclk_frequency_08005a48(void)\n\n{\n  uint hclk_frequency;\n  \n  hclk_frequency = get_hclk_frequency_08005a48();\n  return hclk_frequency >> (&DAT_0800a954)[(uint)(_DAT_40021004 << 0x12) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08005a48": "get_hclk_frequency_08005a48",
                "uVar1": "hclk_frequency",
                "HAL_RCC_GetHCLKFreq": "get_hclk_frequency"
            },
            "calling": [
                "FUN_08005bb8",
                "FUN_08006538",
                "FUN_080075dc"
            ],
            "called": [
                "FUN_08005a1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005a48": {
                    "1": "calculate_hclk_divider",
                    "4": "get_adjusted_frequency",
                    "7": "get_adjusted_hclk_freq",
                    "10": "get_hclk_frequency"
                },
                "_DAT_40021004": {
                    "2": "input",
                    "1": "system_clock",
                    "5": "some_value",
                    "4": "input_value",
                    "3": "register_value"
                },
                "uVar1": {
                    "10": "hclk_frequency",
                    "1": "adjusted_frequency",
                    "2": "frequency",
                    "8": "hclk_freq"
                },
                "HAL_RCC_GetHCLKFreq": {
                    "8": "get_hclk_frequency",
                    "1": "get_current_hclk_freq",
                    "7": "get_hclk_freq"
                },
                "&DAT_0800a954": {
                    "1": "offsets",
                    "2": "shift_array"
                },
                "DAT_0800a954": {
                    "3": "shift_values",
                    "1": "divider_table",
                    "2": "shift_amount"
                },
                "FUN_08005a1c": {
                    "2": "get_hclk_freq",
                    "1": "get_hclk_frequency"
                },
                "_DAT_0800a954": {
                    "1": "shift_values"
                }
            }
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "initialize_parameters_08005a68",
            "code": "\n\n\nvoid initialize_parameters_08005a68(undefined4 *output_array,uint *input_array)\n\n{\n  *output_array = 0xf;\n  output[1] = _DAT_40021004 & 3;\n  output[2] = _DAT_40021004 & 0xf0;\n  output[3] = _DAT_40021004 & 0x700;\n  output[4] = _DAT_40021004 >> 3 & 0x700;\n  *input_array = _DAT_40022000 & 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "initialize_parameters_08005a68",
                "param_1": "output_array",
                "param_2": "input_array",
                "param_1[1]": "output[1]",
                "param_1[2]": "output[2]",
                "param_1[3]": "output[3]",
                "param_1[4]": "output[4]"
            },
            "calling": [
                "FUN_080075dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005a68": {
                    "4": "initialize_params",
                    "1": "initialize_function",
                    "2": "set_param_values",
                    "13": "initialize_parameters",
                    "3": "initialize_data"
                },
                "param_1": {
                    "16": "output_array",
                    "1": "array_to_initialize",
                    "2": "result",
                    "3": "output_values"
                },
                "param_2": {
                    "1": "input_settings",
                    "2": "input_params",
                    "8": "input_array",
                    "3": "input_values"
                },
                "_DAT_40021004": {
                    "1": "register_value",
                    "2": "data_value",
                    "3": "input_value1",
                    "10": "input_data"
                },
                "_DAT_40022000": {
                    "1": "data_value_2",
                    "3": "data_register_2",
                    "2": "hardware_data"
                },
                "output_array": {
                    "1": "output"
                },
                "base_address": {
                    "1": "base_addr"
                },
                "input_data": {
                    "1": "input"
                },
                "base_data": {
                    "1": "base_data"
                },
                "outputArray": {
                    "1": "output_array"
                },
                "inputArray": {
                    "1": "input_array"
                },
                "*param_1": {
                    "1": "output[0]"
                },
                "param_1[1]": {
                    "1": "output[1]"
                },
                "param_1[2]": {
                    "1": "output[2]"
                },
                "param_1[3]": {
                    "1": "output[3]"
                },
                "param_1[4]": {
                    "1": "output[4]"
                },
                "*param_2": {
                    "1": "flags[0]"
                }
            }
        },
        "FUN_08005aa4": {
            "entrypoint": "0x08005aa4",
            "current_name": "update_registers_08005aa4",
            "code": "\n\n\nundefined4 update_registers_08005aa4(uint *config)\n\n{\n  uint temp_var1;\n  uint temp_var2;\n  int start_time;\n  int current_time;\n  bool is_flag_set;\n  \n  if ((*config & 1) != 0) {\n    is_flag_set = (_DAT_4002101c & 0x10000000) == 0;\n    if (is_flag_set) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      start_time = get_current_time();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        current_time = get_current_time();\n        if (100 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    if (((_DAT_40021020 & 0x300) != 0) && ((_DAT_40021020 & 0x300) != (config[1] & 0x300))) {\n      temp_var2 = _DAT_40021020 & 0xfffffcff;\n      _DAT_42420440 = 0;\n      temp_var1 = _DAT_40021020 & 1;\n      _DAT_40021020 = temp_var2;\n      if (temp_var1 != 0) {\n        start_time = get_current_time();\n        while ((_DAT_40021020 & 2) == 0) {\n          current_time = get_current_time();\n          if (5000 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffcff | config[1];\n    if (is_flag_set) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if ((*config & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffff3fff | config[2];\n  }\n  if ((*config & 0x10) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffbfffff | config[3];\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005aa4": "update_registers_08005aa4",
                "param_1": "config",
                "uVar1": "temp_var1",
                "uVar2": "temp_var2",
                "iVar3": "start_time",
                "iVar4": "current_time",
                "bVar5": "is_flag_set",
                "HAL_GetTick()": "get_current_time()",
                "HAL_GetTick": "get_current_time"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005aa4": {
                    "1": "update_flags_and_values",
                    "4": "configure_device",
                    "2": "initialize_peripheral",
                    "3": "initialize_device",
                    "5": "update_registers"
                },
                "param_1": {
                    "4": "config",
                    "3": "config_params",
                    "1": "peripheral_config",
                    "2": "configuration"
                },
                "uVar1": {
                    "1": "result",
                    "5": "flag1",
                    "3": "temp1",
                    "10": "temp_var1"
                },
                "uVar2": {
                    "1": "temp_mask",
                    "2": "temp_flag",
                    "10": "temp_var2",
                    "3": "temp2",
                    "4": "flag2"
                },
                "iVar3": {
                    "1": "time_start",
                    "25": "start_time"
                },
                "iVar4": {
                    "1": "timestamp_current",
                    "2": "current_tick",
                    "26": "current_time"
                },
                "bVar5": {
                    "4": "flag",
                    "2": "bit_flag",
                    "1": "was_flag_set",
                    "11": "is_flag_set",
                    "3": "is_bit_set"
                },
                "_DAT_4002101c": {
                    "1": "device_register1",
                    "2": "flag_register1",
                    "6": "register1"
                },
                "_DAT_40007000": {
                    "1": "hardware_reg2",
                    "2": "hardware_register2",
                    "6": "register2"
                },
                "_DAT_40021020": {
                    "1": "status_register",
                    "6": "register3",
                    "2": "hardware_register3"
                },
                "_DAT_42420440": {
                    "1": "register_4",
                    "4": "register4"
                },
                "_DAT_40021004": {
                    "1": "device_control_reg",
                    "4": "register5"
                },
                "HAL_GetTick()": {
                    "1": "get_current_time()"
                },
                "_DAT_40021020 & 1": {
                    "1": "bitmask_flag1"
                },
                "_DAT_40021020 & 2": {
                    "1": "bitmask_flag2"
                },
                "_DAT_40021020 & 0xfffffcff": {
                    "1": "flag_mask"
                },
                "_DAT_40021020 & 0x300": {
                    "1": "flag_mask2"
                },
                "5000": {
                    "1": "timeout"
                },
                "HAL_GetTick": {
                    "1": "get_tick",
                    "2": "get_current_time"
                }
            }
        },
        "FUN_08005bb8": {
            "entrypoint": "0x08005bb8",
            "current_name": "calculate_clock_frequency_08005bb8",
            "code": "\n\n\nuint calculate_clock_frequency_08005bb8(int clock_type)\n\n{\n  uint frequency;\n  undefined2 prescaler;\n  undefined4 multiplier;\n  undefined4 divider;\n  undefined4 divider;\n  undefined4 constant;\n  \n  constant = 0x10100f0e;\n  divider = 0xd0c0b0a;\n  divider = 0x9080706;\n  multiplier = 0x5040302;\n  prescaler = 0x201;\n  if (clock_type == 2) {\n    frequency = get_pclk2_frequency();\n    frequency = frequency / ((((_DAT_40021004 << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (clock_type == 0x10) {\n    if ((_DAT_40021000 & 0x1000000) == 0) {\n      frequency = 0;\n    }\n    else {\n      if ((_DAT_40021004 & 0x10000) == 0) {\n        frequency = 4000000;\n      }\n      else {\n        frequency = 8000000 / *(byte *)((int)&prescaler - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n      }\n      frequency = frequency * *(byte *)((int)&multiplier + ((_DAT_40021004 << 10) >> 0x1c));\n      if ((_DAT_40021004 & 0x400000) == 0) {\n        frequency = (frequency * 2) / 3;\n      }\n    }\n  }\n  else if (clock_type == 1) {\n    if ((_DAT_40021020 & 0x302) == 0x102) {\n      frequency = 0x8000;\n    }\n    else if (((_DAT_40021020 & 0x300) == 0x200) && ((_DAT_40021024 & 2) != 0)) {\n      frequency = 32000;\n    }\n    else if ((_DAT_40021020 & 0x300) == 0x300) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        frequency = 0;\n      }\n      else {\n        frequency = 0xf424;\n      }\n    }\n    else {\n      frequency = 0;\n    }\n  }\n  else {\n    frequency = 0;\n  }\n  return frequency;\n}\n\n",
            "renaming": {
                "FUN_08005bb8": "calculate_clock_frequency_08005bb8",
                "param_1": "clock_type",
                "uVar1": "frequency",
                "local_24": "prescaler",
                "uStack_20": "multiplier",
                "uStack_1c": "divider",
                "uStack_18": "divider",
                "uStack_14": "constant",
                "HAL_RCC_GetPCLK2Freq": "get_pclk2_frequency"
            },
            "calling": [
                "FUN_08003e20",
                "FUN_0800376c"
            ],
            "called": [
                "FUN_08005a48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005bb8": {
                    "16": "calculate_clock_frequency",
                    "2": "calculate_frequency",
                    "3": "calculate_clock_freq",
                    "10": "get_clock_frequency"
                },
                "param_1": {
                    "3": "clock_source",
                    "1": "input_param",
                    "8": "clock_type",
                    "5": "mode"
                },
                "uVar1": {
                    "16": "frequency",
                    "2": "clock_freq",
                    "1": "freq",
                    "12": "clock_frequency"
                },
                "local_24": {
                    "2": "prescalar",
                    "1": "flag_value",
                    "3": "counter",
                    "10": "prescaler",
                    "4": "multiplier"
                },
                "uStack_20": {
                    "3": "constant4",
                    "1": "value2",
                    "2": "value1",
                    "13": "multiplier"
                },
                "uStack_1c": {
                    "5": "divider",
                    "1": "offset",
                    "2": "value2",
                    "3": "constant_value3",
                    "4": "constant3"
                },
                "uStack_18": {
                    "5": "divider",
                    "2": "value3",
                    "1": "value4",
                    "3": "constant",
                    "4": "constant2"
                },
                "uStack_14": {
                    "2": "constant2",
                    "1": "stack_value_4",
                    "4": "constant1",
                    "10": "constant"
                },
                "_DAT_40021004": {
                    "1": "reg1"
                },
                "_DAT_40021000": {
                    "1": "register2"
                },
                "_DAT_40021020": {
                    "1": "reg3"
                },
                "_DAT_40021024": {
                    "1": "register4"
                },
                "HAL_RCC_GetPCLK2Freq": {
                    "2": "get_pclk2_frequency"
                }
            }
        },
        "FUN_08005cb4": {
            "entrypoint": "0x08005cb4",
            "current_name": "initialize_alarm_08005cb4",
            "code": "\n\n\nvoid initialize_alarm_08005cb4(uint **alarm_params)\n\n{\n  if (((**alarm_params & 2) != 0) && (((*alarm_params)[1] & 2) != 0)) {\n    trigger_alarm_callback;\n    (*alarm_params)[1] = 0xfffffffd;\n  }\n  _DAT_40010414 = 0x20000;\n  *(undefined *)((int)alarm_params + 0x11) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cb4": "initialize_alarm_08005cb4",
                "param_1": "alarm_params",
                "HAL_RTC_AlarmAEventCallback": "handle_alarm_event",
                "HAL_RTC_AlarmAEventCallback()": "trigger_alarm_callback"
            },
            "calling": [],
            "called": [
                "FUN_080073c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005cb4": {
                    "1": "check_and_set_rtc_alarm",
                    "2": "initialize_rtc_alarm",
                    "3": "handle_alarm_event",
                    "4": "initialize_alarm"
                },
                "param_1": {
                    "1": "arguments",
                    "6": "alarm_params",
                    "4": "alarm_settings",
                    "3": "param",
                    "2": "alarm_data"
                },
                "(*param_1)[1]": {
                    "1": "alarm_data_value_1"
                },
                "_DAT_40010414": {
                    "1": "gpio_register",
                    "2": "status_register"
                },
                "*(undefined *)((int)param_1 + 0x11)": {
                    "4": "flag",
                    "2": "some_variable",
                    "1": "alarm_enabled_indicator"
                },
                "HAL_RTC_AlarmAEventCallback": {
                    "3": "handle_rtc_alarm_event",
                    "1": "alarm_callback",
                    "11": "handle_alarm_event"
                },
                "**param_1": {
                    "1": "value_at_param",
                    "2": "rtc_params_value",
                    "3": "alarm_params_value"
                },
                "*param_1": {
                    "1": "rtc_params_array"
                },
                "DAT_40010414": {
                    "1": "memory_address"
                },
                "FUN_080073c0": {
                    "1": "perform_additional_setup"
                },
                "param_1[1]": {
                    "1": "alarm_status_flag"
                },
                "(int)param_1 + 0x11": {
                    "2": "param_offset",
                    "1": "parameter_offset"
                },
                "PTR_XXX": {
                    "1": "new_variable_name"
                },
                "PTR_080073c0": {
                    "1": "sub_function_address"
                },
                "& 2": {
                    "1": "is_flag_set"
                },
                "HAL_RTC_AlarmAEventCallback()": {
                    "1": "invoke_alarm_callback",
                    "2": "trigger_alarm_callback"
                },
                "0xfffffffd": {
                    "1": "new_alarm_value"
                },
                "int_param_1": {
                    "1": "temp_variable"
                },
                "int param_1": {
                    "1": "param_address"
                }
            }
        },
        "FUN_08005cec": {
            "entrypoint": "0x08005cec",
            "current_name": "update_data_08005cec",
            "code": "\nvoid update_data_08005cec(int base_address,uint *parameters)\n\n{\n  uint updated_value1;\n  uint updated_value2;\n  uint updated_value3;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xfffffffe;\n  updated_value2 = *(uint *)(base_address + 4);\n  updated_value3 = *parameters;\n  updated_value1 = *(uint *)(base_address + 0x20) & 0xfffffffd | third_register_value;\n  if (base_address == 0x40012c00) {\n    updated_value1 = (updated_value1 & 0xfffffff7 | fourth_register_value) & 0xfffffffb;\n    updated_value2 = updated_value2 & 0xfffffcff | fifth_register_value | sixth_register_value;\n  }\n  *(uint *)(base_address + 4) = updated_value2;\n  *(uint *)(base_address + 0x18) = *(uint *)(base_address + 0x18) & 0xffffff8c | updated_value3;\n  *(uint *)(base_address + 0x34) = new_value;\n  *(uint *)(base_address + 0x20) = updated_value1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cec": "update_data_08005cec",
                "param_1": "base_address",
                "param_2": "parameters",
                "uVar1": "updated_value1",
                "uVar2": "updated_value2",
                "uVar3": "updated_value3",
                "param_2[2]": "third_register_value",
                "param_2[3]": "fourth_register_value",
                "param_2[5]": "fifth_register_value",
                "param_2[6]": "sixth_register_value",
                "param_2[1]": "new_value"
            },
            "calling": [
                "FUN_08006186",
                "FUN_08006128"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005cec": {
                    "1": "set_flags_and_values",
                    "2": "update_parameter",
                    "3": "update_param_values",
                    "4": "update_registers",
                    "7": "update_data",
                    "5": "update_parameters"
                },
                "param_1": {
                    "2": "data_address",
                    "3": "param_address",
                    "1": "value_ptr",
                    "13": "base_address"
                },
                "param_2": {
                    "2": "config_data",
                    "3": "param_values",
                    "4": "param_array",
                    "1": "new_data",
                    "5": "parameters"
                },
                "uVar1": {
                    "2": "updated_register1",
                    "1": "modified_field1",
                    "5": "updated_var1",
                    "10": "updated_value1"
                },
                "uVar2": {
                    "1": "flag2",
                    "10": "updated_value2",
                    "2": "updated_value_2",
                    "5": "updated_var2"
                },
                "uVar3": {
                    "1": "modified_param1",
                    "2": "updated_value_3",
                    "9": "updated_value3",
                    "5": "updated_var3"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "flags"
                },
                "*(uint *)(param_1 + 4)": {
                    "1": "register2_value"
                },
                "*param_2": {
                    "1": "first_register_value"
                },
                "param_2[2]": {
                    "1": "third_register_value"
                },
                "param_1 == 0x40012c00": {
                    "1": "is_specific_value"
                },
                "param_2[3]": {
                    "1": "new_flag2"
                },
                "param_2[5]": {
                    "1": "new_flag3"
                },
                "param_2[6]": {
                    "1": "new_flag4"
                },
                "*(uint *)(param_1 + 0x18)": {
                    "1": "value2"
                },
                "*(uint *)(param_1 + 0x34)": {
                    "1": "register3_value"
                },
                "param_1 + 0x20": {
                    "1": "new_flag_ptr"
                },
                "param_1 + 4": {
                    "1": "param2_pointer"
                },
                "param_1 + 0x18": {
                    "1": "original_address_value_pointer"
                },
                "param_1 + 0x34": {
                    "1": "config_field_d"
                },
                "0x20": {
                    "1": "offset1"
                },
                "0x18": {
                    "1": "offset2"
                },
                "0x34": {
                    "1": "offset3"
                },
                "0xfffffffe": {
                    "1": "bit_mask1"
                },
                "0xfffffffd": {
                    "1": "bit_mask2"
                },
                "0xfffffff7": {
                    "1": "bit_mask3"
                },
                "0xfffffffb": {
                    "1": "bit_mask4"
                },
                "0x40012c00": {
                    "1": "constant_addr"
                },
                "param_2[1]": {
                    "1": "new_value"
                }
            }
        },
        "FUN_08005d48": {
            "entrypoint": "0x08005d48",
            "current_name": "update_parameters_08005d48",
            "code": "\nvoid update_parameters_08005d48(int base_address,uint *parameters)\n\n{\n  uint updated_value1;\n  uint updated_value2;\n  uint updated_value3;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xfffffeff;\n  updated_value2 = *(uint *)(base_address + 4);\n  updated_value3 = *parameters;\n  updated_value1 = *(uint *)(base_address + 0x20) & 0xfffffdff | config_value5 << 8;\n  if (base_address == 0x40012c00) {\n    updated_value1 = (updated_value1 & 0xfffff7ff | config_value6 << 8) & 0xfffffbff;\n    updated_value2 = updated_value2 & 0xffffcfff | config_value7 << 4 | config_value8 << 4;\n  }\n  *(uint *)(base_address + 4) = updated_value2;\n  *(uint *)(base_address + 0x1c) = *(uint *)(base_address + 0x1c) & 0xffffff8c | updated_value3;\n  *(uint *)(base_address + 0x3c) = config_value4;\n  *(uint *)(base_address + 0x20) = updated_value1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d48": "update_parameters_08005d48",
                "param_1": "base_address",
                "param_2": "parameters",
                "uVar1": "updated_value1",
                "uVar2": "updated_value2",
                "uVar3": "updated_value3",
                "param_2[1]": "config_value4",
                "param_2[2]": "config_value5",
                "param_2[3]": "config_value6",
                "param_2[5]": "config_value7",
                "param_2[6]": "config_value8"
            },
            "calling": [
                "FUN_08006186",
                "FUN_08006128"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005d48": {
                    "2": "update_config",
                    "1": "update_data_values",
                    "5": "update_data",
                    "3": "update_configuration",
                    "8": "update_parameters"
                },
                "param_1": {
                    "3": "data_address",
                    "1": "parameter",
                    "5": "config_address",
                    "10": "base_address"
                },
                "param_2": {
                    "4": "data",
                    "1": "input_data",
                    "3": "param_array",
                    "2": "params_array",
                    "7": "parameters",
                    "5": "config_data"
                },
                "uVar1": {
                    "1": "modified_field1",
                    "2": "updated_flags",
                    "3": "modified_value1",
                    "4": "updated_var1",
                    "14": "updated_value1"
                },
                "uVar2": {
                    "1": "updated_device_state2",
                    "3": "modified_value2",
                    "14": "updated_value2",
                    "4": "updated_var2",
                    "2": "original_value"
                },
                "uVar3": {
                    "1": "parameter_value",
                    "2": "new_value",
                    "12": "updated_value3",
                    "4": "updated_var3"
                },
                "0x20": {
                    "1": "offset1"
                },
                "0x1c": {
                    "1": "offset2"
                },
                "0x3c": {
                    "1": "offset3"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "config_value1"
                },
                "*(uint *)(param_1 + 4)": {
                    "1": "config_value2"
                },
                "*(uint *)(param_1 + 0x1c)": {
                    "1": "config_value3"
                },
                "param_2[1]": {
                    "1": "value_at_index1"
                },
                "param_2[2]": {
                    "1": "value_at_index2"
                },
                "param_2[3]": {
                    "1": "config_value6"
                },
                "param_2[5]": {
                    "1": "value_at_index5"
                },
                "param_2[6]": {
                    "1": "value_at_index6"
                },
                "* (param_1 + 0x20)": {
                    "1": "parameter1"
                },
                "* (param_1 + 4)": {
                    "1": "parameter2"
                },
                "* (param_1 + 0x1c)": {
                    "1": "parameter3"
                },
                "* (param_1 + 0x3c)": {
                    "1": "parameter4"
                },
                "param_1 + 0x20": {
                    "1": "address_plus20"
                },
                "param_1 + 4": {
                    "1": "address_plus4"
                },
                "param_1 + 0x1c": {
                    "1": "address_plus1_c"
                },
                "param_1 + 0x3c": {
                    "1": "address_plus3_c"
                }
            }
        },
        "FUN_08005dac": {
            "entrypoint": "0x08005dac",
            "current_name": "update_data_08005dac",
            "code": "\nvoid update_data_08005dac(int data_address,int *param_array)\n\n{\n  uint value1;\n  int value1;\n  int value2;\n  \n  *(uint *)(data_address + 0x20) = *(uint *)(data_address + 0x20) & 0xffffefff;\n  value1 = *(uint *)(data_address + 4);\n  value1 = *param_array;\n  value2 = param_array[2];\n  if (data_address == 0x40012c00) {\n    value1 = value1 & 0xffffbfff | param_array[5] << 6;\n  }\n  *(uint *)(data_address + 4) = value1;\n  *(uint *)(data_address + 0x1c) = *(uint *)(data_address + 0x1c) & 0xffff8cff | value1 << 8;\n  *(int *)(data_address + 0x40) = param_array[1];\n  *(uint *)(data_address + 0x20) = *(uint *)(data_address + 0x20) & 0xffffdfff | value2 << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005dac": "update_data_08005dac",
                "param_1": "data_address",
                "param_2": "param_array",
                "uVar1": "value1",
                "iVar2": "value1",
                "iVar3": "value2"
            },
            "calling": [
                "FUN_08006186",
                "FUN_08006128"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005dac": {
                    "1": "initialize_data",
                    "4": "update_memory",
                    "5": "update_parameters",
                    "2": "update_param",
                    "6": "update_data"
                },
                "param_1": {
                    "2": "param1",
                    "1": "base_addr",
                    "3": "memory_address",
                    "4": "base_address",
                    "6": "data_address"
                },
                "param_2": {
                    "3": "params",
                    "2": "config_data",
                    "1": "data_arr",
                    "7": "param_array",
                    "4": "parameters"
                },
                "uVar1": {
                    "1": "current_value",
                    "3": "param1_value",
                    "2": "value",
                    "5": "value1"
                },
                "iVar2": {
                    "1": "param_1_value",
                    "11": "value1",
                    "4": "value2",
                    "2": "first_param"
                },
                "iVar3": {
                    "1": "third_param",
                    "2": "param3_value",
                    "4": "value3",
                    "11": "value2"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "address_value1"
                },
                "*(uint *)(param_1 + 4)": {
                    "1": "address_value2"
                },
                "*(uint *)(param_1 + 0x1c)": {
                    "1": "address_value3"
                },
                "*(int *)(param_1 + 0x40)": {
                    "1": "address_value4"
                },
                "*(int *)(param_1 + 0x20)": {
                    "1": "address_value5"
                }
            }
        },
        "FUN_08005df4": {
            "entrypoint": "0x08005df4",
            "current_name": "deinit_timers_08005df4",
            "code": "\nvoid deinit_timers_08005df4(uint **timers)\n\n{\n  uint *timer_data;\n  \n  *(undefined *)((int)timers + 0x3d) = 2;\n  timer_data = *timers;\n  if ((timer_data[8] & 0x1111) == 0) {\n    if ((timer_data[8] & 0x444) == 0) {\n      *timer_data = *timer_data & 0xfffffffe;\n    }\n  }\n  deinitialize_timer(timers);\n  *(undefined *)((int)timers + 0x3d) = 0;\n  *(undefined *)(timers + 0xf) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005df4": "deinit_timers_08005df4",
                "param_1": "timers",
                "puVar1": "timer_data",
                "HAL_TIM_OC_MspDeInit": "deinitialize_timer"
            },
            "calling": [
                "FUN_080076e0"
            ],
            "called": [
                "FUN_08007710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005df4": {
                    "3": "deinit_timer",
                    "1": "init_timers",
                    "4": "initialize_timer",
                    "2": "deinit_tim_oc",
                    "6": "deinit_timers"
                },
                "param_1": {
                    "1": "input_array",
                    "2": "input_data",
                    "6": "timer",
                    "3": "timer_ptr"
                },
                "puVar1": {
                    "6": "timer_data",
                    "1": "timer_val",
                    "2": "timer_config",
                    "3": "timer_data_ptr",
                    "5": "timer_ptr"
                },
                "HAL_TIM_OC_MspDeInit": {
                    "1": "deinit_timer",
                    "5": "deinitialize_timer",
                    "2": "deinit_timer_oc"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "timer_data->status"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "timer_data->flag"
                },
                "*puVar1": {
                    "1": "timer_config->control"
                },
                "FUN_08007710": {
                    "1": "deinitialize_timer_hardware"
                }
            }
        },
        "FUN_08005e2e": {
            "entrypoint": "0x08005e2e",
            "current_name": "initialize_pwm_08005e2e",
            "code": "\nvoid initialize_pwm_08005e2e(uint **config)\n\n{\n  uint *timer_data;\n  \n  *(undefined *)((int)config + 0x3d) = 2;\n  timer_data = *config;\n  if ((timer_data[8] & 0x1111) == 0) {\n    if ((timer_data[8] & 0x444) == 0) {\n      *timer_data = *timer_data & 0xfffffffe;\n    }\n  }\n  deinitialize_pwm_08005e2e(config);\n  *(undefined *)((int)config + 0x3d) = 0;\n  *(undefined *)(config + 0xf) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e2e": "initialize_pwm_08005e2e",
                "param_1": "config",
                "puVar1": "timer_data",
                "HAL_TIM_PWM_MspDeInit": "deinitialize_pwm"
            },
            "calling": [
                "FUN_080071e4"
            ],
            "called": [
                "FUN_08007110"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005e2e": {
                    "1": "deinit_and_disable_pwm",
                    "2": "update_pwm_channel",
                    "6": "initialize_pwm",
                    "3": "deinit_pwm_timer",
                    "4": "deinitialize_pwm"
                },
                "param_1": {
                    "1": "input_pointer",
                    "3": "config",
                    "2": "timer_params"
                },
                "puVar1": {
                    "1": "timer_register",
                    "4": "timer_data",
                    "2": "timer"
                },
                "HAL_TIM_PWM_MspDeInit": {
                    "1": "disable_pwm_msp",
                    "3": "deinitialize_tim_pwm",
                    "6": "deinitialize_pwm",
                    "2": "deinit_pwm_peripherals"
                },
                "*param_1": {
                    "1": "p_params"
                },
                "0x3d": {
                    "1": "some_constant"
                },
                "8": {
                    "1": "some_offset"
                },
                "0x1111": {
                    "1": "check_value1"
                },
                "0x444": {
                    "1": "bit_mask2"
                },
                "0xfffffffe": {
                    "1": "masked_value"
                }
            }
        },
        "FUN_08005e68": {
            "entrypoint": "0x08005e68",
            "current_name": "FUNC_08005e68",
            "code": "\nvoid FUNC_08005e68(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e68": "FUNC_08005e68"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6a": {
            "entrypoint": "0x08005e6a",
            "current_name": "FUNC_08005e6a",
            "code": "\nvoid FUNC_08005e6a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6a": "FUNC_08005e6a"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6c": {
            "entrypoint": "0x08005e6c",
            "current_name": "FUNC_08005e6c",
            "code": "\nvoid FUNC_08005e6c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6c": "FUNC_08005e6c"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6e": {
            "entrypoint": "0x08005e6e",
            "current_name": "handle_timers_08005e6e",
            "code": "\nvoid handle_timers_08005e6e(int *timer_data)\n\n{\n  int timer_value;\n  \n  timer_value = *timer_data;\n  if (((*(uint *)(timer_value + 0x10) & 2) != 0) && ((*(uint *)(timer_value + 0xc) & 2) != 0)) {\n    *(undefined4 *)(timer_value + 0x10) = 0xfffffffd;\n    *(undefined *)(timer_data + 7) = 1;\n    if ((*(uint *)(*timer_data + 0x18) & 3) == 0) {\n      handle_oc_delay_elapsed_callback();\n      handle_pwm_pulse_finished_callback(timer_data);\n    }\n    else {\n      handle_ic_capture_callback();\n    }\n    *(undefined *)(timer_data + 7) = 0;\n  }\n  timer_value = *timer_data;\n  if (((*(uint *)(timer_value + 0x10) & 4) != 0) && ((*(uint *)(timer_value + 0xc) & 4) != 0)) {\n    *(undefined4 *)(timer_value + 0x10) = 0xfffffffb;\n    *(undefined *)(timer_data + 7) = 2;\n    if ((*(uint *)(*timer_data + 0x18) & 0x300) == 0) {\n      handle_oc_delay_elapsed_callback(timer_data);\n      handle_pwm_pulse_finished_callback(timer_data);\n    }\n    else {\n      handle_ic_capture_callback(timer_data);\n    }\n    *(undefined *)(timer_data + 7) = 0;\n  }\n  timer_value = *timer_data;\n  if (((*(uint *)(timer_value + 0x10) & 8) != 0) && ((*(uint *)(timer_value + 0xc) & 8) != 0)) {\n    *(undefined4 *)(timer_value + 0x10) = 0xfffffff7;\n    *(undefined *)(timer_data + 7) = 4;\n    if ((*(uint *)(*timer_data + 0x1c) & 3) == 0) {\n      handle_oc_delay_elapsed_callback(timer_data);\n      handle_pwm_pulse_finished_callback(timer_data);\n    }\n    else {\n      handle_ic_capture_callback(timer_data);\n    }\n    *(undefined *)(timer_data + 7) = 0;\n  }\n  timer_value = *timer_data;\n  if (((*(uint *)(timer_value + 0x10) & 0x10) != 0) && ((*(uint *)(timer_value + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(timer_value + 0x10) = 0xffffffef;\n    *(undefined *)(timer_data + 7) = 8;\n    if ((*(uint *)(*timer_data + 0x1c) & 0x300) == 0) {\n      handle_oc_delay_elapsed_callback(timer_data);\n      handle_pwm_pulse_finished_callback(timer_data);\n    }\n    else {\n      handle_ic_capture_callback(timer_data);\n    }\n    *(undefined *)(timer_data + 7) = 0;\n  }\n  timer_value = *timer_data;\n  if (((*(uint *)(timer_value + 0x10) & 1) != 0) && ((*(uint *)(timer_value + 0xc) & 1) != 0)) {\n    *(undefined4 *)(timer_value + 0x10) = 0xfffffffe;\n    handle_period_elapsed_callback(timer_data);\n  }\n  timer_value = *timer_data;\n  if (((*(uint *)(timer_value + 0x10) & 0x80) != 0) && ((*(uint *)(timer_value + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(timer_value + 0x10) = 0xffffff7f;\n    handle_break_callback(timer_data);\n  }\n  timer_value = *timer_data;\n  if (((*(uint *)(timer_value + 0x10) & 0x40) != 0) && ((*(uint *)(timer_value + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(timer_value + 0x10) = 0xffffffbf;\n    handle_trigger_callback(timer_data);\n  }\n  timer_value = *timer_data;\n  if (((*(uint *)(timer_value + 0x10) & 0x20) != 0) && ((*(uint *)(timer_value + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(timer_value + 0x10) = 0xffffffdf;\n    handle_commutation_callback(timer_data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6e": "handle_timers_08005e6e",
                "param_1": "timer_data",
                "iVar1": "timer_value",
                "HAL_TIM_OC_DelayElapsedCallback": "handle_oc_delay_elapsed_callback",
                "HAL_TIM_PWM_PulseFinishedCallback": "handle_pwm_pulse_finished_callback",
                "HAL_TIM_IC_CaptureCallback": "handle_ic_capture_callback",
                "HAL_TIM_PeriodElapsedCallback": "handle_period_elapsed_callback",
                "HAL_TIMEx_BreakCallback": "handle_break_callback",
                "HAL_TIM_TriggerCallback": "handle_trigger_callback",
                "HAL_TIMEx_CommutationCallback": "handle_commutation_callback"
            },
            "calling": [],
            "called": [
                "FUN_080064ac",
                "FUN_0800771c",
                "FUN_08007736",
                "FUN_08005e6c",
                "FUN_08005e68",
                "FUN_08005e6a",
                "FUN_080064ae"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005e6e": {
                    "1": "process_callback_flags",
                    "4": "process_callbacks",
                    "2": "process_interrupt",
                    "10": "handle_timers",
                    "3": "process_timers"
                },
                "param_1": {
                    "1": "timer_data_ptr",
                    "4": "timer",
                    "5": "timer_data",
                    "3": "timers",
                    "2": "timer_ptr"
                },
                "iVar1": {
                    "1": "timer_ptr",
                    "2": "timer_data",
                    "9": "timer_value",
                    "4": "data_value"
                },
                "HAL_TIM_OC_DelayElapsedCallback": {
                    "1": "handle_output_compare_delay_elapsed",
                    "3": "handle_oc_delay_elapsed",
                    "5": "handle_delay_elapsed_callback",
                    "8": "handle_oc_delay_elapsed_callback"
                },
                "HAL_TIM_PWM_PulseFinishedCallback": {
                    "9": "handle_pwm_pulse_finished_callback",
                    "1": "handle_pulse_finished",
                    "4": "handle_pulse_finished_callback",
                    "3": "handle_pwm_pulse_finished"
                },
                "HAL_TIM_IC_CaptureCallback": {
                    "3": "handle_ic_capture",
                    "10": "handle_ic_capture_callback",
                    "1": "handle_input_capture"
                },
                "HAL_TIM_PeriodElapsedCallback": {
                    "13": "handle_period_elapsed_callback",
                    "4": "handle_period_elapsed",
                    "1": "handle_timer_period_elapsed_callback"
                },
                "HAL_TIMEx_BreakCallback": {
                    "1": "handle_ex_break_callback",
                    "4": "handle_break",
                    "12": "handle_break_callback"
                },
                "HAL_TIM_TriggerCallback": {
                    "4": "handle_trigger",
                    "1": "handle_timer_trigger_callback",
                    "13": "handle_trigger_callback"
                },
                "HAL_TIMEx_CommutationCallback": {
                    "4": "handle_commutation",
                    "1": "handle_timer_ex_commutation_callback",
                    "12": "handle_commutation_callback"
                },
                "FUNC_080064ac": {
                    "1": "tim_oc_delay_elapsed_callback",
                    "4": "hal_tim_oc_delay_elapsed_callback"
                },
                "FUN_0800771c": {
                    "1": "tim_pwm_pulse_finished_callback",
                    "4": "hal_tim_pwm_pulse_finished_callback"
                },
                "FUN_08007736": {
                    "4": "hal_tim_ic_capture_callback",
                    "1": "tim_ic_capture_callback"
                },
                "FUNC_08005e6c": {
                    "4": "hal_tim_period_elapsed_callback",
                    "1": "tim_oc_delay_elapsed_callback"
                },
                "FUNC_08005e68": {
                    "1": "tim_pwm_pulse_finished_callback",
                    "4": "hal_tim_ex_break_callback"
                },
                "FUNC_08005e6a": {
                    "4": "hal_tim_trigger_callback",
                    "1": "tim_ic_capture_callback"
                },
                "FUNC_080064ae": {
                    "4": "hal_tim_ex_commutation_callback",
                    "1": "tim_period_elapsed_callback"
                },
                "*(uint *)(iVar1 + 0x10)": {
                    "1": "interrupt_status"
                },
                "*(uint *)(iVar1 + 0xc)": {
                    "1": "interrupt_flags"
                },
                "*param_1": {
                    "1": "timer_struct"
                }
            }
        },
        "FUN_08005fe8": {
            "entrypoint": "0x08005fe8",
            "current_name": "update_memory_08005fe8",
            "code": "\nvoid update_memory_08005fe8(uint *memory_block,uint *new_values)\n\n{\n  uint original_value;\n  \n  original_value = *memory_block;\n  if ((((memory_block == (uint *)0x40012c00) || (memory_block == (uint *)0x40000000)) ||\n      (memory_block == (uint *)0x40000400)) || (memory_block == (uint *)0x40000800)) {\n    original_value = original_value & 0xffffff8f | new_values[1];\n  }\n  if (((memory_block == (uint *)0x40012c00) || (memory_block == (uint *)0x40000000)) ||\n     ((memory_block == (uint *)0x40000400 || (memory_block == (uint *)0x40000800)))) {\n    original_value = original_value & 0xfffffcff | new_values[3];\n  }\n  *memory_block = original_value & 0xffffff7f | new_values[5];\n  source[11] = new_values[2];\n  source[10] = *new_values;\n  if (memory_block == (uint *)0x40012c00) {\n    special_value = new_values[4];\n  }\n  memory_block[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005fe8": "update_memory_08005fe8",
                "param_1": "memory_block",
                "param_2": "new_values",
                "uVar1": "original_value",
                "uRam40012c30": "special_value",
                "param_1[0xb]": "source[11]",
                "param_1[10]": "source[10]"
            },
            "calling": [
                "FUN_08006092",
                "FUN_08006060"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005fe8": {
                    "1": "apply_patch",
                    "13": "update_memory",
                    "3": "update_param_values",
                    "4": "update_registers",
                    "2": "update_parameters"
                },
                "param_1": {
                    "1": "current_values",
                    "5": "memory_block",
                    "3": "register1",
                    "2": "source",
                    "4": "memory_address"
                },
                "param_2": {
                    "3": "data_block",
                    "1": "new_data",
                    "5": "new_values"
                },
                "uVar1": {
                    "1": "current_value",
                    "4": "temp_value",
                    "2": "temp1",
                    "5": "updated_value",
                    "9": "original_value"
                },
                "uRam40012c30": {
                    "1": "saved_param_value",
                    "4": "special_value"
                },
                "*param_1": {
                    "1": "current_param"
                },
                "*param_2": {
                    "1": "source_param"
                },
                "param_1[0xb]": {
                    "1": "source[11]"
                },
                "param_1[10]": {
                    "1": "source[10]"
                }
            }
        },
        "FUN_08006060": {
            "entrypoint": "0x08006060",
            "current_name": "initialize_timer_08006060",
            "code": "\nundefined4 initialize_timer_08006060(undefined4 *timer_config)\n\n{\n  if (timer_config != (undefined4 *)0x0) {\n    if (*(char *)((int)timer_config + 0x3d) == '\\0') {\n      *(undefined *)(timer_config + 0xf) = 0;\n      initialize_timer_08006060_irq;\n    }\n    *(undefined *)((int)timer_config + 0x3d) = 2;\n    configure_timer(*timer_config,timer_config + 1);\n    *(undefined *)((int)timer_config + 0x3d) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08006060": "initialize_timer_08006060",
                "param_1": "timer_config",
                "HAL_TIM_OC_MspInit": "initialize_tim_oc_msp",
                "TIM_Base_SetConfig": "configure_timer",
                "HAL_TIM_OC_MspInit()": "initialize_timer_irq"
            },
            "calling": [
                "FUN_08007648"
            ],
            "called": [
                "FUN_08005fe8",
                "FUN_08007708"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006060": {
                    "10": "initialize_tim_oc",
                    "1": "initialize_tim",
                    "17": "initialize_timer",
                    "2": "initialize_timers"
                },
                "param_1": {
                    "1": "timer_settings",
                    "3": "config",
                    "12": "timer_config",
                    "6": "config_ptr",
                    "2": "timer"
                },
                "HAL_TIM_OC_MspInit": {
                    "2": "initialize_tim_oc_msp_init",
                    "1": "initialize_timer_specific",
                    "7": "initialize_tim_oc_msp"
                },
                "FUN_08005fe8": {
                    "1": "set_timer_config",
                    "2": "set_tim_base_config",
                    "4": "configure_timer"
                },
                "param_2": {
                    "2": "config",
                    "1": "timer_params"
                },
                "FUN_08007708": {
                    "1": "initialize_hal",
                    "2": "initialize_tim_base"
                },
                "TIM_Base_SetConfig": {
                    "2": "set_timer_config",
                    "1": "configure_tim_base",
                    "4": "configure_timer"
                },
                "PTR_FUN_08005fe8": {
                    "1": "calculate_param"
                },
                "PTR_FUN_08007708": {
                    "1": "perform_action"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "timer_status",
                    "2": "timer_enabled"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "config_ptr->initialized_flag",
                    "3": "timer_initialized"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "2": "timer_status",
                    "1": "timer_config->state"
                },
                "param_1 + 1": {
                    "1": "config_param"
                },
                "return 0": {
                    "2": "success"
                },
                "return 1": {
                    "2": "failure"
                },
                "uint *param_1": {
                    "1": "input_param_1"
                },
                "uint *param_2": {
                    "1": "input_param_2"
                },
                "*param_1": {
                    "1": "config_ptr->tim_instance",
                    "3": "timer_instance"
                },
                "0x0": {
                    "1": "null"
                },
                "(int)param_1 + 0x3d": {
                    "1": "timer_config_offset"
                },
                "param_1[0]": {
                    "1": "timer"
                },
                "param_1[1]": {
                    "1": "config"
                },
                "0": {
                    "2": "success"
                },
                "1": {
                    "2": "failure"
                },
                "HAL_TIM_OC_MspInit()": {
                    "1": "initialize_timer_irq"
                },
                "TIM_Base_SetConfig(*param_1,param_1 + 1)": {
                    "1": "configure_timer"
                }
            }
        },
        "FUN_08006092": {
            "entrypoint": "0x08006092",
            "current_name": "FUNC_08006092",
            "code": "\nundefined4 FUNC_08006092(undefined4 *param_1)\n\n{\n  if (param_1 != (undefined4 *)0x0) {\n    if (*(char *)((int)param_1 + 0x3d) == '\\0') {\n      *(undefined *)(param_1 + 0xf) = 0;\n      HAL_TIM_PWM_MspInit();\n    }\n    *(undefined *)((int)param_1 + 0x3d) = 2;\n    TIM_Base_SetConfig(*param_1,param_1 + 1);\n    *(undefined *)((int)param_1 + 0x3d) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08006092": "FUNC_08006092"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08005fe8",
                "FUN_08006e68"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080060c4": {
            "entrypoint": "0x080060c4",
            "current_name": "update_configuration_080060c4",
            "code": "\nvoid update_configuration_080060c4(int base_address,int *parameters)\n\n{\n  uint updated_value1;\n  uint updated_value2;\n  int input_value;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xffffffef;\n  updated_value2 = *(uint *)(base_address + 4);\n  input_value = *parameters;\n  updated_value1 = *(uint *)(base_address + 0x20) & 0xffffffdf | data_array_element2 << 4;\n  if (base_address == 0x40012c00) {\n    updated_value1 = (updated_value1 & 0xffffff7f | data_array_element3 << 4) & 0xffffffbf;\n    updated_value2 = updated_value2 & 0xfffff3ff | data_array_element5 << 2 | data_array_element6 << 2;\n  }\n  *(uint *)(base_address + 4) = updated_value2;\n  *(uint *)(base_address + 0x18) = *(uint *)(base_address + 0x18) & 0xffff8cff | input_value << 8;\n  *(int *)(base_address + 0x38) = parameters[1];\n  *(uint *)(base_address + 0x20) = updated_value1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060c4": "update_configuration_080060c4",
                "param_1": "base_address",
                "param_2": "parameters",
                "uVar1": "updated_value1",
                "uVar2": "updated_value2",
                "iVar3": "input_value",
                "param_2[2]": "data_array_element2",
                "param_2[3]": "data_array_element3",
                "param_2[5]": "data_array_element5",
                "param_2[6]": "data_array_element6"
            },
            "calling": [
                "FUN_08006186",
                "FUN_08006128"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080060c4": {
                    "2": "update_config",
                    "1": "update_param_values",
                    "6": "update_parameters",
                    "8": "update_configuration",
                    "4": "update_data",
                    "3": "update_flags_and_values"
                },
                "param_1": {
                    "4": "address",
                    "6": "config_address",
                    "1": "base_addr",
                    "11": "base_address",
                    "2": "configuration_address",
                    "3": "data_address"
                },
                "param_2": {
                    "1": "input_data",
                    "3": "params",
                    "4": "params_array",
                    "6": "parameters",
                    "5": "config_data"
                },
                "uVar1": {
                    "1": "modified_flag1",
                    "4": "modified_value1",
                    "13": "updated_value1",
                    "2": "updated_config1"
                },
                "uVar2": {
                    "1": "updated_flag",
                    "4": "modified_value2",
                    "13": "updated_value2",
                    "2": "updated_config2",
                    "3": "updated_value"
                },
                "iVar3": {
                    "8": "param_value",
                    "2": "value",
                    "10": "input_value",
                    "1": "config_data1"
                },
                "param_2[2]": {
                    "1": "param_list_value2"
                },
                "param_2[3]": {
                    "1": "config_data3"
                },
                "param_2[5]": {
                    "1": "param2_value5"
                },
                "param_2[6]": {
                    "1": "param_value6"
                },
                "param_1 + 0x20": {
                    "1": "register_a"
                },
                "param_1 + 4": {
                    "1": "data_offset"
                },
                "param_1 + 0x18": {
                    "1": "data_address_offset2"
                },
                "param_1 + 0x38": {
                    "1": "param_offset2"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "2": "config_value1",
                    "1": "param1_mod_value1"
                },
                "*(uint *)(param_1 + 4)": {
                    "1": "flag2",
                    "2": "config_value2"
                },
                "*(uint *)(param_1 + 0x18)": {
                    "2": "config_value3",
                    "1": "param1_mod_value3"
                },
                "*(int *)(param_1 + 0x38)": {
                    "1": "param1_mod_value4",
                    "2": "config_value4"
                },
                "*(uint *)(param_1 + 0x20) & 0xffffffef": {
                    "1": "mod_param1_value1"
                },
                "param_2[2] << 4": {
                    "1": "shifted_param2_value2"
                },
                "param_2[3] << 4": {
                    "1": "shifted_param2_value3"
                },
                "param_2[5] << 2 | param_2[6] << 2": {
                    "1": "shifted_param2_value5and6"
                },
                "*(uint *)(param_1 + 0x18) & 0xffff8cff": {
                    "1": "mod_param1_value3"
                },
                "uVar1 & 0xffffff7f | param_2[3] << 4": {
                    "1": "updated_value3"
                },
                "uVar1 & 0xffffff7f | param_2[3] << 4) & 0xffffffbf": {
                    "1": "mod_updated_value3and4"
                },
                "uVar2 & 0xfffff3ff | param_2[5] << 2 | param_2[6] << 2": {
                    "1": "updated_value4"
                },
                "(param_1 + 0x4), (param_1 + 0x20), (param_1 + 0x18), (param_1 + 0x38)": {
                    "1": "modified_values"
                },
                "uVar1_1": {
                    "1": "updated_value1_1"
                },
                "uVar2_1": {
                    "1": "updated_value2_1"
                }
            }
        },
        "FUN_08006128": {
            "entrypoint": "0x08006128",
            "current_name": "configure_tim_oc_08006128",
            "code": "\nundefined4 configure_tim_oc_08006128(undefined4 *config,undefined4 param_2,undefined4 channel)\n\n{\n  if (*(char *)(config + 0xf) != '\\x01') {\n    *(undefined *)(config + 0xf) = 1;\n    *(undefined *)((int)config + 0x3d) = 2;\n    switch(channel) {\n    case 0:\n      configure_tim_oc_080061281(*config);\n      break;\n    case 4:\n      configure_tim_oc_080061282(*config);\n      break;\n    case 8:\n      configure_tim_oc_080061283(*config);\n      break;\n    case 0xc:\n      configure_tim_oc_080061284(*config);\n    }\n    *(undefined *)((int)config + 0x3d) = 1;\n    *(undefined *)(config + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08006128": "configure_tim_oc_08006128",
                "param_1": "config",
                "param_3": "channel",
                "TIM_OC1_SetConfig": "configure_tim_oc1",
                "TIM_OC2_SetConfig": "configure_tim_oc2",
                "TIM_OC3_SetConfig": "configure_tim_oc3",
                "TIM_OC4_SetConfig": "configure_tim_oc4",
                "switch(param_3)": "switch(channel)"
            },
            "calling": [
                "FUN_08007648"
            ],
            "called": [
                "FUN_08005cec",
                "FUN_08005dac",
                "FUN_08005d48",
                "FUN_080060c4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006128": {
                    "4": "configure_timer_output",
                    "1": "configure_tim_output_compare",
                    "10": "configure_tim_oc",
                    "2": "configure_timer_output_channel"
                },
                "param_1": {
                    "5": "config_array",
                    "14": "config",
                    "1": "config_ptr",
                    "4": "config_data",
                    "2": "config_params"
                },
                "param_2": {
                    "3": "channel",
                    "1": "value_ptr",
                    "2": "mode",
                    "10": "param_2"
                },
                "param_3": {
                    "3": "param3",
                    "2": "oc_channel",
                    "1": "param_3",
                    "4": "output_channel",
                    "10": "channel"
                },
                "TIM_OC1_SetConfig": {
                    "2": "set_config_for_channel1",
                    "1": "set_timer_output_channel1_config",
                    "4": "configure_tim_oc1"
                },
                "TIM_OC2_SetConfig": {
                    "1": "set_tim_config_ch2",
                    "4": "configure_tim_oc2",
                    "2": "set_config_for_channel2"
                },
                "TIM_OC3_SetConfig": {
                    "1": "configure_tim_oc_channel3",
                    "4": "configure_tim_oc3",
                    "2": "set_config_for_channel3"
                },
                "TIM_OC4_SetConfig": {
                    "2": "configure_output_channel4",
                    "1": "configure_oc4",
                    "4": "configure_tim_oc4"
                },
                "*(char *)(param_1 + 0xf)": {
                    "2": "flag",
                    "1": "config_params->initialized"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "config_params->status"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "flag_value"
                },
                "switch(param_3)": {
                    "1": "switch(channel)"
                },
                "param_1 + 0xf": {
                    "1": "config_array[15]"
                },
                "(int)param_1 + 0x3d": {
                    "1": "config_array[61]"
                },
                "*param_1": {
                    "1": "config_value"
                },
                "0x01": {
                    "1": "enabled"
                },
                "1": {
                    "1": "enabled"
                },
                "2": {
                    "1": "disabled"
                },
                "4": {
                    "1": "channel_1"
                },
                "8": {
                    "1": "channel_2"
                },
                "0xc": {
                    "1": "channel_3"
                },
                "0": {
                    "1": "channel_4"
                }
            }
        },
        "FUN_08006186": {
            "entrypoint": "0x08006186",
            "current_name": "configure_tim_oc_08006186",
            "code": "\nundefined4 configure_tim_oc_08006186(int *config,int config_data,undefined4 channel)\n\n{\n  if (*(char *)(config + 0xf) != '\\x01') {\n    *(undefined *)(config + 0xf) = 1;\n    *(undefined *)((int)config + 0x3d) = 2;\n    switch(channel) {\n    case 0:\n      configure_tim_oc_080061861(*config);\n      *(uint *)(*config + 0x18) = *(uint *)(*config + 0x18) | 8;\n      *(uint *)(*config + 0x18) = *(uint *)(*config + 0x18) & 0xfffffffb;\n      *(uint *)(*config + 0x18) = *(uint *)(*config + 0x18) | *(uint *)(config_data + 0x10);\n      break;\n    case 4:\n      configure_tim_oc_080061862(*config);\n      *(uint *)(*config + 0x18) = *(uint *)(*config + 0x18) | 0x800;\n      *(uint *)(*config + 0x18) = *(uint *)(*config + 0x18) & 0xfffffbff;\n      *(uint *)(*config + 0x18) = *(uint *)(*config + 0x18) | *(int *)(config_data + 0x10) << 8;\n      break;\n    case 8:\n      configure_tim_oc_080061863(*config);\n      *(uint *)(*config + 0x1c) = *(uint *)(*config + 0x1c) | 8;\n      *(uint *)(*config + 0x1c) = *(uint *)(*config + 0x1c) & 0xfffffffb;\n      *(uint *)(*config + 0x1c) = *(uint *)(*config + 0x1c) | *(uint *)(config_data + 0x10);\n      break;\n    case 0xc:\n      configure_tim_oc_080061864(*config);\n      *(uint *)(*config + 0x1c) = *(uint *)(*config + 0x1c) | 0x800;\n      *(uint *)(*config + 0x1c) = *(uint *)(*config + 0x1c) & 0xfffffbff;\n      *(uint *)(*config + 0x1c) = *(uint *)(*config + 0x1c) | *(int *)(config_data + 0x10) << 8;\n    }\n    *(undefined *)((int)config + 0x3d) = 1;\n    *(undefined *)(config + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08006186": "configure_tim_oc_08006186",
                "param_1": "config",
                "param_2": "config_data",
                "param_3": "channel",
                "TIM_OC1_SetConfig": "configure_tim_oc1",
                "TIM_OC2_SetConfig": "configure_tim_oc2",
                "TIM_OC3_SetConfig": "configure_tim_oc3",
                "TIM_OC4_SetConfig": "configure_tim_oc4"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08005cec",
                "FUN_08005dac",
                "FUN_08005d48",
                "FUN_080060c4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006186": {
                    "6": "configure_tim_oc",
                    "1": "configure_timer_output_channel",
                    "2": "configure_tim_channel",
                    "3": "configure_tim_output_compare"
                },
                "param_1": {
                    "1": "tim_config",
                    "7": "timer_config",
                    "2": "timer",
                    "3": "config_data"
                },
                "param_2": {
                    "1": "config_param",
                    "4": "param_value",
                    "3": "data",
                    "2": "input_data",
                    "10": "config_data"
                },
                "param_3": {
                    "2": "config_type",
                    "1": "config_option",
                    "3": "output_channel",
                    "13": "channel",
                    "4": "channel_index"
                },
                "TIM_OC1_SetConfig": {
                    "4": "configure_output_channel1",
                    "1": "set_timer_oc1_configuration",
                    "2": "set_tim_oc1_config",
                    "8": "configure_tim_oc1"
                },
                "TIM_OC2_SetConfig": {
                    "1": "set_config_oc2",
                    "2": "configure_oc2",
                    "8": "configure_tim_oc2",
                    "4": "configure_output_channel2"
                },
                "TIM_OC3_SetConfig": {
                    "1": "set_timer_oc3_config",
                    "8": "configure_tim_oc3",
                    "4": "configure_output_channel3",
                    "2": "configure_oc3"
                },
                "TIM_OC4_SetConfig": {
                    "8": "configure_tim_oc4",
                    "1": "set_oc4_config",
                    "2": "configure_oc4",
                    "4": "configure_output_channel4"
                },
                "param_1 + 0xf": {
                    "1": "channel_enabled_flag"
                },
                "(int)param_1 + 0x3d": {
                    "1": "temporary_var"
                },
                "*param_1": {
                    "1": "tim_oc_base"
                },
                "*(uint *)(*param_1 + 0x18)": {
                    "1": "tim_oc_config1"
                },
                "*(int *)(param_2 + 0x10)": {
                    "1": "data->value"
                },
                "*param_1 + 0x1c": {
                    "1": "tim_oc_config2"
                },
                "*(char *)(param_1 + 0xf)": {
                    "1": "config->flag"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "timer_config->flag"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "timer_config->value"
                },
                "*(uint *)(param_2 + 0x10)": {
                    "1": "data->value"
                },
                "*(uint *)(*param_1 + 0x1c)": {
                    "1": "timer_regs_0x1c"
                },
                "FUN_08005cec": {
                    "2": "tim_oc1_set_config"
                },
                "FUN_08005dac": {
                    "2": "tim_oc2_set_config"
                },
                "FUN_08005d48": {
                    "2": "tim_oc3_set_config"
                },
                "FUN_080060c4": {
                    "2": "tim_oc4_set_config"
                }
            }
        },
        "FUN_08006262": {
            "entrypoint": "0x08006262",
            "current_name": "update_bit_08006262",
            "code": "\nvoid update_bit_08006262(int base_address,uint bit_position,int new_value)\n\n{\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) bit_mask ~(1 << (bit_position bit_mask 0xff));\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) | new_value << (bit_position bit_mask 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006262": "update_bit_08006262",
                "param_1": "base_address",
                "param_2": "bit_position",
                "param_3": "new_value",
                "&": "bit_mask"
            },
            "calling": [
                "FUN_08006280",
                "FUN_08006390",
                "FUN_080063c0",
                "FUN_080062f4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006262": {
                    "7": "update_bitwise_value",
                    "1": "update_flags",
                    "9": "update_bit",
                    "3": "update_bits",
                    "2": "set_bit_value",
                    "5": "update_bit_value"
                },
                "param_1": {
                    "3": "address",
                    "5": "data",
                    "1": "data_address",
                    "17": "base_address",
                    "2": "data_ptr"
                },
                "param_2": {
                    "24": "bit_position",
                    "6": "bit_index",
                    "1": "bit_offset"
                },
                "param_3": {
                    "4": "value",
                    "13": "new_value",
                    "12": "bit_value",
                    "2": "value_to_set"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "flags"
                },
                "param_2 & 0xff": {
                    "1": "bit_mask"
                },
                "1 << (param_2 & 0xff)": {
                    "4": "bit_mask"
                },
                "param_1 + 0x20": {
                    "1": "bitwise_address"
                },
                "* (param_1 + 0x20)": {
                    "1": "value"
                },
                "&": {
                    "1": "bit_mask"
                },
                "|": {
                    "1": "bitwise_or"
                },
                "param_3 << (param_2 & 0xff)": {
                    "1": "bit_value_shifted"
                }
            }
        },
        "FUN_08006280": {
            "entrypoint": "0x08006280",
            "current_name": "update_timers_08006280",
            "code": "\nundefined4 update_timers_08006280(u_int **param_array,undefined4 channel)\n\n{\n  switch(channel) {\n  case 0:\n    (*param_array)[3] = (*param_array)[3] | 2;\n    break;\n  case 4:\n    (*param_array)[3] = (*param_array)[3] | 4;\n    break;\n  case 8:\n    (*param_array)[3] = (*param_array)[3] | 8;\n    break;\n  case 0xc:\n    (*param_array)[3] = (*param_array)[3] | 0x10;\n  }\n  enable_timer_channel(*param_array,channel,1);\n  if (*param_array == (u_int *)0x40012c00) {\n    timer_status = timer_status | 0x8000;\n  }\n  **param_array = **param_array | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006280": "update_timers_08006280",
                "param_1": "param_array",
                "param_2": "channel",
                "uRam40012c44": "timer_status",
                "TIM_CCxChannelCmd": "enable_timer_channel",
                "uint": "u_int"
            },
            "calling": [
                "FUN_08007648"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006280": {
                    "3": "update_timers",
                    "1": "update_channel_status",
                    "2": "set_tim_channel_and_flags"
                },
                "param_1": {
                    "1": "config_ptr",
                    "8": "param_array",
                    "2": "channel",
                    "3": "timer_config"
                },
                "param_2": {
                    "2": "flag",
                    "5": "channel_index",
                    "1": "channel_id",
                    "3": "value",
                    "6": "channel"
                },
                "param_3": {
                    "2": "unused"
                },
                "uRam40012c44": {
                    "1": "timer_register",
                    "2": "timer_control_value",
                    "3": "status_register",
                    "5": "timer_status"
                },
                "TIM_CCxChannelCmd": {
                    "1": "set_tim_channel_cmd",
                    "2": "toggle_channel_command",
                    "4": "enable_timer_channel",
                    "3": "set_channel_command"
                },
                "DAT_40012c00": {
                    "1": "timer_base_address"
                },
                "(*param_1)[3]": {
                    "1": "tim_cr3",
                    "2": "param_array[3]"
                },
                "**param_1": {
                    "1": "timer_value_pointer",
                    "2": "timer_value"
                },
                "(*param_1)": {
                    "1": "param_array_pointer"
                },
                "0x40012c00": {
                    "1": "target_address"
                },
                "1": {
                    "1": "enabled"
                },
                "0x8000": {
                    "1": "flag_8000"
                },
                "uint": {
                    "1": "u_int"
                },
                "switch": {
                    "1": "switch"
                },
                "case 0": {
                    "1": "case0"
                },
                "case 4": {
                    "1": "case4"
                },
                "case 8": {
                    "1": "case8"
                },
                "case 0xc": {
                    "1": "case_c"
                },
                "PTR_DAT_40012c44": {
                    "1": "tim_config"
                },
                "(*param_1)[0]": {
                    "1": "channel_config[0]"
                },
                "*param_1": {
                    "1": "timer_register_pointer"
                },
                "PTR_40012c44": {
                    "1": "timer_flag_pointer"
                },
                "param_1[0][3]": {
                    "1": "timer_config[0][3]"
                },
                "param_1[0]": {
                    "1": "timer_config[0]"
                },
                "timerConfig[0][0]": {
                    "1": "timer_config[0][0]"
                },
                "PTR_FUN_08006262": {
                    "1": "set_fun08006262"
                },
                "FUN_08006262_param_1": {
                    "1": "param1"
                },
                "FUN_08006262_param_2": {
                    "1": "param2"
                },
                "FUN_08006262_param_3": {
                    "1": "param3"
                },
                "(uint *)0x40012c00": {
                    "1": "tim_memory"
                }
            }
        },
        "FUN_080062f4": {
            "entrypoint": "0x080062f4",
            "current_name": "update_and_configure_timer_080062f4",
            "code": "\nundefined4 update_and_configure_timer_080062f4(uint **timer_config,undefined4 channel)\n\n{\n  uint *timer_ptr;\n  \n  switch(channel) {\n  case 0:\n    (*timer_config)[3] = (*timer_config)[3] & 0xfffffffd;\n    break;\n  case 4:\n    (*timer_config)[3] = (*timer_config)[3] & 0xfffffffb;\n    break;\n  case 8:\n    (*timer_config)[3] = (*timer_config)[3] & 0xfffffff7;\n    break;\n  case 0xc:\n    (*timer_config)[3] = (*timer_config)[3] & 0xffffffef;\n  }\n  configure_timer_channel(*timer_config,channel,0);\n  if (((*timer_config == (uint *)0x40012c00) && ((memory_address2 & 0x1111) == 0)) &&\n     ((memory_address2 & 0x444) == 0)) {\n    memory_address3 = memory_address3 & 0xffff7fff;\n  }\n  timer_ptr = *timer_config;\n  if (((config[8] & 0x1111) == 0) && ((config[8] & 0x444) == 0)) {\n    *timer_ptr = *timer_ptr & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080062f4": "update_and_configure_timer_080062f4",
                "param_1": "timer_config",
                "param_2": "channel",
                "puVar1": "timer_ptr",
                "TIM_CCxChannelCmd": "configure_timer_channel",
                "uRam40012c20": "memory_address2",
                "uRam40012c44": "memory_address3",
                "puVar1[8]": "config[8]"
            },
            "calling": [
                "FUN_080076e0"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080062f4": {
                    "1": "clear_bitwise_flags",
                    "2": "update_register_value"
                },
                "param_1": {
                    "1": "timer_register",
                    "2": "timer_array",
                    "3": "timer",
                    "5": "timer_config"
                },
                "param_2": {
                    "1": "config_code",
                    "2": "mode",
                    "4": "value",
                    "11": "channel"
                },
                "puVar1": {
                    "2": "temp_pointer",
                    "1": "current_value",
                    "3": "timer_ptr"
                },
                "TIM_CCxChannelCmd": {
                    "1": "disable_channel",
                    "2": "update_channel_cmd"
                },
                "uRam40012c00": {
                    "1": "timer_base",
                    "3": "memory_address1",
                    "2": "timer_base_address"
                },
                "uRam40012c20": {
                    "3": "memory_address2",
                    "1": "register2",
                    "2": "constant2"
                },
                "uRam40012c44": {
                    "1": "register2",
                    "3": "memory_address3",
                    "2": "constant3"
                },
                "param_3": {
                    "1": "additional_param"
                },
                "puVar1[8]": {
                    "1": "timer_reg2"
                },
                "*param_1": {
                    "1": "param_array_value"
                },
                "(*param_1)[3]": {
                    "1": "timer_config_ptr[3]"
                },
                "(*param_1)": {
                    "1": "param_ptr"
                },
                "param_1[8]": {
                    "1": "timer_config_ptr[8]"
                }
            }
        },
        "FUN_08006390": {
            "entrypoint": "0x08006390",
            "current_name": "configure_tim_c_cx_channel_08006390",
            "code": "\nundefined4 configure_tim_c_cx_channel_08006390(unsigned_int **channel,undefined4 channel_number)\n\n{\n  set_channel_command(*channel,channel_number,1);\n  if (*channel == (unsigned_int *)0x40012c00) {\n    timer_status = timer_status | 0x8000;\n  }\n  **channel = **channel | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006390": "configure_tim_c_cx_channel_08006390",
                "param_1": "channel",
                "param_2": "channel_number",
                "uRam40012c44": "timer_status",
                "TIM_CCxChannelCmd": "set_channel_command",
                "uint": "unsigned_int"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006390": {
                    "1": "set_ccx_channel_command",
                    "2": "configure_timer_channel",
                    "3": "configure_timer",
                    "4": "configure_tim_c_cx_channel"
                },
                "param_1": {
                    "1": "array_of_pointers",
                    "3": "channel_ptr",
                    "4": "timer_channel",
                    "2": "timer_ptr"
                },
                "param_2": {
                    "2": "channel_config",
                    "1": "channel_val",
                    "4": "channel_number",
                    "3": "command"
                },
                "**param_1": {
                    "1": "tim_channel",
                    "2": "timer_value"
                },
                "uRam40012c44": {
                    "1": "timer_register",
                    "3": "timer_control_register",
                    "2": "status_register",
                    "6": "timer_status"
                },
                "*param_1": {
                    "1": "timer_instance"
                },
                "TIM_CCxChannelCmd": {
                    "1": "configure_channel"
                },
                "uint": {
                    "2": "unsigned_int",
                    "1": "u_int"
                },
                "FUN_08006262": {
                    "1": "configure_timer_channel"
                },
                "PTR_0x40012c44": {
                    "1": "timer_status_register"
                },
                "DAT_0x40012c00": {
                    "1": "timer_base_address"
                },
                "PTR_DAT_40012c00": {
                    "1": "timer_base_address"
                },
                "param_3": {
                    "1": "param_3"
                },
                "PTR_FUN_08006262": {
                    "1": "set_c_cx_channel"
                },
                "0x40012c00": {
                    "1": "timer_base_address"
                },
                "setChannelCCxCmd": {
                    "1": "set_channel_capture_compare_cmd"
                },
                "(uint *)0x40012c00": {
                    "1": "ccx_ptr_value"
                }
            }
        },
        "FUN_080063c0": {
            "entrypoint": "0x080063c0",
            "current_name": "configure_tim_c_cx_channel_080063c0",
            "code": "\nundefined4 configure_tim_c_cx_channel_080063c0(uint **timer_config,undefined4 channel)\n\n{\n  uint *channel_ptr;\n  \n  TIM_CCxChannelCmd(*timer_config,channel,0);\n  if (((*timer_config == (uint *)0x40012c00) && ((timer_status & 0x1111) == 0)) &&\n     ((timer_status & 0x444) == 0)) {\n    timer_control = timer_control & 0xffff7fff;\n  }\n  channel_ptr = *timer_config;\n  if (((tim_configuration_register & 0x1111) == 0) && ((tim_configuration_register & 0x444) == 0)) {\n    *channel_ptr = *channel_ptr & 0xfffffffe;\n  }\n  *(undefined *)((int)timer_config + 0x3d) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080063c0": "configure_tim_c_cx_channel_080063c0",
                "param_1": "timer_config",
                "param_2": "channel",
                "puVar1": "channel_ptr",
                "uRam40012c20": "timer_status",
                "uRam40012c44": "timer_control",
                "puVar1[8]": "tim_configuration_register"
            },
            "calling": [
                "FUN_080071e4"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080063c0": {
                    "1": "initialize_tim_cc_channel",
                    "2": "configure_timer_channel",
                    "4": "initialize_timers",
                    "3": "initialize_timer_channel",
                    "7": "configure_tim_c_cx_channel"
                },
                "param_1": {
                    "1": "tim_parameter",
                    "4": "timer_ptr",
                    "7": "timer_config",
                    "3": "timer_array",
                    "2": "channel_pointer"
                },
                "param_2": {
                    "2": "command",
                    "4": "channel_number",
                    "1": "channel_parameter",
                    "7": "channel",
                    "3": "channel_config"
                },
                "puVar1": {
                    "1": "pointer_value",
                    "2": "channel_ptr_value",
                    "4": "channel_ptr",
                    "3": "current_timer"
                },
                "uRam40012c00": {
                    "1": "tim_address",
                    "4": "timer_base_address"
                },
                "uRam40012c20": {
                    "1": "tim_condition_mask",
                    "3": "timer_status",
                    "2": "timer_config1"
                },
                "uRam40012c44": {
                    "1": "timer_status",
                    "2": "timer_config2",
                    "3": "timer_control"
                },
                "param_3": {
                    "1": "unknown_param"
                },
                "FUN_08006262": {
                    "1": "configure_timer_channel",
                    "2": "configure_channel"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "flag_variable"
                },
                "param_1[8]": {
                    "1": "ptr_value"
                },
                "param_1 + 0x3d": {
                    "1": "status_byte"
                },
                "puVar1[8]": {
                    "1": "tim_configuration_register"
                }
            }
        },
        "FUN_08006420": {
            "entrypoint": "0x08006420",
            "current_name": "update_flags_08006420",
            "code": "\nvoid update_flags_08006420(int base_address,unsigned_int bit_position,int new_value)\n\n{\n  *(unsigned_int *)(base_address + 0x20) = *(unsigned_int *)(base_address + 0x20) & ~(4 << (bit_position & 0xff));\n  *(unsigned_int *)(base_address + 0x20) = *(unsigned_int *)(base_address + 0x20) | new_value << (bit_position & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006420": "update_flags_08006420",
                "param_1": "base_address",
                "param_2": "bit_position",
                "param_3": "new_value",
                "uint": "unsigned_int"
            },
            "calling": [
                "FUN_0800643c",
                "FUN_08006460"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006420": {
                    "4": "update_bitwise_value",
                    "1": "update_memory_value",
                    "2": "update_register_bits",
                    "3": "update_bit_value",
                    "5": "update_flags"
                },
                "param_1": {
                    "1": "param_base_address",
                    "3": "register_address",
                    "22": "base_address"
                },
                "param_2": {
                    "2": "offset",
                    "17": "bit_position",
                    "3": "bit_index",
                    "9": "bit_offset"
                },
                "param_3": {
                    "6": "value",
                    "17": "new_value",
                    "8": "bit_value"
                },
                "param_1 + 0x20": {
                    "1": "bitfield_address"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "bitmask",
                    "2": "memory_value"
                },
                "param_2 & 0xff": {
                    "1": "bit_index"
                },
                "4 << (param_2 & 0xff)": {
                    "1": "bit_mask"
                },
                "param_3 << (param_2 & 0xff)": {
                    "1": "bit_value"
                },
                "(4 << (param_2 & 0xff))": {
                    "2": "bit_mask"
                },
                "uint": {
                    "1": "unsigned_int"
                },
                "register": {
                    "1": "updated_register"
                }
            }
        },
        "FUN_0800643c": {
            "entrypoint": "0x0800643c",
            "current_name": "set_timers_and_flags_0800643c",
            "code": "\nreturn_type set_timers_and_flags_0800643c(uint **channel_ptr,return_type channel)\n\n{\n  set_channel_command(*channel_ptr,channel,4);\n  (*channel_ptr)[0x11] = (*channel_ptr)[0x11] | 0x8000;\n  **channel_ptr = **channel_ptr | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800643c": "set_timers_and_flags_0800643c",
                "param_1": "channel_ptr",
                "param_2": "channel",
                "TIM_CCxNChannelCmd": "set_channel_command",
                "undefined4": "return_type"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08006420"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800643c": {
                    "1": "set_channel_command_and_flags",
                    "2": "initialize_device",
                    "3": "set_timers_and_flags"
                },
                "param_1": {
                    "1": "channel_pointer",
                    "2": "channel_ptr"
                },
                "param_2": {
                    "3": "channel_cmd",
                    "1": "param",
                    "2": "config_value",
                    "7": "channel"
                },
                "param_1[0x11]": {
                    "1": "p_param[17]",
                    "2": "timer_config[17]"
                },
                "PTR_FUN_08006420": {
                    "1": "configure_peripheral"
                },
                "param_1[0x11] | 0x8000": {
                    "1": "peripheral_register_with_flag"
                },
                "(*param_1)[0x11]": {
                    "1": "channel_flags"
                },
                "**param_1": {
                    "1": "peripheral_value",
                    "2": "timer_value"
                },
                "timerChannels[0x11]": {
                    "1": "timer_channels[17]"
                },
                "TIM_CCxNChannelCmd": {
                    "1": "configure_channel",
                    "3": "set_channel_command"
                },
                "0x11": {
                    "1": "register"
                },
                "FUN_08006420": {
                    "1": "set_timer_channel",
                    "2": "configure_timers",
                    "3": "configure_timer_channel"
                },
                "param_3": {
                    "2": "option",
                    "1": "size_of_array",
                    "4": "param3"
                },
                "0x8000": {
                    "1": "enable_bit"
                },
                "0x1": {
                    "1": "enable"
                },
                "*param_1": {
                    "1": "timer_config"
                },
                "(*param_1)[0]": {
                    "1": "channel_data"
                },
                "(*param_1)[0] | 1": {
                    "1": "updated_channel_data"
                },
                "param_1[0]": {
                    "1": "timer_config[0]"
                },
                "PTR_device[17]": {
                    "1": "device[17]"
                },
                "dat_constant": {
                    "1": "constant"
                },
                "PTR_device": {
                    "1": "device"
                },
                "p_param[0x11]": {
                    "1": "p_param_value[17]"
                },
                "tim_ccxnchannelcmd": {
                    "1": "configure_channel_command"
                },
                "PTR_DAT_0804c8e8[0x11]": {
                    "1": "timer_config[17]"
                },
                "DAT_080076ac": {
                    "1": "mask1"
                },
                "PTR_DAT_0804c8e8": {
                    "1": "timer_config"
                },
                "PTR_DAT_0804c8e8_00": {
                    "1": "timer_config"
                },
                "DAT_08005894": {
                    "1": "mask2"
                },
                "**param_1[0x11]": {
                    "1": "config_flag"
                },
                "timChannels": {
                    "1": "tim_channels"
                },
                "channelValue": {
                    "1": "channel_value"
                },
                "timerConfig[0x11]": {
                    "1": "timer_config[17]"
                },
                "timerConfig[0]": {
                    "1": "timer_config[0]"
                },
                "undefined4": {
                    "1": "return_type"
                }
            }
        },
        "FUN_08006460": {
            "entrypoint": "0x08006460",
            "current_name": "configure_tim_c_cx_n_channel_08006460",
            "code": "\nundefined4 configure_tim_c_cx_n_channel_08006460(uint **channel_ptr,undefined4 channel)\n\n{\n  uint *channel_data;\n  \n  enable_timer_channel(*channel_ptr,channel,0);\n  channel_data = *channel_ptr;\n  if (((config_ptr[8] & 0x1111) == 0) && ((config_ptr[8] & 0x444) == 0)) {\n    config_ptr[17] = config_ptr[17] & 0xffff7fff;\n  }\n  channel_data = *channel_ptr;\n  if (((config_ptr[8] & 0x1111) == 0) && ((config_ptr[8] & 0x444) == 0)) {\n    *channel_data = *channel_data & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006460": "configure_tim_c_cx_n_channel_08006460",
                "param_1": "channel_ptr",
                "param_2": "channel",
                "puVar1": "channel_data",
                "TIM_CCxNChannelCmd": "enable_timer_channel",
                "puVar1[8]": "config_ptr[8]",
                "puVar1[0x11]": "config_ptr[17]"
            },
            "calling": [
                "FUN_080071e4"
            ],
            "called": [
                "FUN_08006420"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006460": {
                    "2": "disable_timer_channel",
                    "1": "disable_and_reset_timers",
                    "3": "disable_tim_c_cx_n_channel",
                    "7": "configure_tim_c_cx_n_channel"
                },
                "param_1": {
                    "1": "channel_pointer",
                    "3": "timer_config",
                    "2": "channel",
                    "5": "channel_ptr"
                },
                "param_2": {
                    "4": "param_value",
                    "3": "value",
                    "2": "channel_command",
                    "1": "param",
                    "6": "channel"
                },
                "puVar1": {
                    "1": "ptr_value",
                    "2": "channel_data_ptr",
                    "8": "channel_data",
                    "3": "timer_registers"
                },
                "TIM_CCxNChannelCmd": {
                    "1": "disable_tim_c_cx_n_channel_cmd",
                    "2": "enable_timer_channel"
                },
                "FUN_08006420": {
                    "1": "configure_tim_control_register"
                },
                "param_3": {
                    "1": "command",
                    "4": "param3"
                },
                "puVar1[8]": {
                    "1": "flags"
                },
                "puVar1[0x11]": {
                    "1": "config_ptr[17]"
                },
                "param_1[8]": {
                    "1": "tim_c_cx_n_channel_value"
                },
                "0x1111": {
                    "1": "bitmask_a"
                },
                "0x444": {
                    "1": "bitmask_b"
                }
            }
        },
        "FUN_080064ac": {
            "entrypoint": "0x080064ac",
            "current_name": "FUNC_080064ac",
            "code": "\nvoid FUNC_080064ac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064ac": "FUNC_080064ac"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080064ae": {
            "entrypoint": "0x080064ae",
            "current_name": "FUNC_080064ae",
            "code": "\nvoid FUNC_080064ae(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064ae": "FUNC_080064ae"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080064b0": {
            "entrypoint": "0x080064b0",
            "current_name": "clear_flags_080064b0",
            "code": "\nvoid clear_flags_080064b0(int_ptr *data)\n\n{\n  *(unsigned_int_ptr *)(*data + 0xc) = *(unsigned_int_ptr *)(*data + 0xc) & 0xfffffedf;\n  *(unsigned_int_ptr *)(*data + 0x14) = *(unsigned_int_ptr *)(*data + 0x14) & 0xfffffffe;\n  *(byte *)(buffer_ptr_offset + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064b0": "clear_flags_080064b0",
                "param_1": "data",
                "undefined": "byte",
                "(int)param_1": "buffer_ptr_offset",
                "int": "int_ptr",
                "uint": "unsigned_int_ptr"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080064b0": {
                    "2": "update_memory_values",
                    "1": "update_data",
                    "17": "clear_flags"
                },
                "param_1": {
                    "1": "memory_address",
                    "7": "data",
                    "2": "memory_pointer",
                    "3": "data_pointer",
                    "4": "flags"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "flag_a",
                    "7": "value1",
                    "4": "flags1",
                    "3": "flags_value1"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "flag2",
                    "3": "flags_value2",
                    "4": "flags2",
                    "7": "value2"
                },
                "*(undefined *)((int)param_1 + 0x3a)": {
                    "2": "status",
                    "1": "flag_value"
                },
                "*(unsigned int *)(*bufferPtr + 0xc)": {
                    "1": "flags"
                },
                "*(unsigned int *)(*bufferPtr + 0x14)": {
                    "1": "more_flags"
                },
                "undefined": {
                    "1": "byte"
                },
                "(int)param_1": {
                    "1": "(int)data"
                },
                "0x3a": {
                    "1": "character_offset",
                    "2": "offset"
                },
                "0x20": {
                    "1": "space_byte"
                },
                "*param_1": {
                    "1": "input_value",
                    "2": "data"
                },
                "0xc": {
                    "1": "mask1_offset",
                    "2": "flag1_offset"
                },
                "0x14": {
                    "2": "flag2_offset",
                    "1": "another_flags_offset"
                },
                "*param_1 + 0xc": {
                    "1": "flag1"
                },
                "*param_1 + 0x14": {
                    "1": "flag2"
                },
                "*(uint *)(*param_1 + 0xc) & 0xfffffedf": {
                    "1": "cleared_flag1"
                },
                "*(uint *)(*param_1 + 0x14) & 0xfffffffe": {
                    "1": "cleared_flag2"
                },
                "(int)param_1 + 0x3a": {
                    "1": "character_address",
                    "2": "offset"
                },
                "((int)param_1 + 0x3a)": {
                    "1": "offset"
                },
                "int": {
                    "1": "int_ptr"
                },
                "uint": {
                    "1": "unsigned_int_ptr"
                },
                "0xfffffedf": {
                    "1": "mask1"
                },
                "0xfffffffe": {
                    "1": "mask2"
                }
            }
        },
        "FUN_080064cc": {
            "entrypoint": "0x080064cc",
            "current_name": "process_data_080064cc",
            "code": "\nundefined4 process_data_080064cc(int *data)\n\n{\n  short count;\n  byte *byte_ptr;\n  \n  if (*(char *)((int)data + 0x39) != '!') {\n    return 2;\n  }\n  if (condition == 0x1000) {\n    *(uint *)(*data + 4) = *(ushort *)counter & 0x1ff;\n    if (flag == 0) {\n      counter = counter + 2;\n    }\n    else {\n      counter = counter + 1;\n    }\n  }\n  else {\n    byte_ptr = (byte *)counter;\n    counter = (int)(byte_ptr + 1);\n    *(uint *)(*data + 4) = (uint)*byte_ptr;\n  }\n  count = *(short *)((int)data + 0x26) + -1;\n  *(short *)((int)data + 0x26) = count;\n  if (count == 0) {\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffff7f;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080064cc": "process_data_080064cc",
                "param_1": "data",
                "sVar1": "count",
                "pbVar2": "byte_ptr",
                "param_1[2]": "condition",
                "param_1[4]": "flag",
                "param_1[8]": "counter"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080064cc": {
                    "2": "parse_input",
                    "1": "perform_operation",
                    "9": "process_data",
                    "3": "parse_data"
                },
                "param_1": {
                    "4": "data_array",
                    "10": "data",
                    "1": "param",
                    "3": "data_ptr",
                    "6": "input_array",
                    "2": "input_data"
                },
                "sVar1": {
                    "4": "remaining_count",
                    "6": "remaining_iterations",
                    "11": "count",
                    "7": "counter",
                    "1": "iteration_count",
                    "2": "remaining_steps"
                },
                "pbVar2": {
                    "18": "byte_ptr",
                    "1": "byte_data",
                    "7": "byte_pointer",
                    "2": "current_byte_ptr"
                },
                "*param_1": {
                    "1": "base_address"
                },
                "*(char *)((int)param_1 + 0x39)": {
                    "3": "first_char",
                    "1": "data_array[57]"
                },
                "*(ushort *)param_1[8]": {
                    "1": "temp_value"
                },
                "param_1[2]": {
                    "1": "constant_value"
                },
                "param_1[4]": {
                    "2": "flag",
                    "1": "data_array[4]"
                },
                "param_1[8]": {
                    "1": "counter"
                },
                "*(short *)((int)param_1 + 0x26)": {
                    "1": "data_array[36]"
                },
                "*(uint *)(*param_1 + 4)": {
                    "1": "memory_value"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "control_variable"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                }
            }
        },
        "FUN_08006538": {
            "entrypoint": "0x08006538",
            "current_name": "calculate_clock_frequency_08006538",
            "code": "\nvoid calculate_clock_frequency_08006538(int *clock_params)\n\n{\n  int pclk1_freq1;\n  int pclk1_freq2;\n  int pclk1_freq3;\n  int pclk1_freq4;\n  int pclk1_freq5;\n  int pclk2_freq1;\n  int pclk2_freq2;\n  int pclk2_freq3;\n  int pclk2_freq4;\n  int base_address;\n  \n  *(uint *)(*clock_params + 0x10) = *(uint *)(*clock_params + 0x10) & 0xffffcfff | clock_params[3];\n  *(uint *)(*clock_params + 0xc) =\n       clock_params[2] | clock_params[4] | clock_params[5] | *(uint *)(*clock_params + 0xc) & 0xffffe9f3;\n  *(uint *)(*clock_params + 0x14) = *(uint *)(*clock_params + 0x14) & 0xfffffcff | clock_params[6];\n  base_address = *clock_params;\n  if (base_address != 0x40013800) {\n    pclk1_freq1 = get_pclk1_frequency();\n    pclk2_freq1 = clock_params[1];\n    pclk1_freq2 = get_pclk1_frequency();\n    pclk2_freq2 = clock_params[1];\n    pclk1_freq3 = get_pclk1_frequency();\n    pclk2_freq3 = clock_params[1];\n    pclk1_freq4 = get_pclk1_frequency();\n    pclk2_freq4 = clock_params[1];\n    pclk1_freq5 = get_pclk1_frequency();\n    *(uint *)(base_address + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(pclk1_freq4 * 0x19) / (uint)(pclk2_freq4 << 2) +\n                        (int)(((ulonglong)(uint)(pclk1_freq5 * 0x19) / (ulonglong)(uint)(clock_params[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(pclk1_freq2 * 0x19) / (uint)(pclk2_freq2 << 2) +\n           (int)(((ulonglong)(uint)(pclk1_freq3 * 0x19) / (ulonglong)(uint)(pclk2_freq3 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(pclk1_freq1 * 0x19) / (ulonglong)(uint)(pclk2_freq1 << 2)) / 100) * 0x10;\n    return;\n  }\n  base_address = get_pclk2_frequency();\n  pclk1_freq5 = clock_params[1];\n  pclk1_freq1 = get_pclk2_frequency();\n  pclk2_freq1 = clock_params[1];\n  pclk1_freq2 = get_pclk2_frequency();\n  pclk2_freq2 = clock_params[1];\n  pclk1_freq3 = get_pclk2_frequency();\n  pclk2_freq3 = clock_params[1];\n  pclk1_freq4 = get_pclk2_frequency();\n  clock_frequency = ((uint)((int)((ulonglong)\n                               (((uint)(pclk1_freq3 * 0x19) / (uint)(pclk2_freq3 << 2) +\n                                (int)(((ulonglong)(uint)(pclk1_freq4 * 0x19) /\n                                      (ulonglong)(uint)(clock_params[1] << 2)) / 100) * -100) * 0x10 +\n                               0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n                 ((((uint)(pclk1_freq1 * 0x19) / (uint)(pclk2_freq1 << 2) +\n                   (int)(((ulonglong)(uint)(pclk1_freq2 * 0x19) / (ulonglong)(uint)(pclk2_freq2 << 2)) / 100) *\n                   -100) * 0x10 + 0x32) / 100 & 0xf0) +\n                 (int)(((ulonglong)(uint)(base_address * 0x19) / (ulonglong)(uint)(pclk1_freq5 << 2)) / 100) *\n                 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006538": "calculate_clock_frequency_08006538",
                "param_1": "clock_params",
                "iVar1": "pclk1_freq1",
                "iVar2": "pclk1_freq2",
                "iVar3": "pclk1_freq3",
                "iVar4": "pclk1_freq4",
                "iVar5": "pclk1_freq5",
                "iVar6": "pclk2_freq1",
                "iVar7": "pclk2_freq2",
                "iVar8": "pclk2_freq3",
                "iVar9": "pclk2_freq4",
                "iVar10": "base_address",
                "HAL_RCC_GetPCLK1Freq": "get_pclk1_frequency",
                "HAL_RCC_GetPCLK2Freq": "get_pclk2_frequency",
                "iRam40013808": "clock_frequency"
            },
            "calling": [
                "FUN_0800674e"
            ],
            "called": [
                "FUN_08005a48",
                "FUN_08005a28"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006538": {
                    "1": "initialize_clocks",
                    "2": "update_clock_configuration",
                    "4": "calculate_clock_frequency"
                },
                "param_1": {
                    "2": "config_data",
                    "1": "input_array",
                    "3": "clock_config",
                    "8": "clock_params",
                    "4": "config_params"
                },
                "iVar1": {
                    "4": "pclk1_frequency",
                    "1": "pclk1_freq_a",
                    "5": "pclk1",
                    "10": "pclk1_freq1"
                },
                "iVar2": {
                    "4": "pclk1_frequency",
                    "12": "pclk1_freq2",
                    "1": "pclk2",
                    "3": "pclk1",
                    "8": "pclk1_freq"
                },
                "iVar3": {
                    "4": "pclk1_frequency",
                    "1": "pclk1_freq_c",
                    "3": "pclk1",
                    "12": "pclk1_freq3",
                    "8": "pclk1_freq"
                },
                "iVar4": {
                    "4": "pclk1_frequency",
                    "1": "pclk1_copy3",
                    "3": "pclk1",
                    "12": "pclk1_freq4",
                    "8": "pclk1_freq"
                },
                "iVar5": {
                    "1": "pclk1_freq_e",
                    "4": "pclk1_frequency",
                    "12": "pclk1_freq5",
                    "3": "pclk1",
                    "8": "pclk1_freq"
                },
                "iVar6": {
                    "1": "pclk1_freq",
                    "2": "clock_params[1]",
                    "3": "pclk2_freq",
                    "6": "pclk2_freq1"
                },
                "iVar7": {
                    "8": "pclk2_freq2",
                    "2": "clock_params[1]",
                    "1": "pclk1_freq"
                },
                "iVar8": {
                    "2": "clock_params[1]",
                    "1": "pclk1_freq",
                    "8": "pclk2_freq3"
                },
                "iVar9": {
                    "1": "pclk1_freq",
                    "2": "param1_4",
                    "8": "pclk2_freq4"
                },
                "iVar10": {
                    "1": "clock_addr",
                    "3": "pclk2_freq5",
                    "2": "clock_base_addr",
                    "4": "base_address"
                },
                "HAL_RCC_GetPCLK1Freq": {
                    "8": "get_pclk1_frequency"
                },
                "HAL_RCC_GetPCLK2Freq": {
                    "8": "get_pclk2_frequency"
                },
                "iRam40013808": {
                    "1": "result"
                },
                "FUN_08005a48": {
                    "1": "get_pclk1_freq"
                },
                "FUN_08005a28": {
                    "1": "calculate_value2"
                },
                "F_08006538": {
                    "1": "calculate_clocks"
                },
                "*param_1": {
                    "1": "config_params"
                }
            }
        },
        "FUN_080066e8": {
            "entrypoint": "0x080066e8",
            "current_name": "check_condition_and_update_080066e8",
            "code": "\nundefined4 check_condition_and_update_080066e8(uint **array_pointer,uint mask,uint expected_result,int start_time,uint timeout)\n\n{\n  int current_time;\n  \n  do {\n    if (((mask & ~**array_pointer) == 0) != expected_result) {\n      return 0;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (current_time = HAL_GetTick(), (uint)(current_time - start_time) <= timeout))));\n  (*array_pointer)[3] = (*array_pointer)[3] & 0xfffffe5f;\n  (*array_pointer)[5] = (*array_pointer)[5] & 0xfffffffe;\n  *(undefined *)((int)array_pointer + 0x39) = 0x20;\n  *(undefined *)((int)array_pointer + 0x3a) = 0x20;\n  *(undefined *)(array_pointer + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_080066e8": "check_condition_and_update_080066e8",
                "param_1": "array_pointer",
                "param_2": "mask",
                "param_3": "expected_result",
                "param_4": "start_time",
                "param_5": "timeout",
                "iVar1": "current_time"
            },
            "calling": [
                "FUN_080067ac"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080066e8": {
                    "1": "check_parameter_validity",
                    "2": "validate_parameters",
                    "3": "check_condition",
                    "4": "check_condition_and_update"
                },
                "param_1": {
                    "2": "flags",
                    "1": "input_pointer",
                    "3": "array_pointer"
                },
                "param_2": {
                    "6": "mask",
                    "1": "value_to_check",
                    "2": "bit_mask",
                    "3": "value1",
                    "4": "flags"
                },
                "param_3": {
                    "1": "value2",
                    "10": "expected_result",
                    "8": "condition"
                },
                "param_4": {
                    "5": "start_tick",
                    "16": "start_time",
                    "2": "initial_tick",
                    "1": "value2"
                },
                "param_5": {
                    "1": "value4",
                    "18": "timeout",
                    "3": "time_limit",
                    "5": "max_duration",
                    "2": "max_time"
                },
                "iVar1": {
                    "14": "current_time",
                    "10": "current_tick",
                    "1": "tick_difference"
                }
            }
        },
        "FUN_0800674c": {
            "entrypoint": "0x0800674c",
            "current_name": "FUNC_0800674c",
            "code": "\nvoid FUNC_0800674c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800674c": "FUNC_0800674c"
            },
            "calling": [
                "FUN_0800674e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800674e": {
            "entrypoint": "0x0800674e",
            "current_name": "initialize_uart_0800674e",
            "code": "\nundefined4 initialize_uart_0800674e(int *uart_config)\n\n{\n  if (uart_config != (int *)0x0) {\n    if (*(char *)((int)uart_config + 0x39) == '\\0') {\n      *(undefined *)(uart_config + 0xe) = 0;\n      initialize_uart_0800674e_peripherals();\n    }\n    *(undefined *)((int)uart_config + 0x39) = 0x24;\n    *(uint *)(*uart_config + 0xc) = *(uint *)(*uart_config + 0xc) & 0xffffdfff;\n    set_uart_configuration(uart_config);\n    *(uint *)(*uart_config + 0x10) = *(uint *)(*uart_config + 0x10) & 0xffffb7ff;\n    *(uint *)(*uart_config + 0x14) = *(uint *)(*uart_config + 0x14) & 0xffffffd5;\n    *(uint *)(*uart_config + 0xc) = *(uint *)(*uart_config + 0xc) | 0x2000;\n    flag = 0;\n    *(undefined *)((int)uart_config + 0x39) = 0x20;\n    *(undefined *)((int)uart_config + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800674e": "initialize_uart_0800674e",
                "param_1": "uart_config",
                "HAL_UART_MspInit": "initialize_uart_peripherals",
                "UART_SetConfig": "set_uart_configuration",
                "param_1[0xf]": "flag"
            },
            "calling": [
                "FUN_08008078"
            ],
            "called": [
                "FUN_08006538",
                "FUN_0800674c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800674e": {
                    "30": "initialize_uart",
                    "1": "initialize_uart_configuration"
                },
                "param_1": {
                    "1": "uart_ptr",
                    "10": "uart_config",
                    "8": "uart_instance"
                },
                "FUN_08006538": {
                    "1": "initialize_communication",
                    "2": "check_uart_status",
                    "5": "initialize_uart_peripherals",
                    "4": "initialize_uart"
                },
                "FUNC_0800674c": {
                    "1": "set_uart_configurations",
                    "3": "undefined_function",
                    "5": "n/a",
                    "4": "unused_function"
                },
                "HAL_UART_MspInit": {
                    "1": "configure_uart_pins",
                    "3": "initialize_uart_peripheral",
                    "2": "initialize_uart_hardware",
                    "13": "initialize_uart_peripherals"
                },
                "*(char *)((int)param_1 + 0x39)": {
                    "1": "is_uart_initialized",
                    "2": "uart_initialized"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "uart_initialized_flag"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "uart_config_reg1",
                    "2": "uart_control_register"
                },
                "UART_SetConfig": {
                    "9": "set_uart_configuration",
                    "3": "set_uart_config",
                    "7": "configure_uart"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "2": "uart_baud_rate_register",
                    "1": "uart_lcrh_reg"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "uart_error_reg"
                },
                "param_1[0xf]": {
                    "2": "flag",
                    "1": "parameter_1"
                },
                "initialize_uart": {
                    "1": "initialize_uart"
                },
                "*(undefined *)((int)param_1 + 0x3a)": {
                    "1": "new_uart_config"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "uart_instance_status"
                },
                "e": {
                    "1": "n/a"
                },
                "*( undefined *)((int)param_1 + 0x39)": {
                    "1": "uart_config_status"
                },
                "*param_1": {
                    "1": "uart"
                }
            }
        },
        "FUN_080067ac": {
            "entrypoint": "0x080067ac",
            "current_name": "process_data_080067ac",
            "code": "\nundefined4 process_data_080067ac(int *data_buffer,ushort *data,int buffer_size,undefined4 timeout)\n\n{\n  int result;\n  undefined4 return_value;\n  \n  if (*(char *)((int)data_buffer + 0x39) == ' ') {\n    if (data == (ushort *)0x0) {\n      return_value = 1;\n    }\n    else if (buffer_size == 0) {\n      return_value = 1;\n    }\n    else if (*(char *)(data_buffer + 0xe) == '\\x01') {\n      return_value = 2;\n    }\n    else {\n      *(undefined *)(data_buffer + 0xe) = 1;\n      data_buffer[0xf] = 0;\n      *(undefined *)((int)data_buffer + 0x39) = 0x21;\n      return_value = get_current_tick();\n      *(short *)(data_buffer + 9) = (short)buffer_size;\n      *(short *)((int)data_buffer + 0x26) = (short)buffer_size;\n      while (*(short *)((int)data_buffer + 0x26) != 0) {\n        *(short *)((int)data_buffer + 0x26) = *(short *)((int)data_buffer + 0x26) + -1;\n        if (data_buffer[2] == 0x1000) {\n          result = wait_on_flag_until_timeout(data_buffer,0x80,0,return_value,timeout);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_buffer + 4) = *data & 0x1ff;\n          if (data_buffer[4] == 0) {\n            data = data + 1;\n          }\n          else {\n            data = (ushort *)((int)data + 1);\n          }\n        }\n        else {\n          result = wait_on_flag_until_timeout(data_buffer,0x80,0,return_value,timeout);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_buffer + 4) = (uint)*(byte *)data;\n          data = (ushort *)((int)data + 1);\n        }\n      }\n      result = wait_on_flag_until_timeout(data_buffer,0x40,0,return_value,timeout);\n      if (result == 0) {\n        *(undefined *)((int)data_buffer + 0x39) = 0x20;\n        *(undefined *)(data_buffer + 0xe) = 0;\n        return_value = 0;\n      }\n      else {\n        return_value = 3;\n      }\n    }\n  }\n  else {\n    return_value = 2;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_080067ac": "process_data_080067ac",
                "param_1": "data_buffer",
                "param_2": "data",
                "param_3": "buffer_size",
                "param_4": "timeout",
                "iVar1": "result",
                "uVar2": "return_value",
                "UART_WaitOnFlagUntilTimeout": "wait_on_flag_until_timeout",
                "HAL_GetTick": "get_current_tick"
            },
            "calling": [
                "FUN_08008500"
            ],
            "called": [
                "FUN_080066e8",
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080067ac": {
                    "1": "handle_transmission",
                    "29": "process_data"
                },
                "param_1": {
                    "6": "data",
                    "1": "input_data",
                    "12": "data_buffer",
                    "7": "data_ptr",
                    "2": "data_pointer"
                },
                "param_2": {
                    "1": "buffer_pointer",
                    "9": "data",
                    "4": "data_buffer",
                    "2": "input_data",
                    "7": "buffer"
                },
                "param_3": {
                    "1": "input_size",
                    "2": "data_size",
                    "3": "input_length",
                    "10": "buffer_size",
                    "8": "data_length",
                    "6": "length"
                },
                "param_4": {
                    "1": "timer",
                    "25": "timeout",
                    "2": "param_4"
                },
                "iVar1": {
                    "1": "flag_status",
                    "6": "status",
                    "22": "result",
                    "2": "return_value"
                },
                "uVar2": {
                    "1": "status_code",
                    "10": "status",
                    "13": "return_value",
                    "7": "result"
                },
                "UART_WaitOnFlagUntilTimeout": {
                    "4": "wait_on_flag_until_timeout",
                    "1": "wait_for_flag_until_timeout"
                },
                "HAL_GetTick": {
                    "1": "get_tick",
                    "2": "get_current_tick"
                },
                "FUN_080066e8": {
                    "1": "wait_on_flag"
                },
                "FUN_08003760": {
                    "1": "initialize"
                }
            }
        },
        "FUN_0800688e": {
            "entrypoint": "0x0800688e",
            "current_name": "initialize_data_0800688e",
            "code": "\nundefined4 initialize_data_0800688e(int *data,int value1,int value2)\n\n{\n  if (*(char *)((int)data + 0x39) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(data + 0xe) != '\\x01') {\n    data[8] = value1;\n    *(short *)(data + 9) = (short)value2;\n    *(short *)((int)data + 0x26) = (short)value2;\n    data[0xf] = 0;\n    *(undefined *)((int)data + 0x39) = 0x21;\n    *(undefined *)(data + 0xe) = 0;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_0800688e": "initialize_data_0800688e",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[8]": "data[8]",
                "param_1[0xf]": "data[0xf]"
            },
            "calling": [
                "FUN_08008730",
                "FUN_08008694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800688e": {
                    "1": "initialize_value",
                    "2": "validate_parameters",
                    "3": "process_data",
                    "9": "initialize_data",
                    "5": "update_data"
                },
                "param_1": {
                    "13": "data",
                    "3": "input_array",
                    "1": "input_ptr",
                    "2": "parameters"
                },
                "param_2": {
                    "1": "size_of_data",
                    "4": "value_1",
                    "23": "value1"
                },
                "param_3": {
                    "1": "param2_value",
                    "4": "value_2",
                    "23": "value2"
                },
                "*(char *)((int)param_1 + 0x39)": {
                    "2": "character",
                    "1": "flag_char"
                },
                "*(char *)(param_1 + 0xe)": {
                    "3": "flag",
                    "1": "param1_array_element",
                    "2": "flag_value"
                },
                "param_1[8]": {
                    "3": "data[8]",
                    "1": "param8",
                    "2": "data_value1"
                },
                "*(short *)(param_1 + 9)": {
                    "1": "result_2",
                    "2": "data_value2"
                },
                "*(short *)((int)param_1 + 0x26)": {
                    "1": "short_2",
                    "2": "result3"
                },
                "param_1[0xf]": {
                    "1": "param15",
                    "2": "result4"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "flag2"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "flag_result"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "unsigned_int",
                    "3": "pointer_value"
                },
                "0x39": {
                    "1": "char_value"
                },
                "0xe": {
                    "1": "flag_value"
                },
                "0x26": {
                    "1": "short_value"
                },
                "8": {
                    "1": "element_8"
                },
                "9": {
                    "1": "element_9"
                },
                "0xf": {
                    "1": "element_f"
                },
                "check_and_update_data": {
                    "1": "improved_check_and_update_data"
                },
                "param_1 + 0xe": {
                    "1": "data_pointer_plus14"
                },
                "data_ptr + 0xe": {
                    "1": "data_ptr_offset"
                },
                "data_ptr + 0x39": {
                    "1": "status"
                },
                "data_ptr + 9": {
                    "1": "short_param"
                },
                "data_ptr + 0x26": {
                    "1": "short_offset"
                },
                "data_ptr[8]": {
                    "1": "param1"
                },
                "data_ptr[0xf]": {
                    "1": "param2"
                },
                "0x80": {
                    "1": "bit_mask"
                },
                "*(char *)((int)data + 0x39)": {
                    "2": "flag"
                },
                "*(char *)(data + 0xe)": {
                    "1": "indicator"
                },
                "*(short *)(data + 9)": {
                    "2": "data[9]"
                },
                "*(short *)((int)data + 0x26)": {
                    "1": "data[26]"
                },
                "*(undefined *)((int)data + 0x39)": {
                    "1": "data_flag"
                },
                "*(undefined *)(data + 0xe)": {
                    "1": "status"
                },
                "*(uint *)(*data + 0xc)": {
                    "1": "data_ptr"
                },
                "param_1 + 9": {
                    "1": "data_pointer_plus9"
                },
                "(int)param_1 + 0x26": {
                    "1": "data_pointer_plus38"
                },
                "(int)param_1 + 0x39": {
                    "1": "data_pointer_plus57"
                },
                "data": {
                    "1": "data"
                },
                "valueA": {
                    "1": "value_a"
                },
                "valueB": {
                    "1": "value_b"
                }
            }
        },
        "FUN_080068d6": {
            "entrypoint": "0x080068d6",
            "current_name": "validate_input_080068d6",
            "code": "\nundefined4 validate_input_080068d6(int *input_array,int value1,int value2)\n\n{\n  if (*(char *)((int)input_array + 0x3a) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(input_array + 0xe) != '\\x01') {\n    input_array[10] = value1;\n    *(short *)(input_array + 0xb) = (short)value2;\n    *(short *)((int)input_array + 0x2e) = (short)value2;\n    input_array[15] = 0;\n    *(undefined *)((int)input_array + 0x3a) = 0x22;\n    *(undefined *)(input_array + 0xe) = 0;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x100;\n    *(uint *)(*input_array + 0x14) = *(uint *)(*input_array + 0x14) | 1;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_080068d6": "validate_input_080068d6",
                "param_1": "input_array",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[10]": "input_array[10]",
                "param_1[0xf]": "input_array[15]"
            },
            "calling": [
                "FUN_0800863c",
                "FUN_08008600"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080068d6": {
                    "1": "validate_params",
                    "2": "validate_parameters",
                    "4": "process_data",
                    "9": "validate_input"
                },
                "param_1": {
                    "1": "buffer",
                    "8": "data",
                    "3": "array",
                    "15": "input_array"
                },
                "param_2": {
                    "1": "size_param1",
                    "7": "value_1",
                    "13": "value1",
                    "3": "size",
                    "2": "length"
                },
                "param_3": {
                    "1": "length",
                    "4": "value",
                    "7": "value_2",
                    "13": "value2"
                },
                "*(char *)((int)param_1 + 0x3a)": {
                    "2": "char_at_input_array_plus_0x3a",
                    "1": "char_check"
                },
                "*(char *)(param_1 + 0xe)": {
                    "4": "flag",
                    "1": "char_at_offset_0xe",
                    "2": "char_at_input_array_plus_0xe"
                },
                "param_1[10]": {
                    "1": "input_array_tenth",
                    "2": "data[10]",
                    "7": "input_array[10]"
                },
                "*(short *)(param_1 + 0xb)": {
                    "1": "params_array[11]",
                    "2": "short_at_input_array_plus_0xb",
                    "4": "input_array[11]"
                },
                "*(short *)((int)param_1 + 0x2e)": {
                    "1": "data_value_3",
                    "3": "input_array[46]",
                    "2": "short_at_input_array_plus_0x2e"
                },
                "param_1[0xf]": {
                    "1": "data_value_4",
                    "5": "input_array[15]",
                    "2": "input_array[0xf]"
                },
                "*(undefined *)((int)param_1 + 0x3a)": {
                    "4": "input_array[58]",
                    "1": "third_character_copy",
                    "2": "undefined_at_input_array_plus_0x3a"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "undefined_at_array_offset2",
                    "4": "input_array[14]",
                    "2": "undefined_at_input_array_plus_0xe"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "uint_value_1",
                    "2": "flag1"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "uint_value2",
                    "2": "flag2"
                },
                "input_array": {
                    "1": "param_array",
                    "2": "input_array"
                },
                "value1": {
                    "1": "param_value1"
                },
                "value2": {
                    "1": "param_value2"
                },
                "param_1[0xb]": {
                    "1": "input_array[11]"
                },
                "param_1+0xe": {
                    "1": "input_array+0xe"
                },
                "length_param": {
                    "1": "length_param"
                },
                "value_param": {
                    "1": "value_param"
                },
                "param_1 + 0xe": {
                    "1": "pointer"
                },
                "(int)param_1 + 0x2e": {
                    "1": "pointer_plus_46"
                },
                "param_1 + 0xc": {
                    "1": "pointer_plus_12"
                },
                "param_1 + 0x14": {
                    "1": "data[20]"
                },
                "*(char *)((int)data + 0x3a)": {
                    "1": "character"
                },
                "*(char *)(data + 0xe)": {
                    "1": "flag"
                },
                "*(short *)(data + 0xb)": {
                    "1": "short_value1"
                },
                "*(short *)((int)data + 0x2e)": {
                    "1": "short_value2"
                },
                "0x3a": {
                    "1": "character"
                },
                "data + 0xe": {
                    "1": "flag"
                },
                "param_1 + 0xb": {
                    "1": "data[11]"
                },
                "param_1 + 0x2e": {
                    "1": "data[14]"
                },
                "param_1 + 0x3a": {
                    "1": "data[58]"
                },
                "uint_ptr_param1_plus_c)": {
                    "1": "updated_uint_param1_plus_c"
                },
                "uint_ptr_param1_plus_14)": {
                    "1": "updated_uint_param1_plus_14"
                }
            }
        },
        "FUN_08006932": {
            "entrypoint": "0x08006932",
            "current_name": "update_uart_settings_08006932",
            "code": "\nundefined4 update_uart_settings_08006932(status *uart_settings)\n\n{\n  *(ustatus *)(*uart_settings + 0xc) = *(ustatus *)(*uart_settings + 0xc) & 0xffffffbf;\n  *(undefined *)((status)uart_settings + 0x39) = 0x20;\n  execute_uart_callback;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006932": "update_uart_settings_08006932",
                "param_1": "uart_settings",
                "HAL_UART_TxCpltCallback": "transmission_complete_callback",
                "int": "status",
                "HAL_UART_TxCpltCallback()": "execute_uart_callback"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [
                "FUN_08008730"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006932": {
                    "1": "update_control_register",
                    "4": "update_uart_config",
                    "7": "update_uart_settings"
                },
                "param_1": {
                    "1": "ptr",
                    "4": "uart_settings",
                    "3": "uart_config",
                    "2": "config_ptr"
                },
                "HAL_UART_TxCpltCallback": {
                    "1": "handle_uart_tx_complete",
                    "5": "transmission_complete_callback"
                },
                "int *": {
                    "1": "int_pointer"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "flags",
                    "2": "data_value"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "value",
                    "2": "flag_value"
                },
                "int": {
                    "1": "status"
                },
                "HAL_UART_TxCpltCallback()": {
                    "1": "execute_uart_callback"
                },
                "0xffffffbf": {
                    "1": "bit_mask"
                },
                "(int)param_1 + 0x39": {
                    "1": "byte_offset"
                },
                "*param_1": {
                    "1": "uart_data_ptr",
                    "2": "uart_configuration_ptr"
                },
                "<original_function_name>": {
                    "1": "set_uart_config"
                },
                "<original_parameter_name_1>": {
                    "1": "config_params"
                },
                "<original_variable_name_1>": {
                    "1": "uart_base_addr"
                },
                "FUN_08008730": {
                    "1": "handle_uart_transfer_complete"
                },
                "*(uint *)(*uart_config + 0xc)": {
                    "1": "uart_config->control_register"
                },
                "*(undefined *)((int)uart_config + 0x39)": {
                    "1": "uart_config->status"
                },
                "<new_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<new_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                }
            }
        },
        "FUN_0800694c": {
            "entrypoint": "0x0800694c",
            "current_name": "process_data_0800694c",
            "code": "\nundefined4 process_data_0800694c(int *data)\n\n{\n  byte *byte_ptr;\n  short counter;\n  undefined *undefined_ptr;\n  \n  if (*(char *)((int)data + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      *(ushort *)data[10] = (ushort)((uint)(*(int *)(*data + 4) << 0x17) >> 0x17);\n      data[10] = data[10] + 2;\n    }\n    else {\n      *(ushort *)data[10] = (ushort)*(undefined4 *)(*data + 4) & 0xff;\n      data[10] = data[10] + 1;\n    }\n  }\n  else if (data[4] == 0) {\n    undefined_ptr = (undefined *)data[10];\n    data[10] = (int)(undefined_ptr + 1);\n    *undefined_ptr = (char)*(undefined4 *)(*data + 4);\n  }\n  else {\n    byte_ptr = (byte *)data[10];\n    data[10] = (int)(byte_ptr + 1);\n    *byte_ptr = (byte)*(undefined4 *)(*data + 4) & 0x7f;\n  }\n  counter = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = counter;\n  if (counter != 0) {\n    return 0;\n  }\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffffdf;\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xfffffeff;\n  *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xfffffffe;\n  *(undefined *)((int)data + 0x3a) = 0x20;\n  handle_uart_receive_complete();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800694c": "process_data_0800694c",
                "param_1": "data",
                "pbVar1": "byte_ptr",
                "sVar2": "counter",
                "puVar3": "undefined_ptr",
                "HAL_UART_RxCpltCallback": "handle_uart_receive_complete"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [
                "FUN_0800870c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800694c": {
                    "2": "process_string",
                    "1": "parse_string",
                    "4": "process_input",
                    "11": "process_data"
                },
                "param_1": {
                    "4": "input_data",
                    "13": "data",
                    "3": "input",
                    "1": "param",
                    "2": "input_array"
                },
                "pbVar1": {
                    "20": "byte_ptr",
                    "1": "byte_buffer",
                    "9": "byte_pointer"
                },
                "sVar2": {
                    "2": "decremented_value",
                    "1": "loop_counter",
                    "7": "count",
                    "14": "counter"
                },
                "puVar3": {
                    "2": "output_ptr",
                    "1": "output_buffer",
                    "8": "undefined_pointer",
                    "17": "undefined_ptr"
                },
                "HAL_UART_RxCpltCallback": {
                    "1": "handle_uart_receive_complete"
                }
            }
        },
        "FUN_080069ec": {
            "entrypoint": "0x080069ec",
            "current_name": "process_uart_data_080069ec",
            "code": "\nvoid process_uart_data_080069ec(uint **data)\n\n{\n  int result;\n  uint value1;\n  uint *ptr;\n  uint value2;\n  uint value3;\n  \n  ptr = *data;\n  value3 = *ptr;\n  value1 = ptr[3];\n  if ((((value3 & 0xf) == 0) && ((value3 & 0x20) != 0)) && ((value1 & 0x20) != 0)) {\n    start_uart_receive(data);\n    return;\n  }\n  if (((value3 & 0xf) == 0) || ((value2 = ptr[5] & 1, value2 == 0 && ((value1 & 0x120) == 0)))) {\n    if (((value3 & 0x80) != 0) && ((value1 & 0x80) != 0)) {\n      start_uart_transmit(data);\n      return;\n    }\n    if (((value3 & 0x40) != 0) && ((value1 & 0x40) != 0)) {\n      end_uart_transmit(data);\n    }\n  }\n  else {\n    if (((value3 & 1) != 0) && ((value1 & 0x100) != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 1);\n    }\n    if (((value3 & 4) != 0) && (value2 != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 2);\n    }\n    if (((value3 & 2) != 0) && (value2 != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 4);\n    }\n    if (((value3 & 8) != 0) && (value2 != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 8);\n    }\n    if (data[0xf] != (uint *)0x0) {\n      if (((value3 & 0x20) != 0) && ((value1 & 0x20) != 0)) {\n        start_uart_receive(data);\n      }\n      if ((((uint)data[0xf] & 8) == 0) && (((*data)[5] & 0x40) == 0)) {\n        handle_uart_error(data);\n        data[0xf] = (uint *)0x0;\n        return;\n      }\n      end_uart_receive_transfer(data);\n      ptr = *data;\n      if ((ptr[5] & 0x40) == 0) {\n        handle_uart_error(data);\n        return;\n      }\n      ptr[5] = ptr[5] & 0xffffffbf;\n      if (data[0xd] == (uint *)0x0) {\n        handle_uart_error(data);\n        return;\n      }\n      data[0xd][0xd] = (uint)&label_08006b0c_1;\n      result = abort_dma(data[0xd]);\n      if (result != 0) {\n        (*(code *)data[0xd][0xd])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069ec": "process_uart_data_080069ec",
                "param_1": "data",
                "iVar1": "result",
                "uVar2": "value1",
                "puVar3": "ptr",
                "uVar4": "value2",
                "uVar5": "value3",
                "UART_Receive_IT": "start_uart_receive",
                "UART_Transmit_IT": "start_uart_transmit",
                "UART_EndTransmit_IT": "end_uart_transmit",
                "HAL_UART_ErrorCallback": "handle_uart_error",
                "UART_EndRxTransfer": "end_uart_receive_transfer",
                "HAL_DMA_Abort_IT": "abort_dma",
                "LAB_08006b0c_1": "label_08006b0c_1"
            },
            "calling": [],
            "called": [
                "FUN_080064b0",
                "FUN_08006932",
                "FUN_0800694c",
                "FUN_0800877c",
                "FUN_08004050",
                "FUN_080064cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080069ec": {
                    "1": "handle_uart_transfer",
                    "4": "process_data",
                    "2": "handle_uart_operations",
                    "6": "process_uart_data"
                },
                "param_1": {
                    "9": "data",
                    "1": "uart_context",
                    "2": "uart_data",
                    "4": "param"
                },
                "iVar1": {
                    "5": "return_value",
                    "1": "error_status",
                    "3": "dma_result",
                    "2": "status",
                    "17": "result"
                },
                "uVar2": {
                    "1": "status_value",
                    "8": "value2",
                    "10": "value1",
                    "2": "var2"
                },
                "puVar3": {
                    "1": "value_pointer",
                    "2": "pointer",
                    "3": "data_ptr",
                    "11": "ptr"
                },
                "uVar4": {
                    "3": "var4",
                    "1": "flag_value",
                    "2": "temp_flag",
                    "6": "value4",
                    "10": "value2"
                },
                "uVar5": {
                    "1": "flags",
                    "6": "value5",
                    "3": "var5",
                    "9": "value3",
                    "2": "value1"
                },
                "UART_Receive_IT": {
                    "1": "start_receive_uart_interrupt",
                    "2": "start_uart_receive"
                },
                "UART_Transmit_IT": {
                    "1": "transmit_data",
                    "2": "start_uart_transmit"
                },
                "UART_EndTransmit_IT": {
                    "1": "end_transmit_data",
                    "2": "end_uart_transmit"
                },
                "HAL_UART_ErrorCallback": {
                    "1": "error_callback",
                    "2": "handle_uart_error"
                },
                "UART_EndRxTransfer": {
                    "2": "end_uart_receive_transfer",
                    "1": "end_receive_transfer_uart"
                },
                "HAL_DMA_Abort_IT": {
                    "1": "abort_dma_transfer_with_interrupt",
                    "2": "abort_dma"
                },
                "*puVar3": {
                    "1": "value_ptr"
                },
                "LAB_08006b0c_1": {
                    "1": "label1"
                },
                "FUN_080064b0": {
                    "1": "configure_uart"
                },
                "FUN_08006932": {
                    "1": "check_paritybit_configuration"
                },
                "FUN_0800694c": {
                    "1": "configure_uart"
                },
                "FUNC_0800877c": {
                    "1": "process_uart"
                },
                "FUN_08004050": {
                    "1": "handle_uart_data"
                },
                "FUN_080064cc": {
                    "1": "dma_abort_callback"
                },
                "HAL_UART_EndRxTransfer": {
                    "1": "end_receive_transfer"
                }
            }
        },
        "FUN_08006b1c": {
            "entrypoint": "0x08006b1c",
            "current_name": "combine_bytes_08006b1c",
            "code": "\nbyte combine_bytes_08006b1c(int address)\n\n{\n  return *(byte *)(address + 0x3a) | *(byte *)(address + 0x39);\n}\n\n",
            "renaming": {
                "FUN_08006b1c": "combine_bytes_08006b1c",
                "param_1": "address"
            },
            "calling": [
                "FUN_080085dc",
                "FUN_080085b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006b1c": {
                    "2": "combine_byte_values",
                    "28": "combine_bytes",
                    "1": "bitwise_or_of_bytes"
                },
                "param_1": {
                    "7": "input_value",
                    "6": "offset",
                    "1": "input_address",
                    "3": "base_address"
                },
                "*(byte *)(param_1 + 0x3a)": {
                    "8": "byte1",
                    "1": "first_byte"
                },
                "*(byte *)(param_1 + 0x39)": {
                    "8": "byte2",
                    "1": "byte_value_2"
                },
                "*(byte *)(address + 0x3a)": {
                    "1": "byte_value1"
                },
                "*(byte *)(address + 0x39)": {
                    "1": "byte_value2"
                },
                "param_2": {
                    "1": "output_value"
                },
                "param_3": {
                    "1": "param_3"
                },
                "param_4": {
                    "1": "offset_value"
                },
                "param_5": {
                    "1": "param_5"
                },
                "param_1 + 0x3a": {
                    "1": "byte1"
                },
                "param_1 + 0x39": {
                    "1": "byte2"
                },
                "*PTR_08006b1c": {
                    "1": "byte_pointer1"
                },
                "*PTR_08006b1d": {
                    "1": "byte_pointer2"
                },
                "* (byte *)(param_1 + 0x3a)": {
                    "1": "byte1"
                },
                "* (byte *)(param_1 + 0x39)": {
                    "1": "byte2"
                },
                "* (byte *) (param_1 + 0x3a)": {
                    "1": "byte1"
                },
                "* (byte *) (param_1 + 0x39)": {
                    "1": "byte2"
                }
            }
        },
        "FUN_08006b28": {
            "entrypoint": "0x08006b28",
            "current_name": "get_bit_value_08006b28",
            "code": "\nuint get_bit_value_08006b28(uint input_value,int base_address)\n\n{\n  return *(uint *)(base_address + ((input_value << 0x18) >> 0x1c) * 4) >> (input_value & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08006b28": "get_bit_value_08006b28",
                "param_1": "input_value",
                "param_2": "base_address"
            },
            "calling": [
                "FUN_080088e0",
                "FUN_08008a24",
                "FUN_08008a6c",
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006b28": {
                    "1": "reverse_bits",
                    "2": "extract_bit_from_word",
                    "9": "get_bit_value",
                    "3": "get_bit_at_position"
                },
                "param_1": {
                    "1": "array_index",
                    "5": "data",
                    "8": "value",
                    "3": "index",
                    "2": "word"
                },
                "param_2": {
                    "4": "address",
                    "3": "array",
                    "1": "base_addr",
                    "6": "array_address",
                    "2": "array_ptr"
                },
                "PTR_XXXX": {
                    "1": "unchanged"
                },
                "DAT_XXXX": {
                    "1": "unchanged"
                },
                "param_3": {
                    "1": "position"
                },
                "*(uint *)(param_2 + ((param_1 << 0x18) >> 0x1c) * 4)": {
                    "1": "target_value"
                },
                "(param_1 & 0xf)": {
                    "1": "bit_offset"
                },
                "param_4": {
                    "1": "bit_mask"
                },
                "param_5": {
                    "1": "bit_position"
                },
                "param_6": {
                    "1": "bit_value"
                },
                "data": {
                    "1": "lookup_table"
                },
                "PTR_": {
                    "2": "",
                    "1": "ptr_"
                },
                "DAT_": {
                    "2": "",
                    "1": "dat_"
                },
                "(param_1 << 0x18) >> 0x1c": {
                    "2": "shifted_value"
                },
                "param_1 & 0xf": {
                    "1": "bit_offset",
                    "2": "bit_index"
                },
                "param_1 << 0x18": {
                    "1": "shifted_value"
                },
                "param_2 + ((param_1 << 0x18) >> 0x1c) * 4": {
                    "1": "array_index"
                }
            }
        },
        "FUN_08006b3e": {
            "entrypoint": "0x08006b3e",
            "current_name": "set_bit_in_array_08006b3e",
            "code": "\nvoid set_bit_in_array_08006b3e(uint bit_position,int array)\n\n{\n  uint index;\n  \n  index = (bit_position << 0x18) >> 0x1c;\n  *(uint *)(array + index * 4) = *(uint *)(array + index * 4) | 1 << (bit_position & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b3e": "set_bit_in_array_08006b3e",
                "param_1": "bit_position",
                "param_2": "array",
                "uVar1": "index"
            },
            "calling": [
                "FUN_080088e0",
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006b3e": {
                    "1": "update_bit_value",
                    "7": "set_bit",
                    "4": "update_bit",
                    "3": "update_bit_in_array",
                    "10": "set_bit_in_array"
                },
                "param_1": {
                    "1": "bit_value",
                    "16": "bit_position",
                    "5": "bit_index",
                    "3": "value",
                    "2": "index"
                },
                "param_2": {
                    "2": "array_ptr",
                    "12": "array",
                    "1": "data_pointer",
                    "3": "memory_address",
                    "9": "array_address"
                },
                "uVar1": {
                    "5": "byte_offset",
                    "4": "shifted_index",
                    "1": "shifted_position",
                    "2": "byte_index",
                    "9": "index",
                    "3": "array_index"
                },
                "*(uint *)(param_2 + uVar1 * 4)": {
                    "1": "current_value"
                },
                "(param_1 & 0xf)": {
                    "1": "bit_offset"
                },
                "*(uint *)(param_2 + uVar1 * 4) | 1 << (param_1 & 0xf)": {
                    "1": "updated_array_element"
                }
            }
        },
        "FUN_08006b5c": {
            "entrypoint": "0x08006b5c",
            "current_name": "update_bit_08006b5c",
            "code": "\nvoid update_bit_08006b5c(uint bit_position,int array_address)\n\n{\n  uint index;\n  \n  index = (bit_position << 0x18) >> 0x1c;\n  *(uint *)(array_address + index * 4) = *(uint *)(array_address + index * 4) & ~(1 << (bit_position & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b5c": "update_bit_08006b5c",
                "param_1": "bit_position",
                "param_2": "array_address",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006b5c": {
                    "1": "update_parameter_value",
                    "11": "update_bit",
                    "2": "update_value_in_array",
                    "4": "update_bit_value",
                    "6": "update_bit_in_array"
                },
                "param_1": {
                    "6": "bit_index",
                    "18": "bit_position",
                    "1": "index"
                },
                "param_2": {
                    "2": "data_pointer",
                    "6": "array",
                    "1": "memory_address",
                    "3": "data_address",
                    "12": "array_address"
                },
                "uVar1": {
                    "2": "shifted_bit_position",
                    "4": "shifted_index",
                    "1": "shifted_bit",
                    "7": "index"
                },
                "*(uint *)(param_2 + uVar1 * 4)": {
                    "1": "bitwise_data"
                },
                "(param_1 << 0x18) >> 0x1c": {
                    "1": "shifted_index"
                },
                "param_1 & 0xf": {
                    "1": "bit_mask"
                },
                "(param_1 & 0xf)": {
                    "1": "bit_mask"
                }
            }
        },
        "FUN_08006b7c": {
            "entrypoint": "0x08006b7c",
            "current_name": "get_memory_address_08006b7c",
            "code": "\nundefined4 get_memory_address_08006b7c(undefined4 input)\n\n{\n  input_param(input) {\n  case 0:\n    memory_address 0x40010800;\n  case 1:\n    memory_address 0x40010c00;\n  case 2:\n    memory_address 0x40011000;\n  case 3:\n    memory_address 0x40011400;\n  case 4:\n    memory_address 0x40011800;\n  default:\n    memory_address 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_08006b7c": "get_memory_address_08006b7c",
                "param_1": "input",
                "return": "memory_address",
                "switch": "input_param"
            },
            "calling": [
                "FUN_08008a24",
                "FUN_08008a6c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006b7c": {
                    "1": "get_memory_offset",
                    "19": "get_memory_address",
                    "5": "map_param_to_address"
                },
                "param_1": {
                    "11": "input",
                    "1": "parameter_value",
                    "3": "param",
                    "2": "input_param",
                    "7": "index"
                },
                "0": {
                    "2": "memory_address_0",
                    "1": "memory_address_1",
                    "3": "base_address"
                },
                "1": {
                    "1": "addr_1",
                    "3": "address_1",
                    "2": "memory_address_1"
                },
                "2": {
                    "3": "address_2",
                    "1": "addr_2",
                    "2": "memory_address_2"
                },
                "3": {
                    "1": "addr_3",
                    "3": "address_3",
                    "2": "address_d"
                },
                "4": {
                    "1": "base_address_5",
                    "3": "address_4",
                    "2": "address_e"
                },
                "return": {
                    "1": "address",
                    "3": "memory_address"
                },
                "return value": {
                    "1": "memory_address"
                },
                "return_val": {
                    "1": "address"
                },
                "case 0": {
                    "1": "case_zero"
                },
                "case 1": {
                    "1": "address1"
                },
                "case 2": {
                    "1": "case_two"
                },
                "case 3": {
                    "1": "return_address_for_case3"
                },
                "case 4": {
                    "1": "case_four"
                },
                "switch": {
                    "1": "input_param"
                }
            }
        },
        "FUN_08006bb8": {
            "entrypoint": "0x08006bb8",
            "current_name": "set_memory_address_08006bb8",
            "code": "\n\n\nundefined4 set_memory_address_08006bb8(undefined4 flag)\n\n{\n  undefined4 address;\n  \n  switch(flag) {\n  case 0:\n    _DAT_40021018 = _DAT_40021018 | 4;\n    address = 0x40010800;\n    break;\n  case 1:\n    _DAT_40021018 = _DAT_40021018 | 8;\n    address = 0x40010c00;\n    break;\n  case 2:\n    _DAT_40021018 = _DAT_40021018 | 0x10;\n    address = 0x40011000;\n    break;\n  case 3:\n    _DAT_40021018 = _DAT_40021018 | 0x20;\n    address = 0x40011400;\n    break;\n  case 4:\n    _DAT_40021018 = _DAT_40021018 | 0x40;\n    address = 0x40011800;\n    break;\n  default:\n    address = 0;\n  }\n  return address;\n}\n\n",
            "renaming": {
                "FUN_08006bb8": "set_memory_address_08006bb8",
                "param_1": "flag",
                "uVar1": "address"
            },
            "calling": [
                "FUN_08008078",
                "FUN_080077b0",
                "FUN_08006e68",
                "FUN_08006ca8",
                "FUN_08007258"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006bb8": {
                    "1": "map_param_to_address",
                    "3": "set_flags_and_return_address",
                    "2": "set_permissions"
                },
                "param_1": {
                    "5": "flag",
                    "1": "permission_type",
                    "2": "value",
                    "3": "flag_value"
                },
                "uVar1": {
                    "9": "address",
                    "3": "return_address",
                    "1": "memory_address",
                    "6": "base_address",
                    "5": "new_address",
                    "4": "result"
                },
                "_DAT_40021018": {
                    "1": "memory_register",
                    "2": "memory_address"
                }
            }
        },
        "FUN_08006c60": {
            "entrypoint": "0x08006c60",
            "current_name": "pinmap_to_uint_08006c60",
            "code": "\nuint pinmap_to_uint_08006c60(undefined4 pin,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  uint shifted_result;\n  \n  result = pinmap_function(pin,&DAT_0800a5b8,param3,param4,param4);\n  shifted_result = (uint)(result << 0xc) >> 0x1b;\n  if (0x10 < shifted_result - 1) {\n    shifted_result = 0;\n  }\n  return shifted_result;\n}\n\n",
            "renaming": {
                "FUN_08006c60": "pinmap_to_uint_08006c60",
                "param_1": "pin",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "shifted_result"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08007376"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006c60": {
                    "1": "calculate_pinmap",
                    "3": "map_pin_function",
                    "2": "map_pin",
                    "6": "pinmap_to_uint"
                },
                "param_1": {
                    "1": "input_param",
                    "3": "input1",
                    "11": "pin",
                    "4": "pinmap_value"
                },
                "param_2": {
                    "6": "param2",
                    "1": "arg2",
                    "3": "param_2",
                    "5": "unused_param"
                },
                "param_3": {
                    "3": "input3",
                    "7": "param3",
                    "1": "pin_param3",
                    "2": "unused_param",
                    "5": "param_3"
                },
                "param_4": {
                    "1": "input_param_4",
                    "7": "param4",
                    "3": "input4",
                    "6": "param_4",
                    "2": "unused_param"
                },
                "iVar1": {
                    "1": "result_code",
                    "6": "pinmap_result",
                    "21": "result"
                },
                "uVar2": {
                    "1": "converted_value",
                    "3": "mapped_index",
                    "12": "shifted_value",
                    "13": "shifted_result"
                }
            }
        },
        "FUN_08006c7c": {
            "entrypoint": "0x08006c7c",
            "current_name": "pinmap_function_result_08006c7c",
            "code": "\nundefined4 pinmap_function_result_08006c7c(undefined4 device_id,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int result;\n  uint shifted_result;\n  \n  result = pinmap_function(device_id,&DAT_0800a6cc,param_3,param_4,param_4);\n  shifted_result = (uint)(result << 0xc) >> 0x1b;\n  if (shifted_result == 3) {\n    return 8;\n  }\n  if (shifted_result != 4) {\n    if (shifted_result != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_08006c7c": "pinmap_function_result_08006c7c",
                "param_1": "device_id",
                "iVar1": "result",
                "uVar2": "shifted_result"
            },
            "calling": [
                "FUN_08007118",
                "FUN_080071e4"
            ],
            "called": [
                "FUN_08007376"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006c7c": {
                    "1": "analyze_pinmap_function",
                    "2": "process_pinmap_function",
                    "3": "pinmap_function_result"
                },
                "param_1": {
                    "2": "input_param",
                    "1": "param_1",
                    "3": "input_param_1",
                    "4": "pin"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "input_param_2",
                    "3": "input_2",
                    "9": "param_2"
                },
                "param_3": {
                    "3": "input_3",
                    "1": "map_data",
                    "2": "input_param_3",
                    "11": "param_3"
                },
                "param_4": {
                    "1": "parameter_2",
                    "2": "input_param_4",
                    "3": "input_4",
                    "11": "param_4"
                },
                "iVar1": {
                    "1": "pinmap_function_result",
                    "21": "result",
                    "9": "pinmap_result"
                },
                "uVar2": {
                    "21": "shifted_result",
                    "1": "capability",
                    "8": "shifted_value"
                }
            }
        },
        "FUN_08006ca8": {
            "entrypoint": "0x08006ca8",
            "current_name": "initialize_gpio_08006ca8",
            "code": "\n\n\nvoid initialize_gpio_08006ca8(int *gpio_address,undefined4 param)\n\n{\n  undefined4 gpio_port;\n  uint gpio_config;\n  int data_value;\n  uint pin_mask;\n  undefined4 gpio_mode;\n  undefined4 gpio_pull;\n  \n  data_value = *gpio_address;\n  if (data_value == 0x40012400) {\n    gpio_config = _DAT_40021018 | 0x200;\n    data_value = 0x200;\n    _DAT_40021018 = gpio_config;\n  }\n  else {\n    gpio_config = 0x40012800;\n    if (data_value == 0x40012800) {\n      gpio_config = _DAT_40021018 | 0x400;\n      data_value = 0x400;\n      _DAT_40021018 = gpio_config;\n    }\n  }\n  gpio_port = configure_gpio_port_clock((uint)((int)(char)DAT_20000014 << 0x18) >> 0x1c,param,gpio_config,data_value);\n  pin_mask = 1 << (DAT_20000014 & 0xf) & 0xffff;\n  gpio_mode = 3;\n  gpio_pull = 0;\n  initialize_gpio_08006ca8(gpio_port,&pin_mask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ca8": "initialize_gpio_08006ca8",
                "param_1": "gpio_address",
                "param_2": "param",
                "uVar1": "gpio_port",
                "uVar2": "gpio_config",
                "iVar3": "data_value",
                "local_18": "pin_mask",
                "local_14": "gpio_mode",
                "local_10": "gpio_pull",
                "set_GPIO_Port_Clock": "configure_gpio_port_clock",
                "HAL_GPIO_Init": "initialize_gpio"
            },
            "calling": [
                "FUN_08003bd8"
            ],
            "called": [
                "FUN_08006bb8",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006ca8": {
                    "1": "initialize_gpio_port_clock_and_init_gpio",
                    "11": "initialize_gpio_port",
                    "17": "initialize_gpio"
                },
                "param_1": {
                    "2": "input_param",
                    "1": "gpio_base",
                    "3": "gpio_address"
                },
                "param_2": {
                    "4": "param_value",
                    "1": "gpio_output",
                    "2": "config_param",
                    "6": "param",
                    "5": "clock_value"
                },
                "uVar1": {
                    "3": "gpio_port_clock",
                    "1": "result",
                    "20": "gpio_port"
                },
                "uVar2": {
                    "1": "previous_config",
                    "6": "gpio_config",
                    "3": "gpio_clock",
                    "4": "gpio_value",
                    "2": "gpio_port_value"
                },
                "iVar3": {
                    "6": "input_value",
                    "1": "gpio_config_mask",
                    "4": "gpio_value",
                    "2": "gpio_port_value",
                    "3": "value",
                    "7": "data_value"
                },
                "local_18": {
                    "1": "bitwise_flag",
                    "2": "bit_mask",
                    "11": "pin_mask",
                    "4": "gpio_pin"
                },
                "local_14": {
                    "1": "gpio_pull",
                    "3": "gpio_pin_mode",
                    "13": "gpio_mode",
                    "5": "pin_mode"
                },
                "local_10": {
                    "1": "gpio_init_alternative",
                    "2": "gpio_pin_state",
                    "4": "pin_pull",
                    "11": "gpio_pull"
                },
                "FUN_08006bb8": {
                    "1": "set_gpio_port_clock"
                },
                "FUN_080040e8": {
                    "1": "hal_gpio_init"
                },
                "set_GPIO_Port_Clock": {
                    "1": "configure_port_clock",
                    "2": "configure_gpio_port_clock"
                },
                "DAT_20000014": {
                    "1": "input_value"
                },
                "HAL_GPIO_Init": {
                    "1": "initialize_gpio_pin",
                    "3": "initialize_gpio"
                }
            }
        },
        "FUN_08006d24": {
            "entrypoint": "0x08006d24",
            "current_name": "update_control_registers_08006d24",
            "code": "\n\n\nvoid update_control_registers_08006d24(int *value)\n\n{\n  if (*value != 0x40012400) {\n    if (*value == 0x40012800) {\n      _DAT_4002100c = _DAT_4002100c & 0xfffffbff;\n      _DAT_40021018 = _DAT_40021018 & 0xfffffbff;\n    }\n    return;\n  }\n  _DAT_4002100c = _DAT_4002100c & 0xfffffdff;\n  _DAT_40021018 = _DAT_40021018 & 0xfffffdff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d24": "update_control_registers_08006d24",
                "param_1": "value"
            },
            "calling": [
                "FUN_08003ce8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006d24": {
                    "2": "update_configuration",
                    "1": "update_flags_based_on_value",
                    "11": "update_control_registers"
                },
                "param_1": {
                    "2": "address",
                    "4": "data",
                    "1": "permission_ptr",
                    "3": "register_value",
                    "5": "value"
                },
                "*param_1": {
                    "1": "current_value",
                    "3": "value"
                },
                "_DAT_4002100c": {
                    "1": "memory_protection_register1",
                    "8": "register1",
                    "7": "control_register1",
                    "3": "register_a"
                },
                "_DAT_40021018": {
                    "1": "register_value_b",
                    "3": "register_b",
                    "7": "control_register2",
                    "8": "register2"
                },
                "PTR_DAT_4002100c": {
                    "1": "register_1"
                },
                "PTR_DAT_40021018": {
                    "1": "register_2"
                },
                "PTR_4002100c": {
                    "1": "register_a"
                },
                "PTR_40021018": {
                    "1": "register_b"
                },
                "*registers": {
                    "1": "value"
                }
            }
        },
        "FUN_08006d80": {
            "entrypoint": "0x08006d80",
            "current_name": "read_adc_value_08006d80",
            "code": "\nundefined2 read_adc_value_08006d80(undefined4 peripheral)\n\n{\n  int status;\n  uint adc_state;\n  undefined2 adc_value;\n  uint adc_channel;\n  undefined4 adc_resolution;\n  undefined4 adc_data_alignment;\n  int adc_handle;\n  undefined4 adc_trigger;\n  undefined4 adc_channel_config;\n  undefined4 adc_channel_type;\n  undefined4 adc_scan_conv_mode;\n  undefined4 adc_continuous_conv_mode;\n  undefined4 adc_gain;\n  undefined4 adc_delay;\n  undefined4 adc_sampling_time;\n  \n  clear_memory(&adc_handle,0,0x30);\n  adc_channel = 0;\n  adc_resolution = 0;\n  adc_data_alignment = 0;\n  adc_value = 0;\n  adc_handle = map_pin_to_peripheral(peripheral,&DAT_0800a5b8);\n  if (adc_handle == 0) {\n    adc_value = 0;\n  }\n  else {\n    adc_trigger = 0;\n    adc_channel_config = 0;\n    adc_channel_type = 0;\n    adc_continuous_conv_mode = 0;\n    adc_delay = 0xe0000;\n    adc_sampling_time = 0;\n    adc_scan_conv_mode = 1;\n    adc_gain = 0;\n    DAT_20000014 = (undefined)peripheral;\n    status = initialize_adc(&adc_handle);\n    if (status == 0) {\n      adc_channel = get_adc_channel(peripheral);\n      if (adc_channel < 0x12) {\n        adc_resolution = 1;\n        adc_data_alignment = 2;\n        status = configure_adc_channel(&adc_handle,&adc_channel);\n        if (status == 0) {\n          status = start_adc_calibration(&adc_handle);\n          if (status == 0) {\n            status = start_adc_conversion(&adc_handle);\n            if (status == 0) {\n              status = poll_adc_conversion(&adc_handle,10);\n              if (status == 0) {\n                adc_state = get_adc_state(&adc_handle);\n                if ((adc_state & 0x200) != 0) {\n                  adc_value = get_adc_value(&adc_handle);\n                }\n                status = stop_adc_conversion(&adc_handle);\n                if (status == 0) {\n                  status = deinitialize_adc(&adc_handle);\n                  if (status != 0) {\n                    adc_value = 0;\n                  }\n                }\n                else {\n                  adc_value = 0;\n                }\n              }\n              else {\n                adc_value = 0;\n              }\n            }\n            else {\n              adc_value = 0;\n            }\n          }\n          else {\n            adc_value = 0;\n          }\n        }\n        else {\n          adc_value = 0;\n        }\n      }\n      else {\n        adc_value = 0;\n      }\n    }\n    else {\n      adc_value = 0;\n    }\n  }\n  return adc_value;\n}\n\n",
            "renaming": {
                "FUN_08006d80": "read_adc_value_08006d80",
                "param_1": "peripheral",
                "local_46": "adc_value",
                "local_44": "adc_channel",
                "local_40": "adc_resolution",
                "local_3c": "adc_data_alignment",
                "local_38": "adc_handle",
                "local_34": "adc_trigger",
                "local_30": "adc_channel_config",
                "local_2c": "adc_channel_type",
                "local_28": "adc_scan_conv_mode",
                "local_24": "adc_continuous_conv_mode",
                "local_20": "adc_gain",
                "local_1c": "adc_delay",
                "local_10": "adc_sampling_time",
                "iVar1": "status",
                "uVar2": "adc_state",
                "HAL_ADC_Init": "initialize_adc",
                "HAL_ADC_ConfigChannel": "configure_adc_channel",
                "HAL_ADCEx_Calibration_Start": "start_adc_calibration",
                "HAL_ADC_Start": "start_adc_conversion",
                "HAL_ADC_PollForConversion": "poll_adc_conversion",
                "HAL_ADC_GetState": "get_adc_state",
                "HAL_ADC_GetValue": "get_adc_value",
                "HAL_ADC_Stop": "stop_adc_conversion",
                "HAL_ADC_DeInit": "deinitialize_adc",
                "memset": "clear_memory",
                "pinmap_peripheral": "map_pin_to_peripheral"
            },
            "calling": [
                "FUN_08008880"
            ],
            "called": [
                "FUN_080038e4",
                "FUN_08003e20",
                "FUN_0800376c",
                "FUN_080038dc",
                "FUN_08003bd8",
                "FUN_08003aa0",
                "FUN_080091c6",
                "FUN_08003de4",
                "FUN_08003ce8",
                "FUN_08006c60",
                "FUN_08007320",
                "FUN_08003a1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006d80": {
                    "1": "perform_adc_conversion",
                    "2": "get_adc_value",
                    "4": "measure_adc_value",
                    "17": "read_adc_value"
                },
                "param_1": {
                    "9": "peripheral",
                    "4": "peripheral_id",
                    "1": "input_pin",
                    "8": "peripheral_address",
                    "5": "pin"
                },
                "local_46": {
                    "1": "analog_value",
                    "29": "adc_value"
                },
                "local_44": {
                    "8": "channel",
                    "1": "channel_index",
                    "22": "adc_channel"
                },
                "local_40": {
                    "1": "adc_enabled",
                    "4": "adc_config_1",
                    "2": "adc_prescaler",
                    "11": "adc_resolution"
                },
                "local_3c": {
                    "1": "adc_resolution",
                    "9": "adc_data_alignment",
                    "2": "adc_config2",
                    "4": "adc_config_2"
                },
                "local_38": {
                    "1": "adc_handler",
                    "26": "adc_handle"
                },
                "local_34": {
                    "1": "calibration_value1",
                    "5": "adc_trigger",
                    "2": "adc_state"
                },
                "local_30": {
                    "1": "adc_type",
                    "2": "adc_dma"
                },
                "local_2c": {
                    "1": "adc_error_state"
                },
                "local_28": {
                    "1": "adc_init5",
                    "2": "adc_scan_conv_mode"
                },
                "local_24": {
                    "1": "calibration_value1",
                    "2": "adc_continuous_conv_mode"
                },
                "local_20": {
                    "1": "success"
                },
                "local_1c": {
                    "1": "adc_nbr_of_conversion",
                    "2": "adc_delay"
                },
                "local_10": {
                    "1": "hal_adc_instance_state",
                    "2": "adc_sampling_time"
                },
                "DAT_20000014": {
                    "1": "pin_mapping"
                },
                "iVar1": {
                    "2": "result",
                    "1": "adc_status",
                    "7": "status"
                },
                "uVar2": {
                    "2": "state",
                    "11": "adc_state"
                },
                "HAL_ADC_Init": {
                    "4": "initialize_adc"
                },
                "get_adc_channel": {
                    "1": "get_channel",
                    "3": "get_adc_channel"
                },
                "HAL_ADC_ConfigChannel": {
                    "1": "config_channel",
                    "3": "configure_adc_channel"
                },
                "HAL_ADCEx_Calibration_Start": {
                    "1": "start_calibration",
                    "3": "start_adc_calibration"
                },
                "HAL_ADC_Start": {
                    "1": "start_conversion",
                    "3": "start_adc_conversion"
                },
                "HAL_ADC_PollForConversion": {
                    "1": "poll_conversion",
                    "3": "poll_adc_conversion"
                },
                "HAL_ADC_GetState": {
                    "4": "get_adc_state"
                },
                "HAL_ADC_GetValue": {
                    "1": "get_conversion_result",
                    "3": "get_adc_value"
                },
                "HAL_ADC_Stop": {
                    "1": "stop_conversion",
                    "3": "stop_adc_conversion"
                },
                "HAL_ADC_DeInit": {
                    "4": "deinitialize_adc"
                },
                "<additional_flags>": {
                    "1": "<local_46>"
                },
                "local_4c": {
                    "1": "pinmap_status"
                },
                "local_50": {
                    "1": "pinmap_gpio_flags"
                },
                "FUN_080038e4": {
                    "1": "pinmap_peripheral"
                },
                "FUN_08003e20": {
                    "1": "get_adc_channel"
                },
                "FUN_0800376c": {
                    "1": "hal_adc_init"
                },
                "FUN_080038dc": {
                    "1": "hal_adc_config_channel"
                },
                "FUN_08003bd8": {
                    "1": "hal_adc_ex_calibration_start"
                },
                "FUN_08003aa0": {
                    "1": "hal_adc_start"
                },
                "FUN_080091c6": {
                    "1": "hal_adc_poll_for_conversion"
                },
                "FUN_08003de4": {
                    "1": "hal_adc_get_state"
                },
                "FUN_08003ce8": {
                    "1": "hal_adc_get_value"
                },
                "FUN_08006c60": {
                    "1": "hal_adc_stop"
                },
                "FUN_08007320": {
                    "1": "hal_adc_de_init"
                },
                "FUN_08003a1c": {
                    "1": "memset"
                },
                "memset": {
                    "1": "initialize_memory"
                },
                "pinmap_peripheral": {
                    "2": "map_pin_to_peripheral"
                },
                "&DAT_0800a5b8": {
                    "1": "peripheral_data_address"
                }
            }
        },
        "FUN_08006e68": {
            "entrypoint": "0x08006e68",
            "current_name": "initialize_gpio_08006e68",
            "code": "\n\n\nvoid initialize_gpio_08006e68(undefined4 clock_pin)\n\n{\n  int pinmap_result;\n  undefined4 gpio_port;\n  uint pin_mask;\n  undefined4 param1;\n  undefined4 param2;\n  undefined4 param3;\n  \n  pinmap_result = pinmap_function((int)(char)DAT_20000014,&DAT_0800a6cc);\n  timer_enable_clock(clock_pin);\n  gpio_port = set_GPIO_Port_Clock((uint)((int)(char)DAT_20000014 << 0x18) >> 0x1c);\n  param1 = 2;\n  param2 = 0;\n  param3 = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  switch((uint)(pinmap_result << 0x11) >> 0x19) {\n  case 1:\n    _DAT_40010004 = _DAT_40010004 | 0x7000001;\n    break;\n  case 2:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n    break;\n  case 3:\n    _DAT_40010004 = _DAT_40010004 | 0x7000002;\n    break;\n  case 4:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n    break;\n  case 5:\n    _DAT_40010004 = _DAT_40010004 | 0x7000004;\n    break;\n  case 6:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n    break;\n  case 7:\n    _DAT_40010004 = _DAT_40010004 | 0x7000008;\n    break;\n  case 8:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n    break;\n  case 9:\n    _DAT_40010004 = _DAT_40010004 | 0x7000030;\n    break;\n  case 10:\n    _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n    break;\n  case 0xb:\n    _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n    break;\n  case 0xc:\n    _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n    break;\n  case 0xd:\n    _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n    break;\n  case 0xe:\n    _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n    break;\n  case 0xf:\n    _DAT_40010004 = _DAT_40010004 | 0x7000300;\n    break;\n  case 0x10:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n    break;\n  case 0x11:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n    break;\n  case 0x12:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n    break;\n  case 0x13:\n    _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n    break;\n  case 0x14:\n    _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n    break;\n  case 0x15:\n    _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n    break;\n  case 0x16:\n    _DAT_40010004 = _DAT_40010004 | 0x7001000;\n    break;\n  case 0x17:\n    _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n    break;\n  case 0x1b:\n    _DAT_40010004 = _DAT_40010004 | 0x7008000;\n    break;\n  case 0x1c:\n    _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n    break;\n  case 0x21:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n    break;\n  case 0x22:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n    break;\n  case 0x23:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n    break;\n  case 0x24:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  pin_mask = 1 << (DAT_20000014 & 0xf) & 0xffff;\n  initialize_gpio_08006e68(gpio_port,&pin_mask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e68": "initialize_gpio_08006e68",
                "param_1": "clock_pin",
                "iVar1": "pinmap_result",
                "uVar2": "gpio_port",
                "local_20": "pin_mask",
                "local_1c": "param1",
                "local_18": "param2",
                "local_14": "param3",
                "HAL_GPIO_Init": "initialize_gpio"
            },
            "calling": [
                "FUN_08006092"
            ],
            "called": [
                "FUN_08007438",
                "FUN_08007376",
                "FUN_08006bb8",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006e68": {
                    "2": "initialize_gpio_port",
                    "1": "initialize_gpio_pin",
                    "27": "initialize_gpio"
                },
                "param_1": {
                    "1": "clock_type",
                    "5": "param",
                    "16": "clock_pin"
                },
                "iVar1": {
                    "1": "function_result",
                    "2": "pin_function",
                    "24": "pinmap_result"
                },
                "uVar2": {
                    "1": "gpio_port_clock_result",
                    "5": "port_clock",
                    "19": "gpio_port"
                },
                "local_20": {
                    "10": "pin_mask",
                    "1": "pin_gpio",
                    "2": "pin_bitmask",
                    "4": "pin",
                    "3": "gpio_pin_mask"
                },
                "local_1c": {
                    "1": "gpio_init_1",
                    "3": "pin_mode_1",
                    "4": "param1",
                    "2": "pin_mode1"
                },
                "local_18": {
                    "1": "mode2",
                    "2": "pull",
                    "3": "param2"
                },
                "local_14": {
                    "2": "pin_mode3",
                    "1": "some_value2",
                    "4": "param3"
                },
                "_DAT_40021018": {
                    "1": "gpio_control_register"
                },
                "_DAT_40010004": {
                    "1": "register2",
                    "2": "gpio_mode_register"
                },
                "FUN_08007438": {
                    "2": "pinmap_function",
                    "1": "get_pinmap_function_result"
                },
                "FUN_08007376": {
                    "2": "timer_enable_clock",
                    "1": "convert_clock_type"
                },
                "FUN_08006bb8": {
                    "2": "set_gpio_port_clock",
                    "1": "enable_timer_clock"
                },
                "FUN_080040e8": {
                    "2": "hal_gpio_init",
                    "1": "set_register_bits"
                },
                "HAL_GPIO_Init": {
                    "1": "initialize_gpio"
                }
            }
        },
        "FUN_08007110": {
            "entrypoint": "0x08007110",
            "current_name": "disable_timer_clock_08007110",
            "code": "\nvoid disable_timer_clock_08007110(void)\n\n{\n  timer_disable_clock();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007110": "disable_timer_clock_08007110"
            },
            "calling": [
                "FUN_08005e2e"
            ],
            "called": [
                "FUN_080074e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007110": {
                    "26": "disable_timer_clock",
                    "1": "disable_clock",
                    "4": "disable_timer"
                },
                "FUN_080074e0": {
                    "1": "update_parameters",
                    "3": "process_parameter",
                    "7": "process_data",
                    "6": "update_parameter",
                    "2": "process_param_1"
                },
                "param_1": {
                    "1": "input_param",
                    "3": "input_array"
                }
            }
        },
        "FUN_08007118": {
            "entrypoint": "0x08007118",
            "current_name": "initialize_pwm_08007118",
            "code": "\nvoid initialize_pwm_08007118(undefined4 peripheral,uint frequency,int param3,undefined4 param4,char start_pwm)\n\n{\n  uint timer_clk_freq;\n  int pwm_channel;\n  int config_result;\n  undefined4 prescaler;\n  undefined4 oc_mode;\n  undefined4 polarity;\n  undefined4 pulse;\n  undefined4 polarity;\n  undefined4 oc_polarity;\n  undefined4 oc_n_polarity;\n  int pin;\n  int prescaler_value;\n  undefined4 pulse;\n  int counter_period;\n  undefined4 oc_mode;\n  undefined4 res2;\n  undefined unused_flag;\n  \n  clear_memory(&pin,0,0x40);\n  prescaler = 0;\n  oc_mode = 0;\n  polarity = 0;\n  pulse = 0;\n  polarity = 0;\n  oc_polarity = 0;\n  oc_n_polarity = 0;\n  pin = get_pin_peripheral(peripheral,&DAT_0800a6cc);\n  if (pin != 0) {\n    timer_clk_freq = get_timer_clock_frequency();\n    prescaler_value = timer_clk_freq / frequency - 1;\n    counter_period = param3 + -1;\n    oc_mode = 0;\n    pulse = 0;\n    res2 = 0;\n    unused_flag = 0;\n    if (start_pwm == '\\x01') {\n      DAT_20000014 = (undefined)peripheral;\n      pwm_channel = initialize_tim_pwm(&pin);\n      if (pwm_channel != 0) {\n        return;\n      }\n    }\n    pwm_channel = get_pwm_channel(peripheral);\n    if ((((pwm_channel == 0) || (pwm_channel == 4)) || (pwm_channel == 8)) || ((pwm_channel == 0xc || (pwm_channel == 0x18)))) {\n      prescaler = 0x60;\n      polarity = 0;\n      polarity = 0;\n      pulse = 0;\n      oc_n_polarity = 0;\n      oc_polarity = 0;\n      oc_mode = param4;\n      config_result = config_tim_pwm_channel(&pin,&prescaler,pwm_channel);\n      if (config_result == 0) {\n        timer_clk_freq = get_pin_function(peripheral,&DAT_0800a6cc);\n        if ((timer_clk_freq & 0x100000) == 0) {\n          start_tim_pwm(&pin,pwm_channel);\n        }\n        else {\n          start_tim_pwm_ex(&pin,pwm_channel);\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007118": "initialize_pwm_08007118",
                "param_1": "peripheral",
                "param_2": "frequency",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "start_pwm",
                "local_58": "pin",
                "local_54": "prescaler_value",
                "local_4c": "counter_period",
                "local_74": "prescaler",
                "local_70": "oc_mode",
                "local_6c": "polarity",
                "local_68": "pulse",
                "local_64": "polarity",
                "local_60": "oc_polarity",
                "local_5c": "oc_n_polarity",
                "local_50": "pulse",
                "local_48": "oc_mode",
                "local_44": "res2",
                "local_1b": "unused_flag",
                "uVar1": "timer_clk_freq",
                "iVar2": "pwm_channel",
                "iVar3": "config_result",
                "HAL_TIM_PWM_Init": "initialize_tim_pwm",
                "HAL_TIM_PWM_ConfigChannel": "config_tim_pwm_channel",
                "pinmap_function": "get_pin_function",
                "HAL_TIM_PWM_Start": "start_tim_pwm",
                "HAL_TIMEx_PWMN_Start": "start_tim_pwm_ex",
                "memset": "clear_memory",
                "getTimerClkFreq": "get_timer_clock_frequency",
                "pinmap_peripheral": "get_pin_peripheral"
            },
            "calling": [
                "FUN_080088e0"
            ],
            "called": [
                "FUN_08006092",
                "FUN_08006186",
                "FUN_08007376",
                "FUN_0800643c",
                "FUN_080091c6",
                "FUN_08006c7c",
                "FUN_08006390",
                "FUN_080075dc",
                "FUN_08007320"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007118": {
                    "1": "initialize_pwm_controller",
                    "2": "initialize_and_start_pwm",
                    "6": "configure_pwm",
                    "8": "initialize_pwm"
                },
                "param_1": {
                    "15": "peripheral",
                    "1": "peripheral_number",
                    "8": "peripheral_address",
                    "4": "peripheral_id"
                },
                "param_2": {
                    "5": "timer_period",
                    "1": "timer_divider",
                    "9": "timer_frequency",
                    "14": "frequency"
                },
                "param_3": {
                    "8": "param3",
                    "2": "param_3",
                    "1": "pwm_frequency",
                    "3": "channel_count",
                    "4": "channel",
                    "6": "duty_cycle"
                },
                "param_4": {
                    "2": "configuration",
                    "6": "param4",
                    "3": "channel_config",
                    "1": "config_param",
                    "4": "pwm_config"
                },
                "param_5": {
                    "2": "enable_flag",
                    "1": "start_channel",
                    "3": "enable_pwm",
                    "7": "start_pwm"
                },
                "local_58": {
                    "1": "tim_handle",
                    "2": "timer_handle",
                    "4": "pin"
                },
                "local_54": {
                    "3": "timer_period",
                    "1": "auto_reload_value",
                    "2": "timer_prescaler",
                    "6": "prescaler",
                    "7": "prescaler_value"
                },
                "local_4c": {
                    "1": "duty_cycle_adjustment",
                    "2": "param3_minus_one"
                },
                "local_74": {
                    "2": "pwm_prescaler",
                    "1": "pwm_arr_value",
                    "7": "prescaler",
                    "3": "pwm_period"
                },
                "local_70": {
                    "1": "pwm_pre_scaler",
                    "2": "oc_mode"
                },
                "local_6c": {
                    "1": "pwm_ccr_value",
                    "2": "polarity"
                },
                "local_68": {
                    "1": "pwm_channel_config_value4",
                    "2": "pulse"
                },
                "local_64": {
                    "1": "timer_polarity",
                    "3": "polarity"
                },
                "local_60": {
                    "1": "pwm_output_config"
                },
                "local_5c": {
                    "1": "config7"
                },
                "local_50": {
                    "1": "temp_var6",
                    "2": "compare_value"
                },
                "local_48": {
                    "1": "pwm_config",
                    "2": "oc_mode"
                },
                "local_44": {
                    "1": "pwm_output_config"
                },
                "local_1b": {
                    "2": "unused_flag",
                    "1": "start"
                },
                "uVar1": {
                    "21": "timer_clk_freq",
                    "2": "timer_frequency",
                    "1": "pin_function"
                },
                "iVar2": {
                    "1": "pwm_channel_index",
                    "28": "pwm_channel"
                },
                "iVar3": {
                    "15": "config_result",
                    "2": "config_status",
                    "1": "status",
                    "4": "result",
                    "3": "pwm_config_result"
                },
                "DAT_0800a6cc": {
                    "1": "pin_config",
                    "2": "pinmap_data"
                },
                "DAT_20000014": {
                    "2": "peripheral_address",
                    "1": "pwm_data"
                },
                "HAL_TIM_PWM_Init": {
                    "1": "initialize_tim_pwm"
                },
                "get_pwm_channel": {
                    "2": "get_pwm_channel"
                },
                "HAL_TIM_PWM_ConfigChannel": {
                    "1": "config_tim_pwm_channel"
                },
                "pinmap_function": {
                    "1": "get_pin_function"
                },
                "HAL_TIM_PWM_Start": {
                    "1": "start_pwm1"
                },
                "HAL_TIMEx_PWMN_Start": {
                    "1": "start_tim_pwm_ex"
                },
                "memset": {
                    "2": "clear_memory"
                },
                "getTimerClkFreq": {
                    "2": "get_timer_clock_frequency"
                },
                "pinmap_peripheral": {
                    "1": "get_pin_peripheral"
                },
                "FUN_08006092": {
                    "1": "pinmap_peripheral"
                },
                "FUN_08006186": {
                    "1": "hal_tim_pwm_init"
                },
                "FUN_08007376": {
                    "1": "get_pwm_channel"
                },
                "FUN_0800643c": {
                    "1": "hal_tim_pwm_config_channel"
                },
                "FUN_080091c6": {
                    "1": "pinmap_function"
                },
                "FUN_08006c7c": {
                    "1": "hal_tim_pwm_start"
                },
                "FUN_08006390": {
                    "1": "hal_tim_ex_pwmn_start"
                },
                "FUN_080075dc": {
                    "1": "pinmap_function_check"
                },
                "FUN_08007320": {
                    "1": "hal_tim_pwm_start"
                }
            }
        },
        "FUN_080071e4": {
            "entrypoint": "0x080071e4",
            "current_name": "stop_pwm_080071e4",
            "code": "\nvoid stop_pwm_080071e4(undefined4 peripheral)\n\n{\n  int pwm_channel;\n  uint pinmap_function_result;\n  int pwm_channels [17];\n  \n  pwm_channel = get_pinmap_peripheral(peripheral,&DAT_0800a6cc);\n  if ((pwm_channel != 0) &&\n     ((((pwm_channel = get_current_pwm_channel(peripheral), pwm_channel == 0 || (pwm_channel == 4)) || (pwm_channel == 8)) ||\n      ((pwm_channel == 0xc || (pwm_channel == 0x18)))))) {\n    pinmap_function_result = get_pinmap_function(peripheral,&DAT_0800a6cc);\n    if ((pinmap_function_result & 0x100000) == 0) {\n      stop_pwm_080071e4(pwm_channels,pwm_channel);\n    }\n    else {\n      stop_tim_pwm_ex(pwm_channels,pwm_channel);\n    }\n    deinitialize_pwm(pwm_channels);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080071e4": "stop_pwm_080071e4",
                "param_1": "peripheral",
                "local_50": "pwm_channels",
                "iVar1": "pwm_channel",
                "uVar2": "pinmap_function_result",
                "local_50[0]": "pwm_channel",
                "pinmap_peripheral": "get_pinmap_peripheral",
                "get_pwm_channel": "get_current_pwm_channel",
                "pinmap_function": "get_pinmap_function",
                "HAL_TIM_PWM_Stop": "stop_pwm",
                "HAL_TIMEx_PWMN_Stop": "stop_tim_pwm_ex",
                "HAL_TIM_PWM_DeInit": "deinitialize_pwm"
            },
            "calling": [
                "FUN_08008990"
            ],
            "called": [
                "FUN_08007376",
                "FUN_08005e2e",
                "FUN_08006c7c",
                "FUN_080063c0",
                "FUN_08007320",
                "FUN_08006460"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080071e4": {
                    "5": "stop_pwm_peripheral",
                    "1": "stop_pwm_if_valid_channel",
                    "6": "stop_pwm_channel",
                    "7": "stop_pwm",
                    "2": "stop_pwm_on_peripheral"
                },
                "param_1": {
                    "20": "peripheral",
                    "3": "device",
                    "5": "peripheral_address",
                    "1": "param"
                },
                "local_50": {
                    "3": "pwm_array",
                    "1": "tim_handle",
                    "4": "pwm_channel_array",
                    "6": "pwm_channels",
                    "2": "peripheral_mapping"
                },
                "iVar1": {
                    "1": "channel",
                    "13": "pwm_channel"
                },
                "uVar2": {
                    "1": "function_pin_map",
                    "3": "pin_function",
                    "2": "function_mapping"
                },
                "FUN_08007376": {
                    "1": "pinmap_peripheral"
                },
                "FUN_08005e2e": {
                    "1": "get_pwm_channel"
                },
                "FUN_08006c7c": {
                    "1": "hal_tim_pwm_stop"
                },
                "FUN_080063c0": {
                    "1": "pinmap_function"
                },
                "FUN_08007320": {
                    "1": "hal_tim_pwm_n_stop"
                },
                "FUN_08006460": {
                    "1": "hal_tim_pwm_de_init"
                },
                "local_50[0]": {
                    "1": "pwm_channel"
                },
                "pinmap_peripheral": {
                    "1": "get_peripheral_pinmap"
                },
                "get_pwm_channel": {
                    "2": "get_pwm_channel"
                },
                "pinmap_function": {
                    "1": "get_pinmap_function"
                },
                "HAL_TIM_PWM_Stop": {
                    "1": "stop_tim_pwm",
                    "2": "stop_pwm"
                },
                "HAL_TIMEx_PWMN_Stop": {
                    "1": "stop_pwm_advanced"
                },
                "HAL_TIM_PWM_DeInit": {
                    "1": "deinitialize_tim_pwm",
                    "2": "deinitialize_pwm"
                },
                "DAT_0800a6cc": {
                    "1": "peripheral_constant"
                }
            }
        },
        "FUN_0800723c": {
            "entrypoint": "0x0800723c",
            "current_name": "get_current_tick_0800723c",
            "code": "\nvoid get_current_tick_0800723c(void)\n\n{\n  get_tick();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800723c": "get_current_tick_0800723c",
                "HAL_GetTick": "get_tick"
            },
            "calling": [
                "FUN_08008abc"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800723c": {
                    "1": "get_current_ticks",
                    "2": "get_system_tick",
                    "15": "get_current_tick",
                    "11": "get_current_time"
                },
                "FUN_08003760": {
                    "1": "get_status",
                    "6": "initialize_system",
                    "9": "retrieve_data"
                },
                "HAL_GetTick": {
                    "1": "system_ticks",
                    "6": "get_tick"
                }
            }
        },
        "FUN_08007244": {
            "entrypoint": "0x08007244",
            "current_name": "FUNC_08007244",
            "code": "\nvoid FUNC_08007244(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007244": "FUNC_08007244"
            },
            "calling": [
                "FUN_08007246"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007246": {
            "entrypoint": "0x08007246",
            "current_name": "update_system_tick_08007246",
            "code": "\nvoid update_system_tick_08007246(void)\n\n{\n  increment_system_tick();\n  handle_system_tick_interrupt();\n  handle_custom_system_tick();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007246": "update_system_tick_08007246",
                "HAL_IncTick": "increment_system_tick",
                "HAL_SYSTICK_IRQHandler": "handle_system_tick_interrupt",
                "noOsSystickHandler": "handle_custom_system_tick"
            },
            "calling": [],
            "called": [
                "FUN_08007244",
                "FUN_08004046",
                "FUN_08003748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007246": {
                    "1": "update_system_ticks",
                    "4": "handle_tick_interrupt",
                    "3": "handle_system_tick",
                    "2": "update_tick_and_interrupt",
                    "5": "update_system_tick"
                },
                "FUNC_08007244": {
                    "1": "increment_sys_tick",
                    "4": "increment_system_tick",
                    "18": "increment_tick"
                },
                "FUN_08004046": {
                    "6": "handle_sys_tick_irq",
                    "1": "process_system_tick_irq",
                    "2": "systick_handler",
                    "5": "handle_sys_tick",
                    "10": "handle_sys_tick_interrupt"
                },
                "FUN_08003748": {
                    "5": "no_os_systick_handler",
                    "2": "handle_systick_handler",
                    "3": "handle_no_os_sys_tick",
                    "1": "call_systick_handler",
                    "10": "handle_no_os_systick"
                },
                "FUN_08007244": {
                    "1": "increment_hardware_tick"
                },
                "HAL_IncTick": {
                    "1": "increment_system_tick"
                },
                "HAL_SYSTICK_IRQHandler": {
                    "1": "handle_system_tick_interrupt"
                },
                "noOsSystickHandler": {
                    "1": "handle_custom_system_tick"
                }
            }
        },
        "FUN_08007258": {
            "entrypoint": "0x08007258",
            "current_name": "initialize_gpio_08007258",
            "code": "\n\n\nvoid initialize_gpio_08007258(uint pin_number,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 gpio_port;\n  uint pin_mask;\n  undefined4 local_param2;\n  undefined4 local_param3;\n  undefined4 constant_value;\n  \n  gpio_port = configure_port_clock((pin_number << 0x18) >> 0x1c);\n  pin_mask = 1 << (pin_number & 0xf) & 0xffff;\n  constant_value = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  if ((pin_number - 0xd & 0xff) < 2) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  if (((pin_number == 0xf) || (pin_number == 0x13)) || (pin_number == 0x14)) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n  }\n  local_param2 = param2;\n  local_param3 = param3;\n  configure_gpio(gpio_port,&pin_mask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007258": "initialize_gpio_08007258",
                "param_1": "pin_number",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "gpio_port",
                "local_20": "pin_mask",
                "local_1c": "local_param2",
                "local_18": "local_param3",
                "local_14": "constant_value",
                "HAL_GPIO_Init": "configure_gpio",
                "set_GPIO_Port_Clock": "configure_port_clock"
            },
            "calling": [
                "FUN_08008990"
            ],
            "called": [
                "FUN_08006bb8",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007258": {
                    "10": "initialize_gpio_port",
                    "4": "configure_gpio_port",
                    "1": "initialize_gpio_pin",
                    "16": "initialize_gpio"
                },
                "param_1": {
                    "3": "gpio_pin",
                    "1": "port_number",
                    "2": "pin",
                    "25": "pin_number"
                },
                "param_2": {
                    "1": "arg2",
                    "11": "param2",
                    "2": "param1",
                    "4": "param_2"
                },
                "param_3": {
                    "2": "param2",
                    "1": "gpio_pull",
                    "11": "param3",
                    "4": "param_3"
                },
                "uVar1": {
                    "1": "port_number",
                    "2": "port_address",
                    "21": "gpio_port"
                },
                "local_20": {
                    "1": "bit_mask",
                    "23": "pin_mask",
                    "2": "pin_config",
                    "3": "gpio_pin_mask"
                },
                "local_1c": {
                    "3": "local_param2",
                    "1": "local_param1",
                    "2": "local_var1"
                },
                "local_18": {
                    "1": "config_param2_copy",
                    "2": "param2_copy",
                    "3": "param3_copy"
                },
                "local_14": {
                    "1": "local3",
                    "2": "local_var3",
                    "5": "constant",
                    "4": "local_var",
                    "6": "constant_value"
                },
                "_DAT_40021018": {
                    "2": "gpio_port_register",
                    "1": "port_c_register"
                },
                "_DAT_40010004": {
                    "1": "gpio_register_2"
                },
                "HAL_GPIO_Init": {
                    "1": "initialize_gpio"
                },
                "set_GPIO_Port_Clock": {
                    "1": "configure_port_clock"
                },
                "FUN_08006bb8": {
                    "1": "set_gpio_port_clock"
                },
                "FUN_080040e8": {
                    "1": "read_registers"
                }
            }
        },
        "FUN_080072d8": {
            "entrypoint": "0x080072d8",
            "current_name": "write_pin_state_080072d8",
            "code": "\nvoid write_pin_state_080072d8(undefined4 gpio_port,undefined2 gpio_pin,int state,undefined4 param)\n\n{\n  if (state == 0) {\n    write_pin(gpio_port,gpio_pin,0,param,param);\n    return;\n  }\n  write_pin(gpio_port,gpio_pin,1,param,param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d8": "write_pin_state_080072d8",
                "param_1": "gpio_port",
                "param_2": "gpio_pin",
                "param_3": "state",
                "param_4": "param",
                "HAL_GPIO_WritePin": "write_pin"
            },
            "calling": [
                "FUN_08008a24"
            ],
            "called": [
                "FUN_080042e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080072d8": {
                    "5": "write_pin_state",
                    "1": "toggle_pin_state",
                    "3": "set_gpio_pin_state",
                    "2": "gpio_write_pin"
                },
                "param_1": {
                    "9": "port",
                    "2": "gpio",
                    "1": "gpio_pin_group",
                    "18": "gpio_port"
                },
                "param_2": {
                    "1": "port",
                    "3": "pin_number",
                    "14": "gpio_pin",
                    "12": "pin"
                },
                "param_3": {
                    "1": "level",
                    "2": "condition",
                    "21": "state",
                    "3": "pin_state"
                },
                "param_4": {
                    "4": "param4",
                    "3": "param_4",
                    "2": "arg1",
                    "1": "pin_direction",
                    "15": "param"
                },
                "HAL_GPIO_WritePin": {
                    "1": "gpio_write_pin",
                    "2": "set_gpio_state",
                    "3": "set_pin_state",
                    "5": "write_pin"
                },
                "FUN_080042e2": {
                    "1": "some_other_function"
                }
            }
        },
        "FUN_080072f0": {
            "entrypoint": "0x080072f0",
            "current_name": "read_gpio_pin_080072f0",
            "code": "\nvoid read_gpio_pin_080072f0(undefined4 gpio_port,undefined2 gpio_pin,undefined4 param3,undefined4 param4)\n\n{\n  read_pin(gpio_port,gpio_pin,param3,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072f0": "read_gpio_pin_080072f0",
                "param_1": "gpio_port",
                "param_2": "gpio_pin",
                "param_3": "param3",
                "param_4": "param4",
                "HAL_GPIO_ReadPin": "read_pin"
            },
            "calling": [
                "FUN_08008a6c"
            ],
            "called": [
                "FUN_080042d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080072f0": {
                    "13": "read_gpio_pin",
                    "1": "read_pin_status",
                    "2": "read_gpio",
                    "7": "read_pin",
                    "4": "read_pin_and_return"
                },
                "param_1": {
                    "1": "var_1",
                    "3": "param1",
                    "2": "param_1",
                    "17": "gpio_port"
                },
                "param_2": {
                    "3": "param2",
                    "6": "pin",
                    "1": "pin_state",
                    "8": "gpio_pin",
                    "2": "param_2"
                },
                "param_3": {
                    "1": "irq_mode",
                    "14": "param3",
                    "2": "mode",
                    "9": "param_3"
                },
                "param_4": {
                    "2": "pull",
                    "14": "param4",
                    "1": "unused2",
                    "9": "param_4"
                },
                "FUN_080042d4": {
                    "1": "perform_some_operation",
                    "2": "some_function"
                },
                "HAL_GPIO_ReadPin": {
                    "1": "read_pin"
                }
            }
        },
        "FUN_080072fa": {
            "entrypoint": "0x080072fa",
            "current_name": "initialize_system_080072fa",
            "code": "\nvoid initialize_system_080072fa(void)\n\n{\n  initialize_hal();\n  configure_system_clock();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072fa": "initialize_system_080072fa",
                "HAL_Init": "initialize_hal",
                "SystemClock_Config": "configure_system_clock"
            },
            "calling": [
                "FUN_080036a2"
            ],
            "called": [
                "FUN_08003724",
                "FUN_080035b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080072fa": {
                    "26": "initialize_system",
                    "1": "initialize",
                    "4": "initialize_hardware"
                },
                "HAL_Init": {
                    "1": "initialize_hardware",
                    "22": "initialize_hal"
                },
                "SystemClock_Config": {
                    "1": "",
                    "24": "configure_system_clock"
                },
                "FUN_08003724": {
                    "1": "get_data",
                    "2": "initialize_hal",
                    "4": "initialize_subsystem"
                },
                "FUN_080035b8": {
                    "1": "perform_function",
                    "5": "configure_system_clock",
                    "3": "perform_operation"
                }
            }
        },
        "FUN_08007306": {
            "entrypoint": "0x08007306",
            "current_name": "find_value_in_array_08007306",
            "code": "\nundefined4 find_value_in_array_08007306(int value,char *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (*array == value) break;\n    array = array + 0xc;\n  }\n  return *(undefined4 *)(array + 4);\n}\n\n",
            "renaming": {
                "FUN_08007306": "find_value_in_array_08007306",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "FUN_08007320",
                "FUN_08007306"
            ],
            "called": [
                "FUN_08007306"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007306": {
                    "2": "find_value_by_index",
                    "1": "find_value_in_list",
                    "6": "find_value_offset",
                    "14": "find_value_in_array"
                },
                "param_1": {
                    "7": "value_to_find",
                    "9": "target_value",
                    "1": "target",
                    "10": "value",
                    "2": "desired_value"
                },
                "param_2": {
                    "1": "buffer",
                    "5": "data_array",
                    "16": "array",
                    "2": "array_ptr"
                },
                "*param_2": {
                    "2": "current_byte",
                    "1": "array_value"
                },
                "*param_2 == -1": {
                    "1": "end_of_data"
                },
                "*param_2 == param_1": {
                    "1": "value_found"
                },
                "param_2 + 0xc": {
                    "1": "current_value_next",
                    "2": "next_element"
                },
                "*(undefined4 *)(param_2 + 4)": {
                    "1": "value_offset",
                    "4": "found_value"
                },
                "param_2[0]": {
                    "1": "array[0]"
                },
                "param_2[4]": {
                    "1": "array[1]"
                },
                "array[0]": {
                    "1": "current_element"
                },
                "array[4]": {
                    "1": "result"
                },
                "PTR_": {
                    "1": "omit"
                },
                "DAT_": {
                    "1": "omit"
                },
                "PTR_4": {
                    "1": "result_offset"
                },
                "DAT_10": {
                    "1": "end_of_array"
                }
            }
        },
        "FUN_08007320": {
            "entrypoint": "0x08007320",
            "current_name": "find_peripheral_08007320",
            "code": "\nundefined4 find_peripheral_08007320(int input_value)\n\n{\n  undefined4 peripheral;\n  \n  if (input_value != -1) {\n    peripheral = pinmap_find_peripheral_08007320();\n    return peripheral;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007320": "find_peripheral_08007320",
                "param_1": "input_value",
                "uVar1": "peripheral"
            },
            "calling": [
                "FUN_08008078",
                "FUN_080077b0",
                "FUN_08008500",
                "FUN_08007118",
                "FUN_08006d80",
                "FUN_080084b0",
                "FUN_080071e4"
            ],
            "called": [
                "FUN_08007306"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007320": {
                    "24": "find_peripheral",
                    "1": "find_peripheral_in_pinmap",
                    "3": "find_peripheral_device"
                },
                "param_1": {
                    "4": "peripheral_id",
                    "1": "input_param",
                    "15": "input_value",
                    "3": "device_id"
                },
                "uVar1": {
                    "8": "peripheral",
                    "1": "peripheral_id",
                    "5": "peripheral_address",
                    "4": "result",
                    "3": "peripheral_value"
                },
                "FUN_08007306": {
                    "2": "pinmap_find_peripheral",
                    "1": "pinmap_entry"
                },
                "param_2": {
                    "1": "peripheral_map"
                }
            }
        },
        "FUN_08007332": {
            "entrypoint": "0x08007332",
            "current_name": "find_character_08007332",
            "code": "\nint find_character_08007332(int character,char *string)\n\n{\n  while( true ) {\n    if (*(int *)(string + 4) == 0) {\n      return -1;\n    }\n    if (*(int *)(string + 4) == character) break;\n    string = string + 0xc;\n  }\n  return (int)*string;\n}\n\n",
            "renaming": {
                "FUN_08007332": "find_character_08007332",
                "param_1": "character",
                "param_2": "string"
            },
            "calling": [
                "FUN_08007332",
                "FUN_0800734a"
            ],
            "called": [
                "FUN_08007332"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007332": {
                    "7": "find_character_index",
                    "1": "find_value_in_list",
                    "2": "find_character_position",
                    "9": "find_character"
                },
                "param_1": {
                    "3": "value",
                    "1": "integer_to_find",
                    "9": "character",
                    "2": "character_code",
                    "4": "character_to_find"
                },
                "param_2": {
                    "4": "array",
                    "1": "buffer",
                    "8": "string",
                    "7": "character_array"
                },
                "*(int *)(param_2 + 4)": {
                    "1": "current_character_code",
                    "2": "current_value"
                },
                "param_2 + 0xc": {
                    "1": "next_list_item",
                    "3": "next_character_array"
                },
                "(int)*param_2": {
                    "1": "found_value"
                },
                "param_2 + 4": {
                    "1": "current_param_value"
                },
                "*param_2": {
                    "5": "found_character",
                    "1": "parameter_value",
                    "3": "found_value"
                },
                "param_2+4": {
                    "1": "string_length"
                },
                "return -1": {
                    "1": "character_not_found"
                }
            }
        },
        "FUN_0800734a": {
            "entrypoint": "0x0800734a",
            "current_name": "find_pin_or_default_0800734a",
            "code": "\nundefined4 find_pin_or_default_0800734a(int pin_number)\n\n{\n  undefined4 pin_result;\n  \n  if (pin_number != 0) {\n    pin_result = pinmap_find_pin();\n    return pin_result;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800734a": "find_pin_or_default_0800734a",
                "param_1": "pin_number",
                "uVar1": "pin_result"
            },
            "calling": [
                "FUN_08008d30",
                "FUN_080084b0"
            ],
            "called": [
                "FUN_08007332"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800734a": {
                    "8": "find_pin_or_default",
                    "2": "find_pin_or_return_error",
                    "4": "find_pin_or_error",
                    "1": "find_pin_or_fallback",
                    "5": "find_pin"
                },
                "param_1": {
                    "1": "input_param",
                    "5": "pin_id",
                    "6": "pin_number",
                    "2": "pin_param",
                    "3": "pin"
                },
                "uVar1": {
                    "2": "pin_found",
                    "12": "pin_result",
                    "1": "found_pin_number",
                    "3": "found_pin",
                    "10": "result"
                },
                "<param_1>": {
                    "1": "pin_count"
                },
                "<uVar1>": {
                    "1": "valid_pin"
                }
            }
        },
        "FUN_0800735a": {
            "entrypoint": "0x0800735a",
            "current_name": "find_value_index_0800735a",
            "code": "\nundefined4 find_value_index_0800735a(int target_value,char *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      found_value 0xffffffff;\n    }\n    if (*array == target_value) stop_search;\n    array = array + 0xc;\n  }\n  found_value *(undefined4 *)(array + 8);\n}\n\n",
            "renaming": {
                "FUN_0800735a": "find_value_index_0800735a",
                "param_1": "target_value",
                "param_2": "array",
                "return": "found_value",
                "break": "stop_search"
            },
            "calling": [
                "FUN_08007376",
                "FUN_0800735a"
            ],
            "called": [
                "FUN_0800735a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800735a": {
                    "2": "find_value_in_list",
                    "1": "find_param_value",
                    "7": "find_value_index",
                    "5": "find_value_in_array"
                },
                "param_1": {
                    "8": "value",
                    "1": "index",
                    "12": "target_value"
                },
                "param_2": {
                    "4": "data_array",
                    "12": "array",
                    "1": "input_list",
                    "3": "value_array",
                    "2": "array_ptr"
                },
                "*param_2": {
                    "4": "current_element",
                    "2": "current_parameter",
                    "1": "current_value"
                },
                "param_2 + 0xc": {
                    "2": "next_element",
                    "1": "data_offset"
                },
                "*(undefined4 *)(param_2 + 8)": {
                    "1": "desired_value"
                },
                "*param_2 + 0xc": {
                    "1": "next_parameter"
                },
                "return": {
                    "2": "found_value"
                },
                "DAT_08007378": {
                    "1": "array_size"
                },
                "DAT_08007374": {
                    "1": "element_size"
                },
                "break": {
                    "1": "stop_search"
                },
                "PTR_xxxxx": {
                    "1": "new_name_xxxxx"
                },
                "ptr_array_element": {
                    "1": "array_element"
                },
                "ptr_result": {
                    "1": "result"
                },
                "param_2_old": {
                    "1": "array"
                },
                "param_2_new": {
                    "1": "array"
                },
                "param_2_ptr": {
                    "1": "array_ptr"
                },
                "param_2_old_ptr": {
                    "1": "array_ptr"
                },
                "param_2_new_ptr": {
                    "1": "array_ptr"
                },
                "param_2_dat": {
                    "1": "array_data"
                },
                "param_2_old_dat": {
                    "1": "array_data"
                },
                "param_2_new_dat": {
                    "1": "array_data"
                }
            }
        },
        "FUN_08007376": {
            "entrypoint": "0x08007376",
            "current_name": "find_function_08007376",
            "code": "\nundefined4 find_function_08007376(int input_value)\n\n{\n  undefined4 result;\n  \n  if (input_value == -1) {\n    return 0xffffffff;\n  }\n  result = pinmap_find_function_08007376();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08007376": "find_function_08007376",
                "param_1": "input_value",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08008078",
                "FUN_080077b0",
                "FUN_08007118",
                "FUN_08006e68",
                "FUN_08006c60",
                "FUN_080071e4",
                "FUN_08006c7c"
            ],
            "called": [
                "FUN_0800735a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007376": {
                    "1": "find_function_result_or_fail",
                    "2": "find_and_return_function",
                    "5": "find_function",
                    "3": "find_function_result"
                },
                "param_1": {
                    "1": "input_data",
                    "18": "input_value",
                    "2": "pin_id",
                    "3": "pin",
                    "5": "input_param"
                },
                "uVar1": {
                    "5": "function_found",
                    "2": "found_function",
                    "16": "result",
                    "8": "function_result"
                },
                "FUN_0800735a": {
                    "1": "find_function_by_name"
                },
                "param_2": {
                    "1": "function_name"
                }
            }
        },
        "FUN_0800738a": {
            "entrypoint": "0x0800738a",
            "current_name": "find_value_0800738a",
            "code": "\nundefined4 find_value_0800738a(int input_value,char *array)\n\n{\n  if (input_value == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (input_value == *array) param_found;\n    array = array + 0xc;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800738a": "find_value_0800738a",
                "param_1": "input_value",
                "param_2": "array",
                "break": "param_found"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080088e0",
                "FUN_08000a64",
                "FUN_0800021a",
                "FUN_080005f8",
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800738a": {
                    "1": "compare_param_with_array",
                    "3": "check_match",
                    "2": "compare_values",
                    "4": "find_value"
                },
                "param_1": {
                    "2": "value_to_check",
                    "1": "target",
                    "8": "value"
                },
                "param_2": {
                    "1": "pattern",
                    "8": "array",
                    "2": "values_array",
                    "3": "array_of_values",
                    "4": "array_ptr"
                },
                "*param_2": {
                    "1": "first_item",
                    "4": "current_value"
                },
                "param_2[0]": {
                    "1": "current_item"
                },
                "param_2 + 0xc": {
                    "2": "next_value",
                    "1": "next_item"
                },
                "break": {
                    "1": "param_found"
                }
            }
        },
        "FUN_080073ae": {
            "entrypoint": "0x080073ae",
            "current_name": "compare_and_return_smaller_080073ae",
            "code": "\nint compare_and_return_smaller_080073ae(int value1,int value2)\n\n{\n  if (value1 != value2) {\n    if (value1 == 0) {\n      return value2;\n    }\n    if (value2 == 0) {\n      return value1;\n    }\n    value1 = 0;\n  }\n  return value1;\n}\n\n",
            "renaming": {
                "FUN_080073ae": "compare_and_return_smaller_080073ae",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_08008078",
                "FUN_080077b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080073ae": {
                    "1": "compare_values",
                    "3": "compare_and_return_non_zero",
                    "2": "find_common_value"
                },
                "param_1": {
                    "2": "num1",
                    "8": "value_1",
                    "1": "first_parameter",
                    "9": "value1",
                    "4": "first_param"
                },
                "param_2": {
                    "1": "second_parameter",
                    "2": "input_2",
                    "8": "value_2",
                    "4": "second_param",
                    "9": "value2"
                }
            }
        },
        "FUN_080073c0": {
            "entrypoint": "0x080073c0",
            "current_name": "execute_callback_function_080073c0",
            "code": "\nvoid execute_callback_function_080073c0(void)\n\n{\n  if (DAT_200005f4 != (callback_function *)0x0) {\n    (*DAT_200005f4)(DAT_2000060c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073c0": "execute_callback_function_080073c0",
                "code": "callback_function"
            },
            "calling": [
                "FUN_08005cb4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080073c0": {
                    "13": "execute_callback",
                    "2": "execute_function_if_not_null",
                    "1": "execute_callback_if_set",
                    "14": "execute_callback_function"
                },
                "DAT_2000060c": {
                    "11": "callback_data",
                    "1": "parameter",
                    "4": "callback_argument",
                    "3": "callback_parameter"
                },
                "DAT_200005f4": {
                    "1": "callback",
                    "5": "callback_function_pointer",
                    "8": "callback_function",
                    "4": "callback_pointer"
                },
                "code": {
                    "4": "callback_function"
                },
                "FUNC_PTR_200005f4": {
                    "1": "callback_pointer"
                },
                "PTR_fun_ptr": {
                    "1": "function_pointer"
                },
                "DAT_struct_ptr": {
                    "1": "structure_pointer"
                },
                "*callback_function": {
                    "1": "function_to_execute"
                },
                "*callback_parameter": {
                    "1": "parameter_to_pass"
                },
                "code *": {
                    "1": "function_callback"
                }
            }
        },
        "FUN_080073e8": {
            "entrypoint": "0x080073e8",
            "current_name": "infinite_loop_080073e8",
            "code": "\nvoid infinite_loop_080073e8(void)\n\n{\n  iterate {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( is_true );\n}\n\n",
            "renaming": {
                "FUN_080073e8": "infinite_loop_080073e8",
                "do": "iterate",
                "true": "is_true"
            },
            "calling": [
                "FUN_080073e8",
                "FUN_080035b8"
            ],
            "called": [
                "FUN_080073e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080073e8": {
                    "1": "do_infinity_loop",
                    "2": "run_infinite_loop",
                    "27": "infinite_loop"
                },
                "PTR_": {
                    "2": "ptr_",
                    "1": "<unchanged>"
                },
                "DAT_": {
                    "1": "<unchanged>",
                    "2": "unchanged"
                },
                "PTR_XXXXXX": {
                    "1": "unchanged"
                },
                "PTR_XXXX": {
                    "1": "unchanged"
                },
                "do": {
                    "1": "loop"
                },
                "true": {
                    "1": "true"
                },
                "WhileLoopCondition": {
                    "1": "is_true"
                },
                "<original_parameter_name_1>": {
                    "1": "<new_parameter_name_1>"
                },
                "<original_parameter_name_2>": {
                    "1": "<new_parameter_name_2>"
                },
                "<original_parameter_name_n>": {
                    "1": "<new_parameter_name_n>"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "DAT_XXXX": {
                    "1": "unchanged"
                }
            }
        },
        "FUN_080073ec": {
            "entrypoint": "0x080073ec",
            "current_name": "initialize_registers_080073ec",
            "code": "\n\n\nvoid initialize_registers_080073ec(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073ec": "initialize_registers_080073ec"
            },
            "calling": [
                "FUN_08003658"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080073ec": {
                    "2": "configure_memory",
                    "9": "initialize_registers",
                    "4": "initialize_peripheral",
                    "1": "configure_hardware_registers",
                    "5": "initialize_memory"
                },
                "_DAT_40021000": {
                    "4": "control_register",
                    "1": "hardware_status_reg",
                    "2": "peripheral_register1",
                    "3": "register1"
                },
                "_DAT_40021004": {
                    "1": "hardware_config_reg",
                    "2": "control_register2",
                    "3": "register2"
                },
                "_DAT_40021008": {
                    "1": "hardware_control_reg",
                    "2": "register_3",
                    "3": "register3"
                },
                "_DAT_e000ed08": {
                    "1": "peripheral_register4",
                    "2": "register_4",
                    "3": "interrupt_control_register"
                }
            }
        },
        "FUN_08007438": {
            "entrypoint": "0x08007438",
            "current_name": "update_flags_08007438",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid update_flags_08007438(int *data_pointer)\n\n{\n  if (*data_pointer == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n    DAT_20000610 = data_pointer;\n  }\n  if (*data_pointer == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n    DAT_20000614 = data_pointer;\n  }\n  if (*data_pointer == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n    DAT_20000618 = data_pointer;\n  }\n  if (*data_pointer == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n    DAT_2000061c = data_pointer;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007438": "update_flags_08007438",
                "param_1": "data_pointer"
            },
            "calling": [
                "FUN_08006e68",
                "FUN_08007708"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007438": {
                    "1": "update_permissions",
                    "2": "update_data",
                    "3": "update_data_flags",
                    "6": "update_flags"
                },
                "param_1": {
                    "6": "data_pointer",
                    "1": "input_param",
                    "2": "memory_address",
                    "3": "param"
                },
                "_DAT_40021018": {
                    "1": "status_flags1",
                    "2": "flag_register1",
                    "6": "flag1",
                    "3": "flags1"
                },
                "DAT_20000610": {
                    "1": "value1",
                    "3": "flag1_ptr",
                    "2": "param1_ptr"
                },
                "DAT_20000614": {
                    "1": "data_two",
                    "3": "flag2_ptr",
                    "2": "data_pointer2"
                },
                "DAT_20000618": {
                    "1": "register5",
                    "2": "data_pointer3",
                    "3": "flag3_ptr"
                },
                "DAT_2000061c": {
                    "1": "register_4",
                    "3": "flag4_ptr",
                    "2": "data_pointer4"
                },
                "_DAT_4002101c": {
                    "1": "status_flag2",
                    "2": "data_flag2",
                    "3": "flags2",
                    "6": "flag2"
                },
                "*param_1": {
                    "1": "parameter_value",
                    "3": "value"
                },
                "newValue": {
                    "1": "value_to_update"
                },
                "param_2": {
                    "1": "new_data"
                },
                "param_3": {
                    "1": "new_data"
                },
                "PTR_40021018": {
                    "1": "flag_register1"
                },
                "PTR_4002101c": {
                    "1": "flag_register2"
                }
            }
        },
        "FUN_080074e0": {
            "entrypoint": "0x080074e0",
            "current_name": "update_memory_registers_080074e0",
            "code": "\n\n\nvoid update_memory_registers_080074e0(int *value)\n\n{\n  if (*value == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 & 0xfffff7ff;\n  }\n  if (*value == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffe;\n  }\n  if (*value == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffd;\n  }\n  if (*value == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080074e0": "update_memory_registers_080074e0",
                "param_1": "value"
            },
            "calling": [
                "FUN_08007710",
                "FUN_08007110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080074e0": {
                    "1": "update_memory_flag",
                    "2": "update_flags_based_on_value",
                    "3": "update_memory_registers"
                },
                "*param_1": {
                    "1": "flag_value"
                },
                "*param_1 == 0x40012c00": {
                    "1": "is_value_equal0x40012c00"
                },
                "*param_1 == 0x40000000": {
                    "1": "is_value_equal0x40000000"
                },
                "*param_1 == 0x40000400": {
                    "1": "is_value_equal0x40000400"
                },
                "*param_1 == 0x40000800": {
                    "1": "is_value_equal0x40000800"
                },
                "param_1": {
                    "1": "config_ptr",
                    "2": "memory_value",
                    "4": "memory_address"
                },
                "_DAT_40021018": {
                    "1": "flag_value_a",
                    "2": "flag_register1",
                    "5": "register_a"
                },
                "_DAT_4002101c": {
                    "1": "flags_reg2",
                    "2": "flag2",
                    "5": "register_b"
                },
                "param_1_old": {
                    "1": "register_value_old"
                },
                "0x40012c00": {
                    "1": "flag_1_mask"
                },
                "0x40000000": {
                    "1": "flag_2_mask"
                },
                "0x40000400": {
                    "1": "flag_3_mask"
                },
                "0x40000800": {
                    "1": "flag_4_mask"
                },
                "DAT_40021018": {
                    "1": "permissions"
                },
                "DAT_4002101c": {
                    "1": "updated_data_value2"
                }
            }
        },
        "FUN_08007544": {
            "entrypoint": "0x08007544",
            "current_name": "get_timer_ir_qn_08007544",
            "code": "\nundefined4 get_timer_ir_qn_08007544(uint timer_value)\n\n{\n  if (timer_value == 0xffffffff) {\n    result 0;\n  }\n  if (timer_value == 0x40000400) {\n    result 0x1d;\n  }\n  if (timer_value < 0x40000401) {\n    if (timer_value == 0x40000000) {\n      result 0x1c;\n    }\n  }\n  else {\n    if (timer_value == 0x40000800) {\n      result 0x1e;\n    }\n    if (timer_value == 0x40012c00) {\n      result 0x19;\n    }\n  }\n  print_error_message(\"TIM: Unknown timer IRQn\");\n  result 0;\n}\n\n",
            "renaming": {
                "FUN_08007544": "get_timer_ir_qn_08007544",
                "param_1": "timer_value",
                "iprintf": "print_error_message",
                "return": "result"
            },
            "calling": [
                "FUN_080076e0",
                "FUN_08007648"
            ],
            "called": [
                "FUN_080098d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007544": {
                    "2": "get_timer_irqn",
                    "1": "get_timer_status",
                    "4": "get_timer_irq_number",
                    "3": "check_timer_irq",
                    "15": "get_timer_ir_qn"
                },
                "param_1": {
                    "1": "timer_irq",
                    "10": "irq_number",
                    "2": "timer_irqn"
                },
                "iprintf": {
                    "1": "print_unknown_irq_message",
                    "7": "print_error_message",
                    "6": "print_unknown_timer_ir_qn",
                    "3": "print_unknown_irq"
                },
                "param_2": {
                    "1": "unused_param2"
                },
                "param_3": {
                    "1": "param3"
                },
                "param_4": {
                    "1": "unused_4"
                },
                "return": {
                    "1": "result"
                },
                "return value": {
                    "1": "irq_priority"
                }
            }
        },
        "FUN_08007594": {
            "entrypoint": "0x08007594",
            "current_name": "check_timer_instance_08007594",
            "code": "\nundefined4 check_timer_instance_08007594(uint timer_instance)\n\n{\n  if (timer_instance == 0xffffffff) {\n    return 0;\n  }\n  if (timer_instance == 0x40000400) {\n    return 1;\n  }\n  if (timer_instance < 0x40000401) {\n    if (timer_instance == 0x40000000) {\n      return 1;\n    }\n  }\n  else {\n    if (timer_instance == 0x40000800) {\n      return 1;\n    }\n    if (timer_instance == 0x40012c00) {\n      return 2;\n    }\n  }\n  print_error_message(\"TIM: Unknown timer instance\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007594": "check_timer_instance_08007594",
                "param_1": "timer_instance",
                "iprintf": "print_error_message"
            },
            "calling": [
                "FUN_080075dc"
            ],
            "called": [
                "FUN_080098d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007594": {
                    "1": "get_timer_type",
                    "16": "check_timer_instance",
                    "9": "get_timer_instance",
                    "2": "identify_timer_instance"
                },
                "param_1": {
                    "1": "timer",
                    "3": "timer_value",
                    "25": "timer_instance"
                },
                "iprintf": {
                    "19": "print_error_message",
                    "4": "print_unknown_timer_instance",
                    "1": "print_warning"
                },
                "<new_variable_name_1>": {
                    "1": "<original_variable_name_1>"
                },
                "<new_variable_name_2>": {
                    "1": "<original_variable_name_2>"
                },
                "<no_change>": {
                    "1": "<no_change>"
                }
            }
        },
        "FUN_080075dc": {
            "entrypoint": "0x080075dc",
            "current_name": "get_timer_clock_frequency_080075dc",
            "code": "\nint get_timer_clock_frequency_080075dc(undefined4 timer_id)\n\n{\n  uint pclk1_freq;\n  int clock_source;\n  uint pclk2_freq;\n  undefined4 clock_config1;\n  undefined4 clock_config2;\n  undefined4 clock_config3;\n  undefined4 clock_config4;\n  uint pclk1_freq;\n  uint pclk2_freq;\n  \n  clock_config2 = 0;\n  clock_config3 = 0;\n  clock_config4 = 0;\n  pclk1_freq = 0;\n  pclk2_freq = 0;\n  clock_config1 = 0;\n  HAL_RCC_GetClockConfig(&clock_config2,&clock_config1);\n  clock_source = getTimerClkSrc(timer_id);\n  pclk1_freq = pclk2_freq;\n  pclk2_freq = pclk1_freq;\n  if (clock_source == 1) {\n    clock_source = HAL_RCC_GetPCLK1Freq();\n  }\n  else if (clock_source == 2) {\n    clock_source = HAL_RCC_GetPCLK2Freq();\n    pclk2_freq = pclk1_freq;\n  }\n  else {\n    iprintf(\"TIM: Unknown clock source\");\n    clock_source = 0;\n    pclk2_freq = 0;\n  }\n  if (pclk2_freq != 0x500) {\n    if (pclk2_freq < 0x501) {\n      if (pclk2_freq != 0x400) {\n        return clock_source;\n      }\n    }\n    else if ((pclk2_freq != 0x600) && (pclk2_freq != 0x700)) {\n      return clock_source;\n    }\n  }\n  return clock_source << 1;\n}\n\n",
            "renaming": {
                "FUN_080075dc": "get_timer_clock_frequency_080075dc",
                "param_1": "timer_id",
                "uVar1": "pclk1_freq",
                "iVar2": "clock_source",
                "uVar3": "pclk2_freq",
                "local_20": "clock_config1",
                "local_1c": "clock_config2",
                "local_18": "clock_config3",
                "local_14": "clock_config4",
                "local_10": "pclk1_freq",
                "local_c": "pclk2_freq"
            },
            "calling": [
                "FUN_08007648",
                "FUN_08007118"
            ],
            "called": [
                "FUN_08005a68",
                "FUN_08005a48",
                "FUN_08007594",
                "FUN_08005a28",
                "FUN_080098d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080075dc": {
                    "1": "calculate_timer_clk",
                    "5": "calculate_timer_frequency",
                    "3": "calculate_timer_clock",
                    "2": "calculate_timer_freq",
                    "6": "get_timer_clock_source",
                    "8": "get_timer_clock_frequency"
                },
                "param_1": {
                    "7": "timer_index",
                    "1": "source_type",
                    "3": "timer_number",
                    "6": "timer",
                    "2": "param"
                },
                "uVar1": {
                    "2": "temp1",
                    "1": "pclk1freq",
                    "4": "pclk1_freq"
                },
                "iVar2": {
                    "1": "clk_src",
                    "4": "frequency",
                    "2": "timer_freq",
                    "6": "clock_source",
                    "3": "timer_clock_frequency",
                    "5": "timer_clk_src"
                },
                "uVar3": {
                    "1": "source2",
                    "2": "pclk2_frequency",
                    "4": "pclk2_freq"
                },
                "local_20": {
                    "4": "clock_config",
                    "7": "clock_config1",
                    "1": "clock_config_value",
                    "2": "pclk_config"
                },
                "local_1c": {
                    "1": "pclk1freq",
                    "7": "clock_config2",
                    "4": "clock_config1",
                    "2": "pclk1_freq"
                },
                "local_18": {
                    "1": "pclk2freq",
                    "2": "unused",
                    "7": "clock_config3"
                },
                "local_14": {
                    "7": "clock_config4",
                    "3": "unknown_clock_source",
                    "1": "unused_var2",
                    "2": "unused"
                },
                "local_10": {
                    "2": "unused",
                    "1": "temp3",
                    "6": "pclk1_freq"
                },
                "local_c": {
                    "1": "temp4",
                    "2": "unused",
                    "6": "pclk2_freq"
                }
            }
        },
        "FUN_08007648": {
            "entrypoint": "0x08007648",
            "current_name": "initialize_timer_08007648",
            "code": "\nvoid initialize_timer_08007648(undefined4 *timer_config,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  char irq;\n  uint timer_clk_freq;\n  int init_status;\n  undefined4 *timer_handle;\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined4 local_var3;\n  undefined4 local_var4;\n  undefined4 local_var5;\n  undefined4 local_var6;\n  undefined4 local_var7;\n  \n  local_var1 = 0;\n  local_var2 = 0;\n  local_var3 = 0;\n  local_var4 = 0;\n  local_var5 = 0;\n  local_var6 = 0;\n  local_var7 = 0;\n  timer_handle = timer_config + 1;\n  *timer_config = 0x40000000;\n  timer_config[1] = 0x40000000;\n  timer_config[4] = param2;\n  timer_clk_freq = get_clock_frequency();\n  timer_config[2] = timer_clk_freq / 1000000 - 1;\n  timer_config[5] = 0;\n  timer_config[3] = 0;\n  timer_config[6] = 0;\n  timer_config[0x13] = param4;\n  local_var1 = 0;\n  local_var3 = 0;\n  local_var5 = 0;\n  local_var4 = 0;\n  local_var6 = 0;\n  local_var7 = 0;\n  local_var2 = param3;\n  irq = get_irq(*timer_config);\n  set_interrupt_priority((int)irq,0xe,0);\n  irq = get_irq(*timer_config);\n  enable_interrupt((int)irq);\n  init_status = initialize_output_compare(timer_handle);\n  if ((init_status == 0) && (init_status = configure_output_compare_channel(timer_handle,&local_var1,0), init_status == 0)) {\n    start_output_compare_interrupt(timer_handle,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007648": "initialize_timer_08007648",
                "param_1": "timer_config",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "cVar1": "irq",
                "uVar2": "timer_clk_freq",
                "iVar3": "init_status",
                "puVar4": "timer_handle",
                "local_34": "local_var1",
                "local_30": "local_var2",
                "local_2c": "local_var3",
                "local_28": "local_var4",
                "local_24": "local_var5",
                "local_20": "local_var6",
                "local_1c": "local_var7",
                "getTimerClkFreq": "get_clock_frequency",
                "getTimerIrq": "get_irq",
                "HAL_NVIC_SetPriority": "set_interrupt_priority",
                "HAL_NVIC_EnableIRQ": "enable_interrupt",
                "HAL_TIM_OC_Init": "initialize_output_compare",
                "HAL_TIM_OC_ConfigChannel": "configure_output_compare_channel",
                "HAL_TIM_OC_Start_IT": "start_output_compare_interrupt"
            },
            "calling": [
                "FUN_0800242c"
            ],
            "called": [
                "FUN_08003f94",
                "FUN_08006280",
                "FUN_08006128",
                "FUN_08007544",
                "FUN_08006060",
                "FUN_080075dc",
                "FUN_08003f30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007648": {
                    "30": "initialize_timer",
                    "1": "initialize_timer_settings"
                },
                "param_1": {
                    "1": "timer_data",
                    "8": "timer_params",
                    "10": "timer_config",
                    "3": "timer_settings",
                    "2": "timer_registers"
                },
                "param_2": {
                    "23": "param2",
                    "1": "param",
                    "2": "config_value"
                },
                "param_3": {
                    "1": "value2",
                    "20": "param3",
                    "6": "irq_priority"
                },
                "param_4": {
                    "20": "param4",
                    "1": "timer_irq",
                    "4": "irq_handler",
                    "3": "irq_priority"
                },
                "cVar1": {
                    "1": "irq_status",
                    "4": "irq_type",
                    "9": "irq",
                    "5": "timer_irq",
                    "2": "irq_timer"
                },
                "uVar2": {
                    "17": "timer_clk_freq",
                    "1": "timer_frequency",
                    "4": "clk_freq",
                    "8": "timer_freq"
                },
                "iVar3": {
                    "1": "error_code",
                    "14": "init_status",
                    "10": "init_result",
                    "4": "result"
                },
                "puVar4": {
                    "2": "param1_plus1",
                    "1": "tim_handle",
                    "8": "timer_handle",
                    "4": "next_param"
                },
                "local_34": {
                    "1": "channel_configuration",
                    "2": "channel",
                    "3": "value1",
                    "5": "local_var1"
                },
                "local_30": {
                    "5": "local_var2",
                    "1": "local30",
                    "2": "param3_copy",
                    "3": "value2"
                },
                "local_2c": {
                    "1": "unused_value1",
                    "2": "unused",
                    "3": "value3",
                    "5": "local_var3"
                },
                "local_28": {
                    "1": "irq",
                    "5": "local_var4",
                    "2": "unused",
                    "3": "value4"
                },
                "local_24": {
                    "1": "compare_value5",
                    "2": "unused",
                    "3": "value5",
                    "5": "local_var5"
                },
                "local_20": {
                    "1": "unused4",
                    "2": "unused",
                    "3": "value6",
                    "5": "local_var6"
                },
                "local_1c": {
                    "1": "channel",
                    "5": "local_var7",
                    "2": "unused",
                    "3": "value7"
                },
                "getTimerClkFreq": {
                    "1": "get_clock_frequency"
                },
                "getTimerIrq": {
                    "1": "get_timer_interrupt"
                },
                "HAL_NVIC_SetPriority": {
                    "1": "set_timer_interrupt_priority"
                },
                "HAL_NVIC_EnableIRQ": {
                    "1": "enable_interrupt"
                },
                "HAL_TIM_OC_Init": {
                    "1": "initialize_output_compare"
                },
                "HAL_TIM_OC_ConfigChannel": {
                    "1": "configure_output_compare_channel"
                },
                "HAL_TIM_OC_Start_IT": {
                    "1": "start_output_compare_interrupt"
                },
                "FUN_08003f94": {
                    "1": "function1"
                },
                "FUN_08006280": {
                    "1": "function2"
                },
                "FUN_08006128": {
                    "1": "function3"
                },
                "FUN_08007544": {
                    "1": "function4"
                },
                "FUN_08006060": {
                    "1": "function5"
                },
                "FUN_080075dc": {
                    "1": "function6"
                },
                "FUN_08003f30": {
                    "1": "function7"
                }
            }
        },
        "FUN_080076e0": {
            "entrypoint": "0x080076e0",
            "current_name": "disable_timer_irq_080076e0",
            "code": "\nvoid disable_timer_irq_080076e0(undefined4 *timer_params)\n\n{\n  char timer_irq;\n  int de_init_result;\n  \n  timer_params[0x13] = 0;\n  timer_irq = getTimerIrq(*timer_params);\n  HAL_NVIC_DisableIRQ((int)timer_irq);\n  de_init_result = HAL_TIM_OC_DeInit(timer_params + 1);\n  if (de_init_result == 0) {\n    HAL_TIM_OC_Stop_IT(timer_params + 1,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080076e0": "disable_timer_irq_080076e0",
                "param_1": "timer_params",
                "cVar1": "timer_irq",
                "iVar2": "de_init_result"
            },
            "calling": [
                "FUN_08002578"
            ],
            "called": [
                "FUN_08003fb0",
                "FUN_08007544",
                "FUN_08005df4",
                "FUN_080062f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080076e0": {
                    "20": "disable_timer_irq",
                    "8": "disable_timer_interrupt",
                    "2": "disable_and_stop_timer",
                    "1": "disable_timer_irq_and_stop_oc"
                },
                "param_1": {
                    "15": "timer_params",
                    "1": "timer_registers",
                    "3": "timer_config",
                    "2": "timer_data"
                },
                "cVar1": {
                    "1": "irq_timer",
                    "2": "irq_number",
                    "3": "irq",
                    "16": "timer_irq"
                },
                "iVar2": {
                    "1": "de_init_ret_val",
                    "2": "timer_status",
                    "4": "result",
                    "11": "de_init_result",
                    "6": "de_init_status"
                },
                "*param_1": {
                    "1": "timer_params"
                }
            }
        },
        "FUN_08007708": {
            "entrypoint": "0x08007708",
            "current_name": "enable_timer_clock_08007708",
            "code": "\nvoid enable_timer_clock_08007708(void)\n\n{\n  enable_timer_clock_08007708;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007708": "enable_timer_clock_08007708",
                "timer_enable_clock()": "enable_timer_clock",
                "timer_enable_clock": "enable_timer_clock"
            },
            "calling": [
                "FUN_08006060"
            ],
            "called": [
                "FUN_08007438"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007708": {
                    "16": "enable_timer_clock",
                    "14": "initialize_timer",
                    "1": "enable_clock"
                },
                "param_1": {
                    "4": "data_ptr",
                    "2": "parameter",
                    "1": "timer_data"
                },
                "FUN_08007438": {
                    "3": "update_parameter",
                    "11": "process_data",
                    "1": "process_parameter_1"
                },
                "timer_enable_clock()": {
                    "1": "enable_timer_clock"
                },
                "*param_1": {
                    "1": "timer_state"
                },
                "timer_enable_clock": {
                    "2": "enable_timer_clock"
                }
            }
        },
        "FUN_08007710": {
            "entrypoint": "0x08007710",
            "current_name": "disable_timer_clock_08007710",
            "code": "\nvoid disable_timer_clock_08007710(void)\n\n{\n  disable_timer_clock_08007710();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007710": "disable_timer_clock_08007710",
                "timer_disable_clock": "disable_timer_clock"
            },
            "calling": [
                "FUN_08005df4"
            ],
            "called": [
                "FUN_080074e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007710": {
                    "23": "disable_timer_clock",
                    "3": "disable_clock",
                    "5": "disable_timer"
                },
                "FUN_080074e0": {
                    "6": "process_data",
                    "1": "process_int_param",
                    "3": "update_parameter",
                    "2": "update_parameters"
                },
                "param_1": {
                    "1": "param",
                    "2": "data_array"
                },
                "timer_disable_clock": {
                    "1": "disable_timer_clock"
                }
            }
        },
        "FUN_08007718": {
            "entrypoint": "0x08007718",
            "current_name": "subtract_four_08007718",
            "code": "\nint subtract_four_08007718(int result)\n\n{\n  result result + -4;\n}\n\n",
            "renaming": {
                "FUN_08007718": "subtract_four_08007718",
                "param_1": "result",
                "return": "result"
            },
            "calling": [
                "FUN_0800771c",
                "FUN_08007736"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007718": {
                    "27": "subtract_four",
                    "2": "decrement_by_four",
                    "1": "subtract4"
                },
                "param_1": {
                    "7": "input",
                    "1": "input_val",
                    "4": "input_value",
                    "6": "num",
                    "9": "result"
                },
                "param_2": {
                    "1": "new_parameter_name_2",
                    "2": "output"
                },
                "return": {
                    "2": "result"
                }
            }
        },
        "FUN_0800771c": {
            "entrypoint": "0x0800771c",
            "current_name": "execute_timer_function_0800771c",
            "code": "\nvoid execute_timer_function_0800771c(int timer_index)\n\n{\n  int timer_obj;\n  \n  timer_obj = get_timer_object();\n  if ((*(function_pointer **)(timer_obj + 0x4c) != (function_pointer *)0x0) && (*(char *)(timer_index + 0x1c) == '\\x01')) {\n    (**(function_pointer **)(timer_obj + 0x4c))(timer_obj,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800771c": "execute_timer_function_0800771c",
                "param_1": "timer_index",
                "iVar1": "timer_obj",
                "get_timer_obj": "get_timer_object",
                "code": "function_pointer"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [
                "FUN_08007718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800771c": {
                    "1": "execute_function_if_condition_true",
                    "4": "execute_timer_callback",
                    "10": "execute_timer_action",
                    "11": "execute_timer_function",
                    "2": "execute_timer"
                },
                "param_1": {
                    "6": "timer_obj",
                    "1": "timer",
                    "7": "timer_index"
                },
                "iVar1": {
                    "3": "timer_id",
                    "1": "timer_object",
                    "4": "timer_handle",
                    "17": "timer_obj"
                },
                "get_timer_obj": {
                    "1": "get_current_timer_obj",
                    "3": "retrieve_timer_object",
                    "6": "get_timer_object"
                },
                "FUN_08007718": {
                    "1": "get_timer_status",
                    "2": "check_condition",
                    "6": "get_timer_obj"
                },
                "DAT_08007754": {
                    "1": "timer_function"
                },
                "PTR_DAT_08007780": {
                    "1": "timer_function_pointer"
                },
                "FUR_08007718": {
                    "1": "get_timer_obj"
                },
                "code": {
                    "1": "timer_action",
                    "3": "function_pointer"
                },
                "param_1 + 0x1c": {
                    "2": "timer_flag",
                    "1": "timer_object_flag"
                },
                "(char *)(param_1 + 0x1c)": {
                    "1": "timer_object_flag_char"
                },
                "*(code **)(iVar1 + 0x4c)": {
                    "1": "callback_function"
                },
                "(code *)0x0": {
                    "1": "null"
                },
                "*(char *)(param_1 + 0x1c)": {
                    "1": "timer_flag"
                },
                "(code **)(iVar1 + 0x4c)": {
                    "1": "timer_action_func_ptr"
                },
                "(char *)(timer_obj_flag)": {
                    "1": "flag_value"
                },
                "(*(code **)(iVar1 + 0x4c)": {
                    "1": "timer_callback"
                },
                "(*(char *)(param_1 + 0x1c)": {
                    "1": "condition_variable"
                }
            }
        },
        "FUN_08007736": {
            "entrypoint": "0x08007736",
            "current_name": "execute_timer_function_08007736",
            "code": "\nvoid execute_timer_function_08007736(void)\n\n{\n  int timer_obj;\n  \n  timer_obj = get_timer_object();\n  if (*(code **)(timer_obj + 0x48) != (code *)0x0) {\n    (**(code **)(timer_obj + 0x48))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007736": "execute_timer_function_08007736",
                "iVar1": "timer_obj",
                "get_timer_obj": "get_timer_object"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [
                "FUN_08007718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007736": {
                    "1": "execute_callback_if_available",
                    "9": "execute_timer_callback",
                    "2": "execute_timer_action",
                    "18": "execute_timer_function"
                },
                "iVar1": {
                    "1": "timer_object_pointer",
                    "6": "timer_object",
                    "20": "timer_obj"
                },
                "get_timer_obj": {
                    "1": "obtain_timer_object",
                    "2": "get_timer_object"
                },
                "(code **)": {
                    "1": "function_pointer"
                },
                "(code *)": {
                    "1": "callback_function"
                },
                "FUN_08007718": {
                    "1": "calculate_result",
                    "2": "get_timer_value",
                    "9": "get_timer_obj",
                    "5": "get_timer_object"
                },
                "param_1": {
                    "4": "timer_id",
                    "1": "obj_index",
                    "3": "input_param",
                    "5": "timer_obj"
                },
                "0x48": {
                    "1": "function_ptr_address"
                },
                "iVar2": {
                    "1": "timer_fn"
                },
                "*(code **)(iVar1 + 0x48)": {
                    "1": "timer_function"
                }
            }
        },
        "FUN_08007744": {
            "entrypoint": "0x08007744",
            "current_name": "get_value_from_offset_08007744",
            "code": "\nundefined4 get_value_from_offset_08007744(int offset)\n\n{\n  value *(undefined4 *)(*(int *)(offset + 4) + 0x24);\n}\n\n",
            "renaming": {
                "FUN_08007744": "get_value_from_offset_08007744",
                "param_1": "offset",
                "return": "value"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007744": {
                    "7": "get_value_from_offset",
                    "1": "get_memory_address",
                    "4": "get_inner_value"
                },
                "param_1": {
                    "3": "input_value",
                    "1": "input_pointer",
                    "2": "input",
                    "6": "offset"
                },
                "PTR_XXXX": {
                    "1": "xxxx_ptr"
                },
                "DAT_XXXX": {
                    "1": "xxxx"
                },
                "param_1 + 4": {
                    "1": "address_param_plus_four",
                    "2": "ptr_offset"
                },
                "*(int *)(param_1 + 4)": {
                    "1": "value_pointer"
                },
                "0x24": {
                    "1": "offset"
                },
                "*(undefined4 *)(*(int *)(param_1 + 4) + 0x24)": {
                    "3": "value",
                    "1": "get_value(offset)",
                    "5": "offset_value",
                    "2": "result"
                },
                "new_variable_name_1": {
                    "1": "base_address"
                },
                "PTR_param_1": {
                    "1": "ptr_input_offset"
                },
                "*(undefined4 *)": {
                    "1": "pointer"
                },
                "*(int *)": {
                    "1": "address"
                },
                "return": {
                    "1": "value"
                },
                "DAT_YYYY": {
                    "1": "yyyy_data"
                },
                "param_2": {
                    "1": "new_param_name"
                },
                "PTR_XXX": {
                    "1": "ptr_variable"
                },
                "DAT_YYY": {
                    "1": "data_variable"
                },
                "ptr_address + 0x24": {
                    "1": "value_address"
                },
                "PTR_1": {
                    "1": "ptr1"
                },
                "<unnamed_variable_1>": {
                    "1": "address_offset"
                },
                "<unnamed_variable_2>": {
                    "1": "relative_address"
                },
                "<unnamed_variable_3>": {
                    "1": "offset_value"
                },
                "": {
                    "1": "value_address"
                },
                "*PTR_1": {
                    "1": "offset"
                },
                "*PTR_2": {
                    "1": "result"
                },
                "new_variable_name_2": {
                    "1": "xxxx"
                },
                "param_1+4": {
                    "1": "address_pointer"
                },
                "<new_variable_name>": {
                    "1": "value_pointer"
                }
            }
        },
        "FUN_0800774a": {
            "entrypoint": "0x0800774a",
            "current_name": "set_param_value_0800774a",
            "code": "\nvoid set_param_value_0800774a(int object_address,undefined4 new_value)\n\n{\n  *(undefined4 *)(*(int *)(object_address + 4) + 0x24) = new_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800774a": "set_param_value_0800774a",
                "param_1": "object_address",
                "param_2": "new_value"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800774a": {
                    "5": "set_parameter_value",
                    "1": "update_data_in_struct",
                    "3": "update_parameter",
                    "6": "update_parameter_value",
                    "8": "set_param_value",
                    "2": "update_data"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "data_struct_ptr",
                    "9": "object_address"
                },
                "param_2": {
                    "1": "parameter_value",
                    "24": "new_value",
                    "3": "value"
                },
                "*(int *)(param_1 + 4)": {
                    "1": "address_pointer"
                },
                "*(undefined4 *)(addressPointer + 0x24)": {
                    "1": "value_to_update"
                }
            }
        },
        "FUN_08007750": {
            "entrypoint": "0x08007750",
            "current_name": "store_value_at_offset_08007750",
            "code": "\nvoid store_value_at_offset_08007750(int base_address,int index,undefined4 value)\n\n{\n  *(undefined4 *)(*(int *)(base_address + 4) + 0x34 + index * 4) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007750": "store_value_at_offset_08007750",
                "param_1": "base_address",
                "param_2": "index",
                "param_3": "value"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007750": {
                    "1": "set_data_at_index",
                    "3": "set_param_value",
                    "2": "store_param_value",
                    "4": "store_value_at_offset"
                },
                "param_1": {
                    "1": "array_address",
                    "4": "object_address",
                    "11": "base_address",
                    "2": "array_base_address"
                },
                "param_2": {
                    "1": "element_index",
                    "6": "offset",
                    "2": "array_index",
                    "22": "index"
                },
                "param_3": {
                    "1": "new_data",
                    "5": "new_value",
                    "22": "value",
                    "2": "value_to_store"
                },
                "param_1 + 4": {
                    "1": "pointer_address"
                },
                "*(int *)(param_1 + 4) + 0x34": {
                    "1": "target_address"
                },
                "*(undefined4 *)(*(int *)(param_1 + 4) + 0x34 + param_2 * 4)": {
                    "1": "array_element_address"
                },
                "0x34": {
                    "1": "offset"
                },
                "4": {
                    "1": "size_of_element"
                },
                "DAT_": {
                    "1": "data_"
                },
                "PTR_": {
                    "1": "pointer_"
                },
                "*(int *)(param_1 + 4) + 0x34 + param_2 * 4": {
                    "1": "target_address"
                }
            }
        },
        "FUN_080077b0": {
            "entrypoint": "0x080077b0",
            "current_name": "initialize_i2_c_080077b0",
            "code": "\n\n\nvoid initialize_i2_c_080077b0(int *config,int param2,int param3,int param4,undefined param5)\n\n{\n  int peripheral1;\n  int peripheral2;\n  undefined4 gpio_port;\n  uint function1;\n  uint function2;\n  int *i2c_handle;\n  uint gpio_pin_mask1;\n  uint pin_mask2;\n  uint gpio_speed;\n  undefined4 gpio_pull;\n  \n  if (config != (int *)0x0) {\n    i2c_handle = config + 1;\n    peripheral1 = get_i2_c_peripheral((int)*(char *)(config + 0x16),&DAT_0800a69c);\n    peripheral2 = get_i2_c_peripheral((int)*(char *)((int)config + 0x59),&DAT_0800a66c);\n    if ((peripheral1 == 0) || (peripheral2 == 0)) {\n      print_error_msg(\"ERROR: at least one I2C pin has no peripheral\\n\");\n    }\n    else {\n      peripheral1 = merge_i2_c_peripheral(peripheral1,peripheral2);\n      *config = peripheral1;\n      if (peripheral1 == 0) {\n        print_error_msg(\"ERROR: I2C pins mismatch\\n\");\n      }\n      else {\n        if (peripheral1 == 0x40005400) {\n          _DAT_4002101c = _DAT_4002101c | 0x200000;\n          _DAT_40021010 = _DAT_40021010 & 0xffdfffff;\n          *(undefined *)((int)config + 0x5a) = 0x1f;\n          *(undefined *)((int)config + 0x5b) = 0x20;\n          DAT_20000668 = i2c_handle;\n        }\n        if (*config == 0x40005800) {\n          _DAT_4002101c = _DAT_4002101c | 0x400000;\n          _DAT_40021010 = _DAT_40021010 & 0xffbfffff;\n          *(undefined *)((int)config + 0x5a) = 0x21;\n          *(undefined *)((int)config + 0x5b) = 0x22;\n          DAT_2000066c = i2c_handle;\n        }\n        gpio_port = set_gpio_port_clock((uint)((int)*(char *)((int)config + 0x59) << 0x18) >> 0x1c);\n        gpio_pin_mask1 = 1 << ((int)*(char *)((int)config + 0x59) & 0xfU) & 0xffff;\n        function1 = get_pinmap_function((int)*(char *)((int)config + 0x59),&DAT_0800a66c);\n        function2 = get_pinmap_function((int)*(char *)((int)config + 0x59),&DAT_0800a66c);\n        pin_mask2 = (function1 >> 3 & 1) << 4 | function2 & 7;\n        gpio_pull = 3;\n        peripheral1 = get_pinmap_function((int)*(char *)((int)config + 0x59),&DAT_0800a66c);\n        gpio_speed = (uint)(peripheral1 << 0x1a) >> 0x1e;\n        peripheral1 = get_pinmap_function((int)*(char *)((int)config + 0x59),&DAT_0800a66c);\n        _DAT_40021018 = _DAT_40021018 | 1;\n        function2 = 1;\n        function1 = _DAT_40021018;\n        switch((uint)(peripheral1 << 0x11) >> 0x19) {\n        case 1:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 | 0x7000001;\n          _DAT_40010004 = function2;\n          break;\n        case 2:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          _DAT_40010004 = function2;\n          break;\n        case 3:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 | 0x7000002;\n          _DAT_40010004 = function2;\n          break;\n        case 4:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          _DAT_40010004 = function2;\n          break;\n        case 5:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 | 0x7000004;\n          _DAT_40010004 = function2;\n          break;\n        case 6:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          _DAT_40010004 = function2;\n          break;\n        case 7:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 | 0x7000008;\n          _DAT_40010004 = function2;\n          break;\n        case 8:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          _DAT_40010004 = function2;\n          break;\n        case 9:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 | 0x7000030;\n          _DAT_40010004 = function2;\n          break;\n        case 10:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          _DAT_40010004 = function2;\n          break;\n        case 0xb:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          _DAT_40010004 = function2;\n          break;\n        case 0xc:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 | 0x70000c0;\n          _DAT_40010004 = function2;\n          break;\n        case 0xd:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          _DAT_40010004 = function2;\n          break;\n        case 0xe:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          _DAT_40010004 = function2;\n          break;\n        case 0xf:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 | 0x7000300;\n          _DAT_40010004 = function2;\n          break;\n        case 0x10:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          _DAT_40010004 = function2;\n          break;\n        case 0x11:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          _DAT_40010004 = function2;\n          break;\n        case 0x12:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          _DAT_40010004 = function2;\n          break;\n        case 0x13:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 | 0x7000c00;\n          _DAT_40010004 = function2;\n          break;\n        case 0x14:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          _DAT_40010004 = function2;\n          break;\n        case 0x15:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          _DAT_40010004 = function2;\n          break;\n        case 0x16:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 | 0x7001000;\n          _DAT_40010004 = function2;\n          break;\n        case 0x17:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          _DAT_40010004 = function2;\n          break;\n        case 0x1b:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 | 0x7008000;\n          _DAT_40010004 = function2;\n          break;\n        case 0x1c:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          _DAT_40010004 = function2;\n          break;\n        case 0x21:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xf8ffffff;\n          _DAT_40010004 = function2;\n          break;\n        case 0x22:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          _DAT_40010004 = function2;\n          break;\n        case 0x23:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          _DAT_40010004 = function2;\n          break;\n        case 0x24:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n          _DAT_40010004 = function2;\n        }\n        initialize_gpio(gpio_port,&gpio_pin_mask1,function1,function2);\n        gpio_port = set_gpio_port_clock((uint)((int)*(char *)(config + 0x16) << 0x18) >> 0x1c);\n        gpio_pin_mask1 = 1 << ((int)*(char *)(config + 0x16) & 0xfU) & 0xffff;\n        function1 = get_pinmap_function((int)*(char *)(config + 0x16),&DAT_0800a69c);\n        function2 = get_pinmap_function((int)*(char *)(config + 0x16),&DAT_0800a69c);\n        pin_mask2 = (function1 >> 3 & 1) << 4 | function2 & 7;\n        gpio_pull = 3;\n        peripheral1 = get_pinmap_function((int)*(char *)(config + 0x16),&DAT_0800a69c);\n        gpio_speed = (uint)(peripheral1 << 0x1a) >> 0x1e;\n        peripheral1 = get_pinmap_function((int)*(char *)(config + 0x16),&DAT_0800a69c);\n        _DAT_40021018 = _DAT_40021018 | 1;\n        function2 = 1;\n        function1 = _DAT_40021018;\n        switch((uint)(peripheral1 << 0x11) >> 0x19) {\n        case 1:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 | 0x7000001;\n          _DAT_40010004 = function2;\n          break;\n        case 2:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          _DAT_40010004 = function2;\n          break;\n        case 3:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 | 0x7000002;\n          _DAT_40010004 = function2;\n          break;\n        case 4:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          _DAT_40010004 = function2;\n          break;\n        case 5:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 | 0x7000004;\n          _DAT_40010004 = function2;\n          break;\n        case 6:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          _DAT_40010004 = function2;\n          break;\n        case 7:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 | 0x7000008;\n          _DAT_40010004 = function2;\n          break;\n        case 8:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          _DAT_40010004 = function2;\n          break;\n        case 9:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 | 0x7000030;\n          _DAT_40010004 = function2;\n          break;\n        case 10:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          _DAT_40010004 = function2;\n          break;\n        case 0xb:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          _DAT_40010004 = function2;\n          break;\n        case 0xc:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 | 0x70000c0;\n          _DAT_40010004 = function2;\n          break;\n        case 0xd:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          _DAT_40010004 = function2;\n          break;\n        case 0xe:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          _DAT_40010004 = function2;\n          break;\n        case 0xf:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 | 0x7000300;\n          _DAT_40010004 = function2;\n          break;\n        case 0x10:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          _DAT_40010004 = function2;\n          break;\n        case 0x11:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          _DAT_40010004 = function2;\n          break;\n        case 0x12:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          _DAT_40010004 = function2;\n          break;\n        case 0x13:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 | 0x7000c00;\n          _DAT_40010004 = function2;\n          break;\n        case 0x14:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          _DAT_40010004 = function2;\n          break;\n        case 0x15:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          _DAT_40010004 = function2;\n          break;\n        case 0x16:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 | 0x7001000;\n          _DAT_40010004 = function2;\n          break;\n        case 0x17:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          _DAT_40010004 = function2;\n          break;\n        case 0x1b:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 | 0x7008000;\n          _DAT_40010004 = function2;\n          break;\n        case 0x1c:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          _DAT_40010004 = function2;\n          break;\n        case 0x21:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xf8ffffff;\n          _DAT_40010004 = function2;\n          break;\n        case 0x22:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          _DAT_40010004 = function2;\n          break;\n        case 0x23:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          _DAT_40010004 = function2;\n          break;\n        case 0x24:\n          function1 = 0x40010000;\n          function2 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n          _DAT_40010004 = function2;\n        }\n        initialize_gpio(gpio_port,&gpio_pin_mask1,function1,function2);\n        i2c_config[1] = *config;\n        i2c_config[2] = param2;\n        i2c_config[3] = 0;\n        i2c_config[4] = param4;\n        i2c_config[7] = 0xff;\n        i2c_config[5] = param3;\n        i2c_config[6] = 0;\n        i2c_config[8] = 0;\n        i2c_config[9] = 0;\n        *(undefined *)((int)config + 0x41) = 0;\n        set_nvic_priority((int)*(char *)((int)config + 0x5a),0,1);\n        enable_nvic_irq((int)*(char *)((int)config + 0x5a));\n        set_nvic_priority((int)*(char *)((int)config + 0x5b),0,1);\n        enable_nvic_irq((int)*(char *)((int)config + 0x5b));\n        initialize_i2_c_080077b0(i2c_handle);\n        *(undefined *)((int)config + 0x5d) = param5;\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080077b0": "initialize_i2_c_080077b0",
                "param_1": "config",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "iVar1": "peripheral1",
                "iVar2": "peripheral2",
                "uVar3": "gpio_port",
                "uVar4": "function1",
                "uVar5": "function2",
                "piVar6": "i2c_handle",
                "local_38": "gpio_pin_mask1",
                "local_34": "pin_mask2",
                "local_30": "gpio_speed",
                "local_2c": "gpio_pull",
                "HAL_GPIO_Init": "initialize_gpio",
                "HAL_NVIC_SetPriority": "set_nvic_priority",
                "HAL_NVIC_EnableIRQ": "enable_nvic_irq",
                "HAL_I2C_Init": "initialize_i2_c",
                "iprintf": "print_error_msg",
                "pinmap_peripheral": "get_i2_c_peripheral",
                "pinmap_merge_peripheral": "merge_i2_c_peripheral",
                "pinmap_function": "get_pinmap_function",
                "set_GPIO_Port_Clock": "set_gpio_port_clock",
                "param_1[1]": "i2c_config[1]",
                "param_1[2]": "i2c_config[2]",
                "param_1[3]": "i2c_config[3]",
                "param_1[4]": "i2c_config[4]",
                "param_1[5]": "i2c_config[5]",
                "param_1[6]": "i2c_config[6]",
                "param_1[7]": "i2c_config[7]",
                "param_1[8]": "i2c_config[8]",
                "param_1[9]": "i2c_config[9]"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "FUN_08003f94",
                "FUN_08007376",
                "FUN_08006bb8",
                "FUN_080098d8",
                "FUN_080073ae",
                "FUN_080045c0",
                "FUN_080040e8",
                "FUN_08003f30",
                "FUN_08007320"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080077b0": {
                    "4": "initialize_i2_c_peripheral",
                    "1": "configure_i2_c_peripheral",
                    "2": "initialize_i2_c_pins",
                    "3": "configure_i2_c",
                    "14": "initialize_i2_c"
                },
                "param_1": {
                    "1": "i2c_device",
                    "12": "config",
                    "2": "i2c_pins",
                    "8": "i2c_config"
                },
                "param_2": {
                    "3": "param_2",
                    "10": "param2",
                    "2": "parameter2",
                    "1": "clock_speed"
                },
                "param_3": {
                    "1": "duty_cycle",
                    "2": "mode",
                    "10": "param3",
                    "3": "clock_speed"
                },
                "param_4": {
                    "2": "data3",
                    "10": "param4",
                    "4": "own_address",
                    "1": "clock_speed",
                    "3": "param_4"
                },
                "param_5": {
                    "1": "peripheral_priority",
                    "2": "interrupt_priority",
                    "10": "param5",
                    "4": "param_5"
                },
                "iVar1": {
                    "4": "pin1_peripheral",
                    "1": "result",
                    "18": "peripheral1",
                    "2": "pin1"
                },
                "iVar2": {
                    "1": "result2",
                    "18": "peripheral2",
                    "2": "pinmap_result2",
                    "4": "pin2_peripheral"
                },
                "uVar3": {
                    "1": "gpio_port_c",
                    "4": "gpio_clock",
                    "8": "gpio_port_clock",
                    "11": "gpio_port",
                    "2": "port_clock"
                },
                "uVar4": {
                    "8": "function1",
                    "3": "pin_func1",
                    "1": "gpio_init",
                    "2": "gpio_init_1"
                },
                "uVar5": {
                    "1": "gpio_config2",
                    "3": "pin_function2",
                    "2": "gpio_init_2",
                    "8": "function2"
                },
                "piVar6": {
                    "1": "handle_ptr",
                    "3": "i2c_peripheral",
                    "4": "i2c_periph",
                    "12": "i2c_handle",
                    "2": "i2c_handler"
                },
                "local_38": {
                    "1": "gpio_pin_1",
                    "4": "gpio_pin_mask",
                    "5": "gpio_pin_mask1",
                    "2": "pin1_mask"
                },
                "local_34": {
                    "1": "gpio_pin_setting",
                    "4": "pin_mask2",
                    "2": "gpio_pin_mask2"
                },
                "local_30": {
                    "2": "local30",
                    "1": "gpio_pin3"
                },
                "local_2c": {
                    "2": "gpio_init_mode",
                    "1": "gpio_init3",
                    "3": "gpio_pull"
                },
                "_DAT_4002101c": {
                    "1": "ioreg1",
                    "4": "register1"
                },
                "_DAT_40021010": {
                    "1": "_dat_40021010",
                    "4": "register2"
                },
                "DAT_20000668": {
                    "1": "i2_c1_base_i2_cx_reg_dr",
                    "2": "register3"
                },
                "_DAT_40021018": {
                    "1": "data5",
                    "2": "register5"
                },
                "DATO_0800a69c": {
                    "1": "gpio_peripheral_map_1"
                },
                "DATO_0800a66c": {
                    "1": "gpio_peripheral_map_2"
                },
                "DAT_0800a69c": {
                    "1": "pin_peripheral_mapping_info1"
                },
                "DAT_0800a66c": {
                    "1": "gpio_port_b"
                },
                "_DAT_40010004": {
                    "1": "register4"
                },
                "DAT_2000066c": {
                    "1": "register2"
                },
                "HAL_GPIO_Init": {
                    "1": "initialize_gpio_port",
                    "7": "initialize_gpio"
                },
                "HAL_NVIC_SetPriority": {
                    "1": "set_gpio_interrupt_priority",
                    "6": "set_nvic_priority"
                },
                "HAL_NVIC_EnableIRQ": {
                    "1": "enable_gpio_interrupt",
                    "3": "enable_nvic_irq"
                },
                "HAL_I2C_Init": {
                    "4": "initialize_i2_c",
                    "2": "initialize_i2_c_peripheral"
                },
                "DAG_20000668": {
                    "1": "data_ptr1"
                },
                "DAG_2000066c": {
                    "1": "data_ptr2"
                },
                "DAT_40021018": {
                    "1": "i2c_clock_control_register"
                },
                "DAT_40010000": {
                    "1": "peripheral_register"
                },
                "uVar4, uVar5": {
                    "1": "gpio_function"
                },
                "local_38, local_34, local_30": {
                    "1": "gpio_config"
                },
                "iprintf": {
                    "1": "print_error"
                },
                "pinmap_peripheral": {
                    "1": "get_i2_c_peripheral"
                },
                "pinmap_merge_peripheral": {
                    "1": "merge_pinmap_peripheral"
                },
                "pinmap_function": {
                    "2": "get_pinmap_function",
                    "1": "get_pin_function"
                },
                "set_GPIO_Port_Clock": {
                    "2": "set_gpio_port_clock",
                    "1": "set_gpio_clock"
                },
                "param_1[0]": {
                    "1": "i2c_config[0]"
                },
                "param_1[1]": {
                    "1": "i2c_config[1]"
                },
                "param_1[2]": {
                    "1": "i2c_config[2]"
                },
                "param_1[3]": {
                    "1": "i2c_config[3]"
                },
                "param_1[4]": {
                    "1": "i2c_config[4]"
                },
                "param_1[5]": {
                    "1": "i2c_config[5]"
                },
                "param_1[6]": {
                    "1": "i2c_config[6]"
                },
                "param_1[7]": {
                    "1": "i2c_config[7]"
                },
                "param_1[8]": {
                    "1": "i2c_config[8]"
                },
                "param_1[9]": {
                    "1": "i2c_config[9]"
                },
                "param_1[0x16]": {
                    "1": "i2c_config[22]"
                },
                "param_1[0x59]": {
                    "1": "i2c_config[89]"
                },
                "*(char *)((int)param_1 + 0x5a)": {
                    "1": "i2c_config[90]"
                },
                "*(char *)((int)param_1 + 0x5b)": {
                    "1": "i2c_config[91]"
                },
                "*(undefined *)((int)param_1 + 0x5a)": {
                    "1": "i2c_config[90]"
                },
                "*(undefined *)((int)param_1 + 0x5b)": {
                    "1": "i2c_config[91]"
                },
                "*(undefined *)((int)param_1 + 0x5d)": {
                    "1": "i2c_config[93]"
                },
                "DAT_40010004": {
                    "1": "gpio_reg"
                },
                "HAL_IOCTL_Init": {
                    "1": "initialize_ioctl"
                },
                "D_4002101c": {
                    "1": "gpio_reset_reg"
                },
                "D_40021010": {
                    "1": "gpio_mode_reg"
                },
                "D_20000668": {
                    "1": "handler_1"
                },
                "D_40005800": {
                    "1": "gpio_port_value"
                },
                "D_40021018": {
                    "1": "gpio_alt_reg"
                },
                "D_40010004": {
                    "1": "gpio_alt_offset"
                },
                "D_40010000": {
                    "1": "gpio_alt_base"
                }
            }
        },
        "FUN_08007e74": {
            "entrypoint": "0x08007e74",
            "current_name": "transmit_data_08007e74",
            "code": "\nint transmit_data_08007e74(int device_address,undefined4 transmit_buffer,undefined4 transmit_buffer_size,undefined4 timeout)\n\n{\n  int start_time;\n  int i2c_state;\n  uint elapsed_time;\n  int result;\n  int i2c_handle;\n  undefined4 timeout;\n  \n  timeout = timeout;\n  start_time = get_current_time();\n  elapsed_time = 0;\n  result = 2;\n  do {\n    i2c_handle = device_address + 4;\n    i2c_state = send_i2_c_data_async(i2c_handle,transmit_buffer,transmit_buffer_size,timeout,timeout);\n    if (i2c_state == 0) {\n      result = 0;\n      while ((i2c_state = get_i2_c_state(i2c_handle), i2c_state != 0x20 && (result == 0))) {\n        i2c_state = get_current_time();\n        elapsed_time = i2c_state - start_time;\n        if (elapsed_time < 0x65) {\n          i2c_state = get_i2_c_error(i2c_handle);\n          if (i2c_state != 0) {\n            result = 2;\n          }\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    i2c_state = get_i2_c_error(i2c_handle);\n  } while ((i2c_state == 4) && (elapsed_time < 100));\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08007e74": "transmit_data_08007e74",
                "param_1": "device_address",
                "param_2": "transmit_buffer",
                "param_3": "transmit_buffer_size",
                "param_4": "timeout",
                "iVar1": "start_time",
                "iVar2": "i2c_state",
                "uVar3": "elapsed_time",
                "iVar4": "result",
                "iVar5": "i2c_handle",
                "uVar6": "timeout",
                "HAL_GetTick": "get_current_time",
                "HAL_I2C_Master_Transmit_IT": "send_i2_c_data_async",
                "HAL_I2C_GetState": "get_i2_c_state",
                "HAL_I2C_GetError": "get_i2_c_error"
            },
            "calling": [
                "FUN_08002a58"
            ],
            "called": [
                "FUN_08004728",
                "FUN_0800542a",
                "FUN_08005430",
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007e74": {
                    "1": "transmit_data_with_delay",
                    "2": "transmit_and_check_i2_c",
                    "4": "transmit_data_with_timeout",
                    "5": "transmit_data",
                    "3": "transmit_and_check_status"
                },
                "param_1": {
                    "1": "i2c_handle",
                    "22": "device_address",
                    "4": "i2c_device_address",
                    "2": "i2c_address"
                },
                "param_2": {
                    "4": "data",
                    "6": "tx_buffer",
                    "8": "data_buffer",
                    "1": "transmit_data",
                    "10": "transmit_buffer"
                },
                "param_3": {
                    "5": "tx_buffer_size",
                    "1": "transmit_size",
                    "3": "size",
                    "7": "transmit_buffer_size"
                },
                "param_4": {
                    "18": "timeout",
                    "11": "i2c_timeout",
                    "1": "transfer_options"
                },
                "iVar1": {
                    "25": "start_time",
                    "4": "start_tick",
                    "2": "start_timestamp"
                },
                "iVar2": {
                    "1": "hal_error",
                    "4": "error_code",
                    "8": "i2c_state",
                    "3": "transmit_status",
                    "2": "i2c_status",
                    "5": "transmit_result"
                },
                "uVar3": {
                    "1": "time_elapsed",
                    "30": "elapsed_time"
                },
                "iVar4": {
                    "1": "error_code",
                    "4": "return_status",
                    "5": "transmit_status",
                    "8": "status",
                    "12": "result"
                },
                "iVar5": {
                    "3": "i2c_device",
                    "2": "i2c_state",
                    "1": "i2c_address",
                    "17": "i2c_handle"
                },
                "uVar6": {
                    "1": "data_format",
                    "5": "timeout_value",
                    "4": "timeout_copy"
                },
                "HAL_GetTick": {
                    "1": "get_timestamp",
                    "2": "get_current_tick",
                    "3": "get_current_time"
                },
                "HAL_I2C_Master_Transmit_IT": {
                    "1": "transmit_data"
                },
                "HAL_I2C_GetState": {
                    "5": "get_i2_c_state",
                    "1": "get_state"
                },
                "HAL_I2C_GetError": {
                    "1": "get_error",
                    "5": "get_i2_c_error"
                },
                "HalI2cTransmit": {
                    "1": "transmit_data_over_i2_c"
                }
            }
        },
        "FUN_08007ede": {
            "entrypoint": "0x08007ede",
            "current_name": "copy_data_08007ede",
            "code": "\nundefined4 copy_data_08007ede(int dest_address,int src_address,uint length)\n\n{\n  uint index;\n  \n  if (0x20 < length) {\n    return 2;\n  }\n  for (index = 0; index < length; index = index + 1 & 0xff) {\n    *(undefined *)(dest_address + index + 0x68) = *(undefined *)(src_address + index);\n    *(char *)(dest_address + 0x88) = *(char *)(dest_address + 0x88) + '\\x01';\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007ede": "copy_data_08007ede",
                "param_1": "dest_address",
                "param_2": "src_address",
                "param_3": "length",
                "uVar1": "index"
            },
            "calling": [
                "FUN_080027f0",
                "FUN_0800288c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007ede": {
                    "2": "copy_and_increment",
                    "1": "copy_data_to_memory",
                    "23": "copy_data"
                },
                "param_1": {
                    "3": "dest_ptr",
                    "2": "destination_ptr",
                    "1": "destination_pointer",
                    "4": "destination_address",
                    "11": "dest_address"
                },
                "param_2": {
                    "1": "source_pointer",
                    "3": "src",
                    "2": "source_ptr",
                    "5": "source_address",
                    "11": "src_address"
                },
                "param_3": {
                    "6": "num_bytes",
                    "2": "data_size",
                    "1": "buffer_size",
                    "3": "data_length",
                    "9": "size",
                    "10": "length"
                },
                "uVar1": {
                    "10": "i",
                    "1": "current_index",
                    "3": "counter",
                    "14": "index"
                }
            }
        },
        "FUN_08007f0e": {
            "entrypoint": "0x08007f0e",
            "current_name": "receive_data_08007f0e",
            "code": "\nint receive_data_08007f0e(int device_address,undefined4 data_buffer,undefined4 data_size,undefined4 timeout)\n\n{\n  int start_time;\n  int i2c_status;\n  uint elapsed_time;\n  int result;\n  int i2c_handle;\n  undefined4 param_4_copy;\n  \n  param_4_copy = timeout;\n  start_time = get_current_time();\n  elapsed_time = 0;\n  result = 2;\n  do {\n    i2c_handle = device_address + 4;\n    i2c_status = i2c_master_receive(i2c_handle,data_buffer,data_size,timeout,param_4_copy);\n    if (i2c_status == 0) {\n      result = 0;\n      while ((i2c_status = i2c_get_state(i2c_handle), i2c_status != 0x20 && (result == 0))) {\n        i2c_status = get_current_time();\n        elapsed_time = i2c_status - start_time;\n        if (elapsed_time < 0x65) {\n          i2c_status = i2c_get_error(i2c_handle);\n          if (i2c_status != 0) {\n            result = 2;\n          }\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    i2c_status = i2c_get_error(i2c_handle);\n  } while ((i2c_status == 4) && (elapsed_time < 100));\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08007f0e": "receive_data_08007f0e",
                "param_1": "device_address",
                "param_2": "data_buffer",
                "param_3": "data_size",
                "param_4": "timeout",
                "iVar1": "start_time",
                "iVar2": "i2c_status",
                "uVar3": "elapsed_time",
                "iVar4": "result",
                "iVar5": "i2c_handle",
                "uVar6": "param_4_copy",
                "HAL_GetTick": "get_current_time",
                "HAL_I2C_Master_Receive_IT": "i2c_master_receive",
                "HAL_I2C_GetState": "i2c_get_state",
                "HAL_I2C_GetError": "i2c_get_error"
            },
            "calling": [
                "FUN_08002b68"
            ],
            "called": [
                "FUN_0800542a",
                "FUN_080047f4",
                "FUN_08005430",
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007f0e": {
                    "1": "perform_i2_c_receive",
                    "7": "receive_data_from_i2_c",
                    "3": "receive_data_with_timeout",
                    "2": "receive_i2_c_data",
                    "12": "receive_data"
                },
                "param_1": {
                    "24": "device_address",
                    "1": "i2c_data_address",
                    "2": "i2c_address"
                },
                "param_2": {
                    "1": "i2c_rx_buffer",
                    "2": "buffer",
                    "16": "data_buffer",
                    "5": "rx_buffer"
                },
                "param_3": {
                    "1": "length",
                    "9": "data_size",
                    "3": "rx_buffer_size",
                    "5": "data_length",
                    "6": "size"
                },
                "param_4": {
                    "15": "timeout",
                    "11": "i2c_timeout",
                    "1": "i2c_handle",
                    "2": "i2c_address"
                },
                "iVar1": {
                    "29": "start_time",
                    "1": "start_millis"
                },
                "iVar2": {
                    "3": "result",
                    "1": "hal_result",
                    "8": "i2c_status"
                },
                "uVar3": {
                    "1": "time_elapsed",
                    "29": "elapsed_time"
                },
                "iVar4": {
                    "1": "return_status",
                    "5": "status",
                    "22": "result"
                },
                "iVar5": {
                    "3": "device_handle",
                    "5": "i2c_instance",
                    "1": "temp_variable",
                    "2": "i2c_device_address",
                    "20": "i2c_handle"
                },
                "uVar6": {
                    "1": "timeout_copy",
                    "2": "timeout",
                    "3": "param_4_copy"
                },
                "HAL_GetTick": {
                    "1": "get_tick_count",
                    "3": "get_current_time"
                },
                "HAL_I2C_Master_Receive_IT": {
                    "2": "i2c_master_receive",
                    "1": "receive_i2c_data_with_interrupt"
                },
                "HAL_I2C_GetState": {
                    "1": "get_i2c_status",
                    "4": "i2c_get_state"
                },
                "HAL_I2C_GetError": {
                    "1": "get_i2c_error",
                    "4": "i2c_get_error"
                },
                "HAL_I2C_GetTick": {
                    "1": "get_current_time"
                },
                "HAL_I2C_Master_Receiv\u0435": {
                    "1": "receive_i2c_data"
                }
            }
        },
        "FUN_08007f78": {
            "entrypoint": "0x08007f78",
            "current_name": "FUNC_08007f78",
            "code": "\nint FUNC_08007f78(int param_1)\n\n{\n  return param_1 + -4;\n}\n\n",
            "renaming": {
                "FUN_08007f78": "FUNC_08007f78"
            },
            "calling": [
                "FUN_08007fa0",
                "FUN_08008020",
                "FUN_08007ff0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007f7c": {
            "entrypoint": "0x08007f7c",
            "current_name": "set_i2_c_listen_mode_08007f7c",
            "code": "\nvoid set_i2_c_listen_mode_08007f7c(integer device_address,integer data)\n\n{\n  if (device_address != 0) {\n    if (data != 0) {\n      *(integer *)(device_address + 0x60) = data;\n      enable_i2_c_listen_interrupt(device_address + 4);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f7c": "set_i2_c_listen_mode_08007f7c",
                "param_1": "device_address",
                "param_2": "data",
                "HAL_I2C_EnableListen_IT": "enable_i2_c_listen_interrupt",
                "int": "integer"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007f7c": {
                    "2": "update_i2_c_buffer",
                    "1": "set_i2_c_listener",
                    "3": "update_i2_c_data",
                    "5": "set_i2_c_listen_mode"
                },
                "param_1": {
                    "10": "device_address",
                    "1": "buffer_address",
                    "3": "device_ptr",
                    "6": "i2c_device"
                },
                "param_2": {
                    "1": "new_data",
                    "7": "data",
                    "2": "listen_address",
                    "3": "listen_mode",
                    "4": "data_value"
                },
                "HAL_I2C_EnableListen_IT": {
                    "2": "enable_i2_c_listener",
                    "1": "enable_i2c_listen_interrupt",
                    "4": "enable_i2_c_listening",
                    "6": "enable_i2_c_listen_interrupt"
                },
                "param_1 + 0x60": {
                    "1": "device_param"
                },
                "param_1 + 4": {
                    "1": "data_pointer_offset_plus4"
                },
                "<original_function_name>": {
                    "1": "update_i2_c_data"
                },
                "<original_parameter_name_1>": {
                    "1": "device"
                },
                "<original_parameter_name_2>": {
                    "1": "data"
                },
                "<original_variable_name_1>": {
                    "1": "i2c_data_address"
                },
                "*(int *)(param_1 + 0x60)": {
                    "1": "device_register"
                },
                "int": {
                    "1": "integer"
                }
            }
        },
        "FUN_08007f8e": {
            "entrypoint": "0x08007f8e",
            "current_name": "update_i2_c_data_08007f8e",
            "code": "\nvoid update_i2_c_data_08007f8e(int device_address,int data)\n\n{\n  if (device_address != 0) {\n    if (data != 0) {\n      *(int *)(device_address + 100) = data;\n      enable_i2_c_listening(device_address + 4);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f8e": "update_i2_c_data_08007f8e",
                "param_1": "device_address",
                "param_2": "data",
                "HAL_I2C_EnableListen_IT": "enable_i2_c_listening"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007f8e": {
                    "1": "set_param_and_enable_i2_c_listen",
                    "2": "set_i2_c_data",
                    "3": "set_i2_c_listen_mode",
                    "4": "update_i2_c_data"
                },
                "param_1": {
                    "1": "i2c_handler",
                    "12": "device_address",
                    "4": "device_handle",
                    "2": "device",
                    "3": "device_ptr"
                },
                "param_2": {
                    "5": "data",
                    "2": "register_value",
                    "3": "value",
                    "1": "new_data",
                    "4": "data_value"
                },
                "param_1 + 100": {
                    "1": "register_address"
                },
                "param_1 + 4": {
                    "1": "i2c_device_address"
                },
                "HAL_I2C_EnableListen_IT": {
                    "2": "enable_i2_c_listen_interrupt",
                    "1": "enable_i2c_listen_interrupt"
                },
                "*(int *)(param_1 + 100)": {
                    "1": "i2c_data_buffer"
                }
            }
        },
        "FUN_08007fa0": {
            "entrypoint": "0x08007fa0",
            "current_name": "transmit_or_receive_data_08007fa0",
            "code": "\nvoid transmit_or_receive_data_08007fa0(int data_buffer,int is_receive,int data_size,undefined4 callback_function)\n\n{\n  int i2c_obj;\n  \n  i2c_obj = get_i2c_object;\n  if (data_size == *(int *)(data_buffer + 0xc)) {\n    if (is_receive == 0) {\n      *(undefined *)(i2c_obj + 0x88) = 0;\n      *(undefined *)(i2c_obj + 0x5c) = 0;\n      if (*(callback_code **)(i2c_obj + 100) != (callback_code *)0x0) {\n        (**(callback_code **)(i2c_obj + 100))();\n      }\n      transmit_data_sequentially(data_buffer,i2c_obj + 0x68,*(undefined *)(i2c_obj + 0x88),8);\n      return;\n    }\n    *(undefined *)(i2c_obj + 0x5c) = 1;\n    receive_data_sequentially(data_buffer,i2c_obj + 0x68,0x20,8,callback_function);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007fa0": "transmit_or_receive_data_08007fa0",
                "param_1": "data_buffer",
                "param_2": "is_receive",
                "param_3": "data_size",
                "param_4": "callback_function",
                "iVar1": "i2c_obj",
                "get_i2c_obj": "get_i2_c_object",
                "HAL_I2C_Slave_Sequential_Transmit_IT": "transmit_data_sequentially",
                "HAL_I2C_Slave_Sequential_Receive_IT": "receive_data_sequentially",
                "get_i2c_obj()": "get_i2c_object",
                "code": "callback_code"
            },
            "calling": [
                "FUN_08004ac2"
            ],
            "called": [
                "FUN_08007f78",
                "FUN_08004954",
                "FUN_080048c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007fa0": {
                    "1": "transmit_receive_data",
                    "2": "handle_i2c_data",
                    "6": "transmit_data",
                    "17": "transmit_or_receive_data"
                },
                "param_1": {
                    "1": "obj_ptr",
                    "5": "i2c_obj",
                    "7": "data_buffer",
                    "2": "input_data"
                },
                "param_2": {
                    "5": "is_transmit",
                    "1": "is_transmit_mode",
                    "4": "transmit_flag",
                    "11": "is_receive",
                    "2": "is_transmitting"
                },
                "param_3": {
                    "2": "expected_size",
                    "4": "compare_value",
                    "1": "i2c_param_3",
                    "3": "check_value"
                },
                "param_4": {
                    "1": "i2c_param_4",
                    "6": "callback",
                    "2": "callback_func",
                    "13": "callback_function"
                },
                "iVar1": {
                    "1": "i2c_handle",
                    "10": "i2c_object",
                    "16": "i2c_obj",
                    "2": "i2c_obj_ptr"
                },
                "get_i2c_obj": {
                    "8": "get_i2c_object",
                    "1": "get_i2_c_obj",
                    "12": "get_i2_c_object"
                },
                "HAL_I2C_Slave_Sequential_Transmit_IT": {
                    "1": "transmit_data_using_i2_c",
                    "2": "sequential_transmit",
                    "10": "transmit_data_sequentially",
                    "4": "transmit_data_it",
                    "3": "transmit_data"
                },
                "HAL_I2C_Slave_Sequential_Receive_IT": {
                    "1": "receive_data_with_i2_c",
                    "2": "sequential_receive",
                    "10": "receive_data_sequentially",
                    "4": "receive_data_it",
                    "3": "receive_data"
                },
                "get_i2c_obj()": {
                    "1": "get_i2_c_object_pointer()"
                },
                "HAL_I2C_Slave_Sequential_Transmit_IT()": {
                    "1": "transmit_data_using_i2_c_it()"
                },
                "code": {
                    "1": "callback_code"
                },
                "HAL_I2C_Slave_Sequential_Receive_IT()": {
                    "1": "receive_data_using_i2_c_it()"
                },
                "code *": {
                    "1": "function_pointer"
                },
                "*(code **)(iVar1 + 100)": {
                    "1": "callback_function"
                },
                "*(undefined *)(iVar1 + 0x88)": {
                    "1": "data_1"
                },
                "*(undefined *)(iVar1 + 0x5c)": {
                    "1": "flag2"
                },
                "param_1 + 0xc": {
                    "1": "data_offset"
                },
                "*(int *)(param_1 + 0xc)": {
                    "1": "data_value"
                },
                "param_1,iVar1 + 0x68,*(undefined *)(iVar1 + 0x88),8": {
                    "1": "transmit_params"
                },
                "FUN_08007f78": {
                    "1": "get_i2c_obj_value"
                },
                "FUN_08004954": {
                    "1": "process_data_transmission"
                },
                "FUN_080048c8": {
                    "1": "process_data_reception"
                }
            }
        },
        "FUN_08007ff0": {
            "entrypoint": "0x08007ff0",
            "current_name": "enable_i2c_listen_08007ff0",
            "code": "\nvoid enable_i2c_listen_08007ff0(undefined4 i2c_object)\n\n{\n  int i2c_obj;\n  \n  i2c_obj = get_i2c_object();\n  if (((*(function_pointer **)(i2c_obj + 0x60) != (function_pointer *)0x0) && (*(char *)(i2c_obj + 0x5c) == '\\x01')) &&\n     (*(char *)(i2c_obj + 0x2c) != ' ')) {\n    (**(function_pointer **)(i2c_obj + 0x60))(i2c_obj + 0x68);\n  }\n  enable_i2c_listen_08007ff0_interrupt(i2c_object);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ff0": "enable_i2c_listen_08007ff0",
                "param_1": "i2c_object",
                "iVar1": "i2c_obj",
                "get_i2c_obj()": "get_i2c_object()",
                "HAL_I2C_EnableListen_IT": "enable_i2c_listen_interrupt",
                "get_i2c_obj": "get_i2c_object",
                "code": "function_pointer"
            },
            "calling": [
                "FUN_08004aec",
                "FUN_08004f3c",
                "FUN_08005084"
            ],
            "called": [
                "FUN_080049e0",
                "FUN_08007f78"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007ff0": {
                    "1": "enable_i2c_and_hal",
                    "3": "initialize_i2c",
                    "7": "enable_i2c_listen",
                    "2": "enable_i2c_communication"
                },
                "param_1": {
                    "1": "i2c_obj_ptr",
                    "4": "param",
                    "2": "param_1",
                    "5": "i2c_object"
                },
                "iVar1": {
                    "3": "i2c_handle",
                    "22": "i2c_obj",
                    "1": "i2c_handler"
                },
                "get_i2c_obj()": {
                    "3": "get_i2c_object()"
                },
                "HAL_I2C_EnableListen_IT": {
                    "1": "enable_i2c_listener",
                    "2": "enable_i2_c_listen_interrupt",
                    "15": "enable_i2c_listen_interrupt"
                },
                "FUN_080049e0": {
                    "1": "retrieve_i2c_obj_ptr"
                },
                "FUN_08007f78": {
                    "4": "check_i2c_status",
                    "1": "check_i2c_conditions",
                    "3": "check_condition"
                },
                "get_i2c_obj": {
                    "2": "retrieve_i2c_object",
                    "13": "get_i2c_object",
                    "1": "fetch_i2c_object"
                },
                "code": {
                    "4": "function_pointer",
                    "1": "code_func"
                },
                "(code **)": {
                    "2": "function_pointer"
                },
                "(char *)": {
                    "1": "status_byte"
                },
                "'\\x01'": {
                    "1": "enabled_status"
                },
                "' '": {
                    "1": "space"
                },
                "code **": {
                    "1": "function_ptr"
                },
                "uint **": {
                    "1": "status_ptr"
                },
                "(code *)0x0": {
                    "1": "null"
                },
                "(char *)(iVar1 + 0x5c)": {
                    "1": "is_enabled_flag"
                },
                "(char *)(iVar1 + 0x2c)": {
                    "1": "is_space"
                },
                "iVar1 + 0x60": {
                    "1": "callback_func_ptr"
                },
                "(code **)(iVar1 + 0x60)": {
                    "1": "callback_func"
                },
                "iVar1 + 0x68": {
                    "1": "arg_to_callback"
                },
                "Hal_I2C_EnableListen_IT": {
                    "1": "enable_i2c_listen_interrupt"
                },
                "param_2": {
                    "1": "i2c_obj_address"
                },
                "param_3": {
                    "1": "interrupt_param"
                },
                "*(code **)(iVar1 + 0x60)": {
                    "1": "i2c_callback_function"
                },
                "*(char *)(iVar1 + 0x5c)": {
                    "1": "i2c_flag_1"
                },
                "*(char *)(iVar1 + 0x2c)": {
                    "1": "i2c_flag_2"
                },
                "**(code **)(iVar1 + 0x60)": {
                    "1": "call_i2c_callback_function"
                }
            }
        },
        "FUN_08008020": {
            "entrypoint": "0x08008020",
            "current_name": "enable_i2_c_listen_interrupt_08008020",
            "code": "\nvoid enable_i2_c_listen_interrupt_08008020(undefined4 i2c_handle)\n\n{\n  int i2c_obj;\n  \n  i2c_obj = get_i2c_object_handle();\n  if (*(char *)(i2c_obj + 0x5d) == '\\0') {\n    enable_i2c_listen_interrupt(i2c_handle);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008020": "enable_i2_c_listen_interrupt_08008020",
                "param_1": "i2c_handle",
                "iVar1": "i2c_obj",
                "get_i2c_obj": "get_i2_c_object",
                "HAL_I2C_EnableListen_IT": "enable_i2c_listen_interrupt",
                "get_i2c_obj()": "get_i2c_object_handle()"
            },
            "calling": [
                "FUN_08004f3c"
            ],
            "called": [
                "FUN_080049e0",
                "FUN_08007f78"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008020": {
                    "4": "enable_i2_c_listen",
                    "1": "enable_i2_c_listen_interrupts",
                    "2": "enable_i2_c_listening",
                    "6": "enable_i2c_listen_interrupt",
                    "7": "enable_i2_c_listen_interrupt"
                },
                "param_1": {
                    "1": "handler",
                    "2": "obj_address",
                    "3": "obj_handle",
                    "4": "i2c_handle"
                },
                "iVar1": {
                    "1": "i2c_obj_ptr",
                    "5": "i2c_object",
                    "22": "i2c_obj"
                },
                "get_i2c_obj": {
                    "5": "retrieve_i2c_object",
                    "2": "get_i2c_object",
                    "1": "retrieve_i2c_obj",
                    "6": "get_i2_c_object"
                },
                "HAL_I2C_EnableListen_IT": {
                    "1": "enable_i2_c_listening_it",
                    "4": "enable_i2_c_listen_it",
                    "2": "enable_i2c_listen_it",
                    "6": "enable_i2c_listen_interrupt",
                    "5": "enable_i2_c_listen_interrupt"
                },
                "*(char *)(iVar1 + 0x5d)": {
                    "1": "is_listen_enabled"
                },
                "get_i2c_obj()": {
                    "1": "get_i2c_object_handle()"
                },
                "HAL_I2C_EnableListen_IT()": {
                    "1": "enable_i2c_listen_interrupt_it()"
                },
                "FUN_080049e0": {
                    "1": "get_i2c_obj"
                },
                "FUN_08007f78": {
                    "1": "is_i2c_obj_initialized"
                }
            }
        },
        "FUN_08008078": {
            "entrypoint": "0x08008078",
            "current_name": "initialize_uart_pins_08008078",
            "code": "\n\n\nvoid initialize_uart_pins_08008078(int *uart_config)\n\n{\n  int peripheral1;\n  int peripheral2;\n  undefined4 gpio_clock1;\n  uint pin_function;\n  uint gpio_pin_mask;\n  uint gpio_pin_config;\n  uint gpio_config3;\n  undefined4 gpio_init_struct;\n  \n  if (uart_config != (int *)0x0) {\n    peripheral1 = map_peripheral((int)*(char *)(uart_config + 0x16),&DAT_0800a864);\n    peripheral2 = map_peripheral((int)*(char *)((int)uart_config + 0x59),&DAT_0800a81c);\n    if ((peripheral2 == 0) || (peripheral1 == 0)) {\n      print_error_message(\"ERROR: at least one UART pin has no peripheral\\n\",peripheral2);\n    }\n    else {\n      peripheral1 = merge_peripheral(peripheral1);\n      *uart_config = peripheral1;\n      if (peripheral1 == 0) {\n        print_error_message(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (peripheral1 == 0x40013800) {\n          _DAT_4002100c = _DAT_4002100c & 0xffffbfff;\n          _DAT_40021018 = _DAT_40021018 | 0x4000;\n          *(undefined *)(uart_config + 0x11) = 0;\n          *(undefined *)((int)uart_config + 0x5a) = 0x25;\n        }\n        else if (peripheral1 == 0x40004400) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffdffff;\n          _DAT_4002101c = _DAT_4002101c | 0x20000;\n          *(undefined *)(uart_config + 0x11) = 1;\n          *(undefined *)((int)uart_config + 0x5a) = 0x26;\n        }\n        else if (peripheral1 == 0x40004800) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffbffff;\n          _DAT_4002101c = _DAT_4002101c | 0x40000;\n          *(undefined *)(uart_config + 0x11) = 2;\n          *(undefined *)((int)uart_config + 0x5a) = 0x27;\n        }\n        gpio_clock1 = set_gpio_clock((uint)((int)*(char *)((int)uart_config + 0x59) << 0x18) >> 0x1c);\n        pin_function = map_pin_function((int)*(char *)((int)uart_config + 0x59),&DAT_0800a81c);\n        gpio_pin_mask = 1 << (*(byte *)((int)uart_config + 0x59) & 0xf) & 0xffff;\n        gpio_pin_config = (pin_function >> 3 & 1) << 4 | pin_function & 7;\n        gpio_config3 = (pin_function << 0x1a) >> 0x1e;\n        _DAT_40021018 = _DAT_40021018 | 1;\n        switch((pin_function << 0x11) >> 0x19) {\n        case 1:\n          _DAT_40010004 = _DAT_40010004 | 0x7000001;\n          break;\n        case 2:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          _DAT_40010004 = _DAT_40010004 | 0x7000002;\n          break;\n        case 4:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          _DAT_40010004 = _DAT_40010004 | 0x7000004;\n          break;\n        case 6:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          _DAT_40010004 = _DAT_40010004 | 0x7000008;\n          break;\n        case 8:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          _DAT_40010004 = _DAT_40010004 | 0x7000030;\n          break;\n        case 10:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n          break;\n        case 0xd:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          _DAT_40010004 = _DAT_40010004 | 0x7000300;\n          break;\n        case 0x10:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n          break;\n        case 0x14:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          _DAT_40010004 = _DAT_40010004 | 0x7001000;\n          break;\n        case 0x17:\n          _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          _DAT_40010004 = _DAT_40010004 | 0x7008000;\n          break;\n        case 0x1c:\n          _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n          break;\n        case 0x22:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n        }\n        gpio_init_struct = 3;\n        initialize_gpio(gpio_clock1,&gpio_pin_mask);\n        gpio_clock1 = set_gpio_clock((uint)((int)*(char *)(uart_config + 0x16) << 0x18) >> 0x1c);\n        pin_function = map_pin_function((int)*(char *)(uart_config + 0x16),&DAT_0800a864);\n        gpio_pin_mask = 1 << (*(byte *)(uart_config + 0x16) & 0xf) & 0xffff;\n        gpio_pin_config = (pin_function >> 3 & 1) << 4 | pin_function & 7;\n        gpio_config3 = (pin_function << 0x1a) >> 0x1e;\n        initialize_gpio(gpio_clock1,&gpio_pin_mask);\n        (&DAT_200006c0)[*(byte *)(uart_config + 0x11)] = uart_config + 1;\n        uart_pin_value_1 = *uart_config;\n        uart_pin_value_2 = uart_config_list_second;\n        uart_pin_value_3 = uart_config_list_third;\n        uart_pin_value_4 = uart_config_list_fourth;\n        uart_pin_value_5 = uart_config_list_fifth;\n        uart_pin_value_6 = 0xc;\n        uart_pin_value_7 = 0;\n        uart_pin_value_8 = 0;\n        initialize_uart(uart_config + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008078": "initialize_uart_pins_08008078",
                "param_1": "uart_config",
                "iVar1": "peripheral1",
                "iVar2": "peripheral2",
                "uVar3": "gpio_clock1",
                "uVar4": "pin_function",
                "local_20": "gpio_pin_mask",
                "local_1c": "gpio_pin_config",
                "local_18": "gpio_config3",
                "local_14": "gpio_init_struct",
                "iprintf": "print_error_message",
                "HAL_GPIO_Init": "initialize_gpio",
                "set_GPIO_Port_Clock": "set_gpio_clock",
                "pinmap_peripheral": "map_peripheral",
                "pinmap_merge_peripheral": "merge_peripheral",
                "pinmap_function": "map_pin_function",
                "HAL_UART_Init": "initialize_uart",
                "param_1[1]": "uart_pin_value_1",
                "param_1[2]": "uart_pin_value_2",
                "param_1[3]": "uart_pin_value_3",
                "param_1[4]": "uart_pin_value_4",
                "param_1[5]": "uart_pin_value_5",
                "param_1[6]": "uart_pin_value_6",
                "param_1[7]": "uart_pin_value_7",
                "param_1[8]": "uart_pin_value_8",
                "param_1[0x12]": "uart_config_list_second",
                "param_1[0x13]": "uart_config_list_third",
                "param_1[0x14]": "uart_config_list_fourth",
                "param_1[0x15]": "uart_config_list_fifth"
            },
            "calling": [
                "FUN_080084b0",
                "FUN_08008c44"
            ],
            "called": [
                "FUN_08007376",
                "FUN_08006bb8",
                "FUN_0800674e",
                "FUN_080073ae",
                "FUN_080098d8",
                "FUN_080040e8",
                "FUN_08007320"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008078": {
                    "16": "initialize_uart_pins",
                    "10": "initialize_uart",
                    "4": "configure_uart_pins",
                    "1": "initialize_uart_peripherals"
                },
                "param_1": {
                    "3": "pins_array",
                    "2": "pin_config",
                    "7": "uart_pins",
                    "11": "uart_config",
                    "1": "pin_array"
                },
                "iVar1": {
                    "1": "uart_pin1_result",
                    "18": "peripheral1",
                    "2": "peripheral_1"
                },
                "iVar2": {
                    "1": "pin2_peripheral",
                    "2": "uart_peripheral2",
                    "18": "peripheral2"
                },
                "uVar3": {
                    "1": "gpio1_clock",
                    "4": "gpio_port",
                    "2": "gpio_port1",
                    "5": "gpio_clock1",
                    "3": "gpio_port_clock1"
                },
                "uVar4": {
                    "1": "gpio_function_2",
                    "2": "gpio_function",
                    "3": "function",
                    "14": "pin_function"
                },
                "local_20": {
                    "2": "gpio_config1",
                    "1": "gpio_init_1",
                    "4": "gpio_pin_mask",
                    "3": "pin_mask1"
                },
                "local_1c": {
                    "3": "gpio_pin_config",
                    "2": "gpio_pin_2",
                    "1": "pin_mask2"
                },
                "local_18": {
                    "1": "gpio_mode_config",
                    "2": "gpio_config3"
                },
                "local_14": {
                    "1": "gpio_init_param_4",
                    "3": "gpio_init_config",
                    "6": "gpio_init_struct"
                },
                "_DAT_4002100c": {
                    "2": "uart_register_1",
                    "1": "uart_config_reg1",
                    "4": "register1",
                    "3": "uart_register1"
                },
                "_DAT_40021018": {
                    "1": "uart_cr1_register",
                    "2": "uart_register_2",
                    "3": "uart_register2",
                    "4": "register2"
                },
                "_DAT_40021010": {
                    "2": "uart_register_3",
                    "1": "gpio_crh_register",
                    "3": "uart_register3",
                    "4": "register3"
                },
                "_DAT_4002101c": {
                    "1": "uart2_config_register",
                    "2": "uart_reg4",
                    "4": "register4",
                    "3": "uart_register4"
                },
                "DAT_0800a864": {
                    "1": "peripheral_map1"
                },
                "DAT_0800a81c": {
                    "1": "pinmap_data2"
                },
                "iprintf": {
                    "5": "print_error"
                },
                "*(char *)(param_1 + 0x16)": {
                    "1": "uart_pin1"
                },
                "*(char *)((int)param_1 + 0x59)": {
                    "1": "uart_pin2"
                },
                "*(undefined *)(param_1 + 0x11)": {
                    "1": "uart_config_bit1"
                },
                "*(undefined *)((int)param_1 + 0x5a)": {
                    "1": "uart_config_bit2"
                },
                "(uVar4 << 0x11) >> 0x19": {
                    "1": "uart_config_value"
                },
                "&(DAT_200006c0)[*(byte *)(param_1 + 0x11)]": {
                    "1": "uart_config_array"
                },
                "*(byte *)(param_1 + 0x16)": {
                    "1": "gpio_pin1"
                },
                "*(byte *)((int)param_1 + 0x59)": {
                    "1": "gpio_pin2"
                },
                "HAL_GPIO_Init": {
                    "1": "hal_gpio_initialize",
                    "11": "initialize_gpio"
                },
                "FUN_08007376": {
                    "1": "pinmap_peripheral"
                },
                "FUN_08006bb8": {
                    "1": "pinmap_merge_peripheral"
                },
                "FUN_0800674e": {
                    "1": "pinmap_function"
                },
                "FUN_080073ae": {
                    "1": "pinmap_function"
                },
                "FUN_080098d8": {
                    "1": "hal_uart_init"
                },
                "FUN_080040e8": {
                    "1": "set_gpio_pin"
                },
                "FUN_08007320": {
                    "1": "pinmap_function"
                },
                "set_GPIO_Port_Clock": {
                    "3": "set_gpio_clock",
                    "1": "configure_gpio_port_clock",
                    "2": "configure_gpio_clock"
                },
                "pinmap_peripheral": {
                    "1": "get_peripheral_mapping",
                    "2": "get_peripheral",
                    "4": "map_peripheral"
                },
                "pinmap_merge_peripheral": {
                    "1": "merge_peripheral_pins",
                    "5": "merge_peripheral"
                },
                "pinmap_function": {
                    "1": "map_function",
                    "2": "get_pin_function",
                    "3": "map_pin_function"
                },
                "DAT_200006c0": {
                    "1": "uart_config_array",
                    "2": "uart_register_array"
                },
                "HAL_UART_Init": {
                    "1": "initialize_uart_instance",
                    "8": "initialize_uart"
                },
                "_DAT_40010004": {
                    "1": "register_a",
                    "2": "register5"
                },
                "*&DAT_200006c0[uart_pins[0x11]]": {
                    "1": "uart_array[uart_pins[0x11]]"
                },
                "*param_1": {
                    "1": "uart_config_list_first"
                },
                "(&DAT_200006c0)[*(byte *)(param_1 + 0x11)]": {
                    "1": "uart_array_index"
                },
                "param_1 + 1": {
                    "1": "uart_control_struct"
                },
                "param_1[1]": {
                    "1": "uart_pin_value_1"
                },
                "param_1[2]": {
                    "1": "uart_pin_value_2"
                },
                "param_1[3]": {
                    "1": "uart_pin_value_3"
                },
                "param_1[4]": {
                    "1": "uart_pin_value_4"
                },
                "param_1[5]": {
                    "1": "uart_pin_value_5"
                },
                "param_1[6]": {
                    "1": "uart_pin_value_6"
                },
                "param_1[7]": {
                    "1": "uart_pin_value_7"
                },
                "param_1[8]": {
                    "1": "uart_pin_value_8"
                },
                "param_1 + 0x16": {
                    "1": "uart_pin1"
                },
                "(int)param_1 + 0x59": {
                    "1": "uart_pin2"
                },
                "param_1 + 0x11": {
                    "1": "uart_config_reg3"
                },
                "(int)param_1 + 0x5a": {
                    "1": "uart_config_reg4"
                },
                "(byte *)(param_1 + 0x16)": {
                    "1": "uart_pin1_byte"
                },
                "(byte *)((int)param_1 + 0x5a)": {
                    "1": "uart_config_reg4_byte"
                },
                "(byte *)(param_1 + 0x11)": {
                    "1": "uart_config_reg3_byte"
                },
                "param_1[0x12]": {
                    "1": "uart_config_list_second"
                },
                "param_1[0x13]": {
                    "1": "uart_config_list_third"
                },
                "param_1[0x14]": {
                    "1": "uart_config_list_fourth"
                },
                "param_1[0x15]": {
                    "1": "uart_config_list_fifth"
                },
                "&DAT_0800a864": {
                    "1": "uart_pin_config1"
                },
                "&DAT_0800a81c": {
                    "1": "uart_pin_config2"
                },
                "1": {
                    "1": "uart_config_list_first_mask"
                },
                "0x40013800": {
                    "1": "uart_pin_config1"
                },
                "0x40004400": {
                    "1": "uart_peripheral2"
                },
                "0x40004800": {
                    "1": "uart_pin_config3"
                },
                "0x40010004": {
                    "1": "gpio_register_value"
                },
                "0x7000001": {
                    "1": "uart_function1"
                },
                "0x7000000": {
                    "1": "uart_function2"
                },
                "0x7000002": {
                    "1": "uart_function3"
                },
                "0x7000004": {
                    "1": "uart_function4"
                },
                "0x7000008": {
                    "1": "uart_function5"
                },
                "0x7000030": {
                    "1": "uart_function6"
                },
                "0x7000010": {
                    "1": "uart_function7"
                },
                "0x70000c0": {
                    "1": "uart_function8"
                },
                "0x7000040": {
                    "1": "uart_function9"
                },
                "0x7000300": {
                    "1": "uart_function10"
                },
                "0x7000200": {
                    "1": "uart_function11"
                },
                "0x7000100": {
                    "1": "uart_function12"
                },
                "0x7000c00": {
                    "1": "uart_function13"
                },
                "0x7000800": {
                    "1": "uart_function14"
                },
                "0x7001000": {
                    "1": "uart_function15"
                },
                "0x7008000": {
                    "1": "uart_function16"
                },
                "0xf8ffffff": {
                    "1": "uart_function_reg_mask"
                },
                "0x1000000": {
                    "1": "uart_function17"
                },
                "0x2000000": {
                    "1": "uart_function18"
                },
                "0x4000000": {
                    "1": "uart_function19"
                },
                "Hal_GPIO_Init": {
                    "1": "initialize_gpio"
                },
                "0xc": {
                    "1": "number_of_handler_elements"
                },
                "0": {
                    "1": "uart_tx_state"
                },
                "switch_case_value": {
                    "1": "pin_function_value"
                },
                "2": {
                    "1": "uart_config_value3"
                }
            }
        },
        "FUN_080084b0": {
            "entrypoint": "0x080084b0",
            "current_name": "initialize_uart_080084b0",
            "code": "\nvoid initialize_uart_080084b0(void)\n\n{\n  int peripheral_result;\n  undefined4 pin_result;\n  \n  peripheral_result = get_peripheral_mapping(2,&DAT_0800a864);\n  if (peripheral_result != 0) {\n    pin_result = get_peripheral_mapping(2,&DAT_0800a864);\n    DAT_20000075 = pinmap_pin(pin_result,&DAT_0800a81c);\n    DAT_20000074 = 2;\n    DAT_20000064 = 0x2580;\n    DAT_20000070 = 0;\n    DAT_20000068 = 0;\n    DAT_2000006c = 0;\n    initialize_uart_080084b0(&DAT_2000001c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080084b0": "initialize_uart_080084b0",
                "iVar1": "peripheral_result",
                "uVar2": "pin_result",
                "uart_init": "initialize_uart",
                "pinmap_peripheral": "get_peripheral_mapping"
            },
            "calling": [
                "FUN_08008500"
            ],
            "called": [
                "FUN_08008078",
                "FUN_0800734a",
                "FUN_08007320"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080084b0": {
                    "3": "initialize_peripheral",
                    "1": "initialize_gpio_uart",
                    "25": "initialize_uart"
                },
                "iVar1": {
                    "6": "peripheral_status",
                    "1": "peripheral_check_result",
                    "2": "peripheral_initialized",
                    "3": "pinmap_result",
                    "8": "result"
                },
                "uVar2": {
                    "1": "peripheral_addr",
                    "3": "peripheral",
                    "5": "pin_result",
                    "4": "peripheral_id",
                    "2": "pinmap_peripheral_result"
                },
                "DAT_0800a864": {
                    "1": "pin_mapping"
                },
                "DAT_0800a81c": {
                    "1": "pin_mapping_data",
                    "3": "pin_data"
                },
                "DAT_20000075": {
                    "2": "pin",
                    "8": "pin_number"
                },
                "DAT_20000074": {
                    "1": "peripheral_index",
                    "2": "pin_type",
                    "5": "pin_mode"
                },
                "DAT_20000064": {
                    "1": "pinmap_address",
                    "11": "baud_rate"
                },
                "DAT_20000070": {
                    "7": "data_bits",
                    "1": "variable1",
                    "3": "variable_1"
                },
                "DAT_20000068": {
                    "1": "variable2",
                    "7": "stop_bits",
                    "3": "variable_2"
                },
                "DAT_2000006c": {
                    "1": "variable3",
                    "3": "variable_3",
                    "5": "parity"
                },
                "DAT_2000001c": {
                    "2": "uart_configuration",
                    "1": "uart_data",
                    "3": "uart_config"
                },
                "param_1": {
                    "1": "peripheral_identifier"
                },
                "uart_init": {
                    "2": "initialize_uart",
                    "1": "initialize_uart_device"
                },
                "FUN_08008078": {
                    "1": "check_peripheral_status"
                },
                "FUN_0800734a": {
                    "1": "get_peripheral_id"
                },
                "FUN_08007320": {
                    "1": "get_pin_number"
                },
                "pinmap_peripheral": {
                    "1": "get_peripheral_mapping"
                }
            }
        },
        "FUN_08008500": {
            "entrypoint": "0x08008500",
            "current_name": "transmit_data_08008500",
            "code": "\nuint transmit_data_08008500(undefined4 data,uint length)\n\n{\n  int start_time;\n  int peripheral;\n  uint index;\n  \n  start_time = get_current_tick();\n  peripheral = check_peripheral(2,&DAT_0800a864);\n  if (peripheral == 0) {\n    return 0;\n  }\n  for (index = 0;\n      (index < 5 &&\n      (((&DAT_200006c0)[index] == 0 ||\n       (peripheral = check_peripheral(2,&DAT_0800a864), *(int *)(&DAT_200006c0)[index] != peripheral))));\n      index = index + 1 & 0xff) {\n  }\n  if (4 < index) {\n    if ((4 < DAT_20000060) && (initialize_debug_uart(), 4 < DAT_20000060)) {\n      return 0;\n    }\n    index = (uint)DAT_20000060;\n  }\n  do {\n    peripheral = transmit_uart_data((&DAT_200006c0)[index],data,length & 0xffff,1000);\n    if (peripheral == 0) {\n      return length;\n    }\n    peripheral = get_current_tick();\n  } while ((uint)(peripheral - start_time) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008500": "transmit_data_08008500",
                "param_1": "data",
                "param_2": "length",
                "iVar1": "start_time",
                "iVar2": "peripheral",
                "uVar3": "index",
                "HAL_GetTick": "get_current_tick",
                "pinmap_peripheral": "check_peripheral",
                "uart_debug_init": "initialize_debug_uart",
                "HAL_UART_Transmit": "transmit_uart_data"
            },
            "calling": [
                "FUN_0800885c"
            ],
            "called": [
                "FUN_080084b0",
                "FUN_080067ac",
                "FUN_08003760",
                "FUN_08007320"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008500": {
                    "30": "transmit_data",
                    "1": "send_data"
                },
                "param_1": {
                    "29": "data",
                    "1": "data_to_send"
                },
                "param_2": {
                    "4": "data_length",
                    "14": "length",
                    "3": "data_size",
                    "10": "size"
                },
                "iVar1": {
                    "1": "current_tick",
                    "18": "start_time",
                    "10": "start_tick"
                },
                "iVar2": {
                    "12": "peripheral",
                    "1": "pin_map_value",
                    "6": "pinmap_result",
                    "2": "pin",
                    "3": "peripheral_id"
                },
                "uVar3": {
                    "4": "i",
                    "27": "index"
                },
                "DAT_0800a864": {
                    "5": "peripheral_data",
                    "1": "pinmap",
                    "2": "peripheral_address"
                },
                "DAT_200006c0": {
                    "2": "uart_data",
                    "1": "uart_configuration_array",
                    "3": "uart_data_array"
                },
                "DAT_20000060": {
                    "1": "uart_data_count",
                    "3": "uart_size"
                },
                "FUN_080084b0": {
                    "1": "initialize_debug"
                },
                "FUN_080067ac": {
                    "1": "check_pin_mapping"
                },
                "param_3": {
                    "1": ""
                },
                "undefined4": {
                    "1": ""
                },
                "param_4": {
                    "1": ""
                },
                "FUN_08003760": {
                    "1": "debug_init"
                },
                "FUN_08007320": {
                    "1": "initialize_debug_uart"
                },
                "HAL_GetTick": {
                    "2": "get_current_time",
                    "1": "get_tick_count"
                },
                "pinmap_peripheral": {
                    "1": "get_peripheral_id",
                    "2": "check_peripheral"
                },
                "uart_debug_init": {
                    "1": "initialize_debug",
                    "4": "initialize_debug_uart"
                },
                "HAL_UART_Transmit": {
                    "2": "transmit_uart_data",
                    "1": "transmit_data_on_uart"
                },
                "&DAT_200006c0": {
                    "1": "peripheral_array",
                    "2": "uart_data"
                },
                "&DAT_0800a864": {
                    "1": "pinmap_data"
                },
                "(*HAL_UART_Transmit)": {
                    "1": "transmit_uart_data"
                },
                "1000": {
                    "1": "transmit_timeout"
                }
            }
        },
        "FUN_080085b8": {
            "entrypoint": "0x080085b8",
            "current_name": "check_uart_state_080085b8",
            "code": "\nbool check_uart_state_080085b8(int index)\n\n{\n  uint uart_state;\n  \n  uart_state = get_uart_state((&DAT_200006c0)[*(byte_value *)(index + 0x44)]);\n  return (uart_state & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_080085b8": "check_uart_state_080085b8",
                "param_1": "index",
                "uVar1": "uart_state",
                "HAL_UART_GetState": "get_uart_state",
                "byte": "byte_value"
            },
            "calling": [
                "FUN_0800863c",
                "FUN_08008600"
            ],
            "called": [
                "FUN_08006b1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080085b8": {
                    "2": "is_uart_transmitting",
                    "16": "check_uart_state",
                    "1": "is_uart_ready_to_send",
                    "3": "is_uart_state_valid"
                },
                "param_1": {
                    "2": "input_data",
                    "6": "input_value",
                    "1": "uart_index",
                    "3": "uart_instance",
                    "8": "index"
                },
                "uVar1": {
                    "1": "state",
                    "30": "uart_state"
                },
                "HAL_UART_GetState": {
                    "2": "get_uart_state"
                },
                "FUN_08006b1c": {
                    "5": "get_uart_state",
                    "1": "get_byte_value"
                },
                "byte": {
                    "1": "input_byte",
                    "4": "byte_value"
                },
                "*(byte *)(param_1 + 0x44)": {
                    "1": "byte_value",
                    "2": "uart_index"
                },
                "*(&DAT_200006c0)[*(byte *)(param_1 + 0x44)]": {
                    "1": "uart_device"
                },
                "byte *(param_1 + 0x44)": {
                    "1": "byte_shifted_pointer"
                }
            }
        },
        "FUN_080085dc": {
            "entrypoint": "0x080085dc",
            "current_name": "check_uart_state_080085dc",
            "code": "\nbool check_uart_state_080085dc(int data_ptr)\n\n{\n  uint uart_state;\n  \n  uart_state = get_uart_state((&DAT_200006c0)[*(byte_value *)(data_ptr + 0x44)]);\n  return (uart_state & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_080085dc": "check_uart_state_080085dc",
                "param_1": "data_ptr",
                "uVar1": "uart_state",
                "HAL_UART_GetState": "get_uart_state",
                "byte": "byte_value"
            },
            "calling": [],
            "called": [
                "FUN_08006b1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080085dc": {
                    "1": "is_uart_in_transmitting_state",
                    "6": "check_uart_state",
                    "5": "is_uart_state_valid",
                    "3": "is_uart_transmit_complete"
                },
                "param_1": {
                    "1": "port_index",
                    "2": "uart_handle",
                    "3": "input_index"
                },
                "uVar1": {
                    "30": "uart_state"
                },
                "HAL_UART_GetState": {
                    "8": "get_uart_state"
                },
                "byte": {
                    "1": "byte_data",
                    "2": "byte_value"
                },
                "*(byte *)(param_1 + 0x44)": {
                    "1": "offset_value"
                },
                "FUN_08006b1c": {
                    "2": "get_uart_state",
                    "1": "get_uart_index"
                },
                "*DAT_200006c0": {
                    "1": "uart_states_array"
                }
            }
        },
        "FUN_08008600": {
            "entrypoint": "0x08008600",
            "current_name": "receive_data_08008600",
            "code": "\nundefined4 receive_data_08008600(int data_length,undefined *received_data,undefined4 param_3,undefined4 param_4)\n\n{\n  int is_serial_rx_active;\n  \n  if (data_length == 0) {\n    return 0xffffffff;\n  }\n  is_serial_rx_active = is_serial_rx_active();\n  if (is_serial_rx_active == 0) {\n    *received_data = *(undefined *)(data_length + 0x45);\n    receive_uart_data((&DAT_200006c0)[*(input_byte *)(data_length + 0x44)],data_length + 0x45,1,&DAT_200006c0,\n                        param_4);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008600": "receive_data_08008600",
                "param_1": "data_length",
                "param_2": "received_data",
                "iVar1": "is_serial_rx_active",
                "HAL_UART_Receive_IT": "receive_uart_data",
                "serial_rx_active": "is_serial_rx_active",
                "byte": "input_byte"
            },
            "calling": [
                "FUN_08008b66"
            ],
            "called": [
                "FUN_080068d6",
                "FUN_080085b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008600": {
                    "1": "extract_byte_from_serial_with_interrupt",
                    "3": "receive_serial_data",
                    "19": "receive_data"
                },
                "param_1": {
                    "1": "data_source",
                    "2": "data_size",
                    "6": "data_length",
                    "3": "serial_port",
                    "5": "data_ptr",
                    "4": "input_data"
                },
                "param_2": {
                    "1": "buffer",
                    "12": "received_data",
                    "5": "output_data",
                    "4": "output_buffer"
                },
                "param_3": {
                    "10": "param3",
                    "1": "param",
                    "15": "param_3"
                },
                "param_4": {
                    "1": "parameter_2",
                    "9": "param4",
                    "13": "param_4",
                    "2": "callback_function"
                },
                "iVar1": {
                    "1": "is_serial_active",
                    "18": "is_serial_rx_active",
                    "2": "is_active",
                    "7": "is_rx_active"
                },
                "*param_2": {
                    "1": "first_byte"
                },
                "*(undefined *)(param_1 + 0x45)": {
                    "1": "serial_data"
                },
                "(undefined4)(&DAT_200006c0)[*(byte *)(param_1 + 0x44)]": {
                    "1": "uart_instance"
                },
                "HAL_UART_Receive_IT": {
                    "2": "receive_uart_data",
                    "1": "receive_data_it"
                },
                "serial_rx_active": {
                    "1": "check_rx_active",
                    "2": "is_serial_rx_active"
                },
                "*(byte *)(param_1 + 0x44)": {
                    "1": "byte_value",
                    "2": "index"
                },
                "byte": {
                    "1": "input_byte"
                },
                "DAT_200006c0": {
                    "1": "hal_uart"
                },
                "FUN_080068d6": {
                    "1": "check_serial_active"
                },
                "FUN_080085b8": {
                    "1": "is_serial_rx_active"
                }
            }
        },
        "FUN_0800863c": {
            "entrypoint": "0x0800863c",
            "current_name": "initialize_serial_communication_0800863c",
            "code": "\nvoid initialize_serial_communication_0800863c(int serial_port,undefined4 data,undefined4 data_bits,undefined4 priority)\n\n{\n  int is_serial_rx_active;\n  uint index;\n  \n  if (serial_port != 0) {\n    is_serial_rx_active = serial_rx_active();\n    if (is_serial_rx_active == 0) {\n      index = (uint)*(byte *)(serial_port + 0x44);\n      *(undefined4 *)(&DAT_20000670 + index * 4) = data;\n      *(int *)(&DAT_20000684 + index * 4) = serial_port;\n      set_interrupt_priority((int)*(char *)(serial_port + 0x5a),0,1,index,priority);\n      enable_interrupt((int)*(char *)(serial_port + 0x5a));\n      receive_data_interrupt((&DAT_200006c0)[*(byte *)(serial_port + 0x44)],serial_port + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800863c": "initialize_serial_communication_0800863c",
                "param_1": "serial_port",
                "param_2": "data",
                "param_3": "data_bits",
                "param_4": "priority",
                "iVar1": "is_serial_rx_active",
                "uVar2": "index",
                "HAL_NVIC_SetPriority": "set_interrupt_priority",
                "HAL_NVIC_EnableIRQ": "enable_interrupt",
                "HAL_UART_Receive_IT": "receive_data_interrupt"
            },
            "calling": [
                "FUN_08008c44"
            ],
            "called": [
                "FUN_08003f94",
                "FUN_080068d6",
                "FUN_08003f30",
                "FUN_080085b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800863c": {
                    "2": "initialize_serial",
                    "1": "setup_uart_receive_interrupt",
                    "3": "process_received_data",
                    "15": "initialize_serial_communication"
                },
                "param_1": {
                    "2": "port",
                    "1": "input_data",
                    "3": "serial_device",
                    "13": "serial_port"
                },
                "param_2": {
                    "1": "data_buffer",
                    "13": "data",
                    "2": "value1",
                    "6": "baud_rate",
                    "4": "value"
                },
                "param_3": {
                    "1": "priority_sub",
                    "2": "value2",
                    "4": "priority",
                    "6": "data_bits",
                    "3": "unused"
                },
                "param_4": {
                    "2": "irq_enabled",
                    "4": "param4",
                    "1": "unused2",
                    "6": "priority",
                    "5": "stop_bits"
                },
                "iVar1": {
                    "1": "rx_is_active",
                    "15": "is_serial_rx_active",
                    "3": "is_active",
                    "6": "is_serial_active",
                    "4": "is_rx_active"
                },
                "uVar2": {
                    "2": "uart_index",
                    "4": "byte_value",
                    "1": "current_index",
                    "12": "index"
                },
                "HAL_NVIC_SetPriority": {
                    "7": "set_interrupt_priority",
                    "6": "set_priority",
                    "1": "set_irq_priority"
                },
                "HAL_NVIC_EnableIRQ": {
                    "8": "enable_interrupt",
                    "1": "enable_interrupt_irq",
                    "5": "enable_irq"
                },
                "HAL_UART_Receive_IT": {
                    "1": "receive_data_from_serial_port",
                    "5": "receive_data_interrupt",
                    "2": "receive_data"
                },
                "&DAT_20000670": {
                    "1": "data_buffer1"
                },
                "&DAT_20000684": {
                    "1": "data_buffer2"
                },
                "Hal_NVIC_SetPriority": {
                    "1": "set_priority"
                },
                "(int)*(char *)(param_1 + 0x5a)": {
                    "1": "interrupt_number"
                },
                "Hal_NVIC_EnableIRQ": {
                    "1": "enable_interrupt"
                },
                "Hal_UART_Receive_IT": {
                    "1": "receive_data"
                },
                "FUN_08003f94": {
                    "1": "clear_interrupt_flag"
                },
                "FUN_080068d6": {
                    "1": "process_data"
                },
                "FUN_08003f30": {
                    "1": "configure_interrupt"
                },
                "FUN_080085b8": {
                    "1": "is_serial_rx_active"
                },
                "DAT_20000670": {
                    "1": "data_buffer"
                },
                "DAT_20000684": {
                    "1": "port_buffer"
                }
            }
        },
        "FUN_08008694": {
            "entrypoint": "0x08008694",
            "current_name": "initialize_peripheral_08008694",
            "code": "\nvoid initialize_peripheral_08008694(int peripheral_address,undefined4 data)\n\n{\n  byte peripheral_index;\n  \n  if (peripheral_address != 0) {\n    peripheral_index = *(byte *)(peripheral_address + 0x44);\n    *(undefined4 *)(&DAT_20000698 + (uint)peripheral_index * 4) = data;\n    *(int *)(&DAT_200006ac + (uint)peripheral_index * 4) = peripheral_address;\n    set_interrupt_priority((int)*(char *)(peripheral_address + 0x5a),0,2);\n    enable_interrupt((int)*(char *)(peripheral_address + 0x5a));\n    transmit_data\n              ((&DAT_200006c0)[*(byte *)(peripheral_address + 0x44)],\n               *(int *)(peripheral_address + 100) + (uint)*(ushort *)(peripheral_address + 0x6a),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008694": "initialize_peripheral_08008694",
                "param_1": "peripheral_address",
                "param_2": "data",
                "bVar1": "peripheral_index",
                "HAL_NVIC_SetPriority": "set_interrupt_priority",
                "HAL_NVIC_EnableIRQ": "enable_interrupt",
                "HAL_UART_Transmit_IT": "transmit_data"
            },
            "calling": [],
            "called": [
                "FUN_08003f94",
                "FUN_0800688e",
                "FUN_08003f30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008694": {
                    "1": "configure_peripheral",
                    "12": "initialize_peripheral",
                    "2": "configure_interrupt_and_transmit",
                    "4": "set_priority_and_transmit_data"
                },
                "param_1": {
                    "2": "data_ptr",
                    "4": "device_address",
                    "1": "hardware_pointer",
                    "14": "peripheral_address"
                },
                "param_2": {
                    "4": "priority",
                    "2": "value",
                    "1": "new_data"
                },
                "bVar1": {
                    "2": "index",
                    "1": "peripheral_value",
                    "9": "byte_value",
                    "10": "peripheral_index"
                },
                "param_1 + 0x44": {
                    "1": "peripheral_config_address"
                },
                "&DAT_20000698": {
                    "1": "device_priority_array"
                },
                "param_1 + 0x5a": {
                    "1": "irq_id"
                },
                "param_1 + 100": {
                    "1": "data_offset_2"
                },
                "param_1 + 0x6a": {
                    "1": "peripheral_data_address"
                },
                "&DAT_200006c0": {
                    "1": "transmit_addr_array"
                },
                "transmit_addr_array[*(byte *)(data_ptr + 0x44)]": {
                    "1": "transmit_addr"
                },
                "FUN_08003f94": {
                    "1": "initialize_gpio"
                },
                "FUN_0800688e": {
                    "1": "configure_interrupt",
                    "2": "configure_uart"
                },
                "FUN_08003f30": {
                    "1": "calculate_transmit_buffer_size"
                },
                "HAL_NVIC_SetPriority": {
                    "5": "set_interrupt_priority",
                    "2": "set_priority"
                },
                "HAL_NVIC_EnableIRQ": {
                    "6": "enable_interrupt",
                    "1": "enable_irq"
                },
                "HAL_UART_Transmit_IT": {
                    "1": "transmit_data_over_uart",
                    "3": "transmit_data"
                },
                "&DAT_200006ac": {
                    "1": "hardware_pointer_array"
                },
                "int *(param_1 + 0x5a)": {
                    "1": "interrupt_source"
                },
                "*(int *)(param_1 + 100) + (uint)*(ushort *)(param_1 + 0x6a)": {
                    "1": "transmit_data_offset"
                },
                "&DAT_200006c0)[*(byte *)(param_1 + 0x44)]": {
                    "1": "selected_uart_transmission_config"
                },
                "(uint)*(ushort *)(param_1 + 0x6a)": {
                    "1": "peripheral_data_value"
                },
                "*DAT_20000698": {
                    "1": "priority_array"
                },
                "*DAT_200006ac": {
                    "1": "device_array"
                },
                "*(char *)(device_ptr + 0x5a)": {
                    "1": "interrupt_id"
                },
                "*(byte *)(device_ptr + 0x44)": {
                    "1": "device_index"
                },
                "*(&DAT_200006c0)[*(byte *)(device_ptr + 0x44)]": {
                    "1": "transmit_channel"
                },
                "*(int *)(device_ptr + 100)": {
                    "1": "buffer_address"
                },
                "*(ushort *)(device_ptr + 0x6a)": {
                    "1": "data_length"
                },
                "DAT_20000698": {
                    "1": "registered_configuration"
                },
                "DAT_200006ac": {
                    "1": "registered_peripheral"
                },
                "DAT_200006c0": {
                    "1": "uart_buffer"
                }
            }
        },
        "FUN_080086e8": {
            "entrypoint": "0x080086e8",
            "current_name": "find_value_index_080086e8",
            "code": "\nuint find_value_index_080086e8(int value)\n\n{\n  uint index;\n  \n  if (value == 0) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (4 < index) {\n        return index;\n      }\n      if (value == (&DAT_200006c0)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_080086e8": "find_value_index_080086e8",
                "param_1": "value",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08008730",
                "FUN_0800870c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080086e8": {
                    "1": "find_array_index",
                    "9": "find_value_index",
                    "2": "find_number_index",
                    "7": "find_index"
                },
                "param_1": {
                    "3": "input",
                    "1": "input_param",
                    "4": "number",
                    "2": "element",
                    "14": "value"
                },
                "uVar1": {
                    "2": "result",
                    "1": "matching_index",
                    "28": "index"
                },
                "&DAT_200006c0": {
                    "1": "array_of_values"
                },
                "<original_function_name>": {
                    "1": "<reverse_lookup>"
                }
            }
        },
        "FUN_0800870c": {
            "entrypoint": "0x0800870c",
            "current_name": "execute_uart_function_0800870c",
            "code": "\nvoid execute_uart_function_0800870c(void)\n\n{\n  uint uart_index;\n  \n  uart_index = uart_index();\n  if (uart_index < 5) {\n    (**(function_pointer **)(&DAT_20000670 + uart_index * 4))(*(undefined4 *)(&DAT_20000684 + uart_index * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800870c": "execute_uart_function_0800870c",
                "uVar1": "uart_index",
                "code": "function_pointer"
            },
            "calling": [
                "FUN_0800694c"
            ],
            "called": [
                "FUN_080086e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800870c": {
                    "16": "execute_uart_function",
                    "1": "execute_uart_operations",
                    "2": "execute_uart_command",
                    "6": "execute_uart_operation"
                },
                "FUN_080086e8": {
                    "1": "get_uart_operation",
                    "23": "get_uart_index"
                },
                "uVar1": {
                    "3": "uart_index_result",
                    "1": "uart_index_value",
                    "17": "uart_index",
                    "2": "index"
                },
                "code": {
                    "1": "function_pointer"
                },
                "DAT_20000670": {
                    "1": "function_pointer_table"
                },
                "DAT_20000684": {
                    "1": "uart_operation_args"
                },
                "param_1": {
                    "1": "uart_device_index",
                    "13": "index"
                },
                "&DAT_20000670": {
                    "1": "uart_operation_table"
                },
                "&DAT_20000684": {
                    "1": "uart_address_table"
                }
            }
        },
        "FUN_08008730": {
            "entrypoint": "0x08008730",
            "current_name": "transmit_data_08008730",
            "code": "\nvoid transmit_data_08008730(void)\n\n{\n  uint uart_index;\n  int result;\n  int uart_address;\n  \n  uart_index = get_uart_index();\n  uart_address = *(int *)(&DAT_200006ac + uart_index * 4);\n  if ((uart_index < 5) && (result = (**(code **)(&DAT_20000698 + uart_index * 4))(uart_address), result != -1)) {\n    transmit_data_08008730_it\n              ((&DAT_200006c0)[*(byte *)(uart_address + 0x44)],\n               *(int *)(uart_address + 100) + (uint)*(ushort *)(uart_address + 0x6a),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008730": "transmit_data_08008730",
                "uVar1": "uart_index",
                "iVar2": "result",
                "iVar3": "uart_address",
                "HAL_UART_Transmit_IT": "transmit_data_it",
                "uart_index": "get_uart_index"
            },
            "calling": [
                "FUN_08006932"
            ],
            "called": [
                "FUN_0800688e",
                "FUN_080086e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008730": {
                    "11": "transmit_uart_data",
                    "18": "transmit_data",
                    "2": "transmit_serial_data"
                },
                "uVar1": {
                    "30": "uart_index",
                    "1": "index"
                },
                "iVar2": {
                    "28": "result",
                    "1": "return_value",
                    "2": "transmit_result"
                },
                "iVar3": {
                    "1": "serial_port",
                    "2": "uart_descriptor",
                    "4": "uart_pointer",
                    "3": "uart_data_ptr"
                },
                "FUN_0800688e": {
                    "2": "process_uart_data",
                    "8": "process_data",
                    "1": "apply_uart_config"
                },
                "FUN_080086e8": {
                    "1": "get_uart_descriptor",
                    "3": "get_uart_data"
                },
                "(code **)(&DAT_20000698 + uVar1 * 4)": {
                    "1": "get_function_pointer"
                },
                "HAL_UART_Transmit_IT": {
                    "3": "transmit_data_it"
                },
                "param_1": {
                    "1": "uart_index"
                },
                "param_2": {
                    "1": "param_2"
                },
                "param_3": {
                    "1": "param_3"
                },
                "uart_index": {
                    "1": "get_uart_index"
                }
            }
        },
        "FUN_0800877c": {
            "entrypoint": "0x0800877c",
            "current_name": "FUNC_0800877c",
            "code": "\nvoid FUNC_0800877c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800877c": "FUNC_0800877c"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008804": {
            "entrypoint": "0x08008804",
            "current_name": "allocate_memory_08008804",
            "code": "\nundefined * allocate_memory_08008804(int size)\n\n{\n  undefined *allocated_memory;\n  \n  if (DAT_200006d4 == (undefined *)0x0) {\n    DAT_200006d4 = &DAT_20000a3c;\n  }\n  allocated_memory = DAT_200006d4;\n  if (DAT_200006d4 + size <= stack_pointer) {\n    DAT_200006d4 = DAT_200006d4 + size;\n    return allocated_memory;\n  }\n  DAT_20000a38 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008804": "allocate_memory_08008804",
                "param_1": "size",
                "puVar1": "allocated_memory",
                "&stack0x00000000": "stack_pointer",
                "stack0x00000000": "stack_base"
            },
            "calling": [
                "FUN_08009918"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008804": {
                    "28": "allocate_memory",
                    "1": "allocate_memory_block",
                    "2": "reserve_memory"
                },
                "param_1": {
                    "1": "block_size",
                    "29": "size"
                },
                "puVar1": {
                    "1": "allocated_address",
                    "2": "allocated_block",
                    "23": "allocated_memory"
                },
                "DAT_200006d4": {
                    "1": "current_block_pointer",
                    "2": "current_position",
                    "5": "current_pointer",
                    "6": "current_memory"
                },
                "DAT_20000a3c": {
                    "1": "initial_position",
                    "3": "initial_memory",
                    "2": "initial_memory_ptr"
                },
                "DAT_20000a38": {
                    "2": "error_flag",
                    "17": "error_code"
                },
                "&DAT_20000a3c": {
                    "1": "initial_position"
                },
                "&stack0x00000000": {
                    "1": "end_position",
                    "2": "stack_pointer"
                },
                "stack0x00000000": {
                    "1": "stack_limit",
                    "2": "stack_base"
                }
            }
        },
        "FUN_08008840": {
            "entrypoint": "0x08008840",
            "current_name": "get_error_code_08008840",
            "code": "\nint get_error_code_08008840(void)\n\n{\n  error_code 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008840": "get_error_code_08008840",
                "undefined4": "int",
                "return": "error_code"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008840": {
                    "1": "initialize_value",
                    "7": "get_default_value",
                    "12": "get_error_code",
                    "2": "get_return_value",
                    "3": "initialize_error_code"
                },
                "<original_variable_name_1>": {
                    "1": "return_value"
                },
                "undefined4": {
                    "3": "int",
                    "2": "uint32_t",
                    "1": "unsigned_int"
                },
                "return": {
                    "1": "error_code"
                },
                "PTR_XXXXXXXX": {
                    "1": "ptr_data"
                },
                "DAT_XXXXXXXX": {
                    "1": "max_value"
                },
                "0xffffffff": {
                    "1": "default_flag_value"
                },
                "PTR_XXXXX": {
                    "1": "unchanged"
                },
                "DAT_XXXXX": {
                    "1": "unchanged"
                },
                "return_value": {
                    "1": "default_value"
                },
                "DAT_0800abcd": {
                    "1": "default_value"
                },
                "new_name_1": {
                    "1": "error_code"
                }
            }
        },
        "FUN_08008846": {
            "entrypoint": "0x08008846",
            "current_name": "initialize_memory_08008846",
            "code": "\nvoid initialize_memory_08008846(void param1,int memory_address)\n\n{\n  *(void *)(memory_address + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008846": "initialize_memory_08008846",
                "param_1": "param1",
                "param_2": "memory_address",
                "undefined4": "void"
            },
            "calling": [
                "FUN_0800a0ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008846": {
                    "2": "set_memory_permission",
                    "4": "set_memory_page_size",
                    "1": "set_memory_address",
                    "6": "initialize_memory",
                    "3": "set_memory_flag"
                },
                "param_1": {
                    "3": "result",
                    "1": "old_size",
                    "5": "arg1",
                    "8": "param1",
                    "2": "flags"
                },
                "param_2": {
                    "4": "param2",
                    "1": "target",
                    "2": "base_address",
                    "7": "memory_address",
                    "3": "arg2"
                },
                "*(undefined4 *)(param_2 + 4)": {
                    "3": "page_address",
                    "1": "memory_value"
                },
                "param_3": {
                    "1": "permission"
                },
                "param_4": {
                    "1": "size"
                },
                "var_1": {
                    "1": "permission_value"
                },
                "param2": {
                    "1": "page_size"
                },
                "undefined4": {
                    "1": "void"
                },
                "<original_variable_name>": {
                    "1": "memory_page_size"
                },
                "param_2 + 4": {
                    "1": "target_address"
                },
                "0x2000": {
                    "1": "permission"
                }
            }
        },
        "FUN_08008850": {
            "entrypoint": "0x08008850",
            "current_name": "get_return_value_08008850",
            "code": "\nint get_return_value_08008850(void)\n\n{\n  result 1;\n}\n\n",
            "renaming": {
                "FUN_08008850": "get_return_value_08008850",
                "undefined4": "int",
                "return": "result"
            },
            "calling": [
                "FUN_0800a110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008850": {
                    "2": "get_status",
                    "1": "initialize_game_state",
                    "6": "get_return_value",
                    "4": "initialize"
                },
                "undefined4": {
                    "1": "uint32_t",
                    "6": "int",
                    "3": "status",
                    "4": "void"
                },
                "return": {
                    "1": "returns",
                    "2": "status",
                    "4": "result"
                },
                "<no parameters>": {
                    "1": ""
                },
                "PTR_XXXX": {
                    "1": ""
                },
                "DAT_XXXX": {
                    "1": ""
                },
                "<no variables>": {
                    "1": ""
                },
                "PTR_XXXXX": {
                    "1": "no_change"
                },
                "PTR_YYYYY": {
                    "1": "ptr_y"
                },
                "DAT_ZZZZZ": {
                    "1": "dat_z"
                },
                "DAT_XXXXX": {
                    "1": "no_change"
                }
            }
        },
        "FUN_08008854": {
            "entrypoint": "0x08008854",
            "current_name": "initialize_08008854",
            "code": "\nvoid initialize_08008854(void)\n\n{\n  status 0;\n}\n\n",
            "renaming": {
                "FUN_08008854": "initialize_08008854",
                "undefined4": "void",
                "return": "status"
            },
            "calling": [
                "FUN_0800a130"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008854": {
                    "1": "initialize_value",
                    "14": "initialize",
                    "4": "get_default_value",
                    "6": "initialize_application"
                },
                "undefined4": {
                    "1": "int",
                    "13": "void"
                },
                "return": {
                    "2": "status",
                    "1": "result"
                },
                "<original_variable_name>": {
                    "1": "<new_variable_name>"
                },
                "": {
                    "1": ""
                },
                "<original_variable_name_1>": {
                    "1": "status"
                },
                "<original_variable_name_2>": {
                    "1": "result"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                }
            }
        },
        "FUN_08008858": {
            "entrypoint": "0x08008858",
            "current_name": "initialize_08008858",
            "code": "\nvoid initialize_08008858(void)\n\n{\n  result 0;\n}\n\n",
            "renaming": {
                "FUN_08008858": "initialize_08008858",
                "undefined4": "void",
                "return": "result"
            },
            "calling": [
                "FUN_0800a168"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008858": {
                    "1": "initialize_value_to_zero",
                    "15": "initialize",
                    "5": "get_default_value",
                    "2": "initialize_program"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "undefined4": {
                    "1": "initialize_result",
                    "10": "void",
                    "5": "uint32_t"
                },
                "return": {
                    "1": "success"
                },
                "PTR_": {
                    "1": "unmodified_pointer"
                },
                "DAT_": {
                    "1": "unmodified_data"
                },
                "new_function_name": {
                    "1": "<more_descriptive_function_name>"
                },
                "new_parameter_name_1": {
                    "1": "<new_parameter_name_1>"
                },
                "new_parameter_name_2": {
                    "1": "<new_parameter_name_2>"
                },
                "new_variable_name_1": {
                    "1": "<new_variable_name_1>"
                },
                "new_variable_name_2": {
                    "1": "<new_variable_name_2>"
                }
            }
        },
        "FUN_0800885c": {
            "entrypoint": "0x0800885c",
            "current_name": "write_debug_message_0800885c",
            "code": "\nvoid write_debug_message_0800885c(undefined4 unused_param,undefined4 data,undefined4 length,undefined4 data_3)\n\n{\n  uart_debug_write(data,length,length,data_3,data_3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800885c": "write_debug_message_0800885c",
                "param_1": "unused_param",
                "param_2": "data",
                "param_3": "length",
                "param_4": "data_3"
            },
            "calling": [
                "FUN_0800a042"
            ],
            "called": [
                "FUN_08008500"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800885c": {
                    "1": "print_debug_message",
                    "4": "write_debug_info",
                    "15": "write_debug_message"
                },
                "param_1": {
                    "1": "unused_param_1",
                    "4": "param_1",
                    "13": "unused_param"
                },
                "param_2": {
                    "10": "data",
                    "1": "output_1",
                    "6": "message",
                    "5": "data_1"
                },
                "param_3": {
                    "1": "len",
                    "5": "data_2",
                    "7": "size",
                    "9": "length"
                },
                "param_4": {
                    "3": "param_4",
                    "2": "param4",
                    "1": "unknown_param",
                    "4": "unused",
                    "5": "unused_param"
                },
                "FUN_08008500": {
                    "1": "perform_operation",
                    "3": "process_data",
                    "4": "reverse_data"
                }
            }
        },
        "FUN_08008868": {
            "entrypoint": "0x08008868",
            "current_name": "infinite_loop_08008868",
            "code": "\nvoid infinite_loop_08008868(void)\n\n{\n  infinite_loop_08008868 {\n                    /* WARNING: Do nothing block with infinite loop */\n  } infinite_loop_08008868( true );\n}\n\n",
            "renaming": {
                "FUN_08008868": "infinite_loop_08008868",
                "do": "infinite_loop",
                "while": "infinite_loop"
            },
            "calling": [
                "FUN_08009b5c",
                "FUN_08008868"
            ],
            "called": [
                "FUN_08008868"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008868": {
                    "1": "loop",
                    "2": "run_infinite_loop",
                    "27": "infinite_loop"
                },
                "do": {
                    "1": "do",
                    "2": "infinite_loop"
                },
                "true": {
                    "1": "true"
                },
                "PTR_12345678": {
                    "1": "ptr1"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "original_variable_name_1": {
                    "1": "counter"
                },
                "original_variable_name_2": {
                    "1": "flag"
                },
                "while": {
                    "2": "infinite_loop"
                },
                "DAT_98765432": {
                    "1": "dat1"
                },
                "PTR_08008868": {
                    "1": "unused_ptr"
                },
                "Other variable(s)": {
                    "1": "unchanged"
                },
                "DAT_87654321": {
                    "1": "dat_87654321"
                },
                "PTR_xxxx": {
                    "1": "unchanged"
                },
                "DAT_xxxx": {
                    "1": "unchanged"
                }
            }
        },
        "FUN_0800886c": {
            "entrypoint": "0x0800886c",
            "current_name": "initialize_data_0800886c",
            "code": "\nvoid initialize_data_0800886c(void)\n\n{\n  DAT_20000a38 = 0x16;\n  return_value 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800886c": "initialize_data_0800886c",
                "undefined4": "void",
                "return": "return_value"
            },
            "calling": [
                "FUN_08009fe8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800886c": {
                    "1": "initialize_function",
                    "18": "initialize_data",
                    "4": "set_initial_value",
                    "6": "initialize_value"
                },
                "DAT_20000a38": {
                    "1": "data_counter",
                    "9": "initial_value",
                    "2": "value",
                    "16": "data_value"
                },
                "undefined4": {
                    "1": "void"
                },
                "return": {
                    "1": "return_value"
                }
            }
        },
        "FUN_0800887c": {
            "entrypoint": "0x0800887c",
            "current_name": "get_return_value_0800887c",
            "code": "\nstatus get_return_value_0800887c(void)\n\n{\n  result 1;\n}\n\n",
            "renaming": {
                "FUN_0800887c": "get_return_value_0800887c",
                "return": "result",
                "undefined4": "status"
            },
            "calling": [
                "FUN_0800a01c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800887c": {
                    "1": "get_status",
                    "2": "is_always_true",
                    "6": "get_return_value",
                    "4": "initialize"
                },
                "return": {
                    "1": "status",
                    "2": "return_value"
                },
                "undefined4": {
                    "1": "bool",
                    "2": "int",
                    "4": "void"
                },
                "<no parameters>": {
                    "1": ""
                },
                "<no variables>": {
                    "1": ""
                },
                "DAT_08008880": {
                    "1": "initialized_value"
                },
                "DAT_08008898": {
                    "1": "result"
                },
                "return_value": {
                    "1": "result"
                }
            }
        },
        "FUN_08008880": {
            "entrypoint": "0x08008880",
            "current_name": "extract_adc_value_08008880",
            "code": "\nuint extract_adc_value_08008880(uint input_value)\n\n{\n  bool is_less_than_threshold;\n  char read_value;\n  uint adc_value;\n  \n  if (input_value < 0xe) {\n    if (input_value + 0x2e < 0x3c) {\n      is_less_than_threshold = true;\n    }\n    else {\n      is_less_than_threshold = false;\n    }\n  }\n  else {\n    is_less_than_threshold = input_value < 0x3c;\n  }\n  if (is_less_than_threshold) {\n    if (input_value < 0xe) {\n      input_value = input_value + 0x2e;\n    }\n    read_value = (&DAT_0800a908)[input_value];\n  }\n  else {\n    read_value = -1;\n  }\n  if (read_value == -1) {\n    adc_value = 0;\n  }\n  else {\n    adc_value = read_adc_value();\n    if (DAT_20000088 != 0xc) {\n      if (DAT_20000088 < 0xc) {\n        return adc_value >> (0xc - DAT_20000088 & 0xff);\n      }\n      return adc_value << (DAT_20000088 - 0xc & 0xff);\n    }\n  }\n  return adc_value;\n}\n\n",
            "renaming": {
                "FUN_08008880": "extract_adc_value_08008880",
                "param_1": "input_value",
                "bVar1": "is_less_than_threshold",
                "cVar2": "read_value",
                "uVar3": "adc_value",
                "adc_read_value": "read_adc_value"
            },
            "calling": [
                "FUN_080022f8",
                "FUN_08000488"
            ],
            "called": [
                "FUN_08006d80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008880": {
                    "1": "read_and_adjust_adc_value",
                    "5": "get_adc_value",
                    "3": "decode_and_adjust_value",
                    "4": "read_adc_value",
                    "2": "calculate_adc_value"
                },
                "param_1": {
                    "2": "value",
                    "26": "input_value",
                    "1": "input_param"
                },
                "bVar1": {
                    "3": "is_less_than_3c",
                    "1": "is_below_threshold",
                    "5": "is_less_than_0x3c",
                    "2": "is_within_range"
                },
                "cVar2": {
                    "2": "adc_value",
                    "1": "character_result",
                    "4": "result",
                    "3": "character_value"
                },
                "uVar3": {
                    "2": "extracted_value",
                    "3": "result",
                    "1": "modified_value",
                    "5": "output_value",
                    "4": "adjusted_value",
                    "6": "adc_value"
                },
                "adc_read_value": {
                    "1": "read_adc_value"
                }
            }
        },
        "FUN_080088e0": {
            "entrypoint": "0x080088e0",
            "current_name": "configure_pin_080088e0",
            "code": "\nvoid configure_pin_080088e0(uint32_t pin_number,uint32_t value)\n\n{\n  int pin_configured;\n  int mapped_pin;\n  \n  if (pin_number < 0x3c) {\n    mapped_pin = (int)(char)(&DAT_0800a908)[pin_number];\n  }\n  else {\n    mapped_pin = -1;\n  }\n  if (mapped_pin != -1) {\n    pin_configured = is_pin_in_pinmap(mapped_pin,&DAT_0800a6cc);\n    if (pin_configured == 0) {\n      set_pin_mode(pin_number,1);\n      if (DAT_2000008c != 8) {\n        if (DAT_2000008c < 9) {\n          value = value << (8 - DAT_2000008c & 0xff);\n        }\n        else {\n          value = value >> (DAT_2000008c - 8 & 0xff);\n        }\n      }\n      if (value < 0x80) {\n        set_pin_value(pin_number,0);\n      }\n      else {\n        set_pin_value(pin_number,1);\n      }\n    }\n    else {\n      pin_configured = is_pin_configured(mapped_pin,&DAT_200006d8);\n      if (pin_configured == 0) {\n        set_pin_configured(mapped_pin,&DAT_200006d8);\n      }\n      if (DAT_2000008c != 8) {\n        if (DAT_2000008c < 9) {\n          value = value << (8 - DAT_2000008c & 0xff);\n        }\n        else {\n          value = value >> (DAT_2000008c - 8 & 0xff);\n        }\n      }\n      start_pwm(mapped_pin,0x3e418,0xff,value,pin_configured == 0);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080088e0": "configure_pin_080088e0",
                "param_1": "pin_number",
                "param_2": "value",
                "pin_in_pinmap": "is_pin_in_pinmap",
                "pinMode": "set_pin_mode",
                "digitalWrite": "set_pin_value",
                "pwm_start": "start_pwm",
                "iVar1": "pin_configured",
                "iVar2": "mapped_pin",
                "uint": "uint32_t"
            },
            "calling": [
                "FUN_0800021a",
                "FUN_080005f8"
            ],
            "called": [
                "FUN_0800738a",
                "FUN_08006b3e",
                "FUN_08007118",
                "FUN_08006b28",
                "FUN_08008a24",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080088e0": {
                    "1": "set_pin_mode_and_value",
                    "5": "initialize_pin",
                    "22": "configure_pin"
                },
                "param_1": {
                    "1": "pin",
                    "5": "pin_index",
                    "24": "pin_number"
                },
                "param_2": {
                    "1": "output_value",
                    "10": "pin_value",
                    "17": "value"
                },
                "DAT_0800a908": {
                    "1": "pin_to_pin_map"
                },
                "DAT_0800a6cc": {
                    "1": "pin_map_size"
                },
                "DAT_2000008c": {
                    "2": "bit_mode",
                    "1": "mode_bits"
                },
                "DAT_200006d8": {
                    "1": "pin_config",
                    "2": "configured_pins"
                },
                "pin_in_pinmap": {
                    "5": "is_pin_in_pinmap",
                    "1": "check_pin_in_pinmap",
                    "2": "is_pin_in_pin_map",
                    "3": "get_mapped_pin"
                },
                "pinMode": {
                    "20": "set_pin_mode"
                },
                "digitalWrite": {
                    "4": "write_digital",
                    "3": "write_digital_value",
                    "5": "set_pin_value",
                    "1": "write_pin_value"
                },
                "is_pin_configured": {
                    "13": "is_pin_configured",
                    "7": "check_pin_configured"
                },
                "set_pin_configured": {
                    "19": "set_pin_configured",
                    "1": "set_pin_as_configured"
                },
                "pwm_start": {
                    "20": "start_pwm"
                },
                "iVar1": {
                    "1": "pin_is_configured",
                    "2": "pin_config_result",
                    "11": "pin_configured",
                    "6": "pin_status"
                },
                "iVar2": {
                    "1": "pin_mode_value",
                    "7": "pin_index",
                    "11": "mapped_pin",
                    "3": "pin_map_value",
                    "2": "pin_mapping"
                },
                "FUN_0800738a": {
                    "1": "get_pin_index"
                },
                "FUN_08006b3e": {
                    "1": "update_pin_config"
                },
                "FUN_08007118": {
                    "1": "set_shift_amount"
                },
                "FUN_08006b28": {
                    "1": "shift_pin_value"
                },
                "FUN_08008a24": {
                    "1": "set_pwm_mode"
                },
                "FUN_08008990": {
                    "1": "start_pwm_with_config"
                },
                "param_3": {
                    "1": "pwm_prescaler"
                },
                "param_4": {
                    "1": "pwm_configuration"
                },
                "param_5": {
                    "1": "pin_configuration_value"
                },
                "DIGITAL_LOW": {
                    "2": "low"
                },
                "DIGITAL_HIGH": {
                    "2": "high"
                },
                "0x3c": {
                    "1": "pin_map_size"
                },
                "&DAT_0800a908": {
                    "1": "pin_map_array"
                },
                "&DAT_0800a6cc": {
                    "1": "pin_config_array"
                },
                "undefined4": {
                    "1": "uint32_t"
                },
                "char": {
                    "1": "char"
                },
                "uint": {
                    "1": "uint32_t"
                }
            }
        },
        "FUN_08008990": {
            "entrypoint": "0x08008990",
            "current_name": "configure_pin_08008990",
            "code": "\nvoid configure_pin_08008990(uint pin_number,undefined4 pin_mode,undefined4 param_3,undefined1 *pin_config)\n\n{\n  int pin_configured;\n  undefined1 *pin_array;\n  int pin_index;\n  \n  if (pin_number < 0x3c) {\n    pin_index = (int)(char)(&DAT_0800a908)[pin_number];\n    pin_array = &DAT_0800a908;\n  }\n  else {\n    pin_index = -1;\n    pin_array = pin_config;\n  }\n  if (pin_index != -1) {\n    pin_configured = is_pin_configured(pin_index,&DAT_200006d8,param_3,pin_array,pin_config);\n    if (pin_configured != 0) {\n      pin_configured = is_pin_in_pinmap(pin_index,&DAT_0800a6cc);\n      if (pin_configured != 0) {\n        stop_pwm(pin_index);\n      }\n      reset_pin_configuration(pin_index,&DAT_200006d8);\n    }\n    switch(pin_mode) {\n    case 0:\n      initialize_digital_io(pin_index,0);\n      break;\n    case 1:\n      initialize_digital_io(pin_index,1,0);\n      break;\n    case 2:\n      initialize_digital_io(pin_index,0,1);\n      break;\n    case 3:\n      initialize_digital_io(pin_index,0,2);\n    }\n    set_pin_configured(pin_index,&DAT_200006ec);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008990": "configure_pin_08008990",
                "param_1": "pin_number",
                "param_2": "pin_mode",
                "param_4": "pin_config",
                "iVar1": "pin_configured",
                "iVar3": "pin_index",
                "puVar2": "pin_array",
                "pin_in_pinmap": "is_pin_in_pinmap",
                "pwm_stop": "stop_pwm",
                "reset_pin_configured": "reset_pin_configuration",
                "digital_io_init": "initialize_digital_io"
            },
            "calling": [
                "FUN_080025ac",
                "FUN_08003002",
                "FUN_080088e0",
                "FUN_080005f8"
            ],
            "called": [
                "FUN_0800738a",
                "FUN_08006b3e",
                "FUN_08006b28",
                "FUN_080071e4",
                "FUN_08006b5c",
                "FUN_08007258"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008990": {
                    "1": "configure_pin_and_init",
                    "3": "configure_and_initialize_pin",
                    "5": "initialize_pin",
                    "15": "configure_pin",
                    "2": "configure_and_init_pin"
                },
                "param_1": {
                    "1": "pin_id",
                    "8": "pin_index",
                    "21": "pin_number"
                },
                "param_2": {
                    "1": "config_option",
                    "7": "io_mode",
                    "9": "pin_mode",
                    "6": "mode"
                },
                "param_3": {
                    "2": "param",
                    "4": "param3",
                    "1": "input_output",
                    "11": "param_3"
                },
                "param_4": {
                    "1": "parameter_4",
                    "5": "pin_map",
                    "8": "pin_config",
                    "4": "pin_data",
                    "2": "config_data"
                },
                "iVar1": {
                    "8": "is_configured",
                    "4": "pin_config_result",
                    "15": "pin_configured",
                    "3": "is_pin_configured_result",
                    "1": "pin_config_check"
                },
                "iVar3": {
                    "10": "pin_index",
                    "1": "pin_data_index",
                    "5": "pin_config_index",
                    "3": "pin_mapping"
                },
                "puVar2": {
                    "4": "pin_map",
                    "1": "pin_mappings",
                    "2": "pin_data_ptr",
                    "8": "pin_array",
                    "3": "pin_data",
                    "6": "pin_config_array"
                },
                "is_pin_configured": {
                    "4": "check_pin_configuration",
                    "1": "check_pin_config",
                    "2": "check_if_pin_configured"
                },
                "pin_in_pinmap": {
                    "3": "is_pin_in_pinmap",
                    "1": "check_if_pin_in_pinmap",
                    "2": "check_pin_in_pinmap"
                },
                "pwm_stop": {
                    "13": "stop_pwm"
                },
                "reset_pin_configured": {
                    "1": "reset_pin_configured_pin",
                    "2": "reset_pin_config",
                    "4": "reset_pin_configured",
                    "5": "reset_pin_configuration"
                },
                "digital_io_init": {
                    "1": "initialize_io",
                    "12": "initialize_digital_io"
                },
                "set_pin_configured": {
                    "2": "set_pin_config",
                    "6": "set_pin_configured",
                    "4": "set_pin_configuration"
                },
                "DAT_0800a908": {
                    "1": "pin_config_table"
                },
                "DAT_200006d8": {
                    "1": "pin_map_data2"
                },
                "DAT_0800a6cc": {
                    "1": "pinmap"
                },
                "DAT_200006ec": {
                    "1": "param_2_d"
                },
                "FUN_0800738a": {
                    "4": "is_pin_configured",
                    "1": "configure_pin"
                },
                "FUN_08006b3e": {
                    "1": "initialize_other",
                    "4": "pin_in_pinmap"
                },
                "FUN_08006b28": {
                    "4": "pwm_stop",
                    "1": "apply_other"
                },
                "FUN_080071e4": {
                    "4": "reset_pin_configured",
                    "1": "reset_other"
                },
                "FUN_08006b5c": {
                    "1": "update_other",
                    "4": "digital_io_init"
                },
                "FUN_08007258": {
                    "4": "set_pin_configured",
                    "1": "set_pin"
                },
                "&DAT_200006d8": {
                    "1": "pin_config_1"
                },
                "&DAT_0800a6cc": {
                    "1": "pin_map_2"
                },
                "&DAT_200006ec": {
                    "1": "pin_config_2"
                }
            }
        },
        "FUN_08008a24": {
            "entrypoint": "0x08008a24",
            "current_name": "configure_and_write_pin_08008a24",
            "code": "\nvoid configure_and_write_pin_08008a24(uint pin_index,undefined4 value,undefined4 param_3,undefined1 *pin_data)\n\n{\n  int is_configured;\n  undefined4 gpio_port;\n  undefined1 *pin_data;\n  uint pin_value;\n  \n  if (pin_index < 0x3c) {\n    pin_value = (uint)(char)(&DAT_0800a908)[pin_index];\n    pin_data = &DAT_0800a908;\n  }\n  else {\n    pin_value = 0xffffffff;\n    pin_data = pin_data;\n  }\n  if ((pin_value != 0xffffffff) &&\n     (is_configured = check_pin_configuration(pin_value,&DAT_200006ec,param_3,pin_data,pin_data), is_configured != 0)) {\n    gpio_port = get_gpio_port((pin_value << 0x18) >> 0x1c);\n    write_to_gpio(gpio_port,1 << (pin_value & 0xf) & 0xffff,value);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008a24": "configure_and_write_pin_08008a24",
                "param_1": "pin_index",
                "param_2": "value",
                "param_4": "pin_data",
                "uVar4": "pin_value",
                "puVar3": "pin_data",
                "iVar1": "is_configured",
                "uVar2": "gpio_port",
                "is_pin_configured": "check_pin_configuration",
                "get_GPIO_Port": "get_gpio_port",
                "digital_io_write": "write_to_gpio"
            },
            "calling": [
                "FUN_08002fca",
                "FUN_080088e0",
                "FUN_080005f8"
            ],
            "called": [
                "FUN_08006b28",
                "FUN_08006b7c",
                "FUN_080072d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008a24": {
                    "1": "pin_config_and_write",
                    "3": "configure_pin_and_write",
                    "5": "configure_pin",
                    "7": "configure_and_write_pin",
                    "4": "configure_and_write_gpio",
                    "2": "configure_gpio_pin"
                },
                "param_1": {
                    "1": "pin_id",
                    "23": "pin_index",
                    "7": "pin_number"
                },
                "param_2": {
                    "4": "output_value",
                    "3": "pin_state",
                    "16": "value",
                    "1": "output_state"
                },
                "param_3": {
                    "1": "unknown_param",
                    "8": "param3",
                    "2": "param",
                    "9": "param_3",
                    "3": "config_param"
                },
                "param_4": {
                    "1": "pin_port",
                    "4": "pin_config_array",
                    "2": "buffer",
                    "9": "pin_data"
                },
                "uVar4": {
                    "1": "pin_mapping",
                    "2": "pin_data_value",
                    "7": "pin_config",
                    "17": "pin_value"
                },
                "puVar3": {
                    "1": "pin_data_address",
                    "3": "pin_config_data",
                    "2": "pin_config_array",
                    "4": "pin_data"
                },
                "iVar1": {
                    "4": "pin_config_status",
                    "2": "pin_configuration_result",
                    "10": "is_configured",
                    "1": "config_result",
                    "6": "pin_configured",
                    "5": "is_pin_configured_result"
                },
                "uVar2": {
                    "1": "gpio_port_address",
                    "30": "gpio_port"
                },
                "FUN_08006b28": {
                    "1": "get_pin_config"
                },
                "FUN_08006b7c": {
                    "1": "initialize_gpio"
                },
                "FUN_080072d8": {
                    "1": "set_gpio_pin_output_mode"
                },
                "is_pin_configured": {
                    "1": "check_if_pin_configured",
                    "2": "check_pin_configuration"
                },
                "get_GPIO_Port": {
                    "1": "get_port_from_pin",
                    "2": "get_gpio_port"
                },
                "digital_io_write": {
                    "1": "write_gpio_pin",
                    "4": "write_to_gpio"
                }
            }
        },
        "FUN_08008a6c": {
            "entrypoint": "0x08008a6c",
            "current_name": "check_pin_status_08008a6c",
            "code": "\nchar check_pin_status_08008a6c(uint pin_number)\n\n{\n  char status;\n  int is_configured;\n  undefined4 gpio_port;\n  uint pin_value;\n  \n  if (pin_number < 0x3c) {\n    pin_value = (uint)(char)(&DAT_0800a908)[pin_number];\n  }\n  else {\n    pin_value = 0xffffffff;\n  }\n  if (pin_value == 0xffffffff) {\n    status = '\\0';\n  }\n  else {\n    is_configured = check_pin_configuration(pin_value,&DAT_200006ec);\n    if (is_configured == 0) {\n      status = '\\0';\n    }\n    else {\n      gpio_port = get_gpio_port((pin_value << 0x18) >> 0x1c);\n      status = read_digital_io(gpio_port,1 << (pin_value & 0xf) & 0xffff);\n    }\n  }\n  if (status != '\\0') {\n    status = '\\x01';\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08008a6c": "check_pin_status_08008a6c",
                "param_1": "pin_number",
                "cVar1": "status",
                "iVar2": "is_configured",
                "uVar3": "gpio_port",
                "uVar4": "pin_value",
                "is_pin_configured": "check_pin_configuration",
                "get_GPIO_Port": "get_gpio_port",
                "digital_io_read": "read_digital_io"
            },
            "calling": [
                "FUN_08000ef8"
            ],
            "called": [
                "FUN_080072f0",
                "FUN_08006b28",
                "FUN_08006b7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008a6c": {
                    "1": "check_configured_and_read_digital_io",
                    "10": "check_pin_status",
                    "6": "check_pin_state",
                    "2": "read_pin_status"
                },
                "param_1": {
                    "3": "pin_index",
                    "28": "pin_number"
                },
                "cVar1": {
                    "2": "pin_status",
                    "6": "is_configured",
                    "11": "status",
                    "1": "result",
                    "5": "pin_state"
                },
                "iVar2": {
                    "3": "pin_configured",
                    "21": "is_configured",
                    "1": "pin_status"
                },
                "uVar3": {
                    "1": "port",
                    "29": "gpio_port"
                },
                "uVar4": {
                    "3": "mapped_pin",
                    "1": "gpio_id",
                    "4": "pin_data",
                    "6": "pin_value",
                    "2": "pin_mapping"
                },
                "is_pin_configured": {
                    "5": "check_pin_configuration",
                    "1": "check_pin_configured"
                },
                "get_GPIO_Port": {
                    "1": "get_gpio_port_by_pin",
                    "8": "get_gpio_port"
                },
                "digital_io_read": {
                    "11": "read_digital_io",
                    "1": "digital_io_read"
                },
                "char": {
                    "1": "char"
                }
            }
        },
        "FUN_08008abc": {
            "entrypoint": "0x08008abc",
            "current_name": "get_current_millisecond_08008abc",
            "code": "\nvoid get_current_millisecond_08008abc(void)\n\n{\n  get_current_milli();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008abc": "get_current_millisecond_08008abc",
                "GetCurrentMilli": "get_current_milli"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [
                "FUN_0800723c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008abc": {
                    "1": "get_current_time_milliseconds",
                    "9": "get_current_milliseconds",
                    "4": "get_current_milli",
                    "10": "get_current_millisecond"
                },
                "FUN_0800723c": {
                    "1": "calculate_something",
                    "3": "sub_function",
                    "8": "initialize_system",
                    "2": "update_data"
                },
                "GetCurrentMilli": {
                    "1": "get_current_milli"
                }
            }
        },
        "FUN_08008ac4": {
            "entrypoint": "0x08008ac4",
            "current_name": "FUNC_08008ac4",
            "code": "\nvoid FUNC_08008ac4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008ac4": "FUNC_08008ac4"
            },
            "calling": [
                "FUN_08003002",
                "FUN_08002fca"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008afa": {
            "entrypoint": "0x08008afa",
            "current_name": "calculate_checksum_08008afa",
            "code": "\nuvalue calculate_checksum_08008afa(int input_value)\n\n{\n  return (*(value *)(input_value + 0x134) + 0x40) - *(value *)(input_value + 0x136) & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_08008afa": "calculate_checksum_08008afa",
                "param_1": "input_value",
                "short": "value"
            },
            "calling": [
                "FUN_08008bf4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008afa": {
                    "1": "calculate_modified_value",
                    "6": "calculate_result",
                    "2": "calculate_difference",
                    "9": "calculate_checksum"
                },
                "param_1": {
                    "3": "input_address",
                    "1": "offset",
                    "12": "input_value",
                    "5": "base_address",
                    "2": "memory_address"
                },
                "short": {
                    "1": "value"
                },
                "0x134": {
                    "3": "first_offset",
                    "1": "offset_a",
                    "4": "offset1"
                },
                "0x136": {
                    "3": "second_offset",
                    "1": "texture_offset_2",
                    "4": "offset2"
                },
                "*(short *)(param_1 + 0x134)": {
                    "7": "first_value",
                    "1": "offset_1",
                    "3": "value1",
                    "2": "value_at_offset_0x134"
                },
                "*(short *)(param_1 + 0x136)": {
                    "1": "value_2",
                    "7": "second_value",
                    "2": "value_at_offset_0x136",
                    "3": "value2"
                },
                "0x40": {
                    "1": "const1",
                    "2": "constant_offset"
                },
                "0x3f": {
                    "1": "constant2"
                },
                "param_1 + 0x134": {
                    "1": "address1"
                },
                "param_1 + 0x136": {
                    "1": "buffer2"
                },
                "*((short *)(param_1 + 0x134) + 0x40)": {
                    "1": "value_at_address1_plus_0x40"
                },
                "*((short *)(param_1 + 0x136))": {
                    "1": "value_at_address2"
                },
                "(value_at_address1_plus_0x40 - value_at_address2) & 0x3f": {
                    "1": "result"
                },
                "param_2": {
                    "1": "data_address"
                },
                "param_3": {
                    "1": "data_offset"
                },
                "param_4": {
                    "1": "shift_value"
                },
                "param_5": {
                    "1": "mask_value"
                },
                "temp_1": {
                    "1": "start_value_offset"
                },
                "temp_2": {
                    "1": "end_value_offset"
                }
            }
        },
        "FUN_08008b66": {
            "entrypoint": "0x08008b66",
            "current_name": "process_uart_input_08008b66",
            "code": "\nvoid process_uart_input_08008b66(int uart_device)\n\n{\n  int input_result;\n  ushort next_index;\n  undefined received_byte;\n  \n  input_result = uart_getc(uart_device,&received_byte);\n  if ((input_result == 0) &&\n     (next_index = *(short *)(uart_device + 0x60) + 1U & 0x3f, next_index != *(ushort *)(uart_device + 0x62))) {\n    *(undefined *)(*(int *)(uart_device + 0x5c) + (uint)*(ushort *)(uart_device + 0x60)) = received_byte;\n    *(ushort *)(uart_device + 0x60) = next_index;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008b66": "process_uart_input_08008b66",
                "param_1": "uart_device",
                "iVar1": "input_result",
                "uVar2": "next_index",
                "local_9": "received_byte"
            },
            "calling": [],
            "called": [
                "FUN_08008600"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008b66": {
                    "4": "process_input",
                    "15": "process_uart_input",
                    "1": "store_received_character"
                },
                "param_1": {
                    "7": "uart_handle",
                    "16": "uart_device",
                    "1": "device_id"
                },
                "iVar1": {
                    "1": "uart_read_result",
                    "2": "received_byte",
                    "3": "status",
                    "5": "input_result"
                },
                "uVar2": {
                    "1": "current_offset",
                    "2": "current_position",
                    "9": "next_index",
                    "6": "new_index",
                    "7": "current_index"
                },
                "local_9": {
                    "1": "data_byte",
                    "6": "received_data",
                    "13": "received_byte",
                    "2": "input_data"
                },
                "param_2": {
                    "1": "buffer"
                },
                "param_3": {
                    "1": "size"
                },
                "param_4": {
                    "1": "timeout"
                },
                "PTR_": {
                    "1": "unchanged"
                },
                "DAT_": {
                    "1": "unchanged"
                }
            }
        },
        "FUN_08008bf4": {
            "entrypoint": "0x08008bf4",
            "current_name": "FUNC_08008bf4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08008bfa) */\n/* WARNING: Removing unreachable block (ram,0x08008c0c) */\n/* WARNING: Removing unreachable block (ram,0x08008c02) */\n/* WARNING: Removing unreachable block (ram,0x08008c14) */\n\nvoid FUNC_08008bf4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008bf4": "FUNC_08008bf4"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [
                "FUN_08008afa"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008c20": {
            "entrypoint": "0x08008c20",
            "current_name": "initialize_data_08008c20",
            "code": "\nvoid initialize_data_08008c20(int base_address)\n\n{\n  *(int *)(base_address + 0x130) = base_address + 0x11;\n  *(undefined2 *)(base_address + 0x134) = 0;\n  *(undefined2 *)(base_address + 0x136) = 0;\n  *(int *)(base_address + 0x138) = base_address + 0x51;\n  *(undefined2 *)(base_address + 0x13c) = 0;\n  *(undefined2 *)(base_address + 0x13e) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008c20": "initialize_data_08008c20",
                "param_1": "base_address"
            },
            "calling": [
                "FUN_08008d30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008c20": {
                    "1": "initialize_structure",
                    "2": "initialize_memory",
                    "4": "initialize_function",
                    "5": "initialize_parameters",
                    "8": "initialize_data"
                },
                "param_1": {
                    "1": "param",
                    "2": "data_pointer",
                    "15": "base_address"
                },
                "param_1 + 0x130": {
                    "1": "structure_ptr->field1"
                },
                "param_1 + 0x11": {
                    "1": "data_offset"
                },
                "param_1 + 0x138": {
                    "1": "parameter4_address"
                },
                "param_1 + 0x51": {
                    "1": "src_ptr2"
                },
                "param_1 + 0x134": {
                    "1": "data_offset2"
                },
                "param_1 + 0x136": {
                    "1": "data.value2"
                },
                "param_1 + 0x13c": {
                    "1": "third_value_ptr"
                },
                "param_1 + 0x13e": {
                    "1": "structure_ptr->field6"
                },
                "dataPointer + 0x130": {
                    "1": "mem_address1"
                },
                "dataPointer + 0x134": {
                    "1": "mem_value1"
                },
                "dataPointer + 0x136": {
                    "1": "mem_value2"
                },
                "dataPointer + 0x138": {
                    "1": "mem_address2"
                },
                "dataPointer + 0x13c": {
                    "1": "mem_value3"
                },
                "dataPointer + 0x13e": {
                    "1": "mem_value4"
                },
                "*(int *)(param_1 + 0x130)": {
                    "1": "data_pointer1"
                },
                "*(int *)(param_1 + 0x138)": {
                    "1": "data_offset2"
                },
                "*(undefined2 *)(param_1 + 0x134)": {
                    "1": "data_value1"
                },
                "*(undefined2 *)(param_1 + 0x136)": {
                    "1": "flag2"
                },
                "*(undefined2 *)(param_1 + 0x13c)": {
                    "1": "data5"
                },
                "*(undefined2 *)(param_1 + 0x13e)": {
                    "1": "value_d"
                },
                "param_2": {
                    "1": "new_value"
                },
                "param_3": {
                    "1": "new_value"
                },
                "PTR_08008d38": {
                    "1": "offset1"
                },
                "PTR_08008d3c": {
                    "1": "offset2"
                },
                "PTR_08008d40": {
                    "1": "offset3"
                },
                "0x130": {
                    "1": "param_offset_1",
                    "3": "offset1"
                },
                "0x138": {
                    "1": "offset2",
                    "2": "offset4"
                },
                "0x11": {
                    "1": "param_offset_increment",
                    "2": "value1"
                },
                "0x51": {
                    "1": "constant2",
                    "2": "value2"
                },
                "0x134": {
                    "1": "param_offset_2",
                    "2": "offset2"
                },
                "0x136": {
                    "2": "offset3",
                    "1": "param_offset_3"
                },
                "0x13c": {
                    "1": "param_offset_5",
                    "2": "offset5"
                },
                "0x13e": {
                    "2": "offset6",
                    "1": "param_offset_6"
                }
            }
        },
        "FUN_08008c44": {
            "entrypoint": "0x08008c44",
            "current_name": "initialize_serial_08008c44",
            "code": "\nvoid initialize_serial_08008c44(int serial_port,undefined4 baud_rate,serial_data_config configuration)\n\n{\n  uint data_bits;\n  serial_data_config config_bits;\n  int config_value;\n  code *jump_table;\n  \n  *(undefined4 *)(serial_port + 0x11c) = baud_rate;\n  *(serial_data_config *)(serial_port + 0x140) = configuration;\n  config_bits = configuration & 7;\n  if (config_bits == 4) {\n    config_value = 7;\n  }\n  else if (config_bits == 6) {\n    config_value = 8;\n  }\n  else if (config_bits == 2) {\n    config_value = 6;\n  }\n  else {\n    config_value = 0;\n  }\n  if ((configuration & 0x30) == 0x30) {\n    *(undefined4 *)(serial_port + 0x128) = 0x600;\n    config_value = config_value + 1;\n  }\n  else if ((configuration & 0x20) == 0) {\n    *(undefined4 *)(serial_port + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(serial_port + 0x128) = 0x400;\n    config_value = config_value + 1;\n  }\n  if ((configuration & 8) == 0) {\n    *(undefined4 *)(serial_port + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(serial_port + 0x124) = 0x2000;\n  }\n  if (config_value == 8) {\n    *(undefined4 *)(serial_port + 0x120) = 0;\n  }\n  else if (config_value == 9) {\n    *(undefined4 *)(serial_port + 0x120) = 0x1000;\n  }\n  else {\n    config_value = 0;\n  }\n  if (config_value != 0) {\n    initialize_uart(serial_port + 0xd4);\n    attach_rx_callback(serial_port + 0xd4,0x8008b67);\n    return;\n  }\n  jump_table = (code *)0x8008cee;\n  assert_function(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n                ,299,\"void HardwareSerial::begin(long unsigned int, serial_data_config)\",\"databits!=0\");\n  if (data_bits < 0x3c) {\n    ram_value = (&DAT_0800a908)[data_bits];\n  }\n  else {\n    ram_value = 0xff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08008d0c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(0,data_bits,&stack0x00000148);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008c44": "initialize_serial_08008c44",
                "param_1": "serial_port",
                "param_2": "baud_rate",
                "param_3": "configuration",
                "extraout_r1": "data_bits",
                "bVar1": "config_bits",
                "iVar2": "config_value",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "uart_init": "initialize_uart",
                "uart_attach_rx_callback": "attach_rx_callback",
                "__assert_func": "assert_function",
                "uRam0000012d": "ram_value",
                "byte": "serial_data_config"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "FUN_08008078",
                "FUN_0800863c",
                "FUN_080090cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008c44": {
                    "1": "setup_hardware_serial",
                    "4": "initialize_serial_port",
                    "3": "configure_serial_port",
                    "7": "initialize_serial_communication",
                    "2": "configure_hardware_serial",
                    "5": "initialize_uart"
                },
                "param_1": {
                    "8": "serial_port_address",
                    "1": "uart_instance",
                    "2": "base_address",
                    "16": "serial_port"
                },
                "param_2": {
                    "1": "param2",
                    "30": "baud_rate"
                },
                "param_3": {
                    "1": "config_bits",
                    "5": "config",
                    "8": "configuration",
                    "3": "config_flags"
                },
                "extraout_r1": {
                    "1": "result",
                    "3": "data_bits",
                    "2": "serial_config_bits"
                },
                "bVar1": {
                    "1": "configuration_flag",
                    "6": "config_mask",
                    "2": "serial_config_masked",
                    "7": "config_bits"
                },
                "iVar2": {
                    "1": "configuration_index",
                    "2": "stop_bits",
                    "3": "config_option",
                    "7": "config_value"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "1": "error_handler_function",
                    "14": "jump_table",
                    "3": "jumptable",
                    "5": "jump_table_address"
                },
                "FUN_08008078": {
                    "1": "initialize_uart_settings"
                },
                "FUN_0800863c": {
                    "1": "configure_uart"
                },
                "FUN_080090cc": {
                    "1": "assert_struct_data"
                },
                "uart_init": {
                    "6": "initialize_uart"
                },
                "uart_attach_rx_callback": {
                    "6": "attach_rx_callback"
                },
                "__assert_func": {
                    "3": "assert_function",
                    "1": "check_assertion"
                },
                "uRam0000012d": {
                    "1": "jumptable_value",
                    "2": "ram_value"
                },
                "DAT_0800a908": {
                    "1": "data_table"
                },
                "&DAT_0800a908": {
                    "1": "data_table_pointer"
                },
                "0x8008cee": {
                    "1": "jump_table_address"
                },
                "byte": {
                    "1": "serial_data_config"
                }
            }
        },
        "FUN_08008d00": {
            "entrypoint": "0x08008d00",
            "current_name": "set_byte_value_08008d00",
            "code": "\nvoid set_byte_value_08008d00(int address,uint value)\n\n{\n  undefined value;\n  code *jump_table;\n  \n  if (value < 0x3c) {\n    value = (&DAT_0800a908)[value];\n  }\n  else {\n    value = 0xff;\n  }\n  *(undefined *)(address + 0x12d) = value;\n                    /* WARNING: Could not recover jumptable at 0x08008d0c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d00": "set_byte_value_08008d00",
                "param_1": "address",
                "param_2": "value",
                "uVar1": "value",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "calling": [
                "FUN_08008d30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008d00": {
                    "1": "set_pixel_color",
                    "7": "set_byte_value",
                    "2": "update_value",
                    "3": "set_default_value"
                },
                "param_1": {
                    "11": "address",
                    "1": "memory_offset",
                    "6": "memory_address"
                },
                "param_2": {
                    "1": "threshold_index",
                    "2": "parameter_index",
                    "11": "value",
                    "10": "index",
                    "3": "value_index"
                },
                "uVar1": {
                    "2": "new_value",
                    "1": "parameter_value",
                    "5": "default_value",
                    "6": "byte_value",
                    "3": "updated_value"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "1": "jump_function",
                    "9": "jump_table"
                }
            }
        },
        "FUN_08008d18": {
            "entrypoint": "0x08008d18",
            "current_name": "set_byte_value_08008d18",
            "code": "\nvoid set_byte_value_08008d18(int base_address,uint index)\n\n{\n  undefined value;\n  \n  if (index < 0x3c) {\n    value = (&DAT_0800a908)[index];\n  }\n  else {\n    value = 0xff;\n  }\n  *(undefined *)(base_address + 300) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d18": "set_byte_value_08008d18",
                "param_1": "base_address",
                "param_2": "index",
                "uVar1": "value"
            },
            "calling": [
                "FUN_08008d30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008d18": {
                    "2": "set_threshold_value",
                    "1": "update_value_in_memory",
                    "3": "set_byte_based_on_index",
                    "7": "set_byte_value"
                },
                "param_1": {
                    "6": "address",
                    "1": "array_address",
                    "11": "base_address",
                    "5": "target_address",
                    "4": "memory_address"
                },
                "param_2": {
                    "1": "threshold_index",
                    "2": "value",
                    "22": "index",
                    "3": "value_index"
                },
                "uVar1": {
                    "2": "threshold_value",
                    "4": "byte_value",
                    "9": "value",
                    "1": "color"
                },
                "*(undefined *)(param_1 + 300)": {
                    "1": "pixel_color"
                }
            }
        },
        "FUN_08008d30": {
            "entrypoint": "0x08008d30",
            "current_name": "initialize_device_08008d30",
            "code": "\nundefined4 *\ninitialize_device_08008d30(undefined4 *device,undefined4 pin,undefined4 rx_config,undefined4 tx_config)\n\n{\n  undefined pin_value;\n  \n  config[1] = 0;\n  config[2] = 1000;\n  *device = &PTR_LAB_08008ba4_1_0800aab8;\n  if (device == (undefined4 *)&DAT_20000700) {\n    set_receiver(&DAT_20000700,0,rx_config,&DAT_20000700,tx_config);\n    set_transmitter(&DAT_20000700,1);\n  }\n  else {\n    pin_value = get_pin_mapping(pin,&DAT_0800a81c);\n    *(undefined *)((int)device + 0x12d) = pin_value;\n    pin_value = get_pin_mapping(pin,&DAT_0800a864);\n    *(undefined *)(device + 0x4b) = pin_value;\n  }\n  initialize(device);\n  return device;\n}\n\n",
            "renaming": {
                "FUN_08008d30": "initialize_device_08008d30",
                "param_1": "device",
                "param_2": "pin",
                "param_3": "rx_config",
                "param_4": "tx_config",
                "uVar1": "pin_value",
                "setRx": "set_receiver",
                "setTx": "set_transmitter",
                "pinmap_pin": "get_pin_mapping",
                "init": "initialize",
                "param_1[1]": "config[1]",
                "param_1[2]": "config[2]"
            },
            "calling": [
                "FUN_08008d8c"
            ],
            "called": [
                "FUN_08008d00",
                "FUN_08008c20",
                "FUN_08008d18",
                "FUN_0800734a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008d30": {
                    "1": "configure_peripheral",
                    "15": "initialize_device",
                    "9": "initialize_communication"
                },
                "param_1": {
                    "1": "communication_settings",
                    "3": "communication_data",
                    "9": "device",
                    "4": "communication_params"
                },
                "param_2": {
                    "12": "pin_number",
                    "1": "pin_no",
                    "2": "pin_config",
                    "14": "pin"
                },
                "param_3": {
                    "9": "rx_config",
                    "2": "param3",
                    "1": "tx_mode",
                    "5": "value1",
                    "3": "rx_data"
                },
                "param_4": {
                    "1": "rx_mode",
                    "2": "tx_param",
                    "9": "tx_config",
                    "3": "tx_data",
                    "5": "value2"
                },
                "uVar1": {
                    "1": "pin_mapping_result",
                    "3": "pin_result",
                    "13": "pin_value"
                },
                "setRx": {
                    "1": "set_receive_config",
                    "3": "set_receiver"
                },
                "setTx": {
                    "1": "set_transmit",
                    "3": "set_transmitter"
                },
                "pinmap_pin": {
                    "1": "get_pin",
                    "3": "get_pin_mapping",
                    "2": "find_pin"
                },
                "init": {
                    "1": "perform_initialization",
                    "8": "initialize"
                },
                "FUN_08008d00": {
                    "1": "configure_interface",
                    "5": "set_rx",
                    "2": "configure_receiver"
                },
                "FUN_08008c20": {
                    "1": "configure_pin2",
                    "4": "set_tx",
                    "2": "reset"
                },
                "FUN_08008d18": {
                    "1": "configure_alternate_pin",
                    "2": "configure_transmitter",
                    "4": "pinmap_pin"
                },
                "FUN_0800734a": {
                    "4": "init",
                    "1": "pinmap_pin"
                },
                "*param_1": {
                    "1": "communication_interface"
                },
                "param_1[1]": {
                    "1": "property1"
                },
                "param_1[2]": {
                    "1": "config[2]"
                },
                "&PTR_LAB_08008ba4_1_0800aab8": {
                    "1": "device.default_ptr"
                },
                "&DAT_20000700": {
                    "1": "rx_pin"
                },
                "&DAT_0800a81c": {
                    "1": "pinmap1_data"
                },
                "&DAT_0800a864": {
                    "1": "tx_pin_map"
                },
                "*(undefined *)((int)param_1 + 0x12d)": {
                    "1": "device.pin_a"
                },
                "*(undefined *)(param_1 + 0x4b)": {
                    "1": "config[0x4b]"
                },
                "PTR_LAB_08008ba4_1_0800aab8": {
                    "1": "default_ptr"
                },
                "(int)param_1 + 0x12d": {
                    "1": "property3"
                },
                "param_1 + 0x4b": {
                    "1": "property4"
                },
                "ptr_LAB_08008ba4_1_0800aab8": {
                    "1": "default_pointer"
                },
                "DAT_20000700": {
                    "1": "communication_data"
                },
                "&DAT_20000700,0,param_3,&DAT_20000700,param_4": {
                    "1": "rx_settings"
                },
                "<original_function_name>": {
                    "1": "initialize_communication"
                },
                "<param_1>": {
                    "1": "comm_params"
                },
                "<param_2>": {
                    "1": "pin_param"
                },
                "<param_3>": {
                    "1": "rx_param"
                },
                "<param_4>": {
                    "1": "tx_param"
                },
                "<uVar1>": {
                    "1": "pin_value"
                },
                "DAT_0800a81c": {
                    "1": "rx_pin_mapping"
                },
                "DAT_0800a864": {
                    "1": "tx_pin_mapping"
                }
            }
        },
        "FUN_08008d8c": {
            "entrypoint": "0x08008d8c",
            "current_name": "initialize_hardware_serial_08008d8c",
            "code": "\nvoid initialize_hardware_serial_08008d8c(int status,int value,undefined4 param1,undefined4 param2)\n\n{\n  if (status != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    configure_serial_port(&DAT_20000700,0x40004400,param1,0xffff,param2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d8c": "initialize_hardware_serial_08008d8c",
                "param_1": "status",
                "param_2": "value",
                "param_3": "param1",
                "param_4": "param2",
                "HardwareSerial": "configure_serial_port"
            },
            "calling": [],
            "called": [
                "FUN_08008d30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008d8c": {
                    "2": "initialize_serial_connection",
                    "4": "initialize_serial_port",
                    "1": "handle_serial_communication",
                    "10": "initialize_serial_communication",
                    "12": "initialize_hardware_serial"
                },
                "param_1": {
                    "5": "flag",
                    "1": "port_number",
                    "2": "mode",
                    "9": "status"
                },
                "param_2": {
                    "2": "param_2",
                    "1": "hardware_id",
                    "17": "value"
                },
                "param_3": {
                    "2": "param_a",
                    "1": "unknown_param",
                    "4": "param_3",
                    "3": "config1",
                    "5": "param1"
                },
                "param_4": {
                    "1": "value2",
                    "5": "param2",
                    "4": "param_4",
                    "2": "param_b",
                    "3": "config2"
                },
                "HardwareSerial": {
                    "1": "create_serial_port"
                },
                "FUN_08008d30": {
                    "1": "process_serial_data"
                }
            }
        },
        "FUN_08008df8": {
            "entrypoint": "0x08008df8",
            "current_name": "initialize_data_08008df8",
            "code": "\nvoid initialize_data_08008df8(undefined4 *data_pointer,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *data_pointer = &DAT_0800ab0c;\n  *(undefined *)(data_pointer + 1) = value1;\n  *(undefined *)((int)data_pointer + 5) = value2;\n  *(undefined *)((int)data_pointer + 6) = value3;\n  *(undefined *)((int)data_pointer + 7) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008df8": "initialize_data_08008df8",
                "param_1": "data_pointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_08008e14"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008df8": {
                    "1": "initialize_buffer",
                    "22": "initialize_data",
                    "4": "set_data",
                    "2": "initialize_function"
                },
                "param_1": {
                    "2": "output_pointer",
                    "1": "buffer",
                    "3": "output_data",
                    "15": "data_pointer",
                    "4": "output"
                },
                "param_2": {
                    "3": "value_1",
                    "1": "input_value1",
                    "24": "value1"
                },
                "param_3": {
                    "1": "parameter2",
                    "3": "value_2",
                    "24": "value2"
                },
                "param_4": {
                    "1": "input_value3",
                    "24": "value3",
                    "3": "value_3"
                },
                "param_5": {
                    "1": "input4",
                    "3": "value_4",
                    "24": "value4"
                }
            }
        },
        "FUN_08008e14": {
            "entrypoint": "0x08008e14",
            "current_name": "initialize_ip_address_08008e14",
            "code": "\nvoid initialize_ip_address_08008e14(int flag,int value)\n\n{\n  if ((flag == 1) && (value == 0xffff)) {\n    set_ip_address(&DAT_20000844,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008e14": "initialize_ip_address_08008e14",
                "param_1": "flag",
                "param_2": "value",
                "IPAddress": "set_ip_address"
            },
            "calling": [],
            "called": [
                "FUN_08008df8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008e14": {
                    "26": "initialize_ip_address",
                    "1": "initialize_ip_address_if_needed"
                },
                "param_1": {
                    "8": "flag",
                    "2": "value1",
                    "1": "input_value1",
                    "3": "condition1",
                    "6": "status"
                },
                "param_2": {
                    "1": "network_port",
                    "3": "condition2",
                    "15": "value",
                    "2": "flag2"
                },
                "DAT_20000844": {
                    "1": "ip_address_data",
                    "7": "ip_address"
                },
                "IPAddress": {
                    "4": "set_ip_address",
                    "1": "set_ip"
                },
                "FUN_08008df8": {
                    "1": "ip_address"
                },
                "param_3": {
                    "1": "param3"
                },
                "param_4": {
                    "1": "param4"
                }
            }
        },
        "FUN_08008ef4": {
            "entrypoint": "0x08008ef4",
            "current_name": "calculate_new_value_08008ef4",
            "code": "\nint calculate_new_value_08008ef4(int start_value,int previous_value,int final_value,int initial_value,int final_value)\n\n{\n  interpolated_value (unsigned_integer)((final_value - initial_value) * (start_value - previous_value)) / (unsigned_integer)(final_value - previous_value) + initial_value;\n}\n\n",
            "renaming": {
                "FUN_08008ef4": "calculate_new_value_08008ef4",
                "param_1": "start_value",
                "param_2": "previous_value",
                "param_4": "initial_value",
                "param_5": "final_value",
                "param_3": "final_value",
                "uint": "unsigned_integer",
                "return": "interpolated_value"
            },
            "calling": [
                "FUN_080026b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008ef4": {
                    "1": "calculate_range",
                    "10": "calculate_new_value",
                    "3": "calculate_result",
                    "2": "calculate_weighted_average"
                },
                "param_1": {
                    "2": "value1",
                    "1": "start_value_range_1",
                    "3": "previous_value",
                    "4": "initial_value",
                    "7": "start_value"
                },
                "param_2": {
                    "2": "current_value",
                    "1": "variable2",
                    "3": "previous_value"
                },
                "param_4": {
                    "1": "offset",
                    "2": "min_value",
                    "3": "initial_value"
                },
                "param_5": {
                    "4": "final_value",
                    "1": "max_output",
                    "2": "offset_value2"
                },
                "param_3": {
                    "1": "third_parameter",
                    "4": "end_value",
                    "2": "value3"
                },
                "param_6": {
                    "1": "temp_value1"
                },
                "param_7": {
                    "1": "temp_value2"
                },
                "temp_value1": {
                    "1": "difference1"
                },
                "temp_value2": {
                    "1": "difference2"
                },
                "uint": {
                    "1": "unsigned_integer"
                },
                "return": {
                    "1": "interpolated_value"
                },
                "start_value": {
                    "1": "new_start_value"
                },
                "end_value": {
                    "1": "new_end_value"
                },
                "max_value": {
                    "1": "new_max_value"
                },
                "min_value": {
                    "1": "new_min_value"
                },
                "value": {
                    "1": "new_value"
                },
                "param_1 - param_2": {
                    "1": "value_difference_1"
                },
                "param_3 - param_2": {
                    "1": "value_difference_2"
                },
                "param_5 - param_4": {
                    "1": "value_difference_3"
                }
            }
        },
        "FUN_08008f0c": {
            "entrypoint": "0x08008f0c",
            "current_name": "FUNC_08008f0c",
            "code": "\nvoid FUNC_08008f0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f0c": "FUNC_08008f0c"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008f0e": {
            "entrypoint": "0x08008f0e",
            "current_name": "initialize_system_08008f0e",
            "code": "\nvoid initialize_system_08008f0e(void)\n\n{\n  HAL_NVIC_SetPriorityGrouping(3);\n  initialize_hardware_configuration();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f0e": "initialize_system_08008f0e",
                "initialize_hardware_configuration_080036a2": "initialize_hardware_configuration"
            },
            "calling": [
                "FUN_08009148"
            ],
            "called": [
                "FUN_08003f0c",
                "FUN_080036a2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008f0e": {
                    "2": "configure_hardware",
                    "17": "initialize_system",
                    "11": "initialize_hardware",
                    "1": "initialize_device"
                },
                "update_register_value_08003f0c": {
                    "1": "update_register",
                    "28": "update_register_value"
                },
                "initialize_hardware_configuration_080036a2": {
                    "8": "configure_hardware",
                    "19": "initialize_hardware_configuration",
                    "1": "hardware_configuration"
                },
                "input_value": {
                    "1": "input_value",
                    "13": "value",
                    "2": "register_value"
                },
                "uint input_value": {
                    "1": "value"
                }
            }
        },
        "FUN_08008f1c": {
            "entrypoint": "0x08008f1c",
            "current_name": "main_loop_08008f1c",
            "code": "\nvoid main_loop_08008f1c(void)\n\n{\n  initialize_variant();\n  initialize_components();\n  do {\n    execute_loop();\n    handle_serial_event();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08008f1c": "main_loop_08008f1c",
                "initVariant": "initialize_variant",
                "setup": "initialize_components",
                "loop": "execute_loop",
                "serialEventRun": "handle_serial_event"
            },
            "calling": [
                "FUN_08003658"
            ],
            "called": [
                "FUN_08008f0c",
                "FUN_080022f8",
                "FUN_08008bf4",
                "FUN_08001b48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008f1c": {
                    "1": "run_program_forever",
                    "5": "initialize_and_run",
                    "4": "run_program",
                    "2": "run_main_program",
                    "3": "initialize_and_run_loop",
                    "8": "main_loop"
                },
                "initVariant": {
                    "1": "initialize_variant"
                },
                "setup": {
                    "1": "initialize_components"
                },
                "loop": {
                    "1": "execute_loop"
                },
                "serialEventRun": {
                    "1": "handle_serial_event"
                },
                "FUNC_08008bf4": {
                    "2": "init_variant",
                    "1": "main_loop",
                    "27": "loop"
                },
                "FUN_08001b48": {
                    "7": "handle_serial_event",
                    "1": "reverse_something",
                    "10": "serial_event_run"
                },
                "FUNC_08008f0c": {
                    "26": "init_variant",
                    "1": "initialize_variant"
                },
                "FUN_080022f8": {
                    "1": "loop",
                    "27": "setup"
                },
                "FUNC_08001b48": {
                    "1": "loop"
                }
            }
        },
        "FUN_08008f3c": {
            "entrypoint": "0x08008f3c",
            "current_name": "count_set_bits_08008f3c",
            "code": "\nchar count_set_bits_08008f3c(uint number)\n\n{\n  char bit_count;\n  \n  bit_count = '\\0';\n  for (; number != 1; number = number >> 1) {\n    bit_count = bit_count + '\\x01';\n  }\n  return bit_count;\n}\n\n",
            "renaming": {
                "FUN_08008f3c": "count_set_bits_08008f3c",
                "param_1": "number",
                "cVar1": "bit_count"
            },
            "calling": [
                "FUN_08009094"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008f3c": {
                    "1": "get_bit_count",
                    "3": "count_bits",
                    "20": "count_set_bits"
                },
                "param_1": {
                    "4": "input",
                    "2": "input_num",
                    "1": "length",
                    "3": "input_number",
                    "8": "num",
                    "11": "number"
                },
                "cVar1": {
                    "2": "bit_position",
                    "1": "length",
                    "25": "bit_count"
                }
            }
        },
        "FUN_08008f78": {
            "entrypoint": "0x08008f78",
            "current_name": "initialize_data_08008f78",
            "code": "\nvoid initialize_data_08008f78(int flag,int value,undefined4 unused1,undefined4 unused2)\n\n{\n  if (flag != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    DAT_2000084c = 6;\n    DAT_20000858 = 0;\n    DAT_20000860 = 7;\n    DAT_2000086c = 0;\n    DAT_20000874 = 8;\n    DAT_20000880 = 0;\n    DAT_20000888 = 9;\n    DAT_20000894 = 0;\n    DAT_2000089c = 10;\n    DAT_200008a8 = 0;\n    DAT_200008b0 = 0x17;\n    DAT_200008bc = 0;\n    DAT_200008c4 = 0x17;\n    DAT_200008d0 = 0;\n    DAT_200008d8 = 0x17;\n    DAT_200008e4 = 0;\n    DAT_200008ec = 0x17;\n    DAT_200008f8 = 0;\n    DAT_20000900 = 0x17;\n    DAT_2000090c = 0;\n    DAT_20000914 = 0x28;\n    DAT_20000920 = 0;\n    DAT_20000928 = 0x28;\n    DAT_20000934 = 0;\n    DAT_2000093c = 0x28;\n    DAT_20000948 = 0;\n    DAT_20000950 = 0x28;\n    DAT_2000095c = 0;\n    DAT_20000964 = 0x28;\n    DAT_20000970 = 0;\n    DAT_20000978 = 0x28;\n    DAT_20000984 = 0;\n    register_cleanup_function(0,&cleanup_function,&DAT_20000000,&DAT_2000084c,unused2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f78": "initialize_data_08008f78",
                "param_1": "flag",
                "param_2": "value",
                "param_3": "unused1",
                "param_4": "unused2",
                "__aeabi_atexit": "register_cleanup_function",
                "LAB_08008f50_1": "cleanup_function"
            },
            "calling": [],
            "called": [
                "FUN_080090c2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008f78": {
                    "2": "initialize_configuration",
                    "1": "initialize_config",
                    "10": "initialize_parameters",
                    "15": "initialize_data"
                },
                "param_1": {
                    "9": "flag",
                    "1": "is_first_run",
                    "2": "param1",
                    "6": "condition",
                    "4": "status"
                },
                "param_2": {
                    "3": "param2",
                    "1": "flag_value",
                    "17": "value"
                },
                "param_3": {
                    "1": "ptr1",
                    "9": "unused1",
                    "5": "param3",
                    "4": "unused_param1",
                    "2": "unused_param"
                },
                "param_4": {
                    "1": "exit_function_pointer",
                    "5": "param4",
                    "4": "unused_param2",
                    "9": "unused2"
                },
                "__aeabi_atexit": {
                    "4": "register_exit_function",
                    "1": "register_exit_callback",
                    "2": "register_exit_handler",
                    "6": "register_cleanup_function"
                },
                "FUN_080090c2": {
                    "1": "apply_configuration",
                    "2": "sub_function"
                },
                "LAB_08008f50_1": {
                    "2": "exit_handler",
                    "1": "cleanup",
                    "4": "cleanup_function"
                },
                "checkValue": {
                    "1": "param1"
                },
                "flagValue": {
                    "1": "param2"
                },
                "initializeData": {
                    "1": "initialize_data"
                },
                "registerExitFunction": {
                    "1": "register_exit_function"
                },
                "exitFunction": {
                    "1": "exit_function"
                }
            }
        },
        "FUN_08009084": {
            "entrypoint": "0x08009084",
            "current_name": "execute_function_08009084",
            "code": "\nvoid execute_function_08009084(int input)\n\n{\n  int pin_id;\n  \n  if (*(int *)(input + 8) != 0) {\n    (**(code **)(input + 0xc))();\n    return;\n  }\n  throw_bad_function_call();\n  pin_id = get_pin_id();\n  if ((&DAT_20000858)[pin_id * 5] != 0) {\n    execute_function_08009084();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009084": "execute_function_08009084",
                "param_1": "input",
                "iVar1": "pin_id",
                "__throw_bad_function_call": "throw_bad_function_call"
            },
            "calling": [
                "FUN_08009094"
            ],
            "called": [
                "FUN_0800a18c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009084": {
                    "4": "check_and_execute_function",
                    "1": "execute_or_throw",
                    "2": "check_and_call_function",
                    "8": "execute_function",
                    "5": "process_function"
                },
                "param_1": {
                    "9": "input",
                    "1": "arg",
                    "4": "param",
                    "3": "input_param"
                },
                "iVar1": {
                    "31": "pin_id"
                },
                "__throw_bad_function_call": {
                    "1": "throw_bad_function_call"
                },
                "get_pin_id": {
                    "2": "get_pin_id"
                },
                "FUN_0800a18c": {
                    "2": "execute_sub_function",
                    "1": "perform_operation"
                },
                "VAR_20000858": {
                    "1": "pin_array"
                }
            }
        },
        "FUN_08009094": {
            "entrypoint": "0x08009094",
            "current_name": "check_and_call_operator_08009094",
            "code": "\nvoid check_and_call_operator_08009094(void)\n\n{\n  int pin_id;\n  \n  pin_id = fetch_pin_id;\n  if ((&DAT_20000858)[pin_id * 5] != 0) {\n    execute_operator();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009094": "check_and_call_operator_08009094",
                "operator()": "execute_operator",
                "iVar1": "pin_id",
                "get_pin_id()": "fetch_pin_id"
            },
            "calling": [
                "FUN_080042f0"
            ],
            "called": [
                "FUN_08009084",
                "FUN_08008f3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009094": {
                    "2": "check_pin_and_call_operator",
                    "3": "check_and_execute_operation",
                    "1": "check_and_execute",
                    "4": "check_and_invoke_operator",
                    "5": "check_and_execute_operator",
                    "8": "check_and_call_operator"
                },
                "get_pin_id": {
                    "6": "get_pin_id",
                    "1": "obtain_pin_id",
                    "4": "retrieve_pin_id",
                    "2": "get_current_pin_id"
                },
                "operator()": {
                    "3": "execute_operation",
                    "1": "perform_operator_function",
                    "2": "perform_operation"
                },
                "iVar1": {
                    "1": "pin_index",
                    "23": "pin_id"
                },
                "&DAT_20000858": {
                    "4": "pin_data_array",
                    "1": "pin_status_array",
                    "3": "pin_data"
                },
                "FUN_08009084": {
                    "1": "perform_operation",
                    "4": "get_pin_id"
                },
                "FUN_08008f3c": {
                    "1": "process_pin_value",
                    "2": "get_pin_value"
                },
                "param_1": {
                    "1": "entry",
                    "5": "pin_id"
                },
                "DAT_20000858": {
                    "1": "pin_data"
                },
                "get_pin_id()": {
                    "1": "fetch_pin_id"
                }
            }
        },
        "FUN_080090c2": {
            "entrypoint": "0x080090c2",
            "current_name": "register_exit_handler_080090c2",
            "code": "\nvoid register_exit_handler_080090c2(undefined4 input_value,undefined4 flags)\n\n{\n  __cxa_atexit(flags,input_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090c2": "register_exit_handler_080090c2",
                "param_1": "input_value",
                "param_2": "flags"
            },
            "calling": [
                "FUN_08008f78"
            ],
            "called": [
                "FUN_08009108"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080090c2": {
                    "7": "register_exit_function",
                    "3": "register_at_exit_handler",
                    "1": "initialize_exit_handler",
                    "2": "register_at_exit_function",
                    "8": "register_exit_handler",
                    "4": "register_cleanup_function"
                },
                "param_1": {
                    "2": "function_pointer",
                    "1": "callback_function",
                    "5": "input_value",
                    "3": "handler_function",
                    "4": "cleanup_function"
                },
                "param_2": {
                    "1": "cleanup_data",
                    "2": "length",
                    "4": "flags"
                },
                "FUN_08009108": {
                    "1": "calculate_result",
                    "2": "calculate_checksum",
                    "5": "perform_operation"
                },
                "FUN_08009108_RET": {
                    "1": "result"
                }
            }
        },
        "FUN_080090cc": {
            "entrypoint": "0x080090cc",
            "current_name": "print_assertion_error_080090cc",
            "code": "\nvoid print_assertion_error_080090cc(undefined4 file_name,undefined4 line_number,char *function_name,undefined4 function_name)\n\n{\n  undefined4 file_ptr;\n  char *additional_info;\n  undefined8 abort_result;\n  undefined4 assertion_param;\n  \n  file_ptr = *(undefined4 *)(DAT_20000090 + 0xc);\n  assertion_param = function_name;\n  if (function_name == (char *)0x0) goto print_error_message;\n  additional_info = \", function: \";\n  do {\n    fiprintf(file_ptr,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",function_name,file_name,line_number,\n             additional_info,function_name,assertion_param);\n    abort_result = abort();\n    line_number = (undefined4)((ulonglong)abort_result >> 0x20);\n    file_ptr = (undefined4)abort_result;\nprint_error_message:\n    function_name = \"\";\n    additional_info = function_name;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080090cc": "print_assertion_error_080090cc",
                "param_1": "file_name",
                "param_2": "line_number",
                "param_3": "function_name",
                "param_4": "function_name",
                "uVar1": "file_ptr",
                "pcVar2": "additional_info",
                "uVar3": "abort_result",
                "uVar4": "assertion_param",
                "LAB_080090f0": "print_error_message"
            },
            "calling": [
                "FUN_08008c44"
            ],
            "called": [
                "FUN_08009b5c",
                "FUN_08009124"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080090cc": {
                    "1": "print_assert_error",
                    "4": "print_assertion_failed",
                    "5": "print_assertion_failed_message",
                    "2": "assertion_failed",
                    "9": "print_assertion_error"
                },
                "param_1": {
                    "3": "filename",
                    "21": "file_name",
                    "1": "assertion",
                    "6": "file"
                },
                "param_2": {
                    "25": "line_number",
                    "4": "line",
                    "1": "file"
                },
                "param_3": {
                    "1": "msg",
                    "6": "assertion_message",
                    "11": "function_name",
                    "9": "assertion"
                },
                "param_4": {
                    "1": "assertion_msg",
                    "5": "function",
                    "14": "function_name"
                },
                "uVar1": {
                    "8": "file_ptr",
                    "4": "file_stream",
                    "1": "file",
                    "5": "file_descriptor"
                },
                "pcVar2": {
                    "2": "suffix",
                    "1": "function_name_suffix",
                    "5": "additional_message",
                    "3": "message",
                    "6": "additional_info"
                },
                "uVar3": {
                    "1": "return_value",
                    "21": "abort_result",
                    "2": "abort_ret_val",
                    "4": "result"
                },
                "uVar4": {
                    "2": "function_name_copy",
                    "1": "extra_string",
                    "4": "assertion_param"
                },
                "uVar5": {
                    "1": "file_ptr_result"
                },
                "DAT_20000090": {
                    "1": "data_offset"
                },
                "LAB_080090f0": {
                    "1": "print_error_message"
                }
            }
        },
        "FUN_08009108": {
            "entrypoint": "0x08009108",
            "current_name": "shift_left_by32_bits_08009108",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009110) */\n\nlonglong shift_left_by32_bits_08009108(undefined4 flags,uint value)\n\n{\n  return (ulonglong)value << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08009108": "shift_left_by32_bits_08009108",
                "param_1": "flags",
                "param_2": "value"
            },
            "calling": [
                "FUN_080090c2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009108": {
                    "3": "shift_left_by32",
                    "1": "shift_left_with_padding",
                    "2": "shift_left64",
                    "5": "shift_left_by32_bits"
                },
                "param_1": {
                    "1": "start_value",
                    "2": "input_param",
                    "4": "param1",
                    "6": "flags"
                },
                "param_2": {
                    "2": "shift_value",
                    "3": "value_to_shift",
                    "4": "shift_amount",
                    "1": "unsigned_int",
                    "11": "value"
                },
                "param_n": {
                    "1": "new_parameter_name_n"
                },
                "param_2 << 0x20": {
                    "1": "shifted_value"
                },
                "param_3": {
                    "1": "new_param3"
                }
            }
        },
        "FUN_08009124": {
            "entrypoint": "0x08009124",
            "current_name": "print_stack_values_08009124",
            "code": "\nvoid print_stack_values_08009124(undefined4 format_string,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 arg2_copy;\n  undefined4 arg3_copy;\n  \n  arg2_copy = arg2;\n  arg3_copy = arg3;\n  formatted_print(DAT_20000090,format_string,arg1,&arg2_copy,format_string,&arg2_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009124": "print_stack_values_08009124",
                "param_1": "format_string",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "uStack_8": "arg2_copy",
                "uStack_4": "arg3_copy",
                "_vfiprintf_r": "formatted_print"
            },
            "calling": [
                "FUN_080090cc"
            ],
            "called": [
                "FUN_0800937c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009124": {
                    "1": "print_stack_with_params",
                    "3": "print_formatted_data",
                    "7": "print_stack_values",
                    "2": "print_parameters",
                    "4": "print_formatted_output"
                },
                "param_1": {
                    "1": "output_file",
                    "2": "format",
                    "27": "format_string"
                },
                "param_2": {
                    "1": "format_string",
                    "21": "arg1",
                    "2": "param_2"
                },
                "param_3": {
                    "1": "stack_variable1",
                    "2": "stack_param1",
                    "20": "arg2"
                },
                "param_4": {
                    "1": "arg2",
                    "2": "stack_value_2",
                    "20": "arg3"
                },
                "uStack_8": {
                    "1": "temp_param",
                    "2": "param3_copy",
                    "9": "arg2_copy"
                },
                "uStack_4": {
                    "1": "parameter_4",
                    "9": "arg3_copy",
                    "2": "param4_copy"
                },
                "_vfiprintf_r": {
                    "1": "print_with_stack_values",
                    "2": "formatted_print"
                },
                "FUN_0800937c": {
                    "2": "process_data"
                }
            }
        },
        "FUN_08009148": {
            "entrypoint": "0x08009148",
            "current_name": "execute_functions_08009148",
            "code": "\nvoid execute_functions_08009148(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_0800abe4)[index])();\n  }\n  initialize();\n  for (index = 0; index != 0xc; index = index + 1) {\n    (*(code *)(&DAT_0800abe4)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009148": "execute_functions_08009148",
                "iVar1": "index",
                "_init": "initialize"
            },
            "calling": [
                "FUN_08003658"
            ],
            "called": [
                "FUN_0800a424",
                "FUN_08008f0e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009148": {
                    "1": "execute_callbacks",
                    "4": "execute_sub_functions",
                    "19": "execute_functions",
                    "3": "execute_all_functions"
                },
                "iVar1": {
                    "1": "iteration_count",
                    "3": "counter",
                    "23": "index"
                },
                "FUNC_0800a424": {
                    "2": "function1",
                    "1": "perform_operation",
                    "4": "function_a"
                },
                "FUN_08008f0e": {
                    "1": "sub_function_2",
                    "4": "function_b",
                    "2": "function2"
                },
                "FUCN_0800a424": {
                    "1": "function_a"
                },
                "FUNC_08008f0e": {
                    "1": "function_b"
                },
                "(code *)(&DAT_0800abe4)[index]": {
                    "1": "function"
                },
                "_init": {
                    "1": "initialize"
                }
            }
        },
        "FUN_08009190": {
            "entrypoint": "0x08009190",
            "current_name": "allocate_memory_08009190",
            "code": "\nvoid allocate_memory_08009190(undefined4 size)\n\n{\n  _malloc_r(DAT_20000090,size);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009190": "allocate_memory_08009190",
                "param_1": "size"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [
                "FUN_08009270"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009190": {
                    "29": "allocate_memory",
                    "1": "initialize_memory"
                },
                "param_1": {
                    "4": "data",
                    "3": "destination",
                    "2": "array",
                    "1": "dest_ptr",
                    "5": "source",
                    "14": "size"
                },
                "FUN_08009270": {
                    "2": "perform_operation",
                    "3": "process_data",
                    "1": "reverse_bits",
                    "17": "copy_data"
                },
                "param_2": {
                    "1": "source",
                    "4": "num_elements",
                    "2": "size",
                    "17": "length"
                }
            }
        },
        "FUN_080091a0": {
            "entrypoint": "0x080091a0",
            "current_name": "free_memory_080091a0",
            "code": "\nvoid free_memory_080091a0(undefined4 memory_block)\n\n{\n  _free_r(DAT_20000090,memory_block);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091a0": "free_memory_080091a0",
                "param_1": "memory_block"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080091a0": {
                    "28": "free_memory",
                    "2": "release_memory",
                    "1": "free_memory_block"
                },
                "param_1": {
                    "2": "pointer",
                    "9": "memory_block",
                    "1": "memory_location",
                    "3": "memory_pointer",
                    "4": "ptr",
                    "7": "memory_address"
                },
                "param_2": {
                    "1": "length",
                    "2": "data_pointer",
                    "7": "size"
                },
                "param_3": {
                    "1": "destination_data",
                    "6": "param3",
                    "4": "value1",
                    "2": "size"
                },
                "param_4": {
                    "1": "length_of_data",
                    "6": "param4",
                    "4": "arg2"
                },
                "FUN_080091d8": {
                    "10": "process_data",
                    "1": "perform_operation",
                    "2": "initialize_memory"
                }
            }
        },
        "FUN_080091b0": {
            "entrypoint": "0x080091b0",
            "current_name": "copy_data_080091b0",
            "code": "\nvoid copy_data_080091b0(int dest,undefined *source_data,int size)\n\n{\n  undefined *dest_end;\n  undefined *dest_end;\n  \n  dest_end = (undefined *)(dest + -1);\n  dest_end = source_data + size;\n  for (; source_data != dest_end; source_data = source_data + 1) {\n    dest_end = dest_end + 1;\n    *dest_end = *source_data;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091b0": "copy_data_080091b0",
                "param_1": "dest",
                "param_2": "source_data",
                "param_3": "size",
                "puVar1": "dest_end",
                "puVar2": "dest_end"
            },
            "calling": [
                "FUN_08009908",
                "FUN_080027f0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080091b0": {
                    "2": "copy_array",
                    "1": "copy_and_shift",
                    "17": "copy_data"
                },
                "param_1": {
                    "2": "start_address",
                    "1": "buffer_start_index",
                    "3": "dest_ptr"
                },
                "param_2": {
                    "2": "source_array",
                    "1": "source_bytes",
                    "8": "source_data",
                    "3": "src",
                    "5": "source"
                },
                "param_3": {
                    "2": "array_length",
                    "9": "size",
                    "1": "num_elements",
                    "6": "length"
                },
                "puVar1": {
                    "1": "destination_array_end",
                    "2": "src_end",
                    "4": "source_end",
                    "5": "dest_end"
                },
                "puVar2": {
                    "1": "src_curr_addr",
                    "2": "dest_end_ptr",
                    "3": "src_end",
                    "4": "dest_end"
                }
            }
        },
        "FUN_080091c6": {
            "entrypoint": "0x080091c6",
            "current_name": "fill_memory_080091c6",
            "code": "\nvoid fill_memory_080091c6(undefined *memory,undefined value,int size)\n\n{\n  undefined *end_address;\n  \n  end_address = memory + size;\n  for (; memory != end_address; memory = memory + 1) {\n    *memory = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091c6": "fill_memory_080091c6",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "end_address"
            },
            "calling": [
                "FUN_08009cdc",
                "FUN_08009db0",
                "FUN_08002a58",
                "FUN_08007118",
                "FUN_08006d80",
                "FUN_08002968",
                "FUN_08009d24"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080091c6": {
                    "1": "fill_memory_with_byte",
                    "2": "fill_memory_with",
                    "15": "fill_memory"
                },
                "param_1": {
                    "8": "destination",
                    "2": "buffer",
                    "1": "memory_array",
                    "13": "memory"
                },
                "param_2": {
                    "28": "value",
                    "1": "value_to_set"
                },
                "param_3": {
                    "1": "num_bytes_to_fill",
                    "11": "length",
                    "18": "size"
                },
                "puVar1": {
                    "1": "end_pointer",
                    "9": "end_address"
                },
                "<FUN_080091c6>": {
                    "1": "<set_param_to_value>"
                },
                "original_function_name": {
                    "1": "set_memory"
                }
            }
        },
        "FUN_080091d8": {
            "entrypoint": "0x080091d8",
            "current_name": "allocate_memory_080091d8",
            "code": "\nvoid allocate_memory_080091d8(undefined4 *result,int size,undefined4 arg3,undefined4 arg4)\n\n{\n  int **extra_out;\n  int **temp2;\n  int **temp3;\n  int *temp;\n  int **temp5;\n  int **new_ptr;\n  \n  if (size == 0) {\n    return;\n  }\n  new_ptr = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    new_ptr = (int **)((int)new_ptr + *(int *)(size + -4));\n  }\n  lock_memory_allocation();\n  temp3 = (int **)&DAT_2000098c;\n  if (DAT_2000098c == (int **)0x0) {\n    new_ptr[1] = (int *)0x0;\n    temp2 = extra_out;\n    DAT_2000098c = new_ptr;\n  }\n  else {\n    temp3 = DAT_2000098c;\n    if (new_ptr < DAT_2000098c) {\n      temp2 = (int **)*new_ptr;\n      temp3 = (int **)((int)new_ptr + (int)temp2);\n      if (DAT_2000098c == temp3) {\n        temp = *DAT_2000098c;\n        DAT_2000098c = (int **)DAT_2000098c[1];\n        temp3 = (int **)((int)temp + (int)temp2);\n        *new_ptr = (int *)temp3;\n      }\n      new_ptr[1] = (int *)DAT_2000098c;\n      DAT_2000098c = new_ptr;\n    }\n    else {\n      do {\n        temp5 = temp3;\n        temp3 = (int **)temp5[1];\n        if (temp3 == (int **)0x0) break;\n      } while (temp3 <= new_ptr);\n      temp2 = (int **)*temp5;\n      if ((int **)((int)temp5 + (int)temp2) == new_ptr) {\n        temp2 = (int **)((int)temp2 + (int)*new_ptr);\n        *temp5 = (int *)temp2;\n        if (temp3 == (int **)((int)temp5 + (int)temp2)) {\n          temp = *temp3;\n          temp3 = (int **)temp3[1];\n          temp2 = (int **)((int)temp2 + (int)temp);\n          *temp5 = (int *)temp2;\n          temp5[1] = (int *)temp3;\n        }\n      }\n      else if (new_ptr < (int **)((int)temp5 + (int)temp2)) {\n        *result = 0xc;\n      }\n      else {\n        temp2 = (int **)((int)new_ptr + (int)*new_ptr);\n        if (temp3 == temp2) {\n          temp = *temp3;\n          temp3 = (int **)temp3[1];\n          temp2 = (int **)((int)temp + (int)*new_ptr);\n          *new_ptr = (int *)temp2;\n        }\n        new_ptr[1] = (int *)temp3;\n        temp5[1] = (int *)new_ptr;\n      }\n    }\n  }\n  unlock_memory_allocation(result,temp2,temp3,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091d8": "allocate_memory_080091d8",
                "param_1": "result",
                "param_2": "size",
                "param_3": "arg3",
                "param_4": "arg4",
                "ppiVar1": "temp2",
                "ppiVar2": "temp3",
                "piVar3": "temp",
                "ppiVar4": "temp5",
                "ppiVar5": "new_ptr",
                "extraout_r1": "extra_out",
                "__malloc_lock": "lock_memory_allocation",
                "__malloc_unlock": "unlock_memory_allocation"
            },
            "calling": [
                "FUN_08009b5c",
                "FUN_08009908",
                "FUN_080091a0",
                "FUN_08009a80"
            ],
            "called": [
                "FUN_08009f48",
                "FUN_08009f4a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080091d8": {
                    "2": "update_pointer_list",
                    "1": "allocate_linked_list",
                    "13": "allocate_memory"
                },
                "param_1": {
                    "1": "param",
                    "2": "output",
                    "8": "result"
                },
                "param_2": {
                    "1": "input_array_length",
                    "3": "count",
                    "23": "size"
                },
                "param_3": {
                    "1": "lock",
                    "2": "unused_param",
                    "5": "param_3",
                    "9": "arg3"
                },
                "param_4": {
                    "2": "var2",
                    "1": "lock",
                    "5": "arg2",
                    "9": "arg4"
                },
                "ppiVar1": {
                    "2": "prev_ptr",
                    "1": "temp1",
                    "4": "temp2",
                    "3": "temp_ptr1"
                },
                "ppiVar2": {
                    "1": "pointer_var2",
                    "4": "current_ptr",
                    "2": "temp_ptr_2",
                    "3": "temp_ptr2"
                },
                "piVar3": {
                    "1": "pointer_var3",
                    "5": "temp_var",
                    "4": "temp4",
                    "2": "temp_ptr_3"
                },
                "ppiVar4": {
                    "1": "temp4",
                    "2": "temp_ptr_4",
                    "3": "prev_ptr",
                    "4": "temp5"
                },
                "ppiVar5": {
                    "1": "current_block",
                    "2": "new_block",
                    "7": "new_ptr",
                    "4": "temp6"
                },
                "extraout_r1": {
                    "1": "new_head",
                    "2": "extra_output",
                    "4": "temp1",
                    "5": "extra_out"
                },
                "__malloc_lock": {
                    "1": "lock_memory",
                    "3": "lock_memory_allocation"
                },
                "DAT_2000098c": {
                    "3": "head",
                    "1": "head_ptr"
                },
                "__malloc_unlock": {
                    "1": "unlock_malloc",
                    "3": "unlock_memory_allocation"
                },
                "FUNC_08009f48": {
                    "1": "function_1"
                },
                "FUNC_08009f4a": {
                    "1": "function_2"
                }
            }
        },
        "FUN_08009270": {
            "entrypoint": "0x08009270",
            "current_name": "allocate_memory_08009270",
            "code": "\nuint allocate_memory_08009270(undefined4 *size_ptr,uint size)\n\n{\n  uint *current_block;\n  int remaining_space;\n  uint *previous_block;\n  uint difference;\n  uint *new_block;\n  uint allocated_size;\n  \n  allocated_size = (size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < size)) {\n    *size_ptr = 0xc;\n  }\n  else {\n    lock_memory();\n    current_block = DAT_2000098c;\n    new_block = DAT_2000098c;\n    while (previous_block = current_block, previous_block != (uint *)0x0) {\n      difference = *previous_block - allocated_size;\n      if (-1 < (int)difference) {\n        if (difference < 0xc) {\n          if (new_block == previous_block) {\n            current_block = (uint *)new_block[1];\n            DAT_2000098c = current_block;\n          }\n          else {\n            current_block = (uint *)previous_block[1];\n          }\n          if (new_block != previous_block) {\n            new_block[1] = (uint)current_block;\n            new_block = previous_block;\n          }\n        }\n        else {\n          *previous_block = difference;\n          *(uint *)((int)previous_block + difference) = allocated_size;\n          new_block = (uint *)((int)previous_block + difference);\n        }\n        goto LAB_080092d4;\n      }\n      new_block = previous_block;\n      current_block = (uint *)previous_block[1];\n    }\n    if (DAT_20000990 == 0) {\n      DAT_20000990 = sbrk(size_ptr);\n    }\n    current_block = (uint *)sbrk(size_ptr,allocated_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((new_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == new_block ||\n        (remaining_space = sbrk(size_ptr,(int)new_block - (int)current_block), remaining_space != -1)))) {\n      *new_block = allocated_size;\nLAB_080092d4:\n      unlock_memory(size_ptr);\n      allocated_size = (int)new_block + 0xbU & 0xfffffff8;\n      remaining_space = allocated_size - (int)(new_block + 1);\n      if (remaining_space != 0) {\n        *(int *)((int)new_block + remaining_space) = -remaining_space;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *size_ptr = 0xc;\n    unlock_memory(size_ptr);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009270": "allocate_memory_08009270",
                "param_1": "size_ptr",
                "param_2": "size",
                "uVar6": "allocated_size",
                "puVar1": "current_block",
                "iVar2": "remaining_space",
                "puVar3": "previous_block",
                "uVar4": "difference",
                "puVar5": "new_block",
                "__malloc_lock": "lock_memory",
                "_sbrk_r": "sbrk",
                "__malloc_unlock": "unlock_memory"
            },
            "calling": [
                "FUN_08009908",
                "FUN_08009eac",
                "FUN_08009190",
                "FUN_08009d24"
            ],
            "called": [
                "FUN_08009918",
                "FUN_08009f48",
                "FUN_08009f4a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009270": {
                    "21": "allocate_memory",
                    "8": "allocate_memory_block",
                    "1": "resize_memory_block"
                },
                "param_1": {
                    "1": "output_buffer",
                    "2": "block_size",
                    "7": "size_ptr",
                    "6": "size"
                },
                "param_2": {
                    "6": "requested_size",
                    "7": "alignment",
                    "16": "size",
                    "2": "required_size"
                },
                "uVar6": {
                    "4": "allocated_block_size",
                    "1": "block_size",
                    "2": "allocated_memory",
                    "18": "allocated_size"
                },
                "puVar1": {
                    "1": "current_pointer",
                    "21": "current_block",
                    "3": "current",
                    "4": "current_chunk"
                },
                "iVar2": {
                    "1": "block_size",
                    "8": "remaining_size",
                    "9": "remaining_space",
                    "2": "difference",
                    "3": "size_diff"
                },
                "puVar3": {
                    "1": "current_chunk",
                    "18": "previous_block",
                    "2": "previous_chunk"
                },
                "uVar4": {
                    "4": "remaining_space",
                    "1": "gap",
                    "11": "difference",
                    "2": "block_size_diff"
                },
                "puVar5": {
                    "1": "updated_previous",
                    "3": "previous_block",
                    "2": "previous_block_next",
                    "12": "new_block"
                },
                "DAT_2000098c": {
                    "1": "memory_pool",
                    "2": "head_block",
                    "3": "first_chunk"
                },
                "DAT_20000990": {
                    "1": "previous_break_address",
                    "2": "brk_ptr",
                    "3": "brk_pointer"
                },
                "__malloc_lock": {
                    "2": "lock_memory"
                },
                "_sbrk_r": {
                    "1": "sbrk"
                },
                "__malloc_unlock": {
                    "2": "unlock_memory"
                },
                "FUN_08009918": {
                    "1": "initialize_chunk"
                },
                "FUNC_08009f48": {
                    "1": "function1"
                },
                "FUNC_08009f4a": {
                    "1": "function2"
                },
                "FUN_080090d0": {
                    "1": "allocate_memory"
                }
            }
        },
        "FUN_0800932c": {
            "entrypoint": "0x0800932c",
            "current_name": "process_input_0800932c",
            "code": "\nuint process_input_0800932c(int data_ptr,byte byte_value,byte **buffer)\n\n{\n  int temp_var;\n  byte *temp_var2;\n  byte *temp_var3;\n  uint result;\n  \n  temp_var2 = buffer[2] + -1;\n  buffer[2] = temp_var2;\n  if ((-1 < converted_temp_var_2) ||\n     ((converted_input_array_length <= converted_temp_var_2 && (temp_var2 = (byte *)converted_input, temp_var2 != (byte *)0xa))))\n  {\n    temp_var2 = *buffer;\n    *buffer = temp_var2 + 1;\n    *temp_var2 = byte_value;\n    return converted_input;\n  }\n  if ((data_ptr != 0) && (*(int *)(data_ptr + 0x18) == 0)) {\n    initialize_buffer;\n  }\n  if (buffer == (byte **)&DAT_0800aba4) {\n    buffer = *(byte ***)(data_ptr + 4);\n  }\n  else if (buffer == (byte **)&DAT_0800abc4) {\n    buffer = *(byte ***)(data_ptr + 8);\n  }\n  else if (buffer == (byte **)&DAT_0800ab84) {\n    buffer = *(byte ***)(data_ptr + 0xc);\n  }\n  buffer[2] = buffer[6];\n  temp_var3 = (byte *)(uint)*(ushort *)(buffer + 3);\n  temp_var = (int)temp_var3 << 0x1c;\n  if (((temp_var < 0) && (temp_var3 = buffer[4], temp_var3 != (byte *)0x0)) ||\n     (temp_var = setup_r(data_ptr,buffer,temp_var,temp_var3,temp_var2), temp_var == 0)) {\n    result = converted_input;\n    temp_var = (int)*buffer - (int)buffer[4];\n    if ((temp_var < (int)buffer[5]) || (temp_var = flush_buffer(data_ptr,buffer), temp_var == 0)) {\n      buffer[2] = buffer[2] + -1;\n      temp_var2 = *buffer;\n      *buffer = temp_var2 + 1;\n      *temp_var2 = byte_value;\n      if ((byte *)(temp_var + 1) != buffer[5]) {\n        if (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x1f)) {\n          return result;\n        }\n        if (result != 10) {\n          return result;\n        }\n      }\n      temp_var = flush_buffer(data_ptr,buffer);\n      if (temp_var == 0) {\n        return result;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800932c": "process_input_0800932c",
                "param_1": "data_ptr",
                "param_2": "byte_value",
                "param_3": "buffer",
                "iVar1": "temp_var",
                "pbVar2": "temp_var2",
                "pbVar3": "temp_var3",
                "uVar4": "result",
                "__sinit": "initialize",
                "__swsetup_r": "setup_r",
                "_fflush_r": "flush_buffer",
                "(uint)param_2": "converted_input",
                "(int)pbVar2": "converted_temp_var_2",
                "(int)param_3[6]": "converted_input_array_length",
                "__sinit()": "initialize_buffer"
            },
            "calling": [
                "FUN_08009358"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_08009c7c",
                "FUN_08009a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800932c": {
                    "1": "parse_and_store_byte",
                    "14": "process_input",
                    "2": "write_byte",
                    "4": "process_byte"
                },
                "param_1": {
                    "3": "data_ptr",
                    "1": "input_ptr",
                    "2": "input_data"
                },
                "param_2": {
                    "2": "byte_input",
                    "1": "new_byte",
                    "7": "input_byte",
                    "4": "byte_to_write",
                    "9": "byte_value",
                    "3": "byte_val"
                },
                "param_3": {
                    "1": "input_pointer",
                    "5": "buffer",
                    "4": "data_ptr",
                    "3": "input_array"
                },
                "iVar1": {
                    "1": "temp_int1",
                    "3": "index",
                    "7": "temp_var",
                    "2": "temp_variable",
                    "5": "temp_var1"
                },
                "pbVar2": {
                    "1": "last_pointer",
                    "3": "buffer_ptr",
                    "2": "buffer_end",
                    "5": "temp_var2"
                },
                "pbVar3": {
                    "5": "temp_var3",
                    "1": "temp_pointer",
                    "2": "temp_byte"
                },
                "uVar4": {
                    "1": "uint_var",
                    "10": "return_value",
                    "2": "return_val",
                    "15": "result"
                },
                "__sinit": {
                    "1": "initialize_stream",
                    "2": "initialize"
                },
                "DAT_0800aba4": {
                    "2": "constant1",
                    "1": "constant_1"
                },
                "DAT_0800abc4": {
                    "1": "constant_2",
                    "2": "constant2"
                },
                "DAT_0800ab84": {
                    "2": "constant3",
                    "1": "constant_3"
                },
                "__swsetup_r": {
                    "1": "perform_swsetup_r",
                    "2": "setup_r"
                },
                "_fflush_r": {
                    "4": "flush_buffer",
                    "1": "fflush_r_function",
                    "2": "flush_r"
                },
                "PTR_fun_08009d50": {
                    "1": "sub_function1"
                },
                "PTR_FUN_08009c7c": {
                    "1": "sub_function2"
                },
                "PTR_FUN_08009a80": {
                    "1": "sub_function3"
                },
                "*param_3": {
                    "1": "current_pos"
                },
                "(uint)param_2": {
                    "1": "converted_input"
                },
                "(int)pbVar2": {
                    "1": "converted_temp_var_2"
                },
                "(int)param_3[6]": {
                    "1": "converted_input_array_length"
                },
                "*param_3 = pbVar2 + 1": {
                    "1": "increment_current_pos"
                },
                "(int)(*param_3 - (int)param_3[4])": {
                    "1": "difference"
                },
                "(uint)*(ushort *)(param_3 + 3)": {
                    "1": "converted_temp_var_3"
                },
                "(byte *)(iVar1 + 1)": {
                    "1": "next_pos"
                },
                "__sinit()": {
                    "1": "initialize_s"
                }
            }
        },
        "FUN_08009358": {
            "entrypoint": "0x08009358",
            "current_name": "write_to_stream_08009358",
            "code": "\nint write_to_stream_08009358(undefined4 stream,undefined4 character,undefined *buffer,int length)\n\n{\n  int result;\n  undefined *end_of_buffer;\n  int remaining_size;\n  \n  end_of_buffer = buffer + length;\n  remaining_size = length;\n  do {\n    if (buffer == end_of_buffer) {\n      return 0;\n    }\n    result = write_character(stream,*buffer,character,length,remaining_size);\n    length = result + 1;\n    buffer = buffer + 1;\n  } while (length != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009358": "write_to_stream_08009358",
                "param_1": "stream",
                "param_2": "character",
                "param_3": "buffer",
                "param_4": "length",
                "iVar1": "result",
                "puVar2": "end_of_buffer",
                "iVar3": "remaining_size",
                "__sfputc_r": "write_character"
            },
            "calling": [
                "FUN_0800937c"
            ],
            "called": [
                "FUN_0800932c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009358": {
                    "1": "write_to_buffer",
                    "13": "write_to_stream",
                    "5": "write_data",
                    "3": "write_data_to_stream"
                },
                "param_1": {
                    "22": "stream",
                    "1": "file",
                    "2": "file_stream",
                    "3": "file_descriptor"
                },
                "param_2": {
                    "1": "param",
                    "18": "character",
                    "2": "char_to_write",
                    "3": "buffer"
                },
                "param_3": {
                    "1": "input_array",
                    "9": "data",
                    "3": "data_buffer",
                    "15": "buffer"
                },
                "param_4": {
                    "1": "buffer_length",
                    "2": "count",
                    "8": "buffer_size",
                    "6": "size",
                    "10": "length"
                },
                "iVar1": {
                    "1": "output_result",
                    "3": "write_result",
                    "4": "bytes_written",
                    "22": "result"
                },
                "puVar2": {
                    "3": "buffer_end",
                    "1": "string_end",
                    "12": "end_of_buffer",
                    "5": "end"
                },
                "iVar3": {
                    "3": "remaining",
                    "1": "remaining_buffer_size",
                    "4": "current_index",
                    "6": "remaining_size",
                    "5": "remaining_length"
                },
                "__sfputc_r": {
                    "1": "write_character"
                }
            }
        },
        "FUN_0800937c": {
            "entrypoint": "0x0800937c",
            "current_name": "print_formatted_text_0800937c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009550) */\n\nint print_formatted_text_0800937c(int stream,undefined4 *format_string,byte *arguments,int *argptr)\n\n{\n  int result;\n  int *ptr;\n  bool is_numeric;\n  byte *current_char;\n  byte *next_char;\n  int i;\n  int temp;\n  int *arg_pointer;\n  uint flags;\n  int precision;\n  undefined4 width;\n  int width;\n  int total_chars;\n  byte conversion_specifier;\n  undefined space_flag;\n  undefined plus_flag;\n  undefined zero_flag;\n  undefined4 dot_flag;\n  \n  arg_pointer = argptr;\n  if ((stream != 0) && (*(int *)(stream + 0x18) == 0)) {\n    __initialize_stdio;\n  }\n  if (format_string == &DAT_0800aba4) {\n    format_string = *(undefined4 **)(stream + 4);\n  }\n  else if (format_string == (undefined4 *)&DAT_0800abc4) {\n    format_string = *(undefined4 **)(stream + 8);\n  }\n  else if (format_string == (undefined4 *)&DAT_0800ab84) {\n    format_string = *(undefined4 **)(stream + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(format_string + 3) << 0x1c)) || (format_string[4] == 0)) &&\n     (temp = setup_stream(stream,format_string), temp != 0)) {\n    return -1;\n  }\n  total_chars = 0;\n  space_flag = 0x20;\n  plus_flag = 0x30;\n  current_char = arguments;\nLAB_080093be:\n  next_char = current_char;\n  if (*next_char != 0) goto LAB_08009474;\n  goto LAB_080093c8;\nLAB_08009474:\n  current_char = next_char + 1;\n  if (*next_char != 0x25) goto LAB_080093be;\nLAB_080093c8:\n  temp = (int)next_char - (int)arguments;\n  if (temp != 0) {\n    result = write_to_stream(stream,format_string,arguments,temp);\n    if (result == -1) {\nLAB_08009568:\n      if ((int)((uint)*(ushort *)(format_string + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total_chars;\n    }\n    total_chars = total_chars + temp;\n  }\n  if (*next_char == 0) goto LAB_08009568;\n  flags = 0;\n  width = 0;\n  precision = -1;\n  width = 0;\n  zero_flag = 0;\n  dot_flag = 0;\n  current_char = next_char + 1;\n  while( true ) {\n    temp = find_char(\"#-0+ \",*current_char);\n    arguments = current_char + 1;\n    if (temp == 0) break;\n    flags = 1 << (temp + 0xf7ff54b0U & 0xff) | flags;\n    current_char = arguments;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    zero_flag = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    zero_flag = 0x2b;\n  }\n  if (*current_char == 0x2a) {\n    ptr = arg_pointer + 1;\n    temp = *arg_pointer;\n    arg_pointer = ptr;\n    if (temp < 0) {\n      width = -temp;\n      flags = flags | 2;\n      goto LAB_080094a6;\n    }\n  }\n  else {\n    is_numeric = false;\n    temp = width;\n    arguments = current_char;\n    while( true ) {\n      if (9 < *arguments - 0x30) break;\n      temp = temp * 10 + (*arguments - 0x30);\n      is_numeric = true;\n      arguments = arguments + 1;\n    }\n    if (!is_numeric) goto LAB_080094a6;\n  }\n  width = temp;\nLAB_080094a6:\n  if (*arguments == 0x2e) {\n    if (arguments[1] == 0x2a) {\n      arguments = arguments + 2;\n      ptr = arg_pointer + 1;\n      precision = *arg_pointer;\n      arg_pointer = ptr;\n      if (precision < 0) {\n        precision = -1;\n      }\n    }\n    else {\n      is_numeric = false;\n      temp = 0;\n      precision = 0;\n      while( true ) {\n        arguments = arguments + 1;\n        if (9 < *arguments - 0x30) break;\n        temp = temp * 10 + (*arguments - 0x30);\n        is_numeric = true;\n      }\n      if (is_numeric) {\n        precision = temp;\n      }\n    }\n  }\n  temp = find_char(&DAT_0800ab56,*arguments,3);\n  if (temp != 0) {\n    arguments = arguments + 1;\n    flags = flags | 0x40 << (temp + 0xf7ff54aaU & 0xff);\n  }\n  conversion_specifier = *arguments;\n  arguments = arguments + 1;\n  temp = find_char(\"efgEFG\",conversion_specifier,6);\n  if (temp == 0) {\n    i = print_integer(stream,&flags,format_string,0x8009359,&arg_pointer);\n    if (i == -1) goto LAB_08009568;\n  }\n  else {\n    arg_pointer = (int *)(((int)arg_pointer + 7U & 0xfffffff8) + 8);\n  }\n  total_chars = total_chars + i;\n  current_char = arguments;\n  goto LAB_080093be;\n}\n\n",
            "renaming": {
                "FUN_0800937c": "print_formatted_text_0800937c",
                "param_1": "stream",
                "param_2": "format_string",
                "param_3": "arguments",
                "param_4": "argptr",
                "iVar1": "result",
                "piVar2": "ptr",
                "bVar3": "is_numeric",
                "pbVar4": "current_char",
                "pbVar5": "next_char",
                "unaff_r9": "i",
                "iVar6": "temp",
                "local_8c": "arg_pointer",
                "local_88": "flags",
                "local_84": "precision",
                "local_80": "width",
                "local_7c": "width",
                "local_74": "total_chars",
                "local_70": "conversion_specifier",
                "local_6f": "space_flag",
                "local_6e": "plus_flag",
                "local_45": "zero_flag",
                "local_30": "dot_flag",
                "__sinit": "initialize_stream",
                "__swsetup_r": "setup_stream",
                "__sfputs_r": "write_to_stream",
                "_printf_i": "print_integer",
                "__sinit()": "__initialize_stdio",
                "memchr": "find_char",
                "_sfputs_r": "write_to_string"
            },
            "calling": [
                "FUN_080098d8",
                "FUN_08009124"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_08009f2c",
                "FUN_08009698",
                "FUN_08009358",
                "FUN_08009a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800937c": {
                    "6": "print_formatted_text",
                    "2": "print_formatted",
                    "1": "improved_printf",
                    "3": "print_formatted_string"
                },
                "param_1": {
                    "9": "stream",
                    "1": "file",
                    "4": "format_string"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "arg_list",
                    "8": "format",
                    "11": "format_string"
                },
                "param_3": {
                    "1": "vargs",
                    "3": "arg_list",
                    "4": "output_buffer",
                    "2": "buffer"
                },
                "param_4": {
                    "2": "length",
                    "1": "error_count"
                },
                "iVar1": {
                    "1": "sfputs_result",
                    "3": "write_result",
                    "22": "result"
                },
                "piVar2": {
                    "1": "temp_ptr",
                    "2": "arg_ptr",
                    "4": "ptr"
                },
                "bVar3": {
                    "2": "isdigit",
                    "4": "is_number",
                    "1": "has_number",
                    "7": "is_numeric",
                    "3": "found_digit"
                },
                "pbVar4": {
                    "2": "ptr",
                    "1": "format_str",
                    "21": "current_char"
                },
                "pbVar5": {
                    "1": "byte_ptr_var_2",
                    "2": "curr_char",
                    "14": "next_char"
                },
                "unaff_r9": {
                    "1": "int_var",
                    "2": "tmp"
                },
                "iVar6": {
                    "1": "result",
                    "7": "temp",
                    "4": "value",
                    "2": "temp_int",
                    "3": "temp_variable"
                },
                "local_8c": {
                    "1": "ptr_var_2",
                    "2": "args",
                    "3": "arg_pointer"
                },
                "local_88": {
                    "1": "uint_var_2",
                    "26": "flags"
                },
                "local_84": {
                    "1": "field_width",
                    "4": "width",
                    "23": "precision"
                },
                "local_80": {
                    "1": "format_char",
                    "5": "precision",
                    "8": "width"
                },
                "local_7c": {
                    "1": "arg_num_width",
                    "10": "width",
                    "2": "arg_width",
                    "5": "field_width"
                },
                "local_74": {
                    "2": "total_size",
                    "1": "result",
                    "4": "total_length",
                    "5": "total_chars"
                },
                "local_70": {
                    "1": "local_var6",
                    "5": "conversion",
                    "7": "specifier",
                    "4": "conversion_char",
                    "8": "conversion_specifier"
                },
                "local_6f": {
                    "1": "flag1",
                    "3": "space",
                    "22": "space_flag"
                },
                "local_6e": {
                    "1": "flag2",
                    "3": "plus",
                    "22": "plus_flag"
                },
                "local_45": {
                    "3": "flag",
                    "1": "prefix_character",
                    "4": "sign_flag",
                    "2": "prefix",
                    "8": "zero_flag"
                },
                "local_30": {
                    "1": "arg_ptr",
                    "2": "temp_flag",
                    "3": "dot_flag"
                },
                "__sinit": {
                    "1": "initialize_stdio",
                    "4": "initialize_stream"
                },
                "&DAT_0800aba4": {
                    "1": "stdin_ptr"
                },
                "&DAT_0800abc4": {
                    "1": "format_2"
                },
                "&DAT_0800ab84": {
                    "1": "format_3"
                },
                "__swsetup_r": {
                    "1": "setup_wide_conversion",
                    "4": "setup_stream"
                },
                "*pbVar5": {
                    "1": "format_ptr_value"
                },
                "__sfputs_r": {
                    "1": "write_stream"
                },
                "*param_2": {
                    "1": "format_ptr_value_2"
                },
                "__printf_i": {
                    "1": "handle_integer_conversion"
                },
                "&DAT_0800ab56": {
                    "1": "chars"
                },
                "_printf_i": {
                    "1": "write_integer_value",
                    "2": "print_integer"
                },
                "0x8009359": {
                    "1": "literal_1"
                },
                "FUN_08009d50": {
                    "1": "function_1"
                },
                "FUN_08009f2c": {
                    "1": "skip_string"
                },
                "FUN_08009698": {
                    "1": "process_float_conversion"
                },
                "FUN_08009358": {
                    "1": "function_4"
                },
                "FUN_08009a80": {
                    "1": "handle_preceding_specifier"
                },
                "__sinit()": {
                    "1": "__initialize_stdio"
                },
                "__swsetup_r()": {
                    "1": "__initialize_stdio"
                },
                "__sfputs_r()": {
                    "1": "__write_to_stdio"
                },
                "_printf_i()": {
                    "1": "__print_integer"
                },
                "unaff_r4": {
                    "1": "float_flags"
                },
                "unaff_r5": {
                    "1": "pointer"
                },
                "unaff_r6": {
                    "1": "hex_letters"
                },
                "unaff_r7": {
                    "1": "float_letters"
                },
                "unaff_r8": {
                    "1": "get_padding"
                },
                "unaff_r10": {
                    "1": "hex_digits"
                },
                "memchr": {
                    "1": "find_character_in_string"
                },
                "_sfputs_r": {
                    "1": "write_to_string"
                },
                "_printf_s": {
                    "1": "write_string_value"
                },
                "_printf_c": {
                    "1": "write_character_value"
                },
                "_printf_f": {
                    "1": "write_float_value"
                },
                "_printf_e": {
                    "1": "write_float_value"
                },
                "_printf_g": {
                    "1": "write_float_value"
                }
            }
        },
        "FUN_080095a8": {
            "entrypoint": "0x080095a8",
            "current_name": "process_data_080095a8",
            "code": "\nundefined4\nprocess_data_080095a8(undefined4 input,uint *data,uint *output_size,undefined4 param,code *callback)\n\n{\n  int index;\n  int result;\n  uint max_size;\n  uint offset;\n  bool is_flag_set;\n  \n  max_size = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    max_size = data[2];\n  }\n  *output_size = max_size;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *output_size = max_size + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *output_size = *output_size + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (index = 0; index < (int)(data[3] - *output_size); index = index + 1) {\n      result = (*callback)(input,param,(int)data + 0x19,1);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  max_size = (uint)*(byte *)((int)data + 0x43);\n  if (max_size != 0) {\n    max_size = 1;\n  }\n  offset = max_size;\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + max_size + 0x43) = 0x30;\n    offset = max_size + 2;\n    *(undefined *)((int)data + max_size + 0x44) = *(undefined *)((int)data + 0x45);\n  }\n  index = (*callback)(input,param,(int)data + 0x43,offset);\n  if (index != -1) {\n    max_size = data[3];\n    is_flag_set = (*data & 6) != 4;\n    if (is_flag_set) {\n      max_size = 0;\n    }\n    offset = 0;\n    if (!is_flag_set) {\n      max_size = max_size - *output_size;\n    }\n    if (!is_flag_set) {\n      max_size = max_size & ~((int)max_size >> 0x1f);\n    }\n    if ((int)data[4] < (int)data[2]) {\n      max_size = max_size + (data[2] - data[4]);\n    }\n    while( true ) {\n      if (max_size == offset) {\n        return 0;\n      }\n      index = (*callback)(input,param,(int)data + 0x1a,1);\n      if (index == -1) break;\n      offset = offset + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080095a8": "process_data_080095a8",
                "param_1": "input",
                "param_2": "data",
                "param_3": "output_size",
                "param_4": "param",
                "param_5": "callback",
                "iVar1": "index",
                "iVar2": "result",
                "uVar3": "max_size",
                "uVar4": "offset",
                "bVar5": "is_flag_set"
            },
            "calling": [
                "FUN_08009698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080095a8": {
                    "1": "extract_and_process_data",
                    "12": "process_data",
                    "3": "extract_data",
                    "4": "parse_data"
                },
                "param_1": {
                    "9": "input",
                    "5": "data",
                    "3": "input_value",
                    "1": "input1",
                    "2": "input_data",
                    "4": "input_param"
                },
                "param_2": {
                    "1": "source_param",
                    "10": "data",
                    "5": "header",
                    "2": "input_array"
                },
                "param_3": {
                    "2": "output_length",
                    "1": "arg3",
                    "8": "output_size",
                    "6": "output",
                    "4": "result"
                },
                "param_4": {
                    "1": "input_param",
                    "3": "param4",
                    "8": "param_4",
                    "2": "unused_param",
                    "9": "param"
                },
                "param_5": {
                    "2": "callback_fn",
                    "17": "callback",
                    "1": "memory_writer",
                    "5": "callback_func",
                    "3": "callback_function"
                },
                "iVar1": {
                    "1": "result",
                    "2": "loop_index",
                    "18": "index"
                },
                "iVar2": {
                    "1": "iteration_counter2",
                    "6": "return_value",
                    "2": "callback_result",
                    "18": "result"
                },
                "uVar3": {
                    "1": "max_fragment_size",
                    "3": "max_length",
                    "10": "max_size"
                },
                "uVar4": {
                    "1": "length",
                    "2": "count",
                    "3": "var_1",
                    "11": "offset"
                },
                "bVar5": {
                    "4": "is_condition_true",
                    "1": "is_true",
                    "3": "is_condition_met",
                    "6": "is_flag_set"
                },
                "*(char *)((int)arg2 + 0x43)": {
                    "1": "char_variable"
                },
                "*(byte *)((int)arg2 + 0x43)": {
                    "1": "byte_variable"
                },
                "*(char *)((int)param_2 + 0x43)": {
                    "1": "is_flag_set"
                },
                "*(byte *)((int)param_2 + 0x43)": {
                    "1": "byte_value"
                },
                "<original_variable_name>": {
                    "1": "<new_variable_name>"
                }
            }
        },
        "FUN_08009698": {
            "entrypoint": "0x08009698",
            "current_name": "print_formatted_output_08009698",
            "code": "\nuint print_formatted_output_08009698(undefined4 format_string,uint *args,undefined4 width,code *output_function,uint **arg_ptr)\n\n{\n  byte byte_value;\n  int result;\n  uint *ptr;\n  int result;\n  char *hex_digits;\n  uint base;\n  uint **arg_pp;\n  char **str_pp;\n  uint value;\n  uint length;\n  char *str_ptr;\n  char *formatted_string;\n  uint local_array [2];\n  \n  byte_value = *(byte *)(args + 6);\n  formatted_string = (char *)((int)args + 0x43);\n  if (byte_value != 0x6e) {\n    if (byte_value < 0x6f) {\n      if (byte_value != 99) {\n        if (byte_value < 100) {\n          if (byte_value == 0) goto LAB_08009852;\n          if (byte_value != 0x58) goto LAB_080096c8;\n          *(undefined *)((int)args + 0x45) = 0x58;\n          hex_digits = \"0123456789ABCDEF\";\nLAB_080097e2:\n          base = *args;\n          ptr = *arg_ptr;\n          *arg_ptr = ptr + 1;\n          if (((base & 0x80) == 0) && ((int)(base << 0x19) < 0)) {\n            value = (uint)*(ushort *)ptr;\n          }\n          else {\n            value = *ptr;\n          }\n          if ((int)(base << 0x1f) < 0) {\n            *args = base | 0x20;\n          }\n          if (value == 0) {\n            *args = *args & 0xffffffdf;\n          }\n          base = 0x10;\nLAB_08009778:\n          *(undefined *)((int)args + 0x43) = 0;\n        }\n        else {\n          if ((byte_value != 100) && (byte_value != 0x69)) goto LAB_080096c8;\n          value = *args;\n          ptr = *arg_ptr;\n          if ((value & 0x80) == 0) {\n            *arg_ptr = ptr + 1;\n            if ((value & 0x40) == 0) goto LAB_080096e8;\n            value = (uint)(short)*(ushort *)ptr;\n          }\n          else {\n            *arg_ptr = ptr + 1;\nLAB_080096e8:\n            value = *ptr;\n          }\n          if ((int)value < 0) {\n            value = -value;\n            *(undefined *)((int)args + 0x43) = 0x2d;\n          }\n          hex_digits = \"0123456789ABCDEF\";\n          base = 10;\n        }\n        length = args[1];\n        args[2] = length;\n        str_ptr = formatted_string;\n        if ((int)length < 0) {\n          if (value != 0) goto LAB_08009816;\nLAB_080098c4:\n          *(char *)((int)args + 0x42) = *hex_digits;\n          str_ptr = (char *)((int)args + 0x42);\n        }\n        else {\n          *args = *args & 0xfffffffb;\n          if (value == 0) {\n            if (length != 0) goto LAB_080098c4;\n          }\n          else {\nLAB_08009816:\n            do {\n              length = value / base;\n              str_ptr = str_ptr + -1;\n              *str_ptr = hex_digits[value - base * length];\n              value = length;\n            } while (length != 0);\n          }\n        }\n        if (((base == 8) && ((int)(*args << 0x1f) < 0)) && ((int)args[1] <= (int)args[4]))\n        {\n          str_ptr[-1] = '0';\n          str_ptr = str_ptr + -1;\n        }\n        args[4] = (int)formatted_string - (int)str_ptr;\n        formatted_string = str_ptr;\n        goto LAB_080097be;\n      }\n      ptr = *arg_ptr;\n      *arg_ptr = ptr + 1;\n      *(char *)((int)args + 0x42) = (char)*ptr;\nLAB_08009728:\n      formatted_string = (char *)((int)args + 0x42);\n      value = 1;\n    }\n    else {\n      if (byte_value != 0x73) {\n        if (byte_value < 0x74) {\n          if (byte_value == 0x6f) {\nLAB_0800974e:\n            value = *args;\n            ptr = *arg_ptr;\n            if ((value & 0x80) == 0) {\n              *arg_ptr = ptr + 1;\n              if ((value & 0x40) == 0) goto LAB_0800975c;\n              value = (uint)*(ushort *)ptr;\n            }\n            else {\n              *arg_ptr = ptr + 1;\nLAB_0800975c:\n              value = *ptr;\n            }\n            if (byte_value == 0x6f) {\n              base = 8;\n            }\n            else {\n              base = 10;\n            }\n            hex_digits = \"0123456789ABCDEF\";\n            goto LAB_08009778;\n          }\n          if (byte_value == 0x70) {\n            *args = *args | 0x20;\nLAB_0800970e:\n            hex_digits = \"0123456789abcdef\";\n            *(undefined *)((int)args + 0x45) = 0x78;\n            goto LAB_080097e2;\n          }\n        }\n        else {\n          if (byte_value == 0x75) goto LAB_0800974e;\n          if (byte_value == 0x78) goto LAB_0800970e;\n        }\nLAB_080096c8:\n        *(byte *)((int)args + 0x42) = byte_value;\n        goto LAB_08009728;\n      }\n      str_pp = (char **)*arg_ptr;\n      *arg_ptr = (uint *)(str_pp + 1);\n      formatted_string = *str_pp;\n      result = find_null_char(formatted_string,0,args[1]);\n      if (result != 0) {\n        args[1] = result - (int)formatted_string;\n      }\n      value = args[1];\n    }\n    args[4] = value;\n    *(undefined *)((int)args + 0x43) = 0;\n    goto LAB_080097be;\n  }\n  value = *args;\n  arg_pp = (uint **)*arg_ptr;\n  base = args[5];\n  if ((value & 0x80) == 0) {\n    *arg_ptr = (uint *)(arg_pp + 1);\n    ptr = *arg_pp;\n    if ((value & 0x40) == 0) goto LAB_0800983e;\n    *(short *)ptr = (short)base;\n  }\n  else {\n    *arg_ptr = (uint *)(arg_pp + 1);\n    ptr = *arg_pp;\nLAB_0800983e:\n    *ptr = base;\n  }\nLAB_08009852:\n  args[4] = 0;\nLAB_080097be:\n  result = format_and_print(format_string,args,local_array,width,output_function);\n  if ((result == -1) || (result = (*output_function)(format_string,width,formatted_string,args[4]), result == -1)) {\nLAB_080097d2:\n    value = 0xffffffff;\n  }\n  else {\n    if ((int)(*args << 0x1e) < 0) {\n      for (result = 0; result < (int)(args[3] - local_array[0]); result = result + 1) {\n        result = (*output_function)(format_string,width,(int)args + 0x19,1);\n        if (result == -1) goto LAB_080097d2;\n      }\n    }\n    value = args[3];\n    if ((int)args[3] < (int)local_array[0]) {\n      value = local_array[0];\n    }\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_08009698": "print_formatted_output_08009698",
                "param_1": "format_string",
                "param_2": "args",
                "param_3": "width",
                "param_4": "output_function",
                "param_5": "arg_ptr",
                "bVar1": "byte_value",
                "iVar2": "result",
                "puVar3": "ptr",
                "iVar4": "result",
                "pcVar5": "hex_digits",
                "uVar6": "base",
                "uVar9": "value",
                "uVar10": "length",
                "pcVar11": "str_ptr",
                "pcVar12": "formatted_string",
                "local_24": "local_array",
                "ppuVar7": "arg_pp",
                "ppcVar8": "str_pp",
                "memchr": "find_null_char",
                "_printf_common": "format_and_print"
            },
            "calling": [
                "FUN_0800937c"
            ],
            "called": [
                "FUN_08009f2c",
                "FUN_080095a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009698": {
                    "2": "print_formatted_data",
                    "1": "print_and_format",
                    "8": "print_formatted_output",
                    "5": "print_formatted_value",
                    "3": "print_formatted"
                },
                "param_1": {
                    "4": "format_specifier",
                    "1": "param",
                    "5": "format",
                    "17": "format_string"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "format_args",
                    "11": "args",
                    "3": "arg_list",
                    "4": "arguments"
                },
                "param_3": {
                    "1": "num_arguments",
                    "2": "num_args",
                    "10": "width"
                },
                "param_4": {
                    "1": "function_to_write_chars",
                    "2": "output_func",
                    "6": "print_function",
                    "9": "output_function"
                },
                "param_5": {
                    "1": "output_arg",
                    "4": "arg_ptr"
                },
                "bVar1": {
                    "1": "flag_byte",
                    "2": "byte_val",
                    "13": "byte_value"
                },
                "iVar2": {
                    "2": "loop_counter",
                    "1": "int_var",
                    "7": "index",
                    "10": "result"
                },
                "puVar3": {
                    "1": "pointer_value",
                    "2": "temp_ptr",
                    "6": "ptr",
                    "3": "arg_ptr"
                },
                "iVar4": {
                    "1": "int_var",
                    "4": "write_result",
                    "2": "inner_index",
                    "3": "status",
                    "5": "result"
                },
                "pcVar5": {
                    "1": "character_pointer",
                    "9": "hex_digits",
                    "5": "hex_chars",
                    "2": "char_ptr",
                    "6": "digits"
                },
                "uVar6": {
                    "1": "uint_var",
                    "16": "base"
                },
                "uVar9": {
                    "1": "result",
                    "3": "num",
                    "2": "output_length",
                    "6": "value"
                },
                "uVar10": {
                    "1": "original_width",
                    "5": "length",
                    "2": "arg_size",
                    "3": "value"
                },
                "pcVar11": {
                    "1": "result",
                    "2": "output_buffer",
                    "3": "output_string"
                },
                "pcVar12": {
                    "1": "src",
                    "2": "format_string"
                },
                "local_24": {
                    "1": "sizes",
                    "2": "buffer",
                    "4": "local_array"
                },
                "ppuVar7": {
                    "1": "pp_char"
                },
                "ppcVar8": {
                    "1": "pointer_to_char_pointer"
                },
                "param_2+6": {
                    "1": "byte_arg"
                },
                "param_2+43": {
                    "1": "format_char"
                },
                "param_2+45": {
                    "1": "char_to_print"
                },
                "memchr": {
                    "1": "find_null_char"
                },
                "_printf_common": {
                    "1": "format_and_print"
                },
                "FUNG_08009698": {
                    "1": "format_and_print"
                }
            }
        },
        "FUN_080098d8": {
            "entrypoint": "0x080098d8",
            "current_name": "print_formatted_output_080098d8",
            "code": "\nvoid print_formatted_output_080098d8(undefined4 format_string,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int data_ptr;\n  undefined4 format_ptr;\n  undefined4 arg1_ptr;\n  undefined4 arg2_ptr;\n  undefined4 arg3_ptr;\n  \n  data_ptr = DAT_20000090;\n  format_ptr = format_string;\n  arg1_ptr = arg1;\n  arg2_ptr = arg2;\n  arg3_ptr = arg3;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    initialize_sprintf(DAT_20000090);\n  }\n  invoke_sprintf(data_ptr,*(undefined4 *)(data_ptr + 8),format_string,&arg1_ptr,format_ptr,&arg1_ptr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080098d8": "print_formatted_output_080098d8",
                "param_1": "format_string",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "data_ptr",
                "uVar2": "format_ptr",
                "uStack_c": "arg1_ptr",
                "uStack_8": "arg2_ptr",
                "uStack_4": "arg3_ptr",
                "__sinit": "initialize_sprintf",
                "_vfiprintf_r": "invoke_sprintf"
            },
            "calling": [
                "FUN_08008078",
                "FUN_080077b0",
                "FUN_08007594",
                "FUN_08007544",
                "FUN_080075dc"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_0800937c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080098d8": {
                    "1": "print_formatted",
                    "2": "printf_wrapper",
                    "3": "print_formatted_data",
                    "11": "print_formatted_output",
                    "7": "print_formatted_string"
                },
                "param_1": {
                    "1": "output_buffer",
                    "27": "format_string"
                },
                "param_2": {
                    "1": "param2_value",
                    "23": "arg1",
                    "5": "arg_1"
                },
                "param_3": {
                    "1": "param3_value",
                    "5": "arg_2",
                    "23": "arg2"
                },
                "param_4": {
                    "1": "param4_value",
                    "23": "arg3",
                    "5": "arg_3"
                },
                "iVar1": {
                    "3": "data",
                    "1": "internal_variable1",
                    "8": "data_ptr",
                    "4": "data_pointer",
                    "7": "data_address",
                    "2": "data_offset"
                },
                "uVar2": {
                    "1": "param",
                    "2": "format",
                    "6": "format_ptr",
                    "5": "format_string_copy"
                },
                "uStack_c": {
                    "4": "arg1_ptr",
                    "3": "temp_arg1",
                    "1": "arg1_address",
                    "2": "stack_var1"
                },
                "uStack_8": {
                    "4": "arg2_ptr",
                    "3": "temp_arg2",
                    "1": "arg_2_ptr",
                    "2": "stack_var2"
                },
                "uStack_4": {
                    "1": "local_var3",
                    "2": "arg3_copy",
                    "3": "temp_arg3",
                    "4": "arg3_ptr"
                },
                "__sinit": {
                    "1": "initialize_sprintf"
                },
                "_vfiprintf_r": {
                    "1": "invoke_sprintf"
                }
            }
        },
        "FUN_08009908": {
            "entrypoint": "0x08009908",
            "current_name": "allocate_or_copy_memory_08009908",
            "code": "\nint allocate_or_copy_memory_08009908(int source,uint size)\n\n{\n  undefined4 malloc_size;\n  int result;\n  uint usable_size;\n  \n  malloc_size = DAT_20000090;\n  if (source != 0) {\n    if (size == 0) {\n      free_memory();\n      result = 0;\n    }\n    else {\n      usable_size = get_usable_size();\n      result = source;\n      if ((usable_size < size) && (result = allocate_memory(malloc_size,size), result != 0)) {\n        copy_memory(result,source,size);\n        free_memory(malloc_size,source);\n      }\n    }\n    return result;\n  }\n  result = allocate_memory(DAT_20000090,size,size,&DAT_20000090);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009908": "allocate_or_copy_memory_08009908",
                "param_1": "source",
                "param_2": "size",
                "uVar1": "malloc_size",
                "iVar2": "result",
                "uVar3": "usable_size",
                "_free_r": "free_memory",
                "_malloc_usable_size_r": "get_usable_size",
                "_malloc_r": "allocate_memory",
                "memcpy": "copy_memory"
            },
            "calling": [
                "FUN_080027f0",
                "FUN_0800288c",
                "FUN_08002acc"
            ],
            "called": [
                "FUN_080091b0",
                "FUN_0800a154",
                "FUN_08009270",
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009908": {
                    "1": "resize_and_copy",
                    "12": "allocate_or_copy_memory",
                    "4": "resize_and_copy_memory",
                    "2": "reallocate_memory",
                    "5": "resize_memory_block"
                },
                "param_1": {
                    "3": "source_memory",
                    "1": "old_memory",
                    "6": "source_ptr",
                    "9": "source",
                    "2": "old_block"
                },
                "param_2": {
                    "1": "new_block_size",
                    "16": "size",
                    "2": "length",
                    "11": "new_size"
                },
                "uVar1": {
                    "1": "default_mem",
                    "2": "malloc_size"
                },
                "iVar2": {
                    "1": "dest_ptr",
                    "2": "new_block",
                    "11": "result",
                    "5": "new_memory"
                },
                "uVar3": {
                    "1": "old_block_size",
                    "3": "current_size",
                    "23": "usable_size"
                },
                "_free_r": {
                    "3": "free_memory",
                    "1": "free_memory_with_context"
                },
                "_malloc_usable_size_r": {
                    "1": "get_usable_memory_size_with_context",
                    "2": "get_usable_size"
                },
                "_malloc_r": {
                    "3": "allocate_memory",
                    "1": "allocate_memory_with_context"
                },
                "memcpy": {
                    "6": "copy_memory"
                },
                "FUN_080091b0": {
                    "1": "copy_memory"
                },
                "FUN_0800a154": {
                    "1": "allocate_memory"
                },
                "FUN_08009270": {
                    "1": "get_usable_size"
                },
                "FUN_080091d8": {
                    "1": "free_memory"
                }
            }
        },
        "FUN_08009918": {
            "entrypoint": "0x08009918",
            "current_name": "allocate_memory_08009918",
            "code": "\nvoid allocate_memory_08009918(int *result,undefined4 size)\n\n{\n  int allocation_result;\n  \n  DAT_20000a38 = 0;\n  allocation_result = increase_memory_break(size);\n  if ((allocation_result == -1) && (DAT_20000a38 != 0)) {\n    *result = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009918": "allocate_memory_08009918",
                "param_1": "result",
                "param_2": "size",
                "iVar1": "allocation_result",
                "_sbrk": "increase_memory_break"
            },
            "calling": [
                "FUN_08009270"
            ],
            "called": [
                "FUN_08008804"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009918": {
                    "2": "initialize_memory_allocation",
                    "1": "initialize_memory_block",
                    "25": "allocate_memory",
                    "3": "initialize_memory"
                },
                "param_1": {
                    "1": "result_pointer",
                    "2": "output",
                    "4": "memory_address",
                    "3": "memory_pointer",
                    "9": "result"
                },
                "param_2": {
                    "4": "allocation_size",
                    "3": "memory_size",
                    "23": "size",
                    "1": "block_size"
                },
                "iVar1": {
                    "1": "sbrk_result",
                    "3": "result",
                    "15": "allocation_result",
                    "2": "memory_address"
                },
                "_sbrk": {
                    "1": "increase_memory_break"
                },
                "*param_1": {
                    "1": "allocated_memory_address"
                },
                "FUN_08008804": {
                    "1": "get_data_pointer"
                }
            }
        },
        "FUN_08009938": {
            "entrypoint": "0x08009938",
            "current_name": "find_character_08009938",
            "code": "\nchar * find_character_08009938(char *string,char character)\n\n{\n  char *current_char;\n  \n  do {\n    current_char = string;\n    if (*current_char == '\\0') {\n      if (character != '\\0') {\n        current_char = (char *)0x0;\n      }\n      return current_char;\n    }\n    string = current_char + 1;\n  } while (character != *current_char);\n  return current_char;\n}\n\n",
            "renaming": {
                "FUN_08009938": "find_character_08009938",
                "param_1": "string",
                "param_2": "character",
                "pcVar1": "current_char"
            },
            "calling": [
                "FUN_0800997e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009938": {
                    "4": "find_char_in_string",
                    "1": "find_first_matching_character",
                    "22": "find_character",
                    "3": "find_first_occurrence"
                },
                "param_1": {
                    "26": "string",
                    "1": "input_string",
                    "4": "str"
                },
                "param_2": {
                    "4": "target_char",
                    "24": "character",
                    "1": "target_character"
                },
                "pcVar1": {
                    "8": "current_character",
                    "2": "current_position",
                    "20": "current_char"
                }
            }
        },
        "FUN_08009954": {
            "entrypoint": "0x08009954",
            "current_name": "copy_string_08009954",
            "code": "\nvoid copy_string_08009954(char *destination,char *source,int length)\n\n{\n  char current_char;\n  int remaining_length;\n  char *dest_ptr;\n  \n  do {\n    dest_ptr = destination;\n    remaining_length = length;\n    if (remaining_length == 0) {\n      return;\n    }\n    current_char = *source;\n    destination = dest_ptr + 1;\n    *dest_ptr = current_char;\n    source = source + 1;\n    length = remaining_length + -1;\n  } while (current_char != '\\0');\n  for (; destination != dest_ptr + remaining_length; destination = destination + 1) {\n    *destination = '\\0';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009954": "copy_string_08009954",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "cVar1": "current_char",
                "iVar2": "remaining_length",
                "pcVar3": "dest_ptr"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009954": {
                    "2": "copy_string_with_length",
                    "1": "copy_string_with_null_terminator",
                    "18": "copy_string",
                    "4": "copy_string_with_limit"
                },
                "param_1": {
                    "27": "destination",
                    "4": "dest"
                },
                "param_2": {
                    "27": "source",
                    "4": "src"
                },
                "param_3": {
                    "1": "count",
                    "8": "size",
                    "18": "length",
                    "3": "limit"
                },
                "cVar1": {
                    "5": "current_character",
                    "1": "ch",
                    "24": "current_char"
                },
                "iVar2": {
                    "1": "length",
                    "7": "remaining_size",
                    "17": "remaining_length"
                },
                "pcVar3": {
                    "4": "destination_ptr",
                    "2": "dst_ptr",
                    "3": "dest_pointer",
                    "1": "current_position",
                    "13": "dest_ptr"
                }
            }
        },
        "FUN_0800997e": {
            "entrypoint": "0x0800997e",
            "current_name": "find_last_occurrence_0800997e",
            "code": "\nint find_last_occurrence_0800997e(int string,int character,undefined4 start_index,undefined4 end_index)\n\n{\n  int last_occurrence;\n  int previous_occurrence;\n  \n  if (character != 0) {\n    previous_occurrence = 0;\n    while (last_occurrence = strchr(string,character,start_index,string,end_index), last_occurrence != 0) {\n      string = last_occurrence + 1;\n      previous_occurrence = last_occurrence;\n    }\n    return previous_occurrence;\n  }\n  previous_occurrence = strchr();\n  return previous_occurrence;\n}\n\n",
            "renaming": {
                "FUN_0800997e": "find_last_occurrence_0800997e",
                "param_1": "string",
                "param_2": "character",
                "param_3": "start_index",
                "param_4": "end_index",
                "iVar1": "last_occurrence",
                "iVar2": "previous_occurrence"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [
                "FUN_08009938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800997e": {
                    "1": "find_first_occurrence",
                    "29": "find_last_occurrence"
                },
                "param_1": {
                    "20": "string",
                    "11": "str"
                },
                "param_2": {
                    "1": "search_character",
                    "9": "target_char",
                    "18": "character",
                    "2": "target"
                },
                "param_3": {
                    "2": "param_3",
                    "5": "search_start",
                    "1": "c1",
                    "8": "start_index",
                    "4": "start_pos",
                    "3": "start"
                },
                "param_4": {
                    "1": "value_2",
                    "2": "param_4",
                    "4": "end_pos",
                    "5": "search_end",
                    "9": "end_index",
                    "3": "end"
                },
                "iVar1": {
                    "3": "occurrence_index",
                    "6": "occurrence",
                    "1": "current_index",
                    "14": "last_occurrence",
                    "2": "last_index"
                },
                "iVar2": {
                    "5": "result",
                    "1": "prev_occurrence",
                    "3": "last_occurrence_index",
                    "8": "last_occurrence",
                    "9": "previous_occurrence"
                },
                "FUN_08009938": {
                    "1": "strchr"
                },
                "char": {
                    "1": "target_char"
                }
            }
        },
        "FUN_080099a4": {
            "entrypoint": "0x080099a4",
            "current_name": "find_substring_080099a4",
            "code": "\nchar * find_substring_080099a4(char *string1,char *string2)\n\n{\n  char *current_char1;\n  char *current_char2;\n  char *current_char2_copy;\n  \n  if (*string1 == '\\0') {\n    if (*string2 != '\\0') {\n      string1 = (char *)0x0;\n    }\n    return string1;\n  }\n  do {\n    current_char1 = string1;\n    if (*current_char1 == '\\0') {\n      return (char *)0x0;\n    }\n    current_char2_copy = string2 + -1;\n    current_char2 = current_char1 + -1;\n    do {\n      current_char2_copy = current_char2_copy + 1;\n      if (*current_char2_copy == '\\0') {\n        return current_char1;\n      }\n      current_char2 = current_char2 + 1;\n      string1 = current_char1 + 1;\n    } while (*current_char2 == *current_char2_copy);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080099a4": "find_substring_080099a4",
                "param_1": "string1",
                "param_2": "string2",
                "pcVar1": "current_char1",
                "pcVar2": "current_char2",
                "pcVar3": "current_char2_copy"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080099a4": {
                    "1": "find_first_common_substring",
                    "2": "find_first_match",
                    "15": "find_substring",
                    "4": "find_first_occurrence"
                },
                "param_1": {
                    "1": "string_one",
                    "2": "str1",
                    "4": "string_1",
                    "16": "string1"
                },
                "param_2": {
                    "1": "target_string",
                    "4": "string_2",
                    "7": "substring",
                    "15": "string2",
                    "2": "str2"
                },
                "pcVar1": {
                    "1": "current_text_pointer",
                    "10": "current_char1",
                    "4": "current_char_str1",
                    "2": "current_char_1",
                    "9": "current_char"
                },
                "pcVar2": {
                    "2": "current_char_2",
                    "4": "current_char_str2",
                    "10": "current_char2",
                    "1": "curr_char_str2",
                    "3": "compare_char"
                },
                "pcVar3": {
                    "3": "current_char2_copy",
                    "1": "next_substring_char",
                    "2": "temp_char_str2"
                },
                "*param_1": {
                    "1": "first_char_str1"
                },
                "*param_2": {
                    "1": "current_char2"
                },
                "char *": {
                    "1": "string"
                },
                "*pcVar1": {
                    "1": "first_char_current"
                },
                "*pcVar3": {
                    "1": "first_char_copy"
                },
                "pcVar3+1": {
                    "1": "compare_next_char"
                },
                "pcVar2+1": {
                    "1": "next_char1"
                },
                "param_1+1": {
                    "1": "next_char2"
                }
            }
        },
        "FUN_08009a80": {
            "entrypoint": "0x08009a80",
            "current_name": "process_data_08009a80",
            "code": "\nuint process_data_08009a80(undefined4 *output,undefined4 *input)\n\n{\n  int data_ptr;\n  uint result;\n  ushort_value flags;\n  \n  data_ptr = DAT_20000090;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    initialize_data(DAT_20000090);\n  }\n  if (input == &DAT_0800aba4) {\n    input = *(undefined4 **)(data_ptr + 4);\n  }\n  else if (input == (undefined4 *)&DAT_0800abc4) {\n    input = *(undefined4 **)(data_ptr + 8);\n  }\n  else if (input == (undefined4 *)&DAT_0800ab84) {\n    input = *(undefined4 **)(data_ptr + 0xc);\n  }\n  flags = *(ushort_value *)(input + 3);\n  result = (uint)flags;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *output = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)input[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input[0xd] != input + 0x11) {\n          free_memory(output);\n        }\n        input[0xd] = 0;\n      }\n      *(ushort_value *)(input + 3) = *(ushort_value *)(input + 3) & 0xffdb;\n      input[1] = 0;\n      *input = input_data_length;\n    }\n    *(ushort_value *)(input + 3) = *(ushort_value *)(input + 3) | 8;\n  }\n  if ((input_data_length == 0) && ((*(ushort_value *)(input + 3) & 0x280) != 0x200)) {\n    make_buffer(output,input);\n  }\n  flags = *(ushort_value *)(input + 3);\n  result = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      result = param_2_ptr;\n    }\n    param_2_val = result;\n  }\n  else {\n    param_2_val = 0;\n    param_2_val2 = -param_2_ptr;\n  }\n  if (input_data_length == 0) {\n    flags = *(ushort_value *)(input + 3);\n    result = (int)(short_value)flags & 0x80;\n    if (result != 0) {\nLAB_08009ab0:\n      *(ushort_value *)(input + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009a80": "process_data_08009a80",
                "param_1": "output",
                "param_2": "input",
                "iVar1": "data_ptr",
                "uVar2": "result",
                "uVar3": "flags",
                "__sinit": "initialize_data",
                "_free_r": "free_memory",
                "__smakebuf_r": "make_buffer",
                "param_2[4]": "input_data_length",
                "short": "short_value",
                "param_2[5]": "param_2_ptr",
                "param_2[2]": "param_2_val",
                "param_2[6]": "param_2_val2"
            },
            "calling": [
                "FUN_0800937c",
                "FUN_0800932c"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_08009eac",
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009a80": {
                    "2": "decode_and_process_data",
                    "21": "process_data",
                    "1": "process_buffer"
                },
                "param_1": {
                    "1": "out_result",
                    "6": "output_param",
                    "2": "output_data",
                    "9": "output",
                    "3": "output_buffer"
                },
                "param_2": {
                    "9": "input",
                    "3": "input_buffer",
                    "1": "input_pointer",
                    "2": "input_array",
                    "5": "input_data",
                    "6": "input_param"
                },
                "iVar1": {
                    "1": "buffer_data",
                    "3": "data_offset",
                    "8": "data_ptr",
                    "4": "data_pointer",
                    "7": "data_address"
                },
                "uVar2": {
                    "2": "return_value",
                    "1": "value",
                    "25": "result"
                },
                "uVar3": {
                    "7": "flag",
                    "1": "temp_val",
                    "3": "input_value",
                    "2": "value",
                    "11": "flags"
                },
                "__sinit": {
                    "14": "initialize_data",
                    "1": "initialize_data_struct",
                    "3": "initialize"
                },
                "_free_r": {
                    "12": "free_memory",
                    "1": "free_resource"
                },
                "__smakebuf_r": {
                    "1": "allocate_memory_and_initialize",
                    "7": "create_buffer",
                    "10": "make_buffer"
                },
                "FUN_08009d50": {
                    "1": "function_1",
                    "2": "sub_function1",
                    "4": "initialize_data"
                },
                "FUN_08009eac": {
                    "3": "calculate_value",
                    "1": "process_data_extra",
                    "2": "calculate"
                },
                "FUN_080091d8": {
                    "1": "perform_operation",
                    "2": "handle_error"
                },
                "&DAT_0800aba4": {
                    "1": "constant_data1",
                    "3": "constant1"
                },
                "&DAT_0800abc4": {
                    "1": "pointer_b",
                    "3": "constant2"
                },
                "&DAT_0800ab84": {
                    "1": "pointer_c",
                    "3": "constant3"
                },
                "param_2 + 3": {
                    "1": "input_data"
                },
                "&DAT_08009d50": {
                    "1": "sub_function1"
                },
                "&DAT_08009eac": {
                    "1": "sub_function2"
                },
                "&DAT_080091d8": {
                    "1": "sub_function3"
                },
                "param_2[4]": {
                    "1": "empty_flag"
                },
                "(ushort *)(param_2 + 3) & 0x280": {
                    "1": "value2"
                },
                "short": {
                    "1": "short_value"
                },
                "&param_2 + 3": {
                    "1": "final_flag"
                },
                "&param_2[4]": {
                    "1": "condition_variable"
                },
                "&param_2[5]": {
                    "1": "variable_1"
                },
                "&param_2[2]": {
                    "1": "variable_2"
                },
                "&param_2[6]": {
                    "1": "variable_3"
                },
                "DAT_20000090": {
                    "1": "data_struct"
                },
                "(int)(uVar2 << 0x1c)": {
                    "1": "check_bit1"
                },
                "(int)(uVar2 << 0x1b)": {
                    "1": "check_bit2"
                },
                "(int)(uVar2 << 0x1d)": {
                    "1": "check_bit3"
                },
                "(undefined4 *)param_2[0xd]": {
                    "1": "ptr_check"
                },
                "param_2 + 0x11": {
                    "1": "end_ptr"
                },
                "*(ushort *)(param_2 + 3) & 0xffdb": {
                    "1": "clear_bit_flag"
                },
                "(ushort *)(param_2 + 3)": {
                    "1": "flag_ptr"
                },
                "(*(ushort *)(param_2 + 3) & 0x280) != 0x200": {
                    "1": "check_flags"
                },
                "(uint)uVar3 << 0x1e)": {
                    "1": "check_bit4"
                },
                "param_2[5]": {
                    "1": "param_2_ptr"
                },
                "param_2[2]": {
                    "1": "param_2_val"
                },
                "param_2[6]": {
                    "1": "value5"
                },
                "(int)(short)uVar3 & 0x80": {
                    "1": "value6"
                },
                "F_08009d50": {
                    "1": "sub_function_1"
                },
                "F_08009eac": {
                    "1": "sub_function_2"
                },
                "F_080091d8": {
                    "1": "sub_function_3"
                },
                "*param_1": {
                    "2": "output"
                },
                "*param_2": {
                    "2": "input"
                },
                "*(ushort *)(param_2 + 3)": {
                    "1": "flags_value"
                },
                "FUB_08009d50": {
                    "1": "process_subfunc1"
                },
                "FUB_08009eac": {
                    "1": "process_subfunc2"
                },
                "FUB_080091d8": {
                    "1": "process_subfunc3"
                },
                "__free_r": {
                    "1": "free_memory"
                },
                "*(int *)(DAT_20000090 + 0x18)": {
                    "1": "data_check"
                },
                "*(undefined4 **)(iVar1 + 4)": {
                    "1": "data_value_1"
                },
                "*(undefined4 **)(iVar1 + 8)": {
                    "1": "data_value_2"
                },
                "*(undefined4 **)(iVar1 + 0xc)": {
                    "1": "data_value_3"
                },
                "(undefined4 *)param_2[0xd] != (undefined4 *)0x0": {
                    "1": "is_valid"
                },
                "(undefined4 *)param_2[0xd] != param_2 + 0x11": {
                    "1": "is_different"
                },
                "(param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)": {
                    "1": "is_buffer_empty"
                }
            }
        },
        "FUN_08009b5c": {
            "entrypoint": "0x08009b5c",
            "current_name": "handle_error_08009b5c",
            "code": "\nvoid handle_error_08009b5c(void)\n\n{\n  uint *pointer;\n  int counter;\n  int *pointer1;\n  int *pointer2;\n  uint value;\n  ushort flag;\n  int temp_value;\n  code *function_pointer;\n  int loop_counter;\n  uint temp_value;\n  code *jump_table;\n  bool bool_var;\n  undefined8 exit_code;\n  \n  raise(6);\n  jump_table = (code *)0x8009b6b;\n  exit_code = _exit(1);\n  pointer1 = (int *)((ulonglong)exit_code >> 0x20);\n  pointer = (uint *)exit_code;\n  flag = *(ushort *)(pointer1 + 3);\n  value = (uint)flag;\n  if ((int)(value << 0x1c) < 0) {\n    counter = pointer1[4];\n    if (counter != 0) {\n      temp_value = value << 0x1e;\n      bool_var = temp_value != 0;\n      if (bool_var) {\n        temp_value = 0;\n      }\n      loop_counter = *pointer1;\n      if (!bool_var) {\n        temp_value = pointer1[5];\n      }\n      *pointer1 = counter;\n      pointer1[2] = temp_value;\n      for (loop_counter = loop_counter - counter; 0 < loop_counter; loop_counter = loop_counter - temp_value) {\n        temp_value = (*(code *)pointer1[10])(pointer,pointer1[8],counter,loop_counter);\n        if (temp_value < 1) {\n          flag = *(ushort *)(pointer1 + 3);\n          goto LAB_08009c62;\n        }\n        counter = counter + temp_value;\n      }\n    }\n  }\n  else if (((0 < pointer1[1]) || (0 < pointer1[0x10])) &&\n          (function_pointer = (code *)pointer1[0xb], function_pointer != (code *)0x0)) {\n    temp_value = *pointer;\n    *pointer = 0;\n    if ((flag & 0x1000) == 0) {\n      counter = (*function_pointer)(pointer,pointer1[8],value & 0x1000,1);\n      if ((counter == -1) && (value = *pointer, value != 0)) {\n        if ((value != 0x1d) && (value != 0x16)) {\n          *(ushort *)(pointer1 + 3) = *(ushort *)(pointer1 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*jump_table)();\n          return;\n        }\n        *pointer = temp_value;\n        goto LAB_08009b86;\n      }\n    }\n    else {\n      counter = pointer1[0x15];\n    }\n    if (((int)((uint)*(ushort *)(pointer1 + 3) << 0x1d) < 0) &&\n       (counter = counter - pointer1[1], pointer1[0xd] != 0)) {\n      counter = counter - pointer1[0x10];\n    }\n    counter = (*(code *)pointer1[0xb])(pointer,pointer1[8],counter,0);\n    flag = *(ushort *)(pointer1 + 3);\n    if ((counter == -1) &&\n       ((0x1d < *pointer || (-1 < (int)((0x20400001U >> (*pointer & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n      *(ushort *)(pointer1 + 3) = flag | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jump_table)(0xffffffff);\n      return;\n    }\n    pointer1[1] = 0;\n    *pointer1 = pointer1[4];\n    if (((int)((uint)flag << 0x13) < 0) && ((counter != -1 || (*pointer == 0)))) {\n      pointer1[0x15] = counter;\n    }\n    pointer2 = (int *)pointer1[0xd];\n    *pointer = temp_value;\n    if (pointer2 != (int *)0x0) {\n      if (pointer2 != pointer1 + 0x11) {\n        _free_r(pointer);\n      }\n      pointer1[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jump_table)();\n      return;\n    }\n  }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(0);\n  return;\n}\n\n",
            "renaming": {
                "puVar1": "pointer",
                "iVar2": "counter",
                "piVar3": "pointer1",
                "piVar4": "pointer2",
                "uVar5": "value",
                "uVar6": "flag",
                "iVar7": "temp_value",
                "pcVar8": "function_pointer",
                "iVar9": "loop_counter",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "bVar11": "bool_var",
                "uVar12": "exit_code",
                "FUN_08009b5c": "handle_error_08009b5c",
                "uVar10": "temp_value",
                "iVar4": "var11",
                "iVar": "integer_variable4",
                "iVar3": "temp_int_value5"
            },
            "calling": [
                "FUN_080090cc",
                "FUN_0800a18c"
            ],
            "called": [
                "FUN_08009fe8",
                "FUN_08008868",
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "puVar1": {
                    "1": "pointer3",
                    "3": "pointer",
                    "2": "pointer_value"
                },
                "iVar2": {
                    "1": "variable2",
                    "2": "offset",
                    "3": "counter"
                },
                "piVar3": {
                    "1": "integer_pointer_1",
                    "2": "pointer",
                    "3": "pointer1"
                },
                "piVar4": {
                    "1": "secondary_array_pointer",
                    "3": "pointer2",
                    "2": "temp_pointer"
                },
                "uVar5": {
                    "1": "ushort_var",
                    "2": "var1",
                    "4": "value"
                },
                "uVar6": {
                    "5": "flag",
                    "1": "ushort_var2",
                    "2": "var2",
                    "3": "flags"
                },
                "iVar7": {
                    "1": "variable2",
                    "3": "temp_value",
                    "2": "offset"
                },
                "pcVar8": {
                    "1": "exception_callback",
                    "10": "function_pointer",
                    "2": "function_ptr"
                },
                "iVar9": {
                    "1": "temp_length",
                    "2": "loop_counter"
                },
                "UNRECOVERED_JUMPTABLE_00": {
                    "12": "jump_table",
                    "1": "jump_table_function"
                },
                "bVar11": {
                    "2": "boolean_var",
                    "1": "var7",
                    "4": "bool_var",
                    "3": "boolean_variable"
                },
                "uVar12": {
                    "5": "exit_code",
                    "1": "exit_result",
                    "4": "result"
                },
                "FUN_08009fe8": {
                    "1": "process_data",
                    "4": "calculate_result"
                },
                "FUN_08008868": {
                    "1": "subfunction2",
                    "4": "initialize"
                },
                "FUN_080091d8": {
                    "5": "allocate_memory",
                    "1": "subfunction3"
                },
                "FUN_08009b5c": {
                    "4": "handle_error",
                    "1": "reengineer_function"
                },
                "uVar10": {
                    "1": "unsigned_var3",
                    "2": "temp_value2",
                    "3": "temp_value"
                },
                "iVar10": {
                    "1": "loop_increment"
                },
                "iVar4": {
                    "1": "var11"
                },
                "iVar": {
                    "1": "integer_variable4"
                },
                "param_1": {
                    "1": "input"
                },
                "iVar3": {
                    "1": "temp_int_value5"
                },
                "iVar8": {
                    "1": "temp_int_value10"
                },
                "iVar6": {
                    "1": "temp_int_value7"
                },
                "iVar5": {
                    "1": "temp_int_value8"
                }
            }
        },
        "FUN_08009c7c": {
            "entrypoint": "0x08009c7c",
            "current_name": "process_data_08009c7c",
            "code": "\nundefined4 process_data_08009c7c(uint *param_array,int *param_ptr)\n\n{\n  undefined4 result;\n  int counter;\n  int *pointer;\n  uint ushort_value;\n  ushort temp2;\n  int var5;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *function_ptr;\n  int value5;\n  uint temp3;\n  code *jump_table;\n  bool flag;\n  \n  if (param_b[4] != 0) {\n    if ((param_array != (uint *)0x0) && (param_b[6] == 0)) {\n      __sinit();\n    }\n    if (param_ptr == &DAT_0800aba4) {\n      param_ptr = (int *)param_b[1];\n    }\n    else if (param_ptr == (int *)&DAT_0800abc4) {\n      param_ptr = (int *)param_b[2];\n    }\n    else if (param_ptr == (int *)&DAT_0800ab84) {\n      param_ptr = (int *)param_b[3];\n    }\n    if (*(short *)(param_ptr + 3) != 0) {\n      temp2 = *(ushort *)(param_ptr + 3);\n      ushort_value = (uint)temp2;\n      if ((int)(ushort_value << 0x1c) < 0) {\n        counter = param_b[4];\n        if (counter != 0) {\n          var5 = ushort_value << 0x1e;\n          flag = var5 != 0;\n          if (flag) {\n            var5 = 0;\n          }\n          value5 = *param_ptr;\n          if (!flag) {\n            var5 = param_b[5];\n          }\n          *param_ptr = counter;\n          param_ptr[2] = var5;\n          for (value5 = value5 - counter; 0 < value5; value5 = value5 - var5) {\n            var5 = (*(code *)param_b[10])(param_array,param_b[8],counter,value5,unaff_r4,unaff_r5);\n            if (var5 < 1) {\n              temp2 = *(ushort *)(param_ptr + 3);\n              goto LAB_08009c62;\n            }\n            counter = counter + var5;\n          }\n        }\n      }\n      else if (((0 < param_b[1]) || (0 < param_b[0x10])) &&\n              (function_ptr = (code *)param_b[0xb], function_ptr != (code *)0x0)) {\n        temp3 = *param_array;\n        *param_array = 0;\n        if ((temp2 & 0x1000) == 0) {\n          counter = (*function_ptr)(param_array,param_b[8],ushort_value & 0x1000,1);\n          if ((counter == -1) && (ushort_value = *param_array, ushort_value != 0)) {\n            if ((ushort_value != 0x1d) && (ushort_value != 0x16)) {\n              *(ushort *)(param_ptr + 3) = *(ushort *)(param_ptr + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              result = (*jump_table)();\n              return result;\n            }\n            *param_array = temp3;\n            goto LAB_08009b86;\n          }\n        }\n        else {\n          counter = param_b[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_ptr + 3) << 0x1d) < 0) &&\n           (counter = counter - param_b[1], param_b[0xd] != 0)) {\n          counter = counter - param_b[0x10];\n        }\n        counter = (*(code *)param_b[0xb])(param_array,param_b[8],counter,0);\n        temp2 = *(ushort *)(param_ptr + 3);\n        if ((counter == -1) &&\n           ((0x1d < *param_array || (-1 < (int)((0x20400001U >> (*param_array & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n          *(ushort *)(param_ptr + 3) = temp2 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          result = (*jump_table)(0xffffffff);\n          return result;\n        }\n        param_b[1] = 0;\n        *param_ptr = param_b[4];\n        if (((int)((uint)temp2 << 0x13) < 0) && ((counter != -1 || (*param_array == 0)))) {\n          param_b[0x15] = counter;\n        }\n        pointer = (int *)param_b[0xd];\n        *param_array = temp3;\n        if (pointer != (int *)0x0) {\n          if (pointer != param_ptr + 0x11) {\n            _free_r(param_array);\n          }\n          param_b[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          result = (*jump_table)();\n          return result;\n        }\n      }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      result = (*jump_table)(0);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009c7c": "process_data_08009c7c",
                "param_1": "param_array",
                "param_2": "param_ptr",
                "uVar1": "result",
                "iVar2": "counter",
                "piVar3": "pointer",
                "uVar4": "ushort_value",
                "uVar5": "temp2",
                "iVar6": "var5",
                "pcVar7": "function_ptr",
                "iVar8": "value5",
                "uVar9": "temp3",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "bVar10": "flag",
                "param_1[6]": "param_b[6]",
                "param_1[1]": "param_b[1]",
                "param_1[2]": "param_b[2]",
                "param_1[3]": "param_b[3]",
                "param_2[4]": "param_b[4]",
                "param_2[5]": "param_b[5]",
                "param_2[10]": "param_b[10]",
                "param_2[8]": "param_b[8]",
                "param_2[0x15]": "param_b[0x15]",
                "param_2[1]": "param_b[1]",
                "param_2[0x10]": "param_b[0x10]",
                "param_2[0xb]": "param_b[0xb]",
                "param_2[0xd]": "param_b[0xd]"
            },
            "calling": [
                "FUN_0800932c"
            ],
            "called": [
                "FUN_08009d50"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009c7c": {
                    "1": "process_function",
                    "9": "process_data"
                },
                "param_1": {
                    "4": "input_array",
                    "1": "param_a",
                    "8": "param_array",
                    "2": "array_ptr"
                },
                "param_2": {
                    "3": "param_array",
                    "1": "info_array",
                    "2": "info",
                    "5": "param_ptr"
                },
                "uVar1": {
                    "16": "result",
                    "13": "return_value"
                },
                "iVar2": {
                    "2": "temp_var1",
                    "1": "var_1",
                    "4": "var1",
                    "6": "counter",
                    "3": "value1"
                },
                "piVar3": {
                    "1": "temp_pointer",
                    "3": "var2",
                    "2": "pointer1",
                    "5": "ptr"
                },
                "uVar4": {
                    "3": "ushort_value",
                    "1": "var_3",
                    "2": "ushort_var"
                },
                "uVar5": {
                    "2": "var4",
                    "1": "u_var5"
                },
                "iVar6": {
                    "1": "inner_loop_var",
                    "2": "increment",
                    "3": "temp_var"
                },
                "unaff_r4": {
                    "2": "reg4",
                    "1": "register_r4",
                    "4": "unaff_r4"
                },
                "unaff_r5": {
                    "1": "register5",
                    "4": "unaff_r5",
                    "2": "reg5",
                    "3": "temp_var2"
                },
                "pcVar7": {
                    "8": "function_pointer",
                    "2": "code_ptr",
                    "1": "func_ptr",
                    "12": "function_ptr"
                },
                "iVar8": {
                    "1": "temp_var6",
                    "3": "value5",
                    "2": "var8"
                },
                "uVar9": {
                    "1": "temp_var6",
                    "2": "value6",
                    "3": "temp3"
                },
                "uVar10": {
                    "2": "b_var10",
                    "1": "boolean_variable",
                    "4": "bool_value"
                },
                "UNRECOVERED_JUMPTABLE_00": {
                    "1": "jump_table_pointer",
                    "11": "jump_table",
                    "3": "jumptable"
                },
                "bVar10": {
                    "5": "flag",
                    "1": "bool_variable",
                    "4": "bool_var",
                    "2": "condition"
                },
                "iVar9": {
                    "1": "return_value"
                },
                "param_1[4]": {
                    "1": "param_b[4]"
                },
                "param_1[6]": {
                    "1": "param_b[6]"
                },
                "param_1[1]": {
                    "1": "param_b[1]"
                },
                "param_1[2]": {
                    "1": "param_b[2]"
                },
                "param_1[3]": {
                    "1": "param_b[3]"
                },
                "param_2[3]": {
                    "1": "param_b[3]"
                },
                "param_2[4]": {
                    "1": "param_b[4]"
                },
                "param_2[5]": {
                    "1": "param_b[5]"
                },
                "param_2[10]": {
                    "1": "param_b[10]"
                },
                "param_2[8]": {
                    "1": "param_b[8]"
                },
                "param_2[0x15]": {
                    "1": "param_b[0x15]"
                },
                "param_2[1]": {
                    "1": "param_b[1]"
                },
                "param_2[0x10]": {
                    "1": "param_b[0x10]"
                },
                "param_2[0xb]": {
                    "1": "param_b[0xb]"
                },
                "param_2[0xd]": {
                    "1": "param_b[0xd]"
                },
                "param_2 + 3": {
                    "1": "param_b_3"
                },
                "param_2 + 0xd": {
                    "1": "param_b_0xd"
                },
                "param_2 + 0x11": {
                    "1": "param_b_0x11"
                },
                "param_2 + 0x13": {
                    "1": "param_b_0x13"
                },
                "uVar11": {
                    "1": "bool_var_2"
                }
            }
        },
        "FUN_08009cdc": {
            "entrypoint": "0x08009cdc",
            "current_name": "initialize_data_structure_08009cdc",
            "code": "\nvoid initialize_data_structure_08009cdc(undefined4 *data_structure,undefined2 value1,undefined2 value2)\n\n{\n  *data_structure = 0;\n  params[1] = 0;\n  params[2] = 0;\n  *(undefined2 *)(data_structure + 3) = value1;\n  params[25] = 0;\n  *(undefined2 *)((int)data_structure + 0xe) = value2;\n  params[4] = 0;\n  params[5] = 0;\n  params[6] = 0;\n  clear_memory(data_structure + 0x17,0,8);\n  params[8] = data_structure;\n  params[9] = 0x800a021;\n  params[10] = 0x800a043;\n  params[11] = 0x800a07b;\n  params[12] = lab_0800a09e_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009cdc": "initialize_data_structure_08009cdc",
                "param_1": "data_structure",
                "param_2": "value1",
                "param_3": "value2",
                "LAB_0800a09e_1": "some_label",
                "memset": "clear_memory",
                "param_1[1]": "params[1]",
                "param_1[2]": "params[2]",
                "param_1[0x19]": "params[25]",
                "param_1[4]": "params[4]",
                "param_1[5]": "params[5]",
                "param_1[6]": "params[6]",
                "param_1[8]": "params[8]",
                "param_1[9]": "params[9]",
                "param_1[10]": "params[10]",
                "param_1[0xb]": "params[11]",
                "param_1[0xc]": "params[12]",
                "&LAB_0800a09e_1": "lab_0800a09e_1"
            },
            "calling": [
                "FUN_08009d50"
            ],
            "called": [
                "FUN_080091c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009cdc": {
                    "5": "initialize_data",
                    "2": "initialize_param_struct",
                    "1": "initialize_data_struct",
                    "8": "initialize_data_structure",
                    "4": "initialize_parameters"
                },
                "param_1": {
                    "4": "data",
                    "2": "parameters",
                    "1": "param",
                    "5": "params",
                    "7": "data_structure"
                },
                "param_2": {
                    "2": "value_1",
                    "1": "value2",
                    "21": "value1"
                },
                "param_3": {
                    "1": "third_param",
                    "2": "value_2",
                    "21": "value2"
                },
                "FUN_080091c6": {
                    "1": "set_default_value",
                    "7": "process_data"
                },
                "LAB_0800a09e_1": {
                    "1": "label",
                    "2": "label_1",
                    "4": "some_label"
                },
                "memset": {
                    "3": "clear_memory"
                },
                "memset(param_1 + 0x17, 0, 8)": {
                    "1": "clear_additional_memory"
                },
                "*param_1": {
                    "1": "params[0]"
                },
                "param_1[1]": {
                    "1": "parameters[1]",
                    "2": "params[1]"
                },
                "param_1[2]": {
                    "1": "parameters[2]",
                    "2": "params[2]"
                },
                "*(undefined2 *)(param_1 + 3)": {
                    "1": "params[3]"
                },
                "param_1[0x19]": {
                    "1": "params[25]"
                },
                "*(undefined2 *)((int)param_1 + 0xe)": {
                    "1": "params[14]"
                },
                "param_1[4]": {
                    "1": "data_structure[4]",
                    "2": "params[4]"
                },
                "param_1[5]": {
                    "1": "param_struct.field6",
                    "2": "params[5]"
                },
                "param_1[6]": {
                    "1": "data_structure[6]",
                    "2": "params[6]"
                },
                "memset(param_1 + 0x17,0,8)": {
                    "1": "initialize_memory"
                },
                "param_1[8]": {
                    "1": "parameters[8]",
                    "2": "params[8]"
                },
                "param_1[9]": {
                    "1": "parameters[9]",
                    "2": "params[9]"
                },
                "param_1[10]": {
                    "1": "data_structure[10]",
                    "2": "params[10]"
                },
                "param_1[0xb]": {
                    "1": "params[0xb]"
                },
                "param_1[0xc]": {
                    "1": "parameters[0xc]"
                },
                "&LAB_0800a09e_1": {
                    "1": "address1"
                },
                "param_1[0]": {
                    "1": "data_structure[0]"
                },
                "(undefined2 *)(param_1 + 3)": {
                    "1": "param_struct.field4"
                },
                "(undefined2 *)((int)param_1 + 0xe)": {
                    "1": "param_struct.field6"
                },
                "param_1[3]": {
                    "1": "data_struct->value1"
                },
                "param_1 + 0xe": {
                    "1": "data_struct->value2"
                },
                "param_1 + 0x17": {
                    "1": "data_struct->var7"
                }
            }
        },
        "FUN_08009d24": {
            "entrypoint": "0x08009d24",
            "current_name": "allocate_memory_08009d24",
            "code": "\nundefined4 * allocate_memory_08009d24(undefined4 size,int count)\n\n{\n  undefined4 *allocated_memory;\n  int total_size;\n  \n  total_size = (count + -1) * 0x68;\n  allocated_memory = (undefined4 *)allocate_memory_08009d24(size,total_size + 0x74);\n  if (allocated_memory != (undefined4 *)0x0) {\n    *allocated_memory = 0;\n    ptr[1] = count;\n    ptr[2] = allocated_memory + 3;\n    clear_memory(allocated_memory + 3,0,total_size + 0x68);\n  }\n  return allocated_memory;\n}\n\n",
            "renaming": {
                "FUN_08009d24": "allocate_memory_08009d24",
                "param_1": "size",
                "param_2": "count",
                "puVar1": "allocated_memory",
                "iVar2": "total_size",
                "memset": "clear_memory",
                "_malloc_r": "allocate_memory",
                "puVar1[1]": "ptr[1]",
                "puVar1[2]": "ptr[2]"
            },
            "calling": [
                "FUN_08009db0"
            ],
            "called": [
                "FUN_080091c6",
                "FUN_08009270"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009d24": {
                    "2": "allocate_data_structure",
                    "3": "allocate_memory_block",
                    "1": "create_data_structure",
                    "10": "allocate_memory"
                },
                "param_1": {
                    "1": "size_of_allocation",
                    "2": "array",
                    "3": "size_of_block",
                    "12": "size"
                },
                "param_2": {
                    "1": "length_to_clear",
                    "8": "num_elements",
                    "3": "value",
                    "4": "num_of_elements"
                },
                "puVar1": {
                    "1": "struct_pointer",
                    "6": "allocated_memory",
                    "3": "data_structure",
                    "5": "array_ptr",
                    "2": "memory_ptr"
                },
                "iVar2": {
                    "1": "allocated_structure_size",
                    "22": "total_size",
                    "2": "block_size"
                },
                "memset": {
                    "2": "clear_memory",
                    "1": "initialize_memory"
                },
                "_malloc_r": {
                    "1": "custom_malloc_function"
                },
                "FUN_080091c6": {
                    "1": "initialize_block",
                    "5": "initialize_element",
                    "2": "initialize_structure_element"
                },
                "param_3": {
                    "2": "element_size",
                    "1": "element_value",
                    "3": "size"
                },
                "FUN_08009270": {
                    "1": "calculate_checksum",
                    "2": "clear_memory"
                },
                "*puVar1": {
                    "1": "ptr[0]"
                },
                "puVar1[1]": {
                    "1": "ptr[1]"
                },
                "puVar1[2]": {
                    "1": "ptr[2]"
                }
            }
        },
        "FUN_08009d50": {
            "entrypoint": "0x08009d50",
            "current_name": "initialize_data_08009d50",
            "code": "\nvoid initialize_data_08009d50(undefined4 *data)\n\n{\n  undefined4 result;\n  undefined4 *pointer;\n  \n  if (data[6] == 0) {\n    data[18] = 0;\n    data[19] = 0;\n    data[20] = 0;\n    pointer = &DAT_20000094;\n    data[10] = constant_pointer;\n    if (data == &DAT_20000094) {\n      pointer = (undefined4 *)0x1;\n    }\n    if (data == &DAT_20000094) {\n      data[6] = pointer;\n    }\n    result = get_float_value();\n    data[1] = result;\n    result = get_float_value(data);\n    data[2] = result;\n    result = get_float_value(data);\n    data[3] = result;\n    standardize_value(data[1],4,0);\n    standardize_value(data[2],9,1);\n    standardize_value(data[3],0x12,2);\n    data[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009d50": "initialize_data_08009d50",
                "param_1": "data",
                "uVar1": "result",
                "puVar2": "pointer",
                "LAB_08009cd0_1": "label",
                "__sfp": "get_float_value",
                "std_isra_0": "standardize_value",
                "&LAB_08009cd0_1": "constant_pointer",
                "param_1[6]": "data[6]",
                "param_1[0x12]": "data[18]",
                "param_1[0x13]": "data[19]",
                "param_1[0x14]": "data[20]",
                "param_1[1]": "data[1]",
                "param_1[2]": "data[2]",
                "param_1[3]": "data[3]"
            },
            "calling": [
                "FUN_08009c7c",
                "FUN_0800937c",
                "FUN_08009db0",
                "FUN_080098d8",
                "FUN_0800932c",
                "FUN_08009a80"
            ],
            "called": [
                "FUN_08009cdc",
                "FUN_08009db0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009d50": {
                    "1": "initialize_function",
                    "11": "initialize_parameters",
                    "16": "initialize_data"
                },
                "param_1": {
                    "10": "parameters",
                    "2": "param_array",
                    "1": "data_structure",
                    "3": "data_pointer"
                },
                "uVar1": {
                    "4": "return_value",
                    "1": "format_result",
                    "24": "result"
                },
                "puVar2": {
                    "1": "default_param",
                    "8": "temp_ptr",
                    "13": "pointer",
                    "5": "temp_pointer"
                },
                "LAB_08009cd0_1": {
                    "1": "label"
                },
                "__sfp": {
                    "3": "calculate_value",
                    "2": "get_sfp_value",
                    "1": "some_function",
                    "5": "get_float_value"
                },
                "std_isra_0": {
                    "2": "set_standard_value",
                    "1": "standardize_isra",
                    "5": "standardize_value"
                },
                "FUN_08009cdc": {
                    "3": "set_initial_values",
                    "1": "initialize_param2",
                    "2": "set_values1",
                    "4": "set_values"
                },
                "param_2": {
                    "1": "part1",
                    "11": "value1"
                },
                "param_3": {
                    "1": "param3",
                    "11": "value2"
                },
                "FUN_08009db0": {
                    "2": "set_values2",
                    "1": "compute_values",
                    "3": "calculate_values",
                    "4": "calculate"
                },
                "param_4": {
                    "2": "param4",
                    "5": "value4",
                    "6": "value3",
                    "1": "part3"
                },
                "&LAB_08009cd0_1": {
                    "1": "constant_pointer"
                },
                "DAT_20000094": {
                    "1": "constant_value"
                },
                "param_1[6]": {
                    "1": "data[6]"
                },
                "param_1[0x12]": {
                    "1": "data[18]"
                },
                "param_1[0x13]": {
                    "1": "data[19]"
                },
                "param_1[0x14]": {
                    "1": "data[20]"
                },
                "param_1[1]": {
                    "1": "data[1]"
                },
                "param_1[2]": {
                    "1": "data[2]"
                },
                "param_1[3]": {
                    "1": "data[3]"
                }
            }
        },
        "FUN_08009db0": {
            "entrypoint": "0x08009db0",
            "current_name": "initialize_data_structure_08009db0",
            "code": "\nint * initialize_data_structure_08009db0(undefined4 *error_code,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int *current_ptr;\n  int *current_element;\n  int **list_pointer;\n  \n  if (DAT_200000ac == 0) {\n    initialize_data(&DAT_20000094);\n  }\n  list_pointer = (int **)&DAT_200000dc;\n  do {\n    current_element = list_pointer[2];\n    current_ptr = list_pointer[1];\n    while (current_ptr = (int *)((int)current_ptr + -1), -1 < (int)current_ptr) {\n      if (*(short_integer *)(current_element + 3) == 0) {\n        *(undefined2 *)((int)current_element + 0xe) = 0xffff;\n        current_element[0x19] = 0;\n        *(undefined2 *)(current_element + 3) = 1;\n        *current_element = 0;\n        current_element[2] = 0;\n        current_element[1] = 0;\n        current_element[4] = 0;\n        current_element[5] = 0;\n        current_element[6] = 0;\n        initialize_memory(current_element + 0x17,0,8,1,param4);\n        current_element[0xd] = 0;\n        current_element[0xe] = 0;\n        current_element[0x12] = 0;\n        current_element[0x13] = 0;\n        return current_element;\n      }\n      current_element = current_element + 0x1a;\n    }\n    if (*list_pointer == (int *)0x0) {\n      current_ptr = (int *)allocate_memory(error_code,4);\n      *list_pointer = current_ptr;\n      if (current_ptr == (int *)0x0) {\n        *error_code = 0xc;\n        return (int *)0x0;\n      }\n    }\n    list_pointer = (int **)*list_pointer;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08009db0": "initialize_data_structure_08009db0",
                "param_1": "error_code",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "piVar1": "current_ptr",
                "piVar2": "current_element",
                "ppiVar3": "list_pointer",
                "__sinit": "initialize_data",
                "__sfmoreglue": "allocate_memory",
                "memset": "initialize_memory",
                "short": "short_integer"
            },
            "calling": [
                "FUN_08009d50"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_080091c6",
                "FUN_08009d24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009db0": {
                    "3": "find_initialized_pointer",
                    "1": "initialize_structures",
                    "7": "initialize_data_structures",
                    "2": "initialize_data"
                },
                "param_1": {
                    "1": "output_error_code",
                    "9": "error_code",
                    "4": "result_ptr",
                    "2": "output",
                    "5": "result"
                },
                "param_2": {
                    "8": "param2",
                    "1": "param_a",
                    "3": "arg1",
                    "2": "input1",
                    "6": "param_2",
                    "5": "arg2"
                },
                "param_3": {
                    "1": "size",
                    "2": "input2",
                    "8": "param3",
                    "6": "param_3",
                    "5": "arg3",
                    "3": "arg2"
                },
                "param_4": {
                    "9": "param4",
                    "1": "param_c",
                    "7": "param_4",
                    "4": "arg4",
                    "3": "arg3",
                    "2": "input3"
                },
                "piVar1": {
                    "8": "current_ptr",
                    "2": "current_array",
                    "3": "current_pointer",
                    "1": "current_index",
                    "4": "current_pointer1"
                },
                "piVar2": {
                    "1": "current_structure",
                    "4": "current_pointer2",
                    "2": "current_array"
                },
                "ppiVar3": {
                    "1": "temp_ptr",
                    "2": "data_structure_pointer",
                    "3": "list_pointer"
                },
                "FUN_08009d50": {
                    "1": "initialize_global_data",
                    "2": "initialize_glue"
                },
                "FUN_080091c6": {
                    "1": "update_values"
                },
                "FUN_08009d24": {
                    "1": "find_first_null_index",
                    "4": "allocate_memory"
                },
                "__sinit": {
                    "1": "initialize_s",
                    "4": "initialize_data",
                    "2": "initialize_static_data",
                    "3": "initialize_global_data"
                },
                "DAT_200000ac": {
                    "1": "data_flag",
                    "3": "initialized_flag"
                },
                "DAT_20000094": {
                    "1": "static_data"
                },
                "DAT_200000dc": {
                    "1": "linked_data_structures"
                },
                "__sfmoreglue": {
                    "1": "allocate_memory_chunk",
                    "9": "allocate_memory",
                    "2": "increase_memory"
                },
                "memset": {
                    "1": "fill_memory",
                    "3": "clear_memory",
                    "4": "initialize_memory"
                },
                "&DAT_20000094": {
                    "1": "data_to_initialize"
                },
                "PTR_08009d50": {
                    "1": "initialize_ptr"
                },
                "short": {
                    "1": "short_integer"
                },
                "F": {
                    "1": "initialize_memory"
                },
                "*ppiVar3": {
                    "1": "head_ptr"
                }
            }
        },
        "FUN_08009e64": {
            "entrypoint": "0x08009e64",
            "current_name": "check_file_permissions_08009e64",
            "code": "\nundefined4 check_file_permissions_08009e64(undefined4 file_descriptor,int file_info,undefined4 *result,uint *is_executable)\n\n{\n  int status;\n  undefined4 permission_value;\n  undefined stack_buffer [4];\n  uint file_mode;\n  \n  if ((*(short *)(file_info + 0xe) < 0) ||\n     (status = _fstat_r(file_descriptor,(int)*(short *)(file_info + 0xe),stack_buffer), status < 0)) {\n    *is_executable = 0;\n    if ((int)((uint)*(ushort *)(file_info + 0xc) << 0x18) < 0) {\n      permission_value = 0x40;\n      goto LAB_08009ea4;\n    }\n  }\n  else {\n    *is_executable = (uint)((file_mode & 0xf000) == 0x2000);\n  }\n  permission_value = 0x400;\nLAB_08009ea4:\n  *result = permission_value;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009e64": "check_file_permissions_08009e64",
                "param_1": "file_descriptor",
                "param_2": "file_info",
                "param_3": "result",
                "param_4": "is_executable",
                "iVar1": "status",
                "uVar2": "permission_value",
                "auStack_4c": "stack_buffer",
                "local_48": "file_mode"
            },
            "calling": [
                "FUN_08009eac"
            ],
            "called": [
                "FUN_0800a0ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009e64": {
                    "3": "get_file_permissions",
                    "1": "check_file_flags",
                    "2": "check_file_permission",
                    "19": "check_file_permissions"
                },
                "param_1": {
                    "2": "fd",
                    "29": "file_descriptor"
                },
                "param_2": {
                    "16": "file_info",
                    "1": "file_info_ptr",
                    "4": "file_stat",
                    "2": "stat_buffer"
                },
                "param_3": {
                    "2": "output_permission",
                    "1": "result_pointer",
                    "5": "permission",
                    "4": "permission_flag",
                    "3": "output_value",
                    "7": "result"
                },
                "param_4": {
                    "2": "output_result",
                    "1": "file_attributes",
                    "9": "is_executable"
                },
                "iVar1": {
                    "1": "file_status",
                    "15": "status",
                    "5": "fstat_result",
                    "7": "result",
                    "3": "stat_result"
                },
                "uVar2": {
                    "2": "access_rights",
                    "1": "flag_value",
                    "5": "permission_flag",
                    "3": "permissions"
                },
                "auStack_4c": {
                    "1": "stack_tmp",
                    "2": "auxiliary_stack",
                    "8": "stack_buffer",
                    "3": "temporary_buffer",
                    "7": "stat_buffer"
                },
                "local_48": {
                    "27": "file_mode",
                    "2": "file_permissions",
                    "1": "file_type"
                }
            }
        },
        "FUN_08009eac": {
            "entrypoint": "0x08009eac",
            "current_name": "initialize_buffer_08009eac",
            "code": "\nvoid initialize_buffer_08009eac(int buffer_size,int *buffer)\n\n{\n  ushort result;\n  int allocated_memory;\n  int size;\n  int *buffer;\n  \n  if (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x1e)) {\n    size = buffer_size;\n    buffer = buffer;\n    result = read_input(buffer_size,buffer,&size,&buffer);\n    allocated_memory = allocate_memory(buffer_size,size);\n    if (allocated_memory != 0) {\n      *(undefined **)(buffer_size + 0x28) = function_pointer;\n      *buffer = allocated_memory;\n      *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x80;\n      result_ptr = allocated_memory;\n      size_ptr = size;\n      if ((buffer != (int *)0x0) &&\n         (allocated_memory = check_if_terminal(buffer_size,(int)*(short *)((int)buffer + 0xe)), allocated_memory != 0)) {\n        *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(buffer + 3) = result | *(ushort *)(buffer + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(buffer + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) & 0xfffc | 2;\n  }\n  *buffer = (int)buffer + 0x47;\n  result_ptr = (int)buffer + 0x47;\n  size_ptr = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009eac": "initialize_buffer_08009eac",
                "param_1": "buffer_size",
                "param_2": "buffer",
                "uVar1": "result",
                "iVar2": "allocated_memory",
                "local_18": "size",
                "local_14": "buffer",
                "_malloc_r": "allocate_memory",
                "LAB_08009cd0_1": "memory_label",
                "_isatty_r": "check_if_terminal",
                "__swhatbuf_r": "read_input",
                "&LAB_08009cd0_1": "function_pointer",
                "param_2[4]": "result_ptr",
                "param_2[5]": "size_ptr"
            },
            "calling": [
                "FUN_08009a80"
            ],
            "called": [
                "FUN_08009e64",
                "FUN_08009270",
                "FUN_0800a110"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009eac": {
                    "1": "determine_buffer_allocation",
                    "2": "initialize_file",
                    "5": "initialize_buffer",
                    "3": "decode_and_allocate_memory"
                },
                "param_1": {
                    "1": "context",
                    "2": "file_descriptor",
                    "3": "input",
                    "5": "buffer_size"
                },
                "param_2": {
                    "3": "file_info",
                    "1": "stream_info",
                    "2": "input_array",
                    "5": "buffer"
                },
                "uVar1": {
                    "1": "status_code",
                    "6": "status",
                    "12": "result"
                },
                "iVar2": {
                    "1": "memory_ptr",
                    "4": "malloc_result",
                    "9": "allocated_memory",
                    "3": "allocated_buffer",
                    "7": "allocation_result"
                },
                "local_18": {
                    "1": "temp_buffer_size",
                    "3": "buffer_size",
                    "7": "size",
                    "2": "local_size"
                },
                "local_14": {
                    "1": "buffer_size_output",
                    "4": "buffer",
                    "3": "temp_ptr",
                    "2": "temp_pointer"
                },
                "_malloc_r": {
                    "6": "allocate_memory"
                },
                "LAB_08009cd0_1": {
                    "1": "unknown_label"
                },
                "_isatty_r": {
                    "3": "check_if_terminal",
                    "1": "check_terminal"
                },
                "*(undefined **)(param_1 + 0x28)": {
                    "1": "assigned_memory_label"
                },
                "(int)param_2 + 0x47": {
                    "1": "default_address"
                },
                "__swhatbuf_r": {
                    "1": "read_file_information"
                },
                "&LAB_08009cd0_1": {
                    "1": "some_label"
                },
                "PTR_FUN_08009e64": {
                    "1": "subfunction1"
                },
                "FUN_08009270": {
                    "1": "subfunction2"
                },
                "FUN_0800a110": {
                    "1": "subfunction3"
                },
                "param_2 + 3": {
                    "1": "flag_ptr"
                },
                "param_2[4]": {
                    "1": "result_ptr"
                },
                "param_2[5]": {
                    "1": "size_ptr"
                }
            }
        },
        "FUN_08009f2c": {
            "entrypoint": "0x08009f2c",
            "current_name": "find_character_08009f2c",
            "code": "\nchar * find_character_08009f2c(char *string,char character,int length)\n\n{\n  char *current_char;\n  char *next_char;\n  \n  current_char = string;\n  do {\n    next_char = current_char;\n    if (next_char == string + length) {\n      return (char *)0x0;\n    }\n    current_char = next_char + 1;\n  } while (*next_char != character);\n  return next_char;\n}\n\n",
            "renaming": {
                "FUN_08009f2c": "find_character_08009f2c",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "current_char",
                "pcVar2": "next_char"
            },
            "calling": [
                "FUN_08009698",
                "FUN_0800937c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009f2c": {
                    "1": "find_character_index",
                    "4": "find_character_in_string",
                    "19": "find_character",
                    "3": "find_first_occurrence"
                },
                "param_1": {
                    "25": "string",
                    "5": "input_string",
                    "1": "str"
                },
                "param_2": {
                    "3": "target_char",
                    "24": "character",
                    "1": "target_character"
                },
                "param_3": {
                    "10": "string_length",
                    "21": "length"
                },
                "pcVar1": {
                    "2": "current_character",
                    "1": "current",
                    "14": "current_char",
                    "4": "current_position"
                },
                "pcVar2": {
                    "1": "ptr_previous",
                    "2": "next_position",
                    "12": "next_char"
                }
            }
        },
        "FUN_08009f48": {
            "entrypoint": "0x08009f48",
            "current_name": "FUNC_08009f48",
            "code": "\nvoid FUNC_08009f48(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009f48": "FUNC_08009f48"
            },
            "calling": [
                "FUN_08009270",
                "FUN_080091d8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009f4a": {
            "entrypoint": "0x08009f4a",
            "current_name": "FUNC_08009f4a",
            "code": "\nvoid FUNC_08009f4a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009f4a": "FUNC_08009f4a"
            },
            "calling": [
                "FUN_08009270",
                "FUN_080091d8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009fe8": {
            "entrypoint": "0x08009fe8",
            "current_name": "process_signal_08009fe8",
            "code": "\nint process_signal_08009fe8(uint input_value)\n\n{\n  int *result_ptr;\n  undefined4 process_id;\n  int signal_handler;\n  code *function_pointer;\n  undefined4 register4;\n  undefined4 register5;\n  undefined4 link_register;\n  undefined4 *data_ptr;\n  \n  result_ptr = DAT_20000090;\n  data_ptr = &DAT_20000090;\n  if (0x1f < input_value) {\n    *DAT_20000090 = 0x16;\n    return -1;\n  }\n  signal_handler = DAT_20000090[0x11];\n  if ((signal_handler != 0) && (function_pointer = *(code **)(signal_handler + input_value * 4), function_pointer != (code *)0x0)) {\n    if (function_pointer != (code *)0x1) {\n      if (function_pointer == (code *)0xffffffff) {\n        *DAT_20000090 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(signal_handler + input_value * 4) = 0;\n      (*function_pointer)(input_value);\n    }\n    return 0;\n  }\n  process_id = get_process_id(DAT_20000090);\n  DAT_20000a38 = 0;\n  signal_handler = kill_process(process_id,input_value,input_value,0,data_ptr,register4,register5,link_register);\n  if ((signal_handler == -1) && (DAT_20000a38 != 0)) {\n    *result_ptr = DAT_20000a38;\n  }\n  return signal_handler;\n}\n\n",
            "renaming": {
                "param_1": "input_value",
                "piVar1": "result_ptr",
                "iVar3": "signal_handler",
                "pcVar4": "function_pointer",
                "unaff_r4": "register4",
                "unaff_r5": "register5",
                "in_lr": "link_register",
                "puVar5": "data_ptr",
                "uVar2": "process_id",
                "FUN_08009fe8": "process_signal_08009fe8",
                "_getpid_r": "get_process_id",
                "_kill": "kill_process"
            },
            "calling": [
                "FUN_08009b5c"
            ],
            "called": [
                "FUN_0800a01c",
                "FUN_0800886c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "6": "input",
                    "1": "param",
                    "10": "input_value",
                    "3": "process_id",
                    "4": "signal_number",
                    "2": "input_param"
                },
                "piVar1": {
                    "3": "result_ptr",
                    "1": "result",
                    "2": "signal_handler"
                },
                "iVar3": {
                    "1": "handler_pointer",
                    "2": "element",
                    "4": "signal_handler",
                    "3": "data_value"
                },
                "pcVar4": {
                    "1": "code_ptr",
                    "11": "function_pointer",
                    "2": "callback",
                    "10": "function_ptr",
                    "5": "handler_function"
                },
                "unaff_r4": {
                    "1": "extra_param_1",
                    "4": "register4"
                },
                "unaff_r5": {
                    "1": "unused_register_5",
                    "4": "register5"
                },
                "in_lr": {
                    "3": "return_address",
                    "1": "unused_lr",
                    "5": "link_register"
                },
                "puVar5": {
                    "1": "result_ptr_ptr",
                    "2": "data_pointer2"
                },
                "uVar2": {
                    "1": "result",
                    "2": "pid_value",
                    "12": "pid",
                    "14": "process_id"
                },
                "FUN_08009fe8": {
                    "6": "process_signal",
                    "1": "reverse_kill_process",
                    "2": "kill_process"
                },
                "_getpid_r": {
                    "2": "get_process_id"
                },
                "_kill": {
                    "2": "kill_process"
                },
                "DAT_20000090": {
                    "1": "data_1"
                },
                "DAT_20000a38": {
                    "1": "global_value",
                    "3": "error_code"
                }
            }
        },
        "FUN_0800a01c": {
            "entrypoint": "0x0800a01c",
            "current_name": "FUN_0800a01c",
            "code": "\nundefined4 _getpid(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_08009fe8"
            ],
            "called": [
                "FUN_0800887c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a020": {
            "entrypoint": "0x0800a020",
            "current_name": "update_data_0800a020",
            "code": "\nvoid update_data_0800a020(undefined4 file_descriptor,int data_pointer)\n\n{\n  int read_result;\n  uint updated_value;\n  bool is_read_successful;\n  \n  read_result = _read_r(file_descriptor,(int)*(short *)(data_pointer + 0xe));\n  is_read_successful = -1 < read_result;\n  if (is_read_successful) {\n    updated_value = *(int *)(data_pointer + 0x54) + read_result;\n  }\n  else {\n    updated_value = *(ushort *)(data_pointer + 0xc) & 0xffffefff;\n  }\n  if (is_read_successful) {\n    *(uint *)(data_pointer + 0x54) = updated_value;\n  }\n  if (!is_read_successful) {\n    *(short *)(data_pointer + 0xc) = (short)updated_value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a020": "update_data_0800a020",
                "param_1": "file_descriptor",
                "param_2": "data_pointer",
                "iVar1": "read_result",
                "uVar2": "updated_value",
                "bVar3": "is_read_successful"
            },
            "calling": [],
            "called": [
                "FUN_0800a168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800a020": {
                    "1": "update_values",
                    "9": "process_data",
                    "3": "read_and_update_value",
                    "11": "update_data"
                },
                "param_1": {
                    "2": "data_ptr",
                    "1": "file",
                    "12": "file_descriptor",
                    "5": "buffer"
                },
                "param_2": {
                    "5": "data_pointer",
                    "1": "info",
                    "2": "data_buffer",
                    "3": "data_ptr",
                    "4": "data_address"
                },
                "iVar1": {
                    "23": "read_result",
                    "1": "num_bytes_read",
                    "6": "bytes_read"
                },
                "uVar2": {
                    "3": "new_value",
                    "1": "modified_value",
                    "23": "updated_value",
                    "2": "new_data_value"
                },
                "bVar3": {
                    "2": "is_read_success",
                    "1": "is_positive_read",
                    "7": "is_success",
                    "5": "is_successful",
                    "12": "is_read_successful"
                },
                "FUN_0800a168": {
                    "1": "process_data"
                },
                "param_3": {
                    "1": "value2"
                },
                "param_4": {
                    "1": "value3"
                }
            }
        },
        "FUN_0800a042": {
            "entrypoint": "0x0800a042",
            "current_name": "write_to_file_0800a042",
            "code": "\nvoid write_to_file_0800a042(int *file_descriptor,int buffer,undefined4 data,undefined4 size)\n\n{\n  int write_result;\n  undefined4 unused_var1;\n  undefined4 unused_var2;\n  undefined4 unused_var3;\n  \n  if ((int)((uint)*(ushort *)(buffer + 0xc) << 0x17) < 0) {\n    seek_file(file_descriptor,(int)*(short *)(buffer + 0xe),0,2);\n  }\n  *(ushort *)(buffer + 0xc) = *(ushort *)(buffer + 0xc) & 0xefff;\n  DAT_20000a38 = 0;\n  write_result = write_data((int)*(short *)(buffer + 0xe),data,size,size,size,unused_var1,unused_var2,\n                 unused_var3);\n  if ((write_result == -1) && (DAT_20000a38 != 0)) {\n    *file_descriptor = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a042": "write_to_file_0800a042",
                "param_1": "file_descriptor",
                "param_2": "buffer",
                "param_3": "data",
                "param_4": "size",
                "iVar1": "write_result",
                "unaff_r4": "unused_var1",
                "unaff_r5": "unused_var2",
                "in_lr": "unused_var3",
                "_lseek_r": "seek_file",
                "_write": "write_data"
            },
            "calling": [],
            "called": [
                "FUN_0800a130",
                "FUN_0800885c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800a042": {
                    "1": "write_to_file_and_seek",
                    "6": "write_data",
                    "15": "write_to_file",
                    "8": "write_data_to_file"
                },
                "param_1": {
                    "31": "file_descriptor"
                },
                "param_2": {
                    "3": "data_pointer",
                    "1": "struct_pointer",
                    "2": "data_offset",
                    "6": "buffer_address",
                    "7": "buffer"
                },
                "param_3": {
                    "18": "data",
                    "1": "data_buffer",
                    "3": "data_address",
                    "8": "buffer"
                },
                "param_4": {
                    "4": "num_bytes",
                    "7": "data_size",
                    "1": "size_of_data",
                    "3": "count",
                    "14": "size"
                },
                "iVar1": {
                    "21": "write_result",
                    "2": "result"
                },
                "unaff_r4": {
                    "1": "unused_1",
                    "2": "unused_var1"
                },
                "unaff_r5": {
                    "1": "unused2",
                    "2": "unused_var2"
                },
                "in_lr": {
                    "1": "arg6",
                    "2": "unused_var3"
                },
                "_lseek_r": {
                    "1": "move_file_pointer",
                    "2": "seek_file"
                },
                "_write": {
                    "3": "write_data",
                    "2": "write_to_file"
                },
                "DAT_20000a38": {
                    "1": "write_error"
                }
            }
        },
        "FUN_0800a07a": {
            "entrypoint": "0x0800a07a",
            "current_name": "update_file_pointer_0800a07a",
            "code": "\nvoid update_file_pointer_0800a07a(undefined4 file_descriptor,int struct_address)\n\n{\n  int seek_result;\n  ushort flags;\n  bool is_error;\n  \n  seek_result = seek_file(file_descriptor,(int)*(short *)(struct_address + 0xe));\n  is_error = seek_result == -1;\n  if (is_error) {\n    flags = *(ushort *)(struct_address + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(struct_address + 0x54) = seek_result;\n    flags = *(ushort *)(struct_address + 0xc) | 0x1000;\n  }\n  if (is_error) {\n    *(ushort *)(struct_address + 0xc) = flags;\n  }\n  if (!is_error) {\n    *(ushort *)(struct_address + 0xc) = flags;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a07a": "update_file_pointer_0800a07a",
                "param_1": "file_descriptor",
                "param_2": "struct_address",
                "iVar1": "seek_result",
                "uVar2": "flags",
                "bVar3": "is_error",
                "_lseek_r": "seek_file"
            },
            "calling": [],
            "called": [
                "FUN_0800a130"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800a07a": {
                    "1": "improve_file_access",
                    "2": "perform_file_seek",
                    "11": "update_file_pointer"
                },
                "param_1": {
                    "1": "stream",
                    "29": "file_descriptor"
                },
                "param_2": {
                    "1": "metadata_pointer",
                    "15": "struct_address",
                    "5": "struct_pointer",
                    "2": "data_address",
                    "4": "context"
                },
                "iVar1": {
                    "3": "file_offset",
                    "7": "result",
                    "19": "seek_result",
                    "2": "lseek_result"
                },
                "uVar2": {
                    "4": "updated_flag",
                    "2": "modified_flag",
                    "3": "new_flags",
                    "1": "flag_value",
                    "6": "flags"
                },
                "bVar3": {
                    "7": "is_seek_error",
                    "1": "is_seek_failed",
                    "11": "is_error",
                    "2": "is_lseek_error",
                    "8": "seek_failed"
                },
                "_lseek_r": {
                    "1": "seek_file"
                },
                "*(short *)(param_2 + 0xe)": {
                    "1": "file_offset"
                },
                "*(ushort *)(param_2 + 0xc)": {
                    "1": "current_flag"
                },
                "*(int *)(param_2 + 0x54)": {
                    "1": "file_descriptor"
                }
            }
        },
        "FUN_0800a0ec": {
            "entrypoint": "0x0800a0ec",
            "current_name": "get_file_stat_0800a0ec",
            "code": "\nvoid get_file_stat_0800a0ec(int *result,undefined4 file_descriptor,undefined4 stat_buffer,undefined4 buffer_size)\n\n{\n  int status;\n  \n  DAT_20000a38 = 0;\n  status = get_file_stat_0800a0ecus(file_descriptor,stat_buffer,stat_buffer,0,buffer_size);\n  if ((status == -1) && (DAT_20000a38 != 0)) {\n    *result = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "param_1": "result",
                "param_2": "file_descriptor",
                "param_3": "stat_buffer",
                "param_4": "buffer_size",
                "iVar1": "status",
                "FUN_0800a0ec": "get_file_stat_0800a0ec",
                "_fstat": "get_file_status"
            },
            "calling": [
                "FUN_08009e64"
            ],
            "called": [
                "FUN_08008846"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "8": "file_size",
                    "2": "result_ptr",
                    "1": "output_value_ptr",
                    "11": "result"
                },
                "param_2": {
                    "1": "stat_buffer",
                    "28": "file_descriptor"
                },
                "param_3": {
                    "2": "buf",
                    "1": "stat_size",
                    "19": "stat_buffer"
                },
                "param_4": {
                    "1": "flags",
                    "18": "buffer_size",
                    "2": "stat_size"
                },
                "iVar1": {
                    "1": "file_stat_result",
                    "2": "file_status",
                    "8": "status",
                    "5": "fstat_result",
                    "4": "result",
                    "6": "stat_result"
                },
                "FUN_0800a0ec": {
                    "3": "get_file_stat",
                    "1": "update_file_stat",
                    "2": "get_file_stats"
                },
                "_fstat": {
                    "1": "get_file_status"
                }
            }
        },
        "FUN_0800a110": {
            "entrypoint": "0x0800a110",
            "current_name": "check_and_assign_value_0800a110",
            "code": "\nvoid check_and_assign_value_0800a110(int *output_value,undefined4 file_descriptor)\n\n{\n  int is_tty;\n  \n  DAT_20000a38 = 0;\n  is_tty = check_if_tty(file_descriptor);\n  if ((is_tty == -1) && (DAT_20000a38 != 0)) {\n    *output_value = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a110": "check_and_assign_value_0800a110",
                "param_1": "output_value",
                "param_2": "file_descriptor",
                "iVar1": "is_tty",
                "_isatty": "check_if_tty"
            },
            "calling": [
                "FUN_08009eac"
            ],
            "called": [
                "FUN_08008850"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800a110": {
                    "1": "initialize_terminal_input",
                    "3": "check_and_assign_value",
                    "2": "update_parameter_if_not_tty"
                },
                "param_1": {
                    "1": "output_file_descriptor",
                    "4": "result",
                    "13": "output_value",
                    "3": "output_variable"
                },
                "param_2": {
                    "1": "file_descriptor_type",
                    "23": "file_descriptor",
                    "2": "input_file_descriptor"
                },
                "iVar1": {
                    "1": "terminal_check",
                    "5": "is_terminal",
                    "11": "is_tty",
                    "2": "isatty_result"
                },
                "FUN_08008850": {
                    "1": "check_tty"
                },
                "_isatty": {
                    "2": "check_if_terminal",
                    "1": "check_tty",
                    "3": "check_if_tty"
                },
                "DAT_20000a38": {
                    "2": "saved_output_value",
                    "1": "saved_output_param",
                    "3": "saved_value"
                }
            }
        },
        "FUN_0800a130": {
            "entrypoint": "0x0800a130",
            "current_name": "seek_and_assign_value_0800a130",
            "code": "\nvoid seek_and_assign_value_0800a130(int *result,undefined4 file_descriptor,undefined4 offset,undefined4 whence)\n\n{\n  int seek_result;\n  \n  DAT_20000a38 = 0;\n  seek_result = file_seek(file_descriptor,offset,whence,whence,whence);\n  if ((seek_result == -1) && (DAT_20000a38 != 0)) {\n    *result = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a130": "seek_and_assign_value_0800a130",
                "param_1": "result",
                "param_2": "file_descriptor",
                "param_3": "offset",
                "param_4": "whence",
                "iVar1": "seek_result",
                "_lseek": "file_seek"
            },
            "calling": [
                "FUN_0800a07a",
                "FUN_0800a042"
            ],
            "called": [
                "FUN_08008854"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800a130": {
                    "1": "reverse_lseek",
                    "3": "seek_and_assign",
                    "2": "seek_and_set_param"
                },
                "param_1": {
                    "2": "output_pointer",
                    "1": "result_ptr",
                    "3": "output_value",
                    "5": "output",
                    "14": "result"
                },
                "param_2": {
                    "31": "file_descriptor"
                },
                "param_3": {
                    "1": "file_offset",
                    "30": "offset"
                },
                "param_4": {
                    "11": "origin",
                    "1": "file_whence",
                    "19": "whence"
                },
                "iVar1": {
                    "1": "lseek_result",
                    "26": "seek_result"
                },
                "_lseek": {
                    "1": "file_seek"
                },
                "DAT_20000a38": {
                    "1": "error_code"
                }
            }
        },
        "FUN_0800a154": {
            "entrypoint": "0x0800a154",
            "current_name": "calculate_sum_0800a154",
            "code": "\nint calculate_sum_0800a154(undefined4 result,int array)\n\n{\n  int sum;\n  \n  sum = *(int *)(array + -4) + -4;\n  if (*(int *)(array + -4) < 0) {\n    sum = sum + *(int *)(array + sum);\n  }\n  return sum;\n}\n\n",
            "renaming": {
                "FUN_0800a154": "calculate_sum_0800a154",
                "param_1": "result",
                "param_2": "array",
                "iVar1": "sum"
            },
            "calling": [
                "FUN_08009908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800a154": {
                    "13": "calculate_sum",
                    "2": "calculate_value",
                    "1": "sum_or_add",
                    "5": "calculate_result",
                    "3": "calculate_modified_value"
                },
                "param_1": {
                    "6": "input",
                    "3": "param1",
                    "1": "first_param",
                    "2": "param",
                    "7": "result"
                },
                "param_2": {
                    "3": "input",
                    "2": "arg2",
                    "8": "array",
                    "1": "array_start_index",
                    "5": "array_index"
                },
                "iVar1": {
                    "1": "new_offset",
                    "2": "current_index",
                    "11": "sum",
                    "8": "result"
                },
                "* (int *)(param_2 + -4)": {
                    "1": "size_of_array"
                },
                "*(int *)(param_2 + iVar1)": {
                    "1": "value_at_index"
                },
                "*(int *)(param_2 + -4)": {
                    "1": "array_length"
                }
            }
        },
        "FUN_0800a168": {
            "entrypoint": "0x0800a168",
            "current_name": "read_and_assign_value_0800a168",
            "code": "\nvoid read_and_assign_value_0800a168(int *result,undefined4 file_descriptor,undefined4 buffer,undefined4 count)\n\n{\n  int read_result;\n  \n  DAT_20000a38 = 0;\n  read_result = _read(file_descriptor,buffer,count,count,count);\n  if ((read_result == -1) && (DAT_20000a38 != 0)) {\n    *result = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a168": "read_and_assign_value_0800a168",
                "param_1": "result",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "count",
                "iVar1": "read_result"
            },
            "calling": [
                "FUN_0800a020"
            ],
            "called": [
                "FUN_08008858"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800a168": {
                    "1": "read_and_assign_value_if_needed",
                    "2": "read_and_assign_error_code",
                    "7": "read_and_assign_value",
                    "6": "read_and_assign"
                },
                "param_1": {
                    "2": "result_ptr",
                    "1": "result_pointer",
                    "3": "output",
                    "15": "result"
                },
                "param_2": {
                    "1": "source_file_descriptor",
                    "28": "file_descriptor"
                },
                "param_3": {
                    "1": "buf",
                    "28": "buffer"
                },
                "param_4": {
                    "24": "count",
                    "1": "buffer_size",
                    "5": "size"
                },
                "iVar1": {
                    "28": "read_result",
                    "2": "return_value"
                }
            }
        },
        "FUN_0800a18c": {
            "entrypoint": "0x0800a18c",
            "current_name": "handle_error_0800a18c",
            "code": "\nvoid handle_error_0800a18c(void)\n\n{\n  code *jump_table;\n  \n  jump_table = handle_error_0800a18c;\n  abort_function();\n  if (-1 < DAT_200009c0 << 0x1f) {\n    DAT_200009c0 = 1;\n  }\n  if (-1 < DAT_200009bc << 0x1f) {\n    DAT_200009bc = 1;\n  }\n  if (-1 < DAT_200009b8 << 0x1f) {\n    DAT_200009b8 = 1;\n  }\n  if (-1 < DAT_200009b4 << 0x1f) {\n    DAT_200009b4 = 1;\n  }\n  if (-1 < DAT_200009b0 << 0x1f) {\n    DAT_200009b0 = 1;\n  }\n  if (-1 < DAT_200009ac << 0x1f) {\n    DAT_200009ac = 1;\n  }\n  if (-1 < DAT_200009a8 << 0x1f) {\n    DAT_200009a8 = 1;\n  }\n  if (-1 < DAT_200009a4 << 0x1f) {\n    DAT_200009a4 = 1;\n  }\n  if (-1 < DAT_200009a0 << 0x1f) {\n    DAT_200009a0 = 1;\n  }\n  if (-1 < DAT_2000099c << 0x1f) {\n    DAT_2000099c = 1;\n  }\n  if (-1 < DAT_20000998 << 0x1f) {\n    DAT_20000998 = 1;\n  }\n  if (-1 < DAT_20000994 << 0x1f) {\n    DAT_20000994 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x0800a224. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a18c": "handle_error_0800a18c",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "abort": "abort_function"
            },
            "calling": [
                "FUN_08009084"
            ],
            "called": [
                "FUN_08009b5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800a18c": {
                    "1": "handle_abort",
                    "2": "handle_function_error",
                    "7": "handle_error",
                    "3": "abort_and_set_flags"
                },
                "handle_error_08009b5c": {
                    "1": "handle_error_handler",
                    "22": "handle_error"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "1": "jumptable_function",
                    "8": "jump_table",
                    "4": "jumptable",
                    "2": "jmp_table"
                },
                "DAT_200009c0": {
                    "1": "var_1"
                },
                "DAT_200009bc": {
                    "1": "var_2"
                },
                "DAT_200009b8": {
                    "1": "var_3"
                },
                "DAT_200009b4": {
                    "1": "var_4"
                },
                "DAT_200009b0": {
                    "1": "var_5"
                },
                "DAT_200009ac": {
                    "1": "var_6"
                },
                "DAT_200009a8": {
                    "1": "var_7"
                },
                "DAT_200009a4": {
                    "1": "var_8"
                },
                "DAT_200009a0": {
                    "1": "var_9"
                },
                "DAT_2000099c": {
                    "1": "var_10"
                },
                "DAT_20000998": {
                    "1": "var_11"
                },
                "DAT_20000994": {
                    "1": "var_12"
                },
                "abort": {
                    "1": "abort_function"
                },
                "F_UNRECOVERED_JUMPTABLE": {
                    "1": "handle_error"
                },
                "FUN_0800a224": {
                    "1": "handle_error_2"
                }
            }
        },
        "FUN_0800a424": {
            "entrypoint": "0x0800a424",
            "current_name": "FUNC_0800a424",
            "code": "\nvoid FUNC_0800a424(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a424": "FUNC_0800a424"
            },
            "calling": [
                "FUN_08009148",
                "FUN_0800010c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800a430": {
            "entrypoint": "0x0800a430",
            "current_name": "FUNC_0800a430",
            "code": "\nvoid FUNC_0800a430(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a430": "FUNC_0800a430"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 1176934,
    "layers": [
        [
            "FUN_0800010c",
            "FUN_08000178",
            "FUN_08000188",
            "FUN_0800018c",
            "FUN_080004d4",
            "FUN_08000588",
            "FUN_080005e0",
            "FUN_08000aec",
            "FUN_08000ef8",
            "FUN_08002400",
            "FUN_0800242c",
            "FUN_08002578",
            "FUN_08002580",
            "FUN_080025ac",
            "FUN_08002644",
            "FUN_0800267c",
            "FUN_080026b0",
            "FUN_080026f8",
            "FUN_0800270c",
            "FUN_08002720",
            "FUN_080027f0",
            "FUN_0800288c",
            "FUN_0800291c",
            "FUN_08002948",
            "FUN_08002968",
            "FUN_08002a30",
            "FUN_08002a58",
            "FUN_08002acc",
            "FUN_08002c2c",
            "FUN_08002dbc",
            "FUN_08002ddc",
            "FUN_08002df6",
            "FUN_08002e44",
            "FUN_08002ec4",
            "FUN_08002ed2",
            "FUN_08002ef2",
            "FUN_08002efe",
            "FUN_08002f0a",
            "FUN_08002f14",
            "FUN_08002f1e",
            "FUN_08002f2c",
            "FUN_08002f84",
            "FUN_08002f94",
            "FUN_08002fa0",
            "FUN_08002fa8",
            "FUN_08002fba",
            "FUN_08002fc2",
            "FUN_08002fca",
            "FUN_08003002",
            "FUN_0800307a",
            "FUN_08003106",
            "FUN_0800314e",
            "FUN_08003154",
            "FUN_08003158",
            "FUN_0800319e",
            "FUN_080031ce",
            "FUN_0800322c",
            "FUN_0800325a",
            "FUN_080032a2",
            "FUN_080032bc",
            "FUN_08003306",
            "FUN_08003346",
            "FUN_08003350",
            "FUN_08003366",
            "FUN_08003370",
            "FUN_08003376",
            "FUN_080033a8",
            "FUN_080033cc",
            "FUN_0800344a",
            "FUN_08003474",
            "FUN_080035b8",
            "FUN_08003658",
            "FUN_080036a2",
            "FUN_080036ac",
            "FUN_080036d8",
            "FUN_08003724",
            "FUN_08003748",
            "FUN_08003760",
            "FUN_0800376c",
            "FUN_080038dc",
            "FUN_080038e4",
            "FUN_08003a1c",
            "FUN_08003a20",
            "FUN_08003aa0",
            "FUN_08003b8c",
            "FUN_08003bd8",
            "FUN_08003ce8",
            "FUN_08003de4",
            "FUN_08003e20",
            "FUN_08003f0c",
            "FUN_08003f30",
            "FUN_08003f94",
            "FUN_08003fb0",
            "FUN_08003fd8",
            "FUN_08004004",
            "FUN_08004024",
            "FUN_08004046",
            "FUN_08004050",
            "FUN_080040e8",
            "FUN_080042d4",
            "FUN_080042e2",
            "FUN_080042f0",
            "FUN_0800430c",
            "FUN_08004396",
            "FUN_080043a2",
            "FUN_0800457c",
            "FUN_0800459c",
            "FUN_080045c0",
            "FUN_08004728",
            "FUN_080047f4",
            "FUN_080048c8",
            "FUN_08004954",
            "FUN_080049e0",
            "FUN_08004a24",
            "FUN_08004a76",
            "FUN_08004ac2",
            "FUN_08004aec",
            "FUN_08004b82",
            "FUN_08004ccc",
            "FUN_08004d6c",
            "FUN_08004e3c",
            "FUN_08004f3c",
            "FUN_08005084",
            "FUN_08005188",
            "FUN_080052f0",
            "FUN_0800542a",
            "FUN_08005430",
            "FUN_08005434",
            "FUN_08005460",
            "FUN_08005840",
            "FUN_080058ac",
            "FUN_080058d2",
            "FUN_08005a1c",
            "FUN_08005a28",
            "FUN_08005a48",
            "FUN_08005a68",
            "FUN_08005aa4",
            "FUN_08005bb8",
            "FUN_08005cb4",
            "FUN_08005cec",
            "FUN_08005d48",
            "FUN_08005dac",
            "FUN_08005df4",
            "FUN_08005e2e",
            "FUN_08005e6e",
            "FUN_08005fe8",
            "FUN_08006060",
            "FUN_08006092",
            "FUN_080060c4",
            "FUN_08006128",
            "FUN_08006186",
            "FUN_08006262",
            "FUN_08006280",
            "FUN_080062f4",
            "FUN_08006390",
            "FUN_080063c0",
            "FUN_08006420",
            "FUN_0800643c",
            "FUN_08006460",
            "FUN_080064b0",
            "FUN_080064cc",
            "FUN_08006538",
            "FUN_080066e8",
            "FUN_0800674e",
            "FUN_080067ac",
            "FUN_0800688e",
            "FUN_080068d6",
            "FUN_08006932",
            "FUN_0800694c",
            "FUN_080069ec",
            "FUN_08006b1c",
            "FUN_08006b28",
            "FUN_08006b3e",
            "FUN_08006b5c",
            "FUN_08006b7c",
            "FUN_08006bb8",
            "FUN_08006c60",
            "FUN_08006c7c",
            "FUN_08006ca8",
            "FUN_08006d24",
            "FUN_08006d80",
            "FUN_08006e68",
            "FUN_08007110",
            "FUN_08007118",
            "FUN_080071e4",
            "FUN_0800723c",
            "FUN_08007246",
            "FUN_08007258",
            "FUN_080072d8",
            "FUN_080072f0",
            "FUN_080072fa",
            "FUN_08007306",
            "FUN_08007320",
            "FUN_08007332",
            "FUN_0800734a",
            "FUN_0800735a",
            "FUN_08007376",
            "FUN_0800738a",
            "FUN_080073ae",
            "FUN_080073c0",
            "FUN_080073e8",
            "FUN_080073ec",
            "FUN_08007438",
            "FUN_080074e0",
            "FUN_08007544",
            "FUN_08007594",
            "FUN_080075dc",
            "FUN_08007648",
            "FUN_080076e0",
            "FUN_08007708",
            "FUN_08007710",
            "FUN_08007718",
            "FUN_0800771c",
            "FUN_08007736",
            "FUN_08007744",
            "FUN_0800774a",
            "FUN_08007750",
            "FUN_080077b0",
            "FUN_08007e74",
            "FUN_08007ede",
            "FUN_08007f0e",
            "FUN_08007f78",
            "FUN_08007f7c",
            "FUN_08007f8e",
            "FUN_08007fa0",
            "FUN_08007ff0",
            "FUN_08008020",
            "FUN_08008078",
            "FUN_080084b0",
            "FUN_08008500",
            "FUN_080085b8",
            "FUN_080085dc",
            "FUN_08008600",
            "FUN_0800863c",
            "FUN_08008694",
            "FUN_080086e8",
            "FUN_0800870c",
            "FUN_08008730",
            "FUN_08008804",
            "FUN_08008840",
            "FUN_08008846",
            "FUN_08008850",
            "FUN_08008854",
            "FUN_08008858",
            "FUN_0800885c",
            "FUN_08008868",
            "FUN_0800886c",
            "FUN_0800887c",
            "FUN_08008880",
            "FUN_080088e0",
            "FUN_08008990",
            "FUN_08008a24",
            "FUN_08008a6c",
            "FUN_08008abc",
            "FUN_08008afa",
            "FUN_08008b66",
            "FUN_08008c20",
            "FUN_08008c44",
            "FUN_08008d00",
            "FUN_08008d18",
            "FUN_08008d30",
            "FUN_08008d8c",
            "FUN_08008df8",
            "FUN_08008e14",
            "FUN_08008ef4",
            "FUN_08008f1c",
            "FUN_08008f3c",
            "FUN_08008f78",
            "FUN_08009094",
            "FUN_080090c2",
            "FUN_080090cc",
            "FUN_08009108",
            "FUN_08009124",
            "FUN_08009148",
            "FUN_08009190",
            "FUN_080091a0",
            "FUN_080091b0",
            "FUN_080091c6",
            "FUN_080091d8",
            "FUN_08009270",
            "FUN_0800932c",
            "FUN_08009358",
            "FUN_0800937c",
            "FUN_080095a8",
            "FUN_08009698",
            "FUN_080098d8",
            "FUN_08009908",
            "FUN_08009918",
            "FUN_08009938",
            "FUN_08009954",
            "FUN_0800997e",
            "FUN_080099a4",
            "FUN_08009a80",
            "FUN_08009b5c",
            "FUN_08009c7c",
            "FUN_08009cdc",
            "FUN_08009d24",
            "FUN_08009d50",
            "FUN_08009db0",
            "FUN_08009e64",
            "FUN_08009eac",
            "FUN_08009f2c",
            "FUN_08009fe8",
            "FUN_0800a020",
            "FUN_0800a042",
            "FUN_0800a07a",
            "FUN_0800a0ec",
            "FUN_0800a110",
            "FUN_0800a130",
            "FUN_0800a154",
            "FUN_0800a168"
        ],
        [
            "FUN_08000214",
            "FUN_0800021a",
            "FUN_08000488",
            "FUN_080005f8",
            "FUN_08000be8",
            "FUN_08001bf8",
            "FUN_08001c08",
            "FUN_08001c18",
            "FUN_08001cd0",
            "FUN_080022f8",
            "FUN_08002634",
            "FUN_08002a1c",
            "FUN_08002ac0",
            "FUN_08002b68",
            "FUN_08002c1e",
            "FUN_08002ce0",
            "FUN_08002e26",
            "FUN_08008f0e"
        ],
        [
            "FUN_08000500",
            "FUN_08002a26",
            "FUN_08002c00",
            "FUN_08003048"
        ],
        [
            "FUN_08000a64",
            "FUN_08001b48",
            "FUN_08002c14"
        ],
        [
            "FUN_08009084",
            "FUN_0800a18c"
        ]
    ],
    "locked_functions": []
}