{
    "functions": {
        "FUN_0800010c": {
            "entrypoint": "0x0800010c",
            "current_name": "update_completed_flag_0800010c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000118) */\n\nundefined4 updateCompletedFlag_0800010c(undefined4 inputValue)\n\n{\n  if ((char)completed_8667 == '\\0') {\n    completed_8667._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_0800010c": "update_completed_flag_0800010c",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000130": {
            "entrypoint": "0x08000130",
            "current_name": "FUNC_08000130",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000134) */\n/* WARNING: Removing unreachable block (ram,0x0800014e) */\n/* WARNING: Removing unreachable block (ram,0x08000144) */\n/* WARNING: Removing unreachable block (ram,0x08000160) */\n/* WARNING: Removing unreachable block (ram,0x08000154) */\n\nvoid FUNC_08000130(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000130": "FUNC_08000130"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08000178": {
            "entrypoint": "0x08000178",
            "current_name": "calculate_string_length_08000178",
            "code": "\nsize_t calculateStringLength_08000178(char *inputString)\n\n{\n  char currentChar;\n  char *nextCharPtr;\n  char *currentCharPtr;\n  \n  currentCharPtr = inputString;\n  do {\n    nextCharPtr = currentCharPtr + 1;\n    currentChar = *currentCharPtr;\n    currentCharPtr = nextCharPtr;\n  } while (currentChar != '\\0');\n  return (size_t)(nextCharPtr + (-1 - (int)inputString));\n}\n\n",
            "renaming": {
                "FUN_08000178": "calculate_string_length_08000178",
                "__s": "inputString",
                "cVar1": "currentChar",
                "pcVar2": "nextCharPtr",
                "pcVar3": "currentCharPtr"
            },
            "calling": [
                "sendString",
                "setFirmwareNameAndVersion",
                "printNumber"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000188": {
            "entrypoint": "0x08000188",
            "current_name": "call_software_interrupt_08000188",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t callSoftwareInterrupt_08000188(uint32_t a0,uint32_t a1,int32_t a2)\n\n{\n  software_interrupt(0x3f);\n  return a0;\n}\n\n",
            "renaming": {
                "FUN_08000188": "call_software_interrupt_08000188"
            },
            "calling": [
                "startForkserver"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800018c": {
            "entrypoint": "0x0800018c",
            "current_name": "execute_afl_call_0800018c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint executeAflCall_0800018c(int numTicks)\n\n{\n  uint32_t aflReturnValue;\n  \n  if (noHyperCall != 0) {\n    return 0;\n  }\n  aflReturnValue = aflCall(1,numTicks,0);\n  return aflReturnValue;\n}\n\n",
            "renaming": {
                "FUN_0800018c": "execute_afl_call_0800018c",
                "ticks": "numTicks",
                "uVar1": "aflReturnValue"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "aflCall"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080001a8": {
            "entrypoint": "0x080001a8",
            "current_name": "update_pin_value_080001a8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid updatePinValue_080001a8(byte pinNumber,int pinValue)\n\n{\n  bool isValidPin;\n  byte pinMode;\n  uint unsignedPin;\n  uint32_t digitalPinValue;\n  \n  unsignedPin = (uint)pinNumber;\n  if (unsignedPin < 0x3c) {\n    if (unsignedPin < 0x3c) {\n      if ((&digitalPin)[unsignedPin] == NC) {\n        isValidPin = false;\n      }\n      else {\n        digitalPinValue = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n        if (digitalPinValue == 0) {\n          isValidPin = false;\n        }\n        else {\n          digitalPinValue = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n          if (digitalPinValue == 1) {\n            isValidPin = false;\n          }\n          else {\n            isValidPin = true;\n          }\n        }\n      }\n    }\n    else {\n      isValidPin = false;\n    }\n  }\n  else {\n    isValidPin = false;\n  }\n  if ((isValidPin) && (pinMode = firmata::FirmataClass::getPinMode(&Firmata,pinNumber), pinMode == '\\x01')) {\n    firmata::FirmataClass::setPinState(&Firmata,pinNumber,pinValue);\n    digitalWrite(unsignedPin,pinValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001a8": "update_pin_value_080001a8",
                "pin": "pinNumber",
                "value": "pinValue",
                "bVar1": "isValidPin",
                "bVar2": "pinMode",
                "ulPin": "unsignedPin",
                "uVar3": "digitalPinValue"
            },
            "calling": [],
            "called": [
                "digitalWrite",
                "pinNametoDigitalPin",
                "getPinMode",
                "setPinState"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000214": {
            "entrypoint": "0x08000214",
            "current_name": "control_pin_08000214",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid controlPin_08000214(byte pinNumber,int pinValue)\n\n{\n  bool isServo;\n  byte pinMode;\n  _Bool isValid;\n  uint unsignedPin;\n  uint32_t convertedPin;\n  void *servoParams;\n  \n  unsignedPin = (uint)pinNumber;\n  if (0x3b < unsignedPin) {\n    return;\n  }\n  pinMode = firmata::FirmataClass::getPinMode(&Firmata,pinNumber);\n  if (pinMode == '\\x03') {\n    if (unsignedPin < 0x3c) {\n      if ((&digitalPin)[unsignedPin] == NC) {\n        isValid = false;\n      }\n      else {\n        convertedPin = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n        if (convertedPin == 0) {\n          isValid = false;\n        }\n        else {\n          convertedPin = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n          if (convertedPin == 1) {\n            isValid = false;\n          }\n          else {\n            isValid = pinNumber_in_pinNumbermap((&digitalPin)[unsignedPin],(PinMap_conflict *)&PinMap_PWM);\n          }\n        }\n      }\n    }\n    else {\n      isValid = false;\n    }\n    if (isValid != false) {\n      analogWrite(unsignedPin,pinValue);\n    }\n    firmata::FirmataClass::setPinState(&Firmata,pinNumber,pinValue);\n  }\n  else if (pinMode == '\\x04') {\n    if (unsignedPin < 0x3c) {\n      if ((&digitalPin)[unsignedPin] == NC) {\n        isServo = false;\n      }\n      else {\n        convertedPin = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n        if (convertedPin == 0) {\n          isServo = false;\n        }\n        else {\n          convertedPin = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n          if (convertedPin == 1) {\n            isServo = false;\n          }\n          else {\n            isServo = true;\n          }\n        }\n      }\n    }\n    else {\n      isServo = false;\n    }\n    if (isServo) {\n      Servo::write(servos + servoPinMap[unsignedPin],pinValue,servoParams,(size_t)servos);\n    }\n    firmata::FirmataClass::setPinState(&Firmata,pinNumber,pinValue);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000214": "control_pin_08000214",
                "pin": "pinNumber",
                "value": "pinValue",
                "bVar1": "isServo",
                "bVar2": "pinMode",
                "_Var3": "isValid",
                "ulPin": "unsignedPin",
                "uVar4": "convertedPin",
                "in_r2": "servoParams"
            },
            "calling": [
                "sysexCallback"
            ],
            "called": [
                "pin_in_pinmap",
                "pinNametoDigitalPin",
                "getPinMode",
                "write",
                "setPinState",
                "analogWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002ec": {
            "entrypoint": "0x080002ec",
            "current_name": "set_digital_pin_state_080002ec",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid setDigitalPinState_080002ec(byte pinPort,int pinValue)\n\n{\n  bool isPinValid;\n  byte pinMode;\n  uint portValue;\n  uint32_t digitalPinValue;\n  int pinState;\n  byte currentPin;\n  uint32_t pinIndex;\n  uint bitMask;\n  byte lastPin;\n  uint maxPin;\n  byte pin;\n  byte pin1;\n  uint32_t pinIndexOffset;\n  uint maskValue;\n  byte pinValue;\n  \n  portValue = (uint)pinPort;\n  if (portValue < 5) {\n    maxPin = (portValue + 1 & 0x1f) * 8;\n    if (0x3c < maxPin) {\n      maxPin = 0x3c;\n    }\n    maskValue = 0;\n    bitMask = 1;\n    pinIndexOffset = (portValue & 0x1f) * 8;\n    for (pinIndex = pinIndexOffset; pinIndex < maxPin; pinIndex = pinIndex + 1 & 0xff) {\n      if (pinIndex < 0x3c) {\n        if ((&digitalPin)[pinIndex] == NC) {\n          isPinValid = false;\n        }\n        else {\n          digitalPinValue = pinNametoDigitalPin((&digitalPin)[pinIndex]);\n          if (digitalPinValue == 0) {\n            isPinValid = false;\n          }\n          else {\n            digitalPinValue = pinNametoDigitalPin((&digitalPin)[pinIndex]);\n            if (digitalPinValue == 1) {\n              isPinValid = false;\n            }\n            else {\n              isPinValid = true;\n            }\n          }\n        }\n      }\n      else {\n        isPinValid = false;\n      }\n      if (isPinValid) {\n        currentPin = (byte)pinIndex;\n        pinMode = firmata::FirmataClass::getPinMode(&Firmata,currentPin);\n        if ((pinMode != '\\x01') &&\n           (pinMode = firmata::FirmataClass::getPinMode(&Firmata,currentPin), pinMode != '\\0')) {\n          isPinValid = false;\n        }\n        if (isPinValid) {\n          portValue = (uint)((bitMask & pinValue) != 0);\n          pinMode = firmata::FirmataClass::getPinMode(&Firmata,currentPin);\n          if (pinMode == '\\x01') {\n            maskValue = bitMask | maskValue;\n          }\n          else {\n            pinMode = firmata::FirmataClass::getPinMode(&Firmata,currentPin);\n            if (pinMode == '\\0') {\n              if (portValue == 0) {\n                isPinValid = false;\n              }\n              else {\n                pinState = firmata::FirmataClass::getPinState(&Firmata,currentPin);\n                if (pinState == 1) {\n                  isPinValid = false;\n                }\n              }\n            }\n            else {\n              isPinValid = false;\n            }\n            if (isPinValid) {\n              pinMode(pinIndex,2);\n            }\n          }\n          firmata::FirmataClass::setPinState(&Firmata,currentPin,portValue);\n        }\n      }\n      bitMask = (bitMask & 0x7f) << 1;\n    }\n    if ((maskValue & 1) != 0) {\n      digitalWrite(pinIndexOffset,pinValue & 1);\n    }\n    if ((maskValue & 2) != 0) {\n      digitalWrite(pinIndexOffset + 1,pinValue & 2);\n    }\n    if ((maskValue & 4) != 0) {\n      digitalWrite(pinIndexOffset + 2,pinValue & 4);\n    }\n    if ((maskValue & 8) != 0) {\n      digitalWrite(pinIndexOffset + 3,pinValue & 8);\n    }\n    if ((maskValue & 0x10) != 0) {\n      digitalWrite(pinIndexOffset + 4,pinValue & 0x10);\n    }\n    if ((maskValue & 0x20) != 0) {\n      digitalWrite(pinIndexOffset + 5,pinValue & 0x20);\n    }\n    if ((maskValue & 0x40) != 0) {\n      digitalWrite(pinIndexOffset + 6,pinValue & 0x40);\n    }\n    if ((maskValue & 0x80) != 0) {\n      digitalWrite(pinIndexOffset + 7,pinValue & 0x80);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002ec": "set_digital_pin_state_080002ec",
                "port": "pinPort",
                "value": "pinValue",
                "bVar1": "isPinValid",
                "bVar2": "pinMode",
                "uVar3": "portValue",
                "uVar4": "digitalPinValue",
                "iVar5": "pinState",
                "pin_00": "currentPin",
                "ulPin": "pinIndex",
                "uVar6": "bitMask",
                "uVar7": "maxPin",
                "pin_1": "pin1",
                "ulPin_00": "pinIndexOffset",
                "uVar8": "maskValue"
            },
            "calling": [],
            "called": [
                "digitalWrite",
                "getPinState",
                "pinNametoDigitalPin",
                "getPinMode",
                "setPinState",
                "pinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000488": {
            "entrypoint": "0x08000488",
            "current_name": "update_analog_pin_08000488",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid updateAnalogPin_08000488(byte pinNumber,int pinValue)\n\n{\n  uint pin;\n  uint32_t analogValue;\n  \n  pin = (uint)pinNumber;\n  if (pin < 0xe) {\n    if (pinValue == 0) {\n      analogInputsToReport = analogInputsToReport & ~(1 << pin);\n      return;\n    }\n    analogInputsToReport = 1 << pin | analogInputsToReport;\n    if (!isResetting) {\n      analogValue = analogRead(pin);\n      firmata::FirmataClass::sendAnalog(&Firmata,pinNumber,analogValue);\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000488": "update_analog_pin_08000488",
                "analogPin": "pinNumber",
                "value": "pinValue",
                "ulPin": "pin",
                "value_00": "analogValue"
            },
            "calling": [
                "setPinModeCallback"
            ],
            "called": [
                "analogRead",
                "sendAnalog"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004d4": {
            "entrypoint": "0x080004d4",
            "current_name": "initialize_servos_080004d4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeServos_080004d4(int isInitialization,int priority)\n\n{\n  int count;\n  ServoClass *currentServo;\n  \n  if (isInitialization != 1) {\n    return;\n  }\n  if (priority == 0xffff) {\n    currentServo = servoArray;\n    for (count = 0xb; -1 < count; count = count + -1) {\n      ServoClass::ServoClass(currentServo);\n      currentServo = currentServo + 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004d4": "initialize_servos_080004d4",
                "__initialize_p": "isInitialization",
                "__priority": "priority",
                "iVar1": "count",
                "this": "currentServo",
                "Servo": "ServoClass",
                "servos": "servoArray"
            },
            "calling": [
                "_GLOBAL__sub_I_analogInputsToReport"
            ],
            "called": [
                "Servo"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000500": {
            "entrypoint": "0x08000500",
            "current_name": "attach_servo_08000500",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid attachServo_08000500(byte servoPin,int minimumPulse,int maximumPulse)\n\n{\n  uint convertedPin;\n  \n  convertedPin = (uint)servoPin;\n  if (0xb < attachedServoCount) {\n    firmata::FirmataClass::sendString(&Firmata,\"Max servos attached\");\n    return;\n  }\n  if (countOfDetachedServos == 0) {\n    servoPinMapping[convertedPin] = attachedServoCount;\n    attachedServoCount = attachedServoCount + '\\x01';\n  }\n  else {\n    servoPinMapping[convertedPin] = (&DAT_2000011f)[countOfDetachedServos];\n    countOfDetachedServos = countOfDetachedServos + 0xff;\n  }\n  if ((0 < minimumPulse) && (0 < maximumPulse)) {\n    Servo::attach(servos + servoPinMapping[convertedPin],convertedPin,minimumPulse,maximumPulse);\n    return;\n  }\n  Servo::attach(servos + servoPinMapping[convertedPin],convertedPin);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000500": "attach_servo_08000500",
                "pin": "servoPin",
                "minPulse": "minimumPulse",
                "maxPulse": "maximumPulse",
                "pin_00": "convertedPin",
                "servoCount": "attachedServoCount",
                "detachedServoCount": "countOfDetachedServos",
                "servoPinMap[pin_00]": "servoPinMapping[convertedPin]"
            },
            "calling": [
                "setPinModeCallback",
                "sysexCallback"
            ],
            "called": [
                "attach",
                "attach",
                "sendString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000588": {
            "entrypoint": "0x08000588",
            "current_name": "detach_servo_08000588",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid detachServo_08000588(byte servoPin)\n\n{\n  Servo::detach(servoArray + pinMap[servoPin]);\n  if ((pinMap[servoPin] == totalServos) && (totalServos != '\\0')) {\n    totalServos = totalServos + 0xff;\n  }\n  else if (totalServos != '\\0') {\n    totalDetachedServos = totalDetachedServos + 1;\n    (&DAT_2000011f)[totalDetachedServos] = pinMap[servoPin];\n  }\n  pinMap[servoPin] = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000588": "detach_servo_08000588",
                "pin": "servoPin",
                "servoPinMap": "pinMap",
                "servos": "servoArray",
                "servoCount": "totalServos",
                "detachedServoCount": "totalDetachedServos"
            },
            "calling": [
                "setPinModeCallback",
                "sysexCallback"
            ],
            "called": [
                "detach"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e0": {
            "entrypoint": "0x080005e0",
            "current_name": "disable_i2_c_and_reset_query_080005e0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid disableI2CAndResetQuery_080005e0(void)\n\n{\n  IsI2CEnabled = false;\n  QueryIndex = -1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005e0": "disable_i2_c_and_reset_query_080005e0",
                "isI2CEnabled": "IsI2CEnabled",
                "queryIndex": "QueryIndex"
            },
            "calling": [
                "systemResetCallback",
                "setPinModeCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005f8": {
            "entrypoint": "0x080005f8",
            "current_name": "set_pin_mode_and_state_080005f8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid setPinModeAndState_080005f8(byte pinNumber,int pinMode)\n\n{\n  byte pinModeResult;\n  PinName_conflict pinName;\n  bool isPinValid;\n  bool isServoAttached;\n  _Bool isPinInMap;\n  uint unsignedPin;\n  uint32_t digitalPin;\n  char i2cEnabled;\n  uint analogPin;\n  \n  unsignedPin = (uint)pinNumber;\n  pinModeResult = firmata::FirmataClass::getPinMode(&Firmata,pinNumber);\n  if (pinModeResult != '\\x7f') {\n    pinModeResult = firmata::FirmataClass::getPinMode(&Firmata,pinNumber);\n    if (pinModeResult == '\\x06') {\n      if (isI2CEnabled == false) {\n        i2cEnabled = '\\0';\n      }\n      else {\n        i2cEnabled = isI2CEnabled;\n        if (pinMode == 6) {\n          i2cEnabled = '\\0';\n        }\n      }\n    }\n    else {\n      i2cEnabled = '\\0';\n    }\n    if (i2cEnabled != '\\0') {\n      disableI2CPins();\n    }\n    if (unsignedPin < 0x3c) {\n      if ((&digitalPin)[unsignedPin] == NC) {\n        isPinValid = false;\n      }\n      else {\n        digitalPin = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n        if (digitalPin == 0) {\n          isPinValid = false;\n        }\n        else {\n          digitalPin = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n          if (digitalPin == 1) {\n            isPinValid = false;\n          }\n          else if (pinMode == 4) {\n            isPinValid = false;\n          }\n          else {\n            isPinValid = true;\n          }\n        }\n      }\n    }\n    else {\n      isPinValid = false;\n    }\n    if (isPinValid) {\n      if (servoPinMap[unsignedPin] < 0xc) {\n        isPinValid = Servo::attached(servos + servoPinMap[unsignedPin]);\n      }\n      else {\n        isPinValid = false;\n      }\n      if (isPinValid != false) {\n        detachServo(pinNumber);\n      }\n    }\n    analogPin = unsignedPin - 0x2e & 0xff;\n    if (analogPin < 0xe) {\n      if (unsignedPin < 0x3c) {\n        pinName = (&digitalPin)[unsignedPin];\n      }\n      else {\n        pinName = NC;\n      }\n      digitalPin = pinNumberNametoDigitalPin(pinName);\n      if (digitalPin == 0) {\n        isPinValid = false;\n      }\n      else {\n        if (unsignedPin < 0x3c) {\n          pinName = (&digitalPin)[unsignedPin];\n        }\n        else {\n          pinName = NC;\n        }\n        digitalPin = pinNumberNametoDigitalPin(pinName);\n        if (digitalPin == 1) {\n          isPinValid = false;\n        }\n        else {\n          isPinValid = true;\n        }\n      }\n    }\n    else {\n      isPinValid = false;\n    }\n    if (isPinValid) {\n      reportAnalogCallback((byte)analogPin,(uint)(pinMode == 2));\n    }\n    if (unsignedPin < 0x3c) {\n      if ((&digitalPin)[unsignedPin] == NC) {\n        isPinValid = false;\n      }\n      else {\n        digitalPin = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n        if (digitalPin == 0) {\n          isPinValid = false;\n        }\n        else {\n          digitalPin = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n          if (digitalPin == 1) {\n            isPinValid = false;\n          }\n          else {\n            isPinValid = true;\n          }\n        }\n      }\n    }\n    else {\n      isPinValid = false;\n    }\n    if (isPinValid) {\n      if ((pinMode == 0) || (pinMode == 0xb)) {\n        portConfigInputs[pinNumber >> 3] = portConfigInputs[pinNumber >> 3] | (byte)(1 << (unsignedPin & 7));\n      }\n      else {\n        portConfigInputs[pinNumber >> 3] = portConfigInputs[pinNumber >> 3] & ~(byte)(1 << (unsignedPin & 7));\n      }\n    }\n    firmata::FirmataClass::setPinState(&Firmata,pinNumber,0);\n    switch(pinMode) {\n    case 0:\n      if (unsignedPin < 0x3c) {\n        if ((&digitalPin)[unsignedPin] == NC) {\n          isPinValid = false;\n        }\n        else {\n          digitalPin = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n          if (digitalPin == 0) {\n            isPinValid = false;\n          }\n          else {\n            digitalPin = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n            if (digitalPin == 1) {\n              isPinValid = false;\n            }\n            else {\n              isPinValid = true;\n            }\n          }\n        }\n      }\n      else {\n        isPinValid = false;\n      }\n      if (isPinValid) {\n        pinNumberMode(unsignedPin,0);\n        firmata::FirmataClass::setPinMode(&Firmata,pinNumber,'\\0');\n        return;\n      }\n      break;\n    case 1:\n      if (unsignedPin < 0x3c) {\n        if ((&digitalPin)[unsignedPin] == NC) {\n          isPinValid = false;\n        }\n        else {\n          digitalPin = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n          if (digitalPin == 0) {\n            isPinValid = false;\n          }\n          else {\n            digitalPin = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n            if (digitalPin == 1) {\n              isPinValid = false;\n            }\n            else {\n              isPinValid = true;\n            }\n          }\n        }\n      }\n      else {\n        isPinValid = false;\n      }\n      if (isPinValid) {\n        pinModeResult = firmata::FirmataClass::getPinMode(&Firmata,pinNumber);\n        if (pinModeResult == '\\x03') {\n          digitalWrite(unsignedPin,0);\n        }\n        pinNumberMode(unsignedPin,1);\n        firmata::FirmataClass::setPinMode(&Firmata,pinNumber,'\\x01');\n        return;\n      }\n      break;\n    case 2:\n      if (analogPin < 0xe) {\n        if (unsignedPin < 0x3c) {\n          pinName = (&digitalPin)[unsignedPin];\n        }\n        else {\n          pinName = NC;\n        }\n        digitalPin = pinNumberNametoDigitalPin(pinName);\n        if (digitalPin == 0) {\n          isPinValid = false;\n        }\n        else {\n          if (unsignedPin < 0x3c) {\n            pinName = (&digitalPin)[unsignedPin];\n          }\n          else {\n            pinName = NC;\n          }\n          digitalPin = pinNumberNametoDigitalPin(pinName);\n          if (digitalPin == 1) {\n            isPinValid = false;\n          }\n          else {\n            isPinValid = true;\n          }\n        }\n      }\n      else {\n        isPinValid = false;\n      }\n      if (isPinValid) {\n        if (unsignedPin < 0x3c) {\n          if ((&digitalPin)[unsignedPin] == NC) {\n            isPinValid = false;\n          }\n          else {\n            digitalPin = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n            if (digitalPin == 0) {\n              isPinValid = false;\n            }\n            else {\n              digitalPin = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n              if (digitalPin == 1) {\n                isPinValid = false;\n              }\n            }\n          }\n        }\n        else {\n          isPinValid = false;\n        }\n        if (isPinValid) {\n          pinNumberMode(unsignedPin,0);\n        }\n        firmata::FirmataClass::setPinMode(&Firmata,pinNumber,'\\x02');\n        return;\n      }\n      break;\n    case 3:\n      if (unsignedPin < 0x3c) {\n        if ((&digitalPin)[unsignedPin] == NC) {\n          isPinInMap = false;\n        }\n        else {\n          digitalPin = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n          if (digitalPin == 0) {\n            isPinInMap = false;\n          }\n          else {\n            digitalPin = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n            if (digitalPin == 1) {\n              isPinInMap = false;\n            }\n            else {\n              isPinInMap = pinNumber_in_pinNumbermap((&digitalPin)[unsignedPin],(PinMap_conflict *)&PinMap_PWM);\n            }\n          }\n        }\n      }\n      else {\n        isPinInMap = false;\n      }\n      if (isPinInMap != false) {\n        pinNumberMode(unsignedPin,1);\n        analogWrite(unsignedPin,0);\n        firmata::FirmataClass::setPinMode(&Firmata,pinNumber,'\\x03');\n        return;\n      }\n      break;\n    case 4:\n      if (unsignedPin < 0x3c) {\n        if ((&digitalPin)[unsignedPin] == NC) {\n          isPinValid = false;\n        }\n        else {\n          digitalPin = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n          if (digitalPin == 0) {\n            isPinValid = false;\n          }\n          else {\n            digitalPin = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n            if (digitalPin == 1) {\n              isPinValid = false;\n            }\n            else {\n              isPinValid = true;\n            }\n          }\n        }\n      }\n      else {\n        isPinValid = false;\n      }\n      if (isPinValid) {\n        firmata::FirmataClass::setPinMode(&Firmata,pinNumber,'\\x04');\n        if ((servoPinMap[unsignedPin] != 0xff) &&\n           (isServoAttached = Servo::attached(servos + servoPinMap[unsignedPin]), isServoAttached)) {\n          isPinValid = false;\n        }\n        if (isPinValid) {\n          attachServo(pinNumber,-1,-1);\n          return;\n        }\n      }\n      break;\n    default:\n      firmata::FirmataClass::sendString(&Firmata,\"Unknown pinNumber pinMode\");\n      break;\n    case 6:\n      if (unsignedPin < 0x3c) {\n        if ((&digitalPin)[unsignedPin] == NC) {\n          isPinInMap = false;\n        }\n        else {\n          digitalPin = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n          if (digitalPin == 0) {\n            isPinInMap = false;\n          }\n          else {\n            digitalPin = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n            if (digitalPin == 1) {\n              isPinInMap = false;\n            }\n            else {\n              isPinInMap = pinNumber_in_pinNumbermap((&digitalPin)[unsignedPin],(PinMap_conflict *)&PinMap_I2C_SDA);\n              if (!isPinInMap) {\n                isPinInMap = pinNumber_in_pinNumbermap((&digitalPin)[unsignedPin],(PinMap_conflict *)&PinMap_I2C_SCL);\n              }\n            }\n          }\n        }\n      }\n      else {\n        isPinInMap = false;\n      }\n      if (isPinInMap != false) {\n        firmata::FirmataClass::setPinMode(&Firmata,pinNumber,'\\x06');\n        return;\n      }\n      break;\n    case 10:\n      break;\n    case 0xb:\n      if (unsignedPin < 0x3c) {\n        if ((&digitalPin)[unsignedPin] == NC) {\n          isPinValid = false;\n        }\n        else {\n          digitalPin = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n          if (digitalPin == 0) {\n            isPinValid = false;\n          }\n          else {\n            digitalPin = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n            if (digitalPin == 1) {\n              isPinValid = false;\n            }\n            else {\n              isPinValid = true;\n            }\n          }\n        }\n      }\n      else {\n        isPinValid = false;\n      }\n      if (isPinValid) {\n        pinNumberMode(unsignedPin,2);\n        firmata::FirmataClass::setPinMode(&Firmata,pinNumber,'\\v');\n        firmata::FirmataClass::setPinState(&Firmata,pinNumber,1);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005f8": "set_pin_mode_and_state_080005f8",
                "pin": "pinNumber",
                "mode": "pinMode",
                "bVar1": "pinModeResult",
                "PVar2": "pinName",
                "bVar3": "isPinValid",
                "bVar4": "isServoAttached",
                "_Var5": "isPinInMap",
                "ulPin": "unsignedPin",
                "uVar6": "digitalPin",
                "uVar8": "analogPin",
                "cVar7": "i2cEnabled"
            },
            "calling": [
                "systemResetCallback",
                "enableI2CPins",
                "sysexCallback"
            ],
            "called": [
                "attached",
                "disableI2CPins",
                "setPinMode",
                "setPinState",
                "analogWrite",
                "reportAnalogCallback",
                "digitalWrite",
                "pin_in_pinmap",
                "pinNametoDigitalPin",
                "detachServo",
                "getPinMode",
                "sendString",
                "pinMode",
                "attachServo"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a64": {
            "entrypoint": "0x08000a64",
            "current_name": "initialize_i2_c_08000a64",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeI2C_08000a64(void)\n\n{\n  _Bool _Var1;\n  uint32_t convertedPin;\n  uint pinIndex;\n  \n  for (pinIndex = 0; pinIndex < 0x3c; pinIndex = pinIndex + 1 & 0xff) {\n    if (pinIndex < 0x3c) {\n      if ((&pinArray)[pinIndex] == NOT_CONNECTED) {\n        _Var1 = false;\n      }\n      else {\n        convertedPin = convertPinNameToDigitalPin((&pinArray)[pinIndex]);\n        if (convertedPin == 0) {\n          _Var1 = false;\n        }\n        else {\n          convertedPin = convertPinNameToDigitalPin((&pinArray)[pinIndex]);\n          if (convertedPin == 1) {\n            _Var1 = false;\n          }\n          else {\n            _Var1 = isPinInPinMap((&pinArray)[pinIndex],(PinMapConflict *)&PinMap_I2C_SDA);\n            if (!_Var1) {\n              _Var1 = isPinInPinMap((&pinArray)[pinIndex],(PinMapConflict *)&PinMap_I2C_SCL);\n            }\n          }\n        }\n      }\n    }\n    else {\n      _Var1 = false;\n    }\n    if (_Var1 != false) {\n      setPinMode((byte)pinIndex,6);\n    }\n  }\n  isI2CEnabled = true;\n  beginI2C(Wire);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000a64": "initialize_i2_c_08000a64",
                "NC": "NOT_CONNECTED",
                "uVar2": "convertedPin",
                "uVar3": "pinIndex",
                "digitalPin": "pinArray",
                "pinNametoDigitalPin": "convertPinNameToDigitalPin",
                "pin_in_pinmap": "isPinInPinMap",
                "PinMap_conflict": "PinMapConflict",
                "setPinModeCallback": "setPinMode",
                "TwoWire::begin": "beginI2C",
                "&Wire": "Wire"
            },
            "calling": [
                "sysexCallback"
            ],
            "called": [
                "pin_in_pinmap",
                "begin",
                "setPinModeCallback",
                "pinNametoDigitalPin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aec": {
            "entrypoint": "0x08000aec",
            "current_name": "reset_and_initialize_board_08000aec",
            "code": "\n/* WARNING: Unknown callindexng conventindexon */\n\nvoindexd resetAndInitializeBoard_08000aec(voindexd)\n\n{\n  bool isDigitalPin;\n  PindexnName_conflindexct pinName;\n  uindexnt32_t digitalPinIndex;\n  byte index;\n  uindexnt loopIndex;\n  byte index_1;\n  \n  indexsResettindexng = true;\n  indexf (indexsI2CEnabled) {\n    dindexsableI2CPindexns();\n  }\n  for (loopIndex = 0; loopIndex < 5; loopIndex = loopIndex + 1 & 0xff) {\n    reportPINs[loopIndex] = '\\0';\n    portConfindexgInputs[loopIndex] = '\\0';\n    previndexousPINs[loopIndex] = '\\0';\n  }\n  for (loopIndex = 0; loopIndex < 0x3c; loopIndex = loopIndex + 1 & 0xff) {\n    indexf ((loopIndex - 0x2e & 0xff) < 0xe) {\n      indexf (loopIndex < 0x3c) {\n        pinName = (&dindexgindextalPindexn)[loopIndex];\n      }\n      else {\n        pinName = NC;\n      }\n      digitalPinIndex = pindexnNametoDindexgindextalPindexn(pinName);\n      indexf (digitalPinIndex == 0) {\n        isDigitalPin = false;\n      }\n      else {\n        indexf (loopIndex < 0x3c) {\n          pinName = (&dindexgindextalPindexn)[loopIndex];\n        }\n        else {\n          pinName = NC;\n        }\n        digitalPinIndex = pindexnNametoDindexgindextalPindexn(pinName);\n        indexf (digitalPinIndex == 1) {\n          isDigitalPin = false;\n        }\n        else {\n          isDigitalPin = true;\n        }\n      }\n    }\n    else {\n      isDigitalPin = false;\n    }\n    indexf (isDigitalPin) {\n      setPindexnModeCallback((byte)loopIndex,2);\n    }\n    else {\n      indexf ((((loopIndex < 0x3c) && ((&dindexgindextalPindexn)[loopIndex] != NC)) &&\n          (digitalPinIndex = pindexnNametoDindexgindextalPindexn((&dindexgindextalPindexn)[loopIndex]), digitalPinIndex != 0)) &&\n         (digitalPinIndex = pindexnNametoDindexgindextalPindexn((&dindexgindextalPindexn)[loopIndex]), digitalPinIndex != 1)) {\n        isDigitalPin = true;\n      }\n      indexf (isDigitalPin) {\n        setPindexnModeCallback((byte)loopIndex,1);\n      }\n    }\n    servoPindexnMap[loopIndex] = 0xff;\n  }\n  analogInputsToReport = 0;\n  detachedServoCount = '\\0';\n  servoCount = '\\0';\n  indexsResettindexng = false;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000aec": "reset_and_initialize_board_08000aec",
                "bVar1": "isDigitalPin",
                "PVar2": "pinName",
                "uVar3": "digitalPinIndex",
                "i": "index",
                "uVar4": "loopIndex",
                "i_1": "index_1"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "pinNametoDigitalPin",
                "setPinModeCallback",
                "disableI2CPins"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000be8": {
            "entrypoint": "0x08000be8",
            "current_name": "send_digital_port_if_needed_08000be8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid sendDigitalPortIfNeeded_08000be8(byte portNum,byte portVal,byte sendForced)\n\n{\n  byte inputConfig;\n  \n  inputConfig = portInputConfig[portNum] & portVal;\n  if ((sendForced != '\\0') || ((uint)inputConfig != (uint)previousValues[portNum])) {\n    firmata::FirmataClass::sendDigitalPort(firmataClass,portNum,(uint)inputConfig);\n    previousValues[portNum] = inputConfig;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000be8": "send_digital_port_if_needed_08000be8",
                "portNumber": "portNum",
                "portValue": "portVal",
                "forceSend": "sendForced",
                "bVar1": "inputConfig",
                "portConfigInputs": "portInputConfig",
                "previousPINs": "previousValues",
                "&Firmata": "firmataClass"
            },
            "calling": [
                "checkDigitalInputs",
                "reportDigitalCallback"
            ],
            "called": [
                "sendDigitalPort"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c18": {
            "entrypoint": "0x08000c18",
            "current_name": "update_port_value_08000c18",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid updatePortValue_08000c18(byte portNumber,int inputValue)\n\n{\n  byte inputConfig;\n  bool isHigh;\n  uint32_t digitalPinValue;\n  int readValue;\n  uchar pinNumber;\n  uint portIndex;\n  byte CJNFHTNotConnectedAF;\n  \n  portIndex = (uint)portNumber;\n  if ((portIndex < 5) && (pinReports[portIndex] = (byte)inputValue, inputValue != 0)) {\n    inputConfig = portInputs[portIndex];\n    portIndex = (portIndex & 0x1f) * 8;\n    if (portIndex < 0x3c) {\n      if ((&pinConfig)[portIndex] == NotConnected) {\n        CJNFHTNotConnectedAF = 0;\n      }\n      else {\n        digitalPinValue = getDigitalPin((&pinConfig)[portIndex]);\n        if (digitalPinValue == 0) {\n          CJNFHTNotConnectedAF = 0;\n        }\n        else {\n          digitalPinValue = getDigitalPin((&pinConfig)[portIndex]);\n          if (digitalPinValue == 1) {\n            CJNFHTNotConnectedAF = 0;\n          }\n          else if ((inputConfig & 1) == 0) {\n            CJNFHTNotConnectedAF = 0;\n          }\n          else {\n            readValue = readDigitalPin(portIndex);\n            if (readValue == 0) {\n              CJNFHTNotConnectedAF = 0;\n            }\n            else {\n              CJNFHTNotConnectedAF = 1;\n            }\n          }\n        }\n      }\n    }\n    else {\n      CJNFHTNotConnectedAF = 0;\n    }\n    if (portIndex + 1 < 0x3c) {\n      if ((&DAT_0800a909)[portIndex] == NotConnected) {\n        isHigh = false;\n      }\n      else {\n        digitalPinValue = getDigitalPin((&DAT_0800a909)[portIndex]);\n        if (digitalPinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          digitalPinValue = getDigitalPin((&DAT_0800a909)[portIndex]);\n          if (digitalPinValue == 1) {\n            isHigh = false;\n          }\n          else if ((inputConfig & 2) == 0) {\n            isHigh = false;\n          }\n          else {\n            readValue = readDigitalPin(portIndex + 1);\n            if (readValue == 0) {\n              isHigh = false;\n            }\n            else {\n              isHigh = true;\n            }\n          }\n        }\n      }\n    }\n    else {\n      isHigh = false;\n    }\n    if (isHigh) {\n      CJNFHTNotConnectedAF = CJNFHTNotConnectedAF | 2;\n    }\n    if (portIndex + 2 < 0x3c) {\n      if ((&DAT_0800a90a)[portIndex] == NotConnected) {\n        isHigh = false;\n      }\n      else {\n        digitalPinValue = getDigitalPin((&DAT_0800a90a)[portIndex]);\n        if (digitalPinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          digitalPinValue = getDigitalPin((&DAT_0800a90a)[portIndex]);\n          if (digitalPinValue == 1) {\n            isHigh = false;\n          }\n          else if ((inputConfig & 4) == 0) {\n            isHigh = false;\n          }\n          else {\n            readValue = readDigitalPin(portIndex + 2);\n            if (readValue == 0) {\n              isHigh = false;\n            }\n            else {\n              isHigh = true;\n            }\n          }\n        }\n      }\n    }\n    else {\n      isHigh = false;\n    }\n    if (isHigh) {\n      CJNFHTNotConnectedAF = CJNFHTNotConnectedAF | 4;\n    }\n    if (portIndex + 3 < 0x3c) {\n      if ((&DAT_0800a90b)[portIndex] == NotConnected) {\n        isHigh = false;\n      }\n      else {\n        digitalPinValue = getDigitalPin((&DAT_0800a90b)[portIndex]);\n        if (digitalPinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          digitalPinValue = getDigitalPin((&DAT_0800a90b)[portIndex]);\n          if (digitalPinValue == 1) {\n            isHigh = false;\n          }\n          else if ((inputConfig & 8) == 0) {\n            isHigh = false;\n          }\n          else {\n            readValue = readDigitalPin(portIndex + 3);\n            if (readValue == 0) {\n              isHigh = false;\n            }\n            else {\n              isHigh = true;\n            }\n          }\n        }\n      }\n    }\n    else {\n      isHigh = false;\n    }\n    if (isHigh) {\n      CJNFHTNotConnectedAF = CJNFHTNotConnectedAF | 8;\n    }\n    if (portIndex + 4 < 0x3c) {\n      if ((&DAT_0800a90c)[portIndex] == NotConnected) {\n        isHigh = false;\n      }\n      else {\n        digitalPinValue = getDigitalPin((&DAT_0800a90c)[portIndex]);\n        if (digitalPinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          digitalPinValue = getDigitalPin((&DAT_0800a90c)[portIndex]);\n          if (digitalPinValue == 1) {\n            isHigh = false;\n          }\n          else if ((inputConfig & 0x10) == 0) {\n            isHigh = false;\n          }\n          else {\n            readValue = readDigitalPin(portIndex + 4);\n            if (readValue == 0) {\n              isHigh = false;\n            }\n            else {\n              isHigh = true;\n            }\n          }\n        }\n      }\n    }\n    else {\n      isHigh = false;\n    }\n    if (isHigh) {\n      CJNFHTNotConnectedAF = CJNFHTNotConnectedAF | 0x10;\n    }\n    if (portIndex + 5 < 0x3c) {\n      if ((&DAT_0800a90d)[portIndex] == NotConnected) {\n        isHigh = false;\n      }\n      else {\n        digitalPinValue = getDigitalPin((&DAT_0800a90d)[portIndex]);\n        if (digitalPinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          digitalPinValue = getDigitalPin((&DAT_0800a90d)[portIndex]);\n          if (digitalPinValue == 1) {\n            isHigh = false;\n          }\n          else if ((inputConfig & 0x20) == 0) {\n            isHigh = false;\n          }\n          else {\n            readValue = readDigitalPin(portIndex + 5);\n            if (readValue == 0) {\n              isHigh = false;\n            }\n            else {\n              isHigh = true;\n            }\n          }\n        }\n      }\n    }\n    else {\n      isHigh = false;\n    }\n    if (isHigh) {\n      CJNFHTNotConnectedAF = CJNFHTNotConnectedAF | 0x20;\n    }\n    if (portIndex + 6 < 0x3c) {\n      if ((&DAT_0800a90e)[portIndex] == NotConnected) {\n        isHigh = false;\n      }\n      else {\n        digitalPinValue = getDigitalPin((&DAT_0800a90e)[portIndex]);\n        if (digitalPinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          digitalPinValue = getDigitalPin((&DAT_0800a90e)[portIndex]);\n          if (digitalPinValue == 1) {\n            isHigh = false;\n          }\n          else if ((inputConfig & 0x40) == 0) {\n            isHigh = false;\n          }\n          else {\n            readValue = readDigitalPin(portIndex + 6);\n            if (readValue == 0) {\n              isHigh = false;\n            }\n            else {\n              isHigh = true;\n            }\n          }\n        }\n      }\n    }\n    else {\n      isHigh = false;\n    }\n    if (isHigh) {\n      CJNFHTNotConnectedAF = CJNFHTNotConnectedAF | 0x40;\n    }\n    if (portIndex + 7 < 0x3c) {\n      if ((&DAT_0800a90f)[portIndex] == NotConnected) {\n        isHigh = false;\n      }\n      else {\n        digitalPinValue = getDigitalPin((&DAT_0800a90f)[portIndex]);\n        if (digitalPinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          digitalPinValue = getDigitalPin((&DAT_0800a90f)[portIndex]);\n          if (digitalPinValue == 1) {\n            isHigh = false;\n          }\n          else if ((inputConfig & 0x80) == 0) {\n            isHigh = false;\n          }\n          else {\n            readValue = readDigitalPin(portIndex + 7);\n            if (readValue == 0) {\n              isHigh = false;\n            }\n            else {\n              isHigh = true;\n            }\n          }\n        }\n      }\n    }\n    else {\n      isHigh = false;\n    }\n    if (isHigh) {\n      CJNFHTNotConnectedAF = CJNFHTNotConnectedAF | 0x80;\n    }\n    sendOutput(portNumber,CJNFHTNotConnectedAF,'\\x01');\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c18": "update_port_value_08000c18",
                "port": "portNumber",
                "value": "inputValue",
                "bVar1": "inputConfig",
                "bVar2": "isHigh",
                "uVar3": "digitalPinValue",
                "iVar4": "readValue",
                "pin": "pinNumber",
                "uVar5": "portIndex",
                "portValue": "outputValue",
                "reportPINs": "pinReports",
                "portConfigInputs": "portInputs",
                "digitalPin": "pinConfig",
                "NC": "NotConnected",
                "pinNametoDigitalPin": "getDigitalPin",
                "digitalRead": "readDigitalPin",
                "outputPort": "sendOutput"
            },
            "calling": [],
            "called": [
                "outputPort",
                "pinNametoDigitalPin",
                "digitalRead"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ef8": {
            "entrypoint": "0x08000ef8",
            "current_name": "read_digital_inputs_08000ef8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001ade) */\n/* WARNING: Removing unreachable block (ram,0x08001a4a) */\n/* WARNING: Removing unreachable block (ram,0x080019b6) */\n/* WARNING: Removing unreachable block (ram,0x08001912) */\n/* WARNING: Removing unreachable block (ram,0x08001866) */\n/* WARNING: Removing unreachable block (ram,0x080017d2) */\n/* WARNING: Removing unreachable block (ram,0x0800173e) */\n/* WARNING: Removing unreachable block (ram,0x0800169a) */\n/* WARNING: Removing unreachable block (ram,0x080015ee) */\n/* WARNING: Removing unreachable block (ram,0x0800155a) */\n/* WARNING: Removing unreachable block (ram,0x08001490) */\n/* WARNING: Removing unreachable block (ram,0x080014a2) */\n/* WARNING: Removing unreachable block (ram,0x080014e4) */\n/* WARNING: Removing unreachable block (ram,0x080014b0) */\n/* WARNING: Removing unreachable block (ram,0x080014ba) */\n/* WARNING: Removing unreachable block (ram,0x080014e8) */\n/* WARNING: Removing unreachable block (ram,0x080014c2) */\n/* WARNING: Removing unreachable block (ram,0x080014b6) */\n/* WARNING: Removing unreachable block (ram,0x08001496) */\n/* WARNING: Removing unreachable block (ram,0x08001430) */\n/* WARNING: Removing unreachable block (ram,0x08001376) */\n/* WARNING: Removing unreachable block (ram,0x080012e2) */\n/* WARNING: Removing unreachable block (ram,0x0800124e) */\n/* WARNING: Removing unreachable block (ram,0x080011b8) */\n/* WARNING: Removing unreachable block (ram,0x08001100) */\n/* WARNING: Removing unreachable block (ram,0x0800106c) */\n/* WARNING: Removing unreachable block (ram,0x08000fd8) */\n/* WARNING: Removing unreachable block (ram,0x08000f42) */\n/* WARNING: Removing unreachable block (ram,0x08000f8e) */\n/* WARNING: Removing unreachable block (ram,0x08001022) */\n/* WARNING: Removing unreachable block (ram,0x080010b6) */\n/* WARNING: Removing unreachable block (ram,0x0800114a) */\n/* WARNING: Removing unreachable block (ram,0x08001204) */\n/* WARNING: Removing unreachable block (ram,0x08001298) */\n/* WARNING: Removing unreachable block (ram,0x0800132c) */\n/* WARNING: Removing unreachable block (ram,0x080013c0) */\n/* WARNING: Removing unreachable block (ram,0x0800147c) */\n/* WARNING: Removing unreachable block (ram,0x08001510) */\n/* WARNING: Removing unreachable block (ram,0x080015a4) */\n/* WARNING: Removing unreachable block (ram,0x08001638) */\n/* WARNING: Removing unreachable block (ram,0x080016f4) */\n/* WARNING: Removing unreachable block (ram,0x08001788) */\n/* WARNING: Removing unreachable block (ram,0x0800181c) */\n/* WARNING: Removing unreachable block (ram,0x080018b0) */\n/* WARNING: Removing unreachable block (ram,0x0800196c) */\n/* WARNING: Removing unreachable block (ram,0x08001a00) */\n/* WARNING: Removing unreachable block (ram,0x08001a94) */\n/* WARNING: Removing unreachable block (ram,0x08001b28) */\n/* WARNING: Removing unreachable block (ram,0x080014ca) */\n/* WARNING: Unknown calling convention */\n\nvoid readDigitalInputs_08000ef8(void)\n\n{\n  bool isHigh;\n  byte inputConfig;\n  uint32_t digitalPin;\n  int readValue;\n  byte outputValue;\n  \n  inputConfig = portConfigInputs[0];\n  if (reportPINs[0] != '\\0') {\n    digitalPin = pinNametoDigitalPin(PA_3);\n    if (digitalPin == 0) {\n      outputValue = 0;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PA_3);\n      if (digitalPin == 1) {\n        outputValue = 0;\n      }\n      else if ((inputConfig & 1) == 0) {\n        outputValue = 0;\n      }\n      else {\n        readValue = digitalRead(0);\n        if (readValue == 0) {\n          outputValue = 0;\n        }\n        else {\n          outputValue = 1;\n        }\n      }\n    }\n    digitalPin = pinNametoDigitalPin(PA_2);\n    if (digitalPin == 0) {\n      isHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PA_2);\n      if (digitalPin == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfig & 2) == 0) {\n        isHigh = false;\n      }\n      else {\n        readValue = digitalRead(1);\n        if (readValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 2;\n    }\n    digitalPin = pinNametoDigitalPin(PA_10);\n    if (digitalPin == 0) {\n      isHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PA_10);\n      if (digitalPin == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfig & 4) == 0) {\n        isHigh = false;\n      }\n      else {\n        readValue = digitalRead(2);\n        if (readValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 4;\n    }\n    digitalPin = pinNametoDigitalPin(PB_3);\n    if (digitalPin == 0) {\n      isHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PB_3);\n      if (digitalPin == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfig & 8) == 0) {\n        isHigh = false;\n      }\n      else {\n        readValue = digitalRead(3);\n        if (readValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 8;\n    }\n    digitalPin = pinNametoDigitalPin(PB_5);\n    if (digitalPin == 0) {\n      isHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PB_5);\n      if (digitalPin == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfig & 0x10) == 0) {\n        isHigh = false;\n      }\n      else {\n        readValue = digitalRead(4);\n        if (readValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x10;\n    }\n    digitalPin = pinNametoDigitalPin(PB_4);\n    if (digitalPin == 0) {\n      isHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PB_4);\n      if (digitalPin == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfig & 0x20) == 0) {\n        isHigh = false;\n      }\n      else {\n        readValue = digitalRead(5);\n        if (readValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x20;\n    }\n    digitalPin = pinNametoDigitalPin(PB_10);\n    if (digitalPin == 0) {\n      isHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PB_10);\n      if (digitalPin == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfig & 0x40) == 0) {\n        isHigh = false;\n      }\n      else {\n        readValue = digitalRead(6);\n        if (readValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x40;\n    }\n    digitalPin = pinNametoDigitalPin(PA_8);\n    if (digitalPin == 0) {\n      isHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PA_8);\n      if (digitalPin == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfig & 0x80) == 0) {\n        isHigh = false;\n      }\n      else {\n        readValue = digitalRead(7);\n        if (readValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x80;\n    }\n    outputPort('\\0',outputValue,'\\0');\n  }\n  inputConfig = portConfigInputs[1];\n  if (reportPINs[1] != '\\0') {\n    digitalPin = pinNametoDigitalPin(PA_9);\n    if (digitalPin == 0) {\n      outputValue = 0;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PA_9);\n      if (digitalPin == 1) {\n        outputValue = 0;\n      }\n      else if ((inputConfig & 1) == 0) {\n        outputValue = 0;\n      }\n      else {\n        readValue = digitalRead(8);\n        if (readValue == 0) {\n          outputValue = 0;\n        }\n        else {\n          outputValue = 1;\n        }\n      }\n    }\n    digitalPin = pinNametoDigitalPin(PC_7);\n    if (digitalPin == 0) {\n      isHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PC_7);\n      if (digitalPin == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfig & 2) == 0) {\n        isHigh = false;\n      }\n      else {\n        readValue = digitalRead(9);\n        if (readValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 2;\n    }\n    digitalPin = pinNametoDigitalPin(PB_6);\n    if (digitalPin == 0) {\n      isHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PB_6);\n      if (digitalPin == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfig & 4) == 0) {\n        isHigh = false;\n      }\n      else {\n        readValue = digitalRead(10);\n        if (readValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 4;\n    }\n    digitalPin = pinNametoDigitalPin(PA_7);\n    if (digitalPin == 0) {\n      isHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PA_7);\n      if (digitalPin == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfig & 8) == 0) {\n        isHigh = false;\n      }\n      else {\n        readValue = digitalRead(0xb);\n        if (readValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 8;\n    }\n    digitalPin = pinNametoDigitalPin(PA_6);\n    if (digitalPin == 0) {\n      isHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PA_6);\n      if (digitalPin == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfig & 0x10) == 0) {\n        isHigh = false;\n      }\n      else {\n        readValue = digitalRead(0xc);\n        if (readValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x10;\n    }\n    digitalPin = pinNametoDigitalPin(PA_5);\n    if (digitalPin == 0) {\n      isHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PA_5);\n      if (digitalPin == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfig & 0x20) == 0) {\n        isHigh = false;\n      }\n      else {\n        readValue = digitalRead(0xd);\n        if (readValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x20;\n    }\n    digitalPin = pinNametoDigitalPin(PB_9);\n    if (digitalPin == 0) {\n      isHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PB_9);\n      if (digitalPin == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfig & 0x40) == 0) {\n        isHigh = false;\n      }\n      else {\n        readValue = digitalRead(0xe);\n        if (readValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x40;\n    }\n    digitalPin = pinNametoDigitalPin(PB_8);\n    if (digitalPin == 0) {\n      isHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PB_8);\n      if (digitalPin == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfig & 0x80) == 0) {\n        isHigh = false;\n      }\n      else {\n        readValue = digitalRead(0xf);\n        if (readValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x80;\n    }\n    outputPort('\\x01',outputValue,'\\0');\n  }\n  inputConfig = portConfigInputs[2];\n  if (reportPINs[2] != '\\0') {\n    digitalPin = pinNametoDigitalPin(PC_10);\n    if (digitalPin == 0) {\n      outputValue = 0;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PC_10);\n      if (digitalPin == 1) {\n        outputValue = 0;\n      }\n      else if ((inputConfig & 1) == 0) {\n        outputValue = 0;\n      }\n      else {\n        readValue = digitalRead(0x10);\n        if (readValue == 0) {\n          outputValue = 0;\n        }\n        else {\n          outputValue = 1;\n        }\n      }\n    }\n    digitalPin = pinNametoDigitalPin(PC_12);\n    if (digitalPin == 0) {\n      isHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PC_12);\n      if (digitalPin == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfig & 2) == 0) {\n        isHigh = false;\n      }\n      else {\n        readValue = digitalRead(0x11);\n        if (readValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 2;\n    }\n    digitalPin = pinNametoDigitalPin(PA_13);\n    if (digitalPin == 0) {\n      isHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PA_13);\n      if (digitalPin == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfig & 8) == 0) {\n        isHigh = false;\n      }\n      else {\n        readValue = digitalRead(0x13);\n        if (readValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 8;\n    }\n    digitalPin = pinNametoDigitalPin(PA_14);\n    if (digitalPin == 0) {\n      isHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PA_14);\n      if (digitalPin == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfig & 0x10) == 0) {\n        isHigh = false;\n      }\n      else {\n        readValue = digitalRead(0x14);\n        if (readValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x10;\n    }\n    digitalPin = pinNametoDigitalPin(PA_15);\n    if (digitalPin == 0) {\n      isHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PA_15);\n      if (digitalPin == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfig & 0x20) == 0) {\n        isHigh = false;\n      }\n      else {\n        readValue = digitalRead(0x15);\n        if (readValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x20;\n    }\n    digitalPin = pinNametoDigitalPin(PB_7);\n    if (digitalPin == 0) {\n      isHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PB_7);\n      if (digitalPin == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfig & 0x40) == 0) {\n        isHigh = false;\n      }\n      else {\n        readValue = digitalRead(0x16);\n        if (readValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x40;\n    }\n    digitalPin = pinNametoDigitalPin(PC_13);\n    if (digitalPin == 0) {\n      isHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PC_13);\n      if (digitalPin == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfig & 0x80) == 0) {\n        isHigh = false;\n      }\n      else {\n        readValue = digitalRead(0x17);\n        if (readValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x80;\n    }\n    outputPort('\\x02',outputValue,'\\0');\n  }\n  inputConfig = portConfigInputs[3];\n  if (reportPINs[3] != '\\0') {\n    digitalPin = pinNametoDigitalPin(PC_14);\n    if (digitalPin == 0) {\n      outputValue = 0;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PC_14);\n      if (digitalPin == 1) {\n        outputValue = 0;\n      }\n      else if ((inputConfig & 1) == 0) {\n        outputValue = 0;\n      }\n      else {\n        readValue = digitalRead(0x18);\n        if (readValue == 0) {\n          outputValue = 0;\n        }\n        else {\n          outputValue = 1;\n        }\n      }\n    }\n    digitalPin = pinNametoDigitalPin(PC_15);\n    if (digitalPin == 0) {\n      isHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PC_15);\n      if (digitalPin == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfig & 2) == 0) {\n        isHigh = false;\n      }\n      else {\n        readValue = digitalRead(0x19);\n        if (readValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 2;\n    }\n    digitalPin = pinNametoDigitalPin(PD_0);\n    if (digitalPin == 0) {\n      isHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PD_0);\n      if (digitalPin == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfig & 4) == 0) {\n        isHigh = false;\n      }\n      else {\n        readValue = digitalRead(0x1a);\n        if (readValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 4;\n    }\n    digitalPin = pinNametoDigitalPin(PD_1);\n    if (digitalPin == 0) {\n      isHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PD_1);\n      if (digitalPin == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfig & 8) == 0) {\n        isHigh = false;\n      }\n      else {\n        readValue = digitalRead(0x1b);\n        if (readValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 8;\n    }\n    digitalPin = pinNametoDigitalPin(PC_2);\n    if (digitalPin == 0) {\n      isHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PC_2);\n      if (digitalPin == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfig & 0x10) == 0) {\n        isHigh = false;\n      }\n      else {\n        readValue = digitalRead(0x1c);\n        if (readValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x10;\n    }\n    digitalPin = pinNametoDigitalPin(PC_3);\n    if (digitalPin == 0) {\n      isHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PC_3);\n      if (digitalPin == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfig & 0x20) == 0) {\n        isHigh = false;\n      }\n      else {\n        readValue = digitalRead(0x1d);\n        if (readValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x20;\n    }\n    digitalPin = pinNametoDigitalPin(PC_11);\n    if (digitalPin == 0) {\n      isHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PC_11);\n      if (digitalPin == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfig & 0x40) == 0) {\n        isHigh = false;\n      }\n      else {\n        readValue = digitalRead(0x1e);\n        if (readValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x40;\n    }\n    digitalPin = pinNametoDigitalPin(PD_2);\n    if (digitalPin == 0) {\n      isHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PD_2);\n      if (digitalPin == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfig & 0x80) == 0) {\n        isHigh = false;\n      }\n      else {\n        readValue = digitalRead(0x1f);\n        if (readValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x80;\n    }\n    outputPort('\\x03',outputValue,'\\0');\n  }\n  inputConfig = portConfigInputs[4];\n  if (reportPINs[4] != '\\0') {\n    digitalPin = pinNametoDigitalPin(PC_9);\n    if (digitalPin == 0) {\n      outputValue = 0;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PC_9);\n      if (digitalPin == 1) {\n        outputValue = 0;\n      }\n      else if ((inputConfig & 1) == 0) {\n        outputValue = 0;\n      }\n      else {\n        readValue = digitalRead(0x20);\n        if (readValue == 0) {\n          outputValue = 0;\n        }\n        else {\n          outputValue = 1;\n        }\n      }\n    }\n    digitalPin = pinNametoDigitalPin(PC_8);\n    if (digitalPin == 0) {\n      isHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PC_8);\n      if (digitalPin == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfig & 2) == 0) {\n        isHigh = false;\n      }\n      else {\n        readValue = digitalRead(0x21);\n        if (readValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 2;\n    }\n    digitalPin = pinNametoDigitalPin(PC_6);\n    if (digitalPin == 0) {\n      isHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PC_6);\n      if (digitalPin == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfig & 4) == 0) {\n        isHigh = false;\n      }\n      else {\n        readValue = digitalRead(0x22);\n        if (readValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 4;\n    }\n    digitalPin = pinNametoDigitalPin(PC_5);\n    if (digitalPin == 0) {\n      isHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PC_5);\n      if (digitalPin == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfig & 8) == 0) {\n        isHigh = false;\n      }\n      else {\n        readValue = digitalRead(0x23);\n        if (readValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 8;\n    }\n    digitalPin = pinNametoDigitalPin(PA_12);\n    if (digitalPin == 0) {\n      isHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PA_12);\n      if (digitalPin == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfig & 0x10) == 0) {\n        isHigh = false;\n      }\n      else {\n        readValue = digitalRead(0x24);\n        if (readValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x10;\n    }\n    digitalPin = pinNametoDigitalPin(PA_11);\n    if (digitalPin == 0) {\n      isHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PA_11);\n      if (digitalPin == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfig & 0x20) == 0) {\n        isHigh = false;\n      }\n      else {\n        readValue = digitalRead(0x25);\n        if (readValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x20;\n    }\n    digitalPin = pinNametoDigitalPin(PB_12);\n    if (digitalPin == 0) {\n      isHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PB_12);\n      if (digitalPin == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfig & 0x40) == 0) {\n        isHigh = false;\n      }\n      else {\n        readValue = digitalRead(0x26);\n        if (readValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x40;\n    }\n    digitalPin = pinNametoDigitalPin(PB_11);\n    if (digitalPin == 0) {\n      isHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PB_11);\n      if (digitalPin == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfig & 0x80) == 0) {\n        isHigh = false;\n      }\n      else {\n        readValue = digitalRead(0x27);\n        if (readValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x80;\n    }\n    outputPort('\\x04',outputValue,'\\0');\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ef8": "read_digital_inputs_08000ef8",
                "bVar2": "inputConfig",
                "uVar3": "digitalPin",
                "iVar4": "readValue",
                "bVar5": "outputValue",
                "bVar1": "isHigh"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "outputPort",
                "pinNametoDigitalPin",
                "digitalRead"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b48": {
            "entrypoint": "0x08001b48",
            "current_name": "initialize_firmata_08001b48",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeFirmata_08001b48(void)\n\n{\n  firmata::FirmataClass::setFirmwareInfo\n            (firmataObject,\"/home/bo/p2im/p2im-real_firmware_scratch/Gateway/StandardFirmata.ino\",'\\x02',\n             '\\x05');\n  firmata::FirmataClass::attach(firmataObject,0xe0,analogWriteCallback + 1);\n  firmata::FirmataClass::attach(firmataObject,0x90,digitalWriteCallback + 1);\n  firmata::FirmataClass::attach(firmataObject,0xc0,reportAnalogCallback + 1);\n  firmata::FirmataClass::attach(firmataObject,0xd0,reportDigitalCallback + 1);\n  firmata::FirmataClass::attach(firmataObject,0xf4,setPinModeCallback + 1);\n  firmata::FirmataClass::attach(firmataObject,0xf5,setPinValueCallback + 1);\n  firmata::FirmataClass::attach(firmataObject,0xf0,sysexCallback + 1);\n  firmata::FirmataClass::attach(firmataObject,0xff,systemResetCallback);\n  firmata::FirmataClass::beginFirmata(firmataObject,0xe100);\n  systemResetCallback();\n  startForkserver(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001b48": "initialize_firmata_08001b48",
                "&Firmata": "firmataObject",
                "setFirmwareNameAndVersion": "setFirmwareInfo",
                "begin": "beginFirmata"
            },
            "calling": [
                "main"
            ],
            "called": [
                "systemResetCallback",
                "begin",
                "attach",
                "attach",
                "setFirmwareNameAndVersion",
                "startForkserver",
                "attach"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001be8": {
            "entrypoint": "0x08001be8",
            "current_name": "initialize_static_variables_08001be8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initialize_static_variables_08001be8(void)\n\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001be8": "initialize_static_variables_08001be8"
            },
            "calling": [],
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001bf8": {
            "entrypoint": "0x08001bf8",
            "current_name": "write_data_08001bf8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid writeData_08001bf8(byte byteData)\n\n{\n  void *pointer2;\n  size_t size;\n  \n  TwoWire::write(&Wire,(uint)byteData,pointer2,size);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001bf8": "write_data_08001bf8",
                "data": "byteData",
                "in_r2": "pointer2",
                "in_r3": "size"
            },
            "calling": [
                "readAndReportData",
                "sysexCallback"
            ],
            "called": [
                "write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c08": {
            "entrypoint": "0x08001c08",
            "current_name": "read_byte_from_wire_08001c08",
            "code": "\n/* WARNING: Unknown calling convention */\n\nbyte readByteFromWire_08001c08(void)\n\n{\n  ssize_t result;\n  int arg1;\n  void *arg2;\n  size_t arg3;\n  \n  result = TwoWire::read(&Wire,arg1,arg2,arg3);\n  return (byte)result;\n}\n\n",
            "renaming": {
                "FUN_08001c08": "read_byte_from_wire_08001c08",
                "in_r1": "arg1",
                "in_r2": "arg2",
                "in_r3": "arg3",
                "sVar1": "result"
            },
            "calling": [
                "readAndReportData"
            ],
            "called": [
                "read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c18": {
            "entrypoint": "0x08001c18",
            "current_name": "read_i2_c_data_08001c18",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid readI2CData_08001c18(byte deviceAddress,int registerAddress,byte numberOfBytes,byte stopTransmission)\n\n{\n  bool isDataAvailable;\n  byte receivedByte;\n  int counter;\n  int availableBytes;\n  uint requestedBytes;\n  \n  requestedBytes = (uint)numberOfBytes;\n  if (registerAddress == -1) {\n    registerAddress = 0;\n  }\n  else {\n    TwoWire::beginTransmission(&Wire,deviceAddress);\n    writeDataToWire((byte)registerAddress);\n    TwoWire::endTransmission(&Wire,stopTransmission);\n  }\n  TwoWire::requestFrom(&Wire,deviceAddress,numberOfBytes);\n  counter = TwoWire::available(&Wire);\n  if ((int)requestedBytes < counter) {\n    firmata::FirmataClass::sendString(&Firmata,\"I2C: Too many bytes received\");\n  }\n  else {\n    counter = TwoWire::available(&Wire);\n    if (counter < (int)requestedBytes) {\n      firmata::FirmataClass::sendString(&Firmata,\"I2C: Too few bytes received\");\n    }\n  }\n  receivedData[1] = (byte)registerAddress;\n  counter = 0;\n  receivedData[0] = deviceAddress;\n  while( true ) {\n    if (counter < (int)requestedBytes) {\n      availableBytes = TwoWire::available(&Wire);\n      if (availableBytes == 0) {\n        isDataAvailable = false;\n      }\n      else {\n        isDataAvailable = true;\n      }\n    }\n    else {\n      isDataAvailable = false;\n    }\n    if (!isDataAvailable) break;\n    receivedByte = wireRead();\n    receivedData[counter + 2] = receivedByte;\n    counter = counter + 1;\n  }\n  firmata::FirmataClass::sendSysex(&Firmata,'w',numberOfBytes + '\\x02',receivedData);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c18": "read_i2_c_data_08001c18",
                "address": "deviceAddress",
                "theRegister": "registerAddress",
                "numBytes": "numberOfBytes",
                "stopTX": "stopTransmission",
                "bVar1": "isDataAvailable",
                "bVar2": "receivedByte",
                "iVar3": "counter",
                "iVar4": "availableBytes",
                "uVar5": "requestedBytes",
                "wireWrite": "writeDataToWire",
                "i2cRxData": "receivedData"
            },
            "calling": [
                "loop",
                "sysexCallback"
            ],
            "called": [
                "wireRead",
                "sendSysex",
                "beginTransmission",
                "available",
                "requestFrom",
                "sendString",
                "endTransmission",
                "wireWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cd0": {
            "entrypoint": "0x08001cd0",
            "current_name": "improve_code_08001cd0",
            "code": "\n/* WARNING: Unknown calliIndexng conventiIndexon */\n\nvoiIndexd improveCode_08001cd0(byte cmd,byte argCount,byte *argValues)\n\n{\n  byte byteVar1;\n  uiIndexnt8_t devAddress;\n  byte byteVar2;\n  byte byteVar3;\n  byte byteVar4;\n  byte slaveAddr;\n  byte dataValue;\n  PiIndexnName_confliIndexct pinName;\n  _Bool isPinMapped;\n  byte byteVar7;\n  uiIndexnt32_t uintVar;\n  iIndexnt intVar;\n  iIndexnt value;\n  byte pinMode;\n  byte byteVar10;\n  byte stopTX;\n  byte iIndex;\n  byte i_1Index;\n  undefiIndexned1 *ptr_r3;\n  uiIndexnt uintVar;\n  uiIndexnt delay;\n  byte piIndexn_1;\n  undefiIndexned1 *undefinedVar;\n  siIndexze_t sizeVal;\n  iIndexnt maxPulse;\n  byte piIndexn;\n  uiIndexnt uintVar;\n  iIndexnt miIndexnPulse;\n  iIndexnt intVar;\n  bool boolVar;\n  \n  uintVar = (uiIndexnt)argCount;\n  swiIndextch(cmd) {\n  case 'iIndex':\n    fiIndexrmata::FiIndexrmataClass::wriIndexte(&FiIndexrmata,0xf0,argValues,(siIndexze_t)ptr_r3);\n    fiIndexrmata::FiIndexrmataClass::wriIndexte(&FiIndexrmata,0x6a,argValues,(siIndexze_t)ptr_r3);\n    for (uintVar = 0; uintVar < 0x3c; uintVar = uintVar + 1 & 0xff) {\n      uintVar = uintVar - 0x2e & 0xff;\n      iIndexf (uintVar < 0xe) {\n        iIndexf (uintVar < 0x3c) {\n          ptr_r3 = &diIndexgiIndextalPiIndexn;\n          pinName = (&diIndexgiIndextalPiIndexn)[uintVar];\n        }\n        else {\n          pinName = NC;\n        }\n        uintVar = piIndexnNametoDiIndexgiIndextalPiIndexn(pinName);\n        iIndexf (uintVar == 0) {\n          uintVar = 0x7f;\n        }\n        else {\n          iIndexf (uintVar < 0x3c) {\n            ptr_r3 = &diIndexgiIndextalPiIndexn;\n            pinName = (&diIndexgiIndextalPiIndexn)[uintVar];\n          }\n          else {\n            pinName = NC;\n          }\n          uintVar = piIndexnNametoDiIndexgiIndextalPiIndexn(pinName);\n          iIndexf (uintVar == 1) {\n            uintVar = 0x7f;\n          }\n        }\n      }\n      else {\n        uintVar = 0x7f;\n      }\n      fiIndexrmata::FiIndexrmataClass::wriIndexte(&FiIndexrmata,uintVar,argValues,(siIndexze_t)ptr_r3);\n    }\n    fiIndexrmata::FiIndexrmataClass::wriIndexte(&FiIndexrmata,0xf7,argValues,(siIndexze_t)ptr_r3);\n    break;\n  case 'k':\n    fiIndexrmata::FiIndexrmataClass::wriIndexte(&FiIndexrmata,0xf0,argValues,(siIndexze_t)ptr_r3);\n    fiIndexrmata::FiIndexrmataClass::wriIndexte(&FiIndexrmata,0x6c,argValues,(siIndexze_t)ptr_r3);\n    for (uintVar = 0; uintVar < 0x3c; uintVar = uintVar + 1 & 0xff) {\n      iIndexf (uintVar < 0x3c) {\n        iIndexf ((&diIndexgiIndextalPiIndexn)[uintVar] == NC) {\n          sizeVal = 0;\n        }\n        else {\n          uintVar = piIndexnNametoDiIndexgiIndextalPiIndexn((&diIndexgiIndextalPiIndexn)[uintVar]);\n          iIndexf (uintVar == 0) {\n            sizeVal = 0;\n          }\n          else {\n            uintVar = piIndexnNametoDiIndexgiIndextalPiIndexn((&diIndexgiIndextalPiIndexn)[uintVar]);\n            iIndexf (uintVar == 1) {\n              sizeVal = 0;\n            }\n            else {\n              sizeVal = 1;\n            }\n          }\n        }\n      }\n      else {\n        sizeVal = 0;\n      }\n      iIndexf (sizeVal != 0) {\n        fiIndexrmata::FiIndexrmataClass::wriIndexte(&FiIndexrmata,0,argValues,sizeVal);\n        fiIndexrmata::FiIndexrmataClass::wriIndexte(&FiIndexrmata,1,argValues,sizeVal);\n        fiIndexrmata::FiIndexrmataClass::wriIndexte(&FiIndexrmata,0xb,argValues,sizeVal);\n        fiIndexrmata::FiIndexrmataClass::wriIndexte(&FiIndexrmata,1,argValues,sizeVal);\n        fiIndexrmata::FiIndexrmataClass::wriIndexte(&FiIndexrmata,1,argValues,sizeVal);\n        fiIndexrmata::FiIndexrmataClass::wriIndexte(&FiIndexrmata,1,argValues,sizeVal);\n      }\n      iIndexf ((uintVar - 0x2e & 0xff) < 0xe) {\n        iIndexf (uintVar < 0x3c) {\n          pinName = (&diIndexgiIndextalPiIndexn)[uintVar];\n        }\n        else {\n          pinName = NC;\n        }\n        uintVar = piIndexnNametoDiIndexgiIndextalPiIndexn(pinName);\n        iIndexf (uintVar == 0) {\n          undefinedVar = (undefiIndexned1 *)0x0;\n        }\n        else {\n          iIndexf (uintVar < 0x3c) {\n            pinName = (&diIndexgiIndextalPiIndexn)[uintVar];\n          }\n          else {\n            pinName = NC;\n          }\n          uintVar = piIndexnNametoDiIndexgiIndextalPiIndexn(pinName);\n          iIndexf (uintVar == 1) {\n            undefinedVar = (undefiIndexned1 *)0x0;\n          }\n          else {\n            undefinedVar = (undefiIndexned1 *)0x1;\n          }\n        }\n      }\n      else {\n        undefinedVar = (undefiIndexned1 *)0x0;\n      }\n      iIndexf (undefinedVar != (undefiIndexned1 *)0x0) {\n        fiIndexrmata::FiIndexrmataClass::wriIndexte(&FiIndexrmata,2,argValues,(siIndexze_t)undefinedVar);\n        fiIndexrmata::FiIndexrmataClass::wriIndexte(&FiIndexrmata,10,argValues,(siIndexze_t)undefinedVar);\n      }\n      iIndexf (uintVar < 0x3c) {\n        undefinedVar = &diIndexgiIndextalPiIndexn;\n        iIndexf ((&diIndexgiIndextalPiIndexn)[uintVar] == NC) {\n          isPinMapped = false;\n        }\n        else {\n          uintVar = piIndexnNametoDiIndexgiIndextalPiIndexn((&diIndexgiIndextalPiIndexn)[uintVar]);\n          iIndexf (uintVar == 0) {\n            isPinMapped = false;\n          }\n          else {\n            undefinedVar = &diIndexgiIndextalPiIndexn;\n            uintVar = piIndexnNametoDiIndexgiIndextalPiIndexn((&diIndexgiIndextalPiIndexn)[uintVar]);\n            iIndexf (uintVar == 1) {\n              isPinMapped = false;\n            }\n            else {\n              undefinedVar = &diIndexgiIndextalPiIndexn;\n              isPinMapped = piIndexn_iIndexn_piIndexnmap((&diIndexgiIndextalPiIndexn)[uintVar],(PiIndexnMap_confliIndexct *)&PiIndexnMap_PWM);\n            }\n          }\n        }\n      }\n      else {\n        isPinMapped = false;\n      }\n      iIndexf (isPinMapped != false) {\n        fiIndexrmata::FiIndexrmataClass::wriIndexte(&FiIndexrmata,3,argValues,(siIndexze_t)undefinedVar);\n        fiIndexrmata::FiIndexrmataClass::wriIndexte(&FiIndexrmata,8,argValues,(siIndexze_t)undefinedVar);\n      }\n      iIndexf (uintVar < 0x3c) {\n        iIndexf ((&diIndexgiIndextalPiIndexn)[uintVar] == NC) {\n          sizeVal = 0;\n        }\n        else {\n          uintVar = piIndexnNametoDiIndexgiIndextalPiIndexn((&diIndexgiIndextalPiIndexn)[uintVar]);\n          iIndexf (uintVar == 0) {\n            sizeVal = 0;\n          }\n          else {\n            uintVar = piIndexnNametoDiIndexgiIndextalPiIndexn((&diIndexgiIndextalPiIndexn)[uintVar]);\n            iIndexf (uintVar == 1) {\n              sizeVal = 0;\n            }\n            else {\n              sizeVal = 1;\n            }\n          }\n        }\n      }\n      else {\n        sizeVal = 0;\n      }\n      iIndexf (sizeVal != 0) {\n        fiIndexrmata::FiIndexrmataClass::wriIndexte(&FiIndexrmata,4,argValues,sizeVal);\n        fiIndexrmata::FiIndexrmataClass::wriIndexte(&FiIndexrmata,0xe,argValues,sizeVal);\n      }\n      iIndexf (uintVar < 0x3c) {\n        iIndexf ((&diIndexgiIndextalPiIndexn)[uintVar] == NC) {\n          ptr_r3 = (undefiIndexned1 *)0x0;\n        }\n        else {\n          uintVar = piIndexnNametoDiIndexgiIndextalPiIndexn((&diIndexgiIndextalPiIndexn)[uintVar]);\n          iIndexf (uintVar == 0) {\n            ptr_r3 = (undefiIndexned1 *)0x0;\n          }\n          else {\n            uintVar = piIndexnNametoDiIndexgiIndextalPiIndexn((&diIndexgiIndextalPiIndexn)[uintVar]);\n            iIndexf (uintVar == 1) {\n              ptr_r3 = (undefiIndexned1 *)0x0;\n            }\n            else {\n              isPinMapped = piIndexn_iIndexn_piIndexnmap((&diIndexgiIndextalPiIndexn)[uintVar],(PiIndexnMap_confliIndexct *)&PiIndexnMap_I2C_SDA);\n              ptr_r3 = (undefiIndexned1 *)(uiIndexnt)isPinMapped;\n              iIndexf (ptr_r3 == (undefiIndexned1 *)0x0) {\n                isPinMapped = piIndexn_iIndexn_piIndexnmap((&diIndexgiIndextalPiIndexn)[uintVar],(PiIndexnMap_confliIndexct *)&PiIndexnMap_I2C_SCL);\n                ptr_r3 = (undefiIndexned1 *)(uiIndexnt)isPinMapped;\n              }\n            }\n          }\n        }\n      }\n      else {\n        ptr_r3 = (undefiIndexned1 *)0x0;\n      }\n      iIndexf (ptr_r3 != (undefiIndexned1 *)0x0) {\n        fiIndexrmata::FiIndexrmataClass::wriIndexte(&FiIndexrmata,6,argValues,(siIndexze_t)ptr_r3);\n        fiIndexrmata::FiIndexrmataClass::wriIndexte(&FiIndexrmata,1,argValues,(siIndexze_t)ptr_r3);\n      }\n      fiIndexrmata::FiIndexrmataClass::wriIndexte(&FiIndexrmata,0x7f,argValues,(siIndexze_t)ptr_r3);\n    }\n    fiIndexrmata::FiIndexrmataClass::wriIndexte(&FiIndexrmata,0xf7,argValues,(siIndexze_t)ptr_r3);\n    return;\n  case 'm':\n    iIndexf (uintVar != 0) {\n      byteVar1 = *argValues;\n      fiIndexrmata::FiIndexrmataClass::wriIndexte(&FiIndexrmata,0xf0,argValues,(siIndexze_t)ptr_r3);\n      fiIndexrmata::FiIndexrmataClass::wriIndexte(&FiIndexrmata,0x6e,argValues,(siIndexze_t)ptr_r3);\n      fiIndexrmata::FiIndexrmataClass::wriIndexte(&FiIndexrmata,(uiIndexnt)byteVar1,argValues,(siIndexze_t)ptr_r3);\n      iIndexf (byteVar1 < 0x3c) {\n        byteVar7 = fiIndexrmata::FiIndexrmataClass::getPiIndexnMode(&FiIndexrmata,byteVar1);\n        fiIndexrmata::FiIndexrmataClass::wriIndexte(&FiIndexrmata,(uiIndexnt)byteVar7,argValues,(siIndexze_t)ptr_r3);\n        uintVar = fiIndexrmata::FiIndexrmataClass::getPiIndexnState(&FiIndexrmata,byteVar1);\n        fiIndexrmata::FiIndexrmataClass::wriIndexte(&FiIndexrmata,uintVar & 0x7f,argValues,(siIndexze_t)ptr_r3);\n        uintVar = fiIndexrmata::FiIndexrmataClass::getPiIndexnState(&FiIndexrmata,byteVar1);\n        ptr_r3 = (undefiIndexned1 *)0xff80;\n        iIndexf ((uintVar & 0xff80) != 0) {\n          intVar = fiIndexrmata::FiIndexrmataClass::getPiIndexnState(&FiIndexrmata,byteVar1);\n          fiIndexrmata::FiIndexrmataClass::wriIndexte(&FiIndexrmata,(uiIndexnt)(intVar << 0x12) >> 0x19,argValues,(siIndexze_t)ptr_r3);\n        }\n        uintVar = fiIndexrmata::FiIndexrmataClass::getPiIndexnState(&FiIndexrmata,byteVar1);\n        iIndexf ((uintVar & 0xc000) != 0) {\n          intVar = fiIndexrmata::FiIndexrmataClass::getPiIndexnState(&FiIndexrmata,byteVar1);\n          fiIndexrmata::FiIndexrmataClass::wriIndexte(&FiIndexrmata,(uiIndexnt)(intVar << 0xb) >> 0x19,argValues,(siIndexze_t)ptr_r3);\n        }\n      }\n      fiIndexrmata::FiIndexrmataClass::wriIndexte(&FiIndexrmata,0xf7,argValues,(siIndexze_t)ptr_r3);\n      return;\n    }\n    break;\n  case 'o':\n    iIndexf (1 < uintVar) {\n      uintVar = (uiIndexnt)argValues[1];\n      iIndexf (2 < uintVar) {\n        uintVar = uintVar | (uiIndexnt)argValues[2] << 7;\n      }\n      iIndexf (3 < uintVar) {\n        uintVar = uintVar | (uiIndexnt)argValues[3] << 0xe;\n      }\n      analogWriIndexteCallback(*argValues,uintVar);\n      return;\n    }\n    break;\n  case 'p':\n    iIndexf (4 < uintVar) {\n      byteVar1 = *argValues;\n      uintVar = (uiIndexnt)byteVar1;\n      byteVar7 = argValues[1];\n      byteVar2 = argValues[2];\n      byteVar3 = argValues[3];\n      byteVar4 = argValues[4];\n      iIndexf (uintVar < 0x3c) {\n        iIndexf ((&diIndexgiIndextalPiIndexn)[uintVar] == NC) {\n          boolVar = false;\n        }\n        else {\n          uintVar = piIndexnNametoDiIndexgiIndextalPiIndexn((&diIndexgiIndextalPiIndexn)[uintVar]);\n          iIndexf (uintVar == 0) {\n            boolVar = false;\n          }\n          else {\n            uintVar = piIndexnNametoDiIndexgiIndextalPiIndexn((&diIndexgiIndextalPiIndexn)[uintVar]);\n            iIndexf (uintVar == 1) {\n              boolVar = false;\n            }\n            else {\n              boolVar = true;\n            }\n          }\n        }\n      }\n      else {\n        boolVar = false;\n      }\n      iIndexf (boolVar) {\n        iIndexf (servoPiIndexnMap[uintVar] < 0xc) {\n          boolVar = Servo::attached(servos + servoPiIndexnMap[uintVar]);\n        }\n        else {\n          boolVar = false;\n        }\n        iIndexf (boolVar != false) {\n          detachServo(byteVar1);\n        }\n        attachServo(byteVar1,(uiIndexnt)byteVar7 + (uiIndexnt)byteVar2 * 0x80,(uiIndexnt)byteVar3 + (uiIndexnt)byteVar4 * 0x80);\n        setPiIndexnModeCallback(byteVar1,4);\n        return;\n      }\n    }\n    break;\n  case 'v':\n    byteVar1 = argValues[1];\n    iIndexf ((byteVar1 & 0x20) != 0) {\n      fiIndexrmata::FiIndexrmataClass::sendStriIndexng(&FiIndexrmata,\"10-biIndext devAddressiIndexng not supported\");\n      return;\n    }\n    devAddress = *argValues;\n    boolVar = (byteVar1 & 0x40) == 0;\n    iIndexf ((byteVar1 & 0x18) < 0x19) {\n      swiIndextch(byteVar1 & 0x18) {\n      case 0:\n        TwoWiIndexre::begiIndexnTransmiIndexssiIndexon(&WiIndexre,devAddress);\n        for (uintVar = 2; uintVar < uintVar; uintVar = uintVar + 2 & 0xff) {\n          wiIndexreWriIndexte(argValues[uintVar + 1] * -0x80 + argValues[uintVar]);\n        }\n        TwoWiIndexre::endTransmiIndexssiIndexon(&WiIndexre);\n        return;\n      case 8:\n        iIndexf (uintVar == 6) {\n          intVar = (uiIndexnt)argValues[2] + (uiIndexnt)argValues[3] * 0x80;\n          byteVar10 = argValues[4] + argValues[5] * -0x80;\n        }\n        else {\n          byteVar10 = argValues[2] + argValues[3] * -0x80;\n          intVar = -1;\n        }\n        readAndReportData(devAddress,intVar,byteVar10,boolVar);\n        return;\n      case 0x10:\n        iIndexf (queryIndex + 1 < 8) {\n          iIndexf (uintVar == 6) {\n            intVar = (uiIndexnt)argValues[2] + (uiIndexnt)argValues[3] * 0x80;\n            byteVar10 = argValues[4] + argValues[5] * -0x80;\n          }\n          else {\n            byteVar10 = argValues[2] + argValues[3] * -0x80;\n            intVar = -1;\n          }\n          queryIndex = queryIndex + '\\x01';\n          intVar = (iIndexnt)queryIndex;\n          query[intVar].addr = devAddress;\n          query[intVar].reg = intVar;\n          query[intVar].bytes = byteVar10;\n          *(bool *)(intVar * 0xc + 0x20000191) = boolVar;\n          return;\n        }\n        fiIndexrmata::FiIndexrmataClass::sendStriIndexng(&FiIndexrmata,\"too many queriIndexes\");\n        return;\n      case 0x18:\n        iIndexf (queryIndex < 1) {\n          queryIndex = -1;\n          return;\n        }\n      }\n      for (uintVar = 0; intVar = queryIndex + 1, (iIndexnt)uintVar < intVar; uintVar = uintVar + 1 & 0xff) {\n        iIndexf (devAddress == query[uintVar].addr) goto LAB_08001e66;\n      }\n      uintVar = 0;\nLAB_08001e66:\n      for (; (iIndexnt)uintVar < intVar; uintVar = uintVar + 1 & 0xff) {\n        iIndexf (uintVar < 8) {\n          intVar = uintVar + 1;\n          query[uintVar].addr = query[intVar].addr;\n          query[uintVar].reg = query[intVar].reg;\n          query[uintVar].bytes = query[intVar].bytes;\n          query[uintVar].stopTX = query[intVar].stopTX;\n        }\n      }\n      queryIndex = queryIndex + -1;\n      return;\n    }\n    break;\n  case 'x':\n    uintVar = (uiIndexnt)*argValues + (uiIndexnt)argValues[1] * 0x80;\n    iIndexf ((1 < uintVar) && (uintVar != 0)) {\n      iIndex2cReadDelayTiIndexme = uintVar;\n    }\n    iIndexf (!iIndexsI2CEnabled) {\n      enableI2CPiIndexns();\n      return;\n    }\n    break;\n  case 'z':\n    iIndexf ((1 < uintVar) &&\n       (sampliIndexngIntervalue = (uiIndexnt)*argValues + (uiIndexnt)argValues[1] * 0x80, sampliIndexngIntervalue == 0)) {\n      sampliIndexngIntervalue = 1;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cd0": "improve_code_08001cd0",
                "command": "cmd",
                "argc": "argCount",
                "argv": "argValues",
                "bVar1": "byteVar1",
                "address": "devAddress",
                "bVar2": "byteVar2",
                "bVar3": "byteVar3",
                "bVar4": "byteVar4",
                "slaveAddress": "slaveAddr",
                "data": "dataValue",
                "PVar5": "pinName",
                "_Var6": "isPinMapped",
                "bVar7": "byteVar7",
                "uVar8": "uintVar",
                "iVar9": "intVar",
                "val": "value",
                "mode": "pinMode",
                "bVar10": "byteVar10",
                "i": "iIndex",
                "i_1": "i_1Index",
                "in_r3": "ptr_r3",
                "uVar11": "uintVar",
                "delayTime": "delay",
                "__n": "undefinedVar",
                "sVar12": "sizeVal",
                "uVar13": "uintVar",
                "iVar14": "intVar",
                "bVar15": "boolVar"
            },
            "calling": [],
            "called": [
                "attached",
                "analogWriteCallback",
                "beginTransmission",
                "readAndReportData",
                "write",
                "getPinState",
                "endTransmission",
                "pin_in_pinmap",
                "pinNametoDigitalPin",
                "setPinModeCallback",
                "detachServo",
                "getPinMode",
                "sendString",
                "attachServo",
                "wireWrite",
                "enableI2CPins"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080022f8": {
            "entrypoint": "0x080022f8",
            "current_name": "process_analog_inputs_080022f8",
            "code": "\n/* WARNING: Unknown callindexng conventindexon */\n\nvoindexd processAnalogInputs_080022f8(voindexd)\n\n{\n  bool isDigitalPin;\n  PindexnName_conflindexct pinName;\n  byte pinMode;\n  indexnt availableDataCount;\n  uindexnt32_t digitalPinValue;\n  byte index;\n  uindexnt loopIndex;\n  byte analogPinIndex;\n  uindexnt loopPinIndex;\n  \n  checkDindexgindextalInputs();\n  whindexle (availableDataCount = findexrmata::FindexrmataClass::avaindexlable(&Findexrmata), availableDataCount != 0) {\n    findexrmata::FindexrmataClass::processInput(&Findexrmata);\n  }\n  currentMindexllindexs = mindexllindexs();\n  indexf (samplindexngInterval < currentMindexllindexs - previndexousMindexllindexs) {\n    previndexousMindexllindexs = previndexousMindexllindexs + samplindexngInterval;\n    for (loopIndex = 0; loopIndex < 0x3c; loopIndex = loopIndex + 1 & 0xff) {\n      loopPinIndex = loopIndex - 0x2e & 0xff;\n      indexf (loopPinIndex < 0xe) {\n        indexf (loopIndex < 0x3c) {\n          pinName = (&dindexgindextalPindexn)[loopIndex];\n        }\n        else {\n          pinName = NC;\n        }\n        digitalPinValue = pindexnNametoDindexgindextalPindexn(pinName);\n        indexf (digitalPinValue == 0) {\n          isDigitalPin = false;\n        }\n        else {\n          indexf (loopIndex < 0x3c) {\n            pinName = (&dindexgindextalPindexn)[loopIndex];\n          }\n          else {\n            pinName = NC;\n          }\n          digitalPinValue = pindexnNametoDindexgindextalPindexn(pinName);\n          indexf (digitalPinValue == 1) {\n            isDigitalPin = false;\n          }\n          else {\n            pinMode = findexrmata::FindexrmataClass::getPindexnMode(&Findexrmata,(byte)loopIndex);\n            indexf (pinMode == '\\x02') {\n              isDigitalPin = true;\n            }\n            else {\n              isDigitalPin = false;\n            }\n          }\n        }\n      }\n      else {\n        isDigitalPin = false;\n      }\n      indexf ((isDigitalPin) && ((analogInputsToReport >> loopPinIndex & 1U) != 0)) {\n        digitalPinValue = analogRead(loopPinIndex);\n        findexrmata::FindexrmataClass::sendAnalog(&Findexrmata,(byte)loopPinIndex,digitalPinValue);\n      }\n    }\n    indexf (-1 < queryIndex) {\n      for (loopIndex = 0; (indexnt)loopIndex < queryIndex + 1; loopIndex = loopIndex + 1 & 0xff) {\n        readAndReportData(query[loopIndex].addr,query[loopIndex].reg,query[loopIndex].bytes,query[loopIndex].stopTX)\n        ;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022f8": "process_analog_inputs_080022f8",
                "bVar1": "isDigitalPin",
                "PVar2": "pinName",
                "bVar3": "pinMode",
                "iVar4": "availableDataCount",
                "uVar5": "digitalPinValue",
                "i": "index",
                "uVar6": "loopIndex",
                "analogPin": "analogPinIndex",
                "ulPin": "loopPinIndex"
            },
            "calling": [
                "main"
            ],
            "called": [
                "available",
                "analogRead",
                "millis",
                "pinNametoDigitalPin",
                "sendAnalog",
                "checkDigitalInputs",
                "getPinMode",
                "readAndReportData",
                "processInput"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002400": {
            "entrypoint": "0x08002400",
            "current_name": "check_servo_pin_status_08002400",
            "code": "\n/* WARNING: Unknown calling convention */\n\nboolean check_servo_pin_status_08002400(timer_sequence16_Sequence_t timer_sequence)\n\n{\n  uint index;\n  \n  index = 0;\n  while( true ) {\n    if (0xb < index) {\n      return false;\n    }\n    if (((byte)servo_list[(uint)timer_sequence * 0xc + index].Pin & 0x40) != 0) break;\n    index = index + 1 & 0xff;\n  }\n  return true;\n}\n\n",
            "renaming": {
                "FUN_08002400": "check_servo_pin_status_08002400",
                "timer": "timer_sequence",
                "uVar1": "index",
                "servos": "servo_list"
            },
            "calling": [
                "attach",
                "detach"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800242c": {
            "entrypoint": "0x0800242c",
            "current_name": "initialize_timer_0800242c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeTimer_0800242c(stimer_t *timerObject)\n\n{\n  initializeTimer_0800242cPulse((timerConfig *)timerObject,60000,0x5dc,irqHandler + 1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800242c": "initialize_timer_0800242c",
                "obj": "timerObject",
                "TimerPulseInit": "initializeTimerPulse",
                "stimer_t_conflict": "timerConfig",
                "ServoIrqHandle": "irqHandler"
            },
            "calling": [
                "attach"
            ],
            "called": [
                "TimerPulseInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002444": {
            "entrypoint": "0x08002444",
            "current_name": "update_servo_channel_08002444",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid updateServoChannel_08002444(stimer_t *timerObject,uint32_t servoChannel)\n\n{\n  bool isServoValid;\n  uint32_t counterValue;\n  int channelOffset;\n  uint timerIndex;\n  \n  timerIndex = (uint)timerObject->idx;\n  if ((timerChannel[timerIndex] & 0x80U) == 0) {\n    channelOffset = timerIndex * 0xc;\n    if (timerChannel[timerIndex] + channelOffset < (int)(uint)ServoCount) {\n      if (((byte)servos[timerChannel[timerIndex] + channelOffset].Pin & 0x40) == 0) {\n        isServoValid = false;\n      }\n      else {\n        isServoValid = true;\n      }\n    }\n    else {\n      isServoValid = false;\n    }\n    if (isServoValid) {\n      digitalWrite((byte)servos[channelOffset + timerChannel[timerIndex]].Pin & 0x3f,0);\n    }\n  }\n  else {\n    setTimerCounter((stimer_t_conflict *)timerObject,0);\n  }\n  timerChannel[timerIndex] = timerChannel[timerIndex] + '\\x01';\n  channelOffset = timerIndex * 0xc;\n  if (timerChannel[timerIndex] + channelOffset < (int)(uint)ServoCount) {\n    if (timerChannel[timerIndex] < '\\f') {\n      isServoValid = true;\n    }\n    else {\n      isServoValid = false;\n    }\n  }\n  else {\n    isServoValid = false;\n  }\n  if (isServoValid) {\n    if (((byte)servos[timerChannel[timerIndex] + channelOffset].Pin & 0x40) != 0) {\n      digitalWrite((byte)servos[timerChannel[timerIndex] + channelOffset].Pin & 0x3f,1);\n    }\n    counterValue = getTimerCounter((stimer_t_conflict *)timerObject);\n    setCCRRegister((stimer_t_conflict *)timerObject,servoChannel,\n                   servos[channelOffset + timerChannel[timerIndex]].ticks + counterValue);\n    return;\n  }\n  counterValue = getTimerCounter((stimer_t_conflict *)timerObject);\n  if (counterValue + 4 < 20000) {\n    setCCRRegister((stimer_t_conflict *)timerObject,servoChannel,20000);\n  }\n  else {\n    counterValue = getTimerCounter((stimer_t_conflict *)timerObject);\n    setCCRRegister((stimer_t_conflict *)timerObject,servoChannel,counterValue + 4);\n  }\n  timerChannel[timerIndex] = -1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002444": "update_servo_channel_08002444",
                "obj": "timerObject",
                "channel": "servoChannel",
                "bVar1": "isServoValid",
                "uVar2": "counterValue",
                "iVar3": "channelOffset",
                "uVar4": "timerIndex"
            },
            "calling": [],
            "called": [
                "digitalWrite",
                "setCCRRegister",
                "setTimerCounter",
                "getTimerCounter"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002578": {
            "entrypoint": "0x08002578",
            "current_name": "deinit_timer_pulse_08002578",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid deinitTimerPulse_08002578(stimer_t *timerObject)\n\n{\n  TimerPulseDeinit((stimer_t_conflict *)timerObject);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002578": "deinit_timer_pulse_08002578",
                "obj": "timerObject"
            },
            "calling": [
                "detach"
            ],
            "called": [
                "TimerPulseDeinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002580": {
            "entrypoint": "0x08002580",
            "current_name": "initialize_servo_08002580",
            "code": "\n/* DWARF original prototype: Servo *  Servo(Servo * servoInstance) */\n\nServo * __servoInstancecall Servo::initializeServo_08002580(Servo *servoInstance)\n\n{\n  uint8_t nextServoCount;\n  uint currentServoCount;\n  \n  currentServoCount = (uint)ServoCount;\n  if (0xb < currentServoCount) {\n    servoInstance->servoIndex = 0xff;\n    return servoInstance;\n  }\n  nextServoCount = ServoCount + '\\x01';\n  servoInstance->servoIndex = ServoCount;\n  ServoCount = nextServoCount;\n  servos[currentServoCount].ticks = 0x5dc;\n  return servoInstance;\n}\n\n",
            "renaming": {
                "this": "servoInstance",
                "uVar1": "nextServoCount",
                "uVar2": "currentServoCount",
                "FUN_08002580": "initialize_servo_08002580"
            },
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025ac": {
            "entrypoint": "0x080025ac",
            "current_name": "attach_080025ac",
            "code": "\n/* DWARF original prototype: uint8_t  attach_080025ac(Servo * servo, int servoPin, int minimum, int maximum) */\n\nuint8_t __servocall Servo::attach_080025ac(Servo *servo,int servoPin,int minimum,int maximum)\n\n{\n  currentTimer16_Sequence_t timerSequence;\n  boolean isTimerActive;\n  currentTimer16_Sequence_t currentTimer;\n  int difference;\n  \n  if (servo->servoIndex < 0xc) {\n    servoPinMode(servoPin,1);\n    servoArray[servo->servoIndex].Pin =\n         (ServoPin_t)((byte)servoArray[servo->servoIndex].Pin & 0xc0 | (byte)servoPin & 0x3f);\n    difference = -minimum + 0x220;\n    if (difference < 0) {\n      difference = -minimum + 0x223;\n    }\n    servo->minimum = (int8_t)((uint)(difference << 0x16) >> 0x18);\n    difference = -maximum + 0x960;\n    if (difference < 0) {\n      difference = -maximum + 0x963;\n    }\n    servo->maximum = (int8_t)((uint)(difference << 0x16) >> 0x18);\n    timerSequence = servo->servoIndex / 0xc;\n    isTimerActive = isTimerActive(timerSequence);\n    if (!isTimerActive) {\n      servoTimer.idx = timerSequence;\n      initISR(&servoTimer);\n    }\n    servoArray[servo->servoIndex].Pin = (ServoPin_t)((byte)servoArray[servo->servoIndex].Pin | 0x40);\n  }\n  return servo->servoIndex;\n}\n\n",
            "renaming": {
                "FUN_080025ac": "attach_080025ac",
                "this": "servo",
                "pin": "servoPin",
                "min": "minimum",
                "max": "maximum",
                "timer_00": "timerSequence",
                "bVar1": "isTimerActive",
                "timer": "currentTimer",
                "iVar2": "difference",
                "servos": "servoArray",
                "_timer": "servoTimer"
            },
            "calling": [
                "attach",
                "attachServo"
            ],
            "called": [
                "isTimerActive",
                "initISR",
                "pinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002634": {
            "entrypoint": "0x08002634",
            "current_name": "attach_servo_to_pin_08002634",
            "code": "\n/* DWARF original prototype: uint8_t  attach(Servo * servoInstance, int servoPin) */\n\nuint8_t __servoInstancecall Servo::attachServoToPin_08002634(Servo *servoInstance,int servoPin)\n\n{\n  uint8_t attachmentStatus;\n  \n  attachmentStatus = attach(servoInstance,servoPin,0x220,0x960);\n  return attachmentStatus;\n}\n\n",
            "renaming": {
                "FUN_08002634": "attach_servo_to_pin_08002634",
                "this": "servoInstance",
                "pin": "servoPin",
                "uVar1": "attachmentStatus"
            },
            "calling": [
                "attachServo"
            ],
            "called": [
                "attach"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002644": {
            "entrypoint": "0x08002644",
            "current_name": "detach_08002644",
            "code": "\n/* DWARF original prototype: void  detach_08002644(Servo * servo) */\n\nvoid __servocall Servo::detach_08002644(Servo *servo)\n\n{\n  byte servoIndex;\n  boolean isTimerActive;\n  \n  servoIndex = servo->servoIndex;\n  servoList[servoIndex].Pin = (PinType)((byte)servoList[servoIndex].Pin & 0xbf);\n  isTimerActive = checkTimerActive(servoIndex / 0xc);\n  if (!isTimerActive) {\n    endISR(&timer);\n  }\n  return;\n}\n\n",
            "renaming": {
                "this": "servo",
                "bVar1": "servoIndex",
                "bVar2": "isTimerActive",
                "servos": "servoList",
                "ServoPin_t": "PinType",
                "isTimerActive": "checkTimerActive",
                "finISR": "endISR",
                "_timer": "timer",
                "FUN_08002644": "detach_08002644"
            },
            "calling": [
                "detachServo"
            ],
            "called": [
                "isTimerActive",
                "finISR"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800267c": {
            "entrypoint": "0x0800267c",
            "current_name": "update_servo_ticks_0800267c",
            "code": "\n/* DWARF original prototype: void  writeMicroseconds(Servo * servo, int microseconds) */\n\nvoid __servocall Servo::updateServoTicks_0800267c(Servo *servo,int microseconds)\n\n{\n  uint mappedTicks;\n  int mappedValue;\n  \n  if (servo->servoIndex < 0xc) {\n    mappedTicks = (0x88 - servo->min) * 4;\n    if ((mappedTicks - microseconds == 0 || (int)mappedTicks < microseconds) &&\n       (mappedValue = 600 - servo->max, mappedTicks = mappedValue * 4,\n       microseconds == mappedTicks || microseconds + mappedValue * -4 < 0 != SBORROW4(microseconds,mappedTicks))) {\n      mappedTicks = microseconds;\n    }\n    servos[servo->servoIndex].ticks = mappedTicks;\n  }\n  return;\n}\n\n",
            "renaming": {
                "this": "servo",
                "value": "microseconds",
                "uVar1": "mappedTicks",
                "iVar2": "mappedValue",
                "FUN_0800267c": "update_servo_ticks_0800267c"
            },
            "calling": [
                "write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026b0": {
            "entrypoint": "0x080026b0",
            "current_name": "update_servo_position_080026b0",
            "code": "\n/* DWARF original prototype: void  write(Servo * servo, int value) */\n\nssize_t __servocall Servo::updateServoPosition_080026b0(Servo *servo,int fileDescriptor,void *buffer,size_t size)\n\n{\n  if (fileDescriptor < 0x220) {\n    if (fileDescriptor < 0) {\n      fileDescriptor = 0;\n    }\n    else if (0xb4 < fileDescriptor) {\n      fileDescriptor = 0xb4;\n    }\n    fileDescriptor = mapValue(fileDescriptor,0,0xb4,(0x88 - servo->min) * 4,(600 - servo->max) * 4);\n  }\n  writeMicros(servo,fileDescriptor);\n  return returnType;\n}\n\n",
            "renaming": {
                "this": "servo",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__n": "size",
                "map": "mapValue",
                "writeMicroseconds": "writeMicros",
                "(ssize_t)this": "returnType",
                "FUN_080026b0": "update_servo_position_080026b0"
            },
            "calling": [
                "analogWriteCallback"
            ],
            "called": [
                "writeMicroseconds",
                "map"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026f8": {
            "entrypoint": "0x080026f8",
            "current_name": "is_pin_attached_080026f8",
            "code": "\n/* DWARF original prototype: bool  attached(Servo * servoObject) */\n\nbool __servoObjectcall Servo::isPinAttached_080026f8(Servo *servoObject)\n\n{\n  return SUB41(((uint)(byte)servoArray[servoObject->index].pin << 0x19) >> 0x1f,0);\n}\n\n",
            "renaming": {
                "FUN_080026f8": "is_pin_attached_080026f8",
                "this": "servoObject",
                "servoIndex": "index",
                "servos": "servoArray",
                "Pin": "pin"
            },
            "calling": [
                "setPinModeCallback",
                "sysexCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800270c": {
            "entrypoint": "0x0800270c",
            "current_name": "calculate_available_0800270c",
            "code": "\n/* DWARF original prototype: int  available(TwoWire * wireObject) */\n\nint __wireObjectcall TwoWire::calculateAvailable_0800270c(TwoWire *wireObject)\n\n{\n  return (uint)receiveBufferLength - (uint)receiveBufferIndex;\n}\n\n",
            "renaming": {
                "FUN_0800270c": "calculate_available_0800270c",
                "this": "wireObject",
                "rxBufferLength": "receiveBufferLength",
                "rxBufferIndex": "receiveBufferIndex"
            },
            "calling": [
                "readAndReportData"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002720": {
            "entrypoint": "0x08002720",
            "current_name": "read_data_08002720",
            "code": "\n/* DWARF original prototype: int  read(TwoWire * wire) */\n\nssize_t __wirecall TwoWire::readData_08002720(TwoWire *wire,int fileDescriptor,void *buffer,size_t numBytes)\n\n{\n  uint index;\n  \n  index = (uint)currentBufferIndex;\n  if (index < bufferLength) {\n    currentBufferIndex = currentBufferIndex + '\\x01';\n    return (uint)receiveBuffer[index];\n  }\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_08002720": "read_data_08002720",
                "this": "wire",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__nbytes": "numBytes",
                "uVar1": "index",
                "rxBufferIndex": "currentBufferIndex",
                "rxBufferLength": "bufferLength",
                "rxBuffer": "receiveBuffer"
            },
            "calling": [
                "wireRead"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800274c": {
            "entrypoint": "0x0800274c",
            "current_name": "peek_0800274c",
            "code": "\n/* DWARF original prototype: int  peek_0800274c(TwoWire * wire) */\n\nint __wirecall TwoWire::peek_0800274c(TwoWire *wire)\n\n{\n  if ((uint)bufferIndex < (uint)bufferLength) {\n    return (uint)buffer[bufferIndex];\n  }\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_0800274c": "peek_0800274c",
                "this": "wire",
                "rxBufferIndex": "bufferIndex",
                "rxBufferLength": "bufferLength",
                "rxBuffer": "buffer"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002774": {
            "entrypoint": "0x08002774",
            "current_name": "handle_request_08002774",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid TwoWire::handleRequest_08002774(void)\n\n{\n  if (onRequestHandler != (_func_void *)0x0) {\n    transmitBufferIndex = '\\0';\n    transmitBufferLength = '\\0';\n    (*onRequestHandler)();\n  }\n  return;\n}\n\n",
            "renaming": {
                "user_onRequest": "onRequestHandler",
                "txBufferIndex": "transmitBufferIndex",
                "txBufferLength": "transmitBufferLength",
                "FUN_08002774": "handle_request_08002774"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002798": {
            "entrypoint": "0x08002798",
            "current_name": "reset_wire_buffers_08002798",
            "code": "\n/* DWARF original prototype: void  flush(TwoWire * wire) */\n\nvoid __wirecall TwoWire::resetWireBuffers_08002798(TwoWire *wire)\n\n{\n  receiveBufferIndex = '\\0';\n  receiveBufferLength = '\\0';\n  if (receiveBuffer != (uint8_t *)0x0) {\n    memset(receiveBuffer,0,(uint)receiveBufferAllocated);\n  }\n  transmitBufferIndex = '\\0';\n  transmitBufferLength = '\\0';\n  if (transmitBuffer != (uint8_t *)0x0) {\n    memset(transmitBuffer,0,(uint)transmitBufferAllocated);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002798": "reset_wire_buffers_08002798",
                "this": "wire",
                "rxBufferIndex": "receiveBufferIndex",
                "rxBufferLength": "receiveBufferLength",
                "rxBuffer": "receiveBuffer",
                "rxBufferAllocated": "receiveBufferAllocated",
                "txBufferIndex": "transmitBufferIndex",
                "txBufferLength": "transmitBufferLength",
                "txBuffer": "transmitBuffer",
                "txBufferAllocated": "transmitBufferAllocated"
            },
            "calling": [],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080027f0": {
            "entrypoint": "0x080027f0",
            "current_name": "write_data_to_i2_c_080027f0",
            "code": "\n/* DWARF original prototype: size_t  write(TwoWire * wireObject, uint8_t * data, size_t quantity) */\n\nssize_t __wireObjectcall TwoWire::writeDataToI2C_080027f0(TwoWire *wireObject,int fileDescriptor,void *buffer,size_t quantity)\n\n{\n  i2c_status_e_conflict i2cStatus;\n  size_t totalSize;\n  \n  if (isTransmitting == '\\0') {\n    i2cStatus = i2c_slave_write_IT((i2c_t_conflict *)&wireObject->_i2c,(uint8_t *)fileDescriptor,(uint16_t)buffer);\n    if (i2cStatus == I2C_OK) {\n      return (ssize_t)buffer;\n    }\n    return 0;\n  }\n  totalSize = (uint)bufferLength + (int)buffer;\n  if (bufferAllocated < totalSize) {\n    if (totalSize < 0x20) {\n      totalSize = 0x20;\n    }\n    transmitBuffer = (uint8_t *)realloc(transmitBuffer,totalSize);\n    if (transmitBuffer == (uint8_t *)0x0) {\n      bufferAllocated = '\\0';\n    }\n    else {\n      bufferAllocated = (uint8_t)totalSize;\n    }\n  }\n  if (transmitBuffer == (uint8_t *)0x0) {\n    (wireObject->super_Stream).super_Print.write_error = 1;\n    return 0;\n  }\n  memcpy(transmitBuffer + bufferIndex,(void *)fileDescriptor,(size_t)buffer);\n  bufferIndex = bufferIndex + (char)buffer;\n  bufferLength = bufferIndex;\n  return (ssize_t)buffer;\n}\n\n",
            "renaming": {
                "this": "wireObject",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__n": "quantity",
                "transmitting": "isTransmitting",
                "iVar1": "i2cStatus",
                "__size": "totalSize",
                "txBufferLength": "bufferLength",
                "txBufferAllocated": "bufferAllocated",
                "txBuffer": "transmitBuffer",
                "txBufferIndex": "bufferIndex",
                "FUN_080027f0": "write_data_to_i2_c_080027f0"
            },
            "calling": [],
            "called": [
                "i2c_slave_write_IT",
                "realloc",
                "memcpy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800288c": {
            "entrypoint": "0x0800288c",
            "current_name": "write_data_0800288c",
            "code": "\n/* DWARF original prototype: size_t  write(TwoWire * wire, uint8_t data) */\n\nssize_t __wirecall TwoWire::writeData_0800288c(TwoWire *wire,int fileDescriptor,void *buffer,size_t size)\n\n{\n  i2c_status_e_conflict i2cStatus;\n  ssize_t returnValue;\n  size_t newSize;\n  uint8_t data;\n  \n  data = (uint8_t)fileDescriptor;\n  if (isTransmitting == '\\0') {\n    i2cStatus = i2cSlaveWriteAsync((i2c_t_conflict *)&wire->_i2c,&data,1);\n    if (i2cStatus == I2C_SUCCESS) {\n      returnValue = 1;\n    }\n    else {\n      returnValue = 0;\n    }\n  }\n  else {\n    newSize = transmitBufferLength + 1;\n    if (transmitBufferAllocated < newSize) {\n      if (newSize < 0x20) {\n        newSize = 0x20;\n      }\n      transmitBuffer = (uint8_t *)realloc(transmitBuffer,newSize);\n      if (transmitBuffer == (uint8_t *)0x0) {\n        transmitBufferAllocated = '\\0';\n      }\n      else {\n        transmitBufferAllocated = (uint8_t)newSize;\n      }\n    }\n    if (transmitBuffer == (uint8_t *)0x0) {\n      (wire->super_Stream).super_Print.write_error = 1;\n      returnValue = 0;\n    }\n    else {\n      transmitBuffer[transmitBufferIndex] = data;\n      transmitBufferIndex = transmitBufferIndex + '\\x01';\n      returnValue = 1;\n      transmitBufferLength = transmitBufferIndex;\n    }\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800288c": "write_data_0800288c",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__n": "size",
                "iVar1": "i2cStatus",
                "sVar2": "returnValue",
                "__size": "newSize",
                "local_11": "data",
                "transmitting": "isTransmitting",
                "i2c_slave_write_IT": "i2cSlaveWriteAsync",
                "I2C_OK": "I2C_SUCCESS",
                "txBufferLength": "transmitBufferLength",
                "txBufferAllocated": "transmitBufferAllocated",
                "txBuffer": "transmitBuffer",
                "txBufferIndex": "transmitBufferIndex",
                "this": "wire"
            },
            "calling": [
                "wireWrite"
            ],
            "called": [
                "i2c_slave_write_IT",
                "realloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800291c": {
            "entrypoint": "0x0800291c",
            "current_name": "initialize_wire_0800291c",
            "code": "\n/* DWARF original prototype: TwoWire *  TwoWire(TwoWire * wireInstance) */\n\nTwoWire * __wireInstancecall TwoWire::initializeWire_0800291c(TwoWire *wireInstance)\n\n{\n  (wireInstance->super_Stream).super_Print.write_error = 0;\n  (wireInstance->super_Stream)._timeout = 1000;\n  (wireInstance->super_Stream).super_Print._vptr_Print = (_func_int_varargs **)&PTR_write_1_0800a5a0;\n  (wireInstance->_i2c).sda = PB_9;\n  (wireInstance->_i2c).scl = PB_8;\n  return wireInstance;\n}\n\n",
            "renaming": {
                "this": "wireInstance",
                "FUN_0800291c": "initialize_wire_0800291c"
            },
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002948": {
            "entrypoint": "0x08002948",
            "current_name": "initialize_wire_08002948",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeWire_08002948(int initializeFlag,int priority)\n\n{\n  if (initializeFlag != 1) {\n    return;\n  }\n  if (priority == 0xffff) {\n    TwowireInstance::TwowireInstance(&wireInstance);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002948": "initialize_wire_08002948",
                "__initialize_p": "initializeFlag",
                "__priority": "priority",
                "Wire": "wireInstance"
            },
            "calling": [
                "_GLOBAL__sub_I__ZN7TwoWire8rxBufferE"
            ],
            "called": [
                "TwoWire"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002968": {
            "entrypoint": "0x08002968",
            "current_name": "initialize_wire_08002968",
            "code": "\n/* DWARF original prototype: void  begin(TwoWire * wireObject, uint8_t deviceAddress) */\n\nvoid __wireObjectcall TwoWire::initializeWire_08002968(TwoWire *wireObject,uint8_t deviceAddress)\n\n{\n  uint32_t computedOwnAddress;\n  i2cStruct *obj;\n  \n  receiveBufferIndex = '\\0';\n  receiveBufferLength = '\\0';\n  if (receiveBuffer != (uint8_t *)0x0) {\n    memset(receiveBuffer,0,(uint)receiveBufferAllocated);\n  }\n  transimitBufferIndex = '\\0';\n  transmitBufferLength = '\\0';\n  if (transmitBuffer != (uint8_t *)0x0) {\n    memset(transmitBuffer,0,(uint)transmitBufferAllocated);\n  }\n  isTransmitting = '\\0';\n  computedOwnAddress = (deviceAddress & 0x7f) << 1;\n  wireObject->computedOwnAddress = (uint8_t)computedOwnAddress;\n  if (deviceAddress == 0x33) {\n    wireObject->master = true;\n  }\n  else {\n    wireObject->master = false;\n  }\n  obj = &wireObject->i2cStruct;\n  initializeI2C((i2cStruct_conflict *)obj,I2C_SPEED_100KHz,0x4000,computedOwnAddress,wireObject->master);\n  if (wireObject->master == false) {\n    attachSlaveTransmitEvent((i2cStruct_conflict *)obj,slaveTransmitService + 1);\n    attachSlaveReceiveEvent((i2cStruct_conflict *)obj,slaveReceiveService + 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002968": "initialize_wire_08002968",
                "this": "wireObject",
                "address": "deviceAddress",
                "ownAddress": "computedOwnAddress",
                "i2c_t": "i2cStruct",
                "rxBuffer": "receiveBuffer",
                "rxBufferIndex": "receiveBufferIndex",
                "rxBufferLength": "receiveBufferLength",
                "rxBufferAllocated": "receiveBufferAllocated",
                "txBuffer": "transmitBuffer",
                "txBufferIndex": "transimitBufferIndex",
                "txBufferLength": "transmitBufferLength",
                "txBufferAllocated": "transmitBufferAllocated",
                "transmitting": "isTransmitting",
                "_i2c": "i2cStruct",
                "i2c_custom_init": "initializeI2C",
                "I2C_100KHz": "I2C_SPEED_100KHz",
                "i2c_attachSlaveTxEvent": "attachSlaveTransmitEvent",
                "onRequestService": "slaveTransmitService",
                "i2c_attachSlaveRxEvent": "attachSlaveReceiveEvent",
                "onReceiveService": "slaveReceiveService"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "memset",
                "i2c_attachSlaveTxEvent",
                "i2c_attachSlaveRxEvent",
                "i2c_custom_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a1c": {
            "entrypoint": "0x08002a1c",
            "current_name": "initialize_wire_08002a1c",
            "code": "\n/* DWARF original prototype: void  start(TwoWire * wire, int deviceAddress) */\n\nvoid __wirecall TwoWire::initializeWire_08002a1c(TwoWire *wire,int deviceAddress)\n\n{\n  start(wire,(uint8_t)deviceAddress);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a1c": "initialize_wire_08002a1c",
                "this": "wire",
                "begin": "start",
                "address": "deviceAddress"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "begin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a26": {
            "entrypoint": "0x08002a26",
            "current_name": "initialize_wire_communication_08002a26",
            "code": "\n/* DWARF original prototype: void  begin(TwoWire * wireInstance) */\n\nvoid __wireInstancecall TwoWire::initializeWireCommunication_08002a26(TwoWire *wireInstance)\n\n{\n  begin(wireInstance,0x33);\n  return;\n}\n\n",
            "renaming": {
                "this": "wireInstance",
                "FUN_08002a26": "initialize_wire_communication_08002a26"
            },
            "calling": [
                "enableI2CPins"
            ],
            "called": [
                "begin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a30": {
            "entrypoint": "0x08002a30",
            "current_name": "initialize_transmission_08002a30",
            "code": "\n/* DWARF original prototype: void  beginTransmission(TwoWire * wireInstance, uint8_t deviceAddress) */\n\nvoid __wireInstancecall TwoWire::initializeTransmission_08002a30(TwoWire *wireInstance,uint8_t deviceAddress)\n\n{\n  isTransmitting = '\\x01';\n  transmitAddress = deviceAddress << 1;\n  transmitBufferIndex = '\\0';\n  transmitBufferLength = '\\0';\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a30": "initialize_transmission_08002a30",
                "this": "wireInstance",
                "address": "deviceAddress",
                "transmitting": "isTransmitting",
                "txAddress": "transmitAddress",
                "txBufferIndex": "transmitBufferIndex",
                "txBufferLength": "transmitBufferLength"
            },
            "calling": [
                "readAndReportData",
                "requestFrom",
                "sysexCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a58": {
            "entrypoint": "0x08002a58",
            "current_name": "end_transmission_08002a58",
            "code": "\n/* DWARF original prototype: uint8_t  endTransmission_08002a58(TwoWire * wire, uint8_t stopCondition) */\n\nuint8_t __wirecall TwoWire::endTransmission_08002a58(TwoWire *wire,uint8_t stopCondition)\n\n{\n  i2cStatus i2cResult;\n  uint8_t result;\n  \n  if (wire->master == false) {\n    result = '\\x04';\n  }\n  else {\n    i2cResult = i2c_master_write((i2cType *)&wire->_i2c,txAddress,txBuffer,(ushort)txBufferLength\n                            );\n    if (i2cResult == I2C_OK) {\n      result = '\\0';\n    }\n    else if (i2cResult == I2C_TIMEOUT) {\n      result = '\\x01';\n    }\n    else {\n      result = '\\x04';\n    }\n    if (txBuffer != (uint8_t *)0x0) {\n      memset(txBuffer,0,(uint)txBufferAllocated);\n    }\n    txBufferIndex = '\\0';\n    txBufferLength = '\\0';\n    transmitting = '\\0';\n  }\n  return result;\n}\n\n",
            "renaming": {
                "this": "wire",
                "sendStop": "stopCondition",
                "i2c_status_e_conflict": "i2cStatus",
                "uVar2": "result",
                "i2c_t_conflict": "i2cType",
                "iVar1": "i2cResult",
                "FUN_08002a58": "end_transmission_08002a58"
            },
            "calling": [
                "endTransmission",
                "readAndReportData",
                "requestFrom"
            ],
            "called": [
                "memset",
                "i2c_master_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ac0": {
            "entrypoint": "0x08002ac0",
            "current_name": "transmit_data_08002ac0",
            "code": "\n/* DWARF original prototype: uint8_t  endTransmission(TwoWire * wireObject) */\n\nuint8_t __wireObjectcall TwoWire::transmitData_08002ac0(TwoWire *wireObject)\n\n{\n  uint8_t transmissionStatus;\n  \n  transmissionStatus = endTransmission(wireObject,'\\x01');\n  return transmissionStatus;\n}\n\n",
            "renaming": {
                "this": "wireObject",
                "uVar1": "transmissionStatus",
                "FUN_08002ac0": "transmit_data_08002ac0"
            },
            "calling": [
                "sysexCallback"
            ],
            "called": [
                "endTransmission"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002acc": {
            "entrypoint": "0x08002acc",
            "current_name": "expand_rx_buffer_08002acc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid TwoWire::expandRxBuffer_08002acc(size_t newLength)\n\n{\n  if (currentAllocated < newLength) {\n    if (newLength < 0x20) {\n      newLength = 0x20;\n    }\n    currentBuffer = (uint8_t *)realloc(currentBuffer,newLength);\n    if (currentBuffer == (uint8_t *)0x0) {\n      currentAllocated = '\\0';\n    }\n    else {\n      currentAllocated = (uint8_t)newLength;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002acc": "expand_rx_buffer_08002acc",
                "length": "newLength",
                "rxBufferAllocated": "currentAllocated",
                "rxBuffer": "currentBuffer"
            },
            "calling": [
                "onReceiveService",
                "requestFrom"
            ],
            "called": [
                "realloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b00": {
            "entrypoint": "0x08002b00",
            "current_name": "receive_data_08002b00",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid TwoWire::receiveData_08002b00(uint8_t *inputBuffer,int bufferSize)\n\n{\n  if ((onReceiveCallback != (_func_void_int *)0x0) && (bufferLength <= bufferIndex)) {\n    createRxBuffer(bufferSize);\n    if (receiveBuffer == (uint8_t *)0x0) {\n      handleError(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/libraries/Wire/src/Wire.cpp\"\n                     ,0x183);\n    }\n    copyBytes(receiveBuffer,inputBuffer,bufferSize);\n    bufferIndex = '\\0';\n    bufferLength = (uint8_t)bufferSize;\n    (*onReceiveCallback)(bufferSize);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002b00": "receive_data_08002b00",
                "inBytes": "inputBuffer",
                "numBytes": "bufferSize",
                "user_onReceive": "onReceiveCallback",
                "rxBufferLength": "bufferLength",
                "rxBufferIndex": "bufferIndex",
                "allocateRxBuffer": "createRxBuffer",
                "rxBuffer": "receiveBuffer",
                "_Error_Handler": "handleError",
                "memcpy": "copyBytes"
            },
            "calling": [],
            "called": [
                "_Error_Handler",
                "allocateRxBuffer",
                "memcpy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b68": {
            "entrypoint": "0x08002b68",
            "current_name": "request_from_08002b68",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x08002bb2 */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: uint8_t  requestFrom_08002b68(TwoWire * wireInstance, uint8_t deviceAddress, uint8_t dataQuantity,\n   uint32_t internalAddress, uint8_t internalSize, uint8_t stopSignal) */\n\nuint8_t __wireInstancecall\nTwoWire::requestFrom_08002b68(TwoWire *wireInstance,uint8_t deviceAddress,uint8_t dataQuantity,uint32_t internalAddress,uint8_t internalSize,\n          uint8_t stopSignal)\n\n{\n  i2c_status_e_conflict status;\n  uint size;\n  \n  size = (uint)internalSize;\n  if (wireInstance->master == false) {\n    return '\\0';\n  }\n  allocateRxBuffer((uint)dataQuantity);\n  if (receiveBuffer != (uint8_t *)0x0) {\n    if (size != 0) {\n      beginTransmission(wireInstance,deviceAddress);\n      if (3 < size) {\n        size = 3;\n      }\n      while( true ) {\n        if (size == 0) break;\n        (**(wireInstance->super_Stream).super_Print._vptr_Print)\n                  (wireInstance,internalAddress >> ((size - 1 & 0x1f) << 3) & 0xff);\n        size = size - 1 & 0xff;\n      }\n      endTransmission(wireInstance,'\\0');\n    }\n    status = i2c_master_read((i2c_t_conflict *)&wireInstance->i2cInstance,deviceAddress << 1,receiveBuffer,(ushort)dataQuantity);\n    if (status != I2C_SUCCESS) {\n      dataQuantity = '\\0';\n    }\n    receiveBufferIndex = '\\0';\n    receiveBufferLength = dataQuantity;\n    return dataQuantity;\n  }\n  (wireInstance->super_Stream).super_Print.write_error = 1;\n  return '\\0';\n}\n\n",
            "renaming": {
                "FUN_08002b68": "request_from_08002b68",
                "this": "wireInstance",
                "address": "deviceAddress",
                "quantity": "dataQuantity",
                "iaddress": "internalAddress",
                "isize": "internalSize",
                "sendStop": "stopSignal",
                "iVar1": "status",
                "uVar2": "size",
                "rxBuffer": "receiveBuffer",
                "rxBufferIndex": "receiveBufferIndex",
                "rxBufferLength": "receiveBufferLength",
                "I2C_OK": "I2C_SUCCESS",
                "_i2c": "i2cInstance"
            },
            "calling": [
                "requestFrom"
            ],
            "called": [
                "beginTransmission",
                "i2c_master_read",
                "allocateRxBuffer",
                "endTransmission"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c00": {
            "entrypoint": "0x08002c00",
            "current_name": "extract_data_from_wire_08002c00",
            "code": "\n/* DWARF original prototype: uint8_t  requestFrom(TwoWire * wireObject, uint8_t targetAddress, uint8_t dataQuantity,\n   uint8_t useStopSignal) */\n\nuint8_t __wireObjectcall\nTwoWire::extractDataFromWire_08002c00(TwoWire *wireObject,uint8_t targetAddress,uint8_t dataQuantity,uint8_t useStopSignal)\n\n{\n  uint8_t result;\n  \n  result = requestFrom(wireObject,targetAddress,dataQuantity,0,'\\0',useStopSignal);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002c00": "extract_data_from_wire_08002c00",
                "this": "wireObject",
                "address": "targetAddress",
                "quantity": "dataQuantity",
                "sendStop": "useStopSignal",
                "uVar1": "result"
            },
            "calling": [
                "requestFrom"
            ],
            "called": [
                "requestFrom"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c14": {
            "entrypoint": "0x08002c14",
            "current_name": "read_from_wire_08002c14",
            "code": "\n/* DWARF original prototype: uint8_t  requestFrom(TwoWire * wireInstance, uint8_t deviceAddress, uint8_t dataQuantity)\n    */\n\nuint8_t __wireInstancecall TwoWire::readFromWire_08002c14(TwoWire *wireInstance,uint8_t deviceAddress,uint8_t dataQuantity)\n\n{\n  uint8_t returnValue;\n  \n  returnValue = requestFrom(wireInstance,deviceAddress,dataQuantity,'\\x01');\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08002c14": "read_from_wire_08002c14",
                "this": "wireInstance",
                "address": "deviceAddress",
                "quantity": "dataQuantity",
                "uVar1": "returnValue"
            },
            "calling": [
                "readAndReportData"
            ],
            "called": [
                "requestFrom"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c1e": {
            "entrypoint": "0x08002c1e",
            "current_name": "initialize_static_values_08002c1e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initialize_static_values_08002c1e(void)\n\n{\n  perform_static_initialization_and_destruction(1,0xffff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c1e": "initialize_static_values_08002c1e",
                "__static_initialization_and_destruction_0": "perform_static_initialization_and_destruction"
            },
            "calling": [],
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c2c": {
            "entrypoint": "0x08002c2c",
            "current_name": "handle_analog_command_08002c2c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid firmata::FirmataClass::handleAnalogCommand_08002c2c(void *data,uint8_t analogCommand,uint16_t analogValue)\n\n{\n  if (currentAnalogCallback != (callbackFunction)0x0) {\n    (*currentAnalogCallback)(analogCommand,(int)analogValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "param_1": "data",
                "command": "analogCommand",
                "value": "analogValue",
                "FUN_08002c2c": "handle_analog_command_08002c2c"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c40": {
            "entrypoint": "0x08002c40",
            "current_name": "handle_digital_command_08002c40",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid firmata::FirmataClass::handleDigitalCommand_08002c40(void *data,uint8_t cmd,uint16_t val)\n\n{\n  if (currentDigitalCallback != (callbackFunction)0x0) {\n    (*currentDigitalCallback)(cmd,(int)val);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c40": "handle_digital_command_08002c40",
                "param_1": "data",
                "command": "cmd",
                "value": "val"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c54": {
            "entrypoint": "0x08002c54",
            "current_name": "handle_pin_mode_change_08002c54",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid firmata::FirmataClass::handlePinModeChange_08002c54(void *data,uint8_t pinMode,uint16_t newValue)\n\n{\n  if (callback != (callbackFunction)0x0) {\n    (*callback)(pinMode,(int)newValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "param_1": "data",
                "command": "pinMode",
                "value": "newValue",
                "currentPinModeCallback": "callback",
                "FUN_08002c54": "handle_pin_mode_change_08002c54"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c68": {
            "entrypoint": "0x08002c68",
            "current_name": "handle_pin_value_08002c68",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid firmata::FirmataClass::handlePinValue_08002c68(void *data,uint8_t pinCommand,uint16_t pinValue)\n\n{\n  if (pinValueCallback != (callbackFunction)0x0) {\n    (*pinValueCallback)(pinCommand,(int)pinValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c68": "handle_pin_value_08002c68",
                "param_1": "data",
                "command": "pinCommand",
                "value": "pinValue",
                "currentPinValueCallback": "pinValueCallback"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c7c": {
            "entrypoint": "0x08002c7c",
            "current_name": "send_analog_report_08002c7c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid firmata::FirmataClass::sendAnalogReport_08002c7c(void *data,uint8_t analogCommand,uint16_t analogValue)\n\n{\n  if (callbackFunctionPtr != (callbackFunction)0x0) {\n    (*callbackFunctionPtr)(analogCommand,(int)analogValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c7c": "send_analog_report_08002c7c",
                "param_1": "data",
                "command": "analogCommand",
                "value": "analogValue",
                "currentReportAnalogCallback": "callbackFunctionPtr"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c90": {
            "entrypoint": "0x08002c90",
            "current_name": "report_digital_command_08002c90",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid firmata::FirmataClass::reportDigitalCommand_08002c90(void *data,uint8_t digitalCommand,uint16_t digitalValue)\n\n{\n  if (currentReportDigitalCallback != (callbackFunction)0x0) {\n    (*currentReportDigitalCallback)(digitalCommand,(int)digitalValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c90": "report_digital_command_08002c90",
                "param_1": "data",
                "command": "digitalCommand",
                "value": "digitalValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca4": {
            "entrypoint": "0x08002ca4",
            "current_name": "execute_string_callback_08002ca4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid firmata::FirmataClass::executeStringCallback_08002ca4(void *data,char *callbackString)\n\n{\n  if (stringCallback != (stringCallbackFunction)0x0) {\n    (*stringCallback)(callbackString);\n  }\n  return;\n}\n\n",
            "renaming": {
                "param_1": "data",
                "c_str": "callbackString",
                "currentStringCallback": "stringCallback",
                "FUN_08002ca4": "execute_string_callback_08002ca4"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002cb8": {
            "entrypoint": "0x08002cb8",
            "current_name": "process_sysex_command_08002cb8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid firmata::FirmataClass::processSysexCommand_08002cb8(void *data,uint8_t opcode,size_t argCount,uint8_t *arguments)\n\n{\n  if (sysexCallback != (sysexCallbackFunction)0x0) {\n    (*sysexCallback)(opcode,(uint8_t)argCount,arguments);\n  }\n  return;\n}\n\n",
            "renaming": {
                "param_1": "data",
                "command": "opcode",
                "argc": "argCount",
                "argv": "arguments",
                "currentSysexCallback": "sysexCallback",
                "FUN_08002cb8": "process_sysex_command_08002cb8"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002cd0": {
            "entrypoint": "0x08002cd0",
            "current_name": "handle_system_reset_callback_08002cd0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid firmata::FirmataClass::handleSystemResetCallback_08002cd0(void *callbackParameter)\n\n{\n  if (currentResetCallback != (resetCallbackFunction)0x0) {\n    (*currentResetCallback)();\n  }\n  return;\n}\n\n",
            "renaming": {
                "param_1": "callbackParameter",
                "currentSystemResetCallback": "currentResetCallback",
                "systemCallbackFunction": "resetCallbackFunction",
                "FUN_08002cd0": "handle_system_reset_callback_08002cd0"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ce0": {
            "entrypoint": "0x08002ce0",
            "current_name": "initialize_firmata_08002ce0",
            "code": "\n/* DWARF original prototype: FirmataController *  FirmataController(FirmataController * controller) */\n\nFirmataController * __controllercall firmata::FirmataController::initializeFirmata_08002ce0(FirmataController *controller)\n\n{\n  Parser *parser;\n  \n  Marshaller::Marshaller(&controller->marshaller);\n  parser = &controller->parser;\n  Parser::Parser(parser,controller->parserBuffer,0x40);\n  controller->versionCount = '\\0';\n  controller->versionVector = (byte *)0x0;\n  controller->isBlinkVersionDisabled = false;\n  Parser::attach(parser,0xe0,handleAnalogCallback + 1,(void *)0x0);\n  Parser::attach(parser,0x90,handleDigitalCallback + 1,(void *)0x0);\n  Parser::attach(parser,0xc0,handleReportAnalogCallback + 1,(void *)0x0);\n  Parser::attach(parser,0xd0,handleReportDigitalCallback + 1,(void *)0x0);\n  Parser::attach(parser,0xf4,handlePinModeCallback + 1,(void *)0x0);\n  Parser::attach(parser,0xf5,handlePinValueCallback + 1,(void *)0x0);\n  Parser::attach(parser,'q',handleStringCallback + 1,(void *)0x0);\n  Parser::attach(parser,0xf0,handleSysexCallback + 1,(void *)0x0);\n  Parser::attach(parser,'y',handleReportFirmwareCallback + 1,controller);\n  Parser::attach(parser,0xf9,handleReportVersionCallback + 1,controller);\n  Parser::attach(parser,0xff,handleSystemResetCallback + 1,(void *)0x0);\n  return controller;\n}\n\n",
            "renaming": {
                "FirmataClass": "FirmataController",
                "this": "controller",
                "this_00": "parser",
                "FirmataMarshaller": "Marshaller",
                "FirmataParser": "Parser",
                "firmwareVersionCount": "versionCount",
                "firmwareVersionVector": "versionVector",
                "blinkVersionDisabled": "isBlinkVersionDisabled",
                "staticAnalogCallback": "handleAnalogCallback",
                "staticDigitalCallback": "handleDigitalCallback",
                "staticReportAnalogCallback": "handleReportAnalogCallback",
                "staticReportDigitalCallback": "handleReportDigitalCallback",
                "staticPinModeCallback": "handlePinModeCallback",
                "staticPinValueCallback": "handlePinValueCallback",
                "staticStringCallback": "handleStringCallback",
                "staticSysexCallback": "handleSysexCallback",
                "staticReportFirmwareCallback": "handleReportFirmwareCallback",
                "staticReportVersionCallback": "handleReportVersionCallback",
                "staticSystemResetCallback": "handleSystemResetCallback",
                "FUN_08002ce0": "initialize_firmata_08002ce0"
            },
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "called": [
                "attach",
                "attach",
                "attach",
                "FirmataParser",
                "FirmataMarshaller",
                "attach",
                "attach"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002dbc": {
            "entrypoint": "0x08002dbc",
            "current_name": "initialize_firmata_08002dbc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeFirmata_08002dbc(int initializeFlag,int priority)\n\n{\n  if (initializeFlag != 1) {\n    return;\n  }\n  if (priority == 0xffff) {\n    FirmataClassConstructor(&firmataObject);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002dbc": "initialize_firmata_08002dbc",
                "__initialize_p": "initializeFlag",
                "__priority": "priority",
                "firmata::FirmataClass::FirmataClass": "FirmataClassConstructor",
                "Firmata": "firmataObject"
            },
            "calling": [
                "_GLOBAL__sub_I_Firmata"
            ],
            "called": [
                "FirmataClass"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ddc": {
            "entrypoint": "0x08002ddc",
            "current_name": "send_firmata_version_08002ddc",
            "code": "\n/* DWARF original prototype: void  printVersion(FirmataClass * firmataInstance) */\n\nvoid __firmataInstancecall firmata::FirmataClass::sendFirmataVersion_08002ddc(FirmataClass *firmataInstance)\n\n{\n  FirmataMarshaller::sendVersion(&firmataInstance->firmataMarshaller,'\\x02','\\x05');\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ddc": "send_firmata_version_08002ddc",
                "this": "firmataInstance",
                "marshaller": "firmataMarshaller"
            },
            "calling": [
                "begin",
                "staticReportVersionCallback"
            ],
            "called": [
                "sendVersion"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002dea": {
            "entrypoint": "0x08002dea",
            "current_name": "print_firmata_version_08002dea",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid firmata::FirmataClass::printFirmataVersion_08002dea(void *context)\n\n{\n  if (context != (void *)0x0) {\n    printFirmataVersion_08002dea((FirmataClass *)context);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002dea": "print_firmata_version_08002dea",
                "printVersion": "printFirmataVersion"
            },
            "calling": [],
            "called": [
                "printVersion"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002df6": {
            "entrypoint": "0x08002df6",
            "current_name": "send_firmware_version_if_available_08002df6",
            "code": "\n/* DWARF original prototype: void  printFirmwareVersion(FirmataClass * firmataInstance) */\n\nvoid __firmataInstancecall firmata::FirmataClass::sendFirmwareVersionIfAvailable_08002df6(FirmataClass *firmataInstance)\n\n{\n  uint8_t *currentVersion;\n  \n  if (firmataInstance->count == 0) {\n    return;\n  }\n  currentVersion = firmataInstance->versionVector;\n  sendFirmwareVersion\n            (&firmataInstance->marshaller,*currentVersion,currentVersion[1],firmataInstance->count - 2,currentVersion + 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002df6": "send_firmware_version_if_available_08002df6",
                "this": "firmataInstance",
                "firmwareVersionCount": "count",
                "firmwareVersionVector": "versionVector",
                "puVar1": "currentVersion",
                "FirmataMarshaller::sendFirmwareVersion": "sendFirmwareVersion"
            },
            "calling": [
                "begin",
                "staticReportFirmwareCallback"
            ],
            "called": [
                "sendFirmwareVersion"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e1a": {
            "entrypoint": "0x08002e1a",
            "current_name": "print_firmware_version_if_context_not_null_08002e1a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid firmata::FirmataClass::printFirmwareVersionIfContextNotNull_08002e1a(void *ptrContext,size_t param2,size_t param3,char *param4)\n\n{\n  if (ptrContext != (void *)0x0) {\n    printFirmwareVersion((FirmataClass *)ptrContext);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e1a": "print_firmware_version_if_context_not_null_08002e1a",
                "context": "ptrContext",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [],
            "called": [
                "printFirmwareVersion"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e26": {
            "entrypoint": "0x08002e26",
            "current_name": "initialize_firmata_08002e26",
            "code": "\n/* DWARF original prototype: void  begin(FirmataClastreamstream * firmataInstance, Stream * stream) */\n\nvoid __firmataInstancecall firmata::FirmataClastreamstream::initializeFirmata_08002e26(FirmataClastreamstream *firmataInstance,Stream *stream)\n\n{\n  firmataInstance->stream = stream;\n  marshaller::begin(&firmataInstance->marstreamhaller,stream);\n  printFirmataVersion(firmataInstance);\n  printFirmwareVerstreamion(firmataInstance);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e26": "initialize_firmata_08002e26",
                "this": "firmataInstance",
                "s": "stream",
                "FirmataStream": "stream",
                "FirmataMarshaller": "marshaller",
                "printVersion": "printFirmataVersion"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "printFirmwareVersion",
                "printVersion",
                "begin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e44": {
            "entrypoint": "0x08002e44",
            "current_name": "set_firmware_name_and_version_08002e44",
            "code": "\n/* DWARF original prototype: void  setFirmwareNameAndVersion_08002e44(FirmataClass * firmataInstance, char * fileName, byte\n   majorVersion, byte minorVersion) */\n\nvoid __firmataInstancecall\nfirmata::FirmataClass::setFirmwareNameAndVersion_08002e44(FirmataClass *firmataInstance,char *fileName,byte majorVersion,byte minorVersion)\n\n{\n  byte versionCount;\n  char *extensionPtr;\n  char *extension;\n  char *lastDelimiter;\n  char *firmwareName;\n  byte *firmwareVersionVector;\n  size_t nameLength;\n  \n  extensionPtr = strstr(fileName,\".cpp\");\n  lastDelimiter = strrchr(fileName,0x2f);\n  if (lastDelimiter == (char *)0x0) {\n    lastDelimiter = strrchr(fileName,0x5c);\n  }\n  if (lastDelimiter != (char *)0x0) {\n    fileName = lastDelimiter + 1;\n  }\n  if (extensionPtr == (char *)0x0) {\n    nameLength = strlen(fileName);\n    firmataInstance->firmwareVersionCount = (char)nameLength + '\\x02';\n  }\n  else {\n    firmataInstance->firmwareVersionCount = ((char)extensionPtr - (char)fileName) + '\\x02';\n  }\n  free(firmataInstance->firmwareVersionVector);\n  versionCount = firmataInstance->firmwareVersionCount;\n  firmwareVersionVector = (byte *)malloc(versionCount + 1);\n  firmataInstance->firmwareVersionVector = firmwareVersionVector;\n  firmwareVersionVector[versionCount] = '\\0';\n  *firmwareVersionVector = majorVersion;\n  firmwareVersionVector[1] = minorVersion;\n  strncpy((char *)(firmwareVersionVector + 2),fileName,firmataInstance->firmwareVersionCount - 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e44": "set_firmware_name_and_version_08002e44",
                "this": "firmataInstance",
                "name": "fileName",
                "major": "majorVersion",
                "minor": "minorVersion",
                "pcVar2": "extensionPtr",
                "pcVar3": "lastDelimiter",
                "pbVar4": "firmwareVersionVector",
                "sVar5": "nameLength",
                "bVar1": "versionCount"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "free",
                "strrchr",
                "strncpy",
                "strstr",
                "strlen",
                "malloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ec4": {
            "entrypoint": "0x08002ec4",
            "current_name": "get_available_data_08002ec4",
            "code": "\n/* DWARF original prototype: int  available(FirmataClass * firmataInstance) */\n\nint __firmataInstancecall firmata::FirmataClass::getAvailableData_08002ec4(FirmataClass *firmataInstance)\n\n{\n  int availableData;\n  \n  availableData = (*(firmataInstance->FirmataStream->super_Print)._vptr_Print[2])();\n  return availableData;\n}\n\n",
            "renaming": {
                "FUN_08002ec4": "get_available_data_08002ec4",
                "this": "firmataInstance",
                "iVar1": "availableData"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ed2": {
            "entrypoint": "0x08002ed2",
            "current_name": "process_input_08002ed2",
            "code": "\n/* DWARF original prototype: void  processInput_08002ed2(FirmataClass * instance) */\n\nvoid __instancecall firmata::FirmataClass::processInput_08002ed2(FirmataClass *instance)\n\n{\n  int inputResult;\n  int inputValue;\n  \n  inputResult = (*(instance->FirmataStream->super_Print)._vptr_Print[3])();\n  if (inputResult != -1) {\n    FirmataParser::parse(&instance->parser,(uint8_t)inputResult);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed2": "process_input_08002ed2",
                "this": "instance",
                "iVar1": "inputResult",
                "inputData": "inputValue"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "parse"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ef2": {
            "entrypoint": "0x08002ef2",
            "current_name": "send_analog_data_08002ef2",
            "code": "\n/* DWARF original prototype: void  sendAnalog(FirmataClass * instance, byte analogPin, int analogValue) */\n\nvoid __instancecall firmata::FirmataClass::sendAnalogData_08002ef2(FirmataClass *instance,byte analogPin,int analogValue)\n\n{\n  FirmataMarshaller::sendAnalog(&instance->marshaller,analogPin,(uint16_t)analogValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ef2": "send_analog_data_08002ef2",
                "this": "instance",
                "pin": "analogPin",
                "value": "analogValue"
            },
            "calling": [
                "loop",
                "reportAnalogCallback"
            ],
            "called": [
                "sendAnalog"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002efe": {
            "entrypoint": "0x08002efe",
            "current_name": "send_digital_port_08002efe",
            "code": "\n/* DWARF original prototype: void  sendDigitalPort_08002efe(FirmataClass * firmataObject, byte portNumber, int\n   portData) */\n\nvoid __firmataObjectcall firmata::FirmataClass::sendDigitalPort_08002efe(FirmataClass *firmataObject,byte portNumber,int portData)\n\n{\n  FirmataMarshaller::sendDigitalPort_08002efe(&firmataObject->marshaller,portNumber,(uint16_t)portData);\n  return;\n}\n\n",
            "renaming": {
                "this": "firmataObject",
                "FUN_08002efe": "send_digital_port_08002efe"
            },
            "calling": [
                "outputPort"
            ],
            "called": [
                "sendDigitalPort"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f0a": {
            "entrypoint": "0x08002f0a",
            "current_name": "send_sysex_command_08002f0a",
            "code": "\n/* DWARF original prototype: void  sendSysex(FirmataClass * firmataInstance, byte sysexCommand, byte byteCount, byte *\n   byteValues) */\n\nvoid __firmataInstancecall\nfirmata::FirmataClass::sendSysexCommand_08002f0a(FirmataClass *firmataInstance,byte sysexCommand,byte byteCount,byte *byteValues)\n\n{\n  FirmataMarshaller::sendSysex(&firmataInstance->marshaller,sysexCommand,(uint)byteCount,byteValues);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f0a": "send_sysex_command_08002f0a",
                "this": "firmataInstance",
                "command": "sysexCommand",
                "bytec": "byteCount",
                "bytev": "byteValues"
            },
            "calling": [
                "readAndReportData"
            ],
            "called": [
                "sendSysex"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f14": {
            "entrypoint": "0x08002f14",
            "current_name": "send_string_08002f14",
            "code": "\n/* DWARF original prototype: void  sendString_08002f14(Firmata * firmataInstance, char * inputString) */\n\nvoid __firmataInstancecall firmata::Firmata::sendString_08002f14(Firmata *firmataInstance,char *inputString)\n\n{\n  Marshaller::sendString_08002f14(&firmataInstance->marshaller,inputString);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f14": "send_string_08002f14",
                "FirmataClass": "Firmata",
                "FirmataMarshaller": "Marshaller",
                "this": "firmataInstance",
                "string": "inputString"
            },
            "calling": [
                "setPinModeCallback",
                "readAndReportData",
                "attachServo",
                "sysexCallback"
            ],
            "called": [
                "sendString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f1e": {
            "entrypoint": "0x08002f1e",
            "current_name": "write_data_08002f1e",
            "code": "\n/* DWARF original prototype: void  write(FirmataClass * this, byte c) */\n\nssize_t dataType\nfirmata::FirmataClass::writeData_08002f1e(FirmataClass *this,int fileDescriptor,void *buffer,size_t size)\n\n{\n  int returnValue;\n  \n  returnValue = (**(this->FirmataStream->super_Print)._vptr_Print)();\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08002f1e": "write_data_08002f1e",
                "__thiscall": "dataType",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__n": "size",
                "iVar1": "returnValue"
            },
            "calling": [
                "sysexCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f2c": {
            "entrypoint": "0x08002f2c",
            "current_name": "set_callback_function_08002f2c",
            "code": "\n/* DWARF original prototype: void  attach(FirmataClass * firmataInstance, uint8_t command, callbackFunction\n   callbackFunction) */\n\nvoid __firmataInstancecall\nfirmata::FirmataClass::setCallbackFunction_08002f2c(FirmataClass *firmataInstance,uint8_t command,callbackFunction callbackFunction)\n\n{\n  callbackFunction tempCallback;\n  \n  if (command == 0xd0) {\n    currentReportDigitalCallback = callbackFunction;\n    return;\n  }\n  if (0xd0 < command) {\n    if (command == 0xf4) {\n      currentPinModeCallback = callbackFunction;\n      return;\n    }\n    tempCallback = callbackFunction;\n    if ((command != 0xf5) && (tempCallback = currentPinValueCallback, command == 0xe0)) {\n      currentAnalogCallback = callbackFunction;\n      return;\n    }\n    currentPinValueCallback = tempCallback;\n    return;\n  }\n  if (command == 0x90) {\n    currentDigitalCallback = callbackFunction;\n    return;\n  }\n  if (command != 0xc0) {\n    return;\n  }\n  currentReportAnalogCallback = callbackFunction;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f2c": "set_callback_function_08002f2c",
                "this": "firmataInstance",
                "newFunction": "callbackFunction",
                "p_Var1": "tempCallback"
            },
            "calling": [
                "setup"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f84": {
            "entrypoint": "0x08002f84",
            "current_name": "attach_system_callback_08002f84",
            "code": "\n/* DWARF original prototype: void  attach(FirmataClass * firmataInstance, uint8_t inputCommand,\n   systemCallbackFunction newCallbackFunction) */\n\nvoid __firmataInstancecall\nfirmata::FirmataClass::attachSystemCallback_08002f84(FirmataClass *firmataInstance,uint8_t inputCommand,systemCallbackFunction newCallbackFunction)\n\n{\n  if (inputCommand == 0xff) {\n    currentSystemResetCallback = newCallbackFunction;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f84": "attach_system_callback_08002f84",
                "this": "firmataInstance",
                "command": "inputCommand",
                "newFunction": "newCallbackFunction"
            },
            "calling": [
                "setup"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f94": {
            "entrypoint": "0x08002f94",
            "current_name": "set_sysex_callback_08002f94",
            "code": "\n/* DWARF original prototype: void  attach(FirmataClass * classInstance, uint8_t newCommand,\n   sysexCallbackFunction callbackFunction) */\n\nvoid __classInstancecall\nfirmata::FirmataClass::setSysexCallback_08002f94(FirmataClass *classInstance,uint8_t newCommand,sysexCallbackFunction callbackFunction)\n\n{\n  currentCallback = callbackFunction;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f94": "set_sysex_callback_08002f94",
                "this": "classInstance",
                "command": "newCommand",
                "newFunction": "callbackFunction",
                "currentSysexCallback": "currentCallback"
            },
            "calling": [
                "setup"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fa0": {
            "entrypoint": "0x08002fa0",
            "current_name": "get_pin_mode_08002fa0",
            "code": "\n/* DWARF original prototype: byte  getPinMode_08002fa0(Firmata * firmataInstance, byte pinNumber) */\n\nbyte __firmataInstancecall firmata::Firmata::getPinMode_08002fa0(Firmata *firmataInstance,byte pinNumber)\n\n{\n  return firmataInstance->pinConfiguration[pinNumber];\n}\n\n",
            "renaming": {
                "FUN_08002fa0": "get_pin_mode_08002fa0",
                "FirmataClass": "Firmata",
                "pin": "pinNumber",
                "this": "firmataInstance",
                "pinConfig": "pinConfiguration"
            },
            "calling": [
                "digitalWriteCallback",
                "setPinValueCallback",
                "analogWriteCallback",
                "setPinModeCallback",
                "loop",
                "sysexCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fa8": {
            "entrypoint": "0x08002fa8",
            "current_name": "update_pin_config_08002fa8",
            "code": "\n/* DWARF original prototype: void  setPinMode(FirmataClass * firmataInstance, byte pinNumber, byte configuration) */\n\nvoid __firmataInstancecall firmata::FirmataClass::updatePinConfig_08002fa8(FirmataClass *firmataInstance,byte pinNumber,byte configuration)\n\n{\n  if (firmataInstance->pinConfigurations[pinNumber] != '\\x7f') {\n    firmataInstance->pinConfigurations[pinNumber] = configuration;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fa8": "update_pin_config_08002fa8",
                "this": "firmataInstance",
                "pin": "pinNumber",
                "config": "configuration",
                "pinConfig": "pinConfigurations"
            },
            "calling": [
                "setPinModeCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fba": {
            "entrypoint": "0x08002fba",
            "current_name": "get_pin_state_08002fba",
            "code": "\n/* DWARF original prototype: int  getPinState_08002fba(FirmataClass * firmataObj, byte pinNumber) */\n\nint __firmataObjcall firmata::FirmataClass::getPinState_08002fba(FirmataClass *firmataObj,byte pinNumber)\n\n{\n  return firmataObj->pinStates[pinNumber];\n}\n\n",
            "renaming": {
                "FUN_08002fba": "get_pin_state_08002fba",
                "this": "firmataObj",
                "pin": "pinNumber",
                "pinState": "pinStates"
            },
            "calling": [
                "digitalWriteCallback",
                "sysexCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fc2": {
            "entrypoint": "0x08002fc2",
            "current_name": "set_pin_state_08002fc2",
            "code": "\n/* DWARF original prototype: void  setPinState_08002fc2(FirmataClass * firmataInstance, byte pinNumber, int newState) */\n\nvoid __firmataInstancecall firmata::FirmataClass::setPinState_08002fc2(FirmataClass *firmataInstance,byte pinNumber,int newState)\n\n{\n  firmataInstance->pinNumberState[pinNumber] = newState;\n  return;\n}\n\n",
            "renaming": {
                "this": "firmataInstance",
                "pin": "pinNumber",
                "state": "newState",
                "FUN_08002fc2": "set_pin_state_08002fc2"
            },
            "calling": [
                "digitalWriteCallback",
                "setPinValueCallback",
                "analogWriteCallback",
                "setPinModeCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fca": {
            "entrypoint": "0x08002fca",
            "current_name": "strobe_blink_pin_08002fca",
            "code": "\n/* DWARF original prototype: void  strobeBlinkPin_08002fca(FirmataClass * firmataObj, byte blinkPin, int blinkCount, int\n   blinkOnInterval, int blinkOffInterval) */\n\nvoid __firmataObjcall\nfirmata::FirmataClass::strobeBlinkPin_08002fca(FirmataClass *firmataObj,byte blinkPin,int blinkCount,int blinkOnInterval,int blinkOffInterval)\n\n{\n  uint blinkIndex;\n  \n  for (blinkIndex = 0; (int)blinkIndex < blinkCount; blinkIndex = blinkIndex + 1 & 0xff) {\n    delay(blinkOffInterval);\n    digitalWrite((uint)blinkPin,1);\n    delay(blinkOnInterval);\n    digitalWrite((uint)blinkPin,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fca": "strobe_blink_pin_08002fca",
                "this": "firmataObj",
                "pin": "blinkPin",
                "count": "blinkCount",
                "onInterval": "blinkOnInterval",
                "offInterval": "blinkOffInterval",
                "uVar1": "blinkIndex"
            },
            "calling": [
                "blinkVersion"
            ],
            "called": [
                "digitalWrite",
                "delay"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003002": {
            "entrypoint": "0x08003002",
            "current_name": "blink_version_08003002",
            "code": "\n/* DWARF original prototype: void  blinkVersion_08003002(FirmataClass * firmataInstance) */\n\nvoid __firmataInstancecall firmata::FirmataClass::blinkVersion_08003002(FirmataClass *firmataInstance)\n\n{\n  if (firmataInstance->isBlinkVersionDisabled != false) {\n    return;\n  }\n  pinMode(0xd,1);\n  strobeBlinkPin(firmataInstance,'\\r',2,0x28,0xd2);\n  delay(0xfa);\n  strobeBlinkPin(firmataInstance,'\\r',5,0x28,0xd2);\n  delay(0x7d);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003002": "blink_version_08003002",
                "this": "firmataInstance",
                "blinkVersionDisabled": "isBlinkVersionDisabled"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "strobeBlinkPin",
                "delay",
                "pinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003048": {
            "entrypoint": "0x08003048",
            "current_name": "initialize_serial_communication_08003048",
            "code": "\n/* DWARF original prototype: void  begin(FirmataClass * firmataInstance, long baudRate) */\n\nvoid __firmataInstancecall firmata::FirmataClass::initializeSerialCommunication_08003048(FirmataClass *firmataInstance,long baudRate)\n\n{\n  HardwareSerial::begin(&Serial2,baudRate,'\\x06');\n  blinkVersion(firmataInstance);\n  begin(firmataInstance,&Serial2.super_Stream);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003048": "initialize_serial_communication_08003048",
                "this": "firmataInstance",
                "speed": "baudRate"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "begin",
                "blinkVersion",
                "begin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800306c": {
            "entrypoint": "0x0800306c",
            "current_name": "initialize_static_variables_0800306c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initialize_static_variables_0800306c(void)\n\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800306c": "initialize_static_variables_0800306c"
            },
            "calling": [],
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800307a": {
            "entrypoint": "0x0800307a",
            "current_name": "encode_byte_stream_0800307a",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x08003102 */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: void  encodeByteStream_0800307a(FirmataMarshaller * marshaller, size_t numBytes, uint8_t\n   * byteArray, size_t maxBytes) */\n\nvoid __marshallercall\nfirmata::FirmataMarshaller::encodeByteStream_0800307a(FirmataMarshaller *marshaller,size_t numBytes,uint8_t *byteArray,size_t maxBytes)\n\n{\n  uint8_t currentByte;\n  uint8_t bitCache;\n  uint currentByteValue;\n  uint bitPosition;\n  uint bytePosition;\n  uint byteIndex;\n  \n  currentByteValue = (uint)*byteArray;\n  if (maxBytes == 0) {\n    maxBytes = 0xffffffff;\n  }\n  byteIndex = 0;\n  bitPosition = 0;\n  bytePosition = 0;\n  while ((byteIndex < numBytes && (bytePosition < maxBytes))) {\n    (**(marshaller->stream->super_Print)._vptr_Print)\n              (marshaller->stream,((uint)byteArray[byteIndex] << (bitPosition & 0xff) | currentByteValue) & 0x7f);\n    currentByteValue = (int)(uint)byteArray[byteIndex] >> (7 - bitPosition & 0xff) & 0xff;\n    bitPosition = bitPosition + 1;\n    while ((bytePosition = bytePosition + 1, 6 < bitPosition && (bytePosition < maxBytes))) {\n      (**(marshaller->stream->super_Print)._vptr_Print)(marshaller->stream,currentByteValue & 0x7f);\n      currentByteValue = currentByteValue >> 7;\n      bitPosition = bitPosition - 7;\n    }\n    byteIndex = byteIndex + 1;\n  }\n  if ((bitPosition != 0) && (bytePosition < maxBytes)) {\n    (**(marshaller->stream->super_Print)._vptr_Print)\n              (marshaller->stream,(1 << (bitPosition & 0xff)) - 1U & currentByteValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800307a": "encode_byte_stream_0800307a",
                "this": "marshaller",
                "bytec": "numBytes",
                "bytev": "byteArray",
                "max_bytes": "maxBytes",
                "transmit_byte": "currentByte",
                "outstanding_bit_cache": "bitCache",
                "uVar1": "currentByteValue",
                "uVar2": "bitPosition",
                "uVar3": "bytePosition",
                "uVar4": "byteIndex",
                "FirmataStream": "stream"
            },
            "calling": [
                "sendFirmwareVersion",
                "sendSysex",
                "sendAnalog",
                "sendExtendedAnalog",
                "sendDigitalPort"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003106": {
            "entrypoint": "0x08003106",
            "current_name": "send_extended_analog_data_08003106",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x0800311e */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: void  sendExtendedAnalog(FirmataMarshaller * marshaller, uint8_t analogPin, size_t\n   byteCount, uint8_t * byteValues) */\n\nvoid __marshallercall\nfirmata::FirmataMarshaller::sendExtendedAnalogData_08003106(FirmataMarshaller *marshaller,uint8_t analogPin,size_t byteCount,uint8_t *byteValues)\n\n{\n  if (marshaller->FirmataStream != (Stream *)0x0) {\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller,0xf0);\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller->FirmataStream,0x6f);\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller->FirmataStream,(uint)analogPin);\n    encodeByteData(marshaller,byteCount,byteValues,byteCount);\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller->FirmataStream,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "this": "marshaller",
                "pin": "analogPin",
                "bytec": "byteCount",
                "bytev": "byteValues",
                "encodeByteStream": "encodeByteData",
                "FUN_08003106": "send_extended_analog_data_08003106"
            },
            "calling": [
                "sendAnalog"
            ],
            "called": [
                "encodeByteStream"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800314e": {
            "entrypoint": "0x0800314e",
            "current_name": "initialize_firmata_marshaller_0800314e",
            "code": "\n/* DWARF original prototype: FirmataMarshaller *  FirmataMarshaller(FirmataMarshaller * marshaller) */\n\nFirmataMarshaller * __marshallercall firmata::FirmataMarshaller::initializeFirmataMarshaller_0800314e(FirmataMarshaller *marshaller)\n\n{\n  marshaller->stream = (Stream *)0x0;\n  return marshaller;\n}\n\n",
            "renaming": {
                "FUN_0800314e": "initialize_firmata_marshaller_0800314e",
                "this": "marshaller",
                "FirmataStream": "stream"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003154": {
            "entrypoint": "0x08003154",
            "current_name": "initialize_firmata_marshaller_08003154",
            "code": "\n/* DWARF original prototype: void  begin(Marshaller * this, DataStream * s) */\n\nvoid __thiscall firmata::Marshaller::initializeFirmataMarshaller_08003154(Marshaller *this,DataStream *s)\n\n{\n  this->dataStream = s;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003154": "initialize_firmata_marshaller_08003154",
                "FirmataMarshaller": "Marshaller",
                "Stream": "DataStream",
                "FirmataStream": "dataStream"
            },
            "calling": [
                "begin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003158": {
            "entrypoint": "0x08003158",
            "current_name": "send_analog_data_08003158",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x0800318c */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: void  sendAnalog(FirmataMarshaller * marshaller, uint8_t pinNumber, uint16_t analogValue)\n    */\n\nvoid __marshallercall\nfirmata::FirmataMarshaller::sendAnalogData_08003158(FirmataMarshaller *marshaller,uint8_t pinNumber,uint16_t analogValue)\n\n{\n  uint16_t encodedValue;\n  \n  if (marshaller->FirmataStream != (Stream *)0x0) {\n    encodedValue = analogValue;\n    if ((pinNumber < 0x10) && (analogValue < 0x4000)) {\n      (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller,pinNumber | 0xe0);\n      encodeByteStream(marshaller,2,(uint8_t *)&encodedValue,2);\n    }\n    else {\n      sendExtendedAnalog(marshaller,pinNumber,2,(uint8_t *)&encodedValue);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003158": "send_analog_data_08003158",
                "this": "marshaller",
                "pin": "pinNumber",
                "value": "analogValue",
                "local_a": "encodedValue"
            },
            "calling": [
                "sendAnalog"
            ],
            "called": [
                "sendExtendedAnalog",
                "encodeByteStream"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800319e": {
            "entrypoint": "0x0800319e",
            "current_name": "send_digital_port_0800319e",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x080031ba */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: void  sendDigitalPort_0800319e(FirmataMarshaller * marshaller, uint8_t portNum,\n   uint16_t data) */\n\nvoid __marshallercall\nfirmata::FirmataMarshaller::sendDigitalPort_0800319e(FirmataMarshaller *marshaller,uint8_t portNum,uint16_t data)\n\n{\n  uint16_t encodedData;\n  \n  if (marshaller->FirmataStream != (Stream *)0x0) {\n    encodedData = data;\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller,portNum & 0xf | 0x90);\n    encodeByteStream(marshaller,2,(uint8_t *)&encodedData,2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800319e": "send_digital_port_0800319e",
                "this": "marshaller",
                "portNumber": "portNum",
                "portData": "data",
                "local_a": "encodedData"
            },
            "calling": [
                "sendDigitalPort"
            ],
            "called": [
                "encodeByteStream"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080031ce": {
            "entrypoint": "0x080031ce",
            "current_name": "send_firmware_version_080031ce",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x080031e8 */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: void  sendFirmwareVersion_080031ce(FirmataMarshaller * marshaller, uint8_t firmwareMajor,\n   uint8_t firmwareMinor, size_t byteCount, uint8_t * byteValue) */\n\nvoid __marshallercall\nfirmata::FirmataMarshaller::sendFirmwareVersion_080031ce(FirmataMarshaller *marshaller,uint8_t firmwareMajor,uint8_t firmwareMinor,size_t byteCount,uint8_t *byteValue)\n\n{\n  _func_int_varargs *printFunc;\n  uint index;\n  \n  if (marshaller->FirmataStream != (Stream *)0x0) {\n    printFunc = *(marshaller->FirmataStream->super_Print)._vptr_Print;\n    (*printFunc)(marshaller,0xf0,(uint)firmwareMinor,printFunc,byteCount);\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller->FirmataStream,0x79);\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller->FirmataStream,(uint)firmwareMajor);\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller->FirmataStream,(uint)firmwareMinor);\n    for (index = 0; index < byteCount; index = index + 1) {\n      encodeByteStream(marshaller,1,byteValue + index,0);\n    }\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller->FirmataStream,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080031ce": "send_firmware_version_080031ce",
                "this": "marshaller",
                "major": "firmwareMajor",
                "minor": "firmwareMinor",
                "bytec": "byteCount",
                "bytev": "byteValue",
                "p_Var1": "printFunc",
                "uVar2": "index"
            },
            "calling": [
                "printFirmwareVersion"
            ],
            "called": [
                "encodeByteStream"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800322c": {
            "entrypoint": "0x0800322c",
            "current_name": "send_version_0800322c",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x08003240 */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: void  sendVersion_0800322c(FirmataMarshaller * marshaller, uint8_t majorVersion, uint8_t\n   minorVersion) */\n\nvoid __marshallercall\nfirmata::FirmataMarshaller::sendVersion_0800322c(FirmataMarshaller *marshaller,uint8_t majorVersion,uint8_t minorVersion)\n\n{\n  if (marshaller->FirmataStream != (Stream *)0x0) {\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller,0xf9);\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller->FirmataStream,(uint)majorVersion);\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller->FirmataStream,(uint)minorVersion);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "this": "marshaller",
                "major": "majorVersion",
                "minor": "minorVersion",
                "FUN_0800322c": "send_version_0800322c"
            },
            "calling": [
                "printVersion"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800325a": {
            "entrypoint": "0x0800325a",
            "current_name": "send_sysex_0800325a",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x08003272 */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: void  sendSysex_0800325a(FirmataMarshaller * marshaller, uint8_t sysexCommand, size_t\n   numBytes, uint8_t * byteArray) */\n\nvoid __marshallercall\nfirmata::FirmataMarshaller::sendSysex_0800325a(FirmataMarshaller *marshaller,uint8_t sysexCommand,size_t numBytes,uint8_t *byteArray)\n\n{\n  uint index;\n  \n  if (marshaller->FirmataStream != (Stream *)0x0) {\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller,0xf0);\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller->FirmataStream,(uint)sysexCommand);\n    for (index = 0; index < numBytes; index = index + 1) {\n      encodeByteStream(marshaller,1,byteArray + index,0);\n    }\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller->FirmataStream,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800325a": "send_sysex_0800325a",
                "this": "marshaller",
                "command": "sysexCommand",
                "bytec": "numBytes",
                "bytev": "byteArray",
                "uVar1": "index"
            },
            "calling": [
                "sendSysex",
                "sendString"
            ],
            "called": [
                "encodeByteStream"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032a2": {
            "entrypoint": "0x080032a2",
            "current_name": "send_string_080032a2",
            "code": "\n/* DWARF original prototype: void  sendString_080032a2(FirmataMarshaller * marshaller, char * inputString) */\n\nvoid __marshallercall firmata::FirmataMarshaller::sendString_080032a2(FirmataMarshaller *marshaller,char *inputString)\n\n{\n  size_t stringLength;\n  \n  stringLength = strlen(inputString);\n  sendSysex(marshaller,'q',stringLength,(uint8_t *)inputString);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080032a2": "send_string_080032a2",
                "this": "marshaller",
                "string": "inputString",
                "bytec": "stringLength"
            },
            "calling": [
                "sendString"
            ],
            "called": [
                "sendSysex",
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032bc": {
            "entrypoint": "0x080032bc",
            "current_name": "initialize_firmata_parser_080032bc",
            "code": "\n/* DWARF original prototype: ImprovedFirmataParser *  ImprovedFirmataParser(ImprovedFirmataParser * parser, uint8_t *\n   buffer, size_t bufferSize) */\n\nImprovedFirmataParser * __parsercall\nfirmata::ImprovedFirmataParser::initializeFirmataParser_080032bc(ImprovedFirmataParser *parser,uint8_t *buffer,size_t bufferSize)\n\n{\n  parser->buffer = buffer;\n  parser->bufferSize = bufferSize;\n  parser->multiByteCommand = '\\0';\n  parser->multiByteChannel = '\\0';\n  parser->waitForData = 0;\n  parser->isParsingSysex = false;\n  parser->sysexBytesRead = 0;\n  parser->analogCallbackContext = (void *)0x0;\n  parser->digitalCallbackContext = (void *)0x0;\n  parser->reportAnalogCallbackContext = (void *)0x0;\n  parser->reportDigitalCallbackContext = (void *)0x0;\n  parser->pinModeCallbackContext = (void *)0x0;\n  parser->pinValueCallbackContext = (void *)0x0;\n  parser->reportFirmwareCallbackContext = (void *)0x0;\n  parser->reportVersionCallbackContext = (void *)0x0;\n  parser->dataBufferOverflowCallbackContext = (void *)0x0;\n  parser->stringCallbackContext = (void *)0x0;\n  parser->sysexCallbackContext = (void *)0x0;\n  parser->systemResetCallbackContext = (void *)0x0;\n  parser->analogCallback = (callbackFunction)0x0;\n  parser->digitalCallback = (callbackFunction)0x0;\n  parser->reportAnalogCallback = (callbackFunction)0x0;\n  parser->reportDigitalCallback = (callbackFunction)0x0;\n  parser->pinModeCallback = (callbackFunction)0x0;\n  parser->pinValueCallback = (callbackFunction)0x0;\n  parser->dataBufferOverflowCallback = (bufferOverflowCallbackFunction)0x0;\n  parser->stringCallback = (stringCallbackFunction)0x0;\n  parser->sysexCallback = (sysexCallbackFunction)0x0;\n  parser->reportFirmwareCallback = (versionCallbackFunction)0x0;\n  parser->reportVersionCallback = (systemCallbackFunction)0x0;\n  parser->systemResetCallback = (systemCallbackFunction)0x0;\n  parser->canUpdateBuffer = buffer == (uint8_t *)0x0;\n  return parser;\n}\n\n",
            "renaming": {
                "FirmataParser": "ImprovedFirmataParser",
                "FUN_080032bc": "initialize_firmata_parser_080032bc",
                "this": "parser",
                "dataBuffer": "buffer",
                "dataBufferSize": "bufferSize",
                "executeMultiByteCommand": "multiByteCommand",
                "parsingSysex": "isParsingSysex",
                "currentAnalogCallbackContext": "analogCallbackContext",
                "currentDigitalCallbackContext": "digitalCallbackContext",
                "currentReportAnalogCallbackContext": "reportAnalogCallbackContext",
                "currentReportDigitalCallbackContext": "reportDigitalCallbackContext",
                "currentPinModeCallbackContext": "pinModeCallbackContext",
                "currentPinValueCallbackContext": "pinValueCallbackContext",
                "currentReportFirmwareCallbackContext": "reportFirmwareCallbackContext",
                "currentReportVersionCallbackContext": "reportVersionCallbackContext",
                "currentDataBufferOverflowCallbackContext": "dataBufferOverflowCallbackContext",
                "currentStringCallbackContext": "stringCallbackContext",
                "currentSysexCallbackContext": "sysexCallbackContext",
                "currentSystemResetCallbackContext": "systemResetCallbackContext",
                "currentAnalogCallback": "analogCallback",
                "currentDigitalCallback": "digitalCallback",
                "currentReportAnalogCallback": "reportAnalogCallback",
                "currentReportDigitalCallback": "reportDigitalCallback",
                "currentPinModeCallback": "pinModeCallback",
                "currentPinValueCallback": "pinValueCallback",
                "currentDataBufferOverflowCallback": "dataBufferOverflowCallback",
                "currentStringCallback": "stringCallback",
                "currentSysexCallback": "sysexCallback",
                "currentReportFirmwareCallback": "reportFirmwareCallback",
                "currentReportVersionCallback": "reportVersionCallback",
                "currentSystemResetCallback": "systemResetCallback",
                "allowBufferUpdate": "canUpdateBuffer"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003306": {
            "entrypoint": "0x08003306",
            "current_name": "attach_callbacks_08003306",
            "code": "\n/* DWARF original prototype: void  attach(FirmataParser * parser, uint8_t cmd, callbackFunction\n   callback, void * ctx) */\n\nvoid __parsercall\nfirmata::FirmataParser::attachCallbacks_08003306(FirmataParser *parser,uint8_t cmd,callbackFunction callback,void *ctx)\n\n{\n  if (cmd == 0xd0) {\n    parser->reportDigitalCallback = callback;\n    parser->reportDigitalCallbackContext = ctx;\n    return;\n  }\n  if (0xd0 < cmd) {\n    if (cmd == 0xf4) {\n      parser->pinModeCallback = callback;\n      parser->pinModeCallbackContext = ctx;\n      return;\n    }\n    if (cmd == 0xf5) {\n      parser->pinValueCallback = callback;\n      parser->pinValueCallbackContext = ctx;\n    }\n    else if (cmd == 0xe0) {\n      parser->analogCallback = callback;\n      parser->analogCallbackContext = ctx;\n      return;\n    }\n    return;\n  }\n  if (cmd == 0x90) {\n    parser->digitalCallback = callback;\n    parser->digitalCallbackContext = ctx;\n    return;\n  }\n  if (cmd == 0xc0) {\n    parser->reportAnalogCallback = callback;\n    parser->reportAnalogCallbackContext = ctx;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003306": "attach_callbacks_08003306",
                "this": "parser",
                "command": "cmd",
                "newFunction": "callback",
                "context": "ctx",
                "currentReportDigitalCallback": "reportDigitalCallback",
                "currentReportDigitalCallbackContext": "reportDigitalCallbackContext",
                "currentPinModeCallback": "pinModeCallback",
                "currentPinModeCallbackContext": "pinModeCallbackContext",
                "currentPinValueCallback": "pinValueCallback",
                "currentPinValueCallbackContext": "pinValueCallbackContext",
                "currentAnalogCallback": "analogCallback",
                "currentAnalogCallbackContext": "analogCallbackContext",
                "currentDigitalCallback": "digitalCallback",
                "currentDigitalCallbackContext": "digitalCallbackContext",
                "currentReportAnalogCallback": "reportAnalogCallback",
                "currentReportAnalogCallbackContext": "reportAnalogCallbackContext"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003346": {
            "entrypoint": "0x08003346",
            "current_name": "attach_firmata_parser_08003346",
            "code": "\n/* DWARF original prototype: void  attach(FirmataParser * firmataParser, uint8_t cmd,\n   versionCallbackFunction callback, void * ctx) */\n\nvoid __firmataParsercall\nfirmata::FirmataParser::attachFirmataParser_08003346(FirmataParser *firmataParser,uint8_t cmd,versionCallbackFunction callback,void *ctx)\n\n{\n  if (cmd == 'y') {\n    firmataParser->currentReportFirmwareCallback = callback;\n    firmataParser->currentReportFirmwareCallbackContext = ctx;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003346": "attach_firmata_parser_08003346",
                "this": "firmataParser",
                "command": "cmd",
                "newFunction": "callback",
                "context": "ctx"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003350": {
            "entrypoint": "0x08003350",
            "current_name": "update_callback_08003350",
            "code": "\n/* DWARF original prototype: void  attach(FirmataParser * parser, uint8_t cmd,\n   systemCallbackFunction callback, void * ctx) */\n\nvoid __parsercall\nfirmata::FirmataParser::updateCallback_08003350(FirmataParser *parser,uint8_t cmd,systemCallbackFunction callback,void *ctx)\n\n{\n  if (cmd == 0xf9) {\n    parser->currentReportVersionCallback = callback;\n    parser->currentReportVersionCallbackContext = ctx;\n    return;\n  }\n  if (cmd != 0xff) {\n    return;\n  }\n  parser->currentSystemResetCallback = callback;\n  parser->currentSystemResetCallbackContext = ctx;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003350": "update_callback_08003350",
                "this": "parser",
                "command": "cmd",
                "newFunction": "callback",
                "context": "ctx"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003366": {
            "entrypoint": "0x08003366",
            "current_name": "set_string_callback_08003366",
            "code": "\n/* DWARF original prototype: void  attach(FirmataParser * parser, uint8_t cmd,\n   stringCallbackFunction callback, void * ctx) */\n\nvoid __parsercall\nfirmata::FirmataParser::setStringCallback_08003366(FirmataParser *parser,uint8_t cmd,stringCallbackFunction callback,void *ctx)\n\n{\n  if (cmd == 'q') {\n    parser->currentStringCallback = callback;\n    parser->currentStringCallbackContext = ctx;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003366": "set_string_callback_08003366",
                "this": "parser",
                "command": "cmd",
                "newFunction": "callback",
                "context": "ctx"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003370": {
            "entrypoint": "0x08003370",
            "current_name": "attach_08003370",
            "code": "\n/* DWARF original prototype: void  attach_08003370(FirmataParser * parser, uint8_t command,\n   sysexCallbackFunction callbackFunction, void * callbackContext) */\n\nvoid __parsercall\nfirmata::FirmataParser::attach_08003370(FirmataParser *parser,uint8_t command,sysexCallbackFunction callbackFunction,void *callbackContext)\n\n{\n  parser->currentSysexCallback = callbackFunction;\n  parser->currentSysexCallbackContext = callbackContext;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003370": "attach_08003370",
                "this": "parser",
                "newFunction": "callbackFunction",
                "context": "callbackContext"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003376": {
            "entrypoint": "0x08003376",
            "current_name": "buffer_data_at_position_08003376",
            "code": "\n/* DWARF original prototype: bool  bufferDataAtPosition_08003376(FirmataParser * parser, uint8_t newData, size_t\n   position) */\n\nbool __parsercall firmata::FirmataParser::bufferDataAtPosition_08003376(FirmataParser *parser,uint8_t newData,size_t position)\n\n{\n  bool isOverflow;\n  bool hasBufferOverflow;\n  \n  if (position < parser->bufferSize) {\n    isOverflow = false;\n  }\n  else {\n    isOverflow = true;\n    if (parser->bufferOverflowCallback != (bufferOverflowCallbackFunction)0x0) {\n      parser->updateAllowed = true;\n      (*parser->bufferOverflowCallback)(parser->bufferOverflowCallbackContext);\n      if (position < parser->bufferSize) {\n        isOverflow = false;\n      }\n      else {\n        isOverflow = true;\n      }\n    }\n  }\n  if (!isOverflow) {\n    parser->buffer[position] = newData;\n  }\n  return isOverflow;\n}\n\n",
            "renaming": {
                "FUN_08003376": "buffer_data_at_position_08003376",
                "this": "parser",
                "data": "newData",
                "pos": "position",
                "bVar1": "isOverflow",
                "bufferOverflow": "hasBufferOverflow",
                "dataBufferSize": "bufferSize",
                "currentDataBufferOverflowCallback": "bufferOverflowCallback",
                "allowBufferUpdate": "updateAllowed",
                "currentDataBufferOverflowCallbackContext": "bufferOverflowCallbackContext",
                "dataBuffer": "buffer"
            },
            "calling": [
                "processSysexMessage",
                "parse"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033a8": {
            "entrypoint": "0x080033a8",
            "current_name": "decode_byte_stream_080033a8",
            "code": "\n/* DWARF original prototype: size_t  decodeByteStream_080033a8(FirmataParser * parser, size_t byteCount, uint8_t *\n   byteArray) */\n\nsize_t __parsercall\nfirmata::FirmataParser::decodeByteStream_080033a8(FirmataParser *parser,size_t byteCount,uint8_t *byteArray)\n\n{\n  byte currentByte;\n  size_t currentIndex;\n  uint loopIndex;\n  \n  currentIndex = 0;\n  for (loopIndex = 0; loopIndex < byteCount; loopIndex = loopIndex + 2) {\n    currentByte = byteArray[loopIndex];\n    byteArray[currentIndex] = currentByte;\n    byteArray[currentIndex] = byteArray[loopIndex + 1] << 7 | currentByte;\n    currentIndex = currentIndex + 1;\n  }\n  return currentIndex;\n}\n\n",
            "renaming": {
                "FUN_080033a8": "decode_byte_stream_080033a8",
                "this": "parser",
                "bytec": "byteCount",
                "bytev": "byteArray",
                "bVar1": "currentByte",
                "sVar2": "currentIndex",
                "uVar3": "loopIndex"
            },
            "calling": [
                "processSysexMessage"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033cc": {
            "entrypoint": "0x080033cc",
            "current_name": "process_sysex_message_080033cc",
            "code": "\n/* DWARF original prototype: void  processSysexMessage_080033cc(FirmataParser * parser) */\n\nvoid __parsercall firmata::FirmataParser::processSysexMessage_080033cc(FirmataParser *parser)\n\n{\n  uint8_t firstChar;\n  size_t streamLength;\n  uint8_t *dataBuffer;\n  \n  dataBuffer = parser->dataBuffer;\n  firstChar = *dataBuffer;\n  if (firstChar == 'q') {\n    if (parser->currentStringCallback != (stringCallbackFunction)0x0) {\n      streamLength = decodeByteStream(parser,parser->sysexBytesRead - 1,dataBuffer + 1);\n      bufferDataAtPosition(parser,'\\0',streamLength + 1);\n      (*parser->currentStringCallback)\n                (parser->currentStringCallbackContext,(char *)(parser->dataBuffer + 1));\n      return;\n    }\n  }\n  else if (firstChar == 'y') {\n    if (parser->currentReportFirmwareCallback != (versionCallbackFunction)0x0) {\n      if (parser->sysexBytesRead < 3) {\n        (*parser->currentReportFirmwareCallback)\n                  (parser->currentReportFirmwareCallbackContext,0,0,(char *)0x0);\n        return;\n      }\n      streamLength = decodeByteStream(parser,parser->sysexBytesRead - 3,dataBuffer + 3);\n      bufferDataAtPosition(parser,'\\0',streamLength + 3);\n      dataBuffer = parser->dataBuffer;\n      (*parser->currentReportFirmwareCallback)\n                (parser->currentReportFirmwareCallbackContext,(uint)dataBuffer[1],(uint)dataBuffer[2],\n                 (char *)(dataBuffer + 3));\n      return;\n    }\n  }\n  else if (parser->currentSysexCallback != (sysexCallbackFunction)0x0) {\n    (*parser->currentSysexCallback)\n              (parser->currentSysexCallbackContext,firstChar,parser->sysexBytesRead - 1,dataBuffer + 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "this": "parser",
                "uVar1": "firstChar",
                "sVar2": "streamLength",
                "puVar3": "dataBuffer",
                "FUN_080033cc": "process_sysex_message_080033cc"
            },
            "calling": [
                "parse"
            ],
            "called": [
                "decodeByteStream",
                "bufferDataAtPosition"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800344a": {
            "entrypoint": "0x0800344a",
            "current_name": "reset_firmata_parser_0800344a",
            "code": "\n/* DWARF orindexgindexnal prototype: voindexd  systemReset(FindexrmataParser * parser) */\n\nvoindexd __parsercall findexrmata::FindexrmataParser::resetFirmataParser_0800344a(FindexrmataParser *parser)\n\n{\n  sindexze_t index;\n  \n  parser->isWaitingForData = 0;\n  parser->currentCommand = '\\0';\n  parser->currentChannel = '\\0';\n  for (index = 0; index < parser->bufferSize; index = index + 1) {\n    parser->buffer[index] = '\\0';\n  }\n  parser->isParsingSysex = false;\n  parser->readSysexBytes = 0;\n  indexf (parser->resetCallback != (CallbackFunction)0x0) {\n    (*parser->resetCallback)(parser->resetCallbackContext);\n  }\n  return;\n}\n\n",
            "renaming": {
                "this": "parser",
                "i": "index",
                "waitForData": "isWaitingForData",
                "executeMultiByteCommand": "currentCommand",
                "multiByteChannel": "currentChannel",
                "dataBufferSize": "bufferSize",
                "dataBuffer": "buffer",
                "parsingSysex": "isParsingSysex",
                "sysexBytesRead": "readSysexBytes",
                "currentSystemResetCallback": "resetCallback",
                "systemCallbackFunction": "CallbackFunction",
                "currentSystemResetCallbackContext": "resetCallbackContext",
                "FUN_0800344a": "reset_firmata_parser_0800344a"
            },
            "calling": [
                "parse"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003474": {
            "entrypoint": "0x08003474",
            "current_name": "parse_firmata_08003474",
            "code": "\n/* DWARF original prototype: void  parse(FirmataParser * parser, uint8_t data) */\n\nvoid __parsercall firmata::FirmataParser::parseFirmata_08003474(FirmataParser *parser,uint8_t data)\n\n{\n  byte byteValue;\n  uint inputValue;\n  size_t position;\n  \n  inputValue = (uint)data;\n  if (parser->parsingSysex != false) {\n    if (inputValue != 0xf7) {\n      bufferDataAtPosition(parser,data,parser->sysexBytesRead);\n      parser->sysexBytesRead = parser->sysexBytesRead + 1;\n      return;\n    }\n    parser->parsingSysex = false;\n    processSysexMessage(parser);\n    return;\n  }\n  if ((parser->waitForData == 0) || (0x7f < inputValue)) {\n    if (inputValue < 0xf0) {\n      parser->multiByteChannel = data & 0xf;\n      inputValue = inputValue & 0xf0;\n    }\n    if (inputValue == 0xf0) {\n      parser->parsingSysex = true;\n      parser->sysexBytesRead = 0;\n      return;\n    }\n    if (inputValue < 0xf1) {\n      if (inputValue != 0xc0) {\n        if (inputValue < 0xc1) {\n          if (inputValue != 0x90) {\n            return;\n          }\n        }\n        else {\n          if (inputValue == 0xd0) goto LAB_0800359c;\n          if (inputValue != 0xe0) {\n            return;\n          }\n        }\nLAB_08003586:\n        parser->waitForData = 2;\n        parser->executeMultiByteCommand = (uint8_t)inputValue;\n        return;\n      }\nLAB_0800359c:\n      parser->waitForData = 1;\n      parser->executeMultiByteCommand = (uint8_t)inputValue;\n      return;\n    }\n    if (inputValue != 0xf9) {\n      if (0xf9 < inputValue) {\n        if (inputValue == 0xff) {\n          systemReset(parser);\n          return;\n        }\n        return;\n      }\n      if (1 < inputValue - 0xf4) {\n        return;\n      }\n      goto LAB_08003586;\n    }\n    if (parser->currentReportVersionCallback != (systemCallbackFunction)0x0) {\n      (*parser->currentReportVersionCallback)(parser->currentReportVersionCallbackContext);\n    }\n  }\n  else {\n    position = parser->waitForData - 1;\n    parser->waitForData = position;\n    bufferDataAtPosition(parser,data,position);\n    if ((parser->waitForData == 0) && (byteValue = parser->executeMultiByteCommand, byteValue != 0)) {\n      if (byteValue == 0xd0) {\n        if (parser->currentReportDigitalCallback != (callbackFunction)0x0) {\n          (*parser->currentReportDigitalCallback)\n                    (parser->currentReportDigitalCallbackContext,parser->multiByteChannel,\n                     (uint16_t)*parser->dataBuffer);\n        }\n      }\n      else if (byteValue < 0xd1) {\n        if (byteValue == 0x90) {\n          if (parser->currentDigitalCallback != (callbackFunction)0x0) {\n            (*parser->currentDigitalCallback)\n                      (parser->currentDigitalCallbackContext,parser->multiByteChannel,\n                       (ushort)parser->dataBuffer[1] + (ushort)*parser->dataBuffer * 0x80);\n          }\n        }\n        else if ((byteValue == 0xc0) && (parser->currentReportAnalogCallback != (callbackFunction)0x0)) {\n          (*parser->currentReportAnalogCallback)\n                    (parser->currentReportAnalogCallbackContext,parser->multiByteChannel,\n                     (uint16_t)*parser->dataBuffer);\n        }\n      }\n      else if (byteValue == 0xf4) {\n        if (parser->currentPinModeCallback != (callbackFunction)0x0) {\n          (*parser->currentPinModeCallback)\n                    (parser->currentPinModeCallbackContext,parser->dataBuffer[1],\n                     (uint16_t)*parser->dataBuffer);\n        }\n      }\n      else if (byteValue == 0xf5) {\n        if (parser->currentPinValueCallback != (callbackFunction)0x0) {\n          (*parser->currentPinValueCallback)\n                    (parser->currentPinValueCallbackContext,parser->dataBuffer[1],\n                     (uint16_t)*parser->dataBuffer);\n        }\n      }\n      else if ((byteValue == 0xe0) && (parser->currentAnalogCallback != (callbackFunction)0x0)) {\n        (*parser->currentAnalogCallback)\n                  (parser->currentAnalogCallbackContext,parser->multiByteChannel,\n                   (ushort)parser->dataBuffer[1] + (ushort)*parser->dataBuffer * 0x80);\n      }\n      parser->executeMultiByteCommand = '\\0';\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003474": "parse_firmata_08003474",
                "this": "parser",
                "inputData": "data",
                "bVar1": "byteValue",
                "uVar2": "inputValue",
                "pos": "position"
            },
            "calling": [
                "processInput"
            ],
            "called": [
                "processSysexMessage",
                "systemReset",
                "bufferDataAtPosition"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035b8": {
            "entrypoint": "0x080035b8",
            "current_name": "initialize_system_clock_080035b8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeSystemClock_080035b8(void)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t hclkFrequency;\n  PeriphClkInit PeriphClkInit;\n  ClkInitStruct RCC_ClkInitStruct;\n  OscInitStruct RCC_OscInitStruct;\n  \n  RCC_OscInitStruct.OscillatorType = 2;\n  RCC_OscInitStruct.HSIState = 1;\n  RCC_OscInitStruct.HSICalibrationValue = 0x10;\n  RCC_OscInitStruct.PLL.PLLState = 2;\n  RCC_OscInitStruct.PLL.PLLSource = 0;\n  RCC_OscInitStruct.PLL.PLLMUL = 0x380000;\n  status = HAL_RCC_OscConfig((OscInitStruct_conflict *)&RCC_OscInitStruct);\n  if (status != HAL_OK) {\n    _Error_Handler(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                   ,0x88);\n  }\n  RCC_ClkInitStruct.ClockType = 0xf;\n  RCC_ClkInitStruct.SYSCLKSource = 2;\n  RCC_ClkInitStruct.AHBCLKDivider = 0;\n  RCC_ClkInitStruct.APB1CLKDivider = 0x400;\n  RCC_ClkInitStruct.APB2CLKDivider = 0;\n  status = HAL_RCC_ClockConfig((ClkInitStruct_conflict *)&RCC_ClkInitStruct,2);\n  if (status != HAL_OK) {\n    _Error_Handler(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                   ,0x95);\n  }\n  PeriphClkInit.PeriphClockSelection = 2;\n  PeriphClkInit.AdcClockSelection = 0x8000;\n  status = HAL_RCCEx_PeriphCLKConfig((PeriphClkInit_conflict *)&PeriphClkInit);\n  if (status != HAL_OK) {\n    _Error_Handler(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                   ,0x9c);\n  }\n  hclkFrequency = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config(hclkFrequency / 1000);\n  HAL_SYSTICK_CLKSourceConfig(4);\n  HAL_NVIC_SetPriority(SysTick_IRQn,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035b8": "initialize_system_clock_080035b8",
                "HVar1": "status",
                "uVar2": "hclkFrequency",
                "RCC_PeriphCLKInitTypeDef": "PeriphClkInit",
                "RCC_ClkInitTypeDef": "ClkInitStruct",
                "RCC_OscInitTypeDef": "OscInitStruct"
            },
            "calling": [
                "hw_config_init"
            ],
            "called": [
                "HAL_SYSTICK_CLKSourceConfig",
                "HAL_RCC_OscConfig",
                "HAL_RCC_GetHCLKFreq",
                "HAL_RCCEx_PeriphCLKConfig",
                "_Error_Handler",
                "HAL_NVIC_SetPriority",
                "HAL_SYSTICK_Config",
                "HAL_RCC_ClockConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003658": {
            "entrypoint": "0x08003658",
            "current_name": "initialize_system_08003658",
            "code": "\nvoid initializeSystem_08003658(void)\n\n{\n  int index;\n  undefined4 *ptr;\n  code *jumptable;\n  \n  for (index = 0; (undefined4 *)(index + 0x20000000) < &completed_8667; index = index + 4) {\n    *(undefined4 *)(index + 0x20000000) = *(undefined4 *)(&_sidata + index);\n  }\n  for (ptr = &completed_8667; ptr < &_ebss; ptr = ptr + 1) {\n    *ptr = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  jumptable = (code *)0x800368a;\n  main();\n                    /* WARNING: Could not recover jumptable at 0x0800368a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumptable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003658": "initialize_system_08003658",
                "iVar1": "index",
                "puVar2": "ptr",
                "UNRECOVERED_JUMPTABLE": "jumptable"
            },
            "calling": [],
            "called": [
                "main",
                "SystemInit",
                "__libc_init_array"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036a0": {
            "entrypoint": "0x080036a0",
            "current_name": "infinite_loop_080036a0",
            "code": "\nvoid infiniteLoop_080036a0(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080036a0": "infinite_loop_080036a0"
            },
            "calling": [
                "USB_HP_CAN1_TX_IRQHandler"
            ],
            "called": [
                "USB_HP_CAN1_TX_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036a2": {
            "entrypoint": "0x080036a2",
            "current_name": "initialize_hardware_config_080036a2",
            "code": "\nint initializeHardwareConfig_080036a2(EVP_PKEY_CTX *context)\n\n{\n  hw_config_init();\n  return (int)context;\n}\n\n",
            "renaming": {
                "FUN_080036a2": "initialize_hardware_config_080036a2",
                "ctx": "context"
            },
            "calling": [
                "premain"
            ],
            "called": [
                "hw_config_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036ac": {
            "entrypoint": "0x080036ac",
            "current_name": "pin_status_080036ac",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t pinStatus_080036ac(PinName_conflict pin)\n\n{\n  uint32_t index;\n  \n  if ((uint)((int)pin << 0x18) >> 0x1c < 5) {\n    for (index = 0; (index < 0x3c && ((int)pin != (int)(char)(&digitalPin)[index])); index = index + 1\n        ) {\n    }\n  }\n  else {\n    index = 0xffffffff;\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_080036ac": "pin_status_080036ac",
                "p": "pin",
                "uVar1": "index"
            },
            "calling": [
                "digitalWriteCallback",
                "setPinValueCallback",
                "analogWriteCallback",
                "systemResetCallback",
                "setPinModeCallback",
                "checkDigitalInputs",
                "loop",
                "reportDigitalCallback",
                "enableI2CPins",
                "sysexCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036d4": {
            "entrypoint": "0x080036d4",
            "current_name": "FUNC_080036d4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_080036d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036d4": "FUNC_080036d4"
            },
            "calling": [
                "HAL_Init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080036d8": {
            "entrypoint": "0x080036d8",
            "current_name": "initialize_tick_080036d8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict initializeTick_080036d8(uint32_t priority)\n\n{\n  uint32_t configResult;\n  \n  configResult = HAL_SYSTICK_Config((uint32_t)((ulonglong)SystemCoreClock / (1000 / (ulonglong)uwTickFreq))\n                            );\n  if (configResult != 0) {\n    return HAL_ERROR;\n  }\n  if (0xf < priority) {\n    return HAL_ERROR;\n  }\n  HAL_NVIC_SetPriority(SysTick_IRQn,priority,0);\n  uwTickPrio = priority;\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_080036d8": "initialize_tick_080036d8",
                "TickPriority": "priority",
                "uVar1": "configResult"
            },
            "calling": [
                "HAL_Init",
                "HAL_RCC_ClockConfig"
            ],
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_SYSTICK_Config"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003724": {
            "entrypoint": "0x08003724",
            "current_name": "configure_hal_08003724",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nHAL_Status configure_HAL_08003724(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  set_priority_group(3);\n  initialize_tick(0xf);\n  initialize_Msp();\n  return HAL_success;\n}\n\n",
            "renaming": {
                "FUN_08003724": "configure_hal_08003724",
                "HAL_StatusTypeDef_conflict": "HAL_Status",
                "HAL_NVIC_SetPriorityGrouping": "set_priority_group",
                "HAL_InitTick": "initialize_tick",
                "HAL_MspInit": "initialize_Msp",
                "HAL_OK": "HAL_success"
            },
            "calling": [
                "hw_config_init"
            ],
            "called": [
                "HAL_NVIC_SetPriorityGrouping",
                "HAL_MspInit",
                "HAL_InitTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003748": {
            "entrypoint": "0x08003748",
            "current_name": "update_tick_08003748",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid updateTick_08003748(void)\n\n{\n  currentTick = tickFrequency + currentTick;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003748": "update_tick_08003748",
                "uwTick": "currentTick",
                "uwTickFreq": "tickFrequency"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003760": {
            "entrypoint": "0x08003760",
            "current_name": "get_system_tick_08003760",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getSystemTick_08003760(void)\n\n{\n  return systemTick;\n}\n\n",
            "renaming": {
                "FUN_08003760": "get_system_tick_08003760",
                "uwTick": "systemTick"
            },
            "calling": [
                "HAL_UART_Transmit",
                "uart_debug_write",
                "HAL_RCC_OscConfig",
                "HAL_ADCEx_Calibration_Start",
                "ADC_Enable",
                "UART_WaitOnFlagUntilTimeout",
                "HAL_RCCEx_PeriphCLKConfig",
                "GetCurrentMilli",
                "i2c_master_read",
                "i2c_master_write",
                "HAL_RCC_ClockConfig",
                "HAL_ADC_PollForConversion",
                "ADC_ConversionStop_Disable"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800376c": {
            "entrypoint": "0x0800376c",
            "current_name": "adc_conversion_with_timeout_0800376c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict adc_conversion_with_timeout_0800376c(ADC_HandleTypeDef *adc_handle,uint32_t timeout)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t start_tick;\n  uint32_t periph_clk_freq;\n  int sample_time;\n  uint32_t current_tick;\n  ADC_TypeDef *adc_instance;\n  uint cpu_cycles;\n  uint32_t current_cpu_cycles;\n  \n  current_cpu_cycles = 0;\n  start_tick = HAL_GetTick();\n  current_tick = SystemCoreClock;\n  adc_instance = adc_handle->Instance;\n  if ((adc_instance->CR2 & 0x100) == 0) {\n    if (((adc_instance->CR1 & 0x100) == 0) && ((adc_instance->SQR1 & 0xf00000) == 0)) {\n      do {\n        if ((adc_handle->Instance->SR & 2) != 0) goto LAB_0800387e;\n      } while ((timeout == 0xffffffff) ||\n              ((timeout != 0 && (current_tick = HAL_GetTick(), current_tick - start_tick <= timeout))));\n      adc_handle->State = adc_handle->State | 4;\n      adc_handle->Lock = HAL_UNLOCKED;\n      status = HAL_TIMEOUT;\n    }\n    else {\n      periph_clk_freq = HAL_RCCEx_GetPeriphCLKFreq(2);\n      adc_instance = adc_handle->Instance;\n      if (((adc_instance->SMPR2 & 0x24924924) == 0) && ((adc_instance->SMPR1 & 0x924924) == 0)) {\n        if ((adc_instance->SMPR2 & 0x12492492) == 0) {\n          if ((adc_instance->SMPR1 & 0x492492) == 0) {\n            sample_time = 0x14;\n          }\n          else {\n            sample_time = 0x29;\n          }\n        }\n        else {\n          sample_time = 0x29;\n        }\n      }\n      else if (((adc_instance->SMPR2 & 0x12492492) == 0) && ((adc_instance->SMPR1 & 0x492492) == 0)) {\n        sample_time = 0x54;\n      }\n      else if ((adc_instance->SMPR2 & 0x249249) == 0) {\n        if ((adc_instance->SMPR1 & 0x249249) == 0) {\n          sample_time = 0x54;\n        }\n        else {\n          sample_time = 0xfc;\n        }\n      }\n      else {\n        sample_time = 0xfc;\n      }\n      cpu_cycles = (current_tick / periph_clk_freq) * sample_time;\n      for (; current_cpu_cycles <= cpu_cycles && cpu_cycles - current_cpu_cycles != 0;\n          current_cpu_cycles = current_cpu_cycles + 1) {\n        if ((timeout != 0xffffffff) &&\n           ((timeout == 0 || (current_tick = HAL_GetTick(), timeout < current_tick - start_tick)))) {\n          adc_handle->State = adc_handle->State | 4;\n          adc_handle->Lock = HAL_UNLOCKED;\n          return HAL_TIMEOUT;\n        }\n      }\nLAB_0800387e:\n      adc_handle->Instance->SR = 0xffffffed;\n      adc_handle->State = adc_handle->State | 0x200;\n      if ((adc_handle->Instance->CR2 & 0xe0000) == 0xe0000) {\n        if ((adc_handle->Init).ContinuousConvMode == 0) {\n          adc_handle->State = adc_handle->State & 0xfffffeff;\n          if ((adc_handle->State & 0x1000) == 0) {\n            adc_handle->State = adc_handle->State | 1;\n            status = HAL_OK;\n          }\n          else {\n            status = HAL_OK;\n          }\n        }\n        else {\n          status = HAL_OK;\n        }\n      }\n      else {\n        status = HAL_OK;\n      }\n    }\n  }\n  else {\n    adc_handle->State = adc_handle->State | 0x20;\n    adc_handle->Lock = HAL_UNLOCKED;\n    status = HAL_ERROR;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_0800376c": "adc_conversion_with_timeout_0800376c",
                "hadc": "adc_handle",
                "Timeout": "timeout",
                "HVar1": "status",
                "uVar2": "start_tick",
                "uVar3": "periph_clk_freq",
                "iVar4": "sample_time",
                "uVar5": "current_tick",
                "pAVar6": "adc_instance",
                "uVar7": "cpu_cycles",
                "Conversion_Timeout_CPU_cycles": "current_cpu_cycles"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "HAL_GetTick",
                "HAL_RCCEx_GetPeriphCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038dc": {
            "entrypoint": "0x080038dc",
            "current_name": "get_adc_data_080038dc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t get_ADC_data_080038dc(ADC_HandleTypeDef *hadc)\n\n{\n  return hadc->Instance->DR;\n}\n\n",
            "renaming": {
                "FUN_080038dc": "get_adc_data_080038dc"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038e4": {
            "entrypoint": "0x080038e4",
            "current_name": "configure_adc_channel_080038e4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict configureADCChannel_080038e4(ADC_HandleTypeDef *adcHandle,ADC_ChannelConfTypeDef *channelConfig)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint rank;\n  uint32_t loopIndex;\n  \n  if (adcHandle->Lock == HAL_LOCKED) {\n    status = HAL_BUSY;\n  }\n  else {\n    adcHandle->Lock = HAL_LOCKED;\n    rank = channelConfig->Rank;\n    if (rank < 7) {\n      rank = rank * 5 - 5;\n      adcHandle->Instance->SQR3 =\n           channelConfig->Channel << (rank & 0xff) | adcHandle->Instance->SQR3 & ~(0x1f << (rank & 0xff));\n    }\n    else if (rank < 0xd) {\n      rank = rank * 5 - 0x23;\n      adcHandle->Instance->SQR2 =\n           channelConfig->Channel << (rank & 0xff) | adcHandle->Instance->SQR2 & ~(0x1f << (rank & 0xff));\n    }\n    else {\n      rank = rank * 5 - 0x41;\n      adcHandle->Instance->SQR1 =\n           channelConfig->Channel << (rank & 0xff) | adcHandle->Instance->SQR1 & ~(0x1f << (rank & 0xff));\n    }\n    rank = channelConfig->Channel;\n    if (rank < 10) {\n      adcHandle->Instance->SMPR2 =\n           channelConfig->SamplingTime << (rank * 3 & 0xff) |\n           adcHandle->Instance->SMPR2 & ~(7 << (rank * 3 & 0xff));\n    }\n    else {\n      rank = rank * 3 - 0x1e;\n      adcHandle->Instance->SMPR1 =\n           channelConfig->SamplingTime << (rank & 0xff) | adcHandle->Instance->SMPR1 & ~(7 << (rank & 0xff));\n    }\n    if (channelConfig->Channel - 0x10 < 2) {\n      if (adcHandle->Instance == (ADC_TypeDef *)0x40012400) {\n        if ((uRam40012408 & 0x800000) == 0) {\n          uRam40012408 = uRam40012408 | 0x800000;\n          if (channelConfig->Channel == 0x10) {\n            for (loopIndex = (SystemCoreClock / 1000000) * 10; loopIndex != 0;\n                loopIndex = loopIndex - 1) {\n            }\n            status = HAL_OK;\n          }\n          else {\n            status = HAL_OK;\n          }\n        }\n        else {\n          status = HAL_OK;\n        }\n      }\n      else {\n        adcHandle->State = adcHandle->State | 0x20;\n        status = HAL_ERROR;\n      }\n    }\n    else {\n      status = HAL_OK;\n    }\n    adcHandle->Lock = HAL_UNLOCKED;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_080038e4": "configure_adc_channel_080038e4",
                "hadc": "adcHandle",
                "sConfig": "channelConfig",
                "HVar1": "status",
                "uVar2": "rank",
                "wait_loop_index": "loopIndex"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a1c": {
            "entrypoint": "0x08003a1c",
            "current_name": "get_adc_state_08003a1c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getADCState_08003a1c(ADC_HandleTypeDef *adcHandle)\n\n{\n  return adcHandle->State;\n}\n\n",
            "renaming": {
                "FUN_08003a1c": "get_adc_state_08003a1c",
                "hadc": "adcHandle"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a20": {
            "entrypoint": "0x08003a20",
            "current_name": "initialize_adc_08003a20",
            "code": "\n/* WARNING: Unknown calling convention */\n\nStatus initializeADC_08003a20(ADC_HandleTypeDef *adcHandle)\n\n{\n  Status HVar1;\n  uint32_t startTime;\n  uint32_t currentTime;\n  ADC_TypeDef *adcInstance;\n  uint32_t loopIndex;\n  \n  adcInstance = adcHandle->Instance;\n  if ((adcInstance->CR2 & 1) == 0) {\n    adcInstance->CR2 = adcInstance->CR2 | 1;\n    for (loopIndex = SystemCoreClock / 1000000; loopIndex != 0;\n        loopIndex = loopIndex - 1) {\n    }\n    startTime = HAL_GetTick();\n    do {\n      if ((adcHandle->Instance->CR2 & 1) != 0) {\n        return HAL_OK;\n      }\n      currentTime = HAL_GetTick();\n    } while (currentTime - startTime < 3);\n    adcHandle->State = adcHandle->State | 0x10;\n    adcHandle->ErrorCode = adcHandle->ErrorCode | 1;\n    adcHandle->Lock = HAL_UNLOCKED;\n    HVar1 = HAL_ERROR;\n  }\n  else {\n    HVar1 = HAL_OK;\n  }\n  return HVar1;\n}\n\n",
            "renaming": {
                "FUN_08003a20": "initialize_adc_08003a20",
                "hadc": "adcHandle",
                "HAL_StatusTypeDef_conflict": "Status",
                "uVar2": "startTime",
                "uVar3": "currentTime",
                "pAVar4": "adcInstance",
                "wait_loop_index": "loopIndex"
            },
            "calling": [
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_Start"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003aa0": {
            "entrypoint": "0x08003aa0",
            "current_name": "initialize_adc_08003aa0",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict initializeADC_08003aa0(ADC_HandleTypeDef *adcHandle)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  ADC_TypeDef *adcInstance;\n  \n  if (adcHandle->Lock != HAL_LOCKED) {\n    adcHandle->Lock = HAL_LOCKED;\n    status = ADC_Enable(adcHandle);\n    if (status == HAL_OK) {\n      adcHandle->State = adcHandle->State & 0xfffffcfe | 0x100;\n      adcInstance = adcHandle->Instance;\n      if ((adcInstance == (ADC_TypeDef *)0x40012800) && ((_DAT_40012404 & 0xf0000) != 0)) {\n        adcHandle->State = adcHandle->State | 0x100000;\n        if ((_DAT_40012404 & 0x400) != 0) {\n          adcHandle->State = adcHandle->State & 0xffffcfff | 0x1000;\n        }\n      }\n      else {\n        adcHandle->State = adcHandle->State & 0xffefffff;\n        if ((adcInstance->CR1 & 0x400) != 0) {\n          adcHandle->State = adcHandle->State & 0xffffcfff | 0x1000;\n        }\n      }\n      if ((adcHandle->State & 0x1000) == 0) {\n        adcHandle->ErrorCode = 0;\n      }\n      else {\n        adcHandle->ErrorCode = adcHandle->ErrorCode & 0xfffffff9;\n      }\n      adcHandle->Lock = HAL_UNLOCKED;\n      adcInstance->SR = 0xfffffffd;\n      adcInstance = adcHandle->Instance;\n      if (((adcInstance->CR2 & 0xe0000) == 0xe0000) &&\n         ((adcInstance != (ADC_TypeDef *)0x40012800 || ((_DAT_40012404 & 0xf0000) == 0)))) {\n        adcInstance->CR2 = adcInstance->CR2 | 0x500000;\n      }\n      else {\n        adcInstance->CR2 = adcInstance->CR2 | 0x100000;\n      }\n    }\n    else {\n      adcHandle->Lock = HAL_UNLOCKED;\n    }\n    return status;\n  }\n  return HAL_BUSY;\n}\n\n",
            "renaming": {
                "FUN_08003aa0": "initialize_adc_08003aa0",
                "hadc": "adcHandle",
                "HVar1": "status",
                "pAVar2": "adcInstance"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "ADC_Enable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003b8c": {
            "entrypoint": "0x08003b8c",
            "current_name": "check_adc_status_08003b8c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict checkADCStatus_08003b8c(ADC_HandleTypeDef *adcHandle)\n\n{\n  uint32_t startTime;\n  uint32_t currentTime;\n  ADC_TypeDef *adcPtr;\n  \n  adcPtr = adcHandle->Instance;\n  if ((adcPtr->controlReg2 & 1) == 0) {\n    return HAL_SUCCESS;\n  }\n  adcPtr->controlReg2 = adcPtr->controlReg2 & 0xfffffffe;\n  startTime = getCurrentTick();\n  do {\n    if ((adcHandle->Instance->controlReg2 & 1) == 0) {\n      return HAL_SUCCESS;\n    }\n    currentTime = getCurrentTick();\n  } while (currentTime - startTime < 3);\n  adcHandle->adcState = adcHandle->adcState | 0x10;\n  adcHandle->adcErrorCode = adcHandle->adcErrorCode | 1;\n  return HAL_FAILURE;\n}\n\n",
            "renaming": {
                "FUN_08003b8c": "check_adc_status_08003b8c",
                "hadc": "adcHandle",
                "uVar1": "startTime",
                "uVar2": "currentTime",
                "pAVar3": "adcPtr",
                "CR2": "controlReg2",
                "HAL_GetTick": "getCurrentTick",
                "State": "adcState",
                "ErrorCode": "adcErrorCode",
                "HAL_OK": "HAL_SUCCESS",
                "HAL_ERROR": "HAL_FAILURE"
            },
            "calling": [
                "HAL_ADC_Init",
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_Stop",
                "HAL_ADC_DeInit"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003bd8": {
            "entrypoint": "0x08003bd8",
            "current_name": "initialize_adc_08003bd8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict initializeADC_08003bd8(ADC_HandleTypeDef *adcHandle)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t value1;\n  uint value2;\n  uint value3;\n  uint32_t value4;\n  \n  if (adcHandle == (ADC_HandleTypeDef *)0x0) {\n    return HAL_ERROR;\n  }\n  if (adcHandle->State == 0) {\n    adcHandle->ErrorCode = 0;\n    adcHandle->Lock = HAL_UNLOCKED;\n    HAL_ADC_MspInit(adcHandle);\n  }\n  status = ADC_ConversionStop_Disable(adcHandle);\n  if (((adcHandle->State & 0x10) == 0) && (status == HAL_OK)) {\n    adcHandle->State = adcHandle->State & 0xffffeefd | 2;\n    value4 = (adcHandle->Init).ContinuousConvMode;\n    value2 = (adcHandle->Init).DataAlign | (adcHandle->Init).ExternalTrigConv | value4 << 1;\n    value1 = (adcHandle->Init).ScanConvMode;\n    if (value1 == 0x100) {\n      value3 = 0x100;\n    }\n    else {\n      value3 = 0;\n      if (value1 == 1) {\n        value3 = 0x100;\n      }\n    }\n    if ((adcHandle->Init).DiscontinuousConvMode == 1) {\n      if (value4 == 0) {\n        value3 = value3 | ((adcHandle->Init).NbrOfDiscConversion - 1) * 0x2000 | 0x800;\n      }\n      else {\n        adcHandle->State = adcHandle->State | 0x20;\n        adcHandle->ErrorCode = adcHandle->ErrorCode | 1;\n      }\n    }\n    adcHandle->Instance->CR1 = value3 | adcHandle->Instance->CR1 & 0xffff16ff;\n    adcHandle->Instance->CR2 = adcHandle->Instance->CR2 & 0xffe1f7fd | value2;\n    value1 = (adcHandle->Init).ScanConvMode;\n    if ((value1 == 0x100) || (value1 == 1)) {\n      value3 = ((adcHandle->Init).NbrOfConversion - 1) * 0x100000;\n    }\n    else {\n      value3 = 0;\n    }\n    adcHandle->Instance->SQR1 = value3 | adcHandle->Instance->SQR1 & 0xff0fffff;\n    if (value2 != (adcHandle->Instance->CR2 & 0xff1f0efe)) {\n      adcHandle->State = adcHandle->State & 0xffffffed | 0x10;\n      adcHandle->ErrorCode = adcHandle->ErrorCode | 1;\n      return HAL_ERROR;\n    }\n    adcHandle->ErrorCode = 0;\n    adcHandle->State = adcHandle->State & 0xfffffffc | 1;\n    return HAL_OK;\n  }\n  adcHandle->State = adcHandle->State | 0x10;\n  return HAL_ERROR;\n}\n\n",
            "renaming": {
                "FUN_08003bd8": "initialize_adc_08003bd8",
                "hadc": "adcHandle",
                "HVar1": "status",
                "uVar2": "value1",
                "uVar3": "value2",
                "uVar4": "value3",
                "uVar5": "value4"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "HAL_ADC_MspInit",
                "ADC_ConversionStop_Disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ce8": {
            "entrypoint": "0x08003ce8",
            "current_name": "stop_adc_conversion_08003ce8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict stopADCConversion_08003ce8(ADC_HandleTypeDef *adcHandle)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  \n  if (adcHandle == (ADC_HandleTypeDef *)0x0) {\n    status = HAL_ERROR;\n  }\n  else {\n    adcHandle->state = adcHandle->state | 2;\n    status = disableADCConversionStop(adcHandle);\n    if (status == HAL_OK) {\n      adcHandle->instance->statusRegister = 0xffffffe0;\n      adcHandle->instance->controlRegister1 = adcHandle->instance->controlRegister1 & 0xff3f0000;\n      adcHandle->instance->controlRegister2 = adcHandle->instance->controlRegister2 & 0xff0106f0;\n      adcHandle->instance->sampleRateRegister1 = adcHandle->instance->sampleRateRegister1 & 0xff000000;\n      adcHandle->instance->sampleRateRegister2 = adcHandle->instance->sampleRateRegister2 & 0xc0000000;\n      adcHandle->instance->offsetRegister1 = adcHandle->instance->offsetRegister1 & 0xfffff000;\n      adcHandle->instance->offsetRegister2 = adcHandle->instance->offsetRegister2 & 0xfffff000;\n      adcHandle->instance->offsetRegister3 = adcHandle->instance->offsetRegister3 & 0xfffff000;\n      adcHandle->instance->offsetRegister4 = adcHandle->instance->offsetRegister4 & 0xfffff000;\n      adcHandle->instance->highThresholdRegister = adcHandle->instance->highThresholdRegister & 0xfffff000;\n      adcHandle->instance->lowThresholdRegister = adcHandle->instance->lowThresholdRegister & 0xfffff000;\n      adcHandle->instance->regularSequenceRegister1 = adcHandle->instance->regularSequenceRegister1 & 0xff000000;\n      adcHandle->instance->regularSequenceRegister1 = adcHandle->instance->regularSequenceRegister1 & 0xff000000;\n      adcHandle->instance->regularSequenceRegister2 = adcHandle->instance->regularSequenceRegister2 & 0xc0000000;\n      adcHandle->instance->regularSequenceRegister3 = adcHandle->instance->regularSequenceRegister3 & 0xc0000000;\n      adcHandle->instance->injectedSequenceRegister = adcHandle->instance->injectedSequenceRegister & 0xffc00000;\n      adcHandle->instance->injectedSequenceRegister = adcHandle->instance->injectedSequenceRegister & 0xffc00000;\n      HAL_ADC_MspDeInit(adcHandle);\n      adcHandle->errorCode = 0;\n      adcHandle->state = 0;\n    }\n    adcHandle->lock = HAL_UNLOCKED;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08003ce8": "stop_adc_conversion_08003ce8",
                "hadc": "adcHandle",
                "HVar1": "status",
                "ADC_ConversionStop_Disable": "disableADCConversionStop",
                "State": "state",
                "Instance": "instance",
                "SR": "statusRegister",
                "CR1": "controlRegister1",
                "CR2": "controlRegister2",
                "SMPR1": "sampleRateRegister1",
                "SMPR2": "sampleRateRegister2",
                "JOFR1": "offsetRegister1",
                "JOFR2": "offsetRegister2",
                "JOFR3": "offsetRegister3",
                "JOFR4": "offsetRegister4",
                "HTR": "highThresholdRegister",
                "LTR": "lowThresholdRegister",
                "SQR1": "regularSequenceRegister1",
                "SQR2": "regularSequenceRegister2",
                "SQR3": "regularSequenceRegister3",
                "JSQR": "injectedSequenceRegister",
                "ErrorCode": "errorCode",
                "Lock": "lock"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "ADC_ConversionStop_Disable",
                "HAL_ADC_MspDeInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003de4": {
            "entrypoint": "0x08003de4",
            "current_name": "stop_and_disable_adc_conversion_08003de4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict stopAndDisableADCConversion_08003de4(ADC_HandleTypeDef *adcHandle)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  \n  if (adcHandle->Lock == HAL_ADC_LOCKED) {\n    return HAL_ADC_BUSY;\n  }\n  adcHandle->Lock = HAL_ADC_LOCKED;\n  status = stopAndDisableADCConversion_08003de4(adcHandle);\n  if (status == HAL_ADC_OK) {\n    adcHandle->State = adcHandle->State & 0xffffeefe | 1;\n  }\n  adcHandle->Lock = HAL_ADC_UNLOCKED;\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08003de4": "stop_and_disable_adc_conversion_08003de4",
                "hadc": "adcHandle",
                "HVar1": "status",
                "HAL_LOCKED": "HAL_ADC_LOCKED",
                "HAL_BUSY": "HAL_ADC_BUSY",
                "ADC_ConversionStop_Disable": "stopAndDisableADCConversion",
                "HAL_OK": "HAL_ADC_OK",
                "HAL_UNLOCKED": "HAL_ADC_UNLOCKED"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "ADC_ConversionStop_Disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e20": {
            "entrypoint": "0x08003e20",
            "current_name": "start_adc_conversion_08003e20",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict startADCConversion_08003e20(ADC_HandleTypeDef *adcHandle)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t clockFreq;\n  uint32_t coreClock;\n  ADC_TypeDef *adcTypeDef;\n  uint32_t startTicks;\n  uint32_t loopIndex;\n  \n  if (adcHandle->Lock == HAL_LOCKED) {\n    return HAL_BUSY;\n  }\n  adcHandle->Lock = HAL_LOCKED;\n  status = ADC_ConversionStop_Disable(adcHandle);\n  if (status == HAL_OK) {\n    adcHandle->State = adcHandle->State & 0xffffeefd | 2;\n    coreClock = SystemCoreClock;\n    clockFreq = HAL_RCCEx_GetPeriphCLKFreq(2);\n    for (loopIndex = coreClock / clockFreq << 1; loopIndex != 0;\n        loopIndex = loopIndex - 1) {\n    }\n    ADC_Enable(adcHandle);\n    adcHandle->Instance->CR2 = adcHandle->Instance->CR2 | 8;\n    coreClock = HAL_GetTick();\n    while (adcTypeDef = adcHandle->Instance, (adcTypeDef->CR2 & 8) != 0) {\n      clockFreq = HAL_GetTick();\n      if (10 < clockFreq - coreClock) {\n        adcHandle->State = adcHandle->State & 0xffffffed | 0x10;\n        adcHandle->Lock = HAL_UNLOCKED;\n        return HAL_ERROR;\n      }\n    }\n    adcTypeDef->CR2 = adcTypeDef->CR2 | 4;\n    coreClock = HAL_GetTick();\n    while ((adcHandle->Instance->CR2 & 4) != 0) {\n      clockFreq = HAL_GetTick();\n      if (10 < clockFreq - coreClock) {\n        adcHandle->State = adcHandle->State & 0xffffffed | 0x10;\n        adcHandle->Lock = HAL_UNLOCKED;\n        return HAL_ERROR;\n      }\n    }\n    adcHandle->State = adcHandle->State & 0xfffffffc | 1;\n  }\n  adcHandle->Lock = HAL_UNLOCKED;\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08003e20": "start_adc_conversion_08003e20",
                "hadc": "adcHandle",
                "HVar1": "status",
                "uVar2": "clockFreq",
                "uVar3": "coreClock",
                "pAVar4": "adcTypeDef",
                "tickstart": "startTicks",
                "wait_loop_index": "loopIndex"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "ADC_Enable",
                "ADC_ConversionStop_Disable",
                "HAL_GetTick",
                "HAL_RCCEx_GetPeriphCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f0c": {
            "entrypoint": "0x08003f0c",
            "current_name": "set_priority_group_08003f0c",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid setPriorityGroup_08003f0c(uint32_t priorityGroup)\n\n{\n  uint32_t registerValue;\n  \n  _DAT_e000ed0c = (priorityGroup & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f0c": "set_priority_group_08003f0c",
                "PriorityGroup": "priorityGroup",
                "reg_value": "registerValue"
            },
            "calling": [
                "premain",
                "HAL_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f30": {
            "entrypoint": "0x08003f30",
            "current_name": "configure_interrupt_priority_08003f30",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid configureInterruptPriority_08003f30(interruptType IRQn,uint32_t preemptPriority,uint32_t subPriority)\n\n{\n  uint irqNum;\n  uint shiftedMask;\n  uint32_t priorityGroup;\n  uint32_t subPriorityBits;\n  uint32_t preemptPriorityBits;\n  \n  irqNum = (uint)IRQn;\n  shiftedMask = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  preemptPriorityBits = 7 - shiftedMask;\n  if (3 < preemptPriorityBits) {\n    preemptPriorityBits = 4;\n  }\n  if (shiftedMask + 4 < 7) {\n    subPriorityBits = 0;\n  }\n  else {\n    subPriorityBits = shiftedMask - 3;\n  }\n  shiftedMask = (preemptPriority & (1 << (preemptPriorityBits & 0xff)) - 1U) << (subPriorityBits & 0xff) |\n          (1 << (subPriorityBits & 0xff)) - 1U & subPriority;\n  if ((int)irqNum < 0) {\n    *(char *)((irqNum & 0xf) + 0xe000ed14) = (char)(shiftedMask << 4);\n  }\n  else {\n    *(char *)(irqNum + 0xe000e400) = (char)(shiftedMask << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f30": "configure_interrupt_priority_08003f30",
                "IRQn_Type_conflict": "interruptType",
                "PreemptPriority": "preemptPriority",
                "SubPriority": "subPriority",
                "PriorityGroupTmp": "priorityGroup",
                "SubPriorityBits": "subPriorityBits",
                "PreemptPriorityBits": "preemptPriorityBits",
                "uVar1": "irqNum",
                "uVar2": "shiftedMask"
            },
            "calling": [
                "SystemClock_Config",
                "TimerPulseInit",
                "uart_attach_rx_callback",
                "uart_attach_tx_callback",
                "i2c_custom_init",
                "HAL_InitTick"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f94": {
            "entrypoint": "0x08003f94",
            "current_name": "set_irq_trigger_08003f94",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid setIRQTrigger_08003f94(IRQNumber_Type_conflict IRQNumber)\n\n{\n  uint uVar1;\n  \n  uVar1 = (uint)IRQNumber;\n  if (-1 < (int)uVar1) {\n    *(int *)((uVar1 >> 5) * 4 + -0x1fff1f00) = 1 << (uVar1 & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f94": "set_irq_trigger_08003f94",
                "IRQn": "IRQNumber"
            },
            "calling": [
                "TimerPulseInit",
                "uart_attach_rx_callback",
                "uart_attach_tx_callback",
                "i2c_custom_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fb0": {
            "entrypoint": "0x08003fb0",
            "current_name": "set_interrupt_priority_08003fb0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid setInterruptPriority_08003fb0(interruptType_Type_conflict interruptType)\n\n{\n  uint interruptNumber;\n  \n  interruptNumber = (uint)interruptType;\n  if (-1 < (int)interruptNumber) {\n    *(int *)(((interruptNumber >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (interruptNumber & 0x1f);\n    DataSynchronizationBarrier(0xf);\n    InstructionSynchronizationBarrier(0xf);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fb0": "set_interrupt_priority_08003fb0",
                "IRQn": "interruptType",
                "uVar1": "interruptNumber"
            },
            "calling": [
                "TimerPulseDeinit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fd8": {
            "entrypoint": "0x08003fd8",
            "current_name": "set_tick_values_08003fd8",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t setTickValues_08003fd8(uint32_t ticksNumber)\n\n{\n  if (ticksNumber - 1 < 0x1000000) {\n    _DAT_e000e014 = ticksNumber - 1;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003fd8": "set_tick_values_08003fd8",
                "TicksNumb": "ticksNumber"
            },
            "calling": [
                "SystemClock_Config",
                "HAL_InitTick"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004004": {
            "entrypoint": "0x08004004",
            "current_name": "set_interrupt_enable_08004004",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid setInterruptEnable_08004004(interrupt_type_Type_conflict interrupt_type)\n\n{\n  uint converted_interrupt_type;\n  \n  converted_interrupt_type = (uint)interrupt_type;\n  if (-1 < (int)converted_interrupt_type) {\n    *(int *)(((converted_interrupt_type >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (converted_interrupt_type & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004004": "set_interrupt_enable_08004004",
                "IRQn": "interrupt_type",
                "uVar1": "converted_interrupt_type"
            },
            "calling": [
                "USART1_IRQHandler",
                "USART3_IRQHandler",
                "USART2_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004024": {
            "entrypoint": "0x08004024",
            "current_name": "set_clock_source_08004024",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid setClockSource_08004024(uint32_t source)\n\n{\n  if (source != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004024": "set_clock_source_08004024",
                "CLKSource": "source"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004044": {
            "entrypoint": "0x08004044",
            "current_name": "FUNC_08004044",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08004044(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004044": "FUNC_08004044"
            },
            "calling": [
                "HAL_SYSTICK_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004046": {
            "entrypoint": "0x08004046",
            "current_name": "handle_sys_tick_interrupt_08004046",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleSysTickInterrupt_08004046(void)\n\n{\n  processSysTickCallback();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004046": "handle_sys_tick_interrupt_08004046",
                "HAL_SYSTICK_Callback": "processSysTickCallback"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [
                "HAL_SYSTICK_Callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004050": {
            "entrypoint": "0x08004050",
            "current_name": "configure_dma_channel_08004050",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict configure_DMA_channel_08004050(DMA_Channel_Config *dma_channel)\n\n{\n  DMA_Channel_TypeDef_conflict *current_channel;\n  \n  if (dma_channel->State != DMA_STATE_BUSY) {\n    dma_channel->ErrorCode = 4;\n    return DMA_ERROR;\n  }\n  dma_channel->Instance->CCR = dma_channel->Instance->CCR & 0xfffffff1;\n  dma_channel->Instance->CCR = dma_channel->Instance->CCR & 0xfffffffe;\n  current_channel = dma_channel->Instance;\n  if (current_channel == (DMA_Channel_TypeDef_conflict *)0x40020008) {\n    _DAT_40020004 = 1;\n  }\n  else if (current_channel == (DMA_Channel_TypeDef_conflict *)0x4002001c) {\n    _DAT_40020004 = 0x10;\n  }\n  else if (current_channel == (DMA_Channel_TypeDef_conflict *)0x40020030) {\n    _DAT_40020004 = 0x100;\n  }\n  else if (current_channel == (DMA_Channel_TypeDef_conflict *)0x40020044) {\n    _DAT_40020004 = 0x1000;\n  }\n  else if (current_channel == (DMA_Channel_TypeDef_conflict *)0x40020058) {\n    _DAT_40020004 = 0x10000;\n  }\n  else if (current_channel == (DMA_Channel_TypeDef_conflict *)0x4002006c) {\n    _DAT_40020004 = 0x100000;\n  }\n  else {\n    _DAT_40020004 = 0x1000000;\n  }\n  dma_channel->State = DMA_STATE_READY;\n  dma_channel->Lock = DMA_UNLOCKED;\n  if (dma_channel->XferAbortCallback != (XferAbortCallback_func *)0x0) {\n    (*dma_channel->XferAbortCallback)(dma_channel);\n    return DMA_OK;\n  }\n  return DMA_OK;\n}\n\n",
            "renaming": {
                "FUN_08004050": "configure_dma_channel_08004050",
                "hdma": "dma_channel",
                "pDVar1": "current_channel",
                "DMA_HandleTypeDef_conflict": "DMA_Channel_Config",
                "HAL_DMA_STATE_BUSY": "DMA_STATE_BUSY",
                "HAL_ERROR": "DMA_ERROR",
                "HAL_OK": "DMA_OK",
                "HAL_DMA_STATE_READY": "DMA_STATE_READY",
                "HAL_UNLOCKED": "DMA_UNLOCKED",
                "_func_void___DMA_HandleTypeDef_ptr_conflict": "XferAbortCallback_func"
            },
            "calling": [
                "I2C_ITError",
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "initialize_gpio_080040e8",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeGPIO_080040e8(GPIO_TypeDef *gpioPort,gpioConfigTypeDef *gpioConfig)\n\n{\n  GPIO_TypeDef *portPtr;\n  uint bitMask;\n  uint pinMask;\n  uint pinNum;\n  uint modeVal;\n  uint32_t speedVal;\n  int crhOffset;\n  uint32_t *configReg;\n  int gpioIndex;\n  uint32_t tempReg;\n  \n  speedVal = 0;\n  pinNum = 0;\n  do {\n    if (0xf < pinNum) {\n      return;\n    }\n    bitMask = 1 << (pinNum & 0xff);\n    pinMask = gpioConfig->Pin & bitMask;\n    if (bitMask == pinMask) {\n      modeVal = gpioConfig->Mode;\n      if (modeVal == 0x12) {\n        speedVal = gpioConfig->Speed + 0xc;\n      }\n      else if (modeVal < 0x13) {\n        if (modeVal == 2) {\n          speedVal = gpioConfig->Speed + 8;\n        }\n        else if (modeVal < 3) {\n          if (modeVal == 0) goto LAB_0800423a;\n          if (modeVal == 1) {\n            speedVal = gpioConfig->Speed;\n          }\n        }\n        else if (modeVal == 3) {\n          speedVal = 0;\n        }\n        else if (modeVal == 0x11) {\n          speedVal = gpioConfig->Speed + 4;\n        }\n      }\n      else if (modeVal == 0x10210000) {\nLAB_0800423a:\n        if (gpioConfig->Pull == 0) {\n          speedVal = 4;\n        }\n        else if (gpioConfig->Pull == 1) {\n          gpioPort->BSRR = bitMask;\n          speedVal = 8;\n        }\n        else {\n          gpioPort->BRR = bitMask;\n          speedVal = 8;\n        }\n      }\n      else if (modeVal < 0x10210001) {\n        if ((modeVal == 0x10110000) || (modeVal == 0x10120000)) goto LAB_0800423a;\n      }\n      else if ((modeVal == 0x10310000) || ((modeVal == 0x10320000 || (modeVal == 0x10220000))))\n      goto LAB_0800423a;\n      bitMask = pinNum;\n      portPtr = gpioPort;\n      if (0xff < pinMask) {\n        bitMask = pinNum - 8;\n        portPtr = (GPIO_TypeDef *)&gpioPort->CRH;\n      }\n      portPtr->CRL = portPtr->CRL & ~(0xf << (bitMask << 2 & 0xff)) | speedVal << (bitMask << 2 & 0xff);\n      if ((gpioConfig->Mode & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        crhOffset = (pinNum & 3) << 2;\n        if (gpioPort == (GPIO_TypeDef *)0x40010800) {\n          gpioIndex = 0;\n        }\n        else if (gpioPort == (GPIO_TypeDef *)0x40010c00) {\n          gpioIndex = 1;\n        }\n        else if (gpioPort == (GPIO_TypeDef *)0x40011000) {\n          gpioIndex = 2;\n        }\n        else if (gpioPort == (GPIO_TypeDef *)0x40011400) {\n          gpioIndex = 3;\n        }\n        else {\n          gpioIndex = 4;\n        }\n        *(uint *)(((pinNum >> 2) + 2) * 4 + 0x40010000) =\n             *(uint *)(((pinNum >> 2) + 2) * 4 + 0x40010000) & ~(0xf << crhOffset) | gpioIndex << crhOffset;\n        if ((gpioConfig->Mode & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~pinMask;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | pinMask;\n        }\n        if ((gpioConfig->Mode & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~pinMask;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | pinMask;\n        }\n        if ((gpioConfig->Mode & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~pinMask;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | pinMask;\n        }\n        if ((gpioConfig->Mode & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~pinMask;\n        }\n        else {\n          _DAT_4001040c = pinMask | _DAT_4001040c;\n        }\n      }\n    }\n    pinNum = pinNum + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080040e8": "initialize_gpio_080040e8",
                "GPIOx": "gpioPort",
                "GPIO_Init": "gpioConfig",
                "pGVar1": "portPtr",
                "uVar2": "bitMask",
                "uVar3": "pinMask",
                "uVar4": "pinNum",
                "uVar5": "modeVal",
                "uVar6": "speedVal",
                "iVar7": "crhOffset",
                "configregister": "configReg",
                "iVar8": "gpioIndex",
                "tmpreg": "tempReg"
            },
            "calling": [
                "uart_init",
                "HAL_TIM_PWM_MspInit",
                "HAL_ADC_MspInit",
                "digital_io_init",
                "i2c_custom_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042d4": {
            "entrypoint": "0x080042d4",
            "current_name": "check_pin_status_080042d4",
            "code": "\n/* WARNING: Unknown calling convention */\n\npinNumberState checkPinStatus_080042d4(GPIO_TypeDef *GPIO,uint16_t pinNumber)\n\n{\n  pinNumberState status;\n  \n  if (((uint)pinNumber & GPIO->IDR) == 0) {\n    status = GPIO_PIN_RESET;\n    return status;\n  }\n  return GPIO_PIN_SET;\n}\n\n",
            "renaming": {
                "FUN_080042d4": "check_pin_status_080042d4",
                "GPIOx": "GPIO",
                "GPIO_Pin": "pinNumber",
                "bitstatus": "status"
            },
            "calling": [
                "digital_io_read"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042e2": {
            "entrypoint": "0x080042e2",
            "current_name": "set_pin_state_080042e2",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid setPinState_080042e2(GPIO_TypeDef *port,uint16_t pin,pinState state)\n\n{\n  if (state == GPIO_PIN_RESET) {\n    port->BSRR = (uint)pin << 0x10;\n    return;\n  }\n  port->BSRR = (uint)pin;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042e2": "set_pin_state_080042e2",
                "GPIOx": "port",
                "GPIO_Pin": "pin",
                "PinState": "state"
            },
            "calling": [
                "digital_io_write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042f0": {
            "entrypoint": "0x080042f0",
            "current_name": "update_gpio_status_080042f0",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid update_gpio_status_080042f0(uint16_t pin)\n\n{\n  if ((_DAT_40010414 & pin) != 0) {\n    _DAT_40010414 = (uint)pin;\n    HAL_GPIO_EXTI_Callback(pin);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042f0": "update_gpio_status_080042f0",
                "GPIO_Pin": "pin"
            },
            "calling": [
                "EXTI15_10_IRQHandler",
                "EXTI3_IRQHandler",
                "EXTI9_5_IRQHandler",
                "EXTI2_IRQHandler",
                "EXTI4_IRQHandler",
                "EXTI1_IRQHandler",
                "EXTI0_IRQHandler"
            ],
            "called": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800430c": {
            "entrypoint": "0x0800430c",
            "current_name": "configure_i2_c_device_0800430c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict configureI2CDevice_0800430c(I2C_HandleTypeDef_conflict *i2cDevice)\n\n{\n  if (i2cDevice->OperationMode == MemoryMode) {\n    if (i2cDevice->EventCount == 0) {\n      i2cDevice->DeviceInstance->DataRegister = i2cDevice->DeviceAddress & 0xfe;\n    }\n    else {\n      i2cDevice->DeviceInstance->DataRegister = i2cDevice->DeviceAddress & 0xff | 1;\n    }\n  }\n  else if ((i2cDevice->Init).AddressingOperationMode == 0x4000) {\n    if (i2cDevice->State == BusyTransmitState) {\n      i2cDevice->DeviceInstance->DataRegister = i2cDevice->DeviceAddress & 0xfe;\n    }\n    else {\n      i2cDevice->DeviceInstance->DataRegister = i2cDevice->DeviceAddress & 0xff | 1;\n    }\n  }\n  else if (i2cDevice->EventCount == 0) {\n    i2cDevice->DeviceInstance->DataRegister = (i2cDevice->DeviceAddress << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (i2cDevice->EventCount == 1) {\n    i2cDevice->DeviceInstance->DataRegister = (i2cDevice->DeviceAddress << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_0800430c": "configure_i2_c_device_0800430c",
                "hi2c": "i2cDevice",
                "HAL_I2C_MODE_MEM": "MemoryMode",
                "HAL_I2C_STATE_BUSY_TX": "BusyTransmitState",
                "Instance": "DeviceInstance",
                "DR": "DataRegister",
                "Devaddress": "DeviceAddress",
                "Mode": "OperationMode"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004396": {
            "entrypoint": "0x08004396",
            "current_name": "set_i2_c_device_address_08004396",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict setI2CDeviceAddress_08004396(I2C_HandleTypeDef_conflict *I2CHandle)\n\n{\n  I2CHandle->i2cInstance->dataRegister = I2CHandle->deviceAddress & 0xff;\n  return successStatus;\n}\n\n",
            "renaming": {
                "FUN_08004396": "set_i2_c_device_address_08004396",
                "hi2c": "I2CHandle",
                "Instance": "i2cInstance",
                "DR": "dataRegister",
                "Devaddress": "deviceAddress",
                "HAL_OK": "successStatus"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043a2": {
            "entrypoint": "0x080043a2",
            "current_name": "update_i2_c_state_080043a2",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict updateI2CState_080043a2(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  uint32_t currentTransferOptions;\n  uint32_t tempVar1;\n  I2C_TypeDef_conflict *i2cInstance;\n  uint32_t previousState;\n  uint32_t tempReg;\n  uint32_t tempReg1;\n  uint32_t tempReg2;\n  uint32_t tempReg3;\n  uint32_t tempReg4;\n  uint32_t tempReg5;\n  uint32_t tempReg6;\n  uint32_t tempReg7;\n  uint32_t tempReg8;\n  uint32_t tempReg9;\n  uint32_t tempReg10;\n  \n  tempVar1 = i2cHandle->XferOptions;\n  if ((i2cHandle->State == HAL_I2C_STATE_BUSY_RX) &&\n     ((i2cHandle->EventCount != 0 || (i2cHandle->Mode != HAL_I2C_MODE_MEM)))) {\n    if ((i2cHandle->EventCount == 0) && ((i2cHandle->Init).AddressingMode == 0xc000)) {\n      i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x100;\n      i2cHandle->EventCount = i2cHandle->EventCount + 1;\n    }\n    else {\n      if (i2cHandle->XferCount == 0) {\n        i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x200;\n      }\n      else if (i2cHandle->XferCount == 1) {\n        if (tempVar1 == 0xffff0000) {\n          i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffbff;\n          i2cInstance = i2cHandle->Instance;\n          if ((i2cInstance->CR2 & 0x800) == 0) {\n            i2cInstance->CR1 = i2cInstance->CR1 | 0x200;\n          }\n          else {\n            i2cInstance->CR1 = i2cInstance->CR1 & 0xfffffbff;\n          }\n        }\n        else if (((tempVar1 == 4) || (tempVar1 == 8)) || (i2cHandle->PreviousState == 0x12)) {\n          i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffbff;\n          i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x200;\n        }\n        else if (i2cHandle->XferOptions == 2) {\n          i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x400;\n        }\n        else {\n          i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffbff;\n        }\n      }\n      else if (i2cHandle->XferCount == 2) {\n        if (i2cHandle->XferOptions == 2) {\n          i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x400;\n        }\n        else {\n          i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x800;\n          i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffbff;\n        }\n        i2cInstance = i2cHandle->Instance;\n        if ((i2cInstance->CR2 & 0x800) != 0) {\n          i2cInstance->CR2 = i2cInstance->CR2 | 0x1000;\n        }\n      }\n      else {\n        i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x400;\n        i2cInstance = i2cHandle->Instance;\n        if ((i2cInstance->CR2 & 0x800) != 0) {\n          i2cInstance->CR2 = i2cInstance->CR2 | 0x1000;\n        }\n      }\n      i2cHandle->EventCount = 0;\n    }\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_080043a2": "update_i2_c_state_080043a2",
                "hi2c": "i2cHandle",
                "CurrentXferOptions": "currentTransferOptions",
                "uVar1": "tempVar1",
                "pIVar2": "i2cInstance",
                "Prev_State": "previousState",
                "tmpreg": "tempReg",
                "tmpreg_1": "tempReg1",
                "tmpreg_2": "tempReg2",
                "tmpreg_3": "tempReg3",
                "tmpreg_4": "tempReg4",
                "tmpreg_5": "tempReg5",
                "tmpreg_6": "tempReg6",
                "tmpreg_7": "tempReg7",
                "tmpreg_8": "tempReg8",
                "tmpreg_9": "tempReg9",
                "tmpreg_10": "tempReg10"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800457c": {
            "entrypoint": "0x0800457c",
            "current_name": "handle_i2c_transfer_0800457c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict handleI2cTransfer_0800457c(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  byte *pbVar1;\n  \n  if (i2cHandle->transferCount != 0) {\n    pbVar1 = i2cHandle->bufferPtr;\n    i2cHandle->bufferPtr = pbVar1 + 1;\n    i2cHandle->i2cInstance->dataRegister = (uint)*pbVar1;\n    i2cHandle->transferCount = i2cHandle->transferCount - 1;\n  }\n  return HAL_Operation_Success;\n}\n\n",
            "renaming": {
                "FUN_0800457c": "handle_i2c_transfer_0800457c",
                "hi2c": "i2cHandle",
                "XferCount": "transferCount",
                "pBuffPtr": "bufferPtr",
                "Instance": "i2cInstance",
                "DR": "dataRegister",
                "HAL_OK": "HAL_Operation_Success"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800459c": {
            "entrypoint": "0x0800459c",
            "current_name": "read_from_i2_c_0800459c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict readFromI2C_0800459c(I2C_HandleTypeDef_conflict *i2cHandler)\n\n{\n  uint8_t *puVar1;\n  \n  if (i2cHandler->transferCount != 0) {\n    puVar1 = i2cHandler->bufferPointer;\n    i2cHandler->bufferPointer = puVar1 + 1;\n    *puVar1 = (uint8_t)i2cHandler->i2cInstance->dataRegister;\n    i2cHandler->transferCount = i2cHandler->transferCount - 1;\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_0800459c": "read_from_i2_c_0800459c",
                "hi2c": "i2cHandler",
                "XferCount": "transferCount",
                "pBuffPtr": "bufferPointer",
                "Instance": "i2cInstance",
                "DR": "dataRegister"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080045bc": {
            "entrypoint": "0x080045bc",
            "current_name": "FUNC_080045bc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_080045bc(I2C_HandleTypeDef_conflict *hi2c)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080045bc": "FUNC_080045bc"
            },
            "calling": [
                "HAL_I2C_Init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080045c0": {
            "entrypoint": "0x080045c0",
            "current_name": "configure_i2_c_080045c0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict configureI2C_080045c0(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  bool isValidClockSpeed;\n  uint32_t pclk1Freq;\n  uint i2cFreq;\n  uint riseTime;\n  uint32_t dutyCycle;\n  \n  if (i2cHandle == (I2C_HandleTypeDef_conflict *)0x0) {\n    return HAL_ERROR;\n  }\n  if (i2cHandle->State == HAL_I2C_STATE_RESET) {\n    i2cHandle->Lock = HAL_UNLOCKED;\n    HAL_I2C_MspInit(i2cHandle);\n  }\n  i2cHandle->State = HAL_I2C_STATE_BUSY;\n  i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffffe;\n  pclk1Freq = HAL_RCC_GetPCLK1Freq();\n  if ((i2cHandle->Init).ClockSpeed < 0x186a1) {\n    if (pclk1Freq < 2000000) {\n      isValidClockSpeed = true;\n    }\n    else {\n      isValidClockSpeed = false;\n    }\n  }\n  else {\n    isValidClockSpeed = pclk1Freq < 4000000;\n  }\n  if (isValidClockSpeed) {\n    return HAL_ERROR;\n  }\n  i2cFreq = pclk1Freq / 1000000;\n  i2cHandle->Instance->CR2 = i2cFreq;\n  if (100000 < (i2cHandle->Init).ClockSpeed) {\n    i2cFreq = (i2cFreq * 300) / 1000;\n  }\n  i2cHandle->Instance->TRISE = i2cFreq + 1;\n  i2cFreq = (i2cHandle->Init).ClockSpeed;\n  if (i2cFreq < 0x186a1) {\n    pclk1Freq = (pclk1Freq - 1) / (i2cFreq << 1) + 1 & 0xfff;\n    if (pclk1Freq < 4) {\n      pclk1Freq = 4;\n    }\n  }\n  else {\n    dutyCycle = (i2cHandle->Init).DutyCycle;\n    if (dutyCycle == 0) {\n      riseTime = (pclk1Freq - 1) / (i2cFreq * 3);\n    }\n    else {\n      riseTime = (pclk1Freq - 1) / (i2cFreq * 0x19);\n    }\n    if ((riseTime + 1 & 0xfff) == 0) {\n      pclk1Freq = 1;\n    }\n    else if (dutyCycle == 0) {\n      pclk1Freq = (pclk1Freq - 1) / (i2cFreq * 3) + 1 & 0xfff | 0x8000;\n    }\n    else {\n      pclk1Freq = (pclk1Freq - 1) / (i2cFreq * 0x19) + 1 & 0xfff | 0xc000;\n    }\n  }\n  i2cHandle->Instance->CCR = pclk1Freq;\n  i2cHandle->Instance->CR1 = (i2cHandle->Init).GeneralCallMode | (i2cHandle->Init).NoStretchMode;\n  i2cHandle->Instance->OAR1 = (i2cHandle->Init).AddressingMode | (i2cHandle->Init).OwnAddress1;\n  i2cHandle->Instance->OAR2 = (i2cHandle->Init).DualAddressMode | (i2cHandle->Init).OwnAddress2;\n  i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 1;\n  i2cHandle->ErrorCode = 0;\n  i2cHandle->State = HAL_I2C_STATE_READY;\n  i2cHandle->PreviousState = 0;\n  i2cHandle->Mode = HAL_I2C_MODE_NONE;\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_080045c0": "configure_i2_c_080045c0",
                "hi2c": "i2cHandle",
                "bVar1": "isValidClockSpeed",
                "uVar2": "pclk1Freq",
                "uVar3": "i2cFreq",
                "uVar4": "riseTime",
                "uVar5": "dutyCycle"
            },
            "calling": [
                "i2c_custom_init"
            ],
            "called": [
                "HAL_I2C_MspInit",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004728": {
            "entrypoint": "0x08004728",
            "current_name": "transmit_data_08004728",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict\ntransmitData_08004728(I2C_HandleTypeDef_conflict *i2cHandle,uint16_t deviceAddress,uint8_t *data,uint16_t dataSize)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  I2C_TypeDef *pIVar2;\n  uint32_t counter;\n  \n  if (i2cHandle->State == HAL_I2C_STATE_READY) {\n    counter = (systemClock / 25000) * 0x19;\n    do {\n      if (counter == 0) {\n        i2cHandle->PreviousState = 0;\n        i2cHandle->State = HAL_I2C_STATE_READY;\n        i2cHandle->Lock = HAL_UNLOCKED;\n        return HAL_TIMEOUT;\n      }\n      pIVar2 = i2cHandle->Instance;\n      counter = counter - 1;\n    } while ((pIVar2->SR2 & 2) != 0);\n    if (i2cHandle->Lock == HAL_LOCKED) {\n      status = HAL_BUSY;\n    }\n    else {\n      i2cHandle->Lock = HAL_LOCKED;\n      if ((pIVar2->CR1 & 1) == 0) {\n        pIVar2->CR1 = pIVar2->CR1 | 1;\n      }\n      i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffff7ff;\n      i2cHandle->State = HAL_I2C_STATE_BUSY_TX;\n      i2cHandle->Mode = HAL_I2C_MODE_MASTER;\n      status = HAL_OK;\n      i2cHandle->ErrorCode = 0;\n      i2cHandle->pBuffPtr = data;\n      i2cHandle->XferCount = dataSize;\n      i2cHandle->XferOptions = 0xffff0000;\n      i2cHandle->XferdataSize = i2cHandle->XferCount;\n      i2cHandle->Devaddress = (uint)deviceAddress;\n      i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x100;\n      i2cHandle->Lock = HAL_UNLOCKED;\n      i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 | 0x700;\n    }\n  }\n  else {\n    status = HAL_BUSY;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08004728": "transmit_data_08004728",
                "hi2c": "i2cHandle",
                "DevAddress": "deviceAddress",
                "pData": "data",
                "Size": "dataSize",
                "HVar1": "status",
                "I2C_TypeDef_conflict": "I2C_TypeDef",
                "count": "counter",
                "SystemCoreClock": "systemClock"
            },
            "calling": [
                "i2c_master_write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047f4": {
            "entrypoint": "0x080047f4",
            "current_name": "initialize_i2_c_transfer_080047f4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict\ninitializeI2CTransfer_080047f4(I2C_HandleTypeDef_conflict *i2cHandle,uint16_t deviceAddress,uint8_t *dataBuffer,uint16_t dataSize)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  I2C_TypeDef_conflict *i2cInstance;\n  uint32_t timeoutCount;\n  \n  if (i2cHandle->State == HAL_I2C_STATE_READY) {\n    timeoutCount = (SystemCoreClock / 25000) * 0x19;\n    do {\n      if (timeoutCount == 0) {\n        i2cHandle->PreviousState = 0;\n        i2cHandle->State = HAL_I2C_STATE_READY;\n        i2cHandle->Lock = HAL_UNLOCKED;\n        return HAL_TIMEOUT;\n      }\n      i2cInstance = i2cHandle->Instance;\n      timeoutCount = timeoutCount - 1;\n    } while ((i2cInstance->SR2 & 2) != 0);\n    if (i2cHandle->Lock == HAL_LOCKED) {\n      status = HAL_BUSY;\n    }\n    else {\n      i2cHandle->Lock = HAL_LOCKED;\n      if ((i2cInstance->CR1 & 1) == 0) {\n        i2cInstance->CR1 = i2cInstance->CR1 | 1;\n      }\n      i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffff7ff;\n      i2cHandle->State = HAL_I2C_STATE_BUSY_RX;\n      i2cHandle->Mode = HAL_I2C_MODE_MASTER;\n      status = HAL_OK;\n      i2cHandle->ErrorCode = 0;\n      i2cHandle->pBuffPtr = dataBuffer;\n      i2cHandle->XferCount = dataSize;\n      i2cHandle->XferOptions = 0xffff0000;\n      i2cHandle->XferdataSize = i2cHandle->XferCount;\n      i2cHandle->Devaddress = (uint)deviceAddress;\n      i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x400;\n      i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x100;\n      i2cHandle->Lock = HAL_UNLOCKED;\n      i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 | 0x700;\n    }\n  }\n  else {\n    status = HAL_BUSY;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_080047f4": "initialize_i2_c_transfer_080047f4",
                "hi2c": "i2cHandle",
                "DevAddress": "deviceAddress",
                "pData": "dataBuffer",
                "Size": "dataSize",
                "HVar1": "status",
                "pIVar2": "i2cInstance",
                "count": "timeoutCount"
            },
            "calling": [
                "i2c_master_read"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048c8": {
            "entrypoint": "0x080048c8",
            "current_name": "configure_i2_c_080048c8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict\nconfigureI2C_080048c8(I2C_HandleTypeDef_conflict *i2cHandle,uint8_t *data,uint16_t size,uint32_t transferOptions)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  I2C_TypeDef_conflict *i2cInstance;\n  uint32_t temporaryRegister;\n  \n  if (i2cHandle->State == HAL_I2C_STATE_LISTEN) {\n    if (data == (uint8_t *)0x0) {\n      status = HAL_ERROR;\n    }\n    else if (size == 0) {\n      status = HAL_ERROR;\n    }\n    else if (i2cHandle->Lock == HAL_LOCKED) {\n      status = HAL_BUSY;\n    }\n    else {\n      i2cHandle->Lock = HAL_LOCKED;\n      i2cInstance = i2cHandle->Instance;\n      if ((i2cInstance->CR1 & 1) == 0) {\n        i2cInstance->CR1 = i2cInstance->CR1 | 1;\n      }\n      i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffff7ff;\n      i2cHandle->State = HAL_I2C_STATE_BUSY_TX_LISTEN;\n      i2cHandle->Mode = HAL_I2C_MODE_SLAVE;\n      status = HAL_OK;\n      i2cHandle->ErrorCode = 0;\n      i2cHandle->pBuffPtr = data;\n      i2cHandle->XferCount = size;\n      i2cHandle->transferOptions = transferOptions;\n      i2cHandle->Xfersize = i2cHandle->XferCount;\n      i2cHandle->Lock = HAL_UNLOCKED;\n      i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 | 0x700;\n    }\n  }\n  else {\n    status = HAL_BUSY;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_080048c8": "configure_i2_c_080048c8",
                "hi2c": "i2cHandle",
                "pData": "data",
                "Size": "size",
                "XferOptions": "transferOptions",
                "HVar1": "status",
                "pIVar2": "i2cInstance",
                "tmpreg": "temporaryRegister"
            },
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004954": {
            "entrypoint": "0x08004954",
            "current_name": "configure_i2_c_as_slave_08004954",
            "code": "\n/* WARNING: Unknown calling convention */\n\nstatusConflict\nconfigureI2CAsSlave_08004954(i2cHandleConflict *i2cHandle,uint8_t *dataBuffer,uint16_t dataSize,uint32_t transferOptions)\n\n{\n  statusConflict status;\n  i2cTypeDefConflict *i2cInstance;\n  uint32_t temporaryRegister;\n  \n  if (i2cHandle->State == HAL_I2C_STATE_LISTEN) {\n    if (dataBuffer == (uint8_t *)0x0) {\n      status = HAL_ERROR;\n    }\n    else if (dataSize == 0) {\n      status = HAL_ERROR;\n    }\n    else if (i2cHandle->Lock == HAL_LOCKED) {\n      status = HAL_BUSY;\n    }\n    else {\n      i2cHandle->Lock = HAL_LOCKED;\n      i2cInstance = i2cHandle->Instance;\n      if ((i2cInstance->CR1 & 1) == 0) {\n        i2cInstance->CR1 = i2cInstance->CR1 | 1;\n      }\n      i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffff7ff;\n      i2cHandle->State = HAL_I2C_STATE_BUSY_RX_LISTEN;\n      i2cHandle->Mode = HAL_I2C_MODE_SLAVE;\n      status = HAL_OK;\n      i2cHandle->ErrorCode = 0;\n      i2cHandle->pBuffPtr = dataBuffer;\n      i2cHandle->XferCount = dataSize;\n      i2cHandle->transferOptions = transferOptions;\n      i2cHandle->XferdataSize = i2cHandle->XferCount;\n      i2cHandle->Lock = HAL_UNLOCKED;\n      i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 | 0x700;\n    }\n  }\n  else {\n    status = HAL_BUSY;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08004954": "configure_i2_c_as_slave_08004954",
                "hi2c": "i2cHandle",
                "pData": "dataBuffer",
                "Size": "dataSize",
                "XferOptions": "transferOptions",
                "HAL_StatusTypeDef_conflict": "statusConflict",
                "I2C_HandleTypeDef_conflict": "i2cHandleConflict",
                "I2C_TypeDef_conflict": "i2cTypeDefConflict",
                "tmpreg": "temporaryRegister",
                "HVar1": "status",
                "pIVar2": "i2cInstance"
            },
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049e0": {
            "entrypoint": "0x080049e0",
            "current_name": "configure_i2_c_080049e0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict configureI2C_080049e0(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  I2C_TypeDef *i2cTypeDef;\n  \n  if (i2cHandle->currentState != HAL_I2C_STATE_READY) {\n    return HAL_BUSY;\n  }\n  i2cHandle->currentState = HAL_I2C_STATE_LISTEN;\n  i2cTypeDef = i2cHandle->Instance;\n  if ((i2cTypeDef->controlRegister1 & 1) == 0) {\n    i2cTypeDef->controlRegister1 = i2cTypeDef->controlRegister1 | 1;\n  }\n  i2cHandle->Instance->controlRegister1 = i2cHandle->Instance->controlRegister1 | 0x400;\n  i2cHandle->Instance->controlRegister2 = i2cHandle->Instance->controlRegister2 | 0x300;\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_080049e0": "configure_i2_c_080049e0",
                "hi2c": "i2cHandle",
                "State": "currentState",
                "I2C_TypeDef_conflict": "I2C_TypeDef",
                "pIVar1": "i2cTypeDef",
                "CR1": "controlRegister1",
                "CR2": "controlRegister2"
            },
            "calling": [
                "HAL_I2C_ListenCpltCallback",
                "i2c_attachSlaveTxEvent",
                "i2c_attachSlaveRxEvent",
                "HAL_I2C_ErrorCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a1e": {
            "entrypoint": "0x08004a1e",
            "current_name": "FUNC_08004a1e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08004a1e(I2C_HandleTypeDef_conflict *hi2c)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a1e": "FUNC_08004a1e"
            },
            "calling": [
                "I2C_MasterTransmit_BTF",
                "I2C_MasterTransmit_TXE"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a20": {
            "entrypoint": "0x08004a20",
            "current_name": "FUNC_08004a20",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08004a20(I2C_HandleTypeDef_conflict *hi2c)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a20": "FUNC_08004a20"
            },
            "calling": [
                "I2C_MasterReceive_RXNE",
                "I2C_MasterReceive_BTF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a22": {
            "entrypoint": "0x08004a22",
            "current_name": "FUNC_08004a22",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08004a22(I2C_HandleTypeDef_conflict *hi2c)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a22": "FUNC_08004a22"
            },
            "calling": [
                "I2C_Slave_AF",
                "I2C_SlaveTransmit_TXE"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a24": {
            "entrypoint": "0x08004a24",
            "current_name": "send_byte_08004a24",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict sendByte_08004a24(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  HAL_I2C_StateTypeDef_conflict currentState;\n  byte *bufferPtr;\n  \n  currentState = i2cHandle->State;\n  if (i2cHandle->XferCount != 0) {\n    bufferPtr = i2cHandle->pBuffPtr;\n    i2cHandle->pBuffPtr = bufferPtr + 1;\n    i2cHandle->Instance->DR = (uint)*bufferPtr;\n    i2cHandle->XferCount = i2cHandle->XferCount - 1;\n    if ((i2cHandle->XferCount == 0) && (currentState == HAL_I2C_STATE_BUSY_TX_LISTEN)) {\n      i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffffbff;\n      i2cHandle->PreviousState = 0x21;\n      i2cHandle->State = HAL_I2C_STATE_LISTEN;\n      HAL_I2C_SlaveTxCpltCallback(i2cHandle);\n    }\n    return HAL_OK;\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08004a24": "send_byte_08004a24",
                "hi2c": "i2cHandle",
                "HVar1": "currentState",
                "pbVar2": "bufferPtr"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_SlaveTxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a74": {
            "entrypoint": "0x08004a74",
            "current_name": "FUNC_08004a74",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08004a74(I2C_HandleTypeDef_conflict *hi2c)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a74": "FUNC_08004a74"
            },
            "calling": [
                "I2C_SlaveReceive_RXNE",
                "I2C_Slave_STOPF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a76": {
            "entrypoint": "0x08004a76",
            "current_name": "read_from_i2_c_08004a76",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict readFromI2C_08004a76(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  HAL_I2C_StateTypeDef_conflict currentState;\n  uint8_t *bufferPtr;\n  \n  currentState = i2cHandle->State;\n  if (i2cHandle->transferCount != 0) {\n    bufferPtr = i2cHandle->pBuffPtr;\n    i2cHandle->pBuffPtr = bufferPtr + 1;\n    *bufferPtr = (uint8_t)i2cHandle->i2cInstance->DR;\n    i2cHandle->transferCount = i2cHandle->transferCount - 1;\n    if ((i2cHandle->transferCount == 0) && (currentState == HAL_I2C_STATE_BUSY_RX_LISTEN)) {\n      i2cHandle->i2cInstance->CR2 = i2cHandle->i2cInstance->CR2 & 0xfffffbff;\n      i2cHandle->PreviousState = 0x22;\n      i2cHandle->State = HAL_I2C_STATE_LISTEN;\n      HAL_I2C_SlaveRxCpltCallback(i2cHandle);\n    }\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08004a76": "read_from_i2_c_08004a76",
                "hi2c": "i2cHandle",
                "HVar1": "currentState",
                "puVar2": "bufferPtr",
                "Instance": "i2cInstance",
                "XferCount": "transferCount"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_SlaveRxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ac2": {
            "entrypoint": "0x08004ac2",
            "current_name": "handle_i2_c_address_match_08004ac2",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict handleI2CAddressMatch_08004ac2(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  uint16_t addressMatchCode;\n  \n  if ((i2cHandle->Instance->SR2 & 0x80) == 0) {\n    addressMatchCode = *(uint16_t *)&(i2cHandle->Init).OwnAddress1;\n  }\n  else {\n    addressMatchCode = *(uint16_t *)&(i2cHandle->Init).OwnAddress2;\n  }\n  HAL_I2C_AddrCallback(i2cHandle,(i2cHandle->Instance->SR2 & 4) == 0,addressMatchCode);\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08004ac2": "handle_i2_c_address_match_08004ac2",
                "hi2c": "i2cHandle",
                "AddrMatchCode": "addressMatchCode"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_AddrCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004aec": {
            "entrypoint": "0x08004aec",
            "current_name": "handle_i2_c_state_08004aec",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict handleI2CState_08004aec(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  uint32_t currentTransferOptions;\n  uint32_t currentState;\n  \n  if (((i2cHandle->XferOptions == 4) || (i2cHandle->XferOptions == 8)) &&\n     (i2cHandle->State == HAL_I2C_STATE_LISTEN)) {\n    i2cHandle->XferOptions = 0xffff0000;\n    i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffff8ff;\n    i2cHandle->Instance->SR1 = 0xfffffbff;\n    i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffbff;\n    i2cHandle->PreviousState = 0;\n    i2cHandle->State = HAL_I2C_STATE_READY;\n    i2cHandle->Mode = HAL_I2C_MODE_NONE;\n    HAL_I2C_ListenCpltCallback(i2cHandle);\n  }\n  else if (i2cHandle->State == HAL_I2C_STATE_BUSY_TX) {\n    i2cHandle->XferOptions = 0xffff0000;\n    i2cHandle->PreviousState = 0x21;\n    i2cHandle->State = HAL_I2C_STATE_READY;\n    i2cHandle->Mode = HAL_I2C_MODE_NONE;\n    i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffff8ff;\n    i2cHandle->Instance->SR1 = 0xfffffbff;\n    i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffbff;\n    HAL_I2C_SlaveTxCpltCallback(i2cHandle);\n  }\n  else {\n    i2cHandle->Instance->SR1 = 0xfffffbff;\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08004aec": "handle_i2_c_state_08004aec",
                "hi2c": "i2cHandle",
                "CurrentXferOptions": "currentTransferOptions",
                "CurrentState": "currentState"
            },
            "calling": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "called": [
                "HAL_I2C_ListenCpltCallback",
                "HAL_I2C_SlaveTxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b80": {
            "entrypoint": "0x08004b80",
            "current_name": "FUNC_08004b80",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08004b80(I2C_HandleTypeDef_conflict *hi2c)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b80": "FUNC_08004b80"
            },
            "calling": [
                "I2C_MasterTransmit_BTF",
                "I2C_MasterTransmit_TXE"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004b82": {
            "entrypoint": "0x08004b82",
            "current_name": "update_i2_c_state_08004b82",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict updateI2CState_08004b82(I2C_HandleTypeDef_conflict *i2c_handle)\n\n{\n  HAL_I2C_StateTypeDef_conflict current_state;\n  uint32_t current_state;\n  byte *byte_pointer;\n  uint32_t current_xfer_options;\n  uint32_t current_xfer_options;\n  \n  current_state = i2c_handle->State;\n  current_xfer_options = i2c_handle->XferOptions;\n  if ((i2c_handle->XferSize == 0) && (current_state == HAL_I2C_STATE_BUSY_TX)) {\n    if ((current_xfer_options == 4) || ((current_xfer_options == 8 || (current_xfer_options == 0xffff0000)))) {\n      i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 & 0xfffff8ff;\n      i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 | 0x200;\n      i2c_handle->PreviousState = 0;\n      i2c_handle->State = HAL_I2C_STATE_READY;\n      if (i2c_handle->Mode == HAL_I2C_MODE_MEM) {\n        i2c_handle->Mode = HAL_I2C_MODE_NONE;\n        HAL_I2C_MemTxCpltCallback(i2c_handle);\n      }\n      else {\n        i2c_handle->Mode = HAL_I2C_MODE_NONE;\n        HAL_I2C_MasterTxCpltCallback(i2c_handle);\n      }\n    }\n    else {\n      i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 & 0xfffff8ff;\n      i2c_handle->PreviousState = 0x11;\n      i2c_handle->Mode = HAL_I2C_MODE_NONE;\n      i2c_handle->State = HAL_I2C_STATE_READY;\n      HAL_I2C_MasterTxCpltCallback(i2c_handle);\n    }\n  }\n  else if ((current_state == HAL_I2C_STATE_BUSY_TX) ||\n          ((i2c_handle->Mode == HAL_I2C_MODE_MEM && (current_state == HAL_I2C_STATE_BUSY_RX)))) {\n    if (i2c_handle->XferCount == 0) {\n      i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 & 0xfffffbff;\n    }\n    else if (i2c_handle->Mode == HAL_I2C_MODE_MEM) {\n      if (i2c_handle->EventCount == 0) {\n        if (i2c_handle->MemaddSize == 1) {\n          i2c_handle->Instance->DR = i2c_handle->Memaddress & 0xff;\n          i2c_handle->EventCount = i2c_handle->EventCount + 2;\n        }\n        else {\n          i2c_handle->Instance->DR = (i2c_handle->Memaddress << 0x10) >> 0x18;\n          i2c_handle->EventCount = i2c_handle->EventCount + 1;\n        }\n      }\n      else if (i2c_handle->EventCount == 1) {\n        i2c_handle->Instance->DR = i2c_handle->Memaddress & 0xff;\n        i2c_handle->EventCount = i2c_handle->EventCount + 1;\n      }\n      else if (i2c_handle->EventCount == 2) {\n        if (i2c_handle->State == HAL_I2C_STATE_BUSY_RX) {\n          i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 | 0x100;\n        }\n        else if (i2c_handle->State == HAL_I2C_STATE_BUSY_TX) {\n          byte_pointer = i2c_handle->pBuffPtr;\n          i2c_handle->pBuffPtr = byte_pointer + 1;\n          i2c_handle->Instance->DR = (uint)*byte_pointer;\n          i2c_handle->XferCount = i2c_handle->XferCount - 1;\n        }\n      }\n    }\n    else {\n      byte_pointer = i2c_handle->pBuffPtr;\n      i2c_handle->pBuffPtr = byte_pointer + 1;\n      i2c_handle->Instance->DR = (uint)*byte_pointer;\n      i2c_handle->XferCount = i2c_handle->XferCount - 1;\n    }\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08004b82": "update_i2_c_state_08004b82",
                "hi2c": "i2c_handle",
                "HVar1": "current_state",
                "CurrentState": "current_state",
                "pbVar2": "byte_pointer",
                "CurrentXferOptions": "current_xfer_options",
                "uVar3": "current_xfer_options"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MasterTxCpltCallback",
                "HAL_I2C_MemTxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "process_i2_c_transfer_08004ccc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict processI2CTransfer_08004ccc(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  uint32_t transferOptions;\n  uint32_t currentTransferOptions;\n  byte *bufferPtr;\n  \n  transferOptions = i2cHandle->transferOptions;\n  if (i2cHandle->State == I2C_STATE_BUSY_TX) {\n    if (i2cHandle->transferCount == 0) {\n      if (((transferOptions == 4) || (transferOptions == 8)) || (transferOptions == 0xffff0000)) {\n        i2cHandle->i2cInstance->controlRegister2 = i2cHandle->i2cInstance->controlRegister2 & 0xfffff8ff;\n        i2cHandle->i2cInstance->controlRegister1 = i2cHandle->i2cInstance->controlRegister1 | 0x200;\n        i2cHandle->previousState = 0;\n        i2cHandle->State = I2C_STATE_READY;\n        if (i2cHandle->Mode == I2C_MODE_MEM) {\n          i2cHandle->Mode = I2C_MODE_NONE;\n          memTxCompleteCallback(i2cHandle);\n        }\n        else {\n          i2cHandle->Mode = I2C_MODE_NONE;\n          masterTxCompleteCallback(i2cHandle);\n        }\n      }\n      else {\n        i2cHandle->i2cInstance->controlRegister2 = i2cHandle->i2cInstance->controlRegister2 & 0xfffff8ff;\n        i2cHandle->previousState = 0x11;\n        i2cHandle->Mode = I2C_MODE_NONE;\n        i2cHandle->State = I2C_STATE_READY;\n        masterTxCompleteCallback(i2cHandle);\n      }\n    }\n    else {\n      bufferPtr = i2cHandle->pBuffPtr;\n      i2cHandle->pBuffPtr = bufferPtr + 1;\n      i2cHandle->i2cInstance->dataRegister = (uint)*bufferPtr;\n      i2cHandle->transferCount = i2cHandle->transferCount - 1;\n    }\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "process_i2_c_transfer_08004ccc",
                "hi2c": "i2cHandle",
                "uVar1": "transferOptions",
                "CurrentXferOptions": "currentTransferOptions",
                "pbVar2": "bufferPtr",
                "HAL_I2C_STATE_BUSY_TX": "I2C_STATE_BUSY_TX",
                "HAL_I2C_STATE_READY": "I2C_STATE_READY",
                "HAL_I2C_MODE_MEM": "I2C_MODE_MEM",
                "HAL_I2C_MODE_NONE": "I2C_MODE_NONE",
                "CR2": "controlRegister2",
                "CR1": "controlRegister1",
                "DR": "dataRegister",
                "XferOptions": "transferOptions",
                "XferCount": "transferCount",
                "Instance": "i2cInstance",
                "PreviousState": "previousState",
                "HAL_I2C_MemTxCpltCallback": "memTxCompleteCallback",
                "HAL_I2C_MasterTxCpltCallback": "masterTxCompleteCallback"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MasterTxCpltCallback",
                "HAL_I2C_MemTxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d6a": {
            "entrypoint": "0x08004d6a",
            "current_name": "FUNC_08004d6a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08004d6a(I2C_HandleTypeDef_conflict *hi2c)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d6a": "FUNC_08004d6a"
            },
            "calling": [
                "I2C_MasterReceive_RXNE",
                "I2C_MasterReceive_BTF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004d6c": {
            "entrypoint": "0x08004d6c",
            "current_name": "handle_i2_c_rx_transfer_08004d6c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef handleI2CRxTransfer_08004d6c(I2C_HandleTypeDef *i2cHandle)\n\n{\n  uint8_t *dataBuffer;\n  \n  if (i2cHandle->State == HAL_I2C_STATE_BUSY_RX) {\n    if (i2cHandle->XferCount < 4) {\n      if (i2cHandle->XferCount - 2 < 2) {\n        if (i2cHandle->XferOptions == 2) {\n          i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x400;\n        }\n        else {\n          i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffbff;\n          i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x800;\n        }\n        i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffffbff;\n      }\n      else {\n        if (i2cHandle->XferOptions == 2) {\n          i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x400;\n        }\n        else {\n          i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffbff;\n        }\n        i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffff8ff;\n        dataBuffer = i2cHandle->pBuffPtr;\n        i2cHandle->pBuffPtr = dataBuffer + 1;\n        *dataBuffer = (uint8_t)i2cHandle->Instance->DR;\n        i2cHandle->XferCount = i2cHandle->XferCount - 1;\n        i2cHandle->State = HAL_I2C_STATE_READY;\n        i2cHandle->PreviousState = 0;\n        if (i2cHandle->Mode == HAL_I2C_MODE_MEM) {\n          i2cHandle->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MemRxCpltCallback(i2cHandle);\n        }\n        else {\n          i2cHandle->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MasterRxCpltCallback(i2cHandle);\n        }\n      }\n    }\n    else {\n      dataBuffer = i2cHandle->pBuffPtr;\n      i2cHandle->pBuffPtr = dataBuffer + 1;\n      *dataBuffer = (uint8_t)i2cHandle->Instance->DR;\n      i2cHandle->XferCount = i2cHandle->XferCount - 1;\n    }\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08004d6c": "handle_i2_c_rx_transfer_08004d6c",
                "hi2c": "i2cHandle",
                "puVar1": "dataBuffer",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "I2C_HandleTypeDef_conflict": "I2C_HandleTypeDef"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MasterRxCpltCallback",
                "HAL_I2C_MemRxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e3c": {
            "entrypoint": "0x08004e3c",
            "current_name": "receive_i2_c_data_08004e3c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict receive_I2C_data_08004e3c(I2C_HandleTypeDef_conflict *i2c_handle)\n\n{\n  uint32_t transfer_options;\n  uint32_t current_transfer_options;\n  uint8_t *buffer_ptr;\n  \n  transfer_options = i2c_handle->XferOptions;\n  if (i2c_handle->XferCount == 3) {\n    if (((transfer_options == 4) || (transfer_options == 8)) || (transfer_options == 0xffff0000)) {\n      i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 & 0xfffffbff;\n    }\n    buffer_ptr = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = buffer_ptr + 1;\n    *buffer_ptr = (uint8_t)i2c_handle->Instance->DR;\n    i2c_handle->XferCount = i2c_handle->XferCount - 1;\n  }\n  else if (i2c_handle->XferCount == 2) {\n    if (((transfer_options == 4) || (transfer_options == 8)) || (transfer_options == 0xffff0000)) {\n      i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 & 0xfffffcff;\n      i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 | 0x200;\n    }\n    else {\n      if (transfer_options == 2) {\n        i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 | 0x400;\n      }\n      else {\n        i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 & 0xfffffbff;\n      }\n      i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 & 0xfffffcff;\n    }\n    buffer_ptr = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = buffer_ptr + 1;\n    *buffer_ptr = (uint8_t)i2c_handle->Instance->DR;\n    i2c_handle->XferCount = i2c_handle->XferCount - 1;\n    buffer_ptr = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = buffer_ptr + 1;\n    *buffer_ptr = (uint8_t)i2c_handle->Instance->DR;\n    i2c_handle->XferCount = i2c_handle->XferCount - 1;\n    i2c_handle->State = HAL_I2C_STATE_READY;\n    i2c_handle->PreviousState = 0;\n    if (i2c_handle->Mode == HAL_I2C_MODE_MEM) {\n      i2c_handle->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_MemRxCpltCallback(i2c_handle);\n    }\n    else {\n      i2c_handle->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_MasterRxCpltCallback(i2c_handle);\n    }\n  }\n  else {\n    buffer_ptr = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = buffer_ptr + 1;\n    *buffer_ptr = (uint8_t)i2c_handle->Instance->DR;\n    i2c_handle->XferCount = i2c_handle->XferCount - 1;\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08004e3c": "receive_i2_c_data_08004e3c",
                "hi2c": "i2c_handle",
                "puVar2": "buffer_ptr",
                "uVar1": "transfer_options",
                "CurrentXferOptions": "current_transfer_options"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MasterRxCpltCallback",
                "HAL_I2C_MemRxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3a": {
            "entrypoint": "0x08004f3a",
            "current_name": "FUNC_08004f3a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08004f3a(I2C_HandleTypeDef_conflict *hi2c)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3a": "FUNC_08004f3a"
            },
            "calling": [
                "I2C_ITError",
                "I2C_DMAAbort"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3c": {
            "entrypoint": "0x08004f3c",
            "current_name": "handle_i2_c_state_08004f3c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleI2CState_08004f3c(I2C_HandleTypeDef_conflict *i2c_handle)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint8_t *bufferPtr;\n  I2C_TypeDef_conflict *i2c_instance;\n  \n  if (i2c_handle->State - 0x29 < 2) {\n    i2c_handle->PreviousState = 0;\n    i2c_handle->State = HAL_I2C_STATE_LISTEN;\n  }\n  else {\n    if ((i2c_handle->State != HAL_I2C_STATE_ABORT) && ((i2c_handle->Instance->CR2 & 0x800) == 0)) {\n      i2c_handle->State = HAL_I2C_STATE_READY;\n    }\n    i2c_handle->PreviousState = 0;\n    i2c_handle->Mode = HAL_I2C_MODE_NONE;\n  }\n  i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 & 0xfffff7ff;\n  i2c_instance = i2c_handle->Instance;\n  if ((i2c_instance->CR2 & 0x800) == 0) {\n    if (i2c_handle->State == HAL_I2C_STATE_ABORT) {\n      i2c_handle->State = HAL_I2C_STATE_READY;\n      i2c_handle->ErrorCode = 0;\n      if ((i2c_instance->SR1 & 0x40) != 0) {\n        bufferPtr = i2c_handle->pBuffPtr;\n        i2c_handle->pBuffPtr = bufferPtr + 1;\n        *bufferPtr = (uint8_t)i2c_instance->DR;\n      }\n      i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 & 0xfffffffe;\n      HAL_I2C_AbortCpltCallback(i2c_handle);\n    }\n    else {\n      if ((i2c_instance->SR1 & 0x40) != 0) {\n        bufferPtr = i2c_handle->pBuffPtr;\n        i2c_handle->pBuffPtr = bufferPtr + 1;\n        *bufferPtr = (uint8_t)i2c_instance->DR;\n      }\n      HAL_I2C_ErrorCallback(i2c_handle);\n    }\n  }\n  else {\n    i2c_instance->CR2 = i2c_instance->CR2 & 0xfffff7ff;\n    if (i2c_handle->hdmatx->State == HAL_DMA_STATE_READY) {\n      i2c_handle->hdmarx->XferAbortCallback = I2C_DMAAbort + 1;\n      status = HAL_DMA_Abort_IT(i2c_handle->hdmarx);\n      if (status != HAL_OK) {\n        if ((i2c_handle->Instance->SR1 & 0x40) != 0) {\n          bufferPtr = i2c_handle->pBuffPtr;\n          i2c_handle->pBuffPtr = bufferPtr + 1;\n          *bufferPtr = (uint8_t)i2c_handle->Instance->DR;\n        }\n        i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 & 0xfffffffe;\n        i2c_handle->State = HAL_I2C_STATE_READY;\n        (*i2c_handle->hdmarx->XferAbortCallback)(i2c_handle->hdmarx);\n      }\n    }\n    else {\n      i2c_handle->hdmatx->XferAbortCallback = I2C_DMAAbort + 1;\n      status = HAL_DMA_Abort_IT(i2c_handle->hdmatx);\n      if (status != HAL_OK) {\n        i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 & 0xfffffffe;\n        i2c_handle->State = HAL_I2C_STATE_READY;\n        (*i2c_handle->hdmatx->XferAbortCallback)(i2c_handle->hdmatx);\n      }\n    }\n  }\n  if ((i2c_handle->State == HAL_I2C_STATE_LISTEN) && ((i2c_handle->ErrorCode & 4) != 0)) {\n    i2c_handle->XferOptions = 0xffff0000;\n    i2c_handle->PreviousState = 0;\n    i2c_handle->State = HAL_I2C_STATE_READY;\n    i2c_handle->Mode = HAL_I2C_MODE_NONE;\n    HAL_I2C_ListenCpltCallback(i2c_handle);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3c": "handle_i2_c_state_08004f3c",
                "hi2c": "i2c_handle",
                "HVar1": "status",
                "puVar2": "bufferPtr",
                "pIVar3": "i2c_instance"
            },
            "calling": [
                "HAL_I2C_ER_IRQHandler",
                "I2C_Slave_STOPF"
            ],
            "called": [
                "HAL_I2C_AbortCpltCallback",
                "HAL_I2C_ListenCpltCallback",
                "HAL_DMA_Abort_IT",
                "HAL_I2C_ErrorCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005084": {
            "entrypoint": "0x08005084",
            "current_name": "process_i2_c_08005084",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict processI2C_08005084(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  HAL_I2C_StateTypeDef_conflict currentI2CState;\n  I2C_TypeDef_conflict *i2cInstance;\n  uint8_t *dataPtr;\n  uint32_t currentState;\n  uint32_t temporaryRegister;\n  \n  currentI2CState = i2cHandle->State;\n  i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffff8ff;\n  i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 1;\n  i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffbff;\n  i2cInstance = i2cHandle->Instance;\n  if ((i2cInstance->CR2 & 0x800) != 0) {\n    if ((i2cHandle->State == HAL_I2C_STATE_BUSY_RX) || (i2cHandle->State == HAL_I2C_STATE_BUSY_RX_LISTEN)) {\n      i2cHandle->XferCount = (uint16_t)i2cHandle->hdmarx->Instance->CNDTR;\n    }\n    else {\n      i2cHandle->XferCount = (uint16_t)i2cHandle->hdmatx->Instance->CNDTR;\n    }\n  }\n  if (i2cHandle->XferCount != 0) {\n    if ((i2cInstance->SR1 & 4) != 0) {\n      dataPtr = i2cHandle->pBuffPtr;\n      i2cHandle->pBuffPtr = dataPtr + 1;\n      *dataPtr = (uint8_t)i2cInstance->DR;\n      i2cHandle->XferCount = i2cHandle->XferCount - 1;\n    }\n    if ((i2cHandle->Instance->SR1 & 0x40) != 0) {\n      dataPtr = i2cHandle->pBuffPtr;\n      i2cHandle->pBuffPtr = dataPtr + 1;\n      *dataPtr = (uint8_t)i2cHandle->Instance->DR;\n      i2cHandle->XferCount = i2cHandle->XferCount - 1;\n    }\n    i2cHandle->ErrorCode = i2cHandle->ErrorCode | 4;\n  }\n  if (i2cHandle->ErrorCode == 0) {\n    if (((currentI2CState == HAL_I2C_STATE_LISTEN) || (currentI2CState == HAL_I2C_STATE_BUSY_RX_LISTEN)) ||\n       (currentI2CState == HAL_I2C_STATE_BUSY_TX_LISTEN)) {\n      i2cHandle->XferOptions = 0xffff0000;\n      i2cHandle->PreviousState = 0;\n      i2cHandle->State = HAL_I2C_STATE_READY;\n      i2cHandle->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_ListenCpltCallback(i2cHandle);\n    }\n    else if ((i2cHandle->PreviousState == 0x22) || (currentI2CState == HAL_I2C_STATE_BUSY_RX)) {\n      i2cHandle->PreviousState = 0;\n      i2cHandle->State = HAL_I2C_STATE_READY;\n      i2cHandle->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_SlaveRxCpltCallback(i2cHandle);\n    }\n  }\n  else {\n    I2C_ITError(i2cHandle);\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08005084": "process_i2_c_08005084",
                "hi2c": "i2cHandle",
                "HVar1": "currentI2CState",
                "pIVar2": "i2cInstance",
                "puVar3": "dataPtr",
                "CurrentState": "currentState",
                "tmpreg": "temporaryRegister"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "I2C_ITError",
                "HAL_I2C_ListenCpltCallback",
                "HAL_I2C_SlaveRxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005188": {
            "entrypoint": "0x08005188",
            "current_name": "handle_i2_c_interrupt_08005188",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleI2CInterrupt_08005188(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  I2C_TypeDef_conflict *i2cInstance;\n  uint32_t currentMode;\n  uint statusReg1;\n  uint32_t statusReg1Flags;\n  uint controlReg2;\n  uint32_t interruptSources;\n  uint statusReg2;\n  uint32_t sr2itflags;\n  \n  i2cInstance = i2cHandle->Instance;\n  statusReg2 = i2cInstance->SR2;\n  statusReg1 = i2cInstance->SR1;\n  controlReg2 = i2cInstance->CR2;\n  if ((i2cHandle->Mode == HAL_I2C_MODE_MASTER) || (i2cHandle->Mode == HAL_I2C_MODE_MEM)) {\n    if (((statusReg1 & 0x10001) == 0) || ((controlReg2 & 0x200) == 0)) {\n      if (((statusReg1 & 0x10008) == 0) || ((controlReg2 & 0x200) == 0)) {\n        if (((statusReg1 & 0x10002) != 0) && ((controlReg2 & 0x200) != 0)) {\n          I2C_Master_ADDR(i2cHandle);\n        }\n      }\n      else {\n        I2C_Master_ADD10(i2cHandle);\n      }\n    }\n    else {\n      I2C_Master_SB(i2cHandle);\n    }\n    if ((statusReg2 & 0x100004) == 0) {\n      if ((((statusReg1 & 0x10040) != 0) && ((controlReg2 & 0x400) != 0)) && ((statusReg1 & 0x10004) == 0)) {\n        I2C_MasterReceive_RXNE(i2cHandle);\n        return;\n      }\n      if (((statusReg1 & 0x10004) != 0) && ((controlReg2 & 0x200) != 0)) {\n        I2C_MasterReceive_BTF(i2cHandle);\n        return;\n      }\n    }\n    else {\n      if ((((statusReg1 & 0x10080) != 0) && ((controlReg2 & 0x400) != 0)) && ((statusReg1 & 0x10004) == 0)) {\n        I2C_MasterTransmit_TXE(i2cHandle);\n        return;\n      }\n      if (((statusReg1 & 0x10004) != 0) && ((controlReg2 & 0x200) != 0)) {\n        I2C_MasterTransmit_BTF(i2cHandle);\n        return;\n      }\n    }\n  }\n  else {\n    if (((statusReg1 & 0x10002) != 0) && ((controlReg2 & 0x200) != 0)) {\n      I2C_Slave_ADDR(i2cHandle);\n      return;\n    }\n    if (((statusReg1 & 0x10010) != 0) && ((controlReg2 & 0x200) != 0)) {\n      I2C_Slave_STOPF(i2cHandle);\n      return;\n    }\n    if ((statusReg2 & 0x100004) == 0) {\n      if ((((statusReg1 & 0x10040) != 0) && ((controlReg2 & 0x400) != 0)) && ((statusReg1 & 0x10004) == 0)) {\n        I2C_SlaveReceive_RXNE(i2cHandle);\n        return;\n      }\n      if (((statusReg1 & 0x10004) != 0) && ((controlReg2 & 0x200) != 0)) {\n        I2C_SlaveReceive_BTF(i2cHandle);\n      }\n    }\n    else {\n      if ((((statusReg1 & 0x10080) != 0) && ((controlReg2 & 0x400) != 0)) && ((statusReg1 & 0x10004) == 0)) {\n        I2C_SlaveTransmit_TXE(i2cHandle);\n        return;\n      }\n      if (((statusReg1 & 0x10004) != 0) && ((controlReg2 & 0x200) != 0)) {\n        I2C_SlaveTransmit_BTF(i2cHandle);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005188": "handle_i2_c_interrupt_08005188",
                "hi2c": "i2cHandle",
                "pIVar1": "i2cInstance",
                "CurrentMode": "currentMode",
                "uVar2": "statusReg1",
                "sr1itflags": "statusReg1Flags",
                "uVar3": "controlReg2",
                "itsources": "interruptSources",
                "uVar4": "statusReg2"
            },
            "calling": [
                "I2C2_EV_IRQHandler",
                "I2C1_EV_IRQHandler"
            ],
            "called": [
                "I2C_MasterReceive_RXNE",
                "I2C_MasterReceive_BTF",
                "I2C_SlaveReceive_RXNE",
                "I2C_MasterTransmit_TXE",
                "I2C_Slave_ADDR",
                "I2C_SlaveTransmit_TXE",
                "I2C_Master_SB",
                "I2C_Master_ADD10",
                "I2C_MasterTransmit_BTF",
                "I2C_SlaveReceive_BTF",
                "I2C_Slave_STOPF",
                "I2C_Master_ADDR",
                "I2C_SlaveTransmit_BTF"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052f0": {
            "entrypoint": "0x080052f0",
            "current_name": "handle_i2_c_state_080052f0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleI2CState_080052f0(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  HAL_I2C_StateTypeDef_conflict i2cState;\n  I2C_TypeDef_conflict *i2cInstance;\n  uint32_t statusRegister;\n  uint sr1Value;\n  uint32_t itsources;\n  uint cr2Value;\n  \n  i2cInstance = i2cHandle->Instance;\n  sr1Value = i2cInstance->SR1;\n  cr2Value = i2cInstance->CR2;\n  if (((sr1Value & 0x10100) != 0) && ((cr2Value & 0x100) != 0)) {\n    i2cHandle->ErrorCode = i2cHandle->ErrorCode | 1;\n    i2cInstance->SR1 = 0xfffffeff;\n    i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x8000;\n  }\n  if (((sr1Value & 0x10200) != 0) && ((cr2Value & 0x100) != 0)) {\n    i2cHandle->ErrorCode = i2cHandle->ErrorCode | 2;\n    i2cHandle->Instance->SR1 = 0xfffffdff;\n  }\n  if (((sr1Value & 0x10400) != 0) && ((cr2Value & 0x100) != 0)) {\n    i2cState = i2cHandle->State;\n    if (((i2cHandle->Mode == HAL_I2C_MODE_SLAVE) && (i2cHandle->XferCount == 0)) &&\n       (((i2cState == HAL_I2C_STATE_BUSY_TX || (i2cState == HAL_I2C_STATE_BUSY_TX_LISTEN)) ||\n        ((i2cState == HAL_I2C_STATE_LISTEN && (i2cHandle->PreviousState == 0x21)))))) {\n      I2C_Slave_AF(i2cHandle);\n    }\n    else {\n      i2cHandle->ErrorCode = i2cHandle->ErrorCode | 4;\n      if (i2cHandle->Mode == HAL_I2C_MODE_MASTER) {\n        i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x200;\n      }\n      i2cHandle->Instance->SR1 = 0xfffffbff;\n    }\n  }\n  if (((sr1Value & 0x10800) != 0) && ((cr2Value & 0x100) != 0)) {\n    i2cHandle->ErrorCode = i2cHandle->ErrorCode | 8;\n    i2cHandle->Instance->SR1 = 0xfffff7ff;\n  }\n  if (i2cHandle->ErrorCode != 0) {\n    I2C_ITError(i2cHandle);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052f0": "handle_i2_c_state_080052f0",
                "hi2c": "i2cHandle",
                "HVar1": "i2cState",
                "pIVar2": "i2cInstance",
                "sr1itflags": "statusRegister",
                "uVar3": "sr1Value",
                "uVar4": "cr2Value"
            },
            "calling": [
                "I2C2_ER_IRQHandler",
                "I2C1_ER_IRQHandler"
            ],
            "called": [
                "I2C_ITError",
                "I2C_Slave_AF"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053cc": {
            "entrypoint": "0x080053cc",
            "current_name": "reset_i2_c_080053cc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid resetI2C_080053cc(DMA_HandleTypeDef_conflict *dmaHandle)\n\n{\n  I2C_HandleTypeDef_conflict *i2cHandle_00;\n  I2C_HandleTypeDef_conflict *i2cHandle;\n  \n  i2cHandle_00 = (I2C_HandleTypeDef_conflict *)dmaHandle->parent;\n  i2cHandle_00->i2cInstance->controlRegister1 = i2cHandle_00->i2cInstance->controlRegister1 & 0xfffffbff;\n  i2cHandle_00->transferCount = 0;\n  i2cHandle_00->dmaTxHandle->abortCallback = (_func_void___DMA_HandleTypeDef_ptr_conflict *)0x0;\n  i2cHandle_00->dmaRxHandle->abortCallback = (_func_void___DMA_HandleTypeDef_ptr_conflict *)0x0;\n  if (i2cHandle_00->currentState != HAL_I2C_STATE_ABORT) {\n    i2cHandle_00->currentState = HAL_I2C_STATE_READY;\n    i2cHandle_00->Mode = HAL_I2C_MODE_NONE;\n    i2cHandle_00->i2cInstance->controlRegister1 = i2cHandle_00->i2cInstance->controlRegister1 & 0xfffffffe;\n    handleError(i2cHandle_00);\n    return;\n  }\n  i2cHandle_00->currentState = HAL_I2C_STATE_READY;\n  i2cHandle_00->Mode = HAL_I2C_MODE_NONE;\n  i2cHandle_00->errorCode = 0;\n  i2cHandle_00->i2cInstance->controlRegister1 = i2cHandle_00->i2cInstance->controlRegister1 & 0xfffffffe;\n  handleAbortComplete(i2cHandle_00);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053cc": "reset_i2_c_080053cc",
                "hdma": "dmaHandle",
                "hi2c_00": "i2cHandle_00",
                "hi2c": "i2cHandle",
                "Parent": "parent",
                "Instance": "i2cInstance",
                "CR1": "controlRegister1",
                "XferCount": "transferCount",
                "hdmatx": "dmaTxHandle",
                "hdmarx": "dmaRxHandle",
                "XferAbortCallback": "abortCallback",
                "State": "currentState",
                "ErrorCode": "errorCode",
                "HAL_I2C_ErrorCallback": "handleError",
                "HAL_I2C_AbortCpltCallback": "handleAbortComplete"
            },
            "calling": [],
            "called": [
                "HAL_I2C_AbortCpltCallback",
                "HAL_I2C_ErrorCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800542a": {
            "entrypoint": "0x0800542a",
            "current_name": "get_i2_c_state_0800542a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_I2C_currentStateTypeDef_conflict getI2CState_0800542a(I2C_HandleTypeDef_conflict *i2cHandler)\n\n{\n  return i2cHandler->currentState;\n}\n\n",
            "renaming": {
                "FUN_0800542a": "get_i2_c_state_0800542a",
                "hi2c": "i2cHandler",
                "State": "currentState"
            },
            "calling": [
                "i2c_master_read",
                "i2c_master_write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005430": {
            "entrypoint": "0x08005430",
            "current_name": "get_i2_c_error_code_08005430",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getI2CErrorCode_08005430(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  return i2cHandle->error;\n}\n\n",
            "renaming": {
                "FUN_08005430": "get_i2_c_error_code_08005430",
                "hi2c": "i2cHandle",
                "ErrorCode": "error"
            },
            "calling": [
                "i2c_master_read",
                "i2c_master_write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005434": {
            "entrypoint": "0x08005434",
            "current_name": "delay_function_08005434",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid delayFunction_08005434(uint32_t milliseconds)\n\n{\n  bool isDelayNotZero;\n  uint32_t delayCount;\n  \n  delayCount = milliseconds * (SystemCoreClock / 8000);\n  do {\n    isDelayNotZero = delayCount != 0;\n    delayCount = delayCount - 1;\n  } while (isDelayNotZero);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005434": "delay_function_08005434",
                "mdelay": "milliseconds",
                "Delay": "delayCount",
                "bVar1": "isDelayNotZero"
            },
            "calling": [
                "HAL_RCC_OscConfig"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005460": {
            "entrypoint": "0x08005460",
            "current_name": "configure_rcc_oscillators_08005460",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict configureRCCOscillators_08005460(RCC_OscInitTypeDef_conflict *oscillatorConfig)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t currentTick;\n  uint32_t startTick;\n  bool flag;\n  uint32_t temporaryRegister;\n  \n  if ((oscillatorConfig->OscillatorType & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) != 0)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (oscillatorConfig->HSEState == 0)) {\n        return HAL_ERROR;\n      }\n    }\n    else {\n      startTick = oscillatorConfig->HSEState;\n      if (startTick == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (startTick == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (startTick == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (oscillatorConfig->HSEState == 0) {\n        startTick = HAL_GetTick();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          currentTick = HAL_GetTick();\n          if (100 < currentTick - startTick) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n      else {\n        startTick = HAL_GetTick();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          currentTick = HAL_GetTick();\n          if (100 < currentTick - startTick) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n    }\n  }\n  if ((oscillatorConfig->OscillatorType & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (oscillatorConfig->HSIState != 1)) {\n        return HAL_ERROR;\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | oscillatorConfig->HSICalibrationValue << 3;\n    }\n    else if (oscillatorConfig->HSIState == 0) {\n      _DAT_42420000 = 0;\n      startTick = HAL_GetTick();\n      while ((_DAT_40021000 & 2) != 0) {\n        currentTick = HAL_GetTick();\n        if (2 < currentTick - startTick) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      startTick = HAL_GetTick();\n      while ((_DAT_40021000 & 2) == 0) {\n        currentTick = HAL_GetTick();\n        if (2 < currentTick - startTick) {\n          return HAL_TIMEOUT;\n        }\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | oscillatorConfig->HSICalibrationValue << 3;\n    }\n  }\n  if ((oscillatorConfig->OscillatorType & 8) != 0) {\n    if (oscillatorConfig->LSIState == 0) {\n      _DAT_42420480 = 0;\n      startTick = HAL_GetTick();\n      while ((_DAT_40021024 & 2) != 0) {\n        currentTick = HAL_GetTick();\n        if (2 < currentTick - startTick) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      startTick = HAL_GetTick();\n      while ((_DAT_40021024 & 2) == 0) {\n        currentTick = HAL_GetTick();\n        if (2 < currentTick - startTick) {\n          return HAL_TIMEOUT;\n        }\n      }\n      RCC_Delay(1);\n    }\n  }\n  if ((oscillatorConfig->OscillatorType & 4) != 0) {\n    flag = (_DAT_4002101c & 0x10000000) == 0;\n    if (flag) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startTick = HAL_GetTick();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentTick = HAL_GetTick();\n        if (100 < currentTick - startTick) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    startTick = oscillatorConfig->LSEState;\n    if (startTick == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (startTick == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (startTick == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (oscillatorConfig->LSEState == 0) {\n      startTick = HAL_GetTick();\n      while ((_DAT_40021020 & 2) != 0) {\n        currentTick = HAL_GetTick();\n        if (5000 < currentTick - startTick) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      startTick = HAL_GetTick();\n      while ((_DAT_40021020 & 2) == 0) {\n        currentTick = HAL_GetTick();\n        if (5000 < currentTick - startTick) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    if (flag) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  startTick = (oscillatorConfig->PLL).PLLState;\n  if (startTick == 0) {\n    status = HAL_OK;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    status = HAL_ERROR;\n  }\n  else if (startTick == 2) {\n    _DAT_42420060 = 0;\n    startTick = HAL_GetTick();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if ((oscillatorConfig->PLL).PLLSource == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | oscillatorConfig->HSEPredivValue;\n        }\n        _DAT_40021004 =\n             _DAT_40021004 & 0xffc2ffff |\n             (oscillatorConfig->PLL).PLLSource | (oscillatorConfig->PLL).PLLMUL;\n        _DAT_42420060 = 1;\n        startTick = HAL_GetTick();\n        do {\n          if ((_DAT_40021000 & 0x2000000) != 0) {\n            return HAL_OK;\n          }\n          currentTick = HAL_GetTick();\n        } while (currentTick - startTick < 3);\n        return HAL_TIMEOUT;\n      }\n      currentTick = HAL_GetTick();\n    } while (currentTick - startTick < 3);\n    status = HAL_TIMEOUT;\n  }\n  else {\n    _DAT_42420060 = 0;\n    startTick = HAL_GetTick();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        return HAL_OK;\n      }\n      currentTick = HAL_GetTick();\n    } while (currentTick - startTick < 3);\n    status = HAL_TIMEOUT;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08005460": "configure_rcc_oscillators_08005460",
                "RCC_OscInitStruct": "oscillatorConfig",
                "HVar1": "status",
                "uVar2": "currentTick",
                "uVar3": "startTick",
                "bVar4": "flag",
                "tmpreg": "temporaryRegister"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "RCC_Delay",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_frequency_08005840",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t calculateFrequency_08005840(void)\n\n{\n  uint32_t frequency;\n  uint8_t predivFactorTable [2];\n  uint8_t pllMulFactorTable [16];\n  \n  pllMulFactorTable[12] = '\\x0e';\n  pllMulFactorTable[13] = '\\x0f';\n  pllMulFactorTable[14] = '\\x10';\n  pllMulFactorTable[15] = '\\x10';\n  pllMulFactorTable[8] = '\\n';\n  pllMulFactorTable[9] = '\\v';\n  pllMulFactorTable[10] = '\\f';\n  pllMulFactorTable[11] = '\\r';\n  pllMulFactorTable[4] = '\\x06';\n  pllMulFactorTable[5] = '\\a';\n  pllMulFactorTable[6] = '\\b';\n  pllMulFactorTable[7] = '\\t';\n  pllMulFactorTable[0] = '\\x02';\n  pllMulFactorTable[1] = '\\x03';\n  pllMulFactorTable[2] = '\\x04';\n  pllMulFactorTable[3] = '\\x05';\n  predivFactorTable[0] = '\\x01';\n  predivFactorTable[1] = '\\x02';\n  if ((_DAT_40021004 & 0xc) == 8) {\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      frequency = (uint)pllMulFactorTable[(_DAT_40021004 << 10) >> 0x1c] * 4000000;\n    }\n    else {\n      frequency = ((uint)pllMulFactorTable[(_DAT_40021004 << 10) >> 0x1c] * 8000000) /\n              (uint)predivFactorTable[-((int)(_DAT_40021004 << 0xe) >> 0x1f)];\n    }\n  }\n  else {\n    frequency = 8000000;\n  }\n  return frequency;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_frequency_08005840",
                "uVar1": "frequency",
                "aPredivFactorTable": "predivFactorTable",
                "aPLLMULFactorTable": "pllMulFactorTable"
            },
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058ac": {
            "entrypoint": "0x080058ac",
            "current_name": "configure_clocks_080058ac",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef\nconfigureClocks_080058ac(RCC_ClkInitTypeDef_conflict *clockInitStruct,uint32_t flashLatency)\n\n{\n  uint32_t uVar1;\n  uint32_t uVar2;\n  uint uVar3;\n  \n  if ((_DAT_40022000 & 7) < flashLatency) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | flashLatency;\n    if (flashLatency != (flashLatency & 7)) {\n      return HAL_ERROR;\n    }\n  }\n  if ((clockInitStruct->ClockType & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | clockInitStruct->AHBCLKDivider;\n  }\n  if ((clockInitStruct->ClockType & 1) != 0) {\n    uVar3 = clockInitStruct->SYSCLKSource;\n    if (uVar3 == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return HAL_ERROR;\n      }\n    }\n    else if ((uVar3 != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return HAL_ERROR;\n    }\n    _DAT_40021004 = uVar3 | _DAT_40021004 & 0xfffffffc;\n    uVar1 = HAL_GetTick();\n    if (clockInitStruct->SYSCLKSource == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        uVar2 = HAL_GetTick();\n        if (5000 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else if (clockInitStruct->SYSCLKSource == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        uVar2 = HAL_GetTick();\n        if (5000 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        uVar2 = HAL_GetTick();\n        if (5000 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n  }\n  if (flashLatency < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | flashLatency;\n    if (flashLatency != (flashLatency & 7)) {\n      return HAL_ERROR;\n    }\n  }\n  if ((clockInitStruct->ClockType & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | clockInitStruct->APB1CLKDivider;\n  }\n  if ((clockInitStruct->ClockType & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | clockInitStruct->APB2CLKDivider << 3;\n  }\n  uVar1 = HAL_RCC_GetSysClockFreq();\n  SystemCoreClock = uVar1 >> \"\"[(_DAT_40021004 << 0x18) >> 0x1c];\n  HAL_InitTick(0xf);\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_080058ac": "configure_clocks_080058ac",
                "FLatency": "flashLatency",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "RCC_ClkInitStruct": "clockInitStruct"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_RCC_GetSysClockFreq",
                "HAL_GetTick",
                "HAL_InitTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a1c": {
            "entrypoint": "0x08005a1c",
            "current_name": "get_system_core_clock_08005a1c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getSystemCoreClock_08005a1c(void)\n\n{\n  return systemClock;\n}\n\n",
            "renaming": {
                "FUN_08005a1c": "get_system_core_clock_08005a1c",
                "SystemCoreClock": "systemClock"
            },
            "calling": [
                "SystemClock_Config",
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a28": {
            "entrypoint": "0x08005a28",
            "current_name": "get_divided_clock_frequency_08005a28",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t get_divided_clock_frequency_08005a28(void)\n\n{\n  uint32_t hclkFreq;\n  \n  hclkFreq = HAL_RCC_GetHCLKFreq();\n  return hclkFreq >> \"\"[(uint)(_DAT_40021004 << 0x15) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08005a28": "get_divided_clock_frequency_08005a28",
                "uVar1": "hclkFreq"
            },
            "calling": [
                "getTimerClkFreq",
                "UART_SetConfig",
                "HAL_I2C_Init"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a48": {
            "entrypoint": "0x08005a48",
            "current_name": "get_scaled_hclk_frequency_08005a48",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t getScaledHCLKFrequency_08005a48(void)\n\n{\n  uint32_t scaledFrequency;\n  \n  scaledFrequency = HAL_RCC_GetHCLKFreq();\n  return scaledFrequency >> \"\"[(uint)(_DAT_40021004 << 0x12) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08005a48": "get_scaled_hclk_frequency_08005a48",
                "uVar1": "scaledFrequency"
            },
            "calling": [
                "getTimerClkFreq",
                "HAL_RCCEx_GetPeriphCLKFreq",
                "UART_SetConfig"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "initialize_clock_configuration_08005a68",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeClockConfiguration_08005a68(RCC_ClkInitTypeDef_conflict *RCC_ClkInitStruct,uint32_t *flashLatency)\n\n{\n  RCC_ClkInitStruct->ClockType = 0xf;\n  RCC_ClkInitStruct->SYSCLKSource = _DAT_40021004 & 3;\n  RCC_ClkInitStruct->AHBCLKDivider = _DAT_40021004 & 0xf0;\n  RCC_ClkInitStruct->APB1CLKDivider = _DAT_40021004 & 0x700;\n  RCC_ClkInitStruct->APB2CLKDivider = _DAT_40021004 >> 3 & 0x700;\n  *flashLatency = _DAT_40022000 & 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "initialize_clock_configuration_08005a68",
                "pFLatency": "flashLatency"
            },
            "calling": [
                "getTimerClkFreq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005aa4": {
            "entrypoint": "0x08005aa4",
            "current_name": "configure_periph_clocks_08005aa4",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict configurePeriphClocks_08005aa4(RCC_PeriphCLKInitTypeDef_conflict *peripheralClockInit)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint32_t uVar3;\n  uint32_t uVar4;\n  bool bVar5;\n  uint32_t tmpreg;\n  \n  if ((peripheralClockInit->PeriphClockSelection & 1) != 0) {\n    bVar5 = (_DAT_4002101c & 0x10000000) == 0;\n    if (bVar5) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      uVar3 = getCurrentTick();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        uVar4 = getCurrentTick();\n        if (100 < uVar4 - uVar3) {\n          return TIMEOUT_ERROR;\n        }\n      }\n    }\n    if (((_DAT_40021020 & 0x300) != 0) &&\n       ((_DAT_40021020 & 0x300) != (peripheralClockInit->RTCClockSelection & 0x300))) {\n      uVar2 = _DAT_40021020 & 0xfffffcff;\n      _DAT_42420440 = 0;\n      uVar1 = _DAT_40021020 & 1;\n      _DAT_40021020 = uVar2;\n      if (uVar1 != 0) {\n        uVar3 = getCurrentTick();\n        while ((_DAT_40021020 & 2) == 0) {\n          uVar4 = getCurrentTick();\n          if (5000 < uVar4 - uVar3) {\n            return TIMEOUT_ERROR;\n          }\n        }\n      }\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffcff | peripheralClockInit->RTCClockSelection;\n    if (bVar5) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if ((peripheralClockInit->PeriphClockSelection & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffff3fff | peripheralClockInit->AdcClockSelection;\n  }\n  if ((peripheralClockInit->PeriphClockSelection & 0x10) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffbfffff | peripheralClockInit->UsbClockSelection;\n  }\n  return SUCCESS;\n}\n\n",
            "renaming": {
                "FUN_08005aa4": "configure_periph_clocks_08005aa4",
                "PeriphClkInit": "peripheralClockInit",
                "HAL_GetTick": "getCurrentTick",
                "HAL_TIMEOUT": "TIMEOUT_ERROR",
                "HAL_OK": "SUCCESS"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bb8": {
            "entrypoint": "0x08005bb8",
            "current_name": "calculate_clock_frequency_08005bb8",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t calculateClockFrequency_08005bb8(uint32_t clockSource)\n\n{\n  uint32_t frequency;\n  uint predivFrequency;\n  uint8_t predivFactorTable [2];\n  uint8_t pllMultiplierTable [16];\n  \n  pllMultiplierTable[12] = '\\x0e';\n  pllMultiplierTable[13] = '\\x0f';\n  pllMultiplierTable[14] = '\\x10';\n  pllMultiplierTable[15] = '\\x10';\n  pllMultiplierTable[8] = '\\n';\n  pllMultiplierTable[9] = '\\v';\n  pllMultiplierTable[10] = '\\f';\n  pllMultiplierTable[11] = '\\r';\n  pllMultiplierTable[4] = '\\x06';\n  pllMultiplierTable[5] = '\\a';\n  pllMultiplierTable[6] = '\\b';\n  pllMultiplierTable[7] = '\\t';\n  pllMultiplierTable[0] = '\\x02';\n  pllMultiplierTable[1] = '\\x03';\n  pllMultiplierTable[2] = '\\x04';\n  pllMultiplierTable[3] = '\\x05';\n  predivFactorTable[0] = '\\x01';\n  predivFactorTable[1] = '\\x02';\n  if (clockSource == 2) {\n    frequency = HAL_RCC_GetPCLK2Freq();\n    frequency = frequency / ((((_DAT_40021004 << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (clockSource == 0x10) {\n    if ((_DAT_40021000 & 0x1000000) == 0) {\n      frequency = 0;\n    }\n    else {\n      if ((_DAT_40021004 & 0x10000) == 0) {\n        predivFrequency = 4000000;\n      }\n      else {\n        predivFrequency = 8000000 / predivFactorTable[-((int)(_DAT_40021004 << 0xe) >> 0x1f)];\n      }\n      frequency = predivFrequency * pllMultiplierTable[(_DAT_40021004 << 10) >> 0x1c];\n      if ((_DAT_40021004 & 0x400000) == 0) {\n        frequency = (frequency * 2) / 3;\n      }\n    }\n  }\n  else if (clockSource == 1) {\n    if ((_DAT_40021020 & 0x302) == 0x102) {\n      frequency = 0x8000;\n    }\n    else if (((_DAT_40021020 & 0x300) == 0x200) && ((_DAT_40021024 & 2) != 0)) {\n      frequency = 32000;\n    }\n    else if ((_DAT_40021020 & 0x300) == 0x300) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        frequency = 0;\n      }\n      else {\n        frequency = 0xf424;\n      }\n    }\n    else {\n      frequency = 0;\n    }\n  }\n  else {\n    frequency = 0;\n  }\n  return frequency;\n}\n\n",
            "renaming": {
                "FUN_08005bb8": "calculate_clock_frequency_08005bb8",
                "PeriphClk": "clockSource",
                "uVar1": "frequency",
                "uVar2": "predivFrequency",
                "aPredivFactorTable": "predivFactorTable",
                "aPLLMULFactorTable": "pllMultiplierTable"
            },
            "calling": [
                "HAL_ADC_PollForConversion",
                "HAL_ADCEx_Calibration_Start"
            ],
            "called": [
                "HAL_RCC_GetPCLK2Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cb4": {
            "entrypoint": "0x08005cb4",
            "current_name": "handle_rtc_alarm_08005cb4",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid handle_rtc_alarm_08005cb4(RTC_HandleTypeDef *rtc_handle)\n\n{\n  if (((rtc_handle->rtc_instance->control_high & 2) != 0) && ((rtc_handle->rtc_instance->control_low & 2) != 0)) {\n    handle_alarm_event(rtc_handle);\n    rtc_handle->rtc_instance->control_low = 0xfffffffd;\n  }\n  _DAT_40010414 = 0x20000;\n  rtc_handle->State = HAL_RTC_STATE_READY;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cb4": "handle_rtc_alarm_08005cb4",
                "hrtc": "rtc_handle",
                "Instance": "rtc_instance",
                "CRH": "control_high",
                "CRL": "control_low",
                "HAL_RTC_AlarmAEventCallback": "handle_alarm_event"
            },
            "calling": [
                "RTC_Alarm_IRQHandler"
            ],
            "called": [
                "HAL_RTC_AlarmAEventCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cec": {
            "entrypoint": "0x08005cec",
            "current_name": "configure_output_compare_08005cec",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configureOutputCompare_08005cec(TIM_TypeDef_conflict *timer,TIM_OC_InitTypeDef *outputCompareConfig)\n\n{\n  uint32_t ccerValue;\n  uint32_t cr2Value;\n  uint ocMode;\n  \n  timer->ccerRegister = timer->ccerRegister & 0xfffffffe;\n  cr2Value = timer->cr2Register;\n  ocMode = outputCompareConfig->outputCompareMode;\n  ccerValue = timer->ccerRegister & 0xfffffffd | outputCompareConfig->outputPolarity;\n  if (timer == (TIM_TypeDef_conflict *)0x40012c00) {\n    ccerValue = (ccerValue & 0xfffffff7 | outputCompareConfig->outputNPolarity) & 0xfffffffb;\n    cr2Value = cr2Value & 0xfffffcff | outputCompareConfig->outputIdleState | outputCompareConfig->outputNIdleState;\n  }\n  timer->cr2Register = cr2Value;\n  timer->ccmr1Register = timer->ccmr1Register & 0xffffff8c | ocMode;\n  timer->CCR1 = outputCompareConfig->pulse;\n  timer->ccerRegister = ccerValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cec": "configure_output_compare_08005cec",
                "TIMx": "timer",
                "OC_Config": "outputCompareConfig",
                "uVar1": "ccerValue",
                "uVar2": "cr2Value",
                "uVar3": "ocMode",
                "CCER": "ccerRegister",
                "CR2": "cr2Register",
                "OCMode": "outputCompareMode",
                "OCPolarity": "outputPolarity",
                "OCNPolarity": "outputNPolarity",
                "OCIdleState": "outputIdleState",
                "OCNIdleState": "outputNIdleState",
                "CCMR1": "ccmr1Register",
                "Pulse": "pulse"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_TIM_OC_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d48": {
            "entrypoint": "0x08005d48",
            "current_name": "configure_timer_08005d48",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configureTimer_08005d48(TIM_TypeDef_conflict *timer,TIM_OC_InitTypeDef *outputConfig)\n\n{\n  uint32_t ccerValue;\n  uint32_t cr2Value;\n  uint ocModeValue;\n  \n  timer->CCER = timer->CCER & 0xfffffeff;\n  cr2Value = timer->CR2;\n  ocModeValue = outputConfig->OCMode;\n  ccerValue = timer->CCER & 0xfffffdff | outputConfig->OCPolarity << 8;\n  if (timer == (TIM_TypeDef_conflict *)0x40012c00) {\n    ccerValue = (ccerValue & 0xfffff7ff | outputConfig->OCNPolarity << 8) & 0xfffffbff;\n    cr2Value = cr2Value & 0xffffcfff | outputConfig->OCIdleState << 4 | outputConfig->OCNIdleState << 4;\n  }\n  timer->CR2 = cr2Value;\n  timer->CCMR2 = timer->CCMR2 & 0xffffff8c | ocModeValue;\n  timer->CCR3 = outputConfig->Pulse;\n  timer->CCER = ccerValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d48": "configure_timer_08005d48",
                "TIMx": "timer",
                "OC_Config": "outputConfig",
                "uVar1": "ccerValue",
                "uVar2": "cr2Value",
                "uVar3": "ocModeValue"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_TIM_OC_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005dac": {
            "entrypoint": "0x08005dac",
            "current_name": "configure_timer_08005dac",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configureTimer_08005dac(TIM_TypeDef_conflict *timer,TIM_OC_InitTypeDef *outputCompareConfig)\n\n{\n  uint32_t controlRegister2;\n  uint32_t outputCompareMode;\n  uint32_t outputComparePolarity;\n  \n  timer->CCER = timer->CCER & 0xffffefff;\n  controlRegister2 = timer->CR2;\n  outputCompareMode = outputCompareConfig->OCMode;\n  outputComparePolarity = outputCompareConfig->OCPolarity;\n  if (timer == (TIM_TypeDef_conflict *)0x40012c00) {\n    controlRegister2 = controlRegister2 & 0xffffbfff | outputCompareConfig->OCIdleState << 6;\n  }\n  timer->CR2 = controlRegister2;\n  timer->CCMR2 = timer->CCMR2 & 0xffff8cff | outputCompareMode << 8;\n  timer->CCR4 = outputCompareConfig->Pulse;\n  timer->CCER = timer->CCER & 0xffffdfff | outputComparePolarity << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005dac": "configure_timer_08005dac",
                "TIMx": "timer",
                "OC_Config": "outputCompareConfig",
                "uVar1": "controlRegister2",
                "uVar2": "outputCompareMode",
                "uVar3": "outputComparePolarity"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_TIM_OC_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005df4": {
            "entrypoint": "0x08005df4",
            "current_name": "reset_timer_08005df4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict resetTimer_08005df4(TIM_HandleTypeDef_conflict *timer)\n\n{\n  TIM_TypeDef_conflict *timerInstance;\n  \n  timer->State = HAL_TIM_STATE_BUSY;\n  timerInstance = timer->Instance;\n  if (((timerInstance->CCER & 0x1111) == 0) && ((timerInstance->CCER & 0x444) == 0)) {\n    timerInstance->CR1 = timerInstance->CR1 & 0xfffffffe;\n  }\n  HAL_TIM_OC_MspDeInit(timer);\n  timer->State = HAL_TIM_STATE_RESET;\n  timer->Lock = HAL_UNLOCKED;\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08005df4": "reset_timer_08005df4",
                "htim": "timer",
                "pTVar1": "timerInstance"
            },
            "calling": [
                "TimerPulseDeinit"
            ],
            "called": [
                "HAL_TIM_OC_MspDeInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e2e": {
            "entrypoint": "0x08005e2e",
            "current_name": "reset_timer_08005e2e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nstatus resetTimer_08005e2e(timerHandle *htim)\n\n{\n  timerTypeDef *timerInstance;\n  \n  htim->State = HAL_TIM_STATE_BUSY;\n  timerInstance = htim->Instance;\n  if (((timerInstance->CCER & 0x1111) == 0) && ((timerInstance->CCER & 0x444) == 0)) {\n    timerInstance->CR1 = timerInstance->CR1 & 0xfffffffe;\n  }\n  HAL_TIM_PWM_MspDeInit(htim);\n  htim->State = HAL_TIM_STATE_RESET;\n  htim->Lock = HAL_UNLOCKED;\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08005e2e": "reset_timer_08005e2e",
                "TIM_HandleTypeDef_conflict": "timerHandle",
                "HAL_StatusTypeDef_conflict": "status",
                "TIM_TypeDef_conflict": "timerTypeDef",
                "pTVar1": "timerInstance"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "HAL_TIM_PWM_MspDeInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e68": {
            "entrypoint": "0x08005e68",
            "current_name": "FUNC_08005e68",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08005e68(TIM_HandleTypeDef_conflict *htim)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e68": "FUNC_08005e68"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6a": {
            "entrypoint": "0x08005e6a",
            "current_name": "FUNC_08005e6a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08005e6a(TIM_HandleTypeDef_conflict *htim)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6a": "FUNC_08005e6a"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6c": {
            "entrypoint": "0x08005e6c",
            "current_name": "FUNC_08005e6c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08005e6c(TIM_HandleTypeDef_conflict *htim)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6c": "FUNC_08005e6c"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6e": {
            "entrypoint": "0x08005e6e",
            "current_name": "process_timer_interrupt_08005e6e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid processTimerInterrupt_08005e6e(TIM_HandleTypeDef_conflict *timerHandler)\n\n{\n  TIM_TypeDef_conflict *timerInstance;\n  \n  timerInstance = timerHandler->Instance;\n  if (((timerInstance->statusRegister & 2) != 0) && ((timerInstance->interruptEnableRegister & 2) != 0)) {\n    timerInstance->statusRegister = 0xfffffffd;\n    timerHandler->activeChannel = HAL_TIM_ACTIVE_CHANNEL_1;\n    if ((timerHandler->Instance->CCMR1 & 3) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(timerHandler);\n      HAL_TIM_PWM_PulseFinishedCallback(timerHandler);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(timerHandler);\n    }\n    timerHandler->activeChannel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n  timerInstance = timerHandler->Instance;\n  if (((timerInstance->statusRegister & 4) != 0) && ((timerInstance->interruptEnableRegister & 4) != 0)) {\n    timerInstance->statusRegister = 0xfffffffb;\n    timerHandler->activeChannel = HAL_TIM_ACTIVE_CHANNEL_2;\n    if ((timerHandler->Instance->CCMR1 & 0x300) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(timerHandler);\n      HAL_TIM_PWM_PulseFinishedCallback(timerHandler);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(timerHandler);\n    }\n    timerHandler->activeChannel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n  timerInstance = timerHandler->Instance;\n  if (((timerInstance->statusRegister & 8) != 0) && ((timerInstance->interruptEnableRegister & 8) != 0)) {\n    timerInstance->statusRegister = 0xfffffff7;\n    timerHandler->activeChannel = HAL_TIM_ACTIVE_CHANNEL_3;\n    if ((timerHandler->Instance->CCMR2 & 3) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(timerHandler);\n      HAL_TIM_PWM_PulseFinishedCallback(timerHandler);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(timerHandler);\n    }\n    timerHandler->activeChannel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n  timerInstance = timerHandler->Instance;\n  if (((timerInstance->statusRegister & 0x10) != 0) && ((timerInstance->interruptEnableRegister & 0x10) != 0)) {\n    timerInstance->statusRegister = 0xffffffef;\n    timerHandler->activeChannel = HAL_TIM_ACTIVE_CHANNEL_4;\n    if ((timerHandler->Instance->CCMR2 & 0x300) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(timerHandler);\n      HAL_TIM_PWM_PulseFinishedCallback(timerHandler);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(timerHandler);\n    }\n    timerHandler->activeChannel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n  timerInstance = timerHandler->Instance;\n  if (((timerInstance->statusRegister & 1) != 0) && ((timerInstance->interruptEnableRegister & 1) != 0)) {\n    timerInstance->statusRegister = 0xfffffffe;\n    HAL_TIM_PeriodElapsedCallback(timerHandler);\n  }\n  timerInstance = timerHandler->Instance;\n  if (((timerInstance->statusRegister & 0x80) != 0) && ((timerInstance->interruptEnableRegister & 0x80) != 0)) {\n    timerInstance->statusRegister = 0xffffff7f;\n    HAL_TIMEx_BreakCallback(timerHandler);\n  }\n  timerInstance = timerHandler->Instance;\n  if (((timerInstance->statusRegister & 0x40) != 0) && ((timerInstance->interruptEnableRegister & 0x40) != 0)) {\n    timerInstance->statusRegister = 0xffffffbf;\n    HAL_TIM_TriggerCallback(timerHandler);\n  }\n  timerInstance = timerHandler->Instance;\n  if (((timerInstance->statusRegister & 0x20) != 0) && ((timerInstance->interruptEnableRegister & 0x20) != 0)) {\n    timerInstance->statusRegister = 0xffffffdf;\n    HAL_TIMEx_CommutationCallback(timerHandler);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6e": "process_timer_interrupt_08005e6e",
                "htim": "timerHandler",
                "pTVar1": "timerInstance",
                "SR": "statusRegister",
                "DIER": "interruptEnableRegister",
                "Channel": "activeChannel"
            },
            "calling": [
                "TIM4_IRQHandler",
                "TIM2_IRQHandler",
                "TIM3_IRQHandler",
                "TIM1_UP_IRQHandler"
            ],
            "called": [
                "HAL_TIMEx_BreakCallback",
                "HAL_TIM_TriggerCallback",
                "HAL_TIM_IC_CaptureCallback",
                "HAL_TIM_PWM_PulseFinishedCallback",
                "HAL_TIMEx_CommutationCallback",
                "HAL_TIM_OC_DelayElapsedCallback",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005fe8": {
            "entrypoint": "0x08005fe8",
            "current_name": "configure_timer_08005fe8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configureTimer_08005fe8(TIM_TypeDef_conflict *timer,TIM_Base_InitTypeDef_conflict *config)\n\n{\n  uint controlRegVal;\n  \n  controlRegVal = timer->CR1;\n  if ((((timer == (TIM_TypeDef_conflict *)0x40012c00) || (timer == (TIM_TypeDef_conflict *)0x40000000)\n       ) || (timer == (TIM_TypeDef_conflict *)0x40000400)) ||\n     (timer == (TIM_TypeDef_conflict *)0x40000800)) {\n    controlRegVal = controlRegVal & 0xffffff8f | config->CounterMode;\n  }\n  if (((timer == (TIM_TypeDef_conflict *)0x40012c00) || (timer == (TIM_TypeDef_conflict *)0x40000000))\n     || ((timer == (TIM_TypeDef_conflict *)0x40000400 || (timer == (TIM_TypeDef_conflict *)0x40000800)\n         ))) {\n    controlRegVal = controlRegVal & 0xfffffcff | config->ClockDivision;\n  }\n  timer->CR1 = controlRegVal & 0xffffff7f | config->AutoReloadPreload;\n  timer->ARR = config->Period;\n  timer->PSC = config->Prescaler;\n  if (timer == (TIM_TypeDef_conflict *)0x40012c00) {\n    uRam40012c30 = config->RepetitionCounter;\n  }\n  timer->EGR = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005fe8": "configure_timer_08005fe8",
                "TIMx": "timer",
                "Structure": "config",
                "uVar1": "controlRegVal"
            },
            "calling": [
                "HAL_TIM_OC_Init",
                "HAL_TIM_PWM_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006060": {
            "entrypoint": "0x08006060",
            "current_name": "initialize_timer_08006060",
            "code": "\n/* WARNING: Unknown calling convention */\n\nStatus initializeTimer_08006060(TimerHandle *timer)\n\n{\n  if (timer != (TimerHandle *)0x0) {\n    if (timer->State == TimerStateReset) {\n      timer->Lock = Unlocked;\n      initializeOC(timer);\n    }\n    timer->State = HAL_TIM_STATE_BUSY;\n    setTimerConfig(timer->Instance,&timer->Init);\n    timer->State = HAL_TIM_STATE_READY;\n    return OK;\n  }\n  return ERROR;\n}\n\n",
            "renaming": {
                "FUN_08006060": "initialize_timer_08006060",
                "TIM_HandleTypeDef_conflict": "TimerHandle",
                "htim": "timer",
                "HAL_StatusTypeDef_conflict": "Status",
                "HAL_TIM_STATE_RESET": "TimerStateReset",
                "HAL_UNLOCKED": "Unlocked",
                "HAL_TIM_OC_MspInit": "initializeOC",
                "TIM_Base_SetConfig": "setTimerConfig",
                "HAL_OK": "OK",
                "HAL_ERROR": "ERROR"
            },
            "calling": [
                "TimerPulseInit"
            ],
            "called": [
                "HAL_TIM_OC_MspInit",
                "TIM_Base_SetConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006092": {
            "entrypoint": "0x08006092",
            "current_name": "configure_timer_08006092",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict configureTimer_08006092(TIM_HandleTypeDef_conflict *timer)\n\n{\n  if (timer != (TIM_HandleTypeDef_conflict *)0x0) {\n    if (timer->State == TIM_RESET) {\n      timer->Lock = UNLOCKED;\n      initializeTimerPWM(timer);\n    }\n    timer->State = TIM_BUSY;\n    setTimerConfig(timer->Instance,&timer->Init);\n    timer->State = TIM_READY;\n    return OK;\n  }\n  return ERROR;\n}\n\n",
            "renaming": {
                "FUN_08006092": "configure_timer_08006092",
                "htim": "timer",
                "HAL_TIM_STATE_RESET": "TIM_RESET",
                "HAL_UNLOCKED": "UNLOCKED",
                "HAL_TIM_STATE_BUSY": "TIM_BUSY",
                "HAL_TIM_STATE_READY": "TIM_READY",
                "HAL_OK": "OK",
                "HAL_ERROR": "ERROR",
                "HAL_TIM_PWM_MspInit": "initializeTimerPWM",
                "TIM_Base_SetConfig": "setTimerConfig"
            },
            "calling": [
                "pwm_start"
            ],
            "called": [
                "HAL_TIM_PWM_MspInit",
                "TIM_Base_SetConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080060c4": {
            "entrypoint": "0x080060c4",
            "current_name": "configure_tim_oc_080060c4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configure_TIM_OC_080060c4(TIM_TypeDef_conflict *timer,TIM_OC_InitTypeDef *output_compare_config)\n\n{\n  uint32_t ccer_value;\n  uint32_t cr2_value;\n  uint32_t oc_mode;\n  \n  timer->CCER = timer->CCER & 0xffffffef;\n  cr2_value = timer->CR2;\n  oc_mode = output_compare_config->OCMode;\n  ccer_value = timer->CCER & 0xffffffdf | output_compare_config->OCPolarity << 4;\n  if (timer == (TIM_TypeDef_conflict *)0x40012c00) {\n    ccer_value = (ccer_value & 0xffffff7f | output_compare_config->OCNPolarity << 4) & 0xffffffbf;\n    cr2_value = cr2_value & 0xfffff3ff | output_compare_config->OCIdleState << 2 | output_compare_config->OCNIdleState << 2;\n  }\n  timer->CR2 = cr2_value;\n  timer->CCMR1 = timer->CCMR1 & 0xffff8cff | oc_mode << 8;\n  timer->CCR2 = output_compare_config->Pulse;\n  timer->CCER = ccer_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060c4": "configure_tim_oc_080060c4",
                "TIMx": "timer",
                "OC_Config": "output_compare_config",
                "uVar1": "ccer_value",
                "uVar2": "cr2_value",
                "uVar3": "oc_mode"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_TIM_OC_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006128": {
            "entrypoint": "0x08006128",
            "current_name": "configure_tim_oc_08006128",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict\nconfigureTIM_OC_08006128(TIM_HandleTypeDef_conflict *timer,TIM_OC_InitTypeDef *configuration,uint32_t channel)\n\n{\n  if (timer->Lock != HAL_LOCKED) {\n    timer->Lock = HAL_LOCKED;\n    timer->State = HAL_TIM_STATE_BUSY;\n    switch(channel) {\n    case 0:\n      TIM_OC1_SetConfig(timer->Instance,configuration);\n      break;\n    case 4:\n      TIM_OC2_SetConfig(timer->Instance,configuration);\n      break;\n    case 8:\n      TIM_OC3_SetConfig(timer->Instance,configuration);\n      break;\n    case 0xc:\n      TIM_OC4_SetConfig(timer->Instance,configuration);\n    }\n    timer->State = HAL_TIM_STATE_READY;\n    timer->Lock = HAL_UNLOCKED;\n    return HAL_OK;\n  }\n  return HAL_BUSY;\n}\n\n",
            "renaming": {
                "FUN_08006128": "configure_tim_oc_08006128",
                "htim": "timer",
                "sConfig": "configuration",
                "Channel": "channel"
            },
            "calling": [
                "TimerPulseInit"
            ],
            "called": [
                "TIM_OC4_SetConfig",
                "TIM_OC2_SetConfig",
                "TIM_OC1_SetConfig",
                "TIM_OC3_SetConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006186": {
            "entrypoint": "0x08006186",
            "current_name": "configure_timer_output_compare_08006186",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict\nconfigureTimerOutputCompare_08006186(TIM_HandleTypeDef_conflict *timer,TIM_OC_InitTypeDef *config,uint32_t channel)\n\n{\n  if (timer->Lock != HAL_LOCKED) {\n    timer->Lock = HAL_LOCKED;\n    timer->State = HAL_TIM_STATE_BUSY;\n    switch(channel) {\n    case 0:\n      TIM_OC1_SetConfig(timer->Instance,config);\n      timer->Instance->CCMR1 = timer->Instance->CCMR1 | 8;\n      timer->Instance->CCMR1 = timer->Instance->CCMR1 & 0xfffffffb;\n      timer->Instance->CCMR1 = timer->Instance->CCMR1 | config->OCFastMode;\n      break;\n    case 4:\n      TIM_OC2_SetConfig(timer->Instance,config);\n      timer->Instance->CCMR1 = timer->Instance->CCMR1 | 0x800;\n      timer->Instance->CCMR1 = timer->Instance->CCMR1 & 0xfffffbff;\n      timer->Instance->CCMR1 = timer->Instance->CCMR1 | config->OCFastMode << 8;\n      break;\n    case 8:\n      TIM_OC3_SetConfig(timer->Instance,config);\n      timer->Instance->CCMR2 = timer->Instance->CCMR2 | 8;\n      timer->Instance->CCMR2 = timer->Instance->CCMR2 & 0xfffffffb;\n      timer->Instance->CCMR2 = timer->Instance->CCMR2 | config->OCFastMode;\n      break;\n    case 0xc:\n      TIM_OC4_SetConfig(timer->Instance,config);\n      timer->Instance->CCMR2 = timer->Instance->CCMR2 | 0x800;\n      timer->Instance->CCMR2 = timer->Instance->CCMR2 & 0xfffffbff;\n      timer->Instance->CCMR2 = timer->Instance->CCMR2 | config->OCFastMode << 8;\n    }\n    timer->State = HAL_TIM_STATE_READY;\n    timer->Lock = HAL_UNLOCKED;\n    return HAL_OK;\n  }\n  return HAL_BUSY;\n}\n\n",
            "renaming": {
                "FUN_08006186": "configure_timer_output_compare_08006186",
                "htim": "timer",
                "sConfig": "config",
                "Channel": "channel"
            },
            "calling": [
                "pwm_start"
            ],
            "called": [
                "TIM_OC4_SetConfig",
                "TIM_OC2_SetConfig",
                "TIM_OC1_SetConfig",
                "TIM_OC3_SetConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006262": {
            "entrypoint": "0x08006262",
            "current_name": "configure_tim_channel_08006262",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configureTIMChannel_08006262(TIM_TypeDef_conflict *timer,uint32_t channelNumber,uint32_t channelState)\n\n{\n  timer->CCER = timer->CCER & ~(1 << (channelNumber & 0xff));\n  timer->CCER = timer->CCER | channelState << (channelNumber & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006262": "configure_tim_channel_08006262",
                "TIMx": "timer",
                "Channel": "channelNumber",
                "ChannelState": "channelState"
            },
            "calling": [
                "HAL_TIM_OC_Start_IT",
                "HAL_TIM_OC_Stop_IT",
                "HAL_TIM_PWM_Stop",
                "HAL_TIM_PWM_Start"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006280": {
            "entrypoint": "0x08006280",
            "current_name": "configure_timer_interrupt_08006280",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict configureTimerInterrupt_08006280(TIM_HandleTypeDef_conflict *timerHandle,uint32_t channel)\n\n{\n  switch(channel) {\n  case 0:\n    timerHandle->timerInstance->DMAInterruptEnableRegister = timerHandle->timerInstance->DMAInterruptEnableRegister | 2;\n    break;\n  case 4:\n    timerHandle->timerInstance->DMAInterruptEnableRegister = timerHandle->timerInstance->DMAInterruptEnableRegister | 4;\n    break;\n  case 8:\n    timerHandle->timerInstance->DMAInterruptEnableRegister = timerHandle->timerInstance->DMAInterruptEnableRegister | 8;\n    break;\n  case 0xc:\n    timerHandle->timerInstance->DMAInterruptEnableRegister = timerHandle->timerInstance->DMAInterruptEnableRegister | 0x10;\n  }\n  timerChannelCommand(timerHandle->timerInstance,channel,1);\n  if (timerHandle->timerInstance == (TIM_TypeDef_conflict *)0x40012c00) {\n    memory40012c44 = memory40012c44 | 0x8000;\n  }\n  timerHandle->timerInstance->controlRegister1 = timerHandle->timerInstance->controlRegister1 | 1;\n  return HALStatus_OK;\n}\n\n",
            "renaming": {
                "FUN_08006280": "configure_timer_interrupt_08006280",
                "htim": "timerHandle",
                "Channel": "channel",
                "Instance": "timerInstance",
                "DIER": "DMAInterruptEnableRegister",
                "TIM_CCxChannelCmd": "timerChannelCommand",
                "uRam40012c44": "memory40012c44",
                "CR1": "controlRegister1",
                "HAL_OK": "HALStatus_OK"
            },
            "calling": [
                "TimerPulseInit"
            ],
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080062f4": {
            "entrypoint": "0x080062f4",
            "current_name": "configure_timer_interrupt_080062f4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict configureTimerInterrupt_080062f4(TIM_HandleTypeDef_conflict *timerHandle,uint32_t channel)\n\n{\n  TIM_TypeDef_conflict *timerInstance;\n  \n  switch(channel) {\n  case 0:\n    timerHandle->Instance->DIER = timerHandle->Instance->DIER & 0xfffffffd;\n    break;\n  case 4:\n    timerHandle->Instance->DIER = timerHandle->Instance->DIER & 0xfffffffb;\n    break;\n  case 8:\n    timerHandle->Instance->DIER = timerHandle->Instance->DIER & 0xfffffff7;\n    break;\n  case 0xc:\n    timerHandle->Instance->DIER = timerHandle->Instance->DIER & 0xffffffef;\n  }\n  TIM_CCxchannelCmd(timerHandle->Instance,channel,0);\n  if (((timerHandle->Instance == (TIM_TypeDef_conflict *)0x40012c00) && ((registerValue & 0x1111) == 0)) &&\n     ((registerValue & 0x444) == 0)) {\n    registerValue2 = registerValue2 & 0xffff7fff;\n  }\n  timerInstance = timerHandle->Instance;\n  if (((timerInstance->CCER & 0x1111) == 0) && ((timerInstance->CCER & 0x444) == 0)) {\n    timerInstance->CR1 = timerInstance->CR1 & 0xfffffffe;\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_080062f4": "configure_timer_interrupt_080062f4",
                "htim": "timerHandle",
                "Channel": "channel",
                "pTVar1": "timerInstance",
                "uRam40012c20": "registerValue",
                "uRam40012c44": "registerValue2"
            },
            "calling": [
                "TimerPulseDeinit"
            ],
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006390": {
            "entrypoint": "0x08006390",
            "current_name": "enable_tim_channel_08006390",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict enableTIMChannel_08006390(TIM_HandleTypeDef_conflict *timerHandle,uint32_t channel)\n\n{\n  configureTIMChannel(timerHandle->Instance,channel,1);\n  if (timerHandle->Instance == (TIM_TypeDef *)0x40012c00) {\n    timerStatus = timerStatus | 0x8000;\n  }\n  timerHandle->Instance->controlRegister = timerHandle->Instance->controlRegister | 1;\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08006390": "enable_tim_channel_08006390",
                "htim": "timerHandle",
                "Channel": "channel",
                "TIM_CCxChannelCmd": "configureTIMChannel",
                "TIM_TypeDef_conflict": "TIM_TypeDef",
                "uRam40012c44": "timerStatus",
                "CR1": "controlRegister"
            },
            "calling": [
                "pwm_start"
            ],
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080063c0": {
            "entrypoint": "0x080063c0",
            "current_name": "disable_timer_channel_080063c0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict disableTimerChannel_080063c0(TIM_HandleTypeDef_conflict *timerHandle,uint32_t channel)\n\n{\n  TIM_TypeDef_conflict *timerInstance;\n  \n  TIM_CCxchannelCmd(timerHandle->Instance,channel,0);\n  if (((timerHandle->Instance == (TIM_TypeDef_conflict *)0x40012c00) && ((uRamValue1 & 0x1111) == 0)) &&\n     ((uRamValue1 & 0x444) == 0)) {\n    uRamValue2 = uRamValue2 & 0xffff7fff;\n  }\n  timerInstance = timerHandle->Instance;\n  if (((timerInstance->CCER & 0x1111) == 0) && ((timerInstance->CCER & 0x444) == 0)) {\n    timerInstance->CR1 = timerInstance->CR1 & 0xfffffffe;\n  }\n  timerHandle->State = HAL_TIM_STATE_READY;\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_080063c0": "disable_timer_channel_080063c0",
                "htim": "timerHandle",
                "Channel": "channel",
                "pTVar1": "timerInstance",
                "uRam40012c20": "uRamValue1",
                "uRam40012c44": "uRamValue2"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006420": {
            "entrypoint": "0x08006420",
            "current_name": "update_channel_state_08006420",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid updateChannelState_08006420(TIM_TypeDef_conflict *timer,uint32_t channel,uint32_t newState)\n\n{\n  timer->CCER = timer->CCER & ~(4 << (channel & 0xff));\n  timer->CCER = timer->CCER | newState << (channel & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006420": "update_channel_state_08006420",
                "TIMx": "timer",
                "Channel": "channel",
                "ChannelNState": "newState"
            },
            "calling": [
                "HAL_TIMEx_PWMN_Start",
                "HAL_TIMEx_PWMN_Stop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800643c": {
            "entrypoint": "0x0800643c",
            "current_name": "initialize_tim_channel_0800643c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict initializeTimChannel_0800643c(TIM_HandleTypeDef_conflict *htim,uint32_t channelNumber)\n\n{\n  TIM_CCxNchannelNumberCmd(htim->Instance,channelNumber,4);\n  htim->Instance->BDTR = htim->Instance->BDTR | 0x8000;\n  htim->Instance->CR1 = htim->Instance->CR1 | 1;\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_0800643c": "initialize_tim_channel_0800643c",
                "Channel": "channelNumber"
            },
            "calling": [
                "pwm_start"
            ],
            "called": [
                "TIM_CCxNChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006460": {
            "entrypoint": "0x08006460",
            "current_name": "disable_channel_08006460",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict disableChannel_08006460(TIM_HandleTypeDef_conflict *timerHandle,uint32_t channel)\n\n{\n  TIM_TypeDef_conflict *timer;\n  \n  TIM_CCxNchannelCmd(timerHandle->instance,channel,0);\n  timer = timerHandle->instance;\n  if (((timer->ccEnableRegister & 0x1111) == 0) && ((timer->ccEnableRegister & 0x444) == 0)) {\n    timer->breakDeadTimeRegister = timer->breakDeadTimeRegister & 0xffff7fff;\n  }\n  timer = timerHandle->instance;\n  if (((timer->ccEnableRegister & 0x1111) == 0) && ((timer->ccEnableRegister & 0x444) == 0)) {\n    timer->controlRegister = timer->controlRegister & 0xfffffffe;\n  }\n  return HAL_STATUS_OK;\n}\n\n",
            "renaming": {
                "FUN_08006460": "disable_channel_08006460",
                "htim": "timerHandle",
                "Channel": "channel",
                "pTVar1": "timer",
                "Instance": "instance",
                "CCER": "ccEnableRegister",
                "BDTR": "breakDeadTimeRegister",
                "CR1": "controlRegister",
                "HAL_OK": "HAL_STATUS_OK"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "TIM_CCxNChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064ac": {
            "entrypoint": "0x080064ac",
            "current_name": "FUNC_080064ac",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_080064ac(TIM_HandleTypeDef_conflict *htim)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064ac": "FUNC_080064ac"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080064ae": {
            "entrypoint": "0x080064ae",
            "current_name": "FUNC_080064ae",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_080064ae(TIM_HandleTypeDef_conflict *htim)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064ae": "FUNC_080064ae"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080064b0": {
            "entrypoint": "0x080064b0",
            "current_name": "reset_uart_080064b0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid resetUART_080064b0(UART_HandleTypeDef *uartHandler)\n\n{\n  uartHandler->uartInstance->controlRegister1 = uartHandler->uartInstance->controlRegister1 & 0xfffffedf;\n  uartHandler->uartInstance->controlRegister3 = uartHandler->uartInstance->controlRegister3 & 0xfffffffe;\n  uartHandler->receiveState = UART_STATE_READY;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064b0": "reset_uart_080064b0",
                "huart": "uartHandler",
                "Instance": "uartInstance",
                "CR1": "controlRegister1",
                "CR3": "controlRegister3",
                "RxState": "receiveState",
                "HAL_UART_STATE_READY": "UART_STATE_READY"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064cc": {
            "entrypoint": "0x080064cc",
            "current_name": "send_data_080064cc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict sendData_080064cc(UART_HandleTypeDef *uartHandler)\n\n{\n  uint16_t remainingBytes;\n  byte *bytePtr;\n  uint16_t *tmpPtr;\n  \n  if (uartHandler->gState != HAL_UART_STATE_BUSY_TX) {\n    return HAL_BUSY;\n  }\n  if ((uartHandler->Init).WordLength == 0x1000) {\n    uartHandler->Instance->DR = *(ushort *)uartHandler->pTxBuffPtr & 0x1ff;\n    if ((uartHandler->Init).Parity == 0) {\n      uartHandler->pTxBuffPtr = uartHandler->pTxBuffPtr + 2;\n    }\n    else {\n      uartHandler->pTxBuffPtr = uartHandler->pTxBuffPtr + 1;\n    }\n  }\n  else {\n    bytePtr = uartHandler->pTxBuffPtr;\n    uartHandler->pTxBuffPtr = bytePtr + 1;\n    uartHandler->Instance->DR = (uint)*bytePtr;\n  }\n  remainingBytes = uartHandler->TxXferCount - 1;\n  uartHandler->TxXferCount = remainingBytes;\n  if (remainingBytes == 0) {\n    uartHandler->Instance->CR1 = uartHandler->Instance->CR1 & 0xffffff7f;\n    uartHandler->Instance->CR1 = uartHandler->Instance->CR1 | 0x40;\n    return HAL_OK;\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_080064cc": "send_data_080064cc",
                "huart": "uartHandler",
                "uVar1": "remainingBytes",
                "pbVar2": "bytePtr",
                "tmp": "tmpPtr"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006538": {
            "entrypoint": "0x08006538",
            "current_name": "configure_uart_08006538",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configure_UART_08006538(UART_HandleTypeDef *UART_handle)\n\n{\n  uint32_t PCLK1_freq;\n  uint32_t PCLK1_freq;\n  uint32_t PCLK1_freq;\n  uint32_t PCLK1_freq;\n  uint32_t PCLK1_freq;\n  uint32_t BaudRate;\n  uint32_t BaudRate;\n  uint32_t BaudRate;\n  uint32_t BaudRate;\n  USART_TypeDef *USART_instance;\n  \n  UART_handle->Instance->CR2 = UART_handle->Instance->CR2 & 0xffffcfff | (UART_handle->Init).StopBits;\n  UART_handle->Instance->CR1 =\n       (UART_handle->Init).WordLength | (UART_handle->Init).Parity | (UART_handle->Init).Mode |\n       UART_handle->Instance->CR1 & 0xffffe9f3;\n  UART_handle->Instance->CR3 = UART_handle->Instance->CR3 & 0xfffffcff | (UART_handle->Init).HwFlowCtl;\n  USART_instance = UART_handle->Instance;\n  if (USART_instance != (USART_TypeDef *)0x40013800) {\n    PCLK1_freq = HAL_RCC_GetPCLK1Freq();\n    BaudRate = (UART_handle->Init).BaudRate;\n    PCLK1_freq = HAL_RCC_GetPCLK1Freq();\n    BaudRate = (UART_handle->Init).BaudRate;\n    PCLK1_freq = HAL_RCC_GetPCLK1Freq();\n    BaudRate = (UART_handle->Init).BaudRate;\n    PCLK1_freq = HAL_RCC_GetPCLK1Freq();\n    BaudRate = (UART_handle->Init).BaudRate;\n    PCLK1_freq = HAL_RCC_GetPCLK1Freq();\n    USART_instance->BRR = ((uint)((int)((ulonglong)\n                                 (((PCLK1_freq * 0x19) / (BaudRate << 2) +\n                                  (int)(((ulonglong)(PCLK1_freq * 0x19) /\n                                        (ulonglong)((UART_handle->Init).BaudRate << 2)) / 100) * -100) *\n                                  0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n                   ((((PCLK1_freq * 0x19) / (BaudRate << 2) +\n                     (int)(((ulonglong)(PCLK1_freq * 0x19) / (ulonglong)(BaudRate << 2)) / 100) * -100) *\n                     0x10 + 0x32) / 100 & 0xf0) +\n                   (int)(((ulonglong)(PCLK1_freq * 0x19) / (ulonglong)(BaudRate << 2)) / 100) * 0x10;\n    return;\n  }\n  PCLK1_freq = HAL_RCC_GetPCLK2Freq();\n  BaudRate = (UART_handle->Init).BaudRate;\n  PCLK1_freq = HAL_RCC_GetPCLK2Freq();\n  BaudRate = (UART_handle->Init).BaudRate;\n  PCLK1_freq = HAL_RCC_GetPCLK2Freq();\n  BaudRate = (UART_handle->Init).BaudRate;\n  PCLK1_freq = HAL_RCC_GetPCLK2Freq();\n  BaudRate = (UART_handle->Init).BaudRate;\n  PCLK1_freq = HAL_RCC_GetPCLK2Freq();\n  iRam40013808 = ((uint)((int)((ulonglong)\n                               (((PCLK1_freq * 0x19) / (BaudRate << 2) +\n                                (int)(((ulonglong)(PCLK1_freq * 0x19) /\n                                      (ulonglong)((UART_handle->Init).BaudRate << 2)) / 100) * -100) *\n                                0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n                 ((((PCLK1_freq * 0x19) / (BaudRate << 2) +\n                   (int)(((ulonglong)(PCLK1_freq * 0x19) / (ulonglong)(BaudRate << 2)) / 100) * -100) * 0x10\n                  + 0x32) / 100 & 0xf0) +\n                 (int)(((ulonglong)(PCLK1_freq * 0x19) / (ulonglong)(BaudRate << 2)) / 100) * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006538": "configure_uart_08006538",
                "huart": "UART_handle",
                "uVar1": "PCLK1_freq",
                "uVar2": "PCLK1_freq",
                "uVar3": "PCLK1_freq",
                "uVar4": "PCLK1_freq",
                "uVar5": "PCLK1_freq",
                "uVar6": "BaudRate",
                "uVar7": "BaudRate",
                "uVar8": "BaudRate",
                "uVar9": "BaudRate",
                "pUVar10": "USART_instance"
            },
            "calling": [
                "HAL_UART_Init"
            ],
            "called": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066e8": {
            "entrypoint": "0x080066e8",
            "current_name": "check_flag_status_080066e8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_desiredStatusTypeDef_conflict\ncheckFlagStatus_080066e8(UART_HandleTypeDef *uartHandle,uint32_t flag,flagdesiredStatus desiredStatus,uint32_t startTick,\n            uint32_t timeout)\n\n{\n  uint32_t currentTick;\n  \n  do {\n    if (((flag & ~uartHandle->Instance->SR) == 0) != (bool)desiredStatus) {\n      return HAL_OK;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (currentTick = HAL_GetTick(), currentTick - startTick <= timeout))));\n  uartHandle->Instance->CR1 = uartHandle->Instance->CR1 & 0xfffffe5f;\n  uartHandle->Instance->CR3 = uartHandle->Instance->CR3 & 0xfffffffe;\n  uartHandle->gState = HAL_UART_STATE_READY;\n  uartHandle->RxState = HAL_UART_STATE_READY;\n  uartHandle->Lock = HAL_UNLOCKED;\n  return HAL_TIMEOUT;\n}\n\n",
            "renaming": {
                "FUN_080066e8": "check_flag_status_080066e8",
                "huart": "uartHandle",
                "Flag": "flag",
                "Status": "desiredStatus",
                "Tickstart": "startTick",
                "Timeout": "timeout",
                "uVar1": "currentTick"
            },
            "calling": [
                "HAL_UART_Transmit"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800674c": {
            "entrypoint": "0x0800674c",
            "current_name": "FUNC_0800674c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_0800674c(UART_HandleTypeDef *huart)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800674c": "FUNC_0800674c"
            },
            "calling": [
                "HAL_UART_Init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800674e": {
            "entrypoint": "0x0800674e",
            "current_name": "initialize_uart_0800674e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict initializeUART_0800674e(UART_HandleTypeDef *uartHandle)\n\n{\n  if (uartHandle != (UART_HandleTypeDef *)0x0) {\n    if (uartHandle->gState == HAL_UART_STATE_RESET) {\n      uartHandle->Lock = HAL_UNLOCKED;\n      HAL_UART_MspInit(uartHandle);\n    }\n    uartHandle->gState = HAL_UART_STATE_BUSY;\n    uartHandle->Instance->CR1 = uartHandle->Instance->CR1 & 0xffffdfff;\n    UART_SetConfig(uartHandle);\n    uartHandle->Instance->CR2 = uartHandle->Instance->CR2 & 0xffffb7ff;\n    uartHandle->Instance->CR3 = uartHandle->Instance->CR3 & 0xffffffd5;\n    uartHandle->Instance->CR1 = uartHandle->Instance->CR1 | 0x2000;\n    uartHandle->ErrorCode = 0;\n    uartHandle->gState = HAL_UART_STATE_READY;\n    uartHandle->RxState = HAL_UART_STATE_READY;\n    return HAL_OK;\n  }\n  return HAL_ERROR;\n}\n\n",
            "renaming": {
                "FUN_0800674e": "initialize_uart_0800674e",
                "huart": "uartHandle"
            },
            "calling": [
                "uart_init"
            ],
            "called": [
                "HAL_UART_MspInit",
                "UART_SetConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080067ac": {
            "entrypoint": "0x080067ac",
            "current_name": "transmit_data_over_uart_080067ac",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict\ntransmitDataOverUART_080067ac(UART_HandleTypeDef *uartHandle,uint8_t *data,uint16_t dataSize,uint32_t timeout)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t tickStart;\n  uint16_t *temp;\n  \n  if (uartHandle->gState == HAL_UART_STATE_READY) {\n    if (data == (uint8_t *)0x0) {\n      status = HAL_ERROR;\n    }\n    else if (dataSize == 0) {\n      status = HAL_ERROR;\n    }\n    else if (uartHandle->Lock == HAL_LOCKED) {\n      status = HAL_BUSY;\n    }\n    else {\n      uartHandle->Lock = HAL_LOCKED;\n      uartHandle->ErrorCode = 0;\n      uartHandle->gState = HAL_UART_STATE_BUSY_TX;\n      tickStart = HAL_GetTick();\n      uartHandle->TxXferdataSize = dataSize;\n      uartHandle->TxXferCount = dataSize;\n      while (uartHandle->TxXferCount != 0) {\n        uartHandle->TxXferCount = uartHandle->TxXferCount - 1;\n        if ((uartHandle->Init).WordLength == 0x1000) {\n          status = UART_WaitOnFlagUntiltimeout(uartHandle,0x80,RESET,tickStart,timeout);\n          if (status != HAL_OK) {\n            return HAL_TIMEOUT;\n          }\n          uartHandle->Instance->DR = *(ushort *)data & 0x1ff;\n          if ((uartHandle->Init).Parity == 0) {\n            data = (uint8_t *)((int)data + 2);\n          }\n          else {\n            data = (uint8_t *)((int)data + 1);\n          }\n        }\n        else {\n          status = UART_WaitOnFlagUntiltimeout(uartHandle,0x80,RESET,tickStart,timeout);\n          if (status != HAL_OK) {\n            return HAL_TIMEOUT;\n          }\n          uartHandle->Instance->DR = (uint)*data;\n          data = (uint8_t *)((int)data + 1);\n        }\n      }\n      status = UART_WaitOnFlagUntiltimeout(uartHandle,0x40,RESET,tickStart,timeout);\n      if (status == HAL_OK) {\n        uartHandle->gState = HAL_UART_STATE_READY;\n        uartHandle->Lock = HAL_UNLOCKED;\n        status = HAL_OK;\n      }\n      else {\n        status = HAL_TIMEOUT;\n      }\n    }\n  }\n  else {\n    status = HAL_BUSY;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_080067ac": "transmit_data_over_uart_080067ac",
                "huart": "uartHandle",
                "pData": "data",
                "Size": "dataSize",
                "Timeout": "timeout",
                "HVar1": "status",
                "Tickstart": "tickStart",
                "tmp": "temp"
            },
            "calling": [
                "uart_debug_write"
            ],
            "called": [
                "UART_WaitOnFlagUntilTimeout",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800688e": {
            "entrypoint": "0x0800688e",
            "current_name": "set_uart_tx_buffer_0800688e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict setUartTxBuffer_0800688e(UART_HandleTypeDef *uartHandle,uint8_t *data,uint16_t size)\n\n{\n  if (uartHandle->gState != HAL_UART_STATE_READY) {\n    return HAL_BUSY;\n  }\n  if (data == (uint8_t *)0x0) {\n    return HAL_ERROR;\n  }\n  if (size == 0) {\n    return HAL_ERROR;\n  }\n  if (uartHandle->Lock != HAL_LOCKED) {\n    uartHandle->pTxBuffPtr = data;\n    uartHandle->TxXfersize = size;\n    uartHandle->TxXferCount = size;\n    uartHandle->ErrorCode = 0;\n    uartHandle->gState = HAL_UART_STATE_BUSY_TX;\n    uartHandle->Lock = HAL_UNLOCKED;\n    uartHandle->Instance->CR1 = uartHandle->Instance->CR1 | 0x80;\n    return HAL_OK;\n  }\n  return HAL_BUSY;\n}\n\n",
            "renaming": {
                "FUN_0800688e": "set_uart_tx_buffer_0800688e",
                "huart": "uartHandle",
                "pData": "data",
                "Size": "size"
            },
            "calling": [
                "HAL_UART_TxCpltCallback",
                "uart_attach_tx_callback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080068d6": {
            "entrypoint": "0x080068d6",
            "current_name": "initialize_uart_receiver_080068d6",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict initialize_uart_receiver_080068d6(UART_HandleTypeDef *uart_handle,uint8_t *data_buffer,uint16_t data_size)\n\n{\n  if (uart_handle->RxState != HAL_UART_STATE_READY) {\n    return HAL_BUSY;\n  }\n  if (data_buffer == (uint8_t *)0x0) {\n    return HAL_ERROR;\n  }\n  if (data_size == 0) {\n    return HAL_ERROR;\n  }\n  if (uart_handle->Lock != HAL_LOCKED) {\n    uart_handle->pRxBuffPtr = data_buffer;\n    uart_handle->RxXferdata_size = data_size;\n    uart_handle->RxXferCount = data_size;\n    uart_handle->ErrorCode = 0;\n    uart_handle->RxState = HAL_UART_STATE_BUSY_RX;\n    uart_handle->Lock = HAL_UNLOCKED;\n    uart_handle->Instance->CR1 = uart_handle->Instance->CR1 | 0x100;\n    uart_handle->Instance->CR3 = uart_handle->Instance->CR3 | 1;\n    uart_handle->Instance->CR1 = uart_handle->Instance->CR1 | 0x20;\n    return HAL_OK;\n  }\n  return HAL_BUSY;\n}\n\n",
            "renaming": {
                "FUN_080068d6": "initialize_uart_receiver_080068d6",
                "huart": "uart_handle",
                "pData": "data_buffer",
                "Size": "data_size"
            },
            "calling": [
                "uart_getc",
                "uart_attach_rx_callback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006932": {
            "entrypoint": "0x08006932",
            "current_name": "reset_uart_08006932",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict reset_uart_08006932(UART_HandleTypeDef *uart_handle)\n\n{\n  uart_handle->uart_instance->control_reg1 = uart_handle->uart_instance->control_reg1 & 0xffffffbf;\n  uart_handle->uart_state = HAL_UART_STATE_READY;\n  HAL_UART_TxCpltCallback(uart_handle);\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08006932": "reset_uart_08006932",
                "huart": "uart_handle",
                "Instance": "uart_instance",
                "CR1": "control_reg1",
                "gState": "uart_state"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [
                "HAL_UART_TxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800694c": {
            "entrypoint": "0x0800694c",
            "current_name": "process_received_data_0800694c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict processReceivedData_0800694c(UART_HandleTypeDef *uartHandle)\n\n{\n  uint16_t *temp;\n  byte *bytePtr;\n  uint16_t remainingCount;\n  uint8_t *uint8Ptr;\n  \n  if (uartHandle->RxState != HAL_UART_STATE_BUSY_RX) {\n    return HAL_BUSY;\n  }\n  if ((uartHandle->Init).WordLength == 0x1000) {\n    if ((uartHandle->Init).Parity == 0) {\n      *(ushort *)uartHandle->pRxBuffPtr = (ushort)((uartHandle->Instance->DR << 0x17) >> 0x17);\n      uartHandle->pRxBuffPtr = uartHandle->pRxBuffPtr + 2;\n    }\n    else {\n      *(ushort *)uartHandle->pRxBuffPtr = (ushort)uartHandle->Instance->DR & 0xff;\n      uartHandle->pRxBuffPtr = uartHandle->pRxBuffPtr + 1;\n    }\n  }\n  else if ((uartHandle->Init).Parity == 0) {\n    uint8Ptr = uartHandle->pRxBuffPtr;\n    uartHandle->pRxBuffPtr = uint8Ptr + 1;\n    *uint8Ptr = (uint8_t)uartHandle->Instance->DR;\n  }\n  else {\n    bytePtr = uartHandle->pRxBuffPtr;\n    uartHandle->pRxBuffPtr = bytePtr + 1;\n    *bytePtr = (byte)uartHandle->Instance->DR & 0x7f;\n  }\n  remainingCount = uartHandle->RxXferCount - 1;\n  uartHandle->RxXferCount = remainingCount;\n  if (remainingCount != 0) {\n    return HAL_OK;\n  }\n  uartHandle->Instance->CR1 = uartHandle->Instance->CR1 & 0xffffffdf;\n  uartHandle->Instance->CR1 = uartHandle->Instance->CR1 & 0xfffffeff;\n  uartHandle->Instance->CR3 = uartHandle->Instance->CR3 & 0xfffffffe;\n  uartHandle->RxState = HAL_UART_STATE_READY;\n  HAL_UART_RxCpltCallback(uartHandle);\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_0800694c": "process_received_data_0800694c",
                "huart": "uartHandle",
                "tmp": "temp",
                "pbVar1": "bytePtr",
                "uVar2": "remainingCount",
                "puVar3": "uint8Ptr"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [
                "HAL_UART_RxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069ec": {
            "entrypoint": "0x080069ec",
            "current_name": "handle_uart_080069ec",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handle_UART_080069ec(UART_HandleTypeDef *UART_handle)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint control_reg_1;\n  uint32_t CR1_Interrupt_Status;\n  USART_TypeDef *uart_instance;\n  uint32_t CR3_Interrupt_Status;\n  uint flag_1;\n  uint status_reg;\n  uint32_t Interrupt_Status_Register;\n  \n  uart_instance = UART_handle->Instance;\n  status_reg = uart_instance->SR;\n  control_reg_1 = uart_instance->CR1;\n  if ((((status_reg & 0xf) == 0) && ((status_reg & 0x20) != 0)) && ((control_reg_1 & 0x20) != 0)) {\n    UART_Receive_IT(UART_handle);\n    return;\n  }\n  if (((status_reg & 0xf) == 0) || ((flag_1 = uart_instance->CR3 & 1, flag_1 == 0 && ((control_reg_1 & 0x120) == 0)))) {\n    if (((status_reg & 0x80) != 0) && ((control_reg_1 & 0x80) != 0)) {\n      UART_Transmit_IT(UART_handle);\n      return;\n    }\n    if (((status_reg & 0x40) != 0) && ((control_reg_1 & 0x40) != 0)) {\n      UART_EndTransmit_IT(UART_handle);\n    }\n  }\n  else {\n    if (((status_reg & 1) != 0) && ((control_reg_1 & 0x100) != 0)) {\n      UART_handle->ErrorCode = UART_handle->ErrorCode | 1;\n    }\n    if (((status_reg & 4) != 0) && (flag_1 != 0)) {\n      UART_handle->ErrorCode = UART_handle->ErrorCode | 2;\n    }\n    if (((status_reg & 2) != 0) && (flag_1 != 0)) {\n      UART_handle->ErrorCode = UART_handle->ErrorCode | 4;\n    }\n    if (((status_reg & 8) != 0) && (flag_1 != 0)) {\n      UART_handle->ErrorCode = UART_handle->ErrorCode | 8;\n    }\n    if (UART_handle->ErrorCode != 0) {\n      if (((status_reg & 0x20) != 0) && ((control_reg_1 & 0x20) != 0)) {\n        UART_Receive_IT(UART_handle);\n      }\n      if (((UART_handle->ErrorCode & 8) == 0) && ((UART_handle->Instance->CR3 & 0x40) == 0)) {\n        HAL_UART_ErrorCallback(UART_handle);\n        UART_handle->ErrorCode = 0;\n        return;\n      }\n      UART_EndRxTransfer(UART_handle);\n      uart_instance = UART_handle->Instance;\n      if ((uart_instance->CR3 & 0x40) == 0) {\n        HAL_UART_ErrorCallback(UART_handle);\n        return;\n      }\n      uart_instance->CR3 = uart_instance->CR3 & 0xffffffbf;\n      if (UART_handle->hdmarx == (DMA_HandleTypeDef_conflict *)0x0) {\n        HAL_UART_ErrorCallback(UART_handle);\n        return;\n      }\n      UART_handle->hdmarx->XferAbortCallback = UART_DMAAbortOnError + 1;\n      status = HAL_DMA_Abort_IT(UART_handle->hdmarx);\n      if (status != HAL_OK) {\n        (*UART_handle->hdmarx->XferAbortCallback)(UART_handle->hdmarx);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069ec": "handle_uart_080069ec",
                "huart": "UART_handle",
                "HVar1": "status",
                "uVar2": "control_reg_1",
                "uVar4": "flag_1",
                "uVar5": "status_reg",
                "cr1its": "CR1_Interrupt_Status",
                "cr3its": "CR3_Interrupt_Status",
                "isrflags": "Interrupt_Status_Register",
                "pUVar3": "uart_instance"
            },
            "calling": [
                "USART1_IRQHandler",
                "USART3_IRQHandler",
                "USART2_IRQHandler"
            ],
            "called": [
                "UART_EndTransmit_IT",
                "UART_Receive_IT",
                "UART_Transmit_IT",
                "HAL_DMA_Abort_IT",
                "HAL_UART_ErrorCallback",
                "UART_EndRxTransfer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b0c": {
            "entrypoint": "0x08006b0c",
            "current_name": "reset_uart_error_status_08006b0c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid resetUartErrorStatus_08006b0c(DMA_HandleTypeDef_conflict *dmaHandle)\n\n{\n  UART_HandleTypeDef *uartHandle;\n  UART_HandleTypeDef *uartHandle;\n  \n  uartHandle = (UART_HandleTypeDef *)dmaHandle->Parent;\n  uartHandle->RxXferCount = 0;\n  uartHandle->TxXferCount = 0;\n  HAL_UART_ErrorCallback(uartHandle);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b0c": "reset_uart_error_status_08006b0c",
                "hdma": "dmaHandle",
                "huart_00": "uartHandle",
                "huart": "uartHandle"
            },
            "calling": [],
            "called": [
                "HAL_UART_ErrorCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b1c": {
            "entrypoint": "0x08006b1c",
            "current_name": "get_state_combination_08006b1c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_UART_StateTypeDef getStateCombination_08006b1c(UART_HandleTypeDef *uartHandler)\n\n{\n  return uartHandler->RxState | uartHandler->gState;\n}\n\n",
            "renaming": {
                "FUN_08006b1c": "get_state_combination_08006b1c",
                "huart": "uartHandler"
            },
            "calling": [
                "serial_rx_active",
                "serial_tx_active"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b28": {
            "entrypoint": "0x08006b28",
            "current_name": "is_pin_high_08006b28",
            "code": "\n/* WARNING: Unknown calling convention */\n\n_Bool is_pin_high_08006b28(PinName_conflict pin_name,uint32_t *pin_map)\n\n{\n  uint32_t pin_map_index;\n  \n  pin_map_index = pin_map[(uint)((int)pin_name << 0x18) >> 0x1c];\n  return (_Bool)((byte)(pin_map_index >> ((int)pin_name & 0xfU)) & 1);\n}\n\n",
            "renaming": {
                "FUN_08006b28": "is_pin_high_08006b28",
                "pin": "pin_name",
                "map": "pin_map",
                "index": "pin_map_index"
            },
            "calling": [
                "digitalWrite",
                "digitalRead",
                "analogWrite",
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b3e": {
            "entrypoint": "0x08006b3e",
            "current_name": "update_pin_map_08006b3e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid updatePinMap_08006b3e(PinName_conflict inputPin,uint32_t *pinMap)\n\n{\n  uint shiftedIndex;\n  uint32_t originalIndex;\n  \n  shiftedIndex = (uint)((int)inputPin << 0x18) >> 0x1c;\n  pinMap[shiftedIndex] = pinMap[shiftedIndex] | 1 << ((int)inputPin & 0xfU);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b3e": "update_pin_map_08006b3e",
                "pin": "inputPin",
                "map": "pinMap",
                "uVar1": "shiftedIndex",
                "index": "originalIndex"
            },
            "calling": [
                "analogWrite",
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b5c": {
            "entrypoint": "0x08006b5c",
            "current_name": "clear_pin_08006b5c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid clearPin_08006b5c(PinName_conflict pinNameConf,uint32_t *pinMap)\n\n{\n  uint shiftedIndex;\n  uint32_t unshiftedIndex;\n  \n  shiftedIndex = (uint)((int)pinNameConf << 0x18) >> 0x1c;\n  pinMap[shiftedIndex] = pinMap[shiftedIndex] & ~(1 << ((int)pinNameConf & 0xfU));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b5c": "clear_pin_08006b5c",
                "pin": "pinNameConf",
                "map": "pinMap",
                "uVar1": "shiftedIndex",
                "index": "unshiftedIndex"
            },
            "calling": [
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b7c": {
            "entrypoint": "0x08006b7c",
            "current_name": "get_gpio_port_08006b7c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nGPIO_type * get_GPIO_port_08006b7c(uint32_t port_index)\n\n{\n  switch(port_index) {\n  case 0:\n    return (GPIO_type *)0x40010800;\n  case 1:\n    return (GPIO_type *)0x40010c00;\n  case 2:\n    return (GPIO_type *)0x40011000;\n  case 3:\n    return (GPIO_type *)0x40011400;\n  case 4:\n    return (GPIO_type *)0x40011800;\n  default:\n    return (GPIO_type *)0x0;\n  }\n}\n\n",
            "renaming": {
                "FUN_08006b7c": "get_gpio_port_08006b7c",
                "port_idx": "port_index",
                "GPIO_TypeDef": "GPIO_type"
            },
            "calling": [
                "digitalWrite",
                "digitalRead"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006bb8": {
            "entrypoint": "0x08006bb8",
            "current_name": "get_gpi_ofrom_port_index_08006bb8",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nGPIO_TypeDef * getGPIOfromPortIndex_08006bb8(uint32_t portIndex)\n\n{\n  GPIO_TypeDef *gpioPointer;\n  uint32_t tempRegister;\n  uint32_t tempRegister1;\n  uint32_t tempRegister2;\n  uint32_t tempRegister3;\n  uint32_t tempRegister4;\n  \n  switch(portIndex) {\n  case 0:\n    _DAT_40021018 = _DAT_40021018 | 4;\n    gpioPointer = (GPIO_TypeDef *)0x40010800;\n    break;\n  case 1:\n    _DAT_40021018 = _DAT_40021018 | 8;\n    gpioPointer = (GPIO_TypeDef *)0x40010c00;\n    break;\n  case 2:\n    _DAT_40021018 = _DAT_40021018 | 0x10;\n    gpioPointer = (GPIO_TypeDef *)0x40011000;\n    break;\n  case 3:\n    _DAT_40021018 = _DAT_40021018 | 0x20;\n    gpioPointer = (GPIO_TypeDef *)0x40011400;\n    break;\n  case 4:\n    _DAT_40021018 = _DAT_40021018 | 0x40;\n    gpioPointer = (GPIO_TypeDef *)0x40011800;\n    break;\n  default:\n    gpioPointer = (GPIO_TypeDef *)0x0;\n  }\n  return gpioPointer;\n}\n\n",
            "renaming": {
                "FUN_08006bb8": "get_gpi_ofrom_port_index_08006bb8",
                "port_idx": "portIndex",
                "tmpreg": "tempRegister",
                "tmpreg_1": "tempRegister1",
                "tmpreg_2": "tempRegister2",
                "tmpreg_3": "tempRegister3",
                "tmpreg_4": "tempRegister4",
                "pGVar1": "gpioPointer"
            },
            "calling": [
                "uart_init",
                "HAL_TIM_PWM_MspInit",
                "HAL_ADC_MspInit",
                "digital_io_init",
                "i2c_custom_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c60": {
            "entrypoint": "0x08006c60",
            "current_name": "get_pin_function_08006c60",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getPinFunction_08006c60(PinName_conflict pinName)\n\n{\n  uint32_t functionIndex;\n  uint32_t functionValue;\n  \n  functionIndex = pinNamemap_functionValue(pinName,(PinMap_conflict *)&PinMap_ADC);\n  functionValue = functionIndex << 0xc;\n  functionValue = functionValue >> 0x1b;\n  if (0x10 < functionValue - 1) {\n    functionValue = 0;\n  }\n  return functionValue;\n}\n\n",
            "renaming": {
                "FUN_08006c60": "get_pin_function_08006c60",
                "pin": "pinName",
                "uVar1": "functionIndex",
                "function": "functionValue"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "pinmap_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c7c": {
            "entrypoint": "0x08006c7c",
            "current_name": "get_pin_function_08006c7c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getPinFunction_08006c7c(PinName_conflict pinName)\n\n{\n  uint32_t functionCode;\n  uint32_t shiftedCode;\n  \n  functionCode = pinNamemap_shiftedCode(pinName,(PinMap_conflict *)&PinMap_PWM);\n  shiftedCode = functionCode << 0xc;\n  shiftedCode = shiftedCode >> 0x1b;\n  if (shiftedCode == 3) {\n    return 8;\n  }\n  if (shiftedCode != 4) {\n    if (shiftedCode != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_08006c7c": "get_pin_function_08006c7c",
                "pin": "pinName",
                "uVar1": "functionCode",
                "function": "shiftedCode"
            },
            "calling": [
                "pwm_stop",
                "pwm_start"
            ],
            "called": [
                "pinmap_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ca8": {
            "entrypoint": "0x08006ca8",
            "current_name": "initialize_adc_gpio_08006ca8",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initialize_ADC_GPIO_08006ca8(ADC_HandleTypeDef *ADC_Handler)\n\n{\n  GPIO_TypeDef *GPIO_Port;\n  GPIO_TypeDef *port;\n  uint32_t temporary_register;\n  uint32_t temporary_register_1;\n  GPIO_InitTypeDef GPIO_Init_Struct;\n  \n  if (ADC_Handler->Instance == (ADC_TypeDef *)0x40012400) {\n    _DAT_40021018 = _DAT_40021018 | 0x200;\n  }\n  else if (ADC_Handler->Instance == (ADC_TypeDef *)0x40012800) {\n    _DAT_40021018 = _DAT_40021018 | 0x400;\n  }\n  GPIO_Port = set_GPIO_Port_Clock((uint)((int)g_current_pin << 0x18) >> 0x1c);\n  GPIO_Init_Struct.Pin = 1 << (g_current_pin & 0xfU) & 0xffff;\n  GPIO_Init_Struct.Mode = 3;\n  GPIO_Init_Struct.Pull = 0;\n  HAL_GPIO_Init(GPIO_Port,&GPIO_Init_Struct);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ca8": "initialize_adc_gpio_08006ca8",
                "hadc": "ADC_Handler",
                "GPIOx": "GPIO_Port",
                "tmpreg": "temporary_register",
                "tmpreg_1": "temporary_register_1",
                "GPIO_InitStruct": "GPIO_Init_Struct"
            },
            "calling": [
                "HAL_ADC_Init"
            ],
            "called": [
                "set_GPIO_Port_Clock",
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d24": {
            "entrypoint": "0x08006d24",
            "current_name": "update_adc_configuration_08006d24",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid updateADCConfiguration_08006d24(ADC_HandleTypeDef *adcHandle)\n\n{\n  if (adcHandle->adcInstance != (ADC_TypeDef *)0x40012400) {\n    if (adcHandle->adcInstance == (ADC_TypeDef *)0x40012800) {\n      _DAT_4002100c = _DAT_4002100c & 0xfffffbff;\n      _DAT_40021018 = _DAT_40021018 & 0xfffffbff;\n    }\n    return;\n  }\n  _DAT_4002100c = _DAT_4002100c & 0xfffffdff;\n  _DAT_40021018 = _DAT_40021018 & 0xfffffdff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d24": "update_adc_configuration_08006d24",
                "hadc": "adcHandle",
                "Instance": "adcInstance"
            },
            "calling": [
                "HAL_ADC_DeInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d80": {
            "entrypoint": "0x08006d80",
            "current_name": "read_adc_value_08006d80",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint16_t readADCValue_08006d80(pin pin)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t adcValue;\n  uint16_t convertedValue;\n  ADC_ChannelConfTypeDef AdcChannelConf;\n  ADC_HandleTypeDef AdcHandle;\n  \n  memset(&AdcHandle,0,0x30);\n  AdcChannelConf.Channel = 0;\n  AdcChannelConf.Rank = 0;\n  AdcChannelConf.SamplingTime = 0;\n  convertedValue = 0;\n  AdcHandle.Instance = (ADC_TypeDef *)pinmap_peripheral(pin,(PinMap_conflict *)&PinMap_ADC);\n  if (AdcHandle.Instance == (ADC_TypeDef *)0x0) {\n    convertedValue = 0;\n  }\n  else {\n    AdcHandle.Init.DataAlign = 0;\n    AdcHandle.Init.ScanConvMode = 0;\n    AdcHandle.Init.ContinuousConvMode = 0;\n    AdcHandle.Init.DiscontinuousConvMode = 0;\n    AdcHandle.Init.ExternalTrigConv = 0xe0000;\n    AdcHandle.State = 0;\n    AdcHandle.Init.NbrOfConversion = 1;\n    AdcHandle.Init.NbrOfDiscConversion = 0;\n    currentPin = pin;\n    status = initializeADC(&AdcHandle);\n    if (status == HAL_OK) {\n      AdcChannelConf.Channel = getADCChannel(pin);\n      if (AdcChannelConf.Channel < 0x12) {\n        AdcChannelConf.Rank = 1;\n        AdcChannelConf.SamplingTime = 2;\n        status = configureADCChannel(&AdcHandle,&AdcChannelConf);\n        if (status == HAL_OK) {\n          status = startADCCalibration(&AdcHandle);\n          if (status == HAL_OK) {\n            status = startADCConversion(&AdcHandle);\n            if (status == HAL_OK) {\n              status = pollForADCConversion(&AdcHandle,10);\n              if (status == HAL_OK) {\n                adcValue = getADCState(&AdcHandle);\n                if ((adcValue & 0x200) != 0) {\n                  adcValue = getADCValue(&AdcHandle);\n                  convertedValue = (uint16_t)adcValue;\n                }\n                status = stopADCConversion(&AdcHandle);\n                if (status == HAL_OK) {\n                  status = deInitializeADC(&AdcHandle);\n                  if (status != HAL_OK) {\n                    convertedValue = 0;\n                  }\n                }\n                else {\n                  convertedValue = 0;\n                }\n              }\n              else {\n                convertedValue = 0;\n              }\n            }\n            else {\n              convertedValue = 0;\n            }\n          }\n          else {\n            convertedValue = 0;\n          }\n        }\n        else {\n          convertedValue = 0;\n        }\n      }\n      else {\n        convertedValue = 0;\n      }\n    }\n    else {\n      convertedValue = 0;\n    }\n  }\n  return convertedValue;\n}\n\n",
            "renaming": {
                "FUN_08006d80": "read_adc_value_08006d80",
                "PinName_conflict": "pin",
                "HVar1": "status",
                "uVar2": "adcValue",
                "uhADCxConvertedValue": "convertedValue",
                "get_adc_channel": "getADCChannel",
                "g_current_pin": "currentPin",
                "HAL_ADC_Init": "initializeADC",
                "HAL_ADC_ConfigChannel": "configureADCChannel",
                "HAL_ADCEx_Calibration_Start": "startADCCalibration",
                "HAL_ADC_Start": "startADCConversion",
                "HAL_ADC_PollForConversion": "pollForADCConversion",
                "HAL_ADC_GetState": "getADCState",
                "HAL_ADC_GetValue": "getADCValue",
                "HAL_ADC_Stop": "stopADCConversion",
                "HAL_ADC_DeInit": "deInitializeADC"
            },
            "calling": [
                "analogRead"
            ],
            "called": [
                "memset",
                "HAL_ADC_ConfigChannel",
                "HAL_ADC_PollForConversion",
                "HAL_ADC_Init",
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_GetValue",
                "get_adc_channel",
                "pinmap_peripheral",
                "HAL_ADC_GetState",
                "HAL_ADC_Start",
                "HAL_ADC_Stop",
                "HAL_ADC_DeInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e68": {
            "entrypoint": "0x08006e68",
            "current_name": "initialize_timer_pin_08006e68",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeTimerPin_08006e68(TIM_HandleTypeDef_conflict *timerHandle)\n\n{\n  uint32_t functionCode;\n  uint32_t function;\n  GPIO_TypeDef *GPIO_Port;\n  GPIO_TypeDef *GPIO_Port;\n  uint32_t tmpreg_13;\n  uint32_t tmpreg_1;\n  uint32_t tmpreg_2;\n  uint32_t tmpreg_3;\n  uint32_t tmpreg_4;\n  uint32_t tmpreg_5;\n  uint32_t tmpreg_6;\n  uint32_t tmpreg_7;\n  uint32_t tmpreg_8;\n  uint32_t tmpreg_9;\n  uint32_t pinConfiguration;\n  uint32_t pinConfiguration;\n  uint32_t pinConfiguration;\n  uint32_t tmpreg;\n  GPIO_InitTypeDef GPIO_InitSettings;\n  \n  functionCode = pinmap_function(g_current_pin,(PinMap_conflict *)&PinMap_PWM);\n  timer_enable_clock(timerHandle);\n  GPIO_Port = set_GPIO_Port_Clock((uint)((int)g_current_pin << 0x18) >> 0x1c);\n  GPIO_InitSettings.Mode = 2;\n  GPIO_InitSettings.Pull = 0;\n  GPIO_InitSettings.Speed = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  switch((functionCode << 0x11) >> 0x19) {\n  case 1:\n    pinConfiguration = pinConfiguration | 0x7000001;\n    break;\n  case 2:\n    pinConfiguration = pinConfiguration & 0xfffffffe | 0x7000000;\n    break;\n  case 3:\n    pinConfiguration = pinConfiguration | 0x7000002;\n    break;\n  case 4:\n    pinConfiguration = pinConfiguration & 0xfffffffd | 0x7000000;\n    break;\n  case 5:\n    pinConfiguration = pinConfiguration | 0x7000004;\n    break;\n  case 6:\n    pinConfiguration = pinConfiguration & 0xfffffffb | 0x7000000;\n    break;\n  case 7:\n    pinConfiguration = pinConfiguration | 0x7000008;\n    break;\n  case 8:\n    pinConfiguration = pinConfiguration & 0xfffffff7 | 0x7000000;\n    break;\n  case 9:\n    pinConfiguration = pinConfiguration | 0x7000030;\n    break;\n  case 10:\n    tmpreg_1 = pinConfiguration & 0xffffffcf;\n    pinConfiguration = tmpreg_1 | 0x7000010;\n    break;\n  case 0xb:\n    tmpreg_2 = pinConfiguration & 0xffffffcf;\n    pinConfiguration = tmpreg_2 | 0x7000000;\n    break;\n  case 0xc:\n    pinConfiguration = pinConfiguration | 0x70000c0;\n    break;\n  case 0xd:\n    tmpreg_3 = pinConfiguration & 0xffffff3f;\n    pinConfiguration = tmpreg_3 | 0x7000040;\n    break;\n  case 0xe:\n    tmpreg_4 = pinConfiguration & 0xffffff3f;\n    pinConfiguration = tmpreg_4 | 0x7000000;\n    break;\n  case 0xf:\n    pinConfiguration = pinConfiguration | 0x7000300;\n    break;\n  case 0x10:\n    tmpreg_5 = pinConfiguration & 0xfffffcff;\n    pinConfiguration = tmpreg_5 | 0x7000200;\n    break;\n  case 0x11:\n    tmpreg_6 = pinConfiguration & 0xfffffcff;\n    pinConfiguration = tmpreg_6 | 0x7000100;\n    break;\n  case 0x12:\n    tmpreg_7 = pinConfiguration & 0xfffffcff;\n    pinConfiguration = tmpreg_7 | 0x7000000;\n    break;\n  case 0x13:\n    pinConfiguration = pinConfiguration | 0x7000c00;\n    break;\n  case 0x14:\n    tmpreg_8 = pinConfiguration & 0xfffff3ff;\n    pinConfiguration = tmpreg_8 | 0x7000800;\n    break;\n  case 0x15:\n    tmpreg_9 = pinConfiguration & 0xfffff3ff;\n    pinConfiguration = tmpreg_9 | 0x7000000;\n    break;\n  case 0x16:\n    pinConfiguration = pinConfiguration | 0x7001000;\n    break;\n  case 0x17:\n    pinConfiguration = pinConfiguration & 0xffffefff | 0x7000000;\n    break;\n  case 0x1b:\n    pinConfiguration = pinConfiguration | 0x7008000;\n    break;\n  case 0x1c:\n    pinConfiguration = pinConfiguration & 0xffff7fff | 0x7000000;\n    break;\n  case 0x21:\n    pinConfiguration = pinConfiguration & 0xf8ffffff;\n    break;\n  case 0x22:\n    pinConfiguration = pinConfiguration & 0xf8ffffff;\n    pinConfiguration = pinConfiguration | 0x1000000;\n    break;\n  case 0x23:\n    pinConfiguration = pinConfiguration & 0xf8ffffff;\n    pinConfiguration = pinConfiguration | 0x2000000;\n    break;\n  case 0x24:\n    pinConfiguration = pinConfiguration & 0xf8ffffff | 0x4000000;\n  }\n  GPIO_InitSettings.Pin = 1 << (g_current_pin & 0xfU) & 0xffff;\n  HAL_GPIO_Init(GPIO_Port,&GPIO_InitSettings);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e68": "initialize_timer_pin_08006e68",
                "htim": "timerHandle",
                "uVar1": "functionCode",
                "GPIOx": "GPIO_Port",
                "port": "GPIO_Port",
                "tmpreg_10": "pinConfiguration",
                "tmpreg_11": "pinConfiguration",
                "tmpreg_12": "pinConfiguration",
                "GPIO_InitStruct": "GPIO_InitSettings"
            },
            "calling": [
                "HAL_TIM_PWM_Init"
            ],
            "called": [
                "pinmap_function",
                "set_GPIO_Port_Clock",
                "timer_enable_clock",
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007110": {
            "entrypoint": "0x08007110",
            "current_name": "disable_timer_clock_08007110",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid disable_timer_clock_08007110(TIM_HandleTypeDef_conflict *timer_handle)\n\n{\n  disable_timer_clock_08007110(timer_handle);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007110": "disable_timer_clock_08007110",
                "htim": "timer_handle",
                "timer_disable_clock": "disable_timer_clock"
            },
            "calling": [
                "HAL_TIM_PWM_DeInit"
            ],
            "called": [
                "timer_disable_clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007118": {
            "entrypoint": "0x08007118",
            "current_name": "initialize_pwm_08007118",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializePWM_08007118(pinName pin,uint32_t clockFrequency,uint32_t period,uint32_t pulseValue,\n                 uint8_t performInitialization)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t timerClockFreq;\n  uint32_t timerChannel;\n  uint32_t pwmChannel;\n  TIM_OC_InitTypeDef timerConfig;\n  TIM_HandleTypeDef_conflict timerHandle;\n  \n  memset(&timerHandle,0,0x40);\n  timerConfig.OCMode = 0;\n  timerConfig.Pulse = 0;\n  timerConfig.OCPolarity = 0;\n  timerConfig.OCNPolarity = 0;\n  timerConfig.OCFastMode = 0;\n  timerConfig.OCIdleState = 0;\n  timerConfig.OCNIdleState = 0;\n  timerHandle.Instance = (TIM_TypeDef_conflict *)pinmap_peripheral(pin,(PinMap_conflict *)&PinMap_PWM)\n  ;\n  if (timerHandle.Instance != (TIM_TypeDef_conflict *)0x0) {\n    timerClockFreq = getTimerClkFreq(timerHandle.Instance);\n    timerHandle.Init.Prescaler = timerClockFreq / clockFrequency - 1;\n    timerHandle.Init.Period = period - 1;\n    timerHandle.Init.ClockDivision = 0;\n    timerHandle.Init.CounterMode = 0;\n    timerHandle.Init.RepetitionCounter = 0;\n    timerHandle.State = HAL_TIM_STATE_RESET;\n    if (((performInitialization != '\\x01') ||\n        (g_current_pin = pin, status = HAL_TIM_PWM_Init(&timerHandle), status == HAL_OK)) &&\n       (((timerClockFreq = get_pwm_channel(pin), timerClockFreq == 0 ||\n         (((timerClockFreq == 4 || (timerClockFreq == 8)) || (timerClockFreq == 0xc)))) || (timerClockFreq == 0x18)))) {\n      timerConfig.OCMode = 0x60;\n      timerConfig.OCPolarity = 0;\n      timerConfig.OCFastMode = 0;\n      timerConfig.OCNPolarity = 0;\n      timerConfig.OCNIdleState = 0;\n      timerConfig.OCIdleState = 0;\n      timerConfig.Pulse = pulseValue;\n      status = HAL_TIM_PWM_ConfigChannel(&timerHandle,&timerConfig,timerClockFreq);\n      if (status == HAL_OK) {\n        pwmChannel = pinmap_function(pin,(PinMap_conflict *)&PinMap_PWM);\n        if ((pwmChannel & 0x100000) == 0) {\n          HAL_TIM_PWM_Start(&timerHandle,timerClockFreq);\n        }\n        else {\n          HAL_TIMEx_PWMN_Start(&timerHandle,timerClockFreq);\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007118": "initialize_pwm_08007118",
                "PinName_conflict": "pinName",
                "clock_freq": "clockFrequency",
                "value": "pulseValue",
                "do_init": "performInitialization",
                "HVar1": "status",
                "uVar2": "timerClockFreq",
                "timChannel": "timerChannel",
                "uVar3": "pwmChannel",
                "timConfig": "timerConfig",
                "timHandle": "timerHandle"
            },
            "calling": [
                "analogWrite"
            ],
            "called": [
                "memset",
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_TIMEx_PWMN_Start",
                "pinmap_function",
                "get_pwm_channel",
                "HAL_TIM_PWM_Start",
                "pinmap_peripheral",
                "getTimerClkFreq",
                "HAL_TIM_PWM_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080071e4": {
            "entrypoint": "0x080071e4",
            "current_name": "stop_pwm_channel_080071e4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid stopPWMChannel_080071e4(PinName_conflict pinName)\n\n{\n  uint32_t channel;\n  uint32_t timchannel;\n  uint32_t functionMap;\n  TIM_HandleTypeDef_conflict timHandle;\n  \n  timHandle.Instance = (TIM_TypeDef_conflict *)pinNamemap_peripheral(pinName,(PinMap_conflict *)&PinMap_PWM)\n  ;\n  if ((timHandle.Instance != (TIM_TypeDef_conflict *)0x0) &&\n     ((((channel = get_pwm_channel(pinName), channel == 0 || (channel == 4)) || (channel == 8)) ||\n      ((channel == 0xc || (channel == 0x18)))))) {\n    functionMap = pinNamemap_function(pinName,(PinMap_conflict *)&PinMap_PWM);\n    if ((functionMap & 0x100000) == 0) {\n      HAL_TIM_PWM_Stop(&timHandle,channel);\n    }\n    else {\n      HAL_TIMEx_PWMN_Stop(&timHandle,channel);\n    }\n    HAL_TIM_PWM_DeInit(&timHandle);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080071e4": "stop_pwm_channel_080071e4",
                "pin": "pinName",
                "Channel": "channel",
                "uVar1": "functionMap"
            },
            "calling": [
                "pinMode"
            ],
            "called": [
                "HAL_TIM_PWM_DeInit",
                "HAL_TIM_PWM_Stop",
                "get_pwm_channel",
                "pinmap_function",
                "pinmap_peripheral",
                "HAL_TIMEx_PWMN_Stop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800723c": {
            "entrypoint": "0x0800723c",
            "current_name": "get_current_tick_0800723c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t get_current_tick_0800723c(void)\n\n{\n  uint32_t current_tick;\n  \n  current_tick = HAL_GetTick();\n  return current_tick;\n}\n\n",
            "renaming": {
                "FUN_0800723c": "get_current_tick_0800723c",
                "uVar1": "current_tick"
            },
            "calling": [
                "millis"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007244": {
            "entrypoint": "0x08007244",
            "current_name": "FUNC_08007244",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08007244(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007244": "FUNC_08007244"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007246": {
            "entrypoint": "0x08007246",
            "current_name": "handle_system_tick_08007246",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleSystemTick_08007246(void)\n\n{\n  incrementTick();\n  systemTickInterruptHandler();\n  customSystickHandler();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007246": "handle_system_tick_08007246",
                "HAL_IncTick": "incrementTick",
                "HAL_SYSTICK_IRQHandler": "systemTickInterruptHandler",
                "noOsSystickHandler": "customSystickHandler"
            },
            "calling": [],
            "called": [
                "HAL_SYSTICK_IRQHandler",
                "HAL_IncTick",
                "noOsSystickHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007258": {
            "entrypoint": "0x08007258",
            "current_name": "configure_pin_08007258",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid configurePin_08007258(PinName_conflict pinName,uint32_t pinMode,uint32_t pinPull)\n\n{\n  uint pinValue;\n  GPIO_TypeDef *selectedPort;\n  GPIO_TypeDef *GPIOport;\n  uint32_t temporaryRegister2;\n  uint32_t temporaryRegister1;\n  uint32_t temporaryRegister;\n  GPIO_InitTypeDef GPIO_Configuration;\n  \n  pinValue = (uint)pinName;\n  selectedPort = set_GPIO_Port_Clock((pinValue << 0x18) >> 0x1c);\n  GPIO_Configuration.Pin = 1 << (pinValue & 0xf) & 0xffff;\n  GPIO_Configuration.Speed = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  if ((pinValue - 0xd & 0xff) < 2) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  if (((pinValue == 0xf) || (pinValue == 0x13)) || (pinValue == 0x14)) {\n    temporaryRegister1 = _DAT_40010004 & 0xf8ffffff;\n    _DAT_40010004 = temporaryRegister1 | 0x2000000;\n  }\n  GPIO_Configuration.Mode = pinMode;\n  GPIO_Configuration.Pull = pinPull;\n  HAL_GPIO_Init(selectedPort,&GPIO_Configuration);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007258": "configure_pin_08007258",
                "pin": "pinName",
                "mode": "pinMode",
                "pull": "pinPull",
                "uVar1": "pinValue",
                "GPIOx": "selectedPort",
                "port": "GPIOport",
                "tmpreg_2": "temporaryRegister2",
                "tmpreg_1": "temporaryRegister1",
                "tmpreg": "temporaryRegister",
                "GPIO_InitStructure": "GPIO_Configuration"
            },
            "calling": [
                "pinMode"
            ],
            "called": [
                "set_GPIO_Port_Clock",
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072d8": {
            "entrypoint": "0x080072d8",
            "current_name": "set_pin_state_080072d8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid setPinState_080072d8(GPIO_TypeDef *gpioPort,uint32_t pinNumber,uint32_t pinValue)\n\n{\n  if (pinValue == 0) {\n    writePinState(gpioPort,(uint16_t)pinNumber,pinReset);\n    return;\n  }\n  writePinState(gpioPort,(uint16_t)pinNumber,pinSet);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d8": "set_pin_state_080072d8",
                "port": "gpioPort",
                "pin": "pinNumber",
                "val": "pinValue",
                "HAL_GPIO_WritePin": "writePinState",
                "GPIO_PIN_RESET": "pinReset",
                "GPIO_PIN_SET": "pinSet"
            },
            "calling": [
                "digitalWrite"
            ],
            "called": [
                "HAL_GPIO_WritePin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072f0": {
            "entrypoint": "0x080072f0",
            "current_name": "read_pin_state_080072f0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t readPinState_080072f0(GPIO_TypeDef *gpioPort,uint32_t gpioPin)\n\n{\n  GPIO_PinState pinState;\n  \n  pinState = HAL_GPIO_ReadPin(gpioPort,(uint16_t)gpioPin);\n  return (uint)pinState;\n}\n\n",
            "renaming": {
                "FUN_080072f0": "read_pin_state_080072f0",
                "port": "gpioPort",
                "pin": "gpioPin",
                "GVar1": "pinState"
            },
            "calling": [
                "digitalRead"
            ],
            "called": [
                "HAL_GPIO_ReadPin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072fa": {
            "entrypoint": "0x080072fa",
            "current_name": "initialize_hardware_080072fa",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeHardware_080072fa(void)\n\n{\n  initializeHAL();\n  configureSystemClock();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072fa": "initialize_hardware_080072fa",
                "HAL_Init": "initializeHAL",
                "SystemClock_Config": "configureSystemClock"
            },
            "calling": [
                "init"
            ],
            "called": [
                "SystemClock_Config",
                "HAL_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007306": {
            "entrypoint": "0x08007306",
            "current_name": "find_peripheral_address_08007306",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid * find_peripheral_address_08007306(pin_to_search pin,pin_map *current_map)\n\n{\n  while( true ) {\n    if (current_map->pin == NoConnection) {\n      return (void *)0x0;\n    }\n    if (current_map->pin == pin) break;\n    current_map = current_map + 1;\n  }\n  return current_map->peripheral_address;\n}\n\n",
            "renaming": {
                "FUN_08007306": "find_peripheral_address_08007306",
                "PinName_conflict": "pin_to_search",
                "PinMap_conflict": "pin_map",
                "map": "current_map",
                "NC": "NoConnection",
                "peripheral": "peripheral_address"
            },
            "calling": [
                "pinmap_peripheral",
                "pinmap_find_peripheral"
            ],
            "called": [
                "pinmap_find_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007320": {
            "entrypoint": "0x08007320",
            "current_name": "find_peripheral_08007320",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid * find_peripheral_08007320(PinName_conflict pin_name,PinMap_conflict *pin_map)\n\n{\n  void *peripheral_address;\n  \n  if (pin_name != NC) {\n    peripheral_address = pin_namepin_map_find_peripheral_08007320(pin_name,pin_map);\n    return peripheral_address;\n  }\n  return (void *)0x0;\n}\n\n",
            "renaming": {
                "FUN_08007320": "find_peripheral_08007320",
                "pin": "pin_name",
                "map": "pin_map",
                "pvVar1": "peripheral_address"
            },
            "calling": [
                "uart_debug_write",
                "uart_init",
                "adc_read_value",
                "uart_debug_init",
                "pwm_stop",
                "pwm_start",
                "i2c_custom_init"
            ],
            "called": [
                "pinmap_find_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007332": {
            "entrypoint": "0x08007332",
            "current_name": "find_pin_by_peripheral_08007332",
            "code": "\n/* WARNING: Unknown calling convention */\n\nPinName_conflict findPinByPeripheral_08007332(void *targetPeripheral,PinMap *pinMap)\n\n{\n  while( true ) {\n    if (pinMap->targetPeripheral == (void *)0x0) {\n      return NotConnected;\n    }\n    if (pinMap->targetPeripheral == targetPeripheral) break;\n    pinMap = pinMap increment 1;\n  }\n  return pinMap->pin;\n}\n\n",
            "renaming": {
                "FUN_08007332": "find_pin_by_peripheral_08007332",
                "peripheral": "targetPeripheral",
                "PinMap_conflict": "PinMap",
                "map": "pinMap",
                "NC": "NotConnected",
                "+": "increment"
            },
            "calling": [
                "pinmap_pin",
                "pinmap_find_pin"
            ],
            "called": [
                "pinmap_find_pin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800734a": {
            "entrypoint": "0x0800734a",
            "current_name": "get_peripheral_pin_0800734a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nPinName_conflict getPeripheralPin_0800734a(void *peripheral,pinMap *pinMap)\n\n{\n  PinName_conflict pinName;\n  \n  if (peripheral != (void *)0x0) {\n    pinName = pinpinMap_find_pin(peripheral,pinMap);\n    return pinName;\n  }\n  return NC;\n}\n\n",
            "renaming": {
                "FUN_0800734a": "get_peripheral_pin_0800734a",
                "PinMap_conflict": "pinMap",
                "map": "pinMap",
                "PVar1": "pinName"
            },
            "calling": [
                "uart_debug_init",
                "HardwareSerial"
            ],
            "called": [
                "pinmap_find_pin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800735a": {
            "entrypoint": "0x0800735a",
            "current_name": "find_pin_function_0800735a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t findPinFunction_0800735a(pinName desiredPin,pinMap *currentMap)\n\n{\n  while( true ) {\n    if (currentMap->desiredPin == NC) {\n      return 0xffffffff;\n    }\n    if (currentMap->desiredPin == desiredPin) break;\n    currentMap = currentMap + 1;\n  }\n  return currentMap->function;\n}\n\n",
            "renaming": {
                "FUN_0800735a": "find_pin_function_0800735a",
                "PinName_conflict": "pinName",
                "PinMap_conflict": "pinMap",
                "map": "currentMap",
                "pin": "desiredPin"
            },
            "calling": [
                "pinmap_function",
                "pinmap_find_function"
            ],
            "called": [
                "pinmap_find_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007376": {
            "entrypoint": "0x08007376",
            "current_name": "find_pin_function_08007376",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t findPinFunction_08007376(PinName_conflict pinName,PinMap_conflict *pinMap)\n\n{\n  uint32_t functionAddress;\n  \n  if (pinName == NC) {\n    return 0xffffffff;\n  }\n  functionAddress = pinNamepinMap_find_function(pinName,pinMap);\n  return functionAddress;\n}\n\n",
            "renaming": {
                "FUN_08007376": "find_pin_function_08007376",
                "pin": "pinName",
                "map": "pinMap",
                "uVar1": "functionAddress"
            },
            "calling": [
                "uart_init",
                "HAL_TIM_PWM_MspInit",
                "get_pwm_channel",
                "pwm_stop",
                "get_adc_channel",
                "pwm_start",
                "i2c_custom_init"
            ],
            "called": [
                "pinmap_find_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800738a": {
            "entrypoint": "0x0800738a",
            "current_name": "check_pin_validity_0800738a",
            "code": "\n/* WARNING: Unknown calling convention */\n\n_Bool checkPinValidity_0800738a(pinName inputPin,pinMap *pinMapArray)\n\n{\n  if (inputPin == NC) {\n    return false;\n  }\n  while( true ) {\n    if (pinMapArray->inputPin == NC) {\n      return false;\n    }\n    if (inputPin == pinMapArray->inputPin) break;\n    pinMapArray = pinMapArray + 1;\n  }\n  return true;\n}\n\n",
            "renaming": {
                "FUN_0800738a": "check_pin_validity_0800738a",
                "PinName_conflict": "pinName",
                "PinMap_conflict": "pinMap",
                "pin": "inputPin",
                "map": "pinMapArray"
            },
            "calling": [
                "analogWriteCallback",
                "setPinModeCallback",
                "analogWrite",
                "pinMode",
                "enableI2CPins",
                "sysexCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073ae": {
            "entrypoint": "0x080073ae",
            "current_name": "merge_pointers_080073ae",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid * merge_pointers_080073ae(void *a,void *b)\n\n{\n  if (a != b) {\n    if (a == (void *)0x0) {\n      return b;\n    }\n    if (b == (void *)0x0) {\n      return a;\n    }\n    a = (void *)0x0;\n  }\n  return a;\n}\n\n",
            "renaming": {
                "FUN_080073ae": "merge_pointers_080073ae"
            },
            "calling": [
                "uart_init",
                "i2c_custom_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073c0": {
            "entrypoint": "0x080073c0",
            "current_name": "run_rtc_callback_080073c0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid run_RTC_callback_080073c0(RTC_HandleTypeDef *RTC_handler)\n\n{\n  if (user_callback != (callback_pointer)0x0) {\n    (*user_callback)(callback_data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073c0": "run_rtc_callback_080073c0",
                "hrtc": "RTC_handler",
                "RTCUserCallback": "user_callback",
                "voidCallbackPtr": "callback_pointer",
                "callbackUserData": "callback_data"
            },
            "calling": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073d8": {
            "entrypoint": "0x080073d8",
            "current_name": "handle_alarm_irq_080073d8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleAlarmIRQ_080073d8(void)\n\n{\n  HAL_RTC_AlarmIRQHandler(rtcHandle);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073d8": "handle_alarm_irq_080073d8",
                "&RtcHandle": "rtcHandle"
            },
            "calling": [],
            "called": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073e8": {
            "entrypoint": "0x080073e8",
            "current_name": "infinite_loop_080073e8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid infiniteLoop_080073e8(char *message,int value)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080073e8": "infinite_loop_080073e8",
                "msg": "message",
                "val": "value"
            },
            "calling": [
                "SystemClock_Config",
                "_Error_Handler",
                "onReceiveService"
            ],
            "called": [
                "_Error_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073ec": {
            "entrypoint": "0x080073ec",
            "current_name": "initialize_system_080073ec",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeSystem_080073ec(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073ec": "initialize_system_080073ec"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007438": {
            "entrypoint": "0x08007438",
            "current_name": "initialize_timer_08007438",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n/* WARNING: Unknown calling convention */\n\nvoid initializeTimer_08007438(TIM_HandleTypeDef_conflict *timerHandle)\n\n{\n  uint32_t temporaryRegister;\n  uint32_t temporaryRegister1;\n  uint32_t temporaryRegister2;\n  uint32_t temporaryRegister3;\n  \n  if (timerHandle->Instance == (TIM_TypeDef_conflict *)0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n    timerHandles[0] = timerHandle;\n  }\n  if (timerHandle->Instance == (TIM_TypeDef_conflict *)0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n    timerHandles[1] = timerHandle;\n  }\n  if (timerHandle->Instance == (TIM_TypeDef_conflict *)0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n    timerHandles[2] = timerHandle;\n  }\n  if (timerHandle->Instance == (TIM_TypeDef_conflict *)0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n    timerHandles[3] = timerHandle;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007438": "initialize_timer_08007438",
                "htim": "timerHandle",
                "tmpreg": "temporaryRegister",
                "tmpreg_1": "temporaryRegister1",
                "tmpreg_2": "temporaryRegister2",
                "tmpreg_3": "temporaryRegister3",
                "timer_handles": "timerHandles"
            },
            "calling": [
                "HAL_TIM_PWM_MspInit",
                "HAL_TIM_OC_MspInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080074e0": {
            "entrypoint": "0x080074e0",
            "current_name": "adjust_timer_settings_080074e0",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid adjustTimerSettings_080074e0(TIM_HandleTypeDef_conflict *timerHandle)\n\n{\n  if (timerHandle->Instance == (TimerType *)0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 & 0xfffff7ff;\n  }\n  if (timerHandle->Instance == (TimerType *)0x40000000) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffe;\n  }\n  if (timerHandle->Instance == (TimerType *)0x40000400) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffd;\n  }\n  if (timerHandle->Instance == (TimerType *)0x40000800) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080074e0": "adjust_timer_settings_080074e0",
                "htim": "timerHandle",
                "TIM_TypeDef_conflict": "TimerType"
            },
            "calling": [
                "HAL_TIM_OC_MspDeInit",
                "HAL_TIM_PWM_MspDeInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007544": {
            "entrypoint": "0x08007544",
            "current_name": "get_timer_interrupt_number_08007544",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getTimerInterruptNumber_08007544(TimerTypeDef *timer)\n\n{\n  if (timer == (TimerTypeDef *)0xffffffff) {\n    return 0;\n  }\n  if (timer == (TimerTypeDef *)0x40000400) {\n    return 0x1d;\n  }\n  if (timer < (TimerTypeDef *)0x40000401) {\n    if (timer == (TimerTypeDef *)0x40000000) {\n      return 0x1c;\n    }\n  }\n  else {\n    if (timer == (TimerTypeDef *)0x40000800) {\n      return 0x1e;\n    }\n    if (timer == (TimerTypeDef *)0x40012c00) {\n      return 0x19;\n    }\n  }\n  printErrorMessage(\"TIM: Unknown timerer IRQn\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007544": "get_timer_interrupt_number_08007544",
                "tim": "timer",
                "TIM_TypeDef_conflict": "TimerTypeDef",
                "iprintf": "printErrorMessage"
            },
            "calling": [
                "TimerPulseInit",
                "TimerPulseDeinit"
            ],
            "called": [
                "iprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007594": {
            "entrypoint": "0x08007594",
            "current_name": "get_timer_instance_type_08007594",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint8_t getTimerInstanceType_08007594(Timer_TypeDef *timer)\n\n{\n  if (timer == (Timer_TypeDef *)0xffffffff) {\n    return '\\0';\n  }\n  if (timer == (Timer_TypeDef *)0x40000400) {\n    return '\\x01';\n  }\n  if (timer < (Timer_TypeDef *)0x40000401) {\n    if (timer == (Timer_TypeDef *)0x40000000) {\n      return '\\x01';\n    }\n  }\n  else {\n    if (timer == (Timer_TypeDef *)0x40000800) {\n      return '\\x01';\n    }\n    if (timer == (Timer_TypeDef *)0x40012c00) {\n      return '\\x02';\n    }\n  }\n  printErrorMessage(\"TIM: Unknown timerer instance\");\n  return '\\0';\n}\n\n",
            "renaming": {
                "FUN_08007594": "get_timer_instance_type_08007594",
                "tim": "timer",
                "TIM_TypeDef_conflict": "Timer_TypeDef",
                "iprintf": "printErrorMessage"
            },
            "calling": [
                "getTimerClkFreq"
            ],
            "called": [
                "iprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080075dc": {
            "entrypoint": "0x080075dc",
            "current_name": "calculate_timer_frequency_080075dc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t calculateTimerFrequency_080075dc(TIM_TypeDef_conflict *timer)\n\n{\n  uint32_t APB2CLKDivider;\n  uint8_t timerSrc;\n  uint32_t timerFreq;\n  uint32_t APB1CLKDivider;\n  uint32_t flashLatency;\n  RCC_ClkInitTypeDef_conflict clockConfig;\n  \n  clockConfig.ClockType = 0;\n  clockConfig.SYSCLKSource = 0;\n  clockConfig.AHBCLKDivider = 0;\n  clockConfig.APB1CLKDivider = 0;\n  clockConfig.APB2CLKDivider = 0;\n  flashLatency = 0;\n  HAL_RCC_GetClockConfig(&clockConfig,&flashLatency);\n  timerSrc = getTimerClkSrc(timer);\n  APB2CLKDivider = clockConfig.APB2CLKDivider;\n  APB1CLKDivider = clockConfig.APB1CLKDivider;\n  if (timerSrc == '\\x01') {\n    timerFreq = HAL_RCC_GetPCLK1Freq();\n  }\n  else if (timerSrc == '\\x02') {\n    timerFreq = HAL_RCC_GetPCLK2Freq();\n    APB1CLKDivider = APB2CLKDivider;\n  }\n  else {\n    iprintf(\"TIM: Unknown clock source\");\n    timerFreq = 0;\n    APB1CLKDivider = 0;\n  }\n  if (APB1CLKDivider != 0x500) {\n    if (APB1CLKDivider < 0x501) {\n      if (APB1CLKDivider != 0x400) {\n        return timerFreq;\n      }\n    }\n    else if ((APB1CLKDivider != 0x600) && (APB1CLKDivider != 0x700)) {\n      return timerFreq;\n    }\n  }\n  return timerFreq << 1;\n}\n\n",
            "renaming": {
                "FUN_080075dc": "calculate_timer_frequency_080075dc",
                "tim": "timer",
                "uVar1": "APB2CLKDivider",
                "uVar2": "timerSrc",
                "uVar3": "timerFreq",
                "uVar4": "APB1CLKDivider",
                "pFLatency": "flashLatency",
                "clkconfig": "clockConfig"
            },
            "calling": [
                "TimerPulseInit",
                "pwm_start"
            ],
            "called": [
                "getTimerClkSrc",
                "HAL_RCC_GetClockConfig",
                "HAL_RCC_GetPCLK2Freq",
                "iprintf",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007648": {
            "entrypoint": "0x08007648",
            "current_name": "configure_timer_08007648",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configureTimer_08007648(stimer_t_conflict *timerConfig,uint16_t desiredPeriod,uint16_t desiredPulseWidth,\n                 _func_void_stimer_t_ptr_uint32_t_conflict *interruptHandler)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t timerFreq;\n  TIM_HandleTypeDef_conflict *timerHandle;\n  TIM_HandleTypeDef_conflict *timerTim;\n  TIM_OC_InitTypeDef outputConfig;\n  \n  outputConfig.OCMode = 0;\n  outputConfig.Pulse = 0;\n  outputConfig.OCPolarity = 0;\n  outputConfig.OCNPolarity = 0;\n  outputConfig.OCFastMode = 0;\n  outputConfig.OCIdleState = 0;\n  outputConfig.OCNIdleState = 0;\n  timerTim = &timerConfig->timerHandle;\n  timerConfig->timer = (TIM_TypeDef_conflict *)0x40000000;\n  (timerConfig->timerHandle).Instance = (TIM_TypeDef_conflict *)0x40000000;\n  (timerConfig->timerHandle).Init.Period = (uint)desiredPeriod;\n  timerFreq = getTimerClkFreq((TIM_TypeDef_conflict *)0x40000000);\n  (timerConfig->timerHandle).Init.Prescaler = timerFreq / 1000000 - 1;\n  (timerConfig->timerHandle).Init.ClockDivision = 0;\n  (timerConfig->timerHandle).Init.CounterMode = 0;\n  (timerConfig->timerHandle).Init.RepetitionCounter = 0;\n  timerConfig->interruptHandlerOC = interruptHandler;\n  outputConfig.OCMode = 0;\n  outputConfig.OCPolarity = 0;\n  outputConfig.OCFastMode = 0;\n  outputConfig.OCNPolarity = 0;\n  outputConfig.OCIdleState = 0;\n  outputConfig.OCNIdleState = 0;\n  outputConfig.Pulse = (uint)desiredPulseWidth;\n  timerFreq = getTimerIrq(timerConfig->timer);\n  HAL_NVIC_SetPriority((IRQn_Type_conflict)timerFreq,0xe,0);\n  timerFreq = getTimerIrq(timerConfig->timer);\n  HAL_NVIC_EnableIRQ((IRQn_Type_conflict)timerFreq);\n  status = HAL_TIM_OC_Init(timerTim);\n  if ((status == HAL_OK) && (status = HAL_TIM_OC_ConfigChannel(timerTim,&outputConfig,0), status == HAL_OK)) {\n    HAL_TIM_OC_Start_IT(timerTim,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007648": "configure_timer_08007648",
                "obj": "timerConfig",
                "period": "desiredPeriod",
                "pulseWidth": "desiredPulseWidth",
                "irqHandle": "interruptHandler",
                "HVar1": "status",
                "uVar2": "timerFreq",
                "handle": "timerHandle",
                "htim": "timerTim",
                "sConfig": "outputConfig"
            },
            "calling": [
                "initISR"
            ],
            "called": [
                "HAL_TIM_OC_Start_IT",
                "getTimerIrq",
                "HAL_TIM_OC_ConfigChannel",
                "HAL_TIM_OC_Init",
                "getTimerClkFreq",
                "HAL_NVIC_EnableIRQ",
                "HAL_NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080076e0": {
            "entrypoint": "0x080076e0",
            "current_name": "disable_timer_irq_080076e0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid disableTimerIRQ_080076e0(stimer_t_conflict *timerConf)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t timerIRQ;\n  TIM_HandleTypeDef_conflict *timerHandle;\n  \n  timerConf->irqHandleOC = (_func_void_stimer_t_ptr_uint32_t_conflict *)0x0;\n  timerIRQ = getTimerIrq(timerConf->timer);\n  HAL_NVIC_DisableIRQ((IRQn_Type_conflict)timerIRQ);\n  status = HAL_TIM_OC_DeInit(&timerConf->timerHandle);\n  if (status == HAL_OK) {\n    HAL_TIM_OC_Stop_IT(&timerConf->timerHandle,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080076e0": "disable_timer_irq_080076e0",
                "obj": "timerConf",
                "HVar1": "status",
                "uVar2": "timerIRQ",
                "handle": "timerHandle"
            },
            "calling": [
                "finISR"
            ],
            "called": [
                "HAL_TIM_OC_Stop_IT",
                "getTimerIrq",
                "HAL_TIM_OC_DeInit",
                "HAL_NVIC_DisableIRQ"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007708": {
            "entrypoint": "0x08007708",
            "current_name": "initialize_timer_08007708",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeTimer_08007708(TIM_HandleTypeDef_conflict *timerHandler)\n\n{\n  timer_enable_clock(timerHandler);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007708": "initialize_timer_08007708",
                "htim": "timerHandler"
            },
            "calling": [
                "HAL_TIM_OC_Init"
            ],
            "called": [
                "timer_enable_clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007710": {
            "entrypoint": "0x08007710",
            "current_name": "disable_timer_clock_08007710",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid disableTimerClock_08007710(TIM_HandleTypeDef_conflict *timerHandle)\n\n{\n  timer_disable_clock(timerHandle);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007710": "disable_timer_clock_08007710",
                "htim": "timerHandle"
            },
            "calling": [
                "HAL_TIM_OC_DeInit"
            ],
            "called": [
                "timer_disable_clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007718": {
            "entrypoint": "0x08007718",
            "current_name": "get_stimer_from_htim_08007718",
            "code": "\n/* WARNING: Unknown calling convention */\n\nstimer_t * get_stimer_from_htim_08007718(htim_conflict *input_htim)\n\n{\n  return (stimer_t *)&input_htim[-1].ptr_lock;\n}\n\n",
            "renaming": {
                "FUN_08007718": "get_stimer_from_htim_08007718",
                "TIM_HandleTypeDef_conflict": "htim_conflict",
                "stimer_t_conflict": "stimer_t",
                "htim": "input_htim",
                "Lock": "ptr_lock"
            },
            "calling": [
                "HAL_TIM_OC_DelayElapsedCallback",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800771c": {
            "entrypoint": "0x0800771c",
            "current_name": "handle_tim_interrupt_0800771c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleTimInterrupt_0800771c(TIM_HandleTypeDef_conflict *timHandle)\n\n{\n  stimer_t_conflict *timerObject;\n  stimer_t_conflict *obj;\n  \n  timerObject = getTimerObject(timHandle);\n  if ((timerObject->irqHandlerOC != (_func_void_stimer_t_ptr_uint32_t_conflict *)0x0) &&\n     (timHandle->Channel == HAL_TIM_ACTIVE_CHANNEL_1)) {\n    (*timerObject->irqHandlerOC)(timerObject,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800771c": "handle_tim_interrupt_0800771c",
                "htim": "timHandle",
                "psVar1": "timerObject",
                "get_timer_obj": "getTimerObject",
                "irqHandleOC": "irqHandlerOC"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [
                "get_timer_obj"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007736": {
            "entrypoint": "0x08007736",
            "current_name": "handle_timer_irq_08007736",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleTimerIRQ_08007736(TIM_HandleTypeDef_conflict *timerHandler)\n\n{\n  stimer_t_conflict *timerObject;\n  stimer_t_conflict *pointerToObject;\n  \n  timerObject = get_timer_pointerToObject(timerHandler);\n  if (timerObject->irqHandle != (_func_void_stimer_t_ptr_conflict *)0x0) {\n    (*timerObject->irqHandle)(timerObject);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007736": "handle_timer_irq_08007736",
                "htim": "timerHandler",
                "psVar1": "timerObject",
                "obj": "pointerToObject"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [
                "get_timer_obj"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007744": {
            "entrypoint": "0x08007744",
            "current_name": "get_timer_counter_08007744",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t get_timer_counter_08007744(stimer_t_conflict *timer)\n\n{\n  return ((timer->handle).Instance)->CNT;\n}\n\n",
            "renaming": {
                "FUN_08007744": "get_timer_counter_08007744",
                "obj": "timer"
            },
            "calling": [
                "ServoIrqHandle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800774a": {
            "entrypoint": "0x0800774a",
            "current_name": "set_timer_count_0800774a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid setTimerCount_0800774a(stimer_t_conflict *timerObject,uint32_t timerCount)\n\n{\n  ((timerObject->handle).Instance)->CNT = timerCount;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800774a": "set_timer_count_0800774a",
                "obj": "timerObject",
                "value": "timerCount"
            },
            "calling": [
                "ServoIrqHandle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007750": {
            "entrypoint": "0x08007750",
            "current_name": "set_timer_channel_value_08007750",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid setTimerChannelValue_08007750(stimer_t_conflict *timerObject,uint32_t channelNumber,uint32_t timerValue)\n\n{\n  (&((timerObject->handle).Instance)->CCR1)[channelNumber] = timerValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007750": "set_timer_channel_value_08007750",
                "obj": "timerObject",
                "channel": "channelNumber",
                "value": "timerValue"
            },
            "calling": [
                "ServoIrqHandle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007760": {
            "entrypoint": "0x08007760",
            "current_name": "handle_timer_interrupt_08007760",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleTimerInterrupt_08007760(void)\n\n{\n  if (timerHandles[0] != (TimerHandleConflict *)0x0) {\n    handleTimerIRQ(timerHandles[0]);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007760": "handle_timer_interrupt_08007760",
                "timer_handles": "timerHandles",
                "TIM_HandleTypeDef_conflict": "TimerHandleConflict",
                "HAL_TIM_IRQHandler": "handleTimerIRQ"
            },
            "calling": [],
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007774": {
            "entrypoint": "0x08007774",
            "current_name": "handle_second_timer_interrupt_08007774",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleSecondTimerInterrupt_08007774(void)\n\n{\n  if (timerHandles[1] != (TIM_HandleTypeDef_conflict *)0x0) {\n    HAL_TIM_IRQHandler(timerHandles[1]);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007774": "handle_second_timer_interrupt_08007774",
                "timer_handles": "timerHandles"
            },
            "calling": [],
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007788": {
            "entrypoint": "0x08007788",
            "current_name": "handle_tim_interrupt_08007788",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleTimInterrupt_08007788(void)\n\n{\n  if (timers[2] != (TimHandleConflict *)0x0) {\n    HAL_TIM_IRQHandler(timers[2]);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007788": "handle_tim_interrupt_08007788",
                "timer_handles": "timers",
                "TIM_HandleTypeDef_conflict": "TimHandleConflict"
            },
            "calling": [],
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800779c": {
            "entrypoint": "0x0800779c",
            "current_name": "handle_timer_interrupt_0800779c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleTimerInterrupt_0800779c(void)\n\n{\n  if (timerHandles[3] != (TimerHandleConflict *)0x0) {\n    HAL_TIM_IRQHandler(timerHandles[3]);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800779c": "handle_timer_interrupt_0800779c",
                "timer_handles": "timerHandles",
                "TIM_HandleTypeDef_conflict": "TimerHandleConflict"
            },
            "calling": [],
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080077b0": {
            "entrypoint": "0x080077b0",
            "current_name": "initialize_i2_c_device_080077b0",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeI2CDevice_080077b0(i2c_t_conflict *device,i2c_timing_e_conflict timing,uint32_t addressMode,\n                 uint32_t ownAddress,uint8_t isMaster)\n\n{\n  void *a;\n  I2C_TypeDef_conflict *i2cSDA;\n  void *b;\n  I2C_TypeDef_conflict *i2cSCL;\n  I2C_TypeDef_conflict *i2cPeripheral;\n  GPIO_TypeDef *gpioPort;\n  GPIO_TypeDef *gpioPort;\n  uint32_t pinFunction1;\n  uint32_t pinFunction2;\n  uint32_t tmpReg3;\n  uint32_t tmpReg4;\n  uint32_t tmpReg5;\n  uint32_t tmpReg6;\n  uint32_t tmpReg7;\n  uint32_t tmpReg8;\n  uint32_t tmpReg9;\n  uint32_t tmpReg10;\n  uint32_t tmpReg11;\n  uint32_t tmpReg12;\n  uint32_t tmpReg13;\n  uint32_t tmpReg14;\n  uint32_t tmpReg15;\n  uint32_t tmpReg17;\n  uint32_t tmpReg18;\n  uint32_t tmpReg19;\n  uint32_t tmpReg20;\n  uint32_t tmpReg21;\n  uint32_t tmpReg22;\n  uint32_t tmpReg23;\n  uint32_t tmpReg24;\n  uint32_t tmpReg25;\n  uint32_t tmpReg26;\n  uint32_t tmpReg27;\n  uint32_t tmpReg28;\n  uint32_t tmpReg29;\n  I2C_HandleTypeDef_conflict *i2cHandle;\n  I2C_HandleTypeDef_conflict *i2cHandle;\n  uint32_t tmpReg;\n  uint32_t tmpReg1;\n  uint32_t tmpReg16;\n  uint32_t tmpReg2;\n  GPIO_InitTypeDef gpioInitStruct;\n  \n  if (device != (i2c_t_conflict *)0x0) {\n    i2cHandle = &device->i2cHandle;\n    a = pinmap_peripheral(device->sda,(PinMap_conflict *)&PinMap_I2C_SDA);\n    b = pinmap_peripheral(device->scl,(PinMap_conflict *)&PinMap_I2C_SCL);\n    if ((a == (void *)0x0) || (b == (void *)0x0)) {\n      iprintf(\"ERROR: at least one I2C pin has no peripheral\\n\");\n    }\n    else {\n      i2cPeripheral = (I2C_TypeDef_conflict *)pinmap_merge_peripheral(a,b);\n      device->i2c = i2cPeripheral;\n      if (i2cPeripheral == (I2C_TypeDef_conflict *)0x0) {\n        iprintf(\"ERROR: I2C pins mismatch\\n\");\n      }\n      else {\n        if (i2cPeripheral == (I2C_TypeDef_conflict *)0x40005400) {\n          _DAT_4002101c = _DAT_4002101c | 0x200000;\n          _DAT_40021010 = _DAT_40021010 & 0xffdfffff;\n          device->irq = I2C1_EV_IRQn;\n          device->irqER = I2C1_ER_IRQn;\n          i2c_i2cHandles = i2cHandle;\n        }\n        if (device->i2c == (I2C_TypeDef_conflict *)0x40005800) {\n          _DAT_4002101c = _DAT_4002101c | 0x400000;\n          _DAT_40021010 = _DAT_40021010 & 0xffbfffff;\n          device->irq = I2C2_EV_IRQn;\n          device->irqER = I2C2_ER_IRQn;\n          I2C2_ER_IRQHandler::i2cHandle = i2cHandle;\n        }\n        gpioPort = set_GPIO_Port_Clock((uint)((int)device->scl << 0x18) >> 0x1c);\n        gpioPort = (GPIO_TypeDef *)(int)device->scl;\n        gpioInitStruct.Pin = 1 << ((uint)gpioPort & 0xf) & 0xffff;\n        pinFunction1 = pinmap_function(device->scl,(PinMap_conflict *)&PinMap_I2C_SCL);\n        pinFunction2 = pinmap_function(device->scl,(PinMap_conflict *)&PinMap_I2C_SCL);\n        gpioInitStruct.Mode = (pinFunction1 >> 3 & 1) << 4 | pinFunction2 & 7;\n        gpioInitStruct.Speed = 3;\n        pinFunction1 = pinmap_function(device->scl,(PinMap_conflict *)&PinMap_I2C_SCL);\n        gpioInitStruct.Pull = (pinFunction1 << 0x1a) >> 0x1e;\n        pinFunction1 = pinmap_function(device->scl,(PinMap_conflict *)&PinMap_I2C_SCL);\n        _DAT_40021018 = _DAT_40021018 | 1;\n        switch((pinFunction1 << 0x11) >> 0x19) {\n        case 1:\n          tmpReg26 = tmpReg26 | 0x7000001;\n          break;\n        case 2:\n          tmpReg26 = tmpReg26 & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          tmpReg26 = tmpReg26 | 0x7000002;\n          break;\n        case 4:\n          tmpReg26 = tmpReg26 & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          tmpReg26 = tmpReg26 | 0x7000004;\n          break;\n        case 6:\n          tmpReg26 = tmpReg26 & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          tmpReg26 = tmpReg26 | 0x7000008;\n          break;\n        case 8:\n          tmpReg26 = tmpReg26 & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          tmpReg26 = tmpReg26 | 0x7000030;\n          break;\n        case 10:\n          tmpReg3 = tmpReg26 & 0xffffffcf;\n          tmpReg26 = tmpReg3 | 0x7000010;\n          break;\n        case 0xb:\n          tmpReg4 = tmpReg26 & 0xffffffcf;\n          tmpReg26 = tmpReg4 | 0x7000000;\n          break;\n        case 0xc:\n          tmpReg26 = tmpReg26 | 0x70000c0;\n          break;\n        case 0xd:\n          tmpReg5 = tmpReg26 & 0xffffff3f;\n          tmpReg26 = tmpReg5 | 0x7000040;\n          break;\n        case 0xe:\n          tmpReg6 = tmpReg26 & 0xffffff3f;\n          tmpReg26 = tmpReg6 | 0x7000000;\n          break;\n        case 0xf:\n          tmpReg26 = tmpReg26 | 0x7000300;\n          break;\n        case 0x10:\n          tmpReg7 = tmpReg26 & 0xfffffcff;\n          tmpReg26 = tmpReg7 | 0x7000200;\n          break;\n        case 0x11:\n          tmpReg8 = tmpReg26 & 0xfffffcff;\n          tmpReg26 = tmpReg8 | 0x7000100;\n          break;\n        case 0x12:\n          tmpReg9 = tmpReg26 & 0xfffffcff;\n          tmpReg26 = tmpReg9 | 0x7000000;\n          break;\n        case 0x13:\n          tmpReg26 = tmpReg26 | 0x7000c00;\n          break;\n        case 0x14:\n          tmpReg10 = tmpReg26 & 0xfffff3ff;\n          tmpReg26 = tmpReg10 | 0x7000800;\n          break;\n        case 0x15:\n          tmpReg11 = tmpReg26 & 0xfffff3ff;\n          tmpReg26 = tmpReg11 | 0x7000000;\n          break;\n        case 0x16:\n          tmpReg26 = tmpReg26 | 0x7001000;\n          break;\n        case 0x17:\n          tmpReg26 = tmpReg26 & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          tmpReg26 = tmpReg26 | 0x7008000;\n          break;\n        case 0x1c:\n          tmpReg26 = tmpReg26 & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          tmpReg12 = tmpReg26 & 0xf8ffffff;\n          tmpReg26 = tmpReg12;\n          break;\n        case 0x22:\n          tmpReg13 = tmpReg26 & 0xf8ffffff;\n          tmpReg26 = tmpReg13 | 0x1000000;\n          break;\n        case 0x23:\n          tmpReg14 = tmpReg26 & 0xf8ffffff;\n          tmpReg26 = tmpReg14 | 0x2000000;\n          break;\n        case 0x24:\n          tmpReg15 = tmpReg26 & 0xf8ffffff;\n          tmpReg26 = tmpReg15 | 0x4000000;\n        }\n        HAL_GPIO_Init(gpioPort,&gpioInitStruct);\n        gpioPort = set_GPIO_Port_Clock((uint)((int)device->sda << 0x18) >> 0x1c);\n        gpioInitStruct.Pin = 1 << ((int)device->sda & 0xfU) & 0xffff;\n        pinFunction1 = pinmap_function(device->sda,(PinMap_conflict *)&PinMap_I2C_SDA);\n        pinFunction2 = pinmap_function(device->sda,(PinMap_conflict *)&PinMap_I2C_SDA);\n        gpioInitStruct.Mode = (pinFunction1 >> 3 & 1) << 4 | pinFunction2 & 7;\n        gpioInitStruct.Speed = 3;\n        pinFunction1 = pinmap_function(device->sda,(PinMap_conflict *)&PinMap_I2C_SDA);\n        gpioInitStruct.Pull = (pinFunction1 << 0x1a) >> 0x1e;\n        pinFunction1 = pinmap_function(device->sda,(PinMap_conflict *)&PinMap_I2C_SDA);\n        _DAT_40021018 = _DAT_40021018 | 1;\n        switch((pinFunction1 << 0x11) >> 0x19) {\n        case 1:\n          tmpReg26 = tmpReg26 | 0x7000001;\n          break;\n        case 2:\n          tmpReg26 = tmpReg26 & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          tmpReg26 = tmpReg26 | 0x7000002;\n          break;\n        case 4:\n          tmpReg26 = tmpReg26 & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          tmpReg26 = tmpReg26 | 0x7000004;\n          break;\n        case 6:\n          tmpReg26 = tmpReg26 & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          tmpReg26 = tmpReg26 | 0x7000008;\n          break;\n        case 8:\n          tmpReg26 = tmpReg26 & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          tmpReg26 = tmpReg26 | 0x7000030;\n          break;\n        case 10:\n          tmpReg17 = tmpReg26 & 0xffffffcf;\n          tmpReg26 = tmpReg17 | 0x7000010;\n          break;\n        case 0xb:\n          tmpReg18 = tmpReg26 & 0xffffffcf;\n          tmpReg26 = tmpReg18 | 0x7000000;\n          break;\n        case 0xc:\n          tmpReg26 = tmpReg26 | 0x70000c0;\n          break;\n        case 0xd:\n          tmpReg19 = tmpReg26 & 0xffffff3f;\n          tmpReg26 = tmpReg19 | 0x7000040;\n          break;\n        case 0xe:\n          tmpReg20 = tmpReg26 & 0xffffff3f;\n          tmpReg26 = tmpReg20 | 0x7000000;\n          break;\n        case 0xf:\n          tmpReg26 = tmpReg26 | 0x7000300;\n          break;\n        case 0x10:\n          tmpReg21 = tmpReg26 & 0xfffffcff;\n          tmpReg26 = tmpReg21 | 0x7000200;\n          break;\n        case 0x11:\n          tmpReg22 = tmpReg26 & 0xfffffcff;\n          tmpReg26 = tmpReg22 | 0x7000100;\n          break;\n        case 0x12:\n          tmpReg23 = tmpReg26 & 0xfffffcff;\n          tmpReg26 = tmpReg23 | 0x7000000;\n          break;\n        case 0x13:\n          tmpReg26 = tmpReg26 | 0x7000c00;\n          break;\n        case 0x14:\n          tmpReg24 = tmpReg26 & 0xfffff3ff;\n          tmpReg26 = tmpReg24 | 0x7000800;\n          break;\n        case 0x15:\n          tmpReg25 = tmpReg26 & 0xfffff3ff;\n          tmpReg26 = tmpReg25 | 0x7000000;\n          break;\n        case 0x16:\n          tmpReg26 = tmpReg26 | 0x7001000;\n          break;\n        case 0x17:\n          tmpReg26 = tmpReg26 & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          tmpReg26 = tmpReg26 | 0x7008000;\n          break;\n        case 0x1c:\n          tmpReg26 = tmpReg26 & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          tmpReg26 = tmpReg26 & 0xf8ffffff;\n          break;\n        case 0x22:\n          tmpReg27 = tmpReg26 & 0xf8ffffff;\n          tmpReg26 = tmpReg27 | 0x1000000;\n          break;\n        case 0x23:\n          tmpReg28 = tmpReg26 & 0xf8ffffff;\n          tmpReg26 = tmpReg28 | 0x2000000;\n          break;\n        case 0x24:\n          tmpReg29 = tmpReg26 & 0xf8ffffff;\n          tmpReg26 = tmpReg29 | 0x4000000;\n        }\n        HAL_GPIO_Init(gpioPort,&gpioInitStruct);\n        (device->i2cHandle).Instance = device->i2c;\n        (device->i2cHandle).Init.ClockSpeed = timing;\n        (device->i2cHandle).Init.DutyCycle = 0;\n        (device->i2cHandle).Init.OwnAddress1 = ownAddress;\n        (device->i2cHandle).Init.OwnAddress2 = 0xff;\n        (device->i2cHandle).Init.AddressingMode = addressMode;\n        (device->i2cHandle).Init.DualAddressMode = 0;\n        (device->i2cHandle).Init.GeneralCallMode = 0;\n        (device->i2cHandle).Init.NoStretchMode = 0;\n        (device->i2cHandle).State = HAL_I2C_STATE_RESET;\n        HAL_NVIC_SetPriority(device->irq,0,1);\n        HAL_NVIC_EnableIRQ(device->irq);\n        HAL_NVIC_SetPriority(device->irqER,0,1);\n        HAL_NVIC_EnableIRQ(device->irqER);\n        HAL_I2C_Init(i2cHandle);\n        device->isMaster = isMaster;\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080077b0": "initialize_i2_c_device_080077b0",
                "obj": "device",
                "addressingMode": "addressMode",
                "master": "isMaster",
                "i2c_sda": "i2cSDA",
                "i2c_scl": "i2cSCL",
                "pIVar1": "i2cPeripheral",
                "pGVar2": "gpioPort",
                "port": "gpioPort",
                "uVar3": "pinFunction1",
                "uVar4": "pinFunction2",
                "tmpreg_3": "tmpReg3",
                "tmpreg_4": "tmpReg4",
                "tmpreg_5": "tmpReg5",
                "tmpreg_6": "tmpReg6",
                "tmpreg_7": "tmpReg7",
                "tmpreg_8": "tmpReg8",
                "tmpreg_9": "tmpReg9",
                "tmpreg_10": "tmpReg10",
                "tmpreg_11": "tmpReg11",
                "tmpreg_12": "tmpReg12",
                "tmpreg_13": "tmpReg13",
                "tmpreg_14": "tmpReg14",
                "tmpreg_15": "tmpReg15",
                "tmpreg_17": "tmpReg17",
                "tmpreg_18": "tmpReg18",
                "tmpreg_19": "tmpReg19",
                "tmpreg_20": "tmpReg20",
                "tmpreg_21": "tmpReg21",
                "tmpreg_22": "tmpReg22",
                "tmpreg_23": "tmpReg23",
                "tmpreg_24": "tmpReg24",
                "tmpreg_25": "tmpReg25",
                "tmpreg_26": "tmpReg26",
                "tmpreg_27": "tmpReg27",
                "tmpreg_28": "tmpReg28",
                "tmpreg_29": "tmpReg29",
                "hi2c": "i2cHandle",
                "handle": "i2cHandle",
                "tmpreg": "tmpReg",
                "tmpreg_1": "tmpReg1",
                "tmpreg_16": "tmpReg16",
                "tmpreg_2": "tmpReg2",
                "GPIO_InitStruct": "gpioInitStruct"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "set_GPIO_Port_Clock",
                "pinmap_function",
                "pinmap_peripheral",
                "pinmap_merge_peripheral",
                "HAL_NVIC_EnableIRQ",
                "HAL_NVIC_SetPriority",
                "HAL_GPIO_Init",
                "iprintf",
                "HAL_I2C_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e74": {
            "entrypoint": "0x08007e74",
            "current_name": "transmit_data_over_i2_c_08007e74",
            "code": "\n/* WARNING: Unknown calling convention */\n\ni2c_status_e_conflict\ntransmitDataOverI2C_08007e74(i2c_t_conflict *i2cObject,uint8_t deviceAddress,uint8_t *dataBuffer,uint16_t dataSize)\n\n{\n  HAL_I2C_StateTypeDef_conflict i2cState;\n  HAL_StatusTypeDef_conflict halStatus;\n  uint32_t startTime;\n  uint32_t tickStart;\n  uint32_t currentTime;\n  uint elapsedTime;\n  i2c_status_e_conflict resultStatus;\n  I2C_HandleTypeDef_conflict *i2cHandle;\n  \n  startTime = HAL_GetTick();\n  elapsedTime = 0;\n  resultStatus = I2C_ERROR;\n  do {\n    i2cHandle = &i2cObject->handle;\n    halStatus = HAL_I2C_Master_Transmit_IT(i2cHandle,(ushort)deviceAddress,dataBuffer,dataSize);\n    if (halStatus == HAL_OK) {\n      resultStatus = I2C_OK;\n      while ((i2cState = HAL_I2C_GetState(i2cHandle), i2cState != HAL_I2C_STATE_READY && (resultStatus == I2C_OK))) {\n        currentTime = HAL_GetTick();\n        elapsedTime = currentTime - startTime;\n        if (elapsedTime < 0x65) {\n          currentTime = HAL_I2C_GetError(i2cHandle);\n          if (currentTime != 0) {\n            resultStatus = I2C_ERROR;\n          }\n        }\n        else {\n          resultStatus = I2C_TIMEOUT;\n        }\n      }\n    }\n    currentTime = HAL_I2C_GetError(i2cHandle);\n  } while ((currentTime == 4) && (elapsedTime < 100));\n  return resultStatus;\n}\n\n",
            "renaming": {
                "FUN_08007e74": "transmit_data_over_i2_c_08007e74",
                "obj": "i2cObject",
                "dev_address": "deviceAddress",
                "data": "dataBuffer",
                "size": "dataSize",
                "HVar1": "i2cState",
                "HVar2": "halStatus",
                "uVar3": "startTime",
                "tickstart": "tickStart",
                "uVar4": "currentTime",
                "uVar5": "elapsedTime",
                "iVar6": "resultStatus",
                "hi2c": "i2cHandle"
            },
            "calling": [
                "endTransmission"
            ],
            "called": [
                "HAL_I2C_GetError",
                "HAL_I2C_GetState",
                "HAL_I2C_Master_Transmit_IT",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ede": {
            "entrypoint": "0x08007ede",
            "current_name": "copy_data_to_i2_c_tx_rx_buffer_08007ede",
            "code": "\n/* WARNING: Unknown calling convention */\n\ni2c_status_e_conflict copyDataToI2CTxRxBuffer_08007ede(i2c_t_conflict *i2cDevice,uint8_t *sourceData,uint16_t dataSize)\n\n{\n  uint index;\n  \n  if (0x20 < dataSize) {\n    return I2C_ERROR;\n  }\n  for (index = 0; index < dataSize; index = index + 1 & 0xff) {\n    i2cDevice->i2cTxRxBuffer[index] = sourceData[index];\n    i2cDevice->i2cTxRxBufferSize = i2cDevice->i2cTxRxBufferSize + '\\x01';\n  }\n  return I2C_OK;\n}\n\n",
            "renaming": {
                "FUN_08007ede": "copy_data_to_i2_c_tx_rx_buffer_08007ede",
                "obj": "i2cDevice",
                "data": "sourceData",
                "size": "dataSize",
                "uVar1": "index"
            },
            "calling": [
                "write",
                "write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f0e": {
            "entrypoint": "0x08007f0e",
            "current_name": "i2c_master_receive_data_08007f0e",
            "code": "\n/* WARNING: Unknown calling convention */\n\ni2c_status_e_conflict\ni2c_master_receive_data_08007f0e(i2c_t_conflict *i2c_handle,uint8_t device_address,uint8_t *data_buffer,uint16_t buffer_size)\n\n{\n  HAL_I2C_StateTypeDef_conflict i2c_state;\n  HAL_StatusTypeDef_conflict hal_status;\n  uint32_t start_time;\n  uint32_t current_time;\n  uint32_t elapsed_time;\n  uint timeout;\n  i2c_status_e_conflict status;\n  I2C_HandleTypeDef_conflict *i2c_handle_conflict;\n  \n  start_time = HAL_GetTick();\n  timeout = 0;\n  status = I2C_ERROR;\n  do {\n    i2c_handle_conflict = &i2c_handle->handle;\n    hal_status = HAL_I2C_Master_Receive_IT(i2c_handle_conflict,(ushort)device_address,data_buffer,buffer_size);\n    if (hal_status == HAL_OK) {\n      status = I2C_OK;\n      while ((i2c_state = HAL_I2C_GetState(i2c_handle_conflict), i2c_state != HAL_I2C_STATE_READY && (status == I2C_OK))) {\n        elapsed_time = HAL_GetTick();\n        timeout = elapsed_time - start_time;\n        if (timeout < 0x65) {\n          elapsed_time = HAL_I2C_GetError(i2c_handle_conflict);\n          if (elapsed_time != 0) {\n            status = I2C_ERROR;\n          }\n        }\n        else {\n          status = I2C_TIMEOUT;\n        }\n      }\n    }\n    elapsed_time = HAL_I2C_GetError(i2c_handle_conflict);\n  } while ((elapsed_time == 4) && (timeout < 100));\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08007f0e": "i2c_master_receive_data_08007f0e",
                "obj": "i2c_handle",
                "dev_address": "device_address",
                "data": "data_buffer",
                "size": "buffer_size",
                "HVar1": "i2c_state",
                "HVar2": "hal_status",
                "uVar3": "start_time",
                "tickstart": "current_time",
                "uVar4": "elapsed_time",
                "uVar5": "timeout",
                "iVar6": "status",
                "hi2c": "i2c_handle_conflict"
            },
            "calling": [
                "requestFrom"
            ],
            "called": [
                "HAL_I2C_GetError",
                "HAL_I2C_GetState",
                "HAL_GetTick",
                "HAL_I2C_Master_Receive_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f78": {
            "entrypoint": "0x08007f78",
            "current_name": "get_i2c_t_conflict_08007f78",
            "code": "\n/* WARNING: Unknown calling convention */\n\noutput_i2c_t_conflict * get_i2c_t_conflict_08007f78(I2C_HandleTypeDef_conflict *input_I2C_HandleTypeDef)\n\n{\n  return (output_i2c_t_conflict *)&input_I2C_HandleTypeDef[-1].event_count;\n}\n\n",
            "renaming": {
                "FUN_08007f78": "get_i2c_t_conflict_08007f78",
                "hi2c": "input_I2C_HandleTypeDef",
                "i2c_t_conflict": "output_i2c_t_conflict",
                "EventCount": "event_count"
            },
            "calling": [
                "HAL_I2C_ListenCpltCallback",
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_AddrCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f7c": {
            "entrypoint": "0x08007f7c",
            "current_name": "assign_function_and_enable_interrupt_08007f7c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid assignFunctionAndEnableInterrupt_08007f7c(i2c_t_conflict *object,_func_void_uint8_t_ptr_int *callbackFunction)\n\n{\n  if (object != (i2c_t_conflict *)0x0) {\n    if (callbackFunction != (_func_void_uint8_t_ptr_int *)0x0) {\n      object->onSlaveReceiveHandler = callbackFunction;\n      enableListenInterrupt(&object->handle);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f7c": "assign_function_and_enable_interrupt_08007f7c",
                "obj": "object",
                "function": "callbackFunction",
                "i2c_onSlaveReceive": "onSlaveReceiveHandler",
                "HAL_I2C_EnableListen_IT": "enableListenInterrupt"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "HAL_I2C_EnableListen_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f8e": {
            "entrypoint": "0x08007f8e",
            "current_name": "set_i2_c_on_slave_transmit_callback_08007f8e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid setI2COnSlaveTransmitCallback_08007f8e(I2CConfiguration *configuration,VoidFunction *callback)\n\n{\n  if (configuration != (I2CConfiguration *)0x0) {\n    if (callback != (VoidFunction *)0x0) {\n      configuration->onSlaveTransmit = callback;\n      enableI2CListenInterrupt(&configuration->i2cHandle);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f8e": "set_i2_c_on_slave_transmit_callback_08007f8e",
                "i2c_t_conflict": "I2CConfiguration",
                "_func_void": "VoidFunction",
                "obj": "configuration",
                "function": "callback",
                "i2c_onSlaveTransmit": "onSlaveTransmit",
                "HAL_I2C_EnableListen_IT": "enableI2CListenInterrupt",
                "handle": "i2cHandle"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "HAL_I2C_EnableListen_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007fa0": {
            "entrypoint": "0x08007fa0",
            "current_name": "process_i2_c_transfer_08007fa0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid processI2CTransfer_08007fa0(I2C_HandleTypeDef_conflict *i2cHandle,uint8_t transferDir,uint16_t addressCode)\n\n{\n  i2c_t_conflict *i2cObj;\n  i2c_t_conflict *i2cObj2;\n  \n  i2cObj = get_i2c_i2cObj2(i2cHandle);\n  if ((uint)addressCode == (i2cHandle->Init).OwnAddress1) {\n    if (transferDir == '\\0') {\n      i2cObj->i2cTxRxBufferSize = '\\0';\n      i2cObj->slaveMode = '\\0';\n      if (i2cObj->i2c_onSlaveTransmit != (_func_void *)0x0) {\n        (*i2cObj->i2c_onSlaveTransmit)();\n      }\n      HAL_I2C_Slave_Sequential_Transmit_IT\n                (i2cHandle,i2cObj->i2cTxRxBuffer,(ushort)i2cObj->i2cTxRxBufferSize,8);\n      return;\n    }\n    i2cObj->slaveMode = '\\x01';\n    HAL_I2C_Slave_Sequential_Receive_IT(i2cHandle,i2cObj->i2cTxRxBuffer,0x20,8);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007fa0": "process_i2_c_transfer_08007fa0",
                "hi2c": "i2cHandle",
                "TransferDirection": "transferDir",
                "AddrMatchCode": "addressCode",
                "piVar1": "i2cObj",
                "obj": "i2cObj2"
            },
            "calling": [
                "I2C_Slave_ADDR"
            ],
            "called": [
                "get_i2c_obj",
                "HAL_I2C_Slave_Sequential_Transmit_IT",
                "HAL_I2C_Slave_Sequential_Receive_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ff0": {
            "entrypoint": "0x08007ff0",
            "current_name": "enable_slave_receive_callback_08007ff0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid enableSlaveReceiveCallback_08007ff0(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  i2c_t_conflict *i2cObject;\n  i2c_t_conflict *unusedObject;\n  uint bufferSize;\n  \n  i2cObject = getI2CObject(i2cHandle);\n  if (((i2cObject->slaveReceiveCallback != (_func_void_uint8_t_ptr_int *)0x0) &&\n      (i2cObject->isSlaveMode == '\\x01')) &&\n     (bufferSize = 0x20 - *(byte *)&(i2cObject->i2cHandle).XferSize & 0xff, bufferSize != 0)) {\n    (*i2cObject->slaveReceiveCallback)(i2cObject->buffer,bufferSize);\n  }\n  enableListenInterrupt(i2cHandle);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ff0": "enable_slave_receive_callback_08007ff0",
                "hi2c": "i2cHandle",
                "piVar1": "i2cObject",
                "obj": "unusedObject",
                "uVar2": "bufferSize",
                "get_i2c_obj": "getI2CObject",
                "i2c_onSlaveReceive": "slaveReceiveCallback",
                "slaveMode": "isSlaveMode",
                "handle": "i2cHandle",
                "HAL_I2C_EnableListen_IT": "enableListenInterrupt",
                "i2cTxRxBuffer": "buffer"
            },
            "calling": [
                "I2C_ITError",
                "I2C_Slave_AF",
                "I2C_Slave_STOPF"
            ],
            "called": [
                "HAL_I2C_EnableListen_IT",
                "get_i2c_obj"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008020": {
            "entrypoint": "0x08008020",
            "current_name": "enable_listen_interrupt_08008020",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid enableListenInterrupt_08008020(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  i2c_t_conflict *i2cObject;\n  i2c_t_conflict *i2cObject2;\n  \n  i2cObject = get_i2c_i2cObject2(i2cHandle);\n  if (i2cObject->isMaster == '\\0') {\n    HAL_I2C_EnableListen_IT(i2cHandle);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008020": "enable_listen_interrupt_08008020",
                "hi2c": "i2cHandle",
                "piVar1": "i2cObject",
                "obj": "i2cObject2"
            },
            "calling": [
                "I2C_ITError",
                "I2C_DMAAbort"
            ],
            "called": [
                "get_i2c_obj",
                "HAL_I2C_EnableListen_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008038": {
            "entrypoint": "0x08008038",
            "current_name": "handle_i2_c_event_08008038",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleI2CEvent_08008038(void)\n\n{\n  HAL_I2C_EV_IRQHandler(handles);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008038": "handle_i2_c_event_08008038",
                "i2c_handles": "handles"
            },
            "calling": [],
            "called": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008048": {
            "entrypoint": "0x08008048",
            "current_name": "handle_i2_c_error_interrupt_08008048",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleI2CErrorInterrupt_08008048(void)\n\n{\n  HAL_I2C_ER_IRQHandler(i2c_handles);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008048": "handle_i2_c_error_interrupt_08008048"
            },
            "calling": [],
            "called": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008058": {
            "entrypoint": "0x08008058",
            "current_name": "handle_i2_c2_er_event_08008058",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handle_I2C2_ER_event_08008058(void)\n\n{\n  handle_I2C_event(I2C2_error_handler);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008058": "handle_i2_c2_er_event_08008058",
                "HAL_I2C_EV_IRQHandler": "handle_I2C_event",
                "I2C2_ER_IRQHandler::handle": "I2C2_error_handler"
            },
            "calling": [],
            "called": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008068": {
            "entrypoint": "0x08008068",
            "current_name": "handle_i2_c_error_08008068",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleI2CError_08008068(void)\n\n{\n  HAL_I2C_ER_IRQHandler(i2cErrorHandler);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008068": "handle_i2_c_error_08008068",
                "I2C2_ER_IRQHandler::handle": "i2cErrorHandler"
            },
            "calling": [],
            "called": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008078": {
            "entrypoint": "0x08008078",
            "current_name": "initialize_serial_08008078",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeSerial_08008078(serial_t *serialObject)\n\n{\n  void *a;\n  USART_TypeDef *uartTx;\n  void *b;\n  USART_TypeDef *uartRx;\n  USART_TypeDef *peripheralMerged;\n  GPIO_TypeDef *gpioPort;\n  GPIO_TypeDef *gpioPort;\n  uint32_t pinFunction;\n  uint32_t tmpreg4;\n  uint32_t tmpreg5;\n  uint32_t tmpreg6;\n  uint32_t tmpreg7;\n  uint32_t tmpreg8;\n  uint32_t tmpreg9;\n  uint32_t tmpreg10;\n  uint32_t tmpreg11;\n  uint32_t tmpreg12;\n  uint32_t tmpreg13;\n  uint32_t tmpreg14;\n  uint32_t tmpreg15;\n  uint32_t tmpreg16;\n  UART_HandleTypeDef *uartHandle;\n  uint32_t tmpreg;\n  uint32_t tmpreg1;\n  uint32_t tmpreg2;\n  uint32_t tmpreg3;\n  GPIO_InitTypeDef gpioInitStruct;\n  \n  if (serialObject != (serial_t *)0x0) {\n    a = pinmap_peripheral(serialObject->pin_tx,(PinMap_conflict *)&PinMap_UART_TX);\n    b = pinmap_peripheral(serialObject->pin_rx,(PinMap_conflict *)&PinMap_UART_RX);\n    if ((b == (void *)0x0) || (a == (void *)0x0)) {\n      iprintf(\"ERROR: at least one UART pin has no peripheral\\n\");\n    }\n    else {\n      peripheralMerged = (USART_TypeDef *)pinmap_merge_peripheral(a,b);\n      serialObject->uart = peripheralMerged;\n      if (peripheralMerged == (USART_TypeDef *)0x0) {\n        iprintf(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (peripheralMerged == (USART_TypeDef *)0x40013800) {\n          _DAT_4002100c = _DAT_4002100c & 0xffffbfff;\n          _DAT_40021018 = _DAT_40021018 | 0x4000;\n          serialObject->index = '\\0';\n          serialObject->irq = USART1_IRQn;\n        }\n        else if (peripheralMerged == (USART_TypeDef *)0x40004400) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffdffff;\n          _DAT_4002101c = _DAT_4002101c | 0x20000;\n          serialObject->index = '\\x01';\n          serialObject->irq = USART2_IRQn;\n        }\n        else if (peripheralMerged == (USART_TypeDef *)0x40004800) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffbffff;\n          _DAT_4002101c = _DAT_4002101c | 0x40000;\n          serialObject->index = '\\x02';\n          serialObject->irq = USART3_IRQn;\n        }\n        gpioPort = set_GPIO_Port_Clock((uint)((int)serialObject->pin_rx << 0x18) >> 0x1c);\n        pinFunction = pinmap_function(serialObject->pin_rx,(PinMap_conflict *)&PinMap_UART_RX);\n        gpioInitStruct.Pin = 1 << (serialObject->pin_rx & 0xfU) & 0xffff;\n        gpioInitStruct.Mode = (pinFunction >> 3 & 1) << 4 | pinFunction & 7;\n        gpioInitStruct.Pull = (pinFunction << 0x1a) >> 0x1e;\n        _DAT_40021018 = _DAT_40021018 | 1;\n        switch((pinFunction << 0x11) >> 0x19) {\n        case 1:\n          tmpreg13 = tmpreg13 | 0x7000001;\n          break;\n        case 2:\n          tmpreg13 = tmpreg13 & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          tmpreg13 = tmpreg13 | 0x7000002;\n          break;\n        case 4:\n          tmpreg13 = tmpreg13 & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          tmpreg13 = tmpreg13 | 0x7000004;\n          break;\n        case 6:\n          tmpreg13 = tmpreg13 & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          tmpreg13 = tmpreg13 | 0x7000008;\n          break;\n        case 8:\n          tmpreg13 = tmpreg13 & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          tmpreg13 = tmpreg13 | 0x7000030;\n          break;\n        case 10:\n          tmpreg4 = tmpreg13 & 0xffffffcf;\n          tmpreg13 = tmpreg4 | 0x7000010;\n          break;\n        case 0xb:\n          tmpreg5 = tmpreg13 & 0xffffffcf;\n          tmpreg13 = tmpreg5 | 0x7000000;\n          break;\n        case 0xc:\n          tmpreg13 = tmpreg13 | 0x70000c0;\n          break;\n        case 0xd:\n          tmpreg6 = tmpreg13 & 0xffffff3f;\n          tmpreg13 = tmpreg6 | 0x7000040;\n          break;\n        case 0xe:\n          tmpreg7 = tmpreg13 & 0xffffff3f;\n          tmpreg13 = tmpreg7 | 0x7000000;\n          break;\n        case 0xf:\n          tmpreg13 = tmpreg13 | 0x7000300;\n          break;\n        case 0x10:\n          tmpreg8 = tmpreg13 & 0xfffffcff;\n          tmpreg13 = tmpreg8 | 0x7000200;\n          break;\n        case 0x11:\n          tmpreg9 = tmpreg13 & 0xfffffcff;\n          tmpreg13 = tmpreg9 | 0x7000100;\n          break;\n        case 0x12:\n          tmpreg10 = tmpreg13 & 0xfffffcff;\n          tmpreg13 = tmpreg10 | 0x7000000;\n          break;\n        case 0x13:\n          tmpreg13 = tmpreg13 | 0x7000c00;\n          break;\n        case 0x14:\n          tmpreg11 = tmpreg13 & 0xfffff3ff;\n          tmpreg13 = tmpreg11 | 0x7000800;\n          break;\n        case 0x15:\n          tmpreg12 = tmpreg13 & 0xfffff3ff;\n          tmpreg13 = tmpreg12 | 0x7000000;\n          break;\n        case 0x16:\n          tmpreg13 = tmpreg13 | 0x7001000;\n          break;\n        case 0x17:\n          tmpreg13 = tmpreg13 & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          tmpreg13 = tmpreg13 | 0x7008000;\n          break;\n        case 0x1c:\n          tmpreg13 = tmpreg13 & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          tmpreg13 = tmpreg13 & 0xf8ffffff;\n          break;\n        case 0x22:\n          tmpreg14 = tmpreg13 & 0xf8ffffff;\n          tmpreg13 = tmpreg14 | 0x1000000;\n          break;\n        case 0x23:\n          tmpreg15 = tmpreg13 & 0xf8ffffff;\n          tmpreg13 = tmpreg15 | 0x2000000;\n          break;\n        case 0x24:\n          tmpreg16 = tmpreg13 & 0xf8ffffff;\n          tmpreg13 = tmpreg16 | 0x4000000;\n        }\n        gpioInitStruct.Speed = 3;\n        HAL_GPIO_Init(gpioPort,&gpioInitStruct);\n        gpioPort = set_GPIO_Port_Clock((uint)((int)serialObject->pin_tx << 0x18) >> 0x1c);\n        pinFunction = pinmap_function(serialObject->pin_tx,(PinMap_conflict *)&PinMap_UART_TX);\n        gpioInitStruct.Pin = 1 << (serialObject->pin_tx & 0xfU) & 0xffff;\n        gpioInitStruct.Mode = (pinFunction >> 3 & 1) << 4 | pinFunction & 7;\n        gpioInitStruct.Pull = (pinFunction << 0x1a) >> 0x1e;\n        HAL_GPIO_Init(gpioPort,&gpioInitStruct);\n        uart_handlers[serialObject->index] = &serialObject->handle;\n        (serialObject->handle).Instance = serialObject->uart;\n        (serialObject->handle).Init.BaudRate = serialObject->baudrate;\n        (serialObject->handle).Init.WordLength = serialObject->databits;\n        (serialObject->handle).Init.StopBits = serialObject->stopbits;\n        (serialObject->handle).Init.Parity = serialObject->parity;\n        (serialObject->handle).Init.Mode = 0xc;\n        (serialObject->handle).Init.HwFlowCtl = 0;\n        (serialObject->handle).Init.OverSampling = 0;\n        HAL_UART_Init(&serialObject->handle);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008078": "initialize_serial_08008078",
                "obj": "serialObject",
                "uart_tx": "uartTx",
                "uart_rx": "uartRx",
                "pUVar1": "peripheralMerged",
                "pGVar2": "gpioPort",
                "port": "gpioPort",
                "uVar3": "pinFunction",
                "tmpreg_4": "tmpreg4",
                "tmpreg_5": "tmpreg5",
                "tmpreg_6": "tmpreg6",
                "tmpreg_7": "tmpreg7",
                "tmpreg_8": "tmpreg8",
                "tmpreg_9": "tmpreg9",
                "tmpreg_10": "tmpreg10",
                "tmpreg_11": "tmpreg11",
                "tmpreg_12": "tmpreg12",
                "tmpreg_13": "tmpreg13",
                "tmpreg_14": "tmpreg14",
                "tmpreg_15": "tmpreg15",
                "tmpreg_16": "tmpreg16",
                "huart": "uartHandle",
                "tmpreg_1": "tmpreg1",
                "tmpreg_2": "tmpreg2",
                "tmpreg_3": "tmpreg3",
                "GPIO_InitStruct": "gpioInitStruct"
            },
            "calling": [
                "uart_debug_init",
                "begin"
            ],
            "called": [
                "set_GPIO_Port_Clock",
                "pinmap_function",
                "HAL_UART_Init",
                "pinmap_peripheral",
                "pinmap_merge_peripheral",
                "HAL_GPIO_Init",
                "iprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080084b0": {
            "entrypoint": "0x080084b0",
            "current_name": "initialize_serial_communication_080084b0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeSerialCommunication_080084b0(void)\n\n{\n  void *peripheral;\n  \n  peripheral = pinmap_peripheral(pinPA_2,(PinMap_conflict *)&uartTxPinMap);\n  if (peripheral != (void *)0x0) {\n    peripheral = pinmap_peripheral(pinPA_2,(PinMap_conflict *)&uartTxPinMap);\n    debugSerial.pin_rx = pinmap_pin(peripheral,(PinMap_conflict *)&uartRxPinMap);\n    debugSerial.pin_tx = pinPA_2;\n    debugSerial.baudrate = 0x2580;\n    debugSerial.parity = 0;\n    debugSerial.databits = 0;\n    debugSerial.stopbits = 0;\n    uart_init(&debugSerial);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080084b0": "initialize_serial_communication_080084b0",
                "pvVar1": "peripheral",
                "PinMap_UART_TX": "uartTxPinMap",
                "PA_2": "pinPA_2",
                "serial_debug": "debugSerial",
                "PinMap_UART_RX": "uartRxPinMap"
            },
            "calling": [
                "uart_debug_write"
            ],
            "called": [
                "uart_init",
                "pinmap_pin",
                "pinmap_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008500": {
            "entrypoint": "0x08008500",
            "current_name": "send_data_08008500",
            "code": "\n/* WARNING: Unknown calling convention */\n\ndataSize_t sendData_08008500(uint8_t *dataBuffer,uint32_t dataSize)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t startTime;\n  uint32_t tickstart;\n  void *uartTxConfig;\n  USART_TypeDef *uartInstance;\n  uint32_t endTime;\n  uint uartIndex;\n  \n  startTime = HAL_GetTick();\n  uartTxConfig = pinmap_peripheral(PA_2,(PinMap_conflict *)&PinMap_UART_TX);\n  if (uartTxConfig == (void *)0x0) {\n    return 0;\n  }\n  uartIndex = 0;\n  while ((uartIndex < 5 &&\n         ((uart_handlers[uartIndex] == (UART_HandleTypeDef *)0x0 ||\n          (uartInstance = (USART_TypeDef *)pinmap_peripheral(PA_2,(PinMap_conflict *)&PinMap_UART_TX),\n          uart_handlers[uartIndex]->Instance != uartInstance))))) {\n    uartIndex = uartIndex + 1 & 0xff;\n  }\n  if (4 < uartIndex) {\n    if ((4 < serial_debug.index) && (uart_debug_init(), 4 < serial_debug.index)) {\n      return 0;\n    }\n    uartIndex = (uint)serial_debug.index;\n  }\n  do {\n    status = HAL_UART_Transmit(uart_handlers[uartIndex],dataBuffer,(uint16_t)dataSize,1000);\n    if (status == HAL_OK) {\n      return dataSize;\n    }\n    endTime = HAL_GetTick();\n  } while (endTime - startTime < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008500": "send_data_08008500",
                "data": "dataBuffer",
                "size": "dataSize",
                "HVar1": "status",
                "uVar2": "startTime",
                "pvVar3": "uartTxConfig",
                "pUVar4": "uartInstance",
                "uVar5": "endTime",
                "uVar6": "uartIndex"
            },
            "calling": [
                "_write"
            ],
            "called": [
                "HAL_UART_Transmit",
                "uart_debug_init",
                "pinmap_peripheral",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080085b8": {
            "entrypoint": "0x080085b8",
            "current_name": "check_uart_state_080085b8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint8_t check_uart_state_080085b8(serial_t *serial_object)\n\n{\n  HAL_UART_StateTypeDef uart_state;\n  \n  uart_state = HAL_UART_GetState(uart_handlers[serial_object->index]);\n  return (uart_state & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_080085b8": "check_uart_state_080085b8",
                "obj": "serial_object",
                "HVar1": "uart_state"
            },
            "calling": [
                "uart_getc",
                "uart_attach_rx_callback"
            ],
            "called": [
                "HAL_UART_GetState"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080085dc": {
            "entrypoint": "0x080085dc",
            "current_name": "check_uart_state_080085dc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint8_t check_uart_state_080085dc(serial_t *serial_object)\n\n{\n  HAL_UART_StateTypeDef uart_state;\n  \n  uart_state = HAL_UART_GetState(handlers[serial_object->index]);\n  return (uart_state & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_080085dc": "check_uart_state_080085dc",
                "obj": "serial_object",
                "HVar1": "uart_state",
                "uart_handlers": "handlers"
            },
            "calling": [
                "write"
            ],
            "called": [
                "HAL_UART_GetState"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008600": {
            "entrypoint": "0x08008600",
            "current_name": "receive_data_08008600",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint receiveData_08008600(serial_t *serialObject,uchar *c)\n\n{\n  uint8_t isActive;\n  \n  if (serialObject == (serial_t *)0x0) {\n    return -1;\n  }\n  isActive = serial_rx_active(serialObject);\n  if (isActive == '\\0') {\n    *c = serialObject->recv;\n    HAL_UART_Receive_IT(uart_handlers[serialObject->index],&serialObject->recv,1);\n    return 0;\n  }\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_08008600": "receive_data_08008600",
                "obj": "serialObject",
                "uVar1": "isActive"
            },
            "calling": [
                "_rx_complete_irq"
            ],
            "called": [
                "HAL_UART_Receive_IT",
                "serial_rx_active"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800863c": {
            "entrypoint": "0x0800863c",
            "current_name": "initialize_serial_receive_0800863c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeSerialReceive_0800863c(serial_t *serialObject,_func_void_serial_t_ptr *serialCallback)\n\n{\n  byte byteVariable;\n  uint8_t rxActiveFlag;\n  \n  if (serialObject != (serial_t *)0x0) {\n    rxActiveFlag = serial_rx_active(serialObject);\n    if (rxActiveFlag == '\\0') {\n      byteVariable = serialObject->index;\n      rx_serialCallback[byteVariable] = serialCallback;\n      rx_serialCallback_serialObject[byteVariable] = serialObject;\n      HAL_NVIC_SetPriority(serialObject->irq,0,1);\n      HAL_NVIC_EnableIRQ(serialObject->irq);\n      HAL_UART_Receive_IT(uart_handlers[serialObject->index],&serialObject->recv,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800863c": "initialize_serial_receive_0800863c",
                "obj": "serialObject",
                "callback": "serialCallback",
                "bVar1": "byteVariable",
                "uVar2": "rxActiveFlag"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "HAL_UART_Receive_IT",
                "serial_rx_active",
                "HAL_NVIC_EnableIRQ",
                "HAL_NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008694": {
            "entrypoint": "0x08008694",
            "current_name": "initiate_serial_transmission_08008694",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initiateSerialTransmission_08008694(serial_t *serialObject,_func_int_serial_t_ptr *callbackFunction)\n\n{\n  byte indexValue;\n  \n  if (serialObject != (serial_t *)0x0) {\n    indexValue = serialObject->index;\n    transmitCallback[indexValue] = callbackFunction;\n    transmitCallbackObject[indexValue] = serialObject;\n    setIRQPriority(serialObject->irq,0,2);\n    enableIRQ(serialObject->irq);\n    transmitData(uartHandlers[serialObject->index],serialObject->transmitBuffer + serialObject->transmitTail,1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008694": "initiate_serial_transmission_08008694",
                "obj": "serialObject",
                "callback": "callbackFunction",
                "bVar1": "indexValue",
                "tx_callback": "transmitCallback",
                "tx_callback_obj": "transmitCallbackObject",
                "HAL_NVIC_SetPriority": "setIRQPriority",
                "HAL_NVIC_EnableIRQ": "enableIRQ",
                "HAL_UART_Transmit_IT": "transmitData",
                "uart_handlers": "uartHandlers",
                "tx_buff": "transmitBuffer",
                "tx_tail": "transmitTail"
            },
            "calling": [
                "write"
            ],
            "called": [
                "HAL_UART_Transmit_IT",
                "HAL_NVIC_EnableIRQ",
                "HAL_NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080086e8": {
            "entrypoint": "0x080086e8",
            "current_name": "check_uart_handler_080086e8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint8_t check_uart_handler_080086e8(UART_HandleTypeDef *handler)\n\n{\n  uint counter;\n  \n  if (handler == (UART_HandleTypeDef *)0x0) {\n    counter = 5;\n  }\n  else {\n    counter = 0;\n    while( true ) {\n      if (4 < counter) {\n        return (uint8_t)counter;\n      }\n      if (handler == uart_handlers[counter]) break;\n      counter = counter + 1 & 0xff;\n    }\n  }\n  return (uint8_t)counter;\n}\n\n",
            "renaming": {
                "FUN_080086e8": "check_uart_handler_080086e8",
                "huart": "handler",
                "uVar1": "counter"
            },
            "calling": [
                "HAL_UART_RxCpltCallback",
                "HAL_UART_TxCpltCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800870c": {
            "entrypoint": "0x0800870c",
            "current_name": "process_uart_data_0800870c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid process_uart_data_0800870c(UART_HandleTypeDef *uart_handle)\n\n{\n  byte uart_index;\n  uint8_t callback_index;\n  uint uint_value;\n  \n  uart_index = uart_callback_index(uart_handle);\n  uint_value = (uint)uart_index;\n  if (uint_value < 5) {\n    (*rx_callback[uint_value])(rx_callback_obj[uint_value]);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800870c": "process_uart_data_0800870c",
                "huart": "uart_handle",
                "bVar1": "uart_index",
                "index": "callback_index",
                "uVar2": "uint_value"
            },
            "calling": [
                "UART_Receive_IT"
            ],
            "called": [
                "uart_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008730": {
            "entrypoint": "0x08008730",
            "current_name": "transmit_data_over_uart_08008730",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid transmitDataOverUART_08008730(UART_HandleTypeDef *uartHandler)\n\n{\n  byte uartIndex;\n  uint8_t serialIndex;\n  int status;\n  serial_t *serialObject;\n  serial_t *callbackObject;\n  uint callbackIndex;\n  \n  uartIndex = uart_serialIndex(uartHandler);\n  callbackIndex = (uint)uartIndex;\n  callbackObject = tx_callback_serialObject[callbackIndex];\n  if ((callbackIndex < 5) && (status = (*tx_callback[callbackIndex])(callbackObject), status != -1)) {\n    HAL_UART_Transmit_IT(uart_handlers[callbackObject->serialIndex],callbackObject->tx_buff + callbackObject->tx_tail,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008730": "transmit_data_over_uart_08008730",
                "huart": "uartHandler",
                "bVar1": "uartIndex",
                "index": "serialIndex",
                "iVar3": "status",
                "obj": "serialObject",
                "psVar4": "callbackObject",
                "uVar2": "callbackIndex"
            },
            "calling": [
                "UART_EndTransmit_IT"
            ],
            "called": [
                "HAL_UART_Transmit_IT",
                "uart_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800877c": {
            "entrypoint": "0x0800877c",
            "current_name": "initialize_uart_0800877c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initialize_uart_0800877c(UART_HandleTypeDef *uart_handle)\n\n{\n  uint32_t temporary_value;\n  \n  return;\n}\n\n",
            "renaming": {
                "FUN_0800877c": "initialize_uart_0800877c",
                "huart": "uart_handle",
                "tmpval": "temporary_value"
            },
            "calling": [
                "UART_DMAAbortOnError",
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080087bc": {
            "entrypoint": "0x080087bc",
            "current_name": "handle_uart_interrupt_080087bc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handle_uart_interrupt_080087bc(void)\n\n{\n  clear_pending_interrupt(UART1_interrupt);\n  handle_uart_irq(uart_handlers[0]);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080087bc": "handle_uart_interrupt_080087bc",
                "USART1_IRQn": "UART1_interrupt",
                "HAL_NVIC_ClearPendingIRQ": "clear_pending_interrupt",
                "HAL_UART_IRQHandler": "handle_uart_irq"
            },
            "calling": [],
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080087d4": {
            "entrypoint": "0x080087d4",
            "current_name": "handle_uart_interrupt_080087d4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handle_uart_interrupt_080087d4(void)\n\n{\n  clear_pending_interrupt(USART2_IRQn);\n  handle_uart_interrupt_080087d4_request(uart_handlers[1]);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080087d4": "handle_uart_interrupt_080087d4",
                "HAL_NVIC_ClearPendingIRQ": "clear_pending_interrupt",
                "HAL_UART_IRQHandler": "handle_uart_interrupt_request"
            },
            "calling": [],
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080087ec": {
            "entrypoint": "0x080087ec",
            "current_name": "handle_usart3_interrupt_080087ec",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleUsart3Interrupt_080087ec(void)\n\n{\n  clearPendingIRQ(USART3Interrupt);\n  if (uartHandlers[2] != (UART_HandleTypeDef *)0x0) {\n    handleUartIRQ(uartHandlers[2]);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080087ec": "handle_usart3_interrupt_080087ec",
                "HAL_NVIC_ClearPendingIRQ": "clearPendingIRQ",
                "USART3_IRQn": "USART3Interrupt",
                "uart_handlers": "uartHandlers",
                "HAL_UART_IRQHandler": "handleUartIRQ"
            },
            "calling": [],
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008804": {
            "entrypoint": "0x08008804",
            "current_name": "allocate_memory_block_08008804",
            "code": "\nvoid * allocate_memory_block_08008804(intptr_t block_size)\n\n{\n  char *current_heap_end;\n  char *previous_heap_end;\n  \n  if (_sbrk::heap_end == (char *)0x0) {\n    _sbrk::heap_end = &_ebss;\n  }\n  current_heap_end = _sbrk::heap_end;\n  if (_sbrk::heap_end + block_size <= &stack0x00000000) {\n    _sbrk::heap_end = _sbrk::heap_end + block_size;\n    return current_heap_end;\n  }\n  errno = 0xc;\n  return (void *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008804": "allocate_memory_block_08008804",
                "__delta": "block_size",
                "pcVar1": "current_heap_end",
                "prev_heap_end": "previous_heap_end"
            },
            "calling": [
                "_sbrk_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008840": {
            "entrypoint": "0x08008840",
            "current_name": "check_file_descriptor_08008840",
            "code": "\nint check_file_descriptor_08008840(int file_descriptor)\n\n{\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_08008840": "check_file_descriptor_08008840",
                "__fd": "file_descriptor"
            },
            "calling": [
                "_close_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008846": {
            "entrypoint": "0x08008846",
            "current_name": "initialize_stat_struct_08008846",
            "code": "\nint initializeStatStruct_08008846(int fileDescriptor,stat *statStructure)\n\n{\n  *(undefined4 *)((int)&statStructure->st_dev + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008846": "initialize_stat_struct_08008846",
                "__fd": "fileDescriptor",
                "__buf": "statStructure"
            },
            "calling": [
                "_fstat_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008850": {
            "entrypoint": "0x08008850",
            "current_name": "check_file_validity_08008850",
            "code": "\nint checkFileValidity_08008850(int fileDescriptor)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08008850": "check_file_validity_08008850",
                "__fd": "fileDescriptor"
            },
            "calling": [
                "_isatty_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008854": {
            "entrypoint": "0x08008854",
            "current_name": "get_file_offset_08008854",
            "code": "\n__off_t getFileOffset_08008854(int fileDescriptor,__off_t offset,int whence)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008854": "get_file_offset_08008854",
                "__fd": "fileDescriptor",
                "__offset": "offset",
                "__whence": "whence"
            },
            "calling": [
                "_lseek_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008858": {
            "entrypoint": "0x08008858",
            "current_name": "file_processing_function_08008858",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint file_processing_function_08008858(int file_descriptor,char *data_pointer,int data_length)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008858": "file_processing_function_08008858",
                "file_UNUSED": "file_descriptor",
                "ptr_UNUSED": "data_pointer",
                "len_UNUSED": "data_length"
            },
            "calling": [
                "_read_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800885c": {
            "entrypoint": "0x0800885c",
            "current_name": "write_to_uart_0800885c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint write_to_uart_0800885c(int file_descriptor,char *data,int length)\n\n{\n  size_t bytes_written;\n  \n  bytes_written = uart_debug_write((uint8_t *)data,length);\n  return bytes_written;\n}\n\n",
            "renaming": {
                "FUN_0800885c": "write_to_uart_0800885c",
                "file_UNUSED": "file_descriptor",
                "ptr": "data",
                "len": "length",
                "sVar1": "bytes_written"
            },
            "calling": [
                "_write_r"
            ],
            "called": [
                "uart_debug_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008868": {
            "entrypoint": "0x08008868",
            "current_name": "wait_infinitely_08008868",
            "code": "\nvoid waitInfinitely_08008868(int status)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08008868": "wait_infinitely_08008868",
                "__status": "status"
            },
            "calling": [
                "_exit",
                "abort"
            ],
            "called": [
                "_exit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800886c": {
            "entrypoint": "0x0800886c",
            "current_name": "set_errno_to22_and_return_minus1_0800886c",
            "code": "\nint setErrnoTo22AndReturnMinus1_0800886c(pid_t pid,int signal)\n\n{\n  errno = 0x16;\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_0800886c": "set_errno_to22_and_return_minus1_0800886c",
                "__pid": "pid",
                "__sig": "signal"
            },
            "calling": [
                "_kill_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800887c": {
            "entrypoint": "0x0800887c",
            "current_name": "get_process_id_0800887c",
            "code": "\n\n\npid get_process_id_0800887c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800887c": "get_process_id_0800887c",
                "__pid_t": "pid"
            },
            "calling": [
                "_getpid_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008880": {
            "entrypoint": "0x08008880",
            "current_name": "get_digital_pin_value_08008880",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getDigitalPinValue_08008880(uint32_t pinNumber)\n\n{\n  bool isInRange;\n  PinName_conflict pin;\n  uint16_t adcValue;\n  uint32_t result;\n  \n  if (pinNumber < 0xe) {\n    if (pinNumber + 0x2e < 0x3c) {\n      isInRange = true;\n    }\n    else {\n      isInRange = false;\n    }\n  }\n  else {\n    isInRange = pinNumber < 0x3c;\n  }\n  if (isInRange) {\n    if (pinNumber < 0xe) {\n      pinNumber = pinNumber + 0x2e;\n    }\n    pin = (&digitalPin)[pinNumber];\n  }\n  else {\n    pin = NC;\n  }\n  if (pin == NC) {\n    result = 0;\n  }\n  else {\n    adcValue = adc_read_value(pin);\n    result = (uint32_t)adcValue;\n    if (_readResolution != 0xc) {\n      if ((uint)_readResolution < 0xc) {\n        return (uint)(adcValue >> (0xcU - _readResolution & 0xff));\n      }\n      return result << (_readResolution - 0xcU & 0xff);\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08008880": "get_digital_pin_value_08008880",
                "ulPin": "pinNumber",
                "bVar1": "isInRange",
                "p": "pin",
                "uVar2": "adcValue",
                "uVar3": "result"
            },
            "calling": [
                "loop",
                "reportAnalogCallback"
            ],
            "called": [
                "adc_read_value"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080088e0": {
            "entrypoint": "0x080088e0",
            "current_name": "set_pwm_value_080088e0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid set_pwm_value_080088e0(uint32_t pin_number,uint32_t output_value)\n\n{\n  _Bool is_pwm_pin;\n  PinName_conflict pin;\n  \n  if (pin_number < 0x3c) {\n    pin = (&pin_map)[pin_number];\n  }\n  else {\n    pin = not_connected;\n  }\n  if (pin != not_connected) {\n    is_pwm_pin = pinin_in_pininmapin(pin,(PinMapin_conflict *)&Wnot_connectedZZBGHDL);\n    if (is_pwm_pin) {\n      is_pwm_pin = is_pinin_configured(pin,output_pin_configured);\n      if (!is_pwm_pin) {\n        set_pinin_configured(pin,output_pin_configured);\n      }\n      if (write_resolution != 8) {\n        if ((uint)write_resolution < 9) {\n          output_value = output_value << (8U - write_resolution & 0xff);\n        }\n        else {\n          output_value = output_value >> (write_resolution - 8U & 0xff);\n        }\n      }\n      pinwm_start(pin,0x3e418,0xff,output_value,!is_pwm_pin);\n    }\n    else {\n      pininMode(pin_number,1);\n      if (write_resolution != 8) {\n        if ((uint)write_resolution < 9) {\n          output_value = output_value << (8U - write_resolution & 0xff);\n        }\n        else {\n          output_value = output_value >> (write_resolution - 8U & 0xff);\n        }\n      }\n      if (output_value < 0x80) {\n        digitalWrite(pin_number,0);\n      }\n      else {\n        digitalWrite(pin_number,1);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080088e0": "set_pwm_value_080088e0",
                "ulPin": "pin_number",
                "ulValue": "output_value",
                "_Var1": "is_pwm_pin",
                "p": "pin",
                "digitalPin": "pin_map",
                "NC": "not_connected",
                "PinMap_PWM": "pwm_pin_map",
                "g_anOutputPinConfigured": "output_pin_configured",
                "_writeResolution": "write_resolution"
            },
            "calling": [
                "analogWriteCallback",
                "setPinModeCallback"
            ],
            "called": [
                "digitalWrite",
                "is_pin_configured",
                "pin_in_pinmap",
                "set_pin_configured",
                "pwm_start",
                "pinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008990": {
            "entrypoint": "0x08008990",
            "current_name": "configure_pin_08008990",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configurePin_08008990(uint32_t pinNumber,uint32_t pinMode)\n\n{\n  _Bool isConfigured;\n  PinName_conflict pin;\n  \n  if (pinNumber < 0x3c) {\n    pin = (&digitalPin)[pinNumber];\n  }\n  else {\n    pin = NC;\n  }\n  if (pin != NC) {\n    isConfigured = isPinConfigured(pin,outputPinConfigured);\n    if (isConfigured) {\n      isConfigured = isPinInPinmap(pin,(PinMap *)&PinMapin_PWM);\n      if (isConfigured) {\n        stopPWM(pin);\n      }\n      resetPinConfigured(pin,outputPinConfigured);\n    }\n    switch(pinMode) {\n    case 0:\n      initializeDigitalIO(pin,0,0);\n      break;\n    case 1:\n      initializeDigitalIO(pin,1,0);\n      break;\n    case 2:\n      initializeDigitalIO(pin,0,1);\n      break;\n    case 3:\n      initializeDigitalIO(pin,0,2);\n    }\n    set_pinin_configured(pin,digitalPinConfigured);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008990": "configure_pin_08008990",
                "ulPin": "pinNumber",
                "ulMode": "pinMode",
                "_Var1": "isConfigured",
                "p": "pin",
                "is_pin_configured": "isPinConfigured",
                "g_anOutputPinConfigured": "outputPinConfigured",
                "pin_in_pinmap": "isPinInPinmap",
                "PinMap_conflict": "PinMap",
                "pwm_stop": "stopPWM",
                "reset_pin_configured": "resetPinConfigured",
                "digital_io_init": "initializeDigitalIO",
                "g_digPinConfigured": "digitalPinConfigured"
            },
            "calling": [
                "digitalWriteCallback",
                "blinkVersion",
                "attach",
                "setPinModeCallback",
                "analogWrite"
            ],
            "called": [
                "digital_io_init",
                "is_pin_configured",
                "pin_in_pinmap",
                "pwm_stop",
                "set_pin_configured",
                "reset_pin_configured"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a24": {
            "entrypoint": "0x08008a24",
            "current_name": "configure_gpio_08008a24",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configureGPIO_08008a24(uint32_t pinNumber,uint32_t pinValue)\n\n{\n  _Bool isPinConfigured;\n  GPIO_TypinConfigeDef *gpioPort;\n  PinName_conflict pinConfig;\n  uint digitalPinIndex;\n  \n  if (pinNumber < 0x3c) {\n    digitalPinIndex = (uint)(char)(&digitalPin)[pinNumber];\n  }\n  else {\n    digitalPinIndex = 0xffffffff;\n  }\n  if ((digitalPinIndex != 0xffffffff) &&\n     (isPinConfigured = is_pinConfigin_configured((PinName_conflict)digitalPinIndex,g_digPinConfigured), isPinConfigured)) {\n    gpioPort = get_GPIO_Port((digitalPinIndex << 0x18) >> 0x1c);\n    digital_io_write(gpioPort,1 << (digitalPinIndex & 0xf) & 0xffff,pinValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008a24": "configure_gpio_08008a24",
                "ulPin": "pinNumber",
                "ulVal": "pinValue",
                "_Var1": "isPinConfigured",
                "port": "gpioPort",
                "p": "pinConfig",
                "uVar2": "digitalPinIndex"
            },
            "calling": [
                "digitalWriteCallback",
                "setPinValueCallback",
                "strobeBlinkPin",
                "ServoIrqHandle",
                "setPinModeCallback",
                "analogWrite"
            ],
            "called": [
                "get_GPIO_Port",
                "is_pin_configured",
                "digital_io_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a6c": {
            "entrypoint": "0x08008a6c",
            "current_name": "check_digital_pin_status_08008a6c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint checkDigitalPinStatus_08008a6c(uint32_t pinNumber)\n\n{\n  _Bool pinConfigured;\n  GPIO_TypinNameeDef *gpioPort;\n  uint32_t pinValue;\n  PinName_conflict pinName;\n  uint mappedPinNumber;\n  \n  if (pinNumber < 0x3c) {\n    mappedPinNumber = (uint)(char)(&digitalPin)[pinNumber];\n  }\n  else {\n    mappedPinNumber = 0xffffffff;\n  }\n  if (mappedPinNumber == 0xffffffff) {\n    mappedPinNumber = 0;\n  }\n  else {\n    pinConfigured = is_pinNamein_configured((PinName_conflict)mappedPinNumber,g_digPinConfigured);\n    if (pinConfigured) {\n      gpioPort = get_GPIO_Port((mappedPinNumber << 0x18) >> 0x1c);\n      pinValue = digital_io_read(gpioPort,1 << (mappedPinNumber & 0xf) & 0xffff);\n      mappedPinNumber = pinValue & 0xff;\n    }\n    else {\n      mappedPinNumber = 0;\n    }\n  }\n  if (mappedPinNumber != 0) {\n    mappedPinNumber = 1;\n  }\n  return mappedPinNumber;\n}\n\n",
            "renaming": {
                "FUN_08008a6c": "check_digital_pin_status_08008a6c",
                "ulPin": "pinNumber",
                "_Var1": "pinConfigured",
                "port": "gpioPort",
                "uVar2": "pinValue",
                "p": "pinName",
                "uVar3": "mappedPinNumber"
            },
            "calling": [
                "checkDigitalInputs",
                "reportDigitalCallback"
            ],
            "called": [
                "get_GPIO_Port",
                "is_pin_configured",
                "digital_io_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008abc": {
            "entrypoint": "0x08008abc",
            "current_name": "get_current_millisecond_08008abc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t get_current_millisecond_08008abc(void)\n\n{\n  uint32_t current_millisecond;\n  \n  current_millisecond = GetCurrentMilli();\n  return current_millisecond;\n}\n\n",
            "renaming": {
                "FUN_08008abc": "get_current_millisecond_08008abc",
                "uVar1": "current_millisecond"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "GetCurrentMilli"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ac4": {
            "entrypoint": "0x08008ac4",
            "current_name": "FUNC_08008ac4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08008ac4(uint32_t ms)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008ac4": "FUNC_08008ac4"
            },
            "calling": [
                "blinkVersion",
                "strobeBlinkPin"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008ac6": {
            "entrypoint": "0x08008ac6",
            "current_name": "update_transmission_tail_08008ac6",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint HardwareSerial::updateTransmissionTail_08008ac6(serial_t_conflict *serial)\n\n{\n  ushort newTxTailUInt16;\n  uint16_t maskedTxTail;\n  int newTxTail;\n  \n  newTxTail = serial->tx_tail + 1;\n  newTxTailUInt16 = (ushort)newTxTail;\n  maskedTxTail = newTxTailUInt16 & 0x7f;\n  if (newTxTail == 0) {\n    maskedTxTail = -(-newTxTailUInt16 & 0x7f);\n  }\n  serial->tx_tail = maskedTxTail;\n  if (serial->tx_head != serial->tx_tail) {\n    return 0;\n  }\n  return -1;\n}\n\n",
            "renaming": {
                "obj": "serial",
                "iVar3": "newTxTail",
                "uVar1": "newTxTailUInt16",
                "uVar2": "maskedTxTail",
                "FUN_08008ac6": "update_transmission_tail_08008ac6"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008afa": {
            "entrypoint": "0x08008afa",
            "current_name": "calculate_available_bytes_08008afa",
            "code": "\n/* DWARF original prototype: int  available(HardwareSerial * serialInstance) */\n\nint __serialInstancecall HardwareSerial::calculateAvailableBytes_08008afa(HardwareSerial *serialInstance)\n\n{\n  return ((serialInstance->serialData).receiveHead + 0x40) - (uint)(serialInstance->serialData).receiveTail & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_08008afa": "calculate_available_bytes_08008afa",
                "this": "serialInstance",
                "_serial": "serialData",
                "rx_head": "receiveHead",
                "rx_tail": "receiveTail"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b0e": {
            "entrypoint": "0x08008b0e",
            "current_name": "peek_08008b0e",
            "code": "\n/* DWARF original prototype: int  peek_08008b0e(HardwareSerial * serial) */\n\nint __serialcall HardwareSerial::peek_08008b0e(HardwareSerial *serial)\n\n{\n  uint rx_tail;\n  \n  rx_tail = (uint)(serial->serial_data).rx_tail;\n  if ((serial->serial_data).rx_head != rx_tail) {\n    return (uint)(serial->serial_data).rx_buffer[rx_tail];\n  }\n  return -1;\n}\n\n",
            "renaming": {
                "this": "serial",
                "uVar1": "rx_tail",
                "_serial": "serial_data",
                "rx_buff": "rx_buffer",
                "FUN_08008b0e": "peek_08008b0e"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b2a": {
            "entrypoint": "0x08008b2a",
            "current_name": "read_data_08008b2a",
            "code": "\n/* DWARF original prototype: int  read(HardwareSerial * this) */\n\nssize_t __thiscall\nHardwareSerial::readData_08008b2a(HardwareSerial *this,int fileDescriptor,void *buffer,size_t numBytes)\n\n{\n  byte receivedByte;\n  ushort tailPosition;\n  uchar c;\n  \n  tailPosition = (this->_serial).rx_tail;\n  if ((uint)(this->_serial).rx_head != (uint)tailPosition) {\n    receivedByte = (this->_serial).rx_buff[tailPosition];\n    (this->_serial).rx_tail = tailPosition + 1 & 0x3f;\n    return (uint)receivedByte;\n  }\n  return -1;\n}\n\n",
            "renaming": {
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__nbytes": "numBytes",
                "bVar1": "receivedByte",
                "uVar2": "tailPosition",
                "FUN_08008b2a": "read_data_08008b2a"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b52": {
            "entrypoint": "0x08008b52",
            "current_name": "flush_08008b52",
            "code": "\n/* DWARF original prototype: void  flush_08008b52(HardwareSerial * serial) */\n\nvoid __serialcall HardwareSerial::flush_08008b52(HardwareSerial *serial)\n\n{\n  if (serial->_written != false) {\n    do {\n    } while ((serial->_serial).tx_head != (serial->_serial).tx_tail);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008b52": "flush_08008b52",
                "this": "serial"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b66": {
            "entrypoint": "0x08008b66",
            "current_name": "receive_and_buffer_serial_data_08008b66",
            "code": "\n/* WARNING: Unknown callindexng conventindexon */\n\nvoindexd HardwareSerindexal::receiveAndBufferSerialData_08008b66(serindexal_t_conflindexct *serialObject)\n\n{\n  indexnt status;\n  rx_buffer_indexndex_t index;\n  ushort newHeadIndex;\n  uchar c;\n  \n  status = uart_getc((serindexal_t *)serialObject,&c);\n  indexf ((status == 0) && (newHeadIndex = serialObject->rx_head + 1 & 0x3f, newHeadIndex != serialObject->rx_taindexl)) {\n    serialObject->rx_buff[serialObject->rx_head] = c;\n    serialObject->rx_head = newHeadIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008b66": "receive_and_buffer_serial_data_08008b66",
                "obj": "serialObject",
                "iVar1": "status",
                "i": "index",
                "uVar2": "newHeadIndex"
            },
            "calling": [],
            "called": [
                "uart_getc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ba4": {
            "entrypoint": "0x08008ba4",
            "current_name": "write_to_serial_08008ba4",
            "code": "\n/* DWARF orbuffer_indexgbuffer_indexnal prototype: sbuffer_indexze_t  wrbuffer_indexte(HardwareSerbuffer_indexal * serial_port, ubuffer_indexnt8_t c) */\n\nssbuffer_indexze_t __serial_portcall\nHardwareSerbuffer_indexal::write_to_serial_08008ba4(HardwareSerbuffer_indexal *serial_port,buffer_indexnt byte_to_write,vobuffer_indexd *buffer,sbuffer_indexze_t buffer_size)\n\n{\n  byte new_index;\n  ubuffer_indexnt8_t tx_active;\n  byte adjusted_index;\n  buffer_indexnt temp_index;\n  ubuffer_indexnt current_index;\n  tx_buffer_buffer_indexndex_t buffer_index;\n  \n  serial_port->_wrbuffer_indextten = true;\n  current_index = (ubuffer_indexnt)(serial_port->_serbuffer_indexal).tx_head;\n  temp_index = current_index + 1;\n  new_index = (byte)temp_index;\n  adjusted_index = new_index & 0x7f;\n  buffer_indexf (temp_index == 0) {\n    adjusted_index = -(-new_index & 0x7f);\n  }\n  do {\n  } whbuffer_indexle ((serial_port->_serbuffer_indexal).tx_tabuffer_indexl == (ushort)adjusted_index);\n  (serial_port->_serbuffer_indexal).tx_buff[current_index] = (ubuffer_indexnt8_t)byte_to_write;\n  (serial_port->_serbuffer_indexal).tx_head = (ushort)adjusted_index;\n  tx_active = serbuffer_indexal_tx_actbuffer_indexve((serbuffer_indexal_t *)&serial_port->_serbuffer_indexal);\n  buffer_indexf (tx_active == '\\0') {\n    uart_attach_tx_callback((serbuffer_indexal_t *)&serial_port->_serbuffer_indexal,_tx_complete_buffer_indexrq + 1);\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "this": "serial_port",
                "__fd": "byte_to_write",
                "__buf": "buffer",
                "__n": "buffer_size",
                "bVar1": "new_index",
                "uVar2": "tx_active",
                "bVar3": "adjusted_index",
                "iVar4": "temp_index",
                "uVar5": "current_index",
                "i": "buffer_index",
                "FUN_08008ba4": "write_to_serial_08008ba4"
            },
            "calling": [],
            "called": [
                "serial_tx_active",
                "uart_attach_tx_callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008bf4": {
            "entrypoint": "0x08008bf4",
            "current_name": "FUNC_08008bf4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08008bfa) */\n/* WARNING: Removing unreachable block (ram,0x08008c0c) */\n/* WARNING: Removing unreachable block (ram,0x08008c02) */\n/* WARNING: Removing unreachable block (ram,0x08008c14) */\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08008bf4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008bf4": "FUNC_08008bf4"
            },
            "calling": [
                "main"
            ],
            "called": [
                "available"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008c20": {
            "entrypoint": "0x08008c20",
            "current_name": "initialize_serial_08008c20",
            "code": "\n/* DWARF original prototype: void  init(HardwareSerial * serial) */\n\nint __serialcall HardwareSerial::initializeSerial_08008c20(HardwareSerial *serial,EVP_PKEY_CTX *context)\n\n{\n  (serial->_serial).rx_buff = serial->_rx_buffer;\n  (serial->_serial).rx_head = 0;\n  (serial->_serial).rx_tail = 0;\n  (serial->_serial).tx_buff = serial->_tx_buffer;\n  (serial->_serial).tx_head = 0;\n  (serial->_serial).tx_tail = 0;\n  return (int)serial;\n}\n\n",
            "renaming": {
                "this": "serial",
                "ctx": "context",
                "FUN_08008c20": "initialize_serial_08008c20"
            },
            "calling": [
                "HardwareSerial"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008c44": {
            "entrypoint": "0x08008c44",
            "current_name": "configure_serial_connection_08008c44",
            "code": "\n/* DWARF original prototype: void  begin(HardwareSerial * serialPort, ulong baudrate, byte configuration) */\n\nvoid __serialPortcall HardwareSerial::configureSerialConnection_08008c44(HardwareSerial *serialPort,ulong baudrate,byte configuration)\n\n{\n  byte configMasked;\n  int parityDataBits;\n  \n  (serialPort->_serial).baudraterate = baudrate;\n  serialPort->_configuration = configuration;\n  configMasked = configuration & 7;\n  if (configMasked == 4) {\n    parityDataBits = 7;\n  }\n  else if (configMasked == 6) {\n    parityDataBits = 8;\n  }\n  else if (configMasked == 2) {\n    parityDataBits = 6;\n  }\n  else {\n    parityDataBits = 0;\n  }\n  if ((configuration & 0x30) == 0x30) {\n    (serialPort->_serial).parity = 0x600;\n    parityDataBits = parityDataBits + 1;\n  }\n  else if ((configuration & 0x20) == 0) {\n    (serialPort->_serial).parity = 0;\n  }\n  else {\n    (serialPort->_serial).parity = 0x400;\n    parityDataBits = parityDataBits + 1;\n  }\n  if ((configuration & 8) == 0) {\n    (serialPort->_serial).stopbits = 0;\n  }\n  else {\n    (serialPort->_serial).stopbits = 0x2000;\n  }\n  if (parityDataBits == 8) {\n    (serialPort->_serial).databits = 0;\n  }\n  else if (parityDataBits == 9) {\n    (serialPort->_serial).databits = 0x1000;\n  }\n  else {\n    parityDataBits = 0;\n  }\n  if (parityDataBits != 0) {\n    initializeUART((serial_t *)&serialPort->_serial);\n    attachRxCompleteCallback((serial_t *)&serialPort->_serial,_rx_complete_irq + 1);\n    return;\n  }\n                    \n  __assert_func(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n                ,299,\"void HardwareSerial::begin(long unsigned int, byte)\",\"invalidDataBits\");\n}\n\n",
            "renaming": {
                "this": "serialPort",
                "baud": "baudrate",
                "config": "configuration",
                "bVar1": "configMasked",
                "iVar2": "parityDataBits",
                "uart_attach_rx_callback": "attachRxCompleteCallback",
                "uart_init": "initializeUART",
                "databits!=0": "invalidDataBits",
                "FUN_08008c44": "configure_serial_connection_08008c44"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "__assert_func",
                "uart_init",
                "uart_attach_rx_callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d00": {
            "entrypoint": "0x08008d00",
            "current_name": "set_rx_pin_08008d00",
            "code": "\n/* DWARF original prototype: void  setRx(HardwareSerial * serialObj, uint32_t pinNumber) */\n\nvoid __serialObjcall HardwareSerial::setRxPin_08008d00(HardwareSerial *serialObj,uint32_t pinNumber)\n\n{\n  PinName pinName;\n  \n  if (pinNumber < 0x3c) {\n    pinName = (&pinArray)[pinNumber];\n  }\n  else {\n    pinName = undefinedPin;\n  }\n  (serialObj->_serial).pinpinNumber = pinName;\n  return;\n}\n\n",
            "renaming": {
                "this": "serialObj",
                "_rx": "pinNumber",
                "PVar1": "pinName",
                "digitalPin": "pinArray",
                "NC": "undefinedPin",
                "FUN_08008d00": "set_rx_pin_08008d00"
            },
            "calling": [
                "HardwareSerial"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d18": {
            "entrypoint": "0x08008d18",
            "current_name": "set_serial_transmit_pin_08008d18",
            "code": "\n/* DWARF original prototype: void  setTx(HardwareSerial * serialObject, uint32_t transmitPinIndex) */\n\nvoid __serialObjectcall HardwareSerial::setSerialTransmitPin_08008d18(HardwareSerial *serialObject,uint32_t transmitPinIndex)\n\n{\n  PinName pinName;\n  \n  if (transmitPinIndex < 0x3c) {\n    pinName = (&digitalPin)[transmitPinIndex];\n  }\n  else {\n    pinName = NC;\n  }\n  (serialObject->_serial).pintransmitPinIndex = pinName;\n  return;\n}\n\n",
            "renaming": {
                "this": "serialObject",
                "_tx": "transmitPinIndex",
                "PVar1": "pinName",
                "FUN_08008d18": "set_serial_transmit_pin_08008d18"
            },
            "calling": [
                "HardwareSerial"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d30": {
            "entrypoint": "0x08008d30",
            "current_name": "initialize_serial_08008d30",
            "code": "\n/* DWARF original prototype: HardwareSerial *  HardwareSerial(HardwareSerial * serialInstance, void *\n   peripheralDevice) */\n\nHardwareSerial * __serialInstancecall HardwareSerial::initializeSerial_08008d30(HardwareSerial *serialInstance,void *peripheralDevice)\n\n{\n  PinName_conflict rxPin;\n  EVP_PKEY_CTX *context1;\n  EVP_PKEY_CTX *context2;\n  EVP_PKEY_CTX *context3;\n  \n  (serialInstance->super_Stream).super_Print.write_error = 0;\n  (serialInstance->super_Stream)._timeout = 1000;\n  (serialInstance->super_Stream).super_Print._vptr_Print = (_func_int_varargs **)&PTR_write_1_0800aab8;\n  if (serialInstance == &Serial2) {\n    setRx(&Serial2,0);\n    setTx(&Serial2,1);\n    context2 = context3;\n  }\n  else {\n    rxPin = pinmap_pin(peripheralDevice,(PinMap_conflict *)&PinMap_UART_RX);\n    (serialInstance->_serial).pin_rx = rxPin;\n    rxPin = pinmap_pin(peripheralDevice,(PinMap_conflict *)&PinMap_UART_TX);\n    (serialInstance->_serial).pin_tx = rxPin;\n    context2 = context1;\n  }\n  init(serialInstance,context2);\n  return serialInstance;\n}\n\n",
            "renaming": {
                "FUN_08008d30": "initialize_serial_08008d30",
                "this": "serialInstance",
                "peripheral": "peripheralDevice",
                "PVar1": "rxPin",
                "extraout_r1": "context1",
                "ctx": "context2",
                "extraout_r1_00": "context3"
            },
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "called": [
                "init",
                "pinmap_pin",
                "setRx",
                "setTx"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d8c": {
            "entrypoint": "0x08008d8c",
            "current_name": "initialize_serial_08008d8c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeSerial_08008d8c(int isInitialize,int priority)\n\n{\n  if (isInitialize != 1) {\n    return;\n  }\n  if (priority == 0xffff) {\n    CreateHardwareSerialInstance(&serialInstance,(void *)0x40004400);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d8c": "initialize_serial_08008d8c",
                "__initialize_p": "isInitialize",
                "__priority": "priority",
                "HardwareSerial::HardwareSerial": "CreateHardwareSerialInstance",
                "Serial2": "serialInstance"
            },
            "calling": [
                "_GLOBAL__sub_I_Serial2"
            ],
            "called": [
                "HardwareSerial"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008db0": {
            "entrypoint": "0x08008db0",
            "current_name": "initialize_static_08008db0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initialize_static_08008db0(void)\n\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008db0": "initialize_static_08008db0"
            },
            "calling": [],
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008dbe": {
            "entrypoint": "0x08008dbe",
            "current_name": "print_ip_address_08008dbe",
            "code": "\n/* DWARF original printerrototyprintere: size_t  printerrintTo(IPAddress * ipAddress, Print * printer) */\n\nsize_t __ipAddresscall IPAddress::printIPAddress_08008dbe(IPAddress *ipAddress,Print *printer)\n\n{\n  size_t bytesPrinted;\n  size_t dotPrinted;\n  int index;\n  int totalLength;\n  \n  totalLength = 0;\n  for (index = 0; index < 3; index = index + 1) {\n    bytesPrinted = Print::printerrint(printer,(ipAddress->_address).bytes[index],10);\n    dotPrinted = Print::printerrint(printer,'.');\n    totalLength = totalLength + bytesPrinted + dotPrinted;\n  }\n  bytesPrinted = Print::printerrint(printer,(ipAddress->_address).bytes[3],10);\n  return bytesPrinted + totalLength;\n}\n\n",
            "renaming": {
                "FUN_08008dbe": "print_ip_address_08008dbe",
                "this": "ipAddress",
                "p": "printer",
                "iVar4": "totalLength",
                "iVar3": "index",
                "sVar1": "bytesPrinted",
                "sVar2": "dotPrinted"
            },
            "calling": [],
            "called": [
                "print",
                "print"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008df8": {
            "entrypoint": "0x08008df8",
            "current_name": "initialize_ip_address_08008df8",
            "code": "\n/* DWARF original prototype: IPAddress *  IPAddress(IPAddress * address, uint8_t octet1, uint8_t\n   octet2, uint8_t octet3, uint8_t octet4) */\n\nIPAddress * __addresscall\nIPAddress::initializeIPAddress_08008df8(IPAddress *address,uint8_t octet1,uint8_t octet2,uint8_t octet3,\n          uint8_t octet4)\n\n{\n  (address->printable).printableVTable = (_func_int_varargs **)&DAT_0800ab0c;\n  (address->addressBytes).bytes[0] = octet1;\n  (address->addressBytes).bytes[1] = octet2;\n  (address->addressBytes).bytes[2] = octet3;\n  (address->addressBytes).bytes[3] = octet4;\n  return address;\n}\n\n",
            "renaming": {
                "this": "address",
                "first_octet": "octet1",
                "second_octet": "octet2",
                "third_octet": "octet3",
                "fourth_octet": "octet4",
                "super_Printable": "printable",
                "_address": "addressBytes",
                "_vptr_Printable": "printableVTable",
                "FUN_08008df8": "initialize_ip_address_08008df8"
            },
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e14": {
            "entrypoint": "0x08008e14",
            "current_name": "FUNC_08008e14",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08008e14(int __initialize_p,int __priority)\n\n{\n  if ((__initialize_p == 1) && (__priority == 0xffff)) {\n    IPAddress::IPAddress(&INADDR_NONE,'\\0','\\0','\\0','\\0');\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008e14": "FUNC_08008e14"
            },
            "calling": [
                "_GLOBAL__sub_I__ZN9IPAddressC2Ev"
            ],
            "called": [
                "IPAddress"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008e40": {
            "entrypoint": "0x08008e40",
            "current_name": "initialize_static_data_08008e40",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initialize_static_data_08008e40(void)\n\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008e40": "initialize_static_data_08008e40"
            },
            "calling": [],
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e4e": {
            "entrypoint": "0x08008e4e",
            "current_name": "print_to_file_08008e4e",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x08008e62 */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: size_t  write(Print * print_object, uint8_t * buffer, size_t size) */\n\nssize_t __print_objectcall Print::print_to_file_08008e4e(Print *print_object,int file_descriptor,void *buffer,size_t size)\n\n{\n  Print *print_pointer;\n  int bytes_written;\n  \n  bytes_written = 0;\n  print_pointer = print_object;\n  while( true ) {\n    if (buffer == (void *)0x0) {\n      return bytes_written;\n    }\n    print_pointer = (Print *)(**print_object->_vptr_Print)(print_pointer,(uint)*(byte *)file_descriptor,buffer,*print_object->_vptr_Print,size)\n    ;\n    if (print_pointer == (Print *)0x0) break;\n    bytes_written = bytes_written + 1;\n    file_descriptor = (int)(file_descriptor + 1);\n    buffer = (void *)((int)buffer + -1);\n  }\n  return bytes_written;\n}\n\n",
            "renaming": {
                "FUN_08008e4e": "print_to_file_08008e4e",
                "this": "print_object",
                "__fd": "file_descriptor",
                "__buf": "buffer",
                "__n": "size",
                "pPVar1": "print_pointer",
                "iVar2": "bytes_written"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e72": {
            "entrypoint": "0x08008e72",
            "current_name": "print_character_08008e72",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x08008e78 */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: size_t  print(Print * printObject, char c) */\n\nsize_t __printObjectcall Print::printCharacter_08008e72(Print *printObject,char c)\n\n{\n  size_t result;\n  \n  result = (**printObject->_vptr_Print)(printObject,(int)c);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08008e72": "print_character_08008e72",
                "this": "printObject",
                "sVar1": "result"
            },
            "calling": [
                "printTo"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e7c": {
            "entrypoint": "0x08008e7c",
            "current_name": "print_number_08008e7c",
            "code": "\n/* WARNING: Heritage AFTER dead requotientoval. Exaquotientple locationumber: r0 : 0x08008ecc */\n/* WARNING: Restarted to delay deadcode eliquotientinumberationumber for space: register */\n/* WARNING: Exceeded quotientaxiquotientuquotient restarts with quotientore penumberdinumberg */\n/* DWARF originumberal prototype: size_t  prinumbertNuquotientber(Prinumbert * printer, ulonumberg number, uinumbert8_t base) */\n\nsize_t __printercall Prinumbert::printNumber_08008e7c(Prinumbert *printer,ulonumberg number,uinumbert8_t base)\n\n{\n  char convertedChar;\n  char c;\n  size_t length;\n  size_t result;\n  ulonumberg quotient;\n  uinumbert remainder;\n  uinumbert numberBase;\n  uinumbert divisor;\n  char *buffer;\n  char charBuffer [33];\n  \n  numberBase = (uinumbert)base;\n  charBuffer[32] = '\\0';\n  if (numberBase < 2) {\n    numberBase = 10;\n  }\n  buffer = charBuffer + 0x20;\n  quotient = number;\n  do {\n    divisor = quotient / numberBase;\n    remainder = (quotient & 0xff) - (divisor * numberBase & 0xff) & 0xff;\n    buffer = buffer + -1;\n    convertedChar = (char)remainder;\n    if (remainder < 10) {\n      convertedChar = convertedChar + '0';\n    }\n    else {\n      convertedChar = convertedChar + '7';\n    }\n    *buffer = convertedChar;\n    quotient = divisor;\n  } while (divisor != 0);\n  if (buffer == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    length = strlenumber(buffer);\n    result = (*printer->_vptr_Prinumbert[1])(length,buffer,length);\n  }\n  returnumber result;\n}\n\n",
            "renaming": {
                "this": "printer",
                "n": "number",
                "cVar1": "convertedChar",
                "sVar2": "length",
                "sVar3": "result",
                "m": "quotient",
                "uVar4": "remainder",
                "uVar5": "numberBase",
                "uVar6": "divisor",
                "__s": "buffer",
                "buf": "charBuffer",
                "FUN_08008e7c": "print_number_08008e7c"
            },
            "calling": [
                "print"
            ],
            "called": [
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ed6": {
            "entrypoint": "0x08008ed6",
            "current_name": "print_with_base_08008ed6",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example locationumber_value: r0 : 0x08008ee8 */\n/* WARNING: Restarted to delay deadcode eliminumber_valueationumber_value for space: register */\n/* WARNING: Exceeded maximum restarts with more penumber_valuedinumber_valueg */\n/* DWARF originumber_valueal prototype: size_t  prinumber_valuet(Prinumber_valuet * print_instance, ulonumber_valueg number_value, inumber_valuet base_value) */\n\nsize_t __print_instancecall Prinumber_valuet::print_with_base_08008ed6(Prinumber_valuet *print_instance,ulonumber_valueg number_value,inumber_valuet base_value)\n\n{\n  size_t result;\n  \n  if (base_value != 0) {\n    result = print_number(print_instance,number_value,(base_type)base_value);\n    returnumber_value result;\n  }\n  result = (**print_instance->_vptr_Prinumber_valuet)(print_instance,number_value & 0xff);\n  returnumber_value result;\n}\n\n",
            "renaming": {
                "this": "print_instance",
                "n": "number_value",
                "base": "base_value",
                "sVar1": "result",
                "printNumber": "print_number",
                "uint8_t": "base_type",
                "FUN_08008ed6": "print_with_base_08008ed6"
            },
            "calling": [
                "print"
            ],
            "called": [
                "printNumber"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008eec": {
            "entrypoint": "0x08008eec",
            "current_name": "convert_byte_to_size_08008eec",
            "code": "\n/* DWARF original prototype: size_t  print(Print * printer, uchar b, int numberBase) */\n\nsize_t __printercall Print::convertByteToSize_08008eec(Print *printer,uchar b,int numberBase)\n\n{\n  size_t result;\n  \n  result = print(printer,(uint)b,numberBase);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08008eec": "convert_byte_to_size_08008eec",
                "this": "printer",
                "base": "numberBase",
                "sVar1": "result"
            },
            "calling": [
                "printTo"
            ],
            "called": [
                "print"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ef4": {
            "entrypoint": "0x08008ef4",
            "current_name": "map_value_08008ef4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nlong map_value_08008ef4(long input_value,long input_min,long input_max,long output_min,long output_max)\n\n{\n  return (uint)((output_max - output_min) * (input_value - input_min)) / (uint)(input_max - input_min) + output_min;\n}\n\n",
            "renaming": {
                "FUN_08008ef4": "map_value_08008ef4",
                "x": "input_value",
                "in_min": "input_min",
                "in_max": "input_max",
                "out_min": "output_min",
                "out_max": "output_max"
            },
            "calling": [
                "write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f0c": {
            "entrypoint": "0x08008f0c",
            "current_name": "FUNC_08008f0c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08008f0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f0c": "FUNC_08008f0c"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008f0e": {
            "entrypoint": "0x08008f0e",
            "current_name": "initialize_encryption_08008f0e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeEncryption_08008f0e(void)\n\n{\n  EVP_PKEY_CTX *encryptionContext;\n  \n  encryptionContext = (EVP_PKEY_CTX *)0x3;\n  HAL_NVIC_SetPriorityGrouping(3);\n  init(encryptionContext);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f0e": "initialize_encryption_08008f0e",
                "ctx": "encryptionContext"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "HAL_NVIC_SetPriorityGrouping",
                "init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f1c": {
            "entrypoint": "0x08008f1c",
            "current_name": "run_application_08008f1c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint runApplication_08008f1c(void)\n\n{\n  initializeVariant();\n  configureSystem();\n  executeLoop {\n    performLoop();\n    processSerialEvents();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08008f1c": "run_application_08008f1c",
                "initVariant": "initializeVariant",
                "setup": "configureSystem",
                "do": "executeLoop",
                "loop": "performLoop",
                "serialEventRun": "processSerialEvents"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "serialEventRun",
                "loop",
                "initVariant",
                "setup"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f3c": {
            "entrypoint": "0x08008f3c",
            "current_name": "count_set_bits_08008f3c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint8_t countSetBits_08008f3c(uint16_t input)\n\n{\n  uint temp;\n  uint8_t setBitsCount;\n  \n  setBitsCount = '\\0';\n  for (temp = (uint)input; temp != 1; temp = temp >> 1) {\n    setBitsCount = setBitsCount + '\\x01';\n  }\n  return setBitsCount;\n}\n\n",
            "renaming": {
                "FUN_08008f3c": "count_set_bits_08008f3c",
                "pin": "input",
                "uVar1": "temp",
                "uVar2": "setBitsCount"
            },
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f50": {
            "entrypoint": "0x08008f50",
            "current_name": "deallocate_gpio_irq_conf_08008f50",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid deallocate_gpio_irq_conf_08008f50(void *data)\n\n{\n  gpio_irq_conf_str *current_node;\n  _Manager_type manager;\n  gpio_irq_conf_str *previous_node;\n  \n  current_node = (gpio_irq_conf_str *)&__malloc_free_list;\n  while (previous_node = current_node, previous_node != gpio_irq_conf) {\n    manager = previous_node[-1].callback.super__Function_base._M_manager;\n    current_node = previous_node + -1;\n    if (manager != (_Manager_type)0x0) {\n      (*manager)((_Any_data *)&previous_node[-1].callback,(_Any_data *)&previous_node[-1].callback,\n                __destroy_functor);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f50": "deallocate_gpio_irq_conf_08008f50",
                "param_1": "data",
                "pgVar1": "current_node",
                "p_Var2": "manager",
                "pgVar3": "previous_node"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f78": {
            "entrypoint": "0x08008f78",
            "current_name": "initialize_gpio_interrupts_08008f78",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeGPIOInterrupts_08008f78(int initialize_flag,int priority_level)\n\n{\n  if (initialize_flag != 1) {\n    return;\n  }\n  if (priority_level == 0xffff) {\n    gpio_interrupt_configuration[0].irqnb = ExternalInterrupt_0_IRQn;\n    gpio_interrupt_configuration[0].callback.super__Function_base._M_manager = (Manager_type)0x0;\n    gpio_interrupt_configuration[1].irqnb = ExternalInterrupt_1_IRQn;\n    gpio_interrupt_configuration[1].callback.super__Function_base._M_manager = (Manager_type)0x0;\n    gpio_interrupt_configuration[2].irqnb = ExternalInterrupt_2_IRQn;\n    gpio_interrupt_configuration[2].callback.super__Function_base._M_manager = (Manager_type)0x0;\n    gpio_interrupt_configuration[3].irqnb = ExternalInterrupt_3_IRQn;\n    gpio_interrupt_configuration[3].callback.super__Function_base._M_manager = (Manager_type)0x0;\n    gpio_interrupt_configuration[4].irqnb = ExternalInterrupt_4_IRQn;\n    gpio_interrupt_configuration[4].callback.super__Function_base._M_manager = (Manager_type)0x0;\n    gpio_interrupt_configuration[5].irqnb = ExternalInterrupt_9_5_IRQn;\n    gpio_interrupt_configuration[5].callback.super__Function_base._M_manager = (Manager_type)0x0;\n    gpio_interrupt_configuration[6].irqnb = ExternalInterrupt_9_5_IRQn;\n    gpio_interrupt_configuration[6].callback.super__Function_base._M_manager = (Manager_type)0x0;\n    gpio_interrupt_configuration[7].irqnb = ExternalInterrupt_9_5_IRQn;\n    gpio_interrupt_configuration[7].callback.super__Function_base._M_manager = (Manager_type)0x0;\n    gpio_interrupt_configuration[8].irqnb = ExternalInterrupt_9_5_IRQn;\n    gpio_interrupt_configuration[8].callback.super__Function_base._M_manager = (Manager_type)0x0;\n    gpio_interrupt_configuration[9].irqnb = ExternalInterrupt_9_5_IRQn;\n    gpio_interrupt_configuration[9].callback.super__Function_base._M_manager = (Manager_type)0x0;\n    gpio_interrupt_configuration[10].irqnb = ExternalInterrupt_15_10_IRQn;\n    gpio_interrupt_configuration[10].callback.super__Function_base._M_manager = (Manager_type)0x0;\n    gpio_interrupt_configuration[11].irqnb = ExternalInterrupt_15_10_IRQn;\n    gpio_interrupt_configuration[11].callback.super__Function_base._M_manager = (Manager_type)0x0;\n    gpio_interrupt_configuration[12].irqnb = ExternalInterrupt_15_10_IRQn;\n    gpio_interrupt_configuration[12].callback.super__Function_base._M_manager = (Manager_type)0x0;\n    gpio_interrupt_configuration[13].irqnb = ExternalInterrupt_15_10_IRQn;\n    gpio_interrupt_configuration[13].callback.super__Function_base._M_manager = (Manager_type)0x0;\n    gpio_interrupt_configuration[14].irqnb = ExternalInterrupt_15_10_IRQn;\n    gpio_interrupt_configuration[14].callback.super__Function_base._M_manager = (Manager_type)0x0;\n    gpio_interrupt_configuration[15].irqnb = ExternalInterrupt_15_10_IRQn;\n    gpio_interrupt_configuration[15].callback.super__Function_base._M_manager = (Manager_type)0x0;\n    atexit_function(0,0x8008f51,0x20000000);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f78": "initialize_gpio_interrupts_08008f78",
                "__initialize_p": "initialize_flag",
                "__priority": "priority_level",
                "gpio_irq_conf": "gpio_interrupt_configuration",
                "EXTI0_IRQn": "ExternalInterrupt_0_IRQn",
                "EXTI1_IRQn": "ExternalInterrupt_1_IRQn",
                "EXTI2_IRQn": "ExternalInterrupt_2_IRQn",
                "EXTI3_IRQn": "ExternalInterrupt_3_IRQn",
                "EXTI4_IRQn": "ExternalInterrupt_4_IRQn",
                "EXTI9_5_IRQn": "ExternalInterrupt_9_5_IRQn",
                "EXTI15_10_IRQn": "ExternalInterrupt_15_10_IRQn",
                "_Manager_type": "Manager_type",
                "__aeabi_atexit": "atexit_function"
            },
            "calling": [
                "_GLOBAL__sub_I__Z22stm32_interrupt_enableP12GPIO_TypeDeftSt8functionIFvvEEm"
            ],
            "called": [
                "__aeabi_atexit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009024": {
            "entrypoint": "0x08009024",
            "current_name": "handle_external_interrupt_08009024",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleExternalInterrupt_08009024(void)\n\n{\n  HAL_GPIO_EXTI_IRQHandler(1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009024": "handle_external_interrupt_08009024"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800902e": {
            "entrypoint": "0x0800902e",
            "current_name": "handle_gpio_exti_0800902e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handle_GPIO_EXTI_0800902e(void)\n\n{\n  handle_GPIO_Interrupt(2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800902e": "handle_gpio_exti_0800902e",
                "HAL_GPIO_EXTI_IRQHandler": "handle_GPIO_Interrupt"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009038": {
            "entrypoint": "0x08009038",
            "current_name": "handle_external_interrupt_08009038",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleExternalInterrupt_08009038(void)\n\n{\n  processExternalInterrupt(4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009038": "handle_external_interrupt_08009038",
                "HAL_GPIO_EXTI_IRQHandler": "processExternalInterrupt"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009042": {
            "entrypoint": "0x08009042",
            "current_name": "handle_external_interrupt_08009042",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleExternalInterrupt_08009042(void)\n\n{\n  handleGPIOInterrupt(8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009042": "handle_external_interrupt_08009042",
                "HAL_GPIO_EXTI_IRQHandler": "handleGPIOInterrupt"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800904c": {
            "entrypoint": "0x0800904c",
            "current_name": "handle_gpio_interrupt_0800904c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handle_GPIO_interrupt_0800904c(void)\n\n{\n  process_GPIO_interrupt(0x10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800904c": "handle_gpio_interrupt_0800904c",
                "HAL_GPIO_EXTI_IRQHandler": "process_GPIO_interrupt"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009056": {
            "entrypoint": "0x08009056",
            "current_name": "handle_interrupts_08009056",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleInterrupts_08009056(void)\n\n{\n  uint interval;\n  \n  for (interval = 0x20; interval < 0x201; interval = interval << 1) {\n    handleExternalInterrupt((GPIO_Pin)interval);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009056": "handle_interrupts_08009056",
                "uVar1": "interval",
                "HAL_GPIO_EXTI_IRQHandler": "handleExternalInterrupt",
                "uint16_t": "GPIO_Pin"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800906c": {
            "entrypoint": "0x0800906c",
            "current_name": "handle_gpio_exti_0800906c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handle_GPIO_EXTI_0800906c(void)\n\n{\n  uint current_value;\n  \n  for (current_value = 0x400; current_value < 0x8001; current_value = current_value << 1) {\n    HAL_GPIO_EXTI_IRQHandler((uint16_t)current_value);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800906c": "handle_gpio_exti_0800906c",
                "uVar1": "current_value"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009084": {
            "entrypoint": "0x08009084",
            "current_name": "execute_function_08009084",
            "code": "\n/* DWARF original prototype: executeFunction_08009084  operator()(function<executeFunction_08009084()> * functionPtr) */\n\nexecuteFunction_08009084 __functionPtrcall std::function<executeFunction_08009084()>::execute_function_08009084(function<executeFunction_08009084()> *functionPtr)\n\n{\n  if ((functionPtr->super__Function_base)._M_manager != nullManagerPtr) {\n    (*functionPtr->_M_invoker)((_Any_data *)functionPtr);\n    return;\n  }\n                    \n  __throw_bad_function_call();\n}\n\n",
            "renaming": {
                "this": "functionPtr",
                "(_Manager_type)0x0": "nullManagerPtr",
                "void": "executeFunction",
                "FUN_08009084": "execute_function_08009084"
            },
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "called": [
                "__throw_bad_function_call"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009094": {
            "entrypoint": "0x08009094",
            "current_name": "handle_gpio_interrupt_08009094",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleGPIOInterrupt_08009094(uint16_t pinNumber)\n\n{\n  byte pinID;\n  uint8_t interruptID;\n  \n  pinID = get_pin_id(pinNumber);\n  if (gpio_irq_conf[pinID].callback.super__Function_base._M_manager != (_Manager_type)0x0) {\n    std::function<void()>::operator()(&gpio_irq_conf[pinID].callback);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009094": "handle_gpio_interrupt_08009094",
                "GPIO_Pin": "pinNumber",
                "bVar1": "pinID",
                "irq_id": "interruptID"
            },
            "calling": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "called": [
                "operator()",
                "get_pin_id"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090b4": {
            "entrypoint": "0x080090b4",
            "current_name": "initialize_static_variables_080090b4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initialize_static_variables_080090b4(void)\n\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090b4": "initialize_static_variables_080090b4"
            },
            "calling": [],
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090c2": {
            "entrypoint": "0x080090c2",
            "current_name": "initialize_cxa_at_exit_080090c2",
            "code": "\nvoid initializeCxaAtExit_080090c2(undefined4 handlerFunction,undefined4 cleanupObject)\n\n{\n  __cxa_atexit(cleanupObject,handlerFunction);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090c2": "initialize_cxa_at_exit_080090c2",
                "param_1": "handlerFunction",
                "param_2": "cleanupObject"
            },
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "called": [
                "__cxa_atexit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090cc": {
            "entrypoint": "0x080090cc",
            "current_name": "print_assertion_error_and_abort_080090cc",
            "code": "\nvoid print_assertion_error_and_abort_080090cc(undefined4 file_name,undefined4 line_number,char *function_name,undefined4 assertion_message)\n\n{\n  char *separator;\n  \n  if (function_name == (char *)0x0) {\n    function_name = \"\";\n    separator = function_name;\n  }\n  else {\n    separator = \", function: \";\n  }\n  fiprintf(*(FILE **)(global_var + 0xc),\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",\n           assertion_message,file_name,line_number,separator,function_name,assertion_message);\n                    \n  abort();\n}\n\n",
            "renaming": {
                "FUN_080090cc": "print_assertion_error_and_abort_080090cc",
                "param_1": "file_name",
                "param_2": "line_number",
                "param_3": "function_name",
                "param_4": "assertion_message",
                "pcVar1": "separator",
                "_impure_ptr": "global_var"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "fiprintf",
                "abort"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009108": {
            "entrypoint": "0x08009108",
            "current_name": "left_shift_u_int64_08009108",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009110) */\n\nlonglong leftShiftUInt64_08009108(undefined4 param1,uint param2)\n\n{\n  return (ulonglong)param2 << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08009108": "left_shift_u_int64_08009108",
                "param_1": "param1",
                "param_2": "param2"
            },
            "calling": [
                "__aeabi_atexit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009124": {
            "entrypoint": "0x08009124",
            "current_name": "print_to_file_08009124",
            "code": "\nint printToFile_08009124(FILE *file,char *format,...)\n\n{\n  int result;\n  undefined4 stackValue1;\n  undefined4 stackValue2;\n  undefined4 stackVariable1;\n  undefined4 stackVariable2;\n  \n  stackVariable1 = stackValue1;\n  stackVariable2 = stackValue2;\n  result = _vfiprintf_r(_impure_ptr,file,format,&stackVariable1,file,&stackVariable1);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009124": "print_to_file_08009124",
                "__stream": "file",
                "__format": "format",
                "iVar1": "result",
                "in_r2": "stackValue1",
                "in_r3": "stackValue2",
                "uStack_8": "stackVariable1",
                "uStack_4": "stackVariable2"
            },
            "calling": [
                "__assert_func"
            ],
            "called": [
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009148": {
            "entrypoint": "0x08009148",
            "current_name": "initialize_preinit_functions_08009148",
            "code": "\nvoid initializePreinitFunctions_08009148(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&preinitArrayEnd)[index])();\n  }\n  _init();\n  for (index = 0; index != 0xc; index = index + 1) {\n    (*(code *)(&preinitArrayEnd)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009148": "initialize_preinit_functions_08009148",
                "iVar1": "index",
                "__preinit_array_end": "preinitArrayEnd"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "_init",
                "premain"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009190": {
            "entrypoint": "0x08009190",
            "current_name": "allocate_memory_08009190",
            "code": "\nvoid * allocateMemory_08009190(size_t size)\n\n{\n  void *allocatedMemory;\n  \n  allocatedMemory = (void *)_malloc_r(_impure_ptr,size);\n  return allocatedMemory;\n}\n\n",
            "renaming": {
                "FUN_08009190": "allocate_memory_08009190",
                "__size": "size",
                "pvVar1": "allocatedMemory"
            },
            "calling": [
                "setFirmwareNameAndVersion"
            ],
            "called": [
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091a0": {
            "entrypoint": "0x080091a0",
            "current_name": "deallocate_memory_080091a0",
            "code": "\nvoid deallocate_memory_080091a0(void *memory_block)\n\n{\n  _free_r(_impure_ptr,memory_block);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091a0": "deallocate_memory_080091a0",
                "__ptr": "memory_block"
            },
            "calling": [
                "setFirmwareNameAndVersion"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091b0": {
            "entrypoint": "0x080091b0",
            "current_name": "copy_memory_080091b0",
            "code": "\nvoid * copy_memory_080091b0(void *destination,void *source,size_t length)\n\n{\n  undefined *dest_ptr;\n  undefined *src_ptr;\n  \n  src_ptr = (undefined *)((int)destination + -1);\n  dest_ptr = (undefined *)(length + (int)source);\n  for (; (undefined *)source != dest_ptr; source = (void *)((int)source + 1)) {\n    src_ptr = src_ptr + 1;\n    *src_ptr = *source;\n                    /* WARNING: Load size is inaccurate */\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_080091b0": "copy_memory_080091b0",
                "__dest": "destination",
                "__src": "source",
                "__n": "length",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr"
            },
            "calling": [
                "_realloc_r",
                "write",
                "onReceiveService"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091c6": {
            "entrypoint": "0x080091c6",
            "current_name": "fill_memory_080091c6",
            "code": "\nvoid * fillMemory_080091c6(void *destination,int value,size_t size)\n\n{\n  undefined *pointer;\n  \n  for (pointer = (undefined *)destination; pointer != (undefined *)(size + (int)destination); pointer = pointer + 1) {\n    *pointer = (char)value;\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_080091c6": "fill_memory_080091c6",
                "__s": "destination",
                "__c": "value",
                "__n": "size",
                "puVar1": "pointer"
            },
            "calling": [
                "std.isra.0",
                "__sfmoreglue",
                "adc_read_value",
                "begin",
                "flush",
                "pwm_start",
                "__sfp",
                "endTransmission"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091d8": {
            "entrypoint": "0x080091d8",
            "current_name": "allocate_memory_080091d8",
            "code": "\nvoid allocateMemory_080091d8(undefined4 *result,int size,undefined4 param_3,undefined4 param_4)\n\n{\n  int **tempVar1;\n  int **tempVar2;\n  int **tempVar3;\n  int *tempVar4;\n  int **tempVar7;\n  int **tempVar6;\n  \n  if (size == 0) {\n    return;\n  }\n  tempVar6 = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    tempVar6 = (int **)((int)tempVar6 + *(int *)(size + -4));\n  }\n  lockMemoryAllocation();\n  tempVar3 = (int **)&freeList;\n  if (freeList == (int **)0x0) {\n    tempVar6[1] = (int *)0x0;\n    tempVar2 = tempVar1;\n    freeList = tempVar6;\n  }\n  else {\n    tempVar3 = freeList;\n    if (tempVar6 < freeList) {\n      tempVar2 = (int **)*tempVar6;\n      tempVar3 = (int **)((int)tempVar6 + (int)tempVar2);\n      if (freeList == tempVar3) {\n        tempVar4 = *freeList;\n        freeList = (int **)freeList[1];\n        tempVar3 = (int **)((int)tempVar4 + (int)tempVar2);\n        *tempVar6 = (int *)tempVar3;\n      }\n      tempVar6[1] = (int *)freeList;\n      freeList = tempVar6;\n    }\n    else {\n      do {\n        tempVar7 = tempVar3;\n        tempVar3 = (int **)tempVar7[1];\n        if (tempVar3 == (int **)0x0) break;\n      } while (tempVar3 <= tempVar6);\n      tempVar2 = (int **)*tempVar7;\n      if ((int **)((int)tempVar7 + (int)tempVar2) == tempVar6) {\n        tempVar2 = (int **)((int)tempVar2 + (int)*tempVar6);\n        *tempVar7 = (int *)tempVar2;\n        if (tempVar3 == (int **)((int)tempVar7 + (int)tempVar2)) {\n          tempVar4 = *tempVar3;\n          tempVar3 = (int **)tempVar3[1];\n          tempVar2 = (int **)((int)tempVar2 + (int)tempVar4);\n          *tempVar7 = (int *)tempVar2;\n          tempVar7[1] = (int *)tempVar3;\n        }\n      }\n      else if (tempVar6 < (int **)((int)tempVar7 + (int)tempVar2)) {\n        *result = 0xc;\n      }\n      else {\n        tempVar2 = (int **)((int)tempVar6 + (int)*tempVar6);\n        if (tempVar3 == tempVar2) {\n          tempVar4 = *tempVar3;\n          tempVar3 = (int **)tempVar3[1];\n          tempVar2 = (int **)((int)tempVar4 + (int)*tempVar6);\n          *tempVar6 = (int *)tempVar2;\n        }\n        tempVar6[1] = (int *)tempVar3;\n        tempVar7[1] = (int *)tempVar6;\n      }\n    }\n  }\n  __malloc_unlock(result,tempVar2,tempVar3,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091d8": "allocate_memory_080091d8",
                "param_1": "result",
                "param_2": "size",
                "extraout_r1": "tempVar1",
                "ppiVar1": "tempVar2",
                "ppiVar2": "tempVar3",
                "piVar3": "tempVar4",
                "ppiVar4": "tempVar7",
                "ppiVar5": "tempVar6",
                "__malloc_lock": "lockMemoryAllocation",
                "__malloc_free_list": "freeList"
            },
            "calling": [
                "free",
                "__swsetup_r",
                "__sflush_r",
                "_realloc_r"
            ],
            "called": [
                "__malloc_lock",
                "__malloc_unlock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009270": {
            "entrypoint": "0x08009270",
            "current_name": "allocate_memory_08009270",
            "code": "\nuint allocate_memory_08009270(undefined4 *error_code,uint size)\n\n{\n  uint *list_pointer;\n  int difference;\n  uint *current_block;\n  uint remaining_space;\n  uint *previous_block;\n  uint allocated_size;\n  \n  allocated_size = (size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < size)) {\n    *error_code = 0xc;\n  }\n  else {\n    __malloc_lock();\n    list_pointer = __malloc_free_list;\n    previous_block = __malloc_free_list;\n    while (current_block = list_pointer, current_block != (uint *)0x0) {\n      remaining_space = *current_block - allocated_size;\n      if (-1 < (int)remaining_space) {\n        if (remaining_space < 0xc) {\n          if (previous_block == current_block) {\n            list_pointer = (uint *)previous_block[1];\n            __malloc_free_list = list_pointer;\n          }\n          else {\n            list_pointer = (uint *)current_block[1];\n          }\n          if (previous_block != current_block) {\n            previous_block[1] = (uint)list_pointer;\n            previous_block = current_block;\n          }\n        }\n        else {\n          *current_block = remaining_space;\n          *(uint *)((int)current_block + remaining_space) = allocated_size;\n          previous_block = (uint *)((int)current_block + remaining_space);\n        }\n        goto LAB_080092d4;\n      }\n      previous_block = current_block;\n      list_pointer = (uint *)current_block[1];\n    }\n    if (__malloc_sbrk_start == 0) {\n      __malloc_sbrk_start = _sbrk_r(error_code);\n    }\n    list_pointer = (uint *)_sbrk_r(error_code,allocated_size);\n    if ((list_pointer != (uint *)0xffffffff) &&\n       ((previous_block = (uint *)((int)list_pointer + 3U & 0xfffffffc), list_pointer == previous_block ||\n        (difference = _sbrk_r(error_code,(int)previous_block - (int)list_pointer), difference != -1)))) {\n      *previous_block = allocated_size;\nLAB_080092d4:\n      __malloc_unlock(error_code);\n      allocated_size = (int)previous_block + 0xbU & 0xfffffff8;\n      difference = allocated_size - (int)(previous_block + 1);\n      if (difference != 0) {\n        *(int *)((int)previous_block + difference) = -difference;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *error_code = 0xc;\n    __malloc_unlock(error_code);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009270": "allocate_memory_08009270",
                "param_1": "error_code",
                "param_2": "size",
                "puVar1": "list_pointer",
                "iVar2": "difference",
                "puVar3": "current_block",
                "uVar4": "remaining_space",
                "puVar5": "previous_block",
                "uVar6": "allocated_size"
            },
            "calling": [
                "__sfmoreglue",
                "__smakebuf_r",
                "_realloc_r",
                "malloc"
            ],
            "called": [
                "__malloc_lock",
                "__malloc_unlock",
                "_sbrk_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800932c": {
            "entrypoint": "0x0800932c",
            "current_name": "write_char_to_file_0800932c",
            "code": "\nuint writeCharToFile_0800932c(undefined4 fileDescriptor,byte character,byte **buffer)\n\n{\n  uint returnValue;\n  byte *bufferPtr;\n  \n  bufferPtr = buffer[2] + -1;\n  buffer[2] = bufferPtr;\n  if (((int)bufferPtr < 0) && (((int)bufferPtr < (int)buffer[6] || (character == 10)))) {\n    returnValue = __swbuf_r();\n    return returnValue;\n  }\n  bufferPtr = *buffer;\n  *buffer = bufferPtr + 1;\n  *bufferPtr = character;\n  return (uint)character;\n}\n\n",
            "renaming": {
                "FUN_0800932c": "write_char_to_file_0800932c",
                "param_1": "fileDescriptor",
                "param_2": "character",
                "param_3": "buffer",
                "uVar1": "returnValue",
                "pbVar2": "bufferPtr"
            },
            "calling": [
                "__sfputs_r"
            ],
            "called": [
                "__swbuf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009358": {
            "entrypoint": "0x08009358",
            "current_name": "write_data_08009358",
            "code": "\nint write_data_08009358(undefined4 file,undefined4 mode,undefined *data,int size)\n\n{\n  int write_status;\n  undefined *end_of_data;\n  int remaining_size;\n  \n  end_of_data = data + size;\n  remaining_size = size;\n  do {\n    if (data == end_of_data) {\n      return 0;\n    }\n    write_status = __sfputc_r(file,*data,mode,size,remaining_size);\n    size = write_status + 1;\n    data = data + 1;\n  } while (size != 0);\n  return write_status;\n}\n\n",
            "renaming": {
                "FUN_08009358": "write_data_08009358",
                "param_1": "file",
                "param_2": "mode",
                "param_3": "data",
                "param_4": "size",
                "iVar1": "write_status",
                "puVar2": "end_of_data",
                "iVar3": "remaining_size"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "__sfputc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800937c": {
            "entrypoint": "0x0800937c",
            "current_name": "parse_printf_format_string_0800937c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009550) */\n\nint parsePrintfFormatString_0800937c(int formatString,undefined4 *stream,byte *buffer,int *bytesWritten)\n\n{\n  bool isNumber;\n  int returnValue;\n  void *foundChar;\n  int *param;\n  byte *currentChar;\n  byte *nextChar;\n  int tempVar1;\n  int tempVar2;\n  int *param;\n  uint flags;\n  int width;\n  undefined4 mod;\n  int precision;\n  int totalBytesWritten;\n  byte conversionSpecifier;\n  undefined spaceFlag;\n  undefined plusFlag;\n  undefined sharpFlag;\n  undefined4 length;\n  \n  param = bytesWritten;\n  if ((formatString != 0) && (*(int *)(formatString + 0x18) == 0)) {\n    __sinit();\n  }\n  if (stream == &__sf_fake_stdin) {\n    stream = *(undefined4 **)(formatString + 4);\n  }\n  else if (stream == (undefined4 *)&__sf_fake_stdout) {\n    stream = *(undefined4 **)(formatString + 8);\n  }\n  else if (stream == (undefined4 *)&__sf_fake_stderr) {\n    stream = *(undefined4 **)(formatString + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(stream + 3) << 0x1c)) || (stream[4] == 0)) &&\n     (tempVar2 = __swsetup_r(formatString,stream), tempVar2 != 0)) {\n    return -1;\n  }\n  totalBytesWritten = 0;\n  spaceFlag = 0x20;\n  plusFlag = 0x30;\n  currentChar = buffer;\nLAB_080093be:\n  nextChar = currentChar;\n  if (*nextChar != 0) goto LAB_08009474;\n  goto LAB_080093c8;\nLAB_08009474:\n  currentChar = nextChar + 1;\n  if (*nextChar != 0x25) goto LAB_080093be;\nLAB_080093c8:\n  tempVar2 = (int)nextChar - (int)buffer;\n  if (tempVar2 != 0) {\n    returnValue = __sfputs_r(formatString,stream,buffer,tempVar2);\n    if (returnValue == -1) {\nLAB_08009568:\n      if ((int)((uint)*(ushort *)(stream + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return totalBytesWritten;\n    }\n    totalBytesWritten = totalBytesWritten + tempVar2;\n  }\n  if (*nextChar == 0) goto LAB_08009568;\n  flags = 0;\n  precision = 0;\n  width = -1;\n  mod = 0;\n  sharpFlag = 0;\n  length = 0;\n  currentChar = nextChar + 1;\n  while( true ) {\n    foundChar = memchr(\"#-0+ \",(uint)*currentChar,5);\n    buffer = currentChar + 1;\n    if (foundChar == (void *)0x0) break;\n    flags = 1 << ((int)foundChar + 0xf7ff54b0U & 0xff) | flags;\n    currentChar = buffer;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    sharpFlag = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    sharpFlag = 0x2b;\n  }\n  if (*currentChar == 0x2a) {\n    param = param + 1;\n    tempVar2 = *param;\n    param = param;\n    if (tempVar2 < 0) {\n      precision = -tempVar2;\n      flags = flags | 2;\n      goto LAB_080094a6;\n    }\n  }\n  else {\n    isNumber = false;\n    tempVar2 = precision;\n    buffer = currentChar;\n    while( true ) {\n      if (9 < *buffer - 0x30) break;\n      tempVar2 = tempVar2 * 10 + (*buffer - 0x30);\n      isNumber = true;\n      buffer = buffer + 1;\n    }\n    if (!isNumber) goto LAB_080094a6;\n  }\n  precision = tempVar2;\nLAB_080094a6:\n  if (*buffer == 0x2e) {\n    if (buffer[1] == 0x2a) {\n      buffer = buffer + 2;\n      param = param + 1;\n      width = *param;\n      param = param;\n      if (width < 0) {\n        width = -1;\n      }\n    }\n    else {\n      isNumber = false;\n      tempVar2 = 0;\n      width = 0;\n      while( true ) {\n        buffer = buffer + 1;\n        if (9 < *buffer - 0x30) break;\n        tempVar2 = tempVar2 * 10 + (*buffer - 0x30);\n        isNumber = true;\n      }\n      if (isNumber) {\n        width = tempVar2;\n      }\n    }\n  }\n  foundChar = memchr(&DAT_0800ab56,(uint)*buffer,3);\n  if (foundChar != (void *)0x0) {\n    buffer = buffer + 1;\n    flags = flags | 0x40 << ((int)foundChar + 0xf7ff54aaU & 0xff);\n  }\n  conversionSpecifier = *buffer;\n  buffer = buffer + 1;\n  foundChar = memchr(\"efgEFG\",(uint)conversionSpecifier,6);\n  if (foundChar == (void *)0x0) {\n    tempVar1 = _printf_i(formatString,&flags,stream,0x8009359,&param);\n    if (tempVar1 == -1) goto LAB_08009568;\n  }\n  else {\n    param = (int *)(((int)param + 7U & 0xfffffff8) + 8);\n  }\n  totalBytesWritten = totalBytesWritten + tempVar1;\n  currentChar = buffer;\n  goto LAB_080093be;\n}\n\n",
            "renaming": {
                "FUN_0800937c": "parse_printf_format_string_0800937c",
                "param_1": "formatString",
                "param_2": "stream",
                "param_3": "buffer",
                "param_4": "bytesWritten",
                "bVar1": "isNumber",
                "iVar2": "returnValue",
                "pvVar3": "foundChar",
                "piVar4": "param",
                "pbVar5": "currentChar",
                "pbVar6": "nextChar",
                "unaff_r9": "tempVar1",
                "iVar7": "tempVar2",
                "local_8c": "param",
                "local_88": "flags",
                "local_84": "width",
                "local_80": "mod",
                "local_7c": "precision",
                "local_74": "totalBytesWritten",
                "local_70": "conversionSpecifier",
                "local_6f": "spaceFlag",
                "local_6e": "plusFlag",
                "local_45": "sharpFlag",
                "local_30": "length"
            },
            "calling": [
                "fiprintf",
                "iprintf"
            ],
            "called": [
                "__swsetup_r",
                "_printf_i",
                "__sinit",
                "memchr",
                "__sfputs_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080095a8": {
            "entrypoint": "0x080095a8",
            "current_name": "decode_and_count_080095a8",
            "code": "\nundefined4\ndecode_and_count_080095a8(undefined4 input_data,uint *header,uint *output_size,undefined4 param,code *callback)\n\n{\n  int i;\n  int j;\n  uint max_size;\n  uint offset;\n  bool bool_flag;\n  \n  max_size = header[4];\n  if ((int)header[4] < (int)header[2]) {\n    max_size = header[2];\n  }\n  *output_size = max_size;\n  if (*(char *)((int)header + 0x43) != '\\0') {\n    *output_size = max_size + 1;\n  }\n  if ((int)(*header << 0x1a) < 0) {\n    *output_size = *output_size + 2;\n  }\n  if ((*header & 6) == 0) {\n    for (i = 0; i < (int)(header[3] - *output_size); i = i + 1) {\n      j = (*callback)(input_data,param,(int)header + 0x19,1);\n      if (j == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  max_size = (uint)*(byte *)((int)header + 0x43);\n  if (max_size != 0) {\n    max_size = 1;\n  }\n  offset = max_size;\n  if ((int)(*header << 0x1a) < 0) {\n    *(undefined *)((int)header + max_size + 0x43) = 0x30;\n    offset = max_size + 2;\n    *(undefined *)((int)header + max_size + 0x44) = *(undefined *)((int)header + 0x45);\n  }\n  i = (*callback)(input_data,param,(int)header + 0x43,offset);\n  if (i != -1) {\n    max_size = header[3];\n    bool_flag = (*header & 6) != 4;\n    if (bool_flag) {\n      max_size = 0;\n    }\n    offset = 0;\n    if (!bool_flag) {\n      max_size = max_size - *output_size;\n    }\n    if (!bool_flag) {\n      max_size = max_size & ~((int)max_size >> 0x1f);\n    }\n    if ((int)header[4] < (int)header[2]) {\n      max_size = max_size + (header[2] - header[4]);\n    }\n    while( true ) {\n      if (max_size == offset) {\n        return 0;\n      }\n      i = (*callback)(input_data,param,(int)header + 0x1a,1);\n      if (i == -1) break;\n      offset = offset + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080095a8": "decode_and_count_080095a8",
                "param_1": "input_data",
                "param_2": "header",
                "param_3": "output_size",
                "param_4": "param",
                "param_5": "callback",
                "iVar1": "i",
                "iVar2": "j",
                "uVar3": "max_size",
                "uVar4": "offset",
                "bVar5": "bool_flag"
            },
            "calling": [
                "_printf_i"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009698": {
            "entrypoint": "0x08009698",
            "current_name": "print_formatted_output_08009698",
            "code": "\nuint printFormattedOutput_08009698(undefined4 returnValue,uint *formatSpecifier,undefined4 userReturnValue,code *printFunction,uint **userData)\n\n{\n  byte byteValue;\n  int loopVariable1;\n  uint *pointer1;\n  void *pointer2;\n  int loopVariable2;\n  char *hexDigits;\n  uint formatSpecifierByte;\n  uint **pointer3;\n  char **doublePointer;\n  uint calculatedValue1;\n  uint calculatedValue2;\n  char *characterPointer1;\n  char *stringPointer;\n  uint localArray [2];\n  \n  byteValue = *(byte *)(formatSpecifier + 6);\n  stringPointer = (char *)((int)formatSpecifier + 0x43);\n  if (byteValue != 0x6e) {\n    if (byteValue < 0x6f) {\n      if (byteValue != 99) {\n        if (byteValue < 100) {\n          if (byteValue == 0) goto LAB_08009852;\n          if (byteValue != 0x58) goto LAB_080096c8;\n          *(undefined *)((int)formatSpecifier + 0x45) = 0x58;\n          hexDigits = \"0123456789ABCDEF\";\nLAB_080097e2:\n          formatSpecifierByte = *formatSpecifier;\n          pointer1 = *userData;\n          *userData = pointer1 + 1;\n          if (((formatSpecifierByte & 0x80) == 0) && ((int)(formatSpecifierByte << 0x19) < 0)) {\n            calculatedValue1 = (uint)*(ushort *)pointer1;\n          }\n          else {\n            calculatedValue1 = *pointer1;\n          }\n          if ((int)(formatSpecifierByte << 0x1f) < 0) {\n            *formatSpecifier = formatSpecifierByte | 0x20;\n          }\n          if (calculatedValue1 == 0) {\n            *formatSpecifier = *formatSpecifier & 0xffffffdf;\n          }\n          formatSpecifierByte = 0x10;\nLAB_08009778:\n          *(undefined *)((int)formatSpecifier + 0x43) = 0;\n        }\n        else {\n          if ((byteValue != 100) && (byteValue != 0x69)) goto LAB_080096c8;\n          calculatedValue1 = *formatSpecifier;\n          pointer1 = *userData;\n          if ((calculatedValue1 & 0x80) == 0) {\n            *userData = pointer1 + 1;\n            if ((calculatedValue1 & 0x40) == 0) goto LAB_080096e8;\n            calculatedValue1 = (uint)(short)*(ushort *)pointer1;\n          }\n          else {\n            *userData = pointer1 + 1;\nLAB_080096e8:\n            calculatedValue1 = *pointer1;\n          }\n          if ((int)calculatedValue1 < 0) {\n            calculatedValue1 = -calculatedValue1;\n            *(undefined *)((int)formatSpecifier + 0x43) = 0x2d;\n          }\n          hexDigits = \"0123456789ABCDEF\";\n          formatSpecifierByte = 10;\n        }\n        calculatedValue2 = formatSpecifier[1];\n        formatSpecifier[2] = calculatedValue2;\n        characterPointer1 = stringPointer;\n        if ((int)calculatedValue2 < 0) {\n          if (calculatedValue1 != 0) goto LAB_08009816;\nLAB_080098c4:\n          *(char *)((int)formatSpecifier + 0x42) = *hexDigits;\n          characterPointer1 = (char *)((int)formatSpecifier + 0x42);\n        }\n        else {\n          *formatSpecifier = *formatSpecifier & 0xfffffffb;\n          if (calculatedValue1 == 0) {\n            if (calculatedValue2 != 0) goto LAB_080098c4;\n          }\n          else {\nLAB_08009816:\n            do {\n              calculatedValue2 = calculatedValue1 / formatSpecifierByte;\n              characterPointer1 = characterPointer1 + -1;\n              *characterPointer1 = hexDigits[calculatedValue1 - formatSpecifierByte * calculatedValue2];\n              calculatedValue1 = calculatedValue2;\n            } while (calculatedValue2 != 0);\n          }\n        }\n        if (((formatSpecifierByte == 8) && ((int)(*formatSpecifier << 0x1f) < 0)) && ((int)formatSpecifier[1] <= (int)formatSpecifier[4]))\n        {\n          characterPointer1[-1] = '0';\n          characterPointer1 = characterPointer1 + -1;\n        }\n        formatSpecifier[4] = (int)stringPointer - (int)characterPointer1;\n        stringPointer = characterPointer1;\n        goto LAB_080097be;\n      }\n      pointer1 = *userData;\n      *userData = pointer1 + 1;\n      *(char *)((int)formatSpecifier + 0x42) = (char)*pointer1;\nLAB_08009728:\n      stringPointer = (char *)((int)formatSpecifier + 0x42);\n      calculatedValue1 = 1;\n    }\n    else {\n      if (byteValue != 0x73) {\n        if (byteValue < 0x74) {\n          if (byteValue == 0x6f) {\nLAB_0800974e:\n            calculatedValue1 = *formatSpecifier;\n            pointer1 = *userData;\n            if ((calculatedValue1 & 0x80) == 0) {\n              *userData = pointer1 + 1;\n              if ((calculatedValue1 & 0x40) == 0) goto LAB_0800975c;\n              calculatedValue1 = (uint)*(ushort *)pointer1;\n            }\n            else {\n              *userData = pointer1 + 1;\nLAB_0800975c:\n              calculatedValue1 = *pointer1;\n            }\n            if (byteValue == 0x6f) {\n              formatSpecifierByte = 8;\n            }\n            else {\n              formatSpecifierByte = 10;\n            }\n            hexDigits = \"0123456789ABCDEF\";\n            goto LAB_08009778;\n          }\n          if (byteValue == 0x70) {\n            *formatSpecifier = *formatSpecifier | 0x20;\nLAB_0800970e:\n            hexDigits = \"0123456789abcdef\";\n            *(undefined *)((int)formatSpecifier + 0x45) = 0x78;\n            goto LAB_080097e2;\n          }\n        }\n        else {\n          if (byteValue == 0x75) goto LAB_0800974e;\n          if (byteValue == 0x78) goto LAB_0800970e;\n        }\nLAB_080096c8:\n        *(byte *)((int)formatSpecifier + 0x42) = byteValue;\n        goto LAB_08009728;\n      }\n      doublePointer = (char **)*userData;\n      *userData = (uint *)(doublePointer + 1);\n      stringPointer = *doublePointer;\n      pointer2 = memchr(stringPointer,0,formatSpecifier[1]);\n      if (pointer2 != (void *)0x0) {\n        formatSpecifier[1] = (int)pointer2 - (int)stringPointer;\n      }\n      calculatedValue1 = formatSpecifier[1];\n    }\n    formatSpecifier[4] = calculatedValue1;\n    *(undefined *)((int)formatSpecifier + 0x43) = 0;\n    goto LAB_080097be;\n  }\n  calculatedValue1 = *formatSpecifier;\n  pointer3 = (uint **)*userData;\n  formatSpecifierByte = formatSpecifier[5];\n  if ((calculatedValue1 & 0x80) == 0) {\n    *userData = (uint *)(pointer3 + 1);\n    pointer1 = *pointer3;\n    if ((calculatedValue1 & 0x40) == 0) goto LAB_0800983e;\n    *(short *)pointer1 = (short)formatSpecifierByte;\n  }\n  else {\n    *userData = (uint *)(pointer3 + 1);\n    pointer1 = *pointer3;\nLAB_0800983e:\n    *pointer1 = formatSpecifierByte;\n  }\nLAB_08009852:\n  formatSpecifier[4] = 0;\nLAB_080097be:\n  loopVariable1 = _printf_common(returnValue,formatSpecifier,localArray,userReturnValue,printFunction);\n  if ((loopVariable1 == -1) || (loopVariable1 = (*printFunction)(returnValue,userReturnValue,stringPointer,formatSpecifier[4]), loopVariable1 == -1)) {\nLAB_080097d2:\n    calculatedValue1 = 0xffffffff;\n  }\n  else {\n    if ((int)(*formatSpecifier << 0x1e) < 0) {\n      for (loopVariable1 = 0; loopVariable1 < (int)(formatSpecifier[3] - localArray[0]); loopVariable1 = loopVariable1 + 1) {\n        loopVariable2 = (*printFunction)(returnValue,userReturnValue,(int)formatSpecifier + 0x19,1);\n        if (loopVariable2 == -1) goto LAB_080097d2;\n      }\n    }\n    calculatedValue1 = formatSpecifier[3];\n    if ((int)formatSpecifier[3] < (int)localArray[0]) {\n      calculatedValue1 = localArray[0];\n    }\n  }\n  return calculatedValue1;\n}\n\n",
            "renaming": {
                "FUN_08009698": "print_formatted_output_08009698",
                "param_1": "returnValue",
                "param_2": "formatSpecifier",
                "param_3": "userReturnValue",
                "param_4": "printFunction",
                "param_5": "userData",
                "bVar1": "byteValue",
                "iVar2": "loopVariable1",
                "puVar3": "pointer1",
                "pvVar4": "pointer2",
                "iVar5": "loopVariable2",
                "pcVar6": "hexDigits",
                "uVar7": "formatSpecifierByte",
                "ppuVar8": "pointer3",
                "ppcVar9": "doublePointer",
                "uVar10": "calculatedValue1",
                "uVar11": "calculatedValue2",
                "pcVar12": "characterPointer1",
                "__s": "stringPointer",
                "local_24": "localArray"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "_printf_common",
                "memchr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098d8": {
            "entrypoint": "0x080098d8",
            "current_name": "formatted_print_080098d8",
            "code": "\nint formattedPrint_080098d8(char *formatString,...)\n\n{\n  int impurePtr;\n  undefined4 in_r1;\n  undefined4 in_r2;\n  undefined4 in_r3;\n  char *currentFormat;\n  undefined4 inReg1;\n  undefined4 inReg2;\n  undefined4 inReg3;\n  \n  impurePtr = _impure_ptr;\n  currentFormat = formatString;\n  inReg1 = in_r1;\n  inReg2 = in_r2;\n  inReg3 = in_r3;\n  if ((_impure_ptr != 0) && (*(int *)(_impure_ptr + 0x18) == 0)) {\n    __sinit(_impure_ptr);\n  }\n  impurePtr = _vfiprintf_r(impurePtr,*(undefined4 *)(impurePtr + 8),formatString,&inReg1,currentFormat,&inReg1);\n  return impurePtr;\n}\n\n",
            "renaming": {
                "FUN_080098d8": "formatted_print_080098d8",
                "__format": "formatString",
                "iVar1": "impurePtr",
                "pcVar2": "currentFormat",
                "uStack_c": "inReg1",
                "uStack_8": "inReg2",
                "uStack_4": "inReg3"
            },
            "calling": [
                "getTimerIrq",
                "uart_init",
                "getTimerClkSrc",
                "getTimerClkFreq",
                "i2c_custom_init"
            ],
            "called": [
                "_vfiprintf_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009908": {
            "entrypoint": "0x08009908",
            "current_name": "reallocate_memory_08009908",
            "code": "\nvoid * reallocateMemory_08009908(void *ptr,size_t size)\n\n{\n  void *reallocPtr;\n  \n  reallocPtr = (void *)_realloc_r(impurePtr,ptr,size);\n  return reallocPtr;\n}\n\n",
            "renaming": {
                "FUN_08009908": "reallocate_memory_08009908",
                "__ptr": "ptr",
                "__size": "size",
                "pvVar1": "reallocPtr",
                "_impure_ptr": "impurePtr"
            },
            "calling": [
                "write",
                "allocateRxBuffer",
                "write"
            ],
            "called": [
                "_realloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009918": {
            "entrypoint": "0x08009918",
            "current_name": "allocate_memory_08009918",
            "code": "\nvoid allocateMemory_08009918(int *errorCode,intptr_t size)\n\n{\n  void *memoryPointer;\n  \n  errno = 0;\n  memoryPointer = _sbrk(size);\n  if ((memoryPointer == (void *)0xffffffff) && (errno != 0)) {\n    *errorCode = errno;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009918": "allocate_memory_08009918",
                "param_1": "errorCode",
                "param_2": "size",
                "pvVar1": "memoryPointer"
            },
            "calling": [
                "_malloc_r"
            ],
            "called": [
                "_sbrk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009938": {
            "entrypoint": "0x08009938",
            "current_name": "find_char_08009938",
            "code": "\nchar * find_char_08009938(char *string,int char_to_find)\n\n{\n  byte *byte_pointer;\n  \n  do {\n    byte_pointer = (byte *)string;\n    if (*byte_pointer == 0) {\n      if ((char_to_find & 0xffU) != 0) {\n        byte_pointer = (byte *)0x0;\n      }\n      return (char *)byte_pointer;\n    }\n    string = (char *)(byte_pointer + 1);\n  } while ((char_to_find & 0xffU) != (uint)*byte_pointer);\n  return (char *)byte_pointer;\n}\n\n",
            "renaming": {
                "FUN_08009938": "find_char_08009938",
                "__s": "string",
                "__c": "char_to_find",
                "pbVar1": "byte_pointer"
            },
            "calling": [
                "strrchr"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009954": {
            "entrypoint": "0x08009954",
            "current_name": "copy_string_08009954",
            "code": "\nchar * copy_string_08009954(char *destination,char *source,size_t length)\n\n{\n  char current_character;\n  size_t remaining_length;\n  char *destination_ptr;\n  char *temp_ptr;\n  \n  destination_ptr = destination;\n  do {\n    temp_ptr = destination_ptr;\n    remaining_length = length;\n    if (remaining_length == 0) {\n      return destination;\n    }\n    current_character = *source;\n    destination_ptr = temp_ptr + 1;\n    *temp_ptr = current_character;\n    source = source + 1;\n    length = remaining_length - 1;\n  } while (current_character != '\\0');\n  for (; destination_ptr != temp_ptr + remaining_length; destination_ptr = destination_ptr + 1) {\n    *destination_ptr = '\\0';\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_08009954": "copy_string_08009954",
                "__dest": "destination",
                "__src": "source",
                "__n": "length",
                "cVar1": "current_character",
                "sVar2": "remaining_length",
                "pcVar3": "destination_ptr",
                "pcVar4": "temp_ptr"
            },
            "calling": [
                "setFirmwareNameAndVersion"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800997e": {
            "entrypoint": "0x0800997e",
            "current_name": "find_last_occurrence_0800997e",
            "code": "\nchar * find_last_occurrence_0800997e(char *string,int character)\n\n{\n  char *found_position;\n  char *last_position;\n  \n  if (character != 0) {\n    last_position = (char *)0x0;\n    while (found_position = strchr(string,character), found_position != (char *)0x0) {\n      string = found_position + 1;\n      last_position = found_position;\n    }\n    return last_position;\n  }\n  last_position = strchr(string,0);\n  return last_position;\n}\n\n",
            "renaming": {
                "FUN_0800997e": "find_last_occurrence_0800997e",
                "__s": "string",
                "__c": "character",
                "pcVar1": "found_position",
                "pcVar2": "last_position"
            },
            "calling": [
                "setFirmwareNameAndVersion"
            ],
            "called": [
                "strchr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080099a4": {
            "entrypoint": "0x080099a4",
            "current_name": "find_substring_080099a4",
            "code": "\nchar * find_substring_080099a4(char *haystack,char *needle)\n\n{\n  char *current_haystack;\n  char *current_needle;\n  char *temp_needle;\n  \n  if (*haystack == '\\0') {\n    if (*needle != '\\0') {\n      haystack = (char *)0x0;\n    }\n    return haystack;\n  }\n  do {\n    current_haystack = haystack;\n    if (*current_haystack == '\\0') {\n      return (char *)0x0;\n    }\n    temp_needle = needle + -1;\n    current_needle = current_haystack + -1;\n    do {\n      temp_needle = temp_needle + 1;\n      if (*temp_needle == '\\0') {\n        return current_haystack;\n      }\n      current_needle = current_needle + 1;\n      haystack = current_haystack + 1;\n    } while (*current_needle == *temp_needle);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080099a4": "find_substring_080099a4",
                "__haystack": "haystack",
                "__needle": "needle",
                "pcVar1": "current_haystack",
                "pcVar2": "current_needle",
                "pcVar3": "temp_needle"
            },
            "calling": [
                "setFirmwareNameAndVersion"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080099dc": {
            "entrypoint": "0x080099dc",
            "current_name": "write_to_stream_080099dc",
            "code": "\nuint writeToStream_080099dc(int stream,uint data,int *streamBuffer,undefined4 flags)\n\n{\n  int result;\n  uint ushortValue;\n  undefined *bufferPtr;\n  \n  if ((stream != 0) && (*(int *)(stream + 0x18) == 0)) {\n    __sinit();\n  }\n  if (streamBuffer == &__sf_fake_stdin) {\n    streamBuffer = *(int **)(stream + 4);\n  }\n  else if (streamBuffer == (int *)&__sf_fake_stdout) {\n    streamBuffer = *(int **)(stream + 8);\n  }\n  else if (streamBuffer == (int *)&__sf_fake_stderr) {\n    streamBuffer = *(int **)(stream + 0xc);\n  }\n  streamBuffer[2] = streamBuffer[6];\n  ushortValue = (uint)*(ushort *)(streamBuffer + 3);\n  result = ushortValue << 0x1c;\n  if (((result < 0) && (ushortValue = streamBuffer[4], ushortValue != 0)) ||\n     (result = __swsetup_r(stream,streamBuffer,result,ushortValue,flags), result == 0)) {\n    data = data & 0xff;\n    result = *streamBuffer - streamBuffer[4];\n    if ((result < streamBuffer[5]) || (result = _fflush_r(stream,streamBuffer), result == 0)) {\n      streamBuffer[2] = streamBuffer[2] + -1;\n      bufferPtr = (undefined *)*streamBuffer;\n      *streamBuffer = (int)(bufferPtr + 1);\n      *bufferPtr = (char)data;\n      if (result + 1 != streamBuffer[5]) {\n        if (-1 < (int)((uint)*(ushort *)(streamBuffer + 3) << 0x1f)) {\n          return data;\n        }\n        if (data != 10) {\n          return data;\n        }\n      }\n      result = _fflush_r(stream,streamBuffer);\n      if (result == 0) {\n        return data;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080099dc": "write_to_stream_080099dc",
                "param_1": "stream",
                "param_2": "data",
                "param_3": "streamBuffer",
                "param_4": "flags",
                "iVar1": "result",
                "uVar2": "ushortValue",
                "puVar3": "bufferPtr"
            },
            "calling": [
                "__sfputc_r"
            ],
            "called": [
                "__swsetup_r",
                "_fflush_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009a80": {
            "entrypoint": "0x08009a80",
            "current_name": "process_stream_08009a80",
            "code": "\nuint processStream_08009a80(undefined4 *streamPtr,undefined4 *filePtr)\n\n{\n  int impurePtr;\n  uint returnValue;\n  ushort fileStatus;\n  \n  impurePtr = _impure_ptr;\n  if ((_impure_ptr != 0) && (*(int *)(_impure_ptr + 0x18) == 0)) {\n    __sinit(_impure_ptr);\n  }\n  if (filePtr == &__sf_fake_stdin) {\n    filePtr = *(undefined4 **)(impurePtr + 4);\n  }\n  else if (filePtr == (undefined4 *)&__sf_fake_stdout) {\n    filePtr = *(undefined4 **)(impurePtr + 8);\n  }\n  else if (filePtr == (undefined4 *)&__sf_fake_stderr) {\n    filePtr = *(undefined4 **)(impurePtr + 0xc);\n  }\n  fileStatus = *(ushort *)(filePtr + 3);\n  returnValue = (uint)fileStatus;\n  if (-1 < (int)(returnValue << 0x1c)) {\n    if (-1 < (int)(returnValue << 0x1b)) {\n      *streamPtr = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(returnValue << 0x1d) < 0) {\n      if ((undefined4 *)filePtr[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)filePtr[0xd] != filePtr + 0x11) {\n          _free_r(streamPtr);\n        }\n        filePtr[0xd] = 0;\n      }\n      *(ushort *)(filePtr + 3) = *(ushort *)(filePtr + 3) & 0xffdb;\n      filePtr[1] = 0;\n      *filePtr = filePtr[4];\n    }\n    *(ushort *)(filePtr + 3) = *(ushort *)(filePtr + 3) | 8;\n  }\n  if ((filePtr[4] == 0) && ((*(ushort *)(filePtr + 3) & 0x280) != 0x200)) {\n    __smakebuf_r(streamPtr,filePtr);\n  }\n  fileStatus = *(ushort *)(filePtr + 3);\n  returnValue = fileStatus & 1;\n  if ((fileStatus & 1) == 0) {\n    if (-1 < (int)((uint)fileStatus << 0x1e)) {\n      returnValue = filePtr[5];\n    }\n    filePtr[2] = returnValue;\n  }\n  else {\n    filePtr[2] = 0;\n    filePtr[6] = -filePtr[5];\n  }\n  if (filePtr[4] == 0) {\n    fileStatus = *(ushort *)(filePtr + 3);\n    returnValue = (int)(short)fileStatus & 0x80;\n    if (returnValue != 0) {\nLAB_08009ab0:\n      *(ushort *)(filePtr + 3) = fileStatus | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08009a80": "process_stream_08009a80",
                "param_1": "streamPtr",
                "param_2": "filePtr",
                "iVar1": "impurePtr",
                "uVar2": "returnValue",
                "uVar3": "fileStatus"
            },
            "calling": [
                "_vfiprintf_r",
                "__swbuf_r"
            ],
            "called": [
                "_free_r",
                "__smakebuf_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009b5c": {
            "entrypoint": "0x08009b5c",
            "current_name": "terminate_program_08009b5c",
            "code": "\n\n\nvoid terminate_program_08009b5c(void)\n\n{\n  raise(6);\n                    \n  exit_program(1);\n}\n\n",
            "renaming": {
                "FUN_08009b5c": "terminate_program_08009b5c",
                "_exit": "exit_program"
            },
            "calling": [
                "__assert_func",
                "__throw_bad_function_call"
            ],
            "called": [
                "_exit",
                "raise"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009b6c": {
            "entrypoint": "0x08009b6c",
            "current_name": "process_data_08009b6c",
            "code": "\nundefined4 processData_08009b6c(uint *data,int *params)\n\n{\n  int var1;\n  int *var2;\n  uint value1;\n  ushort value2;\n  int var3;\n  code *funcPtr;\n  int var4;\n  uint value3;\n  bool isTrue;\n  \n  value2 = *(ushort *)(params + 3);\n  value1 = (uint)value2;\n  if ((int)(value1 << 0x1c) < 0) {\n    var1 = params[4];\n    if (var1 != 0) {\n      var3 = value1 << 0x1e;\n      isTrue = var3 != 0;\n      if (isTrue) {\n        var3 = 0;\n      }\n      var4 = *params;\n      if (!isTrue) {\n        var3 = params[5];\n      }\n      *params = var1;\n      params[2] = var3;\n      for (var4 = var4 - var1; 0 < var4; var4 = var4 - var3) {\n        var3 = (*(code *)params[10])(data,params[8],var1,var4);\n        if (var3 < 1) {\n          value2 = *(ushort *)(params + 3);\n          goto LAB_08009c62;\n        }\n        var1 = var1 + var3;\n      }\n    }\n  }\n  else if (((0 < params[1]) || (0 < params[0x10])) &&\n          (funcPtr = (code *)params[0xb], funcPtr != (code *)0x0)) {\n    value3 = *data;\n    *data = 0;\n    if ((value2 & 0x1000) == 0) {\n      var1 = (*funcPtr)(data,params[8],value1 & 0x1000,1);\n      if ((var1 == -1) && (value1 = *data, value1 != 0)) {\n        if ((value1 != 0x1d) && (value1 != 0x16)) {\n          *(ushort *)(params + 3) = *(ushort *)(params + 3) | 0x40;\n          return 0xffffffff;\n        }\n        *data = value3;\n        return 0;\n      }\n    }\n    else {\n      var1 = params[0x15];\n    }\n    if (((int)((uint)*(ushort *)(params + 3) << 0x1d) < 0) &&\n       (var1 = var1 - params[1], params[0xd] != 0)) {\n      var1 = var1 - params[0x10];\n    }\n    var1 = (*(code *)params[0xb])(data,params[8],var1,0);\n    value2 = *(ushort *)(params + 3);\n    if ((var1 == -1) &&\n       ((0x1d < *data || (-1 < (int)((0x20400001U >> (*data & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n      *(ushort *)(params + 3) = value2 | 0x40;\n      return 0xffffffff;\n    }\n    params[1] = 0;\n    *params = params[4];\n    if (((int)((uint)value2 << 0x13) < 0) && ((var1 != -1 || (*data == 0)))) {\n      params[0x15] = var1;\n    }\n    var2 = (int *)params[0xd];\n    *data = value3;\n    if (var2 != (int *)0x0) {\n      if (var2 != params + 0x11) {\n        _free_r(data);\n      }\n      params[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009b6c": "process_data_08009b6c",
                "param_1": "data",
                "param_2": "params",
                "iVar1": "var1",
                "piVar2": "var2",
                "uVar3": "value1",
                "uVar4": "value2",
                "iVar5": "var3",
                "pcVar6": "funcPtr",
                "iVar7": "var4",
                "uVar8": "value3",
                "bVar9": "isTrue"
            },
            "calling": [
                "_fflush_r"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009c7c": {
            "entrypoint": "0x08009c7c",
            "current_name": "check_and_flush_stream_08009c7c",
            "code": "\nundefined4 check_and_flush_stream_08009c7c(int stream_info,undefined4 *stream_ptr,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 result;\n  \n  if (stream_ptr[4] != 0) {\n    if ((stream_info != 0) && (*(int *)(stream_info + 0x18) == 0)) {\n      __sinit();\n    }\n    if (stream_ptr == &fake_stdin) {\n      stream_ptr = *(undefined4 **)(stream_info + 4);\n    }\n    else if (stream_ptr == (undefined4 *)&fake_stdout) {\n      stream_ptr = *(undefined4 **)(stream_info + 8);\n    }\n    else if (stream_ptr == (undefined4 *)&fake_stderr) {\n      stream_ptr = *(undefined4 **)(stream_info + 0xc);\n    }\n    if (*(short *)(stream_ptr + 3) != 0) {\n      result = __sflush_r(stream_info,stream_ptr,param_3,param_4);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009c7c": "check_and_flush_stream_08009c7c",
                "param_1": "stream_info",
                "param_2": "stream_ptr",
                "uVar1": "result",
                "__sf_fake_stdin": "fake_stdin",
                "__sf_fake_stdout": "fake_stdout",
                "__sf_fake_stderr": "fake_stderr"
            },
            "calling": [
                "__swbuf_r"
            ],
            "called": [
                "__sflush_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009cd0": {
            "entrypoint": "0x08009cd0",
            "current_name": "execute_fwalk_reent_08009cd0",
            "code": "\nvoid execute_fwalk_reent_08009cd0(undefined4 reent_ptr)\n\n{\n  _fwalk_reent(reent_ptr,0x8009c7d);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009cd0": "execute_fwalk_reent_08009cd0",
                "param_1": "reent_ptr"
            },
            "calling": [],
            "called": [
                "_fwalk_reent"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009cdc": {
            "entrypoint": "0x08009cdc",
            "current_name": "initialize_data_structure_08009cdc",
            "code": "\nvoid initializeDataStructure_08009cdc(undefined4 *dataStructure,undefined2 param2Value,undefined2 param3Value)\n\n{\n  *dataStructure = 0;\n  dataStructure[1] = 0;\n  dataStructure[2] = 0;\n  *(undefined2 *)(dataStructure + 3) = param2Value;\n  dataStructure[0x19] = 0;\n  *(undefined2 *)((int)dataStructure + 0xe) = param3Value;\n  dataStructure[4] = 0;\n  dataStructure[5] = 0;\n  dataStructure[6] = 0;\n  memset(dataStructure + 0x17,0,8);\n  dataStructure[8] = dataStructure;\n  dataStructure[9] = 0x800a021;\n  dataStructure[10] = 0x800a043;\n  dataStructure[0xb] = 0x800a07b;\n  dataStructure[0xc] = 0x800a09f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009cdc": "initialize_data_structure_08009cdc",
                "param_1": "dataStructure",
                "param_2": "param2Value",
                "param_3": "param3Value"
            },
            "calling": [
                "__sinit"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d24": {
            "entrypoint": "0x08009d24",
            "current_name": "allocate_memory_08009d24",
            "code": "\nundefined4 * allocateMemory_08009d24(undefined4 param_size,int num_elements)\n\n{\n  undefined4 *ptr;\n  int offset;\n  \n  offset = (num_elements + -1) * 0x68;\n  ptr = (undefined4 *)_malloc_r(param_size,offset + 0x74);\n  if (ptr != (undefined4 *)0x0) {\n    *ptr = 0;\n    ptr[1] = num_elements;\n    ptr[2] = ptr + 3;\n    memset(ptr + 3,0,offset + 0x68);\n  }\n  return ptr;\n}\n\n",
            "renaming": {
                "FUN_08009d24": "allocate_memory_08009d24",
                "param_1": "param_size",
                "param_2": "num_elements",
                "puVar1": "ptr",
                "iVar2": "offset"
            },
            "calling": [
                "__sfp"
            ],
            "called": [
                "memset",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d50": {
            "entrypoint": "0x08009d50",
            "current_name": "initialize_data_08009d50",
            "code": "\nvoid initializeData_08009d50(undefined1 *dataPointer)\n\n{\n  undefined4 returnValue;\n  undefined1 *dataFlag;\n  \n  if (*(int *)(dataPointer + 0x18) == 0) {\n    *(undefined4 *)(dataPointer + 0x48) = 0;\n    *(undefined4 *)(dataPointer + 0x4c) = 0;\n    *(undefined4 *)(dataPointer + 0x50) = 0;\n    dataFlag = &data;\n    *(undefined4 *)(dataPointer + 0x28) = 0x8009cd1;\n    if (dataPointer == &data) {\n      dataFlag = (undefined1 *)0x1;\n    }\n    if (dataPointer == &data) {\n      *(undefined1 **)(dataPointer + 0x18) = dataFlag;\n    }\n    returnValue = getFloatParam();\n    *(undefined4 *)(dataPointer + 4) = returnValue;\n    returnValue = getFloatParam(dataPointer);\n    *(undefined4 *)(dataPointer + 8) = returnValue;\n    returnValue = getFloatParam(dataPointer);\n    *(undefined4 *)(dataPointer + 0xc) = returnValue;\n    setParam(*(undefined4 *)(dataPointer + 4),4,0);\n    setParam(*(undefined4 *)(dataPointer + 8),9,1);\n    setParam(*(undefined4 *)(dataPointer + 0xc),0x12,2);\n    *(undefined4 *)(dataPointer + 0x18) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009d50": "initialize_data_08009d50",
                "param_1": "dataPointer",
                "uVar1": "returnValue",
                "puVar2": "dataFlag",
                "impure_data": "data",
                "__sfp": "getFloatParam",
                "std_isra_0": "setParam",
                "&impure_data": "&data"
            },
            "calling": [
                "__swsetup_r",
                "_fflush_r",
                "_vfiprintf_r",
                "__swbuf_r",
                "iprintf",
                "__sfp"
            ],
            "called": [
                "std.isra.0",
                "__sfp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009db0": {
            "entrypoint": "0x08009db0",
            "current_name": "initialize_data_08009db0",
            "code": "\nint * initializeData_08009db0(undefined4 *dataArray)\n\n{\n  int *currentEntry;\n  int *currentSubEntry;\n  int **dataListPtr;\n  \n  if (DAT_200000ac == 0) {\n    __sinit(&impure_data);\n  }\n  dataListPtr = (int **)&DAT_200000dc;\n  do {\n    currentSubEntry = dataListPtr[2];\n    currentEntry = dataListPtr[1];\n    while (currentEntry = (int *)((int)currentEntry + -1), -1 < (int)currentEntry) {\n      if (*(short *)(currentSubEntry + 3) == 0) {\n        *(undefined2 *)((int)currentSubEntry + 0xe) = 0xffff;\n        currentSubEntry[0x19] = 0;\n        *(undefined2 *)(currentSubEntry + 3) = 1;\n        *currentSubEntry = 0;\n        currentSubEntry[2] = 0;\n        currentSubEntry[1] = 0;\n        currentSubEntry[4] = 0;\n        currentSubEntry[5] = 0;\n        currentSubEntry[6] = 0;\n        memset(currentSubEntry + 0x17,0,8);\n        currentSubEntry[0xd] = 0;\n        currentSubEntry[0xe] = 0;\n        currentSubEntry[0x12] = 0;\n        currentSubEntry[0x13] = 0;\n        return currentSubEntry;\n      }\n      currentSubEntry = currentSubEntry + 0x1a;\n    }\n    if (*dataListPtr == (int *)0x0) {\n      currentEntry = (int *)__sfmoreglue(dataArray,4);\n      *dataListPtr = currentEntry;\n      if (currentEntry == (int *)0x0) {\n        *dataArray = 0xc;\n        return (int *)0x0;\n      }\n    }\n    dataListPtr = (int **)*dataListPtr;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08009db0": "initialize_data_08009db0",
                "param_1": "dataArray",
                "piVar1": "currentEntry",
                "piVar2": "currentSubEntry",
                "ppiVar3": "dataListPtr"
            },
            "calling": [
                "__sinit"
            ],
            "called": [
                "__sfmoreglue",
                "memset",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009e28": {
            "entrypoint": "0x08009e28",
            "current_name": "process_elements_08009e28",
            "code": "\nuint processElements_08009e28(int inputParam,code *callbackFunc,undefined4 paramA,undefined4 paramB)\n\n{\n  uint result;\n  int counter;\n  int *ptr;\n  int valueA;\n  uint output;\n  int valueB;\n  \n  output = 0;\n  for (ptr = (int *)(inputParam + 0x48); ptr != (int *)0x0; ptr = (int *)*ptr) {\n    valueA = ptr[2];\n    valueB = ptr[1];\n    while (valueB = valueB + -1, -1 < valueB) {\n      if ((1 < *(ushort *)(valueA + 0xc)) && (counter = *(short *)(valueA + 0xe) + 1, counter != 0)) {\n        result = (*callbackFunc)(inputParam,valueA,paramA,counter,paramB);\n        output = output | result;\n      }\n      valueA = valueA + 0x68;\n    }\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_08009e28": "process_elements_08009e28",
                "param_1": "inputParam",
                "param_2": "callbackFunc",
                "param_3": "paramA",
                "param_4": "paramB",
                "uVar1": "result",
                "iVar2": "counter",
                "piVar3": "ptr",
                "iVar4": "valueA",
                "uVar5": "output",
                "iVar6": "valueB"
            },
            "calling": [
                "_cleanup_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009e64": {
            "entrypoint": "0x08009e64",
            "current_name": "check_file_permissions_08009e64",
            "code": "\nundefined4 checkFilePermissions_08009e64(undefined4 fileDescriptor,int fileInfo,undefined4 *resultFlag,uint *isExecutable)\n\n{\n  int status;\n  undefined4 permissionCode;\n  undefined stackBuffer [4];\n  uint fileMode;\n  \n  if ((*(short *)(fileInfo + 0xe) < 0) ||\n     (status = _fstat_r(fileDescriptor,(int)*(short *)(fileInfo + 0xe),stackBuffer), status < 0)) {\n    *isExecutable = 0;\n    if ((int)((uint)*(ushort *)(fileInfo + 0xc) << 0x18) < 0) {\n      permissionCode = 0x40;\n      goto LAB_08009ea4;\n    }\n  }\n  else {\n    *isExecutable = (uint)((fileMode & 0xf000) == 0x2000);\n  }\n  permissionCode = 0x400;\nLAB_08009ea4:\n  *resultFlag = permissionCode;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009e64": "check_file_permissions_08009e64",
                "param_1": "fileDescriptor",
                "param_2": "fileInfo",
                "param_3": "resultFlag",
                "param_4": "isExecutable",
                "iVar1": "status",
                "uVar2": "permissionCode",
                "auStack_4c": "stackBuffer",
                "local_48": "fileMode"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_fstat_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009eac": {
            "entrypoint": "0x08009eac",
            "current_name": "decode_and_allocate_memory_08009eac",
            "code": "\nvoid decode_and_allocate_memory_08009eac(int context,int *buffer)\n\n{\n  ushort result;\n  int allocated_memory;\n  int context_copy;\n  int *buffer_copy;\n  \n  if (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x1e)) {\n    context_copy = context;\n    buffer_copy = buffer;\n    result = decode_buffer(context,buffer,&context_copy,&buffer_copy);\n    allocated_memory = allocate_memory(context,context_copy);\n    if (allocated_memory != 0) {\n      *(undefined4 *)(context + 0x28) = 0x8009cd1;\n      *buffer = allocated_memory;\n      *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x80;\n      buffer[4] = allocated_memory;\n      buffer[5] = context_copy;\n      if ((buffer_copy != (int *)0x0) &&\n         (allocated_memory = check_terminal(context,(int)*(short *)((int)buffer + 0xe)), allocated_memory != 0)) {\n        *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(buffer + 3) = result | *(ushort *)(buffer + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(buffer + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) & 0xfffc | 2;\n  }\n  *buffer = (int)buffer + 0x47;\n  buffer[4] = (int)buffer + 0x47;\n  buffer[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009eac": "decode_and_allocate_memory_08009eac",
                "param_1": "context",
                "param_2": "buffer",
                "uVar1": "result",
                "iVar2": "allocated_memory",
                "local_18": "context_copy",
                "local_14": "buffer_copy",
                "__swhatbuf_r": "decode_buffer",
                "_malloc_r": "allocate_memory",
                "_isatty_r": "check_terminal"
            },
            "calling": [
                "__swsetup_r"
            ],
            "called": [
                "__swhatbuf_r",
                "_isatty_r",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009f2c": {
            "entrypoint": "0x08009f2c",
            "current_name": "find_byte_in_memory_08009f2c",
            "code": "\nvoid * find_byte_in_memory_08009f2c(void *memory_address,int byte_to_find,size_t memory_size)\n\n{\n  byte *current_byte;\n  byte *next_byte;\n  \n  current_byte = (byte *)memory_address;\n  do {\n    next_byte = current_byte;\n    if (next_byte == (byte *)(memory_size + (int)memory_address)) {\n      return (void *)0x0;\n    }\n    current_byte = next_byte + 1;\n  } while ((uint)*next_byte != (byte_to_find & 0xffU));\n  return next_byte;\n}\n\n",
            "renaming": {
                "FUN_08009f2c": "find_byte_in_memory_08009f2c",
                "__s": "memory_address",
                "__c": "byte_to_find",
                "__n": "memory_size",
                "pbVar1": "current_byte",
                "pbVar2": "next_byte"
            },
            "calling": [
                "_printf_i",
                "_vfiprintf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009f48": {
            "entrypoint": "0x08009f48",
            "current_name": "FUNC_08009f48",
            "code": "\nvoid FUNC_08009f48(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009f48": "FUNC_08009f48"
            },
            "calling": [
                "_free_r",
                "_malloc_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009f4a": {
            "entrypoint": "0x08009f4a",
            "current_name": "FUNC_08009f4a",
            "code": "\nvoid FUNC_08009f4a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009f4a": "FUNC_08009f4a"
            },
            "calling": [
                "_free_r",
                "_malloc_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009f4c": {
            "entrypoint": "0x08009f4c",
            "current_name": "copy_and_realloc_08009f4c",
            "code": "\nvoid * copy_and_realloc_08009f4c(undefined4 context,void *src,uint size,undefined4 additional_size)\n\n{\n  void *dest;\n  uint usable_size;\n  \n  if (src != (void *)0x0) {\n    if (size == 0) {\n      _free_r();\n      dest = (void *)0x0;\n    }\n    else {\n      usable_size = _malloc_usable_size_r();\n      dest = src;\n      if ((usable_size < size) && (dest = (void *)_malloc_r(context,size), dest != (void *)0x0))\n      {\n        memcpy(dest,src,size);\n        _free_r(context,src);\n      }\n    }\n    return dest;\n  }\n  dest = (void *)_malloc_r(context,size,size,additional_size);\n  return dest;\n}\n\n",
            "renaming": {
                "FUN_08009f4c": "copy_and_realloc_08009f4c",
                "param_1": "context",
                "param_2": "src",
                "param_3": "size",
                "param_4": "additional_size",
                "pvVar1": "dest",
                "uVar2": "usable_size"
            },
            "calling": [
                "realloc"
            ],
            "called": [
                "_free_r",
                "_malloc_usable_size_r",
                "_malloc_r",
                "memcpy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009f98": {
            "entrypoint": "0x08009f98",
            "current_name": "execute_command_08009f98",
            "code": "\nundefined4 executeCommand_08009f98(undefined4 *status,uint command,undefined4 param_3,undefined4 param_4)\n\n{\n  __pid_t processId;\n  undefined4 result;\n  int commandList;\n  code *funcPtr;\n  \n  if (0x1f < command) {\n    *status = 0x16;\n    return 0xffffffff;\n  }\n  commandList = status[0x11];\n  if ((commandList != 0) && (funcPtr = *(code **)(commandList + command * 4), funcPtr != (code *)0x0)) {\n    if (funcPtr != (code *)0x1) {\n      if (funcPtr == (code *)0xffffffff) {\n        *status = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(commandList + command * 4) = 0;\n      (*funcPtr)(command);\n    }\n    return 0;\n  }\n  processId = _getpid_r();\n  result = _kill_r(status,processId,command,param_4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009f98": "execute_command_08009f98",
                "param_1": "status",
                "param_2": "command",
                "_Var1": "processId",
                "uVar2": "result",
                "iVar3": "commandList",
                "pcVar4": "funcPtr"
            },
            "calling": [
                "raise"
            ],
            "called": [
                "_kill_r",
                "_getpid_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009fe8": {
            "entrypoint": "0x08009fe8",
            "current_name": "handle_signal_08009fe8",
            "code": "\nint handle_signal_08009fe8(int signal_id)\n\n{\n  int result;\n  \n  result = _raise_r(_impure_ptr,signal_id);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009fe8": "handle_signal_08009fe8",
                "__sig": "signal_id",
                "iVar1": "result"
            },
            "calling": [
                "abort"
            ],
            "called": [
                "_raise_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009ff8": {
            "entrypoint": "0x08009ff8",
            "current_name": "kill_process_08009ff8",
            "code": "\nvoid kill_process_08009ff8(int *error_code,__pid_t pid,int signal)\n\n{\n  int result;\n  \n  error_number = 0;\n  result = _kill(pid,signal);\n  if ((result == -1) && (error_number != 0)) {\n    *error_code = error_number;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009ff8": "kill_process_08009ff8",
                "param_1": "error_code",
                "param_2": "pid",
                "param_3": "signal",
                "errno": "error_number",
                "iVar1": "result"
            },
            "calling": [
                "_raise_r"
            ],
            "called": [
                "_kill"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a01c": {
            "entrypoint": "0x0800a01c",
            "current_name": "FUN_0800a01c",
            "code": "\n\n\n__pid_t _getpid(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {},
            "calling": [
                "_raise_r"
            ],
            "called": [
                "_getpid"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a020": {
            "entrypoint": "0x0800a020",
            "current_name": "update_data_0800a020",
            "code": "\nvoid updateData_0800a020(undefined4 fileDescriptor,int dataPtr)\n\n{\n  int readResult;\n  uint updatedValue;\n  bool hasReadSuccess;\n  \n  readResult = _read_r(fileDescriptor,(int)*(short *)(dataPtr + 0xe));\n  hasReadSuccess = -1 < readResult;\n  if (hasReadSuccess) {\n    updatedValue = *(int *)(dataPtr + 0x54) + readResult;\n  }\n  else {\n    updatedValue = *(ushort *)(dataPtr + 0xc) & 0xffffefff;\n  }\n  if (hasReadSuccess) {\n    *(uint *)(dataPtr + 0x54) = updatedValue;\n  }\n  if (!hasReadSuccess) {\n    *(short *)(dataPtr + 0xc) = (short)updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a020": "update_data_0800a020",
                "param_1": "fileDescriptor",
                "param_2": "dataPtr",
                "iVar1": "readResult",
                "uVar2": "updatedValue",
                "bVar3": "hasReadSuccess"
            },
            "calling": [],
            "called": [
                "_read_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a042": {
            "entrypoint": "0x0800a042",
            "current_name": "update_file_and_write_0800a042",
            "code": "\nvoid updateFileAndWrite_0800a042(undefined4 fileDescriptor,int bufferPointer,undefined4 dataPointer,undefined4 dataSize)\n\n{\n  if ((int)((uint)*(unsignedShort *)(bufferPointer + 0xc) << 0x17) < 0) {\n    _lseek_r(fileDescriptor,(int)*(short *)(bufferPointer + 0xe),0,2);\n  }\n  *(unsignedShort *)(bufferPointer + 0xc) = *(unsignedShort *)(bufferPointer + 0xc) & 0xefff;\n  _write_r(fileDescriptor,(int)*(short *)(bufferPointer + 0xe),dataPointer,dataSize);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a042": "update_file_and_write_0800a042",
                "param_1": "fileDescriptor",
                "param_2": "bufferPointer",
                "param_3": "dataPointer",
                "param_4": "dataSize",
                "ushort": "unsignedShort"
            },
            "calling": [],
            "called": [
                "_lseek_r",
                "_write_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a07a": {
            "entrypoint": "0x0800a07a",
            "current_name": "update_file_seek_status_0800a07a",
            "code": "\nvoid updateFileSeekStatus_0800a07a(undefined4 fileDescriptor,int dataBuffer)\n\n{\n  int seekResult;\n  ushort newStatus;\n  bool isSeekFailed;\n  \n  seekResult = _lseek_r(fileDescriptor,(int)*(short *)(dataBuffer + 0xe));\n  isSeekFailed = seekResult == -1;\n  if (isSeekFailed) {\n    newStatus = *(ushort *)(dataBuffer + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(dataBuffer + 0x54) = seekResult;\n    newStatus = *(ushort *)(dataBuffer + 0xc) | 0x1000;\n  }\n  if (isSeekFailed) {\n    *(ushort *)(dataBuffer + 0xc) = newStatus;\n  }\n  if (!isSeekFailed) {\n    *(ushort *)(dataBuffer + 0xc) = newStatus;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a07a": "update_file_seek_status_0800a07a",
                "param_1": "fileDescriptor",
                "param_2": "dataBuffer",
                "iVar1": "seekResult",
                "uVar2": "newStatus",
                "bVar3": "isSeekFailed"
            },
            "calling": [],
            "called": [
                "_lseek_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a09e": {
            "entrypoint": "0x0800a09e",
            "current_name": "close_file_descriptor_0800a09e",
            "code": "\nvoid closeFileDescriptor_0800a09e(undefined4 param_1,int bufferAddress)\n\n{\n  _close_r(param_1,(int)*(short *)(bufferAddress + 0xe));\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a09e": "close_file_descriptor_0800a09e",
                "param_2": "bufferAddress"
            },
            "calling": [],
            "called": [
                "_close_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a0a8": {
            "entrypoint": "0x0800a0a8",
            "current_name": "write_to_stream_0800a0a8",
            "code": "\nvoid writeToStream_0800a0a8(int *errorCode,int fileDescriptor,char *data,int dataSize)\n\n{\n  int writeResult;\n  \n  errorNumber = 0;\n  writeResult = _write(fileDescriptor,data,dataSize);\n  if ((writeResult == -1) && (errorNumber != 0)) {\n    *errorCode = errorNumber;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a0a8": "write_to_stream_0800a0a8",
                "param_1": "errorCode",
                "param_2": "fileDescriptor",
                "param_3": "data",
                "param_4": "dataSize",
                "errno": "errorNumber",
                "iVar1": "writeResult"
            },
            "calling": [
                "__swrite"
            ],
            "called": [
                "_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a0cc": {
            "entrypoint": "0x0800a0cc",
            "current_name": "close_file_and_handle_error_0800a0cc",
            "code": "\nvoid closeFileAndHandleError_0800a0cc(int *errorCode,int fileDescriptor)\n\n{\n  int result;\n  \n  errorNumber = 0;\n  result = _close(fileDescriptor);\n  if ((result == -1) && (errorNumber != 0)) {\n    *errorCode = errorNumber;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a0cc": "close_file_and_handle_error_0800a0cc",
                "param_1": "errorCode",
                "param_2": "fileDescriptor",
                "errno": "errorNumber",
                "iVar1": "result"
            },
            "calling": [
                "__sclose"
            ],
            "called": [
                "_close"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a0ec": {
            "entrypoint": "0x0800a0ec",
            "current_name": "get_file_status_info_0800a0ec",
            "code": "\nvoid get_file_status_info_0800a0ec(int *error_code,int file_descriptor,stat *file_status_info)\n\n{\n  int status_check_result;\n  \n  errno = 0;\n  status_check_result = _fstat(file_descriptor,file_status_info);\n  if ((status_check_result == -1) && (errno != 0)) {\n    *error_code = errno;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a0ec": "get_file_status_info_0800a0ec",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "file_status_info",
                "iVar1": "status_check_result"
            },
            "calling": [
                "__swhatbuf_r"
            ],
            "called": [
                "_fstat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a110": {
            "entrypoint": "0x0800a110",
            "current_name": "check_terminal_status_0800a110",
            "code": "\nvoid checkTerminalStatus_0800a110(int *errorCode,int fileDescriptor)\n\n{\n  int isTTY;\n  \n  errorNumber = 0;\n  isTTY = _isatty(fileDescriptor);\n  if ((isTTY == -1) && (errorNumber != 0)) {\n    *errorCode = errorNumber;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a110": "check_terminal_status_0800a110",
                "param_1": "errorCode",
                "param_2": "fileDescriptor",
                "iVar1": "isTTY",
                "errno": "errorNumber"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_isatty"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a130": {
            "entrypoint": "0x0800a130",
            "current_name": "change_file_pointer_position_0800a130",
            "code": "\nvoid changeFilePointerPosition_0800a130(int *errorCode,int fileDescriptor,__off_t offset,int whence)\n\n{\n  __off_t newPosition;\n  \n  errno = 0;\n  newPosition = _lseek(fileDescriptor,offset,whence);\n  if ((newPosition == -1) && (errno != 0)) {\n    *errorCode = errno;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a130": "change_file_pointer_position_0800a130",
                "param_1": "errorCode",
                "param_2": "fileDescriptor",
                "param_3": "offset",
                "param_4": "whence",
                "_Var1": "newPosition"
            },
            "calling": [
                "__sseek",
                "__swrite"
            ],
            "called": [
                "_lseek"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a154": {
            "entrypoint": "0x0800a154",
            "current_name": "calculate_sum_0800a154",
            "code": "\nint calculateSum_0800a154(undefined4 param1,int param2)\n\n{\n  int sum;\n  \n  sum = *(int *)(param2 + -4) + -4;\n  if (*(int *)(param2 + -4) < 0) {\n    sum = sum + *(int *)(param2 + sum);\n  }\n  return sum;\n}\n\n",
            "renaming": {
                "FUN_0800a154": "calculate_sum_0800a154",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "sum"
            },
            "calling": [
                "_realloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a168": {
            "entrypoint": "0x0800a168",
            "current_name": "read_from_file_0800a168",
            "code": "\nvoid readFromFile_0800a168(int *errorCode,int fileDescriptor,char *buffer,int size)\n\n{\n  int bytesRead;\n  \n  errno = 0;\n  bytesRead = _read(fileDescriptor,buffer,size);\n  if ((bytesRead == -1) && (errno != 0)) {\n    *errorCode = errno;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a168": "read_from_file_0800a168",
                "param_1": "errorCode",
                "param_2": "fileDescriptor",
                "param_3": "buffer",
                "param_4": "size",
                "iVar1": "bytesRead"
            },
            "calling": [
                "__sread"
            ],
            "called": [
                "_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a18c": {
            "entrypoint": "0x0800a18c",
            "current_name": "terminate_program_0800a18c",
            "code": "\n\n/* std::__throw_bad_function_call() */\n\nvoid std::terminate_program_0800a18c(void)\n\n{\n                    \n  end_execution();\n}\n\n",
            "renaming": {
                "abort": "end_execution",
                "FUN_0800a18c": "terminate_program_0800a18c"
            },
            "calling": [
                "operator()"
            ],
            "called": [
                "abort"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a194": {
            "entrypoint": "0x0800a194",
            "current_name": "initialize_locale_data_0800a194",
            "code": "\n/* std::ctype_byname<char>::ctype_byname(std::basic_string<char, std::char_traits<char>,\n   std::allocator<char> > const&, unsigned int) */\n\nvoid std::ctype_byname<char>::initializeLocaleData_0800a194(void)\n\n{\n  if (-1 < moneypunct<char,false>::id << 0x1f) {\n    moneypunct<char,false>::id = 1;\n  }\n  if (-1 < moneypunct<char,true>::id << 0x1f) {\n    moneypunct<char,true>::id = 1;\n  }\n  if (-1 < money_get<char,std::istreambuf_iterator<char,std::char_traits<char>>>::id << 0x1f) {\n    money_get<char,std::istreambuf_iterator<char,std::char_traits<char>>>::id = 1;\n  }\n  if (-1 < money_put<char,std::ostreambuf_iterator<char,std::char_traits<char>>>::id << 0x1f) {\n    money_put<char,std::ostreambuf_iterator<char,std::char_traits<char>>>::id = 1;\n  }\n  if (-1 < numpunct<char>::id << 0x1f) {\n    numpunct<char>::id = 1;\n  }\n  if (-1 < num_get<char,std::istreambuf_iterator<char,std::char_traits<char>>>::id << 0x1f) {\n    num_get<char,std::istreambuf_iterator<char,std::char_traits<char>>>::id = 1;\n  }\n  if (-1 < num_put<char,std::ostreambuf_iterator<char,std::char_traits<char>>>::id << 0x1f) {\n    num_put<char,std::ostreambuf_iterator<char,std::char_traits<char>>>::id = 1;\n  }\n  if (-1 < __timepunct<char>::id << 0x1f) {\n    __timepunct<char>::id = 1;\n  }\n  if (-1 < time_put<char,std::ostreambuf_iterator<char,std::char_traits<char>>>::id << 0x1f) {\n    time_put<char,std::ostreambuf_iterator<char,std::char_traits<char>>>::id = 1;\n  }\n  if (-1 < time_get<char,std::istreambuf_iterator<char,std::char_traits<char>>>::id << 0x1f) {\n    time_get<char,std::istreambuf_iterator<char,std::char_traits<char>>>::id = 1;\n  }\n  if (-1 < messages<char>::id << 0x1f) {\n    messages<char>::id = 1;\n  }\n  if (-1 < collate<char>::id << 0x1f) {\n    collate<char>::id = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a194": "initialize_locale_data_0800a194"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a258": {
            "entrypoint": "0x0800a258",
            "current_name": "initialize_ctype_byname_0800a258",
            "code": "\n/* std::ctype_byname<wchar_t>::ctype_byname(std::basic_string<char, std::char_traits<char>,\n   std::allocator<char> > const&, unsigned int) */\n\nvoid std::ctype_byname<wchar_t>::initializeCtypeByname_0800a258(void)\n\n{\n  if (-1 < moneypunct<wchar_t,false>::id << 0x1f) {\n    moneypunct<wchar_t,false>::id = 1;\n  }\n  if (-1 < moneypunct<wchar_t,true>::id << 0x1f) {\n    moneypunct<wchar_t,true>::id = 1;\n  }\n  if (-1 < money_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id <<\n           0x1f) {\n    money_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id = 1;\n  }\n  if (-1 < money_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id <<\n           0x1f) {\n    money_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id = 1;\n  }\n  if (-1 < numpunct<wchar_t>::id << 0x1f) {\n    numpunct<wchar_t>::id = 1;\n  }\n  if (-1 < num_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id << 0x1f)\n  {\n    num_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id = 1;\n  }\n  if (-1 < num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id << 0x1f)\n  {\n    num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id = 1;\n  }\n  if (-1 < __timepunct<wchar_t>::id << 0x1f) {\n    __timepunct<wchar_t>::id = 1;\n  }\n  if (-1 < time_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id << 0x1f\n     ) {\n    time_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id = 1;\n  }\n  if (-1 < time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id << 0x1f\n     ) {\n    time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id = 1;\n  }\n  if (-1 < messages<wchar_t>::id << 0x1f) {\n    messages<wchar_t>::id = 1;\n  }\n  if (-1 < collate<wchar_t>::id << 0x1f) {\n    collate<wchar_t>::id = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a258": "initialize_ctype_byname_0800a258"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a31c": {
            "entrypoint": "0x0800a31c",
            "current_name": "initialize_locale_0800a31c",
            "code": "\n/* std::ctype_byname<wchar_t>::ctype_byname(std::__cxx11::basic_string<char, std::char_traits<char>,\n   std::allocator<char> > const&, unsigned int) */\n\nvoid std::ctype_byname<wchar_t>::initializeLocale_0800a31c(void)\n\n{\n  if (-1 < __cxx11::moneypunct<wchar_t,false>::id << 0x1f) {\n    __cxx11::moneypunct<wchar_t,false>::id = 1;\n  }\n  if (-1 < __cxx11::moneypunct<wchar_t,true>::id << 0x1f) {\n    __cxx11::moneypunct<wchar_t,true>::id = 1;\n  }\n  if (-1 < __cxx11::money_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::\n           id << 0x1f) {\n    __cxx11::money_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id = 1;\n  }\n  if (-1 < __cxx11::money_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::\n           id << 0x1f) {\n    __cxx11::money_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id = 1;\n  }\n  if (-1 < __cxx11::numpunct<wchar_t>::id << 0x1f) {\n    __cxx11::numpunct<wchar_t>::id = 1;\n  }\n  if (-1 < __cxx11::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::\n           id << 0x1f) {\n    __cxx11::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id = 1;\n  }\n  if (-1 < __cxx11::messages<wchar_t>::id << 0x1f) {\n    __cxx11::messages<wchar_t>::id = 1;\n  }\n  if (-1 < __cxx11::collate<wchar_t>::id << 0x1f) {\n    __cxx11::collate<wchar_t>::id = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a31c": "initialize_locale_0800a31c"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a3a0": {
            "entrypoint": "0x0800a3a0",
            "current_name": "set_ctype_attributes_0800a3a0",
            "code": "\n/* std::ctype_byname<char>::ctype_byname(std::__cxx11::basic_string<char, std::char_traits<char>,\n   std::allocator<char> > const&, unsigned int) */\n\nvoid std::ctype_byname<char>::setCtypeAttributes_0800a3a0(void)\n\n{\n  if (-1 < __cxx11::moneypunct<char,false>::id << 0x1f) {\n    __cxx11::moneypunct<char,false>::id = 1;\n  }\n  if (-1 < __cxx11::moneypunct<char,true>::id << 0x1f) {\n    __cxx11::moneypunct<char,true>::id = 1;\n  }\n  if (-1 < __cxx11::money_get<char,std::istreambuf_iterator<char,std::char_traits<char>>>::id <<\n           0x1f) {\n    __cxx11::money_get<char,std::istreambuf_iterator<char,std::char_traits<char>>>::id = 1;\n  }\n  if (-1 < __cxx11::money_put<char,std::ostreambuf_iterator<char,std::char_traits<char>>>::id <<\n           0x1f) {\n    __cxx11::money_put<char,std::ostreambuf_iterator<char,std::char_traits<char>>>::id = 1;\n  }\n  if (-1 < __cxx11::numpunct<char>::id << 0x1f) {\n    __cxx11::numpunct<char>::id = 1;\n  }\n  if (-1 < __cxx11::time_get<char,std::istreambuf_iterator<char,std::char_traits<char>>>::id << 0x1f\n     ) {\n    __cxx11::time_get<char,std::istreambuf_iterator<char,std::char_traits<char>>>::id = 1;\n  }\n  if (-1 < __cxx11::messages<char>::id << 0x1f) {\n    __cxx11::messages<char>::id = 1;\n  }\n  if (-1 < __cxx11::collate<char>::id << 0x1f) {\n    __cxx11::collate<char>::id = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a3a0": "set_ctype_attributes_0800a3a0"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a424": {
            "entrypoint": "0x0800a424",
            "current_name": "FUNC_0800a424",
            "code": "\nvoid FUNC_0800a424(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a424": "FUNC_0800a424"
            },
            "calling": [
                "__do_global_dtors_aux",
                "__libc_init_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800a430": {
            "entrypoint": "0x0800a430",
            "current_name": "FUNC_0800a430",
            "code": "\nvoid FUNC_0800a430(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a430": "FUNC_0800a430"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 235928,
    "layers": [
        [
            "FUN_0800010c",
            "FUN_08000178",
            "FUN_08000188",
            "FUN_0800018c",
            "FUN_080001a8",
            "FUN_08000214",
            "FUN_080002ec",
            "FUN_08000488",
            "FUN_080004d4",
            "FUN_08000500",
            "FUN_08000588",
            "FUN_080005e0",
            "FUN_080005f8",
            "FUN_08000a64",
            "FUN_08000aec",
            "FUN_08000be8",
            "FUN_08000c18",
            "FUN_08000ef8",
            "FUN_08001b48",
            "FUN_08001be8",
            "FUN_08001bf8",
            "FUN_08001c08",
            "FUN_08001c18",
            "FUN_08001cd0",
            "FUN_080022f8",
            "FUN_08002400",
            "FUN_0800242c",
            "FUN_08002444",
            "FUN_08002578",
            "FUN_08002580",
            "FUN_080025ac",
            "FUN_08002634",
            "FUN_08002644",
            "FUN_0800267c",
            "FUN_080026b0",
            "FUN_080026f8",
            "FUN_0800270c",
            "FUN_08002720",
            "FUN_0800274c",
            "FUN_08002774",
            "FUN_08002798",
            "FUN_080027f0",
            "FUN_0800288c",
            "FUN_0800291c",
            "FUN_08002948",
            "FUN_08002968",
            "FUN_08002a1c",
            "FUN_08002a26",
            "FUN_08002a30",
            "FUN_08002a58",
            "FUN_08002ac0",
            "FUN_08002acc",
            "FUN_08002b00",
            "FUN_08002b68",
            "FUN_08002c00",
            "FUN_08002c14",
            "FUN_08002c1e",
            "FUN_08002c2c",
            "FUN_08002c40",
            "FUN_08002c54",
            "FUN_08002c68",
            "FUN_08002c7c",
            "FUN_08002c90",
            "FUN_08002ca4",
            "FUN_08002cb8",
            "FUN_08002cd0",
            "FUN_08002ce0",
            "FUN_08002dbc",
            "FUN_08002ddc",
            "FUN_08002dea",
            "FUN_08002df6",
            "FUN_08002e1a",
            "FUN_08002e26",
            "FUN_08002e44",
            "FUN_08002ec4",
            "FUN_08002ed2",
            "FUN_08002ef2",
            "FUN_08002efe",
            "FUN_08002f0a",
            "FUN_08002f14",
            "FUN_08002f1e",
            "FUN_08002f2c",
            "FUN_08002f84",
            "FUN_08002f94",
            "FUN_08002fa0",
            "FUN_08002fa8",
            "FUN_08002fba",
            "FUN_08002fc2",
            "FUN_08002fca",
            "FUN_08003002",
            "FUN_08003048",
            "FUN_0800306c",
            "FUN_0800307a",
            "FUN_08003106",
            "FUN_0800314e",
            "FUN_08003154",
            "FUN_08003158",
            "FUN_0800319e",
            "FUN_080031ce",
            "FUN_0800322c",
            "FUN_0800325a",
            "FUN_080032a2",
            "FUN_080032bc",
            "FUN_08003306",
            "FUN_08003346",
            "FUN_08003350",
            "FUN_08003366",
            "FUN_08003370",
            "FUN_08003376",
            "FUN_080033a8",
            "FUN_080033cc",
            "FUN_0800344a",
            "FUN_08003474",
            "FUN_080035b8",
            "FUN_08003658",
            "FUN_080036a0",
            "FUN_080036a2",
            "FUN_080036ac",
            "FUN_080036d8",
            "FUN_08003724",
            "FUN_08003748",
            "FUN_08003760",
            "FUN_0800376c",
            "FUN_080038dc",
            "FUN_080038e4",
            "FUN_08003a1c",
            "FUN_08003a20",
            "FUN_08003aa0",
            "FUN_08003b8c",
            "FUN_08003bd8",
            "FUN_08003ce8",
            "FUN_08003de4",
            "FUN_08003e20",
            "FUN_08003f0c",
            "FUN_08003f30",
            "FUN_08003f94",
            "FUN_08003fb0",
            "FUN_08003fd8",
            "FUN_08004004",
            "FUN_08004024",
            "FUN_08004046",
            "FUN_08004050",
            "FUN_080040e8",
            "FUN_080042d4",
            "FUN_080042e2",
            "FUN_080042f0",
            "FUN_0800430c",
            "FUN_08004396",
            "FUN_080043a2",
            "FUN_0800457c",
            "FUN_0800459c",
            "FUN_080045c0",
            "FUN_08004728",
            "FUN_080047f4",
            "FUN_080048c8",
            "FUN_08004954",
            "FUN_080049e0",
            "FUN_08004a24",
            "FUN_08004a76",
            "FUN_08004ac2",
            "FUN_08004aec",
            "FUN_08004b82",
            "FUN_08004ccc",
            "FUN_08004d6c",
            "FUN_08004e3c",
            "FUN_08004f3c",
            "FUN_08005084",
            "FUN_08005188",
            "FUN_080052f0",
            "FUN_080053cc",
            "FUN_0800542a",
            "FUN_08005430",
            "FUN_08005434",
            "FUN_08005460",
            "FUN_08005840",
            "FUN_080058ac",
            "FUN_08005a1c",
            "FUN_08005a28",
            "FUN_08005a48",
            "FUN_08005a68",
            "FUN_08005aa4",
            "FUN_08005bb8",
            "FUN_08005cb4",
            "FUN_08005cec",
            "FUN_08005d48",
            "FUN_08005dac",
            "FUN_08005df4",
            "FUN_08005e2e",
            "FUN_08005e6e",
            "FUN_08005fe8",
            "FUN_08006060",
            "FUN_08006092",
            "FUN_080060c4",
            "FUN_08006128",
            "FUN_08006186",
            "FUN_08006262",
            "FUN_08006280",
            "FUN_080062f4",
            "FUN_08006390",
            "FUN_080063c0",
            "FUN_08006420",
            "FUN_0800643c",
            "FUN_08006460",
            "FUN_080064b0",
            "FUN_080064cc",
            "FUN_08006538",
            "FUN_080066e8",
            "FUN_0800674e",
            "FUN_080067ac",
            "FUN_0800688e",
            "FUN_080068d6",
            "FUN_08006932",
            "FUN_0800694c",
            "FUN_080069ec",
            "FUN_08006b0c",
            "FUN_08006b1c",
            "FUN_08006b28",
            "FUN_08006b3e",
            "FUN_08006b5c",
            "FUN_08006b7c",
            "FUN_08006bb8",
            "FUN_08006c60",
            "FUN_08006c7c",
            "FUN_08006ca8",
            "FUN_08006d24",
            "FUN_08006d80",
            "FUN_08006e68",
            "FUN_08007110",
            "FUN_08007118",
            "FUN_080071e4",
            "FUN_0800723c",
            "FUN_08007246",
            "FUN_08007258",
            "FUN_080072d8",
            "FUN_080072f0",
            "FUN_080072fa",
            "FUN_08007306",
            "FUN_08007320",
            "FUN_08007332",
            "FUN_0800734a",
            "FUN_0800735a",
            "FUN_08007376",
            "FUN_0800738a",
            "FUN_080073ae",
            "FUN_080073c0",
            "FUN_080073d8",
            "FUN_080073e8",
            "FUN_080073ec",
            "FUN_08007438",
            "FUN_080074e0",
            "FUN_08007544",
            "FUN_08007594",
            "FUN_080075dc",
            "FUN_08007648",
            "FUN_080076e0",
            "FUN_08007708",
            "FUN_08007710",
            "FUN_08007718",
            "FUN_0800771c",
            "FUN_08007736",
            "FUN_08007744",
            "FUN_0800774a",
            "FUN_08007750",
            "FUN_08007760",
            "FUN_08007774",
            "FUN_08007788",
            "FUN_0800779c",
            "FUN_080077b0",
            "FUN_08007e74",
            "FUN_08007ede",
            "FUN_08007f0e",
            "FUN_08007f78",
            "FUN_08007f7c",
            "FUN_08007f8e",
            "FUN_08007fa0",
            "FUN_08007ff0",
            "FUN_08008020",
            "FUN_08008038",
            "FUN_08008048",
            "FUN_08008058",
            "FUN_08008068",
            "FUN_08008078",
            "FUN_080084b0",
            "FUN_08008500",
            "FUN_080085b8",
            "FUN_080085dc",
            "FUN_08008600",
            "FUN_0800863c",
            "FUN_08008694",
            "FUN_080086e8",
            "FUN_0800870c",
            "FUN_08008730",
            "FUN_0800877c",
            "FUN_080087bc",
            "FUN_080087d4",
            "FUN_080087ec",
            "FUN_08008804",
            "FUN_08008840",
            "FUN_08008846",
            "FUN_08008850",
            "FUN_08008854",
            "FUN_08008858",
            "FUN_0800885c",
            "FUN_08008868",
            "FUN_0800886c",
            "FUN_0800887c",
            "FUN_08008880",
            "FUN_080088e0",
            "FUN_08008990",
            "FUN_08008a24",
            "FUN_08008a6c",
            "FUN_08008abc",
            "FUN_08008ac6",
            "FUN_08008afa",
            "FUN_08008b0e",
            "FUN_08008b2a",
            "FUN_08008b52",
            "FUN_08008b66",
            "FUN_08008ba4",
            "FUN_08008c20",
            "FUN_08008c44",
            "FUN_08008d00",
            "FUN_08008d18",
            "FUN_08008d30",
            "FUN_08008d8c",
            "FUN_08008db0",
            "FUN_08008dbe",
            "FUN_08008df8",
            "FUN_08008e14",
            "FUN_08008e40",
            "FUN_08008e4e",
            "FUN_08008e72",
            "FUN_08008e7c",
            "FUN_08008ed6",
            "FUN_08008eec",
            "FUN_08008ef4",
            "FUN_08008f0e",
            "FUN_08008f1c",
            "FUN_08008f3c",
            "FUN_08008f50",
            "FUN_08008f78",
            "FUN_08009024",
            "FUN_0800902e",
            "FUN_08009038",
            "FUN_08009042",
            "FUN_0800904c",
            "FUN_08009056",
            "FUN_0800906c",
            "FUN_08009084",
            "FUN_08009094",
            "FUN_080090b4",
            "FUN_080090c2",
            "FUN_080090cc",
            "FUN_08009108",
            "FUN_08009124",
            "FUN_08009148",
            "FUN_08009190",
            "FUN_080091a0",
            "FUN_080091b0",
            "FUN_080091c6",
            "FUN_080091d8",
            "FUN_08009270",
            "FUN_0800932c",
            "FUN_08009358",
            "FUN_0800937c",
            "FUN_080095a8",
            "FUN_08009698",
            "FUN_080098d8",
            "FUN_08009908",
            "FUN_08009918",
            "FUN_08009938",
            "FUN_08009954",
            "FUN_0800997e",
            "FUN_080099a4",
            "FUN_080099dc",
            "FUN_08009a80",
            "FUN_08009b5c",
            "FUN_08009b6c",
            "FUN_08009c7c",
            "FUN_08009cd0",
            "FUN_08009cdc",
            "FUN_08009d24",
            "FUN_08009d50",
            "FUN_08009db0",
            "FUN_08009e28",
            "FUN_08009e64",
            "FUN_08009eac",
            "FUN_08009f2c",
            "FUN_08009f4c",
            "FUN_08009f98",
            "FUN_08009fe8",
            "FUN_08009ff8",
            "FUN_0800a020",
            "FUN_0800a042",
            "FUN_0800a07a",
            "FUN_0800a09e",
            "FUN_0800a0a8",
            "FUN_0800a0cc",
            "FUN_0800a0ec",
            "FUN_0800a110",
            "FUN_0800a130",
            "FUN_0800a154",
            "FUN_0800a168",
            "FUN_0800a18c",
            "FUN_0800a194",
            "FUN_0800a258",
            "FUN_0800a31c",
            "FUN_0800a3a0"
        ]
    ],
    "locked_functions": []
}