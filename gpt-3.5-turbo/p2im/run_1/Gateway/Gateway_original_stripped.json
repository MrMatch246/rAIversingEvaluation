{
    "functions": {
        "FUN_08007246": {
            "renaming": {
                "FUN_08007246": "tick_handler_08007246"
            },
            "code": "void tick_handler_08007246(void)\n{\n  HAL_IncTick();\n  HAL_SYSTICK_IRQHandler();\n  noOsSystickHandler();\n  return;\n}",
            "called": [
                "HAL_SYSTICK_IRQHandler",
                "noOsSystickHandler",
                "HAL_IncTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007246",
            "calling": [],
            "imported": false,
            "current_name": "tick_handler_08007246"
        },
        "FUN_0800a042": {
            "renaming": {
                "FUN_0800a042": "write_data_to_file_0800a042",
                "param_1": "file",
                "param_2": "data_pointer",
                "param_3": "buffer",
                "param_4": "size",
                "_lseek_r": "_lseek_r",
                "_write_r": "_write_r",
                "*(ushort *)(param_2 + 0xc)": "flag",
                "*(short *)(param_2 + 0xe)": "offset"
            },
            "code": "void write_data_to_file_0800a042(FILE* file, int data_pointer, void* buffer, size_t size) {\n  int offset = *(short*)(data_pointer + 0xe);\n  uint16_t flag = *(uint16_t*)(data_pointer + 0xc);\n  flag &= 0xefff;\n  if ((int)(flag << 0x17) < 0) {\n    _lseek_r(file, offset, 0, SEEK_END);\n  }\n  _write_r(file, offset, buffer, size);\n  return;\n}",
            "called": [
                "_write_r",
                "_lseek_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a042",
            "calling": [],
            "imported": false,
            "current_name": "write_data_to_file_0800a042"
        },
        "FUN_08008e4e": {
            "renaming": {
                "FUN_08008e4e": "print_data_08008e4e",
                "this": "print_instance",
                "buffer": "data_buffer",
                "size": "buffer_size",
                "pPVar1": "pPrint",
                "sVar2": "data_size"
            },
            "code": "size_t __thiscall print_data_08008e4e(Print *print_instance, uint8_t *data_buffer, size_t buffer_size) {\n  Print *pPrint;\n  size_t data_size = 0;\n  pPrint = print_instance;\n  while (true) {\n    if (buffer_size == 0) {\n      return data_size;\n    }\n    pPrint = (Print *)(**print_instance->_vptr_Print)(pPrint, (uint)*data_buffer);\n    if (pPrint == (Print *)0x0) {\n      break;\n    }\n    data_size = data_size + 1;\n    data_buffer = data_buffer + 1;\n    buffer_size = buffer_size - 1;\n  }\n  return data_size;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e4e",
            "calling": [],
            "imported": false,
            "current_name": "print_data_08008e4e"
        },
        "FUN_08008694": {
            "renaming": {
                "FUN_08008694": "transmit_data_08008694",
                "obj": "serial_obj",
                "callback": "callback_func",
                "bVar1": "current_index",
                "PTR_tx_callback_080086dc": "callback_ptr",
                "PTR_tx_callback_obj_080086e0": "obj_ptr",
                "PTR_uart_handlers_080086e4": "uart_handler_ptr"
            },
            "code": "void transmit_data_08008694(serial_t *serial_obj, _func_int_serial_t_ptr *callback_func) {\n  \n  if (serial_obj != NULL) {\n    uint8_t current_index = serial_obj->index;\n    _func_int_serial_t_ptr **PTR_tx_callback_080086dc = (_func_int_serial_t_ptr **)(PTR_tx_callback_080086dc + current_index * 4);\n    *PTR_tx_callback_080086dc = callback_func;\n    serial_t **PTR_tx_callback_obj_080086e0 = (serial_t **)(PTR_tx_callback_obj_080086e0 + current_index * 4);\n    *PTR_tx_callback_obj_080086e0 = serial_obj;\n    HAL_NVIC_SetPriority(serial_obj->irq, 0, 2);\n    HAL_NVIC_EnableIRQ(serial_obj->irq);\n    UART_HandleTypeDef **PTR_uart_handlers_080086e4 = (UART_HandleTypeDef **)(PTR_uart_handlers_080086e4 + current_index * 4);\n    HAL_UART_Transmit_IT(*PTR_uart_handlers_080086e4, serial_obj->tx_buff + serial_obj->tx_tail, 1);\n    return;\n  }\n  return;\n}",
            "called": [
                "HAL_UART_Transmit_IT",
                "HAL_NVIC_SetPriority",
                "HAL_NVIC_EnableIRQ"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008694",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "transmit_data_08008694"
        },
        "FUN_08002ce0": {
            "renaming": {
                "FUN_08002ce0::FUN_08002ce0": "initialize_firmata_parser",
                "this": "firmata_parser",
                "this_00": "parser",
                "FirmataMarshaller::FirmataMarshaller": "initialize_firmata_marshaller",
                "FirmataParser::FirmataParser": "initialize_firmata_parser_instance",
                "firmwareVersionCount": "firmware_version_count",
                "firmwareVersionVector": "firmware_version_vector",
                "blinkVersionDisabled": "blink_version_disabled",
                "attach": "attach_parser_message_handler",
                "0xe0": "SYSEX_START",
                "0x90": "ANALOG_MESSAGE",
                "0xc0": "REPORT_VERSION",
                "0xd0": "SERIAL_MESSAGE",
                "0xf4": "I2C_REQUEST_MESSAGE",
                "0xf5": "I2C_REPLY_MESSAGE",
                "'q'": "SYSEX_END",
                "0xf0": "SYSEX_MESSAGE",
                "'y'": "REPORT_FIRMWARE",
                "0xf9": "START_SYSEX",
                "0xff": "END_SYSEX",
                "parserBuffer": "parser_buffer",
                "DAT_08002d90": "SYSEX_START_MESSAGE_HANDLER",
                "DAT_08002d94": "ANALOG_MESSAGE_HANDLER",
                "DAT_08002d98": "REPORT_VERSION_HANDLER",
                "DAT_08002d9c": "SERIAL_MESSAGE_HANDLER",
                "DAT_08002da0": "I2C_REQUEST_MESSAGE_HANDLER",
                "DAT_08002da4": "I2C_REPLY_MESSAGE_HANDLER",
                "DAT_08002da8": "SYSEX_END_MESSAGE_HANDLER",
                "DAT_08002dac": "SYSEX_MESSAGE_HANDLER",
                "DAT_08002db0": "REPORT_FIRMWARE_MESSAGE_HANDLER",
                "DAT_08002db4": "START_SYSEX_MESSAGE_HANDLER",
                "DAT_08002db8": "END_SYSEX_MESSAGE_HANDLER",
                "FUN_08002ce0": "initialize_firmata_parser_08002ce0"
            },
            "code": "initialize_firmata_parser_08002ce0 * __thiscall firmata::initialize_firmata_parser_08002ce0(initialize_firmata_parser_08002ce0 *firmata_parser)\\n{\\n  FirmataParser *parser = &firmata_parser->parser;\\n  FirmataMarshaller::FirmataMarshaller(&firmata_parser->marshaller);\\n  FirmataParser::FirmataParser(parser, firmata_parser->parserBuffer, 0x40);\\n  firmata_parser->firmwareVersionCount = \"\\0\";\\n  firmata_parser->firmwareVersionVector = (byte *)0x0;\\n  firmata_parser->blinkVersionDisabled = false;\\n  FirmataParser::attach(parser,0xe0,DAT_08002d90,(void *)0x0);\\n  FirmataParser::attach(parser,0x90,DAT_08002d94,(void *)0x0);\\n  FirmataParser::attach(parser,0xc0,DAT_08002d98,(void *)0x0);\\n  FirmataParser::attach(parser,0xd0,DAT_08002d9c,(void *)0x0);\\n  FirmataParser::attach(parser,0xf4,DAT_08002da0,(void *)0x0);\\n  FirmataParser::attach(parser,0xf5,DAT_08002da4,(void *)0x0);\\n  FirmataParser::attach(parser,SYSEX_END,DAT_08002da8,(void *)0x0);\\n  FirmataParser::attach(parser,0xf0,DAT_08002dac,(void *)0x0);\\n  FirmataParser::attach(parser,REPORT_FIRMWARE,DAT_08002db0,firmata_parser);\\n  FirmataParser::attach(parser,START_SYSEX,DAT_08002db4,firmata_parser);\\n  FirmataParser::attach(parser,END_SYSEX,DAT_08002db8,(void *)0x0);\\n  return firmata_parser;\\n}",
            "called": [
                "attach",
                "attach",
                "FirmataMarshaller",
                "attach",
                "FirmataParser",
                "attach",
                "attach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ce0",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "initialize_firmata_parser_08002ce0"
        },
        "FUN_08005188": {
            "renaming": {
                "FUN_08005188": "i2c_handler_08005188",
                "hi2c": "handle",
                "pIVar1": "instance",
                "uVar2": "sr1",
                "uVar3": "cr2",
                "uVar4": "sr2",
                "DAT_080052e8": "sr1_mask_1",
                "DAT_080052d4": "sr1_mask_2",
                "DAT_080052dc": "sr2_mask",
                "DAT_080052ec": "sr1_mask_3",
                "DAT_080052e4": "sr1_mask_4",
                "DAT_080052e0": "sr1_mask_5",
                "DAT_080052d8": "sr1_mask_6"
            },
            "code": "void i2c_handler_08005188(I2C_HandleTypeDef_conflict *handle)\n{\n  I2C_TypeDef_conflict *instance;\n  uint32_t sr2;\n  uint32_t sr1;\n  uint32_t cr2;\n  instance = handle->Instance;\n  sr2 = instance->SR2;\n  sr1 = instance->SR1;\n  cr2 = instance->CR2;\n  if ((handle->Mode == HAL_I2C_MODE_MASTER) || (handle->Mode == HAL_I2C_MODE_MEM)) {\n    if (((sr1 & 0x10001) == 0) || ((cr2 & 0x200) == 0)) {\n      if (((sr1 & DAT_080052e8) == 0) || ((cr2 & 0x200) == 0)) {\n        if (((sr1 & DAT_080052d4) != 0) && ((cr2 & 0x200) != 0)) {\n          i2c_master_addr(handle);\n        }\n      }\n      else {\n        i2c_master_add10(handle);\n      }\n    }\n    else {\n      i2c_master_sb(handle);\n    }\n    if ((sr2 & DAT_080052dc) == 0) {\n      if ((((sr1 & DAT_080052ec) != 0) && ((cr2 & 0x400) != 0)) && ((sr1 & DAT_080052e4) == 0)) {\n        i2c_master_receive_rxne(handle);\n        return;\n      }\n      if (((sr1 & DAT_080052e4) != 0) && ((cr2 & 0x200) != 0)) {\n        i2c_master_receive_btf(handle);\n        return;\n      }\n    }\n    else {\n      if ((((sr1 & DAT_080052e0) != 0) && ((cr2 & 0x400) != 0)) && ((sr1 & DAT_080052e4) == 0)) {\n        i2c_master_transmit_txe(handle);\n        return;\n      }\n      if (((sr1 & DAT_080052e4) != 0) && ((cr2 & 0x200) != 0)) {\n        i2c_master_transmit_btf(handle);\n        return;\n      }\n    }\n  }\n  else {\n    if (((sr1 & DAT_080052d4) != 0) && ((cr2 & 0x200) != 0)) {\n      i2c_slave_addr(handle);\n      return;\n    }\n    if (((sr1 & DAT_080052d8) != 0) && ((cr2 & 0x200) != 0)) {\n      i2c_slave_stopf(handle);\n      return;\n    }\n    if ((sr2 & DAT_080052dc) == 0) {\n      if ((((sr1 & DAT_080052ec) != 0) && ((cr2 & 0x400) != 0)) && ((sr1 & DAT_080052e4) == 0)) {\n        i2c_slave_receive_rxne(handle);\n        return;\n      }\n      if (((sr1 & DAT_080052e4) != 0) && ((cr2 & 0x200) != 0)) {\n        i2c_slave_receive_btf(handle);\n      }\n    }\n    else {\n      if ((((sr1 & DAT_080052e0) != 0) && ((cr2 & 0x400) != 0)) && ((sr1 & DAT_080052e4) == 0)) {\n        i2c_slave_transmit_txe(handle);\n        return;\n      }\n      if (((sr1 & DAT_080052e4) != 0) && ((cr2 & 0x200) != 0)) {\n        i2c_slave_transmit_btf(handle);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "I2C_MasterTransmit_BTF",
                "I2C_Master_ADD10",
                "I2C_Master_ADDR",
                "I2C_MasterTransmit_TXE",
                "I2C_SlaveReceive_RXNE",
                "I2C_Master_SB",
                "I2C_SlaveReceive_BTF",
                "I2C_MasterReceive_BTF",
                "I2C_Slave_ADDR",
                "I2C_SlaveTransmit_TXE",
                "I2C_SlaveTransmit_BTF",
                "I2C_Slave_STOPF",
                "I2C_MasterReceive_RXNE"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005188",
            "calling": [
                "I2C1_EV_IRQHandler",
                "I2C2_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_handler_08005188"
        },
        "FUN_08007244": {
            "renaming": {
                "FUN_08007244": "do_nothing_08007244"
            },
            "code": "\nvoid do_nothing_08007244(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007244",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "do_nothing_08007244"
        },
        "FUN_08001bf8": {
            "renaming": {
                "FUN_08001bf8": "write_data_to_wire_08001bf8",
                "data": "data",
                "PTR_Wire_08001c04": "PTR_Wire_08001c04"
            },
            "code": "void write_data_to_wire_08001bf8(byte data)\n{\n  TwoWire::write((TwoWire *)PTR_Wire_08001c04, data);\n  return;\n}",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001bf8",
            "calling": [
                "sysexCallback",
                "readAndReportData"
            ],
            "imported": false,
            "current_name": "write_data_to_wire_08001bf8"
        },
        "FUN_080069ec": {
            "renaming": {
                "FUN_080069ec": "uart_handler_080069ec",
                "*huart": "*uart",
                "HVar1": "status",
                "uVar2": "cr1",
                "pUVar3": "instance",
                "uVar4": "cr3",
                "uVar5": "sr",
                "huart->Instance": "uart->Instance",
                "UART_Receive_IT": "UART_Receive_IT",
                "UART_Transmit_IT": "UART_Transmit_IT",
                "UART_EndTransmit_IT": "UART_EndTransmit_IT",
                "huart->ErrorCode": "error_code",
                "HAL_UART_ErrorCallback": "HAL_UART_ErrorCallback",
                "UART_EndRxTransfer": "UART_EndRxTransfer",
                "huart->hdmarx": "hdmarx",
                "DMA_HandleTypeDef_conflict": "DMA_HandleTypeDef_conflict",
                "DAT_08006b08": "DAT_08006b08"
            },
            "code": "void uart_handler_080069ec(UART_HandleTypeDef *uart)\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t sr;\n  uint32_t cr1;\n  uint32_t cr3;\n  uint32_t error_code;\n  DMA_HandleTypeDef_conflict *hdmarx;\n\n  USART_TypeDef *instance = uart->Instance;\n  sr = instance->SR;\n  cr1 = instance->CR1;\n  cr3 = instance->CR3;\n\n  if ((sr & 0xf) == 0 && (sr & 0x20) && (cr1 & 0x20)) {\n    UART_Receive_IT(uart);\n    return;\n  }\n\n  if ((sr & 0xf) == 0 || (cr3 & 1) == 0 && (cr1 & 0x120) == 0) {\n    if ((sr & 0x80) && (cr1 & 0x80)) {\n      UART_Transmit_IT(uart);\n      return;\n    }\n    if ((sr & 0x40) && (cr1 & 0x40)) {\n      UART_EndTransmit_IT(uart);\n    }\n  } else {\n    if ((sr & 1) && (cr1 & 0x100)) {\n      error_code |= 1;\n    }\n    if ((sr & 4) && (cr3 & 1)) {\n      error_code |= 2;\n    }\n    if ((sr & 2) && (cr3 & 1)) {\n      error_code |= 4;\n    }\n    if ((sr & 8) && (cr3 & 1)) {\n      error_code |= 8;\n    }\n    if (error_code) {\n      if ((sr & 0x20) && (cr1 & 0x20)) {\n        UART_Receive_IT(uart);\n      }\n      if (!(error_code & 8) && !(cr3 & 0x40)) {\n        HAL_UART_ErrorCallback(uart);\n        error_code = 0;\n        return;\n      }\n      UART_EndRxTransfer(uart);\n      if (!(cr3 & 0x40)) {\n        HAL_UART_ErrorCallback(uart);\n        return;\n      }\n      instance->CR3 &= 0xffffffbf;\n      hdmarx = uart->hdmarx;\n      if (!hdmarx) {\n        HAL_UART_ErrorCallback(uart);\n        return;\n      }\n      hdmarx->XferAbortCallback = DAT_08006b08;\n      status = HAL_DMA_Abort_IT(hdmarx);\n      if (status != HAL_OK) {\n        (*hdmarx->XferAbortCallback)(hdmarx);\n        return;\n      }\n    }\n  }\n}\n",
            "called": [
                "UART_EndTransmit_IT",
                "HAL_DMA_Abort_IT",
                "UART_EndRxTransfer",
                "UART_Receive_IT",
                "UART_Transmit_IT",
                "HAL_UART_ErrorCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069ec",
            "calling": [
                "USART2_IRQHandler",
                "USART1_IRQHandler",
                "USART3_IRQHandler"
            ],
            "imported": false,
            "current_name": "uart_handler_080069ec"
        },
        "FUN_0800a168": {
            "renaming": {
                "FUN_0800a168": "read_file_0800a168",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar1": "error_ptr",
                "iVar2": "read_result"
            },
            "code": "void read_file_0800a168(int *error_code, int file_descriptor, char *buffer, int buffer_size) {\n  undefined *error_ptr;\n  int read_result;\n  \n  error_ptr = PTR_errno_0800a188;\n  *(undefined4 *)PTR_errno_0800a188 = 0;\n  read_result = _read(file_descriptor, buffer, buffer_size);\n  if ((read_result == -1) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n  }\n  return;\n}",
            "called": [
                "_read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a168",
            "calling": [
                "__sread"
            ],
            "imported": false,
            "current_name": "read_file_0800a168"
        },
        "FUN_080067ac": {
            "renaming": {
                "FUN_080067ac": "transmit_data_080067ac",
                "*huart": "*uart_handle",
                "huart->gState": "uart_handle->gState",
                "HAL_UART_STATE_READY": "HAL_UART_STATE_READY",
                "pData": "data",
                "Size": "size",
                "Timeout": "timeout",
                "(uint8_t *)0x0": "NULL",
                "HAL_ERROR": "HAL_ERROR",
                "huart->Lock": "uart_handle->Lock",
                "HAL_LOCKED": "HAL_LOCKED",
                "HAL_BUSY": "HAL_BUSY",
                "huart->ErrorCode": "uart_handle->ErrorCode",
                "HAL_UART_STATE_BUSY_TX": "HAL_UART_STATE_BUSY_TX",
                "HAL_GetTick": "HAL_GetTick",
                "Tickstart": "tick_start",
                "huart->TxXferSize": "uart_handle->TxXferSize",
                "huart->TxXferCount": "uart_handle->TxXferCount",
                "UART_WORDLENGTH_9B": "UART_WORDLENGTH_9B",
                "UART_FLAG_TXE": "UART_FLAG_TXE",
                "RESET": "RESET",
                "*(uint16_t *)pData": "*(uint16_t *)(&uart_handle->Instance->DR)",
                "& 0x1ff": "& (uint8_t)0xFF",
                "pData = (uint8_t *)((int)pData + 2)": "data++",
                "pData = (uint8_t *)((int)pData + 1)": "data++",
                "uart_handle->Instance->DR": "uart_handle->Instance->DR",
                "(uint)*pData": "(*data++ & (uint8_t)0xFF)",
                "UART_FLAG_TC": "UART_FLAG_TC"
            },
            "code": "HAL_StatusTypeDef_conflict transmit_data_080067ac(UART_HandleTypeDef *uart_handle, uint8_t *data, uint16_t size, uint32_t timeout)\n{\n    HAL_StatusTypeDef_conflict status;\n    uint32_t tick_start;\n\n    if (uart_handle->gState != HAL_UART_STATE_READY) {\n        return HAL_BUSY;\n    }\n    if (data == NULL || size == 0 || uart_handle->Lock == HAL_LOCKED) {\n        return HAL_ERROR;\n    }\n    uart_handle->Lock = HAL_LOCKED;\n    uart_handle->ErrorCode = 0;\n    uart_handle->gState = HAL_UART_STATE_BUSY_TX;\n    tick_start = HAL_GetTick();\n    uart_handle->TxXferSize = size;\n    uart_handle->TxXferCount = size;\n\n    while (uart_handle->TxXferCount != 0) {\n        uart_handle->TxXferCount--;\n        if (uart_handle->Init.WordLength == UART_WORDLENGTH_9B) {\n            status = UART_WaitOnFlagUntilTimeout(uart_handle, UART_FLAG_TXE, RESET, tick_start, timeout);\n            if (status != HAL_OK) {\n                return HAL_TIMEOUT;\n            }\n            *(uint16_t *)(&uart_handle->Instance->DR) = (*data++ & (uint8_t)0xFF) | ((*(data++) << 8) & (uint8_t)0xFF00);\n        } else {\n            status = UART_WaitOnFlagUntilTimeout(uart_handle, UART_FLAG_TXE, RESET, tick_start, timeout);\n            if (status != HAL_OK) {\n                return HAL_TIMEOUT;\n            }\n            uart_handle->Instance->DR = (*data++ & (uint8_t)0xFF);\n        }\n    }\n    status = UART_WaitOnFlagUntilTimeout(uart_handle, UART_FLAG_TC, RESET, tick_start, timeout);\n    if (status == HAL_OK) {\n        uart_handle->gState = HAL_UART_STATE_READY;\n        uart_handle->Lock = HAL_UNLOCKED;\n    } else {\n        status = HAL_TIMEOUT;\n    }\n    return status;\n}",
            "called": [
                "HAL_GetTick",
                "UART_WaitOnFlagUntilTimeout"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080067ac",
            "calling": [
                "uart_debug_write"
            ],
            "imported": false,
            "current_name": "transmit_data_080067ac"
        },
        "FUN_0800735a": {
            "renaming": {
                "FUN_0800735a": "find_pin_function_0800735a",
                "pin": "searched_pin",
                "map": "pin_map",
                "PinName_conflict": "PinName",
                "PinMap_conflict": "PinMap",
                "NC": "not_connected",
                "uint32_t": "unsigned int"
            },
            "code": "uint32_t find_pin_function_0800735a(PinName_conflict pin, PinMap_conflict *pin_map) {\n  while (true) {\n    if (pin_map->pin == NC) {\n      return 0xffffffff;\n    }\n    if (pin_map->pin == pin) {\n      break;\n    }\n    pin_map++;\n  }\n  return pin_map->function;\n}",
            "called": [
                "pinmap_find_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800735a",
            "calling": [
                "pinmap_function",
                "pinmap_find_function"
            ],
            "imported": false,
            "current_name": "find_pin_function_0800735a"
        },
        "FUN_08008c20": {
            "renaming": {
                "FUN_08008c20": "initialize_buffers_08008c20",
                "ctx": "context",
                "_serial": "serial",
                "rx_buff": "rx_buffer",
                "_rx_buffer": "rx_buffer",
                "rx_head": "rx_head",
                "rx_tail": "rx_tail",
                "tx_buff": "tx_buffer",
                "_tx_buffer": "tx_buffer",
                "tx_head": "tx_head",
                "tx_tail": "tx_tail"
            },
            "code": "int __thiscall initialize_buffers_08008c20(HardwareSerial *this, EVP_PKEY_CTX *context)\n{\n  (this->_serial).rx_buff = this->_rx_buffer;\n  (this->_serial).rx_head = 0;\n  (this->_serial).rx_tail = 0;\n  (this->_serial).tx_buff = this->_tx_buffer;\n  (this->_serial).tx_head = 0;\n  (this->_serial).tx_tail = 0;\n  return (int)this;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008c20",
            "calling": [
                "HardwareSerial"
            ],
            "imported": false,
            "current_name": "initialize_buffers_08008c20"
        },
        "FUN_0800723c": {
            "renaming": {
                "FUN_0800723c": "get_current_tick_0800723c",
                "uVar1": "current_tick"
            },
            "code": "uint32_t get_current_tick_0800723c(void)\n{\n  uint32_t current_tick;\n  current_tick = HAL_GetTick();\n  return current_tick;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800723c",
            "calling": [
                "millis"
            ],
            "imported": false,
            "current_name": "get_current_tick_0800723c"
        },
        "FUN_080043a2": {
            "renaming": {
                "FUN_080043a2": "check_i2c_state_080043a2",
                "hi2c": "i2c_handle",
                "uVar1": "transfer_options",
                "pIVar2": "i2c_instance"
            },
            "code": "HAL_StatusTypeDef_conflict check_i2c_state_080043a2(I2C_HandleTypeDef_conflict *i2c_handle)\n{\n  uint32_t transfer_options = i2c_handle->XferOptions;\n  I2C_TypeDef_conflict *i2c_instance = i2c_handle->Instance;\n  uint32_t tmpreg;\n  uint32_t tmpreg_1;\n  uint32_t tmpreg_2;\n  uint32_t tmpreg_3;\n  uint32_t tmpreg_4;\n  uint32_t tmpreg_5;\n  uint32_t tmpreg_6;\n  uint32_t tmpreg_7;\n  uint32_t tmpreg_8;\n  uint32_t tmpreg_9;\n  uint32_t tmpreg_10;\n  \n  if ((i2c_handle->State == HAL_I2C_STATE_BUSY_RX) && ((i2c_handle->EventCount != 0) || (i2c_handle->Mode != HAL_I2C_MODE_MEM))) {\n    if ((i2c_handle->EventCount == 0) && ((i2c_handle->Init).AddressingMode == 0xc000)) {\n      i2c_instance->CR1 |= 0x100;\n      i2c_handle->EventCount += 1;\n    }\n    else {\n      if (i2c_handle->XferCount == 0) {\n        i2c_instance->CR1 |= 0x200;\n      }\n      else if (i2c_handle->XferCount == 1) {\n        if (transfer_options == 0xffff0000) {\n          i2c_instance->CR1 &= 0xfffffbff;\n          if ((i2c_instance->CR2 & 0x800) == 0) {\n            i2c_instance->CR1 |= 0x200;\n          }\n          else {\n            i2c_instance->CR1 &= 0xfffffbff;\n          }\n        }\n        else if (((transfer_options == 4) || (transfer_options == 8)) || (i2c_handle->PreviousState == 0x12)) {\n          i2c_instance->CR1 &= 0xfffffbff;\n          i2c_instance->CR1 |= 0x200;\n        }\n        else if (transfer_options == 2) {\n          i2c_instance->CR1 |= 0x400;\n        }\n        else {\n          i2c_instance->CR1 &= 0xfffffbff;\n        }\n      }\n      else if (i2c_handle->XferCount == 2) {\n        if (transfer_options == 2) {\n          i2c_instance->CR1 |= 0x400;\n        }\n        else {\n          i2c_instance->CR1 |= 0x800;\n          i2c_instance->CR1 &= 0xfffffbff;\n        }\n        if ((i2c_instance->CR2 & 0x800) != 0) {\n          i2c_instance->CR2 |= 0x1000;\n        }\n      }\n      else {\n        i2c_instance->CR1 |= 0x400;\n        if ((i2c_instance->CR2 & 0x800) != 0) {\n          i2c_instance->CR2 |= 0x1000;\n        }\n      }\n      i2c_handle->EventCount = 0;\n    }\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043a2",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "check_i2c_state_080043a2"
        },
        "FUN_08006280": {
            "renaming": {
                "FUN_08006280": "configure_timer_channel_08006280",
                "htim": "timer_handle",
                "Channel": "channel",
                "pTVar1": "timer_instance"
            },
            "code": "HAL_StatusTypeDef_conflict configure_timer_channel_08006280(TIM_HandleTypeDef_conflict *timer_handle, uint32_t channel)\n{\n    TIM_TypeDef_conflict *timer_instance = timer_handle->Instance;\n    switch(channel) {\n        case 0:\n            timer_instance->DIER |= 2;\n            break;\n        case 4:\n            timer_instance->DIER |= 4;\n            break;\n        case 8:\n            timer_instance->DIER |= 8;\n            break;\n        case 0xc:\n            timer_instance->DIER |= 0x10;\n    }\n    TIM_CCxChannelCmd(timer_instance, channel, 1);\n    if (timer_instance == PTR_080062f0) {\n        timer_instance->BDTR |= 0x8000;\n    }\n    timer_instance->CR1 |= 1;\n    return HAL_OK;\n}",
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006280",
            "calling": [
                "TimerPulseInit"
            ],
            "imported": false,
            "current_name": "configure_timer_channel_08006280"
        },
        "FUN_08007258": {
            "renaming": {
                "FUN_08007258": "initialize_gpio_pin_08007258",
                "pin": "pin_name",
                "mode": "pin_mode",
                "pull": "pin_pull",
                "uVar1": "pin_number",
                "GPIOx": "gpio_port",
                "tmpreg": "temporary_register",
                "GPIO_InitStructure": "GPIO_Init_Struct",
                "DAT_080072d0": "Data_Address_080072d0",
                "DAT_080072d4": "Data_Address_080072d4"
            },
            "code": "void initialize_gpio_pin_08007258(PinName_conflict pin, uint32_t mode, uint32_t pull)\n{\n  uint32_t pin_number = (uint32_t)pin;\n  GPIO_TypeDef *GPIOx = set_GPIO_Port_Clock((pin_number << 24) >> 28);\n  uint32_t pin_mask = 1 << (pin_number & 0xf) & 0xffff;\n  GPIO_InitTypeDef GPIO_Init_Struct;\n  GPIO_Init_Struct.Pin = pin_mask;\n  GPIO_Init_Struct.Speed = GPIO_SPEED_FREQ_HIGH;\n  *(uint32_t *)(DAT_080072d0 + 0x18) |= 1;\n  if ((pin_number - 0xd & 0xff) < 2) {\n    *(uint32_t *)(DAT_080072d4 + 4) = *(uint32_t *)(DAT_080072d4 + 4) & 0xf8ffffff | 0x4000000;\n  }\n  if (((pin_number == 0xf) || (pin_number == 0x13)) || (pin_number == 0x14)) {\n    *(uint32_t *)(DAT_080072d4 + 4) = *(uint32_t *)(DAT_080072d4 + 4) & 0xf8ffffff | 0x2000000;\n  }\n  GPIO_Init_Struct.Mode = mode;\n  GPIO_Init_Struct.Pull = pull;\n  HAL_GPIO_Init(GPIOx, &GPIO_Init_Struct);\n  return;\n}",
            "called": [
                "HAL_GPIO_Init",
                "set_GPIO_Port_Clock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007258",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "initialize_gpio_pin_08007258"
        },
        "FUN_08009f4c": {
            "renaming": {
                "FUN_08009f4c": "allocate_memory_08009f4c",
                "param_1": "size",
                "param_2": "ptr1",
                "param_3": "ptr2",
                "param_4": "size2",
                "pvVar1": "new_ptr",
                "pvVar2": "usable_size"
            },
            "code": "void * allocate_memory_08009f4c(size_t size, void *ptr1, void *ptr2, size_t size2)\n{\n  void *new_ptr;\n  void *usable_size;\n  \n  if (ptr1 != NULL) {\n    if (ptr2 == NULL) {\n      free(ptr1);\n      new_ptr = ptr2;\n    }\n    else {\n      usable_size = (void *)malloc_usable_size(ptr1);\n      new_ptr = ptr1;\n      if ((usable_size < ptr2) && (new_ptr = (void *)malloc(size), new_ptr != NULL)) {\n        memcpy(new_ptr, ptr1, size2);\n        free(ptr1);\n      }\n    }\n    return new_ptr;\n  }\n  new_ptr = (void *)malloc(size2);\n  return new_ptr;\n}",
            "called": [
                "_free_r",
                "memcpy",
                "_malloc_usable_size_r",
                "_malloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f4c",
            "calling": [
                "realloc"
            ],
            "imported": false,
            "current_name": "allocate_memory_08009f4c"
        },
        "FUN_08009f4a": {
            "renaming": {
                "FUN_08009f4a": "do_nothing_08009f4a"
            },
            "code": "\nvoid do_nothing_08009f4a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f4a",
            "calling": [
                "_free_r",
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "do_nothing_08009f4a"
        },
        "FUN_08006c7c": {
            "renaming": {
                "FUN_08006c7c": "calculate_pwm_pin_function_08006c7c",
                "pin": "pin_name",
                "uVar1": "pin_function",
                "uVar2": "pin_function_shifted"
            },
            "code": "uint32_t calculate_pwm_pin_function_08006c7c(PinName_conflict pin)\n{\n  uint32_t pin_function;\n  uint32_t pin_function_shifted;\n  \n  pin_function = pinmap_function(pin,(PinMap_conflict *)PTR_PinMap_PWM_08006ca4);\n  pin_function_shifted = (pin_function << 12) >> 27;\n  \n  if (pin_function_shifted == 3) {\n    return 8;\n  }\n  \n  if (pin_function_shifted != 4) {\n    if (pin_function_shifted != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  \n  return 12;\n}",
            "called": [
                "pinmap_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c7c",
            "calling": [
                "pwm_stop",
                "pwm_start"
            ],
            "imported": false,
            "current_name": "calculate_pwm_pin_function_08006c7c"
        },
        "FUN_08006b5c": {
            "renaming": {
                "FUN_08006b5c": "update_pin_map_08006b5c",
                "pin": "pin_name",
                "map": "pin_map",
                "uVar1": "pin_index"
            },
            "code": "void update_pin_map_08006b5c(PinName_conflict pin, uint32_t *pin_map) {\n  uint32_t pin_index = ((uint32_t)pin << 0x18) >> 0x1c;\n  pin_map[pin_index] &= ~(1 << ((uint32_t)pin & 0xfU));\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b5c",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "update_pin_map_08006b5c"
        },
        "FUN_08007376": {
            "renaming": {
                "FUN_08007376": "find_pin_function_08007376",
                "pin": "pin_name",
                "map": "pin_map",
                "uVar1": "function_index"
            },
            "code": "uint32_t find_pin_function_08007376(PinName_conflict pin, PinMap_conflict *map)\n{\n  uint32_t function_index;\n  \n  if (pin == NC) {\n    return 0xFFFFFFFF;\n  }\n  function_index = pinmap_find_function(pin, map);\n  return function_index;\n}",
            "called": [
                "pinmap_find_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007376",
            "calling": [
                "pwm_stop",
                "get_adc_channel",
                "get_pwm_channel",
                "HAL_TIM_PWM_MspInit",
                "pwm_start",
                "uart_init",
                "i2c_custom_init"
            ],
            "imported": false,
            "current_name": "find_pin_function_08007376"
        },
        "FUN_080033cc": {
            "renaming": {
                "FUN_080033cc": "firmata_parser_080033cc",
                "this": "parser",
                "uVar1": "current_byte",
                "sVar2": "byte_count",
                "puVar3": "data_buffer_ptr",
                "decodeByteStream": "decode_byte_stream",
                "bufferDataAtPosition": "buffer_data_at_position",
                "stringCallbackFunction": "string_callback_function",
                "currentStringCallback": "current_string_callback",
                "currentStringCallbackContext": "current_string_callback_context",
                "currentReportFirmwareCallback": "current_report_firmware_callback",
                "versionCallbackFunction": "version_callback_function",
                "sysexBytesRead": "sysex_bytes_read",
                "currentReportFirmwareCallbackContext": "current_report_firmware_callback_context",
                "currentSysexCallback": "current_sysex_callback",
                "sysexCallbackFunction": "sysex_callback_function"
            },
            "code": "void __thiscall firmata_parser_080033cc(FirmataParser *parser) {\n  uint8_t current_byte;\n  size_t byte_count;\n  uint8_t *data_buffer_ptr;\n  data_buffer_ptr = parser->dataBuffer;\n  current_byte = *data_buffer_ptr;\n  if (current_byte == 'q') {\n    if (parser->currentStringCallback != (stringCallbackFunction)0x0) {\n      byte_count = decode_byte_stream(parser, parser->sysexBytesRead - 1, data_buffer_ptr + 1);\n      buffer_data_at_position(parser, '\\0', byte_count + 1);\n      (*parser->currentStringCallback)(parser->currentStringCallbackContext, (char *)(parser->dataBuffer + 1));\n      return;\n    }\n  }\n  else if (current_byte == 'y') {\n    if (parser->currentReportFirmwareCallback != (versionCallbackFunction)0x0) {\n      if (parser->sysexBytesRead < 3) {\n        (*parser->currentReportFirmwareCallback)(parser->currentReportFirmwareCallbackContext, 0, 0, (char *)0x0);\n        return;\n      }\n      byte_count = decode_byte_stream(parser, parser->sysexBytesRead - 3, data_buffer_ptr + 3);\n      buffer_data_at_position(parser, '\\0', byte_count + 3);\n      data_buffer_ptr = parser->dataBuffer;\n      (*parser->currentReportFirmwareCallback)(parser->currentReportFirmwareCallbackContext, (uint)data_buffer_ptr[1], (uint)data_buffer_ptr[2], (char *)(data_buffer_ptr + 3));\n      return;\n    }\n  }\n  else if (parser->currentSysexCallback != (sysexCallbackFunction)0x0) {\n    (*parser->currentSysexCallback)(parser->currentSysexCallbackContext, current_byte, parser->sysexBytesRead - 1, data_buffer_ptr + 1);\n  }\n  return;\n}\n",
            "called": [
                "bufferDataAtPosition",
                "decodeByteStream"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033cc",
            "calling": [
                "parse"
            ],
            "imported": false,
            "current_name": "firmata_parser_080033cc"
        },
        "FUN_08003de4": {
            "renaming": {
                "FUN_08003de4": "stop_adc_conversion_08003de4",
                "*hadc": "*hadc",
                "HVar1": "status",
                "Lock": "lock",
                "HAL_LOCKED": "HAL_LOCKED",
                "HAL_BUSY": "HAL_BUSY",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "ADC_ConversionStop_Disable": "ADC_ConversionStop_Disable",
                "State": "state"
            },
            "code": "HAL_StatusTypeDef_conflict stop_adc_conversion_08003de4(ADC_HandleTypeDef* hadc) {\n  HAL_StatusTypeDef_conflict status = HAL_OK;\n  if (hadc->Lock == HAL_LOCKED) {\n    status = HAL_BUSY;\n  }\n  else {\n    hadc->Lock = HAL_LOCKED;\n    status = ADC_ConversionStop_Disable(hadc);\n    if (status == HAL_OK) {\n      hadc->State &= 0xffffeefe | 1;\n    }\n    hadc->Lock = HAL_UNLOCKED;\n  }\n  return status;\n}",
            "called": [
                "ADC_ConversionStop_Disable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003de4",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "stop_adc_conversion_08003de4"
        },
        "FUN_08000500": {
            "renaming": {
                "FUN_08000500": "attach_servo_to_pin_08000500",
                "pin": "pin",
                "minPulse": "min_pulse_duration",
                "maxPulse": "max_pulse_duration",
                "PTR_servoCount_0800056c": "servo_count_ptr",
                "firmata::FirmataClass::sendString": "firmata_ptr",
                "PTR_Firmata_08000584": "firmata_ptr",
                "PTR_s_Max_servos_attached_08000580": "max_servos_attached_message",
                "PTR_detachedServoCount_08000570": "detached_servo_count_ptr",
                "PTR_servoPinMap_08000578": "servo_pin_map_ptr",
                "PTR_detachedServos_08000574": "detached_servos_ptr",
                "Servo::attach": "Servo::attach",
                "PTR_servos_0800057c": "servos_ptr"
            },
            "code": "void attach_servo_to_pin_08000500(byte pin, int min_pulse_duration, int max_pulse_duration)\n{\n  byte servo_count = *PTR_servoCount_0800056c;\n  uint pin_number = (uint)pin;\n  \n  if (servo_count > 11) {\n    firmata::FirmataClass::sendString((FirmataClass *)PTR_Firmata_08000584, PTR_s_Max_servos_attached_08000580);\n    return;\n  }\n  \n  byte detached_servo_count = *PTR_detachedServoCount_08000570;\n  \n  if (detached_servo_count == 0) {\n    PTR_servoPinMap_08000578[pin_number] = servo_count;\n    *PTR_servoCount_0800056c = servo_count + 1;\n  }\n  else {\n    PTR_servoPinMap_08000578[pin_number] = PTR_detachedServos_08000574[detached_servo_count - 1];\n    *PTR_detachedServoCount_08000570 = detached_servo_count - 1;\n  }\n  \n  if ((min_pulse_duration > 0) && (max_pulse_duration > 0)) {\n    Servo::attach((Servo *)(PTR_servos_0800057c + (uint)(byte)PTR_servoPinMap_08000578[pin_number] * 3), pin_number, min_pulse_duration, max_pulse_duration);\n    return;\n  }\n  \n  Servo::attach((Servo *)(PTR_servos_0800057c + (uint)(byte)PTR_servoPinMap_08000578[pin_number] * 3), pin_number);\n  return;\n}",
            "called": [
                "attach",
                "attach",
                "sendString"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000500",
            "calling": [
                "sysexCallback",
                "setPinModeCallback"
            ],
            "imported": false,
            "current_name": "attach_servo_to_pin_08000500"
        },
        "FUN_08009d24": {
            "renaming": {
                "FUN_08009d24": "allocate_memory_for_array_of_structs_08009d24",
                "param_1": "memory_size",
                "param_2": "array_length",
                "puVar1": "memory_pointer",
                "iVar2": "total_memory_size"
            },
            "code": "undefined4 * allocate_memory_for_array_of_structs_08009d24(undefined4 memory_size, int array_length)\n{\n  undefined4 *memory_pointer;\n  int total_memory_size = (array_length - 1) * 0x68;\n  memory_pointer = (undefined4 *)_malloc_r(memory_size, total_memory_size + 0x74);\n  if (memory_pointer != (undefined4 *)0x0) {\n    *memory_pointer = 0;\n    memory_pointer[1] = array_length;\n    memory_pointer[2] = memory_pointer + 3;\n    memset(memory_pointer + 3, 0, total_memory_size + 0x68);\n  }\n  return memory_pointer;\n}",
            "called": [
                "memset",
                "_malloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009d24",
            "calling": [
                "__sfp"
            ],
            "imported": false,
            "current_name": "allocate_memory_for_array_of_structs_08009d24"
        },
        "FUN_08008e72": {
            "renaming": {
                "__thiscall Print::FUN_08008e72": "print_character",
                "this": "print_instance",
                "c": "character",
                "sVar1": "result",
                "FUN_08008e72": "print_character_08008e72"
            },
            "code": "size_t __thiscall print_character_08008e72(Print *print_instance,char character) {\n  size_t result = (**print_instance->_vptr_Print)(print_instance,(int)character);\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e72",
            "calling": [
                "printTo"
            ],
            "imported": false,
            "current_name": "print_character_08008e72"
        },
        "FUN_080022f8": {
            "renaming": {
                "FUN_080022f8": "check_digital_inputs_and_process_firmata_080022f8",
                "bVar1": "is_input_high",
                "PVar2": "pin_name",
                "bVar3": "pin_mode",
                "iVar4": "available_bytes",
                "uVar5": "current_time",
                "uVar6": "analog_pin_index",
                "ulPin": "pin_number"
            },
            "code": "void check_digital_inputs_and_process_firmata_080022f8()\n{\n    bool is_input_high;\n    PinName_conflict pin_name;\n    byte pin_mode;\n    int available_bytes;\n    uint32_t current_time;\n    uint pin_number;\n    uint analog_pin_index;\n    check_digital_inputs();\n    while (available_bytes = firmata::FirmataClass::available((FirmataClass*)PTR_Firmata_080023e0), available_bytes != 0)\n    {\n        firmata::FirmataClass::processInput((FirmataClass*)PTR_Firmata_080023e0);\n    }\n    current_time = millis();\n    *(uint32_t*)PTR_currentMillis_080023e4 = current_time;\n    if (*(uint*)PTR_samplingInterval_080023ec < current_time - *(int*)PTR_previousMillis_080023e8)\n    {\n        *(uint*)PTR_previousMillis_080023e8 = *(int*)PTR_previousMillis_080023e8 + *(uint*)PTR_samplingInterval_080023ec;\n        for (analog_pin_index = 0; analog_pin_index < 0x3c; analog_pin_index = (analog_pin_index + 1) & 0xff)\n        {\n            pin_number = analog_pin_index - 0x2e & 0xff;\n            if (pin_number < 0xe)\n            {\n                if (analog_pin_index < 0x3c)\n                {\n                    pin_name = PTR_digitalPin_080023f4[analog_pin_index];\n                }\n                else\n                {\n                    pin_name = NC;\n                }\n                pin_number = pinNametoDigitalPin(pin_name);\n                if (pin_number == 0)\n                {\n                    is_input_high = false;\n                }\n                else if (analog_pin_index < 0x3c)\n                {\n                    pin_name = PTR_digitalPin_080023f4[analog_pin_index];\n                    pin_number = pinNametoDigitalPin(pin_name);\n                    if (pin_number == 1)\n                    {\n                        is_input_high = false;\n                    }\n                    else\n                    {\n                        pin_mode = firmata::FirmataClass::getPinMode((FirmataClass*)PTR_Firmata_080023e0, (byte)analog_pin_index);\n                        is_input_high = (pin_mode == '\\x02');\n                    }\n                }\n                else\n                {\n                    is_input_high = false;\n                }\n                if (is_input_high && ((*(int*)PTR_analogInputsToReport_080023f0 >> pin_number & 1U) != 0))\n                {\n                    pin_number = analogRead(pin_number);\n                    firmata::FirmataClass::sendAnalog((FirmataClass*)PTR_Firmata_080023e0, (byte)pin_number, pin_number);\n                }\n            }\n            else\n            {\n                is_input_high = false;\n            }\n        }\n        if (-1 < (char)*PTR_queryIndex_080023f8)\n        {\n            for (analog_pin_index = 0; (int)analog_pin_index < (char)*PTR_queryIndex_080023f8 + 1; analog_pin_index = (analog_pin_index + 1) & 0xff)\n            {\n                available_bytes = analog_pin_index * 0xc;\n                readAndReportData(PTR_query_080023fc[available_bytes], *(int*)(PTR_query_080023fc + available_bytes + 4), PTR_query_080023fc[available_bytes + 8], PTR_query_080023fc[available_bytes + 9]);\n            }\n        }\n    }\n    return;\n}",
            "called": [
                "processInput",
                "checkDigitalInputs",
                "millis",
                "pinNametoDigitalPin",
                "sendAnalog",
                "analogRead",
                "readAndReportData",
                "getPinMode",
                "available"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080022f8",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "check_digital_inputs_and_process_firmata_080022f8"
        },
        "FUN_08005084": {
            "renaming": {
                "FUN_08005084": "i2c_handle_transfer_08005084",
                "*hi2c": "*handle",
                "HVar1": "state",
                "pIVar2": "instance",
                "puVar3": "buff_ptr",
                "tmpreg": "temp_reg"
            },
            "code": "HAL_StatusTypeDef_conflict i2c_handle_transfer_08005084(I2C_HandleTypeDef_conflict *handle)\n{\n  HAL_I2C_StateTypeDef_conflict state = handle->State;\n  I2C_TypeDef_conflict *instance = handle->Instance;\n  uint8_t *buff_ptr;\n  uint32_t temp_reg;\n\n  instance->CR2 &= 0xfffff8ff;\n  instance->CR1 |= 1;\n  instance->CR1 &= 0xfffffbff;\n\n  if ((instance->CR2 & 0x800) != 0) {\n    if ((handle->State == HAL_I2C_STATE_BUSY_RX) || (handle->State == HAL_I2C_STATE_BUSY_RX_LISTEN)) {\n      handle->XferCount = (uint16_t)handle->hdmarx->Instance->CNDTR;\n    }\n    else {\n      handle->XferCount = (uint16_t)handle->hdmatx->Instance->CNDTR;\n    }\n  }\n\n  if (handle->XferCount != 0) {\n    if ((instance->SR1 & 4) != 0) {\n      buff_ptr = handle->pBuffPtr;\n      handle->pBuffPtr = buff_ptr + 1;\n      *buff_ptr = (uint8_t)instance->DR;\n      handle->XferCount--;\n    }\n    if ((instance->SR1 & 0x40) != 0) {\n      buff_ptr = handle->pBuffPtr;\n      handle->pBuffPtr = buff_ptr + 1;\n      *buff_ptr = (uint8_t)instance->DR;\n      handle->XferCount--;\n    }\n    handle->ErrorCode |= 4;\n  }\n\n  if (handle->ErrorCode == 0) {\n    if (((state == HAL_I2C_STATE_LISTEN) || (state == HAL_I2C_STATE_BUSY_RX_LISTEN)) ||\n       (state == HAL_I2C_STATE_BUSY_TX_LISTEN)) {\n      handle->XferOptions = DAT_08005184;\n      handle->PreviousState = 0;\n      handle->State = HAL_I2C_STATE_READY;\n      handle->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_ListenCpltCallback(handle);\n    }\n    else if ((handle->PreviousState == 0x22) || (state == HAL_I2C_STATE_BUSY_RX)) {\n      handle->PreviousState = 0;\n      handle->State = HAL_I2C_STATE_READY;\n      handle->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_SlaveRxCpltCallback(handle);\n    }\n  }\n  else {\n    I2C_ITError(handle);\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_ListenCpltCallback",
                "HAL_I2C_SlaveRxCpltCallback",
                "I2C_ITError"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005084",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_handle_transfer_08005084"
        },
        "FUN_08008b0e": {
            "renaming": {
                "FUN_08008b0e": "read_next_byte_08008b0e",
                "this": "this",
                "uVar1": "rx_tail",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int __thiscall read_next_byte_08008b0e(HardwareSerial *this)\n{\n  uint32_t rx_tail = this->_serial.rx_tail;\n  if (this->_serial.rx_head != rx_tail) {\n    return (uint32_t)this->_serial.rx_buff[rx_tail];\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b0e",
            "calling": [],
            "imported": false,
            "current_name": "read_next_byte_08008b0e"
        },
        "FUN_0800291c": {
            "renaming": {
                "FUN_0800291c::FUN_0800291c": "initialize_i2c",
                "this": "i2c_instance",
                "puVar1": "digital_pin_ptr",
                "(this->super_Stream).super_Print.write_error": "i2c_write_error",
                "(this->super_Stream)._timeout": "i2c_timeout",
                "(this->super_Stream).super_Print._vptr_Print": "i2c_write_function_pointer",
                "PTR_digitalPin_08002944": "digital_pin_array",
                "(this->_i2c).sda": "i2c_sda_pin",
                "(this->_i2c).scl": "i2c_scl_pin",
                "FUN_0800291c": "initialize_i2c_0800291c"
            },
            "code": "initialize_i2c_0800291c* __thiscall initialize_i2c_0800291c(initialize_i2c_0800291c* this)\n{\n    undefined* digital_pin_ptr;\n    this->super_Stream.super_Print.write_error = 0;\n    this->super_Stream._timeout = 1000;\n    this->super_Stream.super_Print._vptr_Print = (_func_int_varargs**)PTR_PTR_write_1_08002940;\n    digital_pin_ptr = PTR_digitalPin_08002944;\n    this->_i2c.sda = digital_pin_ptr[0xe];\n    this->_i2c.scl = digital_pin_ptr[0xf];\n    return this;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800291c",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "initialize_i2c_0800291c"
        },
        "FUN_08002ac0": {
            "renaming": {
                "FUN_08002ac0": "send_start_08002ac0",
                "uVar1": "ret_val"
            },
            "code": "uint8_t __thiscall TwoWire::send_start_08002ac0(TwoWire *this)\n{\n  uint8_t ret_val;\n  ret_val = send_start_08002ac0(this, '\\x01');\n  return ret_val;\n}",
            "called": [
                "endTransmission"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ac0",
            "calling": [
                "sysexCallback"
            ],
            "imported": false,
            "current_name": "send_start_08002ac0"
        },
        "FUN_080032bc": {
            "renaming": {
                "FUN_080032bc::FUN_080032bc": "firmata::execute_command::execute_command",
                "this": "self",
                "dataBuffer": "buffer",
                "dataBufferSize": "buffer_size",
                "executeMultiByteCommand": "execute_multi_byte_command",
                "multiByteChannel": "multi_byte_channel",
                "waitForData": "wait_for_data",
                "parsingSysex": "parsing_sysex",
                "sysexBytesRead": "sysex_bytes_read",
                "currentAnalogCallbackContext": "current_analog_callback_context",
                "currentDigitalCallbackContext": "current_digital_callback_context",
                "currentReportAnalogCallbackContext": "current_report_analog_callback_context",
                "currentReportDigitalCallbackContext": "current_report_digital_callback_context",
                "currentPinModeCallbackContext": "current_pin_mode_callback_context",
                "currentPinValueCallbackContext": "current_pin_value_callback_context",
                "currentReportFirmwareCallbackContext": "current_report_firmware_callback_context",
                "currentReportVersionCallbackContext": "current_report_version_callback_context",
                "currentDataBufferOverflowCallbackContext": "current_data_buffer_overflow_callback_context",
                "currentStringCallbackContext": "current_string_callback_context",
                "currentSysexCallbackContext": "current_sysex_callback_context",
                "currentSystemResetCallbackContext": "current_system_reset_callback_context",
                "currentAnalogCallback": "current_analog_callback",
                "currentDigitalCallback": "current_digital_callback",
                "currentReportAnalogCallback": "current_report_analog_callback",
                "currentReportDigitalCallback": "current_report_digital_callback",
                "currentPinModeCallback": "current_pin_mode_callback",
                "currentPinValueCallback": "current_pin_value_callback",
                "currentDataBufferOverflowCallback": "current_data_buffer_overflow_callback",
                "currentStringCallback": "current_string_callback",
                "currentSysexCallback": "current_sysex_callback",
                "currentReportFirmwareCallback": "current_report_firmware_callback",
                "currentReportVersionCallback": "current_report_version_callback",
                "currentSystemResetCallback": "current_system_reset_callback",
                "count_leading_zeroes": "count_leading_zeroes",
                "FUN_080032bc": "firmata::execute_command::execute_command_080032bc"
            },
            "code": "firmata::execute_command::execute_command_080032bc * __thiscall firmata::execute_command::execute_command_080032bc(firmata::execute_command::execute_command_080032bc *this,uint8_t *buffer,size_t buffer_size) {\n  uint leading_zeroes_count;\n  this->buffer = buffer;\n  this->buffer_size = buffer_size;\n  this->execute_multi_byte_command = false;\n  this->multi_byte_channel = false;\n  this->wait_for_data = false;\n  this->parsing_sysex = false;\n  this->sysex_bytes_read = 0;\n  this->current_analog_callback_context = nullptr;\n  this->current_digital_callback_context = nullptr;\n  this->current_report_analog_callback_context = nullptr;\n  this->current_report_digital_callback_context = nullptr;\n  this->current_pin_mode_callback_context = nullptr;\n  this->current_pin_value_callback_context = nullptr;\n  this->current_report_firmware_callback_context = nullptr;\n  this->current_report_version_callback_context = nullptr;\n  this->current_data_buffer_overflow_callback_context = nullptr;\n  this->current_string_callback_context = nullptr;\n  this->current_sysex_callback_context = nullptr;\n  this->current_system_reset_callback_context = nullptr;\n  this->current_analog_callback = nullptr;\n  this->current_digital_callback = nullptr;\n  this->current_report_analog_callback = nullptr;\n  this->current_report_digital_callback = nullptr;\n  this->current_pin_mode_callback = nullptr;\n  this->current_pin_value_callback = nullptr;\n  this->current_data_buffer_overflow_callback = nullptr;\n  this->current_string_callback = nullptr;\n  this->current_sysex_callback = nullptr;\n  this->current_report_firmware_callback = nullptr;\n  this->current_report_version_callback = nullptr;\n  this->current_system_reset_callback = nullptr;\n  leading_zeroes_count = count_leading_zeroes(buffer);\n  this->allow_buffer_update = SUB41(leading_zeroes_count >> 5,0);\n  return this;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032bc",
            "calling": [
                "FirmataClass"
            ],
            "imported": false,
            "current_name": "firmata::execute_command::execute_command_080032bc"
        },
        "FUN_080077b0": {
            "renaming": {
                "FUN_080077b0": "FUNC_080077b0"
            },
            "code": "\nvoid FUNC_080077b0(i2c_t_conflict *obj,i2c_timing_e_conflict timing,uint32_t addressingMode,\n                    uint32_t ownAddress,uint8_t master)\n\n{\n  undefined *puVar1;\n  I2C_TypeDef_conflict *pIVar2;\n  void *a;\n  void *b;\n  I2C_TypeDef_conflict *pIVar3;\n  GPIO_TypeDef *pGVar4;\n  uint32_t uVar5;\n  uint32_t uVar6;\n  I2C_HandleTypeDef_conflict *hi2c;\n  uint32_t tmpreg;\n  uint32_t tmpreg_1;\n  uint32_t tmpreg_3;\n  uint32_t tmpreg_2;\n  GPIO_InitTypeDef GPIO_InitStruct;\n  \n  if (obj != (i2c_t_conflict *)0x0) {\n    hi2c = &obj->handle;\n    a = pinmap_peripheral(obj->sda,(PinMap_conflict *)PTR_PinMap_I2C_SDA_08007a74);\n    b = pinmap_peripheral(obj->scl,(PinMap_conflict *)PTR_PinMap_I2C_SCL_08007a78);\n    if ((a == (void *)0x0) || (b == (void *)0x0)) {\n      iprintf(PTR_s_ERROR__at_least_one_I2C_pin_has_n_08007a88);\n    }\n    else {\n      pIVar3 = (I2C_TypeDef_conflict *)pinmap_merge_peripheral(a,b);\n      obj->i2c = pIVar3;\n      pIVar2 = DAT_08007a7c;\n      if (pIVar3 == (I2C_TypeDef_conflict *)0x0) {\n        iprintf(PTR_s_ERROR__I2C_pins_mismatch_08007a8c);\n      }\n      else {\n        if (pIVar3 == DAT_08007a7c) {\n          DAT_08007a7c[0xc56].CR2 = DAT_08007a7c[0xc56].CR2 | 0x200000;\n          pIVar2[0xc55].CCR = pIVar2[0xc55].CCR | 0x200000;\n          pIVar2[0xc55].CCR = pIVar2[0xc55].CCR & 0xffdfffff;\n          obj->irq = I2C1_EV_IRQn;\n          obj->irqER = I2C1_ER_IRQn;\n          *(I2C_HandleTypeDef_conflict **)PTR_i2c_handles_08007a90 = hi2c;\n        }\n        pIVar2 = DAT_08007a80;\n        if (obj->i2c == DAT_08007a80) {\n          DAT_08007a80[0xc39].SR2 = DAT_08007a80[0xc39].SR2 | 0x400000;\n          pIVar2[0xc39].OAR2 = pIVar2[0xc39].OAR2 | 0x400000;\n          pIVar2[0xc39].OAR2 = pIVar2[0xc39].OAR2 & 0xffbfffff;\n          obj->irq = I2C2_EV_IRQn;\n          obj->irqER = I2C2_ER_IRQn;\n          *(I2C_HandleTypeDef_conflict **)(PTR_i2c_handles_08007a90 + 4) = hi2c;\n        }\n        pGVar4 = set_GPIO_Port_Clock((uint)((int)obj->scl << 0x18) >> 0x1c);\n        puVar1 = PTR_PinMap_I2C_SCL_08007a78;\n        GPIO_InitStruct.Pin = 1 << ((int)obj->scl & 0xfU) & 0xffff;\n        uVar5 = pinmap_function(obj->scl,(PinMap_conflict *)PTR_PinMap_I2C_SCL_08007a78);\n        uVar6 = pinmap_function(obj->scl,(PinMap_conflict *)puVar1);\n        GPIO_InitStruct.Mode = (uVar5 >> 3 & 1) << 4 | uVar6 & 7;\n        GPIO_InitStruct.Speed = 3;\n        uVar5 = pinmap_function(obj->scl,(PinMap_conflict *)puVar1);\n        GPIO_InitStruct.Pull = (uVar5 << 0x1a) >> 0x1e;\n        uVar5 = pinmap_function(obj->scl,(PinMap_conflict *)puVar1);\n        *(uint *)(DAT_08007a84 + 0x18) = *(uint *)(DAT_08007a84 + 0x18) | 1;\n        switch((uVar5 << 0x11) >> 0x19) {\n        case 1:\n          *(uint *)(DAT_08007a94 + 4) = *(uint *)(DAT_08007a94 + 4) | 0x7000001;\n          break;\n        case 2:\n          *(uint *)(DAT_08007a94 + 4) = *(uint *)(DAT_08007a94 + 4) & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          *(uint *)(DAT_08007a94 + 4) = *(uint *)(DAT_08007a94 + 4) | 0x7000002;\n          break;\n        case 4:\n          *(uint *)(DAT_08007a94 + 4) = *(uint *)(DAT_08007a94 + 4) & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          *(uint *)(DAT_08007a94 + 4) = *(uint *)(DAT_08007a94 + 4) | 0x7000004;\n          break;\n        case 6:\n          *(uint *)(DAT_08007d4c + 4) = *(uint *)(DAT_08007d4c + 4) & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          *(uint *)(DAT_08007d4c + 4) = *(uint *)(DAT_08007d4c + 4) | 0x7000008;\n          break;\n        case 8:\n          *(uint *)(DAT_08007d4c + 4) = *(uint *)(DAT_08007d4c + 4) & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          *(uint *)(DAT_08007d4c + 4) = *(uint *)(DAT_08007d4c + 4) | 0x7000030;\n          break;\n        case 10:\n          *(uint *)(DAT_08007d4c + 4) = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          *(uint *)(DAT_08007d4c + 4) = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          *(uint *)(DAT_08007d4c + 4) = *(uint *)(DAT_08007d4c + 4) | 0x70000c0;\n          break;\n        case 0xd:\n          *(uint *)(DAT_08007d4c + 4) = *(uint *)(DAT_08007d4c + 4) & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          *(uint *)(DAT_08007d4c + 4) = *(uint *)(DAT_08007d4c + 4) & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          *(uint *)(DAT_08007d4c + 4) = *(uint *)(DAT_08007d4c + 4) | 0x7000300;\n          break;\n        case 0x10:\n          *(uint *)(DAT_08007d4c + 4) = *(uint *)(DAT_08007d4c + 4) & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          *(uint *)(DAT_08007d4c + 4) = *(uint *)(DAT_08007d4c + 4) & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          *(uint *)(DAT_08007d4c + 4) = *(uint *)(DAT_08007d4c + 4) & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          *(uint *)(DAT_08007d4c + 4) = *(uint *)(DAT_08007d4c + 4) | 0x7000c00;\n          break;\n        case 0x14:\n          *(uint *)(DAT_08007d4c + 4) = *(uint *)(DAT_08007d4c + 4) & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          *(uint *)(DAT_08007d4c + 4) = *(uint *)(DAT_08007d4c + 4) & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          *(uint *)(DAT_08007d4c + 4) = *(uint *)(DAT_08007d4c + 4) | 0x7001000;\n          break;\n        case 0x17:\n          *(uint *)(DAT_08007d4c + 4) = *(uint *)(DAT_08007d4c + 4) & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          *(uint *)(DAT_08007d4c + 4) = *(uint *)(DAT_08007d4c + 4) | 0x7008000;\n          break;\n        case 0x1c:\n          *(uint *)(DAT_08007d4c + 4) = *(uint *)(DAT_08007d4c + 4) & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          *(uint *)(DAT_08007d4c + 4) = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff;\n          break;\n        case 0x22:\n          *(uint *)(DAT_08007d4c + 4) = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          *(uint *)(DAT_08007d4c + 4) = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          *(uint *)(DAT_08007d4c + 4) = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff | 0x4000000;\n        }\n        HAL_GPIO_Init(pGVar4,&GPIO_InitStruct);\n        pGVar4 = set_GPIO_Port_Clock((uint)((int)obj->sda << 0x18) >> 0x1c);\n        puVar1 = PTR_PinMap_I2C_SDA_08007a74;\n        GPIO_InitStruct.Pin = 1 << ((int)obj->sda & 0xfU) & 0xffff;\n        uVar5 = pinmap_function(obj->sda,(PinMap_conflict *)PTR_PinMap_I2C_SDA_08007a74);\n        uVar6 = pinmap_function(obj->sda,(PinMap_conflict *)puVar1);\n        GPIO_InitStruct.Mode = (uVar5 >> 3 & 1) << 4 | uVar6 & 7;\n        GPIO_InitStruct.Speed = 3;\n        uVar5 = pinmap_function(obj->sda,(PinMap_conflict *)puVar1);\n        GPIO_InitStruct.Pull = (uVar5 << 0x1a) >> 0x1e;\n        uVar5 = pinmap_function(obj->sda,(PinMap_conflict *)puVar1);\n        *(uint *)(DAT_08007a84 + 0x18) = *(uint *)(DAT_08007a84 + 0x18) | 1;\n        switch((uVar5 << 0x11) >> 0x19) {\n        case 1:\n          *(uint *)(DAT_08007d4c + 4) = *(uint *)(DAT_08007d4c + 4) | 0x7000001;\n          break;\n        case 2:\n          *(uint *)(DAT_08007d4c + 4) = *(uint *)(DAT_08007d4c + 4) & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          *(uint *)(DAT_08007d4c + 4) = *(uint *)(DAT_08007d4c + 4) | 0x7000002;\n          break;\n        case 4:\n          *(uint *)(DAT_08007d4c + 4) = *(uint *)(DAT_08007d4c + 4) & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          *(uint *)(DAT_08007d4c + 4) = *(uint *)(DAT_08007d4c + 4) | 0x7000004;\n          break;\n        case 6:\n          *(uint *)(DAT_08007d4c + 4) = *(uint *)(DAT_08007d4c + 4) & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          *(uint *)(DAT_08007d4c + 4) = *(uint *)(DAT_08007d4c + 4) | 0x7000008;\n          break;\n        case 8:\n          *(uint *)(DAT_08007d4c + 4) = *(uint *)(DAT_08007d4c + 4) & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          *(uint *)(DAT_08007d4c + 4) = *(uint *)(DAT_08007d4c + 4) | 0x7000030;\n          break;\n        case 10:\n          *(uint *)(DAT_08007d4c + 4) = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          *(uint *)(DAT_08007d4c + 4) = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          *(uint *)(DAT_08007d4c + 4) = *(uint *)(DAT_08007d4c + 4) | 0x70000c0;\n          break;\n        case 0xd:\n          *(uint *)(DAT_08007e70 + 4) = *(uint *)(DAT_08007e70 + 4) & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          *(uint *)(DAT_08007e70 + 4) = *(uint *)(DAT_08007e70 + 4) & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          *(uint *)(DAT_08007e70 + 4) = *(uint *)(DAT_08007e70 + 4) | 0x7000300;\n          break;\n        case 0x10:\n          *(uint *)(DAT_08007e70 + 4) = *(uint *)(DAT_08007e70 + 4) & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          *(uint *)(DAT_08007e70 + 4) = *(uint *)(DAT_08007e70 + 4) & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          *(uint *)(DAT_08007e70 + 4) = *(uint *)(DAT_08007e70 + 4) & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          *(uint *)(DAT_08007e70 + 4) = *(uint *)(DAT_08007e70 + 4) | 0x7000c00;\n          break;\n        case 0x14:\n          *(uint *)(DAT_08007e70 + 4) = *(uint *)(DAT_08007e70 + 4) & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          *(uint *)(DAT_08007e70 + 4) = *(uint *)(DAT_08007e70 + 4) & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          *(uint *)(DAT_08007e70 + 4) = *(uint *)(DAT_08007e70 + 4) | 0x7001000;\n          break;\n        case 0x17:\n          *(uint *)(DAT_08007e70 + 4) = *(uint *)(DAT_08007e70 + 4) & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          *(uint *)(DAT_08007e70 + 4) = *(uint *)(DAT_08007e70 + 4) | 0x7008000;\n          break;\n        case 0x1c:\n          *(uint *)(DAT_08007e70 + 4) = *(uint *)(DAT_08007e70 + 4) & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          *(uint *)(DAT_08007e70 + 4) = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff;\n          break;\n        case 0x22:\n          *(uint *)(DAT_08007e70 + 4) = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          *(uint *)(DAT_08007e70 + 4) = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          *(uint *)(DAT_08007e70 + 4) = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff | 0x4000000;\n        }\n        HAL_GPIO_Init(pGVar4,&GPIO_InitStruct);\n        (obj->handle).Instance = obj->i2c;\n        (obj->handle).Init.ClockSpeed = timing;\n        (obj->handle).Init.DutyCycle = 0;\n        (obj->handle).Init.OwnAddress1 = ownAddress;\n        (obj->handle).Init.OwnAddress2 = 0xff;\n        (obj->handle).Init.AddressingMode = addressingMode;\n        (obj->handle).Init.DualAddressMode = 0;\n        (obj->handle).Init.GeneralCallMode = 0;\n        (obj->handle).Init.NoStretchMode = 0;\n        (obj->handle).State = HAL_I2C_STATE_RESET;\n        HAL_NVIC_SetPriority(obj->irq,0,1);\n        HAL_NVIC_EnableIRQ(obj->irq);\n        HAL_NVIC_SetPriority(obj->irqER,0,1);\n        HAL_NVIC_EnableIRQ(obj->irqER);\n        HAL_I2C_Init(hi2c);\n        obj->isMaster = master;\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "pinmap_function",
                "HAL_GPIO_Init",
                "pinmap_merge_peripheral",
                "pinmap_peripheral",
                "set_GPIO_Port_Clock",
                "HAL_NVIC_SetPriority",
                "HAL_I2C_Init",
                "HAL_NVIC_EnableIRQ",
                "iprintf"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080077b0",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "FUNC_080077b0"
        },
        "FUN_08008c44": {
            "renaming": {
                "FUN_08008c44": "configure_serial_08008c44",
                "this": "serial",
                "baud": "baudrate",
                "config": "config",
                "bVar1": "config_mask",
                "iVar2": "databits",
                "_serial": "_serial",
                "PTR_s__home_bo__arduino15_packages_STM_08008cf0": "PTR_s__home_bo__arduino15_packages_STM_08008cf0",
                "PTR_s__home_bo__arduino15_packages_STM_08008cfc": "PTR_s__home_bo__arduino15_packages_STM_08008cfc",
                "PTR___PRETTY_FUNCTION___08008cf8": "PTR___PRETTY_FUNCTION___08008cf8",
                "PTR_s_databits__0_08008cf4": "PTR_s_databits__0_08008cf4"
            },
            "code": "void __thiscall configure_serial_08008c44(HardwareSerial *serial, ulong baudrate, byte config) {\n  byte config_mask = config & 7;\n  int databits = 0;\n  int parity = 0;\n  int stopbits = 0;\n\n  if (config_mask == 4) {\n    databits = 7;\n  } else if (config_mask == 6) {\n    databits = 8;\n  } else if (config_mask == 2) {\n    databits = 6;\n  }\n\n  if ((config & 0x30) == 0x30) {\n    parity = 0x600;\n    databits++;\n  } else if ((config & 0x20) == 0) {\n    parity = 0;\n  } else {\n    parity = 0x400;\n    databits++;\n  }\n\n  if ((config & 8) == 0) {\n    stopbits = 0;\n  } else {\n    stopbits = 0x2000;\n  }\n\n  if (databits == 8) {\n    serial->_serial.databits = 0;\n  } else if (databits == 9) {\n    serial->_serial.databits = 0x1000;\n  }\n\n  if (databits != 0) {\n    serial->_serial.baudrate = baudrate;\n    serial->_config = config;\n    serial->_serial.parity = parity;\n    serial->_serial.stopbits = stopbits;\n    uart_init((serial_t *)&serial->_serial);\n    uart_attach_rx_callback((serial_t *)&serial->_serial, PTR_s__home_bo__arduino15_packages_STM_08008cf0);\n    return;\n  }\n\n  __assert_func(PTR_s__home_bo__arduino15_packages_STM_08008cfc,299,PTR___PRETTY_FUNCTION___08008cf8, PTR_s_databits__0_08008cf4);\n}",
            "called": [
                "uart_attach_rx_callback",
                "__assert_func",
                "uart_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008c44",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "configure_serial_08008c44"
        },
        "FUN_08006060": {
            "renaming": {
                "FUN_08006060": "initialize_timer_08006060",
                "htim": "timer",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "TIM_HandleTypeDef_conflict": "TIM_HandleTypeDef",
                "HAL_TIM_STATE_RESET": "HAL_TIM_STATE_RESET",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "HAL_TIM_OC_MspInit": "HAL_TIM_OC_MspInit",
                "HAL_TIM_STATE_BUSY": "HAL_TIM_STATE_BUSY",
                "TIM_Base_SetConfig": "TIM_Base_SetConfig",
                "HAL_TIM_STATE_READY": "HAL_TIM_STATE_READY",
                "HAL_OK": "HAL_OK",
                "HAL_ERROR": "HAL_ERROR"
            },
            "code": "HAL_StatusTypeDef_conflict initialize_timer_08006060(TIM_HandleTypeDef_conflict *timer)\n{\n    if (timer != NULL) {\n        if (timer->State == HAL_TIM_STATE_RESET) {\n            timer->Lock = HAL_UNLOCKED;\n            HAL_TIM_OC_MspInit(timer);\n        }\n        timer->State = HAL_TIM_STATE_BUSY;\n        TIM_Base_SetConfig(timer->Instance, &(timer->Init));\n        timer->State = HAL_TIM_STATE_READY;\n        return HAL_OK;\n    }\n    return HAL_ERROR;\n}",
            "called": [
                "TIM_Base_SetConfig",
                "HAL_TIM_OC_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006060",
            "calling": [
                "TimerPulseInit"
            ],
            "imported": false,
            "current_name": "initialize_timer_08006060"
        },
        "FUN_08009698": {
            "renaming": {
                "FUN_08009698": "FUNC_08009698"
            },
            "code": "\nuint FUNC_08009698(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  void *pvVar4;\n  int iVar5;\n  undefined *puVar6;\n  uint uVar7;\n  uint **ppuVar8;\n  uint uVar9;\n  uint uVar10;\n  undefined *puVar11;\n  undefined *__s;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  __s = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_08009852;\n          if (bVar1 != 0x58) goto LAB_080096c8;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar6 = PTR_s_0123456789ABCDEF_080098d4;\nLAB_080097e2:\n          uVar7 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar7 & 0x80) == 0) && ((int)(uVar7 << 0x19) < 0)) {\n            uVar9 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar9 = *puVar3;\n          }\n          if ((int)(uVar7 << 0x1f) < 0) {\n            *param_2 = uVar7 | 0x20;\n          }\n          if (uVar9 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar7 = 0x10;\nLAB_08009778:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_080096c8;\n          uVar9 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar9 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar9 & 0x40) == 0) goto LAB_080096e8;\n            uVar9 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_080096e8:\n            uVar9 = *puVar3;\n          }\n          if ((int)uVar9 < 0) {\n            uVar9 = -uVar9;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar7 = 10;\n          puVar6 = PTR_s_0123456789ABCDEF_080098d4;\n        }\n        uVar10 = param_2[1];\n        param_2[2] = uVar10;\n        puVar11 = __s;\n        if ((int)uVar10 < 0) {\n          if (uVar9 != 0) goto LAB_08009816;\nLAB_080098c4:\n          *(undefined *)((int)param_2 + 0x42) = *puVar6;\n          puVar11 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar9 == 0) {\n            if (uVar10 != 0) goto LAB_080098c4;\n          }\n          else {\nLAB_08009816:\n            do {\n              uVar10 = uVar9 / uVar7;\n              puVar11 = puVar11 + -1;\n              *puVar11 = puVar6[uVar9 - uVar7 * uVar10];\n              uVar9 = uVar10;\n            } while (uVar10 != 0);\n          }\n        }\n        if (((uVar7 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar11[-1] = 0x30;\n          puVar11 = puVar11 + -1;\n        }\n        param_2[4] = (int)__s - (int)puVar11;\n        __s = puVar11;\n        goto LAB_080097be;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08009728:\n      __s = (undefined *)((int)param_2 + 0x42);\n      uVar9 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_0800974e:\n            uVar9 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar9 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar9 & 0x40) == 0) goto LAB_0800975c;\n              uVar9 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_0800975c:\n              uVar9 = *puVar3;\n            }\n            puVar6 = PTR_s_0123456789ABCDEF_080098d4;\n            if (bVar1 == 0x6f) {\n              uVar7 = 8;\n            }\n            else {\n              uVar7 = 10;\n            }\n            goto LAB_08009778;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_0800970e:\n            puVar6 = PTR_s_0123456789abcdef_080098d0;\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            goto LAB_080097e2;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_0800974e;\n          if (bVar1 == 0x78) goto LAB_0800970e;\n        }\nLAB_080096c8:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08009728;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      __s = (undefined *)*puVar3;\n      pvVar4 = memchr(__s,0,param_2[1]);\n      if (pvVar4 != (void *)0x0) {\n        param_2[1] = (int)pvVar4 - (int)__s;\n      }\n      uVar9 = param_2[1];\n    }\n    param_2[4] = uVar9;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_080097be;\n  }\n  uVar9 = *param_2;\n  ppuVar8 = (uint **)*param_5;\n  uVar7 = param_2[5];\n  if ((uVar9 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar8 + 1);\n    puVar3 = *ppuVar8;\n    if ((uVar9 & 0x40) == 0) goto LAB_0800983e;\n    *(short *)puVar3 = (short)uVar7;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar8 + 1);\n    puVar3 = *ppuVar8;\nLAB_0800983e:\n    *puVar3 = uVar7;\n  }\nLAB_08009852:\n  param_2[4] = 0;\nLAB_080097be:\n  iVar2 = _printf_common(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,__s,param_2[4]), iVar2 == -1)) {\nLAB_080097d2:\n    uVar9 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar5 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar5 == -1) goto LAB_080097d2;\n      }\n    }\n    uVar9 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar9 = local_24[0];\n    }\n  }\n  return uVar9;\n}\n\n",
            "called": [
                "_printf_common",
                "memchr"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009698",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "FUNC_08009698"
        },
        "FUN_08006186": {
            "renaming": {
                "FUN_08006186": "configure_timer_08006186",
                "htim": "timer_handle",
                "sConfig": "output_channel_config",
                "Channel": "channel",
                "Lock": "lock_status",
                "State": "state",
                "HAL_LOCKED": "HAL_LOCKED",
                "HAL_TIM_STATE_BUSY": "HAL_TIM_STATE_BUSY",
                "HAL_TIM_STATE_READY": "HAL_TIM_STATE_READY",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "TIM_OC1_SetConfig": "TIM_OC1_SetConfig",
                "TIM_OC2_SetConfig": "TIM_OC2_SetConfig",
                "TIM_OC3_SetConfig": "TIM_OC3_SetConfig",
                "TIM_OC4_SetConfig": "TIM_OC4_SetConfig",
                "CCMR1": "CCMR1",
                "CCMR2": "CCMR2",
                "OCFastMode": "OCFastMode",
                "HAL_OK": "HAL_OK",
                "HAL_BUSY": "HAL_BUSY"
            },
            "code": "HAL_StatusTypeDef_conflict configure_timer_08006186(TIM_HandleTypeDef_conflict *timer_handle, TIM_OC_InitTypeDef *output_channel_config, uint32_t channel)\n{\n  if (timer_handle->lock_status != HAL_LOCKED) {\n    timer_handle->lock_status = HAL_LOCKED;\n    timer_handle->state = HAL_TIM_STATE_BUSY;\n    switch(channel) {\n    case 0:\n      TIM_OC1_SetConfig(timer_handle->instance,output_channel_config);\n      timer_handle->instance->CCMR1 |= 8;\n      timer_handle->instance->CCMR1 &= 0xfffffffb;\n      timer_handle->instance->CCMR1 |= output_channel_config->OCFastMode;\n      break;\n    case 4:\n      TIM_OC2_SetConfig(timer_handle->instance,output_channel_config);\n      timer_handle->instance->CCMR1 |= 0x800;\n      timer_handle->instance->CCMR1 &= 0xfffffbff;\n      timer_handle->instance->CCMR1 |= output_channel_config->OCFastMode << 8;\n      break;\n    case 8:\n      TIM_OC3_SetConfig(timer_handle->instance,output_channel_config);\n      timer_handle->instance->CCMR2 |= 8;\n      timer_handle->instance->CCMR2 &= 0xfffffffb;\n      timer_handle->instance->CCMR2 |= output_channel_config->OCFastMode;\n      break;\n    case 0xc:\n      TIM_OC4_SetConfig(timer_handle->instance,output_channel_config);\n      timer_handle->instance->CCMR2 |= 0x800;\n      timer_handle->instance->CCMR2 &= 0xfffffbff;\n      timer_handle->instance->CCMR2 |= output_channel_config->OCFastMode << 8;\n    }\n    timer_handle->state = HAL_TIM_STATE_READY;\n    timer_handle->lock_status = HAL_UNLOCKED;\n    return HAL_OK;\n  }\n  return HAL_BUSY;\n}",
            "called": [
                "TIM_OC3_SetConfig",
                "TIM_OC1_SetConfig",
                "TIM_OC4_SetConfig",
                "TIM_OC2_SetConfig"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006186",
            "calling": [
                "pwm_start"
            ],
            "imported": false,
            "current_name": "configure_timer_08006186"
        },
        "FUN_08006b7c": {
            "renaming": {
                "FUN_08006b7c": "get_gpio_type_def_from_port_index_08006b7c",
                "port_idx": "port_index",
                "DAT_08006ba4": "gpio_type_def_0",
                "DAT_08006bb4": "gpio_type_def_1",
                "DAT_08006ba8": "gpio_type_def_2",
                "DAT_08006bac": "gpio_type_def_3",
                "DAT_08006bb0": "gpio_type_def_4"
            },
            "code": "GPIO_TypeDef * get_gpio_type_def_from_port_index_08006b7c(uint32_t port_index) {\n    switch(port_index) {\n        case 0:\n            return DAT_08006ba4;\n        case 1:\n            return DAT_08006bb4;\n        case 2:\n            return DAT_08006ba8;\n        case 3:\n            return DAT_08006bac;\n        case 4:\n            return DAT_08006bb0;\n        default:\n            return (GPIO_TypeDef *)0x0;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b7c",
            "calling": [
                "digitalRead",
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "get_gpio_type_def_from_port_index_08006b7c"
        },
        "FUN_08008e7c": {
            "renaming": {
                "__thiscall Print::FUN_08008e7c": "print_number_in_given_base",
                "this": "print_obj",
                "n": "number",
                "base": "base",
                "cVar1": "digit",
                "sVar2": "length",
                "sVar3": "result",
                "uVar4": "remainder",
                "uVar5": "base_uint",
                "uVar6": "quotient",
                "__s": "buffer_ptr",
                "buf": "buffer",
                "FUN_08008e7c": "print_number_in_given_base_08008e7c"
            },
            "code": "size_t __thiscall print_number_in_given_base_08008e7c(Print *print_obj, ulong number, uint8_t base)\n{\n  char digit;\n  size_t length;\n  size_t result;\n  uint base_uint = (uint)base;\n  char buffer[33];\n  buffer[32] = '\\0';\n  if (base_uint < 2) {\n    base_uint = 10;\n  }\n  char* buffer_ptr = buffer + 0x20;\n  do {\n    uint quotient = number / base_uint;\n    uint remainder = (number & 0xff) - (quotient * base_uint & 0xff) & 0xff;\n    buffer_ptr = buffer_ptr - 1;\n    if (remainder < 10) {\n      digit = remainder + '0';\n    }\n    else {\n      digit = remainder + '7';\n    }\n    *buffer_ptr = digit;\n    number = quotient;\n  } while (number != 0);\n  if (buffer_ptr == (char *)0x0) {\n    length = 0;\n  }\n  else {\n    length = strlen(buffer_ptr);\n    result = (*print_obj->_vptr_Print[1])(length, buffer_ptr, length);\n  }\n  return length;\n}",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e7c",
            "calling": [
                "print"
            ],
            "imported": false,
            "current_name": "print_number_in_given_base_08008e7c"
        },
        "FUN_0800a194": {
            "renaming": {
                "std::ctype_byname<char>::FUN_0800a194": "set_pointers_to_one",
                "FUN_0800a194": "set_pointers_to_one_0800a194"
            },
            "code": "void set_pointers_to_one_0800a194(void)\n{\n    if (-1 < *(int *)PTR_id_0800a228 << 0x1f) {\n        *(undefined4 *)PTR_id_0800a228 = 1;\n    }\n    if (-1 < *(int *)PTR_id_0800a22c << 0x1f) {\n        *(undefined4 *)PTR_id_0800a22c = 1;\n    }\n    if (-1 < *(int *)PTR_id_0800a230 << 0x1f) {\n        *(undefined4 *)PTR_id_0800a230 = 1;\n    }\n    if (-1 < *(int *)PTR_id_0800a234 << 0x1f) {\n        *(undefined4 *)PTR_id_0800a234 = 1;\n    }\n    if (-1 < *(int *)PTR_id_0800a238 << 0x1f) {\n        *(undefined4 *)PTR_id_0800a238 = 1;\n    }\n    if (-1 < *(int *)PTR_id_0800a23c << 0x1f) {\n        *(undefined4 *)PTR_id_0800a23c = 1;\n    }\n    if (-1 < *(int *)PTR_id_0800a240 << 0x1f) {\n        *(undefined4 *)PTR_id_0800a240 = 1;\n    }\n    if (-1 < *(int *)PTR_id_0800a244 << 0x1f) {\n        *(undefined4 *)PTR_id_0800a244 = 1;\n    }\n    if (-1 < *(int *)PTR_id_0800a248 << 0x1f) {\n        *(undefined4 *)PTR_id_0800a248 = 1;\n    }\n    if (-1 < *(int *)PTR_id_0800a24c << 0x1f) {\n        *(undefined4 *)PTR_id_0800a24c = 1;\n    }\n    if (-1 < *(int *)PTR_id_0800a250 << 0x1f) {\n        *(undefined4 *)PTR_id_0800a250 = 1;\n    }\n    if (-1 < *(int *)PTR_id_0800a254 << 0x1f) {\n        *(undefined4 *)PTR_id_0800a254 = 1;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a194",
            "calling": [],
            "imported": false,
            "current_name": "set_pointers_to_one_0800a194"
        },
        "FUN_08003aa0": {
            "renaming": {
                "FUN_08003aa0": "enable_adc_08003aa0",
                "*hadc": "*adc_handle",
                "HVar1": "status",
                "*pAVar2": "*adc_instance"
            },
            "code": "HAL_StatusTypeDef_conflict enable_adc_08003aa0(ADC_HandleTypeDef *adc_handle)\n{\n  HAL_StatusTypeDef_conflict status;\n  ADC_TypeDef *adc_instance;\n  \n  if (adc_handle->Lock != HAL_LOCKED) {\n    adc_handle->Lock = HAL_LOCKED;\n    status = ADC_Enable(adc_handle);\n    if (status == HAL_OK) {\n      adc_handle->State = (adc_handle->State & 0xfffffcfe) | 0x100;\n      adc_instance = adc_handle->Instance;\n      if ((adc_instance == PTR_08003b84) && ((PTR_08003b84[-0xd].JOFR1 & 0xf0000) != 0)) {\n        adc_handle->State |= 0x100000;\n        if ((*(uint *)(PTR_08003b88 + 4) & 0x400) != 0) {\n          adc_handle->State = (adc_handle->State & 0xffffcfff) | 0x1000;\n        }\n      }\n      else {\n        adc_handle->State &= 0xffefffff;\n        if ((adc_instance->CR1 & 0x400) != 0) {\n          adc_handle->State = (adc_handle->State & 0xffffcfff) | 0x1000;\n        }\n      }\n      if ((adc_handle->State & 0x1000) == 0) {\n        adc_handle->ErrorCode = 0;\n      }\n      else {\n        adc_handle->ErrorCode &= 0xfffffff9;\n      }\n      adc_handle->Lock = HAL_UNLOCKED;\n      adc_instance->SR = 0xfffffffd;\n      adc_instance = adc_handle->Instance;\n      if (((adc_instance->CR2 & 0xe0000) == 0xe0000) &&\n         ((adc_instance != PTR_08003b84 || ((PTR_08003b84[-0xd].JOFR1 & 0xf0000) == 0)))) {\n        adc_instance->CR2 |= 0x500000;\n      }\n      else {\n        adc_instance->CR2 |= 0x100000;\n      }\n    }\n    else {\n      adc_handle->Lock = HAL_UNLOCKED;\n    }\n    return status;\n  }\n  return HAL_BUSY;\n}",
            "called": [
                "ADC_Enable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003aa0",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "enable_adc_08003aa0"
        },
        "FUN_08005fe8": {
            "renaming": {
                "FUN_08005fe8": "configure_timer_08005fe8",
                "TIMx": "timer",
                "Structure": "config",
                "uVar1": "cr1",
                "DAT_0800605c": "PTR_DAT_0800605c"
            },
            "code": "void configure_timer_08005fe8(TIM_TypeDef_conflict *timer, TIM_Base_InitTypeDef_conflict *config)\n{\n    uint32_t cr1 = timer->CR1;\n    if (timer == DAT_0800605c || timer == (TIM_TypeDef_conflict *)0x40000000 || timer == (TIM_TypeDef_conflict *)&DAT_0800605c[-0x387].DMAR || timer == (TIM_TypeDef_conflict *)&DAT_0800605c[-0x37A].SMCR)\n    {\n        cr1 = (cr1 & 0xffffff8f) | config->CounterMode;\n    }\n    if (timer == DAT_0800605c || timer == (TIM_TypeDef_conflict *)0x40000000 || timer == (TIM_TypeDef_conflict *)&DAT_0800605c[-0x387].DMAR || timer == (TIM_TypeDef_conflict *)&DAT_0800605c[-0x37A].SMCR)\n    {\n        cr1 = (cr1 & 0xfffffcff) | config->ClockDivision;\n    }\n    timer->CR1 = (cr1 & 0xffffff7f) | config->AutoReloadPreload;\n    timer->ARR = config->Period;\n    timer->PSC = config->Prescaler;\n    if (timer == DAT_0800605c)\n    {\n        timer->RCR = config->RepetitionCounter;\n    }\n    timer->EGR = 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005fe8",
            "calling": [
                "HAL_TIM_PWM_Init",
                "HAL_TIM_OC_Init"
            ],
            "imported": false,
            "current_name": "configure_timer_08005fe8"
        },
        "FUN_08003ce8": {
            "renaming": {
                "FUN_08003ce8": "stop_and_disable_adc_conversion_08003ce8",
                "*hadc": "*adc_handle",
                "HVar1": "status",
                "HAL_ERROR": "HAL_ERROR",
                "ADC_CR1_CLEAR_MASK": "ADC_CR1_CLEAR_MASK",
                "ADC_CR2_CLEAR_MASK": "ADC_CR2_CLEAR_MASK"
            },
            "code": "HAL_StatusTypeDef_conflict stop_and_disable_adc_conversion_08003ce8(ADC_HandleTypeDef *hadc)\n{\n  HAL_StatusTypeDef_conflict status;\n  if (hadc == NULL) {\n    status = HAL_ERROR;\n  }\n  else {\n    hadc->State |= 2;\n    status = ADC_ConversionStop_Disable(hadc);\n    if (status == HAL_OK) {\n      hadc->Instance->SR = 0xffffffe0;\n      hadc->Instance->CR1 = ADC_CR1_CLEAR_MASK & hadc->Instance->CR1;\n      hadc->Instance->CR2 = ADC_CR2_CLEAR_MASK & hadc->Instance->CR2;\n      hadc->Instance->SMPR1 &= 0xff000000;\n      hadc->Instance->SMPR2 &= 0xc0000000;\n      hadc->Instance->JOFR1 &= 0xfffff000;\n      hadc->Instance->JOFR2 &= 0xfffff000;\n      hadc->Instance->JOFR3 &= 0xfffff000;\n      hadc->Instance->JOFR4 &= 0xfffff000;\n      hadc->Instance->HTR &= 0xfffff000;\n      hadc->Instance->LTR &= 0xfffff000;\n      hadc->Instance->SQR1 &= 0xff000000;\n      hadc->Instance->SQR2 &= 0xc0000000;\n      hadc->Instance->SQR3 &= 0xc0000000;\n      hadc->Instance->JSQR &= 0xffc00000;\n      HAL_ADC_MspDeInit(hadc);\n      hadc->ErrorCode = 0;\n      hadc->State = 0;\n    }\n    hadc->Lock = HAL_UNLOCKED;\n  }\n  return status;\n}",
            "called": [
                "ADC_ConversionStop_Disable",
                "HAL_ADC_MspDeInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ce8",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "stop_and_disable_adc_conversion_08003ce8"
        },
        "FUN_0800738a": {
            "renaming": {
                "FUN_0800738a": "check_pin_is_valid_0800738a",
                "pin": "pin_name",
                "map": "pin_map"
            },
            "code": "_Bool check_pin_is_valid_0800738a(PinName_conflict pin, PinMap_conflict *pin_map) {\n\tif (pin == NC) {\n\t\treturn false;\n\t}\n\twhile(true) {\n\t\tif (pin_map->pin == NC) {\n\t\t\treturn false;\n\t\t}\n\t\tif (pin == pin_map->pin) {\n\t\t\tbreak;\n\t\t}\n\t\tpin_map++;\n\t}\n\treturn true;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800738a",
            "calling": [
                "enableI2CPins",
                "analogWrite",
                "pinMode",
                "sysexCallback",
                "analogWriteCallback",
                "setPinModeCallback"
            ],
            "imported": false,
            "current_name": "check_pin_is_valid_0800738a"
        },
        "FUN_08002948": {
            "renaming": {
                "FUN_08002948": "initialize_priority_08002948",
                "__initialize_p": "should_initialize",
                "__priority": "priority_level",
                "TwoWire": "Wire",
                "PTR_Wire_08002964": "wire_pointer"
            },
            "code": "void initialize_priority_08002948(int should_initialize, int priority_level)\n{\n  if (should_initialize != 1) {\n    return;\n  }\n  if (priority_level == 0xffff) {\n    TwoWire::TwoWire((TwoWire *)PTR_Wire_08002964);\n  }\n  return;\n}",
            "called": [
                "TwoWire"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002948",
            "calling": [
                "_GLOBAL__sub_I__ZN7TwoWire8rxBufferE"
            ],
            "imported": false,
            "current_name": "initialize_priority_08002948"
        },
        "FUN_08009e64": {
            "renaming": {
                "FUN_08009e64": "get_file_permission_and_type_08009e64",
                "param_1": "file_descriptor",
                "param_2": "file_info_address",
                "param_3": "permission_info",
                "param_4": "file_type",
                "iVar1": "status",
                "uVar2": "type",
                "auStack_4c": "permission"
            },
            "code": "int get_file_permission_and_type_08009e64(int file_descriptor, int file_info_address, int *permission_info, uint *file_type) {\n  int status;\n  int permission;\n  uint type;\n  if (*(short *)(file_info_address + 14) < 0 || (status = _fstat_r(file_descriptor, (int)*(short *)(file_info_address + 14), &permission), status < 0)) {\n    *file_type = 0;\n    if ((int)((uint)*(ushort *)(file_info_address + 12) << 0x18) < 0) {\n      type = 0x40;\n      goto LAB_08009ea4;\n    }\n  }\n  else {\n    *file_type = (uint)((permission & 0xf000) == 0x2000);\n  }\n  type = 0x400;\nLAB_08009ea4:\n  *permission_info = type;\n  return 0;\n}",
            "called": [
                "_fstat_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e64",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "get_file_permission_and_type_08009e64"
        },
        "FUN_08002acc": {
            "renaming": {
                "FUN_08002acc": "resize_rx_buffer_08002acc",
                "length": "new_length",
                "puVar1": "rx_buffer_ptr",
                "uVar3": "new_buffer_length",
                "pvVar2": "new_rx_buffer_ptr",
                "*PTR_rxBuffer_08002afc": "*rx_buffer_ptr",
                "*PTR_rxBufferAllocated_08002af8": "*rx_buffer_allocated_ptr"
            },
            "code": "void resize_rx_buffer_08002acc(size_t new_length) {\n  undefined *PTR_rxBuffer_08002afc = PTR_rxBuffer_08002afc;\n  byte *PTR_rxBufferAllocated_08002af8 = PTR_rxBufferAllocated_08002af8;\n  if (*PTR_rxBufferAllocated_08002af8 < new_length) {\n    if (new_length < 0x20) {\n      new_length = 0x20;\n    }\n    void *new_rx_buffer_ptr = realloc(*(void **)rx_buffer_ptr, new_length);\n    *(void **)rx_buffer_ptr = new_rx_buffer_ptr;\n    if (new_rx_buffer_ptr == NULL) {\n      *PTR_rxBufferAllocated_08002af8 = 0;\n    }\n    else {\n      *PTR_rxBufferAllocated_08002af8 = (byte)new_length;\n    }\n  }\n  return;\n}",
            "called": [
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002acc",
            "calling": [
                "requestFrom",
                "onReceiveService"
            ],
            "imported": false,
            "current_name": "resize_rx_buffer_08002acc"
        },
        "FUN_0800932c": {
            "renaming": {
                "FUN_0800932c": "write_byte_to_buffer_0800932c",
                "param_1": "buffer_address",
                "param_2": "byte_to_write",
                "param_3": "buffer_limit",
                "uVar1": "write_result",
                "pbVar2": "current_buffer_limit",
                "*pbVar2": "*current_buffer_limit",
                "*param_3": "*buffer_limit",
                "(int)pbVar2": "(int)current_buffer_limit",
                "(int)param_3[6]": "(int)buffer_limit[6]",
                "*buffer_start": "*buffer_start",
                "byte_to_write": "byte_to_write",
                "*buffer_limit": "*buffer_limit",
                "buffer_start": "buffer_start",
                "uint": "uint"
            },
            "code": "uint write_byte_to_buffer_0800932c(undefined4 buffer_address, byte byte_to_write, byte **buffer_limit) {\n  uint write_result;\n  byte *current_buffer_limit = *buffer_limit + -1;\n  *buffer_limit = current_buffer_limit;\n  if (((int)current_buffer_limit < 0) && (((int)current_buffer_limit < (int)buffer_limit[6] || (byte_to_write == 10)))) {\n    write_result = __swbuf_r();\n    return write_result;\n  }\n  byte *buffer_start = (byte*)buffer_address;\n  *buffer_start = byte_to_write;\n  *buffer_limit = buffer_start + 1;\n  return (uint)byte_to_write;\n}",
            "called": [
                "__swbuf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800932c",
            "calling": [
                "__sfputs_r"
            ],
            "imported": false,
            "current_name": "write_byte_to_buffer_0800932c"
        },
        "FUN_080099a4": {
            "renaming": {
                "FUN_080099a4": "find_substring_080099a4",
                "__haystack": "haystack",
                "__needle": "needle",
                "pcVar1": "current_haystack",
                "pcVar2": "start_of_match",
                "pcVar3": "current_needle"
            },
            "code": "char* find_substring_080099a4(char* haystack, char* needle)\n{\n  char* current_haystack;\n  char* current_needle;\n  char* start_of_match;\n  \n  if (*haystack == \"\\0\") {\n    if (*needle != \"\\0\") {\n      haystack = NULL;\n    }\n    return haystack;\n  }\n  \n  do {\n    current_haystack = haystack;\n    if (*current_haystack == \"\\0\") {\n      return NULL;\n    }\n    current_needle = needle - 1;\n    start_of_match = current_haystack - 1;\n    \n    do {\n      current_needle++;\n      if (*current_needle == \"\\0\") {\n        return current_haystack;\n      }\n      start_of_match++;\n      haystack = current_haystack + 1;\n    } while (*start_of_match == *current_needle);\n  } while(true);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080099a4",
            "calling": [
                "setFirmwareNameAndVersion"
            ],
            "imported": false,
            "current_name": "find_substring_080099a4"
        },
        "FUN_08005a1c": {
            "renaming": {
                "FUN_08005a1c": "get_system_core_clock_08005a1c",
                "PTR_SystemCoreClock_08005a24": "system_core_clock_ptr"
            },
            "code": "uint32_t get_system_core_clock_08005a1c(void)\n{\n  return *(uint32_t *)PTR_SystemCoreClock_08005a24;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a1c",
            "calling": [
                "HAL_RCC_GetPCLK1Freq",
                "SystemClock_Config",
                "HAL_RCC_GetPCLK2Freq"
            ],
            "imported": false,
            "current_name": "get_system_core_clock_08005a1c"
        },
        "FUN_08006b0c": {
            "renaming": {
                "FUN_08006b0c": "reset_uart_dma_transfer_counts_08006b0c",
                "hdma": "dma_handle",
                "huart": "uart_handle",
                "RxXferCount": "rx_transfer_count",
                "TxXferCount": "tx_transfer_count",
                "HAL_UART_ErrorCallback": "handle_uart_error"
            },
            "code": "void reset_uart_dma_transfer_counts_08006b0c(DMA_HandleTypeDef_conflict *dma_handle)\n{\n  UART_HandleTypeDef *uart_handle;\n  uart_handle = (UART_HandleTypeDef *)dma_handle->Parent;\n  uart_handle->RxXferCount = 0;\n  uart_handle->TxXferCount = 0;\n  HAL_UART_ErrorCallback(uart_handle);\n  return;\n}",
            "called": [
                "HAL_UART_ErrorCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b0c",
            "calling": [],
            "imported": false,
            "current_name": "reset_uart_dma_transfer_counts_08006b0c"
        },
        "FUN_08001cd0": {
            "renaming": {
                "FUN_08001cd0": "FUNC_08001cd0"
            },
            "code": "\nvoid FUNC_08001cd0(byte command,byte argc,byte *argv)\n\n{\n  byte bVar1;\n  uint8_t address;\n  byte bVar2;\n  byte bVar3;\n  byte bVar4;\n  byte bVar5;\n  char cVar6;\n  undefined *puVar7;\n  undefined *this;\n  PinName_conflict PVar8;\n  _Bool _Var9;\n  byte bVar10;\n  uint32_t uVar11;\n  uint uVar12;\n  int iVar13;\n  int iVar14;\n  char cVar15;\n  uint uVar16;\n  int iVar17;\n  bool bVar18;\n  \n  this = PTR_Firmata_080022e8;\n  puVar7 = PTR_Firmata_08002044;\n  uVar16 = (uint)argc;\n  switch(command) {\n  case 'i':\n    firmata::FirmataClass::write((FirmataClass *)PTR_Firmata_080022e8,0xf0);\n    firmata::FirmataClass::write((FirmataClass *)this,'j');\n    for (uVar16 = 0; uVar16 < 0x3c; uVar16 = uVar16 + 1 & 0xff) {\n      uVar12 = uVar16 - 0x2e & 0xff;\n      bVar10 = (byte)uVar12;\n      if (uVar12 < 0xe) {\n        if (uVar16 < 0x3c) {\n          PVar8 = PTR_digitalPin_080022e4[uVar16];\n        }\n        else {\n          PVar8 = NC;\n        }\n        uVar11 = pinNametoDigitalPin(PVar8);\n        if (uVar11 == 0) {\n          bVar10 = '\\x7f';\n        }\n        else {\n          if (uVar16 < 0x3c) {\n            PVar8 = PTR_digitalPin_080022e4[uVar16];\n          }\n          else {\n            PVar8 = NC;\n          }\n          uVar11 = pinNametoDigitalPin(PVar8);\n          if (uVar11 == 1) {\n            bVar10 = '\\x7f';\n          }\n        }\n      }\n      else {\n        bVar10 = '\\x7f';\n      }\n      firmata::FirmataClass::write((FirmataClass *)PTR_Firmata_080022e8,bVar10);\n    }\n    firmata::FirmataClass::write((FirmataClass *)PTR_Firmata_080022e8,0xf7);\n    break;\n  case 'k':\n    firmata::FirmataClass::write((FirmataClass *)PTR_Firmata_08002044,0xf0);\n    firmata::FirmataClass::write((FirmataClass *)puVar7,'l');\n    for (uVar16 = 0; uVar16 < 0x3c; uVar16 = uVar16 + 1 & 0xff) {\n      if (uVar16 < 0x3c) {\n        if (PTR_digitalPin_080022e4[uVar16] == NC) {\n          bVar18 = false;\n        }\n        else {\n          uVar11 = pinNametoDigitalPin(PTR_digitalPin_080022e4[uVar16]);\n          if (uVar11 == 0) {\n            bVar18 = false;\n          }\n          else {\n            uVar11 = pinNametoDigitalPin(PTR_digitalPin_08002060[uVar16]);\n            if (uVar11 == 1) {\n              bVar18 = false;\n            }\n            else {\n              bVar18 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar18 = false;\n      }\n      puVar7 = PTR_Firmata_08002044;\n      if (bVar18) {\n        firmata::FirmataClass::write((FirmataClass *)PTR_Firmata_08002044,'\\0');\n        firmata::FirmataClass::write((FirmataClass *)puVar7,'\\x01');\n        firmata::FirmataClass::write((FirmataClass *)puVar7,'\\v');\n        firmata::FirmataClass::write((FirmataClass *)puVar7,'\\x01');\n        firmata::FirmataClass::write((FirmataClass *)puVar7,'\\x01');\n        firmata::FirmataClass::write((FirmataClass *)puVar7,'\\x01');\n      }\n      if ((uVar16 - 0x2e & 0xff) < 0xe) {\n        if (uVar16 < 0x3c) {\n          PVar8 = PTR_digitalPin_08002060[uVar16];\n        }\n        else {\n          PVar8 = NC;\n        }\n        uVar11 = pinNametoDigitalPin(PVar8);\n        if (uVar11 == 0) {\n          bVar18 = false;\n        }\n        else {\n          if (uVar16 < 0x3c) {\n            PVar8 = PTR_digitalPin_08002060[uVar16];\n          }\n          else {\n            PVar8 = NC;\n          }\n          uVar11 = pinNametoDigitalPin(PVar8);\n          if (uVar11 == 1) {\n            bVar18 = false;\n          }\n          else {\n            bVar18 = true;\n          }\n        }\n      }\n      else {\n        bVar18 = false;\n      }\n      puVar7 = PTR_Firmata_080022e8;\n      if (bVar18) {\n        firmata::FirmataClass::write((FirmataClass *)PTR_Firmata_080022e8,'\\x02');\n        firmata::FirmataClass::write((FirmataClass *)puVar7,'\\n');\n      }\n      if (uVar16 < 0x3c) {\n        if (PTR_digitalPin_080022e4[uVar16] == NC) {\n          _Var9 = false;\n        }\n        else {\n          uVar11 = pinNametoDigitalPin(PTR_digitalPin_080022e4[uVar16]);\n          if (uVar11 == 0) {\n            _Var9 = false;\n          }\n          else {\n            uVar11 = pinNametoDigitalPin(PTR_digitalPin_080022e4[uVar16]);\n            if (uVar11 == 1) {\n              _Var9 = false;\n            }\n            else {\n              _Var9 = pin_in_pinmap(PTR_digitalPin_080022e4[uVar16],\n                                    (PinMap_conflict *)PTR_PinMap_PWM_080022ec);\n            }\n          }\n        }\n      }\n      else {\n        _Var9 = false;\n      }\n      puVar7 = PTR_Firmata_080022e8;\n      if (_Var9 != false) {\n        firmata::FirmataClass::write((FirmataClass *)PTR_Firmata_080022e8,'\\x03');\n        firmata::FirmataClass::write((FirmataClass *)puVar7,'\\b');\n      }\n      if (uVar16 < 0x3c) {\n        if (PTR_digitalPin_080022e4[uVar16] == NC) {\n          bVar18 = false;\n        }\n        else {\n          uVar11 = pinNametoDigitalPin(PTR_digitalPin_080022e4[uVar16]);\n          if (uVar11 == 0) {\n            bVar18 = false;\n          }\n          else {\n            uVar11 = pinNametoDigitalPin(PTR_digitalPin_080022e4[uVar16]);\n            if (uVar11 == 1) {\n              bVar18 = false;\n            }\n            else {\n              bVar18 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar18 = false;\n      }\n      puVar7 = PTR_Firmata_080022e8;\n      if (bVar18) {\n        firmata::FirmataClass::write((FirmataClass *)PTR_Firmata_080022e8,'\\x04');\n        firmata::FirmataClass::write((FirmataClass *)puVar7,'\\x0e');\n      }\n      if (uVar16 < 0x3c) {\n        if (PTR_digitalPin_080022e4[uVar16] == NC) {\n          _Var9 = false;\n        }\n        else {\n          uVar11 = pinNametoDigitalPin(PTR_digitalPin_080022e4[uVar16]);\n          if (uVar11 == 0) {\n            _Var9 = false;\n          }\n          else {\n            uVar11 = pinNametoDigitalPin(PTR_digitalPin_080022e4[uVar16]);\n            if (uVar11 == 1) {\n              _Var9 = false;\n            }\n            else {\n              _Var9 = pin_in_pinmap(PTR_digitalPin_080022e4[uVar16],\n                                    (PinMap_conflict *)PTR_PinMap_I2C_SDA_080022f0);\n              if (!_Var9) {\n                _Var9 = pin_in_pinmap(PTR_digitalPin_080022e4[uVar16],\n                                      (PinMap_conflict *)PTR_PinMap_I2C_SCL_080022f4);\n              }\n            }\n          }\n        }\n      }\n      else {\n        _Var9 = false;\n      }\n      puVar7 = PTR_Firmata_080022e8;\n      if (_Var9 != false) {\n        firmata::FirmataClass::write((FirmataClass *)PTR_Firmata_080022e8,'\\x06');\n        firmata::FirmataClass::write((FirmataClass *)puVar7,'\\x01');\n      }\n      firmata::FirmataClass::write((FirmataClass *)PTR_Firmata_080022e8,'\\x7f');\n    }\n    firmata::FirmataClass::write((FirmataClass *)PTR_Firmata_080022e8,0xf7);\n    return;\n  case 'm':\n    if (uVar16 != 0) {\n      bVar1 = *argv;\n      firmata::FirmataClass::write((FirmataClass *)PTR_Firmata_080022e8,0xf0);\n      firmata::FirmataClass::write((FirmataClass *)this,'n');\n      firmata::FirmataClass::write((FirmataClass *)this,bVar1);\n      if (bVar1 < 0x3c) {\n        bVar10 = firmata::FirmataClass::getPinMode((FirmataClass *)this,bVar1);\n        firmata::FirmataClass::write((FirmataClass *)this,bVar10);\n        iVar13 = firmata::FirmataClass::getPinState((FirmataClass *)this,bVar1);\n        firmata::FirmataClass::write((FirmataClass *)this,(byte)iVar13 & 0x7f);\n        uVar16 = firmata::FirmataClass::getPinState((FirmataClass *)this,bVar1);\n        if ((uVar16 & 0xff80) != 0) {\n          iVar13 = firmata::FirmataClass::getPinState((FirmataClass *)this,bVar1);\n          firmata::FirmataClass::write((FirmataClass *)this,(byte)((uint)(iVar13 << 0x12) >> 0x19));\n        }\n        uVar16 = firmata::FirmataClass::getPinState((FirmataClass *)PTR_Firmata_080022e8,bVar1);\n        puVar7 = PTR_Firmata_080022e8;\n        if ((uVar16 & 0xc000) != 0) {\n          iVar13 = firmata::FirmataClass::getPinState((FirmataClass *)PTR_Firmata_080022e8,bVar1);\n          firmata::FirmataClass::write((FirmataClass *)puVar7,(byte)((uint)(iVar13 << 0xb) >> 0x19))\n          ;\n        }\n      }\n      firmata::FirmataClass::write((FirmataClass *)PTR_Firmata_080022e8,0xf7);\n      return;\n    }\n    break;\n  case 'o':\n    if (1 < uVar16) {\n      uVar12 = (uint)argv[1];\n      if (2 < uVar16) {\n        uVar12 = uVar12 | (uint)argv[2] << 7;\n      }\n      if (3 < uVar16) {\n        uVar12 = uVar12 | (uint)argv[3] << 0xe;\n      }\n      analogWriteCallback(*argv,uVar12);\n      return;\n    }\n    break;\n  case 'p':\n    if (4 < uVar16) {\n      bVar1 = *argv;\n      uVar16 = (uint)bVar1;\n      bVar2 = argv[1];\n      bVar3 = argv[2];\n      bVar4 = argv[3];\n      bVar5 = argv[4];\n      if (uVar16 < 0x3c) {\n        if (PTR_digitalPin_08002060[uVar16] == NC) {\n          bVar18 = false;\n        }\n        else {\n          uVar11 = pinNametoDigitalPin(PTR_digitalPin_08002060[uVar16]);\n          if (uVar11 == 0) {\n            bVar18 = false;\n          }\n          else {\n            uVar11 = pinNametoDigitalPin(PTR_digitalPin_08002060[uVar16]);\n            if (uVar11 == 1) {\n              bVar18 = false;\n            }\n            else {\n              bVar18 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar18 = false;\n      }\n      if (bVar18) {\n        if ((byte)PTR_servoPinMap_08002064[uVar16] < 0xc) {\n          bVar18 = Servo::attached((Servo *)(PTR_servos_08002068 +\n                                            (uint)(byte)PTR_servoPinMap_08002064[uVar16] * 3));\n        }\n        else {\n          bVar18 = false;\n        }\n        if (bVar18 != false) {\n          detachServo(bVar1);\n        }\n        attachServo(bVar1,(uint)bVar2 + (uint)bVar3 * 0x80,(uint)bVar4 + (uint)bVar5 * 0x80);\n        setPinModeCallback(bVar1,4);\n        return;\n      }\n    }\n    break;\n  case 'v':\n    bVar1 = argv[1];\n    if ((bVar1 & 0x20) != 0) {\n      firmata::FirmataClass::sendString\n                ((FirmataClass *)PTR_Firmata_08002044,PTR_s_10_bit_addressing_not_supported_08002040\n                );\n      return;\n    }\n    address = *argv;\n    bVar18 = (bVar1 & 0x40) == 0;\n    if ((bVar1 & 0x18) < 0x19) {\n      switch(bVar1 & 0x18) {\n      case 0:\n        TwoWire::beginTransmission((TwoWire *)PTR_Wire_08002048,address);\n        for (uVar12 = 2; uVar12 < uVar16; uVar12 = uVar12 + 2 & 0xff) {\n          wireWrite(argv[uVar12 + 1] * -0x80 + argv[uVar12]);\n        }\n        TwoWire::endTransmission((TwoWire *)PTR_Wire_08002048);\n        return;\n      case 8:\n        if (uVar16 == 6) {\n          iVar13 = (uint)argv[2] + (uint)argv[3] * 0x80;\n          bVar10 = argv[4] + argv[5] * -0x80;\n        }\n        else {\n          bVar10 = argv[2] + argv[3] * -0x80;\n          iVar13 = -1;\n        }\n        readAndReportData(address,iVar13,bVar10,bVar18);\n        return;\n      case 0x10:\n        if ((char)*PTR_queryIndex_0800204c + 1 < 8) {\n          if (uVar16 == 6) {\n            iVar13 = (uint)argv[2] + (uint)argv[3] * 0x80;\n            cVar15 = argv[4] + argv[5] * -0x80;\n          }\n          else {\n            cVar15 = argv[2] + argv[3] * -0x80;\n            iVar13 = -1;\n          }\n          cVar6 = *PTR_queryIndex_0800204c + '\\x01';\n          *PTR_queryIndex_0800204c = cVar6;\n          puVar7 = PTR_query_08002050;\n          iVar14 = cVar6 * 0xc;\n          PTR_query_08002050[iVar14] = address;\n          *(int *)(puVar7 + iVar14 + 4) = iVar13;\n          puVar7[iVar14 + 8] = cVar15;\n          puVar7[iVar14 + 9] = bVar18;\n          return;\n        }\n        firmata::FirmataClass::sendString\n                  ((FirmataClass *)PTR_Firmata_08002044,PTR_s_too_many_queries_08002054);\n        return;\n      case 0x18:\n        cVar15 = *PTR_queryIndex_0800204c;\n        if (cVar15 < 1) {\n          *PTR_queryIndex_0800204c = 0xff;\n          return;\n        }\n      }\n      for (uVar16 = 0; iVar13 = cVar15 + 1, (int)uVar16 < iVar13; uVar16 = uVar16 + 1 & 0xff) {\n        if (address == PTR_query_08002050[uVar16 * 0xc]) goto LAB_08001e66;\n      }\n      uVar16 = 0;\nLAB_08001e66:\n      for (; puVar7 = PTR_query_08002050, (int)uVar16 < iVar13; uVar16 = uVar16 + 1 & 0xff) {\n        if (uVar16 < 8) {\n          iVar14 = (uVar16 + 1) * 0xc;\n          iVar17 = uVar16 * 0xc;\n          PTR_query_08002050[iVar17] = PTR_query_08002050[iVar14];\n          *(undefined4 *)(puVar7 + iVar17 + 4) = *(undefined4 *)(puVar7 + iVar14 + 4);\n          puVar7[iVar17 + 8] = puVar7[iVar14 + 8];\n          puVar7[iVar17 + 9] = puVar7[iVar14 + 9];\n        }\n      }\n      *PTR_queryIndex_0800204c = cVar15 + -1;\n      return;\n    }\n    break;\n  case 'x':\n    iVar13 = (uint)*argv + (uint)argv[1] * 0x80;\n    if ((1 < uVar16) && (iVar13 != 0)) {\n      *(int *)PTR_i2cReadDelayTime_08002058 = iVar13;\n    }\n    if (*PTR_isI2CEnabled_0800205c == '\\0') {\n      enableI2CPins();\n      return;\n    }\n    break;\n  case 'z':\n    if ((1 < uVar16) &&\n       (iVar13 = (uint)*argv + (uint)argv[1] * 0x80, *(int *)PTR_samplingInterval_0800206c = iVar13,\n       iVar13 == 0)) {\n      *(undefined4 *)PTR_samplingInterval_0800206c = 1;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "enableI2CPins",
                "attached",
                "pin_in_pinmap",
                "beginTransmission",
                "pinNametoDigitalPin",
                "wireWrite",
                "sendString",
                "write",
                "endTransmission",
                "attachServo",
                "getPinState",
                "detachServo",
                "getPinMode",
                "readAndReportData",
                "analogWriteCallback",
                "setPinModeCallback"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001cd0",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_08001cd0"
        },
        "FUN_08007320": {
            "renaming": {
                "FUN_08007320": "find_peripheral_pin_08007320",
                "pin": "pin_name",
                "map": "pin_map",
                "pvVar1": "peripheral"
            },
            "code": "void * find_peripheral_pin_08007320(PinName_conflict pin, PinMap_conflict *map)\n{\n  void *peripheral;\n  if (pin != NC) {\n    peripheral = pinmap_find_peripheral(pin, map);\n    return peripheral;\n  }\n  return (void *)0x0;\n}",
            "called": [
                "pinmap_find_peripheral"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007320",
            "calling": [
                "pwm_stop",
                "uart_debug_init",
                "pwm_start",
                "uart_init",
                "adc_read_value",
                "i2c_custom_init",
                "uart_debug_write"
            ],
            "imported": false,
            "current_name": "find_peripheral_pin_08007320"
        },
        "FUN_080002ec": {
            "renaming": {
                "FUN_080002ec": "set_port_pins_080002ec",
                "port": "port_num",
                "value": "port_value",
                "bVar1": "is_valid_pin",
                "bVar2": "pin_mode",
                "uVar3": "port_num_uint",
                "uVar4": "pin_name",
                "iVar5": "pin_state",
                "pin": "curr_pin",
                "ulPin": "curr_pin_index",
                "ulPin_00": "start_pin_index",
                "uVar6": "curr_pin_mask",
                "uVar7": "end_pin_index",
                "uVar8": "pin_mask"
            },
            "code": "void set_port_pins_080002ec(byte port, int value)\n{\n  bool is_valid_pin;\n  byte curr_pin;\n  uint32_t pin_mask = 0;\n  uint32_t curr_pin_mask;\n  uint32_t pin_state;\n  uint8_t pin_mode;\n  uint8_t i;\n\n  if (port < 5) {\n    uint8_t start_pin_index = (port + 1) * 8;\n    if (start_pin_index > 60) {\n      start_pin_index = 60;\n    }\n    for (i = 0; i < 8; i++) {\n      curr_pin = start_pin_index + i;\n      if (curr_pin < 60) {\n        if (digitalPinToPinName(curr_pin) == NOT_A_PIN) {\n          is_valid_pin = false;\n        }\n        else {\n          is_valid_pin = true;\n        }\n      }\n      else {\n        is_valid_pin = false;\n      }\n      if (is_valid_pin) {\n        pin_mode = firmata::FirmataClass::getPinMode((FirmataClass *)PTR_Firmata_08000484, curr_pin);\n        if (pin_mode == INPUT || pin_mode == INPUT_PULLUP) {\n          curr_pin_mask = 1 << i;\n          pin_mask |= curr_pin_mask;\n          pin_state = (value & curr_pin_mask) > 0 ? HIGH : LOW;\n          pinMode(curr_pin, OUTPUT);\n          digitalWrite(curr_pin, pin_state);\n        }\n      }\n    }\n  }\n}\n",
            "called": [
                "digitalWrite",
                "pinNametoDigitalPin",
                "setPinState",
                "pinMode",
                "getPinState",
                "getPinMode"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002ec",
            "calling": [],
            "imported": false,
            "current_name": "set_port_pins_080002ec"
        },
        "FUN_08000be8": {
            "renaming": {
                "FUN_08000be8": "send_digital_port_if_changed_08000be8",
                "portNumber": "port_number",
                "portValue": "port_value",
                "forceSend": "force_send",
                "PTR_portConfigInputs_08000c0c": "port_config_inputs_array",
                "PTR_previousPINs_08000c10": "previous_port_values_array",
                "PTR_Firmata_08000c14": "firmata_instance_ptr"
            },
            "code": "void send_digital_port_if_changed_08000be8(byte port_number, byte port_value, byte force_send) {\n  byte port_config_inputs = PTR_portConfigInputs_08000c0c[port_number];\n  byte masked_port_value = port_config_inputs & port_value;\n  if (force_send || masked_port_value != PTR_previousPINs_08000c10[port_number]) {\n    firmata::FirmataClass::sendDigitalPort((FirmataClass *)PTR_Firmata_08000c14, port_number, masked_port_value);\n    PTR_previousPINs_08000c10[port_number] = masked_port_value;\n  }\n  return;\n}",
            "called": [
                "sendDigitalPort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000be8",
            "calling": [
                "checkDigitalInputs",
                "reportDigitalCallback"
            ],
            "imported": false,
            "current_name": "send_digital_port_if_changed_08000be8"
        },
        "FUN_08003fd8": {
            "renaming": {
                "FUN_08003fd8": "calculate_ticks_remaining_08003fd8",
                "TicksNumb": "ticks_numb",
                "puVar1": "ticks_remaining_ptr",
                "DAT_08003ffc": "ticks_remaining_data",
                "DAT_08004000": "other_data"
            },
            "code": "uint32_t calculate_ticks_remaining_08003fd8(uint32_t ticks_numb)\n{\n  undefined4 *ticks_remaining_ptr;\n  ticks_remaining_ptr = DAT_08003ffc;\n  if (ticks_numb - 1 < 0x1000000) {\n    DAT_08003ffc[1] = ticks_numb - 1;\n    *(undefined *)(DAT_08004000 + 0x23) = 0xf0;\n    ticks_remaining_ptr[2] = 0;\n    *ticks_remaining_ptr = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fd8",
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "calculate_ticks_remaining_08003fd8"
        },
        "FUN_0800307a": {
            "renaming": {
                "FUN_0800307a": "marshal_data_0800307a",
                "this": "marshaller",
                "bytec": "num_bytes",
                "bytev": "byte_array",
                "max_bytes": "max_bytes",
                "uVar1": "current_byte",
                "uVar2": "num_bits_written",
                "uVar3": "total_bytes_written",
                "uint": "unsigned int"
            },
            "code": "void __thiscall marshal_data_0800307a(FirmataMarshaller *marshaller, size_t num_bytes, uint8_t *byte_array, size_t max_bytes) {\n  uint current_byte;\n  uint num_bits_written;\n  uint total_bytes_written;\n  \n  current_byte = (uint)*byte_array;\n  if (max_bytes == 0) {\n    max_bytes = 0xffffffff;\n  }\n  total_bytes_written = 0;\n  num_bits_written = 0;\n  while ((total_bytes_written < num_bytes && (total_bytes_written < max_bytes))) {\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)\n              (marshaller->FirmataStream,((uint)byte_array[total_bytes_written] << (num_bits_written & 0xff) | current_byte) & 0x7f);\n    current_byte = (int)(uint)byte_array[total_bytes_written] >> (7 - num_bits_written & 0xff) & 0xff;\n    num_bits_written = num_bits_written + 1;\n    while ((total_bytes_written = total_bytes_written + 1, 6 < num_bits_written && (total_bytes_written < max_bytes))) {\n      (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller->FirmataStream,current_byte & 0x7f);\n      current_byte = current_byte >> 7;\n      num_bits_written = num_bits_written - 7;\n    }\n    total_bytes_written = total_bytes_written + 1;\n  }\n  if ((num_bits_written != 0) && (total_bytes_written < max_bytes)) {\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)\n              (marshaller->FirmataStream,(1 << (num_bits_written & 0xff)) - 1U & current_byte);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800307a",
            "calling": [
                "sendExtendedAnalog",
                "sendSysex",
                "sendFirmwareVersion",
                "sendDigitalPort",
                "sendAnalog"
            ],
            "imported": false,
            "current_name": "marshal_data_0800307a"
        },
        "FUN_08004b80": {
            "renaming": {
                "FUN_08004b80": "do_nothing_08004b80"
            },
            "code": "\nvoid do_nothing_08004b80(I2C_HandleTypeDef_conflict *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b80",
            "calling": [
                "I2C_MasterTransmit_BTF",
                "I2C_MasterTransmit_TXE"
            ],
            "imported": false,
            "current_name": "do_nothing_08004b80"
        },
        "FUN_08002ca4": {
            "renaming": {
                "FUN_08002ca4": "send_string_callback_08002ca4",
                "param_1": "callback_function",
                "c_str": "string_to_send",
                "PTR_currentStringCallback_08002cb4": "current_string_callback_ptr",
                "code": "function_pointer"
            },
            "code": "void send_string_callback_08002ca4(void *callback_function, char *string_to_send) { \\n\\\n                            if (*(code **)PTR_currentStringCallback_08002cb4 != (code *)0x0) { \\n\\\n                                (**(code **)PTR_currentStringCallback_08002cb4)(string_to_send); \\n\\\n                            } \\n\\\n                            return; \\n\\\n                        }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca4",
            "calling": [],
            "imported": false,
            "current_name": "send_string_callback_08002ca4"
        },
        "FUN_0800319e": {
            "renaming": {
                "FUN_0800319e": "send_port_data_0800319e",
                "this": "marshaller",
                "portNumber": "port_number",
                "portData": "port_data",
                "local_a": "data_to_send"
            },
            "code": "void __thiscall send_port_data_0800319e(FirmataMarshaller *this,uint8_t port_number,uint16_t port_data)\n{\n  uint16_t data_to_send;\n  if (this->FirmataStream != (Stream *)0x0) {\n    data_to_send = port_data;\n    (**(this->FirmataStream->super_Print)._vptr_Print)(this,port_number & 0xf | 0x90);\n    encodeByteStream(this,2,(uint8_t *)&data_to_send,2);\n  }\n  return;\n}",
            "called": [
                "encodeByteStream"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800319e",
            "calling": [
                "sendDigitalPort"
            ],
            "imported": false,
            "current_name": "send_port_data_0800319e"
        },
        "FUN_08008d00": {
            "renaming": {
                "FUN_08008d00": "set_rx_pin_08008d00",
                "_rx": "rx_pin",
                "PVar1": "pin_name",
                "PTR_digitalPin_08008d14": "digital_pin_names"
            },
            "code": "void __thiscall set_rx_pin_08008d00(HardwareSerial *this, uint32_t rx_pin)\n{\n    PinName pin_name;\n    if (rx_pin < 0x3c) {\n        pin_name = PTR_digitalPin_08008d14[rx_pin];\n    }\n    else {\n        pin_name = NC;\n    }\n    (this->_serial).pin_rx = pin_name;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d00",
            "calling": [
                "HardwareSerial"
            ],
            "imported": false,
            "current_name": "set_rx_pin_08008d00"
        },
        "FUN_08004b82": {
            "renaming": {
                "FUN_08004b82": "i2c_transfer_08004b82",
                "hi2c": "handle",
                "HVar1": "state",
                "uVar3": "transfer_options",
                "pbVar2": "buffer_ptr"
            },
            "code": "HAL_StatusTypeDef_conflict i2c_transfer_08004b82(I2C_HandleTypeDef_conflict *handle) {\n    HAL_I2C_StateTypeDef_conflict state = handle->State;\n    uint32_t transfer_options = handle->XferOptions;\n    if (handle->XferSize == 0 && state == HAL_I2C_STATE_BUSY_TX) {\n        if (transfer_options == 4 || transfer_options == 8 || transfer_options == 0xffff0000) {\n            handle->Instance->CR2 &= 0xfffff8ff;\n            handle->Instance->CR1 |= 0x200;\n            handle->PreviousState = 0;\n            handle->State = HAL_I2C_STATE_READY;\n            if (handle->Mode == HAL_I2C_MODE_MEM) {\n                handle->Mode = HAL_I2C_MODE_NONE;\n                HAL_I2C_MemTxCpltCallback(handle);\n            }\n            else {\n                handle->Mode = HAL_I2C_MODE_NONE;\n                HAL_I2C_MasterTxCpltCallback(handle);\n            }\n        }\n        else {\n            handle->Instance->CR2 &= 0xfffff8ff;\n            handle->PreviousState = 0x11;\n            handle->Mode = HAL_I2C_MODE_NONE;\n            handle->State = HAL_I2C_STATE_READY;\n            HAL_I2C_MasterTxCpltCallback(handle);\n        }\n    }\n    else if (state == HAL_I2C_STATE_BUSY_TX || (handle->Mode == HAL_I2C_MODE_MEM && state == HAL_I2C_STATE_BUSY_RX)) {\n        if (handle->XferCount == 0) {\n            handle->Instance->CR2 &= 0xfffffbff;\n        }\n        else if (handle->Mode == HAL_I2C_MODE_MEM) {\n            if (handle->EventCount == 0) {\n                if (handle->MemaddSize == 1) {\n                    handle->Instance->DR = handle->Memaddress & 0xff;\n                    handle->EventCount += 2;\n                }\n                else {\n                    handle->Instance->DR = (handle->Memaddress << 0x10) >> 0x18;\n                    handle->EventCount++;\n                }\n            }\n            else if (handle->EventCount == 1) {\n                handle->Instance->DR = handle->Memaddress & 0xff;\n                handle->EventCount++;\n            }\n            else if (handle->EventCount == 2) {\n                if (state == HAL_I2C_STATE_BUSY_RX) {\n                    handle->Instance->CR1 |= 0x100;\n                }\n                else if (state == HAL_I2C_STATE_BUSY_TX) {\n                    uint8_t *buffer_ptr = handle->pBuffPtr;\n                    handle->pBuffPtr = buffer_ptr + 1;\n                    handle->Instance->DR = (uint)*buffer_ptr;\n                    handle->XferCount--;\n                }\n            }\n        }\n        else {\n            uint8_t *buffer_ptr = handle->pBuffPtr;\n            handle->pBuffPtr = buffer_ptr + 1;\n            handle->Instance->DR = (uint)*buffer_ptr;\n            handle->XferCount--;\n        }\n    }\n    return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MasterTxCpltCallback",
                "HAL_I2C_MemTxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b82",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_transfer_08004b82"
        },
        "FUN_0800997e": {
            "renaming": {
                "FUN_0800997e": "find_last_occurrence_0800997e",
                "__s": "str",
                "__c": "c",
                "pcVar1": "occurrence",
                "pcVar2": "last_occurrence"
            },
            "code": "char* find_last_occurrence_0800997e(char* str, int c) {\n    char* last_occurrence = NULL;\n    if (c != 0) {\n        char* occurrence;\n        while ((occurrence = strchr(str, c)) != NULL) {\n            last_occurrence = occurrence;\n            str = occurrence + 1;\n        }\n    } else {\n        last_occurrence = strchr(str, 0);\n    }\n    return last_occurrence;\n}",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800997e",
            "calling": [
                "setFirmwareNameAndVersion"
            ],
            "imported": false,
            "current_name": "find_last_occurrence_0800997e"
        },
        "FUN_0800779c": {
            "renaming": {
                "FUN_0800779c": "handle_timer_interrupt_0800779c",
                "PTR_timer_handles_080077ac": "PTR_timer_handles",
                "TIM_HandleTypeDef_conflict": "TimerHandleTypeDef"
            },
            "code": "void handle_timer_interrupt_0800779c(void)\n{\n  TIM_HandleTypeDef_conflict *timer_handle = *(TIM_HandleTypeDef_conflict **)(PTR_timer_handles_080077ac_080077ac + 0xc);\n  if (timer_handle != NULL) {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800779c",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_0800779c"
        },
        "FUN_08002dbc": {
            "renaming": {
                "FUN_08002dbc": "initialize_firmata_08002dbc",
                "__initialize_p": "should_initialize",
                "__priority": "priority_level",
                "PTR_Firmata_08002dd8": "PTR_Firmata_08002dd8",
                "firmata::FirmataClass::FirmataClass": "firmata::FirmataClass::FirmataClass"
            },
            "code": "void initialize_firmata_08002dbc(int should_initialize, int priority_level)\n{\n  if (should_initialize != 1) {\n    return;\n  }\n  if (priority_level == 0xffff) {\n    firmata::FirmataClass::FirmataClass((FirmataClass *)PTR_Firmata_08002dd8);\n  }\n  return;\n}",
            "called": [
                "FirmataClass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002dbc",
            "calling": [
                "_GLOBAL__sub_I_Firmata"
            ],
            "imported": false,
            "current_name": "initialize_firmata_08002dbc"
        },
        "FUN_08007f78": {
            "renaming": {
                "FUN_08007f78": "get_i2c_t_conflict_from_hardware_interface_08007f78",
                "hi2c": "i2c_handle",
                "i2c_t_conflict": "i2c_t_conflict",
                "EventCount": "event_count"
            },
            "code": "typedef struct {\n    uint32_t event_count;\n} i2c_t_conflict;\n\ni2c_t_conflict* get_i2c_t_conflict_from_hardware_interface_08007f78(I2C_HandleTypeDef_conflict* i2c_handle) {\n    return (i2c_t_conflict*) &i2c_handle[-1].EventCount;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f78",
            "calling": [
                "HAL_I2C_ListenCpltCallback",
                "HAL_I2C_AddrCallback",
                "HAL_I2C_ErrorCallback"
            ],
            "imported": false,
            "current_name": "get_i2c_t_conflict_from_hardware_interface_08007f78"
        },
        "FUN_08006b28": {
            "renaming": {
                "FUN_08006b28": "is_pin_high_08006b28",
                "pin": "pin_name",
                "map": "pin_map"
            },
            "code": "_Bool is_pin_high_08006b28(PinName_conflict pin, uint32_t *pin_map) {\n    uint32_t pin_index = (uint32_t)pin << 0x18 >> 0x1c;\n    uint32_t bit_index = (uint32_t)pin & 0xfU;\n    uint32_t pin_value = pin_map[pin_index] >> bit_index;\n    return (_Bool)(pin_value & 1);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b28",
            "calling": [
                "digitalRead",
                "digitalWrite",
                "analogWrite",
                "pinMode"
            ],
            "imported": false,
            "current_name": "is_pin_high_08006b28"
        },
        "FUN_08006b1c": {
            "renaming": {
                "FUN_08006b1c": "get_uart_rx_and_g_state_08006b1c",
                "*huart": "*uart_handle",
                "huart": "uart_handle",
                "RxState": "rx_state",
                "gState": "g_state"
            },
            "code": "HAL_UART_StateTypeDef get_uart_rx_and_g_state_08006b1c(UART_HandleTypeDef *uart_handle)\n{\n    HAL_UART_StateTypeDef rx_state = uart_handle->RxState;\n    HAL_UART_StateTypeDef g_state = uart_handle->gState;\n    return rx_state | g_state;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b1c",
            "calling": [
                "serial_tx_active",
                "serial_rx_active"
            ],
            "imported": false,
            "current_name": "get_uart_rx_and_g_state_08006b1c"
        },
        "FUN_0800a130": {
            "renaming": {
                "FUN_0800a130": "seek_file_0800a130",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "offset",
                "param_4": "whence",
                "puVar1": "error_ptr",
                "iVar2": "seek_result"
            },
            "code": "void seek_file_0800a130(int *error_code, int file_descriptor, int offset, int whence) {\n    undefined *error_ptr = PTR_errno_0800a150;\n    *(undefined4 *)PTR_errno_0800a150 = 0;\n    int seek_result = _lseek(file_descriptor, offset, whence);\n    if ((seek_result == -1) && (*(int *)error_ptr != 0)) {\n        *error_code = *(int *)error_ptr;\n    }\n    return;\n}",
            "called": [
                "_lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a130",
            "calling": [
                "__sseek",
                "__swrite"
            ],
            "imported": false,
            "current_name": "seek_file_0800a130"
        },
        "FUN_08008f3c": {
            "renaming": {
                "FUN_08008f3c": "count_bits_set_in_pin_08008f3c",
                "pin": "pin",
                "uVar1": "current_pin_value",
                "uVar2": "bits_set_count"
            },
            "code": "uint8_t count_bits_set_in_pin_08008f3c(uint16_t pin) {\n  uint16_t current_pin_value = pin;\n  uint8_t bits_set_count = 0;\n  while (current_pin_value != 1) {\n    if (current_pin_value & 1) {\n      bits_set_count++;\n    }\n    current_pin_value >>= 1;\n  }\n  return bits_set_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f3c",
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "imported": false,
            "current_name": "count_bits_set_in_pin_08008f3c"
        },
        "FUN_08002ef2": {
            "renaming": {
                "FUN_08002ef2": "update_pin_state_08002ef2",
                "pin": "pin",
                "value": "value",
                "FirmataMarshaller": "FirmataMarshaller",
                "&this->marshaller": "&this->marshaller"
            },
            "code": "void __thiscall firmata::FirmataClass::update_pin_state_08002ef2(FirmataClass *this, byte pin, int value)\n{\n  FirmataMarshaller::update_pin_state_08002ef2(&this->marshaller, pin, (uint16_t)value);\n  return;\n}",
            "called": [
                "sendAnalog"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ef2",
            "calling": [
                "reportAnalogCallback",
                "loop"
            ],
            "imported": false,
            "current_name": "update_pin_state_08002ef2"
        },
        "FUN_08007332": {
            "renaming": {
                "FUN_08007332": "find_pin_name_conflict_08007332",
                "PinName_conflict": "PinName_conflict",
                "peripheral": "peripheral",
                "map": "map",
                "NC": "NC",
                "void": "void",
                "PinMap_conflict": "PinMap_conflict"
            },
            "code": "PinName_conflict find_pin_name_conflict_08007332(void *peripheral, PinMap_conflict *map) {\n    while(true) {\n        if(map->peripheral == NULL) {\n            return NC;\n        }\n        if(map->peripheral == peripheral) {\n            break;\n        }\n        map++;\n    }\n    return map->pin;\n}",
            "called": [
                "pinmap_find_pin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007332",
            "calling": [
                "pinmap_pin",
                "pinmap_find_pin"
            ],
            "imported": false,
            "current_name": "find_pin_name_conflict_08007332"
        },
        "FUN_08006128": {
            "renaming": {
                "FUN_08006128": "set_timer_channel_config_08006128",
                "htim": "timer_handle",
                "sConfig": "timer_config",
                "Channel": "channel",
                "HAL_LOCKED": "HAL_LOCKED",
                "HAL_TIM_STATE_BUSY": "HAL_TIM_STATE_BUSY",
                "HAL_TIM_STATE_READY": "HAL_TIM_STATE_READY",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "TIM_OC1_SetConfig": "TIM_OC1_SetConfig",
                "TIM_OC2_SetConfig": "TIM_OC2_SetConfig",
                "TIM_OC3_SetConfig": "TIM_OC3_SetConfig",
                "TIM_OC4_SetConfig": "TIM_OC4_SetConfig",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef_conflict"
            },
            "code": "HAL_StatusTypeDef_conflict set_timer_channel_config_08006128(TIM_HandleTypeDef_conflict *timer_handle, TIM_OC_InitTypeDef *timer_config, uint32_t channel)\n{\n  if (timer_handle->Lock != HAL_LOCKED) {\n    timer_handle->Lock = HAL_LOCKED;\n    timer_handle->State = HAL_TIM_STATE_BUSY;\n    switch(channel) {\n    case 0:\n      TIM_OC1_SetConfig(timer_handle->Instance, timer_config);\n      break;\n    case 4:\n      TIM_OC2_SetConfig(timer_handle->Instance, timer_config);\n      break;\n    case 8:\n      TIM_OC3_SetConfig(timer_handle->Instance, timer_config);\n      break;\n    case 0xc:\n      TIM_OC4_SetConfig(timer_handle->Instance, timer_config);\n      break;\n    }\n    timer_handle->State = HAL_TIM_STATE_READY;\n    timer_handle->Lock = HAL_UNLOCKED;\n    return HAL_OK;\n  }\n  return HAL_BUSY;\n}",
            "called": [
                "TIM_OC3_SetConfig",
                "TIM_OC1_SetConfig",
                "TIM_OC4_SetConfig",
                "TIM_OC2_SetConfig"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006128",
            "calling": [
                "TimerPulseInit"
            ],
            "imported": false,
            "current_name": "set_timer_channel_config_08006128"
        },
        "FUN_0800a258": {
            "renaming": {
                "std::ctype_byname<wchar_t>::FUN_0800a258": "set_pointers_to_one",
                "FUN_0800a258": "set_pointers_to_one_0800a258"
            },
            "code": "void set_pointers_to_one_0800a258(void)\n{\n    if (*(int *)PTR_id_0800a2ec < 0x80000000) {\n        *(undefined4 *)PTR_id_0800a2ec = 1;\n    }\n    if (*(int *)PTR_id_0800a2f0 < 0x80000000) {\n        *(undefined4 *)PTR_id_0800a2f0 = 1;\n    }\n    if (*(int *)PTR_id_0800a2f4 < 0x80000000) {\n        *(undefined4 *)PTR_id_0800a2f4 = 1;\n    }\n    if (*(int *)PTR_id_0800a2f8 < 0x80000000) {\n        *(undefined4 *)PTR_id_0800a2f8 = 1;\n    }\n    if (*(int *)PTR_id_0800a2fc < 0x80000000) {\n        *(undefined4 *)PTR_id_0800a2fc = 1;\n    }\n    if (*(int *)PTR_id_0800a300 < 0x80000000) {\n        *(undefined4 *)PTR_id_0800a300 = 1;\n    }\n    if (*(int *)PTR_id_0800a304 < 0x80000000) {\n        *(undefined4 *)PTR_id_0800a304 = 1;\n    }\n    if (*(int *)PTR_id_0800a308 < 0x80000000) {\n        *(undefined4 *)PTR_id_0800a308 = 1;\n    }\n    if (*(int *)PTR_id_0800a30c < 0x80000000) {\n        *(undefined4 *)PTR_id_0800a30c = 1;\n    }\n    if (*(int *)PTR_id_0800a310 < 0x80000000) {\n        *(undefined4 *)PTR_id_0800a310 = 1;\n    }\n    if (*(int *)PTR_id_0800a314 < 0x80000000) {\n        *(undefined4 *)PTR_id_0800a314 = 1;\n    }\n    if (*(int *)PTR_id_0800a318 < 0x80000000) {\n        *(undefined4 *)PTR_id_0800a318 = 1;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a258",
            "calling": [],
            "imported": false,
            "current_name": "set_pointers_to_one_0800a258"
        },
        "FUN_08002cb8": {
            "renaming": {
                "FUN_08002cb8": "sysex_callback_08002cb8",
                "param_1": "callback",
                "PTR_currentSysexCallback_08002ccc": "callback",
                "command": "command",
                "argc": "argc",
                "argv": "argv"
            },
            "code": "void sysex_callback_08002cb8(void *PTR_currentSysexCallback_08002ccc,uint8_t command,size_t argc,uint8_t *argv) {\n        if (*(code **)PTR_currentSysexCallback_08002ccc != (code *)0x0) {\n            (**(code **)PTR_currentSysexCallback_08002ccc)(command,argc & 0xff,argv,argv,argv);\n        }\n        return;\n    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002cb8",
            "calling": [],
            "imported": false,
            "current_name": "sysex_callback_08002cb8"
        },
        "FUN_08004a74": {
            "renaming": {
                "FUN_08004a74": "do_nothing_08004a74"
            },
            "code": "\nvoid do_nothing_08004a74(I2C_HandleTypeDef_conflict *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a74",
            "calling": [
                "I2C_SlaveReceive_RXNE",
                "I2C_Slave_STOPF"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a74"
        },
        "FUN_08008f50": {
            "renaming": {
                "FUN_08008f50": "free_gpio_irq_configuration_08008f50",
                "param_1": "list_start",
                "puVar1": "current_node",
                "puVar2": "previous_node"
            },
            "code": "void free_gpio_irq_configuration_08008f50(void *list_start){\n    undefined *current_node;\n    undefined *previous_node;\n    current_node = PTR___malloc_free_list_08008f70;\n    while (previous_node = current_node, previous_node != PTR_gpio_irq_conf_08008f74) {\n        current_node = previous_node + -0x14;\n        if (*(code **)(previous_node + -8) != (code *)0x0) {\n            (**(code **)(previous_node + -8))(previous_node + -0x10,previous_node + -0x10,3);\n        }\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f50",
            "calling": [],
            "imported": false,
            "current_name": "free_gpio_irq_configuration_08008f50"
        },
        "FUN_08004a76": {
            "renaming": {
                "FUN_08004a76": "read_byte_from_i2c_08004a76",
                "*hi2c": "*i2c_handle",
                "HVar1": "i2c_state",
                "puVar2": "buffer_ptr"
            },
            "code": "HAL_StatusTypeDef_conflict read_byte_from_i2c_08004a76(I2C_HandleTypeDef_conflict *i2c_handle) {\n  HAL_I2C_StateTypeDef_conflict i2c_state;\n  uint8_t *buffer_ptr;\n  i2c_state = i2c_handle->State;\n  if (i2c_handle->XferCount != 0) {\n    buffer_ptr = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = buffer_ptr + 1;\n    *buffer_ptr = (uint8_t)i2c_handle->Instance->DR;\n    i2c_handle->XferCount--;\n    if ((i2c_handle->XferCount == 0) && (i2c_state == HAL_I2C_STATE_BUSY_RX_LISTEN)) {\n      i2c_handle->Instance->CR2 &= 0xfffffbff;\n      i2c_handle->PreviousState = 0x22;\n      i2c_handle->State = HAL_I2C_STATE_LISTEN;\n      HAL_I2C_SlaveRxCpltCallback(i2c_handle);\n    }\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_SlaveRxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a76",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "read_byte_from_i2c_08004a76"
        },
        "FUN_0800877c": {
            "renaming": {
                "FUN_0800877c": "receive_uart_data_0800877c",
                "huart": "uart_handler",
                "tmpval": "temp_value"
            },
            "code": "void receive_uart_data_0800877c(UART_HandleTypeDef *uart_handler)\n{\n  uint32_t temp_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800877c",
            "calling": [
                "HAL_UART_IRQHandler",
                "UART_DMAAbortOnError"
            ],
            "imported": false,
            "current_name": "receive_uart_data_0800877c"
        },
        "FUN_080047f4": {
            "renaming": {
                "FUN_080047f4": "i2c_transfer_080047f4",
                "hi2c": "handle",
                "DevAddress": "dev_address",
                "pData": "data",
                "Size": "size",
                "HVar1": "status",
                "pIVar2": "i2c_instance",
                "count": "count",
                "DAT_080048c0": "global_constant",
                "PTR_SystemCoreClock_080048bc": "global_clock_ptr",
                "DAT_080048c4": "global_option"
            },
            "code": "HAL_StatusTypeDef_conflict i2c_transfer_080047f4(I2C_HandleTypeDef_conflict *handle, uint16_t dev_address, uint8_t *data, uint16_t size)\n{\n  HAL_StatusTypeDef_conflict status;\n  I2C_TypeDef_conflict *i2c_instance;\n  uint32_t count;\n  \n  if (handle->State == HAL_I2C_STATE_READY) {\n    count = (uint32_t)((uint64_t)DAT_080048c0 * (uint64_t)(*(uint32_t *)PTR_SystemCoreClock_080048bc >> 3) >> 0x28) * 0x19;\n    do {\n      if (count == 0) {\n        handle->PreviousState = 0;\n        handle->State = HAL_I2C_STATE_READY;\n        handle->Lock = HAL_UNLOCKED;\n        return HAL_TIMEOUT;\n      }\n      i2c_instance = handle->Instance;\n      count--;\n    } while ((i2c_instance->SR2 & 2) != 0);\n    if (handle->Lock == HAL_LOCKED) {\n      status = HAL_BUSY;\n    }\n    else {\n      handle->Lock = HAL_LOCKED;\n      if ((i2c_instance->CR1 & 1) == 0) {\n        i2c_instance->CR1 |= 1;\n      }\n      handle->Instance->CR1 &= 0xfffff7ff;\n      handle->State = HAL_I2C_STATE_BUSY_RX;\n      handle->Mode = HAL_I2C_MODE_MASTER;\n      status = HAL_OK;\n      handle->ErrorCode = 0;\n      handle->pBuffPtr = data;\n      handle->XferCount = size;\n      handle->XferOptions = DAT_080048c4;\n      handle->XferSize = handle->XferCount;\n      handle->Devaddress = (uint32_t)dev_address;\n      handle->Instance->CR1 |= 0x400;\n      handle->Instance->CR1 |= 0x100;\n      handle->Lock = HAL_UNLOCKED;\n      handle->Instance->CR2 |= 0x700;\n    }\n  }\n  else {\n    status = HAL_BUSY;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047f4",
            "calling": [
                "i2c_master_read"
            ],
            "imported": false,
            "current_name": "i2c_transfer_080047f4"
        },
        "FUN_08005a48": {
            "renaming": {
                "FUN_08005a48": "get_HCLK_frequency_divided_by_APB_prescaler_08005a48",
                "PTR_APBPrescTable_08005a64": "APB_prescaler_table",
                "DAT_08005a60": "data_08005a60"
            },
            "code": "uint32_t get_HCLK_frequency_divided_by_APB_prescaler_08005a48(void)\n{\n  uint32_t HCLK_frequency = HAL_RCC_GetHCLKFreq();\n  uint32_t APB_prescaler_index = (*(int *)(DAT_08005a60 + 4) << 0x12) >> 0x1d;\n  uint32_t APB_prescaler_value = PTR_APBPrescTable_08005a64[APB_prescaler_index];\n  uint32_t HCLK_frequency_divided_by_APB_prescaler = HCLK_frequency >> APB_prescaler_value;\n  return HCLK_frequency_divided_by_APB_prescaler;\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a48",
            "calling": [
                "HAL_RCCEx_GetPeriphCLKFreq",
                "getTimerClkFreq",
                "UART_SetConfig"
            ],
            "imported": false,
            "current_name": "get_HCLK_frequency_divided_by_APB_prescaler_08005a48"
        },
        "FUN_080033a8": {
            "renaming": {
                "FUN_080033a8": "parse_bytes_080033a8",
                "bytec": "num_bytes",
                "bytev": "byte_array",
                "bVar1": "current_byte",
                "sVar2": "parsed_bytes",
                "uVar3": "i"
            },
            "code": "size_t __thiscall parse_bytes_080033a8(FirmataParser *this, size_t num_bytes, uint8_t *byte_array)\n{\n  size_t parsed_bytes = 0;\n  for (size_t i = 0; i < num_bytes; i += 2) {\n    uint8_t current_byte = byte_array[i];\n    byte_array[parsed_bytes] = current_byte;\n    byte_array[parsed_bytes] = (byte_array[i + 1] << 7) | current_byte;\n    parsed_bytes++;\n  }\n  return parsed_bytes;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033a8",
            "calling": [
                "processSysexMessage"
            ],
            "imported": false,
            "current_name": "parse_bytes_080033a8"
        },
        "FUN_08008d18": {
            "renaming": {
                "FUN_08008d18": "set_tx_pin_08008d18",
                "_tx": "tx_pin_number",
                "PVar1": "tx_pin",
                "PTR_digitalPin_08008d2c": "digitalPin"
            },
            "code": "void __thiscall set_tx_pin_08008d18(HardwareSerial *this, uint32_t tx_pin_number)\n{\n  PinName tx_pin;\n  if (tx_pin_number < 0x3c) {\n    tx_pin = PTR_digitalPin_08008d2c[tx_pin_number];\n  }\n  else {\n    tx_pin = NC;\n  }\n  (this->_serial).pin_tx = tx_pin;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d18",
            "calling": [
                "HardwareSerial"
            ],
            "imported": false,
            "current_name": "set_tx_pin_08008d18"
        },
        "FUN_0800a020": {
            "renaming": {
                "FUN_0800a020": "read_and_update_data_0800a020",
                "param_1": "buffer",
                "param_2": "buffer_size",
                "iVar1": "bytes_read",
                "uVar2": "updated_offset",
                "bVar3": "read_success"
            },
            "code": "void read_and_update_data_0800a020(void* buffer, int buffer_size){\n  int bytes_read;\n  uint updated_offset;\n  bool read_success;\n  \n  bytes_read = _read_r(buffer, (int)*(short *)(buffer_size + 0xe));\n  read_success = bytes_read >= 0;\n  \n  if (read_success) {\n    updated_offset = *(int *)(buffer_size + 0x54) + bytes_read;\n  }\n  else {\n    updated_offset = *(ushort *)(buffer_size + 0xc) & 0xffffefff;\n  }\n  \n  if (read_success) {\n    *(uint *)(buffer_size + 0x54) = updated_offset;\n  }\n  \n  if (!read_success) {\n    *(short *)(buffer_size + 0xc) = (short)updated_offset;\n  }\n  return;\n}",
            "called": [
                "_read_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a020",
            "calling": [],
            "imported": false,
            "current_name": "read_and_update_data_0800a020"
        },
        "FUN_08007f7c": {
            "renaming": {
                "FUN_08007f7c": "set_i2c_slave_receive_callback_08007f7c",
                "obj": "i2c_conflict_obj",
                "function": "slave_receive_callback",
                "i2c_onSlaveReceive": "i2c_slave_receive_callback",
                "HAL_I2C_EnableListen_IT": "enable_i2c_listen_interrupt"
            },
            "code": "void set_i2c_slave_receive_callback_08007f7c(i2c_t_conflict *i2c_conflict_obj, _func_void_uint8_t_ptr_int *slave_receive_callback)\n{\n  if (i2c_conflict_obj != NULL) {\n    if (slave_receive_callback != NULL) {\n      i2c_conflict_obj->i2c_onSlaveReceive = slave_receive_callback;\n      HAL_I2C_EnableListen_IT(&i2c_conflict_obj->handle);\n    }\n    return;\n  }\n  return;\n}",
            "called": [
                "HAL_I2C_EnableListen_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f7c",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "set_i2c_slave_receive_callback_08007f7c"
        },
        "FUN_08006d80": {
            "renaming": {
                "FUN_08006d80": "read_adc_value_08006d80",
                "pin": "pin",
                "HVar1": "status",
                "uVar2": "value",
                "uhADCxConvertedValue": "converted_value",
                "AdcChannelConf": "channel_config",
                "AdcHandle": "adc_handle"
            },
            "code": "uint16_t read_adc_value_08006d80(PinName_conflict pin) {\n  HAL_StatusTypeDef_conflict status;\n  uint32_t value;\n  uint16_t converted_value = 0;\n  ADC_ChannelConfTypeDef channel_config;\n  ADC_HandleTypeDef adc_handle;\n\n  memset(&adc_handle, 0, sizeof(ADC_HandleTypeDef));\n\n  channel_config.Channel = 0;\n  channel_config.Rank = 0;\n  channel_config.SamplingTime = 0;\n\n  adc_handle.Instance = (ADC_TypeDef *)pinmap_peripheral(pin, (PinMap_conflict *)PTR_PinMap_ADC_08006e60);\n\n  if (adc_handle.Instance == (ADC_TypeDef *)0x0) {\n    return 0;\n  }\n\n  adc_handle.Init.DataAlign = 0;\n  adc_handle.Init.ScanConvMode = 0;\n  adc_handle.Init.ContinuousConvMode = 0;\n  adc_handle.Init.DiscontinuousConvMode = 0;\n  adc_handle.Init.ExternalTrigConv = 0xe0000;\n  adc_handle.State = 0;\n  adc_handle.Init.NbrOfConversion = 1;\n  adc_handle.Init.NbrOfDiscConversion = 0;\n\n  *PTR_g_current_pin_08006e64 = pin;\n  status = HAL_ADC_Init(&adc_handle);\n\n  if (status != HAL_OK) {\n    return 0;\n  }\n\n  channel_config.Channel = get_adc_channel(pin);\n\n  if (channel_config.Channel >= 0x12) {\n    return 0;\n  }\n\n  channel_config.Rank = 1;\n  channel_config.SamplingTime = 2;\n\n  status = HAL_ADC_ConfigChannel(&adc_handle, &channel_config);\n\n  if (status != HAL_OK) {\n    return 0;\n  }\n\n  status = HAL_ADCEx_Calibration_Start(&adc_handle);\n\n  if (status != HAL_OK) {\n    return 0;\n  }\n\n  status = HAL_ADC_Start(&adc_handle);\n\n  if (status != HAL_OK) {\n    return 0;\n  }\n\n  status = HAL_ADC_PollForConversion(&adc_handle, 10);\n\n  if (status != HAL_OK) {\n    return 0;\n  }\n\n  value = HAL_ADC_GetState(&adc_handle);\n\n  if ((value & 0x200) != 0) {\n    value = HAL_ADC_GetValue(&adc_handle);\n    converted_value = (uint16_t)value;\n  }\n\n  status = HAL_ADC_Stop(&adc_handle);\n\n  if (status != HAL_OK) {\n    return 0;\n  }\n\n  status = HAL_ADC_DeInit(&adc_handle);\n\n  if (status != HAL_OK) {\n    return 0;\n  }\n\n  return converted_value;\n}",
            "called": [
                "get_adc_channel",
                "memset",
                "HAL_ADC_Init",
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_PollForConversion",
                "HAL_ADC_Stop",
                "HAL_ADC_GetState",
                "pinmap_peripheral",
                "HAL_ADC_DeInit",
                "HAL_ADC_ConfigChannel",
                "HAL_ADC_GetValue",
                "HAL_ADC_Start"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d80",
            "calling": [
                "analogRead"
            ],
            "imported": false,
            "current_name": "read_adc_value_08006d80"
        },
        "FUN_08006c60": {
            "renaming": {
                "FUN_08006c60": "get_adc_function_08006c60",
                "pin": "pin",
                "uVar1": "adc_function"
            },
            "code": "uint32_t get_adc_function_08006c60(PinName_conflict pin)\n{\n  uint32_t adc_function = pinmap_function(pin, (PinMap_conflict *)PTR_PinMap_ADC_08006c78);\n  adc_function = (adc_function << 12) >> 27;\n  if (adc_function > 15) {\n    adc_function = 0;\n  }\n  return adc_function;\n}",
            "called": [
                "pinmap_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c60",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "get_adc_function_08006c60"
        },
        "FUN_08008e40": {
            "renaming": {
                "FUN_08008e40": "initialize_static_vars_and_destructors_08008e40"
            },
            "code": "void initialize_static_vars_and_destructors_08008e40(void)\n{\n  __static_initialization_and_destruction_0(1, 0xffff);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e40",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_vars_and_destructors_08008e40"
        },
        "FUN_080045c0": {
            "renaming": {
                "FUN_080045c0": "configure_i2c_080045c0",
                "hi2c": "i2c_handle",
                "bVar1": "is_valid_clock_speed",
                "uVar2": "pclk1_freq",
                "uVar3": "ccr_val",
                "uVar4": "rise_time",
                "uVar5": "prescaler_val",
                "DAT_08004714": "I2C_MAX_STANDARD_FREQ",
                "DAT_08004718": "I2C_MAX_FAST_FREQ",
                "DAT_0800471c": "I2C_PRESCALER_VALUE",
                "DAT_08004720": "I2C_MAX_STANDARD_FREQ_THRESHOLD",
                "DAT_08004724": "I2C_CCR_VALUE_FAST_MODE",
                "HAL_I2C_StateTypeDef_conflict": "HAL_I2C_STATE_*",
                "HAL_I2C_InitTypeDef_conflict": "HAL_I2C_Init_*",
                "HAL_I2C_ModeTypeDef": "HAL_I2C_MODE_*",
                "HAL_StatusTypeDef_conflict": "HAL_*",
                "HAL_I2C_MspInit": "HAL_I2C_MspInit"
            },
            "code": "HAL_StatusTypeDef_conflict configure_i2c_080045c0(I2C_HandleTypeDef_conflict *i2c_handle)\n{\n    bool is_valid_clock_speed;\n    uint32_t pclk1_freq, ccr_val, rise_time, prescaler_val;\n    uint clock_speed = i2c_handle->Init.ClockSpeed;\n\n    if (i2c_handle == NULL) {\n        return HAL_ERROR;\n    }\n\n    if (i2c_handle->State == HAL_I2C_STATE_RESET) {\n        i2c_handle->Lock = HAL_UNLOCKED;\n        HAL_I2C_MspInit(i2c_handle);\n    }\n\n    i2c_handle->State = HAL_I2C_STATE_BUSY;\n    i2c_handle->Instance->CR1 &= ~(1 << 0);\n    pclk1_freq = HAL_RCC_GetPCLK1Freq();\n\n    if (clock_speed <= 100000) {\n        is_valid_clock_speed = (pclk1_freq <= 400000);\n    }\n    else {\n        is_valid_clock_speed = (pclk1_freq <= 1000000);\n    }\n\n    if (!is_valid_clock_speed) {\n        return HAL_ERROR;\n    }\n\n    prescaler_val = (uint)((uint64_t)DAT_0800471c * pclk1_freq / 1000000) + 1;\n    i2c_handle->Instance->CR2 = prescaler_val;\n\n    if (clock_speed <= 100000) {\n        ccr_val = (uint)((uint64_t)I2C_CCR_VALUE_STD_MODE * pclk1_freq / (prescaler_val * clock_speed));\n        rise_time = (uint)((uint64_t)I2C_RISE_TIME_STD_MODE * pclk1_freq / 1000000) + 1;\n    }\n    else {\n        ccr_val = (uint)((uint64_t)DAT_08004724 * pclk1_freq / (prescaler_val * clock_speed));\n        rise_time = (uint)((uint64_t)I2C_RISE_TIME_FAST_MODE * pclk1_freq / 1000000) + 1;\n    }\n\n    if (ccr_val < 4) {\n        ccr_val = 4;\n    }\n\n    i2c_handle->Instance->CCR = ccr_val;\n    i2c_handle->Instance->TRISE = rise_time;\n    i2c_handle->Instance->CR1 = i2c_handle->Init.GeneralCallMode | i2c_handle->Init.NoStretchMode;\n    i2c_handle->Instance->OAR1 = i2c_handle->Init.AddressingMode | i2c_handle->Init.OwnAddress1;\n    i2c_handle->Instance->OAR2 = i2c_handle->Init.DualAddressMode | i2c_handle->Init.OwnAddress2;\n    i2c_handle->Instance->CR1 |= (1 << 0);\n    i2c_handle->ErrorCode = 0;\n    i2c_handle->State = HAL_I2C_STATE_READY;\n    i2c_handle->PreviousState = 0;\n    i2c_handle->Mode = HAL_I2C_MODE_NONE;\n    return HAL_OK;\n}",
            "called": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_I2C_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045c0",
            "calling": [
                "i2c_custom_init"
            ],
            "imported": false,
            "current_name": "configure_i2c_080045c0"
        },
        "FUN_08007e74": {
            "renaming": {
                "FUN_08007e74": "i2c_transmit_08007e74",
                "obj": "i2c_obj",
                "dev_address": "device_address",
                "data": "data",
                "size": "size",
                "HVar1": "state",
                "HVar2": "status",
                "uVar3": "start_time",
                "uVar4": "error",
                "uVar5": "retry_count",
                "iVar6": "return_value",
                "hi2c": "hi2c"
            },
            "code": "i2c_status_e_conflict i2c_transmit_08007e74(i2c_t_conflict *i2c_obj, uint8_t device_address, uint8_t *data, uint16_t size) {\n  HAL_I2C_StateTypeDef_conflict state;\n  HAL_StatusTypeDef_conflict status;\n  uint32_t start_time = HAL_GetTick();\n  uint32_t elapsed_time = 0;\n  uint8_t retry_count = 0;\n  i2c_status_e_conflict return_value = I2C_ERROR;\n  I2C_HandleTypeDef_conflict *hi2c;\n  do {\n    hi2c = &i2c_obj->handle;\n    status = HAL_I2C_Master_Transmit_IT(hi2c, (uint16_t)device_address, data, size);\n    if (status == HAL_OK) {\n      return_value = I2C_OK;\n      while ((state = HAL_I2C_GetState(hi2c)) != HAL_I2C_STATE_READY && (return_value == I2C_OK)) {\n        elapsed_time = HAL_GetTick() - start_time;\n        if (elapsed_time < 0x65) {\n          uint32_t error = HAL_I2C_GetError(hi2c);\n          if (error != 0) {\n            return_value = I2C_ERROR;\n          }\n        }\n        else {\n          return_value = I2C_TIMEOUT;\n        }\n      }\n    }\n    uint32_t error = HAL_I2C_GetError(hi2c);\n    retry_count++;\n  } while ((error == 4) && (elapsed_time < 100));\n  return return_value;\n}",
            "called": [
                "HAL_GetTick",
                "HAL_I2C_Master_Transmit_IT",
                "HAL_I2C_GetState",
                "HAL_I2C_GetError"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e74",
            "calling": [
                "endTransmission"
            ],
            "imported": false,
            "current_name": "i2c_transmit_08007e74"
        },
        "FUN_08002efe": {
            "renaming": {
                "FUN_08002efe": "send_port_data_08002efe",
                "portNumber": "port_number",
                "portData": "port_data",
                "marshaller": "marshaller"
            },
            "code": "void __thiscall firmata::FirmataClass::send_port_data_08002efe(FirmataClass *this, byte port_number, int port_data)\n{\n    FirmataMarshaller::send_port_data_08002efe(&this->marshaller, port_number, (uint16_t)port_data);\n    return;\n}",
            "called": [
                "sendDigitalPort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efe",
            "calling": [
                "outputPort"
            ],
            "imported": false,
            "current_name": "send_port_data_08002efe"
        },
        "FUN_08002ddc": {
            "renaming": {
                "FUN_08002ddc": "send_firmware_version_08002ddc",
                "this": "firmata_instance"
            },
            "code": "void __thiscall send_firmware_version_08002ddc(FirmataClass *firmata_instance)\n{\n    FirmataMarshaller::sendVersion(&firmata_instance->marshaller, '\\x02', '\\x05');\n    return;\n}",
            "called": [
                "sendVersion"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ddc",
            "calling": [
                "staticReportVersionCallback",
                "begin"
            ],
            "imported": false,
            "current_name": "send_firmware_version_08002ddc"
        },
        "FUN_08009f2c": {
            "renaming": {
                "FUN_08009f2c": "find_byte_in_memory_08009f2c",
                "__s": "memory",
                "__c": "byte_to_find",
                "__n": "size_of_memory",
                "pbVar1": "current_byte",
                "pbVar2": "current_byte_checked"
            },
            "code": "void* find_byte_in_memory_08009f2c(void* memory, int byte_to_find, size_t size_of_memory){\n  unsigned char* current_byte = (unsigned char*) memory;\n  while(current_byte < (unsigned char*) memory + size_of_memory){\n    if(*current_byte == (unsigned char) byte_to_find){\n      return (void*) current_byte;\n    }\n    current_byte++;\n  }\n  return NULL;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f2c",
            "calling": [
                "_vfiprintf_r",
                "_printf_i"
            ],
            "imported": false,
            "current_name": "find_byte_in_memory_08009f2c"
        },
        "FUN_0800a154": {
            "renaming": {
                "FUN_0800a154": "calculate_new_index_0800a154",
                "param_1": "unused_param",
                "param_2": "data",
                "iVar1": "current_index",
                "*(int *)(param_2 + -4)": "data[current_index]",
                "new_index": "new_index"
            },
            "code": "int calculate_new_index_0800a154(int current_index, int* data){\n  int new_index = current_index - 4;\n  if (current_index < 0) {\n    new_index += *(data - new_index);\n  }\n  return new_index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a154",
            "calling": [
                "_realloc_r"
            ],
            "imported": false,
            "current_name": "calculate_new_index_0800a154"
        },
        "FUN_08007f8e": {
            "renaming": {
                "FUN_08007f8e": "set_i2c_slave_transmit_callback_08007f8e",
                "obj": "i2c_conflict_obj",
                "function": "transmit_callback",
                "i2c_onSlaveTransmit": "transmit_callback_function",
                "PTR_i2c_t_conflict": "i2c_conflict_obj_pointer",
                "PTR__func_void": "transmit_callback_pointer",
                "DAT_08007f8d": "NULL",
                "DAT_08007f8f": "NULL",
                "HAL_I2C_EnableListen_IT": "enable_i2c_listen_interrupt"
            },
            "code": "void set_i2c_slave_transmit_callback_08007f8e(i2c_t_conflict *i2c_conflict_obj, _func_void *transmit_callback) {\n  if (i2c_conflict_obj != DAT_08007f8d) {\n    if (transmit_callback != DAT_08007f8d) {\n      i2c_conflict_obj->i2c_onSlaveTransmit = transmit_callback;\n      HAL_I2C_EnableListen_IT(&i2c_conflict_obj->handle);\n    }\n  }\n}",
            "called": [
                "HAL_I2C_EnableListen_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f8e",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "set_i2c_slave_transmit_callback_08007f8e"
        },
        "FUN_08006b3e": {
            "renaming": {
                "FUN_08006b3e": "update_pin_map_08006b3e",
                "pin": "pin_name",
                "map": "pin_map",
                "uVar1": "pin_index",
                "1": "pin_mask"
            },
            "code": "void update_pin_map_08006b3e(PinName_conflict pin, uint32_t *map) {\n  uint32_t pin_index = (uint32_t)pin >> 4;\n  uint32_t pin_mask = 1 << ((uint32_t)pin & 0xf);\n  map[pin_index] |= pin_mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b3e",
            "calling": [
                "analogWrite",
                "pinMode"
            ],
            "imported": false,
            "current_name": "update_pin_map_08006b3e"
        },
        "FUN_08006262": {
            "renaming": {
                "FUN_08006262": "set_channel_state_08006262",
                "TIMx": "timer",
                "Channel": "channel",
                "ChannelState": "channel_state",
                "CCER": "channel_control_register",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void set_channel_state_08006262(TIM_TypeDef_conflict *timer, uint32_t channel, uint32_t channel_state) {\n  uint32_t channel_mask = 1 << (channel & 0xff);\n  timer->CCER &= ~channel_mask;\n  timer->CCER |= (channel_state << (channel & 0xff));\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006262",
            "calling": [
                "HAL_TIM_PWM_Stop",
                "HAL_TIM_OC_Stop_IT",
                "HAL_TIM_OC_Start_IT",
                "HAL_TIM_PWM_Start"
            ],
            "imported": false,
            "current_name": "set_channel_state_08006262"
        },
        "FUN_08007110": {
            "renaming": {
                "FUN_08007110": "disable_timer_clock_08007110",
                "htim": "timer_handle"
            },
            "code": "void disable_timer_clock_08007110(TIM_HandleTypeDef_conflict *timer_handle)\n{\n  timer_disable_clock(timer_handle);\n  return;\n}",
            "called": [
                "timer_disable_clock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007110",
            "calling": [
                "HAL_TIM_PWM_DeInit"
            ],
            "imported": false,
            "current_name": "disable_timer_clock_08007110"
        },
        "FUN_08007594": {
            "renaming": {
                "FUN_08007594": "determine_timer_instance_type_08007594",
                "tim": "timer",
                "DAT_080075d0": "timer_instance_1",
                "DAT_080075d4": "timer_instance_2",
                "PTR_s_TIM__Unknown_timer_instance_080075d8": "unknown_timer_instance_message"
            },
            "code": "uint8_t determine_timer_instance_type_08007594(TIM_TypeDef_conflict *timer) {\\n  if (timer == (TIM_TypeDef_conflict *)0xffffffff) {\\n    return \"\\0\";\\n  }\\n  if (timer == DAT_080075d0) {\\n    return \"\\x01\";\\n  }\\n  if (DAT_080075d0 < timer) {\\n    if (timer == DAT_080075d4) {\\n      return \"\\x01\";\\n    }\\n    if (timer == (TIM_TypeDef_conflict *)&DAT_080075d4[0x379].DMAR) {\\n      return \"\\x02\";\\n    }\\n  }\\n  else if (timer == (TIM_TypeDef_conflict *)0x40000000) {\\n    return \"\\x01\";\\n  }\\n  iprintf(PTR_s_TIM__Unknown_timer_instance_080075d8);\\n  return \"\\0\";\\n}",
            "called": [
                "iprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007594",
            "calling": [
                "getTimerClkFreq"
            ],
            "imported": false,
            "current_name": "determine_timer_instance_type_08007594"
        },
        "FUN_08002cd0": {
            "renaming": {
                "FUN_08002cd0": "system_reset_callback_08002cd0",
                "param_1": "reset_callback",
                "PTR_currentSystemResetCallback_08002cdc": "current_system_reset_callback"
            },
            "code": "void system_reset_callback_08002cd0(void *reset_callback) {\n  if (*(code **)PTR_currentSystemResetCallback_08002cdc != (code *)0x0) {\n    (**(code **)PTR_currentSystemResetCallback_08002cdc)();\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002cd0",
            "calling": [],
            "imported": false,
            "current_name": "system_reset_callback_08002cd0"
        },
        "FUN_08002df6": {
            "renaming": {
                "FUN_08002df6": "send_firmware_version_08002df6",
                "this": "firmata_instance",
                "puVar1": "firmware_version_array",
                "firmwareVersionCount": "firmware_version_count",
                "firmwareVersionVector": "firmware_version_vector",
                "FirmataMarshaller::sendFirmwareVersion": "FirmataMarshaller::sendFirmwareVersion",
                "&this->marshaller": "&firmata_instance->marshaller"
            },
            "code": "void __thiscall send_firmware_version_08002df6(FirmataClass *firmata_instance) {\n  uint8_t *firmware_version_array;\n  if (firmata_instance->firmware_version_count == 0) {\n    return;\n  }\n  firmware_version_array = firmata_instance->firmware_version_vector;\n  FirmataMarshaller::sendFirmwareVersion(&firmata_instance->marshaller, *firmware_version_array, firmware_version_array[1], firmata_instance->firmware_version_count - 2, firmware_version_array + 2);\n  return;\n}",
            "called": [
                "sendFirmwareVersion"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002df6",
            "calling": [
                "begin",
                "staticReportFirmwareCallback"
            ],
            "imported": false,
            "current_name": "send_firmware_version_08002df6"
        },
        "FUN_080045bc": {
            "renaming": {
                "FUN_080045bc": "do_nothing_080045bc"
            },
            "code": "\nvoid do_nothing_080045bc(I2C_HandleTypeDef_conflict *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045bc",
            "calling": [
                "HAL_I2C_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_080045bc"
        },
        "FUN_08007118": {
            "renaming": {
                "FUN_08007118": "set_pwm_pin_08007118",
                "pin": "pin_name",
                "clock_freq": "clock_frequency",
                "period": "period",
                "value": "pulse_value",
                "do_init": "do_initialize",
                "HVar1": "hal_status",
                "uVar2": "timer_clk_freq",
                "uVar3": "pwm_function",
                "timConfig": "pwm_config",
                "timHandle": "pwm_timer_handle"
            },
            "code": "void set_pwm_pin_08007118(PinName_conflict pin, uint32_t clock_frequency, uint32_t period, uint32_t pulse_value, uint8_t do_init)\n{\n  HAL_StatusTypeDef_conflict hal_status;\n  uint32_t timer_clk_freq;\n  uint32_t pwm_channel_num;\n  TIM_OC_InitTypeDef pwm_config;\n  TIM_HandleTypeDef_conflict pwm_timer_handle;\n  memset(&pwm_timer_handle, 0, 0x40);\n  pwm_config.OCMode = 0;\n  pwm_config.Pulse = 0;\n  pwm_config.OCPolarity = 0;\n  pwm_config.OCNPolarity = 0;\n  pwm_config.OCFastMode = 0;\n  pwm_config.OCIdleState = 0;\n  pwm_config.OCNIdleState = 0;\n  pwm_timer_handle.Instance = (TIM_TypeDef_conflict *)pinmap_peripheral(pin, (PinMap_conflict *)PTR_PinMap_PWM_080071dc);\n  if (pwm_timer_handle.Instance != (TIM_TypeDef_conflict *)0x0) {\n    timer_clk_freq = getTimerClkFreq(pwm_timer_handle.Instance);\n    pwm_timer_handle.Init.Prescaler = timer_clk_freq / clock_frequency - 1;\n    pwm_timer_handle.Init.Period = period - 1;\n    pwm_timer_handle.Init.ClockDivision = 0;\n    pwm_timer_handle.Init.CounterMode = 0;\n    pwm_timer_handle.Init.RepetitionCounter = 0;\n    pwm_timer_handle.State = HAL_TIM_STATE_RESET;\n    if (do_init == '\\x01') {\n      *g_current_pin = pin;\n      hal_status = HAL_TIM_PWM_Init(&pwm_timer_handle);\n      if (hal_status != HAL_OK) {\n        return;\n      }\n    }\n    pwm_channel_num = get_pwm_channel(pin);\n    if ((((pwm_channel_num == 0) || (pwm_channel_num == 4)) || (pwm_channel_num == 8)) || ((pwm_channel_num == 0xc || (pwm_channel_num == 0x18)))) {\n      pwm_config.OCMode = 0x60;\n      pwm_config.OCPolarity = 0;\n      pwm_config.OCFastMode = 0;\n      pwm_config.OCNPolarity = 0;\n      pwm_config.OCNIdleState = 0;\n      pwm_config.OCIdleState = 0;\n      pwm_config.Pulse = pulse_value;\n      hal_status = HAL_TIM_PWM_ConfigChannel(&pwm_timer_handle, &pwm_config, pwm_channel_num);\n      if (hal_status == HAL_OK) {\n        uint32_t pwm_function = pinmap_function(pin, (PinMap_conflict *)PTR_PinMap_PWM_080071dc);\n        if ((pwm_function & 0x100000) == 0) {\n          HAL_TIM_PWM_Start(&pwm_timer_handle, pwm_channel_num);\n        }\n        else {\n          HAL_TIMEx_PWMN_Start(&pwm_timer_handle, pwm_channel_num);\n        }\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "pinmap_function",
                "memset",
                "get_pwm_channel",
                "HAL_TIM_PWM_Init",
                "getTimerClkFreq",
                "HAL_TIMEx_PWMN_Start",
                "pinmap_peripheral",
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_TIM_PWM_Start"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007118",
            "calling": [
                "analogWrite"
            ],
            "imported": false,
            "current_name": "set_pwm_pin_08007118"
        },
        "FUN_08001be8": {
            "renaming": {
                "FUN_08001be8": "initialize_static_variables_08001be8"
            },
            "code": "void initialize_static_variables_08001be8(void)\n{\n    __static_initialization_and_destruction_0(1, 0xFFFF);\n    return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001be8",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_variables_08001be8"
        },
        "FUN_08005a68": {
            "renaming": {
                "FUN_08005a68": "configure_rcc_clocks_08005a68",
                "RCC_ClkInitStruct_conflict": "clock_init_struct",
                "pFLatency": "flash_latency",
                "iVar1": "temp_var",
                "ClockType": "RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2",
                "SYSCLKSource": "RCC_SYSCLKSOURCE_STATUS_MASK",
                "AHBCLKDivider": "RCC_AHBCLK_DIVIDER_MASK",
                "APB1CLKDivider": "RCC_APB1CLK_DIVIDER_MASK",
                "APB2CLKDivider": "RCC_APB2CLK_DIVIDER_MASK",
                "*DAT_08005aa0": "FLASH_LATENCY_MASK"
            },
            "code": "void configure_rcc_clocks_08005a68(RCC_ClkInitTypeDef_conflict *clock_init_struct, uint32_t *flash_latency) {\n  int temp_var;\n  clock_init_struct->ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;\n  temp_var = PTR_DAT_08005a9c;\n  clock_init_struct->SYSCLKSource = *(uint32_t *)(PTR_DAT_08005a9c + 4) & RCC_SYSCLKSOURCE_STATUS_MASK;\n  clock_init_struct->AHBCLKDivider = *(uint32_t *)(temp_var + 4) & RCC_AHBCLK_DIVIDER_MASK;\n  clock_init_struct->APB1CLKDivider = *(uint32_t *)(temp_var + 4) & RCC_APB1CLK_DIVIDER_MASK;\n  clock_init_struct->APB2CLKDivider = *(uint32_t *)(temp_var + 4) >> 3 & RCC_APB2CLK_DIVIDER_MASK;\n  *flash_latency = *PTR_DAT_08005aa0 & *DAT_08005aa0;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a68",
            "calling": [
                "getTimerClkFreq"
            ],
            "imported": false,
            "current_name": "configure_rcc_clocks_08005a68"
        },
        "FUN_08008f78": {
            "renaming": {
                "FUN_08008f78": "initialize_gpio_irq_configuration_08008f78",
                "__initialize_p": "should_initialize",
                "__priority": "priority",
                "puVar1": "gpio_irq_conf"
            },
            "code": "void initialize_gpio_irq_configuration_08008f78(int should_initialize, int priority) {\n  undefined *gpio_irq_conf = PTR_gpio_irq_conf_08009018;\n  if (should_initialize != 1) {\n    return;\n  }\n  if (priority == 0xffff) {\n    gpio_irq_conf[0] = 6;\n    *(undefined4 *)(gpio_irq_conf + 0xc) = 0;\n    gpio_irq_conf[0x14] = 7;\n    *(undefined4 *)(gpio_irq_conf + 0x20) = 0;\n    gpio_irq_conf[0x28] = 8;\n    *(undefined4 *)(gpio_irq_conf + 0x34) = 0;\n    gpio_irq_conf[0x3c] = 9;\n    *(undefined4 *)(gpio_irq_conf + 0x48) = 0;\n    gpio_irq_conf[0x50] = 10;\n    *(undefined4 *)(gpio_irq_conf + 0x5c) = 0;\n    gpio_irq_conf[100] = 0x17;\n    *(undefined4 *)(gpio_irq_conf + 0x70) = 0;\n    gpio_irq_conf[0x78] = 0x17;\n    *(undefined4 *)(gpio_irq_conf + 0x84) = 0;\n    gpio_irq_conf[0x8c] = 0x17;\n    *(undefined4 *)(gpio_irq_conf + 0x98) = 0;\n    gpio_irq_conf[0xa0] = 0x17;\n    *(undefined4 *)(gpio_irq_conf + 0xac) = 0;\n    gpio_irq_conf[0xb4] = 0x17;\n    *(undefined4 *)(gpio_irq_conf + 0xc0) = 0;\n    gpio_irq_conf[200] = 0x28;\n    *(undefined4 *)(gpio_irq_conf + 0xd4) = 0;\n    gpio_irq_conf[0xdc] = 0x28;\n    *(undefined4 *)(gpio_irq_conf + 0xe8) = 0;\n    gpio_irq_conf[0xf0] = 0x28;\n    *(undefined4 *)(gpio_irq_conf + 0xfc) = 0;\n    gpio_irq_conf[0x104] = 0x28;\n    *(undefined4 *)(gpio_irq_conf + 0x110) = 0;\n    gpio_irq_conf[0x118] = 0x28;\n    *(undefined4 *)(gpio_irq_conf + 0x124) = 0;\n    gpio_irq_conf[300] = 0x28;\n    *(undefined4 *)(gpio_irq_conf + 0x138) = 0;\n    __aeabi_atexit(0, DAT_08009020, PTR___dso_handle_0800901c);\n  }\n  return;\n}",
            "called": [
                "__aeabi_atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f78",
            "calling": [
                "_GLOBAL__sub_I__Z22stm32_interrupt_enableP12GPIO_TypeDeftSt8functionIFvvEEm"
            ],
            "imported": false,
            "current_name": "initialize_gpio_irq_configuration_08008f78"
        },
        "FUN_08002dea": {
            "renaming": {
                "FUN_08002dea": "print_version_if_context_not_null_08002dea",
                "context": "context",
                "printVersion": "printVersion",
                "FirmataClass": "FirmataClass",
                "nullptr": "nullptr",
                "reinterpret_cast": "reinterpret_cast"
            },
            "code": "void print_version_if_context_not_null_08002dea(void *context) {\n  if (context != nullptr) {\n    printVersion(reinterpret_cast<FirmataClass *>(context));\n    return;\n  }\n  return;\n}",
            "called": [
                "printVersion"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002dea",
            "calling": [],
            "imported": false,
            "current_name": "print_version_if_context_not_null_08002dea"
        },
        "FUN_08008d30": {
            "renaming": {
                "FUN_08008d30::FUN_08008d30": "initialize_serial",
                "this": "serial_obj",
                "peripheral": "peripheral",
                "PVar1": "rx_pin",
                "extraout_r1": "ctx_1",
                "extraout_r1_00": "ctx_2",
                "PTR_Serial2_08008d80": "Serial2_ptr",
                "PTR_PinMap_UART_RX_08008d84": "PinMap_UART_RX_ptr",
                "PTR_PinMap_UART_TX_08008d88": "PinMap_UART_TX_ptr",
                "FUN_08008d30": "initialize_serial_08008d30"
            },
            "code": "initialize_serial_08008d30 * __thiscall initialize_serial_08008d30(initialize_serial_08008d30 *serial_obj, void *peripheral) {\n  PinName_conflict rx_pin;\n  EVP_PKEY_CTX *ctx_1;\n  EVP_PKEY_CTX *ctx_2;\n  (serial_obj->super_Stream).super_Print.write_error = 0;\n  (serial_obj->super_Stream)._timeout = 1000;\n  (serial_obj->super_Stream).super_Print._vptr_Print = (_func_int_varargs **)write_1_ptr_ptr;\n  if (serial_obj == (initialize_serial_08008d30 *)PTR_Serial2_08008d80) {\n    setRx(serial_obj, 0);\n    setTx(serial_obj, 1);\n    ctx_1 = extraout_r1_00;\n  }\n  else {\n    rx_pin = pinmap_pin(peripheral, (PinMap_conflict *)PTR_PinMap_UART_RX_08008d84);\n    (serial_obj->_serial).pin_rx = rx_pin;\n    PinName_conflict tx_pin = pinmap_pin(peripheral, (PinMap_conflict *)PTR_PinMap_UART_TX_08008d88);\n    (serial_obj->_serial).pin_tx = tx_pin;\n    ctx_1 = extraout_r1;\n  }\n  init(serial_obj, ctx_2);\n  return serial_obj;\n}",
            "called": [
                "init",
                "pinmap_pin",
                "setTx",
                "setRx"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d30",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "initialize_serial_08008d30"
        },
        "FUN_0800734a": {
            "renaming": {
                "FUN_0800734a": "find_pin_name_0800734a",
                "PinName_conflict": "PinName_conflict",
                "PinMap_conflict": "PinMap_conflict",
                "PVar1": "pin_name",
                "peripheral": "peripheral",
                "map": "map",
                "NC": "NC"
            },
            "code": "PinName_conflict find_pin_name_0800734a(void *peripheral, PinMap_conflict *map) {\n    PinName_conflict pin_name;\n    if (peripheral != NULL) {\n        pin_name = pinmap_find_pin(peripheral, map);\n        return pin_name;\n    }\n    return NC;\n}",
            "called": [
                "pinmap_find_pin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800734a",
            "calling": [
                "uart_debug_init",
                "HardwareSerial"
            ],
            "imported": false,
            "current_name": "find_pin_name_0800734a"
        },
        "FUN_08000aec": {
            "renaming": {
                "FUN_08000aec": "reset_pins_state_08000aec",
                "bVar1": "is_high_impedance",
                "PVar2": "pin_conflict",
                "uVar3": "digital_pin_num",
                "uVar4": "pin_num",
                "PTR_isResetting_08000bc0": "is_resetting",
                "PTR_isI2CEnabled_08000bc4": "is_i2c_enabled_ptr",
                "PTR_reportPINs_08000bc8": "report_pins_ptr",
                "PTR_portConfigInputs_08000bcc": "port_config_inputs_ptr",
                "PTR_previousPINs_08000bd0": "previous_pins_ptr",
                "PTR_digitalPin_08000bd4": "digital_pin_ptr",
                "NC": "NC",
                "pinNametoDigitalPin": "pin_name_to_digital_pin",
                "setPinModeCallback": "set_pin_mode_callback",
                "PTR_servoPinMap_08000bd8": "servo_pin_map_ptr",
                "PTR_analogInputsToReport_08000bdc": "analog_inputs_to_report_ptr",
                "PTR_detachedServoCount_08000be0": "detached_servo_count_ptr",
                "PTR_servoCount_08000be4": "servo_count_ptr"
            },
            "code": "void reset_pins_state_08000aec(void)\\n{\\n    bool is_i2c_enabled;\\n    PinName_conflict pin_conflict;\\n    uint32_t digital_pin_num;\\n    uint pin_num;\\n\\n    *PTR_isResetting_08000bc0 = 1;\\n    is_i2c_enabled = (*PTR_isI2CEnabled_08000bc4 != \"\\0\");\\n    if (is_i2c_enabled) {\\n        disableI2CPins();\\n    }\\n    for (pin_num = 0; pin_num < 5; pin_num++) {\\n        PTR_reportPINs_08000bc8[pin_num] = 0;\\n        PTR_portConfigInputs_08000bcc[pin_num] = 0;\\n        PTR_previousPINs_08000bd0[pin_num] = 0;\\n    }\\n    for (pin_num = 0; pin_num < 0x3c; pin_num++) {\\n        if ((pin_num - 0x2e & 0xff) < 0xe) {\\n            if (pin_num < 0x3c) {\\n                pin_conflict = PTR_digitalPin_08000bd4[pin_num];\\n            }\\n            else {\\n                pin_conflict = NC;\\n            }\\n            digital_pin_num = pinNametoDigitalPin(pin_conflict);\\n            if (digital_pin_num == 0) {\\n                bool is_high_impedance = false;\\n            }\\n            else {\\n                if (pin_num < 0x3c) {\\n                    pin_conflict = PTR_digitalPin_08000bd4[pin_num];\\n                }\\n                else {\\n                    pin_conflict = NC;\\n                }\\n                digital_pin_num = pinNametoDigitalPin(pin_conflict);\\n                bool is_high_impedance = (digital_pin_num != 1);\\n            }\\n            if (is_high_impedance) {\\n                setPinModeCallback((byte)pin_num, 2);\\n            }\\n            else {\\n                if ((((pin_num < 0x3c) && (PTR_digitalPin_08000bd4[pin_num] != NC)) &&\\n                    (digital_pin_num = pinNametoDigitalPin(PTR_digitalPin_08000bd4[pin_num]), digital_pin_num != 0)) &&\\n                    (digital_pin_num = pinNametoDigitalPin(PTR_digitalPin_08000bd4[pin_num]), digital_pin_num != 1)) {\\n                    bool is_servo_pin = true;\\n                }\\n                if (is_servo_pin) {\\n                    setPinModeCallback((byte)pin_num, 1);\\n                }\\n            }\\n        }\\n        PTR_servoPinMap_08000bd8[pin_num] = 0xff;\\n    }\\n    *(undefined4 *)PTR_analogInputsToReport_08000bdc = 0;\\n    *PTR_detachedServoCount_08000be0 = 0;\\n    *PTR_servoCount_08000be4 = 0;\\n    *PTR_isResetting_08000bc0 = 0;\\n    return;\\n}",
            "called": [
                "disableI2CPins",
                "pinNametoDigitalPin",
                "setPinModeCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aec",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "reset_pins_state_08000aec"
        },
        "FUN_080068d6": {
            "renaming": {
                "FUN_080068d6": "configure_uart_080068d6",
                "huart": "uart_handle",
                "pData": "data",
                "Size": "size",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "HAL_UART_STATE_READY": "HAL_UART_STATE_READY",
                "HAL_BUSY": "HAL_BUSY",
                "HAL_ERROR": "HAL_ERROR",
                "HAL_LOCKED": "HAL_LOCKED",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "pRxBuffPtr": "p_rx_buff_ptr",
                "RxXferSize": "rx_xfer_size",
                "RxXferCount": "rx_xfer_count",
                "ErrorCode": "error_code",
                "RxState": "rx_state",
                "Instance": "instance"
            },
            "code": "HAL_StatusTypeDef_conflict configure_uart_080068d6(UART_HandleTypeDef *uart_handle, uint8_t *data, uint16_t size)\n{\n    if (uart_handle->RxState != HAL_UART_STATE_READY) {\n        return HAL_BUSY;\n    }\n    if (data == NULL) {\n        return HAL_ERROR;\n    }\n    if (size == 0) {\n        return HAL_ERROR;\n    }\n    if (uart_handle->Lock != HAL_LOCKED) {\n        uart_handle->pRxBuffPtr = data;\n        uart_handle->RxXferSize = size;\n        uart_handle->RxXferCount = size;\n        uart_handle->ErrorCode = 0;\n        uart_handle->RxState = HAL_UART_STATE_BUSY_RX;\n        uart_handle->Lock = HAL_UNLOCKED;\n        uart_handle->Instance->CR1 |= USART_CR1_RXNEIE;\n        uart_handle->Instance->CR3 |= USART_CR3_EIE;\n        uart_handle->Instance->CR1 |= USART_CR1_UE;\n        return HAL_OK;\n    }\n    return HAL_BUSY;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080068d6",
            "calling": [
                "uart_attach_rx_callback",
                "uart_getc"
            ],
            "imported": false,
            "current_name": "configure_uart_080068d6"
        },
        "FUN_080032a2": {
            "renaming": {
                "FUN_080032a2": "send_sysex_message_080032a2",
                "this": "marshaller",
                "string": "message",
                "bytec": "message_length",
                "sendSysex": "sendSysex"
            },
            "code": "void __thiscall send_sysex_message_080032a2(FirmataMarshaller *marshaller, char *message) {\n  size_t message_length;\n  message_length = strlen(message);\n  sendSysex(marshaller, 'q', message_length, (uint8_t *)message);\n  return;\n}",
            "called": [
                "sendSysex",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032a2",
            "calling": [
                "sendString"
            ],
            "imported": false,
            "current_name": "send_sysex_message_080032a2"
        },
        "FUN_08009e28": {
            "renaming": {
                "FUN_08009e28": "process_data_08009e28",
                "param_1": "data",
                "param_2": "callback",
                "param_3": "arg1",
                "param_4": "arg2",
                "uVar1": "callback_result",
                "iVar2": "callback_arg",
                "piVar3": "ptr",
                "iVar4": "data_ptr",
                "uVar5": "result",
                "iVar6": "count"
            },
            "code": "uint process_data_08009e28(int data, code *callback, undefined4 arg1, undefined4 arg2)\n{\n  uint result = 0;\n  for (int *ptr = (int *)(data + 0x48); ptr != (int *)0x0; ptr = (int *)*ptr) {\n    int data_ptr = ptr[2];\n    int count = ptr[1];\n    while (count = count - 1, count > -1) {\n      if ((1 < *(ushort *)(data_ptr + 0xc)) && (*(short *)(data_ptr + 0xe) + 1 != 0)) {\n        uint callback_result = (*callback)(data, data_ptr, arg1, *(short *)(data_ptr + 0xe) + 1, arg2);\n        result = result | callback_result;\n      }\n      data_ptr += 0x68;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e28",
            "calling": [
                "_cleanup_r"
            ],
            "imported": false,
            "current_name": "process_data_08009e28"
        },
        "FUN_0800a01c": {
            "renaming": {
                "FUN_0800a01c": "get_process_id_0800a01c"
            },
            "code": "__pid_t get_process_id_0800a01c(void)\n{\n  return 1;\n}",
            "called": [
                "_getpid"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a01c",
            "calling": [
                "_raise_r"
            ],
            "imported": false,
            "current_name": "get_process_id_0800a01c"
        },
        "FUN_08006390": {
            "renaming": {
                "FUN_08006390": "configure_timer_channel_08006390",
                "htim": "timer_handle",
                "Channel": "channel",
                "pTVar1": "timer_instance",
                "DAT_080063bc": "timer_instance_pointer"
            },
            "code": "HAL_StatusTypeDef_conflict configure_timer_channel_08006390(TIM_HandleTypeDef_conflict *timer_handle, uint32_t channel) {\n  TIM_TypeDef_conflict *timer_instance;\n  TIM_CCxChannelCmd(timer_handle->Instance, channel, 1);\n  timer_instance = timer_handle->Instance;\n  if (timer_instance == DAT_080063bc) {\n    timer_instance->BDTR = timer_instance->BDTR | 0x8000;\n  }\n  timer_handle->Instance->CR1 = timer_handle->Instance->CR1 | 1;\n  return HAL_OK;\n}",
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006390",
            "calling": [
                "pwm_start"
            ],
            "imported": false,
            "current_name": "configure_timer_channel_08006390"
        },
        "FUN_08009f48": {
            "renaming": {
                "FUN_08009f48": "do_nothing_08009f48"
            },
            "code": "\nvoid do_nothing_08009f48(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f48",
            "calling": [
                "_free_r",
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "do_nothing_08009f48"
        },
        "FUN_08004d6a": {
            "renaming": {
                "FUN_08004d6a": "do_nothing_08004d6a"
            },
            "code": "\nvoid do_nothing_08004d6a(I2C_HandleTypeDef_conflict *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d6a",
            "calling": [
                "I2C_MasterReceive_BTF",
                "I2C_MasterReceive_RXNE"
            ],
            "imported": false,
            "current_name": "do_nothing_08004d6a"
        },
        "FUN_08008730": {
            "renaming": {
                "FUN_08008730": "transmit_data_via_uart_08008730",
                "huart": "uart_handle",
                "bVar1": "uart_index_value",
                "uVar2": "uart_index_as_unsigned_int",
                "iVar4": "tx_callback_obj_address"
            },
            "code": "void transmit_data_via_uart_08008730(UART_HandleTypeDef *uart_handle) {\n  uint8_t uart_index_value = uart_index(uart_handle);\n  uint8_t uart_index_as_unsigned_int = (uint8_t)uart_index_value;\n  int tx_callback_obj_address = *(int *)(PTR_tx_callback_obj_08008770 + uart_index_as_unsigned_int * 4);\n  if ((uart_index_as_unsigned_int < 5) &&\n     (tx_callback_obj_address = (**(code **)(PTR_tx_callback_08008774 + uart_index_as_unsigned_int * 4))(tx_callback_obj_address), tx_callback_obj_address != -1)) {\n    HAL_UART_Transmit_IT(\n              *(UART_HandleTypeDef **)\n                (PTR_uart_handlers_08008778 + (uint)*(byte *)(tx_callback_obj_address + 0x44) * 4),\n               (uint8_t *)(*(int *)(tx_callback_obj_address + 100) + (uint)*(ushort *)(tx_callback_obj_address + 0x6a)),1);\n  }\n  return;\n}",
            "called": [
                "HAL_UART_Transmit_IT",
                "uart_index"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008730",
            "calling": [
                "UART_EndTransmit_IT"
            ],
            "imported": false,
            "current_name": "transmit_data_via_uart_08008730"
        },
        "FUN_08005460": {
            "renaming": {
                "FUN_08005460": "FUNC_08005460"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nHAL_StatusTypeDef_conflict FUNC_08005460(RCC_OscInitTypeDef_conflict *RCC_OscInitStruct)\n\n{\n  uint *puVar1;\n  uint *puVar2;\n  HAL_StatusTypeDef_conflict HVar3;\n  uint32_t uVar4;\n  uint32_t uVar5;\n  bool bVar6;\n  uint32_t tmpreg;\n  \n  puVar1 = DAT_08005720;\n  if ((RCC_OscInitStruct->OscillatorType & 1) != 0) {\n    if (((DAT_08005720[1] & 0xc) == 4) ||\n       (((DAT_08005720[1] & 0xc) == 8 && ((DAT_08005720[1] & 0x10000) != 0)))) {\n      if (((*DAT_08005720 & 0x20000) != 0) && (RCC_OscInitStruct->HSEState == 0)) {\n        return HAL_ERROR;\n      }\n    }\n    else {\n      uVar5 = RCC_OscInitStruct->HSEState;\n      if (uVar5 == 0x10000) {\n        *DAT_08005720 = *DAT_08005720 | 0x10000;\n      }\n      else if (uVar5 == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (uVar5 == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        *DAT_08005720 = *DAT_08005720 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (RCC_OscInitStruct->HSEState == 0) {\n        uVar5 = HAL_GetTick();\n        while ((*DAT_08005720 & 0x20000) != 0) {\n          uVar4 = HAL_GetTick();\n          if (100 < uVar4 - uVar5) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n      else {\n        uVar5 = HAL_GetTick();\n        while ((*DAT_08005720 & 0x20000) == 0) {\n          uVar4 = HAL_GetTick();\n          if (100 < uVar4 - uVar5) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 2) != 0) {\n    if (((DAT_08005720[1] & 0xc) == 0) ||\n       (((DAT_08005720[1] & 0xc) == 8 && ((DAT_08005720[1] & 0x10000) == 0)))) {\n      if (((*DAT_08005720 & 2) != 0) && (RCC_OscInitStruct->HSIState != 1)) {\n        return HAL_ERROR;\n      }\n      *DAT_08005720 = *DAT_08005720 & 0xffffff07 | RCC_OscInitStruct->HSICalibrationValue << 3;\n    }\n    else if (RCC_OscInitStruct->HSIState == 0) {\n      *DAT_08005724 = 0;\n      uVar5 = HAL_GetTick();\n      while ((*DAT_08005720 & 2) != 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      *DAT_08005724 = 1;\n      uVar5 = HAL_GetTick();\n      while ((*DAT_08005720 & 2) == 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n      *DAT_08005720 = *DAT_08005720 & 0xffffff07 | RCC_OscInitStruct->HSICalibrationValue << 3;\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 8) != 0) {\n    if (RCC_OscInitStruct->LSIState == 0) {\n      *DAT_08005728 = 0;\n      uVar5 = HAL_GetTick();\n      while ((DAT_08005720[9] & 2) != 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      *DAT_08005728 = 1;\n      uVar5 = HAL_GetTick();\n      while ((DAT_08005720[9] & 2) == 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n      RCC_Delay(1);\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 4) != 0) {\n    bVar6 = (DAT_08005720[7] & 0x10000000) == 0;\n    if (bVar6) {\n      DAT_08005720[7] = DAT_08005720[7] | 0x10000000;\n    }\n    if ((*DAT_0800572c & 0x100) == 0) {\n      *DAT_0800572c = *DAT_0800572c | 0x100;\n      uVar5 = HAL_GetTick();\n      while ((*DAT_0800572c & 0x100) == 0) {\n        uVar4 = HAL_GetTick();\n        if (100 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    puVar2 = DAT_08005838;\n    puVar1 = DAT_08005720;\n    uVar5 = RCC_OscInitStruct->LSEState;\n    if (uVar5 == 1) {\n      DAT_08005720[8] = DAT_08005720[8] | 1;\n    }\n    else if (uVar5 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (uVar5 == 5) {\n      DAT_08005838[8] = DAT_08005838[8] | 4;\n      puVar2[8] = puVar2[8] | 1;\n    }\n    else {\n      DAT_08005720[8] = DAT_08005720[8] & 0xfffffffe;\n      puVar1[8] = puVar1[8] & 0xfffffffb;\n    }\n    if (RCC_OscInitStruct->LSEState == 0) {\n      uVar5 = HAL_GetTick();\n      while ((DAT_08005838[8] & 2) != 0) {\n        uVar4 = HAL_GetTick();\n        if (5000 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      uVar5 = HAL_GetTick();\n      while ((DAT_08005720[8] & 2) == 0) {\n        uVar4 = HAL_GetTick();\n        if (5000 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    if (bVar6) {\n      DAT_08005838[7] = DAT_08005838[7] & 0xefffffff;\n    }\n  }\n  uVar5 = (RCC_OscInitStruct->PLL).PLLState;\n  if (uVar5 == 0) {\n    HVar3 = HAL_OK;\n  }\n  else if ((DAT_08005838[1] & 0xc) == 8) {\n    HVar3 = HAL_ERROR;\n  }\n  else if (uVar5 == 2) {\n    *DAT_0800583c = 0;\n    uVar5 = HAL_GetTick();\n    do {\n      if ((*DAT_08005838 & 0x2000000) == 0) {\n        if ((RCC_OscInitStruct->PLL).PLLSource == 0x10000) {\n          DAT_08005838[1] = DAT_08005838[1] & 0xfffdffff | RCC_OscInitStruct->HSEPredivValue;\n        }\n        DAT_08005838[1] =\n             DAT_08005838[1] & 0xffc2ffff |\n             (RCC_OscInitStruct->PLL).PLLSource | (RCC_OscInitStruct->PLL).PLLMUL;\n        *DAT_0800583c = 1;\n        uVar5 = HAL_GetTick();\n        do {\n          if ((*DAT_08005838 & 0x2000000) != 0) {\n            return HAL_OK;\n          }\n          uVar4 = HAL_GetTick();\n        } while (uVar4 - uVar5 < 3);\n        return HAL_TIMEOUT;\n      }\n      uVar4 = HAL_GetTick();\n    } while (uVar4 - uVar5 < 3);\n    HVar3 = HAL_TIMEOUT;\n  }\n  else {\n    *DAT_0800583c = 0;\n    uVar5 = HAL_GetTick();\n    do {\n      if ((*DAT_08005838 & 0x2000000) == 0) {\n        return HAL_OK;\n      }\n      uVar4 = HAL_GetTick();\n    } while (uVar4 - uVar5 < 3);\n    HVar3 = HAL_TIMEOUT;\n  }\n  return HVar3;\n}\n\n",
            "called": [
                "HAL_GetTick",
                "RCC_Delay"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005460",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "FUNC_08005460"
        },
        "FUN_08008854": {
            "renaming": {
                "FUN_08008854": "function_returning_zero_08008854",
                "file_UNUSED": "file_unused",
                "ptr_UNUSED": "ptr_unused",
                "dir_UNUSED": "dir_unused"
            },
            "code": "int function_returning_zero_08008854(int file_unused,int ptr_unused,int dir_unused) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008854",
            "calling": [
                "_lseek_r"
            ],
            "imported": false,
            "current_name": "function_returning_zero_08008854"
        },
        "FUN_08004d6c": {
            "renaming": {
                "FUN_08004d6c": "i2c_data_transfer_08004d6c",
                "hi2c": "i2c_handle",
                "puVar1": "buffer_ptr"
            },
            "code": "HAL_StatusTypeDef_conflict i2c_data_transfer_08004d6c(I2C_HandleTypeDef_conflict *i2c_handle) {\n    uint8_t *buffer_ptr;\n    if (i2c_handle->State == HAL_I2C_STATE_BUSY_RX) {\n        if (i2c_handle->XferCount < 4) {\n            if (i2c_handle->XferCount - 2 < 2) {\n                if (i2c_handle->XferOptions == 2) {\n                    i2c_handle->Instance->CR1 |= 0x400;\n                }\n                else {\n                    i2c_handle->Instance->CR1 &= 0xfffffbff;\n                    i2c_handle->Instance->CR1 |= 0x800;\n                }\n                i2c_handle->Instance->CR2 &= 0xfffffbff;\n            }\n            else {\n                if (i2c_handle->XferOptions == 2) {\n                    i2c_handle->Instance->CR1 |= 0x400;\n                }\n                else {\n                    i2c_handle->Instance->CR1 &= 0xfffffbff;\n                }\n                i2c_handle->Instance->CR2 &= 0xfffff8ff;\n                buffer_ptr = i2c_handle->pBuffPtr;\n                i2c_handle->pBuffPtr = buffer_ptr + 1;\n                *buffer_ptr = (uint8_t)i2c_handle->Instance->DR;\n                i2c_handle->XferCount--;\n                i2c_handle->State = HAL_I2C_STATE_READY;\n                i2c_handle->PreviousState = 0;\n                if (i2c_handle->Mode == HAL_I2C_MODE_MEM) {\n                    i2c_handle->Mode = HAL_I2C_MODE_NONE;\n                    HAL_I2C_MemRxCpltCallback(i2c_handle);\n                }\n                else {\n                    i2c_handle->Mode = HAL_I2C_MODE_NONE;\n                    HAL_I2C_MasterRxCpltCallback(i2c_handle);\n                }\n            }\n        }\n        else {\n            buffer_ptr = i2c_handle->pBuffPtr;\n            i2c_handle->pBuffPtr = buffer_ptr + 1;\n            *buffer_ptr = (uint8_t)i2c_handle->Instance->DR;\n            i2c_handle->XferCount--;\n        }\n    }\n    return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MasterRxCpltCallback",
                "HAL_I2C_MemRxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d6c",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_data_transfer_08004d6c"
        },
        "FUN_08007760": {
            "renaming": {
                "FUN_08007760": "handle_timer_interrupt_08007760",
                "PTR_timer_handles_08007770": "timer_handles",
                "TIM_HandleTypeDef_conflict": "Timer_HandleTypeDef",
                "HAL_TIM_IRQHandler": "handle_timer_interrupt_request"
            },
            "code": "void handle_timer_interrupt_08007760(void)\n{\n  TIM_HandleTypeDef_conflict **PTR_timer_handles_08007770 = *(TIM_HandleTypeDef_conflict **)PTR_PTR_timer_handles_08007770_08007770;\n  if (*PTR_timer_handles_08007770 != (TIM_HandleTypeDef_conflict *)0x0) {\n    HAL_TIM_IRQHandler(*PTR_timer_handles_08007770);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007760",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08007760"
        },
        "FUN_08008850": {
            "renaming": {
                "FUN_08008850": "always_returns_one_08008850",
                "file_UNUSED": "file_unused"
            },
            "code": "int always_returns_one_08008850(int file_unused) {\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008850",
            "calling": [
                "_isatty_r"
            ],
            "imported": false,
            "current_name": "always_returns_one_08008850"
        },
        "FUN_08002fc2": {
            "renaming": {
                "FUN_08002fc2": "update_pin_state_08002fc2",
                "pin": "pin",
                "state": "state",
                "this": "this",
                "pinState": "pinState"
            },
            "code": "void __thiscall update_pin_state_08002fc2(FirmataClass *this, byte pin, int state)\n{\n  this->pinState[pin] = state;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fc2",
            "calling": [
                "digitalWriteCallback",
                "analogWriteCallback",
                "setPinValueCallback",
                "setPinModeCallback"
            ],
            "imported": false,
            "current_name": "update_pin_state_08002fc2"
        },
        "FUN_08008afa": {
            "renaming": {
                "FUN_08008afa": "get_num_bytes_in_rx_buffer_08008afa",
                "this": "serial_object",
                "_serial": "serial_port",
                "rx_head": "head",
                "rx_tail": "tail"
            },
            "code": "int __thiscall get_num_bytes_in_rx_buffer_08008afa(HardwareSerial *serial_object)\n{\n    uint32_t head = (serial_object->_serial).rx_head;\n    uint32_t tail = (serial_object->_serial).rx_tail;\n    uint32_t num_bytes = (head - tail) & 0x3f;\n    return num_bytes;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008afa",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "get_num_bytes_in_rx_buffer_08008afa"
        },
        "FUN_08003048": {
            "renaming": {
                "FUN_08003048": "initialize_serial_communication_08003048",
                "speed": "baud_rate",
                "s": "serial_pointer",
                "PTR_Serial2_08003068": "serial2_pointer",
                "HardwareSerial::FUN_08003048": "HardwareSerial::begin",
                "blinkVersion": "blink_version_led",
                "Stream": "SerialStream",
                "this": "firmata_instance"
            },
            "code": "void __thiscall firmata::FirmataClass::initialize_serial_communication_08003048(FirmataClass *this, long speed)\n{\n  undefined *serial_pointer;\n  serial_pointer = PTR_Serial2_08003068;\n  HardwareSerial::begin((HardwareSerial *)PTR_Serial2_08003068, speed, SERIAL_8N1);\n  blink_version_led(this);\n  begin(this, (Stream *)serial_pointer);\n  return;\n}",
            "called": [
                "begin",
                "blinkVersion",
                "begin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003048",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "initialize_serial_communication_08003048"
        },
        "FUN_080038dc": {
            "renaming": {
                "FUN_080038dc": "get_adc_value_080038dc",
                "hadc": "adc_handle",
                "Instance": "adc_instance",
                "DR": "adc_data_register"
            },
            "code": "uint32_t get_adc_value_080038dc(ADC_HandleTypeDef *adc_handle)\n{\n    return adc_handle->Instance->DR;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038dc",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "get_adc_value_080038dc"
        },
        "FUN_080025ac": {
            "renaming": {
                "__thiscall Servo::FUN_080025ac": "servo_control",
                "this": "servo",
                "pin": "pin_number",
                "min": "min_angle",
                "max": "max_angle",
                "bVar1": "is_timer_active",
                "iVar2": "angle_difference",
                "timer": "timer",
                "PTR_servos_08002628": "servo_pins",
                "PTR__timer_08002630": "timer_ptr",
                "DAT_0800262c": "timer_data",
                "FUN_080025ac": "servo_control_080025ac"
            },
            "code": "uint8_t __thiscall servo_control_080025ac(Servo *servo, int pin_number, int min_angle, int max_angle) {\n  boolean is_timer_active;\n  int angle_difference;\n  timer16_Sequence_t timer;\n  \n  if (servo->servoIndex < 0xc) {\n    pinMode(pin_number, OUTPUT);\n    int servo_index_offset = (uint)servo->servoIndex * 8;\n    PTR_servos_08002628[servo_index_offset] = PTR_servos_08002628[servo_index_offset] & 0xc0 | (byte)pin_number & 0x3f;\n    angle_difference = -min_angle + 0x220;\n    if (angle_difference < 0) {\n      angle_difference = -min_angle + 0x223;\n    }\n    servo->min = (int8_t)((uint)(angle_difference << 0x16) >> 0x18);\n    angle_difference = -max_angle + 0x960;\n    if (angle_difference < 0) {\n      angle_difference = -max_angle + 0x963;\n    }\n    servo->max = (int8_t)((uint)(angle_difference << 0x16) >> 0x18);\n    timer = (timer16_Sequence_t)(uint)((ulonglong)DAT_0800262c * (ulonglong)servo->servoIndex >> 0x23);\n    is_timer_active = isTimerActive(timer);\n    undefined *PTR__timer_08002630 = PTR__timer_08002630;\n    if (!is_timer_active) {\n      PTR__timer_08002630[0x44] = timer;\n      initISR((stimer_t *)PTR__timer_08002630);\n    }\n    PTR_servos_08002628[servo_index_offset] = PTR_servos_08002628[servo_index_offset] | 0x40;\n  }\n  return servo->servoIndex;\n}",
            "called": [
                "initISR",
                "isTimerActive",
                "pinMode"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025ac",
            "calling": [
                "attachServo",
                "attach"
            ],
            "imported": false,
            "current_name": "servo_control_080025ac"
        },
        "FUN_08007648": {
            "renaming": {
                "FUN_08007648": "init_stimer_08007648",
                "obj": "timer_obj",
                "period": "period",
                "pulseWidth": "pulse_width",
                "irqHandle": "irq_handler",
                "HVar1": "status",
                "uVar2": "timer_clk_freq",
                "htim": "timer_handle",
                "sConfig": "output_compare_config"
            },
            "code": "void init_stimer_08007648(stimer_t_conflict *timer_obj, uint16_t period, uint16_t pulse_width, _func_void_stimer_t_ptr_uint32_t_conflict *irq_handler)\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t timer_clk_freq;\n  TIM_HandleTypeDef_conflict *timer_handle;\n  TIM_OC_InitTypeDef output_compare_config;\n  \n  output_compare_config.OCMode = TIM_OCMODE_PWM1;\n  output_compare_config.Pulse = pulse_width;\n  output_compare_config.OCPolarity = TIM_OCPOLARITY_HIGH;\n  output_compare_config.OCNPolarity = TIM_OCNPOLARITY_HIGH;\n  output_compare_config.OCFastMode = TIM_OCFAST_DISABLE;\n  output_compare_config.OCIdleState = TIM_OCIDLESTATE_RESET;\n  output_compare_config.OCNIdleState = TIM_OCNIDLESTATE_RESET;\n  timer_handle = &timer_obj->handle;\n  timer_obj->timer = (TIM_TypeDef_conflict *)0x40000000;\n  timer_handle->Instance = (TIM_TypeDef_conflict *)0x40000000;\n  timer_handle->Init.Period = period;\n  timer_clk_freq = getTimerClkFreq((TIM_TypeDef_conflict *)0x40000000);\n  timer_handle->Init.Prescaler = (uint32_t)(((uint64_t)PTR_DAT_080076dc * (uint64_t)timer_clk_freq) >> 0x32) - 1;\n  timer_handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;\n  timer_handle->Init.CounterMode = TIM_COUNTERMODE_UP;\n  timer_handle->Init.RepetitionCounter = 0;\n  timer_obj->irqHandleOC = irq_handler;\n  output_compare_config.OCMode = TIM_OCMODE_PWM1;\n  output_compare_config.OCPolarity = TIM_OCPOLARITY_HIGH;\n  output_compare_config.OCFastMode = TIM_OCFAST_DISABLE;\n  output_compare_config.OCNPolarity = TIM_OCNPOLARITY_HIGH;\n  output_compare_config.OCIdleState = TIM_OCIDLESTATE_RESET;\n  output_compare_config.OCNIdleState = TIM_OCNIDLESTATE_RESET;\n  status = HAL_TIM_OC_Init(timer_handle);\n  if ((status == HAL_OK) && (status = HAL_TIM_OC_ConfigChannel(timer_handle, &output_compare_config, 0), status == HAL_OK)) {\n    HAL_TIM_OC_Start_IT(timer_handle, 0);\n  }\n}\n",
            "called": [
                "HAL_TIM_OC_Init",
                "getTimerClkFreq",
                "getTimerIrq",
                "HAL_NVIC_SetPriority",
                "HAL_TIM_OC_ConfigChannel",
                "HAL_TIM_OC_Start_IT",
                "HAL_NVIC_EnableIRQ"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007648",
            "calling": [
                "initISR"
            ],
            "imported": false,
            "current_name": "init_stimer_08007648"
        },
        "FUN_08008858": {
            "renaming": {
                "FUN_08008858": "calculate_file_size_08008858",
                "file_UNUSED": "file_descriptor",
                "ptr_UNUSED": "file_contents",
                "len_UNUSED": "content_length"
            },
            "code": "int calculate_file_size_08008858(int file_descriptor, char *file_contents, int content_length) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008858",
            "calling": [
                "_read_r"
            ],
            "imported": false,
            "current_name": "calculate_file_size_08008858"
        },
        "FUN_08004a20": {
            "renaming": {
                "FUN_08004a20": "do_nothing_08004a20"
            },
            "code": "\nvoid do_nothing_08004a20(I2C_HandleTypeDef_conflict *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a20",
            "calling": [
                "I2C_MasterReceive_BTF",
                "I2C_MasterReceive_RXNE"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a20"
        },
        "FUN_08004a24": {
            "renaming": {
                "FUN_08004a24": "send_next_byte_08004a24",
                "*hi2c": "*i2c_handle",
                "HVar1": "i2c_state",
                "pbVar2": "data_ptr",
                "hi2c->State": "i2c_handle->State",
                "hi2c->XferCount": "i2c_handle->XferCount",
                "hi2c->pBuffPtr": "i2c_handle->pBuffPtr",
                "hi2c->Instance->DR": "i2c_handle->Instance->DR",
                "HAL_I2C_STATE_BUSY_TX_LISTEN": "HAL_I2C_STATE_BUSY_TX_LISTEN",
                "hi2c->Instance->CR2": "i2c_handle->Instance->CR2",
                "hi2c->PreviousState": "i2c_handle->PreviousState",
                "0x21": "0x21",
                "HAL_I2C_STATE_LISTEN": "HAL_I2C_STATE_LISTEN",
                "HAL_I2C_SlaveTxCpltCallback": "HAL_I2C_SlaveTxCpltCallback",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef_conflict",
                "I2C_HandleTypeDef_conflict": "I2C_HandleTypeDef_conflict",
                "HAL_I2C_StateTypeDef_conflict": "HAL_I2C_StateTypeDef_conflict",
                "byte": "byte",
                "uint": "uint",
                "*pbVar2": "*data_ptr"
            },
            "code": "HAL_StatusTypeDef_conflict send_next_byte_08004a24(I2C_HandleTypeDef_conflict *i2c_handle)\n{\n  HAL_I2C_StateTypeDef_conflict i2c_state;\n  uint8_t *data_ptr;\n  i2c_state = i2c_handle->State;\n  if (i2c_handle->XferCount != 0) {\n    data_ptr = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = data_ptr + 1;\n    i2c_handle->Instance->DR = (uint)*data_ptr;\n    i2c_handle->XferCount = i2c_handle->XferCount - 1;\n    if ((i2c_handle->XferCount == 0) && (i2c_state == HAL_I2C_STATE_BUSY_TX_LISTEN)) {\n      i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 & 0xfffffbff;\n      i2c_handle->PreviousState = 0x21;\n      i2c_handle->State = HAL_I2C_STATE_LISTEN;\n      HAL_I2C_SlaveTxCpltCallback(i2c_handle);\n    }\n    return HAL_OK;\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_SlaveTxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a24",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "send_next_byte_08004a24"
        },
        "FUN_08004a22": {
            "renaming": {
                "FUN_08004a22": "do_nothing_08004a22"
            },
            "code": "\nvoid do_nothing_08004a22(I2C_HandleTypeDef_conflict *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a22",
            "calling": [
                "I2C_Slave_AF",
                "I2C_SlaveTransmit_TXE"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a22"
        },
        "FUN_08002fba": {
            "renaming": {
                "FUN_08002fba": "get_pin_state_08002fba",
                "pin": "pin",
                "this": "this",
                "pinState": "pinState"
            },
            "code": "int __thiscall get_pin_state_08002fba(FirmataClass *this, byte pin){ return this->pinState[pin]; }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fba",
            "calling": [
                "digitalWriteCallback",
                "sysexCallback"
            ],
            "imported": false,
            "current_name": "get_pin_state_08002fba"
        },
        "FUN_080090cc": {
            "renaming": {
                "FUN_080090cc": "log_assertion_failed_080090cc",
                "param_1": "file",
                "param_2": "line",
                "param_3": "function",
                "param_4": "assertion",
                "PTR_s__08009104": "default_message",
                "PTR_s___function__080090fc": "msg",
                "PTR_s_assertion___s__failed__file___s__08009100": "assertion_failed_msg",
                "PTR__impure_ptr_080090f8": "impure_ptr"
            },
            "code": "void log_assertion_failed_080090cc(char *file, int line, char *function, char *assertion, char *message){\n    char *PTR_s__08009104 = \"Assertion failed: %s\n\";\n    char *PTR_s___function__080090fc = message ? message : PTR_s__08009104;\n    fprintf(stderr, PTR_s___function__080090fc, assertion);\n    abort();\n}",
            "called": [
                "fiprintf",
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090cc",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "log_assertion_failed_080090cc"
        },
        "FUN_080049e0": {
            "renaming": {
                "FUN_080049e0": "i2c_listen_080049e0",
                "hi2c": "handle",
                "pIVar1": "i2c_instance",
                "HAL_I2C_STATE_READY": "HAL_I2C_STATE_READY",
                "HAL_BUSY": "HAL_BUSY",
                "HAL_I2C_STATE_LISTEN": "HAL_I2C_STATE_LISTEN",
                "CR1": "CR1",
                "CR2": "CR2"
            },
            "code": "HAL_StatusTypeDef_conflict i2c_listen_080049e0(I2C_HandleTypeDef_conflict *handle)\n{\n  I2C_TypeDef_conflict *i2c_instance;\n  \n  if (handle->State != HAL_I2C_STATE_READY) {\n    return HAL_BUSY;\n  }\n  handle->State = HAL_I2C_STATE_LISTEN;\n  i2c_instance = handle->Instance;\n  if ((i2c_instance->CR1 & 1) == 0) {\n    i2c_instance->CR1 |= 1;\n  }\n  i2c_instance->CR1 |= 0x400;\n  i2c_instance->CR2 |= 0x300;\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049e0",
            "calling": [
                "i2c_attachSlaveRxEvent",
                "i2c_attachSlaveTxEvent",
                "HAL_I2C_ListenCpltCallback",
                "HAL_I2C_ErrorCallback"
            ],
            "imported": false,
            "current_name": "i2c_listen_080049e0"
        },
        "FUN_08006d24": {
            "renaming": {
                "FUN_08006d24": "set_adc_interrupt_flag_08006d24",
                "hadc": "adc_handle",
                "iVar1": "ptr",
                "DAT_08006d7c": "ptr",
                "DAT_08006d74": "dat_1",
                "DAT_08006d78": "dat_2",
                "uint": "unsigned int",
                "ptr_1": "ptr_1",
                "ptr_2": "ptr_2"
            },
            "code": "void set_adc_interrupt_flag_08006d24(ADC_HandleTypeDef *adc_handle)\n{\n  int DAT_08006d7c = PTR_08006d7c;\n  int DAT_08006d74 = DAT_08006d74;\n  int DAT_08006d78 = DAT_08006d78;\n  if (adc_handle->Instance != DAT_08006d74) {\n    if (adc_handle->Instance == DAT_08006d78) {\n      uint *DAT_08006d7c_1 = (uint *)(DAT_08006d7c + 0xc);\n      uint *DAT_08006d7c_2 = (uint *)(DAT_08006d7c + 0x18);\n      *DAT_08006d7c_1 |= 0x400;\n      *DAT_08006d7c_1 &= 0xfffffbff;\n      *DAT_08006d7c_2 &= 0xfffffbff;\n    }\n    return;\n  }\n  uint *DAT_08006d7c_1 = (uint *)(DAT_08006d7c + 0xc);\n  uint *DAT_08006d7c_2 = (uint *)(DAT_08006d7c + 0x18);\n  *DAT_08006d7c_1 |= 0x200;\n  *DAT_08006d7c_1 &= 0xfffffdff;\n  *DAT_08006d7c_2 &= 0xfffffdff;\n  return;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d24",
            "calling": [
                "HAL_ADC_DeInit"
            ],
            "imported": false,
            "current_name": "set_adc_interrupt_flag_08006d24"
        },
        "FUN_08008500": {
            "renaming": {
                "FUN_08008500": "send_data_via_uart_08008500",
                "*data": "data",
                "size": "size",
                "pin": "pin_name",
                "HVar1": "hal_status",
                "uVar2": "start_time",
                "pvVar3": "peripheral",
                "uVar4": "current_time",
                "uVar5": "uart_index"
            },
            "code": "size_t send_data_via_uart_08008500(uint8_t *data, uint32_t size)\n{\n  PinName_conflict pin_name;\n  HAL_StatusTypeDef_conflict hal_status;\n  uint32_t start_time = HAL_GetTick();\n  void *peripheral;\n  uint uart_index = 0;\n  \n  pin_name = PTR_digitalPin_080085a8[1];\n  peripheral = pinmap_peripheral(pin_name, (PinMap_conflict *)PTR_PinMap_UART_TX_080085ac);\n  if (peripheral == (void *)0x0) {\n    return 0;\n  }\n  \n  while ((uart_index < 5 && ((*(int *)(PTR_uart_handlers_080085b0 + uart_index * 4) == 0 || ((peripheral = pinmap_peripheral(pin_name, (PinMap_conflict *)PTR_PinMap_UART_TX_080085ac)), **(void ***)(PTR_uart_handlers_080085b0 + uart_index * 4) != peripheral))))) {\n    uart_index++;\n  }\n  \n  if (uart_index > 4) {\n    if ((4 < (byte)PTR_serial_debug_080085b4[0x44]) && (uart_debug_init(), 4 < (byte)PTR_serial_debug_080085b4[0x44])) {\n      return 0;\n    }\n    uart_index = (uint)(byte)PTR_serial_debug_080085b4[0x44];\n  }\n  \n  do {\n    hal_status = HAL_UART_Transmit(*(UART_HandleTypeDef **)(PTR_uart_handlers_080085b0 + uart_index * 4), data, (uint16_t)size, 1000);\n    if (hal_status == HAL_OK) {\n      return size;\n    }\n    uint32_t current_time = HAL_GetTick();\n  } while (current_time - start_time < 1000);\n  return 0;\n}",
            "called": [
                "HAL_GetTick",
                "uart_debug_init",
                "pinmap_peripheral",
                "HAL_UART_Transmit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008500",
            "calling": [
                "_write"
            ],
            "imported": false,
            "current_name": "send_data_via_uart_08008500"
        },
        "FUN_08007774": {
            "renaming": {
                "FUN_08007774": "handle_timer_interrupt_08007774",
                "*(TIM_HandleTypeDef_conflict **)(PTR_timer_handles_08007784 + 4)": "timer_handle",
                "TIM_HandleTypeDef_conflict": "TIM_HandleTypeDef_conflict",
                "HAL_TIM_IRQHandler": "HAL_TIM_IRQHandler",
                "PTR_timer_handles_08007784": "PTR_timer_handles_08007784"
            },
            "code": "void handle_timer_interrupt_08007774(void)\n{\n    TIM_HandleTypeDef_conflict* *(TIM_HandleTypeDef_conflict **)(PTR_timer_handles_08007784 + 4) = *(TIM_HandleTypeDef_conflict**)(PTR_*(TIM_HandleTypeDef_conflict **)(PTR_timer_handles_08007784 + 4)s_08007784 + 4);\n    if (*(TIM_HandleTypeDef_conflict **)(PTR_timer_handles_08007784 + 4) != NULL)\n    {\n        HAL_TIM_IRQHandler(*(TIM_HandleTypeDef_conflict **)(PTR_timer_handles_08007784 + 4));\n    }\n    return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007774",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08007774"
        },
        "FUN_08005e6c": {
            "renaming": {
                "FUN_08005e6c": "do_nothing_08005e6c"
            },
            "code": "\nvoid do_nothing_08005e6c(TIM_HandleTypeDef_conflict *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e6c",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08005e6c"
        },
        "FUN_080001a8": {
            "renaming": {
                "FUN_080001a8": "check_and_set_pin_state_080001a8",
                "pin": "pin_number",
                "value": "value",
                "ulPin": "pin_index",
                "bVar1": "is_valid_pin",
                "bVar2": "pin_mode",
                "uVar3": "digital_pin_number"
            },
            "code": "void check_and_set_pin_state_080001a8(byte pin_number, int value)\n{\n  bool is_valid_pin = false;\n  byte digital_pin_number;\n  uint32_t pin_state = (uint32_t) value;\n  uint32_t pin_index = (uint32_t) pin_number;\n\n  if (pin_index < 0x3c) {\n    if (PTR_digitalPin_0800020c[pin_index] != NC) {\n      digital_pin_number = pinNametoDigitalPin(PTR_digitalPin_0800020c[pin_index]);\n      if (digital_pin_number > 1) {\n        is_valid_pin = true;\n      }\n    }\n  }\n\n  if (is_valid_pin) {\n    byte pin_mode = firmata::FirmataClass::getPinMode((FirmataClass *)PTR_Firmata_08000210, pin_number);\n    if (pin_mode == OUTPUT) {\n      firmata::FirmataClass::setPinState((FirmataClass *)PTR_Firmata_08000210, pin_number, pin_state);\n      digitalWrite(digital_pin_number, pin_state);\n    }\n  }\n}\n",
            "called": [
                "digitalWrite",
                "pinNametoDigitalPin",
                "setPinState",
                "getPinMode"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001a8",
            "calling": [],
            "imported": false,
            "current_name": "check_and_set_pin_state_080001a8"
        },
        "FUN_080048c8": {
            "renaming": {
                "FUN_080048c8": "i2c_transfer_080048c8",
                "hi2c": "i2c_handle",
                "pData": "data",
                "Size": "size",
                "XferOptions": "transfer_options",
                "HVar1": "status",
                "pIVar2": "i2c_instance"
            },
            "code": "HAL_StatusTypeDef_conflict i2c_transfer_080048c8(I2C_HandleTypeDef_conflict *i2c_handle, uint8_t *data, uint16_t size, uint32_t transfer_options) {\n  HAL_StatusTypeDef_conflict status;\n  I2C_TypeDef_conflict *i2c_instance;\n  uint32_t tmpreg;\n  \n  if (i2c_handle->State == HAL_I2C_STATE_LISTEN) {\n    if (data == NULL) {\n      status = HAL_ERROR;\n    }\n    else if (size == 0) {\n      status = HAL_ERROR;\n    }\n    else if (i2c_handle->Lock == HAL_LOCKED) {\n      status = HAL_BUSY;\n    }\n    else {\n      i2c_handle->Lock = HAL_LOCKED;\n      i2c_instance = i2c_handle->Instance;\n      if ((i2c_instance->CR1 & 1) == 0) {\n        i2c_instance->CR1 |= 1;\n      }\n      i2c_handle->Instance->CR1 &= 0xfffff7ff;\n      i2c_handle->State = HAL_I2C_STATE_BUSY_TX_LISTEN;\n      i2c_handle->Mode = HAL_I2C_MODE_SLAVE;\n      status = HAL_OK;\n      i2c_handle->ErrorCode = 0;\n      i2c_handle->pBuffPtr = data;\n      i2c_handle->XferCount = size;\n      i2c_handle->XferOptions = transfer_options;\n      i2c_handle->XferSize = i2c_handle->XferCount;\n      i2c_handle->Lock = HAL_UNLOCKED;\n      i2c_handle->Instance->CR2 |= 0x700;\n    }\n  }\n  else {\n    status = HAL_BUSY;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048c8",
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "imported": false,
            "current_name": "i2c_transfer_080048c8"
        },
        "FUN_08009954": {
            "renaming": {
                "FUN_08009954": "copy_string_08009954",
                "__dest": "destination",
                "__src": "source",
                "__n": "num_chars",
                "cVar1": "current_char",
                "sVar2": "remaining_chars",
                "pcVar3": "destination_start",
                "pcVar4": "unused_variable"
            },
            "code": "char * copy_string_08009954(char *destination, const char *source, size_t num_chars) {\n  char current_char;\n  size_t remaining_chars;\n  char *destination_start = destination;\n  do {\n    remaining_chars = num_chars;\n    if (remaining_chars == 0) {\n      return destination_start;\n    }\n    current_char = *source;\n    destination++;\n    *destination = current_char;\n    source++;\n    num_chars--;\n  } while (current_char != '\\0');\n  for (; destination != destination_start + remaining_chars; destination++) {\n    *destination = '\\0';\n  }\n  return destination_start;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009954",
            "calling": [
                "setFirmwareNameAndVersion"
            ],
            "imported": false,
            "current_name": "copy_string_08009954"
        },
        "FUN_08005e6e": {
            "renaming": {
                "FUN_08005e6e": "handle_timer_interrupt_08005e6e",
                "htim": "timer_handle",
                "pTVar1": "timer_instance"
            },
            "code": "void handle_timer_interrupt_08005e6e(TIM_HandleTypeDef_conflict *timer_handle)\n{\n  TIM_TypeDef_conflict *timer_instance = timer_handle->Instance;\n  \n  if (((timer_instance->SR & 2) != 0) && ((timer_instance->DIER & 2) != 0)) {\n    timer_instance->SR = 0xfffffffd;\n    timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_1;\n    if ((timer_handle->Instance->CCMR1 & 3) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(timer_handle);\n      HAL_TIM_PWM_PulseFinishedCallback(timer_handle);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(timer_handle);\n    }\n    timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n  \n  timer_instance = timer_handle->Instance;\n  if (((timer_instance->SR & 4) != 0) && ((timer_instance->DIER & 4) != 0)) {\n    timer_instance->SR = 0xfffffffb;\n    timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_2;\n    if ((timer_handle->Instance->CCMR1 & 0x300) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(timer_handle);\n      HAL_TIM_PWM_PulseFinishedCallback(timer_handle);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(timer_handle);\n    }\n    timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n  \n  timer_instance = timer_handle->Instance;\n  if (((timer_instance->SR & 8) != 0) && ((timer_instance->DIER & 8) != 0)) {\n    timer_instance->SR = 0xfffffff7;\n    timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_3;\n    if ((timer_handle->Instance->CCMR2 & 3) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(timer_handle);\n      HAL_TIM_PWM_PulseFinishedCallback(timer_handle);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(timer_handle);\n    }\n    timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n  \n  timer_instance = timer_handle->Instance;\n  if (((timer_instance->SR & 0x10) != 0) && ((timer_instance->DIER & 0x10) != 0)) {\n    timer_instance->SR = 0xffffffef;\n    timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_4;\n    if ((timer_handle->Instance->CCMR2 & 0x300) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(timer_handle);\n      HAL_TIM_PWM_PulseFinishedCallback(timer_handle);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(timer_handle);\n    }\n    timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n  \n  timer_instance = timer_handle->Instance;\n  if (((timer_instance->SR & 1) != 0) && ((timer_instance->DIER & 1) != 0)) {\n    timer_instance->SR = 0xfffffffe;\n    HAL_TIM_PeriodElapsedCallback(timer_handle);\n  }\n  \n  timer_instance = timer_handle->Instance;\n  if (((timer_instance->SR & 0x80) != 0) && ((timer_instance->DIER & 0x80) != 0)) {\n    timer_instance->SR = 0xffffff7f;\n    HAL_TIMEx_BreakCallback(timer_handle);\n  }\n  \n  timer_instance = timer_handle->Instance;\n  if (((timer_instance->SR & 0x40) != 0) && ((timer_instance->DIER & 0x40) != 0)) {\n    timer_instance->SR = 0xffffffbf;\n    HAL_TIM_TriggerCallback(timer_handle);\n  }\n  \n  timer_instance = timer_handle->Instance;\n  if (((timer_instance->SR & 0x20) != 0) && ((timer_instance->DIER & 0x20) != 0)) {\n    timer_instance->SR = 0xffffffdf;\n    HAL_TIMEx_CommutationCallback(timer_handle);\n  }\n  \n  return;\n}",
            "called": [
                "HAL_TIM_TriggerCallback",
                "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIM_PWM_PulseFinishedCallback",
                "HAL_TIM_IC_CaptureCallback",
                "HAL_TIM_OC_DelayElapsedCallback",
                "HAL_TIMEx_CommutationCallback",
                "HAL_TIMEx_BreakCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e6e",
            "calling": [
                "TIM2_IRQHandler",
                "TIM4_IRQHandler",
                "TIM1_UP_IRQHandler",
                "TIM3_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_timer_interrupt_08005e6e"
        },
        "FUN_08004024": {
            "renaming": {
                "FUN_08004024": "set_clock_source_08004024",
                "CLKSource": "clk_source",
                "DAT_08004040": "data_register1"
            },
            "code": "void set_clock_source_08004024(uint32_t clk_source)\n{\n  if (clk_source != 4) {\n    *DAT_08004040 &= 0xfffffffb;\n    return;\n  }\n  *DAT_08004040 |= 4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004024",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "set_clock_source_08004024"
        },
        "FUN_08005e6a": {
            "renaming": {
                "FUN_08005e6a": "do_nothing_08005e6a"
            },
            "code": "\nvoid do_nothing_08005e6a(TIM_HandleTypeDef_conflict *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e6a",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08005e6a"
        },
        "FUN_08004a1e": {
            "renaming": {
                "FUN_08004a1e": "do_nothing_08004a1e"
            },
            "code": "\nvoid do_nothing_08004a1e(I2C_HandleTypeDef_conflict *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a1e",
            "calling": [
                "I2C_MasterTransmit_BTF",
                "I2C_MasterTransmit_TXE"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a1e"
        },
        "FUN_08008868": {
            "renaming": {
                "FUN_08008868": "infinite_loop_08008868"
            },
            "code": "void infinite_loop_08008868(int status_UNUSED)\n{\n  while(true) {\n    // do nothing\n  }\n}",
            "called": [
                "_exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008868",
            "calling": [
                "abort",
                "_exit"
            ],
            "imported": false,
            "current_name": "infinite_loop_08008868"
        },
        "FUN_080036ac": {
            "renaming": {
                "FUN_080036ac": "find_digital_pin_index_080036ac",
                "p": "pin",
                "uVar1": "index"
            },
            "code": "uint32_t find_digital_pin_index_080036ac(PinName_conflict pin)\n{\n  uint32_t index = 0;\n\n  if ((uint)((int)pin << 0x18) >> 0x1c < 5) {\n    for (; (index < 0x3c && ((int)pin != (int)(char)PTR_digitalPin_080036d0[index])); index++) {\n    }\n  }\n  else {\n    index = 0xffffffff;\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036ac",
            "calling": [
                "enableI2CPins",
                "checkDigitalInputs",
                "loop",
                "digitalWriteCallback",
                "sysexCallback",
                "systemResetCallback",
                "analogWriteCallback",
                "setPinValueCallback",
                "setPinModeCallback",
                "reportDigitalCallback"
            ],
            "imported": false,
            "current_name": "find_digital_pin_index_080036ac"
        },
        "FUN_0800885c": {
            "renaming": {
                "FUN_0800885c": "uart_debug_0800885c",
                "file_UNUSED": "file_unused",
                "ptr": "data_ptr",
                "len": "data_len",
                "sVar1": "data_size"
            },
            "code": "int uart_debug_0800885c(int file_unused, char *data_ptr, int data_len) {\n\tsize_t data_size;\n\tdata_size = uart_debug_0800885cuart_debug_0800885c((uint8_t *)data_ptr, data_len);\n\treturn data_size;\n}",
            "called": [
                "uart_debug_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800885c",
            "calling": [
                "_write_r"
            ],
            "imported": false,
            "current_name": "uart_debug_0800885c"
        },
        "FUN_0800643c": {
            "renaming": {
                "FUN_0800643c": "set_tim_channel_output_state_0800643c",
                "htim": "timer_handle",
                "Channel": "channel",
                "BDTR": "TIM_BDTR_MOE",
                "CR1": "TIM_CR1_CEN"
            },
            "code": "HAL_StatusTypeDef_conflict set_tim_channel_output_state_0800643c(TIM_HandleTypeDef_conflict *timer_handle, uint32_t channel)\n{\n  TIM_CCxNChannelCmd(timer_handle->Instance, channel, TIM_CCxN_ENABLE);\n  timer_handle->Instance->BDTR |= TIM_BDTR_MOE;\n  timer_handle->Instance->CR1 |= TIM_CR1_CEN;\n  return HAL_OK;\n}",
            "called": [
                "TIM_CCxNChannelCmd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800643c",
            "calling": [
                "pwm_start"
            ],
            "imported": false,
            "current_name": "set_tim_channel_output_state_0800643c"
        },
        "FUN_08002fca": {
            "renaming": {
                "FUN_08002fca": "blink_pin_08002fca",
                "pin": "pin_number",
                "count": "num_blinks",
                "onInterval": "on_time_ms",
                "offInterval": "off_time_ms",
                "uVar1": "i"
            },
            "code": "void __thiscall blink_pin_08002fca(FirmataClass *this, byte pin, int count, int on_time_ms, int off_time_ms) {\n  for (int i = 0; i < count; i++) {\n    delay(off_time_ms);\n    digitalWrite((uint)pin, HIGH);\n    delay(on_time_ms);\n    digitalWrite((uint)pin, LOW);\n  }\n  return;\n}",
            "called": [
                "delay",
                "digitalWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fca",
            "calling": [
                "blinkVersion"
            ],
            "imported": false,
            "current_name": "blink_pin_08002fca"
        },
        "FUN_0800a31c": {
            "renaming": {
                "std::ctype_byname<wchar_t>::FUN_0800a31c": "set_wchar_t_ctype_flags",
                "FUN_0800a31c": "set_wchar_t_ctype_flags_0800a31c"
            },
            "code": "void set_wchar_t_ctype_flags_0800a31c(void)\n{\n    if (*(int *)PTR_id_0800a380 < 0x80000000) {\n        *(undefined4 *)PTR_id_0800a380 = 1;\n    }\n    if (*(int *)PTR_id_0800a384 < 0x80000000) {\n        *(undefined4 *)PTR_id_0800a384 = 1;\n    }\n    if (*(int *)PTR_id_0800a388 < 0x80000000) {\n        *(undefined4 *)PTR_id_0800a388 = 1;\n    }\n    if (*(int *)PTR_id_0800a38c < 0x80000000) {\n        *(undefined4 *)PTR_id_0800a38c = 1;\n    }\n    if (*(int *)PTR_id_0800a390 < 0x80000000) {\n        *(undefined4 *)PTR_id_0800a390 = 1;\n    }\n    if (*(int *)PTR_id_0800a394 < 0x80000000) {\n        *(undefined4 *)PTR_id_0800a394 = 1;\n    }\n    if (*(int *)PTR_id_0800a398 < 0x80000000) {\n        *(undefined4 *)PTR_id_0800a398 = 1;\n    }\n    if (*(int *)PTR_id_0800a39c < 0x80000000) {\n        *(undefined4 *)PTR_id_0800a39c = 1;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a31c",
            "calling": [],
            "imported": false,
            "current_name": "set_wchar_t_ctype_flags_0800a31c"
        },
        "FUN_080026f8": {
            "renaming": {
                "FUN_080026f8": "calculate_servo_value_080026f8",
                "this": "servo_instance",
                "PTR_servos_08002708": "servo_array_ptr"
            },
            "code": "bool __thiscall calculate_servo_value_080026f8(Servo *this) {\n    uint8_t* servo_ptr = PTR_servos_08002708 + (this->servoIndex * 8);\n    uint32_t shifted_value = ((uint32_t)*servo_ptr << 0x19) >> 0x1f;\n    return (bool)shifted_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026f8",
            "calling": [
                "sysexCallback",
                "setPinModeCallback"
            ],
            "imported": false,
            "current_name": "calculate_servo_value_080026f8"
        },
        "FUN_08007544": {
            "renaming": {
                "FUN_08007544": "get_timer_id_08007544",
                "tim": "timer",
                "DAT_08007588": "unknown_timer",
                "DAT_0800758c": "another_unknown_timer"
            },
            "code": "uint32_t get_timer_id_08007544(TIM_TypeDef_conflict *timer) {\n  if (timer == (TIM_TypeDef_conflict *)0xffffffff) {\n    return 0;\n  }\n  if (timer == DAT_08007588) {\n    return 0x1d;\n  }\n  if (DAT_08007588 < timer) {\n    if (timer == DAT_0800758c) {\n      return 0x1e;\n    }\n    if (timer == (TIM_TypeDef_conflict *)&DAT_0800758c[0x379].DMAR) {\n      return 0x19;\n    }\n  }\n  else if (timer == (TIM_TypeDef_conflict *)0x40000000) {\n    return 0x1c;\n  }\n  iprintf(\"TIM: Unknown timer_IRQn.\\n\");\n  return 0;\n}",
            "called": [
                "iprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007544",
            "calling": [
                "TimerPulseDeinit",
                "TimerPulseInit"
            ],
            "imported": false,
            "current_name": "get_timer_id_08007544"
        },
        "FUN_08008990": {
            "renaming": {
                "FUN_08008990": "configure_pin_08008990",
                "ulPin": "pin_number",
                "ulMode": "mode",
                "_Var1": "is_pin_output",
                "PinName_conflict": "PinName_conflict",
                "pin": "pin_name",
                "PTR_digitalPin_08008a14": "digitalPin",
                "NC": "NC",
                "is_pin_configured": "is_pin_configured",
                "PTR_g_anOutputPinConfigured_08008a18": "g_anOutputPinConfigured",
                "pin_in_pinmap": "pin_in_pinmap",
                "PinMap_conflict": "PinMap_conflict",
                "PTR_PinMap_PWM_08008a1c": "PinMap_PWM",
                "pwm_stop": "pwm_stop",
                "reset_pin_configured": "reset_pin_configured",
                "set_pin_configured": "set_pin_configured",
                "PTR_g_digPinConfigured_08008a20": "g_digPinConfigured",
                "digital_io_init": "digital_io_init"
            },
            "code": "void configure_pin_08008990(uint32_t pin_number,uint32_t mode)\n{\n  _Bool is_pin_output;\n  PinName_conflict pin_name;\n  if (pin_number < 0x3c) {\n    pin_name = PTR_digitalPin_08008a14[pin_number];\n  }\n  else {\n    pin_name = NC;\n  }\n  if (pin_name != NC) {\n    is_pin_output = is_pin_configured(pin_name,(uint32_t *)PTR_g_anOutputPinConfigured_08008a18);\n    if (is_pin_output) {\n      is_pin_output = pin_in_pinmap(pin_name,(PinMap_conflict *)PTR_PinMap_PWM_08008a1c);\n      if (is_pin_output) {\n        pwm_stop(pin_name);\n      }\n      reset_pin_configured(pin_name,(uint32_t *)PTR_g_anOutputPinConfigured_08008a18);\n    }\n    switch(mode) {\n    case 0:\n      digital_io_init(pin_name,0,0);\n      break;\n    case 1:\n      digital_io_init(pin_name,1,0);\n      break;\n    case 2:\n      digital_io_init(pin_name,0,1);\n      break;\n    case 3:\n      digital_io_init(pin_name,0,2);\n    }\n    set_pin_configured(pin_name,(uint32_t *)PTR_g_digPinConfigured_08008a20);\n  }\n  return;\n}",
            "called": [
                "pwm_stop",
                "pin_in_pinmap",
                "digital_io_init",
                "set_pin_configured",
                "reset_pin_configured",
                "is_pin_configured"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008990",
            "calling": [
                "attach",
                "analogWrite",
                "digitalWriteCallback",
                "blinkVersion",
                "setPinModeCallback"
            ],
            "imported": false,
            "current_name": "configure_pin_08008990"
        },
        "FUN_08004396": {
            "renaming": {
                "FUN_08004396": "set_i2c_device_address_08004396",
                "hi2c": "i2c_handle",
                "Instance": "i2c_instance",
                "DR": "data_register",
                "Devaddress": "device_address"
            },
            "code": "HAL_StatusTypeDef_conflict set_i2c_device_address_08004396(I2C_HandleTypeDef_conflict *i2c_handle) {\n  uint8_t device_address = i2c_handle->Devaddress & 0xff;\n  i2c_handle->Instance->DR = device_address;\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004396",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "set_i2c_device_address_08004396"
        },
        "FUN_08003fb0": {
            "renaming": {
                "FUN_08003fb0": "set_interrupt_handler_08003fb0",
                "IRQn": "interrupt_number",
                "uVar1": "interrupt_bit_position",
                "DAT_08003fd4": "interrupt_enable_register"
            },
            "code": "void set_interrupt_handler_08003fb0(IRQn_Type_conflict interrupt_number)\n{\n  uint32_t interrupt_bit_position = (uint32_t)interrupt_number;\n  if (interrupt_bit_position >= 0)\n  {\n    uint32_t* DAT_08003fd4 = (uint32_t*)(DAT_08003fd4 + ((interrupt_bit_position >> 5) + 0x20) * 4);\n    *DAT_08003fd4 = 1 << (interrupt_bit_position & 0x1f);\n    DataSynchronizationBarrier(0xf);\n    InstructionSynchronizationBarrier(0xf);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fb0",
            "calling": [
                "TimerPulseDeinit"
            ],
            "imported": false,
            "current_name": "set_interrupt_handler_08003fb0"
        },
        "FUN_08007788": {
            "renaming": {
                "FUN_08007788": "handle_timer_interrupt_08007788",
                "PTR_timer_handles_08007798": "PTR_timer_handles_08007798",
                "TIM_HandleTypeDef_conflict": "TIM_HandleTypeDef_conflict",
                "HAL_TIM_IRQHandler": "HAL_TIM_IRQHandler"
            },
            "code": "void handle_timer_interrupt_08007788(void)\n{\n  TIM_HandleTypeDef_conflict* timer_handle = *(TIM_HandleTypeDef_conflict **)(PTR_timer_handles_08007798 + 8);\n  if (timer_handle != NULL) {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007788",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08007788"
        },
        "FUN_08008f0c": {
            "renaming": {
                "FUN_08008f0c": "do_nothing_08008f0c"
            },
            "code": "\nvoid do_nothing_08008f0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f0c",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "do_nothing_08008f0c"
        },
        "FUN_08002ec4": {
            "renaming": {
                "FUN_08002ec4": "get_vptr_index_08002ec4",
                "this": "firmata_instance",
                "iVar1": "vptr_index"
            },
            "code": "int __thiscall get_vptr_index_08002ec4(FirmataClass *firmata_instance) {\n  int vptr_index;\n  vptr_index = (*(firmata_instance->FirmataStream->super_Print)._vptr_Print[2])();\n  return vptr_index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ec4",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "get_vptr_index_08002ec4"
        },
        "FUN_08007306": {
            "renaming": {
                "FUN_08007306": "find_peripheral_from_pin_08007306",
                "pin": "pin_name",
                "map": "pin_map",
                "PinName_conflict": "PinName",
                "PinMap_conflict": "PinMap"
            },
            "code": "void * find_peripheral_from_pin_08007306(PinName_conflict pin, PinMap_conflict *map)\n{\n    while (true) {\n        if (map->pin == NC) {\n            return (void *)0x0;\n        }\n        if (map->pin == pin) {\n            break;\n        }\n        map++;\n    }\n    return map->peripheral;\n}",
            "called": [
                "pinmap_find_peripheral"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007306",
            "calling": [
                "pinmap_peripheral",
                "pinmap_find_peripheral"
            ],
            "imported": false,
            "current_name": "find_peripheral_from_pin_08007306"
        },
        "FUN_08008f0e": {
            "renaming": {
                "FUN_08008f0e": "initialize_EVP_PKEY_CTX_08008f0e",
                "ctx": "evp_pkey_ctx"
            },
            "code": "void initialize_EVP_PKEY_CTX_08008f0e(void)\n{\n  EVP_PKEY_CTX *evp_pkey_ctx;\n  evp_pkey_ctx = (EVP_PKEY_CTX *)0x3;\n  HAL_NVIC_SetPriorityGrouping(3);\n  init(evp_pkey_ctx);\n  return;\n}",
            "called": [
                "HAL_NVIC_SetPriorityGrouping",
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f0e",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "initialize_EVP_PKEY_CTX_08008f0e"
        },
        "FUN_0800886c": {
            "renaming": {
                "FUN_0800886c": "set_errno_to_22_0800886c",
                "pid_UNUSED": "pid_unused",
                "sig_UNUSED": "sig_unused",
                "PTR_errno_08008878": "PTR_errno_08008878"
            },
            "code": "int set_errno_to_22_0800886c(int pid_unused, int sig_unused) {\n    *(undefined4 *)PTR_errno_08008878 = 22;\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800886c",
            "calling": [
                "_kill_r"
            ],
            "imported": false,
            "current_name": "set_errno_to_22_0800886c"
        },
        "FUN_080036d4": {
            "renaming": {
                "FUN_080036d4": "do_nothing_080036d4"
            },
            "code": "\nvoid do_nothing_080036d4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036d4",
            "calling": [
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_080036d4"
        },
        "FUN_08006e68": {
            "renaming": {
                "FUN_08006e68": "FUNC_08006e68"
            },
            "code": "\nvoid FUNC_08006e68(TIM_HandleTypeDef_conflict *htim)\n\n{\n  undefined *puVar1;\n  uint32_t uVar2;\n  GPIO_TypeDef *GPIOx;\n  uint32_t tmpreg;\n  GPIO_InitTypeDef GPIO_InitStruct;\n  \n  puVar1 = PTR_g_current_pin_08007100;\n  uVar2 = pinmap_function(*PTR_g_current_pin_08007100,(PinMap_conflict *)PTR_PinMap_PWM_08007104);\n  timer_enable_clock(htim);\n  GPIOx = set_GPIO_Port_Clock((uint)((int)(char)*puVar1 << 0x18) >> 0x1c);\n  GPIO_InitStruct.Mode = 2;\n  GPIO_InitStruct.Pull = 0;\n  GPIO_InitStruct.Speed = 3;\n  *(uint *)(DAT_08007108 + 0x18) = *(uint *)(DAT_08007108 + 0x18) | 1;\n  switch((uVar2 << 0x11) >> 0x19) {\n  case 1:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000001;\n    break;\n  case 2:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffffe | 0x7000000;\n    break;\n  case 3:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000002;\n    break;\n  case 4:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffffd | 0x7000000;\n    break;\n  case 5:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000004;\n    break;\n  case 6:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffffb | 0x7000000;\n    break;\n  case 7:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000008;\n    break;\n  case 8:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffff7 | 0x7000000;\n    break;\n  case 9:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000030;\n    break;\n  case 10:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffffcf | 0x7000010;\n    break;\n  case 0xb:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffffcf | 0x7000000;\n    break;\n  case 0xc:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x70000c0;\n    break;\n  case 0xd:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffff3f | 0x7000040;\n    break;\n  case 0xe:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffff3f | 0x7000000;\n    break;\n  case 0xf:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000300;\n    break;\n  case 0x10:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffcff | 0x7000200;\n    break;\n  case 0x11:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffcff | 0x7000100;\n    break;\n  case 0x12:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffcff | 0x7000000;\n    break;\n  case 0x13:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000c00;\n    break;\n  case 0x14:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffff3ff | 0x7000800;\n    break;\n  case 0x15:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffff3ff | 0x7000000;\n    break;\n  case 0x16:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7001000;\n    break;\n  case 0x17:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffefff | 0x7000000;\n    break;\n  case 0x1b:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7008000;\n    break;\n  case 0x1c:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffff7fff | 0x7000000;\n    break;\n  case 0x21:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff;\n    break;\n  case 0x22:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff | 0x1000000;\n    break;\n  case 0x23:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff | 0x2000000;\n    break;\n  case 0x24:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff | 0x4000000;\n  }\n  GPIO_InitStruct.Pin = 1 << (*PTR_g_current_pin_08007100 & 0xf) & 0xffff;\n  HAL_GPIO_Init(GPIOx,&GPIO_InitStruct);\n  return;\n}\n\n",
            "called": [
                "HAL_GPIO_Init",
                "pinmap_function",
                "timer_enable_clock",
                "set_GPIO_Port_Clock"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006e68",
            "calling": [
                "HAL_TIM_PWM_Init"
            ],
            "imported": false,
            "current_name": "FUNC_08006e68"
        },
        "FUN_080036d8": {
            "renaming": {
                "FUN_080036d8": "set_systick_080036d8",
                "TickPriority": "tick_priority",
                "uVar1": "config_status",
                "PTR_SystemCoreClock_0800371c": "clock_freq",
                "PTR_uwTickFreq_08003718": "tick_freq",
                "HAL_SYSTICK_Config": "HAL_SYSTICK_Config",
                "HAL_ERROR": "HAL_ERROR",
                "HAL_NVIC_SetPriority": "HAL_NVIC_SetPriority",
                "SysTick_IRQn": "SysTick_IRQn",
                "PTR_uwTickPrio_08003720": "PTR_uwTickPrio_08003720",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef set_systick_080036d8(uint32_t tick_priority) {\n  uint32_t PTR_SystemCoreClock_0800371c = *(uint *)PTR_SystemCoreClock_0800371c;\n  uint32_t PTR_uwTickFreq_08003718 = (uint32_t)((uint64_t)PTR_SystemCoreClock_0800371c / (1000 / (uint64_t)*(byte *)PTR_uwTickFreq_08003718));\n  uint32_t config_status = HAL_SYSTICK_Config(PTR_uwTickFreq_08003718);\n  if (config_status != HAL_OK) {\n    return HAL_ERROR;\n  }\n  if (tick_priority > 0xf) {\n    return HAL_ERROR;\n  }\n  HAL_NVIC_SetPriority(SysTick_IRQn, tick_priority, 0);\n  *(uint32_t *)PTR_uwTickPrio_08003720 = tick_priority;\n  return HAL_OK;\n}",
            "called": [
                "HAL_SYSTICK_Config",
                "HAL_NVIC_SetPriority"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036d8",
            "calling": [
                "HAL_RCC_ClockConfig",
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "set_systick_080036d8"
        },
        "FUN_0800a110": {
            "renaming": {
                "FUN_0800a110": "check_terminal_0800a110",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "puVar1": "error_pointer",
                "iVar2": "is_terminal"
            },
            "code": "void check_terminal_0800a110(int *error_code, int file_descriptor) {\n    undefined *error_pointer;\n    int is_terminal;\n\n    error_pointer = PTR_errno_0800a12c;\n    *(undefined4 *)PTR_errno_0800a12c = 0;\n    is_terminal = _isatty(file_descriptor);\n    if ((is_terminal == -1) && (*(int *)error_pointer != 0)) {\n        *error_code = *(int *)error_pointer;\n    }\n    return;\n}",
            "called": [
                "_isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a110",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "check_terminal_0800a110"
        },
        "FUN_08003b8c": {
            "renaming": {
                "FUN_08003b8c": "check_adc_status_08003b8c",
                "hadc": "adc_handler",
                "uVar1": "start_time",
                "uVar2": "current_time",
                "pAVar3": "adc_instance"
            },
            "code": "HAL_StatusTypeDef_conflict check_adc_status_08003b8c(ADC_HandleTypeDef *adc_handler)\n{\n    uint32_t current_time;\n    uint32_t start_time;\n    ADC_TypeDef *adc_instance;\n    adc_instance = adc_handler->Instance;\n    if ((adc_instance->CR2 & 1) == 0) {\n        return HAL_OK;\n    }\n    adc_instance->CR2 = adc_instance->CR2 & 0xfffffffe;\n    start_time = HAL_GetTick();\n    do {\n        if ((adc_handler->Instance->CR2 & 1) == 0) {\n            return HAL_OK;\n        }\n        current_time = HAL_GetTick();\n    } while (current_time - start_time < 3);\n    adc_handler->State = adc_handler->State | 0x10;\n    adc_handler->ErrorCode = adc_handler->ErrorCode | 1;\n    return HAL_ERROR;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003b8c",
            "calling": [
                "HAL_ADC_Init",
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_DeInit",
                "HAL_ADC_Stop"
            ],
            "imported": false,
            "current_name": "check_adc_status_08003b8c"
        },
        "FUN_080035b8": {
            "renaming": {
                "FUN_080035b8": "initialize_system_clock_080035b8",
                "HVar1": "status",
                "uVar2": "hclk_freq",
                "PeriphClkInit": "periph_clk_init",
                "RCC_ClkInitStruct": "clk_init_struct",
                "RCC_OscInitStruct": "osc_init_struct",
                "OscillatorType": "OscillatorType",
                "HSIState": "HSIState",
                "HSICalibrationValue": "HSICalibrationValue",
                "PLLState": "PLLState",
                "PLLSource": "PLLSource",
                "PLLMUL": "PLLMUL",
                "ClockType": "ClockType",
                "SYSCLKSource": "SYSCLKSource",
                "AHBCLKDivider": "AHBCLKDivider",
                "APB1CLKDivider": "APB1CLKDivider",
                "APB2CLKDivider": "APB2CLKDivider",
                "PeriphClockSelection": "PeriphClockSelection",
                "AdcClockSelection": "AdcClockSelection"
            },
            "code": "void initialize_system_clock_080035b8(void)\n{\n    HAL_StatusTypeDef_conflict status;\n    uint32_t hclk_freq;\n    RCC_PeriphCLKInitTypeDef periph_clk_init;\n    RCC_ClkInitTypeDef clk_init_struct;\n    RCC_OscInitTypeDef osc_init_struct;\n\n    osc_init_struct.OscillatorType = RCC_OSCILLATORTYPE_HSI;\n    osc_init_struct.HSIState = RCC_HSI_ON;\n    osc_init_struct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;\n    osc_init_struct.PLL.PLLState = RCC_PLL_ON;\n    osc_init_struct.PLL.PLLSource = RCC_PLLSOURCE_HSI;\n    osc_init_struct.PLL.PLLMUL = RCC_PLL_MUL6;\n    status = HAL_RCC_OscConfig(&osc_init_struct);\n    if (status != HAL_OK) {\n        _Error_Handler(PTR_s__home_bo__arduino15_packages_STM_08003654, 0x88);\n    }\n\n    clk_init_struct.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;\n    clk_init_struct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;\n    clk_init_struct.AHBCLKDivider = RCC_SYSCLK_DIV1;\n    clk_init_struct.APB1CLKDivider = RCC_HCLK_DIV2;\n    clk_init_struct.APB2CLKDivider = RCC_HCLK_DIV1;\n    status = HAL_RCC_ClockConfig(&clk_init_struct, FLASH_LATENCY_1);\n    if (status != HAL_OK) {\n        _Error_Handler(PTR_s__home_bo__arduino15_packages_STM_08003654, 0x95);\n    }\n\n    periph_clk_init.PeriphClockSelection = RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_USB;\n    periph_clk_init.AdcClockSelection = RCC_ADCPCLK2_DIV6;\n    status = HAL_RCCEx_PeriphCLKConfig(&periph_clk_init);\n    if (status != HAL_OK) {\n        _Error_Handler(PTR_s__home_bo__arduino15_packages_STM_08003654, 0x9c);\n    }\n\n    hclk_freq = HAL_RCC_GetHCLKFreq();\n    HAL_SYSTICK_Config((uint32_t)(SYSTICK_FREQ * hclk_freq));\n    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);\n    HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);\n    return;\n}\n",
            "called": [
                "_Error_Handler",
                "HAL_RCC_ClockConfig",
                "HAL_RCC_GetHCLKFreq",
                "HAL_SYSTICK_CLKSourceConfig",
                "HAL_RCC_OscConfig",
                "HAL_SYSTICK_Config",
                "HAL_RCCEx_PeriphCLKConfig",
                "HAL_NVIC_SetPriority"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035b8",
            "calling": [
                "hw_config_init"
            ],
            "imported": false,
            "current_name": "initialize_system_clock_080035b8"
        },
        "FUN_08006460": {
            "renaming": {
                "FUN_08006460": "disable_tim_channel_08006460",
                "htim": "timer_handle",
                "Channel": "channel",
                "pTVar1": "timer_instance"
            },
            "code": "HAL_StatusTypeDef_conflict disable_tim_channel_08006460(TIM_HandleTypeDef_conflict *htim,uint32_t channel)\n{\n  TIM_TypeDef_conflict *timer_instance;\n  TIM_CCxNChannelCmd(htim->Instance, channel, 0);\n  timer_instance = htim->Instance;\n  if (((timer_instance->CCER & 0x1111) == 0) && ((timer_instance->CCER & 0x444) == 0)) {\n    timer_instance->BDTR &= 0xffff7fff;\n  }\n  timer_instance = htim->Instance;\n  if (((timer_instance->CCER & 0x1111) == 0) && ((timer_instance->CCER & 0x444) == 0)) {\n    timer_instance->CR1 &= 0xfffffffe;\n  }\n  return HAL_OK;\n}",
            "called": [
                "TIM_CCxNChannelCmd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006460",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "disable_tim_channel_08006460"
        },
        "FUN_08004046": {
            "renaming": {
                "FUN_08004046": "update_systick_callback_08004046"
            },
            "code": "void update_systick_callback_08004046(void)\n{\n  HAL_SYSTICK_Callback();\n  return;\n}",
            "called": [
                "HAL_SYSTICK_Callback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004046",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "update_systick_callback_08004046"
        },
        "FUN_08008880": {
            "renaming": {
                "FUN_08008880": "read_adc_value_08008880",
                "ulPin": "pin_number",
                "bVar1": "is_valid_pin",
                "pin": "pin_name",
                "uVar2": "adc_value",
                "uVar3": "result",
                "uVar4": "read_resolution"
            },
            "code": "uint32_t read_adc_value_08008880(uint32_t pin_number)\n{\n  bool is_valid_pin;\n  PinName_conflict pin_name;\n  uint16_t adc_value;\n  uint read_resolution;\n  uint32_t result;\n\n  if (pin_number < 0xe) {\n    if (pin_number + 0x2e < 0x3c) {\n      is_valid_pin = true;\n    }\n    else {\n      is_valid_pin = false;\n    }\n  }\n  else {\n    is_valid_pin = pin_number < 0x3c;\n  }\n\n  if (is_valid_pin) {\n    if (pin_number < 0xe) {\n      pin_number = pin_number + 0x2e;\n    }\n    pin_name = PTR_digitalPin_080088d8[pin_number];\n  }\n  else {\n    pin_name = NC;\n  }\n\n  if (pin_name == NC) {\n    result = 0;\n  }\n  else {\n    adc_value = adc_read_value(pin_name);\n    result = (uint32_t)adc_value;\n    read_resolution = *(uint *)PTR__readResolution_080088dc;\n    if (read_resolution != 0xc) {\n      if (read_resolution < 0xc) {\n        return (uint)(adc_value >> (0xc - read_resolution & 0xff));\n      }\n      return result << (read_resolution - 0xc & 0xff);\n    }\n  }\n  return result;\n}",
            "called": [
                "adc_read_value"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008880",
            "calling": [
                "reportAnalogCallback",
                "loop"
            ],
            "imported": false,
            "current_name": "read_adc_value_08008880"
        },
        "FUN_08004044": {
            "renaming": {
                "FUN_08004044": "do_nothing_08004044"
            },
            "code": "\nvoid do_nothing_08004044(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004044",
            "calling": [
                "HAL_SYSTICK_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08004044"
        },
        "FUN_08002ed2": {
            "renaming": {
                "FUN_08002ed2": "parse_stream_08002ed2",
                "this": "firmata_instance",
                "iVar1": "stream_byte",
                "FirmataStream": "firmata_instance->FirmataStream",
                "super_Print": "FirmataStream->super_Print",
                "_vptr_Print": "FirmataStream->super_Print->_vptr_Print",
                "FirmataParser": "FirmataParser",
                "parser": "firmata_instance->parser"
            },
            "code": "void __thiscall parse_stream_08002ed2(FirmataClass *firmata_instance) {\n  int stream_byte = (*(firmata_instance->FirmataStream->super_Print)._vptr_Print[3])();\n  if (stream_byte != -1) {\n    FirmataParser::parse(&firmata_instance->parser,(uint8_t)stream_byte);\n  }\n  return;\n}",
            "called": [
                "parse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ed2",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "parse_stream_08002ed2"
        },
        "FUN_08008f1c": {
            "renaming": {
                "FUN_08008f1c": "main_loop_08008f1c",
                "DAT_08008f38": "data"
            },
            "code": "int main_loop_08008f1c(void)\n{\n  init_variant();\n  setup();\n  do {\n    do {\n      loop();\n    } while (DAT_08008f38 == 0);\n    serial_event_run();\n  } while(true);\n}",
            "called": [
                "loop",
                "initVariant",
                "serialEventRun",
                "setup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f1c",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "main_loop_08008f1c"
        },
        "FUN_080058ac": {
            "renaming": {
                "FUN_080058ac": "configure_RCC_clocks_080058ac",
                "RCC_ClkInitStruct_conflict": "clock_init_struct",
                "FLatency": "flash_latency",
                "puVar1": "FLASH_ACR_register",
                "uVar2": "current_tick",
                "uVar3": "start_tick",
                "uVar4": "sysclk_source"
            },
            "code": "HAL_StatusTypeDef_conflict configure_RCC_clocks_080058ac(RCC_ClkInitTypeDef_conflict *clock_init_struct, uint32_t flash_latency) {\n    uint32_t *FLASH_ACR_register = DAT_08005a0c;\n    if (((*FLASH_ACR_register & 7) < flash_latency) && (*FLASH_ACR_register = *FLASH_ACR_register & 0xfffffff8 | flash_latency, flash_latency != (*FLASH_ACR_register & 7))) {\n        return HAL_ERROR;\n    }\n    if ((clock_init_struct->ClockType & RCC_CLOCKTYPE_AHB) != 0) {\n        DAT_08005a10[1] = DAT_08005a10[1] & 0xffffff0f | clock_init_struct->AHBCLKDivider;\n    }\n    if ((clock_init_struct->ClockType & RCC_CLOCKTYPE_SYSCLK) != 0) {\n        uint32_t sysclk_source = clock_init_struct->SYSCLKSource;\n        if (sysclk_source == RCC_SYSCLKSOURCE_PLLCLK) {\n            if ((*DAT_08005a10 & 0x20000) == 0) {\n                return HAL_ERROR;\n            }\n        }\n        else if ((sysclk_source != RCC_SYSCLKSOURCE_HSE) && ((*DAT_08005a10 & 2) == 0)) {\n            return HAL_ERROR;\n        }\n        DAT_08005a10[1] = sysclk_source | DAT_08005a10[1] & 0xfffffffc;\n        uint32_t start_tick = HAL_GetTick();\n        while (((sysclk_source == RCC_SYSCLKSOURCE_PLLCLK) && ((DAT_08005a10[1] & 0xc) != 4)) || ((sysclk_source == RCC_SYSCLKSOURCE_HSE) && ((DAT_08005a10[1] & 0xc) != 8)) || ((sysclk_source == RCC_SYSCLKSOURCE_HSI) && ((DAT_08005a10[1] & 0xc) != 0))) {\n            uint32_t current_tick = HAL_GetTick();\n            if (current_tick - start_tick > 5000) {\n                return HAL_TIMEOUT;\n            }\n        }\n    }\n    FLASH_ACR_register = DAT_08005a0c;\n    if ((flash_latency < (*DAT_08005a0c & 7)) && (*DAT_08005a0c = *DAT_08005a0c & 0xfffffff8 | flash_latency, flash_latency != (*FLASH_ACR_register & 7))) {\n        return HAL_ERROR;\n    }\n    if ((clock_init_struct->ClockType & RCC_CLOCKTYPE_PCLK1) != 0) {\n        DAT_08005a10[1] = DAT_08005a10[1] & 0xfffff8ff | clock_init_struct->APB1CLKDivider;\n    }\n    if ((clock_init_struct->ClockType & RCC_CLOCKTYPE_PCLK2) != 0) {\n        DAT_08005a10[1] = DAT_08005a10[1] & 0xffffc7ff | clock_init_struct->APB2CLKDivider << 3;\n    }\n    uint32_t sysclk_frequency = HAL_RCC_GetSysClockFreq();\n    *(uint32_t *)PTR_SystemCoreClock_08005a18 = sysclk_frequency >> PTR_AHBPrescTable_08005a14[(DAT_08005a10[1] << 0x18) >> 0x1c];\n    HAL_InitTick(0xf);\n    return HAL_OK;\n}",
            "called": [
                "HAL_GetTick",
                "HAL_InitTick",
                "HAL_RCC_GetSysClockFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058ac",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "configure_RCC_clocks_080058ac"
        },
        "FUN_08007438": {
            "renaming": {
                "FUN_08007438": "configure_timer_08007438",
                "htim": "timer",
                "tmpreg": "temporary_register",
                "tmpreg_1": "temporary_register_1",
                "tmpreg_2": "temporary_register_2",
                "tmpreg_3": "temporary_register_3",
                "DAT_080074d0": "TIM1",
                "PTR_timer_handles_080074dc": "timer_handles",
                "_DAT_4002101c": "RCC_APB1ENR_TIM2EN",
                "TIM_TypeDef_conflict": "TIM_Type",
                "DAT_080074d4": "TIM3",
                "DAT_080074d8": "TIM4"
            },
            "code": "void configure_timer_08007438(TIM_HandleTypeDef_conflict *timer)\n{\n  uint32_t tmpreg;\n  uint32_t tmpreg_1;\n  uint32_t tmpreg_2;\n  uint32_t tmpreg_3;\n  \n  if (timer->Instance == DAT_080074d0) {\n    DAT_080074d0->DIER |= TIM_DIER_UIE;\n    *(TIM_HandleTypeDef_conflict **)PTR_timer_handles_080074dc = timer;\n  }\n  if (timer->Instance == TIM2) {\n    RCC->APB1ENR |= _DAT_4002101c;\n    *(TIM_HandleTypeDef_conflict **)(PTR_timer_handles_080074dc + 4) = timer;\n  }\n  if (timer->Instance == DAT_080074d4) {\n    DAT_080074d4->CCMR1 |= TIM_CCMR1_CC1S_0;\n    *(TIM_HandleTypeDef_conflict **)(PTR_timer_handles_080074dc + 8) = timer;\n  }\n  if (timer->Instance == DAT_080074d8) {\n    DAT_080074d8->SMCR |= TIM_SMCR_TS_2;\n    *(TIM_HandleTypeDef_conflict **)(PTR_timer_handles_080074dc + 0xc) = timer;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007438",
            "calling": [
                "HAL_TIM_PWM_MspInit",
                "HAL_TIM_OC_MspInit"
            ],
            "imported": false,
            "current_name": "configure_timer_08007438"
        },
        "FUN_0800306c": {
            "renaming": {
                "FUN_0800306c": "initialize_static_variables_0800306c"
            },
            "code": "void initialize_static_variables_0800306c(void)\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800306c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_variables_0800306c"
        },
        "FUN_0800887c": {
            "renaming": {
                "FUN_0800887c": "get_process_id_0800887c"
            },
            "code": "__pid_t get_process_id_0800887c(void)\n{\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800887c",
            "calling": [
                "_getpid_r"
            ],
            "imported": false,
            "current_name": "get_process_id_0800887c"
        },
        "FUN_0800863c": {
            "renaming": {
                "FUN_0800863c": "receive_data_0800863c",
                "obj": "serial_object",
                "callback": "callback_function",
                "bVar1": "index",
                "uVar2": "is_rx_active"
            },
            "code": "void receive_data_0800863c(serial_t *serial_object, _func_void_serial_t_ptr *callback_function) {\\n  byte index;\\n  uint8_t is_rx_active;\\n  \\n  if (serial_object != (serial_t *)0x0) {\\n    is_rx_active = serial_rx_active(serial_object);\\n    if (is_rx_active == \"\\0\") {\\n      index = serial_object->index;\\n      *(_func_void_serial_t_ptr **)(PTR_rx_callback_08008688 + (uint)index * 4) = callback_function;\\n      *(serial_t **)(PTR_rx_callback_obj_0800868c + (uint)index * 4) = serial_object;\\n      HAL_NVIC_SetPriority(serial_object->irq, 0, 1);\\n      HAL_NVIC_EnableIRQ(serial_object->irq);\\n      HAL_UART_Receive_IT(*(UART_HandleTypeDef **)(PTR_uart_handlers_08008690 + (uint)serial_object->index * 4), &serial_object->recv, 1);\\n    }\\n  }\\n}",
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_UART_Receive_IT",
                "HAL_NVIC_EnableIRQ",
                "serial_rx_active"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800863c",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "receive_data_0800863c"
        },
        "FUN_08004050": {
            "renaming": {
                "FUN_08004050": "configure_DMA_channel_08004050",
                "hdma": "dma_handler",
                "uVar1": "channel_configuration",
                "pDVar2": "dma_channel"
            },
            "code": "HAL_StatusTypeDef_conflict configure_DMA_channel_08004050(DMA_HandleTypeDef_conflict *dma_handler) {\n    undefined4 channel_configuration;\n    DMA_Channel_TypeDef_conflict *dma_channel;\n\n    if (dma_handler->State != HAL_DMA_STATE_BUSY) {\n        dma_handler->ErrorCode = 4;\n        return HAL_ERROR;\n    }\n    dma_handler->Instance->CCR &= 0xfffffff1;\n    dma_handler->Instance->CCR &= 0xfffffffe;\n    dma_channel = dma_handler->Instance;\n    if (dma_channel == DAT_080040e0) {\n        channel_configuration = 1;\n    }\n    else if (dma_channel == (DMA_Channel_TypeDef_conflict *)&DAT_080040e0[1].CNDTR) {\n        channel_configuration = 0x10;\n    }\n    else if (dma_channel == (DMA_Channel_TypeDef_conflict *)&DAT_080040e0[2].CPAR) {\n        channel_configuration = 0x100;\n    }\n    else if (dma_channel == (DMA_Channel_TypeDef_conflict *)&DAT_080040e0[3].CMAR) {\n        channel_configuration = 0x1000;\n    }\n    else if (dma_channel == DAT_080040e0 + 5) {\n        channel_configuration = 0x10000;\n    }\n    else if (dma_channel == (DMA_Channel_TypeDef_conflict *)&DAT_080040e0[6].CNDTR) {\n        channel_configuration = 0x100000;\n    }\n    else {\n        channel_configuration = 0x1000000;\n    }\n    *(undefined4 *)(DAT_080040e4 + 4) = channel_configuration;\n    dma_handler->State = HAL_DMA_STATE_READY;\n    dma_handler->Lock = HAL_UNLOCKED;\n    if (dma_handler->XferAbortCallback != (_func_void___DMA_HandleTypeDef_ptr_conflict *)0x0) {\n        (*dma_handler->XferAbortCallback)(dma_handler);\n        return HAL_OK;\n    }\n    return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004050",
            "calling": [
                "HAL_UART_IRQHandler",
                "I2C_ITError"
            ],
            "imported": false,
            "current_name": "configure_DMA_channel_08004050"
        },
        "FUN_08008e14": {
            "renaming": {
                "FUN_08008e14": "initialize_priority_08008e14",
                "__initialize_p": "should_initialize",
                "__priority": "priority_level"
            },
            "code": "void initialize_priority_08008e14(int should_initialize, int priority_level) {\n    if (should_initialize == 1 && priority_level == 0xffff) {\n        IPAddress::IPAddress((IPAddress *)PTR_INADDR_NONE_08008e3c, \"\\0\", \"\\0\", \"\\0\", \"\\0\");\n        return;\n    }\n    return;\n}",
            "called": [
                "IPAddress"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e14",
            "calling": [
                "_GLOBAL__sub_I__ZN9IPAddressC2Ev"
            ],
            "imported": false,
            "current_name": "initialize_priority_08008e14"
        },
        "FUN_08005a28": {
            "renaming": {
                "FUN_08005a28": "get_HCLK_frequency_divided_by_APB_prescaler_08005a28",
                "DAT_08005a40": "Data_08005a40",
                "PTR_APBPrescTable_08005a44": "Pointer_APBPrescTable_08005a44"
            },
            "code": "uint32_t get_HCLK_frequency_divided_by_APB_prescaler_08005a28(void)\n{\n  uint32_t HCLK_Frequency = HAL_RCC_GetHCLKFreq();\n  uint32_t APB_Prescaler_Index = (uint)(*(int *)(DAT_08005a40 + 4) << 0x15) >> 0x1d;\n  uint32_t APB_Prescaler = PTR_APBPrescTable_08005a44[APB_Prescaler_Index];\n  uint32_t HCLK_Frequency_divided_by_APB_prescaler = HCLK_Frequency >> APB_Prescaler;\n  return HCLK_Frequency_divided_by_APB_prescaler;\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a28",
            "calling": [
                "getTimerClkFreq",
                "HAL_I2C_Init",
                "UART_SetConfig"
            ],
            "imported": false,
            "current_name": "get_HCLK_frequency_divided_by_APB_prescaler_08005a28"
        },
        "FUN_08008ac6": {
            "renaming": {
                "FUN_08008ac6": "calculate_tx_tail_08008ac6",
                "obj": "serial_obj",
                "uVar1": "tail_as_ushort",
                "uVar2": "masked_tail",
                "iVar3": "next_tx_tail"
            },
            "code": "int calculate_tx_tail_08008ac6(serial_t_conflict *serial_obj)\n{\n  int next_tx_tail = serial_obj->tx_tail + 1;\n  ushort tail_as_ushort = (ushort)next_tx_tail;\n  uint16_t masked_tail = tail_as_ushort & 0x7f;\n  if (next_tx_tail == 0) {\n    masked_tail = -(-tail_as_ushort & 0x7f);\n  }\n  serial_obj->tx_tail = masked_tail;\n  if (serial_obj->tx_head != serial_obj->tx_tail) {\n    return 0;\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ac6",
            "calling": [],
            "imported": false,
            "current_name": "calculate_tx_tail_08008ac6"
        },
        "FUN_08003002": {
            "renaming": {
                "FUN_08003002": "initialize_board_pins_08003002",
                "this->FUN_08003002Disabled": "this->is_disabled",
                "0xd": "13",
                "'\\r'": "'\\r'",
                "2": "2",
                "0x28": "40",
                "0xd2": "210",
                "0xfa": "250",
                "5": "5",
                "0x7d": "125"
            },
            "code": "void __thiscall firmata::FirmataClass::initialize_board_pins_08003002(FirmataClass *this)\n{\n  if (this->is_disabled != false) {\n    return;\n  }\n  pinMode(13, OUTPUT);\n  strobeBlinkPin(this, '\\r', 2, 40, 210);\n  delay(250);\n  strobeBlinkPin(this, '\\r', 5, 40, 210);\n  delay(125);\n  return;\n}",
            "called": [
                "delay",
                "strobeBlinkPin",
                "pinMode"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003002",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "initialize_board_pins_08003002"
        },
        "FUN_08008ac4": {
            "renaming": {
                "FUN_08008ac4": "do_nothing_08008ac4"
            },
            "code": "\nvoid do_nothing_08008ac4(uint32_t ms)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ac4",
            "calling": [
                "strobeBlinkPin",
                "blinkVersion"
            ],
            "imported": false,
            "current_name": "do_nothing_08008ac4"
        },
        "FUN_08003366": {
            "renaming": {
                "FUN_08003366": "set_string_callback_08003366",
                "this": "this_parser",
                "command": "command_byte",
                "newFunction": "new_callback_function",
                "context": "callback_context",
                "currentStringCallback": "current_callback_function",
                "currentStringCallbackContext": "current_callback_context"
            },
            "code": "void __thiscall set_string_callback_08003366(FirmataParser *this_parser, uint8_t command, stringCallbackFunction new_callback_function, void *callback_context) {\n  if (command == 'q') {\n    this_parser->currentStringCallback = new_callback_function;\n    this_parser->currentStringCallbackContext = callback_context;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003366",
            "calling": [
                "FirmataClass"
            ],
            "imported": false,
            "current_name": "set_string_callback_08003366"
        },
        "FUN_080091b0": {
            "renaming": {
                "FUN_080091b0": "copy_memory_080091b0",
                "__dest": "destination",
                "__src": "source",
                "__n": "num_bytes",
                "puVar1": "src_ptr",
                "puVar2": "dest_ptr"
            },
            "code": "void * copy_memory_080091b0(void *destination, const void *source, size_t num_bytes) {\n  unsigned char *dest_ptr = (unsigned char*)destination - 1;\n  unsigned char *src_ptr = (unsigned char*)source + num_bytes;\n  for (; source != src_ptr; source = (unsigned char*)source + 1) {\n    dest_ptr++;\n    *dest_ptr = *(unsigned char*)source;\n  }\n  return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091b0",
            "calling": [
                "write",
                "_realloc_r",
                "onReceiveService"
            ],
            "imported": false,
            "current_name": "copy_memory_080091b0"
        },
        "FUN_08009908": {
            "renaming": {
                "FUN_08009908": "allocate_memory_08009908",
                "__ptr": "ptr",
                "__size": "size",
                "pvVar1": "allocated_memory"
            },
            "code": "void * allocate_memory_08009908(void *ptr, size_t size) {\n  void *allocated_memory;\n  allocated_memory = (void *)_allocate_memory_08009908_r(*(undefined4 *)PTR__impure_ptr_08009914, ptr, size);\n  return allocated_memory;\n}",
            "called": [
                "_realloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009908",
            "calling": [
                "write",
                "write",
                "allocateRxBuffer"
            ],
            "imported": false,
            "current_name": "allocate_memory_08009908"
        },
        "FUN_08008abc": {
            "renaming": {
                "FUN_08008abc": "get_current_milli_seconds_08008abc",
                "uVar1": "current_milli_seconds"
            },
            "code": "uint32_t get_current_milli_seconds_08008abc(void)\n{\n  uint32_t current_milli_seconds = GetCurrentMilli();\n  return current_milli_seconds;\n}",
            "called": [
                "GetCurrentMilli"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008abc",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "get_current_milli_seconds_08008abc"
        },
        "FUN_08002b68": {
            "renaming": {
                "FUN_08002b68": "readFromAddress_08002b68",
                "this": "wire",
                "address": "address",
                "quantity": "quantity",
                "iaddress": "internal_address",
                "isize": "internal_address_size",
                "sendStop": "send_stop",
                "iVar1": "status",
                "uVar2": "size"
            },
            "code": "uint8_t __thiscall readFromAddress_08002b68(TwoWire *wire, uint8_t address, uint8_t quantity, uint32_t internal_address, uint8_t internal_address_size, uint8_t send_stop)\n{\n  i2c_status_e_conflict status;\n  uint8_t size = internal_address_size;\n  if (wire->is_master == false) {\n    return 0;\n  }\n  wire->allocate_rx_buffer(quantity);\n  if (*(int *)wire->rx_buffer_ptr != 0) {\n    if (size != 0) {\n      wire->begin_transmission(address);\n      if (size > 3) {\n        size = 3;\n      }\n      while (true) {\n        if (size == 0) break;\n        (**(wire->print_ptr)).write(internal_address >> ((size - 1 & 0x1f) << 3) & 0xff);\n        size = size - 1 & 0xff;\n      }\n      wire->end_transmission(send_stop);\n    }\n    status = i2c_master_read((i2c_t_conflict *)&wire->_i2c, address << 1, *(uint8_t **)wire->rx_buffer_ptr, (ushort)quantity);\n    if (status != I2C_OK) {\n      quantity = 0;\n    }\n    *wire->rx_buffer_index_ptr = 0;\n    *wire->rx_buffer_length_ptr = quantity;\n    return quantity;\n  }\n  wire->print_ptr->write_error = 1;\n  return 0;\n}",
            "called": [
                "beginTransmission",
                "endTransmission",
                "i2c_master_read",
                "allocateRxBuffer"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b68",
            "calling": [
                "requestFrom"
            ],
            "imported": false,
            "current_name": "readFromAddress_08002b68"
        },
        "FUN_080005e0": {
            "renaming": {
                "FUN_080005e0": "initialize_i2c_query_080005e0",
                "PTR_isI2CEnabled_080005f0": "is_i2c_enabled",
                "PTR_queryIndex_080005f4": "query_index"
            },
            "code": "void initialize_i2c_query_080005e0(void)\n{\n  *PTR_isI2CEnabled_080005f0 = 0;\n  *PTR_queryIndex_080005f4 = 0xff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e0",
            "calling": [
                "systemResetCallback",
                "setPinModeCallback"
            ],
            "imported": false,
            "current_name": "initialize_i2c_query_080005e0"
        },
        "FUN_0800674c": {
            "renaming": {
                "FUN_0800674c": "do_nothing_0800674c"
            },
            "code": "\nvoid do_nothing_0800674c(UART_HandleTypeDef *huart)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800674c",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_0800674c"
        },
        "FUN_0800674e": {
            "renaming": {
                "FUN_0800674e": "configure_uart_0800674e",
                "*huart": "*uart_handle",
                "HAL_UART_MspInit": "HAL_UART_MspInit",
                "huart": "uart_handle",
                "gState": "global_state",
                "Lock": "lock",
                "Instance": "instance",
                "CR1": "control_register_1",
                "CR2": "control_register_2",
                "CR3": "control_register_3",
                "ErrorCode": "error_code",
                "HAL_OK": "HAL_OK",
                "HAL_ERROR": "HAL_ERROR"
            },
            "code": "HAL_StatusTypeDef_conflict configure_uart_0800674e(UART_HandleTypeDef *uart_handle)\n{\n    if (uart_handle != NULL) {\n        if (uart_handle->gState == HAL_UART_STATE_RESET) {\n            uart_handle->Lock = HAL_UNLOCKED;\n            HAL_UART_MspInit(uart_handle);\n        }\n        uart_handle->gState = HAL_UART_STATE_BUSY;\n        uart_handle->Instance->CR1 &= ~(1 << 13);\n        UART_SetConfig(uart_handle);\n        uart_handle->Instance->CR2 &= ~(1 << 11);\n        uart_handle->Instance->CR3 &= ~(1 << 2);\n        uart_handle->Instance->CR1 |= (1 << 13);\n        uart_handle->ErrorCode = 0;\n        uart_handle->gState = HAL_UART_STATE_READY;\n        uart_handle->RxState = HAL_UART_STATE_READY;\n        return HAL_OK;\n    }\n    return HAL_ERROR;\n}",
            "called": [
                "HAL_UART_MspInit",
                "UART_SetConfig"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800674e",
            "calling": [
                "uart_init"
            ],
            "imported": false,
            "current_name": "configure_uart_0800674e"
        },
        "FUN_0800771c": {
            "renaming": {
                "FUN_0800771c": "handle_timer_interrupt_0800771c",
                "htim": "timer_handle",
                "psVar1": "timer_obj",
                "get_timer_obj": "get_timer_object",
                "irqHandleOC": "irq_handle_output_compare"
            },
            "code": "void handle_timer_interrupt_0800771c(TIM_HandleTypeDef_conflict *timer_handle) {\n  stimer_t_conflict *timer_obj;\n  timer_obj = get_timer_object(timer_handle);\n  if ((timer_obj->irq_handle_output_compare != (_func_void_stimer_t_ptr_uint32_t_conflict *)0x0) && (timer_handle->Channel == HAL_TIM_ACTIVE_CHANNEL_1)) {\n    (*timer_obj->irq_handle_output_compare)(timer_obj,0);\n  }\n  return;\n}",
            "called": [
                "get_timer_obj"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800771c",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_timer_interrupt_0800771c"
        },
        "FUN_08003370": {
            "renaming": {
                "FUN_08003370": "set_sysex_callback_08003370",
                "this": "this_parser",
                "command": "command_byte",
                "newFunction": "new_callback",
                "context": "callback_context"
            },
            "code": "void __thiscall set_sysex_callback_08003370(FirmataParser *this_parser, uint8_t command, sysexCallbackFunction new_callback, void *callback_context) {\n  this_parser->currentSysexCallback = new_callback;\n  this_parser->currentSysexCallbackContext = callback_context;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003370",
            "calling": [
                "FirmataClass"
            ],
            "imported": false,
            "current_name": "set_sysex_callback_08003370"
        },
        "FUN_08003376": {
            "renaming": {
                "FUN_08003376": "handle_data_buffer_overflow_08003376",
                "this": "parser",
                "data": "data",
                "pos": "pos",
                "bVar1": "buffer_overflow",
                "currentDataBufferOverflowCallback": "current_data_buffer_overflow_callback",
                "dataBufferOverflowCallbackFunction": "dataBufferOverflowCallbackFunction",
                "allowBufferUpdate": "allow_buffer_update",
                "currentDataBufferOverflowCallbackContext": "current_data_buffer_overflow_callback_context",
                "dataBufferSize": "data_buffer_size",
                "dataBuffer": "data_buffer"
            },
            "code": "bool __thiscall handle_data_buffer_overflow_08003376(FirmataParser *parser, uint8_t data, size_t pos)\n{\n  bool buffer_overflow = false;\n  if (pos >= parser->data_buffer_size) {\n    buffer_overflow = true;\n    if (parser->current_data_buffer_overflow_callback != (dataBufferOverflowCallbackFunction)0x0) {\n      parser->allow_buffer_update = true;\n      (*parser->current_data_buffer_overflow_callback)(parser->current_data_buffer_overflow_callback_context);\n      buffer_overflow = pos >= parser->data_buffer_size;\n    }\n  }\n  if (!buffer_overflow) {\n    parser->data_buffer[pos] = data;\n  }\n  return buffer_overflow;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003376",
            "calling": [
                "parse",
                "processSysexMessage"
            ],
            "imported": false,
            "current_name": "handle_data_buffer_overflow_08003376"
        },
        "FUN_08008bf4": {
            "renaming": {
                "FUN_08008bf4": "check_serial2_for_available_data_08008bf4",
                "DAT_08008c18": "serial2_data_available_flag",
                "PTR_Serial2_08008c1c": "serial2_instance"
            },
            "code": "void check_serial2_for_available_data_08008bf4(void)\n{\n  if (DAT_08008c18 != 0) {\n    HardwareSerial::available(PTR_Serial2_08008c1c);\n  }\n  return;\n}",
            "called": [
                "available"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008bf4",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "check_serial2_for_available_data_08008bf4"
        },
        "FUN_08002c7c": {
            "renaming": {
                "FUN_08002c7c": "report_analog_callback_08002c7c",
                "param_1": "analog_callback_ptr",
                "command": "command",
                "value": "value",
                "PTR_currentReportAnalogCallback_08002c8c": "current_report_analog_callback_ptr"
            },
            "code": "void report_analog_callback_08002c7c(void *analog_callback_ptr, uint8_t command, uint16_t value) {\n  if (*(code **)PTR_currentReportAnalogCallback_08002c8c != (code *)0x0) {\n    (**(code **)PTR_currentReportAnalogCallback_08002c8c)(command, value);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c7c",
            "calling": [],
            "imported": false,
            "current_name": "report_analog_callback_08002c7c"
        },
        "FUN_08005430": {
            "renaming": {
                "FUN_08005430": "get_i2c_error_code_08005430",
                "hi2c": "i2c_handle",
                "ErrorCode": "error_code"
            },
            "code": "uint32_t get_i2c_error_code_08005430(I2C_HandleTypeDef_conflict *i2c_handle)\n{\n  return i2c_handle->ErrorCode;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005430",
            "calling": [
                "i2c_master_read",
                "i2c_master_write"
            ],
            "imported": false,
            "current_name": "get_i2c_error_code_08005430"
        },
        "FUN_08009918": {
            "renaming": {
                "FUN_08009918": "allocate_memory_08009918",
                "param_1": "memory_address",
                "param_2": "size",
                "puVar1": "errno_ptr",
                "pcVar2": "sbrk_result"
            },
            "code": "void allocate_memory_08009918(int *memory_address, int size) {\n    undefined *errno_ptr;\n    caddr_t sbrk_result;\n    errno_ptr = PTR_errno_08009934;\n    *(undefined4 *)PTR_errno_08009934 = 0;\n    sbrk_result = _sbrk(size);\n    if ((sbrk_result == (caddr_t)0xffffffff) && (*(int *)errno_ptr != 0)) {\n        *memory_address = *(int *)errno_ptr;\n    }\n    return;\n}",
            "called": [
                "_sbrk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009918",
            "calling": [
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_08009918"
        },
        "FUN_08005434": {
            "renaming": {
                "FUN_08005434": "delay_in_milliseconds_08005434",
                "mdelay": "milliseconds",
                "Delay": "delay_cycles",
                "bVar1": "is_delay_finished"
            },
            "code": "void delay_in_milliseconds_08005434(uint32_t milliseconds)\n{\n  bool is_delay_finished;\n  uint32_t delay_cycles = milliseconds * ((uint)((ulonglong)DAT_0800545c * (ulonglong)*(uint *)PTR_SystemCoreClock_08005458 >> 0x29));\n  do {\n    is_delay_finished = delay_cycles != 0;\n    delay_cycles--;\n  } while (is_delay_finished);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005434",
            "calling": [
                "HAL_RCC_OscConfig"
            ],
            "imported": false,
            "current_name": "delay_in_milliseconds_08005434"
        },
        "FUN_08005e2e": {
            "renaming": {
                "FUN_08005e2e": "reset_timer_08005e2e",
                "htim": "timer",
                "TIM_HandleTypeDef_conflict": "TIM_HandleTypeDef",
                "TIM_TypeDef_conflict": "TIM_TypeDef"
            },
            "code": "HAL_StatusTypeDef reset_timer_08005e2e(TIM_HandleTypeDef *timer)\n{\n  TIM_TypeDef *timer_instance;\n  timer->State = HAL_TIM_STATE_BUSY;\n  timer_instance = timer->Instance;\n  if (((timer_instance->CCER & 0x1111) == 0) && ((timer_instance->CCER & 0x444) == 0)) {\n    timer_instance->CR1 = timer_instance->CR1 & 0xfffffffe;\n  }\n  HAL_TIM_PWM_MspDeInit(timer);\n  timer->State = HAL_TIM_STATE_RESET;\n  timer->Lock = HAL_UNLOCKED;\n  return HAL_OK;\n}",
            "called": [
                "HAL_TIM_PWM_MspDeInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e2e",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "reset_timer_08005e2e"
        },
        "FUN_08007736": {
            "renaming": {
                "FUN_08007736": "execute_timer_interrupt_handler_08007736",
                "htim": "timer_handle",
                "psVar1": "timer_obj",
                "get_timer_obj": "get_timer_object",
                "irqHandle": "irq_handler"
            },
            "code": "void execute_timer_interrupt_handler_08007736(TIM_HandleTypeDef_conflict *timer_handle) {\n  stimer_t_conflict *timer_obj = get_timer_object(timer_handle);\n  if (timer_obj->irq_handler != (_func_void_stimer_t_ptr_conflict *)0x0) {\n    (*timer_obj->irq_handler)(timer_obj);\n  }\n  return;\n}",
            "called": [
                "get_timer_obj"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007736",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "execute_timer_interrupt_handler_08007736"
        },
        "FUN_08002c90": {
            "renaming": {
                "FUN_08002c90": "report_digital_callback_08002c90",
                "param_1": "callback_function",
                "command": "command",
                "value": "value",
                "PTR_currentReportDigitalCallback_08002ca0": "current_report_digital_callback"
            },
            "code": "void report_digital_callback_08002c90(void *callback_function, uint8_t command, uint16_t value)\n{\n  if (*(code **)PTR_currentReportDigitalCallback_08002ca0 != (code *)0x0) {\n    (**(code **)PTR_currentReportDigitalCallback_08002ca0)(command, value);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c90",
            "calling": [],
            "imported": false,
            "current_name": "report_digital_callback_08002c90"
        },
        "FUN_0800542a": {
            "renaming": {
                "FUN_0800542a": "get_i2c_state_0800542a",
                "hi2c": "i2c_handle"
            },
            "code": "HAL_I2C_StateTypeDef get_i2c_state_0800542a(I2C_HandleTypeDef *i2c_handle)\n{\n  return i2c_handle->State;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800542a",
            "calling": [
                "i2c_master_read",
                "i2c_master_write"
            ],
            "imported": false,
            "current_name": "get_i2c_state_0800542a"
        },
        "FUN_0800457c": {
            "renaming": {
                "FUN_0800457c": "transfer_byte_0800457c",
                "hi2c": "i2c_handle",
                "pbVar1": "buffer_pointer",
                "XferCount": "transfer_count",
                "pBuffPtr": "buffer_pointer"
            },
            "code": "HAL_StatusTypeDef_conflict transfer_byte_0800457c(I2C_HandleTypeDef_conflict *i2c_handle){\n    byte *buffer_pointer;\n    \n    if (i2c_handle->XferCount != 0) {\n        buffer_pointer = i2c_handle->pBuffPtr;\n        i2c_handle->pBuffPtr = buffer_pointer + 1;\n        i2c_handle->Instance->DR = (uint)*buffer_pointer;\n        i2c_handle->XferCount = i2c_handle->XferCount - 1;\n    }\n    return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800457c",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "transfer_byte_0800457c"
        },
        "FUN_080091c6": {
            "renaming": {
                "FUN_080091c6": "clear_memory_080091c6",
                "__s": "memory_block",
                "__c": "value",
                "__n": "size",
                "puVar1": "byte_pointer"
            },
            "code": "void * clear_memory_080091c6(void *memory_block, int value, size_t size) {\n  unsigned char *byte_pointer;\n  for (byte_pointer = (unsigned char *)memory_block; byte_pointer != (unsigned char *)(size + (int)memory_block); byte_pointer++) {\n    *byte_pointer = (unsigned char)value;\n  }\n  return memory_block;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091c6",
            "calling": [
                "begin",
                "std.isra.0",
                "endTransmission",
                "pwm_start",
                "__sfp",
                "adc_read_value",
                "flush",
                "__sfmoreglue"
            ],
            "imported": false,
            "current_name": "clear_memory_080091c6"
        },
        "FUN_08003a20": {
            "renaming": {
                "FUN_08003a20": "check_ADC_status_08003a20",
                "*hadc": "*adc",
                "HVar1": "status",
                "uVar2": "start_time",
                "uVar3": "current_time",
                "pAVar4": "adc_instance",
                "wait_loop_index": "i"
            },
            "code": "HAL_StatusTypeDef_conflict check_ADC_status_08003a20(ADC_HandleTypeDef *adc)\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t wait_time;\n  uint32_t start_time;\n  uint32_t current_time;\n  ADC_TypeDef *adc_instance;\n  adc_instance = adc->Instance;\n  if ((adc_instance->CR2 & 1) == 0) {\n    adc_instance->CR2 = adc_instance->CR2 | 1;\n    wait_time = (uint32_t)(((uint64_t)DAT_08003a9c) * ((uint64_t)*(uint32_t *)PTR_SystemCoreClock_08003a98) >> 0x32);\n    for (uint32_t i = wait_time; i != 0; i--) {\n    }\n    start_time = HAL_GetTick();\n    do {\n      if ((adc_instance->CR2 & 1) != 0) {\n        return HAL_OK;\n      }\n      current_time = HAL_GetTick();\n    } while (current_time - start_time < 3);\n    adc->State |= 0x10;\n    adc->ErrorCode |= 1;\n    adc->Lock = HAL_UNLOCKED;\n    status = HAL_ERROR;\n  }\n  else {\n    status = HAL_OK;\n  }\n  return status;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a20",
            "calling": [
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_Start"
            ],
            "imported": false,
            "current_name": "check_ADC_status_08003a20"
        },
        "FUN_08009cdc": {
            "renaming": {
                "std_isra_0": "initialize_data",
                "param_1": "data_ptr",
                "param_2": "value1",
                "param_3": "value2",
                "DAT_08009d14": "PTR_DAT_08009d14",
                "DAT_08009d18": "PTR_DAT_08009d18",
                "DAT_08009d1c": "PTR_DAT_08009d1c",
                "DAT_08009d20": "PTR_DAT_08009d20",
                "FUN_08009cdc": "initialize_data_08009cdc"
            },
            "code": "void initialize_data_08009cdc(undefined4 *data_ptr, undefined2 value1, undefined2 value2) {\n  *data_ptr = 0;\n  data_ptr[1] = 0;\n  data_ptr[2] = 0;\n  *(undefined2 *)(data_ptr + 3) = value1;\n  data_ptr[25] = 0;\n  *(undefined2 *)((int)data_ptr + 0xe) = value2;\n  data_ptr[4] = 0;\n  data_ptr[5] = 0;\n  data_ptr[6] = 0;\n  memset(data_ptr + 23, 0, 8);\n  data_ptr[8] = data_ptr;\n  data_ptr[9] = DAT_08009d14;\n  data_ptr[10] = DAT_08009d18;\n  data_ptr[11] = DAT_08009d1c;\n  data_ptr[12] = DAT_08009d20;\n  return;\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009cdc",
            "calling": [
                "__sinit"
            ],
            "imported": false,
            "current_name": "initialize_data_08009cdc"
        },
        "FUN_080026b0": {
            "renaming": {
                "FUN_080026b0": "map_value_to_microseconds_080026b0",
                "this": "servo",
                "value": "input_value",
                "min": "min_pulse_width",
                "max": "max_pulse_width"
            },
            "code": "void __thiscall Servo::map_value_to_microseconds_080026b0(Servo *servo, int value) {\n  int min_pulse_width = (0x88 - servo->min) * 4;\n  int max_pulse_width = (600 - servo->max) * 4;\n  if (value < 0x220) {\n    if (value < 0) {\n      value = 0;\n    }\n    else if (0xb4 < value) {\n      value = 0xb4;\n    }\n    value = map(value, 0, 0xb4, min_pulse_width, max_pulse_width);\n  }\n  map_value_to_microseconds_080026b0Microseconds(servo, value);\n  return;\n}",
            "called": [
                "map",
                "writeMicroseconds"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026b0",
            "calling": [
                "analogWriteCallback"
            ],
            "imported": false,
            "current_name": "map_value_to_microseconds_080026b0"
        },
        "FUN_08002a58": {
            "renaming": {
                "FUN_08002a58": "send_data_08002a58",
                "sendStop": "send_stop",
                "iVar1": "i2c_status",
                "uVar2": "return_value",
                "this": "this",
                "master": "master",
                "i2c_master_write": "i2c_master_write",
                "_i2c": "_i2c",
                "PTR_txAddress_08002ab0": "tx_address",
                "PTR_txBuffer_08002aac": "tx_buffer",
                "PTR_txBufferLength_08002aa8": "tx_buffer_length",
                "I2C_OK": "I2C_OK",
                "I2C_TIMEOUT": "I2C_TIMEOUT",
                "memset": "memset",
                "PTR_txBufferAllocated_08002ab4": "tx_buffer_allocated",
                "PTR_txBufferIndex_08002ab8": "tx_buffer_index",
                "PTR_transmitting_08002abc": "transmitting"
            },
            "code": "uint8_t __thiscall send_data_08002a58(TwoWire *this, uint8_t send_stop) {\n  i2c_status_e_conflict i2c_status;\n  uint8_t return_value;\n  if (this->master == false) {\n    return_value = 4;\n  }\n  else {\n    i2c_status = i2c_master_write((i2c_t_conflict *)&this->_i2c, *PTR_txAddress_08002ab0, *(uint8_t **)*PTR_txBuffer_08002aac, (ushort)(byte)*PTR_txBufferLength_08002aa8);\n    if (i2c_status == I2C_OK) {\n      return_value = 0;\n    }\n    else if (i2c_status == I2C_TIMEOUT) {\n      return_value = 1;\n    }\n    else {\n      return_value = 4;\n    }\n    if (*(void **)*PTR_txBuffer_08002aac != (void *)0x0) {\n      memset(*(void **)*PTR_txBuffer_08002aac, 0, (uint)(byte)*PTR_txBufferAllocated_08002ab4);\n    }\n    *PTR_txBufferIndex_08002ab8 = 0;\n    *PTR_txBufferLength_08002aa8 = 0;\n    *PTR_transmitting_08002abc = 0;\n  }\n  return return_value;\n}",
            "called": [
                "memset",
                "i2c_master_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a58",
            "calling": [
                "requestFrom",
                "endTransmission",
                "readAndReportData"
            ],
            "imported": false,
            "current_name": "send_data_08002a58"
        },
        "FUN_080004d4": {
            "renaming": {
                "FUN_080004d4": "initialize_servos_080004d4",
                "__initialize_p": "should_initialize",
                "__priority": "priority_level",
                "iVar1": "servo_index",
                "this": "servo_array"
            },
            "code": "void initialize_servos_080004d4(int should_initialize, int priority_level)\n{\n    int servo_index;\n    Servo *servo_array;\n    \n    if (should_initialize != 1) {\n        return;\n    }\n    \n    if (priority_level == 0xffff) {\n        servo_array = (Servo *)PTR_servos_080004fc;\n        for (servo_index = 0xb; servo_index >= 0; servo_index--) {\n            Servo::Servo(servo_array);\n            servo_array++;\n        }\n    }\n    return;\n}",
            "called": [
                "Servo"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080004d4",
            "calling": [
                "_GLOBAL__sub_I_analogInputsToReport"
            ],
            "imported": false,
            "current_name": "initialize_servos_080004d4"
        },
        "FUN_080005f8": {
            "renaming": {
                "FUN_080005f8": "FUNC_080005f8"
            },
            "code": "\nvoid FUNC_080005f8(byte pin,int mode)\n\n{\n  undefined *this;\n  byte bVar1;\n  PinName_conflict PVar2;\n  bool bVar3;\n  bool bVar4;\n  _Bool _Var5;\n  uint ulPin;\n  uint32_t uVar6;\n  char cVar7;\n  uint uVar8;\n  \n  ulPin = (uint)pin;\n  bVar1 = firmata::FirmataClass::getPinMode((FirmataClass *)PTR_Firmata_08000874,pin);\n  if (bVar1 != '\\x7f') {\n    bVar1 = firmata::FirmataClass::getPinMode((FirmataClass *)PTR_Firmata_08000874,pin);\n    if (bVar1 == '\\x06') {\n      cVar7 = *PTR_isI2CEnabled_0800087c;\n      if (cVar7 == '\\0') {\n        cVar7 = '\\0';\n      }\n      else if (mode == 6) {\n        cVar7 = '\\0';\n      }\n    }\n    else {\n      cVar7 = '\\0';\n    }\n    if (cVar7 != '\\0') {\n      disableI2CPins();\n    }\n    if (ulPin < 0x3c) {\n      if (PTR_digitalPin_08000878[ulPin] == NC) {\n        bVar3 = false;\n      }\n      else {\n        uVar6 = pinNametoDigitalPin(PTR_digitalPin_08000878[ulPin]);\n        if (uVar6 == 0) {\n          bVar3 = false;\n        }\n        else {\n          uVar6 = pinNametoDigitalPin(PTR_digitalPin_08000878[ulPin]);\n          if (uVar6 == 1) {\n            bVar3 = false;\n          }\n          else if (mode == 4) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    else {\n      bVar3 = false;\n    }\n    if (bVar3) {\n      if ((byte)PTR_servoPinMap_08000880[ulPin] < 0xc) {\n        bVar3 = Servo::attached((Servo *)(PTR_servos_08000884 +\n                                         (uint)(byte)PTR_servoPinMap_08000880[ulPin] * 3));\n      }\n      else {\n        bVar3 = false;\n      }\n      if (bVar3 != false) {\n        detachServo(pin);\n      }\n    }\n    uVar8 = ulPin - 0x2e & 0xff;\n    if (uVar8 < 0xe) {\n      if (ulPin < 0x3c) {\n        PVar2 = PTR_digitalPin_08000878[ulPin];\n      }\n      else {\n        PVar2 = NC;\n      }\n      uVar6 = pinNametoDigitalPin(PVar2);\n      if (uVar6 == 0) {\n        bVar3 = false;\n      }\n      else {\n        if (ulPin < 0x3c) {\n          PVar2 = PTR_digitalPin_08000878[ulPin];\n        }\n        else {\n          PVar2 = NC;\n        }\n        uVar6 = pinNametoDigitalPin(PVar2);\n        if (uVar6 == 1) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    else {\n      bVar3 = false;\n    }\n    if (bVar3) {\n      reportAnalogCallback((byte)uVar8,(uint)(mode == 2));\n    }\n    if (ulPin < 0x3c) {\n      if (PTR_digitalPin_08000878[ulPin] == NC) {\n        bVar3 = false;\n      }\n      else {\n        uVar6 = pinNametoDigitalPin(PTR_digitalPin_08000878[ulPin]);\n        if (uVar6 == 0) {\n          bVar3 = false;\n        }\n        else {\n          uVar6 = pinNametoDigitalPin(PTR_digitalPin_08000878[ulPin]);\n          if (uVar6 == 1) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    else {\n      bVar3 = false;\n    }\n    if (bVar3) {\n      if ((mode == 0) || (mode == 0xb)) {\n        PTR_portConfigInputs_08000888[pin >> 3] =\n             PTR_portConfigInputs_08000888[pin >> 3] | (byte)(1 << (ulPin & 7));\n      }\n      else {\n        PTR_portConfigInputs_08000888[pin >> 3] =\n             PTR_portConfigInputs_08000888[pin >> 3] & ~(byte)(1 << (ulPin & 7));\n      }\n    }\n    firmata::FirmataClass::setPinState((FirmataClass *)PTR_Firmata_08000874,pin,0);\n    switch(mode) {\n    case 0:\n      if (ulPin < 0x3c) {\n        if (PTR_digitalPin_08000878[ulPin] == NC) {\n          bVar3 = false;\n        }\n        else {\n          uVar6 = pinNametoDigitalPin(PTR_digitalPin_08000878[ulPin]);\n          if (uVar6 == 0) {\n            bVar3 = false;\n          }\n          else {\n            uVar6 = pinNametoDigitalPin(PTR_digitalPin_08000878[ulPin]);\n            if (uVar6 == 1) {\n              bVar3 = false;\n            }\n            else {\n              bVar3 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar3 = false;\n      }\n      if (bVar3) {\n        pinMode(ulPin,0);\n        firmata::FirmataClass::setPinMode((FirmataClass *)PTR_Firmata_08000874,pin,'\\0');\n        return;\n      }\n      break;\n    case 1:\n      if (ulPin < 0x3c) {\n        if (PTR_digitalPin_08000a48[ulPin] == NC) {\n          bVar3 = false;\n        }\n        else {\n          uVar6 = pinNametoDigitalPin(PTR_digitalPin_08000a48[ulPin]);\n          if (uVar6 == 0) {\n            bVar3 = false;\n          }\n          else {\n            uVar6 = pinNametoDigitalPin(PTR_digitalPin_08000a48[ulPin]);\n            if (uVar6 == 1) {\n              bVar3 = false;\n            }\n            else {\n              bVar3 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar3 = false;\n      }\n      if (bVar3) {\n        bVar1 = firmata::FirmataClass::getPinMode((FirmataClass *)PTR_Firmata_08000a44,pin);\n        if (bVar1 == '\\x03') {\n          digitalWrite(ulPin,0);\n        }\n        pinMode(ulPin,1);\n        firmata::FirmataClass::setPinMode((FirmataClass *)PTR_Firmata_08000a44,pin,'\\x01');\n        return;\n      }\n      break;\n    case 2:\n      if (uVar8 < 0xe) {\n        if (ulPin < 0x3c) {\n          PVar2 = PTR_digitalPin_08000878[ulPin];\n        }\n        else {\n          PVar2 = NC;\n        }\n        uVar6 = pinNametoDigitalPin(PVar2);\n        if (uVar6 == 0) {\n          bVar3 = false;\n        }\n        else {\n          if (ulPin < 0x3c) {\n            PVar2 = PTR_digitalPin_08000878[ulPin];\n          }\n          else {\n            PVar2 = NC;\n          }\n          uVar6 = pinNametoDigitalPin(PVar2);\n          if (uVar6 == 1) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n      else {\n        bVar3 = false;\n      }\n      if (bVar3) {\n        if (ulPin < 0x3c) {\n          if (PTR_digitalPin_08000878[ulPin] == NC) {\n            bVar3 = false;\n          }\n          else {\n            uVar6 = pinNametoDigitalPin(PTR_digitalPin_08000878[ulPin]);\n            if (uVar6 == 0) {\n              bVar3 = false;\n            }\n            else {\n              uVar6 = pinNametoDigitalPin(PTR_digitalPin_08000878[ulPin]);\n              if (uVar6 == 1) {\n                bVar3 = false;\n              }\n            }\n          }\n        }\n        else {\n          bVar3 = false;\n        }\n        if (bVar3) {\n          pinMode(ulPin,0);\n        }\n        firmata::FirmataClass::setPinMode((FirmataClass *)PTR_Firmata_08000874,pin,'\\x02');\n        return;\n      }\n      break;\n    case 3:\n      if (ulPin < 0x3c) {\n        if (PTR_digitalPin_08000a48[ulPin] == NC) {\n          _Var5 = false;\n        }\n        else {\n          uVar6 = pinNametoDigitalPin(PTR_digitalPin_08000a48[ulPin]);\n          if (uVar6 == 0) {\n            _Var5 = false;\n          }\n          else {\n            uVar6 = pinNametoDigitalPin(PTR_digitalPin_08000a48[ulPin]);\n            if (uVar6 == 1) {\n              _Var5 = false;\n            }\n            else {\n              _Var5 = pin_in_pinmap(PTR_digitalPin_08000a48[ulPin],\n                                    (PinMap_conflict *)PTR_PinMap_PWM_08000a4c);\n            }\n          }\n        }\n      }\n      else {\n        _Var5 = false;\n      }\n      if (_Var5 != false) {\n        pinMode(ulPin,1);\n        analogWrite(ulPin,0);\n        firmata::FirmataClass::setPinMode((FirmataClass *)PTR_Firmata_08000a44,pin,'\\x03');\n        return;\n      }\n      break;\n    case 4:\n      if (ulPin < 0x3c) {\n        if (PTR_digitalPin_08000a48[ulPin] == NC) {\n          bVar3 = false;\n        }\n        else {\n          uVar6 = pinNametoDigitalPin(PTR_digitalPin_08000a48[ulPin]);\n          if (uVar6 == 0) {\n            bVar3 = false;\n          }\n          else {\n            uVar6 = pinNametoDigitalPin(PTR_digitalPin_08000a48[ulPin]);\n            if (uVar6 == 1) {\n              bVar3 = false;\n            }\n            else {\n              bVar3 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar3 = false;\n      }\n      if (bVar3) {\n        firmata::FirmataClass::setPinMode((FirmataClass *)PTR_Firmata_08000a44,pin,'\\x04');\n        if (((byte)PTR_servoPinMap_08000a50[ulPin] != 0xff) &&\n           (bVar4 = Servo::attached((Servo *)(PTR_servos_08000a54 +\n                                             (uint)(byte)PTR_servoPinMap_08000a50[ulPin] * 3)),\n           bVar4)) {\n          bVar3 = false;\n        }\n        if (bVar3) {\n          attachServo(pin,-1,-1);\n          return;\n        }\n      }\n      break;\n    default:\n      firmata::FirmataClass::sendString\n                ((FirmataClass *)PTR_Firmata_08000a44,PTR_s_Unknown_pin_mode_08000a60);\n      break;\n    case 6:\n      if (ulPin < 0x3c) {\n        if (PTR_digitalPin_08000a48[ulPin] == NC) {\n          _Var5 = false;\n        }\n        else {\n          uVar6 = pinNametoDigitalPin(PTR_digitalPin_08000a48[ulPin]);\n          if (uVar6 == 0) {\n            _Var5 = false;\n          }\n          else {\n            uVar6 = pinNametoDigitalPin(PTR_digitalPin_08000a48[ulPin]);\n            if (uVar6 == 1) {\n              _Var5 = false;\n            }\n            else {\n              _Var5 = pin_in_pinmap(PTR_digitalPin_08000a48[ulPin],\n                                    (PinMap_conflict *)PTR_PinMap_I2C_SDA_08000a58);\n              if (!_Var5) {\n                _Var5 = pin_in_pinmap(PTR_digitalPin_08000a48[ulPin],\n                                      (PinMap_conflict *)PTR_PinMap_I2C_SCL_08000a5c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        _Var5 = false;\n      }\n      if (_Var5 != false) {\n        firmata::FirmataClass::setPinMode((FirmataClass *)PTR_Firmata_08000a44,pin,'\\x06');\n        return;\n      }\n      break;\n    case 10:\n      break;\n    case 0xb:\n      if (ulPin < 0x3c) {\n        if (PTR_digitalPin_08000878[ulPin] == NC) {\n          bVar3 = false;\n        }\n        else {\n          uVar6 = pinNametoDigitalPin(PTR_digitalPin_08000878[ulPin]);\n          if (uVar6 == 0) {\n            bVar3 = false;\n          }\n          else {\n            uVar6 = pinNametoDigitalPin(PTR_digitalPin_08000878[ulPin]);\n            if (uVar6 == 1) {\n              bVar3 = false;\n            }\n            else {\n              bVar3 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar3 = false;\n      }\n      if (bVar3) {\n        pinMode(ulPin,2);\n        this = PTR_Firmata_08000a44;\n        firmata::FirmataClass::setPinMode((FirmataClass *)PTR_Firmata_08000a44,pin,'\\v');\n        firmata::FirmataClass::setPinState((FirmataClass *)this,pin,1);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "attached",
                "pin_in_pinmap",
                "disableI2CPins",
                "digitalWrite",
                "pinNametoDigitalPin",
                "analogWrite",
                "pinMode",
                "sendString",
                "reportAnalogCallback",
                "setPinState",
                "attachServo",
                "detachServo",
                "getPinMode",
                "setPinMode"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080005f8",
            "calling": [
                "enableI2CPins",
                "sysexCallback",
                "systemResetCallback"
            ],
            "imported": false,
            "current_name": "FUNC_080005f8"
        },
        "FUN_08002fa0": {
            "renaming": {
                "FUN_08002fa0": "get_pin_config_08002fa0",
                "this": "firmata_instance",
                "pin": "pin_number",
                "pinConfig": "pin_configuration"
            },
            "code": "byte __thiscall get_pin_config_08002fa0(FirmataClass *this, byte pin) {\n  return this->pinConfig[pin];\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fa0",
            "calling": [
                "loop",
                "digitalWriteCallback",
                "sysexCallback",
                "analogWriteCallback",
                "setPinValueCallback",
                "setPinModeCallback"
            ],
            "imported": false,
            "current_name": "get_pin_config_08002fa0"
        },
        "FUN_0800a424": {
            "renaming": {
                "FUN_0800a424": "do_nothing_0800a424"
            },
            "code": "\nvoid do_nothing_0800a424(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a424",
            "calling": [
                "__do_global_dtors_aux",
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "do_nothing_0800a424"
        },
        "FUN_08003a1c": {
            "renaming": {
                "FUN_08003a1c": "get_adc_state_08003a1c",
                "*hadc": "*adc_handler",
                "hadc": "adc_handler",
                "->State": "->State"
            },
            "code": "uint32_t get_adc_state_08003a1c(ADC_HandleTypeDef *adc_handler)\n{\n  return adc_handler->State;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a1c",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "get_adc_state_08003a1c"
        },
        "FUN_08007744": {
            "renaming": {
                "FUN_08007744": "get_timer_count_08007744",
                "obj": "timer_obj",
                "(obj->handle).Instance": "timer_handle_instance",
                "((obj->handle).Instance)->CNT": "timer_count"
            },
            "code": "uint32_t get_timer_count_08007744(stimer_t_conflict *timer_obj)\n{\n  TIM_TypeDef *timer_handle_instance = (timer_obj->handle).Instance;\n  uint32_t timer_count = timer_handle_instance->CNT;\n  return timer_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007744",
            "calling": [
                "ServoIrqHandle"
            ],
            "imported": false,
            "current_name": "get_timer_count_08007744"
        },
        "FUN_08006538": {
            "renaming": {
                "FUN_08006538": "set_uart_config_08006538",
                "*huart": "*uart_handler",
                "huart->Instance": "uart_handler->Instance",
                "huart->Init": "uart_handler->Init",
                "(huart->Init).BaudRate": "baud_rate",
                "DAT_080066e0": "PTR_080066e0",
                "DAT_080066e4": "DAT_080066e4",
                "uVar1": "brr",
                "uVar2": "uVar2",
                "uVar3": "pclk_freq",
                "uVar4": "uVar4",
                "uVar5": "uVar5",
                "uVar6": "uVar6",
                "uVar7": "uVar7",
                "uVar8": "baud_rate",
                "uVar9": "uVar9",
                "uVar10": "uVar10",
                "uVar11": "uVar11",
                "pUVar12": "uart_instance",
                "pUVar12->BRR": "uart_instance->BRR",
                "pUVar12->CR1": "uart_instance->CR1",
                "pUVar12->CR2": "uart_instance->CR2",
                "pUVar12->CR3": "uart_instance->CR3"
            },
            "code": "void set_uart_config_08006538(UART_HandleTypeDef *uart_handler)\n{\n  uint32_t baud_rate = (uart_handler->Init).BaudRate;\n  USART_TypeDef *uart_instance = uart_handler->Instance;\n  uint32_t pclk_freq = (uart_instance == DAT_080066e0) ? HAL_RCC_GetPCLK2Freq() : HAL_RCC_GetPCLK1Freq();\n  uint32_t stop_bits = (uart_instance->CR2 & 0xffffcfff) | (uart_handler->Init).StopBits;\n  uint32_t word_length_parity_mode = (uart_handler->Init).WordLength | (uart_handler->Init).Parity | (uart_handler->Init).Mode | (uart_instance->CR1 & 0xffffe9f3);\n  uint32_t hw_flow_ctl = (uart_instance->CR3 & 0xfffffcff) | (uart_handler->Init).HwFlowCtl;\n  uint32_t brr = ((uint32_t)(((uint64_t)DAT_080066e4 * ((pclk_freq * 0x19) / (baud_rate << 2)) >> 0x25) * 0x10 + 0x32) >> 0x4) + ((uint32_t)(((uint64_t)DAT_080066e4 * ((pclk_freq * 0x19) / (baud_rate << 2)) >> 0x25) & 0xf0));\n  uart_instance->CR2 = stop_bits;\n  uart_instance->CR1 = word_length_parity_mode;\n  uart_instance->CR3 = hw_flow_ctl;\n  uart_instance->BRR = brr;\n}\n",
            "called": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_RCC_GetPCLK2Freq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006538",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "set_uart_config_08006538"
        },
        "FUN_08002fa8": {
            "renaming": {
                "FUN_08002fa8": "update_pin_config_08002fa8",
                "pin": "pin_number",
                "config": "pin_config_value",
                "this": "firmata_instance",
                "pinConfig": "pin_config_array"
            },
            "code": "void __thiscall update_pin_config_08002fa8(FirmataClass *this, byte pin, byte config) {\n  if (this->pinConfig[pin] != '\\x7f') {\n    this->pinConfig[pin] = config;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fa8",
            "calling": [
                "setPinModeCallback"
            ],
            "imported": false,
            "current_name": "update_pin_config_08002fa8"
        },
        "FUN_0800325a": {
            "renaming": {
                "FUN_0800325a": "send_command_0800325a",
                "this": "self",
                "command": "command",
                "bytec": "num_bytes",
                "bytev": "byte_array",
                "uVar1": "index"
            },
            "code": "void __thiscall send_command_0800325a(FirmataMarshaller *self, uint8_t command, size_t num_bytes, uint8_t *byte_array) {\n  uint index = 0;\n  if (self->FirmataStream != nullptr) {\n    (**(self->FirmataStream->super_Print)._vptr_Print)(self, 0xf0);\n    (**(self->FirmataStream->super_Print)._vptr_Print)(self->FirmataStream, static_cast<uint>(command));\n    for (index = 0; index < num_bytes; index++) {\n      encodeByteStream(self, 1, byte_array + index, 0);\n    }\n    (**(self->FirmataStream->super_Print)._vptr_Print)(self->FirmataStream, 0xf7);\n  }\n  return;\n}",
            "called": [
                "encodeByteStream"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800325a",
            "calling": [
                "sendString",
                "sendSysex"
            ],
            "imported": false,
            "current_name": "send_command_0800325a"
        },
        "FUN_080091d8": {
            "renaming": {
                "FUN_080091d8": "allocate_memory_080091d8",
                "param_1": "error_code",
                "param_2": "size",
                "param_3": "arg3",
                "param_4": "arg4",
                "puVar1": "pointer",
                "extraout_r1": "extra_out_r1",
                "ppiVar2": "ppi_var_2",
                "ppiVar3": "ppi_var_3",
                "piVar4": "pi_var_4",
                "ppiVar5": "ppi_var_5",
                "ppiVar6": "ppi_var_6",
                "ppiVar7": "ppi_var_7",
                "PTR___malloc_free_list_0800926c": "PTR_malloc_free_list"
            },
            "code": "void allocate_memory_080091d8(int* error_code, int size, int arg3, int arg4) {\n  int** free_list = (int**)(size - 4);\n  if (*free_list < 0) {\n    free_list = (int**)((int)free_list + **free_list);\n  }\n  __malloc_lock();\n  void* ptr = PTR___malloc_free_list_0800926c;\n  int** current_list = *(int***)(PTR___malloc_free_list_0800926c);\n  if (current_list == NULL) {\n    free_list[1] = NULL;\n    *(int***)ptr = free_list;\n    int** extraout_r1 = NULL;\n    int** new_list = (int**)ptr;\n  }\n  else if (free_list < current_list) {\n    int** next_list = (int**)*free_list;\n    int** next_block = (int**)((int)free_list + (int)next_list);\n    if (current_list == next_block) {\n      int* block = *current_list;\n      current_list = (int**)current_list[1];\n      next_block = (int**)((int)block + (int)next_list);\n      *free_list = (int*)next_block;\n    }\n    free_list[1] = (int*)current_list;\n    *(int***)ptr = free_list;\n  }\n  else {\n    while (current_list != NULL) {\n      int** next_list = current_list[1];\n      if (next_list == NULL || next_list > free_list) {\n        break;\n      }\n      current_list = next_list;\n    }\n    int** next_block = (int**)((int)current_list + (int)*current_list);\n    if (next_list == next_block) {\n      int* block = *next_list;\n      next_list = (int**)next_list[1];\n      next_block = (int**)((int)block + (int)*current_list);\n      *current_list = (int*)next_block;\n      current_list[1] = (int*)next_list;\n    }\n    else if (free_list < next_block) {\n      *error_code = 0xc;\n    }\n    else {\n      next_block = (int**)((int)free_list + (int)*free_list);\n      if (next_list == next_block) {\n        int* block = *next_list;\n        next_list = (int**)next_list[1];\n        next_block = (int**)((int)block + (int)*free_list);\n        *free_list = (int*)next_block;\n      }\n      free_list[1] = (int*)next_list;\n      current_list[1] = (int*)free_list;\n    }\n  }\n  __malloc_unlock(error_code, current_list, next_block, arg4);\n  return;\n}",
            "called": [
                "__malloc_lock",
                "__malloc_unlock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091d8",
            "calling": [
                "free",
                "__swsetup_r",
                "_realloc_r",
                "__sflush_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_080091d8"
        },
        "FUN_0800688e": {
            "renaming": {
                "FUN_0800688e": "check_uart_status_0800688e",
                "*huart": "*uart_handle",
                "huart": "uart_handle",
                "*pData": "*data",
                "pData": "data",
                "Size": "size",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "HAL_BUSY": "HAL_BUSY",
                "HAL_ERROR": "HAL_ERROR",
                "HAL_LOCKED": "HAL_LOCKED",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "pTxBuffPtr": "p_tx_buff_ptr",
                "TxXferSize": "tx_xfer_size",
                "TxXferCount": "tx_xfer_count",
                "ErrorCode": "error_code",
                "gState": "g_state",
                "Instance": "instance",
                "CR1": "cr1"
            },
            "code": "HAL_StatusTypeDef_conflict check_uart_status_0800688e(UART_HandleTypeDef *uart_handle, uint8_t *data, uint16_t size)\n{\n    if (uart_handle->gState != HAL_UART_STATE_READY) {\n        return HAL_BUSY;\n    }\n    if (data == NULL) {\n        return HAL_ERROR;\n    }\n    if (size == 0) {\n        return HAL_ERROR;\n    }\n    if (uart_handle->Lock != HAL_LOCKED) {\n        uart_handle->pTxBuffPtr = data;\n        uart_handle->TxXferSize = size;\n        uart_handle->TxXferCount = size;\n        uart_handle->ErrorCode = 0;\n        uart_handle->gState = HAL_UART_STATE_BUSY_TX;\n        uart_handle->Lock = HAL_UNLOCKED;\n        uart_handle->Instance->CR1 = uart_handle->Instance->CR1 | 0x80;\n        return HAL_OK;\n    }\n    return HAL_BUSY;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800688e",
            "calling": [
                "uart_attach_tx_callback",
                "HAL_UART_TxCpltCallback"
            ],
            "imported": false,
            "current_name": "check_uart_status_0800688e"
        },
        "FUN_080090b4": {
            "renaming": {
                "FUN_080090b4": "initialize_static_variables_080090b4"
            },
            "code": "void initialize_static_variables_080090b4(void)\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090b4",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_variables_080090b4"
        },
        "FUN_0800870c": {
            "renaming": {
                "FUN_0800870c": "process_uart_data_0800870c",
                "*huart": "*uart_handle",
                "bVar1": "uart_index_value",
                "uVar2": "callback_index",
                "uart_index": "get_uart_index"
            },
            "code": "void process_uart_data_0800870c(UART_HandleTypeDef *uart_handle) {\n  byte uart_index_value;\n  uint8_t callback_index;\n  \n  uart_index_value = get_uart_index(uart_handle);\n  callback_index = (uint8_t)uart_index_value;\n  if (callback_index < 5) {\n    (**(code **)(PTR_rx_callback_08008728 + callback_index * 4))\n              (*(undefined4 *)(PTR_rx_callback_obj_0800872c + callback_index * 4));\n  }\n  return;\n}",
            "called": [
                "uart_index"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800870c",
            "calling": [
                "UART_Receive_IT"
            ],
            "imported": false,
            "current_name": "process_uart_data_0800870c"
        },
        "FUN_08008840": {
            "renaming": {
                "FUN_08008840": "return_error_08008840",
                "file_UNUSED": "file_unused"
            },
            "code": "int return_error_08008840(int file_unused)\n{\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008840",
            "calling": [
                "_close_r"
            ],
            "imported": false,
            "current_name": "return_error_08008840"
        },
        "FUN_08008600": {
            "renaming": {
                "FUN_08008600": "receive_serial_data_08008600",
                "obj": "serial_object",
                "c": "received_char",
                "uVar1": "is_rx_active"
            },
            "code": "int receive_serial_data_08008600(serial_t *serial_object, uchar *received_char)\n{\n    uint8_t is_rx_active;\n    \n    if (serial_object == (serial_t *)0x0) {\n        return -1;\n    }\n    \n    is_rx_active = serial_rx_active(serial_object);\n    \n    if (is_rx_active == \"\\0\") {\n        *received_char = serial_object->recv;\n        HAL_UART_Receive_IT(*(UART_HandleTypeDef **) (PTR_uart_handlers_08008638 + (uint)serial_object->index * 4),\n                            &serial_object->recv, 1);\n        return 0;\n    }\n    \n    return -1;\n}",
            "called": [
                "HAL_UART_Receive_IT",
                "serial_rx_active"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008600",
            "calling": [
                "_rx_complete_irq"
            ],
            "imported": false,
            "current_name": "receive_serial_data_08008600"
        },
        "FUN_08003154": {
            "renaming": {
                "FUN_08003154": "set_firmata_stream_08003154",
                "s": "firmata_stream"
            },
            "code": "void __thiscall set_firmata_stream_08003154(FirmataMarshaller *this, Stream *firmata_stream) {\n  this->FirmataStream = firmata_stream;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003154",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "set_firmata_stream_08003154"
        },
        "FUN_08006420": {
            "renaming": {
                "FUN_08006420": "update_channel_state_08006420",
                "TIMx": "timer",
                "Channel": "channel",
                "ChannelNState": "channel_n_state",
                "CCER": "ccer_mask"
            },
            "code": "void update_channel_state_08006420(TIM_TypeDef_conflict *timer, uint32_t channel, uint32_t channel_n_state) {\n  uint32_t ccer_mask = ~(4 << (channel & 0xff));\n  timer->CCER = (timer->CCER & ccer_mask) | (channel_n_state << (channel & 0xff));\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006420",
            "calling": [
                "HAL_TIMEx_PWMN_Start",
                "HAL_TIMEx_PWMN_Stop"
            ],
            "imported": false,
            "current_name": "update_channel_state_08006420"
        },
        "FUN_08007750": {
            "renaming": {
                "FUN_08007750": "set_timer_channel_08007750",
                "obj": "timer_obj",
                "channel": "channel_num",
                "value": "channel_value"
            },
            "code": "void set_timer_channel_08007750(stimer_t_conflict *timer_obj, uint32_t channel_num, uint32_t channel_value)\n{\n    uint32_t *channel_register = &((timer_obj->handle).Instance)->CCR1;\n    channel_register[channel_num] = channel_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007750",
            "calling": [
                "ServoIrqHandle"
            ],
            "imported": false,
            "current_name": "set_timer_channel_08007750"
        },
        "FUN_08009938": {
            "renaming": {
                "FUN_08009938": "find_char_in_string_08009938",
                "__s": "input_str",
                "__c": "target_char",
                "pbVar1": "byte_str"
            },
            "code": "char* find_char_in_string_08009938(char* input_str, int target_char) {\n  byte* byte_str = (byte*)input_str;\n  while (*byte_str != 0) {\n    if (*byte_str == target_char) {\n      return (char*)byte_str;\n    }\n    byte_str++;\n  }\n  if ((target_char & 0xff) != 0) {\n    byte_str = NULL;\n  }\n  return (char*)byte_str;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009938",
            "calling": [
                "strrchr"
            ],
            "imported": false,
            "current_name": "find_char_in_string_08009938"
        },
        "FUN_08007f0e": {
            "renaming": {
                "FUN_08007f0e": "receive_data_from_i2c_device_08007f0e",
                "obj": "i2c_handle",
                "dev_address": "device_address",
                "data": "data_buffer",
                "size": "data_size",
                "HVar1": "i2c_state",
                "HVar2": "i2c_status",
                "uVar3": "start_time_ms",
                "uVar4": "i2c_error",
                "uVar5": "retry_count",
                "iVar6": "return_status",
                "hi2c": "i2c_hal_handle"
            },
            "code": "i2c_status_e_conflict receive_data_from_i2c_device_08007f0e(i2c_t_conflict *i2c_handle, uint8_t device_address, uint8_t *data_buffer, uint16_t data_size)\n{\n  HAL_I2C_StateTypeDef_conflict i2c_state;\n  HAL_StatusTypeDef_conflict i2c_status;\n  uint32_t start_time_ms;\n  uint32_t elapsed_time_ms;\n  uint retry_count;\n  i2c_status_e_conflict return_status = I2C_ERROR;\n  I2C_HandleTypeDef_conflict *i2c_hal_handle;\n  \n  start_time_ms = HAL_GetTick();\n  retry_count = 0;\n  do {\n    i2c_hal_handle = &i2c_handle->handle;\n    i2c_status = HAL_I2C_Master_Receive_IT(i2c_hal_handle, (uint16_t)device_address, data_buffer, data_size);\n    if (i2c_status == HAL_OK) {\n      return_status = I2C_OK;\n      while ((i2c_state = HAL_I2C_GetState(i2c_hal_handle), i2c_state != HAL_I2C_STATE_READY && (return_status == I2C_OK))) {\n        elapsed_time_ms = HAL_GetTick() - start_time_ms;\n        if (elapsed_time_ms < 0x65) {\n          uint32_t i2c_error = HAL_I2C_GetError(i2c_hal_handle);\n          if (i2c_error != 0) {\n            return_status = I2C_ERROR;\n          }\n        }\n        else {\n          return_status = I2C_TIMEOUT;\n        }\n      }\n    }\n    uint32_t i2c_error = HAL_I2C_GetError(i2c_hal_handle);\n    retry_count++;\n  } while ((i2c_error == 4) && (elapsed_time_ms < 100));\n  return return_status;\n}",
            "called": [
                "HAL_GetTick",
                "HAL_I2C_Master_Receive_IT",
                "HAL_I2C_GetState",
                "HAL_I2C_GetError"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f0e",
            "calling": [
                "requestFrom"
            ],
            "imported": false,
            "current_name": "receive_data_from_i2c_device_08007f0e"
        },
        "FUN_08004004": {
            "renaming": {
                "FUN_08004004": "set_interrupt_handler_08004004",
                "IRQn": "interrupt",
                "uVar1": "interrupt_number",
                "DAT_08004020": "interrupt_register_address"
            },
            "code": "void set_interrupt_handler_08004004(IRQn_Type_conflict interrupt)\n{\n  uint interrupt_number = (uint)interrupt;\n  if (interrupt_number >= 0)\n  {\n    int* DAT_08004020 = (int*)(DAT_08004020 + ((interrupt_number >> 5) + 0x60) * 4);\n    *DAT_08004020 = 1 << (interrupt_number & 0x1f);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004004",
            "calling": [
                "USART2_IRQHandler",
                "USART1_IRQHandler",
                "USART3_IRQHandler"
            ],
            "imported": false,
            "current_name": "set_interrupt_handler_08004004"
        },
        "FUN_08003158": {
            "renaming": {
                "FUN_08003158": "send_pin_value_08003158",
                "this": "marshaller",
                "pin": "pin",
                "value": "value",
                "local_a": "encoded_value",
                "FirmataStream": "stream",
                "super_Print": "super_print",
                "_vptr_Print": "vptr_print",
                "encodeByteStream": "encode_byte_stream",
                "sendExtendedAnalog": "send_extended_analog"
            },
            "code": "void __thiscall send_pin_value_08003158(FirmataMarshaller *marshaller, uint8_t pin, uint16_t value)\n{\n  uint16_t encoded_value;\n  if (marshaller->stream != (Stream *)0x0) {\n    encoded_value = value;\n    if ((pin < 0x10) && (value < 0x4000)) {\n      (**(marshaller->stream->super_Print)._vptr_Print)(marshaller, pin | 0xe0);\n      encode_byte_stream(marshaller, 2, (uint8_t *)&encoded_value, 2);\n    }\n    else {\n      send_extended_analog(marshaller, pin, 2, (uint8_t *)&encoded_value);\n    }\n  }\n  return;\n}",
            "called": [
                "encodeByteStream",
                "sendExtendedAnalog"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003158",
            "calling": [
                "sendAnalog"
            ],
            "imported": false,
            "current_name": "send_pin_value_08003158"
        },
        "FUN_080090c2": {
            "renaming": {
                "FUN_080090c2": "register_atexit_handler_080090c2",
                "param_1": "func",
                "param_2": "arg"
            },
            "code": "void register_atexit_handler_080090c2(void (*func)(void), void *arg)\n{\n  __cxa_atexit(arg, func);\n  return;\n}",
            "called": [
                "__cxa_atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090c2",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "register_atexit_handler_080090c2"
        },
        "FUN_08000ef8": {
            "renaming": {
                "FUN_08000ef8": "FUNC_08000ef8"
            },
            "code": "\nvoid FUNC_08000ef8(void)\n\n{\n  byte bVar1;\n  bool bVar2;\n  uint32_t uVar3;\n  int iVar4;\n  byte bVar5;\n  \n  if (*PTR_reportPINs_08001188 != '\\0') {\n    bVar1 = *PTR_portConfigInputs_0800118c;\n    if (*PTR_digitalPin_08001190 == NC) {\n      bVar5 = 0;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(*PTR_digitalPin_08001190);\n      if (uVar3 == 0) {\n        bVar5 = 0;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(*PTR_digitalPin_08001190);\n        if (uVar3 == 1) {\n          bVar5 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar5 = 0;\n        }\n        else {\n          iVar4 = digitalRead(0);\n          if (iVar4 == 0) {\n            bVar5 = 0;\n          }\n          else {\n            bVar5 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_digitalPin_08001190[1] == NC) {\n      bVar2 = false;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001190[1]);\n      if (uVar3 == 0) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001190[1]);\n        if (uVar3 == 1) {\n          bVar2 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar2 = false;\n        }\n        else {\n          iVar4 = digitalRead(1);\n          if (iVar4 == 0) {\n            bVar2 = false;\n          }\n          else {\n            bVar2 = true;\n          }\n        }\n      }\n    }\n    if (bVar2) {\n      bVar5 = bVar5 | 2;\n    }\n    if (PTR_digitalPin_08001190[2] == NC) {\n      bVar2 = false;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001190[2]);\n      if (uVar3 == 0) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001190[2]);\n        if (uVar3 == 1) {\n          bVar2 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar2 = false;\n        }\n        else {\n          iVar4 = digitalRead(2);\n          if (iVar4 == 0) {\n            bVar2 = false;\n          }\n          else {\n            bVar2 = true;\n          }\n        }\n      }\n    }\n    if (bVar2) {\n      bVar5 = bVar5 | 4;\n    }\n    if (PTR_digitalPin_08001190[3] == NC) {\n      bVar2 = false;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001190[3]);\n      if (uVar3 == 0) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001190[3]);\n        if (uVar3 == 1) {\n          bVar2 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar2 = false;\n        }\n        else {\n          iVar4 = digitalRead(3);\n          if (iVar4 == 0) {\n            bVar2 = false;\n          }\n          else {\n            bVar2 = true;\n          }\n        }\n      }\n    }\n    if (bVar2) {\n      bVar5 = bVar5 | 8;\n    }\n    if (PTR_digitalPin_08001190[4] == NC) {\n      bVar2 = false;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001190[4]);\n      if (uVar3 == 0) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001190[4]);\n        if (uVar3 == 1) {\n          bVar2 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar2 = false;\n        }\n        else {\n          iVar4 = digitalRead(4);\n          if (iVar4 == 0) {\n            bVar2 = false;\n          }\n          else {\n            bVar2 = true;\n          }\n        }\n      }\n    }\n    if (bVar2) {\n      bVar5 = bVar5 | 0x10;\n    }\n    if (PTR_digitalPin_08001190[5] == NC) {\n      bVar2 = false;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001190[5]);\n      if (uVar3 == 0) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001190[5]);\n        if (uVar3 == 1) {\n          bVar2 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar2 = false;\n        }\n        else {\n          iVar4 = digitalRead(5);\n          if (iVar4 == 0) {\n            bVar2 = false;\n          }\n          else {\n            bVar2 = true;\n          }\n        }\n      }\n    }\n    if (bVar2) {\n      bVar5 = bVar5 | 0x20;\n    }\n    if (PTR_digitalPin_08001190[6] == NC) {\n      bVar2 = false;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001190[6]);\n      if (uVar3 == 0) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001190[6]);\n        if (uVar3 == 1) {\n          bVar2 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar2 = false;\n        }\n        else {\n          iVar4 = digitalRead(6);\n          if (iVar4 == 0) {\n            bVar2 = false;\n          }\n          else {\n            bVar2 = true;\n          }\n        }\n      }\n    }\n    if (bVar2) {\n      bVar5 = bVar5 | 0x40;\n    }\n    if (PTR_digitalPin_08001190[7] == NC) {\n      bVar2 = false;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001190[7]);\n      if (uVar3 == 0) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001190[7]);\n        if (uVar3 == 1) {\n          bVar2 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar2 = false;\n        }\n        else {\n          iVar4 = digitalRead(7);\n          if (iVar4 == 0) {\n            bVar2 = false;\n          }\n          else {\n            bVar2 = true;\n          }\n        }\n      }\n    }\n    if (bVar2) {\n      bVar5 = bVar5 | 0x80;\n    }\n    outputPort('\\0',bVar5,'\\0');\n  }\n  if (PTR_reportPINs_08001188[1] != '\\0') {\n    bVar1 = PTR_portConfigInputs_0800118c[1];\n    if (PTR_digitalPin_08001190[8] == NC) {\n      bVar5 = 0;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001190[8]);\n      if (uVar3 == 0) {\n        bVar5 = 0;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001424[8]);\n        if (uVar3 == 1) {\n          bVar5 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar5 = 0;\n        }\n        else {\n          iVar4 = digitalRead(8);\n          if (iVar4 == 0) {\n            bVar5 = 0;\n          }\n          else {\n            bVar5 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_digitalPin_08001424[9] == NC) {\n      bVar2 = false;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001424[9]);\n      if (uVar3 == 0) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001424[9]);\n        if (uVar3 == 1) {\n          bVar2 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar2 = false;\n        }\n        else {\n          iVar4 = digitalRead(9);\n          if (iVar4 == 0) {\n            bVar2 = false;\n          }\n          else {\n            bVar2 = true;\n          }\n        }\n      }\n    }\n    if (bVar2) {\n      bVar5 = bVar5 | 2;\n    }\n    if (PTR_digitalPin_08001424[10] == NC) {\n      bVar2 = false;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001424[10]);\n      if (uVar3 == 0) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001424[10]);\n        if (uVar3 == 1) {\n          bVar2 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar2 = false;\n        }\n        else {\n          iVar4 = digitalRead(10);\n          if (iVar4 == 0) {\n            bVar2 = false;\n          }\n          else {\n            bVar2 = true;\n          }\n        }\n      }\n    }\n    if (bVar2) {\n      bVar5 = bVar5 | 4;\n    }\n    if (PTR_digitalPin_08001424[0xb] == NC) {\n      bVar2 = false;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001424[0xb]);\n      if (uVar3 == 0) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001424[0xb]);\n        if (uVar3 == 1) {\n          bVar2 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar2 = false;\n        }\n        else {\n          iVar4 = digitalRead(0xb);\n          if (iVar4 == 0) {\n            bVar2 = false;\n          }\n          else {\n            bVar2 = true;\n          }\n        }\n      }\n    }\n    if (bVar2) {\n      bVar5 = bVar5 | 8;\n    }\n    if (PTR_digitalPin_08001424[0xc] == NC) {\n      bVar2 = false;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001424[0xc]);\n      if (uVar3 == 0) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001424[0xc]);\n        if (uVar3 == 1) {\n          bVar2 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar2 = false;\n        }\n        else {\n          iVar4 = digitalRead(0xc);\n          if (iVar4 == 0) {\n            bVar2 = false;\n          }\n          else {\n            bVar2 = true;\n          }\n        }\n      }\n    }\n    if (bVar2) {\n      bVar5 = bVar5 | 0x10;\n    }\n    if (PTR_digitalPin_08001424[0xd] == NC) {\n      bVar2 = false;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001424[0xd]);\n      if (uVar3 == 0) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001424[0xd]);\n        if (uVar3 == 1) {\n          bVar2 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar2 = false;\n        }\n        else {\n          iVar4 = digitalRead(0xd);\n          if (iVar4 == 0) {\n            bVar2 = false;\n          }\n          else {\n            bVar2 = true;\n          }\n        }\n      }\n    }\n    if (bVar2) {\n      bVar5 = bVar5 | 0x20;\n    }\n    if (PTR_digitalPin_08001424[0xe] == NC) {\n      bVar2 = false;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001424[0xe]);\n      if (uVar3 == 0) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001424[0xe]);\n        if (uVar3 == 1) {\n          bVar2 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar2 = false;\n        }\n        else {\n          iVar4 = digitalRead(0xe);\n          if (iVar4 == 0) {\n            bVar2 = false;\n          }\n          else {\n            bVar2 = true;\n          }\n        }\n      }\n    }\n    if (bVar2) {\n      bVar5 = bVar5 | 0x40;\n    }\n    if (PTR_digitalPin_08001424[0xf] == NC) {\n      bVar2 = false;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001424[0xf]);\n      if (uVar3 == 0) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001424[0xf]);\n        if (uVar3 == 1) {\n          bVar2 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar2 = false;\n        }\n        else {\n          iVar4 = digitalRead(0xf);\n          if (iVar4 == 0) {\n            bVar2 = false;\n          }\n          else {\n            bVar2 = true;\n          }\n        }\n      }\n    }\n    if (bVar2) {\n      bVar5 = bVar5 | 0x80;\n    }\n    outputPort('\\x01',bVar5,'\\0');\n  }\n  if (PTR_reportPINs_08001428[2] != '\\0') {\n    bVar1 = PTR_portConfigInputs_0800142c[2];\n    if (PTR_digitalPin_08001424[0x10] == NC) {\n      bVar5 = 0;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001424[0x10]);\n      if (uVar3 == 0) {\n        bVar5 = 0;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001424[0x10]);\n        if (uVar3 == 1) {\n          bVar5 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar5 = 0;\n        }\n        else {\n          iVar4 = digitalRead(0x10);\n          if (iVar4 == 0) {\n            bVar5 = 0;\n          }\n          else {\n            bVar5 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_digitalPin_080016c4[0x11] == NC) {\n      bVar2 = false;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_080016c4[0x11]);\n      if (uVar3 == 0) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_080016c4[0x11]);\n        if (uVar3 == 1) {\n          bVar2 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar2 = false;\n        }\n        else {\n          iVar4 = digitalRead(0x11);\n          if (iVar4 == 0) {\n            bVar2 = false;\n          }\n          else {\n            bVar2 = true;\n          }\n        }\n      }\n    }\n    if (bVar2) {\n      bVar5 = bVar5 | 2;\n    }\n    if (PTR_digitalPin_080016c4[0x12] == NC) {\n      bVar2 = false;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_080016c4[0x12]);\n      if (uVar3 == 0) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_080016c4[0x12]);\n        if (uVar3 == 1) {\n          bVar2 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar2 = false;\n        }\n        else {\n          iVar4 = digitalRead(0x12);\n          if (iVar4 == 0) {\n            bVar2 = false;\n          }\n          else {\n            bVar2 = true;\n          }\n        }\n      }\n    }\n    if (bVar2) {\n      bVar5 = bVar5 | 4;\n    }\n    if (PTR_digitalPin_080016c4[0x13] == NC) {\n      bVar2 = false;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_080016c4[0x13]);\n      if (uVar3 == 0) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_080016c4[0x13]);\n        if (uVar3 == 1) {\n          bVar2 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar2 = false;\n        }\n        else {\n          iVar4 = digitalRead(0x13);\n          if (iVar4 == 0) {\n            bVar2 = false;\n          }\n          else {\n            bVar2 = true;\n          }\n        }\n      }\n    }\n    if (bVar2) {\n      bVar5 = bVar5 | 8;\n    }\n    if (PTR_digitalPin_080016c4[0x14] == NC) {\n      bVar2 = false;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_080016c4[0x14]);\n      if (uVar3 == 0) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_080016c4[0x14]);\n        if (uVar3 == 1) {\n          bVar2 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar2 = false;\n        }\n        else {\n          iVar4 = digitalRead(0x14);\n          if (iVar4 == 0) {\n            bVar2 = false;\n          }\n          else {\n            bVar2 = true;\n          }\n        }\n      }\n    }\n    if (bVar2) {\n      bVar5 = bVar5 | 0x10;\n    }\n    if (PTR_digitalPin_080016c4[0x15] == NC) {\n      bVar2 = false;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_080016c4[0x15]);\n      if (uVar3 == 0) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_080016c4[0x15]);\n        if (uVar3 == 1) {\n          bVar2 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar2 = false;\n        }\n        else {\n          iVar4 = digitalRead(0x15);\n          if (iVar4 == 0) {\n            bVar2 = false;\n          }\n          else {\n            bVar2 = true;\n          }\n        }\n      }\n    }\n    if (bVar2) {\n      bVar5 = bVar5 | 0x20;\n    }\n    if (PTR_digitalPin_080016c4[0x16] == NC) {\n      bVar2 = false;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_080016c4[0x16]);\n      if (uVar3 == 0) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_080016c4[0x16]);\n        if (uVar3 == 1) {\n          bVar2 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar2 = false;\n        }\n        else {\n          iVar4 = digitalRead(0x16);\n          if (iVar4 == 0) {\n            bVar2 = false;\n          }\n          else {\n            bVar2 = true;\n          }\n        }\n      }\n    }\n    if (bVar2) {\n      bVar5 = bVar5 | 0x40;\n    }\n    if (PTR_digitalPin_080016c4[0x17] == NC) {\n      bVar2 = false;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_080016c4[0x17]);\n      if (uVar3 == 0) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_080016c4[0x17]);\n        if (uVar3 == 1) {\n          bVar2 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar2 = false;\n        }\n        else {\n          iVar4 = digitalRead(0x17);\n          if (iVar4 == 0) {\n            bVar2 = false;\n          }\n          else {\n            bVar2 = true;\n          }\n        }\n      }\n    }\n    if (bVar2) {\n      bVar5 = bVar5 | 0x80;\n    }\n    outputPort('\\x02',bVar5,'\\0');\n  }\n  if (PTR_reportPINs_080016c8[3] != '\\0') {\n    bVar1 = PTR_portConfigInputs_080016cc[3];\n    if (PTR_digitalPin_080016c4[0x18] == NC) {\n      bVar5 = 0;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_080016c4[0x18]);\n      if (uVar3 == 0) {\n        bVar5 = 0;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_080016c4[0x18]);\n        if (uVar3 == 1) {\n          bVar5 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar5 = 0;\n        }\n        else {\n          iVar4 = digitalRead(0x18);\n          if (iVar4 == 0) {\n            bVar5 = 0;\n          }\n          else {\n            bVar5 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_digitalPin_080016c4[0x19] == NC) {\n      bVar2 = false;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_080016c4[0x19]);\n      if (uVar3 == 0) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001960[0x19]);\n        if (uVar3 == 1) {\n          bVar2 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar2 = false;\n        }\n        else {\n          iVar4 = digitalRead(0x19);\n          if (iVar4 == 0) {\n            bVar2 = false;\n          }\n          else {\n            bVar2 = true;\n          }\n        }\n      }\n    }\n    if (bVar2) {\n      bVar5 = bVar5 | 2;\n    }\n    if (PTR_digitalPin_08001960[0x1a] == NC) {\n      bVar2 = false;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001960[0x1a]);\n      if (uVar3 == 0) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001960[0x1a]);\n        if (uVar3 == 1) {\n          bVar2 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar2 = false;\n        }\n        else {\n          iVar4 = digitalRead(0x1a);\n          if (iVar4 == 0) {\n            bVar2 = false;\n          }\n          else {\n            bVar2 = true;\n          }\n        }\n      }\n    }\n    if (bVar2) {\n      bVar5 = bVar5 | 4;\n    }\n    if (PTR_digitalPin_08001960[0x1b] == NC) {\n      bVar2 = false;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001960[0x1b]);\n      if (uVar3 == 0) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001960[0x1b]);\n        if (uVar3 == 1) {\n          bVar2 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar2 = false;\n        }\n        else {\n          iVar4 = digitalRead(0x1b);\n          if (iVar4 == 0) {\n            bVar2 = false;\n          }\n          else {\n            bVar2 = true;\n          }\n        }\n      }\n    }\n    if (bVar2) {\n      bVar5 = bVar5 | 8;\n    }\n    if (PTR_digitalPin_08001960[0x1c] == NC) {\n      bVar2 = false;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001960[0x1c]);\n      if (uVar3 == 0) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001960[0x1c]);\n        if (uVar3 == 1) {\n          bVar2 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar2 = false;\n        }\n        else {\n          iVar4 = digitalRead(0x1c);\n          if (iVar4 == 0) {\n            bVar2 = false;\n          }\n          else {\n            bVar2 = true;\n          }\n        }\n      }\n    }\n    if (bVar2) {\n      bVar5 = bVar5 | 0x10;\n    }\n    if (PTR_digitalPin_08001960[0x1d] == NC) {\n      bVar2 = false;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001960[0x1d]);\n      if (uVar3 == 0) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001960[0x1d]);\n        if (uVar3 == 1) {\n          bVar2 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar2 = false;\n        }\n        else {\n          iVar4 = digitalRead(0x1d);\n          if (iVar4 == 0) {\n            bVar2 = false;\n          }\n          else {\n            bVar2 = true;\n          }\n        }\n      }\n    }\n    if (bVar2) {\n      bVar5 = bVar5 | 0x20;\n    }\n    if (PTR_digitalPin_08001960[0x1e] == NC) {\n      bVar2 = false;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001960[0x1e]);\n      if (uVar3 == 0) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001960[0x1e]);\n        if (uVar3 == 1) {\n          bVar2 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar2 = false;\n        }\n        else {\n          iVar4 = digitalRead(0x1e);\n          if (iVar4 == 0) {\n            bVar2 = false;\n          }\n          else {\n            bVar2 = true;\n          }\n        }\n      }\n    }\n    if (bVar2) {\n      bVar5 = bVar5 | 0x40;\n    }\n    if (PTR_digitalPin_08001960[0x1f] == NC) {\n      bVar2 = false;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001960[0x1f]);\n      if (uVar3 == 0) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001960[0x1f]);\n        if (uVar3 == 1) {\n          bVar2 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar2 = false;\n        }\n        else {\n          iVar4 = digitalRead(0x1f);\n          if (iVar4 == 0) {\n            bVar2 = false;\n          }\n          else {\n            bVar2 = true;\n          }\n        }\n      }\n    }\n    if (bVar2) {\n      bVar5 = bVar5 | 0x80;\n    }\n    outputPort('\\x03',bVar5,'\\0');\n  }\n  if (PTR_reportPINs_08001964[4] != '\\0') {\n    bVar1 = PTR_portConfigInputs_08001968[4];\n    if (PTR_digitalPin_08001960[0x20] == NC) {\n      bVar5 = 0;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001960[0x20]);\n      if (uVar3 == 0) {\n        bVar5 = 0;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001960[0x20]);\n        if (uVar3 == 1) {\n          bVar5 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar5 = 0;\n        }\n        else {\n          iVar4 = digitalRead(0x20);\n          if (iVar4 == 0) {\n            bVar5 = 0;\n          }\n          else {\n            bVar5 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_digitalPin_08001960[0x21] == NC) {\n      bVar2 = false;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001960[0x21]);\n      if (uVar3 == 0) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001960[0x21]);\n        if (uVar3 == 1) {\n          bVar2 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar2 = false;\n        }\n        else {\n          iVar4 = digitalRead(0x21);\n          if (iVar4 == 0) {\n            bVar2 = false;\n          }\n          else {\n            bVar2 = true;\n          }\n        }\n      }\n    }\n    if (bVar2) {\n      bVar5 = bVar5 | 2;\n    }\n    if (PTR_digitalPin_08001b44[0x22] == NC) {\n      bVar2 = false;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001b44[0x22]);\n      if (uVar3 == 0) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001b44[0x22]);\n        if (uVar3 == 1) {\n          bVar2 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar2 = false;\n        }\n        else {\n          iVar4 = digitalRead(0x22);\n          if (iVar4 == 0) {\n            bVar2 = false;\n          }\n          else {\n            bVar2 = true;\n          }\n        }\n      }\n    }\n    if (bVar2) {\n      bVar5 = bVar5 | 4;\n    }\n    if (PTR_digitalPin_08001b44[0x23] == NC) {\n      bVar2 = false;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001b44[0x23]);\n      if (uVar3 == 0) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001b44[0x23]);\n        if (uVar3 == 1) {\n          bVar2 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar2 = false;\n        }\n        else {\n          iVar4 = digitalRead(0x23);\n          if (iVar4 == 0) {\n            bVar2 = false;\n          }\n          else {\n            bVar2 = true;\n          }\n        }\n      }\n    }\n    if (bVar2) {\n      bVar5 = bVar5 | 8;\n    }\n    if (PTR_digitalPin_08001b44[0x24] == NC) {\n      bVar2 = false;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001b44[0x24]);\n      if (uVar3 == 0) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001b44[0x24]);\n        if (uVar3 == 1) {\n          bVar2 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar2 = false;\n        }\n        else {\n          iVar4 = digitalRead(0x24);\n          if (iVar4 == 0) {\n            bVar2 = false;\n          }\n          else {\n            bVar2 = true;\n          }\n        }\n      }\n    }\n    if (bVar2) {\n      bVar5 = bVar5 | 0x10;\n    }\n    if (PTR_digitalPin_08001b44[0x25] == NC) {\n      bVar2 = false;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001b44[0x25]);\n      if (uVar3 == 0) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001b44[0x25]);\n        if (uVar3 == 1) {\n          bVar2 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar2 = false;\n        }\n        else {\n          iVar4 = digitalRead(0x25);\n          if (iVar4 == 0) {\n            bVar2 = false;\n          }\n          else {\n            bVar2 = true;\n          }\n        }\n      }\n    }\n    if (bVar2) {\n      bVar5 = bVar5 | 0x20;\n    }\n    if (PTR_digitalPin_08001b44[0x26] == NC) {\n      bVar2 = false;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001b44[0x26]);\n      if (uVar3 == 0) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001b44[0x26]);\n        if (uVar3 == 1) {\n          bVar2 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar2 = false;\n        }\n        else {\n          iVar4 = digitalRead(0x26);\n          if (iVar4 == 0) {\n            bVar2 = false;\n          }\n          else {\n            bVar2 = true;\n          }\n        }\n      }\n    }\n    if (bVar2) {\n      bVar5 = bVar5 | 0x40;\n    }\n    if (PTR_digitalPin_08001b44[0x27] == NC) {\n      bVar2 = false;\n    }\n    else {\n      uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001b44[0x27]);\n      if (uVar3 == 0) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08001b44[0x27]);\n        if (uVar3 == 1) {\n          bVar2 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar2 = false;\n        }\n        else {\n          iVar4 = digitalRead(0x27);\n          if (iVar4 == 0) {\n            bVar2 = false;\n          }\n          else {\n            bVar2 = true;\n          }\n        }\n      }\n    }\n    if (bVar2) {\n      bVar5 = bVar5 | 0x80;\n    }\n    outputPort('\\x04',bVar5,'\\0');\n  }\n  return;\n}\n\n",
            "called": [
                "digitalRead",
                "pinNametoDigitalPin",
                "outputPort"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000ef8",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "FUNC_08000ef8"
        },
        "FUN_08008846": {
            "renaming": {
                "FUN_08008846": "set_file_mode_to_2000_08008846",
                "file_UNUSED": "",
                "st": "file_stat",
                "st->st_mode": "file_stat->st_mode"
            },
            "code": "int set_file_mode_to_2000_08008846(stat *file_stat){\n  file_stat->st_mode = 0x2000;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008846",
            "calling": [
                "_fstat_r"
            ],
            "imported": false,
            "current_name": "set_file_mode_to_2000_08008846"
        },
        "FUN_0800a430": {
            "renaming": {
                "FUN_0800a430": "do_nothing_0800a430"
            },
            "code": "\nvoid do_nothing_0800a430(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a430",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_0800a430"
        },
        "FUN_0800459c": {
            "renaming": {
                "FUN_0800459c": "transfer_byte_0800459c",
                "hi2c": "i2c_handle",
                "puVar1": "data_ptr",
                "XferCount": "transfer_count",
                "pBuffPtr": "buffer_ptr",
                "Instance": "i2c_instance",
                "DR": "data_register",
                "HAL_StatusTypeDef_conflict": "status_type"
            },
            "code": "HAL_StatusTypeDef_conflict transfer_byte_0800459c(I2C_HandleTypeDef_conflict *i2c_handle)\n{\n  uint8_t *data_ptr;\n  \n  if (i2c_handle->XferCount != 0) {\n    data_ptr = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = data_ptr + 1;\n    *data_ptr = (uint8_t)i2c_handle->Instance->DR;\n    i2c_handle->XferCount--;\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800459c",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "transfer_byte_0800459c"
        },
        "FUN_0800774a": {
            "renaming": {
                "FUN_0800774a": "set_timer_value_0800774a",
                "obj": "timer_object",
                "value": "timer_value",
                "(obj->handle).Instance": "timer_instance",
                "CNT": "timer_value"
            },
            "code": "void set_timer_value_0800774a(stimer_t_conflict *timer_object, uint32_t timer_value)\n{\n  TIM_TypeDef *timer_instance = (timer_object->handle).Instance;\n  timer_instance->CNT = timer_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800774a",
            "calling": [
                "ServoIrqHandle"
            ],
            "imported": false,
            "current_name": "set_timer_value_0800774a"
        },
        "FUN_080027f0": {
            "renaming": {
                "FUN_080027f0": "i2c_slave_transmit_080027f0",
                "PTR_txBuffer_08002884": "buffer_ptr",
                "PTR_transmitting_08002878": "transmitting",
                "_i2c": "i2c",
                "PTR_txBufferLength_0800287c": "buffer_length",
                "PTR_txBufferAllocated_08002880": "allocated_size",
                "PTR_txBufferIndex_08002888": "buffer_index",
                "data": "data",
                "quantity": "quantity",
                "i2c_status_e_conflict": "status",
                "void": "void",
                "undefined": "undefined",
                "size_t": "size_t",
                "char": "char",
                "uint8_t": "uint8_t",
                "uint16_t": "uint16_t",
                "memcpy": "memcpy",
                "realloc": "realloc",
                "I2C_OK": "I2C_OK"
            },
            "code": "size_t __thiscall TwoWire::i2c_slave_transmit_080027f0(TwoWire *this,uint8_t *data,size_t quantity)\\n{\\n  char PTR_txBufferLength_0800287c;\\n  void *PTR_txBuffer_08002884;\\n  i2c_status_e_conflict status;\\n  undefined PTR_txBufferAllocated_08002880;\\n  \\n  PTR_txBuffer_08002884 = PTR_txBuffer_08002884;\\n  if (*PTR_PTR_transmitting_08002878_08002878 == \"\\0\") {\\n    status = i2c_slave_transmit_080027f0_IT((i2c_t_conflict *)&this->_i2c,data,(uint16_t)quantity);\\n    if (status != I2C_OK) {\\n      return 0;\\n    }\\n    return quantity;\\n  }\\n  PTR_txBufferLength_0800287c = (byte)*PTR_txBufferLength_0800287c + quantity;\\n  if ((byte)*PTR_txBufferAllocated_08002880 < PTR_txBufferLength_0800287c) {\\n    if (PTR_txBufferLength_0800287c < 0x20) {\\n      PTR_txBufferLength_0800287c = 0x20;\\n    }\\n    PTR_txBuffer_08002884 = realloc(*(void **)PTR_txBuffer_08002884,PTR_txBufferLength_0800287c);\\n    *(void **)PTR_txBuffer_08002884 = PTR_txBuffer_08002884;\\n    if (PTR_txBuffer_08002884 == (void *)0x0) {\\n      PTR_txBufferAllocated_08002880 = 0;\\n    }\\n    else {\\n      PTR_txBufferAllocated_08002880 = (undefined)PTR_txBufferLength_0800287c;\\n    }\\n    *PTR_txBufferAllocated_08002880 = PTR_txBufferAllocated_08002880;\\n  }\\n  PTR_txBuffer_08002884 = PTR_txBufferIndex_08002888;\\n  if (*(int *)PTR_txBuffer_08002884 != 0) {\\n    memcpy((void *)((uint)(byte)*PTR_txBufferIndex_08002888 + *(int *)PTR_txBuffer_08002884),data,\\n           quantity);\\n    PTR_txBufferLength_0800287c = *PTR_txBuffer_08002884 + (char)quantity;\\n    *PTR_txBuffer_08002884 = PTR_txBufferLength_0800287c;\\n    *PTR_txBufferLength_0800287c = PTR_txBufferLength_0800287c;\\n    return quantity;\\n  }\\n  (this->super_Stream).super_Print.i2c_slave_transmit_080027f0_error = 1;\\n  return 0;\\n}",
            "called": [
                "memcpy",
                "i2c_slave_write_IT",
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080027f0",
            "calling": [],
            "imported": false,
            "current_name": "i2c_slave_transmit_080027f0"
        },
        "FUN_0800314e": {
            "renaming": {
                "FUN_0800314e::FUN_0800314e": "FUN_0800314e::FUN_0800314e",
                "this": "firmata_stream",
                "FirmataStream": "FirmataStream",
                "FUN_0800314e": "0800314e_0800314e"
            },
            "code": "class 0800314e_0800314e {\npublic:\n    0800314e_0800314e(Stream* firmata_stream) : FirmataStream(firmata_stream) {}\nprivate:\n    Stream* FirmataStream;\n};",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800314e",
            "calling": [
                "FirmataClass"
            ],
            "imported": false,
            "current_name": "0800314e_0800314e"
        },
        "FUN_080036a0": {
            "renaming": {
                "FUN_080036a0": "infinite_loop_080036a0"
            },
            "code": "void infinite_loop_080036a0() {\n  while(true) {\n    // Do nothing\n  }\n}",
            "called": [
                "USB_HP_CAN1_TX_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036a0",
            "calling": [
                "USB_HP_CAN1_TX_IRQHandler"
            ],
            "imported": false,
            "current_name": "infinite_loop_080036a0"
        },
        "FUN_080036a2": {
            "renaming": {
                "FUN_080036a2": "initialize_EVP_PKEY_CTX_080036a2",
                "ctx": "context",
                "hw_config_FUN_080036a2": "configure_hardware"
            },
            "code": "int initialize_EVP_PKEY_CTX_080036a2(EVP_PKEY_CTX *context) {\n  configure_hardware();\n  return (int)context;\n}",
            "called": [
                "hw_config_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036a2",
            "calling": [
                "premain"
            ],
            "imported": false,
            "current_name": "initialize_EVP_PKEY_CTX_080036a2"
        },
        "FUN_080038e4": {
            "renaming": {
                "FUN_080038e4": "configure_adc_080038e4",
                "*hadc": "*adc_handle",
                "*sConfig": "*channel_config",
                "HVar1": "status",
                "uVar2": "rank",
                "*pAVar3": "*adc_instance",
                "wait_loop_index": "wait_loop_index",
                "PTR_SystemCoreClock_08003a14": "SystemCoreClock",
                "DAT_08003a10": "ADC1",
                "DAT_08003a18": "ADC_WAIT_LOOP_CYCLES"
            },
            "code": "HAL_StatusTypeDef_conflict configure_adc_080038e4(ADC_HandleTypeDef *adc_handle, ADC_ChannelConfTypeDef *channel_config)\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t rank;\n  ADC_TypeDef *adc_instance;\n  uint32_t wait_loop_index;\n  if (adc_handle->Lock == HAL_LOCKED) {\n    status = HAL_BUSY;\n  }\n  else {\n    adc_handle->Lock = HAL_LOCKED;\n    rank = channel_config->Rank;\n    if (rank < 7) {\n      rank = rank * 5 - 5;\n      adc_handle->Instance->SQR3 = channel_config->Channel << (rank & 0xff) | adc_handle->Instance->SQR3 & ~(0x1f << (rank & 0xff));\n    }\n    else if (rank < 0xd) {\n      rank = rank * 5 - 0x23;\n      adc_handle->Instance->SQR2 = channel_config->Channel << (rank & 0xff) | adc_handle->Instance->SQR2 & ~(0x1f << (rank & 0xff));\n    }\n    else {\n      rank = rank * 5 - 0x41;\n      adc_handle->Instance->SQR1 = channel_config->Channel << (rank & 0xff) | adc_handle->Instance->SQR1 & ~(0x1f << (rank & 0xff));\n    }\n    uint32_t channel = channel_config->Channel;\n    if (channel < 10) {\n      adc_handle->Instance->SMPR2 = channel_config->SamplingTime << (channel * 3 & 0xff) |\n           adc_handle->Instance->SMPR2 & ~(7 << (channel * 3 & 0xff));\n    }\n    else {\n      channel = channel * 3 - 0x1e;\n      adc_handle->Instance->SMPR1 = channel_config->SamplingTime << (channel & 0xff) | adc_handle->Instance->SMPR1 & ~(7 << (channel & 0xff));\n    }\n    if (channel_config->Channel - 0x10 < 2) {\n      adc_instance = adc_handle->Instance;\n      if (adc_instance == DAT_08003a10) {\n        if ((adc_instance->CR2 & 0x800000) == 0) {\n          adc_instance->CR2 = adc_instance->CR2 | 0x800000;\n          if (channel_config->Channel == 0x10) {\n            for (wait_loop_index = (uint32_t)((uint64_t)DAT_08003a18 * (uint64_t)*(uint32_t *)PTR_SystemCoreClock_08003a14 / 0x1000000) * 10; wait_loop_index != 0; wait_loop_index = wait_loop_index - 1) {\n            }\n            status = HAL_OK;\n          }\n          else {\n            status = HAL_OK;\n          }\n        }\n        else {\n          status = HAL_OK;\n        }\n      }\n      else {\n        adc_handle->State = adc_handle->State | 0x20;\n        status = HAL_ERROR;\n      }\n    }\n    else {\n      status = HAL_OK;\n    }\n    adc_handle->Lock = HAL_UNLOCKED;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038e4",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "configure_adc_080038e4"
        },
        "FUN_08005e68": {
            "renaming": {
                "FUN_08005e68": "do_nothing_08005e68"
            },
            "code": "\nvoid do_nothing_08005e68(TIM_HandleTypeDef_conflict *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e68",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08005e68"
        },
        "FUN_08005d48": {
            "renaming": {
                "FUN_08005d48": "set_timer_output_compare_08005d48",
                "TIMx": "timer",
                "OC_Config": "output_compare_config",
                "uVar1": "ccer",
                "uVar2": "cr2",
                "uVar3": "oc_mode",
                "DAT_08005da8": "PTR_TIM4"
            },
            "code": "void set_timer_output_compare_08005d48(TIM_TypeDef_conflict *timer, TIM_OC_InitTypeDef *output_compare_config) {\n  uint32_t ccer;\n  uint32_t cr2;\n  uint32_t ccmr2;\n  uint8_t oc_polarity;\n  uint8_t oc_npolarity;\n  uint8_t oc_idle_state;\n  uint8_t ocn_idle_state;\n  uint8_t oc_mode;\n  \n  ccer = timer->CCER & 0xfffffeff;\n  cr2 = timer->CR2;\n  oc_mode = output_compare_config->OCMode;\n  oc_polarity = output_compare_config->OCPolarity;\n  ccer = (ccer & 0xfffffdff) | (oc_polarity << 8);\n  if (timer == DAT_08005da8) {\n    oc_npolarity = output_compare_config->OCNPolarity;\n    oc_idle_state = output_compare_config->OCIdleState;\n    ocn_idle_state = output_compare_config->OCNIdleState;\n    ccer = (ccer & 0xfffff7ff) | (oc_npolarity << 8);\n    cr2 = (cr2 & 0xffffcfff) | (oc_idle_state << 4) | (ocn_idle_state << 4);\n  }\n  timer->CR2 = cr2;\n  ccmr2 = timer->CCMR2 & 0xffffff8c;\n  ccmr2 |= oc_mode;\n  timer->CCMR2 = ccmr2;\n  timer->CCR3 = output_compare_config->Pulse;\n  timer->CCER = ccer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d48",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_TIM_OC_ConfigChannel"
            ],
            "imported": false,
            "current_name": "set_timer_output_compare_08005d48"
        },
        "FUN_08008ba4": {
            "renaming": {
                "__thiscall HardwareSerial::FUN_08008ba4": "write_byte",
                "*this": "serial_obj",
                "c": "byte_val",
                "_written": "is_written",
                "uVar5": "tx_head",
                "iVar4": "next_tx_head",
                "bVar1": "head_byte",
                "bVar3": "head_byte_mod",
                "_serial": "serial_obj->_serial",
                "serial_tx_active": "serial_tx_active",
                "uVar2": "is_tx_active",
                "uart_attach_tx_callback": "uart_attach_tx_callback",
                "FUN_08008ba4": "HardwareSerial::write_byte_08008ba4"
            },
            "code": "size_t __thiscall HardwareSerial::write_byte_08008ba4(HardwareSerial *serial_obj, uint8_t byte_val) {\\n  bool is_written = true;\\n  uint tx_head = (uint)(serial_obj->_serial).tx_head;\\n  int next_tx_head = tx_head + 1;\\n  byte head_byte = (byte)next_tx_head & 0x7f;\\n  if (next_tx_head == 0) {\\n    head_byte = -(-head_byte & 0x7f);\\n  }\\n  while ((serial_obj->_serial).tx_tail == (ushort)head_byte);\\n  (serial_obj->_serial).tx_buff[tx_head] = byte_val;\\n  (serial_obj->_serial).tx_head = (ushort)head_byte;\\n  uint8_t is_tx_active = serial_tx_active((serial_t *)&serial_obj->_serial);\\n  if (is_tx_active == \"\\0\") {\\n    uart_attach_tx_callback((serial_t *)&serial_obj->_serial,DAT_08008bf0);\\n  }\\n  return 1;\\n}",
            "called": [
                "uart_attach_tx_callback",
                "serial_tx_active"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ba4",
            "calling": [],
            "imported": false,
            "current_name": "HardwareSerial::write_byte_08008ba4"
        },
        "FUN_08009ff8": {
            "renaming": {
                "FUN_08009ff8": "kill_process_if_running_08009ff8",
                "param_1": "error_code",
                "param_2": "process_id",
                "param_3": "signal",
                "puVar1": "error_ptr",
                "iVar2": "result"
            },
            "code": "void kill_process_if_running_08009ff8(int *error_code, int process_id, int signal){\n    undefined *error_ptr = PTR_errno_0800a018;\n    *(undefined4 *)PTR_errno_0800a018 = 0;\n    int result = _kill(process_id, signal);\n    if ((result == -1) && (*(int *)error_ptr != 0)) {\n        *error_code = *(int *)error_ptr;\n    }\n    return;\n}",
            "called": [
                "_kill"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009ff8",
            "calling": [
                "_raise_r"
            ],
            "imported": false,
            "current_name": "kill_process_if_running_08009ff8"
        },
        "FUN_08009db0": {
            "renaming": {
                "FUN_08009db0": "initialize_buffer_08009db0",
                "param_1": "error_code",
                "piVar1": "buffer_ptr",
                "piVar2": "current_element_ptr",
                "iVar3": "global_impure_ptr_value",
                "ppiVar4": "buffer_list_ptr_ptr"
            },
            "code": "int * initialize_buffer_08009db0(undefined4 *error_code) {\n  int *buffer_ptr;\n  int *current_element_ptr;\n  int global_impure_ptr_value;\n  int **buffer_list_ptr_ptr;\n\n  global_impure_ptr_value = *(int *)PTR__global_impure_ptr_08009e24;\n  if (*(int *)(global_impure_ptr_value + 0x18) == 0) {\n    __sinit(global_impure_ptr_value);\n  }\n  buffer_list_ptr_ptr = (int **)(global_impure_ptr_value + 0x48);\n  do {\n    current_element_ptr = buffer_list_ptr_ptr[2];\n    buffer_ptr = buffer_list_ptr_ptr[1];\n    while (buffer_ptr = (int *)((int)buffer_ptr + -1), -1 < (int)buffer_ptr) {\n      if (*(short *)(current_element_ptr + 3) == 0) {\n        *(undefined2 *)((int)current_element_ptr + 0xe) = 0xffff;\n        current_element_ptr[0x19] = 0;\n        *(undefined2 *)(current_element_ptr + 3) = 1;\n        *current_element_ptr = 0;\n        current_element_ptr[2] = 0;\n        current_element_ptr[1] = 0;\n        current_element_ptr[4] = 0;\n        current_element_ptr[5] = 0;\n        current_element_ptr[6] = 0;\n        memset(current_element_ptr + 0x17,0,8);\n        current_element_ptr[0xd] = 0;\n        current_element_ptr[0xe] = 0;\n        current_element_ptr[0x12] = 0;\n        current_element_ptr[0x13] = 0;\n        return current_element_ptr;\n      }\n      current_element_ptr = current_element_ptr + 0x1a;\n    }\n    if (*buffer_list_ptr_ptr == (int *)0x0) {\n      buffer_ptr = (int *)__sfmoreglue(error_code,4);\n      *buffer_list_ptr_ptr = buffer_ptr;\n      if (buffer_ptr == (int *)0x0) {\n        *error_code = 0xc;\n        return (int *)0x0;\n      }\n    }\n    buffer_list_ptr_ptr = (int **)*buffer_list_ptr_ptr;\n  } while( true );\n}",
            "called": [
                "memset",
                "__sinit",
                "__sfmoreglue"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009db0",
            "calling": [
                "__sinit"
            ],
            "imported": false,
            "current_name": "initialize_buffer_08009db0"
        },
        "FUN_08002c2c": {
            "renaming": {
                "FUN_08002c2c": "analog_callback_handler_08002c2c",
                "param_1": "callback_ptr",
                "command": "command",
                "value": "value",
                "PTR_currentAnalogCallback_08002c3c": "current_analog_callback_ptr"
            },
            "code": "void analog_callback_handler_08002c2c(void *callback_ptr, uint8_t command, uint16_t value)\n{\n  if (*(code **)PTR_currentAnalogCallback_08002c3c != (code *)0x0) {\n    (**(code **)PTR_currentAnalogCallback_08002c3c)(command, value);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c2c",
            "calling": [],
            "imported": false,
            "current_name": "analog_callback_handler_08002c2c"
        },
        "FUN_080072f0": {
            "renaming": {
                "FUN_080072f0": "read_gpio_pin_state_080072f0",
                "port": "gpio_port",
                "pin": "gpio_pin",
                "GVar1": "pin_state"
            },
            "code": "uint32_t read_gpio_pin_state_080072f0(GPIO_TypeDef *gpio_port, uint32_t gpio_pin) {\n  GPIO_PinState pin_state;\n  pin_state = HAL_GPIO_ReadPin(gpio_port, (uint16_t)gpio_pin);\n  return (uint32_t)pin_state;\n}",
            "called": [
                "HAL_GPIO_ReadPin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072f0",
            "calling": [
                "digitalRead"
            ],
            "imported": false,
            "current_name": "read_gpio_pin_state_080072f0"
        },
        "FUN_08000178": {
            "renaming": {
                "FUN_08000178": "calculate_string_length_08000178",
                "__s": "string",
                "pcVar3": "current_ptr",
                "pcVar2": "next_ptr",
                "cVar1": "current_char"
            },
            "code": "size_t calculate_string_length_08000178(char* string)\n{\n  char current_char;\n  char* current_ptr = string;\n  while (current_char = *current_ptr++)\n  {\n  }\n  return (size_t)(current_ptr - string - 1);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000178",
            "calling": [
                "sendString",
                "setFirmwareNameAndVersion",
                "printNumber"
            ],
            "imported": false,
            "current_name": "calculate_string_length_08000178"
        },
        "FUN_08000a64": {
            "renaming": {
                "FUN_08000a64": "check_i2c_pins_08000a64",
                "_Var1": "is_i2c_pin",
                "uVar2": "digital_pin",
                "uVar3": "pin_index"
            },
            "code": "void check_i2c_pins_08000a64()\n{\n  bool is_i2c_pin;\n  uint32_t digital_pin;\n  uint8_t pin_index;\n\n  for (pin_index = 0; pin_index < 0x3c; pin_index++) {\n    if (PTR_digitalPin_08000ad8[pin_index] == NC) {\n      is_i2c_pin = false;\n    }\n    else {\n      digital_pin = pinNametoDigitalPin(PTR_digitalPin_08000ad8[pin_index]);\n      if (digital_pin == 0 || digital_pin == 1) {\n        is_i2c_pin = false;\n      }\n      else {\n        is_i2c_pin = pin_in_pinmap(PTR_digitalPin_08000ad8[pin_index], (PinMap_conflict *)PTR_PinMap_I2C_SDA_08000adc);\n        if (!is_i2c_pin) {\n          is_i2c_pin = pin_in_pinmap(PTR_digitalPin_08000ad8[pin_index], (PinMap_conflict *)PTR_PinMap_I2C_SCL_08000ae0);\n        }\n      }\n    }\n    if (is_i2c_pin) {\n      setPinModeCallback((byte)pin_index, 6);\n    }\n  }\n  *PTR_isI2CEnabled_08000ae4 = 1;\n  TwoWire::begin((TwoWire *)PTR_Wire_08000ae8);\n  return;\n}",
            "called": [
                "pin_in_pinmap",
                "pinNametoDigitalPin",
                "begin",
                "setPinModeCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a64",
            "calling": [
                "sysexCallback"
            ],
            "imported": false,
            "current_name": "check_i2c_pins_08000a64"
        },
        "FUN_08002c40": {
            "renaming": {
                "FUN_08002c40": "digital_callback_08002c40",
                "param_1": "callback_function",
                "command": "command",
                "value": "value",
                "PTR_currentDigitalCallback_08002c50": "current_digital_callback"
            },
            "code": "void firmata::FirmataClass::digital_callback_08002c40(void *callback_function, uint8_t command, uint16_t value)\n{\n  if (*(code **)PTR_currentDigitalCallback_08002c50 != (code *)0x0) {\n    (**(code **)PTR_currentDigitalCallback_08002c50)(command,value);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c40",
            "calling": [],
            "imported": false,
            "current_name": "digital_callback_08002c40"
        },
        "FUN_0800694c": {
            "renaming": {
                "FUN_0800694c": "receive_data_0800694c",
                "huart": "uart",
                "pbVar1": "rx_buffer_8",
                "uVar2": "rx_xfer_count",
                "puVar3": "rx_buffer_8",
                "HAL_UART_STATE_BUSY_RX": "HAL_BUSY",
                "HAL_UART_STATE_READY": "HAL_OK",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef"
            },
            "code": "HAL_StatusTypeDef_conflict receive_data_0800694c(UART_HandleTypeDef *uart)\n{\n  uint16_t word_length = (uart->Init).WordLength;\n  uint8_t parity = (uart->Init).Parity;\n  uint8_t *rx_buffer = uart->pRxBuffPtr;\n  uint16_t *rx_buffer_16 = (uint16_t *)rx_buffer;\n  uint8_t *rx_data_8 = (uint8_t *)&(uart->Instance->DR);\n  uint16_t rx_data_16 = uart->Instance->DR;\n  uint16_t rx_xfer_count = uart->RxXferCount;\n  HAL_StatusTypeDef_conflict status = HAL_OK;\n\n  if (uart->RxState != HAL_UART_STATE_BUSY_RX) {\n    return HAL_BUSY;\n  }\n\n  if (word_length == 0x1000) {\n    if (parity == 0) {\n      *rx_buffer_16 = (rx_data_16 << 0x17) >> 0x17;\n      rx_buffer += 2;\n    }\n    else {\n      *rx_buffer_16 = rx_data_16 & 0xff;\n      rx_buffer += 1;\n    }\n  }\n  else if (parity == 0) {\n    *rx_buffer = *rx_data_8;\n    rx_buffer += 1;\n  }\n  else {\n    *rx_buffer = *rx_data_8 & 0x7f;\n    rx_buffer += 1;\n  }\n\n  rx_xfer_count -= 1;\n  uart->RxXferCount = rx_xfer_count;\n\n  if (rx_xfer_count == 0) {\n    uart->Instance->CR1 &= 0xffffffdf;\n    uart->Instance->CR1 &= 0xfffffeff;\n    uart->Instance->CR3 &= 0xfffffffe;\n    uart->RxState = HAL_UART_STATE_READY;\n    HAL_UART_RxCpltCallback(uart);\n    status = HAL_OK;\n  }\n  else {\n    status = HAL_OK;\n  }\n\n  return status;\n}",
            "called": [
                "HAL_UART_RxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800694c",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "receive_data_0800694c"
        },
        "FUN_0800a0ec": {
            "renaming": {
                "FUN_0800a0ec": "fstat_wrapper_0800a0ec",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "file_stats",
                "puVar1": "error_ptr",
                "iVar2": "fstat_result"
            },
            "code": "void fstat_wrapper_0800a0ec(int *error_code, int file_descriptor, stat *file_stats)\n{\n  undefined *error_ptr;\n  int fstat_result;\n  error_ptr = PTR_errno_0800a10c;\n  *(undefined4 *)PTR_errno_0800a10c = 0;\n  fstat_result = _fstat(file_descriptor, file_stats);\n  if ((fstat_result == -1) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n  }\n  return;\n}",
            "called": [
                "_fstat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a0ec",
            "calling": [
                "__swhatbuf_r"
            ],
            "imported": false,
            "current_name": "fstat_wrapper_0800a0ec"
        },
        "FUN_08008df8": {
            "renaming": {
                "FUN_08008df8": "IPAddress_08008df8",
                "this": "self",
                "first_octet": "octet1",
                "second_octet": "octet2",
                "third_octet": "octet3",
                "fourth_octet": "octet4",
                "super_Printable": "_vptr_Printable",
                "_address": "_address"
            },
            "code": "class IPAddress_08008df8 {\npublic:\n    IPAddress_08008df8(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet) {\n        _vptr_Printable = (_func_int_varargs **)PTR_DAT_08008e10;\n        _address.bytes[0] = first_octet;\n        _address.bytes[1] = second_octet;\n        _address.bytes[2] = third_octet;\n        _address.bytes[3] = fourth_octet;\n    }\nprivate:\n    _func_int_varargs **_vptr_Printable;\n    union {\n        uint8_t bytes[4];\n        uint32_t dword;\n    } _address;\n};",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008df8",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "IPAddress_08008df8"
        },
        "FUN_08000188": {
            "renaming": {
                "FUN_08000188": "send_software_interrupt_08000188",
                "a0": "data",
                "a1": "interrupt_code",
                "a2": "flags"
            },
            "code": "uint32_t send_software_interrupt_08000188(uint32_t interrupt_code, uint32_t data, int32_t flags)\n{\n  software_interrupt(interrupt_code);\n  return data;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000188",
            "calling": [
                "startForkserver"
            ],
            "imported": false,
            "current_name": "send_software_interrupt_08000188"
        },
        "FUN_08004f3c": {
            "renaming": {
                "FUN_08004f3c": "i2c_handle_state_08004f3c",
                "hi2c": "handle",
                "HVar1": "status",
                "puVar2": "buffer",
                "pIVar3": "instance"
            },
            "code": "void i2c_handle_state_08004f3c(I2C_HandleTypeDef_conflict *handle)\n{\n  HAL_StatusTypeDef_conflict status;\n  uint8_t *buffer;\n  I2C_TypeDef_conflict *instance;\n  if ((byte)handle->State - 0x29 < 2) {\n    handle->PreviousState = 0;\n    handle->State = HAL_I2C_STATE_LISTEN;\n  }\n  else {\n    if ((handle->State != HAL_I2C_STATE_ABORT) && ((handle->Instance->CR2 & 0x800) == 0)) {\n      handle->State = HAL_I2C_STATE_READY;\n    }\n    handle->PreviousState = 0;\n    handle->Mode = HAL_I2C_MODE_NONE;\n  }\n  handle->Instance->CR1 &= 0xfffff7ff;\n  instance = handle->Instance;\n  if ((instance->CR2 & 0x800) == 0) {\n    if (handle->State == HAL_I2C_STATE_ABORT) {\n      handle->State = HAL_I2C_STATE_READY;\n      handle->ErrorCode = 0;\n      if ((instance->SR1 & 0x40) != 0) {\n        buffer = handle->pBuffPtr;\n        handle->pBuffPtr = buffer + 1;\n        *buffer = (uint8_t)instance->DR;\n      }\n      handle->Instance->CR1 &= 0xfffffffe;\n      HAL_I2C_AbortCpltCallback(handle);\n    }\n    else {\n      if ((instance->SR1 & 0x40) != 0) {\n        buffer = handle->pBuffPtr;\n        handle->pBuffPtr = buffer + 1;\n        *buffer = (uint8_t)instance->DR;\n      }\n      HAL_I2C_ErrorCallback(handle);\n    }\n  }\n  else {\n    instance->CR2 &= 0xfffff7ff;\n    if (handle->hdmatx->State == HAL_DMA_STATE_READY) {\n      handle->hdmarx->XferAbortCallback = i2c_handle_transfer_abort;\n      status = HAL_DMA_Abort_IT(handle->hdmarx);\n      if (status != HAL_OK) {\n        if ((handle->Instance->SR1 & 0x40) != 0) {\n          buffer = handle->pBuffPtr;\n          handle->pBuffPtr = buffer + 1;\n          *buffer = (uint8_t)handle->Instance->DR;\n        }\n        handle->Instance->CR1 &= 0xfffffffe;\n        handle->State = HAL_I2C_STATE_READY;\n        (*handle->hdmarx->XferAbortCallback)(handle->hdmarx);\n      }\n    }\n    else {\n      handle->hdmatx->XferAbortCallback = i2c_handle_transfer_abort;\n      status = HAL_DMA_Abort_IT(handle->hdmatx);\n      if (status != HAL_OK) {\n        handle->Instance->CR1 &= 0xfffffffe;\n        handle->State = HAL_I2C_STATE_READY;\n        (*handle->hdmatx->XferAbortCallback)(handle->hdmatx);\n      }\n    }\n  }\n  if ((handle->State == HAL_I2C_STATE_LISTEN) && ((handle->ErrorCode & 4) != 0)) {\n    handle->XferOptions = I2C_XFER_OPTIONS;\n    handle->PreviousState = 0;\n    handle->State = HAL_I2C_STATE_READY;\n    handle->Mode = HAL_I2C_MODE_NONE;\n    HAL_I2C_ListenCpltCallback(handle);\n  }\n  return;\n}",
            "called": [
                "HAL_DMA_Abort_IT",
                "HAL_I2C_ListenCpltCallback",
                "HAL_I2C_AbortCpltCallback",
                "HAL_I2C_ErrorCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3c",
            "calling": [
                "HAL_I2C_ER_IRQHandler",
                "I2C_Slave_STOPF"
            ],
            "imported": false,
            "current_name": "i2c_handle_state_08004f3c"
        },
        "FUN_08004f3a": {
            "renaming": {
                "FUN_08004f3a": "do_nothing_08004f3a"
            },
            "code": "\nvoid do_nothing_08004f3a(I2C_HandleTypeDef_conflict *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3a",
            "calling": [
                "I2C_DMAAbort",
                "I2C_ITError"
            ],
            "imported": false,
            "current_name": "do_nothing_08004f3a"
        },
        "FUN_0800344a": {
            "renaming": {
                "FUN_0800344a": "reset_parser_state_0800344a",
                "this": "parser",
                "uVar1": "buffer_index",
                "waitForData": "waiting_for_data",
                "executeMultiByteCommand": "executing_multi_byte_command",
                "multiByteChannel": "multi_byte_channel",
                "dataBufferSize": "data_buffer_size",
                "dataBuffer": "data_buffer",
                "parsingSysex": "parsing_sysex",
                "sysexBytesRead": "sysex_bytes_read",
                "currentSystemResetCallback": "current_system_reset_callback",
                "systemCallbackFunction": "system_callback_function",
                "currentSystemResetCallbackContext": "current_system_reset_callback_context"
            },
            "code": "void __thiscall reset_parser_state_0800344a(FirmataParser *parser)\\n{\\n  uint buffer_index;\\n  parser->waitForData = 0;\\n  parser->executeMultiByteCommand = \"\\0\";\\n  parser->multiByteChannel = \"\\0\";\\n  for (buffer_index = 0; buffer_index < parser->dataBufferSize; buffer_index = buffer_index + 1) {\\n    parser->dataBuffer[buffer_index] = \"\\0\";\\n  }\\n  parser->parsingSysex = false;\\n  parser->sysexBytesRead = 0;\\n  if (parser->currentSystemResetCallback != (systemCallbackFunction)0x0) {\\n    (*parser->currentSystemResetCallback)(parser->currentSystemResetCallbackContext);\\n  }\\n  return;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800344a",
            "calling": [
                "parse"
            ],
            "imported": false,
            "current_name": "reset_parser_state_0800344a"
        },
        "FUN_080071e4": {
            "renaming": {
                "FUN_080071e4": "stop_pwm_signal_080071e4",
                "pin": "pwm_pin",
                "Channel": "pwm_channel",
                "uVar1": "pin_function",
                "timHandle": "tim_handle"
            },
            "code": "void stop_pwm_signal_080071e4(PinName_conflict pwm_pin)\n{\n    uint32_t pwm_channel;\n    uint32_t pin_function;\n    TIM_HandleTypeDef_conflict tim_handle;\n    tim_handle.Instance = (TIM_TypeDef_conflict *)pinmap_peripheral(pwm_pin, (PinMap_conflict *)PTR_PinMap_PWM_08007238);\n    if (tim_handle.Instance != (TIM_TypeDef_conflict *)0x0 && (pwm_channel = get_pwm_channel(pwm_pin), pwm_channel == 0 || pwm_channel == 4 || pwm_channel == 8 || pwm_channel == 12 || pwm_channel == 24))\n    {\n        pin_function = pinmap_function(pwm_pin, (PinMap_conflict *)PTR_PinMap_PWM_08007238);\n        if ((pin_function & 0x100000) == 0)\n        {\n            HAL_TIM_PWM_Stop(&tim_handle, pwm_channel);\n        }\n        else\n        {\n            HAL_TIMEx_PWMN_Stop(&tim_handle, pwm_channel);\n        }\n        HAL_TIM_PWM_DeInit(&tim_handle);\n    }\n}\n",
            "called": [
                "pinmap_function",
                "HAL_TIM_PWM_Stop",
                "get_pwm_channel",
                "pinmap_peripheral",
                "HAL_TIM_PWM_DeInit",
                "HAL_TIMEx_PWMN_Stop"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080071e4",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "stop_pwm_signal_080071e4"
        },
        "FUN_08002c54": {
            "renaming": {
                "FUN_08002c54": "handle_current_pin_mode_callback_08002c54",
                "param_1": "callback_ptr",
                "command": "command",
                "value": "value",
                "PTR_currentPinModeCallback_08002c64": "callback_ptr"
            },
            "code": "void handle_current_pin_mode_callback_08002c54(void *PTR_currentPinModeCallback_08002c64, uint8_t command, uint16_t value)\n{\n  if (*(code **)PTR_currentPinModeCallback_08002c64 != (code *)0x0) {\n    (**(code **)PTR_currentPinModeCallback_08002c64)(command, value);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c54",
            "calling": [],
            "imported": false,
            "current_name": "handle_current_pin_mode_callback_08002c54"
        },
        "FUN_080072fa": {
            "renaming": {
                "FUN_080072fa": "initialize_HAL_and_SystemClock_080072fa"
            },
            "code": "void initialize_HAL_and_SystemClock_080072fa(void)\n{\n  HAL_Init();\n  SystemClock_Config();\n  return;\n}",
            "called": [
                "HAL_Init",
                "SystemClock_Config"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072fa",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "initialize_HAL_and_SystemClock_080072fa"
        },
        "FUN_08003346": {
            "renaming": {
                "FUN_08003346": "report_firmware_callback_08003346",
                "this": "this_parser",
                "command": "command",
                "newFunction": "new_callback",
                "context": "callback_context",
                "currentReportFirmwareCallback": "current_report_firmware_callback",
                "currentReportFirmwareCallbackContext": "current_report_firmware_callback_context"
            },
            "code": "void __thiscall report_firmware_callback_08003346(FirmataParser *this_parser, uint8_t command, versionCallbackFunction new_callback, void *callback_context) {\n  if (command == 'y') {\n    this_parser->current_report_firmware_callback_08003346 = new_callback;\n    this_parser->current_report_firmware_callback_08003346_context = callback_context;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003346",
            "calling": [
                "FirmataClass"
            ],
            "imported": false,
            "current_name": "report_firmware_callback_08003346"
        },
        "FUN_08003106": {
            "renaming": {
                "FUN_08003106": "send_pin_state_08003106",
                "pin": "pin_number",
                "bytec": "byte_count",
                "bytev": "byte_array",
                "FirmataStream": "firmata_stream"
            },
            "code": "void __thiscall firmata::FirmataMarshaller::send_pin_state_08003106(FirmataMarshaller *this, uint8_t pin, size_t byte_count, uint8_t *byte_array) {\n  if (this->FirmataStream != (Stream *)0x0) {\n    (**(this->FirmataStream->super_Print)._vptr_Print)(this,0xf0);\n    (**(this->FirmataStream->super_Print)._vptr_Print)(this->FirmataStream,0x6f);\n    (**(this->FirmataStream->super_Print)._vptr_Print)(this->FirmataStream,(uint)pin);\n    encodeByteStream(this, byte_count, byte_array, byte_count);\n    (**(this->FirmataStream->super_Print)._vptr_Print)(this->FirmataStream,0xf7);\n  }\n  return;\n}",
            "called": [
                "encodeByteStream"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003106",
            "calling": [
                "sendAnalog"
            ],
            "imported": false,
            "current_name": "send_pin_state_08003106"
        },
        "FUN_08007708": {
            "renaming": {
                "FUN_08007708": "enable_timer_clock_08007708",
                "htim": "timer_handle"
            },
            "code": "void enable_timer_clock_08007708(TIM_HandleTypeDef_conflict *timer_handle)\n{\n  timer_enable_clock(timer_handle);\n  return;\n}",
            "called": [
                "timer_enable_clock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007708",
            "calling": [
                "HAL_TIM_OC_Init"
            ],
            "imported": false,
            "current_name": "enable_timer_clock_08007708"
        },
        "FUN_0800018c": {
            "renaming": {
                "FUN_0800018c": "call_afl_with_ticks_0800018c",
                "ticks": "ticks",
                "uVar1": "result"
            },
            "code": "int call_afl_with_ticks_0800018c(uint32_t ticks) {\n  uint32_t result;\n  if (*(int *)PTR_noHyperCall_080001a4 != 0) {\n    return 0;\n  }\n  result = aflCall(1, ticks, 0);\n  return result;\n}",
            "called": [
                "aflCall"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800018c",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "call_afl_with_ticks_0800018c"
        },
        "FUN_08003f94": {
            "renaming": {
                "FUN_08003f94": "set_irq_enable_bit_08003f94",
                "IRQn": "irq_num",
                "uVar1": "irq_bit_position",
                "DAT_08003fac": "irq_enable_reg"
            },
            "code": "void set_irq_enable_bit_08003f94(IRQn_Type_conflict irq_num){\n  uint32_t irq_bit_position = (uint32_t)irq_num;\n  \n  if (irq_bit_position >= 0) {\n    uint32_t irq_word_offset = irq_bit_position >> 5;\n    uint32_t irq_bit_offset = irq_bit_position & 0x1f;\n    uint32_t* DAT_08003fac = (uint32_t*)(DAT_08003fac + irq_word_offset * 4);\n    *DAT_08003fac = 1 << irq_bit_offset;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f94",
            "calling": [
                "uart_attach_tx_callback",
                "uart_attach_rx_callback",
                "TimerPulseInit",
                "i2c_custom_init"
            ],
            "imported": false,
            "current_name": "set_irq_enable_bit_08003f94"
        },
        "FUN_08002c68": {
            "renaming": {
                "FUN_08002c68": "pin_value_callback_08002c68",
                "param_1": "callback_function",
                "command": "command",
                "value": "value",
                "PTR_currentPinValueCallback_08002c78": "current_pin_value_callback"
            },
            "code": "void firmata::FirmataClass::pin_value_callback_08002c68(void *callback_function, uint8_t command, uint16_t value)\n{\n  if (*(code **)PTR_currentPinValueCallback_08002c78 != (code *)0x0) {\n    (**(code **)PTR_currentPinValueCallback_08002c78)(command, value);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c68",
            "calling": [],
            "imported": false,
            "current_name": "pin_value_callback_08002c68"
        },
        "FUN_08002a26": {
            "renaming": {
                "FUN_08002a26": "send_byte_08002a26",
                "this": "wire_instance",
                "PTR_": "PTR_ (unchanged)",
                "DAT_": "DAT_ (unchanged)"
            },
            "code": "void __thiscall TwoWire::send_byte_08002a26(TwoWire *wire_instance)\n{\n  send_byte_08002a26(wire_instance,0x33);\n  return;\n}",
            "called": [
                "begin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a26",
            "calling": [
                "enableI2CPins"
            ],
            "imported": false,
            "current_name": "send_byte_08002a26"
        },
        "FUN_0800430c": {
            "renaming": {
                "FUN_0800430c": "configure_I2C_0800430c",
                "hi2c": "i2c_handle",
                "hi2c->Mode": "i2c_handle->Mode",
                "hi2c->EventCount": "i2c_handle->EventCount",
                "hi2c->Devaddress": "i2c_handle->Devaddress",
                "(hi2c->Init).AddressingMode": "(i2c_handle->Init).AddressingMode",
                "HAL_I2C_MODE_MEM": "mem_mode",
                "HAL_I2C_STATE_BUSY_TX": "state_busy_tx",
                "instance->DR": "instance_dr"
            },
            "code": "HAL_StatusTypeDef_conflict configure_I2C_0800430c(I2C_HandleTypeDef_conflict *i2c_handle)\n{\n  uint8_t dev_address = i2c_handle->Devaddress;\n  uint8_t mem_mode = i2c_handle->Mode == HAL_I2C_MODE_MEM;\n  uint8_t addressing_mode = (i2c_handle->Init).AddressingMode == 0x4000;\n  uint8_t state_busy_tx = hi2c->State == HAL_I2C_STATE_BUSY_TX;\n  uint8_t event_count = i2c_handle->EventCount;\n  uint8_t instance_dr = 0;\n  if (mem_mode) {\n    instance_dr = event_count == 0 ? dev_address & 0xfe : dev_address & 0xff | 1;\n  }\n  else if (addressing_mode) {\n    instance_dr = state_busy_tx ? dev_address & 0xfe : dev_address & 0xff | 1;\n  }\n  else if (event_count == 0) {\n    instance_dr = (dev_address << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (event_count == 1) {\n    instance_dr = (dev_address << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  i2c_handle->Instance->DR = instance_dr;\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800430c",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "configure_I2C_0800430c"
        },
        "FUN_08003350": {
            "renaming": {
                "FUN_08003350": "set_callback_08003350",
                "command": "cmd",
                "newFunction": "new_function",
                "context": "ctx",
                "currentReportVersionCallback": "current_report_version_callback",
                "currentReportVersionCallbackContext": "current_report_version_callback_context",
                "currentSystemResetCallback": "current_system_reset_callback",
                "currentSystemResetCallbackContext": "current_system_reset_callback_context"
            },
            "code": "void __thiscall firmata::FirmataParser::set_callback_08003350(FirmataParser *this, uint8_t command, systemCallbackFunction new_function, void *context)\n{\n    if (command == 0xf9) {\n        this->current_report_version_callback = new_function;\n        this->current_report_version_callback_context = context;\n        return;\n    }\n    if (command != 0xff) {\n        return;\n    }\n    this->current_system_reset_callback_08003350 = new_function;\n    this->current_system_reset_callback_08003350_context = context;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003350",
            "calling": [
                "FirmataClass"
            ],
            "imported": false,
            "current_name": "set_callback_08003350"
        },
        "FUN_08007710": {
            "renaming": {
                "FUN_08007710": "disable_timer_clock_08007710",
                "htim": "timer_handle"
            },
            "code": "void disable_timer_clock_08007710(TIM_HandleTypeDef_conflict *timer_handle)\n{\n  timer_disable_clock(timer_handle);\n  return;\n}",
            "called": [
                "timer_disable_clock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007710",
            "calling": [
                "HAL_TIM_OC_DeInit"
            ],
            "imported": false,
            "current_name": "disable_timer_clock_08007710"
        },
        "FUN_08003474": {
            "renaming": {
                "__thiscall firmata::FirmataParser::FUN_08003474": "parse",
                "this": "parser",
                "inputData": "input_byte",
                "byte": "byte_value",
                "uVar2": "input_value",
                "pos": "pos",
                "bufferDataAtPosition": "buffer_data_at_position",
                "parsingSysex": "parsing_sysex",
                "sysexBytesRead": "sysex_bytes_read",
                "processSysexMessage": "process_sysex_message",
                "waitForData": "wait_for_data",
                "multiByteChannel": "multi_byte_channel",
                "executeMultiByteCommand": "execute_multi_byte_command",
                "systemReset": "system_reset",
                "currentReportVersionCallback": "current_report_version_callback",
                "currentReportVersionCallbackContext": "current_report_version_callback_context",
                "callbackFunction": "callback_function",
                "currentReportDigitalCallback": "current_report_digital_callback",
                "currentReportDigitalCallbackContext": "current_report_digital_callback_context",
                "dataBuffer": "data_buffer",
                "currentDigitalCallback": "current_digital_callback",
                "currentDigitalCallbackContext": "current_digital_callback_context",
                "currentReportAnalogCallback": "current_report_analog_callback",
                "currentReportAnalogCallbackContext": "current_report_analog_callback_context",
                "currentPinModeCallback": "current_pin_mode_callback",
                "currentPinModeCallbackContext": "current_pin_mode_callback_context",
                "currentPinValueCallback": "current_pin_value_callback",
                "currentPinValueCallbackContext": "current_pin_value_callback_context",
                "currentAnalogCallback": "current_analog_callback",
                "currentAnalogCallbackContext": "current_analog_callback_context",
                "FUN_08003474": "parse_08003474"
            },
            "code": "void __thiscall firmata::FirmataParser::parse_08003474(FirmataParser *parse_08003474r, uint8_t input_byte) {\\n    byte byte_value;\\n    uint input_value;\\n    size_t pos;\\n\\n    input_value = (uint)input_byte;\\n\\n    if (parse_08003474r->parsing_sysex) {\\n        if (input_value != 0xF7) {\\n            buffer_data_at_position(parse_08003474r, input_byte, parse_08003474r->sysex_bytes_read);\\n            parse_08003474r->sysex_bytes_read++;\\n            return;\\n        }\\n        parse_08003474r->parsing_sysex = false;\\n        process_sysex_message(parse_08003474r);\\n        return;\\n    }\\n\\n    if ((parse_08003474r->wait_for_data == 0) || (0x7F < input_value)) {\\n        if (input_value < 0xF0) {\\n            parse_08003474r->multi_byte_channel = input_byte & 0xF;\\n            input_value &= 0xF0;\\n        }\\n        if (input_value == 0xF0) {\\n            parse_08003474r->parsing_sysex = true;\\n            parse_08003474r->sysex_bytes_read = 0;\\n            return;\\n        }\\n        if (input_value < 0xF1) {\\n            if (input_value != 0xC0) {\\n                if (input_value < 0xC1) {\\n                    if (input_value != 0x90) {\\n                        return;\\n                    }\\n                }\\n                else {\\n                    if (input_value == 0xD0) goto LAB_0800359c;\\n                    if (input_value != 0xE0) {\\n                        return;\\n                    }\\n                }\\nLAB_08003586:\\n                parse_08003474r->wait_for_data = 2;\\n                parse_08003474r->execute_multi_byte_command = (uint8_t)input_value;\\n                return;\\n            }\\nLAB_0800359c:\\n            parse_08003474r->wait_for_data = 1;\\n            parse_08003474r->execute_multi_byte_command = (uint8_t)input_value;\\n            return;\\n        }\\n        if (input_value != 0xF9) {\\n            if (0xF9 < input_value) {\\n                if (input_value == 0xFF) {\\n                    system_reset(parse_08003474r);\\n                    return;\\n                }\\n                return;\\n            }\\n            if (1 < input_value - 0xF4) {\\n                return;\\n            }\\n            goto LAB_08003586;\\n        }\\n        if (parse_08003474r->current_report_version_callback != (system_callback_function)0x0) {\\n            (*parse_08003474r->current_report_version_callback)(parse_08003474r->current_report_version_callback_context);\\n        }\\n    }\\n    else {\\n        pos = parse_08003474r->wait_for_data - 1;\\n        parse_08003474r->wait_for_data = pos;\\n        buffer_data_at_position(parse_08003474r, input_byte, pos);\\n        if ((parse_08003474r->wait_for_data == 0) && (byte_value = parse_08003474r->execute_multi_byte_command, byte_value != 0)) {\\n            if (byte_value == 0xD0) {\\n                if (parse_08003474r->current_report_digital_callback != (callback_function)0x0) {\\n                    (*parse_08003474r->current_report_digital_callback)(parse_08003474r->current_report_digital_callback_context, parse_08003474r->multi_byte_channel, (uint16_t)*parse_08003474r->data_buffer);\\n                }\\n            }\\n            else if (byte_value < 0xD1) {\\n                if (byte_value == 0x90) {\\n                    if (parse_08003474r->current_digital_callback != (callback_function)0x0) {\\n                        (*parse_08003474r->current_digital_callback)(parse_08003474r->current_digital_callback_context, parse_08003474r->multi_byte_channel, (ushort)parse_08003474r->data_buffer[1] + (ushort)*parse_08003474r->data_buffer * 0x80);\\n                    }\\n                }\\n                else if ((byte_value == 0xC0) && (parse_08003474r->current_report_analog_callback != (callback_function)0x0)) {\\n                    (*parse_08003474r->current_report_analog_callback)(parse_08003474r->current_report_analog_callback_context, parse_08003474r->multi_byte_channel, (uint16_t)*parse_08003474r->data_buffer);\\n                }\\n            }\\n            else if (byte_value == 0xF4) {\\n                if (parse_08003474r->current_pin_mode_callback != (callback_function)0x0) {\\n                    (*parse_08003474r->current_pin_mode_callback)(parse_08003474r->current_pin_mode_callback_context, parse_08003474r->data_buffer[1], (uint16_t)*parse_08003474r->data_buffer);\\n                }\\n            }\\n            else if (byte_value == 0xF5) {\\n                if (parse_08003474r->current_pin_value_callback != (callback_function)0x0) {\\n                    (*parse_08003474r->current_pin_value_callback)(parse_08003474r->current_pin_value_callback_context, parse_08003474r->data_buffer[1], (uint16_t)*parse_08003474r->data_buffer);\\n                }\\n            }\\n            else if ((byte_value == 0xE0) && (parse_08003474r->current_analog_callback != (callback_function)0x0)) {\\n                (*parse_08003474r->current_analog_callback)(parse_08003474r->current_analog_callback_context, parse_08003474r->multi_byte_channel, (ushort)parse_08003474r->data_buffer[1] + (ushort)*parse_08003474r->data_buffer * 0x80);\\n            }\\n            parse_08003474r->execute_multi_byte_command = \"\\0\";\\n            return;\\n        }\\n    }\\n    return;\\n}",
            "called": [
                "systemReset",
                "bufferDataAtPosition",
                "processSysexMessage"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003474",
            "calling": [
                "processInput"
            ],
            "imported": false,
            "current_name": "parse_08003474"
        },
        "FUN_08008804": {
            "renaming": {
                "FUN_08008804": "allocate_memory_08008804",
                "incr": "increment",
                "pcVar1": "current_pointer",
                "pcVar2": "new_pointer"
            },
            "code": "caddr_t allocate_memory_08008804(int increment)\n{\n  caddr_t current_pointer;\n  caddr_t new_pointer;\n  \n  if (*(int *)PTR_heap_end_08008834 == 0) {\n    *(undefined **)PTR_heap_end_08008834 = PTR__ebss_08008838;\n  }\n  current_pointer = *(caddr_t *)PTR_heap_end_08008834;\n  new_pointer = current_pointer + increment;\n  if (new_pointer <= &stack0x00000000) {\n    *(caddr_t *)PTR_heap_end_08008834 = new_pointer;\n    return current_pointer;\n  }\n  *(undefined4 *)PTR_errno_0800883c = 0xc;\n  return (caddr_t)0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008804",
            "calling": [
                "_sbrk_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_08008804"
        },
        "FUN_08004e3c": {
            "renaming": {
                "FUN_08004e3c": "i2c_transfer_08004e3c",
                "*hi2c": "*i2c_handle",
                "uVar1": "transfer_options",
                "puVar2": "buffer_pointer"
            },
            "code": "HAL_StatusTypeDef_conflict i2c_transfer_08004e3c(I2C_HandleTypeDef_conflict *i2c_handle)\n{\n  uint32_t transfer_options;\n  uint8_t *buffer_pointer;\n  transfer_options = i2c_handle->XferOptions;\n  if (i2c_handle->XferCount == 3) {\n    if (((transfer_options == 4) || (transfer_options == 8)) || (transfer_options == 0xffff0000)) {\n      i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 & 0xfffffbff;\n    }\n    buffer_pointer = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = buffer_pointer + 1;\n    *buffer_pointer = (uint8_t)i2c_handle->Instance->DR;\n    i2c_handle->XferCount = i2c_handle->XferCount - 1;\n  }\n  else if (i2c_handle->XferCount == 2) {\n    if (((transfer_options == 4) || (transfer_options == 8)) || (transfer_options == 0xffff0000)) {\n      i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 & 0xfffffcff;\n      i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 | 0x200;\n    }\n    else {\n      if (transfer_options == 2) {\n        i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 | 0x400;\n      }\n      else {\n        i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 & 0xfffffbff;\n      }\n      i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 & 0xfffffcff;\n    }\n    buffer_pointer = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = buffer_pointer + 1;\n    *buffer_pointer = (uint8_t)i2c_handle->Instance->DR;\n    i2c_handle->XferCount = i2c_handle->XferCount - 1;\n    buffer_pointer = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = buffer_pointer + 1;\n    *buffer_pointer = (uint8_t)i2c_handle->Instance->DR;\n    i2c_handle->XferCount = i2c_handle->XferCount - 1;\n    i2c_handle->State = HAL_I2C_STATE_READY;\n    i2c_handle->PreviousState = 0;\n    if (i2c_handle->Mode == HAL_I2C_MODE_MEM) {\n      i2c_handle->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_MemRxCpltCallback(i2c_handle);\n    }\n    else {\n      i2c_handle->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_MasterRxCpltCallback(i2c_handle);\n    }\n  }\n  else {\n    buffer_pointer = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = buffer_pointer + 1;\n    *buffer_pointer = (uint8_t)i2c_handle->Instance->DR;\n    i2c_handle->XferCount = i2c_handle->XferCount - 1;\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MasterRxCpltCallback",
                "HAL_I2C_MemRxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e3c",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_transfer_08004e3c"
        },
        "FUN_080091a0": {
            "renaming": {
                "FUN_080091a0": "process_data_080091a0",
                "__ptr": "data_ptr",
                "_FUN_080091a0_r": "_process_data_r"
            },
            "code": "void process_data_080091a0(void *__ptr)\n{\n  _process_data_080091a0_r(*(undefined4 *)PTR__impure_ptr_080091ac, __ptr);\n  return;\n}",
            "called": [
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091a0",
            "calling": [
                "setFirmwareNameAndVersion"
            ],
            "imported": false,
            "current_name": "process_data_080091a0"
        },
        "FUN_08002a1c": {
            "renaming": {
                "FUN_08002a1c": "send_address_08002a1c",
                "this": "wire",
                "address": "address",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void __thiscall TwoWire::send_address_08002a1c(TwoWire *wire, int address) {\n  uint8_t address_byte = (uint8_t)address;\n  send_data(wire, &address_byte, 1);\n  return;\n}",
            "called": [
                "begin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a1c",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "send_address_08002a1c"
        },
        "FUN_08007718": {
            "renaming": {
                "FUN_08007718": "get_stimer_from_htim_08007718",
                "htim": "TIM_HandleTypeDef_conflict*",
                "stimer_t_conflict": "stimer_t_conflict",
                "&htim[-1].Lock": "(stimer_t_conflict*) &htim[-1].Lock"
            },
            "code": "typedef struct {\n    uint32_t Lock;\n    uint32_t State;\n} stimer_t_conflict;\n\nstimer_t_conflict* get_stimer_from_htim_08007718(TIM_HandleTypeDef_conflict* htim) {\n    return (stimer_t_conflict*) &htim[-1].Lock;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007718",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIM_OC_DelayElapsedCallback"
            ],
            "imported": false,
            "current_name": "get_stimer_from_htim_08007718"
        },
        "FUN_08002a30": {
            "renaming": {
                "FUN_08002a30": "initialize_transmission_08002a30",
                "this": "wire",
                "address": "address",
                "PTR_transmitting_08002a48": "is_transmitting",
                "PTR_txAddress_08002a4c": "tx_address",
                "PTR_txBufferIndex_08002a50": "tx_buffer_index",
                "PTR_txBufferLength_08002a54": "tx_buffer_length"
            },
            "code": "void __thiscall initialize_transmission_08002a30(TwoWire *wire, uint8_t address)\n{\n  bool PTR_transmitting_08002a48 = true;\n  uint8_t PTR_txAddress_08002a4c = address << 1;\n  uint8_t PTR_txBufferIndex_08002a50 = 0;\n  uint8_t PTR_txBufferLength_08002a54 = 0;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a30",
            "calling": [
                "requestFrom",
                "sysexCallback",
                "readAndReportData"
            ],
            "imported": false,
            "current_name": "initialize_transmission_08002a30"
        },
        "FUN_08009cd0": {
            "renaming": {
                "FUN_08009cd0": "walk_and_free_memory_for_all_streams_08009cd0",
                "param_1": "stream",
                "DAT_08009cd8": "global_reent"
            },
            "code": "void walk_and_free_memory_for_all_streams_08009cd0(FILE *stream) {\n  _fwalk_reent(stream, DAT_08009cd8);\n  return;\n}",
            "called": [
                "_fwalk_reent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009cd0",
            "calling": [],
            "imported": false,
            "current_name": "walk_and_free_memory_for_all_streams_08009cd0"
        },
        "FUN_0800322c": {
            "renaming": {
                "FUN_0800322c": "send_firmware_version_0800322c",
                "this": "marshaller",
                "major": "firmware_major_version",
                "minor": "firmware_minor_version",
                "FirmataStream": "stream",
                "_vptr_Print": "virtual_function_table",
                "super_Print": "parent_class",
                "0xf9": "SYSEX_START_BYTE"
            },
            "code": "void __thiscall firmata::FirmataMarshaller::send_firmware_version_0800322c(FirmataMarshaller *this, uint8_t major, uint8_t minor)\n{\n  if (this->stream != nullptr) {\n    (**(this->stream->super_Print)._vptr_Print)(this, 0xf9);\n    (**(this->stream->super_Print)._vptr_Print)(this->stream, static_cast<uint>(major));\n    (**(this->stream->super_Print)._vptr_Print)(this->stream, static_cast<uint>(minor));\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800322c",
            "calling": [
                "printVersion"
            ],
            "imported": false,
            "current_name": "send_firmware_version_0800322c"
        },
        "FUN_08003760": {
            "renaming": {
                "FUN_08003760": "get_uwTick_value_08003760",
                "PTR_uwTick_08003768": "uwTick_ptr"
            },
            "code": "uint32_t get_uwTick_value_08003760(void)\n{\n    uint32_t *PTR_uwTick_08003768 = (uint32_t *)PTR_uwTick_08003768;\n    return *PTR_uwTick_08003768;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003760",
            "calling": [
                "ADC_ConversionStop_Disable",
                "ADC_Enable",
                "HAL_ADCEx_Calibration_Start",
                "UART_WaitOnFlagUntilTimeout",
                "HAL_RCC_OscConfig",
                "HAL_RCCEx_PeriphCLKConfig",
                "HAL_ADC_PollForConversion",
                "i2c_master_write",
                "uart_debug_write",
                "HAL_RCC_ClockConfig",
                "GetCurrentMilli",
                "i2c_master_read",
                "HAL_UART_Transmit"
            ],
            "imported": false,
            "current_name": "get_uwTick_value_08003760"
        },
        "FUN_08000130": {
            "renaming": {
                "FUN_08000130": "execute_function_if_completed_08000130",
                "DAT_08000164": "is_completed",
                "PTR_completed_8667_08000170": "completed_ptr",
                "DAT_08000174": "function_ptr",
                "PTR_object_8672_0800016c": "object_ptr"
            },
            "code": "void execute_function_if_completed_08000130() {\n  if (DAT_08000164 == 0) {\n    if ((*(int *)PTR_completed_8667_08000170 != 0) && (DAT_08000174 != (code *)0x0)) {\n      (*DAT_08000174)();\n      return;\n    }\n    return;\n  }\n  if ((*(int *)PTR_completed_8667_08000170 != 0) && (DAT_08000174 != (code *)0x0)) {\n    (*DAT_08000174)(PTR_completed_8667_08000170, PTR_object_8672_0800016c);\n    return;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000130",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_if_completed_08000130"
        },
        "FUN_08002798": {
            "renaming": {
                "FUN_08002798": "clear_buffers_08002798",
                "this": "wire",
                "PTR_rxBufferIndex_080027d0": "rx_buffer_index",
                "PTR_rxBufferLength_080027d4": "rx_buffer_length",
                "PTR_rxBuffer_080027d8": "rx_buffer",
                "PTR_rxBufferAllocated_080027dc": "rx_buffer_allocated",
                "PTR_txBufferIndex_080027e0": "tx_buffer_index",
                "PTR_txBufferLength_080027e4": "tx_buffer_length",
                "PTR_txBuffer_080027e8": "tx_buffer",
                "PTR_txBufferAllocated_080027ec": "tx_buffer_allocated"
            },
            "code": "void __thiscall TwoWire::clear_buffers_08002798(TwoWire *wire)\n{\n  *PTR_rxBufferIndex_080027d0 = 0;\n  *PTR_rxBufferLength_080027d4 = 0;\n  if (*(void **)PTR_rxBuffer_080027d8 != (void *)0x0) {\n    memset(*(void **)PTR_rxBuffer_080027d8, 0, (uint)(byte)*PTR_rxBufferAllocated_080027dc);\n  }\n  *PTR_txBufferIndex_080027e0 = 0;\n  *PTR_txBufferLength_080027e4 = 0;\n  if (*(void **)PTR_txBuffer_080027e8 != (void *)0x0) {\n    memset(*(void **)PTR_txBuffer_080027e8, 0, (uint)(byte)*PTR_txBufferAllocated_080027ec);\n  }\n  return;\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002798",
            "calling": [],
            "imported": false,
            "current_name": "clear_buffers_08002798"
        },
        "FUN_08009190": {
            "renaming": {
                "FUN_08009190": "allocate_memory_08009190",
                "__size": "size",
                "pvVar1": "allocated_memory",
                "_FUN_08009190_r": "_allocate_memory_r"
            },
            "code": "void * allocate_memory_08009190(size_t size)\n{\n  void *allocated_memory;\n  allocated_memory = (void *)_allocate_memory_08009190_r(*(undefined4 *)PTR__impure_ptr_0800919c, size);\n  return allocated_memory;\n}",
            "called": [
                "_malloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009190",
            "calling": [
                "setFirmwareNameAndVersion"
            ],
            "imported": false,
            "current_name": "allocate_memory_08009190"
        },
        "FUN_0800242c": {
            "renaming": {
                "FUN_0800242c": "initialize_timer_0800242c",
                "obj": "timer_object",
                "DAT_08002440": "pulse_callback"
            },
            "code": "void initialize_timer_0800242c(stimer_t *timer_object){\n                      TimerPulseInit((stimer_t_conflict *)timer_object, 60000, 0x5dc, DAT_08002440);\n                    }",
            "called": [
                "TimerPulseInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800242c",
            "calling": [
                "attach"
            ],
            "imported": false,
            "current_name": "initialize_timer_0800242c"
        },
        "FUN_08002e44": {
            "renaming": {
                "FUN_08002e44": "parse_firmware_version_08002e44",
                "this": "firmata_instance",
                "name": "version_string",
                "major": "major_version",
                "minor": "minor_version",
                "bVar1": "firmware_version_length",
                "pcVar2": "cpp_string",
                "pcVar3": "last_occurrence_of_slash",
                "pbVar4": "firmware_version_vector",
                "sVar5": "version_string_length"
            },
            "code": "void __thiscall firmata::FirmataClass::parse_firmware_version_08002e44(FirmataClass *firmata_instance, char *name, byte major, byte minor)\n{\n  byte firmware_version_length;\n  char *cpp_string = strstr(name, \"__cpp\") ;\n  char *last_occurrence_of_slash = strrchr(name, 0x2f);\n  if (last_occurrence_of_slash == (char *)0x0) {\n    last_occurrence_of_slash = strrchr(name, 0x5c);\n  }\n  if (last_occurrence_of_slash != (char *)0x0) {\n    name = last_occurrence_of_slash + 1;\n  }\n  if (cpp_string == (char *)0x0) {\n    firmware_version_length = strlen(name);\n    firmata_instance->firmware_version_count = (char)firmware_version_length + '\\x02';\n  }\n  else {\n    firmata_instance->firmware_version_count = ((char)cpp_string - (char)name) + '\\x02';\n  }\n  free(firmata_instance->firmware_version_vector);\n  byte vector_length = firmata_instance->firmware_version_count;\n  byte *firmware_version_vector = (byte *)malloc(vector_length + 1);\n  firmata_instance->firmware_version_vector = firmware_version_vector;\n  firmware_version_vector[vector_length] = '\\0';\n  *firmware_version_vector = major;\n  firmware_version_vector[1] = minor;\n  strncpy((char *)(firmware_version_vector + 2), name, vector_length - 2);\n  return;\n}",
            "called": [
                "free",
                "strncpy",
                "strstr",
                "strrchr",
                "malloc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002e44",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "parse_firmware_version_08002e44"
        },
        "FUN_0800a0a8": {
            "renaming": {
                "FUN_0800a0a8": "write_to_file_0800a0a8",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar1": "error_ptr",
                "iVar2": "write_result"
            },
            "code": "void write_to_file_0800a0a8(int* error_code, int file_descriptor, char* buffer, int buffer_size) {\n    undefined* error_ptr = PTR_errno_0800a0c8;\n    *(undefined4*)error_ptr = 0;\n    int write_result = _write(file_descriptor, buffer, buffer_size);\n    if (write_result == -1 && *(int*)error_ptr != 0) {\n        *error_code = *(int*)error_ptr;\n    }\n    return;\n}",
            "called": [
                "_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a0a8",
            "calling": [
                "__swrite"
            ],
            "imported": false,
            "current_name": "write_to_file_0800a0a8"
        },
        "FUN_08002c00": {
            "renaming": {
                "FUN_08002c00": "read_from_address_08002c00",
                "this": "wire",
                "address": "address",
                "quantity": "quantity",
                "sendStop": "send_stop",
                "uVar1": "result"
            },
            "code": "uint8_t __thiscall read_from_address_08002c00(TwoWire *wire, uint8_t address, uint8_t quantity, uint8_t send_stop)\\n{\\n  uint8_t result = read_from_address_08002c00(wire, address, quantity, 0, \"\\0\", send_stop);\\n  return result;\\n}",
            "called": [
                "requestFrom"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c00",
            "calling": [
                "requestFrom"
            ],
            "imported": false,
            "current_name": "read_from_address_08002c00"
        },
        "FUN_08003f30": {
            "renaming": {
                "FUN_08003f30": "set_interrupt_priority_08003f30",
                "IRQn": "irq",
                "PreemptPriority": "preempt_priority",
                "SubPriority": "sub_priority",
                "uVar1": "irq_num",
                "uVar2": "priority_group_bits",
                "uVar3": "priority_group_size",
                "DAT_08003f8c": "priority_group_address",
                "DAT_08003f90": "interrupt_priority_address"
            },
            "code": "void set_interrupt_priority_08003f30(IRQn_Type_conflict irq, uint32_t preempt_priority, uint32_t sub_priority) {\n  uint32_t irq_num = (uint32_t)irq;\n  uint32_t priority_group_bits = (*(int *)(DAT_08003f8c + 0xc) << 0x15) >> 0x1d;\n  uint32_t priority_group_size = 1 << (7 - priority_group_bits);\n  uint32_t preempt_bits = (priority_group_size - 1) & preempt_priority;\n  uint32_t sub_bits = (priority_group_size - 1) & sub_priority;\n  uint32_t priority = (preempt_bits << (8 - priority_group_bits)) | sub_bits;\n  if ((int)irq_num < 0) {\n    *(char *)(DAT_08003f90 + (irq_num & 0xf)) = (char)(priority << 4);\n  }\n  else {\n    *(char *)(irq_num + 0xe000e400) = (char)(priority << 4);\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f30",
            "calling": [
                "uart_attach_tx_callback",
                "uart_attach_rx_callback",
                "HAL_InitTick",
                "TimerPulseInit",
                "SystemClock_Config",
                "i2c_custom_init"
            ],
            "imported": false,
            "current_name": "set_interrupt_priority_08003f30"
        },
        "FUN_080073d8": {
            "renaming": {
                "FUN_080073d8": "set_rtc_alarm_080073d8",
                "PTR_RtcHandle_080073e4": "rtc_handle"
            },
            "code": "void set_rtc_alarm_080073d8(void)\n{\n  RTC_HandleTypeDef* PTR_RtcHandle_080073e4 = (RTC_HandleTypeDef*)PTR_RtcHandle_080073e4;\n  HAL_RTC_AlarmIRQHandler(PTR_RtcHandle_080073e4);\n  return;\n}",
            "called": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073d8",
            "calling": [],
            "imported": false,
            "current_name": "set_rtc_alarm_080073d8"
        },
        "FUN_080085dc": {
            "renaming": {
                "FUN_080085dc": "is_uart_transmitting_080085dc",
                "obj": "serial_port",
                "HVar1": "uart_state",
                "PTR_uart_handlers_080085fc": "PTR_uart_handlers_080085fc",
                "UART_HandleTypeDef": "UART_HandleTypeDef",
                "uint": "uint"
            },
            "code": "bool is_uart_transmitting_080085dc(serial_t *serial_port) {\n    UART_HandleTypeDef *uart_handler = *(UART_HandleTypeDef **)(PTR_uart_handlers_080085fc + (uint)serial_port->index * 4);\n    HAL_UART_StateTypeDef uart_state = HAL_UART_GetState(uart_handler);\n    return (uart_state & 0x21U) == 0x21;\n}",
            "called": [
                "HAL_UART_GetState"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080085dc",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "is_uart_transmitting_080085dc"
        },
        "FUN_08008ed6": {
            "renaming": {
                "__thiscall Print::FUN_08008ed6": "print_number",
                "this": "printer",
                "n": "number",
                "base": "base",
                "sVar1": "size",
                "FUN_08008ed6Number": "print_number_base",
                "FUN_08008ed6": "print_number_08008ed6"
            },
            "code": "size_t __thiscall print_number_08008ed6(Print *printer, ulong number, int base) {\n  size_t size;\n  if (base != 0) {\n    size = print_number_08008ed6_base(printer, number, (uint8_t)base);\n    return size;\n  }\n  size = (**printer->_vptr_Print)(printer, number & 0xff);\n  return size;\n}",
            "called": [
                "printNumber"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ed6",
            "calling": [
                "print"
            ],
            "imported": false,
            "current_name": "print_number_08008ed6"
        },
        "FUN_08008db0": {
            "renaming": {
                "FUN_08008db0": "initialize_static_data_08008db0"
            },
            "code": "void initialize_static_data_08008db0()\n{\n  __static_initialization_and_destruction_0(1, 0xffff);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008db0",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_data_08008db0"
        },
        "FUN_08002444": {
            "renaming": {
                "FUN_08002444": "servo_update_08002444",
                "obj": "timer",
                "channel": "channel",
                "bVar1": "servo_enabled",
                "puVar2": "timer_channel_ptr",
                "uVar3": "timer_counter",
                "iVar4": "servo_index_offset",
                "uVar5": "timer_index"
            },
            "code": "void servo_update_08002444(stimer_t *timer, uint32_t channel) {\n  bool servo_enabled;\n  undefined *timer_channel_ptr;\n  uint32_t timer_counter;\n  int servo_index_offset;\n  uint timer_index;\n  \n  timer_index = (uint)timer->idx;\n  if ((PTR_timerChannel_0800256c[timer_index] & 0x80) == 0) {\n    servo_index_offset = timer_index * 0xc;\n    if ((char)PTR_timerChannel_0800256c[timer_index] + servo_index_offset < (int)(uint)(byte)*PTR_ServoCount_08002570) {\n      if ((PTR_servos_08002574[((char)PTR_timerChannel_0800256c[timer_index] + servo_index_offset) * 8] & 0x40) == 0) {\n        servo_enabled = false;\n      }\n      else {\n        servo_enabled = true;\n      }\n    }\n    else {\n      servo_enabled = false;\n    }\n    if (servo_enabled) {\n      digitalWrite((byte)PTR_servos_08002574[(servo_index_offset + (char)PTR_timerChannel_0800256c[timer_index]) * 8] & 0x3f, 0);\n    }\n  }\n  else {\n    setTimerCounter((stimer_t_conflict *)timer, 0);\n  }\n  timer_channel_ptr = PTR_timerChannel_0800256c;\n  PTR_timerChannel_0800256c[timer_index] = PTR_timerChannel_0800256c[timer_index] + '\\x01';\n  servo_index_offset = timer_index * 0xc;\n  if ((char)timer_channel_ptr[timer_index] + servo_index_offset < (int)(uint)(byte)*PTR_ServoCount_08002570) {\n    if ((char)PTR_timerChannel_0800256c[timer_index] < '\f') {\n      servo_enabled = true;\n    }\n    else {\n      servo_enabled = false;\n    }\n  }\n  else {\n    servo_enabled = false;\n  }\n  if (servo_enabled) {\n    if ((PTR_servos_08002574[((char)PTR_timerChannel_0800256c[timer_index] + servo_index_offset) * 8] & 0x40) != 0) {\n      digitalWrite((byte)PTR_servos_08002574[((char)PTR_timerChannel_0800256c[timer_index] + servo_index_offset) * 8] & 0x3f, 1);\n    }\n    timer_counter = getTimerCounter((stimer_t_conflict *)timer);\n    setCCRRegister((stimer_t_conflict *)timer, channel, *(int *)(PTR_servos_08002574 + (servo_index_offset + (char)PTR_timerChannel_0800256c[timer_index]) * 8 + 4) + timer_counter);\n    return;\n  }\n  timer_counter = getTimerCounter((stimer_t_conflict *)timer);\n  if (timer_counter + 4 < 20000) {\n    setCCRRegister((stimer_t_conflict *)timer, channel, 20000);\n  }\n  else {\n    timer_counter = getTimerCounter((stimer_t_conflict *)timer);\n    setCCRRegister((stimer_t_conflict *)timer, channel, timer_counter + 4);\n  }\n  PTR_timerChannel_0800256c[timer_index] = 0xff;\n  return;\n}",
            "called": [
                "digitalWrite",
                "getTimerCounter",
                "setCCRRegister",
                "setTimerCounter"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002444",
            "calling": [],
            "imported": false,
            "current_name": "servo_update_08002444"
        },
        "FUN_0800906c": {
            "renaming": {
                "FUN_0800906c": "trigger_gpio_interrupts_0800906c",
                "uVar1": "gpio_pin"
            },
            "code": "void trigger_gpio_interrupts_0800906c(void)\n{\n  uint16_t gpio_pin = 0x400;\n  while (gpio_pin < 0x8001) {\n    HAL_GPIO_EXTI_IRQHandler(gpio_pin);\n    gpio_pin <<= 1;\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800906c",
            "calling": [],
            "imported": false,
            "current_name": "trigger_gpio_interrupts_0800906c"
        },
        "FUN_08003658": {
            "renaming": {
                "FUN_08003658": "initialize_system_08003658",
                "iVar1": "index",
                "puVar2": "completed_ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void initialize_system_08003658(void)\n{\n  int index;\n  undefined4 *completed_ptr;\n  code *jump_table;\n  for (index = 0; PTR___dso_handle_08003690 + index < PTR_completed_8667_08003694; index += 4) {\n    *(undefined4 *)(PTR___dso_handle_08003690 + index) =\n         *(undefined4 *)(PTR__sidata_0800368c + index);\n  }\n  for (completed_ptr = (undefined4 *)PTR_completed_8667_08003698; completed_ptr < PTR__ebss_0800369c; completed_ptr++) {\n    *completed_ptr = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  jump_table = (code *)0x800368a;\n  main();\n  (*jump_table)();\n  return;\n}",
            "called": [
                "__libc_init_array",
                "SystemInit",
                "main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003658",
            "calling": [],
            "imported": false,
            "current_name": "initialize_system_08003658"
        },
        "FUN_08009a80": {
            "renaming": {
                "FUN_08009a80": "validate_input_08009a80",
                "param_1": "input",
                "param_2": "stream",
                "uVar1": "result",
                "uVar2": "flags",
                "iVar3": "impure_ptr"
            },
            "code": "uint validate_input_08009a80(undefined4 *input, undefined4 *stream) {\n    uint uVar1;\n    ushort flags;\n    int impure_ptr = *(int *)PTR__impure_ptr_08009b4c;\n    if ((impure_ptr != 0) && (*(int *)(impure_ptr + 0x18) == 0)) {\n        __sinit(impure_ptr);\n    }\n    if (stream == (undefined4 *)PTR___sf_fake_stdin_08009b50) {\n        stream = *(undefined4 **)(impure_ptr + 4);\n    } else if (stream == (undefined4 *)PTR___sf_fake_stdout_08009b54) {\n        stream = *(undefined4 **)(impure_ptr + 8);\n    } else if (stream == (undefined4 *)PTR___sf_fake_stderr_08009b58) {\n        stream = *(undefined4 **)(impure_ptr + 0xc);\n    }\n    flags = *(ushort *)(stream + 3);\n    uVar1 = (uint)flags;\n    if (-1 < (int)(uVar1 << 0x1c)) {\n        if (-1 < (int)(uVar1 << 0x1b)) {\n            *input = 9;\n            goto LAB_08009ab0;\n        }\n        if ((int)(uVar1 << 0x1d) < 0) {\n            if ((undefined4 *)stream[0xd] != (undefined4 *)0x0) {\n                if ((undefined4 *)stream[0xd] != stream + 0x11) {\n                    _free_r(input);\n                }\n                stream[0xd] = 0;\n            }\n            *(ushort *)(stream + 3) = *(ushort *)(stream + 3) & 0xffdb;\n            stream[1] = 0;\n            *stream = stream[4];\n        }\n        *(ushort *)(stream + 3) = *(ushort *)(stream + 3) | 8;\n    }\n    if ((stream[4] == 0) && ((*(ushort *)(stream + 3) & 0x280) != 0x200)) {\n        __smakebuf_r(input, stream);\n    }\n    flags = *(ushort *)(stream + 3);\n    uVar1 = flags & 1;\n    if ((flags & 1) == 0) {\n        if (-1 < (int)((uint)flags << 0x1e)) {\n            uVar1 = stream[5];\n        }\n        stream[2] = uVar1;\n    } else {\n        stream[2] = 0;\n        stream[6] = -stream[5];\n    }\n    if (stream[4] == 0) {\n        flags = *(ushort *)(stream + 3);\n        uVar1 = (int)(short)flags & 0x80;\n        if (uVar1 != 0) {\n            *(ushort *)(stream + 3) = flags | 0x40;\n            return 0xffffffff;\n        }\n    } else {\n        uVar1 = 0;\n    }\n    return uVar1;\n}",
            "called": [
                "_free_r",
                "__smakebuf_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009a80",
            "calling": [
                "__swbuf_r",
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "validate_input_08009a80"
        },
        "FUN_080062f4": {
            "renaming": {
                "FUN_080062f4": "disable_timer_channel_080062f4",
                "htim": "timer_handle",
                "Channel": "channel",
                "TIM_TypeDef_conflict": "TIM_TypeDef_conflict",
                "pTVar1": "timer_instance",
                "DAT_0800638c": "PTR_TIM3"
            },
            "code": "HAL_StatusTypeDef_conflict disable_timer_channel_080062f4(TIM_HandleTypeDef_conflict *timer_handle, uint32_t channel)\n{\n  TIM_TypeDef_conflict *timer_instance = timer_handle->Instance;\n  switch(channel) {\n    case 0:\n      timer_instance->DIER &= 0xfffffffd;\n      break;\n    case 4:\n      timer_instance->DIER &= 0xfffffffb;\n      break;\n    case 8:\n      timer_instance->DIER &= 0xfffffff7;\n      break;\n    case 0xc:\n      timer_instance->DIER &= 0xffffffef;\n  }\n  TIM_CCxChannelCmd(timer_instance, channel, 0);\n  if (((timer_instance == DAT_0800638c) && ((timer_instance->CCER & 0x1111) == 0)) && ((timer_instance->CCER & 0x444) == 0))\n  {\n    timer_instance->BDTR &= 0xffff7fff;\n  }\n  if (((timer_instance->CCER & 0x1111) == 0) && ((timer_instance->CCER & 0x444) == 0)) {\n    timer_instance->CR1 &= 0xfffffffe;\n  }\n  return HAL_OK;\n}",
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080062f4",
            "calling": [
                "TimerPulseDeinit"
            ],
            "imported": false,
            "current_name": "disable_timer_channel_080062f4"
        },
        "FUN_080073e8": {
            "renaming": {
                "FUN_080073e8": "infinite_loop_080073e8",
                "msg": "message",
                "val": "value"
            },
            "code": "void infinite_loop_080073e8(char *message, int value) {\n  while(true) {\n    // do nothing\n  }\n}",
            "called": [
                "_Error_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073e8",
            "calling": [
                "_Error_Handler",
                "SystemClock_Config",
                "onReceiveService"
            ],
            "imported": false,
            "current_name": "infinite_loop_080073e8"
        },
        "FUN_0800267c": {
            "renaming": {
                "FUN_0800267c": "update_position_0800267c",
                "this": "servo",
                "value": "new_position",
                "min": "min_position",
                "max": "max_position",
                "iVar1": "max_distance_from_min",
                "iVar2": "max_distance_from_max"
            },
            "code": "void __thiscall Servo::update_position_0800267c(Servo *servo, int new_position) {\n  int max_distance_from_min = (0x88 - servo->min_position) * 4;\n  int max_distance_from_max = (600 - servo->max_position) * 4;\n  \n  if (servo->servoIndex < 0xc) {\n    if ((max_distance_from_min - new_position == 0 || max_distance_from_min < new_position) &&\n       (new_position == max_distance_from_max || new_position + max_distance_from_max * -1 < 0)) {\n      *(int *)(PTR_servos_080026ac + (uint)servo->servoIndex * 8 + 4) = new_position;\n    }\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800267c",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "update_position_0800267c"
        },
        "FUN_0800376c": {
            "renaming": {
                "FUN_0800376c": "wait_for_conversion_0800376c",
                "*hadc": "hadc",
                "Timeout": "timeout",
                "HVar1": "status",
                "uVar2": "start_time",
                "pAVar5": "adc_instance",
                "Conversion_Timeout_CPU_cycles": "conversion_timeout_cycles",
                "HAL_GetTick": "HAL_GetTick",
                "CR2": "ADC_CR2_ADON",
                "CR1": "ADC_CR1_SCAN",
                "SQR1": "ADC_SQR1_L",
                "SR": "ADC_SR_EOC",
                "State": "hadc->State",
                "Lock": "hadc->Lock",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "HAL_TIMEOUT": "HAL_TIMEOUT",
                "PTR_SystemCoreClock_080038c8": "PTR_SystemCoreClock_080038c8",
                "RCC_PERIPHCLK_ADC": "RCC_PERIPHCLK_ADC",
                "SMPR2": "adc_instance->SMPR2",
                "SMPR1": "adc_instance->SMPR1",
                "DAT_080038cc": "DAT_080038cc",
                "DAT_080038d0": "DAT_080038d0",
                "DAT_080038d4": "DAT_080038d4",
                "DAT_080038d8": "DAT_080038d8",
                "ADC_FLAG_EOC": "ADC_FLAG_EOC",
                "ADC_CR2_CONT": "ADC_CR2_CONTINUOUS",
                "ContinuousConvMode": "(hadc->Init).ContinuousConvMode",
                "HAL_ADC_STATE_TIMEOUT": "HAL_ADC_STATE_TIMEOUT",
                "HAL_ADC_STATE_REG_EOC": "HAL_ADC_STATE_REG_EOC",
                "HAL_ADC_STATE_INJ_EOC": "HAL_ADC_STATE_INJ_EOC",
                "HAL_ADC_STATE_READY": "HAL_ADC_STATE_READY",
                "HAL_ADC_STATE_ERROR_CONFIG": "HAL_ADC_STATE_ERROR_CONFIG",
                "HAL_OK": "HAL_OK",
                "HAL_ERROR": "HAL_ERROR"
            },
            "code": "HAL_StatusTypeDef_conflict wait_for_conversion_0800376c(ADC_HandleTypeDef *hadc, uint32_t timeout)\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t start_time = HAL_GetTick();\n  uint32_t conversion_timeout_cycles = 0;\n  ADC_TypeDef *adc_instance = hadc->Instance;\n  if ((adc_instance->CR2 & ADC_CR2_ADON) == 0) {\n    if (((adc_instance->CR1 & ADC_CR1_SCAN) == 0) && ((adc_instance->SQR1 & ADC_SQR1_L) == 0)) {\n      do {\n        if ((hadc->Instance->SR & ADC_SR_EOC) != 0) goto conversion_complete;\n      } while ((timeout == 0xffffffff) || ((timeout != 0 && (HAL_GetTick() - start_time <= timeout))));\n      hadc->State |= HAL_ADC_STATE_TIMEOUT;\n      hadc->Lock = HAL_UNLOCKED;\n      status = HAL_TIMEOUT;\n    }\n    else {\n      uint32_t system_clock = *(uint *)PTR_SystemCoreClock_080038c8;\n      uint32_t apb2_clock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);\n      uint32_t sample_time = 0;\n      if (((adc_instance->SMPR2 & DAT_080038cc) == 0) && ((adc_instance->SMPR1 & DAT_080038cc + 0xdc000000) == 0)) {\n        if ((adc_instance->SMPR2 & DAT_080038d0) == 0) {\n          if ((adc_instance->SMPR1 & DAT_080038d4) == 0) {\n            sample_time = 20;\n          }\n          else {\n            sample_time = 41;\n          }\n        }\n        else {\n          sample_time = 41;\n        }\n      }\n      else if (((adc_instance->SMPR2 & DAT_080038d0) == 0) && ((adc_instance->SMPR1 & DAT_080038d0 + 0xee000000) == 0)) {\n        sample_time = 84;\n      }\n      else if ((DAT_080038d8 & adc_instance->SMPR2) == 0) {\n        if ((DAT_080038d8 & adc_instance->SMPR1) == 0) {\n          sample_time = 84;\n        }\n        else {\n          sample_time = 480;\n        }\n      }\n      else {\n        sample_time = 480;\n      }\n      conversion_timeout_cycles = (system_clock / apb2_clock) * sample_time;\n      for (; conversion_timeout_cycles <= conversion_timeout_cycles && sample_time - conversion_timeout_cycles != 0; conversion_timeout_cycles++) {\n        if ((timeout != 0xffffffff) && ((timeout == 0 || (HAL_GetTick() - start_time > timeout)))) {\n          hadc->State |= HAL_ADC_STATE_TIMEOUT;\n          hadc->Lock = HAL_UNLOCKED;\n          return HAL_TIMEOUT;\n        }\n      }\n    conversion_complete:\n      hadc->Instance->SR = ADC_FLAG_EOC;\n      hadc->State |= HAL_ADC_STATE_REG_EOC;\n      if ((hadc->Instance->CR2 & ADC_CR2_CONT) == ADC_CR2_CONTINUOUS) {\n        if ((hadc->Init).ContinuousConvMode == 0) {\n          hadc->State &= ~HAL_ADC_STATE_INJ_EOC;\n          if ((hadc->State & HAL_ADC_STATE_READY) == 0) {\n            hadc->State |= HAL_ADC_STATE_READY;\n            status = HAL_OK;\n          }\n          else {\n            status = HAL_OK;\n          }\n        }\n        else {\n          status = HAL_OK;\n        }\n      }\n      else {\n        status = HAL_OK;\n      }\n    }\n  }\n  else {\n    hadc->State |= HAL_ADC_STATE_ERROR_CONFIG;\n    hadc->Lock = HAL_UNLOCKED;\n    status = HAL_ERROR;\n  }\n  return status;\n}",
            "called": [
                "HAL_GetTick",
                "HAL_RCCEx_GetPeriphCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800376c",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "wait_for_conversion_0800376c"
        },
        "FUN_08003e20": {
            "renaming": {
                "FUN_08003e20": "stop_and_disable_conversion_08003e20",
                "hadc": "hadc",
                "HVar1": "status",
                "uVar2": "clock_freq",
                "uVar3": "current_time",
                "pAVar4": "adc_instance",
                "uVar5": "SYS_CLOCK_FREQ",
                "wait_loop_index": "wait_loop_index",
                "PTR_SystemCoreClock_08003f08": "N/A",
                "DAT_08003e2c": "N/A"
            },
            "code": "HAL_StatusTypeDef_conflict stop_and_disable_conversion_08003e20(ADC_HandleTypeDef *hadc)\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t clock_freq, wait_loop_index;\n  ADC_TypeDef *adc_instance;\n  uint32_t start_time, current_time;\n\n  if (hadc->Lock == HAL_LOCKED) {\n    return HAL_BUSY;\n  }\n  hadc->Lock = HAL_LOCKED;\n  status = ADC_ConversionStop_Disable(hadc);\n  if (status == HAL_OK) {\n    hadc->State = (hadc->State & 0xffffeefd) | 2;\n    clock_freq = HAL_RCCEx_GetPeriphCLKFreq(2);\n    wait_loop_index = (uint32_t) (SYS_CLOCK_FREQ / clock_freq) << 1;\n    while (wait_loop_index--);\n    ADC_Enable(hadc);\n    hadc->Instance->CR2 |= 8;\n    start_time = HAL_GetTick();\n    while ((hadc->Instance->CR2 & 8) != 0) {\n      current_time = HAL_GetTick();\n      if ((current_time - start_time) > 10) {\n        hadc->State = (hadc->State & 0xffffffed) | 0x10;\n        hadc->Lock = HAL_UNLOCKED;\n        return HAL_ERROR;\n      }\n    }\n    adc_instance = hadc->Instance;\n    adc_instance->CR2 |= 4;\n    start_time = HAL_GetTick();\n    while ((hadc->Instance->CR2 & 4) != 0) {\n      current_time = HAL_GetTick();\n      if ((current_time - start_time) > 10) {\n        hadc->State = (hadc->State & 0xffffffed) | 0x10;\n        hadc->Lock = HAL_UNLOCKED;\n        return HAL_ERROR;\n      }\n    }\n    hadc->State = (hadc->State & 0xfffffffc) | 1;\n  }\n  hadc->Lock = HAL_UNLOCKED;\n  return status;\n}",
            "called": [
                "HAL_GetTick",
                "ADC_ConversionStop_Disable",
                "ADC_Enable",
                "HAL_RCCEx_GetPeriphCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e20",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "stop_and_disable_conversion_08003e20"
        },
        "FUN_08002c14": {
            "renaming": {
                "FUN_08002c14": "sendRequestAndGetResponse_08002c14",
                "this": "wire_instance",
                "address": "device_address",
                "quantity": "data_size",
                "uVar1": "response_status"
            },
            "code": "uint8_t __thiscall TwoWire::sendRequestAndGetResponse_08002c14(TwoWire *this, uint8_t device_address, uint8_t data_size)\n{\n  uint8_t response_status;\n  response_status = sendRequestAndGetResponse_08002c14(this, device_address, data_size, '\\x01');\n  return response_status;\n}",
            "called": [
                "requestFrom"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c14",
            "calling": [
                "readAndReportData"
            ],
            "imported": false,
            "current_name": "sendRequestAndGetResponse_08002c14"
        },
        "FUN_08009084": {
            "renaming": {
                "__thiscall std::function<void()>::operator__": "invoke",
                "function_void___ *this": "self",
                "_M_manager": "manager",
                "_M_invoker": "invoker",
                "_Any_data": "any_data",
                "__throw_bad_function_call": "throw_bad_function_call",
                "FUN_08009084": "void_08009084"
            },
            "code": "void_08009084 __thiscall std::function<void_08009084()>::invoke(function_void_08009084___ *this)\n{\n    if ((this->super__Function_base)._M_manager != (_Manager_type)0x0) {\n        (*this->_M_invoker)((_Any_data *)this);\n        return;\n    }\n    __throw_bad_function_call();\n}",
            "called": [
                "__throw_bad_function_call"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009084",
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "imported": false,
            "current_name": "void_08009084"
        },
        "FUN_08005840": {
            "renaming": {
                "FUN_08005840": "calculate_result_08005840",
                "uVar1": "result",
                "uVar2": "data_value1",
                "local_1c": "stack_value4",
                "abStack_18": "stack_array",
                "uStack_14": "stack_value3",
                "uStack_10": "stack_value2",
                "uStack_c": "stack_value1",
                "DAT_080058a0": "data_value_ptr1",
                "DAT_080058a4": "data_value2",
                "DAT_080058a8": "data_value3"
            },
            "code": "uint calculate_result_08005840(void)\n{\n  uint result = 0;\n  uint stack_value1 = *(uint *)(PTR__etext_0800589c + 8);\n  uint stack_value2 = *(uint *)(PTR__etext_0800589c + 4);\n  uint stack_value3 = *(uint *)PTR__etext_0800589c;\n  uint stack_value4 = *(uint *)(PTR__etext_0800589c + 0x10);\n  byte stack_array[4];\n  uint data_value1 = *(uint *)(DAT_080058a0 + 4);\n  uint DAT_080058a4 = DAT_080058a8;\n  if ((data_value1 & 0xc) == 8) {\n    if ((data_value1 & 0x10000) == 0) {\n      result = DAT_080058a4 * (uint)stack_array[(data_value1 << 10) >> 0x1c];\n    }\n    else {\n      result = (DAT_080058a8 * stack_array[(data_value1 << 10) >> 0x1c]) / (uint)*(byte *)((int)&stack_value4 - ((*(int *)(DAT_080058a0 + 4) << 0xe) >> 0x1f));\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005840",
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "imported": false,
            "current_name": "calculate_result_08005840"
        },
        "FUN_08003306": {
            "renaming": {
                "FUN_08003306": "parse_command_08003306",
                "command": "command",
                "newFunction": "callback",
                "context": "context",
                "currentReportDigitalCallback": "current_report_digital_callback",
                "currentReportDigitalCallbackContext": "current_report_digital_callback_context",
                "PIN_MODE_RESPONSE": "pin_mode_response",
                "currentPinModeCallback": "current_pin_mode_callback",
                "currentPinModeCallbackContext": "current_pin_mode_callback_context",
                "PIN_STATE_RESPONSE": "pin_state_response",
                "currentPinValueCallback": "current_pin_value_callback",
                "currentPinValueCallbackContext": "current_pin_value_callback_context",
                "ANALOG_REPORT": "analog_report",
                "currentAnalogCallback": "current_analog_callback",
                "currentAnalogCallbackContext": "current_analog_callback_context",
                "DIGITAL_MESSAGE": "digital_message",
                "currentDigitalCallback": "current_digital_callback",
                "currentDigitalCallbackContext": "current_digital_callback_context",
                "ANALOG_MESSAGE": "analog_message",
                "currentReportAnalogCallback": "current_report_analog_callback",
                "currentReportAnalogCallbackContext": "current_report_analog_callback_context"
            },
            "code": "void __thiscall firmata::FirmataParser::parse_command_08003306(FirmataParser *this, uint8_t command, callbackFunction newFunction, void *context) {\n  if (command == DIGITAL_REPORT) {\n    this->currentReportDigitalCallback = newFunction;\n    this->currentReportDigitalCallbackContext = context;\n    return;\n  }\n  if (command > DIGITAL_REPORT) {\n    if (command == PIN_MODE_RESPONSE) {\n      this->currentPinModeCallback = newFunction;\n      this->currentPinModeCallbackContext = context;\n      return;\n    }\n    if (command == PIN_STATE_RESPONSE) {\n      this->currentPinValueCallback = newFunction;\n      this->currentPinValueCallbackContext = context;\n    }\n    else if (command == ANALOG_REPORT) {\n      this->currentAnalogCallback = newFunction;\n      this->currentAnalogCallbackContext = context;\n      return;\n    }\n    return;\n  }\n  if (command == DIGITAL_MESSAGE) {\n    this->currentDigitalCallback = newFunction;\n    this->currentDigitalCallbackContext = context;\n    return;\n  }\n  if (command == ANALOG_MESSAGE) {\n    this->currentReportAnalogCallback = newFunction;\n    this->currentReportAnalogCallbackContext = context;\n    return;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003306",
            "calling": [
                "FirmataClass"
            ],
            "imported": false,
            "current_name": "parse_command_08003306"
        },
        "FUN_08002578": {
            "renaming": {
                "FUN_08002578": "deinitialize_timer_08002578",
                "obj": "timer_object"
            },
            "code": "void deinitialize_timer_08002578(stimer_t *timer_object)\n{\n  TimerPulseDeinit((stimer_t_conflict *)timer_object);\n  return;\n}",
            "called": [
                "TimerPulseDeinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002578",
            "calling": [
                "detach"
            ],
            "imported": false,
            "current_name": "deinitialize_timer_08002578"
        },
        "FUN_08006932": {
            "renaming": {
                "FUN_08006932": "reset_uart_08006932",
                "*huart": "*uart_handle",
                "Instance": "instance",
                "CR1": "control_register_1",
                "gState": "global_state",
                "HAL_UART_TxCpltCallback": "transmission_complete_callback",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef_conflict reset_uart_08006932(UART_HandleTypeDef *uart_handle)\n{\n  uart_handle->Instance->CR1 &= ~(1 << 6);\n  uart_handle->gState = HAL_UART_STATE_READY;\n  HAL_UART_TxCpltCallback(uart_handle);\n  return HAL_OK;\n}",
            "called": [
                "HAL_UART_TxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006932",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "reset_uart_08006932"
        },
        "FUN_080060c4": {
            "renaming": {
                "FUN_080060c4": "set_timer_output_compare_080060c4",
                "TIMx": "timer",
                "OC_Config": "oc_config",
                "uVar1": "ccer",
                "uVar2": "cr2",
                "uVar3": "oc_mode",
                "DAT_08006124": "PTR_TIM1",
                "OC_Config->OCPolarity": "oc_polarity",
                "OC_Config->OCNPolarity": "oc_npolarity",
                "OC_Config->OCIdleState": "oc_idle_state",
                "OC_Config->OCNIdleState": "ocn_idle_state"
            },
            "code": "void set_timer_output_compare_080060c4(TIM_TypeDef_conflict *timer, TIM_OC_InitTypeDef *oc_config) {\n  uint32_t ccer = timer->CCER & 0xffffffef;\n  uint32_t cr2 = timer->CR2;\n  uint32_t oc_mode = oc_config->OCMode;\n  uint32_t oc_polarity = oc_config->OCPolarity;\n  uint32_t oc_npolarity = oc_config->OCNPolarity;\n  uint32_t oc_idle_state = oc_config->OCIdleState;\n  uint32_t ocn_idle_state = oc_config->OCNIdleState;\n\n  ccer |= oc_polarity << 4;\n\n  if (timer == DAT_08006124) {\n    ccer |= oc_npolarity << 4;\n    cr2 &= 0xfffff3ff;\n    cr2 |= oc_idle_state << 2;\n    cr2 |= ocn_idle_state << 2;\n  }\n\n  timer->CCMR1 &= 0xffff8cff;\n  timer->CCMR1 |= oc_mode << 8;\n\n  timer->CCR2 = oc_config->Pulse;\n  timer->CCER = ccer;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060c4",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_TIM_OC_ConfigChannel"
            ],
            "imported": false,
            "current_name": "set_timer_output_compare_080060c4"
        },
        "FUN_08009eac": {
            "renaming": {
                "FUN_08009eac": "decode_and_allocate_08009eac",
                "param_1": "param",
                "param_2": "buffer",
                "uVar1": "decoded_value",
                "iVar2": "allocation_size",
                "local_18": "allocation_size",
                "local_14": "local_buffer",
                "DAT_08009f28": "unknown_data"
            },
            "code": "void decode_and_allocate_08009eac(int param, int *buffer) {\n  ushort decoded_value;\n  int allocation_size;\n  int *local_buffer;\n\n  if ((int)((uint)*(ushort *)(buffer + 3) << 0x1e) >= 0) {\n    local_buffer = buffer;\n    decoded_value = __swhatbuf_r(param, buffer, &allocation_size, &local_buffer);\n    int *allocated_memory = _malloc_r(param, allocation_size);\n    if (allocated_memory != 0) {\n      *(undefined4 *)(param + 0x28) = DAT_08009f28;\n      *buffer = (int)allocated_memory;\n      *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x80;\n      buffer[4] = (int)allocated_memory;\n      buffer[5] = allocation_size;\n      if ((local_buffer != (int *)0x0) && (_isatty_r(param, (int)*(short *)((int)buffer + 0xe)) != 0)) {\n        *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(buffer + 3) = decoded_value | *(ushort *)(buffer + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(buffer + 3) << 0x16 >= 0) {\n      *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) & 0xfffc | 2;\n    }\n  }\n  *buffer = (int)buffer + 0x47;\n  buffer[4] = (int)buffer + 0x47;\n  buffer[5] = 1;\n  return;\n}",
            "called": [
                "_isatty_r",
                "__swhatbuf_r",
                "_malloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009eac",
            "calling": [
                "__swsetup_r"
            ],
            "imported": false,
            "current_name": "decode_and_allocate_08009eac"
        },
        "FUN_08008dbe": {
            "renaming": {
                "FUN_08008dbe": "print_address_08008dbe",
                "this": "this",
                "p": "printer",
                "sVar1": "byte_printed",
                "sVar2": "dot_printed",
                "iVar3": "i",
                "iVar4": "bytes_printed"
            },
            "code": "size_t __thiscall IPAddress::print_address_08008dbe(IPAddress *this, Print *printer) {\n  size_t bytes_printed = 0;\n  for (int i = 0; i < 3; i++) {\n    size_t byte_printed = Print::print(printer, (this->_address).bytes[i], 10);\n    size_t dot_printed = Print::print(printer, '.');\n    bytes_printed += byte_printed + dot_printed;\n  }\n  bytes_printed += Print::print(printer, (this->_address).bytes[3], 10);\n  return bytes_printed;\n}",
            "called": [
                "print",
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008dbe",
            "calling": [],
            "imported": false,
            "current_name": "print_address_08008dbe"
        },
        "FUN_080072d8": {
            "renaming": {
                "FUN_080072d8": "set_gpio_pin_state_080072d8",
                "port": "gpio_port",
                "pin": "pin_number",
                "val": "pin_state",
                "GPIO_PIN_RESET": "GPIO_PIN_RESET",
                "GPIO_PIN_SET": "GPIO_PIN_SET",
                "HAL_GPIO_WritePin": "HAL_GPIO_WritePin"
            },
            "code": "void set_gpio_pin_state_080072d8(GPIO_TypeDef *gpio_port, uint32_t pin_number, uint32_t pin_state) {\n    if (pin_state == 0) {\n        HAL_GPIO_WritePin(gpio_port, (uint16_t)pin_number, GPIO_PIN_RESET);\n    } else {\n        HAL_GPIO_WritePin(gpio_port, (uint16_t)pin_number, GPIO_PIN_SET);\n    }\n}",
            "called": [
                "HAL_GPIO_WritePin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072d8",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "set_gpio_pin_state_080072d8"
        },
        "FUN_08002b00": {
            "renaming": {
                "FUN_08002b00": "receive_callback_08002b00",
                "inBytes": "received_data",
                "numBytes": "num_bytes",
                "PTR_user_onReceive_08002b54": "user_on_receive_ptr",
                "PTR_rxBufferLength_08002b5c": "rx_buffer_length_ptr",
                "PTR_rxBufferIndex_08002b58": "rx_buffer_index_ptr",
                "allocateRxBuffer": "allocate_rx_buffer",
                "PTR_rxBuffer_08002b60": "rx_buffer_ptr",
                "PTR_s__home_bo__arduino15_packages_STM_08002b64": "s__home_bo__arduino15_packages_STM_08002b64"
            },
            "code": "void TwoWire::receive_callback_08002b00(uint8_t *received_data, int num_bytes) {\n    bool user_on_receive_exists = (*(int *)PTR_user_onReceive_08002b54 != 0);\n    bool buffer_not_full = (*PTR_rxBufferLength_08002b5c > *PTR_rxBufferIndex_08002b58);\n\n    if (user_on_receive_exists && buffer_not_full) {\n        allocate_rx_buffer(num_bytes);\n        if (*(int *)PTR_rxBuffer_08002b60 == 0) {\n            _Error_Handler(PTR_s__home_bo__arduino15_packages_STM_08002b64,0x183);\n        }\n        memcpy(*(void **)PTR_rxBuffer_08002b60, received_data, num_bytes);\n        *PTR_rxBufferIndex_08002b58 = 0;\n        *PTR_rxBufferLength_08002b5c = (char)num_bytes;\n        (**(code **)PTR_user_onReceive_08002b54)(num_bytes);\n    }\n    return;\n}",
            "called": [
                "_Error_Handler",
                "memcpy",
                "allocateRxBuffer"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b00",
            "calling": [],
            "imported": false,
            "current_name": "receive_callback_08002b00"
        },
        "FUN_08002f84": {
            "renaming": {
                "FUN_08002f84": "update_system_callback_08002f84",
                "this": "self",
                "command": "command",
                "newFunction": "new_callback",
                "PTR_currentSystemResetCallback_08002f90": "PTR_currentSystemResetCallback_08002f90",
                "systemCallbackFunction": "systemCallbackFunction"
            },
            "code": "void __thiscall firmata::FirmataClass::update_system_callback_08002f84(FirmataClass *self, uint8_t command, systemCallbackFunction new_callback) {\n  if (command == 0xff) {\n    *(systemCallbackFunction *)PTR_currentSystemResetCallback_08002f90 = new_callback;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f84",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "update_system_callback_08002f84"
        },
        "FUN_08009094": {
            "renaming": {
                "FUN_08009094": "process_gpio_interrupt_08009094",
                "GPIO_Pin": "pin_number",
                "bVar1": "pin_id",
                "PTR_gpio_irq_conf_080090b0": "PTR_gpio_irq_conf_080090b0",
                "function_void___": "function_void___"
            },
            "code": "void process_gpio_interrupt_08009094(uint16_t pin_number) {\n  uint8_t pin_id = get_pin_id(pin_number);\n  if (*(int *)(PTR_gpio_irq_conf_080090b0 + (uint)pin_id * 0x14 + 0xc) != 0) {\n    std::function<void()>::operator__ ((function_void___ *)(PTR_gpio_irq_conf_080090b0 + (uint)pin_id * 0x14 + 4));\n  }\n  return;\n}",
            "called": [
                "operator()",
                "get_pin_id"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009094",
            "calling": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "imported": false,
            "current_name": "process_gpio_interrupt_08009094"
        },
        "FUN_0800a0cc": {
            "renaming": {
                "FUN_0800a0cc": "close_file_and_set_error_code_0800a0cc",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "puVar1": "error_ptr",
                "iVar2": "close_result"
            },
            "code": "void close_file_and_set_error_code_0800a0cc(int *error_code, int file_descriptor) {\n    undefined *error_ptr;\n    int close_result;\n    error_ptr = PTR_errno_0800a0e8;\n    *(undefined4 *)PTR_errno_0800a0e8 = 0;\n    close_result = _close(file_descriptor);\n    if ((close_result == -1) && (*(int *)error_ptr != 0)) {\n        *error_code = *(int *)error_ptr;\n    }\n    return;\n}",
            "called": [
                "_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a0cc",
            "calling": [
                "__sclose"
            ],
            "imported": false,
            "current_name": "close_file_and_set_error_code_0800a0cc"
        },
        "FUN_08002580": {
            "renaming": {
                "FUN_08002580::FUN_08002580": "initialize_servo",
                "this": "servo_obj",
                "PTR_FUN_08002580Count_080025a4": "servo_count_ptr",
                "servoIndex": "servo_index",
                "PTR_servos_080025a8": "servo_data_ptr",
                "bVar1": "servo_count",
                "FUN_08002580": "initialize_servo_08002580"
            },
            "code": "initialize_servo_08002580 * __thiscall initialize_servo_08002580(initialize_servo_08002580 *this)\n{\n  byte servo_count = *PTR_initialize_servo_08002580Count_080025a4;\n  \n  if (servo_count > 11) {\n    this->servo_index = 0xff;\n    return this;\n  }\n  \n  *PTR_initialize_servo_08002580Count_080025a4 = servo_count + 1;\n  this->servo_index = servo_count;\n  *(undefined4 *)(PTR_servos_080025a8 + (uint)servo_count * 8 + 4) = 0x5dc;\n  return this;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002580",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "initialize_servo_08002580"
        },
        "FUN_080073ec": {
            "renaming": {
                "FUN_080073ec": "update_flags_080073ec",
                "puVar1": "flags_ptr"
            },
            "code": "void update_flags_080073ec(void)\n{\n  uint *flags_ptr;\n  flags_ptr = DAT_0800742c;\n  *flags_ptr |= 1;\n  flags_ptr[1] &= DAT_08007430;\n  *flags_ptr &= 0xfef6ffff;\n  *flags_ptr &= 0xfffbffff;\n  flags_ptr[1] &= 0xff80ffff;\n  flags_ptr[2] = 0x9f0000;\n  *(undefined4 *)(DAT_08007434 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073ec",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "update_flags_080073ec"
        },
        "FUN_08008ef4": {
            "renaming": {
                "FUN_08008ef4": "map_value_08008ef4",
                "x": "value_to_map",
                "in_min": "input_min",
                "in_max": "input_max",
                "out_min": "output_min",
                "out_max": "output_max"
            },
            "code": "long map_value_08008ef4(long value_to_map, long input_min, long input_max, long output_min, long output_max) {\n    long mapped_value = (value_to_map - input_min) * (output_max - output_min) / (input_max - input_min) + output_min;\n    return mapped_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ef4",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "map_value_08008ef4"
        },
        "FUN_08009fe8": {
            "renaming": {
                "FUN_08009fe8": "signal_handler_08009fe8",
                "__sig": "signal_number",
                "iVar1": "return_value"
            },
            "code": "int signal_handler_08009fe8(int signal_number)\n{\n  int return_value;\n  return_value = _signal_handler_08009fe8_r(*(undefined4 *)PTR__impure_ptr_08009ff4, signal_number);\n  return return_value;\n}",
            "called": [
                "_raise_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009fe8",
            "calling": [
                "abort"
            ],
            "imported": false,
            "current_name": "signal_handler_08009fe8"
        },
        "FUN_08002c1e": {
            "renaming": {
                "FUN_08002c1e": "initialize_static_variables_08002c1e"
            },
            "code": "void initialize_static_variables_08002c1e(void)\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c1e",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_variables_08002c1e"
        },
        "FUN_08002f94": {
            "renaming": {
                "FUN_08002f94": "set_sysex_callback_08002f94",
                "this": "firmata_class_instance",
                "command": "sysex_command",
                "newFunction": "sysex_callback_function"
            },
            "code": "void __thiscall firmata::FirmataClass::set_sysex_callback_08002f94(FirmataClass *this, uint8_t command, sysexCallbackFunction newFunction)\n{\n  *(sysexCallbackFunction *)PTR_currentSysexCallback_08002f9c = newFunction;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f94",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "set_sysex_callback_08002f94"
        },
        "FUN_08008eec": {
            "renaming": {
                "FUN_08008eec": "print_08008eec",
                "this": "self",
                "b": "character",
                "base": "base",
                "sVar1": "result"
            },
            "code": "size_t __thiscall Print::print_08008eec(Print *self, uchar character, int base) {\n  size_t result = print_08008eec(self, (uint)character, base);\n  return result;\n}",
            "called": [
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008eec",
            "calling": [
                "printTo"
            ],
            "imported": false,
            "current_name": "print_08008eec"
        },
        "FUN_08001b48": {
            "renaming": {
                "FUN_08001b48": "initialize_firmata_08001b48",
                "*this": "firmata_instance",
                "PTR_Firmata_08001bc0": "PTR_Firmata_instance",
                "PTR_s__home_bo_p2im_p2im_real_firmware_08001bc4": "PTR_firmware_name_version",
                "DAT_08001bc8": "DAT_e0",
                "DAT_08001bcc": "DAT_90",
                "DAT_08001bd0": "DAT_c0",
                "DAT_08001bd4": "DAT_d0",
                "DAT_08001bd8": "DAT_f4",
                "DAT_08001bdc": "DAT_f5",
                "DAT_08001be0": "DAT_f0",
                "DAT_08001be4": "DAT_ff",
                "systemResetCallback": "system_reset_callback",
                "startForkserver": "start_forkserver"
            },
            "code": "void initialize_firmata_08001b48(void)\n{\n  FirmataClass* firmata_instance = (FirmataClass*) PTR_Firmata_08001bc0;\n  firmata_instance->setFirmwareNameAndVersion(PTR_Firmata_08001bc0, PTR_s__home_bo_p2im_p2im_real_firmware_08001bc4, 2, 5);\n  firmata_instance->attach(firmata_instance, 0xe0, DAT_08001bc8);\n  firmata_instance->attach(firmata_instance, 0x90, DAT_08001bcc);\n  firmata_instance->attach(firmata_instance, 0xc0, DAT_08001bd0);\n  firmata_instance->attach(firmata_instance, 0xd0, DAT_08001bd4);\n  firmata_instance->attach(firmata_instance, 0xf4, DAT_08001bd8);\n  firmata_instance->attach(firmata_instance, 0xf5, DAT_08001bdc);\n  firmata_instance->attach(firmata_instance, 0xf0, DAT_08001be0);\n  firmata_instance->attach(firmata_instance, 0xff, DAT_08001be4);\n  firmata_instance->begin(0xe100);\n  system_reset_callback();\n  start_forkserver(0);\n  return;\n}",
            "called": [
                "begin",
                "startForkserver",
                "attach",
                "attach",
                "setFirmwareNameAndVersion",
                "attach",
                "systemResetCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b48",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_firmata_08001b48"
        },
        "FUN_08005df4": {
            "renaming": {
                "FUN_08005df4": "reset_timer_08005df4",
                "htim": "timer",
                "pTVar1": "timer_instance",
                "HAL_TIM_STATE_BUSY": "TIMER_STATE_BUSY",
                "HAL_TIM_STATE_RESET": "TIMER_STATE_RESET",
                "HAL_UNLOCKED": "TIMER_UNLOCKED",
                "HAL_TIM_OC_MspDeInit": "deinitialize_timer_oc",
                "HAL_OK": "TIMER_OK",
                "CCER": "TIMER_CCER",
                "CR1": "TIMER_CR1"
            },
            "code": "HAL_StatusTypeDef_conflict reset_timer_08005df4(TIM_HandleTypeDef_conflict *timer)\n{\n  TIM_TypeDef_conflict *timer_instance;\n  timer->State = HAL_TIM_STATE_BUSY;\n  timer_instance = timer->Instance;\n  if (((timer_instance->CCER & 0x1111) == 0) && ((timer_instance->CCER & 0x444) == 0)) {\n    timer_instance->CR1 &= 0xfffffffe;\n  }\n  HAL_TIM_OC_MspDeInit(timer);\n  timer->State = HAL_TIM_STATE_RESET;\n  timer->Lock = HAL_UNLOCKED;\n  return HAL_OK;\n}",
            "called": [
                "HAL_TIM_OC_MspDeInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005df4",
            "calling": [
                "TimerPulseDeinit"
            ],
            "imported": false,
            "current_name": "reset_timer_08005df4"
        },
        "FUN_08009148": {
            "renaming": {
                "FUN_08009148": "execute_preinit_and_do_global_dtors_aux_fini_functions_08009148",
                "puVar1": "preinit_array_end",
                "iVar2": "preinit_array_size",
                "iVar3": "i",
                "puVar2": "dtors_array_start",
                "iVar4": "dtors_array_size"
            },
            "code": "void execute_preinit_and_do_global_dtors_aux_fini_functions_08009148(void)\n{\n  code **preinit_array_end = PTR___preinit_array_end_08009180;\n  int preinit_array_size = (int)PTR___preinit_array_end_08009184 - (int)PTR___preinit_array_end_08009180;\n  for (int i = 0; i < preinit_array_size >> 2; i++) {\n    (**(code **)(preinit_array_end + i * 4))();\n  }\n  _init();\n  code **dtors_array_start = PTR___preinit_array_end_08009188;\n  int dtors_array_size = (int)PTR___do_global_dtors_aux_fini_array_entry_0800918c - (int)PTR___preinit_array_end_08009188;\n  for (int i = 0; i < dtors_array_size >> 2; i++) {\n    (**(code **)(dtors_array_start + i * 4))();\n  }\n  return;\n}",
            "called": [
                "premain",
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009148",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "execute_preinit_and_do_global_dtors_aux_fini_functions_08009148"
        },
        "FUN_080099dc": {
            "renaming": {
                "FUN_080099dc": "process_input_080099dc",
                "param_1": "input_length",
                "param_2": "input_char",
                "param_3": "stream",
                "param_4": "setup",
                "iVar1": "status",
                "uVar2": "output_char",
                "puVar3": "buffer"
            },
            "code": "uint process_input_080099dc(int input_length, uint input_char, int *stream, undefined4 setup)\n{\n  int status;\n  uint output_char;\n  undefined *buffer;\n  if ((input_length != 0) && (*(int *)(input_length + 0x18) == 0)) {\n    __sinit();\n  }\n  if (stream == (int *)PTR___sf_fake_stdin_08009a74) {\n    stream = *(int **)(input_length + 4);\n  }\n  else if (stream == (int *)PTR___sf_fake_stdout_08009a78) {\n    stream = *(int **)(input_length + 8);\n  }\n  else if (stream == (int *)PTR___sf_fake_stderr_08009a7c) {\n    stream = *(int **)(input_length + 0xc);\n  }\n  stream[2] = stream[6];\n  output_char = (uint)*(ushort *)(stream + 3);\n  status = output_char << 0x1c;\n  if (((status < 0) && (output_char = stream[4], output_char != 0)) ||\n     (status = __swsetup_r(input_length,stream,status,output_char,setup), status == 0)) {\n    input_char = input_char & 0xff;\n    status = *stream - stream[4];\n    if ((status < stream[5]) || (status = _fflush_r(input_length,stream), status == 0)) {\n      stream[2] = stream[2] + -1;\n      buffer = (undefined *)*stream;\n      *stream = (int)(buffer + 1);\n      *buffer = (char)input_char;\n      if (status + 1 != stream[5]) {\n        if (-1 < (int)((uint)*(ushort *)(stream + 3) << 0x1f)) {\n          return input_char;\n        }\n        if (input_char != 10) {\n          return input_char;\n        }\n      }\n      status = _fflush_r(input_length,stream);\n      if (status == 0) {\n        return input_char;\n      }\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [
                "_fflush_r",
                "__swsetup_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080099dc",
            "calling": [
                "__sfputc_r"
            ],
            "imported": false,
            "current_name": "process_input_080099dc"
        },
        "FUN_08000c18": {
            "renaming": {
                "FUN_08000c18": "FUNC_08000c18"
            },
            "code": "\nvoid FUNC_08000c18(byte port,int value)\n\n{\n  byte bVar1;\n  bool bVar2;\n  uint32_t uVar3;\n  int iVar4;\n  uint uVar5;\n  uint uVar6;\n  byte portValue;\n  \n  uVar6 = (uint)port;\n  if ((uVar6 < 5) && (PTR_reportPINs_08000ebc[uVar6] = (char)value, value != 0)) {\n    bVar1 = PTR_portConfigInputs_08000ec0[uVar6];\n    uVar6 = (uVar6 & 0x1f) * 8;\n    if (uVar6 < 0x3c) {\n      if (PTR_digitalPin_08000ec4[uVar6] == NC) {\n        portValue = 0;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08000ec4[uVar6]);\n        if (uVar3 == 0) {\n          portValue = 0;\n        }\n        else {\n          uVar3 = pinNametoDigitalPin(PTR_digitalPin_08000ec4[uVar6]);\n          if (uVar3 == 1) {\n            portValue = 0;\n          }\n          else if ((bVar1 & 1) == 0) {\n            portValue = 0;\n          }\n          else {\n            iVar4 = digitalRead(uVar6);\n            if (iVar4 == 0) {\n              portValue = 0;\n            }\n            else {\n              portValue = 1;\n            }\n          }\n        }\n      }\n    }\n    else {\n      portValue = 0;\n    }\n    uVar5 = uVar6 + 1;\n    if (uVar5 < 0x3c) {\n      if (PTR_digitalPin_08000ec4[uVar5] == NC) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08000ec4[uVar5]);\n        if (uVar3 == 0) {\n          bVar2 = false;\n        }\n        else {\n          uVar3 = pinNametoDigitalPin(PTR_digitalPin_08000ec4[uVar5]);\n          if (uVar3 == 1) {\n            bVar2 = false;\n          }\n          else if ((bVar1 & 2) == 0) {\n            bVar2 = false;\n          }\n          else {\n            iVar4 = digitalRead(uVar5);\n            if (iVar4 == 0) {\n              bVar2 = false;\n            }\n            else {\n              bVar2 = true;\n            }\n          }\n        }\n      }\n    }\n    else {\n      bVar2 = false;\n    }\n    if (bVar2) {\n      portValue = portValue | 2;\n    }\n    uVar5 = uVar6 + 2;\n    if (uVar5 < 0x3c) {\n      if (PTR_digitalPin_08000ec4[uVar5] == NC) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08000ec4[uVar5]);\n        if (uVar3 == 0) {\n          bVar2 = false;\n        }\n        else {\n          uVar3 = pinNametoDigitalPin(PTR_digitalPin_08000ec4[uVar5]);\n          if (uVar3 == 1) {\n            bVar2 = false;\n          }\n          else if ((bVar1 & 4) == 0) {\n            bVar2 = false;\n          }\n          else {\n            iVar4 = digitalRead(uVar5);\n            if (iVar4 == 0) {\n              bVar2 = false;\n            }\n            else {\n              bVar2 = true;\n            }\n          }\n        }\n      }\n    }\n    else {\n      bVar2 = false;\n    }\n    if (bVar2) {\n      portValue = portValue | 4;\n    }\n    uVar5 = uVar6 + 3;\n    if (uVar5 < 0x3c) {\n      if (PTR_digitalPin_08000ec4[uVar5] == NC) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08000ec4[uVar5]);\n        if (uVar3 == 0) {\n          bVar2 = false;\n        }\n        else {\n          uVar3 = pinNametoDigitalPin(PTR_digitalPin_08000ec4[uVar5]);\n          if (uVar3 == 1) {\n            bVar2 = false;\n          }\n          else if ((bVar1 & 8) == 0) {\n            bVar2 = false;\n          }\n          else {\n            iVar4 = digitalRead(uVar5);\n            if (iVar4 == 0) {\n              bVar2 = false;\n            }\n            else {\n              bVar2 = true;\n            }\n          }\n        }\n      }\n    }\n    else {\n      bVar2 = false;\n    }\n    if (bVar2) {\n      portValue = portValue | 8;\n    }\n    uVar5 = uVar6 + 4;\n    if (uVar5 < 0x3c) {\n      if (PTR_digitalPin_08000ec4[uVar5] == NC) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08000ec4[uVar5]);\n        if (uVar3 == 0) {\n          bVar2 = false;\n        }\n        else {\n          uVar3 = pinNametoDigitalPin(PTR_digitalPin_08000ec4[uVar5]);\n          if (uVar3 == 1) {\n            bVar2 = false;\n          }\n          else if ((bVar1 & 0x10) == 0) {\n            bVar2 = false;\n          }\n          else {\n            iVar4 = digitalRead(uVar5);\n            if (iVar4 == 0) {\n              bVar2 = false;\n            }\n            else {\n              bVar2 = true;\n            }\n          }\n        }\n      }\n    }\n    else {\n      bVar2 = false;\n    }\n    if (bVar2) {\n      portValue = portValue | 0x10;\n    }\n    uVar5 = uVar6 + 5;\n    if (uVar5 < 0x3c) {\n      if (PTR_digitalPin_08000ec4[uVar5] == NC) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08000ec4[uVar5]);\n        if (uVar3 == 0) {\n          bVar2 = false;\n        }\n        else {\n          uVar3 = pinNametoDigitalPin(PTR_digitalPin_08000ec4[uVar5]);\n          if (uVar3 == 1) {\n            bVar2 = false;\n          }\n          else if ((bVar1 & 0x20) == 0) {\n            bVar2 = false;\n          }\n          else {\n            iVar4 = digitalRead(uVar5);\n            if (iVar4 == 0) {\n              bVar2 = false;\n            }\n            else {\n              bVar2 = true;\n            }\n          }\n        }\n      }\n    }\n    else {\n      bVar2 = false;\n    }\n    if (bVar2) {\n      portValue = portValue | 0x20;\n    }\n    uVar5 = uVar6 + 6;\n    if (uVar5 < 0x3c) {\n      if (PTR_digitalPin_08000ec4[uVar5] == NC) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08000ec4[uVar5]);\n        if (uVar3 == 0) {\n          bVar2 = false;\n        }\n        else {\n          uVar3 = pinNametoDigitalPin(PTR_digitalPin_08000ec4[uVar5]);\n          if (uVar3 == 1) {\n            bVar2 = false;\n          }\n          else if ((bVar1 & 0x40) == 0) {\n            bVar2 = false;\n          }\n          else {\n            iVar4 = digitalRead(uVar5);\n            if (iVar4 == 0) {\n              bVar2 = false;\n            }\n            else {\n              bVar2 = true;\n            }\n          }\n        }\n      }\n    }\n    else {\n      bVar2 = false;\n    }\n    if (bVar2) {\n      portValue = portValue | 0x40;\n    }\n    uVar6 = uVar6 + 7;\n    if (uVar6 < 0x3c) {\n      if (PTR_digitalPin_08000ec4[uVar6] == NC) {\n        bVar2 = false;\n      }\n      else {\n        uVar3 = pinNametoDigitalPin(PTR_digitalPin_08000ec4[uVar6]);\n        if (uVar3 == 0) {\n          bVar2 = false;\n        }\n        else {\n          uVar3 = pinNametoDigitalPin(PTR_digitalPin_08000ec4[uVar6]);\n          if (uVar3 == 1) {\n            bVar2 = false;\n          }\n          else if ((bVar1 & 0x80) == 0) {\n            bVar2 = false;\n          }\n          else {\n            iVar4 = digitalRead(uVar6);\n            if (iVar4 == 0) {\n              bVar2 = false;\n            }\n            else {\n              bVar2 = true;\n            }\n          }\n        }\n      }\n    }\n    else {\n      bVar2 = false;\n    }\n    if (bVar2) {\n      portValue = portValue | 0x80;\n    }\n    outputPort(port,portValue,'\\x01');\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "digitalRead",
                "pinNametoDigitalPin",
                "outputPort"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000c18",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_08000c18"
        },
        "FUN_08009024": {
            "renaming": {
                "FUN_08009024": "handle_gpio_exti_interrupt_08009024"
            },
            "code": "void handle_gpio_exti_interrupt_08009024(void)\n{\n    HAL_GPIO_EXTI_IRQHandler(1);\n    return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009024",
            "calling": [],
            "imported": false,
            "current_name": "handle_gpio_exti_interrupt_08009024"
        },
        "FUN_080064cc": {
            "renaming": {
                "FUN_080064cc": "send_data_080064cc",
                "*huart": "*uart",
                "uVar1": "data_length",
                "pbVar2": "data_ptr"
            },
            "code": "HAL_StatusTypeDef_conflict send_data_080064cc(UART_HandleTypeDef *uart)\n{\n  uint16_t data_length;\n  uint8_t *data_ptr;\n  \n  if (uart->gState != HAL_UART_STATE_BUSY_TX) {\n    return HAL_BUSY;\n  }\n  \n  data_length = (uart->Init).WordLength;\n  data_ptr = uart->pTxBuffPtr;\n  \n  if (data_length == 0x1000) {\n    uint16_t data = *(uint16_t *)data_ptr & 0x1ff;\n    uart->Instance->DR = data;\n    if ((uart->Init).Parity == 0) {\n      data_ptr += 2;\n    }\n    else {\n      data_ptr++;\n    }\n  }\n  else {\n    uint8_t data = *data_ptr;\n    data_ptr++;\n    uart->Instance->DR = (uint)data;\n  }\n  \n  uart->TxXferCount--;\n  \n  if (uart->TxXferCount == 0) {\n    uart->Instance->CR1 &= 0xffffff7f;\n    uart->Instance->CR1 |= 0x40;\n    return HAL_OK;\n  }\n  \n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064cc",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "send_data_080064cc"
        },
        "FUN_08008058": {
            "renaming": {
                "FUN_08008058": "handle_i2c_event_interrupt_08008058",
                "PTR_i2c_handles_08008064": "PTR_i2c_handles",
                "i2c_handle": "i2c_handle",
                "HAL_I2C_EV_IRQHandler": "handle_i2c_event",
                "I2C_HandleTypeDef_conflict": "I2C_HandleTypeDef"
            },
            "code": "void handle_i2c_event_interrupt_08008058(void)\n{\n  I2C_HandleTypeDef* i2c_handle = *(I2C_HandleTypeDef_conflict **)(PTR_i2c_handles_08008064_08008064 + 4);\n  HAL_I2C_EV_IRQHandler(i2c_handle);\n  return;\n}",
            "called": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008058",
            "calling": [],
            "imported": false,
            "current_name": "handle_i2c_event_interrupt_08008058"
        },
        "FUN_08004ac2": {
            "renaming": {
                "FUN_08004ac2": "check_i2c_address_match_08004ac2",
                "hi2c": "i2c_handle",
                "AddrMatchCode": "address_match_code",
                "hi2c->Instance->SR2": "i2c_handle->Instance->SR2",
                "hi2c->Init": "i2c_handle->Init",
                "(hi2c->Instance->SR2 & 0x80) == 0": "(i2c_handle->Instance->SR2 & 0x80) == 0",
                "*(uint16_t *)&(hi2c->Init).OwnAddress1": "*(uint16_t *)&(i2c_handle->Init).OwnAddress1",
                "*(uint16_t *)&(hi2c->Init).OwnAddress2": "*(uint16_t *)&(i2c_handle->Init).OwnAddress2",
                "HAL_I2C_AddrCallback": "HAL_I2C_AddrCallback",
                "(hi2c->Instance->SR2 & 4) == 0": "(i2c_handle->Instance->SR2 & 4) == 0",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef_conflict check_i2c_address_match_08004ac2(I2C_HandleTypeDef_conflict *i2c_handle)\n{\n  uint16_t address_match_code;\n  if ((i2c_handle->Instance->SR2 & 0x80) == 0) {\n    address_match_code = *(uint16_t *)&(i2c_handle->Init).OwnAddress1;\n  }\n  else {\n    address_match_code = *(uint16_t *)&(i2c_handle->Init).OwnAddress2;\n  }\n  HAL_I2C_AddrCallback(i2c_handle,(i2c_handle->Instance->SR2 & 4) == 0,address_match_code);\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_AddrCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ac2",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "check_i2c_address_match_08004ac2"
        },
        "FUN_08006ca8": {
            "renaming": {
                "FUN_08006ca8": "set_gpio_mode_08006ca8",
                "hadc": "adc_handle",
                "GPIOx": "gpio_port",
                "tmpreg": "pin_mask",
                "tmpreg_1": "unused",
                "GPIO_InitStruct": "gpio_init_struct",
                "DAT_08006d14": "ADC1",
                "DAT_08006d18": "ADC2",
                "puVar1": "current_pin",
                "PTR_g_current_pin_08006d1c": "current_gpio_pin",
                "*(uint *)(DAT_08006d20 + 0x18)": "*(uint *)(g_adc_gpio_pin_mask + 0x18)"
            },
            "code": "void set_gpio_mode_08006ca8(ADC_HandleTypeDef *adc_handle)\n{\n  uint32_t pin_mask;\n  GPIO_TypeDef *gpio_port;\n  GPIO_InitTypeDef gpio_init_struct;\n  \n  if (adc_handle->Instance == DAT_08006d14) {\n    *(uint *)(DAT_08006d20 + 0x18) = *(uint *)(DAT_08006d20 + 0x18) | 0x200;\n  }\n  else if (adc_handle->Instance == DAT_08006d18) {\n    *(uint *)(DAT_08006d20 + 0x18) = *(uint *)(DAT_08006d20 + 0x18) | 0x400;\n  }\n  \n  uint8_t *current_pin = PTR_g_current_pin_08006d1c;\n  gpio_port = set_gpio_port_clock((uint)((int)(char)*current_pin << 0x18) >> 0x1c);\n  pin_mask = 1 << (*current_pin & 0xf) & 0xffff;\n  gpio_init_struct.Pin = pin_mask;\n  gpio_init_struct.Mode = GPIO_MODE_ANALOG;\n  gpio_init_struct.Pull = GPIO_NOPULL;\n  HAL_GPIO_Init(gpio_port,&gpio_init_struct);\n  return;\n}",
            "called": [
                "HAL_GPIO_Init",
                "set_GPIO_Port_Clock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ca8",
            "calling": [
                "HAL_ADC_Init"
            ],
            "imported": false,
            "current_name": "set_gpio_mode_08006ca8"
        },
        "FUN_0800937c": {
            "renaming": {
                "FUN_0800937c": "FUNC_0800937c"
            },
            "code": "\nint FUNC_0800937c(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  bool bVar1;\n  undefined *puVar2;\n  int iVar3;\n  void *pvVar4;\n  int *piVar5;\n  byte *pbVar6;\n  byte *pbVar7;\n  int unaff_r9;\n  int iVar8;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    __sinit();\n  }\n  if (param_2 == PTR___sf_fake_stdin_08009588) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR___sf_fake_stdout_08009590) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR___sf_fake_stderr_08009594) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar8 = __swsetup_r(param_1,param_2), iVar8 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar6 = param_3;\nLAB_080093be:\n  pbVar7 = pbVar6;\n  if (*pbVar7 != 0) goto LAB_08009474;\n  goto LAB_080093c8;\nLAB_08009474:\n  pbVar6 = pbVar7 + 1;\n  if (*pbVar7 != 0x25) goto LAB_080093be;\nLAB_080093c8:\n  iVar8 = (int)pbVar7 - (int)param_3;\n  if (iVar8 != 0) {\n    iVar3 = __sfputs_r(param_1,param_2,param_3,iVar8);\n    if (iVar3 == -1) {\nLAB_08009568:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar8;\n  }\n  if (*pbVar7 == 0) goto LAB_08009568;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar6 = pbVar7 + 1;\n  while( true ) {\n    pvVar4 = memchr(PTR_s___0__0800958c,(uint)*pbVar6,5);\n    puVar2 = PTR_DAT_08009598;\n    param_3 = pbVar6 + 1;\n    if (pvVar4 == (void *)0x0) break;\n    local_88 = 1 << ((int)pvVar4 - (int)PTR_s___0__0800958c & 0xffU) | local_88;\n    pbVar6 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar6 == 0x2a) {\n    piVar5 = local_8c + 1;\n    iVar8 = *local_8c;\n    local_8c = piVar5;\n    if (-1 < iVar8) goto LAB_08009498;\n    local_7c = -iVar8;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar1 = false;\n    iVar8 = local_7c;\n    param_3 = pbVar6;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar8 = iVar8 * 10 + (*param_3 - 0x30);\n      bVar1 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar1) {\nLAB_08009498:\n      local_7c = iVar8;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      param_3 = param_3 + 2;\n      piVar5 = local_8c + 1;\n      local_84 = *local_8c;\n      local_8c = piVar5;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n    }\n    else {\n      bVar1 = false;\n      iVar8 = 0;\n      local_84 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar8 = iVar8 * 10 + (*param_3 - 0x30);\n        bVar1 = true;\n      }\n      if (bVar1) {\n        local_84 = iVar8;\n      }\n    }\n  }\n  pvVar4 = memchr(PTR_DAT_08009598,(uint)*param_3,3);\n  if (pvVar4 != (void *)0x0) {\n    param_3 = param_3 + 1;\n    local_88 = local_88 | 0x40 << ((int)pvVar4 - (int)puVar2 & 0xffU);\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  pvVar4 = memchr(PTR_s_efgEFG_0800959c,(uint)local_70,6);\n  if (pvVar4 == (void *)0x0) {\n    iVar8 = _printf_i(param_1,&local_88,param_2,DAT_080095a4,&local_8c);\n  }\n  else {\n    iVar8 = param_1;\n    if (DAT_080095a0 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar8 = unaff_r9;\n      goto LAB_0800951a;\n    }\n  }\n  if (iVar8 == -1) goto LAB_08009568;\nLAB_0800951a:\n  local_74 = local_74 + iVar8;\n  pbVar6 = param_3;\n  unaff_r9 = iVar8;\n  goto LAB_080093be;\n}\n\n",
            "called": [
                "memchr",
                "__sfputs_r",
                "__swsetup_r",
                "_printf_i",
                "__sinit"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800937c",
            "calling": [
                "fiprintf",
                "iprintf"
            ],
            "imported": false,
            "current_name": "FUNC_0800937c"
        },
        "FUN_08000214": {
            "renaming": {
                "FUN_08000214": "write_to_pin_08000214",
                "pin": "pin_number",
                "value": "pin_value",
                "bVar1": "is_pin_analog",
                "bVar2": "pin_mode",
                "_Var3": "is_pin_valid",
                "ulPin": "pin_index",
                "uVar4": "digital_pin",
                "PTR_Firmata_080002d8": "firmata_instance",
                "PTR_digitalPin_080002dc": "digital_pin_map",
                "NC": "NO_CONNECTION",
                "analogWrite": "write_analog_pin",
                "pinNametoDigitalPin": "get_digital_pin_from_name",
                "pin_in_pinmap": "is_pin_in_pinmap",
                "PinMap_conflict": "PinMap_conflict",
                "PTR_PinMap_PWM_080002e8": "PWM_PinMap_conflict",
                "PTR_servoPinMap_080002e0": "servo_pin_map",
                "PTR_servos_080002e4": "servos_array",
                "Servo::write": "write_to_servo"
            },
            "code": "void write_to_pin_08000214(byte pin, int value)\n{\n    bool is_pin_valid;\n    byte pin_mode;\n    _Bool is_pin_analog;\n    uint digital_pin;\n    uint8_t* servo_pins;\n    uint servo_index;\n    uint32_t pin_conflict;\n    uint pin_index = (uint)pin;\n    if (pin_index > 0x3b) {\n        return;\n    }\n    pin_mode = firmata::FirmataClass::getPinMode((FirmataClass *)PTR_Firmata_080002d8, pin);\n    if (pin_mode == '\\x03') {\n        if (pin_index < 0x3c) {\n            if (PTR_digitalPin_080002dc[pin_index] == NC) {\n                is_pin_valid = false;\n            }\n            else {\n                digital_pin = pinNametoDigitalPin(PTR_digitalPin_080002dc[pin_index]);\n                if (digital_pin == 0 || digital_pin == 1) {\n                    is_pin_valid = false;\n                }\n                else {\n                    pin_conflict = (uint32_t) pin_in_pinmap(PTR_digitalPin_080002dc[pin_index], (PinMap_conflict *)PTR_PinMap_PWM_080002e8);\n                    is_pin_valid = (bool) pin_conflict;\n                }\n            }\n        }\n        else {\n            is_pin_valid = false;\n        }\n        if (is_pin_valid) {\n            analogWrite(pin_index, value);\n        }\n        firmata::FirmataClass::setPinState((FirmataClass *)PTR_Firmata_080002d8, pin, value);\n    }\n    else if (pin_mode == '\\x04') {\n        if (pin_index < 0x3c) {\n            if (PTR_digitalPin_080002dc[pin_index] == NC) {\n                is_pin_analog = false;\n            }\n            else {\n                digital_pin = pinNametoDigitalPin(PTR_digitalPin_080002dc[pin_index]);\n                if (digital_pin == 0 || digital_pin == 1) {\n                    is_pin_analog = false;\n                }\n                else {\n                    is_pin_analog = true;\n                }\n            }\n        }\n        else {\n            is_pin_analog = false;\n        }\n        if (is_pin_analog) {\n            servo_pins = PTR_servoPinMap_080002e0;\n            servo_index = (uint)(byte)servo_pins[pin_index] * 3;\n            Servo::write((Servo *)(PTR_servos_080002e4 + servo_index), value);\n        }\n        firmata::FirmataClass::setPinState((FirmataClass *)PTR_Firmata_080002d8, pin, value);\n        return;\n    }\n    return;\n}",
            "called": [
                "pin_in_pinmap",
                "pinNametoDigitalPin",
                "setPinState",
                "analogWrite",
                "getPinMode",
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000214",
            "calling": [
                "sysexCallback"
            ],
            "imported": false,
            "current_name": "write_to_pin_08000214"
        },
        "FUN_08003724": {
            "renaming": {
                "FUN_08003724": "set_flag_and_init_msp_08003724",
                "DAT_08003744": "data_register",
                "FUN_08003724Tick": "call_tick_function_with_parameter"
            },
            "code": "HAL_StatusTypeDef_conflict set_flag_and_init_msp_08003724(void) \n{\n  *DAT_08003744 = *DAT_08003744 | 0x10;\n  HAL_NVIC_SetPriorityGrouping(3);\n  call_tick_function_with_parameter(0xf);\n  HAL_MspInit();\n  return HAL_OK;\n}",
            "called": [
                "HAL_InitTick",
                "HAL_MspInit",
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003724",
            "calling": [
                "hw_config_init"
            ],
            "imported": false,
            "current_name": "set_flag_and_init_msp_08003724"
        },
        "FUN_08005bb8": {
            "renaming": {
                "FUN_08005bb8": "calculate_clock_frequency_08005bb8",
                "PeriphClk": "peripheral_clk",
                "uVar1": "calculated_frequency",
                "uVar2": "temp_variable",
                "aPredivFactorTable": "prediv_factor_table",
                "aPLLMULFactorTable": "pll_mul_factor_table"
            },
            "code": "uint32_t calculate_clock_frequency_08005bb8(uint32_t peripheral_clk)\n{\n    uint32_t calculated_frequency;\n    uint8_t prediv_factor_table[2];\n    uint8_t pll_mul_factor_table[16];\n\n    pll_mul_factor_table[0] = *(undefined4 *)(PTR_DAT_08005ca0);\n    pll_mul_factor_table[1] = *(undefined4 *)(PTR_DAT_08005ca0 + 4);\n    pll_mul_factor_table[2] = *(undefined4 *)(PTR_DAT_08005ca0 + 8);\n    prediv_factor_table[0] = *(uint8_t (*) [2])(PTR_DAT_08005ca0 + 0x10);\n    prediv_factor_table[1] = *(uint8_t (*) [2])(PTR_DAT_08005ca0 + 0x11);\n\n    if (peripheral_clk == 2)\n    {\n        calculated_frequency = HAL_RCC_GetPCLK2Freq() / ((((DAT_08005ca4[1] << 0x10) >> 0x1e) + 1) * 2);\n    }\n    else if (peripheral_clk == 0x10)\n    {\n        if ((*DAT_08005ca4 & 0x1000000) == 0)\n        {\n            calculated_frequency = 0;\n        }\n        else\n        {\n            uint32_t uVar2 = DAT_08005cb0;\n            if ((DAT_08005ca4[1] & 0x10000) != 0)\n            {\n                uVar2 = DAT_08005ca8 / prediv_factor_table[-((int)(DAT_08005ca4[1] << 0xe) >> 0x1f)];\n            }\n            calculated_frequency = uVar2 * pll_mul_factor_table[(DAT_08005ca4[1] << 10) >> 0x1c];\n            if ((DAT_08005ca4[1] & 0x400000) == 0)\n            {\n                calculated_frequency = (uint32_t)((ulonglong)DAT_08005cac * (ulonglong)(calculated_frequency * 2) >> 0x21);\n            }\n        }\n    }\n    else if (peripheral_clk == 1)\n    {\n        if ((DAT_08005ca4[8] & 0x302) == 0x102)\n        {\n            calculated_frequency = 0x8000;\n        }\n        else\n        {\n            uint32_t uVar2 = DAT_08005ca4[8] & 0x300;\n            if ((uVar2 == 0x200) && ((DAT_08005ca4[9] & 2) != 0))\n            {\n                calculated_frequency = 32000;\n            }\n            else if (uVar2 == 0x300)\n            {\n                if ((*DAT_08005ca4 & 0x20000) == 0)\n                {\n                    calculated_frequency = 0;\n                }\n                else\n                {\n                    calculated_frequency = 0xf424;\n                }\n            }\n            else\n            {\n                calculated_frequency = 0;\n            }\n        }\n    }\n    else\n    {\n        calculated_frequency = 0;\n    }\n    return calculated_frequency;\n}",
            "called": [
                "HAL_RCC_GetPCLK2Freq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bb8",
            "calling": [
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_PollForConversion"
            ],
            "imported": false,
            "current_name": "calculate_clock_frequency_08005bb8"
        },
        "FUN_08002f0a": {
            "renaming": {
                "FUN_08002f0a": "send_command_08002f0a",
                "bytec": "num_bytes",
                "bytev": "data_bytes"
            },
            "code": "void __thiscall firmata::FirmataClass::send_command_08002f0a(byte command, byte num_bytes, byte *data_bytes) {\n  FirmataMarshaller::send_command_08002f0a(&marshaller, command, (uint)num_bytes, data_bytes);\n  return;\n}",
            "called": [
                "sendSysex"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f0a",
            "calling": [
                "readAndReportData"
            ],
            "imported": false,
            "current_name": "send_command_08002f0a"
        },
        "FUN_08002634": {
            "renaming": {
                "FUN_08002634": "set_servo_position_08002634",
                "this": "this_servo",
                "pin": "pin_number",
                "uVar1": "position"
            },
            "code": "uint8_t __thiscall Servo::set_servo_position_08002634(Servo *this_servo, int pin_number)\n{\n  uint8_t position;\n  position = set_servo_position_08002634(this_servo, pin_number, 0x220, 0x960);\n  return position;\n}",
            "called": [
                "attach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002634",
            "calling": [
                "attachServo"
            ],
            "imported": false,
            "current_name": "set_servo_position_08002634"
        },
        "FUN_080063c0": {
            "renaming": {
                "FUN_080063c0": "disable_timer_channel_080063c0",
                "htim": "timer_handle",
                "Channel": "channel",
                "pTVar1": "timer_instance",
                "DAT_0800641c": "instance_ptr_0800641c"
            },
            "code": "HAL_StatusTypeDef_conflict disable_timer_channel_080063c0(TIM_HandleTypeDef_conflict *timer_handle, uint32_t channel) {\n  TIM_TypeDef_conflict *timer_instance = timer_handle->Instance;\n  TIM_CCxChannelCmd(timer_instance, channel, 0);\n  if (((timer_instance == DAT_0800641c) && ((timer_instance->CCER & 0x1111) == 0)) && ((timer_instance->CCER & 0x444) == 0)) {\n    timer_instance->BDTR &= 0xffff7fff;\n  }\n  if (((timer_instance->CCER & 0x1111) == 0) && ((timer_instance->CCER & 0x444) == 0)) {\n    timer_instance->CR1 &= 0xfffffffe;\n  }\n  timer_handle->State = HAL_TIM_STATE_READY;\n  return HAL_OK;\n}",
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080063c0",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "disable_timer_channel_080063c0"
        },
        "FUN_0800274c": {
            "renaming": {
                "FUN_0800274c": "read_byte_from_rx_buffer_0800274c",
                "this": "this",
                "PTR_rxBufferIndex_08002768": "PTR_rxBufferIndex_08002768",
                "PTR_rxBufferLength_0800276c": "PTR_rxBufferLength_0800276c",
                "PTR_rxBuffer_08002770": "PTR_rxBuffer_08002770"
            },
            "code": "int __thiscall TwoWire::read_byte_from_rx_buffer_0800274c(TwoWire *this)\n{\n  int rx_buffer_index = *(int*)PTR_rxBufferIndex_08002768;\n  int rx_buffer_length = *(int*)PTR_rxBufferLength_0800276c;\n  if (rx_buffer_index < rx_buffer_length)\n  {\n    int* rx_buffer = *(int*)PTR_rxBuffer_08002770;\n    return *(char*)(rx_buffer + rx_buffer_index);\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800274c",
            "calling": [],
            "imported": false,
            "current_name": "read_byte_from_rx_buffer_0800274c"
        },
        "FUN_080098d8": {
            "renaming": {
                "FUN_080098d8": "format_string_080098d8",
                "__format": "format",
                "iVar1": "impure_ptr",
                "pcVar2": "format_string",
                "in_r1": "unused_1",
                "in_r2": "unused_2",
                "in_r3": "unused_3",
                "uStack_c": "arg_1",
                "uStack_8": "arg_2",
                "uStack_4": "arg_3"
            },
            "code": "int format_string_080098d8(char* format, ...) {\n  int impure_ptr = *(int*)PTR__impure_ptr_08009904;\n  char* format_string_080098d8 = format;\n  undefined4 in_r1 = 0;\n  undefined4 in_r2 = 0;\n  undefined4 in_r3 = 0;\n  undefined4 uStack_c = in_r1;\n  undefined4 uStack_8 = in_r2;\n  undefined4 uStack_4 = in_r3;\n  if ((impure_ptr != 0) && (*(int*)(impure_ptr + 0x18) == 0)) {\n    __sinit(impure_ptr);\n  }\n  int result = _vfformat_string_080098d8_r(impure_ptr, *(undefined4*)(impure_ptr + 8), format, &uStack_c, format_string_080098d8, &uStack_c);\n  return result;\n}",
            "called": [
                "_vfiprintf_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080098d8",
            "calling": [
                "getTimerClkFreq",
                "getTimerIrq",
                "getTimerClkSrc",
                "uart_init",
                "i2c_custom_init"
            ],
            "imported": false,
            "current_name": "format_string_080098d8"
        },
        "FUN_08009270": {
            "renaming": {
                "FUN_08009270": "allocate_memory_block_08009270",
                "param_1": "error_code",
                "param_2": "block_size",
                "puVar1": "sbrk_start_pointer",
                "uVar2": "new_sbrk_start",
                "puVar3": "current_block_pointer",
                "iVar4": "sbrk_error_code",
                "puVar5": "previous_block_pointer",
                "uVar6": "block_remaining_size",
                "puVar7": "next_block_pointer",
                "uVar8": "adjusted_block_size",
                "block_header_size": "block_header_size",
                "minimum_block_size": "minimum_block_size"
            },
            "code": "uint allocate_memory_block_08009270(undefined4 *error_code, uint block_size)\n{\n    uint *current_block_pointer;\n    uint *previous_block_pointer;\n    uint adjusted_block_size;\n    uint block_header_size = 8;\n    uint minimum_block_size = 0xc;\n\n    adjusted_block_size = (block_size + 3 & 0xfffffffc) + block_header_size;\n    if (adjusted_block_size < minimum_block_size) {\n        adjusted_block_size = minimum_block_size;\n    }\n    if (((int)adjusted_block_size < 0) || (adjusted_block_size < block_size)) {\n        *error_code = minimum_block_size;\n    }\n    else {\n        __malloc_lock();\n        current_block_pointer = *(uint **)PTR___malloc_free_list_08009324;\n        previous_block_pointer = current_block_pointer;\n        while (current_block_pointer != (uint *)0x0) {\n            uint block_remaining_size = *current_block_pointer - adjusted_block_size;\n            if (-1 < (int)block_remaining_size) {\n                if (block_remaining_size < minimum_block_size) {\n                    if (previous_block_pointer == current_block_pointer) {\n                        uint next_block_pointer = current_block_pointer[1];\n                        *(uint *)PTR___malloc_free_list_08009324 = next_block_pointer;\n                    }\n                    else {\n                        uint next_block_pointer = current_block_pointer[1];\n                    }\n                    if (previous_block_pointer != current_block_pointer) {\n                        previous_block_pointer[1] = next_block_pointer;\n                        previous_block_pointer = current_block_pointer;\n                    }\n                }\n                else {\n                    *current_block_pointer = block_remaining_size;\n                    *(uint *)((int)current_block_pointer + block_remaining_size) = adjusted_block_size;\n                    previous_block_pointer = (uint *)((int)current_block_pointer + block_remaining_size);\n                }\n                goto END_ALLOC;\n            }\n            previous_block_pointer = current_block_pointer;\n            current_block_pointer = (uint *)current_block_pointer[1];\n        }\n        if (*(int *)PTR___malloc_sbrk_start_08009328 == 0) {\n            uint new_sbrk_start = _sbrk_r(error_code);\n            *(undefined4 *)PTR___malloc_sbrk_start_08009328 = new_sbrk_start;\n        }\n        current_block_pointer = (uint *)_sbrk_r(error_code, adjusted_block_size);\n        if ((current_block_pointer != (uint *)0xffffffff) &&\n            ((previous_block_pointer = (uint *)((int)current_block_pointer + 3U & 0xfffffffc), current_block_pointer == previous_block_pointer ||\n             (_sbrk_r(error_code,(int)previous_block_pointer - (int)current_block_pointer) != -1)))) {\n            *previous_block_pointer = adjusted_block_size;\n            END_ALLOC:\n            __malloc_unlock(error_code);\n            uint aligned_block_pointer = (int)previous_block_pointer + 0xbU & 0xfffffff8;\n            int block_footer_size = aligned_block_pointer - (int)(previous_block_pointer + 1);\n            if (block_footer_size != 0) {\n                *(int *)((int)previous_block_pointer + block_footer_size) = -block_footer_size;\n                return aligned_block_pointer;\n            }\n            return aligned_block_pointer;\n        }\n        *error_code = minimum_block_size;\n        __malloc_unlock(error_code);\n    }\n    return 0;\n}",
            "called": [
                "__malloc_lock",
                "_sbrk_r",
                "__malloc_unlock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009270",
            "calling": [
                "__smakebuf_r",
                "malloc",
                "_realloc_r",
                "__sfmoreglue"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08009270"
        },
        "FUN_08009038": {
            "renaming": {
                "FUN_08009038": "handle_gpio_exti_interrupt_08009038"
            },
            "code": "void handle_gpio_exti_interrupt_08009038(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(4);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009038",
            "calling": [],
            "imported": false,
            "current_name": "handle_gpio_exti_interrupt_08009038"
        },
        "FUN_08005aa4": {
            "renaming": {
                "FUN_08005aa4": "configure_peripheral_clock_08005aa4",
                "PeriphClkInit": "peripheral_clk_init",
                "iVar1": "i",
                "puVar2": "data_ptr",
                "uVar3": "tick_start",
                "uVar4": "tick_current",
                "uVar5": "clock_selection",
                "bVar6": "is_bit_set",
                "tmpreg": "unused"
            },
            "code": "HAL_StatusTypeDef_conflict configure_peripheral_clock_08005aa4(RCC_PeriphCLKInitTypeDef_conflict *peripheral_clk_init) {\n    int i;\n    uint32_t *data_ptr;\n    uint32_t tick_start;\n    uint32_t tick_current;\n    uint clock_selection;\n    bool is_bit_set;\n\n    if ((peripheral_clk_init->PeriphClockSelection & 1) != 0) {\n        is_bit_set = (*(uint *)(PTR_DAT_08005bac + 0x1c) & 0x10000000) == 0;\n        if (is_bit_set) {\n            *(uint *)(PTR_DAT_08005bac + 0x1c) |= 0x10000000;\n        }\n        if ((*PTR_DAT_08005bb0 & 0x100) == 0) {\n            *PTR_DAT_08005bb0 |= 0x100;\n            tick_start = HAL_GetTick();\n            while ((*PTR_DAT_08005bb0 & 0x100) == 0) {\n                tick_current = HAL_GetTick();\n                if (100 < tick_current - tick_start) {\n                    return HAL_TIMEOUT;\n                }\n            }\n        }\n        data_ptr = PTR_DAT_08005bb4;\n        i = PTR_DAT_08005bac;\n        clock_selection = *(uint *)(PTR_DAT_08005bac + 0x20) & 0x300;\n        if ((clock_selection != 0) && (clock_selection != (peripheral_clk_init->RTCClockSelection & 0x300))) {\n            clock_selection = *(uint *)(PTR_DAT_08005bac + 0x20);\n            *PTR_DAT_08005bb4 = 1;\n            *data_ptr = 0;\n            *(uint *)(i + 0x20) = clock_selection & 0xfffffcff;\n            if ((clock_selection & 1) != 0) {\n                tick_start = HAL_GetTick();\n                while ((*(uint *)(PTR_DAT_08005bac + 0x20) & 2) == 0) {\n                    tick_current = HAL_GetTick();\n                    if (5000 < tick_current - tick_start) {\n                        return HAL_TIMEOUT;\n                    }\n                }\n            }\n        }\n        i = PTR_DAT_08005bac;\n        *(uint *)(PTR_DAT_08005bac + 0x20) = *(uint *)(PTR_DAT_08005bac + 0x20) & 0xfffffcff | peripheral_clk_init->RTCClockSelection;\n        if (is_bit_set) {\n            *(uint *)(i + 0x1c) &= 0xefffffff;\n        }\n    }\n    if ((peripheral_clk_init->PeriphClockSelection & 2) != 0) {\n        *(uint *)(PTR_DAT_08005bac + 4) &= 0xffff3fff | peripheral_clk_init->AdcClockSelection;\n    }\n    if ((peripheral_clk_init->PeriphClockSelection & 0x10) != 0) {\n        *(uint *)(PTR_DAT_08005bac + 4) &= 0xffbfffff | peripheral_clk_init->UsbClockSelection;\n    }\n    return HAL_OK;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005aa4",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "configure_peripheral_clock_08005aa4"
        },
        "FUN_08008068": {
            "renaming": {
                "FUN_08008068": "handle_i2c_error_interrupt_08008068",
                "PTR_i2c_handles_08008074": "PTR_i2c_handles",
                "I2C_HandleTypeDef_conflict": "i2c_handle_ptr",
                "HAL_I2C_ER_IRQHandler": "handle_i2c_error",
                "*": "_ptr"
            },
            "code": "void handle_i2c_error_interrupt_08008068(void)\n{\n  I2C_HandleTypeDef_conflict* i2c_handle_ptr = *(I2C_HandleTypeDef_conflict**)(PTR_i2c_handles_08008074_08008074 + 4);\n  HAL_I2C_ER_IRQHandler(i2c_handle_ptr);\n  return;\n}",
            "called": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008068",
            "calling": [],
            "imported": false,
            "current_name": "handle_i2c_error_interrupt_08008068"
        },
        "FUN_08002400": {
            "renaming": {
                "FUN_08002400": "has_servo_reached_target_08002400",
                "timer": "timer16_Sequence_t",
                "uVar1": "servo_index"
            },
            "code": "bool has_servo_reached_target_08002400(timer16_Sequence_t timer) {\n    uint8_t servo_index = 0;\n    while (servo_index <= 0xB) {\n        uint8_t servo_address = PTR_servos_08002428[((uint)timer * 0xC + servo_index) * 8];\n        if ((servo_address & 0x40) != 0) {\n            return true;\n        }\n        servo_index++;\n    }\n    return false;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002400",
            "calling": [
                "attach",
                "detach"
            ],
            "imported": false,
            "current_name": "has_servo_reached_target_08002400"
        },
        "FUN_08000588": {
            "renaming": {
                "FUN_08000588": "detach_servo_on_pin_08000588",
                "pin": "pin",
                "puVar3": "servo_pin_map_ptr",
                "cVar1": "servo_count",
                "cVar2": "current_pin"
            },
            "code": "void detach_servo_on_pin_08000588(byte pin)\\n{\\n  char current_pin;\\n  char servo_count;\\n  undefined *servo_pin_map_ptr;\\n  servo_pin_map_ptr = PTR_servoPinMap_080005cc;\\n  Servo::detach((Servo *)(PTR_servos_080005d0 + (uint)(byte)PTR_servoPinMap_080005cc[pin] * 3));\\n  current_pin = servo_pin_map_ptr[pin];\\n  servo_count = *PTR_servoCount_080005d4;\\n  if ((current_pin == servo_count) && (servo_count != \"\\0\")) {\\n    *PTR_servoCount_080005d4 = servo_count + -1;\\n  }\\n  else if (servo_count != \"\\0\") {\\n    char detached_servo_count = *PTR_detachedServoCount_080005d8;\\n    *PTR_detachedServoCount_080005d8 = detached_servo_count + 1U;\\n    PTR_detachedServos_080005dc[(byte)(detached_servo_count + 1U) - 1] = current_pin;\\n  }\\n  servo_pin_map_ptr[pin] = 0xff;\\n  return;\\n}",
            "called": [
                "detach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000588",
            "calling": [
                "sysexCallback",
                "setPinModeCallback"
            ],
            "imported": false,
            "current_name": "detach_servo_on_pin_08000588"
        },
        "FUN_08002644": {
            "renaming": {
                "FUN_08002644": "set_servo_index_08002644",
                "this": "servo",
                "uVar2": "servoIndex",
                "bVar1": "isTimerActiveResult"
            },
            "code": "void __thiscall Servo::set_servo_index_08002644(Servo *servo)\n{\n  boolean isTimerActiveResult;\n  uint32_t servoIndex = (uint32_t)servo->servoIndex;\n  PTR_servos_08002670[servoIndex * 8] &= 0xbf;\n  isTimerActiveResult = isTimerActive((timer16_Sequence_t)((uint64_t)DAT_08002674 * (uint64_t)servoIndex >> 0x23));\n  if (!isTimerActiveResult) {\n    finISR((stimer_t *)PTR__timer_08002678);\n  }\n  return;\n}",
            "called": [
                "isTimerActive",
                "finISR"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002644",
            "calling": [
                "detachServo"
            ],
            "imported": false,
            "current_name": "set_servo_index_08002644"
        },
        "FUN_08002f1e": {
            "renaming": {
                "FUN_08002f1e": "print_byte_08002f1e",
                "this": "firmata_instance",
                "FirmataClass": "firmata",
                "c": "byte_to_print",
                "FirmataStream": "firmata_stream",
                "_vptr_Print": "print_vptr",
                "uint": "unsigned_int"
            },
            "code": "void __thiscall firmata::FirmataClass::print_byte_08002f1e(FirmataClass *firmata_instance, byte byte_to_print)\n{\n  (**(firmata_instance->FirmataStream->super_Print)._vptr_Print)(firmata_instance->FirmataStream,(uint)byte_to_print);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f1e",
            "calling": [
                "sysexCallback"
            ],
            "imported": false,
            "current_name": "print_byte_08002f1e"
        },
        "FUN_0800902e": {
            "renaming": {
                "FUN_0800902e": "handle_gpio_exti_interrupt_0800902e"
            },
            "code": "void handle_gpio_exti_interrupt_0800902e(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(2);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800902e",
            "calling": [],
            "imported": false,
            "current_name": "handle_gpio_exti_interrupt_0800902e"
        },
        "FUN_08009042": {
            "renaming": {
                "FUN_08009042": "handle_external_interrupt_on_pin_8_08009042",
                "HAL_GPIO_EXTI_IRQHandler": "handle_external_interrupt_request",
                "PTR_": "PTR_",
                "DAT_": "DAT_",
                "8": "PIN_8"
            },
            "code": "void handle_external_interrupt_on_pin_8_08009042(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(PIN_8);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009042",
            "calling": [],
            "imported": false,
            "current_name": "handle_external_interrupt_on_pin_8_08009042"
        },
        "FUN_08009c7c": {
            "renaming": {
                "FUN_08009c7c": "flush_if_buffer_full_08009c7c",
                "param_1": "stream_pointer",
                "param_2": "buffer",
                "param_3": "mode",
                "param_4": "flags",
                "uVar1": "result"
            },
            "code": "int flush_if_buffer_full_08009c7c(int stream_pointer, char *buffer, int mode, int flags) {\n  int result;\n  if (*(int *)(buffer + 0x10) != 0) {\n    if ((stream_pointer != 0) && (*(int *)(stream_pointer + 0x18) == 0)) {\n      __sinit();\n    }\n    if (buffer == PTR___sf_fake_stdin_08009cc4) {\n      buffer = *(char **)(stream_pointer + 4);\n    }\n    else if (buffer == PTR___sf_fake_stdout_08009cc8) {\n      buffer = *(char **)(stream_pointer + 8);\n    }\n    else if (buffer == PTR___sf_fake_stderr_08009ccc) {\n      buffer = *(char **)(stream_pointer + 0xc);\n    }\n    if (*(short *)(buffer + 0xc) != 0) {\n      result = __sflush_r(stream_pointer, buffer, mode, flags);\n      return result;\n    }\n  }\n  return 0;\n}",
            "called": [
                "__sinit",
                "__sflush_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009c7c",
            "calling": [
                "__swbuf_r"
            ],
            "imported": false,
            "current_name": "flush_if_buffer_full_08009c7c"
        },
        "FUN_08009b5c": {
            "renaming": {
                "FUN_08009b5c": "raise_signal_6_and_exit_08009b5c",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void raise_signal_6_and_exit_08009b5c() {\n  raise(SIGABRT);\n  exit(1);\n}",
            "called": [
                "_exit",
                "raise"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009b5c",
            "calling": [
                "__throw_bad_function_call",
                "__assert_func"
            ],
            "imported": false,
            "current_name": "raise_signal_6_and_exit_08009b5c"
        },
        "FUN_08008a6c": {
            "renaming": {
                "FUN_08008a6c": "read_digital_pin_08008a6c",
                "ulPin": "pin_number",
                "_Var1": "is_pin_configured",
                "port": "gpio_port",
                "uVar2": "digital_io_value",
                "uVar3": "digital_pin_index"
            },
            "code": "int read_digital_pin_08008a6c(uint32_t pin_number)\n{\n    bool is_pin_configured;\n    GPIO_TypeDef *gpio_port;\n    uint32_t digital_io_value;\n    uint32_t digital_pin_index;\n\n    if (pin_number < 0x3c)\n    {\n        digital_pin_index = (uint)(char)PTR_digitalPin_08008ab4[pin_number];\n    }\n    else\n    {\n        digital_pin_index = 0xffffffff;\n    }\n    if (digital_pin_index == 0xffffffff)\n    {\n        digital_pin_index = 0;\n    }\n    else\n    {\n        is_pin_configured = is_pin_configured((PinName_conflict)digital_pin_index,(uint32_t *)PTR_g_digPinConfigured_08008ab8);\n        if (is_pin_configured)\n        {\n            gpio_port = get_GPIO_Port((digital_pin_index << 0x18) >> 0x1c);\n            digital_io_value = digital_io_read(gpio_port,1 << (digital_pin_index & 0xf) & 0xffff);\n            digital_pin_index = digital_io_value & 0xff;\n        }\n        else\n        {\n            digital_pin_index = 0;\n        }\n    }\n    if (digital_pin_index != 0)\n    {\n        digital_pin_index = 1;\n    }\n    return digital_pin_index;\n}",
            "called": [
                "digital_io_read",
                "get_GPIO_Port",
                "is_pin_configured"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a6c",
            "calling": [
                "checkDigitalInputs",
                "reportDigitalCallback"
            ],
            "imported": false,
            "current_name": "read_digital_pin_08008a6c"
        },
        "FUN_080085b8": {
            "renaming": {
                "FUN_080085b8": "is_uart_transmit_complete_080085b8",
                "obj": "serial_obj",
                "HVar1": "uart_state"
            },
            "code": "bool is_uart_transmit_complete_080085b8(serial_t* serial_obj)\n{\n    HAL_UART_StateTypeDef uart_state = HAL_UART_GetState(*(UART_HandleTypeDef**)(PTR_uart_handlers_080085d8 + (uint)serial_obj->index * 4));\n    return (uart_state & 0x22U) == 0x22;\n}",
            "called": [
                "HAL_UART_GetState"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080085b8",
            "calling": [
                "uart_attach_rx_callback",
                "uart_getc"
            ],
            "imported": false,
            "current_name": "is_uart_transmit_complete_080085b8"
        },
        "FUN_08001c08": {
            "renaming": {
                "FUN_08001c08": "read_wire_data_08001c08",
                "in_r1": "data_pin",
                "in_r2": "data_buffer",
                "in_r3": "data_length",
                "sVar1": "read_result"
            },
            "code": "byte read_wire_data_08001c08(void)\n{\n  ssize_t read_result;\n  int data_pin;\n  void *data_buffer;\n  size_t data_length;\n  \n  read_result = TwoWire::read((TwoWire *)PTR_Wire_08001c14, data_pin, data_buffer, data_length);\n  return (byte)read_result;\n}",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c08",
            "calling": [
                "readAndReportData"
            ],
            "imported": false,
            "current_name": "read_wire_data_08001c08"
        },
        "FUN_080075dc": {
            "renaming": {
                "FUN_080075dc": "get_timer_clk_freq_080075dc",
                "tim": "timer",
                "uVar1": "timer_clk_freq",
                "uVar2": "timer_clk_src",
                "uVar3": "apb1_clk_freq",
                "uVar4": "apb2_clk_freq",
                "pFLatency": "flash_latency",
                "clkconfig": "clk_config",
                "ClockType": "clk_config.ClockType",
                "SYSCLKSource": "clk_config.SYSCLKSource",
                "AHBCLKDivider": "clk_config.AHBCLKDivider",
                "APB1CLKDivider": "clk_config.APB1CLKDivider",
                "APB2CLKDivider": "clk_config.APB2CLKDivider",
                "PTR_s_TIM__Unknown_clock_source_08007644": "unknown_timer_clk_src_error_message",
                "getTimerClkSrc": "get_timer_clk_src",
                "TIMER_CLK_SRC_APB1": "1",
                "TIMER_CLK_SRC_APB2": "2",
                "APB1_CLK_DIV_2": "0x500",
                "APB1_CLK_DIV_4": "0x400",
                "APB1_CLK_DIV_8": "0x600",
                "APB1_CLK_DIV_16": "0x700"
            },
            "code": "uint32_t get_timer_clk_freq_080075dc(TIM_TypeDef_conflict *timer)\n{\n  uint32_t timer_clk_freq;\n  uint8_t timer_clk_src;\n  uint32_t apb1_clk_div;\n  uint32_t apb2_clk_div;\n  uint32_t flash_latency;\n  RCC_ClkInitTypeDef_conflict clk_config;\n  clk_config.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;\n  clk_config.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;\n  clk_config.AHBCLKDivider = RCC_SYSCLK_DIV1;\n  clk_config.APB1CLKDivider = RCC_HCLK_DIV2;\n  clk_config.APB2CLKDivider = RCC_HCLK_DIV1;\n  flash_latency = 0;\n  HAL_RCC_GetClockConfig(&clk_config, &flash_latency);\n  timer_clk_src = get_timer_clk_src(timer);\n  apb2_clk_div = clk_config.APB2CLKDivider;\n  apb1_clk_div = clk_config.APB1CLKDivider;\n  if (timer_clk_src == TIMER_CLK_SRC_APB1)\n  {\n    timer_clk_freq = HAL_RCC_GetPCLK1Freq();\n  }\n  else if (timer_clk_src == TIMER_CLK_SRC_APB2)\n  {\n    timer_clk_freq = HAL_RCC_GetPCLK2Freq();\n    apb1_clk_div = apb2_clk_div;\n  }\n  else\n  {\n    iprintf(PTR_s_TIM__Unknown_clock_source_08007644);\n    timer_clk_freq = 0;\n    apb1_clk_div = 0;\n  }\n  if (apb1_clk_div != APB1_CLK_DIV_2)\n  {\n    if (apb1_clk_div < APB1_CLK_DIV_2)\n    {\n      if (apb1_clk_div != APB1_CLK_DIV_4)\n      {\n        return timer_clk_freq;\n      }\n    }\n    else if ((apb1_clk_div != APB1_CLK_DIV_8) && (apb1_clk_div != APB1_CLK_DIV_16))\n    {\n      return timer_clk_freq;\n    }\n  }\n  return timer_clk_freq << 1;\n}",
            "called": [
                "HAL_RCC_GetClockConfig",
                "HAL_RCC_GetPCLK1Freq",
                "getTimerClkSrc",
                "iprintf",
                "HAL_RCC_GetPCLK2Freq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080075dc",
            "calling": [
                "pwm_start",
                "TimerPulseInit"
            ],
            "imported": false,
            "current_name": "get_timer_clk_freq_080075dc"
        },
        "FUN_080087ec": {
            "renaming": {
                "FUN_080087ec": "handle_usart3_interrupt_080087ec",
                "USART3_IRQn": "USART3_Interrupt",
                "PTR_uart_handlers_08008800": "PTR_uart_handlers",
                "UART_HandleTypeDef": "UART_handler",
                "DAT_08008808": "N/A"
            },
            "code": "void handle_usart3_interrupt_080087ec(void)\n{\n  HAL_NVIC_ClearPendingIRQ(USART3_IRQn);\n  UART_HandleTypeDef* uart_handler = *(UART_HandleTypeDef**)(PTR_uart_handlers_08008800_08008800 + 8);\n  if (uart_handler != NULL) {\n    HAL_UART_IRQHandler(uart_handler);\n  }\n  return;\n}",
            "called": [
                "HAL_UART_IRQHandler",
                "HAL_NVIC_ClearPendingIRQ"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080087ec",
            "calling": [],
            "imported": false,
            "current_name": "handle_usart3_interrupt_080087ec"
        },
        "FUN_08007ff0": {
            "renaming": {
                "FUN_08007ff0": "i2c_slave_receive_handler_08007ff0",
                "hi2c": "i2c_handle",
                "piVar1": "i2c_obj",
                "uVar2": "bytes_to_receive",
                "i2c_onSlaveReceive": "i2c_on_slave_receive",
                "slaveMode": "slave_mode",
                "handle": "i2c_handle",
                "XferSize": "xfer_size",
                "i2cTxRxBuffer": "i2c_tx_rx_buffer",
                "HAL_I2C_EnableListen_IT": "enable_listen_interrupt"
            },
            "code": "void i2c_slave_receive_handler_08007ff0(I2C_HandleTypeDef_conflict *i2c_handle)\n{\n    i2c_t_conflict *i2c_obj;\n    uint8_t bytes_to_receive;\n\n    i2c_obj = get_i2c_object(i2c_handle);\n    if(i2c_obj->i2c_on_slave_receive != (_func_void_uint8_t_ptr_int *)0x0 && i2c_obj->slave_mode == '\\x01')\n    {\n        bytes_to_receive = 0x20 - *(uint8_t *)&i2c_obj->handle.XferSize & 0xff;\n        if(bytes_to_receive != 0)\n        {\n            (*i2c_obj->i2c_on_slave_receive)(i2c_obj->i2c_tx_rx_buffer, bytes_to_receive);\n        }\n    }\n    HAL_I2C_EnableListen_IT(i2c_handle);\n    return;\n}",
            "called": [
                "HAL_I2C_EnableListen_IT",
                "get_i2c_obj"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ff0",
            "calling": [
                "I2C_Slave_AF",
                "I2C_ITError",
                "I2C_Slave_STOPF"
            ],
            "imported": false,
            "current_name": "i2c_slave_receive_handler_08007ff0"
        },
        "FUN_08008078": {
            "renaming": {
                "FUN_08008078": "FUNC_08008078"
            },
            "code": "\nvoid FUNC_08008078(serial_t *obj)\n\n{\n  USART_TypeDef *pUVar1;\n  USART_TypeDef *pUVar2;\n  USART_TypeDef *pUVar3;\n  void *a;\n  void *b;\n  USART_TypeDef *pUVar4;\n  GPIO_TypeDef *pGVar5;\n  uint32_t uVar6;\n  uint32_t tmpreg;\n  uint32_t tmpreg_1;\n  uint32_t tmpreg_2;\n  uint32_t tmpreg_3;\n  GPIO_InitTypeDef GPIO_InitStruct;\n  \n  if (obj != (serial_t *)0x0) {\n    a = pinmap_peripheral(obj->pin_tx,(PinMap_conflict *)PTR_PinMap_UART_TX_08008330);\n    b = pinmap_peripheral(obj->pin_rx,(PinMap_conflict *)PTR_PinMap_UART_RX_08008334);\n    if ((b == (void *)0x0) || (a == (void *)0x0)) {\n      iprintf(PTR_s_ERROR__at_least_one_UART_pin_has_08008348);\n    }\n    else {\n      pUVar4 = (USART_TypeDef *)pinmap_merge_peripheral(a,b);\n      obj->uart = pUVar4;\n      pUVar3 = DAT_08008340;\n      pUVar2 = DAT_0800833c;\n      pUVar1 = DAT_08008338;\n      if (pUVar4 == (USART_TypeDef *)0x0) {\n        iprintf(PTR_s_ERROR__U_S_ART_pins_mismatch_0800834c);\n      }\n      else {\n        if (pUVar4 == DAT_08008338) {\n          DAT_08008338[0x7b7].BRR = DAT_08008338[0x7b7].BRR | 0x4000;\n          pUVar1[0x7b7].BRR = pUVar1[0x7b7].BRR & 0xffffbfff;\n          pUVar1[0x7b7].CR3 = pUVar1[0x7b7].CR3 | 0x4000;\n          obj->index = '\\0';\n          obj->irq = USART1_IRQn;\n        }\n        else if (pUVar4 == DAT_0800833c) {\n          DAT_0800833c[0x106e].BRR = DAT_0800833c[0x106e].BRR | 0x20000;\n          pUVar2[0x106e].BRR = pUVar2[0x106e].BRR & 0xfffdffff;\n          pUVar2[0x106e].CR3 = pUVar2[0x106e].CR3 | 0x20000;\n          obj->index = '\\x01';\n          obj->irq = USART2_IRQn;\n        }\n        else if (pUVar4 == DAT_08008340) {\n          DAT_08008340[0x1049].CR3 = DAT_08008340[0x1049].CR3 | 0x40000;\n          pUVar3[0x1049].CR3 = pUVar3[0x1049].CR3 & 0xfffbffff;\n          pUVar3[0x104a].DR = pUVar3[0x104a].DR | 0x40000;\n          obj->index = '\\x02';\n          obj->irq = USART3_IRQn;\n        }\n        pGVar5 = set_GPIO_Port_Clock((uint)((int)obj->pin_rx << 0x18) >> 0x1c);\n        uVar6 = pinmap_function(obj->pin_rx,(PinMap_conflict *)PTR_PinMap_UART_RX_08008334);\n        GPIO_InitStruct.Pin = 1 << (obj->pin_rx & 0xfU) & 0xffff;\n        GPIO_InitStruct.Mode = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        GPIO_InitStruct.Pull = (uVar6 << 0x1a) >> 0x1e;\n        *(uint *)(DAT_08008344 + 0x18) = *(uint *)(DAT_08008344 + 0x18) | 1;\n        switch((uVar6 << 0x11) >> 0x19) {\n        case 1:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000001;\n          break;\n        case 2:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000002;\n          break;\n        case 4:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000004;\n          break;\n        case 6:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000008;\n          break;\n        case 8:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000030;\n          break;\n        case 10:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x70000c0;\n          break;\n        case 0xd:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7000300;\n          break;\n        case 0x10:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7000c00;\n          break;\n        case 0x14:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7001000;\n          break;\n        case 0x17:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7008000;\n          break;\n        case 0x1c:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff;\n          break;\n        case 0x22:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff | 0x4000000;\n        }\n        GPIO_InitStruct.Speed = 3;\n        HAL_GPIO_Init(pGVar5,&GPIO_InitStruct);\n        pGVar5 = set_GPIO_Port_Clock((uint)((int)obj->pin_tx << 0x18) >> 0x1c);\n        uVar6 = pinmap_function(obj->pin_tx,(PinMap_conflict *)PTR_PinMap_UART_TX_08008330);\n        GPIO_InitStruct.Pin = 1 << (obj->pin_tx & 0xfU) & 0xffff;\n        GPIO_InitStruct.Mode = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        GPIO_InitStruct.Pull = (uVar6 << 0x1a) >> 0x1e;\n        HAL_GPIO_Init(pGVar5,&GPIO_InitStruct);\n        *(UART_HandleTypeDef **)(PTR_uart_handlers_08008354 + (uint)obj->index * 4) = &obj->handle;\n        (obj->handle).Instance = obj->uart;\n        (obj->handle).Init.BaudRate = obj->baudrate;\n        (obj->handle).Init.WordLength = obj->databits;\n        (obj->handle).Init.StopBits = obj->stopbits;\n        (obj->handle).Init.Parity = obj->parity;\n        (obj->handle).Init.Mode = 0xc;\n        (obj->handle).Init.HwFlowCtl = 0;\n        (obj->handle).Init.OverSampling = 0;\n        HAL_UART_Init(&obj->handle);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "HAL_GPIO_Init",
                "pinmap_function",
                "pinmap_merge_peripheral",
                "pinmap_peripheral",
                "HAL_UART_Init",
                "set_GPIO_Port_Clock",
                "iprintf"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008078",
            "calling": [
                "begin",
                "uart_debug_init"
            ],
            "imported": false,
            "current_name": "FUNC_08008078"
        },
        "FUN_08002774": {
            "renaming": {
                "FUN_08002774": "execute_user_on_request_callback_08002774",
                "pcVar1": "user_on_request_callback",
                "PTR_user_onRequest_0800278c": "user_on_request_ptr",
                "PTR_txBufferIndex_08002790": "tx_buffer_index_ptr",
                "PTR_txBufferLength_08002794": "tx_buffer_length_ptr"
            },
            "code": "void TwoWire::execute_user_on_request_callback_08002774(void)\n{\n  code *user_on_request_callback = *(code **)PTR_user_onRequest_0800278c;\n  if (user_on_request_callback != (code *)0x0) {\n    *PTR_txBufferIndex_08002790 = 0;\n    *PTR_txBufferLength_08002794 = 0;\n    (*user_on_request_callback)();\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002774",
            "calling": [],
            "imported": false,
            "current_name": "execute_user_on_request_callback_08002774"
        },
        "FUN_080052f0": {
            "renaming": {
                "FUN_080052f0": "check_i2c_errors_080052f0",
                "hi2c": "i2c_handle",
                "HVar1": "i2c_state",
                "pIVar2": "i2c_instance",
                "uVar3": "sr1_reg",
                "uVar4": "cr2_reg",
                "DAT_080053c8": "I2C_SR1_AF"
            },
            "code": "void check_i2c_errors_080052f0(I2C_HandleTypeDef_conflict *i2c_handle) {\n  HAL_I2C_StateTypeDef_conflict i2c_state;\n  I2C_TypeDef_conflict *i2c_instance;\n  uint16_t sr1_reg;\n  uint16_t cr2_reg;\n  i2c_instance = i2c_handle->Instance;\n  sr1_reg = i2c_instance->SR1;\n  cr2_reg = i2c_instance->CR2;\n  if (((sr1_reg & DAT_080053c8) != 0) && ((cr2_reg & I2C_CR2_START) != 0)) {\n    i2c_handle->ErrorCode |= HAL_I2C_ERROR_AF;\n    i2c_instance->SR1 = 0xfffffeff;\n    i2c_instance->CR1 |= I2C_CR1_STOP;\n  }\n  if (((sr1_reg & I2C_SR1_ADDR) != 0) && ((cr2_reg & I2C_CR2_START) != 0)) {\n    i2c_handle->ErrorCode |= HAL_I2C_ERROR_ADDR;\n    i2c_instance->SR1 = 0xfffffdff;\n  }\n  if (((sr1_reg & I2C_SR1_BTF) != 0) && ((cr2_reg & I2C_CR2_START) != 0)) {\n    i2c_state = i2c_handle->State;\n    if (((i2c_handle->Mode == HAL_I2C_MODE_SLAVE) && (i2c_handle->XferCount == 0)) && (((i2c_state == HAL_I2C_STATE_BUSY_TX) || (i2c_state == HAL_I2C_STATE_BUSY_TX_LISTEN)) || ((i2c_state == HAL_I2C_STATE_LISTEN) && (i2c_handle->PreviousState == 0x21)))) {\n      I2C_Slave_AF(i2c_handle);\n    }\n    else {\n      i2c_handle->ErrorCode |= HAL_I2C_ERROR_BTF;\n      if (i2c_handle->Mode == HAL_I2C_MODE_MASTER) {\n        i2c_instance->CR1 |= I2C_CR1_STOP;\n      }\n      i2c_instance->SR1 = 0xfffffbff;\n    }\n  }\n  if (((sr1_reg & I2C_SR1_OVR) != 0) && ((cr2_reg & I2C_CR2_START) != 0)) {\n    i2c_handle->ErrorCode |= HAL_I2C_ERROR_OVR;\n    i2c_instance->SR1 = 0xfffff7ff;\n  }\n  if (i2c_handle->ErrorCode != 0) {\n    I2C_ITError(i2c_handle);\n  }\n}",
            "called": [
                "I2C_Slave_AF",
                "I2C_ITError"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052f0",
            "calling": [
                "I2C1_ER_IRQHandler",
                "I2C2_ER_IRQHandler"
            ],
            "imported": false,
            "current_name": "check_i2c_errors_080052f0"
        },
        "FUN_08002f2c": {
            "renaming": {
                "FUN_08002f2c": "set_callback_08002f2c",
                "command": "command",
                "newFunction": "newFunction",
                "PTR_currentReportDigitalCallback_08002f78": "currentReportDigitalCallback",
                "PTR_currentPinModeCallback_08002f7c": "currentPinModeCallback",
                "PTR_currentPinValueCallback_08002f80": "currentPinValueCallback",
                "PTR_currentAnalogCallback_08002f6c": "currentAnalogCallback",
                "PTR_currentDigitalCallback_08002f74": "currentDigitalCallback",
                "PTR_currentReportAnalogCallback_08002f70": "currentReportAnalogCallback"
            },
            "code": "void __thiscall firmata::FirmataClass::set_callback_08002f2c(FirmataClass *this,uint8_t command,callbackFunction newFunction)\n{\n  if (command == REPORT_DIGITAL) {\n    *(callbackFunction *)PTR_currentReportDigitalCallback_08002f78 = newFunction;\n    return;\n  }\n  if (REPORT_DIGITAL < command) {\n    if (command == PIN_MODE_RESPONSE) {\n      *(callbackFunction *)PTR_currentPinModeCallback_08002f7c = newFunction;\n      return;\n    }\n    if (command == PIN_STATE_RESPONSE) {\n      *(callbackFunction *)PTR_currentPinValueCallback_08002f80 = newFunction;\n    }\n    else if (command == REPORT_ANALOG) {\n      *(callbackFunction *)PTR_currentAnalogCallback_08002f6c = newFunction;\n      return;\n    }\n    return;\n  }\n  if (command == DIGITAL_MESSAGE) {\n    *(callbackFunction *)PTR_currentDigitalCallback_08002f74 = newFunction;\n    return;\n  }\n  if (command == REPORT_ANALOG) {\n    *(callbackFunction *)PTR_currentReportAnalogCallback_08002f70 = newFunction;\n    return;\n  }\n  return;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f2c",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "set_callback_08002f2c"
        },
        "FUN_08004954": {
            "renaming": {
                "FUN_08004954": "i2c_listen_08004954",
                "hi2c": "handle",
                "pData": "data",
                "Size": "size",
                "XferOptions": "options",
                "HVar1": "status",
                "pIVar2": "instance",
                "tmpreg": "tmp_reg"
            },
            "code": "HAL_StatusTypeDef_conflict i2c_listen_08004954(I2C_HandleTypeDef_conflict *handle, uint8_t *data, uint16_t size, uint32_t options)\n{\n  HAL_StatusTypeDef_conflict status;\n  I2C_TypeDef_conflict *instance;\n  uint32_t tmp_reg;\n  \n  if (handle->State == HAL_I2C_STATE_LISTEN) {\n    if (data == NULL || size == 0 || handle->Lock == HAL_LOCKED) {\n      status = HAL_ERROR;\n    }\n    else {\n      handle->Lock = HAL_LOCKED;\n      instance = handle->Instance;\n      if ((instance->CR1 & 1) == 0) {\n        instance->CR1 |= 1;\n      }\n      handle->Instance->CR1 &= 0xfffff7ff;\n      handle->State = HAL_I2C_STATE_BUSY_RX_LISTEN;\n      handle->Mode = HAL_I2C_MODE_SLAVE;\n      status = HAL_OK;\n      handle->ErrorCode = 0;\n      handle->pBuffPtr = data;\n      handle->XferCount = size;\n      handle->XferOptions = options;\n      handle->XferSize = handle->XferCount;\n      handle->Lock = HAL_UNLOCKED;\n      handle->Instance->CR2 |= 0x700;\n    }\n  }\n  else {\n    status = HAL_BUSY;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004954",
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "imported": false,
            "current_name": "i2c_listen_08004954"
        },
        "FUN_08005cec": {
            "renaming": {
                "FUN_08005cec": "configure_timer_08005cec",
                "TIMx": "timer",
                "OC_Config": "oc_config",
                "uVar1": "cc_enable_value",
                "uVar2": "cr2_value",
                "uVar3": "oc_mode",
                "DAT_08005d44": "PTR_08005d44",
                "CCER": "cc_enable_mask",
                "OCPolarity": "oc_polarity",
                "OCNPolarity": "ocn_polarity",
                "CR2": "cr2_value",
                "CCMR1": "ccmr1_value",
                "Pulse": "pulse",
                "OCMode": "oc_mode",
                "CCR1": "ccr1_value",
                "OCIdleState": "oc_idle_state",
                "OCNIdleState": "ocn_idle_state"
            },
            "code": "void configure_timer_08005cec(TIM_TypeDef_conflict *timer, TIM_OC_InitTypeDef *oc_config)\n{\n    uint32_t cc_enable_mask = timer->CCER & 0xfffffffe;\n    uint32_t cr2_value = timer->CR2;\n    uint oc_mode = oc_config->OCMode;\n    uint32_t cc_enable_value = (timer->CCER & 0xfffffffd) | oc_config->OCPolarity;\n    if (timer == DAT_08005d44) {\n        cc_enable_value = (cc_enable_value & 0xfffffff7) | oc_config->OCNPolarity;\n        cr2_value = (cr2_value & 0xfffffcff) | oc_config->OCIdleState | oc_config->OCNIdleState;\n    }\n    timer->CR2 = cr2_value;\n    timer->CCMR1 = (timer->CCMR1 & 0xffffff8c) | oc_mode;\n    timer->CCR1 = oc_config->Pulse;\n    timer->CCER = cc_enable_value;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cec",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_TIM_OC_ConfigChannel"
            ],
            "imported": false,
            "current_name": "configure_timer_08005cec"
        },
        "FUN_08003748": {
            "renaming": {
                "FUN_08003748": "update_tick_count_08003748",
                "PTR_uwTick_08003758": "tick_count",
                "PTR_uwTickFreq_0800375c": "tick_freq"
            },
            "code": "void update_tick_count_08003748(void)\n{\n    uint8_t PTR_uwTickFreq_0800375c = *PTR_uwTickFreq_0800375c;\n    uint32_t* PTR_uwTick_08003758 = (uint32_t*) PTR_uwTick_08003758;\n    *PTR_uwTick_08003758 += PTR_uwTickFreq_0800375c;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003748",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "update_tick_count_08003748"
        },
        "FUN_080040e8": {
            "renaming": {
                "FUN_080040e8": "configure_gpio_pins_080040e8",
                "GPIOx": "port",
                "GPIO_Init": "init_config",
                "pGVar1": "port_pointer",
                "uVar2": "var2",
                "uVar3": "pin_mask",
                "uVar4": "pin_check",
                "uVar5": "pin_index",
                "uVar6": "mode",
                "uVar7": "speed",
                "iVar8": "var8",
                "uVar9": "var9",
                "iVar10": "var10",
                "tmpreg": "temp_reg",
                "DAT_080042bc": "data1",
                "DAT_080042c0": "data2",
                "DAT_080042c4": "data3",
                "DAT_080042c8": "data4",
                "DAT_080042cc": "data5",
                "DAT_080042d0": "data6"
            },
            "code": "void configure_gpio_pins_080040e8(GPIO_TypeDef *port, GPIO_InitTypeDef *init_config) {\n  uint32_t pin_mask = 0x00000001;\n  uint32_t speed = 0;\n  uint32_t mode = 0;\n  for (uint8_t pin_index = 0; pin_index <= 15; pin_index++) {\n    if (pin_index > 15) {\n      return;\n    }\n    if (init_config->Pin & pin_mask) {\n      mode = init_config->Mode;\n      if (mode == GPIO_MODE_AF_PP || mode == GPIO_MODE_AF_OD) {\n        speed = init_config->Speed;\n      } else if (mode == GPIO_MODE_INPUT) {\n        if (init_config->Pull == GPIO_NOPULL) {\n          speed = GPIO_SPEED_FREQ_LOW;\n        } else if (init_config->Pull == GPIO_PULLUP) {\n          port->BSRR = pin_mask;\n          speed = GPIO_SPEED_FREQ_LOW;\n        } else {\n          port->BRR = pin_mask;\n          speed = GPIO_SPEED_FREQ_LOW;\n        }\n      } else {\n        if (mode == GPIO_MODE_OUTPUT_PP || mode == GPIO_MODE_OUTPUT_OD) {\n          speed = init_config->Speed;\n        }\n      }\n      uint8_t pin_offset = pin_index < 8 ? pin_index : pin_index - 8;\n      uint32_t* cr_reg = pin_index < 8 ? &port->CRL : &port->CRH;\n      uint32_t cr_mask = 0x0000000F << (pin_offset * 4);\n      uint32_t cr_value = speed << (pin_offset * 4);\n      *cr_reg = (*cr_reg & ~cr_mask) | cr_value;\n    }\n    pin_mask <<= 1;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "HAL_ADC_MspInit",
                "digital_io_init",
                "HAL_TIM_PWM_MspInit",
                "uart_init",
                "i2c_custom_init"
            ],
            "imported": false,
            "current_name": "configure_gpio_pins_080040e8"
        },
        "FUN_08009b6c": {
            "renaming": {
                "FUN_08009b6c": "decode_data_08009b6c",
                "param_1": "data",
                "param_2": "params",
                "iVar1": "start_offset",
                "piVar2": "chunk_offset",
                "uVar3": "data_size",
                "uVar4": "flags",
                "iVar5": "chunk_header_size",
                "iVar7": "chunk_data_offset",
                "pcVar6": "decoder",
                "uVar8": "original_data_size",
                "bVar9": "is_chunked",
                "remaining_size": "remaining_size",
                "chunk_size": "chunk_size",
                "decoded_size": "decoded_size"
            },
            "code": "uint32_t decode_data_08009b6c(uint32_t *data, int *params)\n{\n  int start_offset = params[4];\n  uint16_t flags = *(uint16_t *)(params + 3);\n  uint32_t data_size = (uint32_t)flags;\n  uint32_t decoded_size = 0;\n  int chunk_size = 0;\n  int chunk_offset = 0;\n  bool is_chunked = (data_size << 0x1c) < 0;\n  if (is_chunked) {\n    if (start_offset != 0) {\n      int chunk_header_size = data_size << 0x1e ? 0 : params[5];\n      int chunk_data_offset = *params;\n      int remaining_size = chunk_data_offset - start_offset;\n      while (remaining_size > 0) {\n        chunk_size = (*(code *)params[10])(data, params[8], start_offset, remaining_size);\n        if (chunk_size < 1) {\n          flags |= 0x40;\n          return 0xffffffff;\n        }\n        decoded_size += chunk_size;\n        remaining_size -= chunk_size;\n      }\n    }\n  } else if ((params[1] > 0 || params[0x10] > 0) && params[0xb] != NULL) {\n    code *decoder = (code *)params[0xb];\n    uint32_t original_data_size = *data;\n    *data = 0;\n    if (!(flags & 0x1000)) {\n      chunk_size = (*decoder)(data, params[8], flags & 0x1000, 1);\n      if (chunk_size == -1 && *data != 0) {\n        if (*data != 0x1d && *data != 0x16) {\n          flags |= 0x40;\n          return 0xffffffff;\n        }\n        *data = original_data_size;\n        return 0;\n      }\n    } else {\n      chunk_size = params[0x15];\n    }\n    if ((flags << 0x1d) < 0 && params[0xd] != NULL) {\n      chunk_size -= params[1];\n      if (params[0xd] != params + 0x11) {\n        _free_r(data);\n      }\n      params[0xd] = NULL;\n    }\n    decoded_size = (*decoder)(data, params[8], chunk_size, 0);\n    if (decoded_size == -1 && (*data > 0x1d || DAT_08009c78 >> (*data & 0xff) << 0x1f >= 0)) {\n      flags |= 0x40;\n      return 0xffffffff;\n    }\n    params[1] = 0;\n    start_offset = params[4];\n    *data = original_data_size;\n    if ((flags << 0x13) < 0 && (decoded_size != -1 || *data == 0)) {\n      params[0x15] = decoded_size;\n    }\n    if (params[0xd] != NULL) {\n      if (params[0xd] != params + 0x11) {\n        _free_r(data);\n      }\n      params[0xd] = NULL;\n    }\n  }\n  return 0;\n}",
            "called": [
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009b6c",
            "calling": [
                "_fflush_r"
            ],
            "imported": false,
            "current_name": "decode_data_08009b6c"
        },
        "FUN_0800288c": {
            "renaming": {
                "FUN_0800288c": "transmit_data_0800288c",
                "data": "local_data",
                "puVar1": "buffer_pointer",
                "iVar2": "status",
                "pvVar3": "allocated_buffer",
                "sVar4": "result",
                "cVar5": "index_increment",
                "uVar6": "buffer_size",
                "__size": "size",
                "local_11": "local_data",
                "PTR_txBuffer_08002914": "tx_buffer_pointer",
                "PTR_transmitting_08002908": "transmitting_flag",
                "PTR_txBufferLength_0800290c": "tx_buffer_length",
                "PTR_txBufferAllocated_08002910": "tx_buffer_allocated",
                "PTR_txBufferIndex_08002918": "tx_buffer_index",
                "i2c_status_e_conflict": "i2c_status",
                "i2c_t_conflict": "i2c_t"
            },
            "code": "size_t __thiscall TwoWire::transmit_data_0800288c(TwoWire *this,uint8_t data)\\n{\\n  undefined *buffer_pointer;\\n  i2c_status_e_conflict status;\\n  void *allocated_buffer;\\n  size_t size;\\n  char index_increment;\\n  undefined buffer_size;\\n  size_t result;\\n  uint8_t local_data;\\n  buffer_pointer = PTR_txBuffer_08002914;\\n  local_data = data;\\n  if (*PTR_transmitting_08002908 == \"\\0\") {\\n    status = i2c_slave_transmit_IT((i2c_t_conflict *)&this->_i2c,&local_data,1);\\n    result = (status == I2C_OK) ? 1 : 0;\\n  }\\n  else {\\n    size = (byte)*PTR_txBufferLength_0800290c + 1;\\n    if ((byte)*PTR_txBufferAllocated_08002910 < size) {\\n      if (size < 0x20) {\\n        size = 0x20;\\n      }\\n      allocated_buffer = realloc(*(void **)PTR_txBuffer_08002914,size);\\n      *(void **)buffer_pointer = allocated_buffer;\\n      buffer_size = (undefined)size;\\n      *PTR_txBufferAllocated_08002910 = buffer_size;\\n    }\\n    buffer_pointer = PTR_txBufferIndex_08002918;\\n    if (*(int *)PTR_txBuffer_08002914 == 0) {\\n      (this->super_Stream).super_Print.transmit_data_0800288c_error = 1;\\n      result = 0;\\n    }\\n    else {\\n      *(uint8_t *)(*(int *)PTR_txBuffer_08002914 + (uint)(byte)*PTR_txBufferIndex_08002918) = local_data;\\n      index_increment = *buffer_pointer + \"\\x01\";\\n      *buffer_pointer = index_increment;\\n      *PTR_txBufferLength_0800290c = index_increment;\\n      result = 1;\\n    }\\n  }\\n  return result;\\n}",
            "called": [
                "i2c_slave_write_IT",
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800288c",
            "calling": [
                "wireWrite"
            ],
            "imported": false,
            "current_name": "transmit_data_0800288c"
        },
        "FUN_08002e26": {
            "renaming": {
                "FUN_08002e26": "send_version_info_08002e26",
                "this": "firmata_instance",
                "*s": "stream"
            },
            "code": "void __thiscall firmata::FirmataClass::send_version_info_08002e26(FirmataClass *firmata_instance, Stream *stream) {\n    firmata_instance->FirmataStream = stream;\n    FirmataMarshaller::send_version_info_08002e26(&firmata_instance->marshaller, stream);\n    print_version_info(firmata_instance);\n    print_firmware_version(firmata_instance);\n    return;\n}",
            "called": [
                "printVersion",
                "begin",
                "printFirmwareVersion"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002e26",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "send_version_info_08002e26"
        },
        "FUN_0800010c": {
            "renaming": {
                "FUN_0800010c": "check_if_initialized_0800010c",
                "param_1": "param",
                "*PTR_completed_8667_08000124": "is_initialized",
                "DAT_08000128": "is_not_zero",
                "PTR__init_0800012c": "initialized_value",
                "new_param": "param"
            },
            "code": "char* check_if_initialized_0800010c(char* param) {\\n    char* new_param = param;\\n    if (*PTR_completed_8667_08000124 == \"\\0\") {\\n        if (DAT_08000128 != 0) {\\n            new_param = PTR__init_0800012c;\\n        }\\n        *PTR_completed_8667_08000124 = 1;\\n    }\\n    return new_param;\\n}",
            "called": [
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800010c",
            "calling": [],
            "imported": false,
            "current_name": "check_if_initialized_0800010c"
        },
        "FUN_080086e8": {
            "renaming": {
                "FUN_080086e8": "get_uart_handler_index_080086e8",
                "huart": "uart_handler",
                "uVar1": "index"
            },
            "code": "uint8_t get_uart_handler_index_080086e8(UART_HandleTypeDef *uart_handler)\n{\n  uint8_t index = 0;\n  if (uart_handler == NULL)\n  {\n    index = 5;\n  }\n  else\n  {\n    while (index < 5)\n    {\n      if (uart_handler == *(UART_HandleTypeDef **)(PTR_uart_handlers_08008708 + index * 4))\n      {\n        break;\n      }\n      index++;\n    }\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080086e8",
            "calling": [
                "HAL_UART_TxCpltCallback",
                "HAL_UART_RxCpltCallback"
            ],
            "imported": false,
            "current_name": "get_uart_handler_index_080086e8"
        },
        "FUN_08001c18": {
            "renaming": {
                "FUN_08001c18": "read_i2c_data_08001c18",
                "address": "address",
                "theRegister": "register_address",
                "numBytes": "num_bytes",
                "stopTX": "stop_tx",
                "bVar1": "data_available",
                "puVar2": "wire_ptr",
                "bVar3": "byte_read",
                "iVar4": "bytes_received",
                "iVar5": "available_bytes",
                "uVar6": "num_bytes_uint"
            },
            "code": "void read_i2c_data_08001c18(byte address, int register_address, byte num_bytes, byte stop_tx) {\n  bool data_available;\n  undefined *wire_ptr;\n  byte byte_read;\n  int bytes_received = 0;\n  uint num_bytes_uint = (uint)num_bytes;\n  if (register_address == -1) {\n    register_address = 0;\n  }\n  else {\n    TwoWire::beginTransmission((TwoWire *)PTR_Wire_08001cbc, address);\n    wireWrite((byte)register_address);\n    TwoWire::endTransmission((TwoWire *)PTR_Wire_08001cbc, stop_tx);\n  }\n  wire_ptr = PTR_Wire_08001cbc;\n  TwoWire::requestFrom((TwoWire *)PTR_Wire_08001cbc, address, num_bytes);\n  int available_bytes = TwoWire::available((TwoWire *)wire_ptr);\n  if ((int)num_bytes_uint < available_bytes) {\n    firmata::FirmataClass::sendString((FirmataClass *)PTR_Firmata_08001cc4, PTR_s_I2C__Too_many_bytes_received_08001cc0);\n  }\n  else {\n    available_bytes = TwoWire::available((TwoWire *)PTR_Wire_08001cbc);\n    if (available_bytes < (int)num_bytes_uint) {\n      firmata::FirmataClass::sendString((FirmataClass *)PTR_Firmata_08001cc4, PTR_s_I2C__Too_few_bytes_received_08001ccc);\n    }\n  }\n  *PTR_i2cRxData_08001cc8 = address;\n  PTR_i2cRxData_08001cc8[1] = (char)register_address;\n  while (bytes_received < (int)num_bytes_uint) {\n    int available_bytes = TwoWire::available((TwoWire *)PTR_Wire_08001cbc);\n    if (available_bytes == 0) {\n      data_available = false;\n    }\n    else {\n      data_available = true;\n    }\n    if (!data_available) {\n      break;\n    }\n    byte_read = wireRead();\n    PTR_i2cRxData_08001cc8[bytes_received + 2] = byte_read;\n    bytes_received++;\n  }\n  firmata::FirmataClass::sendSysex((FirmataClass *)PTR_Firmata_08001cc4, 'w', num_bytes + '\\x02', PTR_i2cRxData_08001cc8);\n}",
            "called": [
                "beginTransmission",
                "endTransmission",
                "available",
                "wireWrite",
                "wireRead",
                "sendString",
                "sendSysex",
                "requestFrom"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c18",
            "calling": [
                "loop",
                "sysexCallback"
            ],
            "imported": false,
            "current_name": "read_i2c_data_08001c18"
        },
        "FUN_08009056": {
            "renaming": {
                "FUN_08009056": "handle_gpio_exti_irq_08009056",
                "uVar1": "gpio_pin"
            },
            "code": "void handle_gpio_exti_irq_08009056(void)\n{\n  uint16_t gpio_pin = 0x20;\n  while (gpio_pin < 0x201)\n  {\n    HAL_GPIO_EXTI_IRQHandler(gpio_pin);\n    gpio_pin <<= 1;\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009056",
            "calling": [],
            "imported": false,
            "current_name": "handle_gpio_exti_irq_08009056"
        },
        "FUN_08002e1a": {
            "renaming": {
                "FUN_08002e1a": "print_firmware_version_if_context_is_not_null_08002e1a",
                "context": "context_pointer",
                "param_2": "size_param_2",
                "param_3": "size_param_3",
                "param_4": "char_param_4"
            },
            "code": "void firmata::FirmataClass::print_firmware_version_if_context_is_not_null_08002e1a(void *context_pointer, size_t size_param_2, size_t size_param_3, char *char_param_4)\n{\n    if (context_pointer != nullptr) {\n        printFirmwareVersion((FirmataClass *)context_pointer);\n        return;\n    }\n    return;\n}",
            "called": [
                "printFirmwareVersion"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002e1a",
            "calling": [],
            "imported": false,
            "current_name": "print_firmware_version_if_context_is_not_null_08002e1a"
        },
        "FUN_0800904c": {
            "renaming": {
                "FUN_0800904c": "handle_gpio_exti_interrupt_0800904c",
                "PTR_": "",
                "DAT_": "",
                "0x10": "pin_number"
            },
            "code": "void handle_gpio_exti_interrupt_0800904c(void)\n{\n  uint32_t pin_number = 0x10;\n  HAL_GPIO_EXTI_IRQHandler(pin_number);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800904c",
            "calling": [],
            "imported": false,
            "current_name": "handle_gpio_exti_interrupt_0800904c"
        },
        "FUN_080073ae": {
            "renaming": {
                "FUN_080073ae": "return_non_null_080073ae",
                "a": "ptr1",
                "b": "ptr2"
            },
            "code": "void *return_non_null_080073ae(void *ptr1, void *ptr2)\n{\n    if (ptr1 != ptr2) {\n        if (ptr1 == NULL) {\n            return ptr2;\n        }\n        if (ptr2 == NULL) {\n            return ptr1;\n        }\n        ptr1 = NULL;\n    }\n    return ptr1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073ae",
            "calling": [
                "uart_init",
                "i2c_custom_init"
            ],
            "imported": false,
            "current_name": "return_non_null_080073ae"
        },
        "FUN_08003f0c": {
            "renaming": {
                "FUN_08003f0c": "set_priority_group_08003f0c",
                "PriorityGroup": "priority_group",
                "PTR_DAT_08003f2c": "priority_reg",
                "DAT_08003f2c": "priority_reg"
            },
            "code": "void set_priority_group_08003f0c(uint32_t priority_group) {\n  uint32_t* PTR_DAT_08003f2c = (uint32_t*)(DAT_08003f2c + 0xc);\n  uint32_t priority_mask = *(uint32_t*)(PTR_DAT_08003f2c) & 0xf8ff;\n  uint32_t new_priority = (priority_group & 7) << 8 | priority_mask | 0x5fa0000;\n  *PTR_DAT_08003f2c = new_priority;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f0c",
            "calling": [
                "HAL_Init",
                "premain"
            ],
            "imported": false,
            "current_name": "set_priority_group_08003f0c"
        },
        "FUN_08000488": {
            "renaming": {
                "FUN_08000488": "report_analog_input_08000488",
                "analogPin": "pin",
                "value": "value",
                "ulPin": "mapped_pin",
                "value_00": "analog_value",
                "PTR_analogInputsToReport_080004c8": "analog_inputs_to_report",
                "PTR_isResetting_080004cc": "is_resetting",
                "PTR_Firmata_080004d0": "firmata"
            },
            "code": "void report_analog_input_08000488(uint8_t pin, int value)\n{\n  uint8_t mapped_pin = (uint8_t)pin;\n  if (mapped_pin < 14) {\n    if (value == 0) {\n      *(uint32_t*)PTR_analogInputsToReport_080004c8 &= ~(1 << mapped_pin);\n      return;\n    }\n    *(uint32_t*)PTR_analogInputsToReport_080004c8 |= (1 << mapped_pin);\n    if (!PTR_isResetting_080004cc) {\n      uint32_t analog_value = analogRead(mapped_pin);\n      PTR_Firmata_080004d0.sendAnalog(mapped_pin, analog_value);\n      return;\n    }\n  }\n  return;\n}",
            "called": [
                "sendAnalog",
                "analogRead"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000488",
            "calling": [
                "setPinModeCallback"
            ],
            "imported": false,
            "current_name": "report_analog_input_08000488"
        },
        "FUN_08006bb8": {
            "renaming": {
                "FUN_08006bb8": "get_gpio_from_port_08006bb8",
                "port_idx": "port_index",
                "pGVar1": "gpio",
                "tmpreg": "gpio_base",
                "tmpreg_1": "gpio_mask",
                "tmpreg_2": "unused",
                "tmpreg_3": "unused",
                "tmpreg_4": "unused"
            },
            "code": "GPIO_TypeDef * get_gpio_from_port_08006bb8(uint32_t port_index) {\n  GPIO_TypeDef *gpio;\n  uint32_t gpio_base = DAT_08006c48;\n  uint32_t gpio_mask = 0;\n  \n  switch(port_index) {\n  case 0:\n    gpio_mask = 4;\n    gpio = DAT_08006c4c;\n    break;\n  case 1:\n    gpio_mask = 8;\n    gpio = DAT_08006c50;\n    break;\n  case 2:\n    gpio_mask = 0x10;\n    gpio = DAT_08006c54;\n    break;\n  case 3:\n    gpio_mask = 0x20;\n    gpio = DAT_08006c58;\n    break;\n  case 4:\n    gpio_mask = 0x40;\n    gpio = DAT_08006c5c;\n    break;\n  default:\n    gpio = (GPIO_TypeDef *)0x0;\n  }\n  \n  *(uint *)(gpio_base + 0x18) |= gpio_mask;\n  return gpio;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006bb8",
            "calling": [
                "HAL_ADC_MspInit",
                "digital_io_init",
                "HAL_TIM_PWM_MspInit",
                "uart_init",
                "i2c_custom_init"
            ],
            "imported": false,
            "current_name": "get_gpio_from_port_08006bb8"
        },
        "FUN_08004aec": {
            "renaming": {
                "FUN_08004aec": "handle_i2c_events_08004aec",
                "hi2c": "i2c_handle",
                "XferOptions": "transfer_options",
                "State": "state",
                "DAT_08004b7c": "DAT_08004b7c",
                "PreviousState": "previous_state",
                "Mode": "mode",
                "HAL_I2C_STATE_LISTEN": "HAL_I2C_STATE_LISTEN",
                "HAL_I2C_STATE_BUSY_TX": "HAL_I2C_STATE_BUSY_TX",
                "HAL_I2C_STATE_READY": "HAL_I2C_STATE_READY",
                "HAL_I2C_MODE_NONE": "HAL_I2C_MODE_NONE",
                "HAL_I2C_ListenCpltCallback": "HAL_I2C_ListenCpltCallback",
                "HAL_I2C_SlaveTxCpltCallback": "HAL_I2C_SlaveTxCpltCallback",
                "Instance": "instance",
                "CR2": "CR2",
                "SR1": "SR1",
                "CR1": "CR1"
            },
            "code": "HAL_StatusTypeDef_conflict handle_i2c_events_08004aec(I2C_HandleTypeDef_conflict *i2c_handle) {\n    if (((i2c_handle->transfer_options == 4) || (i2c_handle->transfer_options == 8)) && (i2c_handle->state == HAL_I2C_STATE_LISTEN)) {\n        i2c_handle->transfer_options = DAT_08004b7c;\n        i2c_handle->instance->CR2 = i2c_handle->instance->CR2 & 0xfffff8ff;\n        i2c_handle->instance->SR1 = 0xfffffbff;\n        i2c_handle->instance->CR1 = i2c_handle->instance->CR1 & 0xfffffbff;\n        i2c_handle->previous_state = 0;\n        i2c_handle->state = HAL_I2C_STATE_READY;\n        i2c_handle->mode = HAL_I2C_MODE_NONE;\n        HAL_I2C_ListenCpltCallback(i2c_handle);\n    }\n    else if (i2c_handle->state == HAL_I2C_STATE_BUSY_TX) {\n        i2c_handle->transfer_options = DAT_08004b7c;\n        i2c_handle->previous_state = 0x21;\n        i2c_handle->state = HAL_I2C_STATE_READY;\n        i2c_handle->mode = HAL_I2C_MODE_NONE;\n        i2c_handle->instance->CR2 = i2c_handle->instance->CR2 & 0xfffff8ff;\n        i2c_handle->instance->SR1 = 0xfffffbff;\n        i2c_handle->instance->CR1 = i2c_handle->instance->CR1 & 0xfffffbff;\n        HAL_I2C_SlaveTxCpltCallback(i2c_handle);\n    }\n    else {\n        i2c_handle->instance->SR1 = 0xfffffbff;\n    }\n    return HAL_OK;\n}",
            "called": [
                "HAL_I2C_ListenCpltCallback",
                "HAL_I2C_SlaveTxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004aec",
            "calling": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_i2c_events_08004aec"
        },
        "FUN_08007ede": {
            "renaming": {
                "FUN_08007ede": "write_i2c_data_08007ede",
                "*obj": "*i2c_conflict_obj",
                "*data": "*data",
                "size": "data_size",
                "uVar1": "index",
                "i2cTxRxBuffer": "i2c_conflict_obj->i2cTxRxBuffer",
                "i2cTxRxBufferSize": "i2c_conflict_obj->i2cTxRxBufferSize",
                "I2C_ERROR": "I2C_ERROR",
                "I2C_OK": "I2C_OK"
            },
            "code": "i2c_status_e_conflict write_i2c_data_08007ede(i2c_t_conflict *i2c_conflict_obj, uint8_t *data, uint16_t data_size)\n{\n  uint16_t index;\n\n  if (data_size > 0x20) {\n    return I2C_ERROR;\n  }\n  for (index = 0; index < data_size; index++) {\n    i2c_conflict_obj->i2cTxRxBuffer[index] = data[index];\n    i2c_conflict_obj->i2cTxRxBufferSize++;\n  }\n  return I2C_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ede",
            "calling": [
                "write",
                "write"
            ],
            "imported": false,
            "current_name": "write_i2c_data_08007ede"
        },
        "FUN_08004728": {
            "renaming": {
                "FUN_08004728": "i2c_write_08004728",
                "hi2c": "handle",
                "DevAddress": "address",
                "pData": "data",
                "Size": "size",
                "HVar1": "status",
                "pIVar2": "i2c",
                "count": "count",
                "DAT_080047ec": "count_constant",
                "PTR_SystemCoreClock_080047e8": "clock_speed_ptr",
                "DAT_080047f0": "xfer_options_constant"
            },
            "code": "HAL_StatusTypeDef_conflict i2c_write_08004728(I2C_HandleTypeDef_conflict *handle, uint16_t address, uint8_t *data, uint16_t size)\n{\n  HAL_StatusTypeDef_conflict status = HAL_BUSY;\n  I2C_TypeDef_conflict *i2c = handle->Instance;\n  uint32_t count = (uint)((ulonglong)DAT_080047ec * (ulonglong)(*(uint *)PTR_SystemCoreClock_080047e8 >> 3) >> 0x28) * 0x19;\n  if (handle->State == HAL_I2C_STATE_READY) {\n    do {\n      if (count == 0) {\n        handle->PreviousState = 0;\n        handle->State = HAL_I2C_STATE_READY;\n        handle->Lock = HAL_UNLOCKED;\n        status = HAL_TIMEOUT;\n        break;\n      }\n      count--;\n    } while ((i2c->SR2 & 2) != 0);\n    if (handle->Lock == HAL_LOCKED) {\n      status = HAL_BUSY;\n    }\n    else {\n      handle->Lock = HAL_LOCKED;\n      if ((i2c->CR1 & 1) == 0) {\n        i2c->CR1 |= 1;\n      }\n      handle->Instance->CR1 &= 0xfffff7ff;\n      handle->State = HAL_I2C_STATE_BUSY_TX;\n      handle->Mode = HAL_I2C_MODE_MASTER;\n      status = HAL_OK;\n      handle->ErrorCode = 0;\n      handle->pBuffPtr = data;\n      handle->XferCount = size;\n      handle->XferOptions = DAT_080047f0;\n      handle->XferSize = handle->XferCount;\n      handle->Devaddress = (uint)address;\n      handle->Instance->CR1 |= 0x100;\n      handle->Lock = HAL_UNLOCKED;\n      handle->Instance->CR2 |= 0x700;\n    }\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004728",
            "calling": [
                "i2c_master_write"
            ],
            "imported": false,
            "current_name": "i2c_write_08004728"
        },
        "FUN_080074e0": {
            "renaming": {
                "FUN_080074e0": "update_timer_config_080074e0",
                "*htim": "*timer_config",
                "Instance": "Channel",
                "DAT_08007534": "TIM2",
                "TIM_TypeDef_conflict *)0x40000000": "TIM3",
                "DAT_08007538": "TIM4",
                "DAT_0800753c": "TIM5"
            },
            "code": "void update_timer_config_080074e0(TIM_HandleTypeDef_conflict *timer_config)\n{\n    if (timer_config->Instance == DAT_08007534) {\n        *(uint *)(timer_config->Channel + 0x18) = *(uint *)(timer_config->Channel + 0x18) & 0xfffff7ff;\n    }\n    if (timer_config->Instance == TIM3) {\n        *(uint *)(timer_config->Channel + 0x1c) = *(uint *)(timer_config->Channel + 0x1c) & 0xfffffffe;\n    }\n    if (timer_config->Instance == DAT_08007538) {\n        *(uint *)(timer_config->Channel + 0x1c) = *(uint *)(timer_config->Channel + 0x1c) & 0xfffffffd;\n    }\n    if (timer_config->Instance == DAT_0800753c) {\n        *(uint *)(timer_config->Channel + 0x1c) = *(uint *)(timer_config->Channel + 0x1c) & 0xfffffffb;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080074e0",
            "calling": [
                "HAL_TIM_PWM_MspDeInit",
                "HAL_TIM_OC_MspDeInit"
            ],
            "imported": false,
            "current_name": "update_timer_config_080074e0"
        },
        "FUN_080073c0": {
            "renaming": {
                "FUN_080073c0": "execute_rtc_user_callback_080073c0",
                "hrtc": "rtc_handle",
                "PTR_RTCUserCallback_080073d0": "user_callback_ptr",
                "PTR_callbackUserData_080073d4": "callback_user_data_ptr"
            },
            "code": "void execute_rtc_user_callback_080073c0(RTC_HandleTypeDef *rtc_handle)\n{\n    code *user_callback = *(code **)PTR_RTCUserCallback_080073d0;\n    if (user_callback != (code *)0x0) {\n        user_callback(*(undefined4 *)PTR_callbackUserData_080073d4);\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073c0",
            "calling": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "imported": false,
            "current_name": "execute_rtc_user_callback_080073c0"
        },
        "FUN_080084b0": {
            "renaming": {
                "FUN_080084b0": "configure_uart_debug_080084b0",
                "pin": "uart_tx_pin",
                "obj": "serial_debug",
                "PVar1": "uart_rx_pin",
                "pvVar2": "peripheral",
                "PTR_digitalPin_080084f0": "digitalPin",
                "PTR_PinMap_UART_TX_080084f4": "PinMap_UART_TX",
                "PTR_PinMap_UART_RX_080084f8": "PinMap_UART_RX",
                "PTR_serial_debug_080084fc": "PTR_serial_debug_080084fc"
            },
            "code": "void configure_uart_debug_080084b0(void)\n{\n  PinName_conflict uart_tx_pin = PTR_digitalPin_080084f0[1];\n  void *peripheral = pinmap_peripheral(uart_tx_pin, (PinMap_conflict *)PTR_PinMap_UART_TX_080084f4);\n  if (peripheral != (void *)0x0) {\n    PinName_conflict uart_rx_pin = pinmap_pin(peripheral, (PinMap_conflict *)PTR_PinMap_UART_RX_080084f8);\n    undefined *serial_debug = PTR_serial_debug_080084fc;\n    serial_debug[0x59] = uart_rx_pin;\n    serial_debug[0x58] = uart_tx_pin;\n    *(undefined4 *)(serial_debug + 0x48) = 0x2580;\n    *(undefined4 *)(serial_debug + 0x54) = 0;\n    *(undefined4 *)(serial_debug + 0x4c) = 0;\n    *(undefined4 *)(serial_debug + 0x50) = 0;\n    uart_init((serial_t *)serial_debug);\n  }\n  return;\n}",
            "called": [
                "pinmap_pin",
                "pinmap_peripheral",
                "uart_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080084b0",
            "calling": [
                "uart_debug_write"
            ],
            "imported": false,
            "current_name": "configure_uart_debug_080084b0"
        },
        "FUN_080095a8": {
            "renaming": {
                "FUN_080095a8": "convert_data_to_string_080095a8",
                "param_1": "data",
                "param_2": "output_length",
                "param_3": "padding_length",
                "param_4": "padding_char",
                "param_5": "output_function",
                "iVar1": "i",
                "uVar2": "max_output_length",
                "uVar3": "padding_char_length",
                "bVar4": "is_padding_needed",
                "output_padding": "output_padding",
                "output_length_with_padding": "output_length_with_padding",
                "output_length": "output_length",
                "output_length_without_padding": "output_length_without_padding",
                "result": "result"
            },
            "code": "undefined4 convert_data_to_string_080095a8(undefined4 data, uint *output_length, uint *padding_length, undefined4 padding_char, code *output_function)\n{\n  int i;\n  uint max_output_length = param_2[4];\n  if ((int)param_2[4] < (int)param_2[2]) {\n    max_output_length = param_2[2];\n  }\n  *param_3 = max_output_length;\n  if (*(char *)((int)param_2 + 0x43) != '\\0') {\n    *param_3 = max_output_length + 1;\n  }\n  if ((int)(*param_2 << 0x1a) < 0) {\n    *param_3 = *param_3 + 2;\n  }\n  uint output_padding = *param_2 & 6;\n  if (output_padding == 0) {\n    for (; (int)output_padding < (int)(param_2[3] - *param_3); output_padding = output_padding + 1) {\n      int result = (*output_function)(data, padding_char, (int)param_2 + 0x19, 1);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  uint padding_char_length = (uint)*(byte *)((int)param_2 + 0x43);\n  if (padding_char_length != 0) {\n    padding_char_length = 1;\n  }\n  uint output_length_with_padding = padding_char_length;\n  if ((int)(*param_2 << 0x1a) < 0) {\n    *(undefined *)((int)param_2 + padding_char_length + 0x43) = 0x30;\n    output_length_with_padding = padding_char_length + 2;\n    *(undefined *)((int)param_2 + padding_char_length + 0x44) = *(undefined *)((int)param_2 + 0x45);\n  }\n  int result = (*output_function)(data, padding_char, (int)param_2 + 0x43, output_length_with_padding);\n  if (result != -1) {\n    uint output_length = param_2[3];\n    bool is_padding_needed = (*param_2 & 6) != 4;\n    if (is_padding_needed) {\n      output_length = 0;\n    }\n    uint output_length_without_padding = 0;\n    if (!is_padding_needed) {\n      output_length = output_length - *param_3;\n    }\n    if (!is_padding_needed) {\n      output_length = output_length & ~((int)output_length >> 0x1f);\n    }\n    if ((int)param_2[4] < (int)param_2[2]) {\n      output_length = output_length + (param_2[2] - param_2[4]);\n    }\n    while (true) {\n      if (output_length == output_length_without_padding) {\n        return 0;\n      }\n      result = (*output_function)(data, padding_char, (int)param_2 + 0x1a, 1);\n      if (result == -1) {\n        break;\n      }\n      output_length_without_padding = output_length_without_padding + 1;\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080095a8",
            "calling": [
                "_printf_i"
            ],
            "imported": false,
            "current_name": "convert_data_to_string_080095a8"
        },
        "FUN_08008b2a": {
            "renaming": {
                "FUN_08008b2a": "read_byte_08008b2a",
                "__thiscall HardwareSerial::": "",
                "this": "serial",
                "__fd": "file_descriptor",
                "__buf": "buffer",
                "__nbytes": "num_bytes",
                "byte bVar1": "byte rx_byte",
                "ushort uVar2": "ushort rx_tail_index",
                "uVar2": "rx_tail_index",
                "(this->_serial).rx_tail": "(serial->_serial).rx_tail",
                "(uint)(this->_serial).rx_head": "(uint)(serial->_serial).rx_head",
                "(this->_serial).rx_buff": "(serial->_serial).rx_buff"
            },
            "code": "ssize_t __thiscall HardwareSerial::read_byte_08008b2a(HardwareSerial *serial,int file_descriptor,void *buffer,size_t num_bytes) {\n  byte rx_byte;\n  ushort rx_tail_index;\n  \n  rx_tail_index = (serial->_serial).rx_tail;\n  if ((uint)(serial->_serial).rx_head != (uint)rx_tail_index) {\n    rx_byte = (serial->_serial).rx_buff[rx_tail_index];\n    (serial->_serial).rx_tail = (rx_tail_index + 1) & 0x3f;\n    return (uint)rx_byte;\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b2a",
            "calling": [],
            "imported": false,
            "current_name": "read_byte_08008b2a"
        },
        "FUN_08003bd8": {
            "renaming": {
                "FUN_08003bd8": "configure_ADC_08003bd8",
                "*hadc": "*adc",
                "HVar1": "status",
                "uVar2": "u_var_2",
                "uVar3": "u_var_3",
                "uVar4": "u_var_4",
                "uVar5": "u_var_5",
                "state_bits": "state_bits",
                "cr1_bits": "cr1_bits",
                "cr2_bits": "cr2_bits",
                "sqr1_bits": "sqr1_bits",
                "continuous_conv_mode_bits": "continuous_conv_mode_bits",
                "nbr_of_disc_conv_bits": "nbr_of_disc_conv_bits",
                "nbr_of_conv_bits": "nbr_of_conv_bits",
                "data_align_bits": "data_align_bits",
                "external_trig_conv_bits": "external_trig_conv_bits",
                "scan_conv_mode_bits": "scan_conv_mode_bits"
            },
            "code": "HAL_StatusTypeDef_conflict configure_ADC_08003bd8(ADC_HandleTypeDef *adc)\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t state_bits;\n  uint32_t cr1_bits;\n  uint32_t cr2_bits;\n  uint32_t sqr1_bits;\n  uint32_t continuous_conv_mode_bits;\n  uint32_t nbr_of_disc_conv_bits;\n  uint32_t nbr_of_conv_bits;\n  uint32_t data_align_bits;\n  uint32_t external_trig_conv_bits;\n  uint32_t scan_conv_mode_bits;\n  uint32_t uVar5;\n  uint uVar3;\n  uint uVar4;\n  uint32_t uVar2;\n  if (adc == (ADC_HandleTypeDef *)0x0) {\n    return HAL_ERROR;\n  }\n  if (adc->State == 0) {\n    adc->ErrorCode = 0;\n    adc->Lock = HAL_UNLOCKED;\n    HAL_ADC_MspInit(adc);\n  }\n  status = ADC_ConversionStop_Disable(adc);\n  state_bits = adc->State & 0xffffeefd | 2;\n  if ((adc->State & 0x10) == 0 && status == HAL_OK) {\n    continuous_conv_mode_bits = (adc->Init).ContinuousConvMode;\n    data_align_bits = (adc->Init).DataAlign;\n    external_trig_conv_bits = (adc->Init).ExternalTrigConv;\n    scan_conv_mode_bits = continuous_conv_mode_bits << 1 | external_trig_conv_bits | data_align_bits;\n    uVar2 = (adc->Init).ScanConvMode;\n    if (uVar2 == 0x100 || uVar2 == 1) {\n      nbr_of_conv_bits = ((adc->Init).NbrOfConversion - 1) * 0x100000;\n    }\n    else {\n      nbr_of_conv_bits = 0;\n    }\n    cr1_bits = (adc->Instance->CR1 & 0xffff16ff) | nbr_of_disc_conv_bits | 0x800 | scan_conv_mode_bits;\n    cr2_bits = (adc->Instance->CR2 & DAT_08003ce0) | scan_conv_mode_bits;\n    sqr1_bits = adc->Instance->SQR1 & 0xff0fffff | nbr_of_conv_bits;\n    if (scan_conv_mode_bits != (DAT_08003ce4 & adc->Instance->CR2)) {\n      adc->State = adc->State & 0xffffffed | 0x10;\n      adc->ErrorCode |= 1;\n      return HAL_ERROR;\n    }\n    adc->ErrorCode = 0;\n    adc->State = state_bits | 1;\n    adc->Instance->CR1 = cr1_bits;\n    adc->Instance->CR2 = cr2_bits;\n    adc->Instance->SQR1 = sqr1_bits;\n    return HAL_OK;\n  }\n  adc->State |= 0x10;\n  return HAL_ERROR;\n}",
            "called": [
                "ADC_ConversionStop_Disable",
                "HAL_ADC_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003bd8",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "configure_ADC_08003bd8"
        },
        "FUN_08009d50": {
            "renaming": {
                "FUN_08009d50": "initialize_param_08009d50",
                "param_1": "param",
                "uVar1": "float_val",
                "iVar2": "is_global_impure_ptr",
                "bVar3": "is_param_global_impure_ptr"
            },
            "code": "void initialize_param_08009d50(int param)\n{\n    if (*(int *)(param + 0x18) == 0) {\n        int is_global_impure_ptr = *(int *)global_impure_ptr;\n        *(int *)(param + 0x48) = 0;\n        *(int *)(param + 0x4c) = 0;\n        *(int *)(param + 0x50) = 0;\n        *(int *)(param + 0x28) = 0x3f800000;\n        bool is_param_global_impure_ptr = param == is_global_impure_ptr;\n        if (is_param_global_impure_ptr) {\n            is_global_impure_ptr = 1;\n        }\n        if (is_param_global_impure_ptr) {\n            *(int *)(param + 0x18) = is_global_impure_ptr;\n        }\n        float f1 = __sfp();\n        *(float *)(param + 4) = f1;\n        float f2 = __sfp(param);\n        *(float *)(param + 8) = f2;\n        float f3 = __sfp(param);\n        *(float *)(param + 0xc) = f3;\n        std_isra_0(*(float *)(param + 4),4,0);\n        std_isra_0(*(float *)(param + 8),9,1);\n        std_isra_0(*(float *)(param + 0xc),0x12,2);\n        *(int *)(param + 0x18) = 1;\n    }\n    return;\n}",
            "called": [
                "std.isra.0",
                "__sfp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009d50",
            "calling": [
                "_fflush_r",
                "__swbuf_r",
                "_vfiprintf_r",
                "__swsetup_r",
                "__sfp",
                "iprintf"
            ],
            "imported": false,
            "current_name": "initialize_param_08009d50"
        },
        "FUN_08009108": {
            "renaming": {
                "FUN_08009108": "get_result_if_not_initialized_08009108",
                "param_1": "input_1",
                "param_2": "input_2",
                "DAT_08009120": "initialized_flag"
            },
            "code": "long long get_result_if_not_initialized_08009108(uint input_1, uint input_2)\n{\n  if (DAT_08009120 != 0) {\n    return CONCAT44(input_1, 2);\n  }\n  return (unsigned long long)input_2 << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009108",
            "calling": [
                "__aeabi_atexit"
            ],
            "imported": false,
            "current_name": "get_result_if_not_initialized_08009108"
        },
        "FUN_08009f98": {
            "renaming": {
                "FUN_08009f98": "execute_function_08009f98",
                "param_1": "result",
                "param_2": "function_index",
                "param_3": "arg1",
                "param_4": "arg2",
                "_Var1": "pid",
                "uVar2": "status",
                "iVar3": "function_ptr",
                "pcVar4": "function"
            },
            "code": "uint32_t execute_function_08009f98(uint32_t *result, uint32_t function_index, uint32_t arg1, uint32_t arg2)\n{\n  __pid_t pid;\n  uint32_t status;\n  int32_t function_ptr;\n  function_ptr = result[0x11];\n  if (function_index > 0x1f) {\n    *result = 0x16;\n    return 0xffffffff;\n  }\n  if ((function_ptr != 0) && (*(code **)(function_ptr + function_index * 4) != (code *)0x0)) {\n    code *function = *(code **)(function_ptr + function_index * 4);\n    if (function != (code *)0x1) {\n      if (function == (code *)0xffffffff) {\n        *result = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(function_ptr + function_index * 4) = 0;\n      (*function)(arg1);\n    }\n    return 0;\n  }\n  pid = _getpid_r();\n  status = _kill_r(result, pid, function_index, arg2);\n  return status;\n}",
            "called": [
                "_getpid_r",
                "_kill_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f98",
            "calling": [
                "raise"
            ],
            "imported": false,
            "current_name": "execute_function_08009f98"
        },
        "FUN_0800a18c": {
            "renaming": {
                "std::FUN_0800a18c": "std_abort_if_unknown_calling_convention",
                "FUN_0800a18c": "std_abort_if_unknown_calling_convention_0800a18c"
            },
            "code": "void std_abort_if_unknown_calling_convention_0800a18c(void)\n{\n    abort();\n}\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a18c",
            "calling": [
                "operator()"
            ],
            "imported": false,
            "current_name": "std_abort_if_unknown_calling_convention_0800a18c"
        },
        "FUN_08008a24": {
            "renaming": {
                "FUN_08008a24": "digital_io_write_08008a24",
                "ulPin": "pin",
                "ulVal": "value",
                "_Var1": "is_pin_configured",
                "port": "port",
                "uVar2": "digital_pin"
            },
            "code": "void digital_io_write_08008a24(uint32_t pin, uint32_t value)\n{\n  bool is_pin_configured;\n  GPIO_TypeDef *port;\n  uint32_t digital_pin;\n  \n  if (pin < 0x3c) {\n    digital_pin = (uint32_t)(char)PTR_digitalPin_08008a64[pin];\n  }\n  else {\n    digital_pin = 0xffffffff;\n  }\n  if ((digital_pin != 0xffffffff) &&\n     (is_pin_configured = is_pin_configured((PinName_conflict)digital_pin, (uint32_t *)PTR_g_digPinConfigured_08008a68))) {\n    port = get_GPIO_Port((digital_pin << 0x18) >> 0x1c);\n    digital_io_write_08008a24(port, 1 << (digital_pin & 0xf) & 0xffff, value);\n  }\n  return;\n}",
            "called": [
                "digital_io_write",
                "get_GPIO_Port",
                "is_pin_configured"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a24",
            "calling": [
                "strobeBlinkPin",
                "analogWrite",
                "digitalWriteCallback",
                "ServoIrqHandle",
                "setPinValueCallback",
                "setPinModeCallback"
            ],
            "imported": false,
            "current_name": "digital_io_write_08008a24"
        },
        "FUN_08008020": {
            "renaming": {
                "FUN_08008020": "enable_i2c_listen_mode_08008020",
                "hi2c": "i2c_handle",
                "piVar1": "i2c_obj",
                "get_i2c_obj": "get_i2c_object",
                "isMaster": "is_master"
            },
            "code": "void enable_i2c_listen_mode_08008020(I2C_HandleTypeDef_conflict *i2c_handle){\\n  i2c_t_conflict *i2c_obj = get_i2c_obj(i2c_handle);\\n  if (i2c_obj->isMaster == \"\\0\") {\\n    HAL_I2C_EnableListen_IT(i2c_handle);\\n  }\\n  return;\\n}",
            "called": [
                "HAL_I2C_EnableListen_IT",
                "get_i2c_obj"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008020",
            "calling": [
                "I2C_DMAAbort",
                "I2C_ITError"
            ],
            "imported": false,
            "current_name": "enable_i2c_listen_mode_08008020"
        },
        "FUN_08005dac": {
            "renaming": {
                "FUN_08005dac": "configure_timer_08005dac",
                "TIMx": "timer",
                "OC_Config": "output_channel_config",
                "uVar1": "timer_cr2_value",
                "uVar2": "output_channel_mode_value",
                "uVar3": "output_channel_polarity_value",
                "DAT_08005df0": "PTR_08005df0"
            },
            "code": "void configure_timer_08005dac(TIM_TypeDef_conflict *timer, TIM_OC_InitTypeDef *output_channel_config)\n{\n  uint32_t timer_cr2_value;\n  uint32_t output_channel_mode_value;\n  uint32_t output_channel_polarity_value;\n  \n  timer->CCER = timer->CCER & 0xffffefff;\n  timer_cr2_value = timer->CR2;\n  output_channel_mode_value = output_channel_config->OCMode;\n  output_channel_polarity_value = output_channel_config->OCPolarity;\n  if (timer == DAT_08005df0) {\n    timer_cr2_value = timer_cr2_value & 0xffffbfff | output_channel_config->OCIdleState << 6;\n  }\n  timer->CR2 = timer_cr2_value;\n  timer->CCMR2 = timer->CCMR2 & 0xffff8cff | output_channel_mode_value << 8;\n  timer->CCR4 = output_channel_config->Pulse;\n  timer->CCER = timer->CCER & 0xffffdfff | output_channel_polarity_value << 0xc;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005dac",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_TIM_OC_ConfigChannel"
            ],
            "imported": false,
            "current_name": "configure_timer_08005dac"
        },
        "FUN_080066e8": {
            "renaming": {
                "FUN_080066e8": "check_uart_flag_080066e8",
                "*huart": "huart",
                "Flag": "flag",
                "Status": "status",
                "Tickstart": "start_time",
                "Timeout": "timeout",
                "uVar1": "current_time"
            },
            "code": "HAL_StatusTypeDef check_uart_flag_080066e8(UART_HandleTypeDef *huart, uint32_t flag, FlagStatus status, uint32_t start_time, uint32_t timeout)\n{\n  uint32_t current_time;\n  do {\n    bool flag_status = ((flag & ~huart->Instance->SR) == 0);\n    if (flag_status != (bool)status) {\n      return HAL_OK;\n    }\n  } while ((timeout == 0xffffffff) || ((timeout != 0 && (current_time = HAL_GetTick(), current_time - start_time <= timeout))));\n  huart->Instance->CR1 &= 0xfffffe5f;\n  huart->Instance->CR3 &= 0xfffffffe;\n  huart->gState = HAL_UART_STATE_READY;\n  huart->RxState = HAL_UART_STATE_READY;\n  huart->Lock = HAL_UNLOCKED;\n  return HAL_TIMEOUT;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080066e8",
            "calling": [
                "HAL_UART_Transmit"
            ],
            "imported": false,
            "current_name": "check_uart_flag_080066e8"
        },
        "FUN_08009358": {
            "renaming": {
                "FUN_08009358": "write_to_stream_08009358",
                "param_1": "file_descriptor",
                "param_2": "flags",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "iVar1": "bytes_written",
                "puVar2": "end_of_buffer",
                "iVar3": "bytes_written"
            },
            "code": "int write_to_stream_08009358(int file_descriptor, int flags, char *buffer, int buffer_size) {\n  int bytes_written = 0;\n  char *end_of_buffer = buffer + buffer_size;\n  while (buffer != end_of_buffer) {\n    if (bytes_written == -1) {\n      return -1;\n    }\n    bytes_written = write(file_descriptor, buffer, buffer_size);\n    buffer += bytes_written;\n  }\n  return bytes_written;\n}",
            "called": [
                "__sfputc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009358",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "write_to_stream_08009358"
        },
        "FUN_0800270c": {
            "renaming": {
                "FUN_0800270c": "calculate_buffer_difference_0800270c",
                "this": "wire",
                "*PTR_rxBufferLength_08002718": "buffer_length",
                "*PTR_rxBufferIndex_0800271c": "buffer_index"
            },
            "code": "int calculate_buffer_difference_0800270c(TwoWire *wire) {\n    int *PTR_rxBufferLength_08002718 = *PTR_rxBufferLength_08002718;\n    int *PTR_rxBufferIndex_0800271c = *PTR_rxBufferIndex_0800271c;\n    int difference = (uint)(byte)*PTR_rxBufferLength_08002718 - (uint)(byte)*PTR_rxBufferIndex_0800271c;\n    return difference;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800270c",
            "calling": [
                "readAndReportData"
            ],
            "imported": false,
            "current_name": "calculate_buffer_difference_0800270c"
        },
        "FUN_08007fa0": {
            "renaming": {
                "FUN_08007fa0": "i2c_transfer_08007fa0",
                "hi2c": "i2c_handle",
                "TransferDirection": "transfer_direction",
                "AddrMatchCode": "addr_match_code",
                "piVar1": "i2c_object",
                "get_i2c_obj": "get_i2c_object",
                "i2c_t_conflict": "i2c_object_t",
                "i2cTxRxBufferSize": "tx_rx_buffer_size",
                "slaveMode": "slave_mode",
                "i2c_onSlaveTransmit": "on_slave_transmit",
                "i2cTxRxBuffer": "tx_rx_buffer",
                "_func_void": "void_function_pointer",
                "HAL_I2C_Slave_Sequential_Transmit_IT": "hal_i2c_slave_sequential_transmit_it",
                "HAL_I2C_Slave_Sequential_Receive_IT": "hal_i2c_slave_sequential_receive_it"
            },
            "code": "void i2c_transfer_08007fa0(I2C_HandleTypeDef_conflict *hi2c, uint8_t transfer_direction, uint16_t addr_match_code) {\n  i2c_t_conflict *i2c_object;\n  i2c_object = get_i2c_obj(hi2c);\n  if ((uint)addr_match_code == (hi2c->Init).OwnAddress1) {\n    if (transfer_direction == 0) {\n      i2c_object->tx_rx_buffer_size = 0;\n      i2c_object->slave_mode = 0;\n      if (i2c_object->on_slave_transmit != (_func_void *)0x0) {\n        (*i2c_object->on_slave_transmit)();\n      }\n      HAL_I2C_Slave_Sequential_Transmit_IT(hi2c, i2c_object->tx_rx_buffer, (ushort)i2c_object->tx_rx_buffer_size, 8);\n      return;\n    }\n    i2c_object->slave_mode = 1;\n    HAL_I2C_Slave_Sequential_Receive_IT(hi2c, i2c_object->tx_rx_buffer, 0x20, 8);\n  }\n  return;\n}",
            "called": [
                "HAL_I2C_Slave_Sequential_Receive_IT",
                "HAL_I2C_Slave_Sequential_Transmit_IT",
                "get_i2c_obj"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007fa0",
            "calling": [
                "I2C_Slave_ADDR"
            ],
            "imported": false,
            "current_name": "i2c_transfer_08007fa0"
        },
        "FUN_08002720": {
            "renaming": {
                "FUN_08002720": "read_byte_08002720",
                "this": "two_wire",
                "__fd": "file_descriptor",
                "__buf": "buffer",
                "__nbytes": "nbytes",
                "bVar1": "current_index",
                "bVar2": "read_byte",
                "PTR_rxBufferIndex_08002740": "rx_buffer_index",
                "PTR_rxBufferLength_08002744": "rx_buffer_length",
                "PTR_rxBuffer_08002748": "rx_buffer"
            },
            "code": "ssize_t __thiscall TwoWire::read_byte_08002720(TwoWire *this,int file_descriptor,void *buffer,size_t nbytes)\n{\n  byte current_index = *PTR_rxBufferIndex_08002740;\n  if ((uint)current_index < (uint)(byte)*PTR_rxBufferLength_08002744) {\n    byte read_byte_08002720 = *(byte *)(*(int *)PTR_rxBuffer_08002748 + (uint)current_index);\n    *PTR_rxBufferIndex_08002740 = current_index + 1;\n    return (uint)read_byte_08002720;\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002720",
            "calling": [
                "wireRead"
            ],
            "imported": false,
            "current_name": "read_byte_08002720"
        },
        "FUN_080031ce": {
            "renaming": {
                "FUN_080031ce": "send_sysex_message_080031ce",
                "major": "major_version",
                "minor": "minor_version",
                "bytec": "num_bytes",
                "bytev": "byte_array",
                "p_Var1": "print_function",
                "uVar2": "byte_index"
            },
            "code": "void __thiscall firmata::FirmataMarshaller::send_sysex_message_080031ce(FirmataMarshaller *this, uint8_t major_version, uint8_t minor_version, size_t num_bytes, uint8_t *byte_array)\n{\n    _func_int_varargs *print_function;\n    uint byte_index;\n\n    if (this->FirmataStream != (Stream *)0x0) {\n        print_function = *(this->FirmataStream->super_Print)._vptr_Print;\n        (*print_function)(this, 0xf0, (uint)minor_version, print_function, num_bytes);\n        (**(this->FirmataStream->super_Print)._vptr_Print)(this->FirmataStream, 0x79);\n        (**(this->FirmataStream->super_Print)._vptr_Print)(this->FirmataStream, (uint)major_version);\n        (**(this->FirmataStream->super_Print)._vptr_Print)(this->FirmataStream, (uint)minor_version);\n        for (byte_index = 0; byte_index < num_bytes; byte_index = byte_index + 1) {\n            encodeByteStream(this, 1, byte_array + byte_index, 0);\n        }\n        (**(this->FirmataStream->super_Print)._vptr_Print)(this->FirmataStream, 0xf7);\n    }\n    return;\n}",
            "called": [
                "encodeByteStream"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080031ce",
            "calling": [
                "printFirmwareVersion"
            ],
            "imported": false,
            "current_name": "send_sysex_message_080031ce"
        },
        "FUN_08008b52": {
            "renaming": {
                "FUN_08008b52": "wait_for_tx_complete_08008b52",
                "_written": "is_written",
                "_serial": "serial"
            },
            "code": "void __thiscall HardwareSerial::wait_for_tx_complete_08008b52(HardwareSerial *this)\n{\n  if (this->is_written) {\n    do {\n    } while ((this->serial).tx_head != (this->serial).tx_tail);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b52",
            "calling": [],
            "imported": false,
            "current_name": "wait_for_tx_complete_08008b52"
        },
        "FUN_08002968": {
            "renaming": {
                "FUN_08002968": "initialize_wire_08002968",
                "this": "wire",
                "address": "address",
                "PTR_rxBufferIndex_080029ec": "wire->rx_buffer_index",
                "PTR_rxBufferLength_080029f0": "wire->rx_buffer_length",
                "PTR_rxBuffer_080029f4": "wire->rx_buffer",
                "PTR_rxBufferAllocated_080029f8": "wire->rx_buffer_allocated",
                "PTR_txBufferIndex_080029fc": "wire->tx_buffer_index",
                "PTR_txBufferLength_08002a00": "wire->tx_buffer_length",
                "PTR_txBuffer_08002a04": "wire->tx_buffer",
                "PTR_txBufferAllocated_08002a08": "wire->tx_buffer_allocated",
                "PTR_transmitting_08002a0c": "wire->transmitting",
                "ownAddress": "own_address",
                "_i2c": "i2c_obj",
                "DAT_08002a10": "wire->rx_buffer",
                "master": "wire->master",
                "i2c_custom_init": "i2c_custom_init",
                "i2c_t_conflict": "i2c_t_conflict",
                "i2c_attachSlaveTxEvent": "i2c_attachSlaveTxEvent",
                "i2c_attachSlaveRxEvent": "i2c_attachSlaveRxEvent",
                "DAT_08002a14": "wire->on_slave_transmit",
                "DAT_08002a18": "wire->on_slave_receive"
            },
            "code": "void __thiscall initialize_wire_08002968(TwoWire *wire, uint8_t address) {\n  uint32_t own_address;\n  i2c_t *i2c_obj;\n  PTR_rxBufferIndex_080029ec = 0;\n  PTR_rxBufferLength_080029f0 = 0;\n  if (*(void **)PTR_rxBuffer_080029f4 != (void *)0x0) {\n    memset(*(void **)PTR_rxBuffer_080029f4, 0, (uint)(byte)*PTR_rxBufferAllocated_080029f8);\n  }\n  PTR_txBufferIndex_080029fc = 0;\n  PTR_txBufferLength_08002a00 = 0;\n  if (*(void **)PTR_txBuffer_08002a04 != (void *)0x0) {\n    memset(*(void **)PTR_txBuffer_08002a04, 0, (uint)(byte)*PTR_txBufferAllocated_08002a08);\n  }\n  PTR_transmitting_08002a0c = 0;\n  own_address = (address & 0x7f) << 1;\n  wire->own_address = (uint8_t)own_address;\n  if (address == 0x33) {\n    wire->master = true;\n  }\n  else {\n    wire->master = false;\n  }\n  i2c_obj = &wire->_i2c;\n  i2c_custom_init((i2c_t_conflict *)i2c_obj, PTR_rxBuffer_080029f4, PTR_txBuffer_08002a04, own_address, wire->master);\n  if (wire->master == false) {\n    i2c_attachSlaveTxEvent((i2c_t_conflict *)i2c_obj, DAT_08002a14);\n    i2c_attachSlaveRxEvent((i2c_t_conflict *)i2c_obj, DAT_08002a18);\n  }\n}\n",
            "called": [
                "i2c_attachSlaveRxEvent",
                "i2c_attachSlaveTxEvent",
                "memset",
                "i2c_custom_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002968",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "initialize_wire_08002968"
        },
        "FUN_08004ccc": {
            "renaming": {
                "FUN_08004ccc": "handle_i2c_transfer_08004ccc",
                "hi2c": "handle",
                "uVar1": "transfer_options",
                "pbVar2": "buffer_ptr"
            },
            "code": "HAL_StatusTypeDef_conflict handle_i2c_transfer_08004ccc(I2C_HandleTypeDef_conflict *handle)\n{\n  uint32_t transfer_options = handle->XferOptions;\n  if (handle->State == HAL_I2C_STATE_BUSY_TX) {\n    if (handle->XferCount == 0) {\n      if (((transfer_options == 4) || (transfer_options == 8)) || (transfer_options == 0xffff0000)) {\n        handle->Instance->CR2 = handle->Instance->CR2 & 0xfffff8ff;\n        handle->Instance->CR1 = handle->Instance->CR1 | 0x200;\n        handle->PreviousState = 0;\n        handle->State = HAL_I2C_STATE_READY;\n        if (handle->Mode == HAL_I2C_MODE_MEM) {\n          handle->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MemTxCpltCallback(handle);\n        }\n        else {\n          handle->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MasterTxCpltCallback(handle);\n        }\n      }\n      else {\n        handle->Instance->CR2 = handle->Instance->CR2 & 0xfffff8ff;\n        handle->PreviousState = 0x11;\n        handle->Mode = HAL_I2C_MODE_NONE;\n        handle->State = HAL_I2C_STATE_READY;\n        HAL_I2C_MasterTxCpltCallback(handle);\n      }\n    }\n    else {\n      byte *buffer_ptr = handle->pBuffPtr;\n      handle->pBuffPtr = buffer_ptr + 1;\n      handle->Instance->DR = (uint)*buffer_ptr;\n      handle->XferCount = handle->XferCount - 1;\n    }\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MasterTxCpltCallback",
                "HAL_I2C_MemTxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ccc",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_i2c_transfer_08004ccc"
        },
        "FUN_080042d4": {
            "renaming": {
                "FUN_080042d4": "check_GPIO_pin_state_080042d4",
                "GPIO_PinState": "GPIO pin state",
                "GPIO_TypeDef": "GPIO type definition",
                "GPIOx": "GPIO pointer",
                "GPIO_Pin": "GPIO pin number",
                "IDR": "input data register",
                "GPIO_PIN_RESET": "GPIO pin reset",
                "GPIO_PIN_SET": "GPIO pin set"
            },
            "code": "GPIO_PinState check_GPIO_pin_state_080042d4(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {\n  if ((GPIO_Pin & GPIOx->IDR) == 0) {\n    return GPIO_PIN_RESET;\n  }\n  return GPIO_PIN_SET;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042d4",
            "calling": [
                "digital_io_read"
            ],
            "imported": false,
            "current_name": "check_GPIO_pin_state_080042d4"
        },
        "FUN_0800a07a": {
            "renaming": {
                "FUN_0800a07a": "seek_file_and_update_flags_0800a07a",
                "param_1": "file_descriptor",
                "param_2": "flags_ptr",
                "iVar1": "seek_result",
                "uVar2": "updated_flags",
                "bVar3": "seek_failed"
            },
            "code": "void seek_file_and_update_flags_0800a07a(int file_descriptor, int* flags_ptr) {\n  int seek_result = _lseek_r(file_descriptor, (int)*(short *)(flags_ptr + 0xe));\n  bool seek_failed = seek_result == -1;\n  ushort updated_flags;\n  if (seek_failed) {\n    updated_flags = *(ushort *)(flags_ptr + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(flags_ptr + 0x54) = seek_result;\n    updated_flags = *(ushort *)(flags_ptr + 0xc) | 0x1000;\n  }\n  if (seek_failed) {\n    *(ushort *)(flags_ptr + 0xc) = updated_flags;\n  }\n  else {\n    *(ushort *)(flags_ptr + 0xc) = updated_flags;\n  }\n}",
            "called": [
                "_lseek_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a07a",
            "calling": [],
            "imported": false,
            "current_name": "seek_file_and_update_flags_0800a07a"
        },
        "FUN_080064b0": {
            "renaming": {
                "FUN_080064b0": "initialize_uart_080064b0",
                "*huart": "*uart_handle",
                "Instance": "uart_instance",
                "CR1": "control_register_1",
                "CR3": "control_register_3",
                "RxState": "receive_state",
                "HAL_UART_STATE_READY": "READY"
            },
            "code": "void initialize_uart_080064b0(UART_HandleTypeDef *uart_handle)\n{\n  // Clear the ninth bit of CR1 register\n  uart_handle->Instance->CR1 &= ~(1 << 8);\n  // Clear the LSB of CR3 register\n  uart_handle->Instance->CR3 &= ~(1);\n  // Set the RxState to READY\n  uart_handle->RxState = HAL_UART_STATE_READY;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064b0",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "initialize_uart_080064b0"
        },
        "FUN_08006092": {
            "renaming": {
                "FUN_08006092": "configure_timer_08006092",
                "htim": "timer",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "TIM_HandleTypeDef_conflict": "TIM_HandleTypeDef",
                "HAL_TIM_STATE_RESET": "HAL_TIM_STATE_RESET",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "HAL_TIM_PWM_MspInit": "HAL_TIM_PWM_MspInit",
                "HAL_TIM_STATE_BUSY": "HAL_TIM_STATE_BUSY",
                "TIM_Base_SetConfig": "TIM_Base_SetConfig",
                "HAL_TIM_STATE_READY": "HAL_TIM_STATE_READY",
                "HAL_OK": "HAL_OK",
                "HAL_ERROR": "HAL_ERROR"
            },
            "code": "HAL_StatusTypeDef_conflict configure_timer_08006092(TIM_HandleTypeDef_conflict *timer)\n{\n    if (timer != (TIM_HandleTypeDef_conflict *)0x0) {\n        if (timer->State == HAL_TIM_STATE_RESET) {\n            timer->Lock = HAL_UNLOCKED;\n            HAL_TIM_PWM_MspInit(timer);\n        }\n        timer->State = HAL_TIM_STATE_BUSY;\n        TIM_Base_SetConfig(timer->Instance, &timer->Init);\n        timer->State = HAL_TIM_STATE_READY;\n        return HAL_OK;\n    }\n    return HAL_ERROR;\n}",
            "called": [
                "HAL_TIM_PWM_MspInit",
                "TIM_Base_SetConfig"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006092",
            "calling": [
                "pwm_start"
            ],
            "imported": false,
            "current_name": "configure_timer_08006092"
        },
        "FUN_08008d8c": {
            "renaming": {
                "FUN_08008d8c": "initialize_serial_port_08008d8c",
                "__initialize_p": "should_initialize",
                "__priority": "priority_level"
            },
            "code": "void initialize_serial_port_08008d8c(int should_initialize, int priority_level) {\n  if (should_initialize != 1) {\n    return;\n  }\n  if (priority_level == 0xffff) {\n    HardwareSerial::HardwareSerial((HardwareSerial *)PTR_Serial2_08008dac, DAT_08008da8);\n  }\n  return;\n}",
            "called": [
                "HardwareSerial"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d8c",
            "calling": [
                "_GLOBAL__sub_I_Serial2"
            ],
            "imported": false,
            "current_name": "initialize_serial_port_08008d8c"
        },
        "FUN_08008038": {
            "renaming": {
                "FUN_08008038": "handle_i2c_event_interrupt_08008038",
                "PTR_i2c_handles_08008044": "i2c_handles"
            },
            "code": "void handle_i2c_event_interrupt_08008038(void)\n{\n  I2C_HandleTypeDef_conflict** PTR_i2c_handles_08008044 = PTR_PTR_i2c_handles_08008044_08008044;\n  HAL_I2C_EV_IRQHandler(*PTR_i2c_handles_08008044);\n  return;\n}",
            "called": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008038",
            "calling": [],
            "imported": false,
            "current_name": "handle_i2c_event_interrupt_08008038"
        },
        "FUN_08009124": {
            "renaming": {
                "FUN_08009124": "format_print_08009124",
                "__stream": "file",
                "__format": "format",
                "iVar1": "return_value",
                "in_r2": "arg_1",
                "in_r3": "arg_2",
                "uStack_8": "args",
                "uStack_4": "stream",
                "PTR__impure_ptr_08009144": "PTR__impure_ptr_08009144"
            },
            "code": "int format_print_08009124(FILE *file, char *format, ...)\n{\n  int return_value;\n  va_list args;\n  va_start(args, format);\n  return_value = vfprintf(file, format, args);\n  va_end(args);\n  return return_value;\n}",
            "called": [
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009124",
            "calling": [
                "__assert_func"
            ],
            "imported": false,
            "current_name": "format_print_08009124"
        },
        "FUN_080064ae": {
            "renaming": {
                "FUN_080064ae": "do_nothing_080064ae"
            },
            "code": "\nvoid do_nothing_080064ae(TIM_HandleTypeDef_conflict *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064ae",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_080064ae"
        },
        "FUN_080064ac": {
            "renaming": {
                "FUN_080064ac": "do_nothing_080064ac"
            },
            "code": "\nvoid do_nothing_080064ac(TIM_HandleTypeDef_conflict *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064ac",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_080064ac"
        },
        "FUN_08005cb4": {
            "renaming": {
                "FUN_08005cb4": "alarm_handler_08005cb4",
                "hrtc": "rtc_handle",
                "Instance": "rtc_instance",
                "CRH": "rtc_crh",
                "CRL": "rtc_crl",
                "HAL_RTC_AlarmAEventCallback": "handle_alarm_event",
                "DAT_08005ce8": "data_pointer"
            },
            "code": "void alarm_handler_08005cb4(RTC_HandleTypeDef *rtc_handle)\n{\n    int crh2 = rtc_handle->Instance->CRH & 2;\n    int crl2 = rtc_handle->Instance->CRL & 2;\n\n    if (crh2 != 0 && crl2 != 0)\n    {\n        HAL_RTC_AlarmAEventCallback(rtc_handle);\n        rtc_handle->Instance->CRL = 0xfffffffd;\n    }\n\n    *(int *)(DAT_08005ce8 + 0x14) = 0x20000;\n    rtc_handle->State = HAL_RTC_STATE_READY;\n    return;\n}",
            "called": [
                "HAL_RTC_AlarmAEventCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cb4",
            "calling": [
                "RTC_Alarm_IRQHandler"
            ],
            "imported": false,
            "current_name": "alarm_handler_08005cb4"
        },
        "FUN_080042e2": {
            "renaming": {
                "FUN_080042e2": "set_gpio_pin_state_080042e2",
                "GPIOx": "gpio",
                "GPIO_Pin": "pin",
                "PinState": "state",
                "uint": "uint32_t",
                "BSRR": "bsrr"
            },
            "code": "void set_gpio_pin_state_080042e2(GPIO_TypeDef *gpio, uint16_t pin, GPIO_PinState state) {\n  if (state == GPIO_PIN_RESET) {\n    gpio->BSRR = (uint32_t)pin << 16;\n  } else {\n    gpio->BSRR = (uint32_t)pin;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042e2",
            "calling": [
                "digital_io_write"
            ],
            "imported": false,
            "current_name": "set_gpio_pin_state_080042e2"
        },
        "FUN_080088e0": {
            "renaming": {
                "FUN_080088e0": "set_pwm_output_080088e0",
                "ulPin": "pin_number",
                "ulValue": "output_value",
                "_Var1": "is_pwm_pin",
                "uVar2": "write_resolution",
                "pin": "pin",
                "PTR_digitalPin_0800897c": "digitalPin",
                "NC": "NC",
                "pin_in_pinmap": "pin_in_pinmap",
                "PinMap_conflict": "PinMap_PWM",
                "is_pin_configured": "is_pin_configured",
                "set_pin_configured": "set_pin_configured",
                "PTR_g_anOutputPinConfigured_08008984": "g_anOutputPinConfigured",
                "PTR__writeResolution_08008988": "writeResolution",
                "pwm_start": "pwm_start",
                "DAT_0800898c": "DAT_PWM_FREQ",
                "pinMode": "pinMode",
                "digitalWrite": "digitalWrite",
                "LOW": "LOW",
                "HIGH": "HIGH"
            },
            "code": "void set_pwm_output_080088e0(uint32_t pin_number, uint32_t output_value)\n{\n    _Bool is_pwm_pin;\n    uint write_resolution;\n    PinName_conflict pin;\n    uint shift_amount;\n\n    if (pin_number < 0x3c) {\n        pin = PTR_digitalPin_0800897c[pin_number];\n    }\n    else {\n        pin = NC;\n    }\n\n    if (pin != NC) {\n        is_pwm_pin = pin_in_pinmap(pin, (PinMap_conflict *)PinMap_PWM);\n        if (is_pwm_pin) {\n            if (!is_pin_configured(pin, (uint32_t *)PTR_g_anOutputPinConfigured_08008984)) {\n                set_pin_configured(pin, (uint32_t *)PTR_g_anOutputPinConfigured_08008984);\n            }\n            write_resolution = *(uint *)PTR__writeResolution_08008988;\n            shift_amount = (write_resolution < 9) ? (8 - write_resolution) : (write_resolution - 8);\n            output_value = (write_resolution != 8) ? (output_value << shift_amount) : output_value;\n            pwm_start(pin, DAT_0800898c, 0xff, output_value, !_Var1);\n        }\n        else {\n            pinMode(pin_number, OUTPUT);\n            write_resolution = *(uint *)PTR__writeResolution_08008988;\n            shift_amount = (write_resolution < 9) ? (8 - write_resolution) : (write_resolution - 8);\n            output_value = (write_resolution != 8) ? (output_value << shift_amount) : output_value;\n            digitalWrite(pin_number, (output_value < 0x80) ? LOW : HIGH);\n        }\n    }\n}\n",
            "called": [
                "pin_in_pinmap",
                "set_pin_configured",
                "digitalWrite",
                "pinMode",
                "pwm_start",
                "is_pin_configured"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080088e0",
            "calling": [
                "analogWriteCallback",
                "setPinModeCallback"
            ],
            "imported": false,
            "current_name": "set_pwm_output_080088e0"
        },
        "FUN_08008b66": {
            "renaming": {
                "FUN_08008b66": "receive_data_08008b66",
                "obj": "serial_object",
                "iVar1": "receive_status",
                "uVar2": "next_rx_head",
                "c": "received_char"
            },
            "code": "void receive_data_08008b66(serial_t_conflict *serial_object) {\n  int receive_status;\n  ushort next_rx_head;\n  uchar received_char;\n  receive_status = uart_getc((serial_t *)serial_object, &received_char);\n  if ((receive_status == 0) && ((next_rx_head = (serial_object->rx_head + 1) & 0x3f) != serial_object->rx_tail)) {\n    serial_object->rx_buff[serial_object->rx_head] = received_char;\n    serial_object->rx_head = next_rx_head;\n  }\n  return;\n}",
            "called": [
                "uart_getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b66",
            "calling": [],
            "imported": false,
            "current_name": "receive_data_08008b66"
        },
        "FUN_0800a3a0": {
            "renaming": {
                "std::ctype_byname<char>::FUN_0800a3a0": "set_flags",
                "FUN_0800a3a0": "set_flags_0800a3a0"
            },
            "code": "void set_flags_0800a3a0(void)\n{\n  if (*(int *)PTR_id_0800a404 < 0)\n  {\n    *(undefined4 *)PTR_id_0800a404 = 1;\n  }\n  if (*(int *)PTR_id_0800a408 < 0)\n  {\n    *(undefined4 *)PTR_id_0800a408 = 1;\n  }\n  if (*(int *)PTR_id_0800a40c < 0)\n  {\n    *(undefined4 *)PTR_id_0800a40c = 1;\n  }\n  if (*(int *)PTR_id_0800a410 < 0)\n  {\n    *(undefined4 *)PTR_id_0800a410 = 1;\n  }\n  if (*(int *)PTR_id_0800a414 < 0)\n  {\n    *(undefined4 *)PTR_id_0800a414 = 1;\n  }\n  if (*(int *)PTR_id_0800a418 < 0)\n  {\n    *(undefined4 *)PTR_id_0800a418 = 1;\n  }\n  if (*(int *)PTR_id_0800a41c < 0)\n  {\n    *(undefined4 *)PTR_id_0800a41c = 1;\n  }\n  if (*(int *)PTR_id_0800a420 < 0)\n  {\n    *(undefined4 *)PTR_id_0800a420 = 1;\n  }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a3a0",
            "calling": [],
            "imported": false,
            "current_name": "set_flags_0800a3a0"
        },
        "FUN_08008048": {
            "renaming": {
                "FUN_08008048": "handle_i2c_error_interrupt_08008048",
                "PTR_i2c_handles_08008054": "i2c_handles"
            },
            "code": "void handle_i2c_error_interrupt_08008048(void)\n{\n  HAL_I2C_ER_IRQHandler(*PTR_i2c_handles_08008054);\n  return;\n}",
            "called": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008048",
            "calling": [],
            "imported": false,
            "current_name": "handle_i2c_error_interrupt_08008048"
        },
        "FUN_080053cc": {
            "renaming": {
                "FUN_080053cc": "reset_I2C_DMA_transfer_080053cc",
                "hdma": "dma_handle",
                "hi2c": "i2c_handle",
                "HAL_I2C_STATE_ABORT": "HAL_I2C_STATE_ABORT",
                "HAL_I2C_STATE_READY": "HAL_I2C_STATE_READY",
                "HAL_I2C_MODE_NONE": "HAL_I2C_MODE_NONE",
                "_func_void___DMA_HandleTypeDef_ptr_conflict *": "callback_function_pointer",
                "XferCount": "transfer_count",
                "hdmatx": "tx_dma_handle",
                "hdmarx": "rx_dma_handle",
                "State": "i2c_state",
                "Mode": "i2c_mode",
                "ErrorCode": "error_code",
                "Instance": "i2c_instance",
                "CR1": "control_register_1"
            },
            "code": "void reset_I2C_DMA_transfer_080053cc(DMA_HandleTypeDef_conflict *dma_handle)\n{\n  I2C_HandleTypeDef_conflict *i2c_handle;\n  i2c_handle = (I2C_HandleTypeDef_conflict *)dma_handle->Parent;\n  i2c_handle->Instance->CR1 &= ~(1 << 10);\n  i2c_handle->XferCount = 0;\n  i2c_handle->hdmatx->XferAbortCallback = NULL;\n  i2c_handle->hdmarx->XferAbortCallback = NULL;\n  if (i2c_handle->State != HAL_I2C_STATE_ABORT) {\n    i2c_handle->State = HAL_I2C_STATE_READY;\n    i2c_handle->Mode = HAL_I2C_MODE_NONE;\n    i2c_handle->Instance->CR1 &= ~(1 << 0);\n    HAL_I2C_ErrorCallback(i2c_handle);\n    return;\n  }\n  i2c_handle->State = HAL_I2C_STATE_READY;\n  i2c_handle->Mode = HAL_I2C_MODE_NONE;\n  i2c_handle->ErrorCode = 0;\n  i2c_handle->Instance->CR1 &= ~(1 << 0);\n  HAL_I2C_AbortCpltCallback(i2c_handle);\n  return;\n}",
            "called": [
                "HAL_I2C_AbortCpltCallback",
                "HAL_I2C_ErrorCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053cc",
            "calling": [],
            "imported": false,
            "current_name": "reset_I2C_DMA_transfer_080053cc"
        },
        "FUN_080087bc": {
            "renaming": {
                "FUN_080087bc": "handle_uart_interrupt_080087bc",
                "PTR_uart_handlers_080087d0": "PTR_uart_handlers",
                "HAL_NVIC_ClearPendingIRQ": "clear_pending_interrupt",
                "HAL_UART_IRQHandler": "handle_uart_interrupt",
                "UART_HandleTypeDef": "uart_handlers"
            },
            "code": "void handle_uart_interrupt_080087bc(void)\n{\n  HAL_NVIC_ClearPendingIRQ(USART1_IRQn);\n  UART_HandleTypeDef* uart_handlers = *(UART_HandleTypeDef**)PTR_uart_handlers_080087d0_080087d0;\n  HAL_UART_IRQHandler(uart_handlers);\n  return;\n}",
            "called": [
                "HAL_UART_IRQHandler",
                "HAL_NVIC_ClearPendingIRQ"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080087bc",
            "calling": [],
            "imported": false,
            "current_name": "handle_uart_interrupt_080087bc"
        },
        "FUN_080042f0": {
            "renaming": {
                "FUN_080042f0": "handle_gpio_interrupt_080042f0",
                "GPIO_Pin": "pin",
                "DAT_08004308": "gpio_data"
            },
            "code": "void handle_gpio_interrupt_080042f0(uint16_t pin) {\n  uint32_t* DAT_08004308 = (uint32_t*)(DAT_08004308 + 0x14);\n  uint32_t current_pins = *DAT_08004308;\n  if ((current_pins & (uint32_t)pin) != 0) {\n    *DAT_08004308 = (uint32_t)pin;\n    HAL_GPIO_EXTI_Callback(pin);\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042f0",
            "calling": [
                "EXTI2_IRQHandler",
                "EXTI0_IRQHandler",
                "EXTI1_IRQHandler",
                "EXTI9_5_IRQHandler",
                "EXTI15_10_IRQHandler",
                "EXTI3_IRQHandler",
                "EXTI4_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_gpio_interrupt_080042f0"
        },
        "FUN_080087d4": {
            "renaming": {
                "FUN_080087d4": "handle_UART_interrupt_080087d4",
                "USART2_IRQn": "UART_interrupt",
                "PTR_uart_handlers_080087e8": "PTR_uart_handlers",
                "HAL_NVIC_ClearPendingIRQ": "clear_pending_IRQ",
                "UART_HandleTypeDef": "uart_handler",
                "HAL_UART_IRQHandler": "handle_UART_IRQ"
            },
            "code": "void handle_UART_interrupt_080087d4(void)\n{\n  HAL_NVIC_ClearPendingIRQ(USART2_IRQn);\n  UART_HandleTypeDef* uart_handler = *(UART_HandleTypeDef **)(PTR_uart_handlers_080087e8_080087e8 + 4);\n  HAL_UART_IRQHandler(uart_handler);\n  return;\n}",
            "called": [
                "HAL_UART_IRQHandler",
                "HAL_NVIC_ClearPendingIRQ"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080087d4",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART_interrupt_080087d4"
        },
        "FUN_0800a09e": {
            "renaming": {
                "FUN_0800a09e": "close_file_descriptor_0800a09e",
                "param_1": "stream",
                "param_2": "file_descriptor_offset"
            },
            "code": "void close_file_descriptor_0800a09e(void *stream, int file_descriptor_offset) {\n    _close_r(stream, (int)*(short *)(file_descriptor_offset + 0xe));\n    return;\n}",
            "called": [
                "_close_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a09e",
            "calling": [],
            "imported": false,
            "current_name": "close_file_descriptor_0800a09e"
        },
        "FUN_080076e0": {
            "renaming": {
                "FUN_080076e0": "disable_timer_interrupt_080076e0",
                "*obj": "timer_obj",
                "HVar1": "hal_status",
                "uVar2": "timer_irq_num",
                "obj->irqHandleOC": "timer_obj->irqHandleOC"
            },
            "code": "void disable_timer_interrupt_080076e0(stimer_t_conflict *timer_obj)\n{\n  HAL_StatusTypeDef_conflict hal_status;\n  uint32_t timer_irq_num;\n  timer_obj->irqHandleOC = (_func_void_stimer_t_ptr_uint32_t_conflict *)0x0;\n  timer_irq_num = getTimerIrq(timer_obj->timer);\n  HAL_NVIC_DisableIRQ((IRQn_Type_conflict)timer_irq_num);\n  hal_status = HAL_TIM_OC_DeInit(&timer_obj->handle);\n  if (hal_status == HAL_OK) {\n    HAL_TIM_OC_Stop_IT(&timer_obj->handle, 0);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_OC_DeInit",
                "getTimerIrq",
                "HAL_TIM_OC_Stop_IT",
                "HAL_NVIC_DisableIRQ"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080076e0",
            "calling": [
                "finISR"
            ],
            "imported": false,
            "current_name": "disable_timer_interrupt_080076e0"
        },
        "FUN_08002f14": {
            "renaming": {
                "__thiscall firmata::FirmataClass::FUN_08002f14": "update_marshaller",
                "this": "this_instance",
                "string": "string_parameter",
                "&this->marshaller": "&this_instance->marshaller",
                "FUN_08002f14": "update_marshaller_08002f14"
            },
            "code": "void __thiscall firmata::FirmataClass::update_marshaller_08002f14(FirmataClass *this_instance,char *string_parameter)\n{\n  FirmataMarshaller::update_marshaller_08002f14(&this_instance->marshaller,string_parameter);\n  return;\n}",
            "called": [
                "sendString"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f14",
            "calling": [
                "attachServo",
                "sysexCallback",
                "readAndReportData",
                "setPinModeCallback"
            ],
            "imported": false,
            "current_name": "update_marshaller_08002f14"
        }
    },
    "used_tokens": 325286,
    "layers": [
        [
            "FUN_080058ac",
            "FUN_0800542a",
            "FUN_08002c40",
            "FUN_0800694c",
            "FUN_08004f3c",
            "FUN_08003106",
            "FUN_0800018c",
            "FUN_08003f94",
            "FUN_08002c68",
            "FUN_0800430c",
            "FUN_08003350",
            "FUN_08007710",
            "FUN_08003474",
            "FUN_08008804",
            "FUN_08004e3c",
            "FUN_08007718",
            "FUN_08002a30",
            "FUN_08009cd0",
            "FUN_0800322c",
            "FUN_08003760",
            "FUN_08000130",
            "FUN_08002798",
            "FUN_0800242c",
            "FUN_08002e44",
            "FUN_0800a0a8",
            "FUN_08003f30",
            "FUN_080073d8",
            "FUN_080085dc",
            "FUN_08008db0",
            "FUN_08002444",
            "FUN_0800906c",
            "FUN_08003658",
            "FUN_08009a80",
            "FUN_080062f4",
            "FUN_080073e8",
            "FUN_0800267c",
            "FUN_0800376c",
            "FUN_08003e20",
            "FUN_08005840",
            "FUN_08003306",
            "FUN_08002578",
            "FUN_08006932",
            "FUN_080060c4",
            "FUN_08009eac",
            "FUN_08008dbe",
            "FUN_080072d8",
            "FUN_08002b00",
            "FUN_08002f84",
            "FUN_08009094",
            "FUN_0800a0cc",
            "FUN_08002580",
            "FUN_080073ec",
            "FUN_08008ef4",
            "FUN_08002c1e",
            "FUN_08002f94",
            "FUN_08001b48",
            "FUN_08005df4",
            "FUN_08009148",
            "FUN_080099dc",
            "FUN_08009024",
            "FUN_080064cc",
            "FUN_08008058",
            "FUN_08004ac2",
            "FUN_08006ca8",
            "FUN_08000214",
            "FUN_08005bb8",
            "FUN_080063c0",
            "FUN_0800274c",
            "FUN_08009270",
            "FUN_08009038",
            "FUN_08005aa4",
            "FUN_08008068",
            "FUN_08002400",
            "FUN_08000588",
            "FUN_08002644",
            "FUN_08002f1e",
            "FUN_0800902e",
            "FUN_08009042",
            "FUN_08009c7c",
            "FUN_08009b5c",
            "FUN_08008a6c",
            "FUN_080085b8",
            "FUN_08001c08",
            "FUN_080075dc",
            "FUN_080087ec",
            "FUN_08007ff0",
            "FUN_08002774",
            "FUN_080052f0",
            "FUN_08002f2c",
            "FUN_08004954",
            "FUN_08005cec",
            "FUN_08003748",
            "FUN_080040e8",
            "FUN_08009b6c",
            "FUN_0800010c",
            "FUN_080086e8",
            "FUN_08001c18",
            "FUN_08009056",
            "FUN_08002e1a",
            "FUN_0800904c",
            "FUN_080073ae",
            "FUN_08003f0c",
            "FUN_08000488",
            "FUN_08006bb8",
            "FUN_08004aec",
            "FUN_08007ede",
            "FUN_08004728",
            "FUN_080074e0",
            "FUN_080073c0",
            "FUN_080084b0",
            "FUN_080095a8",
            "FUN_08008b2a",
            "FUN_08003bd8",
            "FUN_08009d50",
            "FUN_08009108",
            "FUN_08009f98",
            "FUN_08008a24",
            "FUN_08008020",
            "FUN_08005dac",
            "FUN_080066e8",
            "FUN_08009358",
            "FUN_0800270c",
            "FUN_08007fa0",
            "FUN_08002720",
            "FUN_080031ce",
            "FUN_08008b52",
            "FUN_08002968",
            "FUN_08004ccc",
            "FUN_080042d4",
            "FUN_0800a07a",
            "FUN_080064b0",
            "FUN_08006092",
            "FUN_08008d8c",
            "FUN_08008038",
            "FUN_08005cb4",
            "FUN_080042e2",
            "FUN_080088e0",
            "FUN_08008b66",
            "FUN_0800a3a0",
            "FUN_08008048",
            "FUN_080053cc",
            "FUN_080087bc",
            "FUN_080042f0",
            "FUN_080087d4",
            "FUN_0800a09e",
            "FUN_080076e0"
        ],
        [
            "FUN_08002ce0",
            "FUN_08002ac0",
            "FUN_08002ef2",
            "FUN_08002efe",
            "FUN_08008d30",
            "FUN_08003048",
            "FUN_0800885c",
            "FUN_08003002",
            "FUN_08009908",
            "FUN_08009cdc",
            "FUN_080026b0",
            "FUN_080027f0",
            "FUN_080036a2",
            "FUN_08002a26",
            "FUN_080091a0",
            "FUN_08002a1c",
            "FUN_08009190",
            "FUN_08002c00",
            "FUN_08008ed6",
            "FUN_08002c14",
            "FUN_08009084",
            "FUN_08009fe8",
            "FUN_08008eec",
            "FUN_08003724",
            "FUN_08002f0a",
            "FUN_08002634",
            "FUN_080098d8",
            "FUN_0800288c",
            "FUN_08002e26",
            "FUN_0800a18c",
            "FUN_08009124",
            "FUN_08002f14"
        ]
    ],
    "locked_functions": []
}