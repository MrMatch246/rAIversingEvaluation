{
    "functions": {
        "FUN_0800010c": {
            "additional_data": {
                "DAT_200000f4": {
                    "1": "status_flag",
                    "14": "flag",
                    "3": "flag_variable"
                },
                "FUN_0800010c": {
                    "1": "set_flag_if_false",
                    "2": "update_flag",
                    "25": "initialize_flag"
                },
                "param_1": {
                    "1": "flag_value",
                    "10": "input_value",
                    "2": "input_param",
                    "4": "input_parameter",
                    "9": "input"
                }
            },
            "called": [
                "FUN_0800a424"
            ],
            "calling": [],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000118) */\n\nundefined4 initialize_flag_0800010c(undefined4 input_value)\n\n{\n  if ((char)DAT_200000f4 == '\\0') {\n    DAT_200000f4._0_1_ = '\\x01';\n  }\n  return input_value;\n}\n\n",
            "current_name": "initialize_flag_0800010c",
            "entrypoint": "0x0800010c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800010c": "initialize_flag_0800010c",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000178": {
            "additional_data": {
                "FUN_08000178": {
                    "1": "get_null_terminated_string_length",
                    "13": "find_end_of_string",
                    "2": "get_end_of_string",
                    "3": "get_string_length"
                },
                "cVar1": {
                    "1": "char_val",
                    "17": "current_char",
                    "5": "current_char_value",
                    "6": "current_character"
                },
                "param_1": {
                    "11": "input_string",
                    "13": "string",
                    "7": "str"
                },
                "pcVar2": {
                    "1": "current_char_ptr",
                    "10": "next_char",
                    "3": "next_char_pointer",
                    "5": "next_character",
                    "6": "next_char_ptr"
                },
                "pcVar3": {
                    "1": "current_character_ptr",
                    "2": "current_char_pointer",
                    "3": "current_position",
                    "6": "current_char_ptr",
                    "8": "current_char"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002e44",
                "FUN_080032a2"
            ],
            "code": "\nchar * find_end_of_string_08000178(char *string)\n\n{\n  char current_char;\n  char *next_char;\n  char *current_char;\n  \n  current_char = string;\n  do {\n    next_char = current_char + 1;\n    current_char = *current_char;\n    current_char = next_char;\n  } while (current_char != '\\0');\n  return next_char + (-1 - (int)string);\n}\n\n",
            "current_name": "find_end_of_string_08000178",
            "entrypoint": "0x08000178",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000178": "find_end_of_string_08000178",
                "cVar1": "current_char",
                "param_1": "string",
                "pcVar2": "next_char",
                "pcVar3": "current_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000188": {
            "additional_data": {
                "": {
                    "1": ""
                },
                "FUN_08000188": {
                    "1": "call_software_interrupt",
                    "2": "trigger_software_interrupt",
                    "3": "execute_software_interrupt",
                    "4": "execute_system_call",
                    "5": "invoke_system_interrupt",
                    "6": "execute_system_interrupt"
                },
                "PTR_08000188": {
                    "1": "execute_software_interrupt_ptr"
                },
                "PTR_software_interrupt": {
                    "1": "software_interrupt"
                },
                "software_interrupt": {
                    "1": "interrupt_handler",
                    "2": "trigger_system_interrupt",
                    "3": "execute_interrupt",
                    "5": "invoke_interrupt"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800018c"
            ],
            "code": "\nvoid execute_system_interrupt_08000188(void)\n\n{\n  invoke_interrupt(0x3f);\n  return;\n}\n\n",
            "current_name": "execute_system_interrupt_08000188",
            "entrypoint": "0x08000188",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000188": "execute_system_interrupt_08000188",
                "software_interrupt": "invoke_interrupt"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800018c": {
            "additional_data": {
                "FUN_0800018c": {
                    "1": "execute_interrupted_system_call",
                    "16": "execute_system_interrupt",
                    "2": "execute_system_interrupt_1",
                    "8": "execute_interrupt"
                },
                "param_1": {
                    "1": "input1",
                    "10": "input_param",
                    "2": "param",
                    "3": "arg1"
                },
                "param_2": {
                    "1": "arg2",
                    "4": "unused_param"
                },
                "param_3": {
                    "1": "unused_param2"
                },
                "param_4": {
                    "1": "interrupt_data",
                    "3": "arg4",
                    "4": "output_param"
                },
                "uVar1": {
                    "1": "execution_result",
                    "18": "result",
                    "2": "interrupt_result"
                }
            },
            "called": [
                "FUN_08000188"
            ],
            "calling": [
                "FUN_08001b48"
            ],
            "code": "\nundefined4 execute_system_interrupt_0800018c(undefined4 input_param,undefined4 unused_param,undefined4 unused_param,undefined4 output_param)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000110 != 0) {\n    return 0;\n  }\n  result = execute_system_interrupt_0800018c_08000188(1,input_param,0,0,output_param);\n  return result;\n}\n\n",
            "current_name": "execute_system_interrupt_0800018c",
            "entrypoint": "0x0800018c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800018c": "execute_system_interrupt_0800018c",
                "param_1": "input_param",
                "param_2": "unused_param",
                "param_3": "unused_param",
                "param_4": "output_param",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000214": {
            "additional_data": {
                "&DAT_0800a6cc": {
                    "4": "value_array"
                },
                "&DAT_0800a908": {
                    "1": "character_data",
                    "6": "character_array"
                },
                "&DAT_200001f0": {
                    "1": "array_offset_array"
                },
                "&DAT_2000022c": {
                    "1": "array1",
                    "2": "array_data",
                    "3": "array"
                },
                "&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[param_1] * 3": {
                    "1": "array_value_offset"
                },
                "&DAT_200003d4": {
                    "1": "memory_array",
                    "2": "memory_data"
                },
                "(int)(char)(&DAT_0800a908)[param_1]": {
                    "1": "search_character",
                    "2": "character"
                },
                "(uint)(byte)(&DAT_200001f0)[param_1]": {
                    "1": "index"
                },
                "DAT_0800a6cc": {
                    "1": "array_to_search"
                },
                "DAT_0800a908": {
                    "1": "character_array"
                },
                "DAT_200001f0": {
                    "1": "byte_array"
                },
                "DAT_2000022c": {
                    "1": "array_to_update"
                },
                "DAT_200003d4": {
                    "1": "data_array",
                    "2": "memory"
                },
                "FUN_08000214": {
                    "1": "process_and_store_value",
                    "3": "process_parameter",
                    "4": "process_data",
                    "7": "process_and_write_value",
                    "8": "process_value"
                },
                "F_UNK_08000214": {
                    "1": "process_memory_value"
                },
                "PTR_200001f0": {
                    "1": "array_offset"
                },
                "PTR_2000022c": {
                    "1": "array"
                },
                "bVar1": {
                    "1": "is_allowed",
                    "15": "is_valid",
                    "2": "is_character_valid",
                    "3": "is_character_found"
                },
                "byte": {
                    "1": "byte_value"
                },
                "find_character_index_080036ac": {
                    "1": "find_char_index",
                    "20": "find_character_index"
                },
                "find_value_in_array_0800738a": {
                    "21": "find_value_in_array"
                },
                "get_value_from_offset_08002fa0": {
                    "12": "get_value_from_offset",
                    "3": "get_offset_value"
                },
                "iVar2": {
                    "1": "index_result",
                    "2": "return_value",
                    "23": "result",
                    "3": "character_index"
                },
                "param_1": {
                    "1": "input_param",
                    "12": "index",
                    "2": "data_index",
                    "5": "value",
                    "8": "value_index"
                },
                "param_2": {
                    "1": "param",
                    "15": "value",
                    "9": "new_value"
                },
                "param_3": {
                    "1": "value2",
                    "13": "param_3",
                    "2": "param1",
                    "3": "offset",
                    "7": "param3"
                },
                "param_4": {
                    "1": "value_3",
                    "13": "param_4",
                    "2": "param2",
                    "3": "size",
                    "7": "param4"
                },
                "process_parameter_080088e0": {
                    "1": "process_parameter_value",
                    "20": "process_parameter"
                },
                "update_array_value_080026b0": {
                    "22": "update_array_value"
                },
                "write_value_to_memory_08002fc2": {
                    "18": "write_value_to_memory",
                    "4": "write_to_memory"
                }
            },
            "called": [
                "FUN_0800021a"
            ],
            "calling": [
                "FUN_08001cd0"
            ],
            "code": "\nvoid process_value_08000214(uint index,undefined4 value,undefined4 param_3,undefined4 param_4)\n\n{\n  bool is_valid;\n  int result;\n  \n  if (0x3b < (int)index) {\n    return;\n  }\n  result = get_value_from_offset(&DAT_200003d4,index,param_3,param_4,param_4);\n  if (result == 3) {\n    if (index < 0x3c) {\n      if ((&DAT_0800a908)[index] == -1) {\n        result = 0;\n      }\n      else {\n        result = find_character_index();\n        if (result == 0) {\n          result = 0;\n        }\n        else {\n          result = find_character_index((int)(char)(&DAT_0800a908)[index]);\n          if (result == 1) {\n            result = 0;\n          }\n          else {\n            result = find_value_in_array((int)(char)(&DAT_0800a908)[index],&DAT_0800a6cc);\n          }\n        }\n      }\n    }\n    else {\n      result = 0;\n    }\n    if (result != 0) {\n      process_parameter(index,value);\n    }\n    write_value_to_memory(&DAT_200003d4,index,value);\n  }\n  else if (result == 4) {\n    if (index < 0x3c) {\n      if ((&DAT_0800a908)[index] == -1) {\n        is_valid = false;\n      }\n      else {\n        result = find_character_index();\n        if (result == 0) {\n          is_valid = false;\n        }\n        else {\n          result = find_character_index((int)(char)(&DAT_0800a908)[index]);\n          if (result == 1) {\n            is_valid = false;\n          }\n          else {\n            is_valid = true;\n          }\n        }\n      }\n    }\n    else {\n      is_valid = false;\n    }\n    if (is_valid) {\n      update_array_value(&DAT_2000022c + (uint)(byte_value)(&DAT_200001f0)[index] * 3,value);\n    }\n    write_value_to_memory(&DAT_200003d4,index,value);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "process_value_08000214",
            "entrypoint": "0x08000214",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000214": "process_value_08000214",
                "bVar1": "is_valid",
                "byte": "byte_value",
                "find_character_index_080036ac": "find_character_index",
                "find_value_in_array_0800738a": "find_value_in_array",
                "get_value_from_offset_08002fa0": "get_value_from_offset",
                "iVar2": "result",
                "param_1": "index",
                "param_2": "value",
                "process_parameter_080088e0": "process_parameter",
                "update_array_value_080026b0": "update_array_value",
                "write_value_to_memory_08002fc2": "write_value_to_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800021a": {
            "additional_data": {
                "&DAT_0800a6cc": {
                    "2": "array_data",
                    "3": "value_array"
                },
                "&DAT_0800a908": {
                    "2": "character_data",
                    "5": "character_array"
                },
                "&DAT_200001f0": {
                    "1": "array_offset",
                    "3": "index_array"
                },
                "&DAT_2000022c": {
                    "1": "array_data",
                    "3": "array"
                },
                "&DAT_200003d4": {
                    "1": "memory_array",
                    "2": "data_array",
                    "3": "memory_data"
                },
                "DAT_0800a6cc": {
                    "1": "value_array"
                },
                "DAT_0800a908": {
                    "2": "character_array"
                },
                "DAT_200001f0": {
                    "1": "index_array"
                },
                "DAT_2000022c": {
                    "1": "array"
                },
                "DAT_200003d4": {
                    "1": "memory"
                },
                "FUN_0800021a": {
                    "1": "process_value_and_write_to_memory",
                    "10": "process_value",
                    "2": "process_parameter_and_write_to_memory",
                    "6": "process_data",
                    "8": "process_and_write_value"
                },
                "bVar1": {
                    "1": "is_character",
                    "17": "is_valid",
                    "2": "is_character_valid"
                },
                "char": {
                    "1": "character"
                },
                "find_character_index_080036ac": {
                    "20": "find_character_index"
                },
                "find_value_in_array_0800738a": {
                    "20": "find_value_in_array"
                },
                "get_value_from_offset_08002fa0": {
                    "1": "get_value",
                    "3": "get_offset_value",
                    "9": "get_value_from_offset"
                },
                "iVar2": {
                    "1": "find_result",
                    "30": "result"
                },
                "param_1": {
                    "1": "input_index",
                    "16": "index",
                    "6": "value_index",
                    "7": "offset"
                },
                "param_2": {
                    "1": "input_value",
                    "24": "value",
                    "6": "new_value"
                },
                "param_3": {
                    "1": "unknown_param_1",
                    "16": "param_3",
                    "2": "arg1",
                    "3": "offset1",
                    "4": "param3"
                },
                "param_4": {
                    "1": "offset_2",
                    "16": "param_4",
                    "2": "arg2",
                    "3": "offset2",
                    "4": "param4"
                },
                "process_parameter_080088e0": {
                    "18": "process_parameter",
                    "2": "process_parameter_value"
                },
                "update_array_value_080026b0": {
                    "20": "update_array_value"
                },
                "write_value_to_memory_08002fc2": {
                    "17": "write_value_to_memory",
                    "3": "write_to_memory"
                }
            },
            "called": [
                "FUN_08002fc2",
                "FUN_080036ac",
                "FUN_080088e0",
                "FUN_080026b0",
                "FUN_0800738a",
                "FUN_08002fa0"
            ],
            "calling": [
                "FUN_08000214"
            ],
            "code": "\nvoid process_value_0800021a(uint index,undefined4 value,undefined4 param_3,undefined4 param_4)\n\n{\n  bool is_valid;\n  int result;\n  \n  result = get_value_from_offset(&DAT_200003d4,index,param_3,param_4,param_4);\n  if (result == 3) {\n    if (index < 0x3c) {\n      if ((&DAT_0800a908)[index] == -1) {\n        result = 0;\n      }\n      else {\n        result = find_character_index();\n        if (result == 0) {\n          result = 0;\n        }\n        else {\n          result = find_character_index((int)(character)(&DAT_0800a908)[index]);\n          if (result == 1) {\n            result = 0;\n          }\n          else {\n            result = find_value_in_array((int)(character)(&DAT_0800a908)[index],&DAT_0800a6cc);\n          }\n        }\n      }\n    }\n    else {\n      result = 0;\n    }\n    if (result != 0) {\n      process_parameter(index,value);\n    }\n    write_value_to_memory(&DAT_200003d4,index,value);\n  }\n  else if (result == 4) {\n    if (index < 0x3c) {\n      if ((&DAT_0800a908)[index] == -1) {\n        is_valid = false;\n      }\n      else {\n        result = find_character_index();\n        if (result == 0) {\n          is_valid = false;\n        }\n        else {\n          result = find_character_index((int)(character)(&DAT_0800a908)[index]);\n          if (result == 1) {\n            is_valid = false;\n          }\n          else {\n            is_valid = true;\n          }\n        }\n      }\n    }\n    else {\n      is_valid = false;\n    }\n    if (is_valid) {\n      update_array_value(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[index] * 3,value);\n    }\n    write_value_to_memory(&DAT_200003d4,index,value);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "process_value_0800021a",
            "entrypoint": "0x0800021a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800021a": "process_value_0800021a",
                "bVar1": "is_valid",
                "char": "character",
                "find_character_index_080036ac": "find_character_index",
                "find_value_in_array_0800738a": "find_value_in_array",
                "get_value_from_offset_08002fa0": "get_value_from_offset",
                "iVar2": "result",
                "param_1": "index",
                "param_2": "value",
                "process_parameter_080088e0": "process_parameter",
                "update_array_value_080026b0": "update_array_value",
                "write_value_to_memory_08002fc2": "write_value_to_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000488": {
            "additional_data": {
                "DAT_20000114": {
                    "1": "data_container"
                },
                "DAT_20000171": {
                    "1": "is_processing_enabled",
                    "3": "execute_flag"
                },
                "FUN_08000488": {
                    "1": "update_bit_value",
                    "2": "update_bit_in_memory",
                    "20": "update_data"
                },
                "data_1": {
                    "1": "mask"
                },
                "execute_and_decode_08002ef2": {
                    "1": "execute_decode",
                    "5": "execute_and_decode"
                },
                "param_1": {
                    "1": "status_index",
                    "16": "index",
                    "2": "data_index",
                    "3": "value",
                    "6": "bit_index"
                },
                "param_2": {
                    "1": "flag_value",
                    "2": "bit_value",
                    "20": "flag",
                    "3": "value"
                },
                "process_data_08008880": {
                    "1": "retrieve_data",
                    "6": "process_data"
                },
                "uVar1": {
                    "1": "data_value",
                    "2": "data_processed",
                    "3": "data_processing_result",
                    "5": "data_result",
                    "7": "result",
                    "8": "data"
                }
            },
            "called": [
                "FUN_08008880",
                "FUN_08002ef2"
            ],
            "calling": [
                "FUN_080005f8"
            ],
            "code": "\nvoid update_data_08000488(uint index,int flag)\n\n{\n  undefined4 data;\n  \n  if ((int)index < 0xe) {\n    if (flag == 0) {\n      DAT_20000114 = DAT_20000114 & ~(1 << (index & 0xff));\n      return;\n    }\n    DAT_20000114 = 1 << (index & 0xff) | DAT_20000114;\n    if (DAT_20000171 == '\\0') {\n      data = process_data();\n      execute_and_decode(&DAT_200003d4,index,data);\n      return;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "update_data_08000488",
            "entrypoint": "0x08000488",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000488": "update_data_08000488",
                "execute_and_decode_08002ef2": "execute_and_decode",
                "param_1": "index",
                "param_2": "flag",
                "process_data_08008880": "process_data",
                "uVar1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080004d4": {
            "additional_data": {
                "FUN_080004d4": {
                    "1": "initialize_data_if_param1_is_1_and_param2_is_ffff",
                    "13": "initialize_data_if_param1_is_1",
                    "2": "initialize_data_if_param_1_is_1",
                    "8": "initialize_data"
                },
                "iVar1": {
                    "1": "i",
                    "10": "loop_counter",
                    "2": "iteration_count",
                    "3": "count",
                    "9": "counter"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "is_param_1",
                    "3": "is_param1_true",
                    "6": "is_param1"
                },
                "param_2": {
                    "1": "magic_value",
                    "2": "param_2_value",
                    "5": "param2_value",
                    "8": "value"
                },
                "puVar2": {
                    "1": "pointer",
                    "22": "data_ptr",
                    "7": "data_pointer"
                }
            },
            "called": [
                "FUN_08002580"
            ],
            "calling": [],
            "code": "\nvoid initialize_data_if_param1_is_1_080004d4(int is_param1,int param2)\n\n{\n  int loop_counter;\n  undefined *data_ptr;\n  \n  if (is_param1 != 1) {\n    return;\n  }\n  if (param2 == 0xffff) {\n    data_ptr = &DAT_2000022c;\n    for (loop_counter = 0xb; -1 < loop_counter; loop_counter = loop_counter + -1) {\n      initialize_data_08002580(data_ptr);\n      data_ptr = data_ptr + 3;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "initialize_data_if_param1_is_1_080004d4",
            "entrypoint": "0x080004d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080004d4": "initialize_data_if_param1_is_1_080004d4",
                "iVar1": "loop_counter",
                "param_1": "is_param1",
                "param_2": "param2",
                "puVar2": "data_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000500": {
            "additional_data": {
                "&DAT_2000011f": {
                    "1": "reverse_array"
                },
                "&DAT_200001f0": {
                    "1": "servo_array"
                },
                "&DAT_2000022c": {
                    "2": "peripheral_data"
                },
                "DAT_2000011c": {
                    "1": "last_index",
                    "2": "data_index"
                },
                "DAT_2000011f": {
                    "1": "reverse_data"
                },
                "DAT_200001ed": {
                    "3": "servo_count",
                    "8": "max_servos"
                },
                "DAT_200001f0": {
                    "1": "servo_mapping",
                    "3": "servo_array",
                    "4": "servo_data"
                },
                "DAT_2000022c": {
                    "1": "base_address",
                    "2": "peripheral_config",
                    "3": "peripheral_data"
                },
                "DAT_200003d4": {
                    "1": "error_data",
                    "3": "error_message"
                },
                "FUN_08000500": {
                    "1": "process_servo_data",
                    "22": "configure_servo",
                    "4": "configure_servos"
                },
                "configure_peripheral_080025ac": {
                    "1": "configure_servo_pin_and_angle",
                    "2": "configure_peripheral_with_params",
                    "3": "configure_peripheral_with_config",
                    "4": "configure_peripheral_with_data"
                },
                "configure_peripheral_08002634": {
                    "1": "configure_default_peripheral",
                    "2": "configure_peripheral_only",
                    "3": "configure_servo_without_params",
                    "4": "configure_peripheral"
                },
                "param_1": {
                    "1": "motor_index",
                    "30": "servo_index"
                },
                "param_2": {
                    "1": "pin_number",
                    "3": "peripheral_config",
                    "4": "peripheral_config1",
                    "8": "peripheral_type"
                },
                "param_3": {
                    "1": "peripheral_config_b",
                    "2": "config_value",
                    "3": "peripheral_data",
                    "4": "peripheral_config2"
                },
                "param_4": {
                    "1": "param",
                    "3": "unknown_param",
                    "7": "undefined",
                    "9": "undefined_param"
                },
                "process_data_08002f14": {
                    "1": "process_servo_error",
                    "11": "process_data",
                    "2": "process_error_data",
                    "3": "log_error",
                    "6": "process_error"
                }
            },
            "called": [
                "FUN_08002634",
                "FUN_080025ac",
                "FUN_08002f14"
            ],
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "code": "\nvoid configure_servo_08000500(int servo_index,int peripheral_type,int peripheral_config2,undefined4 undefined_param)\n\n{\n  if (0xb < DAT_200001ed) {\n    process_data(&DAT_200003d4,\"Max servos attached\",peripheral_config2,undefined_param,undefined_param);\n    return;\n  }\n  if (DAT_2000011c == 0) {\n    (&DAT_200001f0)[servo_index] = DAT_200001ed;\n    DAT_200001ed = DAT_200001ed + 1;\n  }\n  else {\n    (&DAT_200001f0)[servo_index] = (&DAT_2000011f)[DAT_2000011c];\n    DAT_2000011c = DAT_2000011c - 1;\n  }\n  if ((0 < peripheral_type) && (0 < peripheral_config2)) {\n    configure_peripheral_with_data(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[servo_index] * 3,servo_index,peripheral_type,peripheral_config2);\n    return;\n  }\n  configure_peripheral(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[servo_index] * 3,servo_index);\n  return;\n}\n\n",
            "current_name": "configure_servo_08000500",
            "entrypoint": "0x08000500",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000500": "configure_servo_08000500",
                "configure_peripheral_080025ac": "configure_peripheral_with_data",
                "configure_peripheral_08002634": "configure_peripheral",
                "param_1": "servo_index",
                "param_2": "peripheral_type",
                "param_3": "peripheral_config2",
                "param_4": "undefined_param",
                "process_data_08002f14": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000588": {
            "additional_data": {
                "&DAT_2000011f": {
                    "1": "new_value_array",
                    "2": "updated_values_array"
                },
                "&DAT_200001f0": {
                    "1": "config_values",
                    "2": "configuration_array",
                    "3": "config_data",
                    "4": "config_array"
                },
                "&DAT_200001f0[param_1]": {
                    "3": "config_value"
                },
                "&DAT_200001f0[param_1] * 3": {
                    "1": "config_offset"
                },
                "&DAT_2000022c": {
                    "1": "configuration_base_address"
                },
                "0xff": {
                    "3": "reset_value"
                },
                "DAT_20000111f": {
                    "1": "tracked_configs"
                },
                "DAT_2000011c": {
                    "1": "new_index",
                    "12": "counter",
                    "2": "num_updates",
                    "3": "modified_count"
                },
                "DAT_2000011f": {
                    "1": "prev_values"
                },
                "DAT_200001ed": {
                    "1": "previous_config",
                    "11": "current_value",
                    "2": "current_index"
                },
                "DAT_200001f0": {
                    "1": "config_lookup_array",
                    "2": "data_array",
                    "8": "config_array"
                },
                "DAT_2000022c": {
                    "1": "config_offset",
                    "2": "configuration_array",
                    "6": "config_data"
                },
                "FUN_08000588": {
                    "1": "update_config_and_track_changes",
                    "2": "update_config_param",
                    "20": "update_configuration"
                },
                "byte": {
                    "1": "config_byte"
                },
                "param_1": {
                    "1": "configuration_index",
                    "25": "index",
                    "5": "config_index"
                },
                "update_configuration_08002644": {
                    "3": "update_configuration"
                }
            },
            "called": [
                "FUN_08002644"
            ],
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "code": "\nvoid update_configuration_08000588(int index)\n\n{\n  update_configuration_08000588(&DAT_2000022c + (uint)(config_byte)(&DAT_200001f0)[index] * 3);\n  if (((&DAT_200001f0)[index] == DAT_200001ed) && (DAT_200001ed != '\\0')) {\n    DAT_200001ed = DAT_200001ed + -1;\n  }\n  else if (DAT_200001ed != '\\0') {\n    DAT_2000011c = DAT_2000011c + 1;\n    (&DAT_2000011f)[DAT_2000011c] = (&DAT_200001f0)[index];\n  }\n  (&DAT_200001f0)[index] = 0xff;\n  return;\n}\n\n",
            "current_name": "update_configuration_08000588",
            "entrypoint": "0x08000588",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000588": "update_configuration_08000588",
                "byte": "config_byte",
                "param_1": "index",
                "update_configuration_08002644": "update_configuration"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080005e0": {
            "additional_data": {
                "": {
                    "1": "<none>"
                },
                "DAT_20000004": {
                    "1": "default_setting",
                    "2": "data_limit",
                    "3": "default_byte",
                    "4": "default_value",
                    "6": "data_value"
                },
                "DAT_20000170": {
                    "1": "data_initialization_flag",
                    "10": "data_flag",
                    "2": "data_value",
                    "5": "data_counter"
                },
                "FUN_080005e0": {
                    "1": "initialize_globals",
                    "29": "initialize_data"
                }
            },
            "called": [],
            "calling": [
                "FUN_080005f8",
                "FUN_08000aec"
            ],
            "code": "\nvoid initialize_data_080005e0(void)\n\n{\n  DAT_20000170 = 0;\n  DAT_20000004 = 0xff;\n  return;\n}\n\n",
            "current_name": "initialize_data_080005e0",
            "entrypoint": "0x080005e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080005e0": "initialize_data_080005e0"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080005f8": {
            "additional_data": {
                "DAT_0800a66c": {
                    "1": "array_c"
                },
                "DAT_0800a69c": {
                    "1": "alt_character_array_2"
                },
                "DAT_0800a6cc": {
                    "1": "alt_character_array_1"
                },
                "DAT_0800a908": {
                    "1": "char_array",
                    "2": "character_data",
                    "3": "character_array"
                },
                "DAT_20000170": {
                    "1": "flag_data"
                },
                "DAT_20000174": {
                    "1": "flags"
                },
                "DAT_200001f0": {
                    "1": "byte_array",
                    "2": "bit_array"
                },
                "DAT_2000022c": {
                    "1": "array",
                    "2": "bit_offset_array"
                },
                "DAT_200003d4": {
                    "1": "data_array",
                    "2": "pin_data_array"
                },
                "FUN_080005f8": {
                    "1": "handle_pin_operation",
                    "2": "improve_code",
                    "7": "configure_pin"
                },
                "bVar3": {
                    "1": "is_character_valid",
                    "19": "is_valid",
                    "2": "condition",
                    "3": "is_true"
                },
                "cVar2": {
                    "1": "value2",
                    "19": "character",
                    "2": "character_value",
                    "4": "flag"
                },
                "configur_peripheral_08008990": {
                    "1": "configure_peripheral"
                },
                "configure_peripheral": {
                    "1": "configure_peripheral"
                },
                "configure_peripheral_08008990": {
                    "1": "configure_peripheral_alt",
                    "14": "configure_peripheral"
                },
                "configure_servo": {
                    "1": "configure_servo"
                },
                "configure_servo_08000500": {
                    "16": "configure_servo"
                },
                "extract_bit": {
                    "1": "extract_bit"
                },
                "extract_bit_080026f8": {
                    "16": "extract_bit"
                },
                "find_character_index": {
                    "1": "find_character_index"
                },
                "find_character_index_080036ac": {
                    "1": "find_index",
                    "15": "find_character_index"
                },
                "find_value_in_array_0800738a": {
                    "1": "find_alt_value_in_array",
                    "14": "find_value_in_array"
                },
                "get_value_from_offset_08002fa0": {
                    "1": "get_offset_value",
                    "5": "get_value_from_offset"
                },
                "iVar1": {
                    "1": "character_index",
                    "2": "value1",
                    "21": "value",
                    "5": "pin_value"
                },
                "initialize_data": {
                    "1": "initialize_data"
                },
                "initialize_data_080005e0": {
                    "16": "initialize_data"
                },
                "param_1": {
                    "1": "input",
                    "15": "pin_number",
                    "2": "input_value",
                    "4": "offset",
                    "6": "pin"
                },
                "param_2": {
                    "1": "input_param",
                    "11": "pin_mode",
                    "18": "mode"
                },
                "process_data": {
                    "1": "process_data"
                },
                "process_data_08002f14": {
                    "16": "process_data"
                },
                "process_parameter": {
                    "1": "process_parameter"
                },
                "process_parameter_080088e0": {
                    "1": "process_parameter_2",
                    "3": "process_parameter2",
                    "4": "process_parameter"
                },
                "process_parameter_08008a24": {
                    "16": "process_parameter"
                },
                "uVar4": {
                    "1": "bit",
                    "11": "offset",
                    "2": "shifted_pin",
                    "5": "bit_offset"
                },
                "update_character": {
                    "1": "update_character"
                },
                "update_character_08002fa8": {
                    "16": "update_character"
                },
                "update_configuration": {
                    "1": "update_configuration"
                },
                "update_configuration_08000588": {
                    "16": "update_configuration"
                },
                "update_data": {
                    "1": "update_data"
                },
                "update_data_08000488": {
                    "14": "update_data"
                },
                "value_from_offset": {
                    "1": "get_value_from_offset"
                },
                "write_value_to_memory": {
                    "1": "write_value_to_memory"
                },
                "write_value_to_memory_08002fc2": {
                    "1": "write_to_memory",
                    "14": "write_value_to_memory"
                }
            },
            "called": [
                "FUN_080026f8",
                "FUN_08002fc2",
                "FUN_080036ac",
                "FUN_08002fa8",
                "FUN_080088e0",
                "FUN_08008a24",
                "FUN_080005e0",
                "FUN_08000588",
                "FUN_08000488",
                "FUN_08002f14",
                "FUN_0800738a",
                "FUN_08000500",
                "FUN_08002fa0",
                "FUN_08008990"
            ],
            "calling": [
                "FUN_08001cd0",
                "FUN_08000a64",
                "FUN_08000aec"
            ],
            "code": "\nvoid configure_pin_080005f8(uint pin_number,int mode)\n\n{\n  int value;\n  char character;\n  bool is_valid;\n  uint offset;\n  \n  value = get_value_from_offset(&DAT_200003d4,pin_number);\n  if (value != 0x7f) {\n    value = get_value_from_offset(&DAT_200003d4,pin_number);\n    if (value == 6) {\n      if (DAT_20000170 == '\\0') {\n        character = '\\0';\n      }\n      else {\n        character = DAT_20000170;\n        if (mode == 6) {\n          character = '\\0';\n        }\n      }\n    }\n    else {\n      character = '\\0';\n    }\n    if (character != '\\0') {\n      initialize_data();\n    }\n    if (pin_number < 0x3c) {\n      if ((&DAT_0800a908)[pin_number] == -1) {\n        is_valid = false;\n      }\n      else {\n        value = find_character_index();\n        if (value == 0) {\n          is_valid = false;\n        }\n        else {\n          value = find_character_index((int)(char)(&DAT_0800a908)[pin_number]);\n          if (value == 1) {\n            is_valid = false;\n          }\n          else if (mode == 4) {\n            is_valid = false;\n          }\n          else {\n            is_valid = true;\n          }\n        }\n      }\n    }\n    else {\n      is_valid = false;\n    }\n    if (is_valid) {\n      if ((byte)(&DAT_200001f0)[pin_number] < 0xc) {\n        value = extract_bit(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[pin_number] * 3);\n      }\n      else {\n        value = 0;\n      }\n      if (value != 0) {\n        update_configuration(pin_number);\n      }\n    }\n    offset = pin_number - 0x2e & 0xff;\n    if (offset < 0xe) {\n      if (pin_number < 0x3c) {\n        value = (int)(char)(&DAT_0800a908)[pin_number];\n      }\n      else {\n        value = -1;\n      }\n      value = find_character_index(value);\n      if (value == 0) {\n        is_valid = false;\n      }\n      else {\n        if (pin_number < 0x3c) {\n          value = (int)(char)(&DAT_0800a908)[pin_number];\n        }\n        else {\n          value = -1;\n        }\n        value = find_character_index(value);\n        if (value == 1) {\n          is_valid = false;\n        }\n        else {\n          is_valid = true;\n        }\n      }\n    }\n    else {\n      is_valid = false;\n    }\n    if (is_valid) {\n      update_data(offset,mode == 2);\n    }\n    if (pin_number < 0x3c) {\n      if ((&DAT_0800a908)[pin_number] == -1) {\n        is_valid = false;\n      }\n      else {\n        value = find_character_index();\n        if (value == 0) {\n          is_valid = false;\n        }\n        else {\n          value = find_character_index((int)(char)(&DAT_0800a908)[pin_number]);\n          if (value == 1) {\n            is_valid = false;\n          }\n          else {\n            is_valid = true;\n          }\n        }\n      }\n    }\n    else {\n      is_valid = false;\n    }\n    if (is_valid) {\n      if ((mode == 0) || (mode == 0xb)) {\n        (&DAT_20000174)[pin_number >> 3] = (&DAT_20000174)[pin_number >> 3] | (byte)(1 << (pin_number & 7));\n      }\n      else {\n        (&DAT_20000174)[pin_number >> 3] = (&DAT_20000174)[pin_number >> 3] & ~(byte)(1 << (pin_number & 7));\n      }\n    }\n    write_value_to_memory(&DAT_200003d4,pin_number,0);\n    switch(mode) {\n    case 0:\n      if (pin_number < 0x3c) {\n        if ((&DAT_0800a908)[pin_number] == -1) {\n          is_valid = false;\n        }\n        else {\n          value = find_character_index();\n          if (value == 0) {\n            is_valid = false;\n          }\n          else {\n            value = find_character_index((int)(char)(&DAT_0800a908)[pin_number]);\n            if (value == 1) {\n              is_valid = false;\n            }\n            else {\n              is_valid = true;\n            }\n          }\n        }\n      }\n      else {\n        is_valid = false;\n      }\n      if (is_valid) {\n        configure_peripheral(pin_number,0);\n        update_character(&DAT_200003d4,pin_number,0);\n        return;\n      }\n      break;\n    case 1:\n      if (pin_number < 0x3c) {\n        if ((&DAT_0800a908)[pin_number] == -1) {\n          is_valid = false;\n        }\n        else {\n          value = find_character_index();\n          if (value == 0) {\n            is_valid = false;\n          }\n          else {\n            value = find_character_index((int)(char)(&DAT_0800a908)[pin_number]);\n            if (value == 1) {\n              is_valid = false;\n            }\n            else {\n              is_valid = true;\n            }\n          }\n        }\n      }\n      else {\n        is_valid = false;\n      }\n      if (is_valid) {\n        value = get_value_from_offset(&DAT_200003d4,pin_number);\n        if (value == 3) {\n          process_parameter(pin_number,0);\n        }\n        configure_peripheral(pin_number,1);\n        update_character(&DAT_200003d4,pin_number,1);\n        return;\n      }\n      break;\n    case 2:\n      if (offset < 0xe) {\n        if (pin_number < 0x3c) {\n          value = (int)(char)(&DAT_0800a908)[pin_number];\n        }\n        else {\n          value = -1;\n        }\n        value = find_character_index(value);\n        if (value == 0) {\n          is_valid = false;\n        }\n        else {\n          if (pin_number < 0x3c) {\n            value = (int)(char)(&DAT_0800a908)[pin_number];\n          }\n          else {\n            value = -1;\n          }\n          value = find_character_index(value);\n          if (value == 1) {\n            is_valid = false;\n          }\n          else {\n            is_valid = true;\n          }\n        }\n      }\n      else {\n        is_valid = false;\n      }\n      if (is_valid) {\n        if (pin_number < 0x3c) {\n          if ((&DAT_0800a908)[pin_number] == -1) {\n            is_valid = false;\n          }\n          else {\n            value = find_character_index();\n            if (value == 0) {\n              is_valid = false;\n            }\n            else {\n              value = find_character_index((int)(char)(&DAT_0800a908)[pin_number]);\n              if (value == 1) {\n                is_valid = false;\n              }\n            }\n          }\n        }\n        else {\n          is_valid = false;\n        }\n        if (is_valid) {\n          configure_peripheral(pin_number,0);\n        }\n        update_character(&DAT_200003d4,pin_number,2);\n        return;\n      }\n      break;\n    case 3:\n      if (pin_number < 0x3c) {\n        if ((&DAT_0800a908)[pin_number] == -1) {\n          value = 0;\n        }\n        else {\n          value = find_character_index();\n          if (value == 0) {\n            value = 0;\n          }\n          else {\n            value = find_character_index((int)(char)(&DAT_0800a908)[pin_number]);\n            if (value == 1) {\n              value = 0;\n            }\n            else {\n              value = find_value_in_array((int)(char)(&DAT_0800a908)[pin_number],&DAT_0800a6cc);\n            }\n          }\n        }\n      }\n      else {\n        value = 0;\n      }\n      if (value != 0) {\n        configure_peripheral(pin_number,1);\n        process_parameter(pin_number,0);\n        update_character(&DAT_200003d4,pin_number,3);\n        return;\n      }\n      break;\n    case 4:\n      if (pin_number < 0x3c) {\n        if ((&DAT_0800a908)[pin_number] == -1) {\n          is_valid = false;\n        }\n        else {\n          value = find_character_index();\n          if (value == 0) {\n            is_valid = false;\n          }\n          else {\n            value = find_character_index((int)(char)(&DAT_0800a908)[pin_number]);\n            if (value == 1) {\n              is_valid = false;\n            }\n            else {\n              is_valid = true;\n            }\n          }\n        }\n      }\n      else {\n        is_valid = false;\n      }\n      if (is_valid) {\n        update_character(&DAT_200003d4,pin_number,4);\n        if (((byte)(&DAT_200001f0)[pin_number] != 0xff) &&\n           (value = extract_bit(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[pin_number] * 3),\n           value != 0)) {\n          is_valid = false;\n        }\n        if (is_valid) {\n          configure_servo(pin_number,0xffffffff);\n          return;\n        }\n      }\n      break;\n    default:\n      process_data(&DAT_200003d4,\"Unknown pin mode\");\n      break;\n    case 6:\n      if (pin_number < 0x3c) {\n        if ((&DAT_0800a908)[pin_number] == -1) {\n          value = 0;\n        }\n        else {\n          value = find_character_index();\n          if (value == 0) {\n            value = 0;\n          }\n          else {\n            value = find_character_index((int)(char)(&DAT_0800a908)[pin_number]);\n            if (value == 1) {\n              value = 0;\n            }\n            else {\n              value = find_value_in_array((int)(char)(&DAT_0800a908)[pin_number],&DAT_0800a69c);\n              if (value == 0) {\n                value = find_value_in_array((int)(char)(&DAT_0800a908)[pin_number],&DAT_0800a66c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        value = 0;\n      }\n      if (value != 0) {\n        update_character(&DAT_200003d4,pin_number,6);\n        return;\n      }\n      break;\n    case 10:\n      break;\n    case 0xb:\n      if (pin_number < 0x3c) {\n        if ((&DAT_0800a908)[pin_number] == -1) {\n          is_valid = false;\n        }\n        else {\n          value = find_character_index();\n          if (value == 0) {\n            is_valid = false;\n          }\n          else {\n            value = find_character_index((int)(char)(&DAT_0800a908)[pin_number]);\n            if (value == 1) {\n              is_valid = false;\n            }\n            else {\n              is_valid = true;\n            }\n          }\n        }\n      }\n      else {\n        is_valid = false;\n      }\n      if (is_valid) {\n        configure_peripheral(pin_number,2);\n        update_character(&DAT_200003d4,pin_number,0xb);\n        write_value_to_memory(&DAT_200003d4,pin_number,1);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "current_name": "configure_pin_080005f8",
            "entrypoint": "0x080005f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080005f8": "configure_pin_080005f8",
                "bVar3": "is_valid",
                "cVar2": "character",
                "configure_peripheral_08008990": "configure_peripheral",
                "configure_servo_08000500": "configure_servo",
                "extract_bit_080026f8": "extract_bit",
                "find_character_index_080036ac": "find_character_index",
                "find_value_in_array_0800738a": "find_value_in_array",
                "get_value_from_offset_08002fa0": "get_value_from_offset",
                "iVar1": "value",
                "initialize_data_080005e0": "initialize_data",
                "param_1": "pin_number",
                "param_2": "mode",
                "process_data_08002f14": "process_data",
                "process_parameter_080088e0": "process_parameter",
                "process_parameter_08008a24": "process_parameter",
                "uVar4": "offset",
                "update_character_08002fa8": "update_character",
                "update_configuration_08000588": "update_configuration",
                "update_data_08000488": "update_data",
                "value_from_offset": "get_value_from_offset",
                "write_value_to_memory_08002fc2": "write_value_to_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000a64": {
            "additional_data": {
                "&DAT_0800a66c": {
                    "8": "array_2"
                },
                "&DAT_0800a69c": {
                    "8": "array_1"
                },
                "&DAT_0800a908": {
                    "1": "array_of_values",
                    "7": "character_array"
                },
                "&DAT_20000314": {
                    "2": "peripheral_data"
                },
                "(int)(char)(&DAT_0800a908)[uVar2]": {
                    "1": "character",
                    "2": "current_character"
                },
                "DAT_20000170": {
                    "1": "initialized_peripheral",
                    "2": "flag",
                    "3": "peripheral_initialized"
                },
                "FUN_08000a64": {
                    "1": "initialize_pins_and_peripheral",
                    "10": "configure_pins",
                    "2": "configure_pins_and_peripheral",
                    "6": "configure_pins_and_initialize_peripheral"
                },
                "configure_pin_080005f8": {
                    "10": "configure_pin",
                    "3": "set_pin_configuration"
                },
                "find_character_index_080036ac": {
                    "17": "find_character_index"
                },
                "find_value_in_array_0800738a": {
                    "17": "find_value_in_array"
                },
                "iVar1": {
                    "1": "found_character_index",
                    "12": "index",
                    "2": "index_result",
                    "4": "result"
                },
                "initialize_peripheral_08002a26": {
                    "13": "initialize_peripheral"
                },
                "uVar2": {
                    "1": "counter",
                    "18": "pin_index",
                    "3": "pin",
                    "9": "pin_number"
                },
                "ugv5": {
                    "1": "index"
                }
            },
            "called": [
                "FUN_080005f8",
                "FUN_080036ac",
                "FUN_08002a26",
                "FUN_0800738a"
            ],
            "calling": [
                "FUN_08001cd0"
            ],
            "code": "\nvoid configure_pins_08000a64(void)\n\n{\n  int index;\n  uint pin_index;\n  \n  for (pin_index = 0; pin_index < 0x3c; pin_index = pin_index + 1 & 0xff) {\n    if (pin_index < 0x3c) {\n      if ((&DAT_0800a908)[pin_index] == -1) {\n        index = 0;\n      }\n      else {\n        index = find_character_index();\n        if (index == 0) {\n          index = 0;\n        }\n        else {\n          index = find_character_index((int)(char)(&DAT_0800a908)[pin_index]);\n          if (index == 1) {\n            index = 0;\n          }\n          else {\n            index = find_value_in_array((int)(char)(&DAT_0800a908)[pin_index],&DAT_0800a69c);\n            if (index == 0) {\n              index = find_value_in_array((int)(char)(&DAT_0800a908)[pin_index],&DAT_0800a66c);\n            }\n          }\n        }\n      }\n    }\n    else {\n      index = 0;\n    }\n    if (index != 0) {\n      configure_pin(pin_index,6);\n    }\n  }\n  DAT_20000170 = 1;\n  initialize_peripheral(&DAT_20000314);\n  return;\n}\n\n",
            "current_name": "configure_pins_08000a64",
            "entrypoint": "0x08000a64",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000a64": "configure_pins_08000a64",
                "configure_pin_080005f8": "configure_pin",
                "find_character_index_080036ac": "find_character_index",
                "find_value_in_array_0800738a": "find_value_in_array",
                "iVar1": "index",
                "initialize_peripheral_08002a26": "initialize_peripheral",
                "uVar2": "pin_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000aec": {
            "additional_data": {
                "&DAT_0800a908": {
                    "1": "special_characters",
                    "3": "character_array"
                },
                "&DAT_20000174": {
                    "1": "array2"
                },
                "&DAT_20000180": {
                    "1": "array3"
                },
                "&DAT_200001e8": {
                    "1": "pin_direction",
                    "2": "pin_data_array"
                },
                "&DAT_200001f0": {
                    "1": "byte_array"
                },
                "(int)(char)(&DAT_0800a908)[uVar3]": {
                    "1": "char_value",
                    "2": "character"
                },
                "BOOL bVar1": {
                    "1": "is_character_valid"
                },
                "DAT_20000114": {
                    "1": "unknown_value1",
                    "2": "var1"
                },
                "DAT_2000011c": {
                    "1": "variable_2",
                    "2": "variable2"
                },
                "DAT_20000170": {
                    "1": "should_initialize_data"
                },
                "DAT_20000171": {
                    "1": "flag",
                    "3": "is_initialized"
                },
                "DAT_20000174": {
                    "1": "data_arr2"
                },
                "DAT_20000180": {
                    "1": "pin_values3"
                },
                "DAT_200001e8": {
                    "1": "data_arr"
                },
                "DAT_200001ed": {
                    "1": "unknown_value3",
                    "2": "variable3"
                },
                "DAT_200001f0": {
                    "1": "unknown_values"
                },
                "FUN_08000aec": {
                    "1": "initialize_game",
                    "2": "initialize",
                    "20": "initialize_pins",
                    "4": "initialize_pin_configuration"
                },
                "INT iVar2": {
                    "1": "character_index"
                },
                "UINT uVar3": {
                    "1": "loop_counter"
                },
                "bVar1": {
                    "1": "is_allowed",
                    "2": "is_valid",
                    "3": "is_special_character",
                    "6": "is_character_valid",
                    "8": "is_configurable"
                },
                "configure_pin_080005f8": {
                    "15": "configure_pin"
                },
                "find_character_index_080036ac": {
                    "1": "find_char_index",
                    "12": "find_character_index"
                },
                "iVar2": {
                    "1": "index",
                    "24": "character_index",
                    "5": "char_index"
                },
                "initialize_data_080005e0": {
                    "12": "initialize_data"
                },
                "uVar3": {
                    "1": "iteration_index",
                    "16": "index",
                    "2": "iteration",
                    "3": "i",
                    "4": "pin_index"
                }
            },
            "called": [
                "FUN_080036ac",
                "FUN_080005f8",
                "FUN_080005e0"
            ],
            "calling": [
                "FUN_08001b48"
            ],
            "code": "\nvoid initialize_pins_08000aec(void)\n\n{\n  bool is_configurable;\n  int character_index;\n  uint index;\n  \n  DAT_20000171 = 1;\n  if (DAT_20000170 != '\\0') {\n    initialize_data();\n  }\n  for (index = 0; index < 5; index = index + 1 & 0xff) {\n    (&DAT_200001e8)[index] = 0;\n    (&DAT_20000174)[index] = 0;\n    (&DAT_20000180)[index] = 0;\n  }\n  for (index = 0; index < 0x3c; index = index + 1 & 0xff) {\n    if ((index - 0x2e & 0xff) < 0xe) {\n      if (index < 0x3c) {\n        character_index = (int)(char)(&DAT_0800a908)[index];\n      }\n      else {\n        character_index = -1;\n      }\n      character_index = find_character_index(character_index);\n      if (character_index == 0) {\n        is_configurable = false;\n      }\n      else {\n        if (index < 0x3c) {\n          character_index = (int)(char)(&DAT_0800a908)[index];\n        }\n        else {\n          character_index = -1;\n        }\n        character_index = find_character_index(character_index);\n        if (character_index == 1) {\n          is_configurable = false;\n        }\n        else {\n          is_configurable = true;\n        }\n      }\n    }\n    else {\n      is_configurable = false;\n    }\n    if (is_configurable) {\n      configure_pin(index,2);\n    }\n    else {\n      if ((((index < 0x3c) && ((&DAT_0800a908)[index] != -1)) &&\n          (character_index = find_character_index(), character_index != 0)) &&\n         (character_index = find_character_index((int)(char)(&DAT_0800a908)[index]), character_index != 1)) {\n        is_configurable = true;\n      }\n      if (is_configurable) {\n        configure_pin(index,1);\n      }\n    }\n    (&DAT_200001f0)[index] = 0xff;\n  }\n  DAT_20000114 = 0;\n  DAT_2000011c = 0;\n  DAT_200001ed = 0;\n  DAT_20000171 = 0;\n  return;\n}\n\n",
            "current_name": "initialize_pins_08000aec",
            "entrypoint": "0x08000aec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000aec": "initialize_pins_08000aec",
                "bVar1": "is_configurable",
                "configure_pin_080005f8": "configure_pin",
                "find_character_index_080036ac": "find_character_index",
                "iVar2": "character_index",
                "initialize_data_080005e0": "initialize_data",
                "uVar3": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000be8": {
            "additional_data": {
                "&DAT_20000174": {
                    "1": "data_ptr_1"
                },
                "&DAT_20000180": {
                    "1": "data_ptr_2"
                },
                "&DAT_200003d4": {
                    "1": "function_ptr"
                },
                "(&DAT_20000180)[param_1]": {
                    "1": "ptr_data_20000180_indexed"
                },
                "FUN_08000be8": {
                    "1": "execute_selected_function",
                    "10": "execute_function",
                    "3": "execute_function_with_offset",
                    "4": "execute_offset_function"
                },
                "char_puVar2": {
                    "1": "char_ptr_data_20000174_indexed"
                },
                "execute_function_with_offset_08002efe": {
                    "1": "execute_function"
                },
                "param_1": {
                    "1": "input_offset",
                    "27": "index",
                    "3": "offset"
                },
                "param_2": {
                    "1": "input_mask",
                    "2": "bit_mask",
                    "27": "mask"
                },
                "param_3": {
                    "1": "condition_flag",
                    "10": "flag",
                    "15": "condition",
                    "3": "check"
                },
                "param_4": {
                    "1": "arg",
                    "2": "value",
                    "4": "parameter",
                    "6": "offset",
                    "7": "param"
                },
                "ptr_data_200003d4": {
                    "1": "ptr_data_200003d4"
                },
                "puVar1": {
                    "1": "pointer_1",
                    "2": "array1",
                    "3": "pointer1",
                    "5": "ptr1"
                },
                "puVar2": {
                    "1": "data2_ptr",
                    "2": "data_ptr_2",
                    "3": "result",
                    "5": "ptr2"
                }
            },
            "called": [
                "FUN_08002efe"
            ],
            "calling": [
                "FUN_08000ef8"
            ],
            "code": "\nvoid execute_function_08000be8(int index,uint mask,int condition,undefined4 param)\n\n{\n  undefined1 *ptr1;\n  undefined1 *ptr2;\n  \n  ptr1 = &DAT_20000174;\n  ptr2 = (undefined1 *)((byte)(&DAT_20000174)[index] & mask);\n  if ((condition != 0) ||\n     (ptr1 = (undefined1 *)(uint)(byte)(&DAT_20000180)[index], ptr2 != ptr1)) {\n    perform_task_with_offset(&DAT_200003d4,index,ptr2,ptr1,param);\n    (&DAT_20000180)[index] = (char)ptr2;\n  }\n  return;\n}\n\n",
            "current_name": "execute_function_08000be8",
            "entrypoint": "0x08000be8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000be8": "execute_function_08000be8",
                "execute_function_with_offset_08002efe": "perform_task_with_offset",
                "param_1": "index",
                "param_2": "mask",
                "param_3": "condition",
                "param_4": "param",
                "puVar1": "ptr1",
                "puVar2": "ptr2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000ef8": {
            "additional_data": {
                "DAT_20000174": {
                    "1": "character_data2"
                },
                "DAT_20000175": {
                    "1": "character_flags2"
                },
                "DAT_20000176": {
                    "1": "byte3"
                },
                "DAT_20000177": {
                    "1": "global_flag4"
                },
                "DAT_20000178": {
                    "1": "global_flag5"
                },
                "DAT_200001e8": {
                    "1": "enable_flag1"
                },
                "DAT_200001e9": {
                    "1": "check_data2"
                },
                "DAT_200001ea": {
                    "1": "should_check3"
                },
                "DAT_200001eb": {
                    "1": "check_data4"
                },
                "DAT_200001ec": {
                    "1": "should_check5"
                },
                "FUN_08000ef8": {
                    "1": "update_flags_based_on_character_indexes",
                    "5": "process_character_data"
                },
                "bVar1": {
                    "1": "flag_byte",
                    "2": "character_permissions",
                    "4": "character_flags"
                },
                "bVar2": {
                    "1": "byte2"
                },
                "bVar3": {
                    "1": "flag_condition1",
                    "2": "check_result"
                },
                "bVar4": {
                    "1": "settings_flag",
                    "10": "result",
                    "2": "updated_flags"
                },
                "check_and_return_bit_08008a6c": {
                    "1": "check_bit",
                    "8": "check_and_return_bit"
                },
                "execute_function_08000be8": {
                    "1": "update_settings",
                    "5": "execute_function"
                },
                "find_character_index_080036ac": {
                    "1": "find_input_index",
                    "6": "find_character_index"
                },
                "iVar2": {
                    "1": "index_result",
                    "16": "index",
                    "8": "character_index"
                }
            },
            "called": [
                "FUN_080036ac",
                "FUN_08008a6c",
                "FUN_08000be8"
            ],
            "calling": [
                "FUN_080022f8"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001ade) */\n/* WARNING: Removing unreachable block (ram,0x08001a4a) */\n/* WARNING: Removing unreachable block (ram,0x080019b6) */\n/* WARNING: Removing unreachable block (ram,0x08001912) */\n/* WARNING: Removing unreachable block (ram,0x08001866) */\n/* WARNING: Removing unreachable block (ram,0x080017d2) */\n/* WARNING: Removing unreachable block (ram,0x0800173e) */\n/* WARNING: Removing unreachable block (ram,0x0800169a) */\n/* WARNING: Removing unreachable block (ram,0x080015ee) */\n/* WARNING: Removing unreachable block (ram,0x0800155a) */\n/* WARNING: Removing unreachable block (ram,0x08001490) */\n/* WARNING: Removing unreachable block (ram,0x080014a2) */\n/* WARNING: Removing unreachable block (ram,0x080014e4) */\n/* WARNING: Removing unreachable block (ram,0x080014b0) */\n/* WARNING: Removing unreachable block (ram,0x080014ba) */\n/* WARNING: Removing unreachable block (ram,0x080014e8) */\n/* WARNING: Removing unreachable block (ram,0x080014c2) */\n/* WARNING: Removing unreachable block (ram,0x080014b6) */\n/* WARNING: Removing unreachable block (ram,0x08001496) */\n/* WARNING: Removing unreachable block (ram,0x08001430) */\n/* WARNING: Removing unreachable block (ram,0x08001376) */\n/* WARNING: Removing unreachable block (ram,0x080012e2) */\n/* WARNING: Removing unreachable block (ram,0x0800124e) */\n/* WARNING: Removing unreachable block (ram,0x080011b8) */\n/* WARNING: Removing unreachable block (ram,0x08001100) */\n/* WARNING: Removing unreachable block (ram,0x0800106c) */\n/* WARNING: Removing unreachable block (ram,0x08000fd8) */\n/* WARNING: Removing unreachable block (ram,0x08000f42) */\n/* WARNING: Removing unreachable block (ram,0x08000f8e) */\n/* WARNING: Removing unreachable block (ram,0x08001022) */\n/* WARNING: Removing unreachable block (ram,0x080010b6) */\n/* WARNING: Removing unreachable block (ram,0x0800114a) */\n/* WARNING: Removing unreachable block (ram,0x08001204) */\n/* WARNING: Removing unreachable block (ram,0x08001298) */\n/* WARNING: Removing unreachable block (ram,0x0800132c) */\n/* WARNING: Removing unreachable block (ram,0x080013c0) */\n/* WARNING: Removing unreachable block (ram,0x0800147c) */\n/* WARNING: Removing unreachable block (ram,0x08001510) */\n/* WARNING: Removing unreachable block (ram,0x080015a4) */\n/* WARNING: Removing unreachable block (ram,0x08001638) */\n/* WARNING: Removing unreachable block (ram,0x080016f4) */\n/* WARNING: Removing unreachable block (ram,0x08001788) */\n/* WARNING: Removing unreachable block (ram,0x0800181c) */\n/* WARNING: Removing unreachable block (ram,0x080018b0) */\n/* WARNING: Removing unreachable block (ram,0x0800196c) */\n/* WARNING: Removing unreachable block (ram,0x08001a00) */\n/* WARNING: Removing unreachable block (ram,0x08001a94) */\n/* WARNING: Removing unreachable block (ram,0x08001b28) */\n/* WARNING: Removing unreachable block (ram,0x080014ca) */\n\nvoid process_character_flags_08000ef8(void)\n\n{\n  byte character_flags;\n  int index;\n  bool flag;\n  byte result;\n  \n  character_flags = DAT_20000174;\n  if (DAT_200001e8 != '\\0') {\n    index = find_character_index();\n    if (index == 0) {\n      result = 0;\n    }\n    else {\n      index = find_character_index(3);\n      if (index == 1) {\n        result = 0;\n      }\n      else if ((character_flags & 1) == 0) {\n        result = 0;\n      }\n      else {\n        index = check_and_return_bit(0);\n        if (index == 0) {\n          result = 0;\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    index = find_character_index();\n    if (index == 0) {\n      flag = false;\n    }\n    else {\n      index = find_character_index(2);\n      if (index == 1) {\n        flag = false;\n      }\n      else if ((character_flags & 2) == 0) {\n        flag = false;\n      }\n      else {\n        index = check_and_return_bit(1);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          flag = true;\n        }\n      }\n    }\n    if (flag) {\n      result = result | 2;\n    }\n    index = find_character_index();\n    if (index == 0) {\n      flag = false;\n    }\n    else {\n      index = find_character_index(10);\n      if (index == 1) {\n        flag = false;\n      }\n      else if ((character_flags & 4) == 0) {\n        flag = false;\n      }\n      else {\n        index = check_and_return_bit(2);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          flag = true;\n        }\n      }\n    }\n    if (flag) {\n      result = result | 4;\n    }\n    index = find_character_index();\n    if (index == 0) {\n      flag = false;\n    }\n    else {\n      index = find_character_index(0x13);\n      if (index == 1) {\n        flag = false;\n      }\n      else if ((character_flags & 8) == 0) {\n        flag = false;\n      }\n      else {\n        index = check_and_return_bit(3);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          flag = true;\n        }\n      }\n    }\n    if (flag) {\n      result = result | 8;\n    }\n    index = find_character_index();\n    if (index == 0) {\n      flag = false;\n    }\n    else {\n      index = find_character_index(0x15);\n      if (index == 1) {\n        flag = false;\n      }\n      else if ((character_flags & 0x10) == 0) {\n        flag = false;\n      }\n      else {\n        index = check_and_return_bit(4);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          flag = true;\n        }\n      }\n    }\n    if (flag) {\n      result = result | 0x10;\n    }\n    index = find_character_index();\n    if (index == 0) {\n      flag = false;\n    }\n    else {\n      index = find_character_index(0x14);\n      if (index == 1) {\n        flag = false;\n      }\n      else if ((character_flags & 0x20) == 0) {\n        flag = false;\n      }\n      else {\n        index = check_and_return_bit(5);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          flag = true;\n        }\n      }\n    }\n    if (flag) {\n      result = result | 0x20;\n    }\n    index = find_character_index();\n    if (index == 0) {\n      flag = false;\n    }\n    else {\n      index = find_character_index(0x1a);\n      if (index == 1) {\n        flag = false;\n      }\n      else if ((character_flags & 0x40) == 0) {\n        flag = false;\n      }\n      else {\n        index = check_and_return_bit(6);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          flag = true;\n        }\n      }\n    }\n    if (flag) {\n      result = result | 0x40;\n    }\n    index = find_character_index();\n    if (index == 0) {\n      flag = false;\n    }\n    else {\n      index = find_character_index(8);\n      if (index == 1) {\n        flag = false;\n      }\n      else if ((character_flags & 0x80) == 0) {\n        flag = false;\n      }\n      else {\n        index = check_and_return_bit(7);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          flag = true;\n        }\n      }\n    }\n    if (flag) {\n      result = result | 0x80;\n    }\n    execute_function(0,result);\n  }\n  character_flags = DAT_20000175;\n  if (DAT_200001e9 != '\\0') {\n    index = find_character_index();\n    if (index == 0) {\n      result = 0;\n    }\n    else {\n      index = find_character_index(9);\n      if (index == 1) {\n        result = 0;\n      }\n      else if ((character_flags & 1) == 0) {\n        result = 0;\n      }\n      else {\n        index = check_and_return_bit(8);\n        if (index == 0) {\n          result = 0;\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    index = find_character_index();\n    if (index == 0) {\n      flag = false;\n    }\n    else {\n      index = find_character_index(0x27);\n      if (index == 1) {\n        flag = false;\n      }\n      else if ((character_flags & 2) == 0) {\n        flag = false;\n      }\n      else {\n        index = check_and_return_bit(9);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          flag = true;\n        }\n      }\n    }\n    if (flag) {\n      result = result | 2;\n    }\n    index = find_character_index();\n    if (index == 0) {\n      flag = false;\n    }\n    else {\n      index = find_character_index(0x16);\n      if (index == 1) {\n        flag = false;\n      }\n      else if ((character_flags & 4) == 0) {\n        flag = false;\n      }\n      else {\n        index = check_and_return_bit(10);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          flag = true;\n        }\n      }\n    }\n    if (flag) {\n      result = result | 4;\n    }\n    index = find_character_index();\n    if (index == 0) {\n      flag = false;\n    }\n    else {\n      index = find_character_index(7);\n      if (index == 1) {\n        flag = false;\n      }\n      else if ((character_flags & 8) == 0) {\n        flag = false;\n      }\n      else {\n        index = check_and_return_bit(0xb);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          flag = true;\n        }\n      }\n    }\n    if (flag) {\n      result = result | 8;\n    }\n    index = find_character_index();\n    if (index == 0) {\n      flag = false;\n    }\n    else {\n      index = find_character_index(6);\n      if (index == 1) {\n        flag = false;\n      }\n      else if ((character_flags & 0x10) == 0) {\n        flag = false;\n      }\n      else {\n        index = check_and_return_bit(0xc);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          flag = true;\n        }\n      }\n    }\n    if (flag) {\n      result = result | 0x10;\n    }\n    index = find_character_index();\n    if (index == 0) {\n      flag = false;\n    }\n    else {\n      index = find_character_index(5);\n      if (index == 1) {\n        flag = false;\n      }\n      else if ((character_flags & 0x20) == 0) {\n        flag = false;\n      }\n      else {\n        index = check_and_return_bit(0xd);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          flag = true;\n        }\n      }\n    }\n    if (flag) {\n      result = result | 0x20;\n    }\n    index = find_character_index();\n    if (index == 0) {\n      flag = false;\n    }\n    else {\n      index = find_character_index(0x19);\n      if (index == 1) {\n        flag = false;\n      }\n      else if ((character_flags & 0x40) == 0) {\n        flag = false;\n      }\n      else {\n        index = check_and_return_bit(0xe);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          flag = true;\n        }\n      }\n    }\n    if (flag) {\n      result = result | 0x40;\n    }\n    index = find_character_index();\n    if (index == 0) {\n      flag = false;\n    }\n    else {\n      index = find_character_index(0x18);\n      if (index == 1) {\n        flag = false;\n      }\n      else if ((character_flags & 0x80) == 0) {\n        flag = false;\n      }\n      else {\n        index = check_and_return_bit(0xf);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          flag = true;\n        }\n      }\n    }\n    if (flag) {\n      result = result | 0x80;\n    }\n    execute_function(1,result,0);\n  }\n  character_flags = DAT_20000176;\n  if (DAT_200001ea != '\\0') {\n    index = find_character_index();\n    if (index == 0) {\n      result = 0;\n    }\n    else {\n      index = find_character_index(0x2a);\n      if (index == 1) {\n        result = 0;\n      }\n      else if ((character_flags & 1) == 0) {\n        result = 0;\n      }\n      else {\n        index = check_and_return_bit(0x10);\n        if (index == 0) {\n          result = 0;\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    index = find_character_index();\n    if (index == 0) {\n      flag = false;\n    }\n    else {\n      index = find_character_index(0x2c);\n      if (index == 1) {\n        flag = false;\n      }\n      else if ((character_flags & 2) == 0) {\n        flag = false;\n      }\n      else {\n        index = check_and_return_bit(0x11);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          flag = true;\n        }\n      }\n    }\n    if (flag) {\n      result = result | 2;\n    }\n    index = find_character_index();\n    if (index == 0) {\n      flag = false;\n    }\n    else {\n      index = find_character_index(0xd);\n      if (index == 1) {\n        flag = false;\n      }\n      else if ((character_flags & 8) == 0) {\n        flag = false;\n      }\n      else {\n        index = check_and_return_bit(0x13);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          flag = true;\n        }\n      }\n    }\n    if (flag) {\n      result = result | 8;\n    }\n    index = find_character_index();\n    if (index == 0) {\n      flag = false;\n    }\n    else {\n      index = find_character_index(0xe);\n      if (index == 1) {\n        flag = false;\n      }\n      else if ((character_flags & 0x10) == 0) {\n        flag = false;\n      }\n      else {\n        index = check_and_return_bit(0x14);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          flag = true;\n        }\n      }\n    }\n    if (flag) {\n      result = result | 0x10;\n    }\n    index = find_character_index();\n    if (index == 0) {\n      flag = false;\n    }\n    else {\n      index = find_character_index(0xf);\n      if (index == 1) {\n        flag = false;\n      }\n      else if ((character_flags & 0x20) == 0) {\n        flag = false;\n      }\n      else {\n        index = check_and_return_bit(0x15);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          flag = true;\n        }\n      }\n    }\n    if (flag) {\n      result = result | 0x20;\n    }\n    index = find_character_index();\n    if (index == 0) {\n      flag = false;\n    }\n    else {\n      index = find_character_index(0x17);\n      if (index == 1) {\n        flag = false;\n      }\n      else if ((character_flags & 0x40) == 0) {\n        flag = false;\n      }\n      else {\n        index = check_and_return_bit(0x16);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          flag = true;\n        }\n      }\n    }\n    if (flag) {\n      result = result | 0x40;\n    }\n    index = find_character_index();\n    if (index == 0) {\n      flag = false;\n    }\n    else {\n      index = find_character_index(0x2d);\n      if (index == 1) {\n        flag = false;\n      }\n      else if ((character_flags & 0x80) == 0) {\n        flag = false;\n      }\n      else {\n        index = check_and_return_bit(0x17);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          flag = true;\n        }\n      }\n    }\n    if (flag) {\n      result = result | 0x80;\n    }\n    execute_function(2,result,0);\n  }\n  character_flags = DAT_20000177;\n  if (DAT_200001eb != '\\0') {\n    index = find_character_index();\n    if (index == 0) {\n      result = 0;\n    }\n    else {\n      index = find_character_index(0x2e);\n      if (index == 1) {\n        result = 0;\n      }\n      else if ((character_flags & 1) == 0) {\n        result = 0;\n      }\n      else {\n        index = check_and_return_bit(0x18);\n        if (index == 0) {\n          result = 0;\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    index = find_character_index();\n    if (index == 0) {\n      flag = false;\n    }\n    else {\n      index = find_character_index(0x2f);\n      if (index == 1) {\n        flag = false;\n      }\n      else if ((character_flags & 2) == 0) {\n        flag = false;\n      }\n      else {\n        index = check_and_return_bit(0x19);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          flag = true;\n        }\n      }\n    }\n    if (flag) {\n      result = result | 2;\n    }\n    index = find_character_index();\n    if (index == 0) {\n      flag = false;\n    }\n    else {\n      index = find_character_index(0x30);\n      if (index == 1) {\n        flag = false;\n      }\n      else if ((character_flags & 4) == 0) {\n        flag = false;\n      }\n      else {\n        index = check_and_return_bit(0x1a);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          flag = true;\n        }\n      }\n    }\n    if (flag) {\n      result = result | 4;\n    }\n    index = find_character_index();\n    if (index == 0) {\n      flag = false;\n    }\n    else {\n      index = find_character_index(0x31);\n      if (index == 1) {\n        flag = false;\n      }\n      else if ((character_flags & 8) == 0) {\n        flag = false;\n      }\n      else {\n        index = check_and_return_bit(0x1b);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          flag = true;\n        }\n      }\n    }\n    if (flag) {\n      result = result | 8;\n    }\n    index = find_character_index();\n    if (index == 0) {\n      flag = false;\n    }\n    else {\n      index = find_character_index(0x22);\n      if (index == 1) {\n        flag = false;\n      }\n      else if ((character_flags & 0x10) == 0) {\n        flag = false;\n      }\n      else {\n        index = check_and_return_bit(0x1c);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          flag = true;\n        }\n      }\n    }\n    if (flag) {\n      result = result | 0x10;\n    }\n    index = find_character_index();\n    if (index == 0) {\n      flag = false;\n    }\n    else {\n      index = find_character_index(0x23);\n      if (index == 1) {\n        flag = false;\n      }\n      else if ((character_flags & 0x20) == 0) {\n        flag = false;\n      }\n      else {\n        index = check_and_return_bit(0x1d);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          flag = true;\n        }\n      }\n    }\n    if (flag) {\n      result = result | 0x20;\n    }\n    index = find_character_index();\n    if (index == 0) {\n      flag = false;\n    }\n    else {\n      index = find_character_index(0x2b);\n      if (index == 1) {\n        flag = false;\n      }\n      else if ((character_flags & 0x40) == 0) {\n        flag = false;\n      }\n      else {\n        index = check_and_return_bit(0x1e);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          flag = true;\n        }\n      }\n    }\n    if (flag) {\n      result = result | 0x40;\n    }\n    index = find_character_index();\n    if (index == 0) {\n      flag = false;\n    }\n    else {\n      index = find_character_index(0x32);\n      if (index == 1) {\n        flag = false;\n      }\n      else if ((character_flags & 0x80) == 0) {\n        flag = false;\n      }\n      else {\n        index = check_and_return_bit(0x1f);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          flag = true;\n        }\n      }\n    }\n    if (flag) {\n      result = result | 0x80;\n    }\n    execute_function(3,result,0);\n  }\n  character_flags = DAT_20000178;\n  if (DAT_200001ec != '\\0') {\n    index = find_character_index();\n    if (index == 0) {\n      result = 0;\n    }\n    else {\n      index = find_character_index(0x29);\n      if (index == 1) {\n        result = 0;\n      }\n      else if ((character_flags & 1) == 0) {\n        result = 0;\n      }\n      else {\n        index = check_and_return_bit(0x20);\n        if (index == 0) {\n          result = 0;\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    index = find_character_index();\n    if (index == 0) {\n      flag = false;\n    }\n    else {\n      index = find_character_index(0x28);\n      if (index == 1) {\n        flag = false;\n      }\n      else if ((character_flags & 2) == 0) {\n        flag = false;\n      }\n      else {\n        index = check_and_return_bit(0x21);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          flag = true;\n        }\n      }\n    }\n    if (flag) {\n      result = result | 2;\n    }\n    index = find_character_index();\n    if (index == 0) {\n      flag = false;\n    }\n    else {\n      index = find_character_index(0x26);\n      if (index == 1) {\n        flag = false;\n      }\n      else if ((character_flags & 4) == 0) {\n        flag = false;\n      }\n      else {\n        index = check_and_return_bit(0x22);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          flag = true;\n        }\n      }\n    }\n    if (flag) {\n      result = result | 4;\n    }\n    index = find_character_index();\n    if (index == 0) {\n      flag = false;\n    }\n    else {\n      index = find_character_index(0x25);\n      if (index == 1) {\n        flag = false;\n      }\n      else if ((character_flags & 8) == 0) {\n        flag = false;\n      }\n      else {\n        index = check_and_return_bit(0x23);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          flag = true;\n        }\n      }\n    }\n    if (flag) {\n      result = result | 8;\n    }\n    index = find_character_index();\n    if (index == 0) {\n      flag = false;\n    }\n    else {\n      index = find_character_index(0xc);\n      if (index == 1) {\n        flag = false;\n      }\n      else if ((character_flags & 0x10) == 0) {\n        flag = false;\n      }\n      else {\n        index = check_and_return_bit(0x24);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          flag = true;\n        }\n      }\n    }\n    if (flag) {\n      result = result | 0x10;\n    }\n    index = find_character_index();\n    if (index == 0) {\n      flag = false;\n    }\n    else {\n      index = find_character_index(0xb);\n      if (index == 1) {\n        flag = false;\n      }\n      else if ((character_flags & 0x20) == 0) {\n        flag = false;\n      }\n      else {\n        index = check_and_return_bit(0x25);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          flag = true;\n        }\n      }\n    }\n    if (flag) {\n      result = result | 0x20;\n    }\n    index = find_character_index();\n    if (index == 0) {\n      flag = false;\n    }\n    else {\n      index = find_character_index(0x1c);\n      if (index == 1) {\n        flag = false;\n      }\n      else if ((character_flags & 0x40) == 0) {\n        flag = false;\n      }\n      else {\n        index = check_and_return_bit(0x26);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          flag = true;\n        }\n      }\n    }\n    if (flag) {\n      result = result | 0x40;\n    }\n    index = find_character_index();\n    if (index == 0) {\n      flag = false;\n    }\n    else {\n      index = find_character_index(0x1b);\n      if (index == 1) {\n        flag = false;\n      }\n      else if ((character_flags & 0x80) == 0) {\n        flag = false;\n      }\n      else {\n        index = check_and_return_bit(0x27);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          flag = true;\n        }\n      }\n    }\n    if (flag) {\n      result = result | 0x80;\n    }\n    execute_function(4,result,0);\n  }\n  return;\n}\n\n",
            "current_name": "process_character_flags_08000ef8",
            "entrypoint": "0x08000ef8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000ef8": "process_character_flags_08000ef8",
                "bVar1": "character_flags",
                "bVar3": "flag",
                "bVar4": "result",
                "check_and_return_bit_08008a6c": "check_and_return_bit",
                "execute_function_08000be8": "execute_function",
                "find_character_index_080036ac": "find_character_index",
                "iVar2": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001b48": {
            "additional_data": {
                "&DAT_200003d4": {
                    "1": "firmware_data",
                    "2": "gateway_data"
                },
                "&LAB_080001a8_1": {
                    "1": "constant11",
                    "2": "label3"
                },
                "&LAB_080002ec_1": {
                    "1": "constant4",
                    "2": "label1"
                },
                "&LAB_08000c18_1": {
                    "1": "constant7",
                    "2": "label2"
                },
                "0x8000215": {
                    "1": "constant2"
                },
                "0x8000489": {
                    "1": "constant6"
                },
                "0x80005f9": {
                    "1": "constant10"
                },
                "0x8000aed": {
                    "1": "constant16"
                },
                "0x8001cd1": {
                    "1": "constant14"
                },
                "0x90": {
                    "1": "constant3"
                },
                "0xc0": {
                    "1": "constant5"
                },
                "0xd0": {
                    "1": "constant8"
                },
                "0xe0": {
                    "1": "constant1"
                },
                "0xe100": {
                    "1": "constant17"
                },
                "0xf0": {
                    "1": "constant13"
                },
                "0xf4": {
                    "1": "constant9"
                },
                "0xf5": {
                    "1": "constant12"
                },
                "0xff": {
                    "1": "constant15"
                },
                "FUN_08001b48": {
                    "1": "load_and_process_firmware",
                    "16": "initialize_gateway",
                    "9": "initialize_firmware"
                },
                "LAB_080001a8_1": {
                    "1": "data_lab_3"
                },
                "LAB_080002ec_1": {
                    "1": "label_080002ec_1"
                },
                "LAB_08000c18_1": {
                    "1": "function2_label"
                },
                "execute_system_interrupt_0800018c": {
                    "31": "execute_system_interrupt"
                },
                "extract_file_name_08002e44": {
                    "28": "extract_file_name"
                },
                "initialize_and_process_data_08003048": {
                    "2": "init_and_process_data",
                    "28": "initialize_and_process_data"
                },
                "initialize_pins_08000aec": {
                    "1": "init_pins",
                    "30": "initialize_pins"
                },
                "update_data_08002f2c": {
                    "30": "update_data"
                },
                "update_data_08002f84": {
                    "1": "update_data_final",
                    "2": "update_data",
                    "22": "update_data3"
                },
                "update_data_08002f94": {
                    "1": "update_data_extended",
                    "2": "update_data",
                    "23": "update_data2"
                }
            },
            "called": [
                "FUN_08003048",
                "FUN_08000aec",
                "FUN_08002f2c",
                "FUN_08002e44",
                "FUN_0800018c",
                "FUN_08002f94",
                "FUN_08002f84"
            ],
            "calling": [
                "FUN_08008f1c"
            ],
            "code": "\nvoid initialize_gateway_08001b48(void)\n\n{\n  extract_file_name(&DAT_200003d4,\"/home/bo/p2im/p2im-real_firmware_scratch/Gateway/StandardFirmata.ino\",\n               2,5);\n  update_data(&DAT_200003d4,0xe0,0x8000215);\n  update_data(&DAT_200003d4,0x90,label1);\n  update_data(&DAT_200003d4,0xc0,0x8000489);\n  update_data(&DAT_200003d4,0xd0,label2);\n  update_data(&DAT_200003d4,0xf4,0x80005f9);\n  update_data(&DAT_200003d4,0xf5,label3);\n  update_data2(&DAT_200003d4,0xf0,0x8001cd1);\n  update_data3(&DAT_200003d4,0xff,0x8000aed);\n  initialize_and_process_data(&DAT_200003d4,0xe100);\n  initialize_pins();\n  execute_system_interrupt(0);\n  return;\n}\n\n",
            "current_name": "initialize_gateway_08001b48",
            "entrypoint": "0x08001b48",
            "imported": false,
            "improved": true,
            "renaming": {
                "&LAB_080001a8_1": "label3",
                "&LAB_080002ec_1": "label1",
                "&LAB_08000c18_1": "label2",
                "FUN_08001b48": "initialize_gateway_08001b48",
                "LAB_080001a8_1": "label_080001a8_1",
                "LAB_080002ec_1": "label_080002ec_1",
                "LAB_08000c18_1": "label_08000c18_1",
                "execute_system_interrupt_0800018c": "execute_system_interrupt",
                "extract_file_name_08002e44": "extract_file_name",
                "initialize_and_process_data_08003048": "initialize_and_process_data",
                "initialize_pins_08000aec": "initialize_pins",
                "update_data_08002f2c": "update_data",
                "update_data_08002f84": "update_data3",
                "update_data_08002f94": "update_data2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001bf8": {
            "additional_data": {
                "DAT_20000314": {
                    "1": "data_buffer"
                },
                "FUN_08001bf8": {
                    "1": "copy_data",
                    "13": "copy_and_process_data",
                    "15": "process_data",
                    "2": "process_and_copy_data"
                },
                "copy_or_process_data_0800288c": {
                    "1": "copy_data",
                    "3": "copy_or_process_data"
                },
                "param_1": {
                    "1": "data_to_copy",
                    "2": "data_ptr",
                    "3": "data_source",
                    "4": "input_data",
                    "8": "source_data"
                },
                "param_2": {
                    "1": "unused_parameter",
                    "2": "param_2",
                    "7": "unused_param"
                },
                "param_3": {
                    "1": "data_offset",
                    "2": "output_buffer",
                    "3": "size",
                    "4": "destination_address",
                    "5": "destination_data"
                },
                "param_4": {
                    "1": "end_index",
                    "2": "destination_offset",
                    "3": "size_of_data",
                    "5": "size",
                    "6": "data_length"
                }
            },
            "called": [
                "FUN_0800288c"
            ],
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0"
            ],
            "code": "\nvoid process_data_08001bf8(undefined4 source_data,undefined4 unused_param,undefined4 destination_data,undefined4 data_length)\n\n{\n  copy_or_process_data_08001bf8(&DAT_20000314,source_data,destination_data,data_length,data_length);\n  return;\n}\n\n",
            "current_name": "process_data_08001bf8",
            "entrypoint": "0x08001bf8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001bf8": "process_data_08001bf8",
                "copy_or_process_data_0800288c": "copy_or_process_data",
                "param_1": "source_data",
                "param_2": "unused_param",
                "param_3": "destination_data",
                "param_4": "data_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001c08": {
            "additional_data": {
                "FUN_08001c08": {
                    "1": "get_next_byte_from_data_section",
                    "12": "get_next_byte",
                    "3": "get_next_byte_from_data_segment",
                    "6": "get_next_byte_from_data",
                    "8": "read_next_byte"
                },
                "uVar1": {
                    "1": "result",
                    "30": "next_byte"
                }
            },
            "called": [
                "FUN_08002720"
            ],
            "calling": [
                "FUN_08001c18"
            ],
            "code": "\nundefined get_next_byte_08001c08(void)\n\n{\n  undefined next_byte;\n  \n  next_byte = get_next_byte_08001c08_08002720(&DAT_20000314);\n  return next_byte;\n}\n\n",
            "current_name": "get_next_byte_08001c08",
            "entrypoint": "0x08001c08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001c08": "get_next_byte_08001c08",
                "uVar1": "next_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001c18": {
            "additional_data": {
                "DAT_20000130": {
                    "1": "pin_value",
                    "2": "first_param"
                },
                "DAT_20000131": {
                    "1": "byte_value",
                    "2": "second_param"
                },
                "DAT_20000132": {
                    "1": "decoded_data_buffer",
                    "2": "decoded_data",
                    "4": "received_data"
                },
                "DAT_20000314": {
                    "1": "received_data_buffer",
                    "2": "received_data",
                    "9": "data_buffer"
                },
                "DAT_200003d4": {
                    "1": "result",
                    "4": "error_message",
                    "7": "error_buffer"
                },
                "FUN_08001c18": {
                    "1": "receive_data",
                    "23": "process_received_data",
                    "5": "process_i2_c_data"
                },
                "bVar4": {
                    "1": "bytes_received",
                    "2": "has_difference",
                    "3": "is_difference_zero",
                    "5": "is_data_available",
                    "6": "is_difference_non_zero",
                    "7": "has_data"
                },
                "calculate_difference_0800270c": {
                    "1": "calculate_bytes_difference",
                    "8": "calculate_difference"
                },
                "calculate_difference_0800270c_2": {
                    "1": "calculate_difference2"
                },
                "decode_and_process_data_08002f0a": {
                    "1": "process_decoded_data",
                    "9": "decode_and_process_data"
                },
                "get_next_byte_08001c08": {
                    "8": "get_next_byte"
                },
                "iVar2": {
                    "1": "current_index",
                    "2": "received_length",
                    "3": "i",
                    "7": "received_count",
                    "9": "difference"
                },
                "iVar3": {
                    "1": "temp_difference",
                    "11": "difference",
                    "2": "remaining_count",
                    "3": "difference2",
                    "4": "current_difference"
                },
                "initialize_data_08002a30": {
                    "9": "initialize_data"
                },
                "param_1": {
                    "1": "data_format",
                    "14": "device_address",
                    "2": "device_id"
                },
                "param_2": {
                    "1": "received_bytes",
                    "2": "length",
                    "3": "num_bytes",
                    "4": "data_length",
                    "8": "byte_count"
                },
                "param_3": {
                    "1": "expected_byte_count",
                    "2": "expected_data_length",
                    "3": "expected_size",
                    "4": "expected_bytes",
                    "5": "expected_num_bytes",
                    "7": "expected_count"
                },
                "param_4": {
                    "1": "additional_parameter",
                    "2": "extra_data",
                    "3": "config_param",
                    "4": "param_4",
                    "6": "additional_data"
                },
                "process_data_08001bf8": {
                    "1": "initialize_data",
                    "2": "process_byte"
                },
                "process_data_08002a58": {
                    "1": "process_data2",
                    "2": "process_config_data",
                    "3": "process_additional_data"
                },
                "process_data_08002c14": {
                    "1": "process_received_bytes",
                    "2": "process_received_data"
                },
                "process_data_08002f14": {
                    "1": "handle_i2c_error",
                    "2": "report_error",
                    "3": "process_error"
                },
                "uVar1": {
                    "1": "current_byte",
                    "2": "byte",
                    "23": "next_byte",
                    "3": "byte_value"
                }
            },
            "called": [
                "FUN_0800270c",
                "FUN_08002c14",
                "FUN_08002a58",
                "FUN_08002f0a",
                "FUN_08001c08",
                "FUN_08002f14",
                "FUN_08002a30",
                "FUN_08001bf8"
            ],
            "calling": [
                "FUN_08001cd0",
                "FUN_080022f8"
            ],
            "code": "\nvoid process_received_data_08001c18(undefined4 device_address,uint byte_count,int expected_length,undefined4 additional_data)\n\n{\n  undefined next_byte;\n  int difference;\n  int difference;\n  bool has_data;\n  \n  if (byte_count == 0xffffffff) {\n    byte_count = 0;\n  }\n  else {\n    initialize_data(&DAT_20000314,device_address);\n    process_data(byte_count & 0xff);\n    process_additional_data(&DAT_20000314,additional_data);\n  }\n  process_received_data_08001c18(&DAT_20000314,device_address,expected_length);\n  difference = calculate_difference(&DAT_20000314);\n  if (expected_length < difference) {\n    process_error(&DAT_200003d4,\"I2C: Too many bytes received\");\n  }\n  else {\n    difference = calculate_difference(&DAT_20000314);\n    if (difference < expected_length) {\n      process_error(&DAT_200003d4,\"I2C: Too few bytes received\");\n    }\n  }\n  DAT_20000130 = (undefined)device_address;\n  DAT_20000131 = (undefined)byte_count;\n  difference = 0;\n  while( true ) {\n    if (difference < expected_length) {\n      difference = calculate_difference(&DAT_20000314);\n      if (difference == 0) {\n        has_data = false;\n      }\n      else {\n        has_data = true;\n      }\n    }\n    else {\n      has_data = false;\n    }\n    if (!has_data) break;\n    next_byte = get_next_byte();\n    (&DAT_20000132)[difference] = next_byte;\n    difference = difference + 1;\n  }\n  decode_and_process_data(&DAT_200003d4,0x77,expected_length + 2U & 0xff,&DAT_20000130);\n  return;\n}\n\n",
            "current_name": "process_received_data_08001c18",
            "entrypoint": "0x08001c18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001c18": "process_received_data_08001c18",
                "bVar4": "has_data",
                "calculate_difference_0800270c": "calculate_difference",
                "decode_and_process_data_08002f0a": "decode_and_process_data",
                "get_next_byte_08001c08": "get_next_byte",
                "iVar2": "difference",
                "iVar3": "difference",
                "initialize_data_08002a30": "initialize_data",
                "param_1": "device_address",
                "param_2": "byte_count",
                "param_3": "expected_length",
                "param_4": "additional_data",
                "process_data_08001bf8": "process_data",
                "process_data_08002a58": "process_additional_data",
                "process_data_08002c14": "process_received_data",
                "process_data_08002f14": "process_error",
                "uVar1": "next_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001cd0": {
            "additional_data": {
                "DAT_0800a908": {
                    "1": "character_array"
                },
                "DAT_200001f0": {
                    "1": "config_array1"
                },
                "DAT_2000022c": {
                    "1": "config_array2"
                },
                "DAT_200003d4": {
                    "1": "data_buffer"
                },
                "FUN_08001cd0": {
                    "1": "execute_command",
                    "14": "process_command",
                    "2": "process_instruction",
                    "8": "process_data"
                },
                "bVar1": {
                    "1": "byte_value1",
                    "19": "byte1",
                    "2": "value1",
                    "3": "byte_var1",
                    "6": "first_byte"
                },
                "bVar12": {
                    "1": "boolean",
                    "2": "condition",
                    "3": "is_true",
                    "5": "bool_var",
                    "6": "flag"
                },
                "bVar2": {
                    "1": "byte_value2",
                    "19": "byte2",
                    "2": "value2",
                    "3": "byte_var2",
                    "6": "second_byte"
                },
                "bVar3": {
                    "1": "byte_value3",
                    "19": "byte3",
                    "2": "value3",
                    "3": "byte_var3",
                    "6": "third_byte"
                },
                "bVar5": {
                    "1": "bit_mask",
                    "17": "byte4",
                    "2": "byte5",
                    "3": "byte_var5",
                    "4": "fourth_byte"
                },
                "cVar6": {
                    "1": "offset",
                    "2": "byte5",
                    "3": "char_var6",
                    "5": "char_var",
                    "9": "char1"
                },
                "configure_pin_080005f8": {
                    "2": "configure_pin"
                },
                "configure_pins_08000a64": {
                    "2": "configure_pins"
                },
                "configure_servo_08000500": {
                    "2": "configure_servo"
                },
                "execute_function_08002f1e": {
                    "2": "execute_function"
                },
                "extract_bit_080026f8": {
                    "2": "extract_bit"
                },
                "find_character_index_080036ac": {
                    "2": "find_character_index"
                },
                "find_value_in_array_0800738a": {
                    "1": "find_value_in_array"
                },
                "get_value_from_offset_08002fa0": {
                    "2": "get_value_from_offset"
                },
                "get_value_from_offset_08002fba": {
                    "2": "get_value_from_offset"
                },
                "iVar11": {
                    "1": "var11",
                    "16": "index3",
                    "2": "int_var3"
                },
                "iVar7": {
                    "1": "int_var",
                    "2": "index_var",
                    "23": "index"
                },
                "iVar8": {
                    "1": "current_index",
                    "18": "index2",
                    "2": "int_var2"
                },
                "initialize_data_08002a30": {
                    "2": "initialize_data"
                },
                "param_1": {
                    "1": "command_id",
                    "12": "command",
                    "2": "instruction_code",
                    "4": "command_type",
                    "9": "opcode"
                },
                "param_2": {
                    "1": "instruction_length",
                    "17": "length",
                    "2": "param_length",
                    "4": "size"
                },
                "param_3": {
                    "1": "command_data",
                    "2": "input_data",
                    "22": "data",
                    "3": "param_data"
                },
                "param_4": {
                    "1": "unknown_param",
                    "15": "param_4",
                    "2": "param4",
                    "3": "param"
                },
                "process_and_return_data_08002ac0": {
                    "2": "process_and_return_data"
                },
                "process_command_08001cd0": {
                    "1": "process_command"
                },
                "process_data_08001bf8": {
                    "1": "process_data"
                },
                "process_data_08002f14": {
                    "2": "process_data"
                },
                "process_received_data_08001c18": {
                    "2": "process_received_data"
                },
                "process_value_08000214": {
                    "2": "process_value"
                },
                "uVar10": {
                    "1": "loop_var_3",
                    "2": "uint_var2",
                    "4": "temp",
                    "5": "u_var2"
                },
                "uVar4": {
                    "1": "uint_var4",
                    "2": "unknown_var",
                    "3": "u_var4",
                    "8": "result",
                    "9": "value"
                },
                "uVar9": {
                    "1": "loop_var1",
                    "2": "value",
                    "3": "loop_index",
                    "4": "count",
                    "5": "u_var1"
                },
                "update_configuration_08000588": {
                    "2": "update_configuration"
                }
            },
            "called": [
                "FUN_080026f8",
                "FUN_080036ac",
                "FUN_080005f8",
                "FUN_08002ac0",
                "FUN_08000a64",
                "FUN_08000588",
                "FUN_08001bf8",
                "FUN_08001c18",
                "FUN_08002f1e",
                "FUN_08002fba",
                "FUN_08002f14",
                "FUN_08002a30",
                "FUN_0800738a",
                "FUN_08000500",
                "FUN_08002fa0",
                "FUN_08000214"
            ],
            "calling": [],
            "code": "\nvoid process_command_08001cd0(undefined4 command,int length,byte *data,undefined4 param_4)\n\n{\n  byte byte1;\n  byte byte2;\n  byte byte3;\n  undefined4 value;\n  byte byte4;\n  char char1;\n  int index;\n  int index2;\n  uint u_var1;\n  uint u_var2;\n  int index3;\n  bool flag;\n  \n  switch(command) {\n  case 0x69:\n    execute_function(&DAT_200003d4,0xf0);\n    execute_function(&DAT_200003d4,0x6a);\n    for (u_var1 = 0; u_var1 < 0x3c; u_var1 = u_var1 + 1 & 0xff) {\n      u_var2 = u_var1 - 0x2e & 0xff;\n      if (u_var2 < 0xe) {\n        if (u_var1 < 0x3c) {\n          index = (int)(char)(&DAT_0800a908)[u_var1];\n        }\n        else {\n          index = -1;\n        }\n        index = find_character_index(index);\n        if (index == 0) {\n          u_var2 = 0x7f;\n        }\n        else {\n          if (u_var1 < 0x3c) {\n            index = (int)(char)(&DAT_0800a908)[u_var1];\n          }\n          else {\n            index = -1;\n          }\n          index = find_character_index(index);\n          if (index == 1) {\n            u_var2 = 0x7f;\n          }\n        }\n      }\n      else {\n        u_var2 = 0x7f;\n      }\n      execute_function(&DAT_200003d4,u_var2);\n    }\n    execute_function(&DAT_200003d4,0xf7);\n    break;\n  case 0x6b:\n    execute_function(&DAT_200003d4,0xf0);\n    execute_function(&DAT_200003d4,0x6c);\n    for (u_var1 = 0; u_var1 < 0x3c; u_var1 = u_var1 + 1 & 0xff) {\n      if (u_var1 < 0x3c) {\n        if ((&DAT_0800a908)[u_var1] == -1) {\n          flag = false;\n        }\n        else {\n          index = find_character_index();\n          if (index == 0) {\n            flag = false;\n          }\n          else {\n            index = find_character_index((int)(char)(&DAT_0800a908)[u_var1]);\n            if (index == 1) {\n              flag = false;\n            }\n            else {\n              flag = true;\n            }\n          }\n        }\n      }\n      else {\n        flag = false;\n      }\n      if (flag) {\n        execute_function(&DAT_200003d4,0);\n        execute_function(&DAT_200003d4,1);\n        execute_function(&DAT_200003d4,0xb);\n        execute_function(&DAT_200003d4,1);\n        execute_function(&DAT_200003d4,1);\n        execute_function(&DAT_200003d4,1);\n      }\n      if ((u_var1 - 0x2e & 0xff) < 0xe) {\n        if (u_var1 < 0x3c) {\n          index = (int)(char)(&DAT_0800a908)[u_var1];\n        }\n        else {\n          index = -1;\n        }\n        index = find_character_index(index);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          if (u_var1 < 0x3c) {\n            index = (int)(char)(&DAT_0800a908)[u_var1];\n          }\n          else {\n            index = -1;\n          }\n          index = find_character_index(index);\n          if (index == 1) {\n            flag = false;\n          }\n          else {\n            flag = true;\n          }\n        }\n      }\n      else {\n        flag = false;\n      }\n      if (flag) {\n        execute_function(&DAT_200003d4,2);\n        execute_function(&DAT_200003d4,10);\n      }\n      if (u_var1 < 0x3c) {\n        if ((&DAT_0800a908)[u_var1] == -1) {\n          index = 0;\n        }\n        else {\n          index = find_character_index();\n          if (index == 0) {\n            index = 0;\n          }\n          else {\n            index = find_character_index((int)(char)(&DAT_0800a908)[u_var1]);\n            if (index == 1) {\n              index = 0;\n            }\n            else {\n              index = find_value_in_array((int)(char)(&DAT_0800a908)[u_var1],&DAT_0800a6cc);\n            }\n          }\n        }\n      }\n      else {\n        index = 0;\n      }\n      if (index != 0) {\n        execute_function(&DAT_200003d4,3);\n        execute_function(&DAT_200003d4,8);\n      }\n      if (u_var1 < 0x3c) {\n        if ((&DAT_0800a908)[u_var1] == -1) {\n          flag = false;\n        }\n        else {\n          index = find_character_index();\n          if (index == 0) {\n            flag = false;\n          }\n          else {\n            index = find_character_index((int)(char)(&DAT_0800a908)[u_var1]);\n            if (index == 1) {\n              flag = false;\n            }\n            else {\n              flag = true;\n            }\n          }\n        }\n      }\n      else {\n        flag = false;\n      }\n      if (flag) {\n        execute_function(&DAT_200003d4,4);\n        execute_function(&DAT_200003d4,0xe);\n      }\n      if (u_var1 < 0x3c) {\n        if ((&DAT_0800a908)[u_var1] == -1) {\n          index = 0;\n        }\n        else {\n          index = find_character_index();\n          if (index == 0) {\n            index = 0;\n          }\n          else {\n            index = find_character_index((int)(char)(&DAT_0800a908)[u_var1]);\n            if (index == 1) {\n              index = 0;\n            }\n            else {\n              index = find_value_in_array((int)(char)(&DAT_0800a908)[u_var1],&DAT_0800a69c);\n              if (index == 0) {\n                index = find_value_in_array((int)(char)(&DAT_0800a908)[u_var1],&DAT_0800a66c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        index = 0;\n      }\n      if (index != 0) {\n        execute_function(&DAT_200003d4,6);\n        execute_function(&DAT_200003d4,1);\n      }\n      execute_function(&DAT_200003d4,0x7f);\n    }\n    execute_function(&DAT_200003d4,0xf7);\n    return;\n  case 0x6d:\n    if (length != 0) {\n      byte1 = *data;\n      execute_function(&DAT_200003d4,0xf0);\n      execute_function(&DAT_200003d4,0x6e);\n      execute_function(&DAT_200003d4,byte1);\n      if (byte1 < 0x3c) {\n        value = get_value_from_offset(&DAT_200003d4,byte1);\n        execute_function(&DAT_200003d4,value);\n        u_var1 = get_value_from_offset(&DAT_200003d4,byte1);\n        execute_function(&DAT_200003d4,u_var1 & 0x7f);\n        u_var1 = get_value_from_offset(&DAT_200003d4,byte1);\n        if ((u_var1 & 0xff80) != 0) {\n          index = get_value_from_offset(&DAT_200003d4,byte1);\n          execute_function(&DAT_200003d4,(uint)(index << 0x12) >> 0x19);\n        }\n        u_var1 = get_value_from_offset(&DAT_200003d4,byte1);\n        if ((u_var1 & 0xc000) != 0) {\n          index = get_value_from_offset(&DAT_200003d4,byte1);\n          execute_function(&DAT_200003d4,(uint)(index << 0xb) >> 0x19);\n        }\n      }\n      execute_function(&DAT_200003d4,0xf7);\n      return;\n    }\n    break;\n  case 0x6f:\n    if (1 < length) {\n      u_var1 = (uint)data[1];\n      if (2 < length) {\n        u_var1 = u_var1 | (uint)data[2] << 7;\n      }\n      if (3 < length) {\n        u_var1 = u_var1 | (uint)data[3] << 0xe;\n      }\n      process_value(*data,u_var1);\n      return;\n    }\n    break;\n  case 0x70:\n    if (4 < length) {\n      u_var1 = (uint)*data;\n      byte1 = data[1];\n      byte4 = data[2];\n      byte2 = data[3];\n      byte3 = data[4];\n      if (u_var1 < 0x3c) {\n        if ((&DAT_0800a908)[u_var1] == -1) {\n          flag = false;\n        }\n        else {\n          index = find_character_index();\n          if (index == 0) {\n            flag = false;\n          }\n          else {\n            index = find_character_index((int)(char)(&DAT_0800a908)[u_var1]);\n            if (index == 1) {\n              flag = false;\n            }\n            else {\n              flag = true;\n            }\n          }\n        }\n      }\n      else {\n        flag = false;\n      }\n      if (flag) {\n        if ((byte)(&DAT_200001f0)[u_var1] < 0xc) {\n          index = extract_bit(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[u_var1] * 3);\n        }\n        else {\n          index = 0;\n        }\n        if (index != 0) {\n          update_configuration(u_var1);\n        }\n        configure_servo(u_var1,(uint)byte1 + (uint)byte4 * 0x80,(uint)byte2 + (uint)byte3 * 0x80);\n        configure_pin(u_var1,4);\n        return;\n      }\n    }\n    break;\n  case 0x76:\n    byte1 = data[1];\n    byte4 = byte1 & 0x18;\n    if ((byte1 & 0x20) != 0) {\n      process_data(&DAT_200003d4,\"10-bit addressing not supported\",byte4,byte1,param_4);\n      return;\n    }\n    byte2 = *data;\n    flag = (byte1 & 0x40) == 0;\n    if (byte4 < 0x19) {\n      switch(byte4) {\n      case 0:\n        initialize_data(&DAT_20000314,byte2);\n        for (u_var1 = 2; (int)u_var1 < length; u_var1 = u_var1 + 2 & 0xff) {\n          process_data(data[u_var1 + 1] * -0x80 + data[u_var1]);\n        }\n        process_and_return_data(&DAT_20000314);\n        return;\n      case 8:\n        if (length == 6) {\n          index = (uint)data[2] + (uint)data[3] * 0x80;\n          char1 = data[4] + data[5] * -0x80;\n        }\n        else {\n          char1 = data[2] + data[3] * -0x80;\n          index = -1;\n        }\n        process_received_data(byte2,index,char1);\n        return;\n      case 0x10:\n        if (DAT_20000004 + 1 < 8) {\n          if (length == 6) {\n            index = (uint)data[2] + (uint)data[3] * 0x80;\n            char1 = data[4] + data[5] * -0x80;\n          }\n          else {\n            char1 = data[2] + data[3] * -0x80;\n            index = -1;\n          }\n          DAT_20000004 = DAT_20000004 + '\\x01';\n          index2 = (int)DAT_20000004;\n          index3 = index2 * 0xc;\n          (&DAT_20000188)[index3] = byte2;\n          (&DAT_2000018c)[index2 * 3] = index;\n          (&DAT_20000190)[index3] = char1;\n          (&DAT_20000191)[index3] = flag;\n          return;\n        }\n        process_data(&DAT_200003d4,\"too many queries\",(int)DAT_20000004,flag,param_4);\n        return;\n      case 0x18:\n        if (DAT_20000004 < 1) {\n          DAT_20000004 = 0xff;\n          return;\n        }\n      }\n      for (u_var1 = 0; index = DAT_20000004 + 1, (int)u_var1 < index; u_var1 = u_var1 + 1 & 0xff) {\n        if (byte2 == (&DAT_20000188)[u_var1 * 0xc]) goto LAB_08001e66;\n      }\n      u_var1 = 0;\nLAB_08001e66:\n      for (; (int)u_var1 < index; u_var1 = u_var1 + 1 & 0xff) {\n        if (u_var1 < 8) {\n          index2 = (u_var1 + 1) * 0xc;\n          index3 = u_var1 * 0xc;\n          (&DAT_20000188)[index3] = (&DAT_20000188)[index2];\n          (&DAT_2000018c)[u_var1 * 3] = (&DAT_2000018c)[(u_var1 + 1) * 3];\n          (&DAT_20000190)[index3] = (&DAT_20000190)[index2];\n          (&DAT_20000191)[index3] = (&DAT_20000191)[index2];\n        }\n      }\n      DAT_20000004 = DAT_20000004 + -1;\n      return;\n    }\n    break;\n  case 0x78:\n    index = (uint)*data + (uint)data[1] * 0x80;\n    if ((1 < length) && (index != 0)) {\n      DAT_2000012c = index;\n    }\n    if (DAT_20000170 == '\\0') {\n      configure_pins();\n      return;\n    }\n    break;\n  case 0x7a:\n    if ((1 < length) &&\n       (DAT_20000008 = (uint)*data + (uint)data[1] * 0x80, DAT_20000008 == 0)) {\n      DAT_20000008 = 1;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_command_08001cd0",
            "entrypoint": "0x08001cd0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001cd0": "process_command_08001cd0",
                "bVar1": "byte1",
                "bVar12": "flag",
                "bVar2": "byte2",
                "bVar3": "byte3",
                "bVar5": "byte4",
                "cVar6": "char1",
                "configure_pin_080005f8": "configure_pin",
                "configure_pins_08000a64": "configure_pins",
                "configure_servo_08000500": "configure_servo",
                "execute_function_08002f1e": "execute_function",
                "extract_bit_080026f8": "extract_bit",
                "find_character_index_080036ac": "find_character_index",
                "find_value_in_array_0800738a": "find_value_in_array",
                "get_value_from_offset_08002fa0": "get_value_from_offset",
                "get_value_from_offset_08002fba": "get_value_from_offset",
                "iVar11": "index3",
                "iVar7": "index",
                "iVar8": "index2",
                "initialize_data_08002a30": "initialize_data",
                "param_1": "command",
                "param_2": "length",
                "param_3": "data",
                "process_and_return_data_08002ac0": "process_and_return_data",
                "process_data_08001bf8": "process_data",
                "process_data_08002f14": "process_data",
                "process_received_data_08001c18": "process_received_data",
                "process_value_08000214": "process_value",
                "uVar10": "u_var2",
                "uVar4": "value",
                "uVar9": "u_var1",
                "update_configuration_08000588": "update_configuration"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080022f8": {
            "additional_data": {
                "DAT_0800a908": {
                    "1": "character_data",
                    "3": "character_flags"
                },
                "DAT_20000004": {
                    "1": "upper_limit",
                    "2": "count"
                },
                "DAT_20000008": {
                    "1": "limit",
                    "3": "threshold"
                },
                "DAT_20000114": {
                    "1": "bit_mask",
                    "2": "bitmask"
                },
                "DAT_20000118": {
                    "4": "initialized_data"
                },
                "DAT_2000017c": {
                    "1": "processed_count",
                    "3": "offset"
                },
                "DAT_20000188": {
                    "1": "data1"
                },
                "DAT_2000018c": {
                    "1": "data2"
                },
                "DAT_20000190": {
                    "1": "data3"
                },
                "DAT_20000191": {
                    "1": "data4"
                },
                "DAT_200003d4": {
                    "3": "data"
                },
                "FUN_080022f8": {
                    "1": "process_flags",
                    "19": "process_data",
                    "3": "process_function"
                },
                "bVar1": {
                    "1": "is_true",
                    "3": "is_valid"
                },
                "data_08008abc": {
                    "1": "data"
                },
                "execute_and_decode_08002ef2": {
                    "30": "execute_and_decode"
                },
                "execute_function_08002ec4": {
                    "1": "execute_next_function",
                    "28": "execute_function"
                },
                "find_character_index_080036ac": {
                    "30": "find_character_index"
                },
                "get_value_from_offset_08002fa0": {
                    "30": "get_value_from_offset"
                },
                "iVar2": {
                    "1": "index",
                    "2": "return_value",
                    "7": "result"
                },
                "initialize_data_08008abc": {
                    "28": "initialize_data"
                },
                "process_character_flags_08000ef8": {
                    "10": "process_character_flags"
                },
                "process_data_08002ed2": {
                    "27": "process_data"
                },
                "process_data_08008880": {
                    "1": "process_data_individually",
                    "26": "process_data"
                },
                "process_received_data_08001c18": {
                    "30": "process_received_data"
                },
                "uVar3": {
                    "1": "processed_value",
                    "7": "value"
                },
                "uVar4": {
                    "1": "loop_index",
                    "2": "index1",
                    "4": "index"
                },
                "uVar5": {
                    "1": "inner_loop_var",
                    "2": "index2"
                }
            },
            "called": [
                "FUN_08008880",
                "FUN_08002ef2",
                "FUN_08001c18",
                "FUN_080036ac",
                "FUN_08002ec4",
                "FUN_08002ed2",
                "FUN_08008abc",
                "FUN_08000ef8",
                "FUN_08002fa0"
            ],
            "calling": [
                "FUN_08008f1c"
            ],
            "code": "\nvoid process_data_080022f8(void)\n\n{\n  bool is_valid;\n  int result;\n  undefined4 value;\n  uint index;\n  uint index2;\n  \n  process_character_flags();\n  while (result = execute_function(&DAT_200003d4), result != 0) {\n    process_data_080022f8(&DAT_200003d4);\n  }\n  DAT_20000118 = initialize_data();\n  if (DAT_20000008 < (uint)(DAT_20000118 - DAT_2000017c)) {\n    DAT_2000017c = DAT_2000017c + DAT_20000008;\n    for (index = 0; index < 0x3c; index = index + 1 & 0xff) {\n      index2 = index - 0x2e & 0xff;\n      if (index2 < 0xe) {\n        if (index < 0x3c) {\n          result = (int)(char)(&DAT_0800a908)[index];\n        }\n        else {\n          result = -1;\n        }\n        result = find_character_index(result);\n        if (result == 0) {\n          is_valid = false;\n        }\n        else {\n          if (index < 0x3c) {\n            result = (int)(char)(&DAT_0800a908)[index];\n          }\n          else {\n            result = -1;\n          }\n          result = find_character_index(result);\n          if (result == 1) {\n            is_valid = false;\n          }\n          else {\n            result = get_value_from_offset(&DAT_200003d4,index);\n            if (result == 2) {\n              is_valid = true;\n            }\n            else {\n              is_valid = false;\n            }\n          }\n        }\n      }\n      else {\n        is_valid = false;\n      }\n      if ((is_valid) && ((DAT_20000114 >> index2 & 1U) != 0)) {\n        value = process_data_080022f8(index2);\n        execute_and_decode(&DAT_200003d4,index2,value);\n      }\n    }\n    if (-1 < DAT_20000004) {\n      for (index = 0; (int)index < DAT_20000004 + 1; index = index + 1 & 0xff) {\n        result = index * 0xc;\n        process_received_data((&DAT_20000188)[result],(&DAT_2000018c)[index * 3],(&DAT_20000190)[result],\n                     (&DAT_20000191)[result]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_data_080022f8",
            "entrypoint": "0x080022f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080022f8": "process_data_080022f8",
                "bVar1": "is_valid",
                "data_08008abc": "data",
                "execute_and_decode_08002ef2": "execute_and_decode",
                "execute_function_08002ec4": "execute_function",
                "find_character_index_080036ac": "find_character_index",
                "get_value_from_offset_08002fa0": "get_value_from_offset",
                "iVar2": "result",
                "initialize_data_08008abc": "initialize_data",
                "process_character_flags_08000ef8": "process_character_flags",
                "process_data_08002ed2": "process_data",
                "process_data_08008880": "process_data",
                "process_received_data_08001c18": "process_received_data",
                "uVar3": "value",
                "uVar4": "index",
                "uVar5": "index2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002400": {
            "additional_data": {
                "FUN_08002400": {
                    "1": "check_bit_flag",
                    "2": "check_for_bit_set",
                    "3": "check_flag"
                },
                "param_1": {
                    "1": "input_param",
                    "10": "index",
                    "7": "input_value",
                    "9": "input"
                },
                "uVar1": {
                    "1": "index",
                    "27": "counter"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002644",
                "FUN_080025ac"
            ],
            "code": "\nundefined4 check_flag_08002400(int index)\n\n{\n  uint counter;\n  \n  counter = 0;\n  while( true ) {\n    if (0xb < counter) {\n      return 0;\n    }\n    if (((&DAT_20000258)[(index * 0xc + counter) * 8] & 0x40) != 0) break;\n    counter = counter + 1 & 0xff;\n  }\n  return 1;\n}\n\n",
            "current_name": "check_flag_08002400",
            "entrypoint": "0x08002400",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002400": "check_flag_08002400",
                "param_1": "index",
                "uVar1": "counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800242c": {
            "additional_data": {
                "0x5dc": {
                    "1": "param3_value"
                },
                "60000": {
                    "1": "param2_value"
                },
                "FUN_0800242c": {
                    "1": "initialize_function",
                    "2": "initialize_and_configure",
                    "21": "initialize_parameters",
                    "3": "initialize_and_set_parameters"
                },
                "LAB_08002444_1": {
                    "1": "status_code",
                    "5": "label_1"
                },
                "initialize_parameters_08007648": {
                    "1": "initialize_parameters",
                    "2": "initialize_parameters_helper"
                },
                "param_1": {
                    "1": "network_connection",
                    "14": "param_1",
                    "4": "param1",
                    "7": "arg1"
                },
                "param_2": {
                    "1": "buffer_arg",
                    "11": "param_2",
                    "2": "timeout",
                    "4": "arg2"
                },
                "param_3": {
                    "1": "config_param3",
                    "11": "param_3",
                    "2": "buffer_size",
                    "4": "arg3"
                },
                "param_4": {
                    "1": "param_cb",
                    "13": "param_4",
                    "2": "callback_function",
                    "4": "param4",
                    "7": "arg4"
                }
            },
            "called": [
                "FUN_08007648"
            ],
            "calling": [
                "FUN_080025ac"
            ],
            "code": "\nvoid initialize_parameters_0800242c(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  initialize_parameters_0800242c_helper(param_1,60000,0x5dc,&label_1,param_4);\n  return;\n}\n\n",
            "current_name": "initialize_parameters_0800242c",
            "entrypoint": "0x0800242c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800242c": "initialize_parameters_0800242c",
                "LAB_08002444_1": "label_1",
                "initialize_parameters_08007648": "initialize_parameters_helper"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002578": {
            "additional_data": {
                "<original_parameter_name_1>": {
                    "1": "<new_parameter_name_1>"
                },
                "<original_parameter_name_2>": {
                    "1": "<new_parameter_name_2>"
                },
                "<original_variable_name>": {
                    "1": "<new_variable_name>"
                },
                "<original_variable_name_1>": {
                    "2": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "2": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "FUN_08002578": {
                    "11": "initialize_configuration",
                    "20": "initialize_and_update_configuration"
                },
                "initialize_and_update_configuration_080076e0": {
                    "1": "<unchanged>",
                    "18": "initialize_and_update_configuration",
                    "2": "initialize_config"
                },
                "void": {
                    "1": "<unchanged>"
                }
            },
            "called": [
                "FUN_080076e0"
            ],
            "calling": [
                "FUN_08002644"
            ],
            "code": "\nvoid initialize_and_update_configuration_08002578(void)\n\n{\n  initialize_and_update_configuration_08002578();\n  return;\n}\n\n",
            "current_name": "initialize_and_update_configuration_08002578",
            "entrypoint": "0x08002578",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002578": "initialize_and_update_configuration_08002578",
                "initialize_and_update_configuration_080076e0": "initialize_and_update_configuration"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002580": {
            "additional_data": {
                "*(undefined4 *)(&DAT_2000025c + uVar2 * 8)": {
                    "1": "array_value"
                },
                "*param_1": {
                    "1": "output_value"
                },
                "DAT_20000250": {
                    "1": "counter"
                },
                "FUN_08002580": {
                    "1": "set_default_value",
                    "2": "process_data",
                    "3": "update_data",
                    "4": "set_byte_value",
                    "7": "initialize_data"
                },
                "cVar1": {
                    "1": "next_data",
                    "16": "next_value",
                    "3": "next_char"
                },
                "param_1": {
                    "1": "memory_pointer",
                    "2": "output",
                    "3": "output_data",
                    "7": "output_buffer"
                },
                "uVar2": {
                    "1": "unsigned_value",
                    "2": "data_index",
                    "3": "data_length",
                    "4": "index",
                    "5": "data_size",
                    "7": "counter"
                }
            },
            "called": [],
            "calling": [
                "FUN_080004d4"
            ],
            "code": "\nvoid initialize_data_08002580(byte *output_buffer)\n\n{\n  char next_value;\n  uint counter;\n  \n  counter = (uint)DAT_20000250;\n  if (0xb < counter) {\n    *output_buffer = 0xff;\n    return;\n  }\n  next_value = DAT_20000250 + 1;\n  *output_buffer = DAT_20000250;\n  DAT_20000250 = next_value;\n  *(undefined4 *)(&DAT_2000025c + counter * 8) = 0x5dc;\n  return;\n}\n\n",
            "current_name": "initialize_data_08002580",
            "entrypoint": "0x08002580",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002580": "initialize_data_08002580",
                "cVar1": "next_value",
                "param_1": "output_buffer",
                "uVar2": "counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080025ac": {
            "additional_data": {
                "&DAT_20000258": {
                    "1": "data_array"
                },
                "(uint)*param_1 * -0x55555555": {
                    "1": "multiplication_result"
                },
                "*param_1": {
                    "1": "byte_array"
                },
                "DAT_20000258": {
                    "1": "peripheral_offsets",
                    "2": "peripheral_data"
                },
                "DAT_200002fc": {
                    "1": "flag_data",
                    "2": "flag_value",
                    "4": "flag"
                },
                "FUN_080025ac": {
                    "20": "configure_peripheral",
                    "5": "configure_and_initialize",
                    "6": "configure_and_initialize_peripheral"
                },
                "byte_array[1]": {
                    "1": "updated_value1"
                },
                "byte_array[2]": {
                    "1": "updated_value2"
                },
                "check_flag_08002400": {
                    "1": "check_flag_function",
                    "12": "check_flag"
                },
                "configure_peripheral_08008990": {
                    "1": "configure_peripheral_function",
                    "5": "configure_peripheral"
                },
                "difference": {
                    "1": "param_3_difference"
                },
                "difference + 0x220": {
                    "1": "positive_difference1"
                },
                "difference + 0x223": {
                    "1": "positive_difference2"
                },
                "difference2": {
                    "1": "param_4_difference"
                },
                "difference2 + 0x960": {
                    "1": "positive_difference3"
                },
                "difference2 + 0x963": {
                    "1": "positive_difference4"
                },
                "iVar4": {
                    "1": "temp_var",
                    "2": "difference",
                    "3": "temp4"
                },
                "iVar5": {
                    "1": "adjusted_value2"
                },
                "initialize_parameters_0800242c": {
                    "1": "initialize_peripheral_parameters",
                    "11": "initialize_parameters"
                },
                "offset2": {
                    "1": "offset2"
                },
                "param_1": {
                    "1": "byte_array",
                    "11": "data",
                    "2": "data_ptr",
                    "3": "input_data",
                    "7": "input_buffer"
                },
                "param_2": {
                    "1": "param",
                    "2": "param_a",
                    "4": "peripheral_address",
                    "5": "param_value",
                    "6": "peripheral_id"
                },
                "param_3": {
                    "1": "param_3",
                    "2": "param_b",
                    "3": "offset_1",
                    "6": "value_1",
                    "8": "value1"
                },
                "param_4": {
                    "1": "offset_value_2",
                    "2": "param_c",
                    "3": "offset_2",
                    "6": "value_2",
                    "8": "value2"
                },
                "uVar1": {
                    "1": "updated_byte",
                    "2": "updated_value1",
                    "3": "temp1"
                },
                "uVar2": {
                    "1": "data_value",
                    "2": "modified_value_2",
                    "3": "updated_value_2"
                },
                "uVar3": {
                    "1": "new_value_3",
                    "11": "division_result",
                    "2": "updated_value_3",
                    "3": "temp3"
                }
            },
            "called": [
                "FUN_08002400",
                "FUN_0800242c",
                "FUN_08008990"
            ],
            "calling": [
                "FUN_08002634",
                "FUN_08000500"
            ],
            "code": "\nbyte configure_peripheral_080025ac(byte *data,uint peripheral_id,int value1,int value2)\n\n{\n  uint updated_value_1;\n  uint updated_value_2;\n  uint division_result;\n  int offset;\n  \n  if (*data < 0xc) {\n    configure_peripheral_080025ac(peripheral_id,1,value1,*data,value2);\n    updated_value_2 = (uint)*data;\n    updated_value_1 = (byte)(&DAT_20000258)[updated_value_2 * 8] & 0xffffffc0 | peripheral_id & 0x3f;\n    (&DAT_20000258)[updated_value_2 * 8] = (char)updated_value_1;\n    offset = -value1 + 0x220;\n    if (offset < 0) {\n      offset = -value1 + 0x223;\n    }\n    data[1] = (byte)((uint)(offset << 0x16) >> 0x18);\n    offset = -value2 + 0x960;\n    if (offset < 0) {\n      offset = -value2 + 0x963;\n    }\n    data[2] = (byte)((uint)(offset << 0x16) >> 0x18);\n    division_result = *data / 0xc;\n    offset = check_flag(division_result,updated_value_1,updated_value_2,(uint)*data * -0x55555555);\n    if (offset == 0) {\n      DAT_200002fc = (undefined)division_result;\n      initialize_parameters();\n    }\n    (&DAT_20000258)[(uint)*data * 8] = (&DAT_20000258)[(uint)*data * 8] | 0x40;\n  }\n  return *data;\n}\n\n",
            "current_name": "configure_peripheral_080025ac",
            "entrypoint": "0x080025ac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080025ac": "configure_peripheral_080025ac",
                "check_flag_08002400": "check_flag",
                "configure_peripheral_08008990": "configure_peripheral",
                "iVar4": "offset",
                "initialize_parameters_0800242c": "initialize_parameters",
                "param_1": "data",
                "param_2": "peripheral_id",
                "param_3": "value1",
                "param_4": "value2",
                "uVar1": "updated_value_1",
                "uVar2": "updated_value_2",
                "uVar3": "division_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002634": {
            "additional_data": {
                "FUN_08002634": {
                    "1": "initialize_peripheral_configuration",
                    "26": "configure_peripheral",
                    "4": "initialize_peripheral"
                },
                "param_1": {
                    "1": "peripheral_id",
                    "2": "param1",
                    "3": "param_1",
                    "4": "device_id"
                },
                "param_2": {
                    "1": "config",
                    "2": "param2",
                    "3": "config_id",
                    "4": "config_param_2"
                },
                "param_3": {
                    "1": "port_num",
                    "2": "param_3",
                    "3": "config_param_3"
                },
                "param_4": {
                    "1": "result",
                    "2": "config_4",
                    "4": "config_param_4"
                }
            },
            "called": [
                "FUN_080025ac"
            ],
            "calling": [
                "FUN_08000500"
            ],
            "code": "\nvoid configure_peripheral_08002634(undefined4 config_param_1,undefined4 config_param_2,undefined4 config_param_3,undefined4 config_param_4)\n\n{\n  configure_peripheral_08002634_080025ac(config_param_1,config_param_2,0x220,0x960,config_param_4);\n  return;\n}\n\n",
            "current_name": "configure_peripheral_08002634",
            "entrypoint": "0x08002634",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002634": "configure_peripheral_08002634",
                "param_1": "config_param_1",
                "param_2": "config_param_2",
                "param_3": "config_param_3",
                "param_4": "config_param_4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002644": {
            "additional_data": {
                "FUN_08002644": {
                    "1": "update_flag_and_check_configuration",
                    "3": "process_flag",
                    "7": "update_flag",
                    "9": "update_configuration"
                },
                "bVar1": {
                    "1": "modified_byte",
                    "10": "flag",
                    "2": "flag_value",
                    "4": "current_value"
                },
                "check_flag_08002400": {
                    "1": "check_flag"
                },
                "iVar3": {
                    "1": "flag_result",
                    "17": "result",
                    "4": "check_result",
                    "8": "flag_check_result"
                },
                "initialize_and_update_configuration_08002578": {
                    "1": "initialize_and_update_config"
                },
                "param_1": {
                    "1": "bytes_array",
                    "18": "data",
                    "2": "flag_data",
                    "3": "buffer"
                },
                "param_2": {
                    "1": "input_param_1",
                    "3": "param_2",
                    "4": "config_param1",
                    "9": "param2"
                },
                "param_3": {
                    "1": "arg2",
                    "2": "param_3",
                    "3": "value2",
                    "8": "param3"
                },
                "param_4": {
                    "1": "config_var3",
                    "3": "config_param3",
                    "9": "param4"
                },
                "uVar2": {
                    "1": "flag_value",
                    "10": "index",
                    "2": "data_value",
                    "3": "byte_value",
                    "9": "first_byte"
                }
            },
            "called": [
                "FUN_08002400",
                "FUN_08002578"
            ],
            "calling": [
                "FUN_08000588"
            ],
            "code": "\nvoid update_configuration_08002644(byte *data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  byte flag;\n  uint index;\n  int result;\n  \n  index = (uint)*data;\n  flag = (&DAT_20000258)[index * 8];\n  (&DAT_20000258)[index * 8] = flag & 0xbf;\n  result = check_flag(index / 0xc,param2,flag & 0xbf,index * -0x55555555,param4);\n  if (result == 0) {\n    initialize_and_update_config(&DAT_200002b8);\n  }\n  return;\n}\n\n",
            "current_name": "update_configuration_08002644",
            "entrypoint": "0x08002644",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002644": "update_configuration_08002644",
                "bVar1": "flag",
                "check_flag_08002400": "check_flag",
                "iVar3": "result",
                "initialize_and_update_configuration_08002578": "initialize_and_update_config",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar2": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800267c": {
            "additional_data": {
                "&(DAT_2000025c)": {
                    "1": "new_array"
                },
                "(600 - (char)param_1[2]) * 4": {
                    "1": "difference"
                },
                "(char)param_1[1]": {
                    "1": "array_value_1"
                },
                "(char)param_1[2]": {
                    "1": "array_value_2"
                },
                "(uint)*param_1 * 8": {
                    "1": "new_index"
                },
                "*(int *)(&DAT_2000025c + (uint)*param_1 * 8)": {
                    "1": "result"
                },
                "*param_1": {
                    "1": "data_value",
                    "2": "array_value"
                },
                "DAT_2000025c": {
                    "1": "data_storage"
                },
                "FUN_0800267c": {
                    "1": "calculate_result",
                    "2": "update_values",
                    "5": "update_data",
                    "8": "update_array_value"
                },
                "byte *param_1": {
                    "1": "input_array"
                },
                "iVar1": {
                    "1": "calculation_result",
                    "11": "index",
                    "2": "result",
                    "3": "multiplier",
                    "8": "new_value"
                },
                "int param_2": {
                    "1": "value"
                },
                "param_1": {
                    "1": "buffer",
                    "11": "array",
                    "2": "byte_array",
                    "5": "input_array"
                },
                "param_2": {
                    "1": "input_param",
                    "19": "value",
                    "2": "param_value",
                    "3": "index"
                }
            },
            "called": [],
            "calling": [
                "FUN_080026b0"
            ],
            "code": "\nvoid update_array_value_0800267c(byte *array,int value)\n\n{\n  int index;\n  \n  if (*array < 0xc) {\n    index = (0x88 - array_value_1) * 4;\n    if ((index - value == 0 || index < value) &&\n       (index = (600 - array_value_2) * 4,\n       value == index || value + (600 - array_value_2) * -4 < 0 != SBORROW4(value,index)))\n    {\n      index = value;\n    }\n    *(int *)(&DAT_2000025c + (uint)*array * 8) = index;\n  }\n  return;\n}\n\n",
            "current_name": "update_array_value_0800267c",
            "entrypoint": "0x0800267c",
            "imported": false,
            "improved": true,
            "renaming": {
                "(char)param_1[1]": "array_value_1",
                "(char)param_1[2]": "array_value_2",
                "FUN_0800267c": "update_array_value_0800267c",
                "iVar1": "index",
                "param_1": "array",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080026b0": {
            "additional_data": {
                "* (param_1 + 1)": {
                    "1": "array_offset_1"
                },
                "* (param_1 + 2)": {
                    "1": "array_offset_2"
                },
                "*(char *)(param_1 + 1)": {
                    "1": "element1"
                },
                "*(char *)(param_1 + 2)": {
                    "1": "char_at_offset_2"
                },
                "FUN_080026b0": {
                    "1": "update_array_with_calculated_value",
                    "2": "update_array_with_value",
                    "20": "update_array_value",
                    "3": "update_value"
                },
                "F_UNE_080026b0": {
                    "1": "update_value_bounds"
                },
                "calculate_new_value_08008ef4": {
                    "23": "calculate_new_value"
                },
                "param_1": {
                    "1": "array_offset",
                    "11": "array_address",
                    "2": "array",
                    "4": "array_index",
                    "5": "array_pointer"
                },
                "param_2": {
                    "1": "current_value",
                    "11": "input_value",
                    "13": "value",
                    "6": "new_value"
                },
                "update_array_value_0800267c": {
                    "1": "update_array_value_aux",
                    "17": "update_array_value",
                    "2": "update_array_value_0800267c"
                }
            },
            "called": [
                "FUN_08008ef4",
                "FUN_0800267c"
            ],
            "calling": [
                "FUN_0800021a"
            ],
            "code": "\nvoid update_array_value_080026b0(int array_address,int value)\n\n{\n  if (value < 0x220) {\n    if (value < 0) {\n      value = 0;\n    }\n    else if (0xb4 < value) {\n      value = 0xb4;\n    }\n    value = calculate_new_value(value,0,0xb4,(0x88 - *(char *)(array_address + 1)) * 4,\n                           (600 - *(char *)(array_address + 2)) * 4);\n  }\n  update_array_value_080026b0(array_address,value);\n  return;\n}\n\n",
            "current_name": "update_array_value_080026b0",
            "entrypoint": "0x080026b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080026b0": "update_array_value_080026b0",
                "calculate_new_value_08008ef4": "calculate_new_value",
                "param_1": "array_address",
                "param_2": "value",
                "update_array_value_0800267c": "update_array_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080026f8": {
            "additional_data": {
                "&DAT_20000258": {
                    "1": "bit_lookup_table",
                    "2": "byte_array",
                    "3": "lookup_table"
                },
                "((uint)(byte)(&DAT_20000258)[(uint)*param_1 * 8] << 0x19) >> 0x1f": {
                    "1": "result"
                },
                "((uint)(byte)(&data[index]) << 0x19) >> 0x1f": {
                    "1": "bit_value"
                },
                "(byte)(&DAT_20000258)[index]": {
                    "1": "lookup_value"
                },
                "(uint)(byte)(&DAT_20000258)[(uint)*param_1 * 8]": {
                    "1": "selected_byte_value"
                },
                "(uint)(byte)(&DAT_20000258)[(uint)*param_1 * 8] << 0x19": {
                    "1": "shifted_value"
                },
                "(uint)(byte)(&data[index])": {
                    "1": "bit_mask"
                },
                "(uint)*param_1 * 8": {
                    "1": "calculated_index",
                    "4": "index"
                },
                "*param_1": {
                    "1": "first_element",
                    "2": "dereferenced_input_byte",
                    "3": "byte_value"
                },
                "DAT_20000258": {
                    "1": "bit_mapping",
                    "2": "data_array",
                    "4": "lookup_table"
                },
                "FUN_080026f8": {
                    "1": "bit_shift_and_mask",
                    "2": "calculate_shifted_value",
                    "3": "decode_byte",
                    "4": "extract_bit"
                },
                "PTR_XXXXX": {
                    "1": "unchanged_variable"
                },
                "byte": {
                    "1": "data_byte"
                },
                "param_1": {
                    "1": "input_pointer",
                    "11": "input_byte",
                    "4": "input_array",
                    "7": "byte_array"
                },
                "uint": {
                    "1": "unsigned_integer"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "code": "\nunsigned_integer extract_bit_080026f8(data_byte *input_byte)\n\n{\n  return ((unsigned_integer)(data_byte)(&DAT_20000258)[(unsigned_integer)*input_byte * 8] << 0x19) >> 0x1f;\n}\n\n",
            "current_name": "extract_bit_080026f8",
            "entrypoint": "0x080026f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080026f8": "extract_bit_080026f8",
                "byte": "data_byte",
                "param_1": "input_byte",
                "uint": "unsigned_integer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800270c": {
            "additional_data": {
                "DAT_200003b5": {
                    "1": "data_variable2",
                    "10": "value2",
                    "2": "second_data",
                    "3": "data_value2"
                },
                "DAT_200003b7": {
                    "1": "input_a",
                    "10": "value1",
                    "2": "data_value_1",
                    "3": "data_value1"
                },
                "FUN_0800270c": {
                    "28": "calculate_difference",
                    "3": "calculate_data_difference"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001c18"
            ],
            "code": "\nint calculate_difference_0800270c(void)\n\n{\n  return (uint)DAT_200003b7 - (uint)DAT_200003b5;\n}\n\n",
            "current_name": "calculate_difference_0800270c",
            "entrypoint": "0x0800270c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800270c": "calculate_difference_0800270c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002720": {
            "additional_data": {
                "DAT_200003b5": {
                    "1": "start_address",
                    "13": "current_index",
                    "2": "data_index",
                    "3": "array_index"
                },
                "DAT_200003b7": {
                    "1": "maximum_length",
                    "13": "max_index",
                    "2": "data_length",
                    "3": "memory_size"
                },
                "DAT_200003c8": {
                    "1": "memory_offset",
                    "2": "buffer",
                    "3": "byte_array",
                    "5": "data_array",
                    "7": "memory_address"
                },
                "FUN_08002720": {
                    "1": "extract_byte_from_array",
                    "2": "get_next_byte_from_data",
                    "3": "read_next_byte",
                    "4": "extract_byte_from_memory",
                    "7": "read_byte_from_memory",
                    "9": "get_next_byte"
                },
                "PTR_200003b5": {
                    "1": "memory_address"
                },
                "PTR_200003c8": {
                    "1": "base_address"
                },
                "byte": {
                    "1": "memory_byte"
                },
                "read_byte_from_memory": {
                    "1": "read_next_byte"
                },
                "return_value": {
                    "1": "byte_value"
                },
                "uVar1": {
                    "1": "byte_index",
                    "13": "current_index",
                    "16": "index"
                },
                "uVar2": {
                    "1": "maximum_index"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001c08"
            ],
            "code": "\nuint get_next_byte_08002720(void)\n\n{\n  uint index;\n  \n  index = (uint)DAT_200003b5;\n  if (index < DAT_200003b7) {\n    DAT_200003b5 = DAT_200003b5 + 1;\n    return (uint)*(uint8 *)(DAT_200003c8 + index);\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "get_next_byte_08002720",
            "entrypoint": "0x08002720",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002720": "get_next_byte_08002720",
                "byte": "uint8",
                "uVar1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080027f0": {
            "additional_data": {
                "*(undefined4 *)(param_1 + 4)": {
                    "1": "local_flag",
                    "2": "status"
                },
                "0x20": {
                    "1": "minimum_length"
                },
                "0xffff": {
                    "1": "length_mask"
                },
                "DAT_200003b4": {
                    "1": "is_zero_flag",
                    "16": "flag"
                },
                "DAT_200003b6": {
                    "1": "current_output_offset",
                    "3": "data_offset",
                    "5": "current_offset"
                },
                "DAT_200003b8": {
                    "1": "data_end_address",
                    "3": "data_offset",
                    "4": "current_offset"
                },
                "DAT_200003c5": {
                    "1": "max_buffer_length",
                    "2": "max_data_length",
                    "3": "max_length",
                    "6": "max_offset"
                },
                "DAT_200003cc": {
                    "1": "current_data_length",
                    "15": "processed_data",
                    "2": "processed_data_length"
                },
                "FUN_080027f0": {
                    "1": "data_processing_function",
                    "12": "process_data",
                    "15": "copy_and_process_data"
                },
                "copy_data_08007ede": {
                    "1": "copy_data_into_buffer",
                    "18": "copy_data"
                },
                "copy_data_080091b0": {
                    "1": "copy_data_into_new_buffer",
                    "2": "copy_data_to_destination",
                    "3": "copy_data"
                },
                "iVar1": {
                    "1": "copy_status",
                    "27": "copy_result",
                    "3": "result"
                },
                "param_1": {
                    "1": "buffer_address",
                    "13": "input_offset",
                    "3": "base_address",
                    "5": "data_offset",
                    "7": "offset"
                },
                "param_2": {
                    "1": "source",
                    "2": "data_address",
                    "3": "output_buffer",
                    "4": "data_ptr",
                    "7": "input_data"
                },
                "param_3": {
                    "1": "length_param",
                    "2": "input_size",
                    "3": "length",
                    "5": "size",
                    "7": "data_length"
                },
                "process_data_08009908": {
                    "1": "process_data_func",
                    "14": "process_data",
                    "3": "process_data_helper"
                },
                "return": {
                    "1": "result"
                },
                "uVar2": {
                    "1": "updated_length",
                    "2": "updated_data_length",
                    "3": "new_data_length",
                    "6": "new_size",
                    "9": "new_length"
                }
            },
            "called": [
                "FUN_080091b0",
                "FUN_08009908",
                "FUN_08007ede"
            ],
            "calling": [],
            "code": "\nuint copy_and_process_data_080027f0(int input_offset,undefined4 input_data,uint data_length)\n\n{\n  int copy_result;\n  uint new_length;\n  \n  if (DAT_200003b4 == '\\0') {\n    copy_result = copy_data(input_offset + 0x14,input_data,data_length & 0xffff);\n    if (copy_result == 0) {\n      output data_length;\n    }\n    output 0;\n  }\n  new_length = DAT_200003b8 + data_length;\n  if (DAT_200003c5 < new_length) {\n    if (new_length < 0x20) {\n      new_length = 0x20;\n    }\n    DAT_200003cc = process_data(DAT_200003cc,new_length);\n    if (DAT_200003cc == 0) {\n      DAT_200003c5 = 0;\n    }\n    else {\n      DAT_200003c5 = (byte)new_length;\n    }\n  }\n  if (DAT_200003cc == 0) {\n    *(undefined4 *)(input_offset + 4) = 1;\n    output 0;\n  }\n  copy_data((uint)DAT_200003b6 + DAT_200003cc,input_data,data_length);\n  DAT_200003b6 = DAT_200003b6 + (char)data_length;\n  DAT_200003b8 = DAT_200003b6;\n  output data_length;\n}\n\n",
            "current_name": "copy_and_process_data_080027f0",
            "entrypoint": "0x080027f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080027f0": "copy_and_process_data_080027f0",
                "copy_data_08007ede": "copy_data",
                "copy_data_080091b0": "copy_data",
                "iVar1": "copy_result",
                "param_1": "input_offset",
                "param_2": "input_data",
                "param_3": "data_length",
                "process_data_08009908": "process_data",
                "return": "output",
                "uVar2": "new_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800288c": {
            "additional_data": {
                "DAT_200003b4": {
                    "1": "copy_data_flag",
                    "5": "flag"
                },
                "DAT_200003b6": {
                    "1": "insertion_index",
                    "2": "buffer_index",
                    "3": "data_index"
                },
                "DAT_200003b8": {
                    "1": "data_offset",
                    "2": "data_counter"
                },
                "DAT_200003c5": {
                    "1": "data_max_length",
                    "2": "current_data_length",
                    "3": "max_data_size"
                },
                "DAT_200003cc": {
                    "1": "processed_data_address",
                    "2": "processed_data",
                    "7": "data_buffer"
                },
                "FUN_0800288c": {
                    "1": "copy_data_or_process",
                    "17": "copy_or_process_data",
                    "2": "copy_data",
                    "7": "copy_and_process_data"
                },
                "copy_data_08007ede": {
                    "1": "copy_data_function",
                    "3": "copy_data"
                },
                "iVar2": {
                    "1": "copy_success",
                    "25": "copy_result",
                    "5": "result"
                },
                "local_11": {
                    "1": "datum",
                    "2": "input_data",
                    "3": "input_byte_copy",
                    "4": "new_data",
                    "5": "data_byte"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "input_data",
                    "4": "data_pointer",
                    "5": "data_offset",
                    "6": "source_address",
                    "7": "input_offset"
                },
                "param_2": {
                    "1": "input_value",
                    "17": "data",
                    "4": "input_byte",
                    "9": "input_data"
                },
                "process_data_08009908": {
                    "1": "process_data_function",
                    "3": "process_data"
                },
                "uVar1": {
                    "1": "status",
                    "13": "result",
                    "7": "return_value",
                    "9": "success"
                },
                "uVar3": {
                    "1": "new_size",
                    "13": "new_data_size",
                    "3": "data_size",
                    "8": "new_data_length"
                }
            },
            "called": [
                "FUN_08009908",
                "FUN_08007ede"
            ],
            "calling": [
                "FUN_08001bf8"
            ],
            "code": "\nundefined4 copy_or_process_data_0800288c(int input_offset,undefined data)\n\n{\n  undefined4 result;\n  int copy_result;\n  uint new_data_size;\n  undefined data_byte;\n  \n  data_byte = data;\n  if (DAT_200003b4 == '\\0') {\n    copy_result = copy_data(input_offset + 0x14,&data_byte,1);\n    if (copy_result == 0) {\n      result = 1;\n    }\n    else {\n      result = 0;\n    }\n  }\n  else {\n    new_data_size = DAT_200003b8 + 1;\n    if (DAT_200003c5 < new_data_size) {\n      if (new_data_size < 0x20) {\n        new_data_size = 0x20;\n      }\n      DAT_200003cc = process_data(DAT_200003cc,new_data_size);\n      if (DAT_200003cc == 0) {\n        DAT_200003c5 = 0;\n      }\n      else {\n        DAT_200003c5 = (byte)new_data_size;\n      }\n    }\n    if (DAT_200003cc == 0) {\n      *(undefined4 *)(input_offset + 4) = 1;\n      result = 0;\n    }\n    else {\n      *(undefined *)(DAT_200003cc + (uint)DAT_200003b6) = data_byte;\n      DAT_200003b6 = DAT_200003b6 + 1;\n      result = 1;\n      DAT_200003b8 = DAT_200003b6;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "copy_or_process_data_0800288c",
            "entrypoint": "0x0800288c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800288c": "copy_or_process_data_0800288c",
                "copy_data_08007ede": "copy_data",
                "iVar2": "copy_result",
                "local_11": "data_byte",
                "param_1": "input_offset",
                "param_2": "data",
                "process_data_08009908": "process_data",
                "uVar1": "result",
                "uVar3": "new_data_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800291c": {
            "additional_data": {
                "&PTR_FUN_0800288c_1_0800a5a0": {
                    "1": "function_pointer"
                },
                "((int)param_1 + 0x6d)": {
                    "1": "parameters[109]"
                },
                "(int)param_1 + 0x6d": {
                    "1": "flag2"
                },
                "(param_1 + 0x1b)": {
                    "1": "parameters[27]"
                },
                "*(undefined *)((int)param_1 + 0x6d)": {
                    "1": "flag2",
                    "2": "params[109]",
                    "4": "parameters[109]"
                },
                "*(undefined *)(param_1 + 0x1b)": {
                    "1": "parameters.flag1",
                    "2": "param_array[27]",
                    "3": "params[27]",
                    "4": "parameters[27]"
                },
                "*param_1": {
                    "1": "data[0]",
                    "3": "params[0]",
                    "4": "param_array[0]",
                    "6": "parameters[0]"
                },
                "FUN_0800291c": {
                    "1": "initialize_settings",
                    "11": "initialize_parameters",
                    "3": "initialize_function",
                    "4": "initialize_data",
                    "5": "initialize_params",
                    "6": "initialize_param"
                },
                "PTR_FUN_0800288c_1_0800a5a0": {
                    "1": "pointer_to_some_function",
                    "2": "function_ptr",
                    "5": "function_pointer"
                },
                "byte_0800a5c0": {
                    "1": "params[27]"
                },
                "byte_0800a60d": {
                    "1": "params[109]"
                },
                "param_1": {
                    "1": "param",
                    "10": "parameters",
                    "2": "function_data",
                    "3": "data",
                    "4": "param_array",
                    "5": "params"
                },
                "param_1 + 0x1b": {
                    "1": "param_offset1"
                },
                "param_1 + 0x1b*2": {
                    "1": "param_offset2"
                },
                "param_1 + 0x6d": {
                    "1": "offset2"
                },
                "param_1[0]": {
                    "1": "parameters->function_pointer"
                },
                "param_1[0x1b]": {
                    "1": "parameters->value3"
                },
                "param_1[1]": {
                    "1": "function_data.counter",
                    "2": "value1",
                    "4": "params[1]",
                    "6": "parameters[1]"
                },
                "param_1[2]": {
                    "1": "param[2]",
                    "2": "value2",
                    "4": "param_array[2]",
                    "6": "parameters[2]"
                },
                "ptr_PARAM_1": {
                    "1": "params[1]"
                },
                "ptr_PARAM_2": {
                    "1": "params[2]"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002948"
            ],
            "code": "\nvoid initialize_parameters_0800291c(undefined4 *parameters)\n\n{\n  parameters[1] = 0;\n  parameters[2] = 1000;\n  *parameters = &PTR_copy_or_process_data_0800288c_1_0800a5a0;\n  *(undefined *)(parameters + 0x1b) = 0x19;\n  *(undefined *)((int)parameters + 0x6d) = 0x18;\n  return;\n}\n\n",
            "current_name": "initialize_parameters_0800291c",
            "entrypoint": "0x0800291c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800291c": "initialize_parameters_0800291c",
                "param_1": "parameters",
                "param_1[1]": "parameters[1]",
                "param_1[2]": "parameters[2]"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002948": {
            "additional_data": {
                "DAT_20000314": {
                    "1": "parameter_data"
                },
                "FUN_08002948": {
                    "1": "initialize_if_parameter_is_1",
                    "2": "initialize_parameters_if_needed",
                    "3": "initialize_if_param_1_is_1",
                    "4": "initialize_if_parameter_is_one",
                    "7": "initialize_if_param1_is_1"
                },
                "initialize_parameters_0800291c": {
                    "1": "initialize_params",
                    "16": "initialize_parameters"
                },
                "param_1": {
                    "1": "is_param_1_equal_to_1",
                    "2": "is_param_1_1",
                    "3": "condition",
                    "4": "is_param_one",
                    "5": "is_param1"
                },
                "param_2": {
                    "1": "input_2",
                    "3": "param_2",
                    "4": "param_two",
                    "5": "value",
                    "7": "param2"
                }
            },
            "called": [
                "FUN_0800291c"
            ],
            "calling": [
                "FUN_08002c1e"
            ],
            "code": "\nvoid initialize_if_param1_is_1_08002948(int is_param1,int param2)\n\n{\n  if (is_param1 != 1) {\n    return;\n  }\n  if (param2 == 0xffff) {\n    initialize_parameters(&DAT_20000314);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_if_param1_is_1_08002948",
            "entrypoint": "0x08002948",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002948": "initialize_if_param1_is_1_08002948",
                "initialize_parameters_0800291c": "initialize_parameters",
                "param_1": "is_param1",
                "param_2": "param2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002968": {
            "additional_data": {
                "DAT_200003b4": {
                    "1": "counter2"
                },
                "DAT_200003b5": {
                    "1": "memory_var1"
                },
                "DAT_200003b6": {
                    "1": "memory_var3"
                },
                "DAT_200003b7": {
                    "1": "memory_var2"
                },
                "DAT_200003b8": {
                    "1": "memory_4"
                },
                "DAT_200003c4": {
                    "1": "memory_size1",
                    "2": "memory_size_1"
                },
                "DAT_200003c5": {
                    "1": "memory_size2",
                    "2": "memory_size_2"
                },
                "DAT_200003c8": {
                    "1": "memory_block1",
                    "2": "memory_address_1"
                },
                "DAT_200003cc": {
                    "1": "memory_addr2",
                    "2": "memory_address_2"
                },
                "FUN_08002968": {
                    "1": "initialize_and_update_data",
                    "2": "initialize_communication",
                    "3": "initialize_i2c",
                    "4": "initialize_i2_c",
                    "6": "initialize_peripheral"
                },
                "fill_memory_080091c6": {
                    "1": "clear_memory",
                    "2": "fill_memory"
                },
                "iVar1": {
                    "1": "shifted_data",
                    "2": "shifted_control_byte",
                    "3": "shifted_value",
                    "4": "shifted_config_value",
                    "5": "shifted_config",
                    "7": "shifted_flags"
                },
                "iVar2": {
                    "1": "periph_address",
                    "19": "peripheral_address",
                    "2": "device_register_address"
                },
                "initialize_i2_c_peripheral_080077b0": {
                    "1": "initialize_i2_c_peripheral_helper",
                    "2": "initialize_i2_c_peripheral",
                    "3": "initialize_i2c_peripheral"
                },
                "param_1": {
                    "1": "peripheral_address",
                    "17": "base_address",
                    "2": "data_address",
                    "5": "device_address"
                },
                "param_2": {
                    "1": "communication_mode",
                    "2": "config_data",
                    "3": "control_value",
                    "7": "flags",
                    "8": "config_value"
                },
                "update_data_08007f7c": {
                    "1": "update_data_function_2",
                    "5": "update_data2"
                },
                "update_data_08007f8e": {
                    "1": "update_data_function_1",
                    "5": "update_data1"
                }
            },
            "called": [
                "FUN_08007f7c",
                "FUN_080077b0",
                "FUN_080091c6",
                "FUN_08007f8e"
            ],
            "calling": [
                "FUN_08002a1c"
            ],
            "code": "\nvoid initialize_peripheral_08002968(int base_address,uint config_value)\n\n{\n  int shifted_flags;\n  int peripheral_address;\n  \n  DAT_200003b5 = 0;\n  DAT_200003b7 = 0;\n  if (DAT_200003c8 != 0) {\n    fill_memory(DAT_200003c8,0,DAT_200003c4);\n  }\n  DAT_200003b6 = 0;\n  DAT_200003b8 = 0;\n  if (DAT_200003cc != 0) {\n    fill_memory(DAT_200003cc,0,DAT_200003c5);\n  }\n  DAT_200003b4 = 0;\n  shifted_flags = (config_value & 0x7f) << 1;\n  *(char *)(base_address + 0x10) = (char)shifted_flags;\n  if (config_value == 0x33) {\n    *(undefined *)(base_address + 0x11) = 1;\n  }\n  else {\n    *(undefined *)(base_address + 0x11) = 0;\n  }\n  peripheral_address = base_address + 0x14;\n  initialize_i2c_peripheral(peripheral_address,100000,0x4000,shifted_flags,*(undefined *)(base_address + 0x11));\n  if (*(char *)(base_address + 0x11) == '\\0') {\n    update_data1(peripheral_address,&LAB_08002774_1);\n    update_data2(peripheral_address,&LAB_08002b00_1);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_peripheral_08002968",
            "entrypoint": "0x08002968",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002968": "initialize_peripheral_08002968",
                "fill_memory_080091c6": "fill_memory",
                "iVar1": "shifted_flags",
                "iVar2": "peripheral_address",
                "initialize_i2_c_peripheral_080077b0": "initialize_i2c_peripheral",
                "param_1": "base_address",
                "param_2": "config_value",
                "update_data_08007f7c": "update_data2",
                "update_data_08007f8e": "update_data1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002a1c": {
            "additional_data": {
                "FUN_08002a1c": {
                    "1": "initialize_and_set_peripheral_data",
                    "2": "initialize_and_return_peripheral",
                    "27": "initialize_peripheral"
                },
                "initialize_peripheral_08002968": {
                    "1": "initialize_peripheral_helper"
                },
                "param_1": {
                    "1": "input_param_1",
                    "2": "parameter_1",
                    "3": "peripheral_id",
                    "5": "param1",
                    "8": "peripheral_address"
                },
                "param_2": {
                    "1": "arg2",
                    "3": "parameter_2",
                    "7": "param_2"
                },
                "param_3": {
                    "1": "config_param_3",
                    "2": "data_size",
                    "3": "parameter_3",
                    "7": "param3",
                    "8": "param_3"
                },
                "param_4": {
                    "1": "input_param_4",
                    "3": "parameter_4",
                    "7": "param4",
                    "8": "param_4"
                }
            },
            "called": [
                "FUN_08002968"
            ],
            "calling": [
                "FUN_08002a26"
            ],
            "code": "\nvoid initialize_peripheral_08002a1c(undefined4 peripheral_address,undefined param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  initialize_peripheral_08002a1c_helper(peripheral_address,param_2,param_3,param_4,param_4);\n  return;\n}\n\n",
            "current_name": "initialize_peripheral_08002a1c",
            "entrypoint": "0x08002a1c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002a1c": "initialize_peripheral_08002a1c",
                "initialize_peripheral_08002968": "initialize_peripheral_helper",
                "param_1": "peripheral_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002a26": {
            "additional_data": {
                "FUN_08002a26": {
                    "1": "initialize_peripheral_with_constants",
                    "30": "initialize_peripheral"
                },
                "param_1": {
                    "1": "peripheral_addr",
                    "13": "peripheral_address",
                    "2": "param1",
                    "3": "device"
                },
                "param_2": {
                    "1": "register_value",
                    "2": "unused_param",
                    "3": "unused",
                    "8": "param_2"
                },
                "param_3": {
                    "1": "config_param",
                    "17": "param_3",
                    "4": "param3"
                },
                "param_4": {
                    "1": "parameter_4",
                    "17": "param_4",
                    "4": "param4"
                }
            },
            "called": [
                "FUN_08002a1c"
            ],
            "calling": [
                "FUN_08000a64"
            ],
            "code": "\nvoid initialize_peripheral_08002a26(undefined4 peripheral_address,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  initialize_peripheral_08002a26_08002a1c(peripheral_address,0x33,param_3,param_4,param_4);\n  return;\n}\n\n",
            "current_name": "initialize_peripheral_08002a26",
            "entrypoint": "0x08002a26",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002a26": "initialize_peripheral_08002a26",
                "param_1": "peripheral_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002a30": {
            "additional_data": {
                "DAT_200003b4": {
                    "2": "is_data_initialized",
                    "3": "is_initialized",
                    "5": "data_flag"
                },
                "DAT_200003b6": {
                    "1": "variable1",
                    "3": "unused_variable1",
                    "5": "unused_variable"
                },
                "DAT_200003b8": {
                    "1": "variable2",
                    "3": "unused_variable",
                    "4": "unused_variable2"
                },
                "DAT_200003d0": {
                    "1": "shifted_param2",
                    "2": "shifted_input",
                    "3": "shifted_char",
                    "9": "shifted_value"
                },
                "FUN_08002a30": {
                    "1": "set_data_properties",
                    "28": "initialize_data"
                },
                "param_1": {
                    "1": "new_param_one",
                    "2": "unused_param",
                    "3": "unused_parameter",
                    "4": "param",
                    "6": "param1",
                    "7": "status"
                },
                "param_2": {
                    "1": "input_param",
                    "11": "input_value",
                    "6": "param2",
                    "7": "value"
                },
                "param_3": {
                    "1": "param3"
                },
                "param_4": {
                    "1": "param_4"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0",
                "FUN_08002b68"
            ],
            "code": "\nvoid initialize_data_08002a30(undefined4 status,int input_value)\n\n{\n  DAT_200003b4 = 1;\n  DAT_200003d0 = (char)(input_value << 1);\n  DAT_200003b6 = 0;\n  DAT_200003b8 = 0;\n  return;\n}\n\n",
            "current_name": "initialize_data_08002a30",
            "entrypoint": "0x08002a30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002a30": "initialize_data_08002a30",
                "param_1": "status",
                "param_2": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002a58": {
            "additional_data": {
                "DAT_200003b4": {
                    "1": "var2"
                },
                "DAT_200003b6": {
                    "1": "var1"
                },
                "DAT_200003b8": {
                    "1": "offset"
                },
                "DAT_200003c5": {
                    "1": "value"
                },
                "DAT_200003cc": {
                    "1": "buffer"
                },
                "DAT_200003d0": {
                    "1": "buffer_size"
                },
                "FUN_08002a58": {
                    "1": "check_data_and_process",
                    "13": "process_data",
                    "2": "process_input",
                    "7": "check_data_validity"
                },
                "fill_memory_080091c6": {
                    "2": "fill_memory"
                },
                "iVar1": {
                    "1": "data_processing_result",
                    "16": "result",
                    "2": "data_result",
                    "5": "processing_result",
                    "7": "process_result"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "data_pointer",
                    "4": "input",
                    "6": "data_address",
                    "9": "input_data"
                },
                "uVar2": {
                    "1": "result",
                    "2": "return_code",
                    "22": "return_value",
                    "4": "output"
                }
            },
            "called": [
                "FUN_08007e74",
                "FUN_080091c6"
            ],
            "calling": [
                "FUN_08001c18",
                "FUN_08002b68",
                "FUN_08002ac0"
            ],
            "code": "\nundefined4 process_data_08002a58(int input_data)\n\n{\n  int result;\n  undefined4 return_value;\n  \n  if (*(char *)(input_data + 0x11) == '\\0') {\n    return_value = 4;\n  }\n  else {\n    result = process_data_08002a58_08007e74(input_data + 0x14,DAT_200003d0,DAT_200003cc,DAT_200003b8);\n    if (result == 0) {\n      return_value = 0;\n    }\n    else if (result == 1) {\n      return_value = 1;\n    }\n    else {\n      return_value = 4;\n    }\n    if (DAT_200003cc != 0) {\n      fill_memory(DAT_200003cc,0,DAT_200003c5);\n    }\n    DAT_200003b6 = 0;\n    DAT_200003b8 = 0;\n    DAT_200003b4 = 0;\n  }\n  return return_value;\n}\n\n",
            "current_name": "process_data_08002a58",
            "entrypoint": "0x08002a58",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002a58": "process_data_08002a58",
                "fill_memory_080091c6": "fill_memory",
                "iVar1": "result",
                "param_1": "input_data",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ac0": {
            "additional_data": {
                "FUN_08002ac0": {
                    "1": "process_and_return_result",
                    "11": "process_and_return_data",
                    "3": "process_data_and_return",
                    "6": "process_data",
                    "7": "process_and_return"
                },
                "param_1": {
                    "1": "input1",
                    "4": "data",
                    "5": "input_1",
                    "8": "input_param"
                },
                "param_2": {
                    "1": "data_2",
                    "10": "unused_param",
                    "2": "unused_parameter",
                    "3": "param_2"
                },
                "param_3": {
                    "1": "context",
                    "2": "data_1",
                    "3": "data_param",
                    "5": "input_3"
                },
                "param_4": {
                    "1": "output_buffer",
                    "2": "data_2",
                    "3": "param_4",
                    "5": "input_4"
                },
                "process_data_08002a58": {
                    "1": "process_data"
                }
            },
            "called": [
                "FUN_08002a58"
            ],
            "calling": [
                "FUN_08001cd0"
            ],
            "code": "\nvoid process_and_return_data_08002ac0(undefined4 input_param,undefined4 unused_param,undefined4 input_3,undefined4 input_4)\n\n{\n  process_data(input_param,1,input_3,input_4,input_4);\n  return;\n}\n\n",
            "current_name": "process_and_return_data_08002ac0",
            "entrypoint": "0x08002ac0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ac0": "process_and_return_data_08002ac0",
                "param_1": "input_param",
                "param_2": "unused_param",
                "param_3": "input_3",
                "param_4": "input_4",
                "process_data_08002a58": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002acc": {
            "additional_data": {
                "DAT_200003c4": {
                    "1": "current_value",
                    "2": "current_data_length",
                    "4": "current_size"
                },
                "DAT_200003c8": {
                    "1": "existing_data",
                    "3": "result",
                    "5": "processed_data"
                },
                "FUN_08002acc": {
                    "1": "update_data_function",
                    "13": "process_and_update_data"
                },
                "byte": {
                    "1": "byte_type"
                },
                "param_1": {
                    "1": "input_limit",
                    "10": "data_size",
                    "3": "input_length",
                    "5": "input_size",
                    "7": "data_length"
                },
                "param_2": {
                    "1": "param_2",
                    "2": "unused",
                    "3": "unused_param_2",
                    "7": "unused_param"
                },
                "param_3": {
                    "1": "output_buffer",
                    "2": "unused_param_3",
                    "3": "param_3",
                    "4": "input_data"
                },
                "param_4": {
                    "1": "data_4",
                    "2": "unused",
                    "3": "param4",
                    "4": "additional_param"
                },
                "process_data_08009908": {
                    "1": "process_data"
                }
            },
            "called": [
                "FUN_08009908"
            ],
            "calling": [
                "FUN_08002b68"
            ],
            "code": "\nvoid process_data_08002acc(uint data_size,undefined4 unused_param,undefined4 data_buffer,undefined4 additional_param)\n\n{\n  if (DAT_200003c4 < data_size) {\n    if (data_size < 0x20) {\n      data_size = 0x20;\n    }\n    DAT_200003c8 = process_data_08002acc(DAT_200003c8,data_size,data_buffer,(uint)DAT_200003c4,additional_param);\n    if (DAT_200003c8 == 0) {\n      DAT_200003c4 = 0;\n    }\n    else {\n      DAT_200003c4 = (byte_type)data_size;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_data_08002acc",
            "entrypoint": "0x08002acc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002acc": "process_data_08002acc",
                "byte": "byte_type",
                "param_1": "data_size",
                "param_2": "unused_param",
                "param_3": "data_buffer",
                "param_4": "additional_param",
                "process_data_08009908": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002b68": {
            "additional_data": {
                "DAT_200003b5": {
                    "1": "variable1"
                },
                "DAT_200003b7": {
                    "1": "variable2"
                },
                "DAT_200003c8": {
                    "1": "dat_var",
                    "2": "data_check"
                },
                "FUN_08002b68": {
                    "1": "process_data_and_return_result",
                    "2": "process_and_initialize_data",
                    "23": "process_data"
                },
                "iVar1": {
                    "2": "process_result",
                    "29": "result"
                },
                "initialize_data_08002a30": {
                    "1": "initialize_counter",
                    "3": "initialize_data"
                },
                "param_1": {
                    "1": "ptr_data",
                    "10": "data_array",
                    "3": "output_buffer",
                    "5": "data",
                    "6": "data_ptr"
                },
                "param_2": {
                    "1": "array_size",
                    "2": "data_len",
                    "3": "output_buffer_size",
                    "4": "size",
                    "5": "data_length"
                },
                "param_3": {
                    "1": "input_buffer_ptr",
                    "2": "value",
                    "3": "data_value",
                    "6": "data"
                },
                "param_4": {
                    "1": "shift",
                    "2": "data_value",
                    "3": "flag",
                    "4": "data_length",
                    "5": "value"
                },
                "param_5": {
                    "1": "byte_val",
                    "10": "flag",
                    "12": "byte_value",
                    "2": "byte_param"
                },
                "process_data_08002a58": {
                    "1": "perform_processing",
                    "2": "finalize_data"
                },
                "process_data_08002acc": {
                    "1": "process_data_header_check",
                    "2": "process_data"
                },
                "process_data_08007f0e": {
                    "1": "reverse_data"
                },
                "uVar2": {
                    "1": "flag_uint",
                    "10": "byte_count",
                    "2": "byte_value",
                    "3": "flag_value"
                },
                "uVar3": {
                    "1": "proc_param_2_copy",
                    "2": "temp_flag"
                }
            },
            "called": [
                "FUN_08002a58",
                "FUN_08002acc",
                "FUN_08002a30",
                "FUN_08007f0e"
            ],
            "calling": [
                "FUN_08002c00"
            ],
            "code": "\nundefined4\nprocess_data_08002b68(undefined4 *data_array,uint data_length,undefined4 data,uint value,byte byte_value)\n\n{\n  int result;\n  uint byte_count;\n  uint temp_flag;\n  \n  byte_count = (uint)byte_value;\n  if (*(char *)((int)data_array + 0x11) == '\\0') {\n    return 0;\n  }\n  temp_flag = value;\n  process_data_08002b68(data);\n  if (DAT_200003c8 != 0) {\n    if (byte_count != 0) {\n      initialize_data(data_array,data_length);\n      if (3 < byte_count) {\n        byte_count = 3;\n      }\n      while( true ) {\n        if (byte_count == 0) break;\n        (**(code **)*data_array)(data_array,value >> ((byte_count - 1 & 0x1f) << 3) & 0xff);\n        byte_count = byte_count - 1 & 0xff;\n      }\n      finalize_data(data_array,0);\n    }\n    result = reverse_data(data_array + 5,(data_length & 0x7f) << 1,DAT_200003c8,data,temp_flag);\n    if (result != 0) {\n      data = 0;\n    }\n    DAT_200003b5 = 0;\n    DAT_200003b7 = (char)data;\n    return data;\n  }\n  data_array[1] = 1;\n  return 0;\n}\n\n",
            "current_name": "process_data_08002b68",
            "entrypoint": "0x08002b68",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002b68": "process_data_08002b68",
                "iVar1": "result",
                "initialize_data_08002a30": "initialize_data",
                "param_1": "data_array",
                "param_2": "data_length",
                "param_3": "data",
                "param_4": "value",
                "param_5": "byte_value",
                "process_data_08002a58": "finalize_data",
                "process_data_08002acc": "process_data",
                "process_data_08007f0e": "reverse_data",
                "uVar2": "byte_count",
                "uVar3": "temp_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002c00": {
            "additional_data": {
                "FUN_08002c00": {
                    "2": "process_and_return",
                    "24": "process_data",
                    "3": "initialize_data_processing"
                },
                "process_data_08002b68": {
                    "1": "execute_operation",
                    "13": "process_data_helper",
                    "4": "process_data_internal",
                    "9": "process_data"
                }
            },
            "called": [
                "FUN_08002b68"
            ],
            "calling": [
                "FUN_08002c14"
            ],
            "code": "\nvoid process_data_08002c00(void)\n\n{\n  process_data_08002c00_helper();\n  return;\n}\n\n",
            "current_name": "process_data_08002c00",
            "entrypoint": "0x08002c00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002c00": "process_data_08002c00",
                "process_data_08002b68": "process_data_helper"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002c14": {
            "additional_data": {
                "FUN_08002c14": {
                    "1": "process_and_return",
                    "2": "initialize_data_processing",
                    "27": "process_data"
                },
                "process_data_08002c00": {
                    "1": "process_data_start",
                    "2": "execute_process",
                    "23": "process_data"
                }
            },
            "called": [
                "FUN_08002c00"
            ],
            "calling": [
                "FUN_08001c18"
            ],
            "code": "\nvoid process_data_08002c14(void)\n\n{\n  process_data_08002c14();\n  return;\n}\n\n",
            "current_name": "process_data_08002c14",
            "entrypoint": "0x08002c14",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002c14": "process_data_08002c14",
                "process_data_08002c00": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002c1e": {
            "additional_data": {
                "FUN_08002c1e": {
                    "1": "initialize_param_if_1",
                    "2": "initialize_with_param",
                    "3": "initialize_with_param1_1",
                    "6": "initialize_if_param1_is_1"
                },
                "param_1": {
                    "1": "first_param",
                    "2": "param1",
                    "8": "flag"
                },
                "param_2": {
                    "1": "unused_param_1",
                    "2": "param_2",
                    "3": "param_two"
                },
                "param_3": {
                    "1": "third_param",
                    "2": "param_3_value",
                    "3": "param_a",
                    "8": "param_3"
                },
                "param_4": {
                    "1": "parameter_4",
                    "2": "param_4_value",
                    "3": "param_four",
                    "7": "param_4"
                }
            },
            "called": [
                "FUN_08002948"
            ],
            "calling": [],
            "code": "\nvoid initialize_if_param1_is_1_08002c1e(undefined4 flag,undefined4 param_two,undefined4 param_3,undefined4 param_4)\n\n{\n  initialize_if_param1_is_1_08002c1e_08002948(1,0xffff,param_3,param_4,param_4);\n  return;\n}\n\n",
            "current_name": "initialize_if_param1_is_1_08002c1e",
            "entrypoint": "0x08002c1e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002c1e": "initialize_if_param1_is_1_08002c1e",
                "param_1": "flag",
                "param_2": "param_two"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002c2c": {
            "additional_data": {
                "DAT_200005d4": {
                    "1": "callback_function"
                },
                "FUN_08002c2c": {
                    "1": "execute_function",
                    "21": "execute_callback",
                    "9": "execute_callback_function"
                },
                "param_1": {
                    "1": "callback_parameter1",
                    "3": "unused_param",
                    "4": "unused_parameter",
                    "5": "callback_function",
                    "7": "arg1"
                },
                "param_2": {
                    "1": "param_2",
                    "2": "param_a",
                    "4": "param1",
                    "6": "arg1",
                    "7": "arg2"
                },
                "param_3": {
                    "1": "function_argument_2",
                    "2": "param_b",
                    "4": "param2",
                    "6": "arg2",
                    "7": "arg3"
                },
                "param_4": {
                    "1": "callback_parameter4",
                    "2": "param_c",
                    "3": "callback_param3",
                    "4": "param3",
                    "6": "arg3",
                    "7": "arg4"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid execute_callback_08002c2c(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  if (DAT_200005d4 != (code *)0x0) {\n    (*DAT_200005d4)(arg2,arg3,arg3,DAT_200005d4,arg4);\n  }\n  return;\n}\n\n",
            "current_name": "execute_callback_08002c2c",
            "entrypoint": "0x08002c2c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002c2c": "execute_callback_08002c2c",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ce0": {
            "additional_data": {
                "&LAB_08002c40_1": {
                    "1": "constant_2"
                },
                "&LAB_08002c54_1": {
                    "1": "constant_5"
                },
                "&LAB_08002c68_1": {
                    "1": "constant_6"
                },
                "&LAB_08002c7c_1": {
                    "1": "constant_3"
                },
                "&LAB_08002c90_1": {
                    "1": "constant_4"
                },
                "&LAB_08002ca4_1": {
                    "1": "constant_7"
                },
                "&LAB_08002cb8_1": {
                    "1": "constant_8"
                },
                "&LAB_08002cd0_1": {
                    "1": "constant_11"
                },
                "&LAB_08002dea_1": {
                    "1": "constant_10"
                },
                "&LAB_08002e1a_1": {
                    "1": "constant_9"
                },
                "*(undefined *)(param_1 + 0x1f8)": {
                    "1": "additional_variable"
                },
                "*(undefined *)(param_1 + 0xc4)": {
                    "1": "flag_variable"
                },
                "*(undefined4 *)(param_1 + 200)": {
                    "1": "counter_variable"
                },
                "0x90": {
                    "1": "constant_1"
                },
                "FUN_08002ce0": {
                    "1": "initialize_function",
                    "13": "initialize_and_update_params",
                    "14": "initialize_and_update_parameters",
                    "2": "initialize_data"
                },
                "LAB_08002c40_1": {
                    "1": "label1",
                    "13": "label_1",
                    "2": "callback_label_1"
                },
                "LAB_08002c54_1": {
                    "1": "callback_5",
                    "13": "label_4",
                    "2": "callback_label_4"
                },
                "LAB_08002c68_1": {
                    "1": "label5",
                    "13": "label_5",
                    "2": "callback_label_5"
                },
                "LAB_08002c7c_1": {
                    "1": "callback_3",
                    "13": "label_2",
                    "2": "callback_label_2"
                },
                "LAB_08002c90_1": {
                    "1": "label3",
                    "13": "label_3",
                    "2": "callback_label_3"
                },
                "LAB_08002ca4_1": {
                    "1": "label6",
                    "13": "label_6",
                    "2": "callback_label_6"
                },
                "LAB_08002cb8_1": {
                    "1": "label7",
                    "13": "label_7",
                    "2": "callback_label_7"
                },
                "LAB_08002cd0_1": {
                    "1": "label_3",
                    "13": "label_10"
                },
                "LAB_08002dea_1": {
                    "1": "label_8",
                    "12": "label_9"
                },
                "LAB_08002e1a_1": {
                    "1": "label_1",
                    "12": "label_8"
                },
                "execute_callback_08002c2c": {
                    "1": "callback_function_1",
                    "15": "callback_function",
                    "2": "callback_func"
                },
                "execute_callback_08002c2c + 1": {
                    "1": "callback_function"
                },
                "iVar1": {
                    "1": "start_address",
                    "11": "data_address",
                    "3": "param_offset",
                    "4": "offset",
                    "9": "data_offset"
                },
                "initialize_data_080032bc": {
                    "1": "initialize_data_with_offset",
                    "26": "initialize_data"
                },
                "initialize_param_0800314e": {
                    "1": "initialize_memory_occupied",
                    "10": "initialize_parameters",
                    "13": "initialize_param",
                    "2": "initialize_params"
                },
                "param_1": {
                    "1": "base_addr",
                    "25": "base_address",
                    "3": "input_value"
                },
                "set_parameters_08003370": {
                    "1": "set_additional_params",
                    "19": "set_parameters",
                    "3": "set_parameter"
                },
                "update_data_08003346": {
                    "1": "update_data_79",
                    "26": "update_data"
                },
                "update_parameters_08003306": {
                    "1": "update_param",
                    "19": "update_parameters",
                    "2": "update_params",
                    "5": "update_parameter"
                },
                "update_params_08003350": {
                    "1": "update_secondary_data",
                    "2": "update_params2",
                    "8": "update_params_2"
                },
                "update_params_08003366": {
                    "1": "update_parameters",
                    "19": "update_params",
                    "2": "update_additional_params"
                }
            },
            "called": [
                "FUN_08003306",
                "FUN_08003346",
                "FUN_08003366",
                "FUN_0800314e",
                "FUN_080032bc",
                "FUN_08003350",
                "FUN_08003370"
            ],
            "calling": [
                "FUN_08002dbc"
            ],
            "code": "\nint initialize_and_update_parameters_08002ce0(int base_address)\n\n{\n  int data_address;\n  \n  initialize_param(base_address + 0x40);\n  data_address = base_address + 0x44;\n  initialize_data(data_address,base_address,0x40);\n  *(undefined *)(base_address + 0xc4) = 0;\n  *(undefined4 *)(base_address + 200) = 0;\n  *(undefined *)(base_address + 0x1f8) = 0;\n  update_parameters(data_address,0xe0,callback_function + 1,0);\n  update_parameters(data_address,0x90,constant_2,0);\n  update_parameters(data_address,0xc0,constant_3,0);\n  update_parameters(data_address,0xd0,constant_4,0);\n  update_parameters(data_address,0xf4,constant_5,0);\n  update_parameters(data_address,0xf5,constant_6,0);\n  update_params(data_address,0x71,constant_7,0);\n  set_parameters(data_address,0xf0,constant_8,0);\n  update_data(data_address,0x79,constant_9,base_address);\n  update_params_2(data_address,0xf9,constant_10,base_address);\n  update_params_2(data_address,0xff,constant_11,0);\n  return base_address;\n}\n\n",
            "current_name": "initialize_and_update_parameters_08002ce0",
            "entrypoint": "0x08002ce0",
            "imported": false,
            "improved": true,
            "renaming": {
                "&LAB_08002c40_1": "constant_2",
                "&LAB_08002c54_1": "constant_5",
                "&LAB_08002c68_1": "constant_6",
                "&LAB_08002c7c_1": "constant_3",
                "&LAB_08002c90_1": "constant_4",
                "&LAB_08002ca4_1": "constant_7",
                "&LAB_08002cb8_1": "constant_8",
                "&LAB_08002cd0_1": "constant_11",
                "&LAB_08002dea_1": "constant_10",
                "&LAB_08002e1a_1": "constant_9",
                "FUN_08002ce0": "initialize_and_update_parameters_08002ce0",
                "LAB_08002c40_1": "label_1",
                "LAB_08002c54_1": "label_4",
                "LAB_08002c68_1": "label_5",
                "LAB_08002c7c_1": "label_2",
                "LAB_08002c90_1": "label_3",
                "LAB_08002ca4_1": "label_6",
                "LAB_08002cb8_1": "label_7",
                "LAB_08002cd0_1": "label_10",
                "LAB_08002dea_1": "label_9",
                "LAB_08002e1a_1": "label_8",
                "execute_callback_08002c2c": "callback_function",
                "iVar1": "data_address",
                "initialize_data_080032bc": "initialize_data",
                "initialize_param_0800314e": "initialize_param",
                "param_1": "base_address",
                "set_parameters_08003370": "set_parameters",
                "update_data_08003346": "update_data",
                "update_parameters_08003306": "update_parameters",
                "update_params_08003350": "update_params_2",
                "update_params_08003366": "update_params"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002dbc": {
            "additional_data": {
                "&DAT_200003d4": {
                    "1": "parameters_address"
                },
                "DAT_200003d4": {
                    "1": "data_200003d4",
                    "2": "parameters"
                },
                "FUN_08002dbc": {
                    "1": "check_and_initialize_parameters",
                    "2": "initialize_and_update_parameters_if_needed",
                    "3": "initialize_if_param1_is_1",
                    "4": "initialize_parameters_if_needed"
                },
                "initialize_and_update_parameters_08002ce0": {
                    "1": "initialize_and_update_params",
                    "18": "initialize_and_update_parameters",
                    "4": "initialize_parameters"
                },
                "param_1": {
                    "1": "status",
                    "2": "is_param_1_one",
                    "3": "check_value",
                    "7": "flag",
                    "8": "condition"
                },
                "param_2": {
                    "1": "flag_parameter",
                    "17": "value",
                    "2": "param_2_value"
                }
            },
            "called": [
                "FUN_08002ce0"
            ],
            "calling": [],
            "code": "\nvoid initialize_parameters_if_needed_08002dbc(int condition,int value)\n\n{\n  if (condition != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    initialize_and_update_parameters(&DAT_200003d4);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_parameters_if_needed_08002dbc",
            "entrypoint": "0x08002dbc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002dbc": "initialize_parameters_if_needed_08002dbc",
                "initialize_and_update_parameters_08002ce0": "initialize_and_update_parameters",
                "param_1": "condition",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ddc": {
            "additional_data": {
                "FUN_08002ddc": {
                    "1": "execute_related_function",
                    "2": "execute_operation",
                    "6": "execute_updated_function",
                    "7": "execute_function_with_offset"
                },
                "execute_function_0800322c": {
                    "1": "update_values",
                    "4": "execute_function"
                },
                "generic_input": {
                    "1": "generic_input"
                },
                "input_parameter": {
                    "1": "input_parameter"
                },
                "param_1": {
                    "1": "source_address",
                    "11": "input_value",
                    "2": "input_offset",
                    "4": "input_parameter",
                    "5": "base_address",
                    "6": "input_param"
                },
                "param_2": {
                    "1": "param_2",
                    "2": "unused_parameter1",
                    "5": "unused_param"
                },
                "param_3": {
                    "1": "constant2",
                    "2": "unused_param2"
                },
                "param_4": {
                    "1": "constant3",
                    "2": "unused_parameter3",
                    "3": "output_param",
                    "4": "param"
                }
            },
            "called": [
                "FUN_0800322c"
            ],
            "calling": [
                "FUN_08002e26"
            ],
            "code": "\nvoid execute_function_with_offset_08002ddc(int input_value,undefined4 unused_param,undefined4 unused_param_2,undefined4 param)\n\n{\n  execute_function(input_value + 0x40,2,5,param,param);\n  return;\n}\n\n",
            "current_name": "execute_function_with_offset_08002ddc",
            "entrypoint": "0x08002ddc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ddc": "execute_function_with_offset_08002ddc",
                "execute_function_0800322c": "execute_function",
                "param_1": "input_value",
                "param_2": "unused_param",
                "param_3": "unused_param_2",
                "param_4": "param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002df6": {
            "additional_data": {
                "*(byte *)(param_1 + 0xc4)": {
                    "1": "condition_byte"
                },
                "*(byte *)(param_1 + 0xc4) - 2": {
                    "1": "size"
                },
                "*(undefined **)(param_1 + 200)": {
                    "1": "decoded_data_ptr"
                },
                "*puVar1": {
                    "1": "data"
                },
                "FUN_08002df6": {
                    "11": "process_data",
                    "14": "decode_and_process_data",
                    "3": "decode_and_process"
                },
                "decode_and_process_data_080031ce": {
                    "3": "decode_and_process_data"
                },
                "param_1": {
                    "1": "input_argument",
                    "2": "input_param",
                    "4": "data_address",
                    "6": "data",
                    "7": "input_data"
                },
                "param_1 + 0x40": {
                    "2": "data_offset"
                },
                "param_1 + 0xc4": {
                    "1": "byte_value"
                },
                "param_1 + 200": {
                    "1": "struct_ptr"
                },
                "puVar1": {
                    "1": "data_block_pointer",
                    "14": "data_pointer",
                    "2": "decoded_data",
                    "3": "data_array",
                    "5": "data_ptr"
                },
                "puVar1 + 2": {
                    "1": "processed_data_array"
                },
                "puVar1[1]": {
                    "1": "decoded_data_length"
                }
            },
            "called": [
                "FUN_080031ce"
            ],
            "calling": [
                "FUN_08002e26"
            ],
            "code": "\nvoid decode_and_process_data_08002df6(int input_data)\n\n{\n  undefined *data_pointer;\n  \n  if (*(byte *)(input_data + 0xc4) == 0) {\n    return;\n  }\n  data_pointer = *(undefined **)(input_data + 200);\n  decode_and_process_data_08002df6(input_data + 0x40,*data_pointer,additional_data,*(byte *)(input_data + 0xc4) - 2,data_pointer + 2);\n  return;\n}\n\n",
            "current_name": "decode_and_process_data_08002df6",
            "entrypoint": "0x08002df6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002df6": "decode_and_process_data_08002df6",
                "decode_and_process_data_080031ce": "decode_and_process_data",
                "param_1": "input_data",
                "puVar1": "data_pointer",
                "puVar1[1]": "additional_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002e26": {
            "additional_data": {
                "* (param_1 + 0xc0)": {
                    "1": "dst"
                },
                "FUN_08002e26": {
                    "1": "update_parameter_value",
                    "2": "copy_and_process_data",
                    "4": "update_data_and_process"
                },
                "copy_value_to_pointer_08003154": {
                    "1": "copy_data_to_pointer",
                    "2": "copy_value_to_destination",
                    "6": "copy_data_to_buffer",
                    "7": "copy_value_to_pointer",
                    "9": "copy_value_to_buffer"
                },
                "decode_and_process_data_08002df6": {
                    "2": "process_decoded_data",
                    "24": "decode_and_process_data",
                    "3": "decode_and_process"
                },
                "execute_function_with_offset_08002ddc": {
                    "17": "execute_function",
                    "3": "execute_with_offset",
                    "9": "execute_function_with_offset"
                },
                "param_1": {
                    "1": "param",
                    "2": "data_struct",
                    "3": "data_pointer",
                    "4": "data_address",
                    "6": "data_ptr"
                },
                "param_2": {
                    "1": "param",
                    "14": "new_value",
                    "9": "value"
                }
            },
            "called": [
                "FUN_08003154",
                "FUN_08002ddc",
                "FUN_08002df6"
            ],
            "calling": [
                "FUN_08003048"
            ],
            "code": "\nvoid process_data_08002e26(int data_ptr,undefined4 new_value)\n\n{\n  *(undefined4 *)(data_ptr + 0xc0) = new_value;\n  copy_value_to_buffer(data_ptr + 0x40);\n  execute_function(data_ptr);\n  decode_and_process_data_08002e26(data_ptr);\n  return;\n}\n\n",
            "current_name": "process_data_08002e26",
            "entrypoint": "0x08002e26",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002e26": "process_data_08002e26",
                "copy_value_to_pointer_08003154": "copy_value_to_buffer",
                "decode_and_process_data_08002df6": "decode_and_process_data",
                "execute_function_with_offset_08002ddc": "execute_function",
                "param_1": "data_ptr",
                "param_2": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002e44": {
            "additional_data": {
                "FUN_08002e44": {
                    "1": "extract_filename_from_path",
                    "2": "process_file_path",
                    "4": "process_file",
                    "5": "extract_file_name"
                },
                "allocate_and_assign_memory_08009190": {
                    "2": "allocate_and_assign_memory"
                },
                "bVar1": {
                    "1": "new_byte",
                    "2": "extension_length",
                    "3": "byte_val",
                    "4": "byte_value",
                    "7": "substring_length"
                },
                "cVar2": {
                    "1": "string_end_character",
                    "3": "end_of_string_char",
                    "4": "end_of_string_character",
                    "5": "end_of_string"
                },
                "copy_string_08009954": {
                    "2": "copy_string"
                },
                "find_end_of_string_08000178": {
                    "1": "find_end_of_string"
                },
                "find_last_occurrence_0800997e": {
                    "1": "find_last_occurrence"
                },
                "find_substring_080099a4": {
                    "1": "find_substring_index"
                },
                "iVar3": {
                    "1": "file_extension_start",
                    "13": "substring_index",
                    "2": "substring_position",
                    "3": "substring_start_index",
                    "4": "substring_start"
                },
                "iVar4": {
                    "1": "last_occurrence_position",
                    "11": "last_slash_index",
                    "3": "last_slash",
                    "4": "last_occurrence",
                    "5": "last_occurrence_index"
                },
                "param_1": {
                    "1": "file_path",
                    "19": "output_buffer",
                    "2": "file_info",
                    "4": "file_data"
                },
                "param_2": {
                    "1": "src_filename",
                    "11": "input_string",
                    "2": "input_filename",
                    "4": "input_path",
                    "5": "file_path"
                },
                "param_3": {
                    "1": "undefined_1",
                    "2": "undefined_param_1",
                    "3": "char1",
                    "5": "param_3",
                    "7": "param3"
                },
                "param_4": {
                    "1": "parameter_4",
                    "2": "undefined_param_2",
                    "3": "char2",
                    "5": "param_4",
                    "7": "param4"
                },
                "process_data_080091a0": {
                    "2": "process_data"
                },
                "puVar5": {
                    "1": "substring_ptr",
                    "10": "allocated_memory",
                    "2": "memory_ptr",
                    "3": "new_string"
                }
            },
            "called": [
                "FUN_08009190",
                "FUN_0800997e",
                "FUN_08009954",
                "FUN_080091a0",
                "FUN_08000178",
                "FUN_080099a4"
            ],
            "calling": [
                "FUN_08001b48"
            ],
            "code": "\nvoid extract_file_name_08002e44(int output_buffer,int input_string,undefined param3,undefined param4)\n\n{\n  byte substring_length;\n  char end_of_string;\n  int substring_index;\n  int last_slash_index;\n  undefined *allocated_memory;\n  \n  substring_index = find_substring_index(input_string,\".cpp\");\n  last_slash_index = find_last_separator_index(input_string,0x2f);\n  if (last_slash_index == 0) {\n    last_slash_index = find_last_separator_index(input_string,0x5c);\n  }\n  if (last_slash_index != 0) {\n    input_string = last_slash_index + 1;\n  }\n  if (substring_index == 0) {\n    end_of_string = find_end_of_string_char(input_string);\n    *(char *)(output_buffer + 0xc4) = end_of_string + '\\x02';\n  }\n  else {\n    *(char *)(output_buffer + 0xc4) = ((char)substring_index - (char)input_string) + '\\x02';\n  }\n  process_data(*(undefined4 *)(output_buffer + 200));\n  substring_length = *(byte *)(output_buffer + 0xc4);\n  allocated_memory = (undefined *)allocate_and_assign_memory(substring_length + 1);\n  *(undefined **)(output_buffer + 200) = allocated_memory;\n  allocated_memory[substring_length] = 0;\n  *allocated_memory = param3;\n  allocated_memory[1] = param4;\n  copy_string(allocated_memory + 2,input_string,*(byte *)(output_buffer + 0xc4) - 2);\n  return;\n}\n\n",
            "current_name": "extract_file_name_08002e44",
            "entrypoint": "0x08002e44",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002e44": "extract_file_name_08002e44",
                "allocate_and_assign_memory_08009190": "allocate_and_assign_memory",
                "bVar1": "substring_length",
                "cVar2": "end_of_string",
                "copy_string_08009954": "copy_string",
                "find_end_of_string_08000178": "find_end_of_string_char",
                "find_last_occurrence_0800997e": "find_last_separator_index",
                "find_substring_080099a4": "find_substring_index",
                "iVar3": "substring_index",
                "iVar4": "last_slash_index",
                "param_1": "output_buffer",
                "param_2": "input_string",
                "param_3": "param3",
                "param_4": "param4",
                "process_data_080091a0": "process_data",
                "puVar5": "allocated_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ec4": {
            "additional_data": {
                "(**(code **)(**(int **)(param_1 + 0xc0) + 8))()": {
                    "1": "call_pointer_function"
                },
                "(**(code **)(code_pointer + 8))()": {
                    "1": "execute_code_function"
                },
                "(int **)(param_1 + 0xc0)": {
                    "1": "param_ptr"
                },
                "(param_1 + 0xc0)": {
                    "1": "param_offset"
                },
                "**(code **)(**(int **)(param_1 + 0xc0) + 8)": {
                    "1": "function_to_call",
                    "3": "function_to_execute"
                },
                "**(code **)(functionTable + 8)": {
                    "1": "nested_function"
                },
                "**(code **)(nestedFunctionTable + 8)": {
                    "1": "nested_function"
                },
                "**(int **)(param_1 + 0xC0)": {
                    "1": "func_array"
                },
                "**(int **)(param_1 + 0xc0)": {
                    "1": "modified_pointer",
                    "2": "nested_function_table"
                },
                "+ 8": {
                    "1": "offset"
                },
                "8": {
                    "1": "function_index",
                    "2": "function_offset"
                },
                "<new_variable_name_1>": {
                    "1": "<original_variable_name_1>"
                },
                "<new_variable_name_2>": {
                    "1": "<original_variable_name_2>"
                },
                "<unnamed_variable>": {
                    "1": "function_ptr"
                },
                "FUN_08002ec4": {
                    "1": "execute_dynamic_function",
                    "10": "execute_function",
                    "2": "execute_function_from_ptr",
                    "3": "execute_callback_function",
                    "4": "execute_code"
                },
                "FUN_08002ec4(int param_1)": {
                    "1": "execute_function(arg)"
                },
                "c0": {
                    "1": "constant_offset"
                },
                "callback_struct + 8": {
                    "1": "callback_function"
                },
                "code": {
                    "1": "function_pointer"
                },
                "code **": {
                    "1": "function_pointer"
                },
                "function_ptr + 8": {
                    "1": "function_address"
                },
                "int": {
                    "1": "integer"
                },
                "int **": {
                    "1": "integer_pointer"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "parameter",
                    "9": "function_pointer"
                },
                "param_1 + 0xC0": {
                    "1": "ptr_to_func_array"
                },
                "param_1 + 0xc0": {
                    "1": "function_handle"
                },
                "param_1+0xc0": {
                    "1": "callback_struct"
                },
                "param_2": {
                    "1": "unspecified_argument"
                },
                "param_n": {
                    "1": "unspecified_argument_n"
                },
                "var_1": {
                    "1": "callback_table"
                },
                "var_2": {
                    "1": "callback_function"
                }
            },
            "called": [],
            "calling": [
                "FUN_080022f8"
            ],
            "code": "\nvoid execute_function_08002ec4(integer function_pointer)\n\n{\n  (**(function_pointer **)(**(integer **)(function_pointer + 0xc0) + 8))();\n  return;\n}\n\n",
            "current_name": "execute_function_08002ec4",
            "entrypoint": "0x08002ec4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ec4": "execute_function_08002ec4",
                "code": "function_pointer",
                "int": "integer",
                "param_1": "function_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ed2": {
            "additional_data": {
                "0x44": {
                    "2": "data_offset"
                },
                "0xc": {
                    "2": "function_offset"
                },
                "0xc0": {
                    "2": "offset"
                },
                "0xff": {
                    "1": "mask"
                },
                "0xffffffff": {
                    "1": "error_code"
                },
                "FUN_08002ed2": {
                    "1": "process_and_store_data",
                    "10": "process_data_from_binary",
                    "17": "process_data",
                    "2": "process_and_update_data"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "binary_offset",
                    "3": "data",
                    "5": "binary_address",
                    "6": "input_data"
                },
                "process_data_08003474": {
                    "1": "process_data_subroutine",
                    "3": "process_data_helper",
                    "8": "process_data"
                },
                "uVar1": {
                    "1": "result_value",
                    "2": "result_code",
                    "23": "result"
                },
                "uVar1 & 0xff": {
                    "1": "processed_value"
                }
            },
            "called": [
                "FUN_08003474"
            ],
            "calling": [
                "FUN_080022f8"
            ],
            "code": "\nvoid process_data_08002ed2(int input_data)\n\n{\n  uint result;\n  \n  result = (**(code **)(**(int **)(input_data + 0xc0) + 0xc))();\n  if (result != 0xffffffff) {\n    process_data_08002ed2(input_data + 0x44,result & 0xff);\n  }\n  return;\n}\n\n",
            "current_name": "process_data_08002ed2",
            "entrypoint": "0x08002ed2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ed2": "process_data_08002ed2",
                "param_1": "input_data",
                "process_data_08003474": "process_data",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ef2": {
            "additional_data": {
                "FUN_08002ef2": {
                    "1": "execute_or_decode_data",
                    "2": "execute_decoding_operation",
                    "4": "execute_decode_function",
                    "5": "execute_or_decode",
                    "8": "execute_and_decode"
                },
                "param_1": {
                    "1": "start_address",
                    "2": "input",
                    "3": "input_param",
                    "4": "data_offset",
                    "7": "base_address"
                },
                "param_2": {
                    "1": "config_param",
                    "14": "param_2",
                    "2": "param",
                    "3": "parameter_2",
                    "4": "param2"
                },
                "param_3": {
                    "1": "decoded_data",
                    "14": "param_3",
                    "4": "param3"
                },
                "param_4": {
                    "1": "output_buffer",
                    "13": "param_4",
                    "4": "parameter_4"
                }
            },
            "called": [
                "FUN_08003158"
            ],
            "calling": [
                "FUN_08000488",
                "FUN_080022f8"
            ],
            "code": "\nvoid execute_and_decode_08002ef2(int base_address,undefined4 param_2,undefined2 param_3,undefined4 param_4)\n\n{\n  execute_or_decode_08003158(base_address + 0x40,param_2,param_3,param_4,param_4);\n  return;\n}\n\n",
            "current_name": "execute_and_decode_08002ef2",
            "entrypoint": "0x08002ef2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ef2": "execute_and_decode_08002ef2",
                "param_1": "base_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002efe": {
            "additional_data": {
                "FUN_08002efe": {
                    "1": "execute_and_return_result",
                    "2": "execute_modified_function",
                    "3": "execute_updated_function",
                    "6": "execute_function_with_offset"
                },
                "param_1": {
                    "1": "original_param",
                    "15": "base_address",
                    "2": "input_value",
                    "6": "input_param"
                },
                "param_2": {
                    "1": "param",
                    "11": "param_2",
                    "2": "arg1",
                    "3": "parameter_2",
                    "4": "param2"
                },
                "param_3": {
                    "1": "input_data",
                    "10": "param_3",
                    "2": "arg2",
                    "3": "parameter_3",
                    "4": "param3"
                },
                "param_4": {
                    "1": "parameter",
                    "11": "param_4",
                    "2": "arg3",
                    "3": "parameter_4",
                    "4": "param4"
                }
            },
            "called": [
                "FUN_0800319e"
            ],
            "calling": [
                "FUN_08000be8"
            ],
            "code": "\nvoid execute_function_with_offset_08002efe(int base_address,undefined4 param_2,undefined2 param_3,undefined4 param_4)\n\n{\n  execute_function_0800319e(base_address + 0x40,param_2,param_3,param_4,param_4);\n  return;\n}\n\n",
            "current_name": "execute_function_with_offset_08002efe",
            "entrypoint": "0x08002efe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002efe": "execute_function_with_offset_08002efe",
                "param_1": "base_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002f0a": {
            "additional_data": {
                "0x40": {
                    "2": "offset"
                },
                "<unchanged_variable_name>": {
                    "1": "<unchanged_variable_name>"
                },
                "FUN_08002f0a": {
                    "1": "process_and_decode_data",
                    "19": "decode_and_process_data",
                    "9": "process_data"
                },
                "decode_and_process_data_0800325a": {
                    "1": "decode_and_process",
                    "8": "decode_and_process_data"
                },
                "param_1": {
                    "1": "input_param",
                    "13": "input_data",
                    "2": "data_address",
                    "3": "data_offset",
                    "4": "data"
                },
                "param_1 + 0x40": {
                    "1": "input_offset"
                }
            },
            "called": [
                "FUN_0800325a"
            ],
            "calling": [
                "FUN_08001c18"
            ],
            "code": "\nvoid decode_and_process_data_08002f0a(int input_data)\n\n{\n  decode_and_process_data_08002f0a(input_data + 0x40);\n  return;\n}\n\n",
            "current_name": "decode_and_process_data_08002f0a",
            "entrypoint": "0x08002f0a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002f0a": "decode_and_process_data_08002f0a",
                "decode_and_process_data_0800325a": "decode_and_process_data",
                "param_1": "input_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002f14": {
            "additional_data": {
                "0x40": {
                    "2": "offset"
                },
                "<original_variable_name>": {
                    "1": "<new_variable_name>"
                },
                "FUN_08002f14": {
                    "1": "process_data_with_offset",
                    "25": "process_data",
                    "3": "process_and_forward_data"
                },
                "data": {
                    "1": "input_data"
                },
                "param_1": {
                    "1": "data_offset",
                    "13": "input_data",
                    "2": "input_param",
                    "3": "input_value",
                    "6": "data"
                },
                "param_1 + 0x40": {
                    "1": "shifted_data",
                    "2": "data_offset"
                },
                "process_data_080032a2": {
                    "1": "forward_data_to_another_function",
                    "2": "process_data_helper"
                },
                "process_data_entry": {
                    "1": "process_data_entry"
                }
            },
            "called": [
                "FUN_080032a2"
            ],
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_08000500"
            ],
            "code": "\nvoid process_data_08002f14(int input_data)\n\n{\n  process_data_08002f14_helper(input_data + 0x40);\n  return;\n}\n\n",
            "current_name": "process_data_08002f14",
            "entrypoint": "0x08002f14",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002f14": "process_data_08002f14",
                "data": "input_data",
                "param_1": "input_data",
                "process_data_080032a2": "process_data_helper"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002f1e": {
            "additional_data": {
                "(code **)**(undefined4 **)(param_1 + 0xc0))()": {
                    "1": "execute_function_pointer()"
                },
                "**(code **)**(undefined4 **)(param_1 + 0xc0)": {
                    "1": "execute_callback"
                },
                "**(undefined4 **)(param_1 + 0xc0)": {
                    "1": "function_to_execute"
                },
                "+0xc0": {
                    "1": "function_pointer_offset"
                },
                "<original_variable_name_1>": {
                    "3": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "2": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "2": "<new_variable_name_n>"
                },
                "FUN_08002f1e": {
                    "1": "execute_function_in_pointer",
                    "17": "execute_function",
                    "2": "execute_callback_function",
                    "3": "execute_function_pointer",
                    "4": "execute_callback"
                },
                "c0": {
                    "1": "function_offset"
                },
                "code": {
                    "1": "function_pointer"
                },
                "code **": {
                    "1": "function_pointer_array"
                },
                "param_1": {
                    "1": "callback_ptr",
                    "19": "function_pointer"
                },
                "param_1 + 0xc0": {
                    "1": "callback_function_address",
                    "2": "function_pointer_address",
                    "3": "function_pointer",
                    "4": "function_pointer_offset"
                },
                "param_1+0xc0": {
                    "1": "function_address"
                },
                "undefined4": {
                    "1": "undefined_int"
                },
                "undefined4 **": {
                    "1": "function_pointer_ptr"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001cd0"
            ],
            "code": "\nvoid execute_function_08002f1e(int function_pointer)\n\n{\n  (**(function_pointer **)**(undefined_int **)(function_pointer + 0xc0))();\n  return;\n}\n\n",
            "current_name": "execute_function_08002f1e",
            "entrypoint": "0x08002f1e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002f1e": "execute_function_08002f1e",
                "code": "function_pointer",
                "param_1": "function_pointer",
                "undefined4": "undefined_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002f2c": {
            "additional_data": {
                "0x90": {
                    "1": "code_90"
                },
                "0xc0": {
                    "1": "special_address_6"
                },
                "0xd0": {
                    "1": "code_d0"
                },
                "0xe0": {
                    "1": "code_e0"
                },
                "0xf4": {
                    "1": "code_f4"
                },
                "0xf5": {
                    "1": "special_address_3"
                },
                "DAT_200005d4": {
                    "1": "memory_value_3"
                },
                "DAT_200005dc": {
                    "1": "memory_value_4"
                },
                "DAT_200005e0": {
                    "1": "data_f4"
                },
                "DAT_200005e4": {
                    "1": "previous_memory_value"
                },
                "DAT_200005ec": {
                    "1": "data_c0"
                },
                "DAT_200005f0": {
                    "1": "data_d0"
                },
                "FUN_08002f2c": {
                    "1": "update_register_value",
                    "16": "update_data",
                    "2": "update_data_value",
                    "4": "update_parameter"
                },
                "param_1": {
                    "1": "input1",
                    "3": "param_1",
                    "4": "param1",
                    "7": "status"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "data_value",
                    "3": "config_value",
                    "4": "value",
                    "5": "code"
                },
                "param_3": {
                    "1": "new_data",
                    "12": "new_value",
                    "2": "arg3",
                    "4": "data",
                    "6": "value"
                },
                "uVar1": {
                    "1": "temp_var1",
                    "2": "temp_value",
                    "3": "temp_var"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001b48"
            ],
            "code": "\nvoid update_data_08002f2c(undefined4 status,uint code,undefined4 new_value)\n\n{\n  undefined4 temp_var;\n  \n  if (code == 0xd0) {\n    DAT_200005f0 = new_value;\n    return;\n  }\n  if (0xd0 < code) {\n    if (code == 0xf4) {\n      DAT_200005e0 = new_value;\n      return;\n    }\n    temp_var = new_value;\n    if ((code != 0xf5) && (temp_var = DAT_200005e4, code == 0xe0)) {\n      DAT_200005d4 = new_value;\n      return;\n    }\n    DAT_200005e4 = temp_var;\n    return;\n  }\n  if (code == 0x90) {\n    DAT_200005dc = new_value;\n    return;\n  }\n  if (code != 0xc0) {\n    return;\n  }\n  DAT_200005ec = new_value;\n  return;\n}\n\n",
            "current_name": "update_data_08002f2c",
            "entrypoint": "0x08002f2c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002f2c": "update_data_08002f2c",
                "param_1": "status",
                "param_2": "code",
                "param_3": "new_value",
                "uVar1": "temp_var"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002f84": {
            "additional_data": {
                "FUN_08002f84": {
                    "1": "assign_value_to_data_if_param2_is255",
                    "7": "update_data"
                },
                "param_1": {
                    "1": "global_param",
                    "2": "unused_param",
                    "6": "status",
                    "7": "param1"
                },
                "param_2": {
                    "1": "value_to_compare",
                    "14": "value",
                    "2": "input_2",
                    "3": "status"
                },
                "param_3": {
                    "1": "ptr2",
                    "12": "new_value",
                    "2": "param3",
                    "3": "new_data",
                    "7": "data"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001b48"
            ],
            "code": "\nvoid update_data_08002f84(undefined4 param1,int value,undefined4 new_value)\n\n{\n  if (value == 0xff) {\n    DAT_200005e8 = new_value;\n  }\n  return;\n}\n\n",
            "current_name": "update_data_08002f84",
            "entrypoint": "0x08002f84",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002f84": "update_data_08002f84",
                "param_1": "param1",
                "param_2": "value",
                "param_3": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002f94": {
            "additional_data": {
                "DAT_200005d0": {
                    "1": "updated_data"
                },
                "FUN_08002f94": {
                    "1": "store_param_3",
                    "2": "set_dat_value",
                    "4": "set_data",
                    "5": "update_data"
                },
                "param_1": {
                    "1": "new_data",
                    "2": "param_1",
                    "3": "unused_param"
                },
                "param_2": {
                    "1": "data_pointer2",
                    "2": "value_2",
                    "3": "unused_param"
                },
                "param_3": {
                    "1": "input_data",
                    "2": "new_param_3",
                    "3": "new_dat_value",
                    "5": "new_data"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001b48"
            ],
            "code": "\nvoid update_data_08002f94(undefined4 unused_param,undefined4 unused_param,undefined4 new_data)\n\n{\n  DAT_200005d0 = new_data;\n  return;\n}\n\n",
            "current_name": "update_data_08002f94",
            "entrypoint": "0x08002f94",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002f94": "update_data_08002f94",
                "param_1": "unused_param",
                "param_2": "unused_param",
                "param_3": "new_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002fa0": {
            "additional_data": {
                "*(undefined *)(param_2 + param_1 + 0xcc)": {
                    "1": "value"
                },
                "0xcc": {
                    "1": "offset_increment"
                },
                "<original_function_name>": {
                    "1": "get_memory_value"
                },
                "<original_parameter_name_1>": {
                    "1": "offset"
                },
                "<original_parameter_name_2>": {
                    "1": "base_address"
                },
                "FUN_08002fa0": {
                    "1": "get_byte_at_offset",
                    "6": "get_byte_from_offset",
                    "8": "get_value_from_offset"
                },
                "param_1": {
                    "1": "byte_offset",
                    "2": "memory_offset",
                    "26": "offset"
                },
                "param_2": {
                    "1": "buffer",
                    "23": "base_address",
                    "3": "memory_address"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_080022f8",
                "FUN_0800021a"
            ],
            "code": "\nundefined get_value_from_offset_08002fa0(int offset,int base_address)\n\n{\n  return *(undefined *)(base_address + offset + 0xcc);\n}\n\n",
            "current_name": "get_value_from_offset_08002fa0",
            "entrypoint": "0x08002fa0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002fa0": "get_value_from_offset_08002fa0",
                "param_1": "offset",
                "param_2": "base_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002fa8": {
            "additional_data": {
                "*(char *)(inputAddress + offset + constantOffset)": {
                    "1": "byte_value"
                },
                "*(char *)(param_1 + param_2 + 0xcc)": {
                    "1": "current_byte"
                },
                "*(undefined *)(inputAddress + offset + constantOffset)": {
                    "1": "byte_pointer"
                },
                "*(undefined *)(param_1 + param_2 + 0xcc)": {
                    "1": "updated_byte"
                },
                "0xcc": {
                    "1": "character_offset"
                },
                "<original_function_name>": {
                    "1": "update_char_if_not7_f"
                },
                "<param_1>": {
                    "1": "base_address"
                },
                "<param_2>": {
                    "1": "offset"
                },
                "<param_3>": {
                    "1": "new_char"
                },
                "DAT_": {
                    "1": "offset"
                },
                "FUN_08002fa8": {
                    "1": "update_value_if_needed",
                    "2": "update_char_if_not_equal",
                    "3": "update_char_if_not127",
                    "5": "update_character"
                },
                "PTR_": {
                    "1": "base_address"
                },
                "cc": {
                    "1": "constant_offset"
                },
                "param_1": {
                    "1": "character_base_address",
                    "25": "base_address"
                },
                "param_2": {
                    "2": "index",
                    "28": "offset"
                },
                "param_3": {
                    "1": "new_character_value",
                    "2": "new_byte",
                    "22": "new_value",
                    "4": "new_char"
                }
            },
            "called": [],
            "calling": [
                "FUN_080005f8"
            ],
            "code": "\nvoid update_character_08002fa8(int base_address,int offset,undefined new_value)\n\n{\n  if (*(char *)(base_address + offset + 0xcc) != '\\x7f') {\n    *(undefined *)(base_address + offset + 0xcc) = new_value;\n  }\n  return;\n}\n\n",
            "current_name": "update_character_08002fa8",
            "entrypoint": "0x08002fa8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002fa8": "update_character_08002fa8",
                "param_1": "base_address",
                "param_2": "offset",
                "param_3": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002fba": {
            "additional_data": {
                "* (param_1 + (param_2 + 0x42) * 4)": {
                    "1": "value"
                },
                "* (undefined4 *)": {
                    "1": "pointer_to_result"
                },
                "* (undefined4 *) (param_1 + (param_2 + 0x42) * 4)": {
                    "1": "value"
                },
                "*(undefined4 *)(addressToRead)": {
                    "1": "data"
                },
                "*(undefined4 *)(param_1 + (param_2 + 0x42) * 4)": {
                    "1": "data_element"
                },
                "0x42": {
                    "1": "element_index",
                    "3": "offset"
                },
                "4": {
                    "1": "size_of_element",
                    "3": "element_size"
                },
                "<original_function_name>": {
                    "1": "get_value_at_offset"
                },
                "<param_1>": {
                    "1": "base_address"
                },
                "<param_2>": {
                    "1": "offset"
                },
                "FUN_08002fba": {
                    "1": "extracted_from_binary",
                    "2": "get_data_element",
                    "5": "get_value_at_offset",
                    "7": "get_value_from_offset"
                },
                "element": {
                    "1": "result"
                },
                "offset_value": {
                    "1": "result"
                },
                "param_1": {
                    "1": "array_start",
                    "2": "array_address",
                    "24": "base_address"
                },
                "param_1 + (param_2 + 0x42) * 4": {
                    "1": "calculated_address",
                    "2": "element_address"
                },
                "param_1+param_2*4": {
                    "1": "memory_location"
                },
                "param_2": {
                    "18": "offset",
                    "3": "offset_index",
                    "9": "index"
                },
                "param_2 + 0x42": {
                    "1": "adjusted_offset"
                },
                "param_3": {
                    "1": "multiplier"
                },
                "undefined4": {
                    "1": "data_element"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001cd0"
            ],
            "code": "\nresult get_value_from_offset_08002fba(int base_address,int offset)\n\n{\n  return *(result *)(base_address + (offset + 0x42) * 4);\n}\n\n",
            "current_name": "get_value_from_offset_08002fba",
            "entrypoint": "0x08002fba",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002fba": "get_value_from_offset_08002fba",
                "param_1": "base_address",
                "param_2": "offset",
                "undefined4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002fc2": {
            "additional_data": {
                "*(undefined4 *)(param_1 + (param_2 + 0x42) * 4)": {
                    "1": "memory_address"
                },
                "FUN_08002fc2": {
                    "1": "set_result_at_index",
                    "2": "write_to_address",
                    "3": "store_value_at_offset",
                    "4": "store_value_in_array",
                    "5": "write_value_to_memory"
                },
                "param_1": {
                    "1": "memory_location",
                    "15": "base_address",
                    "2": "array_address",
                    "3": "memory_address"
                },
                "param_2": {
                    "1": "element_index",
                    "14": "offset",
                    "16": "index"
                },
                "param_3": {
                    "2": "data",
                    "26": "value",
                    "3": "new_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "code": "\nvoid write_value_to_memory_08002fc2(int base_address,int index,undefined4 value)\n\n{\n  *(undefined4 *)(base_address + (index + 0x42) * 4) = value;\n  return;\n}\n\n",
            "current_name": "write_value_to_memory_08002fc2",
            "entrypoint": "0x08002fc2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002fc2": "write_value_to_memory_08002fc2",
                "param_1": "base_address",
                "param_2": "index",
                "param_3": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002fca": {
            "additional_data": {
                "FUNC_08008ac4": {
                    "1": "perform_operation"
                },
                "FUNK_08002fca": {
                    "1": "process_loop"
                },
                "FUN_08002fca": {
                    "1": "process_param_loop",
                    "21": "process_loop",
                    "6": "process_parameters"
                },
                "param_1": {
                    "1": "unknown_param_1",
                    "14": "unused_param",
                    "2": "unknown_param"
                },
                "param_2": {
                    "1": "func_param_2",
                    "2": "input_2",
                    "4": "input_param",
                    "5": "parameter"
                },
                "param_3": {
                    "1": "input3",
                    "10": "loop_count",
                    "13": "num_iterations",
                    "3": "count"
                },
                "param_4": {
                    "1": "param_value_1",
                    "10": "param_4",
                    "2": "parameter_1",
                    "3": "param_a"
                },
                "param_5": {
                    "1": "param_val_2",
                    "10": "param_5",
                    "2": "parameter_2",
                    "3": "param_b"
                },
                "process_parameter_08008a24": {
                    "3": "process_parameter"
                },
                "uVar1": {
                    "1": "iteration_index",
                    "11": "iteration_count",
                    "2": "loop_index",
                    "3": "counter",
                    "7": "iteration_counter"
                }
            },
            "called": [
                "FUN_08008ac4",
                "FUN_08008a24"
            ],
            "calling": [
                "FUN_08003002"
            ],
            "code": "\nvoid process_loop_08002fca(undefined4 unused_param,undefined4 parameter,int num_iterations,undefined4 param_4,\n                 undefined4 param_5)\n\n{\n  uint iteration_count;\n  \n  for (iteration_count = 0; (int)iteration_count < num_iterations; iteration_count = iteration_count + 1 & 0xff) {\n    FUNC_08008ac4(param_5);\n    process_parameter(parameter,1);\n    FUNC_08008ac4(param_4);\n    process_parameter(parameter,0);\n  }\n  return;\n}\n\n",
            "current_name": "process_loop_08002fca",
            "entrypoint": "0x08002fca",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002fca": "process_loop_08002fca",
                "param_1": "unused_param",
                "param_2": "parameter",
                "param_3": "num_iterations",
                "process_parameter_08008a24": "process_parameter",
                "uVar1": "iteration_count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003002": {
            "additional_data": {
                "0x1f8": {
                    "1": "check_flag_offset",
                    "2": "status_flag"
                },
                "0x28": {
                    "1": "loop_limit",
                    "2": "value1"
                },
                "0x7d": {
                    "1": "value2"
                },
                "0xd": {
                    "1": "operation1",
                    "2": "peripheral_id"
                },
                "0xd2": {
                    "1": "loop_delay",
                    "2": "value2"
                },
                "0xfa": {
                    "1": "constant2"
                },
                "DAT_": {
                    "1": ""
                },
                "FUNC_08008ac4": {
                    "1": "execute_operation",
                    "12": "execute_function",
                    "3": "perform_operation",
                    "8": "perform_action"
                },
                "FUN_08003002": {
                    "1": "check_peripheral_status",
                    "2": "configure_peripheral_and_process_loop",
                    "3": "configure_and_process",
                    "4": "process_peripheral_data",
                    "5": "configure_peripheral",
                    "6": "initialize_peripheral"
                },
                "PTR_": {
                    "1": ""
                },
                "PTR_08002fca": {
                    "1": "process_loop_func"
                },
                "PTR_08008990": {
                    "1": "peripheral_address"
                },
                "PTR_08008ac4": {
                    "1": "action_address"
                },
                "PTR_<variable>": {
                    "1": "<new_variable_name>"
                },
                "actionParameter+": {
                    "1": "action_parameter"
                },
                "configurePeripheral+": {
                    "1": "initialize_configuration"
                },
                "configure_peripheral_08008990": {
                    "1": "configure_peripheral_register",
                    "24": "configure_peripheral"
                },
                "initializePeripheral+": {
                    "1": "configure_action"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "device_id",
                    "4": "peripheral_address",
                    "6": "data",
                    "7": "device_address"
                },
                "performAction+": {
                    "1": "perform_action"
                },
                "peripheralAddress+": {
                    "1": "action_parameter"
                },
                "processLoop+": {
                    "1": "execute_loop"
                },
                "process_loop_08002fca": {
                    "1": "process_device_data",
                    "23": "process_loop"
                }
            },
            "called": [
                "FUN_08008ac4",
                "FUN_08002fca",
                "FUN_08008990"
            ],
            "calling": [
                "FUN_08003048"
            ],
            "code": "\nvoid initialize_peripheral_08003002(int device_address)\n\n{\n  if (*(char *)(device_address + 0x1f8) != '\\0') {\n    return;\n  }\n  configure_peripheral(0xd,1);\n  process_loop(device_address,0xd,2,0x28,0xd2);\n  FUNC_08008ac4(0xfa);\n  process_loop(device_address,0xd,5,0x28,0xd2);\n  FUNC_08008ac4(0x7d);\n  return;\n}\n\n",
            "current_name": "initialize_peripheral_08003002",
            "entrypoint": "0x08003002",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003002": "initialize_peripheral_08003002",
                "configure_peripheral_08008990": "configure_peripheral",
                "param_1": "device_address",
                "process_loop_08002fca": "process_loop"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003048": {
            "additional_data": {
                "FUN_08003048": {
                    "1": "setup_and_process_data",
                    "17": "initialize_and_process_data",
                    "3": "configure_and_initialize_serial_port",
                    "4": "initialize_serial_port"
                },
                "configure_serial_port_08008c44": {
                    "7": "configure_serial_port"
                },
                "initialize_peripheral_08003002": {
                    "7": "initialize_peripheral"
                },
                "param_1": {
                    "1": "port_number",
                    "2": "device_param",
                    "3": "serial_port_config",
                    "5": "config_param"
                },
                "param_2": {
                    "1": "parameter_2",
                    "2": "param_2",
                    "3": "serial_param"
                },
                "param_3": {
                    "1": "param",
                    "10": "unused_param",
                    "2": "param3",
                    "3": "config_param_3"
                },
                "param_4": {
                    "1": "parameter_4",
                    "2": "param4",
                    "3": "config_param_4",
                    "5": "unused_param_2"
                },
                "process_data_08002e26": {
                    "7": "process_data"
                }
            },
            "called": [
                "FUN_08002e26",
                "FUN_08008c44",
                "FUN_08003002"
            ],
            "calling": [
                "FUN_08001b48"
            ],
            "code": "\nvoid initialize_and_process_data_08003048(undefined4 config_param,undefined4 serial_param,undefined4 unused_param,undefined4 unused_param_2)\n\n{\n  configure_serial_port(&DAT_20000700,serial_param,6,unused_param_2,unused_param_2);\n  initialize_peripheral(config_param);\n  process_data(config_param,&DAT_20000700);\n  return;\n}\n\n",
            "current_name": "initialize_and_process_data_08003048",
            "entrypoint": "0x08003048",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003048": "initialize_and_process_data_08003048",
                "configure_serial_port_08008c44": "configure_serial_port",
                "initialize_peripheral_08003002": "initialize_peripheral",
                "param_1": "config_param",
                "param_2": "serial_param",
                "param_3": "unused_param",
                "param_4": "unused_param_2",
                "process_data_08002e26": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800307a": {
            "additional_data": {
                "FUN_0800307a": {
                    "1": "decode_bytes",
                    "12": "decode_data",
                    "2": "decode",
                    "3": "decode_and_process_data",
                    "8": "decode_and_execute"
                },
                "param_1": {
                    "1": "decoded_data",
                    "2": "callback",
                    "3": "data",
                    "4": "function_ptr",
                    "6": "function_pointer"
                },
                "param_2": {
                    "1": "instruction_array_length",
                    "11": "data_length",
                    "2": "length",
                    "6": "input_size",
                    "7": "input_length"
                },
                "param_3": {
                    "1": "source",
                    "14": "input_data",
                    "2": "input_buffer",
                    "6": "encoded_data"
                },
                "param_4": {
                    "1": "max_output",
                    "13": "max_iterations",
                    "2": "output_length",
                    "8": "max_output_length"
                },
                "uVar1": {
                    "1": "first_byte",
                    "27": "current_byte"
                },
                "uVar2": {
                    "1": "bits_processed",
                    "14": "bit_offset",
                    "2": "current_bit",
                    "3": "bit_count",
                    "6": "bit_position"
                },
                "uVar3": {
                    "1": "unpacked_data_size",
                    "12": "iteration_count",
                    "2": "output_index",
                    "3": "output_position",
                    "4": "output_length"
                },
                "uVar4": {
                    "1": "current_index",
                    "15": "byte_index",
                    "2": "current_byte_index",
                    "3": "input_position"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800325a",
                "FUN_08003158",
                "FUN_0800319e",
                "FUN_08003106",
                "FUN_080031ce"
            ],
            "code": "\nvoid decode_data_0800307a(undefined4 *function_pointer,uint data_length,byte *input_data,uint max_iterations)\n\n{\n  uint current_byte;\n  uint bit_offset;\n  uint iteration_count;\n  uint byte_index;\n  \n  current_byte = (uint)*input_data;\n  if (max_iterations == 0) {\n    max_iterations = 0xffffffff;\n  }\n  byte_index = 0;\n  bit_offset = 0;\n  iteration_count = 0;\n  while ((byte_index < data_length && (iteration_count < max_iterations))) {\n    (***(code ***)(undefined4 *)*function_pointer)\n              ((undefined4 *)*function_pointer,((uint)input_data[byte_index] << (bit_offset & 0xff) | current_byte) & 0x7f);\n    current_byte = (int)(uint)input_data[byte_index] >> (7 - bit_offset & 0xff) & 0xff;\n    bit_offset = bit_offset + 1;\n    while ((iteration_count = iteration_count + 1, 6 < bit_offset && (iteration_count < max_iterations))) {\n      (***(code ***)(undefined4 *)*function_pointer)((undefined4 *)*function_pointer,current_byte & 0x7f);\n      current_byte = current_byte >> 7;\n      bit_offset = bit_offset - 7;\n    }\n    byte_index = byte_index + 1;\n  }\n  if ((bit_offset != 0) && (iteration_count < max_iterations)) {\n    (***(code ***)(undefined4 *)*function_pointer)((undefined4 *)*function_pointer,(1 << (bit_offset & 0xff)) - 1U & current_byte)\n    ;\n  }\n  return;\n}\n\n",
            "current_name": "decode_data_0800307a",
            "entrypoint": "0x0800307a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800307a": "decode_data_0800307a",
                "param_1": "function_pointer",
                "param_2": "data_length",
                "param_3": "input_data",
                "param_4": "max_iterations",
                "uVar1": "current_byte",
                "uVar2": "bit_offset",
                "uVar3": "iteration_count",
                "uVar4": "byte_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003106": {
            "additional_data": {
                "*puVar1": {
                    "1": "function"
                },
                "FUN_08003106": {
                    "1": "decode_and_execute_function",
                    "2": "execute_instructions",
                    "3": "decode_and_execute",
                    "5": "decode_and_process_data",
                    "9": "execute_function"
                },
                "decode_data_0800307a": {
                    "11": "decode_data"
                },
                "param_1": {
                    "1": "input_ptr",
                    "2": "data_pointer",
                    "8": "function_ptr",
                    "9": "data_ptr"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "data_1",
                    "3": "parameter_2",
                    "7": "param2"
                },
                "param_3": {
                    "1": "value2",
                    "2": "value_2",
                    "3": "parameter_3",
                    "4": "param_3",
                    "7": "param3"
                },
                "param_4": {
                    "1": "param_3",
                    "2": "value_3",
                    "3": "parameter_4",
                    "4": "param_4",
                    "7": "param4"
                },
                "puVar1": {
                    "1": "ptr_to_function_ptr",
                    "2": "current_instruction",
                    "3": "ptr_to_data",
                    "5": "pointer_to_function"
                }
            },
            "called": [
                "FUN_0800307a"
            ],
            "calling": [
                "FUN_08003158"
            ],
            "code": "\nvoid execute_function_08003106(undefined4 *data_ptr,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 *pointer_to_function;\n  \n  pointer_to_function = (undefined4 *)*data_ptr;\n  if (pointer_to_function != (undefined4 *)0x0) {\n    (**(code **)*pointer_to_function)(pointer_to_function,0xf0);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,0x6f);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,param2);\n    decode_data(data_ptr,param3,param4,param3);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,0xf7);\n  }\n  return;\n}\n\n",
            "current_name": "execute_function_08003106",
            "entrypoint": "0x08003106",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003106": "execute_function_08003106",
                "decode_data_0800307a": "decode_data",
                "param_1": "data_ptr",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "pointer_to_function"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800314e": {
            "additional_data": {
                "*param_1": {
                    "1": "result"
                },
                "*result": {
                    "1": "0"
                },
                "FUN_0800314e": {
                    "1": "initialize_value_to_zero",
                    "2": "initialize_to_zero",
                    "4": "initialize_value",
                    "5": "initialize_variable",
                    "6": "initialize_param"
                },
                "param_1": {
                    "1": "memory_pointer",
                    "2": "output_variable",
                    "3": "param",
                    "4": "output",
                    "5": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002ce0"
            ],
            "code": "\nvoid initialize_param_0800314e(undefined4 *result)\n\n{\n  *result = 0;\n  return;\n}\n\n",
            "current_name": "initialize_param_0800314e",
            "entrypoint": "0x0800314e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800314e": "initialize_param_0800314e",
                "param_1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003154": {
            "additional_data": {
                "*param_1": {
                    "1": "result"
                },
                "FUN_08003154": {
                    "1": "copy_parameter_to_variable",
                    "2": "assign_value",
                    "3": "assign_parameter_value",
                    "4": "set_param_value",
                    "5": "assign_value_to_pointer",
                    "8": "copy_value_to_pointer"
                },
                "param_1": {
                    "1": "result_pointer",
                    "13": "destination",
                    "2": "output",
                    "3": "destination_pointer"
                },
                "param_2": {
                    "1": "input_param",
                    "11": "value",
                    "2": "value_to_assign",
                    "3": "value_to_copy",
                    "4": "source",
                    "5": "input_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002e26"
            ],
            "code": "\nvoid copy_value_to_pointer_08003154(undefined4 *destination,undefined4 value)\n\n{\n  *destination = value;\n  return;\n}\n\n",
            "current_name": "copy_value_to_pointer_08003154",
            "entrypoint": "0x08003154",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003154": "copy_value_to_pointer_08003154",
                "param_1": "destination",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003158": {
            "additional_data": {
                "FUN_08003158": {
                    "1": "decode_or_execute",
                    "2": "process_function",
                    "3": "execute_command",
                    "5": "execute_function",
                    "7": "execute_or_decode"
                },
                "decode_data_0800307a": {
                    "1": "decode_data"
                },
                "execute_function_08003106": {
                    "1": "execute_custom_function"
                },
                "local_a": {
                    "1": "decoded_flags",
                    "11": "decoded_value",
                    "14": "decoded_data"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "input_data",
                    "3": "command_ptr",
                    "4": "data_ptr",
                    "7": "function_ptr"
                },
                "param_2": {
                    "1": "parameter",
                    "2": "flags",
                    "3": "value",
                    "4": "size",
                    "8": "flag"
                },
                "param_3": {
                    "1": "limit",
                    "13": "data",
                    "4": "data_value",
                    "9": "value"
                },
                "puVar1": {
                    "1": "function",
                    "2": "ptr_to_function",
                    "4": "function_pointer",
                    "5": "func_ptr",
                    "8": "function_ptr"
                }
            },
            "called": [
                "FUN_0800307a",
                "FUN_08003106"
            ],
            "calling": [
                "FUN_08002ef2"
            ],
            "code": "\nvoid execute_or_decode_08003158(undefined4 *function_ptr,uint flag,ushort data)\n\n{\n  undefined4 *function_ptr;\n  ushort decoded_data;\n  \n  function_ptr = (undefined4 *)*function_ptr;\n  if (function_ptr != (undefined4 *)0x0) {\n    decoded_data = data;\n    if (((int)flag < 0x10) && (data < 0x4000)) {\n      (**(code **)*function_ptr)(function_ptr,flag | 0xe0);\n      decode_data(function_ptr,2,&decoded_data);\n    }\n    else {\n      execute_custom_function(function_ptr,flag,2,&decoded_data);\n    }\n  }\n  return;\n}\n\n",
            "current_name": "execute_or_decode_08003158",
            "entrypoint": "0x08003158",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003158": "execute_or_decode_08003158",
                "decode_data_0800307a": "decode_data",
                "execute_function_08003106": "execute_custom_function",
                "local_a": "decoded_data",
                "param_1": "function_ptr",
                "param_2": "flag",
                "param_3": "data",
                "puVar1": "function_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800319e": {
            "additional_data": {
                "FUN_0800319e": {
                    "1": "execute_operation",
                    "2": "decode_and_execute",
                    "3": "decode_and_process_data",
                    "5": "execute_decoding",
                    "6": "execute_function"
                },
                "local_a": {
                    "1": "current_value",
                    "14": "decoded_data",
                    "2": "decoded_input",
                    "5": "decoded_value"
                },
                "param_1": {
                    "1": "input_data",
                    "10": "function_pointer",
                    "2": "data_ptr",
                    "3": "function_address",
                    "4": "data_pointer",
                    "6": "function_ptr"
                },
                "param_2": {
                    "1": "parameter",
                    "14": "flags",
                    "2": "data_length",
                    "4": "flag"
                },
                "param_3": {
                    "1": "param",
                    "2": "input_value",
                    "4": "value",
                    "5": "input_data",
                    "8": "data"
                },
                "puVar1": {
                    "1": "ptr",
                    "2": "function_ptr_value",
                    "3": "function_pointer_value",
                    "4": "function",
                    "8": "function_pointer",
                    "9": "function_ptr"
                }
            },
            "called": [
                "FUN_0800307a"
            ],
            "calling": [
                "FUN_08002efe"
            ],
            "code": "\nvoid execute_function_0800319e(undefined4 *function_pointer,uint flags,undefined2 data)\n\n{\n  undefined4 *function_ptr;\n  undefined2 decoded_data;\n  \n  function_ptr = (undefined4 *)*function_pointer;\n  if (function_ptr != (undefined4 *)0x0) {\n    decoded_data = data;\n    (**(code **)*function_ptr)(function_ptr,flags & 0xf | 0x90);\n    decode_data_0800307a(function_pointer,2,&decoded_data);\n  }\n  return;\n}\n\n",
            "current_name": "execute_function_0800319e",
            "entrypoint": "0x0800319e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800319e": "execute_function_0800319e",
                "local_a": "decoded_data",
                "param_1": "function_pointer",
                "param_2": "flags",
                "param_3": "data",
                "puVar1": "function_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080031ce": {
            "additional_data": {
                "FUN_080031ce": {
                    "1": "decode_data_and_process",
                    "2": "process_data",
                    "25": "decode_and_process_data",
                    "3": "execute_function"
                },
                "param_1": {
                    "1": "data_array",
                    "2": "function_pointer",
                    "20": "data_ptr",
                    "3": "data_pointer"
                },
                "param_2": {
                    "1": "second_param",
                    "11": "param_2",
                    "3": "value_2",
                    "8": "param2"
                },
                "param_3": {
                    "1": "param",
                    "11": "param_3",
                    "3": "value_3",
                    "8": "param3"
                },
                "param_4": {
                    "1": "num_of_elements",
                    "10": "data_size",
                    "2": "length",
                    "3": "count",
                    "4": "num_iterations",
                    "5": "num_elements"
                },
                "param_5": {
                    "1": "base",
                    "13": "offset",
                    "2": "param5",
                    "4": "param_5",
                    "5": "base_index"
                },
                "puVar1": {
                    "1": "ptr_to_funcptr",
                    "11": "func_ptr",
                    "12": "function_ptr",
                    "2": "function_pointer"
                },
                "uVar2": {
                    "1": "counter",
                    "14": "index",
                    "2": "iteration_count",
                    "3": "iterator",
                    "5": "i"
                }
            },
            "called": [
                "FUN_0800307a"
            ],
            "calling": [
                "FUN_08002df6"
            ],
            "code": "\nvoid decode_and_process_data_080031ce(undefined4 *data_ptr,undefined4 param_2,undefined4 param_3,uint data_size,int offset\n                 )\n\n{\n  undefined4 *function_ptr;\n  uint index;\n  \n  function_ptr = (undefined4 *)*data_ptr;\n  if (function_ptr != (undefined4 *)0x0) {\n    (**(code **)*function_ptr)(function_ptr,0xf0,param_3,*(code **)*function_ptr,data_size);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,0x79);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,param_2);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,param_3);\n    for (index = 0; index < data_size; index = index + 1) {\n      decode_data_0800307a(data_ptr,1,offset + index,0);\n    }\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,0xf7);\n  }\n  return;\n}\n\n",
            "current_name": "decode_and_process_data_080031ce",
            "entrypoint": "0x080031ce",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080031ce": "decode_and_process_data_080031ce",
                "param_1": "data_ptr",
                "param_4": "data_size",
                "param_5": "offset",
                "puVar1": "function_ptr",
                "uVar2": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800322c": {
            "additional_data": {
                "*param_1": {
                    "1": "current_operation",
                    "2": "func_ptr_value"
                },
                "0x0": {
                    "1": "null"
                },
                "FUN_0800322c": {
                    "1": "execute_function_with_params",
                    "2": "execute_three_operations",
                    "20": "execute_function",
                    "4": "execute_operations"
                },
                "param_1": {
                    "1": "command_array",
                    "10": "function_pointer",
                    "12": "function_ptr",
                    "2": "operation_list",
                    "3": "operations"
                },
                "param_2": {
                    "1": "parameter_2",
                    "2": "parameter_1",
                    "3": "arg_1",
                    "9": "param_2"
                },
                "param_3": {
                    "1": "value2",
                    "2": "value_3",
                    "3": "arg2",
                    "9": "param_3"
                },
                "puVar1": {
                    "1": "pointer_value",
                    "2": "ptr_to_function",
                    "3": "function",
                    "4": "operation_ptr"
                },
                "puVar1_pointed_value": {
                    "1": "function_pointer_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002ddc"
            ],
            "code": "\nvoid execute_function_0800322c(undefined4 *function_ptr,undefined4 param_2,undefined4 param_3)\n\n{\n  undefined4 *operation_ptr;\n  \n  operation_ptr = (undefined4 *)*function_ptr;\n  if (operation_ptr != (undefined4 *)0x0) {\n    (**(code **)*operation_ptr)(operation_ptr,0xf9);\n    (***(code ***)(undefined4 *)*function_ptr)((undefined4 *)*function_ptr,param_2);\n    (***(code ***)(undefined4 *)*function_ptr)((undefined4 *)*function_ptr,param_3);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "execute_function_0800322c",
            "entrypoint": "0x0800322c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800322c": "execute_function_0800322c",
                "param_1": "function_ptr",
                "puVar1": "operation_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800325a": {
            "additional_data": {
                "FUN_0800325a": {
                    "1": "process_data",
                    "2": "decode_and_execute",
                    "28": "decode_and_process_data"
                },
                "param_1": {
                    "1": "func_ptr",
                    "2": "function_ptr",
                    "23": "data_ptr",
                    "3": "data_pointer"
                },
                "param_2": {
                    "1": "func_param",
                    "2": "data",
                    "3": "param",
                    "4": "param_2",
                    "8": "value"
                },
                "param_3": {
                    "1": "num",
                    "11": "num_iterations",
                    "2": "length",
                    "3": "data_count",
                    "5": "num_elements"
                },
                "param_4": {
                    "1": "data_offset",
                    "2": "base_offset",
                    "22": "offset",
                    "3": "start_index"
                },
                "puVar1": {
                    "1": "function_ptr_address",
                    "17": "function_ptr",
                    "3": "function_pointer",
                    "6": "func_ptr"
                },
                "uVar2": {
                    "1": "iteration_index",
                    "11": "i",
                    "4": "iteration_counter",
                    "5": "iteration_count",
                    "9": "index"
                }
            },
            "called": [
                "FUN_0800307a"
            ],
            "calling": [
                "FUN_08002f0a",
                "FUN_080032a2"
            ],
            "code": "\nvoid decode_and_process_data_0800325a(undefined4 *data_ptr,undefined4 value,uint num_iterations,int offset)\n\n{\n  undefined4 *function_ptr;\n  uint i;\n  \n  function_ptr = (undefined4 *)*data_ptr;\n  if (function_ptr != (undefined4 *)0x0) {\n    (**(code **)*function_ptr)(function_ptr,0xf0);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,value);\n    for (i = 0; i < num_iterations; i = i + 1) {\n      decode_data_0800307a(data_ptr,1,offset + i,0);\n    }\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,0xf7);\n  }\n  return;\n}\n\n",
            "current_name": "decode_and_process_data_0800325a",
            "entrypoint": "0x0800325a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800325a": "decode_and_process_data_0800325a",
                "param_1": "data_ptr",
                "param_2": "value",
                "param_3": "num_iterations",
                "param_4": "offset",
                "puVar1": "function_ptr",
                "uVar2": "i"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080032a2": {
            "additional_data": {
                "FUN_080032a2": {
                    "1": "decode_and_process_data",
                    "2": "process_and_decode_data",
                    "24": "process_data"
                },
                "decode_and_process_data_0800325a": {
                    "14": "decode_and_process_data",
                    "4": "decode_and_process"
                },
                "find_end_of_string_08000178": {
                    "1": "find_string_end",
                    "17": "find_end_of_string"
                },
                "param_1": {
                    "1": "output_buffer",
                    "2": "data_1",
                    "3": "data1",
                    "4": "arg1",
                    "6": "input_param"
                },
                "param_2": {
                    "1": "source_param",
                    "2": "data_2",
                    "3": "data2",
                    "4": "arg2",
                    "5": "string_param",
                    "6": "string"
                },
                "param_3": {
                    "1": "param_3",
                    "2": "unused_parameter",
                    "3": "unused_param"
                },
                "param_4": {
                    "1": "output_arg",
                    "2": "data_param",
                    "3": "data4",
                    "4": "output"
                },
                "uVar1": {
                    "1": "end_of_string_offset",
                    "26": "end_of_string"
                }
            },
            "called": [
                "FUN_0800325a",
                "FUN_08000178"
            ],
            "calling": [
                "FUN_08002f14"
            ],
            "code": "\nvoid process_data_080032a2(undefined4 input_param,undefined4 string,undefined4 unused,undefined4 output_param)\n\n{\n  undefined4 end_of_string;\n  \n  end_of_string = find_end_of_string(string);\n  decode_and_process_data_080032a2(input_param,0x71,end_of_string,string,output_param);\n  return;\n}\n\n",
            "current_name": "process_data_080032a2",
            "entrypoint": "0x080032a2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080032a2": "process_data_080032a2",
                "decode_and_process_data_0800325a": "decode_and_process_data",
                "find_end_of_string_08000178": "find_end_of_string",
                "param_1": "input_param",
                "param_2": "string",
                "param_3": "unused",
                "param_4": "output_param",
                "uVar1": "end_of_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080032bc": {
            "additional_data": {
                "(bool *)param_1": {
                    "1": "data_structure.is_value_zero"
                },
                "(bool)param_1": {
                    "1": "(bool)data_pointer"
                },
                "(param_2 == 0)": {
                    "1": "param_value_is_zero"
                },
                "*(bool *)dataBlock": {
                    "1": "is_zero"
                },
                "*(bool *)param_1": {
                    "1": "data_struct_ptr->is_zero",
                    "2": "is_param_value_zero",
                    "3": "is_value_zero"
                },
                "*(int *)(param_1 + 4)": {
                    "1": "set_param_value"
                },
                "*(undefined *)(param_1 + 0x14)": {
                    "1": "data.field4"
                },
                "*(undefined *)(param_1 + 0xc)": {
                    "1": "variable1",
                    "2": "data_structure.field1"
                },
                "*(undefined *)(param_1 + 0xd)": {
                    "1": "data.field2",
                    "2": "data_structure.field2"
                },
                "*(undefined *)(param_1 + 12)": {
                    "1": "flag1"
                },
                "*(undefined *)(param_1 + 13)": {
                    "1": "flag2"
                },
                "*(undefined4 *)(param_1 + 0x10)": {
                    "1": "data.field3"
                },
                "*(undefined4 *)(param_1 + 0x18)": {
                    "1": "data.field5"
                },
                "*(undefined4 *)(param_1 + 0x1c)": {
                    "1": "data_structure.field6"
                },
                "*(undefined4 *)(param_1 + 0x20)": {
                    "1": "initialize0x20"
                },
                "*(undefined4 *)(param_1 + 0x24)": {
                    "1": "data_structure.field8"
                },
                "*(undefined4 *)(param_1 + 0x28)": {
                    "1": "data.field9"
                },
                "*(undefined4 *)(param_1 + 0x2c)": {
                    "1": "data_field12"
                },
                "*(undefined4 *)(param_1 + 0x30)": {
                    "1": "data_structure.field11"
                },
                "*(undefined4 *)(param_1 + 0x34)": {
                    "1": "data_field14"
                },
                "*(undefined4 *)(param_1 + 0x38)": {
                    "1": "data.field13"
                },
                "*(undefined4 *)(param_1 + 0x3c)": {
                    "1": "data_structure.field14"
                },
                "*(undefined4 *)(param_1 + 0x40)": {
                    "1": "data_structure.field15"
                },
                "*(undefined4 *)(param_1 + 0x44)": {
                    "1": "data.field16"
                },
                "*(undefined4 *)(param_1 + 0x48)": {
                    "1": "data_field19"
                },
                "*(undefined4 *)(param_1 + 0x4c)": {
                    "1": "data_field20"
                },
                "*(undefined4 *)(param_1 + 0x50)": {
                    "1": "initialize0x50"
                },
                "*(undefined4 *)(param_1 + 0x54)": {
                    "1": "data_field22"
                },
                "*(undefined4 *)(param_1 + 0x58)": {
                    "1": "initialize0x58"
                },
                "*(undefined4 *)(param_1 + 0x5c)": {
                    "1": "initialize0x5c"
                },
                "*(undefined4 *)(param_1 + 0x60)": {
                    "1": "initialize0x60"
                },
                "*(undefined4 *)(param_1 + 0x68)": {
                    "1": "data_structure.field25"
                },
                "*(undefined4 *)(param_1 + 0x6c)": {
                    "1": "data.field26"
                },
                "*(undefined4 *)(param_1 + 0x70)": {
                    "1": "data_field29"
                },
                "*(undefined4 *)(param_1 + 0x74)": {
                    "1": "data_field30"
                },
                "*(undefined4 *)(param_1 + 0x78)": {
                    "1": "initialize0x78"
                },
                "*(undefined4 *)(param_1 + 100)": {
                    "1": "data_structure.field24"
                },
                "*(undefined4 *)(param_1 + 8)": {
                    "1": "data_structure.initial_value"
                },
                "...": {
                    "1": "..."
                },
                "FUN_080032bc": {
                    "1": "initialize_function",
                    "2": "initialize_data_struct",
                    "5": "initialize_parameters",
                    "6": "initialize_params",
                    "7": "initialize_data"
                },
                "dataBlock + 0x10": {
                    "1": "undef_address2"
                },
                "dataBlock + 0x14": {
                    "1": "undef3"
                },
                "dataBlock + 0x18": {
                    "1": "undef_address3"
                },
                "dataBlock + 0x1c": {
                    "1": "undef_address4"
                },
                "dataBlock + 0x20": {
                    "1": "undef_address5"
                },
                "dataBlock + 0x24": {
                    "1": "undef_address6"
                },
                "dataBlock + 0x28": {
                    "1": "undef_address7"
                },
                "dataBlock + 0x2c": {
                    "1": "undef_address8"
                },
                "dataBlock + 0x30": {
                    "1": "undef_address9"
                },
                "dataBlock + 0x34": {
                    "1": "undef_address10"
                },
                "dataBlock + 0x38": {
                    "1": "undef_address11"
                },
                "dataBlock + 0x3c": {
                    "1": "undef_address12"
                },
                "dataBlock + 0x40": {
                    "1": "undef_address13"
                },
                "dataBlock + 0x44": {
                    "1": "undef_address14"
                },
                "dataBlock + 0x48": {
                    "1": "undef_address15"
                },
                "dataBlock + 0x4c": {
                    "1": "undef_address16"
                },
                "dataBlock + 0x50": {
                    "1": "undef_address17"
                },
                "dataBlock + 0x54": {
                    "1": "undef_address18"
                },
                "dataBlock + 0x58": {
                    "1": "undef_address19"
                },
                "dataBlock + 0x5c": {
                    "1": "undef_address20"
                },
                "dataBlock + 0x60": {
                    "1": "undef_address21"
                },
                "dataBlock + 0x68": {
                    "1": "undef_address22"
                },
                "dataBlock + 0x6c": {
                    "1": "undef_address23"
                },
                "dataBlock + 0x70": {
                    "1": "undef_address24"
                },
                "dataBlock + 0x74": {
                    "1": "undef_address25"
                },
                "dataBlock + 0x78": {
                    "1": "undef_address26"
                },
                "dataBlock + 0xc": {
                    "1": "undef1"
                },
                "dataBlock + 0xd": {
                    "1": "undef2"
                },
                "dataBlock + 4": {
                    "1": "data_block_address"
                },
                "dataBlock + 8": {
                    "1": "undef_address1"
                },
                "paramBuffer": {
                    "1": "buffer"
                },
                "paramData": {
                    "1": "data"
                },
                "paramValue": {
                    "1": "value"
                },
                "param_1": {
                    "1": "memory_address",
                    "2": "data_address",
                    "5": "data_structure"
                },
                "param_1 + 0x10": {
                    "1": "param_buffer+0x10"
                },
                "param_1 + 0x14": {
                    "1": "data_structure.field4"
                },
                "param_1 + 0x18": {
                    "1": "data_field7"
                },
                "param_1 + 0x1c": {
                    "1": "data_structure.field6"
                },
                "param_1 + 0x20": {
                    "1": "var7_index"
                },
                "param_1 + 0x24": {
                    "1": "var8_index"
                },
                "param_1 + 0x28": {
                    "1": "data_structure.field9"
                },
                "param_1 + 0x2c": {
                    "1": "data_struct_ptr->value11"
                },
                "param_1 + 0x30": {
                    "1": "data_struct_ptr->value12"
                },
                "param_1 + 0x34": {
                    "1": "param_buffer+0x34"
                },
                "param_1 + 0x38": {
                    "1": "data_struct.unknown13"
                },
                "param_1 + 0x3c": {
                    "1": "var14_index"
                },
                "param_1 + 0x40": {
                    "1": "data_field17"
                },
                "param_1 + 0x44": {
                    "1": "data_struct_ptr->value17"
                },
                "param_1 + 0x48": {
                    "1": "data_struct_ptr->value18"
                },
                "param_1 + 0x4c": {
                    "1": "data_field20"
                },
                "param_1 + 0x50": {
                    "1": "param_buffer+0x50"
                },
                "param_1 + 0x54": {
                    "1": "data_struct_ptr->value21"
                },
                "param_1 + 0x58": {
                    "1": "data_structure.field21"
                },
                "param_1 + 0x5c": {
                    "1": "data_struct.unknown22"
                },
                "param_1 + 0x60": {
                    "1": "data_field25"
                },
                "param_1 + 0x68": {
                    "1": "data_structure.field25"
                },
                "param_1 + 0x6c": {
                    "1": "data_field28"
                },
                "param_1 + 0x70": {
                    "1": "data_field29"
                },
                "param_1 + 0x74": {
                    "1": "data_struct_ptr->value29"
                },
                "param_1 + 0x78": {
                    "1": "var29_index"
                },
                "param_1 + 0xc": {
                    "1": "data_struct.unknown1"
                },
                "param_1 + 0xd": {
                    "1": "data_structure.field2"
                },
                "param_1 + 100": {
                    "1": "data_struct_ptr->value25"
                },
                "param_1 + 4": {
                    "1": "param_buffer+4"
                },
                "param_1 + 8": {
                    "1": "data_struct.param"
                },
                "param_2": {
                    "1": "value_a",
                    "16": "value",
                    "2": "value1",
                    "3": "param2",
                    "8": "param_value"
                },
                "param_2 == 0": {
                    "1": "param_value_is_zero"
                },
                "param_3": {
                    "1": "additional_value",
                    "2": "default_value",
                    "3": "param_data",
                    "5": "param3"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002ce0"
            ],
            "code": "\nvoid initialize_data_080032bc(int data_structure,int value,undefined4 param3)\n\n{\n  *(int *)(data_structure + 4) = value;\n  *(undefined4 *)(data_structure + 8) = param3;\n  *(undefined *)(data_structure + 0xc) = 0;\n  *(undefined *)(data_structure + 0xd) = 0;\n  *(undefined4 *)(data_structure + 0x10) = 0;\n  *(undefined *)(data_structure + 0x14) = 0;\n  *(undefined4 *)(data_structure + 0x18) = 0;\n  *(undefined4 *)(data_structure + 0x1c) = 0;\n  *(undefined4 *)(data_structure + 0x20) = 0;\n  *(undefined4 *)(data_structure + 0x24) = 0;\n  *(undefined4 *)(data_structure + 0x28) = 0;\n  *(undefined4 *)(data_structure + 0x2c) = 0;\n  *(undefined4 *)(data_structure + 0x30) = 0;\n  *(undefined4 *)(data_structure + 0x34) = 0;\n  *(undefined4 *)(data_structure + 0x38) = 0;\n  *(undefined4 *)(data_structure + 0x3c) = 0;\n  *(undefined4 *)(data_structure + 0x40) = 0;\n  *(undefined4 *)(data_structure + 0x44) = 0;\n  *(undefined4 *)(data_structure + 0x48) = 0;\n  *(undefined4 *)(data_structure + 0x4c) = 0;\n  *(undefined4 *)(data_structure + 0x50) = 0;\n  *(undefined4 *)(data_structure + 0x54) = 0;\n  *(undefined4 *)(data_structure + 0x58) = 0;\n  *(undefined4 *)(data_structure + 0x5c) = 0;\n  *(undefined4 *)(data_structure + 0x60) = 0;\n  *(undefined4 *)(data_structure + 100) = 0;\n  *(undefined4 *)(data_structure + 0x68) = 0;\n  *(undefined4 *)(data_structure + 0x6c) = 0;\n  *(undefined4 *)(data_structure + 0x70) = 0;\n  *(undefined4 *)(data_structure + 0x74) = 0;\n  *(undefined4 *)(data_structure + 0x78) = 0;\n  *(bool *)data_structure = value == 0;\n  return;\n}\n\n",
            "current_name": "initialize_data_080032bc",
            "entrypoint": "0x080032bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080032bc": "initialize_data_080032bc",
                "param_1": "data_structure",
                "param_2": "value",
                "param_3": "param3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003306": {
            "additional_data": {
                "0x90": {
                    "1": "register_b1"
                },
                "0xc0": {
                    "1": "register_b2"
                },
                "0xd0": {
                    "1": "register_a1"
                },
                "0xe0": {
                    "1": "register_a4"
                },
                "0xf4": {
                    "1": "register_a2"
                },
                "0xf5": {
                    "1": "register_a3"
                },
                "FUN_08003306": {
                    "1": "update_register_values",
                    "2": "set_memory_values",
                    "4": "update_data",
                    "5": "update_params",
                    "6": "update_parameters"
                },
                "param_1": {
                    "1": "data_address",
                    "10": "base_address",
                    "2": "obj_address",
                    "6": "object_address"
                },
                "param_2": {
                    "1": "config_code",
                    "10": "param_value",
                    "11": "value",
                    "3": "parameter_value"
                },
                "param_3": {
                    "1": "first_parameter",
                    "17": "new_value1",
                    "2": "new_param1",
                    "4": "value1"
                },
                "param_4": {
                    "1": "second_parameter",
                    "17": "new_value2",
                    "2": "new_param2",
                    "4": "value2"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002ce0"
            ],
            "code": "\nvoid update_parameters_08003306(int base_address,uint value,undefined4 new_value1,undefined4 new_value2)\n\n{\n  if (value == 0xd0) {\n    *(undefined4 *)(base_address + 0x58) = new_value1;\n    *(undefined4 *)(base_address + 0x28) = new_value2;\n    return;\n  }\n  if (0xd0 < value) {\n    if (value == 0xf4) {\n      *(undefined4 *)(base_address + 0x5c) = new_value1;\n      *(undefined4 *)(base_address + 0x2c) = new_value2;\n      return;\n    }\n    if (value == 0xf5) {\n      *(undefined4 *)(base_address + 0x60) = new_value1;\n      *(undefined4 *)(base_address + 0x30) = new_value2;\n    }\n    else if (value == 0xe0) {\n      *(undefined4 *)(base_address + 0x4c) = new_value1;\n      *(undefined4 *)(base_address + 0x1c) = new_value2;\n      return;\n    }\n    return;\n  }\n  if (value == 0x90) {\n    *(undefined4 *)(base_address + 0x50) = new_value1;\n    *(undefined4 *)(base_address + 0x20) = new_value2;\n    return;\n  }\n  if (value == 0xc0) {\n    *(undefined4 *)(base_address + 0x54) = new_value1;\n    *(undefined4 *)(base_address + 0x24) = new_value2;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "update_parameters_08003306",
            "entrypoint": "0x08003306",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003306": "update_parameters_08003306",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "new_value1",
                "param_4": "new_value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003346": {
            "additional_data": {
                "FUN_08003346": {
                    "1": "update_variables",
                    "2": "update_values",
                    "4": "update_params",
                    "7": "update_parameters",
                    "8": "update_data"
                },
                "condition": {
                    "1": "is_condition_met"
                },
                "objectAddress": {
                    "1": "self"
                },
                "param_1": {
                    "1": "base_addr",
                    "2": "object_ptr",
                    "5": "data_address",
                    "8": "base_address",
                    "9": "object_address"
                },
                "param_2": {
                    "1": "key",
                    "16": "value",
                    "2": "param_value",
                    "3": "value_to_check",
                    "7": "condition"
                },
                "param_3": {
                    "1": "updated_value1",
                    "16": "new_value1",
                    "2": "new_param3",
                    "3": "new_data",
                    "4": "value1"
                },
                "param_4": {
                    "1": "info",
                    "16": "new_value2",
                    "2": "new_param4",
                    "4": "value2"
                },
                "param_5": {
                    "1": "new_value3"
                },
                "param_6": {
                    "1": "parameter4"
                },
                "param_7": {
                    "1": "address"
                },
                "value1": {
                    "1": "new_value1"
                },
                "value2": {
                    "1": "new_value2"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002ce0"
            ],
            "code": "\nvoid update_data_08003346(int object_address,int value,undefined4 new_value1,undefined4 new_value2)\n\n{\n  if (value == 0x79) {\n    *(undefined4 *)(object_address + 0x70) = new_value1;\n    *(undefined4 *)(object_address + 0x34) = new_value2;\n  }\n  return;\n}\n\n",
            "current_name": "update_data_08003346",
            "entrypoint": "0x08003346",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003346": "update_data_08003346",
                "param_1": "object_address",
                "param_2": "value",
                "param_3": "new_value1",
                "param_4": "new_value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003350": {
            "additional_data": {
                "*(undefined4 *)(param_1 + 0x38)": {
                    "1": "object_attribute2"
                },
                "*(undefined4 *)(param_1 + 0x48)": {
                    "1": "data.value_4"
                },
                "*(undefined4 *)(param_1 + 0x74)": {
                    "1": "data.value_1"
                },
                "*(undefined4 *)(param_1 + 0x78)": {
                    "1": "data.value_3"
                },
                "0xf9": {
                    "1": "flag_a"
                },
                "0xff": {
                    "1": "flag_b"
                },
                "FUN_08003350": {
                    "1": "set_values_based_on_param",
                    "2": "update_configuration",
                    "3": "update_values",
                    "5": "update_data",
                    "8": "update_parameters",
                    "9": "update_params"
                },
                "param_1": {
                    "1": "data_address",
                    "10": "base_address",
                    "2": "obj_addr",
                    "3": "obj_address",
                    "6": "object_address"
                },
                "param_2": {
                    "1": "status",
                    "15": "value",
                    "2": "condition",
                    "7": "flag"
                },
                "param_3": {
                    "1": "new_value_1",
                    "17": "new_value1",
                    "6": "value1"
                },
                "param_4": {
                    "1": "param2_value",
                    "17": "new_value2",
                    "6": "value2"
                },
                "param_5": {
                    "1": "extra_parameter",
                    "2": "new_value3"
                },
                "param_6": {
                    "1": "val4",
                    "2": "new_value4"
                },
                "param_7": {
                    "1": "new_value5"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002ce0"
            ],
            "code": "\nvoid update_params_08003350(int base_address,int value,undefined4 new_value1,undefined4 new_value2)\n\n{\n  if (value == 0xf9) {\n    *(undefined4 *)(base_address + 0x74) = new_value1;\n    *(undefined4 *)(base_address + 0x38) = new_value2;\n    return;\n  }\n  if (value != 0xff) {\n    return;\n  }\n  *(undefined4 *)(base_address + 0x78) = new_value1;\n  *(undefined4 *)(base_address + 0x48) = new_value2;\n  return;\n}\n\n",
            "current_name": "update_params_08003350",
            "entrypoint": "0x08003350",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003350": "update_params_08003350",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "new_value1",
                "param_4": "new_value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003366": {
            "additional_data": {
                "FUN_08003366": {
                    "1": "update_values_if_condition_met",
                    "5": "update_values",
                    "8": "update_parameters",
                    "9": "update_params"
                },
                "original_variable_name_1": {
                    "1": "value_pointer"
                },
                "original_variable_name_2": {
                    "1": "address_offset"
                },
                "param_1": {
                    "1": "obj_ptr",
                    "3": "obj_address",
                    "5": "data_address",
                    "8": "base_address"
                },
                "param_1 + 0x40": {
                    "1": "address_to_update2"
                },
                "param_1 + 0x68": {
                    "1": "address_to_update1"
                },
                "param_2": {
                    "1": "input_code",
                    "15": "value",
                    "2": "value_to_compare",
                    "4": "input_value",
                    "5": "condition"
                },
                "param_3": {
                    "1": "new_data",
                    "19": "new_value1",
                    "5": "new_param1"
                },
                "param_4": {
                    "1": "new_data",
                    "19": "new_value2",
                    "5": "new_param2"
                },
                "param_5": {
                    "1": "new_value3"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002ce0"
            ],
            "code": "\nvoid update_params_08003366(int base_address,int value,undefined4 new_value1,undefined4 new_value2)\n\n{\n  if (value == 0x71) {\n    *(undefined4 *)(base_address + 0x68) = new_value1;\n    *(undefined4 *)(base_address + 0x40) = new_value2;\n  }\n  return;\n}\n\n",
            "current_name": "update_params_08003366",
            "entrypoint": "0x08003366",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003366": "update_params_08003366",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "new_value1",
                "param_4": "new_value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003370": {
            "additional_data": {
                "FUN_08003370": {
                    "1": "update_data",
                    "18": "set_parameters",
                    "2": "set_param_values",
                    "4": "update_parameters"
                },
                "param_1": {
                    "1": "object_ptr",
                    "10": "base_address",
                    "11": "object_address",
                    "2": "data",
                    "3": "object"
                },
                "param_2": {
                    "1": "param_2",
                    "2": "unused",
                    "3": "unused_parameter",
                    "7": "unused_param"
                },
                "param_3": {
                    "1": "param_value_1",
                    "11": "value1",
                    "2": "param_value1",
                    "3": "new_value1",
                    "5": "parameter1"
                },
                "param_4": {
                    "1": "parameter_value2",
                    "11": "value2",
                    "2": "param4_value",
                    "3": "new_value2",
                    "5": "parameter2"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002ce0"
            ],
            "code": "\nvoid set_parameters_08003370(int object_address,undefined4 unused_param,undefined4 value1,undefined4 value2)\n\n{\n  *(undefined4 *)(object_address + 0x6c) = value1;\n  *(undefined4 *)(object_address + 0x44) = value2;\n  return;\n}\n\n",
            "current_name": "set_parameters_08003370",
            "entrypoint": "0x08003370",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003370": "set_parameters_08003370",
                "param_1": "object_address",
                "param_2": "unused_param",
                "param_3": "value1",
                "param_4": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003376": {
            "additional_data": {
                "*(code **)(param_1 + 100)": {
                    "1": "callback_func",
                    "2": "function_pointer",
                    "4": "callback"
                },
                "*(code **)(param_1 + 100))(*(undefined4 *)(param_1 + 0x3c))": {
                    "1": "callback_function"
                },
                "*(int *)(param_1 + 4)": {
                    "1": "data_address"
                },
                "*(uint *)(param_1 + 8)": {
                    "1": "size_of_memory",
                    "2": "data_length"
                },
                "*(undefined *)(*(int *)(param_1 + 4) + param_3)": {
                    "1": "target"
                },
                "*(undefined4 *)(param_1 + 0x3c)": {
                    "1": "param",
                    "2": "argument"
                },
                "*param_1": {
                    "1": "success",
                    "3": "flag"
                },
                "FUN_08003376": {
                    "1": "store_byte",
                    "11": "update_data",
                    "2": "update_parameter",
                    "7": "update_memory"
                },
                "bVar1": {
                    "1": "need_update",
                    "2": "is_updated",
                    "3": "is_valid_index",
                    "5": "is_index_valid"
                },
                "code": {
                    "1": "callback_function",
                    "3": "function_pointer"
                },
                "param_1": {
                    "1": "memory_ptr",
                    "13": "data",
                    "2": "memory_buffer",
                    "4": "data_struct",
                    "5": "memory"
                },
                "param_1 + 0x3c": {
                    "1": "function_arg"
                },
                "param_2": {
                    "1": "byte_value",
                    "13": "value",
                    "2": "new_data"
                },
                "param_3": {
                    "1": "offset",
                    "24": "index",
                    "3": "address"
                }
            },
            "called": [],
            "calling": [
                "FUN_080033cc",
                "FUN_08003474"
            ],
            "code": "\nvoid update_data_08003376(undefined *data,undefined new_value,uint index)\n\n{\n  bool is_out_of_bounds;\n  \n  if (index < *(uint *)(data + 8)) {\n    is_out_of_bounds = false;\n  }\n  else {\n    is_out_of_bounds = true;\n    if (*(function_pointer **)(data + 100) != (function_pointer *)0x0) {\n      *data = 1;\n      (**(function_pointer **)(data + 100))(*(undefined4 *)(data + 0x3c));\n      if (index < *(uint *)(data + 8)) {\n        is_out_of_bounds = false;\n      }\n      else {\n        is_out_of_bounds = true;\n      }\n    }\n  }\n  if (!is_out_of_bounds) {\n    *(undefined *)(*(int *)(data + 4) + index) = new_value;\n  }\n  return;\n}\n\n",
            "current_name": "update_data_08003376",
            "entrypoint": "0x08003376",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003376": "update_data_08003376",
                "bVar1": "is_out_of_bounds",
                "code": "function_pointer",
                "param_1": "data",
                "param_2": "new_value",
                "param_3": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080033a8": {
            "additional_data": {
                "\tiVar2": {
                    "1": "new_index"
                },
                "FUN_080033a8": {
                    "1": "convert_and_shift",
                    "15": "copy_and_shift_bits",
                    "2": "copy_bytes_with_shift",
                    "7": "copy_and_shift_bytes"
                },
                "bVar1": {
                    "1": "byte_val",
                    "2": "src_byte",
                    "20": "current_byte",
                    "5": "byte_value"
                },
                "iVar2": {
                    "1": "index",
                    "18": "dest_index",
                    "3": "dst_index",
                    "4": "destination_index"
                },
                "param_1": {
                    "1": "src_param",
                    "2": "src",
                    "3": "dest",
                    "4": "undefined"
                },
                "param_2": {
                    "1": "src_size",
                    "2": "byte_count",
                    "3": "array_length",
                    "6": "length",
                    "7": "num_bytes",
                    "8": "size"
                },
                "param_3": {
                    "1": "buffer_pointer",
                    "2": "src",
                    "3": "dest"
                },
                "uVar3": {
                    "1": "current_index",
                    "13": "src_index",
                    "2": "i",
                    "3": "index",
                    "8": "source_index"
                }
            },
            "called": [],
            "calling": [
                "FUN_080033cc"
            ],
            "code": "\nvoid copy_and_shift_bits_080033a8(undefined4 undefined,uint size,int destination)\n\n{\n  byte current_byte;\n  int dest_index;\n  uint src_index;\n  \n  dest_index = 0;\n  for (src_index = 0; src_index < size; src_index = src_index + 2) {\n    current_byte = *(byte *)(destination + src_index);\n    *(byte *)(destination + dest_index) = current_byte;\n    *(byte *)(destination + dest_index) = *(char *)(destination + src_index + 1) << 7 | current_byte;\n    dest_index = dest_index + 1;\n  }\n  return;\n}\n\n",
            "current_name": "copy_and_shift_bits_080033a8",
            "entrypoint": "0x080033a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080033a8": "copy_and_shift_bits_080033a8",
                "bVar1": "current_byte",
                "iVar2": "dest_index",
                "param_1": "undefined",
                "param_2": "size",
                "param_3": "destination",
                "uVar3": "src_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080033cc": {
            "additional_data": {
                "*(code **)(param_1 + 0x34)": {
                    "1": "param2_2"
                },
                "*(code **)(param_1 + 0x68)": {
                    "1": "func_ptr1"
                },
                "*(code **)(param_1 + 0x6c)": {
                    "1": "callback_func3"
                },
                "*(code **)(param_1 + 0x70)": {
                    "1": "func_ptr2"
                },
                "*(int *)(param_1 + 0x18)": {
                    "2": "length"
                },
                "*(int *)(param_1 + 0x4)": {
                    "1": "var5"
                },
                "*(int *)(param_1 + 0x40)": {
                    "1": "param1_2"
                },
                "*(int *)(param_1 + 0x44)": {
                    "1": "param1_3"
                },
                "*(int *)(param_1 + 0x68)": {
                    "1": "ptr1"
                },
                "*(int *)(param_1 + 0x6c)": {
                    "1": "func_ptr3"
                },
                "*(int *)(param_1 + 0x70)": {
                    "1": "callback_func2"
                },
                "*(int *)(param_1 + 4)": {
                    "1": "var4"
                },
                "*(uint *)(param_1 + 0x18)": {
                    "1": "uint_length"
                },
                "*(uint *)(param_1 + 0x70)": {
                    "1": "ptr2"
                },
                "*(undefined4 *)(param_1 + 0x34)": {
                    "1": "arg2"
                },
                "*(undefined4 *)(param_1 + 0x40)": {
                    "1": "arg1"
                },
                "*(undefined4 *)(param_1 + 0x44)": {
                    "1": "arg3"
                },
                "FUN_080033cc": {
                    "1": "process_input_character",
                    "12": "process_input",
                    "17": "process_data"
                },
                "cVar1": {
                    "1": "input_char",
                    "2": "first_character",
                    "28": "first_char"
                },
                "code": {
                    "2": "function_ptr"
                },
                "copy_and_shift_bits_080033a8": {
                    "1": "copy_shift_bits",
                    "4": "copy_and_shift_bits"
                },
                "iVar2": {
                    "1": "copy_result",
                    "2": "copy_length",
                    "21": "result",
                    "3": "shifted_bits"
                },
                "param_1": {
                    "1": "input_pointer",
                    "13": "data",
                    "2": "data_ptr",
                    "9": "input_data"
                },
                "param_2": {
                    "1": "arg2",
                    "13": "param2",
                    "3": "param_2",
                    "7": "arg1"
                },
                "param_3": {
                    "1": "var2",
                    "13": "param3",
                    "3": "param_3",
                    "7": "arg2"
                },
                "param_4": {
                    "1": "arg_4",
                    "13": "param4",
                    "3": "param_4",
                    "7": "arg3"
                },
                "pcVar3": {
                    "1": "input_char_ptr",
                    "2": "string_ptr",
                    "3": "input_string",
                    "4": "input_ptr",
                    "7": "char_pointer"
                },
                "update_data_08003376": {
                    "5": "update_data"
                }
            },
            "called": [
                "FUN_08003376",
                "FUN_080033a8"
            ],
            "calling": [
                "FUN_08003474"
            ],
            "code": "\nvoid process_data_080033cc(int data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  char first_char;\n  int result;\n  char *char_pointer;\n  \n  char_pointer = *(char **)(data + 4);\n  first_char = *char_pointer;\n  if (first_char == 'q') {\n    if (*(int *)(data + 0x68) != 0) {\n      result = copy_and_shift_bits(data,*(int *)(data + 0x18) + -1,char_pointer + 1,char_pointer,param4);\n      update_data(data,0,result + 1);\n      (**(function_ptr **)(data + 0x68))(*(undefined4 *)(data + 0x40),*(int *)(data + 4) + 1);\n      return;\n    }\n  }\n  else if (first_char == 'y') {\n    if (*(function_ptr **)(data + 0x70) != (function_ptr *)0x0) {\n      if (*(uint *)(data + 0x18) < 3) {\n        (**(function_ptr **)(data + 0x70))(*(undefined4 *)(data + 0x34),0,0);\n        return;\n      }\n      result = copy_and_shift_bits(data,*(uint *)(data + 0x18) - 3,char_pointer + 3,char_pointer,param4);\n      update_data(data,0,result + 3);\n      result = *(int *)(data + 4);\n      (**(function_ptr **)(data + 0x70))\n                (*(undefined4 *)(data + 0x34),*(undefined *)(result + 1),*(undefined *)(result + 2)\n                 ,result + 3);\n      return;\n    }\n  }\n  else if (*(function_ptr **)(data + 0x6c) != (function_ptr *)0x0) {\n    (**(function_ptr **)(data + 0x6c))\n              (*(undefined4 *)(data + 0x44),first_char,*(int *)(data + 0x18) + -1,char_pointer + 1);\n  }\n  return;\n}\n\n",
            "current_name": "process_data_080033cc",
            "entrypoint": "0x080033cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080033cc": "process_data_080033cc",
                "cVar1": "first_char",
                "code": "function_ptr",
                "copy_and_shift_bits_080033a8": "copy_and_shift_bits",
                "iVar2": "result",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "pcVar3": "char_pointer",
                "update_data_08003376": "update_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800344a": {
            "additional_data": {
                "(*(code **)(param_1 + 0x78))(*(undefined4 *)(param_1 + 0x48))": {
                    "2": "call_function"
                },
                "(**functionPointer)(*(undefined4 *)(param_1 + 0x48))": {
                    "1": "function_call"
                },
                "*(code **)(param_1 + 0x78)": {
                    "1": "callback_function",
                    "5": "function_pointer"
                },
                "*(uint *)(param_1 + 8)": {
                    "1": "data_structure->size",
                    "2": "size"
                },
                "*(undefined *)(*(int *)(param_1 + 4) + uVar1)": {
                    "1": "data_element",
                    "2": "memory_location",
                    "3": "array_element"
                },
                "*(undefined *)(param_1 + 0x14)": {
                    "1": "value4",
                    "2": "flag3"
                },
                "*(undefined *)(param_1 + 0xc)": {
                    "1": "value2",
                    "2": "flag1"
                },
                "*(undefined *)(param_1 + 0xd)": {
                    "1": "is_set",
                    "2": "flag2"
                },
                "*(undefined4 *)(param_1 + 0x10)": {
                    "1": "initialized_flag"
                },
                "*(undefined4 *)(param_1 + 0x18)": {
                    "1": "function_data.flag4",
                    "2": "flag4"
                },
                "*(undefined4 *)(param_1 + 0x48)": {
                    "1": "data_structure->callback_param"
                },
                "FUN_0800344a": {
                    "1": "initialize_data_struct",
                    "17": "initialize_data",
                    "2": "initialize_function",
                    "8": "initialize_memory"
                },
                "param_1": {
                    "1": "memory_pointer",
                    "2": "data_structure",
                    "3": "data_struct",
                    "5": "data_address",
                    "7": "memory_address"
                },
                "uVar1": {
                    "1": "i",
                    "26": "index",
                    "3": "counter"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003474"
            ],
            "code": "\nvoid initialize_data_0800344a(int data_pointer)\n\n{\n  uint index;\n  \n  *(undefined4 *)(data_pointer + 0x10) = 0;\n  *(undefined *)(data_pointer + 0xc) = 0;\n  *(undefined *)(data_pointer + 0xd) = 0;\n  for (index = 0; index < *(uint *)(data_pointer + 8); index = index + 1) {\n    *(undefined *)(*(int *)(data_pointer + 4) + index) = 0;\n  }\n  *(undefined *)(data_pointer + 0x14) = 0;\n  *(undefined4 *)(data_pointer + 0x18) = 0;\n  if (*(code **)(data_pointer + 0x78) != (code *)0x0) {\n    (**(code **)(data_pointer + 0x78))(*(undefined4 *)(data_pointer + 0x48));\n  }\n  return;\n}\n\n",
            "current_name": "initialize_data_0800344a",
            "entrypoint": "0x0800344a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800344a": "initialize_data_0800344a",
                "param_1": "data_pointer",
                "uVar1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003474": {
            "additional_data": {
                "(byte)param_2 & 0xf": {
                    "1": "masked_value"
                },
                "(char)param_2": {
                    "1": "char_value"
                },
                "* (char *)(param_1 + 0x14)": {
                    "1": "is_flag_set"
                },
                "* (int *)(param_1 + 0x10)": {
                    "1": "counter2"
                },
                "* (undefined4 *)(param_1 + 0x18)": {
                    "1": "counter"
                },
                "*(byte *)(param_1 + 0xd)": {
                    "1": "stored_value"
                },
                "*(undefined *)(param_1 + 0x14)": {
                    "1": "flag"
                },
                "*(undefined4 *)(param_1 + 0x10)": {
                    "1": "mode"
                },
                "**(byte **)(param_1 + 4)": {
                    "1": "byte_array"
                },
                "FUN_08003474": {
                    "1": "process_function",
                    "28": "process_data"
                },
                "bVar1": {
                    "1": "byte_val",
                    "2": "temp_byte",
                    "21": "byte_value",
                    "3": "byte_var"
                },
                "code": {
                    "1": "function_pointer"
                },
                "initialize_data_0800344a": {
                    "10": "initialize_data"
                },
                "param_1": {
                    "1": "input_param",
                    "14": "data_ptr",
                    "4": "data_pointer",
                    "9": "data"
                },
                "param_2": {
                    "1": "data_param",
                    "22": "value",
                    "5": "input_value"
                },
                "process_data_080033cc": {
                    "10": "process_data"
                },
                "update_data_08003376": {
                    "10": "update_data"
                }
            },
            "called": [
                "FUN_080033cc",
                "FUN_0800344a",
                "FUN_08003376"
            ],
            "calling": [
                "FUN_08002ed2"
            ],
            "code": "\nvoid process_data_08003474(int data_ptr,uint value)\n\n{\n  byte byte_value;\n  \n  if (*(char *)(data_ptr + 0x14) != '\\0') {\n    if (value != 0xf7) {\n      update_data(data_ptr,value,*(undefined4 *)(data_ptr + 0x18));\n      *(int *)(data_ptr + 0x18) = *(int *)(data_ptr + 0x18) + 1;\n      return;\n    }\n    *(undefined *)(data_ptr + 0x14) = 0;\n    process_data_08003474();\n    return;\n  }\n  if ((*(int *)(data_ptr + 0x10) == 0) || (0x7f < (int)value)) {\n    if ((int)value < 0xf0) {\n      *(byte *)(data_ptr + 0xd) = (byte)value & 0xf;\n      value = value & 0xf0;\n    }\n    if (value == 0xf0) {\n      *(undefined *)(data_ptr + 0x14) = 1;\n      *(undefined4 *)(data_ptr + 0x18) = 0;\n      return;\n    }\n    if (value < 0xf1) {\n      if (value != 0xc0) {\n        if (value < 0xc1) {\n          if (value != 0x90) {\n            return;\n          }\n        }\n        else {\n          if (value == 0xd0) goto LAB_0800359c;\n          if (value != 0xe0) {\n            return;\n          }\n        }\nLAB_08003586:\n        *(undefined4 *)(data_ptr + 0x10) = 2;\n        *(char *)(data_ptr + 0xc) = char_value;\n        return;\n      }\nLAB_0800359c:\n      *(undefined4 *)(data_ptr + 0x10) = 1;\n      *(char *)(data_ptr + 0xc) = char_value;\n      return;\n    }\n    if (value != 0xf9) {\n      if (0xf9 < value) {\n        if (value == 0xff) {\n          initialize_data(data_ptr);\n          return;\n        }\n        return;\n      }\n      if (1 < value - 0xf4) {\n        return;\n      }\n      goto LAB_08003586;\n    }\n    if (*(function_pointer **)(data_ptr + 0x74) != (function_pointer *)0x0) {\n      (**(function_pointer **)(data_ptr + 0x74))(*(undefined4 *)(data_ptr + 0x38));\n    }\n  }\n  else {\n    *(int *)(data_ptr + 0x10) = *(int *)(data_ptr + 0x10) + -1;\n    update_data();\n    if ((*(int *)(data_ptr + 0x10) == 0) && (byte_value = *(byte *)(data_ptr + 0xc), byte_value != 0)) {\n      if (byte_value == 0xd0) {\n        if (*(function_pointer **)(data_ptr + 0x58) != (function_pointer *)0x0) {\n          (**(function_pointer **)(data_ptr + 0x58))\n                    (*(undefined4 *)(data_ptr + 0x28),*(undefined *)(data_ptr + 0xd),\n                     **(undefined **)(data_ptr + 4));\n        }\n      }\n      else if (byte_value < 0xd1) {\n        if (byte_value == 0x90) {\n          if (*(function_pointer **)(data_ptr + 0x50) != (function_pointer *)0x0) {\n            (**(function_pointer **)(data_ptr + 0x50))\n                      (*(undefined4 *)(data_ptr + 0x20),*(undefined *)(data_ptr + 0xd),\n                       (uint)(*(byte **)(data_ptr + 4))[1] + (uint)**(byte **)(data_ptr + 4) * 0x80);\n          }\n        }\n        else if ((byte_value == 0xc0) && (*(function_pointer **)(data_ptr + 0x54) != (function_pointer *)0x0)) {\n          (**(function_pointer **)(data_ptr + 0x54))\n                    (*(undefined4 *)(data_ptr + 0x24),*(undefined *)(data_ptr + 0xd),\n                     **(undefined **)(data_ptr + 4));\n        }\n      }\n      else if (byte_value == 0xf4) {\n        if (*(function_pointer **)(data_ptr + 0x5c) != (function_pointer *)0x0) {\n          (**(function_pointer **)(data_ptr + 0x5c))\n                    (*(undefined4 *)(data_ptr + 0x2c),(*(undefined **)(data_ptr + 4))[1],\n                     **(undefined **)(data_ptr + 4));\n        }\n      }\n      else if (byte_value == 0xf5) {\n        if (*(function_pointer **)(data_ptr + 0x60) != (function_pointer *)0x0) {\n          (**(function_pointer **)(data_ptr + 0x60))\n                    (*(undefined4 *)(data_ptr + 0x30),(*(undefined **)(data_ptr + 4))[1],\n                     **(undefined **)(data_ptr + 4));\n        }\n      }\n      else if ((byte_value == 0xe0) && (*(function_pointer **)(data_ptr + 0x4c) != (function_pointer *)0x0)) {\n        (**(function_pointer **)(data_ptr + 0x4c))\n                  (*(undefined4 *)(data_ptr + 0x1c),*(undefined *)(data_ptr + 0xd),\n                   (uint)(*(byte **)(data_ptr + 4))[1] + (uint)**(byte **)(data_ptr + 4) * 0x80);\n      }\n      *(undefined *)(data_ptr + 0xc) = 0;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_data_08003474",
            "entrypoint": "0x08003474",
            "imported": false,
            "improved": true,
            "renaming": {
                "(char)param_2": "char_value",
                "FUN_08003474": "process_data_08003474",
                "bVar1": "byte_value",
                "code": "function_pointer",
                "initialize_data_0800344a": "initialize_data",
                "param_1": "data_ptr",
                "param_2": "value",
                "process_data_080033cc": "process_data",
                "update_data_08003376": "update_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080035b8": {
            "additional_data": {
                "FUN_080035b8": {
                    "1": "initialize_and_update_device",
                    "13": "initialize_and_update_memory",
                    "3": "initialize_and_update",
                    "4": "initialize_memory_and_update",
                    "5": "initialize_system"
                },
                "check_conditions_08005460": {
                    "5": "check_conditions"
                },
                "get_data_08005a1c": {
                    "2": "retrieve_data",
                    "4": "get_data"
                },
                "iVar1": {
                    "1": "condition_check",
                    "13": "result",
                    "3": "condition_check_result",
                    "6": "condition_result"
                },
                "infinite_loop_080073e8": {
                    "1": "handle_infinite_loop",
                    "3": "handle_error"
                },
                "initialize_and_update_memory_080058ac": {
                    "1": "initialize_memory",
                    "4": "initialize_and_update_memory"
                },
                "initialize_memory_08003fd8": {
                    "1": "init_memory",
                    "6": "initialize_memory"
                },
                "local_10": {
                    "1": "constant_4",
                    "2": "constant4",
                    "4": "value_4"
                },
                "local_14": {
                    "1": "condition_4",
                    "2": "constant3",
                    "5": "value_3"
                },
                "local_1c": {
                    "1": "constant",
                    "2": "constant2",
                    "5": "value_2"
                },
                "local_20": {
                    "1": "condition_value1",
                    "2": "value1",
                    "4": "constant_1",
                    "5": "value_1"
                },
                "local_30": {
                    "1": "status_flags",
                    "2": "initialization_values",
                    "4": "condition_flags",
                    "5": "conditions"
                },
                "local_30[0]": {
                    "1": "condition_param"
                },
                "local_34": {
                    "1": "memory_parameter5",
                    "2": "var5",
                    "3": "index",
                    "5": "memory_value_5"
                },
                "local_38": {
                    "1": "local_variable_4",
                    "2": "var4",
                    "6": "memory_value_4"
                },
                "local_3c": {
                    "1": "memory_index",
                    "2": "offset",
                    "6": "memory_value_3"
                },
                "local_40": {
                    "1": "memory2",
                    "2": "value",
                    "6": "memory_value_2"
                },
                "local_44": {
                    "1": "memory1",
                    "2": "var1",
                    "6": "memory_value_1"
                },
                "local_4c": {
                    "1": "configuration_2",
                    "2": "flag",
                    "3": "configuration_value",
                    "9": "config_value"
                },
                "local_54": {
                    "1": "config_param",
                    "2": "config_params",
                    "3": "configuration",
                    "4": "config_values"
                },
                "local_54[0]": {
                    "1": "configuration_1"
                },
                "local_c": {
                    "1": "constant_5",
                    "2": "param5",
                    "3": "address",
                    "4": "memory_address"
                },
                "set_flag_08004024": {
                    "7": "set_flag"
                },
                "uVar2": {
                    "12": "data_value"
                },
                "update_configuration_08005aa4": {
                    "1": "update_config",
                    "5": "update_configuration"
                },
                "update_memory_08003f30": {
                    "7": "update_memory"
                }
            },
            "called": [
                "FUN_080073e8",
                "FUN_08005460",
                "FUN_08003f30",
                "FUN_08003fd8",
                "FUN_08004024",
                "FUN_08005a1c",
                "FUN_08005aa4",
                "FUN_080058ac"
            ],
            "calling": [
                "FUN_080072fa"
            ],
            "code": "\nvoid initialize_and_update_memory_080035b8(void)\n\n{\n  int result;\n  uint data;\n  undefined4 config_values [2];\n  undefined4 config_value;\n  undefined4 mask;\n  undefined4 memory_value_2;\n  undefined4 memory_value_3;\n  undefined4 memory_value_4;\n  undefined4 memory_value_5;\n  undefined4 conditions [4];\n  undefined4 value_1;\n  undefined4 memory_size;\n  undefined4 value_3;\n  undefined4 value_4;\n  undefined4 memory_address;\n  \n  condition_param = 2;\n  value_1 = 1;\n  memory_size = 0x10;\n  value_3 = 2;\n  value_4 = 0;\n  memory_address = 0x380000;\n  result = check_conditions(conditions);\n  if (result != 0) {\n    handle_error(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x88);\n  }\n  mask = 0xf;\n  memory_value_2 = 2;\n  memory_value_3 = 0;\n  memory_value_4 = 0x400;\n  memory_value_5 = 0;\n  result = initialize_and_update_memory_080035b8(&mask);\n  if (result != 0) {\n    handle_error(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x95);\n  }\n  configuration_1 = 2;\n  config_value = 0x8000;\n  result = update_configuration(config_values);\n  if (result != 0) {\n    handle_error(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x9c);\n  }\n  data = get_data();\n  initialize_memory(data / 1000);\n  set_flag(4);\n  update_memory(0xffffffff,0);\n  return;\n}\n\n",
            "current_name": "initialize_and_update_memory_080035b8",
            "entrypoint": "0x080035b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080035b8": "initialize_and_update_memory_080035b8",
                "check_conditions_08005460": "check_conditions",
                "get_data_08005a1c": "get_data",
                "iVar1": "result",
                "infinite_loop_080073e8": "handle_error",
                "initialize_and_update_memory_080058ac": "initialize_and_update_memory",
                "initialize_memory_08003fd8": "initialize_memory",
                "local_10": "value_4",
                "local_14": "value_3",
                "local_1c": "memory_size",
                "local_20": "value_1",
                "local_30": "conditions",
                "local_30[0]": "condition_param",
                "local_34": "memory_value_5",
                "local_38": "memory_value_4",
                "local_3c": "memory_value_3",
                "local_40": "memory_value_2",
                "local_44": "mask",
                "local_4c": "config_value",
                "local_54": "config_values",
                "local_54[0]": "configuration_1",
                "local_c": "memory_address",
                "set_flag_08004024": "set_flag",
                "uVar2": "data",
                "update_configuration_08005aa4": "update_configuration",
                "update_memory_08003f30": "update_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080036a2": {
            "additional_data": {
                "": {
                    "3": ""
                },
                "FUN_080036a2": {
                    "1": "initialize_and_allocate_memory",
                    "2": "initialize_system",
                    "27": "initialize_system_and_memory"
                },
                "initialize_system_and_memory_080072fa": {
                    "1": "system_memory_init",
                    "13": "initialize_system_and_memory"
                }
            },
            "called": [
                "FUN_080072fa"
            ],
            "calling": [
                "FUN_08008f0e"
            ],
            "code": "\nvoid initialize_system_and_memory_080036a2(void)\n\n{\n  initialize_system_and_memory_080036a2();\n  return;\n}\n\n",
            "current_name": "initialize_system_and_memory_080036a2",
            "entrypoint": "0x080036a2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080036a2": "initialize_system_and_memory_080036a2",
                "initialize_system_and_memory_080072fa": "initialize_system_and_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080036ac": {
            "additional_data": {
                "&DAT_0800a908": {
                    "5": "character_array"
                },
                "DAT_0800a908": {
                    "1": "character_array"
                },
                "FUN_080036ac": {
                    "1": "find_matching_char_index",
                    "19": "find_character_index",
                    "2": "find_character_position",
                    "3": "find_char_index"
                },
                "param_1": {
                    "1": "input_character",
                    "18": "character",
                    "4": "input",
                    "7": "input_value"
                },
                "uVar1": {
                    "1": "matching_index",
                    "2": "position",
                    "28": "index"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_08000a64",
                "FUN_08000aec",
                "FUN_08000ef8",
                "FUN_080022f8",
                "FUN_0800021a"
            ],
            "code": "\nuint find_character_index_080036ac(int character)\n\n{\n  uint index;\n  \n  if ((uint)(character << 0x18) >> 0x1c < 5) {\n    for (index = 0; (index < 0x3c && (character != (char)(&DAT_0800a908)[index])); index = index + 1)\n    {\n    }\n  }\n  else {\n    index = 0xffffffff;\n  }\n  return index;\n}\n\n",
            "current_name": "find_character_index_080036ac",
            "entrypoint": "0x080036ac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080036ac": "find_character_index_080036ac",
                "param_1": "character",
                "uVar1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080036d4": {
            "called": [],
            "calling": [
                "FUN_08003724"
            ],
            "code": "\nvoid FUNC_080036d4(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080036d4",
            "entrypoint": "0x080036d4",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080036d4": "FUNC_080036d4"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080036d8": {
            "additional_data": {
                "0xf": {
                    "1": "max_value"
                },
                "DAT_2000000c": {
                    "1": "constant2"
                },
                "DAT_20000018": {
                    "1": "constant_a",
                    "2": "memory_size"
                },
                "FUN_080036d8": {
                    "1": "initialize_memory",
                    "26": "initialize_and_update_memory",
                    "3": "initialize_and_set_memory"
                },
                "iVar1": {
                    "1": "memory_init_status",
                    "6": "memory_initialization_result",
                    "7": "memory_init_result",
                    "8": "result"
                },
                "initialize_memory_08003fd8": {
                    "8": "initialize_memory"
                },
                "param_1": {
                    "1": "input_param",
                    "16": "input_value",
                    "2": "input_size",
                    "3": "memory_size",
                    "5": "size"
                },
                "uint param_1": {
                    "1": "input_param"
                },
                "update_memory_08003f30": {
                    "8": "update_memory"
                }
            },
            "called": [
                "FUN_08003f30",
                "FUN_08003fd8"
            ],
            "calling": [
                "FUN_08003724",
                "FUN_080058d2"
            ],
            "code": "\nundefined4 initialize_and_update_memory_080036d8(uint input_value)\n\n{\n  int result;\n  \n  result = initialize_memory(DAT_20000018 / (1000 / DAT_2000000c));\n  if (result != 0) {\n    return 1;\n  }\n  if (0xf < input_value) {\n    return 1;\n  }\n  update_memory(0xffffffff,input_value,0);\n  DAT_20000010 = input_value;\n  return 0;\n}\n\n",
            "current_name": "initialize_and_update_memory_080036d8",
            "entrypoint": "0x080036d8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080036d8": "initialize_and_update_memory_080036d8",
                "iVar1": "result",
                "initialize_memory_08003fd8": "initialize_memory",
                "param_1": "input_value",
                "update_memory_08003f30": "update_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003724": {
            "additional_data": {
                "FUNC_080036d4": {
                    "1": "execute_operation",
                    "2": "execute_system_operation",
                    "4": "perform_additional_tasks",
                    "6": "perform_additional_operations",
                    "7": "execute_function"
                },
                "FUN_08003724": {
                    "1": "set_register_and_update_memory",
                    "11": "initialize_system",
                    "2": "initialize_register_and_memory",
                    "7": "initialize_and_update_system"
                },
                "_DAT_40022000": {
                    "1": "system_status",
                    "2": "system_flags",
                    "3": "register_value"
                },
                "initialize_and_update_memory_080036d8": {
                    "1": "init_and_update_memory",
                    "2": "initialize_memory",
                    "22": "initialize_and_update_memory",
                    "3": "initialize_and_set_memory"
                },
                "update_register_value_08003f0c": {
                    "19": "update_register_value",
                    "2": "configure_register",
                    "3": "update_register",
                    "7": "set_register_value"
                }
            },
            "called": [
                "FUN_080036d4",
                "FUN_080036d8",
                "FUN_08003f0c"
            ],
            "calling": [
                "FUN_080072fa"
            ],
            "code": "\n\n\nundefined4 initialize_system_08003724(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  update_register_value(3);\n  initialize_and_update_memory(0xf);\n  FUNC_080036d4();\n  return 0;\n}\n\n",
            "current_name": "initialize_system_08003724",
            "entrypoint": "0x08003724",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003724": "initialize_system_08003724",
                "initialize_and_update_memory_080036d8": "initialize_and_update_memory",
                "update_register_value_08003f0c": "update_register_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003748": {
            "additional_data": {
                "DAT_2000000c": {
                    "1": "current_value",
                    "10": "input_value",
                    "2": "input_data",
                    "3": "value",
                    "4": "input"
                },
                "DAT_20000a34": {
                    "1": "total",
                    "2": "current_value",
                    "6": "sum",
                    "7": "result"
                },
                "FUNKY": {
                    "1": "addition_operation"
                },
                "FUN_08003748": {
                    "1": "increment_data_by_parameter",
                    "2": "addition",
                    "5": "update_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08007246"
            ],
            "code": "\nvoid update_sum_08003748(void)\n\n{\n  DAT_20000a34 = (uint)DAT_2000000c + DAT_20000a34;\n  return;\n}\n\n",
            "current_name": "update_sum_08003748",
            "entrypoint": "0x08003748",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003748": "update_sum_08003748"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003760": {
            "additional_data": {
                "DAT_20000a34": {
                    "1": "data_offset",
                    "11": "data",
                    "2": "global_data"
                },
                "FUN_08003760": {
                    "1": "get_data_variable",
                    "11": "get_data_value",
                    "12": "get_data",
                    "2": "get_global_data"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003b8c",
                "FUN_08005460",
                "FUN_080067ac",
                "FUN_08008500",
                "FUN_0800376c",
                "FUN_08007e74",
                "FUN_080058d2",
                "FUN_08003a20",
                "FUN_080066e8",
                "FUN_08003e20",
                "FUN_0800723c",
                "FUN_08007f0e",
                "FUN_08005aa4"
            ],
            "code": "\nundefined4 get_data_08003760(void)\n\n{\n  return DAT_20000a34;\n}\n\n",
            "current_name": "get_data_08003760",
            "entrypoint": "0x08003760",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003760": "get_data_08003760"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800376c": {
            "additional_data": {
                "FUN_0800376c": {
                    "1": "calculate_modified_value",
                    "2": "calculate_result",
                    "3": "calculate_return_value",
                    "6": "process_data"
                },
                "iVar1": {
                    "1": "data_1",
                    "2": "start_time",
                    "3": "start_value",
                    "6": "initial_data",
                    "9": "initial_value"
                },
                "iVar3": {
                    "1": "loop_iterator",
                    "2": "difference",
                    "3": "data_difference"
                },
                "local_1c": {
                    "1": "current_index",
                    "28": "counter"
                },
                "param_1": {
                    "1": "security_data",
                    "3": "input_data",
                    "5": "input_array",
                    "6": "data",
                    "8": "data_pointer"
                },
                "param_2": {
                    "1": "max_time",
                    "2": "size",
                    "3": "length",
                    "4": "data_size",
                    "7": "limit"
                },
                "puVar5": {
                    "1": "ptr_array",
                    "2": "ptr",
                    "3": "current_data",
                    "7": "data_pointer"
                },
                "uVar2": {
                    "1": "calculation1",
                    "2": "factor",
                    "5": "calculated_value",
                    "7": "calculation_result"
                },
                "uVar4": {
                    "1": "status",
                    "20": "result",
                    "8": "return_value"
                },
                "uVar6": {
                    "1": "result",
                    "2": "modified_size",
                    "3": "multiplier",
                    "4": "calculation_result"
                }
            },
            "called": [
                "FUN_08003760",
                "FUN_08005bb8"
            ],
            "calling": [
                "FUN_08006d80"
            ],
            "code": "\nundefined4 process_data_0800376c(uint **data_pointer,uint limit)\n\n{\n  int initial_value;\n  uint calculation_result;\n  int data_difference;\n  undefined4 result;\n  uint *data_pointer;\n  uint calculation_result;\n  uint counter;\n  \n  counter = 0;\n  initial_value = get_data_08003760();\n  calculation_result = DAT_20000018;\n  data_pointer = *data_pointer;\n  if ((data_pointer[2] & 0x100) == 0) {\n    if (((data_pointer[1] & 0x100) == 0) && ((data_pointer[0xb] & 0xf00000) == 0)) {\n      do {\n        if ((**data_pointer & 2) != 0) goto LAB_0800387e;\n      } while ((limit == 0xffffffff) ||\n              ((limit != 0 && (data_difference = get_data_08003760(), (uint)(data_difference - initial_value) <= limit))));\n      data_pointer[10] = (uint *)((uint)data_pointer[10] | 4);\n      *(undefined *)(data_pointer + 9) = 0;\n      result = 3;\n    }\n    else {\n      calculation_result = calculate_data_08005bb8(2);\n      data_pointer = *data_pointer;\n      if (((data_pointer[4] & 0x24924924) == 0) && ((data_pointer[3] & 0x924924) == 0)) {\n        if ((data_pointer[4] & 0x12492492) == 0) {\n          if ((data_pointer[3] & 0x492492) == 0) {\n            data_difference = 0x14;\n          }\n          else {\n            data_difference = 0x29;\n          }\n        }\n        else {\n          data_difference = 0x29;\n        }\n      }\n      else if (((data_pointer[4] & 0x12492492) == 0) && ((data_pointer[3] & 0x492492) == 0)) {\n        data_difference = 0x54;\n      }\n      else if ((data_pointer[4] & 0x249249) == 0) {\n        if ((data_pointer[3] & 0x249249) == 0) {\n          data_difference = 0x54;\n        }\n        else {\n          data_difference = 0xfc;\n        }\n      }\n      else {\n        data_difference = 0xfc;\n      }\n      calculation_result = (calculation_result / calculation_result) * data_difference;\n      for (; counter <= calculation_result && calculation_result - counter != 0; counter = counter + 1) {\n        if ((limit != 0xffffffff) &&\n           ((limit == 0 || (data_difference = get_data_08003760(), limit < (uint)(data_difference - initial_value))))) {\n          data_pointer[10] = (uint *)((uint)data_pointer[10] | 4);\n          *(undefined *)(data_pointer + 9) = 0;\n          return 3;\n        }\n      }\nLAB_0800387e:\n      **data_pointer = 0xffffffed;\n      data_pointer[10] = (uint *)((uint)data_pointer[10] | 0x200);\n      if (((*data_pointer)[2] & 0xe0000) == 0xe0000) {\n        if (data_pointer[3] == (uint *)0x0) {\n          data_pointer[10] = (uint *)((uint)data_pointer[10] & 0xfffffeff);\n          if (((uint)data_pointer[10] & 0x1000) == 0) {\n            data_pointer[10] = (uint *)((uint)data_pointer[10] | 1);\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    data_pointer[10] = (uint *)((uint)data_pointer[10] | 0x20);\n    *(undefined *)(data_pointer + 9) = 0;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_0800376c",
            "entrypoint": "0x0800376c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800376c": "process_data_0800376c",
                "iVar1": "initial_value",
                "iVar3": "data_difference",
                "local_1c": "counter",
                "param_1": "data_pointer",
                "param_2": "limit",
                "puVar5": "data_pointer",
                "uVar2": "calculation_result",
                "uVar4": "result",
                "uVar6": "calculation_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080038dc": {
            "additional_data": {
                "*(undefined4 *)(*param_1 + 0x4c)": {
                    "1": "data_offset",
                    "2": "offset",
                    "3": "offset_value"
                },
                "*param_1": {
                    "1": "address_value",
                    "2": "data_pointer",
                    "3": "offset_value"
                },
                "0x4c": {
                    "2": "offset"
                },
                "<unnamed_variable>": {
                    "1": "offset"
                },
                "FUN_080038dc": {
                    "1": "extract_value_from_offset",
                    "12": "get_offset_value",
                    "2": "get_value_from_offset",
                    "3": "get_value_at_offset",
                    "4": "get_offset"
                },
                "param_1": {
                    "1": "memory_address",
                    "2": "input_ptr",
                    "3": "input_pointer",
                    "5": "offset_pointer"
                },
                "undefined4": {
                    "1": "offset_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006d80"
            ],
            "code": "\nextracted_value get_offset_value_080038dc(int *offset_pointer)\n\n{\n  return *(extracted_value *)(*offset_pointer + 0x4c);\n}\n\n",
            "current_name": "get_offset_value_080038dc",
            "entrypoint": "0x080038dc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080038dc": "get_offset_value_080038dc",
                "param_1": "offset_pointer",
                "undefined4": "extracted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080038e4": {
            "additional_data": {
                "*(char *)(param_1 + 9)": {
                    "1": "status"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "data4"
                },
                "*(uint *)(*param_1 + 0x2c)": {
                    "1": "data3"
                },
                "*(uint *)(*param_1 + 0x30)": {
                    "1": "data2"
                },
                "*(uint *)(*param_1 + 0x34)": {
                    "1": "data1"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "data5"
                },
                "*(undefined *)(param_1 + 9)": {
                    "1": "status_flag"
                },
                "*param_1": {
                    "1": "ptr_value"
                },
                "*param_2": {
                    "1": "value_pointer"
                },
                "DAT_20000018": {
                    "1": "constant"
                },
                "FUN_080038e4": {
                    "1": "update_register_values",
                    "3": "update_values",
                    "4": "update_configuration",
                    "5": "update_settings",
                    "7": "update_registers"
                },
                "local_c": {
                    "1": "local_variable",
                    "16": "counter",
                    "3": "delay",
                    "5": "count"
                },
                "param_1": {
                    "1": "configuration",
                    "3": "config_ptr",
                    "4": "config",
                    "5": "settings"
                },
                "param_2": {
                    "1": "value_ptr",
                    "18": "values",
                    "2": "values_ptr"
                },
                "param_2[1]": {
                    "1": "value2"
                },
                "param_2[2]": {
                    "1": "value2"
                },
                "uRam40012408": {
                    "1": "memory"
                },
                "uVar1": {
                    "1": "result_code",
                    "11": "return_value",
                    "15": "result",
                    "3": "status"
                },
                "uVar2": {
                    "1": "data_value",
                    "16": "index",
                    "2": "value_index",
                    "5": "value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006d80"
            ],
            "code": "\nundefined4 update_registers_080038e4(int *registers,uint *values)\n\n{\n  undefined4 result;\n  uint index;\n  int counter;\n  \n  if (*(char *)(registers + 9) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(registers + 9) = 1;\n    index = value1;\n    if (index < 7) {\n      index = index * 5 - 5;\n      *(uint *)(*registers + 0x34) =\n           *values << (index & 0xff) | *(uint *)(*registers + 0x34) & ~(0x1f << (index & 0xff));\n    }\n    else if (index < 0xd) {\n      index = index * 5 - 0x23;\n      *(uint *)(*registers + 0x30) =\n           *values << (index & 0xff) | *(uint *)(*registers + 0x30) & ~(0x1f << (index & 0xff));\n    }\n    else {\n      index = index * 5 - 0x41;\n      *(uint *)(*registers + 0x2c) =\n           *values << (index & 0xff) | *(uint *)(*registers + 0x2c) & ~(0x1f << (index & 0xff));\n    }\n    index = *values;\n    if (index < 10) {\n      *(uint *)(*registers + 0x10) =\n           value2 << (index * 3 & 0xff) |\n           *(uint *)(*registers + 0x10) & ~(7 << (index * 3 & 0xff));\n    }\n    else {\n      index = index * 3 - 0x1e;\n      *(uint *)(*registers + 0xc) =\n           value2 << (index & 0xff) | *(uint *)(*registers + 0xc) & ~(7 << (index & 0xff));\n    }\n    if (*values - 0x10 < 2) {\n      if (*registers == 0x40012400) {\n        if ((memory & 0x800000) == 0) {\n          memory = memory | 0x800000;\n          if (*values == 0x10) {\n            for (counter = (DAT_20000018 / 1000000) * 10; counter != 0; counter = counter + -1) {\n            }\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        registers[10] = registers[10] | 0x20;\n        result = 1;\n      }\n    }\n    else {\n      result = 0;\n    }\n    *(undefined *)(registers + 9) = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "update_registers_080038e4",
            "entrypoint": "0x080038e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080038e4": "update_registers_080038e4",
                "local_c": "counter",
                "param_1": "registers",
                "param_2": "values",
                "param_2[1]": "value1",
                "param_2[2]": "value2",
                "uRam40012408": "memory",
                "uVar1": "result",
                "uVar2": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003a1c": {
            "additional_data": {
                "*(&param_1)": {
                    "1": "ptr_value"
                },
                "*(undefined4 *)(param_1 + 0x28)": {
                    "1": "value_at_offset_0x28",
                    "2": "offset_value"
                },
                "0x28": {
                    "2": "offset"
                },
                "<new_variable_name_1>": {
                    "1": "pointer_value"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "DAT_": {
                    "1": "dat_"
                },
                "FUN_08003a1c": {
                    "1": "get_address_from_parameter",
                    "4": "get_value_from_offset",
                    "6": "get_pointer_value",
                    "8": "get_offset_value"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "PTR_28": {
                    "1": "address_pointer"
                },
                "PTR_XXXX": {
                    "1": "unchanged_variable"
                },
                "param_1": {
                    "1": "base_pointer",
                    "2": "input_pointer",
                    "3": "input_address",
                    "4": "address",
                    "6": "base_address",
                    "7": "offset"
                },
                "param_1 + 0x28": {
                    "1": "pointer_value"
                },
                "param_2": {
                    "1": "<new_parameter_name_2>"
                },
                "param_n": {
                    "1": "<new_parameter_name_n>"
                },
                "return": {
                    "1": "pointer_value"
                },
                "var_1": {
                    "1": "offset"
                },
                "var_2": {
                    "1": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006d80"
            ],
            "code": "\nundefined4 get_offset_value_08003a1c(int offset)\n\n{\n  pointer_value *(undefined4 *)(offset + 0x28);\n}\n\n",
            "current_name": "get_offset_value_08003a1c",
            "entrypoint": "0x08003a1c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003a1c": "get_offset_value_08003a1c",
                "param_1": "offset",
                "return": "pointer_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003a20": {
            "additional_data": {
                "*(uint *)(iVar3 + 8) & 1": {
                    "1": "flag_check"
                },
                "*(undefined *)(param_1 + 9)": {
                    "1": "flag3"
                },
                "*param_1": {
                    "1": "data"
                },
                "FUN_08003a20": {
                    "1": "execute_operation",
                    "2": "update_data",
                    "5": "initialize_data",
                    "7": "enable_data_processing"
                },
                "get_data_08003760": {
                    "1": "retrieve_data",
                    "5": "get_data"
                },
                "iVar1": {
                    "1": "data_processing_result",
                    "2": "temp_var1",
                    "3": "data_value",
                    "6": "current_data"
                },
                "iVar3": {
                    "1": "ptr_data",
                    "10": "data_value",
                    "2": "data2",
                    "3": "data_address",
                    "4": "data_pointer"
                },
                "local_14": {
                    "1": "delay_count",
                    "2": "count",
                    "3": "delay",
                    "4": "delay_counter",
                    "6": "counter",
                    "9": "loop_counter"
                },
                "param_1": {
                    "1": "device_data",
                    "10": "data",
                    "8": "data_pointer",
                    "9": "data_ptr"
                },
                "param_1[0xb]": {
                    "1": "flag2"
                },
                "param_1[10]": {
                    "1": "data_flag_1"
                },
                "param_2": {
                    "1": "flag_value",
                    "2": "size",
                    "4": "param2",
                    "5": "value",
                    "9": "param"
                },
                "uVar2": {
                    "13": "return_value",
                    "2": "success",
                    "8": "result"
                }
            },
            "called": [
                "FUN_08003760"
            ],
            "calling": [
                "FUN_08003e20",
                "FUN_08003aa0"
            ],
            "code": "\nundefined4 enable_data_processing_08003a20(int *data,undefined4 param)\n\n{\n  int current_data;\n  undefined4 return_value;\n  int data_value;\n  uint loop_counter;\n  \n  data_value = *data;\n  if ((*(uint *)(data_value + 8) & 1) == 0) {\n    *(uint *)(data_value + 8) = *(uint *)(data_value + 8) | 1;\n    for (loop_counter = DAT_20000018 / 1000000; loop_counter != 0; loop_counter = loop_counter - 1) {\n    }\n    data_value = get_data(data,param,DAT_20000018 * 0x431bde83);\n    do {\n      if ((*(uint *)(*data + 8) & 1) != 0) {\n        return 0;\n      }\n      current_data = get_data();\n    } while ((uint)(current_data - data_value) < 3);\n    flag1 = flag1 | 0x10;\n    flag2 = flag2 | 1;\n    *(undefined *)(data + 9) = 0;\n    return_value = 1;\n  }\n  else {\n    return_value = 0;\n  }\n  return return_value;\n}\n\n",
            "current_name": "enable_data_processing_08003a20",
            "entrypoint": "0x08003a20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003a20": "enable_data_processing_08003a20",
                "get_data_08003760": "get_data",
                "iVar1": "current_data",
                "iVar3": "data_value",
                "local_14": "loop_counter",
                "param_1": "data",
                "param_1[0xb]": "flag2",
                "param_1[10]": "flag1",
                "param_2": "param",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003aa0": {
            "additional_data": {
                "(*param_1)": {
                    "1": "ptr_value"
                },
                "(_DAT_40012404 & 0xf0000)": {
                    "1": "data_value2"
                },
                "(iVar3 != 0x40012800 || ((_DAT_40012404 & 0xf0000) == 0))": {
                    "1": "check_condition4"
                },
                "(param_1[10] & 0x1000U)": {
                    "1": "check_condition3"
                },
                "(puVar2 == (undefined4 *)0x40012800)": {
                    "1": "check_condition"
                },
                "(puVar2[1] & 0x400)": {
                    "1": "check_condition2"
                },
                "(undefined4 *)*param_1": {
                    "1": "ptr_value"
                },
                "(undefined4 *)0x40012800": {
                    "1": "data_ptr_value_1"
                },
                "*(char *)(param_1 + 9)": {
                    "1": "check_flag"
                },
                "*(uint *)(iVar3 + 8)": {
                    "1": "register_value"
                },
                "*(uint *)(iVar3 + 8) & 0xe0000": {
                    "1": "data_value_5"
                },
                "*(uint *)(iVar3 + 8) = *(uint *)(iVar3 + 8) | 0x100000": {
                    "1": "update_value2"
                },
                "*(uint *)(iVar3 + 8) = *(uint *)(iVar3 + 8) | 0x500000": {
                    "1": "update_value1"
                },
                "*(uint *)(iVar3 + 8) |= 0x100000: ": {
                    "1": "updated_value2"
                },
                "*(uint *)(iVar3 + 8) |= 0x500000": {
                    "1": "updated_value"
                },
                "*(undefined *)(param_1 + 9)": {
                    "1": "check_flag_value"
                },
                "*param_1": {
                    "1": "val3",
                    "2": "pointer_value"
                },
                "*param_1 + 9": {
                    "1": "check_flag"
                },
                "*puVar2": {
                    "1": "pointer_value"
                },
                "0x01": {
                    "1": "check_value"
                },
                "0x100": {
                    "1": "flag1"
                },
                "0x1000": {
                    "1": "flag4"
                },
                "0x100000": {
                    "1": "flag6"
                },
                "0x1000U": {
                    "1": "mask4"
                },
                "0x400": {
                    "1": "flag3"
                },
                "0x40012800": {
                    "1": "check_value1"
                },
                "0x500000": {
                    "1": "flag5"
                },
                "0xb": {
                    "1": "index"
                },
                "0xe0000": {
                    "1": "mask5"
                },
                "0xf0000": {
                    "1": "mask2"
                },
                "0xffefffff": {
                    "1": "mask3"
                },
                "0xfffffcfeU": {
                    "1": "mask1"
                },
                "0xfffffffd": {
                    "1": "constant1"
                },
                "DAT": {
                    "1": "dat_"
                },
                "FUN_08003aa0": {
                    "1": "handle_data_processing",
                    "14": "initialize_data_processing",
                    "3": "enable_data_processing",
                    "6": "configure_data_processing"
                },
                "PTR": {
                    "1": "ptr_"
                },
                "_DAT_40012404": {
                    "1": "data_40012404",
                    "2": "constant_value"
                },
                "_DAT_40012404 & 0x400": {
                    "1": "data_value_3"
                },
                "_DAT_40012404 & 0xf0000": {
                    "1": "condition_two"
                },
                "enable_data_processing_08003a20": {
                    "5": "enable_data_processing"
                },
                "iVar1": {
                    "1": "status",
                    "29": "result"
                },
                "iVar3": {
                    "1": "ptr_value",
                    "11": "value",
                    "5": "data",
                    "6": "address"
                },
                "iVar3 != 0x40012800 || ((_DAT_40012404 & 0xf0000) == 0)": {
                    "1": "condition_six"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "config_data",
                    "3": "config",
                    "5": "parameters",
                    "9": "data"
                },
                "param_1 + 10": {
                    "1": "flags"
                },
                "param_1[0xb]": {
                    "1": "value_b"
                },
                "param_1[10]": {
                    "1": "data_processing_flags"
                },
                "param_1[10] & 0x100000": {
                    "1": "data_value_2"
                },
                "param_1[10] & 0x1000U": {
                    "1": "is_flag_set"
                },
                "param_1[10] & 0xfffffcfeU | 0x100": {
                    "1": "updated_flags"
                },
                "param_1[9]": {
                    "1": "flag"
                },
                "puVar2": {
                    "1": "base_addr",
                    "16": "ptr",
                    "3": "data_ptr",
                    "6": "pointer"
                },
                "puVar2 == (undefined4 *)0x40012800": {
                    "1": "is_condition_one_true"
                },
                "puVar2[1]": {
                    "2": "pointer_value"
                },
                "puVar2[1] & 0x400": {
                    "1": "condition_four"
                }
            },
            "called": [
                "FUN_08003a20"
            ],
            "calling": [
                "FUN_08006d80"
            ],
            "code": "\n\n\nint initialize_data_processing_08003aa0(int *data)\n\n{\n  int result;\n  undefined4 *ptr;\n  int value;\n  \n  if (*(char *)(data + 9) != '\\x01') {\n    *(undefined *)(data + 9) = 1;\n    result = enable_data_processing();\n    if (result == 0) {\n      value = value & mask1 | 0x100;\n      ptr = (undefined4 *)*data;\n      if ((ptr == (undefined4 *)0x40012800) && ((_DAT_40012404 & 0xf0000) != 0)) {\n        value = value | 0x100000;\n        if ((_DAT_40012404 & 0x400) != 0) {\n          value = value & 0xffffcfffU | 0x1000;\n        }\n      }\n      else {\n        value = value & 0xffefffff;\n        if ((pointer_value & 0x400) != 0) {\n          value = value & 0xffffcfffU | 0x1000;\n        }\n      }\n      if ((value & mask4) == 0) {\n        value_b = 0;\n      }\n      else {\n        value_b = value_b & 0xfffffff9;\n      }\n      *(undefined *)(data + 9) = 0;\n      *ptr = 0xfffffffd;\n      value = *data;\n      if (((*(uint *)(value + 8) & 0xe0000) == 0xe0000) &&\n         ((value != 0x40012800 || ((_DAT_40012404 & 0xf0000) == 0)))) {\n        *(uint *)(value + 8) = *(uint *)(value + 8) | 0x500000;\n      }\n      else {\n        *(uint *)(value + 8) = *(uint *)(value + 8) | 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(data + 9) = 0;\n    }\n    return result;\n  }\n  return 2;\n}\n\n",
            "current_name": "initialize_data_processing_08003aa0",
            "entrypoint": "0x08003aa0",
            "imported": false,
            "improved": true,
            "renaming": {
                "0x1000U": "mask4",
                "0xfffffcfeU": "mask1",
                "DAT": "dat_",
                "FUN_08003aa0": "initialize_data_processing_08003aa0",
                "enable_data_processing_08003a20": "enable_data_processing",
                "iVar1": "result",
                "iVar3": "value",
                "param_1": "data",
                "param_1[0xb]": "value_b",
                "param_1[10]": "value",
                "puVar2": "ptr",
                "puVar2[1]": "pointer_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003b8c": {
            "additional_data": {
                "(uint)(iVar1 - iVar2)": {
                    "1": "difference"
                },
                "*(uint *)(iVar2 + 8)": {
                    "1": "flags"
                },
                "FUN_08003b8c": {
                    "1": "update_flags_if_valid",
                    "3": "check_and_update_data",
                    "4": "update_flags_and_values",
                    "5": "update_data"
                },
                "get_data_08003760": {
                    "1": "get_next_data",
                    "3": "get_data"
                },
                "iVar1": {
                    "1": "current_data_value",
                    "2": "previous_value",
                    "6": "current_value",
                    "7": "previous_data",
                    "8": "current_data"
                },
                "iVar2": {
                    "1": "base_data",
                    "2": "current_value",
                    "4": "initial_value",
                    "5": "initial_data",
                    "7": "current_data"
                },
                "param_1": {
                    "1": "ptr_data",
                    "18": "data",
                    "2": "data_ptr",
                    "3": "data_array",
                    "4": "data_pointer"
                },
                "param_1[0xb]": {
                    "1": "flag_2"
                },
                "param_1[10]": {
                    "1": "flag_1"
                }
            },
            "called": [
                "FUN_08003760"
            ],
            "calling": [
                "FUN_08003ce8",
                "FUN_08003de4",
                "FUN_08003e20",
                "FUN_08003bd8"
            ],
            "code": "\nundefined4 update_data_08003b8c(int *data)\n\n{\n  int current_data;\n  int current_data;\n  \n  current_data = *data;\n  if ((*(uint *)(current_data + 8) & 1) == 0) {\n    return 0;\n  }\n  *(uint *)(current_data + 8) = *(uint *)(current_data + 8) & 0xfffffffe;\n  current_data = get_data();\n  do {\n    if ((*(uint *)(*data + 8) & 1) == 0) {\n      return 0;\n    }\n    current_data = get_data();\n  } while ((uint)(current_data - current_data) < 3);\n  flag_1 = flag_1 | 0x10;\n  flag_2 = flag_2 | 1;\n  return 1;\n}\n\n",
            "current_name": "update_data_08003b8c",
            "entrypoint": "0x08003b8c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003b8c": "update_data_08003b8c",
                "get_data_08003760": "get_data",
                "iVar1": "current_data",
                "iVar2": "current_data",
                "param_1": "data",
                "param_1[0xb]": "flag_2",
                "param_1[10]": "flag_1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003bd8": {
            "additional_data": {
                "*(uint *)(*param_1 + 0x2c)": {
                    "1": "register3"
                },
                "*(uint *)(*param_1 + 4)": {
                    "1": "register_a"
                },
                "*(uint *)(*param_1 + 8)": {
                    "1": "register2"
                },
                "*(undefined *)(param_1 + 9)": {
                    "1": "clear_flag"
                },
                "*param_1": {
                    "1": "config_param_ptr"
                },
                "FUN_08003bd8": {
                    "1": "update_peripheral_status",
                    "12": "configure_peripheral",
                    "2": "update_peripheral_configuration",
                    "4": "initialize_peripheral"
                },
                "a": {
                    "1": "param_1[3]"
                },
                "b": {
                    "1": "param_1[6]"
                },
                "c": {
                    "1": "param_1[1]"
                },
                "configure_peripheral_08006ca8": {
                    "5": "configure_peripheral"
                },
                "d": {
                    "1": "param_1[7]"
                },
                "e": {
                    "1": "param_1[4]"
                },
                "iVar1": {
                    "2": "update_status",
                    "20": "update_result",
                    "4": "result",
                    "5": "data_update_result"
                },
                "param_1": {
                    "1": "parameters",
                    "2": "param",
                    "3": "config_data",
                    "5": "peripheral_data",
                    "9": "config"
                },
                "param_1[0xb]": {
                    "1": "config[11]"
                },
                "param_1[10]": {
                    "1": "config[10]"
                },
                "param_1[10] & 0x10U": {
                    "1": "bitwise_and_result"
                },
                "param_1[1]": {
                    "1": "config[1]"
                },
                "param_1[2]": {
                    "1": "config[2]"
                },
                "param_1[3]": {
                    "1": "config[3]"
                },
                "param_1[4]": {
                    "1": "config[4]"
                },
                "param_1[5]": {
                    "1": "config[5]"
                },
                "param_1[6]": {
                    "1": "config[6]"
                },
                "param_1[7]": {
                    "1": "config[7]"
                },
                "uVar2": {
                    "1": "combined_var_1",
                    "2": "combined_flags",
                    "3": "var1"
                },
                "uVar3": {
                    "1": "bitwise_or2",
                    "2": "conditional_value",
                    "3": "var2"
                },
                "update_data_08003b8c": {
                    "5": "update_data"
                },
                "x": {
                    "1": "param_1[10]"
                },
                "y": {
                    "1": "param_1[2]"
                },
                "z": {
                    "1": "param_1[5]"
                }
            },
            "called": [
                "FUN_08003b8c",
                "FUN_08006ca8"
            ],
            "calling": [
                "FUN_08006d80"
            ],
            "code": "\nundefined4 configure_peripheral_08003bd8(int *config)\n\n{\n  int update_result;\n  uint var1;\n  uint var2;\n  \n  if (config == (int *)0param_1[10]0) {\n    return 1;\n  }\n  if (config[10] == 0) {\n    config[11] = 0;\n    *(undefined *)(config + 9) = 0;\n    configure_peripheral_08003bd8();\n  }\n  update_result = update_data(config);\n  if (((config[10] & 0param_1[10]10U) == 0) && (update_result == 0)) {\n    config[10] = config[10] & 0param_1[10]ffffeefdU | 2;\n    var1 = config[1] | config[7] | config[3] << 1;\n    if (config[2] == 0param_1[10]100) {\n      var2 = 0param_1[10]100;\n    }\n    else {\n      var2 = 0;\n      if (config[2] == 1) {\n        var2 = 0param_1[10]100;\n      }\n    }\n    if (config[5] == 1) {\n      if (config[3] == 0) {\n        var2 = var2 | (config[6] + -1) * 0param_1[10]2000 | 0param_1[10]800;\n      }\n      else {\n        config[10] = config[10] | 0param_1[10]20;\n        config[11] = config[11] | 1;\n      }\n    }\n    *(uint *)(*config + 4) = var2 | *(uint *)(*config + 4) & 0param_1[10]ffff16ff;\n    *(uint *)(*config + 8) = *(uint *)(*config + 8) & 0param_1[10]ffe1f7fd | var1;\n    if ((config[2] == 0param_1[10]100) || (config[2] == 1)) {\n      var2 = (config[4] + -1) * 0param_1[10]100000;\n    }\n    else {\n      var2 = 0;\n    }\n    *(uint *)(*config + 0param_1[10]2c) = var2 | *(uint *)(*config + 0param_1[10]2c) & 0param_1[10]ff0fffff;\n    if (var1 != (*(uint *)(*config + 8) & 0param_1[10]ff1f0efe)) {\n      config[10] = config[10] & 0param_1[10]ffffffedU | 0param_1[10]10;\n      config[11] = config[11] | 1;\n      return 1;\n    }\n    config[11] = 0;\n    config[10] = config[10] & 0param_1[10]fffffffcU | 1;\n    return 0;\n  }\n  config[10] = config[10] | 0param_1[10]10;\n  return 1;\n}\n\n",
            "current_name": "configure_peripheral_08003bd8",
            "entrypoint": "0x08003bd8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003bd8": "configure_peripheral_08003bd8",
                "configure_peripheral_08006ca8": "configure_peripheral",
                "iVar1": "update_result",
                "param_1": "config",
                "param_1[0xb]": "config[11]",
                "param_1[10]": "config[10]",
                "param_1[1]": "config[1]",
                "param_1[2]": "config[2]",
                "param_1[3]": "config[3]",
                "param_1[4]": "config[4]",
                "param_1[5]": "config[5]",
                "param_1[6]": "config[6]",
                "param_1[7]": "config[7]",
                "uVar2": "var1",
                "uVar3": "var2",
                "update_data_08003b8c": "update_data",
                "x": "param_1[10]"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003ce8": {
            "additional_data": {
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "data_ptr[4]"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "flag_5"
                },
                "*(uint *)(*param_1 + 0x18)": {
                    "1": "data_ptr[6]"
                },
                "*(uint *)(*param_1 + 0x1c)": {
                    "1": "data_ptr[7]"
                },
                "*(uint *)(*param_1 + 0x20)": {
                    "1": "data_ptr[8]"
                },
                "*(uint *)(*param_1 + 0x24)": {
                    "1": "flag_9"
                },
                "*(uint *)(*param_1 + 0x28)": {
                    "1": "data_ptr[10]"
                },
                "*(uint *)(*param_1 + 0x2c)": {
                    "1": "flag_11"
                },
                "*(uint *)(*param_1 + 0x30)": {
                    "1": "data_ptr[12]"
                },
                "*(uint *)(*param_1 + 0x34)": {
                    "1": "flag_13"
                },
                "*(uint *)(*param_1 + 0x38)": {
                    "1": "data_ptr[14]"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "data_ptr[3]"
                },
                "*(uint *)(*param_1 + 4)": {
                    "1": "data_ptr[1]"
                },
                "*(uint *)(*param_1 + 8)": {
                    "1": "flag_2"
                },
                "*(undefined *)(param_1 + 9)": {
                    "1": "data_ptr[9]"
                },
                "*(undefined4 *)*param_1": {
                    "1": "data_ptr[0]"
                },
                "FUN_08003ce8": {
                    "1": "update_param_data",
                    "13": "update_data",
                    "2": "update_data_and_registers",
                    "5": "initialize_data"
                },
                "PTR_08006d24": {
                    "1": "update_control_registers"
                },
                "iVar1": {
                    "1": "status",
                    "26": "result",
                    "4": "return_value"
                },
                "param_1": {
                    "1": "input_data",
                    "11": "data",
                    "4": "data_ptr"
                },
                "param_1[0xb]": {
                    "1": "data_array[0xb]"
                },
                "param_1[10]": {
                    "1": "data_ptr[10]"
                },
                "uint": {
                    "1": "uint32"
                },
                "undefined": {
                    "1": "uint8"
                },
                "undefined4": {
                    "1": "uint_value"
                },
                "update_control_registers_08006d24": {
                    "8": "update_control_registers"
                },
                "update_data_08003b8c": {
                    "4": "update_registers",
                    "7": "update_data"
                }
            },
            "called": [
                "FUN_08003b8c",
                "FUN_08006d24"
            ],
            "calling": [
                "FUN_08006d80"
            ],
            "code": "\nint update_data_08003ce8(int *data)\n\n{\n  int result;\n  \n  if (data == (int *)0x0) {\n    result = 1;\n  }\n  else {\n    data_array[10] = data_array[10] | 2;\n    result = update_data_08003ce8();\n    if (result == 0) {\n      *(uint32 *)*data = 0xffffffe0;\n      *(uint32 *)(*data + 4) = *(uint32 *)(*data + 4) & 0xff3f0000;\n      *(uint32 *)(*data + 8) = *(uint32 *)(*data + 8) & 0xff0106f0;\n      *(uint32 *)(*data + 0xc) = *(uint32 *)(*data + 0xc) & 0xff000000;\n      *(uint32 *)(*data + 0x10) = *(uint32 *)(*data + 0x10) & 0xc0000000;\n      *(uint32 *)(*data + 0x14) = *(uint32 *)(*data + 0x14) & 0xfffff000;\n      *(uint32 *)(*data + 0x18) = *(uint32 *)(*data + 0x18) & 0xfffff000;\n      *(uint32 *)(*data + 0x1c) = *(uint32 *)(*data + 0x1c) & 0xfffff000;\n      *(uint32 *)(*data + 0x20) = *(uint32 *)(*data + 0x20) & 0xfffff000;\n      *(uint32 *)(*data + 0x24) = *(uint32 *)(*data + 0x24) & 0xfffff000;\n      *(uint32 *)(*data + 0x28) = *(uint32 *)(*data + 0x28) & 0xfffff000;\n      *(uint32 *)(*data + 0x2c) = *(uint32 *)(*data + 0x2c) & 0xff000000;\n      *(uint32 *)(*data + 0x2c) = *(uint32 *)(*data + 0x2c) & 0xff000000;\n      *(uint32 *)(*data + 0x30) = *(uint32 *)(*data + 0x30) & 0xc0000000;\n      *(uint32 *)(*data + 0x34) = *(uint32 *)(*data + 0x34) & 0xc0000000;\n      *(uint32 *)(*data + 0x38) = *(uint32 *)(*data + 0x38) & 0xffc00000;\n      *(uint32 *)(*data + 0x38) = *(uint32 *)(*data + 0x38) & 0xffc00000;\n      update_control_registers(data);\n      data_array[0xb] = 0;\n      data_array[10] = 0;\n    }\n    *(uint8 *)(data + 9) = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "update_data_08003ce8",
            "entrypoint": "0x08003ce8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003ce8": "update_data_08003ce8",
                "iVar1": "result",
                "param_1": "data",
                "param_1[0xb]": "data_array[0xb]",
                "param_1[10]": "data_array[10]",
                "uint": "uint32",
                "undefined": "uint8",
                "undefined4": "uint32",
                "update_control_registers_08006d24": "update_control_registers",
                "update_data_08003b8c": "update_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003de4": {
            "additional_data": {
                "'\\x01'": {
                    "1": "success"
                },
                "(char *)(param_1 + 0x24)": {
                    "1": "status_bit"
                },
                "(uint *)(param_1 + 0x28)": {
                    "1": "data_ptr"
                },
                "(undefined *)(param_1 + 0x24)": {
                    "1": "status_ptr"
                },
                "*(char *)(param_1 + 0x24)": {
                    "1": "status"
                },
                "*(uint *)(param_1 + 0x28)": {
                    "1": "status_ptr"
                },
                "*(undefined *)(param_1 + 0x24)": {
                    "1": "set_flag"
                },
                "0xffffeefe": {
                    "1": "bitmask"
                },
                "1": {
                    "1": "set_flag"
                },
                "FUN_08003de4": {
                    "1": "update_and_check_data",
                    "11": "update_data_status",
                    "2": "update_data_and_return",
                    "5": "update_data"
                },
                "PTR_PARAM_1": {
                    "1": "data_ptr"
                },
                "iVar1": {
                    "1": "update_status",
                    "17": "result",
                    "2": "status",
                    "3": "return_value",
                    "7": "update_result"
                },
                "param_1": {
                    "1": "function_handle",
                    "2": "param",
                    "5": "data_ptr",
                    "6": "data_address",
                    "9": "data"
                },
                "update_data_08003b8c": {
                    "8": "update_data"
                }
            },
            "called": [
                "FUN_08003b8c"
            ],
            "calling": [
                "FUN_08006d80"
            ],
            "code": "\nint update_data_status_08003de4(int data)\n\n{\n  int result;\n  \n  if (*(char *)(data + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(data + 0x24) = 1;\n  result = update_data();\n  if (result == 0) {\n    *(uint *)(data + 0x28) = *(uint *)(data + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(data + 0x24) = 0;\n  return result;\n}\n\n",
            "current_name": "update_data_status_08003de4",
            "entrypoint": "0x08003de4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003de4": "update_data_status_08003de4",
                "iVar1": "result",
                "param_1": "data",
                "update_data_08003b8c": "update_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003e20": {
            "additional_data": {
                "FUN_08003e20": {
                    "1": "handle_data_processing",
                    "2": "check_and_update_data",
                    "25": "process_data"
                },
                "calculate_data_08005bb8": {
                    "1": "calculate_data"
                },
                "enable_data_processing_08003a20": {
                    "1": "enable_data_processing"
                },
                "get_data_08003760": {
                    "1": "get_data"
                },
                "iVar2": {
                    "1": "result2",
                    "11": "update_result",
                    "16": "result"
                },
                "iVar4": {
                    "1": "result4",
                    "2": "time1",
                    "3": "initial_value",
                    "6": "start_value",
                    "8": "start_time"
                },
                "iVar5": {
                    "1": "current_result",
                    "2": "time2",
                    "6": "current_time",
                    "9": "current_value"
                },
                "local_14": {
                    "1": "counter",
                    "10": "loop_counter",
                    "2": "temp_var",
                    "4": "iterations",
                    "8": "iteration_count"
                },
                "param_1": {
                    "1": "data_pointer",
                    "2": "data_ptr",
                    "26": "data"
                },
                "uVar1": {
                    "1": "constant",
                    "12": "dividend",
                    "2": "result1",
                    "3": "divisor",
                    "4": "constant1"
                },
                "uVar3": {
                    "1": "result2",
                    "12": "divisor",
                    "2": "calculate_result",
                    "3": "data_divisor",
                    "4": "constant2"
                },
                "update_data_08003b8c": {
                    "1": "update_data"
                }
            },
            "called": [
                "FUN_08003b8c",
                "FUN_08003a20",
                "FUN_08003760",
                "FUN_08005bb8"
            ],
            "calling": [
                "FUN_08006d80"
            ],
            "code": "\nint process_data_08003e20(int *data)\n\n{\n  uint dividend;\n  int result;\n  uint divisor;\n  int start_time;\n  int current_value;\n  int loop_counter;\n  \n  if (*(char *)(data + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(data + 9) = 1;\n  result = update_data();\n  if (result == 0) {\n    data[10] = data[10] & 0xffffeefdU | 2;\n    dividend = DAT_20000018;\n    divisor = calculate_data(2);\n    for (loop_counter = dividend / divisor << 1; loop_counter != 0; loop_counter = loop_counter + -1) {\n    }\n    enable_data_processing(data);\n    *(uint *)(*data + 8) = *(uint *)(*data + 8) | 8;\n    start_time = get_data();\n    while (current_value = *data, (*(uint *)(current_value + 8) & 8) != 0) {\n      current_value = get_data();\n      if (10 < (uint)(current_value - start_time)) {\n        data[10] = data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(current_value + 8) = *(uint *)(current_value + 8) | 4;\n    start_time = get_data();\n    while ((*(uint *)(*data + 8) & 4) != 0) {\n      current_value = get_data();\n      if (10 < (uint)(current_value - start_time)) {\n        data[10] = data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    data[10] = data[10] & 0xfffffffcU | 1;\n  }\n  *(undefined *)(data + 9) = 0;\n  return result;\n}\n\n",
            "current_name": "process_data_08003e20",
            "entrypoint": "0x08003e20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003e20": "process_data_08003e20",
                "calculate_data_08005bb8": "calculate_data",
                "enable_data_processing_08003a20": "enable_data_processing",
                "get_data_08003760": "get_data",
                "iVar2": "result",
                "iVar4": "start_time",
                "iVar5": "current_value",
                "local_14": "loop_counter",
                "param_1": "data",
                "uVar1": "dividend",
                "uVar3": "divisor",
                "update_data_08003b8c": "update_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003f0c": {
            "additional_data": {
                "0x5fa0000": {
                    "1": "constant"
                },
                "0xf8ff": {
                    "1": "mask"
                },
                "FUN_08003f0c": {
                    "1": "update_value_in_memory",
                    "2": "update_control_register",
                    "4": "update_configuration",
                    "9": "update_register_value"
                },
                "_DAT_e000ed0c": {
                    "1": "configuration",
                    "2": "existing_value",
                    "6": "register_value"
                },
                "param_1": {
                    "1": "parameter",
                    "16": "input_value",
                    "2": "value",
                    "3": "new_value",
                    "4": "input"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003724",
                "FUN_08008f0e"
            ],
            "code": "\n\n\nvoid update_register_value_08003f0c(uint input_value)\n\n{\n  _DAT_e000ed0c = (input_value & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "current_name": "update_register_value_08003f0c",
            "entrypoint": "0x08003f0c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003f0c": "update_register_value_08003f0c",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003f30": {
            "additional_data": {
                "(param_1 & 0xf) + 0xe000ed14": {
                    "1": "slot_address1"
                },
                "*(char *)((param_1 & 0xf) + 0xe000ed14)": {
                    "1": "shifted_value1"
                },
                "*(char *)(param_1 + 0xe000e400)": {
                    "1": "memory_location2"
                },
                "BIT_SHIFT": {
                    "1": "shift"
                },
                "DATA": {
                    "1": "data"
                },
                "FUN_08003f30": {
                    "1": "update_register_data",
                    "10": "update_memory",
                    "2": "update_data",
                    "3": "update_character"
                },
                "MASK": {
                    "1": "bit_mask"
                },
                "MEM_ADDRESS": {
                    "1": "address"
                },
                "MEM_OFFSET": {
                    "1": "offset"
                },
                "char": {
                    "1": "byte"
                },
                "char_pointer_1": {
                    "1": "character_pointer1"
                },
                "char_pointer_2": {
                    "1": "character_pointer2"
                },
                "int param_1 < 0": {
                    "1": "is_negative"
                },
                "param_1": {
                    "1": "register_index",
                    "17": "address",
                    "4": "character_index"
                },
                "param_1 & 0xf": {
                    "1": "masked_character_address"
                },
                "param_1 + 0xe000e400": {
                    "1": "slot_address2"
                },
                "param_2": {
                    "1": "input1",
                    "2": "old_value",
                    "3": "value",
                    "4": "mask",
                    "5": "bit_mask"
                },
                "param_3": {
                    "1": "destination_data",
                    "2": "bit_value",
                    "3": "data_value",
                    "5": "data",
                    "8": "mask"
                },
                "uVar1": {
                    "1": "shift_count",
                    "2": "shifted_mask",
                    "5": "shifted_bits",
                    "9": "shift_amount"
                },
                "uVar1 & 0xff": {
                    "1": "updated_shift_amount"
                },
                "uVar1 << 4": {
                    "1": "updated_value"
                },
                "uVar1_adjusted": {
                    "1": "adjusted_shift_amount"
                },
                "uVar1_calculated": {
                    "1": "calculated_shift_value"
                },
                "uVar1_masked": {
                    "1": "masked_shift_value"
                },
                "uVar1_shifted": {
                    "1": "shifted_mask"
                },
                "uVar1_updated": {
                    "1": "new_shift_value"
                },
                "uVar2": {
                    "1": "remaining_shifts",
                    "2": "adjusted_shift_amount",
                    "4": "shifted_value",
                    "5": "remaining_bits"
                },
                "uVar2 & 0xff": {
                    "1": "updated_remaining_shifts"
                },
                "uVar2_calculated": {
                    "1": "calculated_difference"
                },
                "uVar2_max": {
                    "1": "max_difference"
                },
                "uVar3": {
                    "1": "shifted_bit_count"
                },
                "uVar4": {
                    "1": "shifted_data"
                },
                "uVar5": {
                    "1": "shifted_data",
                    "2": "result"
                },
                "uVar6": {
                    "1": "shifted_mask"
                }
            },
            "called": [],
            "calling": [
                "FUN_08007648",
                "FUN_080036d8",
                "FUN_080077b0",
                "FUN_080035b8",
                "FUN_08008694",
                "FUN_0800863c"
            ],
            "code": "\n\n\nvoid update_memory_08003f30(uint address,uint bit_mask,uint mask)\n\n{\n  uint shift_amount;\n  uint remaining_bits;\n  \n  shift_amount = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  remaining_bits = 7 - shift_amount;\n  if (3 < remaining_bits) {\n    remaining_bits = 4;\n  }\n  if (shift_amount + 4 < 7) {\n    shift_amount = 0;\n  }\n  else {\n    shift_amount = shift_amount - 3;\n  }\n  shift_amount = (bit_mask & (1 << (remaining_bits & 0xff)) - 1U) << (shift_amount & 0xff) |\n          (1 << (shift_amount & 0xff)) - 1U & mask;\n  if ((int)address < 0) {\n    *(byte *)((address & 0xf) + 0xe000ed14) = (byte)(shift_amount << 4);\n  }\n  else {\n    *(byte *)(address + 0xe000e400) = (byte)(shift_amount << 4);\n  }\n  return;\n}\n\n",
            "current_name": "update_memory_08003f30",
            "entrypoint": "0x08003f30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003f30": "update_memory_08003f30",
                "char": "byte",
                "param_1": "address",
                "param_2": "bit_mask",
                "param_3": "mask",
                "uVar1": "shift_amount",
                "uVar2": "remaining_bits"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003f94": {
            "additional_data": {
                "(int)param_1": {
                    "1": "signed_index"
                },
                "(param_1 & 0x1f)": {
                    "2": "bit_position"
                },
                "(param_1 >> 5) * 4 + -0x1fff1f00": {
                    "1": "array_index"
                },
                "*(int *)&amp;(param_1 &gt;&gt; 5) * 4 + -0x1fff1f00": {
                    "1": "target_address"
                },
                "*(int *)((param_1 >> 5) * 4 + -0x1fff1f00)": {
                    "1": "array[array_index]",
                    "2": "bit_array"
                },
                "*(int *)(...)": {
                    "1": "bits_array"
                },
                "1 << (param_1 & 0x1f)": {
                    "1": "bit_to_set",
                    "3": "bit_mask"
                },
                "<param_1>": {
                    "1": "input"
                },
                "<param_1> >> 5)": {
                    "1": "offset"
                },
                "FUN_08003f94": {
                    "1": "update_bit_array",
                    "10": "set_bit",
                    "2": "set_bit_at_position",
                    "3": "set_bit_at_index",
                    "9": "set_bit_in_array"
                },
                "param_1": {
                    "1": "array_index",
                    "12": "index",
                    "4": "bit_position",
                    "8": "bit_index"
                },
                "param_1 &amp; 0x1f": {
                    "1": "bit_position"
                },
                "param_1 >> 5": {
                    "1": "array_index"
                },
                "param_2": {
                    "1": "array"
                },
                "param_3": {
                    "1": "size"
                },
                "param_4": {
                    "1": "value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08007648",
                "FUN_080077b0",
                "FUN_08008694",
                "FUN_0800863c"
            ],
            "code": "\nvoid set_bit_08003f94(uint index)\n\n{\n  if (-1 < signed_index) {\n    *(int *)((index >> 5) * 4 + -0x1fff1f00) = 1 << (index & 0x1f);\n  }\n  return;\n}\n\n",
            "current_name": "set_bit_08003f94",
            "entrypoint": "0x08003f94",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1": "signed_index",
                "FUN_08003f94": "set_bit_08003f94",
                "param_1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003fb0": {
            "additional_data": {
                "(int)param_1": {
                    "1": "signed_index"
                },
                "(param_1 >> 5) + 0x20": {
                    "1": "bit_offset"
                },
                "*(int *)(((param_1 >> 5) + 0x20) * 4 + -0x1fff1f00)": {
                    "1": "bit_addr"
                },
                "1 << (param_1 & 0x1f)": {
                    "1": "bit_mask"
                },
                "DataSynchronizationBarrier": {
                    "1": "perform_data_sync",
                    "2": "sync_data",
                    "3": "perform_data_sync_barrier"
                },
                "FUN_08003fb0": {
                    "1": "set_bit_in_memory_and_sync",
                    "15": "set_bit_in_memory",
                    "2": "set_bit_in_array"
                },
                "InstructionSynchronizationBarrier": {
                    "1": "sync_instructions",
                    "2": "synchronize_instructions"
                },
                "int": {
                    "1": "integer"
                },
                "param_1": {
                    "1": "parameter",
                    "14": "bit_index",
                    "2": "position",
                    "5": "index",
                    "6": "bit_position"
                },
                "param_1 >> 5": {
                    "1": "shifted_input"
                }
            },
            "called": [],
            "calling": [
                "FUN_080076e0"
            ],
            "code": "\nvoid set_bit_in_memory_08003fb0(uinteger bit_index)\n\n{\n  if (-1 < signed_index) {\n    *(integer *)(((bit_index >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (bit_index & 0x1f);\n    perform_data_sync_barrier(0xf);\n    wait_for_instruction_sync(0xf);\n  }\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_08003fb0",
            "entrypoint": "0x08003fb0",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1": "signed_index",
                "DataSynchronizationBarrier": "perform_data_sync_barrier",
                "FUN_08003fb0": "set_bit_in_memory_08003fb0",
                "InstructionSynchronizationBarrier": "wait_for_instruction_sync",
                "int": "integer",
                "param_1": "bit_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003fd8": {
            "additional_data": {
                "0x1000000": {
                    "1": "upper_limit"
                },
                "<original_function_name>": {
                    "1": "set_parameters"
                },
                "DAT_e000ed23": {
                    "1": "mode_value",
                    "4": "status_flag",
                    "6": "status",
                    "7": "constant_value"
                },
                "FUN_08003fd8": {
                    "1": "set_register_values",
                    "2": "initialize_parameters",
                    "4": "initialize_data",
                    "8": "initialize_memory"
                },
                "_DAT_e000e010": {
                    "1": "limit",
                    "2": "flag_value",
                    "3": "counter",
                    "8": "flag"
                },
                "_DAT_e000e014": {
                    "1": "result",
                    "2": "modified_input_value",
                    "3": "modified_value",
                    "7": "memory_address"
                },
                "_DAT_e000e018": {
                    "1": "initialized_flag",
                    "11": "counter",
                    "3": "initialized_value"
                },
                "param_1": {
                    "1": "parameter",
                    "13": "value",
                    "3": "size"
                }
            },
            "called": [],
            "calling": [
                "FUN_080036d8",
                "FUN_080035b8"
            ],
            "code": "\n\n\nundefined4 initialize_memory_08003fd8(int input_value)\n\n{\n  if (input_value - 1U < 0x1000000) {\n    _DAT_e000e014 = input_value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "initialize_memory_08003fd8",
            "entrypoint": "0x08003fd8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003fd8": "initialize_memory_08003fd8",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004004": {
            "additional_data": {
                "*(int *)(((param_1 >> 5) + 0x60) * 4 + -0x1fff1f00)": {
                    "1": "bit_array",
                    "2": "memory_address"
                },
                "1 << (param_1 & 0x1f)": {
                    "2": "bit_value",
                    "4": "bit_mask"
                },
                "<unnamed_1>": {
                    "1": "offset"
                },
                "<unnamed_2>": {
                    "1": "bit_value"
                },
                "FUN_08004004": {
                    "1": "set_bit_in_integer",
                    "5": "set_bit_at_index",
                    "6": "set_bit_in_array",
                    "8": "set_bit"
                },
                "int": {
                    "1": "integer"
                },
                "param_1": {
                    "1": "num",
                    "10": "bit_index",
                    "8": "bit_position",
                    "9": "index"
                },
                "param_1 & 0x1f": {
                    "1": "bit_position"
                },
                "param_1 >> 5": {
                    "1": "shifted_value"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid set_bit_08004004(uinteger bit_index)\n\n{\n  if (-1 < (integer)bit_index) {\n    *(integer *)(((bit_index >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (bit_index & 0x1f);\n  }\n  return;\n}\n\n",
            "current_name": "set_bit_08004004",
            "entrypoint": "0x08004004",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004004": "set_bit_08004004",
                "int": "integer",
                "param_1": "bit_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004024": {
            "additional_data": {
                "FUN_08004024": {
                    "1": "update_e000e010_flag",
                    "2": "update_status",
                    "3": "update_control_register",
                    "9": "set_flag"
                },
                "_DAT_e000e010": {
                    "1": "status_register",
                    "5": "control_register",
                    "7": "flag_register",
                    "8": "register_value"
                },
                "param_1": {
                    "1": "configuration",
                    "2": "status",
                    "5": "flag",
                    "9": "flag_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_080035b8"
            ],
            "code": "\n\n\nvoid set_flag_08004024(int flag_value)\n\n{\n  if (flag_value != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "current_name": "set_flag_08004024",
            "entrypoint": "0x08004024",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004024": "set_flag_08004024",
                "param_1": "flag_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004044": {
            "called": [],
            "calling": [
                "FUN_08004046"
            ],
            "code": "\nvoid FUNC_08004044(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08004044",
            "entrypoint": "0x08004044",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08004044": "FUNC_08004044"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08004046": {
            "additional_data": {
                "FUNC_08004044": {
                    "1": "initialize_data",
                    "2": "perform_initial_setup",
                    "3": "initialize_system",
                    "7": "perform_initialization"
                },
                "FUN_08004046": {
                    "1": "execute_startup",
                    "2": "initialize_system",
                    "4": "execute_function",
                    "6": "execute_initialization",
                    "8": "initialize"
                }
            },
            "called": [
                "FUN_08004044"
            ],
            "calling": [
                "FUN_08007246"
            ],
            "code": "\nvoid initialize_08004046(void)\n\n{\n  FUNC_08004044();\n  return;\n}\n\n",
            "current_name": "initialize_08004046",
            "entrypoint": "0x08004046",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004046": "initialize_08004046"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004050": {
            "additional_data": {
                "(*(char *)((int)param_1 + 0x21))": {
                    "1": "settings->flag"
                },
                "(*(code *)param_1[0xd])()": {
                    "1": "settings->callback()"
                },
                "(code *)param_1[0xd]": {
                    "1": "callback_function"
                },
                "(int)param_1 + 0x21": {
                    "1": "data_status"
                },
                "(uint *)0x4": {
                    "1": "default_setting"
                },
                "(uint *)0x40020008": {
                    "1": "config_1"
                },
                "(uint *)0x4002001c": {
                    "1": "config_2"
                },
                "(uint *)0x40020030": {
                    "1": "config_3"
                },
                "(uint *)0x40020044": {
                    "1": "config_4"
                },
                "(uint *)0x40020058": {
                    "1": "setting_e"
                },
                "(uint *)0x4002006c": {
                    "1": "config_6"
                },
                "(uint *)0x40020080": {
                    "1": "config_7"
                },
                "(uint **param_1)": {
                    "1": "settings_ptr"
                },
                "*(char *)((int)data + 0x21)": {
                    "1": "condition"
                },
                "*(char *)((int)param_1 + 0x21)": {
                    "1": "data_state",
                    "2": "flag"
                },
                "*(code *)param_1[0xd]": {
                    "1": "callback_function"
                },
                "*(uint *)((int)param_1 + 0x21)": {
                    "1": "flag_value"
                },
                "*(undefined *)((int)data + 0x21)": {
                    "1": "is_initialized"
                },
                "*(undefined *)((int)param_1 + 0x21)": {
                    "1": "settings->flag",
                    "2": "updated_status"
                },
                "*(undefined *)(data + 8)": {
                    "1": "pointer"
                },
                "*(undefined *)(param_1 + 8)": {
                    "1": "flag2"
                },
                "*(unsigned int *)(param_1[0xd])": {
                    "1": "callback_function"
                },
                "**param_1": {
                    "1": "module_flag"
                },
                "**param_1 & 0xfffffff1": {
                    "1": "module_flag_cleared1"
                },
                "**param_1 & 0xfffffffe": {
                    "1": "module_flag_cleared2"
                },
                "*param_1": {
                    "1": "current_address"
                },
                "0": {
                    "1": "flag_false"
                },
                "0x0": {
                    "1": "null_pointer"
                },
                "0x21": {
                    "1": "status_flag"
                },
                "0x40020004": {
                    "1": "value7"
                },
                "0x40020008": {
                    "1": "value1"
                },
                "0x4002001c": {
                    "1": "value2"
                },
                "0x40020030": {
                    "1": "value3"
                },
                "0x40020044": {
                    "1": "value4"
                },
                "0x40020058": {
                    "1": "value5"
                },
                "0x4002006c": {
                    "1": "value6"
                },
                "0xd": {
                    "1": "callback_function_pointer"
                },
                "1": {
                    "1": "flag_true"
                },
                "DAT_40020004": {
                    "1": "global_setting"
                },
                "FUN_08004050": {
                    "1": "set_data_mode",
                    "13": "initialize_data",
                    "2": "set_configuration",
                    "4": "update_data"
                },
                "_DAT_40020004": {
                    "1": "data_flag",
                    "3": "result",
                    "4": "data_value"
                },
                "char_1": {
                    "1": "flag"
                },
                "codePointer": {
                    "1": "function_ptr"
                },
                "data[0xe]": {
                    "1": "error_code"
                },
                "param_1": {
                    "1": "config_params",
                    "14": "data",
                    "2": "data_pointer",
                    "3": "settings",
                    "5": "config"
                },
                "param_1[0xd]": {
                    "1": "custom_function",
                    "2": "callback",
                    "3": "callback_function"
                },
                "param_1[0xe]": {
                    "1": "config_status",
                    "3": "error_code"
                },
                "puVar1": {
                    "1": "ptr_to_data",
                    "2": "current_pointer",
                    "3": "current_value",
                    "8": "value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f3c",
                "FUN_080069ec"
            ],
            "code": "\n\n\nundefined4 initialize_data_08004050(uint **data)\n\n{\n  uint *value;\n  \n  if (*(char *)((int)data + 0x21) != '\\x02') {\n    error_flag = (uint *)0x4;\n    return 1;\n  }\n  **data = **data & 0xfffffff1;\n  **data = **data & 0xfffffffe;\n  value = *data;\n  if (value == (uint *)0x40020008) {\n    _DAT_40020004 = 1;\n  }\n  else if (value == (uint *)0x4002001c) {\n    _DAT_40020004 = 0x10;\n  }\n  else if (value == (uint *)0x40020030) {\n    _DAT_40020004 = 0x100;\n  }\n  else if (value == (uint *)0x40020044) {\n    _DAT_40020004 = 0x1000;\n  }\n  else if (value == (uint *)0x40020058) {\n    _DAT_40020004 = 0x10000;\n  }\n  else if (value == (uint *)0x4002006c) {\n    _DAT_40020004 = 0x100000;\n  }\n  else {\n    _DAT_40020004 = 0x1000000;\n  }\n  *(undefined *)((int)data + 0x21) = 1;\n  *(undefined *)(data + 8) = 0;\n  if (callback_function != (uint *)0x0) {\n    (*(code *)callback_function)();\n    return 0;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_data_08004050",
            "entrypoint": "0x08004050",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004050": "initialize_data_08004050",
                "param_1": "data",
                "param_1[0xd]": "callback_function",
                "param_1[0xe]": "error_flag",
                "puVar1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080040e8": {
            "additional_data": {
                "*param_1": {
                    "1": "permissions_array"
                },
                "*param_2": {
                    "1": "flags_array"
                },
                "FUN_080040e8": {
                    "1": "update_flags_and_settings",
                    "3": "update_flags",
                    "4": "update_registers"
                },
                "_DAT_40010400": {
                    "1": "gpio_pin_register1"
                },
                "_DAT_40010404": {
                    "1": "register2"
                },
                "_DAT_40010408": {
                    "1": "register4"
                },
                "_DAT_4001040c": {
                    "1": "register4"
                },
                "_DAT_40021018": {
                    "1": "gpio_register"
                },
                "iVar7": {
                    "1": "temp_var1",
                    "3": "shift",
                    "4": "bit_offset",
                    "5": "shift_amount"
                },
                "iVar8": {
                    "1": "output_index",
                    "17": "register_index",
                    "3": "index"
                },
                "param_1": {
                    "1": "input_flags",
                    "2": "register_array1",
                    "3": "output_params"
                },
                "param_2": {
                    "1": "reg_value2",
                    "2": "input",
                    "3": "input_flags",
                    "4": "flags"
                },
                "puVar1": {
                    "1": "current_bitmask",
                    "5": "output_ptr"
                },
                "uVar2": {
                    "1": "bit",
                    "2": "bitmask",
                    "24": "bit_mask"
                },
                "uVar3": {
                    "1": "current_bit_set",
                    "2": "flag_value",
                    "3": "flag",
                    "4": "bit_result",
                    "7": "bit_check"
                },
                "uVar4": {
                    "1": "bit",
                    "11": "bit_index",
                    "2": "counter",
                    "4": "i",
                    "6": "index"
                },
                "uVar5": {
                    "1": "opcode_value",
                    "2": "instruction",
                    "3": "value",
                    "4": "flag_value",
                    "9": "opcode"
                },
                "uVar6": {
                    "1": "result_value",
                    "15": "new_value",
                    "2": "value",
                    "3": "updated_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006ca8",
                "FUN_08007258",
                "FUN_08006e68",
                "FUN_080077b0",
                "FUN_08008078"
            ],
            "code": "\n\n\nvoid update_registers_080040e8(uint *output_flags,uint *flags)\n\n{\n  uint *output_ptr;\n  uint bit_mask;\n  uint bit_check;\n  uint bit_index;\n  uint opcode;\n  uint new_value;\n  int bit_index;\n  int register_index;\n  \n  new_value = 0;\n  bit_index = 0;\n  do {\n    if (0xf < bit_index) {\n      return;\n    }\n    bit_mask = 1 << (bit_index & 0xff);\n    bit_check = *flags & bit_mask;\n    if (bit_mask == bit_check) {\n      opcode = flags[1];\n      if (opcode == 0x12) {\n        new_value = flags[3] + 0xc;\n      }\n      else if (opcode < 0x13) {\n        if (opcode == 2) {\n          new_value = flags[3] + 8;\n        }\n        else if (opcode < 3) {\n          if (opcode == 0) goto LAB_0800423a;\n          if (opcode == 1) {\n            new_value = flags[3];\n          }\n        }\n        else if (opcode == 3) {\n          new_value = 0;\n        }\n        else if (opcode == 0x11) {\n          new_value = flags[3] + 4;\n        }\n      }\n      else if (opcode == 0x10210000) {\nLAB_0800423a:\n        if (flags[2] == 0) {\n          new_value = 4;\n        }\n        else if (flags[2] == 1) {\n          output_flags[4] = bit_mask;\n          new_value = 8;\n        }\n        else {\n          output_flags[5] = bit_mask;\n          new_value = 8;\n        }\n      }\n      else if (opcode < 0x10210001) {\n        if ((opcode == 0x10110000) || (opcode == 0x10120000)) goto LAB_0800423a;\n      }\n      else if ((opcode == 0x10310000) || ((opcode == 0x10320000 || (opcode == 0x10220000))))\n      goto LAB_0800423a;\n      bit_mask = bit_index;\n      output_ptr = output_flags;\n      if (0xff < bit_check) {\n        bit_mask = bit_index - 8;\n        output_ptr = output_flags + 1;\n      }\n      *output_ptr = *output_ptr & ~(0xf << (bit_mask << 2 & 0xff)) | new_value << (bit_mask << 2 & 0xff);\n      if ((flags[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        bit_index = (bit_index & 3) << 2;\n        if (output_flags == (uint *)0x40010800) {\n          register_index = 0;\n        }\n        else if (output_flags == (uint *)0x40010c00) {\n          register_index = 1;\n        }\n        else if (output_flags == (uint *)0x40011000) {\n          register_index = 2;\n        }\n        else if (output_flags == (uint *)0x40011400) {\n          register_index = 3;\n        }\n        else {\n          register_index = 4;\n        }\n        *(uint *)(((bit_index >> 2) + 2) * 4 + 0x40010000) =\n             *(uint *)(((bit_index >> 2) + 2) * 4 + 0x40010000) & ~(0xf << bit_index) | register_index << bit_index;\n        if ((flags[1] & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~bit_check;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | bit_check;\n        }\n        if ((flags[1] & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~bit_check;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | bit_check;\n        }\n        if ((flags[1] & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~bit_check;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | bit_check;\n        }\n        if ((flags[1] & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~bit_check;\n        }\n        else {\n          _DAT_4001040c = bit_check | _DAT_4001040c;\n        }\n      }\n    }\n    bit_index = bit_index + 1;\n  } while( true );\n}\n\n",
            "current_name": "update_registers_080040e8",
            "entrypoint": "0x080040e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080040e8": "update_registers_080040e8",
                "iVar7": "bit_index",
                "iVar8": "register_index",
                "param_1": "output_flags",
                "param_2": "flags",
                "puVar1": "output_ptr",
                "uVar2": "bit_mask",
                "uVar3": "bit_check",
                "uVar4": "bit_index",
                "uVar5": "opcode",
                "uVar6": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080042d4": {
            "additional_data": {
                "*(uint *)(param_1 + 8)": {
                    "1": "data_value"
                },
                "0": {
                    "1": "bit_not_set"
                },
                "1": {
                    "1": "bit_set"
                },
                "<original_variable_name_1>": {
                    "1": "bitwise_result"
                },
                "FUN_080042d4": {
                    "1": "is_bit_set",
                    "19": "check_bit",
                    "2": "check_bitwise_intersection"
                },
                "local_var_1": {
                    "1": "mask"
                },
                "new_variable_name_1": {
                    "1": "result"
                },
                "param_1": {
                    "1": "bit_array_ptr",
                    "2": "offset",
                    "3": "data_address",
                    "4": "value",
                    "5": "input_value"
                },
                "param_1 + 8": {
                    "1": "bit_array_ptr"
                },
                "param_2": {
                    "1": "flag_value",
                    "14": "bit_mask",
                    "2": "mask",
                    "8": "bitmask"
                },
                "param_2 & *(uint *)(param_1 + 8)": {
                    "1": "result"
                },
                "param_3": {
                    "1": "result"
                },
                "return 0": {
                    "1": "return_bit_0"
                },
                "return 1": {
                    "1": "return_bit_1"
                },
                "return value": {
                    "1": "is_bit_set"
                }
            },
            "called": [],
            "calling": [
                "FUN_080072f0"
            ],
            "code": "\nundefined4 check_bit_080042d4(int input_value,uint bit_mask)\n\n{\n  if ((bit_mask & *(uint *)(input_value + 8)) == 0) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "check_bit_080042d4",
            "entrypoint": "0x080042d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080042d4": "check_bit_080042d4",
                "param_1": "input_value",
                "param_2": "bit_mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080042e2": {
            "additional_data": {
                "*(int *)(param_1 + 0x10)": {
                    "1": "parameter_value",
                    "2": "target_address",
                    "3": "object_value"
                },
                "*addressToSet": {
                    "1": "parameter_value"
                },
                "0x10": {
                    "1": "offset"
                },
                "DAT_": {
                    "1": "data"
                },
                "FUN_080042e2": {
                    "1": "update_parameter",
                    "14": "set_param_value",
                    "2": "update_parameter_value",
                    "3": "set_parameter_value",
                    "4": "update_param"
                },
                "PTR_": {
                    "1": "data_pointer"
                },
                "isShifted": {
                    "1": "should_shift_value"
                },
                "param_1": {
                    "1": "entity_address",
                    "15": "object_address",
                    "2": "obj_address",
                    "3": "target_address",
                    "4": "base_address"
                },
                "param_1 + 0x10": {
                    "1": "data_address",
                    "2": "parameter_address",
                    "3": "address_offset"
                },
                "param_2": {
                    "1": "value_to_store",
                    "11": "new_value",
                    "16": "value",
                    "2": "data_value"
                },
                "param_2 << 0x10": {
                    "1": "shifted_value"
                },
                "param_3": {
                    "1": "is_shift",
                    "2": "should_shift",
                    "20": "is_shifted",
                    "3": "use_shift"
                },
                "param_3 == 0": {
                    "1": "should_shift_zero"
                },
                "valueToStore": {
                    "1": "new_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_080072d8"
            ],
            "code": "\nvoid set_param_value_080042e2(int object_address,int value,int is_shifted)\n\n{\n  if (is_shifted == 0) {\n    *(int *)(object_address + 0x10) = value << 0x10;\n    return;\n  }\n  *(int *)(object_address + 0x10) = value;\n  return;\n}\n\n",
            "current_name": "set_param_value_080042e2",
            "entrypoint": "0x080042e2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080042e2": "set_param_value_080042e2",
                "param_1": "object_address",
                "param_2": "value",
                "param_3": "is_shifted"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080042f0": {
            "additional_data": {
                "FUN_080042f0": {
                    "1": "process_and_check_data",
                    "14": "update_and_process_data",
                    "2": "update_data_if_changed",
                    "4": "update_data_and_process"
                },
                "_DAT_40010414": {
                    "1": "existing_data",
                    "2": "current_value",
                    "4": "data",
                    "9": "current_data"
                },
                "check_and_process_data_08009094": {
                    "1": "validate_and_process",
                    "2": "perform_data_check_and_processing",
                    "3": "validate_and_process_data",
                    "6": "process_updated_data"
                },
                "param_1": {
                    "1": "updated_data",
                    "2": "flags",
                    "3": "new_data",
                    "8": "data"
                }
            },
            "called": [
                "FUN_08009094"
            ],
            "calling": [],
            "code": "\n\n\nvoid update_and_process_data_080042f0(uint data)\n\n{\n  if ((_DAT_40010414 & data) != 0) {\n    _DAT_40010414 = data;\n    process_updated_data();\n  }\n  return;\n}\n\n",
            "current_name": "update_and_process_data_080042f0",
            "entrypoint": "0x080042f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080042f0": "update_and_process_data_080042f0",
                "check_and_process_data_08009094": "process_updated_data",
                "param_1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800430c": {
            "additional_data": {
                "(char *)((int)param_1 + 0x3e)": {
                    "1": "char_pointer1"
                },
                "(int)param_1 + 0x3d": {
                    "1": "char_ptr_2"
                },
                "(int)param_1 + 0x3e": {
                    "1": "char_ptr"
                },
                "*(char *)((int)data + 0x3d)": {
                    "1": "char_2"
                },
                "*(char *)((int)data + 0x3e)": {
                    "1": "char_1"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "char_value_2",
                    "3": "char2"
                },
                "*(char *)((int)param_1 + 0x3e)": {
                    "1": "file_global_flag",
                    "3": "char1"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "status_value",
                    "2": "result",
                    "3": "flag"
                },
                "*device": {
                    "1": "device"
                },
                "*param_1": {
                    "1": "file"
                },
                "*param_1 + 0x10": {
                    "1": "flag_address"
                },
                "FUN_0800430c": {
                    "1": "set_flags_based_on_inputs",
                    "2": "set_flag_based_on_conditions",
                    "3": "update_flag_value"
                },
                "deviceConfig": {
                    "1": "device_config"
                },
                "deviceConfig[0x11]": {
                    "1": "config_value"
                },
                "deviceConfig[0x14]": {
                    "1": "config_type"
                },
                "input_values": {
                    "1": "input_values"
                },
                "param_1": {
                    "1": "flag_data",
                    "2": "flags",
                    "3": "permissions",
                    "4": "input_array"
                },
                "param_1[0x11]": {
                    "1": "status_value",
                    "2": "param[17]",
                    "3": "input_array[17]",
                    "6": "value"
                },
                "param_1[0x14]": {
                    "1": "element_at20",
                    "2": "param[20]",
                    "3": "input_array[20]",
                    "4": "condition"
                },
                "param_1[4]": {
                    "1": "data_ptr[4]",
                    "2": "input_array[4]"
                },
                "param_1[4] == 0x4000": {
                    "1": "file_permission_flag"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005188"
            ],
            "code": "\nundefined4 update_flag_value_0800430c(int *input_array)\n\n{\n  if (*(char *)((int)input_array + 0x3e) == '@') {\n    if (flag == 0) {\n      *(uint *)(*input_array + 0x10) = value & 0xfe;\n    }\n    else {\n      *(uint *)(*input_array + 0x10) = value & 0xffU | 1;\n    }\n  }\n  else if (value == 0x4000) {\n    if (*(char *)((int)input_array + 0x3d) == '!') {\n      *(uint *)(*input_array + 0x10) = value & 0xfe;\n    }\n    else {\n      *(uint *)(*input_array + 0x10) = value & 0xffU | 1;\n    }\n  }\n  else if (flag == 0) {\n    *(uint *)(*input_array + 0x10) = (uint)(value << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (flag == 1) {\n    *(uint *)(*input_array + 0x10) = (uint)(value << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "current_name": "update_flag_value_0800430c",
            "entrypoint": "0x0800430c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800430c": "update_flag_value_0800430c",
                "param_1": "input_array",
                "param_1[0x11]": "value",
                "param_1[0x14]": "flag",
                "param_1[4]": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004396": {
            "additional_data": {
                "(uint *)(*param_1 + 0x10)": {
                    "1": "memory_location"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "address_to_write",
                    "2": "memory_location"
                },
                "*param_1": {
                    "1": "param_array_ptr"
                },
                "0x10": {
                    "1": "offset"
                },
                "0x11": {
                    "1": "index"
                },
                "0xff": {
                    "1": "bit_mask"
                },
                "FUN_08004396": {
                    "1": "update_value_from_param",
                    "2": "set_byte_from_param",
                    "5": "update_param_value",
                    "6": "set_param_value"
                },
                "paramArray": {
                    "1": "param_array"
                },
                "paramValue & 0xff": {
                    "1": "param_value_limited"
                },
                "param_1": {
                    "1": "parameter",
                    "10": "param_array",
                    "2": "param_list",
                    "3": "memory_address",
                    "5": "input_array"
                },
                "param_1 + 0x10": {
                    "1": "param_ptr"
                },
                "param_1[0x11]": {
                    "1": "source_value",
                    "2": "value_to_set",
                    "3": "param_value",
                    "4": "input_array[17]",
                    "6": "param_array[17]"
                },
                "param_1[0x11] & 0xff": {
                    "1": "byte_value"
                },
                "uint": {
                    "1": "unsigned_integer"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005188"
            ],
            "code": "\nundefined4 set_param_value_08004396(int *param_array)\n\n{\n  *(unsigned_integer *)(*param_array + 0x10) = param_array[17] & 0xff;\n  return 0;\n}\n\n",
            "current_name": "set_param_value_08004396",
            "entrypoint": "0x08004396",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004396": "set_param_value_08004396",
                "param_1": "param_array",
                "param_1[0x11]": "param_array[17]",
                "uint": "unsigned_integer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080043a2": {
            "additional_data": {
                "(*(char *)((int)parameters + 0x3d)": {
                    "1": "is_quote"
                },
                "(*(char *)((int)parameters + 0x3e)": {
                    "1": "is_at"
                },
                "(*(short *)((int)param_1 + 0x2a) == 0)": {
                    "1": "is_short_zero"
                },
                "(*(short *)((int)param_1 + 0x2a) == 1)": {
                    "1": "is_short_one"
                },
                "(int)param_1": {
                    "1": "address"
                },
                "(int)param_1 + 0x2a": {
                    "1": "short_value"
                },
                "(int)param_1 + 0x3d": {
                    "1": "char_value_1"
                },
                "(int)param_1 + 0x3e": {
                    "1": "char_value_2"
                },
                "(puVar1[1] & 0x800) == 0": {
                    "1": "check_flag"
                },
                "(uint *)((int)param_1[0x14] + 1)": {
                    "1": "updated_param"
                },
                "(uint *)0x0": {
                    "1": "null_param"
                },
                "(uint *)0x12": {
                    "1": "special_param4"
                },
                "(uint *)0x2": {
                    "1": "special_param5"
                },
                "(uint *)0x4": {
                    "1": "special_param2"
                },
                "(uint *)0x8": {
                    "1": "special_param3"
                },
                "(uint *)0xc000": {
                    "1": "magic_param"
                },
                "(uint *)0xffff0000": {
                    "1": "special_param1"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "char_value_1",
                    "5": "char1"
                },
                "*(char *)((int)param_1 + 0x3e)": {
                    "1": "char_value_2",
                    "2": "char_value2",
                    "5": "char2"
                },
                "*(char *)((int)parameters + 0x3d)": {
                    "1": "char_value"
                },
                "*(char *)((int)parameters + 0x3e)": {
                    "1": "char_value2"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "short_check",
                    "2": "short1",
                    "5": "short_value"
                },
                "*(short *)((int)param_1 + 0x2a) == 0": {
                    "1": "if_short1_equals_0"
                },
                "*(short *)((int)param_1 + 0x2a) == 2": {
                    "1": "is_short_two"
                },
                "*(short *)((int)parameters + 0x2a)": {
                    "1": "param2a"
                },
                "**param_1": {
                    "1": "double_deref_param1",
                    "2": "value"
                },
                "*param_1": {
                    "1": "flags"
                },
                "0": {
                    "1": "success"
                },
                "0x100": {
                    "1": "flag_1"
                },
                "0x1000": {
                    "1": "flag_5"
                },
                "0x14": {
                    "1": "index2"
                },
                "0x200": {
                    "1": "flag_2"
                },
                "0x2a": {
                    "1": "short_value"
                },
                "0x400": {
                    "1": "flag_3"
                },
                "0x800": {
                    "1": "flag_4"
                },
                "0xb": {
                    "1": "index1"
                },
                "0xc": {
                    "1": "index3"
                },
                "0xfffffbff": {
                    "1": "flag_mask"
                },
                "DAT_0800443d": {
                    "1": "char_value"
                },
                "DAT_0800443e": {
                    "1": "char_value2"
                },
                "FUN_080043a2": {
                    "1": "update_permissions",
                    "12": "update_flags",
                    "2": "update_flags_based_on_conditions"
                },
                "doubleDerefParam1 & 0xfffffbff": {
                    "1": "updated_double_deref_param1"
                },
                "doubleDerefParam1 | 0x100": {
                    "1": "updated_double_deref_param1_option1"
                },
                "doubleDerefParam1 | 0x200": {
                    "1": "updated_double_deref_param1_option2"
                },
                "doubleDerefParam1 | 0x400": {
                    "1": "updated_double_deref_param1_option3"
                },
                "doubleDerefParam1 | 0x800": {
                    "1": "updated_double_deref_param1_option4"
                },
                "doubleDerefParam1[1] = doubleDerefParam1[1] | 0x1000": {
                    "1": "updated_double_deref_param1_option4"
                },
                "eleventhParameter & 0x800": {
                    "1": "eleventh_parameter_option"
                },
                "int)": {
                    "1": ""
                },
                "param_1": {
                    "1": "param",
                    "14": "parameters",
                    "3": "input_data",
                    "8": "params"
                },
                "param_1[0x14]": {
                    "1": "pointer_value",
                    "2": "array_ptr"
                },
                "param_1[0x14] == (uint *)0x0": {
                    "1": "fourth_parameter_is_null"
                },
                "param_1[0xb]": {
                    "1": "ptr4",
                    "2": "parameters[11]"
                },
                "param_1[0xb] == (uint *)0x2": {
                    "1": "check_condition5"
                },
                "param_1[0xc]": {
                    "1": "ptr3",
                    "2": "params[12]"
                },
                "param_1[0xc] == (uint *)0x12": {
                    "1": "check_condition4"
                },
                "param_1[4]": {
                    "1": "param_array_element4",
                    "2": "ptr2"
                },
                "param_1[4] == (uint *)0xc000": {
                    "1": "fifth_parameter_is_c000"
                },
                "puVar1": {
                    "1": "temp_pointer",
                    "2": "temp_var1",
                    "3": "ptr",
                    "4": "temp_var",
                    "5": "value"
                },
                "puVar1 == (uint *)0x4": {
                    "1": "is_value_4"
                },
                "puVar1 == (uint *)0x8": {
                    "1": "check_condition3"
                },
                "puVar1 == (uint *)0xffff0000": {
                    "1": "is_special"
                },
                "puVar1[1]": {
                    "1": "temp_var1"
                },
                "uint": {
                    "1": "uint"
                },
                "uint *puVar1": {
                    "1": "temp"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005188"
            ],
            "code": "\nundefined4 update_flags_080043a2(uint **parameters)\n\n{\n  uint *value;\n  \n  value = parameters[11];\n  if ((*(char *)(address + 0x3d) == '\\\"') &&\n     ((flag != (uint *)0x0 || (*(char *)(address + 0x3e) != '@')))) {\n    if ((flag == (uint *)0x0) && (parameters[4] == (uint *)0xc000)) {\n      **parameters = **parameters | 0x100;\n      flag = (uint *)((int)flag + 1);\n    }\n    else {\n      if (*(short *)(address + 0x2a) == 0) {\n        **parameters = **parameters | 0x200;\n      }\n      else if (*(short *)(address + 0x2a) == 1) {\n        if (value == (uint *)0xffff0000) {\n          **parameters = **parameters & 0xfffffbff;\n          value = *parameters;\n          if ((flag[1] & 0x800) == 0) {\n            *value = *value | 0x200;\n          }\n          else {\n            *value = *value & 0xfffffbff;\n          }\n        }\n        else if (((value == (uint *)0x4) || (value == (uint *)0x8)) ||\n                (params[12] == (uint *)0x12)) {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x200;\n        }\n        else if (parameters[11] == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n        }\n      }\n      else if (*(short *)(address + 0x2a) == 2) {\n        if (parameters[11] == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters | 0x800;\n          **parameters = **parameters & 0xfffffbff;\n        }\n        value = *parameters;\n        if ((flag[1] & 0x800) != 0) {\n          flag[1] = flag[1] | 0x1000;\n        }\n      }\n      else {\n        **parameters = **parameters | 0x400;\n        value = *parameters;\n        if ((flag[1] & 0x800) != 0) {\n          flag[1] = flag[1] | 0x1000;\n        }\n      }\n      flag = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "update_flags_080043a2",
            "entrypoint": "0x080043a2",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1": "address",
                "FUN_080043a2": "update_flags_080043a2",
                "param_1": "parameters",
                "param_1[0x14]": "flag",
                "param_1[0xb]": "parameters[11]",
                "param_1[0xc]": "params[12]",
                "param_1[4]": "parameters[4]",
                "puVar1": "value",
                "puVar1[1]": "flag[1]"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800457c": {
            "additional_data": {
                "(int)(pbVar1 + 1)": {
                    "1": "updated_pointer_to_byte"
                },
                "(int)param_1 + 0x2a": {
                    "1": "data_offset"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "value_at_index42",
                    "5": "short_value"
                },
                "*(short *)((int)param_1 + 0x2a) + -1": {
                    "1": "updated_value_at_index42"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "ptr_target",
                    "2": "target_address"
                },
                "*param_1": {
                    "1": "base_pointer",
                    "2": "ptr_data"
                },
                "*pbVar1": {
                    "1": "byte_value"
                },
                "FUN_0800457c": {
                    "1": "update_byte_array_index",
                    "2": "update_pointer",
                    "3": "update_parameter",
                    "6": "update_data"
                },
                "param_1": {
                    "1": "ptr_array",
                    "2": "parameter_array",
                    "3": "parameter",
                    "4": "data",
                    "7": "array"
                },
                "param_1 + 0x2a": {
                    "1": "offset"
                },
                "param_1[9]": {
                    "1": "array_start",
                    "2": "array_element"
                },
                "pbVar1": {
                    "1": "pointer_to_byte",
                    "16": "byte_pointer",
                    "2": "byte_array",
                    "3": "current_byte",
                    "8": "byte_ptr"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005188"
            ],
            "code": "\nundefined4 update_data_0800457c(int *array)\n\n{\n  byte *byte_pointer;\n  \n  if (*(short *)((int)array + 0x2a) != 0) {\n    byte_pointer = (byte *)array_element;\n    array_element = (int)(byte_pointer + 1);\n    *(uint *)(*array + 0x10) = (uint)*byte_pointer;\n    *(short *)((int)array + 0x2a) = *(short *)((int)array + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "current_name": "update_data_0800457c",
            "entrypoint": "0x0800457c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800457c": "update_data_0800457c",
                "param_1": "array",
                "param_1[9]": "array_element",
                "pbVar1": "byte_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800459c": {
            "additional_data": {
                "(int)(puVar1 + 1)": {
                    "1": "updated_param_ptr"
                },
                "(int)param_1 + 0x2a": {
                    "1": "offset"
                },
                "*(int *)(param_1 + 0x2a)": {
                    "1": "short_ptr"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "param_list[10]",
                    "2": "count"
                },
                "*(short *)((int)param_1 + 0x2a) + -1": {
                    "1": "decremented_length"
                },
                "*(short *)((int)parameterArray + 0x2a)": {
                    "1": "short_value"
                },
                "*(undefined4 *)(*param_1 + 0x10)": {
                    "1": "source_value",
                    "2": "value_to_update"
                },
                "*(undefined4 *)(*parameterArray + 0x10)": {
                    "1": "new_value"
                },
                "*(undefined4 *)(param_1 + 0x10)": {
                    "1": "char_ptr"
                },
                "*charPointer": {
                    "1": "new_value"
                },
                "*param_1": {
                    "1": "array_value"
                },
                "*param_1_new": {
                    "1": "value_to_copy"
                },
                "*puVar1": {
                    "1": "pointer_value",
                    "2": "value_to_update"
                },
                "*puVar1_new": {
                    "1": "new_value"
                },
                "DAT_": {
                    "1": ""
                },
                "DAT_*(int)param_1+0x2a": {
                    "1": "count"
                },
                "DAT_*param_1+0x10": {
                    "1": "value_to_update"
                },
                "DAT_*puVar1": {
                    "1": "updated_value"
                },
                "DAT_080045a0": {
                    "1": "constant_offset"
                },
                "FUN_0800459c": {
                    "1": "update_and_decrement_counter",
                    "2": "update_and_decrement",
                    "3": "update_short_value",
                    "4": "update_data"
                },
                "PTR_": {
                    "1": ""
                },
                "PTR_param_1": {
                    "1": "ptr_to_array"
                },
                "PTR_param_1_9": {
                    "1": "ptr_to_counter"
                },
                "[9]": {
                    "1": "array_element"
                },
                "[9]_new": {
                    "1": "updated_array_element"
                },
                "param_1": {
                    "1": "parameter",
                    "10": "array",
                    "2": "param_list",
                    "5": "input_array"
                },
                "param_1[9]": {
                    "1": "ptr_array_element"
                },
                "parameterArray[9]": {
                    "1": "char_pointer"
                },
                "puVar1": {
                    "1": "pointer_value",
                    "2": "pointer_to_element",
                    "3": "ptr_to_value",
                    "4": "ptr"
                },
                "puVar1 + 1": {
                    "1": "updated_ptr"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005188"
            ],
            "code": "\nundefined4 update_data_0800459c(int *array)\n\n{\n  undefined *ptr;\n  \n  if (*(short *)((int)array + 0x2a) != 0) {\n    ptr = (undefined *)param_ptr;\n    param_ptr = (int)(ptr + 1);\n    *ptr = (char)*(undefined4 *)(*array + 0x10);\n    *(short *)((int)array + 0x2a) = *(short *)((int)array + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "current_name": "update_data_0800459c",
            "entrypoint": "0x0800459c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800459c": "update_data_0800459c",
                "[9]": "array_element",
                "param_1": "array",
                "param_1[9]": "param_ptr",
                "puVar1": "ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080045bc": {
            "called": [],
            "calling": [
                "FUN_080045c0"
            ],
            "code": "\nvoid FUNC_080045bc(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080045bc",
            "entrypoint": "0x080045bc",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080045bc": "FUNC_080045bc"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080045c0": {
            "additional_data": {
                "(*param_1)[1]": {
                    "1": "shifted_data_value"
                },
                "(*param_1)[2]": {
                    "1": "field2_value"
                },
                "(*param_1)[3]": {
                    "1": "field3_value"
                },
                "(*param_1)[7]": {
                    "1": "shifted_data_combined"
                },
                "(*param_1)[8]": {
                    "1": "shifted_data_result"
                },
                "(uVar2 - 1) / (uint)((int)puVar3 * 0x19) + 1 & 0xfff | 0xc000": {
                    "1": "threshold_calculation_b"
                },
                "(uVar2 - 1) / (uint)((int)puVar3 * 3) + 1 & 0xfff | 0x8000": {
                    "1": "threshold_calculation_a"
                },
                "(uVar4 * 300) / 1000": {
                    "1": "threshold_increment"
                },
                "(uVar4 + 1 & 0xfff) == 0": {
                    "1": "is_threshold_divided_by_factor"
                },
                "(uint *)((int)inputData + 0x3e)": {
                    "1": "temp_value_b"
                },
                "(uint *)0x186a0 < inputData[1]": {
                    "1": "is_threshold_greater_than_threshold_value_a"
                },
                "(uint *)0x186a1": {
                    "1": "threshold_value_a"
                },
                "(uint)((int)puVar3 * 0x19)": {
                    "1": "shift_multiplication_c"
                },
                "(uint)((int)puVar3 * 3)": {
                    "1": "shift_multiplication_b"
                },
                "(uint)((int)puVar3 << 1)": {
                    "1": "shift_multiplication_a"
                },
                "(uint)inputData[4] | (uint)inputData[3]": {
                    "1": "combined_threshold_value_b"
                },
                "(uint)inputData[5] | (uint)inputData[6]": {
                    "1": "combined_threshold_value_c"
                },
                "(uint)inputData[7] | (uint)inputData[8]": {
                    "1": "combined_threshold_value_a"
                },
                "*(undefined *)((int)inputData + 0x3d)": {
                    "1": "status_flag"
                },
                "**inputData": {
                    "1": "input_value"
                },
                "**inputData | 1": {
                    "1": "final_threshold_value"
                },
                "FUNC_080045bc()": {
                    "1": "call_function"
                },
                "FUN_080045c0": {
                    "1": "calculate_result",
                    "3": "calculate_shifted_value",
                    "7": "calculate_parameters"
                },
                "bVar1": {
                    "1": "is_small_value",
                    "2": "is_condition_true",
                    "3": "is_small",
                    "5": "is_condition_met",
                    "8": "is_less_than_threshold"
                },
                "get_shifted_data_08005a28": {
                    "8": "get_shifted_data"
                },
                "mainThresholdValue": {
                    "1": "main_threshold_value"
                },
                "param_1": {
                    "1": "shifted_data_ptr",
                    "11": "parameters",
                    "2": "input_data",
                    "4": "params"
                },
                "param_1[0x10]": {
                    "1": "temp_value_a"
                },
                "param_1[0xc]": {
                    "1": "pointer2_value"
                },
                "param_1[0xf]": {
                    "1": "param1_f"
                },
                "param_1[10]": {
                    "1": "param10_data"
                },
                "param_1[1]": {
                    "1": "param1_1"
                },
                "param_1[2]": {
                    "1": "param2_shifted_data"
                },
                "param_1[2] == (uint *)0x0": {
                    "1": "is_param2_null"
                },
                "param_1[3]": {
                    "1": "param3_data"
                },
                "param_1[4]": {
                    "1": "param4_data"
                },
                "param_1[5]": {
                    "1": "param5_data"
                },
                "param_1[6]": {
                    "1": "param1_6"
                },
                "param_1[7]": {
                    "1": "param7_data"
                },
                "param_1[8]": {
                    "1": "param8_data"
                },
                "puVar3": {
                    "1": "temp_pointer",
                    "2": "shift_factor",
                    "3": "ptr"
                },
                "uVar1": {
                    "1": "is_flag_set"
                },
                "uVar2": {
                    "1": "elapsed_time",
                    "26": "shifted_data",
                    "3": "shifted_value"
                },
                "uVar2 - 1": {
                    "1": "adjusted_shifted_data"
                },
                "uVar2 < 2000000": {
                    "1": "is_shifted_value_less_than2_m"
                },
                "uVar2 < 4000000": {
                    "1": "is_shifted_value_less_than4_m"
                },
                "uVar4": {
                    "1": "shifted_data_modified",
                    "2": "divided_value",
                    "3": "shifted_data_divided",
                    "4": "division_result",
                    "5": "result"
                },
                "uVar4 / 1000000": {
                    "1": "divided_factor"
                }
            },
            "called": [
                "FUN_08005a28",
                "FUN_080045bc"
            ],
            "calling": [
                "FUN_080077b0"
            ],
            "code": "\nundefined4 calculate_parameters_080045c0(uint **parameters)\n\n{\n  bool is_less_than_threshold;\n  uint shifted_data;\n  uint *multiplier;\n  uint result;\n  \n  if (parameters == (uint **)0x0) {\n    return 1;\n  }\n  if (*(char *)((int)parameters + 0x3d) == '\\0') {\n    *(undefined *)(parameters + 0xf) = 0;\n    FUNC_080045bc();\n  }\n  *(undefined *)((int)parameters + 0x3d) = 0x24;\n  **parameters = **parameters & 0xfffffffe;\n  shifted_data = get_shifted_data();\n  if (param1_shifted_data < (uint *)0x186a1) {\n    if (shifted_data < 2000000) {\n      is_less_than_threshold = true;\n    }\n    else {\n      is_less_than_threshold = false;\n    }\n  }\n  else {\n    is_less_than_threshold = shifted_data < 4000000;\n  }\n  if (is_less_than_threshold) {\n    return 1;\n  }\n  result = shifted_data / 1000000;\n  (*parameters)[1] = result;\n  if ((uint *)0x186a0 < param1_shifted_data) {\n    result = (result * 300) / 1000;\n  }\n  (*parameters)[8] = result + 1;\n  multiplier = param1_shifted_data;\n  if (multiplier < (uint *)0x186a1) {\n    shifted_data = (shifted_data - 1) / (uint)((int)multiplier << 1) + 1 & 0xfff;\n    if (shifted_data < 4) {\n      shifted_data = 4;\n    }\n  }\n  else {\n    if (param2_shifted_data == (uint *)0x0) {\n      result = (shifted_data - 1) / (uint)((int)multiplier * 3);\n    }\n    else {\n      result = (shifted_data - 1) / (uint)((int)multiplier * 0x19);\n    }\n    if ((result + 1 & 0xfff) == 0) {\n      shifted_data = 1;\n    }\n    else if (param2_shifted_data == (uint *)0x0) {\n      shifted_data = (shifted_data - 1) / (uint)((int)multiplier * 3) + 1 & 0xfff | 0x8000;\n    }\n    else {\n      shifted_data = (shifted_data - 1) / (uint)((int)multiplier * 0x19) + 1 & 0xfff | 0xc000;\n    }\n  }\n  (*parameters)[7] = shifted_data;\n  **parameters = (uint)param7_data | (uint)param8_data;\n  (*parameters)[2] = (uint)param4_data | (uint)param3_data;\n  (*parameters)[3] = (uint)param5_data | (uint)param6_data;\n  **parameters = **parameters | 1;\n  pointer1_value = (uint *)0x0;\n  *(undefined *)((int)parameters + 0x3d) = 0x20;\n  pointer2_value = (uint *)0x0;\n  *(undefined *)((int)parameters + 0x3e) = 0;\n  return 0;\n}\n\n",
            "current_name": "calculate_parameters_080045c0",
            "entrypoint": "0x080045c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080045c0": "calculate_parameters_080045c0",
                "bVar1": "is_less_than_threshold",
                "get_shifted_data_08005a28": "get_shifted_data",
                "param_1": "parameters",
                "param_1[0x10]": "pointer1_value",
                "param_1[0xc]": "pointer2_value",
                "param_1[1]": "param1_shifted_data",
                "param_1[2]": "param2_shifted_data",
                "param_1[3]": "param3_data",
                "param_1[4]": "param4_data",
                "param_1[5]": "param5_data",
                "param_1[6]": "param6_data",
                "param_1[7]": "param7_data",
                "param_1[8]": "param8_data",
                "puVar3": "multiplier",
                "uVar2": "shifted_data",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004728": {
            "additional_data": {
                "(*param_1)[1]": {
                    "1": "message_value2"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "char_check"
                },
                "*(char *)(param_1 + 0xf)": {
                    "1": "flag_check"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "char_value1"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "char_value2"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "flag_value"
                },
                "*(undefined2 *)((int)param_1 + 0x2a)": {
                    "1": "value"
                },
                "**param_1": {
                    "1": "message_value"
                },
                "*puVar2 & 1": {
                    "1": "bit_check"
                },
                "FUN_08004728": {
                    "1": "process_input_data",
                    "14": "process_data",
                    "2": "check_and_initialize",
                    "4": "process_input"
                },
                "local_c": {
                    "1": "iteration_count",
                    "20": "counter",
                    "9": "count"
                },
                "param_1": {
                    "1": "input_array",
                    "11": "data",
                    "2": "param_array",
                    "5": "data_ptr",
                    "7": "input_data"
                },
                "param_1[0x10]": {
                    "1": "pointer1"
                },
                "param_1[0x11]": {
                    "1": "parameter2"
                },
                "param_1[0xb]": {
                    "1": "pointer3"
                },
                "param_1[0xc]": {
                    "1": "pointer2"
                },
                "param_1[9]": {
                    "1": "parameter1"
                },
                "param_2": {
                    "1": "input_ptr",
                    "2": "value1",
                    "3": "param_a",
                    "4": "param2",
                    "5": "input1"
                },
                "param_3": {
                    "1": "input_2",
                    "2": "value2",
                    "3": "param_b",
                    "5": "param3"
                },
                "param_4": {
                    "1": "param",
                    "2": "input3",
                    "3": "param_c",
                    "4": "param_value",
                    "6": "param4"
                },
                "puVar2": {
                    "1": "ptr3",
                    "16": "ptr",
                    "2": "ptr_var",
                    "7": "temp_ptr"
                },
                "uVar1": {
                    "10": "return_value",
                    "21": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_08007e74"
            ],
            "code": "\nundefined4 process_data_08004728(uint **data,uint *input1,uint *param3,undefined2 flag)\n\n{\n  undefined4 result;\n  uint *ptr;\n  int counter;\n  \n  if (*(char *)((int)data + 0x3d) == ' ') {\n    counter = (DAT_20000018 / 25000) * 0x19;\n    do {\n      if (counter == 0) {\n        pointer2 = (uint *)0x0;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        *(undefined *)(data + 0xf) = 0;\n        return 3;\n      }\n      ptr = *data;\n      counter = counter + -1;\n    } while ((ptr[6] & 2) != 0);\n    if (*(char *)(data + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(data + 0xf) = 1;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **data = **data & 0xfffff7ff;\n      *(undefined *)((int)data + 0x3d) = 0x21;\n      *(undefined *)((int)data + 0x3e) = 0x10;\n      result = 0;\n      pointer1 = (uint *)0x0;\n      parameter1 = param3;\n      *(undefined2 *)((int)data + 0x2a) = flag;\n      pointer3 = (uint *)0xffff0000;\n      *(undefined2 *)(data + 10) = *(undefined2 *)((int)data + 0x2a);\n      parameter2 = input1;\n      **data = **data | 0x100;\n      *(undefined *)(data + 0xf) = 0;\n      (*data)[1] = (*data)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_08004728",
            "entrypoint": "0x08004728",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004728": "process_data_08004728",
                "local_c": "counter",
                "param_1": "data",
                "param_1[0x10]": "pointer1",
                "param_1[0x11]": "parameter2",
                "param_1[0xb]": "pointer3",
                "param_1[0xc]": "pointer2",
                "param_1[9]": "parameter1",
                "param_2": "input1",
                "param_3": "param3",
                "param_4": "flag",
                "puVar2": "ptr",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080047f4": {
            "additional_data": {
                "FUN_080047f4": {
                    "1": "validate_parameters",
                    "16": "process_data",
                    "2": "process_params",
                    "4": "process_input"
                },
                "local_c": {
                    "1": "iteration_count",
                    "2": "count",
                    "25": "counter",
                    "3": "loop_counter"
                },
                "param_1": {
                    "1": "permissions",
                    "11": "data",
                    "2": "data_pointer",
                    "3": "input_array",
                    "5": "input_data"
                },
                "param_2": {
                    "1": "result_1",
                    "2": "param_pointer1",
                    "3": "input1",
                    "4": "param_ptr1",
                    "9": "param1"
                },
                "param_3": {
                    "1": "result_2",
                    "2": "param_pointer2",
                    "3": "param3",
                    "4": "param_ptr2",
                    "9": "param2"
                },
                "param_4": {
                    "1": "additional_info",
                    "2": "param2",
                    "3": "param_value",
                    "5": "param4",
                    "9": "param3"
                },
                "puVar2": {
                    "1": "current_pointer",
                    "16": "ptr",
                    "2": "ptr_var",
                    "6": "temp_ptr"
                },
                "uVar1": {
                    "1": "status",
                    "12": "return_value",
                    "18": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_08007f0e"
            ],
            "code": "\nundefined4 process_data_080047f4(uint **data,uint *param1,uint *param2,undefined2 param3)\n\n{\n  undefined4 result;\n  uint *ptr;\n  int counter;\n  \n  if (*(char *)((int)data + 0x3d) == ' ') {\n    counter = (DAT_20000018 / 25000) * 0x19;\n    do {\n      if (counter == 0) {\n        data[0xc] = (uint *)0x0;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        *(undefined *)(data + 0xf) = 0;\n        return 3;\n      }\n      ptr = *data;\n      counter = counter + -1;\n    } while ((ptr[6] & 2) != 0);\n    if (*(char *)(data + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(data + 0xf) = 1;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **data = **data & 0xfffff7ff;\n      *(undefined *)((int)data + 0x3d) = 0x22;\n      *(undefined *)((int)data + 0x3e) = 0x10;\n      result = 0;\n      data[0x10] = (uint *)0x0;\n      data[9] = param2;\n      *(undefined2 *)((int)data + 0x2a) = param3;\n      data[0xb] = (uint *)0xffff0000;\n      *(undefined2 *)(data + 10) = *(undefined2 *)((int)data + 0x2a);\n      data[0x11] = param1;\n      **data = **data | 0x400;\n      **data = **data | 0x100;\n      *(undefined *)(data + 0xf) = 0;\n      (*data)[1] = (*data)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_080047f4",
            "entrypoint": "0x080047f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080047f4": "process_data_080047f4",
                "local_c": "counter",
                "param_1": "data",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "puVar2": "ptr",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080048c8": {
            "additional_data": {
                "(*param_1)[1]": {
                    "1": "data_ptr_1"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "char_at_boundary",
                    "3": "char_value"
                },
                "*(char *)(param_1 + 0xf)": {
                    "1": "is_flag_set",
                    "2": "char_value2"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "input_length_new",
                    "3": "short_value"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "boundary_char"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "new_character"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "flag_ptr"
                },
                "*(undefined2 *)(param_1 + 10)": {
                    "1": "short_count_10"
                },
                "**param_1": {
                    "1": "value_of_first_item"
                },
                "*param_1": {
                    "1": "ptr_param_1"
                },
                "FUN_080048c8": {
                    "1": "update_parameters",
                    "2": "check_and_set_flags",
                    "3": "process_params",
                    "4": "initialize_parameters"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "function_data",
                    "3": "parameter1",
                    "4": "parameters"
                },
                "param_1[0x10]": {
                    "1": "dummy"
                },
                "param_1[0xb]": {
                    "1": "param2_pointer"
                },
                "param_1[9]": {
                    "1": "param_1_9"
                },
                "param_2": {
                    "1": "input_ptr",
                    "2": "input_param",
                    "3": "param_ptr",
                    "4": "parameter2"
                },
                "param_3": {
                    "1": "parameter_3",
                    "2": "length",
                    "3": "parameter3",
                    "4": "size"
                },
                "param_4": {
                    "1": "param_c",
                    "2": "output_param",
                    "4": "result_ptr"
                },
                "puVar2": {
                    "1": "flag_value",
                    "5": "pointer_var",
                    "6": "ptr"
                },
                "uVar1": {
                    "20": "result",
                    "4": "status",
                    "7": "return_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08007fa0"
            ],
            "code": "\nundefined4 initialize_parameters_080048c8(uint **parameters,uint *parameter2,int count,uint *parameter4)\n\n{\n  undefined4 result;\n  uint *ptr;\n  \n  if (*(char *)((int)parameters + 0x3d) == '(') {\n    if (parameter2 == (uint *)0x0) {\n      result = 1;\n    }\n    else if (count == 0) {\n      result = 1;\n    }\n    else if (*(char *)(parameters + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(parameters + 0xf) = 1;\n      ptr = *parameters;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **parameters = **parameters & 0xfffff7ff;\n      *(undefined *)((int)parameters + 0x3d) = 0x29;\n      *(undefined *)((int)parameters + 0x3e) = 0x20;\n      result = 0;\n      temp_param1 = (uint *)0x0;\n      temp_param2 = parameter2;\n      *(short *)((int)parameters + 0x2a) = (short)count;\n      temp_param3 = parameter4;\n      *(undefined2 *)(parameters + 10) = *(undefined2 *)((int)parameters + 0x2a);\n      *(undefined *)(parameters + 0xf) = 0;\n      (*parameters)[1] = (*parameters)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "current_name": "initialize_parameters_080048c8",
            "entrypoint": "0x080048c8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080048c8": "initialize_parameters_080048c8",
                "param_1": "parameters",
                "param_1[0x10]": "temp_param1",
                "param_1[0xb]": "temp_param3",
                "param_1[9]": "temp_param2",
                "param_2": "parameter2",
                "param_3": "count",
                "param_4": "parameter4",
                "puVar2": "ptr",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004954": {
            "additional_data": {
                "& 0xfffff7ff": {
                    "1": "bitwise_and_mask"
                },
                "& 1": {
                    "1": "bitwise_and"
                },
                "'('": {
                    "1": "opening_parenthesis"
                },
                "'\\x01'": {
                    "1": "non_zero_char"
                },
                "(*param_1)": {
                    "1": "ptr_value"
                },
                "(*param_1)[1]": {
                    "1": "value2"
                },
                "(*puVar2 & 1)": {
                    "1": "is_bit_set"
                },
                "(*puVar2 & 1) == 0": {
                    "1": "is_bit_set"
                },
                "(int)param_1 + 0x3d": {
                    "1": "char_var1"
                },
                "(short)param_3": {
                    "1": "short_param"
                },
                "(uint *)0x0": {
                    "1": "null"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "check_char",
                    "2": "char_value"
                },
                "*(char *)(param_1 + 0xf)": {
                    "1": "char_param1",
                    "2": "char_val2"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "short_val"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "undefined_val2"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "undefined_val2"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "undefined_val4"
                },
                "*(undefined2 *)((int)param_1 + 0x2a)": {
                    "1": "param_count_short_2"
                },
                "*(undefined2 *)(param_1 + 10)": {
                    "1": "updated_input3",
                    "2": "undefined2_val"
                },
                "**param_1": {
                    "1": "ptr_value_value"
                },
                "*param_1": {
                    "1": "temp_var1"
                },
                "*puVar2": {
                    "1": "var_pointer"
                },
                "0x10": {
                    "1": "offset_10"
                },
                "0x20": {
                    "1": "space"
                },
                "0x2a": {
                    "1": "char_value1"
                },
                "0xb": {
                    "1": "offset_b"
                },
                "0xf": {
                    "1": "offset_f"
                },
                "0xfffff7ff": {
                    "1": "mask"
                },
                "1": {
                    "1": "bit_value",
                    "2": "true"
                },
                "2": {
                    "1": "false"
                },
                "FUN_08004954": {
                    "1": "decompile_and_improve",
                    "2": "update_parameters",
                    "4": "validate_input"
                },
                "charVal2 == '\\x01'": {
                    "1": "is_char_val2_one"
                },
                "param_1": {
                    "1": "input_ptr",
                    "2": "input_data",
                    "3": "param_list"
                },
                "param_1 + 0xf": {
                    "1": "data_pointer_plus_f"
                },
                "param_1[0x10]": {
                    "1": "param_array[16]"
                },
                "param_1[0xb]": {
                    "1": "output_data_ptr"
                },
                "param_1[9]": {
                    "1": "data_pointer_plus9"
                },
                "param_2": {
                    "1": "input_pointer",
                    "2": "input1",
                    "3": "param2"
                },
                "param_3": {
                    "1": "value2",
                    "2": "length",
                    "3": "input_size",
                    "5": "size"
                },
                "param_4": {
                    "1": "param_pointer3",
                    "2": "output",
                    "3": "output_buffer",
                    "4": "result_ptr"
                },
                "puVar2": {
                    "1": "ptr_value",
                    "13": "ptr",
                    "2": "first_pointer",
                    "3": "temp_ptr"
                },
                "uVar1": {
                    "22": "result",
                    "3": "status",
                    "5": "return_value"
                },
                "| 0x700": {
                    "1": "bitwise_or_700"
                },
                "| 1": {
                    "1": "bitwise_or_1"
                }
            },
            "called": [],
            "calling": [
                "FUN_08007fa0"
            ],
            "code": "\nundefined4 validate_input_08004954(uint **param_array,uint *param2,int size,uint *result_ptr)\n\n{\n  undefined4 result;\n  uint *ptr;\n  \n  if (*(char *)((int)param_array + 0x3d) == opening_parenthesis) {\n    if (param2 == (uint *)0x0) {\n      result = 1;\n    }\n    else if (size == 0) {\n      result = 1;\n    }\n    else if (*(char *)(param_array + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(param_array + 0xf) = 1;\n      ptr = *param_array;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **param_array = **param_array & 0xfffff7ff;\n      *(undefined *)((int)param_array + 0x3d) = 0x2a;\n      *(undefined *)((int)param_array + 0x3e) = 0x20;\n      result = 0;\n      updated_input1 = (uint *)0x0;\n      updated_input2 = param2;\n      *(short *)((int)param_array + 0x2a) = short_param3;\n      updated_input4 = result_ptr;\n      *(undefined2 *)(param_array + 10) = *(undefined2 *)((int)param_array + 0x2a);\n      *(undefined *)(param_array + 0xf) = 0;\n      (*param_array)[1] = (*param_array)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "current_name": "validate_input_08004954",
            "entrypoint": "0x08004954",
            "imported": false,
            "improved": true,
            "renaming": {
                "'('": "opening_parenthesis",
                "(short)param_3": "short_param3",
                "FUN_08004954": "validate_input_08004954",
                "param_1": "param_array",
                "param_1[0x10]": "updated_input1",
                "param_1[0xb]": "updated_input4",
                "param_1[9]": "updated_input2",
                "param_2": "param2",
                "param_3": "size",
                "param_4": "result_ptr",
                "puVar2": "ptr",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080049e0": {
            "additional_data": {
                "(*(char *)((int)param_1 + 0x3d) != ' ')": {
                    "1": "value_at_offset_is_not_space"
                },
                "(**dataStructure)": {
                    "1": "dereferenced_value_at_ptr"
                },
                "(*param_1)[1]": {
                    "1": "second_value_in_data_structure",
                    "2": "second_value",
                    "3": "second_element"
                },
                "(*param_1)[1] = (*param_1)[1] | 0x300": {
                    "1": "set_bit_array"
                },
                "(*puVar1 & 1)": {
                    "1": "is_bit_set"
                },
                "(*puVar1 & 1) == 0": {
                    "1": "first_element_value_is_even"
                },
                "(int)param_1 + 0x3d": {
                    "1": "offset"
                },
                "*(char *)((int)dataStructure + 0x3d)": {
                    "1": "current_char"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "flag_byte",
                    "2": "value_at_offset"
                },
                "*(int)param_1": {
                    "1": "pointer_value"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "flag_byte",
                    "2": "new_value_at_offset"
                },
                "**param_1": {
                    "1": "flag_value"
                },
                "**param_1 = **param_1 | 0x400": {
                    "1": "update_double_deref_data_pointer"
                },
                "**parameters": {
                    "1": "double_pointer"
                },
                "*dataStructure": {
                    "1": "value_at_ptr"
                },
                "*param_1": {
                    "1": "ptr_value1"
                },
                "*param_1 = *param_1 | 0x400": {
                    "1": "set_bit_double_ptr"
                },
                "*parameters": {
                    "1": "parameter"
                },
                "*puVar1": {
                    "1": "current_value",
                    "2": "value"
                },
                "*puVar1 = *puVar1 | 1": {
                    "1": "set_bit_one"
                },
                "0x28": {
                    "1": "new_offset_value"
                },
                "0x300": {
                    "1": "bit_mask3"
                },
                "0x400": {
                    "1": "new_value2"
                },
                "1": {
                    "1": "flag_bit"
                },
                "FUN_080049e0": {
                    "1": "update_flags_and_values",
                    "2": "initialize_parameters",
                    "4": "initialize_flags",
                    "5": "initialize_data_structure",
                    "9": "initialize_data"
                },
                "char *parameters + 0x3d": {
                    "1": "character"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "permissions",
                    "3": "parameters",
                    "4": "data",
                    "5": "flags"
                },
                "puVar1": {
                    "1": "temp_pointer",
                    "2": "pointer_to_data",
                    "5": "ptr"
                },
                "return 0": {
                    "1": "success"
                },
                "return 2": {
                    "1": "invalid_char"
                },
                "undefined *)((int)param_1 + 0x3d)": {
                    "1": "zero_byte"
                }
            },
            "called": [],
            "calling": [
                "FUN_08007f7c",
                "FUN_08008020",
                "FUN_08007f8e",
                "FUN_08007ff0"
            ],
            "code": "\nundefined4 initialize_data_080049e0(uint **flags)\n\n{\n  uint *pointer;\n  \n  if (*(char *)((int)flags + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)flags + 0x3d) = 0x28;\n  pointer = *flags;\n  if ((*pointer & 1) == 0) {\n    *pointer = *pointer | 1;\n  }\n  **flags = **flags | 0x400;\n  (*flags)[1] = (*flags)[1] | 0x300;\n  return 0;\n}\n\n",
            "current_name": "initialize_data_080049e0",
            "entrypoint": "0x080049e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080049e0": "initialize_data_080049e0",
                "param_1": "flags",
                "puVar1": "pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004a1e": {
            "called": [],
            "calling": [
                "FUN_08004ccc",
                "FUN_08004b82"
            ],
            "code": "\nvoid FUNC_08004a1e(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08004a1e",
            "entrypoint": "0x08004a1e",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08004a1e": "FUNC_08004a1e"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08004a20": {
            "called": [],
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "code": "\nvoid FUNC_08004a20(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08004a20",
            "entrypoint": "0x08004a20",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08004a20": "FUNC_08004a20"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08004a22": {
            "called": [],
            "calling": [
                "FUN_08004a24",
                "FUN_08004aec"
            ],
            "code": "\nvoid FUNC_08004a22(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08004a22",
            "entrypoint": "0x08004a22",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08004a22": "FUNC_08004a22"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08004a24": {
            "additional_data": {
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "c_var1"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "count"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "uint_value"
                },
                "*(uint *)(*param_1 + 4)": {
                    "1": "uint_value"
                },
                "*(uint *)(*param_1 + 4) & 0xfffffbff": {
                    "1": "new_value"
                },
                "*param_1": {
                    "1": "pointer"
                },
                "*param_1 + 0x10": {
                    "1": "destination"
                },
                "*param_1 + 4": {
                    "1": "mask"
                },
                "FUNC_08004a22": {
                    "1": "some_function",
                    "2": "helper_function"
                },
                "FUN_08004a24": {
                    "1": "parse_function",
                    "2": "decode_and_modify_data",
                    "3": "update_data",
                    "4": "decode_data",
                    "8": "process_data"
                },
                "cVar1": {
                    "1": "closing_parenthesis",
                    "12": "character",
                    "3": "current_char",
                    "6": "char_value"
                },
                "param_1": {
                    "1": "message",
                    "11": "data",
                    "2": "input_data",
                    "5": "data_array"
                },
                "param_1[0xc]": {
                    "1": "value"
                },
                "pbVar2": {
                    "1": "bytes_array",
                    "12": "byte_ptr",
                    "13": "byte_pointer",
                    "2": "byte_array"
                }
            },
            "called": [
                "FUN_08004a22"
            ],
            "calling": [
                "FUN_08005188"
            ],
            "code": "\nundefined4 process_data_08004a24(int *data)\n\n{\n  char character;\n  byte *byte_pointer;\n  \n  character = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    byte_pointer = (byte *)data[9];\n    data[9] = (int)(byte_pointer + 1);\n    *(uint *)(*data + 0x10) = (uint)*byte_pointer;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (character == ')')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      value = 0x21;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      FUNC_08004a22();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_08004a24",
            "entrypoint": "0x08004a24",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004a24": "process_data_08004a24",
                "cVar1": "character",
                "param_1": "data",
                "param_1[0xc]": "value",
                "pbVar2": "byte_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004a74": {
            "called": [],
            "calling": [
                "FUN_08004a76",
                "FUN_08005084"
            ],
            "code": "\nvoid FUNC_08004a74(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08004a74",
            "entrypoint": "0x08004a74",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08004a74": "FUNC_08004a74"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08004a76": {
            "additional_data": {
                "(cVar1 == '*')": {
                    "1": "is_value_an_asterisk"
                },
                "(char)*(undefined4 *)(*param_1 + 0x10)": {
                    "1": "value_in_first_array_index"
                },
                "(int)(puVar2 + 1)": {
                    "1": "character_buffer_next"
                },
                "(int)param_1": {
                    "1": "character_data_ptr"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "value_to_update"
                },
                "*(int)param_1 + 0x2a": {
                    "1": "count_offset"
                },
                "*(int)param_1 + 0x3d": {
                    "1": "flag_offset"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "character_count",
                    "2": "short_value_at_index",
                    "3": "counter"
                },
                "*(short *)((int)param_1 + 0x2a) + -1": {
                    "1": "updated_counter"
                },
                "*(short *)((int)param_1 + 0x2a) == 0": {
                    "1": "is_short_value_zero"
                },
                "*(uint *)(*param + 4)": {
                    "1": "get_value_of_ptr_to_param2"
                },
                "*(uint *)(*param_1 + 4)": {
                    "1": "flags",
                    "2": "flag_value"
                },
                "*(uint *)(*param_1 + 4) & 0xfffffbff": {
                    "1": "updated_flag_value",
                    "2": "updated_ptr_value"
                },
                "*(uint *)(*param_1 + 4) = *(uint *)(*param_1 + 4) & 0xfffffbff": {
                    "1": "clear_bit_in_first_array"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "flag_value"
                },
                "*(undefined *)((int)param_1 + 0x3d) = 0x28": {
                    "1": "set_char_value_at_index"
                },
                "*(undefined4 *)(*param + 0x10)": {
                    "1": "get_value_of_ptr_to_param"
                },
                "*(undefined4 *)(*param_1 + 0x10)": {
                    "1": "char_to_assign",
                    "2": "source_value"
                },
                "*param_1": {
                    "1": "int_pointer"
                },
                "*puVar2": {
                    "1": "new_char_value",
                    "3": "value"
                },
                "FUNC_08004a74": {
                    "1": "some_function",
                    "2": "do_something"
                },
                "FUNC_08004a74()": {
                    "1": "execute_function"
                },
                "FUN_08004a76": {
                    "1": "perform_operation",
                    "10": "process_data",
                    "2": "process_param",
                    "3": "update_data"
                },
                "cVar1": {
                    "1": "last_character",
                    "10": "char_value",
                    "2": "char_var",
                    "3": "current_char"
                },
                "cVar1 == '*'": {
                    "1": "is_last_char_asterisk"
                },
                "param_1": {
                    "1": "character_ptr",
                    "10": "data",
                    "2": "param",
                    "7": "input_array"
                },
                "param_1[0xc]": {
                    "1": "result"
                },
                "param_1[0xc] = 0x22": {
                    "1": "set_to_integer_value"
                },
                "param_1[9]": {
                    "1": "ptr_array"
                },
                "puVar2": {
                    "1": "character_ptr_next",
                    "11": "ptr",
                    "2": "pointer",
                    "3": "char_pointer"
                },
                "puVar2 + 1": {
                    "1": "next_char_address"
                },
                "undefined4 *)(*param_1 + 0x10)": {
                    "1": "casted_value"
                },
                "value": {
                    "1": "array[9]"
                }
            },
            "called": [
                "FUN_08004a74"
            ],
            "calling": [
                "FUN_08005188"
            ],
            "code": "\nundefined4 process_data_08004a76(int *data)\n\n{\n  char char_value;\n  undefined *ptr;\n  \n  char_value = *(char *)(character_data_ptr + 0x3d);\n  if (*(short *)(character_data_ptr + 0x2a) != 0) {\n    ptr = (undefined *)character_buffer;\n    character_buffer = (int)(ptr + 1);\n    *ptr = (char)*(undefined4 *)(*data + 0x10);\n    *(short *)(character_data_ptr + 0x2a) = *(short *)(character_data_ptr + 0x2a) + -1;\n    if ((*(short *)(character_data_ptr + 0x2a) == 0) && (char_value == '*')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      status = 0x22;\n      *(undefined *)(character_data_ptr + 0x3d) = 0x28;\n      FUNC_08004a74();\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_08004a76",
            "entrypoint": "0x08004a76",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1": "character_data_ptr",
                "FUN_08004a76": "process_data_08004a76",
                "cVar1": "char_value",
                "param_1": "data",
                "param_1[0xc]": "status",
                "param_1[9]": "character_buffer",
                "puVar2": "ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004ac2": {
            "additional_data": {
                "FUN_08004ac2": {
                    "1": "process_and_return_input",
                    "2": "process_input_wrapper",
                    "20": "process_input",
                    "3": "process_input_from_binary"
                },
                "param_1": {
                    "1": "arg_array",
                    "6": "input",
                    "7": "input_ptr",
                    "9": "input_data"
                },
                "param_2": {
                    "1": "unused_param_1",
                    "10": "param2",
                    "2": "arg1",
                    "3": "arg2",
                    "7": "param_2"
                },
                "param_3": {
                    "1": "var2",
                    "10": "param3",
                    "2": "arg2",
                    "3": "arg3",
                    "7": "param_3"
                },
                "param_4": {
                    "1": "output",
                    "10": "param4",
                    "2": "arg3",
                    "3": "arg4",
                    "9": "param_4"
                },
                "process_input_08007fa0": {
                    "1": "process_input_function"
                },
                "uVar1": {
                    "1": "selected_data",
                    "2": "result",
                    "21": "selected_value"
                },
                "uVar2": {
                    "1": "data_1",
                    "14": "flag",
                    "2": "value",
                    "7": "flags"
                }
            },
            "called": [
                "FUN_08007fa0"
            ],
            "calling": [
                "FUN_08005188"
            ],
            "code": "\nundefined4 process_input_08004ac2(int *input_data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 selected_value;\n  uint flag;\n  \n  flag = *(uint *)(*input_data + 0x18);\n  if ((flag & 0x80) == 0) {\n    selected_value = *(undefined2 *)(input_data + 3);\n  }\n  else {\n    selected_value = *(undefined2 *)(input_data + 6);\n  }\n  process_input_08004ac2_function(input_data,(*(uint *)(*input_data + 0x18) & 4) == 0,selected_value,flag,param4);\n  return 0;\n}\n\n",
            "current_name": "process_input_08004ac2",
            "entrypoint": "0x08004ac2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004ac2": "process_input_08004ac2",
                "param_1": "input_data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "process_input_08007fa0": "process_input_function",
                "uVar1": "selected_value",
                "uVar2": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004aec": {
            "additional_data": {
                "'!'": {
                    "1": "exclamation_mark"
                },
                "'('": {
                    "1": "opening_bracket"
                },
                "(*(char *)((int)param_1 + 0x3d)": {
                    "1": "char_value"
                },
                "(*(char*)((int)param_1 + 0x3d) == '!')": {
                    "1": "is_exclamation"
                },
                "(*(char*)((int)param_1 + 0x3d) == '(')": {
                    "1": "is_parenthesis"
                },
                "(*param_1)": {
                    "1": "pointer_value"
                },
                "(*param_1)[1]": {
                    "1": "params[1]",
                    "2": "param1_index1"
                },
                "(*param_1)[5]": {
                    "1": "sixth_element_of_ptr_param_array",
                    "2": "param1_index5"
                },
                "(int)param_1 + 0x3d": {
                    "1": "pointer_offset"
                },
                "(uint *)0x0": {
                    "1": "null_value",
                    "2": "zero"
                },
                "(uint *)0x21": {
                    "1": "twenty_one"
                },
                "(uint *)0x4": {
                    "1": "four_ptr",
                    "2": "four"
                },
                "(uint *)0x8": {
                    "1": "value8",
                    "2": "eight"
                },
                "(uint *)0xffff0000": {
                    "1": "mask_ptr"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "character_value",
                    "2": "param_char",
                    "3": "character"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "status"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "undefined_at_param_ptr_3e"
                },
                "**param_1": {
                    "1": "value_at_param_ptr"
                },
                "0x0": {
                    "1": "null_value"
                },
                "0x20": {
                    "1": "space_value",
                    "2": "space"
                },
                "0xfffff8ff": {
                    "1": "second_element_mask"
                },
                "0xfffffbff": {
                    "1": "fifth_and_sixth_elements_mask"
                },
                "FUNC_08004a22": {
                    "1": "perform_operation",
                    "2": "execute_function_b",
                    "4": "perform_action"
                },
                "FUNC_08004a22()": {
                    "1": "perform_operation"
                },
                "FUN_08004aec": {
                    "1": "handle_parameter",
                    "12": "process_param",
                    "3": "handle_param",
                    "6": "process_parameter"
                },
                "FUN_08007ff0": {
                    "1": "execute_function_a"
                },
                "data at 0x3d": {
                    "1": "char_at_0x3d"
                },
                "execute_function_08007ff0": {
                    "1": "execute_requested_function",
                    "2": "execute_function1",
                    "6": "execute_function"
                },
                "execute_function_08007ff0()": {
                    "1": "execute_special_function"
                },
                "param_1": {
                    "1": "param_list",
                    "2": "input_params",
                    "4": "param",
                    "6": "parameter"
                },
                "param_1[0xb]": {
                    "1": "condition_check"
                },
                "param_1[0xc]": {
                    "1": "parameters[12]"
                }
            },
            "called": [
                "FUN_08004a22",
                "FUN_08007ff0"
            ],
            "calling": [
                "FUN_080052f0"
            ],
            "code": "\nundefined4 process_param_08004aec(uint **parameter)\n\n{\n  if (((param_list[11] == (uint *)0x4) || (param_list[11] == (uint *)0x8)) &&\n     (*(char *)((int)parameter + 0x3d) == opening_bracket)) {\n    param_list[11] = (uint *)0xffff0000;\n    (*parameter)[1] = (*parameter)[1] & 0xfffff8ff;\n    (*parameter)[5] = 0xfffffbff;\n    **parameter = **parameter & 0xfffffbff;\n    param_list[12] = (uint *)0x0;\n    *(undefined *)((int)parameter + 0x3d) = 0x20;\n    *(undefined *)((int)parameter + 0x3e) = 0;\n    execute_special_function;\n  }\n  else if (*(char *)((int)parameter + 0x3d) == exclamation_mark) {\n    param_list[11] = (uint *)0xffff0000;\n    param_list[12] = (uint *)0x21;\n    *(undefined *)((int)parameter + 0x3d) = 0x20;\n    *(undefined *)((int)parameter + 0x3e) = 0;\n    (*parameter)[1] = (*parameter)[1] & 0xfffff8ff;\n    (*parameter)[5] = 0xfffffbff;\n    **parameter = **parameter & 0xfffffbff;\n    FUNC_08004a22();\n  }\n  else {\n    (*parameter)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "current_name": "process_param_08004aec",
            "entrypoint": "0x08004aec",
            "imported": false,
            "improved": true,
            "renaming": {
                "'!'": "exclamation_mark",
                "'('": "opening_bracket",
                "FUN_08004aec": "process_param_08004aec",
                "execute_function_08007ff0": "execute_function",
                "execute_function_08007ff0()": "execute_special_function",
                "param_1": "parameter",
                "param_1[0xb]": "param_list[11]",
                "param_1[0xc]": "param_list[12]"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004b80": {
            "called": [],
            "calling": [
                "FUN_08004ccc",
                "FUN_08004b82"
            ],
            "code": "\nvoid FUNC_08004b80(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08004b80",
            "entrypoint": "0x08004b80",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08004b80": "FUNC_08004b80"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08004b82": {
            "additional_data": {
                "(*param_1)[1]": {
                    "1": "pointer->[1]"
                },
                "(*param_1)[4]": {
                    "1": "pointer->[4]"
                },
                "(char *)((int)param_1 + 0x3d)": {
                    "1": "char_ptr1"
                },
                "(int)param_1 + 0x2a)": {
                    "1": "char_ptr3"
                },
                "(int)param_1 + 0x3e)": {
                    "1": "char_ptr2"
                },
                "(int)param_1[0x12]": {
                    "1": "param112"
                },
                "(int)parameter_11 + 1": {
                    "1": "integer_parameter_11_plus_1"
                },
                "(int)parameter_11 + 2": {
                    "1": "integer_parameter_11_plus_2"
                },
                "(int)parameter_9 + 1": {
                    "1": "integer_parameter_9_plus_1"
                },
                "(int)parameter_9 + 1 + 1": {
                    "1": "integer_parameter_9_plus_1_plus_1"
                },
                "(int)parameter_9 + 1 + 2": {
                    "1": "integer_parameter_9_plus_1_plus_2"
                },
                "(int)parameter_9 - 1": {
                    "1": "integer_parameter_9_minus_1"
                },
                "(int)parameters[0x12]": {
                    "1": "integer_parameter_18"
                },
                "(int)parameters[0x13]": {
                    "1": "integer_parameter_19"
                },
                "(int)parameters[0x14]": {
                    "1": "integer_parameter_20"
                },
                "(int)parameters[9]": {
                    "1": "integer_parameter_9"
                },
                "(short *)(param_1 + 10)": {
                    "1": "short_ptr1"
                },
                "(uint *)((int)param_1[0x14] + 1)": {
                    "1": "ptr14_plus1"
                },
                "(uint *)((int)param_1[0x14] + 2)": {
                    "1": "ptr14_plus2"
                },
                "(uint *)((int)puVar2 + 1)": {
                    "1": "ptr_plus1"
                },
                "(uint *)0x0": {
                    "1": "null"
                },
                "(uint *)0x1": {
                    "1": "null"
                },
                "(uint *)0x100": {
                    "1": "null"
                },
                "(uint *)0x11": {
                    "1": "null"
                },
                "(uint *)0x2": {
                    "1": "null"
                },
                "(uint *)0x4": {
                    "1": "null"
                },
                "(uint *)0x8": {
                    "1": "ptr8"
                },
                "(uint *)0xffff0000": {
                    "1": "ptr_ffff0000"
                },
                "(uint)*(byte *)puVar2": {
                    "1": "byte_value"
                },
                "*(char *)((int)param_1 + 0x2a)": {
                    "1": "deref_char_ptr2"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "deref_char_ptr1"
                },
                "*(char *)(parameter_plus_0x3d + 1)": {
                    "1": "character_variable_plus_1"
                },
                "*(char *)(parameter_plus_0x3d + 2)": {
                    "1": "character_variable_plus_2"
                },
                "*(char *)(parameter_plus_0x3d + 3)": {
                    "1": "character_variable_plus_3"
                },
                "*(char *)(parameter_plus_0x3d + 4)": {
                    "1": "character_variable_plus_4"
                },
                "*(char *)(parameter_plus_0x3d + 5)": {
                    "1": "character_variable_plus_5"
                },
                "*(char *)(parameter_plus_0x3d + 6)": {
                    "1": "character_variable_plus_6"
                },
                "*(char *)(parameter_plus_0x3d + 7)": {
                    "1": "character_variable_plus_7"
                },
                "*(char *)parameter_plus_0x3d": {
                    "1": "character_variable"
                },
                "*(short *)((int)parameters + 0x2a)": {
                    "1": "short_variable_plus_0x2a"
                },
                "*(short *)((int)parameters + 0x3c)": {
                    "1": "short_variable"
                },
                "*(short *)((int)parameters + 0x3e)": {
                    "1": "short_variable_plus_0x1e"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "char1"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "char2"
                },
                "**param_1": {
                    "1": "double_ptr"
                },
                "@": {
                    "1": "at_symbol"
                },
                "FUNC_08004a1e": {
                    "1": "handle_case2",
                    "2": "do_something_else",
                    "3": "function2"
                },
                "FUNC_08004a1e()": {
                    "1": "function_b()"
                },
                "FUNC_08004b80": {
                    "1": "execute_function1",
                    "2": "do_something",
                    "3": "function_a"
                },
                "FUNC_08004b80()": {
                    "1": "function_a()"
                },
                "FUN_08004b82": {
                    "1": "process_code",
                    "2": "process_function",
                    "4": "process_param",
                    "5": "process_data"
                },
                "PARAM_1_OFFSET_2A": {
                    "1": "short_value_offset"
                },
                "PARAM_1_OFFSET_2A_SHIFTED": {
                    "1": "updated_short_value_offset"
                },
                "PARAM_1_OFFSET_3D": {
                    "1": "char_value_offset"
                },
                "PARAM_1_OFFSET_3E": {
                    "1": "byte_value_offset"
                },
                "cVar1": {
                    "1": "command_char",
                    "10": "character",
                    "2": "char1",
                    "3": "current_char",
                    "7": "char_value"
                },
                "command": {
                    "1": "command"
                },
                "first_char": {
                    "1": "first_char"
                },
                "param_1": {
                    "1": "input_list",
                    "10": "parameters",
                    "2": "param",
                    "3": "input_data",
                    "5": "data"
                },
                "param_1 + 0x3d": {
                    "1": "parameter_plus_0x3d"
                },
                "param_1 + 10": {
                    "1": "parameter_10_plus"
                },
                "param_1[0x13]": {
                    "1": "pointer->value_13"
                },
                "param_1[0x14]": {
                    "1": "pointer->value_14"
                },
                "param_1[0xb]": {
                    "1": "pointer_value"
                },
                "param_1[0xc]": {
                    "1": "parameter_12"
                },
                "param_1[10]": {
                    "1": "pointer->value_10"
                },
                "param_1[9]": {
                    "1": "parameters[9]"
                },
                "parameter_plus_0x3d": {
                    "1": "character_parameter_plus_0x3d"
                },
                "parameters[0x12]": {
                    "1": "parameter_18"
                },
                "parameters[0x13]": {
                    "1": "parameter_19"
                },
                "parameters[0x14]": {
                    "1": "parameter_20"
                },
                "parameters[0xb]": {
                    "1": "parameter_11"
                },
                "parameters[0xc]": {
                    "1": "parameter_12"
                },
                "parameters[9]": {
                    "1": "parameter_9"
                },
                "parse_command": {
                    "1": "parse_command"
                },
                "ptr": {
                    "1": "ptr"
                },
                "puVar2": {
                    "1": "ptr",
                    "10": "pointer",
                    "2": "pointer_value",
                    "3": "ptr_value",
                    "5": "temp_ptr"
                }
            },
            "called": [
                "FUN_08004a1e",
                "FUN_08004b80"
            ],
            "calling": [
                "FUN_08005188"
            ],
            "code": "\nundefined4 process_data_08004b82(uint **parameters)\n\n{\n  char character;\n  uint *pointer;\n  \n  character = *(char *)((int)parameters + 0x3d);\n  pointer = parameters[11];\n  if ((*(short *)(parameters + 10) == 0) && (character == '!')) {\n    if ((pointer == (uint *)0x4) || ((pointer == (uint *)0x8 || (pointer == (uint *)0xffff0000)))) {\n      (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n      **parameters = **parameters | 0x200;\n      parameters[12] = (uint *)0x0;\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n      if (*(char *)((int)parameters + 0x3e) == 'at_symbol') {\n        *(undefined *)((int)parameters + 0x3e) = 0;\n        FUNC_08004b80();\n      }\n      else {\n        *(undefined *)((int)parameters + 0x3e) = 0;\n        FUNC_08004a1e();\n      }\n    }\n    else {\n      (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n      parameters[12] = (uint *)0x11;\n      *(undefined *)((int)parameters + 0x3e) = 0;\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n      FUNC_08004a1e();\n    }\n  }\n  else if ((character == '!') || ((*(char *)((int)parameters + 0x3e) == 'at_symbol' && (character == '\\\"')))) {\n    if (*(short *)((int)parameters + 0x2a) == 0) {\n      (*parameters)[1] = (*parameters)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)parameters + 0x3e) == 'at_symbol') {\n      if (parameters[0x14] == (uint *)0x0) {\n        if (parameters[0x13] == (uint *)0x1) {\n          (*parameters)[4] = (uint)parameters[0x12] & 0xff;\n          parameters[0x14] = (uint *)((int)parameters[0x14] + 2);\n        }\n        else {\n          (*parameters)[4] = (uint)(param112 << 0x10) >> 0x18;\n          parameters[0x14] = (uint *)((int)parameters[0x14] + 1);\n        }\n      }\n      else if (parameters[0x14] == (uint *)0x1) {\n        (*parameters)[4] = (uint)parameters[0x12] & 0xff;\n        parameters[0x14] = (uint *)((int)parameters[0x14] + 1);\n      }\n      else if (parameters[0x14] == (uint *)0x2) {\n        if (*(char *)((int)parameters + 0x3d) == '\\\"') {\n          **parameters = **parameters | 0x100;\n        }\n        else if (*(char *)((int)parameters + 0x3d) == '!') {\n          pointer = parameters[9];\n          parameters[9] = (uint *)((int)pointer + 1);\n          (*parameters)[4] = (uint)*(byte *)pointer;\n          *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      pointer = parameters[9];\n      parameters[9] = (uint *)((int)pointer + 1);\n      (*parameters)[4] = (uint)*(byte *)pointer;\n      *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_08004b82",
            "entrypoint": "0x08004b82",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1[0x12]": "param112",
                "@": "at_symbol",
                "FUN_08004b82": "process_data_08004b82",
                "cVar1": "character",
                "param_1": "parameters",
                "param_1[0xb]": "parameters[11]",
                "param_1[0xc]": "parameters[12]",
                "param_1[9]": "parameters[9]",
                "puVar2": "pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "additional_data": {
                "(*(byte *)puVar1)": {
                    "1": "byte_value"
                },
                "(*(char *)((int)param_1 + 0x3d))": {
                    "1": "check_char"
                },
                "(*(char *)((int)param_1 + 0x3e))": {
                    "1": "check_char2"
                },
                "(*(short *)((int)param_1 + 0x2a) - 1)": {
                    "1": "updated_short_value"
                },
                "(*(short *)((int)param_1 + 0x2a))": {
                    "1": "check_short"
                },
                "(*(short *)((int)param_1 + 0x2a)) + -1": {
                    "1": "decremented_value"
                },
                "(**param_1)[1]": {
                    "1": "array_value_one"
                },
                "(*param_1)": {
                    "1": "first_element_in_array"
                },
                "(*param_1)[1]": {
                    "1": "first_entry",
                    "2": "param1_value1",
                    "3": "first_value",
                    "4": "first_element"
                },
                "(*param_1)[4]": {
                    "1": "param6_value",
                    "2": "new_value"
                },
                "(char *)((int)param_1 + 0x3d)": {
                    "1": "char_ptr"
                },
                "(int)param_1 + 0x2a)": {
                    "1": "short_ptr2"
                },
                "(int)param_1 + 0x3e)": {
                    "1": "char_ptr2"
                },
                "(int)puVar1 + 1": {
                    "1": "incremented_value"
                },
                "(short *)((int)param_1 + 0x2a)": {
                    "1": "short_check"
                },
                "(uint *)((int)puVar1 + 1)": {
                    "1": "incremented_check_value"
                },
                "(uint *)0x0": {
                    "1": "null_pointer"
                },
                "(uint *)0x11": {
                    "1": "pointer_value17"
                },
                "(uint *)0x4": {
                    "1": "constant_4",
                    "2": "pointer_four"
                },
                "(uint *)0x8": {
                    "1": "ptr8",
                    "2": "pointer_eight"
                },
                "(uint *)0xffff0000": {
                    "1": "ptr_ffff0000",
                    "2": "pointer_ffff0000"
                },
                "(uint)*(byte *)puVar1": {
                    "1": "byte_value"
                },
                "*(byte *)puVar1": {
                    "8": "byte_value"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "flag_char",
                    "2": "char_value1",
                    "6": "char_value"
                },
                "*(char *)((int)param_1 + 0x3e)": {
                    "1": "additional_char",
                    "2": "next_char",
                    "6": "char_value2"
                },
                "*(char *)((int)parameters + 0x3d)": {
                    "1": "parameter_char"
                },
                "*(char *)((int)parameters + 0x3e)": {
                    "1": "parameter_char_2"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "settings[0x2a]",
                    "10": "short_value",
                    "2": "short_value1"
                },
                "*(short *)((int)parameters + 0x2a)": {
                    "1": "parameter_short"
                },
                "*(uint **)param[0xb]": {
                    "1": "param_value"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "first_char_value",
                    "2": "undefined_value1"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "undefined_value",
                    "2": "undefined_value2"
                },
                "**param_1": {
                    "1": "second_array_value",
                    "2": "param1_value2",
                    "3": "second_element"
                },
                "*.param_1": {
                    "1": "param"
                },
                "*param_1": {
                    "1": "parameter_value_pointer"
                },
                "0x20": {
                    "1": "space_char"
                },
                "0xfffff8ff": {
                    "1": "value_f8_ff"
                },
                "@": {
                    "1": "special_character"
                },
                "DAT_08004ba0": {
                    "1": "value_char"
                },
                "DAT_08004bf8": {
                    "1": "flag"
                },
                "DAT_08004bf9": {
                    "1": "flag_char"
                },
                "DAT_08004bfa": {
                    "1": "email_at_flag"
                },
                "DAT_08004bfc": {
                    "1": "email_char"
                },
                "DAT_08004bfe": {
                    "1": "email_flag"
                },
                "DAT_08004cdc": {
                    "1": "command_char"
                },
                "FUNC_08004a1e": {
                    "1": "execute_function_2",
                    "2": "function_b"
                },
                "FUNC_08004a1e()": {
                    "1": "do_something2",
                    "3": "function2"
                },
                "FUNC_08004b80": {
                    "1": "execute_func1",
                    "2": "function_a"
                },
                "FUNC_08004b80()": {
                    "1": "do_something1",
                    "3": "function1"
                },
                "FUN_08004ccc": {
                    "1": "validate_and_process_input",
                    "2": "process_input",
                    "3": "update_param",
                    "4": "update_parameter",
                    "6": "process_param",
                    "7": "process_parameter"
                },
                "int(param_1 + 0x2a)": {
                    "1": "counter_addr"
                },
                "int(param_1 + 0x3d)": {
                    "1": "param_addr"
                },
                "param_1": {
                    "1": "param",
                    "15": "parameters",
                    "2": "parameter",
                    "3": "param_array"
                },
                "param_1[0xb]": {
                    "1": "pointer_b"
                },
                "param_1[0xc]": {
                    "1": "pointer_c",
                    "2": "result"
                },
                "param_1[9]": {
                    "1": "param9_value",
                    "2": "param9"
                },
                "puVar1": {
                    "1": "param",
                    "2": "value_pointer",
                    "3": "current_value",
                    "8": "value"
                },
                "puVar1 == (uint *)0x4": {
                    "1": "is_param_four"
                },
                "puVar1 == (uint *)0x8": {
                    "1": "is_param_eight"
                },
                "puVar1 == (uint *)0xffff0000": {
                    "1": "is_param_ffff0000"
                }
            },
            "called": [
                "FUN_08004a1e",
                "FUN_08004b80"
            ],
            "calling": [
                "FUN_08005188"
            ],
            "code": "\nundefined4 process_parameter_08004ccc(uint **parameters)\n\n{\n  uint *value;\n  \n  value = eleventh_array_value;\n  if (*(char *)((int)parameters + 0x3d) == '!') {\n    if (*(short *)((int)parameters + 0x2a) == 0) {\n      if (((value == (uint *)0x4) || (value == (uint *)0x8)) || (value == (uint *)0xffff0000)) {\n        (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n        **parameters = **parameters | 0x200;\n        param_c = (uint *)0x0;\n        *(undefined *)((int)parameters + 0x3d) = 0x20;\n        if (*(char *)((int)parameters + 0x3e) == 'special_character') {\n          *(undefined *)((int)parameters + 0x3e) = 0;\n          FUNC_08004b80();\n        }\n        else {\n          *(undefined *)((int)parameters + 0x3e) = 0;\n          FUNC_08004a1e();\n        }\n      }\n      else {\n        (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n        param_c = (uint *)0x11;\n        *(undefined *)((int)parameters + 0x3e) = 0;\n        *(undefined *)((int)parameters + 0x3d) = 0x20;\n        FUNC_08004a1e();\n      }\n    }\n    else {\n      value = param9;\n      param9 = (uint *)((int)value + 1);\n      (*parameters)[4] = (uint)*(byte *)value;\n      *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_parameter_08004ccc",
            "entrypoint": "0x08004ccc",
            "imported": false,
            "improved": true,
            "renaming": {
                "@": "special_character",
                "FUN_08004ccc": "process_parameter_08004ccc",
                "param_1": "parameters",
                "param_1[0xb]": "eleventh_array_value",
                "param_1[0xc]": "param_c",
                "param_1[9]": "param9",
                "puVar1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004d6a": {
            "called": [],
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "code": "\nvoid FUNC_08004d6a(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08004d6a",
            "entrypoint": "0x08004d6a",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08004d6a": "FUNC_08004d6a"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08004d6c": {
            "additional_data": {
                "(**param_1)": {
                    "1": "param_value_deref"
                },
                "(*param_1)": {
                    "1": "param_value"
                },
                "(*param_1)[1]": {
                    "1": "value2",
                    "2": "second_value"
                },
                "(*param_1)[4]": {
                    "1": "param1_4"
                },
                "(char *)((int)param_1 + 0x3d)": {
                    "1": "char_ptr4"
                },
                "(char)(*param_1)[4]": {
                    "1": "char_value3"
                },
                "(int)*(param_1)[4]": {
                    "1": "int_value"
                },
                "(int)param_1": {
                    "1": "param1_int_ptr_cast"
                },
                "(int)param_1 + 0x3d": {
                    "1": "flag_char_ptr"
                },
                "(int)param_1 + 0x3e": {
                    "1": "next_char_ptr"
                },
                "(int)puVar1 + 1": {
                    "1": "temp_ptr_offset_by_1"
                },
                "(short *)((int)param_1 + 0x2a)": {
                    "1": "short_ptr"
                },
                "(undefined *)((int)param_1 + 0x3d)": {
                    "1": "char_ptr3"
                },
                "(undefined *)((int)param_1 + 0x3e)": {
                    "1": "char_ptr5"
                },
                "(ushort *)((int)param_1 + 0x2a)": {
                    "1": "param_length"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "char_value_at_offset_0x3d",
                    "3": "char_value"
                },
                "*(char *)((int)param_1 + 0x3e)": {
                    "1": "char_value3"
                },
                "*(char *)puVar1": {
                    "1": "char_value1"
                },
                "*(param_1)[1]": {
                    "1": "value1"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "short_value"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "undefined_value1"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "undefined_value2"
                },
                "*(ushort *)((int)param_1 + 0x2a)": {
                    "1": "param_length",
                    "3": "ushort_value"
                },
                "**(param_1)": {
                    "1": "value"
                },
                "**param_1": {
                    "1": "value1",
                    "2": "value"
                },
                "*param_1": {
                    "1": "param1_value"
                },
                "DAT_08004d6c": {
                    "1": "constant_one"
                },
                "DAT_08004d6e": {
                    "1": "constant_two"
                },
                "FUNC_08004a20": {
                    "1": "process_case2"
                },
                "FUNC_08004d6a": {
                    "1": "execute_function1"
                },
                "FUN_08004d6c": {
                    "1": "perform_operation",
                    "2": "update_flags_and_perform_action",
                    "4": "update_flags",
                    "5": "process_param",
                    "6": "update_flags_and_values"
                },
                "PTR_08004d6c": {
                    "1": "ptr"
                },
                "PTR_DAT_08004d6c_0000002a": {
                    "1": "ushort_value"
                },
                "PTR_DAT_08004d6c_0000003d": {
                    "1": "char_value"
                },
                "PTR_FUN_08004d6c_00000000": {
                    "1": "value1"
                },
                "PTR_FUN_08004d6c_00000001": {
                    "1": "value2"
                },
                "PTR_FUN_08004d6c_00000004": {
                    "1": "value3"
                },
                "PTR_PTR_FUN_08004d6c_0000000b": {
                    "1": "ptr"
                },
                "param_1": {
                    "1": "arguments",
                    "12": "parameters",
                    "2": "parameter",
                    "4": "param",
                    "5": "params"
                },
                "param_1[0xb]": {
                    "1": "param1_offset_0xb_ptr"
                },
                "param_1[0xc]": {
                    "1": "param1_c"
                },
                "param_1[4]": {
                    "1": "param14"
                },
                "param_1[9]": {
                    "1": "param1_index9",
                    "2": "char_ptr"
                },
                "param_1[9]->(int)puVar1 + 1": {
                    "1": "incremented_pointer"
                },
                "puVar1": {
                    "1": "ptr1",
                    "10": "temp_ptr",
                    "3": "ptr",
                    "5": "temp_pointer",
                    "6": "temp_var1"
                }
            },
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "calling": [
                "FUN_08005188"
            ],
            "code": "\nundefined4 update_flags_and_values_08004d6c(uint **parameters)\n\n{\n  uint *temp_ptr;\n  \n  if (*(char *)(param1_int_ptr_cast + 0x3d) == '\\\"') {\n    if (*(ushort *)(param1_int_ptr_cast + 0x2a) < 4) {\n      if (*(ushort *)(param1_int_ptr_cast + 0x2a) - 2 < 2) {\n        if (array_element == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x800;\n        }\n        (*parameters)[1] = (*parameters)[1] & 0xfffffbff;\n      }\n      else {\n        if (array_element == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n        }\n        (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n        temp_ptr = char_ptr;\n        char_ptr = (uint *)((int)temp_ptr + 1);\n        *(char *)temp_ptr = (char)(*parameters)[4];\n        *(short *)(param1_int_ptr_cast + 0x2a) = *(short *)(param1_int_ptr_cast + 0x2a) + -1;\n        *(undefined *)(param1_int_ptr_cast + 0x3d) = 0x20;\n        param1_c = (uint *)0x0;\n        if (*(char *)(param1_int_ptr_cast + 0x3e) == '@') {\n          *(undefined *)(param1_int_ptr_cast + 0x3e) = 0;\n          FUNC_08004d6a();\n        }\n        else {\n          *(undefined *)(param1_int_ptr_cast + 0x3e) = 0;\n          FUNC_08004a20();\n        }\n      }\n    }\n    else {\n      temp_ptr = char_ptr;\n      char_ptr = (uint *)((int)temp_ptr + 1);\n      *(char *)temp_ptr = (char)(*parameters)[4];\n      *(short *)(param1_int_ptr_cast + 0x2a) = *(short *)(param1_int_ptr_cast + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "update_flags_and_values_08004d6c",
            "entrypoint": "0x08004d6c",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1": "param1_int_ptr_cast",
                "FUN_08004d6c": "update_flags_and_values_08004d6c",
                "param_1": "parameters",
                "param_1[0xb]": "array_element",
                "param_1[0xc]": "param1_c",
                "param_1[9]": "char_ptr",
                "puVar1": "temp_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004e3c": {
            "additional_data": {
                "(**param_1)[4]": {
                    "1": "value1"
                },
                "(*param_1)[1]": {
                    "1": "array_element_1"
                },
                "(*param_1)[1] & 0xfffffcff": {
                    "1": "value2_filtered"
                },
                "(*param_1)[4]": {
                    "1": "array_value",
                    "3": "data_value"
                },
                "(char *)((int)param_1 + 0x3e)": {
                    "1": "symbol"
                },
                "(char)(*param_1)[4]": {
                    "1": "data_byte",
                    "4": "char_value"
                },
                "(int)param_1": {
                    "1": "data_address"
                },
                "(int)param_1 + 0x2a": {
                    "1": "counter_addr"
                },
                "(int)param_1 + 0x3d": {
                    "1": "flag_addr"
                },
                "(int)param_1 + 0x3e": {
                    "1": "symbol"
                },
                "(int)puVar1 + 1": {
                    "1": "updated_char_ptr"
                },
                "(short *)((int)param_1 + 0x2a)": {
                    "1": "input_data_const_ptr"
                },
                "(short *)((int)param_1 + 0x3d)": {
                    "1": "flag_address"
                },
                "(uint *)((int)puVar1 + 1)": {
                    "1": "updated_pointer"
                },
                "(uint *)0x4": {
                    "1": "option_a"
                },
                "(uint *)0x8": {
                    "1": "constant2"
                },
                "(uint *)0xffff0000": {
                    "1": "constant3"
                },
                "(undefined *)((int)param_1 + 0x3d)": {
                    "1": "flag"
                },
                "*((char *)data[9] + 1)": {
                    "1": "value[1]"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "flag"
                },
                "*(char *)((int)param_1 + 0x3e)": {
                    "1": "char_value_2",
                    "2": "flag_char",
                    "4": "char_flag"
                },
                "*(char *)puVar1": {
                    "1": "data_element",
                    "8": "char_value"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "input_data_length",
                    "3": "data_length"
                },
                "*(short *)((int)param_1 + 0x2a) + -1": {
                    "1": "decremented_short_val"
                },
                "*(short *)((int)param_1 + 0x2a) - 1": {
                    "1": "decremented_short_value"
                },
                "*(short *)((int)param_1 + 0x3d)": {
                    "1": "short_value",
                    "3": "flag_value"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "data[61]",
                    "5": "flag"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "temp_undefined"
                },
                "**(uint **)param_1": {
                    "1": "double_indirect_value"
                },
                "**param_1": {
                    "1": "input_data_value",
                    "2": "data_value"
                },
                "**param_1 & 0xfffffbff": {
                    "1": "value1_modified3"
                },
                "**param_1 | 0x200": {
                    "1": "value1_modified"
                },
                "**param_1 | 0x400": {
                    "1": "value1_modified2"
                },
                "*param_1": {
                    "1": "value_pointer"
                },
                "*param_1)[1]": {
                    "1": "first_value"
                },
                "*param_1)[4]": {
                    "1": "fourth_value"
                },
                "*param_1[0xb]": {
                    "1": "value_ptr"
                },
                "DAT_0800625a": {
                    "1": "constant_value1"
                },
                "DAT_0800625e": {
                    "1": "constant_value2"
                },
                "DAT_08006262": {
                    "1": "constant_value3"
                },
                "FUNC_08004a20": {
                    "1": "handle_other"
                },
                "FUNC_08004a20()": {
                    "1": "do_something_else"
                },
                "FUNC_08004d6a": {
                    "1": "handle_case_a"
                },
                "FUNC_08004d6a()": {
                    "1": "do_something"
                },
                "FUN_08004a20": {
                    "1": "function_b"
                },
                "FUN_08004d6a": {
                    "1": "function_a"
                },
                "FUN_08004e3c": {
                    "1": "decode_and_process_data",
                    "19": "process_data",
                    "2": "process_function",
                    "7": "process_input"
                },
                "param_1": {
                    "1": "param",
                    "10": "data",
                    "2": "data_ptr",
                    "5": "parameters",
                    "9": "input_data"
                },
                "param_1[0xb]": {
                    "1": "value_ptr"
                },
                "param_1[0xc]": {
                    "1": "output_data_ptr"
                },
                "param_1[9]": {
                    "1": "counter_ptr",
                    "4": "counter"
                },
                "puVar1": {
                    "1": "value_pointer",
                    "10": "value",
                    "2": "value_ptr",
                    "5": "current_value"
                },
                "puVar1 + 1": {
                    "1": "next_value"
                },
                "puVar1 == (uint *)0x2": {
                    "1": "value_is_2"
                }
            },
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "calling": [
                "FUN_08005188"
            ],
            "code": "\nundefined4 process_data_08004e3c(uint **data)\n\n{\n  uint *value;\n  \n  value = value_ptr;\n  if (*(short *)(data_address + 0x2a) == 3) {\n    if (((value == (uint *)0x4) || (value == (uint *)0x8)) || (value == (uint *)0xffff0000)) {\n      **data = **data & 0xfffffbff;\n    }\n    value = counter;\n    counter = (uint *)((int)value + 1);\n    *(char *)value = (char)(*data)[4];\n    *(short *)(data_address + 0x2a) = *(short *)(data_address + 0x2a) + -1;\n  }\n  else if (*(short *)(data_address + 0x2a) == 2) {\n    if (((value == (uint *)0x4) || (value == (uint *)0x8)) || (value == (uint *)0xffff0000)) {\n      (*data)[1] = (*data)[1] & 0xfffffcff;\n      **data = **data | 0x200;\n    }\n    else {\n      if (value == (uint *)0x2) {\n        **data = **data | 0x400;\n      }\n      else {\n        **data = **data & 0xfffffbff;\n      }\n      (*data)[1] = (*data)[1] & 0xfffffcff;\n    }\n    value = counter;\n    counter = (uint *)((int)value + 1);\n    *(char *)value = (char)(*data)[4];\n    *(short *)(data_address + 0x2a) = *(short *)(data_address + 0x2a) + -1;\n    value = counter;\n    counter = (uint *)((int)value + 1);\n    *(char *)value = (char)(*data)[4];\n    *(short *)(data_address + 0x2a) = *(short *)(data_address + 0x2a) + -1;\n    *(undefined *)(data_address + 0x3d) = 0x20;\n    output_data_ptr = (uint *)0x0;\n    if (*(char *)(data_address + 0x3e) == '@') {\n      *(undefined *)(data_address + 0x3e) = 0;\n      FUNC_08004d6a();\n    }\n    else {\n      *(undefined *)(data_address + 0x3e) = 0;\n      FUNC_08004a20();\n    }\n  }\n  else {\n    value = counter;\n    counter = (uint *)((int)value + 1);\n    *(char *)value = (char)(*data)[4];\n    *(short *)(data_address + 0x2a) = *(short *)(data_address + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_08004e3c",
            "entrypoint": "0x08004e3c",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1": "data_address",
                "FUN_08004e3c": "process_data_08004e3c",
                "param_1": "data",
                "param_1[0xb]": "value_ptr",
                "param_1[0xc]": "output_data_ptr",
                "param_1[9]": "counter",
                "puVar1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004f3a": {
            "called": [],
            "calling": [
                "FUN_08004f3c"
            ],
            "code": "\nvoid FUNC_08004f3a(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08004f3a",
            "entrypoint": "0x08004f3a",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08004f3a": "FUNC_08004f3a"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08004f3c": {
            "additional_data": {
                "FUN_08004f3c": {
                    "1": "execute_operation",
                    "15": "process_data",
                    "2": "initialize_data"
                },
                "LAB_080053cc_1": {
                    "1": "label",
                    "3": "label_1"
                },
                "check_and_initialize_data_08008020": {
                    "2": "initialize_data",
                    "3": "check_and_initialize_data"
                },
                "execute_function_08007ff0": {
                    "5": "execute_function"
                },
                "iVar1": {
                    "1": "data_result",
                    "2": "status",
                    "22": "result",
                    "4": "return_value"
                },
                "initialize_data_08004050": {
                    "1": "initialize_data2",
                    "4": "initialize_data"
                },
                "param_1": {
                    "1": "param",
                    "14": "data",
                    "2": "param_array",
                    "4": "parameters"
                },
                "puVar2": {
                    "1": "ptr_var",
                    "2": "ptr_char",
                    "4": "ptr2",
                    "5": "char_ptr"
                },
                "puVar3": {
                    "1": "pointer3",
                    "2": "pointer_var2",
                    "3": "ptr2",
                    "4": "ptr3",
                    "6": "data_ptr"
                }
            },
            "called": [
                "FUN_08008020",
                "FUN_08004050",
                "FUN_08004f3a",
                "FUN_08007ff0"
            ],
            "calling": [
                "FUN_080052f0",
                "FUN_08005084"
            ],
            "code": "\nvoid process_data_08004f3c(uint **data)\n\n{\n  int result;\n  uint *char_ptr;\n  uint *data_ptr;\n  \n  if (*(byte *)((int)data + 0x3d) - 0x29 < 2) {\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)data + 0x3d) != '`') && (((*data)[1] & 0x800) == 0)) {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n    }\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3e) = 0;\n  }\n  **data = **data & 0xfffff7ff;\n  data_ptr = *data;\n  if ((data_ptr[1] & 0x800) == 0) {\n    if (*(char *)((int)data + 0x3d) == '`') {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      data[0x10] = (uint *)0x0;\n      if ((data_ptr[5] & 0x40) != 0) {\n        char_ptr = data[9];\n        data[9] = (uint *)((int)char_ptr + 1);\n        *(char *)char_ptr = (char)data_ptr[4];\n      }\n      **data = **data & 0xfffffffe;\n      FUNC_08004f3a(data);\n    }\n    else {\n      if ((data_ptr[5] & 0x40) != 0) {\n        char_ptr = data[9];\n        data[9] = (uint *)((int)char_ptr + 1);\n        *(char *)char_ptr = (char)data_ptr[4];\n      }\n      check_and_initialize_data(data);\n    }\n  }\n  else {\n    data_ptr[1] = data_ptr[1] & 0xfffff7ff;\n    if (*(char *)((int)data[0xd] + 0x21) == '\\x01') {\n      data[0xe][0xd] = (uint)&label_1;\n      result = initialize_data(data[0xe]);\n      if (result != 0) {\n        if (((*data)[5] & 0x40) != 0) {\n          data_ptr = data[9];\n          data[9] = (uint *)((int)data_ptr + 1);\n          *(char *)data_ptr = (char)(*data)[4];\n        }\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[0xe][0xd])();\n      }\n    }\n    else {\n      data[0xd][0xd] = (uint)&label_1;\n      result = initialize_data(data[0xd]);\n      if (result != 0) {\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[0xd][0xd])();\n      }\n    }\n  }\n  if ((*(char *)((int)data + 0x3d) == '(') && (((uint)data[0x10] & 4) != 0)) {\n    data[0xb] = (uint *)0xffff0000;\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    execute_function(data);\n  }\n  return;\n}\n\n",
            "current_name": "process_data_08004f3c",
            "entrypoint": "0x08004f3c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004f3c": "process_data_08004f3c",
                "LAB_080053cc_1": "label_1",
                "check_and_initialize_data_08008020": "check_and_initialize_data",
                "execute_function_08007ff0": "execute_function",
                "iVar1": "result",
                "initialize_data_08004050": "initialize_data",
                "param_1": "data",
                "puVar2": "char_ptr",
                "puVar3": "data_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005084": {
            "additional_data": {
                "FUN_08005084": {
                    "1": "process_param_data",
                    "22": "process_data",
                    "3": "process_param"
                },
                "cVar1": {
                    "1": "char1",
                    "14": "character",
                    "2": "first_char",
                    "6": "char_var",
                    "7": "char_value"
                },
                "param_1": {
                    "1": "parameter",
                    "16": "data",
                    "2": "input_data",
                    "4": "param",
                    "5": "parameters"
                },
                "puVar2": {
                    "1": "ptr_value1",
                    "11": "pointer1",
                    "2": "ptr_2",
                    "3": "ptr_var1",
                    "7": "ptr1"
                },
                "puVar3": {
                    "1": "ptr_value2",
                    "11": "pointer2",
                    "2": "ptr_3",
                    "3": "pointer_var2",
                    "9": "ptr2"
                }
            },
            "called": [
                "FUN_08004f3c",
                "FUN_08007ff0",
                "FUN_08004a74"
            ],
            "calling": [
                "FUN_08005188"
            ],
            "code": "\nundefined4 process_data_08005084(uint **data)\n\n{\n  char character;\n  uint *pointer1;\n  uint *pointer2;\n  \n  character = *(char *)((int)data + 0x3d);\n  (*data)[1] = (*data)[1] & 0xfffff8ff;\n  **data = **data | 1;\n  **data = **data & 0xfffffbff;\n  pointer1 = *data;\n  if ((pointer1[1] & 0x800) != 0) {\n    if ((*(char *)((int)data + 0x3d) == '\\\"') || (*(char *)((int)data + 0x3d) == '*')) {\n      *(short *)((int)data + 0x2a) = (short)*(undefined4 *)(*data[0xe] + 4);\n    }\n    else {\n      *(short *)((int)data + 0x2a) = (short)*(undefined4 *)(*data[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)data + 0x2a) != 0) {\n    if ((pointer1[5] & 4) != 0) {\n      pointer2 = data[9];\n      data[9] = (uint *)((int)pointer2 + 1);\n      *(char *)pointer2 = (char)pointer1[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n    if (((*data)[5] & 0x40) != 0) {\n      pointer1 = data[9];\n      data[9] = (uint *)((int)pointer1 + 1);\n      *(char *)pointer1 = (char)(*data)[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n    data[0x10] = (uint *)((uint)data[0x10] | 4);\n  }\n  if (data[0x10] == (uint *)0x0) {\n    if (((character == '(') || (character == '*')) || (character == ')')) {\n      data[0xb] = (uint *)0xffff0000;\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      execute_function_08007ff0();\n    }\n    else if ((data[0xc] == (uint *)0x22) || (character == '\\\"')) {\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      FUNC_08004a74();\n    }\n  }\n  else {\n    process_data_08005084_08004f3c();\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_08005084",
            "entrypoint": "0x08005084",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005084": "process_data_08005084",
                "cVar1": "character",
                "param_1": "data",
                "puVar2": "pointer1",
                "puVar3": "pointer2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005188": {
            "additional_data": {
                "*param_1": {
                    "1": "input"
                },
                "FUN_08005188": {
                    "1": "process_input_or_data",
                    "10": "process_function",
                    "2": "process_param_data",
                    "3": "process_param",
                    "6": "process_parameter"
                },
                "iVar1": {
                    "1": "current_value",
                    "2": "ptr",
                    "5": "value",
                    "7": "param_value"
                },
                "param_1": {
                    "1": "parameters",
                    "2": "input_array",
                    "3": "param",
                    "9": "input_data"
                },
                "process_data_08004a24": {
                    "6": "process_data"
                },
                "process_data_08004a76": {
                    "6": "process_data"
                },
                "process_data_08004b82": {
                    "6": "process_data"
                },
                "process_data_08004e3c": {
                    "6": "process_data"
                },
                "process_data_08005084": {
                    "6": "process_data"
                },
                "process_input_08004ac2": {
                    "6": "process_input"
                },
                "process_parameter_08004ccc": {
                    "6": "process_parameter"
                },
                "set_param_value_08004396": {
                    "2": "set_parameter_value",
                    "4": "set_param_value"
                },
                "uVar2": {
                    "1": "flags",
                    "13": "flag_value",
                    "2": "flag_value1",
                    "5": "flag"
                },
                "uVar3": {
                    "1": "flag_value_2",
                    "2": "flag2",
                    "3": "value",
                    "6": "data_value"
                },
                "uVar4": {
                    "1": "flag_data",
                    "2": "update_flag",
                    "4": "flag_value"
                },
                "update_data_0800457c": {
                    "6": "update_data"
                },
                "update_data_0800459c": {
                    "6": "update_data"
                },
                "update_flag_value_0800430c": {
                    "6": "update_flag_value"
                },
                "update_flags_080043a2": {
                    "6": "update_flags"
                },
                "update_flags_and_values_08004d6c": {
                    "6": "update_flags_and_values"
                }
            },
            "called": [
                "FUN_08004ccc",
                "FUN_080043a2",
                "FUN_08004396",
                "FUN_0800430c",
                "FUN_0800459c",
                "FUN_08005084",
                "FUN_08004a76",
                "FUN_08004ac2",
                "FUN_08004b82",
                "FUN_0800457c",
                "FUN_08004d6c",
                "FUN_08004a24",
                "FUN_08004e3c"
            ],
            "calling": [],
            "code": "\nvoid process_function_08005188(int *input_data)\n\n{\n  int param_value;\n  uint flag_value;\n  uint data_value;\n  uint flag_value;\n  \n  param_value = *input_data;\n  flag_value = *(uint *)(param_value + 0x18);\n  flag_value = *(uint *)(param_value + 0x14);\n  data_value = *(uint *)(param_value + 4);\n  if ((*(char *)((int)input_data + 0x3e) == '\\x10') || (*(char *)((int)input_data + 0x3e) == '@')) {\n    if (((flag_value & 0x10001) == 0) || ((data_value & 0x200) == 0)) {\n      if (((flag_value & 0x10008) == 0) || ((data_value & 0x200) == 0)) {\n        if (((flag_value & 0x10002) != 0) && ((data_value & 0x200) != 0)) {\n          update_flags(input_data);\n        }\n      }\n      else {\n        set_param_value(input_data);\n      }\n    }\n    else {\n      update_flag_value(input_data);\n    }\n    if ((flag_value & 0x100004) == 0) {\n      if ((((flag_value & 0x10040) != 0) && ((data_value & 0x400) != 0)) && ((flag_value & 0x10004) == 0)) {\n        update_flags_and_values(input_data);\n        return;\n      }\n      if (((flag_value & 0x10004) != 0) && ((data_value & 0x200) != 0)) {\n        process_data(input_data);\n        return;\n      }\n    }\n    else {\n      if ((((flag_value & 0x10080) != 0) && ((data_value & 0x400) != 0)) && ((flag_value & 0x10004) == 0)) {\n        process_data(input_data);\n        return;\n      }\n      if (((flag_value & 0x10004) != 0) && ((data_value & 0x200) != 0)) {\n        process_parameter(input_data);\n        return;\n      }\n    }\n  }\n  else {\n    if (((flag_value & 0x10002) != 0) && ((data_value & 0x200) != 0)) {\n      process_input();\n      return;\n    }\n    if (((flag_value & 0x10010) != 0) && ((data_value & 0x200) != 0)) {\n      process_data(input_data);\n      return;\n    }\n    if ((flag_value & 0x100004) == 0) {\n      if ((((flag_value & 0x10040) != 0) && ((data_value & 0x400) != 0)) && ((flag_value & 0x10004) == 0)) {\n        process_data(input_data);\n        return;\n      }\n      if (((flag_value & 0x10004) != 0) && ((data_value & 0x200) != 0)) {\n        update_data(input_data);\n      }\n    }\n    else {\n      if ((((flag_value & 0x10080) != 0) && ((data_value & 0x400) != 0)) && ((flag_value & 0x10004) == 0)) {\n        process_data(input_data);\n        return;\n      }\n      if (((flag_value & 0x10004) != 0) && ((data_value & 0x200) != 0)) {\n        update_data(input_data);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_function_08005188",
            "entrypoint": "0x08005188",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005188": "process_function_08005188",
                "iVar1": "param_value",
                "param_1": "input_data",
                "process_data_08004a24": "process_data",
                "process_data_08004a76": "process_data",
                "process_data_08004b82": "process_data",
                "process_data_08004e3c": "process_data",
                "process_data_08005084": "process_data",
                "process_input_08004ac2": "process_input",
                "process_parameter_08004ccc": "process_parameter",
                "set_param_value_08004396": "set_param_value",
                "uVar2": "flag_value",
                "uVar3": "data_value",
                "uVar4": "flag_value",
                "update_data_0800457c": "update_data",
                "update_data_0800459c": "update_data",
                "update_flag_value_0800430c": "update_flag_value",
                "update_flags_080043a2": "update_flags",
                "update_flags_and_values_08004d6c": "update_flags_and_values"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080052f0": {
            "additional_data": {
                "FUN_080052f0": {
                    "1": "update_flags",
                    "16": "process_flags",
                    "2": "process_permissions",
                    "4": "process_data"
                },
                "cVar1": {
                    "1": "char_variable",
                    "14": "character",
                    "3": "char_value",
                    "4": "char_var"
                },
                "param_1": {
                    "1": "flag_data",
                    "11": "flags",
                    "2": "param",
                    "4": "parameters",
                    "6": "data"
                },
                "process_data_08004f3c": {
                    "5": "process_data"
                },
                "process_param_08004aec": {
                    "1": "process_param",
                    "2": "process_parameter"
                },
                "puVar2": {
                    "1": "pointer_value",
                    "12": "ptr",
                    "5": "pointer"
                },
                "uVar3": {
                    "1": "flag_value1",
                    "13": "flag1",
                    "2": "flag_value",
                    "4": "value1"
                },
                "uVar4": {
                    "1": "permission_value_2",
                    "13": "flag2",
                    "2": "value_2",
                    "4": "value2"
                }
            },
            "called": [
                "FUN_08004f3c",
                "FUN_08004aec"
            ],
            "calling": [],
            "code": "\nvoid process_flags_080052f0(uint **flags)\n\n{\n  char character;\n  uint *ptr;\n  uint flag1;\n  uint flag2;\n  \n  ptr = *flags;\n  flag1 = ptr[5];\n  flag2 = ptr[1];\n  if (((flag1 & 0x10100) != 0) && ((flag2 & 0x100) != 0)) {\n    flags[0x10] = (uint *)((uint)flags[0x10] | 1);\n    ptr[5] = 0xfffffeff;\n    **flags = **flags | 0x8000;\n  }\n  if (((flag1 & 0x10200) != 0) && ((flag2 & 0x100) != 0)) {\n    flags[0x10] = (uint *)((uint)flags[0x10] | 2);\n    (*flags)[5] = 0xfffffdff;\n  }\n  if (((flag1 & 0x10400) != 0) && ((flag2 & 0x100) != 0)) {\n    character = *(char *)((int)flags + 0x3d);\n    if (((*(char *)((int)flags + 0x3e) == ' ') && (*(short *)((int)flags + 0x2a) == 0)) &&\n       (((character == '!' || (character == ')')) || ((character == '(' && (flags[0xc] == (uint *)0x21)))))) {\n      process_parameter(flags);\n    }\n    else {\n      flags[0x10] = (uint *)((uint)flags[0x10] | 4);\n      if (*(char *)((int)flags + 0x3e) == '\\x10') {\n        **flags = **flags | 0x200;\n      }\n      (*flags)[5] = 0xfffffbff;\n    }\n  }\n  if (((flag1 & 0x10800) != 0) && ((flag2 & 0x100) != 0)) {\n    flags[0x10] = (uint *)((uint)flags[0x10] | 8);\n    (*flags)[5] = 0xfffff7ff;\n  }\n  if (flags[0x10] != (uint *)0x0) {\n    process_data(flags);\n  }\n  return;\n}\n\n",
            "current_name": "process_flags_080052f0",
            "entrypoint": "0x080052f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080052f0": "process_flags_080052f0",
                "cVar1": "character",
                "param_1": "flags",
                "process_data_08004f3c": "process_data",
                "process_param_08004aec": "process_parameter",
                "puVar2": "ptr",
                "uVar3": "flag1",
                "uVar4": "flag2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800542a": {
            "additional_data": {
                "*": {
                    "1": "byte"
                },
                "*(_undefinedPtr_)(param_1 + 0x3d)": {
                    "1": "byte_value"
                },
                "*(undefined *)(param_1 + 0x3d)": {
                    "1": "byte_at_offset",
                    "2": "value_at_offset",
                    "4": "byte_value"
                },
                "<new_variable_name_1>": {
                    "1": "<original_variable_name_1>"
                },
                "<new_variable_name_2>": {
                    "1": "<original_variable_name_2>"
                },
                "<new_variable_name_n>": {
                    "1": "<original_variable_name_n>"
                },
                "<original_variable_name>": {
                    "1": "<new_variable_name>"
                },
                "FUN_0800542a": {
                    "1": "extract_byte_value",
                    "2": "get_byte",
                    "3": "get_byte_value",
                    "4": "get_value_from_offset",
                    "5": "get_byte_at_offset",
                    "8": "get_byte_from_offset"
                },
                "param_1": {
                    "1": "input_pointer",
                    "11": "offset",
                    "4": "base_address",
                    "5": "memory_address"
                }
            },
            "called": [],
            "calling": [
                "FUN_08007e74",
                "FUN_08007f0e"
            ],
            "code": "\nundefined get_byte_from_offset_0800542a(int offset)\n\n{\n  return *(undefined *)(offset + 0x3d);\n}\n\n",
            "current_name": "get_byte_from_offset_0800542a",
            "entrypoint": "0x0800542a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800542a": "get_byte_from_offset_0800542a",
                "param_1": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005430": {
            "additional_data": {
                "* (param_1 + 0x40)": {
                    "1": "pointer_offset"
                },
                "*(undefined4 *)(param_1 + 0x40)": {
                    "1": "pointer",
                    "2": "pointer_value",
                    "3": "value"
                },
                "0x40": {
                    "1": "offset"
                },
                "<unnamed_variable_1>": {
                    "1": "offset"
                },
                "<unnamed_variable_2>": {
                    "1": "result"
                },
                "DAT_": {
                    "1": ""
                },
                "FUN_08005430": {
                    "1": "get_offset",
                    "11": "get_value_from_offset",
                    "3": "get_value_at_offset",
                    "4": "get_pointer_value"
                },
                "[base_address + 0x40]": {
                    "1": "value_at_offset_0x40"
                },
                "param_1": {
                    "1": "input_pointer",
                    "12": "base_address",
                    "2": "pointer_address",
                    "3": "address",
                    "6": "offset"
                },
                "param_1 + 0x40": {
                    "1": "value_offset",
                    "2": "address_offset"
                },
                "ptr_": {
                    "1": ""
                }
            },
            "called": [],
            "calling": [
                "FUN_08007e74",
                "FUN_08007f0e"
            ],
            "code": "\nundefined4 get_value_from_offset_08005430(int base_address)\n\n{\n  return *(undefined4 *)(base_address + 0x40);\n}\n\n",
            "current_name": "get_value_from_offset_08005430",
            "entrypoint": "0x08005430",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005430": "get_value_from_offset_08005430",
                "param_1": "base_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005434": {
            "additional_data": {
                "F1": {
                    "1": "calculate_iterations"
                },
                "FUNK_08005434": {
                    "1": "calculate_iterations"
                },
                "FUN_08005434": {
                    "1": "calculate_loop_count",
                    "14": "calculate_iterations",
                    "2": "delay_function",
                    "8": "calculate_delay"
                },
                "bVar1": {
                    "1": "is_iterations_left",
                    "2": "is_not_zero"
                },
                "local_4": {
                    "1": "calculated_value",
                    "2": "result",
                    "3": "iteration_count",
                    "5": "iterations",
                    "7": "delay_count"
                },
                "param_1": {
                    "1": "input_param",
                    "23": "input_value",
                    "5": "input"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005460"
            ],
            "code": "\nvoid calculate_iterations_08005434(int input_value)\n\n{\n  bool is_not_zero;\n  int delay_count;\n  \n  delay_count = input_value * (DAT_20000018 / 8000);\n  do {\n    is_not_zero = delay_count != 0;\n    delay_count = delay_count + -1;\n  } while (is_not_zero);\n  return;\n}\n\n",
            "current_name": "calculate_iterations_08005434",
            "entrypoint": "0x08005434",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005434": "calculate_iterations_08005434",
                "bVar1": "is_not_zero",
                "local_4": "delay_count",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005460": {
            "additional_data": {
                "*param_1": {
                    "1": "flags"
                },
                "FUN_08005460": {
                    "1": "check_flags",
                    "2": "check_function",
                    "3": "process_flags",
                    "4": "check_conditions"
                },
                "_DAT_40007000": {
                    "1": "register6"
                },
                "_DAT_40021000": {
                    "1": "register_2"
                },
                "_DAT_40021004": {
                    "1": "register_1"
                },
                "_DAT_4002101c": {
                    "1": "register_7"
                },
                "_DAT_40021020": {
                    "1": "register_8"
                },
                "_DAT_40021024": {
                    "1": "register_4"
                },
                "_DAT_42420000": {
                    "1": "register_3"
                },
                "_DAT_42420060": {
                    "1": "register10"
                },
                "_DAT_42420480": {
                    "1": "flag3"
                },
                "bVar5": {
                    "1": "is_condition_true",
                    "5": "is_condition_met",
                    "6": "is_set",
                    "7": "is_flag_set"
                },
                "calculate_iterations_08005434": {
                    "1": "calculate_iterations"
                },
                "get_data_08003760": {
                    "1": "get_data_value"
                },
                "iVar1": {
                    "1": "loop_counter_1",
                    "16": "start_time",
                    "2": "initial_value",
                    "3": "start",
                    "4": "start_value"
                },
                "iVar2": {
                    "1": "end",
                    "18": "current_time",
                    "2": "current",
                    "5": "current_value"
                },
                "param_1": {
                    "1": "status_flags",
                    "13": "flags",
                    "3": "status",
                    "4": "params"
                },
                "uVar3": {
                    "1": "return_value",
                    "30": "result"
                },
                "uVar4": {
                    "1": "temp_var1",
                    "19": "value",
                    "3": "flag_value"
                }
            },
            "called": [
                "FUN_08003760",
                "FUN_08005434"
            ],
            "calling": [
                "FUN_080035b8"
            ],
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nundefined4 check_conditions_08005460(uint *flags)\n\n{\n  int start_time;\n  int current_time;\n  undefined4 result;\n  uint value;\n  bool is_flag_set;\n  \n  if ((*flags & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) != 0)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (flags[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      value = flags[1];\n      if (value == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (value == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (value == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (flags[1] == 0) {\n        start_time = get_current_time();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          current_time = get_current_time();\n          if (100 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        start_time = get_current_time();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          current_time = get_current_time();\n          if (100 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*flags & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (flags[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | flags[5] << 3;\n    }\n    else if (flags[4] == 0) {\n      _DAT_42420000 = 0;\n      start_time = get_current_time();\n      while ((_DAT_40021000 & 2) != 0) {\n        current_time = get_current_time();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      start_time = get_current_time();\n      while ((_DAT_40021000 & 2) == 0) {\n        current_time = get_current_time();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | flags[5] << 3;\n    }\n  }\n  if ((*flags & 8) != 0) {\n    if (flags[6] == 0) {\n      _DAT_42420480 = 0;\n      start_time = get_current_time();\n      while ((_DAT_40021024 & 2) != 0) {\n        current_time = get_current_time();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      start_time = get_current_time();\n      while ((_DAT_40021024 & 2) == 0) {\n        current_time = get_current_time();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n      calculate_iterations(1);\n    }\n  }\n  if ((*flags & 4) != 0) {\n    is_flag_set = (_DAT_4002101c & 0x10000000) == 0;\n    if (is_flag_set) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      start_time = get_current_time();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        current_time = get_current_time();\n        if (100 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    value = flags[3];\n    if (value == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (value == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (value == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (flags[3] == 0) {\n      start_time = get_current_time();\n      while ((_DAT_40021020 & 2) != 0) {\n        current_time = get_current_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      start_time = get_current_time();\n      while ((_DAT_40021020 & 2) == 0) {\n        current_time = get_current_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    if (is_flag_set) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (flags[7] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (flags[7] == 2) {\n    _DAT_42420060 = 0;\n    start_time = get_current_time();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (flags[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | flags[2];\n        }\n        _DAT_40021004 = _DAT_40021004 & 0xffc2ffff | flags[8] | flags[9];\n        _DAT_42420060 = 1;\n        start_time = get_current_time();\n        do {\n          if ((_DAT_40021000 & 0x2000000) != 0) {\n            return 0;\n          }\n          current_time = get_current_time();\n        } while ((uint)(current_time - start_time) < 3);\n        return 3;\n      }\n      current_time = get_current_time();\n    } while ((uint)(current_time - start_time) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    start_time = get_current_time();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        return 0;\n      }\n      current_time = get_current_time();\n    } while ((uint)(current_time - start_time) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "current_name": "check_conditions_08005460",
            "entrypoint": "0x08005460",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005460": "check_conditions_08005460",
                "bVar5": "is_flag_set",
                "calculate_iterations_08005434": "calculate_iterations",
                "get_data_08003760": "get_current_time",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "param_1": "flags",
                "uVar3": "result",
                "uVar4": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005840": {
            "additional_data": {
                "FUN_08005840": {
                    "1": "calculate_timing_value",
                    "16": "calculate_delay",
                    "2": "calculate_time_delay",
                    "3": "calculate_processing_time"
                },
                "_DAT_40021004": {
                    "1": "status_register",
                    "2": "status",
                    "3": "data",
                    "4": "register_value"
                },
                "local_1c": {
                    "1": "input_multiplier",
                    "2": "delay_multiplier",
                    "3": "multiplier",
                    "5": "counter"
                },
                "uStack_10": {
                    "1": "constant_a",
                    "2": "stack_value2",
                    "3": "constant2",
                    "4": "constant3"
                },
                "uStack_14": {
                    "1": "multiplier2",
                    "2": "constant3",
                    "3": "multiplier",
                    "5": "constant2"
                },
                "uStack_18": {
                    "1": "stack_value4",
                    "2": "offset",
                    "4": "multiplier"
                },
                "uStack_c": {
                    "1": "scaling_factor4",
                    "2": "constant3",
                    "3": "constant",
                    "4": "constant4"
                },
                "uVar1": {
                    "1": "time_delay",
                    "2": "result",
                    "3": "delay"
                }
            },
            "called": [],
            "calling": [
                "FUN_080058d2"
            ],
            "code": "\n\n\nuint calculate_delay_08005840(void)\n\n{\n  uint delay;\n  undefined2 counter;\n  undefined4 constant1;\n  undefined4 constant2;\n  undefined4 constant3;\n  undefined4 constant4;\n  \n  constant4 = 0x10100f0e;\n  constant3 = 0xd0c0b0a;\n  constant2 = 0x9080706;\n  constant1 = 0x5040302;\n  counter = 0x201;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    delay = (uint)*(byte *)((int)&constant1 + ((_DAT_40021004 << 10) >> 0x1c));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      delay = delay * 4000000;\n    }\n    else {\n      delay = (delay * 8000000) /\n              (uint)*(byte *)((int)&counter - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n    }\n  }\n  else {\n    delay = 8000000;\n  }\n  return delay;\n}\n\n",
            "current_name": "calculate_delay_08005840",
            "entrypoint": "0x08005840",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005840": "calculate_delay_08005840",
                "local_1c": "counter",
                "uStack_10": "constant3",
                "uStack_14": "constant2",
                "uStack_18": "constant1",
                "uStack_c": "constant4",
                "uVar1": "delay"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080058ac": {
            "additional_data": {
                "&DAT_0800a944": {
                    "1": "delay_lookup_table"
                },
                "DAT_20000018": {
                    "1": "delay_config",
                    "4": "delay",
                    "6": "delay_value"
                },
                "FUN_080058ac": {
                    "1": "update_data",
                    "2": "initialize_memory",
                    "5": "initialize_and_update",
                    "7": "initialize_and_update_memory"
                },
                "_DAT_40021004": {
                    "1": "config_status",
                    "3": "memory_flags"
                },
                "_DAT_40022000": {
                    "1": "max_config_length",
                    "2": "memory_config",
                    "4": "memory_size"
                },
                "calculate_delay_08005840": {
                    "15": "calculate_delay"
                },
                "get_data_08003760": {
                    "1": "get_time",
                    "2": "get_data",
                    "3": "get_elapsed_time",
                    "9": "get_current_time"
                },
                "iVar1": {
                    "1": "initial_value",
                    "18": "start_time",
                    "2": "initial_time"
                },
                "iVar2": {
                    "1": "current_value",
                    "20": "current_time"
                },
                "initialize_and_update_memory_080036d8": {
                    "2": "initialize_memory",
                    "8": "initialize_and_update_memory"
                },
                "param_1": {
                    "1": "configuration",
                    "14": "flags",
                    "2": "input_parameters"
                },
                "param_2": {
                    "1": "limit",
                    "13": "size",
                    "2": "length"
                },
                "uVar3": {
                    "1": "temp_var",
                    "13": "delay",
                    "2": "calculated_delay",
                    "3": "delay_value"
                }
            },
            "called": [
                "FUN_080058d2"
            ],
            "calling": [
                "FUN_080035b8"
            ],
            "code": "\n\n\nundefined4 initialize_and_update_memory_080058ac(uint *flags,uint size)\n\n{\n  int start_time;\n  int current_time;\n  uint delay;\n  \n  if ((_DAT_40022000 & 7) < size) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | size;\n    if (size != (size & 7)) {\n      return 1;\n    }\n  }\n  if ((*flags & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | flags[2];\n  }\n  if ((*flags & 1) != 0) {\n    delay = flags[1];\n    if (delay == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((delay != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = delay | _DAT_40021004 & 0xfffffffc;\n    start_time = get_current_time();\n    if (flags[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        current_time = get_current_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (flags[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        current_time = get_current_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        current_time = get_current_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (size < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | size;\n    if (size != (size & 7)) {\n      return 1;\n    }\n  }\n  if ((*flags & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | flags[3];\n  }\n  if ((*flags & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | flags[4] << 3;\n  }\n  delay = calculate_delay();\n  DAT_20000018 = delay >> (&DAT_0800a944)[(_DAT_40021004 << 0x18) >> 0x1c];\n  initialize_and_update_memory_080058ac(0xf);\n  return 0;\n}\n\n",
            "current_name": "initialize_and_update_memory_080058ac",
            "entrypoint": "0x080058ac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080058ac": "initialize_and_update_memory_080058ac",
                "calculate_delay_08005840": "calculate_delay",
                "get_data_08003760": "get_current_time",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "initialize_and_update_memory_080036d8": "initialize_and_update_memory",
                "param_1": "flags",
                "param_2": "size",
                "uVar3": "delay"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080058d2": {
            "additional_data": {
                "DAT_20000018": {
                    "1": "delayed_data",
                    "3": "delay_result",
                    "7": "delay_value"
                },
                "FUN_080058d2": {
                    "1": "update_memory_and_return_status",
                    "2": "perform_operation",
                    "3": "initialize_and_update_memory",
                    "9": "initialize_and_update"
                },
                "_DAT_0800a944": {
                    "1": "delay_lookup_table"
                },
                "_DAT_40021000": {
                    "1": "control_register",
                    "2": "status_register"
                },
                "_DAT_40021004": {
                    "1": "memory_register",
                    "5": "control_register"
                },
                "_DAT_40022000": {
                    "1": "memory_reg",
                    "2": "memory_size",
                    "5": "memory_register"
                },
                "calculate_delay_08005840": {
                    "11": "calculate_delay"
                },
                "calculate_delay_08005840()": {
                    "1": "calculate_delay"
                },
                "get_data_08003760": {
                    "1": "get_delta_time",
                    "2": "get_data",
                    "5": "get_elapsed_time"
                },
                "get_data_08003760()": {
                    "1": "get_current_time"
                },
                "iVar1": {
                    "1": "start",
                    "12": "start_time",
                    "2": "starting_time",
                    "6": "initial_value"
                },
                "iVar2": {
                    "1": "data2",
                    "20": "current_time",
                    "6": "current_value"
                },
                "initialize_and_update_memory_080036d8": {
                    "1": "init_and_update_memory",
                    "10": "initialize_and_update_memory"
                },
                "initialize_and_update_memory_080036d8()": {
                    "1": "initialize_memory"
                },
                "param _2": {
                    "1": "device_identifier"
                },
                "param_1": {
                    "1": "config_flags",
                    "2": "system_flags",
                    "24": "flags"
                },
                "param_2": {
                    "1": "num_options",
                    "12": "value",
                    "3": "size",
                    "6": "delay"
                },
                "uVar3": {
                    "1": "result",
                    "2": "calculated_delay",
                    "3": "status",
                    "4": "delay"
                }
            },
            "called": [
                "FUN_080036d8",
                "FUN_08003760",
                "FUN_08005840"
            ],
            "calling": [
                "FUN_080058ac"
            ],
            "code": "\n\n\nundefined4 initialize_and_update_080058d2(uint *flags,uint value)\n\n{\n  int start_time;\n  int current_time;\n  uint delay;\n  \n  if ((*flags & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | flags[2];\n  }\n  if ((*flags & 1) != 0) {\n    delay = flags[1];\n    if (delay == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((delay != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = delay | _DAT_40021004 & 0xfffffffc;\n    start_time = get_current_time;\n    if (flags[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        current_time = get_current_time;\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (flags[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        current_time = get_current_time;\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        current_time = get_current_time;\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (value < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | value;\n    if (value != (value & 7)) {\n      return 1;\n    }\n  }\n  if ((*flags & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | flags[3];\n  }\n  if ((*flags & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | flags[4] << 3;\n  }\n  delay = calculate_delay;\n  DAT_20000018 = delay >> (&DAT_0800a944)[(_DAT_40021004 << 0x18) >> 0x1c];\n  initialize_and_update_080058d2_memory(0xf);\n  return 0;\n}\n\n",
            "current_name": "initialize_and_update_080058d2",
            "entrypoint": "0x080058d2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080058d2": "initialize_and_update_080058d2",
                "calculate_delay_08005840": "calculate_delay",
                "calculate_delay_08005840()": "calculate_delay",
                "get_data_08003760": "get_elapsed_time",
                "get_data_08003760()": "get_current_time",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "initialize_and_update_memory_080036d8": "initialize_and_update_memory",
                "param_1": "flags",
                "param_2": "value",
                "uVar3": "delay"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005a1c": {
            "additional_data": {
                "DAT_20000018": {
                    "1": "data_offset",
                    "2": "global_value",
                    "6": "data_value",
                    "9": "data"
                },
                "FUN_08005a1c": {
                    "1": "get_dat_value",
                    "12": "get_data",
                    "2": "get_global_data",
                    "6": "get_data_value"
                },
                "return": {
                    "1": "data_variable"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005a28",
                "FUN_08005a48",
                "FUN_080035b8"
            ],
            "code": "\nundefined4 get_data_08005a1c(void)\n\n{\n  data_variable DAT_20000018;\n}\n\n",
            "current_name": "get_data_08005a1c",
            "entrypoint": "0x08005a1c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005a1c": "get_data_08005a1c",
                "return": "data_variable"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005a28": {
            "additional_data": {
                "&DAT_0800a954": {
                    "1": "shift_lookup_table",
                    "2": "shift_table",
                    "3": "shift_array"
                },
                "(&DAT_0800a954)[(uint)(_DAT_40021004 << 0x15) >> 0x1d]": {
                    "1": "shift_amount"
                },
                "DAT_0800a954": {
                    "1": "bit_shift_amount",
                    "2": "shift_array",
                    "3": "shift_amount"
                },
                "FUN_08005a28": {
                    "1": "right_shift_data",
                    "2": "extracted_data_shifted",
                    "3": "extracted_data_shift",
                    "4": "shifted_data"
                },
                "_DAT_40021004": {
                    "1": "data_value",
                    "2": "input_data",
                    "3": "value",
                    "5": "input",
                    "7": "input_value"
                },
                "get_data_08005a1c": {
                    "12": "get_data",
                    "2": "retrieve_data"
                },
                "uVar1": {
                    "2": "data_value",
                    "22": "data"
                }
            },
            "called": [
                "FUN_08005a1c"
            ],
            "calling": [
                "FUN_080075dc",
                "FUN_08006538",
                "FUN_080045c0"
            ],
            "code": "\n\n\nuint get_shifted_data_08005a28(void)\n\n{\n  uint data;\n  \n  data = get_data();\n  return data >> (&DAT_0800a954)[(uint)(_DAT_40021004 << 0x15) >> 0x1d];\n}\n\n",
            "current_name": "get_shifted_data_08005a28",
            "entrypoint": "0x08005a28",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005a28": "get_shifted_data_08005a28",
                "get_data_08005a1c": "get_data",
                "uVar1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005a48": {
            "additional_data": {
                "&DAT_0800a954": {
                    "1": "shift_indices",
                    "4": "shift_values"
                },
                "(&DAT_0800a954)[(uint)(_DAT_40021004 << 0x12) >> 0x1d]": {
                    "1": "shift_amount"
                },
                "DAT_0800a954": {
                    "1": "shift_constants",
                    "2": "shift_table",
                    "3": "shift_amount",
                    "5": "shift_values"
                },
                "FUN_08005a48": {
                    "1": "shift_data_by_offset",
                    "2": "extracted_data_shifted",
                    "4": "shift_data",
                    "5": "get_shifted_data"
                },
                "_DAT_40021004": {
                    "1": "parameter",
                    "2": "shift",
                    "3": "input_data",
                    "6": "input",
                    "9": "input_value"
                },
                "get_data_08005a1c": {
                    "1": "get_initial_data",
                    "2": "extract_data",
                    "7": "get_data"
                },
                "uVar1": {
                    "1": "data_from_get",
                    "2": "extracted_data",
                    "22": "data",
                    "3": "data_value"
                }
            },
            "called": [
                "FUN_08005a1c"
            ],
            "calling": [
                "FUN_080075dc",
                "FUN_08006538",
                "FUN_08005bb8"
            ],
            "code": "\n\n\nuint get_shifted_data_08005a48(void)\n\n{\n  uint data;\n  \n  data = get_data();\n  return data >> (&DAT_0800a954)[(uint)(_DAT_40021004 << 0x12) >> 0x1d];\n}\n\n",
            "current_name": "get_shifted_data_08005a48",
            "entrypoint": "0x08005a48",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005a48": "get_shifted_data_08005a48",
                "get_data_08005a1c": "get_data",
                "uVar1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005a68": {
            "additional_data": {
                "*param_1": {
                    "1": "output_array[0]"
                },
                "*param_2": {
                    "1": "input_array[0]"
                },
                "FUN_08005a68": {
                    "1": "extract_data",
                    "11": "initialize_parameters",
                    "2": "initialize_param",
                    "3": "initialize_values",
                    "5": "initialize_data",
                    "7": "initialize_params"
                },
                "PTR_40022000": {
                    "1": "flag_value"
                },
                "_DAT_40021004": {
                    "1": "data_value1",
                    "10": "input_data",
                    "2": "data_register1",
                    "4": "data_register"
                },
                "_DAT_40022000": {
                    "1": "status_register",
                    "2": "memory_address"
                },
                "control_register": {
                    "1": "param_flags"
                },
                "outputArray": {
                    "1": "result"
                },
                "output_array": {
                    "1": "param_values"
                },
                "param_1": {
                    "1": "register_array",
                    "17": "output_array",
                    "2": "output_values"
                },
                "param_1[1]": {
                    "2": "output_array[1]"
                },
                "param_1[2]": {
                    "2": "output_array[2]"
                },
                "param_1[3]": {
                    "2": "output_array[3]"
                },
                "param_1[4]": {
                    "2": "output_array[4]"
                },
                "param_2": {
                    "1": "status_register",
                    "2": "config_array",
                    "6": "input_array"
                },
                "param_2[0]": {
                    "1": "status_flags[0]"
                },
                "statusArray": {
                    "1": "status"
                }
            },
            "called": [],
            "calling": [
                "FUN_080075dc"
            ],
            "code": "\n\n\nvoid initialize_parameters_08005a68(undefined4 *output_array,uint *input_array)\n\n{\n  *output_array = 0xf;\n  output_array[1] = _DAT_40021004 & 3;\n  output_array[2] = _DAT_40021004 & 0xf0;\n  output_array[3] = _DAT_40021004 & 0x700;\n  output_array[4] = _DAT_40021004 >> 3 & 0x700;\n  *input_array = _DAT_40022000 & 7;\n  return;\n}\n\n",
            "current_name": "initialize_parameters_08005a68",
            "entrypoint": "0x08005a68",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005a68": "initialize_parameters_08005a68",
                "param_1": "output_array",
                "param_1[1]": "output_array[1]",
                "param_1[2]": "output_array[2]",
                "param_1[3]": "output_array[3]",
                "param_1[4]": "output_array[4]",
                "param_2": "input_array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005aa4": {
            "additional_data": {
                "5000": {
                    "1": "time_threshold"
                },
                "FUN_08005aa4": {
                    "1": "update_flags_and_settings",
                    "2": "configure_peripheral",
                    "3": "update_data",
                    "4": "update_settings",
                    "6": "update_configuration"
                },
                "_DAT_40007000": {
                    "1": "device_status_register",
                    "3": "register2"
                },
                "_DAT_40021004": {
                    "1": "config_register",
                    "2": "device_control",
                    "3": "register5"
                },
                "_DAT_4002101c": {
                    "1": "status_register1",
                    "3": "register1"
                },
                "_DAT_40021020": {
                    "1": "global_var2",
                    "3": "register3"
                },
                "_DAT_42420440": {
                    "1": "register_4",
                    "3": "register4"
                },
                "bVar5": {
                    "1": "is_first_run",
                    "12": "is_flag_set",
                    "2": "is_condition_met",
                    "4": "flag",
                    "5": "is_bit_set"
                },
                "get_data_08003760": {
                    "2": "get_data"
                },
                "get_data_08003760()": {
                    "1": "get_current_time()"
                },
                "iVar3": {
                    "1": "iterator1",
                    "2": "counter1",
                    "3": "start_time",
                    "8": "start_value",
                    "9": "initial_value"
                },
                "iVar4": {
                    "1": "temp_4",
                    "17": "current_value",
                    "2": "counter2",
                    "3": "data2",
                    "4": "current_time"
                },
                "param_1": {
                    "1": "flags_array",
                    "2": "input_data",
                    "4": "config_params",
                    "5": "settings"
                },
                "uVar1": {
                    "1": "flag_a",
                    "11": "temp_var1",
                    "3": "var1",
                    "4": "flag1",
                    "5": "temp1"
                },
                "uVar1 != 0": {
                    "1": "is_bit_set(temp_var_1)"
                },
                "uVar2": {
                    "1": "flag_b",
                    "11": "temp_var2",
                    "3": "var2",
                    "4": "flag2",
                    "5": "temp2"
                }
            },
            "called": [
                "FUN_08003760"
            ],
            "calling": [
                "FUN_080035b8"
            ],
            "code": "\n\n\nundefined4 update_configuration_08005aa4(uint *settings)\n\n{\n  uint temp_var1;\n  uint temp_var2;\n  int initial_value;\n  int current_value;\n  bool is_flag_set;\n  \n  if ((*settings & 1) != 0) {\n    is_flag_set = (_DAT_4002101c & 0x10000000) == 0;\n    if (is_flag_set) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      initial_value = get_current_time();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        current_value = get_current_time();\n        if (100 < (uint)(current_value - initial_value)) {\n          return 3;\n        }\n      }\n    }\n    if (((_DAT_40021020 & 0x300) != 0) && ((_DAT_40021020 & 0x300) != (settings[1] & 0x300))) {\n      temp_var2 = _DAT_40021020 & 0xfffffcff;\n      _DAT_42420440 = 0;\n      temp_var1 = _DAT_40021020 & 1;\n      _DAT_40021020 = temp_var2;\n      if (temp_var1 != 0) {\n        initial_value = get_current_time();\n        while ((_DAT_40021020 & 2) == 0) {\n          current_value = get_current_time();\n          if (5000 < (uint)(current_value - initial_value)) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffcff | settings[1];\n    if (is_flag_set) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if ((*settings & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffff3fff | settings[2];\n  }\n  if ((*settings & 0x10) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffbfffff | settings[3];\n  }\n  return 0;\n}\n\n",
            "current_name": "update_configuration_08005aa4",
            "entrypoint": "0x08005aa4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005aa4": "update_configuration_08005aa4",
                "bVar5": "is_flag_set",
                "get_data_08003760": "get_data",
                "get_data_08003760()": "get_current_time()",
                "iVar3": "initial_value",
                "iVar4": "current_value",
                "param_1": "settings",
                "uVar1": "temp_var1",
                "uVar2": "temp_var2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005bb8": {
            "additional_data": {
                "FUN_08005bb8": {
                    "1": "calculate_shifted_value",
                    "2": "calculate_parameter",
                    "3": "calculate_data_rate",
                    "4": "calculate_shifted_data"
                },
                "_DAT_40021000": {
                    "1": "data_2"
                },
                "_DAT_40021004": {
                    "1": "data_1"
                },
                "_DAT_40021020": {
                    "1": "data_3"
                },
                "_DAT_40021024": {
                    "1": "data_4"
                },
                "local_24": {
                    "1": "constant_5",
                    "2": "constant1",
                    "3": "constant_value",
                    "6": "shifted_data",
                    "9": "shifted_value"
                },
                "param_1": {
                    "1": "input_param",
                    "18": "input_value",
                    "2": "parameter",
                    "4": "input"
                },
                "uStack_14": {
                    "1": "temp4",
                    "2": "constant",
                    "3": "constant_4"
                },
                "uStack_18": {
                    "1": "temp3",
                    "2": "divider_1",
                    "3": "constant3",
                    "4": "constant_2"
                },
                "uStack_1c": {
                    "1": "constant3",
                    "2": "constant2",
                    "5": "constant_3"
                },
                "uStack_20": {
                    "1": "temp1",
                    "2": "shifted_value",
                    "3": "multiplier_1",
                    "4": "constant_1"
                },
                "uVar1": {
                    "1": "time_delay",
                    "18": "result",
                    "2": "delay"
                }
            },
            "called": [
                "FUN_08005a48"
            ],
            "calling": [
                "FUN_08003e20",
                "FUN_0800376c"
            ],
            "code": "\n\n\nuint calculate_data_08005bb8(int input_value)\n\n{\n  uint result;\n  undefined2 shifted_value;\n  undefined4 constant_1;\n  undefined4 constant_3;\n  undefined4 constant_2;\n  undefined4 constant_1;\n  \n  constant_1 = 0x10100f0e;\n  constant_2 = 0xd0c0b0a;\n  constant_3 = 0x9080706;\n  constant_1 = 0x5040302;\n  shifted_value = 0x201;\n  if (input_value == 2) {\n    result = get_shifted_data_08005a48();\n    result = result / ((((_DAT_40021004 << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (input_value == 0x10) {\n    if ((_DAT_40021000 & 0x1000000) == 0) {\n      result = 0;\n    }\n    else {\n      if ((_DAT_40021004 & 0x10000) == 0) {\n        result = 4000000;\n      }\n      else {\n        result = 8000000 / *(byte *)((int)&shifted_value - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n      }\n      result = result * *(byte *)((int)&constant_1 + ((_DAT_40021004 << 10) >> 0x1c));\n      if ((_DAT_40021004 & 0x400000) == 0) {\n        result = (result * 2) / 3;\n      }\n    }\n  }\n  else if (input_value == 1) {\n    if ((_DAT_40021020 & 0x302) == 0x102) {\n      result = 0x8000;\n    }\n    else if (((_DAT_40021020 & 0x300) == 0x200) && ((_DAT_40021024 & 2) != 0)) {\n      result = 32000;\n    }\n    else if ((_DAT_40021020 & 0x300) == 0x300) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        result = 0;\n      }\n      else {\n        result = 0xf424;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_data_08005bb8",
            "entrypoint": "0x08005bb8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005bb8": "calculate_data_08005bb8",
                "local_24": "shifted_value",
                "param_1": "input_value",
                "uStack_14": "constant_1",
                "uStack_18": "constant_2",
                "uStack_1c": "constant_3",
                "uStack_20": "constant_1",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005cb4": {
            "additional_data": {
                "(*param_1)[1]": {
                    "1": "flag2",
                    "3": "flags[1]"
                },
                "(int)param_1 + 0x11": {
                    "1": "address_offset"
                },
                "*(undefined *)((int)param_1 + 0x11)": {
                    "1": "flag_value",
                    "4": "flag"
                },
                "**param_1": {
                    "1": "dereferenced_parameter"
                },
                "*_DAT_40010414": {
                    "1": "data_register1"
                },
                "*param_1": {
                    "1": "command_array"
                },
                "*param_1[1]": {
                    "1": "pointed_value_index_1"
                },
                "DAT_40010414": {
                    "1": "constant_value"
                },
                "DAT_xxxxxxx": {
                    "1": "unchanged_variable"
                },
                "FUN_08005cb4": {
                    "1": "execute_and_reset_callback",
                    "2": "execute_callback_and_reset_flag",
                    "3": "execute_and_reset_flags",
                    "7": "check_and_execute_callback"
                },
                "PTR_08005ccd": {
                    "1": "pointer_variable"
                },
                "PTR_080073c0": {
                    "1": "callback_function"
                },
                "PTR_40010414": {
                    "1": "memory_location"
                },
                "PTR_xxxxxxx": {
                    "1": "unchanged_variable"
                },
                "_DAT_40010414": {
                    "1": "data_flag",
                    "2": "memory_address",
                    "3": "data_40010414"
                },
                "callback_080073c0": {
                    "1": "execute_callback"
                },
                "execute_callback_080073c0": {
                    "1": "call_flag_callback",
                    "12": "execute_callback"
                },
                "execute_callback_080073c0()": {
                    "2": "execute_callback"
                },
                "original_variable_name_1": {
                    "1": "flag_1"
                },
                "original_variable_name_2": {
                    "1": "flag_2"
                },
                "param_1": {
                    "1": "input_values",
                    "2": "parameters",
                    "3": "flags"
                },
                "param_1 + 0x11": {
                    "1": "data_pointer"
                },
                "param_1[0]": {
                    "1": "input_value_1"
                },
                "param_1[1]": {
                    "1": "input_value_2"
                },
                "undefined": {
                    "1": "data_type_flag"
                }
            },
            "called": [
                "FUN_080073c0"
            ],
            "calling": [],
            "code": "\n\n\nvoid check_and_execute_callback_08005cb4(uint **flags)\n\n{\n  if (((**flags & 2) != 0) && (((*flags)[1] & 2) != 0)) {\n    execute_callback;\n    (*flags)[1] = 0xfffffffd;\n  }\n  _DAT_40010414 = 0x20000;\n  *(data_type_flag *)((int)flags + 0x11) = 1;\n  return;\n}\n\n",
            "current_name": "check_and_execute_callback_08005cb4",
            "entrypoint": "0x08005cb4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005cb4": "check_and_execute_callback_08005cb4",
                "callback_080073c0": "execute_callback",
                "execute_callback_080073c0": "execute_callback",
                "execute_callback_080073c0()": "execute_callback",
                "param_1": "flags",
                "undefined": "data_type_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005cec": {
            "additional_data": {
                "*(uint *)(param_1 + 0x18)": {
                    "1": "flags2"
                },
                "*(uint *)(param_1 + 0x34)": {
                    "1": "value2"
                },
                "0x40012c00": {
                    "1": "special_address"
                },
                "FUN_08005cec": {
                    "1": "update_and_store_value",
                    "2": "update_flags_and_values",
                    "4": "update_parameters",
                    "6": "update_params",
                    "7": "update_data"
                },
                "param_1": {
                    "1": "control_address",
                    "10": "base_address",
                    "2": "memory_address",
                    "4": "config_address",
                    "6": "data_address"
                },
                "param_1 + 0x20": {
                    "1": "flags_address"
                },
                "param_1 + 4": {
                    "1": "value_address"
                },
                "param_2": {
                    "1": "new_data",
                    "2": "data_values",
                    "3": "config_values",
                    "4": "values"
                },
                "param_2[2]": {
                    "1": "value3"
                },
                "param_2[3]": {
                    "1": "value4"
                },
                "param_2[5]": {
                    "1": "value5"
                },
                "param_2[6]": {
                    "1": "value6"
                },
                "uVar1": {
                    "1": "updated_flags1",
                    "14": "updated_value1",
                    "4": "updated_var1"
                },
                "uVar2": {
                    "1": "current_value",
                    "14": "updated_value2",
                    "5": "updated_var2"
                },
                "uVar3": {
                    "1": "original_value",
                    "14": "updated_value3",
                    "4": "new_value",
                    "5": "updated_var3"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "code": "\nvoid update_data_08005cec(int base_address,uint *values)\n\n{\n  uint updated_value1;\n  uint updated_value2;\n  uint updated_value3;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xfffffffe;\n  updated_value2 = *(uint *)(base_address + 4);\n  updated_value3 = *values;\n  updated_value1 = *(uint *)(base_address + 0x20) & 0xfffffffd | value3;\n  if (base_address == 0x40012c00) {\n    updated_value1 = (updated_value1 & 0xfffffff7 | value4) & 0xfffffffb;\n    updated_value2 = updated_value2 & 0xfffffcff | value5 | value6;\n  }\n  *(uint *)(base_address + 4) = updated_value2;\n  *(uint *)(base_address + 0x18) = *(uint *)(base_address + 0x18) & 0xffffff8c | updated_value3;\n  *(uint *)(base_address + 0x34) = values[1];\n  *(uint *)(base_address + 0x20) = updated_value1;\n  return;\n}\n\n",
            "current_name": "update_data_08005cec",
            "entrypoint": "0x08005cec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005cec": "update_data_08005cec",
                "param_1": "base_address",
                "param_2": "values",
                "param_2[2]": "value3",
                "param_2[3]": "value4",
                "param_2[5]": "value5",
                "param_2[6]": "value6",
                "uVar1": "updated_value1",
                "uVar2": "updated_value2",
                "uVar3": "updated_value3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005d48": {
            "additional_data": {
                "FUN_08005d48": {
                    "1": "update_param1",
                    "2": "update_values",
                    "3": "update_param_values",
                    "5": "update_data",
                    "6": "update_params",
                    "8": "update_parameters"
                },
                "param_1": {
                    "1": "param_addr",
                    "11": "base_address",
                    "2": "register_address",
                    "4": "data_address"
                },
                "param_2": {
                    "1": "new_data",
                    "2": "input_params",
                    "4": "param_values",
                    "5": "parameters",
                    "7": "param_array"
                },
                "uVar1": {
                    "1": "updated_val1",
                    "16": "updated_value1",
                    "7": "updated_var1"
                },
                "uVar2": {
                    "1": "var2",
                    "16": "updated_value2",
                    "7": "updated_var2"
                },
                "uVar3": {
                    "1": "updated_value_3",
                    "16": "updated_value3",
                    "7": "updated_var3"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "code": "\nvoid update_parameters_08005d48(int base_address,uint *param_array)\n\n{\n  uint updated_value1;\n  uint updated_value2;\n  uint updated_value3;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xfffffeff;\n  updated_value2 = *(uint *)(base_address + 4);\n  updated_value3 = *param_array;\n  updated_value1 = *(uint *)(base_address + 0x20) & 0xfffffdff | param_array[2] << 8;\n  if (base_address == 0x40012c00) {\n    updated_value1 = (updated_value1 & 0xfffff7ff | param_array[3] << 8) & 0xfffffbff;\n    updated_value2 = updated_value2 & 0xffffcfff | param_array[5] << 4 | param_array[6] << 4;\n  }\n  *(uint *)(base_address + 4) = updated_value2;\n  *(uint *)(base_address + 0x1c) = *(uint *)(base_address + 0x1c) & 0xffffff8c | updated_value3;\n  *(uint *)(base_address + 0x3c) = param_array[1];\n  *(uint *)(base_address + 0x20) = updated_value1;\n  return;\n}\n\n",
            "current_name": "update_parameters_08005d48",
            "entrypoint": "0x08005d48",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005d48": "update_parameters_08005d48",
                "param_1": "base_address",
                "param_2": "param_array",
                "uVar1": "updated_value1",
                "uVar2": "updated_value2",
                "uVar3": "updated_value3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005dac": {
            "additional_data": {
                "FUN_08005dac": {
                    "1": "update_flags_and_values",
                    "11": "update_parameters",
                    "2": "update_data",
                    "3": "update_memory",
                    "6": "update_params"
                },
                "iVar2": {
                    "1": "field2_value",
                    "2": "first_param",
                    "3": "var2",
                    "4": "value1",
                    "6": "value2"
                },
                "iVar3": {
                    "1": "third_param",
                    "2": "param_value2",
                    "3": "param2_value",
                    "4": "value2",
                    "6": "value3"
                },
                "param_1": {
                    "1": "buffer",
                    "15": "base_address",
                    "2": "config_address",
                    "3": "memory_address",
                    "5": "param_address"
                },
                "param_2": {
                    "1": "config_data",
                    "4": "values",
                    "5": "parameters",
                    "6": "params_array",
                    "8": "param_array"
                },
                "uVar1": {
                    "1": "entry",
                    "2": "current_value",
                    "3": "var1",
                    "4": "original_value",
                    "6": "value1"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "code": "\nvoid update_parameters_08005dac(int base_address,int *param_array)\n\n{\n  uint value1;\n  int value2;\n  int value3;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xffffefff;\n  value1 = *(uint *)(base_address + 4);\n  value2 = *param_array;\n  value3 = param_array[2];\n  if (base_address == 0x40012c00) {\n    value1 = value1 & 0xffffbfff | param_array[5] << 6;\n  }\n  *(uint *)(base_address + 4) = value1;\n  *(uint *)(base_address + 0x1c) = *(uint *)(base_address + 0x1c) & 0xffff8cff | value2 << 8;\n  *(int *)(base_address + 0x40) = param_array[1];\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xffffdfff | value3 << 0xc;\n  return;\n}\n\n",
            "current_name": "update_parameters_08005dac",
            "entrypoint": "0x08005dac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005dac": "update_parameters_08005dac",
                "iVar2": "value2",
                "iVar3": "value3",
                "param_1": "base_address",
                "param_2": "param_array",
                "uVar1": "value1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005df4": {
            "additional_data": {
                "(int)param_1": {
                    "1": "config_ptr_int"
                },
                "(int)param_1 + 0x3d": {
                    "1": "config_flag_offset"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "flag",
                    "3": "config_flag"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "config_ptr",
                    "2": "flag"
                },
                "*param_1": {
                    "1": "config_ptr"
                },
                "FUN_08005df4": {
                    "1": "initialize_and_reset_config",
                    "4": "initialize_and_update_configuration",
                    "5": "initialize_and_configure",
                    "7": "update_configuration",
                    "8": "initialize_configuration"
                },
                "initialize_configuration_08007710": {
                    "4": "initialize_configuration_helper",
                    "9": "initialize_configuration"
                },
                "param_1": {
                    "1": "param",
                    "11": "configuration",
                    "4": "config",
                    "9": "config_ptr"
                },
                "puVar1": {
                    "1": "config_data",
                    "2": "value_ptr",
                    "3": "current_config",
                    "7": "config_ptr"
                },
                "puVar1[8]": {
                    "1": "config_value"
                }
            },
            "called": [
                "FUN_08007710"
            ],
            "calling": [
                "FUN_080076e0"
            ],
            "code": "\nvoid initialize_configuration_08005df4(uint **configuration)\n\n{\n  uint *config_ptr;\n  \n  *(undefined *)(config_ptr_int + 0x3d) = 2;\n  config_ptr = *configuration;\n  if ((config_value & 0x1111) == 0) {\n    if ((config_value & 0x444) == 0) {\n      *config_ptr = *config_ptr & 0xfffffffe;\n    }\n  }\n  initialize_configuration_08005df4(configuration);\n  *(undefined *)(config_ptr_int + 0x3d) = 0;\n  *(undefined *)(configuration + 0xf) = 0;\n  return;\n}\n\n",
            "current_name": "initialize_configuration_08005df4",
            "entrypoint": "0x08005df4",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1": "config_ptr_int",
                "FUN_08005df4": "initialize_configuration_08005df4",
                "initialize_configuration_08007710": "initialize_configuration",
                "param_1": "configuration",
                "puVar1": "config_ptr",
                "puVar1[8]": "config_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005e2e": {
            "additional_data": {
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "status_flag"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "other_flag"
                },
                "*param_1": {
                    "1": "configuration"
                },
                "FUN_08005e2e": {
                    "1": "update_and_reset_configuration",
                    "2": "update_and_configure",
                    "26": "update_configuration"
                },
                "param_1": {
                    "1": "param",
                    "12": "config",
                    "13": "configuration",
                    "3": "config_ptr"
                },
                "puVar1": {
                    "1": "ptr_data",
                    "10": "config_ptr",
                    "2": "current_value",
                    "4": "data_ptr"
                },
                "update_configuration_08007110": {
                    "1": "update_configuration",
                    "5": "update_configuration_helper"
                }
            },
            "called": [
                "FUN_08007110"
            ],
            "calling": [
                "FUN_080071e4"
            ],
            "code": "\nvoid update_configuration_08005e2e(uint **configuration)\n\n{\n  uint *config_ptr;\n  \n  *(undefined *)((int)configuration + 0x3d) = 2;\n  config_ptr = *configuration;\n  if ((config_ptr[8] & 0x1111) == 0) {\n    if ((config_ptr[8] & 0x444) == 0) {\n      *config_ptr = *config_ptr & 0xfffffffe;\n    }\n  }\n  update_configuration_08005e2e_helper(configuration);\n  *(undefined *)((int)configuration + 0x3d) = 0;\n  *(undefined *)(configuration + 0xf) = 0;\n  return;\n}\n\n",
            "current_name": "update_configuration_08005e2e",
            "entrypoint": "0x08005e2e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005e2e": "update_configuration_08005e2e",
                "param_1": "configuration",
                "puVar1": "config_ptr",
                "update_configuration_08007110": "update_configuration_helper"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005e68": {
            "called": [],
            "calling": [
                "FUN_08005e6e"
            ],
            "code": "\nvoid FUNC_08005e68(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005e68",
            "entrypoint": "0x08005e68",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005e68": "FUNC_08005e68"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005e6a": {
            "called": [],
            "calling": [
                "FUN_08005e6e"
            ],
            "code": "\nvoid FUNC_08005e6a(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005e6a",
            "entrypoint": "0x08005e6a",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005e6a": "FUNC_08005e6a"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005e6c": {
            "called": [],
            "calling": [
                "FUN_08005e6e"
            ],
            "code": "\nvoid FUNC_08005e6c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005e6c",
            "entrypoint": "0x08005e6c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005e6c": "FUNC_08005e6c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005e6e": {
            "additional_data": {
                "*(uint *)(*param_1 + 0x18)": {
                    "1": "condition1"
                },
                "*(uint *)(*param_1 + 0x1c)": {
                    "1": "condition2"
                },
                "*(uint *)(iVar1 + 0x10)": {
                    "1": "flag1"
                },
                "*(uint *)(iVar1 + 0xc)": {
                    "1": "flag2"
                },
                "*(undefined *)(param_1 + 7)": {
                    "1": "state"
                },
                "*(undefined4 *)(iVar1 + 0x10)": {
                    "1": "new_flag1"
                },
                "FUNC_08005e68": {
                    "1": "process_data_alt",
                    "2": "perform_action2",
                    "3": "function2",
                    "7": "function_b"
                },
                "FUNC_08005e68(param_1)": {
                    "1": "execute_function2(param)"
                },
                "FUNC_08005e6a": {
                    "1": "process_conditions_step",
                    "2": "function1",
                    "3": "process_data",
                    "6": "function_a"
                },
                "FUNC_08005e6a(param_1)": {
                    "1": "process_input_again(input)"
                },
                "FUNC_08005e6c": {
                    "1": "perform_function_c",
                    "2": "function4",
                    "6": "function_d"
                },
                "FUNC_08005e6c(param_1)": {
                    "1": "process_failure(input)"
                },
                "FUNC_080064ac": {
                    "1": "execute_function5",
                    "2": "perform_action5",
                    "6": "function_e"
                },
                "FUNC_080064ac(param_1)": {
                    "1": "restore_defaults(input)"
                },
                "FUNC_080064ae": {
                    "1": "function_e",
                    "2": "process_data2",
                    "6": "function_c"
                },
                "FUNC_080064ae(param_1)": {
                    "1": "revert_changes(input)"
                },
                "FUN_08005e6e": {
                    "1": "execute_callback_if_conditions_met",
                    "11": "process_flags",
                    "2": "process_conditions",
                    "6": "execute_callbacks"
                },
                "execute_callback_0800771c": {
                    "1": "execute_callback_one",
                    "14": "execute_callback1",
                    "4": "execute_callback"
                },
                "execute_callback_0800771c(param_1)": {
                    "1": "execute_callback1(param)"
                },
                "execute_callback_08007736": {
                    "1": "execute_bit1_callback",
                    "15": "execute_callback2"
                },
                "execute_callback_08007736(param_1)": {
                    "1": "execute_callback_3(callback_data)"
                },
                "iVar1": {
                    "1": "callback_ptr",
                    "13": "value",
                    "2": "ptr",
                    "4": "current_value"
                },
                "param_1": {
                    "1": "request",
                    "2": "parameters",
                    "3": "param",
                    "5": "callback_data",
                    "8": "flags"
                }
            },
            "called": [
                "FUN_08007736",
                "FUN_080064ac",
                "FUN_08005e68",
                "FUN_08005e6a",
                "FUN_0800771c",
                "FUN_08005e6c",
                "FUN_080064ae"
            ],
            "calling": [],
            "code": "\nvoid process_flags_08005e6e(int *flags)\n\n{\n  int value;\n  \n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 2) != 0) && ((*(uint *)(value + 0xc) & 2) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffd;\n    *(undefined *)(flags + 7) = 1;\n    if ((*(uint *)(*flags + 0x18) & 3) == 0) {\n      execute_callback1();\n      FUNC_08005e6a(flags);\n    }\n    else {\n      FUNC_08005e68();\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 4) != 0) && ((*(uint *)(value + 0xc) & 4) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffb;\n    *(undefined *)(flags + 7) = 2;\n    if ((*(uint *)(*flags + 0x18) & 0x300) == 0) {\n      execute_callback_2(callback_data);\n      FUNC_08005e6a(flags);\n    }\n    else {\n      FUNC_08005e68(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 8) != 0) && ((*(uint *)(value + 0xc) & 8) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffff7;\n    *(undefined *)(flags + 7) = 4;\n    if ((*(uint *)(*flags + 0x1c) & 3) == 0) {\n      execute_callback_2(callback_data);\n      FUNC_08005e6a(flags);\n    }\n    else {\n      FUNC_08005e68(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 0x10) != 0) && ((*(uint *)(value + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffef;\n    *(undefined *)(flags + 7) = 8;\n    if ((*(uint *)(*flags + 0x1c) & 0x300) == 0) {\n      execute_callback_2(callback_data);\n      FUNC_08005e6a(flags);\n    }\n    else {\n      FUNC_08005e68(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 1) != 0) && ((*(uint *)(value + 0xc) & 1) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffe;\n    execute_callback_3(callback_data);\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 0x80) != 0) && ((*(uint *)(value + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffff7f;\n    FUNC_080064ae(flags);\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 0x40) != 0) && ((*(uint *)(value + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffbf;\n    FUNC_08005e6c(flags);\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 0x20) != 0) && ((*(uint *)(value + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffdf;\n    FUNC_080064ac(flags);\n  }\n  return;\n}\n\n",
            "current_name": "process_flags_08005e6e",
            "entrypoint": "0x08005e6e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005e6e": "process_flags_08005e6e",
                "execute_callback_0800771c": "execute_callback1",
                "execute_callback_0800771c(param_1)": "execute_callback_2(callback_data)",
                "execute_callback_08007736": "execute_callback2",
                "execute_callback_08007736(param_1)": "execute_callback_3(callback_data)",
                "iVar1": "value",
                "param_1": "flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005fe8": {
            "additional_data": {
                "*param_1": {
                    "1": "current_value"
                },
                "*param_2": {
                    "1": "new_value"
                },
                "FUN_08005fe8": {
                    "1": "update_param",
                    "12": "update_memory",
                    "2": "update_registers",
                    "4": "update_memory_values",
                    "7": "update_parameters"
                },
                "param_1": {
                    "1": "source_address",
                    "2": "memory_address",
                    "3": "input_params"
                },
                "param_1[0xb]": {
                    "1": "memory_block[11]"
                },
                "param_1[10]": {
                    "1": "memory_block[10]"
                },
                "param_1[5]": {
                    "1": "memory_location[5]"
                },
                "param_2": {
                    "1": "update_values",
                    "2": "register2",
                    "3": "data",
                    "4": "new_values",
                    "8": "new_params"
                },
                "uRam40012c30": {
                    "1": "updated_input_field",
                    "2": "stored_value",
                    "3": "special_value"
                },
                "uVar1": {
                    "1": "current_value",
                    "2": "value",
                    "4": "original_value",
                    "8": "updated_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006060",
                "FUN_08006092"
            ],
            "code": "\nvoid update_memory_08005fe8(uint *input_params,uint *new_params)\n\n{\n  uint updated_value;\n  \n  updated_value = *input_params;\n  if ((((input_params == (uint *)0x40012c00) || (input_params == (uint *)0x40000000)) ||\n      (input_params == (uint *)0x40000400)) || (input_params == (uint *)0x40000800)) {\n    updated_value = updated_value & 0xffffff8f | new_params[1];\n  }\n  if (((input_params == (uint *)0x40012c00) || (input_params == (uint *)0x40000000)) ||\n     ((input_params == (uint *)0x40000400 || (input_params == (uint *)0x40000800)))) {\n    updated_value = updated_value & 0xfffffcff | new_params[3];\n  }\n  *input_params = updated_value & 0xffffff7f | new_params[5];\n  memory_location[11] = new_params[2];\n  memory_location[10] = *new_params;\n  if (input_params == (uint *)0x40012c00) {\n    special_value = new_params[4];\n  }\n  memory_location[5] = 1;\n  return;\n}\n\n",
            "current_name": "update_memory_08005fe8",
            "entrypoint": "0x08005fe8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005fe8": "update_memory_08005fe8",
                "param_1": "input_params",
                "param_1[0xb]": "memory_location[11]",
                "param_1[10]": "memory_location[10]",
                "param_1[5]": "memory_location[5]",
                "param_2": "new_params",
                "uRam40012c30": "special_value",
                "uVar1": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006060": {
            "additional_data": {
                "(undefined4 *)((int)param_1 + 0x3d)": {
                    "1": "flag"
                },
                "(undefined4 *)0x0": {
                    "1": "null_pointer"
                },
                "*((int)data_ptr + 0x3d)": {
                    "1": "flags"
                },
                "*(char *)((int)data_pointer + 0x3d)": {
                    "1": "data_flag"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "is_processed",
                    "12": "data_flag",
                    "3": "data_status",
                    "5": "is_flag_zero"
                },
                "*(undefined *)((int)data_pointer + 0x3d)": {
                    "1": "data_flag"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "set_data_flag",
                    "2": "flag_value",
                    "5": "data_flag"
                },
                "*(undefined *)(data_pointer + 0xf)": {
                    "1": "data_value"
                },
                "*(undefined *)(data_ptr + 0xf)": {
                    "1": "data_flag"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "data_result",
                    "2": "flag_value",
                    "7": "data_flag",
                    "8": "data_value"
                },
                "*param_1": {
                    "1": "data_value"
                },
                "FUN_08006060": {
                    "1": "initialize_and_update_data",
                    "2": "update_memory_flags",
                    "3": "update_flags",
                    "6": "initialize_data",
                    "9": "update_data_flags"
                },
                "data[0x3d]": {
                    "1": "data_flag"
                },
                "data[0xf]": {
                    "1": "flag"
                },
                "param_1": {
                    "1": "data_and_flags",
                    "16": "data_ptr",
                    "4": "data_pointer",
                    "6": "data"
                },
                "param_1 + 1": {
                    "1": "next_data"
                },
                "param_1[0x3d]": {
                    "1": "data_flag"
                },
                "return 0": {
                    "2": "success"
                },
                "return 1": {
                    "1": "return_error",
                    "2": "return_failure"
                },
                "update_data_flags_08007708": {
                    "1": "update_flags_helper",
                    "10": "update_data_flags",
                    "2": "update_flags",
                    "6": "update_data_flags_helper"
                },
                "update_data_flags_08007708()": {
                    "1": "update_data_flags()",
                    "8": "update_data_flags"
                },
                "update_memory_08005fe8": {
                    "1": "update_memory_data",
                    "20": "update_memory"
                },
                "update_memory_08005fe8(*param_1, param_1 + 1)": {
                    "1": "update_memory"
                },
                "update_memory_08005fe8(*param_1,param_1 + 1)": {
                    "3": "update_memory"
                }
            },
            "called": [
                "FUN_08005fe8",
                "FUN_08007708"
            ],
            "calling": [
                "FUN_08007648"
            ],
            "code": "\nundefined4 update_data_flags_08006060(undefined4 *data_ptr)\n\n{\n  if (data_ptr != (undefined4 *)0x0) {\n    if (*(char *)((int)data_ptr + 0x3d) == '\\0') {\n      *(undefined *)(data_ptr + 0xf) = 0;\n      update_data_flags_08006060;\n    }\n    *(undefined *)((int)data_ptr + 0x3d) = 2;\n    update_memory(*data_ptr,data_ptr + 1);\n    *(undefined *)((int)data_ptr + 0x3d) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "update_data_flags_08006060",
            "entrypoint": "0x08006060",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006060": "update_data_flags_08006060",
                "param_1": "data_ptr",
                "update_data_flags_08007708": "update_data_flags",
                "update_data_flags_08007708()": "update_data_flags",
                "update_memory_08005fe8": "update_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006092": {
            "additional_data": {
                "(int)param_1": {
                    "1": "config_array_address"
                },
                "(int)param_1 + 0x3d": {
                    "1": "status_flag_addr"
                },
                "(undefined *)((int)param_1 + 0x3d)": {
                    "1": "flag_ptr"
                },
                "(undefined4 *)0x0": {
                    "1": "null"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "peripheral_data->status",
                    "2": "status_flag",
                    "5": "peripheral_status"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "peripheral_data.status"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "peripheral_params->flag",
                    "2": "reset_value"
                },
                "*param_1": {
                    "1": "peripheral_data_star"
                },
                "FUN_08006092": {
                    "1": "initialize_memory",
                    "18": "initialize_peripheral",
                    "2": "configure_peripheral",
                    "3": "configure_and_update_peripheral"
                },
                "char": {
                    "1": "value_char"
                },
                "configure_peripheral_08006e68": {
                    "1": "configure_peripherals",
                    "21": "configure_peripheral"
                },
                "configure_peripheral_08006e68()": {
                    "1": "configure_peripheral"
                },
                "memset_08006e68": {
                    "1": "configure_peripheral"
                },
                "param_1": {
                    "1": "peripheral_parameters",
                    "2": "peripheral_configuration",
                    "5": "peripheral_ptr",
                    "7": "peripheral_data"
                },
                "param_1 + 1": {
                    "1": "next_peripheral_ptr"
                },
                "update_memory_08005fe8": {
                    "25": "update_memory"
                },
                "update_memory_08005fe8(*param_1,param_1 + 1)": {
                    "2": "update_memory"
                }
            },
            "called": [
                "FUN_08005fe8",
                "FUN_08006e68"
            ],
            "calling": [
                "FUN_08007118"
            ],
            "code": "\nundefined4 initialize_peripheral_08006092(undefined4 *peripheral_data)\n\n{\n  if (peripheral_data != (undefined4 *)0x0) {\n    if (*(byte *)(config_array_address + 0x3d) == '\\0') {\n      *(undefined *)(peripheral_data + 0xf) = 0;\n      configure_peripheral;\n    }\n    *(undefined *)(config_array_address + 0x3d) = 2;\n    update_memory(*peripheral_data,peripheral_data + 1);\n    *(undefined *)(config_array_address + 0x3d) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "initialize_peripheral_08006092",
            "entrypoint": "0x08006092",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1": "config_array_address",
                "FUN_08006092": "initialize_peripheral_08006092",
                "char": "byte",
                "configure_peripheral_08006e68": "configure_peripheral",
                "configure_peripheral_08006e68()": "configure_peripheral",
                "param_1": "peripheral_data",
                "update_memory_08005fe8": "update_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080060c4": {
            "additional_data": {
                "*(int *)(param_1 + 0x38)": {
                    "1": "register4"
                },
                "*(uint *)(param_1 + 0x18)": {
                    "1": "value2"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "config_flags"
                },
                "*(uint *)(param_1 + 0x38)": {
                    "1": "value4"
                },
                "*(uint *)(param_1 + 4)": {
                    "1": "config_data1"
                },
                "0x18": {
                    "1": "offset_address_2"
                },
                "0x20": {
                    "1": "bitmask1"
                },
                "0x38": {
                    "1": "config_offset_3"
                },
                "0x40012c00": {
                    "1": "specific_address"
                },
                "<original_function_name>": {
                    "1": "update_configuration"
                },
                "FUN_080060c4": {
                    "1": "update_flags_and_values",
                    "2": "set_flags_and_values",
                    "3": "update_data",
                    "5": "update_parameters",
                    "9": "update_params"
                },
                "configPtr_0x18": {
                    "1": "config_flag2"
                },
                "configPtr_0x20": {
                    "1": "config_flag"
                },
                "iVar3": {
                    "1": "updated_var3",
                    "2": "updated_value3",
                    "6": "param_value",
                    "9": "input_value"
                },
                "param_1": {
                    "1": "param1",
                    "10": "base_address",
                    "2": "data_address",
                    "5": "config_address",
                    "8": "address"
                },
                "param_1 + 0x18": {
                    "1": "other_flags_address"
                },
                "param_1 + 0x20": {
                    "1": "flags_address"
                },
                "param_1 + 0x38": {
                    "1": "extra_value_address"
                },
                "param_1 + 0x4": {
                    "1": "value_address"
                },
                "param_2": {
                    "1": "param_list",
                    "2": "config_data",
                    "3": "config_values",
                    "5": "params_array",
                    "7": "parameters"
                },
                "param_2[2]": {
                    "1": "config_data2",
                    "2": "param2_value2"
                },
                "param_2[3]": {
                    "1": "config_data3",
                    "2": "param2_value3"
                },
                "param_2[5]": {
                    "1": "param_list[5]",
                    "2": "param2_value5"
                },
                "param_2[6]": {
                    "1": "config_data6",
                    "2": "param2_value6"
                },
                "uVar1": {
                    "1": "new_config",
                    "14": "updated_value1",
                    "2": "updated_flags",
                    "4": "modified_flags"
                },
                "uVar2": {
                    "1": "original_value",
                    "14": "updated_value2",
                    "3": "modified_value"
                },
                "uVar2_final": {
                    "1": "final_config_value2"
                },
                "values_2": {
                    "1": "config_value3"
                },
                "values_3": {
                    "1": "config_value4"
                },
                "values_5": {
                    "1": "config_value5"
                },
                "values_6": {
                    "1": "config_value6"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "code": "\nvoid update_params_080060c4(int base_address,int *parameters)\n\n{\n  uint updated_value1;\n  uint updated_value2;\n  int input_value;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xffffffef;\n  updated_value2 = *(uint *)(base_address + 4);\n  input_value = *parameters;\n  updated_value1 = *(uint *)(base_address + 0x20) & 0xffffffdf | param2_value2 << 4;\n  if (base_address == 0x40012c00) {\n    updated_value1 = (updated_value1 & 0xffffff7f | param2_value3 << 4) & 0xffffffbf;\n    updated_value2 = updated_value2 & 0xfffff3ff | param2_value5 << 2 | param2_value6 << 2;\n  }\n  *(uint *)(base_address + 4) = updated_value2;\n  *(uint *)(base_address + 0x18) = *(uint *)(base_address + 0x18) & 0xffff8cff | input_value << 8;\n  *(int *)(base_address + 0x38) = parameters[1];\n  *(uint *)(base_address + 0x20) = updated_value1;\n  return;\n}\n\n",
            "current_name": "update_params_080060c4",
            "entrypoint": "0x080060c4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080060c4": "update_params_080060c4",
                "iVar3": "input_value",
                "param_1": "base_address",
                "param_2": "parameters",
                "param_2[2]": "param2_value2",
                "param_2[3]": "param2_value3",
                "param_2[5]": "param2_value5",
                "param_2[6]": "param2_value6",
                "uVar1": "updated_value1",
                "uVar2": "updated_value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006128": {
            "additional_data": {
                "(*param_1)": {
                    "1": "data_value"
                },
                "(char *)(param_1 + 0xf)": {
                    "1": "flag_ptr"
                },
                "(int)param_1": {
                    "1": "data_ptr_int"
                },
                "(int)param_1 + 0x3d": {
                    "1": "flag_ptr"
                },
                "*(char *)(param_1 + 0xf)": {
                    "1": "data->flag",
                    "9": "data_flag"
                },
                "*(int *)((int)param_1 + 0x3d)": {
                    "1": "data_action_status"
                },
                "*(int *)(param_1 + 0xf)": {
                    "1": "data_status"
                },
                "*(param_1 + 0xf)": {
                    "1": "flag_value"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "counter_ptr",
                    "2": "update_status",
                    "3": "param_value"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "data->flag",
                    "2": "data_status",
                    "4": "data_flag"
                },
                "*param_1": {
                    "1": "data_element",
                    "2": "data_value"
                },
                "0": {
                    "1": "case_0"
                },
                "0xc": {
                    "1": "case_0_c"
                },
                "4": {
                    "1": "option_update_params"
                },
                "8": {
                    "1": "update_parameters"
                },
                "FUN_08006128": {
                    "1": "update_param_data",
                    "4": "update_function",
                    "8": "update_data",
                    "9": "update_parameters"
                },
                "f_0": {
                    "1": "is_initialized"
                },
                "f_14": {
                    "1": "is_processing"
                },
                "f_2": {
                    "1": "update_state"
                },
                "f_61": {
                    "1": "result"
                },
                "param_1": {
                    "1": "param_ptr",
                    "21": "data",
                    "4": "data_ptr"
                },
                "param_1 + 0x3d": {
                    "1": "param_flag"
                },
                "param_1 + 0xf": {
                    "1": "data_flag"
                },
                "param_1[0x3d]": {
                    "1": "update_flag"
                },
                "param_1[0xf]": {
                    "1": "data_flag"
                },
                "param_2": {
                    "1": "arg2",
                    "14": "flag",
                    "2": "param",
                    "3": "param_2",
                    "4": "value"
                },
                "param_3": {
                    "1": "value2",
                    "13": "option",
                    "2": "param_3",
                    "7": "action"
                },
                "switch(param_3)": {
                    "1": "switch_statement"
                },
                "update_data_08005cec": {
                    "1": "update_data_operation",
                    "15": "update_data"
                },
                "update_data_08005cec(*param_1)": {
                    "1": "update_data(data_array)"
                },
                "update_parameters_08005d48": {
                    "1": "update_data_with_option_8",
                    "2": "update_parameters_a",
                    "3": "update_parameters",
                    "6": "update_parameters_1"
                },
                "update_parameters_08005d48(*param_1)": {
                    "1": "update_parameters(data_array)"
                },
                "update_parameters_08005dac": {
                    "1": "update_parameters_v3",
                    "2": "update_parameters_b",
                    "3": "update_parameters",
                    "6": "update_parameters_2"
                },
                "update_parameters_08005dac(*param_1)": {
                    "1": "update_parameters(data_array)"
                },
                "update_params_080060c4": {
                    "1": "update_parameters",
                    "14": "update_params"
                },
                "update_params_080060c4(*param_1)": {
                    "1": "update_params(data_array)"
                }
            },
            "called": [
                "FUN_08005dac",
                "FUN_080060c4",
                "FUN_08005d48",
                "FUN_08005cec"
            ],
            "calling": [
                "FUN_08007648"
            ],
            "code": "\nundefined4 update_parameters_08006128(undefined4 *data,undefined4 flag,undefined4 option)\n\n{\n  if (*(char *)(data + 0xf) != '\\x01') {\n    *(undefined *)(data + 0xf) = 1;\n    *(undefined *)(data_ptr_int + 0x3d) = 2;\n    switch_statement {\n    case 0:\n      update_data(*data);\n      break;\n    case 4:\n      update_params(*data);\n      break;\n    case 8:\n      update_parameters_08006128_1(*data);\n      break;\n    case 0xc:\n      update_parameters_08006128_2(*data);\n    }\n    *(undefined *)(data_ptr_int + 0x3d) = 1;\n    *(undefined *)(data + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "current_name": "update_parameters_08006128",
            "entrypoint": "0x08006128",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1": "data_ptr_int",
                "FUN_08006128": "update_parameters_08006128",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "option",
                "switch(param_3)": "switch_statement",
                "update_data_08005cec": "update_data",
                "update_parameters_08005d48": "update_parameters_1",
                "update_parameters_08005dac": "update_parameters_2",
                "update_params_080060c4": "update_params"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006186": {
            "additional_data": {
                "$param_2 + 0x10": {
                    "1": "params_offset"
                },
                "*$param_1": {
                    "1": "data_ptr"
                },
                "*$param_1 + 0x18": {
                    "1": "data_flag_1"
                },
                "*$param_1 + 0x1c": {
                    "1": "data_flag_2"
                },
                "*$param_1 + 0x3d": {
                    "1": "status"
                },
                "*(char *)(param_1 + 0xf)": {
                    "1": "status",
                    "3": "data_flag"
                },
                "*(int *)(param_2 + 0x10)": {
                    "1": "params->field2"
                },
                "*(int *)(param_2 + 0x10) << 8": {
                    "1": "shifted_param_field"
                },
                "*(uint *)(*param_1 + 0x18)": {
                    "1": "data_field"
                },
                "*(uint *)(*param_1 + 0x18) | 0x800": {
                    "1": "updated_data_field1"
                },
                "*(uint *)(*param_1 + 0x1c)": {
                    "1": "parameter_field"
                },
                "*(uint *)(*param_1 + 0x1c) | 0x800": {
                    "1": "updated_data_field2"
                },
                "*(uint *)(param_2 + 0x10)": {
                    "1": "param_2[0x10]",
                    "2": "param_field",
                    "3": "param_value"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "set_data_value",
                    "2": "temp_var"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "set_data_flag"
                },
                "0": {
                    "1": "update_data"
                },
                "0x18": {
                    "1": "param_1_value"
                },
                "0x1c": {
                    "1": "param_2_value"
                },
                "0x3d": {
                    "1": "status"
                },
                "0xc": {
                    "1": "update_param_and_data"
                },
                "0xf": {
                    "1": "flag"
                },
                "4": {
                    "1": "update_params"
                },
                "8": {
                    "1": "update_parameters"
                },
                "FUN_08006186": {
                    "1": "update_data_params",
                    "12": "update_data",
                    "2": "update_and_process_data"
                },
                "char": {
                    "1": "byte",
                    "2": "character"
                },
                "char *((int)param_1 + 0x3d)": {
                    "1": "data->status"
                },
                "char *(param_1 + 0xf)": {
                    "1": "data->flag"
                },
                "f": {
                    "2": "flag"
                },
                "int": {
                    "2": "integer"
                },
                "param_1": {
                    "1": "input_array",
                    "10": "data_ptr",
                    "13": "data",
                    "2": "data_pointer"
                },
                "param_2": {
                    "1": "param_2",
                    "12": "param",
                    "2": "param_pointer",
                    "7": "param_ptr"
                },
                "param_3": {
                    "1": "mode",
                    "3": "param_value",
                    "5": "case_value",
                    "6": "type"
                },
                "uint": {
                    "1": "unsigned_integer"
                },
                "undefined4": {
                    "1": "result"
                },
                "update_data_08005cec": {
                    "1": "update_data_value1",
                    "10": "update_data",
                    "2": "update_data_function1"
                },
                "update_parameters_08005d48": {
                    "1": "update_params_function1",
                    "2": "update_parameters_1",
                    "6": "update_parameters"
                },
                "update_parameters_08005dac": {
                    "1": "update_params_function2",
                    "2": "update_parameters",
                    "4": "update_parameters2"
                },
                "update_params_080060c4": {
                    "1": "update_data_value2",
                    "12": "update_params",
                    "2": "update_parameters"
                }
            },
            "called": [
                "FUN_08005dac",
                "FUN_080060c4",
                "FUN_08005d48",
                "FUN_08005cec"
            ],
            "calling": [
                "FUN_08007118"
            ],
            "code": "\nresult update_data_08006186(integer *data,integer param,result type)\n\n{\n  if (*(character *)(data + 0xf) != '\\x01') {\n    *(undefined *)(data + 0xf) = 1;\n    *(undefined *)((integer)data + 0x3d) = 2;\n    switch(type) {\n    case 0:\n      update_data_08006186(*data);\n      *(unsigned_integer *)(*data + 0x18) = *(unsigned_integer *)(*data + 0x18) | 8;\n      *(unsigned_integer *)(*data + 0x18) = *(unsigned_integer *)(*data + 0x18) & 0xfffffffb;\n      *(unsigned_integer *)(*data + 0x18) = *(unsigned_integer *)(*data + 0x18) | *(unsigned_integer *)(param + 0x10);\n      break;\n    case 4:\n      update_params(*data);\n      *(unsigned_integer *)(*data + 0x18) = *(unsigned_integer *)(*data + 0x18) | 0x800;\n      *(unsigned_integer *)(*data + 0x18) = *(unsigned_integer *)(*data + 0x18) & 0xfffffbff;\n      *(unsigned_integer *)(*data + 0x18) = *(unsigned_integer *)(*data + 0x18) | *(integer *)(param + 0x10) << 8;\n      break;\n    case 8:\n      update_parameters(*data);\n      *(unsigned_integer *)(*data + 0x1c) = *(unsigned_integer *)(*data + 0x1c) | 8;\n      *(unsigned_integer *)(*data + 0x1c) = *(unsigned_integer *)(*data + 0x1c) & 0xfffffffb;\n      *(unsigned_integer *)(*data + 0x1c) = *(unsigned_integer *)(*data + 0x1c) | *(unsigned_integer *)(param + 0x10);\n      break;\n    case 0xc:\n      update_parameters2(*data);\n      *(unsigned_integer *)(*data + 0x1c) = *(unsigned_integer *)(*data + 0x1c) | 0x800;\n      *(unsigned_integer *)(*data + 0x1c) = *(unsigned_integer *)(*data + 0x1c) & 0xfffffbff;\n      *(unsigned_integer *)(*data + 0x1c) = *(unsigned_integer *)(*data + 0x1c) | *(integer *)(param + 0x10) << 8;\n    }\n    *(undefined *)((integer)data + 0x3d) = 1;\n    *(undefined *)(data + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "current_name": "update_data_08006186",
            "entrypoint": "0x08006186",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006186": "update_data_08006186",
                "char": "character",
                "int": "integer",
                "param_1": "data",
                "param_2": "param",
                "param_3": "type",
                "uint": "unsigned_integer",
                "undefined4": "result",
                "update_data_08005cec": "update_data",
                "update_parameters_08005d48": "update_parameters",
                "update_parameters_08005dac": "update_parameters2",
                "update_params_080060c4": "update_params"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006262": {
            "additional_data": {
                "*(uint *)(param_1 + 0x20)": {
                    "2": "register_value"
                },
                "FUN_08006262": {
                    "1": "set_flag_value",
                    "2": "update_flags",
                    "3": "update_bits",
                    "4": "update_bitwise",
                    "6": "update_bit_value"
                },
                "param_1": {
                    "1": "memory_address",
                    "19": "base_address",
                    "2": "target",
                    "3": "data"
                },
                "param_1 + 0x20": {
                    "1": "register_address"
                },
                "param_2": {
                    "1": "position",
                    "22": "bit_position",
                    "3": "bit_offset",
                    "5": "bit_index"
                },
                "param_2 & 0xff": {
                    "1": "bit_mask"
                },
                "param_3": {
                    "1": "flag_value",
                    "13": "bit_value",
                    "5": "value",
                    "9": "new_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006280",
                "FUN_08006390",
                "FUN_080063c0",
                "FUN_080062f4"
            ],
            "code": "\nvoid update_bit_08006262(int base_address,uint bit_position,int bit_value)\n\n{\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & ~(1 << (bit_position & 0xff));\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) | bit_value << (bit_position & 0xff);\n  return;\n}\n\n",
            "current_name": "update_bit_08006262",
            "entrypoint": "0x08006262",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006262": "update_bit_08006262",
                "param_1": "base_address",
                "param_2": "bit_position",
                "param_3": "bit_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006280": {
            "additional_data": {
                "(*param_1)[3]": {
                    "1": "flags"
                },
                "**param_1": {
                    "1": "data_value"
                },
                "*param_1": {
                    "1": "flags_pointer",
                    "2": "flags_ptr"
                },
                "*param_1[3]": {
                    "1": "flag_value"
                },
                "0x40012c00": {
                    "1": "constant_value"
                },
                "0x8000": {
                    "1": "bit_mask"
                },
                "1": {
                    "1": "bit_mask"
                },
                "DAT_0x40012c44": {
                    "1": "flag_value"
                },
                "FUN_08006280": {
                    "1": "update_bit_mask",
                    "2": "set_bit_and_update",
                    "3": "update_flags_and_bit"
                },
                "PTR_0x40012c00": {
                    "1": "constant_value"
                },
                "PTR_40012c00": {
                    "1": "constant_address"
                },
                "case 0": {
                    "1": "case_bit_position0"
                },
                "case 0xc": {
                    "1": "case_bit_position12"
                },
                "case 4": {
                    "1": "case_bit_position4"
                },
                "case 8": {
                    "1": "case_bit_position8"
                },
                "param_1": {
                    "1": "ptr_array",
                    "2": "permissions",
                    "3": "data_pointer",
                    "6": "data",
                    "9": "flags"
                },
                "param_1[3]": {
                    "1": "flags[3]"
                },
                "param_2": {
                    "1": "bitmask_config",
                    "2": "bit_num",
                    "3": "bit_value",
                    "4": "flag_value",
                    "5": "flag"
                },
                "uRam40012c44": {
                    "1": "register_value",
                    "2": "special_flag",
                    "3": "status_register",
                    "4": "status_flag"
                },
                "uint": {
                    "1": "pointer_type"
                },
                "undefined4": {
                    "1": "void"
                },
                "update_bit_08006262": {
                    "1": "update_flag",
                    "10": "update_bit"
                }
            },
            "called": [
                "FUN_08006262"
            ],
            "calling": [
                "FUN_08007648"
            ],
            "code": "\nvoid update_flags_and_bit_08006280(pointer_type **flags,void flag)\n\n{\n  switch(flag) {\n  case 0:\n    (*flags)[3] = (*flags)[3] | 2;\n    break;\n  case 4:\n    (*flags)[3] = (*flags)[3] | 4;\n    break;\n  case 8:\n    (*flags)[3] = (*flags)[3] | 8;\n    break;\n  case 0xc:\n    (*flags)[3] = (*flags)[3] | 0x10;\n  }\n  update_bit(*flags,flag,1);\n  if (*flags == (pointer_type *)0x40012c00) {\n    status_flag = status_flag | 0x8000;\n  }\n  **flags = **flags | 1;\n  return 0;\n}\n\n",
            "current_name": "update_flags_and_bit_08006280",
            "entrypoint": "0x08006280",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006280": "update_flags_and_bit_08006280",
                "param_1": "flags",
                "param_2": "flag",
                "uRam40012c44": "status_flag",
                "uint": "pointer_type",
                "undefined4": "void",
                "update_bit_08006262": "update_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080062f4": {
            "additional_data": {
                "(*param_1)": {
                    "1": "array_value"
                },
                "(*param_1)[3]": {
                    "1": "ptr_data[3]"
                },
                "*param_1": {
                    "1": "permissions"
                },
                "FUN_080062f4": {
                    "1": "update_permission_bits",
                    "2": "clear_bit_and_update",
                    "3": "update_flags_and_bits",
                    "9": "update_permissions"
                },
                "param_1": {
                    "1": "permissions_ptr",
                    "2": "input_array",
                    "3": "bit_array",
                    "4": "flags",
                    "5": "permissions"
                },
                "param_2": {
                    "1": "flag_value",
                    "10": "bit_position",
                    "2": "bit_index",
                    "3": "permission_level",
                    "5": "permission_type"
                },
                "puVar1": {
                    "1": "permissions",
                    "2": "permissions_ptr",
                    "3": "temp_pointer"
                },
                "puVar1[8]": {
                    "1": "ptr[8]"
                },
                "uRam40012c00": {
                    "1": "mem_location1"
                },
                "uRam40012c20": {
                    "1": "constant2"
                },
                "uRam40012c44": {
                    "1": "memory2"
                },
                "update_bit_08006262": {
                    "5": "update_bit"
                }
            },
            "called": [
                "FUN_08006262"
            ],
            "calling": [
                "FUN_080076e0"
            ],
            "code": "\nundefined4 update_permissions_080062f4(uint **permissions,undefined4 bit_position)\n\n{\n  uint *temp_pointer;\n  \n  switch(bit_position) {\n  case 0:\n    (*permissions)[3] = (*permissions)[3] & 0xfffffffd;\n    break;\n  case 4:\n    (*permissions)[3] = (*permissions)[3] & 0xfffffffb;\n    break;\n  case 8:\n    (*permissions)[3] = (*permissions)[3] & 0xfffffff7;\n    break;\n  case 0xc:\n    (*permissions)[3] = (*permissions)[3] & 0xffffffef;\n  }\n  update_bit(*permissions,bit_position,0);\n  if (((*permissions == (uint *)0x40012c00) && ((some_flag & 0x1111) == 0)) &&\n     ((some_flag & 0x444) == 0)) {\n    another_flag = another_flag & 0xffff7fff;\n  }\n  temp_pointer = *permissions;\n  if (((pointer[8] & 0x1111) == 0) && ((pointer[8] & 0x444) == 0)) {\n    *temp_pointer = *temp_pointer & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "current_name": "update_permissions_080062f4",
            "entrypoint": "0x080062f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080062f4": "update_permissions_080062f4",
                "param_1": "permissions",
                "param_2": "bit_position",
                "puVar1": "temp_pointer",
                "puVar1[8]": "pointer[8]",
                "uRam40012c20": "some_flag",
                "uRam40012c44": "another_flag",
                "update_bit_08006262": "update_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006390": {
            "additional_data": {
                "**param_1": {
                    "1": "data_value"
                },
                "*param_1": {
                    "1": "bits_value",
                    "3": "bit_array_value"
                },
                "FUN_08006390": {
                    "1": "update_bit_and_set_flag",
                    "3": "set_bit_and_update",
                    "4": "update_and_set_flag",
                    "7": "update_and_set_bit"
                },
                "PTR_0x40012c00": {
                    "1": "target_address"
                },
                "bit_value": {
                    "1": "bit"
                },
                "flag": {
                    "1": "status"
                },
                "input": {
                    "1": "bitset"
                },
                "param_1": {
                    "1": "bit_flags",
                    "2": "pointer",
                    "3": "data_pointer",
                    "9": "bit_array"
                },
                "param_2": {
                    "1": "bit_flag",
                    "11": "bit_value",
                    "2": "bit_number",
                    "3": "bit_position",
                    "7": "value"
                },
                "uRam40012c44": {
                    "1": "register_value",
                    "10": "status_register",
                    "2": "flag_register",
                    "3": "flag_value"
                },
                "uint": {
                    "1": "unsigned_int"
                },
                "update_bit_08006262": {
                    "2": "update_bit"
                }
            },
            "called": [
                "FUN_08006262"
            ],
            "calling": [
                "FUN_08007118"
            ],
            "code": "\nundefined4 update_and_set_bit_08006390(unsigned_int **bit_array,undefined4 bit_value)\n\n{\n  update_bit(*bit_array,bit_value,1);\n  if (*bit_array == (unsigned_int *)0x40012c00) {\n    status_register = status_register | 0x8000;\n  }\n  **bit_array = **bit_array | 1;\n  return 0;\n}\n\n",
            "current_name": "update_and_set_bit_08006390",
            "entrypoint": "0x08006390",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006390": "update_and_set_bit_08006390",
                "param_1": "bit_array",
                "param_2": "bit_value",
                "uRam40012c44": "status_register",
                "uint": "unsigned_int",
                "update_bit_08006262": "update_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080063c0": {
            "additional_data": {
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "flag_byte"
                },
                "*param_1": {
                    "1": "value"
                },
                "*puVar1": {
                    "1": "value"
                },
                "DAT_08006262": {
                    "1": "update_bit_function_data"
                },
                "DAT_08006262 + 4": {
                    "1": "update_bit_function_value_param"
                },
                "FUN_080063c0": {
                    "1": "clear_flags_and_set_bit",
                    "2": "update_parameters",
                    "3": "update_flags"
                },
                "PTR_08006262": {
                    "2": "update_bit_function"
                },
                "current_array[8]": {
                    "1": "current_array_element_8"
                },
                "param_1": {
                    "1": "bits_array",
                    "2": "input_array",
                    "3": "input_data",
                    "4": "flags",
                    "7": "bit_array"
                },
                "param_1 + 0x3d": {
                    "1": "flag_byte"
                },
                "param_2": {
                    "1": "param_2",
                    "2": "bit",
                    "3": "flag_value",
                    "5": "flag",
                    "7": "value",
                    "8": "bit_value"
                },
                "puVar1": {
                    "1": "current_bitmask_ptr",
                    "2": "current_flags",
                    "3": "current_array"
                },
                "uRam40012c00": {
                    "1": "memory_address",
                    "2": "constant_value_1",
                    "3": "base_address"
                },
                "uRam40012c20": {
                    "1": "bit_mask_one",
                    "2": "memory_value1"
                },
                "uRam40012c44": {
                    "1": "current_value",
                    "2": "memory_value2"
                },
                "update_bit_08006262": {
                    "2": "update_bit"
                }
            },
            "called": [
                "FUN_08006262"
            ],
            "calling": [
                "FUN_080071e4"
            ],
            "code": "\nundefined4 update_flags_080063c0(uint **bit_array,undefined4 bit_value)\n\n{\n  uint *current_array;\n  \n  update_bit(*bit_array,bit_value,0);\n  if (((*bit_array == (uint *)0x40012c00) && ((memory_value1 & 0x1111) == 0)) &&\n     ((memory_value1 & 0x444) == 0)) {\n    memory_value2 = memory_value2 & 0xffff7fff;\n  }\n  current_array = *bit_array;\n  if (((current_array[8] & 0x1111) == 0) && ((current_array[8] & 0x444) == 0)) {\n    *current_array = *current_array & 0xfffffffe;\n  }\n  *(undefined *)((int)bit_array + 0x3d) = 1;\n  return 0;\n}\n\n",
            "current_name": "update_flags_080063c0",
            "entrypoint": "0x080063c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080063c0": "update_flags_080063c0",
                "param_1": "bit_array",
                "param_2": "bit_value",
                "puVar1": "current_array",
                "uRam40012c20": "memory_value1",
                "uRam40012c44": "memory_value2",
                "update_bit_08006262": "update_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006420": {
            "additional_data": {
                "*(*(configAddress + 0x20))": {
                    "1": "config_data"
                },
                "*(uint *)(configAddress + 0x20)": {
                    "1": "config_value"
                },
                "FUN_08006420": {
                    "1": "apply_param_to_config",
                    "2": "update_register_bits",
                    "3": "update_bitwise_value",
                    "4": "update_value"
                },
                "dataPtr": {
                    "1": "data_pointer"
                },
                "param_1": {
                    "1": "register_base_address",
                    "17": "base_address",
                    "2": "data_address",
                    "4": "register_address"
                },
                "param_2": {
                    "1": "offset",
                    "20": "bit_position",
                    "7": "bit_offset"
                },
                "param_3": {
                    "1": "value_to_update",
                    "18": "new_value",
                    "2": "value_to_set",
                    "4": "value",
                    "5": "bit_value"
                },
                "shiftAmount": {
                    "1": "shift"
                },
                "uint": {
                    "1": "unsigned_int"
                },
                "valueToUpdate": {
                    "1": "update_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800643c",
                "FUN_08006460"
            ],
            "code": "\nvoid update_value_08006420(int base_address,unsigned_int bit_position,int new_value)\n\n{\n  *(unsigned_int *)(base_address + 0x20) = *(unsigned_int *)(base_address + 0x20) & ~(4 << (bit_position & 0xff));\n  *(unsigned_int *)(base_address + 0x20) = *(unsigned_int *)(base_address + 0x20) | new_value << (bit_position & 0xff);\n  return;\n}\n\n",
            "current_name": "update_value_08006420",
            "entrypoint": "0x08006420",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006420": "update_value_08006420",
                "param_1": "base_address",
                "param_2": "bit_position",
                "param_3": "new_value",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800643c": {
            "additional_data": {
                "(*param_1)[0x11]": {
                    "1": "pointer_array_value"
                },
                "**param_1": {
                    "1": "pointer_value"
                },
                "*param_1": {
                    "1": "value_pointer"
                },
                "*param_1[0x11]": {
                    "1": "flag"
                },
                "0": {
                    "1": "success"
                },
                "0x11": {
                    "1": "constant",
                    "8": "index"
                },
                "0x8000": {
                    "1": "flag_mask",
                    "2": "flag_1"
                },
                "1": {
                    "1": "flag_2"
                },
                "4": {
                    "1": "num_bytes"
                },
                "DAT_08006420": {
                    "1": "constant"
                },
                "DEPRECATED_param_1": {
                    "1": "ptr_data"
                },
                "DEPRECATED_param_2": {
                    "1": "deprecated_value"
                },
                "FUN_0800643c": {
                    "1": "update_data",
                    "2": "set_flag_and_value",
                    "4": "update_value_and_flags",
                    "7": "update_and_set_values",
                    "9": "update_and_set_flags"
                },
                "new_variable_name_1": {
                    "1": "temp_value"
                },
                "new_variable_name_2": {
                    "1": "value_2"
                },
                "original_variable_name_1": {
                    "1": "flag"
                },
                "original_variable_name_2": {
                    "1": "mask"
                },
                "param_1": {
                    "1": "value_ptr",
                    "2": "pointer",
                    "3": "array_ptr",
                    "9": "data"
                },
                "param_2": {
                    "1": "value_to_update",
                    "2": "new_value",
                    "25": "value"
                },
                "uint": {
                    "1": "unsigned_integer"
                },
                "update_value": {
                    "1": "update_value"
                },
                "update_value_08006420": {
                    "1": "update_value_function",
                    "20": "update_value"
                },
                "value": {
                    "1": "value"
                },
                "valueArray": {
                    "1": "array"
                },
                "|": {
                    "1": "bitwise_or"
                }
            },
            "called": [
                "FUN_08006420"
            ],
            "calling": [
                "FUN_08007118"
            ],
            "code": "\nundefined4 update_and_set_flags_0800643c(unsigned_integer **data,undefined4 value)\n\n{\n  update_value(*data,value,4);\n  (*data)[0x11] = (*data)[0x11] | 0x8000;\n  **data = **data | 1;\n  return 0;\n}\n\n",
            "current_name": "update_and_set_flags_0800643c",
            "entrypoint": "0x0800643c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800643c": "update_and_set_flags_0800643c",
                "param_1": "data",
                "param_2": "value",
                "uint": "unsigned_integer",
                "update_value_08006420": "update_value",
                "value": "new_flag_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006460": {
            "additional_data": {
                "(*param_1)": {
                    "1": "data"
                },
                "(puVar1[8] & 0x1111)": {
                    "1": "flag_check_1"
                },
                "(puVar1[8] & 0x444)": {
                    "1": "flag_check_2"
                },
                "*param_1": {
                    "1": "value_ptr"
                },
                "*puVar1": {
                    "1": "value_ptr"
                },
                "0x11": {
                    "1": "index"
                },
                "0x1111": {
                    "1": "bit_mask_1"
                },
                "0x444": {
                    "1": "mask_2"
                },
                "0xffff7fff": {
                    "1": "mask"
                },
                "0xfffffffe": {
                    "1": "mask"
                },
                "FUN_08006460": {
                    "1": "update_flags_and_values",
                    "2": "update_value",
                    "3": "update_flags",
                    "4": "update_and_check_values",
                    "5": "update_values"
                },
                "PTR_08006420": {
                    "1": "update_value"
                },
                "param_1": {
                    "1": "input_array",
                    "3": "input_pointer",
                    "5": "values",
                    "6": "data"
                },
                "param_2": {
                    "1": "update_value",
                    "2": "param",
                    "22": "value",
                    "5": "new_value"
                },
                "puVar1": {
                    "1": "pointer1",
                    "2": "data_pointer",
                    "3": "value_ptr",
                    "4": "data_ptr",
                    "5": "pointer",
                    "6": "ptr"
                },
                "puVar1[0x11]": {
                    "1": "value_ptr[0x11]"
                },
                "puVar1[8]": {
                    "1": "value_ptr[8]"
                },
                "update_value_08006420": {
                    "4": "update_value"
                }
            },
            "called": [
                "FUN_08006420"
            ],
            "calling": [
                "FUN_080071e4"
            ],
            "code": "\nundefined4 update_values_08006460(uint **data,undefined4 value)\n\n{\n  uint *ptr;\n  \n  update_value(*data,value,0);\n  ptr = *data;\n  if (((ptr_value & 0x1111) == 0) && ((ptr_value & 0x444) == 0)) {\n    flag = flag & 0xffff7fff;\n  }\n  ptr = *data;\n  if (((ptr_value & 0x1111) == 0) && ((ptr_value & 0x444) == 0)) {\n    *ptr = *ptr & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "current_name": "update_values_08006460",
            "entrypoint": "0x08006460",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006460": "update_values_08006460",
                "param_1": "data",
                "param_2": "value",
                "puVar1": "ptr",
                "puVar1[0x11]": "flag",
                "puVar1[8]": "ptr_value",
                "update_value_08006420": "update_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080064ac": {
            "called": [],
            "calling": [
                "FUN_08005e6e"
            ],
            "code": "\nvoid FUNC_080064ac(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080064ac",
            "entrypoint": "0x080064ac",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080064ac": "FUNC_080064ac"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080064ae": {
            "called": [],
            "calling": [
                "FUN_08005e6e"
            ],
            "code": "\nvoid FUNC_080064ae(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080064ae",
            "entrypoint": "0x080064ae",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080064ae": "FUNC_080064ae"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080064b0": {
            "additional_data": {
                "(int)param_1": {
                    "1": "parameter_value"
                },
                "(int)param_1 + 0x3a": {
                    "1": "offset"
                },
                "(int)param_1 + 0x3a)": {
                    "1": "offset"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "flag_b",
                    "10": "value2",
                    "2": "flag2"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "modified_flag1",
                    "10": "value1",
                    "2": "flags1"
                },
                "*(undefined *)((int)param_1 + 0x3a)": {
                    "1": "flag_byte",
                    "2": "status_flag",
                    "3": "character"
                },
                "*param_1": {
                    "1": "flag_value"
                },
                "0x14": {
                    "1": "pointer_offset2",
                    "2": "mask2"
                },
                "0x20": {
                    "1": "new_value"
                },
                "0x3a": {
                    "1": "space_offset"
                },
                "0xc": {
                    "1": "some_flag",
                    "2": "mask1"
                },
                "0xfffffedf": {
                    "2": "mask1"
                },
                "0xfffffffe": {
                    "2": "mask2"
                },
                "FUN_080064b0": {
                    "1": "update_flags_and_values",
                    "2": "set_flags_and_values",
                    "4": "clear_flags_and_set_space",
                    "9": "clear_flags"
                },
                "[(int)param_1 + 0x3a]": {
                    "1": "flags[4]"
                },
                "new_variable_1": {
                    "1": "address"
                },
                "new_variable_2": {
                    "1": "value"
                },
                "param_1": {
                    "1": "param",
                    "2": "input_array",
                    "3": "pointer",
                    "8": "flags"
                },
                "param_1[0]": {
                    "1": "flags[0]"
                },
                "uint": {
                    "1": "unsigned_int"
                },
                "uint *param_1 + 0x14": {
                    "1": "flags[5]"
                },
                "uint *param_1 + 0xc": {
                    "1": "flags[3]"
                },
                "undefined": {
                    "1": "byte"
                }
            },
            "called": [],
            "calling": [
                "FUN_080069ec"
            ],
            "code": "\nvoid clear_flags_080064b0(int *flags)\n\n{\n  *(unsigned_int *)(*flags + 0xc) = *(unsigned_int *)(*flags + 0xc) & 0xfffffedf;\n  *(unsigned_int *)(*flags + 0x14) = *(unsigned_int *)(*flags + 0x14) & 0xfffffffe;\n  *(byte *)(parameter_value + 0x3a) = 0x20;\n  return;\n}\n\n",
            "current_name": "clear_flags_080064b0",
            "entrypoint": "0x080064b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1": "parameter_value",
                "FUN_080064b0": "clear_flags_080064b0",
                "param_1": "flags",
                "uint": "unsigned_int",
                "undefined": "byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080064cc": {
            "additional_data": {
                "(int)(pbVar2 + 1)": {
                    "1": "byte_ptr_incremented"
                },
                "(int)param_1 + 0x39": {
                    "1": "char_offset"
                },
                "*(char *)((int)param_1 + 0x39)": {
                    "1": "data_array[57]"
                },
                "*(short *)((int)param_1 + 0x26)": {
                    "1": "data_array[38]"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "flag_value"
                },
                "*(uint *)(*param_1 + 4)": {
                    "1": "uint_value"
                },
                "*(ushort *)param_1[8]": {
                    "1": "ushort_value"
                },
                "*param_1": {
                    "1": "data_array[0]"
                },
                "0x1000": {
                    "1": "magic_number"
                },
                "<Original_function_name>": {
                    "1": "decode_data"
                },
                "FUN_080064cc": {
                    "1": "parse_input",
                    "10": "process_data",
                    "2": "process_binary_data",
                    "3": "extract_data",
                    "4": "decode_data",
                    "5": "parse_data"
                },
                "PTR_FUN_080064cc_0x26": {
                    "1": "counter"
                },
                "PTR_FUN_080064cc_0x39": {
                    "1": "character_check"
                },
                "PTR_FUN_080064cc_0xc": {
                    "1": "flag_value"
                },
                "param_1": {
                    "1": "parameters",
                    "13": "data",
                    "2": "input_array",
                    "5": "data_array",
                    "7": "input_data"
                },
                "param_1[2]": {
                    "1": "condition_value"
                },
                "param_1[4]": {
                    "1": "data_array[4]"
                },
                "param_1[8]": {
                    "1": "index"
                },
                "pbVar2": {
                    "1": "byte_data",
                    "19": "byte_ptr",
                    "8": "byte_pointer"
                },
                "sVar1": {
                    "1": "remaining_iters",
                    "3": "remaining_count",
                    "6": "remaining_iterations",
                    "7": "count",
                    "8": "counter"
                }
            },
            "called": [],
            "calling": [
                "FUN_080069ec"
            ],
            "code": "\nundefined4 process_data_080064cc(int *data)\n\n{\n  short counter;\n  byte *byte_ptr;\n  \n  if (*(char *)((int)data + 0x39) != '!') {\n    return 2;\n  }\n  if (data_array[2] == 0x1000) {\n    *(uint *)(*data + 4) = *(ushort *)data_array[8] & 0x1ff;\n    if (data_array[4] == 0) {\n      data_array[8] = data_array[8] + 2;\n    }\n    else {\n      data_array[8] = data_array[8] + 1;\n    }\n  }\n  else {\n    byte_ptr = (byte *)data_array[8];\n    data_array[8] = (int)(byte_ptr + 1);\n    *(uint *)(*data + 4) = (uint)*byte_ptr;\n  }\n  counter = *(short *)((int)data + 0x26) + -1;\n  *(short *)((int)data + 0x26) = counter;\n  if (counter == 0) {\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffff7f;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_080064cc",
            "entrypoint": "0x080064cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080064cc": "process_data_080064cc",
                "param_1": "data",
                "param_1[2]": "data_array[2]",
                "param_1[4]": "data_array[4]",
                "param_1[8]": "data_array[8]",
                "pbVar2": "byte_ptr",
                "sVar1": "counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006538": {
            "additional_data": {
                "*param_1": {
                    "1": "param"
                },
                "FUN_08006538": {
                    "1": "update_values_based_on_params",
                    "2": "calculate_value",
                    "3": "calculate_shifted_value",
                    "4": "calculate_and_set_values",
                    "8": "update_data"
                },
                "get_shifted_data_08005a28": {
                    "1": "get_shifted_data_a"
                },
                "get_shifted_data_08005a48": {
                    "1": "get_shifted_data2"
                },
                "iRam40013808": {
                    "1": "result_data",
                    "2": "result"
                },
                "iVar1": {
                    "1": "shifted_var1",
                    "23": "shifted_data1",
                    "5": "shifted_value1"
                },
                "iVar10": {
                    "1": "input_data_value",
                    "12": "base_address",
                    "2": "data_address",
                    "6": "shifted_data10"
                },
                "iVar2": {
                    "1": "shifted_value_2",
                    "23": "shifted_data2",
                    "5": "shifted_value2"
                },
                "iVar3": {
                    "1": "shifted_var3",
                    "23": "shifted_data3",
                    "5": "shifted_value3"
                },
                "iVar4": {
                    "1": "data4",
                    "23": "shifted_data4",
                    "5": "shifted_value4"
                },
                "iVar5": {
                    "1": "data5",
                    "23": "shifted_data5",
                    "5": "shifted_value5"
                },
                "iVar6": {
                    "1": "shifted_value_6",
                    "18": "shifted_data6",
                    "3": "param1_value1",
                    "5": "shifted_value6"
                },
                "iVar7": {
                    "1": "data7",
                    "18": "shifted_data7",
                    "3": "param1_value2",
                    "5": "shifted_value7"
                },
                "iVar8": {
                    "1": "param1_var3",
                    "18": "shifted_data8",
                    "3": "param1_value3",
                    "5": "shifted_value8"
                },
                "iVar9": {
                    "1": "param1_var4",
                    "18": "shifted_data9",
                    "3": "param1_value4",
                    "5": "shifted_value9"
                },
                "param_1": {
                    "1": "parameter",
                    "2": "input_params",
                    "3": "input_data",
                    "5": "parameters",
                    "7": "data"
                }
            },
            "called": [
                "FUN_08005a28",
                "FUN_08005a48"
            ],
            "calling": [
                "FUN_0800674e"
            ],
            "code": "\nvoid update_data_08006538(int *data)\n\n{\n  int shifted_data1;\n  int shifted_data2;\n  int shifted_data3;\n  int shifted_data4;\n  int shifted_data5;\n  int shifted_data6;\n  int shifted_data7;\n  int shifted_data8;\n  int shifted_data9;\n  int base_address;\n  \n  *(uint *)(*data + 0x10) = *(uint *)(*data + 0x10) & 0xffffcfff | data[3];\n  *(uint *)(*data + 0xc) =\n       data[2] | data[4] | data[5] | *(uint *)(*data + 0xc) & 0xffffe9f3;\n  *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xfffffcff | data[6];\n  base_address = *data;\n  if (base_address != 0x40013800) {\n    shifted_data1 = get_shifted_data_a();\n    shifted_data6 = data[1];\n    shifted_data2 = get_shifted_data_a();\n    shifted_data7 = data[1];\n    shifted_data3 = get_shifted_data_a();\n    shifted_data8 = data[1];\n    shifted_data4 = get_shifted_data_a();\n    shifted_data9 = data[1];\n    shifted_data5 = get_shifted_data_a();\n    *(uint *)(base_address + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(shifted_data4 * 0x19) / (uint)(shifted_data9 << 2) +\n                        (int)(((ulonglong)(uint)(shifted_data5 * 0x19) / (ulonglong)(uint)(data[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(shifted_data2 * 0x19) / (uint)(shifted_data7 << 2) +\n           (int)(((ulonglong)(uint)(shifted_data3 * 0x19) / (ulonglong)(uint)(shifted_data8 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(shifted_data1 * 0x19) / (ulonglong)(uint)(shifted_data6 << 2)) / 100) * 0x10;\n    return;\n  }\n  base_address = get_shifted_data_b();\n  shifted_data5 = data[1];\n  shifted_data1 = get_shifted_data_b();\n  shifted_data6 = data[1];\n  shifted_data2 = get_shifted_data_b();\n  shifted_data7 = data[1];\n  shifted_data3 = get_shifted_data_b();\n  shifted_data8 = data[1];\n  shifted_data4 = get_shifted_data_b();\n  result = ((uint)((int)((ulonglong)\n                               (((uint)(shifted_data3 * 0x19) / (uint)(shifted_data8 << 2) +\n                                (int)(((ulonglong)(uint)(shifted_data4 * 0x19) /\n                                      (ulonglong)(uint)(data[1] << 2)) / 100) * -100) * 0x10 +\n                               0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n                 ((((uint)(shifted_data1 * 0x19) / (uint)(shifted_data6 << 2) +\n                   (int)(((ulonglong)(uint)(shifted_data2 * 0x19) / (ulonglong)(uint)(shifted_data7 << 2)) / 100) *\n                   -100) * 0x10 + 0x32) / 100 & 0xf0) +\n                 (int)(((ulonglong)(uint)(base_address * 0x19) / (ulonglong)(uint)(shifted_data5 << 2)) / 100) *\n                 0x10;\n  return;\n}\n\n",
            "current_name": "update_data_08006538",
            "entrypoint": "0x08006538",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006538": "update_data_08006538",
                "get_shifted_data_08005a28": "get_shifted_data_a",
                "get_shifted_data_08005a48": "get_shifted_data_b",
                "iRam40013808": "result",
                "iVar1": "shifted_data1",
                "iVar10": "base_address",
                "iVar2": "shifted_data2",
                "iVar3": "shifted_data3",
                "iVar4": "shifted_data4",
                "iVar5": "shifted_data5",
                "iVar6": "shifted_data6",
                "iVar7": "shifted_data7",
                "iVar8": "shifted_data8",
                "iVar9": "shifted_data9",
                "param_1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080066e8": {
            "additional_data": {
                "(*param_1)[3]": {
                    "1": "bitwise_operation_result",
                    "2": "param_array[3]"
                },
                "(*param_1)[5]": {
                    "1": "fifth_element",
                    "2": "param_array[5]"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "param_array[0x39]"
                },
                "*(undefined *)((int)param_1 + 0x3a)": {
                    "1": "data_ptr_offset_2"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "param_array[0xe]"
                },
                "*param_1": {
                    "1": "value_at_pointer_array"
                },
                "FUN_080066e8": {
                    "1": "check_conditions_and_modify_data",
                    "2": "check_validity",
                    "3": "check_permissions",
                    "4": "check_data_validity",
                    "5": "check_parameters"
                },
                "PTR_x": {
                    "1": "array_ptr"
                },
                "PTR_x[3]": {
                    "1": "array_ptr[3]"
                },
                "PTR_x[5]": {
                    "1": "array_ptr[5]"
                },
                "get_data_08003760": {
                    "1": "get_current_permission",
                    "2": "get_data_difference",
                    "5": "get_data"
                },
                "get_data_08003760()": {
                    "1": "get_data"
                },
                "iVar1": {
                    "1": "result",
                    "19": "data_difference",
                    "2": "data_offset",
                    "3": "data_value"
                },
                "param_1": {
                    "1": "ptr_array",
                    "2": "input_data",
                    "3": "input_array",
                    "5": "data"
                },
                "param_2": {
                    "1": "condition_mask",
                    "10": "mask",
                    "2": "permission_flag",
                    "3": "bit_mask",
                    "5": "flag"
                },
                "param_3": {
                    "1": "is_match",
                    "15": "expected_result",
                    "2": "is_true",
                    "3": "condition"
                },
                "param_4": {
                    "1": "start_value",
                    "2": "reference_value",
                    "3": "base_address",
                    "4": "data_offset",
                    "6": "comparison_value"
                },
                "param_5": {
                    "1": "max_offset",
                    "13": "max_difference",
                    "2": "maximum_difference",
                    "3": "max_diff"
                }
            },
            "called": [
                "FUN_08003760"
            ],
            "calling": [
                "FUN_080067ac"
            ],
            "code": "\nundefined4 check_parameters_080066e8(uint **data,uint mask,uint expected_result,int comparison_value,uint max_difference)\n\n{\n  int data_difference;\n  \n  do {\n    if (((mask & ~**data) == 0) != expected_result) {\n      return 0;\n    }\n  } while ((max_difference == 0xffffffff) ||\n          ((max_difference != 0 && (data_difference = get_data, (uint)(data_difference - comparison_value) <= max_difference))));\n  (*data)[3] = (*data)[3] & 0xfffffe5f;\n  (*data)[5] = (*data)[5] & 0xfffffffe;\n  *(undefined *)((int)data + 0x39) = 0x20;\n  *(undefined *)((int)data + 0x3a) = 0x20;\n  *(undefined *)(data + 0xe) = 0;\n  return 3;\n}\n\n",
            "current_name": "check_parameters_080066e8",
            "entrypoint": "0x080066e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080066e8": "check_parameters_080066e8",
                "get_data_08003760": "get_data",
                "get_data_08003760()": "get_data",
                "iVar1": "data_difference",
                "param_1": "data",
                "param_2": "mask",
                "param_3": "expected_result",
                "param_4": "comparison_value",
                "param_5": "max_difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800674c": {
            "called": [],
            "calling": [
                "FUN_0800674e"
            ],
            "code": "\nvoid FUNC_0800674c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800674c",
            "entrypoint": "0x0800674c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800674c": "FUNC_0800674c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800674e": {
            "additional_data": {
                "(int)param_1 + 0x39": {
                    "1": "flag_offset"
                },
                "*(char *)((int)data + 0x39)": {
                    "1": "flag"
                },
                "*(char *)((int)param_1 + 0x39)": {
                    "1": "is_data_structure_initialized",
                    "2": "is_flag_set",
                    "4": "data_flag",
                    "6": "flag"
                },
                "*(char*)((int)param_1 + 0x39)": {
                    "1": "is_flag_set"
                },
                "*(uint *)(*data + 0x10)": {
                    "1": "data_value2"
                },
                "*(uint *)(*data + 0x14)": {
                    "1": "data_value3"
                },
                "*(uint *)(*data + 0xc)": {
                    "1": "data_value"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "variable_2",
                    "3": "data_value2",
                    "7": "value2",
                    "9": "value_2"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "flag_3",
                    "3": "data_value3",
                    "7": "value3",
                    "9": "value_3"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "data_1",
                    "3": "data_value1",
                    "6": "value1",
                    "9": "value_1"
                },
                "*(uint*)(*param_1 + 0x10)": {
                    "1": "variable_2"
                },
                "*(uint*)(*param_1 + 0x14)": {
                    "1": "variable_3"
                },
                "*(uint*)(*param_1 + 0xc)": {
                    "1": "variable_1"
                },
                "*(undefined *)((int)data + 0x39)": {
                    "1": "status"
                },
                "*(undefined *)((int)data + 0x3a)": {
                    "1": "progress_status"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "initialized_flag"
                },
                "*(undefined *)((int)param_1 + 0x3a)": {
                    "1": "variable1",
                    "2": "flag2"
                },
                "*(undefined *)(data + 0xe)": {
                    "1": "processed_flag"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "result",
                    "2": "data_value",
                    "3": "initialized_flag",
                    "4": "counter"
                },
                "*(undefined*)((int)param_1 + 0x39)": {
                    "1": "flag"
                },
                "*(undefined*)((int)param_1 + 0x3a)": {
                    "1": "value"
                },
                "*(undefined*)(param_1 + 0xe)": {
                    "1": "flag"
                },
                "0": {
                    "1": "success"
                },
                "0x20": {
                    "1": "value1_set"
                },
                "0x2000": {
                    "1": "mask_bit_13"
                },
                "0x24": {
                    "1": "flag_set"
                },
                "0x39": {
                    "1": "offset_flag"
                },
                "0xffffb7ff": {
                    "1": "mask_bit_23"
                },
                "0xffffdfff": {
                    "1": "mask_bit_14"
                },
                "0xffffffd5": {
                    "1": "mask_bit_3"
                },
                "FUNC_0800674c": {
                    "1": "perform_operation",
                    "2": "initialize_function",
                    "3": "perform_action",
                    "4": "perform_initialization",
                    "5": "do_something"
                },
                "FUN_0800674e": {
                    "1": "update_values",
                    "2": "handle_param",
                    "5": "update_data",
                    "7": "initialize_data_structure",
                    "8": "initialize_data"
                },
                "char": {
                    "1": "byte"
                },
                "param_1": {
                    "1": "data_pointer",
                    "3": "param",
                    "4": "data_array",
                    "5": "data_ptr",
                    "7": "data_structure",
                    "9": "data"
                },
                "param_1 + 0xe": {
                    "1": "data_flag"
                },
                "param_1[0xe]": {
                    "1": "data_array[14]"
                },
                "param_1[0xf]": {
                    "1": "flag2",
                    "10": "counter",
                    "2": "flag"
                },
                "return 0": {
                    "1": "success"
                },
                "return 1": {
                    "1": "failure"
                },
                "undefined4": {
                    "1": "int"
                },
                "update_data_08006538": {
                    "1": "update_info",
                    "21": "update_data"
                }
            },
            "called": [
                "FUN_08006538",
                "FUN_0800674c"
            ],
            "calling": [
                "FUN_08008078"
            ],
            "code": "\nint initialize_data_0800674e(int *data)\n\n{\n  if (data != (int *)0x0) {\n    if (*(byte *)((int)data + 0x39) == '\\0') {\n      *(undefined *)(data + 0xe) = 0;\n      FUNC_0800674c();\n    }\n    *(undefined *)((int)data + 0x39) = 0x24;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffdfff;\n    update_data(data);\n    *(uint *)(*data + 0x10) = *(uint *)(*data + 0x10) & 0xffffb7ff;\n    *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xffffffd5;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x2000;\n    counter = 0;\n    *(undefined *)((int)data + 0x39) = 0x20;\n    *(undefined *)((int)data + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "initialize_data_0800674e",
            "entrypoint": "0x0800674e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800674e": "initialize_data_0800674e",
                "char": "byte",
                "param_1": "data",
                "param_1[0xf]": "counter",
                "undefined4": "int",
                "update_data_08006538": "update_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080067ac": {
            "additional_data": {
                "*((int)param_1 + 0x26)": {
                    "1": "short_value_2"
                },
                "*(byte *)param_2": {
                    "1": "input_value",
                    "2": "byte_value"
                },
                "*(char *)((int)param_1 + 0x39)": {
                    "1": "data_char",
                    "2": "data_flag"
                },
                "*(char *)(param_1 + 0xe)": {
                    "1": "char_value"
                },
                "*(char *)(param_1 + 0xe) == '\\x01'": {
                    "1": "param_flag"
                },
                "*(short *)((int)param_1 + 0x26)": {
                    "1": "short_value2"
                },
                "*(short *)(param_1 + 9)": {
                    "1": "short_value1"
                },
                "*(uint *)(*param_1 + 4)": {
                    "1": "data_value",
                    "2": "uint_value"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "data_undefined"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "parameter_flag"
                },
                "*param_1": {
                    "1": "flags",
                    "2": "data_ptr"
                },
                "*param_2": {
                    "1": "array_value"
                },
                "FUN_080067ac": {
                    "1": "parse_data",
                    "25": "process_data",
                    "4": "process_input"
                },
                "check_parameters_080066e8": {
                    "5": "check_parameters"
                },
                "check_parameters_080066e8(param_1,0x40,0,uVar2,param_4)": {
                    "1": "check_parameters_result_final"
                },
                "check_parameters_080066e8(param_1,0x80,0,uVar2,param_4)": {
                    "1": "check_parameters_result"
                },
                "get_data_08003760": {
                    "1": "get_data_block",
                    "3": "get_data"
                },
                "get_data_08003760()": {
                    "1": "get_data"
                },
                "iVar1": {
                    "26": "result",
                    "5": "check_result"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "input_array",
                    "8": "data_ptr",
                    "9": "data"
                },
                "param_1[0xf]": {
                    "1": "param_1_15"
                },
                "param_1[2] == 0x1000": {
                    "1": "check_flag"
                },
                "param_1[4] == 0": {
                    "1": "additional_flag"
                },
                "param_2": {
                    "1": "input_ptr",
                    "2": "input_data",
                    "3": "data",
                    "5": "values"
                },
                "param_2 == (ushort *)0x0": {
                    "1": "input_null"
                },
                "param_3": {
                    "1": "size",
                    "2": "length",
                    "3": "count",
                    "4": "data_length"
                },
                "param_3 == 0": {
                    "1": "input_empty"
                },
                "param_4": {
                    "1": "value",
                    "2": "result",
                    "3": "param4",
                    "5": "additional_param",
                    "7": "param",
                    "8": "param_4"
                },
                "uVar2": {
                    "1": "return_val",
                    "2": "output",
                    "20": "return_value",
                    "8": "status"
                }
            },
            "called": [
                "FUN_080066e8",
                "FUN_08003760"
            ],
            "calling": [
                "FUN_08008500"
            ],
            "code": "\nundefined4 process_data_080067ac(int *data,ushort *data_array,int data_length,undefined4 param_4)\n\n{\n  int result;\n  undefined4 return_value;\n  \n  if (*(char *)((int)data + 0x39) == ' ') {\n    if (data_array == (ushort *)0x0) {\n      return_value = 1;\n    }\n    else if (data_length == 0) {\n      return_value = 1;\n    }\n    else if (*(char *)(data + 0xe) == '\\x01') {\n      return_value = 2;\n    }\n    else {\n      *(undefined *)(data + 0xe) = 1;\n      param_value = 0;\n      *(undefined *)((int)data + 0x39) = 0x21;\n      return_value = get_data;\n      *(short *)(data + 9) = (short)data_length;\n      *(short *)((int)data + 0x26) = (short)data_length;\n      while (*(short *)((int)data + 0x26) != 0) {\n        *(short *)((int)data + 0x26) = *(short *)((int)data + 0x26) + -1;\n        if (data[2] == 0x1000) {\n          result = check_parameters_result;\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data + 4) = *data_array & 0x1ff;\n          if (data[4] == 0) {\n            data_array = data_array + 1;\n          }\n          else {\n            data_array = (ushort *)((int)data_array + 1);\n          }\n        }\n        else {\n          result = check_parameters_result;\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data + 4) = (uint)*(byte *)data_array;\n          data_array = (ushort *)((int)data_array + 1);\n        }\n      }\n      result = check_parameters_result_final;\n      if (result == 0) {\n        *(undefined *)((int)data + 0x39) = 0x20;\n        *(undefined *)(data + 0xe) = 0;\n        return_value = 0;\n      }\n      else {\n        return_value = 3;\n      }\n    }\n  }\n  else {\n    return_value = 2;\n  }\n  return return_value;\n}\n\n",
            "current_name": "process_data_080067ac",
            "entrypoint": "0x080067ac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080067ac": "process_data_080067ac",
                "check_parameters_080066e8": "check_parameters",
                "check_parameters_080066e8(param_1,0x40,0,uVar2,param_4)": "check_parameters_result_final",
                "check_parameters_080066e8(param_1,0x80,0,uVar2,param_4)": "check_parameters_result",
                "get_data_08003760": "get_data",
                "get_data_08003760()": "get_data",
                "iVar1": "result",
                "param_1": "data",
                "param_1[0xf]": "param_value",
                "param_2": "data_array",
                "param_3": "data_length",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800688e": {
            "additional_data": {
                "(int)param_1 + 0x26": {
                    "1": "data_pointer_value3"
                },
                "(int)param_1 + 0x39": {
                    "1": "data_pointer_char3"
                },
                "(uint *)(*param_1 + 0xc)": {
                    "1": "data_pointer_u_int"
                },
                "*((int)param_1 + 0x39)": {
                    "1": "char_value"
                },
                "*(char *)((int)data + 0x39)": {
                    "1": "flag"
                },
                "*(char *)((int)param_1 + 0x39)": {
                    "1": "array_flag",
                    "2": "char_value"
                },
                "*(char *)(data + 0xe)": {
                    "1": "status_flag"
                },
                "*(char *)(param_1 + 0xe)": {
                    "1": "char_at_input_array_plus_0xe"
                },
                "*(short *)((int)data + 0x26)": {
                    "1": "data_value3"
                },
                "*(short *)((int)param_1 + 0x26)": {
                    "1": "short_value2",
                    "3": "data_value3"
                },
                "*(short *)(data + 9)": {
                    "1": "data_value2"
                },
                "*(short *)(param_1 + 9)": {
                    "1": "value4",
                    "3": "data_value2"
                },
                "*(uint *)(*data + 0xc)": {
                    "1": "control_value"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "pointer_value",
                    "2": "ptr_value"
                },
                "*(undefined *)((int)data + 0x39)": {
                    "1": "flag_update"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "array_flag",
                    "2": "new_flag"
                },
                "*(undefined *)(data + 0xe)": {
                    "1": "status_flag_update"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "flag_value"
                },
                "*param_1": {
                    "1": "input_array_ptr"
                },
                "0x26": {
                    "1": "offset2"
                },
                "0x39": {
                    "1": "offset"
                },
                "0x80": {
                    "1": "flag_mask"
                },
                "FUN_0800688e": {
                    "1": "validate_parameters",
                    "2": "update_parameters",
                    "5": "update_data",
                    "7": "initialize_data",
                    "8": "validate_input"
                },
                "arrayParam": {
                    "1": "arr"
                },
                "buffer": {
                    "1": "buffer"
                },
                "char": {
                    "1": "character"
                },
                "char_1": {
                    "1": "first_char"
                },
                "char_2": {
                    "1": "second_char"
                },
                "data": {
                    "1": "data_ptr"
                },
                "inputArray + 0xc": {
                    "1": "data_ptr"
                },
                "inputArray + 0xe": {
                    "1": "flag_ptr"
                },
                "inputArray + 0xf": {
                    "1": "counter_ptr"
                },
                "int": {
                    "1": "integer"
                },
                "int_1": {
                    "1": "temp"
                },
                "int_2": {
                    "1": "temp_2"
                },
                "lengthParam": {
                    "1": "length"
                },
                "param_1": {
                    "1": "array_param",
                    "11": "data",
                    "2": "input_data",
                    "8": "input_array"
                },
                "param_1 + 0x39": {
                    "1": "data_pointer_char"
                },
                "param_1 + 0xe": {
                    "1": "data_offset"
                },
                "param_1 + 9": {
                    "1": "data_pointer_value2"
                },
                "param_1[0xf]": {
                    "1": "input_array_index_0xf",
                    "2": "counter",
                    "3": "data_value4"
                },
                "param_1[8]": {
                    "1": "data_offset",
                    "4": "data_value1"
                },
                "param_2": {
                    "1": "size",
                    "21": "value1",
                    "7": "value_1"
                },
                "param_3": {
                    "1": "initial_value2",
                    "21": "value2",
                    "7": "value_2"
                },
                "short": {
                    "1": "short_value"
                },
                "short_1": {
                    "1": "short_value"
                },
                "short_2": {
                    "1": "short_value_2"
                },
                "temp_1": {
                    "1": "temp_value"
                },
                "undefined4": {
                    "1": "return_value"
                },
                "value1": {
                    "1": "value1"
                },
                "value2": {
                    "1": "value2"
                },
                "valueParam": {
                    "1": "value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08008730",
                "FUN_08008694"
            ],
            "code": "\nreturn_value validate_input_0800688e(integer *data,integer value1,integer value2)\n\n{\n  if (*(character *)((integer)data + 0x39) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(character *)(data + 0xe) != '\\x01') {\n    data_value1 = value1;\n    *(short_value *)(data + 9) = (short_value)value2;\n    *(short_value *)((integer)data + 0x26) = (short_value)value2;\n    data_value4 = 0;\n    *(undefined *)((integer)data + 0x39) = 0x21;\n    *(undefined *)(data + 0xe) = 0;\n    *(uinteger *)(*data + 0xc) = *(uinteger *)(*data + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "current_name": "validate_input_0800688e",
            "entrypoint": "0x0800688e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800688e": "validate_input_0800688e",
                "char": "character",
                "int": "integer",
                "param_1": "data",
                "param_1[0xf]": "data_value4",
                "param_1[8]": "data_value1",
                "param_2": "value1",
                "param_3": "value2",
                "short": "short_value",
                "undefined4": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080068d6": {
            "additional_data": {
                "(char *)((int)param_1 + 0x3a)": {
                    "1": "char_ptr1"
                },
                "(char *)(param_1 + 0xe)": {
                    "1": "char_ptr2"
                },
                "(int)param_1 + 0x2e": {
                    "1": "data[0x2e]"
                },
                "(int)param_1 + 0x3a": {
                    "1": "data[0x3a]"
                },
                "(uint *)(*param_1 + 0x14)": {
                    "1": "uint_ptr2"
                },
                "(uint *)(*param_1 + 0xc)": {
                    "1": "uint_ptr1"
                },
                "* ((int)param_1 + 0x2e)": {
                    "1": "param1_value46"
                },
                "* (short *)(param_1 + 0xb)": {
                    "1": "param1_value11"
                },
                "*(char *)((int)param_1 + 0x3a)": {
                    "1": "character_check",
                    "5": "char_value"
                },
                "*(char *)(param_1 + 0xe)": {
                    "1": "flag2",
                    "7": "flag"
                },
                "*(short *)((int)param_1 + 0x2e)": {
                    "1": "short_val_2",
                    "2": "short_value_2"
                },
                "*(short *)(param_1 + 0xb)": {
                    "1": "struct_data.value4",
                    "2": "data_array[11]"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "set_bit_flag14",
                    "2": "pointer_value2"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "uint_value_1",
                    "2": "pointer_value1"
                },
                "*(undefined *)((int)param_1 + 0x3a)": {
                    "1": "set_item_at_offset31"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "struct_data.value8",
                    "2": "flag_value"
                },
                "0x100": {
                    "1": "bit_flag2"
                },
                "0x20": {
                    "1": "bit_flag"
                },
                "FUN_080068d6": {
                    "1": "update_data",
                    "10": "validate_input",
                    "2": "initialize_parameters",
                    "5": "process_data"
                },
                "char_1": {
                    "1": "first_character"
                },
                "char_2": {
                    "1": "second_character"
                },
                "input + 0x3a": {
                    "1": "space"
                },
                "input_array": {
                    "1": "input_data"
                },
                "input_array + 0x2e": {
                    "1": "another_short_value_ptr"
                },
                "input_array + 0xb": {
                    "1": "short_value_ptr"
                },
                "input_array + 0xe": {
                    "1": "flag"
                },
                "input_array + 0xf": {
                    "1": "counter"
                },
                "input_data+0x2e": {
                    "1": "value_2_short"
                },
                "input_data+0x3a": {
                    "1": "flag_char"
                },
                "input_data+0xb": {
                    "1": "value_1_short"
                },
                "param_1": {
                    "1": "parameters",
                    "12": "input_array",
                    "2": "input_data",
                    "3": "data_array",
                    "5": "data"
                },
                "param_1 + 0x2e": {
                    "1": "parameters[46]"
                },
                "param_1 + 0x3a": {
                    "1": "parameters[58]"
                },
                "param_1 + 0xb": {
                    "1": "short_array1"
                },
                "param_1 + 0xe": {
                    "1": "data[14]"
                },
                "param_1+0xe": {
                    "1": "flag"
                },
                "param_1[0xb]": {
                    "1": "input_array[11]"
                },
                "param_1[0xe]": {
                    "1": "input_array[14]"
                },
                "param_1[0xf]": {
                    "1": "flag_value",
                    "2": "input_array[15]",
                    "4": "input_array[0xf]"
                },
                "param_1[10]": {
                    "1": "param_1_value",
                    "2": "data[10]",
                    "3": "data_array[10]",
                    "6": "input_array[10]"
                },
                "param_2": {
                    "1": "parameter_2",
                    "12": "value_1",
                    "14": "value1"
                },
                "param_3": {
                    "1": "count_param",
                    "12": "value_2",
                    "14": "value2"
                },
                "paramsArray[10]": {
                    "1": "updated_value1"
                },
                "short data[11]": {
                    "1": "value2_short"
                },
                "short_1": {
                    "1": "short_value"
                },
                "uint_1": {
                    "1": "unsigned_value"
                },
                "uint_2": {
                    "1": "unsigned_value_2"
                },
                "undefined1_1": {
                    "1": "undefined_value"
                },
                "undefined1_2": {
                    "1": "undefined_value_2"
                },
                "value_1": {
                    "1": "length"
                },
                "value_2": {
                    "1": "short_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08008600",
                "FUN_0800863c"
            ],
            "code": "\nundefined4 validate_input_080068d6(int *input_array,int value1,int value2)\n\n{\n  if (*(char *)((int)input_array + 0x3a) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(input_array + 0xe) != '\\x01') {\n    input_array[10] = value1;\n    *(short *)(input_array + 0xb) = (short)value2;\n    *(short *)((int)input_array + 0x2e) = (short)value2;\n    input_array[0xf] = 0;\n    *(undefined *)((int)input_array + 0x3a) = 0x22;\n    *(undefined *)(input_array + 0xe) = 0;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x100;\n    *(uint *)(*input_array + 0x14) = *(uint *)(*input_array + 0x14) | 1;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "current_name": "validate_input_080068d6",
            "entrypoint": "0x080068d6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080068d6": "validate_input_080068d6",
                "param_1": "input_array",
                "param_1[0xf]": "input_array[0xf]",
                "param_1[10]": "input_array[10]",
                "param_2": "value1",
                "param_3": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006932": {
            "additional_data": {
                "(int)param_1 + 0x39": {
                    "1": "status_address"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "value_to_be_updated",
                    "2": "flag_value",
                    "3": "value"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "flag_character",
                    "4": "new_value"
                },
                "*param_1": {
                    "1": "input_value"
                },
                "0x39": {
                    "1": "undefined_offset"
                },
                "0xc": {
                    "2": "flag_offset"
                },
                "0xffffffbf": {
                    "1": "flag_mask"
                },
                "FUN_08006932": {
                    "1": "clear_bit_in_memory",
                    "10": "update_value",
                    "2": "update_value_and_process",
                    "3": "update_flags_and_process_value",
                    "8": "set_flag_and_process_value"
                },
                "param_1": {
                    "1": "input_pointer",
                    "12": "value_ptr",
                    "2": "param"
                },
                "process_value_08008730": {
                    "1": "process_value_and_update_flags",
                    "17": "process_value"
                },
                "valuePtr": {
                    "1": "value"
                }
            },
            "called": [
                "FUN_08008730"
            ],
            "calling": [
                "FUN_080069ec"
            ],
            "code": "\nundefined4 update_value_08006932(int *value_ptr)\n\n{\n  *(uint *)(*value_ptr + 0xc) = *(uint *)(*value_ptr + 0xc) & 0xffffffbf;\n  *(undefined *)((int)value_ptr + 0x39) = 0x20;\n  process_value();\n  return 0;\n}\n\n",
            "current_name": "update_value_08006932",
            "entrypoint": "0x08006932",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006932": "update_value_08006932",
                "param_1": "value_ptr",
                "process_value_08008730": "process_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800694c": {
            "additional_data": {
                "*(char *)((int)param_1 + 0x3a)": {
                    "1": "quote_character"
                },
                "*(int *)(*param_1 + 4)": {
                    "1": "temp_int"
                },
                "*(ushort *)param_1[10]": {
                    "1": "output_short"
                },
                "*param_1": {
                    "1": "input"
                },
                "*param_1 + 4)": {
                    "1": "temp_pointer"
                },
                "FUN_0800694c": {
                    "1": "parse_string_parameter",
                    "12": "process_data",
                    "4": "process_string",
                    "6": "parse_string"
                },
                "execute_function_0800870c": {
                    "1": "execute_helper_function"
                },
                "param_1": {
                    "1": "parameter",
                    "12": "data",
                    "2": "input_array",
                    "3": "input_data",
                    "4": "string_data"
                },
                "param_1[10]": {
                    "1": "output_integer"
                },
                "param_1[2]": {
                    "1": "temp_int2"
                },
                "param_1[4]": {
                    "1": "temp_int3"
                },
                "pbVar1": {
                    "1": "destination_byte",
                    "12": "byte_pointer",
                    "14": "byte_ptr",
                    "4": "output_byte"
                },
                "puVar3": {
                    "1": "output_byte_ptr",
                    "11": "undefined_ptr",
                    "12": "undefined_pointer",
                    "2": "byte_ptr2"
                },
                "sVar2": {
                    "1": "remaining_length",
                    "14": "counter",
                    "2": "remaining_iterations",
                    "6": "count"
                },
                "sVar2: : count: ,\n  : puVar3": {
                    "1": "undefined_ptr"
                }
            },
            "called": [
                "FUN_0800870c"
            ],
            "calling": [
                "FUN_080069ec"
            ],
            "code": "\nundefined4 process_data_0800694c(int *data)\n\n{\n  byte *byte_ptr;\n  short counter;\n  undefined *undefined_pointer;\n  \n  if (*(char *)((int)data + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (temp_int2 == 0x1000) {\n    if (temp_int3 == 0) {\n      *(ushort *)output_integer = (ushort)((uint)(*(int *)(*data + 4) << 0x17) >> 0x17);\n      output_integer = output_integer + 2;\n    }\n    else {\n      *(ushort *)output_integer = (ushort)*(undefined4 *)(*data + 4) & 0xff;\n      output_integer = output_integer + 1;\n    }\n  }\n  else if (temp_int3 == 0) {\n    undefined_pointer = (undefined *)output_integer;\n    output_integer = (int)(undefined_pointer + 1);\n    *undefined_pointer = (char)*(undefined4 *)(*data + 4);\n  }\n  else {\n    byte_ptr = (byte *)output_integer;\n    output_integer = (int)(byte_ptr + 1);\n    *byte_ptr = (byte)*(undefined4 *)(*data + 4) & 0x7f;\n  }\n  counter = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = counter;\n  if (counter != 0) {\n    return 0;\n  }\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffffdf;\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xfffffeff;\n  *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xfffffffe;\n  *(undefined *)((int)data + 0x3a) = 0x20;\n  execute_additional_function();\n  return 0;\n}\n\n",
            "current_name": "process_data_0800694c",
            "entrypoint": "0x0800694c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800694c": "process_data_0800694c",
                "execute_function_0800870c": "execute_additional_function",
                "param_1": "data",
                "param_1[10]": "output_integer",
                "param_1[2]": "temp_int2",
                "param_1[4]": "temp_int3",
                "pbVar1": "byte_ptr",
                "puVar3": "undefined_pointer",
                "sVar2": "counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080069ec": {
            "additional_data": {
                "DAT_": {
                    "1": "dat_"
                },
                "F1": {
                    "1": "process_data_0800694c"
                },
                "F2": {
                    "1": "process_data_080064cc"
                },
                "F3": {
                    "1": "update_value_08006932"
                },
                "F4": {
                    "1": "func_0800877c"
                },
                "F5": {
                    "1": "clear_flags_080064b0"
                },
                "FUNC_0800877c": {
                    "1": "function_a",
                    "2": "cleanup",
                    "3": "function1"
                },
                "FUN_080069ec": {
                    "1": "process_and_update_data",
                    "2": "process_input",
                    "21": "process_data",
                    "3": "process_flags"
                },
                "LAB_08006b0c_1": {
                    "1": "label_a",
                    "2": "label",
                    "4": "label_1"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "clear_flags_080064b0": {
                    "1": "clear_flags_2",
                    "13": "clear_flags"
                },
                "code": {
                    "1": "function2"
                },
                "iVar1": {
                    "1": "status",
                    "17": "result",
                    "2": "initialize_result",
                    "3": "return_value"
                },
                "initialize_data_08004050": {
                    "15": "initialize_data"
                },
                "param_1": {
                    "1": "flags",
                    "2": "input_data",
                    "21": "data",
                    "3": "param"
                },
                "process_data_080064cc": {
                    "1": "process_data_b",
                    "2": "process_data_case_2",
                    "3": "process_data_condition2",
                    "4": "process_data_case2"
                },
                "process_data_0800694c": {
                    "1": "process_data_a",
                    "2": "process_data_case_1",
                    "3": "process_data_condition1",
                    "4": "process_data_case1"
                },
                "puVar3": {
                    "1": "value_ptr",
                    "4": "ptr_data",
                    "5": "data_ptr",
                    "7": "ptr"
                },
                "uVar2": {
                    "1": "value_3",
                    "2": "flag2",
                    "3": "var2",
                    "4": "value1"
                },
                "uVar4": {
                    "1": "is_set",
                    "11": "flag",
                    "2": "value_2"
                },
                "uVar5": {
                    "1": "var_5",
                    "2": "parameter_1",
                    "3": "value2"
                },
                "update_value_08006932": {
                    "1": "update_value_condition1",
                    "13": "update_value"
                }
            },
            "called": [
                "FUN_0800877c",
                "FUN_08004050",
                "FUN_080064b0",
                "FUN_0800694c",
                "FUN_08006932",
                "FUN_080064cc"
            ],
            "calling": [],
            "code": "\nvoid process_data_080069ec(uint **data)\n\n{\n  int result;\n  uint value;\n  uint *ptr;\n  uint flag;\n  uint value2;\n  \n  ptr = *data;\n  value2 = *ptr;\n  value = ptr[3];\n  if ((((value2 & 0xf) == 0) && ((value2 & 0x20) != 0)) && ((value & 0x20) != 0)) {\n    process_data_080069ec_case1(data);\n    return;\n  }\n  if (((value2 & 0xf) == 0) || ((flag = ptr[5] & 1, flag == 0 && ((value & 0x120) == 0)))) {\n    if (((value2 & 0x80) != 0) && ((value & 0x80) != 0)) {\n      process_data_080069ec_case2(data);\n      return;\n    }\n    if (((value2 & 0x40) != 0) && ((value & 0x40) != 0)) {\n      update_value(data);\n    }\n  }\n  else {\n    if (((value2 & 1) != 0) && ((value & 0x100) != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 1);\n    }\n    if (((value2 & 4) != 0) && (flag != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 2);\n    }\n    if (((value2 & 2) != 0) && (flag != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 4);\n    }\n    if (((value2 & 8) != 0) && (flag != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 8);\n    }\n    if (data[0xf] != (uint *)0x0) {\n      if (((value2 & 0x20) != 0) && ((value & 0x20) != 0)) {\n        process_data_080069ec_case1(data);\n      }\n      if ((((uint)data[0xf] & 8) == 0) && (((*data)[5] & 0x40) == 0)) {\n        FUNC_0800877c(data);\n        data[0xf] = (uint *)0x0;\n        return;\n      }\n      clear_flags(data);\n      ptr = *data;\n      if ((ptr[5] & 0x40) == 0) {\n        FUNC_0800877c(data);\n        return;\n      }\n      ptr[5] = ptr[5] & 0xffffffbf;\n      if (data[0xd] == (uint *)0x0) {\n        FUNC_0800877c(data);\n        return;\n      }\n      data[0xd][0xd] = (uint)&label_1;\n      result = initialize_data(data[0xd]);\n      if (result != 0) {\n        (*(function2 *)data[0xd][0xd])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_data_080069ec",
            "entrypoint": "0x080069ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080069ec": "process_data_080069ec",
                "LAB_08006b0c_1": "label_1",
                "clear_flags_080064b0": "clear_flags",
                "code": "function2",
                "iVar1": "result",
                "initialize_data_08004050": "initialize_data",
                "param_1": "data",
                "process_data_080064cc": "process_data_case2",
                "process_data_0800694c": "process_data_case1",
                "puVar3": "ptr",
                "uVar2": "value",
                "uVar4": "flag",
                "uVar5": "value2",
                "update_value_08006932": "update_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006b1c": {
            "additional_data": {
                "": {
                    "1": ""
                },
                "*(byte *)(param_1 + 0x39)": {
                    "1": "byte_value2",
                    "12": "byte2"
                },
                "*(byte *)(param_1 + 0x3a)": {
                    "1": "first_byte",
                    "12": "byte1"
                },
                "0x39": {
                    "1": "offset_b",
                    "2": "offset2"
                },
                "0x3a": {
                    "1": "offset_a",
                    "2": "offset1"
                },
                "FUN_08006b1c": {
                    "1": "merge_bytes",
                    "30": "combine_bytes"
                },
                "_39": {
                    "1": "offset1"
                },
                "_3a": {
                    "1": "offset2"
                },
                "byte_1": {
                    "1": "byte_at_offset"
                },
                "byte_2": {
                    "1": "byte_at_offset_minus_1"
                },
                "param_1": {
                    "1": "byte_array",
                    "16": "input",
                    "2": "base_address",
                    "3": "address",
                    "7": "offset"
                },
                "param_1 + 0x39": {
                    "1": "offset2"
                },
                "param_1 + 0x3a": {
                    "1": "address1"
                },
                "param_2": {
                    "1": "size"
                },
                "param_3": {
                    "1": "buffer"
                },
                "var_1": {
                    "2": "first_byte"
                },
                "var_2": {
                    "2": "second_byte"
                }
            },
            "called": [],
            "calling": [
                "FUN_080085b8",
                "FUN_080085dc"
            ],
            "code": "\nbyte combine_bytes_08006b1c(int input)\n\n{\n  return *(byte *)(input + 0x3a) | *(byte *)(input + 0x39);\n}\n\n",
            "current_name": "combine_bytes_08006b1c",
            "entrypoint": "0x08006b1c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006b1c": "combine_bytes_08006b1c",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006b28": {
            "additional_data": {
                "&": {
                    "1": "bitwise_and"
                },
                "((param_1 << 0x18) >> 0x1c) * 4": {
                    "1": "shifted_offset"
                },
                "(param_1 & 0xf)": {
                    "1": "bit_position",
                    "2": "bit_mask"
                },
                "(param_1 << 0x18) >> 0x1c": {
                    "1": "shifted_and_masked_value"
                },
                "(uint *)(param_2 + ((param_1 << 0x18) >> 0x1c) * 4)": {
                    "1": "target_pointer"
                },
                "*(uint *)(param_2 + ((param_1 << 0x18) >> 0x1c) * 4)": {
                    "1": "bit_location",
                    "2": "target_value"
                },
                "*(uint *)(param_2 + ((param_1 << 0x18) >> 0x1c) * 4) >> (param_1 & 0xf) & 1": {
                    "1": "selected_bit"
                },
                "*(uint *)(param_2 + shiftedValue * 4)": {
                    "1": "memory_value"
                },
                "0x18": {
                    "1": "left_shift"
                },
                "0x1c": {
                    "1": "right_shift"
                },
                "0xf": {
                    "2": "bit_mask"
                },
                "1": {
                    "1": "result"
                },
                "4": {
                    "1": "item_size"
                },
                ">>": {
                    "1": "right_shift"
                },
                "FUN_08006b28": {
                    "1": "read_bit",
                    "2": "extract_bit_from_memory",
                    "3": "extract_bit",
                    "6": "get_bit_value"
                },
                "bit_location >> (param_1 & 0xf) & 1": {
                    "1": "extracted_bit"
                },
                "memoryValue >> bitMask": {
                    "1": "extracted_bit"
                },
                "new_variable_name_1": {
                    "1": "shifted_value"
                },
                "new_variable_name_2": {
                    "1": "offset"
                },
                "new_variable_name_3": {
                    "1": "bit_value"
                },
                "param_1": {
                    "1": "array_index",
                    "2": "bit_position",
                    "3": "index",
                    "4": "data",
                    "6": "value",
                    "8": "input_value"
                },
                "param_1 & 0xf": {
                    "1": "bit_position",
                    "3": "bit_mask"
                },
                "param_1 << 0x18": {
                    "1": "shifted_data",
                    "2": "shifted_index"
                },
                "param_1 << 0x18 >> 0x1c": {
                    "1": "shifted_value"
                },
                "param_2": {
                    "1": "array_start",
                    "2": "memory_address",
                    "3": "array_address",
                    "9": "base_address"
                },
                "param_3": {
                    "1": "index"
                },
                "param_4": {
                    "1": "bit_mask"
                },
                "var_1": {
                    "1": "shift_amount"
                },
                "var_2": {
                    "1": "index"
                },
                "var_3": {
                    "1": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_080088e0",
                "FUN_08008a6c",
                "FUN_08008a24",
                "FUN_08008990"
            ],
            "code": "\nuint get_bit_value_08006b28(uint input_value,int base_address)\n\n{\n  return *(uint *)(base_address + ((input_value << 0x18) >> 0x1c) * 4) >> (input_value bitwise_and 0xf) bitwise_and 1;\n}\n\n",
            "current_name": "get_bit_value_08006b28",
            "entrypoint": "0x08006b28",
            "imported": false,
            "improved": true,
            "renaming": {
                "&": "bitwise_and",
                "FUN_08006b28": "get_bit_value_08006b28",
                "param_1": "input_value",
                "param_2": "base_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006b3e": {
            "additional_data": {
                "&*(uint *)(array + index * 4)": {
                    "1": "array_value"
                },
                "*(uint *)(param_2 + uVar1 * 4)": {
                    "1": "element"
                },
                "1 << (param_1 & 0xf)": {
                    "1": "bit_mask"
                },
                "FUN_08006b3e": {
                    "1": "update_bit_value",
                    "11": "set_bit_in_array",
                    "2": "set_bit_in_memory",
                    "3": "update_bit_in_array"
                },
                "param_1": {
                    "1": "data_to_shift",
                    "2": "index",
                    "4": "input_value",
                    "6": "value",
                    "7": "bit_index",
                    "8": "bit_position"
                },
                "param_2": {
                    "1": "array_addr",
                    "12": "array",
                    "2": "memory_address",
                    "4": "array_pointer",
                    "5": "array_address"
                },
                "uVar1": {
                    "1": "shifted_position",
                    "2": "shift_amount",
                    "3": "array_index",
                    "4": "index"
                }
            },
            "called": [],
            "calling": [
                "FUN_080088e0",
                "FUN_08008990"
            ],
            "code": "\nvoid set_bit_in_array_08006b3e(uint bit_position,int array)\n\n{\n  uint shifted_index;\n  \n  shifted_index = (bit_position << 0x18) >> 0x1c;\n  *(uint *)(array + shifted_index * 4) = *(uint *)(array + shifted_index * 4) | 1 << (bit_position & 0xf);\n  return;\n}\n\n",
            "current_name": "set_bit_in_array_08006b3e",
            "entrypoint": "0x08006b3e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006b3e": "set_bit_in_array_08006b3e",
                "param_1": "bit_position",
                "param_2": "array",
                "uVar1": "shifted_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006b5c": {
            "additional_data": {
                "*(uint *)(param_2 + uVar1 * 4)": {
                    "1": "array[array_index]"
                },
                "0x1c": {
                    "1": "4"
                },
                "FUN_08006b5c": {
                    "1": "set_bit_to_zero_at_position",
                    "11": "update_bit_in_array",
                    "2": "update_bit_value",
                    "3": "set_bit_to_zero",
                    "4": "update_bit"
                },
                "param_1": {
                    "1": "value_to_update",
                    "13": "bit_position",
                    "2": "value",
                    "3": "index",
                    "6": "bit_index"
                },
                "param_2": {
                    "1": "memory_address",
                    "10": "array",
                    "13": "array_address",
                    "2": "array_ptr",
                    "3": "array_pointer"
                },
                "uVar1": {
                    "1": "shifted_position",
                    "2": "target_index",
                    "3": "array_index",
                    "6": "index"
                }
            },
            "called": [],
            "calling": [
                "FUN_08008990"
            ],
            "code": "\nvoid update_bit_in_array_08006b5c(uint bit_position,int array_address)\n\n{\n  uint index;\n  \n  index = (bit_position << 0x18) >> 0x1c;\n  *(uint *)(array_address + index * 4) = *(uint *)(array_address + index * 4) & ~(1 << (bit_position & 0xf));\n  return;\n}\n\n",
            "current_name": "update_bit_in_array_08006b5c",
            "entrypoint": "0x08006b5c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006b5c": "update_bit_in_array_08006b5c",
                "param_1": "bit_position",
                "param_2": "array_address",
                "uVar1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006b7c": {
            "additional_data": {
                "0": {
                    "1": "memory_address_1",
                    "2": "addr_1",
                    "4": "memory_address_0",
                    "8": "address_0"
                },
                "0x40010800": {
                    "1": "address1"
                },
                "0x40010c00": {
                    "1": "mem_address1"
                },
                "0x40011000": {
                    "1": "mem_address2"
                },
                "0x40011400": {
                    "1": "mem_address3"
                },
                "0x40011800": {
                    "1": "mem_address4"
                },
                "1": {
                    "1": "addr_1",
                    "2": "addr_2",
                    "4": "memory_address_1",
                    "8": "address_1"
                },
                "2": {
                    "1": "address_two",
                    "2": "addr_3",
                    "4": "memory_address_2",
                    "8": "address_2"
                },
                "3": {
                    "1": "addr_3",
                    "2": "addr_4",
                    "4": "memory_address_3",
                    "8": "address_3"
                },
                "4": {
                    "1": "memory_address_5",
                    "2": "address4",
                    "4": "memory_address_4",
                    "8": "address_4"
                },
                "FUN_08006b7c": {
                    "1": "map_value_to_address",
                    "16": "get_memory_address",
                    "2": "get_address_from_param",
                    "7": "map_param_to_address"
                },
                "case 0": {
                    "1": "address0"
                },
                "case 1": {
                    "1": "address1"
                },
                "case 2": {
                    "1": "address2"
                },
                "case 3": {
                    "1": "address3"
                },
                "case 4": {
                    "1": "address4"
                },
                "param_1": {
                    "1": "input_param",
                    "4": "index",
                    "5": "value",
                    "7": "input",
                    "8": "param"
                },
                "return 0x40010800": {
                    "1": "return_address1"
                },
                "return 0x40010c00": {
                    "1": "return_address2"
                },
                "return 0x40011000": {
                    "1": "return_address3"
                },
                "return 0x40011400": {
                    "1": "return_address4"
                },
                "return 0x40011800": {
                    "1": "return_address5"
                }
            },
            "called": [],
            "calling": [
                "FUN_08008a6c",
                "FUN_08008a24"
            ],
            "code": "\nundefined4 get_memory_address_08006b7c(undefined4 param)\n\n{\n  switch(param) {\n  case 0:\n    return 0x40010800;\n  case 1:\n    return 0x40010c00;\n  case 2:\n    return 0x40011000;\n  case 3:\n    return 0x40011400;\n  case 4:\n    return 0x40011800;\n  default:\n    return 0;\n  }\n}\n\n",
            "current_name": "get_memory_address_08006b7c",
            "entrypoint": "0x08006b7c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006b7c": "get_memory_address_08006b7c",
                "param_1": "param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006bb8": {
            "additional_data": {
                "0": {
                    "1": "option_0"
                },
                "1": {
                    "1": "option_1"
                },
                "2": {
                    "1": "option_2"
                },
                "3": {
                    "1": "option_3"
                },
                "4": {
                    "1": "option_4"
                },
                "FUN_08006bb8": {
                    "1": "set_flag_and_return_value",
                    "2": "set_register_value",
                    "3": "set_memory_permissions",
                    "4": "set_flag_and_return_address",
                    "5": "configure_peripheral"
                },
                "_DAT_40021018": {
                    "1": "device_info",
                    "2": "data_register"
                },
                "param_1": {
                    "1": "config_code",
                    "2": "peripheral_id",
                    "3": "permission_index",
                    "4": "register_index"
                },
                "uVar1": {
                    "1": "result",
                    "2": "memory_address",
                    "3": "new_address",
                    "4": "return_address",
                    "5": "return_value",
                    "7": "address"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006ca8",
                "FUN_08007258",
                "FUN_08006e68",
                "FUN_080077b0",
                "FUN_08008078"
            ],
            "code": "\n\n\nundefined4 configure_peripheral_08006bb8(undefined4 register_index)\n\n{\n  undefined4 address;\n  \n  switch(register_index) {\n  case 0:\n    _DAT_40021018 = _DAT_40021018 | 4;\n    address = 0x40010800;\n    break;\n  case 1:\n    _DAT_40021018 = _DAT_40021018 | 8;\n    address = 0x40010c00;\n    break;\n  case 2:\n    _DAT_40021018 = _DAT_40021018 | 0x10;\n    address = 0x40011000;\n    break;\n  case 3:\n    _DAT_40021018 = _DAT_40021018 | 0x20;\n    address = 0x40011400;\n    break;\n  case 4:\n    _DAT_40021018 = _DAT_40021018 | 0x40;\n    address = 0x40011800;\n    break;\n  default:\n    address = 0;\n  }\n  return address;\n}\n\n",
            "current_name": "configure_peripheral_08006bb8",
            "entrypoint": "0x08006bb8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006bb8": "configure_peripheral_08006bb8",
                "param_1": "register_index",
                "uVar1": "address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006c60": {
            "additional_data": {
                "FUN_08006c60": {
                    "1": "get_value_index_and_shift",
                    "2": "calculate_value",
                    "4": "get_index_from_value",
                    "7": "get_value_index",
                    "9": "get_shifted_value"
                },
                "iVar1": {
                    "12": "index",
                    "15": "value_index",
                    "2": "index_value"
                },
                "param_1": {
                    "1": "input_param",
                    "15": "value",
                    "3": "input1",
                    "4": "value1"
                },
                "param_2": {
                    "1": "data_1",
                    "2": "value2",
                    "3": "value_2"
                },
                "param_3": {
                    "1": "array_start",
                    "2": "data_1",
                    "3": "value_3",
                    "5": "param3"
                },
                "param_4": {
                    "1": "end_index",
                    "2": "data_2",
                    "3": "input4",
                    "4": "param_4",
                    "5": "param4"
                },
                "uVar2": {
                    "1": "result",
                    "24": "shifted_value",
                    "4": "shifted_index"
                }
            },
            "called": [
                "FUN_08007376"
            ],
            "calling": [
                "FUN_08006d80"
            ],
            "code": "\nuint get_shifted_value_08006c60(undefined4 value,undefined4 input2,undefined4 param3,undefined4 param4)\n\n{\n  int value_index;\n  uint shifted_value;\n  \n  value_index = get_value_index_08007376(value,&DAT_0800a5b8,param3,param4,param4);\n  shifted_value = (uint)(value_index << 0xc) >> 0x1b;\n  if (0x10 < shifted_value - 1) {\n    shifted_value = 0;\n  }\n  return shifted_value;\n}\n\n",
            "current_name": "get_shifted_value_08006c60",
            "entrypoint": "0x08006c60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006c60": "get_shifted_value_08006c60",
                "iVar1": "value_index",
                "param_1": "value",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar2": "shifted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006c7c": {
            "additional_data": {
                "FUN_08006c7c": {
                    "1": "get_result_from_value_index",
                    "2": "get_output_value",
                    "3": "get_result",
                    "9": "get_shifted_value"
                },
                "iVar1": {
                    "1": "result",
                    "24": "value_index",
                    "4": "index"
                },
                "param_1": {
                    "1": "input1",
                    "10": "value",
                    "12": "input_value",
                    "2": "input_param"
                },
                "param_2": {
                    "1": "array_param",
                    "2": "value2",
                    "4": "index",
                    "5": "param_2"
                },
                "param_3": {
                    "1": "start",
                    "2": "value3",
                    "3": "index",
                    "4": "param_3"
                },
                "param_4": {
                    "1": "parameter2",
                    "2": "value4",
                    "3": "size",
                    "6": "param_4"
                },
                "uVar2": {
                    "1": "shifted_index",
                    "2": "shifted_bits",
                    "26": "shifted_value"
                }
            },
            "called": [
                "FUN_08007376"
            ],
            "calling": [
                "FUN_080071e4",
                "FUN_08007118"
            ],
            "code": "\nundefined4 get_shifted_value_08006c7c(undefined4 input_value,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int value_index;\n  uint shifted_value;\n  \n  value_index = get_value_index_08007376(input_value,&DAT_0800a6cc,param_3,param_4,param_4);\n  shifted_value = (uint)(value_index << 0xc) >> 0x1b;\n  if (shifted_value == 3) {\n    return 8;\n  }\n  if (shifted_value != 4) {\n    if (shifted_value != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "current_name": "get_shifted_value_08006c7c",
            "entrypoint": "0x08006c7c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006c7c": "get_shifted_value_08006c7c",
                "iVar1": "value_index",
                "param_1": "input_value",
                "uVar2": "shifted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006ca8": {
            "additional_data": {
                "DAT_20000014": {
                    "1": "data_value"
                },
                "FUN_08006ca8": {
                    "1": "configure_and_update_peripheral",
                    "23": "configure_peripheral",
                    "3": "configure_peripheral_and_update_registers"
                },
                "iVar3": {
                    "1": "array_value",
                    "2": "value",
                    "3": "peripheral_type",
                    "4": "peripheral_value",
                    "6": "current_value",
                    "7": "input_value"
                },
                "local_10": {
                    "1": "register_val2",
                    "2": "value_2",
                    "4": "offset"
                },
                "local_14": {
                    "1": "bitmask_size",
                    "2": "value1",
                    "4": "register_value1",
                    "7": "register_value"
                },
                "local_18": {
                    "1": "mask_value",
                    "11": "bit_mask",
                    "14": "bitmask",
                    "2": "peripheral_mask"
                },
                "param_1": {
                    "1": "register_value",
                    "4": "input",
                    "5": "data",
                    "6": "input_data"
                },
                "param_2": {
                    "1": "other_parameter",
                    "2": "config_param",
                    "5": "param",
                    "7": "config_value"
                },
                "uVar1": {
                    "1": "result",
                    "10": "peripheral_config",
                    "2": "configured_value",
                    "3": "peripheral_result",
                    "4": "peripheral_configuration",
                    "7": "configured_peripheral"
                },
                "uVar2": {
                    "1": "updated_value",
                    "2": "base_address",
                    "4": "peripheral_flags",
                    "6": "peripheral_config"
                }
            },
            "called": [
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "calling": [
                "FUN_08003bd8"
            ],
            "code": "\n\n\nvoid configure_peripheral_08006ca8(int *input_data,undefined4 config_value)\n\n{\n  undefined4 peripheral_config;\n  uint peripheral_config;\n  int input_value;\n  uint bitmask;\n  undefined4 register_value;\n  undefined4 register_value2;\n  \n  input_value = *input_data;\n  if (input_value == 0x40012400) {\n    peripheral_config = _DAT_40021018 | 0x200;\n    input_value = 0x200;\n    _DAT_40021018 = peripheral_config;\n  }\n  else {\n    peripheral_config = 0x40012800;\n    if (input_value == 0x40012800) {\n      peripheral_config = _DAT_40021018 | 0x400;\n      input_value = 0x400;\n      _DAT_40021018 = peripheral_config;\n    }\n  }\n  peripheral_config = configure_peripheral_08006ca8_08006bb8((uint)((int)(char)DAT_20000014 << 0x18) >> 0x1c,config_value,peripheral_config,input_value);\n  bitmask = 1 << (DAT_20000014 & 0xf) & 0xffff;\n  register_value = 3;\n  register_value2 = 0;\n  update_registers_080040e8(peripheral_config,&bitmask);\n  return;\n}\n\n",
            "current_name": "configure_peripheral_08006ca8",
            "entrypoint": "0x08006ca8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006ca8": "configure_peripheral_08006ca8",
                "iVar3": "input_value",
                "local_10": "register_value2",
                "local_14": "register_value",
                "local_18": "bitmask",
                "param_1": "input_data",
                "param_2": "config_value",
                "uVar1": "peripheral_config",
                "uVar2": "peripheral_config"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006d24": {
            "additional_data": {
                "*param_1": {
                    "1": "status_value",
                    "3": "value"
                },
                "FUN_08006d24": {
                    "1": "configure_peripheral",
                    "2": "update_data",
                    "3": "update_registers",
                    "7": "update_control_registers"
                },
                "_DAT_4002100c": {
                    "1": "register_value",
                    "2": "control_register1",
                    "3": "register_a",
                    "8": "register1"
                },
                "_DAT_40021018": {
                    "1": "register2_value",
                    "2": "control_register2",
                    "3": "register_b",
                    "8": "register2"
                },
                "param_1": {
                    "1": "register_value",
                    "2": "settings",
                    "3": "memory_address",
                    "4": "address"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003ce8"
            ],
            "code": "\n\n\nvoid update_control_registers_08006d24(int *address)\n\n{\n  if (*address != 0x40012400) {\n    if (*address == 0x40012800) {\n      _DAT_4002100c = _DAT_4002100c & 0xfffffbff;\n      _DAT_40021018 = _DAT_40021018 & 0xfffffbff;\n    }\n    return;\n  }\n  _DAT_4002100c = _DAT_4002100c & 0xfffffdff;\n  _DAT_40021018 = _DAT_40021018 & 0xfffffdff;\n  return;\n}\n\n",
            "current_name": "update_control_registers_08006d24",
            "entrypoint": "0x08006d24",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006d24": "update_control_registers_08006d24",
                "param_1": "address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006d80": {
            "additional_data": {
                "DAT_0800a5b8": {
                    "1": "default_data"
                },
                "DAT_20000014": {
                    "1": "input_data",
                    "2": "config_data",
                    "3": "data"
                },
                "FUN_08006d80": {
                    "1": "process_and_initialize_data",
                    "3": "process_and_update_data",
                    "7": "process_data",
                    "8": "process_peripheral_data"
                },
                "configure_peripheral_08003bd8": {
                    "1": "config_peripheral",
                    "4": "configure_peripheral"
                },
                "fill_memory_080091c6": {
                    "3": "fill_memory"
                },
                "find_value_or_default_08007320": {
                    "3": "find_value_or_default"
                },
                "get_offset_value_080038dc": {
                    "1": "get_offset_value2",
                    "2": "get_offset_value",
                    "3": "get_offset_value_2"
                },
                "get_offset_value_08003a1c": {
                    "6": "get_offset_value"
                },
                "get_shifted_value_08006c60": {
                    "6": "get_shifted_value"
                },
                "iVar1": {
                    "1": "result_code",
                    "3": "result",
                    "4": "status"
                },
                "initialize_data_processing_08003aa0": {
                    "1": "init_data_processing",
                    "5": "initialize_data_processing"
                },
                "local_10": {
                    "1": "var1_8",
                    "3": "var_8",
                    "4": "var6",
                    "8": "var8"
                },
                "local_1c": {
                    "1": "var1_7",
                    "3": "var_7",
                    "4": "var5",
                    "9": "var7"
                },
                "local_20": {
                    "1": "variable10",
                    "3": "var_6",
                    "4": "var8",
                    "8": "var6"
                },
                "local_24": {
                    "1": "register_config4",
                    "2": "temp_4",
                    "3": "var_5",
                    "5": "var4",
                    "9": "var5"
                },
                "local_28": {
                    "1": "temp_8",
                    "3": "var_4",
                    "4": "var7",
                    "8": "var4"
                },
                "local_2c": {
                    "1": "unused2",
                    "14": "var3",
                    "2": "variable3",
                    "4": "var_3"
                },
                "local_30": {
                    "1": "register_config2",
                    "14": "var2",
                    "2": "variable2",
                    "4": "var_2"
                },
                "local_34": {
                    "1": "value2",
                    "15": "var1",
                    "2": "variable1",
                    "4": "var_1"
                },
                "local_38": {
                    "1": "peripheral_value",
                    "12": "found_value",
                    "3": "value_or_default",
                    "9": "value"
                },
                "local_3c": {
                    "1": "status_value",
                    "10": "flag_2",
                    "16": "flag2"
                },
                "local_40": {
                    "1": "flag_value",
                    "10": "flag_1",
                    "16": "flag1"
                },
                "local_44": {
                    "1": "shift_value",
                    "30": "shifted_value"
                },
                "local_46": {
                    "1": "processed_data",
                    "22": "result",
                    "7": "output_value"
                },
                "param_1": {
                    "1": "input_param",
                    "22": "input_value",
                    "6": "input_data"
                },
                "process_data_0800376c": {
                    "1": "process_data_func_2",
                    "2": "process_data"
                },
                "process_data_08003e20": {
                    "1": "process_data_func",
                    "5": "process_data"
                },
                "uVar2": {
                    "1": "offset_value_check",
                    "2": "offset_value"
                },
                "update_data_08003ce8": {
                    "6": "update_data"
                },
                "update_data_status_08003de4": {
                    "6": "update_data_status"
                },
                "update_registers_080038e4": {
                    "6": "update_registers"
                }
            },
            "called": [
                "FUN_08003ce8",
                "FUN_08003de4",
                "FUN_08007320",
                "FUN_08003a1c",
                "FUN_08003e20",
                "FUN_080038e4",
                "FUN_080091c6",
                "FUN_08003aa0",
                "FUN_08003bd8",
                "FUN_0800376c",
                "FUN_080038dc",
                "FUN_08006c60"
            ],
            "calling": [
                "FUN_08008880"
            ],
            "code": "\nundefined2 process_peripheral_data_08006d80(undefined4 input_value)\n\n{\n  int status;\n  uint offset_value;\n  undefined2 result;\n  uint shifted_value;\n  undefined4 flag1;\n  undefined4 flag2;\n  int found_value;\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var4;\n  undefined4 var5;\n  undefined4 var6;\n  undefined4 var7;\n  undefined4 var8;\n  \n  fill_memory(&found_value,0,0x30);\n  shifted_value = 0;\n  flag1 = 0;\n  flag2 = 0;\n  result = 0;\n  found_value = find_value_or_default(input_value,&DAT_0800a5b8);\n  if (found_value == 0) {\n    result = 0;\n  }\n  else {\n    var1 = 0;\n    var2 = 0;\n    var3 = 0;\n    var5 = 0;\n    var7 = 0xe0000;\n    var8 = 0;\n    var4 = 1;\n    var6 = 0;\n    DAT_20000014 = (undefined)input_value;\n    status = configure_peripheral(&found_value);\n    if (status == 0) {\n      shifted_value = get_shifted_value(input_value);\n      if (shifted_value < 0x12) {\n        flag1 = 1;\n        flag2 = 2;\n        status = update_registers(&found_value,&shifted_value);\n        if (status == 0) {\n          status = process_data(&found_value);\n          if (status == 0) {\n            status = initialize_data_processing(&found_value);\n            if (status == 0) {\n              status = process_data(&found_value,10);\n              if (status == 0) {\n                offset_value = get_offset_value(&found_value);\n                if ((offset_value & 0x200) != 0) {\n                  result = get_offset_value_2(&found_value);\n                }\n                status = update_data_status(&found_value);\n                if (status == 0) {\n                  status = update_data(&found_value);\n                  if (status != 0) {\n                    result = 0;\n                  }\n                }\n                else {\n                  result = 0;\n                }\n              }\n              else {\n                result = 0;\n              }\n            }\n            else {\n              result = 0;\n            }\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "process_peripheral_data_08006d80",
            "entrypoint": "0x08006d80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006d80": "process_peripheral_data_08006d80",
                "configure_peripheral_08003bd8": "configure_peripheral",
                "fill_memory_080091c6": "fill_memory",
                "find_value_or_default_08007320": "find_value_or_default",
                "get_offset_value_080038dc": "get_offset_value_2",
                "get_offset_value_08003a1c": "get_offset_value",
                "get_shifted_value_08006c60": "get_shifted_value",
                "iVar1": "status",
                "initialize_data_processing_08003aa0": "initialize_data_processing",
                "local_10": "var8",
                "local_1c": "var7",
                "local_20": "var6",
                "local_24": "var5",
                "local_28": "var4",
                "local_2c": "var3",
                "local_30": "var2",
                "local_34": "var1",
                "local_38": "found_value",
                "local_3c": "flag2",
                "local_40": "flag1",
                "local_44": "shifted_value",
                "local_46": "result",
                "param_1": "input_value",
                "process_data_0800376c": "process_data",
                "process_data_08003e20": "process_data",
                "uVar2": "offset_value",
                "update_data_08003ce8": "update_data",
                "update_data_status_08003de4": "update_data_status",
                "update_registers_080038e4": "update_registers"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006e68": {
            "additional_data": {
                "FUN_08006e68": {
                    "1": "configure_peripherals_and_update_registers",
                    "15": "configure_peripheral",
                    "2": "initialize_peripherals",
                    "8": "initialize_peripheral"
                },
                "iVar1": {
                    "27": "value_index",
                    "4": "index"
                },
                "local_14": {
                    "1": "constant3",
                    "2": "variable3",
                    "3": "value2",
                    "4": "var3",
                    "5": "local_var3"
                },
                "local_18": {
                    "1": "variable_18",
                    "2": "flag2",
                    "3": "value2",
                    "4": "var2",
                    "5": "local_var2"
                },
                "local_1c": {
                    "1": "data_flag_1",
                    "2": "variable1",
                    "3": "flag1",
                    "4": "var1",
                    "6": "local_var1"
                },
                "local_20": {
                    "1": "flag_mask",
                    "3": "data_flags",
                    "7": "bitmask",
                    "8": "bit_mask"
                },
                "param_1": {
                    "1": "input_param",
                    "13": "param",
                    "3": "parameter",
                    "5": "input_value"
                },
                "uVar2": {
                    "1": "configured_periph",
                    "14": "peripheral_config"
                }
            },
            "called": [
                "FUN_08007438",
                "FUN_080040e8",
                "FUN_08007376",
                "FUN_08006bb8"
            ],
            "calling": [
                "FUN_08006092"
            ],
            "code": "\n\n\nvoid configure_peripheral_08006e68(undefined4 param)\n\n{\n  int value_index;\n  undefined4 configured_peripheral;\n  uint flag;\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined4 local_var3;\n  \n  value_index = get_value_index_08007376((int)(char)DAT_20000014,&DAT_0800a6cc);\n  update_data_flags_08007438(param);\n  configured_peripheral = configure_peripheral_08006e68_08006bb8((uint)((int)(char)DAT_20000014 << 0x18) >> 0x1c);\n  local_var1 = 2;\n  local_var2 = 0;\n  local_var3 = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  switch((uint)(value_index << 0x11) >> 0x19) {\n  case 1:\n    _DAT_40010004 = _DAT_40010004 | 0x7000001;\n    break;\n  case 2:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n    break;\n  case 3:\n    _DAT_40010004 = _DAT_40010004 | 0x7000002;\n    break;\n  case 4:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n    break;\n  case 5:\n    _DAT_40010004 = _DAT_40010004 | 0x7000004;\n    break;\n  case 6:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n    break;\n  case 7:\n    _DAT_40010004 = _DAT_40010004 | 0x7000008;\n    break;\n  case 8:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n    break;\n  case 9:\n    _DAT_40010004 = _DAT_40010004 | 0x7000030;\n    break;\n  case 10:\n    _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n    break;\n  case 0xb:\n    _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n    break;\n  case 0xc:\n    _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n    break;\n  case 0xd:\n    _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n    break;\n  case 0xe:\n    _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n    break;\n  case 0xf:\n    _DAT_40010004 = _DAT_40010004 | 0x7000300;\n    break;\n  case 0x10:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n    break;\n  case 0x11:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n    break;\n  case 0x12:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n    break;\n  case 0x13:\n    _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n    break;\n  case 0x14:\n    _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n    break;\n  case 0x15:\n    _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n    break;\n  case 0x16:\n    _DAT_40010004 = _DAT_40010004 | 0x7001000;\n    break;\n  case 0x17:\n    _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n    break;\n  case 0x1b:\n    _DAT_40010004 = _DAT_40010004 | 0x7008000;\n    break;\n  case 0x1c:\n    _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n    break;\n  case 0x21:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n    break;\n  case 0x22:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n    break;\n  case 0x23:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n    break;\n  case 0x24:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  flag = 1 << (DAT_20000014 & 0xf) & 0xffff;\n  update_registers_080040e8(configured_peripheral,&flag);\n  return;\n}\n\n",
            "current_name": "configure_peripheral_08006e68",
            "entrypoint": "0x08006e68",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006e68": "configure_peripheral_08006e68",
                "iVar1": "value_index",
                "local_14": "local_var3",
                "local_18": "local_var2",
                "local_1c": "local_var1",
                "local_20": "flag",
                "param_1": "param",
                "uVar2": "configured_peripheral"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007110": {
            "additional_data": {
                "FUN_08007110": {
                    "1": "configure_and_update",
                    "10": "initialize_configuration",
                    "20": "update_configuration"
                },
                "update_configuration_080074e0": {
                    "28": "update_configuration"
                }
            },
            "called": [
                "FUN_080074e0"
            ],
            "calling": [
                "FUN_08005e2e"
            ],
            "code": "\nvoid update_configuration_08007110(void)\n\n{\n  update_configuration_08007110();\n  return;\n}\n\n",
            "current_name": "update_configuration_08007110",
            "entrypoint": "0x08007110",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007110": "update_configuration_08007110",
                "update_configuration_080074e0": "update_configuration"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007118": {
            "additional_data": {
                "DAT_0800a6cc": {
                    "1": "data_arr",
                    "2": "some_data",
                    "5": "data",
                    "6": "data_array"
                },
                "DAT_20000014": {
                    "1": "value_index",
                    "2": "peripheral_value",
                    "4": "peripheral_data"
                },
                "FUN_08007118": {
                    "1": "initialize_memory",
                    "10": "initialize_data",
                    "12": "initialize_and_update_data",
                    "4": "process_data"
                },
                "calculate_shifted_data_080075dc": {
                    "8": "calculate_shifted_data"
                },
                "fill_memory_080091c6": {
                    "1": "initialize_memory",
                    "6": "fill_memory"
                },
                "find_value_or_default_08007320": {
                    "1": "find_default_value",
                    "2": "find_value",
                    "5": "find_value_or_default"
                },
                "get_shifted_value_08006c7c": {
                    "9": "get_shifted_value"
                },
                "get_value_index_08007376": {
                    "9": "get_value_index"
                },
                "iVar2": {
                    "1": "peripheral_status",
                    "11": "shifted_value",
                    "2": "shifted_value_result"
                },
                "iVar3": {
                    "1": "update_data_result",
                    "11": "update_result",
                    "2": "update_status"
                },
                "initialize_peripheral_08006092": {
                    "9": "initialize_peripheral"
                },
                "local_1b": {
                    "1": "temporary_flag",
                    "2": "temp_flag",
                    "3": "flag"
                },
                "local_44": {
                    "1": "unused_value3",
                    "2": "var_k"
                },
                "local_48": {
                    "1": "update_value3",
                    "2": "var_48"
                },
                "local_4c": {
                    "1": "temp9",
                    "2": "var_i",
                    "4": "updated_count"
                },
                "local_50": {
                    "1": "variable1",
                    "2": "var8"
                },
                "local_54": {
                    "1": "result_2",
                    "2": "result",
                    "3": "shifted_data_divided",
                    "6": "shifted_value",
                    "9": "shifted_data"
                },
                "local_58": {
                    "1": "result",
                    "2": "found_value",
                    "3": "value_or_default",
                    "6": "memory",
                    "8": "value"
                },
                "local_5c": {
                    "1": "size_7",
                    "2": "value_7",
                    "3": "value7"
                },
                "local_60": {
                    "1": "value_f",
                    "2": "var_f",
                    "3": "value6"
                },
                "local_64": {
                    "1": "var_5",
                    "2": "value_5",
                    "3": "var5"
                },
                "local_68": {
                    "1": "temp4",
                    "2": "var_d",
                    "3": "value4"
                },
                "local_6c": {
                    "1": "shift_3",
                    "2": "value_3",
                    "3": "value3"
                },
                "local_70": {
                    "1": "shift_2",
                    "2": "value_2",
                    "3": "var2"
                },
                "local_74": {
                    "1": "var_1",
                    "2": "data_1",
                    "3": "value1"
                },
                "param_1": {
                    "1": "input_data",
                    "14": "input_value",
                    "3": "value",
                    "5": "data",
                    "6": "input_param"
                },
                "param_2": {
                    "1": "shift_count",
                    "2": "division_factor",
                    "20": "divisor",
                    "3": "divider"
                },
                "param_3": {
                    "1": "parameter",
                    "3": "value",
                    "4": "size",
                    "5": "offset"
                },
                "param_4": {
                    "1": "value_2",
                    "2": "value",
                    "4": "param_4",
                    "7": "param"
                },
                "param_5": {
                    "1": "flag_value",
                    "22": "flag",
                    "5": "condition"
                },
                "uVar1": {
                    "1": "value_index",
                    "11": "shifted_data",
                    "2": "shifted_value"
                },
                "update_and_set_bit_08006390": {
                    "1": "set_bit",
                    "8": "update_and_set_bit"
                },
                "update_and_set_flags_0800643c": {
                    "1": "set_flags",
                    "8": "update_and_set_flags"
                },
                "update_data_08006186": {
                    "9": "update_data"
                }
            },
            "called": [
                "FUN_0800643c",
                "FUN_080075dc",
                "FUN_08006390",
                "FUN_08007320",
                "FUN_08006092",
                "FUN_080091c6",
                "FUN_08006186",
                "FUN_08007376",
                "FUN_08006c7c"
            ],
            "calling": [
                "FUN_080088e0"
            ],
            "code": "\nvoid initialize_and_update_data_08007118(undefined4 input_value,uint divisor,int count,undefined4 param,char flag)\n\n{\n  uint shifted_data;\n  int shifted_value;\n  int update_result;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  undefined4 value5;\n  undefined4 value6;\n  undefined4 value7;\n  int value;\n  int shifted_data;\n  undefined4 value8;\n  int updated_count;\n  undefined4 var_48;\n  undefined4 var_44;\n  undefined flag;\n  \n  fill_memory(&value,0,0x40);\n  value1 = 0;\n  value2 = 0;\n  value3 = 0;\n  value4 = 0;\n  value5 = 0;\n  value6 = 0;\n  value7 = 0;\n  value = find_value_or_default(input_value,&DAT_0800a6cc);\n  if (value != 0) {\n    shifted_data = calculate_shifted_data();\n    shifted_data = shifted_data / divisor - 1;\n    updated_count = count + -1;\n    var_48 = 0;\n    value8 = 0;\n    var_44 = 0;\n    flag = 0;\n    if (flag == '\\x01') {\n      DAT_20000014 = (undefined)input_value;\n      shifted_value = initialize_peripheral(&value);\n      if (shifted_value != 0) {\n        return;\n      }\n    }\n    shifted_value = get_shifted_value(input_value);\n    if ((((shifted_value == 0) || (shifted_value == 4)) || (shifted_value == 8)) || ((shifted_value == 0xc || (shifted_value == 0x18)))) {\n      value1 = 0x60;\n      value3 = 0;\n      value5 = 0;\n      value4 = 0;\n      value7 = 0;\n      value6 = 0;\n      value2 = param;\n      update_result = update_data(&value,&value1,shifted_value);\n      if (update_result == 0) {\n        shifted_data = get_value_index(input_value,&DAT_0800a6cc);\n        if ((shifted_data & 0x100000) == 0) {\n          update_and_set_bit(&value,shifted_value);\n        }\n        else {\n          update_and_set_flags(&value,shifted_value);\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "current_name": "initialize_and_update_data_08007118",
            "entrypoint": "0x08007118",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007118": "initialize_and_update_data_08007118",
                "calculate_shifted_data_080075dc": "calculate_shifted_data",
                "fill_memory_080091c6": "fill_memory",
                "find_value_or_default_08007320": "find_value_or_default",
                "get_shifted_value_08006c7c": "get_shifted_value",
                "get_value_index_08007376": "get_value_index",
                "iVar2": "shifted_value",
                "iVar3": "update_result",
                "initialize_peripheral_08006092": "initialize_peripheral",
                "local_1b": "flag",
                "local_44": "var_44",
                "local_48": "var_48",
                "local_4c": "updated_count",
                "local_50": "value8",
                "local_54": "shifted_data",
                "local_58": "value",
                "local_5c": "value7",
                "local_60": "value6",
                "local_64": "value5",
                "local_68": "value4",
                "local_6c": "value3",
                "local_70": "value2",
                "local_74": "value1",
                "param_1": "input_value",
                "param_2": "divisor",
                "param_3": "count",
                "param_4": "param",
                "param_5": "flag",
                "uVar1": "shifted_data",
                "update_and_set_bit_08006390": "update_and_set_bit",
                "update_and_set_flags_0800643c": "update_and_set_flags",
                "update_data_08006186": "update_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080071e4": {
            "additional_data": {
                "FUN_080071e4": {
                    "1": "update_config_values",
                    "19": "update_configuration",
                    "2": "process_data",
                    "3": "process_configuration"
                },
                "find_value_or_default_08007320": {
                    "3": "find_default_value",
                    "4": "find_value_or_default"
                },
                "get_shifted_value_08006c7c": {
                    "7": "get_shifted_value"
                },
                "get_value_index_08007376": {
                    "7": "get_value_index"
                },
                "iVar1": {
                    "17": "shifted_value"
                },
                "local_50": {
                    "1": "found_values",
                    "2": "config_values",
                    "22": "values",
                    "6": "values_array"
                },
                "param_1": {
                    "1": "parameter",
                    "11": "input_param",
                    "2": "input",
                    "3": "input_parameter",
                    "4": "input_value",
                    "7": "input_data"
                },
                "uVar2": {
                    "16": "value_index"
                },
                "update_configuration_08005e2e": {
                    "1": "apply_updated_configuration",
                    "2": "update_configuration",
                    "4": "apply_configuration"
                },
                "update_flags_080063c0": {
                    "7": "update_flags"
                },
                "update_values_08006460": {
                    "7": "update_values"
                }
            },
            "called": [
                "FUN_08007320",
                "FUN_08005e2e",
                "FUN_080063c0",
                "FUN_08007376",
                "FUN_08006c7c",
                "FUN_08006460"
            ],
            "calling": [
                "FUN_08008990"
            ],
            "code": "\nvoid update_configuration_080071e4(undefined4 input_param)\n\n{\n  int shifted_value;\n  uint value_index;\n  int values [17];\n  \n  values[0] = find_value_or_default(input_param,&DAT_0800a6cc);\n  if ((values[0] != 0) &&\n     ((((shifted_value = get_shifted_value(input_param), shifted_value == 0 || (shifted_value == 4)) || (shifted_value == 8)) ||\n      ((shifted_value == 0xc || (shifted_value == 0x18)))))) {\n    value_index = get_value_index(input_param,&DAT_0800a6cc);\n    if ((value_index & 0x100000) == 0) {\n      update_flags(values,shifted_value);\n    }\n    else {\n      update_values(values,shifted_value);\n    }\n    apply_configuration(values);\n  }\n  return;\n}\n\n",
            "current_name": "update_configuration_080071e4",
            "entrypoint": "0x080071e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080071e4": "update_configuration_080071e4",
                "find_value_or_default_08007320": "find_value_or_default",
                "get_shifted_value_08006c7c": "get_shifted_value",
                "get_value_index_08007376": "get_value_index",
                "iVar1": "shifted_value",
                "local_50": "values",
                "param_1": "input_param",
                "uVar2": "value_index",
                "update_configuration_08005e2e": "apply_configuration",
                "update_flags_080063c0": "update_flags",
                "update_values_08006460": "update_values"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800723c": {
            "additional_data": {
                "FUN_0800723c": {
                    "1": "get_data",
                    "2": "fetch_data",
                    "27": "initialize_data"
                },
                "get_data_08003760": {
                    "1": "get_initial_data",
                    "2": "get_data",
                    "23": "fetch_data",
                    "4": "retrieve_data"
                }
            },
            "called": [
                "FUN_08003760"
            ],
            "calling": [
                "FUN_08008abc"
            ],
            "code": "\nvoid initialize_data_0800723c(void)\n\n{\n  fetch_data();\n  return;\n}\n\n",
            "current_name": "initialize_data_0800723c",
            "entrypoint": "0x0800723c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800723c": "initialize_data_0800723c",
                "get_data_08003760": "fetch_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007244": {
            "called": [],
            "calling": [
                "FUN_08007246"
            ],
            "code": "\nvoid FUNC_08007244(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08007244",
            "entrypoint": "0x08007244",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08007244": "FUNC_08007244"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08007246": {
            "additional_data": {
                "FUNC_08007244": {
                    "1": "perform_operation",
                    "2": "execute_operation",
                    "3": "process_data",
                    "4": "reverse_data",
                    "8": "execute_function"
                },
                "FUN_08007246": {
                    "1": "perform_initialization",
                    "19": "initialize_and_update",
                    "5": "update_and_initialize"
                },
                "initialize_08004046": {
                    "22": "initialize",
                    "3": "initialize_data",
                    "4": "initialize_variables"
                },
                "update_sum_08003748": {
                    "23": "update_sum",
                    "4": "calculate_sum"
                }
            },
            "called": [
                "FUN_08004046",
                "FUN_08007244",
                "FUN_08003748"
            ],
            "calling": [],
            "code": "\nvoid initialize_and_update_08007246(void)\n\n{\n  update_sum();\n  initialize();\n  FUNC_08007244();\n  return;\n}\n\n",
            "current_name": "initialize_and_update_08007246",
            "entrypoint": "0x08007246",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007246": "initialize_and_update_08007246",
                "initialize_08004046": "initialize",
                "update_sum_08003748": "update_sum"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007258": {
            "additional_data": {
                "FUN_08007258": {
                    "1": "configure_peripheral_and_update_registers",
                    "21": "configure_peripheral",
                    "3": "initialize_peripheral",
                    "6": "configure_and_update_peripheral"
                },
                "_DAT_40010004": {
                    "1": "register2"
                },
                "_DAT_40021018": {
                    "1": "register_a"
                },
                "local_14": {
                    "1": "local_var3",
                    "3": "local_var",
                    "5": "constant",
                    "6": "constant_value"
                },
                "local_18": {
                    "1": "new_param2",
                    "2": "arg2_copy",
                    "3": "local_param_2",
                    "6": "local_param3",
                    "7": "local_param_3"
                },
                "local_1c": {
                    "1": "local_config_param_1",
                    "2": "config_param_1_copy",
                    "3": "local_param_1",
                    "6": "local_param2",
                    "7": "local_param_2"
                },
                "local_20": {
                    "1": "mask_value",
                    "14": "bitmask",
                    "2": "bit_shifted",
                    "6": "peripheral_mask",
                    "7": "bit_mask"
                },
                "param_1": {
                    "1": "config_value",
                    "2": "peripheral_index",
                    "25": "peripheral_id"
                },
                "param_2": {
                    "1": "param_value_1",
                    "2": "config_param1",
                    "6": "config_param_1",
                    "7": "param2",
                    "8": "param_2"
                },
                "param_3": {
                    "1": "config_param_3",
                    "2": "arg2",
                    "6": "config_param_2",
                    "7": "param3",
                    "8": "param_3"
                },
                "uVar1": {
                    "1": "peripheral_configuration",
                    "18": "configured_peripheral",
                    "2": "configured_value",
                    "4": "peripheral_config"
                },
                "update_registers_080040e8": {
                    "2": "update_registers"
                }
            },
            "called": [
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "calling": [
                "FUN_08008990"
            ],
            "code": "\n\n\nvoid configure_peripheral_08007258(uint peripheral_id,undefined4 param_2,undefined4 param_3)\n\n{\n  undefined4 configured_peripheral;\n  uint bitmask;\n  undefined4 local_param_2;\n  undefined4 local_param_3;\n  undefined4 constant_value;\n  \n  configured_peripheral = configure_peripheral_08007258_08006bb8((peripheral_id << 0x18) >> 0x1c);\n  bitmask = 1 << (peripheral_id & 0xf) & 0xffff;\n  constant_value = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  if ((peripheral_id - 0xd & 0xff) < 2) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  if (((peripheral_id == 0xf) || (peripheral_id == 0x13)) || (peripheral_id == 0x14)) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n  }\n  local_param_2 = param_2;\n  local_param_3 = param_3;\n  update_registers(configured_peripheral,&bitmask);\n  return;\n}\n\n",
            "current_name": "configure_peripheral_08007258",
            "entrypoint": "0x08007258",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007258": "configure_peripheral_08007258",
                "local_14": "constant_value",
                "local_18": "local_param_3",
                "local_1c": "local_param_2",
                "local_20": "bitmask",
                "param_1": "peripheral_id",
                "uVar1": "configured_peripheral",
                "update_registers_080040e8": "update_registers"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080072d8": {
            "additional_data": {
                "FUN_080072d8": {
                    "1": "set_param_value_if_needed",
                    "10": "set_param_value_based_on_condition",
                    "18": "set_param_value"
                },
                "param_1": {
                    "1": "value1",
                    "12": "param1",
                    "2": "param_value_1",
                    "3": "param_value1"
                },
                "param_2": {
                    "1": "param",
                    "12": "param2",
                    "2": "param_b",
                    "3": "value_2"
                },
                "param_3": {
                    "1": "condition_met",
                    "18": "condition",
                    "2": "is_zero",
                    "3": "flag",
                    "5": "param3"
                },
                "param_4": {
                    "1": "param",
                    "2": "param_c",
                    "3": "value",
                    "5": "default_value",
                    "9": "param4"
                },
                "set_param_value_080042e2": {
                    "1": "set_parameter_value",
                    "2": "set_param_value"
                }
            },
            "called": [
                "FUN_080042e2"
            ],
            "calling": [
                "FUN_08008a24"
            ],
            "code": "\nvoid set_param_value_080072d8(undefined4 param1,undefined2 param2,int condition,undefined4 param4)\n\n{\n  if (condition == 0) {\n    set_param_value_080072d8(param1,param2,0,param4,param4);\n    return;\n  }\n  set_param_value_080072d8(param1,param2,1,param4,param4);\n  return;\n}\n\n",
            "current_name": "set_param_value_080072d8",
            "entrypoint": "0x080072d8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080072d8": "set_param_value_080072d8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "condition",
                "param_4": "param4",
                "set_param_value_080042e2": "set_param_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080072f0": {
            "additional_data": {
                "FUN_080072f0": {
                    "1": "check_and_return_value",
                    "2": "check_bit_values",
                    "4": "check_and_return",
                    "5": "check_bit",
                    "8": "check_bit_and_return"
                },
                "check_bit_080042d4": {
                    "1": "check_bit"
                },
                "param_1": {
                    "1": "input_param",
                    "11": "input_1",
                    "2": "value",
                    "4": "input_param_1",
                    "5": "arg1"
                },
                "param_2": {
                    "1": "input_param",
                    "11": "input_2",
                    "2": "value_2",
                    "4": "input_param_2",
                    "5": "arg2"
                },
                "param_3": {
                    "1": "comparison_value",
                    "11": "input_3",
                    "2": "value_3",
                    "4": "input_param_3",
                    "5": "arg3"
                },
                "param_4": {
                    "1": "param",
                    "11": "input_4",
                    "2": "value_4",
                    "4": "input_param_4",
                    "5": "arg4"
                }
            },
            "called": [
                "FUN_080042d4"
            ],
            "calling": [
                "FUN_08008a6c"
            ],
            "code": "\nvoid check_bit_and_return_080072f0(undefined4 input_1,undefined2 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  check_bit(input_1,input_2,input_3,input_4,input_4);\n  return;\n}\n\n",
            "current_name": "check_bit_and_return_080072f0",
            "entrypoint": "0x080072f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080072f0": "check_bit_and_return_080072f0",
                "check_bit_080042d4": "check_bit",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080072fa": {
            "additional_data": {
                "FUN_080072fa": {
                    "1": "initialize_system",
                    "30": "initialize_system_and_memory"
                },
                "initialize_and_update_memory_080035b8": {
                    "1": "initialize_memory",
                    "28": "initialize_and_update_memory"
                },
                "initialize_system_08003724": {
                    "1": "initialize_system_helper",
                    "28": "initialize_system"
                }
            },
            "called": [
                "FUN_08003724",
                "FUN_080035b8"
            ],
            "calling": [
                "FUN_080036a2"
            ],
            "code": "\nvoid initialize_system_and_memory_080072fa(void)\n\n{\n  initialize_system();\n  initialize_and_update_memory();\n  return;\n}\n\n",
            "current_name": "initialize_system_and_memory_080072fa",
            "entrypoint": "0x080072fa",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080072fa": "initialize_system_and_memory_080072fa",
                "initialize_and_update_memory_080035b8": "initialize_and_update_memory",
                "initialize_system_08003724": "initialize_system"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007306": {
            "additional_data": {
                "*(undefined4 *)(param_2 + 4)": {
                    "1": "value_after_current_element",
                    "2": "found_value",
                    "4": "result"
                },
                "*param_2": {
                    "1": "current_elem",
                    "4": "current_element",
                    "7": "current_value"
                },
                "*param_2 == -1": {
                    "1": "end_of_array_reached"
                },
                "*param_2 == param_1": {
                    "2": "target_value_found"
                },
                "+0xc": {
                    "1": "next_elem"
                },
                "+4": {
                    "1": "found_elem"
                },
                "DAT_": {
                    "1": "dat_"
                },
                "DAT_08007312": {
                    "1": "array_size"
                },
                "DAT_08007316": {
                    "1": "value_not_found"
                },
                "FUN_08007306": {
                    "1": "find_value_address",
                    "10": "find_value_in_array",
                    "2": "find_value_in_list",
                    "4": "find_value",
                    "6": "find_value_index"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "param_1": {
                    "1": "key",
                    "11": "value",
                    "8": "target_value",
                    "9": "value_to_find"
                },
                "param_2": {
                    "1": "list_ptr",
                    "15": "array",
                    "3": "array_of_values",
                    "4": "data_array",
                    "6": "array_ptr"
                },
                "param_2 + 0xc": {
                    "1": "next_value_ptr",
                    "2": "next_array_element",
                    "3": "next_value"
                },
                "param_2+0xc": {
                    "1": "next_element"
                },
                "return": {
                    "1": "found_value"
                }
            },
            "called": [
                "FUN_08007306"
            ],
            "calling": [
                "FUN_08007320",
                "FUN_08007306"
            ],
            "code": "\nundefined4 find_value_in_array_08007306(int value,char *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      found_value 0;\n    }\n    if (*array == value) break;\n    array = array + 0xc;\n  }\n  found_value *(undefined4 *)(array + 4);\n}\n\n",
            "current_name": "find_value_in_array_08007306",
            "entrypoint": "0x08007306",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007306": "find_value_in_array_08007306",
                "param_1": "value",
                "param_2": "array",
                "return": "found_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007320": {
            "additional_data": {
                "FUN_08007320": {
                    "1": "find_valid_value",
                    "10": "find_value_or_default",
                    "2": "check_for_value",
                    "3": "check_and_find_value",
                    "5": "find_value_or_zero"
                },
                "param_1": {
                    "1": "search_value",
                    "12": "value",
                    "14": "input_value",
                    "2": "input_param"
                },
                "uVar1": {
                    "1": "array_value",
                    "22": "found_value",
                    "6": "result"
                }
            },
            "called": [
                "FUN_08007306"
            ],
            "calling": [
                "FUN_080071e4",
                "FUN_080084b0",
                "FUN_080077b0",
                "FUN_08007118",
                "FUN_08008500",
                "FUN_08006d80",
                "FUN_08008078"
            ],
            "code": "\nundefined4 find_value_or_default_08007320(int input_value)\n\n{\n  undefined4 found_value;\n  \n  if (input_value != -1) {\n    found_value = find_value_in_array_08007306();\n    return found_value;\n  }\n  return 0;\n}\n\n",
            "current_name": "find_value_or_default_08007320",
            "entrypoint": "0x08007320",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007320": "find_value_or_default_08007320",
                "param_1": "input_value",
                "uVar1": "found_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007332": {
            "additional_data": {
                "*(int *)(param_2 + 4)": {
                    "1": "current_character",
                    "2": "array_length"
                },
                "*param_2": {
                    "1": "found_element",
                    "2": "result",
                    "3": "found_value"
                },
                "FUN_08007332": {
                    "1": "find_value_by_index",
                    "2": "find_value_in_list",
                    "3": "find_character",
                    "4": "find_value_in_array",
                    "8": "find_character_index"
                },
                "param_1": {
                    "1": "index",
                    "2": "character_to_find",
                    "4": "target_character",
                    "6": "value"
                },
                "param_2": {
                    "1": "parameters",
                    "11": "array",
                    "2": "list_ptr",
                    "3": "character_list",
                    "4": "string",
                    "6": "character_array"
                },
                "param_2 + 0xc": {
                    "1": "next_array_item"
                },
                "param_2 + 4": {
                    "1": "array_item"
                },
                "param_2+0xc": {
                    "1": "next_character_array"
                },
                "param_2+4": {
                    "1": "array_length"
                }
            },
            "called": [
                "FUN_08007332"
            ],
            "calling": [
                "FUN_0800734a",
                "FUN_08007332"
            ],
            "code": "\nint find_character_index_08007332(int character,char *array)\n\n{\n  while( true ) {\n    if (*(int *)(array + 4) == 0) {\n      return -1;\n    }\n    if (*(int *)(array + 4) == character) break;\n    array = array + 0xc;\n  }\n  return (int)*array;\n}\n\n",
            "current_name": "find_character_index_08007332",
            "entrypoint": "0x08007332",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007332": "find_character_index_08007332",
                "param_1": "character",
                "param_2": "array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800734a": {
            "additional_data": {
                "FUN_0800734a": {
                    "1": "find_character_index_or_return_error",
                    "2": "find_character_index_or_error",
                    "20": "find_character_index",
                    "4": "get_character_index"
                },
                "param_1": {
                    "1": "input_param",
                    "11": "input_value",
                    "2": "index",
                    "3": "value",
                    "9": "input"
                },
                "uVar1": {
                    "1": "found_index",
                    "2": "result",
                    "22": "character_index",
                    "5": "index"
                }
            },
            "called": [
                "FUN_08007332"
            ],
            "calling": [
                "FUN_080084b0",
                "FUN_08008d30"
            ],
            "code": "\nundefined4 find_character_index_0800734a(int input_value)\n\n{\n  undefined4 character_index;\n  \n  if (input_value != 0) {\n    character_index = find_character_index_0800734a_08007332();\n    return character_index;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "find_character_index_0800734a",
            "entrypoint": "0x0800734a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800734a": "find_character_index_0800734a",
                "param_1": "input_value",
                "uVar1": "character_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800735a": {
            "additional_data": {
                "*(undefined4 *)(param_2 + 8)": {
                    "1": "next_element_value",
                    "3": "result",
                    "5": "found_value"
                },
                "*param_2": {
                    "1": "array_value",
                    "2": "current_element",
                    "7": "current_value"
                },
                "*param_2 == -1": {
                    "1": "current_element_is_end"
                },
                "*param_2 == param_1": {
                    "1": "current_element_is_value"
                },
                "0xc": {
                    "1": "offset"
                },
                "0xffffffff": {
                    "1": "not_found"
                },
                "DAT_": {
                    "1": "dat_"
                },
                "DAT_c": {
                    "1": "end_marker"
                },
                "FUN_0800735a": {
                    "1": "find_value_in_list",
                    "11": "find_value_index",
                    "2": "find_and_return_value",
                    "3": "find_value_by_key",
                    "8": "find_value_in_array"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "PTR_8": {
                    "1": "next_value"
                },
                "break": {
                    "1": "end_loop"
                },
                "param_1": {
                    "1": "search_value",
                    "14": "value",
                    "3": "key",
                    "7": "value_to_find"
                },
                "param_2": {
                    "1": "input_array",
                    "18": "array",
                    "3": "data_array",
                    "4": "data"
                },
                "param_2 + 0xc": {
                    "1": "advance_to_next_value",
                    "3": "next_value"
                },
                "param_2[0]": {
                    "1": "array[0]"
                },
                "return": {
                    "1": "found_value"
                }
            },
            "called": [
                "FUN_0800735a"
            ],
            "calling": [
                "FUN_0800735a",
                "FUN_08007376"
            ],
            "code": "\nundefined4 find_value_index_0800735a(int value,char *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      found_value 0xffffffff;\n    }\n    if (*array == value) end_loop;\n    array = array + 0xc;\n  }\n  found_value *(undefined4 *)(array + 8);\n}\n\n",
            "current_name": "find_value_index_0800735a",
            "entrypoint": "0x0800735a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800735a": "find_value_index_0800735a",
                "break": "end_loop",
                "param_1": "value",
                "param_2": "array",
                "return": "found_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007376": {
            "additional_data": {
                "FUN_08007376": {
                    "1": "find_value_index_or_negative",
                    "16": "get_value_index",
                    "2": "find_value_index",
                    "3": "find_value_index_or_default"
                },
                "find_value_index_0800735a": {
                    "1": "find_index"
                },
                "param_1": {
                    "1": "index",
                    "13": "input_value",
                    "14": "value"
                },
                "uVar1": {
                    "13": "value_index",
                    "16": "index"
                }
            },
            "called": [
                "FUN_0800735a"
            ],
            "calling": [
                "FUN_08006e68",
                "FUN_080071e4",
                "FUN_080077b0",
                "FUN_08007118",
                "FUN_08008078",
                "FUN_08006c7c",
                "FUN_08006c60"
            ],
            "code": "\nundefined4 get_value_index_08007376(int value)\n\n{\n  undefined4 index;\n  \n  if (value == -1) {\n    return 0xffffffff;\n  }\n  index = find_index();\n  return index;\n}\n\n",
            "current_name": "get_value_index_08007376",
            "entrypoint": "0x08007376",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007376": "get_value_index_08007376",
                "find_value_index_0800735a": "find_index",
                "param_1": "value",
                "uVar1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800738a": {
            "additional_data": {
                "*param_2": {
                    "1": "current_item",
                    "2": "current_char",
                    "4": "current_value"
                },
                "0xc": {
                    "1": "char_offset"
                },
                "FUN_0800738a": {
                    "1": "find_number_in_array",
                    "2": "compare_values",
                    "3": "compare_param_with_array",
                    "5": "find_value_in_array"
                },
                "param_1": {
                    "1": "input1",
                    "2": "value1",
                    "3": "value_to_find",
                    "4": "target",
                    "6": "value"
                },
                "param_2": {
                    "1": "input_array",
                    "14": "array",
                    "2": "values_array"
                },
                "param_2 + 0xc": {
                    "1": "next_param"
                },
                "param_2[0]": {
                    "1": "list_item"
                },
                "param_2_1": {
                    "1": "current_element"
                },
                "return": {
                    "1": "found"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_08000a64",
                "FUN_080088e0",
                "FUN_0800021a",
                "FUN_08008990"
            ],
            "code": "\nundefined4 find_value_in_array_0800738a(int value,char *array)\n\n{\n  if (value == -1) {\n    found 0;\n  }\n  while( true ) {\n    if (*array == -1) {\n      found 0;\n    }\n    if (value == *array) break;\n    array = array + 0xc;\n  }\n  found 1;\n}\n\n",
            "current_name": "find_value_in_array_0800738a",
            "entrypoint": "0x0800738a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800738a": "find_value_in_array_0800738a",
                "param_1": "value",
                "param_2": "array",
                "return": "found"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080073ae": {
            "additional_data": {
                "FUN_080073ae": {
                    "1": "compare_and_return_min",
                    "2": "find_common_value",
                    "3": "compare_and_return_zero",
                    "4": "compare_and_return",
                    "8": "compare_and_return_smaller"
                },
                "param_1": {
                    "1": "input_value_1",
                    "10": "value1",
                    "2": "input1",
                    "3": "first_number",
                    "6": "num1",
                    "8": "value_1"
                },
                "param_2": {
                    "1": "input_2",
                    "10": "value2",
                    "2": "input2",
                    "3": "second_number",
                    "6": "num2",
                    "8": "value_2"
                }
            },
            "called": [],
            "calling": [
                "FUN_080077b0",
                "FUN_08008078"
            ],
            "code": "\nint compare_and_return_smaller_080073ae(int value1,int value2)\n\n{\n  if (value1 != value2) {\n    if (value1 == 0) {\n      return value2;\n    }\n    if (value2 == 0) {\n      return value1;\n    }\n    value1 = 0;\n  }\n  return value1;\n}\n\n",
            "current_name": "compare_and_return_smaller_080073ae",
            "entrypoint": "0x080073ae",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080073ae": "compare_and_return_smaller_080073ae",
                "param_1": "value1",
                "param_2": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080073c0": {
            "additional_data": {
                "(*DAT_200005f4)": {
                    "1": "callback_function"
                },
                "DAT_200005f4": {
                    "2": "callback_ptr",
                    "3": "callback_function_ptr",
                    "6": "callback_pointer",
                    "7": "callback_function"
                },
                "DAT_2000060c": {
                    "13": "callback_data",
                    "4": "callback_argument",
                    "7": "callback_parameter"
                },
                "FUN_080073c0": {
                    "1": "execute_code_callback",
                    "12": "execute_callback_function",
                    "17": "execute_callback"
                },
                "^(code *)0": {
                    "1": "callback_function_pointer"
                },
                "callback_function": {
                    "2": "callback_function"
                },
                "code": {
                    "6": "callback_function"
                },
                "execute_callback": {
                    "2": "execute_callback"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005cb4"
            ],
            "code": "\nvoid execute_callback_080073c0(void)\n\n{\n  if (DAT_200005f4 != (callback_function *)0x0) {\n    (*DAT_200005f4)(DAT_2000060c);\n  }\n  return;\n}\n\n",
            "current_name": "execute_callback_080073c0",
            "entrypoint": "0x080073c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080073c0": "execute_callback_080073c0",
                "code": "callback_function"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080073e8": {
            "additional_data": {
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "FUN_080073e8": {
                    "28": "infinite_loop",
                    "3": "run_infinite_loop"
                },
                "do": {
                    "1": "loop"
                },
                "original_variable_name_1": {
                    "1": "unused_variable1"
                },
                "original_variable_name_2": {
                    "1": "unused_variable2"
                },
                "while": {
                    "1": "true"
                }
            },
            "called": [
                "FUN_080073e8"
            ],
            "calling": [
                "FUN_080073e8",
                "FUN_080035b8"
            ],
            "code": "\nvoid infinite_loop_080073e8(void)\n\n{\n  loop {\n                    /* WARNING: Do nothing block with infinite loop */\n  } true( true );\n}\n\n",
            "current_name": "infinite_loop_080073e8",
            "entrypoint": "0x080073e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080073e8": "infinite_loop_080073e8",
                "do": "loop",
                "while": "true"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080073ec": {
            "additional_data": {
                "": {
                    "1": ""
                },
                "FUN_080073ec": {
                    "1": "configure_peripheral",
                    "2": "initialize_system",
                    "3": "initialize_memory",
                    "4": "initialize_hardware",
                    "5": "initialize_peripheral",
                    "9": "initialize_registers"
                },
                "_DAT_40021000": {
                    "1": "status_register",
                    "2": "peripheral_register1",
                    "4": "control_register1"
                },
                "_DAT_40021004": {
                    "1": "status_register",
                    "2": "peripheral_register2",
                    "4": "control_register2"
                },
                "_DAT_40021008": {
                    "1": "interrupt_vector_table",
                    "2": "interrupt_control_register",
                    "4": "register3"
                },
                "_DAT_e000ed08": {
                    "1": "interrupt_enable_register",
                    "2": "peripheral_register4",
                    "3": "interrupt_control_register",
                    "4": "register4",
                    "5": "system_control_register"
                }
            },
            "called": [],
            "calling": [
                "entry"
            ],
            "code": "\n\n\nvoid initialize_registers_080073ec(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "current_name": "initialize_registers_080073ec",
            "entrypoint": "0x080073ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080073ec": "initialize_registers_080073ec"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007438": {
            "additional_data": {
                "*param_1": {
                    "1": "input_data_value",
                    "2": "value"
                },
                "0x40000000": {
                    "1": "peripheral1_address"
                },
                "0x40000400": {
                    "1": "peripheral2_address"
                },
                "0x40000800": {
                    "1": "peripheral3_address"
                },
                "0x40012c00": {
                    "1": "value1"
                },
                "DAT_20000610": {
                    "1": "status_ptr_1",
                    "2": "ptr1",
                    "4": "data_pointer1",
                    "5": "data_ptr1"
                },
                "DAT_20000614": {
                    "1": "data_pointer_0x40000000",
                    "2": "flag_pointer2",
                    "4": "data_pointer2",
                    "5": "data_ptr2"
                },
                "DAT_20000618": {
                    "1": "flags_register2_param2",
                    "2": "flag_pointer3",
                    "4": "data_pointer3",
                    "5": "data_ptr3"
                },
                "DAT_2000061c": {
                    "1": "flag_ptr4",
                    "2": "ptr4",
                    "4": "data_pointer4",
                    "5": "data_ptr4"
                },
                "FUN_08007438": {
                    "1": "update_flags_and_values",
                    "2": "update_flags",
                    "3": "update_data",
                    "7": "update_data_flags"
                },
                "PTR_40021018": {
                    "1": "data_status1"
                },
                "PTR_4002101c": {
                    "1": "data_status2"
                },
                "_DAT_40021018": {
                    "1": "data_flags1",
                    "2": "flag_register1",
                    "3": "data_flag1",
                    "4": "flags1"
                },
                "_DAT_4002101c": {
                    "1": "data_flags_0x4002101c",
                    "2": "flag2",
                    "3": "data_flag2",
                    "4": "flags2"
                },
                "param": {
                    "1": "data"
                },
                "param_1": {
                    "1": "param",
                    "2": "status",
                    "3": "data_ptr",
                    "4": "input",
                    "5": "data_pointer"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006e68",
                "FUN_08007708"
            ],
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid update_data_flags_08007438(int *data_pointer)\n\n{\n  if (*data_pointer == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n    DAT_20000610 = data_pointer;\n  }\n  if (*data_pointer == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n    DAT_20000614 = data_pointer;\n  }\n  if (*data_pointer == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n    DAT_20000618 = data_pointer;\n  }\n  if (*data_pointer == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n    DAT_2000061c = data_pointer;\n  }\n  return;\n}\n\n",
            "current_name": "update_data_flags_08007438",
            "entrypoint": "0x08007438",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007438": "update_data_flags_08007438",
                "param": "data",
                "param_1": "data_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080074e0": {
            "additional_data": {
                "*param_1": {
                    "1": "config_value",
                    "3": "value"
                },
                "0x40000000": {
                    "1": "flag2"
                },
                "0x40000400": {
                    "1": "flag3"
                },
                "0x40000800": {
                    "1": "flag4"
                },
                "0x40012c00": {
                    "1": "flag1"
                },
                "FUN_080074e0": {
                    "1": "update_memory_address",
                    "2": "update_flags_based_on_value",
                    "3": "update_registers",
                    "4": "update_configuration"
                },
                "PTR_40021018": {
                    "1": "hardware_setting1"
                },
                "PTR_4002101c": {
                    "1": "hardware_setting2"
                },
                "_DAT_40021018": {
                    "1": "status_register",
                    "2": "register1"
                },
                "_DAT_4002101C": {
                    "1": "memory_state2"
                },
                "_DAT_4002101c": {
                    "1": "control_register2",
                    "2": "register_2"
                },
                "original_variable_name_1": {
                    "1": "config_mask"
                },
                "original_variable_name_2": {
                    "1": "config_update"
                },
                "param_1": {
                    "1": "param",
                    "2": "memory_address",
                    "3": "flags",
                    "4": "register_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08007110",
                "FUN_08007710"
            ],
            "code": "\n\n\nvoid update_configuration_080074e0(int *value)\n\n{\n  if (*value == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 & 0xfffff7ff;\n  }\n  if (*value == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffe;\n  }\n  if (*value == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffd;\n  }\n  if (*value == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "current_name": "update_configuration_080074e0",
            "entrypoint": "0x080074e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080074e0": "update_configuration_080074e0",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007544": {
            "additional_data": {
                "0x19": {
                    "1": "timer_irq_4"
                },
                "0x1c": {
                    "1": "timer_b_value"
                },
                "0x1d": {
                    "1": "timer_priority_1",
                    "2": "timer1_irq_number"
                },
                "0x1e": {
                    "1": "timer_irq_3"
                },
                "0x40000000": {
                    "1": "timer_value_2"
                },
                "0x40000400": {
                    "1": "timer_value_1",
                    "2": "timer1_irq"
                },
                "0x40000401": {
                    "1": "timer_value_threshold"
                },
                "0x40000800": {
                    "1": "timer3_irq"
                },
                "0x40012c00": {
                    "1": "timer4_irq"
                },
                "0xffffffff": {
                    "1": "invalid_timer_irq"
                },
                "FUN_08007544": {
                    "1": "find_timer_irq",
                    "2": "get_timer_interrupt",
                    "3": "get_timer_irq",
                    "4": "get_timer_ir_qn"
                },
                "param_1": {
                    "1": "timer_irq",
                    "14": "timer_value",
                    "2": "irq_number",
                    "5": "timer_ir_qn"
                },
                "param_2": {
                    "1": "new_parameter_name_2"
                },
                "process_and_initialize_data_080098d8": {
                    "1": "process_and_initialize_data",
                    "2": "log_error",
                    "3": "log_error_message",
                    "4": "initialize_data",
                    "5": "initialize_timer_data"
                }
            },
            "called": [
                "FUN_080098d8"
            ],
            "calling": [
                "FUN_08007648",
                "FUN_080076e0"
            ],
            "code": "\nundefined4 get_timer_ir_qn_08007544(uint timer_value)\n\n{\n  if (timer_value == 0xffffffff) {\n    return 0;\n  }\n  if (timer_value == 0x40000400) {\n    return 0x1d;\n  }\n  if (timer_value < 0x40000401) {\n    if (timer_value == 0x40000000) {\n      return 0x1c;\n    }\n  }\n  else {\n    if (timer_value == 0x40000800) {\n      return 0x1e;\n    }\n    if (timer_value == 0x40012c00) {\n      return 0x19;\n    }\n  }\n  initialize_timer_data(\"TIM: Unknown timer IRQn\");\n  return 0;\n}\n\n",
            "current_name": "get_timer_ir_qn_08007544",
            "entrypoint": "0x08007544",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007544": "get_timer_ir_qn_08007544",
                "param_1": "timer_value",
                "process_and_initialize_data_080098d8": "initialize_timer_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007594": {
            "additional_data": {
                "0x40000000": {
                    "1": "instance_2"
                },
                "0x40000400": {
                    "1": "instance_1"
                },
                "0x40000401": {
                    "1": "instance_lower_bound"
                },
                "0x40000800": {
                    "1": "instance_3"
                },
                "0x40012c00": {
                    "1": "instance_4"
                },
                "0xffffffff": {
                    "1": "invalid_instance"
                },
                "FUN_08007594": {
                    "1": "check_timer_status",
                    "21": "check_timer_instance",
                    "3": "identify_timer_instance"
                },
                "param_1": {
                    "27": "timer_instance",
                    "4": "instance"
                },
                "process_and_initialize_data_080098d8": {
                    "1": "handle_unknown_timer",
                    "11": "initialize_timer_data",
                    "2": "log_error",
                    "4": "initialize_data",
                    "6": "log_error_message"
                }
            },
            "called": [
                "FUN_080098d8"
            ],
            "calling": [
                "FUN_080075dc"
            ],
            "code": "\nundefined4 check_timer_instance_08007594(uint timer_instance)\n\n{\n  if (timer_instance == 0xffffffff) {\n    return 0;\n  }\n  if (timer_instance == 0x40000400) {\n    return 1;\n  }\n  if (timer_instance < 0x40000401) {\n    if (timer_instance == 0x40000000) {\n      return 1;\n    }\n  }\n  else {\n    if (timer_instance == 0x40000800) {\n      return 1;\n    }\n    if (timer_instance == 0x40012c00) {\n      return 2;\n    }\n  }\n  initialize_timer_data(\"TIM: Unknown timer instance\");\n  return 0;\n}\n\n",
            "current_name": "check_timer_instance_08007594",
            "entrypoint": "0x08007594",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007594": "check_timer_instance_08007594",
                "param_1": "timer_instance",
                "process_and_initialize_data_080098d8": "initialize_timer_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080075dc": {
            "additional_data": {
                "FUN_080075dc": {
                    "1": "process_timer",
                    "16": "calculate_shifted_data",
                    "2": "calculate_shifted_value",
                    "3": "process_timer_data",
                    "4": "process_clock_source"
                },
                "check_timer_instance_08007594": {
                    "7": "check_timer_instance"
                },
                "get_shifted_data_08005a28": {
                    "1": "get_shifted_data_option1",
                    "4": "get_shifted_data1"
                },
                "get_shifted_data_08005a48": {
                    "1": "get_shifted_data_two",
                    "4": "get_shifted_data2"
                },
                "iVar2": {
                    "1": "shifted_data",
                    "22": "result"
                },
                "initialize_parameters_08005a68": {
                    "1": "initialize_shifted_data",
                    "5": "initialize_parameters"
                },
                "local_10": {
                    "1": "local_sum_copy",
                    "2": "shifted_data1",
                    "3": "timer_instance"
                },
                "local_14": {
                    "1": "param4_copy",
                    "2": "initialized_value4",
                    "3": "parameter_4",
                    "6": "parameter4"
                },
                "local_18": {
                    "1": "shifted_data2",
                    "2": "initialized_value3",
                    "3": "parameter_3",
                    "6": "parameter3"
                },
                "local_1c": {
                    "1": "shifted_data1",
                    "2": "initialized_value2",
                    "3": "parameter_2",
                    "6": "parameter2"
                },
                "local_20": {
                    "1": "shifted_data_ptr",
                    "2": "parameters",
                    "3": "parameter_1",
                    "6": "param1"
                },
                "local_c": {
                    "1": "source_copy",
                    "2": "timer_instance"
                },
                "param_1": {
                    "1": "clock_id",
                    "4": "timer_instance",
                    "6": "input_value",
                    "7": "input_param"
                },
                "process_and_initialize_data_080098d8": {
                    "1": "handle_error_message",
                    "6": "process_and_initialize_data"
                },
                "uVar1": {
                    "1": "temp_var1",
                    "2": "local_c",
                    "3": "local_var1",
                    "4": "shifted_data1"
                },
                "uVar3": {
                    "1": "local_variable_4",
                    "2": "shifted_data",
                    "3": "shifted_data2",
                    "6": "clock_source"
                }
            },
            "called": [
                "FUN_08007594",
                "FUN_08005a68",
                "FUN_08005a28",
                "FUN_08005a48",
                "FUN_080098d8"
            ],
            "calling": [
                "FUN_08007648",
                "FUN_08007118"
            ],
            "code": "\nint calculate_shifted_data_080075dc(undefined4 input_param)\n\n{\n  uint shifted_data1;\n  int result;\n  uint clock_source;\n  undefined4 parameter1;\n  undefined4 parameter2;\n  undefined4 parameter3;\n  undefined4 parameter4;\n  uint timer_instance;\n  uint timer_instance;\n  \n  parameter2 = 0;\n  parameter3 = 0;\n  parameter4 = 0;\n  timer_instance = 0;\n  timer_instance = 0;\n  parameter1 = 0;\n  initialize_parameters(&parameter2,&parameter1);\n  result = check_timer_instance(input_param);\n  shifted_data1 = timer_instance;\n  clock_source = timer_instance;\n  if (result == 1) {\n    result = get_shifted_data1();\n  }\n  else if (result == 2) {\n    result = get_shifted_data2();\n    clock_source = shifted_data1;\n  }\n  else {\n    process_and_initialize_data(\"TIM: Unknown clock source\");\n    result = 0;\n    clock_source = 0;\n  }\n  if (clock_source != 0x500) {\n    if (clock_source < 0x501) {\n      if (clock_source != 0x400) {\n        return result;\n      }\n    }\n    else if ((clock_source != 0x600) && (clock_source != 0x700)) {\n      return result;\n    }\n  }\n  return result << 1;\n}\n\n",
            "current_name": "calculate_shifted_data_080075dc",
            "entrypoint": "0x080075dc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080075dc": "calculate_shifted_data_080075dc",
                "check_timer_instance_08007594": "check_timer_instance",
                "get_shifted_data_08005a28": "get_shifted_data1",
                "get_shifted_data_08005a48": "get_shifted_data2",
                "iVar2": "result",
                "initialize_parameters_08005a68": "initialize_parameters",
                "local_10": "timer_instance",
                "local_14": "parameter4",
                "local_18": "parameter3",
                "local_1c": "parameter2",
                "local_20": "parameter1",
                "local_c": "timer_instance",
                "param_1": "input_param",
                "process_and_initialize_data_080098d8": "process_and_initialize_data",
                "uVar1": "shifted_data1",
                "uVar3": "clock_source"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007648": {
            "additional_data": {
                "FUN_08007648": {
                    "1": "initialize_and_calculate",
                    "14": "initialize_data",
                    "15": "initialize_parameters"
                },
                "cVar1": {
                    "1": "timer_data",
                    "14": "timer_value",
                    "2": "timer_ir",
                    "4": "timer_status"
                },
                "iVar3": {
                    "1": "update_status",
                    "22": "update_result",
                    "6": "result"
                },
                "local_1c": {
                    "1": "value7",
                    "12": "local_var7",
                    "2": "var7",
                    "3": "local_variable_7",
                    "4": "local_variable7"
                },
                "local_20": {
                    "1": "value6",
                    "12": "local_var6",
                    "2": "temp_var6",
                    "3": "local_variable_6",
                    "4": "local_variable6"
                },
                "local_24": {
                    "1": "value5",
                    "12": "local_var5",
                    "2": "local_var_5",
                    "3": "local_variable_5",
                    "4": "local_variable5"
                },
                "local_28": {
                    "1": "value4",
                    "12": "local_var4",
                    "2": "temp_var4",
                    "3": "local_variable_4",
                    "4": "local_variable4"
                },
                "local_2c": {
                    "1": "third_variable",
                    "12": "local_var3",
                    "2": "local_var_3",
                    "3": "local_variable_3",
                    "4": "local_variable3"
                },
                "local_30": {
                    "1": "flag2",
                    "12": "local_var2",
                    "2": "var2",
                    "3": "local_variable_2",
                    "4": "local_variable2"
                },
                "local_34": {
                    "1": "variable1",
                    "12": "local_var1",
                    "2": "temp_var1",
                    "3": "local_variable_1",
                    "4": "local_variable1"
                },
                "param_1": {
                    "1": "output_buffer",
                    "2": "data_array",
                    "3": "data_ptr",
                    "4": "parameters",
                    "5": "parameter_array"
                },
                "param_2": {
                    "1": "input_data",
                    "2": "input_value1",
                    "3": "value",
                    "4": "param2",
                    "5": "input_value",
                    "6": "value1"
                },
                "param_3": {
                    "1": "value_2",
                    "10": "timer_value",
                    "2": "input_param2",
                    "4": "timer",
                    "6": "value2"
                },
                "param_4": {
                    "1": "param",
                    "2": "input_value3",
                    "3": "flag_value",
                    "4": "param4",
                    "6": "value3"
                },
                "puVar4": {
                    "1": "params_ptr",
                    "2": "parameter_ptr",
                    "3": "next_parameter",
                    "4": "next_data_pointer"
                },
                "uVar2": {
                    "30": "shifted_data"
                }
            },
            "called": [
                "FUN_08006280",
                "FUN_08006128",
                "FUN_08006060",
                "FUN_080075dc",
                "FUN_08003f94",
                "FUN_08007544",
                "FUN_08003f30"
            ],
            "calling": [
                "FUN_0800242c"
            ],
            "code": "\nvoid initialize_parameters_08007648(undefined4 *parameter_array,undefined4 value1,undefined4 timer_value,undefined4 value3)\n\n{\n  char timer_value;\n  uint shifted_data;\n  int update_result;\n  undefined4 *next_data_pointer;\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined4 local_var3;\n  undefined4 local_var4;\n  undefined4 local_var5;\n  undefined4 local_var6;\n  undefined4 local_var7;\n  \n  local_var1 = 0;\n  local_var2 = 0;\n  local_var3 = 0;\n  local_var4 = 0;\n  local_var5 = 0;\n  local_var6 = 0;\n  local_var7 = 0;\n  next_data_pointer = parameter_array + 1;\n  *parameter_array = 0x40000000;\n  parameter_array[1] = 0x40000000;\n  parameter_array[4] = value1;\n  shifted_data = calculate_shifted_data_080075dc();\n  parameter_array[2] = shifted_data / 1000000 - 1;\n  parameter_array[5] = 0;\n  parameter_array[3] = 0;\n  parameter_array[6] = 0;\n  parameter_array[0x13] = value3;\n  local_var1 = 0;\n  local_var3 = 0;\n  local_var5 = 0;\n  local_var4 = 0;\n  local_var6 = 0;\n  local_var7 = 0;\n  local_var2 = timer_value;\n  timer_value = get_timer_ir_qn_08007544(*parameter_array);\n  update_memory_08003f30((int)timer_value,0xe,0);\n  timer_value = get_timer_ir_qn_08007544(*parameter_array);\n  set_bit_08003f94((int)timer_value);\n  update_result = update_data_flags_08006060(next_data_pointer);\n  if ((update_result == 0) && (update_result = update_parameters_08006128(next_data_pointer,&local_var1,0), update_result == 0)) {\n    update_flags_and_bit_08006280(next_data_pointer,0);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_parameters_08007648",
            "entrypoint": "0x08007648",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007648": "initialize_parameters_08007648",
                "cVar1": "timer_value",
                "iVar3": "update_result",
                "local_1c": "local_var7",
                "local_20": "local_var6",
                "local_24": "local_var5",
                "local_28": "local_var4",
                "local_2c": "local_var3",
                "local_30": "local_var2",
                "local_34": "local_var1",
                "param_1": "parameter_array",
                "param_2": "value1",
                "param_3": "timer_value",
                "param_4": "value3",
                "puVar4": "next_data_pointer",
                "uVar2": "shifted_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080076e0": {
            "additional_data": {
                "FUN_080076e0": {
                    "1": "initialize_configuration_and_permissions",
                    "13": "initialize_and_update_configuration",
                    "5": "initialize_and_update"
                },
                "cVar1": {
                    "1": "timer",
                    "2": "timer_qn",
                    "21": "timer_value",
                    "3": "timer_result"
                },
                "get_timer_ir_qn_08007544": {
                    "1": "get_timer_qn_value"
                },
                "iVar2": {
                    "1": "config_success",
                    "2": "initialize_result",
                    "4": "config_init_result",
                    "6": "config_status",
                    "9": "init_result"
                },
                "initialize_configuration_08005df4": {
                    "1": "initialize_configuration"
                },
                "param_1": {
                    "1": "configuration_array",
                    "2": "config_params",
                    "4": "config_data",
                    "6": "config",
                    "7": "configuration"
                },
                "set_bit_in_memory_08003fb0": {
                    "1": "set_bit_in_memory"
                },
                "update_permissions_080062f4": {
                    "1": "update_permissions"
                }
            },
            "called": [
                "FUN_08005df4",
                "FUN_08003fb0",
                "FUN_08007544",
                "FUN_080062f4"
            ],
            "calling": [
                "FUN_08002578"
            ],
            "code": "\nvoid initialize_and_update_configuration_080076e0(undefined4 *configuration)\n\n{\n  char timer_value;\n  int init_result;\n  \n  configuration[0x13] = 0;\n  timer_value = get_timer_qn_value(*configuration);\n  set_bit_in_memory((int)timer_value);\n  init_result = initialize_configuration(configuration + 1);\n  if (init_result == 0) {\n    update_permissions(configuration + 1,0);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_and_update_configuration_080076e0",
            "entrypoint": "0x080076e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080076e0": "initialize_and_update_configuration_080076e0",
                "cVar1": "timer_value",
                "get_timer_ir_qn_08007544": "get_timer_qn_value",
                "iVar2": "init_result",
                "initialize_configuration_08005df4": "initialize_configuration",
                "param_1": "configuration",
                "set_bit_in_memory_08003fb0": "set_bit_in_memory",
                "update_permissions_080062f4": "update_permissions"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007708": {
            "additional_data": {
                "FUN_08007708": {
                    "1": "update_and_return_data_flags",
                    "24": "update_data_flags",
                    "6": "initialize_data_flags"
                },
                "update_data_flags_08007438": {
                    "1": "get_data_flags",
                    "2": "update_flags",
                    "21": "update_data_flags"
                }
            },
            "called": [
                "FUN_08007438"
            ],
            "calling": [
                "FUN_08006060"
            ],
            "code": "\nvoid update_data_flags_08007708(void)\n\n{\n  update_data_flags_08007708();\n  return;\n}\n\n",
            "current_name": "update_data_flags_08007708",
            "entrypoint": "0x08007708",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007708": "update_data_flags_08007708",
                "update_data_flags_08007438": "update_data_flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007710": {
            "additional_data": {
                "FUN_08007710": {
                    "11": "update_configuration",
                    "20": "initialize_configuration"
                },
                "PTR_<variable_1>": {
                    "1": "<variable_1>"
                },
                "PTR_<variable_2>": {
                    "1": "<variable_2>"
                },
                "update_configuration_080074e0": {
                    "1": "update_configuration_data",
                    "2": "update_configuration_helper",
                    "23": "update_configuration"
                }
            },
            "called": [
                "FUN_080074e0"
            ],
            "calling": [
                "FUN_08005df4"
            ],
            "code": "\nvoid initialize_configuration_08007710(void)\n\n{\n  update_configuration();\n  return;\n}\n\n",
            "current_name": "initialize_configuration_08007710",
            "entrypoint": "0x08007710",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007710": "initialize_configuration_08007710",
                "update_configuration_080074e0": "update_configuration"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007718": {
            "additional_data": {
                "FUN_08007718": {
                    "1": "subtract_by_four",
                    "2": "decrement_by_four",
                    "28": "subtract_four"
                },
                "PTR_var_1": {
                    "1": "new_var1"
                },
                "PTR_var_2": {
                    "1": "new_var2"
                },
                "local_1": {
                    "1": "result"
                },
                "local_var_1": {
                    "1": "result"
                },
                "local_var_2": {
                    "1": "temp_var"
                },
                "local_var_n": {
                    "1": "another_var"
                },
                "param_1": {
                    "1": "input_num",
                    "2": "input_number",
                    "3": "num",
                    "7": "input_value",
                    "8": "result",
                    "9": "input"
                },
                "param_2": {
                    "1": "new_parameter_name_2"
                },
                "param_n": {
                    "1": "new_parameter_name_n"
                },
                "result": {
                    "1": "result"
                },
                "return": {
                    "2": "result"
                },
                "var_1": {
                    "1": "result"
                },
                "var_2": {
                    "1": "new_variable_name_2"
                },
                "var_n": {
                    "1": "new_variable_name_n"
                }
            },
            "called": [],
            "calling": [
                "FUN_08007736",
                "FUN_0800771c"
            ],
            "code": "\nint subtract_four_08007718(int input)\n\n{\n  result input + -4;\n}\n\n",
            "current_name": "subtract_four_08007718",
            "entrypoint": "0x08007718",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007718": "subtract_four_08007718",
                "param_1": "input",
                "return": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800771c": {
            "additional_data": {
                "'\\x01'": {
                    "1": "condition_value"
                },
                "(*(code **)(iVar1 + 0x4c) != (code *)0x0)": {
                    "1": "is_callback_valid"
                },
                "(**(code **)(iVar1 + 0x4c))": {
                    "1": "function_to_call"
                },
                "(char *)(param_1 + 0x1c)": {
                    "1": "flag"
                },
                "(code *)0x0": {
                    "1": "null"
                },
                "*(char *)(callback_data + 0x1c)": {
                    "1": "condition_checker"
                },
                "*(char *)(param_1 + 0x1c)": {
                    "1": "condition_flag"
                },
                "*(char *)(parameter + 0x1c)": {
                    "1": "flag"
                },
                "*(code **)(iVar1 + 0x4c)": {
                    "1": "callback_function"
                },
                "**(code **)(iVar1 + 0x4c)": {
                    "1": "callback_function_pointer"
                },
                "0x0": {
                    "1": "null",
                    "2": "null_pointer"
                },
                "0x1c": {
                    "1": "flag_offset",
                    "2": "condition_offset"
                },
                "0x4c": {
                    "1": "callback_offset",
                    "2": "function_pointer_offset"
                },
                "DAT_080075c0": {
                    "1": "parameter_flag"
                },
                "DAT_080075e0": {
                    "1": "flag"
                },
                "DAT_08007714": {
                    "1": "enabled_function_address"
                },
                "FUN_0800771c": {
                    "1": "execute_if_condition_is_met",
                    "2": "execute_callback_if_enabled",
                    "3": "execute_callback_if_flag_set",
                    "4": "execute_callback_if_condition_met",
                    "5": "execute_callback"
                },
                "code": {
                    "1": "function_type",
                    "3": "function_pointer"
                },
                "iVar1": {
                    "1": "callback_handle",
                    "12": "result",
                    "3": "callback_function",
                    "5": "callback_result"
                },
                "param_1": {
                    "1": "function_parameter",
                    "2": "parameter",
                    "3": "input_param",
                    "6": "callback_data"
                },
                "subtract_four_08007718": {
                    "1": "get_function_offset",
                    "3": "get_callback_function",
                    "4": "get_function_pointer"
                },
                "subtract_four_08007718()": {
                    "1": "retrieve_function_pointer"
                }
            },
            "called": [
                "FUN_08007718"
            ],
            "calling": [
                "FUN_08005e6e"
            ],
            "code": "\nvoid execute_callback_0800771c(int callback_data)\n\n{\n  int result;\n  \n  result = retrieve_function_pointer;\n  if ((*(function_pointer **)(result + 0x4c) != (function_pointer *)0x0) && (*(char *)(callback_data + 0x1c) == '\\x01')) {\n    (**(function_pointer **)(result + 0x4c))(result,0);\n  }\n  return;\n}\n\n",
            "current_name": "execute_callback_0800771c",
            "entrypoint": "0x0800771c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800771c": "execute_callback_0800771c",
                "code": "function_pointer",
                "iVar1": "result",
                "param_1": "callback_data",
                "subtract_four_08007718": "get_function_pointer",
                "subtract_four_08007718()": "retrieve_function_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007736": {
            "additional_data": {
                "(code *)0x0": {
                    "1": "null",
                    "4": "null_code_pointer"
                },
                "(code **)": {
                    "1": "code_pointer"
                },
                "(iVar1 + 0x48)": {
                    "1": "function_pointer"
                },
                "**(code **)(result + offset)": {
                    "1": "function_to_execute"
                },
                "0x48": {
                    "1": "function_pointer_offset",
                    "7": "offset"
                },
                "FUN_08007736": {
                    "1": "execute_subroutine",
                    "2": "execute_callback_function",
                    "6": "execute_subtract_four_function",
                    "8": "execute_callback"
                },
                "PTR_48": {
                    "1": "function_pointer"
                },
                "code": {
                    "1": "function_pointer",
                    "3": "callback_function"
                },
                "iVar1": {
                    "1": "callback_ptr",
                    "25": "result"
                },
                "iVar1 + 0x48": {
                    "1": "result_offset"
                },
                "substract_four_08007718": {
                    "1": "get_subtracted_function_pointer"
                },
                "subtract_four_08007718": {
                    "1": "get_callback_function_pointer",
                    "2": "perform_subtraction",
                    "3": "get_callback_function",
                    "5": "get_function_pointer"
                }
            },
            "called": [
                "FUN_08007718"
            ],
            "calling": [
                "FUN_08005e6e"
            ],
            "code": "\nvoid execute_callback_08007736(void)\n\n{\n  int result;\n  \n  result = get_function_pointer();\n  if (*(callback_function **)(result + 0x48) != (callback_function *)0x0) {\n    (**(callback_function **)(result + 0x48))();\n  }\n  return;\n}\n\n",
            "current_name": "execute_callback_08007736",
            "entrypoint": "0x08007736",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007736": "execute_callback_08007736",
                "code": "callback_function",
                "iVar1": "result",
                "subtract_four_08007718": "get_function_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007744": {
            "additional_data": {
                "* (int *)(param_1 + 4) + 0x24": {
                    "1": "offset_value"
                },
                "*(int *)(param_1 + 4)": {
                    "1": "pointer_address"
                },
                "*(int *)(param_1 + 4) + 0x24": {
                    "1": "base_address"
                },
                "*(undefined4 *)(*(int *)(param_1 + 4) + 0x24)": {
                    "1": "result",
                    "2": "pointer_value",
                    "3": "value"
                },
                "*(undefined4 *)(baseAddress)": {
                    "1": "offset_value"
                },
                "<new_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<unnamed_variable_1>": {
                    "1": "base_address"
                },
                "<unnamed_variable_2>": {
                    "1": "offset_value"
                },
                "DAT_": {
                    "1": ""
                },
                "DAT_XXX": {
                    "1": "data_xxx"
                },
                "DAT_XXXX": {
                    "1": "new_data"
                },
                "FUN_08007744": {
                    "1": "get_return_value",
                    "10": "get_pointer_value",
                    "2": "get_value_from_pointer",
                    "4": "get_value_from_offset",
                    "8": "get_offset_value"
                },
                "PTR_": {
                    "1": ""
                },
                "PTR_1": {
                    "1": "pointer1"
                },
                "PTR_XXX": {
                    "1": "pointer_xxx"
                },
                "PTR_XXXX": {
                    "1": "xxxx"
                },
                "PTR_XXXXX": {
                    "1": "unmodified_pointer"
                },
                "new_variable_name_1": {
                    "1": "offset"
                },
                "new_variable_name_2": {
                    "1": "new_variable_name_2"
                },
                "param_1": {
                    "1": "pointer_address",
                    "12": "offset",
                    "2": "input_param",
                    "3": "pointer",
                    "5": "input"
                },
                "param_1 + 4": {
                    "1": "modified_input_value",
                    "2": "base_address"
                },
                "param_2": {
                    "3": "new_parameter_name_2"
                },
                "var_1": {
                    "1": "offset_value"
                },
                "var_2": {
                    "1": "base_ptr"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nundefined4 get_pointer_value_08007744(int offset)\n\n{\n  return *(undefined4 *)(*(int *)(offset + 4) + 0x24);\n}\n\n",
            "current_name": "get_pointer_value_08007744",
            "entrypoint": "0x08007744",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007744": "get_pointer_value_08007744",
                "param_1": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800774a": {
            "additional_data": {
                "FUN_0800774a": {
                    "1": "set_param_in_struct",
                    "2": "update_memory_value",
                    "4": "set_parameter_value",
                    "5": "update_parameter_value",
                    "8": "set_param_value"
                },
                "param_1": {
                    "1": "pointer_param",
                    "2": "input_pointer",
                    "3": "memory_address",
                    "4": "object_address"
                },
                "param_2": {
                    "1": "value_param",
                    "24": "new_value",
                    "3": "value"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid set_param_value_0800774a(int object_address,undefined4 new_value)\n\n{\n  *(undefined4 *)(*(int *)(object_address + 4) + 0x24) = new_value;\n  return;\n}\n\n",
            "current_name": "set_param_value_0800774a",
            "entrypoint": "0x0800774a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800774a": "set_param_value_0800774a",
                "param_1": "object_address",
                "param_2": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007750": {
            "additional_data": {
                "*(int *)(param_1 + 4)": {
                    "1": "pointer_to_struct"
                },
                "*(int *)(param_1 + 4) + 0x34 + param_2 * 4": {
                    "1": "target_memory"
                },
                "*(undefined4 *)(*(int *)(param_1 + 4) + 0x34 + param_2 * 4)": {
                    "1": "memory_location",
                    "2": "target_address"
                },
                "*(undefined4 *)(*(int *)(param_1 + 4) + 0x34 + param_2 * 4) = param_3": {
                    "1": "store_value_at_memory_location"
                },
                "*(undefined4 *)(data + offset + index * 4)": {
                    "1": "target_address"
                },
                "0x34": {
                    "1": "base_offset"
                },
                "0x34 + param_2 * 4": {
                    "1": "offset_to_parameter"
                },
                "FUN_08007750": {
                    "1": "update_value_at_index",
                    "2": "store_value_at_index",
                    "3": "write_to_memory",
                    "5": "store_value_at_offset"
                },
                "param_1": {
                    "1": "base_pointer",
                    "10": "base_address",
                    "2": "array_base",
                    "3": "array",
                    "4": "memory_address"
                },
                "param_1 + 4": {
                    "1": "address_pointer"
                },
                "param_2": {
                    "1": "param_index",
                    "24": "index",
                    "5": "offset"
                },
                "param_3": {
                    "1": "param_value",
                    "10": "new_value",
                    "18": "value",
                    "2": "value_to_store"
                },
                "pointerToData + 0x34": {
                    "1": "offset"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid store_value_at_offset_08007750(int base_address,int index,undefined4 value)\n\n{\n  *(undefined4 *)(*(int *)(base_address + 4) + 0x34 + index * 4) = value;\n  return;\n}\n\n",
            "current_name": "store_value_at_offset_08007750",
            "entrypoint": "0x08007750",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007750": "store_value_at_offset_08007750",
                "param_1": "base_address",
                "param_2": "index",
                "param_3": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080077b0": {
            "additional_data": {
                "DAT_0800a66c": {
                    "1": "data2"
                },
                "DAT_0800a69c": {
                    "1": "some_data1"
                },
                "DAT_20000668": {
                    "1": "data_pointer1",
                    "3": "data1"
                },
                "DAT_2000066c": {
                    "1": "some_data4",
                    "2": "data2"
                },
                "FUN_080077b0": {
                    "1": "initialize_i2_c_config",
                    "19": "initialize_i2_c_peripheral",
                    "3": "initialize_i2_c_pins",
                    "7": "initialize_i2_c"
                },
                "Local_2c": {
                    "1": "local_variable"
                },
                "Local_30": {
                    "1": "pin_config2"
                },
                "Local_34": {
                    "1": "pin_config1"
                },
                "Local_38": {
                    "1": "pin_mask1"
                },
                "_DAT_40010004": {
                    "1": "register5",
                    "2": "register4"
                },
                "_DAT_40021010": {
                    "1": "reg2",
                    "8": "register2"
                },
                "_DAT_40021018": {
                    "1": "register6",
                    "7": "register3"
                },
                "_DAT_4002101c": {
                    "1": "register_value1",
                    "8": "register1"
                },
                "iVar1": {
                    "1": "smaller_value",
                    "2": "i2c_pin1_peripheral",
                    "5": "pin_peripheral1",
                    "7": "peripheral1"
                },
                "iVar2": {
                    "1": "value2",
                    "2": "i2c_pin2_peripheral",
                    "5": "pin2_peripheral",
                    "7": "peripheral2"
                },
                "local_2c": {
                    "1": "local_variable3",
                    "2": "local_var1",
                    "3": "constant3"
                },
                "local_30": {
                    "1": "value_index3",
                    "2": "mask3",
                    "3": "local30"
                },
                "local_34": {
                    "1": "value2",
                    "2": "pin_config",
                    "3": "mask2",
                    "4": "pin2_mask",
                    "7": "pin_mask2"
                },
                "local_38": {
                    "1": "pin_bit_mask",
                    "3": "mask1",
                    "4": "bit_mask1",
                    "6": "pin1_mask",
                    "9": "pin_mask1"
                },
                "param_1": {
                    "1": "i2c_params",
                    "2": "i2c_pins",
                    "3": "pin_configuration",
                    "9": "pin_config"
                },
                "param_2": {
                    "1": "param_value1",
                    "18": "param2",
                    "2": "data1",
                    "8": "pin1"
                },
                "param_3": {
                    "1": "param_value2",
                    "18": "param3",
                    "2": "data2",
                    "8": "pin2"
                },
                "param_4": {
                    "1": "param_value3",
                    "2": "pin3",
                    "21": "param4"
                },
                "param_5": {
                    "1": "parameter5",
                    "2": "param_5",
                    "21": "param5"
                },
                "piVar6": {
                    "1": "i2c_pin_config_plus_one",
                    "2": "pi_var",
                    "4": "pi_var6",
                    "6": "data_pointer"
                },
                "uVar3": {
                    "1": "configure_result",
                    "12": "peripheral_config",
                    "2": "config1",
                    "3": "peripheral_config1"
                },
                "uVar4": {
                    "1": "register_value",
                    "19": "value_index1",
                    "3": "register_value1"
                },
                "uVar5": {
                    "1": "register2",
                    "19": "value_index2",
                    "4": "register_value2"
                }
            },
            "called": [
                "FUN_08007320",
                "FUN_080040e8",
                "FUN_08003f94",
                "FUN_080073ae",
                "FUN_08003f30",
                "FUN_080098d8",
                "FUN_08007376",
                "FUN_080045c0",
                "FUN_08006bb8"
            ],
            "calling": [
                "FUN_08002968"
            ],
            "code": "\n\n\nvoid initialize_i2_c_peripheral_080077b0(int *pin_config,int param2,int param3,int param4,undefined param5)\n\n{\n  int peripheral1;\n  int peripheral2;\n  undefined4 peripheral_config;\n  uint value_index1;\n  uint value_index2;\n  int *data_pointer;\n  uint pin_mask1;\n  uint pin_mask2;\n  uint bit_mask3;\n  undefined4 constant3;\n  \n  if (pin_config != (int *)0x0) {\n    data_pointer = pin_config + 1;\n    peripheral1 = find_value_or_default_08007320((int)*(char *)(pin_config + 0x16),&DAT_0800a69c);\n    peripheral2 = find_value_or_default_08007320((int)*(char *)((int)pin_config + 0x59),&DAT_0800a66c);\n    if ((peripheral1 == 0) || (peripheral2 == 0)) {\n      process_and_initialize_data_080098d8(\"ERROR: at least one I2C pin has no peripheral\\n\");\n    }\n    else {\n      peripheral1 = compare_and_return_smaller_080073ae(peripheral1,peripheral2);\n      *pin_config = peripheral1;\n      if (peripheral1 == 0) {\n        process_and_initialize_data_080098d8(\"ERROR: I2C pins mismatch\\n\");\n      }\n      else {\n        if (peripheral1 == 0x40005400) {\n          _DAT_4002101c = _DAT_4002101c | 0x200000;\n          _DAT_40021010 = _DAT_40021010 & 0xffdfffff;\n          *(undefined *)((int)pin_config + 0x5a) = 0x1f;\n          *(undefined *)((int)pin_config + 0x5b) = 0x20;\n          DAT_20000668 = data_pointer;\n        }\n        if (*pin_config == 0x40005800) {\n          _DAT_4002101c = _DAT_4002101c | 0x400000;\n          _DAT_40021010 = _DAT_40021010 & 0xffbfffff;\n          *(undefined *)((int)pin_config + 0x5a) = 0x21;\n          *(undefined *)((int)pin_config + 0x5b) = 0x22;\n          DAT_2000066c = data_pointer;\n        }\n        peripheral_config = configure_peripheral_08006bb8((uint)((int)*(char *)((int)pin_config + 0x59) << 0x18) >> 0x1c);\n        pin_mask1 = 1 << ((int)*(char *)((int)pin_config + 0x59) & 0xfU) & 0xffff;\n        value_index1 = get_value_index_08007376((int)*(char *)((int)pin_config + 0x59),&DAT_0800a66c);\n        value_index2 = get_value_index_08007376((int)*(char *)((int)pin_config + 0x59),&DAT_0800a66c);\n        pin_mask2 = (value_index1 >> 3 & 1) << 4 | value_index2 & 7;\n        constant3 = 3;\n        peripheral1 = get_value_index_08007376((int)*(char *)((int)pin_config + 0x59),&DAT_0800a66c);\n        bit_mask3 = (uint)(peripheral1 << 0x1a) >> 0x1e;\n        peripheral1 = get_value_index_08007376((int)*(char *)((int)pin_config + 0x59),&DAT_0800a66c);\n        _DAT_40021018 = _DAT_40021018 | 1;\n        value_index2 = 1;\n        value_index1 = _DAT_40021018;\n        switch((uint)(peripheral1 << 0x11) >> 0x19) {\n        case 1:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 | 0x7000001;\n          _DAT_40010004 = value_index2;\n          break;\n        case 2:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          _DAT_40010004 = value_index2;\n          break;\n        case 3:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 | 0x7000002;\n          _DAT_40010004 = value_index2;\n          break;\n        case 4:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          _DAT_40010004 = value_index2;\n          break;\n        case 5:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 | 0x7000004;\n          _DAT_40010004 = value_index2;\n          break;\n        case 6:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          _DAT_40010004 = value_index2;\n          break;\n        case 7:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 | 0x7000008;\n          _DAT_40010004 = value_index2;\n          break;\n        case 8:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          _DAT_40010004 = value_index2;\n          break;\n        case 9:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 | 0x7000030;\n          _DAT_40010004 = value_index2;\n          break;\n        case 10:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0xb:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0xc:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 | 0x70000c0;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0xd:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0xe:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0xf:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 | 0x7000300;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0x10:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0x11:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0x12:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0x13:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 | 0x7000c00;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0x14:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0x15:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0x16:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 | 0x7001000;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0x17:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0x1b:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 | 0x7008000;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0x1c:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0x21:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xf8ffffff;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0x22:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0x23:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0x24:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n          _DAT_40010004 = value_index2;\n        }\n        update_registers_080040e8(peripheral_config,&pin_mask1,value_index1,value_index2);\n        peripheral_config = configure_peripheral_08006bb8((uint)((int)*(char *)(pin_config + 0x16) << 0x18) >> 0x1c);\n        pin_mask1 = 1 << ((int)*(char *)(pin_config + 0x16) & 0xfU) & 0xffff;\n        value_index1 = get_value_index_08007376((int)*(char *)(pin_config + 0x16),&DAT_0800a69c);\n        value_index2 = get_value_index_08007376((int)*(char *)(pin_config + 0x16),&DAT_0800a69c);\n        pin_mask2 = (value_index1 >> 3 & 1) << 4 | value_index2 & 7;\n        constant3 = 3;\n        peripheral1 = get_value_index_08007376((int)*(char *)(pin_config + 0x16),&DAT_0800a69c);\n        bit_mask3 = (uint)(peripheral1 << 0x1a) >> 0x1e;\n        peripheral1 = get_value_index_08007376((int)*(char *)(pin_config + 0x16),&DAT_0800a69c);\n        _DAT_40021018 = _DAT_40021018 | 1;\n        value_index2 = 1;\n        value_index1 = _DAT_40021018;\n        switch((uint)(peripheral1 << 0x11) >> 0x19) {\n        case 1:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 | 0x7000001;\n          _DAT_40010004 = value_index2;\n          break;\n        case 2:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          _DAT_40010004 = value_index2;\n          break;\n        case 3:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 | 0x7000002;\n          _DAT_40010004 = value_index2;\n          break;\n        case 4:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          _DAT_40010004 = value_index2;\n          break;\n        case 5:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 | 0x7000004;\n          _DAT_40010004 = value_index2;\n          break;\n        case 6:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          _DAT_40010004 = value_index2;\n          break;\n        case 7:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 | 0x7000008;\n          _DAT_40010004 = value_index2;\n          break;\n        case 8:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          _DAT_40010004 = value_index2;\n          break;\n        case 9:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 | 0x7000030;\n          _DAT_40010004 = value_index2;\n          break;\n        case 10:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0xb:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0xc:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 | 0x70000c0;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0xd:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0xe:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0xf:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 | 0x7000300;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0x10:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0x11:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0x12:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0x13:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 | 0x7000c00;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0x14:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0x15:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0x16:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 | 0x7001000;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0x17:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0x1b:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 | 0x7008000;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0x1c:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0x21:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xf8ffffff;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0x22:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0x23:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          _DAT_40010004 = value_index2;\n          break;\n        case 0x24:\n          value_index1 = 0x40010000;\n          value_index2 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n          _DAT_40010004 = value_index2;\n        }\n        update_registers_080040e8(peripheral_config,&pin_mask1,value_index1,value_index2);\n        pin_config[1] = *pin_config;\n        pin_config[2] = param2;\n        pin_config[3] = 0;\n        pin_config[4] = param4;\n        pin_config[7] = 0xff;\n        pin_config[5] = param3;\n        pin_config[6] = 0;\n        pin_config[8] = 0;\n        pin_config[9] = 0;\n        *(undefined *)((int)pin_config + 0x41) = 0;\n        update_memory_08003f30((int)*(char *)((int)pin_config + 0x5a),0,1);\n        set_bit_08003f94((int)*(char *)((int)pin_config + 0x5a));\n        update_memory_08003f30((int)*(char *)((int)pin_config + 0x5b),0,1);\n        set_bit_08003f94((int)*(char *)((int)pin_config + 0x5b));\n        calculate_parameters_080045c0(data_pointer);\n        *(undefined *)((int)pin_config + 0x5d) = param5;\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_i2_c_peripheral_080077b0",
            "entrypoint": "0x080077b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080077b0": "initialize_i2_c_peripheral_080077b0",
                "iVar1": "peripheral1",
                "iVar2": "peripheral2",
                "local_2c": "constant3",
                "local_30": "bit_mask3",
                "local_34": "pin_mask2",
                "local_38": "pin_mask1",
                "param_1": "pin_config",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "piVar6": "data_pointer",
                "uVar3": "peripheral_config",
                "uVar4": "value_index1",
                "uVar5": "value_index2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007e74": {
            "additional_data": {
                "FUN_08007e74": {
                    "1": "verify_data",
                    "17": "process_data",
                    "2": "process_and_validate_data",
                    "4": "process_data_and_check",
                    "6": "process_and_check_data"
                },
                "get_byte_from_offset_0800542a": {
                    "1": "get_byte_value"
                },
                "get_data_08003760": {
                    "1": "get_initial_value"
                },
                "get_value_from_offset_08005430": {
                    "1": "get_value"
                },
                "iVar1": {
                    "1": "original_value",
                    "11": "initial_data",
                    "3": "data_offset",
                    "4": "base_value",
                    "8": "initial_value"
                },
                "iVar2": {
                    "1": "byte_val",
                    "10": "result",
                    "2": "status",
                    "5": "byte_value",
                    "8": "process_result"
                },
                "iVar4": {
                    "1": "result_status",
                    "17": "result",
                    "8": "status"
                },
                "iVar5": {
                    "1": "offset_plus4",
                    "2": "data_offset",
                    "5": "current_offset",
                    "7": "offset"
                },
                "param_1": {
                    "1": "input_pointer",
                    "13": "data_offset",
                    "2": "input_ptr",
                    "3": "input_data",
                    "4": "data_ptr"
                },
                "param_2": {
                    "1": "parameter_2",
                    "15": "param2",
                    "2": "arg2",
                    "3": "param1",
                    "6": "param_2"
                },
                "param_3": {
                    "1": "value2",
                    "15": "param3",
                    "2": "arg2",
                    "3": "param2",
                    "6": "param_3"
                },
                "param_4": {
                    "1": "parameter_4",
                    "15": "param4",
                    "2": "arg3",
                    "3": "param3",
                    "6": "param_4"
                },
                "process_data_08004728": {
                    "1": "process_data"
                },
                "uVar3": {
                    "1": "offset_difference",
                    "23": "difference",
                    "3": "data_difference"
                },
                "uVar6": {
                    "1": "input_param",
                    "10": "param4_copy",
                    "2": "temp_param_4",
                    "3": "param_4_copy",
                    "4": "param4"
                }
            },
            "called": [
                "FUN_0800542a",
                "FUN_08005430",
                "FUN_08003760",
                "FUN_08004728"
            ],
            "calling": [
                "FUN_08002a58"
            ],
            "code": "\nint process_data_08007e74(int data_offset,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int initial_data;\n  int result;\n  uint difference;\n  int result;\n  int offset;\n  undefined4 param4_copy;\n  \n  param4_copy = param4;\n  initial_data = get_initial_value();\n  difference = 0;\n  result = 2;\n  do {\n    offset = data_offset + 4;\n    result = process_data_08007e74(offset,param2,param3,param4,param4_copy);\n    if (result == 0) {\n      result = 0;\n      while ((result = get_byte_value(offset), result != 0x20 && (result == 0))) {\n        result = get_initial_value();\n        difference = result - initial_data;\n        if (difference < 0x65) {\n          result = get_value(offset);\n          if (result != 0) {\n            result = 2;\n          }\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    result = get_value(offset);\n  } while ((result == 4) && (difference < 100));\n  return result;\n}\n\n",
            "current_name": "process_data_08007e74",
            "entrypoint": "0x08007e74",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007e74": "process_data_08007e74",
                "get_byte_from_offset_0800542a": "get_byte_value",
                "get_data_08003760": "get_initial_value",
                "get_value_from_offset_08005430": "get_value",
                "iVar1": "initial_data",
                "iVar2": "result",
                "iVar4": "result",
                "iVar5": "offset",
                "param_1": "data_offset",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "process_data_08004728": "process_data",
                "uVar3": "difference",
                "uVar6": "param4_copy"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007ede": {
            "additional_data": {
                "FUN_08007ede": {
                    "1": "copy_to_memory",
                    "15": "copy_data",
                    "2": "copy_data_to_memory"
                },
                "param_1": {
                    "1": "dst_address",
                    "3": "dest_ptr",
                    "4": "dest_address",
                    "5": "destination_address",
                    "7": "destination"
                },
                "param_2": {
                    "1": "source_buffer",
                    "3": "src_ptr",
                    "4": "src",
                    "5": "source_address",
                    "7": "source"
                },
                "param_3": {
                    "1": "copy_length",
                    "4": "data_length",
                    "5": "num_bytes",
                    "6": "size",
                    "8": "length"
                },
                "uVar1": {
                    "1": "current_index",
                    "10": "i",
                    "13": "index",
                    "4": "counter"
                }
            },
            "called": [],
            "calling": [
                "FUN_080027f0",
                "FUN_0800288c"
            ],
            "code": "\nundefined4 copy_data_08007ede(int destination,int source,uint length)\n\n{\n  uint index;\n  \n  if (0x20 < length) {\n    return 2;\n  }\n  for (index = 0; index < length; index = index + 1 & 0xff) {\n    *(undefined *)(destination + index + 0x68) = *(undefined *)(source + index);\n    *(char *)(destination + 0x88) = *(char *)(destination + 0x88) + '\\x01';\n  }\n  return 0;\n}\n\n",
            "current_name": "copy_data_08007ede",
            "entrypoint": "0x08007ede",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007ede": "copy_data_08007ede",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "uVar1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007f0e": {
            "additional_data": {
                "FUN_08007f0e": {
                    "1": "process_data_and_get_result",
                    "14": "process_data",
                    "8": "process_and_check_data"
                },
                "get_byte_from_offset_0800542a": {
                    "2": "get_byte"
                },
                "get_data_08003760": {
                    "1": "get_data"
                },
                "get_value_from_offset_08005430": {
                    "2": "get_value_from_offset"
                },
                "iVar1": {
                    "1": "base_data",
                    "2": "data_offset",
                    "3": "data_start",
                    "4": "base_value",
                    "7": "initial_data",
                    "9": "initial_value"
                },
                "iVar2": {
                    "1": "processing_result",
                    "13": "result",
                    "2": "data_value",
                    "4": "process_result",
                    "5": "value"
                },
                "iVar4": {
                    "1": "validity_flag",
                    "11": "result",
                    "2": "loop_condition",
                    "9": "status"
                },
                "iVar5": {
                    "1": "data_offset",
                    "12": "offset",
                    "2": "current_offset",
                    "3": "temp_offset"
                },
                "param_1": {
                    "1": "input_address",
                    "2": "input",
                    "3": "input_param",
                    "4": "data_ptr",
                    "8": "data_offset"
                },
                "param_2": {
                    "1": "param1",
                    "10": "param_2",
                    "15": "param2",
                    "2": "parameter_2"
                },
                "param_3": {
                    "1": "parameter2",
                    "10": "param_3",
                    "15": "param3",
                    "2": "param_b"
                },
                "param_4": {
                    "1": "parameter3",
                    "10": "param_4",
                    "15": "param4",
                    "2": "parameter_4"
                },
                "process_data_080047f4": {
                    "1": "process_data_helper",
                    "2": "process_data"
                },
                "uVar3": {
                    "1": "value_difference",
                    "2": "offset_difference",
                    "23": "difference",
                    "3": "data_difference"
                },
                "uVar6": {
                    "1": "local_param4",
                    "2": "temp_param4",
                    "4": "temp_param",
                    "7": "param4_copy"
                }
            },
            "called": [
                "FUN_0800542a",
                "FUN_08005430",
                "FUN_08003760",
                "FUN_080047f4"
            ],
            "calling": [
                "FUN_08002b68"
            ],
            "code": "\nint process_data_08007f0e(int input_data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int initial_value;\n  int result;\n  uint difference;\n  int result;\n  int offset;\n  undefined4 param_4_copy;\n  \n  param_4_copy = param4;\n  initial_value = get_initial_value();\n  difference = 0;\n  result = 2;\n  do {\n    offset = input_data + 4;\n    result = process_data_08007f0e(offset,param2,param3,param4,param_4_copy);\n    if (result == 0) {\n      result = 0;\n      while ((result = get_byte_from_offset(offset), result != 0x20 && (result == 0))) {\n        result = get_initial_value();\n        difference = result - initial_value;\n        if (difference < 0x65) {\n          result = get_value_from_offset(offset);\n          if (result != 0) {\n            result = 2;\n          }\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    result = get_value_from_offset(offset);\n  } while ((result == 4) && (difference < 100));\n  return result;\n}\n\n",
            "current_name": "process_data_08007f0e",
            "entrypoint": "0x08007f0e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007f0e": "process_data_08007f0e",
                "get_byte_from_offset_0800542a": "get_byte_from_offset",
                "get_data_08003760": "get_initial_value",
                "get_value_from_offset_08005430": "get_value_from_offset",
                "iVar1": "initial_value",
                "iVar2": "result",
                "iVar4": "result",
                "iVar5": "offset",
                "param_1": "input_data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "process_data_080047f4": "process_data",
                "uVar3": "difference",
                "uVar6": "param_4_copy"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007f78": {
            "additional_data": {
                "FUN_08007f78": {
                    "1": "add_four",
                    "30": "subtract_four"
                },
                "param_1": {
                    "1": "new_number",
                    "2": "input_num",
                    "4": "input_number",
                    "5": "result",
                    "6": "num",
                    "8": "input"
                },
                "param_2": {
                    "1": "new_var"
                },
                "return": {
                    "6": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_08008020",
                "FUN_08007ff0",
                "FUN_08007fa0"
            ],
            "code": "\nint subtract_four_08007f78(int input)\n\n{\n  result input + -4;\n}\n\n",
            "current_name": "subtract_four_08007f78",
            "entrypoint": "0x08007f78",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007f78": "subtract_four_08007f78",
                "param_1": "input",
                "return": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007f7c": {
            "additional_data": {
                "FUN_08007f7c": {
                    "1": "update_param_1",
                    "2": "update_param_and_initialize_data",
                    "24": "update_data"
                },
                "initialize_data_080049e0": {
                    "1": "initialize_data_func",
                    "6": "initialize_data"
                },
                "param_1": {
                    "1": "input_data",
                    "11": "data_ptr",
                    "2": "base_address",
                    "3": "data",
                    "6": "data_address"
                },
                "param_1 + 0x60": {
                    "1": "data_ptr_offset"
                },
                "param_1 + 4": {
                    "1": "data_offset"
                },
                "param_2": {
                    "1": "new_data",
                    "22": "new_value",
                    "6": "value"
                }
            },
            "called": [
                "FUN_080049e0"
            ],
            "calling": [
                "FUN_08002968"
            ],
            "code": "\nvoid update_data_08007f7c(int data_ptr,int new_value)\n\n{\n  if (data_ptr != 0) {\n    if (new_value != 0) {\n      *(int *)(data_ptr + 0x60) = new_value;\n      initialize_data(data_ptr + 4);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "update_data_08007f7c",
            "entrypoint": "0x08007f7c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007f7c": "update_data_08007f7c",
                "initialize_data_080049e0": "initialize_data",
                "param_1": "data_ptr",
                "param_2": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007f8e": {
            "additional_data": {
                "FUN_08007f8e": {
                    "1": "update_parameter",
                    "2": "initialize_data",
                    "20": "update_data",
                    "4": "update_param_and_initialize_data"
                },
                "initialize_data_080049e0": {
                    "5": "initialize_data"
                },
                "param_1": {
                    "1": "input_param",
                    "12": "data_ptr",
                    "2": "data_pointer",
                    "7": "data_address"
                },
                "param_1 + 100": {
                    "1": "data_ptr_offset"
                },
                "param_1 + 4": {
                    "1": "data_ptr_initialized"
                },
                "param_2": {
                    "1": "data_param",
                    "19": "new_value",
                    "2": "new_data",
                    "6": "value"
                }
            },
            "called": [
                "FUN_080049e0"
            ],
            "calling": [
                "FUN_08002968"
            ],
            "code": "\nvoid update_data_08007f8e(int data_ptr,int new_value)\n\n{\n  if (data_ptr != 0) {\n    if (new_value != 0) {\n      *(int *)(data_ptr + 100) = new_value;\n      initialize_data(data_ptr + 4);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "update_data_08007f8e",
            "entrypoint": "0x08007f8e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007f8e": "update_data_08007f8e",
                "initialize_data_080049e0": "initialize_data",
                "param_1": "data_ptr",
                "param_2": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007fa0": {
            "additional_data": {
                "*(code **)(iVar1 + 100)": {
                    "1": "ptr_var1_plus_100"
                },
                "*(int *)(param_1 + 0xc)": {
                    "1": "input_param_address_offset"
                },
                "*(undefined *)(iVar1 + 0x5c)": {
                    "1": "flag2"
                },
                "*(undefined *)(iVar1 + 0x88)": {
                    "1": "ptr_var1_plus_0x88"
                },
                "0x0": {
                    "1": "null_pointer"
                },
                "0x5c": {
                    "1": "var2_offset"
                },
                "0x88": {
                    "1": "var1_offset"
                },
                "0xc": {
                    "1": "offset"
                },
                "100": {
                    "1": "func_offset"
                },
                "FUN_08007fa0": {
                    "1": "handle_parameters",
                    "13": "process_input",
                    "2": "initialize_parameters",
                    "3": "initialize_or_validate",
                    "4": "process_parameters"
                },
                "iVar1": {
                    "1": "var1",
                    "2": "temp_var",
                    "27": "result"
                },
                "initialize_parameters_080048c8": {
                    "1": "initialize",
                    "19": "initialize_parameters",
                    "2": "initialize_parameters_helper",
                    "7": "initialize_params"
                },
                "param_1": {
                    "1": "input_param_1",
                    "2": "input_param",
                    "5": "input_ptr",
                    "6": "input_data"
                },
                "param_2": {
                    "1": "input_2",
                    "22": "flag"
                },
                "param_3": {
                    "1": "desired_value",
                    "2": "value",
                    "3": "param_value",
                    "5": "comparison_value"
                },
                "param_4": {
                    "1": "param_four",
                    "2": "additional_data",
                    "3": "parameter",
                    "4": "param"
                },
                "subtract_four_08007f78": {
                    "1": "get_result",
                    "2": "calculate_result",
                    "24": "subtract_four"
                },
                "validate_input_08004954": {
                    "1": "validate",
                    "28": "validate_input"
                }
            },
            "called": [
                "FUN_08007f78",
                "FUN_08004954",
                "FUN_080048c8"
            ],
            "calling": [
                "FUN_08004ac2"
            ],
            "code": "\nvoid process_input_08007fa0(int input_address,int flag,int comparison_value,undefined4 param_4)\n\n{\n  int result;\n  \n  result = subtract_four();\n  if (comparison_value == *(int *)(input_address + 0xc)) {\n    if (flag == 0) {\n      *(undefined *)(result + 0x88) = 0;\n      *(undefined *)(result + 0x5c) = 0;\n      if (*(code **)(result + 100) != (code *)0x0) {\n        (**(code **)(result + 100))();\n      }\n      initialize_parameters(input_address,result + 0x68,*(undefined *)(result + 0x88),8);\n      return;\n    }\n    *(undefined *)(result + 0x5c) = 1;\n    validate_input(input_address,result + 0x68,0x20,8,param_4);\n  }\n  return;\n}\n\n",
            "current_name": "process_input_08007fa0",
            "entrypoint": "0x08007fa0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007fa0": "process_input_08007fa0",
                "iVar1": "result",
                "initialize_parameters_080048c8": "initialize_parameters",
                "param_1": "input_address",
                "param_2": "flag",
                "param_3": "comparison_value",
                "subtract_four_08007f78": "subtract_four",
                "validate_input_08004954": "validate_input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007ff0": {
            "additional_data": {
                "' '": {
                    "1": "space_char"
                },
                "(char *)": {
                    "1": "char_pointer"
                },
                "(char *)(result + 0x2c)": {
                    "1": "character"
                },
                "(char *)(result + 0x5c)": {
                    "1": "flag"
                },
                "(char *)0x01": {
                    "1": "true_char"
                },
                "(char *)0x1": {
                    "1": "flag"
                },
                "(char *)0x20": {
                    "1": "space"
                },
                "(char *)0x2c": {
                    "1": "char_ptr"
                },
                "(char *)0x5c": {
                    "1": "flag_ptr"
                },
                "(char *)0x60": {
                    "1": "function_ptr"
                },
                "(code *)0x0": {
                    "2": "null"
                },
                "(code **)": {
                    "1": "function_ptr",
                    "2": "function_pointer"
                },
                "(code **)(result + 0x60)": {
                    "1": "function_address_ptr"
                },
                "(result + 0x68)": {
                    "1": "argument"
                },
                "*(char *)(iVar1 + 0x2c)": {
                    "1": "is_space_character"
                },
                "*(char *)(iVar1 + 0x5c)": {
                    "1": "condition_char"
                },
                "*(code **)(iVar1 + 0x60)": {
                    "1": "function_pointer"
                },
                "FUN_08007ff0": {
                    "1": "execute_operation",
                    "2": "execute_action",
                    "5": "initialize_and_execute",
                    "9": "execute_function"
                },
                "code": {
                    "6": "function_pointer"
                },
                "data_080049e0": {
                    "1": "data_initializer"
                },
                "iVar1": {
                    "1": "subtract_four_result",
                    "2": "subtracted_value",
                    "21": "result",
                    "5": "subtraction_result"
                },
                "initialize_data_080049e0": {
                    "24": "initialize_data"
                },
                "param_1": {
                    "1": "unknown_parameter",
                    "2": "parameter",
                    "4": "param",
                    "5": "input_param",
                    "8": "input_parameter"
                },
                "subtract_four_08007f78": {
                    "1": "get_function_and_data_pointers",
                    "2": "perform_subtraction",
                    "4": "get_function_address",
                    "8": "get_function_pointer"
                }
            },
            "called": [
                "FUN_08007f78",
                "FUN_080049e0"
            ],
            "calling": [
                "FUN_08004f3c",
                "FUN_08004aec",
                "FUN_08005084"
            ],
            "code": "\nvoid execute_function_08007ff0(undefined4 input_parameter)\n\n{\n  int result;\n  \n  result = get_function_pointer();\n  if (((*(function_pointer **)(result + 0x60) != (function_pointer *)0x0) && (*(char *)(result + 0x5c) == '\\x01')) &&\n     (*(char *)(result + 0x2c) != ' ')) {\n    (**(function_pointer **)(result + 0x60))(result + 0x68);\n  }\n  initialize_data(input_parameter);\n  return;\n}\n\n",
            "current_name": "execute_function_08007ff0",
            "entrypoint": "0x08007ff0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007ff0": "execute_function_08007ff0",
                "code": "function_pointer",
                "data_080049e0": "data_initializer",
                "iVar1": "result",
                "initialize_data_080049e0": "initialize_data",
                "param_1": "input_parameter",
                "subtract_four_08007f78": "get_function_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008020": {
            "additional_data": {
                "*(char *)(iVar1 + 0x5d)": {
                    "1": "is_data_initialized"
                },
                "0x5d": {
                    "1": "offset"
                },
                "FUN_08008020": {
                    "1": "initialize_data_if_needed",
                    "11": "check_and_initialize_data",
                    "7": "initialize_if_data_not_initialized"
                },
                "PTR_080049e0": {
                    "1": "data_memory"
                },
                "iVar1": {
                    "1": "result_var",
                    "27": "result"
                },
                "initialize_data_080049e0": {
                    "1": "initialize_data_if_not_initialized",
                    "18": "initialize_data",
                    "2": "initialize_data_function"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "param",
                    "4": "arg",
                    "5": "data",
                    "7": "input_param"
                },
                "subtract_four_08007f78": {
                    "1": "get_value_to_subtract_four",
                    "2": "perform_subtraction",
                    "4": "get_offset",
                    "9": "subtract_four"
                }
            },
            "called": [
                "FUN_08007f78",
                "FUN_080049e0"
            ],
            "calling": [
                "FUN_08004f3c"
            ],
            "code": "\nvoid check_and_initialize_data_08008020(undefined4 input_param)\n\n{\n  int result;\n  \n  result = subtract_four();\n  if (*(char *)(result + 0x5d) == '\\0') {\n    initialize_data(input_param);\n  }\n  return;\n}\n\n",
            "current_name": "check_and_initialize_data_08008020",
            "entrypoint": "0x08008020",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008020": "check_and_initialize_data_08008020",
                "iVar1": "result",
                "initialize_data_080049e0": "initialize_data",
                "param_1": "input_param",
                "subtract_four_08007f78": "subtract_four"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008078": {
            "additional_data": {
                "&DAT_0800a81c": {
                    "1": "uart_pin2_data"
                },
                "&DAT_0800a864": {
                    "1": "uart_pin1_data"
                },
                "&DAT_200006c0": {
                    "1": "data_array"
                },
                "(&DAT_200006c0)[*(byte *)(param_1 + 0x11)]": {
                    "1": "uart_pin_data"
                },
                "(uVar4 << 0x11) >> 0x19)": {
                    "1": "peripheral_configuration_cases"
                },
                "*(char *)((int)param_1 + 0x59)": {
                    "1": "uart_pin2_char"
                },
                "*(char *)(param_1 + 0x16)": {
                    "1": "uart_pin1_char"
                },
                "*(param_1 + 0x11)": {
                    "1": "uart_mode"
                },
                "*(param_1 + 0x12)": {
                    "1": "uart_pin_setting1"
                },
                "*(param_1 + 0x13)": {
                    "1": "uart_pin_setting2"
                },
                "*(param_1 + 0x14)": {
                    "1": "uart_pin_setting3"
                },
                "*(param_1 + 0x15)": {
                    "1": "uart_pin_setting4"
                },
                "*(param_1 + 0x16)": {
                    "1": "uart_pin_selection1"
                },
                "*(param_1 + 0x59)": {
                    "1": "uart_pin_selection2"
                },
                "*(undefined *)((int)param_1 + 0x5a)": {
                    "1": "pin_subregister2"
                },
                "*(undefined *)(param_1 + 0x11)": {
                    "1": "peripheral_pin_configuration_1"
                },
                "*param_1": {
                    "1": "uart_configuration_value"
                },
                "DAT_080098d8": {
                    "1": "error_message_function"
                },
                "DAT_0800a81c": {
                    "1": "uart_2_values"
                },
                "DAT_0800a864": {
                    "1": "uart_pin_lookup_table_1"
                },
                "DAT_08010004": {
                    "1": "register_value"
                },
                "DAT_200006c0": {
                    "1": "uart_pin_register",
                    "2": "uart_pin_data"
                },
                "DAT_40010004": {
                    "1": "gpioa_moder"
                },
                "FUN_08008078": {
                    "1": "configure_uart_peripheral",
                    "13": "initialize_uart_pins",
                    "2": "configure_uart_pins",
                    "3": "initialize_uart_pin"
                },
                "PTR_080040e8": {
                    "1": "update_registers_080040e8"
                },
                "PTR_0800674e": {
                    "1": "initialize_data_0800674e"
                },
                "PTR_08006bb8": {
                    "1": "configure_peripheral_08006bb8"
                },
                "PTR_08007320": {
                    "1": "find_value_or_default_08007320"
                },
                "PTR_08007376": {
                    "1": "get_value_index_08007376"
                },
                "PTR_080073ae": {
                    "1": "compare_and_return_smaller_080073ae"
                },
                "_DAT_40010004": {
                    "1": "register5",
                    "2": "register_5"
                },
                "_DAT_4002100c": {
                    "1": "register_a",
                    "2": "uart_pin_register_1",
                    "4": "register1",
                    "5": "uart_register1"
                },
                "_DAT_40021010": {
                    "1": "uart2_port_control",
                    "2": "register_3",
                    "3": "uart_register3",
                    "4": "register3"
                },
                "_DAT_40021018": {
                    "1": "uart1_reg2",
                    "2": "uart_pin_register_2",
                    "4": "register2",
                    "5": "uart_register2"
                },
                "_DAT_4002101c": {
                    "1": "uart_reg4",
                    "2": "register_4",
                    "3": "uart_register4",
                    "4": "register4"
                },
                "compare_and_return_smaller_080073ae": {
                    "1": "return_smaller_value",
                    "2": "compare_values",
                    "8": "compare_and_return_smaller"
                },
                "configure_peripheral_08006bb8": {
                    "1": "configure_peripherals",
                    "12": "configure_peripheral"
                },
                "difference": {
                    "1": "uart_pins_difference"
                },
                "evaluate_value_or_default_08007320": {
                    "1": "find_uart_value_or_default"
                },
                "find_value_or_default_08007320": {
                    "1": "find_value",
                    "7": "find_value_or_default"
                },
                "get_value_index_08007376": {
                    "12": "get_value_index",
                    "2": "get_uart_value_index"
                },
                "iVar1": {
                    "1": "uart_peripheral",
                    "2": "uart_pin",
                    "3": "peripheral1",
                    "4": "uart_pin1",
                    "5": "uart_pin_value"
                },
                "iVar2": {
                    "1": "uart_pin_2_value",
                    "2": "uart_pin_2",
                    "3": "peripheral_value",
                    "4": "uart_pin_value2",
                    "5": "uart_pin2_value"
                },
                "initialize_data_0800674e": {
                    "1": "initialize_uart_data",
                    "14": "initialize_data"
                },
                "local_14": {
                    "1": "configured_peripheral_2",
                    "2": "constant_value",
                    "3": "register_value",
                    "6": "register_count"
                },
                "local_18": {
                    "1": "shift_offset",
                    "2": "value_index_shifted"
                },
                "local_1c": {
                    "1": "temp1",
                    "2": "pin_index"
                },
                "local_20": {
                    "1": "pin_bit_mask",
                    "10": "pin_mask",
                    "2": "uart_pin_mask",
                    "3": "pin_bitmask"
                },
                "param_1": {
                    "1": "pin_array",
                    "17": "uart_pins",
                    "2": "uart_pin",
                    "3": "uart_config"
                },
                "param_1[1]": {
                    "1": "pin_configuration_pointer_1"
                },
                "param_1[2]": {
                    "1": "pin_configuration_pointer_2"
                },
                "param_1[3]": {
                    "1": "pin_configuration_pointer_3"
                },
                "param_1[4]": {
                    "1": "pin_configuration_pointer_4"
                },
                "param_1[5]": {
                    "1": "pin_configuration_pointer_5"
                },
                "param_1[6]": {
                    "1": "pin_configuration_pointer_6"
                },
                "param_1[7]": {
                    "1": "pin_configuration_pointer_7"
                },
                "param_1[8]": {
                    "1": "pin_configuration_pointer_8"
                },
                "process_and_initialize_data_080098d8": {
                    "1": "process_data_error",
                    "2": "print_error_message",
                    "6": "process_and_initialize_data"
                },
                "uVar3": {
                    "1": "configured_pin",
                    "2": "config1",
                    "3": "peripheral_config",
                    "7": "peripheral_config1"
                },
                "uVar4": {
                    "1": "peripheral_config2",
                    "2": "index",
                    "22": "value_index"
                },
                "update_registers_080040e8": {
                    "12": "update_registers",
                    "2": "update_uart_registers"
                }
            },
            "called": [
                "FUN_08007320",
                "FUN_080040e8",
                "FUN_080073ae",
                "FUN_0800674e",
                "FUN_080098d8",
                "FUN_08007376",
                "FUN_08006bb8"
            ],
            "calling": [
                "FUN_080084b0",
                "FUN_08008c44"
            ],
            "code": "\n\n\nvoid initialize_uart_pins_08008078(int *uart_pins)\n\n{\n  int uart_pin_value;\n  int uart_pin2_value;\n  undefined4 peripheral_config1;\n  uint value_index;\n  uint pin_mask;\n  uint pin_index;\n  uint value_index_shifted;\n  undefined4 register_count;\n  \n  if (uart_pins != (int *)0x0) {\n    uart_pin_value = find_value_or_default((int)*(char *)(uart_pins + 0x16),&DAT_0800a864);\n    uart_pin2_value = find_value_or_default((int)*(char *)((int)uart_pins + 0x59),&DAT_0800a81c);\n    if ((uart_pin2_value == 0) || (uart_pin_value == 0)) {\n      process_and_initialize_data(\"ERROR: at least one UART pin has no peripheral\\n\",uart_pin2_value);\n    }\n    else {\n      uart_pin_value = compare_and_return_smaller(uart_pin_value);\n      *uart_pins = uart_pin_value;\n      if (uart_pin_value == 0) {\n        process_and_initialize_data(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (uart_pin_value == 0x40013800) {\n          _DAT_4002100c = _DAT_4002100c & 0xffffbfff;\n          _DAT_40021018 = _DAT_40021018 | 0x4000;\n          *(undefined *)(uart_pins + 0x11) = 0;\n          *(undefined *)((int)uart_pins + 0x5a) = 0x25;\n        }\n        else if (uart_pin_value == 0x40004400) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffdffff;\n          _DAT_4002101c = _DAT_4002101c | 0x20000;\n          *(undefined *)(uart_pins + 0x11) = 1;\n          *(undefined *)((int)uart_pins + 0x5a) = 0x26;\n        }\n        else if (uart_pin_value == 0x40004800) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffbffff;\n          _DAT_4002101c = _DAT_4002101c | 0x40000;\n          *(undefined *)(uart_pins + 0x11) = 2;\n          *(undefined *)((int)uart_pins + 0x5a) = 0x27;\n        }\n        peripheral_config1 = configure_peripheral((uint)((int)*(char *)((int)uart_pins + 0x59) << 0x18) >> 0x1c);\n        value_index = get_value_index((int)*(char *)((int)uart_pins + 0x59),&DAT_0800a81c);\n        pin_mask = 1 << (*(byte *)((int)uart_pins + 0x59) & 0xf) & 0xffff;\n        pin_index = (value_index >> 3 & 1) << 4 | value_index & 7;\n        value_index_shifted = (value_index << 0x1a) >> 0x1e;\n        _DAT_40021018 = _DAT_40021018 | 1;\n        switch((value_index << 0x11) >> 0x19) {\n        case 1:\n          _DAT_40010004 = _DAT_40010004 | 0x7000001;\n          break;\n        case 2:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          _DAT_40010004 = _DAT_40010004 | 0x7000002;\n          break;\n        case 4:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          _DAT_40010004 = _DAT_40010004 | 0x7000004;\n          break;\n        case 6:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          _DAT_40010004 = _DAT_40010004 | 0x7000008;\n          break;\n        case 8:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          _DAT_40010004 = _DAT_40010004 | 0x7000030;\n          break;\n        case 10:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n          break;\n        case 0xd:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          _DAT_40010004 = _DAT_40010004 | 0x7000300;\n          break;\n        case 0x10:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n          break;\n        case 0x14:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          _DAT_40010004 = _DAT_40010004 | 0x7001000;\n          break;\n        case 0x17:\n          _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          _DAT_40010004 = _DAT_40010004 | 0x7008000;\n          break;\n        case 0x1c:\n          _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n          break;\n        case 0x22:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n        }\n        register_count = 3;\n        update_registers(peripheral_config1,&pin_mask);\n        peripheral_config1 = configure_peripheral((uint)((int)*(char *)(uart_pins + 0x16) << 0x18) >> 0x1c);\n        value_index = get_value_index((int)*(char *)(uart_pins + 0x16),&DAT_0800a864);\n        pin_mask = 1 << (*(byte *)(uart_pins + 0x16) & 0xf) & 0xffff;\n        pin_index = (value_index >> 3 & 1) << 4 | value_index & 7;\n        value_index_shifted = (value_index << 0x1a) >> 0x1e;\n        update_registers(peripheral_config1,&pin_mask);\n        (&DAT_200006c0)[*(byte *)(uart_pins + 0x11)] = uart_pins + 1;\n        pin_configuration_pointer_1 = *uart_pins;\n        pin_configuration_pointer_2 = uart_pins[0x12];\n        pin_configuration_pointer_3 = uart_pins[0x13];\n        pin_configuration_pointer_4 = uart_pins[0x14];\n        pin_configuration_pointer_5 = uart_pins[0x15];\n        pin_configuration_pointer_6 = 0xc;\n        pin_configuration_pointer_7 = 0;\n        pin_configuration_pointer_8 = 0;\n        initialize_data(uart_pins + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_uart_pins_08008078",
            "entrypoint": "0x08008078",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008078": "initialize_uart_pins_08008078",
                "compare_and_return_smaller_080073ae": "compare_and_return_smaller",
                "configure_peripheral_08006bb8": "configure_peripheral",
                "find_value_or_default_08007320": "find_value_or_default",
                "get_value_index_08007376": "get_value_index",
                "iVar1": "uart_pin_value",
                "iVar2": "uart_pin2_value",
                "initialize_data_0800674e": "initialize_data",
                "local_14": "register_count",
                "local_18": "value_index_shifted",
                "local_1c": "pin_index",
                "local_20": "pin_mask",
                "param_1": "uart_pins",
                "param_1[1]": "pin_configuration_pointer_1",
                "param_1[2]": "pin_configuration_pointer_2",
                "param_1[3]": "pin_configuration_pointer_3",
                "param_1[4]": "pin_configuration_pointer_4",
                "param_1[5]": "pin_configuration_pointer_5",
                "param_1[6]": "pin_configuration_pointer_6",
                "param_1[7]": "pin_configuration_pointer_7",
                "param_1[8]": "pin_configuration_pointer_8",
                "process_and_initialize_data_080098d8": "process_and_initialize_data",
                "uVar3": "peripheral_config1",
                "uVar4": "value_index",
                "update_registers_080040e8": "update_registers"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080084b0": {
            "additional_data": {
                "&DAT_0800a81c": {
                    "1": "character_array"
                },
                "&DAT_0800a864": {
                    "1": "value_array"
                },
                "&DAT_2000001c": {
                    "1": "pin_data"
                },
                "DAT_0800a81c": {
                    "2": "character_data"
                },
                "DAT_0800a864": {
                    "2": "default_values"
                },
                "DAT_2000001c": {
                    "2": "uart_pins"
                },
                "DAT_20000064": {
                    "1": "constant_number"
                },
                "DAT_20000068": {
                    "1": "flag2"
                },
                "DAT_2000006c": {
                    "1": "uart_pin3"
                },
                "DAT_20000070": {
                    "1": "value2"
                },
                "DAT_20000074": {
                    "1": "parameter_count"
                },
                "DAT_20000075": {
                    "6": "character_index"
                },
                "FUN_080084b0": {
                    "1": "initialize_uart_configuration",
                    "25": "initialize_uart",
                    "4": "initialize_uart_pins"
                },
                "find_character_index_0800734a": {
                    "7": "find_character_index"
                },
                "find_value_or_default_08007320": {
                    "7": "find_value_or_default"
                },
                "iVar1": {
                    "1": "value_or_default",
                    "10": "value1",
                    "2": "value_found",
                    "4": "value",
                    "7": "result"
                },
                "initialize_uart_pins_08008078": {
                    "1": "enable_uart_pins",
                    "6": "initialize_uart_pins"
                },
                "uVar2": {
                    "1": "value_or_default2",
                    "10": "value2",
                    "2": "character_index",
                    "4": "value",
                    "6": "default_value"
                }
            },
            "called": [
                "FUN_0800734a",
                "FUN_08007320",
                "FUN_08008078"
            ],
            "calling": [
                "FUN_08008500"
            ],
            "code": "\nvoid initialize_uart_080084b0(void)\n\n{\n  int value1;\n  undefined4 value2;\n  \n  value1 = find_value_or_default(2,&DAT_0800a864);\n  if (value1 != 0) {\n    value2 = find_value_or_default(2,&DAT_0800a864);\n    DAT_20000075 = find_character_index(value2,&DAT_0800a81c);\n    DAT_20000074 = 2;\n    DAT_20000064 = 0x2580;\n    DAT_20000070 = 0;\n    DAT_20000068 = 0;\n    DAT_2000006c = 0;\n    initialize_uart_080084b0_pins(&DAT_2000001c);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_uart_080084b0",
            "entrypoint": "0x080084b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080084b0": "initialize_uart_080084b0",
                "find_character_index_0800734a": "find_character_index",
                "find_value_or_default_08007320": "find_value_or_default",
                "iVar1": "value1",
                "initialize_uart_pins_08008078": "initialize_uart_pins",
                "uVar2": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008500": {
            "additional_data": {
                "&DAT_0800a864": {
                    "1": "default_data",
                    "4": "default_value"
                },
                "&DAT_200006c0": {
                    "8": "data_array"
                },
                "DAT_0800a864": {
                    "3": "default_value"
                },
                "DAT_20000060": {
                    "1": "data_limit",
                    "5": "uart_value"
                },
                "DAT_200006c0": {
                    "1": "data_array"
                },
                "FUN_08008500": {
                    "1": "process_data_with_conditions",
                    "11": "process_data",
                    "6": "process_and_check_data",
                    "7": "process_and_validate_data"
                },
                "find_value_or_default_08007320": {
                    "7": "find_value_or_default"
                },
                "get_data_08003760": {
                    "1": "get_initial_value",
                    "8": "get_data"
                },
                "iVar1": {
                    "1": "data_offset",
                    "10": "data1",
                    "2": "initial_value",
                    "3": "data_value",
                    "9": "data_1"
                },
                "iVar2": {
                    "1": "data_after",
                    "2": "value_or_default",
                    "3": "value",
                    "4": "found_value",
                    "9": "data_2"
                },
                "initialize_uart_080084b0": {
                    "11": "initialize_uart"
                },
                "param_1": {
                    "1": "param",
                    "2": "value",
                    "3": "status",
                    "5": "input_param",
                    "7": "input_data"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "data_value",
                    "5": "value",
                    "6": "flags"
                },
                "process_data_080067ac": {
                    "1": "process_data_item",
                    "9": "process_data"
                },
                "uVar3": {
                    "1": "array_index",
                    "21": "index",
                    "3": "loop_counter",
                    "6": "counter"
                }
            },
            "called": [
                "FUN_08007320",
                "FUN_080084b0",
                "FUN_080067ac",
                "FUN_08003760"
            ],
            "calling": [
                "FUN_0800885c"
            ],
            "code": "\nuint process_data_08008500(undefined4 input_data,uint flags)\n\n{\n  int data1;\n  int data_2;\n  uint index;\n  \n  data1 = get_data();\n  data_2 = find_value_or_default(2,&DAT_0800a864);\n  if (data_2 == 0) {\n    return 0;\n  }\n  for (index = 0;\n      (index < 5 &&\n      (((&DAT_200006c0)[index] == 0 ||\n       (data_2 = find_value_or_default(2,&DAT_0800a864), *(int *)(&DAT_200006c0)[index] != data_2))));\n      index = index + 1 & 0xff) {\n  }\n  if (4 < index) {\n    if ((4 < DAT_20000060) && (initialize_uart(), 4 < DAT_20000060)) {\n      return 0;\n    }\n    index = (uint)DAT_20000060;\n  }\n  do {\n    data_2 = process_data_08008500((&DAT_200006c0)[index],input_data,flags & 0xffff,1000);\n    if (data_2 == 0) {\n      return flags;\n    }\n    data_2 = get_data();\n  } while ((uint)(data_2 - data1) < 1000);\n  return 0;\n}\n\n",
            "current_name": "process_data_08008500",
            "entrypoint": "0x08008500",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008500": "process_data_08008500",
                "find_value_or_default_08007320": "find_value_or_default",
                "get_data_08003760": "get_data",
                "iVar1": "data1",
                "iVar2": "data_2",
                "initialize_uart_080084b0": "initialize_uart",
                "param_1": "input_data",
                "param_2": "flags",
                "process_data_080067ac": "process_data",
                "uVar3": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080085b8": {
            "additional_data": {
                "&DAT_200006c0": {
                    "2": "data_array"
                },
                "(*(byte *)(param_1 + 0x44))": {
                    "1": "byte_value"
                },
                "(uVar1 & 0x22) == 0x22": {
                    "1": "is_condition_satisfied"
                },
                "*(&DAT_200006c0)[*(byte *)(input_value + 0x44)]": {
                    "1": "data_byte"
                },
                "*(&DAT_200006c0)[*(byte *)(param_1 + 0x44)]": {
                    "1": "character"
                },
                "*(*byte *)(param_1 + 0x44)": {
                    "1": "byte_value"
                },
                "*(byte *)(param_1 + 0x44)": {
                    "1": "data_index",
                    "5": "byte_value"
                },
                "0x22": {
                    "1": "desired_value",
                    "3": "mask"
                },
                "0x44": {
                    "1": "constant_offset"
                },
                "DAT_200006c0": {
                    "1": "byte_array_1"
                },
                "FUN_080085b8": {
                    "1": "is_bit_set",
                    "11": "check_combination",
                    "2": "is_flag_set",
                    "7": "is_combination_valid"
                },
                "byte": {
                    "1": "byte_value"
                },
                "combine_bytes_08006b1c": {
                    "1": "combine_bytes_helper",
                    "7": "combine_bytes"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "flag_value",
                    "22": "input_value",
                    "3": "input"
                },
                "uVar1": {
                    "26": "combined_bytes",
                    "5": "combined_value"
                }
            },
            "called": [
                "FUN_08006b1c"
            ],
            "calling": [
                "FUN_08008600",
                "FUN_0800863c"
            ],
            "code": "\nbool check_combination_080085b8(int input_value)\n\n{\n  uint combined_bytes;\n  \n  combined_bytes = combine_bytes((&DAT_200006c0)[*(byte_index *)(input_value + 0x44)]);\n  return (combined_bytes & 0x22) == 0x22;\n}\n\n",
            "current_name": "check_combination_080085b8",
            "entrypoint": "0x080085b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080085b8": "check_combination_080085b8",
                "byte": "byte_index",
                "combine_bytes_08006b1c": "combine_bytes",
                "param_1": "input_value",
                "uVar1": "combined_bytes"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080085dc": {
            "additional_data": {
                "&DAT_200006c0": {
                    "1": "byte_array"
                },
                "(&DAT_200006c0)[*(byte *)(param_1 + 0x44)]": {
                    "2": "byte_value"
                },
                "(combined_bytes & 0x21) == 0x21": {
                    "1": "is_combination_valid"
                },
                "(uVar1 & 0x21)": {
                    "1": "bitwise_result"
                },
                "(uVar1 & 0x21) == 0x21": {
                    "2": "is_valid_combination"
                },
                "*(&DAT_200006c0)[*(byte *)(data_index + 0x44)]": {
                    "1": "byte_to_combine"
                },
                "*(&DAT_200006c0)[*(byte *)(param_1 + 0x44)]": {
                    "1": "selected_byte"
                },
                "*((byte *)(param_1 + 0x44))": {
                    "1": "selected_byte"
                },
                "*(byte *)(param_1 + 0x44)": {
                    "1": "offset_value",
                    "4": "byte_value"
                },
                "*PTR_+0x44": {
                    "1": "byte_offset"
                },
                "*PTR_200006c0": {
                    "1": "byte_array"
                },
                "0x21": {
                    "1": "required_value"
                },
                "0x44": {
                    "1": "offset_value"
                },
                "DAT_200006c0": {
                    "1": "byte_data",
                    "3": "data_array"
                },
                "FUN_080085dc": {
                    "1": "is_desirable_value",
                    "2": "is_flag_set",
                    "6": "check_combination",
                    "7": "is_combination_valid"
                },
                "byte": {
                    "1": "character_value",
                    "2": "byte_value"
                },
                "byte param_1 + 0x44": {
                    "1": "byte_offset"
                },
                "combine_bytes_08006b1c": {
                    "1": "combine_bytes_function",
                    "7": "combine_bytes"
                },
                "param_1": {
                    "1": "character_address",
                    "2": "flag_value",
                    "23": "input_value"
                },
                "uVar1": {
                    "1": "combined_byte_value",
                    "2": "combined_value",
                    "26": "combined_bytes"
                }
            },
            "called": [
                "FUN_08006b1c"
            ],
            "calling": [],
            "code": "\nbool is_combination_valid_080085dc(int input_value)\n\n{\n  uint combined_bytes;\n  \n  combined_bytes = combine_bytes((&DAT_200006c0)[*(byte_value *)(input_value + 0x44)]);\n  return (combined_bytes & 0x21) == 0x21;\n}\n\n",
            "current_name": "is_combination_valid_080085dc",
            "entrypoint": "0x080085dc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080085dc": "is_combination_valid_080085dc",
                "byte": "byte_value",
                "combine_bytes_08006b1c": "combine_bytes",
                "param_1": "input_value",
                "uVar1": "combined_bytes"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008600": {
            "additional_data": {
                "&DAT_200006c0": {
                    "1": "data"
                },
                "*(byte *)(param_1 + 0x44)": {
                    "1": "byte_value"
                },
                "*(undefined *)(param_1 + 0x45)": {
                    "1": "input"
                },
                "DAT_200006c0": {
                    "1": "data_array"
                },
                "FUN_08008600": {
                    "1": "validate_and_extract_input",
                    "2": "extract_data_and_validate",
                    "4": "process_combination",
                    "5": "extract_combination",
                    "6": "process_input"
                },
                "check_combination_080085b8": {
                    "2": "check_combination"
                },
                "iVar1": {
                    "1": "result",
                    "17": "combination_check_result",
                    "4": "combination_check",
                    "5": "combination_result"
                },
                "param_1": {
                    "1": "param",
                    "10": "input_length",
                    "2": "input_data",
                    "4": "input_size",
                    "5": "input"
                },
                "param_1 + 0x45": {
                    "1": "data_offset"
                },
                "param_2": {
                    "1": "extracted_value_ptr",
                    "2": "extracted_data",
                    "20": "output",
                    "3": "output_data",
                    "4": "output_buffer"
                },
                "param_3": {
                    "1": "length",
                    "2": "validation_param_1",
                    "5": "size",
                    "8": "param_3"
                },
                "param_4": {
                    "1": "constant2",
                    "2": "validation_param_2",
                    "5": "arg2",
                    "9": "param_4"
                },
                "validate_input_080068d6": {
                    "3": "validate_input"
                }
            },
            "called": [
                "FUN_080085b8",
                "FUN_080068d6"
            ],
            "calling": [
                "FUN_08008b66"
            ],
            "code": "\nundefined4 process_input_08008600(int input_length,undefined *output,undefined4 param_3,undefined4 param_4)\n\n{\n  int combination_check_result;\n  \n  if (input_length == 0) {\n    return 0xffffffff;\n  }\n  combination_check_result = check_combination();\n  if (combination_check_result == 0) {\n    *output = *(undefined *)(input_length + 0x45);\n    validate_input((&DAT_200006c0)[*(byte *)(input_length + 0x44)],input_length + 0x45,1,&DAT_200006c0,param_4);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "process_input_08008600",
            "entrypoint": "0x08008600",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008600": "process_input_08008600",
                "check_combination_080085b8": "check_combination",
                "iVar1": "combination_check_result",
                "param_1": "input_length",
                "param_2": "output",
                "validate_input_080068d6": "validate_input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800863c": {
            "additional_data": {
                "&DAT_20000670": {
                    "1": "data_array"
                },
                "&DAT_200006c0": {
                    "1": "validation_array"
                },
                "(int)*(char *)(param_1 + 0x5a)": {
                    "1": "character_value"
                },
                "*(&DAT_20000670 + uVar2 * 4)": {
                    "1": "combination_values_ptr"
                },
                "*(&DAT_20000684 + uVar2 * 4)": {
                    "1": "combination_input_ptr"
                },
                "*(byte *)(param_1 + 0x44)": {
                    "1": "byte_offset"
                },
                "FUN_0800863c": {
                    "1": "store_combination",
                    "12": "update_combination",
                    "2": "store_input_combination",
                    "4": "process_input",
                    "5": "process_combination"
                },
                "check_combination_080085b8": {
                    "2": "check_combination"
                },
                "iVar1": {
                    "1": "combination_valid",
                    "11": "combination_check_result",
                    "12": "result",
                    "4": "combination_check"
                },
                "param_1": {
                    "1": "input_pointer",
                    "14": "input",
                    "2": "input_data",
                    "3": "input_ptr",
                    "4": "combination"
                },
                "param_2": {
                    "1": "data_value",
                    "19": "value",
                    "4": "value1"
                },
                "param_3": {
                    "1": "ignored_param",
                    "2": "param_3",
                    "3": "unused1",
                    "4": "value2",
                    "9": "unused"
                },
                "param_4": {
                    "1": "value_3",
                    "2": "param_4",
                    "3": "unused2",
                    "4": "value3",
                    "5": "flag"
                },
                "set_bit_08003f94": {
                    "1": "set_bit_status",
                    "13": "set_bit"
                },
                "uVar2": {
                    "18": "index",
                    "4": "byte_value",
                    "5": "combination_index"
                },
                "update_memory_08003f30": {
                    "16": "update_memory"
                },
                "validate_input_080068d6": {
                    "16": "validate_input"
                }
            },
            "called": [
                "FUN_080085b8",
                "FUN_080068d6",
                "FUN_08003f94",
                "FUN_08003f30"
            ],
            "calling": [
                "FUN_08008c44"
            ],
            "code": "\nvoid update_combination_0800863c(int input,undefined4 value,undefined4 unused,undefined4 flag)\n\n{\n  int result;\n  uint index;\n  \n  if (input != 0) {\n    result = check_combination();\n    if (result == 0) {\n      index = (uint)*(byte *)(input + 0x44);\n      *(undefined4 *)(&DAT_20000670 + index * 4) = value;\n      *(int *)(&DAT_20000684 + index * 4) = input;\n      update_memory((int)*(char *)(input + 0x5a),0,1,index,flag);\n      set_bit((int)*(char *)(input + 0x5a));\n      validate_input((&DAT_200006c0)[*(byte *)(input + 0x44)],input + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "update_combination_0800863c",
            "entrypoint": "0x0800863c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800863c": "update_combination_0800863c",
                "check_combination_080085b8": "check_combination",
                "iVar1": "result",
                "param_1": "input",
                "param_2": "value",
                "param_3": "unused",
                "param_4": "flag",
                "set_bit_08003f94": "set_bit",
                "uVar2": "index",
                "update_memory_08003f30": "update_memory",
                "validate_input_080068d6": "validate_input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008694": {
            "additional_data": {
                "DAT_20000698": {
                    "1": "memory_addresses"
                },
                "DAT_200006ac": {
                    "1": "memory_pointers"
                },
                "DAT_200006c0": {
                    "1": "input_lookup"
                },
                "FUN_08008694": {
                    "1": "update_and_validate_data",
                    "2": "update_and_validate_input",
                    "3": "update_memory_and_validate",
                    "5": "update_memory",
                    "8": "update_data"
                },
                "bVar1": {
                    "1": "offset",
                    "10": "index",
                    "18": "byte_value",
                    "2": "data_index"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "data_address",
                    "3": "data_ptr",
                    "5": "input_address",
                    "7": "data_pointer"
                },
                "param_2": {
                    "1": "data_value",
                    "22": "new_value",
                    "5": "value"
                },
                "set_bit_08003f94": {
                    "1": "set_bit_function",
                    "13": "set_bit"
                },
                "update_memory_08003f30": {
                    "1": "update_memory_segment",
                    "13": "update_memory"
                },
                "validate_input_0800688e": {
                    "1": "validate_input_function",
                    "14": "validate_input"
                }
            },
            "called": [
                "FUN_08003f94",
                "FUN_08003f30",
                "FUN_0800688e"
            ],
            "calling": [],
            "code": "\nvoid update_data_08008694(int data_pointer,undefined4 new_value)\n\n{\n  byte byte_value;\n  \n  if (data_pointer != 0) {\n    byte_value = *(byte *)(data_pointer + 0x44);\n    *(undefined4 *)(&DAT_20000698 + (uint)byte_value * 4) = new_value;\n    *(int *)(&DAT_200006ac + (uint)byte_value * 4) = data_pointer;\n    update_memory((int)*(char *)(data_pointer + 0x5a),0,2);\n    set_bit((int)*(char *)(data_pointer + 0x5a));\n    validate_input((&DAT_200006c0)[*(byte *)(data_pointer + 0x44)],\n                 *(int *)(data_pointer + 100) + (uint)*(ushort *)(data_pointer + 0x6a),1);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "update_data_08008694",
            "entrypoint": "0x08008694",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008694": "update_data_08008694",
                "bVar1": "byte_value",
                "param_1": "data_pointer",
                "param_2": "new_value",
                "set_bit_08003f94": "set_bit",
                "update_memory_08003f30": "update_memory",
                "validate_input_0800688e": "validate_input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080086e8": {
            "additional_data": {
                "&DAT_200006c0": {
                    "1": "array"
                },
                "FUN_080086e8": {
                    "13": "find_value_index",
                    "2": "find_matching_value",
                    "3": "find_value_in_array",
                    "9": "find_index"
                },
                "param_1": {
                    "1": "target_number",
                    "17": "value",
                    "2": "element",
                    "6": "input_value"
                },
                "uVar1": {
                    "1": "matching_index",
                    "29": "index"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800870c",
                "FUN_08008730"
            ],
            "code": "\nuint find_value_index_080086e8(int value)\n\n{\n  uint index;\n  \n  if (value == 0) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (4 < index) {\n        return index;\n      }\n      if (value == (&DAT_200006c0)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "current_name": "find_value_index_080086e8",
            "entrypoint": "0x080086e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080086e8": "find_value_index_080086e8",
                "param_1": "value",
                "uVar1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800870c": {
            "additional_data": {
                "&(DAT_20000684)": {
                    "1": "parameter_table"
                },
                "&DAT_20000670": {
                    "1": "function_array",
                    "5": "function_table"
                },
                "&DAT_20000684": {
                    "1": "arg_table",
                    "2": "parameter_table"
                },
                "(*(undefined4 *)(&DAT_20000684 + uVar1 * 4))": {
                    "1": "pass_argument_at_index"
                },
                "(**(code **)(&DAT_20000670 + uVar1 * 4))": {
                    "1": "execute_code_at_index"
                },
                "*(undefined4 *)(&DAT_20000684 + uVar1 * 4)": {
                    "1": "data_pointer"
                },
                "**(code **)(&DAT_20000670 + uVar1 * 4)": {
                    "2": "function_pointer"
                },
                "**(code **)(...))": {
                    "1": "function_pointer"
                },
                "DAT_20000670": {
                    "1": "function_pointer_array",
                    "3": "function_pointer_table",
                    "5": "function_array",
                    "7": "function_table"
                },
                "DAT_20000684": {
                    "1": "argument_array",
                    "3": "argument_table",
                    "5": "parameter_array",
                    "7": "parameter_table"
                },
                "FUN_0800870c": {
                    "1": "perform_operation",
                    "5": "execute_function_based_on_index",
                    "8": "execute_selected_function",
                    "9": "execute_function"
                },
                "code": {
                    "1": "function_ptr",
                    "6": "function_pointer"
                },
                "code **": {
                    "1": "func_pointer"
                },
                "find_value_index_080086e8": {
                    "1": "find_index_of_value",
                    "2": "find_index",
                    "23": "find_value_index"
                },
                "uVar1": {
                    "14": "value_index",
                    "17": "index"
                }
            },
            "called": [
                "FUN_080086e8"
            ],
            "calling": [
                "FUN_0800694c"
            ],
            "code": "\nvoid execute_function_0800870c(void)\n\n{\n  uint index;\n  \n  index = find_value_index();\n  if (index < 5) {\n    (**(function_pointer **)(&DAT_20000670 + index * 4))(*(undefined4 *)(&DAT_20000684 + index * 4));\n  }\n  return;\n}\n\n",
            "current_name": "execute_function_0800870c",
            "entrypoint": "0x0800870c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800870c": "execute_function_0800870c",
                "code": "function_pointer",
                "find_value_index_080086e8": "find_value_index",
                "uVar1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008730": {
            "additional_data": {
                "(&DAT_200006c0)[*(byte *)(iVar3 + 0x44)]": {
                    "1": "input_data"
                },
                "(code **)(&DAT_20000698 + uVar1 * 4)": {
                    "1": "function_ptr"
                },
                "*(byte *)(iVar3 + 0x44)": {
                    "1": "input_byte"
                },
                "*(code **)(&DAT_20000698 + uVar1 * 4)": {
                    "1": "selected_function"
                },
                "*(int *)(iVar3 + 100) + (uint)*(ushort *)(iVar3 + 0x6a)": {
                    "2": "input_value"
                },
                "**(code **)(&DAT_20000698 + uVar1 * 4)": {
                    "1": "process_value"
                },
                "DAT_20000698": {
                    "1": "some_code",
                    "3": "function_array"
                },
                "DAT_200006ac": {
                    "1": "array1",
                    "4": "value_array"
                },
                "DAT_200006c0": {
                    "1": "array3",
                    "3": "input_array"
                },
                "FUN_08008730": {
                    "1": "process",
                    "10": "process_value",
                    "2": "process_selected_value",
                    "3": "process_input",
                    "6": "process_data"
                },
                "PTR_0800688e": {
                    "1": "function_ptr"
                },
                "code **": {
                    "1": "function_pointer"
                },
                "find_value_index_080086e8": {
                    "1": "find_index_of_value",
                    "18": "find_value_index",
                    "4": "find_index"
                },
                "iVar2": {
                    "1": "function_result",
                    "25": "result",
                    "5": "return_value"
                },
                "iVar3": {
                    "1": "data_address",
                    "11": "data",
                    "2": "pointer",
                    "3": "data_ptr",
                    "4": "data_pointer",
                    "7": "value"
                },
                "uVar1": {
                    "13": "index",
                    "18": "value_index"
                },
                "validate_input_0800688e": {
                    "25": "validate_input"
                }
            },
            "called": [
                "FUN_080086e8",
                "FUN_0800688e"
            ],
            "calling": [
                "FUN_08006932"
            ],
            "code": "\nvoid process_value_08008730(void)\n\n{\n  uint value_index;\n  int result;\n  int data;\n  \n  value_index = find_value_index();\n  data = *(int *)(&DAT_200006ac + value_index * 4);\n  if ((value_index < 5) && (result = (**(code **)(&DAT_20000698 + value_index * 4))(data), result != -1)) {\n    validate_input((&DAT_200006c0)[*(byte *)(data + 0x44)],\n                 *(int *)(data + 100) + (uint)*(ushort *)(data + 0x6a),1);\n  }\n  return;\n}\n\n",
            "current_name": "process_value_08008730",
            "entrypoint": "0x08008730",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008730": "process_value_08008730",
                "find_value_index_080086e8": "find_value_index",
                "iVar2": "result",
                "iVar3": "data",
                "uVar1": "value_index",
                "validate_input_0800688e": "validate_input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800877c": {
            "called": [],
            "calling": [
                "FUN_080069ec"
            ],
            "code": "\nvoid FUNC_0800877c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800877c",
            "entrypoint": "0x0800877c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800877c": "FUNC_0800877c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08008804": {
            "additional_data": {
                "&DAT_20000a3c": {
                    "1": "initial_ptr",
                    "2": "default_memory"
                },
                "&stack0x00000000": {
                    "1": "max_stack_memory",
                    "3": "stack_limit"
                },
                "DAT_200006d4": {
                    "1": "current_address",
                    "2": "current_position",
                    "6": "current_pointer",
                    "9": "current_memory"
                },
                "DAT_20000a38": {
                    "1": "error_flag",
                    "19": "error_code"
                },
                "DAT_20000a3c": {
                    "1": "default_memory_pointer",
                    "3": "initial_pointer",
                    "4": "initial_memory"
                },
                "DON_20000a38": {
                    "1": "error_value"
                },
                "DON_20000a3c": {
                    "1": "initial_memory"
                },
                "FUN_08008804": {
                    "1": "reserve_stack_memory",
                    "2": "reserve_memory",
                    "27": "allocate_memory"
                },
                "param_1": {
                    "1": "bytes_to_allocate",
                    "27": "size",
                    "3": "num_bytes"
                },
                "puVar1": {
                    "1": "allocated_memory_ptr",
                    "27": "allocated_memory"
                },
                "stack0x00000000": {
                    "1": "end_of_stack",
                    "2": "stack_end",
                    "3": "stack_memory",
                    "4": "stack_base"
                }
            },
            "called": [],
            "calling": [
                "FUN_08009918"
            ],
            "code": "\nundefined * allocate_memory_08008804(int size)\n\n{\n  undefined *allocated_memory;\n  \n  if (DAT_200006d4 == (undefined *)0x0) {\n    DAT_200006d4 = &DAT_20000a3c;\n  }\n  allocated_memory = DAT_200006d4;\n  if (DAT_200006d4 + size <= stack_limit) {\n    DAT_200006d4 = DAT_200006d4 + size;\n    return allocated_memory;\n  }\n  DAT_20000a38 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "current_name": "allocate_memory_08008804",
            "entrypoint": "0x08008804",
            "imported": false,
            "improved": true,
            "renaming": {
                "&stack0x00000000": "stack_limit",
                "FUN_08008804": "allocate_memory_08008804",
                "param_1": "size",
                "puVar1": "allocated_memory",
                "stack0x00000000": "stack_base"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008840": {
            "additional_data": {
                "0xffffffff": {
                    "1": "default_return_value"
                },
                "DAT_080088a8": {
                    "1": "return_value"
                },
                "FUN_08008840": {
                    "1": "get_error_flag",
                    "2": "get_return_value",
                    "5": "initialize_return_value",
                    "7": "get_default_value",
                    "9": "get_error_code"
                },
                "PTR_param_1": {
                    "1": "param_1"
                },
                "PTR_param_2": {
                    "1": "param_2"
                },
                "return": {
                    "1": "status"
                },
                "return 0xffffffff": {
                    "1": "return_error"
                },
                "returnValue": {
                    "1": "error_code"
                },
                "undefined4": {
                    "1": "unsigned_integer",
                    "2": "void",
                    "4": "error_code",
                    "7": "uint32_t"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nuint32_t get_error_code_08008840(void)\n\n{\n  status 0xffffffff;\n}\n\n",
            "current_name": "get_error_code_08008840",
            "entrypoint": "0x08008840",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008840": "get_error_code_08008840",
                "return": "status",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008846": {
            "additional_data": {
                "*(undefined4 *)(param_2 + 4)": {
                    "1": "memory_page_size",
                    "2": "memory_size"
                },
                "0x2000": {
                    "1": "page_size"
                },
                "FUN_08008846": {
                    "1": "set_memory_permission",
                    "2": "set_memory_value",
                    "4": "set_memory_size",
                    "5": "set_memory_flag",
                    "7": "initialize_memory",
                    "8": "set_memory_page_size"
                },
                "local_1": {
                    "1": "page_size"
                },
                "param_1": {
                    "1": "result_pointer",
                    "2": "status",
                    "3": "flag_value",
                    "4": "param1",
                    "8": "result"
                },
                "param_2": {
                    "1": "data_offset",
                    "13": "memory_address",
                    "2": "buffer",
                    "3": "memory_pointer",
                    "7": "address"
                },
                "param_2 + 4": {
                    "1": "page_size_address"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800a0ec"
            ],
            "code": "\nundefined4 set_memory_page_size_08008846(undefined4 result,int memory_address)\n\n{\n  *(undefined4 *)(memory_address + 4) = 0x2000;\n  return 0;\n}\n\n",
            "current_name": "set_memory_page_size_08008846",
            "entrypoint": "0x08008846",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008846": "set_memory_page_size_08008846",
                "param_1": "result",
                "param_2": "memory_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008850": {
            "additional_data": {
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "FUN_08008850": {
                    "1": "is_initialized",
                    "2": "initialize_return_value",
                    "4": "get_status",
                    "6": "get_return_value"
                },
                "return": {
                    "1": "status",
                    "2": "result"
                },
                "undefined4": {
                    "1": "bool",
                    "2": "uint32_t",
                    "5": "void"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800a110"
            ],
            "code": "\nvoid initialize_08008850(void)\n\n{\n  result 1;\n}\n\n",
            "current_name": "initialize_08008850",
            "entrypoint": "0x08008850",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008850": "initialize_08008850",
                "return": "result",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008854": {
            "additional_data": {
                "<no parameters>": {
                    "1": ""
                },
                "<no variables>": {
                    "1": ""
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "FUN_08008854": {
                    "1": "initialize_function",
                    "16": "initialize",
                    "2": "get_zero",
                    "3": "get_default_value"
                },
                "original_function_name_1": {
                    "1": "new_parameter_name_1"
                },
                "original_function_name_2": {
                    "1": "new_parameter_name_2"
                },
                "return": {
                    "1": "result"
                },
                "return_value": {
                    "2": "result"
                },
                "undefined4": {
                    "1": "int",
                    "7": "void"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800a130"
            ],
            "code": "\nvoid initialize_08008854(void)\n\n{\n  result 0;\n}\n\n",
            "current_name": "initialize_08008854",
            "entrypoint": "0x08008854",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008854": "initialize_08008854",
                "return": "result",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008858": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "get_default_value"
                },
                "<original_variable_name_1>": {
                    "1": "result"
                },
                "DAT_0800c350": {
                    "1": "data_offset"
                },
                "FUN_08008858": {
                    "1": "calculate_return_value",
                    "12": "initialize",
                    "2": "get_zero",
                    "3": "get_default_value"
                },
                "PTR_FUN_08010000": {
                    "1": "function_pointer"
                },
                "PTR_XXXXXXXX": {
                    "1": "data_ptr"
                },
                "new_variable_name_1": {
                    "1": "ptr_data"
                },
                "new_variable_name_2": {
                    "1": "data_length"
                },
                "result": {
                    "1": "return_value"
                },
                "return": {
                    "1": "exit_status"
                },
                "undefined4": {
                    "1": "uint32_t",
                    "12": "void"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800a168"
            ],
            "code": "\nvoid initialize_08008858(void)\n\n{\n  exit_status 0;\n}\n\n",
            "current_name": "initialize_08008858",
            "entrypoint": "0x08008858",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008858": "initialize_08008858",
                "return": "exit_status",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800885c": {
            "additional_data": {
                "FUN_0800885c": {
                    "1": "process_and_return",
                    "25": "process_data",
                    "4": "process_and_return_data"
                },
                "param_1": {
                    "1": "unknown_param",
                    "2": "unused_param_1",
                    "5": "unused",
                    "8": "unused_param"
                },
                "param_2": {
                    "1": "input_param_1",
                    "2": "input_param",
                    "3": "input_1",
                    "8": "data_1"
                },
                "param_3": {
                    "1": "data_param_2",
                    "2": "input_param2",
                    "3": "input_2",
                    "8": "data_2"
                },
                "param_4": {
                    "1": "output_param_2",
                    "3": "unused_param",
                    "4": "unused",
                    "5": "data_3"
                },
                "process_data_08008500": {
                    "1": "process_data_helper"
                }
            },
            "called": [
                "FUN_08008500"
            ],
            "calling": [
                "FUN_0800a042"
            ],
            "code": "\nvoid process_data_0800885c(undefined4 unused_param,undefined4 data_1,undefined4 data_2,undefined4 data_3)\n\n{\n  process_data_0800885c_helper(data_1,data_2,data_2,data_3,data_3);\n  return;\n}\n\n",
            "current_name": "process_data_0800885c",
            "entrypoint": "0x0800885c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800885c": "process_data_0800885c",
                "param_1": "unused_param",
                "param_2": "data_1",
                "param_3": "data_2",
                "param_4": "data_3",
                "process_data_08008500": "process_data_helper"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008868": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "<more_descriptive_function_name>"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "BLOCK_NAME": {
                    "1": "empty_block"
                },
                "DAT_": {
                    "1": "unchanged"
                },
                "FUN_08008868": {
                    "1": "run_infinite_loop",
                    "29": "infinite_loop"
                },
                "PTR_": {
                    "1": "unchanged"
                },
                "do": {
                    "1": "infinite_loop"
                },
                "original_variable_name_1": {
                    "1": "unused_variable1",
                    "2": "counter"
                },
                "original_variable_name_2": {
                    "1": "flag"
                },
                "original_variable_name_3": {
                    "1": "unused_variable3"
                },
                "true": {
                    "1": "is_true",
                    "2": "true"
                },
                "while": {
                    "1": "loop"
                }
            },
            "called": [
                "FUN_08008868"
            ],
            "calling": [
                "FUN_08009b5c",
                "FUN_08008868"
            ],
            "code": "\nvoid infinite_loop_08008868(void)\n\n{\n  infinite_loop_08008868 {\n                    /* WARNING: Do nothing block with infinite loop */\n  } loop( true );\n}\n\n",
            "current_name": "infinite_loop_08008868",
            "entrypoint": "0x08008868",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008868": "infinite_loop_08008868",
                "do": "infinite_loop",
                "while": "loop"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800886c": {
            "additional_data": {
                "0x16": {
                    "1": "initial_value"
                },
                "DAT_20000a38": {
                    "1": "data_initialized",
                    "11": "data_value",
                    "2": "global_variable",
                    "3": "data_size",
                    "5": "initial_value"
                },
                "FUN_0800886c": {
                    "1": "set_dat_20000a38_to_constant",
                    "2": "initialize_value",
                    "21": "initialize_data"
                },
                "return value": {
                    "1": "error_flag"
                },
                "return_value": {
                    "1": "status"
                }
            },
            "called": [],
            "calling": [
                "FUN_08009fe8"
            ],
            "code": "\nundefined4 initialize_data_0800886c(void)\n\n{\n  DAT_20000a38 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "current_name": "initialize_data_0800886c",
            "entrypoint": "0x0800886c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800886c": "initialize_data_0800886c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800887c": {
            "additional_data": {
                "DAT_0800887c": {
                    "1": "initialized_flag"
                },
                "FUN_0800887c": {
                    "1": "initialize_value",
                    "2": "check_status",
                    "3": "get_one",
                    "4": "initialize_program",
                    "6": "get_return_value"
                },
                "Return_Value": {
                    "1": "return_value"
                },
                "newFunctionName": {
                    "1": "initialize_program"
                },
                "result": {
                    "2": "return_value"
                },
                "return": {
                    "1": "status_value",
                    "2": "result"
                },
                "undefined4": {
                    "1": "boolean_result",
                    "3": "uint32_t",
                    "4": "void"
                }
            },
            "called": [],
            "calling": [
                "thunk_FUN_0800887c"
            ],
            "code": "\nvoid get_return_value_0800887c(void)\n\n{\n  return_value 1;\n}\n\n",
            "current_name": "get_return_value_0800887c",
            "entrypoint": "0x0800887c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800887c": "get_return_value_0800887c",
                "return": "return_value",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008880": {
            "additional_data": {
                "&DAT_0800a908": {
                    "1": "data_table"
                },
                "DAT_20000088": {
                    "2": "shift_amount"
                },
                "FUN_08008880": {
                    "1": "transform_data",
                    "10": "process_peripheral_data",
                    "11": "process_data",
                    "2": "decode_data"
                },
                "bVar1": {
                    "1": "is_less_than_threshold",
                    "2": "is_valid_range",
                    "3": "is_less_than",
                    "4": "is_less_than_0x3c",
                    "5": "is_in_range"
                },
                "cVar2": {
                    "1": "translated_value",
                    "2": "processed_value",
                    "4": "result",
                    "5": "data_value",
                    "6": "peripheral_data"
                },
                "param_1": {
                    "1": "input_param",
                    "25": "input_value",
                    "3": "input"
                },
                "uVar3": {
                    "1": "result_value",
                    "2": "output_value",
                    "26": "processed_data"
                }
            },
            "called": [
                "FUN_08006d80"
            ],
            "calling": [
                "FUN_08000488",
                "FUN_080022f8"
            ],
            "code": "\nuint process_data_08008880(uint input_value)\n\n{\n  bool is_in_range;\n  char peripheral_data;\n  uint processed_data;\n  \n  if (input_value < 0xe) {\n    if (input_value + 0x2e < 0x3c) {\n      is_in_range = true;\n    }\n    else {\n      is_in_range = false;\n    }\n  }\n  else {\n    is_in_range = input_value < 0x3c;\n  }\n  if (is_in_range) {\n    if (input_value < 0xe) {\n      input_value = input_value + 0x2e;\n    }\n    peripheral_data = (&DAT_0800a908)[input_value];\n  }\n  else {\n    peripheral_data = -1;\n  }\n  if (peripheral_data == -1) {\n    processed_data = 0;\n  }\n  else {\n    processed_data = process_peripheral_data_08006d80();\n    if (DAT_20000088 != 0xc) {\n      if (DAT_20000088 < 0xc) {\n        return processed_data >> (0xc - DAT_20000088 & 0xff);\n      }\n      return processed_data << (DAT_20000088 - 0xc & 0xff);\n    }\n  }\n  return processed_data;\n}\n\n",
            "current_name": "process_data_08008880",
            "entrypoint": "0x08008880",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008880": "process_data_08008880",
                "bVar1": "is_in_range",
                "cVar2": "peripheral_data",
                "param_1": "input_value",
                "uVar3": "processed_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080088e0": {
            "additional_data": {
                "&DAT_0800a6cc": {
                    "1": "array_for_lookup"
                },
                "&DAT_0800a908": {
                    "1": "values_array"
                },
                "&DAT_200006d8": {
                    "1": "bit_array"
                },
                "<original_function_name>": {
                    "1": "process_peripheral_parameter"
                },
                "<param_1>": {
                    "1": "peripheral_id"
                },
                "<param_2>": {
                    "1": "value"
                },
                "DAT_2000008c": {
                    "1": "data_8c"
                },
                "FUN_080088e0": {
                    "1": "process_param_data",
                    "2": "process_param_and_configure_peripheral",
                    "5": "process_peripheral_data",
                    "8": "process_parameter"
                },
                "configure_peripheral_08008990": {
                    "10": "configure_peripheral"
                },
                "find_value_in_array_0800738a": {
                    "1": "find_value_in_array"
                },
                "get_bit_value_08006b28": {
                    "10": "get_bit_value"
                },
                "iVar1": {
                    "1": "value_in_array",
                    "11": "array_index",
                    "2": "find_result",
                    "3": "value_index",
                    "4": "value_found"
                },
                "iVar2": {
                    "1": "array_index",
                    "2": "data_index",
                    "3": "peripheral_index",
                    "5": "peripheral_value",
                    "8": "array_value"
                },
                "initialize_and_update_data_08007118": {
                    "10": "initialize_and_update_data"
                },
                "param_1": {
                    "1": "parameter_1",
                    "2": "parameter_index",
                    "3": "index",
                    "4": "input_param",
                    "5": "peripheral_index",
                    "6": "peripheral_id"
                },
                "param_2": {
                    "1": "parameter",
                    "12": "value",
                    "2": "param_value",
                    "4": "parameter_value",
                    "6": "data_value"
                },
                "process_parameter_08008a24": {
                    "1": "process_parameter_detail",
                    "7": "process_parameter"
                },
                "set_bit_in_array_08006b3e": {
                    "1": "set_bit_value_in_array",
                    "8": "set_bit_in_array"
                }
            },
            "called": [
                "FUN_08006b3e",
                "FUN_08007118",
                "FUN_08006b28",
                "FUN_08008a24",
                "FUN_0800738a",
                "FUN_08008990"
            ],
            "calling": [
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "code": "\nvoid process_parameter_080088e0(uint peripheral_id,uint value)\n\n{\n  int array_index;\n  int array_value;\n  \n  if (peripheral_id < 0x3c) {\n    array_value = (int)(char)(&DAT_0800a908)[peripheral_id];\n  }\n  else {\n    array_value = -1;\n  }\n  if (array_value != -1) {\n    array_index = find_value_in_array(array_value,&DAT_0800a6cc);\n    if (array_index == 0) {\n      configure_peripheral(peripheral_id,1);\n      if (DAT_2000008c != 8) {\n        if (DAT_2000008c < 9) {\n          value = value << (8 - DAT_2000008c & 0xff);\n        }\n        else {\n          value = value >> (DAT_2000008c - 8 & 0xff);\n        }\n      }\n      if (value < 0x80) {\n        process_parameter_080088e0(peripheral_id,0);\n      }\n      else {\n        process_parameter_080088e0(peripheral_id,1);\n      }\n    }\n    else {\n      array_index = get_bit_value(array_value,&DAT_200006d8);\n      if (array_index == 0) {\n        set_bit_in_array(array_value,&DAT_200006d8);\n      }\n      if (DAT_2000008c != 8) {\n        if (DAT_2000008c < 9) {\n          value = value << (8 - DAT_2000008c & 0xff);\n        }\n        else {\n          value = value >> (DAT_2000008c - 8 & 0xff);\n        }\n      }\n      initialize_and_update_data(array_value,0x3e418,0xff,value,array_index == 0);\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_parameter_080088e0",
            "entrypoint": "0x080088e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080088e0": "process_parameter_080088e0",
                "configure_peripheral_08008990": "configure_peripheral",
                "find_value_in_array_0800738a": "find_value_in_array",
                "get_bit_value_08006b28": "get_bit_value",
                "iVar1": "array_index",
                "iVar2": "array_value",
                "initialize_and_update_data_08007118": "initialize_and_update_data",
                "param_1": "peripheral_id",
                "param_2": "value",
                "process_parameter_08008a24": "process_parameter",
                "set_bit_in_array_08006b3e": "set_bit_in_array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008990": {
            "additional_data": {
                "DAT_0800a6cc": {
                    "1": "value_lookup_table"
                },
                "DAT_0800a908": {
                    "1": "config_lookup_table"
                },
                "DAT_200006d8": {
                    "2": "bit_array"
                },
                "DAT_200006ec": {
                    "1": "bit_array2"
                },
                "FUN_08008990": {
                    "1": "process_configuration",
                    "22": "configure_peripheral",
                    "3": "update_peripheral_configuration"
                },
                "configure_peripheral_08007258": {
                    "1": "set_peripheral_mode",
                    "2": "configure_peripheral_action",
                    "5": "configure_peripheral",
                    "6": "set_peripheral_configuration"
                },
                "find_value_in_array_0800738a": {
                    "1": "find_value_in_peripheral_array",
                    "16": "find_value_in_array"
                },
                "get_bit_value_08006b28": {
                    "1": "check_bit_value",
                    "16": "get_bit_value"
                },
                "iVar1": {
                    "1": "bit_value_result",
                    "30": "bit_value"
                },
                "iVar3": {
                    "1": "array_value",
                    "2": "array_index",
                    "3": "peripheral_index",
                    "4": "config_index",
                    "5": "peripheral_value"
                },
                "param_1": {
                    "11": "peripheral_id",
                    "18": "peripheral_index",
                    "2": "index"
                },
                "param_2": {
                    "1": "config_option",
                    "12": "configuration_type",
                    "2": "peripheral_mode",
                    "4": "config_type",
                    "5": "mode"
                },
                "param_3": {
                    "1": "unknown_param",
                    "2": "config_param",
                    "3": "param_3",
                    "5": "config_value"
                },
                "param_4": {
                    "1": "array_data",
                    "2": "config_array",
                    "3": "default_configuration",
                    "5": "config_data"
                },
                "puVar2": {
                    "1": "lookup_array",
                    "2": "array_ptr",
                    "3": "array_start",
                    "4": "peripheral_array",
                    "5": "peripheral_data"
                },
                "set_bit_in_array_08006b3e": {
                    "1": "set_bit_in_peripheral_array",
                    "17": "set_bit_in_array"
                },
                "update_bit_in_array_08006b5c": {
                    "1": "update_bit_in_peripheral_array",
                    "17": "update_bit_in_array"
                },
                "update_configuration_080071e4": {
                    "15": "update_configuration",
                    "3": "update_peripheral_configuration"
                }
            },
            "called": [
                "FUN_08007258",
                "FUN_080071e4",
                "FUN_08006b5c",
                "FUN_08006b3e",
                "FUN_08006b28",
                "FUN_0800738a"
            ],
            "calling": [
                "FUN_080005f8",
                "FUN_080088e0",
                "FUN_080025ac",
                "FUN_08003002"
            ],
            "code": "\nvoid configure_peripheral_08008990(uint peripheral_index,undefined4 configuration_type,undefined4 config_value,undefined1 *config_data)\n\n{\n  int bit_value;\n  undefined1 *peripheral_data;\n  int peripheral_value;\n  \n  if (peripheral_index < 0x3c) {\n    peripheral_value = (int)(char)(&DAT_0800a908)[peripheral_index];\n    peripheral_data = &DAT_0800a908;\n  }\n  else {\n    peripheral_value = -1;\n    peripheral_data = config_data;\n  }\n  if (peripheral_value != -1) {\n    bit_value = get_bit_value(peripheral_value,&DAT_200006d8,config_value,peripheral_data,config_data);\n    if (bit_value != 0) {\n      bit_value = find_value_in_array(peripheral_value,&DAT_0800a6cc);\n      if (bit_value != 0) {\n        update_configuration(peripheral_value);\n      }\n      update_bit_in_array(peripheral_value,&DAT_200006d8);\n    }\n    switch(configuration_type) {\n    case 0:\n      set_peripheral_configuration(peripheral_value,0);\n      break;\n    case 1:\n      set_peripheral_configuration(peripheral_value,1,0);\n      break;\n    case 2:\n      set_peripheral_configuration(peripheral_value,0,1);\n      break;\n    case 3:\n      set_peripheral_configuration(peripheral_value,0,2);\n    }\n    set_bit_in_array(peripheral_value,&DAT_200006ec);\n  }\n  return;\n}\n\n",
            "current_name": "configure_peripheral_08008990",
            "entrypoint": "0x08008990",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008990": "configure_peripheral_08008990",
                "configure_peripheral_08007258": "set_peripheral_configuration",
                "find_value_in_array_0800738a": "find_value_in_array",
                "get_bit_value_08006b28": "get_bit_value",
                "iVar1": "bit_value",
                "iVar3": "peripheral_value",
                "param_1": "peripheral_index",
                "param_2": "configuration_type",
                "param_3": "config_value",
                "param_4": "config_data",
                "puVar2": "peripheral_data",
                "set_bit_in_array_08006b3e": "set_bit_in_array",
                "update_bit_in_array_08006b5c": "update_bit_in_array",
                "update_configuration_080071e4": "update_configuration"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008a24": {
            "additional_data": {
                "FUN_08008a24": {
                    "1": "set_param_value_if_bit_set",
                    "2": "update_memory_address",
                    "3": "set_param_value",
                    "4": "process_param_value",
                    "5": "update_param_value"
                },
                "iVar1": {
                    "1": "bit_check_result",
                    "2": "bit_result",
                    "28": "bit_value"
                },
                "param_1": {
                    "1": "value",
                    "2": "value_index",
                    "21": "index",
                    "4": "input_index"
                },
                "param_2": {
                    "1": "param1",
                    "13": "value",
                    "2": "output_value",
                    "3": "value_1",
                    "4": "value1"
                },
                "param_3": {
                    "1": "address_offset",
                    "2": "size",
                    "3": "value_2",
                    "4": "value2"
                },
                "param_4": {
                    "1": "input_data",
                    "17": "data",
                    "6": "data_array"
                },
                "puVar3": {
                    "1": "memory_ptr",
                    "2": "data_array",
                    "3": "data_pointer",
                    "4": "data_ptr",
                    "6": "bit_array"
                },
                "uVar2": {
                    "1": "mem_address",
                    "28": "memory_address"
                },
                "uVar4": {
                    "1": "byte_value",
                    "10": "bit_mask",
                    "2": "data_value",
                    "3": "bit_value",
                    "6": "value"
                }
            },
            "called": [
                "FUN_08006b7c",
                "FUN_080072d8",
                "FUN_08006b28"
            ],
            "calling": [
                "FUN_080005f8",
                "FUN_080088e0",
                "FUN_08002fca"
            ],
            "code": "\nvoid process_parameter_08008a24(uint index,undefined4 value,undefined4 value2,undefined1 *data)\n\n{\n  int bit_value;\n  undefined4 memory_address;\n  undefined1 *bit_array;\n  uint bit_mask;\n  \n  if (index < 0x3c) {\n    bit_mask = (uint)(char)(&DAT_0800a908)[index];\n    bit_array = &DAT_0800a908;\n  }\n  else {\n    bit_mask = 0xffffffff;\n    bit_array = data;\n  }\n  if ((bit_mask != 0xffffffff) &&\n     (bit_value = get_bit_value_08006b28(bit_mask,&DAT_200006ec,value2,bit_array,data), bit_value != 0)) {\n    memory_address = get_memory_address_08006b7c((bit_mask << 0x18) >> 0x1c);\n    set_param_value_080072d8(memory_address,1 << (bit_mask & 0xf) & 0xffff,value);\n  }\n  return;\n}\n\n",
            "current_name": "process_parameter_08008a24",
            "entrypoint": "0x08008a24",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008a24": "process_parameter_08008a24",
                "iVar1": "bit_value",
                "param_1": "index",
                "param_2": "value",
                "param_3": "value2",
                "param_4": "data",
                "puVar3": "bit_array",
                "uVar2": "memory_address",
                "uVar4": "bit_mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008a6c": {
            "additional_data": {
                "FUN_08008a6c": {
                    "1": "check_bit_status",
                    "2": "check_bit_presence",
                    "3": "check_bit_value",
                    "4": "check_bit_and_return",
                    "6": "check_bit",
                    "9": "check_and_return_bit"
                },
                "cVar1": {
                    "1": "bit",
                    "27": "result"
                },
                "check_bit_and_return_080072f0": {
                    "2": "check_bit_and_return"
                },
                "get_bit_value_08006b28": {
                    "2": "get_bit_value"
                },
                "get_memory_address_08006b7c": {
                    "2": "get_memory_address"
                },
                "iVar2": {
                    "1": "bit_check",
                    "30": "bit_value"
                },
                "param_1": {
                    "1": "input_data",
                    "11": "input_value",
                    "6": "input",
                    "9": "value"
                },
                "uVar3": {
                    "1": "mem_address",
                    "2": "address",
                    "28": "memory_address"
                },
                "uVar4": {
                    "1": "item",
                    "17": "index",
                    "2": "array_index",
                    "3": "lookup_value"
                }
            },
            "called": [
                "FUN_080072f0",
                "FUN_08006b7c",
                "FUN_08006b28"
            ],
            "calling": [
                "FUN_08000ef8"
            ],
            "code": "\nchar check_and_return_bit_08008a6c(uint input_value)\n\n{\n  char result;\n  int bit_value;\n  undefined4 memory_address;\n  uint index;\n  \n  if (input_value < 0x3c) {\n    index = (uint)(char)(&DAT_0800a908)[input_value];\n  }\n  else {\n    index = 0xffffffff;\n  }\n  if (index == 0xffffffff) {\n    result = '\\0';\n  }\n  else {\n    bit_value = get_bit_value(index,&DAT_200006ec);\n    if (bit_value == 0) {\n      result = '\\0';\n    }\n    else {\n      memory_address = get_memory_address((index << 0x18) >> 0x1c);\n      result = check_bit_and_return(memory_address,1 << (index & 0xf) & 0xffff);\n    }\n  }\n  if (result != '\\0') {\n    result = '\\x01';\n  }\n  return result;\n}\n\n",
            "current_name": "check_and_return_bit_08008a6c",
            "entrypoint": "0x08008a6c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008a6c": "check_and_return_bit_08008a6c",
                "cVar1": "result",
                "check_bit_and_return_080072f0": "check_bit_and_return",
                "get_bit_value_08006b28": "get_bit_value",
                "get_memory_address_08006b7c": "get_memory_address",
                "iVar2": "bit_value",
                "param_1": "input_value",
                "uVar3": "memory_address",
                "uVar4": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008abc": {
            "additional_data": {
                "": {
                    "1": ""
                },
                "DAT_<variable>": {
                    "1": "<variable>"
                },
                "FUN_08008abc": {
                    "1": "initialize",
                    "28": "initialize_data"
                },
                "PTR_<variable>": {
                    "1": "<variable>"
                },
                "data_0800723c": {
                    "1": "data_to_initialize"
                },
                "initialize_data_0800723c": {
                    "2": "initialize_data_helper",
                    "24": "initialize_data"
                },
                "void": {
                    "1": "void"
                }
            },
            "called": [
                "FUN_0800723c"
            ],
            "calling": [
                "FUN_080022f8"
            ],
            "code": "\nvoid initialize_data_08008abc(void)\n\n{\n  initialize_data_08008abc();\n  return;\n}\n\n",
            "current_name": "initialize_data_08008abc",
            "entrypoint": "0x08008abc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008abc": "initialize_data_08008abc",
                "data_0800723c": "data_to_initialize",
                "initialize_data_0800723c": "initialize_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008ac4": {
            "called": [],
            "calling": [
                "FUN_08003002",
                "FUN_08002fca"
            ],
            "code": "\nvoid FUNC_08008ac4(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08008ac4",
            "entrypoint": "0x08008ac4",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08008ac4": "FUNC_08008ac4"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08008afa": {
            "additional_data": {
                "(param_1 + 0x134)": {
                    "1": "offset1"
                },
                "(param_1 + 0x136)": {
                    "1": "offset2"
                },
                "*(short *)(param_1 + 0x134)": {
                    "1": "offset_1",
                    "3": "value1",
                    "7": "first_value"
                },
                "*(short *)(param_1 + 0x136)": {
                    "1": "decrement",
                    "3": "value2",
                    "7": "second_value"
                },
                "0x134": {
                    "1": "first_value_offset",
                    "2": "offset_a",
                    "3": "offset1"
                },
                "0x136": {
                    "1": "offset_2",
                    "2": "offset_b",
                    "3": "offset2"
                },
                "0x3f": {
                    "1": "mask"
                },
                "0x40": {
                    "1": "constant1",
                    "2": "constant_offset"
                },
                "FUN_08008afa": {
                    "1": "calculate_shift_value",
                    "10": "calculate_checksum",
                    "2": "calculate_difference",
                    "4": "calculate_result",
                    "9": "calculate_offset"
                },
                "param_1": {
                    "1": "memory_address",
                    "10": "base_address",
                    "11": "input_value",
                    "2": "offset",
                    "5": "data_address"
                },
                "short_value_1": {
                    "1": "offset_1"
                },
                "short_value_2": {
                    "1": "offset_2"
                }
            },
            "called": [],
            "calling": [
                "FUN_08008bf4"
            ],
            "code": "\nushort calculate_checksum_08008afa(int input_value)\n\n{\n  return (*(short *)(input_value + 0x134) + 0x40) - *(short *)(input_value + 0x136) & 0x3f;\n}\n\n",
            "current_name": "calculate_checksum_08008afa",
            "entrypoint": "0x08008afa",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008afa": "calculate_checksum_08008afa",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008b66": {
            "additional_data": {
                "FUN_08008b66": {
                    "1": "process_input_and_update_buffer",
                    "10": "process_and_store_input",
                    "3": "process_and_update_input",
                    "5": "process_input",
                    "7": "process_input_and_update"
                },
                "iVar1": {
                    "1": "processed_input",
                    "24": "result",
                    "3": "input_processing_result"
                },
                "local_9": {
                    "1": "input_data",
                    "2": "new_byte",
                    "3": "new_data",
                    "5": "input_char",
                    "9": "input_value"
                },
                "param_1": {
                    "1": "input_pointer",
                    "18": "input",
                    "2": "input_param",
                    "6": "input_data"
                },
                "uVar2": {
                    "1": "incremented_value",
                    "10": "new_index",
                    "13": "updated_index",
                    "2": "updated_value",
                    "3": "next_index"
                }
            },
            "called": [
                "FUN_08008600"
            ],
            "calling": [],
            "code": "\nvoid process_and_store_input_08008b66(int input)\n\n{\n  int result;\n  ushort updated_index;\n  undefined input_value;\n  \n  result = process_input_08008600(input,&input_value);\n  if ((result == 0) &&\n     (updated_index = *(short *)(input + 0x60) + 1U & 0x3f, updated_index != *(ushort *)(input + 0x62))) {\n    *(undefined *)(*(int *)(input + 0x5c) + (uint)*(ushort *)(input + 0x60)) = input_value;\n    *(ushort *)(input + 0x60) = updated_index;\n  }\n  return;\n}\n\n",
            "current_name": "process_and_store_input_08008b66",
            "entrypoint": "0x08008b66",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008b66": "process_and_store_input_08008b66",
                "iVar1": "result",
                "local_9": "input_value",
                "param_1": "input",
                "uVar2": "updated_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008bf4": {
            "called": [
                "FUN_08008afa"
            ],
            "calling": [
                "FUN_08008f1c"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08008bfa) */\n/* WARNING: Removing unreachable block (ram,0x08008c0c) */\n/* WARNING: Removing unreachable block (ram,0x08008c02) */\n/* WARNING: Removing unreachable block (ram,0x08008c14) */\n\nvoid FUNC_08008bf4(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08008bf4",
            "entrypoint": "0x08008bf4",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08008bf4": "FUNC_08008bf4"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08008c20": {
            "additional_data": {
                "* (int *)(param_1 + 0x130)": {
                    "1": "data_ptr1"
                },
                "* (int *)(param_1 + 0x138)": {
                    "1": "data_ptr2"
                },
                "* (undefined2 *)(param_1 + 0x134)": {
                    "1": "pointer1"
                },
                "* (undefined2 *)(param_1 + 0x136)": {
                    "1": "pointer2"
                },
                "* (undefined2 *)(param_1 + 0x13c)": {
                    "1": "pointer3"
                },
                "* (undefined2 *)(param_1 + 0x13e)": {
                    "1": "pointer4"
                },
                "*(int *)(param_1 + 0x130)": {
                    "1": "pointer1"
                },
                "*(int *)(param_1 + 0x138)": {
                    "1": "parameter.offset2"
                },
                "*(undefined2 *)(param_1 + 0x134)": {
                    "1": "offset_pointer2",
                    "2": "value1"
                },
                "*(undefined2 *)(param_1 + 0x136)": {
                    "1": "third_data_pointer",
                    "2": "value2"
                },
                "*(undefined2 *)(param_1 + 0x13c)": {
                    "1": "offset_pointer5",
                    "2": "value3"
                },
                "*(undefined2 *)(param_1 + 0x13e)": {
                    "1": "data->value_f",
                    "2": "value4"
                },
                "0x11": {
                    "1": "const1",
                    "2": "value1"
                },
                "0x130": {
                    "1": "offset_1",
                    "6": "offset1"
                },
                "0x134": {
                    "1": "offset_2",
                    "5": "offset2"
                },
                "0x136": {
                    "1": "value2",
                    "5": "offset3"
                },
                "0x138": {
                    "1": "offset2",
                    "5": "offset4"
                },
                "0x13c": {
                    "1": "offset_5",
                    "5": "offset5"
                },
                "0x13e": {
                    "1": "offset_6",
                    "5": "offset6"
                },
                "0x51": {
                    "1": "constant2",
                    "2": "value2"
                },
                "<unnamed_variable_1>": {
                    "1": "offset1"
                },
                "<unnamed_variable_2>": {
                    "1": "offset2"
                },
                "<unnamed_variable_3>": {
                    "1": "offset3"
                },
                "<unnamed_variable_4>": {
                    "1": "offset4"
                },
                "<unnamed_variable_5>": {
                    "1": "offset5"
                },
                "FUN_08008c20": {
                    "1": "update_info",
                    "10": "initialize_data",
                    "2": "initialize_data_structure",
                    "3": "initialize_memory",
                    "9": "initialize_parameters"
                },
                "baseAddress": {
                    "1": "base_address"
                },
                "param_1": {
                    "1": "input_param",
                    "17": "base_address",
                    "2": "data_address",
                    "3": "data_pointer"
                },
                "param_1 + 0x11": {
                    "1": "data_structure.data_offset",
                    "3": "offset1"
                },
                "param_1 + 0x130": {
                    "1": "data_pointer1",
                    "2": "parameter1"
                },
                "param_1 + 0x134": {
                    "1": "data_pointer2",
                    "2": "parameter2"
                },
                "param_1 + 0x136": {
                    "1": "pointer_to_value2"
                },
                "param_1 + 0x138": {
                    "1": "address_d"
                },
                "param_1 + 0x13c": {
                    "1": "memory_segment4_address"
                },
                "param_1 + 0x13e": {
                    "1": "data_pointer6"
                },
                "param_1 + 0x51": {
                    "1": "parameter3_value",
                    "3": "offset2"
                }
            },
            "called": [],
            "calling": [
                "FUN_08008d30"
            ],
            "code": "\nvoid initialize_data_08008c20(int base_address)\n\n{\n  *(int *)(base_address + 0x130) = base_address + 0x11;\n  *(undefined2 *)(base_address + 0x134) = 0;\n  *(undefined2 *)(base_address + 0x136) = 0;\n  *(int *)(base_address + 0x138) = base_address + 0x51;\n  *(undefined2 *)(base_address + 0x13c) = 0;\n  *(undefined2 *)(base_address + 0x13e) = 0;\n  return;\n}\n\n",
            "current_name": "initialize_data_08008c20",
            "entrypoint": "0x08008c20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008c20": "initialize_data_08008c20",
                "param_1": "base_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008c44": {
            "additional_data": {
                "FUN_08008c44": {
                    "1": "configure_uart_pins",
                    "11": "configure_serial_port",
                    "2": "initialize_serial_communication",
                    "3": "initialize_hardware_serial",
                    "7": "initialize_serial"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "1": "assertion_failed_handler",
                    "2": "jump_table_address",
                    "5": "unrecovered_jump_table",
                    "9": "jump_table"
                },
                "assertion_failed_080090cc": {
                    "2": "assertion_failed"
                },
                "bVar1": {
                    "1": "config_option",
                    "2": "serial_config_masked",
                    "4": "config_mask",
                    "9": "config_bits"
                },
                "extraout_r1": {
                    "1": "assertion_param",
                    "2": "extra_output",
                    "3": "combination_index"
                },
                "iVar2": {
                    "1": "bit_multiplier",
                    "2": "uart_config",
                    "4": "uart_mode",
                    "6": "config_value"
                },
                "initialize_uart_pins_08008078": {
                    "1": "initialize_uart_pins_aux"
                },
                "param_1": {
                    "1": "port",
                    "2": "base_address",
                    "3": "port_address",
                    "8": "serial_port",
                    "9": "serial_port_address"
                },
                "param_2": {
                    "1": "param2",
                    "30": "baud_rate"
                },
                "param_3": {
                    "1": "serial_settings",
                    "13": "serial_config",
                    "3": "config_byte",
                    "4": "config",
                    "6": "configuration"
                },
                "uRam0000012d": {
                    "1": "ram_variable"
                },
                "update_combination_0800863c": {
                    "2": "update_combination"
                }
            },
            "called": [
                "FUN_080090cc",
                "FUN_08008078",
                "FUN_0800863c"
            ],
            "calling": [
                "FUN_08003048"
            ],
            "code": "\nvoid configure_serial_port_08008c44(int serial_port_address,undefined4 baud_rate,byte serial_config)\n\n{\n  uint combination_index;\n  byte config_bits;\n  int config_value;\n  code *jump_table;\n  \n  *(undefined4 *)(serial_port_address + 0x11c) = baud_rate;\n  *(byte *)(serial_port_address + 0x140) = serial_config;\n  config_bits = serial_config & 7;\n  if (config_bits == 4) {\n    config_value = 7;\n  }\n  else if (config_bits == 6) {\n    config_value = 8;\n  }\n  else if (config_bits == 2) {\n    config_value = 6;\n  }\n  else {\n    config_value = 0;\n  }\n  if ((serial_config & 0x30) == 0x30) {\n    *(undefined4 *)(serial_port_address + 0x128) = 0x600;\n    config_value = config_value + 1;\n  }\n  else if ((serial_config & 0x20) == 0) {\n    *(undefined4 *)(serial_port_address + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(serial_port_address + 0x128) = 0x400;\n    config_value = config_value + 1;\n  }\n  if ((serial_config & 8) == 0) {\n    *(undefined4 *)(serial_port_address + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(serial_port_address + 0x124) = 0x2000;\n  }\n  if (config_value == 8) {\n    *(undefined4 *)(serial_port_address + 0x120) = 0;\n  }\n  else if (config_value == 9) {\n    *(undefined4 *)(serial_port_address + 0x120) = 0x1000;\n  }\n  else {\n    config_value = 0;\n  }\n  if (config_value != 0) {\n    initialize_uart_pins_aux(serial_port_address + 0xd4);\n    update_combination(serial_port_address + 0xd4,0x8008b67);\n    return;\n  }\n  jump_table = (code *)0x8008cee;\n  assertion_failed(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n               ,299,\"void HardwareSerial::begin(long unsigned int, byte)\",\"databits!=0\");\n  if (combination_index < 0x3c) {\n    ram_variable = (&DAT_0800a908)[combination_index];\n  }\n  else {\n    ram_variable = 0xff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08008d0c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(0,combination_index,&stack0x00000148);\n  return;\n}\n\n",
            "current_name": "configure_serial_port_08008c44",
            "entrypoint": "0x08008c44",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008c44": "configure_serial_port_08008c44",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "assertion_failed_080090cc": "assertion_failed",
                "bVar1": "config_bits",
                "extraout_r1": "combination_index",
                "iVar2": "config_value",
                "initialize_uart_pins_08008078": "initialize_uart_pins_aux",
                "param_1": "serial_port_address",
                "param_2": "baud_rate",
                "param_3": "serial_config",
                "uRam0000012d": "ram_variable",
                "update_combination_0800863c": "update_combination"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008d00": {
            "additional_data": {
                "FUN_08008d00": {
                    "1": "set_default_value",
                    "2": "update_value",
                    "3": "update_memory_value",
                    "5": "set_byte_value"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "1": "jump_table_func",
                    "2": "jumptable",
                    "9": "jump_table"
                },
                "param_1": {
                    "1": "function_parameter1",
                    "12": "address",
                    "2": "data_address",
                    "6": "memory_address",
                    "7": "base_address"
                },
                "param_2": {
                    "1": "byte_value",
                    "10": "index",
                    "2": "parameter",
                    "3": "value_index",
                    "9": "value"
                },
                "uVar1": {
                    "1": "parameter_value",
                    "2": "result",
                    "3": "byte_value",
                    "5": "value",
                    "6": "updated_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08008d30"
            ],
            "code": "\nvoid set_byte_value_08008d00(int address,uint index)\n\n{\n  undefined updated_value;\n  code *jump_table;\n  \n  if (index < 0x3c) {\n    updated_value = (&DAT_0800a908)[index];\n  }\n  else {\n    updated_value = 0xff;\n  }\n  *(undefined *)(address + 0x12d) = updated_value;\n                    /* WARNING: Could not recover jumptable at 0x08008d0c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "current_name": "set_byte_value_08008d00",
            "entrypoint": "0x08008d00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008d00": "set_byte_value_08008d00",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "param_1": "address",
                "param_2": "index",
                "uVar1": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008d18": {
            "additional_data": {
                "300": {
                    "1": "offset"
                },
                "FUN_08008d18": {
                    "1": "set_byte",
                    "13": "set_byte_value",
                    "2": "set_byte_at_offset",
                    "3": "set_default_value"
                },
                "param_1": {
                    "1": "memory_location",
                    "12": "base_address",
                    "5": "address",
                    "9": "memory_address"
                },
                "param_2": {
                    "1": "byte_index",
                    "22": "index",
                    "3": "value_index",
                    "4": "offset"
                },
                "uVar1": {
                    "1": "value_to_set",
                    "2": "selected_value",
                    "5": "default_value",
                    "6": "byte_value",
                    "9": "value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08008d30"
            ],
            "code": "\nvoid set_byte_value_08008d18(int base_address,uint index)\n\n{\n  undefined value;\n  \n  if (index < 0x3c) {\n    value = (&DAT_0800a908)[index];\n  }\n  else {\n    value = 0xff;\n  }\n  *(undefined *)(base_address + 300) = value;\n  return;\n}\n\n",
            "current_name": "set_byte_value_08008d18",
            "entrypoint": "0x08008d18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008d18": "set_byte_value_08008d18",
                "param_1": "base_address",
                "param_2": "index",
                "uVar1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008d30": {
            "additional_data": {
                "&DAT_20000700": {
                    "1": "data_ptr"
                },
                "&PTR_LAB_08008ba4_1_0800aab8": {
                    "1": "pointer"
                },
                "*param_1": {
                    "1": "data[0]"
                },
                "DAT_0800a81c": {
                    "1": "characters1"
                },
                "DAT_0800a864": {
                    "1": "characters2"
                },
                "DAT_20000700": {
                    "1": "data2"
                },
                "FUN_08008d30": {
                    "1": "initialize_and_configure",
                    "2": "initialize_settings",
                    "3": "initialize_data_and_set_values",
                    "7": "initialize_parameters",
                    "9": "initialize_data"
                },
                "PTR_LAB_08008ba4_1_0800aab8": {
                    "1": "label"
                },
                "find_character_index_0800734a": {
                    "1": "get_character_index",
                    "20": "find_character_index",
                    "3": "find_index"
                },
                "initialize_data_08008c20": {
                    "1": "initialize_data2",
                    "25": "initialize_data"
                },
                "param_1": {
                    "1": "data_struct",
                    "2": "output_buffer",
                    "3": "parameters",
                    "4": "data_array",
                    "8": "data"
                },
                "param_1[1]": {
                    "1": "data[1]"
                },
                "param_1[2]": {
                    "1": "data[2]"
                },
                "param_2": {
                    "1": "character_value",
                    "2": "input_character",
                    "21": "character",
                    "4": "character_code"
                },
                "param_3": {
                    "1": "byte_value",
                    "15": "value_1",
                    "4": "value1",
                    "9": "value"
                },
                "param_4": {
                    "1": "size",
                    "15": "value_2",
                    "2": "length",
                    "4": "value2"
                },
                "set_byte_value_08008d00": {
                    "1": "set_byte_value_param1",
                    "12": "set_byte_value",
                    "3": "set_byte_value1",
                    "8": "set_byte_value_1"
                },
                "set_byte_value_08008d18": {
                    "1": "set_default_value",
                    "2": "set_default_byte_value",
                    "3": "set_byte_value2",
                    "8": "set_byte_value_2"
                },
                "uVar1": {
                    "1": "char_index",
                    "20": "character_index",
                    "6": "index"
                }
            },
            "called": [
                "FUN_0800734a",
                "FUN_08008c20",
                "FUN_08008d18",
                "FUN_08008d00"
            ],
            "calling": [
                "FUN_08008d8c"
            ],
            "code": "\nundefined4 *\ninitialize_data_08008d30(undefined4 *data,undefined4 character,undefined4 value_1,undefined4 value_2)\n\n{\n  undefined character_index;\n  \n  data[1] = 0;\n  data[2] = 1000;\n  *data = &PTR_LAB_08008ba4_1_0800aab8;\n  if (data == (undefined4 *)&DAT_20000700) {\n    set_byte_value(&DAT_20000700,0,value_1,&DAT_20000700,value_2);\n    set_byte_value_2(&DAT_20000700,1);\n  }\n  else {\n    character_index = find_character_index(character,&DAT_0800a81c);\n    *(undefined *)((int)data + 0x12d) = character_index;\n    character_index = find_character_index(character,&DAT_0800a864);\n    *(undefined *)(data + 0x4b) = character_index;\n  }\n  initialize_data_08008d30(data);\n  return data;\n}\n\n",
            "current_name": "initialize_data_08008d30",
            "entrypoint": "0x08008d30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008d30": "initialize_data_08008d30",
                "find_character_index_0800734a": "find_character_index",
                "initialize_data_08008c20": "initialize_data",
                "param_1": "data",
                "param_1[1]": "data[1]",
                "param_1[2]": "data[2]",
                "param_2": "character",
                "param_3": "value_1",
                "param_4": "value_2",
                "set_byte_value_08008d00": "set_byte_value",
                "set_byte_value_08008d18": "set_byte_value_2",
                "uVar1": "character_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008d8c": {
            "additional_data": {
                "0x40004400": {
                    "1": "data_size"
                },
                "0xffff": {
                    "1": "condition_value"
                },
                "DAT_0x40004400": {
                    "1": "data_0x40004400"
                },
                "DAT_20000700": {
                    "1": "data_variable",
                    "3": "data"
                },
                "FUN_08008d8c": {
                    "1": "initialize_data_if_param_1_equals_1",
                    "2": "initialize_data_if_param1_is_one",
                    "4": "initialize_if_param1_is_one",
                    "6": "initialize_if_param1_is_1",
                    "7": "initialize_data_if_param1_is_1"
                },
                "data": {
                    "1": "data"
                },
                "initialize_data": {
                    "1": "initialize_data"
                },
                "initialize_data_08008d30": {
                    "5": "initialize_data"
                },
                "initialize_if_param1_is_one": {
                    "1": "initialize_if_param1_is_one"
                },
                "initialize_if_param_1_is_1": {
                    "1": "initialize_if_param_1_is_1"
                },
                "is_param1": {
                    "1": "is_param1"
                },
                "param2": {
                    "1": "param2"
                },
                "param3": {
                    "1": "param3"
                },
                "param4": {
                    "1": "param4"
                },
                "param_1": {
                    "1": "is_param_1",
                    "2": "is_param1",
                    "3": "is_param1_equal_to_1",
                    "5": "condition"
                },
                "param_2": {
                    "1": "parameter_value",
                    "4": "param2",
                    "6": "param2_value",
                    "9": "value"
                },
                "param_3": {
                    "1": "parameter_three",
                    "2": "data_1",
                    "5": "param3_value",
                    "6": "param3"
                },
                "param_4": {
                    "1": "param_4_value",
                    "2": "arg2",
                    "5": "param4_value",
                    "6": "param4"
                }
            },
            "called": [
                "FUN_08008d30"
            ],
            "calling": [],
            "code": "\nvoid initialize_data_if_param1_is_1_08008d8c(int is_param1_one,int value,undefined4 param3,undefined4 param4)\n\n{\n  if (is_param1_one != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    initialize_data(&DAT_20000700,0x40004400,param3,0xffff,param4);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_data_if_param1_is_1_08008d8c",
            "entrypoint": "0x08008d8c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008d8c": "initialize_data_if_param1_is_1_08008d8c",
                "initialize_data_08008d30": "initialize_data",
                "param_1": "is_param1_one",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008df8": {
            "additional_data": {
                "FUN_08008df8": {
                    "1": "initialize_data_buffer",
                    "2": "initialize_memory",
                    "22": "initialize_data",
                    "4": "initialize_params"
                },
                "param_1": {
                    "1": "data_structure",
                    "17": "data_pointer",
                    "2": "data_ptr",
                    "4": "output"
                },
                "param_2": {
                    "1": "byte_value",
                    "2": "value_1",
                    "23": "value1",
                    "4": "param2"
                },
                "param_3": {
                    "1": "value1",
                    "2": "value_2",
                    "23": "value2",
                    "4": "param3"
                },
                "param_4": {
                    "1": "value2",
                    "2": "value_3",
                    "23": "value3",
                    "4": "param4"
                },
                "param_5": {
                    "1": "value3",
                    "2": "value_4",
                    "23": "value4",
                    "4": "param5"
                }
            },
            "called": [],
            "calling": [
                "FUN_08008e14"
            ],
            "code": "\nvoid initialize_data_08008df8(undefined4 *data_pointer,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *data_pointer = &DAT_0800ab0c;\n  *(undefined *)(data_pointer + 1) = value1;\n  *(undefined *)((int)data_pointer + 5) = value2;\n  *(undefined *)((int)data_pointer + 6) = value3;\n  *(undefined *)((int)data_pointer + 7) = value4;\n  return;\n}\n\n",
            "current_name": "initialize_data_08008df8",
            "entrypoint": "0x08008df8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008df8": "initialize_data_08008df8",
                "param_1": "data_pointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008e14": {
            "additional_data": {
                "FUN_08008e14": {
                    "1": "initialize_if_statement",
                    "13": "initialize_data_if_condition_met",
                    "3": "initialize_if_parameters_valid",
                    "5": "initialize_if_condition"
                },
                "initialize_data_08008df8": {
                    "1": "initialize_data_func",
                    "4": "initialize_data"
                },
                "param_1": {
                    "1": "first_parameter",
                    "10": "condition_1",
                    "4": "flag"
                },
                "param_2": {
                    "1": "value_limit",
                    "10": "condition_2",
                    "5": "value"
                }
            },
            "called": [
                "FUN_08008df8"
            ],
            "calling": [],
            "code": "\nvoid initialize_data_if_condition_met_08008e14(int condition_1,int condition_2)\n\n{\n  if ((condition_1 == 1) && (condition_2 == 0xffff)) {\n    initialize_data(&DAT_20000844,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_data_if_condition_met_08008e14",
            "entrypoint": "0x08008e14",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008e14": "initialize_data_if_condition_met_08008e14",
                "initialize_data_08008df8": "initialize_data",
                "param_1": "condition_1",
                "param_2": "condition_2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008ef4": {
            "additional_data": {
                "(param_1 - param_2)": {
                    "1": "difference_in_values"
                },
                "(param_3 - param_2)": {
                    "1": "difference_offset_values"
                },
                "(param_5 - param_4)": {
                    "1": "difference_in_offsets"
                },
                "FUN_08008ef4": {
                    "1": "calculate_result",
                    "12": "calculate_new_value",
                    "2": "calculate_weighted_average",
                    "5": "calculate_interpolation"
                },
                "difference_in_offsets * difference_in_values": {
                    "1": "product_of_differences"
                },
                "new_variable_name_1": {
                    "1": "difference_result"
                },
                "new_variable_name_2": {
                    "1": "index_difference"
                },
                "param_1": {
                    "1": "first_param",
                    "14": "start_value",
                    "2": "starting_value",
                    "3": "previous_value"
                },
                "param_1 - param_2": {
                    "1": "value_difference"
                },
                "param_2": {
                    "1": "second_param",
                    "2": "current_value",
                    "3": "start_range",
                    "4": "end_value"
                },
                "param_3": {
                    "1": "end_value2",
                    "2": "value_3",
                    "3": "end_range"
                },
                "param_3 - param_2": {
                    "1": "range_difference"
                },
                "param_4": {
                    "1": "fourth_param",
                    "2": "offset",
                    "3": "lower_bound",
                    "5": "start_result"
                },
                "param_5": {
                    "1": "current_value",
                    "2": "end_output",
                    "3": "upper_bound",
                    "5": "end_result"
                },
                "param_5 - param_4": {
                    "1": "output_difference"
                },
                "product_of_differences / difference_offset_values": {
                    "1": "result"
                },
                "result": {
                    "1": "offset"
                },
                "return (uint)": {
                    "1": "return"
                },
                "uint": {
                    "2": "unsigned_integer"
                }
            },
            "called": [],
            "calling": [
                "FUN_080026b0"
            ],
            "code": "\nint calculate_new_value_08008ef4(int start_value,int end_value,int end_value,int start_result,int end_result)\n\n{\n  return (unsigned_integer)((end_result - start_result) * (start_value - end_value)) / (unsigned_integer)(end_value - end_value) + start_result;\n}\n\n",
            "current_name": "calculate_new_value_08008ef4",
            "entrypoint": "0x08008ef4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008ef4": "calculate_new_value_08008ef4",
                "param_1": "start_value",
                "param_2": "end_value",
                "param_3": "end_value",
                "param_4": "start_result",
                "param_5": "end_result",
                "uint": "unsigned_integer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008f0c": {
            "called": [],
            "calling": [
                "FUN_08008f1c"
            ],
            "code": "\nvoid FUNC_08008f0c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08008f0c",
            "entrypoint": "0x08008f0c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08008f0c": "FUNC_08008f0c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08008f0e": {
            "additional_data": {
                "3": {
                    "1": "register_value"
                },
                "FUN_08008f0e": {
                    "1": "initialize_registers_and_memory",
                    "11": "initialize_system",
                    "17": "initialize_system_and_memory"
                },
                "initialize_system_and_memory_080036a2": {
                    "1": "init_system_memory",
                    "16": "initialize_system_and_memory",
                    "2": "initialize_system",
                    "5": "initialize_memory"
                },
                "update_register_value_08003f0c": {
                    "13": "set_register_value",
                    "18": "update_register_value"
                }
            },
            "called": [
                "FUN_080036a2",
                "FUN_08003f0c"
            ],
            "calling": [
                "FUN_08009148"
            ],
            "code": "\nvoid initialize_system_and_memory_08008f0e(void)\n\n{\n  update_register_value(3);\n  initialize_system_and_memory_08008f0e();\n  return;\n}\n\n",
            "current_name": "initialize_system_and_memory_08008f0e",
            "entrypoint": "0x08008f0e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008f0e": "initialize_system_and_memory_08008f0e",
                "initialize_system_and_memory_080036a2": "initialize_system_and_memory",
                "update_register_value_08003f0c": "update_register_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008f1c": {
            "additional_data": {
                "FUNC_08008bf4": {
                    "1": "execute_operation",
                    "2": "finalize_processing",
                    "3": "cleanup_resources",
                    "8": "cleanup"
                },
                "FUNC_08008f0c": {
                    "1": "initialize_components",
                    "2": "initialize_functions",
                    "9": "initialize_system"
                },
                "FUN_08008f1c": {
                    "1": "process_data_in_loop",
                    "2": "continuous_data_processing",
                    "3": "process_data_loop",
                    "4": "process_gateway_data"
                },
                "initialize_gateway_08001b48": {
                    "1": "setup_gateway",
                    "30": "initialize_gateway"
                },
                "process_data_080022f8": {
                    "31": "process_data"
                }
            },
            "called": [
                "FUN_08001b48",
                "FUN_08008f0c",
                "FUN_08008bf4",
                "FUN_080022f8"
            ],
            "calling": [
                "entry"
            ],
            "code": "\nvoid process_gateway_data_08008f1c(void)\n\n{\n  FUNC_08008f0c();\n  initialize_gateway();\n  do {\n    process_data();\n    FUNC_08008bf4();\n  } while( true );\n}\n\n",
            "current_name": "process_gateway_data_08008f1c",
            "entrypoint": "0x08008f1c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008f1c": "process_gateway_data_08008f1c",
                "initialize_gateway_08001b48": "initialize_gateway",
                "process_data_080022f8": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008f3c": {
            "additional_data": {
                "FUN_08008f3c": {
                    "1": "bit_count",
                    "18": "count_set_bits",
                    "4": "count_bits_set",
                    "7": "count_bits"
                },
                "cVar1": {
                    "1": "set_bits_count",
                    "2": "count",
                    "25": "bit_count"
                },
                "param_1": {
                    "1": "value",
                    "13": "number",
                    "4": "input_number",
                    "7": "num"
                }
            },
            "called": [],
            "calling": [
                "FUN_08009094"
            ],
            "code": "\nchar count_set_bits_08008f3c(uint number)\n\n{\n  char bit_count;\n  \n  bit_count = '\\0';\n  for (; number != 1; number = number >> 1) {\n    bit_count = bit_count + '\\x01';\n  }\n  return bit_count;\n}\n\n",
            "current_name": "count_set_bits_08008f3c",
            "entrypoint": "0x08008f3c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008f3c": "count_set_bits_08008f3c",
                "cVar1": "bit_count",
                "param_1": "number"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008f78": {
            "additional_data": {
                "&LAB_08008f50_1": {
                    "1": "label1"
                },
                "FUN_08008f78": {
                    "1": "initialize_config",
                    "21": "initialize_data",
                    "3": "initialize_parameters",
                    "4": "initialize_constants"
                },
                "LAB_08008f50_1": {
                    "1": "constant1",
                    "2": "unused3",
                    "3": "unused_label",
                    "5": "label"
                },
                "constant1": {
                    "1": "constant1"
                },
                "dataCheck": {
                    "1": "data_check"
                },
                "flag": {
                    "1": "is_config_set"
                },
                "initializeConfig": {
                    "1": "initialize_configuration"
                },
                "initializeConstants": {
                    "1": "initialize_constants"
                },
                "initializeData": {
                    "5": "initialize_data"
                },
                "initializeParameters": {
                    "1": "initialize_flags"
                },
                "inputFlag": {
                    "1": "flag"
                },
                "inputParameter": {
                    "1": "input_parameter"
                },
                "inputValue": {
                    "1": "input_value"
                },
                "isInitialized": {
                    "1": "is_initialized"
                },
                "label": {
                    "1": "config_label",
                    "2": "label"
                },
                "param1": {
                    "1": "parameter1"
                },
                "param2": {
                    "1": "parameter2"
                },
                "param3": {
                    "1": "param3"
                },
                "param4": {
                    "1": "param4"
                },
                "paramValue": {
                    "1": "param_value"
                },
                "param_1": {
                    "1": "check",
                    "10": "flag",
                    "2": "input_flag",
                    "5": "status",
                    "7": "condition"
                },
                "param_2": {
                    "1": "input_param",
                    "2": "input_value",
                    "23": "value"
                },
                "param_3": {
                    "1": "undefined1",
                    "2": "unknown_param1",
                    "4": "param3",
                    "6": "unused_param1",
                    "8": "unused1"
                },
                "param_4": {
                    "1": "param",
                    "2": "unknown_param2",
                    "4": "param4",
                    "6": "unused_param2",
                    "8": "unused2"
                },
                "shiftLeft64Bits": {
                    "1": "shift_left",
                    "2": "shift_left64_bits"
                },
                "shiftLeftBits": {
                    "1": "shift_left_bits"
                },
                "shift_left64_bits_080090c2": {
                    "1": "shift_bits_left",
                    "18": "shift_left64_bits",
                    "2": "shift_left_bits"
                },
                "shift_left_64_bits_080090c2": {
                    "1": "shift_left64_bits"
                },
                "specialValue": {
                    "1": "special_value"
                },
                "status": {
                    "2": "status"
                },
                "unknownParam1": {
                    "1": "param1"
                },
                "unknownParam2": {
                    "1": "param2"
                },
                "unusedParam1": {
                    "1": "unused_param1"
                },
                "unusedParam2": {
                    "1": "unused_param2"
                },
                "value": {
                    "1": "config_value",
                    "3": "value"
                }
            },
            "called": [
                "FUN_080090c2"
            ],
            "calling": [],
            "code": "\nvoid initialize_data_08008f78(int flag,int value,undefined4 unused1,undefined4 unused2)\n\n{\n  if (flag != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    DAT_2000084c = 6;\n    DAT_20000858 = 0;\n    DAT_20000860 = 7;\n    DAT_2000086c = 0;\n    DAT_20000874 = 8;\n    DAT_20000880 = 0;\n    DAT_20000888 = 9;\n    DAT_20000894 = 0;\n    DAT_2000089c = 10;\n    DAT_200008a8 = 0;\n    DAT_200008b0 = 0x17;\n    DAT_200008bc = 0;\n    DAT_200008c4 = 0x17;\n    DAT_200008d0 = 0;\n    DAT_200008d8 = 0x17;\n    DAT_200008e4 = 0;\n    DAT_200008ec = 0x17;\n    DAT_200008f8 = 0;\n    DAT_20000900 = 0x17;\n    DAT_2000090c = 0;\n    DAT_20000914 = 0x28;\n    DAT_20000920 = 0;\n    DAT_20000928 = 0x28;\n    DAT_20000934 = 0;\n    DAT_2000093c = 0x28;\n    DAT_20000948 = 0;\n    DAT_20000950 = 0x28;\n    DAT_2000095c = 0;\n    DAT_20000964 = 0x28;\n    DAT_20000970 = 0;\n    DAT_20000978 = 0x28;\n    DAT_20000984 = 0;\n    shift_left64_bits(0,label1,&DAT_20000000,&DAT_2000084c,unused2);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_data_08008f78",
            "entrypoint": "0x08008f78",
            "imported": false,
            "improved": true,
            "renaming": {
                "&LAB_08008f50_1": "label1",
                "FUN_08008f78": "initialize_data_08008f78",
                "LAB_08008f50_1": "label",
                "param_1": "flag",
                "param_2": "value",
                "param_3": "unused1",
                "param_4": "unused2",
                "shift_left64_bits_080090c2": "shift_left64_bits"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009084": {
            "additional_data": {
                "&DAT_20000858": {
                    "1": "bit_array",
                    "2": "data_array"
                },
                "**(code **)(param_1 + 0xc)": {
                    "2": "function_pointer"
                },
                "DAT_20000858": {
                    "5": "data_array"
                },
                "FUN_08009084": {
                    "1": "process_function",
                    "2": "process_and_check_data",
                    "20": "process_data"
                },
                "PTR_DAT_20000858": {
                    "1": "data_array"
                },
                "PTR_FUN_08008f3c": {
                    "1": "count_set_bits"
                },
                "PTR_FUN_0800a18c": {
                    "1": "process_data"
                },
                "count_set_bits_08008f3c": {
                    "1": "get_bit_count",
                    "14": "count_set_bits",
                    "2": "count_set_bits_08008f3c"
                },
                "iVar1": {
                    "27": "bit_count",
                    "4": "bits_count"
                },
                "param_1": {
                    "1": "param",
                    "11": "input",
                    "2": "data_param",
                    "3": "input_param",
                    "8": "data"
                },
                "process_data_0800a18c": {
                    "1": "do_some_processing",
                    "10": "process_data",
                    "2": "process_data_0800a18c"
                }
            },
            "called": [
                "FUN_0800a18c"
            ],
            "calling": [
                "FUN_08009094"
            ],
            "code": "\nvoid process_data_08009084(int input)\n\n{\n  int bit_count;\n  \n  if (*(int *)(input + 8) != 0) {\n    (**(code **)(input + 0xc))();\n    return;\n  }\n  process_data_08009084();\n  bit_count = count_set_bits();\n  if ((&DAT_20000858)[bit_count * 5] != 0) {\n    process_data_08009084();\n  }\n  return;\n}\n\n",
            "current_name": "process_data_08009084",
            "entrypoint": "0x08009084",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009084": "process_data_08009084",
                "count_set_bits_08008f3c": "count_set_bits",
                "iVar1": "bit_count",
                "param_1": "input",
                "process_data_0800a18c": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009094": {
            "additional_data": {
                "&DAT_20000858": {
                    "1": "data_pointer",
                    "2": "data_array"
                },
                "DAT_20000858": {
                    "1": "array_data",
                    "4": "data_array"
                },
                "FUN_08009094": {
                    "1": "process_if_bits_set",
                    "18": "check_and_process_data",
                    "2": "process_if_bit_set",
                    "3": "process_bit_count"
                },
                "count_set_bits_08008f3c": {
                    "16": "count_set_bits",
                    "2": "get_set_bits_count",
                    "3": "get_bit_count"
                },
                "iVar1": {
                    "1": "set_bits_count",
                    "2": "num_set_bits",
                    "21": "bit_count",
                    "3": "bits_count"
                },
                "process_data_08009084": {
                    "21": "process_data"
                }
            },
            "called": [
                "FUN_08008f3c",
                "FUN_08009084"
            ],
            "calling": [
                "FUN_080042f0"
            ],
            "code": "\nvoid check_and_process_data_08009094(void)\n\n{\n  int bit_count;\n  \n  bit_count = count_set_bits();\n  if ((&DAT_20000858)[bit_count * 5] != 0) {\n    process_data();\n  }\n  return;\n}\n\n",
            "current_name": "check_and_process_data_08009094",
            "entrypoint": "0x08009094",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009094": "check_and_process_data_08009094",
                "count_set_bits_08008f3c": "count_set_bits",
                "iVar1": "bit_count",
                "process_data_08009084": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080090c2": {
            "additional_data": {
                "FUN_080090c2": {
                    "1": "shift_left_bits",
                    "22": "shift_left64_bits",
                    "6": "shift_left_64_bits"
                },
                "param_1": {
                    "1": "input_param",
                    "13": "input1",
                    "2": "output",
                    "7": "source"
                },
                "param_2": {
                    "1": "value2",
                    "13": "input2",
                    "2": "input_2",
                    "3": "shift_amount",
                    "7": "destination"
                }
            },
            "called": [
                "FUN_08009108"
            ],
            "calling": [
                "FUN_08008f78"
            ],
            "code": "\nvoid shift_left64_bits_080090c2(undefined4 input1,undefined4 input2)\n\n{\n  shift_left64_bits_080090c2_08009108(input2,input1);\n  return;\n}\n\n",
            "current_name": "shift_left64_bits_080090c2",
            "entrypoint": "0x080090c2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080090c2": "shift_left64_bits_080090c2",
                "param_1": "input1",
                "param_2": "input2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080090cc": {
            "additional_data": {
                "FUN_080090cc": {
                    "1": "print_assert_error",
                    "12": "assertion_failed",
                    "2": "process_assertion_failed"
                },
                "param_1": {
                    "1": "filename",
                    "11": "file",
                    "2": "assertion_message",
                    "3": "assertion",
                    "5": "message",
                    "9": "file_name"
                },
                "param_2": {
                    "10": "line",
                    "11": "line_number",
                    "2": "assertion_file",
                    "3": "file"
                },
                "param_3": {
                    "1": "line",
                    "2": "condition",
                    "3": "line_number",
                    "5": "assertion",
                    "6": "message",
                    "8": "assertion_message"
                },
                "param_4": {
                    "1": "format",
                    "10": "function",
                    "2": "assertion_function",
                    "3": "additional_info",
                    "4": "line_number",
                    "7": "function_name"
                },
                "pcVar2": {
                    "1": "suffix",
                    "3": "delimiter",
                    "4": "prefix",
                    "5": "additional_info"
                },
                "process_data_08009124": {
                    "1": "print_assertion_error"
                },
                "process_data_08009b5c": {
                    "2": "get_result"
                },
                "uVar1": {
                    "1": "assertion_address",
                    "2": "file_descriptor",
                    "7": "file_ptr"
                },
                "uVar3": {
                    "1": "process_data",
                    "20": "result",
                    "3": "processed_data",
                    "4": "process_result"
                },
                "uVar4": {
                    "1": "format_ptr",
                    "2": "u_var4",
                    "3": "function_ptr"
                }
            },
            "called": [
                "FUN_08009b5c",
                "FUN_08009124"
            ],
            "calling": [
                "FUN_08008c44"
            ],
            "code": "\nvoid assertion_failed_080090cc(undefined4 file,undefined4 line_number,char *assertion_message,undefined4 function)\n\n{\n  undefined4 file_ptr;\n  char *additional_info;\n  undefined8 result;\n  undefined4 function_ptr;\n  \n  file_ptr = *(undefined4 *)(DAT_20000090 + 0xc);\n  function_ptr = function;\n  if (assertion_message == (char *)0x0) goto LAB_080090f0;\n  additional_info = \", function: \";\n  do {\n    print_assertion_error(file_ptr,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",function,file,line_number\n                 ,additional_info,assertion_message,function_ptr);\n    result = get_result();\n    line_number = (undefined4)((ulonglong)result >> 0x20);\n    file_ptr = (undefined4)result;\nLAB_080090f0:\n    assertion_message = \"\";\n    additional_info = assertion_message;\n  } while( true );\n}\n\n",
            "current_name": "assertion_failed_080090cc",
            "entrypoint": "0x080090cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080090cc": "assertion_failed_080090cc",
                "param_1": "file",
                "param_2": "line_number",
                "param_3": "assertion_message",
                "param_4": "function",
                "pcVar2": "additional_info",
                "process_data_08009124": "print_assertion_error",
                "process_data_08009b5c": "get_result",
                "uVar1": "file_ptr",
                "uVar3": "result",
                "uVar4": "function_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009108": {
            "additional_data": {
                "FUN_08009108": {
                    "1": "shift_unsigned_int_to_long",
                    "2": "shift_unsigned_long_long_left",
                    "4": "shift_left_by32_bits",
                    "6": "shift_left64_bits"
                },
                "new_variable_name_1": {
                    "1": "variable_name_1"
                },
                "new_variable_name_2": {
                    "1": "variable_name_2"
                },
                "new_variable_name_n": {
                    "1": "variable_name_n"
                },
                "param_1": {
                    "1": "input1",
                    "2": "value",
                    "3": "param",
                    "4": "flags",
                    "5": "input_value"
                },
                "param_2": {
                    "1": "unsigned_int",
                    "2": "arg2",
                    "3": "input_value",
                    "7": "shift_amount",
                    "9": "value"
                },
                "param_3": {
                    "1": "new_parameter_name3"
                },
                "param_n": {
                    "1": "new_parameter_name_n"
                }
            },
            "called": [],
            "calling": [
                "FUN_080090c2"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009110) */\n\nlonglong shift_left64_bits_08009108(undefined4 input_value,uint value)\n\n{\n  return (ulonglong)value << 0x20;\n}\n\n",
            "current_name": "shift_left64_bits_08009108",
            "entrypoint": "0x08009108",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009108": "shift_left64_bits_08009108",
                "param_1": "input_value",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009124": {
            "additional_data": {
                "FUN_08009124": {
                    "1": "process_data_wrapper",
                    "16": "process_data",
                    "2": "process_and_send_data",
                    "4": "process_and_update_data",
                    "5": "process_and_store_data"
                },
                "param_1": {
                    "1": "data_1",
                    "2": "input_param1",
                    "3": "input_param",
                    "4": "data_param",
                    "5": "input1",
                    "6": "input_param_1"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "size_param",
                    "3": "input_2",
                    "5": "input2",
                    "6": "input_param_2"
                },
                "param_3": {
                    "1": "storage_param",
                    "2": "stack_param_1",
                    "3": "temp_param_1"
                },
                "param_4": {
                    "1": "output_param_2",
                    "2": "data_2",
                    "3": "param4",
                    "4": "temp_param_2"
                },
                "uStack_4": {
                    "1": "processed_output2",
                    "2": "temp_var_2"
                },
                "uStack_8": {
                    "1": "temp3",
                    "2": "temp_var_1"
                }
            },
            "called": [
                "FUN_0800937c"
            ],
            "calling": [
                "FUN_080090cc"
            ],
            "code": "\nvoid process_data_08009124(undefined4 input_param_1,undefined4 input_param_2,undefined4 param3,undefined4 temp_param_2)\n\n{\n  undefined4 temp_var_1;\n  undefined4 temp_var_2;\n  \n  temp_var_1 = param3;\n  temp_var_2 = temp_param_2;\n  process_data_08009124_0800937c(DAT_20000090,input_param_1,input_param_2,&temp_var_1,input_param_1,&temp_var_1);\n  return;\n}\n\n",
            "current_name": "process_data_08009124",
            "entrypoint": "0x08009124",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009124": "process_data_08009124",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "param3",
                "param_4": "temp_param_2",
                "uStack_4": "temp_var_2",
                "uStack_8": "temp_var_1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009148": {
            "additional_data": {
                "&DAT_0800abe4": {
                    "1": "function_array"
                },
                "(*(code *)(&DAT_0800abe4)[iVar1])": {
                    "1": "execute_function"
                },
                "DAT_0800abe4": {
                    "1": "function_pointers"
                },
                "FUNC_0800a424": {
                    "1": "cleanup_function",
                    "2": "additional_function"
                },
                "FUNK_08009148": {
                    "1": "execute_function_queue"
                },
                "FUN_08009148": {
                    "1": "execute_function_sequence",
                    "19": "execute_functions",
                    "2": "execute_all_functions"
                },
                "iVar1": {
                    "1": "callback_index",
                    "2": "i",
                    "22": "index",
                    "5": "counter"
                }
            },
            "called": [
                "FUN_0800a424",
                "FUN_08008f0e"
            ],
            "calling": [
                "entry"
            ],
            "code": "\nvoid execute_functions_08009148(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_0800abe4)[index])();\n  }\n  FUNC_0800a424();\n  for (index = 0; index != 0xc; index = index + 1) {\n    (*(code *)(&DAT_0800abe4)[index])();\n  }\n  return;\n}\n\n",
            "current_name": "execute_functions_08009148",
            "entrypoint": "0x08009148",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009148": "execute_functions_08009148",
                "iVar1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009190": {
            "additional_data": {
                "DAT_20000090": {
                    "1": "memory"
                },
                "FUN_08009190": {
                    "1": "allocate_and_assign_memory_to_dat",
                    "18": "allocate_and_assign_memory",
                    "2": "assign_and_allocate_memory",
                    "3": "allocate_memory_and_assign",
                    "6": "assign_memory"
                },
                "allocate_and_assign_memory_08009270": {
                    "1": "allocate_memory_and_assign",
                    "5": "allocate_and_assign_memory_helper",
                    "8": "allocate_and_assign_memory"
                },
                "param_1": {
                    "1": "value",
                    "2": "memory_value",
                    "4": "param",
                    "6": "input_data",
                    "7": "data"
                }
            },
            "called": [
                "FUN_08009270"
            ],
            "calling": [
                "FUN_08002e44"
            ],
            "code": "\nvoid allocate_and_assign_memory_08009190(undefined4 data)\n\n{\n  allocate_and_assign_memory_08009190(DAT_20000090,data);\n  return;\n}\n\n",
            "current_name": "allocate_and_assign_memory_08009190",
            "entrypoint": "0x08009190",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009190": "allocate_and_assign_memory_08009190",
                "allocate_and_assign_memory_08009270": "allocate_and_assign_memory",
                "param_1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080091a0": {
            "additional_data": {
                "DAT_20000090": {
                    "1": "data_buffer"
                },
                "FUN_080091a0": {
                    "1": "process_data_wrapper",
                    "29": "process_data"
                },
                "param_1": {
                    "1": "arg",
                    "20": "data",
                    "9": "input_data"
                },
                "process_data_080091d8": {
                    "1": "handle_data",
                    "6": "process_data_helper"
                }
            },
            "called": [
                "FUN_080091d8"
            ],
            "calling": [
                "FUN_08002e44"
            ],
            "code": "\nvoid process_data_080091a0(undefined4 data)\n\n{\n  process_data_080091a0_helper(DAT_20000090,data);\n  return;\n}\n\n",
            "current_name": "process_data_080091a0",
            "entrypoint": "0x080091a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080091a0": "process_data_080091a0",
                "param_1": "data",
                "process_data_080091d8": "process_data_helper"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080091b0": {
            "additional_data": {
                "*puVar2": {
                    "1": "current_target_value"
                },
                "FUN_080091b0": {
                    "1": "copy_data_to_pointer",
                    "2": "copy_memory",
                    "20": "copy_data",
                    "3": "copy_array"
                },
                "param_1": {
                    "1": "dest_start",
                    "2": "source_address",
                    "3": "destination",
                    "4": "dest_address"
                },
                "param_2": {
                    "1": "source_arr",
                    "2": "src_addr",
                    "3": "src_address",
                    "4": "source",
                    "5": "src_data"
                },
                "param_3": {
                    "1": "src_length",
                    "2": "num_elements",
                    "3": "array_length",
                    "4": "size",
                    "8": "length"
                },
                "puVar1": {
                    "1": "dest_end_address",
                    "2": "dest_array_end",
                    "3": "src_end",
                    "4": "dest_end"
                },
                "puVar2": {
                    "1": "dest_end_address",
                    "2": "dst_data",
                    "3": "dest_end",
                    "4": "dest_ptr"
                }
            },
            "called": [],
            "calling": [
                "FUN_080027f0",
                "FUN_08009908"
            ],
            "code": "\nvoid copy_data_080091b0(int start_index,undefined *src_data,int data_length)\n\n{\n  undefined *dest_end;\n  undefined *dest_ptr;\n  \n  dest_ptr = (undefined *)(start_index + -1);\n  dest_end = src_data + data_length;\n  for (; src_data != dest_end; src_data = src_data + 1) {\n    dest_ptr = dest_ptr + 1;\n    *dest_ptr = *src_data;\n  }\n  return;\n}\n\n",
            "current_name": "copy_data_080091b0",
            "entrypoint": "0x080091b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080091b0": "copy_data_080091b0",
                "param_1": "start_index",
                "param_2": "src_data",
                "param_3": "data_length",
                "puVar1": "dest_end",
                "puVar2": "dest_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080091c6": {
            "additional_data": {
                "FUN_080091c6": {
                    "1": "fill_memory_with_byte",
                    "13": "fill_memory",
                    "2": "fill_array_with_value",
                    "3": "memset",
                    "4": "initialize_memory"
                },
                "param_1": {
                    "1": "memory_array",
                    "11": "destination",
                    "2": "memory_ptr",
                    "5": "array",
                    "8": "memory"
                },
                "param_2": {
                    "1": "byte_value",
                    "26": "value",
                    "3": "initial_value"
                },
                "param_3": {
                    "1": "count",
                    "12": "length",
                    "2": "memory_size"
                },
                "puVar1": {
                    "1": "end",
                    "2": "end_of_memory",
                    "6": "end_ptr",
                    "9": "end_address"
                }
            },
            "called": [],
            "calling": [
                "FUN_08009cdc",
                "FUN_08009db0",
                "FUN_08002a58",
                "FUN_08007118",
                "FUN_08009d24",
                "FUN_08006d80",
                "FUN_08002968"
            ],
            "code": "\nvoid fill_memory_080091c6(undefined *destination,undefined value,int length)\n\n{\n  undefined *end_address;\n  \n  end_address = destination + length;\n  for (; destination != end_address; destination = destination + 1) {\n    *destination = value;\n  }\n  return;\n}\n\n",
            "current_name": "fill_memory_080091c6",
            "entrypoint": "0x080091c6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080091c6": "fill_memory_080091c6",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "end_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080091d8": {
            "additional_data": {
                "DAT_2000098c": {
                    "1": "data_head"
                },
                "FUNC_08009f48": {
                    "1": "some_function"
                },
                "FUNC_08009f4a": {
                    "1": "another_function"
                },
                "FUN_080091d8": {
                    "1": "update_data",
                    "13": "process_data",
                    "2": "update_linked_list",
                    "4": "update_pointer"
                },
                "FUN_08009f48": {
                    "1": "initialize_memory"
                },
                "extraout_r1": {
                    "1": "ptr1",
                    "2": "extra",
                    "3": "extra_output",
                    "4": "temp1"
                },
                "param_1": {
                    "1": "list_head",
                    "15": "output",
                    "5": "output_array",
                    "6": "result"
                },
                "param_2": {
                    "1": "input_param",
                    "14": "size",
                    "2": "array_size",
                    "3": "length",
                    "4": "input_size"
                },
                "param_3": {
                    "1": "input1",
                    "13": "param3",
                    "3": "param_3",
                    "4": "arg3",
                    "5": "arg1"
                },
                "param_4": {
                    "1": "value2",
                    "13": "param4",
                    "3": "param_4",
                    "4": "arg4",
                    "5": "arg2"
                },
                "piVar3": {
                    "1": "temp_node",
                    "2": "temp_var1",
                    "3": "temp_ptr",
                    "4": "temp4",
                    "9": "temp_var"
                },
                "ppiVar1": {
                    "1": "temp_variable2",
                    "2": "current",
                    "3": "temp_ptr2",
                    "4": "temp2",
                    "5": "temp_ptr1"
                },
                "ppiVar2": {
                    "1": "ptr3",
                    "2": "temp2",
                    "3": "temp_ptr3",
                    "4": "next_ptr",
                    "5": "temp_ptr2"
                },
                "ppiVar4": {
                    "1": "prev_iter_node",
                    "2": "temp_ptr",
                    "3": "temp_ptr4",
                    "4": "temp5",
                    "5": "temp_ptr3"
                },
                "ppiVar5": {
                    "1": "entry",
                    "2": "temp_var6",
                    "3": "new_node",
                    "4": "temp6",
                    "5": "temp_ptr4"
                }
            },
            "called": [
                "FUN_08009f4a",
                "FUN_08009f48"
            ],
            "calling": [
                "FUN_08009b5c",
                "FUN_080091a0",
                "FUN_08009a80",
                "FUN_08009908"
            ],
            "code": "\nvoid process_data_080091d8(undefined4 *output,int size,undefined4 param3,undefined4 param4)\n\n{\n  int **temp1;\n  int **temp_ptr1;\n  int **temp_ptr2;\n  int *temp_var;\n  int **temp_ptr3;\n  int **temp_ptr4;\n  \n  if (size == 0) {\n    return;\n  }\n  temp_ptr4 = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    temp_ptr4 = (int **)((int)temp_ptr4 + *(int *)(size + -4));\n  }\n  FUNC_08009f48();\n  temp_ptr2 = (int **)&DAT_2000098c;\n  if (DAT_2000098c == (int **)0x0) {\n    temp_ptr4[1] = (int *)0x0;\n    temp_ptr1 = temp1;\n    DAT_2000098c = temp_ptr4;\n  }\n  else {\n    temp_ptr2 = DAT_2000098c;\n    if (temp_ptr4 < DAT_2000098c) {\n      temp_ptr1 = (int **)*temp_ptr4;\n      temp_ptr2 = (int **)((int)temp_ptr4 + (int)temp_ptr1);\n      if (DAT_2000098c == temp_ptr2) {\n        temp_var = *DAT_2000098c;\n        DAT_2000098c = (int **)DAT_2000098c[1];\n        temp_ptr2 = (int **)((int)temp_var + (int)temp_ptr1);\n        *temp_ptr4 = (int *)temp_ptr2;\n      }\n      temp_ptr4[1] = (int *)DAT_2000098c;\n      DAT_2000098c = temp_ptr4;\n    }\n    else {\n      do {\n        temp_ptr3 = temp_ptr2;\n        temp_ptr2 = (int **)temp_ptr3[1];\n        if (temp_ptr2 == (int **)0x0) break;\n      } while (temp_ptr2 <= temp_ptr4);\n      temp_ptr1 = (int **)*temp_ptr3;\n      if ((int **)((int)temp_ptr3 + (int)temp_ptr1) == temp_ptr4) {\n        temp_ptr1 = (int **)((int)temp_ptr1 + (int)*temp_ptr4);\n        *temp_ptr3 = (int *)temp_ptr1;\n        if (temp_ptr2 == (int **)((int)temp_ptr3 + (int)temp_ptr1)) {\n          temp_var = *temp_ptr2;\n          temp_ptr2 = (int **)temp_ptr2[1];\n          temp_ptr1 = (int **)((int)temp_ptr1 + (int)temp_var);\n          *temp_ptr3 = (int *)temp_ptr1;\n          temp_ptr3[1] = (int *)temp_ptr2;\n        }\n      }\n      else if (temp_ptr4 < (int **)((int)temp_ptr3 + (int)temp_ptr1)) {\n        *output = 0xc;\n      }\n      else {\n        temp_ptr1 = (int **)((int)temp_ptr4 + (int)*temp_ptr4);\n        if (temp_ptr2 == temp_ptr1) {\n          temp_var = *temp_ptr2;\n          temp_ptr2 = (int **)temp_ptr2[1];\n          temp_ptr1 = (int **)((int)temp_var + (int)*temp_ptr4);\n          *temp_ptr4 = (int *)temp_ptr1;\n        }\n        temp_ptr4[1] = (int *)temp_ptr2;\n        temp_ptr3[1] = (int *)temp_ptr4;\n      }\n    }\n  }\n  FUNC_08009f4a(output,temp_ptr1,temp_ptr2,param4);\n  return;\n}\n\n",
            "current_name": "process_data_080091d8",
            "entrypoint": "0x080091d8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080091d8": "process_data_080091d8",
                "extraout_r1": "temp1",
                "param_1": "output",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "param4",
                "piVar3": "temp_var",
                "ppiVar1": "temp_ptr1",
                "ppiVar2": "temp_ptr2",
                "ppiVar4": "temp_ptr3",
                "ppiVar5": "temp_ptr4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009270": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "allocate_memory_and_assign"
                },
                "<param_1>": {
                    "1": "output_ptr"
                },
                "<param_2>": {
                    "1": "size"
                },
                "DAT_2000098c": {
                    "1": "memory_blocks",
                    "2": "first_block"
                },
                "DAT_20000990": {
                    "1": "memory_allocated"
                },
                "FUNC_08009f48": {
                    "1": "initialize"
                },
                "FUNC_08009f4a": {
                    "1": "function2"
                },
                "FUN_08009270": {
                    "1": "allocate_memory_and_initialize",
                    "18": "allocate_and_assign_memory",
                    "2": "allocate_and_update_memory",
                    "4": "allocate_memory"
                },
                "allocate_and_assign_memory_08009918": {
                    "1": "allocate_and_initialize_memory"
                },
                "iVar2": {
                    "1": "fragment_size",
                    "13": "difference",
                    "2": "remaining_space",
                    "4": "block_size",
                    "9": "offset"
                },
                "param_1": {
                    "1": "memory_ptr",
                    "10": "result",
                    "3": "output_buffer",
                    "4": "output_ptr",
                    "5": "output"
                },
                "param_2": {
                    "1": "input_length",
                    "20": "size",
                    "3": "requested_size",
                    "6": "input_size"
                },
                "puVar1": {
                    "1": "current_pointer",
                    "17": "current_block",
                    "4": "current_ptr",
                    "7": "current"
                },
                "puVar3": {
                    "1": "current_block_next",
                    "2": "previous",
                    "3": "next_ptr",
                    "5": "next",
                    "7": "next_block"
                },
                "puVar5": {
                    "1": "last",
                    "2": "new_block",
                    "4": "previous",
                    "9": "previous_block"
                },
                "uVar4": {
                    "1": "new_size",
                    "2": "size_difference",
                    "3": "diff",
                    "4": "block_difference",
                    "6": "difference"
                },
                "uVar6": {
                    "1": "new_block_size",
                    "12": "allocated_size",
                    "2": "block_size",
                    "3": "new_size",
                    "7": "adjusted_size"
                }
            },
            "called": [
                "FUN_08009918",
                "FUN_08009f4a",
                "FUN_08009f48"
            ],
            "calling": [
                "FUN_08009190",
                "FUN_08009d24",
                "FUN_08009908",
                "FUN_08009eac"
            ],
            "code": "\nuint allocate_and_assign_memory_08009270(undefined4 *result,uint size)\n\n{\n  uint *current_block;\n  int difference;\n  uint *previous_block;\n  uint difference;\n  uint *previous_block;\n  uint allocated_size;\n  \n  allocated_size = (size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < size)) {\n    *result = 0xc;\n  }\n  else {\n    FUNC_08009f48();\n    current_block = DAT_2000098c;\n    previous_block = DAT_2000098c;\n    while (previous_block = current_block, previous_block != (uint *)0x0) {\n      difference = *previous_block - allocated_size;\n      if (-1 < (int)difference) {\n        if (difference < 0xc) {\n          if (previous_block == previous_block) {\n            current_block = (uint *)previous_block[1];\n            DAT_2000098c = current_block;\n          }\n          else {\n            current_block = (uint *)previous_block[1];\n          }\n          if (previous_block != previous_block) {\n            previous_block[1] = (uint)current_block;\n            previous_block = previous_block;\n          }\n        }\n        else {\n          *previous_block = difference;\n          *(uint *)((int)previous_block + difference) = allocated_size;\n          previous_block = (uint *)((int)previous_block + difference);\n        }\n        goto LAB_080092d4;\n      }\n      previous_block = previous_block;\n      current_block = (uint *)previous_block[1];\n    }\n    if (DAT_20000990 == 0) {\n      DAT_20000990 = allocate(result);\n    }\n    current_block = (uint *)allocate(result,allocated_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((previous_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == previous_block ||\n        (difference = allocate(result,(int)previous_block - (int)current_block), difference != -1)))) {\n      *previous_block = allocated_size;\nLAB_080092d4:\n      FUNC_08009f4a(result);\n      allocated_size = (int)previous_block + 0xbU & 0xfffffff8;\n      difference = allocated_size - (int)(previous_block + 1);\n      if (difference != 0) {\n        *(int *)((int)previous_block + difference) = -difference;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *result = 0xc;\n    FUNC_08009f4a(result);\n  }\n  return 0;\n}\n\n",
            "current_name": "allocate_and_assign_memory_08009270",
            "entrypoint": "0x08009270",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009270": "allocate_and_assign_memory_08009270",
                "allocate_and_assign_memory_08009918": "allocate",
                "iVar2": "difference",
                "param_1": "result",
                "param_2": "size",
                "puVar1": "current_block",
                "puVar3": "previous_block",
                "puVar5": "previous_block",
                "uVar4": "difference",
                "uVar6": "allocated_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800932c": {
            "additional_data": {
                "DAT_0800ab84": {
                    "1": "dat3"
                },
                "DAT_0800aba4": {
                    "1": "dat_array1"
                },
                "DAT_0800abc4": {
                    "1": "dat2"
                },
                "FUN_0800932c": {
                    "1": "decode_and_process_data",
                    "11": "process_data",
                    "2": "process_function"
                },
                "iVar1": {
                    "1": "temp_var_1",
                    "2": "temp_variable_1",
                    "5": "result",
                    "7": "temp_var1"
                },
                "initialize_data_08009d50": {
                    "5": "initialize_data"
                },
                "param_1": {
                    "1": "data_1",
                    "2": "data_pointer",
                    "3": "input_param",
                    "4": "data_ptr",
                    "7": "input_data"
                },
                "param_2": {
                    "1": "arg2",
                    "15": "byte_value",
                    "3": "byte_param",
                    "7": "input_byte"
                },
                "param_3": {
                    "1": "byte_ptr_array",
                    "12": "data_array",
                    "3": "byte_array",
                    "4": "input_data"
                },
                "pbVar2": {
                    "1": "pointer_1",
                    "2": "temp_variable_2",
                    "4": "current_byte",
                    "6": "temp_var2"
                },
                "pbVar3": {
                    "1": "element",
                    "2": "temp_byte",
                    "6": "temp_var3"
                },
                "process_data_08009a80": {
                    "1": "process_data",
                    "2": "process_data1"
                },
                "process_data_08009c7c": {
                    "1": "process_data_helper2",
                    "2": "process_data2"
                },
                "uVar4": {
                    "1": "return_val",
                    "18": "result",
                    "2": "converted_value",
                    "5": "return_value"
                }
            },
            "called": [
                "FUN_08009d50",
                "FUN_08009a80",
                "FUN_08009c7c"
            ],
            "calling": [
                "FUN_08009358"
            ],
            "code": "\nuint process_data_0800932c(int input_data,byte byte_value,byte **data_array)\n\n{\n  int temp_var1;\n  byte *temp_var2;\n  byte *temp_var3;\n  uint result;\n  \n  temp_var2 = data_array[2] + -1;\n  data_array[2] = temp_var2;\n  if ((-1 < (int)temp_var2) ||\n     (((int)data_array[6] <= (int)temp_var2 && (temp_var2 = (byte *)(uint)byte_value, temp_var2 != (byte *)0xa))))\n  {\n    temp_var2 = *data_array;\n    *data_array = temp_var2 + 1;\n    *temp_var2 = byte_value;\n    return (uint)byte_value;\n  }\n  if ((input_data != 0) && (*(int *)(input_data + 0x18) == 0)) {\n    initialize_data();\n  }\n  if (data_array == (byte **)&DAT_0800aba4) {\n    data_array = *(byte ***)(input_data + 4);\n  }\n  else if (data_array == (byte **)&DAT_0800abc4) {\n    data_array = *(byte ***)(input_data + 8);\n  }\n  else if (data_array == (byte **)&DAT_0800ab84) {\n    data_array = *(byte ***)(input_data + 0xc);\n  }\n  data_array[2] = data_array[6];\n  temp_var3 = (byte *)(uint)*(ushort *)(data_array + 3);\n  temp_var1 = (int)temp_var3 << 0x1c;\n  if (((temp_var1 < 0) && (temp_var3 = data_array[4], temp_var3 != (byte *)0x0)) ||\n     (temp_var1 = process_data_0800932c1(input_data,data_array,temp_var1,temp_var3,temp_var2), temp_var1 == 0)) {\n    result = (uint)byte_value;\n    temp_var1 = (int)*data_array - (int)data_array[4];\n    if ((temp_var1 < (int)data_array[5]) || (temp_var1 = process_data_0800932c2(input_data,data_array), temp_var1 == 0)) {\n      data_array[2] = data_array[2] + -1;\n      temp_var2 = *data_array;\n      *data_array = temp_var2 + 1;\n      *temp_var2 = byte_value;\n      if ((byte *)(temp_var1 + 1) != data_array[5]) {\n        if (-1 < (int)((uint)*(ushort *)(data_array + 3) << 0x1f)) {\n          return result;\n        }\n        if (result != 10) {\n          return result;\n        }\n      }\n      temp_var1 = process_data_0800932c2(input_data,data_array);\n      if (temp_var1 == 0) {\n        return result;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "process_data_0800932c",
            "entrypoint": "0x0800932c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800932c": "process_data_0800932c",
                "iVar1": "temp_var1",
                "initialize_data_08009d50": "initialize_data",
                "param_1": "input_data",
                "param_2": "byte_value",
                "param_3": "data_array",
                "pbVar2": "temp_var2",
                "pbVar3": "temp_var3",
                "process_data_08009a80": "process_data1",
                "process_data_08009c7c": "process_data2",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009358": {
            "additional_data": {
                "FUN_08009358": {
                    "1": "process_data_and_increment_index",
                    "12": "process_data",
                    "2": "process_data_batch",
                    "3": "process_data_loop"
                },
                "iVar1": {
                    "2": "return_value",
                    "29": "result"
                },
                "iVar3": {
                    "1": "curr_length",
                    "2": "initial_length",
                    "4": "current_length",
                    "7": "current_index",
                    "8": "current_size"
                },
                "param_1": {
                    "1": "data_1",
                    "2": "input_param",
                    "3": "first_param",
                    "4": "input_1",
                    "9": "arg1"
                },
                "param_2": {
                    "1": "buffer",
                    "2": "output_param",
                    "3": "second_param",
                    "4": "input_2",
                    "9": "arg2"
                },
                "param_3": {
                    "1": "buffer",
                    "10": "data_ptr",
                    "3": "data_pointer",
                    "7": "data_array",
                    "8": "data"
                },
                "param_4": {
                    "11": "length",
                    "3": "size",
                    "5": "data_size",
                    "6": "data_length"
                },
                "puVar2": {
                    "1": "end_of_buffer",
                    "17": "end_ptr",
                    "3": "end_of_array",
                    "4": "end_pointer"
                }
            },
            "called": [
                "FUN_0800932c"
            ],
            "calling": [
                "FUN_0800937c"
            ],
            "code": "\nint process_data_08009358(undefined4 arg1,undefined4 arg2,undefined *data_ptr,int length)\n\n{\n  int result;\n  undefined *end_ptr;\n  int current_size;\n  \n  end_ptr = data_ptr + length;\n  current_size = length;\n  do {\n    if (data_ptr == end_ptr) {\n      return 0;\n    }\n    result = process_data_08009358_0800932c(arg1,*data_ptr,arg2,length,current_size);\n    length = result + 1;\n    data_ptr = data_ptr + 1;\n  } while (length != 0);\n  return result;\n}\n\n",
            "current_name": "process_data_08009358",
            "entrypoint": "0x08009358",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009358": "process_data_08009358",
                "iVar1": "result",
                "iVar3": "current_size",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "data_ptr",
                "param_4": "length",
                "puVar2": "end_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800937c": {
            "additional_data": {
                "FUN_0800937c": {
                    "1": "process_input_data",
                    "2": "decode_and_process_data",
                    "20": "process_data"
                },
                "bVar3": {
                    "1": "is_true",
                    "2": "found_num",
                    "3": "is_number",
                    "4": "is_numeric",
                    "8": "is_digit"
                },
                "decode_and_process_data_08009698": {
                    "1": "decode_and_process_extra_data",
                    "4": "decode_and_process_data"
                },
                "decode_and_process_data_08009698()": {
                    "2": "decode_and_process_data"
                },
                "find_character_08009f2c": {
                    "5": "find_character"
                },
                "find_character_08009f2c()": {
                    "2": "find_character"
                },
                "iVar1": {
                    "1": "result_code",
                    "28": "result"
                },
                "iVar6": {
                    "1": "offset",
                    "2": "temp_int",
                    "3": "value",
                    "5": "temp_var2",
                    "6": "index"
                },
                "initialize_data_08009d50": {
                    "5": "initialize_data"
                },
                "initialize_data_08009d50()": {
                    "2": "initialize_data"
                },
                "local_30": {
                    "1": "type_specifier",
                    "2": "constant_4",
                    "3": "flag4",
                    "4": "unused"
                },
                "local_45": {
                    "1": "undefined_var4",
                    "2": "sign_flag",
                    "4": "hash_flag",
                    "5": "flag3"
                },
                "local_6e": {
                    "1": "value2",
                    "2": "plus",
                    "3": "constant_2",
                    "5": "flag2",
                    "9": "plus_flag"
                },
                "local_6f": {
                    "1": "const1",
                    "2": "space",
                    "3": "constant_1",
                    "5": "flag1",
                    "9": "space_flag"
                },
                "local_70": {
                    "1": "local_byte1",
                    "2": "conversion_specifier",
                    "3": "current_byte",
                    "6": "format_specifier",
                    "7": "character"
                },
                "local_74": {
                    "1": "total_bytes_written",
                    "3": "total",
                    "8": "total_size",
                    "9": "total_length"
                },
                "local_7c": {
                    "1": "negative_value",
                    "11": "width",
                    "2": "value_3",
                    "3": "count"
                },
                "local_80": {
                    "1": "local_u_int2",
                    "2": "value_2",
                    "4": "unused"
                },
                "local_84": {
                    "1": "int_var",
                    "11": "precision",
                    "2": "value_1"
                },
                "local_88": {
                    "1": "option_flag",
                    "17": "flags",
                    "4": "flag"
                },
                "local_8c": {
                    "1": "output_data_ptr",
                    "2": "counter_ptr",
                    "3": "output",
                    "5": "output_ptr"
                },
                "param_1": {
                    "1": "input1",
                    "2": "data_pointer",
                    "3": "input_param",
                    "5": "data",
                    "8": "input_data"
                },
                "param_2": {
                    "1": "array_param",
                    "2": "config_data",
                    "3": "header",
                    "4": "config"
                },
                "param_3": {
                    "1": "input3",
                    "2": "format_string",
                    "4": "byte_array",
                    "6": "data"
                },
                "param_4": {
                    "1": "input4",
                    "2": "result",
                    "3": "output_param",
                    "5": "output"
                },
                "pbVar4": {
                    "1": "ptr_data",
                    "10": "current_char",
                    "2": "ptr",
                    "3": "current_byte"
                },
                "pbVar5": {
                    "1": "ptr_start",
                    "10": "next_char",
                    "2": "current_byte_ptr",
                    "3": "ptr2"
                },
                "piVar2": {
                    "1": "ptr_var",
                    "13": "ptr",
                    "2": "counter_ptr",
                    "3": "pointer_var"
                },
                "process_data_08009358": {
                    "1": "process_partial_data"
                },
                "process_data_08009358()": {
                    "1": "process_data3"
                },
                "process_data_08009a80": {
                    "1": "process_data_block",
                    "4": "process_data"
                },
                "process_data_08009a80()": {
                    "1": "process_data2"
                },
                "unaff_r9": {
                    "1": "result",
                    "4": "temp",
                    "5": "temp_var"
                },
                "unreachable_block": {
                    "1": "warning"
                }
            },
            "called": [
                "FUN_08009d50",
                "FUN_08009358",
                "FUN_08009698",
                "FUN_08009f2c",
                "FUN_08009a80"
            ],
            "calling": [
                "FUN_080098d8",
                "FUN_08009124"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009550) */\n\nint process_data_0800937c(int input_data,undefined4 *config,byte *data,int *output)\n\n{\n  int result;\n  int *ptr;\n  bool is_digit;\n  byte *current_char;\n  byte *next_char;\n  int unaff_r9;\n  int index;\n  int *output_ptr;\n  uint flags;\n  int precision;\n  undefined4 unused;\n  int width;\n  int total_length;\n  byte character;\n  undefined space_flag;\n  undefined plus_flag;\n  undefined flag3;\n  undefined4 unused;\n  \n  output_ptr = output;\n  if ((input_data != 0) && (*(int *)(input_data + 0x18) == 0)) {\n    initialize_data;\n  }\n  if (config == &DAT_0800aba4) {\n    config = *(undefined4 **)(input_data + 4);\n  }\n  else if (config == (undefined4 *)&DAT_0800abc4) {\n    config = *(undefined4 **)(input_data + 8);\n  }\n  else if (config == (undefined4 *)&DAT_0800ab84) {\n    config = *(undefined4 **)(input_data + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(config + 3) << 0x1c)) || (config[4] == 0)) &&\n     (index = process_data_0800937c(input_data,config), index != 0)) {\n    return -1;\n  }\n  total_length = 0;\n  space_flag = 0x20;\n  plus_flag = 0x30;\n  current_char = data;\nLAB_080093be:\n  next_char = current_char;\n  if (*next_char != 0) goto LAB_08009474;\n  goto LAB_080093c8;\nLAB_08009474:\n  current_char = next_char + 1;\n  if (*next_char != 0x25) goto LAB_080093be;\nLAB_080093c8:\n  index = (int)next_char - (int)data;\n  if (index != 0) {\n    result = process_data_0800937c(input_data,config,data,index);\n    if (result == -1) {\nLAB_08009568:\n      if ((int)((uint)*(ushort *)(config + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total_length;\n    }\n    total_length = total_length + index;\n  }\n  if (*next_char == 0) goto LAB_08009568;\n  flags = 0;\n  width = 0;\n  precision = -1;\n  unused = 0;\n  flag3 = 0;\n  unused = 0;\n  current_char = next_char + 1;\n  while( true ) {\n    index = find_character(\"#-0+ \",*current_char);\n    data = current_char + 1;\n    if (index == 0) break;\n    flags = 1 << (index + 0xf7ff54b0U & 0xff) | flags;\n    current_char = data;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    flag3 = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    flag3 = 0x2b;\n  }\n  if (*current_char == 0x2a) {\n    ptr = output_ptr + 1;\n    index = *output_ptr;\n    output_ptr = ptr;\n    if (index < 0) {\n      width = -index;\n      flags = flags | 2;\n      goto LAB_080094a6;\n    }\n  }\n  else {\n    is_digit = false;\n    index = width;\n    data = current_char;\n    while( true ) {\n      if (9 < *data - 0x30) break;\n      index = index * 10 + (*data - 0x30);\n      is_digit = true;\n      data = data + 1;\n    }\n    if (!is_digit) goto LAB_080094a6;\n  }\n  width = index;\nLAB_080094a6:\n  if (*data == 0x2e) {\n    if (data[1] == 0x2a) {\n      data = data + 2;\n      ptr = output_ptr + 1;\n      precision = *output_ptr;\n      output_ptr = ptr;\n      if (precision < 0) {\n        precision = -1;\n      }\n    }\n    else {\n      is_digit = false;\n      index = 0;\n      precision = 0;\n      while( true ) {\n        data = data + 1;\n        if (9 < *data - 0x30) break;\n        index = index * 10 + (*data - 0x30);\n        is_digit = true;\n      }\n      if (is_digit) {\n        precision = index;\n      }\n    }\n  }\n  index = find_character(&DAT_0800ab56,*data,3);\n  if (index != 0) {\n    data = data + 1;\n    flags = flags | 0x40 << (index + 0xf7ff54aaU & 0xff);\n  }\n  character = *data;\n  data = data + 1;\n  index = find_character(\"efgEFG\",character,6);\n  if (index == 0) {\n    unaff_r9 = decode_and_process_data_0800937c(input_data,&flags,config,0x8009359,&output_ptr);\n    if (unaff_r9 == -1) goto LAB_08009568;\n  }\n  else {\n    output_ptr = (int *)(((int)output_ptr + 7U & 0xfffffff8) + 8);\n  }\n  total_length = total_length + unaff_r9;\n  current_char = data;\n  goto LAB_080093be;\n}\n\n",
            "current_name": "process_data_0800937c",
            "entrypoint": "0x0800937c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800937c": "process_data_0800937c",
                "bVar3": "is_digit",
                "decode_and_process_data_08009698": "decode_and_process_data",
                "find_character_08009f2c": "find_character",
                "iVar1": "result",
                "iVar6": "index",
                "initialize_data_08009d50": "initialize_data",
                "initialize_data_08009d50()": "initialize_data",
                "local_30": "unused",
                "local_45": "flag3",
                "local_6e": "plus_flag",
                "local_6f": "space_flag",
                "local_70": "character",
                "local_74": "total_length",
                "local_7c": "width",
                "local_80": "unused",
                "local_84": "precision",
                "local_88": "flags",
                "local_8c": "output_ptr",
                "param_1": "input_data",
                "param_2": "config",
                "param_3": "data",
                "param_4": "output",
                "pbVar4": "current_char",
                "pbVar5": "next_char",
                "piVar2": "ptr",
                "process_data_08009358": "process_data",
                "process_data_08009a80": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080095a8": {
            "additional_data": {
                "*(char*)((int)param_2 + 0x43)": {
                    "1": "is_extra"
                },
                "*(undefined*)((int)param_2 + uVar3 + 0x43)": {
                    "1": "extra1"
                },
                "*(undefined*)((int)param_2 + uVar3 + 0x44)": {
                    "1": "extra2"
                },
                "FUN_080095a8": {
                    "1": "format_and_write_data",
                    "18": "process_data",
                    "2": "decode_and_process_data"
                },
                "bVar5": {
                    "1": "is_special_case",
                    "2": "is_true",
                    "4": "is_condition_met",
                    "5": "is_flag_set",
                    "6": "condition"
                },
                "iVar1": {
                    "1": "loop_index",
                    "14": "index",
                    "2": "loop_counter1",
                    "4": "i"
                },
                "iVar2": {
                    "1": "index",
                    "15": "result",
                    "2": "j",
                    "4": "return_value"
                },
                "param_1": {
                    "1": "input_a",
                    "2": "param1",
                    "4": "input_data",
                    "5": "data",
                    "9": "input"
                },
                "param_2": {
                    "1": "info_array",
                    "2": "parameters",
                    "3": "data_array",
                    "8": "data"
                },
                "param_3": {
                    "1": "max_chunk",
                    "2": "output1",
                    "3": "output_length",
                    "8": "output"
                },
                "param_4": {
                    "1": "context",
                    "4": "param4",
                    "7": "param"
                },
                "param_5": {
                    "1": "conversion_function",
                    "21": "callback",
                    "3": "callback_function",
                    "6": "callback_func"
                },
                "uVar3": {
                    "1": "maximum_length",
                    "15": "max_value",
                    "8": "max_size"
                },
                "uVar4": {
                    "1": "num_chars_added",
                    "12": "offset",
                    "2": "additional_length",
                    "3": "count"
                }
            },
            "called": [],
            "calling": [
                "FUN_08009698"
            ],
            "code": "\nundefined4\nprocess_data_080095a8(undefined4 input,uint *data,uint *output_size,undefined4 param,code *callback)\n\n{\n  int index;\n  int result;\n  uint max_value;\n  uint offset;\n  bool condition;\n  \n  max_value = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    max_value = data[2];\n  }\n  *output_size = max_value;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *output_size = max_value + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *output_size = *output_size + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (index = 0; index < (int)(data[3] - *output_size); index = index + 1) {\n      result = (*callback)(input,param,(int)data + 0x19,1);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  max_value = (uint)*(byte *)((int)data + 0x43);\n  if (max_value != 0) {\n    max_value = 1;\n  }\n  offset = max_value;\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + max_value + 0x43) = 0x30;\n    offset = max_value + 2;\n    *(undefined *)((int)data + max_value + 0x44) = *(undefined *)((int)data + 0x45);\n  }\n  index = (*callback)(input,param,(int)data + 0x43,offset);\n  if (index != -1) {\n    max_value = data[3];\n    condition = (*data & 6) != 4;\n    if (condition) {\n      max_value = 0;\n    }\n    offset = 0;\n    if (!condition) {\n      max_value = max_value - *output_size;\n    }\n    if (!condition) {\n      max_value = max_value & ~((int)max_value >> 0x1f);\n    }\n    if ((int)data[4] < (int)data[2]) {\n      max_value = max_value + (data[2] - data[4]);\n    }\n    while( true ) {\n      if (max_value == offset) {\n        return 0;\n      }\n      index = (*callback)(input,param,(int)data + 0x1a,1);\n      if (index == -1) break;\n      offset = offset + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "process_data_080095a8",
            "entrypoint": "0x080095a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080095a8": "process_data_080095a8",
                "bVar5": "condition",
                "iVar1": "index",
                "iVar2": "result",
                "param_1": "input",
                "param_2": "data",
                "param_3": "output_size",
                "param_4": "param",
                "param_5": "callback",
                "uVar3": "max_value",
                "uVar4": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009698": {
            "additional_data": {
                "FUN_08009698": {
                    "1": "reverse_and_format_number",
                    "2": "convert_number_to_string",
                    "3": "parse_and_process_data",
                    "4": "reverse_and_process_data",
                    "6": "decode_and_process_data"
                },
                "bVar1": {
                    "17": "byte_value",
                    "3": "first_byte",
                    "5": "byte_val"
                },
                "iVar2": {
                    "1": "char_index",
                    "17": "index",
                    "2": "int_value",
                    "6": "result"
                },
                "iVar4": {
                    "1": "inner_int_var",
                    "2": "index",
                    "3": "result",
                    "4": "temp_index",
                    "5": "loop_index"
                },
                "local_24": {
                    "1": "length_arr",
                    "16": "local_array",
                    "3": "local_variables",
                    "5": "temp_array"
                },
                "param_1": {
                    "1": "input1",
                    "2": "input_data",
                    "3": "param1",
                    "4": "input_param",
                    "7": "input"
                },
                "param_2": {
                    "1": "output_buffer",
                    "2": "input_data",
                    "3": "number",
                    "4": "input_array",
                    "6": "data"
                },
                "param_3": {
                    "1": "output_param",
                    "2": "length",
                    "3": "arg3",
                    "6": "param3"
                },
                "param_4": {
                    "1": "input4",
                    "2": "callback_func",
                    "4": "callback_function",
                    "5": "process_function",
                    "7": "callback"
                },
                "param_5": {
                    "1": "input_ptr",
                    "2": "output_param",
                    "3": "output",
                    "5": "counter"
                },
                "pcVar11": {
                    "1": "output_str",
                    "2": "output_string",
                    "3": "char_ptr_2"
                },
                "pcVar12": {
                    "1": "input_str",
                    "2": "current_char",
                    "3": "char_ptr_3"
                },
                "pcVar5": {
                    "1": "character_set",
                    "3": "hex_characters",
                    "4": "hex_digits",
                    "7": "hex_chars",
                    "9": "char_ptr"
                },
                "ppcVar8": {
                    "1": "ptr_ptr_to_char",
                    "2": "char_pointer_pointer",
                    "3": "char_ptr_ptr"
                },
                "ppuVar7": {
                    "1": "temp_ptr_ptr",
                    "2": "ptr_to_ptr"
                },
                "puVar3": {
                    "1": "ptr_var",
                    "11": "ptr",
                    "2": "ptr_value",
                    "5": "pointer"
                },
                "uVar10": {
                    "1": "original_length",
                    "2": "size",
                    "3": "length",
                    "4": "temp",
                    "6": "temp_value"
                },
                "uVar6": {
                    "1": "first_byte",
                    "11": "base",
                    "2": "bit_value",
                    "3": "value"
                },
                "uVar9": {
                    "1": "value2",
                    "2": "result_value",
                    "8": "result",
                    "9": "value"
                }
            },
            "called": [
                "FUN_080095a8",
                "FUN_08009f2c"
            ],
            "calling": [
                "FUN_0800937c"
            ],
            "code": "\nuint decode_and_process_data_08009698(undefined4 input,uint *data,undefined4 param3,code *callback,uint **counter)\n\n{\n  byte byte_value;\n  int index;\n  uint *ptr;\n  int loop_index;\n  char *char_ptr;\n  uint base;\n  uint **ptr_to_ptr;\n  char **char_ptr_ptr;\n  uint value;\n  uint temp_value;\n  char *char_ptr_2;\n  char *char_ptr_3;\n  uint local_array [2];\n  \n  byte_value = *(byte *)(data + 6);\n  char_ptr_3 = (char *)((int)data + 0x43);\n  if (byte_value != 0x6e) {\n    if (byte_value < 0x6f) {\n      if (byte_value != 99) {\n        if (byte_value < 100) {\n          if (byte_value == 0) goto LAB_08009852;\n          if (byte_value != 0x58) goto LAB_080096c8;\n          *(undefined *)((int)data + 0x45) = 0x58;\n          char_ptr = \"0123456789ABCDEF\";\nLAB_080097e2:\n          base = *data;\n          ptr = *counter;\n          *counter = ptr + 1;\n          if (((base & 0x80) == 0) && ((int)(base << 0x19) < 0)) {\n            value = (uint)*(ushort *)ptr;\n          }\n          else {\n            value = *ptr;\n          }\n          if ((int)(base << 0x1f) < 0) {\n            *data = base | 0x20;\n          }\n          if (value == 0) {\n            *data = *data & 0xffffffdf;\n          }\n          base = 0x10;\nLAB_08009778:\n          *(undefined *)((int)data + 0x43) = 0;\n        }\n        else {\n          if ((byte_value != 100) && (byte_value != 0x69)) goto LAB_080096c8;\n          value = *data;\n          ptr = *counter;\n          if ((value & 0x80) == 0) {\n            *counter = ptr + 1;\n            if ((value & 0x40) == 0) goto LAB_080096e8;\n            value = (uint)(short)*(ushort *)ptr;\n          }\n          else {\n            *counter = ptr + 1;\nLAB_080096e8:\n            value = *ptr;\n          }\n          if ((int)value < 0) {\n            value = -value;\n            *(undefined *)((int)data + 0x43) = 0x2d;\n          }\n          char_ptr = \"0123456789ABCDEF\";\n          base = 10;\n        }\n        temp_value = data[1];\n        data[2] = temp_value;\n        char_ptr_2 = char_ptr_3;\n        if ((int)temp_value < 0) {\n          if (value != 0) goto LAB_08009816;\nLAB_080098c4:\n          *(char *)((int)data + 0x42) = *char_ptr;\n          char_ptr_2 = (char *)((int)data + 0x42);\n        }\n        else {\n          *data = *data & 0xfffffffb;\n          if (value == 0) {\n            if (temp_value != 0) goto LAB_080098c4;\n          }\n          else {\nLAB_08009816:\n            do {\n              temp_value = value / base;\n              char_ptr_2 = char_ptr_2 + -1;\n              *char_ptr_2 = char_ptr[value - base * temp_value];\n              value = temp_value;\n            } while (temp_value != 0);\n          }\n        }\n        if (((base == 8) && ((int)(*data << 0x1f) < 0)) && ((int)data[1] <= (int)data[4]))\n        {\n          char_ptr_2[-1] = '0';\n          char_ptr_2 = char_ptr_2 + -1;\n        }\n        data[4] = (int)char_ptr_3 - (int)char_ptr_2;\n        char_ptr_3 = char_ptr_2;\n        goto LAB_080097be;\n      }\n      ptr = *counter;\n      *counter = ptr + 1;\n      *(char *)((int)data + 0x42) = (char)*ptr;\nLAB_08009728:\n      char_ptr_3 = (char *)((int)data + 0x42);\n      value = 1;\n    }\n    else {\n      if (byte_value != 0x73) {\n        if (byte_value < 0x74) {\n          if (byte_value == 0x6f) {\nLAB_0800974e:\n            value = *data;\n            ptr = *counter;\n            if ((value & 0x80) == 0) {\n              *counter = ptr + 1;\n              if ((value & 0x40) == 0) goto LAB_0800975c;\n              value = (uint)*(ushort *)ptr;\n            }\n            else {\n              *counter = ptr + 1;\nLAB_0800975c:\n              value = *ptr;\n            }\n            if (byte_value == 0x6f) {\n              base = 8;\n            }\n            else {\n              base = 10;\n            }\n            char_ptr = \"0123456789ABCDEF\";\n            goto LAB_08009778;\n          }\n          if (byte_value == 0x70) {\n            *data = *data | 0x20;\nLAB_0800970e:\n            char_ptr = \"0123456789abcdef\";\n            *(undefined *)((int)data + 0x45) = 0x78;\n            goto LAB_080097e2;\n          }\n        }\n        else {\n          if (byte_value == 0x75) goto LAB_0800974e;\n          if (byte_value == 0x78) goto LAB_0800970e;\n        }\nLAB_080096c8:\n        *(byte *)((int)data + 0x42) = byte_value;\n        goto LAB_08009728;\n      }\n      char_ptr_ptr = (char **)*counter;\n      *counter = (uint *)(char_ptr_ptr + 1);\n      char_ptr_3 = *char_ptr_ptr;\n      index = find_character_08009f2c(char_ptr_3,0,data[1]);\n      if (index != 0) {\n        data[1] = index - (int)char_ptr_3;\n      }\n      value = data[1];\n    }\n    data[4] = value;\n    *(undefined *)((int)data + 0x43) = 0;\n    goto LAB_080097be;\n  }\n  value = *data;\n  ptr_to_ptr = (uint **)*counter;\n  base = data[5];\n  if ((value & 0x80) == 0) {\n    *counter = (uint *)(ptr_to_ptr + 1);\n    ptr = *ptr_to_ptr;\n    if ((value & 0x40) == 0) goto LAB_0800983e;\n    *(short *)ptr = (short)base;\n  }\n  else {\n    *counter = (uint *)(ptr_to_ptr + 1);\n    ptr = *ptr_to_ptr;\nLAB_0800983e:\n    *ptr = base;\n  }\nLAB_08009852:\n  data[4] = 0;\nLAB_080097be:\n  index = process_data_080095a8(input,data,local_array,param3,callback);\n  if ((index == -1) || (index = (*callback)(input,param3,char_ptr_3,data[4]), index == -1)) {\nLAB_080097d2:\n    value = 0xffffffff;\n  }\n  else {\n    if ((int)(*data << 0x1e) < 0) {\n      for (index = 0; index < (int)(data[3] - local_array[0]); index = index + 1) {\n        loop_index = (*callback)(input,param3,(int)data + 0x19,1);\n        if (loop_index == -1) goto LAB_080097d2;\n      }\n    }\n    value = data[3];\n    if ((int)data[3] < (int)local_array[0]) {\n      value = local_array[0];\n    }\n  }\n  return value;\n}\n\n",
            "current_name": "decode_and_process_data_08009698",
            "entrypoint": "0x08009698",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009698": "decode_and_process_data_08009698",
                "bVar1": "byte_value",
                "iVar2": "index",
                "iVar4": "loop_index",
                "local_24": "local_array",
                "param_1": "input",
                "param_2": "data",
                "param_3": "param3",
                "param_4": "callback",
                "param_5": "counter",
                "pcVar11": "char_ptr_2",
                "pcVar12": "char_ptr_3",
                "pcVar5": "char_ptr",
                "ppcVar8": "char_ptr_ptr",
                "ppuVar7": "ptr_to_ptr",
                "puVar3": "ptr",
                "uVar10": "temp_value",
                "uVar6": "base",
                "uVar9": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080098d8": {
            "additional_data": {
                "FUN_080098d8": {
                    "12": "process_data",
                    "19": "process_and_initialize_data"
                },
                "iVar1": {
                    "1": "data_var1",
                    "2": "data_var_1",
                    "3": "data_var",
                    "6": "data_address",
                    "9": "data_ptr"
                },
                "param_1": {
                    "1": "input_param_1",
                    "2": "input1",
                    "3": "data_1",
                    "4": "input_1",
                    "6": "input_param1",
                    "8": "input_param"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "input2",
                    "3": "data_2",
                    "4": "input_2",
                    "6": "input_param2",
                    "8": "param_2"
                },
                "param_3": {
                    "1": "data_param3",
                    "2": "input3",
                    "3": "data_3",
                    "4": "input_3",
                    "5": "input_param3",
                    "8": "param_3"
                },
                "param_4": {
                    "1": "input_param_4",
                    "2": "input4",
                    "3": "data_param_4",
                    "4": "input_4",
                    "5": "input_param4",
                    "8": "param_4"
                },
                "uStack_4": {
                    "1": "local_var3",
                    "2": "param4_copy"
                },
                "uStack_8": {
                    "1": "stack_var_2",
                    "2": "param3_copy"
                },
                "uStack_c": {
                    "1": "input_copy1",
                    "2": "param2_copy"
                },
                "uVar2": {
                    "1": "data_var",
                    "2": "input_param_copy",
                    "3": "data_var_2",
                    "4": "param_1_copy"
                }
            },
            "called": [
                "FUN_08009d50",
                "FUN_0800937c"
            ],
            "calling": [
                "FUN_080075dc",
                "FUN_08007594",
                "FUN_080077b0",
                "FUN_08007544",
                "FUN_08008078"
            ],
            "code": "\nvoid process_and_initialize_data_080098d8(undefined4 input_param,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int data_ptr;\n  undefined4 param_1_copy;\n  undefined4 param2_copy;\n  undefined4 param3_copy;\n  undefined4 param4_copy;\n  \n  data_ptr = DAT_20000090;\n  param_1_copy = input_param;\n  param2_copy = param_2;\n  param3_copy = param_3;\n  param4_copy = param_4;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    initialize_data_08009d50(DAT_20000090);\n  }\n  process_data_0800937c(data_ptr,*(undefined4 *)(data_ptr + 8),input_param,&param2_copy,param_1_copy,&param2_copy);\n  return;\n}\n\n",
            "current_name": "process_and_initialize_data_080098d8",
            "entrypoint": "0x080098d8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080098d8": "process_and_initialize_data_080098d8",
                "iVar1": "data_ptr",
                "param_1": "input_param",
                "uStack_4": "param4_copy",
                "uStack_8": "param3_copy",
                "uStack_c": "param2_copy",
                "uVar2": "param_1_copy"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009908": {
            "additional_data": {
                "DAT_20000090": {
                    "1": "data_constant"
                },
                "FUN_08009908": {
                    "1": "process_and_allocate_data",
                    "13": "process_data",
                    "6": "process_and_allocate_memory",
                    "9": "allocate_and_process_data"
                },
                "allocate_and_assign_memory_08009270": {
                    "4": "allocate_memory",
                    "5": "allocate_and_assign_memory"
                },
                "calculate_sum_0800a154": {
                    "1": "calculate_sum_function",
                    "8": "calculate_sum"
                },
                "copy_data_080091b0": {
                    "9": "copy_data"
                },
                "iVar2": {
                    "1": "allocated_memory",
                    "2": "return_value",
                    "28": "result"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "input_data",
                    "7": "size",
                    "8": "input_size"
                },
                "param_2": {
                    "1": "max_size",
                    "2": "length",
                    "3": "limit",
                    "4": "required_size"
                },
                "process_data_080091d8": {
                    "1": "process_data_function",
                    "6": "process_data"
                },
                "uVar1": {
                    "1": "memory_ptr",
                    "2": "data_ptr",
                    "3": "memory_address",
                    "4": "data_address"
                },
                "uVar3": {
                    "1": "temp_variable",
                    "23": "sum",
                    "5": "calculated_sum"
                }
            },
            "called": [
                "FUN_0800a154",
                "FUN_080091b0",
                "FUN_08009270",
                "FUN_080091d8"
            ],
            "calling": [
                "FUN_080027f0",
                "FUN_08002acc",
                "FUN_0800288c"
            ],
            "code": "\nint process_data_08009908(int data_size,uint required_size)\n\n{\n  undefined4 default_value;\n  int result;\n  uint sum;\n  \n  default_value = DAT_20000090;\n  if (data_size != 0) {\n    if (required_size == 0) {\n      process_data_08009908();\n      result = 0;\n    }\n    else {\n      sum = calculate_sum();\n      result = data_size;\n      if ((sum < required_size) && (result = allocate_and_assign_memory(default_value,required_size), result != 0)) {\n        copy_data(result,data_size,required_size);\n        process_data_08009908(default_value,data_size);\n      }\n    }\n    return result;\n  }\n  result = allocate_and_assign_memory(DAT_20000090,required_size,required_size,&DAT_20000090);\n  return result;\n}\n\n",
            "current_name": "process_data_08009908",
            "entrypoint": "0x08009908",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009908": "process_data_08009908",
                "allocate_and_assign_memory_08009270": "allocate_and_assign_memory",
                "calculate_sum_0800a154": "calculate_sum",
                "copy_data_080091b0": "copy_data",
                "iVar2": "result",
                "param_1": "data_size",
                "param_2": "required_size",
                "process_data_080091d8": "process_data",
                "uVar1": "default_value",
                "uVar3": "sum"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009918": {
            "additional_data": {
                "FUN_08009918": {
                    "1": "allocate_memory_and_get_address",
                    "16": "allocate_and_assign_memory",
                    "2": "allocate_and_store_memory",
                    "3": "initialize_memory"
                },
                "allocate_memory_08008804": {
                    "1": "allocate_memory"
                },
                "iVar1": {
                    "1": "memory_allocation_result",
                    "18": "allocation_result",
                    "9": "allocated_memory"
                },
                "param_1": {
                    "1": "memory_location",
                    "2": "result_pointer",
                    "5": "result_ptr",
                    "6": "output_ptr",
                    "9": "result"
                },
                "param_2": {
                    "1": "required_memory_size",
                    "21": "size",
                    "8": "memory_size"
                }
            },
            "called": [
                "FUN_08008804"
            ],
            "calling": [
                "FUN_08009270"
            ],
            "code": "\nvoid allocate_and_assign_memory_08009918(int *result,undefined4 size)\n\n{\n  int allocation_result;\n  \n  DAT_20000a38 = 0;\n  allocation_result = allocate_memory(size);\n  if ((allocation_result == -1) && (DAT_20000a38 != 0)) {\n    *result = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "current_name": "allocate_and_assign_memory_08009918",
            "entrypoint": "0x08009918",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009918": "allocate_and_assign_memory_08009918",
                "allocate_memory_08008804": "allocate_memory",
                "iVar1": "allocation_result",
                "param_1": "result",
                "param_2": "size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009938": {
            "additional_data": {
                "FUN_08009938": {
                    "1": "find_character_in_string",
                    "19": "find_character",
                    "2": "find_char_in_string",
                    "9": "find_first_occurrence"
                },
                "param_1": {
                    "2": "input_string",
                    "26": "string",
                    "3": "str"
                },
                "param_2": {
                    "2": "target",
                    "25": "character",
                    "4": "target_char"
                },
                "pcVar1": {
                    "11": "current_character",
                    "18": "current_char"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800997e"
            ],
            "code": "\nchar * find_character_08009938(char *string,char character)\n\n{\n  char *current_char;\n  \n  do {\n    current_char = string;\n    if (*current_char == '\\0') {\n      if (character != '\\0') {\n        current_char = (char *)0x0;\n      }\n      return current_char;\n    }\n    string = current_char + 1;\n  } while (character != *current_char);\n  return current_char;\n}\n\n",
            "current_name": "find_character_08009938",
            "entrypoint": "0x08009938",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009938": "find_character_08009938",
                "param_1": "string",
                "param_2": "character",
                "pcVar1": "current_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009954": {
            "additional_data": {
                "FUN_08009954": {
                    "1": "copy_string_with_length",
                    "20": "copy_string",
                    "5": "copy_string_with_null_terminator"
                },
                "cVar1": {
                    "29": "current_char"
                },
                "iVar2": {
                    "1": "len",
                    "16": "remaining_length",
                    "2": "length",
                    "7": "remaining_size"
                },
                "param_1": {
                    "26": "destination",
                    "5": "dest"
                },
                "param_2": {
                    "26": "source",
                    "5": "src"
                },
                "param_3": {
                    "1": "limit",
                    "10": "size",
                    "16": "length",
                    "3": "max_length"
                },
                "pcVar3": {
                    "1": "current_destination",
                    "16": "dest_ptr",
                    "2": "dst_ptr",
                    "3": "destination_ptr"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002e44"
            ],
            "code": "\nvoid copy_string_08009954(char *destination,char *source,int length)\n\n{\n  char current_char;\n  int remaining_length;\n  char *dest_ptr;\n  \n  do {\n    dest_ptr = destination;\n    remaining_length = length;\n    if (remaining_length == 0) {\n      return;\n    }\n    current_char = *source;\n    destination = dest_ptr + 1;\n    *dest_ptr = current_char;\n    source = source + 1;\n    length = remaining_length + -1;\n  } while (current_char != '\\0');\n  for (; destination != dest_ptr + remaining_length; destination = destination + 1) {\n    *destination = '\\0';\n  }\n  return;\n}\n\n",
            "current_name": "copy_string_08009954",
            "entrypoint": "0x08009954",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009954": "copy_string_08009954",
                "cVar1": "current_char",
                "iVar2": "remaining_length",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "pcVar3": "dest_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800997e": {
            "additional_data": {
                "FUN_0800997e": {
                    "1": "find_last_position",
                    "10": "find_last_character",
                    "11": "find_last_occurrence",
                    "2": "find_last_character_position",
                    "7": "find_last_character_index"
                },
                "iVar1": {
                    "1": "last_occurrence",
                    "2": "result",
                    "3": "last_index",
                    "4": "current_index",
                    "5": "index",
                    "6": "occurrence"
                },
                "iVar2": {
                    "1": "result",
                    "11": "last_index",
                    "2": "last_position",
                    "8": "last_occurrence"
                },
                "param_1": {
                    "1": "text",
                    "15": "string",
                    "4": "input_string",
                    "9": "str"
                },
                "param_2": {
                    "1": "text_length",
                    "25": "length",
                    "4": "string_length"
                },
                "param_3": {
                    "1": "param",
                    "12": "character",
                    "2": "target",
                    "3": "param_3",
                    "4": "char"
                },
                "param_4": {
                    "1": "search_start_index",
                    "3": "delimiter",
                    "5": "offset"
                }
            },
            "called": [
                "FUN_08009938"
            ],
            "calling": [
                "FUN_08002e44"
            ],
            "code": "\nint find_last_occurrence_0800997e(int string,int length,undefined4 character,undefined4 param_4)\n\n{\n  int occurrence;\n  int last_index;\n  \n  if (length != 0) {\n    last_index = 0;\n    while (occurrence = find_character_08009938(string,length,character,string,param_4), occurrence != 0) {\n      string = occurrence + 1;\n      last_index = occurrence;\n    }\n    return last_index;\n  }\n  last_index = find_character_08009938();\n  return last_index;\n}\n\n",
            "current_name": "find_last_occurrence_0800997e",
            "entrypoint": "0x0800997e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800997e": "find_last_occurrence_0800997e",
                "iVar1": "occurrence",
                "iVar2": "last_index",
                "param_1": "string",
                "param_2": "length",
                "param_3": "character"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080099a4": {
            "additional_data": {
                "*param_1": {
                    "1": "current_char1[0]"
                },
                "*param_2": {
                    "1": "first_char_string2"
                },
                "*pcVar1": {
                    "1": "current_char1"
                },
                "*pcVar1 == '\\0'": {
                    "1": "current_char1_is_null"
                },
                "*pcVar3 == '\\0'": {
                    "1": "compare_char_is_null"
                },
                "FUN_080099a4": {
                    "1": "find_first_match",
                    "2": "compare_strings",
                    "24": "find_substring",
                    "4": "find_first_substring"
                },
                "char *pcVar1": {
                    "1": "current_char_ptr"
                },
                "char *pcVar2": {
                    "1": "compare_char_ptr"
                },
                "char *pcVar3": {
                    "1": "compare_start_ptr"
                },
                "param_1": {
                    "1": "source_string",
                    "14": "string1",
                    "4": "string",
                    "5": "str1",
                    "7": "string_1"
                },
                "param_1 == '\\0'": {
                    "1": "string1_is_empty"
                },
                "param_2": {
                    "14": "string2",
                    "5": "substring",
                    "7": "string_2"
                },
                "param_2 != '\\0'": {
                    "1": "string2_is_not_empty"
                },
                "param_2 + -1": {
                    "1": "ptr2_end"
                },
                "pcVar1": {
                    "1": "source_pointer",
                    "11": "current_char1",
                    "2": "current_char_str1",
                    "4": "current_char",
                    "5": "current_char_1"
                },
                "pcVar1 + -1": {
                    "1": "current_char1_prev"
                },
                "pcVar2": {
                    "1": "curr_char_2",
                    "11": "current_char2",
                    "2": "current_char_str2",
                    "5": "current_char_2"
                },
                "pcVar2 + 1": {
                    "1": "current_char1_next"
                },
                "pcVar3": {
                    "1": "current_char2_temp",
                    "2": "temp_char",
                    "3": "compare_char"
                },
                "pcVar3 + 1": {
                    "1": "next_char_string2"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002e44"
            ],
            "code": "\nchar * find_substring_080099a4(char *string1,char *string2)\n\n{\n  char *current_char1;\n  char *current_char2;\n  char *next_char2;\n  \n  if (*string1 == '\\0') {\n    if (*string2 != '\\0') {\n      string1 = (char *)0x0;\n    }\n    return string1;\n  }\n  do {\n    current_char1 = string1;\n    if (*current_char1 == '\\0') {\n      return (char *)0x0;\n    }\n    next_char2 = string2 + -1;\n    current_char2 = current_char1 + -1;\n    do {\n      next_char2 = next_char2 + 1;\n      if (*next_char2 == '\\0') {\n        return current_char1;\n      }\n      current_char2 = current_char2 + 1;\n      string1 = current_char1 + 1;\n    } while (*current_char2 == *next_char2);\n  } while( true );\n}\n\n",
            "current_name": "find_substring_080099a4",
            "entrypoint": "0x080099a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080099a4": "find_substring_080099a4",
                "param_1": "string1",
                "param_2": "string2",
                "pcVar1": "current_char1",
                "pcVar2": "current_char2",
                "pcVar3": "next_char2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009a80": {
            "additional_data": {
                "&(param_2[4])": {
                    "1": "value_4"
                },
                "&DAT_0800ab84": {
                    "1": "case3_data_ptr"
                },
                "&DAT_0800aba4": {
                    "1": "case1_data_ptr"
                },
                "&DAT_0800abc4": {
                    "1": "constant_address_2"
                },
                "&param_2[4]": {
                    "1": "value_4"
                },
                "(int)(short)uVar3 & 0x80": {
                    "1": "masked_value_2"
                },
                "(int)(uVar2 << 0x1b)": {
                    "1": "shifted_value_2"
                },
                "(int)(uVar2 << 0x1c)": {
                    "1": "shifted_value_1"
                },
                "(int)(uVar2 << 0x1d)": {
                    "1": "shifted_value_3"
                },
                "(uint)uVar3 << 0x1e)": {
                    "1": "shifted_value_4"
                },
                "(undefined4 *)param_2[0xd]": {
                    "1": "data_check_ptr"
                },
                "*(int *)(DAT_20000090 + 0x18)": {
                    "1": "data_check"
                },
                "*(undefined4 **)(iVar1 + 0xc)": {
                    "1": "ptr_3"
                },
                "*(undefined4 **)(iVar1 + 4)": {
                    "1": "ptr_1"
                },
                "*(undefined4 **)(iVar1 + 8)": {
                    "1": "ptr_2"
                },
                "*(ushort *)(param_2 + 3) & 0x280": {
                    "1": "masked_value"
                },
                "-1": {
                    "1": "negative_one"
                },
                "0x200": {
                    "1": "constant_4"
                },
                "0x40": {
                    "1": "constant_6"
                },
                "0x80": {
                    "1": "constant_5"
                },
                "0xffffffff": {
                    "1": "error_flag"
                },
                "FUNC_08009d50": {
                    "4": "cleanup_data"
                },
                "FUN_08009a80": {
                    "1": "process_input_data",
                    "23": "process_data",
                    "3": "process_and_initialize_data"
                },
                "iVar1": {
                    "1": "constant",
                    "13": "data_ptr",
                    "3": "data_offset"
                },
                "initialize_memory_08009eac": {
                    "4": "initialize_memory"
                },
                "param_1": {
                    "1": "output_data_ptr",
                    "12": "output",
                    "2": "output_buffer",
                    "3": "output_data",
                    "8": "output_param"
                },
                "param_1[0]": {
                    "1": "output_value"
                },
                "param_2": {
                    "1": "input_pointer",
                    "12": "input",
                    "5": "input_data",
                    "9": "input_param"
                },
                "param_2 + 0x11": {
                    "1": "invalid_data_check_ptr"
                },
                "param_2 + 3": {
                    "1": "data_short_ptr"
                },
                "param_2[0]": {
                    "1": "value_4"
                },
                "param_2[0xd]": {
                    "1": "temp"
                },
                "param_2[0xd] != (undefined4 *)0x0": {
                    "1": "not_null_data_check_ptr"
                },
                "param_2[1]": {
                    "1": "data_value_2"
                },
                "param_2[2]": {
                    "1": "result_value_1"
                },
                "param_2[3]": {
                    "1": "flag_value"
                },
                "param_2[4]": {
                    "1": "data_value_3"
                },
                "param_2[5]": {
                    "1": "value_5"
                },
                "param_2[6]": {
                    "1": "result_value_2"
                },
                "process_data_080091d8": {
                    "1": "process_data"
                },
                "uVar2": {
                    "1": "value",
                    "2": "data_value",
                    "26": "result"
                },
                "uVar3": {
                    "1": "input_value1",
                    "13": "flags",
                    "2": "input_value",
                    "3": "ushort_value",
                    "5": "flag"
                },
                "uVar3 & 0xffdb": {
                    "1": "flag_mask1"
                },
                "uVar3 & 1": {
                    "1": "flag_mask2"
                }
            },
            "called": [
                "FUN_08009d50",
                "FUN_08009eac",
                "FUN_080091d8"
            ],
            "calling": [
                "FUN_0800937c",
                "FUN_0800932c"
            ],
            "code": "\nuint process_data_08009a80(undefined4 *output,undefined4 *input)\n\n{\n  int data_ptr;\n  uint result;\n  ushort flags;\n  \n  data_ptr = DAT_20000090;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    initialize_data_08009d50(DAT_20000090);\n  }\n  if (input == &DAT_0800aba4) {\n    input = *(undefined4 **)(data_ptr + 4);\n  }\n  else if (input == (undefined4 *)&DAT_0800abc4) {\n    input = *(undefined4 **)(data_ptr + 8);\n  }\n  else if (input == (undefined4 *)&DAT_0800ab84) {\n    input = *(undefined4 **)(data_ptr + 0xc);\n  }\n  flags = *(ushort *)(input + 3);\n  result = (uint)flags;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *output = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)temp != (undefined4 *)0x0) {\n        if ((undefined4 *)temp != input + 0x11) {\n          process_case(output);\n        }\n        temp = 0;\n      }\n      *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xffdb;\n      value_1 = 0;\n      *input = value_2;\n    }\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 8;\n  }\n  if ((value_2 == 0) && ((*(ushort *)(input + 3) & 0x280) != 0x200)) {\n    initialize_memory(output,input);\n  }\n  flags = *(ushort *)(input + 3);\n  result = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      result = value_5;\n    }\n    value_3 = result;\n  }\n  else {\n    value_3 = 0;\n    value_6 = -value_5;\n  }\n  if (value_2 == 0) {\n    flags = *(ushort *)(input + 3);\n    result = (int)(short)flags & 0x80;\n    if (result != 0) {\nLAB_08009ab0:\n      *(ushort *)(input + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "code_backup": "\nuint FUN_08009a80(undefined4 *param_1,undefined4 *param_2)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  \n  iVar1 = DAT_20000090;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    FUNC_08009d50(DAT_20000090);\n  }\n  if (param_2 == &DAT_0800aba4) {\n    param_2 = *(undefined4 **)(iVar1 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_0800abc4) {\n    param_2 = *(undefined4 **)(iVar1 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_0800ab84) {\n    param_2 = *(undefined4 **)(iVar1 + 0xc);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = (uint)uVar3;\n  if (-1 < (int)(uVar2 << 0x1c)) {\n    if (-1 < (int)(uVar2 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(uVar2 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          process_data_080091d8(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    initialize_memory_08009eac(param_1,param_2);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = uVar3 & 1;\n  if ((uVar3 & 1) == 0) {\n    if (-1 < (int)((uint)uVar3 << 0x1e)) {\n      uVar2 = param_2[5];\n    }\n    param_2[2] = uVar2;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar2 = (int)(short)uVar3 & 0x80;\n    if (uVar2 != 0) {\nLAB_08009ab0:\n      *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar2 = 0;\n  }\n  return uVar2;\n}\n\n",
            "current_name": "process_data_08009a80",
            "entrypoint": "0x08009a80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009a80": "process_data_08009a80",
                "iVar1": "data_ptr",
                "initialize_memory_08009eac": "initialize_memory",
                "param_1": "output",
                "param_2": "input",
                "param_2[0xd]": "temp",
                "param_2[1]": "value_1",
                "param_2[2]": "value_3",
                "param_2[4]": "value_2",
                "param_2[5]": "value_5",
                "param_2[6]": "value_6",
                "process_data_080091d8": "process_case",
                "uVar2": "result",
                "uVar3": "flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009b5c": {
            "additional_data": {
                "FUN_08009b5c": {
                    "1": "process_and_control",
                    "13": "process_data",
                    "2": "process_and_validate_data",
                    "3": "process_and_loop",
                    "5": "process_and_handle_data",
                    "6": "process_and_update_data"
                },
                "LAB_08009c62": {
                    "1": "handle_error"
                },
                "UNRECOVERED_JUMPTABLE_00": {
                    "1": "unrecovered_jumptable_ptr",
                    "15": "jump_table",
                    "2": "unrecovered_jumptable",
                    "3": "unrecovered_jump_table"
                },
                "bVar11": {
                    "1": "check_result",
                    "2": "is_condition_met",
                    "3": "is_true"
                },
                "iVar2": {
                    "1": "temp_count",
                    "2": "counter",
                    "9": "offset"
                },
                "iVar4": {
                    "1": "i_var4"
                },
                "iVar7": {
                    "1": "additional_offset",
                    "2": "temp_variable",
                    "5": "temp_var"
                },
                "iVar8": {
                    "1": "count"
                },
                "iVar9": {
                    "1": "temp_value3",
                    "2": "temp_var",
                    "3": "remaining_iterations"
                },
                "infinite_loop_08008868": {
                    "1": "infinite_loop"
                },
                "pcVar8": {
                    "1": "optional_function",
                    "2": "process_function",
                    "5": "function_ptr",
                    "9": "function_pointer"
                },
                "piVar3": {
                    "1": "pointer_1",
                    "2": "array_ptr",
                    "3": "data_array",
                    "5": "data_ptr"
                },
                "piVar4": {
                    "1": "temporary_data_pointer",
                    "2": "ptr_var",
                    "3": "temp_pointer"
                },
                "picVar3": {
                    "1": "pointer_to_int_1"
                },
                "process_data_08009fe8": {
                    "1": "process_data"
                },
                "puVar1": {
                    "1": "result_pointer",
                    "11": "data_pointer",
                    "2": "data",
                    "3": "value_ptr"
                },
                "puVar4": {
                    "1": "value_ptr"
                },
                "uVar1": {
                    "1": "data_ptr"
                },
                "uVar10": {
                    "1": "temp_value2",
                    "2": "previous_value",
                    "7": "temp_value"
                },
                "uVar12": {
                    "1": "infinite_loop_handle",
                    "2": "loop_result",
                    "3": "return_value",
                    "8": "result"
                },
                "uVar5": {
                    "1": "flag2",
                    "2": "data_value",
                    "4": "value",
                    "6": "ushort_value"
                },
                "uVar6": {
                    "1": "flag_value",
                    "2": "flag_var",
                    "3": "data_flag",
                    "4": "data_value",
                    "6": "flags"
                }
            },
            "called": [
                "FUN_08009fe8",
                "FUN_08008868",
                "FUN_080091d8"
            ],
            "calling": [
                "FUN_080090cc",
                "FUN_0800a18c"
            ],
            "code": "\nvoid process_data_08009b5c(void)\n\n{\n  uint *data_pointer;\n  int offset;\n  int *data_ptr;\n  int *temp_pointer;\n  uint ushort_value;\n  ushort flags;\n  int temp_var;\n  code *function_pointer;\n  int remaining_iterations;\n  uint temp_value;\n  code *jump_table;\n  bool is_flag_set;\n  undefined8 result;\n  \n  process_data_08009b5c(6);\n  jump_table = (code *)0x8009b6b;\n  result = infinite_loop(1);\n  data_ptr = (int *)((ulonglong)result >> 0x20);\n  data_pointer = (uint *)result;\n  flags = *(ushort *)(data_ptr + 3);\n  ushort_value = (uint)flags;\n  if ((int)(ushort_value << 0x1c) < 0) {\n    offset = data_ptr[4];\n    if (offset != 0) {\n      temp_var = ushort_value << 0x1e;\n      is_flag_set = temp_var != 0;\n      if (is_flag_set) {\n        temp_var = 0;\n      }\n      remaining_iterations = *data_ptr;\n      if (!is_flag_set) {\n        temp_var = data_ptr[5];\n      }\n      *data_ptr = offset;\n      data_ptr[2] = temp_var;\n      for (remaining_iterations = remaining_iterations - offset; 0 < remaining_iterations; remaining_iterations = remaining_iterations - temp_var) {\n        temp_var = (*(code *)data_ptr[10])(data_pointer,data_ptr[8],offset,remaining_iterations);\n        if (temp_var < 1) {\n          flags = *(ushort *)(data_ptr + 3);\n          goto handle_error;\n        }\n        offset = offset + temp_var;\n      }\n    }\n  }\n  else if (((0 < data_ptr[1]) || (0 < data_ptr[0x10])) &&\n          (function_pointer = (code *)data_ptr[0xb], function_pointer != (code *)0x0)) {\n    temp_value = *data_pointer;\n    *data_pointer = 0;\n    if ((flags & 0x1000) == 0) {\n      offset = (*function_pointer)(data_pointer,data_ptr[8],ushort_value & 0x1000,1);\n      if ((offset == -1) && (ushort_value = *data_pointer, ushort_value != 0)) {\n        if ((ushort_value != 0x1d) && (ushort_value != 0x16)) {\n          *(ushort *)(data_ptr + 3) = *(ushort *)(data_ptr + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*jump_table)();\n          return;\n        }\n        *data_pointer = temp_value;\n        goto LAB_08009b86;\n      }\n    }\n    else {\n      offset = data_ptr[0x15];\n    }\n    if (((int)((uint)*(ushort *)(data_ptr + 3) << 0x1d) < 0) &&\n       (offset = offset - data_ptr[1], data_ptr[0xd] != 0)) {\n      offset = offset - data_ptr[0x10];\n    }\n    offset = (*(code *)data_ptr[0xb])(data_pointer,data_ptr[8],offset,0);\n    flags = *(ushort *)(data_ptr + 3);\n    if ((offset == -1) &&\n       ((0x1d < *data_pointer || (-1 < (int)((0x20400001U >> (*data_pointer & 0xff)) << 0x1f))))) {\nhandle_error:\n      *(ushort *)(data_ptr + 3) = flags | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jump_table)(0xffffffff);\n      return;\n    }\n    data_ptr[1] = 0;\n    *data_ptr = data_ptr[4];\n    if (((int)((uint)flags << 0x13) < 0) && ((offset != -1 || (*data_pointer == 0)))) {\n      data_ptr[0x15] = offset;\n    }\n    temp_pointer = (int *)data_ptr[0xd];\n    *data_pointer = temp_value;\n    if (temp_pointer != (int *)0x0) {\n      if (temp_pointer != data_ptr + 0x11) {\n        process_data_08009b5c_080091d8(data_pointer);\n      }\n      data_ptr[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jump_table)();\n      return;\n    }\n  }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(0);\n  return;\n}\n\n",
            "current_name": "process_data_08009b5c",
            "entrypoint": "0x08009b5c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009b5c": "process_data_08009b5c",
                "LAB_08009c62": "handle_error",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "bVar11": "is_flag_set",
                "iVar2": "offset",
                "iVar4": "i_var4",
                "iVar7": "temp_var",
                "iVar9": "remaining_iterations",
                "infinite_loop_08008868": "infinite_loop",
                "pcVar8": "function_pointer",
                "piVar3": "data_ptr",
                "piVar4": "temp_pointer",
                "process_data_08009fe8": "process_data",
                "puVar1": "data_pointer",
                "uVar1": "data_ptr",
                "uVar10": "temp_value",
                "uVar12": "result",
                "uVar5": "ushort_value",
                "uVar6": "flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009c7c": {
            "additional_data": {
                "FUN_08009c7c": {
                    "1": "process_and_update_data",
                    "2": "process_function",
                    "22": "process_data"
                },
                "UNRECOVERED_JUMPTABLE_00": {
                    "1": "function_jumptable",
                    "11": "jump_table",
                    "2": "jmp_table",
                    "3": "jumptable"
                },
                "bVar10": {
                    "1": "bool_flag",
                    "2": "is_true",
                    "3": "flag"
                },
                "iVar2": {
                    "1": "var2",
                    "2": "length",
                    "3": "offset",
                    "4": "value",
                    "9": "count"
                },
                "iVar6": {
                    "1": "temp_length",
                    "2": "temp3",
                    "3": "offset"
                },
                "iVar8": {
                    "1": "offset",
                    "2": "length",
                    "3": "loop_counter"
                },
                "param_1": {
                    "1": "data_1",
                    "2": "input_array",
                    "3": "data_array",
                    "4": "input_data",
                    "6": "data_ptr",
                    "7": "data"
                },
                "param_2": {
                    "1": "params_ptr",
                    "2": "info_ptr",
                    "3": "info",
                    "6": "param_array"
                },
                "pcVar7": {
                    "13": "function_ptr",
                    "2": "func",
                    "5": "func_ptr",
                    "6": "function_pointer"
                },
                "piVar3": {
                    "1": "ptr_var",
                    "11": "ptr",
                    "2": "pi_var3",
                    "3": "pointer",
                    "5": "temp_ptr"
                },
                "uVar1": {
                    "15": "return_value",
                    "16": "result"
                },
                "uVar10": {
                    "1": "var7",
                    "2": "condition",
                    "3": "bool_value"
                },
                "uVar11": {
                    "1": "is_condition2_true"
                },
                "uVar12": {
                    "1": "is_condition3_true"
                },
                "uVar13": {
                    "1": "is_condition4_true"
                },
                "uVar4": {
                    "1": "ushort_var",
                    "2": "temp1",
                    "3": "u_var4",
                    "4": "temp"
                },
                "uVar5": {
                    "1": "temp_ushort",
                    "2": "temp2",
                    "3": "temp_var2",
                    "9": "flag"
                },
                "uVar9": {
                    "1": "temp4",
                    "2": "temp3",
                    "3": "u_var9",
                    "5": "temp_value"
                },
                "unaff_r4": {
                    "1": "variable1",
                    "2": "var1",
                    "3": "unused_var1",
                    "6": "unaff_r4"
                },
                "unaff_r5": {
                    "1": "variable2",
                    "2": "var2",
                    "3": "unaff_var2",
                    "6": "unaff_r5"
                }
            },
            "called": [
                "FUN_08009d50"
            ],
            "calling": [
                "FUN_0800932c"
            ],
            "code": "\nundefined4 process_data_08009c7c(uint *data,int *param_array)\n\n{\n  undefined4 result;\n  int count;\n  int *ptr;\n  uint temp;\n  ushort flag;\n  int offset;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *function_ptr;\n  int loop_counter;\n  uint temp_value;\n  code *jump_table;\n  bool flag;\n  \n  if (param_array[4] != 0) {\n    if ((data != (uint *)0x0) && (data[6] == 0)) {\n      initialize_data_08009d50();\n    }\n    if (param_array == &DAT_0800aba4) {\n      param_array = (int *)data[1];\n    }\n    else if (param_array == (int *)&DAT_0800abc4) {\n      param_array = (int *)data[2];\n    }\n    else if (param_array == (int *)&DAT_0800ab84) {\n      param_array = (int *)data[3];\n    }\n    if (*(short *)(param_array + 3) != 0) {\n      flag = *(ushort *)(param_array + 3);\n      temp = (uint)flag;\n      if ((int)(temp << 0x1c) < 0) {\n        count = param_array[4];\n        if (count != 0) {\n          offset = temp << 0x1e;\n          flag = offset != 0;\n          if (flag) {\n            offset = 0;\n          }\n          loop_counter = *param_array;\n          if (!flag) {\n            offset = param_array[5];\n          }\n          *param_array = count;\n          param_array[2] = offset;\n          for (loop_counter = loop_counter - count; 0 < loop_counter; loop_counter = loop_counter - offset) {\n            offset = (*(code *)param_array[10])(data,param_array[8],count,loop_counter,unaff_r4,unaff_r5);\n            if (offset < 1) {\n              flag = *(ushort *)(param_array + 3);\n              goto LAB_08009c62;\n            }\n            count = count + offset;\n          }\n        }\n      }\n      else if (((0 < param_array[1]) || (0 < param_array[0x10])) &&\n              (function_ptr = (code *)param_array[0xb], function_ptr != (code *)0x0)) {\n        temp_value = *data;\n        *data = 0;\n        if ((flag & 0x1000) == 0) {\n          count = (*function_ptr)(data,param_array[8],temp & 0x1000,1);\n          if ((count == -1) && (temp = *data, temp != 0)) {\n            if ((temp != 0x1d) && (temp != 0x16)) {\n              *(ushort *)(param_array + 3) = *(ushort *)(param_array + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              result = (*jump_table)();\n              return result;\n            }\n            *data = temp_value;\n            goto LAB_08009b86;\n          }\n        }\n        else {\n          count = param_array[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_array + 3) << 0x1d) < 0) &&\n           (count = count - param_array[1], param_array[0xd] != 0)) {\n          count = count - param_array[0x10];\n        }\n        count = (*(code *)param_array[0xb])(data,param_array[8],count,0);\n        flag = *(ushort *)(param_array + 3);\n        if ((count == -1) &&\n           ((0x1d < *data || (-1 < (int)((0x20400001U >> (*data & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n          *(ushort *)(param_array + 3) = flag | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          result = (*jump_table)(0xffffffff);\n          return result;\n        }\n        param_array[1] = 0;\n        *param_array = param_array[4];\n        if (((int)((uint)flag << 0x13) < 0) && ((count != -1 || (*data == 0)))) {\n          param_array[0x15] = count;\n        }\n        ptr = (int *)param_array[0xd];\n        *data = temp_value;\n        if (ptr != (int *)0x0) {\n          if (ptr != param_array + 0x11) {\n            process_data_08009c7c_080091d8(data);\n          }\n          param_array[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          result = (*jump_table)();\n          return result;\n        }\n      }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      result = (*jump_table)(0);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "code_backup": "\nundefined4 FUN_08009c7c(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_08009d50();\n    }\n    if (param_2 == &DAT_0800aba4) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)&DAT_0800abc4) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)&DAT_0800ab84) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 != 0;\n          if (bVar10) {\n            iVar6 = 0;\n          }\n          iVar8 = *param_2;\n          if (!bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_08009c62;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_08009b86;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((0x20400001U >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            process_data_080091d8(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_08009c7c",
            "entrypoint": "0x08009c7c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009c7c": "process_data_08009c7c",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "bVar10": "flag",
                "iVar2": "count",
                "iVar6": "offset",
                "iVar8": "loop_counter",
                "param_1": "data",
                "param_2": "param_array",
                "pcVar7": "function_ptr",
                "piVar3": "ptr",
                "uVar1": "result",
                "uVar4": "temp",
                "uVar5": "flag",
                "uVar9": "temp_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009cdc": {
            "additional_data": {
                "&LAB_0800a09e_1": {
                    "1": "some_label_data"
                },
                "*(undefined2 *)((int)param_1 + 0xe)": {
                    "1": "data_structure[14]"
                },
                "*(undefined2 *)(param_1 + 3)": {
                    "1": "data_structure[3]"
                },
                "*param_1": {
                    "1": "data_structure[0]"
                },
                "0x800a021": {
                    "1": "constant1"
                },
                "0x800a043": {
                    "1": "constant2"
                },
                "0x800a07b": {
                    "1": "constant3"
                },
                "FUN_08009cdc": {
                    "1": "initialize_function",
                    "13": "initialize_data_structure",
                    "2": "initialize_params",
                    "3": "initialize_data_struct",
                    "5": "initialize_data",
                    "6": "initialize_memory"
                },
                "LAB_0800a09e_1": {
                    "1": "label_end",
                    "2": "label",
                    "4": "label1",
                    "6": "label_1",
                    "8": "some_label"
                },
                "fill_memory_080091c6": {
                    "1": "fill_memory_with_zeroes",
                    "2": "clear_memory",
                    "25": "fill_memory"
                },
                "param_1": {
                    "1": "output_data",
                    "13": "data_structure",
                    "2": "data_struct",
                    "3": "data",
                    "5": "memory"
                },
                "param_1[0x19]": {
                    "1": "data_structure[25]"
                },
                "param_1[0xb]": {
                    "1": "data_structure[11]"
                },
                "param_1[0xc]": {
                    "1": "data_structure[12]"
                },
                "param_1[10]": {
                    "1": "data_structure[10]"
                },
                "param_1[1]": {
                    "1": "data_structure[1]"
                },
                "param_1[2]": {
                    "1": "data_structure[2]"
                },
                "param_1[4]": {
                    "1": "data_structure[4]"
                },
                "param_1[5]": {
                    "1": "data_structure[5]"
                },
                "param_1[6]": {
                    "1": "data_structure[6]"
                },
                "param_1[8]": {
                    "1": "data_structure[8]"
                },
                "param_1[9]": {
                    "1": "data_structure[9]"
                },
                "param_2": {
                    "1": "input_value1",
                    "23": "value1",
                    "6": "value_1"
                },
                "param_3": {
                    "1": "data2",
                    "23": "value2",
                    "6": "value_2"
                }
            },
            "called": [
                "FUN_080091c6"
            ],
            "calling": [
                "FUN_08009d50"
            ],
            "code": "\nvoid initialize_data_structure_08009cdc(undefined4 *data_structure,undefined2 value1,undefined2 value2)\n\n{\n  *data_structure = 0;\n  data_structure[1] = 0;\n  data_structure[2] = 0;\n  *(undefined2 *)(data_structure + 3) = value1;\n  data_structure[25] = 0;\n  *(undefined2 *)((int)data_structure + 0xe) = value2;\n  data_structure[4] = 0;\n  data_structure[5] = 0;\n  data_structure[6] = 0;\n  fill_memory(data_structure + 0x17,0,8);\n  data_structure[8] = data_structure;\n  data_structure[9] = 0x800a021;\n  data_structure[10] = 0x800a043;\n  data_structure[11] = 0x800a07b;\n  data_structure[12] = some_label_data;\n  return;\n}\n\n",
            "current_name": "initialize_data_structure_08009cdc",
            "entrypoint": "0x08009cdc",
            "imported": false,
            "improved": true,
            "renaming": {
                "&LAB_0800a09e_1": "some_label_data",
                "FUN_08009cdc": "initialize_data_structure_08009cdc",
                "LAB_0800a09e_1": "some_label",
                "fill_memory_080091c6": "fill_memory",
                "param_1": "data_structure",
                "param_1[0x19]": "data_structure[25]",
                "param_1[0xb]": "data_structure[11]",
                "param_1[0xc]": "data_structure[12]",
                "param_1[10]": "data_structure[10]",
                "param_1[1]": "data_structure[1]",
                "param_1[2]": "data_structure[2]",
                "param_1[4]": "data_structure[4]",
                "param_1[5]": "data_structure[5]",
                "param_1[6]": "data_structure[6]",
                "param_1[8]": "data_structure[8]",
                "param_1[9]": "data_structure[9]",
                "param_2": "value1",
                "param_3": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009d24": {
            "additional_data": {
                "FUN_08009d24": {
                    "1": "allocate_memory_and_assign_values",
                    "16": "allocate_and_initialize_memory",
                    "2": "allocate_and_assign_memory",
                    "4": "initialize_memory",
                    "5": "allocate_and_fill_memory"
                },
                "fill_memory_080091c6": {
                    "1": "initialize_memory_with_zeros"
                },
                "iVar2": {
                    "1": "memory_size_with_padding",
                    "10": "memory_size",
                    "2": "allocation_size",
                    "4": "memory_offset"
                },
                "param_1": {
                    "1": "input_param_1",
                    "2": "input_param",
                    "3": "memory_size",
                    "4": "initial_value",
                    "5": "input_value"
                },
                "param_2": {
                    "1": "block_size",
                    "13": "num_elements",
                    "2": "array_size",
                    "3": "size",
                    "4": "count"
                },
                "puVar1": {
                    "1": "result_pointer",
                    "2": "memory_ptr",
                    "22": "allocated_memory"
                }
            },
            "called": [
                "FUN_080091c6",
                "FUN_08009270"
            ],
            "calling": [
                "FUN_08009db0"
            ],
            "code": "\nundefined4 * allocate_and_initialize_memory_08009d24(undefined4 input_value,int num_elements)\n\n{\n  undefined4 *allocated_memory;\n  int memory_size;\n  \n  memory_size = (num_elements + -1) * 0x68;\n  allocated_memory = (undefined4 *)allocate_and_assign_memory_08009270(input_value,memory_size + 0x74);\n  if (allocated_memory != (undefined4 *)0x0) {\n    *allocated_memory = 0;\n    allocated_memory[1] = num_elements;\n    allocated_memory[2] = allocated_memory + 3;\n    initialize_memory_with_zeros(allocated_memory + 3,0,memory_size + 0x68);\n  }\n  return allocated_memory;\n}\n\n",
            "current_name": "allocate_and_initialize_memory_08009d24",
            "entrypoint": "0x08009d24",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009d24": "allocate_and_initialize_memory_08009d24",
                "fill_memory_080091c6": "initialize_memory_with_zeros",
                "iVar2": "memory_size",
                "param_1": "input_value",
                "param_2": "num_elements",
                "puVar1": "allocated_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009d50": {
            "additional_data": {
                "&LAB_08009cd0_1": {
                    "1": "address_of_function"
                },
                "FUN_08009d50": {
                    "1": "initialize_memory_and_data_structure",
                    "2": "initialize_function",
                    "4": "initialize_memory_if_needed",
                    "5": "initialize_memory",
                    "6": "initialize_data"
                },
                "LAB_08009cd0_1": {
                    "1": "label_1"
                },
                "initialize_data_structure_08009cdc": {
                    "1": "initialize_structure",
                    "18": "initialize_data_structure"
                },
                "initialize_memory_08009db0": {
                    "1": "allocate_memory",
                    "16": "initialize_memory",
                    "2": "initialize_memory_block"
                },
                "param_1": {
                    "1": "memory_structure",
                    "2": "param_array",
                    "3": "memory_pointer",
                    "4": "param",
                    "6": "parameters"
                },
                "puVar2": {
                    "1": "temporary_ptr",
                    "12": "pointer",
                    "2": "pointer_variable",
                    "3": "data_pointer",
                    "5": "temp_ptr"
                },
                "uVar1": {
                    "1": "memory_pointer",
                    "15": "result",
                    "2": "initialized_memory",
                    "6": "initialized_value"
                }
            },
            "called": [
                "FUN_08009cdc",
                "FUN_08009db0"
            ],
            "calling": [
                "FUN_0800937c",
                "FUN_08009db0",
                "FUN_080098d8",
                "FUN_08009a80",
                "FUN_0800932c",
                "FUN_08009c7c"
            ],
            "code": "\nvoid initialize_data_08009d50(undefined4 *parameters)\n\n{\n  undefined4 result;\n  undefined4 *pointer;\n  \n  if (parameters[6] == 0) {\n    parameters[0x12] = 0;\n    parameters[0x13] = 0;\n    parameters[0x14] = 0;\n    pointer = &DAT_20000094;\n    parameters[10] = constant_pointer;\n    if (parameters == &DAT_20000094) {\n      pointer = (undefined4 *)0x1;\n    }\n    if (parameters == &DAT_20000094) {\n      parameters[6] = pointer;\n    }\n    result = initialize_memory();\n    parameters[1] = result;\n    result = initialize_memory(parameters);\n    parameters[2] = result;\n    result = initialize_memory(parameters);\n    parameters[3] = result;\n    initialize_data_08009d50_structure(parameters[1],4,0);\n    initialize_data_08009d50_structure(parameters[2],9,1);\n    initialize_data_08009d50_structure(parameters[3],0x12,2);\n    parameters[6] = 1;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_data_08009d50",
            "entrypoint": "0x08009d50",
            "imported": false,
            "improved": true,
            "renaming": {
                "&LAB_08009cd0_1": "constant_pointer",
                "FUN_08009d50": "initialize_data_08009d50",
                "LAB_08009cd0_1": "label_1",
                "initialize_data_structure_08009cdc": "initialize_data_structure",
                "initialize_memory_08009db0": "initialize_memory",
                "param_1": "parameters",
                "puVar2": "pointer",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009db0": {
            "additional_data": {
                "DAT_20000094": {
                    "1": "memory_location",
                    "2": "initialized_data"
                },
                "DAT_200000ac": {
                    "1": "is_memory_initialized",
                    "2": "initialized_flag"
                },
                "DAT_200000dc": {
                    "1": "ptr_to_data",
                    "2": "list_head"
                },
                "FUNC_08009d50": {
                    "1": "initialize_data"
                },
                "FUN_08009db0": {
                    "1": "initialize_structures",
                    "11": "initialize_memory",
                    "5": "initialize_data"
                },
                "allocate_and_initialize_memory_08009d24": {
                    "10": "allocate_and_initialize_memory",
                    "3": "allocate_and_init_memory"
                },
                "fill_memory_080091c6": {
                    "1": "initialize_memory",
                    "13": "fill_memory"
                },
                "param_1": {
                    "1": "input_pointer",
                    "11": "error_code",
                    "2": "output",
                    "4": "result"
                },
                "param_2": {
                    "1": "arg2",
                    "18": "param2",
                    "2": "input_2",
                    "3": "param_2"
                },
                "param_3": {
                    "1": "uninitialized_var2",
                    "18": "param3",
                    "2": "input_3",
                    "3": "param_3"
                },
                "param_4": {
                    "1": "parameter_4",
                    "18": "param4",
                    "2": "input_4",
                    "3": "param_4"
                },
                "piVar1": {
                    "1": "current_value",
                    "2": "current_pointer",
                    "4": "ptr1",
                    "5": "current_element"
                },
                "piVar2": {
                    "1": "current_sub_item",
                    "2": "current_pointer2",
                    "3": "next_element",
                    "4": "ptr2"
                },
                "piVar3": {
                    "1": "new_data_ptr"
                },
                "ppiVar3": {
                    "1": "current_double_ptr",
                    "2": "ptr_ptr",
                    "3": "list"
                }
            },
            "called": [
                "FUN_08009d50",
                "FUN_080091c6",
                "FUN_08009d24"
            ],
            "calling": [
                "FUN_08009d50"
            ],
            "code": "\nint * initialize_memory_08009db0(undefined4 *error_code,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int *current_ptr;\n  int *ptr2;\n  int **list;\n  \n  if (DAT_200000ac == 0) {\n    initialize_data_08009d50(&DAT_20000094);\n  }\n  list = (int **)&DAT_200000dc;\n  do {\n    ptr2 = list[2];\n    current_ptr = list[1];\n    while (current_ptr = (int *)((int)current_ptr + -1), -1 < (int)current_ptr) {\n      if (*(short *)(ptr2 + 3) == 0) {\n        *(undefined2 *)((int)ptr2 + 0xe) = 0xffff;\n        ptr2[0x19] = 0;\n        *(undefined2 *)(ptr2 + 3) = 1;\n        *ptr2 = 0;\n        ptr2[2] = 0;\n        ptr2[1] = 0;\n        ptr2[4] = 0;\n        ptr2[5] = 0;\n        ptr2[6] = 0;\n        fill_memory(ptr2 + 0x17,0,8,1,param4);\n        ptr2[0xd] = 0;\n        ptr2[0xe] = 0;\n        ptr2[0x12] = 0;\n        ptr2[0x13] = 0;\n        return ptr2;\n      }\n      ptr2 = ptr2 + 0x1a;\n    }\n    if (*list == (int *)0x0) {\n      current_ptr = (int *)allocate_and_initialize_memory_08009db0(error_code,4);\n      *list = current_ptr;\n      if (current_ptr == (int *)0x0) {\n        *error_code = 0xc;\n        return (int *)0x0;\n      }\n    }\n    list = (int **)*list;\n  } while( true );\n}\n\n",
            "code_backup": "\nint * FUN_08009db0(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int **ppiVar3;\n  \n  if (DAT_200000ac == 0) {\n    FUNC_08009d50(&DAT_20000094);\n  }\n  ppiVar3 = (int **)&DAT_200000dc;\n  do {\n    piVar2 = ppiVar3[2];\n    piVar1 = ppiVar3[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        piVar2[0x19] = 0;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_memory_080091c6(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar3 == (int *)0x0) {\n      piVar1 = (int *)allocate_and_initialize_memory_08009d24(param_1,4);\n      *ppiVar3 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar3 = (int **)*ppiVar3;\n  } while( true );\n}\n\n",
            "current_name": "initialize_memory_08009db0",
            "entrypoint": "0x08009db0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009db0": "initialize_memory_08009db0",
                "allocate_and_initialize_memory_08009d24": "allocate_and_initialize_memory",
                "fill_memory_080091c6": "fill_memory",
                "param_1": "error_code",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "piVar1": "current_ptr",
                "piVar2": "ptr2",
                "piVar3": "new_data_ptr",
                "ppiVar3": "list"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009e64": {
            "additional_data": {
                "FUN_08009e64": {
                    "1": "get_page_parameters",
                    "2": "get_memory_info",
                    "3": "check_memory_permissions",
                    "4": "check_memory"
                },
                "auStack_4c": {
                    "1": "stack_buffer",
                    "2": "aux_stack",
                    "3": "temp_stack",
                    "4": "stack_data",
                    "5": "temporary_buffer"
                },
                "iVar1": {
                    "1": "set_memory_page_size_result",
                    "12": "result",
                    "2": "set_result",
                    "4": "status"
                },
                "local_48": {
                    "1": "page_flag",
                    "2": "local_var",
                    "3": "page_attributes",
                    "5": "local_variable"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "param",
                    "3": "input_param",
                    "6": "param1"
                },
                "param_2": {
                    "1": "ptr",
                    "2": "header_address",
                    "3": "data",
                    "4": "param2",
                    "6": "arg2"
                },
                "param_3": {
                    "1": "output",
                    "11": "result",
                    "2": "status",
                    "3": "result_ptr",
                    "4": "output_param"
                },
                "param_4": {
                    "1": "page_flags",
                    "2": "status_param",
                    "3": "flags",
                    "4": "result"
                },
                "uVar2": {
                    "1": "result_code",
                    "3": "permission",
                    "4": "return_value",
                    "5": "value"
                }
            },
            "called": [
                "FUN_0800a0ec"
            ],
            "calling": [
                "FUN_08009eac"
            ],
            "code": "\nundefined4 check_memory_08009e64(undefined4 param1,int arg2,undefined4 *result,uint *flag)\n\n{\n  int result;\n  undefined4 value;\n  undefined temporary_buffer [4];\n  uint local_variable;\n  \n  if ((*(short *)(arg2 + 0xe) < 0) ||\n     (result = set_memory_page_size_0800a0ec(param1,(int)*(short *)(arg2 + 0xe),temporary_buffer), result < 0)) {\n    *flag = 0;\n    if ((int)((uint)*(ushort *)(arg2 + 0xc) << 0x18) < 0) {\n      value = 0x40;\n      goto LAB_08009ea4;\n    }\n  }\n  else {\n    *flag = (uint)((local_variable & 0xf000) == 0x2000);\n  }\n  value = 0x400;\nLAB_08009ea4:\n  *result = value;\n  return 0;\n}\n\n",
            "current_name": "check_memory_08009e64",
            "entrypoint": "0x08009e64",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009e64": "check_memory_08009e64",
                "auStack_4c": "temporary_buffer",
                "iVar1": "result",
                "local_48": "local_variable",
                "param_1": "param1",
                "param_2": "arg2",
                "param_3": "result",
                "param_4": "flag",
                "uVar2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009eac": {
            "additional_data": {
                "FUN_08009eac": {
                    "1": "process_memory",
                    "10": "initialize_memory",
                    "2": "allocate_and_assign_memory",
                    "3": "allocate_memory_and_initialize",
                    "8": "allocate_and_initialize_memory"
                },
                "allocate_and_assign_memory_08009270": {
                    "1": "allocate_and_assign_memory"
                },
                "check_memory_08009e64": {
                    "1": "check_memory"
                },
                "iVar2": {
                    "1": "allocated_result",
                    "14": "allocated_memory",
                    "2": "allocation_status",
                    "4": "memory_allocation_result",
                    "7": "allocation_result"
                },
                "initialize_and_check_0800a110": {
                    "1": "initialize_and_check"
                },
                "local_14": {
                    "1": "local_value_2",
                    "2": "temp_memory",
                    "8": "initialized_memory"
                },
                "local_18": {
                    "1": "local_base_address",
                    "10": "allocated_memory",
                    "2": "allocated_size",
                    "4": "size"
                },
                "param_1": {
                    "1": "memory_location",
                    "2": "input_param",
                    "6": "memory_address",
                    "9": "base_address"
                },
                "param_2": {
                    "1": "memory_array",
                    "13": "memory_block",
                    "2": "output_param",
                    "3": "memory_info"
                },
                "uVar1": {
                    "1": "result",
                    "14": "memory_check_result",
                    "2": "check_result",
                    "5": "memory_check"
                }
            },
            "called": [
                "FUN_0800a110",
                "FUN_08009e64",
                "FUN_08009270"
            ],
            "calling": [
                "FUN_08009a80"
            ],
            "code": "\nvoid initialize_memory_08009eac(int base_address,int *memory_block)\n\n{\n  ushort memory_check_result;\n  int allocated_memory;\n  int allocated_memory;\n  int *initialized_memory;\n  \n  if (-1 < (int)((uint)*(ushort *)(memory_block + 3) << 0x1e)) {\n    allocated_memory = base_address;\n    initialized_memory = memory_block;\n    memory_check_result = check_memory(base_address,memory_block,&allocated_memory,&initialized_memory);\n    allocated_memory = allocate_and_assign_memory(base_address,allocated_memory);\n    if (allocated_memory != 0) {\n      *(undefined **)(base_address + 0x28) = &LAB_08009cd0_1;\n      *memory_block = allocated_memory;\n      *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) | 0x80;\n      memory_block[4] = allocated_memory;\n      memory_block[5] = allocated_memory;\n      if ((initialized_memory != (int *)0x0) &&\n         (allocated_memory = initialize_and_check(base_address,(int)*(short *)((int)memory_block + 0xe)), allocated_memory != 0)) {\n        *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(memory_block + 3) = memory_check_result | *(ushort *)(memory_block + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(memory_block + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) & 0xfffc | 2;\n  }\n  *memory_block = (int)memory_block + 0x47;\n  memory_block[4] = (int)memory_block + 0x47;\n  memory_block[5] = 1;\n  return;\n}\n\n",
            "current_name": "initialize_memory_08009eac",
            "entrypoint": "0x08009eac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009eac": "initialize_memory_08009eac",
                "allocate_and_assign_memory_08009270": "allocate_and_assign_memory",
                "check_memory_08009e64": "check_memory",
                "iVar2": "allocated_memory",
                "initialize_and_check_0800a110": "initialize_and_check",
                "local_14": "initialized_memory",
                "local_18": "allocated_memory",
                "param_1": "base_address",
                "param_2": "memory_block",
                "uVar1": "memory_check_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009f2c": {
            "additional_data": {
                "FUN_08009f2c": {
                    "1": "find_character_position",
                    "17": "find_character",
                    "2": "find_character_in_string",
                    "3": "find_character_index",
                    "4": "find_first_occurrence"
                },
                "param_1": {
                    "1": "input_string",
                    "27": "string",
                    "3": "str"
                },
                "param_2": {
                    "1": "search_char",
                    "2": "target_character",
                    "21": "character",
                    "5": "target_char"
                },
                "param_3": {
                    "22": "length",
                    "9": "string_length"
                },
                "pcVar1": {
                    "13": "current_char",
                    "2": "current",
                    "3": "current_position",
                    "5": "current_character"
                },
                "pcVar2": {
                    "1": "found_char",
                    "12": "next_char",
                    "2": "next",
                    "3": "next_position",
                    "5": "next_character"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800937c",
                "FUN_08009698"
            ],
            "code": "\nchar * find_character_08009f2c(char *string,char character,int length)\n\n{\n  char *current_char;\n  char *next_char;\n  \n  current_char = string;\n  do {\n    next_char = current_char;\n    if (next_char == string + length) {\n      return (char *)0x0;\n    }\n    current_char = next_char + 1;\n  } while (*next_char != character);\n  return next_char;\n}\n\n",
            "current_name": "find_character_08009f2c",
            "entrypoint": "0x08009f2c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009f2c": "find_character_08009f2c",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "current_char",
                "pcVar2": "next_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009f48": {
            "called": [],
            "calling": [
                "FUN_08009270",
                "FUN_080091d8"
            ],
            "code": "\nvoid FUNC_08009f48(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08009f48",
            "entrypoint": "0x08009f48",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08009f48": "FUNC_08009f48"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08009f4a": {
            "called": [],
            "calling": [
                "FUN_08009270",
                "FUN_080091d8"
            ],
            "code": "\nvoid FUNC_08009f4a(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08009f4a",
            "entrypoint": "0x08009f4a",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08009f4a": "FUNC_08009f4a"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08009fe8": {
            "additional_data": {
                "DAT_20000090": {
                    "2": "data"
                },
                "DAT_20000a38": {
                    "1": "error_code"
                },
                "FUN_08009fe8": {
                    "1": "execute_operation",
                    "13": "process_data",
                    "2": "handle_data",
                    "4": "process_param"
                },
                "iVar3": {
                    "1": "current_value",
                    "3": "index",
                    "4": "data_value",
                    "5": "data",
                    "7": "value"
                },
                "in_lr": {
                    "1": "param_6",
                    "2": "unused_var3",
                    "3": "link_register"
                },
                "initialize_data_0800886c": {
                    "2": "initialize_data"
                },
                "param_1": {
                    "1": "operation_code",
                    "13": "input",
                    "2": "input_data",
                    "3": "param",
                    "5": "input_value"
                },
                "pcVar4": {
                    "1": "command_ptr",
                    "20": "function_ptr",
                    "3": "callback",
                    "7": "function_pointer"
                },
                "piVar1": {
                    "1": "result",
                    "16": "data_ptr",
                    "3": "data_pointer",
                    "4": "data_array"
                },
                "puVar5": {
                    "1": "data_array_ptr",
                    "2": "pointer",
                    "3": "data_pointer_ptr",
                    "8": "data_ptr",
                    "9": "data_ptr_ptr"
                },
                "thunk_get_return_value_0800887c": {
                    "2": "get_return_value"
                },
                "uVar2": {
                    "1": "result",
                    "29": "return_value"
                },
                "unaff_r4": {
                    "1": "unaff_r4",
                    "2": "unused_var1"
                },
                "unaff_r5": {
                    "1": "argument2",
                    "2": "unused_var2"
                }
            },
            "called": [
                "FUN_0800886c",
                "thunk_FUN_0800887c"
            ],
            "calling": [
                "FUN_08009b5c"
            ],
            "code": "\nint process_data_08009fe8(uint input)\n\n{\n  int *data_ptr;\n  undefined4 return_value;\n  int value;\n  code *function_ptr;\n  undefined4 unused_var1;\n  undefined4 unused_var2;\n  undefined4 link_register;\n  undefined4 *data_ptr_ptr;\n  \n  data_ptr = DAT_20000090;\n  data_ptr_ptr = &DAT_20000090;\n  if (0x1f < input) {\n    *DAT_20000090 = 0x16;\n    return -1;\n  }\n  value = DAT_20000090[0x11];\n  if ((value != 0) && (function_ptr = *(code **)(value + input * 4), function_ptr != (code *)0x0)) {\n    if (function_ptr != (code *)0x1) {\n      if (function_ptr == (code *)0xffffffff) {\n        *DAT_20000090 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(value + input * 4) = 0;\n      (*function_ptr)(input);\n    }\n    return 0;\n  }\n  return_value = get_return_value(DAT_20000090);\n  DAT_20000a38 = 0;\n  value = initialize_data(return_value,input,input,0,data_ptr_ptr,unused_var1,unused_var2,link_register);\n  if ((value == -1) && (DAT_20000a38 != 0)) {\n    *data_ptr = DAT_20000a38;\n  }\n  return value;\n}\n\n",
            "current_name": "process_data_08009fe8",
            "entrypoint": "0x08009fe8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009fe8": "process_data_08009fe8",
                "iVar3": "value",
                "in_lr": "link_register",
                "initialize_data_0800886c": "initialize_data",
                "param_1": "input",
                "pcVar4": "function_ptr",
                "piVar1": "data_ptr",
                "puVar5": "data_ptr_ptr",
                "thunk_get_return_value_0800887c": "get_return_value",
                "uVar2": "return_value",
                "unaff_r4": "unused_var1",
                "unaff_r5": "unused_var2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800a020": {
            "additional_data": {
                "FUN_0800a020": {
                    "1": "update_variable_and_check_error",
                    "2": "update_value_based_on_error",
                    "6": "update_values",
                    "9": "update_data"
                },
                "bVar3": {
                    "1": "is_error_negative",
                    "12": "is_positive",
                    "2": "is_successful",
                    "4": "is_success",
                    "9": "is_error"
                },
                "iVar1": {
                    "1": "result1",
                    "17": "result",
                    "8": "error_code"
                },
                "initialize_and_check_error_0800a168": {
                    "1": "initialize_and_check_error"
                },
                "param_1": {
                    "1": "input_ptr",
                    "2": "value1",
                    "3": "param1",
                    "4": "input1"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "value2",
                    "3": "data_pointer",
                    "4": "input2",
                    "6": "data_ptr"
                },
                "uVar2": {
                    "1": "result2",
                    "22": "updated_value",
                    "7": "new_value"
                }
            },
            "called": [
                "FUN_0800a168"
            ],
            "calling": [],
            "code": "\nvoid update_data_0800a020(undefined4 input1,int data_ptr)\n\n{\n  int result;\n  uint updated_value;\n  bool is_positive;\n  \n  result = initialize_and_check_error(input1,(int)*(short *)(data_ptr + 0xe));\n  is_positive = -1 < result;\n  if (is_positive) {\n    updated_value = *(int *)(data_ptr + 0x54) + result;\n  }\n  else {\n    updated_value = *(ushort *)(data_ptr + 0xc) & 0xffffefff;\n  }\n  if (is_positive) {\n    *(uint *)(data_ptr + 0x54) = updated_value;\n  }\n  if (!is_positive) {\n    *(short *)(data_ptr + 0xc) = (short)updated_value;\n  }\n  return;\n}\n\n",
            "current_name": "update_data_0800a020",
            "entrypoint": "0x0800a020",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800a020": "update_data_0800a020",
                "bVar3": "is_positive",
                "iVar1": "result",
                "initialize_and_check_error_0800a168": "initialize_and_check_error",
                "param_1": "input1",
                "param_2": "data_ptr",
                "uVar2": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800a042": {
            "additional_data": {
                "DAT_20000a38": {
                    "1": "error_value"
                },
                "FUN_0800a042": {
                    "1": "process_and_initialize",
                    "2": "process_and_check_data",
                    "26": "process_data"
                },
                "iVar1": {
                    "1": "result_code",
                    "21": "result",
                    "3": "error_code"
                },
                "in_lr": {
                    "1": "config_param_5",
                    "2": "unused_var3",
                    "4": "unused3"
                },
                "initialize_and_check_error_0800a130": {
                    "2": "initialize_and_check_error"
                },
                "param_1": {
                    "1": "result_ptr",
                    "14": "output",
                    "2": "output_buffer",
                    "3": "output_array",
                    "7": "result"
                },
                "param_2": {
                    "1": "input_param",
                    "10": "data",
                    "11": "input",
                    "2": "input_data",
                    "3": "input_buffer"
                },
                "param_3": {
                    "1": "parameter1",
                    "2": "value1",
                    "3": "param_3",
                    "5": "param3",
                    "8": "param1",
                    "9": "param_a"
                },
                "param_4": {
                    "1": "config_param_2",
                    "2": "arg2",
                    "3": "param_4",
                    "5": "param4",
                    "8": "param2",
                    "9": "param_b"
                },
                "process_data_0800885c": {
                    "1": "process_data"
                },
                "unaff_r4": {
                    "1": "config_param_3",
                    "2": "unused_var1",
                    "3": "temp_var1",
                    "5": "unused1"
                },
                "unaff_r5": {
                    "1": "unaffected_r5",
                    "2": "unused_var2",
                    "3": "temp_var2",
                    "5": "unused2"
                }
            },
            "called": [
                "FUN_0800a130",
                "FUN_0800885c"
            ],
            "calling": [],
            "code": "\nvoid process_data_0800a042(int *output,int input,undefined4 param_a,undefined4 param_b)\n\n{\n  int result;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 unused3;\n  \n  if ((int)((uint)*(ushort *)(input + 0xc) << 0x17) < 0) {\n    initialize_and_check_error(output,(int)*(short *)(input + 0xe),0,2);\n  }\n  *(ushort *)(input + 0xc) = *(ushort *)(input + 0xc) & 0xefff;\n  DAT_20000a38 = 0;\n  result = process_data_0800a042_internal((int)*(short *)(input + 0xe),param_a,param_b,param_b,param_b,unused1,\n                       unused2,unused3);\n  if ((result == -1) && (DAT_20000a38 != 0)) {\n    *output = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_0800a042",
            "entrypoint": "0x0800a042",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800a042": "process_data_0800a042",
                "iVar1": "result",
                "in_lr": "unused3",
                "initialize_and_check_error_0800a130": "initialize_and_check_error",
                "param_1": "output",
                "param_2": "input",
                "param_3": "param_a",
                "param_4": "param_b",
                "process_data_0800885c": "process_data_internal",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800a07a": {
            "additional_data": {
                "FUN_0800a07a": {
                    "1": "initialize_error_check",
                    "2": "initialize_check_error",
                    "4": "initialize_and_update_status",
                    "6": "initialize_and_update_flags"
                },
                "bVar3": {
                    "1": "error_flag",
                    "28": "is_error"
                },
                "iVar1": {
                    "1": "result_status",
                    "13": "result"
                },
                "initialize_and_check_error_0800a130": {
                    "1": "initialize_and_check_error"
                },
                "param_1": {
                    "1": "connection_handle",
                    "2": "input_param",
                    "3": "status",
                    "7": "param1"
                },
                "param_2": {
                    "1": "buffer",
                    "2": "param_2",
                    "3": "arg2",
                    "4": "data",
                    "6": "data_ptr",
                    "7": "param2"
                },
                "uVar2": {
                    "1": "new_flags",
                    "2": "modified_flag",
                    "3": "updated_flags",
                    "7": "modified_value",
                    "9": "updated_value"
                },
                "uvar2": {
                    "1": "modified_value"
                }
            },
            "called": [
                "FUN_0800a130"
            ],
            "calling": [],
            "code": "\nvoid initialize_and_update_flags_0800a07a(undefined4 param1,int param2)\n\n{\n  int error_code;\n  ushort updated_value;\n  bool is_error;\n  \n  error_code = initialize_and_check_error(param1,(int)*(short *)(param2 + 0xe));\n  is_error = error_code == -1;\n  if (is_error) {\n    updated_value = *(ushort *)(param2 + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(param2 + 0x54) = error_code;\n    updated_value = *(ushort *)(param2 + 0xc) | 0x1000;\n  }\n  if (is_error) {\n    *(ushort *)(param2 + 0xc) = updated_value;\n  }\n  if (!is_error) {\n    *(ushort *)(param2 + 0xc) = updated_value;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_and_update_flags_0800a07a",
            "entrypoint": "0x0800a07a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800a07a": "initialize_and_update_flags_0800a07a",
                "bVar3": "is_error",
                "iVar1": "error_code",
                "initialize_and_check_error_0800a130": "initialize_and_check_error",
                "param_1": "param1",
                "param_2": "param2",
                "uVar2": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800a0ec": {
            "additional_data": {
                "DAT_20000a38": {
                    "1": "temp_value"
                },
                "FUN_0800a0ec": {
                    "1": "initialize_memory_page_size",
                    "10": "set_memory_page_size",
                    "4": "initialize_memory_page",
                    "5": "set_memory_page",
                    "9": "initialize_memory"
                },
                "iVar1": {
                    "1": "return_val",
                    "10": "result",
                    "2": "status",
                    "3": "page_size",
                    "6": "return_value"
                },
                "param_1": {
                    "1": "result_pointer",
                    "15": "result",
                    "5": "output"
                },
                "param_2": {
                    "1": "size_param1",
                    "2": "arg1",
                    "4": "size1",
                    "7": "size"
                },
                "param_3": {
                    "1": "input_param",
                    "2": "param_3",
                    "3": "param3",
                    "4": "size2",
                    "5": "page_size"
                },
                "param_4": {
                    "1": "offset",
                    "2": "option",
                    "3": "param4"
                },
                "set_memory_page_size_08008846": {
                    "1": "set_page_size",
                    "3": "set_memory_page_size"
                }
            },
            "called": [
                "FUN_08008846"
            ],
            "calling": [
                "FUN_08009e64"
            ],
            "code": "\nvoid set_memory_page_size_0800a0ec(int *result,undefined4 size,undefined4 page_size,undefined4 flag)\n\n{\n  int result;\n  \n  DAT_20000a38 = 0;\n  result = set_memory_page_size_0800a0ec(size,page_size,page_size,0,flag);\n  if ((result == -1) && (DAT_20000a38 != 0)) {\n    *result = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "current_name": "set_memory_page_size_0800a0ec",
            "entrypoint": "0x0800a0ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800a0ec": "set_memory_page_size_0800a0ec",
                "iVar1": "result",
                "param_1": "result",
                "param_2": "size",
                "param_3": "page_size",
                "param_4": "flag",
                "set_memory_page_size_08008846": "set_memory_page_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800a110": {
            "additional_data": {
                "FUN_0800a110": {
                    "1": "initialize_and_return_error_code",
                    "2": "initialize_and_assign_result",
                    "5": "initialize_and_assign_value",
                    "7": "initialize_and_check_error",
                    "9": "initialize_and_check"
                },
                "iVar1": {
                    "1": "initialization_status",
                    "15": "init_result",
                    "2": "initialize_result",
                    "3": "status",
                    "8": "result"
                },
                "initialize_08008850": {
                    "1": "initialize_helper_function"
                },
                "param_1": {
                    "1": "output_variable",
                    "15": "result",
                    "3": "output",
                    "6": "result_ptr"
                },
                "param_2": {
                    "1": "param",
                    "16": "input_value",
                    "2": "param_value",
                    "3": "input_param",
                    "6": "input"
                }
            },
            "called": [
                "FUN_08008850"
            ],
            "calling": [
                "FUN_08009eac"
            ],
            "code": "\nvoid initialize_and_check_0800a110(int *result,undefined4 input_value)\n\n{\n  int init_result;\n  \n  DAT_20000a38 = 0;\n  init_result = initialize_helper_function(input_value);\n  if ((init_result == -1) && (DAT_20000a38 != 0)) {\n    *result = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_and_check_0800a110",
            "entrypoint": "0x0800a110",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800a110": "initialize_and_check_0800a110",
                "iVar1": "init_result",
                "initialize_08008850": "initialize_helper_function",
                "param_1": "result",
                "param_2": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800a130": {
            "additional_data": {
                "DAT_20000a38": {
                    "1": "assigned_value"
                },
                "FUN_0800a130": {
                    "1": "initialize_variable",
                    "2": "initialize_and_assign",
                    "3": "initialize_and_store_result",
                    "4": "initialize_and_assign_value",
                    "6": "initialize_and_check_error"
                },
                "iVar1": {
                    "1": "initialize_result",
                    "14": "init_result",
                    "2": "error_code",
                    "3": "status",
                    "5": "result"
                },
                "initialize_08008854": {
                    "1": "initialize"
                },
                "param_1": {
                    "1": "output_error_code",
                    "16": "result",
                    "2": "output",
                    "5": "result_ptr",
                    "6": "output_value"
                },
                "param_2": {
                    "1": "param_2",
                    "13": "arg1",
                    "2": "input_param_1",
                    "5": "input_1"
                },
                "param_3": {
                    "1": "init_param_2",
                    "13": "arg2",
                    "2": "input_param_2",
                    "5": "input_2"
                },
                "param_4": {
                    "1": "init_param3",
                    "13": "arg3",
                    "2": "input_param_3",
                    "5": "input_3"
                }
            },
            "called": [
                "FUN_08008854"
            ],
            "calling": [
                "FUN_0800a07a",
                "FUN_0800a042"
            ],
            "code": "\nvoid initialize_and_check_error_0800a130(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int init_result;\n  \n  DAT_20000a38 = 0;\n  init_result = initialize(arg1,arg2,arg3,arg3,arg3);\n  if ((init_result == -1) && (DAT_20000a38 != 0)) {\n    *result = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_and_check_error_0800a130",
            "entrypoint": "0x0800a130",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800a130": "initialize_and_check_error_0800a130",
                "iVar1": "init_result",
                "initialize_08008854": "initialize",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800a154": {
            "additional_data": {
                "*(int *)(param_2 + -4)": {
                    "2": "current_value"
                },
                "*(int *)(param_2 + iVar1)": {
                    "1": "next_index"
                },
                "FUN_0800a154": {
                    "1": "calculate_sum_or_offset",
                    "14": "calculate_sum",
                    "2": "calculate_modified_value",
                    "6": "calculate_result"
                },
                "iVar": {
                    "1": "index"
                },
                "iVar1": {
                    "1": "new_index",
                    "10": "sum",
                    "2": "current_index",
                    "8": "result"
                },
                "iVar1 + *(int *)(param_2 + iVar1)": {
                    "1": "updated_sum"
                },
                "param_1": {
                    "1": "param",
                    "12": "result",
                    "2": "unknown_value",
                    "6": "input_value"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "array_ptr",
                    "5": "array_index",
                    "7": "array"
                },
                "param_2 + -4": {
                    "1": "previous_index"
                }
            },
            "called": [],
            "calling": [
                "FUN_08009908"
            ],
            "code": "\nint calculate_sum_0800a154(undefined4 result,int array)\n\n{\n  int sum;\n  \n  sum = *(int *)(array + -4) + -4;\n  if (*(int *)(array + -4) < 0) {\n    sum = sum + *(int *)(array + sum);\n  }\n  return sum;\n}\n\n",
            "current_name": "calculate_sum_0800a154",
            "entrypoint": "0x0800a154",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800a154": "calculate_sum_0800a154",
                "iVar": "index",
                "iVar1": "sum",
                "param_1": "result",
                "param_2": "array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800a168": {
            "additional_data": {
                "DAT_20000a38": {
                    "1": "assigned_value"
                },
                "FUN_0800a168": {
                    "1": "initialize_and_assign_value_if_error",
                    "3": "initialize_and_assign",
                    "4": "initialize_and_store_result",
                    "5": "initialize_and_assign_value",
                    "6": "initialize_and_check_error"
                },
                "iVar1": {
                    "1": "return_value",
                    "15": "init_result",
                    "2": "result_code",
                    "9": "result"
                },
                "param_1": {
                    "1": "output_pointer",
                    "13": "result",
                    "2": "result_pointer",
                    "3": "output",
                    "6": "output_value"
                },
                "param_2": {
                    "1": "input_param_1",
                    "14": "arg1",
                    "2": "param_a",
                    "3": "param_2"
                },
                "param_3": {
                    "1": "init_param_2",
                    "14": "arg2",
                    "2": "param_b",
                    "3": "input_2"
                },
                "param_4": {
                    "1": "value_3",
                    "14": "arg3",
                    "2": "param_c",
                    "3": "param_4"
                }
            },
            "called": [
                "FUN_08008858"
            ],
            "calling": [
                "FUN_0800a020"
            ],
            "code": "\nvoid initialize_and_check_error_0800a168(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int init_result;\n  \n  DAT_20000a38 = 0;\n  init_result = initialize_08008858(arg1,arg2,arg3,arg3,arg3);\n  if ((init_result == -1) && (DAT_20000a38 != 0)) {\n    *result = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_and_check_error_0800a168",
            "entrypoint": "0x0800a168",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800a168": "initialize_and_check_error_0800a168",
                "iVar1": "init_result",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800a18c": {
            "additional_data": {
                "DAT_20000994": {
                    "1": "var12",
                    "10": "data_94",
                    "2": "flag12"
                },
                "DAT_20000998": {
                    "1": "var11",
                    "10": "data_98",
                    "2": "flag11"
                },
                "DAT_2000099c": {
                    "1": "var10",
                    "10": "data_9c",
                    "2": "flag10"
                },
                "DAT_200009a0": {
                    "1": "var9",
                    "10": "data_a0",
                    "2": "flag9"
                },
                "DAT_200009a4": {
                    "1": "var8",
                    "10": "data_a4",
                    "2": "flag8"
                },
                "DAT_200009a8": {
                    "1": "var7",
                    "10": "data_a8",
                    "2": "flag7"
                },
                "DAT_200009ac": {
                    "1": "var6",
                    "10": "data_ac",
                    "2": "flag6"
                },
                "DAT_200009b0": {
                    "1": "var5",
                    "10": "data_b0",
                    "2": "flag5"
                },
                "DAT_200009b4": {
                    "1": "var4",
                    "10": "data_b4",
                    "2": "flag4"
                },
                "DAT_200009b8": {
                    "1": "var3",
                    "10": "data_b8",
                    "2": "flag3"
                },
                "DAT_200009bc": {
                    "1": "var2",
                    "10": "data_bc",
                    "2": "flag2"
                },
                "DAT_200009c0": {
                    "1": "var1",
                    "10": "data_c0",
                    "2": "flag1"
                },
                "FUN_0800a18c": {
                    "1": "process_jumptable",
                    "10": "process_and_jump",
                    "18": "process_data"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "1": "instruction_table",
                    "16": "jump_table",
                    "3": "process_func",
                    "4": "process_function"
                },
                "process_data_08009b5c": {
                    "7": "process_data"
                }
            },
            "called": [
                "FUN_08009b5c"
            ],
            "calling": [
                "FUN_08009084"
            ],
            "code": "\nvoid process_data_0800a18c(void)\n\n{\n  code *jump_table;\n  \n  jump_table = process_data_0800a18c;\n  process_data_0800a18c();\n  if (-1 < DAT_200009c0 << 0x1f) {\n    DAT_200009c0 = 1;\n  }\n  if (-1 < DAT_200009bc << 0x1f) {\n    DAT_200009bc = 1;\n  }\n  if (-1 < DAT_200009b8 << 0x1f) {\n    DAT_200009b8 = 1;\n  }\n  if (-1 < DAT_200009b4 << 0x1f) {\n    DAT_200009b4 = 1;\n  }\n  if (-1 < DAT_200009b0 << 0x1f) {\n    DAT_200009b0 = 1;\n  }\n  if (-1 < DAT_200009ac << 0x1f) {\n    DAT_200009ac = 1;\n  }\n  if (-1 < DAT_200009a8 << 0x1f) {\n    DAT_200009a8 = 1;\n  }\n  if (-1 < DAT_200009a4 << 0x1f) {\n    DAT_200009a4 = 1;\n  }\n  if (-1 < DAT_200009a0 << 0x1f) {\n    DAT_200009a0 = 1;\n  }\n  if (-1 < DAT_2000099c << 0x1f) {\n    DAT_2000099c = 1;\n  }\n  if (-1 < DAT_20000998 << 0x1f) {\n    DAT_20000998 = 1;\n  }\n  if (-1 < DAT_20000994 << 0x1f) {\n    DAT_20000994 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x0800a224. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "current_name": "process_data_0800a18c",
            "entrypoint": "0x0800a18c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800a18c": "process_data_0800a18c",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "process_data_08009b5c": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800a424": {
            "called": [],
            "calling": [
                "FUN_0800010c",
                "FUN_08009148"
            ],
            "code": "\nvoid FUNC_0800a424(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800a424",
            "entrypoint": "0x0800a424",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800a424": "FUNC_0800a424"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800a430": {
            "called": [],
            "calling": [],
            "code": "\nvoid FUNC_0800a430(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800a430",
            "entrypoint": "0x0800a430",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800a430": "FUNC_0800a430"
            },
            "skipped": true,
            "tags": []
        },
        "entry": {
            "called": [
                "FUN_080073ec",
                "FUN_08009148",
                "FUN_08008f1c"
            ],
            "calling": [],
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_200000f4; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800ac18);\n  }\n  for (puVar2 = &DAT_200000f4; puVar2 < &DAT_20000a3c; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_registers_080073ec();\n  execute_functions_08009148();\n  UNRECOVERED_JUMPTABLE = (code *)0x800368a;\n  process_gateway_data_08008f1c();\n                    /* WARNING: Could not recover jumptable at 0x0800368a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "current_name": "entry",
            "entrypoint": "0x08003658",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "thunk_FUN_0800887c": {
            "additional_data": {
                "1": {
                    "2": "result"
                },
                "<no_change>": {
                    "1": "<no_change>"
                },
                "<original_variable_name_1>": {
                    "1": "result"
                },
                "DAT_0800887c": {
                    "1": "result"
                },
                "get_one": {
                    "1": "get_status"
                },
                "return": {
                    "1": "result"
                },
                "return_value": {
                    "1": "result"
                },
                "thunk_FUN_0800887c": {
                    "1": "calculate_result",
                    "10": "get_return_value",
                    "2": "initialize_value",
                    "5": "get_status",
                    "7": "get_one"
                },
                "undefined4": {
                    "1": "result",
                    "2": "status",
                    "4": "int"
                }
            },
            "called": [
                "FUN_0800887c"
            ],
            "calling": [
                "FUN_08009fe8"
            ],
            "code": "\nint get_return_value_thunk_0800887c(void)\n\n{\n  result 1;\n}\n\n",
            "current_name": "get_return_value_thunk_0800887c",
            "entrypoint": "0x0800a01c",
            "imported": false,
            "improved": true,
            "renaming": {
                "return": "result",
                "thunk_FUN_0800887c": "get_return_value_thunk_0800887c",
                "undefined4": "int"
            },
            "skipped": false,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_0800010c",
            "FUN_08000178",
            "FUN_08000188",
            "FUN_080005e0",
            "FUN_08002400",
            "FUN_08002580",
            "FUN_0800267c",
            "FUN_080026f8",
            "FUN_0800270c",
            "FUN_08002720",
            "FUN_0800291c",
            "FUN_08002a30",
            "FUN_08002c2c",
            "FUN_08002ec4",
            "FUN_08002f1e",
            "FUN_08002f2c",
            "FUN_08002f84",
            "FUN_08002f94",
            "FUN_08002fa0",
            "FUN_08002fa8",
            "FUN_08002fba",
            "FUN_08002fc2",
            "FUN_0800307a",
            "FUN_0800314e",
            "FUN_08003154",
            "FUN_0800322c",
            "FUN_080032bc",
            "FUN_08003306",
            "FUN_08003346",
            "FUN_08003350",
            "FUN_08003366",
            "FUN_08003370",
            "FUN_08003376",
            "FUN_080033a8",
            "FUN_0800344a",
            "FUN_080036ac",
            "FUN_08003748",
            "FUN_08003760",
            "FUN_080038dc",
            "FUN_080038e4",
            "FUN_08003a1c",
            "FUN_08003f0c",
            "FUN_08003f30",
            "FUN_08003f94",
            "FUN_08003fb0",
            "FUN_08003fd8",
            "FUN_08004004",
            "FUN_08004024",
            "FUN_08004046",
            "FUN_08004050",
            "FUN_080040e8",
            "FUN_080042d4",
            "FUN_080042e2",
            "FUN_0800430c",
            "FUN_08004396",
            "FUN_080043a2",
            "FUN_0800457c",
            "FUN_0800459c",
            "FUN_08004728",
            "FUN_080047f4",
            "FUN_080048c8",
            "FUN_08004954",
            "FUN_080049e0",
            "FUN_08004a24",
            "FUN_08004a76",
            "FUN_08004b82",
            "FUN_08004ccc",
            "FUN_08004d6c",
            "FUN_08004e3c",
            "FUN_0800542a",
            "FUN_08005430",
            "FUN_08005434",
            "FUN_08005840",
            "FUN_08005a1c",
            "FUN_08005a68",
            "FUN_08005cec",
            "FUN_08005d48",
            "FUN_08005dac",
            "FUN_08005fe8",
            "FUN_080060c4",
            "FUN_08006262",
            "FUN_08006420",
            "FUN_080064b0",
            "FUN_080064cc",
            "FUN_0800688e",
            "FUN_080068d6",
            "FUN_08006b1c",
            "FUN_08006b28",
            "FUN_08006b3e",
            "FUN_08006b5c",
            "FUN_08006b7c",
            "FUN_08006bb8",
            "FUN_08006d24",
            "FUN_08007306",
            "FUN_08007332",
            "FUN_0800735a",
            "FUN_0800738a",
            "FUN_080073ae",
            "FUN_080073c0",
            "FUN_080073e8",
            "FUN_080073ec",
            "FUN_08007438",
            "FUN_080074e0",
            "FUN_08007718",
            "FUN_08007744",
            "FUN_0800774a",
            "FUN_08007750",
            "FUN_08007ede",
            "FUN_08007f78",
            "FUN_080086e8",
            "FUN_08008804",
            "FUN_08008840",
            "FUN_08008846",
            "FUN_08008850",
            "FUN_08008854",
            "FUN_08008858",
            "FUN_08008868",
            "FUN_0800886c",
            "FUN_0800887c",
            "FUN_08008afa",
            "FUN_08008c20",
            "FUN_08008d00",
            "FUN_08008d18",
            "FUN_08008df8",
            "FUN_08008ef4",
            "FUN_08008f3c",
            "FUN_08009108",
            "FUN_08009148",
            "FUN_080091b0",
            "FUN_080091c6",
            "FUN_080091d8",
            "FUN_080095a8",
            "FUN_08009938",
            "FUN_08009954",
            "FUN_080099a4",
            "FUN_08009f2c",
            "thunk_FUN_0800887c",
            "FUN_0800a154"
        ],
        [
            "FUN_0800018c",
            "FUN_080004d4",
            "FUN_08001c08",
            "FUN_080026b0",
            "FUN_08002948",
            "FUN_08002ce0",
            "FUN_08002ddc",
            "FUN_08003106",
            "FUN_0800319e",
            "FUN_080031ce",
            "FUN_0800325a",
            "FUN_080033cc",
            "FUN_080036d8",
            "FUN_08003a20",
            "FUN_08003b8c",
            "FUN_08005460",
            "FUN_08005a28",
            "FUN_08005a48",
            "FUN_08005aa4",
            "FUN_08005cb4",
            "FUN_08006128",
            "FUN_08006186",
            "FUN_08006280",
            "FUN_080062f4",
            "FUN_08006390",
            "FUN_080063c0",
            "FUN_0800643c",
            "FUN_08006460",
            "FUN_080066e8",
            "FUN_08006ca8",
            "FUN_08007110",
            "FUN_0800723c",
            "FUN_08007246",
            "FUN_08007258",
            "FUN_080072d8",
            "FUN_080072f0",
            "FUN_08007320",
            "FUN_0800734a",
            "FUN_08007376",
            "FUN_08007708",
            "FUN_08007710",
            "FUN_0800771c",
            "FUN_08007736",
            "FUN_08007e74",
            "FUN_08007f0e",
            "FUN_08007f7c",
            "FUN_08007f8e",
            "FUN_08007fa0",
            "FUN_08007ff0",
            "FUN_08008020",
            "FUN_080085b8",
            "FUN_080085dc",
            "FUN_08008694",
            "FUN_0800870c",
            "FUN_08008730",
            "FUN_08008e14",
            "FUN_080090c2",
            "FUN_080091a0",
            "FUN_08009698",
            "FUN_08009918",
            "FUN_0800997e",
            "FUN_08009cdc",
            "FUN_08009fe8",
            "FUN_0800a0ec",
            "FUN_0800a110",
            "FUN_0800a130",
            "FUN_0800a168"
        ],
        [
            "FUN_08002a58",
            "FUN_08002c1e",
            "FUN_08002dbc",
            "FUN_08002df6",
            "FUN_08002efe",
            "FUN_08002f0a",
            "FUN_08003158",
            "FUN_080032a2",
            "FUN_08003474",
            "FUN_08003724",
            "FUN_08003aa0",
            "FUN_08003bd8",
            "FUN_08003ce8",
            "FUN_08003de4",
            "FUN_080045c0",
            "FUN_08004ac2",
            "FUN_08004aec",
            "FUN_08004f3c",
            "FUN_080058ac",
            "FUN_080058d2",
            "FUN_08005bb8",
            "FUN_08005df4",
            "FUN_08005e2e",
            "FUN_08005e6e",
            "FUN_08006060",
            "FUN_08006538",
            "FUN_080067ac",
            "FUN_08006932",
            "FUN_0800694c",
            "FUN_08006c60",
            "FUN_08006c7c",
            "FUN_08006e68",
            "FUN_08008600",
            "FUN_0800863c",
            "FUN_08008a24",
            "FUN_08008a6c",
            "FUN_08008abc",
            "FUN_08008d30",
            "FUN_08008f78",
            "FUN_08009270",
            "FUN_08009b5c",
            "FUN_08009e64",
            "FUN_0800a020",
            "FUN_0800a07a"
        ],
        [
            "FUN_08000be8",
            "FUN_08002ac0",
            "FUN_08002e26",
            "FUN_08002ed2",
            "FUN_08002ef2",
            "FUN_08002f14",
            "FUN_08002fca",
            "FUN_080035b8",
            "FUN_0800376c",
            "FUN_08003e20",
            "FUN_08005084",
            "FUN_080052f0",
            "FUN_08006092",
            "FUN_0800674e",
            "FUN_080069ec",
            "FUN_080071e4",
            "FUN_08008b66",
            "FUN_08008d8c",
            "FUN_08009190",
            "FUN_08009908",
            "FUN_08009d24",
            "FUN_08009eac"
        ],
        [
            "FUN_08000ef8",
            "FUN_080027f0",
            "FUN_0800288c",
            "FUN_08002acc",
            "FUN_08002e44",
            "FUN_08005188",
            "FUN_08006d80",
            "FUN_080072fa",
            "FUN_08008990"
        ],
        [
            "FUN_08001bf8",
            "FUN_08002b68",
            "FUN_08003002",
            "FUN_080036a2",
            "FUN_08008880"
        ],
        [
            "FUN_08000488",
            "FUN_08002c00",
            "FUN_08008f0e"
        ],
        [
            "FUN_08002c14"
        ],
        [
            "FUN_08001c18"
        ],
        [
            "FUN_080022f8"
        ],
        [
            "FUN_0800a18c"
        ],
        [
            "FUN_08009084"
        ],
        [
            "FUN_08009094"
        ],
        [
            "FUN_080042f0"
        ],
        [
            "FUN_08009a80",
            "FUN_08009c7c",
            "FUN_08009db0"
        ],
        [
            "FUN_08009d50"
        ],
        [
            "FUN_0800932c"
        ],
        [
            "FUN_08009358"
        ],
        [
            "FUN_0800937c"
        ],
        [
            "FUN_08009124",
            "FUN_080098d8"
        ],
        [
            "FUN_08007544",
            "FUN_08007594",
            "FUN_080077b0",
            "FUN_08008078",
            "FUN_080090cc"
        ],
        [
            "FUN_08002968",
            "FUN_080075dc",
            "FUN_080076e0",
            "FUN_080084b0",
            "FUN_08008c44"
        ],
        [
            "FUN_08002578",
            "FUN_08002a1c",
            "FUN_08003048",
            "FUN_08007118",
            "FUN_08007648",
            "FUN_08008500"
        ],
        [
            "FUN_0800242c",
            "FUN_08002644",
            "FUN_08002a26",
            "FUN_0800885c",
            "FUN_080088e0"
        ],
        [
            "FUN_08000214",
            "FUN_0800021a",
            "FUN_08000588",
            "FUN_080025ac",
            "FUN_0800a042"
        ],
        [
            "FUN_08002634"
        ],
        [
            "FUN_08000500"
        ],
        [
            "FUN_080005f8"
        ],
        [
            "FUN_08000a64",
            "FUN_08000aec"
        ],
        [
            "FUN_08001b48",
            "FUN_08001cd0"
        ],
        [
            "FUN_08008f1c"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 1160357
}