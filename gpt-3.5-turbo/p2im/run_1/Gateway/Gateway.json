{
    "functions": {
        "FUN_0800010c": {
            "entrypoint": "0x0800010c",
            "current_name": "initialize_variable_if_needed_0800010c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000118) */\n\nundefined4 initializeVariableIfNeeded_0800010c(undefined4 input)\n\n{\n  if ((char)DAT_200000f4 == '\\0') {\n    DAT_200000f4._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_0800010c": "initialize_variable_if_needed_0800010c",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "FUN_0800a424"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000178": {
            "entrypoint": "0x08000178",
            "current_name": "find_end_of_string_08000178",
            "code": "\nchar * find_end_of_string_08000178(char *input_string)\n\n{\n  char current_char;\n  char *next_char_ptr;\n  char *current_char_ptr;\n  \n  current_char_ptr = input_string;\n  do {\n    next_char_ptr = current_char_ptr + 1;\n    current_char = *current_char_ptr;\n    current_char_ptr = next_char_ptr;\n  } while (current_char != '\\0');\n  return next_char_ptr + (-1 - (int)input_string);\n}\n\n",
            "renaming": {
                "FUN_08000178": "find_end_of_string_08000178",
                "param_1": "input_string",
                "cVar1": "current_char",
                "pcVar2": "next_char_ptr",
                "pcVar3": "current_char_ptr"
            },
            "calling": [
                "FUN_08002e44",
                "FUN_080032a2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000188": {
            "entrypoint": "0x08000188",
            "current_name": "execute_software_interrupt_08000188",
            "code": "\nvoid executeSoftwareInterrupt_08000188(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000188": "execute_software_interrupt_08000188"
            },
            "calling": [
                "FUN_0800018c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800018c": {
            "entrypoint": "0x0800018c",
            "current_name": "execute_interrupt_0800018c",
            "code": "\nundefined4 execute_interrupt_0800018c(undefined4 data_1,undefined4 data_2,undefined4 data_3,undefined4 data_4)\n\n{\n  undefined4 interrupt_result;\n  \n  if (DAT_20000110 != 0) {\n    return 0;\n  }\n  interrupt_result = execute_software_interrupt_08000188(1,data_1,0,0,data_4);\n  return interrupt_result;\n}\n\n",
            "renaming": {
                "FUN_0800018c": "execute_interrupt_0800018c",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "data_3",
                "param_4": "data_4",
                "uVar1": "interrupt_result"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08000188"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000214": {
            "entrypoint": "0x08000214",
            "current_name": "process_extracted_data_08000214",
            "code": "\nvoid process_extracted_data_08000214(uint index,undefined4 value,undefined4 param_3,undefined4 param_4)\n\n{\n  bool is_valid;\n  int result;\n  \n  if (0x3b < (int)index) {\n    return;\n  }\n  result = extract_memory_byte_08002fa0(&DAT_200003d4,index,param_3,param_4,param_4);\n  if (result == 3) {\n    if (index < 0x3c) {\n      if ((&DAT_0800a908)[index] == -1) {\n        result = 0;\n      }\n      else {\n        result = check_param_080036ac();\n        if (result == 0) {\n          result = 0;\n        }\n        else {\n          result = check_param_080036ac((int)(char)(&DAT_0800a908)[index]);\n          if (result == 1) {\n            result = 0;\n          }\n          else {\n            result = compare_and_find_0800738a((int)(char)(&DAT_0800a908)[index],&DAT_0800a6cc);\n          }\n        }\n      }\n    }\n    else {\n      result = 0;\n    }\n    if (result != 0) {\n      process_extracted_data_08000214_080088e0(index,value);\n    }\n    assign_value_to_pointer_08002fc2(&DAT_200003d4,index,value);\n  }\n  else if (result == 4) {\n    if (index < 0x3c) {\n      if ((&DAT_0800a908)[index] == -1) {\n        is_valid = false;\n      }\n      else {\n        result = check_param_080036ac();\n        if (result == 0) {\n          is_valid = false;\n        }\n        else {\n          result = check_param_080036ac((int)(char)(&DAT_0800a908)[index]);\n          if (result == 1) {\n            is_valid = false;\n          }\n          else {\n            is_valid = true;\n          }\n        }\n      }\n    }\n    else {\n      is_valid = false;\n    }\n    if (is_valid) {\n      interpolate_and_update_values_080026b0(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[index] * 3,value);\n    }\n    assign_value_to_pointer_08002fc2(&DAT_200003d4,index,value);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000214": "process_extracted_data_08000214",
                "param_1": "index",
                "param_2": "value",
                "bVar1": "is_valid",
                "iVar2": "result"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_0800021a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800021a": {
            "entrypoint": "0x0800021a",
            "current_name": "process_data_0800021a",
            "code": "\nvoid processData_0800021a(uint dataIndex,undefined4 value,undefined4 paramA,undefined4 paramB)\n\n{\n  bool isDataValid;\n  int result;\n  \n  result = extract_memory_byte_08002fa0(&DAT_200003d4,dataIndex,paramA,paramB,paramB);\n  if (result == 3) {\n    if (dataIndex < 0x3c) {\n      if ((&DAT_0800a908)[dataIndex] == -1) {\n        result = 0;\n      }\n      else {\n        result = checkParam();\n        if (result == 0) {\n          result = 0;\n        }\n        else {\n          result = checkParam((int)(char)(&DAT_0800a908)[dataIndex]);\n          if (result == 1) {\n            result = 0;\n          }\n          else {\n            result = compareAndFind((int)(char)(&DAT_0800a908)[dataIndex],&DAT_0800a6cc);\n          }\n        }\n      }\n    }\n    else {\n      result = 0;\n    }\n    if (result != 0) {\n      processData_0800021a(dataIndex,value);\n    }\n    assignValueToPointer(&DAT_200003d4,dataIndex,value);\n  }\n  else if (result == 4) {\n    if (dataIndex < 0x3c) {\n      if ((&DAT_0800a908)[dataIndex] == -1) {\n        isDataValid = false;\n      }\n      else {\n        result = checkParam();\n        if (result == 0) {\n          isDataValid = false;\n        }\n        else {\n          result = checkParam((int)(char)(&DAT_0800a908)[dataIndex]);\n          if (result == 1) {\n            isDataValid = false;\n          }\n          else {\n            isDataValid = true;\n          }\n        }\n      }\n    }\n    else {\n      isDataValid = false;\n    }\n    if (isDataValid) {\n      interpolateAndUpdateValues(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[dataIndex] * 3,value);\n    }\n    assignValueToPointer(&DAT_200003d4,dataIndex,value);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800021a": "process_data_0800021a",
                "param_1": "dataIndex",
                "param_2": "value",
                "param_3": "paramA",
                "param_4": "paramB",
                "bVar1": "isDataValid",
                "iVar2": "result",
                "check_param_080036ac": "checkParam",
                "compare_and_find_0800738a": "compareAndFind",
                "process_extracted_data_080088e0": "processData",
                "assign_value_to_pointer_08002fc2": "assignValueToPointer",
                "interpolate_and_update_values_080026b0": "interpolateAndUpdateValues"
            },
            "calling": [
                "FUN_08000214"
            ],
            "called": [
                "FUN_08002fc2",
                "FUN_080036ac",
                "FUN_080088e0",
                "FUN_080026b0",
                "FUN_0800738a",
                "FUN_08002fa0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000488": {
            "entrypoint": "0x08000488",
            "current_name": "update_data_08000488",
            "code": "\nvoid updateData_08000488(uint index,int value)\n\n{\n  undefined4 convertedValue;\n  \n  if ((int)index < 0xe) {\n    if (value == 0) {\n      DAT_20000114 = DAT_20000114 & ~(1 << (index & 0xff));\n      return;\n    }\n    DAT_20000114 = 1 << (index & 0xff) | DAT_20000114;\n    if (DAT_20000171 == '\\0') {\n      convertedValue = convert_value_08008880();\n      process_with_data_08002ef2(&DAT_200003d4,index,convertedValue);\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000488": "update_data_08000488",
                "param_1": "index",
                "param_2": "value",
                "uVar1": "convertedValue"
            },
            "calling": [
                "FUN_080005f8"
            ],
            "called": [
                "FUN_08008880",
                "FUN_08002ef2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004d4": {
            "entrypoint": "0x080004d4",
            "current_name": "initialize_data_if_param_is_one_080004d4",
            "code": "\nvoid initializeDataIfParamIsOne_080004d4(int paramOne,int paramTwo)\n\n{\n  int loopCounter;\n  undefined *dataPointer;\n  \n  if (paramOne != 1) {\n    return;\n  }\n  if (paramTwo == 0xffff) {\n    dataPointer = &DAT_2000022c;\n    for (loopCounter = 0xb; -1 < loopCounter; loopCounter = loopCounter + -1) {\n      initialize_data_08002580(dataPointer);\n      dataPointer = dataPointer + 3;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004d4": "initialize_data_if_param_is_one_080004d4",
                "param_1": "paramOne",
                "param_2": "paramTwo",
                "iVar1": "loopCounter",
                "puVar2": "dataPointer"
            },
            "calling": [],
            "called": [
                "FUN_08002580"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000500": {
            "entrypoint": "0x08000500",
            "current_name": "update_servo_state_08000500",
            "code": "\nvoid updateServoState_08000500(int servoIndex,int memorySize,int processMemoryFlag,undefined4 undefinedParam)\n\n{\n  if (0xb < DAT_200001ed) {\n    processData(&DAT_200003d4,\"Max servos attached\",processMemoryFlag,undefinedParam,undefinedParam);\n    return;\n  }\n  if (DAT_2000011c == 0) {\n    (&DAT_200001f0)[servoIndex] = DAT_200001ed;\n    DAT_200001ed = DAT_200001ed + 1;\n  }\n  else {\n    (&DAT_200001f0)[servoIndex] = (&DAT_2000011f)[DAT_2000011c];\n    DAT_2000011c = DAT_2000011c - 1;\n  }\n  if ((0 < memorySize) && (0 < processMemoryFlag)) {\n    processMemory(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[servoIndex] * 3,servoIndex,memorySize,processMemoryFlag);\n    return;\n  }\n  processAndStoreMemory(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[servoIndex] * 3,servoIndex);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000500": "update_servo_state_08000500",
                "param_1": "servoIndex",
                "param_2": "memorySize",
                "param_3": "processMemoryFlag",
                "param_4": "undefinedParam",
                "process_data_08002f14": "processData",
                "process_memory_080025ac": "processMemory",
                "process_and_store_memory_08002634": "processAndStoreMemory"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "called": [
                "FUN_08002634",
                "FUN_080025ac",
                "FUN_08002f14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000588": {
            "entrypoint": "0x08000588",
            "current_name": "update_and_initialize_data_08000588",
            "code": "\nvoid updateAndInitializeData_08000588(int index)\n\n{\n  update_and_initialize_08002644(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[index] * 3);\n  if (((&DAT_200001f0)[index] == DAT_200001ed) && (DAT_200001ed != '\\0')) {\n    DAT_200001ed = DAT_200001ed + -1;\n  }\n  else if (DAT_200001ed != '\\0') {\n    DAT_2000011c = DAT_2000011c + 1;\n    (&DAT_2000011f)[DAT_2000011c] = (&DAT_200001f0)[index];\n  }\n  (&DAT_200001f0)[index] = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000588": "update_and_initialize_data_08000588",
                "param_1": "index"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "called": [
                "FUN_08002644"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e0": {
            "entrypoint": "0x080005e0",
            "current_name": "initialize_data_080005e0",
            "code": "\nvoid initializeData_080005e0(void)\n\n{\n  DAT_20000170 = 0;\n  DAT_20000004 = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005e0": "initialize_data_080005e0"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_08000aec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005f8": {
            "entrypoint": "0x080005f8",
            "current_name": "process_memory_operation_080005f8",
            "code": "\nvoid processMemoryOperation_080005f8(uint address,int operation)\n\n{\n  int byteValue;\n  char character;\n  bool isValid;\n  uint modifiedAddress;\n  \n  byteValue = extract_memory_byte_08002fa0(&DAT_200003d4,address);\n  if (byteValue != 0x7f) {\n    byteValue = extract_memory_byte_08002fa0(&DAT_200003d4,address);\n    if (byteValue == 6) {\n      if (DAT_20000170 == '\\0') {\n        character = '\\0';\n      }\n      else {\n        character = DAT_20000170;\n        if (operation == 6) {\n          character = '\\0';\n        }\n      }\n    }\n    else {\n      character = '\\0';\n    }\n    if (character != '\\0') {\n      initialize_data_080005e0();\n    }\n    if (address < 0x3c) {\n      if ((&DAT_0800a908)[address] == -1) {\n        isValid = false;\n      }\n      else {\n        byteValue = check_param_080036ac();\n        if (byteValue == 0) {\n          isValid = false;\n        }\n        else {\n          byteValue = check_param_080036ac((int)(char)(&DAT_0800a908)[address]);\n          if (byteValue == 1) {\n            isValid = false;\n          }\n          else if (operation == 4) {\n            isValid = false;\n          }\n          else {\n            isValid = true;\n          }\n        }\n      }\n    }\n    else {\n      isValid = false;\n    }\n    if (isValid) {\n      if ((byte)(&DAT_200001f0)[address] < 0xc) {\n        byteValue = calculate_bitwise_result_080026f8(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[address] * 3);\n      }\n      else {\n        byteValue = 0;\n      }\n      if (byteValue != 0) {\n        update_and_initialize_data_08000588(address);\n      }\n    }\n    modifiedAddress = address - 0x2e & 0xff;\n    if (modifiedAddress < 0xe) {\n      if (address < 0x3c) {\n        byteValue = (int)(char)(&DAT_0800a908)[address];\n      }\n      else {\n        byteValue = -1;\n      }\n      byteValue = check_param_080036ac(byteValue);\n      if (byteValue == 0) {\n        isValid = false;\n      }\n      else {\n        if (address < 0x3c) {\n          byteValue = (int)(char)(&DAT_0800a908)[address];\n        }\n        else {\n          byteValue = -1;\n        }\n        byteValue = check_param_080036ac(byteValue);\n        if (byteValue == 1) {\n          isValid = false;\n        }\n        else {\n          isValid = true;\n        }\n      }\n    }\n    else {\n      isValid = false;\n    }\n    if (isValid) {\n      update_data_08000488(modifiedAddress,operation == 2);\n    }\n    if (address < 0x3c) {\n      if ((&DAT_0800a908)[address] == -1) {\n        isValid = false;\n      }\n      else {\n        byteValue = check_param_080036ac();\n        if (byteValue == 0) {\n          isValid = false;\n        }\n        else {\n          byteValue = check_param_080036ac((int)(char)(&DAT_0800a908)[address]);\n          if (byteValue == 1) {\n            isValid = false;\n          }\n          else {\n            isValid = true;\n          }\n        }\n      }\n    }\n    else {\n      isValid = false;\n    }\n    if (isValid) {\n      if ((operation == 0) || (operation == 0xb)) {\n        (&DAT_20000174)[address >> 3] = (&DAT_20000174)[address >> 3] | (byte)(1 << (address & 7));\n      }\n      else {\n        (&DAT_20000174)[address >> 3] = (&DAT_20000174)[address >> 3] & ~(byte)(1 << (address & 7));\n      }\n    }\n    assign_value_to_pointer_08002fc2(&DAT_200003d4,address,0);\n    switch(operation) {\n    case 0:\n      if (address < 0x3c) {\n        if ((&DAT_0800a908)[address] == -1) {\n          isValid = false;\n        }\n        else {\n          byteValue = check_param_080036ac();\n          if (byteValue == 0) {\n            isValid = false;\n          }\n          else {\n            byteValue = check_param_080036ac((int)(char)(&DAT_0800a908)[address]);\n            if (byteValue == 1) {\n              isValid = false;\n            }\n            else {\n              isValid = true;\n            }\n          }\n        }\n      }\n      else {\n        isValid = false;\n      }\n      if (isValid) {\n        process_memory_08008990(address,0);\n        update_character_08002fa8(&DAT_200003d4,address,0);\n        return;\n      }\n      break;\n    case 1:\n      if (address < 0x3c) {\n        if ((&DAT_0800a908)[address] == -1) {\n          isValid = false;\n        }\n        else {\n          byteValue = check_param_080036ac();\n          if (byteValue == 0) {\n            isValid = false;\n          }\n          else {\n            byteValue = check_param_080036ac((int)(char)(&DAT_0800a908)[address]);\n            if (byteValue == 1) {\n              isValid = false;\n            }\n            else {\n              isValid = true;\n            }\n          }\n        }\n      }\n      else {\n        isValid = false;\n      }\n      if (isValid) {\n        byteValue = extract_memory_byte_08002fa0(&DAT_200003d4,address);\n        if (byteValue == 3) {\n          process_value_08008a24(address,0);\n        }\n        process_memory_08008990(address,1);\n        update_character_08002fa8(&DAT_200003d4,address,1);\n        return;\n      }\n      break;\n    case 2:\n      if (modifiedAddress < 0xe) {\n        if (address < 0x3c) {\n          byteValue = (int)(char)(&DAT_0800a908)[address];\n        }\n        else {\n          byteValue = -1;\n        }\n        byteValue = check_param_080036ac(byteValue);\n        if (byteValue == 0) {\n          isValid = false;\n        }\n        else {\n          if (address < 0x3c) {\n            byteValue = (int)(char)(&DAT_0800a908)[address];\n          }\n          else {\n            byteValue = -1;\n          }\n          byteValue = check_param_080036ac(byteValue);\n          if (byteValue == 1) {\n            isValid = false;\n          }\n          else {\n            isValid = true;\n          }\n        }\n      }\n      else {\n        isValid = false;\n      }\n      if (isValid) {\n        if (address < 0x3c) {\n          if ((&DAT_0800a908)[address] == -1) {\n            isValid = false;\n          }\n          else {\n            byteValue = check_param_080036ac();\n            if (byteValue == 0) {\n              isValid = false;\n            }\n            else {\n              byteValue = check_param_080036ac((int)(char)(&DAT_0800a908)[address]);\n              if (byteValue == 1) {\n                isValid = false;\n              }\n            }\n          }\n        }\n        else {\n          isValid = false;\n        }\n        if (isValid) {\n          process_memory_08008990(address,0);\n        }\n        update_character_08002fa8(&DAT_200003d4,address,2);\n        return;\n      }\n      break;\n    case 3:\n      if (address < 0x3c) {\n        if ((&DAT_0800a908)[address] == -1) {\n          byteValue = 0;\n        }\n        else {\n          byteValue = check_param_080036ac();\n          if (byteValue == 0) {\n            byteValue = 0;\n          }\n          else {\n            byteValue = check_param_080036ac((int)(char)(&DAT_0800a908)[address]);\n            if (byteValue == 1) {\n              byteValue = 0;\n            }\n            else {\n              byteValue = compare_and_find_0800738a((int)(char)(&DAT_0800a908)[address],&DAT_0800a6cc);\n            }\n          }\n        }\n      }\n      else {\n        byteValue = 0;\n      }\n      if (byteValue != 0) {\n        process_memory_08008990(address,1);\n        process_extracted_data_080088e0(address,0);\n        update_character_08002fa8(&DAT_200003d4,address,3);\n        return;\n      }\n      break;\n    case 4:\n      if (address < 0x3c) {\n        if ((&DAT_0800a908)[address] == -1) {\n          isValid = false;\n        }\n        else {\n          byteValue = check_param_080036ac();\n          if (byteValue == 0) {\n            isValid = false;\n          }\n          else {\n            byteValue = check_param_080036ac((int)(char)(&DAT_0800a908)[address]);\n            if (byteValue == 1) {\n              isValid = false;\n            }\n            else {\n              isValid = true;\n            }\n          }\n        }\n      }\n      else {\n        isValid = false;\n      }\n      if (isValid) {\n        update_character_08002fa8(&DAT_200003d4,address,4);\n        if (((byte)(&DAT_200001f0)[address] != 0xff) &&\n           (byteValue = calculate_bitwise_result_080026f8(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[address] * 3),\n           byteValue != 0)) {\n          isValid = false;\n        }\n        if (isValid) {\n          update_servo_state_08000500(address,0xffffffff);\n          return;\n        }\n      }\n      break;\n    default:\n      process_data_08002f14(&DAT_200003d4,\"Unknown pin mode\");\n      break;\n    case 6:\n      if (address < 0x3c) {\n        if ((&DAT_0800a908)[address] == -1) {\n          byteValue = 0;\n        }\n        else {\n          byteValue = check_param_080036ac();\n          if (byteValue == 0) {\n            byteValue = 0;\n          }\n          else {\n            byteValue = check_param_080036ac((int)(char)(&DAT_0800a908)[address]);\n            if (byteValue == 1) {\n              byteValue = 0;\n            }\n            else {\n              byteValue = compare_and_find_0800738a((int)(char)(&DAT_0800a908)[address],&DAT_0800a69c);\n              if (byteValue == 0) {\n                byteValue = compare_and_find_0800738a((int)(char)(&DAT_0800a908)[address],&DAT_0800a66c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        byteValue = 0;\n      }\n      if (byteValue != 0) {\n        update_character_08002fa8(&DAT_200003d4,address,6);\n        return;\n      }\n      break;\n    case 10:\n      break;\n    case 0xb:\n      if (address < 0x3c) {\n        if ((&DAT_0800a908)[address] == -1) {\n          isValid = false;\n        }\n        else {\n          byteValue = check_param_080036ac();\n          if (byteValue == 0) {\n            isValid = false;\n          }\n          else {\n            byteValue = check_param_080036ac((int)(char)(&DAT_0800a908)[address]);\n            if (byteValue == 1) {\n              isValid = false;\n            }\n            else {\n              isValid = true;\n            }\n          }\n        }\n      }\n      else {\n        isValid = false;\n      }\n      if (isValid) {\n        process_memory_08008990(address,2);\n        update_character_08002fa8(&DAT_200003d4,address,0xb);\n        assign_value_to_pointer_08002fc2(&DAT_200003d4,address,1);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005f8": "process_memory_operation_080005f8",
                "param_1": "address",
                "param_2": "operation",
                "iVar1": "byteValue",
                "cVar2": "character",
                "bVar3": "isValid",
                "uVar4": "modifiedAddress"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_08000a64",
                "FUN_08000aec"
            ],
            "called": [
                "FUN_080026f8",
                "FUN_08002fc2",
                "FUN_080036ac",
                "FUN_08002fa8",
                "FUN_080088e0",
                "FUN_08008a24",
                "FUN_080005e0",
                "FUN_08000588",
                "FUN_08000488",
                "FUN_08002f14",
                "FUN_0800738a",
                "FUN_08000500",
                "FUN_08002fa0",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a64": {
            "entrypoint": "0x08000a64",
            "current_name": "process_memory_operations_08000a64",
            "code": "\nvoid processMemoryOperations_08000a64(void)\n\n{\n  int result;\n  uint index;\n  \n  for (index = 0; index < 0x3c; index = index + 1 & 0xff) {\n    if (index < 0x3c) {\n      if ((&DAT_0800a908)[index] == -1) {\n        result = 0;\n      }\n      else {\n        result = checkParameter();\n        if (result == 0) {\n          result = 0;\n        }\n        else {\n          result = checkParameter((int)(char)(&DAT_0800a908)[index]);\n          if (result == 1) {\n            result = 0;\n          }\n          else {\n            result = compareAndFind((int)(char)(&DAT_0800a908)[index],&DAT_0800a69c);\n            if (result == 0) {\n              result = compareAndFind((int)(char)(&DAT_0800a908)[index],&DAT_0800a66c);\n            }\n          }\n        }\n      }\n    }\n    else {\n      result = 0;\n    }\n    if (result != 0) {\n      processMemoryOperation(index,6);\n    }\n  }\n  DAT_20000170 = 1;\n  initializePeripheral(&DAT_20000314);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000a64": "process_memory_operations_08000a64",
                "iVar1": "result",
                "uVar2": "index",
                "check_param_080036ac": "checkParameter",
                "compare_and_find_0800738a": "compareAndFind",
                "process_memory_operation_080005f8": "processMemoryOperation",
                "initialize_peripheral_08002a26": "initializePeripheral"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_080005f8",
                "FUN_080036ac",
                "FUN_08002a26",
                "FUN_0800738a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aec": {
            "entrypoint": "0x08000aec",
            "current_name": "initialize_memory_operations_08000aec",
            "code": "\nvoid initialize_memory_operations_08000aec(void)\n\n{\n  bool bVar1;\n  int iVar2;\n  uint index;\n  \n  DAT_20000171 = 1;\n  if (DAT_20000170 != '\\0') {\n    initialize_data();\n  }\n  for (index = 0; index < 5; index = index + 1 & 0xff) {\n    (&DAT_200001e8)[index] = 0;\n    (&DAT_20000174)[index] = 0;\n    (&DAT_20000180)[index] = 0;\n  }\n  for (index = 0; index < 0x3c; index = index + 1 & 0xff) {\n    if ((index - 0x2e & 0xff) < 0xe) {\n      if (index < 0x3c) {\n        iVar2 = (int)(char)(&DAT_0800a908)[index];\n      }\n      else {\n        iVar2 = -1;\n      }\n      iVar2 = check_param(iVar2);\n      if (iVar2 == 0) {\n        bVar1 = false;\n      }\n      else {\n        if (index < 0x3c) {\n          iVar2 = (int)(char)(&DAT_0800a908)[index];\n        }\n        else {\n          iVar2 = -1;\n        }\n        iVar2 = check_param(iVar2);\n        if (iVar2 == 1) {\n          bVar1 = false;\n        }\n        else {\n          bVar1 = true;\n        }\n      }\n    }\n    else {\n      bVar1 = false;\n    }\n    if (bVar1) {\n      process_memory_operation(index,2);\n    }\n    else {\n      if ((((index < 0x3c) && ((&DAT_0800a908)[index] != -1)) &&\n          (iVar2 = check_param(), iVar2 != 0)) &&\n         (iVar2 = check_param((int)(char)(&DAT_0800a908)[index]), iVar2 != 1)) {\n        bVar1 = true;\n      }\n      if (bVar1) {\n        process_memory_operation(index,1);\n      }\n    }\n    (&DAT_200001f0)[index] = 0xff;\n  }\n  DAT_20000114 = 0;\n  DAT_2000011c = 0;\n  DAT_200001ed = 0;\n  DAT_20000171 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000aec": "initialize_memory_operations_08000aec",
                "uVar3": "index",
                "initialize_data_080005e0": "initialize_data",
                "check_param_080036ac": "check_param",
                "process_memory_operation_080005f8": "process_memory_operation"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_080036ac",
                "FUN_080005f8",
                "FUN_080005e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000be8": {
            "entrypoint": "0x08000be8",
            "current_name": "execute_function_08000be8",
            "code": "\nvoid execute_function_08000be8(int index,uint mask,int flag,undefined4 param)\n\n{\n  undefined1 *data_ptr_1;\n  undefined1 *data_ptr_2;\n  \n  data_ptr_1 = &DAT_20000174;\n  data_ptr_2 = (undefined1 *)((byte)(&DAT_20000174)[index] & mask);\n  if ((flag != 0) ||\n     (data_ptr_1 = (undefined1 *)(uint)(byte)(&DAT_20000180)[index], data_ptr_2 != data_ptr_1)) {\n    execute_decoded_function_08002efe(&DAT_200003d4,index,data_ptr_2,data_ptr_1,param);\n    (&DAT_20000180)[index] = (char)data_ptr_2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000be8": "execute_function_08000be8",
                "param_1": "index",
                "param_2": "mask",
                "param_3": "flag",
                "param_4": "param",
                "puVar1": "data_ptr_1",
                "puVar2": "data_ptr_2"
            },
            "calling": [
                "FUN_08000ef8"
            ],
            "called": [
                "FUN_08002efe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ef8": {
            "entrypoint": "0x08000ef8",
            "current_name": "process_params_08000ef8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001ade) */\n/* WARNING: Removing unreachable block (ram,0x08001a4a) */\n/* WARNING: Removing unreachable block (ram,0x080019b6) */\n/* WARNING: Removing unreachable block (ram,0x08001912) */\n/* WARNING: Removing unreachable block (ram,0x08001866) */\n/* WARNING: Removing unreachable block (ram,0x080017d2) */\n/* WARNING: Removing unreachable block (ram,0x0800173e) */\n/* WARNING: Removing unreachable block (ram,0x0800169a) */\n/* WARNING: Removing unreachable block (ram,0x080015ee) */\n/* WARNING: Removing unreachable block (ram,0x0800155a) */\n/* WARNING: Removing unreachable block (ram,0x08001490) */\n/* WARNING: Removing unreachable block (ram,0x080014a2) */\n/* WARNING: Removing unreachable block (ram,0x080014e4) */\n/* WARNING: Removing unreachable block (ram,0x080014b0) */\n/* WARNING: Removing unreachable block (ram,0x080014ba) */\n/* WARNING: Removing unreachable block (ram,0x080014e8) */\n/* WARNING: Removing unreachable block (ram,0x080014c2) */\n/* WARNING: Removing unreachable block (ram,0x080014b6) */\n/* WARNING: Removing unreachable block (ram,0x08001496) */\n/* WARNING: Removing unreachable block (ram,0x08001430) */\n/* WARNING: Removing unreachable block (ram,0x08001376) */\n/* WARNING: Removing unreachable block (ram,0x080012e2) */\n/* WARNING: Removing unreachable block (ram,0x0800124e) */\n/* WARNING: Removing unreachable block (ram,0x080011b8) */\n/* WARNING: Removing unreachable block (ram,0x08001100) */\n/* WARNING: Removing unreachable block (ram,0x0800106c) */\n/* WARNING: Removing unreachable block (ram,0x08000fd8) */\n/* WARNING: Removing unreachable block (ram,0x08000f42) */\n/* WARNING: Removing unreachable block (ram,0x08000f8e) */\n/* WARNING: Removing unreachable block (ram,0x08001022) */\n/* WARNING: Removing unreachable block (ram,0x080010b6) */\n/* WARNING: Removing unreachable block (ram,0x0800114a) */\n/* WARNING: Removing unreachable block (ram,0x08001204) */\n/* WARNING: Removing unreachable block (ram,0x08001298) */\n/* WARNING: Removing unreachable block (ram,0x0800132c) */\n/* WARNING: Removing unreachable block (ram,0x080013c0) */\n/* WARNING: Removing unreachable block (ram,0x0800147c) */\n/* WARNING: Removing unreachable block (ram,0x08001510) */\n/* WARNING: Removing unreachable block (ram,0x080015a4) */\n/* WARNING: Removing unreachable block (ram,0x08001638) */\n/* WARNING: Removing unreachable block (ram,0x080016f4) */\n/* WARNING: Removing unreachable block (ram,0x08001788) */\n/* WARNING: Removing unreachable block (ram,0x0800181c) */\n/* WARNING: Removing unreachable block (ram,0x080018b0) */\n/* WARNING: Removing unreachable block (ram,0x0800196c) */\n/* WARNING: Removing unreachable block (ram,0x08001a00) */\n/* WARNING: Removing unreachable block (ram,0x08001a94) */\n/* WARNING: Removing unreachable block (ram,0x08001b28) */\n/* WARNING: Removing unreachable block (ram,0x080014ca) */\n\nvoid processParams_08000ef8(void)\n\n{\n  byte byteVar1;\n  int intVar;\n  bool boolVar;\n  byte result;\n  \n  byteVar1 = DAT_20000174;\n  if (DAT_200001e8 != '\\0') {\n    intVar = checkParam();\n    if (intVar == 0) {\n      result = 0;\n    }\n    else {\n      intVar = checkParam(3);\n      if (intVar == 1) {\n        result = 0;\n      }\n      else if ((byteVar1 & 1) == 0) {\n        result = 0;\n      }\n      else {\n        intVar = validateParam(0);\n        if (intVar == 0) {\n          result = 0;\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    intVar = checkParam();\n    if (intVar == 0) {\n      boolVar = false;\n    }\n    else {\n      intVar = checkParam(2);\n      if (intVar == 1) {\n        boolVar = false;\n      }\n      else if ((byteVar1 & 2) == 0) {\n        boolVar = false;\n      }\n      else {\n        intVar = validateParam(1);\n        if (intVar == 0) {\n          boolVar = false;\n        }\n        else {\n          boolVar = true;\n        }\n      }\n    }\n    if (boolVar) {\n      result = result | 2;\n    }\n    intVar = checkParam();\n    if (intVar == 0) {\n      boolVar = false;\n    }\n    else {\n      intVar = checkParam(10);\n      if (intVar == 1) {\n        boolVar = false;\n      }\n      else if ((byteVar1 & 4) == 0) {\n        boolVar = false;\n      }\n      else {\n        intVar = validateParam(2);\n        if (intVar == 0) {\n          boolVar = false;\n        }\n        else {\n          boolVar = true;\n        }\n      }\n    }\n    if (boolVar) {\n      result = result | 4;\n    }\n    intVar = checkParam();\n    if (intVar == 0) {\n      boolVar = false;\n    }\n    else {\n      intVar = checkParam(0x13);\n      if (intVar == 1) {\n        boolVar = false;\n      }\n      else if ((byteVar1 & 8) == 0) {\n        boolVar = false;\n      }\n      else {\n        intVar = validateParam(3);\n        if (intVar == 0) {\n          boolVar = false;\n        }\n        else {\n          boolVar = true;\n        }\n      }\n    }\n    if (boolVar) {\n      result = result | 8;\n    }\n    intVar = checkParam();\n    if (intVar == 0) {\n      boolVar = false;\n    }\n    else {\n      intVar = checkParam(0x15);\n      if (intVar == 1) {\n        boolVar = false;\n      }\n      else if ((byteVar1 & 0x10) == 0) {\n        boolVar = false;\n      }\n      else {\n        intVar = validateParam(4);\n        if (intVar == 0) {\n          boolVar = false;\n        }\n        else {\n          boolVar = true;\n        }\n      }\n    }\n    if (boolVar) {\n      result = result | 0x10;\n    }\n    intVar = checkParam();\n    if (intVar == 0) {\n      boolVar = false;\n    }\n    else {\n      intVar = checkParam(0x14);\n      if (intVar == 1) {\n        boolVar = false;\n      }\n      else if ((byteVar1 & 0x20) == 0) {\n        boolVar = false;\n      }\n      else {\n        intVar = validateParam(5);\n        if (intVar == 0) {\n          boolVar = false;\n        }\n        else {\n          boolVar = true;\n        }\n      }\n    }\n    if (boolVar) {\n      result = result | 0x20;\n    }\n    intVar = checkParam();\n    if (intVar == 0) {\n      boolVar = false;\n    }\n    else {\n      intVar = checkParam(0x1a);\n      if (intVar == 1) {\n        boolVar = false;\n      }\n      else if ((byteVar1 & 0x40) == 0) {\n        boolVar = false;\n      }\n      else {\n        intVar = validateParam(6);\n        if (intVar == 0) {\n          boolVar = false;\n        }\n        else {\n          boolVar = true;\n        }\n      }\n    }\n    if (boolVar) {\n      result = result | 0x40;\n    }\n    intVar = checkParam();\n    if (intVar == 0) {\n      boolVar = false;\n    }\n    else {\n      intVar = checkParam(8);\n      if (intVar == 1) {\n        boolVar = false;\n      }\n      else if ((byteVar1 & 0x80) == 0) {\n        boolVar = false;\n      }\n      else {\n        intVar = validateParam(7);\n        if (intVar == 0) {\n          boolVar = false;\n        }\n        else {\n          boolVar = true;\n        }\n      }\n    }\n    if (boolVar) {\n      result = result | 0x80;\n    }\n    executeFunction(0,result);\n  }\n  byteVar1 = DAT_20000175;\n  if (DAT_200001e9 != '\\0') {\n    intVar = checkParam();\n    if (intVar == 0) {\n      result = 0;\n    }\n    else {\n      intVar = checkParam(9);\n      if (intVar == 1) {\n        result = 0;\n      }\n      else if ((byteVar1 & 1) == 0) {\n        result = 0;\n      }\n      else {\n        intVar = validateParam(8);\n        if (intVar == 0) {\n          result = 0;\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    intVar = checkParam();\n    if (intVar == 0) {\n      boolVar = false;\n    }\n    else {\n      intVar = checkParam(0x27);\n      if (intVar == 1) {\n        boolVar = false;\n      }\n      else if ((byteVar1 & 2) == 0) {\n        boolVar = false;\n      }\n      else {\n        intVar = validateParam(9);\n        if (intVar == 0) {\n          boolVar = false;\n        }\n        else {\n          boolVar = true;\n        }\n      }\n    }\n    if (boolVar) {\n      result = result | 2;\n    }\n    intVar = checkParam();\n    if (intVar == 0) {\n      boolVar = false;\n    }\n    else {\n      intVar = checkParam(0x16);\n      if (intVar == 1) {\n        boolVar = false;\n      }\n      else if ((byteVar1 & 4) == 0) {\n        boolVar = false;\n      }\n      else {\n        intVar = validateParam(10);\n        if (intVar == 0) {\n          boolVar = false;\n        }\n        else {\n          boolVar = true;\n        }\n      }\n    }\n    if (boolVar) {\n      result = result | 4;\n    }\n    intVar = checkParam();\n    if (intVar == 0) {\n      boolVar = false;\n    }\n    else {\n      intVar = checkParam(7);\n      if (intVar == 1) {\n        boolVar = false;\n      }\n      else if ((byteVar1 & 8) == 0) {\n        boolVar = false;\n      }\n      else {\n        intVar = validateParam(0xb);\n        if (intVar == 0) {\n          boolVar = false;\n        }\n        else {\n          boolVar = true;\n        }\n      }\n    }\n    if (boolVar) {\n      result = result | 8;\n    }\n    intVar = checkParam();\n    if (intVar == 0) {\n      boolVar = false;\n    }\n    else {\n      intVar = checkParam(6);\n      if (intVar == 1) {\n        boolVar = false;\n      }\n      else if ((byteVar1 & 0x10) == 0) {\n        boolVar = false;\n      }\n      else {\n        intVar = validateParam(0xc);\n        if (intVar == 0) {\n          boolVar = false;\n        }\n        else {\n          boolVar = true;\n        }\n      }\n    }\n    if (boolVar) {\n      result = result | 0x10;\n    }\n    intVar = checkParam();\n    if (intVar == 0) {\n      boolVar = false;\n    }\n    else {\n      intVar = checkParam(5);\n      if (intVar == 1) {\n        boolVar = false;\n      }\n      else if ((byteVar1 & 0x20) == 0) {\n        boolVar = false;\n      }\n      else {\n        intVar = validateParam(0xd);\n        if (intVar == 0) {\n          boolVar = false;\n        }\n        else {\n          boolVar = true;\n        }\n      }\n    }\n    if (boolVar) {\n      result = result | 0x20;\n    }\n    intVar = checkParam();\n    if (intVar == 0) {\n      boolVar = false;\n    }\n    else {\n      intVar = checkParam(0x19);\n      if (intVar == 1) {\n        boolVar = false;\n      }\n      else if ((byteVar1 & 0x40) == 0) {\n        boolVar = false;\n      }\n      else {\n        intVar = validateParam(0xe);\n        if (intVar == 0) {\n          boolVar = false;\n        }\n        else {\n          boolVar = true;\n        }\n      }\n    }\n    if (boolVar) {\n      result = result | 0x40;\n    }\n    intVar = checkParam();\n    if (intVar == 0) {\n      boolVar = false;\n    }\n    else {\n      intVar = checkParam(0x18);\n      if (intVar == 1) {\n        boolVar = false;\n      }\n      else if ((byteVar1 & 0x80) == 0) {\n        boolVar = false;\n      }\n      else {\n        intVar = validateParam(0xf);\n        if (intVar == 0) {\n          boolVar = false;\n        }\n        else {\n          boolVar = true;\n        }\n      }\n    }\n    if (boolVar) {\n      result = result | 0x80;\n    }\n    executeFunction(1,result,0);\n  }\n  byteVar1 = DAT_20000176;\n  if (DAT_200001ea != '\\0') {\n    intVar = checkParam();\n    if (intVar == 0) {\n      result = 0;\n    }\n    else {\n      intVar = checkParam(0x2a);\n      if (intVar == 1) {\n        result = 0;\n      }\n      else if ((byteVar1 & 1) == 0) {\n        result = 0;\n      }\n      else {\n        intVar = validateParam(0x10);\n        if (intVar == 0) {\n          result = 0;\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    intVar = checkParam();\n    if (intVar == 0) {\n      boolVar = false;\n    }\n    else {\n      intVar = checkParam(0x2c);\n      if (intVar == 1) {\n        boolVar = false;\n      }\n      else if ((byteVar1 & 2) == 0) {\n        boolVar = false;\n      }\n      else {\n        intVar = validateParam(0x11);\n        if (intVar == 0) {\n          boolVar = false;\n        }\n        else {\n          boolVar = true;\n        }\n      }\n    }\n    if (boolVar) {\n      result = result | 2;\n    }\n    intVar = checkParam();\n    if (intVar == 0) {\n      boolVar = false;\n    }\n    else {\n      intVar = checkParam(0xd);\n      if (intVar == 1) {\n        boolVar = false;\n      }\n      else if ((byteVar1 & 8) == 0) {\n        boolVar = false;\n      }\n      else {\n        intVar = validateParam(0x13);\n        if (intVar == 0) {\n          boolVar = false;\n        }\n        else {\n          boolVar = true;\n        }\n      }\n    }\n    if (boolVar) {\n      result = result | 8;\n    }\n    intVar = checkParam();\n    if (intVar == 0) {\n      boolVar = false;\n    }\n    else {\n      intVar = checkParam(0xe);\n      if (intVar == 1) {\n        boolVar = false;\n      }\n      else if ((byteVar1 & 0x10) == 0) {\n        boolVar = false;\n      }\n      else {\n        intVar = validateParam(0x14);\n        if (intVar == 0) {\n          boolVar = false;\n        }\n        else {\n          boolVar = true;\n        }\n      }\n    }\n    if (boolVar) {\n      result = result | 0x10;\n    }\n    intVar = checkParam();\n    if (intVar == 0) {\n      boolVar = false;\n    }\n    else {\n      intVar = checkParam(0xf);\n      if (intVar == 1) {\n        boolVar = false;\n      }\n      else if ((byteVar1 & 0x20) == 0) {\n        boolVar = false;\n      }\n      else {\n        intVar = validateParam(0x15);\n        if (intVar == 0) {\n          boolVar = false;\n        }\n        else {\n          boolVar = true;\n        }\n      }\n    }\n    if (boolVar) {\n      result = result | 0x20;\n    }\n    intVar = checkParam();\n    if (intVar == 0) {\n      boolVar = false;\n    }\n    else {\n      intVar = checkParam(0x17);\n      if (intVar == 1) {\n        boolVar = false;\n      }\n      else if ((byteVar1 & 0x40) == 0) {\n        boolVar = false;\n      }\n      else {\n        intVar = validateParam(0x16);\n        if (intVar == 0) {\n          boolVar = false;\n        }\n        else {\n          boolVar = true;\n        }\n      }\n    }\n    if (boolVar) {\n      result = result | 0x40;\n    }\n    intVar = checkParam();\n    if (intVar == 0) {\n      boolVar = false;\n    }\n    else {\n      intVar = checkParam(0x2d);\n      if (intVar == 1) {\n        boolVar = false;\n      }\n      else if ((byteVar1 & 0x80) == 0) {\n        boolVar = false;\n      }\n      else {\n        intVar = validateParam(0x17);\n        if (intVar == 0) {\n          boolVar = false;\n        }\n        else {\n          boolVar = true;\n        }\n      }\n    }\n    if (boolVar) {\n      result = result | 0x80;\n    }\n    executeFunction(2,result,0);\n  }\n  byteVar1 = DAT_20000177;\n  if (DAT_200001eb != '\\0') {\n    intVar = checkParam();\n    if (intVar == 0) {\n      result = 0;\n    }\n    else {\n      intVar = checkParam(0x2e);\n      if (intVar == 1) {\n        result = 0;\n      }\n      else if ((byteVar1 & 1) == 0) {\n        result = 0;\n      }\n      else {\n        intVar = validateParam(0x18);\n        if (intVar == 0) {\n          result = 0;\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    intVar = checkParam();\n    if (intVar == 0) {\n      boolVar = false;\n    }\n    else {\n      intVar = checkParam(0x2f);\n      if (intVar == 1) {\n        boolVar = false;\n      }\n      else if ((byteVar1 & 2) == 0) {\n        boolVar = false;\n      }\n      else {\n        intVar = validateParam(0x19);\n        if (intVar == 0) {\n          boolVar = false;\n        }\n        else {\n          boolVar = true;\n        }\n      }\n    }\n    if (boolVar) {\n      result = result | 2;\n    }\n    intVar = checkParam();\n    if (intVar == 0) {\n      boolVar = false;\n    }\n    else {\n      intVar = checkParam(0x30);\n      if (intVar == 1) {\n        boolVar = false;\n      }\n      else if ((byteVar1 & 4) == 0) {\n        boolVar = false;\n      }\n      else {\n        intVar = validateParam(0x1a);\n        if (intVar == 0) {\n          boolVar = false;\n        }\n        else {\n          boolVar = true;\n        }\n      }\n    }\n    if (boolVar) {\n      result = result | 4;\n    }\n    intVar = checkParam();\n    if (intVar == 0) {\n      boolVar = false;\n    }\n    else {\n      intVar = checkParam(0x31);\n      if (intVar == 1) {\n        boolVar = false;\n      }\n      else if ((byteVar1 & 8) == 0) {\n        boolVar = false;\n      }\n      else {\n        intVar = validateParam(0x1b);\n        if (intVar == 0) {\n          boolVar = false;\n        }\n        else {\n          boolVar = true;\n        }\n      }\n    }\n    if (boolVar) {\n      result = result | 8;\n    }\n    intVar = checkParam();\n    if (intVar == 0) {\n      boolVar = false;\n    }\n    else {\n      intVar = checkParam(0x22);\n      if (intVar == 1) {\n        boolVar = false;\n      }\n      else if ((byteVar1 & 0x10) == 0) {\n        boolVar = false;\n      }\n      else {\n        intVar = validateParam(0x1c);\n        if (intVar == 0) {\n          boolVar = false;\n        }\n        else {\n          boolVar = true;\n        }\n      }\n    }\n    if (boolVar) {\n      result = result | 0x10;\n    }\n    intVar = checkParam();\n    if (intVar == 0) {\n      boolVar = false;\n    }\n    else {\n      intVar = checkParam(0x23);\n      if (intVar == 1) {\n        boolVar = false;\n      }\n      else if ((byteVar1 & 0x20) == 0) {\n        boolVar = false;\n      }\n      else {\n        intVar = validateParam(0x1d);\n        if (intVar == 0) {\n          boolVar = false;\n        }\n        else {\n          boolVar = true;\n        }\n      }\n    }\n    if (boolVar) {\n      result = result | 0x20;\n    }\n    intVar = checkParam();\n    if (intVar == 0) {\n      boolVar = false;\n    }\n    else {\n      intVar = checkParam(0x2b);\n      if (intVar == 1) {\n        boolVar = false;\n      }\n      else if ((byteVar1 & 0x40) == 0) {\n        boolVar = false;\n      }\n      else {\n        intVar = validateParam(0x1e);\n        if (intVar == 0) {\n          boolVar = false;\n        }\n        else {\n          boolVar = true;\n        }\n      }\n    }\n    if (boolVar) {\n      result = result | 0x40;\n    }\n    intVar = checkParam();\n    if (intVar == 0) {\n      boolVar = false;\n    }\n    else {\n      intVar = checkParam(0x32);\n      if (intVar == 1) {\n        boolVar = false;\n      }\n      else if ((byteVar1 & 0x80) == 0) {\n        boolVar = false;\n      }\n      else {\n        intVar = validateParam(0x1f);\n        if (intVar == 0) {\n          boolVar = false;\n        }\n        else {\n          boolVar = true;\n        }\n      }\n    }\n    if (boolVar) {\n      result = result | 0x80;\n    }\n    executeFunction(3,result,0);\n  }\n  byteVar1 = DAT_20000178;\n  if (DAT_200001ec != '\\0') {\n    intVar = checkParam();\n    if (intVar == 0) {\n      result = 0;\n    }\n    else {\n      intVar = checkParam(0x29);\n      if (intVar == 1) {\n        result = 0;\n      }\n      else if ((byteVar1 & 1) == 0) {\n        result = 0;\n      }\n      else {\n        intVar = validateParam(0x20);\n        if (intVar == 0) {\n          result = 0;\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    intVar = checkParam();\n    if (intVar == 0) {\n      boolVar = false;\n    }\n    else {\n      intVar = checkParam(0x28);\n      if (intVar == 1) {\n        boolVar = false;\n      }\n      else if ((byteVar1 & 2) == 0) {\n        boolVar = false;\n      }\n      else {\n        intVar = validateParam(0x21);\n        if (intVar == 0) {\n          boolVar = false;\n        }\n        else {\n          boolVar = true;\n        }\n      }\n    }\n    if (boolVar) {\n      result = result | 2;\n    }\n    intVar = checkParam();\n    if (intVar == 0) {\n      boolVar = false;\n    }\n    else {\n      intVar = checkParam(0x26);\n      if (intVar == 1) {\n        boolVar = false;\n      }\n      else if ((byteVar1 & 4) == 0) {\n        boolVar = false;\n      }\n      else {\n        intVar = validateParam(0x22);\n        if (intVar == 0) {\n          boolVar = false;\n        }\n        else {\n          boolVar = true;\n        }\n      }\n    }\n    if (boolVar) {\n      result = result | 4;\n    }\n    intVar = checkParam();\n    if (intVar == 0) {\n      boolVar = false;\n    }\n    else {\n      intVar = checkParam(0x25);\n      if (intVar == 1) {\n        boolVar = false;\n      }\n      else if ((byteVar1 & 8) == 0) {\n        boolVar = false;\n      }\n      else {\n        intVar = validateParam(0x23);\n        if (intVar == 0) {\n          boolVar = false;\n        }\n        else {\n          boolVar = true;\n        }\n      }\n    }\n    if (boolVar) {\n      result = result | 8;\n    }\n    intVar = checkParam();\n    if (intVar == 0) {\n      boolVar = false;\n    }\n    else {\n      intVar = checkParam(0xc);\n      if (intVar == 1) {\n        boolVar = false;\n      }\n      else if ((byteVar1 & 0x10) == 0) {\n        boolVar = false;\n      }\n      else {\n        intVar = validateParam(0x24);\n        if (intVar == 0) {\n          boolVar = false;\n        }\n        else {\n          boolVar = true;\n        }\n      }\n    }\n    if (boolVar) {\n      result = result | 0x10;\n    }\n    intVar = checkParam();\n    if (intVar == 0) {\n      boolVar = false;\n    }\n    else {\n      intVar = checkParam(0xb);\n      if (intVar == 1) {\n        boolVar = false;\n      }\n      else if ((byteVar1 & 0x20) == 0) {\n        boolVar = false;\n      }\n      else {\n        intVar = validateParam(0x25);\n        if (intVar == 0) {\n          boolVar = false;\n        }\n        else {\n          boolVar = true;\n        }\n      }\n    }\n    if (boolVar) {\n      result = result | 0x20;\n    }\n    intVar = checkParam();\n    if (intVar == 0) {\n      boolVar = false;\n    }\n    else {\n      intVar = checkParam(0x1c);\n      if (intVar == 1) {\n        boolVar = false;\n      }\n      else if ((byteVar1 & 0x40) == 0) {\n        boolVar = false;\n      }\n      else {\n        intVar = validateParam(0x26);\n        if (intVar == 0) {\n          boolVar = false;\n        }\n        else {\n          boolVar = true;\n        }\n      }\n    }\n    if (boolVar) {\n      result = result | 0x40;\n    }\n    intVar = checkParam();\n    if (intVar == 0) {\n      boolVar = false;\n    }\n    else {\n      intVar = checkParam(0x1b);\n      if (intVar == 1) {\n        boolVar = false;\n      }\n      else if ((byteVar1 & 0x80) == 0) {\n        boolVar = false;\n      }\n      else {\n        intVar = validateParam(0x27);\n        if (intVar == 0) {\n          boolVar = false;\n        }\n        else {\n          boolVar = true;\n        }\n      }\n    }\n    if (boolVar) {\n      result = result | 0x80;\n    }\n    executeFunction(4,result,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ef8": "process_params_08000ef8",
                "bVar1": "byteVar1",
                "iVar2": "intVar",
                "bVar3": "boolVar",
                "bVar4": "result",
                "check_param_080036ac": "checkParam",
                "validate_parameter_08008a6c": "validateParam",
                "execute_function_08000be8": "executeFunction"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [
                "FUN_080036ac",
                "FUN_08008a6c",
                "FUN_08000be8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b48": {
            "entrypoint": "0x08001b48",
            "current_name": "initialize_gateway_08001b48",
            "code": "\nvoid initializeGateway_08001b48(void)\n\n{\n  extractFileName(&DAT_200003d4,\"/home/bo/p2im/p2im-real_firmware_scratch/Gateway/StandardFirmata.ino\",\n               2,5);\n  updateData(&DAT_200003d4,0xe0,0x8000215);\n  updateData(&DAT_200003d4,0x90,&LAB_080002ec_1);\n  updateData(&DAT_200003d4,0xc0,0x8000489);\n  updateData(&DAT_200003d4,0xd0,&LAB_08000c18_1);\n  updateData(&DAT_200003d4,0xf4,0x80005f9);\n  updateData(&DAT_200003d4,0xf5,&LAB_080001a8_1);\n  setDataRegister(&DAT_200003d4,0xf0,0x8001cd1);\n  setParamIfEqual(&DAT_200003d4,0xff,0x8000aed);\n  initializeSerialAndDataProcessing(&DAT_200003d4,0xe100);\n  initializeMemoryOperations();\n  executeInterrupt(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001b48": "initialize_gateway_08001b48",
                "extract_file_name_08002e44": "extractFileName",
                "update_data_08002f2c": "updateData",
                "set_data_register_08002f94": "setDataRegister",
                "set_param_if_equal_08002f84": "setParamIfEqual",
                "initialize_serial_and_data_processing_08003048": "initializeSerialAndDataProcessing",
                "initialize_memory_operations_08000aec": "initializeMemoryOperations",
                "execute_interrupt_0800018c": "executeInterrupt"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [
                "FUN_08003048",
                "FUN_08000aec",
                "FUN_08002f2c",
                "FUN_08002e44",
                "FUN_0800018c",
                "FUN_08002f94",
                "FUN_08002f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001bf8": {
            "entrypoint": "0x08001bf8",
            "current_name": "copy_and_assign_data_08001bf8",
            "code": "\nvoid copyAndAssignData_08001bf8(undefined4 sourceData,undefined4 param_2,undefined4 destinationData,undefined4 size)\n\n{\n  copy_or_allocate_and_assign_data_0800288c(&DAT_20000314,sourceData,destinationData,size,size);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001bf8": "copy_and_assign_data_08001bf8",
                "param_1": "sourceData",
                "param_3": "destinationData",
                "param_4": "size"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_0800288c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c08": {
            "entrypoint": "0x08001c08",
            "current_name": "read_byte_from_memory_08001c08",
            "code": "\nundefined readByteFromMemory_08001c08(void)\n\n{\n  undefined byteValue;\n  \n  byteValue = read_byte_from_memory_08002720(&DAT_20000314);\n  return byteValue;\n}\n\n",
            "renaming": {
                "FUN_08001c08": "read_byte_from_memory_08001c08",
                "uVar1": "byteValue"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [
                "FUN_08002720"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c18": {
            "entrypoint": "0x08001c18",
            "current_name": "process_received_data_08001c18",
            "code": "\nvoid processReceivedData_08001c18(undefined4 deviceAddress,uint byteCount,int expectedCount,undefined4 registerAddress)\n\n{\n  undefined byte;\n  int receivedCount;\n  int remainingCount;\n  bool dataAvailable;\n  \n  if (byteCount == 0xffffffff) {\n    byteCount = 0;\n  }\n  else {\n    initialize_data_08002a30(&DAT_20000314,deviceAddress);\n    copy_and_assign_data_08001bf8(byteCount & 0xff);\n    check_and_update_values_08002a58(&DAT_20000314,registerAddress);\n  }\n  check_and_return_08002c14(&DAT_20000314,deviceAddress,expectedCount);\n  receivedCount = calculate_difference_0800270c(&DAT_20000314);\n  if (expectedCount < receivedCount) {\n    process_data_08002f14(&DAT_200003d4,\"I2C: Too many bytes received\");\n  }\n  else {\n    receivedCount = calculate_difference_0800270c(&DAT_20000314);\n    if (receivedCount < expectedCount) {\n      process_data_08002f14(&DAT_200003d4,\"I2C: Too few bytes received\");\n    }\n  }\n  DAT_20000130 = (undefined)deviceAddress;\n  DAT_20000131 = (undefined)byteCount;\n  receivedCount = 0;\n  while( true ) {\n    if (receivedCount < expectedCount) {\n      remainingCount = calculate_difference_0800270c(&DAT_20000314);\n      if (remainingCount == 0) {\n        dataAvailable = false;\n      }\n      else {\n        dataAvailable = true;\n      }\n    }\n    else {\n      dataAvailable = false;\n    }\n    if (!dataAvailable) break;\n    byte = read_byte_from_memory_08001c08();\n    (&DAT_20000132)[receivedCount] = byte;\n    receivedCount = receivedCount + 1;\n  }\n  process_data_08002f0a(&DAT_200003d4,0x77,expectedCount + 2U & 0xff,&DAT_20000130);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c18": "process_received_data_08001c18",
                "param_1": "deviceAddress",
                "param_2": "byteCount",
                "param_3": "expectedCount",
                "param_4": "registerAddress",
                "uVar1": "byte",
                "iVar2": "receivedCount",
                "iVar3": "remainingCount",
                "bVar4": "dataAvailable"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080022f8"
            ],
            "called": [
                "FUN_0800270c",
                "FUN_08002c14",
                "FUN_08002a58",
                "FUN_08002f0a",
                "FUN_08001c08",
                "FUN_08002f14",
                "FUN_08002a30",
                "FUN_08001bf8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cd0": {
            "entrypoint": "0x08001cd0",
            "current_name": "execute_code_08001cd0",
            "code": "\nvoid executeCode_08001cd0(undefined4 command,int length,byte *data,undefined4 param)\n\n{\n  byte byte1;\n  byte byte2;\n  byte byte3;\n  undefined4 result;\n  byte byte4;\n  char char1;\n  int value;\n  int index1;\n  uint index2;\n  uint index3;\n  int index4;\n  bool flag;\n  \n  switch(command) {\n  case 0x69:\n    execute_code_08002f1e(&DAT_200003d4,0xf0);\n    execute_code_08002f1e(&DAT_200003d4,0x6a);\n    for (index2 = 0; index2 < 0x3c; index2 = index2 + 1 & 0xff) {\n      index3 = index2 - 0x2e & 0xff;\n      if (index3 < 0xe) {\n        if (index2 < 0x3c) {\n          value = (int)(char)(&DAT_0800a908)[index2];\n        }\n        else {\n          value = -1;\n        }\n        value = check_param_080036ac(value);\n        if (value == 0) {\n          index3 = 0x7f;\n        }\n        else {\n          if (index2 < 0x3c) {\n            value = (int)(char)(&DAT_0800a908)[index2];\n          }\n          else {\n            value = -1;\n          }\n          value = check_param_080036ac(value);\n          if (value == 1) {\n            index3 = 0x7f;\n          }\n        }\n      }\n      else {\n        index3 = 0x7f;\n      }\n      execute_code_08002f1e(&DAT_200003d4,index3);\n    }\n    execute_code_08002f1e(&DAT_200003d4,0xf7);\n    break;\n  case 0x6b:\n    execute_code_08002f1e(&DAT_200003d4,0xf0);\n    execute_code_08002f1e(&DAT_200003d4,0x6c);\n    for (index2 = 0; index2 < 0x3c; index2 = index2 + 1 & 0xff) {\n      if (index2 < 0x3c) {\n        if ((&DAT_0800a908)[index2] == -1) {\n          flag = false;\n        }\n        else {\n          value = check_param_080036ac();\n          if (value == 0) {\n            flag = false;\n          }\n          else {\n            value = check_param_080036ac((int)(char)(&DAT_0800a908)[index2]);\n            if (value == 1) {\n              flag = false;\n            }\n            else {\n              flag = true;\n            }\n          }\n        }\n      }\n      else {\n        flag = false;\n      }\n      if (flag) {\n        execute_code_08002f1e(&DAT_200003d4,0);\n        execute_code_08002f1e(&DAT_200003d4,1);\n        execute_code_08002f1e(&DAT_200003d4,0xb);\n        execute_code_08002f1e(&DAT_200003d4,1);\n        execute_code_08002f1e(&DAT_200003d4,1);\n        execute_code_08002f1e(&DAT_200003d4,1);\n      }\n      if ((index2 - 0x2e & 0xff) < 0xe) {\n        if (index2 < 0x3c) {\n          value = (int)(char)(&DAT_0800a908)[index2];\n        }\n        else {\n          value = -1;\n        }\n        value = check_param_080036ac(value);\n        if (value == 0) {\n          flag = false;\n        }\n        else {\n          if (index2 < 0x3c) {\n            value = (int)(char)(&DAT_0800a908)[index2];\n          }\n          else {\n            value = -1;\n          }\n          value = check_param_080036ac(value);\n          if (value == 1) {\n            flag = false;\n          }\n          else {\n            flag = true;\n          }\n        }\n      }\n      else {\n        flag = false;\n      }\n      if (flag) {\n        execute_code_08002f1e(&DAT_200003d4,2);\n        execute_code_08002f1e(&DAT_200003d4,10);\n      }\n      if (index2 < 0x3c) {\n        if ((&DAT_0800a908)[index2] == -1) {\n          value = 0;\n        }\n        else {\n          value = check_param_080036ac();\n          if (value == 0) {\n            value = 0;\n          }\n          else {\n            value = check_param_080036ac((int)(char)(&DAT_0800a908)[index2]);\n            if (value == 1) {\n              value = 0;\n            }\n            else {\n              value = compare_and_find_0800738a((int)(char)(&DAT_0800a908)[index2],&DAT_0800a6cc);\n            }\n          }\n        }\n      }\n      else {\n        value = 0;\n      }\n      if (value != 0) {\n        execute_code_08002f1e(&DAT_200003d4,3);\n        execute_code_08002f1e(&DAT_200003d4,8);\n      }\n      if (index2 < 0x3c) {\n        if ((&DAT_0800a908)[index2] == -1) {\n          flag = false;\n        }\n        else {\n          value = check_param_080036ac();\n          if (value == 0) {\n            flag = false;\n          }\n          else {\n            value = check_param_080036ac((int)(char)(&DAT_0800a908)[index2]);\n            if (value == 1) {\n              flag = false;\n            }\n            else {\n              flag = true;\n            }\n          }\n        }\n      }\n      else {\n        flag = false;\n      }\n      if (flag) {\n        execute_code_08002f1e(&DAT_200003d4,4);\n        execute_code_08002f1e(&DAT_200003d4,0xe);\n      }\n      if (index2 < 0x3c) {\n        if ((&DAT_0800a908)[index2] == -1) {\n          value = 0;\n        }\n        else {\n          value = check_param_080036ac();\n          if (value == 0) {\n            value = 0;\n          }\n          else {\n            value = check_param_080036ac((int)(char)(&DAT_0800a908)[index2]);\n            if (value == 1) {\n              value = 0;\n            }\n            else {\n              value = compare_and_find_0800738a((int)(char)(&DAT_0800a908)[index2],&DAT_0800a69c);\n              if (value == 0) {\n                value = compare_and_find_0800738a((int)(char)(&DAT_0800a908)[index2],&DAT_0800a66c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        value = 0;\n      }\n      if (value != 0) {\n        execute_code_08002f1e(&DAT_200003d4,6);\n        execute_code_08002f1e(&DAT_200003d4,1);\n      }\n      execute_code_08002f1e(&DAT_200003d4,0x7f);\n    }\n    execute_code_08002f1e(&DAT_200003d4,0xf7);\n    return;\n  case 0x6d:\n    if (length != 0) {\n      byte1 = *data;\n      execute_code_08002f1e(&DAT_200003d4,0xf0);\n      execute_code_08002f1e(&DAT_200003d4,0x6e);\n      execute_code_08002f1e(&DAT_200003d4,byte1);\n      if (byte1 < 0x3c) {\n        result = extract_memory_byte_08002fa0(&DAT_200003d4,byte1);\n        execute_code_08002f1e(&DAT_200003d4,result);\n        index2 = get_value_from_offset_08002fba(&DAT_200003d4,byte1);\n        execute_code_08002f1e(&DAT_200003d4,index2 & 0x7f);\n        index2 = get_value_from_offset_08002fba(&DAT_200003d4,byte1);\n        if ((index2 & 0xff80) != 0) {\n          value = get_value_from_offset_08002fba(&DAT_200003d4,byte1);\n          execute_code_08002f1e(&DAT_200003d4,(uint)(value << 0x12) >> 0x19);\n        }\n        index2 = get_value_from_offset_08002fba(&DAT_200003d4,byte1);\n        if ((index2 & 0xc000) != 0) {\n          value = get_value_from_offset_08002fba(&DAT_200003d4,byte1);\n          execute_code_08002f1e(&DAT_200003d4,(uint)(value << 0xb) >> 0x19);\n        }\n      }\n      execute_code_08002f1e(&DAT_200003d4,0xf7);\n      return;\n    }\n    break;\n  case 0x6f:\n    if (1 < length) {\n      index2 = (uint)data[1];\n      if (2 < length) {\n        index2 = index2 | (uint)data[2] << 7;\n      }\n      if (3 < length) {\n        index2 = index2 | (uint)data[3] << 0xe;\n      }\n      process_extracted_data_08000214(*data,index2);\n      return;\n    }\n    break;\n  case 0x70:\n    if (4 < length) {\n      index2 = (uint)*data;\n      byte1 = data[1];\n      byte4 = data[2];\n      byte2 = data[3];\n      byte3 = data[4];\n      if (index2 < 0x3c) {\n        if ((&DAT_0800a908)[index2] == -1) {\n          flag = false;\n        }\n        else {\n          value = check_param_080036ac();\n          if (value == 0) {\n            flag = false;\n          }\n          else {\n            value = check_param_080036ac((int)(char)(&DAT_0800a908)[index2]);\n            if (value == 1) {\n              flag = false;\n            }\n            else {\n              flag = true;\n            }\n          }\n        }\n      }\n      else {\n        flag = false;\n      }\n      if (flag) {\n        if ((byte)(&DAT_200001f0)[index2] < 0xc) {\n          value = calculate_bitwise_result_080026f8(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[index2] * 3);\n        }\n        else {\n          value = 0;\n        }\n        if (value != 0) {\n          update_and_initialize_data_08000588(index2);\n        }\n        update_servo_state_08000500(index2,(uint)byte1 + (uint)byte4 * 0x80,(uint)byte2 + (uint)byte3 * 0x80);\n        process_memory_operation_080005f8(index2,4);\n        return;\n      }\n    }\n    break;\n  case 0x76:\n    byte1 = data[1];\n    byte4 = byte1 & 0x18;\n    if ((byte1 & 0x20) != 0) {\n      process_data_08002f14(&DAT_200003d4,\"10-bit addressing not supported\",byte4,byte1,param);\n      return;\n    }\n    byte2 = *data;\n    flag = (byte1 & 0x40) == 0;\n    if (byte4 < 0x19) {\n      switch(byte4) {\n      case 0:\n        initialize_data_08002a30(&DAT_20000314,byte2);\n        for (index2 = 2; (int)index2 < length; index2 = index2 + 2 & 0xff) {\n          copy_and_assign_data_08001bf8(data[index2 + 1] * -0x80 + data[index2]);\n        }\n        update_values_08002ac0(&DAT_20000314);\n        return;\n      case 8:\n        if (length == 6) {\n          value = (uint)data[2] + (uint)data[3] * 0x80;\n          char1 = data[4] + data[5] * -0x80;\n        }\n        else {\n          char1 = data[2] + data[3] * -0x80;\n          value = -1;\n        }\n        process_received_data_08001c18(byte2,value,char1);\n        return;\n      case 0x10:\n        if (DAT_20000004 + 1 < 8) {\n          if (length == 6) {\n            value = (uint)data[2] + (uint)data[3] * 0x80;\n            char1 = data[4] + data[5] * -0x80;\n          }\n          else {\n            char1 = data[2] + data[3] * -0x80;\n            value = -1;\n          }\n          DAT_20000004 = DAT_20000004 + '\\x01';\n          index1 = (int)DAT_20000004;\n          index4 = index1 * 0xc;\n          (&DAT_20000188)[index4] = byte2;\n          (&DAT_2000018c)[index1 * 3] = value;\n          (&DAT_20000190)[index4] = char1;\n          (&DAT_20000191)[index4] = flag;\n          return;\n        }\n        process_data_08002f14(&DAT_200003d4,\"too many queries\",(int)DAT_20000004,flag,param);\n        return;\n      case 0x18:\n        if (DAT_20000004 < 1) {\n          DAT_20000004 = 0xff;\n          return;\n        }\n      }\n      for (index2 = 0; value = DAT_20000004 + 1, (int)index2 < value; index2 = index2 + 1 & 0xff) {\n        if (byte2 == (&DAT_20000188)[index2 * 0xc]) goto LAB_08001e66;\n      }\n      index2 = 0;\nLAB_08001e66:\n      for (; (int)index2 < value; index2 = index2 + 1 & 0xff) {\n        if (index2 < 8) {\n          index1 = (index2 + 1) * 0xc;\n          index4 = index2 * 0xc;\n          (&DAT_20000188)[index4] = (&DAT_20000188)[index1];\n          (&DAT_2000018c)[index2 * 3] = (&DAT_2000018c)[(index2 + 1) * 3];\n          (&DAT_20000190)[index4] = (&DAT_20000190)[index1];\n          (&DAT_20000191)[index4] = (&DAT_20000191)[index1];\n        }\n      }\n      DAT_20000004 = DAT_20000004 + -1;\n      return;\n    }\n    break;\n  case 0x78:\n    value = (uint)*data + (uint)data[1] * 0x80;\n    if ((1 < length) && (value != 0)) {\n      DAT_2000012c = value;\n    }\n    if (DAT_20000170 == '\\0') {\n      process_memory_operations_08000a64();\n      return;\n    }\n    break;\n  case 0x7a:\n    if ((1 < length) &&\n       (DAT_20000008 = (uint)*data + (uint)data[1] * 0x80, DAT_20000008 == 0)) {\n      DAT_20000008 = 1;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cd0": "execute_code_08001cd0",
                "param_1": "command",
                "param_2": "length",
                "param_3": "data",
                "param_4": "param",
                "bVar1": "byte1",
                "bVar2": "byte2",
                "bVar3": "byte3",
                "uVar4": "result",
                "bVar5": "byte4",
                "cVar6": "char1",
                "iVar7": "value",
                "iVar8": "index1",
                "uVar9": "index2",
                "uVar10": "index3",
                "iVar11": "index4",
                "bVar12": "flag"
            },
            "calling": [],
            "called": [
                "FUN_080026f8",
                "FUN_080036ac",
                "FUN_080005f8",
                "FUN_08002ac0",
                "FUN_08000a64",
                "FUN_08000588",
                "FUN_08001bf8",
                "FUN_08001c18",
                "FUN_08002f1e",
                "FUN_08002fba",
                "FUN_08002f14",
                "FUN_08002a30",
                "FUN_0800738a",
                "FUN_08000500",
                "FUN_08002fa0",
                "FUN_08000214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080022f8": {
            "entrypoint": "0x080022f8",
            "current_name": "process_and_handle_data_080022f8",
            "code": "\nvoid process_and_handle_data_080022f8(void)\n\n{\n  bool is_valid;\n  int index;\n  undefined4 converted_value;\n  uint iter;\n  uint mask;\n  \n  process_parameters();\n  while (index = execute_function(&DAT_200003d4), index != 0) {\n    process_data(&DAT_200003d4);\n  }\n  DAT_20000118 = initialize_data_08008abc();\n  if (DAT_20000008 < (uint)(DAT_20000118 - DAT_2000017c)) {\n    DAT_2000017c = DAT_2000017c + DAT_20000008;\n    for (iter = 0; iter < 0x3c; iter = iter + 1 & 0xff) {\n      mask = iter - 0x2e & 0xff;\n      if (mask < 0xe) {\n        if (iter < 0x3c) {\n          index = (int)(char)(&DAT_0800a908)[iter];\n        }\n        else {\n          index = -1;\n        }\n        index = check_parameter(index);\n        if (index == 0) {\n          is_valid = false;\n        }\n        else {\n          if (iter < 0x3c) {\n            index = (int)(char)(&DAT_0800a908)[iter];\n          }\n          else {\n            index = -1;\n          }\n          index = check_parameter(index);\n          if (index == 1) {\n            is_valid = false;\n          }\n          else {\n            index = extract_memory_byte(&DAT_200003d4,iter);\n            if (index == 2) {\n              is_valid = true;\n            }\n            else {\n              is_valid = false;\n            }\n          }\n        }\n      }\n      else {\n        is_valid = false;\n      }\n      if ((is_valid) && ((DAT_20000114 >> mask & 1U) != 0)) {\n        converted_value = convert_value(mask);\n        process_with_data(&DAT_200003d4,mask,converted_value);\n      }\n    }\n    if (-1 < DAT_20000004) {\n      for (iter = 0; (int)iter < DAT_20000004 + 1; iter = iter + 1 & 0xff) {\n        index = iter * 0xc;\n        process_received_data((&DAT_20000188)[index],(&DAT_2000018c)[iter * 3],(&DAT_20000190)[index],\n                     (&DAT_20000191)[index]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022f8": "process_and_handle_data_080022f8",
                "iVar2": "index",
                "uVar3": "converted_value",
                "uVar4": "iter",
                "uVar5": "mask",
                "bVar1": "is_valid",
                "process_params_08000ef8": "process_parameters",
                "execute_function_08002ec4": "execute_function",
                "process_data_08002ed2": "process_data",
                "check_param_080036ac": "check_parameter",
                "extract_memory_byte_08002fa0": "extract_memory_byte",
                "process_with_data_08002ef2": "process_with_data",
                "convert_value_08008880": "convert_value",
                "process_received_data_08001c18": "process_received_data"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [
                "FUN_08008880",
                "FUN_08002ef2",
                "FUN_08001c18",
                "FUN_080036ac",
                "FUN_08002ec4",
                "FUN_08002ed2",
                "FUN_08008abc",
                "FUN_08000ef8",
                "FUN_08002fa0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002400": {
            "entrypoint": "0x08002400",
            "current_name": "check_for_bit_08002400",
            "code": "\nundefined4 check_for_bit_08002400(int input_value)\n\n{\n  uint counter;\n  \n  counter = 0;\n  while( true ) {\n    if (0xb < counter) {\n      return 0;\n    }\n    if (((&DAT_20000258)[(input_value * 0xc + counter) * 8] & 0x40) != 0) break;\n    counter = counter + 1 & 0xff;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002400": "check_for_bit_08002400",
                "param_1": "input_value",
                "uVar1": "counter"
            },
            "calling": [
                "FUN_08002644",
                "FUN_080025ac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800242c": {
            "entrypoint": "0x0800242c",
            "current_name": "initialize_and_set_timeout_0800242c",
            "code": "\nvoid initialize_and_set_timeout_0800242c(undefined4 config,undefined4 timeout_value,undefined4 constant_value,undefined4 callback_function)\n\n{\n  initialize_settings(config,60000,0x5dc,&label_1,callback_function);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800242c": "initialize_and_set_timeout_0800242c",
                "param_1": "config",
                "param_2": "timeout_value",
                "param_3": "constant_value",
                "param_4": "callback_function",
                "initialize_settings_08007648": "initialize_settings",
                "LAB_08002444_1": "label_1"
            },
            "calling": [
                "FUN_080025ac"
            ],
            "called": [
                "FUN_08007648"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002578": {
            "entrypoint": "0x08002578",
            "current_name": "initialize_timer_08002578",
            "code": "\nvoid initialize_timer_08002578(void)\n\n{\n  initialize_timer_08002578_080076e0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002578": "initialize_timer_08002578"
            },
            "calling": [
                "FUN_08002644"
            ],
            "called": [
                "FUN_080076e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002580": {
            "entrypoint": "0x08002580",
            "current_name": "initialize_data_08002580",
            "code": "\nvoid initializeData_08002580(byte *outputData)\n\n{\n  char nextValue;\n  uint counter;\n  \n  counter = (uint)DAT_20000250;\n  if (0xb < counter) {\n    *outputData = 0xff;\n    return;\n  }\n  nextValue = DAT_20000250 + 1;\n  *outputData = DAT_20000250;\n  DAT_20000250 = nextValue;\n  *(undefined4 *)(&DAT_2000025c + counter * 8) = 0x5dc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002580": "initialize_data_08002580",
                "param_1": "outputData",
                "uVar2": "counter",
                "cVar1": "nextValue"
            },
            "calling": [
                "FUN_080004d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025ac": {
            "entrypoint": "0x080025ac",
            "current_name": "process_memory_080025ac",
            "code": "\nbyte processMemory_080025ac(byte *inputArray,uint address,int value1,int value2)\n\n{\n  uint result1;\n  uint result2;\n  uint quotient;\n  int temp;\n  \n  if (*inputArray < 0xc) {\n    processMemory_080025acAtAddress(address,1,value1,*inputArray,value2);\n    result2 = (uint)*inputArray;\n    result1 = (byte)(&DAT_20000258)[result2 * 8] & 0xffffffc0 | address & 0x3f;\n    (&DAT_20000258)[result2 * 8] = (char)result1;\n    temp = -value1 + 0x220;\n    if (temp < 0) {\n      temp = -value1 + 0x223;\n    }\n    inputArray[1] = (byte)((uint)(temp << 0x16) >> 0x18);\n    temp = -value2 + 0x960;\n    if (temp < 0) {\n      temp = -value2 + 0x963;\n    }\n    inputArray[2] = (byte)((uint)(temp << 0x16) >> 0x18);\n    quotient = *inputArray / 0xc;\n    temp = checkForBit(quotient,result1,result2,(uint)*inputArray * -0x55555555);\n    if (temp == 0) {\n      DAT_200002fc = (undefined)quotient;\n      initAndSetTimeout();\n    }\n    (&DAT_20000258)[(uint)*inputArray * 8] = (&DAT_20000258)[(uint)*inputArray * 8] | 0x40;\n  }\n  return *inputArray;\n}\n\n",
            "renaming": {
                "FUN_080025ac": "process_memory_080025ac",
                "param_1": "inputArray",
                "param_2": "address",
                "param_3": "value1",
                "param_4": "value2",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "quotient",
                "iVar4": "temp",
                "process_memory_08008990": "processMemoryAtAddress",
                "check_for_bit_08002400": "checkForBit",
                "initialize_and_set_timeout_0800242c": "initAndSetTimeout"
            },
            "calling": [
                "FUN_08002634",
                "FUN_08000500"
            ],
            "called": [
                "FUN_08002400",
                "FUN_0800242c",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002634": {
            "entrypoint": "0x08002634",
            "current_name": "process_and_store_memory_08002634",
            "code": "\nvoid process_and_store_memory_08002634(undefined4 input_1,undefined4 input_2,undefined4 constant_1,undefined4 constant_2)\n\n{\n  process_memory_080025ac(input_1,input_2,0x220,0x960,constant_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002634": "process_and_store_memory_08002634",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "constant_1",
                "param_4": "constant_2"
            },
            "calling": [
                "FUN_08000500"
            ],
            "called": [
                "FUN_080025ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002644": {
            "entrypoint": "0x08002644",
            "current_name": "update_and_initialize_08002644",
            "code": "\nvoid updateAndInitialize_08002644(byte *data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  byte byteValue;\n  uint dataValue;\n  int result;\n  \n  dataValue = (uint)*data;\n  byteValue = (&DAT_20000258)[dataValue * 8];\n  (&DAT_20000258)[dataValue * 8] = byteValue & 0xbf;\n  result = checkBit(dataValue / 0xc,param2,byteValue & 0xbf,dataValue * -0x55555555,param4);\n  if (result == 0) {\n    initializeTimer(&DAT_200002b8);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002644": "update_and_initialize_08002644",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "byteValue",
                "uVar2": "dataValue",
                "iVar3": "result",
                "check_for_bit_08002400": "checkBit",
                "initialize_timer_08002578": "initializeTimer"
            },
            "calling": [
                "FUN_08000588"
            ],
            "called": [
                "FUN_08002400",
                "FUN_08002578"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800267c": {
            "entrypoint": "0x0800267c",
            "current_name": "update_values_0800267c",
            "code": "\nvoid updateValues_0800267c(byte *data,int value)\n\n{\n  int temp;\n  \n  if (*data < 0xc) {\n    temp = (0x88 - (char)data[1]) * 4;\n    if ((temp - value == 0 || temp < value) &&\n       (temp = (600 - (char)data[2]) * 4,\n       value == temp || value + (600 - (char)data[2]) * -4 < 0 != SBORROW4(value,temp)))\n    {\n      temp = value;\n    }\n    *(int *)(&DAT_2000025c + (uint)*data * 8) = temp;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800267c": "update_values_0800267c",
                "param_1": "data",
                "param_2": "value",
                "iVar1": "temp"
            },
            "calling": [
                "FUN_080026b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026b0": {
            "entrypoint": "0x080026b0",
            "current_name": "interpolate_and_update_values_080026b0",
            "code": "\nvoid interpolateAndUpdateValues_080026b0(int dataAddress,int value)\n\n{\n  if (value < 0x220) {\n    if (value < 0) {\n      value = 0;\n    }\n    else if (0xb4 < value) {\n      value = 0xb4;\n    }\n    value = calculateLinearInterpolation(value,0,0xb4,(0x88 - *(char *)(dataAddress + 1)) * 4,\n                           (600 - *(char *)(dataAddress + 2)) * 4);\n  }\n  updateValues(dataAddress,value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026b0": "interpolate_and_update_values_080026b0",
                "param_1": "dataAddress",
                "param_2": "value",
                "calculate_linear_interpolation_08008ef4": "calculateLinearInterpolation",
                "update_values_0800267c": "updateValues"
            },
            "calling": [
                "FUN_0800021a"
            ],
            "called": [
                "FUN_08008ef4",
                "FUN_0800267c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026f8": {
            "entrypoint": "0x080026f8",
            "current_name": "calculate_bitwise_result_080026f8",
            "code": "\nuint calculate_bitwise_result_080026f8(byte *param_1)\n\n{\n  return ((uint)(byte)(&DAT_20000258)[(uint)*param_1 * 8] << 0x19) >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_080026f8": "calculate_bitwise_result_080026f8"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800270c": {
            "entrypoint": "0x0800270c",
            "current_name": "calculate_difference_0800270c",
            "code": "\nint calculate_difference_0800270c(void)\n\n{\n  return (uint)DAT_200003b7 - (uint)DAT_200003b5;\n}\n\n",
            "renaming": {
                "FUN_0800270c": "calculate_difference_0800270c"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002720": {
            "entrypoint": "0x08002720",
            "current_name": "read_byte_from_memory_08002720",
            "code": "\nuint readByteFromMemory_08002720(void)\n\n{\n  uint index;\n  \n  index = (uint)DAT_200003b5;\n  if (index < DAT_200003b7) {\n    DAT_200003b5 = DAT_200003b5 + 1;\n    return (uint)*(byte *)(DAT_200003c8 + index);\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08002720": "read_byte_from_memory_08002720",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08001c08"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080027f0": {
            "entrypoint": "0x080027f0",
            "current_name": "copy_and_assign_data_080027f0",
            "code": "\nuint copy_and_assign_data_080027f0(int source_offset,undefined4 destination_offset,uint data_length)\n\n{\n  int copy_result;\n  uint new_data_end;\n  \n  if (DAT_200003b4 == '\\0') {\n    copy_result = copy_data(source_offset + 0x14,destination_offset,data_length & 0xffff);\n    if (copy_result == 0) {\n      return data_length;\n    }\n    return 0;\n  }\n  new_data_end = DAT_200003b8 + data_length;\n  if (DAT_200003c5 < new_data_end) {\n    if (new_data_end < 0x20) {\n      new_data_end = 0x20;\n    }\n    DAT_200003cc = allocate_and_assign_memory(DAT_200003cc,new_data_end);\n    if (DAT_200003cc == 0) {\n      DAT_200003c5 = 0;\n    }\n    else {\n      DAT_200003c5 = (byte)new_data_end;\n    }\n  }\n  if (DAT_200003cc == 0) {\n    *(undefined4 *)(source_offset + 4) = 1;\n    return 0;\n  }\n  copy_data_to_buffer((uint)DAT_200003b6 + DAT_200003cc,destination_offset,data_length);\n  DAT_200003b6 = DAT_200003b6 + (char)data_length;\n  DAT_200003b8 = DAT_200003b6;\n  return data_length;\n}\n\n",
            "renaming": {
                "FUN_080027f0": "copy_and_assign_data_080027f0",
                "param_1": "source_offset",
                "param_2": "destination_offset",
                "param_3": "data_length",
                "iVar1": "copy_result",
                "uVar2": "new_data_end",
                "copy_data_08007ede": "copy_data",
                "allocate_and_assign_memory_08009908": "allocate_and_assign_memory",
                "copy_data_to_buffer_080091b0": "copy_data_to_buffer"
            },
            "calling": [],
            "called": [
                "FUN_080091b0",
                "FUN_08009908",
                "FUN_08007ede"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800288c": {
            "entrypoint": "0x0800288c",
            "current_name": "copy_or_allocate_and_assign_data_0800288c",
            "code": "\nundefined4 copy_or_allocate_and_assign_data_0800288c(int input_offset,undefined data)\n\n{\n  undefined4 result;\n  int copy_result;\n  uint new_data_length;\n  undefined input_data;\n  \n  input_data = data;\n  if (DAT_200003b4 == '\\0') {\n    copy_result = copy_data_08007ede(input_offset + 0x14,&input_data,1);\n    if (copy_result == 0) {\n      result = 1;\n    }\n    else {\n      result = 0;\n    }\n  }\n  else {\n    new_data_length = DAT_200003b8 + 1;\n    if (DAT_200003c5 < new_data_length) {\n      if (new_data_length < 0x20) {\n        new_data_length = 0x20;\n      }\n      DAT_200003cc = allocate_and_assign_memory_08009908(DAT_200003cc,new_data_length);\n      if (DAT_200003cc == 0) {\n        DAT_200003c5 = 0;\n      }\n      else {\n        DAT_200003c5 = (byte)new_data_length;\n      }\n    }\n    if (DAT_200003cc == 0) {\n      *(undefined4 *)(input_offset + 4) = 1;\n      result = 0;\n    }\n    else {\n      *(undefined *)(DAT_200003cc + (uint)DAT_200003b6) = input_data;\n      DAT_200003b6 = DAT_200003b6 + 1;\n      result = 1;\n      DAT_200003b8 = DAT_200003b6;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800288c": "copy_or_allocate_and_assign_data_0800288c",
                "param_1": "input_offset",
                "param_2": "data",
                "uVar1": "result",
                "iVar2": "copy_result",
                "uVar3": "new_data_length",
                "local_11": "input_data"
            },
            "calling": [
                "FUN_08001bf8"
            ],
            "called": [
                "FUN_08009908",
                "FUN_08007ede"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800291c": {
            "entrypoint": "0x0800291c",
            "current_name": "initialize_param_0800291c",
            "code": "\nvoid initializeParam_0800291c(undefined4 *paramArray)\n\n{\n  paramArray[1] = 0;\n  paramArray[2] = 1000;\n  *paramArray = &PTR_copy_or_allocate_and_assign_data_0800288c_1_0800a5a0;\n  *(undefined *)(paramArray + 0x1b) = 0x19;\n  *(undefined *)((int)paramArray + 0x6d) = 0x18;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800291c": "initialize_param_0800291c",
                "param_1": "paramArray"
            },
            "calling": [
                "FUN_08002948"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002948": {
            "entrypoint": "0x08002948",
            "current_name": "initialize_if_param1_equal_to_1_08002948",
            "code": "\nvoid initialize_if_param1_equal_to_1_08002948(int condition,int value)\n\n{\n  if (condition != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    initialize_param_0800291c(&DAT_20000314);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002948": "initialize_if_param1_equal_to_1_08002948",
                "param_1": "condition",
                "param_2": "value"
            },
            "calling": [
                "FUN_08002c1e"
            ],
            "called": [
                "FUN_0800291c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002968": {
            "entrypoint": "0x08002968",
            "current_name": "initialize_peripheral_08002968",
            "code": "\nvoid initializePeripheral_08002968(int baseAddress,uint flags)\n\n{\n  int shiftedFlags;\n  int peripheralAddress;\n  \n  DAT_200003b5 = 0;\n  DAT_200003b7 = 0;\n  if (DAT_200003c8 != 0) {\n    fill_memory_080091c6(DAT_200003c8,0,DAT_200003c4);\n  }\n  DAT_200003b6 = 0;\n  DAT_200003b8 = 0;\n  if (DAT_200003cc != 0) {\n    fill_memory_080091c6(DAT_200003cc,0,DAT_200003c5);\n  }\n  DAT_200003b4 = 0;\n  shiftedFlags = (flags & 0x7f) << 1;\n  *(char *)(baseAddress + 0x10) = (char)shiftedFlags;\n  if (flags == 0x33) {\n    *(undefined *)(baseAddress + 0x11) = 1;\n  }\n  else {\n    *(undefined *)(baseAddress + 0x11) = 0;\n  }\n  peripheralAddress = baseAddress + 0x14;\n  initialize_peripherals_080077b0(peripheralAddress,100000,0x4000,shiftedFlags,*(undefined *)(baseAddress + 0x11));\n  if (*(char *)(baseAddress + 0x11) == '\\0') {\n    update_param_with_flag_and_value_08007f8e(peripheralAddress,&LAB_08002774_1);\n    update_param_value_08007f7c(peripheralAddress,&LAB_08002b00_1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002968": "initialize_peripheral_08002968",
                "param_1": "baseAddress",
                "param_2": "flags",
                "iVar1": "shiftedFlags",
                "iVar2": "peripheralAddress"
            },
            "calling": [
                "FUN_08002a1c"
            ],
            "called": [
                "FUN_08007f7c",
                "FUN_080077b0",
                "FUN_080091c6",
                "FUN_08007f8e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a1c": {
            "entrypoint": "0x08002a1c",
            "current_name": "initialize_peripheral_08002a1c",
            "code": "\nvoid initialize_peripheral_08002a1c(undefined4 device_handle,undefined config_param,undefined4 param_3,undefined4 param_4)\n\n{\n  initialize_peripheral_08002a1c_08002968(device_handle,config_param,param_3,param_4,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a1c": "initialize_peripheral_08002a1c",
                "param_1": "device_handle",
                "param_2": "config_param"
            },
            "calling": [
                "FUN_08002a26"
            ],
            "called": [
                "FUN_08002968"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a26": {
            "entrypoint": "0x08002a26",
            "current_name": "initialize_peripheral_08002a26",
            "code": "\nvoid initialize_peripheral_08002a26(undefined4 peripheral,undefined4 unknown_param,undefined4 unknown_param_1,undefined4 unknown_param_2)\n\n{\n  initialize_peripheral_08002a26_08002a1c(peripheral,0x33,unknown_param_1,unknown_param_2,unknown_param_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a26": "initialize_peripheral_08002a26",
                "param_1": "peripheral",
                "param_2": "unknown_param",
                "param_3": "unknown_param_1",
                "param_4": "unknown_param_2"
            },
            "calling": [
                "FUN_08000a64"
            ],
            "called": [
                "FUN_08002a1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a30": {
            "entrypoint": "0x08002a30",
            "current_name": "initialize_data_08002a30",
            "code": "\nvoid initializeData_08002a30(undefined4 param1,int param2)\n\n{\n  DAT_200003b4 = 1;\n  DAT_200003d0 = (char)(param2 << 1);\n  DAT_200003b6 = 0;\n  DAT_200003b8 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a30": "initialize_data_08002a30",
                "param_1": "param1",
                "param_2": "param2"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0",
                "FUN_08002b68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a58": {
            "entrypoint": "0x08002a58",
            "current_name": "check_and_update_values_08002a58",
            "code": "\nundefined4 checkAndUpdateValues_08002a58(int inputValue)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  if (*(char *)(inputValue + 0x11) == '\\0') {\n    returnValue = 4;\n  }\n  else {\n    result = check_and_update_values_08007e74(inputValue + 0x14,DAT_200003d0,DAT_200003cc,DAT_200003b8);\n    if (result == 0) {\n      returnValue = 0;\n    }\n    else if (result == 1) {\n      returnValue = 1;\n    }\n    else {\n      returnValue = 4;\n    }\n    if (DAT_200003cc != 0) {\n      fill_memory_080091c6(DAT_200003cc,0,DAT_200003c5);\n    }\n    DAT_200003b6 = 0;\n    DAT_200003b8 = 0;\n    DAT_200003b4 = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08002a58": "check_and_update_values_08002a58",
                "param_1": "inputValue",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08002b68",
                "FUN_08002ac0"
            ],
            "called": [
                "FUN_08007e74",
                "FUN_080091c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ac0": {
            "entrypoint": "0x08002ac0",
            "current_name": "update_values_08002ac0",
            "code": "\nvoid update_values_08002ac0(undefined4 input_param,undefined4 unused_param,undefined4 value_param_1,undefined4 value_param_2)\n\n{\n  check_and_update_values_08002ac0_08002a58(input_param,1,value_param_1,value_param_2,value_param_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ac0": "update_values_08002ac0",
                "param_1": "input_param",
                "param_2": "unused_param",
                "param_3": "value_param_1",
                "param_4": "value_param_2"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_08002a58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002acc": {
            "entrypoint": "0x08002acc",
            "current_name": "allocate_and_assign_memory_08002acc",
            "code": "\nvoid allocateAndAssignMemory_08002acc(uint requestedSize,undefined4 unusedParam1,undefined4 unusedParam2,undefined4 unusedParam3)\n\n{\n  if (DAT_200003c4 < requestedSize) {\n    if (requestedSize < 0x20) {\n      requestedSize = 0x20;\n    }\n    DAT_200003c8 = allocate_and_assign_memory_08009908(DAT_200003c8,requestedSize,unusedParam2,(uint)DAT_200003c4,unusedParam3);\n    if (DAT_200003c8 == 0) {\n      DAT_200003c4 = 0;\n    }\n    else {\n      DAT_200003c4 = (byte)requestedSize;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002acc": "allocate_and_assign_memory_08002acc",
                "param_1": "requestedSize",
                "param_2": "unusedParam1",
                "param_3": "unusedParam2",
                "param_4": "unusedParam3"
            },
            "calling": [
                "FUN_08002b68"
            ],
            "called": [
                "FUN_08009908"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b68": {
            "entrypoint": "0x08002b68",
            "current_name": "result_code_checker_08002b68",
            "code": "\nundefined4\nresultCodeChecker_08002b68(undefined4 *array,uint length,undefined4 configParam,uint configValue,byte configFlag)\n\n{\n  int returnValue;\n  uint configFlagUInt;\n  uint configValueUInt;\n  \n  configFlagUInt = (uint)configFlag;\n  if (*(char *)((int)array + 0x11) == '\\0') {\n    return 0;\n  }\n  configValueUInt = configValue;\n  allocate_and_assign_memory_08002acc(configParam);\n  if (DAT_200003c8 != 0) {\n    if (configFlagUInt != 0) {\n      initialize_data_08002a30(array,length);\n      if (3 < configFlagUInt) {\n        configFlagUInt = 3;\n      }\n      while( true ) {\n        if (configFlagUInt == 0) break;\n        (**(code **)*array)(array,configValue >> ((configFlagUInt - 1 & 0x1f) << 3) & 0xff);\n        configFlagUInt = configFlagUInt - 1 & 0xff;\n      }\n      check_and_update_values_08002a58(array,0);\n    }\n    returnValue = check_and_modify_params_08007f0e(array + 5,(length & 0x7f) << 1,DAT_200003c8,configParam,configValueUInt);\n    if (returnValue != 0) {\n      configParam = 0;\n    }\n    DAT_200003b5 = 0;\n    DAT_200003b7 = (char)configParam;\n    return configParam;\n  }\n  array[1] = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002b68": "result_code_checker_08002b68",
                "param_1": "array",
                "param_2": "length",
                "param_3": "configParam",
                "param_4": "configValue",
                "param_5": "configFlag",
                "iVar1": "returnValue",
                "uVar2": "configFlagUInt",
                "uVar3": "configValueUInt"
            },
            "calling": [
                "FUN_08002c00"
            ],
            "called": [
                "FUN_08002a58",
                "FUN_08002acc",
                "FUN_08002a30",
                "FUN_08007f0e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c00": {
            "entrypoint": "0x08002c00",
            "current_name": "check_result_08002c00",
            "code": "\nvoid check_result_08002c00(void)\n\n{\n  check_result_08002c00_code();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c00": "check_result_08002c00",
                "result_code_checker_08002b68": "check_result_code"
            },
            "calling": [
                "FUN_08002c14"
            ],
            "called": [
                "FUN_08002b68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c14": {
            "entrypoint": "0x08002c14",
            "current_name": "check_and_return_08002c14",
            "code": "\nvoid check_and_return_08002c14(void)\n\n{\n  check_result();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c14": "check_and_return_08002c14",
                "check_result_08002c00": "check_result"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [
                "FUN_08002c00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c1e": {
            "entrypoint": "0x08002c1e",
            "current_name": "initialize_with_specific_parameters_08002c1e",
            "code": "\nvoid initialize_with_specific_parameters_08002c1e(undefined4 first_param,undefined4 second_param,undefined4 third_param,undefined4 fourth_param)\n\n{\n  initialize_if_param1_equal_to_1_08002948(1,0xffff,third_param,fourth_param,fourth_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c1e": "initialize_with_specific_parameters_08002c1e",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param"
            },
            "calling": [],
            "called": [
                "FUN_08002948"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c2c": {
            "entrypoint": "0x08002c2c",
            "current_name": "execute_callback_08002c2c",
            "code": "\nvoid executeCallback_08002c2c(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  if (DAT_200005d4 != (code *)0x0) {\n    (*DAT_200005d4)(arg2,arg3,arg3,DAT_200005d4,arg4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c2c": "execute_callback_08002c2c",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ce0": {
            "entrypoint": "0x08002ce0",
            "current_name": "initialize_and_update_params_08002ce0",
            "code": "\nint initializeAndUpdateParams_08002ce0(int baseAddress)\n\n{\n  int updatedAddress;\n  \n  initializeValue(baseAddress + 0x40);\n  updatedAddress = baseAddress + 0x44;\n  initializeParams(updatedAddress,baseAddress,0x40);\n  *(undefined *)(baseAddress + 0xc4) = 0;\n  *(undefined4 *)(baseAddress + 200) = 0;\n  *(undefined *)(baseAddress + 0x1f8) = 0;\n  updateParameters(updatedAddress,0xe0,callbackFunction + 1,0);\n  updateParameters(updatedAddress,0x90,&label1,0);\n  updateParameters(updatedAddress,0xc0,&label2,0);\n  updateParameters(updatedAddress,0xd0,&label3,0);\n  updateParameters(updatedAddress,0xf4,&label4,0);\n  updateParameters(updatedAddress,0xf5,&label5,0);\n  update_parameters_08003366(updatedAddress,0x71,&label6,0);\n  setParameters(updatedAddress,0xf0,&label7,0);\n  updateDataIfParam2Equals(updatedAddress,0x79,&label8,baseAddress);\n  updateParameters2(updatedAddress,0xf9,&label9,baseAddress);\n  updateParameters2(updatedAddress,0xff,&label10,0);\n  return baseAddress;\n}\n\n",
            "renaming": {
                "FUN_08002ce0": "initialize_and_update_params_08002ce0",
                "param_1": "baseAddress",
                "iVar1": "updatedAddress",
                "initialize_value_0800314e": "initializeValue",
                "initialize_params_080032bc": "initializeParams",
                "update_parameters_08003306": "updateParameters",
                "execute_callback_08002c2c": "callbackFunction",
                "LAB_08002c40_1": "label1",
                "LAB_08002c7c_1": "label2",
                "LAB_08002c90_1": "label3",
                "LAB_08002c54_1": "label4",
                "LAB_08002c68_1": "label5",
                "LAB_08002ca4_1": "label6",
                "set_parameters_08003370": "setParameters",
                "LAB_08002cb8_1": "label7",
                "update_data_if_param2_equals_08003346": "updateDataIfParam2Equals",
                "LAB_08002e1a_1": "label8",
                "update_parameters_08003350": "updateParameters2",
                "LAB_08002dea_1": "label9",
                "LAB_08002cd0_1": "label10"
            },
            "calling": [
                "FUN_08002dbc"
            ],
            "called": [
                "FUN_08003306",
                "FUN_08003346",
                "FUN_08003366",
                "FUN_0800314e",
                "FUN_080032bc",
                "FUN_08003350",
                "FUN_08003370"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002dbc": {
            "entrypoint": "0x08002dbc",
            "current_name": "initialize_if_param1_is_one_08002dbc",
            "code": "\nvoid initialize_if_param1_is_one_08002dbc(int param_number,int param_value)\n\n{\n  if (param_number != 1) {\n    return;\n  }\n  if (param_value == 0xffff) {\n    initialize_params(&DAT_200003d4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002dbc": "initialize_if_param1_is_one_08002dbc",
                "param_1": "param_number",
                "param_2": "param_value",
                "initialize_and_update_params_08002ce0": "initialize_params"
            },
            "calling": [],
            "called": [
                "FUN_08002ce0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ddc": {
            "entrypoint": "0x08002ddc",
            "current_name": "execute_logic_function_08002ddc",
            "code": "\nvoid execute_logic_function_08002ddc(int input_param,undefined4 unused_param1,undefined4 unused_param2,undefined4 generic_param)\n\n{\n  execute_subfunction(input_param + 0x40,2,5,generic_param,generic_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ddc": "execute_logic_function_08002ddc",
                "param_1": "input_param",
                "param_2": "unused_param1",
                "param_3": "unused_param2",
                "param_4": "generic_param",
                "execute_function_0800322c": "execute_subfunction"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [
                "FUN_0800322c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002df6": {
            "entrypoint": "0x08002df6",
            "current_name": "process_data_08002df6",
            "code": "\nvoid processData_08002df6(int inputData)\n\n{\n  undefined *dataPointer;\n  \n  if (*(byte *)(inputData + 0xc4) == 0) {\n    return;\n  }\n  dataPointer = *(undefined **)(inputData + 200);\n  decode_and_process_data_080031ce(inputData + 0x40,*dataPointer,dataPointer[1],*(byte *)(inputData + 0xc4) - 2,dataPointer + 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002df6": "process_data_08002df6",
                "param_1": "inputData",
                "puVar1": "dataPointer"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [
                "FUN_080031ce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e26": {
            "entrypoint": "0x08002e26",
            "current_name": "initialize_data_processing_08002e26",
            "code": "\nvoid initializeDataProcessing_08002e26(int dataStructAddr,undefined4 newValue)\n\n{\n  *(undefined4 *)(dataStructAddr + 0xc0) = newValue;\n  copy_value_to_pointer_08003154(dataStructAddr + 0x40);\n  execute_logic_function_08002ddc(dataStructAddr);\n  process_data_08002df6(dataStructAddr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e26": "initialize_data_processing_08002e26",
                "param_1": "dataStructAddr",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "FUN_08003154",
                "FUN_08002ddc",
                "FUN_08002df6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e44": {
            "entrypoint": "0x08002e44",
            "current_name": "extract_file_name_08002e44",
            "code": "\nvoid extract_file_name_08002e44(int output_buffer,int input_path,undefined unspecified_byte_1,undefined unspecified_byte_2)\n\n{\n  byte length_of_file_name;\n  char last_character;\n  int position_of_dot;\n  int last_separator_index;\n  undefined *buffer_pointer;\n  \n  position_of_dot = find_substring_080099a4(input_path,\".cpp\");\n  last_separator_index = find_last_occurrence_0800997e(input_path,0x2f);\n  if (last_separator_index == 0) {\n    last_separator_index = find_last_occurrence_0800997e(input_path,0x5c);\n  }\n  if (last_separator_index != 0) {\n    input_path = last_separator_index + 1;\n  }\n  if (position_of_dot == 0) {\n    last_character = find_end_of_string_08000178(input_path);\n    *(char *)(output_buffer + 0xc4) = last_character + '\\x02';\n  }\n  else {\n    *(char *)(output_buffer + 0xc4) = ((char)position_of_dot - (char)input_path) + '\\x02';\n  }\n  update_list_080091a0(*(undefined4 *)(output_buffer + 200));\n  length_of_file_name = *(byte *)(output_buffer + 0xc4);\n  buffer_pointer = (undefined *)allocate_and_assign_memory_08009190(length_of_file_name + 1);\n  *(undefined **)(output_buffer + 200) = buffer_pointer;\n  buffer_pointer[length_of_file_name] = 0;\n  *buffer_pointer = unspecified_byte_1;\n  buffer_pointer[1] = unspecified_byte_2;\n  copy_string_08009954(buffer_pointer + 2,input_path,*(byte *)(output_buffer + 0xc4) - 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e44": "extract_file_name_08002e44",
                "param_1": "output_buffer",
                "param_2": "input_path",
                "param_3": "unspecified_byte_1",
                "param_4": "unspecified_byte_2",
                "bVar1": "length_of_file_name",
                "cVar2": "last_character",
                "iVar3": "position_of_dot",
                "iVar4": "last_separator_index",
                "puVar5": "buffer_pointer"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08009190",
                "FUN_0800997e",
                "FUN_08009954",
                "FUN_080091a0",
                "FUN_08000178",
                "FUN_080099a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ec4": {
            "entrypoint": "0x08002ec4",
            "current_name": "execute_function_08002ec4",
            "code": "\nvoid executeFunction_08002ec4(int functionPointer)\n\n{\n  (**(code **)(**(int **)(functionPointer + 0xc0) + 8))();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ec4": "execute_function_08002ec4",
                "param_1": "functionPointer"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ed2": {
            "entrypoint": "0x08002ed2",
            "current_name": "process_data_08002ed2",
            "code": "\nvoid process_data_08002ed2(int data_address)\n\n{\n  uint result;\n  \n  result = (**(code **)(**(int **)(data_address + 0xc0) + 0xc))();\n  if (result != 0xffffffff) {\n    process_data_08002ed2_helper(data_address + 0x44,result & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed2": "process_data_08002ed2",
                "param_1": "data_address",
                "uVar1": "result",
                "process_data_08003474": "process_data_helper"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [
                "FUN_08003474"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ef2": {
            "entrypoint": "0x08002ef2",
            "current_name": "process_with_data_08002ef2",
            "code": "\nvoid process_with_data_08002ef2(int data_offset,undefined4 parameter_2,undefined2 parameter_3,undefined4 parameter_4)\n\n{\n  process_data_08003158(data_offset + 0x40,parameter_2,parameter_3,parameter_4,parameter_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ef2": "process_with_data_08002ef2",
                "param_1": "data_offset",
                "param_2": "parameter_2",
                "param_3": "parameter_3",
                "param_4": "parameter_4"
            },
            "calling": [
                "FUN_08000488",
                "FUN_080022f8"
            ],
            "called": [
                "FUN_08003158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002efe": {
            "entrypoint": "0x08002efe",
            "current_name": "execute_decoded_function_08002efe",
            "code": "\nvoid executeDecodedFunction_08002efe(int address,undefined4 param2,undefined2 param3,undefined4 param4)\n\n{\n  decodeAndExecuteFunction(address + 0x40,param2,param3,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002efe": "execute_decoded_function_08002efe",
                "param_1": "address",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "decode_and_execute_function_0800319e": "decodeAndExecuteFunction"
            },
            "calling": [
                "FUN_08000be8"
            ],
            "called": [
                "FUN_0800319e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f0a": {
            "entrypoint": "0x08002f0a",
            "current_name": "process_data_08002f0a",
            "code": "\nvoid process_data_08002f0a(int data)\n\n{\n  decode_and_process_data_08002f0a(data + 0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f0a": "process_data_08002f0a",
                "param_1": "data",
                "decode_and_process_data_0800325a": "decode_and_process_data"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [
                "FUN_0800325a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f14": {
            "entrypoint": "0x08002f14",
            "current_name": "process_data_08002f14",
            "code": "\nvoid processData_08002f14(int input)\n\n{\n  processData_08002f14Helper(input + 0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f14": "process_data_08002f14",
                "param_1": "input",
                "process_data_080032a2": "processDataHelper"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_08000500"
            ],
            "called": [
                "FUN_080032a2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f1e": {
            "entrypoint": "0x08002f1e",
            "current_name": "execute_code_08002f1e",
            "code": "\nvoid executeCode_08002f1e(int inputParam)\n\n{\n  (**(code **)**(undefined4 **)(inputParam + 0xc0))();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f1e": "execute_code_08002f1e",
                "param_1": "inputParam"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f2c": {
            "entrypoint": "0x08002f2c",
            "current_name": "update_data_08002f2c",
            "code": "\nvoid updateData_08002f2c(undefined4 inputFlag,uint selector,undefined4 newValue)\n\n{\n  undefined4 tempValue;\n  \n  if (selector == 0xd0) {\n    DAT_200005f0 = newValue;\n    return;\n  }\n  if (0xd0 < selector) {\n    if (selector == 0xf4) {\n      DAT_200005e0 = newValue;\n      return;\n    }\n    tempValue = newValue;\n    if ((selector != 0xf5) && (tempValue = DAT_200005e4, selector == 0xe0)) {\n      DAT_200005d4 = newValue;\n      return;\n    }\n    DAT_200005e4 = tempValue;\n    return;\n  }\n  if (selector == 0x90) {\n    DAT_200005dc = newValue;\n    return;\n  }\n  if (selector != 0xc0) {\n    return;\n  }\n  DAT_200005ec = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f2c": "update_data_08002f2c",
                "param_1": "inputFlag",
                "param_2": "selector",
                "param_3": "newValue",
                "uVar1": "tempValue"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f84": {
            "entrypoint": "0x08002f84",
            "current_name": "set_param_if_equal_08002f84",
            "code": "\nvoid set_param_if_equal_08002f84(undefined4 unknown_data,int value,undefined4 parameter_value)\n\n{\n  if (value == 0xff) {\n    DAT_200005e8 = parameter_value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f84": "set_param_if_equal_08002f84",
                "param_1": "unknown_data",
                "param_2": "value",
                "param_3": "parameter_value"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f94": {
            "entrypoint": "0x08002f94",
            "current_name": "set_data_register_08002f94",
            "code": "\nvoid set_data_register_08002f94(undefined4 data_register_address,undefined4 unused,undefined4 value_to_set)\n\n{\n  DAT_200005d0 = value_to_set;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f94": "set_data_register_08002f94",
                "param_1": "data_register_address",
                "param_2": "unused",
                "param_3": "value_to_set"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fa0": {
            "entrypoint": "0x08002fa0",
            "current_name": "extract_memory_byte_08002fa0",
            "code": "\nundefined extractMemoryByte_08002fa0(int offset,int baseAddress)\n\n{\n  return *(undefined *)(baseAddress + offset + 0xcc);\n}\n\n",
            "renaming": {
                "FUN_08002fa0": "extract_memory_byte_08002fa0",
                "param_1": "offset",
                "param_2": "baseAddress"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_080022f8",
                "FUN_0800021a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fa8": {
            "entrypoint": "0x08002fa8",
            "current_name": "update_character_08002fa8",
            "code": "\nvoid updateCharacter_08002fa8(int baseAddress,int offset,undefined newCharacter)\n\n{\n  if (*(char *)(baseAddress + offset + 0xcc) != '\\x7f') {\n    *(undefined *)(baseAddress + offset + 0xcc) = newCharacter;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fa8": "update_character_08002fa8",
                "param_1": "baseAddress",
                "param_2": "offset",
                "param_3": "newCharacter"
            },
            "calling": [
                "FUN_080005f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fba": {
            "entrypoint": "0x08002fba",
            "current_name": "get_value_from_offset_08002fba",
            "code": "\nundefined4 get_value_from_offset_08002fba(int base_address,int offset)\n\n{\n  return *(undefined4 *)(base_address + (offset + 0x42) * 4);\n}\n\n",
            "renaming": {
                "FUN_08002fba": "get_value_from_offset_08002fba",
                "param_1": "base_address",
                "param_2": "offset"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fc2": {
            "entrypoint": "0x08002fc2",
            "current_name": "assign_value_to_pointer_08002fc2",
            "code": "\nvoid assignValueToPointer_08002fc2(int baseAddress,int offset,undefined4 value)\n\n{\n  *(undefined4 *)(baseAddress + (offset + 0x42) * 4) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fc2": "assign_value_to_pointer_08002fc2",
                "param_1": "baseAddress",
                "param_2": "offset",
                "param_3": "value"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fca": {
            "entrypoint": "0x08002fca",
            "current_name": "process_and_update_values_08002fca",
            "code": "\nvoid process_and_update_values_08002fca(undefined4 ptr_input_1,undefined4 ptr_input_2,int length,undefined4 ptr_input_3,\n                 undefined4 ptr_input_4)\n\n{\n  uint index;\n  \n  for (index = 0; (int)index < length; index = index + 1 & 0xff) {\n    FUNC_08008ac4(ptr_input_4);\n    process_value_08008a24(ptr_input_2,1);\n    FUNC_08008ac4(ptr_input_3);\n    process_value_08008a24(ptr_input_2,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fca": "process_and_update_values_08002fca",
                "param_1": "ptr_input_1",
                "param_2": "ptr_input_2",
                "param_3": "length",
                "param_4": "ptr_input_3",
                "param_5": "ptr_input_4",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08003002"
            ],
            "called": [
                "FUN_08008ac4",
                "FUN_08008a24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003002": {
            "entrypoint": "0x08003002",
            "current_name": "process_and_update_values_08003002",
            "code": "\nvoid processAndUpdateValues_08003002(int inputParam)\n\n{\n  if (*(char *)(inputParam + 0x1f8) != '\\0') {\n    return;\n  }\n  processMemory(0xd,1);\n  updateValues(inputParam,0xd,2,0x28,0xd2);\n  FUNC_08008ac4(0xfa);\n  updateValues(inputParam,0xd,5,0x28,0xd2);\n  FUNC_08008ac4(0x7d);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003002": "process_and_update_values_08003002",
                "param_1": "inputParam",
                "process_memory_08008990": "processMemory",
                "process_and_update_values_08002fca": "updateValues"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "FUN_08008ac4",
                "FUN_08002fca",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003048": {
            "entrypoint": "0x08003048",
            "current_name": "initialize_serial_and_data_processing_08003048",
            "code": "\nvoid initialize_serial_and_data_processing_08003048(undefined4 input_parameter,undefined4 serial_port_parameter,undefined4 parameter_3,undefined4 parameter_4)\n\n{\n  initialize_serial_port(&DAT_20000700,serial_port_parameter,6,parameter_4,parameter_4);\n  process_and_update_values(input_parameter);\n  initialize_data_processing(input_parameter,&DAT_20000700);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003048": "initialize_serial_and_data_processing_08003048",
                "param_1": "input_parameter",
                "param_2": "serial_port_parameter",
                "param_3": "parameter_3",
                "param_4": "parameter_4",
                "initialize_serial_port_08008c44": "initialize_serial_port",
                "process_and_update_values_08003002": "process_and_update_values",
                "initialize_data_processing_08002e26": "initialize_data_processing"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08002e26",
                "FUN_08008c44",
                "FUN_08003002"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800307a": {
            "entrypoint": "0x0800307a",
            "current_name": "decode_varint_0800307a",
            "code": "\nvoid decode_varint_0800307a(undefined4 *ptr_function,uint num_elements,byte *ptr_input,uint max_output_size)\n\n{\n  uint current_byte;\n  uint bit_position;\n  uint output_position;\n  uint input_position;\n  \n  current_byte = (uint)*ptr_input;\n  if (max_output_size == 0) {\n    max_output_size = 0xffffffff;\n  }\n  input_position = 0;\n  bit_position = 0;\n  output_position = 0;\n  while ((input_position < num_elements && (output_position < max_output_size))) {\n    (***(code ***)(undefined4 *)*ptr_function)\n              ((undefined4 *)*ptr_function,((uint)ptr_input[input_position] << (bit_position & 0xff) | current_byte) & 0x7f);\n    current_byte = (int)(uint)ptr_input[input_position] >> (7 - bit_position & 0xff) & 0xff;\n    bit_position = bit_position + 1;\n    while ((output_position = output_position + 1, 6 < bit_position && (output_position < max_output_size))) {\n      (***(code ***)(undefined4 *)*ptr_function)((undefined4 *)*ptr_function,current_byte & 0x7f);\n      current_byte = current_byte >> 7;\n      bit_position = bit_position - 7;\n    }\n    input_position = input_position + 1;\n  }\n  if ((bit_position != 0) && (output_position < max_output_size)) {\n    (***(code ***)(undefined4 *)*ptr_function)((undefined4 *)*ptr_function,(1 << (bit_position & 0xff)) - 1U & current_byte)\n    ;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800307a": "decode_varint_0800307a",
                "param_1": "ptr_function",
                "param_2": "num_elements",
                "param_3": "ptr_input",
                "param_4": "max_output_size",
                "uVar1": "current_byte",
                "uVar2": "bit_position",
                "uVar3": "output_position",
                "uVar4": "input_position"
            },
            "calling": [
                "FUN_0800325a",
                "FUN_08003158",
                "FUN_0800319e",
                "FUN_08003106",
                "FUN_080031ce"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003106": {
            "entrypoint": "0x08003106",
            "current_name": "decode_and_process_data_08003106",
            "code": "\nvoid decode_and_process_data_08003106(undefined4 *data_ptr,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  undefined4 *ptr;\n  \n  ptr = (undefined4 *)*data_ptr;\n  if (ptr != (undefined4 *)0x0) {\n    (**(code **)*ptr)(ptr,0xf0);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,0x6f);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,value1);\n    decode_varint(data_ptr,value2,value3,value2);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003106": "decode_and_process_data_08003106",
                "param_1": "data_ptr",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "puVar1": "ptr",
                "decode_varint_0800307a": "decode_varint"
            },
            "calling": [
                "FUN_08003158"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800314e": {
            "entrypoint": "0x0800314e",
            "current_name": "initialize_value_0800314e",
            "code": "\nvoid initializeValue_0800314e(undefined4 *outputPointer)\n\n{\n  *outputPointer = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800314e": "initialize_value_0800314e",
                "param_1": "outputPointer"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003154": {
            "entrypoint": "0x08003154",
            "current_name": "copy_value_to_pointer_08003154",
            "code": "\nvoid copyValueToPointer_08003154(undefined4 *destination,undefined4 value)\n\n{\n  *destination = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003154": "copy_value_to_pointer_08003154",
                "param_1": "destination",
                "param_2": "value"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003158": {
            "entrypoint": "0x08003158",
            "current_name": "process_data_08003158",
            "code": "\nvoid processData_08003158(undefined4 *dataPtr,uint size,ushort value)\n\n{\n  undefined4 *funcPtr;\n  ushort decodedValue;\n  \n  funcPtr = (undefined4 *)*dataPtr;\n  if (funcPtr != (undefined4 *)0x0) {\n    decodedValue = value;\n    if (((int)size < 0x10) && (value < 0x4000)) {\n      (**(code **)*funcPtr)(funcPtr,size | 0xe0);\n      decode_varint_0800307a(dataPtr,2,&decodedValue);\n    }\n    else {\n      decode_and_process_data_08003106(dataPtr,size,2,&decodedValue);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003158": "process_data_08003158",
                "param_1": "dataPtr",
                "param_2": "size",
                "param_3": "value",
                "puVar1": "funcPtr",
                "local_a": "decodedValue"
            },
            "calling": [
                "FUN_08002ef2"
            ],
            "called": [
                "FUN_0800307a",
                "FUN_08003106"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800319e": {
            "entrypoint": "0x0800319e",
            "current_name": "decode_and_execute_function_0800319e",
            "code": "\nvoid decode_and_execute_function_0800319e(undefined4 *function_pointer,uint flags,undefined2 input_data)\n\n{\n  undefined4 *function;\n  undefined2 output_data;\n  \n  function = (undefined4 *)*function_pointer;\n  if (function != (undefined4 *)0x0) {\n    output_data = input_data;\n    (**(code **)*function)(function,flags & 0xf | 0x90);\n    decode_varint_0800307a(function_pointer,2,&output_data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800319e": "decode_and_execute_function_0800319e",
                "param_1": "function_pointer",
                "param_2": "flags",
                "param_3": "input_data",
                "puVar1": "function",
                "local_a": "output_data"
            },
            "calling": [
                "FUN_08002efe"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080031ce": {
            "entrypoint": "0x080031ce",
            "current_name": "decode_and_process_data_080031ce",
            "code": "\nvoid decode_and_process_data_080031ce(undefined4 *data_ptr,undefined4 value_2,undefined4 value_3,uint iterations,int offset\n                 )\n\n{\n  undefined4 *pointer;\n  uint counter;\n  \n  pointer = (undefined4 *)*data_ptr;\n  if (pointer != (undefined4 *)0x0) {\n    (**(code **)*pointer)(pointer,0xf0,value_3,*(code **)*pointer,iterations);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,0x79);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,value_2);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,value_3);\n    for (counter = 0; counter < iterations; counter = counter + 1) {\n      decode_varint_0800307a(data_ptr,1,offset + counter,0);\n    }\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080031ce": "decode_and_process_data_080031ce",
                "param_1": "data_ptr",
                "param_2": "value_2",
                "param_3": "value_3",
                "param_4": "iterations",
                "param_5": "offset",
                "puVar1": "pointer",
                "uVar2": "counter"
            },
            "calling": [
                "FUN_08002df6"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800322c": {
            "entrypoint": "0x0800322c",
            "current_name": "execute_function_0800322c",
            "code": "\nvoid executeFunction_0800322c(undefined4 *functionPointer,undefined4 arg1,undefined4 arg2)\n\n{\n  undefined4 *functionPtrPtr;\n  \n  functionPtrPtr = (undefined4 *)*functionPointer;\n  if (functionPtrPtr != (undefined4 *)0x0) {\n    (**(code **)*functionPtrPtr)(functionPtrPtr,0xf9);\n    (***(code ***)(undefined4 *)*functionPointer)((undefined4 *)*functionPointer,arg1);\n    (***(code ***)(undefined4 *)*functionPointer)((undefined4 *)*functionPointer,arg2);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800322c": "execute_function_0800322c",
                "param_1": "functionPointer",
                "param_2": "arg1",
                "param_3": "arg2",
                "puVar1": "functionPtrPtr"
            },
            "calling": [
                "FUN_08002ddc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800325a": {
            "entrypoint": "0x0800325a",
            "current_name": "decode_and_process_data_0800325a",
            "code": "\nvoid decode_and_process_data_0800325a(undefined4 *data_ptr,undefined4 data_offset,uint data_length,int base_value)\n\n{\n  undefined4 *func_ptr;\n  uint index;\n  \n  func_ptr = (undefined4 *)*data_ptr;\n  if (func_ptr != (undefined4 *)0x0) {\n    (**(code **)*func_ptr)(func_ptr,0xf0);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,data_offset);\n    for (index = 0; index < data_length; index = index + 1) {\n      decode_varint_0800307a(data_ptr,1,base_value + index,0);\n    }\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800325a": "decode_and_process_data_0800325a",
                "param_1": "data_ptr",
                "param_2": "data_offset",
                "param_3": "data_length",
                "param_4": "base_value",
                "puVar1": "func_ptr",
                "uVar2": "index"
            },
            "calling": [
                "FUN_08002f0a",
                "FUN_080032a2"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032a2": {
            "entrypoint": "0x080032a2",
            "current_name": "process_data_080032a2",
            "code": "\nvoid processData_080032a2(undefined4 input,undefined4 string,undefined4 length,undefined4 output)\n\n{\n  undefined4 endOfString;\n  \n  endOfString = find_end_of_string_08000178(string);\n  decode_and_process_data_0800325a(input,0x71,endOfString,string,output);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080032a2": "process_data_080032a2",
                "param_1": "input",
                "param_2": "string",
                "param_3": "length",
                "param_4": "output",
                "uVar1": "endOfString"
            },
            "calling": [
                "FUN_08002f14"
            ],
            "called": [
                "FUN_0800325a",
                "FUN_08000178"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032bc": {
            "entrypoint": "0x080032bc",
            "current_name": "initialize_params_080032bc",
            "code": "\nvoid initializeParams_080032bc(int paramAddress,int paramValue,undefined4 paramData)\n\n{\n  *(int *)(paramAddress + 4) = paramValue;\n  *(undefined4 *)(paramAddress + 8) = paramData;\n  *(undefined *)(paramAddress + 0xc) = 0;\n  *(undefined *)(paramAddress + 0xd) = 0;\n  *(undefined4 *)(paramAddress + 0x10) = 0;\n  *(undefined *)(paramAddress + 0x14) = 0;\n  *(undefined4 *)(paramAddress + 0x18) = 0;\n  *(undefined4 *)(paramAddress + 0x1c) = 0;\n  *(undefined4 *)(paramAddress + 0x20) = 0;\n  *(undefined4 *)(paramAddress + 0x24) = 0;\n  *(undefined4 *)(paramAddress + 0x28) = 0;\n  *(undefined4 *)(paramAddress + 0x2c) = 0;\n  *(undefined4 *)(paramAddress + 0x30) = 0;\n  *(undefined4 *)(paramAddress + 0x34) = 0;\n  *(undefined4 *)(paramAddress + 0x38) = 0;\n  *(undefined4 *)(paramAddress + 0x3c) = 0;\n  *(undefined4 *)(paramAddress + 0x40) = 0;\n  *(undefined4 *)(paramAddress + 0x44) = 0;\n  *(undefined4 *)(paramAddress + 0x48) = 0;\n  *(undefined4 *)(paramAddress + 0x4c) = 0;\n  *(undefined4 *)(paramAddress + 0x50) = 0;\n  *(undefined4 *)(paramAddress + 0x54) = 0;\n  *(undefined4 *)(paramAddress + 0x58) = 0;\n  *(undefined4 *)(paramAddress + 0x5c) = 0;\n  *(undefined4 *)(paramAddress + 0x60) = 0;\n  *(undefined4 *)(paramAddress + 100) = 0;\n  *(undefined4 *)(paramAddress + 0x68) = 0;\n  *(undefined4 *)(paramAddress + 0x6c) = 0;\n  *(undefined4 *)(paramAddress + 0x70) = 0;\n  *(undefined4 *)(paramAddress + 0x74) = 0;\n  *(undefined4 *)(paramAddress + 0x78) = 0;\n  *(bool *)paramAddress = paramValue == 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080032bc": "initialize_params_080032bc",
                "param_1": "paramAddress",
                "param_2": "paramValue",
                "param_3": "paramData"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003306": {
            "entrypoint": "0x08003306",
            "current_name": "update_parameters_08003306",
            "code": "\nvoid updateParameters_08003306(int baseAddress,uint paramValue,undefined4 newValue1,undefined4 newValue2)\n\n{\n  if (paramValue == 0xd0) {\n    *(undefined4 *)(baseAddress + 0x58) = newValue1;\n    *(undefined4 *)(baseAddress + 0x28) = newValue2;\n    return;\n  }\n  if (0xd0 < paramValue) {\n    if (paramValue == 0xf4) {\n      *(undefined4 *)(baseAddress + 0x5c) = newValue1;\n      *(undefined4 *)(baseAddress + 0x2c) = newValue2;\n      return;\n    }\n    if (paramValue == 0xf5) {\n      *(undefined4 *)(baseAddress + 0x60) = newValue1;\n      *(undefined4 *)(baseAddress + 0x30) = newValue2;\n    }\n    else if (paramValue == 0xe0) {\n      *(undefined4 *)(baseAddress + 0x4c) = newValue1;\n      *(undefined4 *)(baseAddress + 0x1c) = newValue2;\n      return;\n    }\n    return;\n  }\n  if (paramValue == 0x90) {\n    *(undefined4 *)(baseAddress + 0x50) = newValue1;\n    *(undefined4 *)(baseAddress + 0x20) = newValue2;\n    return;\n  }\n  if (paramValue == 0xc0) {\n    *(undefined4 *)(baseAddress + 0x54) = newValue1;\n    *(undefined4 *)(baseAddress + 0x24) = newValue2;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003306": "update_parameters_08003306",
                "param_1": "baseAddress",
                "param_2": "paramValue",
                "param_3": "newValue1",
                "param_4": "newValue2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003346": {
            "entrypoint": "0x08003346",
            "current_name": "update_data_if_param2_equals_08003346",
            "code": "\nvoid updateDataIfParam2Equals_08003346(int dataPointer,int valueToCheck,undefined4 newValue1,undefined4 newValue2)\n\n{\n  if (valueToCheck == 0x79) {\n    *(undefined4 *)(dataPointer + 0x70) = newValue1;\n    *(undefined4 *)(dataPointer + 0x34) = newValue2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003346": "update_data_if_param2_equals_08003346",
                "param_1": "dataPointer",
                "param_2": "valueToCheck",
                "param_3": "newValue1",
                "param_4": "newValue2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003350": {
            "entrypoint": "0x08003350",
            "current_name": "update_parameters_08003350",
            "code": "\nvoid updateParameters_08003350(int ptrToUpdate,int value,undefined4 newParam3,undefined4 newParam4)\n\n{\n  if (value == 0xf9) {\n    *(undefined4 *)(ptrToUpdate + 0x74) = newParam3;\n    *(undefined4 *)(ptrToUpdate + 0x38) = newParam4;\n    return;\n  }\n  if (value != 0xff) {\n    return;\n  }\n  *(undefined4 *)(ptrToUpdate + 0x78) = newParam3;\n  *(undefined4 *)(ptrToUpdate + 0x48) = newParam4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003350": "update_parameters_08003350",
                "param_1": "ptrToUpdate",
                "param_2": "value",
                "param_3": "newParam3",
                "param_4": "newParam4"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003366": {
            "entrypoint": "0x08003366",
            "current_name": "update_parameters_08003366",
            "code": "\nvoid updateParameters_08003366(int baseAddress,int value,undefined4 newValue1,undefined4 newValue2)\n\n{\n  if (value == 0x71) {\n    *(undefined4 *)(baseAddress + 0x68) = newValue1;\n    *(undefined4 *)(baseAddress + 0x40) = newValue2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003366": "update_parameters_08003366",
                "param_1": "baseAddress",
                "param_2": "value",
                "param_3": "newValue1",
                "param_4": "newValue2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003370": {
            "entrypoint": "0x08003370",
            "current_name": "set_parameters_08003370",
            "code": "\nvoid setParameters_08003370(int objectPointer,undefined4 param2,undefined4 parameter3,undefined4 parameter4)\n\n{\n  *(undefined4 *)(objectPointer + 0x6c) = parameter3;\n  *(undefined4 *)(objectPointer + 0x44) = parameter4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003370": "set_parameters_08003370",
                "param_1": "objectPointer",
                "param_2": "param2",
                "param_3": "parameter3",
                "param_4": "parameter4"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003376": {
            "entrypoint": "0x08003376",
            "current_name": "update_data_in_memory_08003376",
            "code": "\nvoid updateDataInMemory_08003376(undefined *dataPointer,undefined newValue,uint index)\n\n{\n  bool isIndexValid;\n  \n  if (index < *(uint *)(dataPointer + 8)) {\n    isIndexValid = false;\n  }\n  else {\n    isIndexValid = true;\n    if (*(code **)(dataPointer + 100) != (code *)0x0) {\n      *dataPointer = 1;\n      (**(code **)(dataPointer + 100))(*(undefined4 *)(dataPointer + 0x3c));\n      if (index < *(uint *)(dataPointer + 8)) {\n        isIndexValid = false;\n      }\n      else {\n        isIndexValid = true;\n      }\n    }\n  }\n  if (!isIndexValid) {\n    *(undefined *)(*(int *)(dataPointer + 4) + index) = newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003376": "update_data_in_memory_08003376",
                "param_1": "dataPointer",
                "param_2": "newValue",
                "param_3": "index",
                "bVar1": "isIndexValid"
            },
            "calling": [
                "FUN_080033cc",
                "FUN_08003474"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033a8": {
            "entrypoint": "0x080033a8",
            "current_name": "copy_and_shift_bits_080033a8",
            "code": "\nvoid copyAndShiftBits_080033a8(undefined4 param,uint numBytes,int data)\n\n{\n  byte currentByte;\n  int destinationIndex;\n  uint sourceIndex;\n  \n  destinationIndex = 0;\n  for (sourceIndex = 0; sourceIndex < numBytes; sourceIndex = sourceIndex + 2) {\n    currentByte = *(byte *)(data + sourceIndex);\n    *(byte *)(data + destinationIndex) = currentByte;\n    *(byte *)(data + destinationIndex) = *(char *)(data + sourceIndex + 1) << 7 | currentByte;\n    destinationIndex = destinationIndex + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033a8": "copy_and_shift_bits_080033a8",
                "param_1": "param",
                "param_2": "numBytes",
                "param_3": "data",
                "iVar2": "destinationIndex",
                "uVar3": "sourceIndex",
                "bVar1": "currentByte"
            },
            "calling": [
                "FUN_080033cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033cc": {
            "entrypoint": "0x080033cc",
            "current_name": "process_input_080033cc",
            "code": "\nvoid processInput_080033cc(int inputData,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  char firstChar;\n  int result;\n  char *inputPointer;\n  \n  inputPointer = *(char **)(inputData + 4);\n  firstChar = *inputPointer;\n  if (firstChar == 'q') {\n    if (*(int *)(inputData + 0x68) != 0) {\n      result = copy_and_shift_bits_080033a8(inputData,*(int *)(inputData + 0x18) + -1,inputPointer + 1,inputPointer,param4);\n      update_data_in_memory_08003376(inputData,0,result + 1);\n      (**(code **)(inputData + 0x68))(*(undefined4 *)(inputData + 0x40),*(int *)(inputData + 4) + 1);\n      return;\n    }\n  }\n  else if (firstChar == 'y') {\n    if (*(code **)(inputData + 0x70) != (code *)0x0) {\n      if (*(uint *)(inputData + 0x18) < 3) {\n        (**(code **)(inputData + 0x70))(*(undefined4 *)(inputData + 0x34),0,0);\n        return;\n      }\n      result = copy_and_shift_bits_080033a8(inputData,*(uint *)(inputData + 0x18) - 3,inputPointer + 3,inputPointer,param4);\n      update_data_in_memory_08003376(inputData,0,result + 3);\n      result = *(int *)(inputData + 4);\n      (**(code **)(inputData + 0x70))\n                (*(undefined4 *)(inputData + 0x34),*(undefined *)(result + 1),*(undefined *)(result + 2)\n                 ,result + 3);\n      return;\n    }\n  }\n  else if (*(code **)(inputData + 0x6c) != (code *)0x0) {\n    (**(code **)(inputData + 0x6c))\n              (*(undefined4 *)(inputData + 0x44),firstChar,*(int *)(inputData + 0x18) + -1,inputPointer + 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033cc": "process_input_080033cc",
                "param_1": "inputData",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "cVar1": "firstChar",
                "iVar2": "result",
                "pcVar3": "inputPointer"
            },
            "calling": [
                "FUN_08003474"
            ],
            "called": [
                "FUN_08003376",
                "FUN_080033a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800344a": {
            "entrypoint": "0x0800344a",
            "current_name": "initialize_data_0800344a",
            "code": "\nvoid initializeData_0800344a(int dataPointer)\n\n{\n  uint index;\n  \n  *(undefined4 *)(dataPointer + 0x10) = 0;\n  *(undefined *)(dataPointer + 0xc) = 0;\n  *(undefined *)(dataPointer + 0xd) = 0;\n  for (index = 0; index < *(uint *)(dataPointer + 8); index = index + 1) {\n    *(undefined *)(*(int *)(dataPointer + 4) + index) = 0;\n  }\n  *(undefined *)(dataPointer + 0x14) = 0;\n  *(undefined4 *)(dataPointer + 0x18) = 0;\n  if (*(code **)(dataPointer + 0x78) != (code *)0x0) {\n    (**(code **)(dataPointer + 0x78))(*(undefined4 *)(dataPointer + 0x48));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800344a": "initialize_data_0800344a",
                "param_1": "dataPointer",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08003474"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003474": {
            "entrypoint": "0x08003474",
            "current_name": "process_data_08003474",
            "code": "\nvoid processData_08003474(int dataPointer,uint inputValue)\n\n{\n  byte byteValue;\n  \n  if (*(char *)(dataPointer + 0x14) != '\\0') {\n    if (inputValue != 0xf7) {\n      updateMemory(dataPointer,inputValue,*(undefined4 *)(dataPointer + 0x18));\n      *(int *)(dataPointer + 0x18) = *(int *)(dataPointer + 0x18) + 1;\n      return;\n    }\n    *(undefined *)(dataPointer + 0x14) = 0;\n    processInput();\n    return;\n  }\n  if ((*(int *)(dataPointer + 0x10) == 0) || (0x7f < (int)inputValue)) {\n    if ((int)inputValue < 0xf0) {\n      *(byte *)(dataPointer + 0xd) = (byte)inputValue & 0xf;\n      inputValue = inputValue & 0xf0;\n    }\n    if (inputValue == 0xf0) {\n      *(undefined *)(dataPointer + 0x14) = 1;\n      *(undefined4 *)(dataPointer + 0x18) = 0;\n      return;\n    }\n    if (inputValue < 0xf1) {\n      if (inputValue != 0xc0) {\n        if (inputValue < 0xc1) {\n          if (inputValue != 0x90) {\n            return;\n          }\n        }\n        else {\n          if (inputValue == 0xd0) goto LAB_0800359c;\n          if (inputValue != 0xe0) {\n            return;\n          }\n        }\nLAB_08003586:\n        *(undefined4 *)(dataPointer + 0x10) = 2;\n        *(char *)(dataPointer + 0xc) = (char)inputValue;\n        return;\n      }\nLAB_0800359c:\n      *(undefined4 *)(dataPointer + 0x10) = 1;\n      *(char *)(dataPointer + 0xc) = (char)inputValue;\n      return;\n    }\n    if (inputValue != 0xf9) {\n      if (0xf9 < inputValue) {\n        if (inputValue == 0xff) {\n          initializeData(dataPointer);\n          return;\n        }\n        return;\n      }\n      if (1 < inputValue - 0xf4) {\n        return;\n      }\n      goto LAB_08003586;\n    }\n    if (*(code **)(dataPointer + 0x74) != (code *)0x0) {\n      (**(code **)(dataPointer + 0x74))(*(undefined4 *)(dataPointer + 0x38));\n    }\n  }\n  else {\n    *(int *)(dataPointer + 0x10) = *(int *)(dataPointer + 0x10) + -1;\n    updateMemory();\n    if ((*(int *)(dataPointer + 0x10) == 0) && (byteValue = *(byte *)(dataPointer + 0xc), byteValue != 0)) {\n      if (byteValue == 0xd0) {\n        if (*(code **)(dataPointer + 0x58) != (code *)0x0) {\n          (**(code **)(dataPointer + 0x58))\n                    (*(undefined4 *)(dataPointer + 0x28),*(undefined *)(dataPointer + 0xd),\n                     **(undefined **)(dataPointer + 4));\n        }\n      }\n      else if (byteValue < 0xd1) {\n        if (byteValue == 0x90) {\n          if (*(code **)(dataPointer + 0x50) != (code *)0x0) {\n            (**(code **)(dataPointer + 0x50))\n                      (*(undefined4 *)(dataPointer + 0x20),*(undefined *)(dataPointer + 0xd),\n                       (uint)(*(byte **)(dataPointer + 4))[1] + (uint)**(byte **)(dataPointer + 4) * 0x80);\n          }\n        }\n        else if ((byteValue == 0xc0) && (*(code **)(dataPointer + 0x54) != (code *)0x0)) {\n          (**(code **)(dataPointer + 0x54))\n                    (*(undefined4 *)(dataPointer + 0x24),*(undefined *)(dataPointer + 0xd),\n                     **(undefined **)(dataPointer + 4));\n        }\n      }\n      else if (byteValue == 0xf4) {\n        if (*(code **)(dataPointer + 0x5c) != (code *)0x0) {\n          (**(code **)(dataPointer + 0x5c))\n                    (*(undefined4 *)(dataPointer + 0x2c),(*(undefined **)(dataPointer + 4))[1],\n                     **(undefined **)(dataPointer + 4));\n        }\n      }\n      else if (byteValue == 0xf5) {\n        if (*(code **)(dataPointer + 0x60) != (code *)0x0) {\n          (**(code **)(dataPointer + 0x60))\n                    (*(undefined4 *)(dataPointer + 0x30),(*(undefined **)(dataPointer + 4))[1],\n                     **(undefined **)(dataPointer + 4));\n        }\n      }\n      else if ((byteValue == 0xe0) && (*(code **)(dataPointer + 0x4c) != (code *)0x0)) {\n        (**(code **)(dataPointer + 0x4c))\n                  (*(undefined4 *)(dataPointer + 0x1c),*(undefined *)(dataPointer + 0xd),\n                   (uint)(*(byte **)(dataPointer + 4))[1] + (uint)**(byte **)(dataPointer + 4) * 0x80);\n      }\n      *(undefined *)(dataPointer + 0xc) = 0;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003474": "process_data_08003474",
                "param_1": "dataPointer",
                "param_2": "inputValue",
                "bVar1": "byteValue",
                "update_data_in_memory_08003376": "updateMemory",
                "process_input_080033cc": "processInput",
                "initialize_data_0800344a": "initializeData"
            },
            "calling": [
                "FUN_08002ed2"
            ],
            "called": [
                "FUN_080033cc",
                "FUN_0800344a",
                "FUN_08003376"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035b8": {
            "entrypoint": "0x080035b8",
            "current_name": "initialize_device_080035b8",
            "code": "\nvoid initializeDevice_080035b8(void)\n\n{\n  int result;\n  uint dataValue;\n  undefined4 deviceParams [2];\n  undefined4 deviceConfig;\n  undefined4 dataParam;\n  undefined4 execParam;\n  undefined4 timeParam;\n  undefined4 controlReg;\n  undefined4 dataUpdate;\n  undefined4 systemStatus [4];\n  undefined4 param1;\n  undefined4 param2;\n  undefined4 param3;\n  undefined4 param4;\n  undefined4 param5;\n  \n  systemStatus[0] = 2;\n  param1 = 1;\n  param2 = 0x10;\n  param3 = 2;\n  param4 = 0;\n  param5 = 0x380000;\n  result = check_system_status_08005460(systemStatus);\n  if (result != 0) {\n    infinite_loop_080073e8(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x88);\n  }\n  dataParam = 0xf;\n  execParam = 2;\n  timeParam = 0;\n  controlReg = 0x400;\n  dataUpdate = 0;\n  result = update_data_and_execution_time_080058ac(&dataParam);\n  if (result != 0) {\n    infinite_loop_080073e8(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x95);\n  }\n  deviceParams[0] = 2;\n  deviceConfig = 0x8000;\n  result = configure_device_08005aa4(deviceParams);\n  if (result != 0) {\n    infinite_loop_080073e8(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x9c);\n  }\n  dataValue = get_data_value_08005a1c();\n  set_param_values_08003fd8(dataValue / 1000);\n  update_control_register_08004024(4);\n  update_data_08003f30(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035b8": "initialize_device_080035b8",
                "iVar1": "result",
                "uVar2": "dataValue",
                "local_54": "deviceParams",
                "local_4c": "deviceConfig",
                "local_44": "dataParam",
                "local_40": "execParam",
                "local_3c": "timeParam",
                "local_38": "controlReg",
                "local_34": "dataUpdate",
                "local_30": "systemStatus",
                "local_20": "param1",
                "local_1c": "param2",
                "local_14": "param3",
                "local_10": "param4",
                "local_c": "param5"
            },
            "calling": [
                "FUN_080072fa"
            ],
            "called": [
                "FUN_080073e8",
                "FUN_08005460",
                "FUN_08003f30",
                "FUN_08003fd8",
                "FUN_08004024",
                "FUN_08005a1c",
                "FUN_08005aa4",
                "FUN_080058ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08003658",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_200000f4; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800ac18);\n  }\n  for (puVar2 = &DAT_200000f4; puVar2 < &DAT_20000a3c; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_hardware_080073ec();\n  execute_function_array_08009148();\n  UNRECOVERED_JUMPTABLE = (code *)0x800368a;\n  continuous_data_processing_08008f1c();\n                    /* WARNING: Could not recover jumptable at 0x0800368a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_080073ec",
                "FUN_08009148",
                "FUN_08008f1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036a2": {
            "entrypoint": "0x080036a2",
            "current_name": "initialize_devices_080036a2",
            "code": "\nvoid initialize_devices_080036a2(void)\n\n{\n  initialize_devices_080036a2_080072fa();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036a2": "initialize_devices_080036a2"
            },
            "calling": [
                "FUN_08008f0e"
            ],
            "called": [
                "FUN_080072fa"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036ac": {
            "entrypoint": "0x080036ac",
            "current_name": "check_param_080036ac",
            "code": "\nuint check_param_080036ac(int input_value)\n\n{\n  uint result;\n  \n  if ((uint)(input_value << 0x18) >> 0x1c < 5) {\n    for (result = 0; (result < 0x3c && (input_value != (char)(&DAT_0800a908)[result])); result = result + 1)\n    {\n    }\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080036ac": "check_param_080036ac",
                "param_1": "input_value",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_08000a64",
                "FUN_08000aec",
                "FUN_08000ef8",
                "FUN_080022f8",
                "FUN_0800021a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036d4": {
            "entrypoint": "0x080036d4",
            "current_name": "FUNC_080036d4",
            "code": "\nvoid FUNC_080036d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036d4": "FUNC_080036d4"
            },
            "calling": [
                "FUN_08003724"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080036d8": {
            "entrypoint": "0x080036d8",
            "current_name": "set_and_update_data_080036d8",
            "code": "\nundefined4 setAndUpdateData_080036d8(uint value)\n\n{\n  int result;\n  \n  result = set_param_values_08003fd8(DAT_20000018 / (1000 / DAT_2000000c));\n  if (result != 0) {\n    return 1;\n  }\n  if (0xf < value) {\n    return 1;\n  }\n  update_data_08003f30(0xffffffff,value,0);\n  DAT_20000010 = value;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080036d8": "set_and_update_data_080036d8",
                "param_1": "value",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08003724",
                "FUN_080058d2"
            ],
            "called": [
                "FUN_08003f30",
                "FUN_08003fd8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003724": {
            "entrypoint": "0x08003724",
            "current_name": "initialize_device_08003724",
            "code": "\n\n\nundefined4 initializeDevice_08003724(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  updateData(3);\n  setAndUpdateData(0xf);\n  FUNC_080036d4();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003724": "initialize_device_08003724",
                "update_data_08003f0c": "updateData",
                "set_and_update_data_080036d8": "setAndUpdateData"
            },
            "calling": [
                "FUN_080072fa"
            ],
            "called": [
                "FUN_080036d4",
                "FUN_080036d8",
                "FUN_08003f0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003748": {
            "entrypoint": "0x08003748",
            "current_name": "add_values_and_update_08003748",
            "code": "\nvoid addValuesAndUpdate_08003748(void)\n\n{\n  DAT_20000a34 = (uint)DAT_2000000c + DAT_20000a34;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003748": "add_values_and_update_08003748"
            },
            "calling": [
                "FUN_08007246"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003760": {
            "entrypoint": "0x08003760",
            "current_name": "get_dat_value_08003760",
            "code": "\nundefined4 get_dat_value_08003760(void)\n\n{\n  return DAT_20000a34;\n}\n\n",
            "renaming": {
                "FUN_08003760": "get_dat_value_08003760"
            },
            "calling": [
                "FUN_08003b8c",
                "FUN_08005460",
                "FUN_080067ac",
                "FUN_08008500",
                "FUN_0800376c",
                "FUN_08007e74",
                "FUN_080058d2",
                "FUN_08003a20",
                "FUN_080066e8",
                "FUN_08003e20",
                "FUN_0800723c",
                "FUN_08007f0e",
                "FUN_08005aa4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800376c": {
            "entrypoint": "0x0800376c",
            "current_name": "check_data_validity_0800376c",
            "code": "\nundefined4 checkDataValidity_0800376c(uint **dataPointer,uint maxDifference)\n\n{\n  int initialValue;\n  uint dataValue;\n  int difference;\n  undefined4 result;\n  uint *data;\n  uint calculation;\n  uint counter;\n  \n  counter = 0;\n  initialValue = get_dat_value_08003760();\n  calculation = DAT_20000018;\n  data = *dataPointer;\n  if ((data[2] & 0x100) == 0) {\n    if (((data[1] & 0x100) == 0) && ((data[0xb] & 0xf00000) == 0)) {\n      do {\n        if ((**dataPointer & 2) != 0) goto LAB_0800387e;\n      } while ((maxDifference == 0xffffffff) ||\n              ((maxDifference != 0 && (difference = get_dat_value_08003760(), (uint)(difference - initialValue) <= maxDifference))));\n      dataPointer[10] = (uint *)((uint)dataPointer[10] | 4);\n      *(undefined *)(dataPointer + 9) = 0;\n      result = 3;\n    }\n    else {\n      dataValue = calculate_data_value_08005bb8(2);\n      data = *dataPointer;\n      if (((data[4] & 0x24924924) == 0) && ((data[3] & 0x924924) == 0)) {\n        if ((data[4] & 0x12492492) == 0) {\n          if ((data[3] & 0x492492) == 0) {\n            difference = 0x14;\n          }\n          else {\n            difference = 0x29;\n          }\n        }\n        else {\n          difference = 0x29;\n        }\n      }\n      else if (((data[4] & 0x12492492) == 0) && ((data[3] & 0x492492) == 0)) {\n        difference = 0x54;\n      }\n      else if ((data[4] & 0x249249) == 0) {\n        if ((data[3] & 0x249249) == 0) {\n          difference = 0x54;\n        }\n        else {\n          difference = 0xfc;\n        }\n      }\n      else {\n        difference = 0xfc;\n      }\n      calculation = (calculation / dataValue) * difference;\n      for (; counter <= calculation && calculation - counter != 0; counter = counter + 1) {\n        if ((maxDifference != 0xffffffff) &&\n           ((maxDifference == 0 || (difference = get_dat_value_08003760(), maxDifference < (uint)(difference - initialValue))))) {\n          dataPointer[10] = (uint *)((uint)dataPointer[10] | 4);\n          *(undefined *)(dataPointer + 9) = 0;\n          return 3;\n        }\n      }\nLAB_0800387e:\n      **dataPointer = 0xffffffed;\n      dataPointer[10] = (uint *)((uint)dataPointer[10] | 0x200);\n      if (((*dataPointer)[2] & 0xe0000) == 0xe0000) {\n        if (dataPointer[3] == (uint *)0x0) {\n          dataPointer[10] = (uint *)((uint)dataPointer[10] & 0xfffffeff);\n          if (((uint)dataPointer[10] & 0x1000) == 0) {\n            dataPointer[10] = (uint *)((uint)dataPointer[10] | 1);\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    dataPointer[10] = (uint *)((uint)dataPointer[10] | 0x20);\n    *(undefined *)(dataPointer + 9) = 0;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800376c": "check_data_validity_0800376c",
                "param_1": "dataPointer",
                "param_2": "maxDifference",
                "iVar1": "initialValue",
                "uVar2": "dataValue",
                "iVar3": "difference",
                "uVar4": "result",
                "puVar5": "data",
                "uVar6": "calculation",
                "local_1c": "counter"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003760",
                "FUN_08005bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038dc": {
            "entrypoint": "0x080038dc",
            "current_name": "get_offset_080038dc",
            "code": "\nundefined4 get_offset_080038dc(int *input)\n\n{\n  return *(undefined4 *)(*input + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_080038dc": "get_offset_080038dc",
                "param_1": "input"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038e4": {
            "entrypoint": "0x080038e4",
            "current_name": "update_settings_080038e4",
            "code": "\nundefined4 updateSettings_080038e4(int *settings,uint *values)\n\n{\n  undefined4 result;\n  uint index;\n  int count;\n  \n  if (*(char *)(settings + 9) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(settings + 9) = 1;\n    index = values[1];\n    if (index < 7) {\n      index = index * 5 - 5;\n      *(uint *)(*settings + 0x34) =\n           *values << (index & 0xff) | *(uint *)(*settings + 0x34) & ~(0x1f << (index & 0xff));\n    }\n    else if (index < 0xd) {\n      index = index * 5 - 0x23;\n      *(uint *)(*settings + 0x30) =\n           *values << (index & 0xff) | *(uint *)(*settings + 0x30) & ~(0x1f << (index & 0xff));\n    }\n    else {\n      index = index * 5 - 0x41;\n      *(uint *)(*settings + 0x2c) =\n           *values << (index & 0xff) | *(uint *)(*settings + 0x2c) & ~(0x1f << (index & 0xff));\n    }\n    index = *values;\n    if (index < 10) {\n      *(uint *)(*settings + 0x10) =\n           values[2] << (index * 3 & 0xff) |\n           *(uint *)(*settings + 0x10) & ~(7 << (index * 3 & 0xff));\n    }\n    else {\n      index = index * 3 - 0x1e;\n      *(uint *)(*settings + 0xc) =\n           values[2] << (index & 0xff) | *(uint *)(*settings + 0xc) & ~(7 << (index & 0xff));\n    }\n    if (*values - 0x10 < 2) {\n      if (*settings == 0x40012400) {\n        if ((uRam40012408 & 0x800000) == 0) {\n          uRam40012408 = uRam40012408 | 0x800000;\n          if (*values == 0x10) {\n            for (count = (DAT_20000018 / 1000000) * 10; count != 0; count = count + -1) {\n            }\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        settings[10] = settings[10] | 0x20;\n        result = 1;\n      }\n    }\n    else {\n      result = 0;\n    }\n    *(undefined *)(settings + 9) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080038e4": "update_settings_080038e4",
                "param_1": "settings",
                "param_2": "values",
                "uVar1": "result",
                "uVar2": "index",
                "local_c": "count"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a1c": {
            "entrypoint": "0x08003a1c",
            "current_name": "get_value_at_offset_08003a1c",
            "code": "\nundefined4 get_value_at_offset_08003a1c(int base_address)\n\n{\n  return *(undefined4 *)(base_address + 0x28);\n}\n\n",
            "renaming": {
                "FUN_08003a1c": "get_value_at_offset_08003a1c",
                "param_1": "base_address"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a20": {
            "entrypoint": "0x08003a20",
            "current_name": "enable_data_processing_08003a20",
            "code": "\nundefined4 enableDataProcessing_08003a20(int *data,undefined4 value)\n\n{\n  int currentValue;\n  undefined4 result;\n  int datAddress;\n  uint delay;\n  \n  datAddress = *data;\n  if ((*(uint *)(datAddress + 8) & 1) == 0) {\n    *(uint *)(datAddress + 8) = *(uint *)(datAddress + 8) | 1;\n    for (delay = DAT_20000018 / 1000000; delay != 0; delay = delay - 1) {\n    }\n    datAddress = get_dat_value_08003760(data,value,DAT_20000018 * 0x431bde83);\n    do {\n      if ((*(uint *)(*data + 8) & 1) != 0) {\n        return 0;\n      }\n      currentValue = get_dat_value_08003760();\n    } while ((uint)(currentValue - datAddress) < 3);\n    data[10] = data[10] | 0x10;\n    data[0xb] = data[0xb] | 1;\n    *(undefined *)(data + 9) = 0;\n    result = 1;\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003a20": "enable_data_processing_08003a20",
                "param_1": "data",
                "param_2": "value",
                "iVar1": "currentValue",
                "iVar3": "datAddress",
                "local_14": "delay",
                "uVar2": "result"
            },
            "calling": [
                "FUN_08003e20",
                "FUN_08003aa0"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003aa0": {
            "entrypoint": "0x08003aa0",
            "current_name": "process_data_enable_08003aa0",
            "code": "\n\n\nint process_data_enable_08003aa0(int *data_array)\n\n{\n  int result;\n  undefined4 *ptr;\n  int value;\n  \n  if (*(char *)(data_array + 9) != '\\x01') {\n    *(undefined *)(data_array + 9) = 1;\n    result = enable_data_processing_08003a20();\n    if (result == 0) {\n      data_array[10] = data_array[10] & 0xfffffcfeU | 0x100;\n      ptr = (undefined4 *)*data_array;\n      if ((ptr == (undefined4 *)0x40012800) && ((_DAT_40012404 & 0xf0000) != 0)) {\n        data_array[10] = data_array[10] | 0x100000;\n        if ((_DAT_40012404 & 0x400) != 0) {\n          data_array[10] = data_array[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      else {\n        data_array[10] = data_array[10] & 0xffefffff;\n        if ((ptr[1] & 0x400) != 0) {\n          data_array[10] = data_array[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      if ((data_array[10] & 0x1000U) == 0) {\n        data_array[0xb] = 0;\n      }\n      else {\n        data_array[0xb] = data_array[0xb] & 0xfffffff9;\n      }\n      *(undefined *)(data_array + 9) = 0;\n      *ptr = 0xfffffffd;\n      value = *data_array;\n      if (((*(uint *)(value + 8) & 0xe0000) == 0xe0000) &&\n         ((value != 0x40012800 || ((_DAT_40012404 & 0xf0000) == 0)))) {\n        *(uint *)(value + 8) = *(uint *)(value + 8) | 0x500000;\n      }\n      else {\n        *(uint *)(value + 8) = *(uint *)(value + 8) | 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(data_array + 9) = 0;\n    }\n    return result;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08003aa0": "process_data_enable_08003aa0",
                "param_1": "data_array",
                "iVar1": "result",
                "puVar2": "ptr",
                "iVar3": "value"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003a20"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003b8c": {
            "entrypoint": "0x08003b8c",
            "current_name": "check_and_update_value_08003b8c",
            "code": "\nundefined4 checkAndUpdateValue_08003b8c(int *array)\n\n{\n  int value1;\n  int value2;\n  \n  value2 = *array;\n  if ((*(uint *)(value2 + 8) & 1) == 0) {\n    return 0;\n  }\n  *(uint *)(value2 + 8) = *(uint *)(value2 + 8) & 0xfffffffe;\n  value2 = get_dat_value_08003760();\n  do {\n    if ((*(uint *)(*array + 8) & 1) == 0) {\n      return 0;\n    }\n    value1 = get_dat_value_08003760();\n  } while ((uint)(value1 - value2) < 3);\n  array[10] = array[10] | 0x10;\n  array[0xb] = array[0xb] | 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003b8c": "check_and_update_value_08003b8c",
                "param_1": "array",
                "iVar1": "value1",
                "iVar2": "value2"
            },
            "calling": [
                "FUN_08003ce8",
                "FUN_08003de4",
                "FUN_08003e20",
                "FUN_08003bd8"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003bd8": {
            "entrypoint": "0x08003bd8",
            "current_name": "update_memory_permissions_08003bd8",
            "code": "\nundefined4 updateMemoryPermissions_08003bd8(int *memoryPtr)\n\n{\n  int checkResult;\n  uint combinedValues;\n  uint updatedValue;\n  \n  if (memoryPtr == (int *)0x0) {\n    return 1;\n  }\n  if (memoryPtr[10] == 0) {\n    memoryPtr[0xb] = 0;\n    *(undefined *)(memoryPtr + 9) = 0;\n    setMemoryPermissions();\n  }\n  checkResult = checkAndUpdateValue(memoryPtr);\n  if (((memoryPtr[10] & 0x10U) == 0) && (checkResult == 0)) {\n    memoryPtr[10] = memoryPtr[10] & 0xffffeefdU | 2;\n    combinedValues = memoryPtr[1] | memoryPtr[7] | memoryPtr[3] << 1;\n    if (memoryPtr[2] == 0x100) {\n      updatedValue = 0x100;\n    }\n    else {\n      updatedValue = 0;\n      if (memoryPtr[2] == 1) {\n        updatedValue = 0x100;\n      }\n    }\n    if (memoryPtr[5] == 1) {\n      if (memoryPtr[3] == 0) {\n        updatedValue = updatedValue | (memoryPtr[6] + -1) * 0x2000 | 0x800;\n      }\n      else {\n        memoryPtr[10] = memoryPtr[10] | 0x20;\n        memoryPtr[0xb] = memoryPtr[0xb] | 1;\n      }\n    }\n    *(uint *)(*memoryPtr + 4) = updatedValue | *(uint *)(*memoryPtr + 4) & 0xffff16ff;\n    *(uint *)(*memoryPtr + 8) = *(uint *)(*memoryPtr + 8) & 0xffe1f7fd | combinedValues;\n    if ((memoryPtr[2] == 0x100) || (memoryPtr[2] == 1)) {\n      updatedValue = (memoryPtr[4] + -1) * 0x100000;\n    }\n    else {\n      updatedValue = 0;\n    }\n    *(uint *)(*memoryPtr + 0x2c) = updatedValue | *(uint *)(*memoryPtr + 0x2c) & 0xff0fffff;\n    if (combinedValues != (*(uint *)(*memoryPtr + 8) & 0xff1f0efe)) {\n      memoryPtr[10] = memoryPtr[10] & 0xffffffedU | 0x10;\n      memoryPtr[0xb] = memoryPtr[0xb] | 1;\n      return 1;\n    }\n    memoryPtr[0xb] = 0;\n    memoryPtr[10] = memoryPtr[10] & 0xfffffffcU | 1;\n    return 0;\n  }\n  memoryPtr[10] = memoryPtr[10] | 0x10;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003bd8": "update_memory_permissions_08003bd8",
                "param_1": "memoryPtr",
                "iVar1": "checkResult",
                "uVar2": "combinedValues",
                "uVar3": "updatedValue",
                "set_memory_permissions_08006ca8": "setMemoryPermissions",
                "check_and_update_value_08003b8c": "checkAndUpdateValue"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c",
                "FUN_08006ca8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ce8": {
            "entrypoint": "0x08003ce8",
            "current_name": "update_value_08003ce8",
            "code": "\nint updateValue_08003ce8(int *inputArray)\n\n{\n  int returnValue;\n  \n  if (inputArray == (int *)0x0) {\n    returnValue = 1;\n  }\n  else {\n    inputArray[10] = inputArray[10] | 2;\n    returnValue = check_and_update_value_08003b8c();\n    if (returnValue == 0) {\n      *(undefined4 *)*inputArray = 0xffffffe0;\n      *(uint *)(*inputArray + 4) = *(uint *)(*inputArray + 4) & 0xff3f0000;\n      *(uint *)(*inputArray + 8) = *(uint *)(*inputArray + 8) & 0xff0106f0;\n      *(uint *)(*inputArray + 0xc) = *(uint *)(*inputArray + 0xc) & 0xff000000;\n      *(uint *)(*inputArray + 0x10) = *(uint *)(*inputArray + 0x10) & 0xc0000000;\n      *(uint *)(*inputArray + 0x14) = *(uint *)(*inputArray + 0x14) & 0xfffff000;\n      *(uint *)(*inputArray + 0x18) = *(uint *)(*inputArray + 0x18) & 0xfffff000;\n      *(uint *)(*inputArray + 0x1c) = *(uint *)(*inputArray + 0x1c) & 0xfffff000;\n      *(uint *)(*inputArray + 0x20) = *(uint *)(*inputArray + 0x20) & 0xfffff000;\n      *(uint *)(*inputArray + 0x24) = *(uint *)(*inputArray + 0x24) & 0xfffff000;\n      *(uint *)(*inputArray + 0x28) = *(uint *)(*inputArray + 0x28) & 0xfffff000;\n      *(uint *)(*inputArray + 0x2c) = *(uint *)(*inputArray + 0x2c) & 0xff000000;\n      *(uint *)(*inputArray + 0x2c) = *(uint *)(*inputArray + 0x2c) & 0xff000000;\n      *(uint *)(*inputArray + 0x30) = *(uint *)(*inputArray + 0x30) & 0xc0000000;\n      *(uint *)(*inputArray + 0x34) = *(uint *)(*inputArray + 0x34) & 0xc0000000;\n      *(uint *)(*inputArray + 0x38) = *(uint *)(*inputArray + 0x38) & 0xffc00000;\n      *(uint *)(*inputArray + 0x38) = *(uint *)(*inputArray + 0x38) & 0xffc00000;\n      update_status_registers_08006d24(inputArray);\n      inputArray[0xb] = 0;\n      inputArray[10] = 0;\n    }\n    *(undefined *)(inputArray + 9) = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08003ce8": "update_value_08003ce8",
                "param_1": "inputArray",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c",
                "FUN_08006d24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003de4": {
            "entrypoint": "0x08003de4",
            "current_name": "toggle_value_and_verify_08003de4",
            "code": "\nint toggleValueAndVerify_08003de4(int input)\n\n{\n  int result;\n  \n  if (*(char *)(input + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(input + 0x24) = 1;\n  result = verifyAndUpdateValue();\n  if (result == 0) {\n    *(uint *)(input + 0x28) = *(uint *)(input + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(input + 0x24) = 0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003de4": "toggle_value_and_verify_08003de4",
                "param_1": "input",
                "iVar1": "result",
                "check_and_update_value_08003b8c": "verifyAndUpdateValue"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e20": {
            "entrypoint": "0x08003e20",
            "current_name": "process_data_08003e20",
            "code": "\nint process_data_08003e20(int *data_ptr)\n\n{\n  uint calculation_result1;\n  int result;\n  uint calculation_result2;\n  int value1;\n  int value2;\n  int loop_counter;\n  \n  if (*(char *)(data_ptr + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(data_ptr + 9) = 1;\n  result = check_and_update_value_08003b8c();\n  if (result == 0) {\n    data_ptr[10] = data_ptr[10] & 0xffffeefdU | 2;\n    calculation_result1 = DAT_20000018;\n    calculation_result2 = calculate_data_value_08005bb8(2);\n    for (loop_counter = calculation_result1 / calculation_result2 << 1; loop_counter != 0; loop_counter = loop_counter + -1) {\n    }\n    enable_data_processing_08003a20(data_ptr);\n    *(uint *)(*data_ptr + 8) = *(uint *)(*data_ptr + 8) | 8;\n    value1 = get_dat_value_08003760();\n    while (value2 = *data_ptr, (*(uint *)(value2 + 8) & 8) != 0) {\n      value2 = get_dat_value_08003760();\n      if (10 < (uint)(value2 - value1)) {\n        data_ptr[10] = data_ptr[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data_ptr + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(value2 + 8) = *(uint *)(value2 + 8) | 4;\n    value1 = get_dat_value_08003760();\n    while ((*(uint *)(*data_ptr + 8) & 4) != 0) {\n      value2 = get_dat_value_08003760();\n      if (10 < (uint)(value2 - value1)) {\n        data_ptr[10] = data_ptr[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data_ptr + 9) = 0;\n        return 1;\n      }\n    }\n    data_ptr[10] = data_ptr[10] & 0xfffffffcU | 1;\n  }\n  *(undefined *)(data_ptr + 9) = 0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003e20": "process_data_08003e20",
                "param_1": "data_ptr",
                "uVar1": "calculation_result1",
                "iVar2": "result",
                "uVar3": "calculation_result2",
                "iVar4": "value1",
                "iVar5": "value2",
                "local_14": "loop_counter"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c",
                "FUN_08003a20",
                "FUN_08003760",
                "FUN_08005bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f0c": {
            "entrypoint": "0x08003f0c",
            "current_name": "update_data_08003f0c",
            "code": "\n\n\nvoid updateData_08003f0c(uint inputValue)\n\n{\n  _DAT_e000ed0c = (inputValue & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f0c": "update_data_08003f0c",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08003724",
                "FUN_08008f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f30": {
            "entrypoint": "0x08003f30",
            "current_name": "update_data_08003f30",
            "code": "\n\n\nvoid updateData_08003f30(uint outputAddress,uint shiftedMask,uint maskedData)\n\n{\n  uint mask;\n  uint adjustmentValue;\n  \n  mask = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  adjustmentValue = 7 - mask;\n  if (3 < adjustmentValue) {\n    adjustmentValue = 4;\n  }\n  if (mask + 4 < 7) {\n    mask = 0;\n  }\n  else {\n    mask = mask - 3;\n  }\n  mask = (shiftedMask & (1 << (adjustmentValue & 0xff)) - 1U) << (mask & 0xff) |\n          (1 << (mask & 0xff)) - 1U & maskedData;\n  if ((int)outputAddress < 0) {\n    *(char *)((outputAddress & 0xf) + 0xe000ed14) = (char)(mask << 4);\n  }\n  else {\n    *(char *)(outputAddress + 0xe000e400) = (char)(mask << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f30": "update_data_08003f30",
                "param_1": "outputAddress",
                "param_2": "shiftedMask",
                "param_3": "maskedData",
                "uVar1": "mask",
                "uVar2": "adjustmentValue"
            },
            "calling": [
                "FUN_08007648",
                "FUN_080036d8",
                "FUN_080077b0",
                "FUN_080035b8",
                "FUN_08008694",
                "FUN_0800863c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f94": {
            "entrypoint": "0x08003f94",
            "current_name": "set_bit_in_array_08003f94",
            "code": "\nvoid setBitInArray_08003f94(uint index)\n\n{\n  if (-1 < (int)index) {\n    *(int *)((index >> 5) * 4 + -0x1fff1f00) = 1 << (index & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f94": "set_bit_in_array_08003f94",
                "param_1": "index"
            },
            "calling": [
                "FUN_08007648",
                "FUN_080077b0",
                "FUN_08008694",
                "FUN_0800863c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fb0": {
            "entrypoint": "0x08003fb0",
            "current_name": "set_bit_08003fb0",
            "code": "\nvoid setBit_08003fb0(uint bitIndex)\n\n{\n  if (-1 < (int)bitIndex) {\n    *(int *)(((bitIndex >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (bitIndex & 0x1f);\n    DataSynchronizationBarrier(0xf);\n    InstructionSynchronizationBarrier(0xf);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fb0": "set_bit_08003fb0",
                "param_1": "bitIndex"
            },
            "calling": [
                "FUN_080076e0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fd8": {
            "entrypoint": "0x08003fd8",
            "current_name": "set_param_values_08003fd8",
            "code": "\n\n\nundefined4 set_param_values_08003fd8(int value)\n\n{\n  if (value - 1U < 0x1000000) {\n    _DAT_e000e014 = value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003fd8": "set_param_values_08003fd8",
                "param_1": "value"
            },
            "calling": [
                "FUN_080036d8",
                "FUN_080035b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004004": {
            "entrypoint": "0x08004004",
            "current_name": "set_bit_in_array_08004004",
            "code": "\nvoid setBitInArray_08004004(uarray index)\n\n{\n  if (-1 < (array)index) {\n    *(array *)(((index >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (index & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004004": "set_bit_in_array_08004004",
                "param_1": "index",
                "int": "array"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004024": {
            "entrypoint": "0x08004024",
            "current_name": "update_control_register_08004024",
            "code": "\n\n\nvoid updateControlRegister_08004024(int value)\n\n{\n  if (value != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004024": "update_control_register_08004024",
                "param_1": "value"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004044": {
            "entrypoint": "0x08004044",
            "current_name": "FUNC_08004044",
            "code": "\nvoid FUNC_08004044(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004044": "FUNC_08004044"
            },
            "calling": [
                "FUN_08004046"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004046": {
            "entrypoint": "0x08004046",
            "current_name": "initialize_08004046",
            "code": "\nvoid initialize_08004046(void)\n\n{\n  FUNC_08004044();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004046": "initialize_08004046"
            },
            "calling": [
                "FUN_08007246"
            ],
            "called": [
                "FUN_08004044"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004050": {
            "entrypoint": "0x08004050",
            "current_name": "initialize_data_08004050",
            "code": "\n\n\nundefined4 initializeData_08004050(uint **data)\n\n{\n  uint *selectedData;\n  \n  if (*(char *)((int)data + 0x21) != '\\x02') {\n    data[0xe] = (uint *)0x4;\n    return 1;\n  }\n  **data = **data & 0xfffffff1;\n  **data = **data & 0xfffffffe;\n  selectedData = *data;\n  if (selectedData == (uint *)0x40020008) {\n    _DAT_40020004 = 1;\n  }\n  else if (selectedData == (uint *)0x4002001c) {\n    _DAT_40020004 = 0x10;\n  }\n  else if (selectedData == (uint *)0x40020030) {\n    _DAT_40020004 = 0x100;\n  }\n  else if (selectedData == (uint *)0x40020044) {\n    _DAT_40020004 = 0x1000;\n  }\n  else if (selectedData == (uint *)0x40020058) {\n    _DAT_40020004 = 0x10000;\n  }\n  else if (selectedData == (uint *)0x4002006c) {\n    _DAT_40020004 = 0x100000;\n  }\n  else {\n    _DAT_40020004 = 0x1000000;\n  }\n  *(undefined *)((int)data + 0x21) = 1;\n  *(undefined *)(data + 8) = 0;\n  if (data[0xd] != (uint *)0x0) {\n    (*(code *)data[0xd])();\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004050": "initialize_data_08004050",
                "param_1": "data",
                "puVar1": "selectedData"
            },
            "calling": [
                "FUN_08004f3c",
                "FUN_080069ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "update_bits_080040e8",
            "code": "\n\n\nvoid updateBits_080040e8(uint *output,uint *input)\n\n{\n  uint *outputPtr;\n  uint bitMask;\n  uint inputBit;\n  uint bitPosition;\n  uint caseValue;\n  uint updatedBits;\n  int index;\n  int index2;\n  \n  updatedBits = 0;\n  bitPosition = 0;\n  do {\n    if (0xf < bitPosition) {\n      return;\n    }\n    bitMask = 1 << (bitPosition & 0xff);\n    inputBit = *input & bitMask;\n    if (bitMask == inputBit) {\n      caseValue = input[1];\n      if (caseValue == 0x12) {\n        updatedBits = input[3] + 0xc;\n      }\n      else if (caseValue < 0x13) {\n        if (caseValue == 2) {\n          updatedBits = input[3] + 8;\n        }\n        else if (caseValue < 3) {\n          if (caseValue == 0) goto LAB_0800423a;\n          if (caseValue == 1) {\n            updatedBits = input[3];\n          }\n        }\n        else if (caseValue == 3) {\n          updatedBits = 0;\n        }\n        else if (caseValue == 0x11) {\n          updatedBits = input[3] + 4;\n        }\n      }\n      else if (caseValue == 0x10210000) {\nLAB_0800423a:\n        if (input[2] == 0) {\n          updatedBits = 4;\n        }\n        else if (input[2] == 1) {\n          output[4] = bitMask;\n          updatedBits = 8;\n        }\n        else {\n          output[5] = bitMask;\n          updatedBits = 8;\n        }\n      }\n      else if (caseValue < 0x10210001) {\n        if ((caseValue == 0x10110000) || (caseValue == 0x10120000)) goto LAB_0800423a;\n      }\n      else if ((caseValue == 0x10310000) || ((caseValue == 0x10320000 || (caseValue == 0x10220000))))\n      goto LAB_0800423a;\n      bitMask = bitPosition;\n      outputPtr = output;\n      if (0xff < inputBit) {\n        bitMask = bitPosition - 8;\n        outputPtr = output + 1;\n      }\n      *outputPtr = *outputPtr & ~(0xf << (bitMask << 2 & 0xff)) | updatedBits << (bitMask << 2 & 0xff);\n      if ((input[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        index = (bitPosition & 3) << 2;\n        if (output == (uint *)0x40010800) {\n          index2 = 0;\n        }\n        else if (output == (uint *)0x40010c00) {\n          index2 = 1;\n        }\n        else if (output == (uint *)0x40011000) {\n          index2 = 2;\n        }\n        else if (output == (uint *)0x40011400) {\n          index2 = 3;\n        }\n        else {\n          index2 = 4;\n        }\n        *(uint *)(((bitPosition >> 2) + 2) * 4 + 0x40010000) =\n             *(uint *)(((bitPosition >> 2) + 2) * 4 + 0x40010000) & ~(0xf << index) | index2 << index;\n        if ((input[1] & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~inputBit;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | inputBit;\n        }\n        if ((input[1] & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~inputBit;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | inputBit;\n        }\n        if ((input[1] & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~inputBit;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | inputBit;\n        }\n        if ((input[1] & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~inputBit;\n        }\n        else {\n          _DAT_4001040c = inputBit | _DAT_4001040c;\n        }\n      }\n    }\n    bitPosition = bitPosition + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080040e8": "update_bits_080040e8",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "outputPtr",
                "uVar2": "bitMask",
                "uVar3": "inputBit",
                "uVar4": "bitPosition",
                "uVar5": "caseValue",
                "uVar6": "updatedBits",
                "iVar7": "index",
                "iVar8": "index2"
            },
            "calling": [
                "FUN_08006ca8",
                "FUN_08007258",
                "FUN_08006e68",
                "FUN_080077b0",
                "FUN_08008078"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042d4": {
            "entrypoint": "0x080042d4",
            "current_name": "check_parameter_080042d4",
            "code": "\nundefined4 check_parameter_080042d4(int input_value,uint bitmask)\n\n{\n  if ((bitmask & *(uint *)(input_value + 8)) == 0) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080042d4": "check_parameter_080042d4",
                "param_1": "input_value",
                "param_2": "bitmask"
            },
            "calling": [
                "FUN_080072f0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042e2": {
            "entrypoint": "0x080042e2",
            "current_name": "update_value_080042e2",
            "code": "\nvoid updateValue_080042e2(int dataPointer,int newValue,int conditionalFlag)\n\n{\n  if (conditionalFlag == 0) {\n    *(int *)(dataPointer + 0x10) = newValue << 0x10;\n    return;\n  }\n  *(int *)(dataPointer + 0x10) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042e2": "update_value_080042e2",
                "param_1": "dataPointer",
                "param_2": "newValue",
                "param_3": "conditionalFlag"
            },
            "calling": [
                "FUN_080072d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042f0": {
            "entrypoint": "0x080042f0",
            "current_name": "update_and_execute_command_080042f0",
            "code": "\n\n\nvoid update_and_execute_command_080042f0(uint command)\n\n{\n  if ((_DAT_40010414 & command) != 0) {\n    _DAT_40010414 = command;\n    execute_command_if_valid();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042f0": "update_and_execute_command_080042f0",
                "param_1": "command",
                "check_and_execute_command_08009094": "execute_command_if_valid"
            },
            "calling": [],
            "called": [
                "FUN_08009094"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800430c": {
            "entrypoint": "0x0800430c",
            "current_name": "set_flag_based_on_conditions_0800430c",
            "code": "\nundefined4 setFlagBasedOnConditions_0800430c(int *array)\n\n{\n  if (*(char *)((int)array + 0x3e) == '@') {\n    if (arrayValue1 == 0) {\n      *(uint *)(*array + 0x10) = arrayValue2 & 0xfe;\n    }\n    else {\n      *(uint *)(*array + 0x10) = arrayValue2 & 0xffU | 1;\n    }\n  }\n  else if (array[4] == 0x4000) {\n    if (*(char *)((int)array + 0x3d) == '!') {\n      *(uint *)(*array + 0x10) = arrayValue2 & 0xfe;\n    }\n    else {\n      *(uint *)(*array + 0x10) = arrayValue2 & 0xffU | 1;\n    }\n  }\n  else if (arrayValue1 == 0) {\n    *(uint *)(*array + 0x10) = (uint)(arrayValue2 << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (arrayValue1 == 1) {\n    *(uint *)(*array + 0x10) = (uint)(arrayValue2 << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800430c": "set_flag_based_on_conditions_0800430c",
                "param_1": "array",
                "param_1[0x14]": "arrayValue1",
                "param_1[0x11]": "arrayValue2"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004396": {
            "entrypoint": "0x08004396",
            "current_name": "copy_value_to_memory_08004396",
            "code": "\nundefined4 copyValueToMemory_08004396(int *dataPointer)\n\n{\n  *(uint *)(*dataPointer + 0x10) = dataValue & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004396": "copy_value_to_memory_08004396",
                "param_1": "dataPointer",
                "param_1[0x11]": "dataValue"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043a2": {
            "entrypoint": "0x080043a2",
            "current_name": "process_input_080043a2",
            "code": "\nundefined4 process_input_080043a2(uint **input_params)\n\n{\n  uint *temp_ptr;\n  \n  temp_ptr = input_params[0xb];\n  if ((*(char *)((int)input_params + 0x3d) == '\\\"') &&\n     ((ptr1 != (uint *)0x0 || (*(char *)((int)input_params + 0x3e) != '@')))) {\n    if ((ptr1 == (uint *)0x0) && (ptr2 == (uint *)0xc000)) {\n      **input_params = **input_params | 0x100;\n      ptr1 = (uint *)((int)ptr1 + 1);\n    }\n    else {\n      if (*(short *)((int)input_params + 0x2a) == 0) {\n        **input_params = **input_params | 0x200;\n      }\n      else if (*(short *)((int)input_params + 0x2a) == 1) {\n        if (temp_ptr == (uint *)0xffff0000) {\n          **input_params = **input_params & 0xfffffbff;\n          temp_ptr = *input_params;\n          if ((temp_ptr[1] & 0x800) == 0) {\n            *temp_ptr = *temp_ptr | 0x200;\n          }\n          else {\n            *temp_ptr = *temp_ptr & 0xfffffbff;\n          }\n        }\n        else if (((temp_ptr == (uint *)0x4) || (temp_ptr == (uint *)0x8)) ||\n                (input_params[0xc] == (uint *)0x12)) {\n          **input_params = **input_params & 0xfffffbff;\n          **input_params = **input_params | 0x200;\n        }\n        else if (input_params[0xb] == (uint *)0x2) {\n          **input_params = **input_params | 0x400;\n        }\n        else {\n          **input_params = **input_params & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)input_params + 0x2a) == 2) {\n        if (input_params[0xb] == (uint *)0x2) {\n          **input_params = **input_params | 0x400;\n        }\n        else {\n          **input_params = **input_params | 0x800;\n          **input_params = **input_params & 0xfffffbff;\n        }\n        temp_ptr = *input_params;\n        if ((temp_ptr[1] & 0x800) != 0) {\n          temp_ptr[1] = temp_ptr[1] | 0x1000;\n        }\n      }\n      else {\n        **input_params = **input_params | 0x400;\n        temp_ptr = *input_params;\n        if ((temp_ptr[1] & 0x800) != 0) {\n          temp_ptr[1] = temp_ptr[1] | 0x1000;\n        }\n      }\n      ptr1 = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080043a2": "process_input_080043a2",
                "param_1": "input_params",
                "puVar1": "temp_ptr",
                "param_1[0x14]": "ptr1",
                "param_1[4]": "ptr2"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800457c": {
            "entrypoint": "0x0800457c",
            "current_name": "update_data_from_buffer_0800457c",
            "code": "\nundefined4 updateDataFromBuffer_0800457c(int *dataBuffer)\n\n{\n  byte *bytePointer;\n  \n  if (*(short *)((int)dataBuffer + 0x2a) != 0) {\n    bytePointer = (byte *)dataBuffer[9];\n    dataBuffer[9] = (int)(bytePointer + 1);\n    *(uint *)(*dataBuffer + 0x10) = (uint)*bytePointer;\n    *(short *)((int)dataBuffer + 0x2a) = *(short *)((int)dataBuffer + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800457c": "update_data_from_buffer_0800457c",
                "param_1": "dataBuffer",
                "pbVar1": "bytePointer"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800459c": {
            "entrypoint": "0x0800459c",
            "current_name": "update_value_and_decrement_0800459c",
            "code": "\nundefined4 updateValueAndDecrement_0800459c(int *data)\n\n{\n  undefined *targetPointer;\n  \n  if (*(short *)((int)data + 0x2a) != 0) {\n    targetPointer = (undefined *)data[9];\n    data[9] = (int)(targetPointer + 1);\n    *targetPointer = (char)*(undefined4 *)(*data + 0x10);\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800459c": "update_value_and_decrement_0800459c",
                "param_1": "data",
                "puVar1": "targetPointer"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080045bc": {
            "entrypoint": "0x080045bc",
            "current_name": "FUNC_080045bc",
            "code": "\nvoid FUNC_080045bc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080045bc": "FUNC_080045bc"
            },
            "calling": [
                "FUN_080045c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080045c0": {
            "entrypoint": "0x080045c0",
            "current_name": "calculate_values_080045c0",
            "code": "\nundefined4 calculateValues_080045c0(uint **param)\n\n{\n  bool isWithinRange;\n  uint dataValue;\n  uint *shiftedData;\n  uint quotient;\n  \n  if (param == (uint **)0x0) {\n    return 1;\n  }\n  if (*(char *)((int)param + 0x3d) == '\\0') {\n    *(undefined *)(param + 0xf) = 0;\n    FUNC_080045bc();\n  }\n  *(undefined *)((int)param + 0x3d) = 0x24;\n  **param = **param & 0xfffffffe;\n  dataValue = get_shifted_data_value_08005a28();\n  if (param[1] < (uint *)0x186a1) {\n    if (dataValue < 2000000) {\n      isWithinRange = true;\n    }\n    else {\n      isWithinRange = false;\n    }\n  }\n  else {\n    isWithinRange = dataValue < 4000000;\n  }\n  if (isWithinRange) {\n    return 1;\n  }\n  quotient = dataValue / 1000000;\n  (*param)[1] = quotient;\n  if ((uint *)0x186a0 < param[1]) {\n    quotient = (quotient * 300) / 1000;\n  }\n  (*param)[8] = quotient + 1;\n  shiftedData = param[1];\n  if (shiftedData < (uint *)0x186a1) {\n    dataValue = (dataValue - 1) / (uint)((int)shiftedData << 1) + 1 & 0xfff;\n    if (dataValue < 4) {\n      dataValue = 4;\n    }\n  }\n  else {\n    if (param[2] == (uint *)0x0) {\n      quotient = (dataValue - 1) / (uint)((int)shiftedData * 3);\n    }\n    else {\n      quotient = (dataValue - 1) / (uint)((int)shiftedData * 0x19);\n    }\n    if ((quotient + 1 & 0xfff) == 0) {\n      dataValue = 1;\n    }\n    else if (param[2] == (uint *)0x0) {\n      dataValue = (dataValue - 1) / (uint)((int)shiftedData * 3) + 1 & 0xfff | 0x8000;\n    }\n    else {\n      dataValue = (dataValue - 1) / (uint)((int)shiftedData * 0x19) + 1 & 0xfff | 0xc000;\n    }\n  }\n  (*param)[7] = dataValue;\n  **param = (uint)param[7] | (uint)param[8];\n  (*param)[2] = (uint)param[4] | (uint)param[3];\n  (*param)[3] = (uint)param[5] | (uint)param[6];\n  **param = **param | 1;\n  param[0x10] = (uint *)0x0;\n  *(undefined *)((int)param + 0x3d) = 0x20;\n  param[0xc] = (uint *)0x0;\n  *(undefined *)((int)param + 0x3e) = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080045c0": "calculate_values_080045c0",
                "param_1": "param",
                "bVar1": "isWithinRange",
                "uVar2": "dataValue",
                "puVar3": "shiftedData",
                "uVar4": "quotient"
            },
            "calling": [
                "FUN_080077b0"
            ],
            "called": [
                "FUN_08005a28",
                "FUN_080045bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004728": {
            "entrypoint": "0x08004728",
            "current_name": "check_and_update_08004728",
            "code": "\nundefined4 checkAndUpdate_08004728(uint **data,uint *param1,uint *param2,undefined2 param3)\n\n{\n  undefined4 result;\n  uint *ptr;\n  int count;\n  \n  if (*(char *)((int)data + 0x3d) == ' ') {\n    count = (DAT_20000018 / 25000) * 0x19;\n    do {\n      if (count == 0) {\n        data[0xc] = (uint *)0x0;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        *(undefined *)(data + 0xf) = 0;\n        return 3;\n      }\n      ptr = *data;\n      count = count + -1;\n    } while ((ptr[6] & 2) != 0);\n    if (*(char *)(data + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(data + 0xf) = 1;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **data = **data & 0xfffff7ff;\n      *(undefined *)((int)data + 0x3d) = 0x21;\n      *(undefined *)((int)data + 0x3e) = 0x10;\n      result = 0;\n      data[0x10] = (uint *)0x0;\n      data[9] = param2;\n      *(undefined2 *)((int)data + 0x2a) = param3;\n      data[0xb] = (uint *)0xffff0000;\n      *(undefined2 *)(data + 10) = *(undefined2 *)((int)data + 0x2a);\n      data[0x11] = param1;\n      **data = **data | 0x100;\n      *(undefined *)(data + 0xf) = 0;\n      (*data)[1] = (*data)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004728": "check_and_update_08004728",
                "param_1": "data",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "uVar1": "result",
                "puVar2": "ptr",
                "local_c": "count"
            },
            "calling": [
                "FUN_08007e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047f4": {
            "entrypoint": "0x080047f4",
            "current_name": "check_and_modify_params_080047f4",
            "code": "\nundefined4 checkAndModifyParams_080047f4(uint **pointerArray,uint *paramArray1,uint *paramArray2,undefined2 param2Bits)\n\n{\n  undefined4 returnValue;\n  uint *pointerVar;\n  int loopCounter;\n  \n  if (*(char *)((int)pointerArray + 0x3d) == ' ') {\n    loopCounter = (DAT_20000018 / 25000) * 0x19;\n    do {\n      if (loopCounter == 0) {\n        pointerArray[0xc] = (uint *)0x0;\n        *(undefined *)((int)pointerArray + 0x3d) = 0x20;\n        *(undefined *)(pointerArray + 0xf) = 0;\n        return 3;\n      }\n      pointerVar = *pointerArray;\n      loopCounter = loopCounter + -1;\n    } while ((pointerVar[6] & 2) != 0);\n    if (*(char *)(pointerArray + 0xf) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(pointerArray + 0xf) = 1;\n      if ((*pointerVar & 1) == 0) {\n        *pointerVar = *pointerVar | 1;\n      }\n      **pointerArray = **pointerArray & 0xfffff7ff;\n      *(undefined *)((int)pointerArray + 0x3d) = 0x22;\n      *(undefined *)((int)pointerArray + 0x3e) = 0x10;\n      returnValue = 0;\n      pointerArray[0x10] = (uint *)0x0;\n      pointerArray[9] = paramArray2;\n      *(undefined2 *)((int)pointerArray + 0x2a) = param2Bits;\n      pointerArray[0xb] = (uint *)0xffff0000;\n      *(undefined2 *)(pointerArray + 10) = *(undefined2 *)((int)pointerArray + 0x2a);\n      pointerArray[0x11] = paramArray1;\n      **pointerArray = **pointerArray | 0x400;\n      **pointerArray = **pointerArray | 0x100;\n      *(undefined *)(pointerArray + 0xf) = 0;\n      (*pointerArray)[1] = (*pointerArray)[1] | 0x700;\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080047f4": "check_and_modify_params_080047f4",
                "param_1": "pointerArray",
                "param_2": "paramArray1",
                "param_3": "paramArray2",
                "param_4": "param2Bits",
                "uVar1": "returnValue",
                "puVar2": "pointerVar",
                "local_c": "loopCounter"
            },
            "calling": [
                "FUN_08007f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048c8": {
            "entrypoint": "0x080048c8",
            "current_name": "validate_parameters_080048c8",
            "code": "\nundefined4 validate_parameters_080048c8(uint **param_array,uint *input_param1,int input_param2,uint *input_param3)\n\n{\n  undefined4 result;\n  uint *pointer_var;\n  \n  if (*(char *)((int)param_array + 0x3d) == '(') {\n    if (input_param1 == (uint *)0x0) {\n      result = 1;\n    }\n    else if (input_param2 == 0) {\n      result = 1;\n    }\n    else if (*(char *)(param_array + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(param_array + 0xf) = 1;\n      pointer_var = *param_array;\n      if ((*pointer_var & 1) == 0) {\n        *pointer_var = *pointer_var | 1;\n      }\n      **param_array = **param_array & 0xfffff7ff;\n      *(undefined *)((int)param_array + 0x3d) = 0x29;\n      *(undefined *)((int)param_array + 0x3e) = 0x20;\n      result = 0;\n      param_array[0x10] = (uint *)0x0;\n      param_array[9] = input_param1;\n      *(short *)((int)param_array + 0x2a) = (short)input_param2;\n      param_array[0xb] = input_param3;\n      *(undefined2 *)(param_array + 10) = *(undefined2 *)((int)param_array + 0x2a);\n      *(undefined *)(param_array + 0xf) = 0;\n      (*param_array)[1] = (*param_array)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080048c8": "validate_parameters_080048c8",
                "param_1": "param_array",
                "param_2": "input_param1",
                "param_3": "input_param2",
                "param_4": "input_param3",
                "uVar1": "result",
                "puVar2": "pointer_var"
            },
            "calling": [
                "FUN_08007fa0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004954": {
            "entrypoint": "0x08004954",
            "current_name": "validate_and_configure_08004954",
            "code": "\nundefined4 validate_and_configure_08004954(uint **config,uint *data,int length,uint *buffer)\n\n{\n  undefined4 result;\n  uint *flagPtr;\n  \n  if (*(char *)((int)config + 0x3d) == '(') {\n    if (data == (uint *)0x0) {\n      result = 1;\n    }\n    else if (length == 0) {\n      result = 1;\n    }\n    else if (*(char *)(config + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(config + 0xf) = 1;\n      flagPtr = *config;\n      if ((*flagPtr & 1) == 0) {\n        *flagPtr = *flagPtr | 1;\n      }\n      **config = **config & 0xfffff7ff;\n      *(undefined *)((int)config + 0x3d) = 0x2a;\n      *(undefined *)((int)config + 0x3e) = 0x20;\n      result = 0;\n      config[0x10] = (uint *)0x0;\n      config[9] = data;\n      *(short *)((int)config + 0x2a) = (short)length;\n      config[0xb] = buffer;\n      *(undefined2 *)(config + 10) = *(undefined2 *)((int)config + 0x2a);\n      *(undefined *)(config + 0xf) = 0;\n      (*config)[1] = (*config)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004954": "validate_and_configure_08004954",
                "param_1": "config",
                "param_2": "data",
                "param_3": "length",
                "param_4": "buffer",
                "uVar1": "result",
                "puVar2": "flagPtr"
            },
            "calling": [
                "FUN_08007fa0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049e0": {
            "entrypoint": "0x080049e0",
            "current_name": "set_flags_and_values_080049e0",
            "code": "\nundefined4 setFlagsAndValues_080049e0(uint **data)\n\n{\n  uint *ptr;\n  \n  if (*(char *)((int)data + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)data + 0x3d) = 0x28;\n  ptr = *data;\n  if ((*ptr & 1) == 0) {\n    *ptr = *ptr | 1;\n  }\n  **data = **data | 0x400;\n  (*data)[1] = (*data)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080049e0": "set_flags_and_values_080049e0",
                "param_1": "data",
                "puVar1": "ptr"
            },
            "calling": [
                "FUN_08007f7c",
                "FUN_08008020",
                "FUN_08007f8e",
                "FUN_08007ff0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a1e": {
            "entrypoint": "0x08004a1e",
            "current_name": "FUNC_08004a1e",
            "code": "\nvoid FUNC_08004a1e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a1e": "FUNC_08004a1e"
            },
            "calling": [
                "FUN_08004ccc",
                "FUN_08004b82"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a20": {
            "entrypoint": "0x08004a20",
            "current_name": "FUNC_08004a20",
            "code": "\nvoid FUNC_08004a20(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a20": "FUNC_08004a20"
            },
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a22": {
            "entrypoint": "0x08004a22",
            "current_name": "FUNC_08004a22",
            "code": "\nvoid FUNC_08004a22(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a22": "FUNC_08004a22"
            },
            "calling": [
                "FUN_08004a24",
                "FUN_08004aec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a24": {
            "entrypoint": "0x08004a24",
            "current_name": "update_data_08004a24",
            "code": "\nundefined4 updateData_08004a24(int *data)\n\n{\n  char firstChar;\n  byte *bytePtr;\n  \n  firstChar = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    bytePtr = (byte *)data[9];\n    data[9] = (int)(bytePtr + 1);\n    *(uint *)(*data + 0x10) = (uint)*bytePtr;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (firstChar == ')')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x21;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      FUNC_08004a22();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004a24": "update_data_08004a24",
                "param_1": "data",
                "cVar1": "firstChar",
                "pbVar2": "bytePtr"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a22"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a74": {
            "entrypoint": "0x08004a74",
            "current_name": "FUNC_08004a74",
            "code": "\nvoid FUNC_08004a74(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a74": "FUNC_08004a74"
            },
            "calling": [
                "FUN_08004a76",
                "FUN_08005084"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a76": {
            "entrypoint": "0x08004a76",
            "current_name": "process_input_08004a76",
            "code": "\nundefined4 processInput_08004a76(int *inputArray)\n\n{\n  char charValue;\n  undefined *ptr;\n  \n  charValue = *(char *)((int)inputArray + 0x3d);\n  if (*(short *)((int)inputArray + 0x2a) != 0) {\n    ptr = (undefined *)ptrArray;\n    ptrArray = (int)(ptr + 1);\n    *ptr = (char)*(undefined4 *)(*inputArray + 0x10);\n    *(short *)((int)inputArray + 0x2a) = *(short *)((int)inputArray + 0x2a) + -1;\n    if ((*(short *)((int)inputArray + 0x2a) == 0) && (charValue == '*')) {\n      *(uint *)(*inputArray + 4) = *(uint *)(*inputArray + 4) & 0xfffffbff;\n      flag = 0x22;\n      *(undefined *)((int)inputArray + 0x3d) = 0x28;\n      FUNC_08004a74();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004a76": "process_input_08004a76",
                "param_1": "inputArray",
                "cVar1": "charValue",
                "puVar2": "ptr",
                "param_1[9]": "ptrArray",
                "param_1[0xc]": "flag"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ac2": {
            "entrypoint": "0x08004ac2",
            "current_name": "process_parameters_08004ac2",
            "code": "\nundefined4 process_parameters_08004ac2(int *parameter_1,undefined4 parameter_2,undefined4 parameter_3,undefined4 parameter_4)\n\n{\n  undefined2 selected_value;\n  uint param_value;\n  \n  param_value = *(uint *)(*parameter_1 + 0x18);\n  if ((param_value & 0x80) == 0) {\n    selected_value = *(undefined2 *)(parameter_1 + 3);\n  }\n  else {\n    selected_value = *(undefined2 *)(parameter_1 + 6);\n  }\n  process_parameters_08004ac2_08007fa0(parameter_1,(*(uint *)(*parameter_1 + 0x18) & 4) == 0,selected_value,param_value,parameter_4);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004ac2": "process_parameters_08004ac2",
                "param_1": "parameter_1",
                "param_2": "parameter_2",
                "param_3": "parameter_3",
                "param_4": "parameter_4",
                "uVar1": "selected_value",
                "uVar2": "param_value"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08007fa0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004aec": {
            "entrypoint": "0x08004aec",
            "current_name": "process_condition_08004aec",
            "code": "\nundefined4 processCondition_08004aec(uint **parameters)\n\n{\n  if (((condition_value == (uint *)0x4) || (condition_value == (uint *)0x8)) &&\n     (*(char *)(param_1_address + 0x3d) == '(')) {\n    condition_value = (uint *)0xffff0000;\n    (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n    (*parameters)[5] = 0xfffffbff;\n    **parameters = **parameters & 0xfffffbff;\n    value = (uint *)0x0;\n    *(undefined *)(param_1_address + 0x3d) = 0x20;\n    *(undefined *)(param_1_address + 0x3e) = 0;\n    execute_conditionally_08007ff0();\n  }\n  else if (*(char *)(param_1_address + 0x3d) == '!') {\n    condition_value = (uint *)0xffff0000;\n    value = (uint *)0x21;\n    *(undefined *)(param_1_address + 0x3d) = 0x20;\n    *(undefined *)(param_1_address + 0x3e) = 0;\n    (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n    (*parameters)[5] = 0xfffffbff;\n    **parameters = **parameters & 0xfffffbff;\n    FUNC_08004a22();\n  }\n  else {\n    (*parameters)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004aec": "process_condition_08004aec",
                "param_1": "parameters",
                "(int)param_1": "param_1_address",
                "param_1[0xb]": "condition_value",
                "param_1[0xc]": "value"
            },
            "calling": [
                "FUN_080052f0"
            ],
            "called": [
                "FUN_08004a22",
                "FUN_08007ff0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b80": {
            "entrypoint": "0x08004b80",
            "current_name": "FUNC_08004b80",
            "code": "\nvoid FUNC_08004b80(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b80": "FUNC_08004b80"
            },
            "calling": [
                "FUN_08004ccc",
                "FUN_08004b82"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004b82": {
            "entrypoint": "0x08004b82",
            "current_name": "decode_and_process_payload_08004b82",
            "code": "\nundefined4 decode_and_process_payload_08004b82(uint **payload)\n\n{\n  char first_char;\n  uint *pointer;\n  \n  first_char = *(char *)((int)payload + 0x3d);\n  pointer = payload[0xb];\n  if ((*(short *)(payload + 10) == 0) && (first_char == '!')) {\n    if ((pointer == (uint *)0x4) || ((pointer == (uint *)0x8 || (pointer == (uint *)0xffff0000)))) {\n      (*payload)[1] = (*payload)[1] & 0xfffff8ff;\n      **payload = **payload | 0x200;\n      payload[0xc] = (uint *)0x0;\n      *(undefined *)((int)payload + 0x3d) = 0x20;\n      if (*(char *)((int)payload + 0x3e) == '@') {\n        *(undefined *)((int)payload + 0x3e) = 0;\n        FUNC_08004b80();\n      }\n      else {\n        *(undefined *)((int)payload + 0x3e) = 0;\n        FUNC_08004a1e();\n      }\n    }\n    else {\n      (*payload)[1] = (*payload)[1] & 0xfffff8ff;\n      payload[0xc] = (uint *)0x11;\n      *(undefined *)((int)payload + 0x3e) = 0;\n      *(undefined *)((int)payload + 0x3d) = 0x20;\n      FUNC_08004a1e();\n    }\n  }\n  else if ((first_char == '!') || ((*(char *)((int)payload + 0x3e) == '@' && (first_char == '\\\"')))) {\n    if (*(short *)((int)payload + 0x2a) == 0) {\n      (*payload)[1] = (*payload)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)payload + 0x3e) == '@') {\n      if (payload[0x14] == (uint *)0x0) {\n        if (payload[0x13] == (uint *)0x1) {\n          (*payload)[4] = (uint)payload[0x12] & 0xff;\n          payload[0x14] = (uint *)((int)payload[0x14] + 2);\n        }\n        else {\n          (*payload)[4] = (uint)((int)payload[0x12] << 0x10) >> 0x18;\n          payload[0x14] = (uint *)((int)payload[0x14] + 1);\n        }\n      }\n      else if (payload[0x14] == (uint *)0x1) {\n        (*payload)[4] = (uint)payload[0x12] & 0xff;\n        payload[0x14] = (uint *)((int)payload[0x14] + 1);\n      }\n      else if (payload[0x14] == (uint *)0x2) {\n        if (*(char *)((int)payload + 0x3d) == '\\\"') {\n          **payload = **payload | 0x100;\n        }\n        else if (*(char *)((int)payload + 0x3d) == '!') {\n          pointer = payload[9];\n          payload[9] = (uint *)((int)pointer + 1);\n          (*payload)[4] = (uint)*(byte *)pointer;\n          *(short *)((int)payload + 0x2a) = *(short *)((int)payload + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      pointer = payload[9];\n      payload[9] = (uint *)((int)pointer + 1);\n      (*payload)[4] = (uint)*(byte *)pointer;\n      *(short *)((int)payload + 0x2a) = *(short *)((int)payload + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004b82": "decode_and_process_payload_08004b82",
                "param_1": "payload",
                "cVar1": "first_char",
                "puVar2": "pointer"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a1e",
                "FUN_08004b80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "handle_input_08004ccc",
            "code": "\nundefined4 handleInput_08004ccc(uint **param_1)\n\n{\n  uint *ptr;\n  \n  ptr = ptr_value1;\n  if (*(char *)((int)param_1 + 0x3d) == '!') {\n    if (*(short *)((int)param_1 + 0x2a) == 0) {\n      if (((ptr == (uint *)0x4) || (ptr == (uint *)0x8)) || (ptr == (uint *)0xffff0000)) {\n        (*param_1)[1] = (*param_1)[1] & 0xfffff8ff;\n        **param_1 = **param_1 | 0x200;\n        param1_value3 = (uint *)0x0;\n        *(undefined *)((int)param_1 + 0x3d) = 0x20;\n        if (*(char *)((int)param_1 + 0x3e) == '@') {\n          *(undefined *)((int)param_1 + 0x3e) = 0;\n          FUNC_08004b80();\n        }\n        else {\n          *(undefined *)((int)param_1 + 0x3e) = 0;\n          FUNC_08004a1e();\n        }\n      }\n      else {\n        (*param_1)[1] = (*param_1)[1] & 0xfffff8ff;\n        param1_value3 = (uint *)0x11;\n        *(undefined *)((int)param_1 + 0x3e) = 0;\n        *(undefined *)((int)param_1 + 0x3d) = 0x20;\n        FUNC_08004a1e();\n      }\n    }\n    else {\n      ptr = ptr_value2;\n      ptr_value2 = (uint *)((int)ptr + 1);\n      (*param_1)[4] = (uint)*(byte *)ptr;\n      *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "handle_input_08004ccc",
                "puVar1": "ptr",
                "param_1[0xb]": "ptr_value1",
                "param_1[9]": "ptr_value2",
                "param_1[0xc]": "param1_value3"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a1e",
                "FUN_08004b80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d6a": {
            "entrypoint": "0x08004d6a",
            "current_name": "FUNC_08004d6a",
            "code": "\nvoid FUNC_08004d6a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d6a": "FUNC_08004d6a"
            },
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004d6c": {
            "entrypoint": "0x08004d6c",
            "current_name": "process_parameter_08004d6c",
            "code": "\nundefined4 processParameter_08004d6c(uint **parameter)\n\n{\n  uint *tempVar1;\n  \n  if (*(char *)((int)parameter + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)parameter + 0x2a) < 4) {\n      if (*(ushort *)((int)parameter + 0x2a) - 2 < 2) {\n        if (parameter[0xb] == (uint *)0x2) {\n          **parameter = **parameter | 0x400;\n        }\n        else {\n          **parameter = **parameter & 0xfffffbff;\n          **parameter = **parameter | 0x800;\n        }\n        (*parameter)[1] = (*parameter)[1] & 0xfffffbff;\n      }\n      else {\n        if (parameter[0xb] == (uint *)0x2) {\n          **parameter = **parameter | 0x400;\n        }\n        else {\n          **parameter = **parameter & 0xfffffbff;\n        }\n        (*parameter)[1] = (*parameter)[1] & 0xfffff8ff;\n        tempVar1 = parameter[9];\n        parameter[9] = (uint *)((int)tempVar1 + 1);\n        *(char *)tempVar1 = (char)(*parameter)[4];\n        *(short *)((int)parameter + 0x2a) = *(short *)((int)parameter + 0x2a) + -1;\n        *(undefined *)((int)parameter + 0x3d) = 0x20;\n        parameter[0xc] = (uint *)0x0;\n        if (*(char *)((int)parameter + 0x3e) == '@') {\n          *(undefined *)((int)parameter + 0x3e) = 0;\n          FUNC_08004d6a();\n        }\n        else {\n          *(undefined *)((int)parameter + 0x3e) = 0;\n          FUNC_08004a20();\n        }\n      }\n    }\n    else {\n      tempVar1 = parameter[9];\n      parameter[9] = (uint *)((int)tempVar1 + 1);\n      *(char *)tempVar1 = (char)(*parameter)[4];\n      *(short *)((int)parameter + 0x2a) = *(short *)((int)parameter + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004d6c": "process_parameter_08004d6c",
                "param_1": "parameter",
                "puVar1": "tempVar1"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e3c": {
            "entrypoint": "0x08004e3c",
            "current_name": "update_flags_and_state_08004e3c",
            "code": "\nundefined4 updateFlagsAndState_08004e3c(uint **parameters)\n\n{\n  uint *pointer;\n  \n  pointer = parameters[0xb];\n  if (*(short *)((int)parameters + 0x2a) == 3) {\n    if (((pointer == (uint *)0x4) || (pointer == (uint *)0x8)) || (pointer == (uint *)0xffff0000)) {\n      **parameters = **parameters & 0xfffffbff;\n    }\n    pointer = parameters[9];\n    parameters[9] = (uint *)((int)pointer + 1);\n    *(char *)pointer = (char)(*parameters)[4];\n    *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n  }\n  else if (*(short *)((int)parameters + 0x2a) == 2) {\n    if (((pointer == (uint *)0x4) || (pointer == (uint *)0x8)) || (pointer == (uint *)0xffff0000)) {\n      (*parameters)[1] = (*parameters)[1] & 0xfffffcff;\n      **parameters = **parameters | 0x200;\n    }\n    else {\n      if (pointer == (uint *)0x2) {\n        **parameters = **parameters | 0x400;\n      }\n      else {\n        **parameters = **parameters & 0xfffffbff;\n      }\n      (*parameters)[1] = (*parameters)[1] & 0xfffffcff;\n    }\n    pointer = parameters[9];\n    parameters[9] = (uint *)((int)pointer + 1);\n    *(char *)pointer = (char)(*parameters)[4];\n    *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n    pointer = parameters[9];\n    parameters[9] = (uint *)((int)pointer + 1);\n    *(char *)pointer = (char)(*parameters)[4];\n    *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n    *(undefined *)((int)parameters + 0x3d) = 0x20;\n    parameters[0xc] = (uint *)0x0;\n    if (*(char *)((int)parameters + 0x3e) == '@') {\n      *(undefined *)((int)parameters + 0x3e) = 0;\n      FUNC_08004d6a();\n    }\n    else {\n      *(undefined *)((int)parameters + 0x3e) = 0;\n      FUNC_08004a20();\n    }\n  }\n  else {\n    pointer = parameters[9];\n    parameters[9] = (uint *)((int)pointer + 1);\n    *(char *)pointer = (char)(*parameters)[4];\n    *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004e3c": "update_flags_and_state_08004e3c",
                "param_1": "parameters",
                "puVar1": "pointer"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3a": {
            "entrypoint": "0x08004f3a",
            "current_name": "FUNC_08004f3a",
            "code": "\nvoid FUNC_08004f3a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3a": "FUNC_08004f3a"
            },
            "calling": [
                "FUN_08004f3c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3c": {
            "entrypoint": "0x08004f3c",
            "current_name": "process_data_08004f3c",
            "code": "\nvoid processData_08004f3c(uint **data)\n\n{\n  int result;\n  uint *ptr1;\n  uint *ptr2;\n  \n  if (*(byte *)((int)data + 0x3d) - 0x29 < 2) {\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)data + 0x3d) != '`') && (((*data)[1] & 0x800) == 0)) {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n    }\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3e) = 0;\n  }\n  **data = **data & 0xfffff7ff;\n  ptr2 = *data;\n  if ((ptr2[1] & 0x800) == 0) {\n    if (*(char *)((int)data + 0x3d) == '`') {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      data[0x10] = (uint *)0x0;\n      if ((ptr2[5] & 0x40) != 0) {\n        ptr1 = data[9];\n        data[9] = (uint *)((int)ptr1 + 1);\n        *(char *)ptr1 = (char)ptr2[4];\n      }\n      **data = **data & 0xfffffffe;\n      FUNC_08004f3a(data);\n    }\n    else {\n      if ((ptr2[5] & 0x40) != 0) {\n        ptr1 = data[9];\n        data[9] = (uint *)((int)ptr1 + 1);\n        *(char *)ptr1 = (char)ptr2[4];\n      }\n      check_and_set_values_08008020(data);\n    }\n  }\n  else {\n    ptr2[1] = ptr2[1] & 0xfffff7ff;\n    if (*(char *)((int)data[0xd] + 0x21) == '\\x01') {\n      data[0xe][0xd] = (uint)&LAB_080053cc_1;\n      result = initialize_data_08004050(data[0xe]);\n      if (result != 0) {\n        if (((*data)[5] & 0x40) != 0) {\n          ptr2 = data[9];\n          data[9] = (uint *)((int)ptr2 + 1);\n          *(char *)ptr2 = (char)(*data)[4];\n        }\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[0xe][0xd])();\n      }\n    }\n    else {\n      data[0xd][0xd] = (uint)&LAB_080053cc_1;\n      result = initialize_data_08004050(data[0xd]);\n      if (result != 0) {\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[0xd][0xd])();\n      }\n    }\n  }\n  if ((*(char *)((int)data + 0x3d) == '(') && (((uint)data[0x10] & 4) != 0)) {\n    data[0xb] = (uint *)0xffff0000;\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    execute_conditionally_08007ff0(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3c": "process_data_08004f3c",
                "param_1": "data",
                "iVar1": "result",
                "puVar2": "ptr1",
                "puVar3": "ptr2"
            },
            "calling": [
                "FUN_080052f0",
                "FUN_08005084"
            ],
            "called": [
                "FUN_08008020",
                "FUN_08004050",
                "FUN_08004f3a",
                "FUN_08007ff0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005084": {
            "entrypoint": "0x08005084",
            "current_name": "process_data_08005084",
            "code": "\nundefined4 processData_08005084(uint **data)\n\n{\n  char charVal;\n  uint *ptr1;\n  uint *ptr2;\n  \n  charVal = *(char *)((int)data + 0x3d);\n  (*data)[1] = (*data)[1] & 0xfffff8ff;\n  **data = **data | 1;\n  **data = **data & 0xfffffbff;\n  ptr1 = *data;\n  if ((ptr1[1] & 0x800) != 0) {\n    if ((*(char *)((int)data + 0x3d) == '\\\"') || (*(char *)((int)data + 0x3d) == '*')) {\n      *(short *)((int)data + 0x2a) = (short)*(undefined4 *)(*data[0xe] + 4);\n    }\n    else {\n      *(short *)((int)data + 0x2a) = (short)*(undefined4 *)(*data[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)data + 0x2a) != 0) {\n    if ((ptr1[5] & 4) != 0) {\n      ptr2 = data[9];\n      data[9] = (uint *)((int)ptr2 + 1);\n      *(char *)ptr2 = (char)ptr1[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n    if (((*data)[5] & 0x40) != 0) {\n      ptr1 = data[9];\n      data[9] = (uint *)((int)ptr1 + 1);\n      *(char *)ptr1 = (char)(*data)[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n    data[0x10] = (uint *)((uint)data[0x10] | 4);\n  }\n  if (data[0x10] == (uint *)0x0) {\n    if (((charVal == '(') || (charVal == '*')) || (charVal == ')')) {\n      data[0xb] = (uint *)0xffff0000;\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      execute_conditionally_08007ff0();\n    }\n    else if ((data[0xc] == (uint *)0x22) || (charVal == '\\\"')) {\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      FUNC_08004a74();\n    }\n  }\n  else {\n    process_data_08004f3c();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005084": "process_data_08005084",
                "param_1": "data",
                "cVar1": "charVal",
                "puVar2": "ptr1",
                "puVar3": "ptr2"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004f3c",
                "FUN_08007ff0",
                "FUN_08004a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005188": {
            "entrypoint": "0x08005188",
            "current_name": "process_function_08005188",
            "code": "\nvoid process_function_08005188(int *input_data)\n\n{\n  int input_value;\n  uint flags;\n  uint conditions;\n  uint state;\n  \n  input_value = *input_data;\n  state = *(uint *)(input_value + 0x18);\n  flags = *(uint *)(input_value + 0x14);\n  conditions = *(uint *)(input_value + 4);\n  if ((*(char *)((int)input_data + 0x3e) == '\\x10') || (*(char *)((int)input_data + 0x3e) == '@')) {\n    if (((flags & 0x10001) == 0) || ((conditions & 0x200) == 0)) {\n      if (((flags & 0x10008) == 0) || ((conditions & 0x200) == 0)) {\n        if (((flags & 0x10002) != 0) && ((conditions & 0x200) != 0)) {\n          process_input_080043a2(input_data);\n        }\n      }\n      else {\n        copy_value_to_memory_08004396(input_data);\n      }\n    }\n    else {\n      set_flag_based_on_conditions_0800430c(input_data);\n    }\n    if ((state & 0x100004) == 0) {\n      if ((((flags & 0x10040) != 0) && ((conditions & 0x400) != 0)) && ((flags & 0x10004) == 0)) {\n        process_parameter_08004d6c(input_data);\n        return;\n      }\n      if (((flags & 0x10004) != 0) && ((conditions & 0x200) != 0)) {\n        update_flags_and_state_08004e3c(input_data);\n        return;\n      }\n    }\n    else {\n      if ((((flags & 0x10080) != 0) && ((conditions & 0x400) != 0)) && ((flags & 0x10004) == 0)) {\n        decode_and_process_payload_08004b82(input_data);\n        return;\n      }\n      if (((flags & 0x10004) != 0) && ((conditions & 0x200) != 0)) {\n        handle_input_08004ccc(input_data);\n        return;\n      }\n    }\n  }\n  else {\n    if (((flags & 0x10002) != 0) && ((conditions & 0x200) != 0)) {\n      process_parameters_08004ac2();\n      return;\n    }\n    if (((flags & 0x10010) != 0) && ((conditions & 0x200) != 0)) {\n      process_data_08005084(input_data);\n      return;\n    }\n    if ((state & 0x100004) == 0) {\n      if ((((flags & 0x10040) != 0) && ((conditions & 0x400) != 0)) && ((flags & 0x10004) == 0)) {\n        process_input_08004a76(input_data);\n        return;\n      }\n      if (((flags & 0x10004) != 0) && ((conditions & 0x200) != 0)) {\n        update_value_and_decrement_0800459c(input_data);\n      }\n    }\n    else {\n      if ((((flags & 0x10080) != 0) && ((conditions & 0x400) != 0)) && ((flags & 0x10004) == 0)) {\n        update_data_08004a24(input_data);\n        return;\n      }\n      if (((flags & 0x10004) != 0) && ((conditions & 0x200) != 0)) {\n        update_data_from_buffer_0800457c(input_data);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005188": "process_function_08005188",
                "param_1": "input_data",
                "iVar1": "input_value",
                "uVar2": "flags",
                "uVar3": "conditions",
                "uVar4": "state"
            },
            "calling": [],
            "called": [
                "FUN_08004ccc",
                "FUN_080043a2",
                "FUN_08004396",
                "FUN_0800430c",
                "FUN_0800459c",
                "FUN_08005084",
                "FUN_08004a76",
                "FUN_08004ac2",
                "FUN_08004b82",
                "FUN_0800457c",
                "FUN_08004d6c",
                "FUN_08004a24",
                "FUN_08004e3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052f0": {
            "entrypoint": "0x080052f0",
            "current_name": "update_permissions_080052f0",
            "code": "\nvoid updatePermissions_080052f0(uint **permissions)\n\n{\n  char conditionChar;\n  uint *paramPointer;\n  uint permissionFlags;\n  uint bitFlag;\n  \n  paramPointer = *permissions;\n  permissionFlags = paramPointer[5];\n  bitFlag = paramPointer[1];\n  if (((permissionFlags & 0x10100) != 0) && ((bitFlag & 0x100) != 0)) {\n    permissions[0x10] = (uint *)((uint)permissions[0x10] | 1);\n    paramPointer[5] = 0xfffffeff;\n    **permissions = **permissions | 0x8000;\n  }\n  if (((permissionFlags & 0x10200) != 0) && ((bitFlag & 0x100) != 0)) {\n    permissions[0x10] = (uint *)((uint)permissions[0x10] | 2);\n    (*permissions)[5] = 0xfffffdff;\n  }\n  if (((permissionFlags & 0x10400) != 0) && ((bitFlag & 0x100) != 0)) {\n    conditionChar = *(char *)((int)permissions + 0x3d);\n    if (((*(char *)((int)permissions + 0x3e) == ' ') && (*(short *)((int)permissions + 0x2a) == 0)) &&\n       (((conditionChar == '!' || (conditionChar == ')')) || ((conditionChar == '(' && (permissions[0xc] == (uint *)0x21)))))) {\n      process_condition_08004aec(permissions);\n    }\n    else {\n      permissions[0x10] = (uint *)((uint)permissions[0x10] | 4);\n      if (*(char *)((int)permissions + 0x3e) == '\\x10') {\n        **permissions = **permissions | 0x200;\n      }\n      (*permissions)[5] = 0xfffffbff;\n    }\n  }\n  if (((permissionFlags & 0x10800) != 0) && ((bitFlag & 0x100) != 0)) {\n    permissions[0x10] = (uint *)((uint)permissions[0x10] | 8);\n    (*permissions)[5] = 0xfffff7ff;\n  }\n  if (permissions[0x10] != (uint *)0x0) {\n    process_data_08004f3c(permissions);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052f0": "update_permissions_080052f0",
                "param_1": "permissions",
                "cVar1": "conditionChar",
                "puVar2": "paramPointer",
                "uVar3": "permissionFlags",
                "uVar4": "bitFlag"
            },
            "calling": [],
            "called": [
                "FUN_08004f3c",
                "FUN_08004aec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800542a": {
            "entrypoint": "0x0800542a",
            "current_name": "get_byte_from_offset_0800542a",
            "code": "\nundefined getByteFromOffset_0800542a(int offset)\n\n{\n  return *(undefined *)(offset + 0x3d);\n}\n\n",
            "renaming": {
                "FUN_0800542a": "get_byte_from_offset_0800542a",
                "param_1": "offset"
            },
            "calling": [
                "FUN_08007e74",
                "FUN_08007f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005430": {
            "entrypoint": "0x08005430",
            "current_name": "get_memory_value_08005430",
            "code": "\nundefined4 getMemoryValue_08005430(int memoryAddress)\n\n{\n  return *(undefined4 *)(memoryAddress + 0x40);\n}\n\n",
            "renaming": {
                "FUN_08005430": "get_memory_value_08005430",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_08007e74",
                "FUN_08007f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005434": {
            "entrypoint": "0x08005434",
            "current_name": "delay_function_08005434",
            "code": "\nvoid delayFunction_08005434(int inputValue)\n\n{\n  bool bVar1;\n  int counter;\n  \n  counter = inputValue * (DAT_20000018 / 8000);\n  do {\n    bVar1 = counter != 0;\n    counter = counter + -1;\n  } while (bVar1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005434": "delay_function_08005434",
                "param_1": "inputValue",
                "local_4": "counter"
            },
            "calling": [
                "FUN_08005460"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005460": {
            "entrypoint": "0x08005460",
            "current_name": "check_system_status_08005460",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nundefined4 checkSystemStatus_08005460(uint *statusFlags)\n\n{\n  int startValue;\n  int currentValue;\n  undefined4 result;\n  uint paramValue;\n  bool isTrue;\n  \n  if ((*statusFlags & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) != 0)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (statusFlags[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      paramValue = statusFlags[1];\n      if (paramValue == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (paramValue == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (paramValue == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (statusFlags[1] == 0) {\n        startValue = get_dat_value_08003760();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          currentValue = get_dat_value_08003760();\n          if (100 < (uint)(currentValue - startValue)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        startValue = get_dat_value_08003760();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          currentValue = get_dat_value_08003760();\n          if (100 < (uint)(currentValue - startValue)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*statusFlags & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (statusFlags[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | statusFlags[5] << 3;\n    }\n    else if (statusFlags[4] == 0) {\n      _DAT_42420000 = 0;\n      startValue = get_dat_value_08003760();\n      while ((_DAT_40021000 & 2) != 0) {\n        currentValue = get_dat_value_08003760();\n        if (2 < (uint)(currentValue - startValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      startValue = get_dat_value_08003760();\n      while ((_DAT_40021000 & 2) == 0) {\n        currentValue = get_dat_value_08003760();\n        if (2 < (uint)(currentValue - startValue)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | statusFlags[5] << 3;\n    }\n  }\n  if ((*statusFlags & 8) != 0) {\n    if (statusFlags[6] == 0) {\n      _DAT_42420480 = 0;\n      startValue = get_dat_value_08003760();\n      while ((_DAT_40021024 & 2) != 0) {\n        currentValue = get_dat_value_08003760();\n        if (2 < (uint)(currentValue - startValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      startValue = get_dat_value_08003760();\n      while ((_DAT_40021024 & 2) == 0) {\n        currentValue = get_dat_value_08003760();\n        if (2 < (uint)(currentValue - startValue)) {\n          return 3;\n        }\n      }\n      delay_function_08005434(1);\n    }\n  }\n  if ((*statusFlags & 4) != 0) {\n    isTrue = (_DAT_4002101c & 0x10000000) == 0;\n    if (isTrue) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startValue = get_dat_value_08003760();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentValue = get_dat_value_08003760();\n        if (100 < (uint)(currentValue - startValue)) {\n          return 3;\n        }\n      }\n    }\n    paramValue = statusFlags[3];\n    if (paramValue == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (paramValue == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (paramValue == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (statusFlags[3] == 0) {\n      startValue = get_dat_value_08003760();\n      while ((_DAT_40021020 & 2) != 0) {\n        currentValue = get_dat_value_08003760();\n        if (5000 < (uint)(currentValue - startValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      startValue = get_dat_value_08003760();\n      while ((_DAT_40021020 & 2) == 0) {\n        currentValue = get_dat_value_08003760();\n        if (5000 < (uint)(currentValue - startValue)) {\n          return 3;\n        }\n      }\n    }\n    if (isTrue) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (statusFlags[7] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (statusFlags[7] == 2) {\n    _DAT_42420060 = 0;\n    startValue = get_dat_value_08003760();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (statusFlags[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | statusFlags[2];\n        }\n        _DAT_40021004 = _DAT_40021004 & 0xffc2ffff | statusFlags[8] | statusFlags[9];\n        _DAT_42420060 = 1;\n        startValue = get_dat_value_08003760();\n        do {\n          if ((_DAT_40021000 & 0x2000000) != 0) {\n            return 0;\n          }\n          currentValue = get_dat_value_08003760();\n        } while ((uint)(currentValue - startValue) < 3);\n        return 3;\n      }\n      currentValue = get_dat_value_08003760();\n    } while ((uint)(currentValue - startValue) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    startValue = get_dat_value_08003760();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        return 0;\n      }\n      currentValue = get_dat_value_08003760();\n    } while ((uint)(currentValue - startValue) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005460": "check_system_status_08005460",
                "param_1": "statusFlags",
                "iVar1": "startValue",
                "iVar2": "currentValue",
                "uVar3": "result",
                "uVar4": "paramValue",
                "bVar5": "isTrue"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [
                "FUN_08003760",
                "FUN_08005434"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_execution_time_08005840",
            "code": "\n\n\nuint calculateExecutionTime_08005840(void)\n\n{\n  uint result;\n  undefined2 executionTimeUnit;\n  undefined4 constant1;\n  undefined4 constant2;\n  undefined4 constant3;\n  undefined4 constant4;\n  \n  constant4 = 0x10100f0e;\n  constant3 = 0xd0c0b0a;\n  constant2 = 0x9080706;\n  constant1 = 0x5040302;\n  executionTimeUnit = 0x201;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    result = (uint)*(byte *)((int)&constant1 + ((_DAT_40021004 << 10) >> 0x1c));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      result = result * 4000000;\n    }\n    else {\n      result = (result * 8000000) /\n              (uint)*(byte *)((int)&executionTimeUnit - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n    }\n  }\n  else {\n    result = 8000000;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_execution_time_08005840",
                "local_1c": "executionTimeUnit",
                "uStack_18": "constant1",
                "uStack_14": "constant2",
                "uStack_10": "constant3",
                "uStack_c": "constant4",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080058d2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058ac": {
            "entrypoint": "0x080058ac",
            "current_name": "update_data_and_execution_time_080058ac",
            "code": "\n\n\nundefined4 updateDataAndExecutionTime_080058ac(uint *dataParameters,uint inputSize)\n\n{\n  int iVar1;\n  int iVar2;\n  uint uVar3;\n  \n  if ((_DAT_40022000 & 7) < inputSize) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | inputSize;\n    if (inputSize != (inputSize & 7)) {\n      return 1;\n    }\n  }\n  if ((*dataParameters & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | dataParameters[2];\n  }\n  if ((*dataParameters & 1) != 0) {\n    uVar3 = dataParameters[1];\n    if (uVar3 == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((uVar3 != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = uVar3 | _DAT_40021004 & 0xfffffffc;\n    iVar1 = getDatValue;\n    if (dataParameters[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        iVar2 = getDatValue;\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else if (dataParameters[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        iVar2 = getDatValue;\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        iVar2 = getDatValue;\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (inputSize < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | inputSize;\n    if (inputSize != (inputSize & 7)) {\n      return 1;\n    }\n  }\n  if ((*dataParameters & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | dataParameters[3];\n  }\n  if ((*dataParameters & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | dataParameters[4] << 3;\n  }\n  uVar3 = calculateExecutionTime;\n  DAT_20000018 = uVar3 >> (&DAT_0800a944)[(_DAT_40021004 << 0x18) >> 0x1c];\n  set_and_update_data_080036d8(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080058ac": "update_data_and_execution_time_080058ac",
                "param_1": "dataParameters",
                "param_2": "inputSize",
                "get_dat_value_08003760()": "getDatValue",
                "calculate_execution_time_08005840()": "calculateExecutionTime"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [
                "FUN_080058d2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058d2": {
            "entrypoint": "0x080058d2",
            "current_name": "update_configuration_080058d2",
            "code": "\n\n\nundefined4 updateConfiguration_080058d2(uint *configFlags,uint inputValue)\n\n{\n  int iVar1;\n  int iVar2;\n  uint uVar3;\n  \n  if ((*configFlags & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | configFlags[2];\n  }\n  if ((*configFlags & 1) != 0) {\n    uVar3 = configFlags[1];\n    if (uVar3 == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((uVar3 != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = uVar3 | _DAT_40021004 & 0xfffffffc;\n    iVar1 = getElapsedTime();\n    if (configFlags[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        iVar2 = getElapsedTime();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else if (configFlags[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        iVar2 = getElapsedTime();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        iVar2 = getElapsedTime();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (inputValue < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | inputValue;\n    if (inputValue != (inputValue & 7)) {\n      return 1;\n    }\n  }\n  if ((*configFlags & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | configFlags[3];\n  }\n  if ((*configFlags & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | configFlags[4] << 3;\n  }\n  uVar3 = calculateExecutionTime();\n  DAT_20000018 = uVar3 >> (&DAT_0800a944)[(_DAT_40021004 << 0x18) >> 0x1c];\n  setAndUpdateData(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080058d2": "update_configuration_080058d2",
                "param_1": "configFlags",
                "param_2": "inputValue",
                "get_dat_value_08003760": "getElapsedTime",
                "calculate_execution_time_08005840": "calculateExecutionTime",
                "set_and_update_data_080036d8": "setAndUpdateData"
            },
            "calling": [
                "FUN_080058ac"
            ],
            "called": [
                "FUN_080036d8",
                "FUN_08003760",
                "FUN_08005840"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a1c": {
            "entrypoint": "0x08005a1c",
            "current_name": "get_data_value_08005a1c",
            "code": "\nundefined4 get_data_value_08005a1c(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_08005a1c": "get_data_value_08005a1c"
            },
            "calling": [
                "FUN_08005a28",
                "FUN_08005a48",
                "FUN_080035b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a28": {
            "entrypoint": "0x08005a28",
            "current_name": "get_shifted_data_value_08005a28",
            "code": "\n\n\nuint get_shifted_data_value_08005a28(void)\n\n{\n  uint data_value;\n  \n  data_value = get_data_value();\n  return data_value >> (&DAT_0800a954)[(uint)(_DAT_40021004 << 0x15) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08005a28": "get_shifted_data_value_08005a28",
                "uVar1": "data_value",
                "get_data_value_08005a1c": "get_data_value"
            },
            "calling": [
                "FUN_080075dc",
                "FUN_08006538",
                "FUN_080045c0"
            ],
            "called": [
                "FUN_08005a1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a48": {
            "entrypoint": "0x08005a48",
            "current_name": "get_shifted_data_value_08005a48",
            "code": "\n\n\nuint get_shifted_data_value_08005a48(void)\n\n{\n  uint data_value;\n  \n  data_value = get_data_value();\n  return data_value >> (&DAT_0800a954)[(uint)(_DAT_40021004 << 0x12) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08005a48": "get_shifted_data_value_08005a48",
                "uVar1": "data_value",
                "get_data_value_08005a1c": "get_data_value"
            },
            "calling": [
                "FUN_080075dc",
                "FUN_08006538",
                "FUN_08005bb8"
            ],
            "called": [
                "FUN_08005a1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "initialize_data_08005a68",
            "code": "\n\n\nvoid initializeData_08005a68(undefined4 *outputArray,uint *inputArray)\n\n{\n  *outputArray = 0xf;\n  outputArray[1] = _DAT_40021004 & 3;\n  outputArray[2] = _DAT_40021004 & 0xf0;\n  outputArray[3] = _DAT_40021004 & 0x700;\n  outputArray[4] = _DAT_40021004 >> 3 & 0x700;\n  *inputArray = _DAT_40022000 & 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "initialize_data_08005a68",
                "param_1": "outputArray",
                "param_2": "inputArray"
            },
            "calling": [
                "FUN_080075dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005aa4": {
            "entrypoint": "0x08005aa4",
            "current_name": "configure_device_08005aa4",
            "code": "\n\n\nundefined4 configureDevice_08005aa4(uint *configSettings)\n\n{\n  uint tempVar1;\n  uint tempVar2;\n  int initialValue;\n  int currentValue;\n  bool isBitSet;\n  \n  if ((*configSettings & 1) != 0) {\n    isBitSet = (_DAT_4002101c & 0x10000000) == 0;\n    if (isBitSet) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      initialValue = get_dat_value_08003760();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentValue = get_dat_value_08003760();\n        if (100 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    if (((_DAT_40021020 & 0x300) != 0) && ((_DAT_40021020 & 0x300) != (configSettings[1] & 0x300))) {\n      tempVar2 = _DAT_40021020 & 0xfffffcff;\n      _DAT_42420440 = 0;\n      tempVar1 = _DAT_40021020 & 1;\n      _DAT_40021020 = tempVar2;\n      if (tempVar1 != 0) {\n        initialValue = get_dat_value_08003760();\n        while ((_DAT_40021020 & 2) == 0) {\n          currentValue = get_dat_value_08003760();\n          if (5000 < (uint)(currentValue - initialValue)) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffcff | configSettings[1];\n    if (isBitSet) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if ((*configSettings & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffff3fff | configSettings[2];\n  }\n  if ((*configSettings & 0x10) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffbfffff | configSettings[3];\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005aa4": "configure_device_08005aa4",
                "param_1": "configSettings",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "iVar3": "initialValue",
                "iVar4": "currentValue",
                "bVar5": "isBitSet"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bb8": {
            "entrypoint": "0x08005bb8",
            "current_name": "calculate_data_value_08005bb8",
            "code": "\n\n\nuint calculate_data_value_08005bb8(int input_value)\n\n{\n  uint result;\n  undefined2 shift_value;\n  undefined4 data_value_1;\n  undefined4 data_value_2;\n  undefined4 data_value_3;\n  undefined4 data_value_4;\n  \n  data_value_4 = 0x10100f0e;\n  data_value_3 = 0xd0c0b0a;\n  data_value_2 = 0x9080706;\n  data_value_1 = 0x5040302;\n  shift_value = 0x201;\n  if (input_value == 2) {\n    result = get_shifted_data_value_08005a48();\n    result = result / ((((_DAT_40021004 << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (input_value == 0x10) {\n    if ((_DAT_40021000 & 0x1000000) == 0) {\n      result = 0;\n    }\n    else {\n      if ((_DAT_40021004 & 0x10000) == 0) {\n        result = 4000000;\n      }\n      else {\n        result = 8000000 / *(byte *)((int)&shift_value - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n      }\n      result = result * *(byte *)((int)&data_value_1 + ((_DAT_40021004 << 10) >> 0x1c));\n      if ((_DAT_40021004 & 0x400000) == 0) {\n        result = (result * 2) / 3;\n      }\n    }\n  }\n  else if (input_value == 1) {\n    if ((_DAT_40021020 & 0x302) == 0x102) {\n      result = 0x8000;\n    }\n    else if (((_DAT_40021020 & 0x300) == 0x200) && ((_DAT_40021024 & 2) != 0)) {\n      result = 32000;\n    }\n    else if ((_DAT_40021020 & 0x300) == 0x300) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        result = 0;\n      }\n      else {\n        result = 0xf424;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005bb8": "calculate_data_value_08005bb8",
                "param_1": "input_value",
                "uVar1": "result",
                "local_24": "shift_value",
                "uStack_20": "data_value_1",
                "uStack_1c": "data_value_2",
                "uStack_18": "data_value_3",
                "uStack_14": "data_value_4"
            },
            "calling": [
                "FUN_08003e20",
                "FUN_0800376c"
            ],
            "called": [
                "FUN_08005a48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cb4": {
            "entrypoint": "0x08005cb4",
            "current_name": "update_status_and_execute_callback_08005cb4",
            "code": "\n\n\nvoid updateStatusAndExecuteCallback_08005cb4(uint **status)\n\n{\n  if (((**status & 2) != 0) && (((*status)[1] & 2) != 0)) {\n    execute_callback_080073c0();\n    (*status)[1] = 0xfffffffd;\n  }\n  _DAT_40010414 = 0x20000;\n  *(undefined *)((int)status + 0x11) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cb4": "update_status_and_execute_callback_08005cb4",
                "param_1": "status"
            },
            "calling": [],
            "called": [
                "FUN_080073c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cec": {
            "entrypoint": "0x08005cec",
            "current_name": "update_configuration_08005cec",
            "code": "\nvoid updateConfiguration_08005cec(int configAddress,uint *newConfig)\n\n{\n  uint updatedValue1;\n  uint updatedValue2;\n  uint updatedValue3;\n  \n  *(uint *)(configAddress + 0x20) = *(uint *)(configAddress + 0x20) & 0xfffffffe;\n  updatedValue2 = *(uint *)(configAddress + 4);\n  updatedValue3 = *newConfig;\n  updatedValue1 = *(uint *)(configAddress + 0x20) & 0xfffffffd | newConfig[2];\n  if (configAddress == 0x40012c00) {\n    updatedValue1 = (updatedValue1 & 0xfffffff7 | newConfig[3]) & 0xfffffffb;\n    updatedValue2 = updatedValue2 & 0xfffffcff | newConfig[5] | newConfig[6];\n  }\n  *(uint *)(configAddress + 4) = updatedValue2;\n  *(uint *)(configAddress + 0x18) = *(uint *)(configAddress + 0x18) & 0xffffff8c | updatedValue3;\n  *(uint *)(configAddress + 0x34) = newConfig[1];\n  *(uint *)(configAddress + 0x20) = updatedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cec": "update_configuration_08005cec",
                "param_1": "configAddress",
                "param_2": "newConfig",
                "uVar1": "updatedValue1",
                "uVar2": "updatedValue2",
                "uVar3": "updatedValue3"
            },
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d48": {
            "entrypoint": "0x08005d48",
            "current_name": "update_params_08005d48",
            "code": "\nvoid updateParams_08005d48(int paramBaseAddress,uint *paramArray)\n\n{\n  uint updatedValue1;\n  uint updatedValue2;\n  uint updatedValue3;\n  \n  *(uint *)(paramBaseAddress + 0x20) = *(uint *)(paramBaseAddress + 0x20) & 0xfffffeff;\n  updatedValue2 = *(uint *)(paramBaseAddress + 4);\n  updatedValue3 = *paramArray;\n  updatedValue1 = *(uint *)(paramBaseAddress + 0x20) & 0xfffffdff | paramArray[2] << 8;\n  if (paramBaseAddress == 0x40012c00) {\n    updatedValue1 = (updatedValue1 & 0xfffff7ff | paramArray[3] << 8) & 0xfffffbff;\n    updatedValue2 = updatedValue2 & 0xffffcfff | paramArray[5] << 4 | paramArray[6] << 4;\n  }\n  *(uint *)(paramBaseAddress + 4) = updatedValue2;\n  *(uint *)(paramBaseAddress + 0x1c) = *(uint *)(paramBaseAddress + 0x1c) & 0xffffff8c | updatedValue3;\n  *(uint *)(paramBaseAddress + 0x3c) = paramArray[1];\n  *(uint *)(paramBaseAddress + 0x20) = updatedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d48": "update_params_08005d48",
                "param_1": "paramBaseAddress",
                "param_2": "paramArray",
                "uVar1": "updatedValue1",
                "uVar2": "updatedValue2",
                "uVar3": "updatedValue3"
            },
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005dac": {
            "entrypoint": "0x08005dac",
            "current_name": "update_memory_params_08005dac",
            "code": "\nvoid updateMemoryParams_08005dac(int memoryAddr,int *paramArray)\n\n{\n  uint oldValue1;\n  int paramValue1;\n  int paramValue2;\n  \n  *(uint *)(memoryAddr + 0x20) = *(uint *)(memoryAddr + 0x20) & 0xffffefff;\n  oldValue1 = *(uint *)(memoryAddr + 4);\n  paramValue1 = *paramArray;\n  paramValue2 = paramArray[2];\n  if (memoryAddr == 0x40012c00) {\n    oldValue1 = oldValue1 & 0xffffbfff | paramArray[5] << 6;\n  }\n  *(uint *)(memoryAddr + 4) = oldValue1;\n  *(uint *)(memoryAddr + 0x1c) = *(uint *)(memoryAddr + 0x1c) & 0xffff8cff | paramValue1 << 8;\n  *(int *)(memoryAddr + 0x40) = paramArray[1];\n  *(uint *)(memoryAddr + 0x20) = *(uint *)(memoryAddr + 0x20) & 0xffffdfff | paramValue2 << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005dac": "update_memory_params_08005dac",
                "param_1": "memoryAddr",
                "param_2": "paramArray",
                "uVar1": "oldValue1",
                "iVar2": "paramValue1",
                "iVar3": "paramValue2"
            },
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005df4": {
            "entrypoint": "0x08005df4",
            "current_name": "update_register_values_08005df4",
            "code": "\nvoid update_register_values_08005df4(uint **register_values)\n\n{\n  uint *current_register;\n  \n  *(undefined *)((int)register_values + 0x3d) = 2;\n  current_register = *register_values;\n  if ((register_value & 0x1111) == 0) {\n    if ((register_value & 0x444) == 0) {\n      *current_register = *current_register & 0xfffffffe;\n    }\n  }\n  update_register_values_08005df4_08007710(register_values);\n  *(undefined *)((int)register_values + 0x3d) = 0;\n  *(undefined *)(register_values + 0xf) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005df4": "update_register_values_08005df4",
                "param_1": "register_values",
                "puVar1": "current_register",
                "puVar1[8]": "register_value"
            },
            "calling": [
                "FUN_080076e0"
            ],
            "called": [
                "FUN_08007710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e2e": {
            "entrypoint": "0x08005e2e",
            "current_name": "update_registers_and_flags_08005e2e",
            "code": "\nvoid updateRegistersAndFlags_08005e2e(uint **registers)\n\n{\n  uint *ptr;\n  \n  *(undefined *)((int)registers + 0x3d) = 2;\n  ptr = *registers;\n  if ((ptr[8] & 0x1111) == 0) {\n    if ((ptr[8] & 0x444) == 0) {\n      *ptr = *ptr & 0xfffffffe;\n    }\n  }\n  initializeRegistersAndFlags(registers);\n  *(undefined *)((int)registers + 0x3d) = 0;\n  *(undefined *)(registers + 0xf) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e2e": "update_registers_and_flags_08005e2e",
                "param_1": "registers",
                "puVar1": "ptr",
                "initialize_register_values_08007110": "initializeRegistersAndFlags"
            },
            "calling": [
                "FUN_080071e4"
            ],
            "called": [
                "FUN_08007110"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e68": {
            "entrypoint": "0x08005e68",
            "current_name": "FUNC_08005e68",
            "code": "\nvoid FUNC_08005e68(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e68": "FUNC_08005e68"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6a": {
            "entrypoint": "0x08005e6a",
            "current_name": "FUNC_08005e6a",
            "code": "\nvoid FUNC_08005e6a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6a": "FUNC_08005e6a"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6c": {
            "entrypoint": "0x08005e6c",
            "current_name": "FUNC_08005e6c",
            "code": "\nvoid FUNC_08005e6c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6c": "FUNC_08005e6c"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6e": {
            "entrypoint": "0x08005e6e",
            "current_name": "execute_callbacks_08005e6e",
            "code": "\nvoid execute_callbacks_08005e6e(int *callback_data)\n\n{\n  int callback_ptr;\n  \n  callback_ptr = *callback_data;\n  if (((*(uint *)(callback_ptr + 0x10) & 2) != 0) && ((*(uint *)(callback_ptr + 0xc) & 2) != 0)) {\n    *(undefined4 *)(callback_ptr + 0x10) = 0xfffffffd;\n    *(undefined *)(callback_data + 7) = 1;\n    if ((*(uint *)(*callback_data + 0x18) & 3) == 0) {\n      execute_enabled_callback_1();\n      FUNC_08005e6a(callback_data);\n    }\n    else {\n      FUNC_08005e68();\n    }\n    *(undefined *)(callback_data + 7) = 0;\n  }\n  callback_ptr = *callback_data;\n  if (((*(uint *)(callback_ptr + 0x10) & 4) != 0) && ((*(uint *)(callback_ptr + 0xc) & 4) != 0)) {\n    *(undefined4 *)(callback_ptr + 0x10) = 0xfffffffb;\n    *(undefined *)(callback_data + 7) = 2;\n    if ((*(uint *)(*callback_data + 0x18) & 0x300) == 0) {\n      execute_enabled_callback_5;\n      FUNC_08005e6a(callback_data);\n    }\n    else {\n      FUNC_08005e68(callback_data);\n    }\n    *(undefined *)(callback_data + 7) = 0;\n  }\n  callback_ptr = *callback_data;\n  if (((*(uint *)(callback_ptr + 0x10) & 8) != 0) && ((*(uint *)(callback_ptr + 0xc) & 8) != 0)) {\n    *(undefined4 *)(callback_ptr + 0x10) = 0xfffffff7;\n    *(undefined *)(callback_data + 7) = 4;\n    if ((*(uint *)(*callback_data + 0x1c) & 3) == 0) {\n      execute_enabled_callback_5;\n      FUNC_08005e6a(callback_data);\n    }\n    else {\n      FUNC_08005e68(callback_data);\n    }\n    *(undefined *)(callback_data + 7) = 0;\n  }\n  callback_ptr = *callback_data;\n  if (((*(uint *)(callback_ptr + 0x10) & 0x10) != 0) && ((*(uint *)(callback_ptr + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(callback_ptr + 0x10) = 0xffffffef;\n    *(undefined *)(callback_data + 7) = 8;\n    if ((*(uint *)(*callback_data + 0x1c) & 0x300) == 0) {\n      execute_enabled_callback_5;\n      FUNC_08005e6a(callback_data);\n    }\n    else {\n      FUNC_08005e68(callback_data);\n    }\n    *(undefined *)(callback_data + 7) = 0;\n  }\n  callback_ptr = *callback_data;\n  if (((*(uint *)(callback_ptr + 0x10) & 1) != 0) && ((*(uint *)(callback_ptr + 0xc) & 1) != 0)) {\n    *(undefined4 *)(callback_ptr + 0x10) = 0xfffffffe;\n    execute_callback;\n  }\n  callback_ptr = *callback_data;\n  if (((*(uint *)(callback_ptr + 0x10) & 0x80) != 0) && ((*(uint *)(callback_ptr + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(callback_ptr + 0x10) = 0xffffff7f;\n    FUNC_080064ae(callback_data);\n  }\n  callback_ptr = *callback_data;\n  if (((*(uint *)(callback_ptr + 0x10) & 0x40) != 0) && ((*(uint *)(callback_ptr + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(callback_ptr + 0x10) = 0xffffffbf;\n    FUNC_08005e6c(callback_data);\n  }\n  callback_ptr = *callback_data;\n  if (((*(uint *)(callback_ptr + 0x10) & 0x20) != 0) && ((*(uint *)(callback_ptr + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(callback_ptr + 0x10) = 0xffffffdf;\n    FUNC_080064ac(callback_data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6e": "execute_callbacks_08005e6e",
                "param_1": "callback_data",
                "iVar1": "callback_ptr",
                "execute_callback_if_enabled_0800771c": "execute_enabled_callback_1",
                "execute_callback_if_enabled_0800771c(param_1)": "execute_enabled_callback_5",
                "execute_callback_08007736(param_1)": "execute_callback"
            },
            "calling": [],
            "called": [
                "FUN_08007736",
                "FUN_080064ac",
                "FUN_08005e68",
                "FUN_08005e6a",
                "FUN_0800771c",
                "FUN_08005e6c",
                "FUN_080064ae"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005fe8": {
            "entrypoint": "0x08005fe8",
            "current_name": "update_memory_08005fe8",
            "code": "\nvoid updateMemory_08005fe8(uint *memoryLocation,uint *newValues)\n\n{\n  uint oldValue;\n  \n  oldValue = *memoryLocation;\n  if ((((memoryLocation == (uint *)0x40012c00) || (memoryLocation == (uint *)0x40000000)) ||\n      (memoryLocation == (uint *)0x40000400)) || (memoryLocation == (uint *)0x40000800)) {\n    oldValue = oldValue & 0xffffff8f | newValues[1];\n  }\n  if (((memoryLocation == (uint *)0x40012c00) || (memoryLocation == (uint *)0x40000000)) ||\n     ((memoryLocation == (uint *)0x40000400 || (memoryLocation == (uint *)0x40000800)))) {\n    oldValue = oldValue & 0xfffffcff | newValues[3];\n  }\n  *memoryLocation = oldValue & 0xffffff7f | newValues[5];\n  memoryLocation[0xb] = newValues[2];\n  memoryLocation[10] = *newValues;\n  if (memoryLocation == (uint *)0x40012c00) {\n    uRam40012c30 = newValues[4];\n  }\n  memoryLocation[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005fe8": "update_memory_08005fe8",
                "param_1": "memoryLocation",
                "param_2": "newValues",
                "uVar1": "oldValue"
            },
            "calling": [
                "FUN_08006060",
                "FUN_08006092"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006060": {
            "entrypoint": "0x08006060",
            "current_name": "sanitize_and_update_data_08006060",
            "code": "\nundefined4 sanitizeAndUpdateData_08006060(undefined4 *dataPointer)\n\n{\n  if (dataPointer != (undefined4 *)0x0) {\n    if (*(char *)((int)dataPointer + 0x3d) == '\\0') {\n      *(undefined *)(dataPointer + 0xf) = 0;\n      updateFlagsAndPointers();\n    }\n    *(undefined *)((int)dataPointer + 0x3d) = 2;\n    updateMemory(*dataPointer,dataPointer + 1);\n    *(undefined *)((int)dataPointer + 0x3d) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08006060": "sanitize_and_update_data_08006060",
                "param_1": "dataPointer",
                "update_flags_and_pointers_08007708": "updateFlagsAndPointers",
                "update_memory_08005fe8": "updateMemory"
            },
            "calling": [
                "FUN_08007648"
            ],
            "called": [
                "FUN_08005fe8",
                "FUN_08007708"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006092": {
            "entrypoint": "0x08006092",
            "current_name": "initialize_memory_08006092",
            "code": "\nundefined4 initialize_memory_08006092(undefined4 *memory_ptr)\n\n{\n  if (memory_ptr != (undefined4 *)0x0) {\n    if (*(char *)((int)memory_ptr + 0x3d) == '\\0') {\n      *(undefined *)(memory_ptr + 0xf) = 0;\n      initialize_memory_08006092_access();\n    }\n    *(undefined *)((int)memory_ptr + 0x3d) = 2;\n    update_memory(*memory_ptr,memory_ptr + 1);\n    *(undefined *)((int)memory_ptr + 0x3d) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08006092": "initialize_memory_08006092",
                "param_1": "memory_ptr",
                "initialize_memory_access_08006e68": "initialize_memory_access",
                "update_memory_08005fe8": "update_memory"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08005fe8",
                "FUN_08006e68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080060c4": {
            "entrypoint": "0x080060c4",
            "current_name": "update_config_080060c4",
            "code": "\nvoid updateConfig_080060c4(int configAddress,int *configValues)\n\n{\n  uint updatedConfig1;\n  uint updatedConfig2;\n  int inputValue;\n  \n  *(uint *)(configAddress + 0x20) = *(uint *)(configAddress + 0x20) & 0xffffffef;\n  updatedConfig2 = *(uint *)(configAddress + 4);\n  inputValue = *configValues;\n  updatedConfig1 = *(uint *)(configAddress + 0x20) & 0xffffffdf | configValues[2] << 4;\n  if (configAddress == 0x40012c00) {\n    updatedConfig1 = (updatedConfig1 & 0xffffff7f | configValues[3] << 4) & 0xffffffbf;\n    updatedConfig2 = updatedConfig2 & 0xfffff3ff | configValues[5] << 2 | configValues[6] << 2;\n  }\n  *(uint *)(configAddress + 4) = updatedConfig2;\n  *(uint *)(configAddress + 0x18) = *(uint *)(configAddress + 0x18) & 0xffff8cff | inputValue << 8;\n  *(int *)(configAddress + 0x38) = configValues[1];\n  *(uint *)(configAddress + 0x20) = updatedConfig1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060c4": "update_config_080060c4",
                "param_1": "configAddress",
                "param_2": "configValues",
                "uVar1": "updatedConfig1",
                "uVar2": "updatedConfig2",
                "iVar3": "inputValue"
            },
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006128": {
            "entrypoint": "0x08006128",
            "current_name": "update_and_return_status_08006128",
            "code": "\nundefined4 update_and_return_status_08006128(undefined4 *configuration_ptr,undefined4 param_2,undefined4 command)\n\n{\n  if (*(char *)(configuration_ptr + 0xf) != '\\x01') {\n    *(undefined *)(configuration_ptr + 0xf) = 1;\n    *(undefined *)((int)configuration_ptr + 0x3d) = 2;\n    switch(command) {\n    case 0:\n      update_configuration(*configuration_ptr);\n      break;\n    case 4:\n      update_config(*configuration_ptr);\n      break;\n    case 8:\n      update_params(*configuration_ptr);\n      break;\n    case 0xc:\n      update_memory_params(*configuration_ptr);\n    }\n    *(undefined *)((int)configuration_ptr + 0x3d) = 1;\n    *(undefined *)(configuration_ptr + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08006128": "update_and_return_status_08006128",
                "param_1": "configuration_ptr",
                "param_3": "command",
                "update_configuration_08005cec": "update_configuration",
                "update_config_080060c4": "update_config",
                "update_params_08005d48": "update_params",
                "update_memory_params_08005dac": "update_memory_params"
            },
            "calling": [
                "FUN_08007648"
            ],
            "called": [
                "FUN_08005dac",
                "FUN_080060c4",
                "FUN_08005d48",
                "FUN_08005cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006186": {
            "entrypoint": "0x08006186",
            "current_name": "configure_device_08006186",
            "code": "\nundefined4 configureDevice_08006186(int *deviceData,int configData,undefined4 configType)\n\n{\n  if (*(char *)(deviceData + 0xf) != '\\x01') {\n    *(undefined *)(deviceData + 0xf) = 1;\n    *(undefined *)((int)deviceData + 0x3d) = 2;\n    switch(configType) {\n    case 0:\n      updateConfiguration(*deviceData);\n      *(uint *)(*deviceData + 0x18) = *(uint *)(*deviceData + 0x18) | 8;\n      *(uint *)(*deviceData + 0x18) = *(uint *)(*deviceData + 0x18) & 0xfffffffb;\n      *(uint *)(*deviceData + 0x18) = *(uint *)(*deviceData + 0x18) | *(uint *)(configData + 0x10);\n      break;\n    case 4:\n      updateConfig(*deviceData);\n      *(uint *)(*deviceData + 0x18) = *(uint *)(*deviceData + 0x18) | 0x800;\n      *(uint *)(*deviceData + 0x18) = *(uint *)(*deviceData + 0x18) & 0xfffffbff;\n      *(uint *)(*deviceData + 0x18) = *(uint *)(*deviceData + 0x18) | *(int *)(configData + 0x10) << 8;\n      break;\n    case 8:\n      updateParams(*deviceData);\n      *(uint *)(*deviceData + 0x1c) = *(uint *)(*deviceData + 0x1c) | 8;\n      *(uint *)(*deviceData + 0x1c) = *(uint *)(*deviceData + 0x1c) & 0xfffffffb;\n      *(uint *)(*deviceData + 0x1c) = *(uint *)(*deviceData + 0x1c) | *(uint *)(configData + 0x10);\n      break;\n    case 0xc:\n      updateMemoryParams(*deviceData);\n      *(uint *)(*deviceData + 0x1c) = *(uint *)(*deviceData + 0x1c) | 0x800;\n      *(uint *)(*deviceData + 0x1c) = *(uint *)(*deviceData + 0x1c) & 0xfffffbff;\n      *(uint *)(*deviceData + 0x1c) = *(uint *)(*deviceData + 0x1c) | *(int *)(configData + 0x10) << 8;\n    }\n    *(undefined *)((int)deviceData + 0x3d) = 1;\n    *(undefined *)(deviceData + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08006186": "configure_device_08006186",
                "param_1": "deviceData",
                "param_2": "configData",
                "param_3": "configType",
                "update_configuration_08005cec": "updateConfiguration",
                "update_config_080060c4": "updateConfig",
                "update_params_08005d48": "updateParams",
                "update_memory_params_08005dac": "updateMemoryParams"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08005dac",
                "FUN_080060c4",
                "FUN_08005d48",
                "FUN_08005cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006262": {
            "entrypoint": "0x08006262",
            "current_name": "update_flag_08006262",
            "code": "\nvoid updateFlag_08006262(int baseAddress,uint bitPosition,int newValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | newValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006262": "update_flag_08006262",
                "param_1": "baseAddress",
                "param_2": "bitPosition",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_08006280",
                "FUN_08006390",
                "FUN_080063c0",
                "FUN_080062f4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006280": {
            "entrypoint": "0x08006280",
            "current_name": "update_flags_08006280",
            "code": "\nundefined4 updateFlags_08006280(uint **ptrArray,undefined4 flagIndex)\n\n{\n  switch(flagIndex) {\n  case 0:\n    (*ptrArray)[3] = (*ptrArray)[3] | 2;\n    break;\n  case 4:\n    (*ptrArray)[3] = (*ptrArray)[3] | 4;\n    break;\n  case 8:\n    (*ptrArray)[3] = (*ptrArray)[3] | 8;\n    break;\n  case 0xc:\n    (*ptrArray)[3] = (*ptrArray)[3] | 0x10;\n  }\n  update_flag_08006262(*ptrArray,flagIndex,1);\n  if (*ptrArray == (uint *)0x40012c00) {\n    flagValue = flagValue | 0x8000;\n  }\n  **ptrArray = **ptrArray | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006280": "update_flags_08006280",
                "param_1": "ptrArray",
                "param_2": "flagIndex",
                "uRam40012c44": "flagValue"
            },
            "calling": [
                "FUN_08007648"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080062f4": {
            "entrypoint": "0x080062f4",
            "current_name": "update_and_check_flags_080062f4",
            "code": "\nundefined4 updateAndCheckFlags_080062f4(uint **pointerToValues,undefined4 flagValue)\n\n{\n  uint *valuesPointer;\n  \n  switch(flagValue) {\n  case 0:\n    (*pointerToValues)[3] = (*pointerToValues)[3] & 0xfffffffd;\n    break;\n  case 4:\n    (*pointerToValues)[3] = (*pointerToValues)[3] & 0xfffffffb;\n    break;\n  case 8:\n    (*pointerToValues)[3] = (*pointerToValues)[3] & 0xfffffff7;\n    break;\n  case 0xc:\n    (*pointerToValues)[3] = (*pointerToValues)[3] & 0xffffffef;\n  }\n  update_flag_08006262(*pointerToValues,flagValue,0);\n  if (((*pointerToValues == (uint *)0x40012c00) && ((constantValue2 & 0x1111) == 0)) &&\n     ((constantValue2 & 0x444) == 0)) {\n    constantValue3 = constantValue3 & 0xffff7fff;\n  }\n  valuesPointer = *pointerToValues;\n  if (((valuesPointer[8] & 0x1111) == 0) && ((valuesPointer[8] & 0x444) == 0)) {\n    *valuesPointer = *valuesPointer & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080062f4": "update_and_check_flags_080062f4",
                "param_1": "pointerToValues",
                "param_2": "flagValue",
                "puVar1": "valuesPointer",
                "uRam40012c20": "constantValue2",
                "uRam40012c44": "constantValue3",
                "puVar1[8]": "valuesPointer[8]"
            },
            "calling": [
                "FUN_080076e0"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006390": {
            "entrypoint": "0x08006390",
            "current_name": "update_and_flag_check_08006390",
            "code": "\nundefined4 update_and_flag_check_08006390(uint **pointer,undefined4 value)\n\n{\n  update_flag_08006262(*pointer,value,1);\n  if (*pointer == (uint *)0x40012c00) {\n    flag = flag | 0x8000;\n  }\n  **pointer = **pointer | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006390": "update_and_flag_check_08006390",
                "param_1": "pointer",
                "param_2": "value",
                "uRam40012c44": "flag"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080063c0": {
            "entrypoint": "0x080063c0",
            "current_name": "update_flags_080063c0",
            "code": "\nundefined4 update_flags_080063c0(uint **input_buffer,undefined4 value)\n\n{\n  uint *current_value;\n  \n  update_flag_08006262(*input_buffer,value,0);\n  if (((*input_buffer == (uint *)0x40012c00) && ((flag_1 & 0x1111) == 0)) &&\n     ((flag_1 & 0x444) == 0)) {\n    flag_2 = flag_2 & 0xffff7fff;\n  }\n  current_value = *input_buffer;\n  if (((current_flag & 0x1111) == 0) && ((current_flag & 0x444) == 0)) {\n    *current_value = *current_value & 0xfffffffe;\n  }\n  *(undefined *)((int)input_buffer + 0x3d) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080063c0": "update_flags_080063c0",
                "param_1": "input_buffer",
                "param_2": "value",
                "puVar1": "current_value",
                "uRam40012c20": "flag_1",
                "uRam40012c44": "flag_2",
                "puVar1[8]": "current_flag"
            },
            "calling": [
                "FUN_080071e4"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006420": {
            "entrypoint": "0x08006420",
            "current_name": "update_bits_08006420",
            "code": "\nvoid updateBits_08006420(int baseAddress,uint bitPosition,int bitValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(4 << (bitPosition & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | bitValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006420": "update_bits_08006420",
                "param_1": "baseAddress",
                "param_2": "bitPosition",
                "param_3": "bitValue"
            },
            "calling": [
                "FUN_0800643c",
                "FUN_08006460"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800643c": {
            "entrypoint": "0x0800643c",
            "current_name": "update_and_set_bits_0800643c",
            "code": "\nundefined4 updateAndSetBits_0800643c(uint **ptr,undefined4 value)\n\n{\n  update_bits_08006420(*ptr,value,4);\n  (*ptr)[0x11] = (*ptr)[0x11] | 0x8000;\n  **ptr = **ptr | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800643c": "update_and_set_bits_0800643c",
                "param_1": "ptr",
                "param_2": "value"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08006420"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006460": {
            "entrypoint": "0x08006460",
            "current_name": "update_and_check_bits_08006460",
            "code": "\nundefined4 updateAndCheckBits_08006460(uint **inputArray,undefined4 bitMask)\n\n{\n  uint *arrayPointer;\n  \n  update_bits_08006420(*inputArray,bitMask,0);\n  arrayPointer = *inputArray;\n  if (((arrayPointer[8] & 0x1111) == 0) && ((arrayPointer[8] & 0x444) == 0)) {\n    arrayPointer[0x11] = arrayPointer[0x11] & 0xffff7fff;\n  }\n  arrayPointer = *inputArray;\n  if (((arrayPointer[8] & 0x1111) == 0) && ((arrayPointer[8] & 0x444) == 0)) {\n    *arrayPointer = *arrayPointer & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006460": "update_and_check_bits_08006460",
                "param_1": "inputArray",
                "param_2": "bitMask",
                "puVar1": "arrayPointer"
            },
            "calling": [
                "FUN_080071e4"
            ],
            "called": [
                "FUN_08006420"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064ac": {
            "entrypoint": "0x080064ac",
            "current_name": "FUNC_080064ac",
            "code": "\nvoid FUNC_080064ac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064ac": "FUNC_080064ac"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080064ae": {
            "entrypoint": "0x080064ae",
            "current_name": "FUNC_080064ae",
            "code": "\nvoid FUNC_080064ae(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064ae": "FUNC_080064ae"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080064b0": {
            "entrypoint": "0x080064b0",
            "current_name": "update_parameters_080064b0",
            "code": "\nvoid updateParameters_080064b0(int *param)\n\n{\n  *(uint *)(*param + 0xc) = *(uint *)(*param + 0xc) & 0xfffffedf;\n  *(uint *)(*param + 0x14) = *(uint *)(*param + 0x14) & 0xfffffffe;\n  *(undefined *)((int)param + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064b0": "update_parameters_080064b0",
                "param_1": "param"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064cc": {
            "entrypoint": "0x080064cc",
            "current_name": "process_data_080064cc",
            "code": "\nundefined4 processData_080064cc(int *data)\n\n{\n  short counter;\n  byte *bytePointer;\n  \n  if (*(char *)((int)data + 0x39) != '!') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    *(uint *)(*data + 4) = *(ushort *)data[8] & 0x1ff;\n    if (data[4] == 0) {\n      data[8] = data[8] + 2;\n    }\n    else {\n      data[8] = data[8] + 1;\n    }\n  }\n  else {\n    bytePointer = (byte *)data[8];\n    data[8] = (int)(bytePointer + 1);\n    *(uint *)(*data + 4) = (uint)*bytePointer;\n  }\n  counter = *(short *)((int)data + 0x26) + -1;\n  *(short *)((int)data + 0x26) = counter;\n  if (counter == 0) {\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffff7f;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080064cc": "process_data_080064cc",
                "param_1": "data",
                "sVar1": "counter",
                "pbVar2": "bytePointer"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006538": {
            "entrypoint": "0x08006538",
            "current_name": "calculate_result_08006538",
            "code": "\nvoid calculateResult_08006538(int *inputParams)\n\n{\n  int shiftedValue1;\n  int shiftedValue2;\n  int shiftedValue3;\n  int shiftedValue4;\n  int shiftedValue5;\n  int param1Value1;\n  int param1Value2;\n  int param1Value3;\n  int param1Value4;\n  int functionAddress;\n  \n  *(uint *)(*inputParams + 0x10) = *(uint *)(*inputParams + 0x10) & 0xffffcfff | inputParams[3];\n  *(uint *)(*inputParams + 0xc) =\n       inputParams[2] | inputParams[4] | inputParams[5] | *(uint *)(*inputParams + 0xc) & 0xffffe9f3;\n  *(uint *)(*inputParams + 0x14) = *(uint *)(*inputParams + 0x14) & 0xfffffcff | inputParams[6];\n  functionAddress = *inputParams;\n  if (functionAddress != 0x40013800) {\n    shiftedValue1 = get_shifted_data_value_08005a28();\n    param1Value1 = inputParams[1];\n    shiftedValue2 = get_shifted_data_value_08005a28();\n    param1Value2 = inputParams[1];\n    shiftedValue3 = get_shifted_data_value_08005a28();\n    param1Value3 = inputParams[1];\n    shiftedValue4 = get_shifted_data_value_08005a28();\n    param1Value4 = inputParams[1];\n    shiftedValue5 = get_shifted_data_value_08005a28();\n    *(uint *)(functionAddress + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(shiftedValue4 * 0x19) / (uint)(param1Value4 << 2) +\n                        (int)(((ulonglong)(uint)(shiftedValue5 * 0x19) / (ulonglong)(uint)(inputParams[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(shiftedValue2 * 0x19) / (uint)(param1Value2 << 2) +\n           (int)(((ulonglong)(uint)(shiftedValue3 * 0x19) / (ulonglong)(uint)(param1Value3 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(shiftedValue1 * 0x19) / (ulonglong)(uint)(param1Value1 << 2)) / 100) * 0x10;\n    return;\n  }\n  functionAddress = get_shifted_data_value_08005a48();\n  shiftedValue5 = inputParams[1];\n  shiftedValue1 = get_shifted_data_value_08005a48();\n  param1Value1 = inputParams[1];\n  shiftedValue2 = get_shifted_data_value_08005a48();\n  param1Value2 = inputParams[1];\n  shiftedValue3 = get_shifted_data_value_08005a48();\n  param1Value3 = inputParams[1];\n  shiftedValue4 = get_shifted_data_value_08005a48();\n  iRam40013808 = ((uint)((int)((ulonglong)\n                               (((uint)(shiftedValue3 * 0x19) / (uint)(param1Value3 << 2) +\n                                (int)(((ulonglong)(uint)(shiftedValue4 * 0x19) /\n                                      (ulonglong)(uint)(inputParams[1] << 2)) / 100) * -100) * 0x10 +\n                               0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n                 ((((uint)(shiftedValue1 * 0x19) / (uint)(param1Value1 << 2) +\n                   (int)(((ulonglong)(uint)(shiftedValue2 * 0x19) / (ulonglong)(uint)(param1Value2 << 2)) / 100) *\n                   -100) * 0x10 + 0x32) / 100 & 0xf0) +\n                 (int)(((ulonglong)(uint)(functionAddress * 0x19) / (ulonglong)(uint)(shiftedValue5 << 2)) / 100) *\n                 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006538": "calculate_result_08006538",
                "param_1": "inputParams",
                "iVar1": "shiftedValue1",
                "iVar2": "shiftedValue2",
                "iVar3": "shiftedValue3",
                "iVar4": "shiftedValue4",
                "iVar5": "shiftedValue5",
                "iVar6": "param1Value1",
                "iVar7": "param1Value2",
                "iVar8": "param1Value3",
                "iVar9": "param1Value4",
                "iVar10": "functionAddress"
            },
            "calling": [
                "FUN_0800674e"
            ],
            "called": [
                "FUN_08005a28",
                "FUN_08005a48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066e8": {
            "entrypoint": "0x080066e8",
            "current_name": "verify_condition_080066e8",
            "code": "\nundefined4 verifyCondition_080066e8(uint **inputs,uint mask,uint expected,int value,uint threshold)\n\n{\n  int dataValue;\n  \n  do {\n    if (((mask & ~**inputs) == 0) != expected) {\n      return 0;\n    }\n  } while ((threshold == 0xffffffff) ||\n          ((threshold != 0 && (dataValue = get_dat_value_08003760(), (uint)(dataValue - value) <= threshold))));\n  (*inputs)[3] = (*inputs)[3] & 0xfffffe5f;\n  (*inputs)[5] = (*inputs)[5] & 0xfffffffe;\n  *(undefined *)((int)inputs + 0x39) = 0x20;\n  *(undefined *)((int)inputs + 0x3a) = 0x20;\n  *(undefined *)(inputs + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_080066e8": "verify_condition_080066e8",
                "param_1": "inputs",
                "param_2": "mask",
                "param_3": "expected",
                "param_4": "value",
                "param_5": "threshold",
                "iVar1": "dataValue"
            },
            "calling": [
                "FUN_080067ac"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800674c": {
            "entrypoint": "0x0800674c",
            "current_name": "FUNC_0800674c",
            "code": "\nvoid FUNC_0800674c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800674c": "FUNC_0800674c"
            },
            "calling": [
                "FUN_0800674e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800674e": {
            "entrypoint": "0x0800674e",
            "current_name": "validate_and_update_param_0800674e",
            "code": "\nundefined4 validate_and_update_param_0800674e(int *param)\n\n{\n  if (param != (int *)0x0) {\n    if (*(char *)((int)param + 0x39) == '\\0') {\n      *(undefined *)(param + 0xe) = 0;\n      FUNC_0800674c();\n    }\n    *(undefined *)((int)param + 0x39) = 0x24;\n    *(uint *)(*param + 0xc) = *(uint *)(*param + 0xc) & 0xffffdfff;\n    calculate_result(param);\n    *(uint *)(*param + 0x10) = *(uint *)(*param + 0x10) & 0xffffb7ff;\n    *(uint *)(*param + 0x14) = *(uint *)(*param + 0x14) & 0xffffffd5;\n    *(uint *)(*param + 0xc) = *(uint *)(*param + 0xc) | 0x2000;\n    var4 = 0;\n    *(undefined *)((int)param + 0x39) = 0x20;\n    *(undefined *)((int)param + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800674e": "validate_and_update_param_0800674e",
                "param_1": "param",
                "calculate_result_08006538": "calculate_result",
                "param_1[0xf]": "var4"
            },
            "calling": [
                "FUN_08008078"
            ],
            "called": [
                "FUN_08006538",
                "FUN_0800674c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080067ac": {
            "entrypoint": "0x080067ac",
            "current_name": "process_data_080067ac",
            "code": "\nundefined4 process_data_080067ac(int *data_ptr,ushort *input_ptr,int input_length,undefined4 param)\n\n{\n  int result;\n  undefined4 return_value;\n  \n  if (*(char *)((int)data_ptr + 0x39) == ' ') {\n    if (input_ptr == (ushort *)0x0) {\n      return_value = 1;\n    }\n    else if (input_length == 0) {\n      return_value = 1;\n    }\n    else if (*(char *)(data_ptr + 0xe) == '\\x01') {\n      return_value = 2;\n    }\n    else {\n      *(undefined *)(data_ptr + 0xe) = 1;\n      data_ptr[0xf] = 0;\n      *(undefined *)((int)data_ptr + 0x39) = 0x21;\n      return_value = get_dat_value_08003760();\n      *(short *)(data_ptr + 9) = (short)input_length;\n      *(short *)((int)data_ptr + 0x26) = (short)input_length;\n      while (*(short *)((int)data_ptr + 0x26) != 0) {\n        *(short *)((int)data_ptr + 0x26) = *(short *)((int)data_ptr + 0x26) + -1;\n        if (data_ptr[2] == 0x1000) {\n          result = verify_condition_080066e8(data_ptr,0x80,0,return_value,param);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = *input_ptr & 0x1ff;\n          if (data_ptr[4] == 0) {\n            input_ptr = input_ptr + 1;\n          }\n          else {\n            input_ptr = (ushort *)((int)input_ptr + 1);\n          }\n        }\n        else {\n          result = verify_condition_080066e8(data_ptr,0x80,0,return_value,param);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = (uint)*(byte *)input_ptr;\n          input_ptr = (ushort *)((int)input_ptr + 1);\n        }\n      }\n      result = verify_condition_080066e8(data_ptr,0x40,0,return_value,param);\n      if (result == 0) {\n        *(undefined *)((int)data_ptr + 0x39) = 0x20;\n        *(undefined *)(data_ptr + 0xe) = 0;\n        return_value = 0;\n      }\n      else {\n        return_value = 3;\n      }\n    }\n  }\n  else {\n    return_value = 2;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_080067ac": "process_data_080067ac",
                "param_1": "data_ptr",
                "param_2": "input_ptr",
                "param_3": "input_length",
                "param_4": "param",
                "iVar1": "result",
                "uVar2": "return_value"
            },
            "calling": [
                "FUN_08008500"
            ],
            "called": [
                "FUN_080066e8",
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800688e": {
            "entrypoint": "0x0800688e",
            "current_name": "validate_and_update_settings_0800688e",
            "code": "\nundefined4 validateAndUpdateSettings_0800688e(int *settings,int input1,int input2)\n\n{\n  if (*(char *)((int)settings + 0x39) != ' ') {\n    return 2;\n  }\n  if (input1 == 0) {\n    return 1;\n  }\n  if (input2 == 0) {\n    return 1;\n  }\n  if (*(char *)(settings + 0xe) != '\\x01') {\n    settings[8] = input1;\n    *(short *)(settings + 9) = (short)input2;\n    *(short *)((int)settings + 0x26) = (short)input2;\n    settings[0xf] = 0;\n    *(undefined *)((int)settings + 0x39) = 0x21;\n    *(undefined *)(settings + 0xe) = 0;\n    *(uint *)(*settings + 0xc) = *(uint *)(*settings + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_0800688e": "validate_and_update_settings_0800688e",
                "param_1": "settings",
                "param_2": "input1",
                "param_3": "input2"
            },
            "calling": [
                "FUN_08008730",
                "FUN_08008694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080068d6": {
            "entrypoint": "0x080068d6",
            "current_name": "validate_input_080068d6",
            "code": "\nundefined4 validate_input_080068d6(int *input_data,int size,int value)\n\n{\n  if (*(char *)((int)input_data + 0x3a) != ' ') {\n    return 2;\n  }\n  if (size == 0) {\n    return 1;\n  }\n  if (value == 0) {\n    return 1;\n  }\n  if (*(char *)(input_data + 0xe) != '\\x01') {\n    input_data[10] = size;\n    *(short *)(input_data + 0xb) = (short)value;\n    *(short *)((int)input_data + 0x2e) = (short)value;\n    input_data[15] = 0;\n    *(undefined *)((int)input_data + 0x3a) = 0x22;\n    *(undefined *)(input_data + 0xe) = 0;\n    *(uint *)(*input_data + 0xc) = *(uint *)(*input_data + 0xc) | 0x100;\n    *(uint *)(*input_data + 0x14) = *(uint *)(*input_data + 0x14) | 1;\n    *(uint *)(*input_data + 0xc) = *(uint *)(*input_data + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_080068d6": "validate_input_080068d6",
                "param_1": "input_data",
                "param_2": "size",
                "param_3": "value",
                "param_1[10]": "input_data[10]",
                "param_1[0xf]": "input_data[15]"
            },
            "calling": [
                "FUN_08008600",
                "FUN_0800863c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006932": {
            "entrypoint": "0x08006932",
            "current_name": "update_and_reset_settings_08006932",
            "code": "\nundefined4 update_and_reset_settings_08006932(int *settings_ptr)\n\n{\n  *(uint *)(*settings_ptr + 0xc) = *(uint *)(*settings_ptr + 0xc) & 0xffffffbf;\n  *(undefined *)((int)settings_ptr + 0x39) = 0x20;\n  update_settings();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006932": "update_and_reset_settings_08006932",
                "param_1": "settings_ptr",
                "update_settings_08008730": "update_settings"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [
                "FUN_08008730"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800694c": {
            "entrypoint": "0x0800694c",
            "current_name": "process_data_0800694c",
            "code": "\nundefined4 processData_0800694c(int *data)\n\n{\n  byte *bytePointer;\n  short count;\n  undefined *undefinedPointer;\n  \n  if (*(char *)((int)data + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      *(ushort *)data[10] = (ushort)((uint)(*(int *)(*data + 4) << 0x17) >> 0x17);\n      data[10] = data[10] + 2;\n    }\n    else {\n      *(ushort *)data[10] = (ushort)*(undefined4 *)(*data + 4) & 0xff;\n      data[10] = data[10] + 1;\n    }\n  }\n  else if (data[4] == 0) {\n    undefinedPointer = (undefined *)data[10];\n    data[10] = (int)(undefinedPointer + 1);\n    *undefinedPointer = (char)*(undefined4 *)(*data + 4);\n  }\n  else {\n    bytePointer = (byte *)data[10];\n    data[10] = (int)(bytePointer + 1);\n    *bytePointer = (byte)*(undefined4 *)(*data + 4) & 0x7f;\n  }\n  count = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = count;\n  if (count != 0) {\n    return 0;\n  }\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffffdf;\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xfffffeff;\n  *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xfffffffe;\n  *(undefined *)((int)data + 0x3a) = 0x20;\n  execute_selected_function_0800870c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800694c": "process_data_0800694c",
                "param_1": "data",
                "pbVar1": "bytePointer",
                "sVar2": "count",
                "puVar3": "undefinedPointer"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [
                "FUN_0800870c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069ec": {
            "entrypoint": "0x080069ec",
            "current_name": "process_data_080069ec",
            "code": "\nvoid processData_080069ec(uint **data)\n\n{\n  int returnValue;\n  uint value2;\n  uint *pointer;\n  uint value4;\n  uint value5;\n  \n  pointer = *data;\n  value5 = *pointer;\n  value2 = pointer[3];\n  if ((((value5 & 0xf) == 0) && ((value5 & 0x20) != 0)) && ((value2 & 0x20) != 0)) {\n    process_data_0800694c(data);\n    return;\n  }\n  if (((value5 & 0xf) == 0) || ((value4 = pointer[5] & 1, value4 == 0 && ((value2 & 0x120) == 0)))) {\n    if (((value5 & 0x80) != 0) && ((value2 & 0x80) != 0)) {\n      process_data_080064cc(data);\n      return;\n    }\n    if (((value5 & 0x40) != 0) && ((value2 & 0x40) != 0)) {\n      update_and_reset_settings_08006932(data);\n    }\n  }\n  else {\n    if (((value5 & 1) != 0) && ((value2 & 0x100) != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 1);\n    }\n    if (((value5 & 4) != 0) && (value4 != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 2);\n    }\n    if (((value5 & 2) != 0) && (value4 != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 4);\n    }\n    if (((value5 & 8) != 0) && (value4 != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 8);\n    }\n    if (data[0xf] != (uint *)0x0) {\n      if (((value5 & 0x20) != 0) && ((value2 & 0x20) != 0)) {\n        process_data_0800694c(data);\n      }\n      if ((((uint)data[0xf] & 8) == 0) && (((*data)[5] & 0x40) == 0)) {\n        FUNC_0800877c(data);\n        data[0xf] = (uint *)0x0;\n        return;\n      }\n      update_parameters_080064b0(data);\n      pointer = *data;\n      if ((pointer[5] & 0x40) == 0) {\n        FUNC_0800877c(data);\n        return;\n      }\n      pointer[5] = pointer[5] & 0xffffffbf;\n      if (data[0xd] == (uint *)0x0) {\n        FUNC_0800877c(data);\n        return;\n      }\n      data[0xd][0xd] = (uint)&LAB_08006b0c_1;\n      returnValue = initialize_data_08004050(data[0xd]);\n      if (returnValue != 0) {\n        (*(code *)data[0xd][0xd])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069ec": "process_data_080069ec",
                "param_1": "data",
                "iVar1": "returnValue",
                "uVar2": "value2",
                "puVar3": "pointer",
                "uVar4": "value4",
                "uVar5": "value5"
            },
            "calling": [],
            "called": [
                "FUN_0800877c",
                "FUN_08004050",
                "FUN_080064b0",
                "FUN_0800694c",
                "FUN_08006932",
                "FUN_080064cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b1c": {
            "entrypoint": "0x08006b1c",
            "current_name": "combine_bytes_08006b1c",
            "code": "\nbyte combineBytes_08006b1c(int byteOffset)\n\n{\n  return *(byte *)(byteOffset + 0x3a) | *(byte *)(byteOffset + 0x39);\n}\n\n",
            "renaming": {
                "FUN_08006b1c": "combine_bytes_08006b1c",
                "param_1": "byteOffset"
            },
            "calling": [
                "FUN_080085b8",
                "FUN_080085dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b28": {
            "entrypoint": "0x08006b28",
            "current_name": "extract_bit_from_pointer_08006b28",
            "code": "\nuint extractBitFromPointer_08006b28(uint inputValue,int pointerOffset)\n\n{\n  return *(uint *)(pointerOffset + ((inputValue << 0x18) >> 0x1c) * 4) >> (inputValue & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08006b28": "extract_bit_from_pointer_08006b28",
                "param_1": "inputValue",
                "param_2": "pointerOffset"
            },
            "calling": [
                "FUN_080088e0",
                "FUN_08008a6c",
                "FUN_08008a24",
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b3e": {
            "entrypoint": "0x08006b3e",
            "current_name": "set_bit_08006b3e",
            "code": "\nvoid setBit_08006b3e(uint value,int array)\n\n{\n  uint index;\n  \n  index = (value << 0x18) >> 0x1c;\n  *(uint *)(array + index * 4) = *(uint *)(array + index * 4) | 1 << (value & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b3e": "set_bit_08006b3e",
                "param_1": "value",
                "param_2": "array",
                "uVar1": "index"
            },
            "calling": [
                "FUN_080088e0",
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b5c": {
            "entrypoint": "0x08006b5c",
            "current_name": "update_bit_value_08006b5c",
            "code": "\nvoid updateBitValue_08006b5c(uint bitPosition,int dataArray)\n\n{\n  uint shiftedPosition;\n  \n  shiftedPosition = (bitPosition << 0x18) >> 0x1c;\n  *(uint *)(dataArray + shiftedPosition * 4) = *(uint *)(dataArray + shiftedPosition * 4) & ~(1 << (bitPosition & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b5c": "update_bit_value_08006b5c",
                "param_1": "bitPosition",
                "param_2": "dataArray",
                "uVar1": "shiftedPosition"
            },
            "calling": [
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b7c": {
            "entrypoint": "0x08006b7c",
            "current_name": "map_param_to_address_08006b7c",
            "code": "\nundefined4 mapParamToAddress_08006b7c(undefined4 input)\n\n{\n  switch(input) {\n  case 0:\n    return 0x40010800;\n  case 1:\n    return 0x40010c00;\n  case 2:\n    return 0x40011000;\n  case 3:\n    return 0x40011400;\n  case 4:\n    return 0x40011800;\n  default:\n    return 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_08006b7c": "map_param_to_address_08006b7c",
                "param_1": "input"
            },
            "calling": [
                "FUN_08008a6c",
                "FUN_08008a24"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006bb8": {
            "entrypoint": "0x08006bb8",
            "current_name": "set_memory_access_permissions_08006bb8",
            "code": "\n\n\nundefined4 setMemoryAccessPermissions_08006bb8(undefined4 accessLevel)\n\n{\n  undefined4 baseAddress;\n  \n  switch(accessLevel) {\n  case 0:\n    _DAT_40021018 = _DAT_40021018 | 4;\n    baseAddress = 0x40010800;\n    break;\n  case 1:\n    _DAT_40021018 = _DAT_40021018 | 8;\n    baseAddress = 0x40010c00;\n    break;\n  case 2:\n    _DAT_40021018 = _DAT_40021018 | 0x10;\n    baseAddress = 0x40011000;\n    break;\n  case 3:\n    _DAT_40021018 = _DAT_40021018 | 0x20;\n    baseAddress = 0x40011400;\n    break;\n  case 4:\n    _DAT_40021018 = _DAT_40021018 | 0x40;\n    baseAddress = 0x40011800;\n    break;\n  default:\n    baseAddress = 0;\n  }\n  return baseAddress;\n}\n\n",
            "renaming": {
                "FUN_08006bb8": "set_memory_access_permissions_08006bb8",
                "param_1": "accessLevel",
                "uVar1": "baseAddress"
            },
            "calling": [
                "FUN_08006ca8",
                "FUN_08007258",
                "FUN_08006e68",
                "FUN_080077b0",
                "FUN_08008078"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c60": {
            "entrypoint": "0x08006c60",
            "current_name": "get_value_index_08006c60",
            "code": "\nuint getValueIndex_08006c60(undefined4 value,undefined4 unknown,undefined4 arrayPtr,undefined4 unknown)\n\n{\n  int index;\n  uint shiftedIndex;\n  \n  index = get_value_index_08007376(value,&DAT_0800a5b8,arrayPtr,unknown,unknown);\n  shiftedIndex = (uint)(index << 0xc) >> 0x1b;\n  if (0x10 < shiftedIndex - 1) {\n    shiftedIndex = 0;\n  }\n  return shiftedIndex;\n}\n\n",
            "renaming": {
                "FUN_08006c60": "get_value_index_08006c60",
                "param_1": "value",
                "param_2": "unknown",
                "param_3": "arrayPtr",
                "param_4": "unknown",
                "iVar1": "index",
                "uVar2": "shiftedIndex"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08007376"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c7c": {
            "entrypoint": "0x08006c7c",
            "current_name": "get_value_index_and_map_08006c7c",
            "code": "\nundefined4 get_value_index_and_map_08006c7c(undefined4 input_value,undefined4 unused_param,undefined4 index_pointer,undefined4 unused_param_2)\n\n{\n  int value_index;\n  uint shifted_value;\n  \n  value_index = get_value_index_08007376(input_value,&DAT_0800a6cc,index_pointer,unused_param_2,unused_param_2);\n  shifted_value = (uint)(value_index << 0xc) >> 0x1b;\n  if (shifted_value == 3) {\n    return 8;\n  }\n  if (shifted_value != 4) {\n    if (shifted_value != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_08006c7c": "get_value_index_and_map_08006c7c",
                "param_1": "input_value",
                "param_2": "unused_param",
                "param_3": "index_pointer",
                "param_4": "unused_param_2",
                "iVar1": "value_index",
                "uVar2": "shifted_value"
            },
            "calling": [
                "FUN_080071e4",
                "FUN_08007118"
            ],
            "called": [
                "FUN_08007376"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ca8": {
            "entrypoint": "0x08006ca8",
            "current_name": "set_memory_permissions_08006ca8",
            "code": "\n\n\nvoid set_memory_permissions_08006ca8(int *memory_address,undefined4 access_permissions)\n\n{\n  undefined4 result;\n  uint updated_permissions;\n  int original_permissions;\n  uint bit_mask;\n  undefined4 bit_count;\n  undefined4 bit_offset;\n  \n  original_permissions = *memory_address;\n  if (original_permissions == 0x40012400) {\n    updated_permissions = _DAT_40021018 | 0x200;\n    original_permissions = 0x200;\n    _DAT_40021018 = updated_permissions;\n  }\n  else {\n    updated_permissions = 0x40012800;\n    if (original_permissions == 0x40012800) {\n      updated_permissions = _DAT_40021018 | 0x400;\n      original_permissions = 0x400;\n      _DAT_40021018 = updated_permissions;\n    }\n  }\n  result = set_memory_access_permissions_08006bb8((uint)((int)(char)DAT_20000014 << 0x18) >> 0x1c,access_permissions,updated_permissions,original_permissions);\n  bit_mask = 1 << (DAT_20000014 & 0xf) & 0xffff;\n  bit_count = 3;\n  bit_offset = 0;\n  update_bits_080040e8(result,&bit_mask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ca8": "set_memory_permissions_08006ca8",
                "param_1": "memory_address",
                "param_2": "access_permissions",
                "uVar1": "result",
                "uVar2": "updated_permissions",
                "iVar3": "original_permissions",
                "local_18": "bit_mask",
                "local_14": "bit_count",
                "local_10": "bit_offset"
            },
            "calling": [
                "FUN_08003bd8"
            ],
            "called": [
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d24": {
            "entrypoint": "0x08006d24",
            "current_name": "update_status_registers_08006d24",
            "code": "\n\n\nvoid updateStatusRegisters_08006d24(int *statusRegisterPtr)\n\n{\n  if (*statusRegisterPtr != 0x40012400) {\n    if (*statusRegisterPtr == 0x40012800) {\n      _DAT_4002100c = _DAT_4002100c & 0xfffffbff;\n      _DAT_40021018 = _DAT_40021018 & 0xfffffbff;\n    }\n    return;\n  }\n  _DAT_4002100c = _DAT_4002100c & 0xfffffdff;\n  _DAT_40021018 = _DAT_40021018 & 0xfffffdff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d24": "update_status_registers_08006d24",
                "param_1": "statusRegisterPtr"
            },
            "calling": [
                "FUN_08003ce8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d80": {
            "entrypoint": "0x08006d80",
            "current_name": "process_memory_08006d80",
            "code": "\nundefined2 process_memory_08006d80(undefined4 input_value)\n\n{\n  int result_code;\n  uint value_mask;\n  undefined2 result;\n  uint value_index;\n  undefined4 settings_flag;\n  undefined4 settings_value;\n  int value;\n  undefined4 offset1;\n  undefined4 offset2;\n  undefined4 offset3;\n  undefined4 toggle_flag;\n  undefined4 offset4;\n  undefined4 offset6;\n  undefined4 memory_address;\n  undefined4 offset5;\n  \n  fill_memory_080091c6(&value,0,0x30);\n  value_index = 0;\n  settings_flag = 0;\n  settings_value = 0;\n  result = 0;\n  value = find_value_index_08007320(input_value,&DAT_0800a5b8);\n  if (value == 0) {\n    result = 0;\n  }\n  else {\n    offset1 = 0;\n    offset2 = 0;\n    offset3 = 0;\n    offset4 = 0;\n    memory_address = 0xe0000;\n    offset5 = 0;\n    toggle_flag = 1;\n    offset6 = 0;\n    DAT_20000014 = (undefined)input_value;\n    result_code = update_memory_permissions_08003bd8(&value);\n    if (result_code == 0) {\n      value_index = get_value_index_08006c60(input_value);\n      if (value_index < 0x12) {\n        settings_flag = 1;\n        settings_value = 2;\n        result_code = update_settings_080038e4(&value,&value_index);\n        if (result_code == 0) {\n          result_code = process_data_08003e20(&value);\n          if (result_code == 0) {\n            result_code = process_data_enable_08003aa0(&value);\n            if (result_code == 0) {\n              result_code = check_data_validity_0800376c(&value,10);\n              if (result_code == 0) {\n                value_mask = get_value_at_offset_08003a1c(&value);\n                if ((value_mask & 0x200) != 0) {\n                  result = get_offset_080038dc(&value);\n                }\n                result_code = toggle_value_and_verify_08003de4(&value);\n                if (result_code == 0) {\n                  result_code = update_value_08003ce8(&value);\n                  if (result_code != 0) {\n                    result = 0;\n                  }\n                }\n                else {\n                  result = 0;\n                }\n              }\n              else {\n                result = 0;\n              }\n            }\n            else {\n              result = 0;\n            }\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006d80": "process_memory_08006d80",
                "param_1": "input_value",
                "local_46": "result",
                "local_44": "value_index",
                "local_40": "settings_flag",
                "local_3c": "settings_value",
                "local_38": "value",
                "local_34": "offset1",
                "local_30": "offset2",
                "local_2c": "offset3",
                "local_24": "offset4",
                "local_1c": "memory_address",
                "local_10": "offset5",
                "local_28": "toggle_flag",
                "local_20": "offset6",
                "iVar1": "result_code",
                "uVar2": "value_mask"
            },
            "calling": [
                "FUN_08008880"
            ],
            "called": [
                "FUN_08003ce8",
                "FUN_08003de4",
                "FUN_08007320",
                "FUN_08003a1c",
                "FUN_08003e20",
                "FUN_080038e4",
                "FUN_080091c6",
                "FUN_08003aa0",
                "FUN_08003bd8",
                "FUN_0800376c",
                "FUN_080038dc",
                "FUN_08006c60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e68": {
            "entrypoint": "0x08006e68",
            "current_name": "initialize_memory_access_08006e68",
            "code": "\n\n\nvoid initializeMemoryAccess_08006e68(undefined4 param)\n\n{\n  int valueIndex;\n  undefined4 memoryAccessPermissions;\n  uint bitMask;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  \n  valueIndex = get_value_index_08007376((int)(char)DAT_20000014,&DAT_0800a6cc);\n  update_flags_and_pointers_08007438(param);\n  memoryAccessPermissions = set_memory_access_permissions_08006bb8((uint)((int)(char)DAT_20000014 << 0x18) >> 0x1c);\n  value1 = 2;\n  value2 = 0;\n  value3 = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  switch((uint)(valueIndex << 0x11) >> 0x19) {\n  case 1:\n    _DAT_40010004 = _DAT_40010004 | 0x7000001;\n    break;\n  case 2:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n    break;\n  case 3:\n    _DAT_40010004 = _DAT_40010004 | 0x7000002;\n    break;\n  case 4:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n    break;\n  case 5:\n    _DAT_40010004 = _DAT_40010004 | 0x7000004;\n    break;\n  case 6:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n    break;\n  case 7:\n    _DAT_40010004 = _DAT_40010004 | 0x7000008;\n    break;\n  case 8:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n    break;\n  case 9:\n    _DAT_40010004 = _DAT_40010004 | 0x7000030;\n    break;\n  case 10:\n    _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n    break;\n  case 0xb:\n    _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n    break;\n  case 0xc:\n    _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n    break;\n  case 0xd:\n    _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n    break;\n  case 0xe:\n    _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n    break;\n  case 0xf:\n    _DAT_40010004 = _DAT_40010004 | 0x7000300;\n    break;\n  case 0x10:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n    break;\n  case 0x11:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n    break;\n  case 0x12:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n    break;\n  case 0x13:\n    _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n    break;\n  case 0x14:\n    _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n    break;\n  case 0x15:\n    _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n    break;\n  case 0x16:\n    _DAT_40010004 = _DAT_40010004 | 0x7001000;\n    break;\n  case 0x17:\n    _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n    break;\n  case 0x1b:\n    _DAT_40010004 = _DAT_40010004 | 0x7008000;\n    break;\n  case 0x1c:\n    _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n    break;\n  case 0x21:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n    break;\n  case 0x22:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n    break;\n  case 0x23:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n    break;\n  case 0x24:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  bitMask = 1 << (DAT_20000014 & 0xf) & 0xffff;\n  update_bits_080040e8(memoryAccessPermissions,&bitMask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e68": "initialize_memory_access_08006e68",
                "param_1": "param",
                "iVar1": "valueIndex",
                "uVar2": "memoryAccessPermissions",
                "local_20": "bitMask",
                "local_1c": "value1",
                "local_18": "value2",
                "local_14": "value3"
            },
            "calling": [
                "FUN_08006092"
            ],
            "called": [
                "FUN_08007438",
                "FUN_080040e8",
                "FUN_08007376",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007110": {
            "entrypoint": "0x08007110",
            "current_name": "initialize_register_values_08007110",
            "code": "\nvoid initialize_register_values_08007110(void)\n\n{\n  update_register_values();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007110": "initialize_register_values_08007110",
                "update_register_values_080074e0": "update_register_values"
            },
            "calling": [
                "FUN_08005e2e"
            ],
            "called": [
                "FUN_080074e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007118": {
            "entrypoint": "0x08007118",
            "current_name": "initialize_memory_08007118",
            "code": "\nvoid initializeMemory_08007118(undefined4 inputParam,uint divisor,int subtractor,undefined4 configParam,char flagParam)\n\n{\n  uint shiftedValue;\n  int result;\n  int configureResult;\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var4;\n  undefined4 var5;\n  undefined4 var6;\n  undefined4 var7;\n  int valueIndex;\n  int calculatedValue;\n  undefined4 var8;\n  int var9;\n  undefined4 var10;\n  undefined4 var11;\n  undefined var12;\n  \n  fill_memory_080091c6(&valueIndex,0,0x40);\n  var1 = 0;\n  var2 = 0;\n  var3 = 0;\n  var4 = 0;\n  var5 = 0;\n  var6 = 0;\n  var7 = 0;\n  valueIndex = find_value_index_08007320(inputParam,&DAT_0800a6cc);\n  if (valueIndex != 0) {\n    shiftedValue = calculate_shifted_value_080075dc();\n    calculatedValue = shiftedValue / divisor - 1;\n    var9 = subtractor + -1;\n    var10 = 0;\n    var8 = 0;\n    var11 = 0;\n    var12 = 0;\n    if (flagParam == '\\x01') {\n      DAT_20000014 = (undefined)inputParam;\n      result = initialize_memory_08006092(&valueIndex);\n      if (result != 0) {\n        return;\n      }\n    }\n    result = get_value_index_and_map_08006c7c(inputParam);\n    if ((((result == 0) || (result == 4)) || (result == 8)) || ((result == 0xc || (result == 0x18)))) {\n      var1 = 0x60;\n      var3 = 0;\n      var5 = 0;\n      var4 = 0;\n      var7 = 0;\n      var6 = 0;\n      var2 = configParam;\n      configureResult = configure_device_08006186(&valueIndex,&var1,result);\n      if (configureResult == 0) {\n        shiftedValue = get_value_index_08007376(inputParam,&DAT_0800a6cc);\n        if ((shiftedValue & 0x100000) == 0) {\n          update_and_flag_check_08006390(&valueIndex,result);\n        }\n        else {\n          update_and_set_bits_0800643c(&valueIndex,result);\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007118": "initialize_memory_08007118",
                "param_1": "inputParam",
                "param_2": "divisor",
                "param_3": "subtractor",
                "param_4": "configParam",
                "param_5": "flagParam",
                "uVar1": "shiftedValue",
                "iVar2": "result",
                "iVar3": "configureResult",
                "local_74": "var1",
                "local_70": "var2",
                "local_6c": "var3",
                "local_68": "var4",
                "local_64": "var5",
                "local_60": "var6",
                "local_5c": "var7",
                "local_58": "valueIndex",
                "local_54": "calculatedValue",
                "local_50": "var8",
                "local_4c": "var9",
                "local_48": "var10",
                "local_44": "var11",
                "local_1b": "var12"
            },
            "calling": [
                "FUN_080088e0"
            ],
            "called": [
                "FUN_0800643c",
                "FUN_080075dc",
                "FUN_08006390",
                "FUN_08007320",
                "FUN_08006092",
                "FUN_080091c6",
                "FUN_08006186",
                "FUN_08007376",
                "FUN_08006c7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080071e4": {
            "entrypoint": "0x080071e4",
            "current_name": "process_values_080071e4",
            "code": "\nvoid processValues_080071e4(undefined4 input)\n\n{\n  int iVar1;\n  uint uVar2;\n  int valueIndices [17];\n  \n  valueIndices[0] = find_value_index_08007320(input,&DAT_0800a6cc);\n  if ((valueIndices[0] != 0) &&\n     ((((iVar1 = get_value_index_and_map_08006c7c(input), iVar1 == 0 || (iVar1 == 4)) || (iVar1 == 8)) ||\n      ((iVar1 == 0xc || (iVar1 == 0x18)))))) {\n    uVar2 = get_value_index_08007376(input,&DAT_0800a6cc);\n    if ((uVar2 & 0x100000) == 0) {\n      update_flags_080063c0(valueIndices,iVar1);\n    }\n    else {\n      update_and_check_bits_08006460(valueIndices,iVar1);\n    }\n    update_registers_and_flags_08005e2e(valueIndices);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080071e4": "process_values_080071e4",
                "param_1": "input",
                "local_50": "valueIndices"
            },
            "calling": [
                "FUN_08008990"
            ],
            "called": [
                "FUN_08007320",
                "FUN_08005e2e",
                "FUN_080063c0",
                "FUN_08007376",
                "FUN_08006c7c",
                "FUN_08006460"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800723c": {
            "entrypoint": "0x0800723c",
            "current_name": "initialize_data_0800723c",
            "code": "\nvoid initialize_data_0800723c(void)\n\n{\n  get_dat_value_08003760();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800723c": "initialize_data_0800723c"
            },
            "calling": [
                "FUN_08008abc"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007244": {
            "entrypoint": "0x08007244",
            "current_name": "FUNC_08007244",
            "code": "\nvoid FUNC_08007244(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007244": "FUNC_08007244"
            },
            "calling": [
                "FUN_08007246"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007246": {
            "entrypoint": "0x08007246",
            "current_name": "perform_operations_and_update_values_08007246",
            "code": "\nvoid perform_operations_and_update_values_08007246(void)\n\n{\n  add_values_and_update();\n  initialize_variables();\n  FUNC_08007244();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007246": "perform_operations_and_update_values_08007246",
                "add_values_and_update_08003748": "add_values_and_update",
                "initialize_08004046": "initialize_variables"
            },
            "calling": [],
            "called": [
                "FUN_08004046",
                "FUN_08007244",
                "FUN_08003748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007258": {
            "entrypoint": "0x08007258",
            "current_name": "configure_memory_access_08007258",
            "code": "\n\n\nvoid configureMemoryAccess_08007258(uint inputValue,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 memoryAccessPermissions;\n  uint bitMask;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  \n  memoryAccessPermissions = set_memory_access_permissions_08006bb8((inputValue << 0x18) >> 0x1c);\n  bitMask = 1 << (inputValue & 0xf) & 0xffff;\n  localVar3 = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  if ((inputValue - 0xd & 0xff) < 2) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  if (((inputValue == 0xf) || (inputValue == 0x13)) || (inputValue == 0x14)) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n  }\n  localVar1 = param2;\n  localVar2 = param3;\n  update_bits_080040e8(memoryAccessPermissions,&bitMask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007258": "configure_memory_access_08007258",
                "param_1": "inputValue",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "memoryAccessPermissions",
                "local_20": "bitMask",
                "local_1c": "localVar1",
                "local_18": "localVar2",
                "local_14": "localVar3"
            },
            "calling": [
                "FUN_08008990"
            ],
            "called": [
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072d8": {
            "entrypoint": "0x080072d8",
            "current_name": "update_value_based_on_param_080072d8",
            "code": "\nvoid update_value_based_on_param_080072d8(undefined4 data_ptr,undefined2 value_ptr,int condition,undefined4 param_ptr)\n\n{\n  if (condition == 0) {\n    update_value_080042e2(data_ptr,value_ptr,0,param_ptr,param_ptr);\n    return;\n  }\n  update_value_080042e2(data_ptr,value_ptr,1,param_ptr,param_ptr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d8": "update_value_based_on_param_080072d8",
                "param_1": "data_ptr",
                "param_2": "value_ptr",
                "param_3": "condition",
                "param_4": "param_ptr"
            },
            "calling": [
                "FUN_08008a24"
            ],
            "called": [
                "FUN_080042e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072f0": {
            "entrypoint": "0x080072f0",
            "current_name": "check_parameters_080072f0",
            "code": "\nvoid check_parameters_080072f0(undefined4 param_1,undefined2 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  check_parameter_080042d4(param_1,param_2,param_3,param_4,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072f0": "check_parameters_080072f0"
            },
            "calling": [
                "FUN_08008a6c"
            ],
            "called": [
                "FUN_080042d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072fa": {
            "entrypoint": "0x080072fa",
            "current_name": "initialize_devices_080072fa",
            "code": "\nvoid initialize_devices_080072fa(void)\n\n{\n  initialize_device_a();\n  initialize_device_b();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072fa": "initialize_devices_080072fa",
                "initialize_device_08003724": "initialize_device_a",
                "initialize_device_080035b8": "initialize_device_b"
            },
            "calling": [
                "FUN_080036a2"
            ],
            "called": [
                "FUN_08003724",
                "FUN_080035b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007306": {
            "entrypoint": "0x08007306",
            "current_name": "find_value_index_08007306",
            "code": "\nundefined4 find_value_index_08007306(int value,char *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (*array == value) break;\n    array = array + 0xc;\n  }\n  return *(undefined4 *)(array + 4);\n}\n\n",
            "renaming": {
                "FUN_08007306": "find_value_index_08007306",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "FUN_08007320",
                "FUN_08007306"
            ],
            "called": [
                "FUN_08007306"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007320": {
            "entrypoint": "0x08007320",
            "current_name": "find_value_index_08007320",
            "code": "\nundefined4 find_value_index_08007320(int input_value)\n\n{\n  undefined4 value_index;\n  \n  if (input_value != -1) {\n    value_index = find_value_index_08007320_08007306();\n    return value_index;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007320": "find_value_index_08007320",
                "param_1": "input_value",
                "uVar1": "value_index"
            },
            "calling": [
                "FUN_080071e4",
                "FUN_080084b0",
                "FUN_080077b0",
                "FUN_08007118",
                "FUN_08008500",
                "FUN_08006d80",
                "FUN_08008078"
            ],
            "called": [
                "FUN_08007306"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007332": {
            "entrypoint": "0x08007332",
            "current_name": "find_value_index_08007332",
            "code": "\nint find_value_index_08007332(int value,char *array_ptr)\n\n{\n  while( true ) {\n    if (*(int *)(array_ptr + 4) == 0) {\n      return -1;\n    }\n    if (*(int *)(array_ptr + 4) == value) break;\n    array_ptr = array_ptr + 0xc;\n  }\n  return (int)*array_ptr;\n}\n\n",
            "renaming": {
                "FUN_08007332": "find_value_index_08007332",
                "param_1": "value",
                "param_2": "array_ptr"
            },
            "calling": [
                "FUN_0800734a",
                "FUN_08007332"
            ],
            "called": [
                "FUN_08007332"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800734a": {
            "entrypoint": "0x0800734a",
            "current_name": "check_value_and_find_index_0800734a",
            "code": "\nundefined4 check_value_and_find_index_0800734a(int value)\n\n{\n  undefined4 index;\n  \n  if (value != 0) {\n    index = find_value_index_08007332();\n    return index;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800734a": "check_value_and_find_index_0800734a",
                "param_1": "value",
                "uVar1": "index"
            },
            "calling": [
                "FUN_080084b0",
                "FUN_08008d30"
            ],
            "called": [
                "FUN_08007332"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800735a": {
            "entrypoint": "0x0800735a",
            "current_name": "find_value_index_0800735a",
            "code": "\nundefined4 find_value_index_0800735a(int value,char *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0xffffffff;\n    }\n    if (*array == value) break;\n    array = array + 0xc;\n  }\n  return *(undefined4 *)(array + 8);\n}\n\n",
            "renaming": {
                "FUN_0800735a": "find_value_index_0800735a",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "FUN_0800735a",
                "FUN_08007376"
            ],
            "called": [
                "FUN_0800735a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007376": {
            "entrypoint": "0x08007376",
            "current_name": "get_value_index_08007376",
            "code": "\nundefined4 get_value_index_08007376(int value)\n\n{\n  undefined4 index;\n  \n  if (value == -1) {\n    return 0xffffffff;\n  }\n  index = find_value_index_0800735a();\n  return index;\n}\n\n",
            "renaming": {
                "FUN_08007376": "get_value_index_08007376",
                "param_1": "value",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08006e68",
                "FUN_080071e4",
                "FUN_080077b0",
                "FUN_08007118",
                "FUN_08008078",
                "FUN_08006c7c",
                "FUN_08006c60"
            ],
            "called": [
                "FUN_0800735a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800738a": {
            "entrypoint": "0x0800738a",
            "current_name": "compare_and_find_0800738a",
            "code": "\nundefined4 compareAndFind_0800738a(int input_value,char *array_ptr)\n\n{\n  if (input_value == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*array_ptr == -1) {\n      return 0;\n    }\n    if (input_value == *array_ptr) break;\n    array_ptr = array_ptr + 0xc;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800738a": "compare_and_find_0800738a",
                "param_1": "input_value",
                "param_2": "array_ptr"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_08000a64",
                "FUN_080088e0",
                "FUN_0800021a",
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073ae": {
            "entrypoint": "0x080073ae",
            "current_name": "compare_and_return_smaller_080073ae",
            "code": "\nint compare_and_return_smaller_080073ae(int value1,int value2)\n\n{\n  if (value1 != value2) {\n    if (value1 == 0) {\n      return value2;\n    }\n    if (value2 == 0) {\n      return value1;\n    }\n    value1 = 0;\n  }\n  return value1;\n}\n\n",
            "renaming": {
                "FUN_080073ae": "compare_and_return_smaller_080073ae",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_080077b0",
                "FUN_08008078"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073c0": {
            "entrypoint": "0x080073c0",
            "current_name": "execute_callback_080073c0",
            "code": "\nvoid executeCallback_080073c0(void)\n\n{\n  if (DAT_200005f4 != (code *)0x0) {\n    (*DAT_200005f4)(DAT_2000060c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073c0": "execute_callback_080073c0"
            },
            "calling": [
                "FUN_08005cb4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073e8": {
            "entrypoint": "0x080073e8",
            "current_name": "infinite_loop_080073e8",
            "code": "\nvoid infiniteLoop_080073e8(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080073e8": "infinite_loop_080073e8"
            },
            "calling": [
                "FUN_080073e8",
                "FUN_080035b8"
            ],
            "called": [
                "FUN_080073e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073ec": {
            "entrypoint": "0x080073ec",
            "current_name": "initialize_hardware_080073ec",
            "code": "\n\n\nvoid initializeHardware_080073ec(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073ec": "initialize_hardware_080073ec"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007438": {
            "entrypoint": "0x08007438",
            "current_name": "update_flags_and_pointers_08007438",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid updateFlagsAndPointers_08007438(int *input)\n\n{\n  if (*input == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n    DAT_20000610 = input;\n  }\n  if (*input == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n    DAT_20000614 = input;\n  }\n  if (*input == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n    DAT_20000618 = input;\n  }\n  if (*input == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n    DAT_2000061c = input;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007438": "update_flags_and_pointers_08007438",
                "param_1": "input"
            },
            "calling": [
                "FUN_08006e68",
                "FUN_08007708"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080074e0": {
            "entrypoint": "0x080074e0",
            "current_name": "update_register_values_080074e0",
            "code": "\n\n\nvoid updateRegisterValues_080074e0(int *inputValue)\n\n{\n  if (*inputValue == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 & 0xfffff7ff;\n  }\n  if (*inputValue == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffe;\n  }\n  if (*inputValue == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffd;\n  }\n  if (*inputValue == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080074e0": "update_register_values_080074e0",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08007110",
                "FUN_08007710"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007544": {
            "entrypoint": "0x08007544",
            "current_name": "get_timer_ir_qn_08007544",
            "code": "\nundefined4 getTimerIRQn_08007544(uint timer)\n\n{\n  if (timer == 0xffffffff) {\n    return 0;\n  }\n  if (timer == 0x40000400) {\n    return 0x1d;\n  }\n  if (timer < 0x40000401) {\n    if (timer == 0x40000000) {\n      return 0x1c;\n    }\n  }\n  else {\n    if (timer == 0x40000800) {\n      return 0x1e;\n    }\n    if (timer == 0x40012c00) {\n      return 0x19;\n    }\n  }\n  initializeAndFormatInput(\"TIM: Unknown timer IRQn\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007544": "get_timer_ir_qn_08007544",
                "param_1": "timer",
                "initialize_and_format_input_080098d8": "initializeAndFormatInput"
            },
            "calling": [
                "FUN_08007648",
                "FUN_080076e0"
            ],
            "called": [
                "FUN_080098d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007594": {
            "entrypoint": "0x08007594",
            "current_name": "check_timer_instance_08007594",
            "code": "\nundefined4 checkTimerInstance_08007594(uint instance)\n\n{\n  if (instance == 0xffffffff) {\n    return 0;\n  }\n  if (instance == 0x40000400) {\n    return 1;\n  }\n  if (instance < 0x40000401) {\n    if (instance == 0x40000000) {\n      return 1;\n    }\n  }\n  else {\n    if (instance == 0x40000800) {\n      return 1;\n    }\n    if (instance == 0x40012c00) {\n      return 2;\n    }\n  }\n  logErrorMessage(\"TIM: Unknown timer instance\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007594": "check_timer_instance_08007594",
                "param_1": "instance",
                "initialize_and_format_input_080098d8": "logErrorMessage"
            },
            "calling": [
                "FUN_080075dc"
            ],
            "called": [
                "FUN_080098d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080075dc": {
            "entrypoint": "0x080075dc",
            "current_name": "calculate_shifted_value_080075dc",
            "code": "\nint calculateShiftedValue_080075dc(undefined4 inputValue)\n\n{\n  uint previousValue;\n  int shiftedValue;\n  uint clockSource;\n  undefined4 data1;\n  undefined4 data2;\n  undefined4 data3;\n  undefined4 data4;\n  uint data5;\n  uint data6;\n  \n  data2 = 0;\n  data3 = 0;\n  data4 = 0;\n  data5 = 0;\n  data6 = 0;\n  data1 = 0;\n  initialize_data_08005a68(&data2,&data1);\n  shiftedValue = check_timer_instance_08007594(inputValue);\n  previousValue = data6;\n  clockSource = data5;\n  if (shiftedValue == 1) {\n    shiftedValue = get_shifted_data_value_08005a28();\n  }\n  else if (shiftedValue == 2) {\n    shiftedValue = get_shifted_data_value_08005a48();\n    clockSource = previousValue;\n  }\n  else {\n    initialize_and_format_input_080098d8(\"TIM: Unknown clock source\");\n    shiftedValue = 0;\n    clockSource = 0;\n  }\n  if (clockSource != 0x500) {\n    if (clockSource < 0x501) {\n      if (clockSource != 0x400) {\n        return shiftedValue;\n      }\n    }\n    else if ((clockSource != 0x600) && (clockSource != 0x700)) {\n      return shiftedValue;\n    }\n  }\n  return shiftedValue << 1;\n}\n\n",
            "renaming": {
                "FUN_080075dc": "calculate_shifted_value_080075dc",
                "param_1": "inputValue",
                "uVar1": "previousValue",
                "iVar2": "shiftedValue",
                "uVar3": "clockSource",
                "local_20": "data1",
                "local_1c": "data2",
                "local_18": "data3",
                "local_14": "data4",
                "local_10": "data5",
                "local_c": "data6"
            },
            "calling": [
                "FUN_08007648",
                "FUN_08007118"
            ],
            "called": [
                "FUN_08007594",
                "FUN_08005a68",
                "FUN_08005a28",
                "FUN_08005a48",
                "FUN_080098d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007648": {
            "entrypoint": "0x08007648",
            "current_name": "initialize_settings_08007648",
            "code": "\nvoid initializeSettings_08007648(undefined4 *settings,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  char timerValue;\n  uint shiftedValue;\n  int status;\n  undefined4 *settingsPtr;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  undefined4 localVar4;\n  undefined4 localVar5;\n  undefined4 localVar6;\n  undefined4 localVar7;\n  \n  localVar1 = 0;\n  localVar2 = 0;\n  localVar3 = 0;\n  localVar4 = 0;\n  localVar5 = 0;\n  localVar6 = 0;\n  localVar7 = 0;\n  settingsPtr = settings + 1;\n  *settings = 0x40000000;\n  settings[1] = 0x40000000;\n  settings[4] = value1;\n  shiftedValue = calculate_shifted_value_080075dc();\n  settings[2] = shiftedValue / 1000000 - 1;\n  settings[5] = 0;\n  settings[3] = 0;\n  settings[6] = 0;\n  settings[0x13] = value3;\n  localVar1 = 0;\n  localVar3 = 0;\n  localVar5 = 0;\n  localVar4 = 0;\n  localVar6 = 0;\n  localVar7 = 0;\n  localVar2 = value2;\n  timerValue = get_timer_ir_qn_08007544(*settings);\n  update_data_08003f30((int)timerValue,0xe,0);\n  timerValue = get_timer_ir_qn_08007544(*settings);\n  set_bit_in_array_08003f94((int)timerValue);\n  status = sanitize_and_update_data_08006060(settingsPtr);\n  if ((status == 0) && (status = update_and_return_status_08006128(settingsPtr,&localVar1,0), status == 0)) {\n    update_flags_08006280(settingsPtr,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007648": "initialize_settings_08007648",
                "param_1": "settings",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "cVar1": "timerValue",
                "uVar2": "shiftedValue",
                "iVar3": "status",
                "puVar4": "settingsPtr",
                "local_34": "localVar1",
                "local_30": "localVar2",
                "local_2c": "localVar3",
                "local_28": "localVar4",
                "local_24": "localVar5",
                "local_20": "localVar6",
                "local_1c": "localVar7"
            },
            "calling": [
                "FUN_0800242c"
            ],
            "called": [
                "FUN_08006280",
                "FUN_08006128",
                "FUN_08006060",
                "FUN_080075dc",
                "FUN_08003f94",
                "FUN_08007544",
                "FUN_08003f30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080076e0": {
            "entrypoint": "0x080076e0",
            "current_name": "initialize_timer_080076e0",
            "code": "\nvoid initializeTimer_080076e0(undefined4 *parameters)\n\n{\n  char timerValue;\n  int result;\n  \n  parameters[0x13] = 0;\n  timerValue = getTimerValue(*parameters);\n  setTimerBit((int)timerValue);\n  result = updateRegisterValues(parameters + 1);\n  if (result == 0) {\n    updateAndCheckFlags(parameters + 1,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080076e0": "initialize_timer_080076e0",
                "param_1": "parameters",
                "cVar1": "timerValue",
                "iVar2": "result",
                "get_timer_ir_qn_08007544": "getTimerValue",
                "set_bit_08003fb0": "setTimerBit",
                "update_register_values_08005df4": "updateRegisterValues",
                "update_and_check_flags_080062f4": "updateAndCheckFlags"
            },
            "calling": [
                "FUN_08002578"
            ],
            "called": [
                "FUN_08005df4",
                "FUN_08003fb0",
                "FUN_08007544",
                "FUN_080062f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007708": {
            "entrypoint": "0x08007708",
            "current_name": "update_flags_and_pointers_08007708",
            "code": "\nvoid update_flags_and_pointers_08007708(void)\n\n{\n  update_flags_and_pointers_08007708();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007708": "update_flags_and_pointers_08007708",
                "update_flags_and_pointers_08007438": "update_flags_and_pointers"
            },
            "calling": [
                "FUN_08006060"
            ],
            "called": [
                "FUN_08007438"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007710": {
            "entrypoint": "0x08007710",
            "current_name": "update_register_values_08007710",
            "code": "\nvoid update_register_values_08007710(void)\n\n{\n  update_register_values_08007710_helper();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007710": "update_register_values_08007710",
                "update_register_values_080074e0": "update_register_values_helper"
            },
            "calling": [
                "FUN_08005df4"
            ],
            "called": [
                "FUN_080074e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007718": {
            "entrypoint": "0x08007718",
            "current_name": "decrement_by_four_08007718",
            "code": "\nint decrementByFour_08007718(int input)\n\n{\n  return input + -4;\n}\n\n",
            "renaming": {
                "FUN_08007718": "decrement_by_four_08007718",
                "param_1": "input"
            },
            "calling": [
                "FUN_08007736",
                "FUN_0800771c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800771c": {
            "entrypoint": "0x0800771c",
            "current_name": "execute_callback_if_enabled_0800771c",
            "code": "\nvoid executeCallbackIfEnabled_0800771c(int callbackParam)\n\n{\n  int decrementedValue;\n  \n  decrementedValue = decrement_by_four_08007718();\n  if ((*(code **)(decrementedValue + 0x4c) != (code *)0x0) && (*(char *)(callbackParam + 0x1c) == '\\x01')) {\n    (**(code **)(decrementedValue + 0x4c))(decrementedValue,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800771c": "execute_callback_if_enabled_0800771c",
                "param_1": "callbackParam",
                "iVar1": "decrementedValue"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [
                "FUN_08007718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007736": {
            "entrypoint": "0x08007736",
            "current_name": "execute_callback_08007736",
            "code": "\nvoid executeCallback_08007736(void)\n\n{\n  int decrementedValue;\n  \n  decrementedValue = decrement_by_four_08007718();\n  if (*(code **)(decrementedValue + 0x48) != (code *)0x0) {\n    (**(code **)(decrementedValue + 0x48))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007736": "execute_callback_08007736",
                "iVar1": "decrementedValue"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [
                "FUN_08007718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007744": {
            "entrypoint": "0x08007744",
            "current_name": "get_pointer_offset_08007744",
            "code": "\nundefined4 getPointerOffset_08007744(int pointer)\n\n{\n  return *(undefined4 *)(*(int *)(pointer + 4) + 0x24);\n}\n\n",
            "renaming": {
                "FUN_08007744": "get_pointer_offset_08007744",
                "param_1": "pointer"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800774a": {
            "entrypoint": "0x0800774a",
            "current_name": "set_param_value_0800774a",
            "code": "\nvoid setParamValue_0800774a(int inputStruct,undefined4 paramValue)\n\n{\n  *(undefined4 *)(*(int *)(inputStruct + 4) + 0x24) = paramValue;\n  void;\n}\n\n",
            "renaming": {
                "FUN_0800774a": "set_param_value_0800774a",
                "param_1": "inputStruct",
                "param_2": "paramValue",
                "return": "void"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007750": {
            "entrypoint": "0x08007750",
            "current_name": "write_to_memory_08007750",
            "code": "\nvoid writeToMemory_08007750(int memoryAddress,int offset,undefined4 value)\n\n{\n  *(undefined4 *)(*(int *)(memoryAddress + 4) + 0x34 + offset * 4) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007750": "write_to_memory_08007750",
                "param_1": "memoryAddress",
                "param_2": "offset",
                "param_3": "value"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080077b0": {
            "entrypoint": "0x080077b0",
            "current_name": "initialize_peripherals_080077b0",
            "code": "\n\n\nvoid initialize_peripherals_080077b0(int *peripheral_info,int pin_1,int pin_2,int parameter_4,undefined parameter_5)\n\n{\n  int index_1;\n  int index_2;\n  undefined4 access_permission;\n  uint value_index_1;\n  uint value_index_2;\n  int *pointer;\n  uint bit_mask_1;\n  uint bit_mask_2;\n  uint value_1;\n  undefined4 value_2;\n  \n  if (peripheral_info != (int *)0x0) {\n    pointer = peripheral_info + 1;\n    index_1 = find_value_index_08007320((int)*(char *)(peripheral_info + 0x16),&DAT_0800a69c);\n    index_2 = find_value_index_08007320((int)*(char *)((int)peripheral_info + 0x59),&DAT_0800a66c);\n    if ((index_1 == 0) || (index_2 == 0)) {\n      initialize_and_format_input_080098d8(\"ERROR: at least one I2C pin has no peripheral\\n\");\n    }\n    else {\n      index_1 = compare_and_return_smaller_080073ae(index_1,index_2);\n      *peripheral_info = index_1;\n      if (index_1 == 0) {\n        initialize_and_format_input_080098d8(\"ERROR: I2C pins mismatch\\n\");\n      }\n      else {\n        if (index_1 == 0x40005400) {\n          _DAT_4002101c = _DAT_4002101c | 0x200000;\n          _DAT_40021010 = _DAT_40021010 & 0xffdfffff;\n          *(undefined *)((int)peripheral_info + 0x5a) = 0x1f;\n          *(undefined *)((int)peripheral_info + 0x5b) = 0x20;\n          DAT_20000668 = pointer;\n        }\n        if (*peripheral_info == 0x40005800) {\n          _DAT_4002101c = _DAT_4002101c | 0x400000;\n          _DAT_40021010 = _DAT_40021010 & 0xffbfffff;\n          *(undefined *)((int)peripheral_info + 0x5a) = 0x21;\n          *(undefined *)((int)peripheral_info + 0x5b) = 0x22;\n          DAT_2000066c = pointer;\n        }\n        access_permission = set_memory_access_permissions_08006bb8((uint)((int)*(char *)((int)peripheral_info + 0x59) << 0x18) >> 0x1c);\n        bit_mask_1 = 1 << ((int)*(char *)((int)peripheral_info + 0x59) & 0xfU) & 0xffff;\n        value_index_1 = get_value_index_08007376((int)*(char *)((int)peripheral_info + 0x59),&DAT_0800a66c);\n        value_index_2 = get_value_index_08007376((int)*(char *)((int)peripheral_info + 0x59),&DAT_0800a66c);\n        bit_mask_2 = (value_index_1 >> 3 & 1) << 4 | value_index_2 & 7;\n        value_2 = 3;\n        index_1 = get_value_index_08007376((int)*(char *)((int)peripheral_info + 0x59),&DAT_0800a66c);\n        value_1 = (uint)(index_1 << 0x1a) >> 0x1e;\n        index_1 = get_value_index_08007376((int)*(char *)((int)peripheral_info + 0x59),&DAT_0800a66c);\n        _DAT_40021018 = _DAT_40021018 | 1;\n        value_index_2 = 1;\n        value_index_1 = _DAT_40021018;\n        switch((uint)(index_1 << 0x11) >> 0x19) {\n        case 1:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 | 0x7000001;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 2:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 3:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 | 0x7000002;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 4:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 5:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 | 0x7000004;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 6:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 7:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 | 0x7000008;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 8:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 9:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 | 0x7000030;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 10:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0xb:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0xc:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 | 0x70000c0;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0xd:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0xe:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0xf:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 | 0x7000300;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0x10:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0x11:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0x12:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0x13:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 | 0x7000c00;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0x14:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0x15:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0x16:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 | 0x7001000;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0x17:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0x1b:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 | 0x7008000;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0x1c:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0x21:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xf8ffffff;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0x22:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0x23:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0x24:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n          _DAT_40010004 = value_index_2;\n        }\n        update_bits_080040e8(access_permission,&bit_mask_1,value_index_1,value_index_2);\n        access_permission = set_memory_access_permissions_08006bb8((uint)((int)*(char *)(peripheral_info + 0x16) << 0x18) >> 0x1c);\n        bit_mask_1 = 1 << ((int)*(char *)(peripheral_info + 0x16) & 0xfU) & 0xffff;\n        value_index_1 = get_value_index_08007376((int)*(char *)(peripheral_info + 0x16),&DAT_0800a69c);\n        value_index_2 = get_value_index_08007376((int)*(char *)(peripheral_info + 0x16),&DAT_0800a69c);\n        bit_mask_2 = (value_index_1 >> 3 & 1) << 4 | value_index_2 & 7;\n        value_2 = 3;\n        index_1 = get_value_index_08007376((int)*(char *)(peripheral_info + 0x16),&DAT_0800a69c);\n        value_1 = (uint)(index_1 << 0x1a) >> 0x1e;\n        index_1 = get_value_index_08007376((int)*(char *)(peripheral_info + 0x16),&DAT_0800a69c);\n        _DAT_40021018 = _DAT_40021018 | 1;\n        value_index_2 = 1;\n        value_index_1 = _DAT_40021018;\n        switch((uint)(index_1 << 0x11) >> 0x19) {\n        case 1:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 | 0x7000001;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 2:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 3:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 | 0x7000002;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 4:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 5:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 | 0x7000004;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 6:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 7:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 | 0x7000008;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 8:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 9:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 | 0x7000030;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 10:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0xb:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0xc:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 | 0x70000c0;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0xd:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0xe:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0xf:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 | 0x7000300;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0x10:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0x11:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0x12:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0x13:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 | 0x7000c00;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0x14:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0x15:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0x16:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 | 0x7001000;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0x17:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0x1b:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 | 0x7008000;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0x1c:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0x21:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xf8ffffff;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0x22:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0x23:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          _DAT_40010004 = value_index_2;\n          break;\n        case 0x24:\n          value_index_1 = 0x40010000;\n          value_index_2 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n          _DAT_40010004 = value_index_2;\n        }\n        update_bits_080040e8(access_permission,&bit_mask_1,value_index_1,value_index_2);\n        peripheral_info[1] = *peripheral_info;\n        peripheral_info[2] = pin_1;\n        peripheral_info[3] = 0;\n        peripheral_info[4] = parameter_4;\n        peripheral_info[7] = 0xff;\n        peripheral_info[5] = pin_2;\n        peripheral_info[6] = 0;\n        peripheral_info[8] = 0;\n        peripheral_info[9] = 0;\n        *(undefined *)((int)peripheral_info + 0x41) = 0;\n        update_data_08003f30((int)*(char *)((int)peripheral_info + 0x5a),0,1);\n        set_bit_in_array_08003f94((int)*(char *)((int)peripheral_info + 0x5a));\n        update_data_08003f30((int)*(char *)((int)peripheral_info + 0x5b),0,1);\n        set_bit_in_array_08003f94((int)*(char *)((int)peripheral_info + 0x5b));\n        calculate_values_080045c0(pointer);\n        *(undefined *)((int)peripheral_info + 0x5d) = parameter_5;\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080077b0": "initialize_peripherals_080077b0",
                "param_1": "peripheral_info",
                "param_2": "pin_1",
                "param_3": "pin_2",
                "param_4": "parameter_4",
                "param_5": "parameter_5",
                "iVar1": "index_1",
                "iVar2": "index_2",
                "uVar3": "access_permission",
                "uVar4": "value_index_1",
                "uVar5": "value_index_2",
                "piVar6": "pointer",
                "local_38": "bit_mask_1",
                "local_34": "bit_mask_2",
                "local_30": "value_1",
                "local_2c": "value_2"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "FUN_08007320",
                "FUN_080040e8",
                "FUN_08003f94",
                "FUN_080073ae",
                "FUN_08003f30",
                "FUN_080098d8",
                "FUN_08007376",
                "FUN_080045c0",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e74": {
            "entrypoint": "0x08007e74",
            "current_name": "check_and_update_values_08007e74",
            "code": "\nint checkAndUpdateValues_08007e74(int inputValue,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int originalDatValue;\n  int result;\n  uint difference;\n  int loopControl;\n  int offset;\n  undefined4 copyParam4;\n  \n  copyParam4 = param4;\n  originalDatValue = get_dat_value_08003760();\n  difference = 0;\n  loopControl = 2;\n  do {\n    offset = inputValue + 4;\n    result = check_and_update_08004728(offset,param2,param3,param4,copyParam4);\n    if (result == 0) {\n      loopControl = 0;\n      while ((result = get_byte_from_offset_0800542a(offset), result != 0x20 && (loopControl == 0))) {\n        result = get_dat_value_08003760();\n        difference = result - originalDatValue;\n        if (difference < 0x65) {\n          result = get_memory_value_08005430(offset);\n          if (result != 0) {\n            loopControl = 2;\n          }\n        }\n        else {\n          loopControl = 1;\n        }\n      }\n    }\n    result = get_memory_value_08005430(offset);\n  } while ((result == 4) && (difference < 100));\n  return loopControl;\n}\n\n",
            "renaming": {
                "FUN_08007e74": "check_and_update_values_08007e74",
                "param_1": "inputValue",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "originalDatValue",
                "iVar2": "result",
                "uVar3": "difference",
                "iVar4": "loopControl",
                "iVar5": "offset",
                "uVar6": "copyParam4"
            },
            "calling": [
                "FUN_08002a58"
            ],
            "called": [
                "FUN_0800542a",
                "FUN_08005430",
                "FUN_08003760",
                "FUN_08004728"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ede": {
            "entrypoint": "0x08007ede",
            "current_name": "copy_data_08007ede",
            "code": "\nundefined4 copyData_08007ede(int dstAddress,int srcAddress,uint size)\n\n{\n  uint index;\n  \n  if (0x20 < size) {\n    return 2;\n  }\n  for (index = 0; index < size; index = index + 1 & 0xff) {\n    *(undefined *)(dstAddress + index + 0x68) = *(undefined *)(srcAddress + index);\n    *(char *)(dstAddress + 0x88) = *(char *)(dstAddress + 0x88) + '\\x01';\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007ede": "copy_data_08007ede",
                "param_1": "dstAddress",
                "param_2": "srcAddress",
                "param_3": "size",
                "uVar1": "index"
            },
            "calling": [
                "FUN_080027f0",
                "FUN_0800288c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f0e": {
            "entrypoint": "0x08007f0e",
            "current_name": "check_and_modify_params_08007f0e",
            "code": "\nint checkAndModifyParams_08007f0e(int inputParam,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int datValue;\n  int returnValue;\n  uint difference;\n  int flag;\n  int offset;\n  undefined4 tempParam4;\n  \n  tempParam4 = param4;\n  datValue = get_dat_value_08003760();\n  difference = 0;\n  flag = 2;\n  do {\n    offset = inputParam + 4;\n    returnValue = check_and_modify_params_080047f4(offset,param2,param3,param4,tempParam4);\n    if (returnValue == 0) {\n      flag = 0;\n      while ((returnValue = get_byte_from_offset_0800542a(offset), returnValue != 0x20 && (flag == 0))) {\n        returnValue = get_dat_value_08003760();\n        difference = returnValue - datValue;\n        if (difference < 0x65) {\n          returnValue = get_memory_value_08005430(offset);\n          if (returnValue != 0) {\n            flag = 2;\n          }\n        }\n        else {\n          flag = 1;\n        }\n      }\n    }\n    returnValue = get_memory_value_08005430(offset);\n  } while ((returnValue == 4) && (difference < 100));\n  return flag;\n}\n\n",
            "renaming": {
                "FUN_08007f0e": "check_and_modify_params_08007f0e",
                "param_1": "inputParam",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "datValue",
                "iVar2": "returnValue",
                "uVar3": "difference",
                "iVar4": "flag",
                "iVar5": "offset",
                "uVar6": "tempParam4"
            },
            "calling": [
                "FUN_08002b68"
            ],
            "called": [
                "FUN_0800542a",
                "FUN_08005430",
                "FUN_08003760",
                "FUN_080047f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f78": {
            "entrypoint": "0x08007f78",
            "current_name": "decrement_param_08007f78",
            "code": "\nint decrement_param_08007f78(int input)\n\n{\n  return input + -4;\n}\n\n",
            "renaming": {
                "FUN_08007f78": "decrement_param_08007f78",
                "param_1": "input"
            },
            "calling": [
                "FUN_08008020",
                "FUN_08007ff0",
                "FUN_08007fa0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f7c": {
            "entrypoint": "0x08007f7c",
            "current_name": "update_param_value_08007f7c",
            "code": "\nvoid update_param_value_08007f7c(int object_ptr,int new_value)\n\n{\n  if (object_ptr != 0) {\n    if (new_value != 0) {\n      *(int *)(object_ptr + 0x60) = new_value;\n      set_flags_and_values_080049e0(object_ptr + 4);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f7c": "update_param_value_08007f7c",
                "param_1": "object_ptr",
                "param_2": "new_value"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f8e": {
            "entrypoint": "0x08007f8e",
            "current_name": "update_param_with_flag_and_value_08007f8e",
            "code": "\nvoid updateParamWithFlagAndValue_08007f8e(int inputParam,int newValue)\n\n{\n  if (inputParam != 0) {\n    if (newValue != 0) {\n      *(int *)(inputParam + 100) = newValue;\n      setFlagsAndValuesFunction(inputParam + 4);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f8e": "update_param_with_flag_and_value_08007f8e",
                "param_1": "inputParam",
                "param_2": "newValue",
                "set_flags_and_values_080049e0": "setFlagsAndValuesFunction"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007fa0": {
            "entrypoint": "0x08007fa0",
            "current_name": "process_parameters_08007fa0",
            "code": "\nvoid processParameters_08007fa0(int inputData,int flag,int value,undefined4 param4)\n\n{\n  int tempVar;\n  \n  tempVar = decrementCounter();\n  if (value == *(int *)(inputData + 0xc)) {\n    if (flag == 0) {\n      *(undefined *)(tempVar + 0x88) = 0;\n      *(undefined *)(tempVar + 0x5c) = 0;\n      if (*(code **)(tempVar + 100) != (code *)0x0) {\n        (**(code **)(tempVar + 100))();\n      }\n      validateParams(inputData,tempVar + 0x68,*(undefined *)(tempVar + 0x88),8);\n      return;\n    }\n    *(undefined *)(tempVar + 0x5c) = 1;\n    validateAndConfigure(inputData,tempVar + 0x68,0x20,8,param4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007fa0": "process_parameters_08007fa0",
                "param_1": "inputData",
                "param_2": "flag",
                "param_3": "value",
                "param_4": "param4",
                "iVar1": "tempVar",
                "decrement_param_08007f78": "decrementCounter",
                "validate_parameters_080048c8": "validateParams",
                "validate_and_configure_08004954": "validateAndConfigure"
            },
            "calling": [
                "FUN_08004ac2"
            ],
            "called": [
                "FUN_08007f78",
                "FUN_08004954",
                "FUN_080048c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ff0": {
            "entrypoint": "0x08007ff0",
            "current_name": "execute_conditionally_08007ff0",
            "code": "\nvoid executeConditionally_08007ff0(undefined4 inputParam)\n\n{\n  int returnVal;\n  \n  returnVal = decrementValue();\n  if (((*(functionPointer **)(returnVal + 0x60) != (functionPointer *)0x0) && (*(char *)(returnVal + 0x5c) == '\\x01')) &&\n     (*(char *)(returnVal + 0x2c) != ' ')) {\n    (**(functionPointer **)(returnVal + 0x60))(returnVal + 0x68);\n  }\n  setFlagsAndValues(inputParam);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ff0": "execute_conditionally_08007ff0",
                "param_1": "inputParam",
                "iVar1": "returnVal",
                "decrement_param_08007f78": "decrementValue",
                "code": "functionPointer",
                "set_flags_and_values_080049e0": "setFlagsAndValues"
            },
            "calling": [
                "FUN_08004f3c",
                "FUN_08004aec",
                "FUN_08005084"
            ],
            "called": [
                "FUN_08007f78",
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008020": {
            "entrypoint": "0x08008020",
            "current_name": "check_and_set_values_08008020",
            "code": "\nvoid checkAndSetValues_08008020(undefined4 inputValue)\n\n{\n  int result;\n  \n  result = decrementParameter();\n  if (*(char *)(result + 0x5d) == '\\0') {\n    setFlagsAndValues(inputValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008020": "check_and_set_values_08008020",
                "param_1": "inputValue",
                "iVar1": "result",
                "decrement_param_08007f78": "decrementParameter",
                "set_flags_and_values_080049e0": "setFlagsAndValues"
            },
            "calling": [
                "FUN_08004f3c"
            ],
            "called": [
                "FUN_08007f78",
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008078": {
            "entrypoint": "0x08008078",
            "current_name": "FUNC_08008078",
            "code": "\n\n\nvoid FUNC_08008078(int *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  undefined4 uVar3;\n  uint uVar4;\n  uint local_20;\n  uint local_1c;\n  uint local_18;\n  undefined4 local_14;\n  \n  if (param_1 != (int *)0x0) {\n    iVar1 = find_value_index_08007320((int)*(char *)(param_1 + 0x16),&DAT_0800a864);\n    iVar2 = find_value_index_08007320((int)*(char *)((int)param_1 + 0x59),&DAT_0800a81c);\n    if ((iVar2 == 0) || (iVar1 == 0)) {\n      initialize_and_format_input_080098d8(\"ERROR: at least one UART pin has no peripheral\\n\",iVar2);\n    }\n    else {\n      iVar1 = compare_and_return_smaller_080073ae(iVar1);\n      *param_1 = iVar1;\n      if (iVar1 == 0) {\n        initialize_and_format_input_080098d8(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (iVar1 == 0x40013800) {\n          _DAT_4002100c = _DAT_4002100c & 0xffffbfff;\n          _DAT_40021018 = _DAT_40021018 | 0x4000;\n          *(undefined *)(param_1 + 0x11) = 0;\n          *(undefined *)((int)param_1 + 0x5a) = 0x25;\n        }\n        else if (iVar1 == 0x40004400) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffdffff;\n          _DAT_4002101c = _DAT_4002101c | 0x20000;\n          *(undefined *)(param_1 + 0x11) = 1;\n          *(undefined *)((int)param_1 + 0x5a) = 0x26;\n        }\n        else if (iVar1 == 0x40004800) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffbffff;\n          _DAT_4002101c = _DAT_4002101c | 0x40000;\n          *(undefined *)(param_1 + 0x11) = 2;\n          *(undefined *)((int)param_1 + 0x5a) = 0x27;\n        }\n        uVar3 = set_memory_access_permissions_08006bb8((uint)((int)*(char *)((int)param_1 + 0x59) << 0x18) >> 0x1c);\n        uVar4 = get_value_index_08007376((int)*(char *)((int)param_1 + 0x59),&DAT_0800a81c);\n        local_20 = 1 << (*(byte *)((int)param_1 + 0x59) & 0xf) & 0xffff;\n        local_1c = (uVar4 >> 3 & 1) << 4 | uVar4 & 7;\n        local_18 = (uVar4 << 0x1a) >> 0x1e;\n        _DAT_40021018 = _DAT_40021018 | 1;\n        switch((uVar4 << 0x11) >> 0x19) {\n        case 1:\n          _DAT_40010004 = _DAT_40010004 | 0x7000001;\n          break;\n        case 2:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          _DAT_40010004 = _DAT_40010004 | 0x7000002;\n          break;\n        case 4:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          _DAT_40010004 = _DAT_40010004 | 0x7000004;\n          break;\n        case 6:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          _DAT_40010004 = _DAT_40010004 | 0x7000008;\n          break;\n        case 8:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          _DAT_40010004 = _DAT_40010004 | 0x7000030;\n          break;\n        case 10:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n          break;\n        case 0xd:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          _DAT_40010004 = _DAT_40010004 | 0x7000300;\n          break;\n        case 0x10:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n          break;\n        case 0x14:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          _DAT_40010004 = _DAT_40010004 | 0x7001000;\n          break;\n        case 0x17:\n          _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          _DAT_40010004 = _DAT_40010004 | 0x7008000;\n          break;\n        case 0x1c:\n          _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n          break;\n        case 0x22:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n        }\n        local_14 = 3;\n        update_bits_080040e8(uVar3,&local_20);\n        uVar3 = set_memory_access_permissions_08006bb8((uint)((int)*(char *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        uVar4 = get_value_index_08007376((int)*(char *)(param_1 + 0x16),&DAT_0800a864);\n        local_20 = 1 << (*(byte *)(param_1 + 0x16) & 0xf) & 0xffff;\n        local_1c = (uVar4 >> 3 & 1) << 4 | uVar4 & 7;\n        local_18 = (uVar4 << 0x1a) >> 0x1e;\n        update_bits_080040e8(uVar3,&local_20);\n        (&DAT_200006c0)[*(byte *)(param_1 + 0x11)] = param_1 + 1;\n        param_1[1] = *param_1;\n        param_1[2] = param_1[0x12];\n        param_1[3] = param_1[0x13];\n        param_1[4] = param_1[0x14];\n        param_1[5] = param_1[0x15];\n        param_1[6] = 0xc;\n        param_1[7] = 0;\n        param_1[8] = 0;\n        validate_and_update_param_0800674e(param_1 + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008078": "FUNC_08008078"
            },
            "calling": [
                "FUN_080084b0",
                "FUN_08008c44"
            ],
            "called": [
                "FUN_08007320",
                "FUN_080040e8",
                "FUN_080073ae",
                "FUN_0800674e",
                "FUN_080098d8",
                "FUN_08007376",
                "FUN_08006bb8"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080084b0": {
            "entrypoint": "0x080084b0",
            "current_name": "initialize_application_080084b0",
            "code": "\nvoid initializeApplication_080084b0(void)\n\n{\n  int valueIndex;\n  undefined4 valueIndex2;\n  \n  valueIndex = find_value_index_08007320(2,&DAT_0800a864);\n  if (valueIndex != 0) {\n    valueIndex2 = find_value_index_08007320(2,&DAT_0800a864);\n    DAT_20000075 = check_value_and_find_index_0800734a(valueIndex2,&DAT_0800a81c);\n    DAT_20000074 = 2;\n    DAT_20000064 = 0x2580;\n    DAT_20000070 = 0;\n    DAT_20000068 = 0;\n    DAT_2000006c = 0;\n    FUNC_08008078(&DAT_2000001c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080084b0": "initialize_application_080084b0",
                "iVar1": "valueIndex",
                "uVar2": "valueIndex2"
            },
            "calling": [
                "FUN_08008500"
            ],
            "called": [
                "FUN_0800734a",
                "FUN_08007320",
                "FUN_08008078"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008500": {
            "entrypoint": "0x08008500",
            "current_name": "process_with_delay_08008500",
            "code": "\nuint process_with_delay_08008500(undefined4 input_value,uint input_number)\n\n{\n  int initial_dat_value;\n  int value_index;\n  uint iteration_count;\n  \n  initial_dat_value = get_dat_value_08003760();\n  value_index = find_value_index_08007320(2,&DAT_0800a864);\n  if (value_index == 0) {\n    return 0;\n  }\n  for (iteration_count = 0;\n      (iteration_count < 5 &&\n      (((&DAT_200006c0)[iteration_count] == 0 ||\n       (value_index = find_value_index_08007320(2,&DAT_0800a864), *(int *)(&DAT_200006c0)[iteration_count] != value_index))));\n      iteration_count = iteration_count + 1 & 0xff) {\n  }\n  if (4 < iteration_count) {\n    if ((4 < DAT_20000060) && (initialize_application_080084b0(), 4 < DAT_20000060)) {\n      return 0;\n    }\n    iteration_count = (uint)DAT_20000060;\n  }\n  do {\n    value_index = process_data_080067ac((&DAT_200006c0)[iteration_count],input_value,input_number & 0xffff,1000);\n    if (value_index == 0) {\n      return input_number;\n    }\n    value_index = get_dat_value_08003760();\n  } while ((uint)(value_index - initial_dat_value) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008500": "process_with_delay_08008500",
                "param_1": "input_value",
                "param_2": "input_number",
                "iVar1": "initial_dat_value",
                "iVar2": "value_index",
                "uVar3": "iteration_count"
            },
            "calling": [
                "FUN_0800885c"
            ],
            "called": [
                "FUN_08007320",
                "FUN_080084b0",
                "FUN_080067ac",
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080085b8": {
            "entrypoint": "0x080085b8",
            "current_name": "is_flag_set_080085b8",
            "code": "\nbool is_flag_set_080085b8(int value)\n\n{\n  uint combined_value;\n  \n  combined_value = combine_bytes_08006b1c((&DAT_200006c0)[*(byte *)(value + 0x44)]);\n  return (combined_value & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_080085b8": "is_flag_set_080085b8",
                "param_1": "value",
                "uVar1": "combined_value"
            },
            "calling": [
                "FUN_08008600",
                "FUN_0800863c"
            ],
            "called": [
                "FUN_08006b1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080085dc": {
            "entrypoint": "0x080085dc",
            "current_name": "check_condition_080085dc",
            "code": "\nbool checkCondition_080085dc(int inputValue)\n\n{\n  uint combinedResult;\n  \n  combinedResult = combine_bytes_08006b1c((&DAT_200006c0)[*(byte *)(inputValue + 0x44)]);\n  return (combinedResult & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_080085dc": "check_condition_080085dc",
                "param_1": "inputValue",
                "uVar1": "combinedResult"
            },
            "calling": [],
            "called": [
                "FUN_08006b1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008600": {
            "entrypoint": "0x08008600",
            "current_name": "validate_and_copy_data_08008600",
            "code": "\nundefined4 validate_and_copy_data_08008600(int input_value,undefined *output_buffer,undefined4 size,undefined4 flag_value)\n\n{\n  int is_flag_set;\n  \n  if (input_value == 0) {\n    return 0xffffffff;\n  }\n  is_flag_set = is_flag_set_080085b8();\n  if (is_flag_set == 0) {\n    *output_buffer = *(undefined *)(input_value + 0x45);\n    validate_data((&DAT_200006c0)[*(byte *)(input_value + 0x44)],input_value + 0x45,1,&DAT_200006c0,flag_value);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008600": "validate_and_copy_data_08008600",
                "param_1": "input_value",
                "param_2": "output_buffer",
                "param_3": "size",
                "param_4": "flag_value",
                "iVar1": "is_flag_set",
                "validate_input_080068d6": "validate_data"
            },
            "calling": [
                "FUN_08008b66"
            ],
            "called": [
                "FUN_080085b8",
                "FUN_080068d6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800863c": {
            "entrypoint": "0x0800863c",
            "current_name": "update_data_0800863c",
            "code": "\nvoid updateData_0800863c(int inputPtr,undefined4 data1,undefined4 data2,undefined4 data3)\n\n{\n  int flagStatus;\n  uint index;\n  \n  if (inputPtr != 0) {\n    flagStatus = is_flag_set_080085b8();\n    if (flagStatus == 0) {\n      index = (uint)*(byte *)(inputPtr + 0x44);\n      *(undefined4 *)(&DAT_20000670 + index * 4) = data1;\n      *(int *)(&DAT_20000684 + index * 4) = inputPtr;\n      updateData_0800863cFunction((int)*(char *)(inputPtr + 0x5a),0,1,index,data3);\n      setBitInArray((int)*(char *)(inputPtr + 0x5a));\n      validateInput((&DAT_200006c0)[*(byte *)(inputPtr + 0x44)],inputPtr + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800863c": "update_data_0800863c",
                "param_1": "inputPtr",
                "param_2": "data1",
                "param_3": "data2",
                "param_4": "data3",
                "iVar1": "flagStatus",
                "uVar2": "index",
                "update_data_08003f30": "updateDataFunction",
                "set_bit_in_array_08003f94": "setBitInArray",
                "validate_input_080068d6": "validateInput"
            },
            "calling": [
                "FUN_08008c44"
            ],
            "called": [
                "FUN_080085b8",
                "FUN_080068d6",
                "FUN_08003f94",
                "FUN_08003f30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008694": {
            "entrypoint": "0x08008694",
            "current_name": "update_settings_08008694",
            "code": "\nvoid updateSettings_08008694(int dataPtr,undefined4 newValue)\n\n{\n  byte byteValue;\n  \n  if (dataPtr != 0) {\n    byteValue = *(byte *)(dataPtr + 0x44);\n    *(undefined4 *)(&DAT_20000698 + (uint)byteValue * 4) = newValue;\n    *(int *)(&DAT_200006ac + (uint)byteValue * 4) = dataPtr;\n    update_data_08003f30((int)*(char *)(dataPtr + 0x5a),0,2);\n    set_bit_in_array_08003f94((int)*(char *)(dataPtr + 0x5a));\n    validate_and_update_settings_0800688e((&DAT_200006c0)[*(byte *)(dataPtr + 0x44)],\n                 *(int *)(dataPtr + 100) + (uint)*(ushort *)(dataPtr + 0x6a),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008694": "update_settings_08008694",
                "param_1": "dataPtr",
                "param_2": "newValue",
                "bVar1": "byteValue"
            },
            "calling": [],
            "called": [
                "FUN_08003f94",
                "FUN_08003f30",
                "FUN_0800688e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080086e8": {
            "entrypoint": "0x080086e8",
            "current_name": "find_value_index_080086e8",
            "code": "\nuint find_value_index_080086e8(int value)\n\n{\n  uint uVar1;\n  \n  if (value == 0) {\n    uVar1 = 5;\n  }\n  else {\n    uVar1 = 0;\n    while( true ) {\n      if (4 < uVar1) {\n        return uVar1;\n      }\n      if (value == (&DAT_200006c0)[uVar1]) break;\n      uVar1 = uVar1 + 1 & 0xff;\n    }\n  }\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_080086e8": "find_value_index_080086e8",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800870c",
                "FUN_08008730"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800870c": {
            "entrypoint": "0x0800870c",
            "current_name": "execute_selected_function_0800870c",
            "code": "\nvoid executeSelectedFunction_0800870c(void)\n\n{\n  uint valueIndex;\n  \n  valueIndex = findValueIndex();\n  if (valueIndex < 5) {\n    (**(code **)(&DAT_20000670 + valueIndex * 4))(*(undefined4 *)(&DAT_20000684 + valueIndex * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800870c": "execute_selected_function_0800870c",
                "uVar1": "valueIndex",
                "find_value_index_080086e8": "findValueIndex"
            },
            "calling": [
                "FUN_0800694c"
            ],
            "called": [
                "FUN_080086e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008730": {
            "entrypoint": "0x08008730",
            "current_name": "update_settings_08008730",
            "code": "\nvoid updateSettings_08008730(void)\n\n{\n  uint valueIndex;\n  int result;\n  int value;\n  \n  valueIndex = findValueIndex();\n  value = *(int *)(&DAT_200006ac + valueIndex * 4);\n  if ((valueIndex < 5) && (result = (**(code **)(&DAT_20000698 + valueIndex * 4))(value), result != -1)) {\n    validateAndUpdateSettings((&DAT_200006c0)[*(byte *)(value + 0x44)],\n                 *(int *)(value + 100) + (uint)*(ushort *)(value + 0x6a),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008730": "update_settings_08008730",
                "uVar1": "valueIndex",
                "iVar2": "result",
                "iVar3": "value",
                "find_value_index_080086e8": "findValueIndex",
                "validate_and_update_settings_0800688e": "validateAndUpdateSettings"
            },
            "calling": [
                "FUN_08006932"
            ],
            "called": [
                "FUN_080086e8",
                "FUN_0800688e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800877c": {
            "entrypoint": "0x0800877c",
            "current_name": "FUNC_0800877c",
            "code": "\nvoid FUNC_0800877c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800877c": "FUNC_0800877c"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008804": {
            "entrypoint": "0x08008804",
            "current_name": "allocate_memory_08008804",
            "code": "\nundefined * allocateMemory_08008804(int size)\n\n{\n  undefined *allocatedMemory;\n  \n  if (DAT_200006d4 == (undefined *)0x0) {\n    DAT_200006d4 = &DAT_20000a3c;\n  }\n  allocatedMemory = DAT_200006d4;\n  if (DAT_200006d4 + size <= stackBottom) {\n    DAT_200006d4 = DAT_200006d4 + size;\n    return allocatedMemory;\n  }\n  DAT_20000a38 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008804": "allocate_memory_08008804",
                "param_1": "size",
                "puVar1": "allocatedMemory",
                "&stack0x00000000": "stackBottom"
            },
            "calling": [
                "FUN_08009918"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008840": {
            "entrypoint": "0x08008840",
            "current_name": "get_default_value_08008840",
            "code": "\nundefined4 get_default_value_08008840(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008840": "get_default_value_08008840"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008846": {
            "entrypoint": "0x08008846",
            "current_name": "set_memory_page_size_08008846",
            "code": "\nundefined4 setMemoryPageSize_08008846(undefined4 result,int address)\n\n{\n  *(undefined4 *)(address + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008846": "set_memory_page_size_08008846",
                "param_1": "result",
                "param_2": "address"
            },
            "calling": [
                "FUN_0800a0ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008850": {
            "entrypoint": "0x08008850",
            "current_name": "initialize_program_08008850",
            "code": "\nundefined4 initializeProgram_08008850(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08008850": "initialize_program_08008850"
            },
            "calling": [
                "FUN_0800a110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008854": {
            "entrypoint": "0x08008854",
            "current_name": "initialize_08008854",
            "code": "\nvoid initialize_08008854(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008854": "initialize_08008854",
                "undefined4": "void"
            },
            "calling": [
                "FUN_0800a130"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008858": {
            "entrypoint": "0x08008858",
            "current_name": "initialize_application_08008858",
            "code": "\nvoid initializeApplication_08008858(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008858": "initialize_application_08008858",
                "undefined4": "void"
            },
            "calling": [
                "FUN_0800a168"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800885c": {
            "entrypoint": "0x0800885c",
            "current_name": "process_with_delay_0800885c",
            "code": "\nvoid process_with_delay_0800885c(undefined4 unused_param,undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3)\n\n{\n  process_with_delay_0800885c_08008500(input_param_1,input_param_2,input_param_2,input_param_3,input_param_3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800885c": "process_with_delay_0800885c",
                "param_1": "unused_param",
                "param_2": "input_param_1",
                "param_3": "input_param_2",
                "param_4": "input_param_3"
            },
            "calling": [
                "FUN_0800a042"
            ],
            "called": [
                "FUN_08008500"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008868": {
            "entrypoint": "0x08008868",
            "current_name": "infinite_loop_08008868",
            "code": "\nvoid infiniteLoop_08008868(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08008868": "infinite_loop_08008868"
            },
            "calling": [
                "FUN_08009b5c",
                "FUN_08008868"
            ],
            "called": [
                "FUN_08008868"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800886c": {
            "entrypoint": "0x0800886c",
            "current_name": "initialize_data_0800886c",
            "code": "\nundefined4 initializeData_0800886c(void)\n\n{\n  DAT_20000a38 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800886c": "initialize_data_0800886c"
            },
            "calling": [
                "FUN_08009fe8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800887c": {
            "entrypoint": "0x0800887c",
            "current_name": "initialize_return_value_0800887c",
            "code": "\nundefined4 initializeReturnValue_0800887c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800887c": "initialize_return_value_0800887c"
            },
            "calling": [
                "thunk_FUN_0800887c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008880": {
            "entrypoint": "0x08008880",
            "current_name": "convert_value_08008880",
            "code": "\nuint convertValue_08008880(uint inputValue)\n\n{\n  bool isInRange;\n  char convertedValue;\n  uint outputValue;\n  \n  if (inputValue < 0xe) {\n    if (inputValue + 0x2e < 0x3c) {\n      isInRange = true;\n    }\n    else {\n      isInRange = false;\n    }\n  }\n  else {\n    isInRange = inputValue < 0x3c;\n  }\n  if (isInRange) {\n    if (inputValue < 0xe) {\n      inputValue = inputValue + 0x2e;\n    }\n    convertedValue = (&DAT_0800a908)[inputValue];\n  }\n  else {\n    convertedValue = -1;\n  }\n  if (convertedValue == -1) {\n    outputValue = 0;\n  }\n  else {\n    outputValue = process_memory_08006d80();\n    if (DAT_20000088 != 0xc) {\n      if (DAT_20000088 < 0xc) {\n        return outputValue >> (0xc - DAT_20000088 & 0xff);\n      }\n      return outputValue << (DAT_20000088 - 0xc & 0xff);\n    }\n  }\n  return outputValue;\n}\n\n",
            "renaming": {
                "FUN_08008880": "convert_value_08008880",
                "param_1": "inputValue",
                "bVar1": "isInRange",
                "cVar2": "convertedValue",
                "uVar3": "outputValue"
            },
            "calling": [
                "FUN_08000488",
                "FUN_080022f8"
            ],
            "called": [
                "FUN_08006d80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080088e0": {
            "entrypoint": "0x080088e0",
            "current_name": "process_extracted_data_080088e0",
            "code": "\nvoid process_extracted_data_080088e0(uint index,uint value)\n\n{\n  int comparison_result;\n  int extracted_value;\n  \n  if (index < 0x3c) {\n    extracted_value = (int)(char)(&DAT_0800a908)[index];\n  }\n  else {\n    extracted_value = -1;\n  }\n  if (extracted_value != -1) {\n    comparison_result = compare_and_find_0800738a(extracted_value,&DAT_0800a6cc);\n    if (comparison_result == 0) {\n      process_memory_08008990(index,1);\n      if (DAT_2000008c != 8) {\n        if (DAT_2000008c < 9) {\n          value = value << (8 - DAT_2000008c & 0xff);\n        }\n        else {\n          value = value >> (DAT_2000008c - 8 & 0xff);\n        }\n      }\n      if (value < 0x80) {\n        process_value_08008a24(index,0);\n      }\n      else {\n        process_value_08008a24(index,1);\n      }\n    }\n    else {\n      comparison_result = extract_bit_from_pointer_08006b28(extracted_value,&DAT_200006d8);\n      if (comparison_result == 0) {\n        set_bit_08006b3e(extracted_value,&DAT_200006d8);\n      }\n      if (DAT_2000008c != 8) {\n        if (DAT_2000008c < 9) {\n          value = value << (8 - DAT_2000008c & 0xff);\n        }\n        else {\n          value = value >> (DAT_2000008c - 8 & 0xff);\n        }\n      }\n      initialize_memory_08007118(extracted_value,0x3e418,0xff,value,comparison_result == 0);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080088e0": "process_extracted_data_080088e0",
                "param_1": "index",
                "param_2": "value",
                "iVar1": "comparison_result",
                "iVar2": "extracted_value"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "called": [
                "FUN_08006b3e",
                "FUN_08007118",
                "FUN_08006b28",
                "FUN_08008a24",
                "FUN_0800738a",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008990": {
            "entrypoint": "0x08008990",
            "current_name": "process_memory_08008990",
            "code": "\nvoid processMemory_08008990(uint index,undefined4 accessMode,undefined4 param,undefined1 *data)\n\n{\n  int bitResult;\n  undefined1 *ptrData;\n  int dataValue;\n  \n  if (index < 0x3c) {\n    dataValue = (int)(char)(&DAT_0800a908)[index];\n    ptrData = &DAT_0800a908;\n  }\n  else {\n    dataValue = -1;\n    ptrData = data;\n  }\n  if (dataValue != -1) {\n    bitResult = extract_bit_from_pointer_08006b28(dataValue,&DAT_200006d8,param,ptrData,data);\n    if (bitResult != 0) {\n      bitResult = compare_and_find_0800738a(dataValue,&DAT_0800a6cc);\n      if (bitResult != 0) {\n        process_values_080071e4(dataValue);\n      }\n      update_bit_value_08006b5c(dataValue,&DAT_200006d8);\n    }\n    switch(accessMode) {\n    case 0:\n      configure_memory_access_08007258(dataValue,0);\n      break;\n    case 1:\n      configure_memory_access_08007258(dataValue,1,0);\n      break;\n    case 2:\n      configure_memory_access_08007258(dataValue,0,1);\n      break;\n    case 3:\n      configure_memory_access_08007258(dataValue,0,2);\n    }\n    set_bit_08006b3e(dataValue,&DAT_200006ec);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008990": "process_memory_08008990",
                "param_1": "index",
                "param_2": "accessMode",
                "param_3": "param",
                "param_4": "data",
                "iVar1": "bitResult",
                "puVar2": "ptrData",
                "iVar3": "dataValue"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_080088e0",
                "FUN_080025ac",
                "FUN_08003002"
            ],
            "called": [
                "FUN_08007258",
                "FUN_080071e4",
                "FUN_08006b5c",
                "FUN_08006b3e",
                "FUN_08006b28",
                "FUN_0800738a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a24": {
            "entrypoint": "0x08008a24",
            "current_name": "process_value_08008a24",
            "code": "\nvoid processValue_08008a24(uint valueIndex,undefined4 param2,undefined4 param3,undefined1 *param4)\n\n{\n  int result;\n  undefined4 address;\n  undefined1 *pointer;\n  uint charValue;\n  \n  if (valueIndex < 0x3c) {\n    charValue = (uint)(char)(&DAT_0800a908)[valueIndex];\n    pointer = &DAT_0800a908;\n  }\n  else {\n    charValue = 0xffffffff;\n    pointer = param4;\n  }\n  if ((charValue != 0xffffffff) &&\n     (result = extract_bit_from_pointer_08006b28(charValue,&DAT_200006ec,param3,pointer,param4), result != 0)) {\n    address = map_param_to_address_08006b7c((charValue << 0x18) >> 0x1c);\n    update_value_based_on_param_080072d8(address,1 << (charValue & 0xf) & 0xffff,param2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008a24": "process_value_08008a24",
                "param_1": "valueIndex",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "address",
                "puVar3": "pointer",
                "uVar4": "charValue"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_080088e0",
                "FUN_08002fca"
            ],
            "called": [
                "FUN_08006b7c",
                "FUN_080072d8",
                "FUN_08006b28"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a6c": {
            "entrypoint": "0x08008a6c",
            "current_name": "validate_parameter_08008a6c",
            "code": "\nchar validate_parameter_08008a6c(uint parameter)\n\n{\n  char isValid;\n  int bitValue;\n  undefined4 mappedAddress;\n  uint dataArrayIndex;\n  \n  if (parameter < 0x3c) {\n    dataArrayIndex = (uint)(char)(&DAT_0800a908)[parameter];\n  }\n  else {\n    dataArrayIndex = 0xffffffff;\n  }\n  if (dataArrayIndex == 0xffffffff) {\n    isValid = '\\0';\n  }\n  else {\n    bitValue = extract_bit_from_pointer_08006b28(dataArrayIndex,&DAT_200006ec);\n    if (bitValue == 0) {\n      isValid = '\\0';\n    }\n    else {\n      mappedAddress = map_param_to_address_08006b7c((dataArrayIndex << 0x18) >> 0x1c);\n      isValid = check_parameters_080072f0(mappedAddress,1 << (dataArrayIndex & 0xf) & 0xffff);\n    }\n  }\n  if (isValid != '\\0') {\n    isValid = '\\x01';\n  }\n  return isValid;\n}\n\n",
            "renaming": {
                "FUN_08008a6c": "validate_parameter_08008a6c",
                "param_1": "parameter",
                "cVar1": "isValid",
                "iVar2": "bitValue",
                "uVar3": "mappedAddress",
                "uVar4": "dataArrayIndex"
            },
            "calling": [
                "FUN_08000ef8"
            ],
            "called": [
                "FUN_080072f0",
                "FUN_08006b7c",
                "FUN_08006b28"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008abc": {
            "entrypoint": "0x08008abc",
            "current_name": "initialize_data_08008abc",
            "code": "\nvoid initializeData_08008abc(void)\n\n{\n  initializeData_08008abc_0800723c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008abc": "initialize_data_08008abc",
                "initialize_data_0800723c": "initializeData_0800723c"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [
                "FUN_0800723c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ac4": {
            "entrypoint": "0x08008ac4",
            "current_name": "FUNC_08008ac4",
            "code": "\nvoid FUNC_08008ac4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008ac4": "FUNC_08008ac4"
            },
            "calling": [
                "FUN_08003002",
                "FUN_08002fca"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008afa": {
            "entrypoint": "0x08008afa",
            "current_name": "calculate_modified_value_08008afa",
            "code": "\nushort calculate_modified_value_08008afa(int input_value)\n\n{\n  return (*(short *)(input_value + 0x134) + 0x40) - *(short *)(input_value + 0x136) & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_08008afa": "calculate_modified_value_08008afa",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08008bf4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b66": {
            "entrypoint": "0x08008b66",
            "current_name": "copy_data_and_update_08008b66",
            "code": "\nvoid copyDataAndUpdate_08008b66(int input)\n\n{\n  int result;\n  ushort updatedValue;\n  undefined copiedData;\n  \n  result = validate_and_copy_data_08008600(input,&copiedData);\n  if ((result == 0) &&\n     (updatedValue = *(short *)(input + 0x60) + 1U & 0x3f, updatedValue != *(ushort *)(input + 0x62))) {\n    *(undefined *)(*(int *)(input + 0x5c) + (uint)*(ushort *)(input + 0x60)) = copiedData;\n    *(ushort *)(input + 0x60) = updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008b66": "copy_data_and_update_08008b66",
                "param_1": "input",
                "iVar1": "result",
                "uVar2": "updatedValue",
                "local_9": "copiedData"
            },
            "calling": [],
            "called": [
                "FUN_08008600"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008bf4": {
            "entrypoint": "0x08008bf4",
            "current_name": "FUNC_08008bf4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08008bfa) */\n/* WARNING: Removing unreachable block (ram,0x08008c0c) */\n/* WARNING: Removing unreachable block (ram,0x08008c02) */\n/* WARNING: Removing unreachable block (ram,0x08008c14) */\n\nvoid FUNC_08008bf4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008bf4": "FUNC_08008bf4"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [
                "FUN_08008afa"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008c20": {
            "entrypoint": "0x08008c20",
            "current_name": "initialize_data_structures_08008c20",
            "code": "\nvoid initializeDataStructures_08008c20(int baseAddress)\n\n{\n  *(int *)(baseAddress + 0x130) = baseAddress + 0x11;\n  *(undefined2 *)(baseAddress + 0x134) = 0;\n  *(undefined2 *)(baseAddress + 0x136) = 0;\n  *(int *)(baseAddress + 0x138) = baseAddress + 0x51;\n  *(undefined2 *)(baseAddress + 0x13c) = 0;\n  *(undefined2 *)(baseAddress + 0x13e) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008c20": "initialize_data_structures_08008c20",
                "param_1": "baseAddress"
            },
            "calling": [
                "FUN_08008d30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008c44": {
            "entrypoint": "0x08008c44",
            "current_name": "initialize_serial_port_08008c44",
            "code": "\nvoid initializeSerialPort_08008c44(int serialPortAddress,undefined4 baudRate,byte configuration)\n\n{\n  uint result;\n  byte configBits;\n  int mode;\n  code *errorHandler;\n  \n  *(undefined4 *)(serialPortAddress + 0x11c) = baudRate;\n  *(byte *)(serialPortAddress + 0x140) = configuration;\n  configBits = configuration & 7;\n  if (configBits == 4) {\n    mode = 7;\n  }\n  else if (configBits == 6) {\n    mode = 8;\n  }\n  else if (configBits == 2) {\n    mode = 6;\n  }\n  else {\n    mode = 0;\n  }\n  if ((configuration & 0x30) == 0x30) {\n    *(undefined4 *)(serialPortAddress + 0x128) = 0x600;\n    mode = mode + 1;\n  }\n  else if ((configuration & 0x20) == 0) {\n    *(undefined4 *)(serialPortAddress + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPortAddress + 0x128) = 0x400;\n    mode = mode + 1;\n  }\n  if ((configuration & 8) == 0) {\n    *(undefined4 *)(serialPortAddress + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPortAddress + 0x124) = 0x2000;\n  }\n  if (mode == 8) {\n    *(undefined4 *)(serialPortAddress + 0x120) = 0;\n  }\n  else if (mode == 9) {\n    *(undefined4 *)(serialPortAddress + 0x120) = 0x1000;\n  }\n  else {\n    mode = 0;\n  }\n  if (mode != 0) {\n    FUNC_08008078(serialPortAddress + 0xd4);\n    update_data_0800863c(serialPortAddress + 0xd4,0x8008b67);\n    return;\n  }\n  errorHandler = (code *)0x8008cee;\n  format_and_print_assertion_error_080090cc(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n               ,299,\"void HardwareSerial::begin(long unsigned int, byte)\",\"databits!=0\");\n  if (result < 0x3c) {\n    uRam0000012d = (&DAT_0800a908)[result];\n  }\n  else {\n    uRam0000012d = 0xff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08008d0c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*errorHandler)(0,result,&stack0x00000148);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008c44": "initialize_serial_port_08008c44",
                "param_1": "serialPortAddress",
                "param_2": "baudRate",
                "param_3": "configuration",
                "extraout_r1": "result",
                "bVar1": "configBits",
                "iVar2": "mode",
                "UNRECOVERED_JUMPTABLE": "errorHandler"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "FUN_080090cc",
                "FUN_08008078",
                "FUN_0800863c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d00": {
            "entrypoint": "0x08008d00",
            "current_name": "update_data_08008d00",
            "code": "\nvoid updateData_08008d00(int baseAddress,uint inputValue)\n\n{\n  undefined newValue;\n  code *jumpTable;\n  \n  if (inputValue < 0x3c) {\n    newValue = (&DAT_0800a908)[inputValue];\n  }\n  else {\n    newValue = 0xff;\n  }\n  *(undefined *)(baseAddress + 0x12d) = newValue;\n                    /* WARNING: Could not recover jumptable at 0x08008d0c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d00": "update_data_08008d00",
                "param_1": "baseAddress",
                "param_2": "inputValue",
                "uVar1": "newValue",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_08008d30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d18": {
            "entrypoint": "0x08008d18",
            "current_name": "set_byte_value_08008d18",
            "code": "\nvoid setByteValue_08008d18(int memoryAddress,uint index)\n\n{\n  undefined byteValue;\n  \n  if (index < 0x3c) {\n    byteValue = (&DAT_0800a908)[index];\n  }\n  else {\n    byteValue = 0xff;\n  }\n  *(undefined *)(memoryAddress + 300) = byteValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d18": "set_byte_value_08008d18",
                "param_1": "memoryAddress",
                "param_2": "index",
                "uVar1": "byteValue"
            },
            "calling": [
                "FUN_08008d30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d30": {
            "entrypoint": "0x08008d30",
            "current_name": "initialize_data_08008d30",
            "code": "\nundefined4 *\ninitialize_data_08008d30(undefined4 *data,undefined4 value,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined index;\n  \n  data[1] = 0;\n  data[2] = 1000;\n  *data = &PTR_LAB_08008ba4_1_0800aab8;\n  if (data == (undefined4 *)&DAT_20000700) {\n    update_data(&DAT_20000700,0,param_3,&DAT_20000700,param_4);\n    set_byte_value(&DAT_20000700,1);\n  }\n  else {\n    index = check_value_and_find_index(value,&DAT_0800a81c);\n    *(undefined *)((int)data + 0x12d) = index;\n    index = check_value_and_find_index(value,&DAT_0800a864);\n    *(undefined *)(data + 0x4b) = index;\n  }\n  initialize_data_08008d30_structures(data);\n  return data;\n}\n\n",
            "renaming": {
                "FUN_08008d30": "initialize_data_08008d30",
                "param_1": "data",
                "param_2": "value",
                "uVar1": "index",
                "update_data_08008d00": "update_data",
                "set_byte_value_08008d18": "set_byte_value",
                "check_value_and_find_index_0800734a": "check_value_and_find_index",
                "initialize_data_structures_08008c20": "initialize_data_structures"
            },
            "calling": [
                "FUN_08008d8c"
            ],
            "called": [
                "FUN_0800734a",
                "FUN_08008c20",
                "FUN_08008d18",
                "FUN_08008d00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d8c": {
            "entrypoint": "0x08008d8c",
            "current_name": "initialize_if_param1_is_1_08008d8c",
            "code": "\nvoid initialize_if_param1_is_1_08008d8c(int is_param1,int is_param2,undefined4 unchanged,undefined4 unchanged)\n\n{\n  if (is_param1 != 1) {\n    return;\n  }\n  if (is_param2 == 0xffff) {\n    initialize_data_at_address(&DAT_20000700,0x40004400,unchanged,0xffff,unchanged);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d8c": "initialize_if_param1_is_1_08008d8c",
                "param_1": "is_param1",
                "param_2": "is_param2",
                "param_3": "unchanged",
                "param_4": "unchanged",
                "initialize_data_08008d30": "initialize_data_at_address"
            },
            "calling": [],
            "called": [
                "FUN_08008d30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008df8": {
            "entrypoint": "0x08008df8",
            "current_name": "initialize_data_08008df8",
            "code": "\nvoid initializeData_08008df8(undefined4 *output,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *output = &DAT_0800ab0c;\n  *(undefined *)(output + 1) = value1;\n  *(undefined *)((int)output + 5) = value2;\n  *(undefined *)((int)output + 6) = value3;\n  *(undefined *)((int)output + 7) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008df8": "initialize_data_08008df8",
                "param_1": "output",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_08008e14"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e14": {
            "entrypoint": "0x08008e14",
            "current_name": "initialize_data_if_condition_met_08008e14",
            "code": "\nvoid initialize_data_if_condition_met_08008e14(int condition_1,int condition_2)\n\n{\n  if ((condition_1 == 1) && (condition_2 == 0xffff)) {\n    initialize_data_08008df8(&DAT_20000844,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008e14": "initialize_data_if_condition_met_08008e14",
                "param_1": "condition_1",
                "param_2": "condition_2"
            },
            "calling": [],
            "called": [
                "FUN_08008df8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ef4": {
            "entrypoint": "0x08008ef4",
            "current_name": "calculate_linear_interpolation_08008ef4",
            "code": "\nint calculate_linear_interpolation_08008ef4(int starting_value,int starting_point,int ending_point,int starting_output,int ending_output)\n\n{\n  return (uint)((ending_output - starting_output) * (starting_value - starting_point)) / (uint)(ending_point - starting_point) + starting_output;\n}\n\n",
            "renaming": {
                "FUN_08008ef4": "calculate_linear_interpolation_08008ef4",
                "param_1": "starting_value",
                "param_2": "starting_point",
                "param_3": "ending_point",
                "param_4": "starting_output",
                "param_5": "ending_output"
            },
            "calling": [
                "FUN_080026b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f0c": {
            "entrypoint": "0x08008f0c",
            "current_name": "FUNC_08008f0c",
            "code": "\nvoid FUNC_08008f0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f0c": "FUNC_08008f0c"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008f0e": {
            "entrypoint": "0x08008f0e",
            "current_name": "initialize_and_update_devices_08008f0e",
            "code": "\nvoid initialize_and_update_devices_08008f0e(void)\n\n{\n  update_data(3);\n  initialize_devices();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f0e": "initialize_and_update_devices_08008f0e",
                "update_data_08003f0c": "update_data",
                "initialize_devices_080036a2": "initialize_devices"
            },
            "calling": [
                "FUN_08009148"
            ],
            "called": [
                "FUN_080036a2",
                "FUN_08003f0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f1c": {
            "entrypoint": "0x08008f1c",
            "current_name": "continuous_data_processing_08008f1c",
            "code": "\nvoid continuous_data_processing_08008f1c(void)\n\n{\n  FUNC_08008f0c();\n  initialize_gateway();\n  do {\n    process_and_handle_data();\n    FUNC_08008bf4();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08008f1c": "continuous_data_processing_08008f1c",
                "initialize_gateway_08001b48": "initialize_gateway",
                "process_and_handle_data_080022f8": "process_and_handle_data"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08001b48",
                "FUN_08008f0c",
                "FUN_08008bf4",
                "FUN_080022f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f3c": {
            "entrypoint": "0x08008f3c",
            "current_name": "count_set_bits_08008f3c",
            "code": "\nchar countSetBits_08008f3c(uint input_number)\n\n{\n  char bit_count;\n  \n  bit_count = '\\0';\n  for (; input_number != 1; input_number = input_number >> 1) {\n    bit_count = bit_count + '\\x01';\n  }\n  return bit_count;\n}\n\n",
            "renaming": {
                "FUN_08008f3c": "count_set_bits_08008f3c",
                "param_1": "input_number",
                "cVar1": "bit_count"
            },
            "calling": [
                "FUN_08009094"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f78": {
            "entrypoint": "0x08008f78",
            "current_name": "initialize_parameters_08008f78",
            "code": "\nvoid initialize_parameters_08008f78(int flag,int value,undefined4 unused_param_1,undefined4 unused_param_2)\n\n{\n  if (flag != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    DAT_2000084c = 6;\n    DAT_20000858 = 0;\n    DAT_20000860 = 7;\n    DAT_2000086c = 0;\n    DAT_20000874 = 8;\n    DAT_20000880 = 0;\n    DAT_20000888 = 9;\n    DAT_20000894 = 0;\n    DAT_2000089c = 10;\n    DAT_200008a8 = 0;\n    DAT_200008b0 = 0x17;\n    DAT_200008bc = 0;\n    DAT_200008c4 = 0x17;\n    DAT_200008d0 = 0;\n    DAT_200008d8 = 0x17;\n    DAT_200008e4 = 0;\n    DAT_200008ec = 0x17;\n    DAT_200008f8 = 0;\n    DAT_20000900 = 0x17;\n    DAT_2000090c = 0;\n    DAT_20000914 = 0x28;\n    DAT_20000920 = 0;\n    DAT_20000928 = 0x28;\n    DAT_20000934 = 0;\n    DAT_2000093c = 0x28;\n    DAT_20000948 = 0;\n    DAT_20000950 = 0x28;\n    DAT_2000095c = 0;\n    DAT_20000964 = 0x28;\n    DAT_20000970 = 0;\n    DAT_20000978 = 0x28;\n    DAT_20000984 = 0;\n    shift_param_left_080090c2(0,&LAB_08008f50_1,&DAT_20000000,&DAT_2000084c,unused_param_2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f78": "initialize_parameters_08008f78",
                "param_1": "flag",
                "param_2": "value",
                "param_3": "unused_param_1",
                "param_4": "unused_param_2"
            },
            "calling": [],
            "called": [
                "FUN_080090c2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009084": {
            "entrypoint": "0x08009084",
            "current_name": "execute_command_08009084",
            "code": "\nvoid executeCommand_08009084(int inputParam)\n\n{\n  int bitCount;\n  \n  if (*(int *)(inputParam + 8) != 0) {\n    (**(code **)(inputParam + 0xc))();\n    return;\n  }\n  processAndExecuteCommand();\n  bitCount = countSetBits();\n  if ((&DAT_20000858)[bitCount * 5] != 0) {\n    executeCommand_08009084();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009084": "execute_command_08009084",
                "param_1": "inputParam",
                "iVar1": "bitCount",
                "process_command_and_execute_0800a18c": "processAndExecuteCommand",
                "count_set_bits_08008f3c": "countSetBits"
            },
            "calling": [
                "FUN_08009094"
            ],
            "called": [
                "FUN_0800a18c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009094": {
            "entrypoint": "0x08009094",
            "current_name": "check_and_execute_command_08009094",
            "code": "\nvoid checkAndExecuteCommand_08009094(void)\n\n{\n  int bitCount;\n  \n  bitCount = count_set_bits_08008f3c();\n  if ((&DAT_20000858)[bitCount * 5] != 0) {\n    executeCommand();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009094": "check_and_execute_command_08009094",
                "iVar1": "bitCount",
                "execute_command_08009084": "executeCommand"
            },
            "calling": [
                "FUN_080042f0"
            ],
            "called": [
                "FUN_08008f3c",
                "FUN_08009084"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090c2": {
            "entrypoint": "0x080090c2",
            "current_name": "shift_param_left_080090c2",
            "code": "\nvoid shift_param_left_080090c2(undefined4 destination,undefined4 source)\n\n{\n  shift_param_left_080090c2_08009108(source,destination);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090c2": "shift_param_left_080090c2",
                "param_1": "destination",
                "param_2": "source"
            },
            "calling": [
                "FUN_08008f78"
            ],
            "called": [
                "FUN_08009108"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090cc": {
            "entrypoint": "0x080090cc",
            "current_name": "format_and_print_assertion_error_080090cc",
            "code": "\nvoid formatAndPrintAssertionError_080090cc(undefined4 file,undefined4 line,char *message,undefined4 function)\n\n{\n  undefined4 formattedMessage;\n  char *additionalMessage;\n  undefined8 result;\n  undefined4 formattedFunction;\n  \n  formattedMessage = *(undefined4 *)(DAT_20000090 + 0xc);\n  formattedFunction = function;\n  if (message == (char *)0x0) goto LAB_080090f0;\n  additionalMessage = \", function: \";\n  do {\n    format_and_count_input_08009124(formattedMessage,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",function,file,line\n                 ,additionalMessage,message,formattedFunction);\n    result = process_and_execute_command_08009b5c();\n    line = (undefined4)((ulonglong)result >> 0x20);\n    formattedMessage = (undefined4)result;\nLAB_080090f0:\n    message = \"\";\n    additionalMessage = message;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080090cc": "format_and_print_assertion_error_080090cc",
                "param_1": "file",
                "param_2": "line",
                "param_3": "message",
                "param_4": "function",
                "uVar1": "formattedMessage",
                "pcVar2": "additionalMessage",
                "uVar3": "result",
                "uVar4": "formattedFunction"
            },
            "calling": [
                "FUN_08008c44"
            ],
            "called": [
                "FUN_08009b5c",
                "FUN_08009124"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009108": {
            "entrypoint": "0x08009108",
            "current_name": "shift_param_left_08009108",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009110) */\n\nlonglong shiftParamLeft_08009108(undefined4 param1,uint param2)\n\n{\n  return (ulonglong)param2 << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08009108": "shift_param_left_08009108",
                "param_1": "param1",
                "param_2": "param2"
            },
            "calling": [
                "FUN_080090c2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009124": {
            "entrypoint": "0x08009124",
            "current_name": "format_and_count_input_08009124",
            "code": "\nvoid formatAndCountInput_08009124(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  undefined4 temp1;\n  undefined4 temp2;\n  \n  temp1 = arg3;\n  temp2 = arg4;\n  format_and_count_input_0800937c(DAT_20000090,arg1,arg2,&temp1,arg1,&temp1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009124": "format_and_count_input_08009124",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "uStack_8": "temp1",
                "uStack_4": "temp2"
            },
            "calling": [
                "FUN_080090cc"
            ],
            "called": [
                "FUN_0800937c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009148": {
            "entrypoint": "0x08009148",
            "current_name": "execute_function_array_08009148",
            "code": "\nvoid executeFunctionArray_08009148(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_0800abe4)[index])();\n  }\n  FUNC_0800a424();\n  for (index = 0; index != 0xc; index = index + 1) {\n    (*(code *)(&DAT_0800abe4)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009148": "execute_function_array_08009148",
                "iVar1": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_0800a424",
                "FUN_08008f0e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009190": {
            "entrypoint": "0x08009190",
            "current_name": "allocate_and_assign_memory_08009190",
            "code": "\nvoid allocateAndAssignMemory_08009190(undefined4 inputParam)\n\n{\n  allocate_and_assign_memory_08009270(DAT_20000090,inputParam);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009190": "allocate_and_assign_memory_08009190",
                "param_1": "inputParam"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [
                "FUN_08009270"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091a0": {
            "entrypoint": "0x080091a0",
            "current_name": "update_list_080091a0",
            "code": "\nvoid updateList_080091a0(undefined4 inputParam)\n\n{\n  updateList_080091a0Helper(DAT_20000090,inputParam);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091a0": "update_list_080091a0",
                "param_1": "inputParam",
                "update_list_080091d8": "updateListHelper"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091b0": {
            "entrypoint": "0x080091b0",
            "current_name": "copy_data_to_buffer_080091b0",
            "code": "\nvoid copyDataToBuffer_080091b0(int bufferStart,undefined *sourceData,int dataLength)\n\n{\n  undefined *destPtr;\n  undefined *srcPtr;\n  \n  srcPtr = (undefined *)(bufferStart + -1);\n  destPtr = sourceData + dataLength;\n  for (; sourceData != destPtr; sourceData = sourceData + 1) {\n    srcPtr = srcPtr + 1;\n    *srcPtr = *sourceData;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091b0": "copy_data_to_buffer_080091b0",
                "param_1": "bufferStart",
                "param_2": "sourceData",
                "param_3": "dataLength",
                "puVar1": "destPtr",
                "puVar2": "srcPtr"
            },
            "calling": [
                "FUN_080027f0",
                "FUN_08009908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091c6": {
            "entrypoint": "0x080091c6",
            "current_name": "fill_memory_080091c6",
            "code": "\nvoid fillMemory_080091c6(undefined *memory,undefined value,int length)\n\n{\n  undefined *endMemory;\n  \n  endMemory = memory + length;\n  for (; memory != endMemory; memory = memory + 1) {\n    *memory = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091c6": "fill_memory_080091c6",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "endMemory"
            },
            "calling": [
                "FUN_08009cdc",
                "FUN_08009db0",
                "FUN_08002a58",
                "FUN_08007118",
                "FUN_08009d24",
                "FUN_08006d80",
                "FUN_08002968"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091d8": {
            "entrypoint": "0x080091d8",
            "current_name": "update_list_080091d8",
            "code": "\nvoid updateList_080091d8(undefined4 *status,int listSize,undefined4 param_3,undefined4 param_4)\n\n{\n  int **nextList;\n  int **existingList;\n  int **currentNode;\n  int *tempVar;\n  int **previousNode;\n  int **newNode;\n  \n  if (listSize == 0) {\n    return;\n  }\n  newNode = (int **)(listSize + -4);\n  if (*(int *)(listSize + -4) < 0) {\n    newNode = (int **)((int)newNode + *(int *)(listSize + -4));\n  }\n  FUNC_08009f48();\n  currentNode = (int **)&DAT_2000098c;\n  if (DAT_2000098c == (int **)0x0) {\n    newNode[1] = (int *)0x0;\n    existingList = nextList;\n    DAT_2000098c = newNode;\n  }\n  else {\n    currentNode = DAT_2000098c;\n    if (newNode < DAT_2000098c) {\n      existingList = (int **)*newNode;\n      currentNode = (int **)((int)newNode + (int)existingList);\n      if (DAT_2000098c == currentNode) {\n        tempVar = *DAT_2000098c;\n        DAT_2000098c = (int **)DAT_2000098c[1];\n        currentNode = (int **)((int)tempVar + (int)existingList);\n        *newNode = (int *)currentNode;\n      }\n      newNode[1] = (int *)DAT_2000098c;\n      DAT_2000098c = newNode;\n    }\n    else {\n      do {\n        previousNode = currentNode;\n        currentNode = (int **)previousNode[1];\n        if (currentNode == (int **)0x0) break;\n      } while (currentNode <= newNode);\n      existingList = (int **)*previousNode;\n      if ((int **)((int)previousNode + (int)existingList) == newNode) {\n        existingList = (int **)((int)existingList + (int)*newNode);\n        *previousNode = (int *)existingList;\n        if (currentNode == (int **)((int)previousNode + (int)existingList)) {\n          tempVar = *currentNode;\n          currentNode = (int **)currentNode[1];\n          existingList = (int **)((int)existingList + (int)tempVar);\n          *previousNode = (int *)existingList;\n          previousNode[1] = (int *)currentNode;\n        }\n      }\n      else if (newNode < (int **)((int)previousNode + (int)existingList)) {\n        *status = 0xc;\n      }\n      else {\n        existingList = (int **)((int)newNode + (int)*newNode);\n        if (currentNode == existingList) {\n          tempVar = *currentNode;\n          currentNode = (int **)currentNode[1];\n          existingList = (int **)((int)tempVar + (int)*newNode);\n          *newNode = (int *)existingList;\n        }\n        newNode[1] = (int *)currentNode;\n        previousNode[1] = (int *)newNode;\n      }\n    }\n  }\n  FUNC_08009f4a(status,existingList,currentNode,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091d8": "update_list_080091d8",
                "param_1": "status",
                "param_2": "listSize",
                "extraout_r1": "nextList",
                "ppiVar1": "existingList",
                "ppiVar2": "currentNode",
                "piVar3": "tempVar",
                "ppiVar4": "previousNode",
                "ppiVar5": "newNode"
            },
            "calling": [
                "FUN_08009b5c",
                "FUN_080091a0",
                "FUN_08009a80",
                "FUN_08009908"
            ],
            "called": [
                "FUN_08009f4a",
                "FUN_08009f48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009270": {
            "entrypoint": "0x08009270",
            "current_name": "allocate_and_assign_memory_08009270",
            "code": "\nuint allocate_and_assign_memory_08009270(undefined4 *result,uint size)\n\n{\n  uint *current;\n  int difference;\n  uint *temp;\n  uint adjusted_size;\n  uint *previous;\n  uint aligned_size;\n  \n  aligned_size = (size + 3 & 0xfffffffc) + 8;\n  if (aligned_size < 0xc) {\n    aligned_size = 0xc;\n  }\n  if (((int)aligned_size < 0) || (aligned_size < size)) {\n    *result = 0xc;\n  }\n  else {\n    FUNC_08009f48();\n    current = DAT_2000098c;\n    previous = DAT_2000098c;\n    while (temp = current, temp != (uint *)0x0) {\n      adjusted_size = *temp - aligned_size;\n      if (-1 < (int)adjusted_size) {\n        if (adjusted_size < 0xc) {\n          if (previous == temp) {\n            current = (uint *)previous[1];\n            DAT_2000098c = current;\n          }\n          else {\n            current = (uint *)temp[1];\n          }\n          if (previous != temp) {\n            previous[1] = (uint)current;\n            previous = temp;\n          }\n        }\n        else {\n          *temp = adjusted_size;\n          *(uint *)((int)temp + adjusted_size) = aligned_size;\n          previous = (uint *)((int)temp + adjusted_size);\n        }\n        goto LAB_080092d4;\n      }\n      previous = temp;\n      current = (uint *)temp[1];\n    }\n    if (DAT_20000990 == 0) {\n      DAT_20000990 = allocate_and_assign_memory_08009270_08009918(result);\n    }\n    current = (uint *)allocate_and_assign_memory_08009270_08009918(result,aligned_size);\n    if ((current != (uint *)0xffffffff) &&\n       ((previous = (uint *)((int)current + 3U & 0xfffffffc), current == previous ||\n        (difference = allocate_and_assign_memory_08009270_08009918(result,(int)previous - (int)current), difference != -1)))) {\n      *previous = aligned_size;\nLAB_080092d4:\n      FUNC_08009f4a(result);\n      aligned_size = (int)previous + 0xbU & 0xfffffff8;\n      difference = aligned_size - (int)(previous + 1);\n      if (difference != 0) {\n        *(int *)((int)previous + difference) = -difference;\n        return aligned_size;\n      }\n      return aligned_size;\n    }\n    *result = 0xc;\n    FUNC_08009f4a(result);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009270": "allocate_and_assign_memory_08009270",
                "param_1": "result",
                "param_2": "size",
                "puVar1": "current",
                "iVar2": "difference",
                "puVar3": "temp",
                "uVar4": "adjusted_size",
                "puVar5": "previous",
                "uVar6": "aligned_size"
            },
            "calling": [
                "FUN_08009190",
                "FUN_08009d24",
                "FUN_08009908",
                "FUN_08009eac"
            ],
            "called": [
                "FUN_08009918",
                "FUN_08009f4a",
                "FUN_08009f48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800932c": {
            "entrypoint": "0x0800932c",
            "current_name": "process_input_0800932c",
            "code": "\nuint process_input_0800932c(int input_data,byte byte_value,byte **data_array)\n\n{\n  int index;\n  byte *ptr1;\n  byte *ptr2;\n  uint result;\n  \n  ptr1 = data_array[2] + -1;\n  data_array[2] = ptr1;\n  if ((-1 < (int)ptr1) ||\n     (((int)data_array[6] <= (int)ptr1 && (ptr1 = (byte *)(uint)byte_value, ptr1 != (byte *)0xa))))\n  {\n    ptr1 = *data_array;\n    *data_array = ptr1 + 1;\n    *ptr1 = byte_value;\n    return (uint)byte_value;\n  }\n  if ((input_data != 0) && (*(int *)(input_data + 0x18) == 0)) {\n    initialize_data_08009d50();\n  }\n  if (data_array == (byte **)&DAT_0800aba4) {\n    data_array = *(byte ***)(input_data + 4);\n  }\n  else if (data_array == (byte **)&DAT_0800abc4) {\n    data_array = *(byte ***)(input_data + 8);\n  }\n  else if (data_array == (byte **)&DAT_0800ab84) {\n    data_array = *(byte ***)(input_data + 0xc);\n  }\n  data_array[2] = data_array[6];\n  ptr2 = (byte *)(uint)*(ushort *)(data_array + 3);\n  index = (int)ptr2 << 0x1c;\n  if (((index < 0) && (ptr2 = data_array[4], ptr2 != (byte *)0x0)) ||\n     (index = update_data_08009a80(input_data,data_array,index,ptr2,ptr1), index == 0)) {\n    result = (uint)byte_value;\n    index = (int)*data_array - (int)data_array[4];\n    if ((index < (int)data_array[5]) || (index = process_data_08009c7c(input_data,data_array), index == 0)) {\n      data_array[2] = data_array[2] + -1;\n      ptr1 = *data_array;\n      *data_array = ptr1 + 1;\n      *ptr1 = byte_value;\n      if ((byte *)(index + 1) != data_array[5]) {\n        if (-1 < (int)((uint)*(ushort *)(data_array + 3) << 0x1f)) {\n          return result;\n        }\n        if (result != 10) {\n          return result;\n        }\n      }\n      index = process_data_08009c7c(input_data,data_array);\n      if (index == 0) {\n        return result;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800932c": "process_input_0800932c",
                "param_1": "input_data",
                "param_2": "byte_value",
                "param_3": "data_array",
                "iVar1": "index",
                "pbVar2": "ptr1",
                "pbVar3": "ptr2",
                "uVar4": "result"
            },
            "calling": [
                "FUN_08009358"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_08009a80",
                "FUN_08009c7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009358": {
            "entrypoint": "0x08009358",
            "current_name": "process_and_count_input_08009358",
            "code": "\nint process_and_count_input_08009358(undefined4 input_param1,undefined4 input_param2,undefined *input_data,int data_size)\n\n{\n  int result;\n  undefined *end_of_data;\n  int data_index;\n  \n  end_of_data = input_data + data_size;\n  data_index = data_size;\n  do {\n    if (input_data == end_of_data) {\n      return 0;\n    }\n    result = process_input_0800932c(input_param1,*input_data,input_param2,data_size,data_index);\n    data_size = result + 1;\n    input_data = input_data + 1;\n  } while (data_size != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009358": "process_and_count_input_08009358",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_data",
                "param_4": "data_size",
                "iVar1": "result",
                "puVar2": "end_of_data",
                "iVar3": "data_index"
            },
            "calling": [
                "FUN_0800937c"
            ],
            "called": [
                "FUN_0800932c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800937c": {
            "entrypoint": "0x0800937c",
            "current_name": "format_and_count_input_0800937c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009550) */\n\nint formatAndCountInput_0800937c(int inputData,undefined4 *formatString,byte *inputString,int *counter)\n\n{\n  int returnValue;\n  int *counterPtr;\n  bool found;\n  byte *currentCharPtr;\n  byte *endOfStringPtr;\n  int convertedValue;\n  int counterValue;\n  int *counterPtr;\n  uint modifierFlags;\n  int precision;\n  undefined4 width;\n  int fieldWidth;\n  int totalChars;\n  byte conversionSpecifier;\n  undefined charSpace;\n  undefined charPlus;\n  undefined flags;\n  undefined4 zeroPadding;\n  \n  counterPtr = counter;\n  if ((inputData != 0) && (*(int *)(inputData + 0x18) == 0)) {\n    initializeData();\n  }\n  if (formatString == &DAT_0800aba4) {\n    formatString = *(undefined4 **)(inputData + 4);\n  }\n  else if (formatString == (undefined4 *)&DAT_0800abc4) {\n    formatString = *(undefined4 **)(inputData + 8);\n  }\n  else if (formatString == (undefined4 *)&DAT_0800ab84) {\n    formatString = *(undefined4 **)(inputData + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(formatString + 3) << 0x1c)) || (formatString[4] == 0)) &&\n     (counterValue = updateData(inputData,formatString), counterValue != 0)) {\n    return -1;\n  }\n  totalChars = 0;\n  charSpace = 0x20;\n  charPlus = 0x30;\n  currentCharPtr = inputString;\nLAB_080093be:\n  endOfStringPtr = currentCharPtr;\n  if (*endOfStringPtr != 0) goto LAB_08009474;\n  goto LAB_080093c8;\nLAB_08009474:\n  currentCharPtr = endOfStringPtr + 1;\n  if (*endOfStringPtr != 0x25) goto LAB_080093be;\nLAB_080093c8:\n  counterValue = (int)endOfStringPtr - (int)inputString;\n  if (counterValue != 0) {\n    returnValue = processAndCountInput(inputData,formatString,inputString,counterValue);\n    if (returnValue == -1) {\nLAB_08009568:\n      if ((int)((uint)*(ushort *)(formatString + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return totalChars;\n    }\n    totalChars = totalChars + counterValue;\n  }\n  if (*endOfStringPtr == 0) goto LAB_08009568;\n  modifierFlags = 0;\n  fieldWidth = 0;\n  precision = -1;\n  width = 0;\n  flags = 0;\n  zeroPadding = 0;\n  currentCharPtr = endOfStringPtr + 1;\n  while( true ) {\n    counterValue = findCharInString(\"#-0+ \",*currentCharPtr);\n    inputString = currentCharPtr + 1;\n    if (counterValue == 0) break;\n    modifierFlags = 1 << (counterValue + 0xf7ff54b0U & 0xff) | modifierFlags;\n    currentCharPtr = inputString;\n  }\n  if ((int)(modifierFlags << 0x1b) < 0) {\n    flags = 0x20;\n  }\n  if ((int)(modifierFlags << 0x1c) < 0) {\n    flags = 0x2b;\n  }\n  if (*currentCharPtr == 0x2a) {\n    counterPtr = counterPtr + 1;\n    counterValue = *counterPtr;\n    counterPtr = counterPtr;\n    if (counterValue < 0) {\n      fieldWidth = -counterValue;\n      modifierFlags = modifierFlags | 2;\n      goto LAB_080094a6;\n    }\n  }\n  else {\n    found = false;\n    counterValue = fieldWidth;\n    inputString = currentCharPtr;\n    while( true ) {\n      if (9 < *inputString - 0x30) break;\n      counterValue = counterValue * 10 + (*inputString - 0x30);\n      found = true;\n      inputString = inputString + 1;\n    }\n    if (!found) goto LAB_080094a6;\n  }\n  fieldWidth = counterValue;\nLAB_080094a6:\n  if (*inputString == 0x2e) {\n    if (inputString[1] == 0x2a) {\n      inputString = inputString + 2;\n      counterPtr = counterPtr + 1;\n      precision = *counterPtr;\n      counterPtr = counterPtr;\n      if (precision < 0) {\n        precision = -1;\n      }\n    }\n    else {\n      found = false;\n      counterValue = 0;\n      precision = 0;\n      while( true ) {\n        inputString = inputString + 1;\n        if (9 < *inputString - 0x30) break;\n        counterValue = counterValue * 10 + (*inputString - 0x30);\n        found = true;\n      }\n      if (found) {\n        precision = counterValue;\n      }\n    }\n  }\n  counterValue = findCharInString(&DAT_0800ab56,*inputString,3);\n  if (counterValue != 0) {\n    inputString = inputString + 1;\n    modifierFlags = modifierFlags | 0x40 << (counterValue + 0xf7ff54aaU & 0xff);\n  }\n  conversionSpecifier = *inputString;\n  inputString = inputString + 1;\n  counterValue = findCharInString(\"efgEFG\",conversionSpecifier,6);\n  if (counterValue == 0) {\n    convertedValue = convertAndFormatValue(inputData,&modifierFlags,formatString,0x8009359,&counterPtr);\n    if (convertedValue == -1) goto LAB_08009568;\n  }\n  else {\n    counterPtr = (int *)(((int)counterPtr + 7U & 0xfffffff8) + 8);\n  }\n  totalChars = totalChars + convertedValue;\n  currentCharPtr = inputString;\n  goto LAB_080093be;\n}\n\n",
            "renaming": {
                "FUN_0800937c": "format_and_count_input_0800937c",
                "param_1": "inputData",
                "param_2": "formatString",
                "param_3": "inputString",
                "param_4": "counter",
                "iVar1": "returnValue",
                "piVar2": "counterPtr",
                "bVar3": "found",
                "pbVar4": "currentCharPtr",
                "pbVar5": "endOfStringPtr",
                "unaff_r9": "convertedValue",
                "iVar6": "counterValue",
                "local_8c": "counterPtr",
                "local_88": "modifierFlags",
                "local_84": "precision",
                "local_80": "width",
                "local_7c": "fieldWidth",
                "local_74": "totalChars",
                "local_70": "conversionSpecifier",
                "local_6f": "charSpace",
                "local_6e": "charPlus",
                "local_45": "flags",
                "local_30": "zeroPadding",
                "initialize_data_08009d50": "initializeData",
                "update_data_08009a80": "updateData",
                "process_and_count_input_08009358": "processAndCountInput",
                "find_char_in_string_08009f2c": "findCharInString",
                "convert_and_format_value_08009698": "convertAndFormatValue"
            },
            "calling": [
                "FUN_080098d8",
                "FUN_08009124"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_08009358",
                "FUN_08009698",
                "FUN_08009f2c",
                "FUN_08009a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080095a8": {
            "entrypoint": "0x080095a8",
            "current_name": "convert_to_readable_format_080095a8",
            "code": "\nundefined4\nconvertToReadableFormat_080095a8(undefined4 inputValue,uint *inputArray,uint *outputValue,undefined4 additionalValue,code *callbackFunction)\n\n{\n  int iterationCount;\n  int callbackResult;\n  uint maxValue;\n  uint newValue;\n  bool isTrue;\n  \n  maxValue = inputArray[4];\n  if ((int)inputArray[4] < (int)inputArray[2]) {\n    maxValue = inputArray[2];\n  }\n  *outputValue = maxValue;\n  if (*(char *)((int)inputArray + 0x43) != '\\0') {\n    *outputValue = maxValue + 1;\n  }\n  if ((int)(*inputArray << 0x1a) < 0) {\n    *outputValue = *outputValue + 2;\n  }\n  if ((*inputArray & 6) == 0) {\n    for (iterationCount = 0; iterationCount < (int)(inputArray[3] - *outputValue); iterationCount = iterationCount + 1) {\n      callbackResult = (*callbackFunction)(inputValue,additionalValue,(int)inputArray + 0x19,1);\n      if (callbackResult == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  maxValue = (uint)*(byte *)((int)inputArray + 0x43);\n  if (maxValue != 0) {\n    maxValue = 1;\n  }\n  newValue = maxValue;\n  if ((int)(*inputArray << 0x1a) < 0) {\n    *(undefined *)((int)inputArray + maxValue + 0x43) = 0x30;\n    newValue = maxValue + 2;\n    *(undefined *)((int)inputArray + maxValue + 0x44) = *(undefined *)((int)inputArray + 0x45);\n  }\n  iterationCount = (*callbackFunction)(inputValue,additionalValue,(int)inputArray + 0x43,newValue);\n  if (iterationCount != -1) {\n    maxValue = inputArray[3];\n    isTrue = (*inputArray & 6) != 4;\n    if (isTrue) {\n      maxValue = 0;\n    }\n    newValue = 0;\n    if (!isTrue) {\n      maxValue = maxValue - *outputValue;\n    }\n    if (!isTrue) {\n      maxValue = maxValue & ~((int)maxValue >> 0x1f);\n    }\n    if ((int)inputArray[4] < (int)inputArray[2]) {\n      maxValue = maxValue + (inputArray[2] - inputArray[4]);\n    }\n    while( true ) {\n      if (maxValue == newValue) {\n        return 0;\n      }\n      iterationCount = (*callbackFunction)(inputValue,additionalValue,(int)inputArray + 0x1a,1);\n      if (iterationCount == -1) break;\n      newValue = newValue + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080095a8": "convert_to_readable_format_080095a8",
                "param_1": "inputValue",
                "param_2": "inputArray",
                "param_3": "outputValue",
                "param_4": "additionalValue",
                "param_5": "callbackFunction",
                "iVar1": "iterationCount",
                "iVar2": "callbackResult",
                "uVar3": "maxValue",
                "uVar4": "newValue",
                "bVar5": "isTrue"
            },
            "calling": [
                "FUN_08009698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009698": {
            "entrypoint": "0x08009698",
            "current_name": "convert_and_format_value_08009698",
            "code": "\nuint convert_and_format_value_08009698(undefined4 value_type,uint *value,undefined4 format_flag,code *format_function,uint **output_ptr)\n\n{\n  byte byte_value;\n  int loop_counter_1;\n  uint *pointer_value;\n  int loop_counter_2;\n  char *hex_chars;\n  uint value_modifier;\n  uint **double_pointer_value;\n  char **double_pointer_char_value;\n  uint result;\n  uint temp_result;\n  char *result_ptr;\n  char *format_option;\n  uint temp_array [2];\n  \n  byte_value = *(byte *)(value + 6);\n  format_option = (char *)((int)value + 0x43);\n  if (byte_value != 0x6e) {\n    if (byte_value < 0x6f) {\n      if (byte_value != 99) {\n        if (byte_value < 100) {\n          if (byte_value == 0) goto LAB_08009852;\n          if (byte_value != 0x58) goto LAB_080096c8;\n          *(undefined *)((int)value + 0x45) = 0x58;\n          hex_chars = \"0123456789ABCDEF\";\nLAB_080097e2:\n          value_modifier = *value;\n          pointer_value = *output_ptr;\n          *output_ptr = pointer_value + 1;\n          if (((value_modifier & 0x80) == 0) && ((int)(value_modifier << 0x19) < 0)) {\n            result = (uint)*(ushort *)pointer_value;\n          }\n          else {\n            result = *pointer_value;\n          }\n          if ((int)(value_modifier << 0x1f) < 0) {\n            *value = value_modifier | 0x20;\n          }\n          if (result == 0) {\n            *value = *value & 0xffffffdf;\n          }\n          value_modifier = 0x10;\nLAB_08009778:\n          *(undefined *)((int)value + 0x43) = 0;\n        }\n        else {\n          if ((byte_value != 100) && (byte_value != 0x69)) goto LAB_080096c8;\n          result = *value;\n          pointer_value = *output_ptr;\n          if ((result & 0x80) == 0) {\n            *output_ptr = pointer_value + 1;\n            if ((result & 0x40) == 0) goto LAB_080096e8;\n            result = (uint)(short)*(ushort *)pointer_value;\n          }\n          else {\n            *output_ptr = pointer_value + 1;\nLAB_080096e8:\n            result = *pointer_value;\n          }\n          if ((int)result < 0) {\n            result = -result;\n            *(undefined *)((int)value + 0x43) = 0x2d;\n          }\n          hex_chars = \"0123456789ABCDEF\";\n          value_modifier = 10;\n        }\n        temp_result = value[1];\n        value[2] = temp_result;\n        result_ptr = format_option;\n        if ((int)temp_result < 0) {\n          if (result != 0) goto LAB_08009816;\nLAB_080098c4:\n          *(char *)((int)value + 0x42) = *hex_chars;\n          result_ptr = (char *)((int)value + 0x42);\n        }\n        else {\n          *value = *value & 0xfffffffb;\n          if (result == 0) {\n            if (temp_result != 0) goto LAB_080098c4;\n          }\n          else {\nLAB_08009816:\n            do {\n              temp_result = result / value_modifier;\n              result_ptr = result_ptr + -1;\n              *result_ptr = hex_chars[result - value_modifier * temp_result];\n              result = temp_result;\n            } while (temp_result != 0);\n          }\n        }\n        if (((value_modifier == 8) && ((int)(*value << 0x1f) < 0)) && ((int)value[1] <= (int)value[4]))\n        {\n          result_ptr[-1] = '0';\n          result_ptr = result_ptr + -1;\n        }\n        value[4] = (int)format_option - (int)result_ptr;\n        format_option = result_ptr;\n        goto LAB_080097be;\n      }\n      pointer_value = *output_ptr;\n      *output_ptr = pointer_value + 1;\n      *(char *)((int)value + 0x42) = (char)*pointer_value;\nLAB_08009728:\n      format_option = (char *)((int)value + 0x42);\n      result = 1;\n    }\n    else {\n      if (byte_value != 0x73) {\n        if (byte_value < 0x74) {\n          if (byte_value == 0x6f) {\nLAB_0800974e:\n            result = *value;\n            pointer_value = *output_ptr;\n            if ((result & 0x80) == 0) {\n              *output_ptr = pointer_value + 1;\n              if ((result & 0x40) == 0) goto LAB_0800975c;\n              result = (uint)*(ushort *)pointer_value;\n            }\n            else {\n              *output_ptr = pointer_value + 1;\nLAB_0800975c:\n              result = *pointer_value;\n            }\n            if (byte_value == 0x6f) {\n              value_modifier = 8;\n            }\n            else {\n              value_modifier = 10;\n            }\n            hex_chars = \"0123456789ABCDEF\";\n            goto LAB_08009778;\n          }\n          if (byte_value == 0x70) {\n            *value = *value | 0x20;\nLAB_0800970e:\n            hex_chars = \"0123456789abcdef\";\n            *(undefined *)((int)value + 0x45) = 0x78;\n            goto LAB_080097e2;\n          }\n        }\n        else {\n          if (byte_value == 0x75) goto LAB_0800974e;\n          if (byte_value == 0x78) goto LAB_0800970e;\n        }\nLAB_080096c8:\n        *(byte *)((int)value + 0x42) = byte_value;\n        goto LAB_08009728;\n      }\n      double_pointer_char_value = (char **)*output_ptr;\n      *output_ptr = (uint *)(double_pointer_char_value + 1);\n      format_option = *double_pointer_char_value;\n      loop_counter_1 = find_char_in_string_08009f2c(format_option,0,value[1]);\n      if (loop_counter_1 != 0) {\n        value[1] = loop_counter_1 - (int)format_option;\n      }\n      result = value[1];\n    }\n    value[4] = result;\n    *(undefined *)((int)value + 0x43) = 0;\n    goto LAB_080097be;\n  }\n  result = *value;\n  double_pointer_value = (uint **)*output_ptr;\n  value_modifier = value[5];\n  if ((result & 0x80) == 0) {\n    *output_ptr = (uint *)(double_pointer_value + 1);\n    pointer_value = *double_pointer_value;\n    if ((result & 0x40) == 0) goto LAB_0800983e;\n    *(short *)pointer_value = (short)value_modifier;\n  }\n  else {\n    *output_ptr = (uint *)(double_pointer_value + 1);\n    pointer_value = *double_pointer_value;\nLAB_0800983e:\n    *pointer_value = value_modifier;\n  }\nLAB_08009852:\n  value[4] = 0;\nLAB_080097be:\n  loop_counter_1 = convert_to_readable_format_080095a8(value_type,value,temp_array,format_flag,format_function);\n  if ((loop_counter_1 == -1) || (loop_counter_1 = (*format_function)(value_type,format_flag,format_option,value[4]), loop_counter_1 == -1)) {\nLAB_080097d2:\n    result = 0xffffffff;\n  }\n  else {\n    if ((int)(*value << 0x1e) < 0) {\n      for (loop_counter_1 = 0; loop_counter_1 < (int)(value[3] - temp_array[0]); loop_counter_1 = loop_counter_1 + 1) {\n        loop_counter_2 = (*format_function)(value_type,format_flag,(int)value + 0x19,1);\n        if (loop_counter_2 == -1) goto LAB_080097d2;\n      }\n    }\n    result = value[3];\n    if ((int)value[3] < (int)temp_array[0]) {\n      result = temp_array[0];\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009698": "convert_and_format_value_08009698",
                "param_1": "value_type",
                "param_2": "value",
                "param_3": "format_flag",
                "param_4": "format_function",
                "param_5": "output_ptr",
                "bVar1": "byte_value",
                "iVar2": "loop_counter_1",
                "puVar3": "pointer_value",
                "iVar4": "loop_counter_2",
                "pcVar5": "hex_chars",
                "uVar6": "value_modifier",
                "uVar9": "result",
                "uVar10": "temp_result",
                "pcVar11": "result_ptr",
                "pcVar12": "format_option",
                "local_24": "temp_array",
                "ppuVar7": "double_pointer_value",
                "ppcVar8": "double_pointer_char_value"
            },
            "calling": [
                "FUN_0800937c"
            ],
            "called": [
                "FUN_080095a8",
                "FUN_08009f2c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098d8": {
            "entrypoint": "0x080098d8",
            "current_name": "initialize_and_format_input_080098d8",
            "code": "\nvoid initializeAndFormatInput_080098d8(undefined4 inputBuffer,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int dataAddress;\n  undefined4 param1Copy;\n  undefined4 param2Copy;\n  undefined4 param3Copy;\n  undefined4 param4Copy;\n  \n  dataAddress = DAT_20000090;\n  param1Copy = inputBuffer;\n  param2Copy = param2;\n  param3Copy = param3;\n  param4Copy = param4;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    initialize_data_08009d50(DAT_20000090);\n  }\n  format_and_count_input_0800937c(dataAddress,*(undefined4 *)(dataAddress + 8),inputBuffer,&param2Copy,param1Copy,&param2Copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080098d8": "initialize_and_format_input_080098d8",
                "param_1": "inputBuffer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "dataAddress",
                "uVar2": "param1Copy",
                "uStack_c": "param2Copy",
                "uStack_8": "param3Copy",
                "uStack_4": "param4Copy"
            },
            "calling": [
                "FUN_080075dc",
                "FUN_08007594",
                "FUN_080077b0",
                "FUN_08007544",
                "FUN_08008078"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_0800937c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009908": {
            "entrypoint": "0x08009908",
            "current_name": "allocate_and_assign_memory_08009908",
            "code": "\nint allocateAndAssignMemory_08009908(int size1,uint size2)\n\n{\n  undefined4 dataPointer;\n  int result;\n  uint calculatedResult;\n  \n  dataPointer = DAT_20000090;\n  if (size1 != 0) {\n    if (size2 == 0) {\n      update_list_080091d8();\n      result = 0;\n    }\n    else {\n      calculatedResult = calculate_result_0800a154();\n      result = size1;\n      if ((calculatedResult < size2) && (result = allocate_and_assign_memory_08009270(dataPointer,size2), result != 0)) {\n        copy_data_to_buffer_080091b0(result,size1,size2);\n        update_list_080091d8(dataPointer,size1);\n      }\n    }\n    return result;\n  }\n  result = allocate_and_assign_memory_08009270(DAT_20000090,size2,size2,&DAT_20000090);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009908": "allocate_and_assign_memory_08009908",
                "param_1": "size1",
                "param_2": "size2",
                "uVar1": "dataPointer",
                "iVar2": "result",
                "uVar3": "calculatedResult"
            },
            "calling": [
                "FUN_080027f0",
                "FUN_08002acc",
                "FUN_0800288c"
            ],
            "called": [
                "FUN_0800a154",
                "FUN_080091b0",
                "FUN_08009270",
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009918": {
            "entrypoint": "0x08009918",
            "current_name": "allocate_and_assign_memory_08009918",
            "code": "\nvoid allocateAndAssignMemory_08009918(int *outputPointer,undefined4 memorySize)\n\n{\n  int allocationResult;\n  \n  DAT_20000a38 = 0;\n  allocationResult = allocate_memory_08008804(memorySize);\n  if ((allocationResult == -1) && (DAT_20000a38 != 0)) {\n    *outputPointer = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009918": "allocate_and_assign_memory_08009918",
                "param_1": "outputPointer",
                "param_2": "memorySize",
                "iVar1": "allocationResult"
            },
            "calling": [
                "FUN_08009270"
            ],
            "called": [
                "FUN_08008804"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009938": {
            "entrypoint": "0x08009938",
            "current_name": "find_character_08009938",
            "code": "\nchar * find_character_08009938(char *string,char character)\n\n{\n  char *current_char;\n  \n  do {\n    current_char = string;\n    if (*current_char == '\\0') {\n      if (character != '\\0') {\n        current_char = (char *)0x0;\n      }\n      return current_char;\n    }\n    string = current_char + 1;\n  } while (character != *current_char);\n  return current_char;\n}\n\n",
            "renaming": {
                "FUN_08009938": "find_character_08009938",
                "param_1": "string",
                "param_2": "character",
                "pcVar1": "current_char"
            },
            "calling": [
                "FUN_0800997e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009954": {
            "entrypoint": "0x08009954",
            "current_name": "copy_string_08009954",
            "code": "\nvoid copyString_08009954(char *destination,char *source,int length)\n\n{\n  char currentChar;\n  int remainingLength;\n  char *destPtr;\n  \n  do {\n    destPtr = destination;\n    remainingLength = length;\n    if (remainingLength == 0) {\n      return;\n    }\n    currentChar = *source;\n    destination = destPtr + 1;\n    *destPtr = currentChar;\n    source = source + 1;\n    length = remainingLength + -1;\n  } while (currentChar != '\\0');\n  for (; destination != destPtr + remainingLength; destination = destination + 1) {\n    *destination = '\\0';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009954": "copy_string_08009954",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "cVar1": "currentChar",
                "iVar2": "remainingLength",
                "pcVar3": "destPtr"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800997e": {
            "entrypoint": "0x0800997e",
            "current_name": "find_last_occurrence_0800997e",
            "code": "\nint find_last_occurrence_0800997e(int string,int length,undefined4 char,undefined4 exit_char)\n\n{\n  int occurrence;\n  int last_occurrence;\n  \n  if (length != 0) {\n    last_occurrence = 0;\n    while (occurrence = find_character_08009938(string,length,char,string,exit_char), occurrence != 0) {\n      string = occurrence + 1;\n      last_occurrence = occurrence;\n    }\n    return last_occurrence;\n  }\n  last_occurrence = find_character_08009938();\n  return last_occurrence;\n}\n\n",
            "renaming": {
                "FUN_0800997e": "find_last_occurrence_0800997e",
                "param_1": "string",
                "param_2": "length",
                "param_3": "char",
                "param_4": "exit_char",
                "iVar1": "occurrence",
                "iVar2": "last_occurrence"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [
                "FUN_08009938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080099a4": {
            "entrypoint": "0x080099a4",
            "current_name": "find_substring_080099a4",
            "code": "\nchar * find_substring_080099a4(char *string1,char *string2)\n\n{\n  char *current_char_str1;\n  char *current_char_str2;\n  char *current_char_str2_copy;\n  \n  if (*string1 == '\\0') {\n    if (*string2 != '\\0') {\n      string1 = (char *)0x0;\n    }\n    return string1;\n  }\n  do {\n    current_char_str1 = string1;\n    if (*current_char_str1 == '\\0') {\n      return (char *)0x0;\n    }\n    current_char_str2_copy = string2 + -1;\n    current_char_str2 = current_char_str1 + -1;\n    do {\n      current_char_str2_copy = current_char_str2_copy + 1;\n      if (*current_char_str2_copy == '\\0') {\n        return current_char_str1;\n      }\n      current_char_str2 = current_char_str2 + 1;\n      string1 = current_char_str1 + 1;\n    } while (*current_char_str2 == *current_char_str2_copy);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080099a4": "find_substring_080099a4",
                "param_1": "string1",
                "param_2": "string2",
                "pcVar1": "current_char_str1",
                "pcVar2": "current_char_str2",
                "pcVar3": "current_char_str2_copy"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009a80": {
            "entrypoint": "0x08009a80",
            "current_name": "update_data_08009a80",
            "code": "\nuint updateData_08009a80(undefined4 *outputData,undefined4 *inputData)\n\n{\n  int baseAddress;\n  uint value;\n  ushort flags;\n  \n  baseAddress = DAT_20000090;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    initialize_data_08009d50(DAT_20000090);\n  }\n  if (inputData == &DAT_0800aba4) {\n    inputData = *(undefined4 **)(baseAddress + 4);\n  }\n  else if (inputData == (undefined4 *)&DAT_0800abc4) {\n    inputData = *(undefined4 **)(baseAddress + 8);\n  }\n  else if (inputData == (undefined4 *)&DAT_0800ab84) {\n    inputData = *(undefined4 **)(baseAddress + 0xc);\n  }\n  flags = *(ushort *)(inputData + 3);\n  value = (uint)flags;\n  if (-1 < (int)(value << 0x1c)) {\n    if (-1 < (int)(value << 0x1b)) {\n      *outputData = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(value << 0x1d) < 0) {\n      if ((undefined4 *)inputData[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)inputData[0xd] != inputData + 0x11) {\n          update_list_080091d8(outputData);\n        }\n        inputData[0xd] = 0;\n      }\n      *(ushort *)(inputData + 3) = *(ushort *)(inputData + 3) & 0xffdb;\n      inputData[1] = 0;\n      *inputData = inputData[4];\n    }\n    *(ushort *)(inputData + 3) = *(ushort *)(inputData + 3) | 8;\n  }\n  if ((inputData[4] == 0) && ((*(ushort *)(inputData + 3) & 0x280) != 0x200)) {\n    initialize_and_check_08009eac(outputData,inputData);\n  }\n  flags = *(ushort *)(inputData + 3);\n  value = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      value = inputData[5];\n    }\n    inputData[2] = value;\n  }\n  else {\n    inputData[2] = 0;\n    inputData[6] = -inputData[5];\n  }\n  if (inputData[4] == 0) {\n    flags = *(ushort *)(inputData + 3);\n    value = (int)(short)flags & 0x80;\n    if (value != 0) {\nLAB_08009ab0:\n      *(ushort *)(inputData + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    value = 0;\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_08009a80": "update_data_08009a80",
                "param_1": "outputData",
                "param_2": "inputData",
                "iVar1": "baseAddress",
                "uVar2": "value",
                "uVar3": "flags"
            },
            "calling": [
                "FUN_0800937c",
                "FUN_0800932c"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_08009eac",
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nuint FUN_08009a80(undefined4 *param_1,undefined4 *param_2)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  \n  iVar1 = DAT_20000090;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    FUNC_08009d50(DAT_20000090);\n  }\n  if (param_2 == &DAT_0800aba4) {\n    param_2 = *(undefined4 **)(iVar1 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_0800abc4) {\n    param_2 = *(undefined4 **)(iVar1 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_0800ab84) {\n    param_2 = *(undefined4 **)(iVar1 + 0xc);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = (uint)uVar3;\n  if (-1 < (int)(uVar2 << 0x1c)) {\n    if (-1 < (int)(uVar2 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(uVar2 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          update_list_080091d8(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    initialize_and_check_08009eac(param_1,param_2);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = uVar3 & 1;\n  if ((uVar3 & 1) == 0) {\n    if (-1 < (int)((uint)uVar3 << 0x1e)) {\n      uVar2 = param_2[5];\n    }\n    param_2[2] = uVar2;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar2 = (int)(short)uVar3 & 0x80;\n    if (uVar2 != 0) {\nLAB_08009ab0:\n      *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar2 = 0;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_08009b5c": {
            "entrypoint": "0x08009b5c",
            "current_name": "process_and_execute_command_08009b5c",
            "code": "\nvoid processAndExecuteCommand_08009b5c(void)\n\n{\n  uint *commandArguments;\n  int commandResult;\n  int *commandState;\n  int *tempCommandState;\n  uint tempVar;\n  ushort commandFlags;\n  int tempVar2;\n  code *commandHandler;\n  int loopCounter;\n  uint tempVar3;\n  code *jumpTable;\n  bool isVar11True;\n  undefined8 infiniteLoopResult;\n  \n  process_input_08009fe8(6);\n  jumpTable = (code *)0x8009b6b;\n  infiniteLoopResult = infinite_loop_08008868(1);\n  commandState = (int *)((ulonglong)infiniteLoopResult >> 0x20);\n  commandArguments = (uint *)infiniteLoopResult;\n  commandFlags = *(ushort *)(commandState + 3);\n  tempVar = (uint)commandFlags;\n  if ((int)(tempVar << 0x1c) < 0) {\n    commandResult = commandState[4];\n    if (commandResult != 0) {\n      tempVar2 = tempVar << 0x1e;\n      isVar11True = tempVar2 != 0;\n      if (isVar11True) {\n        tempVar2 = 0;\n      }\n      loopCounter = *commandState;\n      if (!isVar11True) {\n        tempVar2 = commandState[5];\n      }\n      *commandState = commandResult;\n      commandState[2] = tempVar2;\n      for (loopCounter = loopCounter - commandResult; 0 < loopCounter; loopCounter = loopCounter - tempVar2) {\n        tempVar2 = (*(code *)commandState[10])(commandArguments,commandState[8],commandResult,loopCounter);\n        if (tempVar2 < 1) {\n          commandFlags = *(ushort *)(commandState + 3);\n          goto LAB_08009c62;\n        }\n        commandResult = commandResult + tempVar2;\n      }\n    }\n  }\n  else if (((0 < commandState[1]) || (0 < commandState[0x10])) &&\n          (commandHandler = (code *)commandState[0xb], commandHandler != (code *)0x0)) {\n    tempVar3 = *commandArguments;\n    *commandArguments = 0;\n    if ((commandFlags & 0x1000) == 0) {\n      commandResult = (*commandHandler)(commandArguments,commandState[8],tempVar & 0x1000,1);\n      if ((commandResult == -1) && (tempVar = *commandArguments, tempVar != 0)) {\n        if ((tempVar != 0x1d) && (tempVar != 0x16)) {\n          *(ushort *)(commandState + 3) = *(ushort *)(commandState + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*jumpTable)();\n          return;\n        }\n        *commandArguments = tempVar3;\n        goto LAB_08009b86;\n      }\n    }\n    else {\n      commandResult = commandState[0x15];\n    }\n    if (((int)((uint)*(ushort *)(commandState + 3) << 0x1d) < 0) &&\n       (commandResult = commandResult - commandState[1], commandState[0xd] != 0)) {\n      commandResult = commandResult - commandState[0x10];\n    }\n    commandResult = (*(code *)commandState[0xb])(commandArguments,commandState[8],commandResult,0);\n    commandFlags = *(ushort *)(commandState + 3);\n    if ((commandResult == -1) &&\n       ((0x1d < *commandArguments || (-1 < (int)((0x20400001U >> (*commandArguments & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n      *(ushort *)(commandState + 3) = commandFlags | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTable)(0xffffffff);\n      return;\n    }\n    commandState[1] = 0;\n    *commandState = commandState[4];\n    if (((int)((uint)commandFlags << 0x13) < 0) && ((commandResult != -1 || (*commandArguments == 0)))) {\n      commandState[0x15] = commandResult;\n    }\n    tempCommandState = (int *)commandState[0xd];\n    *commandArguments = tempVar3;\n    if (tempCommandState != (int *)0x0) {\n      if (tempCommandState != commandState + 0x11) {\n        update_list_080091d8(commandArguments);\n      }\n      commandState[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTable)();\n      return;\n    }\n  }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009b5c": "process_and_execute_command_08009b5c",
                "puVar1": "commandArguments",
                "iVar2": "commandResult",
                "piVar3": "commandState",
                "piVar4": "tempCommandState",
                "uVar5": "tempVar",
                "uVar6": "commandFlags",
                "iVar7": "tempVar2",
                "pcVar8": "commandHandler",
                "iVar9": "loopCounter",
                "uVar10": "tempVar3",
                "UNRECOVERED_JUMPTABLE_00": "jumpTable",
                "bVar11": "isVar11True",
                "uVar12": "infiniteLoopResult"
            },
            "calling": [
                "FUN_080090cc",
                "FUN_0800a18c"
            ],
            "called": [
                "FUN_08009fe8",
                "FUN_08008868",
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009c7c": {
            "entrypoint": "0x08009c7c",
            "current_name": "process_data_08009c7c",
            "code": "\nundefined4 processData_08009c7c(uint *dataArray,int *infoArray)\n\n{\n  undefined4 result;\n  int offset;\n  int *ptr;\n  uint value;\n  ushort flag;\n  int tempVar;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  code *callback;\n  int length;\n  uint tempValue;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (infoArray[4] != 0) {\n    if ((dataArray != (uint *)0x0) && (dataArray[6] == 0)) {\n      initialize_data_08009d50();\n    }\n    if (infoArray == &DAT_0800aba4) {\n      infoArray = (int *)dataArray[1];\n    }\n    else if (infoArray == (int *)&DAT_0800abc4) {\n      infoArray = (int *)dataArray[2];\n    }\n    else if (infoArray == (int *)&DAT_0800ab84) {\n      infoArray = (int *)dataArray[3];\n    }\n    if (*(short *)(infoArray + 3) != 0) {\n      flag = *(ushort *)(infoArray + 3);\n      value = (uint)flag;\n      if ((int)(value << 0x1c) < 0) {\n        offset = infoArray[4];\n        if (offset != 0) {\n          tempVar = value << 0x1e;\n          bVar10 = tempVar != 0;\n          if (bVar10) {\n            tempVar = 0;\n          }\n          length = *infoArray;\n          if (!bVar10) {\n            tempVar = infoArray[5];\n          }\n          *infoArray = offset;\n          infoArray[2] = tempVar;\n          for (length = length - offset; 0 < length; length = length - tempVar) {\n            tempVar = (*(code *)infoArray[10])(dataArray,infoArray[8],offset,length,tempVar1,tempVar2);\n            if (tempVar < 1) {\n              flag = *(ushort *)(infoArray + 3);\n              goto LAB_08009c62;\n            }\n            offset = offset + tempVar;\n          }\n        }\n      }\n      else if (((0 < infoArray[1]) || (0 < infoArray[0x10])) &&\n              (callback = (code *)infoArray[0xb], callback != (code *)0x0)) {\n        tempValue = *dataArray;\n        *dataArray = 0;\n        if ((flag & 0x1000) == 0) {\n          offset = (*callback)(dataArray,infoArray[8],value & 0x1000,1);\n          if ((offset == -1) && (value = *dataArray, value != 0)) {\n            if ((value != 0x1d) && (value != 0x16)) {\n              *(ushort *)(infoArray + 3) = *(ushort *)(infoArray + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              result = (*UNRECOVERED_JUMPTABLE_00)();\n              return result;\n            }\n            *dataArray = tempValue;\n            goto LAB_08009b86;\n          }\n        }\n        else {\n          offset = infoArray[0x15];\n        }\n        if (((int)((uint)*(ushort *)(infoArray + 3) << 0x1d) < 0) &&\n           (offset = offset - infoArray[1], infoArray[0xd] != 0)) {\n          offset = offset - infoArray[0x10];\n        }\n        offset = (*(code *)infoArray[0xb])(dataArray,infoArray[8],offset,0);\n        flag = *(ushort *)(infoArray + 3);\n        if ((offset == -1) &&\n           ((0x1d < *dataArray || (-1 < (int)((0x20400001U >> (*dataArray & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n          *(ushort *)(infoArray + 3) = flag | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          result = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return result;\n        }\n        infoArray[1] = 0;\n        *infoArray = infoArray[4];\n        if (((int)((uint)flag << 0x13) < 0) && ((offset != -1 || (*dataArray == 0)))) {\n          infoArray[0x15] = offset;\n        }\n        ptr = (int *)infoArray[0xd];\n        *dataArray = tempValue;\n        if (ptr != (int *)0x0) {\n          if (ptr != infoArray + 0x11) {\n            update_list_080091d8(dataArray);\n          }\n          infoArray[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          result = (*UNRECOVERED_JUMPTABLE_00)();\n          return result;\n        }\n      }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      result = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009c7c": "process_data_08009c7c",
                "param_1": "dataArray",
                "param_2": "infoArray",
                "uVar1": "result",
                "iVar2": "offset",
                "piVar3": "ptr",
                "uVar4": "value",
                "uVar5": "flag",
                "iVar6": "tempVar",
                "unaff_r4": "tempVar1",
                "unaff_r5": "tempVar2",
                "pcVar7": "callback",
                "iVar8": "length",
                "uVar9": "tempValue"
            },
            "calling": [
                "FUN_0800932c"
            ],
            "called": [
                "FUN_08009d50"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_08009c7c(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_08009d50();\n    }\n    if (param_2 == &DAT_0800aba4) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)&DAT_0800abc4) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)&DAT_0800ab84) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 != 0;\n          if (bVar10) {\n            iVar6 = 0;\n          }\n          iVar8 = *param_2;\n          if (!bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_08009c62;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_08009b86;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((0x20400001U >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            update_list_080091d8(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_08009cdc": {
            "entrypoint": "0x08009cdc",
            "current_name": "initialize_data_structure_08009cdc",
            "code": "\nvoid initializeDataStructure_08009cdc(undefined4 *dataStructure,undefined2 value1,undefined2 value2)\n\n{\n  *dataStructure = 0;\n  dataStructure[1] = 0;\n  dataStructure[2] = 0;\n  *(undefined2 *)(dataStructure + 3) = value1;\n  dataStructure[0x19] = 0;\n  *(undefined2 *)((int)dataStructure + 0xe) = value2;\n  dataStructure[4] = 0;\n  dataStructure[5] = 0;\n  dataStructure[6] = 0;\n  fillMemory(dataStructure + 0x17,0,8);\n  dataStructure[8] = dataStructure;\n  dataStructure[9] = 0x800a021;\n  dataStructure[10] = 0x800a043;\n  dataStructure[0xb] = 0x800a07b;\n  dataStructure[0xc] = &label1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009cdc": "initialize_data_structure_08009cdc",
                "param_1": "dataStructure",
                "param_2": "value1",
                "param_3": "value2",
                "fill_memory_080091c6": "fillMemory",
                "LAB_0800a09e_1": "label1"
            },
            "calling": [
                "FUN_08009d50"
            ],
            "called": [
                "FUN_080091c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d24": {
            "entrypoint": "0x08009d24",
            "current_name": "initialize_memory_08009d24",
            "code": "\nundefined4 * initializeMemory_08009d24(undefined4 memoryArray,int size)\n\n{\n  undefined4 *memoryPtr;\n  int offset;\n  \n  offset = (size + -1) * 0x68;\n  memoryPtr = (undefined4 *)allocate_and_assign_memory_08009270(memoryArray,offset + 0x74);\n  if (memoryPtr != (undefined4 *)0x0) {\n    *memoryPtr = 0;\n    memoryPtr[1] = size;\n    memoryPtr[2] = memoryPtr + 3;\n    fill_memory_080091c6(memoryPtr + 3,0,offset + 0x68);\n  }\n  return memoryPtr;\n}\n\n",
            "renaming": {
                "FUN_08009d24": "initialize_memory_08009d24",
                "param_1": "memoryArray",
                "param_2": "size",
                "puVar1": "memoryPtr",
                "iVar2": "offset"
            },
            "calling": [
                "FUN_08009db0"
            ],
            "called": [
                "FUN_080091c6",
                "FUN_08009270"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d50": {
            "entrypoint": "0x08009d50",
            "current_name": "initialize_data_08009d50",
            "code": "\nvoid initialize_data_08009d50(undefined4 *parameters)\n\n{\n  undefined4 status;\n  undefined4 *flag_ptr;\n  \n  if (parameters[6] == 0) {\n    parameters[0x12] = 0;\n    parameters[0x13] = 0;\n    parameters[0x14] = 0;\n    flag_ptr = &DAT_20000094;\n    parameters[10] = &LAB_08009cd0_1;\n    if (parameters == &DAT_20000094) {\n      flag_ptr = (undefined4 *)0x1;\n    }\n    if (parameters == &DAT_20000094) {\n      parameters[6] = flag_ptr;\n    }\n    status = initialize_and_fill_08009db0();\n    parameters[1] = status;\n    status = initialize_and_fill_08009db0(parameters);\n    parameters[2] = status;\n    status = initialize_and_fill_08009db0(parameters);\n    parameters[3] = status;\n    initialize_data_08009d50_structure_08009cdc(parameters[1],4,0);\n    initialize_data_08009d50_structure_08009cdc(parameters[2],9,1);\n    initialize_data_08009d50_structure_08009cdc(parameters[3],0x12,2);\n    parameters[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009d50": "initialize_data_08009d50",
                "param_1": "parameters",
                "uVar1": "status",
                "puVar2": "flag_ptr"
            },
            "calling": [
                "FUN_0800937c",
                "FUN_08009db0",
                "FUN_080098d8",
                "FUN_08009a80",
                "FUN_0800932c",
                "FUN_08009c7c"
            ],
            "called": [
                "FUN_08009cdc",
                "FUN_08009db0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009db0": {
            "entrypoint": "0x08009db0",
            "current_name": "initialize_and_fill_08009db0",
            "code": "\nint * initialize_and_fill_08009db0(undefined4 *result_code,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *pointer_1;\n  int *pointer_2;\n  int **pointer_to_pointer;\n  \n  if (DAT_200000ac == 0) {\n    initialize_data_08009d50(&DAT_20000094);\n  }\n  pointer_to_pointer = (int **)&DAT_200000dc;\n  do {\n    pointer_2 = pointer_to_pointer[2];\n    pointer_1 = pointer_to_pointer[1];\n    while (pointer_1 = (int *)((int)pointer_1 + -1), -1 < (int)pointer_1) {\n      if (*(short *)(pointer_2 + 3) == 0) {\n        *(undefined2 *)((int)pointer_2 + 0xe) = 0xffff;\n        pointer_2[0x19] = 0;\n        *(undefined2 *)(pointer_2 + 3) = 1;\n        *pointer_2 = 0;\n        pointer_2[2] = 0;\n        pointer_2[1] = 0;\n        pointer_2[4] = 0;\n        pointer_2[5] = 0;\n        pointer_2[6] = 0;\n        fill_memory(pointer_2 + 0x17,0,8,1,param_4);\n        pointer_2[0xd] = 0;\n        pointer_2[0xe] = 0;\n        pointer_2[0x12] = 0;\n        pointer_2[0x13] = 0;\n        return pointer_2;\n      }\n      pointer_2 = pointer_2 + 0x1a;\n    }\n    if (*pointer_to_pointer == (int *)0x0) {\n      pointer_1 = (int *)initialize_memory(result_code,4);\n      *pointer_to_pointer = pointer_1;\n      if (pointer_1 == (int *)0x0) {\n        *result_code = 0xc;\n        return (int *)0x0;\n      }\n    }\n    pointer_to_pointer = (int **)*pointer_to_pointer;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08009db0": "initialize_and_fill_08009db0",
                "param_1": "result_code",
                "piVar1": "pointer_1",
                "piVar2": "pointer_2",
                "ppiVar3": "pointer_to_pointer",
                "fill_memory_080091c6": "fill_memory",
                "initialize_memory_08009d24": "initialize_memory"
            },
            "calling": [
                "FUN_08009d50"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_080091c6",
                "FUN_08009d24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint * FUN_08009db0(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int **ppiVar3;\n  \n  if (DAT_200000ac == 0) {\n    FUNC_08009d50(&DAT_20000094);\n  }\n  ppiVar3 = (int **)&DAT_200000dc;\n  do {\n    piVar2 = ppiVar3[2];\n    piVar1 = ppiVar3[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        piVar2[0x19] = 0;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_memory_080091c6(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar3 == (int *)0x0) {\n      piVar1 = (int *)initialize_memory_08009d24(param_1,4);\n      *ppiVar3 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar3 = (int **)*ppiVar3;\n  } while( true );\n}\n\n"
        },
        "FUN_08009e64": {
            "entrypoint": "0x08009e64",
            "current_name": "initialize_and_check_memory_08009e64",
            "code": "\nundefined4 initialize_and_check_memory_08009e64(undefined4 input_param,int memory_info,undefined4 *output_param,uint *memory_flag)\n\n{\n  int result;\n  undefined4 flag_value;\n  undefined temp_variable [4];\n  uint memory_permission;\n  \n  if ((*(short *)(memory_info + 0xe) < 0) ||\n     (result = initialize_memory_0800a0ec(input_param,(int)*(short *)(memory_info + 0xe),temp_variable), result < 0)) {\n    *memory_flag = 0;\n    if ((int)((uint)*(ushort *)(memory_info + 0xc) << 0x18) < 0) {\n      flag_value = 0x40;\n      goto LAB_08009ea4;\n    }\n  }\n  else {\n    *memory_flag = (uint)((memory_permission & 0xf000) == 0x2000);\n  }\n  flag_value = 0x400;\nLAB_08009ea4:\n  *output_param = flag_value;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009e64": "initialize_and_check_memory_08009e64",
                "param_1": "input_param",
                "param_2": "memory_info",
                "param_3": "output_param",
                "param_4": "memory_flag",
                "auStack_4c": "temp_variable",
                "local_48": "memory_permission",
                "iVar1": "result",
                "uVar2": "flag_value"
            },
            "calling": [
                "FUN_08009eac"
            ],
            "called": [
                "FUN_0800a0ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009eac": {
            "entrypoint": "0x08009eac",
            "current_name": "initialize_and_check_08009eac",
            "code": "\nvoid initialize_and_check_08009eac(int base_address,int *data_array)\n\n{\n  ushort result;\n  int allocation_result;\n  int local_variable_1;\n  int *local_variable_2;\n  \n  if (-1 < (int)((uint)*(ushort *)(data_array + 3) << 0x1e)) {\n    local_variable_1 = base_address;\n    local_variable_2 = data_array;\n    result = initialize_and_check_08009eac_memory_08009e64(base_address,data_array,&local_variable_1,&local_variable_2);\n    allocation_result = allocate_and_assign_memory_08009270(base_address,local_variable_1);\n    if (allocation_result != 0) {\n      *(undefined **)(base_address + 0x28) = &LAB_08009cd0_1;\n      *data_array = allocation_result;\n      *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) | 0x80;\n      data_array[4] = allocation_result;\n      data_array[5] = local_variable_1;\n      if ((local_variable_2 != (int *)0x0) &&\n         (allocation_result = initialize_program_0800a110(base_address,(int)*(short *)((int)data_array + 0xe)), allocation_result != 0)) {\n        *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(data_array + 3) = result | *(ushort *)(data_array + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(data_array + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) & 0xfffc | 2;\n  }\n  *data_array = (int)data_array + 0x47;\n  data_array[4] = (int)data_array + 0x47;\n  data_array[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009eac": "initialize_and_check_08009eac",
                "param_1": "base_address",
                "param_2": "data_array",
                "uVar1": "result",
                "iVar2": "allocation_result",
                "local_18": "local_variable_1",
                "local_14": "local_variable_2"
            },
            "calling": [
                "FUN_08009a80"
            ],
            "called": [
                "FUN_0800a110",
                "FUN_08009e64",
                "FUN_08009270"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009f2c": {
            "entrypoint": "0x08009f2c",
            "current_name": "find_char_in_string_08009f2c",
            "code": "\nchar * find_char_in_string_08009f2c(char *string,char character,int length)\n\n{\n  char *current_char;\n  char *next_char;\n  \n  current_char = string;\n  do {\n    next_char = current_char;\n    if (next_char == string + length) {\n      return (char *)0x0;\n    }\n    current_char = next_char + 1;\n  } while (*next_char != character);\n  return next_char;\n}\n\n",
            "renaming": {
                "FUN_08009f2c": "find_char_in_string_08009f2c",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "current_char",
                "pcVar2": "next_char"
            },
            "calling": [
                "FUN_0800937c",
                "FUN_08009698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009f48": {
            "entrypoint": "0x08009f48",
            "current_name": "FUNC_08009f48",
            "code": "\nvoid FUNC_08009f48(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009f48": "FUNC_08009f48"
            },
            "calling": [
                "FUN_08009270",
                "FUN_080091d8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009f4a": {
            "entrypoint": "0x08009f4a",
            "current_name": "FUNC_08009f4a",
            "code": "\nvoid FUNC_08009f4a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009f4a": "FUNC_08009f4a"
            },
            "calling": [
                "FUN_08009270",
                "FUN_080091d8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009fe8": {
            "entrypoint": "0x08009fe8",
            "current_name": "process_input_08009fe8",
            "code": "\nint processInput_08009fe8(uint input)\n\n{\n  int *dataPtr;\n  undefined4 returnValue;\n  int value;\n  code *functionPtr;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined4 tempVar3;\n  undefined4 *dataPtrPointer;\n  \n  dataPtr = DAT_20000090;\n  dataPtrPointer = &DAT_20000090;\n  if (0x1f < input) {\n    *DAT_20000090 = 0x16;\n    return -1;\n  }\n  value = DAT_20000090[0x11];\n  if ((value != 0) && (functionPtr = *(code **)(value + input * 4), functionPtr != (code *)0x0)) {\n    if (functionPtr != (code *)0x1) {\n      if (functionPtr == (code *)0xffffffff) {\n        *DAT_20000090 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(value + input * 4) = 0;\n      (*functionPtr)(input);\n    }\n    return 0;\n  }\n  returnValue = thunk_initialize_return_value_0800887c(DAT_20000090);\n  DAT_20000a38 = 0;\n  value = initialize_data_0800886c(returnValue,input,input,0,dataPtrPointer,tempVar1,tempVar2,tempVar3);\n  if ((value == -1) && (DAT_20000a38 != 0)) {\n    *dataPtr = DAT_20000a38;\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_08009fe8": "process_input_08009fe8",
                "param_1": "input",
                "piVar1": "dataPtr",
                "uVar2": "returnValue",
                "iVar3": "value",
                "pcVar4": "functionPtr",
                "unaff_r4": "tempVar1",
                "unaff_r5": "tempVar2",
                "in_lr": "tempVar3",
                "puVar5": "dataPtrPointer"
            },
            "calling": [
                "FUN_08009b5c"
            ],
            "called": [
                "FUN_0800886c",
                "thunk_FUN_0800887c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0800887c": {
            "entrypoint": "0x0800a01c",
            "current_name": "get_return_value_thunk_0800887c",
            "code": "\nReturnValue getReturnValue_thunk_0800887c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800887c": "get_return_value_thunk_0800887c",
                "undefined4": "ReturnValue"
            },
            "calling": [
                "FUN_08009fe8"
            ],
            "called": [
                "FUN_0800887c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a020": {
            "entrypoint": "0x0800a020",
            "current_name": "update_application_data_0800a020",
            "code": "\nvoid updateApplicationData_0800a020(undefined4 applicationData,int binaryData)\n\n{\n  int applicationResult;\n  uint updatedValue;\n  bool isInitialized;\n  \n  applicationResult = initialize_application_0800a168(applicationData,(int)*(short *)(binaryData + 0xe));\n  isInitialized = -1 < applicationResult;\n  if (isInitialized) {\n    updatedValue = *(int *)(binaryData + 0x54) + applicationResult;\n  }\n  else {\n    updatedValue = *(ushort *)(binaryData + 0xc) & 0xffffefff;\n  }\n  if (isInitialized) {\n    *(uint *)(binaryData + 0x54) = updatedValue;\n  }\n  if (!isInitialized) {\n    *(short *)(binaryData + 0xc) = (short)updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a020": "update_application_data_0800a020",
                "param_1": "applicationData",
                "param_2": "binaryData",
                "iVar1": "applicationResult",
                "uVar2": "updatedValue",
                "bVar3": "isInitialized"
            },
            "calling": [],
            "called": [
                "FUN_0800a168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a042": {
            "entrypoint": "0x0800a042",
            "current_name": "process_and_set_param_0800a042",
            "code": "\nvoid processAndSetParam_0800a042(int *outputParam,int inputParam,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  undefined4 unusedVar1;\n  undefined4 unusedVar2;\n  undefined4 unusedVar3;\n  \n  if ((int)((uint)*(ushort *)(inputParam + 0xc) << 0x17) < 0) {\n    initialize_and_set_param_0800a130(outputParam,(int)*(short *)(inputParam + 0xe),0,2);\n  }\n  *(ushort *)(inputParam + 0xc) = *(ushort *)(inputParam + 0xc) & 0xefff;\n  DAT_20000a38 = 0;\n  result = process_with_delay_0800885c((int)*(short *)(inputParam + 0xe),param3,param4,param4,param4,unusedVar1,\n                       unusedVar2,unusedVar3);\n  if ((result == -1) && (DAT_20000a38 != 0)) {\n    *outputParam = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a042": "process_and_set_param_0800a042",
                "param_1": "outputParam",
                "param_2": "inputParam",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "unaff_r4": "unusedVar1",
                "unaff_r5": "unusedVar2",
                "in_lr": "unusedVar3"
            },
            "calling": [],
            "called": [
                "FUN_0800a130",
                "FUN_0800885c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a07a": {
            "entrypoint": "0x0800a07a",
            "current_name": "initialize_param_and_set_flag_0800a07a",
            "code": "\nvoid initialize_param_and_set_flag_0800a07a(undefined4 param,int buffer)\n\n{\n  int result;\n  ushort flag;\n  bool isError;\n  \n  result = initialize_and_set_param_0800a130(param,(int)*(short *)(buffer + 0xe));\n  isError = result == -1;\n  if (isError) {\n    flag = *(ushort *)(buffer + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(buffer + 0x54) = result;\n    flag = *(ushort *)(buffer + 0xc) | 0x1000;\n  }\n  if (isError) {\n    *(ushort *)(buffer + 0xc) = flag;\n  }\n  if (!isError) {\n    *(ushort *)(buffer + 0xc) = flag;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a07a": "initialize_param_and_set_flag_0800a07a",
                "param_1": "param",
                "param_2": "buffer",
                "iVar1": "result",
                "uVar2": "flag",
                "bVar3": "isError"
            },
            "calling": [],
            "called": [
                "FUN_0800a130"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a0ec": {
            "entrypoint": "0x0800a0ec",
            "current_name": "initialize_memory_0800a0ec",
            "code": "\nvoid initializeMemory_0800a0ec(int *memoryPointer,undefined4 pageSize,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  \n  DAT_20000a38 = 0;\n  result = set_memory_page_size_08008846(pageSize,param3,param3,0,param4);\n  if ((result == -1) && (DAT_20000a38 != 0)) {\n    *memoryPointer = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a0ec": "initialize_memory_0800a0ec",
                "param_1": "memoryPointer",
                "param_2": "pageSize",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08009e64"
            ],
            "called": [
                "FUN_08008846"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a110": {
            "entrypoint": "0x0800a110",
            "current_name": "initialize_program_0800a110",
            "code": "\nvoid initialize_program_0800a110(int *result,undefined4 input_value)\n\n{\n  int initialization_result;\n  \n  DAT_20000a38 = 0;\n  initialization_result = initialize_program_0800a110_08008850(input_value);\n  if ((initialization_result == -1) && (DAT_20000a38 != 0)) {\n    *result = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a110": "initialize_program_0800a110",
                "param_1": "result",
                "param_2": "input_value",
                "iVar1": "initialization_result"
            },
            "calling": [
                "FUN_08009eac"
            ],
            "called": [
                "FUN_08008850"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a130": {
            "entrypoint": "0x0800a130",
            "current_name": "initialize_and_set_param_0800a130",
            "code": "\nvoid initializeAndSetParam_0800a130(int *output,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int initResult;\n  \n  DAT_20000a38 = 0;\n  initResult = initialize_08008854(param2,param3,param4,param4,param4);\n  if ((initResult == -1) && (DAT_20000a38 != 0)) {\n    *output = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a130": "initialize_and_set_param_0800a130",
                "param_1": "output",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "initResult"
            },
            "calling": [
                "FUN_0800a07a",
                "FUN_0800a042"
            ],
            "called": [
                "FUN_08008854"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a154": {
            "entrypoint": "0x0800a154",
            "current_name": "calculate_result_0800a154",
            "code": "\nint calculateResult_0800a154(undefined4 value,int array)\n\n{\n  int result;\n  \n  result = *(int *)(array + -4) + -4;\n  if (*(int *)(array + -4) < 0) {\n    result = result + *(int *)(array + result);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800a154": "calculate_result_0800a154",
                "param_1": "value",
                "param_2": "array",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08009908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a168": {
            "entrypoint": "0x0800a168",
            "current_name": "initialize_application_0800a168",
            "code": "\nvoid initializeApplication_0800a168(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int initResult;\n  \n  DAT_20000a38 = 0;\n  initResult = initialize_application_08008858(arg1,arg2,arg3,arg3,arg3);\n  if ((initResult == -1) && (DAT_20000a38 != 0)) {\n    *result = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a168": "initialize_application_0800a168",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "initResult"
            },
            "calling": [
                "FUN_0800a020"
            ],
            "called": [
                "FUN_08008858"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a18c": {
            "entrypoint": "0x0800a18c",
            "current_name": "process_command_and_execute_0800a18c",
            "code": "\nvoid process_command_and_execute_0800a18c(void)\n\n{\n  code *command_table;\n  \n  command_table = process_command_and_execute_0800a18c;\n  process_and_execute_command_08009b5c();\n  if (-1 < DAT_200009c0 << 0x1f) {\n    DAT_200009c0 = 1;\n  }\n  if (-1 < DAT_200009bc << 0x1f) {\n    DAT_200009bc = 1;\n  }\n  if (-1 < DAT_200009b8 << 0x1f) {\n    DAT_200009b8 = 1;\n  }\n  if (-1 < DAT_200009b4 << 0x1f) {\n    DAT_200009b4 = 1;\n  }\n  if (-1 < DAT_200009b0 << 0x1f) {\n    DAT_200009b0 = 1;\n  }\n  if (-1 < DAT_200009ac << 0x1f) {\n    DAT_200009ac = 1;\n  }\n  if (-1 < DAT_200009a8 << 0x1f) {\n    DAT_200009a8 = 1;\n  }\n  if (-1 < DAT_200009a4 << 0x1f) {\n    DAT_200009a4 = 1;\n  }\n  if (-1 < DAT_200009a0 << 0x1f) {\n    DAT_200009a0 = 1;\n  }\n  if (-1 < DAT_2000099c << 0x1f) {\n    DAT_2000099c = 1;\n  }\n  if (-1 < DAT_20000998 << 0x1f) {\n    DAT_20000998 = 1;\n  }\n  if (-1 < DAT_20000994 << 0x1f) {\n    DAT_20000994 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x0800a224. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*command_table)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a18c": "process_command_and_execute_0800a18c",
                "UNRECOVERED_JUMPTABLE": "command_table"
            },
            "calling": [
                "FUN_08009084"
            ],
            "called": [
                "FUN_08009b5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a424": {
            "entrypoint": "0x0800a424",
            "current_name": "FUNC_0800a424",
            "code": "\nvoid FUNC_0800a424(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a424": "FUNC_0800a424"
            },
            "calling": [
                "FUN_0800010c",
                "FUN_08009148"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800a430": {
            "entrypoint": "0x0800a430",
            "current_name": "FUNC_0800a430",
            "code": "\nvoid FUNC_0800a430(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a430": "FUNC_0800a430"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 210507,
    "layers": [
        [
            "FUN_0800010c",
            "FUN_08000178",
            "FUN_08000188",
            "FUN_080005e0",
            "FUN_08002400",
            "FUN_08002580",
            "FUN_0800267c",
            "FUN_080026f8",
            "FUN_0800270c",
            "FUN_08002720",
            "FUN_0800291c",
            "FUN_08002a30",
            "FUN_08002c2c",
            "FUN_08002ec4",
            "FUN_08002f1e",
            "FUN_08002f2c",
            "FUN_08002f84",
            "FUN_08002f94",
            "FUN_08002fa0",
            "FUN_08002fa8",
            "FUN_08002fba",
            "FUN_08002fc2",
            "FUN_0800307a",
            "FUN_0800314e",
            "FUN_08003154",
            "FUN_0800322c",
            "FUN_080032bc",
            "FUN_08003306",
            "FUN_08003346",
            "FUN_08003350",
            "FUN_08003366",
            "FUN_08003370",
            "FUN_08003376",
            "FUN_080033a8",
            "FUN_0800344a",
            "FUN_080036ac",
            "FUN_08003748",
            "FUN_08003760",
            "FUN_080038dc",
            "FUN_080038e4",
            "FUN_08003a1c",
            "FUN_08003f0c",
            "FUN_08003f30",
            "FUN_08003f94",
            "FUN_08003fb0",
            "FUN_08003fd8",
            "FUN_08004004",
            "FUN_08004024",
            "FUN_08004046",
            "FUN_08004050",
            "FUN_080040e8",
            "FUN_080042d4",
            "FUN_080042e2",
            "FUN_0800430c",
            "FUN_08004396",
            "FUN_080043a2",
            "FUN_0800457c",
            "FUN_0800459c",
            "FUN_08004728",
            "FUN_080047f4",
            "FUN_080048c8",
            "FUN_08004954",
            "FUN_080049e0",
            "FUN_08004a24",
            "FUN_08004a76",
            "FUN_08004b82",
            "FUN_08004ccc",
            "FUN_08004d6c",
            "FUN_08004e3c",
            "FUN_0800542a",
            "FUN_08005430",
            "FUN_08005434",
            "FUN_08005840",
            "FUN_08005a1c",
            "FUN_08005a68",
            "FUN_08005cec",
            "FUN_08005d48",
            "FUN_08005dac",
            "FUN_08005fe8",
            "FUN_080060c4",
            "FUN_08006262",
            "FUN_08006420",
            "FUN_080064b0",
            "FUN_080064cc",
            "FUN_0800688e",
            "FUN_080068d6",
            "FUN_08006b1c",
            "FUN_08006b28",
            "FUN_08006b3e",
            "FUN_08006b5c",
            "FUN_08006b7c",
            "FUN_08006bb8",
            "FUN_08006d24",
            "FUN_08007306",
            "FUN_08007332",
            "FUN_0800735a",
            "FUN_0800738a",
            "FUN_080073ae",
            "FUN_080073c0",
            "FUN_080073e8",
            "FUN_080073ec",
            "FUN_08007438",
            "FUN_080074e0",
            "FUN_08007718",
            "FUN_08007744",
            "FUN_0800774a",
            "FUN_08007750",
            "FUN_08007ede",
            "FUN_08007f78",
            "FUN_080086e8",
            "FUN_08008804",
            "FUN_08008840",
            "FUN_08008846",
            "FUN_08008850",
            "FUN_08008854",
            "FUN_08008858",
            "FUN_08008868",
            "FUN_0800886c",
            "FUN_0800887c",
            "FUN_08008afa",
            "FUN_08008c20",
            "FUN_08008d00",
            "FUN_08008d18",
            "FUN_08008df8",
            "FUN_08008ef4",
            "FUN_08008f3c",
            "FUN_08009108",
            "FUN_08009148",
            "FUN_080091b0",
            "FUN_080091c6",
            "FUN_080091d8",
            "FUN_080095a8",
            "FUN_08009938",
            "FUN_08009954",
            "FUN_080099a4",
            "FUN_08009f2c",
            "thunk_FUN_0800887c",
            "FUN_0800a154"
        ],
        [
            "FUN_0800018c",
            "FUN_080004d4",
            "FUN_08001c08",
            "FUN_080026b0",
            "FUN_08002948",
            "FUN_08002ce0",
            "FUN_08002ddc",
            "FUN_08003106",
            "FUN_0800319e",
            "FUN_080031ce",
            "FUN_0800325a",
            "FUN_080033cc",
            "FUN_080036d8",
            "FUN_08003a20",
            "FUN_08003b8c",
            "FUN_08005460",
            "FUN_08005a28",
            "FUN_08005a48",
            "FUN_08005aa4",
            "FUN_08005cb4",
            "FUN_08006128",
            "FUN_08006186",
            "FUN_08006280",
            "FUN_080062f4",
            "FUN_08006390",
            "FUN_080063c0",
            "FUN_0800643c",
            "FUN_08006460",
            "FUN_080066e8",
            "FUN_08006ca8",
            "FUN_08007110",
            "FUN_0800723c",
            "FUN_08007246",
            "FUN_08007258",
            "FUN_080072d8",
            "FUN_080072f0",
            "FUN_08007320",
            "FUN_0800734a",
            "FUN_08007376",
            "FUN_08007708",
            "FUN_08007710",
            "FUN_0800771c",
            "FUN_08007736",
            "FUN_08007e74",
            "FUN_08007f0e",
            "FUN_08007f7c",
            "FUN_08007f8e",
            "FUN_08007fa0",
            "FUN_08007ff0",
            "FUN_08008020",
            "FUN_080085b8",
            "FUN_080085dc",
            "FUN_08008694",
            "FUN_0800870c",
            "FUN_08008730",
            "FUN_08008e14",
            "FUN_080090c2",
            "FUN_080091a0",
            "FUN_08009698",
            "FUN_08009918",
            "FUN_0800997e",
            "FUN_08009cdc",
            "FUN_08009fe8",
            "FUN_0800a0ec",
            "FUN_0800a110",
            "FUN_0800a130",
            "FUN_0800a168"
        ],
        [
            "FUN_08002a58",
            "FUN_08002c1e",
            "FUN_08002dbc",
            "FUN_08002df6",
            "FUN_08002efe",
            "FUN_08002f0a",
            "FUN_08003158",
            "FUN_080032a2",
            "FUN_08003474",
            "FUN_08003724",
            "FUN_08003aa0",
            "FUN_08003bd8",
            "FUN_08003ce8",
            "FUN_08003de4",
            "FUN_080045c0",
            "FUN_08004ac2",
            "FUN_08004aec",
            "FUN_08004f3c",
            "FUN_080058ac",
            "FUN_080058d2",
            "FUN_08005bb8",
            "FUN_08005df4",
            "FUN_08005e2e",
            "FUN_08005e6e",
            "FUN_08006060",
            "FUN_08006538",
            "FUN_080067ac",
            "FUN_08006932",
            "FUN_0800694c",
            "FUN_08006c60",
            "FUN_08006c7c",
            "FUN_08006e68",
            "FUN_08008600",
            "FUN_0800863c",
            "FUN_08008a24",
            "FUN_08008a6c",
            "FUN_08008abc",
            "FUN_08008d30",
            "FUN_08008f78",
            "FUN_08009270",
            "FUN_08009b5c",
            "FUN_08009e64",
            "FUN_0800a020",
            "FUN_0800a07a"
        ],
        [
            "FUN_08000be8",
            "FUN_08002ac0",
            "FUN_08002e26",
            "FUN_08002ed2",
            "FUN_08002ef2",
            "FUN_08002f14",
            "FUN_08002fca",
            "FUN_080035b8",
            "FUN_0800376c",
            "FUN_08003e20",
            "FUN_08005084",
            "FUN_080052f0",
            "FUN_08006092",
            "FUN_0800674e",
            "FUN_080069ec",
            "FUN_080071e4",
            "FUN_08008b66",
            "FUN_08008d8c",
            "FUN_08009190",
            "FUN_08009908",
            "FUN_08009d24",
            "FUN_08009eac"
        ],
        [
            "FUN_08000ef8",
            "FUN_080027f0",
            "FUN_0800288c",
            "FUN_08002acc",
            "FUN_08002e44",
            "FUN_08005188",
            "FUN_08006d80",
            "FUN_080072fa",
            "FUN_08008990"
        ],
        [
            "FUN_08001bf8",
            "FUN_08002b68",
            "FUN_08003002",
            "FUN_080036a2",
            "FUN_08008880"
        ],
        [
            "FUN_08000488",
            "FUN_08002c00",
            "FUN_08008f0e"
        ],
        [
            "FUN_08002c14"
        ],
        [
            "FUN_08001c18"
        ],
        [
            "FUN_080022f8"
        ],
        [
            "FUN_0800a18c"
        ],
        [
            "FUN_08009084"
        ],
        [
            "FUN_08009094"
        ],
        [
            "FUN_080042f0"
        ],
        [
            "FUN_08009a80",
            "FUN_08009c7c",
            "FUN_08009db0"
        ],
        [
            "FUN_08009d50"
        ],
        [
            "FUN_0800932c"
        ],
        [
            "FUN_08009358"
        ],
        [
            "FUN_0800937c"
        ],
        [
            "FUN_08009124",
            "FUN_080098d8"
        ],
        [
            "FUN_08007544",
            "FUN_08007594",
            "FUN_080077b0",
            "FUN_08008078",
            "FUN_080090cc"
        ],
        [
            "FUN_08002968",
            "FUN_080075dc",
            "FUN_080076e0",
            "FUN_080084b0",
            "FUN_08008c44"
        ],
        [
            "FUN_08002578",
            "FUN_08002a1c",
            "FUN_08003048",
            "FUN_08007118",
            "FUN_08007648",
            "FUN_08008500"
        ],
        [
            "FUN_0800242c",
            "FUN_08002644",
            "FUN_08002a26",
            "FUN_0800885c",
            "FUN_080088e0"
        ],
        [
            "FUN_08000214",
            "FUN_0800021a",
            "FUN_08000588",
            "FUN_080025ac",
            "FUN_0800a042"
        ],
        [
            "FUN_08002634"
        ],
        [
            "FUN_08000500"
        ],
        [
            "FUN_080005f8"
        ],
        [
            "FUN_08000a64",
            "FUN_08000aec"
        ],
        [
            "FUN_08001b48",
            "FUN_08001cd0"
        ],
        [
            "FUN_08008f1c"
        ]
    ],
    "locked_functions": []
}