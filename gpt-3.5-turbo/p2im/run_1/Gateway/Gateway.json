{
    "functions": {
        "FUN_08007246": {
            "renaming": {
                "FUN_08007246": "update_and_do_nothing_functions_08007246",
                "update_data_08003748": "update_data",
                "do_nothing_function_08004046": "do_nothing",
                "do_nothing_08007244": "do_nothing_2"
            },
            "code": "void update_and_do_nothing_functions_08007246(void)\n{\n  update_data();\n  do_nothing();\n  do_nothing_2();\n  return;\n}",
            "called": [
                "FUN_08007244",
                "FUN_08004046",
                "FUN_08003748"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007246",
            "calling": [],
            "imported": false,
            "current_name": "update_and_do_nothing_functions_08007246"
        },
        "FUN_0800a042": {
            "renaming": {
                "FUN_0800a042": "process_data_0800a042",
                "param_1": "output",
                "param_2": "data_pointer",
                "param_3": "arg1",
                "param_4": "arg2",
                "sVar1": "data_length",
                "puVar2": "data_ptr",
                "iVar3": "processed_data",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2",
                "in_lr": "unused3"
            },
            "code": "void process_data_0800a042(int *output, int data_pointer, int arg1, int arg2) {\n  int processed_data;\n  short data_length;\n  int *data_ptr = (int *)0x0800a0c8;\n  *data_ptr = 0;\n  data_length = *(short *)(data_pointer + 0xe);\n  *(unsigned short *)(data_pointer + 0xc) &= 0xefff;\n  if (((unsigned int)data_length << 0x17) >> 0x1f) {\n    zero_return(output, (int)data_length, 0, 2);\n  }\n  processed_data = process_data_0800a042_from_pointer_wrapper( (int)data_length, arg1, arg2, arg2, arg2);\n  if ((processed_data == -1) && (*data_ptr != 0)) {\n    *output = *data_ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_0800a130",
                "FUN_0800885c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a042",
            "calling": [],
            "imported": false,
            "current_name": "process_data_0800a042"
        },
        "FUN_08008694": {
            "renaming": {
                "FUN_08008694": "update_data_08008694",
                "param_1": "data_ptr",
                "param_2": "new_data",
                "bVar1": "data_index",
                "PTR_DAT_080086dc": "g_data_ptrs",
                "PTR_DAT_080086e0": "g_data_indexes",
                "write_bits_to_memory_08003f30": "write_bits_to_memory",
                "set_bit_at_index_08003f94": "set_bit_at_index",
                "check_input_0800688e": "check_input",
                "PTR_DAT_080086e4": "g_data_lengths"
            },
            "code": "void update_data_08008694(int data_ptr, uint32_t new_data){\n  if (data_ptr != 0) {\n    uint8_t data_index = *(uint8_t *)(data_ptr + 0x44);\n    *(uint32_t *)(PTR_DAT_080086dc + data_index * 4) = new_data;\n    *(int *)(PTR_DAT_080086e0 + data_index * 4) = data_ptr;\n    uint8_t bit_value = *(uint8_t *)(data_ptr + 0x5a);\n    write_bits_to_memory_08003f30((int)bit_value, 0, 2);\n    set_bit_at_index_08003f94((int)bit_value);\n    check_input_0800688e(*(uint32_t *)(PTR_DAT_080086e4 + data_index * 4),\n                 *(int *)(data_ptr + 100) + *(uint16_t *)(data_ptr + 0x6a), 1);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_0800688e",
                "FUN_08003f30",
                "FUN_08003f94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008694",
            "calling": [],
            "imported": false,
            "current_name": "update_data_08008694"
        },
        "FUN_08002ce0": {
            "renaming": {
                "FUN_08002ce0": "initialize_function_08002ce0",
                "param_1": "function_parameter",
                "iVar1": "parameter_offset",
                "set_param_to_zero_0800314e": "set_param_to_zero",
                "initialize_data_080032bc": "initialize_data",
                "PTR_execute_function_if_not_null_08002c2c_1_08002d90": "PTR_execute_function_if_not_null_08002c2c_1_08002d90",
                "PTR_LAB_08002c40_1_08002d94": "PTR_LAB_08002c40_1_08002d94",
                "PTR_LAB_08002c7c_1_08002d98": "PTR_LAB_08002c7c_1_08002d98",
                "PTR_LAB_08002c90_1_08002d9c": "PTR_LAB_08002c90_1_08002d9c",
                "PTR_LAB_08002c54_1_08002da0": "PTR_LAB_08002c54_1_08002da0",
                "PTR_LAB_08002c68_1_08002da4": "PTR_LAB_08002c68_1_08002da4",
                "update_params_08003366": "update_params",
                "PTR_LAB_08002ca4_1_08002da8": "PTR_LAB_08002ca4_1_08002da8",
                "set_values_08003370": "set_values",
                "PTR_LAB_08002cb8_1_08002dac": "PTR_LAB_08002cb8_1_08002dac",
                "update_data_08003346": "update_data",
                "PTR_LAB_08002e1a_1_08002db0": "PTR_LAB_08002e1a_1_08002db0",
                "set_params_08003350": "set_params",
                "PTR_LAB_08002dea_1_08002db4": "PTR_LAB_08002dea_1_08002db4",
                "PTR_LAB_08002cd0_1_08002db8": "PTR_LAB_08002cd0_1_08002db8"
            },
            "code": "int initialize_function_08002ce0(int function_parameter)\n{\n  int parameter_offset = 0x40;\n  set_param_to_zero(function_parameter + parameter_offset);\n  int data_offset = function_parameter + 0x44;\n  initialize_data(data_offset,function_parameter,0x40);\n  *(undefined *)(function_parameter + 0xc4) = 0;\n  *(undefined4 *)(function_parameter + 200) = 0;\n  *(undefined *)(function_parameter + 0x1f8) = 0;\n  set_values(data_offset,0xe0,PTR_execute_function_if_not_null_08002c2c_1_08002d90,0);\n  set_values(data_offset,0x90,PTR_LAB_08002c40_1_08002d94,0);\n  set_values(data_offset,0xc0,PTR_LAB_08002c7c_1_08002d98,0);\n  set_values(data_offset,0xd0,PTR_LAB_08002c90_1_08002d9c,0);\n  set_values(data_offset,0xf4,PTR_LAB_08002c54_1_08002da0,0);\n  set_values(data_offset,0xf5,PTR_LAB_08002c68_1_08002da4,0);\n  update_params(data_offset,0x71,PTR_LAB_08002ca4_1_08002da8,0);\n  set_values(data_offset,0xf0,PTR_LAB_08002cb8_1_08002dac,0);\n  update_data(data_offset,0x79,PTR_LAB_08002e1a_1_08002db0,function_parameter);\n  set_params(data_offset,0xf9,PTR_LAB_08002dea_1_08002db4,function_parameter);\n  set_params(data_offset,0xff,PTR_LAB_08002cd0_1_08002db8,0);\n  return function_parameter;\n}",
            "called": [
                "FUN_08003306",
                "FUN_08003350",
                "FUN_08003366",
                "FUN_080032bc",
                "FUN_08003346",
                "FUN_08003370",
                "FUN_0800314e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ce0",
            "calling": [
                "FUN_08002dbc"
            ],
            "imported": false,
            "current_name": "initialize_function_08002ce0"
        },
        "FUN_08005188": {
            "renaming": {
                "FUN_08005188": "process_data_or_input_08005188",
                "param_1": "param",
                "iVar1": "ptr1",
                "uVar2": "data14",
                "uVar3": "data3",
                "uVar4": "data18",
                "(int)param_1 + 0x3e": "flag"
            },
            "code": "void process_data_or_input_08005188(int *param) {\n  int ptr1 = *param;\n  uint data3 = *(uint *)(ptr1 + 4);\n  uint data14 = *(uint *)(ptr1 + 0x14);\n  uint data18 = *(uint *)(ptr1 + 0x18);\n  char flag = *(char *)((int)param + 0x3e);\n  \n  if (flag == '\\x10' || flag == '@') {\n    if ((data14 & 0x10001) == 0 || (data3 & 0x200) == 0) {\n      if ((DAT_080052e8 & data14) == 0 || (data3 & 0x200) == 0) {\n        if ((DAT_080052d4 & data14) != 0 && (data3 & 0x200) != 0) {\n          update_flags(param);\n        }\n      }\n      else {\n        set_value_from_param(param);\n      }\n    }\n    else {\n      set_flags(param);\n    }\n    if ((DAT_080052dc & data18) == 0) {\n      if ((DAT_080052ec & data14) != 0 && (data3 & 0x400) != 0 && (DAT_080052e4 & data14) == 0) {\n        process_param(param);\n        return;\n      }\n      if ((DAT_080052e4 & data14) != 0 && (data3 & 0x200) != 0) {\n        process_data(param);\n        return;\n      }\n    }\n    else {\n      if ((DAT_080052e0 & data14) != 0 && (data3 & 0x400) != 0 && (DAT_080052e4 & data14) == 0) {\n        process_input(param);\n        return;\n      }\n      if ((DAT_080052e4 & data14) != 0 && (data3 & 0x200) != 0) {\n        process_input(param);\n        return;\n      }\n    }\n  }\n  else {\n    if ((DAT_080052d4 & data14) != 0 && (data3 & 0x200) != 0) {\n      parse_input();\n      return;\n    }\n    if ((DAT_080052d8 & data14) != 0 && (data3 & 0x200) != 0) {\n      execute_command(param);\n      return;\n    }\n    if ((DAT_080052dc & data18) == 0) {\n      if ((DAT_080052ec & data14) != 0 && (data3 & 0x400) != 0 && (DAT_080052e4 & data14) == 0) {\n        process_data(param);\n        return;\n      }\n      if ((DAT_080052e4 & data14) != 0 && (data3 & 0x200) != 0) {\n        increment_data_and_decrement_count_if_not_zero(param);\n      }\n    }\n    else {\n      if ((DAT_080052e0 & data14) != 0 && (data3 & 0x400) != 0 && (DAT_080052e4 & data14) == 0) {\n        decode_message(param);\n        return;\n      }\n      if ((DAT_080052e4 & data14) != 0 && (data3 & 0x200) != 0) {\n        increment_byte_at_address_if_short_at_offset_is_not_zero(param);\n        return;\n      }\n    }\n  }\n}",
            "called": [
                "FUN_08004ccc",
                "FUN_0800457c",
                "FUN_08004d6c",
                "FUN_08004396",
                "FUN_08005084",
                "FUN_0800459c",
                "FUN_08004ac2",
                "FUN_08004b82",
                "FUN_08004a76",
                "FUN_08004a24",
                "FUN_0800430c",
                "FUN_08004e3c",
                "FUN_080043a2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005188",
            "calling": [],
            "imported": false,
            "current_name": "process_data_or_input_08005188"
        },
        "FUN_08007244": {
            "renaming": {
                "FUN_08007244": "do_nothing_08007244"
            },
            "code": "\nvoid do_nothing_08007244(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007244",
            "calling": [
                "FUN_08007246"
            ],
            "imported": false,
            "current_name": "do_nothing_08007244"
        },
        "FUN_08009db0": {
            "renaming": {
                "FUN_08009db0": "allocate_and_initialize_array_08009db0",
                "param_1": "error_code",
                "param_2": "size",
                "param_3": "value",
                "param_4": "unknown",
                "piVar1": "current_struct_ptr",
                "piVar2": "array_ptr",
                "iVar3": "struct_ptr",
                "ppiVar4": "next_struct_ptr_ptr"
            },
            "code": "int * allocate_and_initialize_array_08009db0(int *error_code, int size, int value, int unknown)\n{\n  int *array_ptr;\n  int *current_struct_ptr;\n  int **next_struct_ptr_ptr;\n  int i;\n  \n  current_struct_ptr = *(int **)PTR_PTR_DAT_08009e24;\n  if (*(int *)(current_struct_ptr + 0x18) == 0) {\n    initialize_structs_08009d50(current_struct_ptr);\n  }\n  next_struct_ptr_ptr = (int **)(current_struct_ptr + 0x48);\n  while (true) {\n    array_ptr = next_struct_ptr_ptr[1];\n    for (i = size; i > 0; i--) {\n      if (*(short *)(array_ptr + 3) == 0) {\n        *(undefined2 *)((int)array_ptr + 0xe) = 0xffff;\n        array_ptr[0x19] = 0;\n        *(undefined2 *)(array_ptr + 3) = 1;\n        *array_ptr = 0;\n        array_ptr[2] = 0;\n        array_ptr[1] = 0;\n        array_ptr[4] = 0;\n        array_ptr[5] = 0;\n        array_ptr[6] = 0;\n        fill_array_with_value_080091c6(array_ptr + 0x17, 0, 8, 1, unknown);\n        array_ptr[0xd] = 0;\n        array_ptr[0xe] = 0;\n        array_ptr[0x12] = 0;\n        array_ptr[0x13] = 0;\n        return array_ptr;\n      }\n      array_ptr = array_ptr + 0x1a;\n    }\n    if (*next_struct_ptr_ptr == (int *)0x0) {\n      array_ptr = allocate_and_initialize_array_08009db0_of_structs_08009d24(error_code, 4);\n      *next_struct_ptr_ptr = array_ptr;\n      if (array_ptr == (int *)0x0) {\n        *error_code = 0xc;\n        return (int *)0x0;\n      }\n    }\n    next_struct_ptr_ptr = (int **)*next_struct_ptr_ptr;\n  }\n}",
            "called": [
                "FUN_08009d24",
                "FUN_080091c6",
                "FUN_08009d50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009db0",
            "calling": [
                "FUN_08009d50"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_array_08009db0",
            "code_backup": "\nint * FUN_08009db0(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int iVar3;\n  int **ppiVar4;\n  \n  iVar3 = *(int *)PTR_PTR_DAT_08009e24;\n  if (*(int *)(iVar3 + 0x18) == 0) {\n    FUNC_08009d50(iVar3);\n  }\n  ppiVar4 = (int **)(iVar3 + 0x48);\n  do {\n    piVar2 = ppiVar4[2];\n    piVar1 = ppiVar4[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        piVar2[0x19] = 0;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_array_with_value_080091c6(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar4 == (int *)0x0) {\n      piVar1 = (int *)allocate_and_initialize_array_of_structs_08009d24(param_1,4);\n      *ppiVar4 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar4 = (int **)*ppiVar4;\n  } while( true );\n}\n\n"
        },
        "FUN_08002c2c": {
            "renaming": {
                "FUN_08002c2c": "execute_function_if_not_null_08002c2c",
                "param_1": "param_1",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "pcVar1": "function",
                "PTR_DAT_08002c3c": "PTR_DAT_08002c3c"
            },
            "code": "void execute_function_if_not_null_08002c2c(void* function_pointer, int param_1, int param_2, int param_3, int param_4)\n{\n  code* function = *(code**)PTR_DAT_08002c3c;\n  if (function != NULL) {\n    (*function)(param_1, param_2, param_3, function, param_4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c2c",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_if_not_null_08002c2c"
        },
        "FUN_08001bf8": {
            "renaming": {
                "FUN_08001bf8": "copy_data_to_buffer_08001bf8",
                "param_1": "buffer",
                "param_2": "data",
                "param_3": "size",
                "param_4": "count",
                "copy_data_to_buffer_0800288c": "copy_data_to_buffer_0800288c",
                "PTR_DAT_08001c04": "PTR_DAT_08001c04"
            },
            "code": "void copy_data_to_buffer_08001bf8(void* buffer, void* data, size_t size, size_t count)\n{\n    copy_data_to_buffer_08001bf8_0800288c(buffer, data, size, count, count);\n    return;\n}",
            "called": [
                "FUN_0800288c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001bf8",
            "calling": [
                "FUN_08001cd0",
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "copy_data_to_buffer_08001bf8"
        },
        "FUN_080072f0": {
            "renaming": {
                "FUN_080072f0": "check_bit_in_param_080072f0",
                "param_1": "bit_mask",
                "param_2": "bit_position",
                "param_3": "param1",
                "param_4": "param2",
                "is_param2_bit_set_in_param1_080042d4": "is_bit_set_in_param"
            },
            "code": "void check_bit_in_param_080072f0(unsigned int bit_mask, unsigned short bit_position, unsigned int param1, unsigned int param2) {\n  is_bit_set_in_param(bit_mask, bit_position, param1, param2, param2);\n  return;\n}",
            "called": [
                "FUN_080042d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072f0",
            "calling": [
                "FUN_08008a6c"
            ],
            "imported": false,
            "current_name": "check_bit_in_param_080072f0"
        },
        "FUN_08000178": {
            "renaming": {
                "FUN_08000178": "find_end_of_string_08000178",
                "param_1": "str",
                "pcVar2": "current_char",
                "pcVar3": "str_pointer",
                "cVar1": "current_char_value"
            },
            "code": "char* find_end_of_string_08000178(char* str) {\n  char* current_char = str;\n  while (*current_char != '\\0') {\n    current_char++;\n  }\n  return current_char;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000178",
            "calling": [
                "FUN_080032a2",
                "FUN_08002e44",
                "FUN_08008e7c"
            ],
            "imported": false,
            "current_name": "find_end_of_string_08000178"
        },
        "FUN_080069ec": {
            "renaming": {
                "FUN_080069ec": "process_data_if_valid_080069ec",
                "param_1": "data",
                "iVar1": "val",
                "uVar2": "mem_flags",
                "puVar3": "data_ptr",
                "uVar4": "is_flag_4_set",
                "uVar5": "flags"
            },
            "code": "void process_data_if_valid_080069ec(uint **data)\n{\n  uint *data_ptr = *data;\n  uint flags = *data_ptr;\n  uint mem_flags = data_ptr[3];\n\n  if ((flags & 0xf) == 0 && (flags & 0x20) && (mem_flags & 0x20)) {\n    process_data(data);\n    return;\n  }\n  \n  if ((flags & 0xf) == 0 || (data_ptr[5] & 1) == 0 && (mem_flags & 0x120) == 0) {\n    if ((flags & 0x80) && (mem_flags & 0x80)) {\n      read_and_modify_memory(data);\n      return;\n    }\n    if ((flags & 0x40) && (mem_flags & 0x40)) {\n      set_value_and_check_input(data);\n    }\n  }\n  else {\n    if ((flags & 0x1) && (mem_flags & 0x100)) {\n      (*data)[15] |= 1;\n    }\n    if ((flags & 0x4) && (data_ptr[5] & 1)) {\n      (*data)[15] |= 2;\n    }\n    if ((flags & 0x2) && (data_ptr[5] & 1)) {\n      (*data)[15] |= 4;\n    }\n    if ((flags & 0x8) && (data_ptr[5] & 1)) {\n      (*data)[15] |= 8;\n    }\n    if ((*data)[15]) {\n      if ((flags & 0x20) && (mem_flags & 0x20)) {\n        process_data(data);\n      }\n      if (((*data)[15] & 8) == 0 && ((**data)[5] & 0x40) == 0) {\n        do_nothing(data);\n        (*data)[15] = 0;\n        return;\n      }\n      update_flags(data);\n      data_ptr = *data;\n      if ((data_ptr[5] & 0x40) == 0) {\n        do_nothing(data);\n        return;\n      }\n      data_ptr[5] &= 0xffffffbf;\n      if ((*data)[13]) {\n        (*data)[13][13] = (uint)PTR_LAB_08006b0c_1_08006b08;\n        int val = get_value_from_param((*data)[13]);\n        if (val != 0) {\n          (*(code *)(*data)[13][13])();\n          return;\n        }\n      }\n    }\n  }\n}",
            "called": [
                "FUN_0800694c",
                "FUN_080064cc",
                "FUN_08006932",
                "FUN_080064b0",
                "FUN_08004050",
                "FUN_0800877c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069ec",
            "calling": [],
            "imported": false,
            "current_name": "process_data_if_valid_080069ec"
        },
        "FUN_0800a168": {
            "renaming": {
                "FUN_0800a168": "zero_return_0800a168",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "ptr",
                "iVar2": "return_value"
            },
            "code": "void zero_return_0800a168(int *result, undefined4 arg1, undefined4 arg2, undefined4 arg3) {\n  undefined *ptr;\n  ptr = PTR_DAT_0800a188;\n  *(undefined4 *)PTR_DAT_0800a188 = 0;\n  int return_value = zero_return_0800a168_08008858(arg1, arg2, arg3, arg3, arg3);\n  if (return_value == -1 && *(int *)ptr != 0) {\n    *result = *(int *)ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_08008858"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a168",
            "calling": [
                "FUN_0800a020"
            ],
            "imported": false,
            "current_name": "zero_return_0800a168"
        },
        "FUN_080067ac": {
            "renaming": {
                "FUN_080067ac": "process_data_080067ac",
                "param_1": "data_ptr",
                "param_2": "data",
                "param_3": "data_size",
                "param_4": "permission",
                "uVar1": "permission_result",
                "iVar2": "result"
            },
            "code": "int process_data_080067ac(int *data_ptr, ushort *data, int data_size, undefined4 permission)\n{\n  undefined4 permission_result;\n  int result;\n  \n  if (*(char *)((int)data_ptr + 0x39) == ' ') {\n    if (data == (ushort *)0x0) {\n      result = 1;\n    }\n    else if (data_size == 0) {\n      result = 1;\n    }\n    else if (*(char *)(data_ptr + 0xe) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(data_ptr + 0xe) = 1;\n      data_ptr[0xf] = 0;\n      *(undefined *)((int)data_ptr + 0x39) = 0x21;\n      permission_result = get_data_from_pointer_08003760();\n      *(short *)(data_ptr + 9) = (short)data_size;\n      *(short *)((int)data_ptr + 0x26) = (short)data_size;\n      while (*(short *)((int)data_ptr + 0x26) != 0) {\n        *(short *)((int)data_ptr + 0x26) = *(short *)((int)data_ptr + 0x26) + -1;\n        if (data_ptr[2] == 0x1000) {\n          result = check_permissions_080066e8(data_ptr,0x80,0,permission_result,permission);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = *data & 0x1ff;\n          if (data_ptr[4] == 0) {\n            data = data + 1;\n          }\n          else {\n            data = (ushort *)((int)data + 1);\n          }\n        }\n        else {\n          result = check_permissions_080066e8(data_ptr,0x80,0,permission_result,permission);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = (uint)*(byte *)data;\n          data = (ushort *)((int)data + 1);\n        }\n      }\n      result = check_permissions_080066e8(data_ptr,0x40,0,permission_result,permission);\n      if (result == 0) {\n        *(undefined *)((int)data_ptr + 0x39) = 0x20;\n        *(undefined *)(data_ptr + 0xe) = 0;\n      }\n      else {\n        result = 3;\n      }\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [
                "FUN_08003760",
                "FUN_080066e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080067ac",
            "calling": [
                "FUN_08008500"
            ],
            "imported": false,
            "current_name": "process_data_080067ac"
        },
        "FUN_0800735a": {
            "renaming": {
                "FUN_0800735a": "find_value_in_string_0800735a",
                "param_1": "value_to_find",
                "param_2": "string",
                "*param_2": "*string",
                "undefined4": "unsigned int"
            },
            "code": "unsigned int find_value_in_string_0800735a(int value_to_find, char *string)\n{\n    while(true)\n    {\n        if(*string == -1)\n        {\n            return 0xffffffff;\n        }\n        if(*string == value_to_find)\n        {\n            break;\n        }\n        string += 0xc;\n    }\n    return *(unsigned int *)(string + 8);\n}",
            "called": [
                "FUN_0800735a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800735a",
            "calling": [
                "FUN_08007376",
                "FUN_0800735a"
            ],
            "imported": false,
            "current_name": "find_value_in_string_0800735a"
        },
        "FUN_08008c20": {
            "renaming": {
                "FUN_08008c20": "initialize_data_structures_08008c20",
                "param_1": "data_structure_address",
                "PTR_": "ptr_to_",
                "DAT_": ""
            },
            "code": "void initialize_data_structures_08008c20(int data_structure_address)\n{\n  int* PTR_data1 = (int*)(data_structure_address + 0x130);\n  *PTR_data1 = data_structure_address + 0x11;\n  short* PTR_data2 = (short*)(data_structure_address + 0x134);\n  *PTR_data2 = 0;\n  short* PTR_data3 = (short*)(data_structure_address + 0x136);\n  *PTR_data3 = 0;\n  int* PTR_data4 = (int*)(data_structure_address + 0x138);\n  *PTR_data4 = data_structure_address + 0x51;\n  short* PTR_data5 = (short*)(data_structure_address + 0x13c);\n  *PTR_data5 = 0;\n  short* PTR_data6 = (short*)(data_structure_address + 0x13e);\n  *PTR_data6 = 0;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008c20",
            "calling": [
                "FUN_08008d30"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_08008c20"
        },
        "FUN_08000a64": {
            "renaming": {
                "FUN_08000a64": "process_data_08000a64_08000a64",
                "iVar1": "index",
                "uVar2": "count",
                "find_char_index_080036ac": "find_character_index_080036ac",
                "is_param1_in_param2_0800738a": "is_character_in_string_0800738a"
            },
            "code": "void process_data_08000a64_08000a64(void)\n{\n  int index;\n  uint count;\n  for (count = 0; count < 0x3c; count++) {\n    if (count < 0x3c) {\n      if (PTR_DAT_08000ad8[count] == -1) {\n        index = 0;\n      }\n      else {\n        index = find_character_index_080036ac();\n        if (index == 0) {\n          index = 0;\n        }\n        else {\n          index = find_character_index_080036ac((int)(char)PTR_DAT_08000ad8[count]);\n          if (index == 1) {\n            index = 0;\n          }\n          else {\n            index = is_character_in_string_0800738a((int)(char)PTR_DAT_08000ad8[count],PTR_DAT_08000adc);\n            if (index == 0) {\n              index = is_character_in_string_0800738a((int)(char)PTR_DAT_08000ad8[count],PTR_DAT_08000ae0);\n            }\n          }\n        }\n      }\n    }\n    else {\n      index = 0;\n    }\n    if (index != 0) {\n      print_data_080005f8(count,6);\n    }\n  }\n  *PTR_DAT_08000ae4 = 1;\n  initialize_data_wrapper_08002a26(PTR_DAT_08000ae8);\n  return;\n}",
            "called": [
                "FUN_080036ac",
                "FUN_0800738a",
                "FUN_08002a26",
                "FUN_080005f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a64",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "process_data_08000a64_08000a64"
        },
        "FUN_0800723c": {
            "renaming": {
                "FUN_0800723c": "get_data_from_pointer_0800723c",
                "get_data_from_pointer_08003760": "get_data_from_pointer_08003760"
            },
            "code": "void get_data_from_pointer_0800723c() {\n  // Call function to get data from pointer\n  get_data_from_pointer_0800723c_08003760();\n  return;\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800723c",
            "calling": [
                "FUN_08008abc"
            ],
            "imported": false,
            "current_name": "get_data_from_pointer_0800723c"
        },
        "FUN_080043a2": {
            "renaming": {
                "FUN_080043a2": "update_flags_080043a2",
                "param_1": "flags",
                "puVar1": "flag_ptr",
                "DAT_0800463d": "flag_start",
                "PTR_DAT_08004650": "flag_array",
                "PTR_DAT_080046a0": "flag_type",
                "PTR_DAT_080046ac": "flag_ptr_2",
                "PTR_DAT_080046b0": "flag_ptr_3"
            },
            "code": "uint32_t update_flags_080043a2(uint32_t **flags)\n{\n    uint32_t *flag_ptr;\n    flag_ptr = flags[11];\n    if ((*(char *)((int)flags + 0x3d) == '\"') && ((flags[20] != (uint32_t *)0x0 || (*(char *)((int)flags + 0x3e) != '@')))) {\n        if ((flags[20] == (uint32_t *)0x0) && (flags[4] == (uint32_t *)0xc000)) {\n            **flags |= 0x100;\n            flags[20] = (uint32_t *)((int)flags[20] + 1);\n        }\n        else {\n            uint16_t PTR_DAT_080046a0 = *(uint16_t *)((int)flags + 0x2a);\n            if (PTR_DAT_080046a0 == 0) {\n                **flags |= 0x200;\n            }\n            else if (PTR_DAT_080046a0 == 1) {\n                if (flag_ptr == (uint32_t *)0xffff0000) {\n                    **flags &= 0xfffffbff;\n                    flag_ptr = *flags;\n                    if ((flag_ptr[1] & 0x800) == 0) {\n                        *flag_ptr |= 0x200;\n                    }\n                    else {\n                        *flag_ptr &= 0xfffffbff;\n                    }\n                }\n                else if (((flag_ptr == (uint32_t *)0x4) || (flag_ptr == (uint32_t *)0x8)) || (flags[12] == (uint32_t *)0x12)) {\n                    **flags &= 0xfffffbff;\n                    **flags |= 0x200;\n                }\n                else if (flags[11] == (uint32_t *)0x2) {\n                    **flags |= 0x400;\n                }\n                else {\n                    **flags &= 0xfffffbff;\n                }\n            }\n            else if (PTR_DAT_080046a0 == 2) {\n                if (flags[11] == (uint32_t *)0x2) {\n                    **flags |= 0x400;\n                }\n                else {\n                    **flags |= 0x800;\n                    **flags &= 0xfffffbff;\n                }\n                flag_ptr = *flags;\n                if ((flag_ptr[1] & 0x800) != 0) {\n                    flag_ptr[1] |= 0x1000;\n                }\n            }\n            else {\n                **flags |= 0x400;\n                flag_ptr = *flags;\n                if ((flag_ptr[1] & 0x800) != 0) {\n                    flag_ptr[1] |= 0x1000;\n                }\n            }\n            flags[20] = (uint32_t *)0x0;\n        }\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043a2",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "update_flags_080043a2"
        },
        "FUN_0800694c": {
            "renaming": {
                "FUN_0800694c": "process_data_0800694c",
                "param_1": "data",
                "pbVar1": "byte_ptr",
                "sVar2": "remaining",
                "puVar3": "void_ptr",
                "string": "string",
                "data_type": "data_type",
                "data_value": "data_value",
                "output_ptr": "output_ptr"
            },
            "code": "int process_data_0800694c(int *data)\n{\n  char *string = (char *)(data + 0x3a);\n  if (*string != '\"') {\n    return 2;\n  }\n  int data_type = data[2];\n  int data_value = *(int *)(*data + 4);\n  int *output_ptr = (int *)(data + 10);\n  if (data[4] == 0) {\n    *output_ptr = (uint)data_value >> 0x17;\n    *output_ptr += 2 * (data_type == 0x1000 && data[4] == 0);\n  }\n  else {\n    *output_ptr = (ushort)data_value & 0xff;\n    *output_ptr += data_type == 0x1000;\n  }\n  short remaining = *(short *)(data + 0x2e) - 1;\n  *(short *)(data + 0x2e) = remaining;\n  if (remaining != 0) {\n    return 0;\n  }\n  *(uint *)(*data + 0xc) &= 0xffffffdf;\n  *(uint *)(*data + 0xc) &= 0xfffffeff;\n  *(uint *)(*data + 0x14) &= 0xfffffffe;\n  *string = ' ';\n  execute_function_based_on_array_value_0800870c();\n  return 0;\n}",
            "called": [
                "FUN_0800870c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800694c",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "process_data_0800694c"
        },
        "FUN_08006280": {
            "renaming": {
                "FUN_08006280": "set_bits_in_array_08006280",
                "param_1": "array",
                "param_2": "bit_position",
                "puVar1": "current_array"
            },
            "code": "uint set_bits_in_array_08006280(uint **array, uint bit_position, uint num_bits_to_set) {\n  uint *current_array = *array;\n  switch(bit_position) {\n    case 0:\n      current_array[3] |= 2;\n      break;\n    case 4:\n      current_array[3] |= 4;\n      break;\n    case 8:\n      current_array[3] |= 8;\n      break;\n    case 0xc:\n      current_array[3] |= 0x10;\n  }\n  set_bit_in_uint_array_08006262(*array, bit_position, num_bits_to_set);\n  if (current_array == PTR_080062f0) {\n    current_array[0x11] |= 0x8000;\n  }\n  **array |= 1;\n  return 0;\n}",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006280",
            "calling": [
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "set_bits_in_array_08006280"
        },
        "FUN_08007258": {
            "renaming": {
                "FUN_08007258": "calculate_flags_08007258",
                "param_1": "flag",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "flag_value",
                "local_20": "bit_mask",
                "local_1c": "param2",
                "local_18": "param3",
                "local_14": "value",
                "DAT_080072d0": "PTR_DAT_080072d0",
                "DAT_080072d4": "PTR_DAT_080072d4"
            },
            "code": "void calculate_flags_08007258(uint32_t flag, uint32_t param2, uint32_t param3)\n{\n  uint32_t flag_value;\n  uint32_t bit_mask;\n  uint32_t bit_offset;\n  uint32_t value;\n  flag_value = set_flag_value(flag);\n  bit_offset = flag & 0xf;\n  bit_mask = 1 << bit_offset & 0xffff;\n  value = 3;\n  *(uint32_t *)(DAT_080072d0 + 0x18) |= 1;\n  if ((flag - 0xd & 0xff) < 2) {\n    *(uint32_t *)(DAT_080072d4 + 4) = *(uint32_t *)(DAT_080072d4 + 4) & 0xf8ffffff | 0x4000000;\n  }\n  if (((flag == 0xf) || (flag == 0x13)) || (flag == 0x14)) {\n    *(uint32_t *)(DAT_080072d4 + 4) = *(uint32_t *)(DAT_080072d4 + 4) & 0xf8ffffff | 0x2000000;\n  }\n  calculate_flags_08007258_080040e8(flag_value, &bit_mask, param2, param3, &value);\n  return;\n}\n",
            "called": [
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007258",
            "calling": [
                "FUN_08008990"
            ],
            "imported": false,
            "current_name": "calculate_flags_08007258"
        },
        "FUN_0800a0ec": {
            "renaming": {
                "FUN_0800a0ec": "set_memory_permissions_0800a0ec",
                "param_1": "result",
                "param_2": "address",
                "param_3": "size",
                "param_4": "permissions",
                "puVar1": "permission_data",
                "iVar2": "set_memory_result"
            },
            "code": "void set_memory_permissions_0800a0ec(int *result, unsigned int address, unsigned int size, unsigned int permissions, unsigned int process_id) {\n    unsigned int *permission_data = PTR_DAT_0800a10c;\n    *permission_data = 0;\n    int set_memory_result = set_memory_permissions_0800a0ec_08008846(address, size, size, permissions, process_id);\n    if (set_memory_result == -1 && *permission_data != 0) {\n        *result = *permission_data;\n    }\n    return;\n}",
            "called": [
                "FUN_08008846"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a0ec",
            "calling": [
                "FUN_08009e64"
            ],
            "imported": false,
            "current_name": "set_memory_permissions_0800a0ec"
        },
        "FUN_08008df8": {
            "renaming": {
                "FUN_08008df8": "set_values_for_param_08008df8",
                "param_1": "param_array",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_4": "value_3",
                "param_5": "value_4"
            },
            "code": "void set_values_for_param_08008df8(undefined4 *param_array, undefined param_2, undefined param_3, undefined param_4, undefined param_5) {\n  *param_array = PTR_PTR_LAB_08008dbe_1_08008e10;\n  *(undefined *)(param_array + 1) = param_2;\n  *(undefined *)((int)param_array + 5) = param_3;\n  *(undefined *)((int)param_array + 6) = param_4;\n  *(undefined *)((int)param_array + 7) = param_5;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008df8",
            "calling": [
                "FUN_08008e14"
            ],
            "imported": false,
            "current_name": "set_values_for_param_08008df8"
        },
        "FUN_08009f4a": {
            "renaming": {
                "FUN_08009f4a": "do_nothing_08009f4a"
            },
            "code": "\nvoid do_nothing_08009f4a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f4a",
            "calling": [
                "FUN_080091d8",
                "FUN_08009270"
            ],
            "imported": false,
            "current_name": "do_nothing_08009f4a"
        },
        "FUN_08006c7c": {
            "renaming": {
                "FUN_08006c7c": "get_value_from_array_08006c7c",
                "param_1": "value",
                "param_2": "array",
                "param_3": "array_length",
                "param_4": "param_4",
                "param_5": "param_5",
                "iVar1": "index",
                "uVar2": "shifted_value"
            },
            "code": "int get_value_from_array_08006c7c(uint value, uint* array, uint array_length, uint param_4, uint param_5) {\n  int index = find_index_of_value_in_array(value, array, array_length, param_4, param_5);\n  uint shifted_value = (uint)(index << 0xc) >> 0x1b;\n  if (shifted_value == 3) {\n    return 8;\n  }\n  if (shifted_value != 4) {\n    if (shifted_value != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}",
            "called": [
                "FUN_08007376"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c7c",
            "calling": [
                "FUN_080071e4",
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "get_value_from_array_08006c7c"
        },
        "FUN_08006b5c": {
            "renaming": {
                "FUN_08006b5c": "set_bit_in_array_08006b5c",
                "param_1": "bit_index",
                "param_2": "array",
                "uVar1": "array_index",
                "PTR_": "",
                "DAT_": "",
                "*(uint *)(param_2 + uVar1 * 4)": "*array_ptr",
                "1 << (param_1 & 0xf)": "bit_mask"
            },
            "code": "void set_bit_in_array_08006b5c(uint bit_index, int *array){\n  uint array_index = (bit_index << 0x18) >> 0x1c;\n  uint *array_ptr = (uint *)(array + array_index * 4);\n  uint bit_mask = 1 << (bit_index & 0xf);\n  *array_ptr = (*array_ptr) & ~bit_mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b5c",
            "calling": [
                "FUN_08008990"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_08006b5c"
        },
        "FUN_08007376": {
            "renaming": {
                "FUN_08007376": "find_value_08007376",
                "param_1": "value_to_find",
                "uVar1": "found_value",
                "find_value_in_string_0800735a": "search_string_for_value"
            },
            "code": "int find_value_08007376(int value_to_find){\n    int found_value;\n    if (value_to_find == -1) {\n        return -1;\n    }\n    found_value = search_string_for_value();\n    return found_value;\n}",
            "called": [
                "FUN_0800735a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007376",
            "calling": [
                "FUN_080077b0",
                "FUN_080071e4",
                "FUN_08008078",
                "FUN_08006e68",
                "FUN_08006c7c",
                "FUN_08006c60",
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "find_value_08007376"
        },
        "FUN_08000188": {
            "renaming": {
                "FUN_08000188": "send_interrupt_request_08000188"
            },
            "code": "void send_interrupt_request_08000188(void)\n{\n  software_interrupt(0x3f);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000188",
            "calling": [
                "FUN_0800018c"
            ],
            "imported": false,
            "current_name": "send_interrupt_request_08000188"
        },
        "FUN_08004f3c": {
            "renaming": {
                "FUN_08004f3c": "check_input_and_set_flag_08004f3c",
                "param_1": "input",
                "iVar1": "value",
                "puVar2": "ptr2",
                "puVar3": "ptr1",
                "do_nothing_08004f3a": "do_nothing",
                "check_input_and_set_flag_08008020": "check_input_and_set_flag_08008020",
                "PTR_LAB_080053cc_1_0800507c": "PTR_LAB_080053cc_1_0800507c",
                "get_value_from_param_08004050": "get_value_from_param",
                "DAT_08005080": "DAT_08005080",
                "execute_command_08007ff0": "execute_command",
                "flag_char": "flag_char"
            },
            "code": "void check_input_and_set_flag_08004f3c(uint **input)\n{\n    int value;\n    uint *ptr1, *ptr2;\n    char flag_char;\n    \n    flag_char = *(char *)((int)input + 0x3d);\n    if (flag_char - 0x29 < 2) {\n        input[0xc] = (uint *)0x0;\n        *(undefined *)((int)input + 0x3d) = 0x28;\n    }\n    else {\n        if ((flag_char != '`') && (((*input)[1] & 0x800) == 0)) {\n            *(undefined *)((int)input + 0x3d) = 0x20;\n        }\n        input[0xc] = (uint *)0x0;\n        *(undefined *)((int)input + 0x3e) = 0;\n    }\n    **input &= 0xfffff7ff;\n    ptr1 = *input;\n    if ((ptr1[1] & 0x800) == 0) {\n        if (flag_char == '`') {\n            *(undefined *)((int)input + 0x3d) = 0x20;\n            input[0x10] = (uint *)0x0;\n            if ((ptr1[5] & 0x40) != 0) {\n                ptr2 = input[9];\n                input[9] = (uint *)((int)ptr2 + 1);\n                *(char *)ptr2 = (char)ptr1[4];\n            }\n            **input &= 0xfffffffe;\n            do_nothing(input);\n        }\n        else {\n            if ((ptr1[5] & 0x40) != 0) {\n                ptr2 = input[9];\n                input[9] = (uint *)((int)ptr2 + 1);\n                *(char *)ptr2 = (char)ptr1[4];\n            }\n            check_input_and_set_flag_08004f3c_08008020(input);\n        }\n    }\n    else {\n        ptr1[1] &= 0xfffff7ff;\n        if (*(char *)((int)input[0xd] + 0x21) == '\\x01') {\n            input[0xe][0xd] = (uint)PTR_LAB_080053cc_1_0800507c;\n            value = get_value_from_param(input[0xe]);\n            if (value != 0) {\n                if (((*input)[5] & 0x40) != 0) {\n                    ptr1 = input[9];\n                    input[9] = (uint *)((int)ptr1 + 1);\n                    *(char *)ptr1 = (char)(*input)[4];\n                }\n                **input &= 0xfffffffe;\n                *(undefined *)((int)input + 0x3d) = 0x20;\n                (*(code *)input[0xe][0xd])();\n            }\n        }\n        else {\n            input[0xd][0xd] = (uint)PTR_LAB_080053cc_1_0800507c;\n            value = get_value_from_param(input[0xd]);\n            if (value != 0) {\n                **input &= 0xfffffffe;\n                *(undefined *)((int)input + 0x3d) = 0x20;\n                (*(code *)input[0xd][0xd])();\n            }\n        }\n    }\n    if ((flag_char == '(') && (((uint)input[0x10] & 4) != 0)) {\n        input[0xb] = DAT_08005080;\n        input[0xc] = (uint *)0x0;\n        *(undefined *)((int)input + 0x3d) = 0x20;\n        *(undefined *)((int)input + 0x3e) = 0;\n        execute_command(input);\n    }\n    return;\n}",
            "called": [
                "FUN_08007ff0",
                "FUN_08008020",
                "FUN_08004f3a",
                "FUN_08004050"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3c",
            "calling": [
                "FUN_080052f0",
                "FUN_08005084"
            ],
            "imported": false,
            "current_name": "check_input_and_set_flag_08004f3c"
        },
        "FUN_080033cc": {
            "renaming": {
                "FUN_080033cc": "process_input_080033cc",
                "param_1": "input_len",
                "param_2": "callback1",
                "param_3": "callback2",
                "param_4": "callback3",
                "cVar1": "first_char",
                "iVar2": "new_input_len",
                "pcVar3": "input_ptr"
            },
            "code": "void process_input_080033cc(int input_len, uint8_t* input, void* callback1, void* callback2, void* callback3) {\n  uint8_t first_char = *input;\n  if (first_char == 'q') {\n    if (*(int *)(input_len + 0x68) != 0) {\n      int new_input_len = copy_and_shift_leftmost_bit(input_len, *(int *)(input_len + 0x18) + -1, input + 1, input, callback3);\n      check_param_range_and_store(input_len, 0, new_input_len + 1);\n      (*(void (*)(void*, uint8_t*))*(int *)(input_len + 0x68))(*(void **)(input_len + 0x40), input + 1);\n      return;\n    }\n  }\n  else if (first_char == 'y') {\n    if (*(void **)(input_len + 0x70) != NULL) {\n      if (*(uint *)(input_len + 0x18) < 3) {\n        (*(void (*)(void*, uint32_t, uint32_t))*(int *)(input_len + 0x70))(*(void **)(input_len + 0x34), 0, 0);\n        return;\n      }\n      int new_input_len = copy_and_shift_leftmost_bit(input_len, *(uint *)(input_len + 0x18) - 3, input + 3, input, callback3);\n      check_param_range_and_store(input_len, 0, new_input_len + 3);\n      uint8_t* input_ptr = input + 1;\n      (*(void (*)(void*, uint8_t, uint8_t, uint8_t, uint8_t*))*(int *)(input_len + 0x70))(*(void **)(input_len + 0x34), input_ptr[0], input_ptr[1], input_ptr[2], input_ptr + 3);\n      return;\n    }\n  }\n  else if (*(void **)(input_len + 0x6c) != NULL) {\n    (*(void (*)(void*, uint8_t, int, uint8_t*))*(int *)(input_len + 0x6c))(*(void **)(input_len + 0x44), first_char, *(int *)(input_len + 0x18) + -1, input + 1);\n  }\n  return;\n}",
            "called": [
                "FUN_080033a8",
                "FUN_08003376"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033cc",
            "calling": [
                "FUN_08003474"
            ],
            "imported": false,
            "current_name": "process_input_080033cc"
        },
        "FUN_08003de4": {
            "renaming": {
                "FUN_08003de4": "check_data_validity_08003de4",
                "param_1": "data",
                "iVar1": "result",
                "check_data_validity_08003b8c": "verify_data_08003b8c"
            },
            "code": "int check_data_validity_08003de4(int data)\n{\n  int result;\n\n  if (*(char *)(data + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(data + 0x24) = 1;\n  result = verify_data_08003b8c();\n  if (result == 0) {\n    *(uint *)(data + 0x28) = *(uint *)(data + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(data + 0x24) = 0;\n  return result;\n}",
            "called": [
                "FUN_08003b8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003de4",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "check_data_validity_08003de4"
        },
        "FUN_08004f3a": {
            "renaming": {
                "FUN_08004f3a": "do_nothing_08004f3a"
            },
            "code": "\nvoid do_nothing_08004f3a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3a",
            "calling": [
                "FUN_08004f3c"
            ],
            "imported": false,
            "current_name": "do_nothing_08004f3a"
        },
        "FUN_08000500": {
            "renaming": {
                "FUN_08000500": "decode_servo_data_08000500",
                "param_1": "servo_index",
                "param_2": "data_size",
                "param_3": "data_offset",
                "param_4": "undefined_param",
                "PTR_DAT_0800056c": "servo_count_ptr",
                "PTR_DAT_08000584": "PTR_SERVO_DATA",
                "PTR_s_Max_servos_attached_08000580": "PTR_MAX_SERVOS_ATTACHED",
                "PTR_DAT_08000570": "last_attached_servo_ptr",
                "PTR_DAT_08000578": "servo_attached_counts",
                "PTR_DAT_08000574": "last_attached_servo_data",
                "PTR_DAT_0800057c": "servo_data",
                "encode_data_08002f14": "encode_data",
                "decode_and_update_data_080025ac": "decode_and_update_servo_data",
                "decode_and_update_data_08002634": "decode_and_update_servo_data"
            },
            "code": "void decode_servo_data_08000500(int servo_index, int data_size, int data_offset, undefined4 param_4) {\n  byte num_servos_attached = *PTR_DAT_0800056c;\n  if (num_servos_attached > 11) {\n    encode_data_08002f14(PTR_DAT_08000584,PTR_s_Max_servos_attached_08000580,data_offset,param_4,param_4);\n    return;\n  }\n  byte last_attached_servo_index = *PTR_DAT_08000570;\n  if (last_attached_servo_index == 0) {\n    PTR_DAT_08000578[servo_index] = num_servos_attached;\n    *PTR_DAT_0800056c = num_servos_attached + 1;\n  }\n  else {\n    PTR_DAT_08000578[servo_index] = PTR_DAT_08000574[last_attached_servo_index - 1];\n    *PTR_DAT_08000570 = last_attached_servo_index - 1;\n  }\n  if ((data_size > 0) && (data_offset > 0)) {\n    decode_and_update_PTR_DAT_0800057c(PTR_DAT_0800057c + (uint)(byte)PTR_DAT_08000578[servo_index] * 3,servo_index,data_size,data_offset);\n    return;\n  }\n  decode_and_update_PTR_DAT_0800057c(PTR_DAT_0800057c + (uint)(byte)PTR_DAT_08000578[servo_index] * 3,servo_index);\n  return;\n}",
            "called": [
                "FUN_08002f14",
                "FUN_080025ac",
                "FUN_08002634"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000500",
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "decode_servo_data_08000500"
        },
        "FUN_08009d24": {
            "renaming": {
                "FUN_08009d24": "allocate_and_initialize_array_of_structs_08009d24",
                "param_1": "mem_block",
                "param_2": "num_structs",
                "puVar1": "array_of_structs",
                "iVar2": "array_size"
            },
            "code": "#include <stdlib.h>\\n\\n\\\n    \\n\\\n    undefined4 allocate_and_initialize_array_of_structs_08009d24(undefined4 mem_block, int num_structs)\\n\\\n    {\\n\\\n      undefined4 *array_of_structs;\\n\\\n      int array_size = (num_structs - 1) * 0x68;\\n\\\n      int total_size = array_size + 0x74;\\n\\\n      \\n\\\n      array_of_structs = (undefined4 *)allocate_memory_block_08009270(mem_block, total_size);\\n\\\n      \\n\\\n      if (array_of_structs != NULL) {\\n\\\n        *array_of_structs = 0;\\n\\\n        array_of_structs[1] = num_structs;\\n\\\n        array_of_structs[2] = array_of_structs + 3;\\n\\\n        fill_array_with_value_080091c6(array_of_structs + 3, 0, array_size);\\n\\\n      }\\n\\\n      \\n\\\n      return array_of_structs;\\n\\\n    }",
            "called": [
                "FUN_08009270",
                "FUN_080091c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009d24",
            "calling": [
                "FUN_08009db0"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_array_of_structs_08009d24"
        },
        "FUN_0800344a": {
            "renaming": {
                "FUN_0800344a": "initialize_struct_0800344a",
                "param_1": "struct_ptr",
                "uVar1": "i",
                "PTR_8": "size_ptr",
                "PTR_4": "data_ptr",
                "PTR_C": "char_1_ptr",
                "PTR_D": "char_2_ptr",
                "PTR_10": "char_3_ptr",
                "PTR_14": "char_4_ptr",
                "PTR_18": "int_1_ptr",
                "PTR_48": "int_2_ptr",
                "PTR_78": "function_ptr"
            },
            "code": "void initialize_struct_0800344a(int struct_ptr) {\n    uint i;\n    *(int *)(struct_ptr + 16) = 0;\n    *(char *)(struct_ptr + 12) = 0;\n    *(char *)(struct_ptr + 13) = 0;\n    for (i = 0; i < *(uint *)(struct_ptr + 8); i++) {\n        *(char *)(*(int *)(struct_ptr + 4) + i) = 0;\n    }\n    *(char *)(struct_ptr + 20) = 0;\n    *(int *)(struct_ptr + 24) = 0;\n    if (*(code **)(struct_ptr + 120) != (code *)0x0) {\n        (**(code **)(struct_ptr + 120))(*(int *)(struct_ptr + 72));\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800344a",
            "calling": [
                "FUN_08003474"
            ],
            "imported": false,
            "current_name": "initialize_struct_0800344a"
        },
        "FUN_080071e4": {
            "renaming": {
                "FUN_080071e4": "set_flags_on_parameter_080071e4",
                "param_1": "parameter_value",
                "local_50": "bit_array",
                "find_value_if_not_negative_08007320": "find_non_negative_value",
                "get_value_from_array_08006c7c": "get_value_from_array",
                "find_value_08007376": "find_value",
                "set_bit_in_uint_array_080063c0": "set_bit_in_array",
                "clear_bits_at_offset_08006460": "clear_bits_at_offset",
                "update_flags_on_param_08005e2e": "update_flags_on_parameter"
            },
            "code": "void set_flags_on_parameter_080071e4(int parameter_value)\n{\n    int index;\n    uint value_from_array;\n    int bit_array[17];\n\n    bit_array[0] = find_non_negative_value(parameter_value, PTR_DAT_08007238);\n    if ((bit_array[0] != 0) && (((value_from_array = get_value_from_array(parameter_value)) == 0) || (value_from_array == 4) || (value_from_array == 8) || (value_from_array == 0xc) || (value_from_array == 0x18)))\n    {\n        uint found_value = find_value(parameter_value, PTR_DAT_08007238);\n        if ((found_value & 0x100000) == 0)\n        {\n            set_bit_in_array(bit_array, value_from_array);\n        }\n        else\n        {\n            clear_bits_at_offset(bit_array, value_from_array);\n        }\n        update_flags_on_parameter(bit_array);\n    }\n    return;\n}\n",
            "called": [
                "FUN_08007376",
                "FUN_08006460",
                "FUN_080063c0",
                "FUN_08007320",
                "FUN_08005e2e",
                "FUN_08006c7c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080071e4",
            "calling": [
                "FUN_08008990"
            ],
            "imported": false,
            "current_name": "set_flags_on_parameter_080071e4"
        },
        "FUN_08008e72": {
            "renaming": {
                "FUN_08008e72": "call_function_pointer_08008e72",
                "param_1": "function_pointer"
            },
            "code": "void call_function_pointer_08008e72(void *function_pointer){\n  (**(void (**)(void))function_pointer)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e72",
            "calling": [],
            "imported": false,
            "current_name": "call_function_pointer_08008e72"
        },
        "FUN_080022f8": {
            "renaming": {
                "FUN_080022f8": "decode_and_process_i2c_data_080022f8",
                "PTR_DAT_080023e0": "function_pointer",
                "execute_function_08002ec4": "execute_function",
                "process_input_from_code_08002ed2": "process_input_from_code",
                "get_data_from_pointer_0800723c_wrapper_08008abc": "get_data_from_pointer_wrapper",
                "PTR_DAT_080023e4": "data_pointer",
                "PTR_DAT_080023ec": "data_length_pointer",
                "PTR_DAT_080023e8": "data_offset_pointer",
                "PTR_DAT_080023f4": "input_data",
                "find_char_index_080036ac": "find_char_index",
                "get_value_from_offset_08002fa0": "get_value_from_offset",
                "decode_param_08008880_08008880": "decode_parameter",
                "encode_data_08002ef2": "encode_data",
                "PTR_DAT_080023f0": "bit_mask_pointer",
                "PTR_DAT_080023f8": "i2c_data_count_pointer",
                "PTR_DAT_080023fc": "i2c_data_pointer"
            },
            "code": "void decode_and_process_i2c_data_080022f8()\n{\n  bool is_valid_bit;\n  int data_value;\n  int data_offset;\n  int data_index;\n  int data_count = 0;\n  uint bit_index = 0;\n  uint bit_mask = 0;\n  uint data_length = 0;\n  uint i2c_data_index = 0;\n  uint i2c_data_count = 0;\n  uint i2c_data_length = 0;\n  uint i2c_data_offset = 0;\n  uint i2c_data_value = 0;\n  decode_i2c_data();\n  while (data_value = execute_function_08002ec4(PTR_FUNC_080023e0), data_value != 0) {\n    process_input_from_code_08002ed2(PTR_FUNC_080023e0);\n  }\n  data_value = get_data_from_pointer_0800723c_wrapper_08008abc();\n  *(int *)PTR_DAT_080023e4 = data_value;\n  if (*(uint *)PTR_DAT_080023ec < (uint)(data_value - *(int *)PTR_DAT_080023e8)) {\n    *(uint *)PTR_DAT_080023e8 = *(int *)PTR_DAT_080023e8 + *(uint *)PTR_DAT_080023ec;\n    for (data_index = 0; data_index < 0x3c; data_index++) {\n      data_offset = data_index - 0x2e;\n      if (data_offset < 0xe) {\n        if (data_index < 0x3c) {\n          data_value = (int)(char)PTR_DAT_080023f4[data_index];\n        }\n        else {\n          data_value = -1;\n        }\n        data_value = find_char_index_080036ac(data_value);\n        if (data_value == 0) {\n          is_valid_bit = false;\n        }\n        else {\n          if (data_index < 0x3c) {\n            data_value = (int)(char)PTR_DAT_080023f4[data_index];\n          }\n          else {\n            data_value = -1;\n          }\n          data_value = find_char_index_080036ac(data_value);\n          if (data_value == 1) {\n            is_valid_bit = false;\n          }\n          else {\n            data_value = get_value_from_offset_08002fa0(PTR_FUNC_080023e0, data_index);\n            if (data_value == 2) {\n              is_valid_bit = true;\n            }\n            else {\n              is_valid_bit = false;\n            }\n          }\n        }\n      }\n      else {\n        is_valid_bit = false;\n      }\n      if ((is_valid_bit) && ((*(int *)PTR_DAT_080023f0 >> data_offset & 1U) != 0)) {\n        bit_mask = (1U << bit_index);\n        data_length = decode_param_08008880_08008880(bit_index);\n        i2c_data_offset = *(uint *)(PTR_DAT_080023fc + (data_count * 0xc) + 4);\n        i2c_data_value = *(uint *)(PTR_DAT_080023fc + (data_count * 0xc) + 8);\n        i2c_data_length = *(uint *)(PTR_DAT_080023fc + (data_count * 0xc) + 9);\n        for (i2c_data_index = 0; i2c_data_index < i2c_data_length; i2c_data_index++) {\n          if ((i2c_data_offset + i2c_data_index) == data_offset) {\n            i2c_data_value = (i2c_data_value & ~bit_mask) | ((data_length << bit_index) & bit_mask);\n          }\n        }\n        encode_data_08002ef2(PTR_FUNC_080023e0, data_offset, i2c_data_value);\n      }\n      bit_index++;\n      if (bit_index == 32) {\n        bit_index = 0;\n        data_count++;\n      }\n    }\n    if (-1 < (char)*PTR_DAT_080023f8) {\n      for (i2c_data_count = 0; (int)i2c_data_count < (char)*PTR_DAT_080023f8 + 1; i2c_data_count++) {\n        i2c_data_index = i2c_data_count * 0xc;\n        process_i2c_data(PTR_DAT_080023fc[i2c_data_index], *(undefined4 *)(PTR_DAT_080023fc + i2c_data_index + 4), PTR_DAT_080023fc[i2c_data_index + 8], PTR_DAT_080023fc[i2c_data_index + 9]);\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08002fa0",
                "FUN_08002ec4",
                "FUN_080036ac",
                "FUN_08001c18",
                "FUN_08000ef8",
                "FUN_08008880",
                "FUN_08008abc",
                "FUN_08002ed2",
                "FUN_08002ef2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080022f8",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": false,
            "current_name": "decode_and_process_i2c_data_080022f8"
        },
        "FUN_080072fa": {
            "renaming": {
                "FUN_080072fa": "initialize_and_write_data_080072fa",
                "set_flag_and_update_data_08003724": "set_flag_and_update_data",
                "initialize_and_write_data_080035b8": "initialize_and_write_data"
            },
            "code": "void initialize_and_write_data_080072fa(void)\n{\n  set_flag_and_update_data();\n  initialize_data();\n  write_data();\n  return;\n}",
            "called": [
                "FUN_080035b8",
                "FUN_08003724"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072fa",
            "calling": [
                "FUN_080036a2"
            ],
            "imported": false,
            "current_name": "initialize_and_write_data_080072fa"
        },
        "FUN_08005084": {
            "renaming": {
                "FUN_08005084": "execute_command_08005084",
                "param_1": "command",
                "cVar1": "current_char",
                "puVar2": "ptr_1",
                "puVar3": "ptr_2"
            },
            "code": "uint execute_command_08005084(uint **command) {\n    char current_char = *(char *)((int)command + 0x3d);\n    (*command)[1] = (*command)[1] & 0xfffff8ff;\n    **command = **command | 1;\n    **command = **command & 0xfffffbff;\n    uint *ptr_1 = *command;\n    if ((ptr_1[1] & 0x800) != 0) {\n        if ((*(char *)((int)command + 0x3d) == '\"') || (*(char *)((int)command + 0x3d) == '*')) {\n            *(short *)((int)command + 0x2a) = (short)*(undefined4 *)(*command[0xe] + 4);\n        }\n        else {\n            *(short *)((int)command + 0x2a) = (short)*(undefined4 *)(*command[0xd] + 4);\n        }\n    }\n    if (*(short *)((int)command + 0x2a) != 0) {\n        if ((ptr_1[5] & 4) != 0) {\n            uint *ptr_2 = command[9];\n            command[9] = (uint *)((int)ptr_2 + 1);\n            *(char *)ptr_2 = (char)ptr_1[4];\n            *(short *)((int)command + 0x2a) = *(short *)((int)command + 0x2a) + -1;\n        }\n        if (((*command)[5] & 0x40) != 0) {\n            ptr_1 = command[9];\n            command[9] = (uint *)((int)ptr_1 + 1);\n            *(char *)ptr_1 = (char)(*command)[4];\n            *(short *)((int)command + 0x2a) = *(short *)((int)command + 0x2a) + -1;\n        }\n        command[0x10] = (uint *)((uint)command[0x10] | 4);\n    }\n    if (command[0x10] == (uint *)0x0) {\n        if (((current_char == '(') || (current_char == '*')) || (current_char == ')')) {\n            command[0xb] = PTR_DAT_08005184;\n            command[0xc] = (uint *)0x0;\n            *(undefined *)((int)command + 0x3d) = 0x20;\n            *(undefined *)((int)command + 0x3e) = 0;\n            do_execute_command_08005084();\n        }\n        else if ((command[0xc] == (uint *)0x22) || (current_char == '\"')) {\n            command[0xc] = (uint *)0x0;\n            *(undefined *)((int)command + 0x3d) = 0x20;\n            *(undefined *)((int)command + 0x3e) = 0;\n            do_nothing();\n        }\n    }\n    else {\n        check_input_and_set_flag();\n    }\n    return 0;\n}",
            "called": [
                "FUN_08007ff0",
                "FUN_08004a74",
                "FUN_08004f3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005084",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "execute_command_08005084"
        },
        "FUN_0800291c": {
            "renaming": {
                "FUN_0800291c": "initialize_params_0800291c",
                "*param_1": "params",
                "PTR_PTR_FUN_0800288c_1_08002940": "func_ptr_1",
                "PTR_DAT_08002944": "data_ptr_1",
                "*(undefined *)(param_1 + 0x1b)": "params[27]",
                "*(undefined *)((int)param_1 + 0x6d)": "*(undefined*)((int)params + 0x6d)"
            },
            "code": "void initialize_params_0800291c(int* params)\n{\n    params[1] = 0;\n    params[2] = 1000;\n    params[0] = PTR_PTR_copy_data_to_buffer_0800288c_1_08002940;\n    undefined* data_ptr = PTR_DAT_08002944;\n    params[27] = data_ptr[14];\n    *(undefined*)((int)params + 0x6d) = data_ptr[15];\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800291c",
            "calling": [
                "FUN_08002948"
            ],
            "imported": false,
            "current_name": "initialize_params_0800291c"
        },
        "FUN_08002ac0": {
            "renaming": {
                "FUN_08002ac0": "validate_data_08002ac0",
                "param_1": "data",
                "param_2": "size",
                "param_3": "param_3",
                "param_4": "param_4",
                "check_data_08002a58": "check_data"
            },
            "code": "void validate_data_08002ac0(void* data, int size, void* param_3, void* param_4){\n  check_data(data, size, param_3, param_4, param_4);\n  return;\n}",
            "called": [
                "FUN_08002a58"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ac0",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "validate_data_08002ac0"
        },
        "FUN_08003346": {
            "renaming": {
                "FUN_08003346": "update_data_08003346",
                "param_1": "data_address",
                "param_2": "data_value",
                "param_3": "param_3",
                "param_4": "param_4"
            },
            "code": "void update_data_08003346(int data_address, int data_value, undefined4 param_3, undefined4 param_4)\n{\n  if (data_value == 0x79) {\n    *(undefined4 *)(data_address + 0x70) = param_3;\n    *(undefined4 *)(data_address + 0x34) = param_4;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003346",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "update_data_08003346"
        },
        "FUN_080032bc": {
            "renaming": {
                "FUN_080032bc": "initialize_data_080032bc",
                "param_1": "data",
                "param_2": "param_2",
                "param_3": "param_3",
                "uVar1": "leading_zeroes_count"
            },
            "code": "void initialize_data_080032bc(uint8_t *data, uint32_t param_2, uint32_t param_3)\n{\n    uint32_t leading_zeroes_count = count_leading_zeroes(param_2);\n    data[4] = (uint8_t)param_2;\n    data[8] = (uint8_t)param_3;\n    data[12] = 0;\n    data[13] = 0;\n    *(uint32_t *)(data + 16) = 0;\n    data[20] = 0;\n    *(uint32_t *)(data + 24) = 0;\n    *(uint32_t *)(data + 28) = 0;\n    *(uint32_t *)(data + 32) = 0;\n    *(uint32_t *)(data + 36) = 0;\n    *(uint32_t *)(data + 40) = 0;\n    *(uint32_t *)(data + 44) = 0;\n    *(uint32_t *)(data + 48) = 0;\n    *(uint32_t *)(data + 52) = 0;\n    *(uint32_t *)(data + 56) = 0;\n    *(uint32_t *)(data + 60) = 0;\n    *(uint32_t *)(data + 64) = 0;\n    *(uint32_t *)(data + 68) = 0;\n    *(uint32_t *)(data + 72) = 0;\n    *(uint32_t *)(data + 76) = 0;\n    *(uint32_t *)(data + 80) = 0;\n    *(uint32_t *)(data + 84) = 0;\n    *(uint32_t *)(data + 88) = 0;\n    *(uint32_t *)(data + 92) = 0;\n    *(uint32_t *)(data + 96) = 0;\n    *(uint32_t *)(data + 100) = 0;\n    *(uint32_t *)(data + 104) = 0;\n    *(uint32_t *)(data + 108) = 0;\n    *(uint32_t *)(data + 112) = 0;\n    *(uint32_t *)(data + 116) = 0;\n    *(uint32_t *)(data + 120) = 0;\n    *(uint32_t *)(data + 124) = 0;\n    data[0] = (uint8_t)(leading_zeroes_count >> 5);\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032bc",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "initialize_data_080032bc"
        },
        "FUN_08003106": {
            "renaming": {
                "FUN_08003106": "encode_data_08003106_08003106",
                "param_1": "data_ptr",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "func_ptr"
            },
            "code": "void encode_data_08003106_08003106(undefined4 *data_ptr, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n    undefined4 *func_ptr;\n    func_ptr = (undefined4 *)*data_ptr;\n    if (func_ptr != (undefined4 *)0x0) {\n        (**(code **)*func_ptr)(func_ptr,0xf0);\n        (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,0x6f);\n        (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,param_2);\n        encode_data_0800307a(data_ptr,param_3,param_4,param_3);\n        (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,0xf7);\n    }\n    return;\n}",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003106",
            "calling": [
                "FUN_08003158"
            ],
            "imported": false,
            "current_name": "encode_data_08003106_08003106"
        },
        "FUN_080077b0": {
            "renaming": {
                "FUN_080077b0": "FUNC_080077b0"
            },
            "code": "\nvoid FUNC_080077b0(int *param_1,int param_2,int param_3,int param_4,undefined param_5)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int iVar3;\n  undefined4 uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  int *piVar9;\n  uint local_38;\n  uint local_34;\n  uint local_30;\n  undefined4 local_2c;\n  \n  if (param_1 != (int *)0x0) {\n    piVar9 = param_1 + 1;\n    iVar2 = find_value_if_not_negative_08007320((int)*(char *)(param_1 + 0x16),PTR_DAT_08007a74);\n    iVar3 = find_value_if_not_negative_08007320((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08007a78);\n    if ((iVar2 == 0) || (iVar3 == 0)) {\n      process_data_080098d8(PTR_s_ERROR__at_least_one_I2C_pin_has_n_08007a88);\n    }\n    else {\n      iVar3 = compare_and_return_non_zero_080073ae(iVar2,iVar3);\n      *param_1 = iVar3;\n      iVar2 = DAT_08007a7c;\n      if (iVar3 == 0) {\n        process_data_080098d8(PTR_s_ERROR__I2C_pins_mismatch_08007a8c);\n      }\n      else {\n        if (iVar3 == DAT_08007a7c) {\n          *(uint *)(DAT_08007a7c + 0x1bc1c) = *(uint *)(DAT_08007a7c + 0x1bc1c) | 0x200000;\n          *(uint *)(iVar2 + 0x1bc10) = *(uint *)(iVar2 + 0x1bc10) | 0x200000;\n          *(uint *)(iVar2 + 0x1bc10) = *(uint *)(iVar2 + 0x1bc10) & 0xffdfffff;\n          *(undefined *)((int)param_1 + 0x5a) = 0x1f;\n          *(undefined *)((int)param_1 + 0x5b) = 0x20;\n          *(int **)PTR_DAT_08007a90 = piVar9;\n        }\n        iVar2 = DAT_08007a80;\n        if (*param_1 == DAT_08007a80) {\n          *(uint *)(DAT_08007a80 + 0x1b81c) = *(uint *)(DAT_08007a80 + 0x1b81c) | 0x400000;\n          *(uint *)(iVar2 + 0x1b810) = *(uint *)(iVar2 + 0x1b810) | 0x400000;\n          *(uint *)(iVar2 + 0x1b810) = *(uint *)(iVar2 + 0x1b810) & 0xffbfffff;\n          *(undefined *)((int)param_1 + 0x5a) = 0x21;\n          *(undefined *)((int)param_1 + 0x5b) = 0x22;\n          *(int **)(PTR_DAT_08007a90 + 4) = piVar9;\n        }\n        uVar4 = set_flag_08006bb8((uint)((int)*(char *)((int)param_1 + 0x59) << 0x18) >> 0x1c);\n        puVar1 = PTR_DAT_08007a78;\n        local_38 = 1 << ((int)*(char *)((int)param_1 + 0x59) & 0xfU) & 0xffff;\n        uVar5 = find_value_08007376((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08007a78);\n        uVar6 = find_value_08007376((int)*(char *)((int)param_1 + 0x59),puVar1);\n        local_34 = (uVar5 >> 3 & 1) << 4 | uVar6 & 7;\n        local_2c = 3;\n        iVar2 = find_value_08007376((int)*(char *)((int)param_1 + 0x59),puVar1);\n        local_30 = (uint)(iVar2 << 0x1a) >> 0x1e;\n        iVar3 = find_value_08007376((int)*(char *)((int)param_1 + 0x59),puVar1);\n        iVar2 = DAT_08007a84;\n        uVar7 = *(uint *)(DAT_08007a84 + 0x18) | 1;\n        *(uint *)(DAT_08007a84 + 0x18) = uVar7;\n        uVar6 = DAT_08007d4c;\n        uVar5 = DAT_08007a94;\n        uVar8 = *(uint *)(iVar2 + 0x18) & 1;\n        switch((uint)(iVar3 << 0x11) >> 0x19) {\n        case 1:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) | 0x7000001;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 2:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) & 0xfffffffe | 0x7000000;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 3:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) | 0x7000002;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 4:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) & 0xfffffffd | 0x7000000;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 5:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) | 0x7000004;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 6:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffb | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 7:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000008;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 8:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffff7 | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 9:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000030;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 10:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000010;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xb:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xc:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x70000c0;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xd:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffff3f | 0x7000040;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xe:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffff3f | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xf:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000300;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x10:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffcff | 0x7000200;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x11:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffcff | 0x7000100;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x12:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffcff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x13:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000c00;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x14:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffff3ff | 0x7000800;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x15:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffff3ff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x16:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7001000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x17:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffefff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x1b:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7008000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x1c:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffff7fff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x21:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x22:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff | 0x1000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x23:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff | 0x2000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x24:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff | 0x4000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n        }\n        calculate_flags_080040e8(uVar4,&local_38,uVar7,uVar8);\n        uVar4 = set_flag_08006bb8((uint)((int)*(char *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        puVar1 = PTR_DAT_08007a74;\n        local_38 = 1 << ((int)*(char *)(param_1 + 0x16) & 0xfU) & 0xffff;\n        uVar5 = find_value_08007376((int)*(char *)(param_1 + 0x16),PTR_DAT_08007a74);\n        uVar6 = find_value_08007376((int)*(char *)(param_1 + 0x16),puVar1);\n        local_34 = (uVar5 >> 3 & 1) << 4 | uVar6 & 7;\n        local_2c = 3;\n        iVar2 = find_value_08007376((int)*(char *)(param_1 + 0x16),puVar1);\n        local_30 = (uint)(iVar2 << 0x1a) >> 0x1e;\n        iVar3 = find_value_08007376((int)*(char *)(param_1 + 0x16),puVar1);\n        iVar2 = DAT_08007a84;\n        uVar7 = *(uint *)(DAT_08007a84 + 0x18) | 1;\n        *(uint *)(DAT_08007a84 + 0x18) = uVar7;\n        uVar6 = DAT_08007e70;\n        uVar5 = DAT_08007d4c;\n        uVar8 = *(uint *)(iVar2 + 0x18) & 1;\n        switch((uint)(iVar3 << 0x11) >> 0x19) {\n        case 1:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000001;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 2:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffe | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 3:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000002;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 4:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffd | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 5:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000004;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 6:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffb | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 7:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000008;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 8:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffff7 | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 9:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000030;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 10:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000010;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 0xb:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 0xc:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x70000c0;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 0xd:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xffffff3f | 0x7000040;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xe:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xffffff3f | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xf:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) | 0x7000300;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x10:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffffcff | 0x7000200;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x11:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffffcff | 0x7000100;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x12:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffffcff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x13:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) | 0x7000c00;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x14:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffff3ff | 0x7000800;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x15:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffff3ff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x16:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) | 0x7001000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x17:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xffffefff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x1b:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) | 0x7008000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x1c:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xffff7fff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x21:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x22:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff | 0x1000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x23:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff | 0x2000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x24:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff | 0x4000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n        }\n        calculate_flags_080040e8(uVar4,&local_38,uVar7,uVar8);\n        param_1[1] = *param_1;\n        param_1[2] = param_2;\n        param_1[3] = 0;\n        param_1[4] = param_4;\n        param_1[7] = 0xff;\n        param_1[5] = param_3;\n        param_1[6] = 0;\n        param_1[8] = 0;\n        param_1[9] = 0;\n        *(undefined *)((int)param_1 + 0x41) = 0;\n        write_bits_to_memory_08003f30((int)*(char *)((int)param_1 + 0x5a),0,1);\n        set_bit_at_index_08003f94((int)*(char *)((int)param_1 + 0x5a));\n        write_bits_to_memory_08003f30((int)*(char *)((int)param_1 + 0x5b),0,1);\n        set_bit_at_index_08003f94((int)*(char *)((int)param_1 + 0x5b));\n        calculate_values_from_pointer_080045c0(piVar9);\n        *(undefined *)((int)param_1 + 0x5d) = param_5;\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08007376",
                "FUN_080098d8",
                "FUN_080045c0",
                "FUN_080040e8",
                "FUN_08007320",
                "FUN_08006bb8",
                "FUN_080073ae",
                "FUN_08003f30",
                "FUN_08003f94"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080077b0",
            "calling": [
                "FUN_08002968"
            ],
            "imported": false,
            "current_name": "FUNC_080077b0"
        },
        "FUN_08007708": {
            "renaming": {
                "FUN_08007708": "set_flags_before_function_08007708",
                "set_flags_08007438": "set_flags"
            },
            "code": "void set_flags_before_function_08007708(void)\n{\n  set_flags();\n  return;\n}",
            "called": [
                "FUN_08007438"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007708",
            "calling": [
                "FUN_08006060"
            ],
            "imported": false,
            "current_name": "set_flags_before_function_08007708"
        },
        "FUN_0800018c": {
            "renaming": {
                "FUN_0800018c": "send_interrupt_request_0800018c",
                "param_1": "request_type",
                "param_2": "param_1",
                "param_3": "param_2",
                "param_4": "param_3",
                "uVar1": "result"
            },
            "code": "int send_interrupt_request_0800018c(int request_type, int param_1, int param_2, int param_3, int param_4) {\n  int result = 0;\n  if (*(int *)PTR_DAT_080001a4 == 0) {\n    result = send_interrupt_request_0800018c_08000188(1, param_1, 0, 0, param_4);\n  }\n  return result;\n}",
            "called": [
                "FUN_08000188"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800018c",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "send_interrupt_request_0800018c"
        },
        "FUN_08003f94": {
            "renaming": {
                "FUN_08003f94": "set_bit_at_index_08003f94",
                "param_1": "index",
                "DAT_08003fac": "data_ptr"
            },
            "code": "void set_bit_at_index_08003f94(uint index) {\n  if (index >= 0) {\n    int* DAT_08003fac = (int*)(DAT_08003fac + (index >> 5) * 4);\n    int bit_mask = 1 << (index & 0x1f);\n    *DAT_08003fac = bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f94",
            "calling": [
                "FUN_080077b0",
                "FUN_08008694",
                "FUN_0800863c",
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "set_bit_at_index_08003f94"
        },
        "FUN_08008c44": {
            "renaming": {
                "FUN_08008c44": "process_data_08008c44",
                "param_1": "data",
                "param_2": "data_size",
                "param_3": "data_type",
                "bVar1": "num_bits",
                "iVar2": "extra_bits",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "PTR_DAT_08008d14": "PTR_DAT_08008d14",
                "FUNC_08008078": "init_data",
                "validate_combination_0800863c": "validate_combination",
                "uRam08008cf0": "combination",
                "uRam08008cfc": "uRam08008cfc",
                "uRam08008cf8": "uRam08008cf8",
                "uRam08008cf4": "uRam08008cf4",
                "uRam0000012d": "uRam0000012d",
                "stack0x00000148": "stack0x00000148",
                "code": "code"
            },
            "code": "void process_data_08008c44(int data, int data_size, byte data_type) {\n  int num_bits = data_type & 7;\n  int extra_bits = 0;\n  if (num_bits == 4) {\n    extra_bits = 7;\n  }\n  else if (num_bits == 6) {\n    extra_bits = 8;\n  }\n  else if (num_bits == 2) {\n    extra_bits = 6;\n  }\n  if ((data_type & 0x30) == 0x30) {\n    set_bit(0x600, data, 0x128);\n    extra_bits++;\n  }\n  else if ((data_type & 0x20) == 0) {\n    set_bit(0, data, 0x128);\n  }\n  else {\n    set_bit(0x400, data, 0x128);\n    extra_bits++;\n  }\n  if ((data_type & 8) == 0) {\n    set_bit(0, data, 0x124);\n  }\n  else {\n    set_bit(0x2000, data, 0x124);\n  }\n  if (extra_bits == 8) {\n    set_bit(0, data, 0x120);\n  }\n  else if (extra_bits == 9) {\n    set_bit(0x1000, data, 0x120);\n  }\n  else {\n    extra_bits = 0;\n  }\n  if (extra_bits != 0) {\n    init_data(data + 0xd4);\n    validate_combination(data + 0xd4, uRam08008cf0);\n    return;\n  }\n  jump_table(data_size);\n}\n\nvoid jump_table(int data_size) {\n  code *jump_table = (code *)0x8008cee;\n  process_data_08008c44_and_wait_forever_080090cc_080090cc(uRam08008cfc, 299, uRam08008cf8, uRam08008cf4);\n  if (data_size < 0x3c) {\n    uRam0000012d = PTR_DAT_08008d14[data_size];\n  }\n  else {\n    uRam0000012d = 0xff;\n  }\n  (*jump_table)(0, data_size, &stack0x00000148);\n}\n\nvoid set_bit(int bit_value, int data, int offset) {\n  *(int *)(data + offset) = bit_value;\n}\n\nvoid init_data(int data) {\n  FUNC_08008078(data);\n}\n\nvoid validate_combination(int data, int combination) {\n  validate_combination_0800863c(data, combination);\n}",
            "called": [
                "FUN_08008078",
                "FUN_0800863c",
                "FUN_080090cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008c44",
            "calling": [
                "FUN_08003048"
            ],
            "imported": false,
            "current_name": "process_data_08008c44"
        },
        "FUN_08002a26": {
            "renaming": {
                "FUN_08002a26": "initialize_data_wrapper_08002a26",
                "param_1": "data",
                "param_2": "value",
                "param_3": "param_3",
                "param_4": "param_4"
            },
            "code": "void initialize_data_wrapper_08002a26(void* data, int value, void* param_3, void* param_4) {\n  initialize_data_08002968_wrapper_08002a1c(data, value, param_3, param_4, param_4);\n  return;\n}",
            "called": [
                "FUN_08002a1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a26",
            "calling": [
                "FUN_08000a64"
            ],
            "imported": false,
            "current_name": "initialize_data_wrapper_08002a26"
        },
        "FUN_0800430c": {
            "renaming": {
                "FUN_0800430c": "set_flags_0800430c",
                "param_1": "param_array",
                "*(uint *)(*param_1 + 0x10)": "flag",
                "*(char *)((int)param_1 + 0x3e)": "first_char",
                "param_1[0x14]": "param_1_20",
                "param_1[0x11]": "param_1_17",
                "*(char *)((int)param_1 + 0x3d)": "second_char"
            },
            "code": "uint32_t set_flags_0800430c(int *param_array)\n{\n    uint32_t *ptr = (uint32_t *)param_array[0];\n    uint32_t flag = 0;\n    if (*(char *)((int)param_array + 0x3e) == '@') {\n        if (param_array[0x14] == 0) {\n            flag = param_array[0x11] & 0xfe;\n        }\n        else {\n            flag = param_array[0x11] & 0xffU | 1;\n        }\n    }\n    else if (param_array[4] == 0x4000) {\n        if (*(char *)((int)param_array + 0x3d) == '!') {\n            flag = param_array[0x11] & 0xfe;\n        }\n        else {\n            flag = param_array[0x11] & 0xffU | 1;\n        }\n    }\n    else if (param_array[0x14] == 0) {\n        flag = (param_array[0x11] << 0x10) >> 0x17 & 6 | 0xf0;\n    }\n    else if (param_array[0x14] == 1) {\n        flag = (param_array[0x11] << 0x10) >> 0x17 & 6 | 0xf1;\n    }\n    *ptr = flag;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800430c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "set_flags_0800430c"
        },
        "FUN_08006060": {
            "renaming": {
                "FUN_08006060": "set_param_and_update_flags_08006060",
                "param_1": "param_array",
                "undefined4": "int",
                "char": "char",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int set_param_and_update_flags_08006060(int *param_array) {\n  if (param_array != NULL) {\n    if (param_array[15] == 0) {\n      *(char *)(param_array + 60) = 0;\n      set_flags_before_function_08007708();\n    }\n    *(char *)(param_array + 60) = 2;\n    update_params_08005fe8(param_array[0], param_array + 1);\n    *(char *)(param_array + 60) = 1;\n    return 0;\n  }\n  return 1;\n}",
            "called": [
                "FUN_08005fe8",
                "FUN_08007708"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006060",
            "calling": [
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "set_param_and_update_flags_08006060"
        },
        "FUN_08003350": {
            "renaming": {
                "FUN_08003350": "set_params_08003350",
                "param_1": "obj_ptr",
                "param_2": "param_value",
                "param_3": "first_param",
                "param_4": "second_param"
            },
            "code": "void set_params_08003350(int obj_ptr, int param_value, undefined4 first_param, undefined4 second_param) {\n  if (param_value == 0xf9) {\n    *(undefined4 *)(obj_ptr + 0x74) = first_param;\n    *(undefined4 *)(obj_ptr + 0x38) = second_param;\n    return;\n  }\n  if (param_value != 0xff) {\n    return;\n  }\n  *(undefined4 *)(obj_ptr + 0x78) = first_param;\n  *(undefined4 *)(obj_ptr + 0x48) = second_param;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003350",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_params_08003350"
        },
        "FUN_08009698": {
            "renaming": {
                "FUN_08009698": "FUNC_08009698"
            },
            "code": "\nuint FUNC_08009698(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  int iVar4;\n  undefined *puVar5;\n  uint uVar6;\n  uint **ppuVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined *puVar10;\n  undefined *puVar11;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  puVar11 = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_08009852;\n          if (bVar1 != 0x58) goto LAB_080096c8;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar5 = PTR_s_0123456789ABCDEF_080098d4;\nLAB_080097e2:\n          uVar6 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar6 & 0x80) == 0) && ((int)(uVar6 << 0x19) < 0)) {\n            uVar8 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar8 = *puVar3;\n          }\n          if ((int)(uVar6 << 0x1f) < 0) {\n            *param_2 = uVar6 | 0x20;\n          }\n          if (uVar8 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar6 = 0x10;\nLAB_08009778:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_080096c8;\n          uVar8 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar8 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar8 & 0x40) == 0) goto LAB_080096e8;\n            uVar8 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_080096e8:\n            uVar8 = *puVar3;\n          }\n          if ((int)uVar8 < 0) {\n            uVar8 = -uVar8;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar6 = 10;\n          puVar5 = PTR_s_0123456789ABCDEF_080098d4;\n        }\n        uVar9 = param_2[1];\n        param_2[2] = uVar9;\n        puVar10 = puVar11;\n        if ((int)uVar9 < 0) {\n          if (uVar8 != 0) goto LAB_08009816;\nLAB_080098c4:\n          *(undefined *)((int)param_2 + 0x42) = *puVar5;\n          puVar10 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar8 == 0) {\n            if (uVar9 != 0) goto LAB_080098c4;\n          }\n          else {\nLAB_08009816:\n            do {\n              uVar9 = uVar8 / uVar6;\n              puVar10 = puVar10 + -1;\n              *puVar10 = puVar5[uVar8 - uVar6 * uVar9];\n              uVar8 = uVar9;\n            } while (uVar9 != 0);\n          }\n        }\n        if (((uVar6 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar10[-1] = 0x30;\n          puVar10 = puVar10 + -1;\n        }\n        param_2[4] = (int)puVar11 - (int)puVar10;\n        puVar11 = puVar10;\n        goto LAB_080097be;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08009728:\n      puVar11 = (undefined *)((int)param_2 + 0x42);\n      uVar8 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_0800974e:\n            uVar8 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar8 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar8 & 0x40) == 0) goto LAB_0800975c;\n              uVar8 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_0800975c:\n              uVar8 = *puVar3;\n            }\n            puVar5 = PTR_s_0123456789ABCDEF_080098d4;\n            if (bVar1 == 0x6f) {\n              uVar6 = 8;\n            }\n            else {\n              uVar6 = 10;\n            }\n            goto LAB_08009778;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_0800970e:\n            puVar5 = PTR_s_0123456789abcdef_080098d0;\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            goto LAB_080097e2;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_0800974e;\n          if (bVar1 == 0x78) goto LAB_0800970e;\n        }\nLAB_080096c8:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08009728;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      puVar11 = (undefined *)*puVar3;\n      iVar2 = find_character_in_string_08009f2c(puVar11,0,param_2[1]);\n      if (iVar2 != 0) {\n        param_2[1] = iVar2 - (int)puVar11;\n      }\n      uVar8 = param_2[1];\n    }\n    param_2[4] = uVar8;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_080097be;\n  }\n  uVar8 = *param_2;\n  ppuVar7 = (uint **)*param_5;\n  uVar6 = param_2[5];\n  if ((uVar8 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\n    if ((uVar8 & 0x40) == 0) goto LAB_0800983e;\n    *(short *)puVar3 = (short)uVar6;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\nLAB_0800983e:\n    *puVar3 = uVar6;\n  }\nLAB_08009852:\n  param_2[4] = 0;\nLAB_080097be:\n  iVar2 = encode_data_080095a8(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,puVar11,param_2[4]), iVar2 == -1)) {\nLAB_080097d2:\n    uVar8 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar4 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar4 == -1) goto LAB_080097d2;\n      }\n    }\n    uVar8 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar8 = local_24[0];\n    }\n  }\n  return uVar8;\n}\n\n",
            "called": [
                "FUN_08009f2c",
                "FUN_080095a8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009698",
            "calling": [
                "FUN_0800937c"
            ],
            "imported": false,
            "current_name": "FUNC_08009698"
        },
        "FUN_08006186": {
            "renaming": {
                "FUN_08006186": "set_flags_and_values_08006186",
                "param_1": "data_ptr",
                "param_2": "data_param",
                "param_3": "update_type",
                "*(char *)(param_1 + 0xf)": "flag",
                "*(undefined *)(param_1 + 0xf)": "flag_value",
                "*(undefined *)((int)param_1 + 0x3d)": "value",
                "set_flags_and_values_08005cec": "set_flags_and_values_function_1",
                "*(uint *)(*param_1 + 0x18)": "data_ptr_value_1",
                "*(uint *)(*param_1 + 0x18) | 8": "data_ptr_value_2",
                "*(uint *)(*param_1 + 0x18) & 0xfffffffb": "data_ptr_value_3",
                "*(uint *)(param_2 + 0x10)": "data_param_value_1",
                "update_data_080060c4": "set_flags_and_values_function_2",
                "*(uint *)(*param_1 + 0x18) | 0x800": "data_ptr_value_4",
                "*(uint *)(*param_1 + 0x18) & 0xfffffbff": "data_ptr_value_5",
                "*(int *)(param_2 + 0x10) << 8": "data_param_value_2",
                "update_data_08005d48": "set_flags_and_values_function_3",
                "*(uint *)(*param_1 + 0x1c)": "data_ptr_value_6",
                "*(uint *)(*param_1 + 0x1c) | 8": "data_ptr_value_7",
                "*(uint *)(*param_1 + 0x1c) & 0xfffffffb": "data_ptr_value_8",
                "update_data_08005dac": "set_flags_and_values_function_4"
            },
            "code": "int set_flags_and_values_08006186(int *data_ptr, int data_param, int update_type) {\n    bool flag = (*(char *)(data_ptr + 0xf) != '\\x01');\n    if (flag) {\n        *(undefined *)(data_ptr + 0xf) = 1;\n        *(undefined *)((int)data_ptr + 0x3d) = 2;\n        switch(update_type) {\n            case 0:\n                set_flags_and_values_08006186_08005cec(data_param);\n                *(uint *)(*data_ptr + 0x18) = *(uint *)(*data_ptr + 0x18) | 8;\n                *(uint *)(*data_ptr + 0x18) = *(uint *)(*data_ptr + 0x18) & 0xfffffffb;\n                *(uint *)(*data_ptr + 0x18) = *(uint *)(*data_ptr + 0x18) | *(uint *)(data_param + 0x10);\n                break;\n            case 4:\n                update_data_080060c4(data_param);\n                *(uint *)(*data_ptr + 0x18) = *(uint *)(*data_ptr + 0x18) | 0x800;\n                *(uint *)(*data_ptr + 0x18) = *(uint *)(*data_ptr + 0x18) & 0xfffffbff;\n                *(uint *)(*data_ptr + 0x18) = *(uint *)(*data_ptr + 0x18) | *(int *)(data_param + 0x10) << 8;\n                break;\n            case 8:\n                update_data_08005d48(data_param);\n                *(uint *)(*data_ptr + 0x1c) = *(uint *)(*data_ptr + 0x1c) | 8;\n                *(uint *)(*data_ptr + 0x1c) = *(uint *)(*data_ptr + 0x1c) & 0xfffffffb;\n                *(uint *)(*data_ptr + 0x1c) = *(uint *)(*data_ptr + 0x1c) | *(uint *)(data_param + 0x10);\n                break;\n            case 0xc:\n                update_data_08005dac(data_param);\n                *(uint *)(*data_ptr + 0x1c) = *(uint *)(*data_ptr + 0x1c) | 0x800;\n                *(uint *)(*data_ptr + 0x1c) = *(uint *)(*data_ptr + 0x1c) & 0xfffffbff;\n                *(uint *)(*data_ptr + 0x1c) = *(uint *)(*data_ptr + 0x1c) | *(int *)(data_param + 0x10) << 8;\n        }\n        *(undefined *)((int)data_ptr + 0x3d) = 1;\n        *(undefined *)(data_ptr + 0xf) = 0;\n        return 0;\n    }\n    return 2;\n}",
            "called": [
                "FUN_080060c4",
                "FUN_08005d48",
                "FUN_08005cec",
                "FUN_08005dac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006186",
            "calling": [
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "set_flags_and_values_08006186"
        },
        "FUN_08007710": {
            "renaming": {
                "FUN_08007710": "update_flags_08007710"
            },
            "code": "void update_flags_08007710() \n{ \n  update_flags_08007710_080074e0(); \n  return; \n}",
            "called": [
                "FUN_080074e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007710",
            "calling": [
                "FUN_08005df4"
            ],
            "imported": false,
            "current_name": "update_flags_08007710"
        },
        "FUN_08003474": {
            "renaming": {
                "FUN_08003474": "process_input_08003474",
                "param_1": "input_buffer",
                "param_2": "input_length",
                "bVar1": "current_byte"
            },
            "code": "void process_input_08003474(uint32_t input_buffer, uint32_t input_length) {\n  uint8_t current_byte;\n  if (*(char *)(input_buffer + 0x14) != '\\0') {\n    if (input_length != 0xf7) {\n      check_param_range_and_store(input_buffer, input_length, *(uint32_t *)(input_buffer + 0x18));\n      *(uint32_t *)(input_buffer + 0x18) = *(uint32_t *)(input_buffer + 0x18) + 1;\n      return;\n    }\n    *(uint8_t *)(input_buffer + 0x14) = 0;\n    initialize_input_processing();\n    return;\n  }\n  if ((*(int32_t *)(input_buffer + 0x10) == 0) || (0x7f < (int32_t)input_length)) {\n    if ((int32_t)input_length < 0xf0) {\n      *(uint8_t *)(input_buffer + 0xd) = (uint8_t)input_length & 0xf;\n      input_length = input_length & 0xf0;\n    }\n    if (input_length == 0xf0) {\n      *(uint8_t *)(input_buffer + 0x14) = 1;\n      *(uint32_t *)(input_buffer + 0x18) = 0;\n      return;\n    }\n    if (input_length < 0xf1) {\n      if (input_length != 0xc0) {\n        if (input_length < 0xc1) {\n          if (input_length != 0x90) {\n            return;\n          }\n        }\n        else {\n          if (input_length == 0xd0) goto LAB_0800359c;\n          if (input_length != 0xe0) {\n            return;\n          }\n        }\nLAB_08003586:\n        *(uint32_t *)(input_buffer + 0x10) = 2;\n        *(uint8_t *)(input_buffer + 0xc) = (uint8_t)input_length;\n        return;\n      }\nLAB_0800359c:\n      *(uint32_t *)(input_buffer + 0x10) = 1;\n      *(uint8_t *)(input_buffer + 0xc) = (uint8_t)input_length;\n      return;\n    }\n    if (input_length != 0xf9) {\n      if (0xf9 < input_length) {\n        if (input_length == 0xff) {\n          initialize_struct(input_buffer);\n          return;\n        }\n        return;\n      }\n      if (1 < input_length - 0xf4) {\n        return;\n      }\n      goto LAB_08003586;\n    }\n    if (*(code **)(input_buffer + 0x74) != (code *)0x0) {\n      (**(code **)(input_buffer + 0x74))(*(uint32_t *)(input_buffer + 0x38));\n    }\n  }\n  else {\n    *(int32_t *)(input_buffer + 0x10) = *(int32_t *)(input_buffer + 0x10) + -1;\n    check_param_range_and_store();\n    if ((*(int32_t *)(input_buffer + 0x10) == 0) && (current_byte = *(uint8_t *)(input_buffer + 0xc), current_byte != 0)) {\n      if (current_byte == 0xd0) {\n        if (*(code **)(input_buffer + 0x58) != (code *)0x0) {\n          (**(code **)(input_buffer + 0x58))(*(uint32_t *)(input_buffer + 0x28),*(uint8_t *)(input_buffer + 0xd),**(uint8_t **)(input_buffer + 4));\n        }\n      }\n      else if (current_byte < 0xd1) {\n        if (current_byte == 0x90) {\n          if (*(code **)(input_buffer + 0x50) != (code *)0x0) {\n            (**(code **)(input_buffer + 0x50))(*(uint32_t *)(input_buffer + 0x20),*(uint8_t *)(input_buffer + 0xd),(uint32_t)(*(uint8_t **)(input_buffer + 4))[1] + (uint32_t)**(uint8_t **)(input_buffer + 4) * 0x80);\n          }\n        }\n        else if ((current_byte == 0xc0) && (*(code **)(input_buffer + 0x54) != (code *)0x0)) {\n          (**(code **)(input_buffer + 0x54))(*(uint32_t *)(input_buffer + 0x24),*(uint8_t *)(input_buffer + 0xd),**(uint8_t **)(input_buffer + 4));\n        }\n      }\n      else if (current_byte == 0xf4) {\n        if (*(code **)(input_buffer + 0x5c) != (code *)0x0) {\n          (**(code **)(input_buffer + 0x5c))(*(uint32_t *)(input_buffer + 0x2c),(*(uint8_t **)(input_buffer + 4))[1],**(uint8_t **)(input_buffer + 4));\n        }\n      }\n      else if (current_byte == 0xf5) {\n        if (*(code **)(input_buffer + 0x60) != (code *)0x0) {\n          (**(code **)(input_buffer + 0x60))(*(uint32_t *)(input_buffer + 0x30),(*(uint8_t **)(input_buffer + 4))[1],**(uint8_t **)(input_buffer + 4));\n        }\n      }\n      else if ((current_byte == 0xe0) && (*(code **)(input_buffer + 0x4c) != (code *)0x0)) {\n        (**(code **)(input_buffer + 0x4c))(*(uint32_t *)(input_buffer + 0x1c),*(uint8_t *)(input_buffer + 0xd),(uint32_t)(*(uint8_t **)(input_buffer + 4))[1] + (uint32_t)**(uint8_t **)(input_buffer + 4) * 0x80);\n      }\n      *(uint8_t *)(input_buffer + 0xc) = 0;\n      return;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_080033cc",
                "FUN_08003376",
                "FUN_0800344a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003474",
            "calling": [
                "FUN_08002ed2"
            ],
            "imported": false,
            "current_name": "process_input_08003474"
        },
        "FUN_08006b7c": {
            "renaming": {
                "FUN_08006b7c": "get_data_at_index_08006b7c",
                "param_1": "index",
                "DAT_08006ba4": "data_0",
                "DAT_08006bb4": "data_1",
                "DAT_08006ba8": "data_2",
                "DAT_08006bac": "data_3",
                "DAT_08006bb0": "data_4"
            },
            "code": "int get_data_at_index_08006b7c(int index) {\n    switch(index) {\n        case 0:\n            return DAT_08006ba4;\n        case 1:\n            return DAT_08006bb4;\n        case 2:\n            return DAT_08006ba8;\n        case 3:\n            return DAT_08006bac;\n        case 4:\n            return DAT_08006bb0;\n        default:\n            return 0;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b7c",
            "calling": [
                "FUN_08008a6c",
                "FUN_08008a24"
            ],
            "imported": false,
            "current_name": "get_data_at_index_08006b7c"
        },
        "FUN_08008e7c": {
            "renaming": {
                "FUN_08008e7c": "convert_to_base_08008e7c",
                "param_1": "ptr_num_to_convert",
                "param_2": "num_to_convert",
                "param_3": "base",
                "uVar2": "result",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "next_digit",
                "cVar1": "digit",
                "local_15": "reversed_digits"
            },
            "code": "undefined4 convert_to_base_08008e7c(int *ptr_num_to_convert, uint num_to_convert, uint base) {\n  char digit;\n  undefined4 result;\n  uint quotient;\n  uint remainder;\n  char reversed_digits[9];\n  reversed_digits[0] = '\\0';\n  if ((int)base < 2) {\n    base = 10;\n  }\n  char *next_digit = reversed_digits + 1;\n  do {\n    quotient = num_to_convert / base;\n    remainder = (num_to_convert & 0xff) - (quotient * base & 0xff) & 0xff;\n    next_digit--;\n    digit = (char)remainder;\n    if (remainder < 10) {\n      digit += '0';\n    }\n    else {\n      digit += '7';\n    }\n    *next_digit = digit;\n    num_to_convert = quotient;\n  } while (quotient != 0);\n  if (next_digit == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    result = find_end_of_string_08000178(ptr_num_to_convert, next_digit);\n    result = (**(code **)(*ptr_num_to_convert + 4))(ptr_num_to_convert, next_digit, result);\n  }\n  return result;\n}",
            "called": [
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e7c",
            "calling": [
                "FUN_08008ed6"
            ],
            "imported": false,
            "current_name": "convert_to_base_08008e7c"
        },
        "FUN_08003aa0": {
            "renaming": {
                "FUN_08003aa0": "check_and_update_data_08003aa0",
                "*param_1": "*data",
                "iVar1": "result",
                "puVar2": "ptr",
                "DAT_08003b84": "PTR_DAT_08003b84",
                "DAT_08003b88": "PTR_DAT_08003b88"
            },
            "code": "int check_and_update_data_08003aa0(undefined4 *data)\n{\n  int result;\n  undefined4 *ptr;\n  char *flag = (char *)(data + 9);\n  if (*flag != '\\x01') {\n    *flag = 1;\n    result = check_and_update_data_08003aa0_08003a20();\n    if (result == 0) {\n      data[10] = (data[10] & 0xfffffcfe) | 0x100;\n      ptr = (undefined4 *)*data;\n      if ((ptr == DAT_08003b84) && ((DAT_08003b84[-0xff] & 0xf0000) != 0)) {\n        data[10] |= 0x100000;\n        if ((*(uint *)(DAT_08003b88 + 4) & 0x400) != 0) {\n          data[10] = (data[10] & 0xffffcfff) | 0x1000;\n        }\n      }\n      else {\n        data[10] &= 0xffefffff;\n        if ((ptr[1] & 0x400) != 0) {\n          data[10] = (data[10] & 0xffffcfff) | 0x1000;\n        }\n      }\n      if ((data[10] & 0x1000) == 0) {\n        data[11] = 0;\n      }\n      else {\n        data[11] &= 0xfffffff9;\n      }\n      *flag = 0;\n      *ptr = 0xfffffffd;\n      data = (undefined4 *)*data;\n      if (((data[2] & 0xe0000) == 0xe0000) && ((data != DAT_08003b84) || ((DAT_08003b84[-0xff] & 0xf0000) == 0))) {\n        data[2] |= 0x500000;\n      }\n      else {\n        data[2] |= 0x100000;\n      }\n    }\n    else {\n      *flag = 0;\n    }\n    return result;\n  }\n  return 2;\n}",
            "called": [
                "FUN_08003a20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003aa0",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "check_and_update_data_08003aa0"
        },
        "FUN_08003ce8": {
            "renaming": {
                "FUN_08003ce8": "check_data_validity_08003ce8",
                "param_1": "data",
                "iVar1": "result"
            },
            "code": "int check_data_validity_08003ce8(int *data)\n{\n  int result;\n  if (data == NULL)\n  {\n    result = 1;\n  }\n  else\n  {\n    data[10] |= 2;\n    result = is_data_valid_08003b8c();\n    if (result == 0)\n    {\n      *(int *)*data = -32;\n      *(unsigned int *)(*data + 4) &= DAT_08003ddc;\n      *(unsigned int *)(*data + 8) &= DAT_08003de0;\n      *(unsigned int *)(*data + 12) &= 0xFF000000;\n      *(unsigned int *)(*data + 16) &= 0xC0000000;\n      *(unsigned int *)(*data + 20) &= 0xFFFFF000;\n      *(unsigned int *)(*data + 24) &= 0xFFFFF000;\n      *(unsigned int *)(*data + 28) &= 0xFFFFF000;\n      *(unsigned int *)(*data + 32) &= 0xFFFFF000;\n      *(unsigned int *)(*data + 36) &= 0xFFFFF000;\n      *(unsigned int *)(*data + 40) &= 0xFFFFF000;\n      *(unsigned int *)(*data + 44) &= 0xFF000000;\n      *(unsigned int *)(*data + 48) &= 0xFF000000;\n      *(unsigned int *)(*data + 52) &= 0xC0000000;\n      *(unsigned int *)(*data + 56) &= 0xC0000000;\n      *(unsigned int *)(*data + 60) &= 0xFFC00000;\n      *(unsigned int *)(*data + 64) &= 0xFFC00000;\n      set_flags_based_on_input(data);\n      data[11] = 0;\n      data[10] = 0;\n    }\n    *(char *)(data + 9) = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_08006d24",
                "FUN_08003b8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ce8",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "check_data_validity_08003ce8"
        },
        "FUN_08005fe8": {
            "renaming": {
                "FUN_08005fe8": "update_params_08005fe8",
                "param_1": "param_ptr_1",
                "param_2": "param_ptr_2",
                "uVar1": "param_1_val",
                "is_param_ptr_1_special": "is_param_ptr_1_special",
                "is_param_ptr_1_special_2": "is_param_ptr_1_special_2"
            },
            "code": "void update_params_08005fe8(uint *param_ptr_1, uint *param_ptr_2)\n{\n  uint param_1_val = *param_ptr_1;\n  bool is_param_ptr_1_special = (param_ptr_1 == DAT_0800605c) || (param_ptr_1 == (uint *)0x40000000) || (param_ptr_1 == DAT_0800605c + -0x4a00) || (param_ptr_1 == DAT_0800605c + -0x4900);\n  if (is_param_ptr_1_special)\n  {\n    param_1_val = param_1_val & 0xffffff8f | param_ptr_2[1];\n  }\n  bool is_param_ptr_1_special_2 = (param_ptr_1 == DAT_0800605c) || (param_ptr_1 == (uint *)0x40000000) || (param_ptr_1 == DAT_0800605c + -0x4a00) || (param_ptr_1 == DAT_0800605c + -0x4900);\n  if (is_param_ptr_1_special_2)\n  {\n    param_1_val = param_1_val & 0xfffffcff | param_ptr_2[3];\n  }\n  *param_ptr_1 = param_1_val & 0xffffff7f | param_ptr_2[5];\n  param_ptr_1[0xb] = param_ptr_2[2];\n  param_ptr_1[10] = *param_ptr_2;\n  if (param_ptr_1 == DAT_0800605c)\n  {\n    param_ptr_1[0xc] = param_ptr_2[4];\n  }\n  param_ptr_1[5] = 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005fe8",
            "calling": [
                "FUN_08006092",
                "FUN_08006060"
            ],
            "imported": false,
            "current_name": "update_params_08005fe8"
        },
        "FUN_08008804": {
            "renaming": {
                "FUN_08008804": "calculate_offset_08008804",
                "param_1": "offset",
                "iVar1": "current_offset",
                "puVar2": "stack_pointer"
            },
            "code": "int calculate_offset_08008804(int offset) {\n  int current_offset;\n  undefined *stack_pointer;\n  \n  if (*(int *)PTR_DAT_08008834 == 0) {\n    *(undefined **)PTR_DAT_08008834 = PTR_DAT_08008838;\n  }\n  current_offset = *(int *)PTR_DAT_08008834;\n  stack_pointer = (undefined *)(offset + current_offset);\n  if (stack_pointer <= &stack0x00000000) {\n    *(undefined **)PTR_DAT_08008834 = stack_pointer;\n    return current_offset;\n  }\n  *(undefined4 *)PTR_DAT_0800883c = 0xc;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008804",
            "calling": [
                "FUN_08009918"
            ],
            "imported": false,
            "current_name": "calculate_offset_08008804"
        },
        "FUN_0800738a": {
            "renaming": {
                "FUN_0800738a": "is_param1_in_param2_0800738a",
                "param_1": "target",
                "param_2": "values"
            },
            "code": "int is_param1_in_param2_0800738a(int target, char *values) {\n  if (target == -1) {\n    return 0;\n  }\n  while (*values != -1) {\n    if (target == *values) {\n      return 1;\n    }\n    values += 0xc;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800738a",
            "calling": [
                "FUN_080088e0",
                "FUN_08008990",
                "FUN_08001cd0",
                "FUN_0800021a",
                "FUN_080005f8",
                "FUN_08000a64"
            ],
            "imported": false,
            "current_name": "is_param1_in_param2_0800738a"
        },
        "FUN_08004e3c": {
            "renaming": {
                "FUN_08004e3c": "process_data_08004e3c",
                "param_1": "data",
                "puVar1": "ptr1",
                "param_1[0xb]": "data[11]",
                "param_1[9]": "data[9]",
                "*(short *)((int)param_1 + 0x2a)": "*(uint16_t *)((int)data + 42)",
                "*(char *)puVar1": "*(char *)ptr1",
                "*(undefined *)((int)param_1 + 0x3d)": "*(undefined *)((int)data + 61)",
                "*(undefined *)((int)param_1 + 0x3e)": "*(undefined *)((int)data + 62)",
                "*(char *)((int)param_1 + 0x3e)": "*(char *)((int)data + 62)",
                "do_nothing_08004d6a": "do_nothing_1",
                "do_nothing_08004a20": "do_nothing_2"
            },
            "code": "uint32_t process_data_08004e3c(uint32_t **data)\n{\n  uint32_t *ptr1;\n  ptr1 = data[11];\n  if (*(uint16_t *)((int)data + 42) == 3)\n  {\n    if (((ptr1 == (uint32_t *)0x4) || (ptr1 == (uint32_t *)0x8)) || (ptr1 == (uint32_t *)0xffff0000))\n    {\n      **data = **data & 0xfffffbff;\n    }\n    uint32_t *ptr2 = data[9];\n    data[9] = (uint32_t *)((int)ptr2 + 1);\n    *(char *)ptr2 = (char)(*data)[4];\n    *(uint16_t *)((int)data + 42) = *(uint16_t *)((int)data + 42) - 1;\n  }\n  else if (*(uint16_t *)((int)data + 42) == 2)\n  {\n    if (((ptr1 == (uint32_t *)0x4) || (ptr1 == (uint32_t *)0x8)) || (ptr1 == (uint32_t *)0xffff0000))\n    {\n      (*data)[1] = (*data)[1] & 0xfffffcff;\n      **data = **data | 0x200;\n    }\n    else\n    {\n      if (ptr1 == (uint32_t *)0x2)\n      {\n        **data = **data | 0x400;\n      }\n      else\n      {\n        **data = **data & 0xfffffbff;\n      }\n      (*data)[1] = (*data)[1] & 0xfffffcff;\n    }\n    uint32_t *ptr2 = data[9];\n    data[9] = (uint32_t *)((int)ptr2 + 1);\n    *(char *)ptr2 = (char)(*data)[4];\n    *(uint16_t *)((int)data + 42) = *(uint16_t *)((int)data + 42) - 1;\n    ptr2 = data[9];\n    data[9] = (uint32_t *)((int)ptr2 + 1);\n    *(char *)ptr2 = (char)(*data)[4];\n    *(undefined *)((int)data + 61) = 0x20;\n    data[12] = (uint32_t *)0x0;\n    if (*(char *)((int)data + 62) == '@')\n    {\n      *(undefined *)((int)data + 62) = 0;\n      do_nothing_08004d6a();\n    }\n    else\n    {\n      *(undefined *)((int)data + 62) = 0;\n      do_nothing_08004a20();\n    }\n  }\n  else\n  {\n    uint32_t *ptr2 = data[9];\n    data[9] = (uint32_t *)((int)ptr2 + 1);\n    *(char *)ptr2 = (char)(*data)[4];\n    *(uint16_t *)((int)data + 42) = *(uint16_t *)((int)data + 42) - 1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e3c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_data_08004e3c"
        },
        "FUN_080091a0": {
            "renaming": {
                "FUN_080091a0": "insert_node_at_head_and_assign_to_pointer_080091a0",
                "param_1": "node_value",
                "PTR_PTR_DAT_080091ac": "pointer_to_pointer_to_head_of_list",
                "insert_node_at_head_080091d8": "insert_node_at_head"
            },
            "code": "void insert_node_at_head_and_assign_to_pointer_080091a0(uint32_t* PTR_PTR_DAT_080091ac, uint32_t node_value) {\n  insert_node_at_head(PTR_PTR_DAT_080091ac, node_value);\n  return;\n}",
            "called": [
                "FUN_080091d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091a0",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "insert_node_at_head_and_assign_to_pointer_080091a0"
        },
        "FUN_08002a1c": {
            "renaming": {
                "FUN_08002a1c": "initialize_data_08002968_wrapper_08002a1c",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4"
            },
            "code": "void initialize_data_08002968_wrapper_08002a1c(undefined4 data1, undefined data2, undefined4 data3, undefined4 data4)\n{\n  initialize_data_08002968(data1, data2, data3, data4, data4);\n  return;\n}",
            "called": [
                "FUN_08002968"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a1c",
            "calling": [
                "FUN_08002a26"
            ],
            "imported": false,
            "current_name": "initialize_data_08002968_wrapper_08002a1c"
        },
        "FUN_08007718": {
            "renaming": {
                "FUN_08007718": "decrement_by_four_08007718",
                "param_1": "value"
            },
            "code": "int decrement_by_four_08007718(int value)\n{\n  return value - 4;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007718",
            "calling": [
                "FUN_0800771c",
                "FUN_08007736"
            ],
            "imported": false,
            "current_name": "decrement_by_four_08007718"
        },
        "FUN_08002948": {
            "renaming": {
                "FUN_08002948": "initialize_if_param_one_is_true_08002948",
                "param_1": "first_param",
                "param_2": "second_param",
                "initialize_params_0800291c": "initialize_params"
            },
            "code": "void initialize_if_param_one_is_true_08002948(int first_param, int second_param) { \n  if (first_param != 1) { \n    return; \n  } \n  if (second_param == 0xffff) { \n    initialize_params(PTR_DAT_08002964); \n  } \n  return; \n}",
            "called": [
                "FUN_0800291c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002948",
            "calling": [
                "FUN_08002c1e"
            ],
            "imported": false,
            "current_name": "initialize_if_param_one_is_true_08002948"
        },
        "FUN_08009e64": {
            "renaming": {
                "FUN_08009e64": "check_permissions_08009e64",
                "param_1": "base_address",
                "param_2": "segment_size",
                "param_3": "permission_code",
                "param_4": "result",
                "iVar1": "set_mem_result",
                "uVar2": "permission_value",
                "auStack_4c": "segment_flags",
                "local_48": "unused_variable"
            },
            "code": "int check_permissions_08009e64(uint32_t base_address, int segment_size, uint32_t *permission_code, uint32_t *result) {\n  int set_mem_result;\n  uint32_t permission_value;\n  uint32_t segment_flags;\n  if ((*(short *)(segment_size + 0xE) < 0) || ((set_mem_result = set_memory_permissions(base_address, (int)*(short *)(segment_size + 0xE), &permission_value)) < 0)) {\n    *result = 0;\n    if ((int)((uint)*(ushort *)(segment_size + 0xC) << 0x18) < 0) {\n      permission_value = 0x40;\n      goto LAB_08009ea4;\n    }\n  }\n  else {\n    segment_flags = set_mem_result & 0xF000;\n    *result = (uint32_t)(segment_flags == 0x2000);\n  }\n  permission_value = 0x400;\n  LAB_08009ea4:\n  *permission_code = permission_value;\n  return 0;\n}\n",
            "called": [
                "FUN_0800a0ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e64",
            "calling": [
                "FUN_08009eac"
            ],
            "imported": false,
            "current_name": "check_permissions_08009e64"
        },
        "FUN_08002acc": {
            "renaming": {
                "FUN_08002acc": "allocate_and_copy_data_08002acc",
                "param_1": "data",
                "param_2": "size",
                "param_3": "dest",
                "param_4": "src",
                "puVar1": "dest_ptr",
                "iVar2": "allocated_data",
                "uVar3": "padding",
                "PTR_DAT_08002afc": "dest_ptr",
                "*PTR_DAT_08002af8": "src_ptr"
            },
            "code": "void allocate_and_copy_data_08002acc(uint data, uint size, uint dest, uint src, uint padding)\n{\n    uint* PTR_DAT_08002afc = (uint*)dest;\n    uint* *PTR_DAT_08002af8 = (uint*)src;\n\n    if (**PTR_DAT_08002af8 < size)\n    {\n        if (size < 0x20)\n        {\n            size = 0x20;\n        }\n\n        uint* allocated_data = allocate_and_copy_data_08002acc_08009908(*PTR_DAT_08002afc, size, padding, **PTR_DAT_08002af8, padding);\n        *PTR_DAT_08002afc = allocated_data;\n\n        if (allocated_data == 0)\n        {\n            **PTR_DAT_08002af8 = 0;\n        }\n        else\n        {\n            **PTR_DAT_08002af8 = size;\n        }\n    }\n}",
            "called": [
                "FUN_08009908"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002acc",
            "calling": [
                "FUN_08002b68"
            ],
            "imported": false,
            "current_name": "allocate_and_copy_data_08002acc"
        },
        "FUN_08002a30": {
            "renaming": {
                "FUN_08002a30": "initialize_data_08002a30",
                "param_1": "flag",
                "param_2": "value"
            },
            "code": "void initialize_data_08002a30(int flag, int value) {\n    *PTR_DAT_08002a48 = 1;\n    *PTR_DAT_08002a4c = (char)(value << 1);\n    *PTR_DAT_08002a50 = 0;\n    *PTR_DAT_08002a54 = 0;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a30",
            "calling": [
                "FUN_08002b68",
                "FUN_08001cd0",
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "initialize_data_08002a30"
        },
        "FUN_0800932c": {
            "renaming": {
                "FUN_0800932c": "insert_byte_into_array_0800932c",
                "param_1": "array_ptr",
                "param_2": "byte_to_insert",
                "param_3": "array",
                "iVar1": "array_length",
                "pbVar2": "last_element_ptr",
                "pbVar3": "node_state_ptr",
                "uVar4": "byte_to_insert_uint",
                "PTR_DAT_08009a74": "ptr1",
                "PTR_DAT_08009a78": "ptr2",
                "PTR_DAT_08009a7c": "ptr3"
            },
            "code": "uint insert_byte_into_array_0800932c(int array_ptr, byte byte_to_insert, byte **array) {\n  int array_length = *(int *)(array_ptr + 0x14);\n  byte *last_element_ptr = array[2] - 1;\n  array[2] = last_element_ptr;\n  if ((last_element_ptr >= 0) || ((array[6] <= last_element_ptr) && (byte_to_insert != 0xa))) {\n    byte *next_element_ptr = *array;\n    *array = next_element_ptr + 1;\n    *next_element_ptr = byte_to_insert;\n    return (uint)byte_to_insert;\n  }\n  if ((array_ptr != 0) && (*(int *)(array_ptr + 0x18) == 0)) {\n    initialize_arrays_and_data_08009d50();\n  }\n  if (array == (byte **)PTR_DAT_08009a74) {\n    array = *(byte ***)(array_ptr + 4);\n  }\n  else if (array == (byte **)PTR_DAT_08009a78) {\n    array = *(byte ***)(array_ptr + 8);\n  }\n  else if (array == (byte **)PTR_DAT_08009a7c) {\n    array = *(byte ***)(array_ptr + 0xc);\n  }\n  array[2] = array[6];\n  byte *node_state_ptr = (byte *)(uint)*(ushort *)(array + 3);\n  int shift = 0x1c;\n  int node_state = (int)node_state_ptr << shift;\n  if (((node_state < 0) && ((node_state_ptr = array[4]) != (byte *)0x0)) || ((node_state = update_node_state_08009a80(array_ptr, array, node_state, node_state_ptr, next_element_ptr)) == 0)) {\n    uint byte_to_insert_uint = (uint)byte_to_insert;\n    int array_offset = (int)*array - (int)array[4];\n    if ((array_offset < (int)array[5]) || ((node_state = process_data_08009c7c(array_ptr, array)) == 0)) {\n      array[2] = array[2] - 1;\n      byte *next_element_ptr = *array;\n      *array = next_element_ptr + 1;\n      *next_element_ptr = byte_to_insert;\n      if ((byte *)(node_state + 1) != array[5]) {\n        if (-1 < (int)((uint)*(ushort *)(array + 3) << 0x1f)) {\n          return byte_to_insert_uint;\n        }\n        if (byte_to_insert_uint != 10) {\n          return byte_to_insert_uint;\n        }\n      }\n      node_state = process_data_08009c7c(array_ptr, array);\n      if (node_state == 0) {\n        return byte_to_insert_uint;\n      }\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [
                "FUN_08009c7c",
                "FUN_08009a80",
                "FUN_08009d50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800932c",
            "calling": [
                "FUN_08009358"
            ],
            "imported": false,
            "current_name": "insert_byte_into_array_0800932c"
        },
        "FUN_0800322c": {
            "renaming": {
                "FUN_0800322c": "execute_function_with_params_0800322c",
                "param_1": "function_pointer",
                "param_2": "param_2",
                "param_3": "param_3",
                "puVar1": "next_function_pointer"
            },
            "code": "void execute_function_with_params_0800322c(undefined4 *function_pointer, undefined4 param_2, undefined4 param_3) {\n  undefined4 *next_function_pointer = (undefined4 *)*function_pointer;\n  if (next_function_pointer != (undefined4 *)0x0) {\n    (**(code **)*next_function_pointer)(next_function_pointer, 0xf9);\n    (***(code ***)(undefined4 *)*function_pointer)((undefined4 *)*function_pointer, param_2);\n    (***(code ***)(undefined4 *)*function_pointer)((undefined4 *)*function_pointer, param_3);\n    return;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800322c",
            "calling": [
                "FUN_08002ddc"
            ],
            "imported": false,
            "current_name": "execute_function_with_params_0800322c"
        },
        "FUN_080099a4": {
            "renaming": {
                "FUN_080099a4": "find_substring_080099a4",
                "param_1": "string",
                "param_2": "substring",
                "pcVar1": "current_char_in_string",
                "pcVar2": "last_char_in_string",
                "pcVar3": "last_char_in_substring"
            },
            "code": "char* find_substring_080099a4(char* string, char* substring) {\n    char* current_char_in_string = string;\n    if (*string == '\\0') {\n        if (*substring != '\\0') {\n            string = NULL;\n        }\n        return string;\n    }\n    while (true) {\n        char* current_char_in_substring = substring;\n        char* last_char_in_substring = substring - 1;\n        char* last_char_in_string = current_char_in_string - 1;\n        do {\n            last_char_in_substring++;\n            if (*last_char_in_substring == '\\0') {\n                return current_char_in_string;\n            }\n            last_char_in_string++;\n            current_char_in_string++;\n        } while (*last_char_in_string == *last_char_in_substring);\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080099a4",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "find_substring_080099a4"
        },
        "FUN_08005a1c": {
            "renaming": {
                "FUN_08005a1c": "get_ptr_dat_value_08005a1c",
                "PTR_DAT_08005a24": "ptr_dat_value"
            },
            "code": "int get_ptr_dat_value_08005a1c(void)\n{\n    int* PTR_DAT_08005a24 = (int*)PTR_DAT_08005a24;\n    return *PTR_DAT_08005a24;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a1c",
            "calling": [
                "FUN_080035b8",
                "FUN_08005a48",
                "FUN_08005a28"
            ],
            "imported": false,
            "current_name": "get_ptr_dat_value_08005a1c"
        },
        "FUN_08001cd0": {
            "renaming": {
                "FUN_08001cd0": "FUNC_08001cd0"
            },
            "code": "\nvoid FUNC_08001cd0(undefined4 param_1,int param_2,byte *param_3,undefined4 param_4)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte bVar3;\n  undefined *puVar4;\n  undefined *puVar5;\n  undefined4 uVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  int iVar10;\n  char cVar11;\n  uint uVar12;\n  uint uVar13;\n  int iVar14;\n  bool bVar15;\n  \n  puVar5 = PTR_DAT_080022e8;\n  puVar4 = PTR_DAT_08002044;\n  switch(param_1) {\n  case 0x69:\n    execute_function_pointer_08002f1e(PTR_DAT_080022e8,0xf0);\n    execute_function_pointer_08002f1e(puVar5,0x6a);\n    for (uVar12 = 0; uVar12 < 0x3c; uVar12 = uVar12 + 1 & 0xff) {\n      uVar13 = uVar12 - 0x2e & 0xff;\n      if (uVar13 < 0xe) {\n        if (uVar12 < 0x3c) {\n          iVar9 = (int)(char)PTR_DAT_080022e4[uVar12];\n        }\n        else {\n          iVar9 = -1;\n        }\n        iVar9 = find_char_index_080036ac(iVar9);\n        if (iVar9 == 0) {\n          uVar13 = 0x7f;\n        }\n        else {\n          if (uVar12 < 0x3c) {\n            iVar9 = (int)(char)PTR_DAT_080022e4[uVar12];\n          }\n          else {\n            iVar9 = -1;\n          }\n          iVar9 = find_char_index_080036ac(iVar9);\n          if (iVar9 == 1) {\n            uVar13 = 0x7f;\n          }\n        }\n      }\n      else {\n        uVar13 = 0x7f;\n      }\n      execute_function_pointer_08002f1e(PTR_DAT_080022e8,uVar13);\n    }\n    execute_function_pointer_08002f1e(PTR_DAT_080022e8,0xf7);\n    break;\n  case 0x6b:\n    execute_function_pointer_08002f1e(PTR_DAT_08002044,0xf0);\n    execute_function_pointer_08002f1e(puVar4,0x6c);\n    for (uVar12 = 0; uVar12 < 0x3c; uVar12 = uVar12 + 1 & 0xff) {\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          bVar15 = false;\n        }\n        else {\n          iVar9 = find_char_index_080036ac();\n          if (iVar9 == 0) {\n            bVar15 = false;\n          }\n          else {\n            iVar9 = find_char_index_080036ac((int)(char)PTR_DAT_08002060[uVar12]);\n            if (iVar9 == 1) {\n              bVar15 = false;\n            }\n            else {\n              bVar15 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      puVar4 = PTR_DAT_08002044;\n      if (bVar15) {\n        execute_function_pointer_08002f1e(PTR_DAT_08002044,0);\n        execute_function_pointer_08002f1e(puVar4,1);\n        execute_function_pointer_08002f1e(puVar4,0xb);\n        execute_function_pointer_08002f1e(puVar4,1);\n        execute_function_pointer_08002f1e(puVar4,1);\n        execute_function_pointer_08002f1e(puVar4,1);\n      }\n      if ((uVar12 - 0x2e & 0xff) < 0xe) {\n        if (uVar12 < 0x3c) {\n          iVar9 = (int)(char)PTR_DAT_08002060[uVar12];\n        }\n        else {\n          iVar9 = -1;\n        }\n        iVar9 = find_char_index_080036ac(iVar9);\n        if (iVar9 == 0) {\n          bVar15 = false;\n        }\n        else {\n          if (uVar12 < 0x3c) {\n            iVar9 = (int)(char)PTR_DAT_08002060[uVar12];\n          }\n          else {\n            iVar9 = -1;\n          }\n          iVar9 = find_char_index_080036ac(iVar9);\n          if (iVar9 == 1) {\n            bVar15 = false;\n          }\n          else {\n            bVar15 = true;\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (bVar15) {\n        execute_function_pointer_08002f1e(PTR_DAT_080022e8,2);\n        execute_function_pointer_08002f1e(puVar4,10);\n      }\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          iVar9 = 0;\n        }\n        else {\n          iVar9 = find_char_index_080036ac();\n          if (iVar9 == 0) {\n            iVar9 = 0;\n          }\n          else {\n            iVar9 = find_char_index_080036ac((int)(char)PTR_DAT_080022e4[uVar12]);\n            if (iVar9 == 1) {\n              iVar9 = 0;\n            }\n            else {\n              iVar9 = is_param1_in_param2_0800738a((int)(char)PTR_DAT_080022e4[uVar12],PTR_DAT_080022ec);\n            }\n          }\n        }\n      }\n      else {\n        iVar9 = 0;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (iVar9 != 0) {\n        execute_function_pointer_08002f1e(PTR_DAT_080022e8,3);\n        execute_function_pointer_08002f1e(puVar4,8);\n      }\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          bVar15 = false;\n        }\n        else {\n          iVar9 = find_char_index_080036ac();\n          if (iVar9 == 0) {\n            bVar15 = false;\n          }\n          else {\n            iVar9 = find_char_index_080036ac((int)(char)PTR_DAT_080022e4[uVar12]);\n            if (iVar9 == 1) {\n              bVar15 = false;\n            }\n            else {\n              bVar15 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (bVar15) {\n        execute_function_pointer_08002f1e(PTR_DAT_080022e8,4);\n        execute_function_pointer_08002f1e(puVar4,0xe);\n      }\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          iVar9 = 0;\n        }\n        else {\n          iVar9 = find_char_index_080036ac();\n          if (iVar9 == 0) {\n            iVar9 = 0;\n          }\n          else {\n            iVar9 = find_char_index_080036ac((int)(char)PTR_DAT_080022e4[uVar12]);\n            if (iVar9 == 1) {\n              iVar9 = 0;\n            }\n            else {\n              iVar9 = is_param1_in_param2_0800738a((int)(char)PTR_DAT_080022e4[uVar12],PTR_DAT_080022f0);\n              if (iVar9 == 0) {\n                iVar9 = is_param1_in_param2_0800738a((int)(char)PTR_DAT_080022e4[uVar12],PTR_DAT_080022f4);\n              }\n            }\n          }\n        }\n      }\n      else {\n        iVar9 = 0;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (iVar9 != 0) {\n        execute_function_pointer_08002f1e(PTR_DAT_080022e8,6);\n        execute_function_pointer_08002f1e(puVar4,1);\n      }\n      execute_function_pointer_08002f1e(PTR_DAT_080022e8,0x7f);\n    }\n    execute_function_pointer_08002f1e(PTR_DAT_080022e8,0xf7);\n    return;\n  case 0x6d:\n    if (param_2 != 0) {\n      bVar1 = *param_3;\n      execute_function_pointer_08002f1e(PTR_DAT_080022e8,0xf0);\n      execute_function_pointer_08002f1e(puVar5,0x6e);\n      execute_function_pointer_08002f1e(puVar5,bVar1);\n      if (bVar1 < 0x3c) {\n        uVar6 = get_value_from_offset_08002fa0(puVar5,bVar1);\n        execute_function_pointer_08002f1e(puVar5,uVar6);\n        uVar12 = get_value_at_index_08002fba(puVar5,bVar1);\n        execute_function_pointer_08002f1e(puVar5,uVar12 & 0x7f);\n        uVar12 = get_value_at_index_08002fba(puVar5,bVar1);\n        if ((uVar12 & 0xff80) != 0) {\n          iVar9 = get_value_at_index_08002fba(puVar5,bVar1);\n          execute_function_pointer_08002f1e(puVar5,(uint)(iVar9 << 0x12) >> 0x19);\n        }\n        uVar12 = get_value_at_index_08002fba(PTR_DAT_080022e8,bVar1);\n        puVar4 = PTR_DAT_080022e8;\n        if ((uVar12 & 0xc000) != 0) {\n          iVar9 = get_value_at_index_08002fba(PTR_DAT_080022e8,bVar1);\n          execute_function_pointer_08002f1e(puVar4,(uint)(iVar9 << 0xb) >> 0x19);\n        }\n      }\n      execute_function_pointer_08002f1e(PTR_DAT_080022e8,0xf7);\n      return;\n    }\n    break;\n  case 0x6f:\n    if (1 < param_2) {\n      uVar12 = (uint)param_3[1];\n      if (2 < param_2) {\n        uVar12 = uVar12 | (uint)param_3[2] << 7;\n      }\n      if (3 < param_2) {\n        uVar12 = uVar12 | (uint)param_3[3] << 0xe;\n      }\n      decode_and_set_data_08000214(*param_3,uVar12);\n      return;\n    }\n    break;\n  case 0x70:\n    if (4 < param_2) {\n      uVar12 = (uint)*param_3;\n      bVar1 = param_3[1];\n      bVar7 = param_3[2];\n      bVar2 = param_3[3];\n      bVar3 = param_3[4];\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_08002060[uVar12] == -1) {\n          bVar15 = false;\n        }\n        else {\n          iVar9 = find_char_index_080036ac();\n          if (iVar9 == 0) {\n            bVar15 = false;\n          }\n          else {\n            iVar9 = find_char_index_080036ac((int)(char)PTR_DAT_08002060[uVar12]);\n            if (iVar9 == 1) {\n              bVar15 = false;\n            }\n            else {\n              bVar15 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      if (bVar15) {\n        if ((byte)PTR_DAT_08002064[uVar12] < 0xc) {\n          iVar9 = get_byte_from_ptr_dat_080026f8(PTR_DAT_08002068 + (uint)(byte)PTR_DAT_08002064[uVar12] * 3);\n        }\n        else {\n          iVar9 = 0;\n        }\n        if (iVar9 != 0) {\n          process_byte_08000588(uVar12);\n        }\n        decode_servo_data_08000500(uVar12,(uint)bVar1 + (uint)bVar7 * 0x80,(uint)bVar2 + (uint)bVar3 * 0x80);\n        FUNC_080005f8(uVar12,4);\n        return;\n      }\n    }\n    break;\n  case 0x76:\n    bVar1 = param_3[1];\n    bVar7 = bVar1 & 0x18;\n    if ((bVar1 & 0x20) != 0) {\n      encode_data_08002f14(PTR_DAT_08002044,PTR_s_10_bit_addressing_not_supported_08002040,bVar7,bVar1,\n                   param_4);\n      return;\n    }\n    bVar2 = *param_3;\n    bVar15 = (bVar1 & 0x40) == 0;\n    if (bVar7 < 0x19) {\n      switch(bVar7) {\n      case 0:\n        initialize_data_08002a30(PTR_DAT_08002048,bVar2);\n        for (uVar12 = 2; (int)uVar12 < param_2; uVar12 = uVar12 + 2 & 0xff) {\n          copy_data_to_buffer_08001bf8(param_3[uVar12 + 1] * -0x80 + param_3[uVar12]);\n        }\n        validate_data_08002ac0(PTR_DAT_08002048);\n        return;\n      case 8:\n        if (param_2 == 6) {\n          iVar9 = (uint)param_3[2] + (uint)param_3[3] * 0x80;\n          cVar8 = param_3[4] + param_3[5] * -0x80;\n        }\n        else {\n          cVar8 = param_3[2] + param_3[3] * -0x80;\n          iVar9 = -1;\n        }\n        process_i2c_data_08001c18(bVar2,iVar9,cVar8);\n        return;\n      case 0x10:\n        cVar8 = *PTR_DAT_0800204c;\n        if (cVar8 + 1 < 8) {\n          if (param_2 == 6) {\n            iVar9 = (uint)param_3[2] + (uint)param_3[3] * 0x80;\n            cVar11 = param_3[4] + param_3[5] * -0x80;\n          }\n          else {\n            cVar11 = param_3[2] + param_3[3] * -0x80;\n            iVar9 = -1;\n          }\n          *PTR_DAT_0800204c = cVar8 + '\\x01';\n          puVar4 = PTR_DAT_08002050;\n          iVar10 = (char)(cVar8 + '\\x01') * 0xc;\n          PTR_DAT_08002050[iVar10] = bVar2;\n          *(int *)(puVar4 + iVar10 + 4) = iVar9;\n          puVar4[iVar10 + 8] = cVar11;\n          puVar4[iVar10 + 9] = bVar15;\n          return;\n        }\n        encode_data_08002f14(PTR_DAT_08002044,PTR_s_too_many_queries_08002054,(int)cVar8,bVar15,param_4);\n        return;\n      case 0x18:\n        cVar8 = *PTR_DAT_0800204c;\n        if (cVar8 < 1) {\n          *PTR_DAT_0800204c = 0xff;\n          return;\n        }\n      }\n      for (uVar12 = 0; iVar9 = cVar8 + 1, (int)uVar12 < iVar9; uVar12 = uVar12 + 1 & 0xff) {\n        if (bVar2 == PTR_DAT_08002050[uVar12 * 0xc]) goto LAB_08001e66;\n      }\n      uVar12 = 0;\nLAB_08001e66:\n      for (; puVar4 = PTR_DAT_08002050, (int)uVar12 < iVar9; uVar12 = uVar12 + 1 & 0xff) {\n        if (uVar12 < 8) {\n          iVar10 = (uVar12 + 1) * 0xc;\n          iVar14 = uVar12 * 0xc;\n          PTR_DAT_08002050[iVar14] = PTR_DAT_08002050[iVar10];\n          *(undefined4 *)(puVar4 + iVar14 + 4) = *(undefined4 *)(puVar4 + iVar10 + 4);\n          puVar4[iVar14 + 8] = puVar4[iVar10 + 8];\n          puVar4[iVar14 + 9] = puVar4[iVar10 + 9];\n        }\n      }\n      *PTR_DAT_0800204c = cVar8 + -1;\n      return;\n    }\n    break;\n  case 0x78:\n    iVar9 = (uint)*param_3 + (uint)param_3[1] * 0x80;\n    if ((1 < param_2) && (iVar9 != 0)) {\n      *(int *)PTR_DAT_08002058 = iVar9;\n    }\n    if (*PTR_DAT_0800205c == '\\0') {\n      process_data_08000a64_08000a64();\n      return;\n    }\n    break;\n  case 0x7a:\n    if ((1 < param_2) &&\n       (iVar9 = (uint)*param_3 + (uint)param_3[1] * 0x80, *(int *)PTR_DAT_0800206c = iVar9,\n       iVar9 == 0)) {\n      *(undefined4 *)PTR_DAT_0800206c = 1;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08002fba",
                "FUN_08002fa0",
                "FUN_080036ac",
                "FUN_08002ac0",
                "FUN_0800738a",
                "FUN_08002f1e",
                "FUN_080026f8",
                "FUN_08000588",
                "FUN_08000214",
                "FUN_08001bf8",
                "FUN_08002f14",
                "FUN_08000500",
                "FUN_08002a30",
                "FUN_08001c18",
                "FUN_08000a64",
                "FUN_080005f8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001cd0",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_08001cd0"
        },
        "FUN_08003760": {
            "renaming": {
                "FUN_08003760": "get_data_from_pointer_08003760",
                "PTR_DAT_08003768": "data_pointer"
            },
            "code": "int get_data_from_pointer_08003760() {\n    int* PTR_DAT_08003768 = PTR_DAT_08003768;\n    int data = *PTR_DAT_08003768;\n    return data;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003760",
            "calling": [
                "FUN_08008500",
                "FUN_080058d2",
                "FUN_0800723c",
                "FUN_08007f0e",
                "FUN_080067ac",
                "FUN_08005460",
                "FUN_08007e74",
                "FUN_08003e20",
                "FUN_08003a20",
                "FUN_08005aa4",
                "FUN_0800376c",
                "FUN_08003b8c",
                "FUN_080066e8"
            ],
            "imported": false,
            "current_name": "get_data_from_pointer_08003760"
        },
        "FUN_08007320": {
            "renaming": {
                "FUN_08007320": "find_value_if_not_negative_08007320",
                "param_1": "value",
                "uVar1": "found_value",
                "find_value_in_array_08007306": "search_value_in_array"
            },
            "code": "int find_value_if_not_negative_08007320(int value)\n{\n  int found_value;\n  if (value != -1) {\n    found_value = search_value_in_array();\n    return found_value;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08007306"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007320",
            "calling": [
                "FUN_080077b0",
                "FUN_08006d80",
                "FUN_08008500",
                "FUN_080084b0",
                "FUN_080071e4",
                "FUN_08008078",
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "find_value_if_not_negative_08007320"
        },
        "FUN_08000be8": {
            "renaming": {
                "FUN_08000be8": "execute_function_08000be8",
                "param_1": "index",
                "param_2": "mask",
                "param_3": "flag",
                "param_4": "data",
                "puVar1": "original_address",
                "puVar2": "filtered_address",
                "PTR_DAT_08000c0c": "function_addresses",
                "PTR_DAT_08000c10": "char_array",
                "PTR_DAT_08000c14": "function_with_data"
            },
            "code": "void execute_function_08000be8(int index, uint32_t mask, int flag, undefined4 data)\n{\n  undefined *filtered_address;\n  undefined *original_address;\n  filtered_address = (undefined *)((byte)PTR_DAT_08000c0c[index] & mask);\n  original_address = PTR_DAT_08000c0c[index];\n  if ((flag != 0) || (filtered_address != original_address)) {\n    execute_PTR_DAT_08000c14(PTR_DAT_08000c14, index, filtered_address, original_address, data);\n    PTR_DAT_08000c0c[index] = (char)filtered_address;\n  }\n  return;\n}",
            "called": [
                "FUN_08002efe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000be8",
            "calling": [
                "FUN_08000ef8"
            ],
            "imported": false,
            "current_name": "execute_function_08000be8"
        },
        "FUN_08003fd8": {
            "renaming": {
                "FUN_08003fd8": "calculate_param_minus_one_08003fd8",
                "param_1": "input_param",
                "puVar1": "data_pointer",
                "DAT_08003ffc": "data_pointer",
                "DAT_08004000": "other_data_pointer"
            },
            "code": "undefined4 calculate_param_minus_one_08003fd8(uint32_t input_param)\n{\n  undefined4 *DAT_08003ffc;\n  DAT_08003ffc = DAT_08003ffc;\n  if (input_param - 1U < 0x1000000) {\n    DAT_08003ffc[1] = input_param - 1U;\n    *(undefined *)(DAT_08004000 + 0x23) = 0xf0;\n    DAT_08003ffc[2] = 0;\n    *DAT_08003ffc = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fd8",
            "calling": [
                "FUN_080035b8",
                "FUN_080036d8"
            ],
            "imported": false,
            "current_name": "calculate_param_minus_one_08003fd8"
        },
        "FUN_0800307a": {
            "renaming": {
                "FUN_0800307a": "encode_data_0800307a",
                "param_1": "ptr_func",
                "param_2": "num_bytes",
                "param_3": "data",
                "param_4": "max_bytes",
                "uVar1": "current_byte",
                "uVar2": "bit_count",
                "uVar3": "byte_count",
                "uVar4": "temp_byte"
            },
            "code": "void encode_data_0800307a(uint32_t *ptr_func, uint32_t num_bytes, uint8_t *data, uint32_t max_bytes) {\n  uint32_t current_byte = (uint32_t)*data;\n  if (max_bytes == 0) {\n    max_bytes = 0xffffffff;\n  }\n  uint32_t bit_count = 0;\n  uint32_t byte_count = 0;\n  uint32_t temp_byte = 0;\n  while ((byte_count < num_bytes) && (bit_count < max_bytes)) {\n    (***(code ***)(uint32_t *)*ptr_func)((uint32_t *)*ptr_func, ((uint32_t)data[byte_count] << (bit_count & 0xff) | current_byte) & 0x7f);\n    current_byte = (int)(uint32_t)data[byte_count] >> (7 - bit_count & 0xff) & 0xff;\n    bit_count = bit_count + 1;\n    while ((byte_count = byte_count + 1, 6 < bit_count && (byte_count < max_bytes))) {\n      (***(code ***)(uint32_t *)*ptr_func)((uint32_t *)*ptr_func, current_byte & 0x7f);\n      current_byte = current_byte >> 7;\n      bit_count = bit_count - 7;\n    }\n    byte_count = byte_count + 1;\n  }\n  if ((bit_count != 0) && (byte_count < max_bytes)) {\n    (***(code ***)(uint32_t *)*ptr_func)((uint32_t *)*ptr_func, (1 << (bit_count & 0xff)) - 1U & current_byte);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800307a",
            "calling": [
                "FUN_080031ce",
                "FUN_0800325a",
                "FUN_08003158",
                "FUN_08003106",
                "FUN_0800319e"
            ],
            "imported": false,
            "current_name": "encode_data_0800307a"
        },
        "FUN_08004b80": {
            "renaming": {
                "FUN_08004b80": "do_nothing_08004b80"
            },
            "code": "\nvoid do_nothing_08004b80(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b80",
            "calling": [
                "FUN_08004b82",
                "FUN_08004ccc"
            ],
            "imported": false,
            "current_name": "do_nothing_08004b80"
        },
        "FUN_0800319e": {
            "renaming": {
                "FUN_0800319e": "execute_function_with_data_0800319e",
                "param_1": "function_pointer",
                "param_2": "data_length",
                "param_3": "data",
                "puVar1": "ptr_to_function_pointer",
                "local_a": "modified_data",
                "encode_data_0800307a": "encode_data"
            },
            "code": "void execute_function_with_data_0800319e(void* function_pointer, uint32_t data_length, uint16_t data) {\n    void* ptr_to_function_pointer = *(void**)function_pointer;\n    if (ptr_to_function_pointer != NULL) {\n        uint32_t modified_data = data_length & 0xf | 0x90;\n        (*(void(*)(void*, uint32_t))ptr_to_function_pointer)(ptr_to_function_pointer, modified_data);\n        encode_data(&function_pointer, 2, &data);\n    }\n}",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800319e",
            "calling": [
                "FUN_08002efe"
            ],
            "imported": false,
            "current_name": "execute_function_with_data_0800319e"
        },
        "FUN_08008d00": {
            "renaming": {
                "FUN_08008d00": "set_value_at_address_based_on_index_08008d00",
                "param_1": "address",
                "param_2": "index",
                "uVar1": "value",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void set_value_at_address_based_on_index_08008d00(int address, uint index) {\n  undefined value;\n  code *jump_table;\n  if (index < 0x3c) {\n    value = PTR_DAT_08008d14[index];\n  }\n  else {\n    value = 0xff;\n  }\n  *(undefined *)(address + 0x12d) = value;\n  (*jump_table)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d00",
            "calling": [
                "FUN_08008d30"
            ],
            "imported": false,
            "current_name": "set_value_at_address_based_on_index_08008d00"
        },
        "FUN_08009190": {
            "renaming": {
                "FUN_08009190": "allocate_memory_block_wrapper_08009190",
                "param_1": "block_size",
                "allocate_memory_block_08009270": "allocate_memory_block"
            },
            "code": "void allocate_memory_block_wrapper_08009190(undefined4 block_size){\n  allocate_memory_block(*((undefined4 *)PTR_PTR_DAT_0800919c), block_size);\n  return;\n}",
            "called": [
                "FUN_08009270"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009190",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_wrapper_08009190"
        },
        "FUN_08004b82": {
            "renaming": {
                "FUN_08004b82": "process_input_08004b82",
                "param_1": "input",
                "cVar1": "current_char",
                "puVar2": "ptr_b"
            },
            "code": "uint32_t process_input_08004b82(uint32_t **input) {\n  char current_char = *(char *)((int)input + 0x3d);\n  uint32_t *ptr_b = input[0xb];\n  if ((*(short *)(input + 10) == 0) && (current_char == '!')) {\n    if ((ptr_b == (uint32_t *)0x4) || ((ptr_b == (uint32_t *)0x8 || (ptr_b == (uint32_t *)0xffff0000)))) {\n      (*input)[1] = (*input)[1] & 0xfffff8ff;\n      **input = **input | 0x200;\n      input[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      if (*(char *)((int)input + 0x3e) == '@') {\n        *(undefined *)((int)input + 0x3e) = 0;\n        do_nothing_08004b80();\n      }\n      else {\n        *(undefined *)((int)input + 0x3e) = 0;\n        do_nothing_08004a1e();\n      }\n    }\n    else {\n      (*input)[1] = (*input)[1] & 0xfffff8ff;\n      input[0xc] = (uint32_t *)0x11;\n      *(undefined *)((int)input + 0x3e) = 0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      do_nothing_08004a1e();\n    }\n  }\n  else if ((current_char == '!') || ((*(char *)((int)input + 0x3e) == '@' && (current_char == '\"')))) {\n    if (*(short *)((int)input + 0x2a) == 0) {\n      (*input)[1] = (*input)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)input + 0x3e) == '@') {\n      if (input[0x14] == (uint32_t *)0x0) {\n        if (input[0x13] == (uint32_t *)0x1) {\n          (*input)[4] = (uint32_t)input[0x12] & 0xff;\n          input[0x14] = (uint32_t *)((int)input[0x14] + 2);\n        }\n        else {\n          (*input)[4] = (uint32_t)((int)input[0x12] << 0x10) >> 0x18;\n          input[0x14] = (uint32_t *)((int)input[0x14] + 1);\n        }\n      }\n      else if (input[0x14] == (uint32_t *)0x1) {\n        (*input)[4] = (uint32_t)input[0x12] & 0xff;\n        input[0x14] = (uint32_t *)((int)input[0x14] + 1);\n      }\n      else if (input[0x14] == (uint32_t *)0x2) {\n        if (*(char *)((int)input + 0x3d) == '\"') {\n          **input = **input | 0x100;\n        }\n        else if (*(char *)((int)input + 0x3d) == '!') {\n          uint32_t *ptr_9 = input[9];\n          input[9] = (uint32_t *)((int)ptr_9 + 1);\n          (*input)[4] = (uint32_t)*(byte *)ptr_9;\n          *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      uint32_t *ptr_9 = input[9];\n      input[9] = (uint32_t *)((int)ptr_9 + 1);\n      (*input)[4] = (uint32_t)*(byte *)ptr_9;\n      *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004b80",
                "FUN_08004a1e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b82",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_input_08004b82"
        },
        "FUN_0800997e": {
            "renaming": {
                "FUN_0800997e": "find_last_occurrence_of_character_in_string_0800997e",
                "param_1": "string_start",
                "param_2": "string_length",
                "param_3": "character",
                "param_4": "string_end",
                "iVar1": "current_occurrence_index",
                "iVar2": "last_occurrence_index"
            },
            "code": "int find_last_occurrence_of_character_in_string_0800997e(int string_start, int string_length, undefined4 character, undefined4 string_end) {\n  int last_occurrence_index = -1;\n  if (string_length != 0) {\n    while (int current_occurrence_index = find_character_in_string(string_start, string_length, character, string_end), current_occurrence_index != 0) {\n      string_start = current_occurrence_index + 1;\n      last_occurrence_index = current_occurrence_index;\n    }\n    return last_occurrence_index;\n  }\n  return find_character_in_string(string_start, string_length, character, string_end);\n}",
            "called": [
                "FUN_08009938"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800997e",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "find_last_occurrence_of_character_in_string_0800997e"
        },
        "FUN_08002dbc": {
            "renaming": {
                "FUN_08002dbc": "initialize_if_param_one_is_true_and_param_two_is_0xffff_08002dbc",
                "param_1": "is_param_one_true",
                "param_2": "is_param_two_0xffff",
                "initialize_function_08002ce0": "initialize_function"
            },
            "code": "void initialize_if_param_one_is_true_and_param_two_is_0xffff_08002dbc(int is_param_one_true, int is_param_two_0xffff)\n{\n    if (!is_param_one_true) {\n        return;\n    }\n    if (is_param_two_0xffff) {\n        initialize_function(PTR_DAT_08002dd8);\n    }\n    return;\n}",
            "called": [
                "FUN_08002ce0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002dbc",
            "calling": [],
            "imported": false,
            "current_name": "initialize_if_param_one_is_true_and_param_two_is_0xffff_08002dbc"
        },
        "FUN_08002e44": {
            "renaming": {
                "FUN_08002e44": "parse_path_08002e44",
                "param_1": "path_buffer",
                "param_2": "path_length",
                "param_3": "path_separator",
                "param_4": "path_separator_alt",
                "bVar1": "buffer_length",
                "cVar2": "last_char",
                "iVar3": "substring_pos",
                "iVar4": "last_separator_pos",
                "puVar5": "new_buffer"
            },
            "code": "void parse_path_08002e44(int path_buffer,int path_length,undefined path_separator,undefined path_separator_alt)\n{\n  byte buffer_length;\n  char last_char;\n  int substring_pos;\n  int last_separator_pos;\n  undefined *new_buffer;\n  \n  substring_pos = find_substring(path_length, \"cpp\");\n  last_separator_pos = find_last_occurrence_of_character_in_string(path_length, 0x2f);\n  if (last_separator_pos == 0) {\n    last_separator_pos = find_last_occurrence_of_character_in_string(path_length, 0x5c);\n  }\n  if (last_separator_pos != 0) {\n    path_length = last_separator_pos + 1;\n  }\n  if (substring_pos == 0) {\n    last_char = find_end_of_string(path_length);\n    *(char *)(path_buffer + 0xc4) = last_char + '\\x02';\n  }\n  else {\n    *(char *)(path_buffer + 0xc4) = ((char)substring_pos - (char)path_length) + '\\x02';\n  }\n  insert_node_at_head_and_assign_to_pointer(*(undefined4 *)(path_buffer + 200));\n  buffer_length = *(byte *)(path_buffer + 0xc4);\n  new_buffer = (undefined *)allocate_memory_block(buffer_length + 1);\n  *(undefined **)(path_buffer + 200) = new_buffer;\n  new_buffer[buffer_length] = 0;\n  *new_buffer = path_separator;\n  new_buffer[1] = path_separator_alt;\n  copy_string(new_buffer + 2,path_length,*(byte *)(path_buffer + 0xc4) - 2);\n  return;\n}",
            "called": [
                "FUN_080099a4",
                "FUN_08009190",
                "FUN_08009954",
                "FUN_080091a0",
                "FUN_08000178",
                "FUN_0800997e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002e44",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "parse_path_08002e44"
        },
        "FUN_0800242c": {
            "renaming": {
                "FUN_0800242c": "set_bits_and_update_data_0800242c",
                "param_1": "data",
                "param_2": "max_value",
                "param_3": "value",
                "param_4": "update"
            },
            "code": "void set_bits_and_update_data_0800242c(undefined4 data, int max_value, int value, int* ptr, undefined4 update) {\n  set_bits_and_update_data_0800242c_08007648(data, max_value, value, ptr, update);\n  return;\n}",
            "called": [
                "FUN_08007648"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800242c",
            "calling": [
                "FUN_080025ac"
            ],
            "imported": false,
            "current_name": "set_bits_and_update_data_0800242c"
        },
        "FUN_080058d2": {
            "renaming": {
                "FUN_080058d2": "process_data_080058d2",
                "param_1": "data",
                "param_2": "data_length",
                "puVar1": "control_data",
                "uVar4": "flag",
                "iVar2": "start_time",
                "iVar3": "current_time",
                "i": "i"
            },
            "code": "uint32_t process_data_080058d2(uint32_t *data, uint32_t data_length)\n{\n  uint32_t *control_data = DAT_08005a0c;\n  uint32_t result;\n  uint32_t start_time;\n  uint32_t current_time;\n  uint32_t i;\n  if ((*data & 2) != 0)\n  {\n    DAT_08005a10[1] = (DAT_08005a10[1] & 0xffffff0f) | data[2];\n  }\n  if ((*data & 1) != 0)\n  {\n    uint32_t flag = data[1];\n    if (flag == 1)\n    {\n      if ((*DAT_08005a10 & 0x20000) == 0)\n      {\n        return 1;\n      }\n    }\n    else if ((flag != 2) && ((*DAT_08005a10 & 2) == 0))\n    {\n      return 1;\n    }\n    DAT_08005a10[1] = flag | (DAT_08005a10[1] & 0xfffffffc);\n    start_time = get_current_time();\n    if (flag == 1)\n    {\n      while ((DAT_08005a10[1] & 0xc) != 4)\n      {\n        current_time = get_current_time();\n        if (5000 < (current_time - start_time))\n        {\n          return 3;\n        }\n      }\n    }\n    else if (flag == 2)\n    {\n      while ((DAT_08005a10[1] & 0xc) != 8)\n      {\n        current_time = get_current_time();\n        if (5000 < (current_time - start_time))\n        {\n          return 3;\n        }\n      }\n    }\n    else\n    {\n      while ((DAT_08005a10[1] & 0xc) != 0)\n      {\n        current_time = get_current_time();\n        if (5000 < (current_time - start_time))\n        {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((data_length < (*control_data & 7)) && (*control_data = (*control_data & 0xfffffff8) | data_length, data_length != (*control_data & 7)))\n  {\n    return 1;\n  }\n  if ((*data & 4) != 0)\n  {\n    DAT_08005a10[1] = (DAT_08005a10[1] & 0xfffff8ff) | data[3];\n  }\n  if ((*data & 8) != 0)\n  {\n    DAT_08005a10[1] = (DAT_08005a10[1] & 0xffffc7ff) | (data[4] << 3);\n  }\n  result = calculate_result();\n  *(uint32_t *)PTR_DAT_08005a18 = result >> PTR_DAT_08005a14[(DAT_08005a10[1] << 0x18) >> 0x1c];\n  calculate_and_write_bits_to_memory(0xf);\n  return 0;\n}",
            "called": [
                "FUN_08005840",
                "FUN_08003760",
                "FUN_080036d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058d2",
            "calling": [
                "FUN_080058ac"
            ],
            "imported": false,
            "current_name": "process_data_080058d2"
        },
        "FUN_08002c00": {
            "renaming": {
                "FUN_08002c00": "process_data_08002c00_08002c00",
                "process_data_08002b68": "process_data_08002b68"
            },
            "code": "void process_data_08002c00_08002c00(void)\n{\n  process_data_08002b68();\n  return;\n}",
            "called": [
                "FUN_08002b68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c00",
            "calling": [
                "FUN_08002c14"
            ],
            "imported": false,
            "current_name": "process_data_08002c00_08002c00"
        },
        "FUN_08003f30": {
            "renaming": {
                "FUN_08003f30": "write_bits_to_memory_08003f30",
                "param_1": "memory_address",
                "param_2": "bits_to_write",
                "param_3": "mask",
                "uVar1": "shift_amount",
                "uVar2": "shift_distance"
            },
            "code": "void write_bits_to_memory_08003f30(uint memory_address, uint bits_to_write, uint mask) {\n  uint shift_amount = (*(int *)(DAT_08003f8c + 0xc) << 0x15) >> 0x1d;\n  uint shift_distance = 7 - shift_amount;\n  if (shift_distance > 3) {\n    shift_distance = 4;\n  }\n  if (shift_amount + 4 < 7) {\n    shift_amount = 0;\n  }\n  else {\n    shift_amount = shift_amount - 3;\n  }\n  uint written_bits = (bits_to_write & (1 << (shift_distance & 0xff)) - 1U) << (shift_amount & 0xff) | (1 << (shift_amount & 0xff)) - 1U & mask;\n  if ((int)memory_address < 0) {\n    *(char *)(DAT_08003f90 + (memory_address & 0xf)) = (char)(written_bits << 4);\n  }\n  else {\n    *(char *)(memory_address + 0xe000e400) = (char)(written_bits << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f30",
            "calling": [
                "FUN_080077b0",
                "FUN_080035b8",
                "FUN_08008694",
                "FUN_080036d8",
                "FUN_0800863c",
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "write_bits_to_memory_08003f30"
        },
        "FUN_08007f78": {
            "renaming": {
                "FUN_08007f78": "subtract_four_from_input_08007f78",
                "param_1": "input_num",
                "return": "result"
            },
            "code": "int subtract_four_from_input_08007f78(int input_num) {\n    int result = input_num - 4;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f78",
            "calling": [
                "FUN_08007fa0",
                "FUN_08007ff0",
                "FUN_08008020"
            ],
            "imported": false,
            "current_name": "subtract_four_from_input_08007f78"
        },
        "FUN_08006b28": {
            "renaming": {
                "FUN_08006b28": "get_bit_at_position_08006b28",
                "param_1": "value",
                "param_2": "position",
                "PTR_": "ptr",
                "DAT_": "masked_value"
            },
            "code": "uint get_bit_at_position_08006b28(uint value, int position){\n    uint* PTR_ = (uint*)(position + ((value << 0x18) >> 0x1c) * 4);\n    uint DAT_ = value & 0xf;\n    uint result = (*PTR_ >> DAT_) & 1;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b28",
            "calling": [
                "FUN_080088e0",
                "FUN_08008990",
                "FUN_08008a6c",
                "FUN_08008a24"
            ],
            "imported": false,
            "current_name": "get_bit_at_position_08006b28"
        },
        "FUN_080085dc": {
            "renaming": {
                "FUN_080085dc": "is_combination_valid_080085dc",
                "param_1": "index",
                "uVar1": "combined_bytes",
                "PTR_DAT_080085fc": "address_array",
                "byte": "index_byte",
                "DAT_080085fc": "address_data"
            },
            "code": "bool is_combination_valid_080085dc(int index)\n{\n  uint16_t combined_bytes = combine_bytes(get_address_from_index(index));\n  return (combined_bytes & 0x21) == 0x21;\n}",
            "called": [
                "FUN_08006b1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080085dc",
            "calling": [],
            "imported": false,
            "current_name": "is_combination_valid_080085dc"
        },
        "FUN_08006b1c": {
            "renaming": {
                "FUN_08006b1c": "combine_bytes_08006b1c",
                "param_1": "address",
                "*(byte *)(param_1 + 0x3a)": "byte1",
                "*(byte *)(param_1 + 0x39)": "byte2"
            },
            "code": "byte combine_bytes_08006b1c(int address) {\n    byte byte1 = *(byte *)(address + 0x3a);\n    byte byte2 = *(byte *)(address + 0x39);\n    return byte1 | byte2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b1c",
            "calling": [
                "FUN_080085dc",
                "FUN_080085b8"
            ],
            "imported": false,
            "current_name": "combine_bytes_08006b1c"
        },
        "FUN_08008ed6": {
            "renaming": {
                "FUN_08008ed6": "convert_or_call_function_08008ed6",
                "param_1": "function_ptr",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "convert_to_base_08008e7c": "convert_to_base"
            },
            "code": "void convert_or_call_function_08008ed6(undefined4 *function_ptr, uint32_t arg1, uint32_t arg2, undefined4 arg3)\n{\n  if (arg2 != 0) {\n    convert_to_base(function_ptr, arg1, arg2 & 0xff);\n    return;\n  }\n  (**(code **)*function_ptr)(function_ptr, arg1 & 0xff, 0, *(code **)*function_ptr, arg3);\n  return;\n}",
            "called": [
                "FUN_08008e7c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ed6",
            "calling": [
                "FUN_08008eec"
            ],
            "imported": false,
            "current_name": "convert_or_call_function_08008ed6"
        },
        "FUN_0800a130": {
            "renaming": {
                "FUN_0800a130": "zero_return_0800a130",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "ptr",
                "iVar2": "return_val"
            },
            "code": "void zero_return_0800a130(int *result, undefined4 arg1, undefined4 arg2, undefined4 arg3) {\n  undefined *ptr = PTR_DAT_0800a150;\n  *(undefined4 *)ptr = 0;\n  int return_val = return_zero_08008854(arg1, arg2, arg3, arg3, arg3);\n  if (return_val == -1 && *(int *)ptr != 0) {\n    *result = *(int *)ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_08008854"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a130",
            "calling": [
                "FUN_0800a07a",
                "FUN_0800a042"
            ],
            "imported": false,
            "current_name": "zero_return_0800a130"
        },
        "FUN_08008f3c": {
            "renaming": {
                "FUN_08008f3c": "find_binary_length_08008f3c",
                "param_1": "input_num",
                "cVar1": "length"
            },
            "code": "char find_binary_length_08008f3c(uint input_num) {\n  char length = 0;\n  while (input_num != 1) {\n    input_num = input_num >> 1;\n    length++;\n  }\n  return length;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f3c",
            "calling": [
                "FUN_08009094"
            ],
            "imported": false,
            "current_name": "find_binary_length_08008f3c"
        },
        "FUN_08002ef2": {
            "renaming": {
                "FUN_08002ef2": "encode_data_08002ef2",
                "param_1": "data_offset",
                "param_2": "param_2",
                "param_3": "encoding_param",
                "param_4": "encoding_param_2",
                "param_5": "encoding_param_3"
            },
            "code": "void encode_data_08002ef2(int data_offset, undefined4 param_2, undefined2 encoding_param, undefined4 encoding_param_2, undefined4 encoding_param_3) {\n  encode_data_08002ef2_08003158_08003158(data_offset + 0x40, param_2, encoding_param, encoding_param_2, encoding_param_3);\n  return;\n}",
            "called": [
                "FUN_08003158"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ef2",
            "calling": [
                "FUN_080022f8",
                "FUN_08000488"
            ],
            "imported": false,
            "current_name": "encode_data_08002ef2"
        },
        "FUN_08007332": {
            "renaming": {
                "<original_function_name>": "find_char_index",
                "param_1": "target_char",
                "param_2": "char_array",
                "PTR_": "",
                "DAT_": "",
                "FUN_08007332": "find_char_index_08007332"
            },
            "code": "int find_char_index_08007332(int target_char, char *char_array){\n                        while(true){\n                            if (*(int *)(char_array + 4) == 0) {\n                                return -1;\n                            }\n                            if (*(int *)(char_array + 4) == target_char) break;\n                            char_array = char_array + 0xc;\n                        }\n                        return (int)*char_array;\n                    }",
            "called": [
                "FUN_08007332"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007332",
            "calling": [
                "FUN_0800734a",
                "FUN_08007332"
            ],
            "imported": false,
            "current_name": "find_char_index_08007332"
        },
        "FUN_08006128": {
            "renaming": {
                "FUN_08006128": "update_data_and_set_flags_08006128",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "operation_type",
                "*(char *)(param_1 + 0xf)": "*(char *)(data + 0xf)",
                "*(undefined *)(param_1 + 0xf)": "*(undefined *)(data + 0xf)",
                "(int)param_1 + 0x3d": "(int)data + 0x3d",
                "*(undefined *)((int)param_1 + 0x3d)": "*(undefined *)((int)data + 0x3d)",
                "*param_1": "*data"
            },
            "code": "int update_data_and_set_flags_08006128(int* data, int flag, int operation_type) {\n  if (*(char *)(data + 0xf) != '\\x01') {\n    *(undefined *)(data + 0xf) = 1;\n    *(undefined *)((int)data + 0x3d) = 2;\n    switch(operation_type) {\n      case 0:\n        set_flags_and_values(*data);\n        break;\n      case 4:\n        update_data(*data);\n        break;\n      case 8:\n        update_data(*data);\n        break;\n      case 0xc:\n        update_data(*data);\n    }\n    *(undefined *)((int)data + 0x3d) = 1;\n    *(undefined *)(data + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}",
            "called": [
                "FUN_080060c4",
                "FUN_08005d48",
                "FUN_08005cec",
                "FUN_08005dac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006128",
            "calling": [
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "update_data_and_set_flags_08006128"
        },
        "FUN_08003658": {
            "renaming": {
                "FUN_08003658": "initialize_game_08003658",
                "iVar1": "index",
                "puVar2": "data_ptr",
                "UNRECOVERED_JUMPTABLE": "jumptable"
            },
            "code": "void initialize_game_08003658() {\n  int index = 0;\n  undefined4 *data_ptr = (undefined4 *)PTR_DAT_08003698;\n  while (PTR_DAT_08003690 + index < PTR_DAT_08003694) {\n    *(undefined4 *)(PTR_DAT_08003690 + index) = *(undefined4 *)(DAT_0800368c + index);\n    index += 4;\n  }\n  while (data_ptr < PTR_DAT_0800369c) {\n    *data_ptr = 0;\n    data_ptr++;\n  }\n  set_bit_and_clear_mask();\n  execute_functions();\n  code *jumptable = (code *)0x800368a;\n  game_initialization_loop();\n  (*jumptable)();\n}",
            "called": [
                "FUN_08008f1c",
                "FUN_08009148",
                "FUN_080073ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003658",
            "calling": [],
            "imported": false,
            "current_name": "initialize_game_08003658"
        },
        "FUN_08009a80": {
            "renaming": {
                "FUN_08009a80": "update_node_state_08009a80",
                "param_1": "out_status",
                "param_2": "node_ptr",
                "uVar1": "status",
                "uVar2": "state",
                "iVar3": "node_data"
            },
            "code": "uint update_node_state_08009a80(undefined4 *out_status, undefined4 *node_ptr)\n{\n    uint status;\n    ushort state;\n    int node_data = *(int *)PTR_PTR_DAT_08009b4c;\n    if (node_data != 0 && *(int *)(node_data + 0x18) == 0)\n    {\n        initialize_arrays_and_data_08009d50(node_data);\n    }\n    if (node_ptr == (undefined4 *)PTR_DAT_08009b50)\n    {\n        node_ptr = *(undefined4 **)(node_data + 4);\n    }\n    else if (node_ptr == (undefined4 *)PTR_DAT_08009b54)\n    {\n        node_ptr = *(undefined4 **)(node_data + 8);\n    }\n    else if (node_ptr == (undefined4 *)PTR_DAT_08009b58)\n    {\n        node_ptr = *(undefined4 **)(node_data + 0xc);\n    }\n    state = *(ushort *)(node_ptr + 3);\n    status = (uint)state;\n    if (-1 < (int)(status << 0x1c))\n    {\n        if (-1 < (int)(status << 0x1b))\n        {\n            *out_status = 9;\n            goto LAB_08009ab0;\n        }\n        if ((int)(status << 0x1d) < 0)\n        {\n            if ((undefined4 *)node_ptr[0xd] != (undefined4 *)0x0)\n            {\n                if ((undefined4 *)node_ptr[0xd] != node_ptr + 0x11)\n                {\n                    insert_node_at_head_080091d8(out_status);\n                }\n                node_ptr[0xd] = 0;\n            }\n            *(ushort *)(node_ptr + 3) = *(ushort *)(node_ptr + 3) & 0xffdb;\n            node_ptr[1] = 0;\n            *node_ptr = node_ptr[4];\n        }\n        *(ushort *)(node_ptr + 3) = *(ushort *)(node_ptr + 3) | 8;\n    }\n    if (node_ptr[4] == 0 && (*(ushort *)(node_ptr + 3) & 0x280) != 0x200)\n    {\n        allocate_memory_and_set_permissions_08009eac(out_status, node_ptr);\n    }\n    state = *(ushort *)(node_ptr + 3);\n    status = state & 1;\n    if ((state & 1) == 0)\n    {\n        if (-1 < (int)((uint)state << 0x1e))\n        {\n            status = node_ptr[5];\n        }\n        node_ptr[2] = status;\n    }\n    else\n    {\n        node_ptr[2] = 0;\n        node_ptr[6] = -node_ptr[5];\n    }\n    if (node_ptr[4] == 0)\n    {\n        state = *(ushort *)(node_ptr + 3);\n        status = (int)(short)state & 0x80;\n        if (status != 0)\n        {\n            *(ushort *)(node_ptr + 3) = state | 0x40;\n            return 0xffffffff;\n        }\n    }\n    else\n    {\n        status = 0;\n    }\n    return status;\n}",
            "called": [
                "FUN_080091d8",
                "FUN_08009eac",
                "FUN_08009d50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009a80",
            "calling": [
                "FUN_0800937c",
                "FUN_0800932c"
            ],
            "imported": false,
            "current_name": "update_node_state_08009a80",
            "code_backup": "\nuint FUN_08009a80(undefined4 *param_1,undefined4 *param_2)\n\n{\n  uint uVar1;\n  ushort uVar2;\n  int iVar3;\n  \n  iVar3 = *(int *)PTR_PTR_DAT_08009b4c;\n  if ((iVar3 != 0) && (*(int *)(iVar3 + 0x18) == 0)) {\n    FUNC_08009d50(iVar3);\n  }\n  if (param_2 == (undefined4 *)PTR_DAT_08009b50) {\n    param_2 = *(undefined4 **)(iVar3 + 4);\n  }\n  else if (param_2 == (undefined4 *)PTR_DAT_08009b54) {\n    param_2 = *(undefined4 **)(iVar3 + 8);\n  }\n  else if (param_2 == (undefined4 *)PTR_DAT_08009b58) {\n    param_2 = *(undefined4 **)(iVar3 + 0xc);\n  }\n  uVar2 = *(ushort *)(param_2 + 3);\n  uVar1 = (uint)uVar2;\n  if (-1 < (int)(uVar1 << 0x1c)) {\n    if (-1 < (int)(uVar1 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(uVar1 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          insert_node_at_head_080091d8(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    allocate_memory_and_set_permissions_08009eac(param_1,param_2);\n  }\n  uVar2 = *(ushort *)(param_2 + 3);\n  uVar1 = uVar2 & 1;\n  if ((uVar2 & 1) == 0) {\n    if (-1 < (int)((uint)uVar2 << 0x1e)) {\n      uVar1 = param_2[5];\n    }\n    param_2[2] = uVar1;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar2 = *(ushort *)(param_2 + 3);\n    uVar1 = (int)(short)uVar2 & 0x80;\n    if (uVar1 != 0) {\nLAB_08009ab0:\n      *(ushort *)(param_2 + 3) = uVar2 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar1 = 0;\n  }\n  return uVar1;\n}\n\n"
        },
        "FUN_08004a74": {
            "renaming": {
                "FUN_08004a74": "do_nothing_08004a74"
            },
            "code": "\nvoid do_nothing_08004a74(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a74",
            "calling": [
                "FUN_08004a76",
                "FUN_08005084"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a74"
        },
        "FUN_080062f4": {
            "renaming": {
                "FUN_080062f4": "clear_and_set_bits_in_uint_array_080062f4",
                "param_1": "array_ptr",
                "param_2": "bit_position",
                "puVar1": "array"
            },
            "code": "uint32_t clear_and_set_bits_in_uint_array_080062f4(uint32_t **array_ptr, uint32_t bit_position)\n{\n    uint32_t *array = *array_ptr;\n    switch(bit_position) {\n        case 0x0:\n            array[3] &= 0xfffffffd;\n            break;\n        case 0x4:\n            array[3] &= 0xfffffffb;\n            break;\n        case 0x8:\n            array[3] &= 0xfffffff7;\n            break;\n        case 0xc:\n            array[3] &= 0xffffffef;\n    }\n    set_bit_in_uint_array(*array_ptr, bit_position, 0);\n    if (((array == PTR_DAT_0800638c) && ((array[8] & 0x1111) == 0)) && ((array[8] & 0x444) == 0)) {\n        array[0x11] &= 0xffff7fff;\n    }\n    if (((array[8] & 0x1111) == 0) && ((array[8] & 0x444) == 0)) {\n        *array &= 0xfffffffe;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080062f4",
            "calling": [
                "FUN_080076e0"
            ],
            "imported": false,
            "current_name": "clear_and_set_bits_in_uint_array_080062f4"
        },
        "FUN_080073e8": {
            "renaming": {
                "FUN_080073e8": "infinite_loop_080073e8"
            },
            "code": "void infinite_loop_080073e8(void)\n{\n  do {\n    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}",
            "called": [
                "FUN_080073e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073e8",
            "calling": [
                "FUN_080035b8",
                "FUN_080073e8"
            ],
            "imported": false,
            "current_name": "infinite_loop_080073e8"
        },
        "FUN_08004a76": {
            "renaming": {
                "FUN_08004a76": "process_data_08004a76",
                "param_1": "data",
                "cVar1": "last_char",
                "puVar2": "buffer"
            },
            "code": "int process_data_08004a76(int *data)\n{\n    char last_char = *(char *)((int)data + 0x3d);\n    if (*(short *)((int)data + 0x2a) != 0)\n    {\n        undefined *buffer = (undefined *)data[9];\n        data[9] = (int)(buffer + 1);\n        *buffer = (char)*(undefined4 *)(*data + 0x10);\n        *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) - 1;\n        if ((*(short *)((int)data + 0x2a) == 0) && (last_char == '*'))\n        {\n            *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n            data[0xc] = 0x22;\n            *(undefined *)((int)data + 0x3d) = 0x28;\n            do_nothing();\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_08004a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a76",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_data_08004a76"
        },
        "FUN_0800877c": {
            "renaming": {
                "FUN_0800877c": "do_nothing_0800877c"
            },
            "code": "\nvoid do_nothing_0800877c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800877c",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "do_nothing_0800877c"
        },
        "FUN_0800267c": {
            "renaming": {
                "FUN_0800267c": "calculate_value_0800267c",
                "param_1": "input_array",
                "param_2": "value",
                "iVar1": "calculated_value"
            },
            "code": "void calculate_value_0800267c(byte *input_array, int value){\n    int calculated_value;\n    if (*input_array < 0xc) {\n        calculated_value = (0x88 - (char)input_array[1]) * 4;\n        if ((calculated_value - value == 0 || calculated_value < value) &&\n           (calculated_value = (600 - (char)input_array[2]) * 4,\n           value == calculated_value || value + (600 - (char)input_array[2]) * -4 < 0 != SBORROW4(value,calculated_value)))\n        {\n          calculated_value = value;\n        }\n        *(int *)(PTR_DAT_080026ac + (uint)*input_array * 8 + 4) = calculated_value;\n      }\n      return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800267c",
            "calling": [
                "FUN_080026b0"
            ],
            "imported": false,
            "current_name": "calculate_value_0800267c"
        },
        "FUN_080047f4": {
            "renaming": {
                "FUN_080047f4": "process_data_080047f4",
                "param_1": "data_ptr",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "uVar1": "result",
                "puVar2": "data",
                "local_c": "count"
            },
            "code": "uint32_t process_data_080047f4(uint32_t **data_ptr, uint32_t *param1, uint32_t *param2, uint16_t param3)\n{\n    uint32_t result;\n    uint32_t *data = *data_ptr;\n    int count = 0;\n    \n    if (data[0x3d] == ' ')\n    {\n        count = (uint32_t)((uint64_t)DAT_080048c0 * (uint64_t)(*PTR_DAT_080048bc >> 3) >> 0x28) * 0x19;\n        while ((data[0][6] & 2) != 0)\n        {\n            if (count == 0)\n            {\n                data_ptr[0xc] = NULL;\n                data[0x3d] = 0x20;\n                data[0xf] = 0;\n                result = 3;\n                return result;\n            }\n            data = *data_ptr;\n            count--;\n        }\n        if (data_ptr[0xf] == 1)\n        {\n            result = 2;\n        }\n        else\n        {\n            data_ptr[0xf] = 1;\n            if ((*data & 1) == 0)\n            {\n                *data = *data | 1;\n            }\n            **data_ptr = **data_ptr & 0xfffff7ff;\n            data[0x3d] = 0x22;\n            data[0x3e] = 0x10;\n            result = 0;\n            data_ptr[0x10] = NULL;\n            data_ptr[9] = param2;\n            data[0xb] = DAT_080048c4;\n            data_ptr[10][0] = param3;\n            data_ptr[0x11] = param1;\n            **data_ptr = **data_ptr | 0x400;\n            **data_ptr = **data_ptr | 0x100;\n            data_ptr[0xf] = 0;\n            (*data_ptr)[1] = (*data_ptr)[1] | 0x700;\n        }\n    }\n    else\n    {\n        result = 2;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047f4",
            "calling": [
                "FUN_08007f0e"
            ],
            "imported": false,
            "current_name": "process_data_080047f4"
        },
        "FUN_0800376c": {
            "renaming": {
                "FUN_0800376c": "calculate_result_from_param_0800376c",
                "param_1": "data",
                "param_2": "param_length",
                "iVar1": "start_time",
                "uVar2": "divisor",
                "iVar3": "factor",
                "uVar4": "result",
                "puVar5": "data_ptr",
                "uVar6": "max_iterations",
                "local_1c": "i"
            },
            "code": "uint32_t calculate_result_from_param_0800376c(uint32_t **data, uint32_t param_length) {\n    int start_time = get_data_from_pointer();\n    uint32_t *data_ptr = *data;\n    uint32_t result = 0;\n    if ((data_ptr[2] & 0x100) == 0) {\n        if (((data_ptr[1] & 0x100) == 0) && ((data_ptr[0xb] & 0xf00000) == 0)) {\n            while ((**data & 2) == 0) {\n                if ((param_length != 0xffffffff) && ((param_length != 0) && (get_data_from_pointer() - start_time > param_length))) {\n                    (*data)[10] |= 4;\n                    (*data)[9] = 0;\n                    return 3;\n                }\n            }\n            (*data)[10] |= 4;\n            (*data)[9] = 0;\n            result = 3;\n        }\n        else {\n            uint32_t divisor = *(uint32_t *)PTR_DAT_080038c8;\n            uint32_t factor = calculate_value_from_param_08005bb8(2);\n            data_ptr = *data;\n            if (((data_ptr[4] & DAT_080038cc) == 0) && ((data_ptr[3] & DAT_080038cc + 0xdc000000) == 0)) {\n                if ((data_ptr[4] & DAT_080038d0) == 0) {\n                    if ((data_ptr[3] & DAT_080038d4) == 0) {\n                        factor = 0x14;\n                    }\n                    else {\n                        factor = 0x29;\n                    }\n                }\n                else {\n                    factor = 0x29;\n                }\n            }\n            else if (((data_ptr[4] & DAT_080038d0) == 0) && ((data_ptr[3] & DAT_080038d0 + 0xee000000) == 0)) {\n                factor = 0x54;\n            }\n            else if ((DAT_080038d8 & data_ptr[4]) == 0) {\n                if ((DAT_080038d8 & data_ptr[3]) == 0) {\n                    factor = 0x54;\n                }\n                else {\n                    factor = 0xfc;\n                }\n            }\n            else {\n                factor = 0xfc;\n            }\n            uint32_t max_iterations = (*(uint32_t *)PTR_DAT_080038c8) / factor * factor;\n            for (uint32_t i = 0; i <= max_iterations && max_iterations - i != 0; i++) {\n                if ((param_length != 0xffffffff) && ((param_length != 0) && (get_data_from_pointer() - start_time > param_length))) {\n                    (*data)[10] |= 4;\n                    (*data)[9] = 0;\n                    return 3;\n                }\n            }\n            (*data)[0] = 0xffffffed;\n            (*data)[10] |= 0x200;\n            if (((*data)[2] & 0xe0000) == 0xe0000) {\n                if ((*data)[3] == (uint32_t *)0x0) {\n                    (*data)[10] &= 0xfffffeff;\n                    if (((*data)[10] & 0x1000) == 0) {\n                        (*data)[10] |= 1;\n                        result = 0;\n                    }\n                    else {\n                        result = 0;\n                    }\n                }\n                else {\n                    result = 0;\n                }\n            }\n            else {\n                result = 0;\n            }\n        }\n    }\n    else {\n        (*data)[10] |= 0x20;\n        (*data)[9] = 0;\n        result = 1;\n    }\n    return result;\n}",
            "called": [
                "FUN_08005bb8",
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800376c",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "calculate_result_from_param_0800376c"
        },
        "FUN_08003e20": {
            "renaming": {
                "FUN_08003e20": "validate_data_and_update_08003e20",
                "*param_1": "*data",
                "iVar1": "validity_check_result",
                "uVar2": "divisor",
                "iVar3": "start_address",
                "iVar4": "current_address",
                "uVar5": "quotient",
                "local_14": "start_address",
                "PTR_DAT_08003f08": "PTR_DAT_08003f08"
            },
            "code": "int validate_data_and_update_08003e20(int *data)\n{\n  int validity_check_result;\n  uint quotient, divisor;\n  int start_address, current_address;\n  uint flag;\n  if (*(char *)(data + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(data + 9) = 1;\n  validity_check_result = check_data_validity();\n  if (validity_check_result == 0) {\n    data[10] = data[10] & 0xffffeefdU | 2;\n    divisor = *(uint *)PTR_DAT_08003f08;\n    quotient = calculate_value_from_param_08005bb8(2);\n    for (start_address = divisor / quotient << 1; start_address != 0; start_address = start_address + -1) {\n    }\n    check_and_update_data(data);\n    *(uint *)(*data + 8) = *(uint *)(*data + 8) | 8;\n    start_address = get_data_from_pointer_08003760();\n    while (flag = *(uint *)(*data + 8) & 8) {\n      current_address = get_data_from_pointer_08003760();\n      if (10 < (uint)(current_address - start_address)) {\n        data[10] = data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(current_address + 8) = *(uint *)(current_address + 8) | 4;\n    start_address = get_data_from_pointer_08003760();\n    while ((*(uint *)(*data + 8) & 4) != 0) {\n      current_address = get_data_from_pointer_08003760();\n      if (10 < (uint)(current_address - start_address)) {\n        data[10] = data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    data[10] = data[10] & 0xfffffffcU | 1;\n  }\n  *(undefined *)(data + 9) = 0;\n  return validity_check_result;\n}",
            "called": [
                "FUN_08005bb8",
                "FUN_08003760",
                "FUN_08003a20",
                "FUN_08003b8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e20",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "validate_data_and_update_08003e20"
        },
        "FUN_08005a48": {
            "renaming": {
                "FUN_08005a48": "get_shifted_value_from_array_08005a48",
                "uVar1": "value",
                "get_ptr_dat_value_08005a1c": "get_ptr_dat_value",
                "PTR_DAT_08005a64": "shifted_array",
                "DAT_08005a60": "data_array"
            },
            "code": "uint get_shifted_value_from_array_08005a48(void)\n{\n  uint value = get_ptr_dat_value();\n  uint index = *(int *)(DAT_08005a60 + 4) << 0x12;\n  uint shifted_index = index >> 0x1d;\n  uint shifted_value = PTR_DAT_08005a64[shifted_index];\n  return value >> shifted_value;\n}",
            "called": [
                "FUN_08005a1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a48",
            "calling": [
                "FUN_08006538",
                "FUN_08005bb8",
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "get_shifted_value_from_array_08005a48"
        },
        "FUN_080033a8": {
            "renaming": {
                "FUN_080033a8": "copy_and_shift_leftmost_bit_080033a8",
                "param_1": "dest",
                "param_2": "length",
                "param_3": "src",
                "iVar2": "i",
                "uVar3": "current_byte",
                "bVar1": "next_byte"
            },
            "code": "void copy_and_shift_leftmost_bit_080033a8(uint8_t* dest, const uint8_t* src, size_t length) {\n  uint8_t current_byte;\n  uint8_t next_byte;\n  size_t i;\n  for (i = 0; i < length; i += 2) {\n    current_byte = *(src + i);\n    *(dest + i) = current_byte;\n    next_byte = *(src + i + 1);\n    *(dest + i) = (next_byte << 7) | current_byte;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033a8",
            "calling": [
                "FUN_080033cc"
            ],
            "imported": false,
            "current_name": "copy_and_shift_leftmost_bit_080033a8"
        },
        "FUN_08002c14": {
            "renaming": {
                "FUN_08002c14": "process_data_08002c14_08002c14",
                "process_data_08002c00_08002c00": "process_data_08002c00"
            },
            "code": "void process_data_08002c14_08002c14(void)\n{\n  process_data_08002c00_08002c00();\n  return;\n}",
            "called": [
                "FUN_08002c00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c14",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "process_data_08002c14_08002c14"
        },
        "FUN_08008d18": {
            "renaming": {
                "FUN_08008d18": "set_color_at_index_08008d18",
                "param_1": "index",
                "param_2": "color_value",
                "uVar1": "color",
                "PTR_DAT_08008d2c": "color_palette"
            },
            "code": "void set_color_at_index_08008d18(int index, uint8_t color_value)\n{\n  if (index < 0x3c) {\n    color_value = PTR_DAT_08008d2c[index];\n  }\n  else {\n    color_value = 0xff;\n  }\n  *(uint8_t *)(index + 300) = color_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d18",
            "calling": [
                "FUN_08008d30"
            ],
            "imported": false,
            "current_name": "set_color_at_index_08008d18"
        },
        "FUN_08009084": {
            "renaming": {
                "FUN_08009084": "process_binary_08009084",
                "param_1": "binary_ptr",
                "iVar1": "binary_length",
                "PTR_DAT_080090b0": "PTR_DAT_binary",
                "find_binary_length_08008f3c": "find_binary_length",
                "process_and_wait_forever_08009b5c_wrapper_0800a18c": "process_and_wait_forever_wrapper"
            },
            "code": "void process_binary_08009084(int binary_ptr) {\n  int binary_length = find_binary_length_08008f3c(binary_ptr);\n  if (*(int *)(binary_ptr + 8) != 0) {\n    (**(code **)(binary_ptr + 0xc))();\n    return;\n  }\n  process_and_wait_forever_wrapper(binary_ptr);\n  if (*(int *)(PTR_DAT_080090b0 + binary_length * 0x14 + 0xc) != 0) {\n    process_binary_08009084(binary_ptr);\n  }\n  return;\n}",
            "called": [
                "FUN_0800a18c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009084",
            "calling": [
                "FUN_08009094"
            ],
            "imported": false,
            "current_name": "process_binary_08009084"
        },
        "FUN_0800a020": {
            "renaming": {
                "FUN_0800a020": "update_value_at_offset_0800a020",
                "param_1": "data",
                "param_2": "offset",
                "iVar1": "value",
                "uVar2": "updated_value",
                "bVar3": "is_positive"
            },
            "code": "void update_value_at_offset_0800a020(undefined4 data, int offset) {\n  int value = zero_return(data, (int)*(short *)(offset + 0xe));\n  bool is_positive = value >= 0;\n  uint updated_value;\n  if (is_positive) {\n    updated_value = *(int *)(offset + 0x54) + value;\n  }\n  else {\n    updated_value = *(ushort *)(offset + 0xc) & 0xffffefff;\n  }\n  if (is_positive) {\n    *(uint *)(offset + 0x54) = updated_value;\n  }\n  else {\n    *(short *)(offset + 0xc) = (short)updated_value;\n  }\n  return;\n}",
            "called": [
                "FUN_0800a168"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a020",
            "calling": [],
            "imported": false,
            "current_name": "update_value_at_offset_0800a020"
        },
        "FUN_08005840": {
            "renaming": {
                "FUN_08005840": "calculate_result_08005840",
                "uVar1": "result",
                "uVar2": "flags",
                "local_1c": "offset",
                "abStack_18": "stack_data",
                "uStack_14": "dividend",
                "uStack_10": "data",
                "uStack_c": "divisor"
            },
            "code": "uint calculate_result_08005840(void)\n{\n  uint result;\n  uint flags;\n  uint data;\n  uint divisor;\n  uint dividend;\n  uint index;\n  uint offset = 0x1c;\n  byte stack_data[4];\n  \n  divisor = *(uint *)(PTR_DAT_0800589c + 8);\n  data = *(uint *)(PTR_DAT_0800589c + 4);\n  dividend = *(uint *)PTR_DAT_0800589c;\n  index = *(uint *)(PTR_DAT_0800589c + 0x10);\n  flags = *(uint *)(DAT_080058a0 + 4);\n  result = DAT_080058a8;\n  \n  if ((flags & 0xc) == 8) {\n    if ((flags & 0x10000) == 0) {\n      result = DAT_080058a4 * (uint)stack_data[(flags << 10) >> 0x1c];\n    }\n    else {\n      result = (DAT_080058a8 * stack_data[(flags << 10) >> 0x1c]) / (uint)*(byte *)((int)&offset - ((flags << 0xe) >> 0x1f));\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005840",
            "calling": [
                "FUN_080058d2"
            ],
            "imported": false,
            "current_name": "calculate_result_08005840"
        },
        "FUN_08007f7c": {
            "renaming": {
                "FUN_08007f7c": "set_param_2_if_param_1_not_null_08007f7c",
                "param_1": "param_1",
                "param_2": "param_2",
                "*(int *)(param_1 + 0x60)": "value_at_param_1_plus_96",
                "set_bit_and_flag_080049e0": "set_flag_on_param_1_plus_4",
                "param_1 + 4": "param_1_plus_4"
            },
            "code": "void set_param_2_if_param_1_not_null_08007f7c(int param_1, int param_2) {\n    if (param_1 != 0) {\n        if (param_2 != 0) {\n            *(int *)(param_1 + 0x60) = param_2;\n            set_flag_on_param_1_plus_4(param_1 + 4);\n        }\n    }\n}",
            "called": [
                "FUN_080049e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f7c",
            "calling": [
                "FUN_08002968"
            ],
            "imported": false,
            "current_name": "set_param_2_if_param_1_not_null_08007f7c"
        },
        "FUN_08006d80": {
            "renaming": {
                "FUN_08006d80": "decode_and_calculate_result_08006d80",
                "param_1": "input_value",
                "local_46": "result",
                "local_44": "value_index",
                "local_40": "temp_variable1",
                "local_3c": "temp_variable2",
                "local_38": "array",
                "local_34": "temp_array1",
                "local_30": "temp_array2",
                "local_2c": "temp_array3",
                "local_28": "temp_array4",
                "local_24": "temp_array5",
                "local_20": "temp_array6",
                "local_1c": "data_validity_check_offset1",
                "local_10": "temp_variable3",
                "PTR_DAT_08006e64": "data_array",
                "PTR_DAT_08006e60": "data_array"
            },
            "code": "uint16_t decode_and_calculate_result_08006d80(uint32_t input_value) {\n  uint16_t result = 0;\n  uint32_t array[12] = {0};\n  uint32_t found_value = find_value_if_not_negative(input_value, PTR_DAT_08006e64);\n  if (found_value == 0) {\n    return result;\n  }\n  else {\n    uint32_t temp_array[7] = {0};\n    uint32_t temp_value = 0;\n    temp_value = validate_data_and_return_value(array);\n    if (temp_value == 0) {\n      uint32_t value_index = find_value(input_value);\n      if (value_index < 0x12) {\n        uint32_t decode_result = decode_data(array, &value_index);\n        if (decode_result == 0) {\n          uint32_t validate_result = validate_data_and_update_array(array);\n          if (validate_result == 0) {\n            uint32_t check_result = check_and_update_data(array);\n            if (check_result == 0) {\n              result = calculate_result_from_array(array, 10);\n              uint32_t offset_value = get_value_from_offset(array);\n              if ((offset_value & 0x200) != 0) {\n                result = get_value_at_offset(array);\n              }\n              uint32_t data_validity_check_result1 = check_data_validity(array, 0x1c, 0x1e);\n              uint32_t data_validity_check_result2 = check_data_validity(array, 0x20, 0x22);\n              if (data_validity_check_result1 != 0 || data_validity_check_result2 != 0) {\n                result = 0;\n              }\n            }\n            else {\n              result = 0;\n            }\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_08003ce8",
                "FUN_08003de4",
                "FUN_080038dc",
                "FUN_080091c6",
                "FUN_080038e4",
                "FUN_08003a1c",
                "FUN_08007320",
                "FUN_08003e20",
                "FUN_08003aa0",
                "FUN_0800376c",
                "FUN_08006c60",
                "FUN_08003bd8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d80",
            "calling": [
                "FUN_08008880"
            ],
            "imported": false,
            "current_name": "decode_and_calculate_result_08006d80"
        },
        "FUN_08006c60": {
            "renaming": {
                "FUN_08006c60": "find_value_08006c60",
                "param_1": "value",
                "param_2": "pointer",
                "param_3": "param_3",
                "param_4": "param_4",
                "iVar1": "found_index",
                "uVar2": "shifted_value"
            },
            "code": "uint find_value_08006c60(uint value, uint *pointer, uint param_3, uint param_4){\n  int found_index = find_value_08006c60_08007376(value, pointer, param_3, param_4, param_4);\n  uint shifted_value = (uint)(found_index << 0xc) >> 0x1b;\n  if (shifted_value > 0x11) {\n    shifted_value = 0;\n  }\n  return shifted_value;\n}",
            "called": [
                "FUN_08007376"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c60",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "find_value_08006c60"
        },
        "FUN_08003306": {
            "renaming": {
                "FUN_08003306": "set_values_08003306",
                "param_1": "address",
                "param_2": "opcode",
                "param_3": "value1",
                "param_4": "value2"
            },
            "code": "void set_values_08003306(int address, uint8_t opcode, uint32_t value1, uint32_t value2)\n{\n    switch(opcode)\n    {\n        case 0x90:\n            *(uint32_t *)(address + 0x50) = value1;\n            *(uint32_t *)(address + 0x20) = value2;\n            break;\n        case 0xc0:\n            *(uint32_t *)(address + 0x54) = value1;\n            *(uint32_t *)(address + 0x24) = value2;\n            break;\n        case 0xd0:\n            *(uint32_t *)(address + 0x58) = value1;\n            *(uint32_t *)(address + 0x28) = value2;\n            break;\n        case 0xe0:\n            *(uint32_t *)(address + 0x4c) = value1;\n            *(uint32_t *)(address + 0x1c) = value2;\n            break;\n        case 0xf4:\n            *(uint32_t *)(address + 0x5c) = value1;\n            *(uint32_t *)(address + 0x2c) = value2;\n            break;\n        case 0xf5:\n            *(uint32_t *)(address + 0x60) = value1;\n            *(uint32_t *)(address + 0x30) = value2;\n            break;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003306",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_values_08003306"
        },
        "FUN_08002578": {
            "renaming": {
                "FUN_08002578": "update_flags_and_clear_bits_in_array_08002578"
            },
            "code": "void update_flags_and_clear_bits_in_array_08002578() {\n  update_flags_and_clear_bits_in_array_08002578_080076e0();\n  return;\n}",
            "called": [
                "FUN_080076e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002578",
            "calling": [
                "FUN_08002644"
            ],
            "imported": false,
            "current_name": "update_flags_and_clear_bits_in_array_08002578"
        },
        "FUN_08006932": {
            "renaming": {
                "FUN_08006932": "set_value_and_check_input_08006932",
                "param_1": "ptr_param",
                "*param_1": "*ptr_param",
                "uint": "unsigned int",
                "ptr_value": "ptr_uint_value",
                "ptr_char": "ptr_char_value"
            },
            "code": "int set_value_and_check_input_08006932(int* ptr_param) {\n    uint* ptr_value = (uint*)(*ptr_param + 0xc);\n    *ptr_value &= 0xffffffbf;\n    char* ptr_char = (char*)(ptr_param + 0x39);\n    *ptr_char = 0x20;\n    find_value_index_and_check_input();\n    return 0;\n}",
            "called": [
                "FUN_08008730"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006932",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "set_value_and_check_input_08006932"
        },
        "FUN_080060c4": {
            "renaming": {
                "FUN_080060c4": "update_data_080060c4",
                "param_1": "data_offset",
                "param_2": "data",
                "uVar1": "updated_value_1",
                "uVar2": "updated_value_2",
                "iVar3": "new_value"
            },
            "code": "void update_data_080060c4(int data_offset, int *data)\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    int new_value;\n\n    *(uint32_t *)(data_offset + 0x20) = *(uint32_t *)(data_offset + 0x20) & 0xffffffef;\n    uVar2 = *(uint32_t *)(data_offset + 4);\n    new_value = *data;\n    uVar1 = *(uint32_t *)(data_offset + 0x20) & 0xffffffdf | data[2] << 4;\n    if (data_offset == DAT_08006124) {\n        uVar1 = (uVar1 & 0xffffff7f | data[3] << 4) & 0xffffffbf;\n        uVar2 = uVar2 & 0xfffff3ff | data[5] << 2 | data[6] << 2;\n    }\n    *(uint32_t *)(data_offset + 4) = uVar2;\n    *(uint32_t *)(data_offset + 0x18) = *(uint32_t *)(data_offset + 0x18) & 0xffff8cff | new_value << 8;\n    *(int *)(data_offset + 0x38) = data[1];\n    *(uint32_t *)(data_offset + 0x20) = uVar1;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060c4",
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "imported": false,
            "current_name": "update_data_080060c4"
        },
        "FUN_08009eac": {
            "renaming": {
                "FUN_08009eac": "allocate_memory_and_set_permissions_08009eac",
                "param_1": "process_id",
                "param_2": "memory_block",
                "uVar1": "permissions",
                "iVar2": "allocated_block",
                "local_18": "size",
                "local_14": "permissions_ptr"
            },
            "code": "void allocate_memory_and_set_permissions_08009eac(int process_id, int* memory_block)\n{\n    ushort permissions;\n    int size;\n    int* permissions_ptr;\n\n    if ((uint)*(ushort *)(memory_block + 3) << 0x1e > 0xffffffff) {\n        size = process_id;\n        permissions_ptr = memory_block;\n        permissions = check_permissions(process_id, memory_block, &size, &permissions_ptr);\n        int allocated_block = allocate_memory_block(process_id, size);\n        if (allocated_block != 0) {\n            *(undefined **)(process_id + 0x28) = PTR_LAB_08009cd0_1_08009f28;\n            *memory_block = allocated_block;\n            *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) | 0x80;\n            memory_block[4] = allocated_block;\n            memory_block[5] = size;\n            if ((permissions_ptr != (int *)0x0) && (get_value_from_pointer_if_return_minus_one(process_id, (int)*(short *)((int)memory_block + 0xe)) != 0)) {\n                *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) & 0xfffc | 1;\n            }\n            *(ushort *)(memory_block + 3) = permissions | *(ushort *)(memory_block + 3);\n            return;\n        }\n        if ((int)(short)*(ushort *)(memory_block + 3) << 0x16 < 0) {\n            return;\n        }\n        *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) & 0xfffc | 2;\n    }\n    *memory_block = (int)memory_block + 0x47;\n    memory_block[4] = (int)memory_block + 0x47;\n    memory_block[5] = 1;\n    return;\n}",
            "called": [
                "FUN_08009270",
                "FUN_0800a110",
                "FUN_08009e64"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009eac",
            "calling": [
                "FUN_08009a80"
            ],
            "imported": false,
            "current_name": "allocate_memory_and_set_permissions_08009eac"
        },
        "FUN_080072d8": {
            "renaming": {
                "FUN_080072d8": "set_value_at_address_based_on_condition_080072d8",
                "param_1": "address",
                "param_2": "value",
                "param_3": "condition",
                "param_4": "arg1",
                "<original_variable_name_1>": "arg2"
            },
            "code": "void set_value_at_address_based_on_condition_080072d8(void* address, short value, int condition, void* arg1, void* arg2){\n  if (condition == 0) {\n    set_value_at_address_based_on_condition_080072d8_080042e2(address, value, 0, arg1, arg2);\n    return;\n  }\n  set_value_at_address_based_on_condition_080072d8_080042e2(address, value, 1, arg1, arg2);\n  return;\n}",
            "called": [
                "FUN_080042e2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072d8",
            "calling": [
                "FUN_08008a24"
            ],
            "imported": false,
            "current_name": "set_value_at_address_based_on_condition_080072d8"
        },
        "FUN_080045c0": {
            "renaming": {
                "FUN_080045c0": "calculate_values_from_pointer_080045c0",
                "param_1": "ptr_array",
                "bVar1": "is_less_than_equal",
                "uVar2": "shifted_value",
                "puVar3": "pointer_value",
                "uVar4": "product"
            },
            "code": "uint32_t calculate_values_from_pointer_080045c0(uint32_t **ptr_array){\n    bool is_less_than_equal = false;\n    uint32_t shifted_value, quotient;\n    uint32_t *pointer_value;\n    uint32_t product;\n\n    if (ptr_array == NULL) {\n        return 1;\n    }\n    if (*(char *)((int)ptr_array + 0x3d) == \"\\0\") {\n        *(undefined *)(ptr_array + 0xf) = 0;\n        do_nothing_080045bc();\n    }\n    *(undefined *)((int)ptr_array + 0x3d) = 0x24;\n    **ptr_array = **ptr_array & 0xfffffffe;\n    shifted_value = get_shifted_value_from_ptr_dat_08005a28();\n    if (DAT_08004714 < ptr_array[1]) {\n        is_less_than_equal = shifted_value <= DAT_08004720;\n    }\n    else if (DAT_08004718 < shifted_value) {\n        is_less_than_equal = false;\n    }\n    else {\n        is_less_than_equal = true;\n    }\n    if (is_less_than_equal) {\n        return 1;\n    }\n    product = (uint32_t)((uint64_t)DAT_0800471c * (uint64_t)shifted_value >> 0x32);\n    (*ptr_array)[1] = product;\n    if (DAT_08004714 < ptr_array[1]) {\n        product = (uint32_t)((uint64_t)DAT_08004724 * (uint64_t)(product * 300) >> 0x26);\n    }\n    (*ptr_array)[8] = product + 1;\n    pointer_value = ptr_array[1];\n    if (DAT_08004714 < pointer_value) {\n        if (ptr_array[2] == NULL) {\n            quotient = count_leading_zeroes((shifted_value - 1) / (uint32_t)((int)pointer_value * 3) + 1 & 0xfff);\n        }\n        else {\n            quotient = count_leading_zeroes((shifted_value - 1) / (uint32_t)((int)pointer_value * 0x19) + 1 & 0xfff);\n        }\n        if (quotient >> 5 == 0) {\n            if (ptr_array[2] == NULL) {\n                shifted_value = (shifted_value - 1) / (uint32_t)((int)pointer_value * 3) + 1 & 0xfff | 0x8000;\n            }\n            else {\n                shifted_value = (shifted_value - 1) / (uint32_t)((int)pointer_value * 0x19) + 1 & 0xfff | 0xc000;\n            }\n        }\n        else {\n            shifted_value = 1;\n        }\n    }\n    else {\n        shifted_value = (shifted_value - 1) / (uint32_t)((int)pointer_value << 1) + 1 & 0xfff;\n        if (shifted_value < 4) {\n            shifted_value = 4;\n        }\n    }\n    **ptr_array = (uint32_t)ptr_array[7] | (uint32_t)ptr_array[8];\n    (*ptr_array)[2] = (uint32_t)ptr_array[4] | (uint32_t)ptr_array[3];\n    (*ptr_array)[3] = (uint32_t)ptr_array[5] | (uint32_t)ptr_array[6];\n    **ptr_array = **ptr_array | 1;\n    ptr_array[0x10] = NULL;\n    *(undefined *)((int)ptr_array + 0x3d) = 0x20;\n    ptr_array[0xc] = NULL;\n    *(undefined *)((int)ptr_array + 0x3e) = 0;\n    return 0;\n}",
            "called": [
                "FUN_080045bc",
                "FUN_08005a28"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045c0",
            "calling": [
                "FUN_080077b0"
            ],
            "imported": false,
            "current_name": "calculate_values_from_pointer_080045c0"
        },
        "FUN_08007e74": {
            "renaming": {
                "FUN_08007e74": "process_data_08007e74_08007e74",
                "param_1": "data",
                "iVar1": "data_start",
                "uVar3": "diff",
                "iVar4": "status",
                "iVar5": "data_ptr",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar6": "param_4",
                "process_params_08004728": "process_params_08004728",
                "get_value_at_offset_0x3d_0800542a": "get_value_at_offset_0x3d_0800542a",
                "get_data_from_pointer_08003760": "get_data_from_pointer_08003760",
                "get_value_at_offset_08005430": "get_value_at_offset_08005430"
            },
            "code": "int process_data_08007e74_08007e74(int data, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  int data_start = get_data_from_pointer_08003760();\n  uint diff = 0;\n  int status = 2;\n  do {\n    int data_ptr = data + 4;\n    int proc_res = process_params_08004728(data_ptr, param_2, param_3, param_4, param_4);\n    if (proc_res == 0) {\n      status = 0;\n      int val = get_value_at_offset_0x3d_0800542a(data_ptr);\n      while (val != 0x20 && status == 0) {\n        int data_ptr_val = get_data_from_pointer_08003760();\n        diff = data_ptr_val - data_start;\n        if (diff < 0x65) {\n          int val2 = get_value_at_offset_08005430(data_ptr);\n          if (val2 != 0) {\n            status = 2;\n          }\n        }\n        else {\n          status = 1;\n        }\n      }\n    }\n    int val = get_value_at_offset_08005430(data_ptr);\n  } while (val == 4 && diff < 100);\n  return status;\n}",
            "called": [
                "FUN_08004728",
                "FUN_08003760",
                "FUN_08005430",
                "FUN_0800542a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e74",
            "calling": [
                "FUN_08002a58"
            ],
            "imported": false,
            "current_name": "process_data_08007e74_08007e74"
        },
        "FUN_08002efe": {
            "renaming": {
                "FUN_08002efe": "execute_function_with_data_08002efe",
                "param_1": "data_offset",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "param_5"
            },
            "code": "void execute_function_with_data_08002efe(int data_offset, int param_2, int param_3, int param_4, int param_5)\n{\n  execute_function_with_data_08002efe_0800319e(data_offset + 0x40, param_2, param_3, param_4, param_5);\n  return;\n}",
            "called": [
                "FUN_0800319e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efe",
            "calling": [
                "FUN_08000be8"
            ],
            "imported": false,
            "current_name": "execute_function_with_data_08002efe"
        },
        "FUN_08002f84": {
            "renaming": {
                "FUN_08002f84": "update_data_if_max_value_reached_08002f84",
                "param_1": "data_address",
                "param_2": "current_value",
                "param_3": "new_data"
            },
            "code": "void update_data_if_max_value_reached_08002f84(undefined4 data_address, int current_value, undefined4 new_data) {\n  if (current_value == 255) {\n    *(undefined4 *)PTR_DAT_08002f90 = new_data;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f84",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "update_data_if_max_value_reached_08002f84"
        },
        "FUN_08002ddc": {
            "renaming": {
                "FUN_08002ddc": "execute_function_08002ddc",
                "param_1": "base_address",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "execute_function_with_params_0800322c": "execute_with_params"
            },
            "code": "void execute_function_08002ddc(int base_address, int param_2, int param_3, int param_4) {\n  execute_with_params(base_address + 0x40, 2, 5, param_4, param_4);\n  return;\n}",
            "called": [
                "FUN_0800322c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ddc",
            "calling": [
                "FUN_08002e26"
            ],
            "imported": false,
            "current_name": "execute_function_08002ddc"
        },
        "FUN_08009094": {
            "renaming": {
                "FUN_08009094": "process_binary_if_length_not_null_08009094",
                "iVar1": "binary_length",
                "find_binary_length_08008f3c": "find_binary_length",
                "PTR_DAT_080090b0": "binary_pointer",
                "process_binary_08009084": "process_binary"
            },
            "code": "void process_binary_if_length_not_null_08009094() {\n  int binary_length = find_binary_length_08008f3c();\n  int PTR_DAT_080090b0 = PTR_DAT_080090b0 + binary_length * 0x14 + 0xc;\n  if (*(int *)PTR_DAT_080090b0 != 0) {\n    process_binary();\n  }\n  return;\n}",
            "called": [
                "FUN_08009084",
                "FUN_08008f3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009094",
            "calling": [
                "FUN_080042f0"
            ],
            "imported": false,
            "current_name": "process_binary_if_length_not_null_08009094"
        },
        "FUN_08009f2c": {
            "renaming": {
                "FUN_08009f2c": "find_character_in_string_08009f2c",
                "param_1": "input_string",
                "param_2": "character",
                "param_3": "string_length",
                "pcVar1": "current_char_pointer",
                "pcVar2": "current_char_pointer_plus_one"
            },
            "code": "char* find_character_in_string_08009f2c(char* input_string, char character, int string_length) {\n  char* current_char_pointer = input_string;\n  do {\n    if (current_char_pointer == input_string + string_length) {\n      return NULL;\n    }\n    current_char_pointer++;\n  } while (*current_char_pointer != character);\n  return current_char_pointer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f2c",
            "calling": [
                "FUN_0800937c",
                "FUN_08009698"
            ],
            "imported": false,
            "current_name": "find_character_in_string_08009f2c"
        },
        "FUN_0800a154": {
            "renaming": {
                "FUN_0800a154": "calculate_value_0800a154",
                "param_1": "offset",
                "param_2": "data",
                "iVar1": "current_value"
            },
            "code": "int calculate_value_0800a154(int offset, int* data) {\n  int current_value = *(data + offset - 4) - 4;\n  if (*(data + offset - 4) < 0) {\n    current_value += *(data + offset + current_value);\n  }\n  return current_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a154",
            "calling": [
                "FUN_08009908"
            ],
            "imported": false,
            "current_name": "calculate_value_0800a154"
        },
        "FUN_08002580": {
            "renaming": {
                "FUN_08002580": "increment_and_set_byte_08002580",
                "param_1": "output_byte",
                "bVar1": "current_byte"
            },
            "code": "void increment_and_set_byte_08002580(byte *output_byte) {\n  byte current_byte = *PTR_DAT_080025a4;\n  if (current_byte > 0xb) {\n    *output_byte = 0xff;\n    return;\n  }\n  *PTR_DAT_080025a4 = current_byte + 1;\n  *output_byte = current_byte;\n  *(undefined4 *)(PTR_DAT_080025a8 + (uint)current_byte * 8 + 4) = 0x5dc;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002580",
            "calling": [
                "FUN_080004d4"
            ],
            "imported": false,
            "current_name": "increment_and_set_byte_08002580"
        },
        "FUN_08007f8e": {
            "renaming": {
                "FUN_08007f8e": "set_param_2_if_param_1_not_null_08007f8e",
                "param_1": "param1",
                "param_2": "param2",
                "*(int *)(param_1 + 100)": "value_at_param1_plus_100",
                "set_bit_and_flag_080049e0": "set_bit_and_flag",
                "param1 + 4": "param1_plus_4"
            },
            "code": "void set_param_2_if_param_1_not_null_08007f8e(int param1, int param2) {\n  if (param1 != 0) {\n    if (param2 != 0) {\n      *(int *)(param1 + 100) = param2;\n      set_bit_and_flag_080049e0(param1 + 4);\n    }\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_080049e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f8e",
            "calling": [
                "FUN_08002968"
            ],
            "imported": false,
            "current_name": "set_param_2_if_param_1_not_null_08007f8e"
        },
        "FUN_08006b3e": {
            "renaming": {
                "FUN_08006b3e": "set_bit_in_array_08006b3e",
                "param_1": "bit_index",
                "param_2": "array",
                "uVar1": "array_index",
                "*(uint *)(param_2 + uVar1 * 4)": "array_ptr",
                "1 << (param_1 & 0xf)": "bit_mask"
            },
            "code": "void set_bit_in_array_08006b3e(uint bit_index, int* array) {\n  uint array_index = (bit_index << 0x18) >> 0x1c;\n  uint* array_ptr = (uint*)(array + array_index * 4);\n  uint bit_mask = 1 << (bit_index & 0xf);\n  *array_ptr = *array_ptr | bit_mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b3e",
            "calling": [
                "FUN_080088e0",
                "FUN_08008990"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_08006b3e"
        },
        "FUN_08006262": {
            "renaming": {
                "FUN_08006262": "set_bit_in_uint_array_08006262",
                "param_1": "array_ptr",
                "param_2": "bit_index",
                "param_3": "bit_value",
                "PTR_": "",
                "DAT_": "",
                "*": "",
                "&": "",
                "<<": "shift_left",
                "|": "bitwise_or",
                "~": "bitwise_not",
                "+": "sum",
                "uint": "unsigned_int"
            },
            "code": "void set_bit_in_uint_array_08006262(int array_ptr, uint bit_index, int bit_value) {\n  uint* array = (uint*)(array_ptr + 0x20);\n  uint bit_mask = ~(1 << (bit_index & 0xff));\n  *array = (*array & bit_mask) | (bit_value << (bit_index & 0xff));\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006262",
            "calling": [
                "FUN_08006280",
                "FUN_080062f4",
                "FUN_080063c0",
                "FUN_08006390"
            ],
            "imported": false,
            "current_name": "set_bit_in_uint_array_08006262"
        },
        "FUN_08007110": {
            "renaming": {
                "FUN_08007110": "update_flags_08007110"
            },
            "code": "void update_flags_08007110(void)\n{\n  update_flags_08007110_helper();\n  return;\n}",
            "called": [
                "FUN_080074e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007110",
            "calling": [
                "FUN_08005e2e"
            ],
            "imported": false,
            "current_name": "update_flags_08007110"
        },
        "FUN_08007594": {
            "renaming": {
                "FUN_08007594": "check_timer_08007594",
                "param_1": "timer_value",
                "DAT_080075d0": "timer_base",
                "DAT_080075d4": "timer_base_offset",
                "PTR_s_TIM__Unknown_timer_instance_080075d8": "timer_instance",
                "process_data_080098d8": "process_data"
            },
            "code": "int check_timer_08007594(uint timer_value) {\n  if (timer_value == 0xffffffff) {\n    return 0;\n  }\n  if (timer_value == DAT_080075d0) {\n    return 1;\n  }\n  if (DAT_080075d0 < timer_value) {\n    if (timer_value == DAT_080075d4) {\n      return 1;\n    }\n    if (timer_value == DAT_080075d4 + 0x12400) {\n      return 2;\n    }\n  }\n  else if (timer_value == 0x40000000) {\n    return 1;\n  }\n  process_data_080098d8(PTR_s_TIM__Unknown_PTR_s_TIM__Unknown_timer_instance_080075d8_080075d8);\n  return 0;\n}",
            "called": [
                "FUN_080098d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007594",
            "calling": [
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "check_timer_08007594"
        },
        "FUN_080073ec": {
            "renaming": {
                "FUN_080073ec": "set_bit_and_clear_mask_080073ec",
                "puVar1": "data_ptr",
                "DAT_0800742c": "data",
                "DAT_08007430": "mask"
            },
            "code": "void set_bit_and_clear_mask_080073ec(uint *DAT_0800742c)\n{\n  uint *DAT_0800742c_ptr = DAT_0800742c;\n  *DAT_0800742c_ptr |= 1;\n  DAT_0800742c_ptr[1] &= 0xFFFFFF00;\n  *DAT_0800742c_ptr &= 0xFEF6FFFF;\n  *DAT_0800742c_ptr &= 0xFFFBFFFF;\n  DAT_0800742c_ptr[1] &= 0xFF80FFFF;\n  DAT_0800742c_ptr[2] = 0x9F0000;\n  *(uint *)(DAT_0800742c + 0x8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073ec",
            "calling": [
                "FUN_08003658"
            ],
            "imported": false,
            "current_name": "set_bit_and_clear_mask_080073ec"
        },
        "FUN_08008ef4": {
            "renaming": {
                "FUN_08008ef4": "calculate_new_value_08008ef4",
                "param_1": "start_value",
                "param_2": "end_value",
                "param_3": "current_value",
                "param_4": "start_range",
                "param_5": "end_range",
                "uint": "unsigned int"
            },
            "code": "int calculate_new_value_08008ef4(int start_value, int end_value, int current_value, int start_range, int end_range) {\n    int range_difference = end_range - start_range;\n    int value_difference = end_value - start_value;\n    int current_range_difference = current_value - start_range;\n    int new_value = (value_difference * current_range_difference) / range_difference + start_value;\n    return new_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ef4",
            "calling": [
                "FUN_080026b0"
            ],
            "imported": false,
            "current_name": "calculate_new_value_08008ef4"
        },
        "FUN_08002df6": {
            "renaming": {
                "FUN_08002df6": "encode_data_08002df6",
                "param_1": "data_ptr",
                "puVar1": "data_ptr_200"
            },
            "code": "void encode_data_08002df6(int data_ptr) {\n  if (*(byte *)(data_ptr + 0xc4) == 0) {\n    return;\n  }\n  undefined *data_ptr_200 = *(undefined **)(data_ptr + 200);\n  int data_size = *(byte *)(data_ptr + 0xc4) - 2;\n  void *data = data_ptr_200 + 2;\n  encode_data_08002df6_080031ce(data_ptr + 0x40, *data_ptr_200, data_ptr_200[1], data_size, data);\n  return;\n}",
            "called": [
                "FUN_080031ce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002df6",
            "calling": [
                "FUN_08002e26"
            ],
            "imported": false,
            "current_name": "encode_data_08002df6"
        },
        "FUN_080045bc": {
            "renaming": {
                "FUN_080045bc": "do_nothing_080045bc"
            },
            "code": "\nvoid do_nothing_080045bc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045bc",
            "calling": [
                "FUN_080045c0"
            ],
            "imported": false,
            "current_name": "do_nothing_080045bc"
        },
        "FUN_08007118": {
            "renaming": {
                "FUN_08007118": "process_data_08007118",
                "param_1": "data",
                "param_2": "divisor",
                "param_3": "offset",
                "param_4": "flags",
                "param_5": "condition",
                "local_74": "local_10",
                "local_70": "local_c",
                "local_6c": "local_8",
                "local_68": "local_7",
                "local_64": "local_10",
                "local_60": "local_c",
                "local_5c": "local_8",
                "local_58": "array",
                "local_54": "limit",
                "local_50": "local_10",
                "local_4c": "local_c",
                "local_48": "local_8",
                "local_44": "local_7",
                "local_1b": "local_7",
                "fill_array_with_value_080091c6": "fill_array_with_value",
                "PTR_DAT_080071dc": "PTR_DAT",
                "extract_data_and_check_clock_source_080075dc": "extract_data_and_check_clock_source",
                "process_params_08006092": "process_params",
                "get_value_from_array_08006c7c": "get_value_from_array",
                "set_flags_and_values_08006186": "set_flags_and_values",
                "find_value_08007376": "find_value",
                "set_bit_in_uint_array_08006390": "set_bit_in_uint_array",
                "set_bits_at_offset_0800643c": "set_bits_at_offset",
                "PTR_DAT_080071e0": "PTR_DAT"
            },
            "code": "void process_data_08007118(int* array, int value, int length) {\n    for(int i=0; i<length; i++) {\n        array[i] = value;\n    }\n}\n\nvoid process_data_08007118(uint32_t data, uint32_t divisor, int offset, uint32_t flags, char condition) {\n    uint32_t extracted_data = 0;\n    int index = 0;\n    int limit = 0;\n    uint32_t local_10 = 0;\n    uint32_t local_c = 0;\n    uint32_t local_8 = 0;\n    char local_7 = 0;\n\n    int array[64];\n    process_data_08007118(array, 0, 64);\n\n    index = find_value_08007376_if_not_negative(data, PTR_DAT_080071e0_080071dc_080071dc);\n    if (index != 0) {\n        extracted_data = extract_data_and_check_clock_source();\n        limit = extracted_data / divisor - 1;\n        local_8 = 0;\n        local_10 = 0;\n        local_c = 0;\n        local_7 = 0;\n\n        if (condition == '\\x01') {\n            *PTR_DAT_080071e0_080071dc_080071e0 = (char)data;\n            int result = process_params_08006092(array, &index);\n            if (result != 0) {\n                return;\n            }\n        }\n\n        int value = get_value_from_array_08006c7c(data);\n        if ((value == 0) || (value == 4) || (value == 8) || (value == 0xc) || (value == 0x18)) {\n            local_10 = 0x60;\n            local_c = 0;\n            local_8 = 0;\n            local_7 = 0;\n            local_10 = flags;\n            int result = set_flags_and_values_08006186(array, &local_10, value);\n            if (result == 0) {\n                uint32_t found_value = find_value_08007376(data, PTR_DAT_080071e0_080071dc_080071dc);\n                if ((found_value & 0x100000) == 0) {\n                    set_bit_in_uint_array_08006390(array, value);\n                }\n                else {\n                    set_bits_at_offset_0800643c(array, value);\n                }\n            }\n        }\n    }\n    return;\n}\n",
            "called": [
                "FUN_08007376",
                "FUN_08006092",
                "FUN_080091c6",
                "FUN_08006186",
                "FUN_08007320",
                "FUN_0800643c",
                "FUN_08006390",
                "FUN_080075dc",
                "FUN_08006c7c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007118",
            "calling": [
                "FUN_080088e0"
            ],
            "imported": false,
            "current_name": "process_data_08007118"
        },
        "FUN_08009fe8": {
            "renaming": {
                "FUN_08009fe8": "process_input_08009fe8",
                "param_1": "input_value",
                "puVar1": "pointer_to_data",
                "uVar2": "value",
                "piVar3": "function_pointer_array",
                "iVar4": "result",
                "pcVar5": "function_pointer",
                "unaff_r4": "unaff_r4",
                "unaff_r5": "unaff_r5",
                "in_lr": "in_lr",
                "puVar6": "pointer_to_pointer_array"
            },
            "code": "int process_input_08009fe8(uint input_value) {\n  int *function_pointer_array = *(int **)PTR_PTR_DAT_08009ff4;\n  if (input_value > 31) {\n    *function_pointer_array = 22;\n    return -1;\n  }\n  int function_pointer = function_pointer_array[17];\n  if (function_pointer != 0 && function_pointer != 1) {\n    if (function_pointer == -1) {\n      *function_pointer_array = 22;\n      return 1;\n    }\n    *(int *)(function_pointer + input_value * 4) = 0;\n    (*(code *)function_pointer)(input_value);\n    return 0;\n  }\n  undefined *pointer_to_pointer_array = PTR_PTR_DAT_08009ff4;\n  undefined4 value = thunk_return_one_0800887c(function_pointer_array);\n  undefined *pointer_to_data = PTR_DAT_0800a018;\n  *(undefined4 *)PTR_DAT_0800a018 = 0;\n  int result = set_ptr_dat_value_to_22_0800886c(value, input_value, input_value, 0, pointer_to_pointer_array, unaff_r4, unaff_r5, in_lr);\n  if (result == -1 && *(int *)pointer_to_data != 0) {\n    *function_pointer_array = *(int *)pointer_to_data;\n  }\n  return result;\n}",
            "called": [
                "thunk_FUN_0800887c",
                "FUN_0800886c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009fe8",
            "calling": [
                "FUN_08009b5c"
            ],
            "imported": false,
            "current_name": "process_input_08009fe8"
        },
        "FUN_08002c1e": {
            "renaming": {
                "FUN_08002c1e": "initialize_with_param_one_true_08002c1e",
                "param_1": "flag",
                "param_2": "limit",
                "param_3": "param_3",
                "param_4": "param_4"
            },
            "code": "void initialize_with_param_one_true_08002c1e(int flag, int limit, int param_3, int param_4)\n                      {\n                          initialize_if_param_one_is_true(1, 0xffff, param_3, param_4, param_4);\n                          return;\n                      }",
            "called": [
                "FUN_08002948"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c1e",
            "calling": [],
            "imported": false,
            "current_name": "initialize_with_param_one_true_08002c1e"
        },
        "FUN_08005a68": {
            "renaming": {
                "FUN_08005a68": "extract_data_from_memory_08005a68",
                "param_1": "output_data",
                "param_2": "input_data",
                "iVar1": "memory_address",
                "*param_1": "*output_data",
                "DAT_08005a9c": "memory_address",
                "*(uint *)(DAT_08005a9c + 4) & 3": "*(uint32_t *)(memory_address + 4) & 3",
                "*(uint *)(iVar1 + 4) & 0xf0": "*(uint32_t *)(memory_address + 4) & 0xf0",
                "*(uint *)(iVar1 + 4) & 0x700": "*(uint32_t *)(memory_address + 4) & 0x700",
                "*(uint *)(iVar1 + 4) >> 3 & 0x700": "*(uint32_t *)(memory_address + 4) >> 3 & 0x700",
                "*param_2": "*input_data",
                "*DAT_08005aa0 & 7": "*DAT_08005aa0 & 7"
            },
            "code": "void extract_data_from_memory_08005a68(uint32_t *output_data, uint32_t *input_data)\n{\n  uint32_t data_offset = 0x0f;\n  uint32_t DAT_08005a9c = DAT_08005a9c;\n  output_data[0] = data_offset;\n  output_data[1] = *(uint *)(DAT_08005a9c + 4) & 3;\n  output_data[2] = *(uint32_t *)(DAT_08005a9c + 4) & 0xf0;\n  output_data[3] = *(uint32_t *)(DAT_08005a9c + 4) & 0x700;\n  output_data[4] = *(uint32_t *)(DAT_08005a9c + 4) >> 3 & 0x700;\n  *input_data = *DAT_08005aa0 & 7;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a68",
            "calling": [
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "extract_data_from_memory_08005a68"
        },
        "FUN_08008f78": {
            "renaming": {
                "FUN_08008f78": "initialize_data_if_needed_08008f78",
                "param_1": "condition",
                "param_2": "flag",
                "puVar1": "data_ptr",
                "PTR_DAT_08009018": "PTR_data_08009018",
                "calculate_080090c2": "calculate_new_values"
            },
            "code": "void initialize_data_if_needed_08008f78(int condition, int flag, undefined4 param_3, undefined4 param_4)\n{\n  undefined *data_ptr;\n  data_ptr = PTR_DAT_08009018;\n  if (condition != 1) {\n    return;\n  }\n  if (flag == 0xffff) {\n    *PTR_DAT_08009018 = 6;\n    *(undefined4 *)(data_ptr + 0xc) = 0;\n    data_ptr[0x14] = 7;\n    *(undefined4 *)(data_ptr + 0x20) = 0;\n    data_ptr[0x28] = 8;\n    *(undefined4 *)(data_ptr + 0x34) = 0;\n    data_ptr[0x3c] = 9;\n    *(undefined4 *)(data_ptr + 0x48) = 0;\n    data_ptr[0x50] = 10;\n    *(undefined4 *)(data_ptr + 0x5c) = 0;\n    data_ptr[100] = 0x17;\n    *(undefined4 *)(data_ptr + 0x70) = 0;\n    data_ptr[0x78] = 0x17;\n    *(undefined4 *)(data_ptr + 0x84) = 0;\n    data_ptr[0x8c] = 0x17;\n    *(undefined4 *)(data_ptr + 0x98) = 0;\n    data_ptr[0xa0] = 0x17;\n    *(undefined4 *)(data_ptr + 0xac) = 0;\n    data_ptr[0xb4] = 0x17;\n    *(undefined4 *)(data_ptr + 0xc0) = 0;\n    data_ptr[200] = 0x28;\n    *(undefined4 *)(data_ptr + 0xd4) = 0;\n    data_ptr[0xdc] = 0x28;\n    *(undefined4 *)(data_ptr + 0xe8) = 0;\n    data_ptr[0xf0] = 0x28;\n    *(undefined4 *)(data_ptr + 0xfc) = 0;\n    data_ptr[0x104] = 0x28;\n    *(undefined4 *)(data_ptr + 0x110) = 0;\n    data_ptr[0x118] = 0x28;\n    *(undefined4 *)(data_ptr + 0x124) = 0;\n    data_ptr[300] = 0x28;\n    *(undefined4 *)(data_ptr + 0x138) = 0;\n    calculate_new_values(0, PTR_LAB_08008f50_1_08009020, PTR_DAT_0800901c, data_ptr, param_4);\n  }\n  return;\n}",
            "called": [
                "FUN_080090c2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f78",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_if_needed_08008f78"
        },
        "FUN_08008d30": {
            "renaming": {
                "FUN_08008d30": "initialize_game_data_08008d30",
                "param_1": "game_data",
                "param_2": "character_id",
                "param_3": "value",
                "param_4": "color",
                "set_value_at_address_based_on_index_08008d00": "set_value_at_address_based_on_index",
                "set_color_at_index_08008d18": "set_color_at_index",
                "find_character_index_0800734a": "find_character_index",
                "initialize_data_structures_08008c20": "initialize_data_structures"
            },
            "code": "undefined4 initialize_game_data_08008d30(undefined4 *game_data, undefined4 character_id, undefined4 value, undefined4 color)\n{\n  game_data[1] = 0;\n  game_data[2] = 1000;\n  *game_data = PTR_PTR_LAB_08008ba4_1_08008d7c;\n  if (game_data == (undefined4 *)PTR_DAT_08008d80) {\n    set_value_at_address_based_on_index(game_data, 0, value, PTR_DAT_08008d80, color);\n    set_color_at_index(game_data, 1);\n  }\n  else {\n    undefined character_index = find_character_index(character_id, PTR_DAT_08008d84);\n    *(undefined *)((int)game_data + 0x12d) = character_index;\n    character_index = find_character_index(character_id, PTR_DAT_08008d88);\n    *(undefined *)(game_data + 0x4b) = character_index;\n  }\n  initialize_data_structures(game_data);\n  return game_data;\n}",
            "called": [
                "FUN_08008d18",
                "FUN_08008d00",
                "FUN_0800734a",
                "FUN_08008c20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d30",
            "calling": [
                "FUN_08008d8c"
            ],
            "imported": false,
            "current_name": "initialize_game_data_08008d30"
        },
        "FUN_08002f94": {
            "renaming": {
                "FUN_08002f94": "update_ptr_data_08002f94",
                "param_1": "data_to_update_ptr",
                "param_2": "ptr_to_update",
                "param_3": "N/A",
                "PTR_DAT_08002f9c": "N/A"
            },
            "code": "void update_ptr_data_08002f94(undefined4 data_to_update_ptr, undefined4 ptr_to_update){\n  *(undefined4 *)ptr_to_update = data_to_update;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f94",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "update_ptr_data_08002f94"
        },
        "FUN_0800734a": {
            "renaming": {
                "FUN_0800734a": "find_character_index_0800734a",
                "param_1": "character",
                "uVar1": "index",
                "find_char_index_08007332": "search_for_character"
            },
            "code": "int find_character_index_0800734a(int character){\n  int index = -1;\n  if (character != 0) {\n    index = search_for_character();\n  }\n  return index;\n}",
            "called": [
                "FUN_08007332"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800734a",
            "calling": [
                "FUN_080084b0",
                "FUN_08008d30"
            ],
            "imported": false,
            "current_name": "find_character_index_0800734a"
        },
        "FUN_08000aec": {
            "renaming": {
                "FUN_08000aec": "initialize_game_board_08000aec",
                "bVar1": "is_valid_char",
                "iVar2": "char_index",
                "uVar3": "i",
                "PTR_DAT_08000bc0": "PTR_GAME_BOARD_INITIALIZED_FLAG",
                "PTR_DAT_08000bc4": "PTR_GAME_BOARD_CLEAR_FLAG",
                "clear_memory_080005e0": "clear_memory",
                "PTR_DAT_08000bc8": "PTR_GAME_BOARD",
                "PTR_DAT_08000bcc": "PTR_GAME_BOARD_COLOR",
                "PTR_DAT_08000bd0": "PTR_GAME_BOARD_CHAR_TYPE",
                "PTR_DAT_08000bd4": "PTR_GAME_BOARD_CHARACTERS",
                "find_char_index_080036ac": "find_char_index",
                "FUNC_080005f8": "set_game_board_character",
                "PTR_DAT_08000bd8": "PTR_GAME_BOARD_STAR",
                "PTR_DAT_08000bdc": "PTR_GAME_BOARD_SCORE",
                "PTR_DAT_08000be0": "PTR_GAME_BOARD_NUM_MOVES",
                "PTR_DAT_08000be4": "PTR_GAME_BOARD_NUM_STARS"
            },
            "code": "void initialize_game_board_08000aec(void)\\n{\\n  bool is_valid_char;\\n  int char_index;\\n  uint i;\\n  *PTR_DAT_08000bc0 = 1;\\n  if (*PTR_DAT_08000bc4 != \"\\0\") {\\n    clear_memory();\\n  }\\n  for (i = 0; i < 5; i++) {\\n    PTR_DAT_08000bc8[i] = 0;\\n    PTR_DAT_08000bc8[i + 5] = 0;\\n    PTR_DAT_08000bc8[i + 10] = 0;\\n  }\\n  for (i = 0; i < 0x3c; i++) {\\n    if ((i - 0x2e & 0xff) < 0xe) {\\n      if (i < 0x3c) {\\n        char_index = (int)(char)PTR_DAT_08000bd4[i];\\n      }\\n      else {\\n        char_index = -1;\\n      }\\n      char_index = find_char_index(char_index);\\n      if (char_index == 0) {\\n        is_valid_char = false;\\n      }\\n      else {\\n        if (i < 0x3c) {\\n          char_index = (int)(char)PTR_DAT_08000bd4[i];\\n        }\\n        else {\\n          char_index = -1;\\n        }\\n        char_index = find_char_index(char_index);\\n        if (char_index == 1) {\\n          is_valid_char = false;\\n        }\\n        else {\\n          is_valid_char = true;\\n        }\\n      }\\n    }\\n    else {\\n      is_valid_char = false;\\n    }\\n    if (is_valid_char) {\\n      set_game_board_character(i, 2);\\n    }\\n    else {\\n      if (i < 0x3c) {\\n        if (((PTR_DAT_08000bd4[i] != -1) && (char_index = find_char_index(), char_index != 0)) &&\\n           (char_index = find_char_index((int)(char)PTR_DAT_08000bd4[i]), char_index != 1)) {\\n          is_valid_char = true;\\n        }\\n      }\\n      if (is_valid_char) {\\n        set_game_board_character(i, 1);\\n      }\\n    }\\n    PTR_DAT_08000bcc[i] = 0xff;\\n  }\\n  *(undefined4 *)PTR_DAT_08000bdc = 0;\\n  *PTR_DAT_08000be0 = 0;\\n  *PTR_DAT_08000be4 = 0;\\n  *PTR_DAT_08000bc0 = 0;\\n  return;\\n}",
            "called": [
                "FUN_080036ac",
                "FUN_080005e0",
                "FUN_080005f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aec",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "initialize_game_board_08000aec"
        },
        "FUN_08008eec": {
            "renaming": {
                "FUN_08008eec": "call_conversion_function_or_function_call_08008eec",
                "convert_or_call_function_08008ed6": "convert_or_call_function"
            },
            "code": "void call_conversion_function_or_function_call_08008eec(void)\n{\n  convert_or_call_function();\n  return;\n}",
            "called": [
                "FUN_08008ed6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008eec",
            "calling": [],
            "imported": false,
            "current_name": "call_conversion_function_or_function_call_08008eec"
        },
        "FUN_080068d6": {
            "renaming": {
                "FUN_080068d6": "check_space_after_string_080068d6",
                "param_1": "data",
                "param_2": "length",
                "param_3": "value",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "int check_space_after_string_080068d6(int *data, int length, int value) {\n    if (*(char *)((int)data + 0x3a) != ' ') {\n        return 2;\n    }\n    if (length == 0) {\n        return 1;\n    }\n    if (value == 0) {\n        return 1;\n    }\n    if (*(char *)(data + 0xe) != '\\x01') {\n        data[10] = length;\n        *(short *)(data + 0xb) = (short)value;\n        *(short *)((int)data + 0x2e) = (short)value;\n        data[0xf] = 0;\n        *(undefined *)((int)data + 0x3a) = 0x22;\n        *(undefined *)(data + 0xe) = 0;\n        *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x100;\n        *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) | 1;\n        *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x20;\n        return 0;\n    }\n    return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080068d6",
            "calling": [
                "FUN_08008600",
                "FUN_0800863c"
            ],
            "imported": false,
            "current_name": "check_space_after_string_080068d6"
        },
        "FUN_080032a2": {
            "renaming": {
                "FUN_080032a2": "encode_data_with_length_080032a2",
                "param_1": "data",
                "param_2": "string_start",
                "param_3": "string_end",
                "param_4": "param",
                "uVar1": "end_of_string",
                "find_end_of_string_08000178": "find_end_of_string",
                "encode_data_with_param_0800325a": "encode_data_with_param"
            },
            "code": "void encode_data_with_length_080032a2(void* data, int length, void* string_end, void* string_start, void* param) {\n  void* end_of_string = find_end_of_string(string_start);\n  encode_data_with_param(data, length, end_of_string, string_start, param);\n  return;\n}",
            "called": [
                "FUN_0800325a",
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032a2",
            "calling": [
                "FUN_08002f14"
            ],
            "imported": false,
            "current_name": "encode_data_with_length_080032a2"
        },
        "FUN_08001b48": {
            "renaming": {
                "FUN_08001b48": "initialize_game_08001b48",
                "PTR_DAT_08001bc0": "PTR_PATH",
                "PTR_s__home_bo_p2im_p2im_real_firmware_08001bc4": "PTR_FIRMWARE_PATH",
                "PTR_FUN_08000214_1_08001bc8": "PTR_FUNCTION_1",
                "PTR_LAB_080002ec_1_08001bcc": "PTR_LABEL_1",
                "DAT_08001bd0": "DAT_VARIABLE_1",
                "PTR_LAB_08000c18_1_08001bd4": "PTR_LABEL_2",
                "DAT_08001bd8": "DAT_VARIABLE_2",
                "PTR_LAB_080001a8_1_08001bdc": "PTR_LABEL_3",
                "PTR_FUNC_08001cd0_1_08001be0": "PTR_FUNCTION_2",
                "DAT_08001be4": "DAT_VARIABLE_3",
                "parse_path_08002e44": "parse_path",
                "update_value_at_address_if_key_matches_08002f2c": "update_value_at_address_if_key_matches",
                "update_ptr_data_08002f94": "update_ptr_data",
                "update_data_if_max_value_reached_08002f84": "update_data_if_max_value_reached",
                "process_and_set_param_value_08003048": "process_and_set_param_value",
                "initialize_game_board_08000aec": "initialize_game_board",
                "send_interrupt_request_0800018c": "send_interrupt_request"
            },
            "code": "void initialize_game_08001b48(){\n  undefined *ptr_data;\n  ptr_data = PTR_DAT_08001bc0;\n  parse_path_08002e44(ptr_data,PTR_s__home_bo_p2im_p2im_real_firmware_08001bc4,2,5);\n  update_value_at_address_if_key_matches_08002f2c(ptr_data,0xe0,PTR_decode_and_set_data_08000214_1_08001bc8);\n  update_value_at_address_if_key_matches_08002f2c(ptr_data,0x90,PTR_LAB_080002ec_1_08001bcc);\n  update_value_at_address_if_key_matches_08002f2c(ptr_data,0xc0,DAT_08001bd0);\n  update_value_at_address_if_key_matches_08002f2c(ptr_data,0xd0,PTR_LAB_08000c18_1_08001bd4);\n  update_value_at_address_if_key_matches_08002f2c(ptr_data,0xf4,DAT_08001bd8);\n  update_value_at_address_if_key_matches_08002f2c(ptr_data,0xf5,PTR_LAB_080001a8_1_08001bdc);\n  update_ptr_data_08002f94(ptr_data,0xf0,PTR_FUNC_08001cd0_1_08001be0);\n  update_data_if_max_value_reached_08002f84(ptr_data,0xff,DAT_08001be4);\n  process_and_set_param_value_08003048(ptr_data,0xe100);\n  initialize_game_08001b48_board_08000aec();\n  send_interrupt_request_0800018c(0);\n  return;\n}",
            "called": [
                "FUN_08000aec",
                "FUN_08002f94",
                "FUN_08002f2c",
                "FUN_08002f84",
                "FUN_0800018c",
                "FUN_08003048",
                "FUN_08002e44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b48",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": false,
            "current_name": "initialize_game_08001b48"
        },
        "FUN_08006390": {
            "renaming": {
                "FUN_08006390": "set_bit_in_uint_array_08006390",
                "param_1": "uint_array",
                "param_2": "index",
                "puVar1": "array",
                "DAT_080063bc": "DAT_080063bc"
            },
            "code": "uint set_bit_in_uint_array_08006390(uint **uint_array, uint index, uint value) {\n  uint *array = *uint_array;\n  set_bit_in_uint_array_08006390_08006262(array, index, value);\n  uint *DAT_080063bc = array + 0x11;\n  if (array == DAT_080063bc) {\n    *DAT_080063bc |= 0x8000;\n  }\n  **uint_array |= 1;\n  return 0;\n}",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006390",
            "calling": [
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "set_bit_in_uint_array_08006390"
        },
        "FUN_08009f48": {
            "renaming": {
                "FUN_08009f48": "do_nothing_08009f48"
            },
            "code": "\nvoid do_nothing_08009f48(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f48",
            "calling": [
                "FUN_080091d8",
                "FUN_08009270"
            ],
            "imported": false,
            "current_name": "do_nothing_08009f48"
        },
        "FUN_08004d6a": {
            "renaming": {
                "FUN_08004d6a": "do_nothing_08004d6a"
            },
            "code": "\nvoid do_nothing_08004d6a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d6a",
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "imported": false,
            "current_name": "do_nothing_08004d6a"
        },
        "FUN_08008730": {
            "renaming": {
                "FUN_08008730": "find_value_index_and_check_input_08008730",
                "uVar1": "value_index",
                "iVar2": "array_index",
                "iVar3": "array_index_ptr"
            },
            "code": "void find_value_index_and_check_input_08008730(void)\n{\n  uint value_index = find_index_of_value_in_array();\n  int array_index = *(int *)(PTR_DAT_08008770 + value_index * 4);\n  if ((value_index < 5) && (array_index = (**(code **)(PTR_DAT_08008774 + value_index * 4))(array_index), array_index != -1)) {\n    check_input_0800688e(*(undefined4 *)(PTR_DAT_08008778 + (uint)*(byte *)(array_index + 0x44) * 4), *(int *)(array_index + 100) + (uint)*(ushort *)(array_index + 0x6a),1);\n  }\n  return;\n}",
            "called": [
                "FUN_080086e8",
                "FUN_0800688e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008730",
            "calling": [
                "FUN_08006932"
            ],
            "imported": false,
            "current_name": "find_value_index_and_check_input_08008730"
        },
        "FUN_08005df4": {
            "renaming": {
                "FUN_08005df4": "update_flags_on_param_08005df4",
                "param_1": "param_ptr",
                "puVar1": "param",
                "FLAG_1": "FLAG_1",
                "FLAG_2": "FLAG_2"
            },
            "code": "void update_flags_on_param_08005df4(uint **param_ptr)\n{\n  uint *param = *param_ptr;\n  const uint FLAG_1 = 0x1111;\n  const uint FLAG_2 = 0x444;\n\n  *(undefined *)((int)param_ptr + 0x3d) = 2;\n\n  if ((param[8] & FLAG_1) == 0)\n  {\n    if ((param[8] & FLAG_2) == 0)\n    {\n      *param = *param & 0xfffffffe;\n    }\n  }\n\n  update_flags_08007710(param_ptr);\n\n  *(undefined *)((int)param_ptr + 0x3d) = 0;\n  *(undefined *)(param_ptr + 0xf) = 0;\n}\n",
            "called": [
                "FUN_08007710"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005df4",
            "calling": [
                "FUN_080076e0"
            ],
            "imported": false,
            "current_name": "update_flags_on_param_08005df4"
        },
        "FUN_08009148": {
            "renaming": {
                "FUN_08009148": "execute_functions_08009148",
                "puVar1": "function_ptrs_start",
                "iVar2": "function_ptrs_count",
                "iVar3": "i",
                "PTR_DAT_08009180": "function_ptrs_start",
                "PTR_DAT_08009184": "function_ptrs_end",
                "do_nothing_0800a424": "do_nothing",
                "PTR_DAT_08009188": "other_function_ptrs_start",
                "PTR_DAT_0800918c": "other_function_ptrs_end"
            },
            "code": "void execute_functions_08009148(void)\n{\n  undefined *PTR_DAT_08009180 = PTR_DAT_08009180;\n  int function_ptrs_count = (int)PTR_DAT_08009184 - (int)PTR_DAT_08009180;\n  for (int i = 0; i < function_ptrs_count >> 2; i++) {\n    (**(code **)(PTR_DAT_08009180 + i * 4))();\n  }\n  do_nothing_0800a424();\n  undefined *PTR_DAT_08009188 = PTR_DAT_08009188;\n  int other_function_ptrs_count = (int)PTR_DAT_0800918c - (int)PTR_DAT_08009188;\n  for (int i = 0; i < other_function_ptrs_count >> 2; i++) {\n    (**(code **)(PTR_DAT_08009188 + i * 4))();\n  }\n  return;\n}",
            "called": [
                "FUN_0800a424",
                "FUN_08008f0e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009148",
            "calling": [
                "FUN_08003658"
            ],
            "imported": false,
            "current_name": "execute_functions_08009148"
        },
        "FUN_08005460": {
            "renaming": {
                "FUN_08005460": "FUNC_08005460"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nundefined4 FUNC_08005460(uint *param_1)\n\n{\n  uint *puVar1;\n  uint *puVar2;\n  int iVar3;\n  int iVar4;\n  undefined4 uVar5;\n  uint uVar6;\n  bool bVar7;\n  \n  puVar1 = DAT_08005720;\n  if ((*param_1 & 1) != 0) {\n    if (((DAT_08005720[1] & 0xc) == 4) ||\n       (((DAT_08005720[1] & 0xc) == 8 && ((DAT_08005720[1] & 0x10000) != 0)))) {\n      if (((*DAT_08005720 & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      uVar6 = param_1[1];\n      if (uVar6 == 0x10000) {\n        *DAT_08005720 = *DAT_08005720 | 0x10000;\n      }\n      else if (uVar6 == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (uVar6 == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        *DAT_08005720 = *DAT_08005720 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (param_1[1] == 0) {\n        iVar3 = get_data_from_pointer_08003760();\n        while ((*DAT_08005720 & 0x20000) != 0) {\n          iVar4 = get_data_from_pointer_08003760();\n          if (100 < (uint)(iVar4 - iVar3)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar3 = get_data_from_pointer_08003760();\n        while ((*DAT_08005720 & 0x20000) == 0) {\n          iVar4 = get_data_from_pointer_08003760();\n          if (100 < (uint)(iVar4 - iVar3)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_08005720[1] & 0xc) == 0) ||\n       (((DAT_08005720[1] & 0xc) == 8 && ((DAT_08005720[1] & 0x10000) == 0)))) {\n      if (((*DAT_08005720 & 2) != 0) && (param_1[4] != 1)) {\n        return 1;\n      }\n      *DAT_08005720 = *DAT_08005720 & 0xffffff07 | param_1[5] << 3;\n    }\n    else if (param_1[4] == 0) {\n      *DAT_08005724 = 0;\n      iVar3 = get_data_from_pointer_08003760();\n      while ((*DAT_08005720 & 2) != 0) {\n        iVar4 = get_data_from_pointer_08003760();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08005724 = 1;\n      iVar3 = get_data_from_pointer_08003760();\n      while ((*DAT_08005720 & 2) == 0) {\n        iVar4 = get_data_from_pointer_08003760();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n      *DAT_08005720 = *DAT_08005720 & 0xffffff07 | param_1[5] << 3;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[6] == 0) {\n      *DAT_08005728 = 0;\n      iVar3 = get_data_from_pointer_08003760();\n      while ((DAT_08005720[9] & 2) != 0) {\n        iVar4 = get_data_from_pointer_08003760();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08005728 = 1;\n      iVar3 = get_data_from_pointer_08003760();\n      while ((DAT_08005720[9] & 2) == 0) {\n        iVar4 = get_data_from_pointer_08003760();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n      calculate_iterations_08005434(1);\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    bVar7 = (DAT_08005720[7] & 0x10000000) == 0;\n    if (bVar7) {\n      DAT_08005720[7] = DAT_08005720[7] | 0x10000000;\n    }\n    if ((*DAT_0800572c & 0x100) == 0) {\n      *DAT_0800572c = *DAT_0800572c | 0x100;\n      iVar3 = get_data_from_pointer_08003760();\n      while ((*DAT_0800572c & 0x100) == 0) {\n        iVar4 = get_data_from_pointer_08003760();\n        if (100 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    puVar2 = DAT_08005838;\n    puVar1 = DAT_08005720;\n    uVar6 = param_1[3];\n    if (uVar6 == 1) {\n      DAT_08005720[8] = DAT_08005720[8] | 1;\n    }\n    else if (uVar6 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (uVar6 == 5) {\n      DAT_08005838[8] = DAT_08005838[8] | 4;\n      puVar2[8] = puVar2[8] | 1;\n    }\n    else {\n      DAT_08005720[8] = DAT_08005720[8] & 0xfffffffe;\n      puVar1[8] = puVar1[8] & 0xfffffffb;\n    }\n    if (param_1[3] == 0) {\n      iVar3 = get_data_from_pointer_08003760();\n      while ((DAT_08005838[8] & 2) != 0) {\n        iVar4 = get_data_from_pointer_08003760();\n        if (5000 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar3 = get_data_from_pointer_08003760();\n      while ((DAT_08005720[8] & 2) == 0) {\n        iVar4 = get_data_from_pointer_08003760();\n        if (5000 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    if (bVar7) {\n      DAT_08005838[7] = DAT_08005838[7] & 0xefffffff;\n    }\n  }\n  if (param_1[7] == 0) {\n    uVar5 = 0;\n  }\n  else if ((DAT_08005838[1] & 0xc) == 8) {\n    uVar5 = 1;\n  }\n  else if (param_1[7] == 2) {\n    *DAT_0800583c = 0;\n    iVar3 = get_data_from_pointer_08003760();\n    do {\n      if ((*DAT_08005838 & 0x2000000) == 0) {\n        if (param_1[8] == 0x10000) {\n          DAT_08005838[1] = DAT_08005838[1] & 0xfffdffff | param_1[2];\n        }\n        DAT_08005838[1] = DAT_08005838[1] & 0xffc2ffff | param_1[8] | param_1[9];\n        *DAT_0800583c = 1;\n        iVar3 = get_data_from_pointer_08003760();\n        do {\n          if ((*DAT_08005838 & 0x2000000) != 0) {\n            return 0;\n          }\n          iVar4 = get_data_from_pointer_08003760();\n        } while ((uint)(iVar4 - iVar3) < 3);\n        return 3;\n      }\n      iVar4 = get_data_from_pointer_08003760();\n    } while ((uint)(iVar4 - iVar3) < 3);\n    uVar5 = 3;\n  }\n  else {\n    *DAT_0800583c = 0;\n    iVar3 = get_data_from_pointer_08003760();\n    do {\n      if ((*DAT_08005838 & 0x2000000) == 0) {\n        return 0;\n      }\n      iVar4 = get_data_from_pointer_08003760();\n    } while ((uint)(iVar4 - iVar3) < 3);\n    uVar5 = 3;\n  }\n  return uVar5;\n}\n\n",
            "called": [
                "FUN_08005434",
                "FUN_08003760"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005460",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "FUNC_08005460"
        },
        "FUN_08008854": {
            "renaming": {
                "FUN_08008854": "return_zero_08008854"
            },
            "code": "int return_zero_08008854(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008854",
            "calling": [
                "FUN_0800a130"
            ],
            "imported": false,
            "current_name": "return_zero_08008854"
        },
        "FUN_080064cc": {
            "renaming": {
                "FUN_080064cc": "read_and_modify_memory_080064cc",
                "param_1": "memory_address",
                "sVar1": "counter",
                "pbVar2": "byte_pointer"
            },
            "code": "undefined4 read_and_modify_memory_080064cc(int *memory_address)\n{\n  short counter;\n  byte *byte_pointer;\n  \n  if (*(char *)((int)memory_address + 0x39) != '!') {\n    return 2;\n  }\n  \n  if (memory_address[2] == 0x1000) {\n    *(uint *)(*memory_address + 4) = *(ushort *)memory_address[8] & 0x1ff;\n    if (memory_address[4] == 0) {\n      memory_address[8] = memory_address[8] + 2;\n    }\n    else {\n      memory_address[8] = memory_address[8] + 1;\n    }\n  }\n  else {\n    byte_pointer = (byte *)memory_address[8];\n    memory_address[8] = (int)(byte_pointer + 1);\n    *(uint *)(*memory_address + 4) = (uint)*byte_pointer;\n  }\n  \n  counter = *(short *)((int)memory_address + 0x26) + -1;\n  *(short *)((int)memory_address + 0x26) = counter;\n  if (counter == 0) {\n    *(uint *)(*memory_address + 0xc) = *(uint *)(*memory_address + 0xc) & 0xffffff7f;\n    *(uint *)(*memory_address + 0xc) = *(uint *)(*memory_address + 0xc) | 0x40;\n    return 0;\n  }\n  \n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064cc",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "read_and_modify_memory_080064cc"
        },
        "FUN_08004d6c": {
            "renaming": {
                "FUN_08004d6c": "process_param_08004d6c",
                "param_1": "param_array",
                "puVar1": "ptr1"
            },
            "code": "undefined4 process_param_08004d6c(uint **param_array)\n{\n  uint *ptr1;\n  if (*(char *)((int)param_array + 0x3d) == '\"') {\n    if (*(ushort *)((int)param_array + 0x2a) < 4) {\n      if (*(ushort *)((int)param_array + 0x2a) - 2 < 2) {\n        if (param_array[0xb] == (uint *)0x2) {\n          **param_array = **param_array | 0x400;\n        }\n        else {\n          **param_array = **param_array & 0xfffffbff;\n          **param_array = **param_array | 0x800;\n        }\n        (*param_array)[1] = (*param_array)[1] & 0xfffffbff;\n      }\n      else {\n        if (param_array[0xb] == (uint *)0x2) {\n          **param_array = **param_array | 0x400;\n        }\n        else {\n          **param_array = **param_array & 0xfffffbff;\n        }\n        (*param_array)[1] = (*param_array)[1] & 0xfffff8ff;\n        ptr1 = param_array[9];\n        param_array[9] = (uint *)((int)ptr1 + 1);\n        *(char *)ptr1 = (char)(*param_array)[4];\n        *(short *)((int)param_array + 0x2a) = *(short *)((int)param_array + 0x2a) + -1;\n        *(undefined *)((int)param_array + 0x3d) = 0x20;\n        param_array[0xc] = (uint *)0x0;\n        if (*(char *)((int)param_array + 0x3e) == '@') {\n          *(undefined *)((int)param_array + 0x3e) = 0;\n          do_nothing();\n        }\n        else {\n          *(undefined *)((int)param_array + 0x3e) = 0;\n          do_nothing_2();\n        }\n      }\n    }\n    else {\n      ptr1 = param_array[9];\n      param_array[9] = (uint *)((int)ptr1 + 1);\n      *(char *)ptr1 = (char)(*param_array)[4];\n      *(short *)((int)param_array + 0x2a) = *(short *)((int)param_array + 0x2a) + -1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d6c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_param_08004d6c"
        },
        "FUN_08004ac2": {
            "renaming": {
                "FUN_08004ac2": "parse_input_08004ac2",
                "param_1": "input_ptr",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "data",
                "uVar2": "flag"
            },
            "code": "int parse_input_08004ac2(int *input_ptr, int param_2, int param_3, int param_4) {\n  int flag = *(int *)(*input_ptr + 0x18);\n  int data;\n  if ((flag & 0x80) == 0) {\n    data = *(int *)(input_ptr + 3);\n  }\n  else {\n    data = *(int *)(input_ptr + 6);\n  }\n  parse_input_08004ac2_08007fa0(input_ptr, (flag & 4) == 0, (short)data, flag, param_4);\n  return 0;\n}",
            "called": [
                "FUN_08007fa0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ac2",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "parse_input_08004ac2"
        },
        "FUN_08008850": {
            "renaming": {
                "FUN_08008850": "return_one_08008850"
            },
            "code": "int return_one_08008850(void) {\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008850",
            "calling": [
                "FUN_0800a110"
            ],
            "imported": false,
            "current_name": "return_one_08008850"
        },
        "FUN_08006ca8": {
            "renaming": {
                "FUN_08006ca8": "set_flags_08006ca8",
                "param_1": "flag",
                "param_2": "flag_value",
                "puVar1": "flag_ptr",
                "iVar2": "flag_base_addr",
                "uVar3": "set_flag_result",
                "uVar4": "flag_mask",
                "uVar5": "current_flag_value",
                "local_18": "bit_mask",
                "local_14": "flag_1",
                "local_10": "flag_2"
            },
            "code": "void set_flags_08006ca8(uint *flag, uint flag_value)\n{\n    uint current_flag_value = *flag;\n    uint flag_1 = DAT_08006d14;\n    uint flag_2 = DAT_08006d18;\n    uint flag_1_bit = 0x200;\n    uint flag_2_bit = 0x400;\n    uint flag_1_mask = 0x200;\n    uint flag_2_mask = 0x400;\n    if (current_flag_value == flag_1)\n    {\n        *flag = current_flag_value | flag_1_bit;\n        current_flag_value = *(uint *)(DAT_08006d20 + 0x18) & flag_1_mask;\n    }\n    else if (current_flag_value == flag_2)\n    {\n        *flag = current_flag_value | flag_2_bit;\n        current_flag_value = *(uint *)(DAT_08006d20 + 0x18) & flag_2_mask;\n    }\n    uint flag_3 = (uint)((int)(char)*PTR_DAT_08006d1c << 0x18) >> 0x1c;\n    uint flag_4 = set_flag_08006bb8(flag_3, flag_value, flag_1_bit | flag_2_bit, current_flag_value);\n    uint flag_5 = 1 << ((byte)*PTR_DAT_08006d1c & 0xf) & 0xffff;\n    uint flag_6 = 3;\n    uint flag_7 = 0;\n    calculate_flags_080040e8(flag_4, &flag_5);\n}\n",
            "called": [
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ca8",
            "calling": [
                "FUN_08003bd8"
            ],
            "imported": false,
            "current_name": "set_flags_08006ca8"
        },
        "FUN_08002fc2": {
            "renaming": {
                "FUN_08002fc2": "set_value_at_offset_08002fc2",
                "param_1": "base_address",
                "param_2": "offset",
                "param_3": "value",
                "*address_to_set": "value_at_address"
            },
            "code": "void set_value_at_offset_08002fc2(int base_address, int offset, int value)\n{\n    int* address_to_set = (int*)(base_address + (offset + 0x42) * 4);\n    *address_to_set = value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fc2",
            "calling": [
                "FUN_0800021a",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_08002fc2"
        },
        "FUN_08008afa": {
            "renaming": {
                "FUN_08008afa": "calculate_value_from_pointers_08008afa",
                "param_1": "pointer_offset",
                "* (short *) (param_1 + 0x134)": "first_pointer_value",
                "* (short *) (param_1 + 0x136)": "second_pointer_value",
                "*(short *)(param_1 + 0x134)": "first_pointer_value",
                "*(short *)(param_1 + 0x136)": "second_pointer_value",
                "*(short *)(param_1 + 0x134) + 0x40": "calculated_value"
            },
            "code": "ushort calculate_value_from_pointers_08008afa(int pointer_offset){\n    short first_pointer_value = *(short *)(pointer_offset + 0x134);\n    short second_pointer_value = *(short *)(pointer_offset + 0x136);\n    short calculated_value = (first_pointer_value + 0x40) - second_pointer_value & 0x3f;\n    return calculated_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008afa",
            "calling": [
                "FUN_08008bf4"
            ],
            "imported": false,
            "current_name": "calculate_value_from_pointers_08008afa"
        },
        "FUN_08003048": {
            "renaming": {
                "FUN_08003048": "process_and_set_param_value_08003048",
                "param_1": "value",
                "param_2": "data_ptr",
                "param_3": "constant",
                "param_4": "param_4",
                "puVar1": "data"
            },
            "code": "void process_and_set_param_value_08003048(undefined4 value, undefined4 data_ptr, undefined4 constant, undefined4 param_4) {\n    undefined *data = PTR_DAT_08003068;\n    process_data_08008c44(data_ptr, data, 6, constant, param_4);\n    process_data_08003002(value);\n    set_param_value_08002e26(value, data);\n    return;\n}",
            "called": [
                "FUN_08003002",
                "FUN_08008c44",
                "FUN_08002e26"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003048",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "process_and_set_param_value_08003048"
        },
        "FUN_0800937c": {
            "renaming": {
                "FUN_0800937c": "FUNC_0800937c"
            },
            "code": "\nint FUNC_0800937c(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  bool bVar4;\n  byte *pbVar5;\n  byte *pbVar6;\n  int unaff_r9;\n  int iVar7;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    initialize_arrays_and_data_08009d50();\n  }\n  if (param_2 == PTR_DAT_08009588) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR_DAT_08009590) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR_DAT_08009594) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar7 = update_node_state_08009a80(param_1,param_2), iVar7 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar5 = param_3;\nLAB_080093be:\n  pbVar6 = pbVar5;\n  if (*pbVar6 != 0) goto LAB_08009474;\n  goto LAB_080093c8;\nLAB_08009474:\n  pbVar5 = pbVar6 + 1;\n  if (*pbVar6 != 0x25) goto LAB_080093be;\nLAB_080093c8:\n  iVar7 = (int)pbVar6 - (int)param_3;\n  if (iVar7 != 0) {\n    iVar2 = insert_array_byte_into_array_08009358(param_1,param_2,param_3,iVar7);\n    if (iVar2 == -1) {\nLAB_08009568:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar7;\n  }\n  if (*pbVar6 == 0) goto LAB_08009568;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar5 = pbVar6 + 1;\n  while( true ) {\n    iVar7 = find_character_in_string_08009f2c(PTR_s___0__0800958c,*pbVar5);\n    puVar1 = PTR_DAT_08009598;\n    param_3 = pbVar5 + 1;\n    if (iVar7 == 0) break;\n    local_88 = 1 << (iVar7 - (int)PTR_s___0__0800958c & 0xffU) | local_88;\n    pbVar5 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar5 == 0x2a) {\n    piVar3 = local_8c + 1;\n    iVar7 = *local_8c;\n    local_8c = piVar3;\n    if (-1 < iVar7) goto LAB_08009498;\n    local_7c = -iVar7;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar4 = false;\n    iVar7 = local_7c;\n    param_3 = pbVar5;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n      bVar4 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar4) {\nLAB_08009498:\n      local_7c = iVar7;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      param_3 = param_3 + 2;\n      piVar3 = local_8c + 1;\n      local_84 = *local_8c;\n      local_8c = piVar3;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n    }\n    else {\n      bVar4 = false;\n      iVar7 = 0;\n      local_84 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n        bVar4 = true;\n      }\n      if (bVar4) {\n        local_84 = iVar7;\n      }\n    }\n  }\n  iVar7 = find_character_in_string_08009f2c(PTR_DAT_08009598,*param_3,3);\n  if (iVar7 != 0) {\n    param_3 = param_3 + 1;\n    local_88 = local_88 | 0x40 << (iVar7 - (int)puVar1 & 0xffU);\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  iVar7 = find_character_in_string_08009f2c(PTR_s_efgEFG_0800959c,local_70,6);\n  if (iVar7 == 0) {\n    iVar7 = FUNC_08009698(param_1,&local_88,param_2,DAT_080095a4,&local_8c);\n  }\n  else {\n    iVar7 = param_1;\n    if (DAT_080095a0 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar7 = unaff_r9;\n      goto LAB_0800951a;\n    }\n  }\n  if (iVar7 == -1) goto LAB_08009568;\nLAB_0800951a:\n  local_74 = local_74 + iVar7;\n  pbVar5 = param_3;\n  unaff_r9 = iVar7;\n  goto LAB_080093be;\n}\n\n",
            "called": [
                "FUN_08009f2c",
                "FUN_08009698",
                "FUN_08009358",
                "FUN_08009a80",
                "FUN_08009d50"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800937c",
            "calling": [
                "FUN_080098d8",
                "FUN_08009124"
            ],
            "imported": false,
            "current_name": "FUNC_0800937c"
        },
        "FUN_08000214": {
            "renaming": {
                "FUN_08000214": "decode_and_set_data_08000214",
                "param_1": "offset",
                "param_2": "value",
                "param_3": "param_3",
                "param_4": "param_4",
                "bVar1": "should_decode",
                "iVar2": "found_char_index",
                "PTR_DAT_080002d8": "PTR_DATA",
                "PTR_DAT_080002dc": "PTR_DATA_2",
                "PTR_DAT_080002e0": "PTR_DATA_5",
                "PTR_DAT_080002e4": "PTR_DATA_4",
                "PTR_DAT_080002e8": "PTR_DATA_3",
                "get_value_from_offset_08002fa0": "get_value_from_offset",
                "find_char_index_080036ac": "find_char_index",
                "is_param1_in_param2_0800738a": "is_param1_in_param2",
                "decode_data_080088e0": "decode_data",
                "calculate_and_set_new_value_080026b0": "calculate_and_set_new_value",
                "set_value_at_offset_08002fc2": "set_value_at_offset"
            },
            "code": "void decode_and_set_data_08000214(uint offset, uint value, uint param_3, uint param_4)\n{\n    bool should_decode = false;\n    int found_char_index = -1;\n    int value_type = get_value_from_offset_08002fa0(PTR_DAT_080002d8, offset, param_3, param_4, param_4);\n    if (offset <= 0x3b) {\n        if (value_type == 3) {\n            if (PTR_DAT_080002dc[offset] != -1) {\n                found_char_index = find_char_index_080036ac(PTR_DAT_080002dc[offset]);\n                if (found_char_index == 2) {\n                    should_decode = is_param1_in_param2_0800738a(PTR_DAT_080002dc[offset], PTR_DAT_080002e8);\n                }\n            }\n        } else if (value_type == 4) {\n            if (PTR_DAT_080002dc[offset] != -1) {\n                found_char_index = find_char_index_080036ac(PTR_DAT_080002dc[offset]);\n                if (found_char_index == 2) {\n                    calculate_and_set_new_value_080026b0(PTR_DAT_080002e4 + PTR_DAT_080002e0[offset] * 3, value);\n                }\n            }\n        }\n    }\n    if (should_decode) {\n        decode_data(offset, value);\n    }\n    set_value_at_offset_08002fc2(PTR_DAT_080002d8, offset, value);\n}\n",
            "called": [
                "FUN_0800021a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000214",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "decode_and_set_data_08000214"
        },
        "FUN_08003724": {
            "renaming": {
                "FUN_08003724": "set_flag_and_update_data_08003724",
                "*DAT_08003744": "flag",
                "update_data_08003f0c": "update_data",
                "calculate_and_write_bits_to_memory_080036d8": "write_bits_to_memory",
                "do_nothing_080036d4": "do_nothing"
            },
            "code": "void set_flag_and_update_data_08003724(void)\n{\n    *DAT_08003744 |= 0x10;\n    update_data(3);\n    write_bits_to_memory(0xf);\n    do_nothing();\n}",
            "called": [
                "FUN_08003f0c",
                "FUN_080036d8",
                "FUN_080036d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003724",
            "calling": [
                "FUN_080072fa"
            ],
            "imported": false,
            "current_name": "set_flag_and_update_data_08003724"
        },
        "FUN_080038dc": {
            "renaming": {
                "FUN_080038dc": "get_value_at_offset_080038dc",
                "param_1": "memory_address",
                "*param_1": "memory_address",
                "undefined4": "int",
                "*(undefined4 *)": "*",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int get_value_at_offset_080038dc(int *memory_address)\n{\n    int offset = 0x4c;\n    int *address_to_value = (int *)(*memory_address + offset);\n    return *address_to_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038dc",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_080038dc"
        },
        "FUN_080025ac": {
            "renaming": {
                "FUN_080025ac": "decode_and_update_data_080025ac",
                "*param_1": "data",
                "param_2": "data_value",
                "param_3": "param1",
                "param_4": "param2",
                "uVar1": "data_value_masked",
                "uVar2": "data_index",
                "uVar3": "data_value_2",
                "iVar4": "param1_update / param2_update / is_valid",
                "PTR_DAT_08002628": "PTR_DAT_08002628",
                "PTR_DAT_08002630": "PTR_DAT_08002630",
                "DAT_0800262c": "DAT_0800262c"
            },
            "code": "byte decode_and_update_data_080025ac(byte *data, uint data_value, int param1, int param2)\n{\n    uint data_index = (uint)*data;\n    if (data_index < 0xc) {\n        decode_data_08008990(data_value, 1, param1, *data, param2);\n        uint data_value_masked = (byte)PTR_DAT_08002628[data_index * 8] & 0xffffffc0 | data_value & 0x3f;\n        PTR_DAT_08002628[data_index * 8] = (char)data_value_masked;\n        int param1_update = -param1 + 0x220;\n        if (param1_update < 0) {\n            param1_update = -param1 + 0x223;\n        }\n        data[1] = (byte)((uint)(param1_update << 0x16) >> 0x18);\n        int param2_update = -param2 + 0x960;\n        if (param2_update < 0) {\n            param2_update = -param2 + 0x963;\n        }\n        data[2] = (byte)((uint)(param2_update << 0x16) >> 0x18);\n        uint data_value_2 = (uint)((ulonglong)DAT_0800262c * (ulonglong)*data >> 0x23);\n        int is_valid = is_valid_param_08002400(data_value_2, data_value_masked, data_index, (int)((ulonglong)DAT_0800262c * (ulonglong)*data));\n        if (is_valid == 0) {\n            PTR_DAT_08002630[0x44] = (char)data_value_2;\n            set_bits_and_update_data_0800242c();\n        }\n        PTR_DAT_08002628[(uint)*data * 8] = PTR_DAT_08002628[(uint)*data * 8] | 0x40;\n    }\n    return *data;\n}",
            "called": [
                "FUN_0800242c",
                "FUN_08008990",
                "FUN_08002400"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025ac",
            "calling": [
                "FUN_08000500",
                "FUN_08002634"
            ],
            "imported": false,
            "current_name": "decode_and_update_data_080025ac"
        },
        "FUN_08002634": {
            "renaming": {
                "FUN_08002634": "decode_and_update_data_08002634",
                "param_1": "data",
                "param_2": "length",
                "param_3": "offset",
                "param_4": "multiplier"
            },
            "code": "void decode_and_update_data_08002634(undefined4 data, undefined4 length, undefined4 offset, undefined4 multiplier, undefined4 update_flag)\n{\n  decode_and_update_data_08002634_080025ac(data, length, offset, multiplier, update_flag);\n  return;\n}",
            "called": [
                "FUN_080025ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002634",
            "calling": [
                "FUN_08000500"
            ],
            "imported": false,
            "current_name": "decode_and_update_data_08002634"
        },
        "FUN_08002f0a": {
            "renaming": {
                "FUN_08002f0a": "encode_data_with_offset_08002f0a",
                "param_1": "offset"
            },
            "code": "void encode_data_with_offset_08002f0a(int offset) {\n  encode_data_with_param_0800325a(offset + 0x40);\n  return;\n}",
            "called": [
                "FUN_0800325a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f0a",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "encode_data_with_offset_08002f0a"
        },
        "FUN_08005bb8": {
            "renaming": {
                "FUN_08005bb8": "calculate_value_from_param_08005bb8",
                "param_1": "param",
                "uVar1": "result",
                "local_24": "local_var_24",
                "abStack_20": "array_stack_20",
                "uStack_1c": "var_stack_1c",
                "uStack_18": "var_stack_18",
                "uStack_14": "var_stack_14"
            },
            "code": "uint calculate_value_from_param_08005bb8(int param) {\n  uint result;\n  undefined2 local_var_24;\n  byte array_stack_20 [4];\n  undefined4 var_stack_1c;\n  undefined4 var_stack_18;\n  undefined4 var_stack_14;\n  var_stack_14 = *(undefined4 *)(PTR_DAT_08005ca0 + 8);\n  var_stack_18 = *(undefined4 *)(PTR_DAT_08005ca0 + 4);\n  var_stack_1c = *(undefined4 *)PTR_DAT_08005ca0;\n  local_var_24 = *(undefined2 *)(PTR_DAT_08005ca0 + 0x10);\n  if (param == 2) {\n    result = get_shifted_value_from_array_08005a48();\n    result = result / ((((DAT_08005ca4[1] << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (param == 0x10) {\n    if ((*DAT_08005ca4 & 0x1000000) == 0) {\n      result = 0;\n    }\n    else {\n      result = DAT_08005cb0;\n      if ((DAT_08005ca4[1] & 0x10000) != 0) {\n        result = DAT_08005ca8 / *(byte *)((int)&local_var_24 - ((int)(DAT_08005ca4[1] << 0xe) >> 0x1f));\n      }\n      result = result * array_stack_20[(DAT_08005ca4[1] << 10) >> 0x1c];\n      if ((DAT_08005ca4[1] & 0x400000) == 0) {\n        result = (uint)((ulonglong)DAT_08005cac * (ulonglong)(result * 2) >> 0x21);\n      }\n    }\n  }\n  else if (param == 1) {\n    if ((DAT_08005ca4[8] & 0x302) == 0x102) {\n      result = 0x8000;\n    }\n    else {\n      result = DAT_08005ca4[8] & 0x300;\n      if ((result == 0x200) && ((DAT_08005ca4[9] & 2) != 0)) {\n        result = 32000;\n      }\n      else if (result == 0x300) {\n        if ((*DAT_08005ca4 & 0x20000) == 0) {\n          result = 0;\n        }\n        else {\n          result = 0xf424;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_08005a48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bb8",
            "calling": [
                "FUN_08003e20",
                "FUN_0800376c"
            ],
            "imported": false,
            "current_name": "calculate_value_from_param_08005bb8"
        },
        "FUN_08007648": {
            "renaming": {
                "FUN_08007648": "set_bits_and_update_data_08007648",
                "param_1": "data_array",
                "param_2": "clock_source",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar4": "flags",
                "local_34": "flags[0]",
                "local_30": "flags[1]",
                "local_2c": "flags[2]",
                "local_28": "flags[3]",
                "local_24": "flags[4]",
                "local_20": "flags[5]",
                "extracted_data": "extracted_data",
                "calculated_value": "calculated_value",
                "bit_index": "bit_index",
                "set_param_result": "set_param_result",
                "update_data_result": "update_data_result"
            },
            "code": "void set_bits_and_update_data_08007648(uint32_t *data_array, uint32_t clock_source, uint32_t param_3, uint32_t param_4) {\n  uint32_t extracted_data = extract_data_and_check_clock_source();\n  uint32_t calculated_value = ((uint64_t)PTR_DAT_080076dc * (uint64_t)extracted_data >> 0x32) - 1;\n  uint32_t flags[6] = {0};\n  data_array[0] = 0x40000000;\n  data_array[1] = 0x40000000;\n  data_array[2] = calculated_value;\n  data_array[3] = 0;\n  data_array[4] = param_3;\n  data_array[5] = 0;\n  data_array[6] = 0;\n  data_array[0x13] = param_4;\n  int bit_index = check_param(data_array[0]);\n  write_bits_to_memory(bit_index, 0xe, 0);\n  set_bit_at_index(bit_index);\n  int set_param_result = set_param_and_update_flags(data_array + 1);\n  if (set_param_result == 0) {\n    int update_data_result = update_data_and_set_flags(data_array + 1, flags, 0);\n    if (update_data_result == 0) {\n      set_bits_in_array(data_array, 0);\n    }\n  }\n}",
            "called": [
                "FUN_08006128",
                "FUN_08006280",
                "FUN_08007544",
                "FUN_08003f30",
                "FUN_080075dc",
                "FUN_08003f94",
                "FUN_08006060"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007648",
            "calling": [
                "FUN_0800242c"
            ],
            "imported": false,
            "current_name": "set_bits_and_update_data_08007648"
        },
        "FUN_08008858": {
            "renaming": {
                "FUN_08008858": "zero_return_08008858"
            },
            "code": "int zero_return_08008858(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008858",
            "calling": [
                "FUN_0800a168"
            ],
            "imported": false,
            "current_name": "zero_return_08008858"
        },
        "FUN_08004a20": {
            "renaming": {
                "FUN_08004a20": "do_nothing_08004a20"
            },
            "code": "\nvoid do_nothing_08004a20(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a20",
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a20"
        },
        "FUN_080063c0": {
            "renaming": {
                "FUN_080063c0": "set_bit_in_uint_array_080063c0",
                "param_1": "uint_array",
                "param_2": "bit_index",
                "puVar1": "current_array",
                "DAT_0800641c": "array_pointer"
            },
            "code": "uint set_bit_in_uint_array_080063c0(uint **uint_array, uint bit_index, uint value) {\n    set_bit_in_uint_array_080063c0_08006262(*uint_array, bit_index, value);\n    uint *current_array = *uint_array;\n    if (((current_array == DAT_0800641c) && ((current_array[8] & 0x1111) == 0)) && ((current_array[8] & 0x444) == 0)) {\n        current_array[17] = current_array[17] & 0xffff7fff;\n    }\n    current_array = *uint_array;\n    if (((current_array[8] & 0x1111) == 0) && ((current_array[8] & 0x444) == 0)) {\n        *current_array = *current_array & 0xfffffffe;\n    }\n    *(undefined *)((int)uint_array + 0x3d) = 1;\n    return 0;\n}",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080063c0",
            "calling": [
                "FUN_080071e4"
            ],
            "imported": false,
            "current_name": "set_bit_in_uint_array_080063c0"
        },
        "FUN_08004a24": {
            "renaming": {
                "FUN_08004a24": "decode_message_08004a24",
                "param_1": "message_ptr",
                "cVar1": "message_ending",
                "pbVar2": "message_data",
                "do_nothing_08004a22": "do_nothing"
            },
            "code": "int decode_message_08004a24(int *message_ptr) {\n    char message_ending = *(char *)((int)message_ptr + 0x3d);\n    if (*(short *)((int)message_ptr + 0x2a) != 0) {\n        byte *message_data = (byte *)message_ptr[9];\n        message_ptr[9] = (int)(message_data + 1);\n        *(uint *)(*message_ptr + 0x10) = (uint)*message_data;\n        *(short *)((int)message_ptr + 0x2a) = *(short *)((int)message_ptr + 0x2a) - 1;\n        if ((*(short *)((int)message_ptr + 0x2a) == 0) && (message_ending == ')')) {\n            *(uint *)(*message_ptr + 4) = *(uint *)(*message_ptr + 4) & 0xfffffbff;\n            message_ptr[0xc] = 0x21;\n            *(undefined *)((int)message_ptr + 0x3d) = 0x28;\n            do_nothing();\n        }\n        return 0;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08004a22"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a24",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "decode_message_08004a24"
        },
        "FUN_08004a22": {
            "renaming": {
                "FUN_08004a22": "do_nothing_08004a22"
            },
            "code": "\nvoid do_nothing_08004a22(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a22",
            "calling": [
                "FUN_08004aec",
                "FUN_08004a24"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a22"
        },
        "FUN_08002fba": {
            "renaming": {
                "FUN_08002fba": "get_value_at_index_08002fba",
                "param_1": "base_address",
                "param_2": "index",
                "* (undefined4 *)": "int*",
                "PTR_": "ptr",
                "DAT_": "data"
            },
            "code": "int get_value_at_index_08002fba(int base_address, int index) {\n    int* PTR_ = (int*)(base_address + (index + 0x42) * 4);\n    return *PTR_;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fba",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "get_value_at_index_08002fba"
        },
        "FUN_080090cc": {
            "renaming": {
                "FUN_080090cc": "process_data_and_wait_forever_080090cc_080090cc",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "data_ptr",
                "param_4": "input_param_4",
                "uVar1": "data_offset",
                "puVar2": "function_name",
                "uVar3": "wait_result",
                "uVar4": "param_4_copy"
            },
            "code": "void process_data_and_wait_forever_080090cc_080090cc(undefined4 param_1, undefined4 param_2, undefined *data_ptr, undefined4 param_4)\n{\n    undefined4 data_offset = *(undefined4 *)(*(int *)PTR_PTR_DAT_080090f8 + 0xc);\n    undefined *function_name = PTR_s___function__080090fc;\n    undefined4 param_4_copy = param_4;\n    if (data_ptr == (undefined *)0x0) goto LAB_080090f0;\n    do {\n        process_data_08009124(data_offset, PTR_s_assertion___s__failed__file___s__08009100, param_4_copy, param_1, param_2, function_name, data_ptr, param_4_copy);\n        undefined8 wait_result = process_input_and_wait_forever_08009b5c();\n        param_2 = (undefined4)((ulonglong)wait_result >> 0x20);\n        data_offset = (undefined4)wait_result;\n    LAB_080090f0:\n        data_ptr = PTR_s__08009104;\n        function_name = PTR_s__08009104;\n    } while (true);\n}",
            "called": [
                "FUN_08009b5c",
                "FUN_08009124"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090cc",
            "calling": [
                "FUN_08008c44"
            ],
            "imported": false,
            "current_name": "process_data_and_wait_forever_080090cc_080090cc"
        },
        "FUN_080049e0": {
            "renaming": {
                "FUN_080049e0": "set_bit_and_flag_080049e0",
                "param_1": "ptr_param",
                "puVar1": "ptr",
                "char_ptr": "char_ptr",
                "*puVar1": "*ptr",
                "**param_1": "**ptr_param",
                "(*param_1)[1]": "(*ptr_param)[1]"
            },
            "code": "int set_bit_and_flag_080049e0(uint **ptr_param) {\n  char *char_ptr = (char *)(ptr_param + 0x3d);\n  if (*char_ptr != ' ') {\n    return 2;\n  }\n  *char_ptr = '(';\n  uint *ptr = *ptr_param;\n  if ((*ptr & 1) == 0) {\n    *ptr |= 1;\n  }\n  **ptr_param |= 0x400;\n  (*ptr_param)[1] |= 0x300;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049e0",
            "calling": [
                "FUN_08007ff0",
                "FUN_08007f7c",
                "FUN_08008020",
                "FUN_08007f8e"
            ],
            "imported": false,
            "current_name": "set_bit_and_flag_080049e0"
        },
        "FUN_08006d24": {
            "renaming": {
                "FUN_08006d24": "set_flags_based_on_input_08006d24",
                "param_1": "input_value",
                "iVar1": "data_section_address",
                "DAT_08006d7c": "data_section_address",
                "DAT_08006d74": "first_flag_value",
                "DAT_08006d78": "second_flag_value"
            },
            "code": "void set_flags_based_on_input_08006d24(int *input_value)\n{\n  int DAT_08006d7c = DAT_08006d7c;\n  int DAT_08006d74 = DAT_08006d74;\n  int DAT_08006d78 = DAT_08006d78;\n  if (*input_value != DAT_08006d74) {\n    if (*input_value == DAT_08006d78) {\n      *(uint *)(DAT_08006d7c + 0xc) |= 0x400;\n      *(uint *)(DAT_08006d7c + 0xc) &= 0xfffffbff;\n      *(uint *)(DAT_08006d7c + 0x18) &= 0xfffffbff;\n    }\n    return;\n  }\n  *(uint *)(DAT_08006d7c + 0xc) |= 0x200;\n  *(uint *)(DAT_08006d7c + 0xc) &= 0xfffffdff;\n  *(uint *)(DAT_08006d7c + 0x18) &= 0xfffffdff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d24",
            "calling": [
                "FUN_08003ce8"
            ],
            "imported": false,
            "current_name": "set_flags_based_on_input_08006d24"
        },
        "FUN_080098d8": {
            "renaming": {
                "FUN_080098d8": "process_data_080098d8",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "data_3",
                "param_4": "data_4",
                "iVar1": "data_ptr",
                "uVar2": "data_1",
                "uStack_c": "data_2",
                "uStack_8": "data_3",
                "uStack_4": "data_4",
                "PTR_PTR_DAT_08009904": "PTR_PTR_DAT_08009904",
                "FUNC_08009d50": "cleanup_data",
                "FUNC_0800937c": "process_data_helper"
            },
            "code": "void process_data_080098d8(int data_1, int data_2, int data_3, int data_4)\n{\n  int data_ptr = *(int *)PTR_PTR_DAT_08009904;\n  if ((data_ptr != 0) && (*(int *)(data_ptr + 0x18) == 0)) {\n    cleanup_data(data_ptr);\n  }\n  FUNC_0800937c(data_ptr, *(int *)(data_ptr + 8), data_1, &data_2, data_1, &data_2);\n  return;\n}",
            "called": [
                "FUN_0800937c",
                "FUN_08009d50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080098d8",
            "calling": [
                "FUN_080077b0",
                "FUN_08007544",
                "FUN_08007594",
                "FUN_08008078",
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "process_data_080098d8",
            "code_backup": "\nvoid FUN_080098d8(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 uStack_c;\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  iVar1 = *(int *)PTR_PTR_DAT_08009904;\n  uVar2 = param_1;\n  uStack_c = param_2;\n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  if ((iVar1 != 0) && (*(int *)(iVar1 + 0x18) == 0)) {\n    FUNC_08009d50(iVar1);\n  }\n  FUNC_0800937c(iVar1,*(undefined4 *)(iVar1 + 8),param_1,&uStack_c,uVar2,&uStack_c);\n  return;\n}\n\n"
        },
        "FUN_08009270": {
            "renaming": {
                "FUN_08009270": "allocate_memory_block_08009270",
                "param_1": "mem_block",
                "param_2": "size",
                "puVar1": "ptr",
                "uVar2": "result",
                "puVar3": "prev_block",
                "iVar4": "padding_size",
                "puVar5": "block",
                "uVar6": "block_size",
                "puVar7": "prev_block",
                "uVar8": "aligned_size"
            },
            "code": "uint allocate_memory_block_08009270(undefined4 *mem_block, uint size)\n{\n  uint aligned_size = (size + 3 & 0xfffffffc) + 8;\n  if (aligned_size < 0xc) {\n    aligned_size = 0xc;\n  }\n  if (((int)aligned_size < 0) || (aligned_size < size)) {\n    *mem_block = 0xc;\n  }\n  else {\n    do_nothing_08009f48();\n    uint *prev_block = *(uint **)PTR_DAT_08009324;\n    uint *block = prev_block;\n    while (block != (uint *)0x0) {\n      uint block_size = *block - aligned_size;\n      if (-1 < (int)block_size) {\n        if (block_size < 0xc) {\n          if (prev_block == block) {\n            uint next_block = prev_block[1];\n            *(uint *)PTR_DAT_08009324 = next_block;\n          }\n          else {\n            uint next_block = block[1];\n          }\n          if (prev_block != block) {\n            prev_block[1] = next_block;\n            prev_block = block;\n          }\n        }\n        else {\n          *block = block_size;\n          *(uint *)((int)block + block_size) = aligned_size;\n          prev_block = (uint *)((int)block + block_size);\n        }\n        goto LAB_080092d4;\n      }\n      prev_block = block;\n      block = (uint *)block[1];\n    }\n    if (*(int *)PTR_DAT_08009328 == 0) {\n      undefined4 result = calculate_offset_and_set_param_08009918(mem_block);\n      *(undefined4 *)PTR_DAT_08009328 = result;\n    }\n    uint *new_block = (uint *)calculate_offset_and_set_param_08009918(mem_block,aligned_size);\n    if ((new_block != (uint *)0xffffffff) &&\n       ((prev_block = (uint *)((int)new_block + 3U & 0xfffffffc), new_block == prev_block ||\n        (int block_size = calculate_offset_and_set_param_08009918(mem_block,(int)prev_block - (int)new_block), block_size != -1)))) {\n      *prev_block = aligned_size;\nLAB_080092d4:\n      do_nothing_08009f4a(mem_block);\n      uint block_end = (int)prev_block + 0xbU & 0xfffffff8;\n      int padding_size = block_end - (int)(prev_block + 1);\n      if (padding_size != 0) {\n        *(int *)((int)prev_block + padding_size) = -padding_size;\n        return block_end;\n      }\n      return block_end;\n    }\n    *mem_block = 0xc;\n    do_nothing_08009f4a(mem_block);\n  }\n  return 0;\n}\n",
            "called": [
                "FUN_08009f48",
                "FUN_08009f4a",
                "FUN_08009918"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009270",
            "calling": [
                "FUN_08009d24",
                "FUN_08009190",
                "FUN_08009908",
                "FUN_08009eac"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08009270"
        },
        "FUN_08005e6c": {
            "renaming": {
                "FUN_08005e6c": "do_nothing_08005e6c"
            },
            "code": "\nvoid do_nothing_08005e6c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e6c",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_08005e6c"
        },
        "FUN_08008500": {
            "renaming": {
                "FUN_08008500": "process_data_from_pointer_08008500",
                "param_1": "data",
                "param_2": "param",
                "cVar1": "character",
                "iVar2": "initial_data",
                "iVar3": "character_value",
                "uVar4": "index",
                "PTR_DAT_080085a8": "data_pointer",
                "PTR_DAT_080085ac": "character_pointer",
                "PTR_DAT_080085b0": "data_pointer_array",
                "PTR_DAT_080085b4": "character_data"
            },
            "code": "uint process_data_from_pointer_08008500(uint data, uint param, uint limit)\n{\n  int initial_data = get_initial_data();\n  char character = PTR_DAT_080085a8[1];\n  int character_value = find_character_value_if_not_negative(character, PTR_DAT_080085ac);\n  if (character_value == 0) {\n    return 0;\n  }\n  uint index = 0;\n  while ((index < 5 && ((PTR_DAT_080085b0[index] == 0 || (character_value = find_character_value_if_not_negative(character, PTR_DAT_080085ac), *PTR_DAT_080085b0[index] != character_value))))) {\n    index = (index + 1) & 0xff;\n  }\n  if (4 < index) {\n    if ((4 < (byte)PTR_DAT_080085b4[0x44]) && (set_values_from_character(), 4 < (byte)PTR_DAT_080085b4[0x44])) {\n      return 0;\n    }\n    index = (uint)(byte)PTR_DAT_080085b4[0x44];\n  }\n  do {\n    int processed_data = process_data(*(undefined4 *)(PTR_DAT_080085b0 + index * 4), param, limit & 0xffff, 1000);\n    if (processed_data == 0) {\n      return param;\n    }\n    int current_data = get_initial_data();\n  } while ((uint)(current_data - initial_data) < 1000);\n  return 0;\n}",
            "called": [
                "FUN_080067ac",
                "FUN_080084b0",
                "FUN_08007320",
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008500",
            "calling": [
                "FUN_0800885c"
            ],
            "imported": false,
            "current_name": "process_data_from_pointer_08008500"
        },
        "FUN_080048c8": {
            "renaming": {
                "FUN_080048c8": "parse_input_080048c8",
                "param_1": "input_ptr",
                "param_2": "input_data",
                "param_3": "input_length",
                "param_4": "output_data",
                "puVar2": "temp_ptr",
                "uVar1": "ret_val"
            },
            "code": "uint32_t parse_input_080048c8(uint32_t **input_ptr, uint32_t *input_data, int input_length, uint32_t *output_data)\n{\n  uint32_t ret_val;\n  uint32_t *temp_ptr;\n  \n  if (*(char *)((int)input_ptr + 0x3d) == '(') {\n    if (input_data == NULL) {\n      ret_val = 1;\n    }\n    else if (input_length == 0) {\n      ret_val = 1;\n    }\n    else if (*(char *)(input_ptr + 0xf) == '\\x01') {\n      ret_val = 2;\n    }\n    else {\n      *(undefined *)(input_ptr + 0xf) = 1;\n      temp_ptr = *input_ptr;\n      if ((*temp_ptr & 1) == 0) {\n        *temp_ptr = *temp_ptr | 1;\n      }\n      **input_ptr = **input_ptr & 0xfffff7ff;\n      *(undefined *)((int)input_ptr + 0x3d) = 0x29;\n      *(undefined *)((int)input_ptr + 0x3e) = 0x20;\n      ret_val = 0;\n      input_ptr[0x10] = NULL;\n      input_ptr[9] = input_data;\n      *(short *)((int)input_ptr + 0x2a) = (short)input_length;\n      input_ptr[0xb] = output_data;\n      *(undefined2 *)(input_ptr + 10) = *(undefined2 *)((int)input_ptr + 0x2a);\n      *(undefined *)(input_ptr + 0xf) = 0;\n      (*input_ptr)[1] = (*input_ptr)[1] | 0x700;\n    }\n  }\n  else {\n    ret_val = 2;\n  }\n  return ret_val;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048c8",
            "calling": [
                "FUN_08007fa0"
            ],
            "imported": false,
            "current_name": "parse_input_080048c8"
        },
        "FUN_08009954": {
            "renaming": {
                "FUN_08009954": "copy_string_08009954",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "n",
                "cVar1": "current_char",
                "iVar2": "remaining_chars",
                "pcVar3": "dest_ptr"
            },
            "code": "void copy_string_08009954(char *dest, char *src, int n)\n{\n  char current_char;\n  int remaining_chars;\n  char *dest_ptr;\n  \n  do {\n    dest_ptr = dest;\n    remaining_chars = n;\n    if (remaining_chars == 0) {\n      return;\n    }\n    current_char = *src;\n    dest = dest_ptr + 1;\n    *dest_ptr = current_char;\n    src = src + 1;\n    n = remaining_chars - 1;\n  } while (current_char != '\\0');\n  for (; dest != dest_ptr + remaining_chars; dest = dest + 1) {\n    *dest = '\\0';\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009954",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "copy_string_08009954"
        },
        "FUN_08005aa4": {
            "renaming": {
                "FUN_08005aa4": "update_data_08005aa4",
                "param_1": "data",
                "puVar1": "ptr",
                "iVar2": "ptr_value",
                "iVar3": "end",
                "uVar4": "data_value",
                "bVar5": "is_flag_set",
                "DAT_08005bac": "PTR_08005bac",
                "DAT_08005bb0": "PTR_08005bb0",
                "DAT_08005bb4": "PTR_08005bb4"
            },
            "code": "int update_data_08005aa4(uint *data)\n{\n  bool is_bit_set = (*data & 1) != 0;\n  if (is_bit_set) {\n    bool is_flag_set = (*(uint *)(DAT_08005bac + 0x1c) & 0x10000000) == 0;\n    if (is_flag_set) {\n      *(uint *)(DAT_08005bac + 0x1c) |= 0x10000000;\n    }\n    if ((*DAT_08005bb0 & 0x100) == 0) {\n      *DAT_08005bb0 |= 0x100;\n      int start = get_data_from_pointer_08003760();\n      while ((*DAT_08005bb0 & 0x100) == 0) {\n        int end = get_data_from_pointer_08003760();\n        if (100 < (uint)(end - start)) {\n          return 3;\n        }\n      }\n    }\n    uint *ptr = DAT_08005bb4;\n    int ptr_value = DAT_08005bac;\n    uint data_value = *(uint *)(DAT_08005bac + 0x20) & 0x300;\n    if ((data_value != 0) && (data_value != (data[1] & 0x300))) {\n      data_value = *(uint *)(DAT_08005bac + 0x20);\n      *DAT_08005bb4 = 1;\n      *ptr = 0;\n      *(uint *)(ptr_value + 0x20) = data_value & 0xfffffcff;\n      if ((data_value & 1) != 0) {\n        int start = get_data_from_pointer_08003760();\n        while ((*(uint *)(DAT_08005bac + 0x20) & 2) == 0) {\n          int end = get_data_from_pointer_08003760();\n          if (5000 < (uint)(end - start)) {\n            return 3;\n          }\n        }\n      }\n    }\n    int ptr_value_2 = DAT_08005bac;\n    *(uint *)(DAT_08005bac + 0x20) = *(uint *)(DAT_08005bac + 0x20) & 0xfffffcff | data[1];\n    if (is_flag_set) {\n      *(uint *)(ptr_value_2 + 0x1c) &= 0xefffffff;\n    }\n  }\n  if ((*data & 2) != 0) {\n    *(uint *)(DAT_08005bac + 4) = *(uint *)(DAT_08005bac + 4) & 0xffff3fff | data[2];\n  }\n  if ((*data & 0x10) != 0) {\n    *(uint *)(DAT_08005bac + 4) = *(uint *)(DAT_08005bac + 4) & 0xffbfffff | data[3];\n  }\n  return 0;\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005aa4",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "update_data_08005aa4"
        },
        "FUN_08005e6e": {
            "renaming": {
                "FUN_08005e6e": "check_flags_08005e6e",
                "param_1": "params",
                "iVar1": "ptr1",
                "flag1": "flag1",
                "flag2": "flag2"
            },
            "code": "void check_flags_08005e6e(int *params)\n{\n  int ptr1 = *params;\n  uint flag1 = *(uint *)(ptr1 + 0x10);\n  uint flag2 = *(uint *)(ptr1 + 0xc);\n  if ((flag1 & 2) && (flag2 & 2)) {\n    *(undefined4 *)(ptr1 + 0x10) = 0xfffffffd;\n    *(undefined *)(params + 7) = 1;\n    if ((*(uint *)(*params + 0x18) & 3) == 0) {\n      execute_callback_if_flag_set_0800771c();\n      do_nothing_08005e6a(params);\n    }\n    else {\n      do_nothing_08005e68();\n    }\n    *(undefined *)(params + 7) = 0;\n  }\n  if ((flag1 & 4) && (flag2 & 4)) {\n    *(undefined4 *)(ptr1 + 0x10) = 0xfffffffb;\n    *(undefined *)(params + 7) = 2;\n    if ((*(uint *)(*params + 0x18) & 0x300) == 0) {\n      execute_callback_if_flag_set_0800771c(params);\n      do_nothing_08005e6a(params);\n    }\n    else {\n      do_nothing_08005e68(params);\n    }\n    *(undefined *)(params + 7) = 0;\n  }\n  if ((flag1 & 8) && (flag2 & 8)) {\n    *(undefined4 *)(ptr1 + 0x10) = 0xfffffff7;\n    *(undefined *)(params + 7) = 4;\n    if ((*(uint *)(*params + 0x1c) & 3) == 0) {\n      execute_callback_if_flag_set_0800771c(params);\n      do_nothing_08005e6a(params);\n    }\n    else {\n      do_nothing_08005e68(params);\n    }\n    *(undefined *)(params + 7) = 0;\n  }\n  if ((flag1 & 0x10) && (flag2 & 0x10)) {\n    *(undefined4 *)(ptr1 + 0x10) = 0xffffffef;\n    *(undefined *)(params + 7) = 8;\n    if ((*(uint *)(*params + 0x1c) & 0x300) == 0) {\n      execute_callback_if_flag_set_0800771c(params);\n      do_nothing_08005e6a(params);\n    }\n    else {\n      do_nothing_08005e68(params);\n    }\n    *(undefined *)(params + 7) = 0;\n  }\n  if ((flag1 & 1) && (flag2 & 1)) {\n    *(undefined4 *)(ptr1 + 0x10) = 0xfffffffe;\n    execute_callback_function_08007736(params);\n  }\n  if ((flag1 & 0x80) && (flag2 & 0x80)) {\n    *(undefined4 *)(ptr1 + 0x10) = 0xffffff7f;\n    do_nothing_080064ae(params);\n  }\n  if ((flag1 & 0x40) && (flag2 & 0x40)) {\n    *(undefined4 *)(ptr1 + 0x10) = 0xffffffbf;\n    do_nothing_08005e6c(params);\n  }\n  if ((flag1 & 0x20) && (flag2 & 0x20)) {\n    *(undefined4 *)(ptr1 + 0x10) = 0xffffffdf;\n    do_nothing_080064ac(params);\n  }\n  return;\n}",
            "called": [
                "FUN_08005e6c",
                "FUN_080064ac",
                "FUN_0800771c",
                "FUN_080064ae",
                "FUN_08007736",
                "FUN_08005e6a",
                "FUN_08005e68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e6e",
            "calling": [],
            "imported": false,
            "current_name": "check_flags_08005e6e"
        },
        "FUN_08004024": {
            "renaming": {
                "FUN_08004024": "set_flag_if_four_08004024",
                "param_1": "input",
                "DAT_08004040": "flag_ptr"
            },
            "code": "void set_flag_if_four_08004024(int input) {\n  if (input != 4) {\n    *DAT_08004040 = *DAT_08004040 & 0xfffffffb;\n    return;\n  }\n  *DAT_08004040 = *DAT_08004040 | 4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004024",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "set_flag_if_four_08004024"
        },
        "FUN_08005e6a": {
            "renaming": {
                "FUN_08005e6a": "do_nothing_08005e6a"
            },
            "code": "\nvoid do_nothing_08005e6a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e6a",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_08005e6a"
        },
        "FUN_08002400": {
            "renaming": {
                "FUN_08002400": "is_valid_param_08002400",
                "param_1": "param_index",
                "uVar1": "index"
            },
            "code": "int is_valid_param_08002400(int param_index) {\n    uint8_t index = 0;\n    while (true) {\n        if (index > 11) {\n            return 0;\n        }\n        if ((PTR_DAT_08002428[(param_index * 0xc + index) * 8] & 0x40) != 0) {\n            break;\n        }\n        index++;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002400",
            "calling": [
                "FUN_08002644",
                "FUN_080025ac"
            ],
            "imported": false,
            "current_name": "is_valid_param_08002400"
        },
        "FUN_08004a1e": {
            "renaming": {
                "FUN_08004a1e": "do_nothing_08004a1e"
            },
            "code": "\nvoid do_nothing_08004a1e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a1e",
            "calling": [
                "FUN_08004b82",
                "FUN_08004ccc"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a1e"
        },
        "FUN_08000588": {
            "renaming": {
                "FUN_08000588": "process_byte_08000588",
                "param_1": "index",
                "cVar1": "current_char",
                "cVar2": "byte_value",
                "puVar3": "PTR_DAT_080005cc",
                "PTR_DAT_080005cc": "PTR_DAT_080005cc",
                "process_byte_08002644": "process_byte_08002644",
                "PTR_DAT_080005d0": "PTR_DAT_080005d0",
                "PTR_DAT_080005d4": "PTR_DAT_080005d4",
                "PTR_DAT_080005d8": "PTR_DAT_080005d8",
                "PTR_DAT_080005dc": "PTR_DAT_080005dc"
            },
            "code": "void process_byte_08000588(uint8_t index)\n{\n  uint8_t byte_value = PTR_DAT_080005cc[index];\n  uint8_t byte_offset = byte_value * 3;\n  uint8_t processed_byte = PTR_DAT_080005d0[byte_offset];\n  process_byte_08000588_08002644(processed_byte);\n  uint8_t current_char = *PTR_DAT_080005d4;\n  if ((byte_value == current_char) && (current_char != '\\0')) {\n    *PTR_DAT_080005d4 = current_char - 1;\n  }\n  else if (current_char != '\\0') {\n    uint8_t next_offset = *PTR_DAT_080005d8 + 1;\n    *PTR_DAT_080005d8 = next_offset;\n    PTR_DAT_080005dc[next_offset - 1] = byte_value;\n  }\n  PTR_DAT_080005cc[index] = 0xff;\n}",
            "called": [
                "FUN_08002644"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000588",
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "process_byte_08000588"
        },
        "FUN_08002644": {
            "renaming": {
                "FUN_08002644": "process_byte_08002644",
                "*param_1": "input",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "bVar1": "modified_byte",
                "uVar2": "current_byte",
                "iVar3": "is_valid",
                "is_valid_param_08002400": "is_valid_parameter",
                "PTR_DAT_08002670": "byte_array_1",
                "DAT_08002674": "constant_1",
                "update_flags_and_clear_bits_in_array_08002578": "update_flags_and_clear_bits_in_array",
                "PTR_DAT_08002678": "byte_array_2"
            },
            "code": "void process_byte_08002644(byte *input, uint32_t param_2, uint32_t param_3, uint32_t param_4)\n{\n  byte current_byte = *input;\n  byte modified_byte = PTR_DAT_08002670[current_byte * 8];\n  modified_byte &= 0xbf;\n  PTR_DAT_08002670[current_byte * 8] = modified_byte;\n  int is_valid = is_valid_param_08002400((uint32_t)((uint64_t)DAT_08002674 * (uint64_t)current_byte >> 0x23), param_2, modified_byte, (int)((uint64_t)DAT_08002674 * (uint64_t)current_byte), param_4);\n  if (!is_valid) {\n    update_flags_and_clear_bits_in_array_08002578(PTR_DAT_08002678);\n  }\n  return;\n}",
            "called": [
                "FUN_08002400",
                "FUN_08002578"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002644",
            "calling": [
                "FUN_08000588"
            ],
            "imported": false,
            "current_name": "process_byte_08002644"
        },
        "FUN_08008868": {
            "renaming": {
                "FUN_08008868": "wait_forever_08008868"
            },
            "code": "void wait_forever_08008868() {\n  while (true) {\n    // Do nothing\n  }\n}",
            "called": [
                "FUN_08008868"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008868",
            "calling": [
                "FUN_08009b5c",
                "FUN_08008868"
            ],
            "imported": false,
            "current_name": "wait_forever_08008868"
        },
        "FUN_080036ac": {
            "renaming": {
                "FUN_080036ac": "find_char_index_080036ac",
                "param_1": "param",
                "uVar1": "index",
                "PTR_DAT_080036d0": "char_array"
            },
            "code": "uint find_char_index_080036ac(int param) {\n    uint index;\n    if ((uint)(param << 0x18) >> 0x1c < 5) {\n        for (index = 0; (index < 0x3c && (param != (char)PTR_DAT_080036d0[index])); index++) {\n        }\n    }\n    else {\n        index = 0xffffffff;\n    }\n    return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036ac",
            "calling": [
                "FUN_08000aec",
                "FUN_08001cd0",
                "FUN_08000ef8",
                "FUN_080022f8",
                "FUN_0800021a",
                "FUN_080005f8",
                "FUN_08000a64"
            ],
            "imported": false,
            "current_name": "find_char_index_080036ac"
        },
        "FUN_08002f1e": {
            "renaming": {
                "FUN_08002f1e": "execute_function_pointer_08002f1e",
                "param_1": "function_pointer_address",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void execute_function_pointer_08002f1e(int function_pointer_address)\n{\n  void (*function_pointer)() = (*(void (**)())(function_pointer_address + 0xc0))();\n  function_pointer();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f1e",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "execute_function_pointer_08002f1e"
        },
        "FUN_0800885c": {
            "renaming": {
                "FUN_0800885c": "process_data_from_pointer_08008500_wrapper_0800885c",
                "param_1": "ptr_param_1",
                "param_2": "ptr_param_2",
                "param_3": "dat_param_1",
                "param_4": "dat_param_2"
            },
            "code": "void process_data_from_pointer_08008500_wrapper_0800885c(undefined4 ptr_param_1, undefined4 ptr_param_2, undefined4 dat_param_1, undefined4 dat_param_2)\n{\n  process_data_from_pointer_08008500(ptr_param_1, ptr_param_2, dat_param_1, dat_param_2, dat_param_2);\n  return;\n}",
            "called": [
                "FUN_08008500"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800885c",
            "calling": [
                "FUN_0800a042"
            ],
            "imported": false,
            "current_name": "process_data_from_pointer_08008500_wrapper_0800885c"
        },
        "FUN_0800643c": {
            "renaming": {
                "FUN_0800643c": "set_bits_at_offset_0800643c",
                "param_1": "bits",
                "param_2": "offset",
                "update_bits_at_offset_08006420": "update_bits_at_offset",
                "*param_1": "*bits",
                "0x11": "17"
            },
            "code": "int set_bits_at_offset_0800643c(uint **bits, uint offset, uint num_bits) {\n    update_bits_at_offset(*bits, offset, num_bits);\n    (*bits)[17] |= 0x8000;\n    **bits |= 1;\n    return 0;\n}",
            "called": [
                "FUN_08006420"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800643c",
            "calling": [
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "set_bits_at_offset_0800643c"
        },
        "FUN_08002fca": {
            "renaming": {
                "FUN_08002fca": "process_data_from_bit_08002fca",
                "param_1": "data",
                "param_2": "param_1",
                "param_3": "bit_count",
                "uVar1": "bit_index",
                "decode_data_from_bit_08008a24": "decode_data_from_bit",
                "do_nothing_08008ac4": "do_nothing",
                "param_4": "param_3",
                "param_5": "param_4"
            },
            "code": "void process_data_from_bit_08002fca(uint8_t* data, uint8_t bit_count, uint8_t* param_1, uint8_t* param_2, uint8_t* param_3)\n{\n  uint8_t bit_index = 0;\n  for (bit_index = 0; bit_index < bit_count; bit_index++) {\n    do_nothing(param_3);\n    decode_data_from_bit(data, 1);\n    do_nothing(param_2);\n    decode_data_from_bit(data, 0);\n  }\n  return;\n}",
            "called": [
                "FUN_08008ac4",
                "FUN_08008a24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fca",
            "calling": [
                "FUN_08003002"
            ],
            "imported": false,
            "current_name": "process_data_from_bit_08002fca"
        },
        "FUN_08009c7c": {
            "renaming": {
                "FUN_08009c7c": "process_data_08009c7c",
                "param_1": "data_array",
                "param_2": "param_array",
                "uVar1": "result",
                "iVar2": "temp_var_1",
                "piVar3": "temp_var_2",
                "uVar4": "temp_var_3",
                "uVar5": "temp_var_4",
                "iVar6": "temp_var_5",
                "unaff_r4": "0",
                "unaff_r5": "0",
                "pcVar7": "func_pointer",
                "iVar8": "temp_var_8",
                "uVar9": "temp_var_9",
                "UNRECOVERED_JUMPTABLE_00": "UNRECOVERED_JUMPTABLE_00",
                "bVar10": "jump_flag"
            },
            "code": "uint32_t process_data_08009c7c(uint32_t *data_array, int *param_array)\n{\n  uint32_t result;\n  int temp_var_1;\n  int *temp_var_2;\n  uint32_t temp_var_3;\n  uint16_t temp_var_4;\n  int temp_var_5;\n  uint32_t temp_var_6;\n  uint16_t temp_var_7;\n  int temp_var_8;\n  uint32_t temp_var_9;\n  uint32_t temp_var_10;\n  bool jump_flag;\n  code *func_pointer;\n  int temp_var_11;\n  uint32_t temp_var_12;\n  int *node_ptr;\n  \n  if (param_array[4] != 0) {\n    if ((data_array != (uint32_t *)0x0) && (data_array[6] == 0)) {\n      initialize_arrays_and_data_08009d50();\n    }\n    if (param_array == (int *)param_1[0x4]) {\n      temp_var_2 = (int *)data_array[0x1];\n    }\n    else if (param_array == (int *)param_1[0x5]) {\n      temp_var_2 = (int *)data_array[0x2];\n    }\n    else if (param_array == (int *)param_1[0x6]) {\n      temp_var_2 = (int *)data_array[0x3];\n    }\n    if (*(uint16_t *)(temp_var_2 + 0x3) != 0) {\n      temp_var_4 = *(uint16_t *)(temp_var_2 + 0x3);\n      temp_var_3 = (uint32_t)temp_var_4;\n      if ((int)(temp_var_3 << 0x1c) < 0) {\n        temp_var_1 = temp_var_2[4];\n        if (temp_var_1 != 0) {\n          temp_var_5 = temp_var_3 << 0x1e;\n          jump_flag = temp_var_5 == 0;\n          if (jump_flag) {\n            temp_var_5 = 0;\n          }\n          temp_var_8 = *temp_var_2;\n          if (!jump_flag) {\n            temp_var_5 = temp_var_2[5];\n          }\n          *temp_var_2 = temp_var_1;\n          temp_var_2[0x2] = temp_var_5;\n          for (temp_var_8 = temp_var_8 - temp_var_1; 0 < temp_var_8; temp_var_8 = temp_var_8 - temp_var_5) {\n            temp_var_5 = (*(code *)temp_var_2[0xa])(data_array,temp_var_2[0x8],temp_var_1,temp_var_8,0,0);\n            if (temp_var_5 < 1) {\n              temp_var_4 = *(uint16_t *)(temp_var_2 + 0x3);\n              goto LAB_08009c62;\n            }\n            temp_var_1 = temp_var_1 + temp_var_5;\n          }\n        }\n      }\n      else if (((0 < temp_var_2[0x1]) || (0 < temp_var_2[0x10])) && (func_pointer = (code *)temp_var_2[0xb], func_pointer != (code *)0x0)) {\n        temp_var_9 = *data_array;\n        *data_array = 0;\n        if ((temp_var_4 & 0x1000) == 0) {\n          temp_var_5 = (*func_pointer)(data_array,temp_var_2[0x8],temp_var_4 & 0x1000,1);\n          if ((temp_var_5 == -1) && (temp_var_10 = *data_array, temp_var_10 != 0)) {\n            if ((temp_var_10 != 0x1d) && (temp_var_10 != 0x16)) {\n              *(uint16_t *)(temp_var_2 + 0x3) = *(uint16_t *)(temp_var_2 + 0x3) | 0x40;\n              goto UNRECOVERED_JUMPTABLE_00;\n            }\n            *data_array = temp_var_9;\n            goto LAB_08009b86;\n          }\n        }\n        else {\n          temp_var_5 = temp_var_2[0x15];\n        }\n        if (((int)((uint)*(uint16_t *)(temp_var_2 + 0x3) << 0x1d) < 0) && (temp_var_5 = temp_var_5 - temp_var_2[0x1], temp_var_2[0xd] != 0)) {\n          temp_var_5 = temp_var_5 - temp_var_2[0x10];\n        }\n        temp_var_5 = (*(code *)temp_var_2[0xb])(data_array,temp_var_2[0x8],temp_var_5,0);\n        temp_var_4 = *(uint16_t *)(temp_var_2 + 0x3);\n        if ((temp_var_5 == -1) && ((0x1d < *data_array || (-1 < (int)((DAT_08009c78 >> (*data_array & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n          *(uint16_t *)(temp_var_2 + 0x3) = temp_var_4 | 0x40;\n          goto UNRECOVERED_JUMPTABLE_00;\n        }\n        temp_var_2[0x1] = 0;\n        *temp_var_2 = temp_var_2[0x4];\n        if (((int)((uint)temp_var_4 << 0x13) < 0) && ((temp_var_5 != -1 || (*data_array == 0)))) {\n          temp_var_2[0x15] = temp_var_5;\n        }\n        node_ptr = (int *)temp_var_2[0xd];\n        *data_array = temp_var_9;\n        if (node_ptr != (int *)0x0) {\n          if (node_ptr != temp_var_2 + 0x11) {\n            insert_node_at_head_080091d8(data_array);\n          }\n          temp_var_2[0xd] = 0;\n          goto UNRECOVERED_JUMPTABLE_00;\n        }\n      }\nLAB_08009b86:\n      goto UNRECOVERED_JUMPTABLE_00;\n    }\n  }\n  result = 0;\n  goto LAB_08009c99;\n  UNRECOVERED_JUMPTABLE_00:\n  result = (*UNRECOVERED_JUMPTABLE_00)();\n  LAB_08009c99:\n  return result;\n}",
            "called": [
                "FUN_08009d50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009c7c",
            "calling": [
                "FUN_0800932c"
            ],
            "imported": false,
            "current_name": "process_data_08009c7c",
            "code_backup": "\nundefined4 FUN_08009c7c(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_08009d50();\n    }\n    if (param_2 == (int *)PTR_DAT_08009cc4) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)PTR_DAT_08009cc8) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)PTR_DAT_08009ccc) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 != 0;\n          if (bVar10) {\n            iVar6 = 0;\n          }\n          iVar8 = *param_2;\n          if (!bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_08009c62;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_08009b86;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((DAT_08009c78 >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            insert_node_at_head_080091d8(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_08009b5c": {
            "renaming": {
                "FUN_08009b5c": "process_input_and_wait_forever_08009b5c",
                "puVar1": "input_pointer",
                "iVar2": "input_length",
                "piVar3": "input_array",
                "piVar4": "node_pointer",
                "uVar5": "input_value",
                "uVar6": "input_flag",
                "iVar7": "counter",
                "pcVar8": "function_pointer",
                "iVar9": "result",
                "uVar10": "temp_value",
                "UNRECOVERED_JUMPTABLE_00": "JUMPTABLE_00",
                "bVar11": "condition",
                "uVar12": "wait_result"
            },
            "code": "void process_input_and_wait_forever_08009b5c(void)\n{\n  uint *input_pointer;\n  int input_length;\n  int *input_array;\n  int *node_pointer;\n  uint input_value;\n  ushort input_flag;\n  int counter;\n  code *function_pointer;\n  int result;\n  uint temp_value;\n  code *JUMPTABLE_00;\n  bool condition;\n  undefined8 wait_result;\n  process_input_08009fe8(6);\n  JUMPTABLE_00 = (code *)0x8009b6b;\n  wait_result = wait_forever_08008868(1);\n  input_array = (int *)((ulonglong)wait_result >> 0x20);\n  input_pointer = (uint *)wait_result;\n  input_flag = *(ushort *)(input_array + 3);\n  input_value = (uint)input_flag;\n  if ((int)(input_value << 0x1c) < 0) {\n    input_length = input_array[4];\n    if (input_length != 0) {\n      counter = input_value << 0x1e;\n      condition = counter == 0;\n      if (condition) {\n        counter = 0;\n      }\n      else {\n        counter = input_array[5];\n      }\n      input_array[0] = input_length;\n      input_array[2] = counter;\n      for (input_length = input_length - input_array[0]; 0 < input_length; input_length = input_length - counter) {\n        counter = (*(code *)input_array[10])(input_pointer,input_array[8],input_length,input_array[0]);\n        if (counter < 1) {\n          input_flag = *(ushort *)(input_array + 3);\n          goto LAB_08009c62;\n        }\n        input_array[0] = input_array[0] + counter;\n      }\n    }\n  }\n  else if (((0 < input_array[1]) || (0 < input_array[0x10])) &&\n          (function_pointer = (code *)input_array[0xb], function_pointer != (code *)0x0)) {\n    temp_value = *input_pointer;\n    *input_pointer = 0;\n    if ((input_flag & 0x1000) == 0) {\n      counter = (*function_pointer)(input_pointer,input_array[8],input_value & 0x1000,1);\n      if ((counter == -1) && (input_value = *input_pointer, input_value != 0)) {\n        if ((input_value != 0x1d) && (input_value != 0x16)) {\n          *(ushort *)(input_array + 3) = *(ushort *)(input_array + 3) | 0x40;\n          (*JUMPTABLE_00)();\n          return;\n        }\n        *input_pointer = temp_value;\n        goto LAB_08009b86;\n      }\n    }\n    else {\n      counter = input_array[0x15];\n    }\n    if (((int)((uint)*(ushort *)(input_array + 3) << 0x1d) < 0) &&\n       (counter = counter - input_array[1], input_array[0xd] != 0)) {\n      counter = counter - input_array[0x10];\n    }\n    counter = (*(code *)input_array[0xb])(input_pointer,input_array[8],counter,0);\n    input_flag = *(ushort *)(input_array + 3);\n    if ((counter == -1) &&\n       ((0x1d < *input_pointer || (-1 < (int)((DAT_08009c78 >> (*input_pointer & 0xff)) << 0x1f))))) {\n      *(ushort *)(input_array + 3) = input_flag | 0x40;\n      (*JUMPTABLE_00)(0xffffffff);\n      return;\n    }\n    input_array[1] = 0;\n    *input_array = input_array[4];\n    if (((int)((uint)input_flag << 0x13) < 0) && ((counter != -1 || (*input_pointer == 0)))) {\n      input_array[0x15] = counter;\n    }\n    node_pointer = (int *)input_array[0xd];\n    *input_pointer = temp_value;\n    if (node_pointer != (int *)0x0) {\n      if (node_pointer != input_array + 0x11) {\n        insert_node_at_head_080091d8(input_pointer);\n      }\n      input_array[0xd] = 0;\n      (*JUMPTABLE_00)();\n      return;\n    }\n  }\nLAB_08009b86:\n  (*JUMPTABLE_00)(0);\n  return;\n}\n",
            "called": [
                "FUN_080091d8",
                "FUN_08008868",
                "FUN_08009fe8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009b5c",
            "calling": [
                "FUN_0800a18c",
                "FUN_080090cc"
            ],
            "imported": false,
            "current_name": "process_input_and_wait_forever_08009b5c"
        },
        "FUN_0800021a": {
            "renaming": {
                "FUN_0800021a": "decode_and_set_value_0800021a",
                "param_1": "offset",
                "param_2": "value",
                "param_3": "param1",
                "param_4": "param2",
                "iVar2": "value_type",
                "bVar1": "is_valid",
                "PTR_DAT_080002d8": "PTR_DATA1",
                "PTR_DAT_080002dc": "PTR_DATA2",
                "PTR_DAT_080002e8": "PTR_DATA3",
                "find_char_index_080036ac": "find_char_index",
                "is_param1_in_param2_0800738a": "is_param1_in_param2",
                "decode_data_080088e0": "decode_data",
                "set_value_at_offset_08002fc2": "set_value_at_offset",
                "PTR_DAT_080002e4": "PTR_DATA4",
                "PTR_DAT_080002e0": "PTR_DATA5"
            },
            "code": "void decode_and_set_value_0800021a(uint offset, uint value, uint param1, uint param2)\n{\n    bool is_valid = false;\n    int char_index = 0;\n\n    int value_type = get_value_type_from_offset(PTR_DAT_080002d8, offset, param1, param2, param2);\n\n    if (value_type == 3) {\n        if (offset < 0x3c) {\n            if (PTR_DAT_080002dc[offset] == -1) {\n                is_valid = true;\n            }\n            else {\n                char_index = find_char_index_080036ac();\n                if (char_index != 0) {\n                    char_index = find_char_index_080036ac((int)(char)PTR_DAT_080002dc[offset]);\n                    if (char_index != 1) {\n                        is_valid = is_param1_in_param2_0800738a((int)(char)PTR_DAT_080002dc[offset], PTR_DAT_080002e8);\n                    }\n                }\n            }\n        }\n        else {\n            is_valid = true;\n        }\n\n        if (is_valid) {\n            decode_data(offset, value);\n        }\n\n        set_value_at_offset_08002fc2(PTR_DAT_080002d8, offset, value);\n    }\n    else if (value_type == 4) {\n        if (offset < 0x3c) {\n            if (PTR_DAT_080002dc[offset] != -1) {\n                char_index = find_char_index_080036ac();\n                if (char_index != 0) {\n                    char_index = find_char_index_080036ac((int)(char)PTR_DAT_080002dc[offset]);\n                    if (char_index != 1) {\n                        is_valid = true;\n                    }\n                }\n            }\n        }\n\n        if (is_valid) {\n            calculate_and_set_new_value(PTR_DAT_080002e4 + (uint)(byte)PTR_DAT_080002e0[offset] * 3, value);\n        }\n\n        set_value_at_offset_08002fc2(PTR_DAT_080002d8, offset, value);\n    }\n}\n",
            "called": [
                "FUN_080088e0",
                "FUN_08002fc2",
                "FUN_08002fa0",
                "FUN_080036ac",
                "FUN_0800738a",
                "FUN_080026b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800021a",
            "calling": [
                "FUN_08000214"
            ],
            "imported": false,
            "current_name": "decode_and_set_value_0800021a"
        },
        "FUN_08008a6c": {
            "renaming": {
                "FUN_08008a6c": "check_bit_in_param_08008a6c",
                "param_1": "position",
                "cVar1": "bit_value",
                "iVar2": "bit_position",
                "uVar3": "data",
                "uVar4": "bit_mask"
            },
            "code": "char check_bit_in_param_08008a6c(uint position) {\\n    char bit_value;\\n    int bit_position;\\n    uint data;\\n    uint bit_mask;\\n\\n    if (position < 0x3c) {\\n        bit_mask = (uint)(char)PTR_DAT_08008ab4[position];\\n    }\\n    else {\\n        bit_mask = 0xffffffff;\\n    }\\n\\n    if (bit_mask == 0xffffffff) {\\n        bit_value = \"\\0\";\\n    }\\n    else {\\n        bit_position = get_bit_at_position(bit_mask, PTR_DAT_08008ab8);\\n        if (bit_position == 0) {\\n            bit_value = \"\\0\";\\n        }\\n        else {\\n            data = get_data_at_index((bit_mask << 0x18) >> 0x1c);\\n            bit_value = check_bit_in_param_08008a6c(data, 1 << (bit_mask & 0xf) & 0xffff);\\n        }\\n    }\\n\\n    if (bit_value != \"\\0\") {\\n        bit_value = \"\\x01\";\\n    }\\n\\n    return bit_value;\\n}",
            "called": [
                "FUN_08006b7c",
                "FUN_08006b28",
                "FUN_080072f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a6c",
            "calling": [
                "FUN_08000ef8"
            ],
            "imported": false,
            "current_name": "check_bit_in_param_08008a6c"
        },
        "FUN_080026f8": {
            "renaming": {
                "FUN_080026f8": "get_byte_from_ptr_dat_080026f8",
                "*param_1": "*data",
                "PTR_DAT_08002708": "PTR_DAT_08002708",
                "index": "index",
                "shifted": "shifted",
                "result": "result"
            },
            "code": "uint get_byte_from_ptr_dat_080026f8(byte *data) {\n    uint index = (uint)*data * 8;\n    uint shifted = (uint)(byte)PTR_DAT_08002708[index] << 0x19;\n    uint result = shifted >> 0x1f;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026f8",
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "get_byte_from_ptr_dat_080026f8"
        },
        "FUN_080085b8": {
            "renaming": {
                "FUN_080085b8": "is_combination_valid_080085b8",
                "param_1": "index",
                "uVar1": "combined_bytes",
                "PTR_DAT_080085d8": "get_ptr_dat_value"
            },
            "code": "bool is_combination_valid_080085b8(int index)\n{\n    uint16_t combined_bytes = combine_bytes(PTR_DAT_080085d8(index));\n    return (combined_bytes & 0x22) == 0x22;\n}",
            "called": [
                "FUN_08006b1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080085b8",
            "calling": [
                "FUN_08008600",
                "FUN_0800863c"
            ],
            "imported": false,
            "current_name": "is_combination_valid_080085b8"
        },
        "FUN_08001c08": {
            "renaming": {
                "FUN_08001c08": "read_byte_from_memory_08001c08",
                "uVar1": "byte",
                "PTR_DAT_08001c14": "ptr"
            },
            "code": "unsigned char read_byte_from_memory_08001c08(unsigned char* PTR_DAT_08001c14) {\n    unsigned char byte = *PTR_DAT_08001c14;\n    return byte;\n}",
            "called": [
                "FUN_08002720"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c08",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "read_byte_from_memory_08001c08"
        },
        "FUN_080075dc": {
            "renaming": {
                "FUN_080075dc": "extract_data_and_check_clock_source_080075dc",
                "param_1": "clock_source",
                "iVar2": "result",
                "uVar1": "shifted_value",
                "uVar3": "extracted_data",
                "local_20": "undefined_local_20",
                "local_1c": "undefined_local_1c",
                "local_18": "undefined_local_18",
                "local_14": "undefined_local_14",
                "local_10": "extracted_data_length",
                "local_c": "unknown_clock_source_length"
            },
            "code": "int extract_data_and_check_clock_source_080075dc(uint clock_source)\n{\n  uint shifted_value;\n  int result;\n  uint extracted_data;\n  uint unknown_clock_source;\n  undefined4 local_20;\n  undefined4 local_1c;\n  undefined4 local_18;\n  undefined4 local_14;\n  uint extracted_data_length;\n  uint unknown_clock_source_length;\n  \n  local_1c = 0;\n  local_18 = 0;\n  local_14 = 0;\n  extracted_data_length = 0;\n  unknown_clock_source_length = 0;\n  local_20 = 0;\n  extract_data_from_memory(&extracted_data_length, &local_20);\n  result = check_clock_source(clock_source);\n  shifted_value = 0;\n  extracted_data = extracted_data_length;\n  unknown_clock_source = unknown_clock_source_length;\n  if (result == 1) {\n    shifted_value = get_shifted_value_from_dat_ptr();\n  }\n  else if (result == 2) {\n    shifted_value = get_shifted_value_from_array();\n    extracted_data = unknown_clock_source;\n  }\n  else {\n    process_data(PTR_s_TIM__Unknown_clock_source_08007644);\n    shifted_value = 0;\n    extracted_data = 0;\n  }\n  if (extracted_data != 0x500) {\n    if (extracted_data < 0x501) {\n      if (extracted_data != 0x400) {\n        return shifted_value;\n      }\n    }\n    else if ((extracted_data != 0x600) && (extracted_data != 0x700)) {\n      return shifted_value;\n    }\n  }\n  return shifted_value << 1;\n}",
            "called": [
                "FUN_080098d8",
                "FUN_08007594",
                "FUN_08005a68",
                "FUN_08005a28",
                "FUN_08005a48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080075dc",
            "calling": [
                "FUN_08007118",
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "extract_data_and_check_clock_source_080075dc"
        },
        "FUN_08007544": {
            "renaming": {
                "FUN_08007544": "check_param_08007544",
                "param_1": "param",
                "DAT_08007588": "timer_constant",
                "DAT_0800758c": "timer_constant2",
                "PTR_s_TIM__Unknown_timer_IRQn_08007590": "timer_interrupt_handler"
            },
            "code": "uint32_t check_param_08007544(uint32_t param)\n{\n    if (param == 0xffffffff) {\n        return 0;\n    }\n    if (param == DAT_08007588) {\n        return 0x1d;\n    }\n    if (DAT_08007588 < param) {\n        if (param == DAT_0800758c) {\n            return 0x1e;\n        }\n        if (param == DAT_0800758c + 0x12400) {\n            return 0x19;\n        }\n    }\n    else if (param == 0x40000000) {\n        return 0x1c;\n    }\n    process_data(PTR_s_TIM__Unknown_timer_IRQn_08007590);\n    return 0;\n}",
            "called": [
                "FUN_080098d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007544",
            "calling": [
                "FUN_080076e0",
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "check_param_08007544"
        },
        "FUN_08007ff0": {
            "renaming": {
                "FUN_08007ff0": "execute_command_08007ff0",
                "param_1": "input_value",
                "iVar1": "command_ptr",
                "subtract_four_from_input_08007f78": "subtract_four_from_input",
                "PTR_080049e0": "set_bit_and_flag",
                "DAT_08007f78": "",
                "DAT_080049e0": "",
                "*(code **)(iVar1 + 0x60)": "",
                "*(char *)(iVar1 + 0x5c)": "",
                "*(char *)(iVar1 + 0x2c)": ""
            },
            "code": "void execute_command_08007ff0(int input_value)\n{\n  int command_ptr = subtract_four_from_input();\n  if (((*(code **)(command_ptr + 0x60) != (code *)0x0) && (*(char *)(command_ptr + 0x5c) == '\\x01')) &&\n     (*(char *)(command_ptr + 0x2c) != ' ')) {\n    (**(code **)(command_ptr + 0x60))(command_ptr + 0x68);\n  }\n  PTR_080049e0(input_value);\n  return;\n}",
            "called": [
                "FUN_080049e0",
                "FUN_08007f78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ff0",
            "calling": [
                "FUN_08004aec",
                "FUN_08004f3c",
                "FUN_08005084"
            ],
            "imported": false,
            "current_name": "execute_command_08007ff0"
        },
        "FUN_08008990": {
            "renaming": {
                "FUN_08008990": "decode_data_08008990",
                "param_1": "data_index",
                "param_2": "flag_type",
                "param_3": "bit_position",
                "param_4": "data_array",
                "iVar1": "is_data_bit_set",
                "puVar2": "data_ptr",
                "iVar3": "decoded_data_value",
                "is_param1_in_param2_0800738a": "is_data_in_array_0800738a",
                "set_flags_on_parameter_080071e4": "set_flags_on_data_080071e4",
                "calculate_flags_08007258": "calculate_flags_08007258",
                "set_bit_in_array_08006b3e": "set_bit_in_array_08006b3e",
                "set_bit_in_array_08006b5c": "set_bit_in_array_08006b5c",
                "get_bit_at_position_08006b28": "get_bit_at_position_08006b28",
                "PTR_DAT_08008a14": "PTR_DAT_08008a14",
                "PTR_DAT_08008a18": "PTR_DAT_08008a18",
                "PTR_DAT_08008a1c": "PTR_DAT_08008a1c",
                "PTR_DAT_08008a20": "PTR_DAT_08008a20"
            },
            "code": "void decode_data_08008990(uint data_index, undefined4 param_2, undefined4 param_3, undefined *data_array)\n{\n  int decoded_data_value;\n  undefined *data_ptr;\n  int bit_position;\n  \n  if (data_index < 0x3c) {\n    decoded_data_value = (int)(char)PTR_DAT_08008a14[data_index];\n    data_ptr = PTR_DAT_08008a14;\n  }\n  else {\n    decoded_data_value = -1;\n    data_ptr = data_array;\n  }\n  if (decoded_data_value != -1) {\n    int is_data_bit_set = get_bit_at_position_08006b28(decoded_data_value,PTR_DAT_08008a18,param_3,data_ptr,data_array);\n    if (is_data_bit_set != 0) {\n      int is_data_in_array = is_data_in_array_0800738a(decoded_data_value,PTR_DAT_08008a1c);\n      if (is_data_in_array != 0) {\n        set_flags_on_data_080071e4(decoded_data_value);\n      }\n      set_bit_in_array_08006b5c(decoded_data_value,PTR_DAT_08008a18);\n    }\n    switch(param_2) {\n    case 0:\n      calculate_flags_08007258(decoded_data_value,0);\n      break;\n    case 1:\n      calculate_flags_08007258(decoded_data_value,1,0);\n      break;\n    case 2:\n      calculate_flags_08007258(decoded_data_value,0,1);\n      break;\n    case 3:\n      calculate_flags_08007258(decoded_data_value,0,2);\n    }\n    set_bit_in_array_08006b3e(decoded_data_value,PTR_DAT_08008a20);\n  }\n  return;\n}",
            "called": [
                "FUN_08006b3e",
                "FUN_08007258",
                "FUN_08006b28",
                "FUN_0800738a",
                "FUN_080071e4",
                "FUN_08006b5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008990",
            "calling": [
                "FUN_080088e0",
                "FUN_08003002",
                "FUN_080025ac",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "decode_data_08008990"
        },
        "FUN_08008078": {
            "renaming": {
                "FUN_08008078": "FUNC_08008078"
            },
            "code": "\nvoid FUNC_08008078(int *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  undefined4 uVar5;\n  uint uVar6;\n  uint local_20;\n  uint local_1c;\n  uint local_18;\n  undefined4 local_14;\n  \n  if (param_1 != (int *)0x0) {\n    iVar2 = find_value_if_not_negative_08007320((int)*(char *)(param_1 + 0x16),PTR_DAT_08008330);\n    iVar3 = find_value_if_not_negative_08007320((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08008334);\n    if ((iVar3 == 0) || (iVar2 == 0)) {\n      process_data_080098d8(PTR_s_ERROR__at_least_one_UART_pin_has_08008348,iVar3);\n    }\n    else {\n      iVar4 = compare_and_return_non_zero_080073ae(iVar2);\n      *param_1 = iVar4;\n      iVar1 = DAT_08008340;\n      iVar3 = DAT_0800833c;\n      iVar2 = DAT_08008338;\n      if (iVar4 == 0) {\n        process_data_080098d8(PTR_s_ERROR__U_S_ART_pins_mismatch_0800834c);\n      }\n      else {\n        if (iVar4 == DAT_08008338) {\n          *(uint *)(DAT_08008338 + 0xd80c) = *(uint *)(DAT_08008338 + 0xd80c) | 0x4000;\n          *(uint *)(iVar2 + 0xd80c) = *(uint *)(iVar2 + 0xd80c) & 0xffffbfff;\n          *(uint *)(iVar2 + 0xd818) = *(uint *)(iVar2 + 0xd818) | 0x4000;\n          *(undefined *)(param_1 + 0x11) = 0;\n          *(undefined *)((int)param_1 + 0x5a) = 0x25;\n        }\n        else if (iVar4 == DAT_0800833c) {\n          *(uint *)(DAT_0800833c + 0x1cc10) = *(uint *)(DAT_0800833c + 0x1cc10) | 0x20000;\n          *(uint *)(iVar3 + 0x1cc10) = *(uint *)(iVar3 + 0x1cc10) & 0xfffdffff;\n          *(uint *)(iVar3 + 0x1cc1c) = *(uint *)(iVar3 + 0x1cc1c) | 0x20000;\n          *(undefined *)(param_1 + 0x11) = 1;\n          *(undefined *)((int)param_1 + 0x5a) = 0x26;\n        }\n        else if (iVar4 == DAT_08008340) {\n          *(uint *)(DAT_08008340 + 0x1c810) = *(uint *)(DAT_08008340 + 0x1c810) | 0x40000;\n          *(uint *)(iVar1 + 0x1c810) = *(uint *)(iVar1 + 0x1c810) & 0xfffbffff;\n          *(uint *)(iVar1 + 0x1c81c) = *(uint *)(iVar1 + 0x1c81c) | 0x40000;\n          *(undefined *)(param_1 + 0x11) = 2;\n          *(undefined *)((int)param_1 + 0x5a) = 0x27;\n        }\n        uVar5 = set_flag_08006bb8((uint)((int)*(char *)((int)param_1 + 0x59) << 0x18) >> 0x1c);\n        uVar6 = find_value_08007376((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08008334);\n        local_20 = 1 << (*(byte *)((int)param_1 + 0x59) & 0xf) & 0xffff;\n        local_1c = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        local_18 = (uVar6 << 0x1a) >> 0x1e;\n        *(uint *)(DAT_08008344 + 0x18) = *(uint *)(DAT_08008344 + 0x18) | 1;\n        switch((uVar6 << 0x11) >> 0x19) {\n        case 1:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000001;\n          break;\n        case 2:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000002;\n          break;\n        case 4:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000004;\n          break;\n        case 6:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000008;\n          break;\n        case 8:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000030;\n          break;\n        case 10:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x70000c0;\n          break;\n        case 0xd:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7000300;\n          break;\n        case 0x10:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7000c00;\n          break;\n        case 0x14:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7001000;\n          break;\n        case 0x17:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7008000;\n          break;\n        case 0x1c:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff;\n          break;\n        case 0x22:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff | 0x4000000;\n        }\n        local_14 = 3;\n        calculate_flags_080040e8(uVar5,&local_20);\n        uVar5 = set_flag_08006bb8((uint)((int)*(char *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        uVar6 = find_value_08007376((int)*(char *)(param_1 + 0x16),PTR_DAT_08008330);\n        local_20 = 1 << (*(byte *)(param_1 + 0x16) & 0xf) & 0xffff;\n        local_1c = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        local_18 = (uVar6 << 0x1a) >> 0x1e;\n        calculate_flags_080040e8(uVar5,&local_20);\n        *(int **)(PTR_DAT_08008354 + (uint)*(byte *)(param_1 + 0x11) * 4) = param_1 + 1;\n        param_1[1] = *param_1;\n        param_1[2] = param_1[0x12];\n        param_1[3] = param_1[0x13];\n        param_1[4] = param_1[0x14];\n        param_1[5] = param_1[0x15];\n        param_1[6] = 0xc;\n        param_1[7] = 0;\n        param_1[8] = 0;\n        zero_out_values_if_not_null_0800674e(param_1 + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08007376",
                "FUN_080098d8",
                "FUN_080040e8",
                "FUN_08007320",
                "FUN_08006bb8",
                "FUN_080073ae",
                "FUN_0800674e"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008078",
            "calling": [
                "FUN_080084b0",
                "FUN_08008c44"
            ],
            "imported": false,
            "current_name": "FUNC_08008078"
        },
        "FUN_08004396": {
            "renaming": {
                "FUN_08004396": "set_value_from_param_08004396",
                "param_1": "param_array",
                "*param_1": "*param_array",
                "uint": "unsigned int",
                "*(uint *)(*param_1 + 0x10)": "*ptr",
                "param_1[0x11]": "value",
                "& 0xff": " & 0xff"
            },
            "code": "uint8_t set_value_from_param_08004396(int* param_array)\n{\n    uint8_t value = param_array[0x11] & 0xff;\n    uint* ptr = (uint*)(param_array[0] + 0x10);\n    *ptr = value;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004396",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "set_value_from_param_08004396"
        },
        "FUN_08003fb0": {
            "renaming": {
                "FUN_08003fb0": "set_bit_at_index_08003fb0",
                "param_1": "bit_index",
                "DAT_08003fd4": "data_ptr",
                "data_ptr": "data_ptr",
                "bit_mask": "bit_mask"
            },
            "code": "void set_bit_at_index_08003fb0(uint bit_index) {\n  if (bit_index >= 0) {\n    int* DAT_08003fd4 = (int*)(DAT_08003fd4 + ((bit_index >> 5) + 0x20) * 4);\n    int bit_mask = 1 << (bit_index & 0x1f);\n    *DAT_08003fd4 = bit_mask;\n    DataSynchronizationBarrier(0xf);\n    InstructionSynchronizationBarrier(0xf);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fb0",
            "calling": [
                "FUN_080076e0"
            ],
            "imported": false,
            "current_name": "set_bit_at_index_08003fb0"
        },
        "FUN_080052f0": {
            "renaming": {
                "FUN_080052f0": "check_and_set_flags_080052f0",
                "param_1": "input",
                "puVar2": "input_ptr",
                "uVar3": "flags",
                "uVar4": "status",
                "DAT_080053c8": "FLAG_A",
                "execute_command_08004aec": "execute_command",
                "cVar1": "c",
                "PTR_080053e8": "FLAG_B",
                "PTR_080053f0": "FLAG_C",
                "PTR_080053f8": "FLAG_D",
                "check_input_and_set_flag_08004f3c": "check_input_and_set_flag"
            },
            "code": "void check_and_set_flags_080052f0(uint **input)\n{\n  uint *input_ptr = *input;\n  uint flags = input_ptr[5];\n  uint status = input_ptr[1];\n  \n  if (((flags & DAT_080053c8) != 0) && ((status & 0x100) != 0)) {\n    input[16] = (uint *)((uint)input[16] | 1);\n    input_ptr[5] = 0xfffffeff;\n    **input = **input | 0x8000;\n  }\n  if (((flags & PTR_080053e8) != 0) && ((status & 0x100) != 0)) {\n    input[16] = (uint *)((uint)input[16] | 2);\n    (*input)[5] = 0xfffffdff;\n  }\n  if (((flags & PTR_080053f0) != 0) && ((status & 0x100) != 0)) {\n    char c = *(char *)((int)input + 0x3d);\n    if (((*(char *)((int)input + 0x3e) == ' ') && (*(short *)((int)input + 0x2a) == 0)) && (((c == '!' || (c == ')')) || ((c == '(' && (input[12] == (uint *)0x21)))))) {\n      execute_command(input);\n    }\n    else {\n      input[16] = (uint *)((uint)input[16] | 4);\n      if (*(char *)((int)input + 0x3e) == '\\x10') {\n        **input = **input | 0x200;\n      }\n      (*input)[5] = 0xfffffbff;\n    }\n  }\n  if (((flags & PTR_080053f8) != 0) && ((status & 0x100) != 0)) {\n    input[16] = (uint *)((uint)input[16] | 8);\n    (*input)[5] = 0xfffff7ff;\n  }\n  if (input[16] != (uint *)0x0) {\n    check_input_and_set_flag(input);\n  }\n  return;\n}\n",
            "called": [
                "FUN_08004aec",
                "FUN_08004f3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052f0",
            "calling": [],
            "imported": false,
            "current_name": "check_and_set_flags_080052f0"
        },
        "FUN_08008f0c": {
            "renaming": {
                "FUN_08008f0c": "do_nothing_08008f0c"
            },
            "code": "\nvoid do_nothing_08008f0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f0c",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": false,
            "current_name": "do_nothing_08008f0c"
        },
        "FUN_08002ec4": {
            "renaming": {
                "FUN_08002ec4": "execute_function_08002ec4",
                "param_1": "function_pointer",
                "**(int **)(param_1 + 0xc0)": "function_pointer_address",
                "function": "function_pointer"
            },
            "code": "void execute_function_08002ec4(int function_pointer){\n    void (*function)() = (*(void (**)(void))(**(int **)(function_pointer + 0xc0) + 8));\n    function();\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ec4",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "execute_function_08002ec4"
        },
        "FUN_08007306": {
            "renaming": {
                "FUN_08007306": "find_value_in_array_08007306",
                "param_1": "value",
                "param_2": "array",
                "*param_2": "*array",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int find_value_in_array_08007306(int value, char* array) {\n    while (*array != -1) {\n        if (*array == value) {\n            break;\n        }\n        array += 12;\n    }\n    return *(int*)(array + 4);\n}",
            "called": [
                "FUN_08007306"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007306",
            "calling": [
                "FUN_08007320",
                "FUN_08007306"
            ],
            "imported": false,
            "current_name": "find_value_in_array_08007306"
        },
        "FUN_08008f0e": {
            "renaming": {
                "FUN_08008f0e": "initialize_and_write_data_08008f0e",
                "update_data_08003f0c": "update_data",
                "initialize_and_write_data_080036a2": "initialize_and_write_data_helper"
            },
            "code": "void initialize_and_write_data_08008f0e(void)\n{\n  update_data(3);\n  initialize_and_write_data_08008f0e_helper();\n  return;\n}",
            "called": [
                "FUN_080036a2",
                "FUN_08003f0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f0e",
            "calling": [
                "FUN_08009148"
            ],
            "imported": false,
            "current_name": "initialize_and_write_data_08008f0e"
        },
        "FUN_08002f2c": {
            "renaming": {
                "FUN_08002f2c": "update_value_at_address_if_key_matches_08002f2c",
                "param_1": "key",
                "param_2": "value",
                "param_3": "target_address"
            },
            "code": "void update_value_at_address_if_key_matches_08002f2c(uint8_t key, uint32_t value, uint8_t* target_address) {\n    switch (key) {\n        case 0x90:\n            *(uint32_t*)PTR_DAT_08002f74 = value;\n            break;\n        case 0xc0:\n            *(uint32_t*)PTR_DAT_08002f70 = value;\n            break;\n        case 0xd0:\n            *(uint32_t*)PTR_DAT_08002f78 = value;\n            break;\n        case 0xe0:\n            *(uint32_t*)PTR_DAT_08002f6c = value;\n            break;\n        case 0xf4:\n            *(uint32_t*)PTR_DAT_08002f7c = value;\n            break;\n        case 0xf5:\n            *(uint32_t*)PTR_DAT_08002f80 = value;\n            break;\n        default:\n            break;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f2c",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "update_value_at_address_if_key_matches_08002f2c"
        },
        "FUN_08004954": {
            "renaming": {
                "FUN_08004954": "validate_input_08004954",
                "param_1": "input_ptr",
                "param_2": "input_data",
                "param_3": "input_len",
                "param_4": "output_ptr",
                "uVar1": "result",
                "puVar2": "ptr"
            },
            "code": "uint32_t validate_input_08004954(uint32_t **input_ptr, uint32_t *input_data, int input_len, uint32_t *output_ptr) {\n    uint32_t result;\n    uint32_t *ptr;\n    \n    if ((*input_ptr)[0x3d] == '(') {\n        if (input_data == NULL || input_len == 0) {\n            result = 1;\n        }\n        else if ((*input_ptr)[0xf] == 0x1) {\n            result = 2;\n        }\n        else {\n            (*input_ptr)[0xf] = 1;\n            ptr = *input_ptr;\n            if ((*ptr & 1) == 0) {\n                *ptr |= 1;\n            }\n            **input_ptr &= 0xfffff7ff;\n            (*input_ptr)[0x3d] = '*';\n            (*input_ptr)[0x3e] = ' ';\n            result = 0;\n            input_ptr[0x10] = NULL;\n            input_ptr[9] = input_data;\n            *((short *)(input_ptr) + 0x14) = (short)input_len;\n            input_ptr[0xb] = output_ptr;\n            input_ptr[10] = *((uint16_t *)(input_ptr) + 0x14);\n            (*input_ptr)[1] |= 0x700;\n            (*input_ptr)[0xf] = 0;\n        }\n    }\n    else {\n        result = 2;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004954",
            "calling": [
                "FUN_08007fa0"
            ],
            "imported": false,
            "current_name": "validate_input_08004954"
        },
        "FUN_08005cec": {
            "renaming": {
                "FUN_08005cec": "set_flags_and_values_08005cec",
                "param_1": "flags",
                "param_2": "values",
                "uVar1": "new_flags",
                "uVar2": "current_flags",
                "uVar3": "current_value",
                "DAT_08005d44": "DAT_08005d44",
                "mask1": "mask1",
                "mask2": "mask2",
                "mask3": "mask3",
                "mask4": "mask4"
            },
            "code": "void set_flags_and_values_08005cec(int flags, uint32_t *values)\n{\n  uint32_t new_flags;\n  uint32_t current_flags;\n  uint32_t current_value;\n  uint32_t mask1 = 0xfffffffe;\n  uint32_t mask2 = 0xfffffffd;\n  uint32_t mask3 = 0xfffffff7;\n  uint32_t mask4 = 0xfffffffb;\n  current_flags = *(uint32_t *)(flags + 0x20);\n  *(uint32_t *)(flags + 0x20) = current_flags & mask1;\n  current_value = *(uint32_t *)(flags + 0x18);\n  *(uint32_t *)(flags + 0x18) = current_value & 0xffffff8c | values[0];\n  *(uint32_t *)(flags + 0x34) = values[1];\n  new_flags = current_flags & mask2 | values[2];\n  if (flags == DAT_08005d44) {\n    new_flags = (new_flags & mask3) | values[3];\n    current_flags = current_flags & 0xfffffcff | values[5] | values[6];\n  }\n  *(uint32_t *)(flags + 0x20) = new_flags & mask4;\n  *(uint32_t *)(flags + 0x04) = current_flags;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cec",
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "imported": false,
            "current_name": "set_flags_and_values_08005cec"
        },
        "FUN_0800886c": {
            "renaming": {
                "FUN_0800886c": "set_ptr_dat_value_to_22_0800886c",
                "PTR_DAT_08008878": "ptr_dat_value"
            },
            "code": "void set_ptr_dat_value_to_22_0800886c(void)\n{\n  int* PTR_DAT_08008878 = (int*) PTR_DAT_08008878;\n  *PTR_DAT_08008878 = 22;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800886c",
            "calling": [
                "FUN_08009fe8"
            ],
            "imported": false,
            "current_name": "set_ptr_dat_value_to_22_0800886c"
        },
        "FUN_08003748": {
            "renaming": {
                "FUN_08003748": "update_data_08003748",
                "PTR_DAT_08003758": "data_ptr",
                "PTR_DAT_0800375c": "byte_ptr"
            },
            "code": "void update_data_08003748(void)\n{\n    uint8_t* PTR_DAT_0800375c = PTR_DAT_0800375c;\n    uint32_t* uint_ptr = (uint32_t*) PTR_DAT_08003758;\n    uint32_t uint_val = *uint_ptr;\n    uint_val += (uint32_t)*PTR_DAT_0800375c;\n    *uint_ptr = uint_val;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003748",
            "calling": [
                "FUN_08007246"
            ],
            "imported": false,
            "current_name": "update_data_08003748"
        },
        "FUN_080040e8": {
            "renaming": {
                "FUN_080040e8": "calculate_flags_080040e8",
                "param_1": "flags",
                "param_2": "data",
                "puVar1": "flag_ptr",
                "uVar2": "curr_flag_val",
                "uVar3": "curr_flag_mask",
                "uVar4": "curr_data_mask",
                "uVar5": "curr_bit_pos",
                "uVar6": "flag_val",
                "uVar7": "data_val",
                "uVar9": "flag_val_2",
                "iVar8": "curr_bit_pos_mod_4",
                "iVar10": "curr_data_mask_2"
            },
            "code": "// Improved code starts here\n\nvoid calculate_flags_080040e8(uint *flags, uint *data)\n{\n  uint *flag_ptr;\n  uint curr_bit_pos;\n  uint curr_flag_val;\n  uint curr_data_val;\n  uint flag_val;\n  uint data_val;\n  int i;\n  uint curr_flag_mask;\n  uint curr_data_mask;\n  \n  flag_val = 0;\n  curr_bit_pos = 0;\n  for (i = 0; i <= 15; i++) {\n    if (curr_bit_pos > 15) {\n      return;\n    }\n    curr_flag_mask = 1 << (curr_bit_pos & 0xff);\n    curr_data_mask = *data & curr_flag_mask;\n    if (curr_flag_mask == curr_data_mask) {\n      curr_data_val = data[1];\n      if (curr_data_val == 0x12) {\n        flag_val = data[3] + 0xc;\n      }\n      else if (curr_data_val < 0x13) {\n        if (curr_data_val == 2) {\n          flag_val = data[3] + 8;\n        }\n        else if (curr_data_val < 3) {\n          if (curr_data_val == 0) goto LAB_0800423a;\n          if (curr_data_val == 1) {\n            flag_val = data[3];\n          }\n        }\n        else if (curr_data_val == 3) {\n          flag_val = 0;\n        }\n        else if (curr_data_val == 0x11) {\n          flag_val = data[3] + 4;\n        }\n      }\n      else {\n        if (curr_data_val != DAT_080042c8) {\n          if (DAT_080042c8 < curr_data_val) {\n            if (curr_data_val == DAT_080042cc) goto LAB_0800423a;\n            curr_flag_val = DAT_080042cc + 0x10000;\n            flag_ptr = DAT_080042cc;\n          }\n          else {\n            curr_flag_val = DAT_080042c8 - 0x100000;\n            flag_ptr = DAT_080042c8;\n          }\n          if ((curr_data_val != curr_flag_val) && (curr_data_val != flag_ptr - 0xf0000)) goto LAB_080040fe;\n        }\n      }\n      if (data[2] == 0) {\n        flag_val = 4;\n      }\n      else if (data[2] == 1) {\n        flags[4] = curr_flag_mask;\n        flag_val = 8;\n      }\n      else {\n        flags[5] = curr_flag_mask;\n        flag_val = 8;\n      }\n    }\n    curr_bit_pos = i;\n    flag_ptr = flags;\n    if (0xff < curr_data_mask) {\n      curr_bit_pos = i - 8;\n      flag_ptr = flags + 1;\n    }\n    *flag_ptr = *flag_ptr & ~(0xf << (curr_bit_pos << 2 & 0xff)) | flag_val << (curr_bit_pos << 2 & 0xff);\n    if ((data[1] & 0x10000000) != 0) {\n      *(uint *)(DAT_080042bc + 0x18) = *(uint *)(DAT_080042bc + 0x18) | 1;\n      curr_flag_mask = (curr_bit_pos & 3) << 2;\n      if (flags == DAT_080042d0) {\n        curr_data_mask = 0;\n      }\n      else if (flags == DAT_080042d0 + 0x100) {\n        curr_data_mask = 1;\n      }\n      else if (flags == DAT_080042d0 + 0x200) {\n        curr_data_mask = 2;\n      }\n      else if (flags == DAT_080042d0 + 0x300) {\n        curr_data_mask = 3;\n      }\n      else {\n        curr_data_mask = 4;\n      }\n      *(uint *)(DAT_080042c0 + ((curr_bit_pos >> 2) + 2) * 4) = *(uint *)(DAT_080042c0 + ((curr_bit_pos >> 2) + 2) * 4) & ~(0xf << curr_flag_mask) | curr_data_mask << curr_flag_mask;\n      if ((data[1] & 0x10000) == 0) {\n        *DAT_080042c4 = *DAT_080042c4 & ~curr_data_mask;\n      }\n      else {\n        *DAT_080042c4 = *DAT_080042c4 | curr_data_mask;\n      }\n      if ((data[1] & 0x20000) == 0) {\n        DAT_080042c4[1] = DAT_080042c4[1] & ~curr_data_mask;\n      }\n      else {\n        DAT_080042c4[1] = DAT_080042c4[1] | curr_data_mask;\n      }\n      if ((data[1] & 0x100000) == 0) {\n        DAT_080042c4[2] = DAT_080042c4[2] & ~curr_data_mask;\n      }\n      else {\n        DAT_080042c4[2] = DAT_080042c4[2] | curr_data_mask;\n      }\n      if ((data[1] & 0x200000) == 0) {\n        DAT_080042c4[3] = DAT_080042c4[3] & ~curr_data_mask;\n      }\n      else {\n        DAT_080042c4[3] = curr_data_mask | DAT_080042c4[3];\n      }\n    }\n  }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "FUN_08007258",
                "FUN_080077b0",
                "FUN_08006ca8",
                "FUN_08008078",
                "FUN_08006e68"
            ],
            "imported": false,
            "current_name": "calculate_flags_080040e8"
        },
        "FUN_080036d4": {
            "renaming": {
                "FUN_080036d4": "do_nothing_080036d4"
            },
            "code": "\nvoid do_nothing_080036d4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036d4",
            "calling": [
                "FUN_08003724"
            ],
            "imported": false,
            "current_name": "do_nothing_080036d4"
        },
        "FUN_0800288c": {
            "renaming": {
                "FUN_0800288c": "copy_data_to_buffer_0800288c",
                "param_1": "buffer_address",
                "param_2": "data",
                "puVar1": "buffer_address_2",
                "iVar2": "copy_status",
                "uVar3": "copy_result",
                "cVar4": "buffer_count",
                "uVar5": "buffer_size",
                "uVar6": "buffer_size_increment",
                "local_11": "data_size"
            },
            "code": "int copy_data_to_buffer_0800288c(int buffer_address, char data, int data_size) {\\n  int copy_status = 0;\\n  if (*buffer_address == \"\\0\") {\\n    copy_status = copy_data_to_buffer_0800288c_08007ede(buffer_address + 0x14, &data, data_size);\\n    if (copy_status == 0) {\\n      return 1;\\n    }\\n    else {\\n      return 0;\\n    }\\n  }\\n  else {\\n    uint buffer_size = (byte)*buffer_address + 1;\\n    if ((byte)*buffer_address_2 < buffer_size) {\\n      if (buffer_size < 0x20) {\\n        buffer_size = 0x20;\\n      }\\n      int new_buffer_address = allocate_and_copy_data_08009908(*(int *)PTR_DAT_08002914, buffer_size);\\n      *PTR_DAT_08002914 = new_buffer_address;\\n      if (new_buffer_address == 0) {\\n        return 0;\\n      }\\n      else {\\n        *buffer_address_2 = (char)buffer_size;\\n      }\\n    }\\n    if (*PTR_DAT_08002914 == 0) {\\n      *(int *)(buffer_address + 4) = 1;\\n      return 0;\\n    }\\n    else {\\n      *(char *)(*PTR_DAT_08002914 + (uint)(byte)*PTR_DAT_08002918) = data;\\n      char buffer_count = *buffer_address_2 + \"\\x01\";\\n      *buffer_address_2 = buffer_count;\\n      *buffer_address_3 = buffer_count;\\n      return 1;\\n    }\\n  }\\n}",
            "called": [
                "FUN_08007ede",
                "FUN_08009908"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800288c",
            "calling": [
                "FUN_08001bf8"
            ],
            "imported": false,
            "current_name": "copy_data_to_buffer_0800288c"
        },
        "FUN_0800010c": {
            "renaming": {
                "FUN_0800010c": "check_if_initialized_0800010c",
                "param_1": "param",
                "*PTR_DAT_08000124": "*PTR_INITIALIZED_FLAG",
                "DAT_08000128": "DAT_INITIALIZED_VALUE",
                "PTR_FUN_0800012c": "PTR_INITIALIZED_FUNCTION"
            },
            "code": "char check_if_initialized_0800010c(char *param){\\n\\tif (*PTR_DAT_08000124 == \"\\0\") {\\n\\t\\tif (DAT_08000128 != 0) {\\n\\t\\t\\tparam = PTR_FUN_0800012c;\\n\\t\\t}\\n\\t\\t*PTR_DAT_08000124 = 1;\\n\\t}\\n\\treturn param;\\n}",
            "called": [
                "FUN_0800a424"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800010c",
            "calling": [],
            "imported": false,
            "current_name": "check_if_initialized_0800010c"
        },
        "FUN_08002e26": {
            "renaming": {
                "FUN_08002e26": "set_param_value_08002e26",
                "param_1": "object_address",
                "param_2": "param_value",
                "set_value_to_pointer_08003154": "set_pointer_value",
                "execute_function_08002ddc": "execute_function",
                "encode_data_08002df6": "encode_data"
            },
            "code": "void set_param_value_08002e26(int object_address, undefined4 param_value) {\n  *(undefined4 *)(object_address + 0xc0) = param_value;\n  set_pointer_value(object_address + 0x40);\n  execute_function(object_address);\n  encode_data(object_address);\n  return;\n}",
            "called": [
                "FUN_08003154",
                "FUN_08002ddc",
                "FUN_08002df6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002e26",
            "calling": [
                "FUN_08003048"
            ],
            "imported": false,
            "current_name": "set_param_value_08002e26"
        },
        "FUN_080036d8": {
            "renaming": {
                "FUN_080036d8": "calculate_and_write_bits_to_memory_080036d8",
                "param_1": "input_number",
                "iVar1": "result",
                "calculate_param_minus_one_08003fd8": "calculate_param_minus_one",
                "PTR_DAT_0800371c": "dividend",
                "byte": "byte_value",
                "PTR_DAT_08003718": "divisor_denominator",
                "write_bits_to_memory_08003f30": "write_bits_to_memory",
                "PTR_DAT_08003720": "memory_pointer"
            },
            "code": "int calculate_and_write_bits_to_memory_080036d8(uint32_t input_number) {\n    uint32_t divisor = *(uint32_t*)PTR_DAT_0800371c / (1000 / (byte)*PTR_DAT_08003718);\n    int result = calculate_param_minus_one_08003fd8(divisor);\n    if (result != 0) {\n        return 1;\n    }\n    if (input_number > 0xf) {\n        return 1;\n    }\n    write_bits_to_memory_08003f30(0xffffffff, input_number, 0);\n    *(uint32_t*)PTR_DAT_08003720 = input_number;\n    return 0;\n}",
            "called": [
                "FUN_08003fd8",
                "FUN_08003f30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036d8",
            "calling": [
                "FUN_08003724",
                "FUN_080058d2"
            ],
            "imported": false,
            "current_name": "calculate_and_write_bits_to_memory_080036d8"
        },
        "FUN_08006e68": {
            "renaming": {
                "FUN_08006e68": "FUNC_08006e68"
            },
            "code": "\nvoid FUNC_08006e68(undefined4 param_1)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  undefined4 uVar3;\n  uint local_20;\n  undefined4 local_1c;\n  undefined4 local_18;\n  undefined4 local_14;\n  \n  puVar1 = PTR_DAT_08007100;\n  iVar2 = find_value_08007376((int)(char)*PTR_DAT_08007100,PTR_DAT_08007104);\n  set_flags_08007438(param_1);\n  uVar3 = set_flag_08006bb8((uint)((int)(char)*puVar1 << 0x18) >> 0x1c);\n  local_1c = 2;\n  local_18 = 0;\n  local_14 = 3;\n  *(uint *)(DAT_08007108 + 0x18) = *(uint *)(DAT_08007108 + 0x18) | 1;\n  switch((uint)(iVar2 << 0x11) >> 0x19) {\n  case 1:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000001;\n    break;\n  case 2:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffffe | 0x7000000;\n    break;\n  case 3:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000002;\n    break;\n  case 4:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffffd | 0x7000000;\n    break;\n  case 5:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000004;\n    break;\n  case 6:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffffb | 0x7000000;\n    break;\n  case 7:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000008;\n    break;\n  case 8:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffff7 | 0x7000000;\n    break;\n  case 9:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000030;\n    break;\n  case 10:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffffcf | 0x7000010;\n    break;\n  case 0xb:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffffcf | 0x7000000;\n    break;\n  case 0xc:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x70000c0;\n    break;\n  case 0xd:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffff3f | 0x7000040;\n    break;\n  case 0xe:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffff3f | 0x7000000;\n    break;\n  case 0xf:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000300;\n    break;\n  case 0x10:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffcff | 0x7000200;\n    break;\n  case 0x11:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffcff | 0x7000100;\n    break;\n  case 0x12:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffcff | 0x7000000;\n    break;\n  case 0x13:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000c00;\n    break;\n  case 0x14:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffff3ff | 0x7000800;\n    break;\n  case 0x15:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffff3ff | 0x7000000;\n    break;\n  case 0x16:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7001000;\n    break;\n  case 0x17:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffefff | 0x7000000;\n    break;\n  case 0x1b:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7008000;\n    break;\n  case 0x1c:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffff7fff | 0x7000000;\n    break;\n  case 0x21:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff;\n    break;\n  case 0x22:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff | 0x1000000;\n    break;\n  case 0x23:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff | 0x2000000;\n    break;\n  case 0x24:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff | 0x4000000;\n  }\n  local_20 = 1 << ((byte)*PTR_DAT_08007100 & 0xf) & 0xffff;\n  calculate_flags_080040e8(uVar3,&local_20);\n  return;\n}\n\n",
            "called": [
                "FUN_08007376",
                "FUN_080040e8",
                "FUN_08006bb8",
                "FUN_08007438"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006e68",
            "calling": [
                "FUN_08006092"
            ],
            "imported": false,
            "current_name": "FUNC_08006e68"
        },
        "FUN_080086e8": {
            "renaming": {
                "FUN_080086e8": "find_index_of_value_in_array_080086e8",
                "param_1": "value_to_find",
                "uVar1": "index"
            },
            "code": "uint find_index_of_value_in_array_080086e8(int value_to_find) {\n  uint index = 0;\n  if (value_to_find == 0) {\n    index = 5;\n  }\n  else {\n    while (index <= 4) {\n      if (value_to_find == *(int *)(PTR_DAT_08008708 + index * 4)) {\n        return index;\n      }\n      index++;\n    }\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080086e8",
            "calling": [
                "FUN_0800870c",
                "FUN_08008730"
            ],
            "imported": false,
            "current_name": "find_index_of_value_in_array_080086e8"
        },
        "FUN_0800a110": {
            "renaming": {
                "FUN_0800a110": "get_value_from_pointer_if_return_minus_one_0800a110",
                "param_1": "output_value_ptr",
                "param_2": "input_value",
                "puVar1": "pointer_to_data",
                "iVar2": "return_value"
            },
            "code": "void get_value_from_pointer_if_return_minus_one_0800a110(int *output_value_ptr, undefined4 input_value) {\n  undefined *pointer_to_data = PTR_DAT_0800a12c;\n  *(undefined4 *)PTR_DAT_0800a12c = 0;\n  int return_value = return_one_08008850(input_value);\n  if ((return_value == -1) && (*(int *)pointer_to_data != 0)) {\n    *output_value_ptr = *(int *)pointer_to_data;\n  }\n  return;\n}",
            "called": [
                "FUN_08008850"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a110",
            "calling": [
                "FUN_08009eac"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_if_return_minus_one_0800a110"
        },
        "FUN_08003b8c": {
            "renaming": {
                "FUN_08003b8c": "check_data_validity_08003b8c",
                "param_1": "data_ptr",
                "iVar1": "curr_data",
                "iVar2": "data",
                "get_data_from_pointer_08003760": "get_next_data_from_pointer",
                "PTR_08003760": "prev_data",
                "DAT_08003b84": "mask"
            },
            "code": "int check_data_validity_08003b8c(int *data_ptr) {\n  int data = *data_ptr;\n  if ((*(uint *)(data + 8) & 1) == 0) {\n    return 0;\n  }\n  *(uint *)(data + 8) &= 0xfffffffe;\n  int PTR_08003760 = get_data_from_pointer_08003760();\n  do {\n    if ((*(uint *)(*data_ptr + 8) & 1) == 0) {\n      return 0;\n    }\n    int curr_data = get_data_from_pointer_08003760();\n  } while ((uint)(curr_data - PTR_08003760) < 3);\n  data_ptr[10] |= 0x10;\n  data_ptr[0xb] |= 1;\n  return 1;\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003b8c",
            "calling": [
                "FUN_08003ce8",
                "FUN_08003de4",
                "FUN_08003e20",
                "FUN_08003bd8"
            ],
            "imported": false,
            "current_name": "check_data_validity_08003b8c"
        },
        "FUN_080035b8": {
            "renaming": {
                "FUN_080035b8": "initialize_and_write_data_080035b8",
                "local_54": "local_variable_array_1",
                "local_4c": "local_variable_3",
                "local_44": "local_variable_2",
                "local_40": "local_variable_array_2[1]",
                "local_3c": "local_variable_array_2[2]",
                "local_38": "local_variable_array_2[3]",
                "local_34": "local_variable_array_2[4]",
                "local_30": "local_variable_array_2[0]",
                "local_20": "local_variable_array_3[0]",
                "local_1c": "local_variable_array_2[0]",
                "local_14": "local_variable_array_2[1]",
                "local_10": "local_variable_array_2[2]",
                "local_c": "local_variable_1",
                "iVar1": "calculation_result",
                "perform_calculation_080058ac": "perform_calculation",
                "update_data_08005aa4": "update_data",
                "get_ptr_dat_value_08005a1c": "get_data_value_pointer",
                "calculate_param_minus_one_08003fd8": "calculate_param_minus_one",
                "set_flag_if_four_08004024": "set_flag_if_four",
                "write_bits_to_memory_08003f30": "write_bits_to_memory",
                "infinite_loop_080073e8": "infinite_loop"
            },
            "code": "void initialize_and_write_data_080035b8(void)\n{\n  int calculation_result;\n  uint data_value;\n  uint32_t local_variable_array_1 [2] = {2, 0};\n  uint32_t local_variable_array_2 [4] = {0x10, 2, 0, 0x400};\n  uint32_t local_variable_array_3 [1] = {2};\n  uint32_t local_variable_1 = 0x380000;\n  uint32_t local_variable_2 = 0xf;\n  uint32_t local_variable_3 = 0x8000;\n  calculation_result = perform_calculation(local_variable_array_2);\n  if (calculation_result != 0) {\n    infinite_loop(\"s__home_bo__arduino15_packages_STM_08003654\",0x95);\n  }\n  calculation_result = update_data(local_variable_array_1);\n  if (calculation_result != 0) {\n    infinite_loop(\"s__home_bo__arduino15_packages_STM_08003654\",0x9c);\n  }\n  data_value = get_data_value_pointer();\n  calculate_param_minus_one((uint)((uint64_t)0x08003650 * (uint64_t)data_value >> 0x26));\n  set_flag_if_four(4);\n  write_bits_to_memory(0xffffffff,0);\n  return;\n}",
            "called": [
                "FUN_08005460",
                "FUN_08003fd8",
                "FUN_08005a1c",
                "FUN_080058ac",
                "FUN_08004024",
                "FUN_08005aa4",
                "FUN_08003f30",
                "FUN_080073e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035b8",
            "calling": [
                "FUN_080072fa"
            ],
            "imported": false,
            "current_name": "initialize_and_write_data_080035b8"
        },
        "FUN_08001c18": {
            "renaming": {
                "FUN_08001c18": "process_i2c_data_08001c18",
                "param_1": "device_address",
                "param_2": "data_length",
                "param_3": "expected_length",
                "param_4": "error_message",
                "puVar1": "data_buffer",
                "uVar2": "byte_read",
                "iVar3": "actual_length",
                "iVar4": "data_length_diff",
                "bVar5": "has_data"
            },
            "code": "void process_i2c_data_08001c18(undefined4 device_address,uint data_length,int expected_length,undefined4 error_message)\n{\n  undefined *data_buffer;\n  undefined byte_read;\n  int actual_length;\n  bool has_data;\n  data_buffer = data_buffer_pointer;\n  if (data_length == 0xffffffff) {\n    data_length = 0;\n  }\n  else {\n    initialize_data_buffer(data_buffer_pointer,device_address);\n    copy_data_to_buffer(data_length & 0xff);\n    check_data(data_buffer,error_message);\n  }\n  data_buffer = data_buffer_pointer;\n  process_received_data(data_buffer_pointer,device_address,expected_length);\n  actual_length = calculate_data_length(data_buffer);\n  if (expected_length < actual_length) {\n    encode_data(error_message,PTR_s_I2C__Too_many_bytes_received_08001cc0);\n  }\n  else {\n    actual_length = calculate_data_length(data_buffer_pointer);\n    if (actual_length < expected_length) {\n      encode_data(error_message,PTR_s_I2C__Too_few_bytes_received_08001ccc);\n    }\n  }\n  data_buffer = data_buffer_pointer;\n  *data_buffer = (char)device_address;\n  data_buffer[1] = (char)data_length;\n  actual_length = 0;\n  while( true ) {\n    if (actual_length < expected_length) {\n      if (calculate_data_length(data_buffer) == 0) {\n        has_data = false;\n      }\n      else {\n        has_data = true;\n      }\n    }\n    else {\n      has_data = false;\n    }\n    if (!has_data) break;\n    byte_read = read_byte_from_memory();\n    data_buffer[actual_length + 2] = byte_read;\n    actual_length = actual_length + 1;\n  }\n  encode_data_with_offset(error_message,0x77,expected_length + 2U & 0xff,data_buffer);\n  return;\n}",
            "called": [
                "FUN_0800270c",
                "FUN_08001bf8",
                "FUN_08002f0a",
                "FUN_08002f14",
                "FUN_08001c08",
                "FUN_08002a58",
                "FUN_08002a30",
                "FUN_08002c14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c18",
            "calling": [
                "FUN_08001cd0",
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "process_i2c_data_08001c18"
        },
        "FUN_08006460": {
            "renaming": {
                "FUN_08006460": "clear_bits_at_offset_08006460",
                "param_1": "bits",
                "param_2": "offset",
                "puVar1": "bit_array"
            },
            "code": "uint32_t clear_bits_at_offset_08006460(uint32_t **bits, uint32_t offset) {\n    uint32_t *bit_array = *bits;\n    update_bits_at_offset(bit_array, offset, 0);\n    if (((bit_array[8] & 0x1111) == 0) && ((bit_array[8] & 0x444) == 0)) {\n        bit_array[17] &= 0xffff7fff;\n    }\n    if (((bit_array[8] & 0x1111) == 0) && ((bit_array[8] & 0x444) == 0)) {\n        *bit_array &= 0xfffffffe;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08006420"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006460",
            "calling": [
                "FUN_080071e4"
            ],
            "imported": false,
            "current_name": "clear_bits_at_offset_08006460"
        },
        "FUN_08004046": {
            "renaming": {
                "FUN_08004046": "do_nothing_function_08004046",
                "do_nothing_08004044": "do_nothing"
            },
            "code": "void do_nothing_function_08004046(void)\n{\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08004044"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004046",
            "calling": [
                "FUN_08007246"
            ],
            "imported": false,
            "current_name": "do_nothing_function_08004046"
        },
        "FUN_08008880": {
            "renaming": {
                "FUN_08008880": "decode_param_08008880_08008880",
                "param_1": "input_param",
                "bVar1": "is_valid_input",
                "cVar2": "decoded_char",
                "uVar3": "decoded_result",
                "uVar4": "shift_amount"
            },
            "code": "uint decode_param_08008880_08008880(uint input_param) {\n  bool is_valid_input;\n  char decoded_char;\n  uint decoded_result;\n  uint shift_amount;\n  \n  if (input_param < 0xe) {\n    if (input_param + 0x2e < 0x3c) {\n      is_valid_input = true;\n    }\n    else {\n      is_valid_input = false;\n    }\n  }\n  else {\n    is_valid_input = input_param < 0x3c;\n  }\n  \n  if (is_valid_input) {\n    if (input_param < 0xe) {\n      input_param = input_param + 0x2e;\n    }\n    decoded_char = PTR_DAT_080088d8[input_param];\n  }\n  else {\n    decoded_char = -1;\n  }\n  \n  if (decoded_char == -1) {\n    decoded_result = 0;\n  }\n  else {\n    decoded_result = decode_and_calculate_result_08006d80();\n    shift_amount = *(uint *)PTR_DAT_080088dc;\n    if (shift_amount != 0xc) {\n      if (shift_amount < 0xc) {\n        return decoded_result >> (0xc - shift_amount & 0xff);\n      }\n      return decoded_result << (shift_amount - 0xc & 0xff);\n    }\n  }\n  return decoded_result;\n}",
            "called": [
                "FUN_08006d80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008880",
            "calling": [
                "FUN_080022f8",
                "FUN_08000488"
            ],
            "imported": false,
            "current_name": "decode_param_08008880_08008880"
        },
        "FUN_08004044": {
            "renaming": {
                "FUN_08004044": "do_nothing_08004044"
            },
            "code": "\nvoid do_nothing_08004044(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004044",
            "calling": [
                "FUN_08004046"
            ],
            "imported": false,
            "current_name": "do_nothing_08004044"
        },
        "FUN_08002ed2": {
            "renaming": {
                "FUN_08002ed2": "process_input_from_code_08002ed2",
                "param_1": "input_param",
                "uVar1": "input_result"
            },
            "code": "void process_input_from_code_08002ed2(int input_param){\n  uint input_result = (**(code **)(**(int **)(input_param + 0xc0) + 0xc))();\n  if (input_result != 0xffffffff) {\n    process_input_08003474(input_param + 0x44,input_result & 0xff);\n  }\n  return;\n}",
            "called": [
                "FUN_08003474"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ed2",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "process_input_from_code_08002ed2"
        },
        "FUN_080073ae": {
            "renaming": {
                "FUN_080073ae": "compare_and_return_non_zero_080073ae",
                "param_1": "num1",
                "param_2": "num2"
            },
            "code": "int compare_and_return_non_zero_080073ae(int num1, int num2) {\n    if (num1 != num2) {\n        if (num1 == 0) {\n            return num2;\n        }\n        if (num2 == 0) {\n            return num1;\n        }\n        num1 = 0;\n    }\n    return num1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073ae",
            "calling": [
                "FUN_080077b0",
                "FUN_08008078"
            ],
            "imported": false,
            "current_name": "compare_and_return_non_zero_080073ae"
        },
        "FUN_08000488": {
            "renaming": {
                "FUN_08000488": "set_bit_08000488",
                "param_1": "bit_index",
                "param_2": "bit_value",
                "uVar1": "decoded_param",
                "PTR_DAT_080004c8": "bit_array_ptr",
                "PTR_DAT_080004cc": "flag_ptr",
                "PTR_DAT_080004d0": "data_ptr"
            },
            "code": "void set_bit_08000488(uint bit_index, int bit_value) {\\n  if (bit_index < 0xe) {\\n    if (bit_value == 0) {\\n      *PTR_DAT_080004c8 = *PTR_DAT_080004c8 & ~(1 << (bit_index & 0xff));\\n      return;\\n    }\\n    *PTR_DAT_080004c8 = 1 << (bit_index & 0xff) | *PTR_DAT_080004c8;\\n    if (*PTR_DAT_080004cc == \"\\0\") {\\n      uint decoded_param = decode_param_08008880_08008880();\\n      encode_data_08002ef2(PTR_DAT_080004d0, bit_index, decoded_param);\\n      return;\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08008880",
                "FUN_08002ef2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000488",
            "calling": [
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "set_bit_08000488"
        },
        "FUN_08003f0c": {
            "renaming": {
                "FUN_08003f0c": "update_data_08003f0c",
                "param_1": "input_value",
                "*(uint *)(DAT_08003f2c + 0xc)": "current_data",
                "param_1 & 7": "input_value_masked",
                "(param_1 & 7) << 8": "input_value_shifted",
                "*(uint *)(DAT_08003f2c + 0xc) & 0xf8ff": "current_data_masked",
                "0x5fa0000": "constant_value",
                "updated_data": "updated_data",
                "*data_ptr": "data_ptr"
            },
            "code": "void update_data_08003f0c(uint8_t input_value) {\n    uint32_t *data_ptr = (uint32_t *)(DAT_08003f2c + 0xc);\n    uint32_t *(uint *)(DAT_08003f2c + 0xc) = *data_ptr;\n    uint32_t updated_data = (input_value & 7) << 8 | (*(uint *)(DAT_08003f2c + 0xc) & 0xf8ff) | 0x5fa0000;\n    *data_ptr = updated_data;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f0c",
            "calling": [
                "FUN_08003724",
                "FUN_08008f0e"
            ],
            "imported": false,
            "current_name": "update_data_08003f0c"
        },
        "FUN_08008f1c": {
            "renaming": {
                "FUN_08008f1c": "game_initialization_loop_08008f1c",
                "DAT_08008f38": "data_available",
                "do_nothing_08008f0c": "do_nothing",
                "initialize_game_08001b48": "initialize_game",
                "decode_and_process_i2c_data_080022f8": "decode_and_process_i2c_data",
                "calculate_value_if_not_zero_08008bf4": "calculate_value_if_not_zero"
            },
            "code": "void game_initialization_loop_08008f1c(void)\n{\n  do_nothing_08008f0c();\n  initialize_game();\n  do {\n    do {\n      decode_and_process_i2c_data();\n    } while (DAT_08008f38 == 0);\n    calculate_value_if_not_zero_08008bf4();\n  } while(true);\n}",
            "called": [
                "FUN_08008bf4",
                "FUN_08001b48",
                "FUN_08008f0c",
                "FUN_080022f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f1c",
            "calling": [
                "FUN_08003658"
            ],
            "imported": false,
            "current_name": "game_initialization_loop_08008f1c"
        },
        "FUN_080058ac": {
            "renaming": {
                "FUN_080058ac": "perform_calculation_080058ac",
                "param_1": "memory",
                "param_2": "input_size",
                "puVar1": "memory_ptr",
                "iVar2": "time_start",
                "iVar3": "time_elapsed",
                "uVar4": "result",
                "DAT_08005a0c": "memory_ptr",
                "DAT_08005a10": "memory",
                "PTR_DAT_08005a18": "result_ptr",
                "PTR_DAT_08005a14": "result_shift",
                "get_data_from_pointer_08003760": "get_current_time",
                "calculate_result_08005840": "calculate_result",
                "calculate_and_write_bits_to_memory_080036d8": "write_bits_to_memory"
            },
            "code": "uint32_t perform_calculation_080058ac(uint32_t *DAT_08005a10, uint32_t input_size)\n{\n    uint32_t *DAT_08005a0c = DAT_08005a0c;\n    uint32_t result = 0;\n    uint32_t time_limit = 5000;\n    \n    if (((*DAT_08005a0c & 7) < input_size) &&\n        (*DAT_08005a0c = *DAT_08005a0c & 0xfffffff8 | input_size, input_size != (*DAT_08005a0c & 7))) {\n        return 1;\n    }\n    \n    if ((*DAT_08005a10 & 2) != 0) {\n        DAT_08005a10[1] = DAT_08005a10[1] & 0xffffff0f | DAT_08005a10[2];\n    }\n    \n    if ((*DAT_08005a10 & 1) != 0) {\n        uint32_t input_type = DAT_08005a10[1];\n        if (input_type == 1) {\n            if ((*DAT_08005a10 & 0x20000) == 0) {\n                return 1;\n            }\n        }\n        else if ((input_type != 2) && ((*DAT_08005a10 & 2) == 0)) {\n            return 1;\n        }\n        \n        DAT_08005a10[1] = input_type | DAT_08005a10[1] & 0xfffffffc;\n        uint32_t time_start = get_data_from_pointer_08003760();\n        \n        while (true) {\n            uint32_t current_state = DAT_08005a10[1] & 0xc;\n            if (input_type == 1 && current_state == 4) {\n                break;\n            }\n            else if (input_type == 2 && current_state == 8) {\n                break;\n            }\n            else if (input_type != 1 && input_type != 2 && current_state == 0) {\n                break;\n            }\n            uint32_t time_elapsed = get_data_from_pointer_08003760() - time_start;\n            if (time_elapsed > time_limit) {\n                return 3;\n            }\n        }\n    }\n    \n    DAT_08005a0c = DAT_08005a0c;\n    if ((input_size < (*DAT_08005a0c & 7)) &&\n        (*DAT_08005a0c = *DAT_08005a0c & 0xfffffff8 | input_size, input_size != (*DAT_08005a0c & 7))) {\n        return 1;\n    }\n    \n    if ((*DAT_08005a10 & 4) != 0) {\n        DAT_08005a10[1] = DAT_08005a10[1] & 0xfffff8ff | DAT_08005a10[3];\n    }\n    \n    if ((*DAT_08005a10 & 8) != 0) {\n        DAT_08005a10[1] = DAT_08005a10[1] & 0xffffc7ff | DAT_08005a10[4] << 3;\n    }\n    \n    result = calculate_result_08005840();\n    *(uint32_t *)PTR_DAT_08005a18 = result >> PTR_DAT_08005a14[(DAT_08005a10[1] << 0x18) >> 0x1c];\n    calculate_and_write_bits_to_DAT_08005a10_080036d8(0xf);\n    return 0;\n}",
            "called": [
                "FUN_080058d2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058ac",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "perform_calculation_080058ac"
        },
        "FUN_08006bb8": {
            "renaming": {
                "FUN_08006bb8": "set_flag_08006bb8",
                "param_1": "flag",
                "DAT_08006c48": "data_ptr",
                "DAT_08006c4c": "return_val_0",
                "DAT_08006c50": "return_val_1",
                "DAT_08006c54": "return_val_2",
                "DAT_08006c58": "return_val_3",
                "DAT_08006c5c": "return_val_4"
            },
            "code": "uint32_t set_flag_08006bb8(uint32_t flag) {\n    uint32_t* DAT_08006c48 = (uint32_t*)DAT_08006c48;\n    switch(flag) {\n        case 0:\n            DAT_08006c48[0x6] |= 0x4;\n            return DAT_08006c4c;\n        case 1:\n            DAT_08006c48[0x6] |= 0x8;\n            return DAT_08006c50;\n        case 2:\n            DAT_08006c48[0x6] |= 0x10;\n            return DAT_08006c54;\n        case 3:\n            DAT_08006c48[0x6] |= 0x20;\n            return DAT_08006c58;\n        case 4:\n            DAT_08006c48[0x6] |= 0x40;\n            return DAT_08006c5c;\n        default:\n            return 0;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006bb8",
            "calling": [
                "FUN_08007258",
                "FUN_080077b0",
                "FUN_08006ca8",
                "FUN_08008078",
                "FUN_08006e68"
            ],
            "imported": false,
            "current_name": "set_flag_08006bb8"
        },
        "FUN_08007438": {
            "renaming": {
                "FUN_08007438": "set_flags_08007438",
                "param_1": "flag_ptr",
                "*param_1": "flag_value",
                "DAT_080074d0": "original_flag_value",
                "PTR_DAT_080074dc": "original_ptr_value",
                "_DAT_4002101c": "_second_flag_value",
                "DAT_080074d4": "third_flag_value",
                "DAT_080074d8": "fourth_flag_value"
            },
            "code": "void set_flags_08007438(int *flag_ptr)\n{\n    int flag_value = *flag_ptr;\n    if (flag_value == DAT_080074d0)\n    {\n        *(uint *)(DAT_080074d0 + 0xe418) |= 0x800;\n        *(int **)PTR_DAT_080074dc = flag_ptr;\n    }\n    if (flag_value == second_flag_value)\n    {\n        *_DAT_4002101c |= 1;\n        *(int **)(PTR_DAT_080074dc + 4) = flag_ptr;\n    }\n    if (flag_value == DAT_080074d4)\n    {\n        *(uint *)(DAT_080074d0 + 0x20c1c) |= 2;\n        *(int **)(PTR_DAT_080074dc + 8) = flag_ptr;\n    }\n    if (flag_value == DAT_080074d8)\n    {\n        *(uint *)(DAT_080074d0 + 0x2081c) |= 4;\n        *(int **)(PTR_DAT_080074dc + 0xc) = flag_ptr;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007438",
            "calling": [
                "FUN_08006e68",
                "FUN_08007708"
            ],
            "imported": false,
            "current_name": "set_flags_08007438"
        },
        "FUN_08004aec": {
            "renaming": {
                "FUN_08004aec": "execute_command_08004aec",
                "param_1": "param_list",
                "param_1[0xb]": "command_type",
                "param_1[0xc]": "command_value",
                "(int)param_1 + 0x3d": "command_char",
                "DAT_08004b7c": "PTR_DAT_08004b7c"
            },
            "code": "int execute_command_08004aec(uint **param_list)\n{\n    uint *command_type = param_list[0xb];\n    char *command_char = (char *)param_list + 0x3d;\n\n    if ((*command_type == (uint *)0x4 || *command_type == (uint *)0x8) && *command_char == '(')\n    {\n        *command_type = DAT_08004b7c;\n        (*param_list)[1] &= 0xfffff8ff;\n        (*param_list)[5] = 0xfffffbff;\n        **param_list &= 0xfffffbff;\n        param_list[0xc] = (uint *)0x0;\n        *command_char = 0x20;\n        *(command_char + 1) = 0;\n        execute_command_08004aec_08007ff0();\n    }\n    else if (*command_char == '!')\n    {\n        *command_type = DAT_08004b7c;\n        param_list[0xc] = (uint *)0x21;\n        *command_char = 0x20;\n        *(command_char + 1) = 0;\n        (*param_list)[1] &= 0xfffff8ff;\n        (*param_list)[5] = 0xfffffbff;\n        **param_list &= 0xfffffbff;\n        do_nothing_08004a22();\n    }\n    else\n    {\n        (*param_list)[5] = 0xfffffbff;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08007ff0",
                "FUN_08004a22"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004aec",
            "calling": [
                "FUN_080052f0"
            ],
            "imported": false,
            "current_name": "execute_command_08004aec"
        },
        "FUN_0800887c": {
            "renaming": {
                "FUN_0800887c": "return_one_0800887c"
            },
            "code": "int return_one_0800887c(void)\n{\n  int result = 1;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800887c",
            "calling": [
                "thunk_FUN_0800887c"
            ],
            "imported": false,
            "current_name": "return_one_0800887c"
        },
        "FUN_08004728": {
            "renaming": {
                "FUN_08004728": "process_params_08004728",
                "param_1": "params",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "uVar1": "result",
                "puVar2": "current_param",
                "local_c": "loop_counter"
            },
            "code": "uint32_t process_params_08004728(uint32_t **params, uint32_t *param1, uint32_t *param2, uint16_t param3)\n{\n    uint32_t result;\n    uint32_t *current_param;\n    int loop_counter;\n    \n    if ((*params)[0x3d] == ' ')\n    {\n        loop_counter = (uint32_t)(((uint64_t)DAT_080047ec * (uint64_t)((*params)[0x2 >> 3])) >> 0x28) * 0x19;\n        do\n        {\n            if (loop_counter == 0)\n            {\n                params[0xc] = (uint32_t *)0x0;\n                (*params)[0x3d] = 0x20;\n                params[0xf] = 0;\n                return 3;\n            }\n            current_param = *params;\n            loop_counter--;\n        } while ((current_param[6] & 2) != 0);\n        if ((*params)[0xf] == 0x01)\n        {\n            result = 2;\n        }\n        else\n        {\n            params[0xf] = 1;\n            if ((*current_param & 1) == 0)\n            {\n                *current_param = *current_param | 1;\n            }\n            **params = **params & 0xfffff7ff;\n            (*params)[0x3d] = 0x21;\n            (*params)[0x3e] = 0x10;\n            result = 0;\n            params[0x10] = (uint32_t *)0x0;\n            params[9] = param2;\n            (*params)[0x2a >> 1] = param3;\n            params[0xb] = DAT_080047f0;\n            params[10] = (*params)[0x2a >> 1];\n            params[0x11] = param1;\n            **params = **params | 0x100;\n            params[0xf] = 0;\n            (*params)[1] = (*params)[1] | 0x700;\n        }\n    }\n    else\n    {\n        result = 2;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004728",
            "calling": [
                "FUN_08007e74"
            ],
            "imported": false,
            "current_name": "process_params_08004728"
        },
        "FUN_08007ede": {
            "renaming": {
                "FUN_08007ede": "copy_data_to_buffer_08007ede",
                "param_1": "buffer_addr",
                "param_2": "data_addr",
                "param_3": "data_size",
                "uVar1": "i"
            },
            "code": "int copy_data_to_buffer_08007ede(int buffer_addr, int data_addr, uint data_size)\n{\n  uint i;\n  if (data_size > 0x20) {\n    return 2;\n  }\n  for (i = 0; i < data_size; i++) {\n    *(char *)(buffer_addr + i + 0x68) = *(char *)(data_addr + i);\n    *(char *)(buffer_addr + 0x88) = *(char *)(buffer_addr + 0x88) + '\\x01';\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ede",
            "calling": [
                "FUN_080027f0",
                "FUN_0800288c"
            ],
            "imported": false,
            "current_name": "copy_data_to_buffer_08007ede"
        },
        "FUN_0800863c": {
            "renaming": {
                "FUN_0800863c": "validate_combination_0800863c",
                "param_1": "combination_index",
                "param_2": "value",
                "param_3": "bit_position",
                "param_4": "bit_count",
                "iVar1": "is_valid",
                "uVar2": "index",
                "PTR_DAT_08008688": "combination_indexes",
                "PTR_DAT_0800868c": "values",
                "write_bits_to_memory_08003f30": "write_bits_to_memory",
                "set_bit_at_index_08003f94": "set_bit_at_index",
                "check_space_after_string_080068d6": "check_space_after_string",
                "*(byte *)(param_1 + 0x44)": "*(byte *)(combination_index + 0x44)",
                "*(undefined4 *)(PTR_DAT_08008688 + uVar2 * 4)": "*(int *)(combination_indexes + index * 4)",
                "*(int *)(PTR_DAT_0800868c + uVar2 * 4)": "*(int *)(values + index * 4)",
                "*(char *)(param_1 + 0x5a)": "*(char *)(combination_index + 0x5a)",
                "*(undefined4 *)(PTR_DAT_08008690 + (uint)*(byte *)(param_1 + 0x44) * 4)": "*(int *)(bit_counts + index * 4)",
                "param_1 + 0x45": "combination_index + 0x45"
            },
            "code": "void validate_combination_0800863c(int combination_index, int value, int bit_position, int bit_count) {\n  int is_valid = is_combination_valid();\n  if (is_valid == 0) {\n    uint index = (uint)*(byte *)(combination_index + 0x44);\n    *(undefined4 *)(PTR_DAT_08008688 + uVar2 * 4) = combination_index;\n    *(int *)(PTR_DAT_0800868c + uVar2 * 4) = value;\n    write_bits_to_memory((int)*(char *)(combination_index + 0x5a),0,1,index,bit_count);\n    set_bit_at_index((int)*(char *)(combination_index + 0x5a));\n    check_space_after_string(*(undefined4 *)(PTR_DAT_08008690 + (uint)*(byte *)(param_1 + 0x44) * 4), combination_index + 0x45, 1);\n  }\n}",
            "called": [
                "FUN_080068d6",
                "FUN_080085b8",
                "FUN_08003f30",
                "FUN_08003f94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800863c",
            "calling": [
                "FUN_08008c44"
            ],
            "imported": false,
            "current_name": "validate_combination_0800863c"
        },
        "thunk_FUN_0800887c": {
            "renaming": {
                "thunk_FUN_0800887c": "return_one_thunk_0800887c"
            },
            "code": "int return_one_thunk_0800887c(void)\n{\n  int result = 1;\n  return result;\n}",
            "called": [
                "FUN_0800887c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a01c",
            "calling": [
                "FUN_08009fe8"
            ],
            "imported": false,
            "current_name": "return_one_thunk_0800887c"
        },
        "FUN_080074e0": {
            "renaming": {
                "FUN_080074e0": "update_flags_080074e0",
                "*param_1": "*flag_value",
                "DAT_08007534": "FLAG_A",
                "DAT_08007538": "FLAG_C",
                "DAT_0800753c": "FLAG_D",
                "0x40000000": "FLAG_B",
                "DAT_08007540": "FLAG_PTR"
            },
            "code": "void update_flags_080074e0(int *flag_value)\n{\n  if (*flag_value == DAT_08007534)\n  {\n    *(uint *)(DAT_08007540 + 0x18) &= 0xfffff7ff;\n  }\n  if (*flag_value == FLAG_B)\n  {\n    *(uint *)(DAT_08007540 + 0x1c) &= 0xfffffffe;\n  }\n  if (*flag_value == DAT_08007538)\n  {\n    *(uint *)(DAT_08007540 + 0x1c) &= 0xfffffffd;\n  }\n  if (*flag_value == DAT_0800753c)\n  {\n    *(uint *)(DAT_08007540 + 0x1c) &= 0xfffffffb;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080074e0",
            "calling": [
                "FUN_08007110",
                "FUN_08007710"
            ],
            "imported": false,
            "current_name": "update_flags_080074e0"
        },
        "FUN_080073c0": {
            "renaming": {
                "FUN_080073c0": "execute_code_if_pointer_not_null_080073c0",
                "PTR_DAT_080073d0": "function_pointer_address",
                "PTR_DAT_080073d4": "function_parameter_address",
                "code": "function_pointer",
                "undefined4": "function_parameter"
            },
            "code": "void execute_code_if_pointer_not_null_080073c0(void)\n{\n    code* function_pointer = *(code **)PTR_DAT_080073d0;\n    if (function_pointer != NULL) {\n        (*function_pointer)(*(undefined4 *)PTR_DAT_080073d4);\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073c0",
            "calling": [
                "FUN_08005cb4"
            ],
            "imported": false,
            "current_name": "execute_code_if_pointer_not_null_080073c0"
        },
        "FUN_080084b0": {
            "renaming": {
                "FUN_080084b0": "set_values_from_character_080084b0",
                "cVar1": "character_value",
                "puVar2": "data_pointer",
                "uVar3": "character_index",
                "iVar4": "index",
                "uVar5": "value",
                "PTR_DAT_080084f0": "character_array",
                "PTR_DAT_080084f4": "character_array",
                "PTR_DAT_080084f8": "character_array",
                "PTR_DAT_080084fc": "data_array",
                "FUNC_08008078": "update_data"
            },
            "code": "void set_values_from_character_080084b0(void)\n{\n  char character_value = PTR_DAT_080084f0[1];\n  int index = find_index_if_not_negative(character_value, PTR_DAT_080084f0);\n  if (index != 0) {\n    int value = find_index_if_not_negative(character_value, PTR_DAT_080084f0);\n    int character_index = find_character_index(value, PTR_DAT_080084f0);\n    undefined *data_pointer = PTR_DAT_080084fc;\n    PTR_DAT_080084fc[0x59] = character_index;\n    PTR_DAT_080084fc[0x58] = character_value;\n    *(undefined4 *)(PTR_DAT_080084fc + 0x48) = 0x2580;\n    *(undefined4 *)(PTR_DAT_080084fc + 0x54) = 0;\n    *(undefined4 *)(PTR_DAT_080084fc + 0x4c) = 0;\n    *(undefined4 *)(PTR_DAT_080084fc + 0x50) = 0;\n    update_data(data_pointer);\n  }\n  return;\n}",
            "called": [
                "FUN_0800734a",
                "FUN_08007320",
                "FUN_08008078"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080084b0",
            "calling": [
                "FUN_08008500"
            ],
            "imported": false,
            "current_name": "set_values_from_character_080084b0"
        },
        "FUN_08004050": {
            "renaming": {
                "FUN_08004050": "get_value_from_param_08004050",
                "param_1": "param",
                "uVar1": "value",
                "puVar2": "param_value"
            },
            "code": "uint get_value_from_param_08004050(uint **param)\n{\n    uint value;\n    if (*(char *)((int)param + 0x21) != '\\x02') {\n        param[0xe] = (uint *)0x4;\n        return 1;\n    }\n    **param &= 0xfffffff1;\n    **param &= 0xfffffffe;\n    uint *param_value = *param;\n    if (param_value == PTR_DAT_080040e0) {\n        value = 1;\n    }\n    else if (param_value == PTR_DAT_080040e0 + 5) {\n        value = 0x10;\n    }\n    else if (param_value == PTR_DAT_080040e0 + 10) {\n        value = 0x100;\n    }\n    else if (param_value == PTR_DAT_080040e0 + 0xf) {\n        value = 0x1000;\n    }\n    else if (param_value == PTR_DAT_080040e0 + 0x14) {\n        value = 0x10000;\n    }\n    else if (param_value == PTR_DAT_080040e0 + 0x19) {\n        value = 0x100000;\n    }\n    else {\n        value = 0x1000000;\n    }\n    *(uint *)(PTR_DAT_080040e4 + 4) = value;\n    *(char *)((int)param + 0x21) = 1;\n    *(uint *)(param + 8) = 0;\n    if (param[0xd] != PTR_0x0) {\n        (*(code *)param[0xd])();\n        return 0;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004050",
            "calling": [
                "FUN_08004f3c",
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "get_value_from_param_08004050"
        },
        "FUN_08008e14": {
            "renaming": {
                "FUN_08008e14": "set_values_for_param_08008e14",
                "param_1": "parameter1",
                "param_2": "parameter2",
                "PTR_DAT_08008e3c": "parameter_pointer_08008e3c"
            },
            "code": "void set_values_for_param_08008e14(int parameter1, int parameter2)\n{\n  if ((parameter1 == 1) && (parameter2 == 0xffff)) {\n    set_values_for_param_08008e14_08008df8(PTR_DAT_08008e3c, 0, 0, 0, 0);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_08008df8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e14",
            "calling": [],
            "imported": false,
            "current_name": "set_values_for_param_08008e14"
        },
        "FUN_08005a28": {
            "renaming": {
                "FUN_08005a28": "get_shifted_value_from_ptr_dat_08005a28",
                "uVar1": "value",
                "get_ptr_dat_value_08005a1c": "get_ptr_dat_value",
                "PTR_DAT_08005a44": "shift_values",
                "DAT_08005a40": "data"
            },
            "code": "uint get_shifted_value_from_ptr_dat_08005a28(void)\n{\n  uint value = get_ptr_dat_value();\n  uint index = (*(int *)(DAT_08005a40 + 4) << 0x15) >> 0x1d;\n  uint shifted_value = PTR_DAT_08005a44[index];\n  return value >> shifted_value;\n}",
            "called": [
                "FUN_08005a1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a28",
            "calling": [
                "FUN_08006538",
                "FUN_080045c0",
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "get_shifted_value_from_ptr_dat_08005a28"
        },
        "FUN_080095a8": {
            "renaming": {
                "FUN_080095a8": "encode_data_080095a8",
                "param_1": "data",
                "param_2": "data_info",
                "param_3": "encoded_data_len",
                "param_4": "padding_char",
                "param_5": "encoder_fn",
                "iVar1": "result",
                "uVar2": "padding",
                "uVar3": "padding_char_len",
                "bVar4": "no_padding"
            },
            "code": "uint32_t encode_data_080095a8(uint32_t data, uint32_t* data_info, uint32_t* encoded_data_len, uint32_t padding_char, code* encoder_fn) {\n    uint32_t data_len = data_info[4];\n    if (data_len < data_info[2]) {\n        data_len = data_info[2];\n    }\n    *encoded_data_len = data_len;\n    if (*(char*)((int)data_info + 0x43) != '\\0') {\n        *encoded_data_len = data_len + 1;\n    }\n    if ((int)(*data_info << 0x1a) < 0) {\n        *encoded_data_len += 2;\n    }\n    uint32_t padding = *data_info & 6;\n    if (padding == 0) {\n        for (; (int)padding < (int)(data_info[3] - *encoded_data_len); padding++) {\n            int result = (*encoder_fn)(data, padding_char, (int)data_info + 0x19, 1);\n            if (result == -1) {\n                return 0xffffffff;\n            }\n        }\n    }\n    uint32_t padding_char_len = (uint32_t)*(byte*)((int)data_info + 0x43);\n    if (padding_char_len != 0) {\n        padding_char_len = 1;\n    }\n    uint32_t padding_char_index = padding_char_len;\n    if ((int)(*data_info << 0x1a) < 0) {\n        *(undefined*)((int)data_info + padding_char_len + 0x43) = 0x30;\n        padding_char_index += 2;\n        *(undefined*)((int)data_info + padding_char_len + 0x44) = *(undefined*)((int)data_info + 0x45);\n    }\n    int result = (*encoder_fn)(data, padding_char, (int)data_info + 0x43, padding_char_index);\n    if (result != -1) {\n        uint32_t padding_len = data_info[3];\n        bool no_padding = (*data_info & 6) != 4;\n        if (no_padding) {\n            padding_len = 0;\n        }\n        uint32_t padding_count = 0;\n        if (!no_padding) {\n            padding_len -= *encoded_data_len;\n        }\n        if (!no_padding) {\n            padding_len &= ~((int)padding_len >> 0x1f);\n        }\n        if (data_info[4] < data_info[2]) {\n            padding_len += (data_info[2] - data_info[4]);\n        }\n        while (true) {\n            if (padding_len == padding_count) {\n                return 0;\n            }\n            result = (*encoder_fn)(data, padding_char, (int)data_info + 0x1a, 1);\n            if (result == -1) {\n                break;\n            }\n            padding_count++;\n        }\n    }\n    return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080095a8",
            "calling": [
                "FUN_08009698"
            ],
            "imported": false,
            "current_name": "encode_data_080095a8"
        },
        "FUN_08003002": {
            "renaming": {
                "FUN_08003002": "process_data_08003002",
                "param_1": "data",
                "decode_data_08008990": "decode_data",
                "process_data_from_bit_08002fca": "process_bit_data",
                "do_nothing_08008ac4": "do_nothing"
            },
            "code": "void process_data_08003002(int data) {\\n  char* flag_ptr = (char*)(data + 0x1f8);\\n  if (*flag_ptr != \"\\0\") {\\n    return;\\n  }\\n  decode_data(0xd, 1);\\n  process_bit_data(data, 0xd, 2, 0x28, 0xd2);\\n  do_nothing(0xfa);\\n  process_bit_data(data, 0xd, 5, 0x28, 0xd2);\\n  do_nothing(0x7d);\\n  return;\\n}",
            "called": [
                "FUN_08008ac4",
                "FUN_08008990",
                "FUN_08002fca"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003002",
            "calling": [
                "FUN_08003048"
            ],
            "imported": false,
            "current_name": "process_data_08003002"
        },
        "FUN_08008ac4": {
            "renaming": {
                "FUN_08008ac4": "do_nothing_08008ac4"
            },
            "code": "\nvoid do_nothing_08008ac4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ac4",
            "calling": [
                "FUN_08003002",
                "FUN_08002fca"
            ],
            "imported": false,
            "current_name": "do_nothing_08008ac4"
        },
        "FUN_08003bd8": {
            "renaming": {
                "FUN_08003bd8": "validate_data_08003bd8",
                "param_1": "data",
                "iVar1": "is_valid",
                "uVar2": "flags",
                "uVar3": "mask"
            },
            "code": "int validate_data_08003bd8(int *data) {\n  int is_valid;\n  uint flags;\n  uint mask;\n\n  if (data == NULL) {\n    return 1;\n  }\n\n  if (data[10] == 0) {\n    data[11] = 0;\n    *(undefined *)(data + 9) = 0;\n    set_flags();\n  }\n\n  is_valid = check_data_validity(data);\n  mask = data[10] & 0x10;\n\n  if (mask == 0 && is_valid == 0) {\n    data[10] = data[10] & 0xffffeefdU | 2;\n    flags = data[1] | data[7] | data[3] << 1;\n\n    if (data[2] == 0x100 || data[2] == 1) {\n      mask = 0x100;\n    }\n    else {\n      mask = 0;\n    }\n\n    if (data[5] == 1) {\n      if (data[3] == 0) {\n        mask = mask | (data[6] + -1) * 0x2000 | 0x800;\n      }\n      else {\n        data[10] = data[10] | 0x20;\n        data[11] = data[11] | 1;\n      }\n    }\n\n    *(uint *)(*data + 4) = mask | *(uint *)(*data + 4) & 0xffff16ff;\n    *(uint *)(*data + 8) = PTR_DAT_08003ce0 & *(uint *)(*data + 8) | flags;\n\n    if (data[2] == 0x100 || data[2] == 1) {\n      mask = (data[4] + -1) * 0x100000;\n    }\n    else {\n      mask = 0;\n    }\n\n    *(uint *)(*data + 0x2c) = mask | *(uint *)(*data + 0x2c) & 0xff0fffff;\n\n    if (flags != (PTR_DAT_08003ce4 & *(uint *)(*data + 8))) {\n      data[10] = data[10] & 0xffffffedU | 0x10;\n      data[11] = data[11] | 1;\n      return 1;\n    }\n\n    data[11] = 0;\n    data[10] = data[10] & 0xfffffffcU | 1;\n    return 0;\n  }\n\n  data[10] = data[10] | 0x10;\n  return 1;\n}",
            "called": [
                "FUN_08006ca8",
                "FUN_08003b8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003bd8",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "validate_data_08003bd8"
        },
        "FUN_08009d50": {
            "renaming": {
                "FUN_08009d50": "initialize_arrays_and_data_08009d50",
                "param_1": "array_data",
                "uVar1": "allocated_array",
                "iVar2": "first_ptr",
                "bVar3": "is_param_1_equal_to_first_ptr",
                "PTR_PTR_DAT_08009da8": "pointer_to_first_ptr",
                "PTR_LAB_08009cd0_1_08009dac": "pointer_to_label"
            },
            "code": "void initialize_arrays_and_data_08009d50(int param_1)\n{\n  if (*(int *)(param_1 + 0x18) == 0) {\n    *(int *)(param_1 + 0x18) = 1;\n    *(int *)(param_1 + 0x48) = 0;\n    *(int *)(param_1 + 0x4c) = 0;\n    *(int *)(param_1 + 0x50) = 0;\n    bool is_param_1_equal_to_first_ptr = param_1 == *PTR_PTR_DAT_08009da8;\n    if (is_param_1_equal_to_first_ptr) {\n      *(int *)(param_1 + 0x18) = 1;\n    }\n    void* arr1 = allocate_and_initialize_array_08009db0();\n    void* arr2 = allocate_and_initialize_array_08009db0(param_1);\n    void* arr3 = allocate_and_initialize_array_08009db0(param_1);\n    initialize_data_08009cdc(arr1, 4, 0);\n    initialize_data_08009cdc(arr2, 9, 1);\n    initialize_data_08009cdc(arr3, 0x12, 2);\n  }\n  return;\n}",
            "called": [
                "FUN_08009cdc",
                "FUN_08009db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009d50",
            "calling": [
                "FUN_0800937c",
                "FUN_080098d8",
                "FUN_08009c7c",
                "FUN_0800932c",
                "FUN_08009a80",
                "FUN_08009db0"
            ],
            "imported": false,
            "current_name": "initialize_arrays_and_data_08009d50"
        },
        "FUN_08003366": {
            "renaming": {
                "FUN_08003366": "update_params_08003366",
                "param_1": "obj_address",
                "param_2": "param_value",
                "param_3": "param1",
                "param_4": "param2"
            },
            "code": "void update_params_08003366(int obj_address, int param_value, undefined4 param1, undefined4 param2)\n{\n  if (param_value == 0x71) {\n    *(undefined4 *)(obj_address + 0x68) = param1;\n    *(undefined4 *)(obj_address + 0x40) = param2;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003366",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "update_params_08003366"
        },
        "FUN_080091b0": {
            "renaming": {
                "FUN_080091b0": "copy_data_to_destination_080091b0",
                "param_1": "destination_offset",
                "param_2": "source_data",
                "param_3": "data_length",
                "puVar1": "destination_data_ptr",
                "puVar2": "source_data_ptr"
            },
            "code": "void copy_data_to_destination_080091b0(int destination_offset, undefined *source_data, int data_length) {\n  undefined *destination_data_ptr;\n  undefined *source_data_ptr;\n  destination_data_ptr = (undefined *)(destination_offset + -1);\n  source_data_ptr = source_data + data_length;\n  for (; source_data != source_data_ptr; source_data++) {\n    destination_data_ptr++;\n    *destination_data_ptr = *source_data;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091b0",
            "calling": [
                "FUN_08009908",
                "FUN_080027f0"
            ],
            "imported": false,
            "current_name": "copy_data_to_destination_080091b0"
        },
        "FUN_08009108": {
            "renaming": {
                "FUN_08009108": "calculate_result_08009108",
                "param_1": "value1",
                "param_2": "value2",
                "DAT_08009120": "global_variable"
            },
            "code": "long long calculate_result_08009108(uint32_t value1, uint32_t value2)\n{\n  if (DAT_08009120 != 0) {\n    return (long long)value1 << 32 | 2;\n  }\n  return (long long)value2 << 32;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009108",
            "calling": [
                "FUN_080090c2"
            ],
            "imported": false,
            "current_name": "calculate_result_08009108"
        },
        "FUN_0800a18c": {
            "renaming": {
                "FUN_0800a18c": "process_and_wait_forever_08009b5c_wrapper_0800a18c",
                "UNRECOVERED_JUMPTABLE": "jump_table_ptr",
                "PTR_DAT_0800a228": "dat_ptr_1",
                "PTR_DAT_0800a22c": "dat_ptr_2",
                "PTR_DAT_0800a230": "dat_ptr_3",
                "PTR_DAT_0800a234": "dat_ptr_4",
                "PTR_DAT_0800a238": "dat_ptr_5",
                "PTR_DAT_0800a23c": "dat_ptr_6",
                "PTR_DAT_0800a240": "dat_ptr_7",
                "PTR_DAT_0800a244": "dat_ptr_8",
                "PTR_DAT_0800a248": "dat_ptr_9",
                "PTR_DAT_0800a24c": "dat_ptr_10",
                "PTR_DAT_0800a250": "dat_ptr_11",
                "PTR_DAT_0800a254": "dat_ptr_12"
            },
            "code": "void process_and_wait_forever_08009b5c_wrapper_0800a18c(void)\n{\n  code *jump_table_ptr = process_and_wait_forever_08009b5c_wrapper_0800a18c;\n\n  set_dat_value_if_negative(PTR_DAT_0800a228);\n  set_dat_value_if_negative(PTR_DAT_0800a22c);\n  set_dat_value_if_negative(PTR_DAT_0800a230);\n  set_dat_value_if_negative(PTR_DAT_0800a234);\n  set_dat_value_if_negative(PTR_DAT_0800a238);\n  set_dat_value_if_negative(PTR_DAT_0800a23c);\n  set_dat_value_if_negative(PTR_DAT_0800a240);\n  set_dat_value_if_negative(PTR_DAT_0800a244);\n  set_dat_value_if_negative(PTR_DAT_0800a248);\n  set_dat_value_if_negative(PTR_DAT_0800a24c);\n  set_dat_value_if_negative(PTR_DAT_0800a250);\n  set_dat_value_if_negative(PTR_DAT_0800a254);\n\n  jump_table_ptr();\n}\n\nvoid set_dat_value_if_negative(int *dat_ptr)\n{\n  if (*dat_ptr < 0)\n  {\n    *dat_ptr = 1;\n  }\n}",
            "called": [
                "FUN_08009b5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a18c",
            "calling": [
                "FUN_08009084"
            ],
            "imported": false,
            "current_name": "process_and_wait_forever_08009b5c_wrapper_0800a18c"
        },
        "FUN_08009908": {
            "renaming": {
                "FUN_08009908": "allocate_and_copy_data_08009908",
                "param_1": "source_address",
                "param_2": "size",
                "uVar1": "allocation_size",
                "uVar2": "destination_address",
                "uVar3": "calculated_size"
            },
            "code": "uint allocate_and_copy_data_08009908(uint source_address, uint size) {\n    undefined4 allocation_size = *(undefined4 *)PTR_PTR_DAT_08009914;\n    uint destination_address;\n    \n    if (source_address == 0) {\n        destination_address = allocate_memory_block_08009270(allocation_size, size, size, PTR_PTR_DAT_08009914);\n    } else if (size == 0) {\n        insert_node_at_head_080091d8();\n        destination_address = size;\n    } else {\n        uint calculated_size = calculate_value_0800a154();\n        destination_address = source_address;\n        if ((calculated_size < size) && (destination_address = allocate_memory_block_08009270(allocation_size, size), destination_address != 0)) {\n            copy_data_to_destination_080091b0(destination_address, source_address, size);\n            insert_node_at_head_080091d8(allocation_size, source_address);\n        }\n    }\n    return destination_address;\n}",
            "called": [
                "FUN_080091d8",
                "FUN_0800a154",
                "FUN_08009270",
                "FUN_080091b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009908",
            "calling": [
                "FUN_08002acc",
                "FUN_080027f0",
                "FUN_0800288c"
            ],
            "imported": false,
            "current_name": "allocate_and_copy_data_08009908"
        },
        "FUN_08008a24": {
            "renaming": {
                "FUN_08008a24": "decode_data_from_bit_08008a24",
                "param_1": "bit_position",
                "param_2": "data_address",
                "param_3": "bit_mask",
                "param_4": "data_value_address",
                "iVar1": "bit_found",
                "uVar2": "data",
                "puVar3": "data_array",
                "uVar4": "bit_value",
                "PTR_DAT_08008a64": "bit_array",
                "PTR_DAT_08008a68": "bit_mask_array",
                "get_bit_at_position_08006b28": "get_bit_at_position",
                "get_data_at_index_08006b7c": "get_data_at_index",
                "set_value_at_address_based_on_condition_080072d8": "set_value_at_address_based_on_condition"
            },
            "code": "void decode_data_from_bit_08008a24(uint bit_position, uint data_address, uint bit_mask, uint data_value_address) {\n  uint bit_value;\n  uint data_index;\n\n  if (bit_position < 0x3c) {\n    bit_value = (uint)(char)PTR_DAT_08008a64[bit_position];\n    data_index = bit_value << 0x18 >> 0x1c;\n  }\n  else {\n    bit_value = 0xffffffff;\n    data_index = (uint)data_value_address;\n  }\n  if ((bit_value != 0xffffffff) && get_bit_at_position(bit_value, PTR_DAT_08008a68, bit_mask, data_value_address, data_value_address)) {\n    uint data = get_data_at_index(data_index);\n    uint bit = 1 << (bit_value & 0xf) & 0xffff;\n    set_value_at_address_based_on_condition(data, bit, data_address);\n  }\n  return;\n}",
            "called": [
                "FUN_08006b7c",
                "FUN_08006b28",
                "FUN_080072d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a24",
            "calling": [
                "FUN_080088e0",
                "FUN_080005f8",
                "FUN_08002fca"
            ],
            "imported": false,
            "current_name": "decode_data_from_bit_08008a24"
        },
        "FUN_08008abc": {
            "renaming": {
                "FUN_08008abc": "get_data_from_pointer_0800723c_wrapper_08008abc"
            },
            "code": "void get_data_from_pointer_0800723c_wrapper_08008abc(void)\n{\n  get_data_from_pointer_0800723c();\n  return;\n}",
            "called": [
                "FUN_0800723c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008abc",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "get_data_from_pointer_0800723c_wrapper_08008abc"
        },
        "FUN_08002b68": {
            "renaming": {
                "FUN_08002b68": "process_data_08002b68",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "data_copy",
                "param_4": "copy_size",
                "param_5": "byte_val",
                "iVar1": "index",
                "uVar2": "byte_val",
                "uVar3": "copy_size",
                "allocate_and_copy_data_08002acc": "allocate_and_copy_data",
                "PTR_DAT_08002bf4": "PTR_data_copy",
                "initialize_data_08002a30": "initialize_data",
                "check_data_08002a58": "check_data",
                "process_data_08007f0e": "process_data_2",
                "*PTR_DAT_08002bf8": "PTR_08002bf8",
                "*PTR_DAT_08002bfc": "PTR_08002bfc"
            },
            "code": "uint32_t process_data_08002b68(uint32_t *data_ptr, uint32_t data_size, uint32_t *data_copy, uint32_t copy_size, uint8_t byte_val) {\n    int index;\n    uint32_t mask;\n    uint32_t temp_copy_size = copy_size;\n\n    if (data_ptr[4] == 0) {\n        return 0;\n    }\n\n    allocate_and_copy_data(data_copy, data_size);\n\n    if (*PTR_DAT_08002bf4 != 0) {\n        if (byte_val != 0) {\n            initialize_data(data_ptr, data_size);\n            if (byte_val > 3) {\n                byte_val = 3;\n            }\n            while (byte_val > 0) {\n                mask = (temp_copy_size >> ((byte_val - 1) * 8)) & 0xff;\n                (**(code **)*data_ptr)(data_ptr, mask);\n                byte_val--;\n            }\n            check_data(data_ptr, 0);\n        }\n        index = process_data_08002b68_08007f0e(data_ptr + 5, (data_size & 0x7f) << 1, *(uint32_t *)PTR_DAT_08002bf4, data_copy, copy_size);\n        if (index != 0) {\n            copy_size = 0;\n        }\n        *PTR_DAT_08002bf8 = 0;\n        *PTR_DAT_08002bfc = (char)copy_size;\n        return copy_size;\n    }\n    data_ptr[1] = 1;\n    return 0;\n}\n",
            "called": [
                "FUN_08007f0e",
                "FUN_08002acc",
                "FUN_08002a30",
                "FUN_08002a58"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b68",
            "calling": [
                "FUN_08002c00"
            ],
            "imported": false,
            "current_name": "process_data_08002b68"
        },
        "FUN_080005e0": {
            "renaming": {
                "FUN_080005e0": "clear_memory_080005e0",
                "PTR_DAT_080005f0": "pointer_to_data_1",
                "PTR_DAT_080005f4": "pointer_to_data_2"
            },
            "code": "void clear_memory_080005e0(void)\n{\n  *PTR_DAT_080005f0 = 0;\n  *PTR_DAT_080005f4 = 255;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e0",
            "calling": [
                "FUN_08000aec",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "clear_memory_080005e0"
        },
        "FUN_08008020": {
            "renaming": {
                "FUN_08008020": "check_input_and_set_flag_08008020",
                "param_1": "input",
                "iVar1": "input_subtracted",
                "subtract_four_from_input_08007f78": "subtract_four_from_input",
                "set_bit_and_flag_080049e0": "set_bit_and_flag"
            },
            "code": "void check_input_and_set_flag_08008020(int input) {\\n  int input_subtracted = subtract_four_from_input();\\n  if (*(char *)(input_subtracted + 0x5d) == \"\\0\") {\\n    set_bit_and_flag(input);\\n  }\\n  return;\\n}",
            "called": [
                "FUN_080049e0",
                "FUN_08007f78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008020",
            "calling": [
                "FUN_08004f3c"
            ],
            "imported": false,
            "current_name": "check_input_and_set_flag_08008020"
        },
        "FUN_0800674c": {
            "renaming": {
                "FUN_0800674c": "do_nothing_0800674c"
            },
            "code": "\nvoid do_nothing_0800674c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800674c",
            "calling": [
                "FUN_0800674e"
            ],
            "imported": false,
            "current_name": "do_nothing_0800674c"
        },
        "FUN_08005dac": {
            "renaming": {
                "FUN_08005dac": "update_data_08005dac",
                "param_1": "data_address",
                "param_2": "data_values",
                "uVar1": "data2",
                "iVar2": "value1",
                "iVar3": "value3",
                "mask1": "mask1",
                "mask2": "mask2",
                "mask3": "mask3",
                "DAT_08005df0": "PTR_DAT_08005df0"
            },
            "code": "void update_data_08005dac(int data_address, int *data_values) {\n    uint mask1 = 0xffffefff;\n    uint mask2 = 0xffffbfff;\n    uint mask3 = 0xffff8cff;\n    uint data1 = *(uint *)(data_address + 0x20);\n    uint data2 = *(uint *)(data_address + 4);\n    int value1 = *data_values;\n    int value2 = data_values[1];\n    int value3 = data_values[2];\n    int value4 = data_values[5];\n    data1 = data1 & mask1;\n    data2 = data2 & mask2;\n    if (data_address == DAT_08005df0) {\n        data2 = data2 | (value4 << 6);\n    }\n    data2 = data2 | value3 << 0xc;\n    *(uint *)(data_address + 4) = data2;\n    *(uint *)(data_address + 0x20) = data1 | value2 << 8;\n    *(int *)(data_address + 0x40) = value1;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005dac",
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "imported": false,
            "current_name": "update_data_08005dac"
        },
        "FUN_0800674e": {
            "renaming": {
                "FUN_0800674e": "zero_out_values_if_not_null_0800674e",
                "param_1": "param",
                "do_nothing_0800674c": "do_nothing",
                "PTR_08006538": "calculate_values",
                "PTR_DAT_08008000": "NULL"
            },
            "code": "int zero_out_values_if_not_null_0800674e(int* param) {\n  if (param != PTR_DAT_08008000) {\n    if (*(char *)((int)param + 0x39) == '\\0') {\n      *(undefined *)(param + 0xe) = 0;\n      do_nothing();\n    }\n    *(undefined *)((int)param + 0x39) = 0x24;\n    *(uint *)(*param + 0xc) &= 0xffffdfff;\n    PTR_08006538(param);\n    *(uint *)(*param + 0x10) &= 0xffffb7ff;\n    *(uint *)(*param + 0x14) &= 0xffffffd5;\n    *(uint *)(*param + 0xc) |= 0x2000;\n    param[15] = 0;\n    *(undefined *)((int)param + 0x39) = 0x20;\n    *(undefined *)((int)param + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}",
            "called": [
                "FUN_08006538",
                "FUN_0800674c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800674e",
            "calling": [
                "FUN_08008078"
            ],
            "imported": false,
            "current_name": "zero_out_values_if_not_null_0800674e"
        },
        "FUN_0800771c": {
            "renaming": {
                "FUN_0800771c": "execute_callback_if_flag_set_0800771c",
                "param_1": "flag",
                "iVar1": "callback_ptr"
            },
            "code": "void execute_callback_if_flag_set_0800771c(int flag) {\n  int callback_ptr = decrement_by_four_08007718();\n  if ((*(code **)(callback_ptr + 0x4c) != (code *)0x0) && (*(char *)(flag + 0x1c) == '\\x01')) {\n    (**(code **)(callback_ptr + 0x4c))(callback_ptr, 0);\n  }\n  return;\n}",
            "called": [
                "FUN_08007718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800771c",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "execute_callback_if_flag_set_0800771c"
        },
        "FUN_080066e8": {
            "renaming": {
                "FUN_080066e8": "check_permissions_080066e8",
                "param_1": "permissions",
                "param_2": "permission_mask",
                "param_3": "expected_value",
                "param_4": "data_ptr",
                "param_5": "max_offset",
                "iVar1": "data",
                "**param_1": "**permissions",
                "permission_check": "permission_check",
                "get_data_from_pointer_08003760": "get_data_from_pointer_08003760"
            },
            "code": "uint check_permissions_080066e8(uint **permissions, uint permission_mask, bool expected_value, int data_ptr, uint max_offset) {\n    int data = 0;\n    do {\n        bool permission_check = (permission_mask & ~**permissions) == 0;\n        if (permission_check != expected_value) {\n            return 0;\n        }\n    } while ((max_offset == 0xffffffff) || ((max_offset != 0) && (abs(get_data_from_pointer_08003760() - data_ptr) <= max_offset)));\n    (*permissions)[3] &= 0xfffffe5f;\n    (*permissions)[5] &= 0xfffffffe;\n    *(undefined *)((int)permissions + 0x39) = 0x20;\n    *(undefined *)((int)permissions + 0x3a) = 0x20;\n    *(undefined *)(permissions + 0xe) = 0;\n    return 3;\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080066e8",
            "calling": [
                "FUN_080067ac"
            ],
            "imported": false,
            "current_name": "check_permissions_080066e8"
        },
        "FUN_08009358": {
            "renaming": {
                "FUN_08009358": "insert_array_byte_into_array_08009358",
                "param_1": "dest_array_start",
                "param_2": "byte_to_insert",
                "param_3": "dest_array_end",
                "param_4": "current_array_size",
                "puVar2": "current_byte_ptr",
                "iVar1": "new_array_size",
                "iVar3": "current_array_size"
            },
            "code": "int insert_array_byte_into_array_08009358(int dest_array_start, int byte_to_insert, int dest_array_end, int current_array_size){\n  int new_array_size;\n  undefined *current_byte_ptr;\n  \n  current_byte_ptr = dest_array_end + current_array_size;\n  new_array_size = current_array_size;\n  do {\n    if (dest_array_end == current_byte_ptr) {\n      return 0;\n    }\n    new_array_size = insert_byte_into_array_0800932c(dest_array_start, *dest_array_end, byte_to_insert, current_array_size, new_array_size) + 1;\n    dest_array_end++;\n  } while (new_array_size != 0);\n  return new_array_size - 1;\n}",
            "called": [
                "FUN_0800932c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009358",
            "calling": [
                "FUN_0800937c"
            ],
            "imported": false,
            "current_name": "insert_array_byte_into_array_08009358"
        },
        "FUN_0800270c": {
            "renaming": {
                "FUN_0800270c": "calculate_difference_between_pointers_0800270c",
                "*PTR_DAT_08002718": "first_value",
                "*PTR_DAT_0800271c": "second_value"
            },
            "code": "int calculate_difference_between_pointers_0800270c(void)\n{\n  uint *PTR_DAT_08002718 = (uint)(byte)*PTR_DAT_08002718;\n  uint *PTR_DAT_0800271c = (uint)(byte)*PTR_DAT_0800271c;\n  uint difference = *PTR_DAT_08002718 - *PTR_DAT_0800271c;\n  return difference;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800270c",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "calculate_difference_between_pointers_0800270c"
        },
        "FUN_08003370": {
            "renaming": {
                "FUN_08003370": "set_values_08003370",
                "param_1": "object_address",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "*(undefined4 *)(param_1 + 0x6c)": "*(int *)(object_address + 0x6c)",
                "*(undefined4 *)(param_1 + 0x44)": "*(int *)(object_address + 0x44)"
            },
            "code": "void set_values_08003370(int object_address, int value1, int value2, int value3)\n{\n  *(int *)(object_address + 0x6c) = value2;\n  *(int *)(object_address + 0x44) = value3;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003370",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_values_08003370"
        },
        "FUN_08007fa0": {
            "renaming": {
                "FUN_08007fa0": "parse_input_08007fa0",
                "param_1": "input_address",
                "param_2": "input_value",
                "param_3": "input_flag",
                "param_4": "input_unknow",
                "iVar1": "subtracted_value"
            },
            "code": "void parse_input_08007fa0(int input_address,int input_value,int input_flag,undefined4 input_unknow){\n  int subtracted_value = subtract_four_from_input();\n  if (input_flag == *(int *)(input_address + 0xc)) {\n    if (input_value == 0) {\n      *(undefined *)(subtracted_value + 0x88) = 0;\n      *(undefined *)(subtracted_value + 0x5c) = 0;\n      if (*(code **)(subtracted_value + 100) != (code *)0x0) {\n        (**(code **)(subtracted_value + 100))();\n      }\n      parse_input_08007fa0_080048c8(input_address,subtracted_value + 0x68,*(undefined *)(subtracted_value + 0x88),8);\n      return;\n    }\n    *(undefined *)(subtracted_value + 0x5c) = 1;\n    validate_input(input_address,subtracted_value + 0x68,0x20,8,input_unknow);\n  }\n  return;\n}",
            "called": [
                "FUN_08007f78",
                "FUN_08004954",
                "FUN_080048c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007fa0",
            "calling": [
                "FUN_08004ac2"
            ],
            "imported": false,
            "current_name": "parse_input_08007fa0"
        },
        "FUN_08003376": {
            "renaming": {
                "FUN_08003376": "check_param_range_and_store_08003376",
                "param_1": "data",
                "param_2": "value",
                "param_3": "param",
                "bVar1": "is_within_range",
                "*PTR_DAT_08004064": "max_param",
                "*(code **)(param_1 + 100)": "func_ptr",
                "*param_1": "data_flag",
                "*(undefined4 *)(param_1 + 0x3c)": "arg",
                "*(undefined *)(*(int *)(param_1 + 4) + param_3)": "stored_value"
            },
            "code": "void check_param_range_and_store_08003376(void *data, unsigned char value, unsigned int param) {\n  bool is_within_range;\n  unsigned int *PTR_DAT_08004064 = *(unsigned int *)(data + 8);\n  if (param < *PTR_DAT_08004064) {\n    is_within_range = false;\n  }\n  else {\n    is_within_range = true;\n    code *func_ptr = *(code **)(data + 100);\n    if (func_ptr != (code *)0x0) {\n      *(unsigned char *)data = 1;\n      (*func_ptr)(*(unsigned int *)(data + 0x3c));\n      if (param < *PTR_DAT_08004064) {\n        is_within_range = false;\n      }\n      else {\n        is_within_range = true;\n      }\n    }\n  }\n  if (!is_within_range) {\n    *(unsigned char *)(*(int *)(data + 4) + param) = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003376",
            "calling": [
                "FUN_080033cc",
                "FUN_08003474"
            ],
            "imported": false,
            "current_name": "check_param_range_and_store_08003376"
        },
        "FUN_08008bf4": {
            "renaming": {
                "FUN_08008bf4": "calculate_value_if_not_zero_08008bf4",
                "DAT_08008c18": "global_variable",
                "PTR_DAT_08008c1c": "global_pointer",
                "calculate_value_from_pointers_08008afa": "calculate_value_from_pointer"
            },
            "code": "void calculate_value_if_not_zero_08008bf4(void)\n{\n    if (DAT_08008c18 != 0) {\n        calculate_value_from_pointer(PTR_DAT_08008c1c);\n    }\n    return;\n}",
            "called": [
                "FUN_08008afa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008bf4",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": false,
            "current_name": "calculate_value_if_not_zero_08008bf4"
        },
        "FUN_08005430": {
            "renaming": {
                "FUN_08005430": "get_value_at_offset_08005430",
                "param_1": "address",
                "PTR_": "value_ptr",
                "DAT_": ""
            },
            "code": "int get_value_at_offset_08005430(int address)\n{\n    int* PTR_ = (int*)(address + 0x40);\n    return *PTR_;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005430",
            "calling": [
                "FUN_08007f0e",
                "FUN_08007e74"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_08005430"
        },
        "FUN_08002720": {
            "renaming": {
                "FUN_08002720": "read_byte_from_memory_08002720",
                "bVar1": "current_byte_index",
                "bVar2": "current_byte",
                "PTR_DAT_08002740": "current_byte_index_ptr",
                "PTR_DAT_08002744": "max_byte_index_ptr",
                "PTR_DAT_08002748": "memory_ptr"
            },
            "code": "uint read_byte_from_memory_08002720(void)\n{\n  uint current_byte_index = *PTR_DAT_08002740;\n  uint max_byte_index = (uint)(byte)*PTR_DAT_08002744;\n  if (current_byte_index < max_byte_index) {\n    byte current_byte = *(byte *)(*(int *)PTR_DAT_08002748 + current_byte_index);\n    *PTR_DAT_08002740 = current_byte_index + 1;\n    return (uint)current_byte;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002720",
            "calling": [
                "FUN_08001c08"
            ],
            "imported": false,
            "current_name": "read_byte_from_memory_08002720"
        },
        "FUN_080031ce": {
            "renaming": {
                "FUN_080031ce": "encode_data_080031ce",
                "param_1": "ptr_param_1",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "count",
                "param_5": "offset",
                "puVar1": "ptr_func",
                "uVar2": "i"
            },
            "code": "void encode_data_080031ce(uint32_t *ptr_param_1, uint32_t param_2, uint32_t param_3, uint32_t count, int offset) {\n\tuint32_t *ptr_func = (uint32_t *)*ptr_param_1;\n\tif (ptr_func != NULL) {\n\t\t(*(*(void (**)(uint32_t *, uint32_t, uint32_t, void *, uint32_t))ptr_func))(ptr_func, 0xf0, param_3, *(void **)ptr_func, count);\n\t\t(*(*(void (**)(uint32_t *, uint32_t))((uint32_t *)*ptr_param_1)))(ptr_param_1, 0x79);\n\t\t(*(*(void (**)(uint32_t *, uint32_t))((uint32_t *)*ptr_param_1)))(ptr_param_1, param_2);\n\t\t(*(*(void (**)(uint32_t *, uint32_t))((uint32_t *)*ptr_param_1)))(ptr_param_1, param_3);\n\t\tfor (uint32_t i = 0; i < count; i++) {\n\t\t\tencode_data_080031ce_0800307a(ptr_param_1, 1, offset + i, 0);\n\t\t}\n\t\t(*(*(void (**)(uint32_t *, uint32_t))((uint32_t *)*ptr_param_1)))(ptr_param_1, 0xf7);\n\t}\n\treturn;\n}",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080031ce",
            "calling": [
                "FUN_08002df6"
            ],
            "imported": false,
            "current_name": "encode_data_080031ce"
        },
        "FUN_08009918": {
            "renaming": {
                "FUN_08009918": "calculate_offset_and_set_param_08009918",
                "param_1": "result",
                "param_2": "input_param",
                "puVar1": "ptr1",
                "iVar2": "offset"
            },
            "code": "void calculate_offset_and_set_param_08009918(int *result, undefined4 input_param)\n{\n  undefined *ptr1;\n  int offset;\n  ptr1 = PTR_DAT_08009934;\n  *(undefined4 *)PTR_DAT_08009934 = 0;\n  offset = calculate_offset_08008804(input_param);\n  if ((offset == -1) && (*(int *)ptr1 != 0)) {\n    *result = *(int *)ptr1;\n  }\n  return;\n}",
            "called": [
                "FUN_08008804"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009918",
            "calling": [
                "FUN_08009270"
            ],
            "imported": false,
            "current_name": "calculate_offset_and_set_param_08009918"
        },
        "FUN_08005434": {
            "renaming": {
                "FUN_08005434": "calculate_iterations_08005434",
                "param_1": "num_iterations",
                "local_4": "iterations",
                "DAT_0800545c": "multiplier_constant",
                "PTR_DAT_08005458": "multiplier_pointer"
            },
            "code": "void calculate_iterations_08005434(int num_iterations)\n{\n  uint64_t multiplier = (uint64_t)DAT_0800545c * (uint64_t)*(uint *)PTR_DAT_08005458 >> 0x29;\n  int iterations = num_iterations * multiplier;\n  while (iterations > 0) {\n    iterations--;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005434",
            "calling": [
                "FUN_08005460"
            ],
            "imported": false,
            "current_name": "calculate_iterations_08005434"
        },
        "FUN_08005e2e": {
            "renaming": {
                "FUN_08005e2e": "update_flags_on_param_08005e2e",
                "param_1": "param_ptr",
                "puVar1": "param",
                "*puVar1": "*param",
                "PTR_08007110": "update_flags_08007110"
            },
            "code": "void update_flags_on_param_08005e2e(uint **param_ptr)\n{\n  uint *param = *param_ptr;\n  *(undefined *)((int)param_ptr + 0x3d) = 2;\n  if ((param[8] & 0x1111) == 0) {\n    if ((param[8] & 0x444) == 0) {\n      *param = *param & 0xfffffffe;\n    }\n  }\n  PTR_08007110(param_ptr);\n  *(undefined *)((int)param_ptr + 0x3d) = 0;\n  *(undefined *)(param_ptr + 0xf) = 0;\n  return;\n}",
            "called": [
                "FUN_08007110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e2e",
            "calling": [
                "FUN_080071e4"
            ],
            "imported": false,
            "current_name": "update_flags_on_param_08005e2e"
        },
        "FUN_08007736": {
            "renaming": {
                "FUN_08007736": "execute_callback_function_08007736",
                "iVar1": "callback_address",
                "decrement_by_four_08007718": "decrement_by_four",
                "*(code **)(iVar1 + 0x48)": "callback_function_pointer",
                "(code *)0x0": "null_pointer",
                "**(code **)(iVar1 + 0x48)": "callback_function"
            },
            "code": "void execute_callback_function_08007736(void)\n{\n  int callback_address = decrement_by_four_08007718();\n  if (*(code **)(callback_address + 0x48) != (code *)0x0) {\n    (**(code **)(callback_address + 0x48))();\n  }\n  return;\n}",
            "called": [
                "FUN_08007718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007736",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "execute_callback_function_08007736"
        },
        "FUN_08002968": {
            "renaming": {
                "FUN_08002968": "initialize_data_08002968",
                "param_1": "data_address",
                "param_2": "data_value",
                "iVar1": "data_value_shifted",
                "iVar2": "data_array_address",
                "array_1_size": "array_1_size",
                "array_2_size": "array_2_size",
                "data_value_shifted": "data_value_shifted",
                "data_type_flag": "data_type_flag",
                "data_address_offset": "data_address_offset",
                "data_type_flag_offset": "data_type_flag_offset"
            },
            "code": "void initialize_data_08002968(int data_address, uint data_value) {\n  int array_1_size;\n  int array_2_size;\n  int data_value_shifted;\n  int data_type_flag;\n  char* data_address_offset = (char*)(data_address + 0x10);\n  char* data_type_flag_offset = (char*)(data_address + 0x11);\n\n  *PTR_DAT_080029ec = 0;\n  *PTR_DAT_080029f0 = 0;\n\n  array_1_size = *(int*)PTR_DAT_080029f4;\n  if (array_1_size != 0) {\n    fill_array_with_value_080091c6(*(int*)PTR_DAT_080029f4, 0, *PTR_DAT_080029f8);\n  }\n\n  *PTR_DAT_080029fc = 0;\n  *PTR_DAT_08002a00 = 0;\n\n  array_2_size = *(int*)PTR_DAT_08002a04;\n  if (array_2_size != 0) {\n    fill_array_with_value_080091c6(*(int*)PTR_DAT_08002a04, 0, *PTR_DAT_08002a08);\n  }\n\n  *PTR_DAT_08002a0c = 0;\n  data_value_shifted = (data_value & 0x7f) << 1;\n  *data_address_offset = (char)data_value_shifted;\n\n  data_type_flag = 0;\n  if (data_value == 0x33) {\n    *data_type_flag_offset = 1;\n    data_type_flag = 1;\n  }\n  else {\n    *data_type_flag_offset = 0;\n  }\n\n  int data_array_address = data_address + 0x14;\n  FUNC_080077b0(data_array_address, DAT_08002a10, 0x4000, data_value_shifted, data_type_flag);\n\n  if (data_type_flag == 0) {\n    set_param_2_if_param_1_not_null_08007f8e(data_array_address, PTR_LAB_08002774_1_08002a14);\n    set_param_2_if_param_1_not_null_08007f7c(data_array_address, PTR_LAB_08002b00_1_08002a18);\n  }\n  return;\n}",
            "called": [
                "FUN_08007f7c",
                "FUN_080077b0",
                "FUN_080091c6",
                "FUN_08007f8e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002968",
            "calling": [
                "FUN_08002a1c"
            ],
            "imported": false,
            "current_name": "initialize_data_08002968"
        },
        "FUN_08004ccc": {
            "renaming": {
                "FUN_08004ccc": "process_input_08004ccc",
                "param_1": "input",
                "puVar1": "ptr1",
                "DAT_08004ccc+0x3d": "char1",
                "DAT_08004ccc+0x2a": "short1"
            },
            "code": "uint32_t process_input_08004ccc(uint32_t **input)\n{\n    uint32_t *ptr1 = input[11];\n    uint8_t DAT_08004ccc+0x3d = *(char *)((int)input + 0x3d);\n    uint16_t DAT_08004ccc+0x2a = *(short *)((int)input + 0x2a);\n\n    if (DAT_08004ccc+0x3d == '!') {\n        if (DAT_08004ccc+0x2a == 0) {\n            if (((ptr1 == (uint32_t *)0x4) || (ptr1 == (uint32_t *)0x8)) || (ptr1 == (uint32_t *)0xffff0000)) {\n                (*input)[1] &= 0xfffff8ff;\n                **input |= 0x200;\n                input[12] = (uint32_t *)0x0;\n                *(uint8_t *)((int)input + 0x3d) = 0x20;\n                if (*(char *)((int)input + 0x3e) == '@') {\n                    *(uint8_t *)((int)input + 0x3e) = 0;\n                    do_nothing_08004b80();\n                }\n                else {\n                    *(uint8_t *)((int)input + 0x3e) = 0;\n                    do_nothing_08004a1e();\n                }\n            }\n            else {\n                (*input)[1] &= 0xfffff8ff;\n                input[12] = (uint32_t *)0x11;\n                *(uint8_t *)((int)input + 0x3e) = 0;\n                *(uint8_t *)((int)input + 0x3d) = 0x20;\n                do_nothing_08004a1e();\n            }\n        }\n        else {\n            ptr1 = input[9];\n            input[9] = (uint32_t *)((int)ptr1 + 1);\n            (*input)[4] = (uint32_t)*(uint8_t *)ptr1;\n            *(uint16_t *)((int)input + 0x2a) = DAT_08004ccc+0x2a - 1;\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_08004b80",
                "FUN_08004a1e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ccc",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_input_08004ccc"
        },
        "FUN_080042d4": {
            "renaming": {
                "FUN_080042d4": "is_param2_bit_set_in_param1_080042d4",
                "param_1": "param1",
                "param_2": "param2_bitmask"
            },
            "code": "int is_param2_bit_set_in_param1_080042d4(uint32_t param1, uint32_t param2_bitmask) {\n    uint32_t* param1_bitmask_ptr = (uint32_t*)(param1 + 8);\n    if ((param2_bitmask & *param1_bitmask_ptr) == 0) {\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042d4",
            "calling": [
                "FUN_080072f0"
            ],
            "imported": false,
            "current_name": "is_param2_bit_set_in_param1_080042d4"
        },
        "FUN_0800542a": {
            "renaming": {
                "FUN_0800542a": "get_value_at_offset_0x3d_0800542a",
                "param_1": "address"
            },
            "code": "unsigned char get_value_at_offset_0x3d_0800542a(unsigned int address) {\n    return *(unsigned char *)(address + 0x3d);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800542a",
            "calling": [
                "FUN_08007f0e",
                "FUN_08007e74"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_0x3d_0800542a"
        },
        "FUN_0800457c": {
            "renaming": {
                "FUN_0800457c": "increment_byte_at_address_if_short_at_offset_is_not_zero_0800457c",
                "param_1": "param_array",
                "pbVar1": "byte_ptr",
                "short_ptr": "uint16_t_ptr",
                "uint_ptr": "uint32_t_ptr"
            },
            "code": "uint32_t increment_byte_at_address_if_short_at_offset_is_not_zero_0800457c(int *param_array) {\n  uint16_t *short_ptr = (uint16_t *)((int)param_array + 0x2a);\n  if (*short_ptr != 0) {\n    uint8_t *byte_ptr = (uint8_t *)param_array[9];\n    param_array[9] = (int)(byte_ptr + 1);\n    uint32_t *uint_ptr = (uint32_t *)(*param_array + 0x10);\n    *uint_ptr = (uint32_t)*byte_ptr;\n    *short_ptr = *short_ptr - 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800457c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "increment_byte_at_address_if_short_at_offset_is_not_zero_0800457c"
        },
        "FUN_080091c6": {
            "renaming": {
                "FUN_080091c6": "fill_array_with_value_080091c6",
                "param_1": "array",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "end_of_array",
                "*param_1": "*array"
            },
            "code": "void fill_array_with_value_080091c6(void *array, int value, int size) {\n  void *end_of_array = array + size;\n  for (; array != end_of_array; array++) {\n    *array = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091c6",
            "calling": [
                "FUN_08006d80",
                "FUN_08009d24",
                "FUN_08009cdc",
                "FUN_08002a58",
                "FUN_08009db0",
                "FUN_08002968",
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "fill_array_with_value_080091c6"
        },
        "FUN_0800a07a": {
            "renaming": {
                "FUN_0800a07a": "process_data_0800a07a",
                "param_1": "data",
                "param_2": "data_info",
                "iVar1": "result",
                "uVar2": "flags",
                "bVar3": "has_error"
            },
            "code": "void process_data_0800a07a(undefined4 data, int data_info)\n{\n  int result;\n  ushort flags;\n  bool has_error;\n  result = zero_return(data, (int)*(short *)(data_info + 0xe));\n  has_error = result == -1;\n  if (has_error) {\n    flags = *(ushort *)(data_info + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(data_info + 0x54) = result;\n    flags = *(ushort *)(data_info + 0xc) | 0x1000;\n  }\n  if (has_error) {\n    *(ushort *)(data_info + 0xc) = flags;\n  }\n  if (!has_error) {\n    *(ushort *)(data_info + 0xc) = flags;\n  }\n  return;\n}",
            "called": [
                "FUN_0800a130"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a07a",
            "calling": [],
            "imported": false,
            "current_name": "process_data_0800a07a"
        },
        "FUN_08003a20": {
            "renaming": {
                "FUN_08003a20": "check_and_update_data_08003a20",
                "param_1": "data_ptr",
                "param_2": "input_value",
                "iVar1": "current_data_value",
                "iVar3": "data_address",
                "uVar2": "return_value",
                "local_14": "delay_count",
                "get_data_from_pointer_08003760": "get_data_from_pointer"
            },
            "code": "int check_and_update_data_08003a20(int *data_ptr, int input_value)\n{\n    int data_address = *data_ptr;\n    \n    if ((*(uint *)(data_address + 8) & 1) == 0) {\n        *(uint *)(data_address + 8) = *(uint *)(data_address + 8) | 1;\n        \n        // Delay loop\n        uint delay_count = (uint)((ulonglong)DAT_08003a9c * (ulonglong)*(uint *)PTR_DAT_08003a98 >> 0x32);\n        for (; delay_count != 0; delay_count--);\n        \n        int initial_data_value = get_data_from_pointer_08003760(data_ptr, input_value, (int)((ulonglong)DAT_08003a9c * (ulonglong)*(uint *)PTR_DAT_08003a98));\n        \n        do {\n            if ((*(uint *)(*data_ptr + 8) & 1) != 0) {\n                return 0;\n            }\n            int current_data_value = get_data_from_pointer_08003760(data_ptr, input_value, (int)((ulonglong)DAT_08003a9c * (ulonglong)*(uint *)PTR_DAT_08003a98));\n        } while ((uint)(current_data_value - initial_data_value) < 3);\n        \n        data_ptr[10] = data_ptr[10] | 0x10;\n        data_ptr[0xb] = data_ptr[0xb] | 1;\n        *(undefined *)(data_ptr + 9) = 0;\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a20",
            "calling": [
                "FUN_08003e20",
                "FUN_08003aa0"
            ],
            "imported": false,
            "current_name": "check_and_update_data_08003a20"
        },
        "FUN_080064b0": {
            "renaming": {
                "FUN_080064b0": "update_flags_080064b0",
                "param_1": "mem_address",
                "*param_1": "*mem_address",
                "uint": "unsigned int",
                "*(uint *)(*param_1 + 0xc)": "*mem_address_c",
                "*(uint *)(*param_1 + 0x14)": "*mem_address_14",
                "*(undefined *)((int)param_1 + 0x3a)": "*mem_address_3a"
            },
            "code": "void update_flags_080064b0(int *mem_address){\n    uint *mem_address_c = (uint *)(*mem_address + 0xc);\n    uint *mem_address_14 = (uint *)(*mem_address + 0x14);\n    *mem_address_c &= 0xfffffedf;\n    *mem_address_14 &= 0xfffffffe;\n    char *mem_address_3a = (char *)((int)mem_address + 0x3a);\n    *mem_address_3a = 0x20;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064b0",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "update_flags_080064b0"
        },
        "FUN_08009cdc": {
            "renaming": {
                "FUN_08009cdc": "initialize_data_08009cdc",
                "param_1": "data",
                "param_2": "value_1",
                "param_3": "value_2",
                "fill_array_with_value_080091c6": "fill_array_with_value"
            },
            "code": "void initialize_data_08009cdc(undefined4 *data, undefined2 value_1, undefined2 value_2) {\n  data[0] = 0;\n  data[1] = 0;\n  data[2] = 0;\n  *(undefined2 *)(data + 3) = value_1;\n  data[0x19] = 0;\n  *(undefined2 *)((int)data + 0xe) = value_2;\n  data[4] = 0;\n  data[5] = 0;\n  data[6] = 0;\n  fill_array_with_value(data + 0x17, 0, 8);\n  data[8] = data;\n  data[9] = DAT_08009d14;\n  data[10] = PTR_process_data_0800a042_1_08009d18;\n  data[0xb] = PTR_process_data_0800a07a_1_08009d1c;\n  data[0xc] = PTR_LAB_0800a09e_1_08009d20;\n  return;\n}",
            "called": [
                "FUN_080091c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009cdc",
            "calling": [
                "FUN_08009d50"
            ],
            "imported": false,
            "current_name": "initialize_data_08009cdc"
        },
        "FUN_08002a58": {
            "renaming": {
                "FUN_08002a58": "check_data_08002a58",
                "param_1": "data_ptr",
                "iVar1": "process_result",
                "uVar2": "return_value",
                "PTR_DAT_08002ab0": "data_array_ptr",
                "PTR_DAT_08002aac": "data_int_ptr",
                "PTR_DAT_08002aa8": "data_int_ptr_2",
                "PTR_DAT_08002ab4": "data_array_ptr_2",
                "PTR_DAT_08002ab8": "data_int_ptr_3",
                "PTR_DAT_08002abc": "data_int_ptr_4"
            },
            "code": "int check_data_08002a58(int data_ptr)\n{\n  int process_result;\n  int return_value;\n  if (*(char *)(data_ptr + 0x11) == '\\0') {\n    return_value = 4;\n  }\n  else {\n    process_result = process_data(data_ptr + 0x14, *PTR_DAT_08002ab0, *PTR_DAT_08002aac, *PTR_DAT_08002aa8);\n    if (process_result == 0) {\n      return_value = 0;\n    }\n    else if (process_result == 1) {\n      return_value = 1;\n    }\n    else {\n      return_value = 4;\n    }\n    if (*PTR_DAT_08002aac != 0) {\n      fill_array_with_value(*PTR_DAT_08002aac, 0, *PTR_DAT_08002ab4);\n    }\n    *PTR_DAT_08002aa8 = 0;\n    *PTR_DAT_08002ab8 = 0;\n    *PTR_DAT_08002abc = 0;\n  }\n  return return_value;\n}",
            "called": [
                "FUN_080091c6",
                "FUN_08007e74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a58",
            "calling": [
                "FUN_08002b68",
                "FUN_08002ac0",
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "check_data_08002a58"
        },
        "FUN_080026b0": {
            "renaming": {
                "FUN_080026b0": "calculate_and_set_new_value_080026b0",
                "param_1": "PTR_1",
                "param_2": "value",
                "calculate_new_value_08008ef4": "calculate_new_value",
                "calculate_value_0800267c": "set_calculated_value"
            },
            "code": "void calculate_and_set_new_value_080026b0(int value, int max_value) {\n  if (value < max_value) {\n    if (value < 0) {\n      value = 0;\n    }\n    else if (max_value < value) {\n      value = max_value;\n    }\n    value = calculate_new_value(value, 0, max_value, (0x88 - *(char *)(PTR_1 + 1)) * 4, (600 - *(char *)(PTR_1 + 2)) * 4);\n  }\n  set_calculated_value(PTR_1, value);\n  return;\n}",
            "called": [
                "FUN_0800267c",
                "FUN_08008ef4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026b0",
            "calling": [
                "FUN_0800021a"
            ],
            "imported": false,
            "current_name": "calculate_and_set_new_value_080026b0"
        },
        "FUN_08006092": {
            "renaming": {
                "FUN_08006092": "process_params_08006092",
                "param_1": "params",
                "FUNC_08006e68": "execute_init",
                "update_params_08005fe8": "update_params"
            },
            "code": "int process_params_08006092(undefined4 *params)\\n\\\n{\\n\\\n  if (params != NULL) {\\n\\\n    if (*(char *)((int)params + 0x3d) == \"\\0\") {\\n\\\n      *(undefined *)(params + 0xf) = 0;\\n\\\n      execute_init();\\n\\\n    }\\n\\\n    *(undefined *)((int)params + 0x3d) = 2;\\n\\\n    update_params(*params, params + 1);\\n\\\n    *(undefined *)((int)params + 0x3d) = 1;\\n\\\n    return 0;\\n\\\n  }\\n\\\n  return 1;\\n\\\n}",
            "called": [
                "FUN_08005fe8",
                "FUN_08006e68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006092",
            "calling": [
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "process_params_08006092"
        },
        "FUN_08008d8c": {
            "renaming": {
                "FUN_08008d8c": "initialize_game_if_level_one_08008d8c",
                "param_1": "level",
                "param_2": "game_data",
                "param_3": "game_data_size",
                "param_4": "some_value",
                "PTR_DAT_08008dac": "PTR_DAT_08008dac",
                "DAT_08008da8": "DAT_08008da8"
            },
            "code": "void initialize_game_if_level_one_08008d8c(int level, int game_data, undefined4 game_data_size, undefined4 some_value) {\n  if (level != 1) {\n    return;\n  }\n  if (game_data == 0xffff) {\n    initialize_game_data(PTR_DAT_08008dac, DAT_08008da8, game_data_size, 0xffff, some_value);\n  }\n  return;\n}",
            "called": [
                "FUN_08008d30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d8c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_game_if_level_one_08008d8c"
        },
        "FUN_080004d4": {
            "renaming": {
                "FUN_080004d4": "process_input_080004d4_080004d4",
                "param_1": "input_1",
                "param_2": "input_2",
                "iVar1": "i",
                "puVar2": "data_ptr"
            },
            "code": "void process_input_080004d4_080004d4(unsigned char* data) {\n    (*data)++;\n    (*data) = (*data) % 256;\n}\n\nvoid process_input_080004d4_080004d4(int input_1, int input_2) {\n    if (input_1 != 1) {\n        return;\n    }\n    if (input_2 == 0xffff) {\n        unsigned char* data_ptr = PTR_DAT_080004fc;\n        for (int i = 0; i < 11; i++) {\n            process_input_080004d4_080004d4(data_ptr);\n            data_ptr += 3;\n        }\n    }\n    return;\n}",
            "called": [
                "FUN_08002580"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080004d4",
            "calling": [],
            "imported": false,
            "current_name": "process_input_080004d4_080004d4"
        },
        "FUN_080005f8": {
            "renaming": {
                "FUN_080005f8": "FUNC_080005f8"
            },
            "code": "\nvoid FUNC_080005f8(uint param_1,int param_2)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  char cVar3;\n  bool bVar4;\n  uint uVar5;\n  \n  iVar2 = get_value_from_offset_08002fa0(PTR_DAT_08000874,param_1);\n  if (iVar2 != 0x7f) {\n    iVar2 = get_value_from_offset_08002fa0(PTR_DAT_08000874,param_1);\n    if (iVar2 == 6) {\n      cVar3 = *PTR_DAT_0800087c;\n      if (cVar3 == '\\0') {\n        cVar3 = '\\0';\n      }\n      else if (param_2 == 6) {\n        cVar3 = '\\0';\n      }\n    }\n    else {\n      cVar3 = '\\0';\n    }\n    if (cVar3 != '\\0') {\n      clear_memory_080005e0();\n    }\n    if (param_1 < 0x3c) {\n      if (PTR_DAT_08000878[param_1] == -1) {\n        bVar4 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac();\n        if (iVar2 == 0) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n          if (iVar2 == 1) {\n            bVar4 = false;\n          }\n          else if (param_2 == 4) {\n            bVar4 = false;\n          }\n          else {\n            bVar4 = true;\n          }\n        }\n      }\n    }\n    else {\n      bVar4 = false;\n    }\n    if (bVar4) {\n      if ((byte)PTR_DAT_08000880[param_1] < 0xc) {\n        iVar2 = get_byte_from_ptr_dat_080026f8(PTR_DAT_08000884 + (uint)(byte)PTR_DAT_08000880[param_1] * 3);\n      }\n      else {\n        iVar2 = 0;\n      }\n      if (iVar2 != 0) {\n        process_byte_08000588(param_1);\n      }\n    }\n    uVar5 = param_1 - 0x2e & 0xff;\n    if (uVar5 < 0xe) {\n      if (param_1 < 0x3c) {\n        iVar2 = (int)(char)PTR_DAT_08000878[param_1];\n      }\n      else {\n        iVar2 = -1;\n      }\n      iVar2 = find_char_index_080036ac(iVar2);\n      if (iVar2 == 0) {\n        bVar4 = false;\n      }\n      else {\n        if (param_1 < 0x3c) {\n          iVar2 = (int)(char)PTR_DAT_08000878[param_1];\n        }\n        else {\n          iVar2 = -1;\n        }\n        iVar2 = find_char_index_080036ac(iVar2);\n        if (iVar2 == 1) {\n          bVar4 = false;\n        }\n        else {\n          bVar4 = true;\n        }\n      }\n    }\n    else {\n      bVar4 = false;\n    }\n    if (bVar4) {\n      set_bit_08000488(uVar5,param_2 == 2);\n    }\n    if (param_1 < 0x3c) {\n      if (PTR_DAT_08000878[param_1] == -1) {\n        bVar4 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac();\n        if (iVar2 == 0) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n          if (iVar2 == 1) {\n            bVar4 = false;\n          }\n          else {\n            bVar4 = true;\n          }\n        }\n      }\n    }\n    else {\n      bVar4 = false;\n    }\n    if (bVar4) {\n      if ((param_2 == 0) || (param_2 == 0xb)) {\n        PTR_DAT_08000888[param_1 >> 3] = PTR_DAT_08000888[param_1 >> 3] | (byte)(1 << (param_1 & 7))\n        ;\n      }\n      else {\n        PTR_DAT_08000888[param_1 >> 3] =\n             PTR_DAT_08000888[param_1 >> 3] & ~(byte)(1 << (param_1 & 7));\n      }\n    }\n    set_value_at_offset_08002fc2(PTR_DAT_08000874,param_1,0);\n    switch(param_2) {\n    case 0:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000878[param_1] == -1) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = find_char_index_080036ac();\n          if (iVar2 == 0) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n            if (iVar2 == 1) {\n              bVar4 = false;\n            }\n            else {\n              bVar4 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        decode_data_08008990(param_1,0);\n        update_memory_08002fa8(PTR_DAT_08000874,param_1,0);\n        return;\n      }\n      break;\n    case 1:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000a48[param_1] == -1) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = find_char_index_080036ac();\n          if (iVar2 == 0) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08000a48[param_1]);\n            if (iVar2 == 1) {\n              bVar4 = false;\n            }\n            else {\n              bVar4 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        iVar2 = get_value_from_offset_08002fa0(PTR_DAT_08000a44,param_1);\n        if (iVar2 == 3) {\n          decode_data_from_bit_08008a24(param_1,0);\n        }\n        decode_data_08008990(param_1,1);\n        update_memory_08002fa8(PTR_DAT_08000a44,param_1,1);\n        return;\n      }\n      break;\n    case 2:\n      if (uVar5 < 0xe) {\n        if (param_1 < 0x3c) {\n          iVar2 = (int)(char)PTR_DAT_08000878[param_1];\n        }\n        else {\n          iVar2 = -1;\n        }\n        iVar2 = find_char_index_080036ac(iVar2);\n        if (iVar2 == 0) {\n          bVar4 = false;\n        }\n        else {\n          if (param_1 < 0x3c) {\n            iVar2 = (int)(char)PTR_DAT_08000878[param_1];\n          }\n          else {\n            iVar2 = -1;\n          }\n          iVar2 = find_char_index_080036ac(iVar2);\n          if (iVar2 == 1) {\n            bVar4 = false;\n          }\n          else {\n            bVar4 = true;\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        if (param_1 < 0x3c) {\n          if (PTR_DAT_08000878[param_1] == -1) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = find_char_index_080036ac();\n            if (iVar2 == 0) {\n              bVar4 = false;\n            }\n            else {\n              iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n              if (iVar2 == 1) {\n                bVar4 = false;\n              }\n            }\n          }\n        }\n        else {\n          bVar4 = false;\n        }\n        if (bVar4) {\n          decode_data_08008990(param_1,0);\n        }\n        update_memory_08002fa8(PTR_DAT_08000874,param_1,2);\n        return;\n      }\n      break;\n    case 3:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000a48[param_1] == -1) {\n          iVar2 = 0;\n        }\n        else {\n          iVar2 = find_char_index_080036ac();\n          if (iVar2 == 0) {\n            iVar2 = 0;\n          }\n          else {\n            iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08000a48[param_1]);\n            if (iVar2 == 1) {\n              iVar2 = 0;\n            }\n            else {\n              iVar2 = is_param1_in_param2_0800738a((int)(char)PTR_DAT_08000a48[param_1],PTR_DAT_08000a4c);\n            }\n          }\n        }\n      }\n      else {\n        iVar2 = 0;\n      }\n      if (iVar2 != 0) {\n        decode_data_08008990(param_1,1);\n        decode_data_080088e0(param_1,0);\n        update_memory_08002fa8(PTR_DAT_08000a44,param_1,3);\n        return;\n      }\n      break;\n    case 4:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000a48[param_1] == -1) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = find_char_index_080036ac();\n          if (iVar2 == 0) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08000a48[param_1]);\n            if (iVar2 == 1) {\n              bVar4 = false;\n            }\n            else {\n              bVar4 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        update_memory_08002fa8(PTR_DAT_08000a44,param_1,4);\n        if (((byte)PTR_DAT_08000a50[param_1] != 0xff) &&\n           (iVar2 = get_byte_from_ptr_dat_080026f8(PTR_DAT_08000a54 + (uint)(byte)PTR_DAT_08000a50[param_1] * 3),\n           iVar2 != 0)) {\n          bVar4 = false;\n        }\n        if (bVar4) {\n          decode_servo_data_08000500(param_1,0xffffffff);\n          return;\n        }\n      }\n      break;\n    default:\n      encode_data_08002f14(PTR_DAT_08000a44,PTR_s_Unknown_pin_mode_08000a60);\n      break;\n    case 6:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000a48[param_1] == -1) {\n          iVar2 = 0;\n        }\n        else {\n          iVar2 = find_char_index_080036ac();\n          if (iVar2 == 0) {\n            iVar2 = 0;\n          }\n          else {\n            iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08000a48[param_1]);\n            if (iVar2 == 1) {\n              iVar2 = 0;\n            }\n            else {\n              iVar2 = is_param1_in_param2_0800738a((int)(char)PTR_DAT_08000a48[param_1],PTR_DAT_08000a58);\n              if (iVar2 == 0) {\n                iVar2 = is_param1_in_param2_0800738a((int)(char)PTR_DAT_08000a48[param_1],PTR_DAT_08000a5c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        iVar2 = 0;\n      }\n      if (iVar2 != 0) {\n        update_memory_08002fa8(PTR_DAT_08000a44,param_1,6);\n        return;\n      }\n      break;\n    case 10:\n      break;\n    case 0xb:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000878[param_1] == -1) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = find_char_index_080036ac();\n          if (iVar2 == 0) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n            if (iVar2 == 1) {\n              bVar4 = false;\n            }\n            else {\n              bVar4 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        decode_data_08008990(param_1,2);\n        puVar1 = PTR_DAT_08000a44;\n        update_memory_08002fa8(PTR_DAT_08000a44,param_1,0xb);\n        set_value_at_offset_08002fc2(puVar1,param_1,1);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080088e0",
                "FUN_08002fa0",
                "FUN_080036ac",
                "FUN_0800738a",
                "FUN_08008990",
                "FUN_080026f8",
                "FUN_08002fa8",
                "FUN_08000588",
                "FUN_08002fc2",
                "FUN_08002f14",
                "FUN_08000500",
                "FUN_080005e0",
                "FUN_08008a24",
                "FUN_08000488"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080005f8",
            "calling": [
                "FUN_08000aec",
                "FUN_08001cd0",
                "FUN_08000a64"
            ],
            "imported": false,
            "current_name": "FUNC_080005f8"
        },
        "FUN_08009124": {
            "renaming": {
                "FUN_08009124": "process_data_08009124",
                "param_1": "data_size",
                "param_2": "data_offset",
                "param_3": "data_ptr",
                "param_4": "output_ptr",
                "uStack_8": "data_length",
                "uStack_4": "output",
                "PTR_PTR_DAT_08009144": "data_pointer_pointer"
            },
            "code": "void process_data_08009124(int data_size, int data_offset, int* data_ptr, int* output_ptr)\n{\n  int data_length = data_size;\n  int* data = data_ptr + data_offset;\n  int* output = output_ptr;\n  perform_calculation(*((int**)PTR_PTR_DAT_08009144), data, data_length, &output);\n  return;\n}",
            "called": [
                "FUN_0800937c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009124",
            "calling": [
                "FUN_080090cc"
            ],
            "imported": false,
            "current_name": "process_data_08009124"
        },
        "FUN_08002fa0": {
            "renaming": {
                "FUN_08002fa0": "get_value_from_offset_08002fa0",
                "param_1": "offset",
                "param_2": "base_address"
            },
            "code": "undefined get_value_from_offset_08002fa0(int offset, int base_address)\n{\n  return *(undefined *)(base_address + offset + 0xcc);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fa0",
            "calling": [
                "FUN_08001cd0",
                "FUN_080022f8",
                "FUN_0800021a",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "get_value_from_offset_08002fa0"
        },
        "FUN_080064ae": {
            "renaming": {
                "FUN_080064ae": "do_nothing_080064ae"
            },
            "code": "\nvoid do_nothing_080064ae(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064ae",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_080064ae"
        },
        "FUN_0800a424": {
            "renaming": {
                "FUN_0800a424": "do_nothing_0800a424"
            },
            "code": "\nvoid do_nothing_0800a424(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a424",
            "calling": [
                "FUN_08009148",
                "FUN_0800010c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800a424"
        },
        "FUN_08003a1c": {
            "renaming": {
                "FUN_08003a1c": "get_value_from_offset_08003a1c",
                "param_1": "base_address",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int get_value_from_offset_08003a1c(int base_address)\n{\n    int value = *(int *)(base_address + 0x28);\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a1c",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "get_value_from_offset_08003a1c"
        },
        "FUN_080064ac": {
            "renaming": {
                "FUN_080064ac": "do_nothing_080064ac"
            },
            "code": "\nvoid do_nothing_080064ac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064ac",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_080064ac"
        },
        "FUN_08005cb4": {
            "renaming": {
                "FUN_08005cb4": "execute_function_if_flag_is_set_08005cb4",
                "param_1": "flag_ptr",
                "**param_1": "flag_1",
                "(*param_1)[1]": "flag_2"
            },
            "code": "void execute_function_if_flag_is_set_08005cb4(uint **flag_ptr)\n{\n    uint flag_1 = **flag_ptr;\n    uint flag_2 = (*flag_ptr)[1];\n    if ((flag_1 & 2) != 0 && (flag_2 & 2) != 0) {\n        execute_code_if_pointer_not_null_080073c0();\n        (*flag_ptr)[1] = 0xfffffffd;\n    }\n    *(undefined4 *)(DAT_08005ce8 + 0x14) = 0x20000;\n    *(undefined *)((int)flag_ptr + 0x11) = 1;\n}",
            "called": [
                "FUN_080073c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cb4",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_if_flag_is_set_08005cb4"
        },
        "FUN_08007744": {
            "renaming": {
                "FUN_08007744": "get_value_from_ptr_08007744",
                "param_1": "ptr_value",
                "PTR_": "ptr_",
                "DAT_": "data_"
            },
            "code": "int get_value_from_ptr_08007744(int PTR_value){\n    int PTR_offset = *(int *)(PTR_value + 4);\n    int value_offset = PTR_offset + 0x24;\n    int value = *(int *)(value_offset);\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007744",
            "calling": [],
            "imported": false,
            "current_name": "get_value_from_ptr_08007744"
        },
        "FUN_08006538": {
            "renaming": {
                "FUN_08006538": "calculate_values_08006538",
                "param_1": "params",
                "*param_1": "params[0]",
                "DAT_080066e0": "PTR_DAT_080066e0",
                "DAT_080066e4": "PTR_DAT_080066e4",
                "iVar3": "shift1",
                "iVar4": "shift2",
                "iVar5": "shift3",
                "iVar6": "shift4",
                "iVar7": "shift5",
                "iVar8": "shift6",
                "iVar9": "val5",
                "iVar10": "val6",
                "iVar11": "val7",
                "iVar12": "ptr",
                "uVar1": "uVar1",
                "uVar2": "uVar2",
                "val1": "val1",
                "val2": "val2",
                "val3": "val3",
                "*val1": "*(unsigned int *)(params[0] + 0x10)",
                "*val2": "*(unsigned int *)(params[0] + 0xc)",
                "*val3": "*(unsigned int *)(params[0] + 0x14)",
                "*(uint *)(*param_1 + 0x10)": "*(unsigned int *)(params[0] + 0x10)",
                "*(uint *)(*param_1 + 0xc)": "*(unsigned int *)(params[0] + 0xc)",
                "*(uint *)(*param_1 + 0x14)": "*(unsigned int *)(params[0] + 0x14)",
                "*(uint *)(iVar12 + 8)": "*(unsigned int *)(ptr + 8)",
                "((uint)((int)((ulonglong)uVar2 * (ulonglong)(((uint)(iVar6 * 0x19) / (uint)(iVar11 << 2)) + ((ulonglong)uVar2 * ((ulonglong)(uint)(iVar7 * 0x19) / (ulonglong)(uint)(param_1[1] << 2)) >> 0x25) * -100) * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c)": "((unsigned int)((int)((unsigned long long)uVar2 * (unsigned long long)(((unsigned int)(shift4 * 0x19) / (unsigned int)(val7 << 2)) + ((unsigned long long)uVar2 * ((unsigned long long)(unsigned int)(shift5 * 0x19) / (unsigned long long)(unsigned int)(params[1] << 2)) >> 0x25) * -100) * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c)",
                "((uint)((ulonglong)uVar2 * (ulonglong)(((uint)(iVar4 * 0x19) / (uint)(iVar9 << 2)) + ((ulonglong)uVar2 * ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 2))) >> 0x25) * -100) * 0x10 + 0x32) >> 0x25) & 0xf0)": "((unsigned int)((unsigned long long)uVar2 * (unsigned long long)(((unsigned int)(shift2 * 0x19) / (unsigned int)(val5 << 2)) + ((unsigned long long)uVar2 * ((unsigned long long)(unsigned int)(shift3 * 0x19) / (unsigned long long)(unsigned int)(val6 << 2))) >> 0x25) * -100) * 0x10 + 0x32) >> 0x25) & 0xf0)",
                "(uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 2)) >> 0x25) * 0x10": "(unsigned int)(uVar1 * ((unsigned long long)(unsigned int)(shift1 * 0x19) / (unsigned long long)(unsigned int)(val4 << 2)) >> 0x25) * 0x10"
            },
            "code": "void calculate_values_08006538(int *params)\n{\n    unsigned long long uVar1;\n    unsigned int uVar2;\n    int shift1, shift2, shift3, shift4, shift5, shift6, shift7, shift8, shift9, shift10, shift11, shift12;\n    \n    unsigned int *val1 = (unsigned int *)(params[0] + 0x10);\n    *val1 = (*val1 & 0xffffcfff) | params[3];\n    \n    unsigned int *val2 = (unsigned int *)(params[0] + 0xc);\n    *val2 = params[2] | params[4] | params[5] | (*val2 & 0xffffe9f3);\n    \n    unsigned int *val3 = (unsigned int *)(params[0] + 0x14);\n    *val3 = (*val3 & 0xfffffcff) | params[6];\n    \n    int ptr = params[0];\n    if (ptr != DAT_080066e0) {\n        shift1 = get_shifted_value_from_ptr_dat_08005a28();\n        uVar2 = DAT_080066e4;\n        int val4 = params[1];\n        uVar1 = (unsigned long long)DAT_080066e4;\n        shift2 = get_shifted_value_from_ptr_dat_08005a28();\n        int val5 = params[1];\n        shift3 = get_shifted_value_from_ptr_dat_08005a28();\n        int val6 = params[1];\n        shift4 = get_shifted_value_from_ptr_dat_08005a28();\n        int val7 = params[1];\n        shift5 = get_shifted_value_from_ptr_dat_08005a28();\n        int val8 = params[1];\n        shift6 = get_shifted_value_from_ptr_dat_08005a28();\n        \n    } else {\n        shift1 = get_shifted_value_from_array_08005a48();\n        uVar2 = DAT_080066e4;\n        int val4 = params[1];\n        uVar1 = (unsigned long long)DAT_080066e4;\n        shift2 = get_shifted_value_from_array_08005a48();\n        int val5 = params[1];\n        shift3 = get_shifted_value_from_array_08005a48();\n        int val6 = params[1];\n        shift4 = get_shifted_value_from_array_08005a48();\n        int val7 = params[1];\n        shift5 = get_shifted_value_from_array_08005a48();\n        int val8 = params[1];\n        shift6 = get_shifted_value_from_array_08005a48();\n    }\n    \n    unsigned int *result = (unsigned int *)(ptr + 8);\n    *result = ((unsigned int)((int)((unsigned long long)uVar2 * (unsigned long long)(((unsigned int)(shift4 * 0x19) / (unsigned int)(val7 << 2)) + ((unsigned long long)uVar2 * ((unsigned long long)(unsigned int)(shift5 * 0x19) / (unsigned long long)(unsigned int)(params[1] << 2)) >> 0x25) * -100) * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) + ((unsigned int)((unsigned long long)uVar2 * (unsigned long long)(((unsigned int)(shift2 * 0x19) / (unsigned int)(val5 << 2)) + ((unsigned long long)uVar2 * ((unsigned long long)(unsigned int)(shift3 * 0x19) / (unsigned long long)(unsigned int)(val6 << 2)) >> 0x25) * -100) * 0x10 + 0x32) >> 0x25) & 0xf0) + (unsigned int)(uVar1 * ((unsigned long long)(unsigned int)(shift1 * 0x19) / (unsigned long long)(unsigned int)(val4 << 2)) >> 0x25) * 0x10;\n    return;\n}",
            "called": [
                "FUN_08005a28",
                "FUN_08005a48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006538",
            "calling": [
                "FUN_0800674e"
            ],
            "imported": false,
            "current_name": "calculate_values_08006538"
        },
        "FUN_080042e2": {
            "renaming": {
                "FUN_080042e2": "set_value_at_address_based_on_condition_080042e2",
                "param_1": "address",
                "param_2": "value",
                "param_3": "condition",
                "PTR_": "address_",
                "DAT_": "data_"
            },
            "code": "void set_value_at_address_based_on_condition_080042e2(int address, int value, int condition) {\n  if (condition == 0) {\n    *(int *)(address + 0x10) = value << 0x10;\n    return;\n  }\n  *(int *)(address + 0x10) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042e2",
            "calling": [
                "FUN_080072d8"
            ],
            "imported": false,
            "current_name": "set_value_at_address_based_on_condition_080042e2"
        },
        "FUN_08002fa8": {
            "renaming": {
                "FUN_08002fa8": "update_memory_08002fa8",
                "param_1": "base_address",
                "param_2": "offset",
                "param_3": "new_value",
                "*(char *)(param_1 + param_2 + 0xcc)": "current_value",
                "*(undefined *)(param_1 + param_2 + 0xcc)": "*(char *)(base_address + offset + 0xcc)"
            },
            "code": "void update_memory_08002fa8(int base_address, int offset, char new_value) {\n  char current_value = *(char *)(base_address + offset + 0xcc);\n  if (current_value != '\\x7f') {\n    *(char *)(base_address + offset + 0xcc) = new_value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fa8",
            "calling": [
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "update_memory_08002fa8"
        },
        "FUN_0800325a": {
            "renaming": {
                "FUN_0800325a": "encode_data_with_param_0800325a",
                "param_1": "ptr_param_1",
                "param_2": "param_2",
                "param_3": "data_size",
                "param_4": "param_4",
                "puVar1": "ptr_func_ptr",
                "uVar2": "i"
            },
            "code": "void encode_data_with_param_0800325a(uint32_t *ptr_param_1, uint32_t param_2, uint32_t data_size, int param_4) {\n  uint32_t *ptr_func_ptr = (uint32_t *)*ptr_param_1;\n  if (ptr_func_ptr != NULL) {\n    (**(void (**)(uint32_t *, uint32_t))(ptr_func_ptr))(ptr_func_ptr, 0xf0);\n    (***(void (***)(uint32_t *))((uint32_t *)*ptr_param_1))(ptr_param_1, param_2);\n    for (uint32_t i = 0; i < data_size; i++) {\n      encode_data_0800307a(ptr_param_1, 1, param_4 + i, 0);\n    }\n    (***(void (***)(uint32_t *))((uint32_t *)*ptr_param_1))(ptr_param_1, 0xf7);\n  }\n  return;\n}",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800325a",
            "calling": [
                "FUN_080032a2",
                "FUN_08002f0a"
            ],
            "imported": false,
            "current_name": "encode_data_with_param_0800325a"
        },
        "FUN_080091d8": {
            "renaming": {
                "FUN_080091d8": "insert_node_at_head_080091d8",
                "param_1": "head",
                "param_2": "data",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "ptr",
                "extraout_r1": "extraout_r1",
                "ppiVar2": "prev",
                "ppiVar3": "next",
                "piVar4": "data",
                "ppiVar5": "node",
                "ppiVar6": "prev_data",
                "ppiVar7": "node"
            },
            "code": "void insert_node_at_head_080091d8(int *head, int data, int param_3, int param_4)\n{\n    if (data == 0) {\n        return;\n    }\n    int **node = (int **)(data - 4);\n    if (*(int *)(data - 4) < 0) {\n        node = (int **)((int)node + *(int *)(data - 4));\n    }\n    do_nothing_08009f48();\n    int **ptr = *(int ***)PTR_DAT_0800926c;\n    if (ptr == (int **)0x0) {\n        node[1] = (int *)0x0;\n        *(int ***)PTR_DAT_0800926c = node;\n        int **extraout_r1 = NULL;\n        int **prev = (int **)PTR_DAT_0800926c;\n    }\n    else if (node < ptr) {\n        int **prev = (int **)*node;\n        int **next = (int **)((int)node + (int)prev);\n        if (ptr == next) {\n            int *data = *ptr;\n            ptr = (int **)ptr[1];\n            next = (int **)((int)data + (int)prev);\n            *node = (int *)next;\n        }\n        node[1] = (int *)ptr;\n        *(int ***)PTR_DAT_0800926c = node;\n    }\n    else {\n        int **prev = ptr;\n        while (true) {\n            int **next = (int **)prev[1];\n            if (next == (int **)0x0) break;\n            prev = next;\n        }\n        int **prev_data = (int **)*prev;\n        if ((int **)((int)prev + (int)prev_data) == node) {\n            prev_data = (int **)((int)prev_data + (int)*node);\n            *prev = (int *)prev_data;\n            if (next == (int **)((int)prev + (int)prev_data)) {\n                int *data = *next;\n                next = (int **)next[1];\n                prev_data = (int **)((int)prev_data + (int)data);\n                *prev = (int *)prev_data;\n                prev[1] = (int *)next;\n            }\n        }\n        else if (node < (int **)((int)prev + (int)prev_data)) {\n            *head = 0xc;\n        }\n        else {\n            int **next = (int **)((int)node + (int)*node);\n            if (next == (int **)prev_data) {\n                int *data = *next;\n                next = (int **)next[1];\n                prev_data = (int **)((int)data + (int)*node);\n                *node = (int *)prev_data;\n            }\n            node[1] = (int *)next;\n            prev[1] = (int *)node;\n        }\n    }\n    do_nothing_08009f4a(head, prev, next, param_4);\n    return;\n}",
            "called": [
                "FUN_08009f48",
                "FUN_08009f4a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091d8",
            "calling": [
                "FUN_08009b5c",
                "FUN_08009908",
                "FUN_080091a0",
                "FUN_08009a80"
            ],
            "imported": false,
            "current_name": "insert_node_at_head_080091d8"
        },
        "FUN_0800688e": {
            "renaming": {
                "FUN_0800688e": "check_input_0800688e",
                "param_1": "input_array",
                "param_2": "array_length",
                "param_3": "value",
                "*(char *)((int)param_1 + 0x39)": "input_array[9]",
                "*(char *)(param_1 + 0xe)": "input_array[14]",
                "param_1[8]": "input_array[8]",
                "*(short *)(param_1 + 9)": "input_array[9]",
                "*(short *)((int)param_1 + 0x26)": "input_array[11]",
                "param_1[0xf]": "input_array[15]",
                "*(undefined *)((int)param_1 + 0x39)": "input_array[9]",
                "*(undefined *)(param_1 + 0xe)": "input_array[14]",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*input_array + 0xc)"
            },
            "code": "int check_input_0800688e(int *input_array, int array_length, int value) {\n  if (input_array[9] != ' ') {\n    return 2;\n  }\n  if (array_length == 0) {\n    return 1;\n  }\n  if (value == 0) {\n    return 1;\n  }\n  if (input_array[14] != 1) {\n    input_array[8] = array_length;\n    input_array[9] = (short)value;\n    input_array[11] = (short)value;\n    input_array[15] = 0;\n    input_array[9] = 0x21;\n    input_array[14] = 0;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800688e",
            "calling": [
                "FUN_08008694",
                "FUN_08008730"
            ],
            "imported": false,
            "current_name": "check_input_0800688e"
        },
        "FUN_080088e0": {
            "renaming": {
                "FUN_080088e0": "decode_data_080088e0",
                "param_1": "data_position",
                "param_2": "bit_data",
                "iVar1": "is_param1_in_param2",
                "uVar2": "bit_count",
                "iVar3": "data_index",
                "PTR_DAT_0800897c": "array_data",
                "PTR_DAT_08008980": "array_data2",
                "decode_data_08008990": "decode_data_from_bit",
                "PTR_DAT_08008988": "array_data3",
                "decode_data_from_bit_08008a24": "decode_data_from_bit",
                "get_bit_at_position_08006b28": "get_bit_at_position",
                "PTR_DAT_08008984": "array_data4",
                "set_bit_in_array_08006b3e": "set_bit_in_array",
                "process_data_08007118": "process_data",
                "DAT_0800898c": "array_data5"
            },
            "code": "void decode_data_080088e0(uint data_position, uint bit_data)\n{\n  int data_index;\n  uint bit_count;\n  int is_param1_in_param2;\n  \n  if (data_position < 0x3c) {\n    data_index = (int)(char)PTR_DAT_0800897c[data_position];\n  }\n  else {\n    data_index = -1;\n  }\n  if (data_index != -1) {\n    is_param1_in_param2 = is_data_index_in_array(data_index, PTR_DAT_08008980);\n    if (is_param1_in_param2 == 0) {\n      decode_data_080088e0_08008990(data_position,1);\n      bit_count = *(uint *)PTR_DAT_08008988;\n      if (bit_count != 8) {\n        if (bit_count < 9) {\n          bit_data = bit_data << (8 - bit_count & 0xff);\n        }\n        else {\n          bit_data = bit_data >> (bit_count - 8 & 0xff);\n        }\n      }\n      if (bit_data < 0x80) {\n        decode_data_080088e0_from_bit_08008a24(data_position,0);\n      }\n      else {\n        decode_data_080088e0_from_bit(data_position,1);\n      }\n    }\n    else {\n      is_param1_in_param2 = get_bit_at_position_08006b28(data_index,PTR_DAT_08008984);\n      if (is_param1_in_param2 == 0) {\n        set_bit_in_array_08006b3e(data_index,PTR_DAT_08008984);\n      }\n      bit_count = *(uint *)PTR_DAT_08008988;\n      if (bit_count != 8) {\n        if (bit_count < 9) {\n          bit_data = bit_data << (8 - bit_count & 0xff);\n        }\n        else {\n          bit_data = bit_data >> (bit_count - 8 & 0xff);\n        }\n      }\n      process_data_08007118(data_index, DAT_0800898c, 0xff, bit_data, is_param1_in_param2 == 0);\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08006b3e",
                "FUN_08006b28",
                "FUN_08008990",
                "FUN_0800738a",
                "FUN_08008a24",
                "FUN_08007118"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080088e0",
            "calling": [
                "FUN_0800021a",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "decode_data_080088e0"
        },
        "FUN_08008b66": {
            "renaming": {
                "FUN_08008b66": "update_combination_08008b66",
                "param_1": "combination_ptr",
                "iVar1": "is_valid_combination",
                "uVar2": "new_index",
                "local_9": "new_value"
            },
            "code": "void update_combination_08008b66(int combination_ptr) {\n  int is_valid_combination;\n  ushort new_index;\n  undefined new_value;\n  is_valid_combination = check_combination_validity(combination_ptr, &new_value);\n  if (is_valid_combination == 0) {\n    new_index = *(ushort *)(combination_ptr + 0x60) + 1U & 0x3f;\n    if (new_index != *(ushort *)(combination_ptr + 0x62)) {\n      *(undefined *)(*(int *)(combination_ptr + 0x5c) + (uint)*(ushort *)(combination_ptr + 0x60)) = new_value;\n      *(ushort *)(combination_ptr + 0x60) = new_index;\n    }\n  }\n}",
            "called": [
                "FUN_08008600"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b66",
            "calling": [],
            "imported": false,
            "current_name": "update_combination_08008b66"
        },
        "FUN_0800870c": {
            "renaming": {
                "FUN_0800870c": "execute_function_based_on_array_value_0800870c",
                "uVar1": "array_index",
                "find_index_of_value_in_array_080086e8": "find_index_of_value_in_array",
                "PTR_DAT_08008728": "function_pointer_array",
                "PTR_DAT_0800872c": "parameter_array",
                "code": "function_pointer",
                "undefined4": "parameter_value"
            },
            "code": "void execute_function_based_on_array_value_0800870c(void)\n{\n  uint array_index = find_index_of_value_in_array();\n  if (array_index < 5) {\n    void (*function_pointer)(int) = *(void (**)(int))(PTR_DAT_08008728 + array_index * 4);\n    int parameter_value = *(int *)(PTR_DAT_0800872c + array_index * 4);\n    function_pointer(parameter_value);\n  }\n  return;\n}",
            "called": [
                "FUN_080086e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800870c",
            "calling": [
                "FUN_0800694c"
            ],
            "imported": false,
            "current_name": "execute_function_based_on_array_value_0800870c"
        },
        "FUN_08008840": {
            "renaming": {
                "FUN_08008840": "return_max_uint_08008840"
            },
            "code": "uint32_t return_max_uint_08008840(void)\n{\n    return UINT32_MAX;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008840",
            "calling": [],
            "imported": false,
            "current_name": "return_max_uint_08008840"
        },
        "FUN_08008600": {
            "renaming": {
                "FUN_08008600": "check_combination_validity_08008600",
                "param_1": "combination_length",
                "param_2": "combination",
                "param_3": "max_combination_length",
                "param_4": "ptr_combination_lengths",
                "iVar1": "is_valid"
            },
            "code": "int check_combination_validity_08008600(int combination_length, undefined* combination, int max_combination_length, int* ptr_combination_lengths){\n  if (combination_length == 0) {\n    return -1;\n  }\n  int is_valid = is_combination_valid();\n  if (is_valid == 0) {\n    *combination = *(undefined *)(combination_length + 0x45);\n    check_space_after_string(*(int *)(PTR_DAT_08008638 + (uint)*(byte *)(combination_length + 0x44) * 4), combination_length + 0x45,1, PTR_DAT_08008638, *ptr_combination_lengths);\n    return 0;\n  }\n  return -1;\n}",
            "called": [
                "FUN_080068d6",
                "FUN_080085b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008600",
            "calling": [
                "FUN_08008b66"
            ],
            "imported": false,
            "current_name": "check_combination_validity_08008600"
        },
        "FUN_08003154": {
            "renaming": {
                "FUN_08003154": "set_value_to_pointer_08003154",
                "param_1": "pointer",
                "param_2": "value",
                "*param_1": "*pointer"
            },
            "code": "void set_value_to_pointer_08003154(int* pointer, int value) {\n  *pointer = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003154",
            "calling": [
                "FUN_08002e26"
            ],
            "imported": false,
            "current_name": "set_value_to_pointer_08003154"
        },
        "FUN_08006420": {
            "renaming": {
                "FUN_08006420": "update_bits_at_offset_08006420",
                "param_1": "ptr_data",
                "param_2": "bit_offset",
                "param_3": "new_bits_value",
                "*(uint *)(param_1 + 0x20)": "*ptr_bits",
                "*(uint *)(param_1 + 0x20) & ~(4 << (param_2 & 0xff))": "clear_mask",
                "param_3 << (param_2 & 0xff)": "set_mask"
            },
            "code": "void update_bits_at_offset_08006420(uint32_t* ptr_data, uint8_t bit_offset, uint32_t new_bits_value)\n{\n  uint32_t* ptr_bits = ptr_data + 0x20;\n  uint32_t clear_mask = ~(4 << (bit_offset & 0xff));\n  uint32_t set_mask = new_bits_value << (bit_offset & 0xff);\n  *ptr_bits = (*ptr_bits & clear_mask) | set_mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006420",
            "calling": [
                "FUN_08006460",
                "FUN_0800643c"
            ],
            "imported": false,
            "current_name": "update_bits_at_offset_08006420"
        },
        "FUN_08007750": {
            "renaming": {
                "FUN_08007750": "set_value_at_offset_08007750",
                "param_1": "base_address",
                "param_2": "offset",
                "param_3": "value",
                "PTR_": "ptr_to_",
                "DAT_": "data_"
            },
            "code": "void set_value_at_offset_08007750(int base_address, int offset, int value) {\n    int* PTR_array = *(int*)(base_address + 4);\n    int* address_to_set = PTR_array + 0x34 + offset * 4;\n    *address_to_set = value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007750",
            "calling": [],
            "imported": false,
            "current_name": "set_value_at_offset_08007750"
        },
        "FUN_08009938": {
            "renaming": {
                "FUN_08009938": "find_character_in_string_08009938",
                "param_1": "str",
                "param_2": "ch",
                "pcVar1": "current_char_ptr"
            },
            "code": "char* find_character_in_string_08009938(char* str, char ch) {\n  char* current_char_ptr;\n  do {\n    current_char_ptr = str;\n    if (*current_char_ptr == '\\0') {\n      if (ch != '\\0') {\n        current_char_ptr = (char*)0x0;\n      }\n      return current_char_ptr;\n    }\n    str = current_char_ptr + 1;\n  } while (ch != *current_char_ptr);\n  return current_char_ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009938",
            "calling": [
                "FUN_0800997e"
            ],
            "imported": false,
            "current_name": "find_character_in_string_08009938"
        },
        "FUN_08007f0e": {
            "renaming": {
                "FUN_08007f0e": "process_data_08007f0e",
                "param_1": "data",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "iVar1": "starting_value",
                "iVar2": "value_at_offset_3",
                "uVar3": "difference",
                "iVar4": "result",
                "iVar5": "data_pointer",
                "uVar6": "param_4"
            },
            "code": "int process_data_08007f0e(int data, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  int starting_value = get_data_from_pointer();\n  uint difference = 0;\n  int result = 2;\n  do {\n    int data_pointer = data + 4;\n    int process_result = process_data_08007f0e_080047f4(data_pointer, param_2, param_3, param_4, param_4);\n    if (process_result == 0) {\n      result = 0;\n      int value_at_offset = get_value_at_offset_0x3d_0800542a(data_pointer);\n      while (value_at_offset != 0x20 && result == 0) {\n        int new_data = get_data_from_pointer();\n        difference = new_data - starting_value;\n        if (difference < 0x65) {\n          int value_at_offset_2 = get_value_at_offset_08005430(data_pointer);\n          if (value_at_offset_2 != 0) {\n            result = 2;\n          }\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    int value_at_offset_3 = get_value_at_offset_08005430(data_pointer);\n  } while (value_at_offset_3 == 4 && difference < 100);\n  return result;\n}",
            "called": [
                "FUN_080047f4",
                "FUN_08003760",
                "FUN_08005430",
                "FUN_0800542a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f0e",
            "calling": [
                "FUN_08002b68"
            ],
            "imported": false,
            "current_name": "process_data_08007f0e"
        },
        "FUN_08004004": {
            "renaming": {
                "FUN_08004004": "set_bit_08004004",
                "param_1": "bit_index",
                "DAT_08004020": "data_start_ptr"
            },
            "code": "void set_bit_08004004(uint bit_index) {\n  if (bit_index >= 0) {\n    int* data_ptr = (int *)(DAT_08004020 + ((bit_index >> 5) + 0x60) * 4);\n    int bit_offset = bit_index & 0x1f;\n    *data_ptr = 1 << bit_offset;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004004",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_08004004"
        },
        "FUN_08003158": {
            "renaming": {
                "FUN_08003158": "encode_data_08003158_08003158",
                "param_1": "data_ptr",
                "param_2": "data_len",
                "param_3": "data_value",
                "puVar1": "func_ptr",
                "local_a": "encoded_value"
            },
            "code": "void encode_data_08003158_08003158(undefined4 *data_ptr, uint data_len, ushort data_value) {\n  undefined4 *func_ptr;\n  ushort encoded_value;\n  func_ptr = (undefined4 *)*data_ptr;\n  if (func_ptr != (undefined4 *)0x0) {\n    encoded_value = data_value;\n    if (((int)data_len < 0x10) && (data_value < 0x4000)) {\n      (**(code **)*func_ptr)(func_ptr, data_len | 0xe0);\n      encode_data_0800307a(data_ptr, 2, &encoded_value);\n    }\n    else {\n      encode_data_08003106_08003106(data_ptr, data_len, 2, &encoded_value);\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08003106",
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003158",
            "calling": [
                "FUN_08002ef2"
            ],
            "imported": false,
            "current_name": "encode_data_08003158_08003158"
        },
        "FUN_080090c2": {
            "renaming": {
                "FUN_080090c2": "calculate_080090c2",
                "param_1": "param_1_value",
                "param_2": "param_2_value",
                "calculate_result_08009108": "calculate_result"
            },
            "code": "void calculate_080090c2(param_2_value, param_1_value){\n  calculate_080090c2_result(param_2_value, param_1_value);\n  return;\n}",
            "called": [
                "FUN_08009108"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090c2",
            "calling": [
                "FUN_08008f78"
            ],
            "imported": false,
            "current_name": "calculate_080090c2"
        },
        "FUN_08000ef8": {
            "renaming": {
                "FUN_08000ef8": "FUNC_08000ef8"
            },
            "code": "\nvoid FUNC_08000ef8(void)\n\n{\n  byte bVar1;\n  int iVar2;\n  bool bVar3;\n  byte bVar4;\n  \n  if (*PTR_DAT_08001188 != '\\0') {\n    bVar1 = *PTR_DAT_0800118c;\n    if (*PTR_DAT_08001190 == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)*PTR_DAT_08001190);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(0);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_08001190[1] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001190[1]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(1);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_08001190[2] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001190[2]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(2);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_08001190[3] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001190[3]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(3);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_08001190[4] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001190[4]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(4);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_08001190[5] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001190[5]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(5);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_08001190[6] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001190[6]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(6);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_08001190[7] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001190[7]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(7);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    execute_function_08000be8(0,bVar4);\n  }\n  if (PTR_DAT_08001188[1] != '\\0') {\n    bVar1 = PTR_DAT_0800118c[1];\n    if (PTR_DAT_08001190[8] == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001424[8]);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(8);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_08001424[9] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001424[9]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(9);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_08001424[10] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001424[10]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(10);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_08001424[0xb] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001424[0xb]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(0xb);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_08001424[0xc] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001424[0xc]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(0xc);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_08001424[0xd] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001424[0xd]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(0xd);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_08001424[0xe] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001424[0xe]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(0xe);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_08001424[0xf] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001424[0xf]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(0xf);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    execute_function_08000be8(1,bVar4,0);\n  }\n  if (PTR_DAT_08001428[2] != '\\0') {\n    bVar1 = PTR_DAT_0800142c[2];\n    if (PTR_DAT_08001424[0x10] == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001424[0x10]);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(0x10);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_080016c4[0x11] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_080016c4[0x11]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(0x11);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_080016c4[0x12] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_080016c4[0x12]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(0x12);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_080016c4[0x13] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_080016c4[0x13]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(0x13);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_080016c4[0x14] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_080016c4[0x14]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(0x14);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_080016c4[0x15] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_080016c4[0x15]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(0x15);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_080016c4[0x16] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_080016c4[0x16]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(0x16);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_080016c4[0x17] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_080016c4[0x17]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(0x17);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    execute_function_08000be8(2,bVar4,0);\n  }\n  if (PTR_DAT_080016c8[3] != '\\0') {\n    bVar1 = PTR_DAT_080016cc[3];\n    if (PTR_DAT_080016c4[0x18] == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_080016c4[0x18]);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(0x18);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_080016c4[0x19] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001960[0x19]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(0x19);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_08001960[0x1a] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001960[0x1a]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(0x1a);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_08001960[0x1b] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001960[0x1b]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(0x1b);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_08001960[0x1c] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001960[0x1c]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(0x1c);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_08001960[0x1d] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001960[0x1d]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(0x1d);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_08001960[0x1e] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001960[0x1e]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(0x1e);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_08001960[0x1f] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001960[0x1f]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(0x1f);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    execute_function_08000be8(3,bVar4,0);\n  }\n  if (PTR_DAT_08001964[4] != '\\0') {\n    bVar1 = PTR_DAT_08001968[4];\n    if (PTR_DAT_08001960[0x20] == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001960[0x20]);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(0x20);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_08001960[0x21] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001960[0x21]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(0x21);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_08001b44[0x22] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001b44[0x22]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(0x22);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_08001b44[0x23] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001b44[0x23]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(0x23);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_08001b44[0x24] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001b44[0x24]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(0x24);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_08001b44[0x25] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001b44[0x25]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(0x25);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_08001b44[0x26] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001b44[0x26]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(0x26);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_08001b44[0x27] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001b44[0x27]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_param_08008a6c(0x27);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    execute_function_08000be8(4,bVar4,0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080036ac",
                "FUN_08008a6c",
                "FUN_08000be8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000ef8",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "FUNC_08000ef8"
        },
        "FUN_08008846": {
            "renaming": {
                "FUN_08008846": "set_memory_permissions_08008846",
                "param_1": "address",
                "param_2": "permissions",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "int set_memory_permissions_08008846(int address, int permissions) {\n    *(int *)(address + 4) = permissions;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008846",
            "calling": [
                "FUN_0800a0ec"
            ],
            "imported": false,
            "current_name": "set_memory_permissions_08008846"
        },
        "FUN_0800a430": {
            "renaming": {
                "FUN_0800a430": "do_nothing_0800a430"
            },
            "code": "\nvoid do_nothing_0800a430(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a430",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_0800a430"
        },
        "FUN_0800459c": {
            "renaming": {
                "FUN_0800459c": "increment_data_and_decrement_count_if_not_zero_0800459c",
                "param_1": "data_array",
                "puVar1": "data_to_increment",
                "PTR_0010": "data_pointer",
                "DAT_0014": "count",
                "PTR_0024": "incremented_data_pointer"
            },
            "code": "int increment_data_and_decrement_count_if_not_zero_0800459c(int *data_array){\n  int* data_ptr = data_array;\n  short* DAT_0014_ptr = (short*)(data_array + 0x2a);\n  if (*DAT_0014_ptr != 0) {\n    char* data_to_increment = (char*)data_array[9];\n    data_array[9] = (int)(data_to_increment + 1);\n    *data_to_increment = (char)*(int*)(*data_array + 0x10);\n    *DAT_0014_ptr -= 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800459c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "increment_data_and_decrement_count_if_not_zero_0800459c"
        },
        "FUN_0800774a": {
            "renaming": {
                "FUN_0800774a": "set_value_at_offset_0800774a",
                "param_1": "struct_ptr",
                "param_2": "value",
                "*(undefined4 *)(*(int *)(param_1 + 4) + 0x24)": "*ptr_to_offset",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void set_value_at_offset_0800774a(int struct_ptr, int offset, int value)\n{\n  int* PTR_to_offset = *(int*)(struct_ptr + 4) + offset;\n  *PTR_to_offset = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800774a",
            "calling": [],
            "imported": false,
            "current_name": "set_value_at_offset_0800774a"
        },
        "FUN_080042f0": {
            "renaming": {
                "FUN_080042f0": "check_and_process_binary_080042f0",
                "param_1": "flags",
                "DAT_08004308": "data_start_ptr"
            },
            "code": "void check_and_process_binary_080042f0(uint flags) {\n    uint* data_ptr = (uint*)(DAT_08004308 + 0x14);\n    if ((*data_ptr & flags) != 0) {\n        *data_ptr = flags;\n        process_binary_if_length_not_null_08009094();\n    }\n    return;\n}",
            "called": [
                "FUN_08009094"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042f0",
            "calling": [],
            "imported": false,
            "current_name": "check_and_process_binary_080042f0"
        },
        "FUN_080027f0": {
            "renaming": {
                "FUN_080027f0": "copy_data_080027f0",
                "param_1": "buffer_offset",
                "param_2": "data",
                "param_3": "data_length",
                "cVar1": "current_char",
                "puVar2": "buffer_ptr",
                "iVar3": "copy_result",
                "uVar4": "return_value",
                "uVar5": "new_data_length"
            },
            "code": "uint copy_data_080027f0(uint buffer_offset, uint data, uint data_length) {\n  char current_char;\n  undefined *buffer_ptr;\n  int copy_result;\n  undefined return_value;\n  uint new_data_length;\n  \n  buffer_ptr = PTR_DAT_08002884;\n  if (*PTR_DAT_08002878 == '\\0') {\n    copy_result = copy_data_080027f0_to_buffer_08007ede(buffer_offset + 0x14, data, data_length & 0xffff);\n    if (copy_result != 0) {\n      return 0;\n    }\n    return data_length;\n  }\n  new_data_length = (byte)*PTR_DAT_0800287c + data_length;\n  if ((byte)*PTR_DAT_08002880 < new_data_length) {\n    if (new_data_length < 0x20) {\n      new_data_length = 0x20;\n    }\n    copy_result = allocate_and_copy_data_080027f0_08009908(*(undefined4 *)PTR_DAT_08002884, new_data_length);\n    *(int *)buffer_ptr = copy_result;\n    if (copy_result == 0) {\n      return_value = 0;\n    }\n    else {\n      return_value = (undefined)new_data_length;\n    }\n    *PTR_DAT_08002880 = return_value;\n  }\n  buffer_ptr = PTR_DAT_08002888;\n  if (*(int *)PTR_DAT_08002884 != 0) {\n    copy_data_080027f0_to_destination_080091b0((uint)(byte)*PTR_DAT_08002888 + *(int *)PTR_DAT_08002884, data, data_length);\n    current_char = *buffer_ptr + (char)data_length;\n    *buffer_ptr = current_char;\n    *PTR_DAT_0800287c = current_char;\n    return data_length;\n  }\n  *(undefined4 *)(buffer_offset + 4) = 1;\n  return 0;\n}",
            "called": [
                "FUN_08009908",
                "FUN_08007ede",
                "FUN_080091b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080027f0",
            "calling": [],
            "imported": false,
            "current_name": "copy_data_080027f0"
        },
        "FUN_0800314e": {
            "renaming": {
                "FUN_0800314e": "set_param_to_zero_0800314e",
                "param_1": "param"
            },
            "code": "void set_param_to_zero_0800314e(int *param){\n    *param = 0;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800314e",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_param_to_zero_0800314e"
        },
        "FUN_080076e0": {
            "renaming": {
                "FUN_080076e0": "update_flags_and_clear_bits_in_array_080076e0",
                "*param_1": "*params",
                "cVar1": "param_check",
                "PTR_08007544": "check_param",
                "set_bit_at_index_08003fb0": "set_bit_at_index",
                "iVar2": "flags_updated",
                "update_flags_on_param_08005df4": "update_flags_on_param",
                "clear_and_set_bits_in_uint_array_080062f4": "clear_and_set_bits_in_uint_array"
            },
            "code": "void update_flags_and_clear_bits_in_array_080076e0(uint32_t *params) {\n  params[19] = 0;\n  char param_check = PTR_08007544(*params);\n  set_bit_at_index_08003fb0(param_check);\n  int flags_updated = update_flags_on_param_08005df4(params + 1);\n  if (flags_updated == 0) {\n    clear_and_set_bits_in_uint_array_080062f4(params + 1, 0);\n  }\n  return;\n}",
            "called": [
                "FUN_080062f4",
                "FUN_08007544",
                "FUN_08005df4",
                "FUN_08003fb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080076e0",
            "calling": [
                "FUN_08002578"
            ],
            "imported": false,
            "current_name": "update_flags_and_clear_bits_in_array_080076e0"
        },
        "FUN_08002f14": {
            "renaming": {
                "FUN_08002f14": "encode_data_08002f14",
                "param_1": "input_data",
                "encode_data_with_length_080032a2": "encode_data_with_length"
            },
            "code": "void encode_data_08002f14(int input_data){\n    encode_data_08002f14_with_length(input_data + 64);\n    return;\n}",
            "called": [
                "FUN_080032a2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f14",
            "calling": [
                "FUN_08001cd0",
                "FUN_08000500",
                "FUN_08001c18",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "encode_data_08002f14"
        },
        "FUN_080036a2": {
            "renaming": {
                "FUN_080036a2": "initialize_and_write_data_080036a2"
            },
            "code": "void initialize_and_write_data_080036a2(void)\n{\n  initialize_and_write_data_080036a2_080072fa();\n  return;\n}",
            "called": [
                "FUN_080072fa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036a2",
            "calling": [
                "FUN_08008f0e"
            ],
            "imported": false,
            "current_name": "initialize_and_write_data_080036a2"
        },
        "FUN_080038e4": {
            "renaming": {
                "FUN_080038e4": "decode_080038e4",
                "param_1": "input_array",
                "param_2": "output_array",
                "uVar1": "status",
                "uVar2": "shift_amount",
                "iVar3": "i",
                "local_c": "loop_counter",
                "*param_1": "input_array_value",
                "*(char *)(param_1 + 9)": "input_array_value_at_offset_9",
                "*(undefined *)(param_1 + 9)": "input_array_value_at_offset_9",
                "*(uint *)(*param_1 + 0x34)": "output_array_value_at_offset_0x34",
                "*(uint *)(*param_1 + 0x30)": "output_array_value_at_offset_0x30",
                "*(uint *)(*param_1 + 0x2c)": "output_array_value_at_offset_0x2c",
                "*(uint *)(*param_1 + 0x10)": "output_array_value_at_offset_0x10",
                "*(uint *)(*param_1 + 0xc)": "output_array_value_at_offset_0xc",
                "*(uint *)(iVar3 + 8)": "value_at_offset_8",
                "DAT_08003a10": "constant_value",
                "*(uint *)(iVar3 + 8) & 0x800000": "bitwise_and_operation",
                "*param_2": "input_array_value_at_offset_0",
                "param_2[1]": "input_array_value_at_offset_1",
                "param_2[2]": "input_array_value_at_offset_2",
                "PTR_DAT_08003a14": "pointer_value",
                "DAT_08003a18": "constant_value"
            },
            "code": "uint32_t decode_080038e4(uint32_t *input_array, uint32_t *output_array){\n    uint32_t status;\n    uint32_t shift_amount, shift_mask, shift_offset;\n    uint32_t *output_ptr;\n    uint32_t *input_ptr;\n    bool is_output_array_0x10;\n    \n    if (*(char *)(input_array + 9) == '\\x01') {\n        status = 2;\n    }\n    else {\n        *(undefined *)(input_array + 9) = 1;\n        shift_offset = 0;\n        shift_mask = 0x1f;\n        output_ptr = (uint32_t *)(*input_array + 0x34);\n        input_ptr = input_array + 1;\n        is_output_array_0x10 = *input_array == 0x10;\n        if (*input_ptr < 7) {\n            shift_offset = (*input_ptr * 5) - 5;\n            shift_mask <<= shift_offset;\n            *output_ptr = *input_array << shift_offset | (*output_ptr & ~shift_mask);\n        }\n        else if (*input_ptr < 0xd) {\n            shift_offset = (*input_ptr * 5) - 0x23;\n            shift_mask <<= shift_offset;\n            output_ptr = (uint32_t *)(*input_array + 0x30);\n            *output_ptr = *input_array << shift_offset | (*output_ptr & ~shift_mask);\n        }\n        else {\n            shift_offset = (*input_ptr * 5) - 0x41;\n            shift_mask <<= shift_offset;\n            output_ptr = (uint32_t *)(*input_array + 0x2c);\n            *output_ptr = *input_array << shift_offset | (*output_ptr & ~shift_mask);\n        }\n        shift_mask = 7;\n        shift_offset = 0;\n        output_ptr = (uint32_t *)(*input_array + 0x10);\n        input_ptr = input_array + 2;\n        if (*input_array >= 10) {\n            shift_offset = (*input_array * 3) - 0x1e;\n            shift_mask <<= shift_offset;\n            output_ptr = (uint32_t *)(*input_array + 0xc);\n        }\n        *output_ptr = *input_ptr << shift_offset | (*output_ptr & ~shift_mask);\n        if (*input_array - 0x10 < 2) {\n            if (*input_array == 0x10) {\n                if ((*(uint32_t *)(*input_array + 8) & 0x800000) == 0) {\n                    *(uint32_t *)(*input_array + 8) |= 0x800000;\n                    for (int i = 0; i < (uint32_t)((uint64_t)DAT_08003a18 * (uint64_t)*PTR_DAT_08003a14 >> 0x32) * 10; i++) {};\n                    status = 0;\n                }\n                else {\n                    status = 0;\n                }\n            }\n            else {\n                input_array[10] |= 0x20;\n                status = 1;\n            }\n        }\n        else {\n            status = 0;\n        }\n        *(undefined *)(input_array + 9) = 0;\n    }\n    return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038e4",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "decode_080038e4"
        },
        "FUN_08005e68": {
            "renaming": {
                "FUN_08005e68": "do_nothing_08005e68"
            },
            "code": "\nvoid do_nothing_08005e68(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e68",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_08005e68"
        },
        "FUN_08005d48": {
            "renaming": {
                "FUN_08005d48": "update_data_08005d48",
                "param_1": "data_address",
                "param_2": "data_array",
                "uVar1": "data2",
                "uVar2": "uVar2",
                "uVar3": "data1",
                "mask1": "mask1"
            },
            "code": "void update_data_08005d48(int data_address, uint *data_array)\n{\n  uint mask1 = 0xfffffeff;\n  uint uVar2 = *(uint *)(data_address + 4);\n  uint data1 = *data_array;\n  uint data2 = (*(uint *)(data_address + 0x20) & 0xfffffdff) | (data_array[2] << 8);\n  if (data_address == PTR_08005da8) {\n    data2 = (data2 & 0xfffff7ff | data_array[3] << 8) & 0xfffffbff;\n    uVar2 = (uVar2 & 0xffffcfff) | (data_array[5] << 4) | (data_array[6] << 4);\n  }\n  *(uint *)(data_address + 4) = uVar2;\n  *(uint *)(data_address + 0x1c) = (*(uint *)(data_address + 0x1c) & 0xffffff8c) | data1;\n  *(uint *)(data_address + 0x3c) = data_array[1];\n  *(uint *)(data_address + 0x20) = data2;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d48",
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "imported": false,
            "current_name": "update_data_08005d48"
        }
    },
    "used_tokens": 290182,
    "layers": [
        [
            "FUN_08002c2c",
            "FUN_08000178",
            "FUN_0800735a",
            "FUN_08008c20",
            "FUN_080043a2",
            "FUN_08008df8",
            "FUN_08006b5c",
            "FUN_08000188",
            "FUN_0800344a",
            "FUN_08008e72",
            "FUN_0800291c",
            "FUN_08003346",
            "FUN_080032bc",
            "FUN_08003f94",
            "FUN_0800430c",
            "FUN_08003350",
            "FUN_08006b7c",
            "FUN_08005fe8",
            "FUN_08008804",
            "FUN_0800738a",
            "FUN_08004e3c",
            "FUN_08007718",
            "FUN_08002a30",
            "FUN_0800322c",
            "FUN_080099a4",
            "FUN_08005a1c",
            "FUN_08003760",
            "FUN_08003fd8",
            "FUN_0800307a",
            "FUN_08008d00",
            "FUN_08004b82",
            "FUN_08003f30",
            "FUN_08007f78",
            "FUN_08006b28",
            "FUN_08006b1c",
            "FUN_08008f3c",
            "FUN_08007332",
            "FUN_080073e8",
            "FUN_08004a76",
            "FUN_0800267c",
            "FUN_080047f4",
            "FUN_080033a8",
            "FUN_08008d18",
            "FUN_08005840",
            "FUN_08003306",
            "FUN_080060c4",
            "FUN_08002f84",
            "FUN_08009f2c",
            "FUN_0800a154",
            "FUN_08002580",
            "FUN_08006b3e",
            "FUN_08006262",
            "FUN_080073ec",
            "FUN_08008ef4",
            "FUN_08005a68",
            "FUN_08002f94",
            "FUN_080068d6",
            "FUN_08009148",
            "FUN_08008854",
            "FUN_080064cc",
            "FUN_08004d6c",
            "FUN_08008850",
            "FUN_08002fc2",
            "FUN_08008afa",
            "FUN_080038dc",
            "FUN_08008858",
            "FUN_08004a24",
            "FUN_08002fba",
            "FUN_080049e0",
            "FUN_08006d24",
            "FUN_080048c8",
            "FUN_08009954",
            "FUN_08004024",
            "FUN_08002400",
            "FUN_08008868",
            "FUN_080036ac",
            "FUN_08002f1e",
            "FUN_080026f8",
            "FUN_08004396",
            "FUN_08003fb0",
            "FUN_08002ec4",
            "FUN_08007306",
            "FUN_08002f2c",
            "FUN_08004954",
            "FUN_08005cec",
            "FUN_0800886c",
            "FUN_08003748",
            "FUN_080040e8",
            "FUN_0800010c",
            "FUN_080086e8",
            "FUN_08004046",
            "FUN_080073ae",
            "FUN_08003f0c",
            "FUN_08006bb8",
            "FUN_08007438",
            "FUN_0800887c",
            "FUN_08004728",
            "FUN_08007ede",
            "thunk_FUN_0800887c",
            "FUN_080074e0",
            "FUN_080073c0",
            "FUN_08004050",
            "FUN_080095a8",
            "FUN_08003366",
            "FUN_080091b0",
            "FUN_08009108",
            "FUN_080005e0",
            "FUN_08005dac",
            "FUN_0800270c",
            "FUN_08003370",
            "FUN_08003376",
            "FUN_08005430",
            "FUN_08002720",
            "FUN_08005434",
            "FUN_08004ccc",
            "FUN_080042d4",
            "FUN_0800542a",
            "FUN_0800457c",
            "FUN_080091c6",
            "FUN_080064b0",
            "FUN_08009124",
            "FUN_08002fa0",
            "FUN_08003a1c",
            "FUN_08007744",
            "FUN_080042e2",
            "FUN_08002fa8",
            "FUN_080091d8",
            "FUN_0800688e",
            "FUN_08008840",
            "FUN_08003154",
            "FUN_08006420",
            "FUN_08007750",
            "FUN_08009938",
            "FUN_08004004",
            "FUN_08008846",
            "FUN_0800459c",
            "FUN_0800774a",
            "FUN_0800314e",
            "FUN_080038e4",
            "FUN_08005d48"
        ],
        [
            "FUN_08007246",
            "FUN_08008694",
            "FUN_08002ce0",
            "FUN_080072f0",
            "FUN_0800a168",
            "FUN_0800723c",
            "FUN_08006280",
            "FUN_08007258",
            "FUN_0800a0ec",
            "FUN_08007376",
            "FUN_080033cc",
            "FUN_08003106",
            "FUN_08007708",
            "FUN_0800018c",
            "FUN_08006186",
            "FUN_08007710",
            "FUN_08008e7c",
            "FUN_080091a0",
            "FUN_08002948",
            "FUN_08007320",
            "FUN_0800319e",
            "FUN_0800997e",
            "FUN_080085dc",
            "FUN_0800a130",
            "FUN_08006128",
            "FUN_080062f4",
            "FUN_08005a48",
            "FUN_08007f7c",
            "FUN_080072d8",
            "FUN_08007e74",
            "FUN_08002ddc",
            "FUN_08007f8e",
            "FUN_08007110",
            "FUN_08009fe8",
            "FUN_0800734a",
            "FUN_08000aec",
            "FUN_08006390",
            "FUN_08008730",
            "FUN_08006ca8",
            "FUN_080063c0",
            "FUN_08005aa4",
            "FUN_0800643c",
            "FUN_080085b8",
            "FUN_08001c08",
            "FUN_08007ff0",
            "FUN_080036d8",
            "FUN_0800a110",
            "FUN_08003b8c",
            "FUN_08006460",
            "FUN_08008e14",
            "FUN_08005a28",
            "FUN_08008020",
            "FUN_0800771c",
            "FUN_080066e8",
            "FUN_08007fa0",
            "FUN_08008bf4",
            "FUN_080031ce",
            "FUN_08009918",
            "FUN_08007736",
            "FUN_08003a20",
            "FUN_08009cdc",
            "FUN_080026b0",
            "FUN_08006092",
            "FUN_080004d4",
            "FUN_08005cb4",
            "FUN_0800325a",
            "FUN_0800870c",
            "FUN_08007f0e",
            "FUN_080090c2"
        ],
        [
            "FUN_080067ac",
            "FUN_0800694c",
            "FUN_08006c7c",
            "FUN_08004f3c",
            "FUN_08003de4",
            "FUN_08006060",
            "FUN_08003474",
            "FUN_08003aa0",
            "FUN_08003ce8",
            "FUN_08009e64",
            "FUN_08002dbc",
            "FUN_080058d2",
            "FUN_08008ed6",
            "FUN_0800a020",
            "FUN_08006c60",
            "FUN_08006932",
            "FUN_080045c0",
            "FUN_08002efe",
            "FUN_08002df6",
            "FUN_08002c1e",
            "FUN_08008f78",
            "FUN_08008d30",
            "FUN_080032a2",
            "FUN_08005df4",
            "FUN_08004ac2",
            "FUN_08003724",
            "FUN_08002f0a",
            "FUN_08005bb8",
            "FUN_08009270",
            "FUN_08005e6e",
            "FUN_08009b5c",
            "FUN_08008a6c",
            "FUN_080058ac",
            "FUN_08004aec",
            "FUN_0800863c",
            "FUN_080084b0",
            "FUN_08003bd8",
            "FUN_08008a24",
            "FUN_08008abc",
            "FUN_08005e2e",
            "FUN_08002968",
            "FUN_0800a07a",
            "FUN_08002a58",
            "FUN_08006538",
            "FUN_08008600",
            "FUN_08003158"
        ],
        [
            "FUN_080069ec",
            "FUN_08009d24",
            "FUN_080071e4",
            "FUN_08005084",
            "FUN_08002ac0",
            "FUN_08002a1c",
            "FUN_08000be8",
            "FUN_08009190",
            "FUN_08002ef2",
            "FUN_0800376c",
            "FUN_08003e20",
            "FUN_08009eac",
            "FUN_08008eec",
            "FUN_080090cc",
            "FUN_08008500",
            "FUN_08002fca",
            "FUN_080052f0",
            "FUN_08002e26",
            "FUN_080035b8",
            "FUN_08002ed2",
            "FUN_08009908",
            "FUN_0800674e",
            "FUN_08008d8c",
            "FUN_08008b66",
            "FUN_08002f14"
        ],
        [
            "FUN_08005188",
            "FUN_080072fa",
            "FUN_08008c44",
            "FUN_08002a26",
            "FUN_08002acc",
            "FUN_08002e44",
            "FUN_08006d80",
            "FUN_0800885c",
            "FUN_08008990",
            "FUN_0800288c",
            "FUN_080027f0"
        ],
        [
            "FUN_0800a042",
            "FUN_08001bf8",
            "FUN_08000a64",
            "FUN_08008880",
            "FUN_08003002",
            "FUN_08002b68",
            "FUN_080036a2"
        ],
        [
            "FUN_08002c00",
            "FUN_08003048",
            "FUN_08008f0e",
            "FUN_08000488"
        ],
        [
            "FUN_08001b48",
            "FUN_08001c18"
        ],
        [
            "FUN_080022f8"
        ],
        [
            "FUN_08008f1c"
        ],
        [
            "FUN_08003658"
        ],
        [
            "FUN_0800a18c"
        ],
        [
            "FUN_08009084"
        ],
        [
            "FUN_08009094"
        ],
        [
            "FUN_080042f0"
        ],
        [
            "FUN_08007594",
            "FUN_08007544",
            "FUN_08009d50"
        ],
        [
            "FUN_08009c7c",
            "FUN_080075dc",
            "FUN_080076e0"
        ],
        [
            "FUN_0800932c",
            "FUN_08002578",
            "FUN_08007118",
            "FUN_08007648"
        ],
        [
            "FUN_080025ac",
            "FUN_08002644",
            "FUN_080088e0"
        ],
        [
            "FUN_08000214",
            "FUN_08002634",
            "FUN_08000588",
            "FUN_0800021a"
        ],
        [
            "FUN_08000500"
        ]
    ],
    "locked_functions": []
}