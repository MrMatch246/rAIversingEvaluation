{
    "functions": {
        "FUN_00000410": {
            "entrypoint": "0x00000410",
            "current_name": "initialize_and_extract_results_00000410",
            "code": "\nvoid initializeAndExtractResults_00000410(void)\n\n{\n  initializeAndExtractResults_00000410Helper();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000410": "initialize_and_extract_results_00000410",
                "initialize_and_extract_results_00000df4": "initializeAndExtractResultsHelper"
            },
            "calling": [
                "FUN_0000459c"
            ],
            "called": [
                "FUN_00000df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000428": {
            "entrypoint": "0x00000428",
            "current_name": "update_offset_00000428",
            "code": "\ndword updateOffset_00000428(undefined4 *resultPointer,int inputOffset)\n\n{\n  undefined4 interruptStatus;\n  dword updatedOffset;\n  \n  interruptStatus = check_interrupts_00000cd0();\n  updatedOffset = Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  if ((inputOffset + Elf32_Rel_ARRAY_1fff0200[0].r_offset < 0x20030001) &&\n     (0x1fff0def < inputOffset + Elf32_Rel_ARRAY_1fff0200[0].r_offset)) {\n    Elf32_Rel_ARRAY_1fff0200[0].r_offset = inputOffset + Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  }\n  else {\n    *resultPointer = 0xc;\n    updatedOffset = 0xffffffff;\n  }\n  enable_irq_interrupts_if_privileged_00000d0c(interruptStatus);\n  return updatedOffset;\n}\n\n",
            "renaming": {
                "FUN_00000428": "update_offset_00000428",
                "param_1": "resultPointer",
                "param_2": "inputOffset",
                "uVar1": "interruptStatus",
                "local_c": "updatedOffset"
            },
            "calling": [
                "FUN_00004bd0"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000490": {
            "entrypoint": "0x00000490",
            "current_name": "copy_data_00000490",
            "code": "\nundefined4 copyData_00000490(undefined4 source,undefined4 destination,undefined4 srcPtr,undefined4 destPtr)\n\n{\n  undefined4 bytesCopied;\n  \n  bytesCopied = copy_bytes_00000e14(srcPtr,destPtr);\n  return bytesCopied;\n}\n\n",
            "renaming": {
                "FUN_00000490": "copy_data_00000490",
                "param_1": "source",
                "param_2": "destination",
                "param_3": "srcPtr",
                "param_4": "destPtr",
                "uVar1": "bytesCopied"
            },
            "calling": [
                "FUN_00004dc8"
            ],
            "called": [
                "FUN_00000e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000004f2": {
            "entrypoint": "0x000004f2",
            "current_name": "initialize_param_000004f2",
            "code": "\nundefined4 initializeParam_000004f2(undefined4 *paramPointer)\n\n{\n  *paramPointer = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000004f2": "initialize_param_000004f2",
                "param_1": "paramPointer"
            },
            "calling": [
                "FUN_00004e26",
                "FUN_00004dee"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000514": {
            "entrypoint": "0x00000514",
            "current_name": "set_param_and_return_00000514",
            "code": "\nundefined4 set_param_and_return_00000514(undefined4 *output_value)\n\n{\n  *output_value = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00000514": "set_param_and_return_00000514",
                "param_1": "output_value"
            },
            "calling": [
                "FUN_000056b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000534": {
            "entrypoint": "0x00000534",
            "current_name": "check_valid_input_00000534",
            "code": "\nundefined4 checkValidInput_00000534(undefined4 *result,int input)\n\n{\n  undefined4 isValid;\n  \n  *result = 0;\n  if (((input == 0) || (input == 1)) || (input == 2)) {\n    isValid = 1;\n  }\n  else {\n    isValid = 0;\n  }\n  return isValid;\n}\n\n",
            "renaming": {
                "FUN_00000534": "check_valid_input_00000534",
                "param_1": "result",
                "param_2": "input",
                "uVar1": "isValid"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000566": {
            "entrypoint": "0x00000566",
            "current_name": "decode_integer_00000566",
            "code": "\nint decodeInteger_00000566(int input)\n\n{\n  byte byte1;\n  byte byte2;\n  byte byte3;\n  byte byte4;\n  int decodedValue;\n  \n  byte2 = (byte)input;\n  byte3 = (byte)((uint)input >> 8);\n  byte4 = (byte)((uint)input >> 0x10);\n  byte1 = (byte)((uint)input >> 0x18);\n  decodedValue = LZCOUNT((uint)(byte)((((((((byte2 & 1) << 1 | byte2 >> 1 & 1) << 1 | byte2 >> 2 & 1) << 1\n                                  | byte2 >> 3 & 1) << 1 | byte2 >> 4 & 1) << 1 | byte2 >> 5 & 1) <<\n                                1 | byte2 >> 6 & 1) << 1 | byte2 >> 7) << 0x18 |\n                  (uint)(byte)((((((((byte3 & 1) << 1 | byte3 >> 1 & 1) << 1 | byte3 >> 2 & 1) << 1\n                                  | byte3 >> 3 & 1) << 1 | byte3 >> 4 & 1) << 1 | byte3 >> 5 & 1) <<\n                                1 | byte3 >> 6 & 1) << 1 | byte3 >> 7) << 0x10 |\n                  (uint)(byte)((((((((byte4 & 1) << 1 | byte4 >> 1 & 1) << 1 | byte4 >> 2 & 1) << 1\n                                  | byte4 >> 3 & 1) << 1 | byte4 >> 4 & 1) << 1 | byte4 >> 5 & 1) <<\n                                1 | byte4 >> 6 & 1) << 1 | byte4 >> 7) << 8 |\n                  (uint)(byte)((((((((byte1 & 1) << 1 | byte1 >> 1 & 1) << 1 | byte1 >> 2 & 1) << 1\n                                  | byte1 >> 3 & 1) << 1 | byte1 >> 4 & 1) << 1 | byte1 >> 5 & 1) <<\n                                1 | byte1 >> 6 & 1) << 1 | byte1 >> 7));\n  if (input == 0) {\n    decodedValue = -1;\n  }\n  return decodedValue;\n}\n\n",
            "renaming": {
                "FUN_00000566": "decode_integer_00000566",
                "param_1": "input",
                "bVar1": "byte1",
                "bVar2": "byte2",
                "bVar3": "byte3",
                "bVar4": "byte4",
                "iVar5": "decodedValue"
            },
            "calling": [
                "FUN_00000610"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000058e": {
            "entrypoint": "0x0000058e",
            "current_name": "update_pointer_and_value_0000058e",
            "code": "\nvoid updatePointerAndValue_0000058e(int *pointer,undefined4 *value)\n\n{\n  if (*pointer == 0) {\n    *value = value;\n  }\n  else {\n    *value = *(undefined4 *)*pointer;\n    *(undefined4 **)*pointer = value;\n  }\n  *pointer = (int)value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000058e": "update_pointer_and_value_0000058e",
                "param_1": "pointer",
                "param_2": "value"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000005ca": {
            "entrypoint": "0x000005ca",
            "current_name": "extract_value_from_pointer_000005ca",
            "code": "\nundefined4 * extractValueFromPointer_000005ca(int *inputPointer)\n\n{\n  undefined4 *outputPointer;\n  \n  if (*inputPointer == 0) {\n    outputPointer = (undefined4 *)0x0;\n  }\n  else {\n    outputPointer = *(undefined4 **)*inputPointer;\n    if (outputPointer == (undefined4 *)*inputPointer) {\n      *inputPointer = 0;\n    }\n    else {\n      *(undefined4 *)*inputPointer = *outputPointer;\n    }\n  }\n  return outputPointer;\n}\n\n",
            "renaming": {
                "FUN_000005ca": "extract_value_from_pointer_000005ca",
                "param_1": "inputPointer",
                "puVar1": "outputPointer"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000610": {
            "entrypoint": "0x00000610",
            "current_name": "validate_and_update_data_00000610",
            "code": "\nundefined4 validate_and_update_data_00000610(void)\n\n{\n  int data_offset;\n  int decoded_value;\n  undefined4 result;\n  \n  data_offset = DAT_1fff03dc;\n  DAT_1fff0354 = 0;\n  decoded_value = decode_integer(DAT_1fff0424);\n  decoded_value = **(int **)(&DAT_1fff03e4 + decoded_value * 4);\n  if (data_offset == decoded_value + -8) {\n    result = 0;\n  }\n  else {\n    if ((data_offset != 0) && (*(char *)(data_offset + 4) == '\\t')) {\n      *(undefined *)(data_offset + 4) = 10;\n    }\n    *(undefined *)(decoded_value + -4) = 9;\n    DAT_1fff03e0 = *(undefined2 *)(decoded_value + -2);\n    result = 1;\n    DAT_1fff03dc = decoded_value + -8;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000610": "validate_and_update_data_00000610",
                "iVar1": "data_offset",
                "iVar2": "decoded_value",
                "uVar3": "result",
                "decode_integer_00000566": "decode_integer"
            },
            "calling": [],
            "called": [
                "FUN_00000566"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000698": {
            "entrypoint": "0x00000698",
            "current_name": "update_value_and_pointer_00000698",
            "code": "\nvoid updateValueAndPointer_00000698(int pointer,uint value)\n\n{\n  if (value < 9) {\n    if ((8 < *(byte *)(pointer + 4)) &&\n       (extractValueFromPointer(&DAT_1fff03e4 + (uint)*(byte *)(pointer + 5) * 4),\n       *(int *)(&DAT_1fff03e4 + (uint)*(byte *)(pointer + 5) * 4) == 0)) {\n      DAT_1fff0424 = DAT_1fff0424 & ~(1 << *(sbyte *)(pointer + 5));\n    }\n  }\n  else if (*(byte *)(pointer + 4) < 9) {\n    updatePointerAndValue(&DAT_1fff03e4 + (uint)*(byte *)(pointer + 5) * 4,pointer + 8);\n    DAT_1fff0424 = DAT_1fff0424 | 1 << *(sbyte *)(pointer + 5);\n  }\n  *(char *)(pointer + 4) = (char)value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000698": "update_value_and_pointer_00000698",
                "param_1": "pointer",
                "param_2": "value",
                "extract_value_from_pointer_000005ca": "extractValueFromPointer",
                "update_pointer_and_value_0000058e": "updatePointerAndValue"
            },
            "calling": [
                "FUN_00000794",
                "FUN_00002434",
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "called": [
                "FUN_000005ca",
                "FUN_0000058e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000738": {
            "entrypoint": "0x00000738",
            "current_name": "check_memory_protection_00000738",
            "code": "\nvoid checkMemoryProtection_00000738(ushort exceptionNumber)\n\n{\n  int result;\n  \n  if ((*(byte *)(DAT_1fff03dc + 4) < 9) || (exceptionNumber < *(byte *)(DAT_1fff03dc + 5))) {\n    result = get_exception_number_00000d2a();\n    if (result == 0) {\n      enable_memory_protection_0000093c();\n    }\n    else {\n      DAT_1fff0354 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000738": "check_memory_protection_00000738",
                "param_1": "exceptionNumber",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "called": [
                "FUN_0000093c",
                "FUN_00000d2a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000794": {
            "entrypoint": "0x00000794",
            "current_name": "initialize_data_structure_00000794",
            "code": "\nint * initializeDataStructure_00000794(void)\n\n{\n  int returnValue;\n  int index;\n  undefined4 *pointer;\n  uint alignedPointer;\n  int loopCounter1;\n  int loopCounter2;\n  int *pointerStack;\n  \n  checkInterrupts();\n  *(undefined4 *)(&DAT_1fff0358 + DAT_1fff03e0 * 4) = 0;\n  DAT_1fff0350 = DAT_1fff0350 + -1;\n  updateValueAndPointer(DAT_1fff03dc,0);\n  pointer = &DAT_1fff03dc;\n  index = 0;\n  DAT_1fff03dc = 0;\n  FUNC_00000930();\n  alignedPointer = (int)pointer + index & 0xfffffffc;\n  pointerStack = (int *)(alignedPointer - 4);\n  *pointerStack = 0x77777777;\n  if (((uint)pointerStack & 7) != 0) {\n    pointerStack = (int *)(alignedPointer - 8);\n    *pointerStack = 0x88888888;\n  }\n  pointerStack[-1] = 0x1000000;\n  pointerStack[-2] = index << 0xd;\n  pointerStack[-3] = 0x795;\n  pointerStack = pointerStack + -4;\n  *pointerStack = 0;\n  for (loopCounter2 = 3; 0 < loopCounter2; loopCounter2 = loopCounter2 + -1) {\n    pointerStack = pointerStack + -1;\n    *pointerStack = loopCounter2;\n  }\n  pointerStack = pointerStack + -1;\n  *pointerStack = returnValue;\n  for (loopCounter1 = 0xb; 3 < loopCounter1; loopCounter1 = loopCounter1 + -1) {\n    pointerStack = pointerStack + -1;\n    *pointerStack = loopCounter1;\n  }\n  pointerStack[-1] = -3;\n  return pointerStack + -1;\n}\n\n",
            "renaming": {
                "FUN_00000794": "initialize_data_structure_00000794",
                "extraout_r1": "returnValue",
                "iVar1": "index",
                "puVar2": "pointer",
                "uVar3": "alignedPointer",
                "iStack_1c": "loopCounter1",
                "iStack_18": "loopCounter2",
                "piStack_14": "pointerStack",
                "check_interrupts_00000cd0": "checkInterrupts",
                "update_value_and_pointer_00000698": "updateValueAndPointer"
            },
            "calling": [],
            "called": [
                "FUN_00000cd0",
                "FUN_00000698",
                "FUN_00000930"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000007dc": {
            "entrypoint": "0x000007dc",
            "current_name": "initialize_data_000007dc",
            "code": "\nint * initializeData_000007dc(undefined4 param_1,int size,int offset,int baseAddress)\n\n{\n  uint alignedSize;\n  int counter;\n  int i;\n  int *ptr;\n  \n  alignedSize = baseAddress + offset & 0xfffffffc;\n  ptr = (int *)(alignedSize - 4);\n  *ptr = 0x77777777;\n  if (((uint)ptr & 7) != 0) {\n    ptr = (int *)(alignedSize - 8);\n    *ptr = 0x88888888;\n  }\n  ptr[-1] = 0x1000000;\n  ptr[-2] = param_1;\n  ptr[-3] = 0x795;\n  ptr = ptr + -4;\n  *ptr = 0;\n  for (i = 3; 0 < i; i = i + -1) {\n    ptr = ptr + -1;\n    *ptr = i;\n  }\n  ptr = ptr + -1;\n  *ptr = size;\n  for (counter = 0xb; 3 < counter; counter = counter + -1) {\n    ptr = ptr + -1;\n    *ptr = counter;\n  }\n  ptr[-1] = -3;\n  return ptr + -1;\n}\n\n",
            "renaming": {
                "FUN_000007dc": "initialize_data_000007dc",
                "param_2": "size",
                "param_3": "offset",
                "param_4": "baseAddress",
                "uVar1": "alignedSize",
                "local_14": "counter",
                "local_10": "i",
                "local_c": "ptr"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000008b8": {
            "entrypoint": "0x000008b8",
            "current_name": "find_last_offset_000008b8",
            "code": "\nint find_last_offset_000008b8(void)\n\n{\n  Elf32_Rel *rel_entry;\n  \n  for (rel_entry = (Elf32_Rel *)&DAT_1fff0000;\n      (rel_entry->r_offset == 0xe7fee7fe && (rel_entry < Elf32_Rel_ARRAY_1fff0200));\n      rel_entry = (Elf32_Rel *)&rel_entry->r_info) {\n  }\n  return ((int)Elf32_Rel_ARRAY_1fff0200 - (int)rel_entry >> 2) << 2;\n}\n\n",
            "renaming": {
                "FUN_000008b8": "find_last_offset_000008b8",
                "local_c": "rel_entry"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000900": {
            "entrypoint": "0x00000900",
            "current_name": "get_main_stack_pointer_00000900",
            "code": "\nundefined4 getMainStackPointer_00000900(void)\n\n{\n  undefined4 mainStackPointer;\n  \n  mainStackPointer = getMainStackPointer_00000900();\n  return mainStackPointer;\n}\n\n",
            "renaming": {
                "FUN_00000900": "get_main_stack_pointer_00000900",
                "uVar1": "mainStackPointer"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000091c": {
            "entrypoint": "0x0000091c",
            "current_name": "get_base_address_0000091c",
            "code": "\nundefined4 getBaseAddress_0000091c(void)\n\n{\n  return 0x1fff0000;\n}\n\n",
            "renaming": {
                "FUN_0000091c": "get_base_address_0000091c"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000930": {
            "entrypoint": "0x00000930",
            "current_name": "FUNC_00000930",
            "code": "\nvoid FUNC_00000930(void)\n\n{\n  check_irq_interrupt_status_00000cf0();\n  software_interrupt(1);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000930": "FUNC_00000930"
            },
            "calling": [
                "FUN_00000794",
                "FUN_00000f8c"
            ],
            "called": [
                "FUN_00000cf0"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0000093c": {
            "entrypoint": "0x0000093c",
            "current_name": "enable_memory_protection_0000093c",
            "code": "\n\n\nvoid enableMemoryProtection_0000093c(void)\n\n{\n  _DAT_e000ed04 = _DAT_e000ed04 | 0x10000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000093c": "enable_memory_protection_0000093c"
            },
            "calling": [
                "FUN_00000738",
                "FUN_00001348",
                "FUN_00002798",
                "FUN_00001cf0",
                "FUN_00002434"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000990": {
            "entrypoint": "0x00000990",
            "current_name": "FUNC_00000990",
            "code": "\nvoid FUNC_00000990(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000990": "FUNC_00000990"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x0000099c",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  undefined4 uStack_18;\n  undefined4 *local_14;\n  dword *local_10;\n  Elf32_Rel *local_c;\n  \n  local_14 = &uStack_18;\n  local_10 = (dword *)&DAT_00007c60;\n  initialize_00000db0();\n  local_c = (Elf32_Rel *)&DAT_1fff0000;\n  while (local_c < &uStack_18) {\n    local_c->r_offset = 0xe7fee7fe;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  local_c = Elf32_Rel_ARRAY_1fff0200;\n  while (local_c < (Elf32_Rel *)&DAT_1fff0350) {\n    local_c->r_offset = *local_10;\n    local_10 = local_10 + 1;\n    local_c = (Elf32_Rel *)&local_c->r_info;\n  }\n  local_c = (Elf32_Rel *)&DAT_1fff0350;\n  while (local_c < (undefined4 *)0x1fff0df0) {\n    local_c->r_offset = 0;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  FUNC_00000990();\n  initialize_system_00000e64();\n  execute_function_table_0000459c();\n  initialize_object_and_set_value_00000f8c();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_00000db0",
                "FUN_0000459c",
                "FUN_00000e64",
                "FUN_00000990",
                "FUN_00000f8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000a30": {
            "entrypoint": "0x00000a30",
            "current_name": "initialize_and_return_stack_address_00000a30",
            "code": "\nundefined * initialize_and_return_stack_address_00000a30(void)\n\n{\n  int input_offset;\n  \n  initialize_and_print_system(4,\"NMI HANDLER\");\n  return stack_address + -*(int *)(input_offset + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_00000a30": "initialize_and_return_stack_address_00000a30",
                "in_r3": "input_offset",
                "initialize_and_print_system_00000f04": "initialize_and_print_system",
                "&stack0xe000ffe0": "stack_address"
            },
            "calling": [],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cc0": {
            "entrypoint": "0x00000cc0",
            "current_name": "get_irq_interrupts_status_00000cc0",
            "code": "\nundefined4 getIRQInterruptsStatus_00000cc0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 interruptsEnabled;\n  \n  initializeAndPrintSystem(10,\"DUMMY HANDLER\");\n  interruptsEnabled = 0;\n  isPrivilegedMode = (bool)checkPrivilegedMode();\n  if (isPrivilegedMode) {\n    interruptsEnabled = checkIRQInterruptsEnabled();\n  }\n  disableIRQInterrupts();\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cc0": "get_irq_interrupts_status_00000cc0",
                "uVar2": "interruptsEnabled",
                "bVar1": "isPrivilegedMode",
                "initialize_and_print_system_00000f04": "initializeAndPrintSystem",
                "isCurrentModePrivileged": "checkPrivilegedMode",
                "isIRQinterruptsEnabled": "checkIRQInterruptsEnabled",
                "disableIRQinterrupts": "disableIRQInterrupts"
            },
            "calling": [
                "FUN_00000dc0"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cd0": {
            "entrypoint": "0x00000cd0",
            "current_name": "check_interrupts_00000cd0",
            "code": "\nundefined4 checkInterrupts_00000cd0(void)\n\n{\n  bool isCurrentModePrivileged;\n  undefined4 irqInterruptsEnabled;\n  \n  irqInterruptsEnabled = 0;\n  isCurrentModePrivileged = (bool)isCurrentModePrivileged();\n  if (isCurrentModePrivileged) {\n    irqInterruptsEnabled = isIRQinterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return irqInterruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cd0": "check_interrupts_00000cd0",
                "bVar1": "isCurrentModePrivileged",
                "uVar2": "irqInterruptsEnabled"
            },
            "calling": [
                "FUN_00000e58",
                "FUN_00001c84",
                "FUN_00000794",
                "FUN_00000f04",
                "FUN_00002434",
                "FUN_000010d4",
                "FUN_00000428",
                "FUN_000024bc",
                "FUN_00000f8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cf0": {
            "entrypoint": "0x00000cf0",
            "current_name": "check_irq_interrupt_status_00000cf0",
            "code": "\nundefined4 checkIRQInterruptStatus_00000cf0(void)\n\n{\n  bool isPrivileged;\n  undefined4 interruptsEnabled;\n  \n  enableIRQinterrupts();\n  interruptsEnabled = 0;\n  isPrivileged = (bool)isCurrentModePrivileged();\n  if (isPrivileged) {\n    interruptsEnabled = isIRQinterruptsEnabled();\n  }\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cf0": "check_irq_interrupt_status_00000cf0",
                "bVar1": "isPrivileged",
                "uVar2": "interruptsEnabled"
            },
            "calling": [
                "FUN_00000930"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d0c": {
            "entrypoint": "0x00000d0c",
            "current_name": "enable_irq_interrupts_if_privileged_00000d0c",
            "code": "\nvoid enableIRQInterruptsIfPrivileged_00000d0c(uint interruptFlag)\n\n{\n  bool isPrivilegedMode;\n  \n  isPrivilegedMode = (bool)checkPrivilegedMode();\n  if (isPrivilegedMode) {\n    enableInterrupts((interruptFlag & 1) == 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d0c": "enable_irq_interrupts_if_privileged_00000d0c",
                "param_1": "interruptFlag",
                "bVar1": "isPrivilegedMode",
                "isCurrentModePrivileged": "checkPrivilegedMode",
                "enableIRQinterrupts": "enableInterrupts"
            },
            "calling": [
                "FUN_00001c84",
                "FUN_00002434",
                "FUN_000010d4",
                "FUN_00000428",
                "FUN_000024bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d2a": {
            "entrypoint": "0x00000d2a",
            "current_name": "get_exception_number_00000d2a",
            "code": "\nuint getExceptionNumber_00000d2a(void)\n\n{\n  bool isPrivilegedMode;\n  uint exceptionNumber;\n  \n  exceptionNumber = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    exceptionNumber = getCurrentExceptionNumber();\n    exceptionNumber = exceptionNumber & 0x1f;\n  }\n  return exceptionNumber;\n}\n\n",
            "renaming": {
                "FUN_00000d2a": "get_exception_number_00000d2a",
                "bVar1": "isPrivilegedMode",
                "uVar2": "exceptionNumber"
            },
            "calling": [
                "FUN_00000738"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d44": {
            "entrypoint": "0x00000d44",
            "current_name": "calculate_offset_00000d44",
            "code": "\nint calculate_offset_00000d44(uint input_value,int multiplier)\n\n{\n  return multiplier * 4 + (input_value & 0xf0000000 | (input_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00000d44": "calculate_offset_00000d44",
                "param_1": "input_value",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00000d76"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d76": {
            "entrypoint": "0x00000d76",
            "current_name": "initialize_memory_00000d76",
            "code": "\nvoid initializeMemory_00000d76(undefined4 offset,undefined value)\n\n{\n  undefined4 *memoryAddress;\n  \n  memoryAddress = (undefined4 *)calculate_offset_00000d44(offset,value);\n  *memoryAddress = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d76": "initialize_memory_00000d76",
                "param_1": "offset",
                "param_2": "value",
                "puVar1": "memoryAddress"
            },
            "calling": [
                "FUN_00000d9c"
            ],
            "called": [
                "FUN_00000d44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d9c": {
            "entrypoint": "0x00000d9c",
            "current_name": "initialize_memory_00000d9c",
            "code": "\nvoid initialize_memory_00000d9c(void)\n\n{\n  initialize_memory_00000d9c(0x40048040,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d9c": "initialize_memory_00000d9c",
                "initialize_memory_00000d76": "initialize_memory"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [
                "FUN_00000d76"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000db0": {
            "entrypoint": "0x00000db0",
            "current_name": "initialize_00000db0",
            "code": "\nvoid initialize_00000db0(void)\n\n{\n  initialize_00000db0_data();\n  initialize_00000db0_memory();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000db0": "initialize_00000db0",
                "initialize_data_00000dcc": "initialize_data",
                "initialize_memory_00000d9c": "initialize_memory"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000d9c",
                "FUN_00000dcc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dc0": {
            "entrypoint": "0x00000dc0",
            "current_name": "get_irq_interrupts_status_00000dc0",
            "code": "\nvoid get_irq_interrupts_status_00000dc0(void)\n\n{\n  get_irq_interrupts_status_00000dc0_00000cc0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dc0": "get_irq_interrupts_status_00000dc0"
            },
            "calling": [],
            "called": [
                "FUN_00000cc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dcc": {
            "entrypoint": "0x00000dcc",
            "current_name": "initialize_data_00000dcc",
            "code": "\n\n\nvoid initializeData_00000dcc(void)\n\n{\n  _DAT_4005200e = 0xd928;\n  _DAT_40052000 = 0xd2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dcc": "initialize_data_00000dcc"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000df4": {
            "entrypoint": "0x00000df4",
            "current_name": "initialize_and_extract_results_00000df4",
            "code": "\nvoid initializeAndExtractResults_00000df4(void)\n\n{\n  initialize_and_extract_results_000013b8(0,0x1c200,0x12b5,0x1fff0204);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000df4": "initialize_and_extract_results_00000df4"
            },
            "calling": [
                "FUN_00000410"
            ],
            "called": [
                "FUN_000013b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e14": {
            "entrypoint": "0x00000e14",
            "current_name": "copy_bytes_00000e14",
            "code": "\nundefined4 copyBytes_00000e14(undefined4 sourceAddress,undefined4 destinationAddress)\n\n{\n  undefined4 bytesCopied;\n  \n  bytesCopied = copy_bytes_loop_000012e2(0x1fff0204,sourceAddress,destinationAddress);\n  return bytesCopied;\n}\n\n",
            "renaming": {
                "FUN_00000e14": "copy_bytes_00000e14",
                "param_1": "sourceAddress",
                "param_2": "destinationAddress",
                "uVar1": "bytesCopied"
            },
            "calling": [
                "FUN_00000490"
            ],
            "called": [
                "FUN_000012e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e38": {
            "entrypoint": "0x00000e38",
            "current_name": "copy_and_return_data_00000e38",
            "code": "\nundefined4 copyAndReturnData_00000e38(undefined4 sourceData,undefined4 destinationData)\n\n{\n  copy_data_000015d0(0,sourceData,destinationData);\n  return destinationData;\n}\n\n",
            "renaming": {
                "FUN_00000e38": "copy_and_return_data_00000e38",
                "param_1": "sourceData",
                "param_2": "destinationData"
            },
            "calling": [
                "FUN_00004dee"
            ],
            "called": [
                "FUN_000015d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e58": {
            "entrypoint": "0x00000e58",
            "current_name": "run_infinite_loop_00000e58",
            "code": "\nvoid runInfiniteLoop_00000e58(void)\n\n{\n  checkInterrupts();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000e58": "run_infinite_loop_00000e58",
                "check_interrupts_00000cd0": "checkInterrupts"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00000cd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e64": {
            "entrypoint": "0x00000e64",
            "current_name": "initialize_system_00000e64",
            "code": "\n\n\nvoid initialize_system_00000e64(void)\n\n{\n  _DAT_40048038 = _DAT_40048038 | 0x200;\n  _DAT_40049048 = _DAT_40049048 & 0xfefff8ff;\n  initialize_and_setup_system();\n  update_bitmask(0x2056,0x80);\n  update_bitmask(0x511a,0x80);\n  update_bitmask(0x2055,0x80);\n  set_bit_in_masked_value(0x2056);\n  set_bit_in_masked_value(0x511a);\n  set_bit_in_masked_value(0x2055);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000e64": "initialize_system_00000e64",
                "initialize_and_setup_system_00001274": "initialize_and_setup_system",
                "update_bitmask_00001eea": "update_bitmask",
                "set_bit_in_masked_value_00001ff6": "set_bit_in_masked_value"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00001ff6",
                "FUN_00001eea",
                "FUN_00001274"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ed8": {
            "entrypoint": "0x00000ed8",
            "current_name": "initialize_data_00000ed8",
            "code": "\nvoid initializeData_00000ed8(void)\n\n{\n  undefined4 linkRegister;\n  \n  process_and_initialize_data_00004c84(&DAT_00006f58,linkRegister);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ed8": "initialize_data_00000ed8",
                "in_lr": "linkRegister"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_00000ed8(void)\n\n{\n  undefined4 in_lr;\n  \n  FUNC_00004c84(&DAT_00006f58,in_lr);\n  return;\n}\n\n"
        },
        "FUN_00000ef8": {
            "entrypoint": "0x00000ef8",
            "current_name": "FUNC_00000ef8",
            "code": "\nvoid FUNC_00000ef8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ef8": "FUNC_00000ef8"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00000f04": {
            "entrypoint": "0x00000f04",
            "current_name": "initialize_and_print_system_00000f04",
            "code": "\nvoid initializeAndPrintSystem_00000f04(char inputChar,undefined4 inputValue)\n\n{\n  undefined4 stackVariable;\n  code *jumpTable;\n  undefined4 localValue1;\n  char localValue2;\n  \n  localValue1 = inputValue;\n  localValue2 = inputChar;\n  if (DAT_1fff0468 == 0) {\n    DAT_1fff0468 = 1;\n    if (inputChar == '\\x03') {\n      initialize_data_00000ed8();\n    }\n    process_and_initialize_data_00004c84(\"*** RIOT kernel panic:\\n%s\\n\\n\",localValue1);\n    print_process_details_0000211c();\n    process_and_initialize_data_00004c84(&DAT_00006f78);\n    process_and_initialize_data_00004c84(\"*** halted.\\n\\n\");\n  }\n  check_interrupts_00000cd0();\n  FUNC_00000ef8();\n  jumpTable = (code *)0xf4d;\n  run_infinite_loop_00000e58();\n  stackVariable = (int)&stackVariable + 1;\n  FUNC_00002400();\n  process_and_initialize_data_00004c84(\"main(): This is RIOT! (Version: 2018.04-vm-HEAD)\\n\");\n  initialize_system_000023a4();\n                    /* WARNING: Could not recover jumptable at 0x00000f7a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f04": "initialize_and_print_system_00000f04",
                "param_1": "inputChar",
                "param_2": "inputValue",
                "uStack_18": "stackVariable",
                "UNRECOVERED_JUMPTABLE": "jumpTable",
                "local_10": "localValue1",
                "local_9": "localValue2"
            },
            "calling": [
                "FUN_00000fec",
                "FUN_00000cc0",
                "FUN_00003ec4",
                "FUN_000013b8",
                "FUN_00001034",
                "FUN_00000a30"
            ],
            "called": [
                "FUN_0000211c",
                "FUN_00000e58",
                "FUN_00000ed8",
                "FUN_00002400",
                "FUN_00000cd0",
                "FUN_00004c84",
                "FUN_00000ef8",
                "FUN_000023a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000f8c": {
            "entrypoint": "0x00000f8c",
            "current_name": "initialize_object_and_set_value_00000f8c",
            "code": "\nvoid initialize_object_and_set_value_00000f8c(void)\n\n{\n  uint shiftedValue;\n  undefined4 *pointerToData;\n  uint loopCounter;\n  int stackValue;\n  int *stackPointer;\n  undefined4 constant;\n  undefined4 unused2;\n  undefined4 unused1;\n  dword relOffset;\n  \n  check_interrupts_00000cd0();\n  relOffset = Elf32_Rel_ARRAY_1fff0200[3].r_info;\n  unused1 = 0;\n  unused2 = 0xf81;\n  initialize_object_000010d4(&DAT_1fff0a6c,0x100,0xf,0xc);\n  relOffset = Elf32_Rel_ARRAY_1fff0200[3].r_offset;\n  unused1 = 0;\n  unused2 = 0xf5d;\n  loopCounter = 0xc;\n  initialize_object_000010d4(&DAT_1fff046c,0x600,7);\n  constant = 0xfd3;\n  shiftedValue = FUNC_00000930();\n  shiftedValue = shiftedValue >> 0x1e;\n  pointerToData = (undefined4 *)(loopCounter * 0x100);\n  stackValue = (loopCounter >> 0x1d) << 0x11;\n  stackPointer = &stackValue;\n  if ((shiftedValue & shiftedValue - 1) != 0) {\n    initialize_and_print_system_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *pointerToData = 0;\n  pointerToData[1] = 0;\n  pointerToData[2] = shiftedValue - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f8c": "initialize_object_and_set_value_00000f8c",
                "piStack_20": "stackPointer",
                "iStack_24": "stackValue",
                "local_10": "relOffset",
                "local_14": "unused1",
                "local_18": "unused2",
                "uStack_1c": "constant",
                "uVar1": "shiftedValue",
                "puVar2": "pointerToData",
                "uVar3": "loopCounter"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_000010d4",
                "FUN_00000930"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000fec": {
            "entrypoint": "0x00000fec",
            "current_name": "initialize_array_00000fec",
            "code": "\nvoid initialize_array_00000fec(undefined4 *array,uint size)\n\n{\n  if ((size & size - 1) != 0) {\n    print_error(3,\"FAILED ASSERTION.\");\n  }\n  *array = 0;\n  array[1] = 0;\n  array[2] = size - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000fec": "initialize_array_00000fec",
                "param_1": "array",
                "param_2": "size",
                "initialize_and_print_system_00000f04": "print_error"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001034": {
            "entrypoint": "0x00001034",
            "current_name": "find_and_replace_ptr_00001034",
            "code": "\nvoid findAndReplacePtr_00001034(int **ptrList,int param)\n\n{\n  int **currentPtr;\n  \n  if (8 < *(byte *)(param + 4)) {\n    initialize_and_print_system_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  for (currentPtr = ptrList;\n      (*currentPtr != (int *)0x0 && (*(byte *)((int)*currentPtr + -3) <= *(byte *)(param + 5)));\n      currentPtr = (int **)*currentPtr) {\n  }\n  *(int **)(param + 8) = *currentPtr;\n  *currentPtr = (int *)(int **)(param + 8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001034": "find_and_replace_ptr_00001034",
                "param_1": "ptrList",
                "param_2": "param",
                "local_1c": "currentPtr"
            },
            "calling": [
                "FUN_00002434"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010a0": {
            "entrypoint": "0x000010a0",
            "current_name": "find_first_nonself_referencing_element_000010a0",
            "code": "\nint find_first_nonself_referencing_element_000010a0(int *array)\n\n{\n  int *current_element;\n  \n  for (current_element = array; (int *)*current_element == current_element; current_element = current_element + 1) {\n  }\n  return (int)current_element - (int)array;\n}\n\n",
            "renaming": {
                "FUN_000010a0": "find_first_nonself_referencing_element_000010a0",
                "param_1": "array",
                "local_c": "current_element"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010d4": {
            "entrypoint": "0x000010d4",
            "current_name": "initialize_object_000010d4",
            "code": "\nint initialize_object_000010d4(uint address,int size,byte dataSize,uint flags,undefined4 param5,\n                undefined4 param6,undefined4 param7)\n\n{\n  undefined4 interruptStatus;\n  undefined4 initializedData;\n  int result;\n  uint adjustedSize;\n  undefined4 *objectPtr;\n  int adjustedSizeMinus30;\n  uint adjustedAddress;\n  uint loopIndex;\n  short zeroShort;\n  short availableIndex;\n  \n  if (dataSize < 0x10) {\n    adjustedSizeMinus30 = size;\n    adjustedAddress = address;\n    if ((address & 3) != 0) {\n      adjustedSizeMinus30 = 4 - (address & 3);\n      adjustedAddress = adjustedSizeMinus30 + address;\n      adjustedSizeMinus30 = size - adjustedSizeMinus30;\n    }\n    adjustedSize = adjustedSizeMinus30 - 0x30U & 0xfffffffc;\n    objectPtr = (undefined4 *)(adjustedSize + adjustedAddress);\n    if ((flags & 8) == 0) {\n      *(uint *)adjustedAddress = adjustedAddress;\n    }\n    else {\n      for (loopIndex = adjustedAddress; loopIndex < adjustedSize + adjustedAddress; loopIndex = loopIndex + 4) {\n        *(uint *)loopIndex = loopIndex;\n      }\n    }\n    interruptStatus = check_interrupts_00000cd0();\n    availableIndex = 0;\n    for (zeroShort = 1; zeroShort < 0x21; zeroShort = zeroShort + 1) {\n      if (*(int *)(&DAT_1fff0358 + zeroShort * 4) == 0) {\n        availableIndex = zeroShort;\n        break;\n      }\n    }\n    if (availableIndex == 0) {\n      enable_irq_interrupts_if_privileged_00000d0c(interruptStatus);\n      result = -0x8b;\n    }\n    else {\n      *(undefined4 **)(&DAT_1fff0358 + availableIndex * 4) = objectPtr;\n      *(short *)((int)objectPtr + 6) = availableIndex;\n      initializedData = initialize_data_000007dc(param5,param6,adjustedAddress,adjustedSize);\n      *objectPtr = initializedData;\n      objectPtr[9] = adjustedAddress;\n      objectPtr[0xb] = size;\n      objectPtr[10] = param7;\n      *(byte *)((int)objectPtr + 5) = dataSize;\n      *(undefined *)(objectPtr + 1) = 0;\n      objectPtr[2] = 0;\n      objectPtr[3] = 0;\n      objectPtr[4] = 0;\n      initialize_array_00000fec(objectPtr + 5,0);\n      objectPtr[8] = 0;\n      DAT_1fff0350 = DAT_1fff0350 + 1;\n      if ((flags & 1) == 0) {\n        update_value_and_pointer_00000698(objectPtr,10);\n        if ((flags & 4) == 0) {\n          enable_irq_interrupts_if_privileged_00000d0c(interruptStatus);\n          check_memory_protection_00000738(dataSize);\n          return (int)availableIndex;\n        }\n      }\n      else {\n        update_value_and_pointer_00000698(objectPtr,1);\n      }\n      enable_irq_interrupts_if_privileged_00000d0c(interruptStatus);\n      result = (int)availableIndex;\n    }\n  }\n  else {\n    result = -0x16;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000010d4": "initialize_object_000010d4",
                "param_1": "address",
                "param_2": "size",
                "param_3": "dataSize",
                "param_4": "flags",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "uVar1": "interruptStatus",
                "uVar2": "initializedData",
                "iVar3": "result",
                "uVar4": "adjustedSize",
                "puVar5": "objectPtr",
                "local_30": "adjustedSizeMinus30",
                "local_2c": "adjustedAddress",
                "local_10": "loopIndex",
                "local_c": "zeroShort",
                "local_a": "availableIndex"
            },
            "calling": [
                "FUN_00000f8c"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000fec",
                "FUN_00000738",
                "FUN_00000cd0",
                "FUN_000007dc",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001274": {
            "entrypoint": "0x00001274",
            "current_name": "initialize_and_setup_system_00001274",
            "code": "\nvoid initialize_and_setup_system_00001274(void)\n\n{\n  initialize_memory();\n  DAT_4007e000 = DAT_4007e000 | 0x28;\n  initialize_system();\n  initialize_hardware();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001274": "initialize_and_setup_system_00001274",
                "initialize_memory_0000258c": "initialize_memory",
                "initialize_system_00001c84": "initialize_system",
                "initialize_hardware_00002396": "initialize_hardware"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001c84",
                "FUN_00002396",
                "FUN_0000258c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000129c": {
            "entrypoint": "0x0000129c",
            "current_name": "update_interrupt_status_0000129c",
            "code": "\nvoid update_interrupt_status_0000129c(undefined4 status)\n\n{\n  update_interrupt_status_0000129c(status,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000129c": "update_interrupt_status_0000129c",
                "param_1": "status",
                "update_interrupt_status_00002434": "update_interrupt_status"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002434"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012b4": {
            "entrypoint": "0x000012b4",
            "current_name": "validate_and_update_memory_000012b4",
            "code": "\nundefined4 validateAndUpdateMemory_000012b4(int memoryAddress,undefined data)\n\n{\n  undefined4 validationResult;\n  \n  validationResult = validate_and_update_memory_00002364(memoryAddress + 4,data);\n  extract_and_process_pointer_value_000024bc(memoryAddress);\n  return validationResult;\n}\n\n",
            "renaming": {
                "FUN_000012b4": "validate_and_update_memory_000012b4",
                "param_1": "memoryAddress",
                "param_2": "data",
                "uVar1": "validationResult"
            },
            "calling": [],
            "called": [
                "FUN_00002364",
                "FUN_000024bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012e2": {
            "entrypoint": "0x000012e2",
            "current_name": "copy_bytes_loop_000012e2",
            "code": "\nint copy_bytes_loop_000012e2(int dst_buffer,undefined4 src_buffer,undefined4 length)\n\n{\n  int copy_result;\n  \n  while( true ) {\n    copy_result = copy_bytes_0000231c(dst_buffer + 4,src_buffer,length);\n    if (copy_result != 0) break;\n    update_interrupt_status_0000129c(dst_buffer);\n  }\n  return copy_result;\n}\n\n",
            "renaming": {
                "FUN_000012e2": "copy_bytes_loop_000012e2",
                "param_1": "dst_buffer",
                "param_2": "src_buffer",
                "param_3": "length",
                "iVar1": "copy_result"
            },
            "calling": [
                "FUN_00000e14"
            ],
            "called": [
                "FUN_0000129c",
                "FUN_0000231c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001318": {
            "entrypoint": "0x00001318",
            "current_name": "set_bit_in_memory_00001318",
            "code": "\nvoid setBitInMemory_00001318(byte byteValue)\n\n{\n  *(int *)(((uint)(int)(char)byteValue >> 5) * 4 + -0x1fff1f00) = 1 << (byteValue & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001318": "set_bit_in_memory_00001318",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_000014c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001348": {
            "entrypoint": "0x00001348",
            "current_name": "enable_memory_protection_if_needed_00001348",
            "code": "\nvoid enable_memory_protection_if_needed_00001348(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    enable_memory_protection_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001348": "enable_memory_protection_if_needed_00001348"
            },
            "calling": [
                "FUN_00001628"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001360": {
            "entrypoint": "0x00001360",
            "current_name": "calculate_offset_00001360",
            "code": "\nint calculateOffset_00001360(uint baseAddress,int multiplier)\n\n{\n  return multiplier * 4 + (baseAddress & 0xf0000000 | (baseAddress & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001360": "calculate_offset_00001360",
                "param_1": "baseAddress",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001392"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001392": {
            "entrypoint": "0x00001392",
            "current_name": "initialize_memory_00001392",
            "code": "\nvoid initializeMemory_00001392(undefined4 address,undefined value)\n\n{\n  undefined4 *ptrToAddress;\n  \n  ptrToAddress = (undefined4 *)calculate_offset_00001360(address,value);\n  *ptrToAddress = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001392": "initialize_memory_00001392",
                "param_1": "address",
                "param_2": "value",
                "puVar1": "ptrToAddress"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001360"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000013b8": {
            "entrypoint": "0x000013b8",
            "current_name": "initialize_and_extract_results_000013b8",
            "code": "\nundefined4 initializeAndExtractResults_000013b8(int errorCode,undefined4 result,undefined4 dataPointer,undefined4 memoryPointer)\n\n{\n  undefined4 returnValue;\n  \n  if (errorCode != 0) {\n    initialize_and_print_system_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *(undefined4 *)(&DAT_1fff0b6c + errorCode * 8) = dataPointer;\n  *(undefined4 *)(&DAT_1fff0b70 + errorCode * 8) = memoryPointer;\n  extract_and_set_results_00001448(errorCode);\n  initialize_memory_00001392(*(undefined4 *)(&DAT_00006ffc + errorCode * 0x20),\n               *(undefined *)(errorCode * 0x20 + 0x7000));\n  if ((&DAT_00007002)[errorCode * 0x20] == '\\0') {\n    initialize_data_000014c4(errorCode,result);\n    returnValue = 0;\n  }\n  else {\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000013b8": "initialize_and_extract_results_000013b8",
                "param_1": "errorCode",
                "param_2": "result",
                "param_3": "dataPointer",
                "param_4": "memoryPointer",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00000df4"
            ],
            "called": [
                "FUN_000014c4",
                "FUN_00000f04",
                "FUN_00001392",
                "FUN_00001448"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001448": {
            "entrypoint": "0x00001448",
            "current_name": "extract_and_set_results_00001448",
            "code": "\nvoid extract_and_set_results_00001448(int index)\n\n{\n  if (*(short *)(&DAT_00006fec + index * 0x20) != -1) {\n    extract_and_set_result(*(undefined2 *)(&DAT_00006fec + index * 0x20),\n                 *(undefined4 *)(&DAT_00006ff0 + index * 0x20));\n  }\n  if (*(short *)(&DAT_00006fee + index * 0x20) != -1) {\n    extract_and_set_result(*(undefined2 *)(&DAT_00006fee + index * 0x20),\n                 *(undefined4 *)(&DAT_00006ff4 + index * 0x20));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001448": "extract_and_set_results_00001448",
                "param_1": "index",
                "extract_and_set_result_00001f80": "extract_and_set_result"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001f80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000014c4": {
            "entrypoint": "0x000014c4",
            "current_name": "initialize_data_000014c4",
            "code": "\nvoid initializeData_000014c4(int index,uint divisor)\n\n{\n  byte *dataPointer;\n  uint value1;\n  uint value2;\n  \n  dataPointer = *(byte **)(&DAT_00006fe4 + index * 0x20);\n  value1 = *(uint *)(&DAT_00006fe8 + index * 0x20);\n  dataPointer[3] = dataPointer[3] & 0xf3;\n  dataPointer[2] = (&DAT_00007001)[index * 0x20];\n  value2 = value1 / (divisor << 4);\n  *dataPointer = (byte)(value2 >> 8) & 0x1f;\n  dataPointer[1] = (byte)value2;\n  dataPointer[10] = (byte)((value1 << 2) / divisor + 1 >> 1) & 0x1f;\n  dataPointer[0x10] = dataPointer[0x10] | 0x88;\n  if ((dataPointer[0x10] & 0x70) == 0) {\n    dataPointer[0x13] = 0;\n  }\n  else {\n    dataPointer[0x13] = (char)(2 << (dataPointer[0x10] >> 4 & 7)) - 1;\n  }\n  dataPointer[0x15] = 1;\n  dataPointer[0x11] = 0xc0;\n  dataPointer[3] = dataPointer[3] | 0x2c;\n  set_bit_in_memory_00001318((int)(char)(&DAT_00006ff8)[index * 0x20]);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000014c4": "initialize_data_000014c4",
                "param_1": "index",
                "param_2": "divisor",
                "pbVar1": "dataPointer",
                "uVar2": "value1",
                "uVar3": "value2"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000015d0": {
            "entrypoint": "0x000015d0",
            "current_name": "copy_data_000015d0",
            "code": "\nvoid copyData_000015d0(int index,int sourceAddress,uint dataSize)\n\n{\n  int destinationAddress;\n  uint counter;\n  \n  destinationAddress = *(int *)(&DAT_00006fe4 + index * 0x20);\n  for (counter = 0; counter < dataSize; counter = counter + 1) {\n    do {\n    } while (-1 < *(char *)(destinationAddress + 4));\n    *(undefined *)(destinationAddress + 7) = *(undefined *)(counter + sourceAddress);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000015d0": "copy_data_000015d0",
                "param_1": "index",
                "param_2": "sourceAddress",
                "param_3": "dataSize",
                "iVar1": "destinationAddress",
                "local_c": "counter"
            },
            "calling": [
                "FUN_00000e38"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001628": {
            "entrypoint": "0x00001628",
            "current_name": "execute_action_if_allowed_00001628",
            "code": "\nvoid executeActionIfAllowed_00001628(int index)\n\n{\n  if (((*(byte *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 4) & 0x20) != 0) &&\n     (*(int *)(&DAT_1fff0b6c + index * 8) != 0)) {\n    (**(code **)(&DAT_1fff0b6c + index * 8))\n              (*(undefined4 *)(&DAT_1fff0b70 + index * 8),\n               *(undefined *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 7));\n  }\n  enableMemoryProtection();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001628": "execute_action_if_allowed_00001628",
                "param_1": "index",
                "enable_memory_protection_if_needed_00001348": "enableMemoryProtection"
            },
            "calling": [
                "FUN_00001688"
            ],
            "called": [
                "FUN_00001348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001688": {
            "entrypoint": "0x00001688",
            "current_name": "execute_default_action_00001688",
            "code": "\nvoid execute_default_action_00001688(void)\n\n{\n  check_and_execute_action(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001688": "execute_default_action_00001688",
                "execute_action_if_allowed_00001628": "check_and_execute_action"
            },
            "calling": [],
            "called": [
                "FUN_00001628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001696": {
            "entrypoint": "0x00001696",
            "current_name": "calculate_offset_00001696",
            "code": "\nint calculateOffset_00001696(uint inputValue,int multiplier)\n\n{\n  return multiplier * 4 + (inputValue & 0xf0000000 | (inputValue & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001696": "calculate_offset_00001696",
                "param_1": "inputValue",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_000016ec",
                "FUN_00001710",
                "FUN_000016c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016c8": {
            "entrypoint": "0x000016c8",
            "current_name": "initialize_pointer_value_000016c8",
            "code": "\nvoid initializePointerValue_000016c8(undefined4 offset,undefined parameter)\n\n{\n  undefined4 *pointer;\n  \n  pointer = (undefined4 *)calculateOffset(offset,parameter);\n  *pointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016c8": "initialize_pointer_value_000016c8",
                "param_1": "offset",
                "param_2": "parameter",
                "puVar1": "pointer",
                "calculate_offset_00001696": "calculateOffset"
            },
            "calling": [
                "FUN_000017dc"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016ec": {
            "entrypoint": "0x000016ec",
            "current_name": "set_offset_to_value_000016ec",
            "code": "\nvoid setOffsetToValue_000016ec(undefined4 offset,undefined value)\n\n{\n  undefined *offsetPointer;\n  \n  offsetPointer = (undefined *)calculate_offset_00001696(offset,value);\n  *offsetPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016ec": "set_offset_to_value_000016ec",
                "param_1": "offset",
                "param_2": "value",
                "puVar1": "offsetPointer"
            },
            "calling": [
                "FUN_00001a18",
                "FUN_0000182c",
                "FUN_00001778",
                "FUN_00001a3c",
                "FUN_00001a60"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001710": {
            "entrypoint": "0x00001710",
            "current_name": "clear_memory_00001710",
            "code": "\nvoid clearMemory_00001710(undefined4 offset,undefined data)\n\n{\n  undefined *memoryAddress;\n  \n  memoryAddress = (undefined *)calculate_offset_00001696(offset,data);\n  *memoryAddress = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001710": "clear_memory_00001710",
                "param_1": "offset",
                "param_2": "data",
                "puVar1": "memoryAddress"
            },
            "calling": [
                "FUN_00001960",
                "FUN_00001bb8",
                "FUN_0000182c",
                "FUN_00001778",
                "FUN_00001a60",
                "FUN_000018bc",
                "FUN_000019c0",
                "FUN_00001734"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001734": {
            "entrypoint": "0x00001734",
            "current_name": "clear_memory_00001734",
            "code": "\nvoid clearMemory_00001734(void)\n\n{\n  clearMemory_00001734Function(&DAT_40064005,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001734": "clear_memory_00001734",
                "clear_memory_00001710": "clearMemoryFunction"
            },
            "calling": [
                "FUN_00001a18",
                "FUN_00001a3c",
                "FUN_000019c0"
            ],
            "called": [
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001748": {
            "entrypoint": "0x00001748",
            "current_name": "update_flags_00001748",
            "code": "\nvoid updateFlags_00001748(byte input)\n\n{\n  DAT_40064003 = input | DAT_40064003 & 0x1f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001748": "update_flags_00001748",
                "param_1": "input"
            },
            "calling": [
                "FUN_0000191c",
                "FUN_00001960",
                "FUN_00001bb8",
                "FUN_000018bc",
                "FUN_000019c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001778": {
            "entrypoint": "0x00001778",
            "current_name": "update_memory_00001778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000179c) */\n/* WARNING: Removing unreachable block (ram,0x000017b2) */\n/* WARNING: Removing unreachable block (ram,0x000017c0) */\n\nvoid updateMemory_00001778(void)\n\n{\n  DAT_40064001 = DAT_40064001 & 0xcf | 0x20;\n  clearMemory(&DAT_40064001,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001778": "update_memory_00001778",
                "clear_memory_00001710": "clearMemory"
            },
            "calling": [
                "FUN_0000191c",
                "FUN_000019c0"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000017dc": {
            "entrypoint": "0x000017dc",
            "current_name": "initialize_and_configure_system_000017dc",
            "code": "\n\n\nvoid initializeAndConfigureSystem_000017dc(void)\n\n{\n  initialize_pointer_value_000016c8(&DAT_4004803c,0x1d);\n  if ((_DAT_4003d010 & 0x100) == 0) {\n    _DAT_4003d010 = 0x104;\n  }\n  _DAT_40047000 = _DAT_40047000 & 0xfff3ffff | 0x80000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000017dc": "initialize_and_configure_system_000017dc"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000182c": {
            "entrypoint": "0x0000182c",
            "current_name": "clear_memory_and_set_offset_0000182c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000187c) */\n/* WARNING: Removing unreachable block (ram,0x0000186a) */\n/* WARNING: Removing unreachable block (ram,0x00001898) */\n\nvoid clearMemoryAndSetOffset_0000182c(void)\n\n{\n  DAT_40064008 = DAT_40064008 & 0xd0;\n  set_offset_to_value_000016ec(&DAT_40064001,0);\n  clear_memory_00001710(&DAT_40064000,1);\n  clear_memory_00001710(&DAT_40064000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000182c": "clear_memory_and_set_offset_0000182c"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000018bc": {
            "entrypoint": "0x000018bc",
            "current_name": "initialize_system_000018bc",
            "code": "\nvoid initializeSystem_000018bc(void)\n\n{\n  updateFlags(0xa0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  clearMemory(&DAT_40064001,1);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000018bc": "initialize_system_000018bc",
                "update_flags_00001748": "updateFlags",
                "clear_memory_00001710": "clearMemory"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000191c": {
            "entrypoint": "0x0000191c",
            "current_name": "initialize_memory_0000191c",
            "code": "\nvoid initializeMemory_0000191c(void)\n\n{\n  updateMemory();\n  setFlag(0x40);\n  DAT_40064000 = DAT_40064000 & 0x3b;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000191c": "initialize_memory_0000191c",
                "update_memory_00001778": "updateMemory",
                "update_flags_00001748": "setFlag"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001778",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001960": {
            "entrypoint": "0x00001960",
            "current_name": "initialize_memory_00001960",
            "code": "\nvoid initializeMemory_00001960(void)\n\n{\n  update_flags_00001748(0xa0);\n  clear_memory_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x44;\n  do {\n  } while ((DAT_40064006 & 0xc) != 4);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  DAT_1fff0b74 = 2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001960": "initialize_memory_00001960"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000019c0": {
            "entrypoint": "0x000019c0",
            "current_name": "initialize_memory_000019c0",
            "code": "\nvoid initializeMemory_000019c0(void)\n\n{\n  update_memory_00001778();\n  update_flags_00001748(0x40);\n  clearMemory(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  resetMemory();\n  DAT_1fff0b74 = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000019c0": "initialize_memory_000019c0",
                "clear_memory_00001710": "clearMemory",
                "clear_memory_00001734": "resetMemory"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001778",
                "FUN_00001748",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a18": {
            "entrypoint": "0x00001a18",
            "current_name": "initialize_memory_00001a18",
            "code": "\nvoid initializeMemory_00001a18(void)\n\n{\n  set_offset_to_value_000016ec(&DAT_40064001,1);\n  clearMemory();\n  DAT_1fff0b74 = 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a18": "initialize_memory_00001a18",
                "clear_memory_00001734": "clearMemory"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a3c": {
            "entrypoint": "0x00001a3c",
            "current_name": "initialize_memory_00001a3c",
            "code": "\nvoid initializeMemory_00001a3c(void)\n\n{\n  set_offset_to_value_000016ec(&DAT_40064001,1);\n  clear_memory_00001734();\n  DAT_1fff0b74 = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a3c": "initialize_memory_00001a3c"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a60": {
            "entrypoint": "0x00001a60",
            "current_name": "initialize_memory_00001a60",
            "code": "\nvoid initializeMemory_00001a60(void)\n\n{\n  clearMemory(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  setOffsetToValue(&DAT_40064005,6);\n  do {\n  } while ((DAT_40064006 & 0x20) == 0);\n  do {\n  } while ((DAT_40064006 & 0x40) == 0);\n  DAT_1fff0b74 = 6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a60": "initialize_memory_00001a60",
                "clear_memory_00001710": "clearMemory",
                "set_offset_to_value_000016ec": "setOffsetToValue"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ad4": {
            "entrypoint": "0x00001ad4",
            "current_name": "initialize_data_00001ad4",
            "code": "\nvoid initializeData_00001ad4(void)\n\n{\n  DAT_40064000 = DAT_40064000 & 0x3f;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0xc);\n  DAT_1fff0b74 = 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ad4": "initialize_data_00001ad4"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001b10": {
            "entrypoint": "0x00001b10",
            "current_name": "initialize_components_00001b10",
            "code": "\nundefined4 initialize_components_00001b10(byte component_index)\n\n{\n  undefined4 result;\n  \n  if (component_index < 8) {\n    do {\n      switch((&DAT_00007004)[(uint)component_index + (uint)DAT_1fff0b74 * 8]) {\n      case 0:\n        initialize_system_000018bc();\n        break;\n      case 1:\n        initialize_memory_0000191c();\n        break;\n      case 2:\n        initialize_memory_00001960();\n        break;\n      case 3:\n        initialize_memory_000019c0();\n        break;\n      case 4:\n        initialize_memory_00001a18();\n        break;\n      case 5:\n        initialize_memory_00001a3c();\n        break;\n      case 6:\n        initialize_memory_00001a60();\n        break;\n      case 7:\n        initialize_data_00001ad4();\n        break;\n      default:\n        return 0xffffffff;\n      }\n    } while (component_index != DAT_1fff0b74);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00001b10": "initialize_components_00001b10",
                "param_1": "component_index",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001a18",
                "FUN_0000191c",
                "FUN_00001ad4",
                "FUN_00001960",
                "FUN_00001a3c",
                "FUN_00001a60",
                "FUN_000019c0",
                "FUN_000018bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001bb8": {
            "entrypoint": "0x00001bb8",
            "current_name": "initialize_memory_00001bb8",
            "code": "\nvoid initializeMemory_00001bb8(void)\n\n{\n  if ((DAT_40064001 & 2) != 0) {\n    clearMemory(&DAT_40064001,1);\n  }\n  if ((DAT_40064005 & 0x40) != 0) {\n    if ((DAT_40064000 & 0xc0) == 0) {\n      DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n      do {\n      } while ((DAT_40064006 & 0xc) != 8);\n    }\n    clearMemory(&DAT_40064005,6);\n    do {\n    } while ((DAT_40064006 & 0x20) != 0);\n  }\n  updateFlags(0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001bb8": "initialize_memory_00001bb8",
                "clear_memory_00001710": "clearMemory",
                "update_flags_00001748": "updateFlags"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001c84": {
            "entrypoint": "0x00001c84",
            "current_name": "initialize_system_00001c84",
            "code": "\n\n\nvoid initialize_system_00001c84(void)\n\n{\n  undefined4 interrupt_status;\n  \n  interrupt_status = check_interrupts_00000cd0();\n  initialize_memory();\n  _DAT_40048044 = 0x220000;\n  DAT_4006400c = 0;\n  DAT_40064000 = DAT_40064000 & 199 | 0x38;\n  DAT_40064004 = 0x13;\n  DAT_40064005 = 0;\n  clear_memory_and_set_offset();\n  initialize_and_configure_system();\n  initialize_components(7);\n  enable_irq_interrupts_if_privileged(interrupt_status);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001c84": "initialize_system_00001c84",
                "uVar1": "interrupt_status",
                "initialize_memory_00001bb8": "initialize_memory",
                "clear_memory_and_set_offset_0000182c": "clear_memory_and_set_offset",
                "initialize_and_configure_system_000017dc": "initialize_and_configure_system",
                "initialize_components_00001b10": "initialize_components",
                "enable_irq_interrupts_if_privileged_00000d0c": "enable_irq_interrupts_if_privileged"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0",
                "FUN_00001bb8",
                "FUN_0000182c",
                "FUN_000017dc",
                "FUN_00001b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001cf0": {
            "entrypoint": "0x00001cf0",
            "current_name": "enable_memory_protection_00001cf0",
            "code": "\nvoid enable_memory_protection_00001cf0(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    enable_memory_protection_00001cf0_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001cf0": "enable_memory_protection_00001cf0"
            },
            "calling": [
                "FUN_00002028"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d08": {
            "entrypoint": "0x00001d08",
            "current_name": "calculate_result_00001d08",
            "code": "\nint calculateResult_00001d08(uint inputValue,int multiplier)\n\n{\n  return multiplier * 4 + (inputValue & 0xf0000000 | (inputValue & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001d08": "calculate_result_00001d08",
                "param_1": "inputValue",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001d3a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d3a": {
            "entrypoint": "0x00001d3a",
            "current_name": "set_result_to1_00001d3a",
            "code": "\nvoid setResultTo1_00001d3a(undefined4 resultPointer,undefined undefinedParameter)\n\n{\n  undefined4 *resultPointer;\n  \n  resultPointer = (undefined4 *)calculate_result_00001d08(resultPointer,undefinedParameter);\n  *resultPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001d3a": "set_result_to1_00001d3a",
                "param_1": "resultPointer",
                "param_2": "undefinedParameter",
                "puVar1": "resultPointer"
            },
            "calling": [
                "FUN_00001ddc"
            ],
            "called": [
                "FUN_00001d08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d5e": {
            "entrypoint": "0x00001d5e",
            "current_name": "apply_bitmask_00001d5e",
            "code": "\nuint applyBitmask_00001d5e(ushort inputValue)\n\n{\n  return inputValue & 0x7000 | 0x40048000;\n}\n\n",
            "renaming": {
                "FUN_00001d5e": "apply_bitmask_00001d5e",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001f80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d80": {
            "entrypoint": "0x00001d80",
            "current_name": "set_masked_value_00001d80",
            "code": "\nuint setMaskedValue_00001d80(ushort inputValue)\n\n{\n  return inputValue & 0x1c0 | 0x400ff000;\n}\n\n",
            "renaming": {
                "FUN_00001d80": "set_masked_value_00001d80",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001ff6",
                "FUN_00001eea"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001da2": {
            "entrypoint": "0x00001da2",
            "current_name": "extract_bits_00001da2",
            "code": "\nushort extractBits_00001da2(ushort input)\n\n{\n  return input >> 6 & 7;\n}\n\n",
            "renaming": {
                "FUN_00001da2": "extract_bits_00001da2",
                "param_1": "input"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001ddc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001dc0": {
            "entrypoint": "0x00001dc0",
            "current_name": "extract_lower_bits_00001dc0",
            "code": "\nushort extractLowerBits_00001dc0(ushort inputValue)\n\n{\n  return inputValue & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_00001dc0": "extract_lower_bits_00001dc0",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001ff6",
                "FUN_00001eea",
                "FUN_00001f80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ddc": {
            "entrypoint": "0x00001ddc",
            "current_name": "extract_and_set_result_00001ddc",
            "code": "\nvoid extractAndSetResult_00001ddc(undefined2 inputValue)\n\n{\n  char extractedValue;\n  \n  extractedValue = extract_bits_00001da2(inputValue);\n  set_result_to1_00001d3a(&DAT_40048038,extractedValue + '\\t');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ddc": "extract_and_set_result_00001ddc",
                "param_1": "inputValue",
                "cVar1": "extractedValue"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001da2",
                "FUN_00001d3a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e0c": {
            "entrypoint": "0x00001e0c",
            "current_name": "extract_bits_00001e0c",
            "code": "\nuint extract_bits_00001e0c(int offset,uint value)\n\n{\n  return *(uint *)(&DAT_1fff0bd8 + (((int)value >> 3) + offset * 4) * 4) >> ((value & 7) << 2)\n         & 0xf;\n}\n\n",
            "renaming": {
                "FUN_00001e0c": "extract_bits_00001e0c",
                "param_1": "offset",
                "param_2": "value"
            },
            "calling": [
                "FUN_00002028",
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e44": {
            "entrypoint": "0x00001e44",
            "current_name": "update_field_value_00001e44",
            "code": "\nvoid updateFieldValue_00001e44(int fieldIndex,uint bitIndex,int fieldValue)\n\n{\n  int shiftedIndex;\n  \n  shiftedIndex = (int)bitIndex >> 3;\n  *(uint *)(&DAT_1fff0bd8 + (shiftedIndex + fieldIndex * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shiftedIndex + fieldIndex * 4) * 4) & ~(0xf << ((bitIndex & 7) << 2));\n  *(uint *)(&DAT_1fff0bd8 + (shiftedIndex + fieldIndex * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shiftedIndex + fieldIndex * 4) * 4) | fieldValue << ((bitIndex & 7) << 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001e44": "update_field_value_00001e44",
                "param_1": "fieldIndex",
                "param_2": "bitIndex",
                "param_3": "fieldValue",
                "iVar1": "shiftedIndex"
            },
            "calling": [
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ec4": {
            "entrypoint": "0x00001ec4",
            "current_name": "update_field_00001ec4",
            "code": "\nvoid updateField_00001ec4(undefined4 field1,undefined4 field2)\n\n{\n  undefined4 extractedBits;\n  \n  extractedBits = extract_bits_00001e0c(field1,field2);\n  update_field_value_00001e44(field1,field2,extractedBits);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ec4": "update_field_00001ec4",
                "param_1": "field1",
                "param_2": "field2",
                "uVar1": "extractedBits"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001e0c",
                "FUN_00001e44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001eea": {
            "entrypoint": "0x00001eea",
            "current_name": "update_bitmask_00001eea",
            "code": "\nundefined4 updateBitmask_00001eea(undefined2 input,byte value)\n\n{\n  uint lowerBits;\n  int maskedValue;\n  int extractedBits;\n  \n  extract_and_set_result_00001f80(input,0);\n  if ((char)value < '\\0') {\n    lowerBits = extract_lower_bits_00001dc0(input);\n    maskedValue = set_masked_value_00001d80(input);\n    *(uint *)(maskedValue + 0x14) = *(uint *)(maskedValue + 0x14) | 1 << (lowerBits & 0xff);\n  }\n  else {\n    lowerBits = extract_lower_bits_00001dc0(input);\n    maskedValue = set_masked_value_00001d80(input);\n    *(uint *)(maskedValue + 0x14) = *(uint *)(maskedValue + 0x14) & ~(1 << (lowerBits & 0xff));\n  }\n  maskedValue = apply_bitmask_00001d5e(input);\n  extractedBits = extract_lower_bits_00001dc0(input);\n  *(uint *)(maskedValue + extractedBits * 4) = value & 0x23 | 0x100;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00001eea": "update_bitmask_00001eea",
                "param_1": "input",
                "param_2": "value",
                "uVar1": "lowerBits",
                "iVar2": "maskedValue",
                "iVar3": "extractedBits"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001d80",
                "FUN_00001f80",
                "FUN_00001d5e",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001f80": {
            "entrypoint": "0x00001f80",
            "current_name": "extract_and_set_result_00001f80",
            "code": "\nvoid extractAndSetResult_00001f80(undefined2 inputParam,undefined4 newValue)\n\n{\n  int bitmaskResult;\n  int lowerBits;\n  undefined4 extractedBits;\n  undefined4 extractedLowerBits;\n  uint storedValue;\n  \n  extract_and_set_result_00001ddc(inputParam);\n  bitmaskResult = apply_bitmask_00001d5e(inputParam);\n  lowerBits = extract_lower_bits_00001dc0(inputParam);\n  storedValue = *(uint *)(bitmaskResult + lowerBits * 4);\n  bitmaskResult = apply_bitmask_00001d5e(inputParam);\n  lowerBits = extract_lower_bits_00001dc0(inputParam);\n  *(undefined4 *)(bitmaskResult + lowerBits * 4) = newValue;\n  if ((storedValue & 0xf0000) != 0) {\n    extractedBits = extract_bits_00001da2(inputParam);\n    extractedLowerBits = extract_lower_bits_00001dc0(inputParam);\n    update_field_00001ec4(extractedBits,extractedLowerBits);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001f80": "extract_and_set_result_00001f80",
                "param_1": "inputParam",
                "param_2": "newValue",
                "iVar1": "bitmaskResult",
                "iVar2": "lowerBits",
                "uVar3": "extractedBits",
                "uVar4": "extractedLowerBits",
                "uVar5": "storedValue"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001448"
            ],
            "called": [
                "FUN_00001da2",
                "FUN_00001ec4",
                "FUN_00001dc0",
                "FUN_00001d5e",
                "FUN_00001ddc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ff6": {
            "entrypoint": "0x00001ff6",
            "current_name": "set_bit_in_masked_value_00001ff6",
            "code": "\nvoid setBitInMaskedValue_00001ff6(undefined2 inputValue)\n\n{\n  uint lowerBits;\n  int maskedValue;\n  \n  lowerBits = extract_lower_bits_00001dc0(inputValue);\n  maskedValue = set_masked_value_00001d80(inputValue);\n  *(int *)(maskedValue + 4) = 1 << (lowerBits & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ff6": "set_bit_in_masked_value_00001ff6",
                "param_1": "inputValue",
                "uVar1": "lowerBits",
                "iVar2": "maskedValue"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001d80",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002028": {
            "entrypoint": "0x00002028",
            "current_name": "process_parameter_00002028",
            "code": "\nvoid processParameter_00002028(int inputAddress,undefined4 paramValue)\n\n{\n  int bitPosition;\n  uint flags;\n  uint loopCounter;\n  \n  flags = *(uint *)(inputAddress + 0xa0);\n  for (loopCounter = 0; (int)loopCounter < 0x20; loopCounter = loopCounter + 1) {\n    if (((flags & 1 << (loopCounter & 0xff)) != 0) &&\n       ((*(uint *)(inputAddress + loopCounter * 4) & 0xf0000) != 0)) {\n      *(int *)(inputAddress + 0xa0) = 1 << (loopCounter & 0xff);\n      bitPosition = extract_bits_00001e0c(paramValue,loopCounter);\n      (**(code **)(&DAT_1fff0b78 + bitPosition * 0xc))(*(undefined4 *)(&DAT_1fff0b7c + bitPosition * 0xc));\n    }\n  }\n  enable_memory_protection_00001cf0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002028": "process_parameter_00002028",
                "param_1": "inputAddress",
                "param_2": "paramValue",
                "iVar1": "bitPosition",
                "uVar2": "flags",
                "local_c": "loopCounter"
            },
            "calling": [
                "FUN_000020b8",
                "FUN_00002108",
                "FUN_000020cc",
                "FUN_000020e0",
                "FUN_000020f4"
            ],
            "called": [
                "FUN_00001e0c",
                "FUN_00001cf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020b8": {
            "entrypoint": "0x000020b8",
            "current_name": "initialize_memory_000020b8",
            "code": "\nvoid initializeMemory_000020b8(void)\n\n{\n  processParameter(0x40049000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020b8": "initialize_memory_000020b8",
                "process_parameter_00002028": "processParameter"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020cc": {
            "entrypoint": "0x000020cc",
            "current_name": "initialize_hardware_000020cc",
            "code": "\nvoid initializeHardware_000020cc(void)\n\n{\n  setHardwareConfiguration(0x4004a000,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020cc": "initialize_hardware_000020cc",
                "process_parameter_00002028": "setHardwareConfiguration"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020e0": {
            "entrypoint": "0x000020e0",
            "current_name": "initialize_process_000020e0",
            "code": "\nvoid initializeProcess_000020e0(void)\n\n{\n  setProcessParameters(0x4004b000,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020e0": "initialize_process_000020e0",
                "process_parameter_00002028": "setProcessParameters"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020f4": {
            "entrypoint": "0x000020f4",
            "current_name": "initialize_memory_000020f4",
            "code": "\nvoid initializeMemory_000020f4(void)\n\n{\n  setMemoryParameters(0x4004c000,3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020f4": "initialize_memory_000020f4",
                "process_parameter_00002028": "setMemoryParameters"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002108": {
            "entrypoint": "0x00002108",
            "current_name": "initialize_memory_00002108",
            "code": "\nvoid initializeMemory_00002108(void)\n\n{\n  setMemory(0x4004d000,4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002108": "initialize_memory_00002108",
                "process_parameter_00002028": "setMemory"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000211c": {
            "entrypoint": "0x0000211c",
            "current_name": "print_process_details_0000211c",
            "code": "\nvoid printProcessDetails_0000211c(void)\n\n{\n  int iVar1;\n  undefined2 header;\n  int processOffset;\n  int columnOffset;\n  dword addressOffset;\n  uint index;\n  undefined4 *currentItem;\n  undefined4 baseAddress;\n  undefined4 stackPointer;\n  int totalStack;\n  short processIndex;\n  int totalOffset;\n  int totalSize;\n  \n  header = 0x515f;\n  totalSize = 0;\n  totalOffset = 0;\n  process_and_initialize_data_00004c84(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",\n               &DAT_000070b8,\"state\");\n  totalStack = find_last_offset_000008b8();\n  stackPointer = get_base_address_0000091c();\n  baseAddress = get_main_stack_pointer_00000900();\n  process_and_initialize_data_00004c84(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n               totalStack,stackPointer,baseAddress);\n  totalSize = totalSize + 0x200;\n  if (0 < totalStack) {\n    totalOffset = totalStack + totalOffset;\n  }\n  for (processIndex = 1; processIndex < 0x21; processIndex = processIndex + 1) {\n    currentItem = *(undefined4 **)(&DAT_1fff0358 + processIndex * 4);\n    if (currentItem != (undefined4 *)0x0) {\n      index = (uint)*(byte *)(currentItem + 1);\n      addressOffset = (&Elf32_Rel_ARRAY_1fff0200[4].r_offset)[index];\n      columnOffset = (int)&header + (uint)(8 < index);\n      processOffset = currentItem[0xb];\n      totalSize = processOffset + totalSize;\n      iVar1 = find_first_nonself_referencing_element_000010a0(currentItem[9]);\n      processOffset = processOffset - iVar1;\n      totalOffset = processOffset + totalOffset;\n      process_and_initialize_data_00004c84(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n                   (int)*(short *)((int)currentItem + 6),currentItem[10],addressOffset,columnOffset,\n                   *(undefined *)((int)currentItem + 5),currentItem[0xb],processOffset,currentItem[9],*currentItem);\n    }\n  }\n  process_and_initialize_data_00004c84(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,\n               &DAT_00007190,totalSize,totalOffset);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000211c": "print_process_details_0000211c",
                "local_40": "header",
                "local_3c": "processOffset",
                "local_38": "columnOffset",
                "local_34": "addressOffset",
                "local_30": "index",
                "local_2c": "currentItem",
                "local_28": "baseAddress",
                "local_24": "stackPointer",
                "local_20": "totalStack",
                "local_1a": "processIndex",
                "local_18": "totalOffset",
                "local_14": "totalSize"
            },
            "calling": [
                "FUN_00002eb4",
                "FUN_00000f04"
            ],
            "called": [
                "FUN_000010a0",
                "FUN_00004c84",
                "FUN_000008b8",
                "FUN_00000900",
                "FUN_0000091c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_0000211c(void)\n\n{\n  int iVar1;\n  undefined2 local_40;\n  int local_3c;\n  int local_38;\n  dword local_34;\n  uint local_30;\n  undefined4 *local_2c;\n  undefined4 local_28;\n  undefined4 local_24;\n  int local_20;\n  short local_1a;\n  int local_18;\n  int local_14;\n  \n  local_40 = 0x515f;\n  local_14 = 0;\n  local_18 = 0;\n  FUNC_00004c84(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",\n               &DAT_000070b8,\"state\");\n  local_20 = find_last_offset_000008b8();\n  local_24 = get_base_address_0000091c();\n  local_28 = get_main_stack_pointer_00000900();\n  FUNC_00004c84(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n               local_20,local_24,local_28);\n  local_14 = local_14 + 0x200;\n  if (0 < local_20) {\n    local_18 = local_20 + local_18;\n  }\n  for (local_1a = 1; local_1a < 0x21; local_1a = local_1a + 1) {\n    local_2c = *(undefined4 **)(&DAT_1fff0358 + local_1a * 4);\n    if (local_2c != (undefined4 *)0x0) {\n      local_30 = (uint)*(byte *)(local_2c + 1);\n      local_34 = (&Elf32_Rel_ARRAY_1fff0200[4].r_offset)[local_30];\n      local_38 = (int)&local_40 + (uint)(8 < local_30);\n      local_3c = local_2c[0xb];\n      local_14 = local_3c + local_14;\n      iVar1 = find_first_nonself_referencing_element_000010a0(local_2c[9]);\n      local_3c = local_3c - iVar1;\n      local_18 = local_3c + local_18;\n      FUNC_00004c84(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n                   (int)*(short *)((int)local_2c + 6),local_2c[10],local_34,local_38,\n                   *(undefined *)((int)local_2c + 5),local_2c[0xb],local_3c,local_2c[9],*local_2c);\n    }\n  }\n  FUNC_00004c84(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,\n               &DAT_00007190,local_14,local_18);\n  return;\n}\n\n"
        },
        "FUN_00002270": {
            "entrypoint": "0x00002270",
            "current_name": "check_equality_00002270",
            "code": "\nundefined checkEquality_00002270(int data)\n\n{\n  undefined result;\n  int value;\n  bool isEqual;\n  \n  value = *(int *)(data + 0xc);\n  isEqual = *(int *)(data + 8) == value;\n  if (isEqual) {\n    value = 1;\n  }\n  result = (undefined)value;\n  if (!isEqual) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002270": "check_equality_00002270",
                "param_1": "data",
                "uVar1": "result",
                "iVar2": "value",
                "bVar3": "isEqual"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002294": {
            "entrypoint": "0x00002294",
            "current_name": "check_sum_comparison_00002294",
            "code": "\nundefined checkSumComparison_00002294(int input)\n\n{\n  undefined result;\n  int sumDifference;\n  bool isMatch;\n  \n  sumDifference = *(int *)(input + 4);\n  isMatch = *(int *)(input + 0xc) - *(int *)(input + 8) == sumDifference;\n  if (isMatch) {\n    sumDifference = 1;\n  }\n  result = (undefined)sumDifference;\n  if (!isMatch) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002294": "check_sum_comparison_00002294",
                "param_1": "input",
                "iVar2": "sumDifference",
                "bVar3": "isMatch",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022be": {
            "entrypoint": "0x000022be",
            "current_name": "increment_and_update_memory_000022be",
            "code": "\nvoid incrementAndUpdateMemory_000022be(int *array,undefined value)\n\n{\n  uint currentIndex;\n  \n  currentIndex = array[3];\n  array[3] = currentIndex + 1;\n  *(undefined *)((currentIndex & array[1] - 1U) + *array) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000022be": "increment_and_update_memory_000022be",
                "param_1": "array",
                "param_2": "value",
                "uVar1": "currentIndex"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022f0": {
            "entrypoint": "0x000022f0",
            "current_name": "increment_offset_and_return_byte_000022f0",
            "code": "\nundefined incrementOffsetAndReturnByte_000022f0(int *offsetPointer)\n\n{\n  uint currentOffset;\n  \n  currentOffset = offsetPointer[2];\n  offsetPointer[2] = currentOffset + 1;\n  return *(undefined *)((currentOffset & offsetPointer[1] - 1U) + *offsetPointer);\n}\n\n",
            "renaming": {
                "FUN_000022f0": "increment_offset_and_return_byte_000022f0",
                "param_1": "offsetPointer",
                "uVar1": "currentOffset"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000231c": {
            "entrypoint": "0x0000231c",
            "current_name": "copy_bytes_0000231c",
            "code": "\nint copyBytes_0000231c(undefined4 sourcePointer,undefined *destinationPointer,int numBytes)\n\n{\n  undefined byte;\n  int equalityCheckResult;\n  undefined *dstPtr;\n  int remainingBytes;\n  \n  dstPtr = destinationPointer;\n  remainingBytes = numBytes;\n  while ((remainingBytes != 0 && (equalityCheckResult = check_equality_00002270(sourcePointer), equalityCheckResult == 0))) {\n    byte = increment_offset_and_return_byte_000022f0(sourcePointer);\n    *dstPtr = byte;\n    remainingBytes = remainingBytes + -1;\n    dstPtr = dstPtr + 1;\n  }\n  return numBytes - remainingBytes;\n}\n\n",
            "renaming": {
                "FUN_0000231c": "copy_bytes_0000231c",
                "param_1": "sourcePointer",
                "param_2": "destinationPointer",
                "param_3": "numBytes",
                "uVar1": "byte",
                "iVar2": "equalityCheckResult",
                "local_20": "dstPtr",
                "local_14": "remainingBytes"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002270",
                "FUN_000022f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002364": {
            "entrypoint": "0x00002364",
            "current_name": "validate_and_update_memory_00002364",
            "code": "\nundefined4 validate_and_update_memory_00002364(undefined4 input_value,undefined memory_reference)\n\n{\n  int checksum_result;\n  undefined4 return_value;\n  \n  checksum_result = check_sum_comparison_00002294(input_value);\n  if (checksum_result == 0) {\n    increment_and_update_memory_000022be(input_value,memory_reference);\n    return_value = 0;\n  }\n  else {\n    return_value = 0xffffffff;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00002364": "validate_and_update_memory_00002364",
                "param_1": "input_value",
                "param_2": "memory_reference",
                "iVar1": "checksum_result",
                "uVar2": "return_value"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_000022be",
                "FUN_00002294"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002396": {
            "entrypoint": "0x00002396",
            "current_name": "initialize_hardware_00002396",
            "code": "\nvoid initializeHardware_00002396(void)\n\n{\n  initialize_hardware_000025f4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002396": "initialize_hardware_00002396"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_000025f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023a4": {
            "entrypoint": "0x000023a4",
            "current_name": "initialize_system_000023a4",
            "code": "\nundefined4 initializeSystem_000023a4(void)\n\n{\n  undefined4 returnValue;\n  undefined buffer [128];\n  \n  execute_or_skip_software_interrupt_000023d0(0);\n  process_data_00004db8(\"Welcome to RIOT!\");\n  returnValue = process_data_00002e6c(0,buffer,0x80);\n  software_interrupt(0x3f);\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000023a4": "initialize_system_000023a4",
                "auStack_88": "buffer",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002e6c",
                "FUN_000023d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023c8": {
            "entrypoint": "0x000023c8",
            "current_name": "execute_software_interrupt_000023c8",
            "code": "\nvoid executeSoftwareInterrupt_000023c8(void)\n\n{\n  interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000023c8": "execute_software_interrupt_000023c8",
                "software_interrupt": "interrupt"
            },
            "calling": [
                "FUN_000023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023d0": {
            "entrypoint": "0x000023d0",
            "current_name": "execute_or_skip_software_interrupt_000023d0",
            "code": "\nundefined4 execute_or_skip_software_interrupt_000023d0(undefined4 interrupt_number)\n\n{\n  undefined4 result;\n  \n  if (DAT_1fff0d98 == 0) {\n    result = execute_software_interrupt_000023c8(1,interrupt_number,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000023d0": "execute_or_skip_software_interrupt_000023d0",
                "param_1": "interrupt_number",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_000023c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002400": {
            "entrypoint": "0x00002400",
            "current_name": "FUNC_00002400",
            "code": "\nvoid FUNC_00002400(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002400": "FUNC_00002400"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0000240c": {
            "entrypoint": "0x0000240c",
            "current_name": "extract_next_pointer_0000240c",
            "code": "\nundefined4 * extractNextPointer_0000240c(undefined4 *p_linked_list)\n\n{\n  undefined4 *p_next_pointer;\n  \n  p_next_pointer = (undefined4 *)*p_linked_list;\n  if (p_next_pointer != (undefined4 *)0x0) {\n    *p_linked_list = *p_next_pointer;\n  }\n  return p_next_pointer;\n}\n\n",
            "renaming": {
                "FUN_0000240c": "extract_next_pointer_0000240c",
                "param_1": "p_linked_list",
                "puVar1": "p_next_pointer"
            },
            "calling": [
                "FUN_000024bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002434": {
            "entrypoint": "0x00002434",
            "current_name": "update_interrupt_status_00002434",
            "code": "\nundefined4 updateInterruptStatus_00002434(int *interruptStatus,int condition)\n\n{\n  int tempVar;\n  undefined4 result;\n  \n  result = check_interrupts_00000cd0();\n  tempVar = DAT_1fff03dc;\n  if (*interruptStatus == 0) {\n    *interruptStatus = -1;\n    enable_irq_interrupts_if_privileged_00000d0c(result);\n    result = 1;\n  }\n  else if (condition == 0) {\n    enable_irq_interrupts_if_privileged_00000d0c(result);\n    result = 0;\n  }\n  else {\n    update_value_and_pointer_00000698(DAT_1fff03dc,2);\n    if (*interruptStatus == -1) {\n      *interruptStatus = tempVar + 8;\n      *(undefined4 *)*interruptStatus = 0;\n    }\n    else {\n      find_and_replace_ptr_00001034(interruptStatus,tempVar);\n    }\n    enable_irq_interrupts_if_privileged_00000d0c(result);\n    enable_memory_protection_0000093c();\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002434": "update_interrupt_status_00002434",
                "param_1": "interruptStatus",
                "param_2": "condition",
                "iVar1": "tempVar",
                "uVar2": "result"
            },
            "calling": [
                "FUN_0000129c"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0",
                "FUN_00001034",
                "FUN_0000093c",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000024bc": {
            "entrypoint": "0x000024bc",
            "current_name": "extract_and_process_pointer_value_000024bc",
            "code": "\nvoid extractAndProcessPointerValue_000024bc(int *pointerToValue)\n\n{\n  undefined temporaryByte;\n  undefined4 interruptStatus;\n  int pointerOffset;\n  \n  interruptStatus = check_interrupts_00000cd0();\n  if (*pointerToValue == 0) {\n    enable_irq_interrupts_if_privileged_00000d0c(interruptStatus);\n  }\n  else if (*pointerToValue == -1) {\n    *pointerToValue = 0;\n    enable_irq_interrupts_if_privileged_00000d0c(interruptStatus);\n  }\n  else {\n    pointerOffset = extract_next_pointer_0000240c(pointerToValue);\n    update_value_and_pointer_00000698(pointerOffset + -8,10);\n    if (*pointerToValue == 0) {\n      *pointerToValue = -1;\n    }\n    temporaryByte = *(undefined *)(pointerOffset + -3);\n    enable_irq_interrupts_if_privileged_00000d0c(interruptStatus);\n    check_memory_protection_00000738(temporaryByte);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000024bc": "extract_and_process_pointer_value_000024bc",
                "param_1": "pointerToValue",
                "uVar1": "temporaryByte",
                "uVar2": "interruptStatus",
                "iVar3": "pointerOffset"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000738",
                "FUN_00000cd0",
                "FUN_0000240c",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002538": {
            "entrypoint": "0x00002538",
            "current_name": "write_to_memory_00002538",
            "code": "\nvoid writeToMemory_00002538(byte address,uint data)\n\n{\n  if ((char)address < '\\0') {\n    (&DAT_e000ed14)[address & 0xf] = (char)((data & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)address + -0x1fff1c00) = (char)((data & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002538": "write_to_memory_00002538",
                "param_1": "address",
                "param_2": "data"
            },
            "calling": [
                "FUN_0000258c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000258c": {
            "entrypoint": "0x0000258c",
            "current_name": "initialize_memory_0000258c",
            "code": "\n\n\nvoid initializeMemory_0000258c(void)\n\n{\n  uint counter;\n  \n  _DAT_e000ed08 = 0;\n  write_to_memory_00002538(0xfffffffe,1);\n  write_to_memory_00002538(0xfffffffb,1);\n  for (counter = 0; counter < 0x66; counter = counter + 1) {\n    write_to_memory_00002538((int)(char)counter,1);\n  }\n  _DAT_e000ed10 = _DAT_e000ed10 | 0x10;\n  _DAT_e000ed14 = _DAT_e000ed14 | 0x200;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000258c": "initialize_memory_0000258c",
                "local_c": "counter"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000025f4": {
            "entrypoint": "0x000025f4",
            "current_name": "initialize_hardware_000025f4",
            "code": "\nvoid initialize_hardware_000025f4(void)\n\n{\n  initialize_hardware_000025f4_000027b0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000025f4": "initialize_hardware_000025f4"
            },
            "calling": [
                "FUN_00002396"
            ],
            "called": [
                "FUN_000027b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002600": {
            "entrypoint": "0x00002600",
            "current_name": "initialize_data_00002600",
            "code": "\nundefined4 initializeData_00002600(undefined4 input)\n\n{\n  undefined4 updatedDate;\n  \n  updatedDate = calculate_updated_date_000047e4(input);\n  initialize_data_0000285c(updatedDate);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002600": "initialize_data_00002600",
                "param_1": "input",
                "uVar1": "updatedDate"
            },
            "calling": [
                "FUN_00003478"
            ],
            "called": [
                "FUN_0000285c",
                "FUN_000047e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002624": {
            "entrypoint": "0x00002624",
            "current_name": "process_data_00002624",
            "code": "\nundefined4 processData_00002624(undefined4 inputData)\n\n{\n  undefined4 datValue;\n  undefined4 stackValue;\n  \n  datValue = get_dat_value_0000281c();\n  stackValue = 0;\n  calculate_date_time_0000443c(&datValue,inputData);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002624": "process_data_00002624",
                "param_1": "inputData",
                "local_10": "datValue",
                "uStack_c": "stackValue"
            },
            "calling": [
                "FUN_00003444"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_0000281c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002654": {
            "entrypoint": "0x00002654",
            "current_name": "update_data_and_initialize_00002654",
            "code": "\nundefined4 updateDataAndInitialize_00002654(undefined4 date,undefined4 data,undefined4 value)\n\n{\n  undefined4 updatedDate;\n  \n  updatedDate = calculate_updated_date_000047e4(date);\n  DAT_1fff0d9c = data;\n  initialize_data_00002894(updatedDate,0x26f1,value);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002654": "update_data_and_initialize_00002654",
                "param_1": "date",
                "param_2": "data",
                "param_3": "value",
                "uVar1": "updatedDate"
            },
            "calling": [
                "FUN_000033f4"
            ],
            "called": [
                "FUN_000047e4",
                "FUN_00002894"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002690": {
            "entrypoint": "0x00002690",
            "current_name": "initialize_data_and_calculate_date_time_00002690",
            "code": "\nundefined4 initialize_data_and_calculate_date_time_00002690(undefined4 input_param)\n\n{\n  undefined4 data_pointer;\n  undefined4 stack_variable;\n  \n  data_pointer = increment_data_pointer_000028f0();\n  stack_variable = 0;\n  calculate_date_time_0000443c(&data_pointer,input_param);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002690": "initialize_data_and_calculate_date_time_00002690",
                "param_1": "input_param",
                "local_10": "data_pointer",
                "uStack_c": "stack_variable"
            },
            "calling": [
                "FUN_000033c0"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_000028f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026c0": {
            "entrypoint": "0x000026c0",
            "current_name": "initialize_data_flags_000026c0",
            "code": "\nvoid initialize_data_flags_000026c0(void)\n\n{\n  clear_data_flags_00002910();\n  DAT_1fff0d9c = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026c0": "initialize_data_flags_000026c0"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002910"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026d8": {
            "entrypoint": "0x000026d8",
            "current_name": "initialize_flag_000026d8",
            "code": "\nvoid initialize_flag_000026d8(void)\n\n{\n  set_flag();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026d8": "initialize_flag_000026d8",
                "set_flag_0000294c": "set_flag"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026e4": {
            "entrypoint": "0x000026e4",
            "current_name": "clear_bit_in_register_000026e4",
            "code": "\nvoid clearBitInRegister_000026e4(void)\n\n{\n  clear_bit_in_register_00002970();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026e4": "clear_bit_in_register_000026e4"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026f0": {
            "entrypoint": "0x000026f0",
            "current_name": "execute_callback_000026f0",
            "code": "\nvoid executeCallback_000026f0(undefined4 callbackParameter)\n\n{\n  if (DAT_1fff0d9c != (code *)0x0) {\n    (*DAT_1fff0d9c)(callbackParameter);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026f0": "execute_callback_000026f0",
                "param_1": "callbackParameter"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002714": {
            "entrypoint": "0x00002714",
            "current_name": "set_bit_value_00002714",
            "code": "\nvoid setBitValue_00002714(byte inputByte)\n\n{\n  *(int *)(((uint)(int)(char)inputByte >> 5) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002714": "set_bit_value_00002714",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002744": {
            "entrypoint": "0x00002744",
            "current_name": "set_byte_value_00002744",
            "code": "\nvoid setByteValue_00002744(byte inputByte,uint inputValue)\n\n{\n  if ((char)inputByte < '\\0') {\n    (&DAT_e000ed14)[inputByte & 0xf] = (char)((inputValue & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)inputByte + -0x1fff1c00) = (char)((inputValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002744": "set_byte_value_00002744",
                "param_1": "inputByte",
                "param_2": "inputValue"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002798": {
            "entrypoint": "0x00002798",
            "current_name": "enable_memory_protection_00002798",
            "code": "\nvoid enable_memory_protection_00002798(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    enable_memory_protection_00002798_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002798": "enable_memory_protection_00002798"
            },
            "calling": [
                "FUN_00002994"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000027b0": {
            "entrypoint": "0x000027b0",
            "current_name": "initialize_hardware_000027b0",
            "code": "\n\n\nvoid initializeHardware_000027b0(void)\n\n{\n  _DAT_4004803c = _DAT_4004803c | 0x20000000;\n  if ((_DAT_4003d014 & 1) != 0) {\n    _DAT_4003d000 = 0;\n  }\n  _DAT_4003d010 = 0x104;\n  _DAT_4003d008 = 0xffffff42;\n  _DAT_4003d01c = 0;\n  set_flag_0000294c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000027b0": "initialize_hardware_000027b0"
            },
            "calling": [
                "FUN_000025f4"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000281c": {
            "entrypoint": "0x0000281c",
            "current_name": "get_dat_value_0000281c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00002840) */\n/* WARNING: Removing unreachable block (ram,0x0000284c) */\n\n\nundefined4 get_dat_value_0000281c(void)\n\n{\n  return _DAT_4003d000;\n}\n\n",
            "renaming": {
                "FUN_0000281c": "get_dat_value_0000281c"
            },
            "calling": [
                "FUN_00002624"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000285c": {
            "entrypoint": "0x0000285c",
            "current_name": "initialize_data_0000285c",
            "code": "\n\n\nvoid initializeData_0000285c(undefined4 data)\n\n{\n  _DAT_4003d000 = data;\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000285c": "initialize_data_0000285c",
                "param_1": "data"
            },
            "calling": [
                "FUN_00002600"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002894": {
            "entrypoint": "0x00002894",
            "current_name": "initialize_data_00002894",
            "code": "\n\n\nvoid initializeData_00002894(int initialValue,undefined4 value1,undefined4 value2)\n\n{\n  _DAT_4003d008 = initialValue + -1;\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb | 4;\n  DAT_1fff0da0 = value1;\n  DAT_1fff0da4 = value2;\n  set_byte_value_00002744(0x2e,10);\n  set_bit_value_00002714(0x2e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002894": "initialize_data_00002894",
                "param_1": "initialValue",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_00002654"
            ],
            "called": [
                "FUN_00002714",
                "FUN_00002744"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000028f0": {
            "entrypoint": "0x000028f0",
            "current_name": "increment_data_pointer_000028f0",
            "code": "\n\n\nint incrementDataPointer_000028f0(void)\n\n{\n  return _DAT_4003d008 + 1;\n}\n\n",
            "renaming": {
                "FUN_000028f0": "increment_data_pointer_000028f0"
            },
            "calling": [
                "FUN_00002690"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002910": {
            "entrypoint": "0x00002910",
            "current_name": "clear_data_flags_00002910",
            "code": "\n\n\nvoid clearDataFlags_00002910(void)\n\n{\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n  _DAT_4003d008 = 0;\n  DAT_1fff0da0 = 0;\n  DAT_1fff0da4 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002910": "clear_data_flags_00002910"
            },
            "calling": [
                "FUN_000026c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000294c": {
            "entrypoint": "0x0000294c",
            "current_name": "set_flag_0000294c",
            "code": "\n\n\nvoid set_flag_0000294c(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000294c": "set_flag_0000294c"
            },
            "calling": [
                "FUN_000026d8",
                "FUN_000027b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002970": {
            "entrypoint": "0x00002970",
            "current_name": "clear_bit_in_register_00002970",
            "code": "\n\n\nvoid clearBitInRegister_00002970(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002970": "clear_bit_in_register_00002970"
            },
            "calling": [
                "FUN_000026e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002994": {
            "entrypoint": "0x00002994",
            "current_name": "execute_memory_protection_00002994",
            "code": "\n\n\nvoid executeMemoryProtection_00002994(void)\n\n{\n  if (((_DAT_4003d014 & 4) != 0) && (DAT_1fff0da0 != (code *)0x0)) {\n    _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n    (*DAT_1fff0da0)(DAT_1fff0da4);\n  }\n  if (((_DAT_4003d014 & 2) != 0) && (DAT_1fff0da8 != (code *)0x0)) {\n    (*DAT_1fff0da8)(DAT_1fff0dac);\n  }\n  enable_memory_protection_00002798();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002994": "execute_memory_protection_00002994"
            },
            "calling": [],
            "called": [
                "FUN_00002798"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a00": {
            "entrypoint": "0x00002a00",
            "current_name": "extract_and_decrement_counter_00002a00",
            "code": "\nvoid extractAndDecrementCounter_00002a00(undefined4 input)\n\n{\n  extractAndDecrementCounter_00002a00Helper(input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a00": "extract_and_decrement_counter_00002a00",
                "param_1": "input",
                "extract_and_decrement_counter_00004cb4": "extractAndDecrementCounterHelper"
            },
            "calling": [
                "FUN_00002d94",
                "FUN_00002e48"
            ],
            "called": [
                "FUN_00004cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a18": {
            "entrypoint": "0x00002a18",
            "current_name": "find_matching_value_00002a18",
            "code": "\nint findMatchingValue_00002a18(int *array,undefined4 targetValue)\n\n{\n  int iVar1;\n  int *currentArray;\n  undefined **rebootString;\n  uint arrayIndex;\n  int *currentValue;\n  \n  currentArray = array;\n  rebootString = &PTR_s_reboot_00007300;\n  arrayIndex = 0;\n  do {\n    if (1 < arrayIndex) {\n      return 0;\n    }\n    currentValue = (&currentArray)[arrayIndex];\n    if (currentValue != (int *)0x0) {\n      for (; *currentValue != 0; currentValue = currentValue + 3) {\n        iVar1 = compareArrays(*currentValue,targetValue);\n        if (iVar1 == 0) {\n          return currentValue[2];\n        }\n      }\n    }\n    arrayIndex = arrayIndex + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002a18": "find_matching_value_00002a18",
                "param_1": "array",
                "param_2": "targetValue",
                "local_18": "currentArray",
                "local_14": "rebootString",
                "local_10": "arrayIndex",
                "local_c": "currentValue",
                "compare_arrays_00004e52": "compareArrays"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a88": {
            "entrypoint": "0x00002a88",
            "current_name": "print_command_descriptions_00002a88",
            "code": "\nvoid printCommandDescriptions_00002a88(int *commandList)\n\n{\n  int *currentCommand;\n  undefined **description;\n  uint index;\n  int *currentItem;\n  \n  process_and_initialize_data_00004c84(\"%-20s %s\\n\",\"Command\",\"Description\");\n  process_data_00004db8(\"---------------------------------------\");\n  currentCommand = commandList;\n  description = &PTR_s_reboot_00007300;\n  for (index = 0; index < 2; index = index + 1) {\n    currentItem = (&currentCommand)[index];\n    if (currentItem != (int *)0x0) {\n      for (; *currentItem != 0; currentItem = currentItem + 3) {\n        process_and_initialize_data_00004c84(\"%-20s %s\\n\",*currentItem,currentItem[1]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a88": "print_command_descriptions_00002a88",
                "param_1": "commandList",
                "local_18": "currentCommand",
                "local_14": "description",
                "local_10": "index",
                "local_c": "currentItem"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002b10": {
            "entrypoint": "0x00002b10",
            "current_name": "process_command_00002b10",
            "code": "\nvoid process_command_00002b10(undefined4 param,byte *command)\n\n{\n  int result;\n  byte *nextChar;\n  byte *commandArray [3];\n  code *matchingFunction;\n  char **argumentsArray;\n  uint argumentCount;\n  byte quoteType;\n  char *currentChar;\n  char *currentArgument;\n  char **argumentPointerArray;\n  uint index;\n  int escapeCount;\n  uint quoteCount;\n  byte *currentCharPointer;\n  \n  quoteCount = 0;\n  escapeCount = 0;\n  currentCharPointer = command;\n  while( true ) {\n    commandArray[0] = command;\n    commandArray[1] = (byte *)param;\n    if (0x20 < *currentCharPointer) {\n      if ((*currentCharPointer == 0x22) || (*currentCharPointer == 0x27)) {\n        quoteType = *currentCharPointer;\n        do {\n          nextChar = currentCharPointer + 1;\n          if (*nextChar == 0) {\n            currentCharPointer = nextChar;\n            process_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n          if (*nextChar == 0x5c) {\n            escapeCount = escapeCount + 1;\n            currentCharPointer = currentCharPointer + 2;\n            nextChar = currentCharPointer;\n            if (*currentCharPointer == 0) {\n              process_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          currentCharPointer = nextChar;\n        } while (quoteType != *currentCharPointer);\n        if (0x20 < currentCharPointer[1]) {\n          process_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n          return;\n        }\n      }\n      else {\n        do {\n          if (*currentCharPointer == 0x5c) {\n            escapeCount = escapeCount + 1;\n            currentCharPointer = currentCharPointer + 1;\n            if (*currentCharPointer == 0) {\n              process_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          currentCharPointer = currentCharPointer + 1;\n          if (*currentCharPointer == 0x22) {\n            process_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n        } while (0x20 < *currentCharPointer);\n      }\n      quoteCount = quoteCount + 1;\n    }\n    if (*currentCharPointer == 0) break;\n    *currentCharPointer = 0;\n    currentCharPointer = currentCharPointer + 1;\n  }\n  if (quoteCount != 0) {\n    argumentCount = quoteCount;\n    argumentsArray = (char **)((int)commandArray - ((quoteCount + 1) * 4 + 7 & 0xfffffff8));\n    argumentsArray[quoteCount] = (char *)0x0;\n    currentCharPointer = command;\n    for (index = 0; argumentPointerArray = argumentsArray, index < quoteCount; index = index + 1) {\n      for (; *currentCharPointer == 0; currentCharPointer = currentCharPointer + 1) {\n      }\n      if ((*currentCharPointer == 0x22) || (*currentCharPointer == 0x27)) {\n        currentCharPointer = currentCharPointer + 1;\n      }\n      argumentsArray[index] = (char *)currentCharPointer;\n      for (; *currentCharPointer != 0; currentCharPointer = currentCharPointer + 1) {\n      }\n    }\n    for (; (escapeCount != 0 && (*argumentPointerArray != (char *)0x0)); argumentPointerArray = argumentPointerArray + 1) {\n      for (currentArgument = *argumentPointerArray; *currentArgument != '\\0'; currentArgument = currentArgument + 1) {\n        if (*currentArgument == '\\') {\n          for (currentChar = currentArgument; *currentChar != '\\0'; currentChar = currentChar + 1) {\n            *currentChar = currentChar[1];\n          }\n          escapeCount = escapeCount + -1;\n          if (escapeCount == 0) break;\n        }\n      }\n    }\n    matchingFunction = (code *)find_matching_value_00002a18(param,*argumentsArray);\n    if (matchingFunction == (code *)0x0) {\n      result = compare_arrays_00004e52(&DAT_00007214,*argumentsArray);\n      if (result == 0) {\n        print_command_descriptions_00002a88(commandArray[1]);\n      }\n      else {\n        process_and_initialize_data_00004c84(\"shell: command not found: %s\\n\",*argumentsArray);\n      }\n    }\n    else {\n      (*matchingFunction)(quoteCount,argumentsArray);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002b10": "process_command_00002b10",
                "param_1": "param",
                "param_2": "command",
                "iVar1": "result",
                "pbVar2": "nextChar",
                "local_48": "commandArray",
                "local_3c": "matchingFunction",
                "local_38": "argumentsArray",
                "local_34": "argumentCount",
                "local_2d": "quoteType",
                "local_2c": "currentChar",
                "local_28": "currentArgument",
                "local_24": "argumentPointerArray",
                "local_20": "index",
                "local_1c": "escapeCount",
                "local_18": "quoteCount",
                "local_14": "currentCharPointer"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002a18",
                "FUN_00004e52",
                "FUN_00004c84",
                "FUN_00002a88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002d94": {
            "entrypoint": "0x00002d94",
            "current_name": "extract_and_decode_data_00002d94",
            "code": "\nuint extractAndDecodeData_00002d94(undefined *dataBuffer,int bufferSize)\n\n{\n  int extractedValue;\n  byte byteValue;\n  bool isFirstByte;\n  undefined *currentByte;\n  \n  currentByte = dataBuffer;\n  while( true ) {\n    if (bufferSize + -1 <= (int)currentByte - (int)dataBuffer) {\n      return 0xffffffff;\n    }\n    extractedValue = extract_data_00004418();\n    if (extractedValue < 0) break;\n    if ((extractedValue == 0xd) || (extractedValue == 10)) {\n      *currentByte = 0;\n      extract_and_decrement_counter_00002a00(0xd);\n      extract_and_decrement_counter_00002a00(10);\n      isFirstByte = currentByte == dataBuffer;\n      if (isFirstByte) {\n        dataBuffer = (undefined *)0x1;\n      }\n      byteValue = (byte)dataBuffer;\n      if (!isFirstByte) {\n        byteValue = 0;\n      }\n      return (uint)byteValue;\n    }\n    if ((extractedValue == 8) || (extractedValue == 0x7f)) {\n      if (currentByte != dataBuffer) {\n        currentByte = currentByte + -1;\n        *currentByte = 0;\n        extract_and_decrement_counter_00002a00(8);\n        extract_and_decrement_counter_00002a00(0x20);\n        extract_and_decrement_counter_00002a00(8);\n      }\n    }\n    else {\n      *currentByte = (char)extractedValue;\n      extract_and_decrement_counter_00002a00(extractedValue);\n      currentByte = currentByte + 1;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00002d94": "extract_and_decode_data_00002d94",
                "param_1": "dataBuffer",
                "param_2": "bufferSize",
                "iVar1": "extractedValue",
                "bVar2": "byteValue",
                "bVar3": "isFirstByte",
                "local_c": "currentByte"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004418",
                "FUN_00002a00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e48": {
            "entrypoint": "0x00002e48",
            "current_name": "process_and_decrement_counters_00002e48",
            "code": "\nvoid process_and_decrement_counters_00002e48(void)\n\n{\n  extract_and_decrement_counter(0x3e);\n  extract_and_decrement_counter(0x20);\n  process_relocation_entries(*(undefined4 *)(relocation_entries[16].r_offset + 8));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002e48": "process_and_decrement_counters_00002e48",
                "Elf32_Rel_ARRAY_1fff0200": "relocation_entries",
                "extract_and_decrement_counter_00002a00": "extract_and_decrement_counter",
                "process_relocation_entries_000041d0": "process_relocation_entries"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_000041d0",
                "FUN_00002a00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e6c": {
            "entrypoint": "0x00002e6c",
            "current_name": "process_data_00002e6c",
            "code": "\nvoid process_data_00002e6c(undefined4 ptr_data,undefined4 ptr_param1,undefined4 ptr_param2)\n\n{\n  int return_value;\n  \n  decrement_counters();\n  do {\n    return_value = extract_and_decode_data(ptr_param1,ptr_param2);\n    if (return_value == 0) {\n      process_command(ptr_data,ptr_param1);\n    }\n    decrement_counters();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002e6c": "process_data_00002e6c",
                "param_1": "ptr_data",
                "param_2": "ptr_param1",
                "param_3": "ptr_param2",
                "iVar1": "return_value",
                "process_and_decrement_counters_00002e48": "decrement_counters",
                "extract_and_decode_data_00002d94": "extract_and_decode_data",
                "process_command_00002b10": "process_command"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_00002d94",
                "FUN_00002b10",
                "FUN_00002e48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e9c": {
            "entrypoint": "0x00002e9c",
            "current_name": "execute_continuous_loop_00002e9c",
            "code": "\nvoid execute_continuous_loop_00002e9c(void)\n\n{\n  execute_continuous_loop_00002e9c_00003688();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002e9c": "execute_continuous_loop_00002e9c",
                "undefined4": "void"
            },
            "calling": [],
            "called": [
                "FUN_00003688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002eb4": {
            "entrypoint": "0x00002eb4",
            "current_name": "show_process_details_00002eb4",
            "code": "\nundefined4 showProcessDetails_00002eb4(void)\n\n{\n  printProcessDetails();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002eb4": "show_process_details_00002eb4",
                "print_process_details_0000211c": "printProcessDetails"
            },
            "calling": [],
            "called": [
                "FUN_0000211c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002ecc": {
            "entrypoint": "0x00002ecc",
            "current_name": "read_from_device_00002ecc",
            "code": "\nvoid readFromDevice_00002ecc(undefined4 deviceNumber,int deviceInfo)\n\n{\n  undefined4 classDescription;\n  undefined4 deviceData;\n  undefined buffer [8];\n  uint callbackResult;\n  \n  callbackResult = execute_callback_function_00003d64(deviceInfo,buffer);\n  if ((int)callbackResult < 1) {\n    process_and_initialize_data_00004c84(\"error: failed to read from device #%i\\n\",deviceNumber);\n  }\n  else {\n    deviceData = *(undefined4 *)(deviceInfo + 8);\n    classDescription = get_class_description_000039e8(*(undefined *)(*(int *)(deviceInfo + 0xc) + 8));\n    process_and_initialize_data_00004c84(\"Reading from #%i (%s|%s)\\n\",deviceNumber,deviceData,classDescription);\n    display_data_objects_00003694(buffer,callbackResult & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002ecc": "read_from_device_00002ecc",
                "param_1": "deviceNumber",
                "param_2": "deviceInfo",
                "uVar1": "classDescription",
                "uVar2": "deviceData",
                "auStack_1c": "buffer",
                "local_14": "callbackResult"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_00002f30"
            ],
            "called": [
                "FUN_000039e8",
                "FUN_00003694",
                "FUN_00003d64",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f30": {
            "entrypoint": "0x00002f30",
            "current_name": "process_device_data_00002f30",
            "code": "\nvoid process_device_data_00002f30(void)\n\n{\n  int device_index;\n  undefined4 *device_list;\n  \n  device_index = 0;\n  for (device_list = DAT_1fff0db0; device_list != (undefined4 *)0x0; device_list = (undefined4 *)*device_list) {\n    read_data_from_device(device_index,device_list);\n    process_data(&DAT_00007380);\n    device_index = device_index + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f30": "process_device_data_00002f30",
                "local_10": "device_index",
                "local_c": "device_list",
                "read_from_device_00002ecc": "read_data_from_device",
                "process_data_00004db8": "process_data"
            },
            "calling": [
                "FUN_00002fe0"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002ecc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f74": {
            "entrypoint": "0x00002f74",
            "current_name": "display_device_information_00002f74",
            "code": "\nvoid displayDeviceInformation_00002f74(void)\n\n{\n  undefined4 classDescription;\n  int deviceCount;\n  undefined4 *deviceList;\n  \n  deviceList = DAT_1fff0db0;\n  deviceCount = 0;\n  if (DAT_1fff0db0 == (undefined4 *)0x0) {\n    printMessage(\"No devices found\");\n  }\n  else {\n    printMessage(\"ID\\tClass\\t\\tName\");\n  }\n  for (; deviceList != (undefined4 *)0x0; deviceList = (undefined4 *)*deviceList) {\n    classDescription = getClassDescription(*(undefined *)(deviceList[3] + 8));\n    processAndInitializeData(\"#%i\\t%s\\t%s\\n\",deviceCount,classDescription,deviceList[2]);\n    deviceCount = deviceCount + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f74": "display_device_information_00002f74",
                "local_18": "deviceCount",
                "local_14": "deviceList",
                "uVar1": "classDescription",
                "process_data_00004db8": "printMessage",
                "get_class_description_000039e8": "getClassDescription",
                "process_and_initialize_data_00004c84": "processAndInitializeData"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_000039e8",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002fe0": {
            "entrypoint": "0x00002fe0",
            "current_name": "process_device_selection_00002fe0",
            "code": "\nvoid processDeviceSelection_00002fe0(int selectionCount,undefined4 *selectionParams)\n\n{\n  int comparisonResult;\n  undefined4 parsedValue;\n  \n  if (selectionCount < 3) {\n    process_and_initialize_data_00004c84(\"usage: %s %s <device id>|all\\n\",*selectionParams,selectionParams[1]);\n  }\n  else {\n    comparisonResult = compare_arrays_00004e52(selectionParams[2],&DAT_000073d4);\n    if (comparisonResult == 0) {\n      process_device_data_00002f30();\n    }\n    else {\n      parsedValue = parse_and_print_number_00004042(selectionParams[2]);\n      comparisonResult = find_nth_element_00003d24(parsedValue);\n      if (comparisonResult == 0) {\n        process_data_00004db8(\"error: undefined device id given\");\n      }\n      else {\n        read_from_device_00002ecc(parsedValue,comparisonResult);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002fe0": "process_device_selection_00002fe0",
                "param_1": "selectionCount",
                "param_2": "selectionParams",
                "iVar1": "comparisonResult",
                "uVar2": "parsedValue"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00004e52",
                "FUN_00003d24",
                "FUN_00002ecc",
                "FUN_00002f30",
                "FUN_00004c84",
                "FUN_00004042"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000305c": {
            "entrypoint": "0x0000305c",
            "current_name": "write_to_device_0000305c",
            "code": "\nvoid writeToDevice_0000305c(int argc,undefined4 *argv)\n\n{\n  undefined2 parsedValue;\n  undefined2 values [4];\n  uint numValues;\n  int deviceIndex;\n  undefined4 deviceId;\n  int index;\n  \n  if (argc < 4) {\n    process_and_initialize_data_00004c84(\"usage: %s %s <device id> <value 0> [<value 1> [<value 2]]\\n\",*argv,argv[1]);\n  }\n  else {\n    deviceId = parse_and_print_number_00004042(argv[2]);\n    deviceIndex = find_nth_element_00003d24(deviceId);\n    if (deviceIndex == 0) {\n      process_data_00004db8(\"error: undefined device given\");\n    }\n    else {\n      fill_memory_with_byte_00004622(values,0,8);\n      if (5 < argc) {\n        argc = 6;\n      }\n      numValues = argc - 3;\n      for (index = 0; index < (int)numValues; index = index + 1) {\n        parsedValue = parse_and_print_number_00004042(argv[index + 3]);\n        values[index] = parsedValue;\n      }\n      process_and_initialize_data_00004c84(\"Writing to device #%i - %s\\n\",deviceId,*(undefined4 *)(deviceIndex + 8));\n      display_data_objects_00003694(values,numValues & 0xff);\n      numValues = process_function_00003d94(deviceIndex,values);\n      if ((int)numValues < 1) {\n        if (numValues == -0x86) {\n          process_and_initialize_data_00004c84(\"error: device #%i is not writable\\n\",deviceId);\n        }\n        else {\n          process_and_initialize_data_00004c84(\"error: failure to write to device #%i\\n\",deviceId);\n        }\n      }\n      else {\n        process_and_initialize_data_00004c84(\"data successfully written to device #%i\\n\",deviceId);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000305c": "write_to_device_0000305c",
                "param_1": "argc",
                "param_2": "argv",
                "local_10": "deviceId",
                "local_14": "deviceIndex",
                "local_18": "numValues",
                "local_c": "index",
                "uVar1": "parsedValue",
                "auStack_20": "values"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00003694",
                "FUN_00003d94",
                "FUN_00003d24",
                "FUN_00004622",
                "FUN_00004c84",
                "FUN_00004042"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000316c": {
            "entrypoint": "0x0000316c",
            "current_name": "process_device_command_0000316c",
            "code": "\nundefined4 process_device_command_0000316c(int device_count,undefined4 *command_args)\n\n{\n  int array_comparison_result;\n  \n  if (device_count < 2) {\n    display_device_information_00002f74();\n  }\n  else {\n    array_comparison_result = compare_arrays_00004e52(command_args[1],&DAT_000074ec);\n    if (array_comparison_result == 0) {\n      process_device_selection_00002fe0(device_count,command_args);\n    }\n    else {\n      array_comparison_result = compare_arrays_00004e52(command_args[1],\"write\");\n      if (array_comparison_result == 0) {\n        write_to_device_0000305c(device_count,command_args);\n      }\n      else {\n        process_and_initialize_data_00004c84(\"usage: %s read|write\\n\",*command_args);\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000316c": "process_device_command_0000316c",
                "param_1": "device_count",
                "param_2": "command_args",
                "iVar1": "array_comparison_result"
            },
            "calling": [],
            "called": [
                "FUN_00002f74",
                "FUN_00002fe0",
                "FUN_00004e52",
                "FUN_00004c84",
                "FUN_0000305c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000031e0": {
            "entrypoint": "0x000031e0",
            "current_name": "ring_alarm_000031e0",
            "code": "\nvoid ringAlarm_000031e0(void)\n\n{\n  process_data_00004db8(\"The alarm rang\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_000031e0": "ring_alarm_000031e0"
            },
            "calling": [],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_000031e0(void)\n\n{\n  FUNC_00004db8(\"The alarm rang\");\n  return;\n}\n\n"
        },
        "FUN_000031fc": {
            "entrypoint": "0x000031fc",
            "current_name": "calculate_day_of_week_000031fc",
            "code": "\nint calculateDayOfWeek_000031fc(int year,int month,int day)\n\n{\n  byte isLeapYear;\n  int adjustedYear;\n  \n  adjustedYear = month;\n  if (month < 3) {\n    adjustedYear = 1;\n  }\n  isLeapYear = (byte)adjustedYear;\n  if (2 < month) {\n    isLeapYear = 0;\n  }\n  year = year - (uint)isLeapYear;\n  adjustedYear = year;\n  if (year < 0) {\n    adjustedYear = year + 3;\n  }\n  return ((((adjustedYear >> 2) + year) - year / 100) + year / 400 +\n          *(int *)((int)dayOfWeekArray + (month + -1) * 4 + 0x50) + day) % 7;\n}\n\n",
            "renaming": {
                "FUN_000031fc": "calculate_day_of_week_000031fc",
                "param_1": "year",
                "param_2": "month",
                "param_3": "day",
                "bVar1": "isLeapYear",
                "iVar2": "adjustedYear",
                "Elf32_Rel_ARRAY_1fff0200": "dayOfWeekArray"
            },
            "calling": [
                "FUN_0000328c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000328c": {
            "entrypoint": "0x0000328c",
            "current_name": "initialize_date_0000328c",
            "code": "\nundefined4 initializeDate_0000328c(undefined4 *dateString,int *dateArray)\n\n{\n  int dayOfWeek;\n  int currentIndex;\n  short parsedNumber;\n  \n  parsedNumber = parse_number_00004f84(*dateString,&currentIndex,10);\n  dateArray[5] = parsedNumber + -0x76c;\n  parsedNumber = parse_number_00004f84(currentIndex + 1,&currentIndex,10);\n  dateArray[4] = parsedNumber + -1;\n  parsedNumber = parse_number_00004f84(currentIndex + 1,&currentIndex,10);\n  dateArray[3] = (int)parsedNumber;\n  parsedNumber = parse_number_00004f84(dateString[1],&currentIndex,10);\n  dateArray[2] = (int)parsedNumber;\n  parsedNumber = parse_number_00004f84(currentIndex + 1,&currentIndex,10);\n  dateArray[1] = (int)parsedNumber;\n  parsedNumber = parse_number_00004f84(currentIndex + 1,&currentIndex,10);\n  *dateArray = (int)parsedNumber;\n  dayOfWeek = calculate_day_of_week_000031fc(dateArray[5] + 0x76c,dateArray[4] + 1,dateArray[3]);\n  dateArray[6] = dayOfWeek;\n  dateArray[8] = -1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000328c": "initialize_date_0000328c",
                "param_1": "dateString",
                "param_2": "dateArray",
                "iVar1": "dayOfWeek",
                "local_10": "currentIndex",
                "local_a": "parsedNumber"
            },
            "calling": [
                "FUN_000033f4",
                "FUN_00003478"
            ],
            "called": [
                "FUN_000031fc",
                "FUN_00004f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003378": {
            "entrypoint": "0x00003378",
            "current_name": "print_date_time_00003378",
            "code": "\nundefined4 printDateTime_00003378(undefined4 *dateTime)\n\n{\n  process_and_initialize_data_00004c84(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",dateTimeYear + 0x76c,dateTimeMonth + 1,dateTimeDay,\n               dateTimeHour,dateTimeMinute,*dateTime);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00003378": "print_date_time_00003378",
                "param_1": "dateTime",
                "param_1[5]": "dateTimeYear",
                "param_1[4]": "dateTimeMonth",
                "param_1[3]": "dateTimeDay",
                "param_1[2]": "dateTimeHour",
                "param_1[1]": "dateTimeMinute"
            },
            "calling": [
                "FUN_00003444",
                "FUN_000033c0"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_00003378(undefined4 *param_1)\n\n{\n  FUNC_00004c84(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",param_1[5] + 0x76c,param_1[4] + 1,param_1[3],\n               param_1[2],param_1[1],*param_1);\n  return 0;\n}\n\n"
        },
        "FUN_000033c0": {
            "entrypoint": "0x000033c0",
            "current_name": "check_alarm_and_print_date_time_000033c0",
            "code": "\nbool checkAlarmAndPrintDateTime_000033c0(void)\n\n{\n  int result;\n  undefined dataAndTime [36];\n  \n  result = initializeDataAndCalculateDateTime(dataAndTime);\n  if (result != 0) {\n    processData(\"rtc: error getting alarm\");\n  }\n  else {\n    printDateTime(dataAndTime);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_000033c0": "check_alarm_and_print_date_time_000033c0",
                "iVar1": "result",
                "auStack_2c": "dataAndTime",
                "initialize_data_and_calculate_date_time_00002690": "initializeDataAndCalculateDateTime",
                "process_data_00004db8": "processData",
                "print_date_time_00003378": "printDateTime"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002690",
                "FUN_00003378"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033f4": {
            "entrypoint": "0x000033f4",
            "current_name": "check_and_update_alarm_000033f4",
            "code": "\nundefined4 checkAndUpdateAlarm_000033f4(undefined4 inputParam)\n\n{\n  int result;\n  undefined4 returnValue;\n  undefined buffer [36];\n  \n  result = initialize_date_0000328c(inputParam,buffer);\n  if (result == 0) {\n    result = update_data_and_initialize_00002654(buffer,0x31e1,0);\n    if (result == -1) {\n      process_data_00004db8(\"rtc: error setting alarm\");\n      returnValue = 1;\n    }\n    else {\n      returnValue = 0;\n    }\n  }\n  else {\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000033f4": "check_and_update_alarm_000033f4",
                "param_1": "inputParam",
                "iVar1": "result",
                "uVar2": "returnValue",
                "auStack_2c": "buffer"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002654",
                "FUN_0000328c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_000033f4(undefined4 param_1)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined auStack_2c [36];\n  \n  iVar1 = initialize_date_0000328c(param_1,auStack_2c);\n  if (iVar1 == 0) {\n    iVar1 = update_data_and_initialize_00002654(auStack_2c,0x31e1,0);\n    if (iVar1 == -1) {\n      FUNC_00004db8(\"rtc: error setting alarm\");\n      uVar2 = 1;\n    }\n    else {\n      uVar2 = 0;\n    }\n  }\n  else {\n    uVar2 = 1;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_00003444": {
            "entrypoint": "0x00003444",
            "current_name": "print_date_time_or_report_error_00003444",
            "code": "\nbool printDateTimeOrReportError_00003444(void)\n\n{\n  int dataProcessingResult;\n  undefined stackData [36];\n  \n  dataProcessingResult = process_data_00002624(stackData);\n  if (dataProcessingResult != 0) {\n    process_data_00004db8(\"rtc: error getting time\");\n  }\n  else {\n    print_date_time_00003378(stackData);\n  }\n  return dataProcessingResult != 0;\n}\n\n",
            "renaming": {
                "FUN_00003444": "print_date_time_or_report_error_00003444",
                "auStack_2c": "stackData",
                "iVar1": "dataProcessingResult"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002624",
                "FUN_00003378"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003478": {
            "entrypoint": "0x00003478",
            "current_name": "initialize_system_00003478",
            "code": "\nundefined4 initialize_system_00003478(undefined4 system_param)\n\n{\n  int result;\n  undefined4 status;\n  undefined date_array [36];\n  \n  result = initialize_date_0000328c(system_param,date_array);\n  if (result == 0) {\n    result = initialize_data_00002600(date_array);\n    if (result == -1) {\n      process_data_00004db8(\"rtc: error setting time\");\n      status = 1;\n    }\n    else {\n      status = 0;\n    }\n  }\n  else {\n    status = 1;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_00003478": "initialize_system_00003478",
                "param_1": "system_param",
                "iVar1": "result",
                "uVar2": "status",
                "auStack_2c": "date_array"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002600",
                "FUN_0000328c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_00003478(undefined4 param_1)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined auStack_2c [36];\n  \n  iVar1 = initialize_date_0000328c(param_1,auStack_2c);\n  if (iVar1 == 0) {\n    iVar1 = initialize_data_00002600(auStack_2c);\n    if (iVar1 == -1) {\n      FUNC_00004db8(\"rtc: error setting time\");\n      uVar2 = 1;\n    }\n    else {\n      uVar2 = 0;\n    }\n  }\n  else {\n    uVar2 = 1;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_000034c0": {
            "entrypoint": "0x000034c0",
            "current_name": "print_usage_000034c0",
            "code": "\nundefined4 printUsage_000034c0(void)\n\n{\n  process_data_00004db8(\"usage: rtc <command> [arguments]\");\n  process_data_00004db8(\"commands:\");\n  process_data_00004db8(\"\\tpoweron\\t\\tpower the interface on\");\n  process_data_00004db8(\"\\tpoweroff\\tpower the interface off\");\n  process_data_00004db8(\"\\tclearalarm\\tdeactivate the current alarm\");\n  process_data_00004db8(\"\\tgetalarm\\tprint the currently alarm time\");\n  process_data_00004db8(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  process_data_00004db8(\"\\tgettime\\t\\tprint the current time\");\n  process_data_00004db8(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000034c0": "print_usage_000034c0"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_000034c0(void)\n\n{\n  FUNC_00004db8(\"usage: rtc <command> [arguments]\");\n  FUNC_00004db8(\"commands:\");\n  FUNC_00004db8(\"\\tpoweron\\t\\tpower the interface on\");\n  FUNC_00004db8(\"\\tpoweroff\\tpower the interface off\");\n  FUNC_00004db8(\"\\tclearalarm\\tdeactivate the current alarm\");\n  FUNC_00004db8(\"\\tgetalarm\\tprint the currently alarm time\");\n  FUNC_00004db8(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  FUNC_00004db8(\"\\tgettime\\t\\tprint the current time\");\n  FUNC_00004db8(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n"
        },
        "FUN_00003524": {
            "entrypoint": "0x00003524",
            "current_name": "check_command_and_execute_00003524",
            "code": "\nundefined4 checkCommandAndExecute_00003524(int numParams,int commandParams)\n\n{\n  int comparisonResult;\n  undefined4 returnValue;\n  \n  if (numParams < 2) {\n    print_usage_000034c0();\n    returnValue = 1;\n  }\n  else {\n    comparisonResult = compare_bytes_00004e66(*(undefined4 *)(commandParams + 4),\"poweron\",7);\n    if (comparisonResult == 0) {\n      initialize_flag_000026d8();\n    }\n    else {\n      comparisonResult = compare_bytes_00004e66(*(undefined4 *)(commandParams + 4),\"poweroff\",8);\n      if (comparisonResult == 0) {\n        clear_bit_in_register_000026e4();\n      }\n      else {\n        comparisonResult = compare_bytes_00004e66(*(undefined4 *)(commandParams + 4),\"clearalarm\",8);\n        if (comparisonResult == 0) {\n          initialize_data_flags_000026c0();\n        }\n        else {\n          comparisonResult = compare_bytes_00004e66(*(undefined4 *)(commandParams + 4),\"getalarm\",8);\n          if (comparisonResult == 0) {\n            check_alarm_and_print_date_time_000033c0();\n          }\n          else {\n            comparisonResult = compare_bytes_00004e66(*(undefined4 *)(commandParams + 4),\"setalarm\",8);\n            if ((comparisonResult == 0) && (numParams == 4)) {\n              check_and_update_alarm_000033f4(commandParams + 8);\n            }\n            else {\n              comparisonResult = compare_bytes_00004e66(*(undefined4 *)(commandParams + 4),\"gettime\",7);\n              if (comparisonResult == 0) {\n                print_date_time_or_report_error_00003444();\n              }\n              else {\n                comparisonResult = compare_bytes_00004e66(*(undefined4 *)(commandParams + 4),\"settime\",7);\n                if ((comparisonResult != 0) || (numParams != 4)) {\n                  process_and_initialize_data_00004c84(\"unknown command or missing parameters: %s\\n\\n\",\n                               *(undefined4 *)(commandParams + 4));\n                  print_usage_000034c0();\n                  return 1;\n                }\n                initialize_system_00003478(commandParams + 8);\n              }\n            }\n          }\n        }\n      }\n    }\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003524": "check_command_and_execute_00003524",
                "param_1": "numParams",
                "param_2": "commandParams",
                "iVar1": "comparisonResult",
                "uVar2": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_000034c0",
                "FUN_000033f4",
                "FUN_00003478",
                "FUN_00003444",
                "FUN_00004e66",
                "FUN_00004c84",
                "FUN_000026d8",
                "FUN_000026e4",
                "FUN_000033c0",
                "FUN_000026c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003658": {
            "entrypoint": "0x00003658",
            "current_name": "continuous_loop_00003658",
            "code": "\nvoid continuousLoop_00003658(void)\n\n{\n  performBarrier(0xf);\n  performBarrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00003658": "continuous_loop_00003658",
                "DataSynchronizationBarrier": "performBarrier"
            },
            "calling": [
                "FUN_00003688"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003688": {
            "entrypoint": "0x00003688",
            "current_name": "execute_continuous_loop_00003688",
            "code": "\nvoid execute_continuous_loop_00003688(void)\n\n{\n  continuous_loop();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003688": "execute_continuous_loop_00003688",
                "continuous_loop_00003658": "continuous_loop"
            },
            "calling": [
                "FUN_00002e9c"
            ],
            "called": [
                "FUN_00003658"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003694": {
            "entrypoint": "0x00003694",
            "current_name": "display_data_objects_00003694",
            "code": "\nvoid displayDataObjects_00003694(int dataObjectPointer,byte numObjects)\n\n{\n  undefined4 memoryAddress;\n  char charValue;\n  uint bitValue;\n  bool isBitSet;\n  undefined stackArray [8];\n  int returnValue;\n  char mapValue;\n  byte objectIndex;\n  \n  if ((dataObjectPointer == 0) || (3 < numObjects)) {\n    process_data_00004db8(\"Unable to display data object\");\n  }\n  else {\n    process_and_initialize_data_00004c84(\"Data:\");\n    for (objectIndex = 0; objectIndex < numObjects; objectIndex = objectIndex + 1) {\n      if (*(byte *)(dataObjectPointer + 6) < 0x14) {\n        bitValue = 1 << (uint)*(byte *)(dataObjectPointer + 6) & 0x8018f;\n        isBitSet = bitValue != 0;\n        if (isBitSet) {\n          bitValue = 1;\n        }\n        charValue = (char)bitValue;\n        if (!isBitSet) {\n          charValue = '\\0';\n        }\n        if (charValue == '\\0') goto LAB_000036ee;\n        mapValue = '\\0';\n      }\n      else {\nLAB_000036ee:\n        mapValue = map_parameter_value_00003918((int)*(char *)(dataObjectPointer + 7));\n      }\n      process_and_initialize_data_00004c84(&DAT_000077bc);\n      if (numObjects < 2) {\n        process_and_initialize_data_00004c84(\"     \");\n      }\n      else {\n        process_and_initialize_data_00004c84(\"[%u] \",objectIndex);\n      }\n      if (mapValue == '\\0') {\n        if (*(char *)(dataObjectPointer + 7) == '\\0') {\n          process_and_initialize_data_00004c84(&DAT_000077d8,(int)*(short *)(dataObjectPointer + (uint)objectIndex * 2));\n        }\n        else if ((*(char *)(dataObjectPointer + 7) + 4 < 0 == SCARRY4((int)*(char *)(dataObjectPointer + 7),4)) &&\n                (*(char *)(dataObjectPointer + 7) < '\\0')) {\n          returnValue = process_and_return_integer_00003e9e(stackArray,(int)*(short *)(dataObjectPointer + (uint)objectIndex * 2),\n                                  (int)*(char *)(dataObjectPointer + 7));\n          stackArray[returnValue] = 0;\n          process_and_initialize_data_00004c84(&DAT_000077dc,stackArray);\n        }\n        else {\n          process_and_initialize_data_00004c84(\"%iE%i\",(int)*(short *)(dataObjectPointer + (uint)objectIndex * 2),\n                       (int)*(char *)(dataObjectPointer + 7));\n        }\n      }\n      else {\n        process_and_initialize_data_00004c84(\"%6d %c\",(int)*(short *)(dataObjectPointer + (uint)objectIndex * 2),mapValue);\n      }\n      memoryAddress = get_memory_address_00003810(*(undefined *)(dataObjectPointer + 6));\n      process_and_initialize_data_00004c84(&DAT_000077e8,memoryAddress);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003694": "display_data_objects_00003694",
                "param_1": "dataObjectPointer",
                "param_2": "numObjects",
                "uVar1": "memoryAddress",
                "cVar2": "charValue",
                "uVar3": "bitValue",
                "bVar4": "isBitSet",
                "auStack_18": "stackArray",
                "local_10": "returnValue",
                "local_a": "mapValue",
                "local_9": "objectIndex"
            },
            "calling": [
                "FUN_00002ecc",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00003e9e",
                "FUN_00003918",
                "FUN_00003810",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003810": {
            "entrypoint": "0x00003810",
            "current_name": "get_memory_address_00003810",
            "code": "\nundefined * getMemoryAddress_00003810(undefined value)\n\n{\n  undefined *result;\n  \n  switch(value) {\n  case 2:\n    result = &DAT_000077ec;\n    break;\n  case 3:\n    result = &DAT_000077f0;\n    break;\n  case 4:\n    result = &DAT_000077f4;\n    break;\n  case 5:\n    result = &DAT_000077f8;\n    break;\n  case 6:\n    result = &DAT_000077fc;\n    break;\n  case 7:\n    result = (undefined *)0x7800;\n    break;\n  case 8:\n    result = &DAT_00007804;\n    break;\n  case 9:\n    result = &DAT_00007808;\n    break;\n  case 10:\n    result = &DAT_0000780c;\n    break;\n  case 0xb:\n    result = &DAT_00007810;\n    break;\n  case 0xc:\n    result = &DAT_00007814;\n    break;\n  case 0xd:\n    result = &DAT_00007818;\n    break;\n  case 0xe:\n    result = &DAT_0000781c;\n    break;\n  case 0xf:\n    result = &DAT_00007820;\n    break;\n  case 0x10:\n    result = &DAT_00007824;\n    break;\n  case 0x11:\n    result = &DAT_0000782c;\n    break;\n  default:\n    result = &DAT_00007834;\n    break;\n  case 0x13:\n    result = &DAT_00007830;\n    break;\n  case 0x15:\n    result = &DAT_00007828;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003810": "get_memory_address_00003810",
                "param_1": "value",
                "puVar1": "result"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003918": {
            "entrypoint": "0x00003918",
            "current_name": "map_parameter_value_00003918",
            "code": "\nundefined4 mapParameterValue_00003918(undefined parameter)\n\n{\n  undefined4 result;\n  \n  switch(parameter) {\n  case 2:\n    result = 0x68;\n    break;\n  case 3:\n    result = 0x6b;\n    break;\n  case 6:\n    result = 0x4d;\n    break;\n  case 9:\n    result = 0x47;\n    break;\n  case 0xc:\n    result = 0x54;\n    break;\n  case 0xf:\n    result = 0x50;\n    break;\n  case 0xf1:\n    result = 0x66;\n    break;\n  default:\n    result = 0;\n    break;\n  case 0xf4:\n    result = 0x70;\n    break;\n  case 0xf7:\n    result = 0x6e;\n    break;\n  case 0xfa:\n    result = 0x75;\n    break;\n  case 0xfd:\n    result = 0x6d;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003918": "map_parameter_value_00003918",
                "param_1": "parameter",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000039e8": {
            "entrypoint": "0x000039e8",
            "current_name": "get_class_description_000039e8",
            "code": "\nchar * getClassDescription_000039e8(char classCode)\n\n{\n  char *description;\n  \n  switch(classCode) {\n  case '\\0':\n    description = \"CLASS_UNDEF\";\n    break;\n  case '@':\n    description = \"ACT_ANY\";\n    break;\n  case 'B':\n    description = \"ACT_LED_RGB\";\n    break;\n  case 'C':\n    description = \"ACT_SERVO\";\n    break;\n  case 'D':\n    description = \"ACT_MOTOR\";\n    break;\n  case 'E':\n    description = \"ACT_SWITCH\";\n    break;\n  case 'F':\n    description = \"ACT_DIMMER\";\n    break;\n  case -0x80:\n    description = \"SENSE_ANY\";\n    break;\n  case -0x7f:\n    description = \"SENSE_BTN\";\n    break;\n  case -0x7e:\n    description = \"SENSE_TEMP\";\n    break;\n  case -0x7d:\n    description = \"SENSE_HUM\";\n    break;\n  case -0x7c:\n    description = \"SENSE_LIGHT\";\n    break;\n  case -0x7b:\n    description = \"SENSE_ACCEL\";\n    break;\n  case -0x7a:\n    description = \"SENSE_MAG\";\n    break;\n  case -0x79:\n    description = \"SENSE_GYRO\";\n    break;\n  case -0x78:\n    description = \"SENSE_COLOR\";\n    break;\n  case -0x77:\n    description = \"SENSE_PRESS\";\n    break;\n  case -0x76:\n    description = \"SENSE_ANALOG\";\n    break;\n  case -0x75:\n    description = \"SENSE_UV\";\n    break;\n  case -0x74:\n    description = \"SENSE_OBJTEMP\";\n    break;\n  case -0x73:\n    description = \"SENSE_PULSE_COUNT\";\n    break;\n  case -0x72:\n    description = \"SENSE_DISTANCE\";\n    break;\n  case -0x71:\n    description = \"SENSE_CO2\";\n    break;\n  default:\n    if (classCode == -1) {\n      return \"CLASS_ANY\";\n    }\n  case '\\x01':\n  case '\\x02':\n  case '\\x03':\n  case '\\x04':\n  case '\\x05':\n  case '\\x06':\n  case '\\a':\n  case '\\b':\n  case '\\t':\n  case '\\n':\n  case '\\v':\n  case '\\f':\n  case '\\r':\n  case '\\x0e':\n  case '\\x0f':\n  case '\\x10':\n  case '\\x11':\n  case '\\x12':\n  case '\\x13':\n  case '\\x14':\n  case '\\x15':\n  case '\\x16':\n  case '\\x17':\n  case '\\x18':\n  case '\\x19':\n  case '\\x1a':\n  case '\\x1b':\n  case '\\x1c':\n  case '\\x1d':\n  case '\\x1e':\n  case '\\x1f':\n  case ' ':\n  case '!':\n  case '\\\"':\n  case '#':\n  case '$':\n  case '%':\n  case '&':\n  case '\\'':\n  case '(':\n  case ')':\n  case '*':\n  case '+':\n  case ',':\n  case '-':\n  case '.':\n  case '/':\n  case '0':\n  case '1':\n  case '2':\n  case '3':\n  case '4':\n  case '5':\n  case '6':\n  case '7':\n  case '8':\n  case '9':\n  case ':':\n  case ';':\n  case '<':\n  case '=':\n  case '>':\n  case '?':\n  case 'A':\n  case 'G':\n  case 'H':\n  case 'I':\n  case 'J':\n  case 'K':\n  case 'L':\n  case 'M':\n  case 'N':\n  case 'O':\n  case 'P':\n  case 'Q':\n  case 'R':\n  case 'S':\n  case 'T':\n  case 'U':\n  case 'V':\n  case 'W':\n  case 'X':\n  case 'Y':\n  case 'Z':\n  case '[':\n  case '\\':\n  case ']':\n  case '^':\n  case '_':\n  case '`':\n  case 'a':\n  case 'b':\n  case 'c':\n  case 'd':\n  case 'e':\n  case 'f':\n  case 'g':\n  case 'h':\n  case 'i':\n  case 'j':\n  case 'k':\n  case 'l':\n  case 'm':\n  case 'n':\n  case 'o':\n  case 'p':\n  case 'q':\n  case 'r':\n  case 's':\n  case 't':\n  case 'u':\n  case 'v':\n  case 'w':\n  case 'x':\n  case 'y':\n  case 'z':\n  case '{':\n  case '|':\n  case '}':\n  case '~':\n  case '\\x7f':\n    description = \"CLASS_UNKNOWN\";\n  }\n  return description;\n}\n\n",
            "renaming": {
                "FUN_000039e8": "get_class_description_000039e8",
                "param_1": "classCode",
                "pcVar1": "description"
            },
            "calling": [
                "FUN_00002f74",
                "FUN_00002ecc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d24": {
            "entrypoint": "0x00003d24",
            "current_name": "find_nth_element_00003d24",
            "code": "\nundefined4 * find_nth_element_00003d24(int n)\n\n{\n  int count;\n  undefined4 *current_element;\n  \n  count = 0;\n  for (current_element = DAT_1fff0db0; (count < n && (current_element != (undefined4 *)0x0));\n      current_element = (undefined4 *)*current_element) {\n    count = count + 1;\n  }\n  return current_element;\n}\n\n",
            "renaming": {
                "FUN_00003d24": "find_nth_element_00003d24",
                "param_1": "n",
                "local_10": "count",
                "local_c": "current_element"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d64": {
            "entrypoint": "0x00003d64",
            "current_name": "execute_callback_function_00003d64",
            "code": "\nundefined4 executeCallbackFunction_00003d64(int callbackFunction,undefined4 callbackArgument)\n\n{\n  undefined4 returnValue;\n  \n  if (callbackFunction == 0) {\n    returnValue = 0xffffffed;\n  }\n  else {\n    returnValue = (***(code ***)(callbackFunction + 0xc))(*(undefined4 *)(callbackFunction + 4),callbackArgument);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003d64": "execute_callback_function_00003d64",
                "param_1": "callbackFunction",
                "param_2": "callbackArgument",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00002ecc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d94": {
            "entrypoint": "0x00003d94",
            "current_name": "process_function_00003d94",
            "code": "\nundefined4 processFunction_00003d94(int input,undefined4 param)\n\n{\n  undefined4 returnValue;\n  \n  if (input == 0) {\n    returnValue = 0xffffffed;\n  }\n  else {\n    returnValue = (**(code **)(*(int *)(input + 0xc) + 4))(*(undefined4 *)(input + 4),param);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003d94": "process_function_00003d94",
                "param_1": "input",
                "param_2": "param",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003dc4": {
            "entrypoint": "0x00003dc4",
            "current_name": "count_digits_00003dc4",
            "code": "\nint countDigits_00003dc4(int numberPtr,uint number)\n\n{\n  uint remainingNumber;\n  char *resultPtr;\n  uint powerOfTen;\n  int digitCount;\n  \n  digitCount = 1;\n  if (number < 1000000000) {\n    for (powerOfTen = 10; powerOfTen <= number; powerOfTen = powerOfTen * 10) {\n      digitCount = digitCount + 1;\n    }\n  }\n  else {\n    digitCount = 10;\n  }\n  if (numberPtr != 0) {\n    resultPtr = (char *)(digitCount + numberPtr);\n    remainingNumber = number;\n    do {\n      resultPtr = resultPtr + -1;\n      *resultPtr = (char)(remainingNumber % 10) + '0';\n      remainingNumber = remainingNumber / 10;\n    } while (remainingNumber != 0);\n  }\n  return digitCount;\n}\n\n",
            "renaming": {
                "FUN_00003dc4": "count_digits_00003dc4",
                "param_1": "numberPtr",
                "param_2": "number",
                "local_20": "remainingNumber",
                "local_14": "resultPtr",
                "local_10": "powerOfTen",
                "local_c": "digitCount"
            },
            "calling": [
                "FUN_00003e58"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e58": {
            "entrypoint": "0x00003e58",
            "current_name": "count_digits_and_add_sign_00003e58",
            "code": "\nint countDigitsAndAddSign_00003e58(undefined *digits,int number)\n\n{\n  int iVar1;\n  int absNumber;\n  undefined *digitsPtr;\n  \n  absNumber = number;\n  digitsPtr = digits;\n  if (-(number >> 0x1f) != 0) {\n    if (digits != (undefined *)0x0) {\n      digitsPtr = digits + 1;\n      *digits = 0x2d;\n    }\n    absNumber = -number;\n  }\n  iVar1 = count_digits_00003dc4(digitsPtr,absNumber);\n  return -(number >> 0x1f) + iVar1;\n}\n\n",
            "renaming": {
                "FUN_00003e58": "count_digits_and_add_sign_00003e58",
                "param_1": "digits",
                "param_2": "number",
                "local_18": "absNumber",
                "local_14": "digitsPtr"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_00003dc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e9e": {
            "entrypoint": "0x00003e9e",
            "current_name": "process_and_return_integer_00003e9e",
            "code": "\nundefined4 processAndReturnInteger_00003e9e(undefined4 inputValue,short inputShort,undefined4 additionalData)\n\n{\n  undefined4 processedValue;\n  \n  processedValue = process_integer_00003ec4(inputValue,(int)inputShort,additionalData);\n  return processedValue;\n}\n\n",
            "renaming": {
                "FUN_00003e9e": "process_and_return_integer_00003e9e",
                "param_1": "inputValue",
                "param_2": "inputShort",
                "param_3": "additionalData",
                "uVar1": "processedValue"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [
                "FUN_00003ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ec4": {
            "entrypoint": "0x00003ec4",
            "current_name": "process_integer_00003ec4",
            "code": "\nint processInteger_00003ec4(undefined *outputBuffer,uint inputNumber,int decimalPlaces)\n\n{\n  int digitCount;\n  undefined4 digitsWritten;\n  uint quotient;\n  int remainder;\n  int totalDigits;\n  \n  if (decimalPlaces + 7 < 0 != SCARRY4(decimalPlaces,7)) {\n    initialize_and_print_system_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  totalDigits = 0;\n  if (decimalPlaces == 0) {\n    totalDigits = count_digits_and_add_sign_00003e58(outputBuffer,inputNumber);\n  }\n  else if (decimalPlaces < 1) {\n    quotient = inputNumber / *(uint *)(&DAT_00007978 + decimalPlaces * -4);\n    remainder = inputNumber - *(uint *)(&DAT_00007978 + decimalPlaces * -4) * quotient;\n    if (remainder < 0) {\n      remainder = -remainder;\n    }\n    if ((quotient == 0) && ((int)inputNumber < 0)) {\n      if (outputBuffer != (undefined *)0x0) {\n        *outputBuffer = 0x2d;\n      }\n      totalDigits = 1;\n    }\n    if (outputBuffer == (undefined *)0x0) {\n      digitCount = count_digits_and_add_sign_00003e58(0,quotient);\n      totalDigits = digitCount + 1 + totalDigits;\n    }\n    else {\n      digitCount = count_digits_and_add_sign_00003e58(outputBuffer + totalDigits,quotient);\n      digitCount = totalDigits + digitCount;\n      totalDigits = digitCount + 1;\n      outputBuffer[digitCount] = 0x2e;\n      digitsWritten = count_digits_and_add_sign_00003e58(outputBuffer + totalDigits,remainder);\n      copy_and_reverse_bytes_00003ff4(outputBuffer + totalDigits,digitsWritten,-decimalPlaces,0x30);\n    }\n    totalDigits = -decimalPlaces + totalDigits;\n  }\n  else {\n    totalDigits = count_digits_and_add_sign_00003e58(outputBuffer,inputNumber);\n    if (outputBuffer != (undefined *)0x0) {\n      fill_memory_with_byte_00004622(outputBuffer + totalDigits,0x30,decimalPlaces);\n    }\n    totalDigits = decimalPlaces + totalDigits;\n  }\n  return totalDigits;\n}\n\n",
            "renaming": {
                "FUN_00003ec4": "process_integer_00003ec4",
                "param_1": "outputBuffer",
                "param_2": "inputNumber",
                "param_3": "decimalPlaces",
                "iVar1": "digitCount",
                "uVar2": "digitsWritten",
                "uVar3": "quotient",
                "local_10": "remainder",
                "local_c": "totalDigits"
            },
            "calling": [
                "FUN_00003e9e"
            ],
            "called": [
                "FUN_00003e58",
                "FUN_00004622",
                "FUN_00000f04",
                "FUN_00003ff4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ff4": {
            "entrypoint": "0x00003ff4",
            "current_name": "copy_and_reverse_bytes_00003ff4",
            "code": "\nuint copyAndReverseBytes_00003ff4(int size,uint srcOffset,uint dstOffset,undefined byteValue)\n\n{\n  uint newDstOffset;\n  \n  newDstOffset = srcOffset;\n  if ((srcOffset < dstOffset) && (newDstOffset = dstOffset, size != 0)) {\n    copy_and_reverse_000045ee((dstOffset - srcOffset) + size,size,srcOffset);\n    fill_memory_with_byte_00004622(size,byteValue,dstOffset - srcOffset);\n  }\n  return newDstOffset;\n}\n\n",
            "renaming": {
                "FUN_00003ff4": "copy_and_reverse_bytes_00003ff4",
                "param_1": "size",
                "param_2": "srcOffset",
                "param_3": "dstOffset",
                "param_4": "byteValue",
                "uVar1": "newDstOffset"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_000045ee",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004042": {
            "entrypoint": "0x00004042",
            "current_name": "parse_and_print_number_00004042",
            "code": "\nvoid parseAndPrintNumber_00004042(undefined4 inputString)\n\n{\n  parse_number_00004f84(inputString,0,10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004042": "parse_and_print_number_00004042",
                "param_1": "inputString"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000404c": {
            "entrypoint": "0x0000404c",
            "current_name": "process_data_0000404c",
            "code": "\nundefined4 processData_0000404c(uint *dataBuffer,int *controlArray)\n\n{\n  int tempVar1;\n  int *tempVar2;\n  uint var1;\n  ushort var2;\n  int tempVar3;\n  code *functionPtr;\n  int tempVar4;\n  uint var3;\n  bool condition;\n  \n  var2 = *(ushort *)(controlArray + 3);\n  var1 = (uint)var2;\n  if ((int)(var1 << 0x1c) < 0) {\n    tempVar1 = controlArray[4];\n    if (tempVar1 != 0) {\n      tempVar3 = var1 << 0x1e;\n      condition = tempVar3 == 0;\n      tempVar4 = *controlArray;\n      if (condition) {\n        tempVar3 = controlArray[5];\n      }\n      *controlArray = tempVar1;\n      if (!condition) {\n        tempVar3 = 0;\n      }\n      controlArray[2] = tempVar3;\n      for (tempVar4 = tempVar4 - tempVar1; 0 < tempVar4; tempVar4 = tempVar4 - tempVar3) {\n        tempVar3 = (*(code *)controlArray[10])(dataBuffer,controlArray[8],tempVar1,tempVar4);\n        if (tempVar3 < 1) {\n          *(ushort *)(controlArray + 3) = *(ushort *)(controlArray + 3) | 0x40;\n          return 0xffffffff;\n        }\n        tempVar1 = tempVar1 + tempVar3;\n      }\n    }\n  }\n  else {\n    if ((controlArray[1] < 1) && (controlArray[0x10] < 1)) {\n      return 0;\n    }\n    functionPtr = (code *)controlArray[0xb];\n    if (functionPtr == (code *)0x0) {\n      return 0;\n    }\n    var3 = *dataBuffer;\n    *dataBuffer = 0;\n    if ((var2 & 0x1000) == 0) {\n      tempVar1 = (*functionPtr)(dataBuffer,controlArray[8],var1 & 0x1000,1);\n      if ((tempVar1 == -1) && (var1 = *dataBuffer, var1 != 0)) {\n        if ((var1 == 0x1d) || (var1 == 0x16)) {\n          *dataBuffer = var3;\n          return 0;\n        }\n        var2 = *(ushort *)(controlArray + 3);\n        goto LAB_00004104;\n      }\n    }\n    else {\n      tempVar1 = controlArray[0x15];\n    }\n    if (((int)((uint)*(ushort *)(controlArray + 3) << 0x1d) < 0) &&\n       (tempVar1 = tempVar1 - controlArray[1], controlArray[0xd] != 0)) {\n      tempVar1 = tempVar1 - controlArray[0x10];\n    }\n    tempVar1 = (*(code *)controlArray[0xb])(dataBuffer,controlArray[8],tempVar1,0);\n    var2 = *(ushort *)(controlArray + 3);\n    if ((tempVar1 == -1) &&\n       ((0x1d < *dataBuffer || (-1 < (int)((0x20400001U >> (*dataBuffer & 0xff)) << 0x1f))))) {\nLAB_00004104:\n      *(ushort *)(controlArray + 3) = var2 | 0x40;\n      return 0xffffffff;\n    }\n    controlArray[1] = 0;\n    *controlArray = controlArray[4];\n    if (((int)((uint)var2 << 0x13) < 0) && ((tempVar1 != -1 || (*dataBuffer == 0)))) {\n      controlArray[0x15] = tempVar1;\n    }\n    tempVar2 = (int *)controlArray[0xd];\n    *dataBuffer = var3;\n    if (tempVar2 != (int *)0x0) {\n      if (tempVar2 != controlArray + 0x11) {\n        initializeDataAndProcess(dataBuffer);\n      }\n      controlArray[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000404c": "process_data_0000404c",
                "param_1": "dataBuffer",
                "param_2": "controlArray",
                "iVar1": "tempVar1",
                "piVar2": "tempVar2",
                "uVar3": "var1",
                "uVar4": "var2",
                "iVar5": "tempVar3",
                "pcVar6": "functionPtr",
                "iVar7": "tempVar4",
                "uVar8": "var3",
                "bVar9": "condition",
                "initialize_data_and_process_00004b34": "initializeDataAndProcess"
            },
            "calling": [
                "FUN_00004158",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004158": {
            "entrypoint": "0x00004158",
            "current_name": "process_data_00004158",
            "code": "\nundefined4 processData_00004158(int dataPointer,undefined4 *dataArray)\n\n{\n  undefined4 returnValue;\n  \n  if (dataArray[4] != 0) {\n    if ((dataPointer != 0) && (*(int *)(dataPointer + 0x18) == 0)) {\n      initialize_and_extract_data_000042a4();\n    }\n    if (dataArray == &DAT_000079b8) {\n      dataArray = *(undefined4 **)(dataPointer + 4);\n    }\n    else if (dataArray == (undefined4 *)&DAT_000079d8) {\n      dataArray = *(undefined4 **)(dataPointer + 8);\n    }\n    else if (dataArray == (undefined4 *)&DAT_00007998) {\n      dataArray = *(undefined4 **)(dataPointer + 0xc);\n    }\n    if (*(short *)(dataArray + 3) != 0) {\n      if ((-1 < (int)(dataArray[0x19] << 0x1f)) && (-1 < (int)*(short *)(dataArray + 3) << 0x16)) {\n        FUNC_000045e8(dataArray[0x16]);\n      }\n      returnValue = process_data_0000404c(dataPointer,dataArray);\n      if ((int)(dataArray[0x19] << 0x1f) < 0) {\n        return returnValue;\n      }\n      if ((int)((uint)*(ushort *)(dataArray + 3) << 0x16) < 0) {\n        return returnValue;\n      }\n      FUNC_000045ec(dataArray[0x16]);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004158": "process_data_00004158",
                "param_1": "dataPointer",
                "param_2": "dataArray",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_000041d0",
                "FUN_00005404",
                "FUN_00006768"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_0000404c",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_00004158(int param_1,undefined4 *param_2)\n\n{\n  undefined4 uVar1;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n      FUNC_000042a4();\n    }\n    if (param_2 == &DAT_000079b8) {\n      param_2 = *(undefined4 **)(param_1 + 4);\n    }\n    else if (param_2 == (undefined4 *)&DAT_000079d8) {\n      param_2 = *(undefined4 **)(param_1 + 8);\n    }\n    else if (param_2 == (undefined4 *)&DAT_00007998) {\n      param_2 = *(undefined4 **)(param_1 + 0xc);\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      if ((-1 < (int)(param_2[0x19] << 0x1f)) && (-1 < (int)*(short *)(param_2 + 3) << 0x16)) {\n        FUNC_000045e8(param_2[0x16]);\n      }\n      uVar1 = process_data_0000404c(param_1,param_2);\n      if ((int)(param_2[0x19] << 0x1f) < 0) {\n        return uVar1;\n      }\n      if ((int)((uint)*(ushort *)(param_2 + 3) << 0x16) < 0) {\n        return uVar1;\n      }\n      FUNC_000045ec(param_2[0x16]);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_000041d0": {
            "entrypoint": "0x000041d0",
            "current_name": "process_relocation_entries_000041d0",
            "code": "\nuint processRelocationEntries_000041d0(int offset,undefined4 param2,undefined4 param3)\n\n{\n  uint result;\n  int count;\n  dword *relEntry;\n  int symEntry;\n  uint flags;\n  int loopCounter;\n  undefined4 *symbolTable;\n  \n  if (offset == 0) {\n    symbolTable = &DAT_000079f8;\n    relEntry = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n    flags = 0;\n    do {\n      loopCounter = relEntry[1];\n      symEntry = relEntry[2];\n      while (loopCounter = loopCounter + -1, -1 < loopCounter) {\n        if ((1 < *(ushort *)(symEntry + 0xc)) && (count = *(short *)(symEntry + 0xe) + 1, count != 0)) {\n          result = process_data_00004158(0x1fff0284,symEntry,param3,count,symbolTable);\n          flags = flags | result;\n        }\n        symEntry = symEntry + 0x68;\n      }\n      relEntry = (dword *)*relEntry;\n    } while (relEntry != (dword *)0x0);\n    return flags;\n  }\n  flags = process_data_00004158(Elf32_Rel_ARRAY_1fff0200[16].r_offset,offset);\n  return flags;\n}\n\n",
            "renaming": {
                "FUN_000041d0": "process_relocation_entries_000041d0",
                "param_1": "offset",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "result",
                "iVar2": "count",
                "pdVar3": "relEntry",
                "iVar4": "symEntry",
                "uVar5": "flags",
                "iVar6": "loopCounter",
                "puVar7": "symbolTable"
            },
            "calling": [
                "FUN_00002e48"
            ],
            "called": [
                "FUN_00004158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041f4": {
            "entrypoint": "0x000041f4",
            "current_name": "initialize_data_000041f4",
            "code": "\nvoid initializeData_000041f4(undefined4 *dataPointer,undefined2 value1,undefined2 value2)\n\n{\n  *dataPointer = 0;\n  dataPointer[1] = 0;\n  dataPointer[4] = 0;\n  dataPointer[5] = 0;\n  dataPointer[2] = 0;\n  *(undefined2 *)(dataPointer + 3) = value1;\n  dataPointer[0x19] = 0;\n  *(undefined2 *)((int)dataPointer + 0xe) = value2;\n  dataPointer[6] = 0;\n  fillMemory(dataPointer + 0x17,0,8);\n  dataPointer[9] = 0x4dc9;\n  dataPointer[10] = 0x4def;\n  dataPointer[0xb] = 0x4e27;\n  dataPointer[8] = dataPointer;\n  dataPointer[0xc] = &label1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000041f4": "initialize_data_000041f4",
                "param_1": "dataPointer",
                "param_2": "value1",
                "param_3": "value2",
                "fill_memory_with_byte_00004622": "fillMemory",
                "LAB_00004e4a_1": "label1"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004248": {
            "entrypoint": "0x00004248",
            "current_name": "allocate_memory_block_00004248",
            "code": "\nundefined4 * allocateMemoryBlock_00004248(undefined4 inputPointer,int numElements)\n\n{\n  undefined4 *outputPointer;\n  int blockSize;\n  \n  blockSize = (numElements + -1) * 0x68;\n  outputPointer = (undefined4 *)resize_memory_block_00004bd0(inputPointer,blockSize + 0x74);\n  if (outputPointer != (undefined4 *)0x0) {\n    *outputPointer = 0;\n    outputPointer[1] = numElements;\n    outputPointer[2] = outputPointer + 3;\n    fill_memory_with_byte_00004622(outputPointer + 3,0,blockSize + 0x68);\n  }\n  return outputPointer;\n}\n\n",
            "renaming": {
                "FUN_00004248": "allocate_memory_block_00004248",
                "param_1": "inputPointer",
                "param_2": "numElements",
                "puVar1": "outputPointer",
                "iVar2": "blockSize"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004274": {
            "entrypoint": "0x00004274",
            "current_name": "initialize_data_00004274",
            "code": "\nvoid initializeData_00004274(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004274": "initialize_data_00004274"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004280": {
            "entrypoint": "0x00004280",
            "current_name": "initialize_data_00004280",
            "code": "\nvoid initializeData_00004280(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004280": "initialize_data_00004280"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000428c": {
            "entrypoint": "0x0000428c",
            "current_name": "initialize_data_0000428c",
            "code": "\nvoid initializeData_0000428c(void)\n\n{\n  FUNC_000045e8(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000428c": "initialize_data_0000428c"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000042a4": {
            "entrypoint": "0x000042a4",
            "current_name": "initialize_and_extract_data_000042a4",
            "code": "\nvoid initializeAndExtractData_000042a4(int dataPointer)\n\n{\n  undefined4 result;\n  \n  initializeData();\n  if (*(int *)(dataPointer + 0x18) == 0) {\n    *(undefined4 *)(dataPointer + 0x48) = 0;\n    *(undefined4 *)(dataPointer + 0x4c) = 0;\n    *(undefined4 *)(dataPointer + 0x50) = 0;\n    result = 0x1fff0284;\n    *(undefined **)(dataPointer + 0x28) = &DAT_0000423d;\n    if (dataPointer == 0x1fff0284) {\n      result = 1;\n    }\n    if (dataPointer == 0x1fff0284) {\n      *(undefined4 *)(dataPointer + 0x18) = result;\n    }\n    result = extractAndInitializeData(dataPointer);\n    *(undefined4 *)(dataPointer + 4) = result;\n    result = extractAndInitializeData(dataPointer);\n    *(undefined4 *)(dataPointer + 8) = result;\n    result = extractAndInitializeData(dataPointer);\n    *(undefined4 *)(dataPointer + 0xc) = result;\n    initializeData(*(undefined4 *)(dataPointer + 4),4,0);\n    initializeData(*(undefined4 *)(dataPointer + 8),9,1);\n    initializeData(*(undefined4 *)(dataPointer + 0xc),0x12,2);\n    *(undefined4 *)(dataPointer + 0x18) = 1;\n  }\n  FUNC_000045ec(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000042a4": "initialize_and_extract_data_000042a4",
                "param_1": "dataPointer",
                "uVar1": "result",
                "initialize_data_0000428c": "initializeData",
                "extract_and_initialize_data_00004314": "extractAndInitializeData",
                "initialize_data_000041f4": "initializeData"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004db8",
                "FUN_00004158",
                "FUN_00005404",
                "FUN_00005e10",
                "FUN_000054a8",
                "FUN_00006768",
                "FUN_00004c84",
                "FUN_00004cb4",
                "FUN_00004314",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000041f4",
                "FUN_000045ec",
                "FUN_0000428c",
                "FUN_00004314"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004314": {
            "entrypoint": "0x00004314",
            "current_name": "extract_and_initialize_data_00004314",
            "code": "\nundefined4 * extract_and_initialize_data_00004314(undefined4 *error_code)\n\n{\n  dword allocated_memory;\n  int iteration_count;\n  undefined4 *data_pointer;\n  dword *relocation_info_pointer;\n  \n  initialize_data_00004274();\n  if (Elf32_Rel_ARRAY_1fff0200[19].r_info == 0) {\n    initialize_and_extract_data_000042a4(0x1fff0284);\n  }\n  relocation_info_pointer = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n  do {\n    iteration_count = relocation_info_pointer[1];\n    data_pointer = (undefined4 *)relocation_info_pointer[2];\n    while (iteration_count = iteration_count + -1, -1 < iteration_count) {\n      if (*(short *)(data_pointer + 3) == 0) {\n        data_pointer[3] = 0xffff0001;\n        data_pointer[0x19] = 0;\n        FUNC_000045e4(data_pointer + 0x16);\n        initialize_data_00004280();\n        data_pointer[1] = 0;\n        data_pointer[2] = 0;\n        data_pointer[4] = 0;\n        data_pointer[5] = 0;\n        *data_pointer = 0;\n        data_pointer[6] = 0;\n        fill_memory_with_byte_00004622(data_pointer + 0x17,0,8);\n        data_pointer[0xd] = 0;\n        data_pointer[0xe] = 0;\n        data_pointer[0x12] = 0;\n        data_pointer[0x13] = 0;\n        return data_pointer;\n      }\n      data_pointer = data_pointer + 0x1a;\n    }\n    if (*relocation_info_pointer == 0) {\n      allocated_memory = allocate_memory_block_00004248(error_code,4);\n      *relocation_info_pointer = allocated_memory;\n      if (allocated_memory == 0) {\n        initialize_data_00004280();\n        *error_code = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    relocation_info_pointer = (dword *)*relocation_info_pointer;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00004314": "extract_and_initialize_data_00004314",
                "param_1": "error_code",
                "dVar1": "allocated_memory",
                "iVar2": "iteration_count",
                "puVar3": "data_pointer",
                "pdVar4": "relocation_info_pointer"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00004622",
                "FUN_000045e4",
                "FUN_00004280",
                "FUN_00004248",
                "FUN_00004274"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 * FUN_00004314(undefined4 *param_1)\n\n{\n  dword dVar1;\n  int iVar2;\n  undefined4 *puVar3;\n  dword *pdVar4;\n  \n  initialize_data_00004274();\n  if (Elf32_Rel_ARRAY_1fff0200[19].r_info == 0) {\n    FUNC_000042a4(0x1fff0284);\n  }\n  pdVar4 = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n  do {\n    iVar2 = pdVar4[1];\n    puVar3 = (undefined4 *)pdVar4[2];\n    while (iVar2 = iVar2 + -1, -1 < iVar2) {\n      if (*(short *)(puVar3 + 3) == 0) {\n        puVar3[3] = 0xffff0001;\n        puVar3[0x19] = 0;\n        FUNC_000045e4(puVar3 + 0x16);\n        initialize_data_00004280();\n        puVar3[1] = 0;\n        puVar3[2] = 0;\n        puVar3[4] = 0;\n        puVar3[5] = 0;\n        *puVar3 = 0;\n        puVar3[6] = 0;\n        fill_memory_with_byte_00004622(puVar3 + 0x17,0,8);\n        puVar3[0xd] = 0;\n        puVar3[0xe] = 0;\n        puVar3[0x12] = 0;\n        puVar3[0x13] = 0;\n        return puVar3;\n      }\n      puVar3 = puVar3 + 0x1a;\n    }\n    if (*pdVar4 == 0) {\n      dVar1 = allocate_memory_block_00004248(param_1,4);\n      *pdVar4 = dVar1;\n      if (dVar1 == 0) {\n        initialize_data_00004280();\n        *param_1 = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    pdVar4 = (dword *)*pdVar4;\n  } while( true );\n}\n\n"
        },
        "FUN_000043a0": {
            "entrypoint": "0x000043a0",
            "current_name": "process_data_000043a0",
            "code": "\nuint processData_000043a0(int startAddress,code *dataProcessingFunc)\n\n{\n  uint result;\n  int *currentAddress;\n  int dataAddress;\n  uint finalResult;\n  int loopCounter;\n  \n  currentAddress = (int *)(startAddress + 0x48);\n  finalResult = 0;\n  do {\n    loopCounter = currentAddress[1];\n    dataAddress = currentAddress[2];\n    while (loopCounter = loopCounter + -1, -1 < loopCounter) {\n      if ((1 < *(ushort *)(dataAddress + 0xc)) && (*(short *)(dataAddress + 0xe) != -1)) {\n        result = (*dataProcessingFunc)(dataAddress);\n        finalResult = finalResult | result;\n      }\n      dataAddress = dataAddress + 0x68;\n    }\n    currentAddress = (int *)*currentAddress;\n  } while (currentAddress != (int *)0x0);\n  return finalResult;\n}\n\n",
            "renaming": {
                "FUN_000043a0": "process_data_000043a0",
                "param_1": "startAddress",
                "param_2": "dataProcessingFunc",
                "piVar2": "currentAddress",
                "iVar3": "dataAddress",
                "uVar1": "result",
                "uVar4": "finalResult",
                "iVar5": "loopCounter"
            },
            "calling": [
                "FUN_00006768"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004418": {
            "entrypoint": "0x00004418",
            "current_name": "extract_data_00004418",
            "code": "\nuint extractData_00004418(void)\n\n{\n  dword offset;\n  uint data;\n  byte **pointer;\n  byte *bytePointer;\n  \n  offset = relArray[16].r_offset;\n  if ((relArray[16].r_offset != 0) &&\n     (*(int *)(relArray[16].r_offset + 0x18) == 0)) {\n    initialize_and_extract_data_000042a4(relArray[16].r_offset);\n  }\n  pointer = *(byte ***)(offset + 4);\n  if ((offset != 0) && (*(int *)(offset + 0x18) == 0)) {\n    initialize_and_extract_data_000042a4();\n  }\n  if (pointer == (byte **)&DAT_000079b8) {\n    pointer = *(byte ***)(offset + 4);\n  }\n  else if (pointer == (byte **)&DAT_000079d8) {\n    pointer = *(byte ***)(offset + 8);\n  }\n  else if (pointer == (byte **)&DAT_00007998) {\n    pointer = *(byte ***)(offset + 0xc);\n  }\n  if ((-1 < (int)pointer[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(pointer + 3) << 0x16))) {\n    FUNC_000045e8(pointer[0x16]);\n  }\n  bytePointer = pointer[1];\n  pointer[1] = bytePointer + -1;\n  if ((int)(bytePointer + -1) < 0) {\n    data = extract_data_00005e10(offset,pointer);\n  }\n  else {\n    bytePointer = *pointer;\n    *pointer = bytePointer + 1;\n    data = (uint)*bytePointer;\n  }\n  if ((-1 < (int)pointer[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(pointer + 3) << 0x16))) {\n    FUNC_000045ec(pointer[0x16]);\n  }\n  return data;\n}\n\n",
            "renaming": {
                "FUN_00004418": "extract_data_00004418",
                "Elf32_Rel_ARRAY_1fff0200": "relArray",
                "dVar1": "offset",
                "uVar2": "data",
                "ppbVar3": "pointer",
                "pbVar4": "bytePointer"
            },
            "calling": [
                "FUN_00002d94"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00005e10",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000443c": {
            "entrypoint": "0x0000443c",
            "current_name": "calculate_date_time_0000443c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000044a8) */\n\nuint * calculateDateTime_0000443c(undefined4 *date,uint *result)\n\n{\n  int remainder;\n  uint yearOffset;\n  uint daysOffset;\n  uint dividend;\n  uint divisor;\n  undefined4 ptrValue1;\n  undefined4 ptrValue2;\n  uint leapYears;\n  bool isNegative;\n  \n  ptrValue1 = *date;\n  ptrValue2 = date[1];\n  remainder = divisible_remainder_00006974(ptrValue1,ptrValue2,0x15180,0);\n  daysOffset = 0x15180;\n  divisible_remainder_00006974(ptrValue1,ptrValue2,0x15180,0);\n  isNegative = (int)daysOffset < 0;\n  if (isNegative) {\n    daysOffset = daysOffset + 0x15180;\n  }\n  if (isNegative) {\n    yearOffset = remainder + 0xafa6b;\n  }\n  else {\n    yearOffset = remainder + 0xafa6c;\n  }\n  result[2] = daysOffset / 0xe10;\n  result[1] = (daysOffset % 0xe10) / 0x3c;\n  *result = (daysOffset % 0xe10) % 0x3c;\n  result[6] = (yearOffset + 3) % 7;\n  daysOffset = yearOffset;\n  if ((int)yearOffset < 0) {\n    daysOffset = yearOffset - 0x23ab0;\n  }\n  yearOffset = (daysOffset / 0x23ab1) * -0x23ab1 + yearOffset;\n  dividend = ((yearOffset / 0x8eac + yearOffset) - yearOffset / 0x5b4) - yearOffset / 0x23ab0;\n  divisor = dividend / 0x16d;\n  yearOffset = (divisor / 100 - dividend / 0x5b4) + yearOffset + divisor * -0x16d;\n  leapYears = yearOffset * 5 + 2;\n  dividend = leapYears / 0x99;\n  if (leapYears < 0x5fa) {\n    remainder = 2;\n  }\n  else {\n    remainder = -10;\n  }\n  leapYears = dividend + remainder;\n  remainder = (daysOffset / 0x23ab1) * 400 + divisor;\n  if (leapYears < 2) {\n    remainder = remainder + 1;\n  }\n  if (yearOffset < 0x132) {\n    if (((divisor & 3) == 0) && (divisor != (divisor / 100) * 100)) {\n      daysOffset = 1;\n    }\n    else {\n      daysOffset = (uint)(divisor % 400 == 0);\n    }\n    daysOffset = yearOffset + 0x3b + daysOffset;\n  }\n  else {\n    daysOffset = yearOffset - 0x132;\n  }\n  result[7] = daysOffset;\n  result[3] = (yearOffset + 1) - (dividend * 0x99 + 2) / 5;\n  result[4] = leapYears;\n  result[5] = remainder - 0x76c;\n  result[8] = 0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0000443c": "calculate_date_time_0000443c",
                "param_1": "date",
                "param_2": "result",
                "iVar1": "remainder",
                "uVar2": "yearOffset",
                "uVar3": "daysOffset",
                "uVar4": "dividend",
                "uVar5": "divisor",
                "uVar6": "ptrValue1",
                "uVar7": "ptrValue2",
                "uVar8": "leapYears",
                "bVar9": "isNegative"
            },
            "calling": [
                "FUN_00002624",
                "FUN_00002690"
            ],
            "called": [
                "FUN_00006974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000459c": {
            "entrypoint": "0x0000459c",
            "current_name": "execute_function_table_0000459c",
            "code": "\nvoid executeFunctionTable_0000459c(void)\n\n{\n  code **functionTablePointer;\n  int index;\n  \n  functionTablePointer = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**functionTablePointer)();\n    functionTablePointer = functionTablePointer + 1;\n  }\n  initializeAndExtractResults();\n  functionTablePointer = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**functionTablePointer)();\n    functionTablePointer = functionTablePointer + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000459c": "execute_function_table_0000459c",
                "ppcVar1": "functionTablePointer",
                "iVar2": "index",
                "initialize_and_extract_results_00000410": "initializeAndExtractResults"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000410"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000045e4": {
            "entrypoint": "0x000045e4",
            "current_name": "FUNC_000045e4",
            "code": "\nvoid FUNC_000045e4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e4": "FUNC_000045e4"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045e8": {
            "entrypoint": "0x000045e8",
            "current_name": "FUNC_000045e8",
            "code": "\nvoid FUNC_000045e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e8": "FUNC_000045e8"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004db8",
                "FUN_00004158",
                "FUN_00005790",
                "FUN_00004cb4",
                "FUN_0000428c",
                "FUN_00005fec",
                "FUN_000057f8",
                "FUN_00004274"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ec": {
            "entrypoint": "0x000045ec",
            "current_name": "FUNC_000045ec",
            "code": "\nvoid FUNC_000045ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ec": "FUNC_000045ec"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004db8",
                "FUN_000042a4",
                "FUN_00004158",
                "FUN_00005ff8",
                "FUN_00004cb4",
                "FUN_00004280",
                "FUN_000057f8",
                "FUN_0000579c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ee": {
            "entrypoint": "0x000045ee",
            "current_name": "copy_and_reverse_000045ee",
            "code": "\nvoid copyAndReverse_000045ee(undefined *source,undefined *destination,int length)\n\n{\n  undefined *sourcePtr;\n  undefined *destinationPtr;\n  \n  destinationPtr = destination + length;\n  if ((destination < source) && (source < destinationPtr)) {\n    sourcePtr = source + length;\n    while (sourcePtr != source) {\n      destinationPtr = destinationPtr + -1;\n      sourcePtr = sourcePtr + -1;\n      *sourcePtr = *destinationPtr;\n    }\n  }\n  else {\n    source = source + -1;\n    for (; destination != destinationPtr; destination = destination + 1) {\n      source = source + 1;\n      *source = *destination;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ee": "copy_and_reverse_000045ee",
                "param_1": "source",
                "param_2": "destination",
                "param_3": "length",
                "puVar1": "sourcePtr",
                "puVar2": "destinationPtr"
            },
            "calling": [
                "FUN_00003ff4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004622": {
            "entrypoint": "0x00004622",
            "current_name": "fill_memory_with_byte_00004622",
            "code": "\nvoid fillMemoryWithByte_00004622(undefined *array,undefined byte,int length)\n\n{\n  undefined *endPointer;\n  \n  endPointer = array + length;\n  for (; array != endPointer; array = array + 1) {\n    *array = byte;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004622": "fill_memory_with_byte_00004622",
                "param_1": "array",
                "param_2": "byte",
                "param_3": "length",
                "puVar1": "endPointer"
            },
            "calling": [
                "FUN_00003ec4",
                "FUN_000041f4",
                "FUN_00003ff4",
                "FUN_0000305c",
                "FUN_00004314",
                "FUN_00004248"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004634": {
            "entrypoint": "0x00004634",
            "current_name": "update_date_00004634",
            "code": "\nvoid updateDate_00004634(uint *dateValues,uint dayIncrement,undefined4 extraDays)\n\n{\n  int monthDays;\n  uint day;\n  uint year;\n  int numMonths;\n  bool isNegative;\n  uint *tempValue;\n  uint currentDay;\n  undefined4 extraDaysStack;\n  \n  tempValue = dateValues;\n  currentDay = dayIncrement;\n  extraDaysStack = extraDays;\n  if (0x3b < *dateValues) {\n    normalize_and_set_division_result_00005584(&tempValue,*dateValues,0x3c);\n    day = dateValues[1] + (int)tempValue;\n    dateValues[1] = day;\n    if ((int)currentDay < 0) {\n      day = day - 1;\n      *dateValues = currentDay + 0x3c;\n    }\n    else {\n      *dateValues = currentDay;\n    }\n    if ((int)currentDay < 0) {\n      dateValues[1] = day;\n    }\n  }\n  if (0x3b < dateValues[1]) {\n    normalize_and_set_division_result_00005584(&tempValue,dateValues[1],0x3c);\n    isNegative = (int)currentDay < 0;\n    year = dateValues[2] + (int)tempValue;\n    dateValues[2] = year;\n    day = currentDay;\n    if (isNegative) {\n      day = currentDay + 0x3c;\n      year = year - 1;\n    }\n    if (!isNegative) {\n      dateValues[1] = day;\n    }\n    if (isNegative) {\n      dateValues[1] = day;\n    }\n    if (isNegative) {\n      dateValues[2] = year;\n    }\n  }\n  if (0x17 < dateValues[2]) {\n    normalize_and_set_division_result_00005584(&tempValue,dateValues[2],0x18);\n    isNegative = (int)currentDay < 0;\n    year = dateValues[3] + (int)tempValue;\n    dateValues[3] = year;\n    day = currentDay;\n    if (isNegative) {\n      day = currentDay + 0x18;\n      year = year - 1;\n    }\n    if (!isNegative) {\n      dateValues[2] = day;\n    }\n    if (isNegative) {\n      dateValues[2] = day;\n    }\n    if (isNegative) {\n      dateValues[3] = year;\n    }\n  }\n  if (0xb < dateValues[4]) {\n    normalize_and_set_division_result_00005584(&tempValue,dateValues[4],0xc);\n    isNegative = (int)currentDay < 0;\n    day = dateValues[5] + (int)tempValue;\n    dateValues[5] = day;\n    if (isNegative) {\n      currentDay = currentDay + 0xc;\n      day = day - 1;\n    }\n    if (!isNegative) {\n      dateValues[4] = currentDay;\n    }\n    if (isNegative) {\n      dateValues[4] = currentDay;\n    }\n    if (isNegative) {\n      dateValues[5] = day;\n    }\n  }\n  day = dateValues[5];\n  if ((day & 3) == 0) {\n    if (day == (day / 100) * 100) {\n      if ((day + 0x76c) % 400 == 0) {\n        numMonths = 0x1d;\n      }\n      else {\n        numMonths = 0x1c;\n      }\n    }\n    else {\n      numMonths = 0x1d;\n    }\n  }\n  else {\n    numMonths = 0x1c;\n  }\n  if ((int)dateValues[3] < 1) {\n    while ((int)dateValues[3] < 1) {\n      day = dateValues[4];\n      dateValues[4] = day - 1;\n      if (day - 1 == 0xffffffff) {\n        year = dateValues[5];\n        day = year - 1;\n        dateValues[4] = 0xb;\n        dateValues[5] = day;\n        if ((day & 3) == 0) {\n          if (day == (day / 100) * 100) {\n            if ((year + 0x76b) % 400 == 0) {\n              numMonths = 0x1d;\n            }\n            else {\n              numMonths = 0x1c;\n            }\n          }\n          else {\n            numMonths = 0x1d;\n          }\n        }\n        else {\n          numMonths = 0x1c;\n        }\n      }\n      monthDays = numMonths;\n      if (dateValues[4] != 1) {\n        monthDays = (&DAT_000079fc)[dateValues[4]];\n      }\n      dateValues[3] = monthDays + dateValues[3];\n    }\n  }\n  else {\n    while( true ) {\n      day = dateValues[4];\n      monthDays = numMonths;\n      if (day != 1) {\n        monthDays = (&DAT_000079fc)[day];\n      }\n      if ((int)dateValues[3] <= monthDays) break;\n      dateValues[3] = dateValues[3] - monthDays;\n      dateValues[4] = day + 1;\n      if (day + 1 == 0xc) {\n        year = dateValues[5];\n        day = year + 1;\n        dateValues[4] = 0;\n        dateValues[5] = day;\n        if ((day & 3) == 0) {\n          if (day % 100 == 0) {\n            if ((year + 0x76d) % 400 == 0) {\n              numMonths = 0x1d;\n            }\n            else {\n              numMonths = 0x1c;\n            }\n          }\n          else {\n            numMonths = 0x1d;\n          }\n        }\n        else {\n          numMonths = 0x1c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004634": "update_date_00004634",
                "param_1": "dateValues",
                "param_2": "dayIncrement",
                "param_3": "extraDays",
                "iVar1": "monthDays",
                "uVar2": "day",
                "uVar3": "year",
                "iVar4": "numMonths",
                "bVar5": "isNegative",
                "local_20": "tempValue",
                "local_1c": "currentDay",
                "uStack_18": "extraDaysStack"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005584"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000047e4": {
            "entrypoint": "0x000047e4",
            "current_name": "calculate_updated_date_000047e4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00004ab2) */\n\nundefined8 calculateUpdatedDate_000047e4(int *dateParams)\n\n{\n  longlong totalDays;\n  longlong newTotalDays;\n  int *memoryAddress;\n  uint remainder;\n  int var5;\n  int var6;\n  int var7;\n  uint var8;\n  uint var9;\n  uint var10;\n  int var11;\n  uint var12;\n  uint var13;\n  uint var14;\n  uint var15;\n  bool var16;\n  \n  memoryAddress = (int *)get_memory_address_000056b0();\n  update_date_00004634(dateParams);\n  var12 = dateParams[5];\n  var11 = dateParams[3] + -1 + *(int *)(&DAT_00007a2c + dateParams[4] * 4);\n  if (((1 < dateParams[4]) && ((var12 & 3) == 0)) &&\n     ((var12 != (var12 / 100) * 100 || (var12 + 0x76c == ((var12 + 0x76c) / 400) * 400)))) {\n    var11 = var11 + 1;\n  }\n  dateParams[7] = var11;\n  if (20000 < (int)&DAT_00002710 + var12) {\n    var7 = -1;\n    var5 = -1;\n    goto LAB_00004aba;\n  }\n  if ((int)var12 < 0x47) {\n    if (var12 != 0x46) {\n      for (var9 = 0x45; (int)var12 < (int)var9; var9 = var9 - 1) {\n        if ((var9 & 3) == 0) {\n          if (var9 == (var9 / 100) * 100) {\n            if ((var9 + 0x76c) % 400 == 0) {\n              var7 = 0x16e;\n            }\n            else {\n              var7 = 0x16d;\n            }\n          }\n          else {\n            var7 = 0x16e;\n          }\n        }\n        else {\n          var7 = 0x16d;\n        }\n        var11 = var11 - var7;\n      }\n      if ((var9 & 3) == 0) {\n        if (var12 == (var12 / 100) * 100) {\n          var7 = 0x16d;\n          if ((var12 + 0x76c) % 400 == 0) {\n            var7 = 0x16e;\n          }\n        }\n        else {\n          var7 = 0x16e;\n        }\n      }\n      else {\n        var7 = 0x16d;\n      }\n      var11 = var11 - var7;\n    }\n  }\n  else {\n    var9 = 0x46;\n    do {\n      if ((var9 & 3) == 0) {\n        if (var9 % 100 == 0) {\n          if ((var9 + 0x76c) % 400 == 0) {\n            var7 = 0x16e;\n          }\n          else {\n            var7 = 0x16d;\n          }\n        }\n        else {\n          var7 = 0x16e;\n        }\n      }\n      else {\n        var7 = 0x16d;\n      }\n      var9 = var9 + 1;\n      var11 = var11 + var7;\n    } while (var12 != var9);\n  }\n  totalDays = (longlong)var11 * 0x15180 + (longlong)(dateParams[2] * 0xe10 + dateParams[1] * 0x3c + *dateParams)\n  ;\n  var15 = (uint)totalDays;\n  var7 = (int)((ulonglong)totalDays >> 0x20);\n  get_memory_address_000050e8();\n  parse_date_string_00005100();\n  var9 = DAT_1fff0dd8;\n  if (DAT_1fff0dd8 == 0) {\nLAB_00004934:\n    var12 = memoryAddress[10];\n    var7 = (uint)totalDays + var12;\n    var5 = (int)((ulonglong)totalDays >> 0x20) +\n            ((int)var12 >> 0x1f) + (uint)CARRY4((uint)totalDays,var12);\n  }\n  else {\n    var14 = dateParams[8];\n    var13 = var14;\n    if (0 < (int)var14) {\n      var13 = 1;\n    }\n    if ((memoryAddress[1] == dateParams[5] + 0x76c) || (var5 = calculate_weekday_offset_00004f98(), var5 != 0)) {\n      var10 = memoryAddress[0x14];\n      remainder = memoryAddress[0x12];\n      var8 = memoryAddress[10];\n      var9 = remainder - var8;\n      var5 = (memoryAddress[0x13] - ((int)var8 >> 0x1f)) - (uint)(remainder < var8);\n      if (((int)((var7 - var5) - (uint)(var15 < var9)) < 0 ==\n           (SBORROW4(var7,var5) != SBORROW4(var7 - var5,(uint)(var15 < var9)))) &&\n         (var6 = (memoryAddress[0x13] - ((int)var10 >> 0x1f)) - (uint)(remainder < var10),\n         var16 = var15 < remainder - var10,\n         (int)((var7 - var6) - (uint)var16) < 0 !=\n         (SBORROW4(var7,var6) != SBORROW4(var7 - var6,(uint)var16)))) goto LAB_00004a88;\n      remainder = memoryAddress[8] - var10;\n      var6 = (memoryAddress[9] - ((int)var10 >> 0x1f)) - (uint)((uint)memoryAddress[8] < var10);\n      if (*memoryAddress != 0) {\n        if ((int)((var7 - var6) - (uint)(var15 < remainder)) < 0 ==\n            (SBORROW4(var7,var6) != SBORROW4(var7 - var6,(uint)(var15 < remainder))))\n        goto LAB_0000491e;\nLAB_0000492a:\n        var9 = 0;\n        if ((int)var14 < 0) goto LAB_00004934;\nLAB_00004a14:\n        var15 = var13 ^ var9;\n        var13 = var9;\n        if (var15 == 1) {\n          if (var9 == 0) {\n            var7 = var10 - var8;\n          }\n          else {\n            var7 = var8 - var10;\n          }\n          var5 = dateParams[3];\n          *dateParams = *dateParams + var7;\n          newTotalDays = totalDays + var7;\n          update_date_00004634(dateParams);\n          var5 = dateParams[3] - var5;\n          totalDays = totalDays + var7;\n          if (var5 != 0) {\n            if (var5 < 2) {\n              if (var5 == -2 || var5 + 2 < 0 != SCARRY4(var5,2)) {\n                var5 = 1;\n              }\n            }\n            else {\n              var5 = -1;\n            }\n            var7 = var5 + dateParams[7];\n            var11 = var11 + var5;\n            if (var7 < 0) {\n              var9 = var12 - 1;\n              if ((var9 & 3) == 0) {\n                if (var9 == (var9 / 100) * 100) {\n                  var7 = 0x16d;\n                  if ((var12 + 0x76b) % 400 != 0) {\n                    var7 = 0x16c;\n                  }\n                }\n                else {\n                  var7 = 0x16d;\n                }\n              }\n              else {\n                var7 = 0x16c;\n              }\n            }\n            else {\n              if ((var12 & 3) == 0) {\n                if (var12 == (var12 / 100) * 100) {\n                  var5 = 0x16d;\n                  if ((var12 + 0x76c) % 400 == 0) {\n                    var5 = 0x16e;\n                  }\n                }\n                else {\n                  var5 = 0x16e;\n                }\n              }\n              else {\n                var5 = 0x16d;\n              }\n              if (var5 <= var7) {\n                var7 = var7 - var5;\n              }\n            }\n            dateParams[7] = var7;\n            totalDays = newTotalDays;\n          }\n        }\n        goto LAB_00004a88;\n      }\n      if ((int)((var7 - var6) - (uint)(var15 < remainder)) < 0 !=\n          (SBORROW4(var7,var6) != SBORROW4(var7 - var6,(uint)(var15 < remainder)))) {\nLAB_0000491e:\n        if ((int)((var7 - var5) - (uint)(var15 < var9)) < 0 ==\n            (SBORROW4(var7,var5) != SBORROW4(var7 - var5,(uint)(var15 < var9))))\n        goto LAB_0000492a;\n      }\n      if (-1 < (int)var14) {\n        var9 = 1;\n        goto LAB_00004a14;\n      }\n    }\n    else {\nLAB_00004a88:\n      var9 = var13;\n      if (var13 != 1) goto LAB_00004934;\n    }\n    var12 = memoryAddress[0x14];\n    var7 = (uint)totalDays + var12;\n    var5 = (int)((ulonglong)totalDays >> 0x20) +\n            ((int)var12 >> 0x1f) + (uint)CARRY4((uint)totalDays,var12);\n    var9 = 1;\n  }\n  get_data_address_000050f4();\n  dateParams[8] = var9;\n  dateParams[6] = (var11 + 4U) % 7;\nLAB_00004aba:\n  return CONCAT44(var5,var7);\n}\n\n",
            "renaming": {
                "FUN_000047e4": "calculate_updated_date_000047e4",
                "param_1": "dateParams",
                "lVar1": "totalDays",
                "lVar2": "newTotalDays",
                "piVar3": "memoryAddress",
                "uVar4": "remainder",
                "iVar5": "var5",
                "iVar6": "var6",
                "iVar7": "var7",
                "uVar8": "var8",
                "uVar9": "var9",
                "uVar10": "var10",
                "iVar11": "var11",
                "uVar12": "var12",
                "uVar13": "var13",
                "uVar14": "var14",
                "uVar15": "var15",
                "bVar16": "var16"
            },
            "calling": [
                "FUN_00002600",
                "FUN_00002654"
            ],
            "called": [
                "FUN_00005100",
                "FUN_000050e8",
                "FUN_00004f98",
                "FUN_000050f4",
                "FUN_00004634",
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004b34": {
            "entrypoint": "0x00004b34",
            "current_name": "initialize_data_and_process_00004b34",
            "code": "\nvoid initializeDataAndProcess_00004b34(undefined4 *outputBuffer,int bufferSize,undefined4 param_3,undefined4 param_4)\n\n{\n  int *tempPtr1;\n  int **tempPtr2;\n  int **tempPtr3;\n  int **currentPtr;\n  int **previousPtr;\n  int **newPtr;\n  bool isConditionTrue;\n  \n  if (bufferSize == 0) {\n    return;\n  }\n  newPtr = (int **)(bufferSize + -4);\n  if (*(int *)(bufferSize + -4) < 0) {\n    newPtr = (int **)((int)newPtr + *(int *)(bufferSize + -4));\n  }\n  initialize_data_00005790();\n  currentPtr = (int **)&DAT_1fff0db4;\n  if (DAT_1fff0db4 == (int **)0x0) {\n    newPtr[1] = (int *)0x0;\n    tempPtr3 = tempPtr2;\n    DAT_1fff0db4 = newPtr;\n  }\n  else {\n    previousPtr = DAT_1fff0db4;\n    if (newPtr < DAT_1fff0db4) {\n      tempPtr3 = (int **)*newPtr;\n      currentPtr = (int **)((int)newPtr + (int)tempPtr3);\n      isConditionTrue = DAT_1fff0db4 == currentPtr;\n      if (isConditionTrue) {\n        currentPtr = (int **)*DAT_1fff0db4;\n        DAT_1fff0db4 = (int **)DAT_1fff0db4[1];\n      }\n      newPtr[1] = (int *)DAT_1fff0db4;\n      DAT_1fff0db4 = newPtr;\n      if (isConditionTrue) {\n        currentPtr = (int **)((int)currentPtr + (int)tempPtr3);\n        *newPtr = (int *)currentPtr;\n      }\n    }\n    else {\n      do {\n        currentPtr = previousPtr;\n        previousPtr = (int **)currentPtr[1];\n        if (previousPtr == (int **)0x0) break;\n      } while (previousPtr <= newPtr);\n      tempPtr3 = (int **)*currentPtr;\n      if ((int **)((int)currentPtr + (int)tempPtr3) == newPtr) {\n        tempPtr3 = (int **)((int)tempPtr3 + (int)*newPtr);\n        *currentPtr = (int *)tempPtr3;\n        if (previousPtr == (int **)((int)currentPtr + (int)tempPtr3)) {\n          tempPtr1 = *previousPtr;\n          currentPtr[1] = previousPtr[1];\n          tempPtr3 = (int **)((int)tempPtr3 + (int)tempPtr1);\n          *currentPtr = (int *)tempPtr3;\n        }\n      }\n      else if (newPtr < (int **)((int)currentPtr + (int)tempPtr3)) {\n        *outputBuffer = 0xc;\n      }\n      else {\n        tempPtr3 = (int **)((int)newPtr + (int)*newPtr);\n        isConditionTrue = previousPtr == tempPtr3;\n        if (isConditionTrue) {\n          tempPtr3 = (int **)*previousPtr;\n          previousPtr = (int **)previousPtr[1];\n        }\n        newPtr[1] = (int *)previousPtr;\n        if (isConditionTrue) {\n          tempPtr3 = (int **)((int)tempPtr3 + (int)*newPtr);\n          *newPtr = (int *)tempPtr3;\n        }\n        currentPtr[1] = (int *)newPtr;\n      }\n    }\n  }\n  initialize_data_0000579c(outputBuffer,tempPtr3,currentPtr,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004b34": "initialize_data_and_process_00004b34",
                "param_1": "outputBuffer",
                "param_2": "bufferSize",
                "piVar1": "tempPtr1",
                "extraout_r1": "tempPtr2",
                "ppiVar2": "tempPtr3",
                "ppiVar3": "currentPtr",
                "ppiVar4": "previousPtr",
                "ppiVar5": "newPtr",
                "bVar6": "isConditionTrue"
            },
            "calling": [
                "FUN_0000404c",
                "FUN_00006192",
                "FUN_00005780",
                "FUN_000054a8",
                "FUN_00006768",
                "FUN_000060cc"
            ],
            "called": [
                "FUN_00005790",
                "FUN_0000579c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004bd0": {
            "entrypoint": "0x00004bd0",
            "current_name": "resize_memory_block_00004bd0",
            "code": "\nuint resizeMemoryBlock_00004bd0(undefined4 *output,uint inputSize,undefined4 param3,undefined4 param4)\n\n{\n  uint *previousBlock;\n  int difference;\n  uint remainingSize;\n  uint *currentBlock;\n  uint newBlocksize;\n  \n  newBlocksize = (inputSize + 3 & 0xfffffffc) + 8;\n  if (newBlocksize < 0xc) {\n    newBlocksize = 0xc;\n  }\n  if (((int)newBlocksize < 0) || (newBlocksize < inputSize)) {\n    *output = 0xc;\n  }\n  else {\n    initialize_data_00005790();\n    previousBlock = DAT_1fff0db4;\n    for (currentBlock = DAT_1fff0db4; currentBlock != (uint *)0x0; currentBlock = (uint *)currentBlock[1]) {\n      remainingSize = *currentBlock - newBlocksize;\n      if (-1 < (int)remainingSize) {\n        if (0xb < remainingSize) {\n          *currentBlock = remainingSize;\n          currentBlock = (uint *)((int)currentBlock + remainingSize);\n          goto LAB_00004c34;\n        }\n        if (previousBlock == currentBlock) {\n          DAT_1fff0db4 = (uint *)currentBlock[1];\n        }\n        if (previousBlock != currentBlock) {\n          previousBlock[1] = (uint)(uint *)currentBlock[1];\n        }\n        goto LAB_00004c42;\n      }\n      previousBlock = currentBlock;\n    }\n    if (DAT_1fff0db8 == 0) {\n      DAT_1fff0db8 = update_offset_00000428(output,0,previousBlock,0,param4);\n    }\n    previousBlock = (uint *)update_offset_00000428(output,newBlocksize);\n    if ((previousBlock != (uint *)0xffffffff) &&\n       ((currentBlock = (uint *)((int)previousBlock + 3U & 0xfffffffc), previousBlock == currentBlock ||\n        (difference = update_offset_00000428(output,(int)currentBlock - (int)previousBlock), difference != -1)))) {\nLAB_00004c34:\n      *currentBlock = newBlocksize;\nLAB_00004c42:\n      initialize_data_0000579c(output);\n      newBlocksize = (int)currentBlock + 0xbU & 0xfffffff8;\n      difference = newBlocksize - (int)(currentBlock + 1);\n      if (difference == 0) {\n        return newBlocksize;\n      }\n      *(uint *)((int)currentBlock + difference) = (int)(currentBlock + 1) - newBlocksize;\n      return newBlocksize;\n    }\n    *output = 0xc;\n    initialize_data_0000579c(output);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004bd0": "resize_memory_block_00004bd0",
                "param_1": "output",
                "param_2": "inputSize",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "previousBlock",
                "iVar2": "difference",
                "uVar3": "remainingSize",
                "puVar4": "currentBlock",
                "uVar5": "newBlocksize"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000068f0",
                "FUN_000060cc",
                "FUN_00005700",
                "FUN_00004248"
            ],
            "called": [
                "FUN_00005790",
                "FUN_00000428",
                "FUN_0000579c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004c84": {
            "entrypoint": "0x00004c84",
            "current_name": "process_and_initialize_data_00004c84",
            "code": "\nvoid process_and_initialize_data_00004c84(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  dword offset;\n  undefined4 param_1_copy;\n  undefined4 param_2_copy;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  param_1_copy = input_param_1;\n  param_2_copy = input_param_2;\n  param_3_copy = input_param_3;\n  param_4_copy = input_param_4;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_and_extract_data_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  process_data_000057f8(offset,*(undefined4 *)(offset + 8),input_param_1,&param_2_copy,param_1_copy,&param_2_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004c84": "process_and_initialize_data_00004c84",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "dVar1": "offset",
                "uVar2": "param_1_copy",
                "uStack_c": "param_2_copy",
                "uStack_8": "param_3_copy",
                "uStack_4": "param_4_copy"
            },
            "calling": [
                "FUN_00000ed8",
                "FUN_00003694",
                "FUN_00002fe0",
                "FUN_00002b10",
                "FUN_00002a88",
                "FUN_0000211c",
                "FUN_00002f74",
                "FUN_00003524",
                "FUN_00002ecc",
                "FUN_0000316c",
                "FUN_00000f04",
                "FUN_00003378",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_000057f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004cb4": {
            "entrypoint": "0x00004cb4",
            "current_name": "extract_and_decrement_counter_00004cb4",
            "code": "\nuint extract_and_decrement_counter_00004cb4(uint input_value)\n\n{\n  dword base_offset;\n  undefined4 *data_ptr;\n  uint counter_value;\n  undefined *new_data_ptr;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  \n  base_offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_and_extract_data_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  data_ptr = *(undefined4 **)(base_offset + 8);\n  if ((base_offset != 0) && (*(int *)(base_offset + 0x18) == 0)) {\n    initialize_and_extract_data_000042a4();\n  }\n  if (data_ptr == &DAT_000079b8) {\n    data_ptr = *(undefined4 **)(base_offset + 4);\n  }\n  else if (data_ptr == (undefined4 *)&DAT_000079d8) {\n    data_ptr = *(undefined4 **)(base_offset + 8);\n  }\n  else if (data_ptr == (undefined4 *)&DAT_00007998) {\n    data_ptr = *(undefined4 **)(base_offset + 0xc);\n  }\n  if ((-1 < (int)(data_ptr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x16))) {\n    FUNC_000045e8(data_ptr[0x16]);\n  }\n  counter_value = data_ptr[2] - 1;\n  data_ptr[2] = counter_value;\n  if (((int)counter_value < 0) && (((int)counter_value < (int)data_ptr[6] || (counter_value = input_value & 0xff, counter_value == 10))))\n  {\n    input_value = extract_data_00005404(base_offset,input_value,data_ptr,counter_value,unaff_r4,unaff_r5);\n  }\n  else {\n    new_data_ptr = (undefined *)*data_ptr;\n    *data_ptr = new_data_ptr + 1;\n    *new_data_ptr = (char)input_value;\n    input_value = input_value & 0xff;\n  }\n  if ((-1 < (int)(data_ptr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x16))) {\n    FUNC_000045ec(data_ptr[0x16]);\n  }\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_00004cb4": "extract_and_decrement_counter_00004cb4",
                "param_1": "input_value",
                "dVar1": "base_offset",
                "puVar2": "data_ptr",
                "uVar3": "counter_value",
                "puVar4": "new_data_ptr"
            },
            "calling": [
                "FUN_00002a00"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00005404",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004db8": {
            "entrypoint": "0x00004db8",
            "current_name": "process_data_00004db8",
            "code": "\nundefined4 processData_00004db8(int inputData)\n\n{\n  char currentChar;\n  dword dataOffset;\n  int result;\n  char *ptrToData;\n  char **ptrToPointer;\n  undefined4 returnValue;\n  char *ptrToInput;\n  \n  dataOffset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_and_extract_data_000042a4();\n  }\n  ptrToPointer = *(char ***)(dataOffset + 8);\n  if (*(int *)(dataOffset + 0x18) == 0) {\n    initialize_and_extract_data_000042a4(dataOffset);\n  }\n  if (ptrToPointer == (char **)&DAT_000079b8) {\n    ptrToPointer = *(char ***)(dataOffset + 4);\n  }\n  else if (ptrToPointer == (char **)&DAT_000079d8) {\n    ptrToPointer = *(char ***)(dataOffset + 8);\n  }\n  else if (ptrToPointer == (char **)&DAT_00007998) {\n    ptrToPointer = *(char ***)(dataOffset + 0xc);\n  }\n  if ((-1 < (int)ptrToPointer[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(ptrToPointer + 3) << 0x16))) {\n    FUNC_000045e8(ptrToPointer[0x16]);\n  }\n  if ((((int)((uint)*(ushort *)(ptrToPointer + 3) << 0x1c) < 0) && (ptrToPointer[4] != (char *)0x0)) ||\n     (result = process_data_000054a8(dataOffset,ptrToPointer), result == 0)) {\n    ptrToInput = (char *)(inputData + -1);\n    do {\n      while( true ) {\n        ptrToInput = ptrToInput + 1;\n        currentChar = *ptrToInput;\n        ptrToData = ptrToPointer[2] + -1;\n        ptrToPointer[2] = ptrToData;\n        if (currentChar == '\\0') {\n          if (-1 < (int)ptrToData) {\n            ptrToInput = *ptrToPointer;\n            returnValue = 10;\n            *ptrToPointer = ptrToInput + 1;\n            *ptrToInput = '\\n';\n            goto LAB_00004d64;\n          }\n          result = extract_data_00005404(dataOffset,10,ptrToPointer);\n          if (result != -1) {\n            returnValue = 10;\n            goto LAB_00004d64;\n          }\n          goto LAB_00004d60;\n        }\n        if (((int)ptrToData < 0) && (((int)ptrToData < (int)ptrToPointer[6] || (currentChar == '\\n')))) break;\n        ptrToData = *ptrToPointer;\n        *ptrToPointer = ptrToData + 1;\n        *ptrToData = currentChar;\n      }\n      result = extract_data_00005404(dataOffset,currentChar,ptrToPointer);\n    } while (result != -1);\n  }\nLAB_00004d60:\n  returnValue = 0xffffffff;\nLAB_00004d64:\n  if ((-1 < (int)ptrToPointer[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(ptrToPointer + 3) << 0x16))) {\n    FUNC_000045ec(ptrToPointer[0x16]);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00004db8": "process_data_00004db8",
                "param_1": "inputData",
                "cVar1": "currentChar",
                "dVar2": "dataOffset",
                "iVar3": "result",
                "pcVar4": "ptrToData",
                "pcVar7": "ptrToInput",
                "ppcVar5": "ptrToPointer",
                "uVar6": "returnValue"
            },
            "calling": [
                "FUN_00003694",
                "FUN_00003478",
                "FUN_00002fe0",
                "FUN_000031e0",
                "FUN_00002b10",
                "FUN_00002a88",
                "FUN_000033f4",
                "FUN_00002f74",
                "FUN_000034c0",
                "FUN_00003444",
                "FUN_00002f30",
                "FUN_0000305c",
                "FUN_000033c0",
                "FUN_000023a4"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00005404",
                "FUN_000054a8",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dc8": {
            "entrypoint": "0x00004dc8",
            "current_name": "copy_and_update_data_00004dc8",
            "code": "\nvoid copyAndUpdateData_00004dc8(undefined4 dataBuffer,int dataOffset)\n\n{\n  int copyResult;\n  uint newData;\n  bool isCopySuccessful;\n  \n  copyResult = copy_data_00000490(dataBuffer,(int)*(short *)(dataOffset + 0xe));\n  isCopySuccessful = -1 < copyResult;\n  if (isCopySuccessful) {\n    newData = *(int *)(dataOffset + 0x54) + copyResult;\n  }\n  else {\n    newData = *(ushort *)(dataOffset + 0xc) & 0xffffefff;\n  }\n  if (isCopySuccessful) {\n    *(uint *)(dataOffset + 0x54) = newData;\n  }\n  if (!isCopySuccessful) {\n    *(short *)(dataOffset + 0xc) = (short)newData;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004dc8": "copy_and_update_data_00004dc8",
                "param_1": "dataBuffer",
                "param_2": "dataOffset",
                "iVar1": "copyResult",
                "uVar2": "newData",
                "bVar3": "isCopySuccessful"
            },
            "calling": [],
            "called": [
                "FUN_00000490"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dee": {
            "entrypoint": "0x00004dee",
            "current_name": "process_data_00004dee",
            "code": "\nundefined4 processData_00004dee(undefined4 output,int input,undefined4 source,undefined4 destination)\n\n{\n  undefined4 result;\n  \n  if ((int)((uint)*(ushort *)(input + 0xc) << 0x17) < 0) {\n    initialize_param_000004f2(output,(int)*(short *)(input + 0xe),0,2);\n  }\n  *(ushort *)(input + 0xc) = *(ushort *)(input + 0xc) & 0xefff;\n  result = copy_and_return_data_00000e38(source,destination);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004dee": "process_data_00004dee",
                "param_1": "output",
                "param_2": "input",
                "param_3": "source",
                "param_4": "destination",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_000004f2",
                "FUN_00000e38"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e26": {
            "entrypoint": "0x00004e26",
            "current_name": "initialize_and_update_param_00004e26",
            "code": "\nvoid initialize_and_update_param_00004e26(undefined4 param,int data_ptr)\n\n{\n  int initialized_value;\n  ushort updated_value;\n  bool is_initialized;\n  \n  initialized_value = initialize_param_000004f2(param,(int)*(short *)(data_ptr + 0xe));\n  is_initialized = initialized_value == -1;\n  if (is_initialized) {\n    updated_value = *(ushort *)(data_ptr + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(data_ptr + 0x54) = initialized_value;\n    updated_value = *(ushort *)(data_ptr + 0xc) | 0x1000;\n  }\n  if (is_initialized) {\n    *(ushort *)(data_ptr + 0xc) = updated_value;\n  }\n  if (!is_initialized) {\n    *(ushort *)(data_ptr + 0xc) = updated_value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004e26": "initialize_and_update_param_00004e26",
                "param_1": "param",
                "param_2": "data_ptr",
                "iVar1": "initialized_value",
                "uVar2": "updated_value",
                "bVar3": "is_initialized"
            },
            "calling": [],
            "called": [
                "FUN_000004f2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e52": {
            "entrypoint": "0x00004e52",
            "current_name": "compare_arrays_00004e52",
            "code": "\nint compare_arrays_00004e52(byte *array1,byte *array2)\n\n{\n  byte current_byte;\n  uint array1_byte;\n  bool arrays_match;\n  \n  do {\n    array1_byte = (uint)*array1;\n    current_byte = *array2;\n    arrays_match = array1_byte == 1;\n    if (array1_byte != 0) {\n      arrays_match = array1_byte == current_byte;\n    }\n    array1 = array1 + 1;\n    array2 = array2 + 1;\n  } while (arrays_match);\n  return array1_byte - current_byte;\n}\n\n",
            "renaming": {
                "FUN_00004e52": "compare_arrays_00004e52",
                "param_1": "array1",
                "param_2": "array2",
                "bVar1": "current_byte",
                "uVar2": "array1_byte",
                "bVar3": "arrays_match"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00002a18",
                "FUN_00004e52",
                "FUN_00002fe0",
                "FUN_0000316c",
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e66": {
            "entrypoint": "0x00004e66",
            "current_name": "compare_bytes_00004e66",
            "code": "\nint compareBytes_00004e66(byte *inputByteArray,int startPosition,int byteArrayLength)\n\n{\n  byte *currentByte;\n  int outputValue;\n  byte *nextByte;\n  uint currentByteValue;\n  \n  if (byteArrayLength == 0) {\n    outputValue = 0;\n  }\n  else {\n    nextByte = (byte *)(startPosition + -1);\n    currentByte = inputByteArray;\n    do {\n      currentByteValue = (uint)*currentByte;\n      nextByte = nextByte + 1;\n      if ((currentByteValue != *nextByte) || (currentByte + 1 == inputByteArray + byteArrayLength)) break;\n      currentByte = currentByte + 1;\n    } while (currentByteValue != 0);\n    outputValue = currentByteValue - *nextByte;\n  }\n  return outputValue;\n}\n\n",
            "renaming": {
                "FUN_00004e66": "compare_bytes_00004e66",
                "param_1": "inputByteArray",
                "param_2": "startPosition",
                "param_3": "byteArrayLength",
                "pbVar1": "currentByte",
                "iVar2": "outputValue",
                "pbVar3": "nextByte",
                "uVar4": "currentByteValue"
            },
            "calling": [
                "FUN_00003524",
                "FUN_0000562c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f84": {
            "entrypoint": "0x00004f84",
            "current_name": "parse_number_00004f84",
            "code": "\nuint parseNumber_00004f84(byte *inputString,byte **outputPointer,uint base)\n\n{\n  uint result;\n  uint currentChar;\n  uint isNegative;\n  uint digit;\n  int comparison;\n  uint maxValue;\n  uint maxDivisor;\n  byte *ptrChar;\n  byte *nextChar;\n  \n  nextChar = inputString;\n  do {\n    ptrChar = nextChar;\n    nextChar = ptrChar + 1;\n    currentChar = (uint)*ptrChar;\n    isNegative = (byte)(&DAT_00007a99)[currentChar] & 8;\n  } while (((&DAT_00007a99)[currentChar] & 8) != 0);\n  if (currentChar == 0x2d) {\n    currentChar = (uint)*nextChar;\n    isNegative = 1;\n    nextChar = ptrChar + 2;\n  }\n  else if (currentChar == 0x2b) {\n    currentChar = (uint)*nextChar;\n    nextChar = ptrChar + 2;\n  }\n  if (base == 0) {\n    if (currentChar != 0x30) {\n      base = 10;\n      goto LAB_00004ed6;\n    }\n  }\n  else if ((base != 0x10) || (currentChar != 0x30)) goto LAB_00004ed6;\n  if ((*nextChar & 0xdf) == 0x58) {\n    currentChar = (uint)nextChar[1];\n    base = 0x10;\n    nextChar = nextChar + 2;\n  }\n  else {\n    currentChar = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00004ed6:\n  maxValue = isNegative + 0x7fffffff;\n  comparison = 0;\n  maxDivisor = maxValue / base;\n  result = 0;\n  do {\n    digit = currentChar - 0x30;\n    if (9 < digit) {\n      if (currentChar - 0x41 < 0x1a) {\n        digit = currentChar - 0x37;\n      }\n      else {\n        if (0x19 < currentChar - 0x61) break;\n        digit = currentChar - 0x57;\n      }\n    }\n    if ((int)base <= (int)digit) break;\n    if (comparison != -1) {\n      if ((maxDivisor < result) || ((maxDivisor == result && ((int)(maxValue - base * maxDivisor) < (int)digit)))) {\n        comparison = -1;\n      }\n      else {\n        result = result * base + digit;\n        comparison = 1;\n      }\n    }\n    currentChar = (uint)*nextChar;\n    nextChar = nextChar + 1;\n  } while( true );\n  if (comparison == -1) {\n    *(undefined4 *)Elf32_Rel_ARRAY_1fff0200[16].r_offset = 0x22;\n    result = maxValue;\n    if (outputPointer == (byte **)0x0) {\n      return maxValue;\n    }\n  }\n  else {\n    if (isNegative != 0) {\n      result = -result;\n    }\n    if (outputPointer == (byte **)0x0) {\n      return result;\n    }\n    if (comparison == 0) goto LAB_00004f64;\n  }\n  inputString = nextChar + -1;\nLAB_00004f64:\n  *outputPointer = inputString;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004f84": "parse_number_00004f84",
                "param_1": "inputString",
                "param_2": "outputPointer",
                "param_3": "base",
                "uVar1": "result",
                "uVar2": "currentChar",
                "uVar3": "isNegative",
                "uVar4": "digit",
                "iVar5": "comparison",
                "uVar6": "maxValue",
                "uVar7": "maxDivisor",
                "pbVar8": "ptrChar",
                "pbVar9": "nextChar"
            },
            "calling": [
                "FUN_00004042",
                "FUN_0000328c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f98": {
            "entrypoint": "0x00004f98",
            "current_name": "calculate_weekday_offset_00004f98",
            "code": "\nundefined4 calculateWeekdayOffset_00004f98(uint year)\n\n{\n  uint *memoryPtr;\n  undefined4 result;\n  uint dayOffset;\n  int totalOffset;\n  uint *currentPtr;\n  int yearOffset;\n  uint leapYear;\n  int monthOffset;\n  int weekdayOffset;\n  uint isDivisible;\n  \n  memoryPtr = (uint *)getMemoryAddress();\n  if ((int)year < 0x7b2) {\n    result = 0;\n  }\n  else {\n    yearOffset = (year - 0x7b2) * 0x16d + ((int)(year - 0x7b1) >> 2) +\n            (year - 0x76d) / 0xffffff9c + (year - 0x641) / 400;\n    memoryPtr[1] = year;\n    isDivisible = (uint)(year % 400 == 0);\n    currentPtr = memoryPtr;\n    do {\n      dayOffset = currentPtr[5];\n      if (*(char *)(currentPtr + 2) == 'J') {\n        if ((((year & 3) == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\n          if ((int)dayOffset < 0x3c) {\n            totalOffset = 0;\n          }\n          else {\n            totalOffset = 1;\n          }\n        }\n        else {\n          totalOffset = 0;\n        }\n        totalOffset = totalOffset + yearOffset + dayOffset + -1;\n      }\n      else if (*(char *)(currentPtr + 2) == 'D') {\n        totalOffset = yearOffset + dayOffset;\n      }\n      else {\n        leapYear = isDivisible;\n        if (((year & 3) == 0) && (year % 100 != 0)) {\n          leapYear = 1;\n        }\n        monthOffset = 0;\n        totalOffset = yearOffset;\n        while( true ) {\n          monthOffset = monthOffset + 1;\n          if ((int)currentPtr[3] <= monthOffset) break;\n          totalOffset = totalOffset + *(int *)(&unknownOffset + monthOffset * 4 + leapYear * 0x30);\n        }\n        weekdayOffset = dayOffset - (totalOffset + 4U) % 7;\n        if (weekdayOffset < 0) {\n          weekdayOffset = weekdayOffset + 7;\n        }\n        for (weekdayOffset = (currentPtr[4] - 1) * 7 + weekdayOffset;\n            *(int *)(&unknownOffset + monthOffset * 4 + leapYear * 0x30) <= weekdayOffset; weekdayOffset = weekdayOffset + -7) {\n        }\n        totalOffset = totalOffset + weekdayOffset;\n      }\n      dayOffset = currentPtr[10] + totalOffset * 0x15180 + currentPtr[6];\n      currentPtr[8] = dayOffset;\n      currentPtr[9] = (int)dayOffset >> 0x1f;\n      currentPtr = currentPtr + 10;\n    } while (memoryPtr + 0x14 != currentPtr);\n    dayOffset = memoryPtr[9];\n    isDivisible = memoryPtr[0x13];\n    *memoryPtr = (uint)((int)((dayOffset - isDivisible) - (uint)(memoryPtr[8] < memoryPtr[0x12])) < 0 !=\n                    (SBORROW4(dayOffset,isDivisible) !=\n                    SBORROW4(dayOffset - isDivisible,(uint)(memoryPtr[8] < memoryPtr[0x12]))));\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004f98": "calculate_weekday_offset_00004f98",
                "param_1": "year",
                "puVar1": "memoryPtr",
                "uVar2": "result",
                "uVar3": "dayOffset",
                "iVar4": "totalOffset",
                "puVar5": "currentPtr",
                "iVar6": "yearOffset",
                "uVar7": "leapYear",
                "iVar8": "monthOffset",
                "iVar9": "weekdayOffset",
                "uVar10": "isDivisible",
                "get_memory_address_000056b0": "getMemoryAddress",
                "UNK_00007b98": "unknownOffset"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000047e4"
            ],
            "called": [
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050e8": {
            "entrypoint": "0x000050e8",
            "current_name": "get_memory_address_000050e8",
            "code": "\nundefined * get_memory_address_000050e8(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050e8": "get_memory_address_000050e8"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050f4": {
            "entrypoint": "0x000050f4",
            "current_name": "get_data_address_000050f4",
            "code": "\nundefined * get_data_address_000050f4(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050f4": "get_data_address_000050f4"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005100": {
            "entrypoint": "0x00005100",
            "current_name": "parse_date_string_00005100",
            "code": "\nvoid parseDateString_00005100(void)\n\n{\n  dword relocationOffset;\n  int memoryAddress;\n  char *keyOffset;\n  int comparisonResult;\n  int numParsed;\n  undefined dataType;\n  char *currentOffset;\n  bool firstDelimiter;\n  ushort *parsedVariable1;\n  int *parsedIndex1;\n  ushort *parsedVariable2;\n  int *parsedIndex2;\n  ushort hour;\n  ushort minutes;\n  ushort seconds;\n  ushort day;\n  ushort month;\n  ushort year;\n  int offset;\n  char *parsedString [2];\n  \n  relocationOffset = relocationTable[16].r_offset;\n  memoryAddress = get_memory_address_000056b0();\n  keyOffset = (char *)find_key_offset_000056a0(relocationOffset,&DAT_00007a5c);\n  if (keyOffset == (char *)0x0) {\n    relocationTable[28].r_info = (dword)&DAT_00007a5f;\n    relocationTable[29].r_offset = (dword)&DAT_00007a5f;\n    DAT_1fff0dd8 = keyOffset;\n    DAT_1fff0ddc = keyOffset;\n    initialize_data_and_process_00005780(DAT_1fff0dd4);\n    DAT_1fff0dd4 = 0;\n  }\n  else if ((DAT_1fff0dd4 == 0) || (comparisonResult = compare_arrays_00004e52(), comparisonResult != 0)) {\n    initialize_data_and_process_00005780(DAT_1fff0dd4);\n    comparisonResult = find_last_character_00005ecc(keyOffset);\n    DAT_1fff0dd4 = resize_memory_block_00004bd0(relocationOffset,comparisonResult + 1);\n    if (DAT_1fff0dd4 != 0) {\n      copy_string_00005ebc(DAT_1fff0dd4,keyOffset);\n    }\n    if (*keyOffset == ':') {\n      keyOffset = keyOffset + 1;\n    }\n    comparisonResult = process_data_00005e68(keyOffset,\"%10[^0-9,+-]%n\",&DAT_1fff0dc7,&offset);\n    if (0 < comparisonResult) {\n      currentOffset = keyOffset + offset;\n      if (keyOffset[offset] == '-') {\n        currentOffset = currentOffset + 1;\n        comparisonResult = -1;\n      }\n      else {\n        if (keyOffset[offset] == '+') {\n          currentOffset = currentOffset + 1;\n        }\n        comparisonResult = 1;\n      }\n      minutes = 0;\n      seconds = 0;\n      parsedVariable1 = &minutes;\n      parsedIndex1 = &offset;\n      parsedVariable2 = &seconds;\n      parsedIndex2 = &offset;\n      numParsed = process_data_00005e68(currentOffset,\"%hu%n:%hu%n:%hu%n\",&hour,&offset,&minutes,&offset,\n                           &seconds,&offset);\n      if (0 < numParsed) {\n        *(uint *)(memoryAddress + 0x28) =\n             ((uint)hour * 0xe10 + (uint)minutes * 0x3c + (uint)seconds) * comparisonResult;\n        relocationTable[28].r_info = (dword)&DAT_1fff0dc7;\n        currentOffset = currentOffset + offset;\n        comparisonResult = process_data_00005e68(currentOffset,\"%10[^0-9,+-]%n\",&DAT_1fff0dbc,&offset,parsedVariable1,parsedIndex1,parsedVariable2,\n                             parsedIndex2);\n        if (comparisonResult < 1) {\n          relocationTable[29].r_offset = relocationTable[28].r_info;\n          DAT_1fff0ddc = *(char **)(memoryAddress + 0x28);\n          DAT_1fff0dd8 = (char *)0x0;\n        }\n        else {\n          relocationTable[29].r_offset = (dword)&DAT_1fff0dbc;\n          keyOffset = currentOffset + offset;\n          if (currentOffset[offset] == '-') {\n            keyOffset = keyOffset + 1;\n            comparisonResult = -1;\n          }\n          else {\n            if (currentOffset[offset] == '+') {\n              keyOffset = keyOffset + 1;\n            }\n            comparisonResult = 1;\n          }\n          hour = 0;\n          minutes = 0;\n          seconds = 0;\n          offset = 0;\n          numParsed = process_data_00005e68(keyOffset,\"%hu%n:%hu%n:%hu%n\",&hour,&offset,&minutes,&offset,\n                               &seconds,&offset);\n          if (numParsed < 1) {\n            comparisonResult = *(int *)(memoryAddress + 0x28) + -0xe10;\n          }\n          else {\n            comparisonResult = ((uint)hour * 0xe10 + (uint)minutes * 0x3c + (uint)seconds) * comparisonResult;\n          }\n          *(int *)(memoryAddress + 0x50) = comparisonResult;\n          keyOffset = keyOffset + offset;\n          firstDelimiter = false;\n          comparisonResult = memoryAddress;\n          while( true ) {\n            if (*keyOffset == ',') {\n              keyOffset = keyOffset + 1;\n            }\n            if (*keyOffset == 'M') {\n              numParsed = process_data_00005e68(keyOffset,\"M%hu%n.%hu%n.%hu%n\",&day,&offset,&month,\n                                   &offset,&year,&offset);\n              if (numParsed != 3) {\n                return;\n              }\n              if (0xb < day - 1) {\n                return;\n              }\n              if (4 < month - 1) {\n                return;\n              }\n              if (6 < year) {\n                return;\n              }\n              *(uint *)(comparisonResult + 0xc) = (uint)day;\n              *(uint *)(comparisonResult + 0x10) = (uint)month;\n              *(undefined *)(comparisonResult + 8) = 0x4d;\n              *(uint *)(comparisonResult + 0x14) = (uint)year;\n              currentOffset = keyOffset + offset;\n            }\n            else {\n              if (*keyOffset == 'J') {\n                keyOffset = keyOffset + 1;\n                dataType = 0x4a;\n              }\n              else {\n                dataType = 0x44;\n              }\n              year = convert_rel_offset_to_int_00005fd8(keyOffset,parsedString,10);\n              currentOffset = parsedString[0];\n              if (parsedString[0] == keyOffset) {\n                if (firstDelimiter) {\n                  *(undefined *)(memoryAddress + 0x30) = 0x4d;\n                  *(undefined4 *)(memoryAddress + 0x34) = 0xb;\n                  *(undefined4 *)(memoryAddress + 0x38) = 1;\n                  *(undefined4 *)(memoryAddress + 0x3c) = 0;\n                }\n                else {\n                  *(undefined *)(memoryAddress + 8) = 0x4d;\n                  *(undefined4 *)(memoryAddress + 0xc) = 3;\n                  *(undefined4 *)(memoryAddress + 0x10) = 2;\n                  *(undefined4 *)(memoryAddress + 0x14) = 0;\n                }\n              }\n              else {\n                *(undefined *)(comparisonResult + 8) = dataType;\n                *(uint *)(comparisonResult + 0x14) = (uint)year;\n              }\n            }\n            hour = 2;\n            minutes = 0;\n            seconds = 0;\n            offset = 0;\n            if (*currentOffset == '/') {\n              process_data_00005e68(currentOffset,&DAT_00007a85,&hour,&offset,&minutes,&offset,&seconds,\n                           &offset);\n            }\n            *(uint *)(comparisonResult + 0x18) =\n                 (uint)hour * 0xe10 + (uint)minutes * 0x3c + (uint)seconds;\n            comparisonResult = comparisonResult + 0x28;\n            keyOffset = currentOffset + offset;\n            if (firstDelimiter) break;\n            firstDelimiter = true;\n          }\n          calculate_weekday_offset_00004f98(*(undefined4 *)(memoryAddress + 4));\n          DAT_1fff0ddc = *(char **)(memoryAddress + 0x28);\n          DAT_1fff0dd8 = (char *)(*(int *)(memoryAddress + 0x50) - (int)DAT_1fff0ddc);\n          if (DAT_1fff0dd8 != (char *)0x0) {\n            DAT_1fff0dd8 = (char *)0x1;\n          }\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005100": "parse_date_string_00005100",
                "Elf32_Rel_ARRAY_1fff0200": "relocationTable",
                "dVar1": "relocationOffset",
                "iVar2": "memoryAddress",
                "pcVar3": "keyOffset",
                "iVar4": "comparisonResult",
                "iVar5": "numParsed",
                "uVar6": "dataType",
                "pcVar7": "currentOffset",
                "bVar8": "firstDelimiter",
                "puVar9": "parsedVariable1",
                "piVar10": "parsedIndex1",
                "puVar11": "parsedVariable2",
                "piVar12": "parsedIndex2",
                "local_3c": "hour",
                "local_3a": "minutes",
                "local_38": "seconds",
                "local_36": "day",
                "local_34": "month",
                "local_32": "year",
                "local_30": "offset",
                "local_2c": "parsedString"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005ecc",
                "FUN_00004e52",
                "FUN_00005e68",
                "FUN_00004bd0",
                "FUN_00005780",
                "FUN_00004f98",
                "FUN_00005fd8",
                "FUN_00005ebc",
                "FUN_000056b0",
                "FUN_000056a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005404": {
            "entrypoint": "0x00005404",
            "current_name": "extract_data_00005404",
            "code": "\nuint extractData_00005404(int input_param,uint output_value,int *data_array,undefined4 config_param)\n\n{\n  int offset;\n  uint extracted_value;\n  undefined *data_ptr;\n  \n  if ((input_param != 0) && (*(int *)(input_param + 0x18) == 0)) {\n    initialize_and_extract_data_000042a4();\n  }\n  if (data_array == &DAT_000079b8) {\n    data_array = *(int **)(input_param + 4);\n  }\n  else if (data_array == (int *)&DAT_000079d8) {\n    data_array = *(int **)(input_param + 8);\n  }\n  else if (data_array == (int *)&DAT_00007998) {\n    data_array = *(int **)(input_param + 0xc);\n  }\n  data_array[2] = data_array[6];\n  extracted_value = (uint)*(ushort *)(data_array + 3);\n  offset = extracted_value << 0x1c;\n  if (((offset < 0) && (extracted_value = data_array[4], extracted_value != 0)) ||\n     (offset = process_data_000054a8(input_param,data_array,offset,extracted_value,config_param), offset == 0)) {\n    offset = *data_array - data_array[4];\n    output_value = output_value & 0xff;\n    if ((offset < data_array[5]) || (offset = process_data_00004158(input_param,data_array), offset == 0)) {\n      data_array[2] = data_array[2] + -1;\n      data_ptr = (undefined *)*data_array;\n      *data_array = (int)(data_ptr + 1);\n      *data_ptr = (char)output_value;\n      if (data_array[5] != offset + 1) {\n        if (-1 < (int)((uint)*(ushort *)(data_array + 3) << 0x1f)) {\n          return output_value;\n        }\n        if (output_value != 10) {\n          return output_value;\n        }\n      }\n      offset = process_data_00004158(input_param,data_array);\n      if (offset == 0) {\n        return output_value;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00005404": "extract_data_00005404",
                "param_1": "input_param",
                "param_2": "output_value",
                "param_3": "data_array",
                "param_4": "config_param",
                "iVar1": "offset",
                "uVar2": "extracted_value",
                "puVar3": "data_ptr"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_000057a8",
                "FUN_00004cb4"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00004158",
                "FUN_000054a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000054a8": {
            "entrypoint": "0x000054a8",
            "current_name": "process_data_000054a8",
            "code": "\nuint processData_000054a8(undefined4 *output,undefined4 *input)\n\n{\n  ushort value1;\n  dword offset;\n  ushort value2;\n  uint value3;\n  uint value4;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_and_extract_data_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  if (input == &DAT_000079b8) {\n    input = *(undefined4 **)(offset + 4);\n  }\n  else if (input == (undefined4 *)&DAT_000079d8) {\n    input = *(undefined4 **)(offset + 8);\n  }\n  else if (input == (undefined4 *)&DAT_00007998) {\n    input = *(undefined4 **)(offset + 0xc);\n  }\n  value3 = (uint)*(ushort *)(input + 3);\n  value2 = *(ushort *)(input + 3);\n  if (-1 < (int)(value3 << 0x1c)) {\n    if (-1 < (int)(value3 << 0x1b)) {\n      *output = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(value3 << 0x1d) < 0) {\n      if ((undefined4 *)input[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input[0xd] != input + 0x11) {\n          initialize_data_and_process_00004b34(output);\n        }\n        input[0xd] = 0;\n      }\n      *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xffdb;\n      input[1] = 0;\n      *input = input[4];\n    }\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 8;\n  }\n  if ((input[4] == 0) && ((*(ushort *)(input + 3) & 0x280) != 0x200)) {\n    resize_and_set_flags_00005700(output,input);\n  }\n  value1 = *(ushort *)(input + 3);\n  value3 = (uint)value1;\n  value2 = *(ushort *)(input + 3);\n  value4 = value3 & 1;\n  if ((value1 & 1) == 0) {\n    if (-1 < (int)(value3 << 0x1e)) {\n      value4 = input[5];\n    }\n    input[2] = value4;\n  }\n  else {\n    input[2] = 0;\n    input[6] = -input[5];\n  }\n  if (input[4] != 0) {\n    return 0;\n  }\n  if ((value1 & 0x80) == 0) {\n    return value3 & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(input + 3) = value2 | 0x40;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000054a8": "process_data_000054a8",
                "param_1": "output",
                "param_2": "input",
                "uVar1": "value1",
                "dVar2": "offset",
                "uVar3": "value2",
                "uVar4": "value3",
                "uVar5": "value4"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_00005404",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00004b34",
                "FUN_00005700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nuint FUN_000054a8(undefined4 *param_1,undefined4 *param_2)\n\n{\n  ushort uVar1;\n  dword dVar2;\n  ushort uVar3;\n  uint uVar4;\n  uint uVar5;\n  \n  dVar2 = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUNC_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  if (param_2 == &DAT_000079b8) {\n    param_2 = *(undefined4 **)(dVar2 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_000079d8) {\n    param_2 = *(undefined4 **)(dVar2 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_00007998) {\n    param_2 = *(undefined4 **)(dVar2 + 0xc);\n  }\n  uVar4 = (uint)*(ushort *)(param_2 + 3);\n  uVar3 = *(ushort *)(param_2 + 3);\n  if (-1 < (int)(uVar4 << 0x1c)) {\n    if (-1 < (int)(uVar4 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(uVar4 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          initialize_data_and_process_00004b34(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    resize_and_set_flags_00005700(param_1,param_2);\n  }\n  uVar1 = *(ushort *)(param_2 + 3);\n  uVar4 = (uint)uVar1;\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar5 = uVar4 & 1;\n  if ((uVar1 & 1) == 0) {\n    if (-1 < (int)(uVar4 << 0x1e)) {\n      uVar5 = param_2[5];\n    }\n    param_2[2] = uVar5;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] != 0) {\n    return 0;\n  }\n  if ((uVar1 & 0x80) == 0) {\n    return uVar4 & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n  return 0xffffffff;\n}\n\n"
        },
        "FUN_00005584": {
            "entrypoint": "0x00005584",
            "current_name": "normalize_and_set_division_result_00005584",
            "code": "\nvoid normalizeAndSetDivisionResult_00005584(uint *result,uint dividend,uint divisor)\n\n{\n  uint remainder;\n  uint quotient;\n  \n  quotient = dividend / divisor;\n  remainder = dividend - divisor * quotient;\n  if ((int)dividend < 0) {\n    if (0 < (int)remainder) {\n      quotient = quotient - 1;\n      remainder = remainder + divisor;\n    }\n  }\n  else if ((int)remainder < 0) {\n    quotient = quotient + 1;\n    remainder = remainder - divisor;\n  }\n  *result = quotient;\n  result[1] = remainder;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005584": "normalize_and_set_division_result_00005584",
                "param_1": "result",
                "param_2": "dividend",
                "param_3": "divisor",
                "uVar1": "remainder",
                "uVar2": "quotient"
            },
            "calling": [
                "FUN_00004634"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000562c": {
            "entrypoint": "0x0000562c",
            "current_name": "find_key_value_offset_0000562c",
            "code": "\nint findKeyValueOffset_0000562c(undefined4 param,char *inputString,int *outputIndex)\n\n{\n  char currentChar;\n  int *relArray;\n  int comparisonResult;\n  char *currentPtr;\n  int *currEntry;\n  int lengthOffset;\n  \n  initialize_memory_00005fec();\n  currentPtr = inputString;\n  if (Elf32_Rel_ARRAY_1fff0200[41].r_offset != 0) {\n    do {\n      currentChar = *currentPtr;\n      if (currentChar == '\\0') {\n        lengthOffset = (int)currentPtr - (int)inputString;\n        relArray = (int *)Elf32_Rel_ARRAY_1fff0200[41].r_offset;\n        while( true ) {\n          currEntry = relArray;\n          if (*currEntry == 0) break;\n          comparisonResult = compare_bytes_00004e66(*currEntry,inputString,lengthOffset);\n          relArray = currEntry + 1;\n          if ((comparisonResult == 0) && (comparisonResult = *currEntry, *(char *)(comparisonResult + lengthOffset) == '=')) {\n            *outputIndex = (int)((int)currEntry - Elf32_Rel_ARRAY_1fff0200[41].r_offset) >> 2;\n            execute_important_function_00005ff8(param);\n            return comparisonResult + lengthOffset + 1;\n          }\n        }\n        break;\n      }\n      currentPtr = currentPtr + 1;\n    } while (currentChar != '=');\n  }\n  execute_important_function_00005ff8(param);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000562c": "find_key_value_offset_0000562c",
                "param_1": "param",
                "param_2": "inputString",
                "param_3": "outputIndex",
                "cVar1": "currentChar",
                "piVar2": "relArray",
                "iVar3": "comparisonResult",
                "pcVar4": "currentPtr",
                "piVar5": "currEntry",
                "iVar6": "lengthOffset"
            },
            "calling": [
                "FUN_000056a0"
            ],
            "called": [
                "FUN_00005ff8",
                "FUN_00004e66",
                "FUN_00005fec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056a0": {
            "entrypoint": "0x000056a0",
            "current_name": "find_key_offset_000056a0",
            "code": "\nvoid findKeyOffset_000056a0(undefined4 dataOffset,undefined4 keyOffset,undefined4 valueOffset,undefined4 additionalParam)\n\n{\n  undefined4 updatedKeyOffset;\n  undefined4 updatedValueOffset;\n  \n  updatedKeyOffset = keyOffset;\n  updatedValueOffset = valueOffset;\n  find_key_value_offset_0000562c(dataOffset,keyOffset,&updatedKeyOffset,additionalParam,dataOffset);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000056a0": "find_key_offset_000056a0",
                "param_1": "dataOffset",
                "param_2": "keyOffset",
                "param_3": "valueOffset",
                "param_4": "additionalParam",
                "uStack_c": "updatedKeyOffset",
                "uStack_8": "updatedValueOffset"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_0000562c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b0": {
            "entrypoint": "0x000056b0",
            "current_name": "get_memory_address_000056b0",
            "code": "\nuint32_t getMemoryAddress_000056b0(void)\n\n{\n  return 0x1fff02f0;\n}\n\n",
            "renaming": {
                "FUN_000056b0": "get_memory_address_000056b0",
                "undefined4": "uint32_t"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000047e4",
                "FUN_00004f98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b8": {
            "entrypoint": "0x000056b8",
            "current_name": "check_and_set_flags_000056b8",
            "code": "\nundefined4 checkAndSetFlags_000056b8(undefined4 param1,int param2,undefined4 *output,uint *flag)\n\n{\n  int result;\n  undefined4 flagValue;\n  undefined buffer [4];\n  uint value;\n  \n  if ((*(short *)(param2 + 0xe) < 0) ||\n     (result = set_param_and_return_00000514(param1,(int)*(short *)(param2 + 0xe),buffer), result < 0)) {\n    *flag = 0;\n    if ((int)((uint)*(ushort *)(param2 + 0xc) << 0x18) < 0) {\n      flagValue = 0x40;\n      goto LAB_000056f8;\n    }\n  }\n  else {\n    *flag = (uint)((value & 0xf000) == 0x2000);\n  }\n  flagValue = 0x400;\nLAB_000056f8:\n  *output = flagValue;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000056b8": "check_and_set_flags_000056b8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "output",
                "param_4": "flag",
                "iVar1": "result",
                "uVar2": "flagValue",
                "auStack_68": "buffer",
                "local_64": "value"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [
                "FUN_00000514"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005700": {
            "entrypoint": "0x00005700",
            "current_name": "resize_and_set_flags_00005700",
            "code": "\nvoid resizeAndSetFlags_00005700(int param1,int *param2)\n\n{\n  ushort flags;\n  int resizeResult;\n  int newSize;\n  int *localPtr;\n  \n  if (-1 < (int)((uint)*(ushort *)(param2 + 3) << 0x1e)) {\n    newSize = param1;\n    localPtr = param2;\n    flags = check_and_set_flags_000056b8(param1,param2,&newSize,&localPtr);\n    resizeResult = resize_memory_block_00004bd0(param1,newSize);\n    if (resizeResult != 0) {\n      *(undefined **)(param1 + 0x28) = &DAT_0000423d;\n      *param2 = resizeResult;\n      *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 0x80;\n      param2[5] = newSize;\n      param2[4] = resizeResult;\n      if ((localPtr != (int *)0x0) &&\n         (resizeResult = check_valid_input_00000534(param1,(int)*(short *)((int)param2 + 0xe)), resizeResult != 0)) {\n        *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(param2 + 3) = flags | *(ushort *)(param2 + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(param2 + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) & 0xfffc | 2;\n  }\n  *param2 = (int)param2 + 0x47;\n  param2[4] = (int)param2 + 0x47;\n  param2[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005700": "resize_and_set_flags_00005700",
                "param_1": "param1",
                "param_2": "param2",
                "uVar1": "flags",
                "iVar2": "resizeResult",
                "local_18": "newSize",
                "local_14": "localPtr"
            },
            "calling": [
                "FUN_000054a8",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_000056b8",
                "FUN_00000534"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005780": {
            "entrypoint": "0x00005780",
            "current_name": "initialize_data_and_process_00005780",
            "code": "\nvoid initialize_data_and_process_00005780(undefined4 param)\n\n{\n  initialize_data_and_process_00005780_00004b34(rel_array[16].offset,param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005780": "initialize_data_and_process_00005780",
                "param_1": "param",
                "Elf32_Rel_ARRAY_1fff0200": "rel_array",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005790": {
            "entrypoint": "0x00005790",
            "current_name": "initialize_data_00005790",
            "code": "\nvoid initializeData_00005790(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005790": "initialize_data_00005790"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000579c": {
            "entrypoint": "0x0000579c",
            "current_name": "initialize_data_0000579c",
            "code": "\nvoid initialize_data_0000579c(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000579c": "initialize_data_0000579c"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057a8": {
            "entrypoint": "0x000057a8",
            "current_name": "process_data_000057a8",
            "code": "\nint processData_000057a8(undefined4 param,int data,undefined4 *dataArray)\n\n{\n  int count;\n  undefined *ptr;\n  \n  count = dataArray[2] + -1;\n  dataArray[2] = count;\n  if ((count < 0) && ((count < (int)dataArray[6] || (data == 10)))) {\n    count = extractData();\n    return count;\n  }\n  ptr = (undefined *)*dataArray;\n  *dataArray = ptr + 1;\n  *ptr = (char)data;\n  return data;\n}\n\n",
            "renaming": {
                "FUN_000057a8": "process_data_000057a8",
                "param_1": "param",
                "param_2": "data",
                "param_3": "dataArray",
                "iVar1": "count",
                "puVar2": "ptr",
                "extract_data_00005404": "extractData"
            },
            "calling": [
                "FUN_000057d2"
            ],
            "called": [
                "FUN_00005404"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057d2": {
            "entrypoint": "0x000057d2",
            "current_name": "process_data_000057d2",
            "code": "\nint processData_000057d2(undefined4 param1,undefined4 param2,undefined *data,int size)\n\n{\n  int result;\n  undefined *endData;\n  int currentSize;\n  \n  endData = data + size;\n  currentSize = size;\n  do {\n    if (data == endData) {\n      return 0;\n    }\n    result = process_data_000057a8(param1,*data,param2,size,currentSize);\n    size = result + 1;\n    data = data + 1;\n  } while (size != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000057d2": "process_data_000057d2",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "data",
                "param_4": "size",
                "iVar1": "result",
                "puVar2": "endData",
                "iVar3": "currentSize"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000057a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057f8": {
            "entrypoint": "0x000057f8",
            "current_name": "process_data_000057f8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000059f0) */\n\nint processData_000057f8(int inputData,undefined4 *parameters,byte *inputBuffer,int *outputIndices)\n\n{\n  int result;\n  int processResult;\n  int *currentOutputIndex;\n  bool isNumeric;\n  byte *currentByte;\n  int reverseResult;\n  byte *currentInputByte;\n  int *outputIndicesModified;\n  uint flags;\n  int starCount;\n  undefined4 unusedStackVar;\n  int currentOutputOffset;\n  int totalOutputSize;\n  byte currentOutputByte;\n  undefined constant1;\n  undefined constant2;\n  undefined constant3;\n  undefined4 unusedLocalVar;\n  \n  if ((inputData != 0) && (*(int *)(inputData + 0x18) == 0)) {\n    initialize_and_extract_data_000042a4();\n  }\n  if (parameters == &DAT_000079b8) {\n    parameters = *(undefined4 **)(inputData + 4);\n  }\n  else if (parameters == (undefined4 *)&DAT_000079d8) {\n    parameters = *(undefined4 **)(inputData + 8);\n  }\n  else if (parameters == (undefined4 *)&DAT_00007998) {\n    parameters = *(undefined4 **)(inputData + 0xc);\n  }\n  if ((-1 < (int)(parameters[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(parameters + 3) << 0x16))) {\n    FUNC_000045e8(parameters[0x16]);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(parameters + 3) << 0x1c)) || (parameters[4] == 0)) &&\n     (result = process_data_000054a8(inputData,parameters), result != 0)) {\n    if ((-1 < (int)(parameters[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(parameters + 3) << 0x16)))\n    {\n      FUNC_000045ec(parameters[0x16]);\n    }\n    return -1;\n  }\n  totalOutputSize = 0;\n  constant1 = 0x20;\n  constant2 = 0x30;\n  currentInputByte = inputBuffer;\n  outputIndicesModified = outputIndices;\nLAB_0000588e:\n  currentByte = currentInputByte;\n  if (*currentByte != 0) goto code_r0x00005896;\n  goto LAB_0000589a;\ncode_r0x00005896:\n  currentInputByte = currentByte + 1;\n  if (*currentByte == 0x25) {\nLAB_0000589a:\n    result = (int)currentByte - (int)inputBuffer;\n    if (result != 0) {\n      processResult = process_data_000057d2(inputData,parameters,inputBuffer,result);\n      if (processResult == -1) {\nLAB_00005a06:\n        if ((-1 < (int)(parameters[0x19] << 0x1f)) &&\n           (-1 < (int)((uint)*(ushort *)(parameters + 3) << 0x16))) {\n          FUNC_000045ec(parameters[0x16]);\n        }\n        if ((int)((uint)*(ushort *)(parameters + 3) << 0x19) < 0) {\n          return -1;\n        }\n        return totalOutputSize;\n      }\n      totalOutputSize = totalOutputSize + result;\n    }\n    if (*currentByte == 0) goto LAB_00005a06;\n    starCount = -1;\n    unusedStackVar = 0;\n    flags = 0;\n    currentOutputOffset = 0;\n    constant3 = 0;\n    unusedLocalVar = 0;\n    currentInputByte = currentByte + 1;\n    while( true ) {\n      currentByte = currentInputByte + 1;\n      result = find_byte_sequence_00006010(\"#-0+ \",*currentInputByte,5);\n      if (result == 0) break;\n      flags = 1 << (result - 0x7bfcU & 0xff) | flags;\n      currentInputByte = currentByte;\n    }\n    if ((int)(flags << 0x1b) < 0) {\n      constant3 = 0x20;\n    }\n    if ((int)(flags << 0x1c) < 0) {\n      constant3 = 0x2b;\n    }\n    if (*currentInputByte == 0x2a) {\n      currentOutputIndex = outputIndicesModified + 1;\n      currentOutputOffset = *outputIndicesModified;\n      outputIndicesModified = currentOutputIndex;\n      if (currentOutputOffset < 0) {\n        currentOutputOffset = -currentOutputOffset;\n        flags = flags | 2;\n      }\n    }\n    else {\n      isNumeric = false;\n      result = currentOutputOffset;\n      currentByte = currentInputByte;\n      while( true ) {\n        if (9 < *currentByte - 0x30) break;\n        result = result * 10 + (*currentByte - 0x30);\n        isNumeric = true;\n        currentByte = currentByte + 1;\n      }\n      if (isNumeric) {\n        currentOutputOffset = result;\n      }\n    }\n    if (*currentByte == 0x2e) {\n      if (currentByte[1] == 0x2a) {\n        starCount = *outputIndicesModified;\n        if (starCount < 0) {\n          starCount = -1;\n        }\n        currentByte = currentByte + 2;\n        outputIndicesModified = outputIndicesModified + 1;\n      }\n      else {\n        isNumeric = false;\n        starCount = 0;\n        result = 0;\n        while( true ) {\n          currentByte = currentByte + 1;\n          if (9 < *currentByte - 0x30) break;\n          result = result * 10 + (*currentByte - 0x30);\n          isNumeric = true;\n        }\n        if (isNumeric) {\n          starCount = result;\n        }\n      }\n    }\n    result = find_byte_sequence_00006010(&DAT_00007c02,*currentByte,3);\n    if (result != 0) {\n      flags = flags | 0x40 << (result - 0x7c02U & 0xff);\n      currentByte = currentByte + 1;\n    }\n    inputBuffer = currentByte + 1;\n    currentOutputByte = *currentByte;\n    result = find_byte_sequence_00006010(\"efgEFG\",currentOutputByte,6);\n    if (result == 0) {\n      reverseResult = reverse_and_improve_00005b34(inputData,&flags,parameters,0x57d3,&outputIndicesModified);\n      if (reverseResult == -1) goto LAB_00005a06;\n    }\n    else {\n      outputIndicesModified = (int *)(((int)outputIndicesModified + 7U & 0xfffffff8) + 8);\n    }\n    totalOutputSize = totalOutputSize + reverseResult;\n    currentInputByte = inputBuffer;\n  }\n  goto LAB_0000588e;\n}\n\n",
            "renaming": {
                "FUN_000057f8": "process_data_000057f8",
                "param_1": "inputData",
                "param_2": "parameters",
                "param_3": "inputBuffer",
                "param_4": "outputIndices",
                "iVar1": "result",
                "iVar2": "processResult",
                "piVar3": "currentOutputIndex",
                "bVar4": "isNumeric",
                "pbVar5": "currentByte",
                "unaff_r7": "reverseResult",
                "pbVar6": "currentInputByte",
                "local_8c": "outputIndicesModified",
                "local_88": "flags",
                "local_84": "starCount",
                "uStack_80": "unusedStackVar",
                "local_7c": "currentOutputOffset",
                "local_74": "totalOutputSize",
                "local_70": "currentOutputByte",
                "local_6f": "constant1",
                "local_6e": "constant2",
                "local_45": "constant3",
                "local_30": "unusedLocalVar"
            },
            "calling": [
                "FUN_00004c84"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_000057d2",
                "FUN_00005b34",
                "FUN_000054a8",
                "FUN_000045ec",
                "FUN_00006010",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005a58": {
            "entrypoint": "0x00005a58",
            "current_name": "calculate_new_size_00005a58",
            "code": "\nundefined4\ncalculateNewSize_00005a58(undefined4 inputValue,uint *array,uint *newSize,undefined4 param_4,code *functionToCall)\n\n{\n  int iterationCount;\n  undefined4 returnValue;\n  int temporaryVariable1;\n  uint temporaryVariable2;\n  uint temporaryVariable3;\n  bool isConditionMet;\n  \n  temporaryVariable2 = array[4];\n  if ((int)array[4] < (int)array[2]) {\n    temporaryVariable2 = array[2];\n  }\n  *newSize = temporaryVariable2;\n  if (*(char *)((int)array + 0x43) != '\\0') {\n    *newSize = temporaryVariable2 + 1;\n  }\n  if ((int)(*array << 0x1a) < 0) {\n    *newSize = *newSize + 2;\n  }\n  if ((*array & 6) == 0) {\n    for (iterationCount = 0; iterationCount < (int)(array[3] - *newSize); iterationCount = iterationCount + 1) {\n      temporaryVariable1 = (*functionToCall)(inputValue,param_4,(int)array + 0x19,1);\n      if (temporaryVariable1 == -1) goto LAB_00005afc;\n    }\n  }\n  temporaryVariable2 = (uint)*(byte *)((int)array + 0x43);\n  if (temporaryVariable2 != 0) {\n    temporaryVariable2 = 1;\n  }\n  if ((int)(*array << 0x1a) < 0) {\n    *(undefined *)((int)array + temporaryVariable2 + 0x43) = 0x30;\n    *(undefined *)((int)array + temporaryVariable2 + 0x44) = *(undefined *)((int)array + 0x45);\n    temporaryVariable2 = temporaryVariable2 + 2;\n  }\n  iterationCount = (*functionToCall)(inputValue,param_4,(int)array + 0x43,temporaryVariable2);\n  if (iterationCount == -1) {\nLAB_00005afc:\n    returnValue = 0xffffffff;\n  }\n  else {\n    temporaryVariable2 = array[3];\n    isConditionMet = (*array & 6) == 4;\n    if (isConditionMet) {\n      temporaryVariable2 = temporaryVariable2 - *newSize;\n    }\n    if (isConditionMet) {\n      temporaryVariable2 = temporaryVariable2 & ~((int)temporaryVariable2 >> 0x1f);\n    }\n    else {\n      temporaryVariable2 = 0;\n    }\n    if ((int)array[4] < (int)array[2]) {\n      temporaryVariable2 = temporaryVariable2 + (array[2] - array[4]);\n    }\n    for (temporaryVariable3 = 0; temporaryVariable2 != temporaryVariable3; temporaryVariable3 = temporaryVariable3 + 1) {\n      iterationCount = (*functionToCall)(inputValue,param_4,(int)array + 0x1a,1);\n      if (iterationCount == -1) goto LAB_00005afc;\n    }\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00005a58": "calculate_new_size_00005a58",
                "param_1": "inputValue",
                "param_2": "array",
                "param_3": "newSize",
                "param_5": "functionToCall",
                "iVar1": "iterationCount",
                "uVar2": "returnValue",
                "iVar3": "temporaryVariable1",
                "uVar4": "temporaryVariable2",
                "uVar5": "temporaryVariable3",
                "bVar6": "isConditionMet"
            },
            "calling": [
                "FUN_00005b34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005b34": {
            "entrypoint": "0x00005b34",
            "current_name": "reverse_and_improve_00005b34",
            "code": "\ncode * reverseAndImprove_00005b34(undefined4 input,uint *array,undefined4 param,code *callback,uint **pointer\n                   )\n\n{\n  bool isGreater;\n  byte byteVal;\n  int result;\n  code *callbackResult;\n  char *hexChars;\n  int callbackStatus;\n  char *pointerChars;\n  uint num;\n  uint *pointerArray;\n  uint base;\n  uint **ppuVar11;\n  char **ppcVar12;\n  uint length;\n  char *output;\n  code *callbackFunction;\n  \n  byteVal = *(byte *)(array + 6);\n  pointerChars = (char *)((int)array + 0x43);\n  callbackFunction = callback;\n  if (0x78 < byteVal) {\nswitchD_00005b70_caseD_65:\n    *(byte *)((int)array + 0x42) = byteVal;\nLAB_00005bdc:\n    pointerChars = (char *)((int)array + 0x42);\n    num = 1;\nLAB_00005d28:\n    array[4] = num;\n    *(undefined *)((int)array + 0x43) = 0;\n    goto LAB_00005c84;\n  }\n  if (byteVal < 99) {\n    if (byteVal == 0) goto LAB_00005d06;\n    if (byteVal == 0x58) {\n      hexChars = \"0123456789ABCDEF\";\n      *(undefined *)((int)array + 0x45) = 0x58;\n      goto LAB_00005ca8;\n    }\n    goto switchD_00005b70_caseD_65;\n  }\n  switch(byteVal) {\n  case 99:\n    num = **pointer;\n    *pointer = *pointer + 1;\n    *(char *)((int)array + 0x42) = (char)num;\n    goto LAB_00005bdc;\n  case 100:\n  case 0x69:\n    base = *array;\n    pointerArray = *pointer;\n    if ((int)(base << 0x18) < 0) {\n      num = *pointerArray;\n      *pointer = pointerArray + 1;\n    }\n    else {\n      num = *pointerArray;\n      *pointer = pointerArray + 1;\n      if ((base & 0x40) != 0) {\n        num = (uint)(short)num;\n      }\n    }\n    if ((int)num < 0) {\n      num = -num;\n      *(undefined *)((int)array + 0x43) = 0x2d;\n    }\n    hexChars = \"0123456789ABCDEF\";\n    base = 10;\n    goto LAB_00005c36;\n  default:\n    goto switchD_00005b70_caseD_65;\n  case 0x6e:\n    ppuVar11 = (uint **)*pointer;\n    base = *array;\n    num = array[5];\n    *pointer = (uint *)(ppuVar11 + 1);\n    pointerArray = *ppuVar11;\n    if (((int)(base << 0x18) < 0) || (-1 < (int)(base << 0x19))) {\n      *pointerArray = num;\n    }\n    else {\n      *(short *)pointerArray = (short)num;\n    }\nLAB_00005d06:\n    array[4] = 0;\n    goto LAB_00005c84;\n  case 0x6f:\n  case 0x75:\n    pointerArray = *pointer;\n    num = *array;\n    *pointer = pointerArray + 1;\n    if (((int)(num << 0x18) < 0) || (-1 < (int)(num << 0x19))) {\n      num = *pointerArray;\n    }\n    else {\n      num = (uint)*(ushort *)pointerArray;\n    }\n    hexChars = \"0123456789ABCDEF\";\n    if (byteVal == 0x6f) {\n      base = 8;\n    }\n    else {\n      base = 10;\n    }\n    break;\n  case 0x70:\n    *array = *array | 0x20;\n  case 0x78:\n    hexChars = \"0123456789abcdef\";\n    *(undefined *)((int)array + 0x45) = 0x78;\nLAB_00005ca8:\n    base = *array;\n    num = **pointer;\n    *pointer = *pointer + 1;\n    if ((-1 < (int)(base << 0x18)) && ((int)(base << 0x19) < 0)) {\n      num = num & 0xffff;\n    }\n    if ((int)(base << 0x1f) < 0) {\n      *array = base | 0x20;\n    }\n    if (num == 0) {\n      *array = *array & 0xffffffdf;\n    }\n    base = 0x10;\n    break;\n  case 0x73:\n    ppcVar12 = (char **)*pointer;\n    *pointer = (uint *)(ppcVar12 + 1);\n    pointerChars = *ppcVar12;\n    result = find_byte_sequence_00006010(pointerChars,0,array[1],ppcVar12,input,array,param);\n    if (result != 0) {\n      array[1] = result - (int)pointerChars;\n    }\n    num = array[1];\n    goto LAB_00005d28;\n  }\n  *(undefined *)((int)array + 0x43) = 0;\nLAB_00005c36:\n  length = array[1];\n  array[2] = length;\n  if (-1 < (int)length) {\n    *array = *array & 0xfffffffb;\n  }\n  output = pointerChars;\n  if ((num != 0) || (length != 0)) {\n    do {\n      output = output + -1;\n      *output = hexChars[num - base * (num / base)];\n      isGreater = base <= num;\n      num = num / base;\n    } while (isGreater);\n  }\n  if (((base == 8) && ((int)(*array << 0x1f) < 0)) && ((int)array[1] <= (int)array[4])) {\n    output[-1] = '0';\n    output = output + -1;\n  }\n  array[4] = (int)pointerChars - (int)output;\n  pointerChars = output;\nLAB_00005c84:\n  result = calculate_new_size_00005a58(input,array,&callbackFunction,param,callback);\n  if ((result == -1) || (result = (*callback)(input,param,pointerChars,array[4]), result == -1)) {\nLAB_00005c98:\n    callbackResult = (code *)0xffffffff;\n  }\n  else {\n    if ((int)(*array << 0x1e) < 0) {\n      for (result = 0; result < (int)(array[3] - (int)callbackFunction); result = result + 1) {\n        callbackStatus = (*callback)(input,param,(int)array + 0x19,1);\n        if (callbackStatus == -1) goto LAB_00005c98;\n      }\n    }\n    callbackResult = (code *)array[3];\n    if ((int)(code *)array[3] < (int)callbackFunction) {\n      callbackResult = callbackFunction;\n    }\n  }\n  return callbackResult;\n}\n\n",
            "renaming": {
                "FUN_00005b34": "reverse_and_improve_00005b34",
                "param_1": "input",
                "param_2": "array",
                "param_3": "param",
                "param_4": "callback",
                "param_5": "pointer",
                "bVar1": "isGreater",
                "bVar2": "byteVal",
                "iVar3": "result",
                "pcVar4": "callbackResult",
                "pcVar5": "hexChars",
                "iVar6": "callbackStatus",
                "pcVar7": "pointerChars",
                "uVar8": "num",
                "puVar9": "pointerArray",
                "uVar10": "base",
                "uVar13": "length",
                "pcVar14": "output",
                "local_24": "callbackFunction"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_00006010",
                "FUN_00005a58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e10": {
            "entrypoint": "0x00005e10",
            "current_name": "extract_data_00005e10",
            "code": "\nuint extractData_00005e10(int param,byte **dataPtr)\n\n{\n  int returnValue;\n  uint extractedValue;\n  byte *currentByte;\n  \n  if ((param != 0) && (*(int *)(param + 0x18) == 0)) {\n    initialize_and_extract_data_000042a4();\n  }\n  if (dataPtr == (byte **)&DAT_000079b8) {\n    dataPtr = *(byte ***)(param + 4);\n  }\n  else if (dataPtr == (byte **)&DAT_000079d8) {\n    dataPtr = *(byte ***)(param + 8);\n  }\n  else if (dataPtr == (byte **)&DAT_00007998) {\n    dataPtr = *(byte ***)(param + 0xc);\n  }\n  returnValue = process_data_00006768(param,dataPtr);\n  if (returnValue == 0) {\n    dataPtr[1] = dataPtr[1] + -1;\n    currentByte = *dataPtr;\n    *dataPtr = currentByte + 1;\n    extractedValue = (uint)*currentByte;\n  }\n  else {\n    extractedValue = 0xffffffff;\n  }\n  return extractedValue;\n}\n\n",
            "renaming": {
                "FUN_00005e10": "extract_data_00005e10",
                "param_1": "param",
                "param_2": "dataPtr",
                "iVar1": "returnValue",
                "uVar2": "extractedValue",
                "pbVar3": "currentByte"
            },
            "calling": [
                "FUN_00004418"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00006768"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e68": {
            "entrypoint": "0x00005e68",
            "current_name": "process_data_00005e68",
            "code": "\nvoid processData_00005e68(undefined4 inputParam,undefined4 paramSize,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 inputCopy;\n  undefined4 lastChar;\n  undefined2 localVar1;\n  undefined2 localVar2;\n  undefined4 localVar3;\n  undefined4 localVar4;\n  undefined *stringPtr;\n  undefined4 localVar5;\n  undefined4 localVar6;\n  undefined4 stackVar1;\n  undefined4 stackVar2;\n  \n  localVar1 = 0x204;\n  inputCopy = inputParam;\n  localVar3 = inputParam;\n  stackVar1 = param3;\n  stackVar2 = param4;\n  lastChar = find_last_character_00005ecc();\n  stringPtr = &LAB_00004dea_1;\n  localVar5 = 0;\n  localVar6 = 0;\n  localVar2 = 0xffff;\n  localVar4 = lastChar;\n  process_data_000061cc(Elf32_Rel_ARRAY_1fff0200[16].r_offset,&inputCopy,paramSize,&stackVar1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005e68": "process_data_00005e68",
                "param_1": "inputParam",
                "param_2": "paramSize",
                "param_3": "param3",
                "param_4": "param4",
                "local_80": "inputCopy",
                "local_7c": "lastChar",
                "local_74": "localVar1",
                "local_72": "localVar2",
                "local_70": "localVar3",
                "local_6c": "localVar4",
                "local_5c": "stringPtr",
                "local_4c": "localVar5",
                "local_38": "localVar6",
                "uStack_8": "stackVar1",
                "uStack_4": "stackVar2"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_000061cc",
                "FUN_00005ecc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ebc": {
            "entrypoint": "0x00005ebc",
            "current_name": "copy_string_00005ebc",
            "code": "\nvoid copyString_00005ebc(char *destination,char *source)\n\n{\n  char currentChar;\n  \n  do {\n    currentChar = *source;\n    *destination = currentChar;\n    source = source + 1;\n    destination = destination + 1;\n  } while (currentChar != '\\0');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ebc": "copy_string_00005ebc",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "currentChar"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ecc": {
            "entrypoint": "0x00005ecc",
            "current_name": "find_last_character_00005ecc",
            "code": "\nchar * find_last_character_00005ecc(char *input_string)\n\n{\n  char current_character;\n  char *next_character;\n  char *current_position;\n  \n  current_position = input_string;\n  do {\n    next_character = current_position + 1;\n    current_character = *current_position;\n    current_position = next_character;\n  } while (current_character != '\\0');\n  return next_character + (-1 - (int)input_string);\n}\n\n",
            "renaming": {
                "FUN_00005ecc": "find_last_character_00005ecc",
                "param_1": "input_string",
                "cVar1": "current_character",
                "pcVar2": "next_character",
                "pcVar3": "current_position"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00005e68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005edc": {
            "entrypoint": "0x00005edc",
            "current_name": "convert_string_to_int_00005edc",
            "code": "\nuint convertStringToInt_00005edc(undefined4 *output,byte *input,byte **remainingString,uint base)\n\n{\n  uint result;\n  uint currentChar;\n  byte isNegative;\n  int isValid;\n  uint digit;\n  uint maxValue;\n  byte *currentPtr;\n  byte *nextPtr;\n  \n  nextPtr = input;\n  do {\n    currentPtr = nextPtr;\n    nextPtr = currentPtr + 1;\n    currentChar = (uint)*currentPtr;\n    isNegative = (&DAT_00007a99)[currentChar] & 8;\n  } while (((&DAT_00007a99)[currentChar] & 8) != 0);\n  if (currentChar == 0x2d) {\n    currentChar = (uint)*nextPtr;\n    isNegative = 1;\n    nextPtr = currentPtr + 2;\n  }\n  else if (currentChar == 0x2b) {\n    currentChar = (uint)*nextPtr;\n    nextPtr = currentPtr + 2;\n  }\n  if (base == 0) {\n    if (currentChar != 0x30) {\n      base = 10;\n      goto LAB_00005f26;\n    }\n  }\n  else if ((base != 0x10) || (currentChar != 0x30)) goto LAB_00005f26;\n  if ((*nextPtr & 0xdf) == 0x58) {\n    currentChar = (uint)nextPtr[1];\n    base = 0x10;\n    nextPtr = nextPtr + 2;\n  }\n  else {\n    currentChar = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00005f26:\n  isValid = 0;\n  maxValue = 0xffffffff / base;\n  result = 0;\n  do {\n    digit = currentChar - 0x30;\n    if (9 < digit) {\n      if (currentChar - 0x41 < 0x1a) {\n        digit = currentChar - 0x37;\n      }\n      else {\n        if (0x19 < currentChar - 0x61) break;\n        digit = currentChar - 0x57;\n      }\n    }\n    if ((int)base <= (int)digit) break;\n    if (((isValid < 0) || (maxValue < result)) ||\n       ((maxValue == result && ((int)~(base * maxValue) < (int)digit)))) {\n      isValid = -1;\n    }\n    else {\n      result = result * base + digit;\n      isValid = 1;\n    }\n    currentChar = (uint)*nextPtr;\n    nextPtr = nextPtr + 1;\n  } while( true );\n  if (isValid < 0) {\n    *output = 0x22;\n    result = 0xffffffff;\n    if (remainingString == (byte **)0x0) {\n      return 0xffffffff;\n    }\n  }\n  else {\n    if (isNegative != 0) {\n      result = -result;\n    }\n    if (remainingString == (byte **)0x0) {\n      return result;\n    }\n    if (isValid == 0) goto LAB_00005fb8;\n  }\n  input = nextPtr + -1;\nLAB_00005fb8:\n  *remainingString = input;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00005edc": "convert_string_to_int_00005edc",
                "param_1": "output",
                "param_2": "input",
                "param_3": "remainingString",
                "param_4": "base",
                "uVar1": "result",
                "uVar2": "currentChar",
                "bVar3": "isNegative",
                "iVar4": "isValid",
                "uVar5": "digit",
                "uVar6": "maxValue",
                "pbVar7": "currentPtr",
                "pbVar8": "nextPtr"
            },
            "calling": [
                "FUN_00005fd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fd8": {
            "entrypoint": "0x00005fd8",
            "current_name": "convert_rel_offset_to_int_00005fd8",
            "code": "\nvoid convertRelOffsetToInt_00005fd8(undefined4 result,undefined4 value1,undefined4 value2)\n\n{\n  convert_string_to_int_00005edc(Elf32_Rel_ARRAY_1fff0200[16].r_offset,result,value1,value2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fd8": "convert_rel_offset_to_int_00005fd8",
                "param_1": "result",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00005edc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fec": {
            "entrypoint": "0x00005fec",
            "current_name": "initialize_memory_00005fec",
            "code": "\nvoid initializeMemory_00005fec(void)\n\n{\n  FUNC_000045e8(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fec": "initialize_memory_00005fec"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ff8": {
            "entrypoint": "0x00005ff8",
            "current_name": "execute_important_function_00005ff8",
            "code": "\nvoid executeImportantFunction_00005ff8(void)\n\n{\n  FUNC_000045ec(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ff8": "execute_important_function_00005ff8"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006010": {
            "entrypoint": "0x00006010",
            "current_name": "find_byte_sequence_00006010",
            "code": "\nbyte * find_byte_sequence_00006010(uint *input_data,uint byte_to_find,uint data_length)\n\n{\n  byte current_byte;\n  char is_zero_0;\n  char is_zero_8;\n  char is_zero_16;\n  char is_zero_24;\n  byte *current_position;\n  uint *current_data;\n  byte *result;\n  uint unaligned_bytes;\n  uint aligned_data_length;\n  uint temp_0;\n  uint temp_1;\n  bool is_nonzero_0;\n  bool is_nonzero_8;\n  bool is_nonzero_16;\n  bool is_nonzero_24;\n  \n  byte_to_find = byte_to_find & 0xff;\n  if ((int)data_length < 0x10) {\njoined_r0x00006070:\n    do {\n      if (data_length == 0) {\n        return (byte *)0x0;\n      }\n      current_data = (uint *)((int)input_data + 1);\n      current_byte = *(byte *)input_data;\n      data_length = data_length - 1;\n      input_data = current_data;\n    } while (current_byte != byte_to_find);\n  }\n  else {\n    unaligned_bytes = (uint)input_data & 7;\n    while( true ) {\n      if (unaligned_bytes == 0) {\n        unaligned_bytes = byte_to_find | byte_to_find << 8;\n        unaligned_bytes = unaligned_bytes | unaligned_bytes << 0x10;\n        aligned_data_length = data_length & 0xfffffff8;\n        do {\n          current_data = input_data + 2;\n          aligned_data_length = aligned_data_length - 8;\n          temp_0 = *input_data ^ unaligned_bytes;\n          temp_1 = input_data[1] ^ unaligned_bytes;\n          is_zero_0 = -((char)temp_0 == '\\0');\n          is_zero_8 = -((char)(temp_0 >> 8) == '\\0');\n          is_zero_16 = -((char)(temp_0 >> 0x10) == '\\0');\n          is_zero_24 = -((char)(temp_0 >> 0x18) == '\\0');\n          temp_0 = CONCAT13(is_zero_24,CONCAT12(is_zero_16,CONCAT11(is_zero_8,is_zero_0)));\n          is_nonzero_0 = (char)temp_1 != '\\0';\n          is_nonzero_8 = (char)(temp_1 >> 8) != '\\0';\n          is_nonzero_16 = (char)(temp_1 >> 0x10) != '\\0';\n          is_nonzero_24 = (char)(temp_1 >> 0x18) != '\\0';\n          temp_1 = CONCAT13(is_nonzero_24 * is_zero_24 - !is_nonzero_24,\n                            CONCAT12(is_nonzero_16 * is_zero_16 - !is_nonzero_16,\n                                     CONCAT11(is_nonzero_8 * is_zero_8 - !is_nonzero_8,is_nonzero_0 * is_zero_0 - !is_nonzero_0)));\n          if (temp_1 != 0) {\n            if (temp_0 == 0) {\n              result = (byte *)((int)input_data + 5);\n              temp_0 = temp_1;\n            }\n            else {\n              result = (byte *)((int)input_data + 1);\n            }\n            if ((temp_0 & 1) == 0) {\n              is_nonzero_0 = (temp_0 & 0x100) == 0;\n              current_position = result + 1;\n              if (is_nonzero_0) {\n                is_nonzero_0 = (temp_0 & 0x18000) == 0;\n                current_position = result + 2;\n              }\n              result = current_position;\n              if (is_nonzero_0) {\n                result = result + 1;\n              }\n            }\n            return result + -1;\n          }\n          input_data = current_data;\n        } while (aligned_data_length != 0);\n        data_length = data_length & 7;\n        goto joined_r0x00006070;\n      }\n      current_data = (uint *)((int)input_data + 1);\n      data_length = data_length - 1;\n      if (*(byte *)input_data == byte_to_find) break;\n      unaligned_bytes = (uint)current_data & 7;\n      input_data = current_data;\n      if (data_length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)current_data + -1);\n}\n\n",
            "renaming": {
                "FUN_00006010": "find_byte_sequence_00006010",
                "param_1": "input_data",
                "param_2": "byte_to_find",
                "param_3": "data_length",
                "bVar1": "current_byte",
                "cVar2": "is_zero_0",
                "cVar3": "is_zero_8",
                "cVar4": "is_zero_16",
                "cVar5": "is_zero_24",
                "pbVar6": "current_position",
                "puVar7": "current_data",
                "pbVar8": "result",
                "uVar9": "unaligned_bytes",
                "uVar10": "aligned_data_length",
                "uVar11": "temp_0",
                "uVar12": "temp_1",
                "bVar13": "is_nonzero_0",
                "bVar14": "is_nonzero_8",
                "bVar15": "is_nonzero_16",
                "bVar16": "is_nonzero_24"
            },
            "calling": [
                "FUN_000061cc",
                "FUN_00005b34",
                "FUN_0000656c",
                "FUN_000057f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060b0": {
            "entrypoint": "0x000060b0",
            "current_name": "copy_and_shift_000060b0",
            "code": "\nvoid copyAndShift_000060b0(int dest,undefined *src,int size)\n\n{\n  undefined *srcPtr;\n  undefined *endPtr;\n  undefined *destPtr;\n  \n  endPtr = src + size;\n  destPtr = (undefined *)(dest + -1);\n  if (src != endPtr) {\n    do {\n      srcPtr = src + 1;\n      destPtr = destPtr + 1;\n      *destPtr = *src;\n      src = srcPtr;\n    } while (srcPtr != endPtr);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000060b0": "copy_and_shift_000060b0",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "srcPtr",
                "puVar2": "endPtr",
                "puVar3": "destPtr"
            },
            "calling": [
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060cc": {
            "entrypoint": "0x000060cc",
            "current_name": "resize_and_copy_data_000060cc",
            "code": "\nint resizeAndCopyData_000060cc(undefined4 inputData,int inputSize,uint requiredSize,undefined4 additionalParam)\n\n{\n  int result;\n  uint sum;\n  \n  if (inputSize != 0) {\n    if (requiredSize == 0) {\n      initialize_data_and_process_00004b34();\n      result = 0;\n    }\n    else {\n      sum = calculate_sum_00006964();\n      result = inputSize;\n      if ((sum < requiredSize) && (result = resize_memory_block_00004bd0(inputData,requiredSize), result != 0)) {\n        copy_and_shift_000060b0(result,inputSize,requiredSize);\n        initialize_data_and_process_00004b34(inputData,inputSize);\n      }\n    }\n    return result;\n  }\n  result = resize_memory_block_00004bd0(inputData,requiredSize,requiredSize,additionalParam);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000060cc": "resize_and_copy_data_000060cc",
                "param_1": "inputData",
                "param_2": "inputSize",
                "param_3": "requiredSize",
                "param_4": "additionalParam",
                "iVar1": "result",
                "uVar2": "sum"
            },
            "calling": [
                "FUN_000068f0"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_00006964",
                "FUN_00004b34",
                "FUN_000060b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006192": {
            "entrypoint": "0x00006192",
            "current_name": "initialize_and_process_data_00006192",
            "code": "\nundefined4 initialize_and_process_data_00006192(undefined4 input_param,undefined4 *data_array)\n\n{\n  if ((undefined4 *)ptr_to_data != (undefined4 *)0x0) {\n    if ((undefined4 *)ptr_to_data != data_array + 0x11) {\n      initialize_data();\n    }\n    data_array[1] = value;\n    ptr_to_data = 0;\n    if (value != 0) {\n      *data_array = data_value;\n      return 0;\n    }\n  }\n  *data_array = default_data;\n  data_array[1] = 0;\n  *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) | 0x20;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006192": "initialize_and_process_data_00006192",
                "param_1": "input_param",
                "param_2": "data_array",
                "param_2[0xd]": "ptr_to_data",
                "initialize_data_and_process_00004b34": "initialize_data",
                "param_2[0x10]": "value",
                "param_2[0xf]": "data_value",
                "param_2[4]": "default_data"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000061cc": {
            "entrypoint": "0x000061cc",
            "current_name": "process_data_000061cc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006482) */\n\nint processData_000061cc(undefined4 param1,byte **param2,byte *param3,int **param4)\n\n{\n  int result;\n  uint value;\n  byte *ptr;\n  uint byteVal;\n  int **local_ptr;\n  undefined stack_data [256];\n  uint flags;\n  undefined4 count;\n  uint var;\n  int returnValue;\n  int counter;\n  undefined *local_ptr2;\n  int type;\n  undefined *local_fn;\n  code *local_fn2;\n  \n  returnValue = 0;\n  counter = 0;\n  local_fn = &LAB_00006118_1;\n  local_fn2 = initialize_and_process_data_00006192 + 1;\n  local_ptr = param4;\n  local_ptr2 = stack_data;\nLAB_000061f6:\n  while( true ) {\n    while( true ) {\n      byteVal = (uint)*param3;\n      if (byteVal == 0) {\n        return returnValue;\n      }\n      value = (byte)(&DAT_00007a99)[byteVal] & 8;\n      ptr = param3 + 1;\n      if (((&DAT_00007a99)[byteVal] & 8) == 0) break;\n      while (((param3 = ptr, 0 < (int)param2[1] ||\n              (result = (*local_fn2)(param1,param2), result == 0)) &&\n             ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0))) {\n        counter = counter + 1;\n        param2[1] = param2[1] + -1;\n        *param2 = *param2 + 1;\n      }\n    }\n    if (byteVal == 0x25) break;\nLAB_00006352:\n    if (((int)param2[1] < 1) && (result = (*local_fn2)(param1,param2), result != 0))\n    goto LAB_00006380;\n    if (**param2 != byteVal) {\n      return returnValue;\n    }\n    *param2 = *param2 + 1;\n    counter = counter + 1;\n    param2[1] = param2[1] + -1;\n    param3 = ptr;\n  }\n  var = value;\n  flags = value;\n  if (param3[1] == 0x2a) {\n    ptr = param3 + 2;\n    flags = 0x10;\n  }\n  while( true ) {\n    value = (uint)*ptr;\n    if (9 < value - 0x30) break;\n    ptr = ptr + 1;\n    var = (var * 10 + value) - 0x30;\n  }\n  result = find_byte_sequence_00006010(&DAT_00007c02,value,3);\n  if (result != 0) {\n    flags = 1 << (result - 0x7c02U & 0xff) | flags;\n    ptr = ptr + 1;\n  }\n  param3 = ptr + 1;\n  value = (uint)*ptr;\n  if (value < 0x79) {\n    if (0x57 < value) {\n      switch(value) {\n      default:\n        goto switchD_000062c0_caseD_59;\n      case 0x5b:\n        param3 = (byte *)decompress_data_0000687c(stack_data,param3);\n        flags = flags | 0x40;\n        type = 1;\n        break;\n      case 99:\n        flags = flags | 0x40;\n        type = 0;\n        break;\n      case 100:\n      case 0x75:\n        count = 10;\nLAB_000063a0:\n        if (value < 0x6f) {\n          type = 3;\n        }\n        else {\n          type = 4;\n        }\n        break;\n      case 0x65:\n      case 0x66:\n      case 0x67:\nswitchD_000062c0_caseD_65:\n        type = 5;\n        break;\n      case 0x69:\n        count = 0;\n        type = 3;\n        break;\n      case 0x6e:\n        if (-1 < (int)(flags << 0x1b)) {\n          if ((int)(flags << 0x1f) < 0) {\n            *(short *)*local_ptr = (short)counter;\n            local_ptr = local_ptr + 1;\n          }\n          else {\n            **local_ptr = counter;\n            local_ptr = local_ptr + 1;\n          }\n        }\n        goto LAB_000061f6;\n      case 0x6f:\n        count = 8;\n        type = 4;\n        break;\n      case 0x70:\n        flags = flags | 0x20;\n      case 0x58:\n      case 0x78:\n        flags = flags | 0x200;\n        count = 0x10;\n        goto LAB_000063a0;\n      case 0x73:\n        type = 2;\n      }\nLAB_000063ac:\n      if (((int)param2[1] < 1) && (result = (*local_fn2)(param1,param2), result != 0))\n      goto LAB_00006380;\n      if (-1 < (int)(flags << 0x19)) {\n        while ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0) {\n          counter = counter + 1;\n          ptr = param2[1];\n          param2[1] = ptr + -1;\n          if ((int)(ptr + -1) < 1) {\n            result = (*local_fn2)(param1,param2);\n            if (result != 0) goto LAB_00006380;\n          }\n          else {\n            *param2 = *param2 + 1;\n          }\n        }\n      }\n      if (type < 3) {\n        result = process_data_000064bc(param1,&flags,param2,&local_ptr);\n      }\n      else {\n        if (4 < type) goto LAB_000061f6;\n        result = parse_and_decompress_data_0000656c(param1,&flags,param2,&local_ptr);\n      }\n      if (result == 1) {\n        return returnValue;\n      }\n      if (result == 2) {\nLAB_00006380:\n        if (returnValue == 0) {\nLAB_00006388:\n          returnValue = -1;\n        }\n        else if ((*(ushort *)(param2 + 3) & 0x40) != 0) {\n          returnValue = -1;\n        }\n        return returnValue;\n      }\n      goto LAB_000061f6;\n    }\n    ptr = param3;\n    if (value == 0x25) goto LAB_00006352;\n    if (value < 0x26) {\n      if (value != 0) goto switchD_000062c0_caseD_59;\n      goto LAB_00006388;\n    }\n    if (value - 0x45 < 3) goto switchD_000062c0_caseD_65;\n  }\nswitchD_000062c0_caseD_59:\n  type = 3;\n  count = 10;\n  goto LAB_000063ac;\n}\n\n",
            "renaming": {
                "FUN_000061cc": "process_data_000061cc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "value",
                "pbVar3": "ptr",
                "uVar4": "byteVal",
                "local_2b0": "local_ptr",
                "auStack_2ac": "stack_data",
                "local_1ac": "flags",
                "local_1a8": "count",
                "local_1a4": "var",
                "local_1a0": "returnValue",
                "local_19c": "counter",
                "local_198": "local_ptr2",
                "local_194": "type",
                "local_30": "local_fn",
                "local_2c": "local_fn2"
            },
            "calling": [
                "FUN_00005e68"
            ],
            "called": [
                "FUN_0000687c",
                "FUN_00006192",
                "FUN_000064bc",
                "FUN_00006010",
                "FUN_0000656c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000064bc": {
            "entrypoint": "0x000064bc",
            "current_name": "process_data_000064bc",
            "code": "\nundefined4 processData_000064bc(undefined4 input,uint *flags,byte **data,undefined4 *result)\n\n{\n  int retVal;\n  uint temp;\n  byte **tempPtr;\n  byte *tempBytePtr;\n  byte *bytePtr;\n  byte *byteVar;\n  int counter;\n  \n  if (flags[2] == 0) {\n    if (flags[6] == 0) {\n      temp = 1;\n    }\n    else {\n      temp = 0xffffffff;\n    }\n    flags[2] = temp;\n  }\n  if (-1 < (int)(*flags << 0x1b)) {\n    tempPtr = (byte **)*result;\n    *result = tempPtr + 1;\n    bytePtr = *tempPtr;\n  }\n  counter = 0;\n  do {\n    temp = flags[6];\n    if (temp != 0) {\n      if (temp == 1) {\n        if (*(char *)(flags[5] + (uint)**data) == '\\0') {\n          if (counter == 0) {\n            return 1;\n          }\nLAB_0000654a:\n          if (((*flags & 0x10) == 0) && (flags[3] = flags[3] + 1, flags[6] != 0)) {\n            *bytePtr = 0;\n          }\n          flags[4] = counter + flags[4];\n          return 0;\n        }\n      }\n      else if ((temp != 2) || ((int)((uint)(byte)(&DAT_00007a99)[**data] << 0x1c) < 0))\n      goto LAB_0000654a;\n    }\n    byteVar = bytePtr;\n    if (-1 < (int)(*flags << 0x1b)) {\n      byteVar = bytePtr + 1;\n      *bytePtr = **data;\n    }\n    tempBytePtr = data[1];\n    *data = *data + 1;\n    temp = flags[2] - 1;\n    data[1] = tempBytePtr + -1;\n    counter = counter + 1;\n    flags[2] = temp;\n    bytePtr = byteVar;\n    if ((temp == 0) ||\n       (((int)(tempBytePtr + -1) < 1 &&\n        (retVal = (*(code *)flags[0x60])(input,data,temp,(code *)flags[0x60],result),\n        retVal != 0)))) goto LAB_0000654a;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000064bc": "process_data_000064bc",
                "param_1": "input",
                "param_2": "flags",
                "param_3": "data",
                "param_4": "result",
                "iVar1": "retVal",
                "uVar2": "temp",
                "ppbVar3": "tempPtr",
                "pbVar4": "tempBytePtr",
                "unaff_r6": "bytePtr",
                "pbVar5": "byteVar",
                "iVar6": "counter"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000656c": {
            "entrypoint": "0x0000656c",
            "current_name": "parse_and_decompress_data_0000656c",
            "code": "\nundefined4 parseAndDecompressData_0000656c(undefined4 param1,uint *param2,byte **param3,undefined4 *param4)\n\n{\n  int index;\n  undefined4 result;\n  code *decompressFunc;\n  uint count;\n  byte *bytePtr;\n  uint var6;\n  undefined4 *outputParam;\n  uint *tempParam1;\n  uint *tempParam2;\n  uint *tempParam3;\n  int unAffectedVar;\n  int tempVar;\n  undefined *sequenceArray [4];\n  \n  sequenceArray[0] = &DAT_00007c2f;\n  sequenceArray[1] = &DAT_00007c32;\n  sequenceArray[2] = &DAT_00007c35;\n  decompressFunc = (code *)&UNK_00004f81;\n  if (param2[6] != 3) {\n    decompressFunc = (code *)&UNK_00005fd5;\n  }\n  var6 = param2[2];\n  count = var6 - 1;\n  if (0x15c < count) {\n    unAffectedVar = var6 - 0x15d;\n    var6 = 0x15d;\n  }\n  if (0x15c < count) {\n    param2[2] = var6;\n  }\n  tempParam3 = param2 + 7;\n  if (count < 0x15d) {\n    unAffectedVar = 0;\n  }\n  *param2 = *param2 | 0xd00;\n  tempVar = 0;\n  tempParam2 = tempParam3;\n  do {\n    index = find_byte_sequence_00006010(sequenceArray[tempVar],**param3,2);\n    if (index != 0) {\n      if (tempVar == 1) {\n        if (param2[1] == 0) {\n          param2[1] = 8;\n          *param2 = *param2 | 0x200;\n        }\n        count = *param2 & 0xfffffaff;\nLAB_000065f4:\n        *param2 = count;\n      }\n      else if (tempVar == 2) {\n        if ((*param2 & 0x600) != 0x200) goto LAB_00006624;\n        param2[1] = 0x10;\n        count = *param2 | 0x100;\n        goto LAB_000065f4;\n      }\n      count = param2[2];\n      param2[2] = count - 1;\n      if (count != 0) {\n        bytePtr = *param3;\n        *param3 = bytePtr + 1;\n        tempParam1 = (uint *)((int)tempParam2 + 1);\n        *(byte *)tempParam2 = *bytePtr;\n        bytePtr = param3[1];\n        param3[1] = bytePtr + -1;\n        tempParam2 = tempParam1;\n        if (((int)(bytePtr + -1) < 1) &&\n           (index = (*(code *)param2[0x60])(param1,param3), index != 0)) {\n          tempVar = 0;\n          goto LAB_000066ca;\n        }\n      }\n    }\nLAB_00006624:\n    tempVar = tempVar + 1;\n  } while (tempVar != 3);\n  if (param2[1] == 0) {\n    param2[1] = 10;\n  }\n  decompress_data_0000687c(param2[5],\"01234567]\" + (8 - param2[1]));\n  tempVar = 0;\n  while( true ) {\n    tempParam1 = tempParam2;\n    if (param2[2] == 0) break;\n    bytePtr = *param3;\n    count = (uint)*bytePtr;\n    if (*(char *)(param2[5] + count) == '\\0') break;\n    if ((count == 0x30) && ((int)(*param2 << 0x14) < 0)) {\n      tempVar = tempVar + 1;\n      if (unAffectedVar != 0) {\n        unAffectedVar = unAffectedVar + -1;\n        param2[2] = param2[2] + 1;\n      }\n    }\n    else {\n      *param2 = *param2 & 0xfffff6ff;\n      tempParam1 = (uint *)((int)tempParam2 + 1);\n      *(byte *)tempParam2 = *bytePtr;\n    }\n    bytePtr = param3[1];\n    param3[1] = bytePtr + -1;\n    if ((int)(bytePtr + -1) < 1) {\n      index = (*(code *)param2[0x60])(param1,param3);\n      if (index != 0) break;\n    }\n    else {\n      *param3 = *param3 + 1;\n    }\n    param2[2] = param2[2] - 1;\n    tempParam2 = tempParam1;\n  }\nLAB_000066ca:\n  if ((int)(*param2 << 0x17) < 0) {\n    if (tempParam3 < tempParam1) {\n      (*(code *)param2[0x5f])(param1,*(byte *)((int)tempParam1 + -1),param3);\n      tempParam1 = (uint *)((int)tempParam1 + -1);\n    }\n    if (tempParam1 == tempParam3) {\n      return 1;\n    }\n  }\n  if ((*param2 & 0x10) == 0) {\n    *(byte *)tempParam1 = 0;\n    result = (*decompressFunc)(param1,tempParam3,0,param2[1]);\n    outputParam = (undefined4 *)*param4;\n    count = *param2;\n    *param4 = outputParam + 1;\n    outputParam = (undefined4 *)*outputParam;\n    if ((count & 0x20) == 0) {\n      if ((int)(count << 0x1f) < 0) {\n        *(short *)outputParam = (short)result;\n      }\n      else {\n        *outputParam = result;\n      }\n    }\n    else {\n      *outputParam = result;\n    }\n    param2[3] = param2[3] + 1;\n  }\n  param2[4] = (uint)((int)tempParam1 + param2[4] + (tempVar - (int)tempParam3));\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000656c": "parse_and_decompress_data_0000656c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "index",
                "uVar2": "result",
                "pcVar3": "decompressFunc",
                "uVar4": "count",
                "pbVar5": "bytePtr",
                "uVar6": "var6",
                "puVar7": "outputParam",
                "puVar8": "tempParam1",
                "puVar9": "tempParam2",
                "puVar10": "tempParam3",
                "unaff_r9": "unAffectedVar",
                "iVar11": "tempVar",
                "local_34": "sequenceArray"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_0000687c",
                "FUN_00006010"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006768": {
            "entrypoint": "0x00006768",
            "current_name": "process_data_00006768",
            "code": "\nundefined4\nprocessData_00006768(undefined4 *data,undefined4 *info,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 var1;\n  int var2;\n  undefined4 var3;\n  ushort var4;\n  uint var5;\n  \n  if ((data != (undefined4 *)0x0) && (data[6] == 0)) {\n    initialize_and_extract_data_000042a4();\n  }\n  if (info == &DAT_000079b8) {\n    info = (undefined4 *)data[1];\n  }\n  else if (info == (undefined4 *)&DAT_000079d8) {\n    info = (undefined4 *)data[2];\n  }\n  else if (info == (undefined4 *)&DAT_00007998) {\n    info = (undefined4 *)data[3];\n  }\n  var4 = *(ushort *)(info + 3);\n  info[1] = 0;\n  var5 = (uint)*(ushort *)(info + 3);\n  if ((int)(var5 << 0x1a) < 0) {\n    return 0xffffffff;\n  }\n  if ((int)(var5 << 0x1d) < 0) {\n    if ((undefined4 *)info[0xd] != (undefined4 *)0x0) {\n      if ((undefined4 *)info[0xd] != info + 0x11) {\n        initialize_data_and_process_00004b34(data);\n      }\n      info[1] = info[0x10];\n      info[0xd] = 0;\n      if (info[0x10] != 0) {\n        *info = info[0xf];\n        return 0;\n      }\n    }\n  }\n  else {\n    if (-1 < (int)(var5 << 0x1b)) {\n      *data = 9;\n      var4 = var4 | 0x40;\n      goto LAB_000067b8;\n    }\n    if ((int)(var5 << 0x1c) < 0) {\n      var2 = process_data_00004158(data,info,var5 << 0x1c,var5,param4);\n      if (var2 != 0) {\n        return 0xffffffff;\n      }\n      info[2] = 0;\n      *(ushort *)(info + 3) = *(ushort *)(info + 3) & 0xfff7;\n      info[6] = 0;\n    }\n    *(ushort *)(info + 3) = *(ushort *)(info + 3) | 4;\n  }\n  if (info[4] == 0) {\n    resize_and_set_flags_00005700(data,info);\n  }\n  var4 = *(ushort *)(info + 3);\n  var1 = *(undefined2 *)(info + 3);\n  if ((var4 & 3) != 0) {\n    *(undefined2 *)(info + 3) = 1;\n    process_data_000043a0(0x1fff0284,&LAB_00006754_1);\n    *(undefined2 *)(info + 3) = var1;\n    if ((var4 & 9) == 9) {\n      process_data_0000404c(data,info);\n    }\n  }\n  var3 = info[4];\n  *info = var3;\n  var2 = (*(code *)info[9])(data,info[8],var3,info[5]);\n  info[1] = var2;\n  if (0 < var2) {\n    return 0;\n  }\n  var4 = *(ushort *)(info + 3);\n  if (var2 != 0) {\n    var3 = 0;\n  }\n  else {\n    var4 = var4 | 0x20;\n  }\n  if (var2 != 0) {\n    info[1] = var3;\n    var4 = var4 | 0x40;\n  }\nLAB_000067b8:\n  *(ushort *)(info + 3) = var4;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006768": "process_data_00006768",
                "param_1": "data",
                "param_2": "info",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "var1",
                "iVar2": "var2",
                "uVar3": "var3",
                "uVar4": "var4",
                "uVar5": "var5"
            },
            "calling": [
                "FUN_00005e10"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_0000404c",
                "FUN_00004158",
                "FUN_000043a0",
                "FUN_00004b34",
                "FUN_00005700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000687c": {
            "entrypoint": "0x0000687c",
            "current_name": "decompress_data_0000687c",
            "code": "\nbyte * decompressData_0000687c(int dataLength,byte *compressedData)\n\n{\n  byte *result;\n  uint tempVar;\n  int index;\n  uint firstByte;\n  uint count;\n  uint secondByte;\n  bool isFirstByte5e;\n  \n  firstByte = (uint)*compressedData;\n  isFirstByte5e = firstByte == 0x5e;\n  if (isFirstByte5e) {\n    firstByte = (uint)compressedData[1];\n    compressedData = compressedData + 2;\n  }\n  else {\n    compressedData = compressedData + 1;\n  }\n  index = dataLength + -1;\n  do {\n    index = index + 1;\n    *(bool *)index = isFirstByte5e;\n  } while (index != dataLength + 0xff);\n  if (firstByte == 0) {\n    result = compressedData + -1;\n  }\n  else {\nLAB_000068aa:\n    do {\n      count = firstByte;\n      *(bool *)(dataLength + count) = !isFirstByte5e;\n      compressedData = compressedData + 1;\n      while( true ) {\n        firstByte = (uint)compressedData[-1];\n        if (firstByte != 0x2d) break;\n        secondByte = (uint)*compressedData;\n        if ((secondByte == 0x5d) || (tempVar = count, (int)secondByte < (int)count)) goto LAB_000068aa;\n        do {\n          tempVar = tempVar + 1;\n          *(bool *)(dataLength + tempVar) = !isFirstByte5e;\n        } while ((int)tempVar < (int)secondByte);\n        index = ~count + secondByte;\n        if ((int)secondByte <= (int)count) {\n          index = 0;\n        }\n        count = count + 1 + index;\n        compressedData = compressedData + 2;\n      }\n      result = compressedData;\n    } while ((firstByte != 0x5d) && (result = compressedData + -1, firstByte != 0));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0000687c": "decompress_data_0000687c",
                "param_1": "dataLength",
                "param_2": "compressedData",
                "pbVar1": "result",
                "uVar2": "tempVar",
                "iVar3": "index",
                "uVar4": "firstByte",
                "uVar5": "count",
                "uVar6": "secondByte",
                "bVar7": "isFirstByte5e"
            },
            "calling": [
                "FUN_000061cc",
                "FUN_0000656c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000068f0": {
            "entrypoint": "0x000068f0",
            "current_name": "resize_and_copy_data_or_initialize_buffer_000068f0",
            "code": "\nundefined4 resize_and_copy_data_or_initialize_buffer_000068f0(undefined4 input_data,int *buffer)\n\n{\n  int new_buffer;\n  int current_size;\n  \n  if ((int *)buffer[0xd] == buffer + 0x11) {\n    new_buffer = resize_memory_block(input_data,0x400);\n    if (new_buffer != 0) {\n      buffer[0xe] = 0x400;\n      buffer[0xd] = new_buffer;\n      *(undefined *)(new_buffer + 0x3ff) = *(undefined *)((int)buffer + 0x46);\n      *(undefined *)(new_buffer + 0x3fe) = *(undefined *)((int)buffer + 0x45);\n      *(undefined *)(new_buffer + 0x3fd) = *(undefined *)(buffer + 0x11);\n      *buffer = new_buffer + 0x3fd;\n      return 0;\n    }\n  }\n  else {\n    current_size = buffer[0xe];\n    new_buffer = resize_and_copy_data(input_data,(int *)buffer[0xd],current_size << 1);\n    if (new_buffer != 0) {\n      copy_and_shift(new_buffer + current_size,new_buffer,current_size);\n      buffer[0xd] = new_buffer;\n      buffer[0xe] = current_size << 1;\n      *buffer = new_buffer + current_size;\n      return 0;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000068f0": "resize_and_copy_data_or_initialize_buffer_000068f0",
                "param_1": "input_data",
                "param_2": "buffer",
                "iVar1": "new_buffer",
                "iVar2": "current_size",
                "resize_memory_block_00004bd0": "resize_memory_block",
                "resize_and_copy_data_000060cc": "resize_and_copy_data",
                "copy_and_shift_000060b0": "copy_and_shift"
            },
            "calling": [],
            "called": [
                "FUN_00004bd0",
                "FUN_000060cc",
                "FUN_000060b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006964": {
            "entrypoint": "0x00006964",
            "current_name": "calculate_sum_00006964",
            "code": "\nint calculateSum_00006964(undefined4 result,int arrayPtr)\n\n{\n  int sum;\n  \n  sum = *(int *)(arrayPtr + -4) + -4;\n  if (*(int *)(arrayPtr + -4) < 0) {\n    sum = sum + *(int *)(arrayPtr + sum);\n  }\n  return sum;\n}\n\n",
            "renaming": {
                "FUN_00006964": "calculate_sum_00006964",
                "param_1": "result",
                "param_2": "arrayPtr",
                "iVar1": "sum"
            },
            "calling": [
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006974": {
            "entrypoint": "0x00006974",
            "current_name": "divisible_remainder_00006974",
            "code": "\nundefined8 divisible_remainder_00006974(int dividend,int divisor,int quotient,int remainder)\n\n{\n  int abs_divisor;\n  undefined8 result;\n  undefined temp [8];\n  \n  if ((remainder == 0) && (quotient == 0)) {\n    if (divisor < 0) {\n      dividend = 0;\n      divisor = -0x80000000;\n    }\n    else if (divisor != 0 || dividend != 0) {\n      divisor = 0x7fffffff;\n      dividend = -1;\n    }\n    return CONCAT44(divisor,dividend);\n  }\n  if (divisor < 0) {\n    abs_divisor = -divisor - (uint)(dividend != 0);\n    if (remainder < 0) {\n      result = divisible_remainder_00006974_00006a14(-dividend,abs_divisor,-quotient,-remainder - (uint)(quotient != 0),temp);\n      return result;\n    }\n    result = divisible_remainder_00006974_00006a14(-dividend,abs_divisor,quotient,remainder,temp);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  if (remainder < 0) {\n    result = divisible_remainder_00006974_00006a14(dividend,divisor,-quotient,-remainder - (uint)(quotient != 0),temp);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  result = divisible_remainder_00006974_00006a14();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00006974": "divisible_remainder_00006974",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "iVar1": "abs_divisor",
                "uVar2": "result",
                "local_8": "temp"
            },
            "calling": [
                "FUN_0000443c"
            ],
            "called": [
                "FUN_00006a14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006a14": {
            "entrypoint": "0x00006a14",
            "current_name": "divisible_remainder_00006a14",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006ca0) */\n\nulonglong divisible_remainder_00006a14(uint dividend,uint dividend_upper,uint divisor,uint divisor_upper,uint *quotient_and_remainder)\n\n{\n  code *software_udf;\n  uint quotient;\n  int divisor_shift;\n  uint dividend_shift;\n  uint quotient_1;\n  uint quotient_2;\n  uint remainder;\n  uint carry;\n  uint quotient_temp;\n  uint divisor_upper_shift;\n  bool carry_flag;\n  ulonglong result;\n  \n  if (divisor_upper == 0) {\n    if (dividend_upper < divisor) {\n      divisor_shift = LZCOUNT(divisor);\n      quotient_2 = divisor;\n      if (divisor_shift != 0) {\n        quotient_2 = divisor << divisor_shift;\n        dividend_upper = dividend >> (0x20U - divisor_shift & 0xff) | dividend_upper << divisor_shift;\n        dividend = dividend << divisor_shift;\n      }\n      remainder = quotient_2 >> 0x10;\n      quotient_temp = dividend_upper / remainder;\n      dividend_shift = dividend >> 0x10 | (dividend_upper - remainder * quotient_temp) * 0x10000;\n      quotient = quotient_temp * (quotient_2 & 0xffff);\n      quotient_1 = quotient_temp;\n      if (dividend_shift <= quotient && quotient - dividend_shift != 0) {\n        carry_flag = CARRY4(quotient_2,dividend_shift);\n        dividend_shift = quotient_2 + dividend_shift;\n        quotient_1 = quotient_temp - 1;\n        if ((carry_flag == false) && (dividend_shift <= quotient && quotient - dividend_shift != 0)) {\n          quotient_1 = quotient_temp - 2;\n          dividend_shift = dividend_shift + quotient_2;\n        }\n      }\n      quotient_temp = (dividend_shift - quotient) / remainder;\n      remainder = dividend & 0xffff | ((dividend_shift - quotient) - remainder * quotient_temp) * 0x10000;\n      dividend_shift = quotient_temp * (quotient_2 & 0xffff);\n      quotient = quotient_temp;\n      if (remainder <= dividend_shift && dividend_shift - remainder != 0) {\n        carry_flag = CARRY4(quotient_2,remainder);\n        remainder = quotient_2 + remainder;\n        quotient = quotient_temp - 1;\n        if ((carry_flag == false) && (remainder <= dividend_shift && dividend_shift - remainder != 0)) {\n          quotient = quotient_temp - 2;\n          remainder = remainder + quotient_2;\n        }\n      }\n      remainder = remainder - dividend_shift;\n      quotient = quotient | quotient_1 << 0x10;\n      quotient_2 = 0;\n    }\n    else {\n      if (divisor == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        software_udf = (code *)software_udf(0xff,0x6abc);\n        result = (*software_udf)();\n        return result;\n      }\n      divisor_shift = LZCOUNT(divisor);\n      if (divisor_shift == 0) {\n        dividend_upper = dividend_upper - divisor;\n        divisor_upper_shift = divisor >> 0x10;\n        carry = divisor & 0xffff;\n        quotient_2 = 1;\n        quotient_1 = divisor;\n      }\n      else {\n        quotient_1 = divisor << divisor_shift;\n        divisor_upper_shift = quotient_1 >> 0x10;\n        quotient = dividend_upper >> (0x20U - divisor_shift & 0xff);\n        quotient_2 = dividend >> (0x20U - divisor_shift & 0xff) | dividend_upper << divisor_shift;\n        dividend_shift = quotient / divisor_upper_shift;\n        carry = quotient_1 & 0xffff;\n        quotient_temp = quotient_2 >> 0x10 | (quotient - divisor_upper_shift * dividend_shift) * 0x10000;\n        remainder = dividend_shift * carry;\n        dividend = dividend << divisor_shift;\n        quotient = dividend_shift;\n        if (quotient_temp <= remainder && remainder - quotient_temp != 0) {\n          carry_flag = CARRY4(quotient_1,quotient_temp);\n          quotient_temp = quotient_1 + quotient_temp;\n          quotient = dividend_shift - 1;\n          if ((carry_flag == false) && (quotient_temp <= remainder && remainder - quotient_temp != 0)) {\n            quotient = dividend_shift - 2;\n            quotient_temp = quotient_temp + quotient_1;\n          }\n        }\n        dividend_shift = (quotient_temp - remainder) / divisor_upper_shift;\n        dividend_upper = quotient_2 & 0xffff | ((quotient_temp - remainder) - divisor_upper_shift * dividend_shift) * 0x10000;\n        remainder = dividend_shift * carry;\n        quotient_2 = dividend_shift;\n        if (dividend_upper <= remainder && remainder - dividend_upper != 0) {\n          carry_flag = CARRY4(quotient_1,dividend_upper);\n          dividend_upper = quotient_1 + dividend_upper;\n          quotient_2 = dividend_shift - 1;\n          if ((carry_flag == false) && (dividend_upper <= remainder && remainder - dividend_upper != 0)) {\n            quotient_2 = dividend_shift - 2;\n            dividend_upper = dividend_upper + quotient_1;\n          }\n        }\n        dividend_upper = dividend_upper - remainder;\n        quotient_2 = quotient_2 | quotient << 0x10;\n      }\n      quotient_temp = dividend_upper / divisor_upper_shift;\n      remainder = dividend >> 0x10 | (dividend_upper - divisor_upper_shift * quotient_temp) * 0x10000;\n      quotient = carry * quotient_temp;\n      dividend_shift = quotient_temp;\n      if (remainder <= quotient && quotient - remainder != 0) {\n        carry_flag = CARRY4(quotient_1,remainder);\n        remainder = quotient_1 + remainder;\n        dividend_shift = quotient_temp - 1;\n        if ((carry_flag == false) && (remainder <= quotient && quotient - remainder != 0)) {\n          dividend_shift = quotient_temp - 2;\n          remainder = remainder + quotient_1;\n        }\n      }\n      quotient_temp = (remainder - quotient) / divisor_upper_shift;\n      remainder = dividend & 0xffff | ((remainder - quotient) - divisor_upper_shift * quotient_temp) * 0x10000;\n      carry = carry * quotient_temp;\n      quotient = quotient_temp;\n      if (remainder <= carry && carry - remainder != 0) {\n        carry_flag = CARRY4(quotient_1,remainder);\n        remainder = quotient_1 + remainder;\n        quotient = quotient_temp - 1;\n        if ((carry_flag == false) && (remainder <= carry && carry - remainder != 0)) {\n          quotient = quotient_temp - 2;\n          remainder = remainder + quotient_1;\n        }\n      }\n      remainder = remainder - carry;\n      quotient = quotient | dividend_shift << 0x10;\n    }\n    if (quotient_and_remainder != (uint *)0x0) {\n      *quotient_and_remainder = remainder >> LZCOUNT(divisor);\n      quotient_and_remainder[1] = 0;\n    }\n  }\n  else if (dividend_upper < divisor_upper) {\n    if (quotient_and_remainder != (uint *)0x0) {\n      *quotient_and_remainder = dividend;\n      quotient_and_remainder[1] = dividend_upper;\n      return 0;\n    }\n    quotient = 0;\n    quotient_2 = 0;\n  }\n  else {\n    divisor_shift = LZCOUNT(divisor_upper);\n    if (divisor_shift != 0) {\n      carry = 0x20 - divisor_shift;\n      dividend_shift = divisor >> (carry & 0xff) | divisor_upper << divisor_shift;\n      divisor_upper_shift = dividend_shift >> 0x10;\n      quotient = dividend_upper >> (carry & 0xff);\n      quotient_2 = dividend >> (carry & 0xff) | dividend_upper << divisor_shift;\n      remainder = quotient / divisor_upper_shift;\n      quotient_1 = quotient_2 >> 0x10 | (quotient - divisor_upper_shift * remainder) * 0x10000;\n      quotient_temp = remainder * (dividend_shift & 0xffff);\n      dividend = dividend << divisor_shift;\n      quotient = remainder;\n      if (quotient_1 <= quotient_temp && quotient_temp - quotient_1 != 0) {\n        carry_flag = CARRY4(dividend_shift,quotient_1);\n        quotient_1 = dividend_shift + quotient_1;\n        quotient = remainder - 1;\n        if ((carry_flag == false) && (quotient_1 <= quotient_temp && quotient_temp - quotient_1 != 0)) {\n          quotient = remainder - 2;\n          quotient_1 = quotient_1 + dividend_shift;\n        }\n      }\n      remainder = (quotient_1 - quotient_temp) / divisor_upper_shift;\n      quotient_1 = quotient_2 & 0xffff | ((quotient_1 - quotient_temp) - divisor_upper_shift * remainder) * 0x10000;\n      quotient_temp = remainder * (dividend_shift & 0xffff);\n      quotient_2 = remainder;\n      if (quotient_1 <= quotient_temp && quotient_temp - quotient_1 != 0) {\n        carry_flag = CARRY4(dividend_shift,quotient_1);\n        quotient_1 = dividend_shift + quotient_1;\n        quotient_2 = remainder - 1;\n        if ((carry_flag == false) && (quotient_1 <= quotient_temp && quotient_temp - quotient_1 != 0)) {\n          quotient_2 = remainder - 2;\n          quotient_1 = quotient_1 + dividend_shift;\n        }\n      }\n      quotient_2 = quotient_2 | quotient << 0x10;\n      result = (ulonglong)quotient_2 * (ulonglong)(divisor << divisor_shift);\n      if (CONCAT44(quotient_1 - quotient_temp,dividend) < result) {\n        result = result - CONCAT44(dividend_shift,divisor << divisor_shift);\n        quotient_2 = quotient_2 - 1;\n      }\n      if (quotient_and_remainder != (uint *)0x0) {\n        quotient = ((quotient_1 - quotient_temp) - (int)(result >> 0x20)) - (uint)(dividend < (uint)result);\n        *quotient_and_remainder = quotient << (carry & 0xff) | dividend - (uint)result >> divisor_shift;\n        quotient_and_remainder[1] = quotient >> divisor_shift;\n      }\n      return (ulonglong)quotient_2;\n    }\n    if ((divisor_upper < dividend_upper) || (divisor <= dividend)) {\n      carry_flag = dividend < divisor;\n      dividend = dividend - divisor;\n      dividend_upper = (dividend_upper - divisor_upper) - (uint)carry_flag;\n      quotient = 1;\n    }\n    else {\n      quotient = 0;\n    }\n    quotient_2 = 0;\n    if (quotient_and_remainder != (uint *)0x0) {\n      *quotient_and_remainder = dividend;\n      quotient_and_remainder[1] = dividend_upper;\n    }\n  }\n  return CONCAT44(quotient_2,quotient);\n}\n\n",
            "renaming": {
                "FUN_00006a14": "divisible_remainder_00006a14",
                "param_1": "dividend",
                "param_2": "dividend_upper",
                "param_3": "divisor",
                "param_4": "divisor_upper",
                "param_5": "quotient_and_remainder",
                "UNRECOVERED_JUMPTABLE": "software_udf",
                "uVar1": "quotient",
                "iVar2": "divisor_shift",
                "uVar3": "dividend_shift",
                "uVar4": "quotient_1",
                "uVar5": "quotient_2",
                "uVar6": "remainder",
                "uVar7": "carry",
                "uVar8": "quotient_temp",
                "uVar9": "divisor_upper_shift",
                "bVar10": "carry_flag",
                "uVar11": "result"
            },
            "calling": [
                "FUN_00006974"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 134690,
    "layers": [
        [
            "FUN_000004f2",
            "FUN_00000514",
            "FUN_00000534",
            "FUN_00000566",
            "FUN_0000058e",
            "FUN_000005ca",
            "FUN_000007dc",
            "FUN_000008b8",
            "FUN_00000900",
            "FUN_0000091c",
            "FUN_0000093c",
            "FUN_00000cd0",
            "FUN_00000cf0",
            "FUN_00000d0c",
            "FUN_00000d2a",
            "FUN_00000d44",
            "FUN_00000dcc",
            "FUN_000010a0",
            "FUN_00001318",
            "FUN_00001360",
            "FUN_000015d0",
            "FUN_00001696",
            "FUN_00001748",
            "FUN_00001ad4",
            "FUN_00001d08",
            "FUN_00001d5e",
            "FUN_00001d80",
            "FUN_00001da2",
            "FUN_00001dc0",
            "FUN_00001e0c",
            "FUN_00001e44",
            "FUN_00002270",
            "FUN_00002294",
            "FUN_000022be",
            "FUN_000022f0",
            "FUN_000023c8",
            "FUN_0000240c",
            "FUN_00002538",
            "FUN_000026f0",
            "FUN_00002714",
            "FUN_00002744",
            "FUN_0000281c",
            "FUN_0000285c",
            "FUN_000028f0",
            "FUN_00002910",
            "FUN_0000294c",
            "FUN_00002970",
            "FUN_000031fc",
            "FUN_00003658",
            "FUN_00003810",
            "FUN_00003918",
            "FUN_000039e8",
            "FUN_00003d24",
            "FUN_00003d64",
            "FUN_00003d94",
            "FUN_00003dc4",
            "FUN_00004274",
            "FUN_00004280",
            "FUN_0000428c",
            "FUN_000043a0",
            "FUN_000045ee",
            "FUN_00004622",
            "FUN_00004e52",
            "FUN_00004e66",
            "FUN_00004f84",
            "FUN_000050e8",
            "FUN_000050f4",
            "FUN_00005584",
            "FUN_000056b0",
            "FUN_00005790",
            "FUN_0000579c",
            "FUN_00005a58",
            "FUN_00005ebc",
            "FUN_00005ecc",
            "FUN_00005edc",
            "FUN_00005fec",
            "FUN_00005ff8",
            "FUN_00006010",
            "FUN_000060b0",
            "FUN_000064bc",
            "FUN_0000687c",
            "FUN_00006964",
            "FUN_00006a14"
        ],
        [
            "FUN_00000428",
            "FUN_00000610",
            "FUN_00000698",
            "FUN_00000738",
            "FUN_00000930",
            "FUN_00000d76",
            "FUN_00000e38",
            "FUN_00000e58",
            "FUN_00001348",
            "FUN_00001392",
            "FUN_000014c4",
            "FUN_000016c8",
            "FUN_000016ec",
            "FUN_00001710",
            "FUN_00001cf0",
            "FUN_00001d3a",
            "FUN_00001ec4",
            "FUN_00001ff6",
            "FUN_0000231c",
            "FUN_00002364",
            "FUN_000023d0",
            "FUN_0000258c",
            "FUN_000026c0",
            "FUN_000026d8",
            "FUN_000026e4",
            "FUN_00002798",
            "FUN_000027b0",
            "FUN_00002894",
            "FUN_00002a18",
            "FUN_0000328c",
            "FUN_00003688",
            "FUN_00003e58",
            "FUN_00003ff4",
            "FUN_00004042",
            "FUN_000041f4",
            "FUN_00004634",
            "FUN_00004b34",
            "FUN_00004e26",
            "FUN_00004f98",
            "FUN_0000562c",
            "FUN_000056b8",
            "FUN_00005b34",
            "FUN_00005fd8",
            "FUN_0000656c",
            "FUN_00006974"
        ],
        [
            "FUN_00000794",
            "FUN_00000d9c",
            "FUN_00001628",
            "FUN_00001734",
            "FUN_00001778",
            "FUN_000017dc",
            "FUN_0000182c",
            "FUN_000018bc",
            "FUN_00001960",
            "FUN_00001a60",
            "FUN_00001bb8",
            "FUN_00001ddc",
            "FUN_00002028",
            "FUN_000024bc",
            "FUN_000025f4",
            "FUN_00002994",
            "FUN_00002e9c",
            "FUN_0000404c",
            "FUN_0000443c",
            "FUN_00004bd0",
            "FUN_00004dee",
            "FUN_000056a0",
            "FUN_00005780",
            "FUN_00006192"
        ],
        [
            "FUN_00000db0",
            "FUN_000012b4",
            "FUN_00001688",
            "FUN_0000191c",
            "FUN_000019c0",
            "FUN_00001a18",
            "FUN_00001a3c",
            "FUN_00001f80",
            "FUN_000020b8",
            "FUN_000020cc",
            "FUN_000020e0",
            "FUN_000020f4",
            "FUN_00002108",
            "FUN_00002396",
            "FUN_00002624",
            "FUN_00002690",
            "FUN_00004248",
            "FUN_00005700",
            "FUN_000060cc",
            "FUN_000061cc"
        ],
        [
            "FUN_00001448",
            "FUN_00001b10",
            "FUN_00001eea",
            "FUN_00005e68",
            "FUN_000068f0"
        ],
        [
            "FUN_00001c84",
            "FUN_00005100"
        ],
        [
            "FUN_00001274",
            "FUN_000047e4"
        ],
        [
            "FUN_00000e64",
            "FUN_00002600",
            "FUN_00002654"
        ],
        [
            "FUN_000031e0",
            "FUN_000033f4",
            "FUN_00003478",
            "FUN_000034c0"
        ],
        [
            "FUN_00000ed8",
            "FUN_0000211c",
            "FUN_00003378"
        ],
        [
            "FUN_00002eb4"
        ],
        [
            "FUN_00004158",
            "FUN_00004314",
            "FUN_000054a8"
        ],
        [
            "FUN_000041d0",
            "FUN_000042a4"
        ],
        [
            "FUN_00005404",
            "FUN_00006768"
        ],
        [
            "FUN_00004cb4",
            "FUN_00004db8",
            "FUN_000057a8",
            "FUN_00005e10"
        ],
        [
            "FUN_00002a00",
            "FUN_000033c0",
            "FUN_00003444",
            "FUN_00004418",
            "FUN_000057d2"
        ],
        [
            "FUN_00002d94",
            "FUN_00002e48",
            "FUN_000057f8"
        ],
        [
            "FUN_00004c84"
        ],
        [
            "FUN_00002a88",
            "FUN_00002f74",
            "FUN_00003524"
        ],
        [
            "FUN_00002b10"
        ],
        [
            "FUN_00002e6c"
        ],
        [
            "FUN_000023a4"
        ],
        [
            "FUN_00000f04"
        ],
        [
            "FUN_00000a30",
            "FUN_00000cc0",
            "FUN_00000fec",
            "FUN_00001034",
            "FUN_000013b8",
            "FUN_00003ec4"
        ],
        [
            "FUN_00000dc0",
            "FUN_00000df4",
            "FUN_000010d4",
            "FUN_00002434",
            "FUN_00003e9e"
        ],
        [
            "FUN_00000410",
            "FUN_00000f8c",
            "FUN_0000129c",
            "FUN_00003694"
        ],
        [
            "FUN_000012e2",
            "FUN_00002ecc",
            "FUN_0000305c",
            "FUN_0000459c"
        ],
        [
            "FUN_00000e14",
            "FUN_00002f30"
        ],
        [
            "FUN_00000490",
            "FUN_00002fe0"
        ],
        [
            "FUN_0000316c",
            "FUN_00004dc8"
        ]
    ],
    "locked_functions": []
}