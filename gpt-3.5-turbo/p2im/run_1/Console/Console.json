{
    "functions": {
        "FUN_00000410": {
            "entrypoint": "0x00000410",
            "current_name": "FUNC_00000410",
            "code": "\nvoid FUNC_00000410(void)\n\n{\n  initialize_configuration_00000df4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000410": "FUNC_00000410"
            },
            "calling": [
                "FUN_0000459c"
            ],
            "called": [
                "FUN_00000df4"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00000428": {
            "entrypoint": "0x00000428",
            "current_name": "update_offset_00000428",
            "code": "\ndword update_offset_00000428(undefined4 *result,int offset)\n\n{\n  undefined4 interrupt_status;\n  dword result;\n  \n  interrupt_status = get_interrupt_status_00000cd0();\n  result = array[0].r_offset;\n  if ((offset + array[0].r_offset < 0x20030001) &&\n     (0x1fff0def < offset + array[0].r_offset)) {\n    array[0].r_offset = offset + array[0].r_offset;\n  }\n  else {\n    *result = 0xc;\n    result = 0xffffffff;\n  }\n  enable_ir_qinterrupts_if_privileged_00000d0c(interrupt_status);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000428": "update_offset_00000428",
                "param_1": "result",
                "param_2": "offset",
                "uVar1": "interrupt_status",
                "local_c": "result",
                "Elf32_Rel_ARRAY_1fff0200": "array"
            },
            "calling": [
                "FUN_00004bd0"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000428": {
                    "1": "get_offset",
                    "5": "update_offset",
                    "2": "process_interrupt",
                    "3": "calculate_offset"
                },
                "param_1": {
                    "4": "status_ptr",
                    "1": "output_buffer",
                    "7": "result",
                    "2": "output",
                    "3": "status_pointer"
                },
                "param_2": {
                    "2": "current_offset",
                    "3": "new_offset",
                    "4": "input_offset",
                    "1": "original_offset",
                    "15": "offset"
                },
                "uVar1": {
                    "27": "interrupt_status"
                },
                "local_c": {
                    "1": "original_offset",
                    "2": "result_offset",
                    "4": "current_offset",
                    "6": "result"
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "1": "array"
                }
            }
        },
        "FUN_00000490": {
            "entrypoint": "0x00000490",
            "current_name": "copy_and_increment_loop_00000490",
            "code": "\nundefined4 copy_and_increment_loop_00000490(undefined4 input1,undefined4 input2,undefined4 source,undefined4 destination)\n\n{\n  undefined4 result;\n  \n  result = copy_and_increment_loop_00000490_00000e14(source,destination);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000490": "copy_and_increment_loop_00000490",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "source",
                "param_4": "destination",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00004dc8"
            ],
            "called": [
                "FUN_00000e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000490": {
                    "1": "copy_increment_loop",
                    "17": "copy_and_increment_loop",
                    "13": "copy_and_increment"
                },
                "param_1": {
                    "8": "input_1",
                    "2": "src",
                    "1": "input_value1",
                    "13": "input1"
                },
                "param_2": {
                    "1": "arg2",
                    "13": "input2",
                    "2": "destination_array",
                    "8": "input_2"
                },
                "param_3": {
                    "2": "source_data",
                    "1": "start",
                    "4": "source_array",
                    "18": "source"
                },
                "param_4": {
                    "17": "destination",
                    "1": "dst_ptr",
                    "4": "destination_array"
                },
                "uVar1": {
                    "1": "status",
                    "17": "result"
                }
            }
        },
        "FUN_000004f2": {
            "entrypoint": "0x000004f2",
            "current_name": "initialize_variable_000004f2",
            "code": "\nundefined4 initialize_variable_000004f2(undefined4 *output_value)\n\n{\n  *output_value = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000004f2": "initialize_variable_000004f2",
                "param_1": "output_value"
            },
            "calling": [
                "FUN_00004e26",
                "FUN_00004dee"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000004f2": {
                    "2": "initialize_param",
                    "1": "set_default_value",
                    "3": "initialize_data",
                    "4": "set_param_and_return",
                    "5": "initialize_variable"
                },
                "param_1": {
                    "1": "value_pointer",
                    "2": "result_ptr",
                    "7": "output_value",
                    "3": "value_ptr",
                    "5": "result"
                },
                "*param_1": {
                    "1": "parameter_value"
                },
                "new_variable_name_1": {
                    "1": "value"
                },
                "0x13": {
                    "1": "default_value"
                },
                "0xffffffff": {
                    "1": "return_value"
                }
            }
        },
        "FUN_00000514": {
            "entrypoint": "0x00000514",
            "current_name": "set_default_value_00000514",
            "code": "\nundefined4 set_default_value_00000514(undefined4 *output_value)\n\n{\n  *output_value = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00000514": "set_default_value_00000514",
                "param_1": "output_value"
            },
            "calling": [
                "FUN_000056b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000514": {
                    "3": "set_value_and_return",
                    "1": "set_default_param_value",
                    "2": "initialize_parameter",
                    "4": "set_default_value"
                },
                "param_1": {
                    "1": "result_pointer",
                    "2": "value_ptr",
                    "6": "output_value",
                    "5": "output"
                },
                "*param_1": {
                    "3": "value",
                    "2": "result",
                    "1": "data_value"
                },
                "0x13": {
                    "2": "initial_value",
                    "1": "19",
                    "3": "default_value"
                },
                "0xffffffff": {
                    "1": "error_code"
                }
            }
        },
        "FUN_00000534": {
            "entrypoint": "0x00000534",
            "current_name": "check_valid_input_00000534",
            "code": "\nundefined4 check_valid_input_00000534(undefined4 *result,int input_value)\n\n{\n  undefined4 is_valid;\n  \n  *result = 0;\n  if (((input_value == 0) || (input_value == 1)) || (input_value == 2)) {\n    is_valid = 1;\n  }\n  else {\n    is_valid = 0;\n  }\n  return is_valid;\n}\n\n",
            "renaming": {
                "FUN_00000534": "check_valid_input_00000534",
                "param_1": "result",
                "param_2": "input_value",
                "uVar1": "is_valid"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000534": {
                    "1": "check_valid_value",
                    "2": "check_param_validity",
                    "13": "check_valid_input",
                    "10": "check_valid_param"
                },
                "param_1": {
                    "1": "output_status",
                    "2": "output_value",
                    "6": "output",
                    "19": "result"
                },
                "param_2": {
                    "6": "input",
                    "1": "value",
                    "16": "input_value",
                    "8": "input_param"
                },
                "uVar1": {
                    "25": "is_valid",
                    "1": "result"
                },
                "*param_1": {
                    "1": "result"
                }
            }
        },
        "FUN_00000566": {
            "entrypoint": "0x00000566",
            "current_name": "convert_byte_to_int_00000566",
            "code": "\nint convert_byte_to_int_00000566(int input)\n\n{\n  byte byte1;\n  byte byte2;\n  byte byte3;\n  byte byte4;\n  int result;\n  \n  byte2 = (byte)input;\n  byte3 = (byte)((uint)input >> 8);\n  byte4 = (byte)((uint)input >> 0x10);\n  byte1 = (byte)((uint)input >> 0x18);\n  result = LZCOUNT((uint)(byte)((((((((byte2 & 1) << 1 | byte2 >> 1 & 1) << 1 | byte2 >> 2 & 1) << 1\n                                  | byte2 >> 3 & 1) << 1 | byte2 >> 4 & 1) << 1 | byte2 >> 5 & 1) <<\n                                1 | byte2 >> 6 & 1) << 1 | byte2 >> 7) << 0x18 |\n                  (uint)(byte)((((((((byte3 & 1) << 1 | byte3 >> 1 & 1) << 1 | byte3 >> 2 & 1) << 1\n                                  | byte3 >> 3 & 1) << 1 | byte3 >> 4 & 1) << 1 | byte3 >> 5 & 1) <<\n                                1 | byte3 >> 6 & 1) << 1 | byte3 >> 7) << 0x10 |\n                  (uint)(byte)((((((((byte4 & 1) << 1 | byte4 >> 1 & 1) << 1 | byte4 >> 2 & 1) << 1\n                                  | byte4 >> 3 & 1) << 1 | byte4 >> 4 & 1) << 1 | byte4 >> 5 & 1) <<\n                                1 | byte4 >> 6 & 1) << 1 | byte4 >> 7) << 8 |\n                  (uint)(byte)((((((((byte1 & 1) << 1 | byte1 >> 1 & 1) << 1 | byte1 >> 2 & 1) << 1\n                                  | byte1 >> 3 & 1) << 1 | byte1 >> 4 & 1) << 1 | byte1 >> 5 & 1) <<\n                                1 | byte1 >> 6 & 1) << 1 | byte1 >> 7));\n  if (input == 0) {\n    result = -1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000566": "convert_byte_to_int_00000566",
                "param_1": "input",
                "iVar5": "result",
                "bVar2": "byte2",
                "bVar3": "byte3",
                "bVar4": "byte4",
                "bVar1": "byte1"
            },
            "calling": [
                "FUN_00000610"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000566": {
                    "1": "bit_count",
                    "10": "convert_byte_to_int",
                    "4": "decode_integer",
                    "2": "extract_bits"
                },
                "param_1": {
                    "13": "input",
                    "1": "encoded_value",
                    "10": "input_value",
                    "3": "value"
                },
                "iVar5": {
                    "4": "converted_value",
                    "6": "decoded_value",
                    "1": "output",
                    "17": "result"
                },
                "bVar2": {
                    "1": "bit0",
                    "4": "byte1",
                    "5": "byte0",
                    "14": "byte2"
                },
                "bVar3": {
                    "1": "bit3",
                    "5": "byte1",
                    "4": "byte2",
                    "14": "byte3"
                },
                "bVar4": {
                    "1": "param_byte_4",
                    "5": "byte2",
                    "14": "byte4",
                    "4": "byte3"
                },
                "bVar1": {
                    "14": "byte1",
                    "1": "param_byte_1",
                    "5": "byte3",
                    "4": "byte4"
                }
            }
        },
        "FUN_0000058e": {
            "entrypoint": "0x0000058e",
            "current_name": "update_pointer_0000058e",
            "code": "\nvoid update_pointer_0000058e(int *source_pointer,undefined4 *new_pointer)\n\n{\n  if (*source_pointer == 0) {\n    *new_pointer = new_pointer;\n  }\n  else {\n    *new_pointer = *(undefined4 *)*source_pointer;\n    *(undefined4 **)*source_pointer = new_pointer;\n  }\n  *source_pointer = updated_value_to_int;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000058e": "update_pointer_0000058e",
                "param_1": "source_pointer",
                "param_2": "new_pointer",
                "(int)param_2": "updated_value_to_int"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000058e": {
                    "1": "copy_ptr_value",
                    "2": "update_pointer_value",
                    "17": "update_pointer"
                },
                "param_1": {
                    "1": "input_pointer",
                    "4": "source_ptr",
                    "7": "pointer",
                    "3": "source",
                    "8": "source_pointer",
                    "2": "input_ptr"
                },
                "param_2": {
                    "2": "dest_ptr",
                    "3": "target_pointer",
                    "1": "new_node",
                    "5": "new_pointer"
                },
                "*param_1": {
                    "2": "source_value",
                    "1": "source_data"
                },
                "*param_2": {
                    "1": "new_data"
                },
                "(int)param_2": {
                    "1": "updated_value_to_int"
                }
            }
        },
        "FUN_000005ca": {
            "entrypoint": "0x000005ca",
            "current_name": "extract_value_000005ca",
            "code": "\nundefined4 * extract_value_000005ca(int *input_pointer)\n\n{\n  undefined4 *extracted_value;\n  \n  if (*input_pointer == 0) {\n    extracted_value = (undefined4 *)0x0;\n  }\n  else {\n    extracted_value = *(undefined4 **)*input_pointer;\n    if (extracted_value == (undefined4 *)*input_pointer) {\n      *input_pointer = 0;\n    }\n    else {\n      *(undefined4 *)*input_pointer = *extracted_value;\n    }\n  }\n  return extracted_value;\n}\n\n",
            "renaming": {
                "FUN_000005ca": "extract_value_000005ca",
                "param_1": "input_pointer",
                "puVar1": "extracted_value"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000005ca": {
                    "1": "extract_non_null_pointer",
                    "5": "extract_value_from_pointer",
                    "2": "extract_and_reset_pointer",
                    "3": "extract_data_from_pointer"
                },
                "param_1": {
                    "1": "array_ptr",
                    "2": "pointer",
                    "4": "input_array",
                    "3": "value_ptr",
                    "7": "input_pointer"
                },
                "puVar1": {
                    "13": "extracted_value",
                    "1": "first_element",
                    "4": "output_pointer",
                    "2": "result",
                    "3": "extracted_data"
                },
                "*param_1": {
                    "2": "value",
                    "1": "input_pointer"
                }
            }
        },
        "FUN_00000610": {
            "entrypoint": "0x00000610",
            "current_name": "convert_data_00000610",
            "code": "\nundefined4 convert_data_00000610(void)\n\n{\n  int original_value;\n  int converted_value;\n  undefined4 result;\n  \n  original_value = DAT_1fff03dc;\n  DAT_1fff0354 = 0;\n  converted_value = convert_byte_to_int(DAT_1fff0424);\n  converted_value = **(int **)(&DAT_1fff03e4 + converted_value * 4);\n  if (original_value == converted_value + -8) {\n    result = 0;\n  }\n  else {\n    if ((original_value != 0) && (*(char *)(original_value + 4) == '\\t')) {\n      *(undefined *)(original_value + 4) = 10;\n    }\n    *(undefined *)(converted_value + -4) = 9;\n    DAT_1fff03e0 = *(undefined2 *)(converted_value + -2);\n    result = 1;\n    DAT_1fff03dc = converted_value + -8;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000610": "convert_data_00000610",
                "iVar1": "original_value",
                "iVar2": "converted_value",
                "uVar3": "result",
                "convert_byte_to_int_00000566": "convert_byte_to_int"
            },
            "calling": [],
            "called": [
                "FUN_00000566"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000610": {
                    "2": "convert_and_update_data",
                    "1": "convert_int_to_char_array",
                    "9": "convert_data",
                    "4": "convert_byte_to_int"
                },
                "iVar1": {
                    "1": "input_pointer",
                    "5": "input_value",
                    "3": "data_address",
                    "12": "original_value"
                },
                "iVar2": {
                    "2": "converted_data",
                    "21": "converted_value",
                    "1": "array_index",
                    "3": "index"
                },
                "uVar3": {
                    "1": "status",
                    "2": "success_flag",
                    "16": "result",
                    "12": "return_value"
                },
                "convert_byte_to_int_00000566": {
                    "5": "convert_byte_to_int"
                },
                "forEachValue": {
                    "1": "data_pointer"
                },
                "DAT_1fff0354": {
                    "3": "flag",
                    "1": "is_data_decoded"
                },
                "DAT_1fff0424": {
                    "1": "byte_data"
                },
                "DAT_1fff03dc": {
                    "1": "current_value"
                },
                "DAT_1fff03e4": {
                    "1": "data_array"
                },
                "DAT_1fff03e0": {
                    "1": "decoded_data",
                    "2": "updated_value"
                },
                "*(int **)(&DAT_1fff03e4 + iVar2 * 4)": {
                    "1": "data_ptr"
                },
                "*(char *)(current_value_ptr + 4)": {
                    "1": "status_char"
                },
                "*(undefined *)(current_value_ptr + 4)": {
                    "1": "updated_status_char"
                },
                "*(undefined *)(converted_value + -4)": {
                    "1": "value_char"
                },
                "&DAT_1fff03e4": {
                    "1": "pointer_to_array"
                },
                "*(char *)(input_value + 4)": {
                    "1": "char_value"
                },
                "*(char *)(iVar1 + 4)": {
                    "1": "next_byte"
                }
            }
        },
        "FUN_00000698": {
            "entrypoint": "0x00000698",
            "current_name": "update_value_00000698",
            "code": "\nvoid update_value_00000698(int input_param,uint new_value)\n\n{\n  if (new_value < 9) {\n    if ((8 < *(byte_value *)(input_param + 4)) &&\n       (extract_value(&DAT_1fff03e4 + (uint)*(byte_value *)(input_param + 5) * 4),\n       *(int *)(&DAT_1fff03e4 + (uint)*(byte_value *)(input_param + 5) * 4) == 0)) {\n      DAT_1fff0424 = DAT_1fff0424 & ~(1 << *(signed_byte *)(input_param + 5));\n    }\n  }\n  else if (*(byte_value *)(input_param + 4) < 9) {\n    update_pointer(&DAT_1fff03e4 + (uint)*(byte_value *)(input_param + 5) * 4,input_param + 8);\n    DAT_1fff0424 = DAT_1fff0424 | 1 << *(signed_byte *)(input_param + 5);\n  }\n  *(character *)(input_param + 4) = (character)new_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000698": "update_value_00000698",
                "param_1": "input_param",
                "param_2": "new_value",
                "extract_value_000005ca": "extract_value",
                "update_pointer_0000058e": "update_pointer",
                "byte": "byte_value",
                "sbyte": "signed_byte",
                "char": "character"
            },
            "calling": [
                "FUN_00000794",
                "FUN_00002434",
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "called": [
                "FUN_000005ca",
                "FUN_0000058e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000698": {
                    "1": "update_character_data",
                    "2": "update_parameter",
                    "8": "update_value",
                    "3": "update_parameter_value",
                    "6": "update_data"
                },
                "param_1": {
                    "2": "value",
                    "1": "property_address",
                    "3": "input_param"
                },
                "param_2": {
                    "24": "new_value",
                    "1": "new_data_value",
                    "3": "value"
                },
                "*(byte *)(param_1 + 4)": {
                    "1": "flag_value",
                    "11": "current_value"
                },
                "extract_value_000005ca": {
                    "1": "get_value",
                    "24": "extract_value"
                },
                "*(&DAT_1fff03e4 + (uint)*(byte *)(param_1 + 5) * 4)": {
                    "1": "data_value"
                },
                "*(int *)(&DAT_1fff03e4 + (uint)*(byte *)(param_1 + 5) * 4)": {
                    "9": "extracted_value",
                    "1": "pointer_value",
                    "2": "data_value"
                },
                "DAT_1fff0424": {
                    "2": "bit_mask",
                    "1": "status_flags",
                    "5": "flags"
                },
                "*(sbyte *)(param_1 + 5)": {
                    "8": "bit_position",
                    "2": "bit_index",
                    "1": "flag_bit_index"
                },
                "param_1 + 4": {
                    "1": "ptr_value1"
                },
                "param_1 + 5": {
                    "1": "ptr_value2"
                },
                "DAT_1fff03e4": {
                    "1": "data_struct"
                },
                "update_pointer_0000058e": {
                    "19": "update_pointer",
                    "1": "update_flag_pointer"
                },
                "*(byte *)(param_1 + 5)": {
                    "1": "flag_index",
                    "2": "offset",
                    "7": "index"
                },
                "(1 << *(sbyte *)(param_1 + 5))": {
                    "1": "bit_mask"
                },
                "byte": {
                    "1": "byte_value"
                },
                "sbyte": {
                    "1": "signed_byte"
                },
                "char": {
                    "1": "character"
                },
                "&DAT_1fff03e4": {
                    "1": "data_array"
                },
                "&DAT_1fff03e4 + (uint)*(byte *)(param_1 + 5) * 4": {
                    "1": "value_ptr",
                    "3": "data_pointer"
                },
                "*(char *)(param_1 + 4)": {
                    "1": "current_value_char"
                },
                "param_1 + 8": {
                    "1": "new_pointer"
                },
                "param_2 < 9": {
                    "1": "is_less_than_nine"
                },
                "8 < *(byte *)(param_1 + 4)": {
                    "1": "is_greater_than_eight"
                },
                "DAT_1fff0424 & ~(1 << *(sbyte *)(param_1 + 5))": {
                    "1": "updated_flag"
                },
                "*(byte *)(param_1 + 4) < 9": {
                    "1": "is_current_value_less_than_nine"
                },
                "update_pointer_0000058e(&DAT_1fff03e4 + (uint)*(byte *)(param_1 + 5) * 4,param_1 + 8)": {
                    "1": "update_pointer_value"
                },
                "(uint)*(byte *)(param_1 + 5) * 4": {
                    "1": "array_index"
                },
                "&DAT_1fff0424": {
                    "1": "flag_array"
                }
            }
        },
        "FUN_00000738": {
            "entrypoint": "0x00000738",
            "current_name": "check_exception_and_set_flag_00000738",
            "code": "\nvoid check_exception_and_set_flag_00000738(ushort input_value)\n\n{\n  int exception_number;\n  \n  if ((*(byte *)(DAT_1fff03dc + 4) < 9) || (input_value < *(byte *)(DAT_1fff03dc + 5))) {\n    exception_number = get_exception_number();\n    if (exception_number == 0) {\n      set_flag();\n    }\n    else {\n      DAT_1fff0354 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000738": "check_exception_and_set_flag_00000738",
                "param_1": "input_value",
                "iVar1": "exception_number",
                "get_exception_number_00000d2a": "get_exception_number",
                "set_flag_0000093c": "set_flag"
            },
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "called": [
                "FUN_0000093c",
                "FUN_00000d2a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000738": {
                    "2": "check_exception_limits",
                    "1": "validate_parameters",
                    "13": "check_exception_and_set_flag"
                },
                "param_1": {
                    "1": "value",
                    "12": "input_value",
                    "2": "exception_code",
                    "4": "input_param"
                },
                "iVar1": {
                    "1": "exception_result",
                    "30": "exception_number"
                },
                "get_exception_number_00000d2a": {
                    "15": "get_exception_number"
                },
                "set_flag_0000093c": {
                    "15": "set_flag"
                },
                "DAT_1fff03dc": {
                    "3": "data_array",
                    "1": "data_pointer1"
                },
                "DAT_1fff0354": {
                    "3": "flag",
                    "1": "data_pointer2",
                    "4": "exception_flag"
                }
            }
        },
        "FUN_00000794": {
            "entrypoint": "0x00000794",
            "current_name": "initialize_interrupt_handler_00000794",
            "code": "\nint * initialize_interrupt_handler_00000794(void)\n\n{\n  int interrupt_status;\n  int counter;\n  undefined4 *pointer;\n  uint aligned_address;\n  int outer_loop_counter;\n  int inner_loop_counter;\n  int *stack_pointer;\n  \n  get_interrupt_status();\n  *(undefined4 *)(&DAT_1fff0358 + DAT_1fff03e0 * 4) = 0;\n  DAT_1fff0350 = DAT_1fff0350 + -1;\n  update_value(DAT_1fff03dc,0);\n  pointer = &DAT_1fff03dc;\n  counter = 0;\n  DAT_1fff03dc = 0;\n  execute_interrupt_handler();\n  aligned_address = (int)pointer + counter & 0xfffffffc;\n  stack_pointer = (int *)(aligned_address - 4);\n  *stack_pointer = 0x77777777;\n  if (((uint)stack_pointer & 7) != 0) {\n    stack_pointer = (int *)(aligned_address - 8);\n    *stack_pointer = 0x88888888;\n  }\n  stack_pointer[-1] = 0x1000000;\n  stack_pointer[-2] = counter << 0xd;\n  stack_pointer[-3] = 0x795;\n  stack_pointer = stack_pointer + -4;\n  *stack_pointer = 0;\n  for (inner_loop_counter = 3; 0 < inner_loop_counter; inner_loop_counter = inner_loop_counter + -1) {\n    stack_pointer = stack_pointer + -1;\n    *stack_pointer = inner_loop_counter;\n  }\n  stack_pointer = stack_pointer + -1;\n  *stack_pointer = interrupt_status;\n  for (outer_loop_counter = 0xb; 3 < outer_loop_counter; outer_loop_counter = outer_loop_counter + -1) {\n    stack_pointer = stack_pointer + -1;\n    *stack_pointer = outer_loop_counter;\n  }\n  stack_pointer[-1] = -3;\n  return stack_pointer + -1;\n}\n\n",
            "renaming": {
                "FUN_00000794": "initialize_interrupt_handler_00000794",
                "extraout_r1": "interrupt_status",
                "iVar1": "counter",
                "puVar2": "pointer",
                "uVar3": "aligned_address",
                "iStack_1c": "outer_loop_counter",
                "iStack_18": "inner_loop_counter",
                "piStack_14": "stack_pointer",
                "get_interrupt_status_00000cd0": "get_interrupt_status",
                "update_value_00000698": "update_value",
                "execute_interrupt_handler_00000930": "execute_interrupt_handler"
            },
            "calling": [],
            "called": [
                "FUN_00000cd0",
                "FUN_00000698",
                "FUN_00000930"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000794": {
                    "2": "initialize_interrupt",
                    "19": "initialize_interrupt_handler",
                    "1": "process_interrupt",
                    "5": "initialize_interrupts"
                },
                "extraout_r1": {
                    "3": "result",
                    "15": "interrupt_status",
                    "1": "exception_code",
                    "4": "status"
                },
                "iVar1": {
                    "2": "i",
                    "1": "loop_index",
                    "13": "counter",
                    "12": "index"
                },
                "puVar2": {
                    "1": "ptr_value",
                    "15": "pointer",
                    "3": "data_pointer",
                    "2": "handler_ptr"
                },
                "uVar3": {
                    "1": "alignment",
                    "6": "aligned_ptr",
                    "7": "aligned_pointer",
                    "9": "aligned_address"
                },
                "iStack_1c": {
                    "1": "count_down",
                    "3": "i",
                    "7": "loop_counter1",
                    "5": "counter1",
                    "8": "outer_loop_counter"
                },
                "iStack_18": {
                    "1": "count2",
                    "5": "counter2",
                    "3": "j",
                    "7": "loop_counter2",
                    "8": "inner_loop_counter"
                },
                "piStack_14": {
                    "2": "ptr",
                    "1": "ptr_array",
                    "3": "stack_ptr",
                    "18": "stack_pointer"
                },
                "get_interrupt_status_00000cd0": {
                    "5": "get_interrupt_status",
                    "2": "get_status"
                },
                "update_value_00000698": {
                    "7": "update_value"
                },
                "execute_interrupt_handler_00000930": {
                    "4": "execute_interrupt_handler",
                    "3": "execute_handler"
                }
            }
        },
        "FUN_000007dc": {
            "entrypoint": "0x000007dc",
            "current_name": "initialize_memory_000007dc",
            "code": "\nint * initialize_memory_000007dc(undefined4 input_value,int size,int size,int alignment)\n\n{\n  uint aligned_size;\n  int i;\n  int j;\n  int *ptr;\n  \n  aligned_size = alignment + size & 0xfffffffc;\n  ptr = (int *)(aligned_size - 4);\n  *ptr = 0x77777777;\n  if (((uint)ptr & 7) != 0) {\n    ptr = (int *)(aligned_size - 8);\n    *ptr = 0x88888888;\n  }\n  ptr[-1] = 0x1000000;\n  ptr[-2] = input_value;\n  ptr[-3] = 0x795;\n  ptr = ptr + -4;\n  *ptr = 0;\n  for (j = 3; 0 < j; j = j + -1) {\n    ptr = ptr + -1;\n    *ptr = j;\n  }\n  ptr = ptr + -1;\n  *ptr = size;\n  for (i = 0xb; 3 < i; i = i + -1) {\n    ptr = ptr + -1;\n    *ptr = i;\n  }\n  ptr[-1] = -3;\n  return ptr + -1;\n}\n\n",
            "renaming": {
                "FUN_000007dc": "initialize_memory_000007dc",
                "param_1": "input_value",
                "param_2": "size",
                "param_3": "size",
                "param_4": "alignment",
                "local_14": "i",
                "local_10": "j",
                "local_c": "ptr",
                "uVar1": "aligned_size",
                "local_c[-1]": "ptr[-1]",
                "local_c[-2]": "ptr[-2]",
                "local_c[-3]": "ptr[-3]"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000007dc": {
                    "2": "allocate_memory",
                    "1": "initialize_data",
                    "24": "initialize_memory"
                },
                "param_1": {
                    "1": "input1",
                    "7": "input_value",
                    "3": "param1",
                    "6": "value",
                    "2": "input_param"
                },
                "param_2": {
                    "4": "param2",
                    "1": "param",
                    "2": "count",
                    "5": "value",
                    "6": "size",
                    "3": "arg2"
                },
                "param_3": {
                    "1": "offset_start",
                    "3": "alignment",
                    "2": "arg3",
                    "5": "offset",
                    "8": "size"
                },
                "param_4": {
                    "3": "offset",
                    "2": "size",
                    "1": "end_range",
                    "10": "alignment"
                },
                "local_14": {
                    "1": "count_down",
                    "9": "i",
                    "2": "index",
                    "5": "counter1"
                },
                "local_10": {
                    "2": "count2",
                    "1": "inner_loop",
                    "5": "counter2",
                    "4": "count",
                    "7": "j",
                    "3": "loop_counter2"
                },
                "local_c": {
                    "1": "block_ptr",
                    "3": "memory_ptr",
                    "15": "ptr"
                },
                "uVar1": {
                    "1": "block_size",
                    "13": "aligned_size",
                    "2": "aligned_offset"
                },
                "local_8": {
                    "1": "temp"
                },
                "local_c[-1]": {
                    "1": "ptr[-1]"
                },
                "local_c[-2]": {
                    "1": "ptr[-2]"
                },
                "local_c[-3]": {
                    "1": "constant3"
                },
                "*local_c": {
                    "1": "ptr_value"
                },
                "local_16": {
                    "1": "aligned_ptr"
                }
            }
        },
        "FUN_000008b8": {
            "entrypoint": "0x000008b8",
            "current_name": "find_last_offset_000008b8",
            "code": "\nint find_last_offset_000008b8(void)\n\n{\n  relocation_entry *current_relocation;\n  \n  for (current_relocation = (relocation_entry *)&DAT_1fff0000;\n      (current_relocation->target_offset == 0xe7fee7fe && (current_relocation < relocation_array));\n      current_relocation = (relocation_entry *)&current_relocation->r_info) {\n  }\n  return ((int)relocation_array - (int)current_relocation >> 2) << 2;\n}\n\n",
            "renaming": {
                "FUN_000008b8": "find_last_offset_000008b8",
                "local_c": "current_relocation",
                "Elf32_Rel": "relocation_entry",
                "Elf32_Rel_ARRAY_1fff0200": "relocation_array",
                "r_offset": "target_offset"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000008b8": {
                    "1": "get_offset_difference",
                    "2": "calculate_array_size",
                    "3": "get_array_size",
                    "4": "calculate_relocation_offset",
                    "5": "find_last_offset"
                },
                "local_c": {
                    "1": "current_reloc",
                    "4": "rel_entry",
                    "3": "relocation_entry",
                    "2": "rel_ptr",
                    "5": "current_relocation"
                },
                "Elf32_Rel": {
                    "2": "relocation_entry"
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "1": "rel_array",
                    "3": "relocation_array"
                },
                "r_offset": {
                    "1": "target_offset"
                }
            }
        },
        "FUN_00000900": {
            "entrypoint": "0x00000900",
            "current_name": "get_main_stack_pointer_00000900",
            "code": "\nundefined4 get_main_stack_pointer_00000900(void)\n\n{\n  undefined4 main_stack_pointer;\n  \n  main_stack_pointer = getMainStackPointer();\n  return main_stack_pointer;\n}\n\n",
            "renaming": {
                "FUN_00000900": "get_main_stack_pointer_00000900",
                "uVar1": "main_stack_pointer"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000900": {
                    "25": "get_main_stack_pointer",
                    "1": "get_main_stack_pointer_function",
                    "2": "retrieve_main_stack_pointer",
                    "3": "get_stack_pointer"
                },
                "uVar1": {
                    "24": "main_stack_pointer",
                    "1": "main_stack_ptr",
                    "6": "stack_pointer"
                }
            }
        },
        "FUN_0000091c": {
            "entrypoint": "0x0000091c",
            "current_name": "get_memory_address_0000091c",
            "code": "\nuint32_t get_memory_address_0000091c(void)\n\n{\n  return 0x1fff0000;\n}\n\n",
            "renaming": {
                "FUN_0000091c": "get_memory_address_0000091c",
                "undefined4": "uint32_t"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000091c": {
                    "1": "get_masked_value",
                    "2": "get_memory_offset",
                    "3": "get_magic_number",
                    "16": "get_memory_address"
                },
                "undefined4": {
                    "3": "uint32",
                    "1": "unsigned_int",
                    "10": "uint32_t"
                },
                "<original_variable_name_1>": {
                    "1": "result"
                },
                "0x1fff0000": {
                    "6": "memory_address",
                    "1": "magic_number"
                },
                "PTR_00000934": {
                    "1": "pointer"
                },
                "DAT_00000938": {
                    "1": "constant_value"
                },
                "": {
                    "2": ""
                },
                "ORIGINAL_FUNCTION_NAME": {
                    "1": "new_function_name"
                },
                "ORIGINAL_PARAMETER_NAME_1": {
                    "1": "new_parameter_name1"
                },
                "ORIGINAL_VARIABLE_NAME_1": {
                    "1": "new_variable_name1"
                }
            }
        },
        "FUN_00000930": {
            "entrypoint": "0x00000930",
            "current_name": "execute_interrupt_handler_00000930",
            "code": "\nvoid execute_interrupt_handler_00000930(void)\n\n{\n  check_irq_interrupts_enabled();\n  trigger_interrupt(1);\n  loop {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000930": "execute_interrupt_handler_00000930",
                "check_irq_interrupts_enabled_00000cf0": "check_irq_interrupts_enabled",
                "software_interrupt": "trigger_interrupt",
                "do": "loop"
            },
            "calling": [
                "FUN_00000794",
                "FUN_00000f8c"
            ],
            "called": [
                "FUN_00000cf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000930": {
                    "2": "perform_software_interrupt",
                    "9": "execute_interrupt_handler",
                    "1": "execute_soft_interrupt",
                    "3": "execute_infinite_loop"
                },
                "check_irq_interrupts_enabled_00000cf0": {
                    "18": "check_irq_interrupts_enabled",
                    "2": "check_if_irq_interrupts_enabled",
                    "10": "check_interrupts_enabled",
                    "1": "check_irq_interrupts"
                },
                "software_interrupt": {
                    "15": "trigger_interrupt",
                    "13": "trigger_software_interrupt",
                    "1": "trigger_system_interrupt"
                },
                "do": {
                    "1": "loop"
                }
            }
        },
        "FUN_0000093c": {
            "entrypoint": "0x0000093c",
            "current_name": "set_flag_0000093c",
            "code": "\n\n\nvoid set_flag_0000093c(void)\n\n{\n  _DATmemory_protection_register = _DATmemory_protection_register | 0x10000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000093c": "set_flag_0000093c",
                "_e000ed04": "memory_protection_register"
            },
            "calling": [
                "FUN_00000738",
                "FUN_00001348",
                "FUN_00002798",
                "FUN_00001cf0",
                "FUN_00002434"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000093c": {
                    "1": "set_flag_as_active",
                    "2": "set_memory_protection_flag",
                    "5": "set_memory_flag",
                    "3": "set_flag_bit",
                    "4": "set_flag_in_control_register"
                },
                "_DAT_e000ed04": {
                    "3": "flag_register",
                    "1": "memory_address_flag",
                    "4": "register_value",
                    "2": "memory_protection_flag",
                    "5": "memory_flag"
                },
                "0x10000000": {
                    "1": "bit_mask"
                },
                "DWT_CTRL": {
                    "1": "control_register"
                },
                "<original_function_name>": {
                    "1": "enable_memory_protection"
                },
                "_e000ed04": {
                    "1": "memory_protection_register"
                }
            }
        },
        "FUN_00000990": {
            "entrypoint": "0x00000990",
            "current_name": "FUNC_00000990",
            "code": "\nvoid FUNC_00000990(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000990": "FUNC_00000990"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x0000099c",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  undefined4 uStack_18;\n  undefined4 *local_14;\n  dword *local_10;\n  Elf32_Rel *local_c;\n  \n  local_14 = &uStack_18;\n  local_10 = (dword *)&DAT_00007c60;\n  initialize_and_clear_memory_00000db0();\n  local_c = (Elf32_Rel *)&DAT_1fff0000;\n  while (local_c < &uStack_18) {\n    local_c->r_offset = 0xe7fee7fe;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  local_c = Elf32_Rel_ARRAY_1fff0200;\n  while (local_c < (Elf32_Rel *)&DAT_1fff0350) {\n    local_c->r_offset = *local_10;\n    local_10 = local_10 + 1;\n    local_c = (Elf32_Rel *)&local_c->r_info;\n  }\n  local_c = (Elf32_Rel *)&DAT_1fff0350;\n  while (local_c < (undefined4 *)0x1fff0df0) {\n    local_c->r_offset = 0;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  FUNC_00000990();\n  initialize_and_update_data_00000e64();\n  execute_functions_0000459c();\n  initialize_interrupt_handler_00000f8c();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_00000db0",
                "FUN_0000459c",
                "FUN_00000e64",
                "FUN_00000990",
                "FUN_00000f8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000a30": {
            "entrypoint": "0x00000a30",
            "current_name": "handle_nmi_00000a30",
            "code": "\nundefined * handle_nmi_00000a30(void)\n\n{\n  int register_value;\n  \n  handle_kernel_panic(4,\"NMI HANDLER\");\n  return current_stack_ptr + -*(int *)(register_value + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_00000a30": "handle_nmi_00000a30",
                "in_r3": "register_value",
                "stack0xe000ffe0": "stack_top",
                "handle_kernel_panic_00000f04": "handle_kernel_panic",
                "&stack0xe000ffe0": "current_stack_ptr"
            },
            "calling": [],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000a30": {
                    "1": "nmi_handler",
                    "5": "handle_nmi_exception",
                    "18": "handle_nmi"
                },
                "in_r3": {
                    "1": "input_address",
                    "2": "base_address",
                    "5": "register_value",
                    "4": "panic_code"
                },
                "stack0xe000ffe0": {
                    "3": "stack_base_address",
                    "1": "stack_pointer",
                    "2": "panic_stack"
                },
                "in_r3 + 0x4c": {
                    "1": "offset_value"
                },
                "handle_kernel_panic_00000f04": {
                    "3": "handle_kernel_panic"
                },
                "&stack0xe000ffe0": {
                    "1": "current_stack_ptr"
                }
            }
        },
        "FUN_00000cc0": {
            "entrypoint": "0x00000cc0",
            "current_name": "handle_irq_interrupts_00000cc0",
            "code": "\nundefined4 handle_irq_interrupts_00000cc0(void)\n\n{\n  bool is_privileged_mode;\n  undefined4 interrupts_enabled;\n  \n  handle_kernel_panic_00000f04(10,\"DUMMY HANDLER\");\n  interrupts_enabled = 0;\n  is_privileged_mode = (bool)check_if_current_mode_is_privileged();\n  if (is_privileged_mode) {\n    interrupts_enabled = check_if_irq_interrupts_are_enabled();\n  }\n  disable_ir_qinterrupts_function();\n  return interrupts_enabled;\n}\n\n",
            "renaming": {
                "FUN_00000cc0": "handle_irq_interrupts_00000cc0",
                "bVar1": "is_privileged_mode",
                "uVar2": "interrupts_enabled",
                "isCurrentModePrivileged": "check_if_current_mode_is_privileged",
                "isIRQinterruptsEnabled": "check_if_irq_interrupts_are_enabled",
                "disableIRQinterrupts": "disable_ir_qinterrupts_function"
            },
            "calling": [
                "FUN_00000dc0"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000cc0": {
                    "1": "disable_ir_qinterrupts_and_get_ir_qinterrupts_status",
                    "2": "disable_ir_qinterrupts_and_return_irq_state",
                    "3": "disable_ir_qinterrupts_and_return_irq_status",
                    "7": "handle_irq_interrupts"
                },
                "bVar1": {
                    "2": "is_mode_privileged",
                    "1": "is_current_mode_privileged_flag",
                    "7": "is_current_mode_privileged",
                    "14": "is_privileged_mode",
                    "4": "is_privileged"
                },
                "uVar2": {
                    "2": "is_irq_interrupts_enabled",
                    "1": "is_irq_enabled",
                    "3": "interrupt_status",
                    "5": "interrupts_enabled"
                },
                "isCurrentModePrivileged": {
                    "1": "check_privilege_mode",
                    "2": "check_if_current_mode_is_privileged"
                },
                "isIRQinterruptsEnabled": {
                    "1": "check_ir_qenabled"
                },
                "disableIRQinterrupts": {
                    "1": "disable_ir_qinterrupts_function"
                }
            }
        },
        "FUN_00000cd0": {
            "entrypoint": "0x00000cd0",
            "current_name": "get_interrupt_status_00000cd0",
            "code": "\nundefined4 get_interrupt_status_00000cd0(void)\n\n{\n  bool is_privileged_mode;\n  undefined4 interrupts_enabled;\n  \n  interrupts_enabled = 0;\n  is_privileged_mode = (bool)is_privileged_mode();\n  if (is_privileged_mode) {\n    interrupts_enabled = check_irq_interrupts_enabled();\n  }\n  disableIRQinterrupts();\n  return interrupts_enabled;\n}\n\n",
            "renaming": {
                "FUN_00000cd0": "get_interrupt_status_00000cd0",
                "uVar2": "interrupts_enabled",
                "bVar1": "is_privileged_mode",
                "isCurrentModePrivileged": "is_privileged_mode",
                "isIRQinterruptsEnabled": "check_irq_interrupts_enabled"
            },
            "calling": [
                "FUN_00000e58",
                "FUN_00001c84",
                "FUN_00000794",
                "FUN_00000f04",
                "FUN_00002434",
                "FUN_000010d4",
                "FUN_00000428",
                "FUN_000024bc",
                "FUN_00000f8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000cd0": {
                    "1": "get_enabled_interrupt_status",
                    "2": "check_irq_interrupts_status",
                    "6": "get_interrupt_status",
                    "5": "check_interrupt_status",
                    "4": "check_interrupts_enabled"
                },
                "uVar2": {
                    "2": "irq_interrupts_enabled",
                    "10": "interrupts_enabled",
                    "1": "enabled_status",
                    "8": "interrupt_status"
                },
                "bVar1": {
                    "1": "is_current_mode_privileged",
                    "2": "is_mode_privileged",
                    "16": "is_privileged_mode",
                    "10": "is_privileged"
                },
                "isCurrentModePrivileged": {
                    "1": "check_current_mode_privileged",
                    "2": "is_privileged_mode"
                },
                "isIRQinterruptsEnabled": {
                    "1": "is_irq_interrupts_enabled"
                }
            }
        },
        "FUN_00000cf0": {
            "entrypoint": "0x00000cf0",
            "current_name": "check_irq_interrupts_enabled_00000cf0",
            "code": "\nundefined4 check_irq_interrupts_enabled_00000cf0(void)\n\n{\n  bool is_privileged_mode;\n  undefined4 interrupts_enabled;\n  \n  enable_irq_interrupts();\n  interrupts_enabled = 0;\n  is_privileged_mode = (bool)is_current_mode_privileged();\n  if (is_privileged_mode) {\n    interrupts_enabled = is_ir_qinterrupts_enabled();\n  }\n  return interrupts_enabled;\n}\n\n",
            "renaming": {
                "FUN_00000cf0": "check_irq_interrupts_enabled_00000cf0",
                "isCurrentModePrivileged": "is_current_mode_privileged",
                "isIRQinterruptsEnabled": "is_ir_qinterrupts_enabled",
                "bVar1": "is_privileged_mode",
                "uVar2": "interrupts_enabled",
                "enableIRQinterrupts": "enable_irq_interrupts"
            },
            "calling": [
                "FUN_00000930"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000cf0": {
                    "6": "check_irq_interrupts_enabled",
                    "1": "check_irq_interrupts_enabled_status",
                    "5": "check_irq_interrupts",
                    "2": "check_irq_interrupt_status",
                    "4": "check_interrupt_status"
                },
                "isCurrentModePrivileged": {
                    "1": "get_current_mode_privileged",
                    "2": "is_current_mode_privileged"
                },
                "isIRQinterruptsEnabled": {
                    "1": "check_interrupts_enabled",
                    "2": "is_ir_qinterrupts_enabled"
                },
                "bVar1": {
                    "17": "is_privileged_mode",
                    "3": "is_privileged",
                    "8": "is_current_mode_privileged"
                },
                "uVar2": {
                    "1": "are_irq_interrupts_enabled",
                    "14": "interrupts_enabled",
                    "3": "is_interrupts_enabled",
                    "2": "interrupts_enabled_status"
                },
                "enableIRQinterrupts": {
                    "1": "enable_irq_interrupts"
                }
            }
        },
        "FUN_00000d0c": {
            "entrypoint": "0x00000d0c",
            "current_name": "enable_ir_qinterrupts_if_privileged_00000d0c",
            "code": "\nvoid enable_ir_qinterrupts_if_privileged_00000d0c(uint interrupt_flags)\n\n{\n  bool is_privileged;\n  \n  is_privileged = (bool)check_privileged_mode;\n  if (is_privileged) {\n    enable_interrupts((interrupt_flags & 1) == 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d0c": "enable_ir_qinterrupts_if_privileged_00000d0c",
                "param_1": "interrupt_flags",
                "bVar1": "is_privileged",
                "isCurrentModePrivileged()": "check_privileged_mode",
                "isCurrentModePrivileged": "check_privileged_mode",
                "enableIRQinterrupts": "enable_interrupts"
            },
            "calling": [
                "FUN_00001c84",
                "FUN_00002434",
                "FUN_000010d4",
                "FUN_00000428",
                "FUN_000024bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000d0c": {
                    "2": "enable_ir_qinterrupts_if_needed",
                    "9": "enable_ir_qinterrupts_if_privileged",
                    "1": "configure_interrupts",
                    "5": "enable_irq_interrupts_if_needed",
                    "4": "enable_interrupts_if_privileged",
                    "3": "enable_irq_interrupts_if_privileged"
                },
                "param_1": {
                    "2": "input_param",
                    "1": "interrupt_bits",
                    "8": "interrupt_flags",
                    "5": "interrupt_flag"
                },
                "bVar1": {
                    "1": "is_mode_privileged",
                    "7": "is_privileged_mode",
                    "13": "is_privileged"
                },
                "isCurrentModePrivileged()": {
                    "1": "check_privileged_mode"
                },
                "enableIRQinterrupts()": {
                    "1": "set_irq_interrupts_enabled"
                },
                "(param_1 & 1) == 1": {
                    "1": "are_interrupts_enabled"
                },
                "isCurrentModePrivileged": {
                    "3": "check_privileged_mode",
                    "2": "check_if_privileged_mode",
                    "1": "check_if_privileged"
                },
                "enableIRQinterrupts": {
                    "1": "enable_interrupts_with_flag",
                    "2": "enable_irq_interrupts",
                    "4": "enable_interrupts"
                }
            }
        },
        "FUN_00000d2a": {
            "entrypoint": "0x00000d2a",
            "current_name": "get_exception_number_00000d2a",
            "code": "\nuint get_exception_number_00000d2a(void)\n\n{\n  bool is_privileged_mode;\n  uint exception_number;\n  \n  exception_number = 0;\n  is_privileged_mode = (bool)is_privileged_mode();\n  if (is_privileged_mode) {\n    exception_number = fetch_current_exception_number();\n    exception_number = exception_number & 0x1f;\n  }\n  return exception_number;\n}\n\n",
            "renaming": {
                "FUN_00000d2a": "get_exception_number_00000d2a",
                "bVar1": "is_privileged_mode",
                "uVar2": "exception_number",
                "isCurrentModePrivileged": "is_privileged_mode",
                "getCurrentExceptionNumber": "fetch_current_exception_number"
            },
            "calling": [
                "FUN_00000738"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000d2a": {
                    "1": "get_active_exception_number",
                    "26": "get_exception_number"
                },
                "bVar1": {
                    "4": "is_current_mode_privileged",
                    "20": "is_privileged_mode",
                    "5": "is_privileged"
                },
                "uVar2": {
                    "1": "exception_number_bits",
                    "29": "exception_number"
                },
                "isCurrentModePrivileged": {
                    "2": "is_privileged_mode",
                    "1": "is_current_mode_privileged"
                },
                "getCurrentExceptionNumber": {
                    "1": "fetch_current_exception_number"
                }
            }
        },
        "FUN_00000d44": {
            "entrypoint": "0x00000d44",
            "current_name": "calculate_offset_00000d44",
            "code": "\nint calculate_offset_00000d44(uint input_value,int multiplier)\n\n{\n  return multiplier * 4 + (input_value & 0xf0000000 | (input_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00000d44": "calculate_offset_00000d44",
                "param_1": "input_value",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00000d76"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000d44": {
                    "1": "multiply_and_shift",
                    "19": "calculate_offset",
                    "8": "calculate_result",
                    "2": "calculate_new_value"
                },
                "param_1": {
                    "2": "number",
                    "1": "input1",
                    "20": "input_value"
                },
                "param_2": {
                    "1": "index",
                    "2": "value2",
                    "25": "multiplier"
                },
                "param_3": {
                    "1": "constant_value"
                },
                "param_4": {
                    "1": "constant_value"
                },
                "param_5": {
                    "2": "final_value"
                },
                "F_UN000d44": {
                    "1": "calculate_offset"
                },
                "temp_1": {
                    "1": "upper_bits"
                },
                "temp_2": {
                    "1": "lower_bits"
                },
                "temp_3": {
                    "1": "offset"
                },
                "0xf0000000": {
                    "1": "mask_high_bits"
                },
                "0xfffff": {
                    "1": "mask_low_bits"
                },
                "0x2000000": {
                    "1": "constant_offset"
                },
                "PTR_": {
                    "1": "unchanged_variable"
                },
                "DAT_": {
                    "1": "unchanged_variable"
                }
            }
        },
        "FUN_00000d76": {
            "entrypoint": "0x00000d76",
            "current_name": "clear_memory_00000d76",
            "code": "\nvoid clear_memory_00000d76(undefined4 offset,undefined value)\n\n{\n  undefined4 *offset_pointer;\n  \n  offset_pointer = (undefined4 *)calculate_offset_00000d44(offset,value);\n  *offset_pointer = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d76": "clear_memory_00000d76",
                "param_1": "offset",
                "param_2": "value",
                "puVar1": "offset_pointer"
            },
            "calling": [
                "FUN_00000d9c"
            ],
            "called": [
                "FUN_00000d44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000d76": {
                    "1": "initialize_memory",
                    "14": "clear_memory",
                    "2": "initialize_offset_to_zero",
                    "4": "clear_offset",
                    "3": "clear_offset_value"
                },
                "param_1": {
                    "3": "address",
                    "2": "offset_pointer",
                    "1": "input_pointer",
                    "8": "offset",
                    "4": "input1"
                },
                "param_2": {
                    "3": "size",
                    "4": "offset",
                    "1": "offset_param",
                    "5": "value"
                },
                "puVar1": {
                    "1": "memory_pointer",
                    "4": "memory_address",
                    "8": "offset_pointer",
                    "2": "memory_location",
                    "3": "result_pointer"
                }
            }
        },
        "FUN_00000d9c": {
            "entrypoint": "0x00000d9c",
            "current_name": "clear_memory_00000d9c",
            "code": "\nvoid clear_memory_00000d9c(void)\n\n{\n  clear_memory_00000d9c(0x40048040,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d9c": "clear_memory_00000d9c",
                "clear_memory_00000d76": "clear_memory"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [
                "FUN_00000d76"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000d9c": {
                    "30": "clear_memory",
                    "1": "initialize_memory"
                },
                "CLR_MEM_ADDR": {
                    "1": "address"
                },
                "CLR_MEM_VALUE": {
                    "1": "value"
                },
                "0x40048040": {
                    "8": "memory_address",
                    "1": "base_address"
                },
                "clear_memory_00000d76": {
                    "1": "clear_memory_address",
                    "5": "clear_memory",
                    "2": "clear_memory_helper",
                    "4": "clear_memory_block"
                },
                "PTR_PARAM_1": {
                    "1": "address"
                },
                "PTR_PARAM_2": {
                    "1": "value"
                },
                "PTR_param1": {
                    "1": "address"
                },
                "PTR_param2": {
                    "1": "value"
                },
                "": {
                    "3": ""
                },
                "void": {
                    "1": ""
                },
                "return": {
                    "1": ""
                },
                "<original_parameter_name>": {
                    "1": "<new_parameter_name>"
                },
                "<original_variable_name>": {
                    "1": "<new_variable_name>"
                },
                "_MemoryAddress": {
                    "1": "address"
                },
                "_MemoryValue": {
                    "1": "value"
                }
            }
        },
        "FUN_00000db0": {
            "entrypoint": "0x00000db0",
            "current_name": "initialize_and_clear_memory_00000db0",
            "code": "\nvoid initialize_and_clear_memory_00000db0(void)\n\n{\n  initialize_memory();\n  clear_memory();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000db0": "initialize_and_clear_memory_00000db0",
                "initialize_memory_00000dcc": "initialize_memory",
                "clear_memory_00000d9c": "clear_memory"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000d9c",
                "FUN_00000dcc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000db0": {
                    "31": "initialize_and_clear_memory"
                },
                "initialize_memory_00000dcc": {
                    "1": "init_memory",
                    "28": "initialize_memory"
                },
                "clear_memory_00000d9c": {
                    "29": "clear_memory"
                },
                "": {
                    "1": ""
                }
            }
        },
        "FUN_00000dc0": {
            "entrypoint": "0x00000dc0",
            "current_name": "handle_interrupts_00000dc0",
            "code": "\nvoid handle_interrupts_00000dc0(void)\n\n{\n  handle_irq_interrupts();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dc0": "handle_interrupts_00000dc0",
                "handle_irq_interrupts_00000cc0": "handle_irq_interrupts"
            },
            "calling": [],
            "called": [
                "FUN_00000cc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000dc0": {
                    "8": "handle_irq_interrupts",
                    "22": "handle_interrupts",
                    "1": "handle_interrupt"
                },
                "handle_irq_interrupts_00000cc0": {
                    "1": "trigger_interrupts",
                    "3": "handle_interrupts",
                    "19": "handle_irq_interrupts",
                    "2": "handle_irq_interrupts_internal"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                }
            }
        },
        "FUN_00000dcc": {
            "entrypoint": "0x00000dcc",
            "current_name": "initialize_memory_00000dcc",
            "code": "\n\n\nvoid initialize_memory_00000dcc(void)\n\n{\n  temporary_variableDATtemporary_variable4005200e = 0xd928;\n  temporary_variableDATtemporary_variable40052000 = 0xd2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dcc": "initialize_memory_00000dcc",
                "_": "temporary_variable"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000dcc": {
                    "10": "initialize_data",
                    "2": "initialize_settings",
                    "6": "initialize_registers",
                    "13": "initialize_memory"
                },
                "_DAT_4005200e": {
                    "1": "memory_offset",
                    "2": "initial_value",
                    "3": "register_value",
                    "4": "memory_address"
                },
                "_DAT_40052000": {
                    "2": "data_value",
                    "1": "initialization_value",
                    "3": "memory_address"
                },
                "_": {
                    "1": "temporary_variable"
                },
                "original_function_name": {
                    "1": "more_descriptive_function_name"
                },
                "original_variable_name_1": {
                    "1": "initial_value"
                },
                "original_variable_name_2": {
                    "1": "value_to_set"
                },
                "": {
                    "1": ""
                },
                "___": {
                    "1": "buffer_address"
                },
                "d928": {
                    "1": "upper_limit"
                },
                "d2": {
                    "1": "initial_value"
                }
            }
        },
        "FUN_00000df4": {
            "entrypoint": "0x00000df4",
            "current_name": "initialize_configuration_00000df4",
            "code": "\nvoid initialize_configuration_00000df4(void)\n\n{\n  update_configuration(0,0x1c200,0x12b5,0x1fff0204);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000df4": "initialize_configuration_00000df4",
                "update_configuration_000013b8": "update_configuration"
            },
            "calling": [
                "FUN_00000410"
            ],
            "called": [
                "FUN_000013b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000df4": {
                    "2": "configure_device",
                    "15": "initialize_configuration",
                    "12": "update_configuration"
                },
                "_param_1": {
                    "1": "param1"
                },
                "_param_2": {
                    "1": "param2"
                },
                "_param_3": {
                    "1": "param3"
                },
                "_param_4": {
                    "1": "param4"
                },
                "update_configuration_000013b8": {
                    "1": "update_config_params",
                    "19": "update_configuration"
                },
                "0": {
                    "3": "parameter1",
                    "1": "parameter_1",
                    "13": "param1"
                },
                "0x1c200": {
                    "13": "param2",
                    "3": "parameter2",
                    "1": "arg2"
                },
                "0x12b5": {
                    "1": "param_3",
                    "13": "param3",
                    "3": "parameter3"
                },
                "0x1fff0204": {
                    "13": "param4",
                    "3": "parameter4",
                    "1": "parameter_4"
                },
                "param_1": {
                    "1": "param1"
                },
                "local_var_1": {
                    "1": "var1"
                },
                "local_var_2": {
                    "1": "var2"
                },
                "R_1": {
                    "1": "param_1"
                },
                "R_2": {
                    "1": "param_2"
                },
                "R_3": {
                    "1": "param_3"
                },
                "R_4": {
                    "1": "param_4"
                },
                "<parameter_1>": {
                    "1": "<setting_1>"
                },
                "<parameter_2>": {
                    "1": "<setting_2>"
                },
                "<parameter_3>": {
                    "1": "<setting_3>"
                },
                "<parameter_4>": {
                    "1": "<setting_4>"
                },
                "<original_parameter_name_1>": {
                    "1": "<new_parameter_name_1>"
                },
                "<original_parameter_name_2>": {
                    "1": "<new_parameter_name_2>"
                },
                "<original_parameter_name_n>": {
                    "1": "<new_parameter_name_n>"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "uint_param_1": {
                    "1": "device_id"
                },
                "uint_param_2": {
                    "1": "config_value_1"
                },
                "uint_param_3": {
                    "1": "config_value_2"
                },
                "uint_param_4": {
                    "1": "config_value_3"
                },
                "original_parameter_name_1": {
                    "1": "parameter1"
                },
                "original_parameter_name_2": {
                    "1": "parameter2"
                },
                "original_variable_name_1": {
                    "1": "variable1"
                },
                "original_variable_name_2": {
                    "1": "variable2"
                },
                "param1": {
                    "1": "device_id"
                },
                "param2": {
                    "1": "memory_start"
                },
                "param3": {
                    "1": "value1"
                },
                "param4": {
                    "1": "value2"
                }
            }
        },
        "FUN_00000e14": {
            "entrypoint": "0x00000e14",
            "current_name": "copy_and_increment_loop_00000e14",
            "code": "\nundefined4 copy_and_increment_loop_00000e14(undefined4 source_address,undefined4 destination_address)\n\n{\n  undefined4 result;\n  \n  result = copy_and_increment_loop_00000e14_000012e2(0x1fff0204,source_address,destination_address);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000e14": "copy_and_increment_loop_00000e14",
                "param_1": "source_address",
                "param_2": "destination_address",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00000490"
            ],
            "called": [
                "FUN_000012e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000e14": {
                    "1": "copy_and_increment_wrapper",
                    "16": "copy_and_increment_loop",
                    "10": "copy_and_increment",
                    "3": "copy_data_and_increment"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "source_data",
                    "14": "source_address",
                    "5": "source",
                    "3": "src"
                },
                "param_2": {
                    "5": "destination",
                    "1": "destination_pointer",
                    "2": "destination_data",
                    "14": "destination_address"
                },
                "uVar1": {
                    "1": "status",
                    "19": "result"
                }
            }
        },
        "FUN_00000e38": {
            "entrypoint": "0x00000e38",
            "current_name": "copy_and_return_param_00000e38",
            "code": "\nundefined4 copy_and_return_param_00000e38(undefined4 source,undefined4 destination)\n\n{\n  copy_data_000015d0(0,source,destination);\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_00000e38": "copy_and_return_param_00000e38",
                "param_1": "source",
                "param_2": "destination"
            },
            "calling": [
                "FUN_00004dee"
            ],
            "called": [
                "FUN_000015d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000e38": {
                    "1": "copy_data",
                    "5": "copy_and_return",
                    "4": "copy_data_and_return",
                    "13": "copy_and_return_param"
                },
                "param_1": {
                    "2": "source_data",
                    "22": "source",
                    "1": "src"
                },
                "param_2": {
                    "22": "destination",
                    "1": "destination_buffer",
                    "2": "destination_data"
                }
            }
        },
        "FUN_00000e58": {
            "entrypoint": "0x00000e58",
            "current_name": "infinite_loop_00000e58",
            "code": "\nvoid infinite_loop_00000e58(void)\n\n{\n  get_interrupt_status();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000e58": "infinite_loop_00000e58",
                "get_interrupt_status_00000cd0": "get_interrupt_status"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00000cd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000e58": {
                    "1": "handle_interrupt",
                    "16": "infinite_loop",
                    "4": "continuous_loop",
                    "3": "run_infinite_loop",
                    "2": "check_interrupt_status"
                },
                "get_interrupt_status_00000cd0": {
                    "1": "get_status",
                    "27": "get_interrupt_status"
                }
            }
        },
        "FUN_00000e64": {
            "entrypoint": "0x00000e64",
            "current_name": "initialize_and_update_data_00000e64",
            "code": "\n\n\nvoid initialize_and_update_data_00000e64(void)\n\n{\n  _DAT_40048038 = _DAT_40048038 | 0x200;\n  _DAT_40049048 = _DAT_40049048 & 0xfefff8ff;\n  initialize_and_setup();\n  update_data(0x2056,0x80);\n  update_data(0x511a,0x80);\n  update_data(0x2055,0x80);\n  set_bit_at_index(0x2056);\n  set_bit_at_index(0x511a);\n  set_bit_at_index(0x2055);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000e64": "initialize_and_update_data_00000e64",
                "initialize_and_setup_00001274": "initialize_and_setup",
                "update_data_00001eea": "update_data",
                "set_bit_at_index_00001ff6": "set_bit_at_index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00001ff6",
                "FUN_00001eea",
                "FUN_00001274"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000e64": {
                    "1": "setup_and_initialize",
                    "4": "initialize_system",
                    "2": "initialize_and_setup_data",
                    "17": "initialize_and_update_data"
                },
                "initialize_and_setup_00001274": {
                    "1": "initialize_data_1274",
                    "13": "initialize_and_setup",
                    "5": "initialize_setup"
                },
                "update_data_00001eea": {
                    "1": "update_device_data",
                    "27": "update_data"
                },
                "set_bit_at_index_00001ff6": {
                    "28": "set_bit_at_index"
                },
                "_DAT_40048038": {
                    "2": "flag_register",
                    "1": "status_register"
                },
                "_DAT_40049048": {
                    "1": "data_register_2",
                    "2": "register2"
                }
            }
        },
        "FUN_00000ed8": {
            "entrypoint": "0x00000ed8",
            "current_name": "initialize_data_00000ed8",
            "code": "\nvoid initialize_data_00000ed8(void)\n\n{\n  undefined4 link_register;\n  \n  process_and_initialize_data_00004c84(&DAT_00006f58,link_register);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ed8": "initialize_data_00000ed8",
                "in_lr": "link_register"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_00000ed8(void)\n\n{\n  undefined4 in_lr;\n  \n  FUNC_00004c84(&DAT_00006f58,in_lr);\n  return;\n}\n\n",
            "additional_data": {
                "FUN_00000ed8": {
                    "1": "load_data_from_binary",
                    "2": "process_data",
                    "26": "initialize_data"
                },
                "in_lr": {
                    "6": "return_address",
                    "15": "link_register",
                    "2": "initial_return_address",
                    "1": "stack_pointer"
                },
                "FUNC_00004c84": {
                    "1": "call_function",
                    "5": "process_data"
                },
                "DAT_00006f58": {
                    "1": "data_buffer"
                }
            }
        },
        "FUN_00000ef8": {
            "entrypoint": "0x00000ef8",
            "current_name": "FUNC_00000ef8",
            "code": "\nvoid FUNC_00000ef8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ef8": "FUNC_00000ef8"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00000f04": {
            "entrypoint": "0x00000f04",
            "current_name": "handle_kernel_panic_00000f04",
            "code": "\nvoid handle_kernel_panic_00000f04(char panic_type,undefined4 panic_message)\n\n{\n  undefined4 stack_var;\n  code *jump_table;\n  undefined4 message;\n  char type;\n  \n  message = panic_message;\n  type = panic_type;\n  if (DAT_1fff0468 == 0) {\n    DAT_1fff0468 = 1;\n    if (panic_type == '\\x03') {\n      initialize_data();\n    }\n    print_message(\"*** RIOT kernel panic:\\n%s\\n\\n\",message);\n    print_process_info();\n    print_message(&DAT_00006f78);\n    print_message(\"*** halted.\\n\\n\");\n  }\n  get_interrupt_status();\n  FUNC_00000ef8();\n  jump_table = (code *)0xf4d;\n  infinite_loop();\n  stack_var = (int)&stack_var + 1;\n  FUNC_00002400();\n  print_message(\"main(): This is RIOT! (Version: 2018.04-vm-HEAD)\\n\");\n  initialize_system();\n                    /* WARNING: Could not recover jumptable at 0x00000f7a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f04": "handle_kernel_panic_00000f04",
                "param_1": "panic_type",
                "param_2": "panic_message",
                "local_10": "message",
                "local_9": "type",
                "uStack_18": "stack_var",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "initialize_data_00000ed8": "initialize_data",
                "process_and_initialize_data_00004c84": "print_message",
                "print_process_information_0000211c": "print_process_info",
                "get_interrupt_status_00000cd0": "get_interrupt_status",
                "infinite_loop_00000e58": "infinite_loop",
                "initialize_system_000023a4": "initialize_system"
            },
            "calling": [
                "FUN_00000fec",
                "FUN_00000cc0",
                "FUN_00003ec4",
                "FUN_000013b8",
                "FUN_00001034",
                "FUN_00000a30"
            ],
            "called": [
                "FUN_0000211c",
                "FUN_00000e58",
                "FUN_00000ed8",
                "FUN_00002400",
                "FUN_00000cd0",
                "FUN_00004c84",
                "FUN_00000ef8",
                "FUN_000023a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000f04": {
                    "1": "main",
                    "3": "initialize_and_print_panic_message",
                    "2": "handle_panic",
                    "4": "kernel_panic_handler",
                    "8": "handle_kernel_panic"
                },
                "param_1": {
                    "11": "panic_type",
                    "1": "input_param",
                    "3": "error_code",
                    "4": "panic_code"
                },
                "param_2": {
                    "1": "parameter",
                    "2": "version",
                    "18": "panic_message",
                    "3": "message"
                },
                "local_10": {
                    "1": "initialized_value",
                    "2": "panic_message_ptr",
                    "6": "message",
                    "3": "panic_message_copy"
                },
                "local_9": {
                    "1": "panic_type_char",
                    "3": "type",
                    "2": "panic_type_copy"
                },
                "uStack_18": {
                    "1": "stack_pointer",
                    "3": "stack_var",
                    "2": "stack_variable"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "5": "jump_table",
                    "1": "jump_table_function",
                    "3": "jumptable"
                },
                "initialize_data_00000ed8": {
                    "2": "initialize_kernel_data"
                },
                "process_and_initialize_data_00004c84": {
                    "1": "process_and_print_message_2"
                },
                "print_process_information_0000211c": {
                    "1": "print_process_info"
                },
                "get_interrupt_status_00000cd0": {
                    "4": "get_interrupt_status"
                },
                "FUNC_00000ef8": {
                    "1": "process_interrupt"
                },
                "infinite_loop_00000e58": {
                    "2": "infinite_loop"
                },
                "FUNC_00002400": {
                    "1": "perform_function2"
                },
                "initialize_system_000023a4": {
                    "4": "initialize_system"
                },
                "DAT_1fff0468": {
                    "1": "is_panic_initialized"
                },
                "DAT_00006f78": {
                    "1": "kernel_halt_message"
                },
                "process_and_initialize_data_00004c84_2": {
                    "1": "log_to_console"
                }
            }
        },
        "FUN_00000f8c": {
            "entrypoint": "0x00000f8c",
            "current_name": "initialize_interrupt_handler_00000f8c",
            "code": "\nvoid initialize_interrupt_handler_00000f8c(void)\n\n{\n  uint interrupt_status;\n  undefined4 *memory_pointer;\n  uint memory_size;\n  int interrupt_flag;\n  int *interrupt_flag_ptr;\n  undefined4 interrupt_handler_result;\n  undefined4 unused_var_2;\n  undefined4 unused_var_1;\n  dword rel_info;\n  \n  get_interrupt_status();\n  rel_info = array1[3].r_info;\n  unused_var_1 = 0;\n  unused_var_2 = 0xf81;\n  initialize_memory(&DAT_1fff0a6c,0x100,0xf,0xc);\n  rel_info = array1[3].r_offset;\n  unused_var_1 = 0;\n  unused_var_2 = 0xf5d;\n  memory_size = 0xc;\n  initialize_memory(&DAT_1fff046c,0x600,7);\n  interrupt_handler_result = 0xfd3;\n  interrupt_status = execute_interrupt_handler();\n  interrupt_status = interrupt_status >> 0x1e;\n  memory_pointer = (undefined4 *)(memory_size * 0x100);\n  interrupt_flag = (memory_size >> 0x1d) << 0x11;\n  interrupt_flag_ptr = &interrupt_flag;\n  if ((interrupt_status & interrupt_status - 1) != 0) {\n    handle_kernel_panic(3,\"FAILED ASSERTION.\");\n  }\n  *memory_pointer = 0;\n  memory_pointer[1] = 0;\n  memory_pointer[2] = interrupt_status - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f8c": "initialize_interrupt_handler_00000f8c",
                "iStack_24": "interrupt_flag",
                "piStack_20": "interrupt_flag_ptr",
                "uStack_1c": "interrupt_handler_result",
                "uVar1": "interrupt_status",
                "uVar3": "memory_size",
                "puVar2": "memory_pointer",
                "local_10": "rel_info",
                "local_14": "unused_var_1",
                "local_18": "unused_var_2",
                "get_interrupt_status_00000cd0": "get_interrupt_status",
                "Elf32_Rel_ARRAY_1fff0200": "array1",
                "initialize_memory_000010d4": "initialize_memory",
                "execute_interrupt_handler_00000930": "execute_interrupt_handler",
                "handle_kernel_panic_00000f04": "handle_kernel_panic"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_000010d4",
                "FUN_00000930"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000f8c": {
                    "1": "initialize_interrupt_handling",
                    "23": "initialize_interrupt_handler",
                    "3": "initialize_interrupts"
                },
                "iStack_24": {
                    "1": "status_flag",
                    "2": "offset",
                    "3": "shift_amount",
                    "5": "interrupt_flag"
                },
                "piStack_20": {
                    "1": "p_interrupt_flags",
                    "2": "interrupt_flag_ptr"
                },
                "uStack_1c": {
                    "1": "unused_var3",
                    "2": "handler_offset",
                    "5": "interrupt_handler_result"
                },
                "uVar1": {
                    "3": "interrupt_result",
                    "19": "interrupt_status",
                    "1": "interrupt_bits"
                },
                "uVar3": {
                    "1": "memory_block_index",
                    "13": "memory_size",
                    "2": "interrupt_handler_index",
                    "4": "memory_index"
                },
                "puVar2": {
                    "1": "interrupt_handler_ptr",
                    "2": "memory_address",
                    "8": "memory_pointer",
                    "4": "interrupt_handler",
                    "5": "memory_ptr"
                },
                "local_10": {
                    "1": "memory_block_offset",
                    "3": "rel_info"
                },
                "local_14": {
                    "1": "dummy_variable_1"
                },
                "local_18": {
                    "1": "unused_var2"
                },
                "get_interrupt_status_00000cd0": {
                    "1": "get_interrupt_status"
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "1": "array1"
                },
                "initialize_memory_000010d4": {
                    "1": "initialize_memory"
                },
                "DAT_1fff0a6c": {
                    "1": "memory_block1"
                },
                "DAT_1fff046c": {
                    "1": "memory_block2"
                },
                "execute_interrupt_handler_00000930": {
                    "2": "execute_interrupt_handler"
                },
                "handle_kernel_panic_00000f04": {
                    "2": "handle_kernel_panic"
                },
                "local_1c": {
                    "1": "handler_result"
                }
            }
        },
        "FUN_00000fec": {
            "entrypoint": "0x00000fec",
            "current_name": "initialize_array_00000fec",
            "code": "\nvoid initialize_array_00000fec(undefined4 *array,uint size)\n\n{\n  if ((size & size - 1) != 0) {\n    handle_panic(3,\"FAILED ASSERTION.\");\n  }\n  *array = 0;\n  array[1] = 0;\n  array[2] = size - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000fec": "initialize_array_00000fec",
                "param_1": "array",
                "param_2": "size",
                "param_1[1]": "array[1]",
                "param_1[2]": "array[2]",
                "handle_kernel_panic_00000f04": "handle_panic"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000fec": {
                    "3": "initialize_param_array",
                    "1": "initialize_descriptor",
                    "9": "initialize_memory"
                },
                "param_1": {
                    "4": "memory_block",
                    "12": "array",
                    "2": "memory",
                    "1": "memory_array"
                },
                "param_2": {
                    "3": "memory_size",
                    "2": "block_size",
                    "5": "array_size",
                    "14": "size",
                    "1": "region_size"
                },
                "*param_1": {
                    "6": "array[0]",
                    "1": "output_ptr[0]",
                    "2": "output_array[0]"
                },
                "param_1[1]": {
                    "2": "memory_block[1]",
                    "1": "output_ptr[1]",
                    "6": "array[1]"
                },
                "param_1[2]": {
                    "3": "array[2]",
                    "2": "memory[2]",
                    "1": "output_ptr[2]"
                },
                "param_2 - 1": {
                    "1": "block_size_minus_one",
                    "2": "last_index"
                },
                "handle_kernel_panic_00000f04": {
                    "1": "panic_handler",
                    "2": "handle_panic"
                },
                "DAT_00000f14": {
                    "1": "assertion"
                }
            }
        },
        "FUN_00001034": {
            "entrypoint": "0x00001034",
            "current_name": "update_pointer_list_00001034",
            "code": "\nvoid update_pointer_list_00001034(int **list,int data)\n\n{\n  int **current_pointer;\n  \n  if (8 < *(byte *)(data + 4)) {\n    handle_kernel_panic_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  for (current_pointer = list;\n      (*current_pointer != (int *)0x0 && (*(byte *)((int)*current_pointer + -3) <= *(byte *)(data + 5)));\n      current_pointer = (int **)*current_pointer) {\n  }\n  *(int **)(data + 8) = *current_pointer;\n  *current_pointer = (int *)(int **)(data + 8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001034": "update_pointer_list_00001034",
                "param_1": "list",
                "param_2": "data",
                "local_1c": "current_pointer"
            },
            "calling": [
                "FUN_00002434"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001034": {
                    "1": "find_next_entry",
                    "2": "find_insert_position",
                    "4": "update_pointer_list"
                },
                "param_1": {
                    "2": "pointer_array",
                    "1": "ptr_list",
                    "7": "list",
                    "4": "linked_list",
                    "5": "pointer_list"
                },
                "param_2": {
                    "6": "data",
                    "1": "entry",
                    "2": "input_data",
                    "5": "index"
                },
                "local_1c": {
                    "8": "current_node",
                    "5": "current_ptr",
                    "2": "current_entry",
                    "3": "current_element",
                    "1": "current_value",
                    "9": "current_pointer"
                }
            }
        },
        "FUN_000010a0": {
            "entrypoint": "0x000010a0",
            "current_name": "calculate_offset_000010a0",
            "code": "\nint calculate_offset_000010a0(int *array)\n\n{\n  int *current_element;\n  \n  for (current_element = array; (int *)*current_element == current_element; current_element = current_element + 1) {\n  }\n  return (int)current_element - (int)array;\n}\n\n",
            "renaming": {
                "FUN_000010a0": "calculate_offset_000010a0",
                "param_1": "array",
                "local_c": "current_element"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000010a0": {
                    "4": "calculate_distance",
                    "2": "count_elements",
                    "8": "calculate_offset",
                    "1": "get_difference",
                    "3": "calculate_array_offset"
                },
                "param_1": {
                    "1": "pointers_array",
                    "23": "array"
                },
                "local_c": {
                    "23": "current_element",
                    "3": "current_ptr",
                    "1": "current_address",
                    "2": "current_pointer"
                },
                "*param_1": {
                    "1": "array"
                }
            }
        },
        "FUN_000010d4": {
            "entrypoint": "0x000010d4",
            "current_name": "initialize_memory_000010d4",
            "code": "\nint initialize_memory_000010d4(uint start_address,int size,byte byte_count,uint flags,undefined4 param5,\n                undefined4 param6,undefined4 param7)\n\n{\n  undefined4 interrupt_status;\n  undefined4 initialized_value;\n  int result;\n  uint aligned_size;\n  undefined4 *memory_pointer;\n  int adjusted_size;\n  uint aligned_address;\n  uint loop_counter;\n  short available_index;\n  short available_index;\n  \n  if (byte_count < 0x10) {\n    adjusted_size = size;\n    aligned_address = start_address;\n    if ((start_address & 3) != 0) {\n      adjusted_size = 4 - (start_address & 3);\n      aligned_address = adjusted_size + start_address;\n      adjusted_size = size - adjusted_size;\n    }\n    aligned_size = adjusted_size - 0x30U & 0xfffffffc;\n    memory_pointer = (undefined4 *)(aligned_size + aligned_address);\n    if ((flags & 8) == 0) {\n      *(uint *)aligned_address = aligned_address;\n    }\n    else {\n      for (loop_counter = aligned_address; loop_counter < aligned_size + aligned_address; loop_counter = loop_counter + 4) {\n        *(uint *)loop_counter = loop_counter;\n      }\n    }\n    interrupt_status = get_interrupt_status_00000cd0();\n    available_index = 0;\n    for (available_index = 1; available_index < 0x21; available_index = available_index + 1) {\n      if (*(int *)(&DAT_1fff0358 + available_index * 4) == 0) {\n        available_index = available_index;\n        break;\n      }\n    }\n    if (available_index == 0) {\n      enable_ir_qinterrupts_if_privileged_00000d0c(interrupt_status);\n      result = -0x8b;\n    }\n    else {\n      *(undefined4 **)(&DAT_1fff0358 + available_index * 4) = memory_pointer;\n      *(short *)((int)memory_pointer + 6) = available_index;\n      initialized_value = initialize_memory_000010d4_000007dc(param5,param6,aligned_address,aligned_size);\n      *memory_pointer = initialized_value;\n      memory_pointer[9] = aligned_address;\n      memory_pointer[0xb] = size;\n      memory_pointer[10] = param7;\n      *(byte *)((int)memory_pointer + 5) = byte_count;\n      *(undefined *)(memory_pointer + 1) = 0;\n      memory_pointer[2] = 0;\n      memory_pointer[3] = 0;\n      memory_pointer[4] = 0;\n      initialize_array_00000fec(memory_pointer + 5,0);\n      memory_pointer[8] = 0;\n      DAT_1fff0350 = DAT_1fff0350 + 1;\n      if ((flags & 1) == 0) {\n        update_value_00000698(memory_pointer,10);\n        if ((flags & 4) == 0) {\n          enable_ir_qinterrupts_if_privileged_00000d0c(interrupt_status);\n          check_exception_and_set_flag_00000738(byte_count);\n          return (int)available_index;\n        }\n      }\n      else {\n        update_value_00000698(memory_pointer,1);\n      }\n      enable_ir_qinterrupts_if_privileged_00000d0c(interrupt_status);\n      result = (int)available_index;\n    }\n  }\n  else {\n    result = -0x16;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000010d4": "initialize_memory_000010d4",
                "param_1": "start_address",
                "param_2": "size",
                "param_3": "byte_count",
                "param_4": "flags",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "uVar1": "interrupt_status",
                "uVar2": "initialized_value",
                "iVar3": "result",
                "uVar4": "aligned_size",
                "puVar5": "memory_pointer",
                "local_30": "adjusted_size",
                "local_2c": "aligned_address",
                "local_10": "loop_counter",
                "local_c": "available_index",
                "local_a": "available_index"
            },
            "calling": [
                "FUN_00000f8c"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000fec",
                "FUN_00000738",
                "FUN_00000cd0",
                "FUN_000007dc",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000010d4": {
                    "9": "initialize_memory_block",
                    "2": "initialize_memory_allocation",
                    "1": "initialize_buffer",
                    "3": "initialize_data_structure",
                    "15": "initialize_memory"
                },
                "param_1": {
                    "9": "address",
                    "2": "input_size",
                    "3": "base_address",
                    "1": "input_value1",
                    "13": "start_address"
                },
                "param_2": {
                    "1": "block_size",
                    "21": "size",
                    "2": "length"
                },
                "param_3": {
                    "3": "block_size",
                    "2": "length",
                    "1": "num_elements",
                    "13": "byte_count"
                },
                "param_4": {
                    "2": "flag",
                    "1": "parameter_flags",
                    "27": "flags"
                },
                "param_5": {
                    "21": "param5",
                    "6": "param_5",
                    "1": "val1",
                    "2": "arg1"
                },
                "param_6": {
                    "1": "val2",
                    "2": "arg2",
                    "6": "param_6",
                    "21": "param6"
                },
                "param_7": {
                    "6": "param_7",
                    "1": "val3",
                    "21": "param7",
                    "2": "arg3"
                },
                "uVar1": {
                    "31": "interrupt_status"
                },
                "uVar2": {
                    "1": "init_value",
                    "11": "initialized_value",
                    "3": "memory_value",
                    "2": "result",
                    "6": "initialized_memory"
                },
                "iVar3": {
                    "23": "result",
                    "6": "return_value",
                    "1": "return_val"
                },
                "uVar4": {
                    "1": "block_size",
                    "8": "adjusted_size",
                    "15": "aligned_size"
                },
                "puVar5": {
                    "2": "data_structure_pointer",
                    "1": "allocated_memory_block",
                    "4": "block_ptr",
                    "8": "memory_pointer"
                },
                "local_30": {
                    "2": "aligned_size_temp",
                    "1": "aligned_input_size",
                    "9": "adjusted_size",
                    "5": "aligned_size"
                },
                "local_2c": {
                    "5": "adjusted_address",
                    "1": "aligned_buffer",
                    "11": "aligned_address",
                    "2": "aligned_start_address",
                    "7": "adjusted_start_address"
                },
                "local_10": {
                    "12": "loop_counter",
                    "2": "counter",
                    "1": "end_address",
                    "3": "loop_variable",
                    "4": "loop_index"
                },
                "local_c": {
                    "1": "block_index",
                    "2": "index",
                    "3": "available_index"
                },
                "local_a": {
                    "1": "new_index",
                    "3": "found_index",
                    "2": "first_available_slot",
                    "5": "available_index"
                },
                "DAT_1fff0358": {
                    "1": "data_table"
                },
                "DAT_1fff0350": {
                    "1": "counter"
                }
            }
        },
        "FUN_00001274": {
            "entrypoint": "0x00001274",
            "current_name": "initialize_and_setup_00001274",
            "code": "\nvoid initialize_and_setup_00001274(void)\n\n{\n  initialize_data();\n  DAT_4007e000 = DAT_4007e000 | 0x28;\n  initialize_system_1();\n  initialize_system_2();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001274": "initialize_and_setup_00001274",
                "initialize_data_0000258c": "initialize_data",
                "initialize_system_00001c84": "initialize_system_1",
                "initialize_system_00002396": "initialize_system_2"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001c84",
                "FUN_00002396",
                "FUN_0000258c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001274": {
                    "2": "initialize",
                    "10": "initialize_and_setup",
                    "6": "initialize_and_configure_system",
                    "4": "initialize_system",
                    "1": "initialize_system_and_data"
                },
                "initialize_data_0000258c": {
                    "1": "initialize_global_data",
                    "3": "initialize_data_structures",
                    "23": "initialize_data"
                },
                "initialize_system_00001c84": {
                    "1": "initialize_system_part1",
                    "12": "initialize_system_1",
                    "2": "initialize_system",
                    "4": "initialize_subsystem1",
                    "3": "initialize_subsystem_1"
                },
                "initialize_system_00002396": {
                    "1": "initialize_components",
                    "4": "initialize_subsystem2",
                    "3": "initialize_subsystem_2",
                    "12": "initialize_system_2"
                }
            }
        },
        "FUN_0000129c": {
            "entrypoint": "0x0000129c",
            "current_name": "update_interrupt_status_0000129c",
            "code": "\nvoid update_interrupt_status_0000129c(undefined4 status)\n\n{\n  update_interrupt_status_0000129c(status,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000129c": "update_interrupt_status_0000129c",
                "param_1": "status",
                "update_interrupt_status_00002434": "update_interrupt_status"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002434"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000129c": {
                    "3": "set_interrupt_status",
                    "28": "update_interrupt_status"
                },
                "param_1": {
                    "1": "interrupt_id",
                    "6": "interrupt_status",
                    "20": "status"
                },
                "update_interrupt_status_00002434": {
                    "11": "update_interrupt_status",
                    "3": "update_status",
                    "5": "update_interrupt_status_helper",
                    "1": "update_interrupt_vector"
                },
                "param_2": {
                    "1": "flag"
                },
                "1": {
                    "1": "interrupt_status"
                }
            }
        },
        "FUN_000012b4": {
            "entrypoint": "0x000012b4",
            "current_name": "update_and_handle_interrupt_000012b4",
            "code": "\nundefined4 update_and_handle_interrupt_000012b4(int array_index,undefined new_value)\n\n{\n  undefined4 update_result;\n  \n  update_result = update_array_element_if_not_equal_00002364(array_index + 4,new_value);\n  handle_interrupt_000024bc(array_index);\n  return update_result;\n}\n\n",
            "renaming": {
                "FUN_000012b4": "update_and_handle_interrupt_000012b4",
                "param_1": "array_index",
                "param_2": "new_value",
                "uVar1": "update_result"
            },
            "calling": [],
            "called": [
                "FUN_00002364",
                "FUN_000024bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000012b4": {
                    "1": "handle_update_and_interrupt",
                    "7": "update_and_handle_interrupt",
                    "2": "handle_interrupt_and_update_array",
                    "4": "handle_array_update",
                    "3": "handle_array_element_update"
                },
                "param_1": {
                    "2": "array_ptr",
                    "1": "array_offset",
                    "4": "base_address",
                    "15": "array_index"
                },
                "param_2": {
                    "16": "new_value",
                    "3": "element",
                    "1": "input_data",
                    "5": "new_element"
                },
                "uVar1": {
                    "1": "updated_element_status",
                    "3": "update_status",
                    "7": "update_result",
                    "2": "result"
                }
            }
        },
        "FUN_000012e2": {
            "entrypoint": "0x000012e2",
            "current_name": "copy_and_increment_loop_000012e2",
            "code": "\nint copy_and_increment_loop_000012e2(int source_address,undefined4 param_2,undefined4 param_3)\n\n{\n  int result;\n  \n  while( true ) {\n    result = copy_and_increment_0000231c(source_address + 4,param_2,param_3);\n    if (result != 0) break;\n    update_interrupt_status_0000129c(source_address);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000012e2": "copy_and_increment_loop_000012e2",
                "param_1": "source_address",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00000e14"
            ],
            "called": [
                "FUN_0000129c",
                "FUN_0000231c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000012e2": {
                    "2": "process_data",
                    "1": "copy_with_increment",
                    "21": "copy_and_increment_loop"
                },
                "param_1": {
                    "1": "original_array_ptr",
                    "2": "input_array",
                    "3": "input_ptr",
                    "4": "source_address"
                },
                "param_2": {
                    "4": "param2",
                    "2": "dest_address",
                    "1": "destination_pointer",
                    "3": "size",
                    "10": "param_2"
                },
                "param_3": {
                    "1": "arg2",
                    "4": "param3",
                    "2": "length",
                    "10": "param_3"
                },
                "iVar1": {
                    "3": "return_value",
                    "7": "error_code",
                    "1": "status",
                    "8": "copy_result",
                    "10": "result"
                },
                "<original_function_name>": {
                    "1": "copy_and_increment_with_interrupt_update"
                }
            }
        },
        "FUN_00001318": {
            "entrypoint": "0x00001318",
            "current_name": "set_bit_in_memory_00001318",
            "code": "\nvoid set_bit_in_memory_00001318(byte input_byte)\n\n{\n  *(int *)(((uint)(int)(char)input_byte >> 5) * 4 + -0x1fff1f00) = 1 << (input_byte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001318": "set_bit_in_memory_00001318",
                "param_1": "input_byte"
            },
            "calling": [
                "FUN_000014c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001318": {
                    "6": "set_bit",
                    "1": "store_bit_in_memory",
                    "16": "set_bit_in_memory",
                    "3": "set_bit_at_index",
                    "2": "set_bit_in_array"
                },
                "param_1": {
                    "1": "input",
                    "5": "byte_to_set",
                    "16": "input_byte",
                    "9": "byte_value"
                },
                "*(int *)(((uint)(int)(char)param_1 >> 5) * 4 + -0x1fff1f00)": {
                    "2": "memory_location",
                    "6": "memory_address",
                    "1": "target_memory_location"
                },
                "1 << (param_1 & 0x1f)": {
                    "1": "bit_to_set",
                    "4": "bit_value",
                    "6": "bit_mask"
                },
                "param_1[7:0]": {
                    "1": "bit_index"
                },
                "param_1 & 0x1f": {
                    "2": "bit_position",
                    "1": "bit_offset"
                },
                "param_1 >> 5": {
                    "1": "shifted_byte_value"
                },
                "F_00001318": {
                    "1": "set_bit_in_array"
                },
                "param_2": {
                    "1": "new_value"
                },
                "param_3": {
                    "1": "offset"
                },
                "param_4": {
                    "1": "array_base_address"
                },
                "int *(((uint)(int)(char)param_1 >> 5) * 4 + -0x1fff1f00)": {
                    "1": "memory_address"
                },
                "*((uint *)(shiftedByteValue * 4 + -0x1fff1f00))": {
                    "1": "memory_address"
                }
            }
        },
        "FUN_00001348": {
            "entrypoint": "0x00001348",
            "current_name": "check_and_set_flag_00001348",
            "code": "\nvoid check_and_set_flag_00001348(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    set_flag();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001348": "check_and_set_flag_00001348",
                "set_flag_0000093c": "set_flag"
            },
            "calling": [
                "FUN_00001628"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001348": {
                    "17": "check_and_set_flag",
                    "1": "set_flag_if_condition_met",
                    "12": "check_flag_and_set"
                },
                "set_flag_0000093c": {
                    "15": "set_flag",
                    "1": "set_error_flag"
                },
                "DAT_1fff0354": {
                    "9": "flag",
                    "1": "flag_value"
                }
            }
        },
        "FUN_00001360": {
            "entrypoint": "0x00001360",
            "current_name": "calculate_offset_00001360",
            "code": "\nint calculate_offset_00001360(uint input_value,int multiplier)\n\n{\n  return multiplier * 4 + (input_value & 0xf0000000 | (input_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001360": "calculate_offset_00001360",
                "param_1": "input_value",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001392"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001360": {
                    "1": "calculate_new_value",
                    "23": "calculate_offset",
                    "6": "calculate_result"
                },
                "param_1": {
                    "6": "address",
                    "2": "offset",
                    "3": "input",
                    "11": "input_value",
                    "4": "base_address",
                    "1": "input1"
                },
                "param_2": {
                    "1": "value2",
                    "2": "offset",
                    "3": "index",
                    "23": "multiplier"
                },
                "param_1 & 0xf0000000 | (param_1 & 0xfffff) << 5": {
                    "1": "masked_input"
                },
                "param_2 * 4": {
                    "1": "result1"
                },
                "0x2000000": {
                    "1": "constant",
                    "2": "constant_offset"
                },
                "param_3": {
                    "1": "shifted_input"
                },
                "new_variable_name_1": {
                    "1": "upper_address"
                },
                "new_variable_name_2": {
                    "1": "lower_address"
                },
                "new_variable_name_3": {
                    "1": "shifted_lower_address"
                },
                "0xf0000000": {
                    "1": "mask1"
                },
                "0xfffff": {
                    "1": "mask2"
                },
                "(param_1 & 0xf0000000 | (param_1 & 0xfffff) << 5)": {
                    "1": "result2"
                },
                "param_4": {
                    "1": "constant_value"
                },
                "param_5": {
                    "1": "offset"
                },
                "param_2 * 4 + masked_value + 0x2000000": {
                    "1": "offset"
                }
            }
        },
        "FUN_00001392": {
            "entrypoint": "0x00001392",
            "current_name": "set_offset_to_one_00001392",
            "code": "\nvoid set_offset_to_one_00001392(undefined4 offset,undefined value)\n\n{\n  undefined4 *offset_pointer;\n  \n  offset_pointer = (undefined4 *)calculate_offset_00001360(offset,value);\n  *offset_pointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001392": "set_offset_to_one_00001392",
                "param_1": "offset",
                "param_2": "value",
                "puVar1": "offset_pointer"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001360"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001392": {
                    "2": "set_offset_to_value",
                    "11": "set_offset_to_one",
                    "1": "set_offset_to_value_one",
                    "7": "set_offset_to1"
                },
                "param_1": {
                    "1": "input_data",
                    "15": "offset",
                    "3": "input_param"
                },
                "param_2": {
                    "1": "parameter",
                    "3": "input_value",
                    "17": "value"
                },
                "puVar1": {
                    "2": "offset_address",
                    "1": "offset_pointer_ptr",
                    "7": "offset_ptr",
                    "19": "offset_pointer"
                }
            }
        },
        "FUN_000013b8": {
            "entrypoint": "0x000013b8",
            "current_name": "update_configuration_000013b8",
            "code": "\nundefined4 update_configuration_000013b8(int index,undefined4 config_value,undefined4 data_1,undefined4 data_2)\n\n{\n  undefined4 result;\n  \n  if (index != 0) {\n    handle_kernel_panic(3,\"FAILED ASSERTION.\");\n  }\n  *(undefined4 *)(&DAT_1fff0b6c + index * 8) = data_1;\n  *(undefined4 *)(&DAT_1fff0b70 + index * 8) = data_2;\n  update_data(index);\n  set_offset_to_one(*(undefined4 *)(&DAT_00006ffc + index * 0x20),\n               *(undefined *)(index * 0x20 + 0x7000));\n  if ((&DAT_00007002)[index * 0x20] == '\\0') {\n    update_configuration_000013b8(index,config_value);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000013b8": "update_configuration_000013b8",
                "param_1": "index",
                "param_2": "config_value",
                "param_3": "data_1",
                "param_4": "data_2",
                "uVar1": "result",
                "handle_kernel_panic_00000f04": "handle_kernel_panic",
                "update_data_00001448": "update_data",
                "set_offset_to_one_00001392": "set_offset_to_one",
                "update_configuration_000014c4": "update_configuration"
            },
            "calling": [
                "FUN_00000df4"
            ],
            "called": [
                "FUN_000014c4",
                "FUN_00000f04",
                "FUN_00001392",
                "FUN_00001448"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000013b8": {
                    "2": "initialize_kernel_data",
                    "1": "update_system_data",
                    "7": "update_configuration",
                    "3": "handle_assertion",
                    "5": "update_kernel_data"
                },
                "param_1": {
                    "3": "error_code",
                    "2": "assertion_failed",
                    "1": "assertion_code",
                    "14": "index"
                },
                "param_2": {
                    "1": "config_data",
                    "3": "config",
                    "11": "config_value",
                    "4": "value",
                    "2": "config_param",
                    "7": "configuration"
                },
                "param_3": {
                    "4": "data1",
                    "1": "data_value",
                    "2": "data_ptr",
                    "5": "data_value_1",
                    "3": "data_value1",
                    "12": "data_1"
                },
                "param_4": {
                    "1": "offset_value",
                    "4": "data2",
                    "12": "data_2",
                    "3": "data_value2",
                    "2": "offset",
                    "5": "data_value_2"
                },
                "uVar1": {
                    "17": "result",
                    "8": "return_value"
                },
                "handle_kernel_panic_00000f04": {
                    "7": "handle_kernel_panic",
                    "1": "handle_panic"
                },
                "update_data_00001448": {
                    "13": "update_data"
                },
                "set_offset_to_one_00001392": {
                    "12": "set_offset_to_one",
                    "1": "set_offset"
                },
                "update_configuration_000014c4": {
                    "13": "update_configuration"
                }
            }
        },
        "FUN_00001448": {
            "entrypoint": "0x00001448",
            "current_name": "update_data_00001448",
            "code": "\nvoid update_data_00001448(int index)\n\n{\n  if (*(value *)(&DAT_00006fec + index * 0x20) != -1) {\n    update_data_00001448(*(data_value *)(&DAT_00006fec + index * 0x20),\n                 *(data_update *)(&DAT_00006ff0 + index * 0x20));\n  }\n  if (*(value *)(&DAT_00006fee + index * 0x20) != -1) {\n    update_data_00001448(*(data_value *)(&DAT_00006fee + index * 0x20),\n                 *(data_update *)(&DAT_00006ff4 + index * 0x20));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001448": "update_data_00001448",
                "param_1": "index",
                "update_data_00001f80": "update_data",
                "short": "value",
                "undefined2": "data_value",
                "undefined4": "data_update"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001f80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001448": {
                    "3": "update_data_if_needed",
                    "12": "update_data",
                    "1": "process_param_data",
                    "5": "update_data_if_valid",
                    "2": "update_data_from_binary"
                },
                "param_1": {
                    "1": "input_index",
                    "29": "index"
                },
                "update_data_00001f80": {
                    "1": "update_data_helper",
                    "2": "update_data_entry",
                    "12": "update_data"
                },
                "short": {
                    "1": "short",
                    "4": "value"
                },
                "new_variable_name_1": {
                    "1": "value1"
                },
                "new_variable_name_2": {
                    "1": "value2"
                },
                "*(short *)(&DAT_00006fec + param_1 * 0x20)": {
                    "5": "data1",
                    "2": "data_1"
                },
                "*(short *)(&DAT_00006fee + param_1 * 0x20)": {
                    "5": "data2",
                    "2": "data_2"
                },
                "*(undefined2 *)(&DAT_00006fec + param_1 * 0x20)": {
                    "1": "data1_value",
                    "2": "data1_ptr"
                },
                "*(undefined2 *)(&DAT_00006fee + param_1 * 0x20)": {
                    "1": "data_2_ptr",
                    "2": "data2_ptr"
                },
                "*(undefined4 *)(&DAT_00006ff0 + param_1 * 0x20)": {
                    "1": "value1",
                    "2": "data1_update"
                },
                "*(undefined4 *)(&DAT_00006ff4 + param_1 * 0x20)": {
                    "1": "value2",
                    "2": "data2_update"
                },
                "&DAT_00006fec + param_1 * 0x20": {
                    "1": "ptr_data1"
                },
                "&DAT_00006fee + param_1 * 0x20": {
                    "1": "ptr_data2"
                },
                "DAT_00006fec": {
                    "2": "data_array_1",
                    "1": "data_array1"
                },
                "DAT_00006fee": {
                    "2": "data2",
                    "1": "data_array2"
                },
                "undefined2": {
                    "1": "data_1",
                    "2": "data_value"
                },
                "undefined4": {
                    "1": "data_update"
                },
                "&DAT_00006fec": {
                    "1": "array1"
                },
                "&DAT_00006fee": {
                    "1": "array2"
                },
                "&DAT_00006ff0": {
                    "1": "array1_updates"
                },
                "&DAT_00006ff4": {
                    "1": "data_array_4"
                },
                "0x20": {
                    "1": "offset"
                },
                "(&DAT_00006fec + param_1 * 0x20)": {
                    "1": "data_pointer1"
                },
                "(&DAT_00006fee + param_1 * 0x20)": {
                    "1": "data2"
                },
                "*(short *)(&DAT_00006fec + index * 0x20)": {
                    "1": "entry_1"
                },
                "*(undefined2 *)(&DAT_00006fec + index * 0x20)": {
                    "1": "data_1"
                },
                "*(undefined4 *)(&DAT_00006ff0 + index * 0x20)": {
                    "1": "info_1"
                },
                "*(short *)(&DAT_00006fee + index * 0x20)": {
                    "1": "entry_2"
                },
                "*(undefined2 *)(&DAT_00006fee + index * 0x20)": {
                    "1": "data2_address"
                },
                "*(undefined4 *)(&DAT_00006ff4 + index * 0x20)": {
                    "1": "info_2"
                },
                "DIR_00006ff0": {
                    "1": "ptr_data1"
                },
                "DIR_00006ff4": {
                    "1": "ptr_data2"
                },
                "PTR_00006fec": {
                    "1": "data_ptr1"
                },
                "PTR_00006ff0": {
                    "1": "data_ptr2"
                },
                "PTR_00006fee": {
                    "1": "data_ptr3"
                },
                "PTR_00006ff4": {
                    "1": "data_ptr4"
                },
                "*(&DAT_00006fec + index * 0x20)": {
                    "1": "data1"
                },
                "*(short *)(&DAT_00006fec + index * 0x20) != -1": {
                    "1": "is_data1_valid"
                },
                "*(&DAT_00006fee + index * 0x20)": {
                    "1": "data2"
                },
                "*(short *)(&DAT_00006fee + index * 0x20) != -1": {
                    "1": "is_data2_valid"
                },
                "*(&LOC_00006fec + index * 0x20)": {
                    "1": "data_ptr_1"
                },
                "*(&LOC_00006fee + index * 0x20)": {
                    "1": "data_ptr_2"
                },
                "(*(short *)(&DAT_00006fec + param_1 * 0x20) != -1)": {
                    "1": "is_data1_valid"
                },
                "(*(short *)(&DAT_00006fee + param_1 * 0x20) != -1)": {
                    "1": "is_data2_valid"
                },
                "*(&DAT_00006fec + param_1 * 0x20)": {
                    "1": "data1"
                },
                "*(&DAT_00006fee + param_1 * 0x20)": {
                    "1": "data2"
                },
                "*(&DAT_00006ff0 + param_1 * 0x20)": {
                    "1": "value1"
                },
                "*(&DAT_00006ff4 + param_1 * 0x20)": {
                    "1": "value2"
                }
            }
        },
        "FUN_000014c4": {
            "entrypoint": "0x000014c4",
            "current_name": "update_configuration_000014c4",
            "code": "\nvoid update_configuration_000014c4(int index,uint value)\n\n{\n  byte *data_ptr;\n  uint value1;\n  uint value2;\n  \n  data_ptr = *(byte **)(&DAT_00006fe4 + index * 0x20);\n  value1 = *(uint *)(&DAT_00006fe8 + index * 0x20);\n  data_ptr[3] = data_ptr[3] & 0xf3;\n  data_ptr[2] = (&DAT_00007001)[index * 0x20];\n  value2 = value1 / (value << 4);\n  *data_ptr = (byte)(value2 >> 8) & 0x1f;\n  data_ptr[1] = (byte)value2;\n  data_ptr[10] = (byte)((value1 << 2) / value + 1 >> 1) & 0x1f;\n  data_ptr[0x10] = data_ptr[0x10] | 0x88;\n  if ((data_ptr[0x10] & 0x70) == 0) {\n    data_ptr[0x13] = 0;\n  }\n  else {\n    data_ptr[0x13] = (char)(2 << (data_ptr[0x10] >> 4 & 7)) - 1;\n  }\n  data_ptr[0x15] = 1;\n  data_ptr[0x11] = 0xc0;\n  data_ptr[3] = data_ptr[3] | 0x2c;\n  set_memory_bit((int)(char)(&DAT_00006ff8)[index * 0x20]);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000014c4": "update_configuration_000014c4",
                "param_1": "index",
                "param_2": "value",
                "pbVar1": "data_ptr",
                "uVar2": "value1",
                "uVar3": "value2",
                "set_bit_in_memory_00001318": "set_memory_bit"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000014c4": {
                    "2": "update_memory_settings",
                    "1": "update_parameters",
                    "10": "update_configuration",
                    "7": "update_data"
                },
                "param_1": {
                    "3": "config_index",
                    "1": "setting_index",
                    "24": "index"
                },
                "param_2": {
                    "3": "factor",
                    "1": "block_size",
                    "12": "value",
                    "10": "divisor"
                },
                "pbVar1": {
                    "1": "configuration",
                    "3": "memory_block",
                    "6": "data_ptr",
                    "5": "data_pointer",
                    "4": "config_ptr",
                    "2": "config_entry"
                },
                "uVar2": {
                    "1": "uint_var",
                    "5": "config_value",
                    "2": "offset",
                    "7": "value1",
                    "3": "data_value"
                },
                "uVar3": {
                    "1": "setting2",
                    "2": "calculation_result",
                    "4": "result",
                    "7": "value2"
                },
                "set_bit_in_memory_00001318": {
                    "1": "set_memory_bit"
                }
            }
        },
        "FUN_000015d0": {
            "entrypoint": "0x000015d0",
            "current_name": "copy_data_000015d0",
            "code": "\nvoid copy_data_000015d0(int index,int source,uint length)\n\n{\n  int destination_address;\n  uint counter;\n  \n  destination_address = *(int *)(&DAT_00006fe4 + index * 0x20);\n  for (counter = 0; counter < length; counter = counter + 1) {\n    do {\n    } while (-1 < *(char *)(destination_address + 4));\n    *(undefined *)(destination_address + 7) = *(undefined *)(counter + source);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000015d0": "copy_data_000015d0",
                "param_1": "index",
                "param_2": "source",
                "param_3": "length",
                "iVar1": "destination_address",
                "local_c": "counter"
            },
            "calling": [
                "FUN_00000e38"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000015d0": {
                    "4": "copy_data_to_buffer",
                    "2": "copy_bytes",
                    "1": "copy_data_to_i_var1",
                    "16": "copy_data",
                    "3": "copy_data_to_memory"
                },
                "param_1": {
                    "1": "array_index",
                    "2": "source_index",
                    "25": "index"
                },
                "param_2": {
                    "4": "source_data",
                    "1": "destination_offset",
                    "8": "source_address",
                    "2": "source_start"
                },
                "param_3": {
                    "2": "data_length",
                    "1": "data_size",
                    "3": "count",
                    "9": "num_elements",
                    "14": "length"
                },
                "iVar1": {
                    "1": "offset",
                    "2": "buffer_address",
                    "7": "destination_address"
                },
                "local_c": {
                    "2": "current_count",
                    "5": "current_index",
                    "1": "current_byte",
                    "13": "counter",
                    "3": "element_index"
                },
                "*(&DAT_00006fe4 + param_1 * 0x20)": {
                    "1": "i_var1"
                }
            }
        },
        "FUN_00001628": {
            "entrypoint": "0x00001628",
            "current_name": "execute_function_if_flag_set_00001628",
            "code": "\nvoid execute_function_if_flag_set_00001628(ptr index)\n\n{\n  if (((*(flags *)(*(ptr *)(&DAT_00006fe4 + index * 0x20) + 4) & 0x20) != 0) &&\n     (*(ptr *)(&DAT_1fff0b6c + index * 8) != 0)) {\n    (**(function_pointer **)(&DAT_1fff0b6c + index * 8))\n              (*(undefined4 *)(&DAT_1fff0b70 + index * 8),\n               *(undefined *)(*(ptr *)(&DAT_00006fe4 + index * 0x20) + 7));\n  }\n  check_and_set_flag;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001628": "execute_function_if_flag_set_00001628",
                "param_1": "index",
                "code": "function_pointer",
                "check_and_set_flag_00001348": "check_and_set_flag",
                "byte": "flags",
                "int": "ptr",
                "check_and_set_flag_00001348()": "check_and_set_flag"
            },
            "calling": [
                "FUN_00001688"
            ],
            "called": [
                "FUN_00001348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001628": {
                    "1": "execute_callback_if_needed",
                    "3": "process_data",
                    "2": "execute_flagged_function",
                    "5": "execute_function_if_flag_set",
                    "4": "execute_function"
                },
                "param_1": {
                    "3": "callback_index",
                    "1": "command_index",
                    "24": "index"
                },
                "*(byte *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 4)": {
                    "1": "flag_value"
                },
                "*(int *)(&DAT_1fff0b6c + index * 8)": {
                    "1": "function_pointer"
                },
                "(*(code **)(&DAT_1fff0b6c + index * 8))": {
                    "1": "function"
                },
                "*(undefined4 *)(&DAT_1fff0b70 + index * 8)": {
                    "1": "arg1"
                },
                "*(undefined *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 7)": {
                    "1": "arg2"
                },
                "DAT_00006fe4": {
                    "1": "data_array1",
                    "2": "function_table"
                },
                "DAT_1fff0b6c": {
                    "1": "data_pointer_array",
                    "2": "function_pointer_table"
                },
                "DAT_1fff0b70": {
                    "1": "arg_table"
                },
                "byte_1": {
                    "1": "flags"
                },
                "int_1": {
                    "1": "function_pointer"
                },
                "int_2": {
                    "1": "argument"
                },
                "undefined_1": {
                    "1": "arg2"
                },
                "undefined4_1": {
                    "1": "arg1"
                },
                "*(byte *)(*(int *)(&DAT_00006fe4 + actionIndex * 0x20) + 4)": {
                    "1": "action_flags"
                },
                "(*(byte *)(*(int *)(&DAT_00006fe4 + actionIndex * 0x20) + 4) & 0x20)": {
                    "1": "is_action_flag_set"
                },
                "*(int *)(&DAT_1fff0b6c + actionIndex * 8)": {
                    "1": "action_pointer"
                },
                "(**(code **)(&DAT_1fff0b6c + actionIndex * 8))": {
                    "1": "action_function"
                },
                "(*(undefined4 *)(&DAT_1fff0b70 + actionIndex * 8))": {
                    "1": "action_param1"
                },
                "*(undefined *)(*(int *)(&DAT_00006fe4 + actionIndex * 0x20) + 7)": {
                    "1": "action_param2"
                },
                "*(byte *)(*(int *)(&DAT_00006fe4 + command_index * 0x20) + 4)": {
                    "1": "command_flags"
                },
                "*(int *)(&DAT_1fff0b6c + command_index * 8)": {
                    "1": "command_function"
                },
                "*(undefined4 *)(&DAT_1fff0b70 + command_index * 8)": {
                    "1": "command_arguments"
                },
                "*(undefined *)(*(int *)(&DAT_00006fe4 + command_index * 0x20) + 7)": {
                    "1": "command_parameter"
                },
                "code": {
                    "3": "function_pointer",
                    "1": "callback_function"
                },
                "check_and_set_flag_00001348": {
                    "11": "check_and_set_flag",
                    "1": "check_and_update_flag"
                },
                "*(byte *)(*(int *)(&DAT_00006fe4 + param_1 * 0x20) + 4)": {
                    "1": "data_flag"
                },
                "& 0x20": {
                    "1": "flag_mask"
                },
                "*(int *)(&DAT_1fff0b6c + param_1 * 8)": {
                    "1": "function_pointer"
                },
                "(**(code **)(&DAT_1fff0b6c + param_1 * 8))": {
                    "1": "function_to_call"
                },
                "*(undefined4 *)(&DAT_1fff0b70 + param_1 * 8)": {
                    "1": "param1_function"
                },
                "*(undefined *)(*(int *)(&DAT_00006fe4 + param_1 * 0x20) + 7)": {
                    "1": "arg2"
                },
                "byte": {
                    "1": "flag_byte",
                    "5": "flags"
                },
                "int": {
                    "1": "ptr"
                },
                "*(&DAT_00006fe4 + param_1 * 0x20)": {
                    "1": "data_ptr"
                },
                "&DAT_1fff0b6c + param_1 * 8": {
                    "1": "data_ptr"
                },
                "*(&DAT_1fff0b6c + param_1 * 8)": {
                    "1": "function_to_execute"
                },
                "*(&DAT_1fff0b70 + param_1 * 8)": {
                    "1": "arg1"
                },
                "PTR_1fff0b70": {
                    "1": "callback_params_array"
                },
                "(*(byte *)(*(int *)(&actionDataArray + actionIndex * 0x20) + 4) & 0x20)": {
                    "1": "is_flag_set"
                },
                "(*(int *)(&actionPointerArray + actionIndex * 8) != 0)": {
                    "1": "is_valid_action"
                },
                "(**(code **)(&actionPointerArray + actionIndex * 8))": {
                    "1": "action_function"
                },
                "(*(undefined4 *)(&actionArgumentArray + actionIndex * 8))": {
                    "1": "argument1"
                },
                "*(undefined *)(*(int *)(&actionDataArray + actionIndex * 0x20) + 7)": {
                    "1": "argument2"
                },
                "&DAT_00006fe4": {
                    "1": "array1"
                },
                "&DAT_1fff0b6c": {
                    "1": "array2"
                },
                "&DAT_1fff0b70": {
                    "1": "arg_pointer"
                },
                "(*(byte *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 4) & 0x20)": {
                    "1": "special_flag"
                },
                "(*(int *)(&DAT_1fff0b6c + index * 8) != 0)": {
                    "1": "is_valid_function_ptr"
                },
                "(**(code **)(&DAT_1fff0b6c + index * 8))": {
                    "1": "special_function"
                },
                "(*(undefined4 *)(&DAT_1fff0b70 + index * 8), *(undefined *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 7))": {
                    "1": "pass_arguments"
                },
                "check_and_set_flag_00001348()": {
                    "1": "check_and_set_flag"
                },
                "(*(byte *)(*(int *)(&DAT_00006fe4 + callbackIndex * 0x20) + 4) & 0x20)": {
                    "1": "callback_flag"
                },
                "(*(int *)(&DAT_1fff0b6c + callbackIndex * 8) != 0)": {
                    "1": "callback_exists"
                },
                "**(code **)(&DAT_1fff0b6c + callbackIndex * 8)": {
                    "1": "callback_function"
                },
                "(*(undefined4 *)(&DAT_1fff0b70 + callbackIndex * 8)": {
                    "1": "callback_arg1"
                },
                "*(undefined *)(*(int *)(&DAT_00006fe4 + callbackIndex * 0x20) + 7)": {
                    "1": "callback_arg2"
                },
                "(*(code **)(&DAT_1fff0b6c + param_1 * 8))": {
                    "1": "function"
                },
                "(*(undefined4 *)(&DAT_1fff0b70 + param_1 * 8))": {
                    "1": "arg1"
                }
            }
        },
        "FUN_00001688": {
            "entrypoint": "0x00001688",
            "current_name": "execute_flagged_function_00001688",
            "code": "\nvoid execute_flagged_function_00001688(void)\n\n{\n  check_and_execute_flagged_function_00001688(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001688": "execute_flagged_function_00001688",
                "execute_function_if_flag_set_00001628": "check_and_execute_flagged_function"
            },
            "calling": [],
            "called": [
                "FUN_00001628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001688": {
                    "2": "execute_function_if_flag_set",
                    "1": "execute_flag_if_set",
                    "11": "execute_flagged_function",
                    "4": "execute_flag_set_function",
                    "7": "execute_flag_check",
                    "3": "execute_function_with_flag_check"
                },
                "execute_function_if_flag_set_00001628": {
                    "6": "check_and_execute_flagged_function",
                    "2": "execute_flag_check_function",
                    "3": "execute_flagged_function",
                    "1": "execute_flag_if_set"
                },
                "0": {
                    "1": "flag_value"
                },
                "execute_function_if_flag_set_00001628_arg1": {
                    "1": "flag_argument"
                },
                "PTR_00001628": {
                    "1": "flag_ptr"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "DAT_": {
                    "1": "dat_"
                }
            }
        },
        "FUN_00001696": {
            "entrypoint": "0x00001696",
            "current_name": "calculate_offset_00001696",
            "code": "\nint calculate_offset_00001696(uint input_value,int multiplier)\n\n{\n  return multiplier * 4 + (input_value & 0xf0000000 | (input_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001696": "calculate_offset_00001696",
                "param_1": "input_value",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_000016ec",
                "FUN_00001710",
                "FUN_000016c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001696": {
                    "1": "multiply_and_shift",
                    "22": "calculate_offset",
                    "4": "calculate_result"
                },
                "param_1": {
                    "4": "address",
                    "2": "base_value",
                    "1": "offset_mask",
                    "15": "input_value",
                    "3": "base_address"
                },
                "param_2": {
                    "1": "value2",
                    "4": "index",
                    "24": "multiplier"
                },
                "param_1 & 0xf0000000": {
                    "1": "upper_bits"
                },
                "param_1 & 0xfffff": {
                    "1": "lower_bits"
                },
                "lower_bits << 5": {
                    "1": "shifted_lower_bits"
                },
                "offset * 4": {
                    "1": "scaled_offset"
                },
                "param_1 & 0xf0000000 | (param_1 & 0xfffff) << 5": {
                    "1": "address_part"
                },
                "0x2000000": {
                    "1": "constant_value"
                },
                "param_3": {
                    "1": "result"
                },
                "result": {
                    "1": "offset"
                },
                "param_2 * 4": {
                    "1": "multiplied_value"
                },
                "<no_change>": {
                    "1": "addition_constant"
                },
                "param_4": {
                    "1": "offset"
                },
                "param_5": {
                    "1": "constant"
                },
                "param_6": {
                    "1": "shifted_result"
                },
                "<original_function_name>": {
                    "1": "calculate_result"
                }
            }
        },
        "FUN_000016c8": {
            "entrypoint": "0x000016c8",
            "current_name": "set_offset_to_value_000016c8",
            "code": "\nvoid set_offset_to_value_000016c8(undefined4 offset,undefined value)\n\n{\n  undefined4 *offset_pointer;\n  \n  offset_pointer = (undefined4 *)calculate_offset_00001696(offset,value);\n  *offset_pointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016c8": "set_offset_to_value_000016c8",
                "param_1": "offset",
                "param_2": "value",
                "puVar1": "offset_pointer"
            },
            "calling": [
                "FUN_000017dc"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000016c8": {
                    "1": "initialize_offset_value",
                    "7": "set_offset_to_one",
                    "5": "set_offset_to1",
                    "2": "set_offset",
                    "10": "set_offset_to_value"
                },
                "param_1": {
                    "1": "input_param",
                    "15": "offset",
                    "4": "input1"
                },
                "param_2": {
                    "1": "input_data",
                    "4": "input2",
                    "14": "value",
                    "2": "offset"
                },
                "puVar1": {
                    "1": "result",
                    "2": "result_pointer",
                    "3": "offset_ptr",
                    "15": "offset_pointer"
                }
            }
        },
        "FUN_000016ec": {
            "entrypoint": "0x000016ec",
            "current_name": "set_offset_to_value_000016ec",
            "code": "\nvoid set_offset_to_value_000016ec(undefined4 offset,undefined value)\n\n{\n  undefined *offset_pointer;\n  \n  offset_pointer = (undefined *)calculate_offset_00001696(offset,value);\n  *offset_pointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016ec": "set_offset_to_value_000016ec",
                "param_1": "offset",
                "param_2": "value",
                "puVar1": "offset_pointer"
            },
            "calling": [
                "FUN_00001a18",
                "FUN_0000182c",
                "FUN_00001778",
                "FUN_00001a3c",
                "FUN_00001a60"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000016ec": {
                    "3": "set_offset_to_one",
                    "2": "set_offset_to_true",
                    "1": "set_one_at_calculated_offset",
                    "4": "set_offset_to_value_one",
                    "8": "set_offset_to_value"
                },
                "param_1": {
                    "1": "param",
                    "3": "arg1",
                    "19": "offset"
                },
                "param_2": {
                    "1": "value2",
                    "19": "value",
                    "3": "arg2"
                },
                "puVar1": {
                    "1": "memory_ptr",
                    "2": "memory_location",
                    "20": "offset_pointer"
                }
            }
        },
        "FUN_00001710": {
            "entrypoint": "0x00001710",
            "current_name": "clear_memory_00001710",
            "code": "\nvoid clear_memory_00001710(undefined4 offset,undefined value)\n\n{\n  undefined *memory_address;\n  \n  memory_address = (undefined *)calculate_offset_00001696(offset,value);\n  *memory_address = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001710": "clear_memory_00001710",
                "param_1": "offset",
                "param_2": "value",
                "puVar1": "memory_address"
            },
            "calling": [
                "FUN_00001960",
                "FUN_00001bb8",
                "FUN_0000182c",
                "FUN_00001778",
                "FUN_00001a60",
                "FUN_000018bc",
                "FUN_000019c0",
                "FUN_00001734"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001710": {
                    "24": "clear_memory",
                    "1": "clear_offset",
                    "3": "initialize_memory"
                },
                "param_1": {
                    "4": "address",
                    "1": "memory_address",
                    "17": "offset",
                    "2": "input1"
                },
                "param_2": {
                    "7": "data",
                    "1": "arg2",
                    "2": "offset",
                    "11": "value",
                    "3": "size"
                },
                "puVar1": {
                    "1": "ptr_to_clear",
                    "3": "offset_ptr",
                    "4": "target_address",
                    "6": "memory_location",
                    "8": "memory_address"
                }
            }
        },
        "FUN_00001734": {
            "entrypoint": "0x00001734",
            "current_name": "clear_memory_00001734",
            "code": "\nvoid clear_memory_00001734(void)\n\n{\n  clear_memory_00001734(&DAT_40064005,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001734": "clear_memory_00001734",
                "clear_memory_00001710": "clear_memory"
            },
            "calling": [
                "FUN_00001a18",
                "FUN_00001a3c",
                "FUN_000019c0"
            ],
            "called": [
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001734": {
                    "27": "clear_memory",
                    "1": "initialize_memory"
                },
                "clear_memory_00001710": {
                    "1": "clear_memory_section",
                    "9": "clear_memory",
                    "8": "clear_memory_helper",
                    "2": "clear_memory_block"
                },
                "*iVar1": {
                    "1": "num_bytes"
                },
                "PTR_DAT_40064005": {
                    "1": "memory_address"
                },
                "<original_function_name>": {
                    "1": "clear_memory"
                },
                "<original_variable_name_1>": {
                    "1": "memory_pointer"
                },
                "<original_variable_name_2>": {
                    "1": "size"
                },
                "DAT_40064005": {
                    "1": "memory_address",
                    "3": "memory_block"
                }
            }
        },
        "FUN_00001748": {
            "entrypoint": "0x00001748",
            "current_name": "update_flags_00001748",
            "code": "\nvoid update_flags_00001748(byte input_byte)\n\n{\n  DAT_40064003 = input_byte | DAT_40064003 and_operator 0x1f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001748": "update_flags_00001748",
                "param_1": "input_byte",
                "&": "and_operator"
            },
            "calling": [
                "FUN_0000191c",
                "FUN_00001960",
                "FUN_00001bb8",
                "FUN_000018bc",
                "FUN_000019c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001748": {
                    "1": "update_bit_mask",
                    "2": "update_flag_bits",
                    "6": "update_flags",
                    "3": "update_flag"
                },
                "param_1": {
                    "4": "input",
                    "2": "updated_value",
                    "1": "bit_mask",
                    "5": "input_value",
                    "7": "input_byte"
                },
                "DAT_40064003": {
                    "1": "current_value",
                    "2": "existing_value"
                },
                "&": {
                    "1": "and_operator"
                },
                "|": {
                    "1": "or_operator"
                },
                "0x1f": {
                    "1": "mask"
                },
                "param_1 | DAT_40064003 & 0x1f": {
                    "1": "updated_value"
                }
            }
        },
        "FUN_00001778": {
            "entrypoint": "0x00001778",
            "current_name": "clear_memory_00001778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000179c) */\n/* WARNING: Removing unreachable block (ram,0x000017b2) */\n/* WARNING: Removing unreachable block (ram,0x000017c0) */\n\nvoid clear_memory_00001778(void)\n\n{\n  DAT_40064001 = DAT_40064001 & 0xcf | 0x20;\n  clear_memory_00001778(&DAT_40064001,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001778": "clear_memory_00001778",
                "clear_memory_00001710": "clear_memory"
            },
            "calling": [
                "FUN_0000191c",
                "FUN_000019c0"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001778": {
                    "1": "clear_and_update_memory",
                    "10": "clear_memory",
                    "4": "update_memory",
                    "3": "clear_and_set_memory",
                    "2": "clear_and_set_flag"
                },
                "clear_memory_00001710": {
                    "1": "clear_memory_block",
                    "20": "clear_memory",
                    "4": "clear_memory_helper"
                },
                "DAT_40064001": {
                    "1": "flags",
                    "3": "data"
                },
                "0xcf": {
                    "1": "mask_0x_cf"
                },
                "0x20": {
                    "1": "flag_0x20"
                }
            }
        },
        "FUN_000017dc": {
            "entrypoint": "0x000017dc",
            "current_name": "set_offset_and_value_000017dc",
            "code": "\n\n\nvoid set_offset_and_value_000017dc(void)\n\n{\n  set_offset_to_value(&DAT_4004803c,0x1d);\n  if ((_DAT_4003d010 & 0x100) == 0) {\n    _DAT_4003d010 = 0x104;\n  }\n  _DAT_40047000 = _DAT_40047000 & 0xfff3ffff | 0x80000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000017dc": "set_offset_and_value_000017dc",
                "set_offset_to_value_000016c8": "set_offset_to_value"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000017dc": {
                    "1": "set_offset_and_update_value",
                    "2": "set_offset_to_value",
                    "8": "set_offset_and_value",
                    "5": "initialize_memory",
                    "3": "initialize_data",
                    "4": "set_offset_and_check_flag"
                },
                "_DAT_4003d010": {
                    "2": "flag_register",
                    "1": "flag_value",
                    "8": "control_register",
                    "10": "status_register"
                },
                "_DAT_40047000": {
                    "1": "flags",
                    "3": "memory_address",
                    "2": "register_value",
                    "5": "memory_register"
                },
                "set_offset_to_value_000016c8": {
                    "1": "set_offset",
                    "7": "set_offset_to_value"
                },
                "0x1d": {
                    "1": "new_offset_value"
                },
                "0x100": {
                    "1": "flag_mask"
                },
                "0x104": {
                    "1": "new_status_value"
                },
                "0xfff3ffff": {
                    "1": "bit_clear_mask"
                },
                "0x80000": {
                    "1": "bit_set_value"
                },
                "initializeSystem": {
                    "1": "void"
                },
                "interruptStatus": {
                    "1": "status"
                },
                "memoryControl": {
                    "1": "control"
                },
                "DAT_4004803c": {
                    "1": "memory_offset"
                },
                "DAT_40047000": {
                    "1": "memory_configuration_register"
                },
                "initializeData": {
                    "1": "initialize_data"
                },
                "setOffsetToValue": {
                    "1": "set_offset_to_value"
                },
                "controlRegister": {
                    "1": "control_register"
                },
                "dataRegister": {
                    "1": "data_register"
                },
                "valueToSet": {
                    "1": "new_value"
                },
                "_DAT_4004803c": {
                    "1": "offset_pointer"
                }
            }
        },
        "FUN_0000182c": {
            "entrypoint": "0x0000182c",
            "current_name": "initialize_memory_0000182c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000187c) */\n/* WARNING: Removing unreachable block (ram,0x0000186a) */\n/* WARNING: Removing unreachable block (ram,0x00001898) */\n\nvoid initialize_memory_0000182c(void)\n\n{\n  DAT_40064008 = DAT_40064008 & 0xd0;\n  set_offset_to_value(&DAT_40064001,0);\n  clear_memory(&DAT_40064000,1);\n  clear_memory(&DAT_40064000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000182c": "initialize_memory_0000182c",
                "set_offset_to_value_000016ec": "set_offset_to_value",
                "clear_memory_00001710": "clear_memory"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000182c": {
                    "1": "initialize_components",
                    "7": "clear_memory_and_set_offset",
                    "12": "initialize_memory",
                    "6": "initialize_data"
                },
                "set_offset_to_value_000016ec": {
                    "1": "set_offset",
                    "29": "set_offset_to_value"
                },
                "clear_memory_00001710": {
                    "31": "clear_memory"
                }
            }
        },
        "FUN_000018bc": {
            "entrypoint": "0x000018bc",
            "current_name": "initialize_memory_000018bc",
            "code": "\nvoid initialize_memory_000018bc(void)\n\n{\n  update_flags(0xa0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  clear_memory(&DAT_40064001,1);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000018bc": "initialize_memory_000018bc",
                "update_flags_00001748": "update_flags",
                "clear_memory_00001710": "clear_memory"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000018bc": {
                    "1": "initialize_flags_and_wait",
                    "7": "initialize_system",
                    "14": "initialize_memory"
                },
                "update_flags_00001748": {
                    "1": "set_memory_flags",
                    "2": "set_flag",
                    "22": "update_flags",
                    "3": "set_flags"
                },
                "clear_memory_00001710": {
                    "28": "clear_memory",
                    "1": "reset_memory"
                },
                "DAT_40064000": {
                    "2": "system_flags",
                    "1": "memory_register1"
                },
                "DAT_40064001": {
                    "1": "memory_location",
                    "2": "memory_address"
                },
                "DAT_40064006": {
                    "1": "memory_register2"
                },
                "PTR_40064000": {
                    "1": "memory_data"
                },
                "PTR_40064001": {
                    "1": "memory_pointer"
                },
                "PTR_1fff0b74": {
                    "1": "result_pointer"
                },
                "DAT_1fff0b74": {
                    "1": "counter"
                },
                "initializeMemory": {
                    "1": "initialize_memory"
                },
                "setMemoryFlags": {
                    "1": "set_memory_flags"
                },
                "clearMemory": {
                    "1": "clear_memory"
                }
            }
        },
        "FUN_0000191c": {
            "entrypoint": "0x0000191c",
            "current_name": "initialize_memory_0000191c",
            "code": "\nvoid initialize_memory_0000191c(void)\n\n{\n  clear_memory();\n  set_flag(0x40);\n  DAT_40064000 = DAT_40064000 & 0x3b;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000191c": "initialize_memory_0000191c",
                "clear_memory_00001778": "clear_memory",
                "update_flags_00001748": "set_flag"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001778",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000191c": {
                    "1": "initialize_flags",
                    "2": "initialize_memory_and_flags",
                    "28": "initialize_memory"
                },
                "clear_memory_00001778": {
                    "31": "clear_memory"
                },
                "update_flags_00001748": {
                    "17": "set_flag",
                    "2": "set_flags",
                    "12": "update_flags"
                },
                "initializeMemory": {
                    "2": "",
                    "3": "initialize_memory"
                },
                "clearMemory": {
                    "2": "",
                    "3": "clear_memory"
                },
                "updateFlags": {
                    "2": "update_flags"
                },
                "DAT_40064000": {
                    "1": "flags",
                    "3": "memory_value",
                    "2": "data_value"
                },
                "DAT_40064006": {
                    "1": "flag_value",
                    "2": "data_value2"
                },
                "DAT_1fff0b74": {
                    "5": "flag",
                    "1": "initialized_flag",
                    "2": "control_variable",
                    "3": "result"
                },
                "setFlags": {
                    "1": "set_flags"
                },
                "initialize_memory": {
                    "1": "initialize_memory"
                },
                "clear_memory": {
                    "1": "clear_memory"
                },
                "set_flag": {
                    "1": "set_flag"
                },
                "PTR_40064000": {
                    "1": "memory_address"
                },
                "0x40": {
                    "2": "flag_value"
                },
                "0x3b": {
                    "1": "bit_mask"
                }
            }
        },
        "FUN_00001960": {
            "entrypoint": "0x00001960",
            "current_name": "initialize_system_00001960",
            "code": "\nvoid initialize_system_00001960(void)\n\n{\n  update_flags(0xa0);\n  clear_memory(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x44;\n  do {\n  } while ((DAT_40064006 & 0xc) != 4);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  DAT_1fff0b74 = 2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001960": "initialize_system_00001960",
                "update_flags_00001748": "update_flags",
                "clear_memory_00001710": "clear_memory"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001960": {
                    "1": "initialize_data",
                    "17": "initialize_system",
                    "11": "initialize_memory"
                },
                "update_flags_00001748": {
                    "4": "set_flag",
                    "2": "set_flags",
                    "24": "update_flags"
                },
                "clear_memory_00001710": {
                    "30": "clear_memory"
                },
                "DAT_40064001": {
                    "1": "buffer_address",
                    "2": "memory_address",
                    "3": "memory_block"
                },
                "DAT_40064000": {
                    "1": "config_data",
                    "2": "flags"
                },
                "DAT_40064006": {
                    "1": "status_value",
                    "3": "status",
                    "5": "status_register",
                    "2": "status_flags"
                },
                "DAT_1fff0b74": {
                    "3": "system_state",
                    "2": "result",
                    "1": "value"
                },
                "update_flags_00001748_arg": {
                    "1": "value"
                },
                "PTR_40064001": {
                    "1": "memory_pointer"
                },
                "PTR_1fff0b74": {
                    "1": "result_register"
                }
            }
        },
        "FUN_000019c0": {
            "entrypoint": "0x000019c0",
            "current_name": "initialize_memory_000019c0",
            "code": "\nvoid initialize_memory_000019c0(void)\n\n{\n  clear_buffer();\n  set_flag(0x40);\n  clear_memory(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  reset_memory();\n  DAT_1fff0b74 = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000019c0": "initialize_memory_000019c0",
                "clear_memory_00001778": "clear_buffer",
                "update_flags_00001748": "set_flag",
                "clear_memory_00001710": "clear_memory",
                "clear_memory_00001734": "reset_memory"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001778",
                "FUN_00001748",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000019c0": {
                    "6": "initialize_system",
                    "1": "clear_memory_and_update_flags",
                    "24": "initialize_memory"
                },
                "clear_memory_00001778": {
                    "1": "clear_module_memory",
                    "2": "clear_global_memory",
                    "5": "clear_buffer",
                    "3": "clear_flags",
                    "4": "clear_memory1"
                },
                "update_flags_00001748": {
                    "1": "set_flags",
                    "18": "set_flag",
                    "10": "update_flags"
                },
                "clear_memory_00001710": {
                    "2": "clear_buffer",
                    "17": "clear_memory",
                    "1": "clear_specific_memory",
                    "4": "clear_memory2"
                },
                "clear_memory_00001734": {
                    "2": "clear_local_memory",
                    "7": "reset_memory",
                    "1": "clear_memory_status",
                    "3": "clear_buffer",
                    "4": "clear_memory3"
                },
                "DAT_40064001": {
                    "3": "memory_address",
                    "2": "buffer",
                    "1": "flag_data"
                },
                "DAT_40064000": {
                    "1": "flag_value",
                    "2": "data_flag",
                    "3": "memory_value",
                    "4": "flags"
                },
                "DAT_40064006": {
                    "1": "status_value",
                    "2": "data_status"
                },
                "DAT_1fff0b74": {
                    "1": "status",
                    "2": "result",
                    "4": "data_value"
                },
                " clear_memory_00001734": {
                    "1": "clear_memory_flag"
                }
            }
        },
        "FUN_00001a18": {
            "entrypoint": "0x00001a18",
            "current_name": "initialize_memory_00001a18",
            "code": "\nvoid initialize_memory_00001a18(void)\n\n{\n  set_offset_to_value(&DAT_40064001,1);\n  clear_memory();\n  DAT_1fff0b74 = 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a18": "initialize_memory_00001a18",
                "set_offset_to_value_000016ec": "set_offset_to_value",
                "clear_memory_00001734": "clear_memory"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001a18": {
                    "2": "set_initial_values",
                    "1": "set_offset_to_value",
                    "20": "initialize_memory",
                    "5": "initialize_data"
                },
                "set_offset_to_value_000016ec": {
                    "1": "set_offset_value",
                    "28": "set_offset_to_value"
                },
                "clear_memory_00001734": {
                    "30": "clear_memory"
                },
                "DAT_1fff0b74": {
                    "1": "data_value"
                }
            }
        },
        "FUN_00001a3c": {
            "entrypoint": "0x00001a3c",
            "current_name": "initialize_memory_00001a3c",
            "code": "\nvoid initialize_memory_00001a3c(void)\n\n{\n  set_offset_to_value(&DAT_40064001,1);\n  clear_memory();\n  DAT_1fff0b74 = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a3c": "initialize_memory_00001a3c",
                "set_offset_to_value_000016ec": "set_offset_to_value",
                "clear_memory_00001734": "clear_memory"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001a3c": {
                    "2": "initialize_system",
                    "1": "set_offset_to_value",
                    "23": "initialize_memory"
                },
                "set_offset_to_value_000016ec": {
                    "3": "set_offset",
                    "1": "set_memory_offset_to_value",
                    "27": "set_offset_to_value"
                },
                "clear_memory_00001734": {
                    "31": "clear_memory"
                },
                "DAT_1fff0b74": {
                    "1": "value_to_update",
                    "2": "memory_size"
                },
                "initializeMemory": {
                    "1": "initialize_memory"
                },
                "setOffsetToValue": {
                    "1": "set_offset_to_value"
                },
                "clearMemory": {
                    "1": "clear_memory"
                }
            }
        },
        "FUN_00001a60": {
            "entrypoint": "0x00001a60",
            "current_name": "initialize_memory_00001a60",
            "code": "\nvoid initialize_memory_00001a60(void)\n\n{\n  clear_memory(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  set_offset_to_value(&DAT_40064005,6);\n  do {\n  } while ((DAT_40064006 & 0x20) == 0);\n  do {\n  } while ((DAT_40064006 & 0x40) == 0);\n  DAT_1fff0b74 = 6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a60": "initialize_memory_00001a60",
                "clear_memory_00001710": "clear_memory",
                "set_offset_to_value_000016ec": "set_offset_to_value"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001a60": {
                    "1": "clear_and_set_offset",
                    "27": "initialize_memory"
                },
                "clear_memory_00001710": {
                    "30": "clear_memory"
                },
                "set_offset_to_value_000016ec": {
                    "1": "set_offset",
                    "29": "set_offset_to_value"
                },
                "DAT_40064001": {
                    "2": "memory_address",
                    "1": "memory_block"
                },
                "DAT_40064000": {
                    "1": "memory_value"
                },
                "DAT_40064006": {
                    "2": "status",
                    "1": "control_register"
                },
                "DAT_40064005": {
                    "1": "data_offset"
                },
                "DAT_1fff0b74": {
                    "2": "return_value"
                },
                "initializeMemory": {
                    "3": "initialize_memory"
                },
                "clearMemory": {
                    "3": "clear_memory"
                },
                "setOffsetToValue": {
                    "3": "set_offset_to_value"
                }
            }
        },
        "FUN_00001ad4": {
            "entrypoint": "0x00001ad4",
            "current_name": "initialize_data_00001ad4",
            "code": "\nvoid initialize_data_00001ad4(void)\n\n{\n  DAT_40064000 = DAT_40064000 & 0x3f;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0xc);\n  DAT_1fff0b74 = 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ad4": "initialize_data_00001ad4"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001ad4": {
                    "2": "update_data",
                    "1": "initialize_variable",
                    "15": "initialize_data"
                },
                "DAT_40064000": {
                    "2": "flag",
                    "3": "data",
                    "5": "data_mask",
                    "1": "configuration",
                    "9": "data_flag"
                },
                "DAT_40064006": {
                    "1": "status_register",
                    "3": "status_flag",
                    "2": "check_mask"
                },
                "DAT_1fff0b74": {
                    "1": "default_setting",
                    "4": "error_code",
                    "6": "count",
                    "8": "counter",
                    "2": "result"
                },
                "PTR_original_registers": {
                    "1": "registers"
                },
                "PTR_interrupt_flag": {
                    "1": "interrupt_flag"
                }
            }
        },
        "FUN_00001b10": {
            "entrypoint": "0x00001b10",
            "current_name": "initialize_components_00001b10",
            "code": "\nundefined4 initialize_components_00001b10(byte index)\n\n{\n  undefined4 result;\n  \n  if (index < 8) {\n    do {\n      switch((&DAT_00007004)[(uint)index + (uint)DAT_1fff0b74 * 8]) {\n      case 0:\n        initialize_memory_1();\n        break;\n      case 1:\n        initialize_memory_2();\n        break;\n      case 2:\n        initialize_system();\n        break;\n      case 3:\n        initialize_memory_3();\n        break;\n      case 4:\n        initialize_memory_4();\n        break;\n      case 5:\n        initialize_memory_5();\n        break;\n      case 6:\n        initialize_memory_6();\n        break;\n      case 7:\n        initialize_data();\n        break;\n      default:\n        return 0xffffffff;\n      }\n    } while (index != DAT_1fff0b74);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00001b10": "initialize_components_00001b10",
                "param_1": "index",
                "uVar1": "result",
                "initialize_memory_000018bc": "initialize_memory_1",
                "initialize_memory_0000191c": "initialize_memory_2",
                "initialize_system_00001960": "initialize_system",
                "initialize_memory_000019c0": "initialize_memory_3",
                "initialize_memory_00001a18": "initialize_memory_4",
                "initialize_memory_00001a3c": "initialize_memory_5",
                "initialize_memory_00001a60": "initialize_memory_6",
                "initialize_data_00001ad4": "initialize_data"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001a18",
                "FUN_0000191c",
                "FUN_00001ad4",
                "FUN_00001960",
                "FUN_00001a3c",
                "FUN_00001a60",
                "FUN_000019c0",
                "FUN_000018bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001b10": {
                    "3": "initialize_memory_system",
                    "1": "initialize_functions_based_on_parameter",
                    "2": "initialize_modules",
                    "13": "initialize_components"
                },
                "param_1": {
                    "3": "component_id",
                    "1": "byte_index",
                    "4": "byte_count",
                    "2": "module_index",
                    "8": "index",
                    "5": "component_index"
                },
                "uVar1": {
                    "2": "status",
                    "22": "result",
                    "7": "return_value"
                },
                "&DAT_00007004": {
                    "1": "memory_array"
                },
                "initialize_memory_000018bc": {
                    "2": "initialize_memory_1",
                    "1": "initialize_memory"
                },
                "initialize_memory_0000191c": {
                    "2": "initialize_memory_2",
                    "1": "initialize_memory_b"
                },
                "initialize_system_00001960": {
                    "4": "initialize_system"
                },
                "initialize_memory_000019c0": {
                    "2": "initialize_memory_3",
                    "1": "initialize_memory_c"
                },
                "initialize_memory_00001a18": {
                    "2": "initialize_memory_4",
                    "1": "initialize_extra_memory"
                },
                "initialize_memory_00001a3c": {
                    "1": "initialize_memory_buffer",
                    "2": "initialize_memory_5"
                },
                "initialize_memory_00001a60": {
                    "2": "initialize_memory_6",
                    "1": "initialize_memory_alloc"
                },
                "initialize_data_00001ad4": {
                    "4": "initialize_data"
                },
                "DAT_1fff0b74": {
                    "1": "max_byte_to_initialize"
                }
            }
        },
        "FUN_00001bb8": {
            "entrypoint": "0x00001bb8",
            "current_name": "clear_memory_and_update_flags_00001bb8",
            "code": "\nvoid clear_memory_and_update_flags_00001bb8(void)\n\n{\n  if ((DAT_40064001 & 2) != 0) {\n    clear_memory(&DAT_40064001,1);\n  }\n  if ((DAT_40064005 & 0x40) != 0) {\n    if ((DAT_40064000 & 0xc0) == 0) {\n      DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n      do {\n      } while ((DAT_40064006 & 0xc) != 8);\n    }\n    clear_memory(&DAT_40064005,6);\n    do {\n    } while ((DAT_40064006 & 0x20) != 0);\n  }\n  update_flags(0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001bb8": "clear_memory_and_update_flags_00001bb8",
                "clear_memory_00001710": "clear_memory",
                "update_flags_00001748": "update_flags"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001bb8": {
                    "3": "initialize_system",
                    "1": "clear_flags_and_update_counter",
                    "13": "clear_memory_and_update_flags",
                    "4": "initialize_memory",
                    "2": "clear_and_update_memory"
                },
                "clear_memory_00001710": {
                    "27": "clear_memory",
                    "1": "clear_bits"
                },
                "update_flags_00001748": {
                    "29": "update_flags"
                },
                "DAT_40064001": {
                    "1": "memory_status1"
                },
                "DAT_40064005": {
                    "1": "data2"
                },
                "DAT_40064000": {
                    "1": "data3"
                },
                "DAT_40064006": {
                    "1": "memory_control"
                },
                "DAT_1fff0b74": {
                    "1": "data_register5"
                },
                "clearMemory_00001710": {
                    "1": "clear_memory"
                }
            }
        },
        "FUN_00001c84": {
            "entrypoint": "0x00001c84",
            "current_name": "initialize_system_00001c84",
            "code": "\n\n\nvoid initialize_system_00001c84(void)\n\n{\n  undefined4 interrupt_status;\n  \n  interrupt_status = get_interrupt_status();\n  clear_memory_and_update_flags();\n  _DAT_40048044 = 0x220000;\n  DAT_4006400c = 0;\n  DAT_40064000 = DAT_40064000 & 199 | 0x38;\n  DAT_40064004 = 0x13;\n  DAT_40064005 = 0;\n  initialize_memory();\n  set_offset_and_value();\n  initialize_components(7);\n  enable_interrupts_if_privileged(interrupt_status);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001c84": "initialize_system_00001c84",
                "get_interrupt_status_00000cd0": "get_interrupt_status",
                "clear_memory_and_update_flags_00001bb8": "clear_memory_and_update_flags",
                "initialize_memory_0000182c": "initialize_memory",
                "set_offset_and_value_000017dc": "set_offset_and_value",
                "initialize_components_00001b10": "initialize_components",
                "enable_ir_qinterrupts_if_privileged_00000d0c": "enable_interrupts_if_privileged",
                "uVar1": "interrupt_status"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0",
                "FUN_00001bb8",
                "FUN_0000182c",
                "FUN_000017dc",
                "FUN_00001b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001c84": {
                    "2": "initialize_system_components",
                    "29": "initialize_system"
                },
                "get_interrupt_status_00000cd0": {
                    "2": "",
                    "24": "get_interrupt_status"
                },
                "clear_memory_and_update_flags_00001bb8": {
                    "1": "clear_memory_update_flags",
                    "24": "clear_memory_and_update_flags"
                },
                "initialize_memory_0000182c": {
                    "1": "",
                    "27": "initialize_memory"
                },
                "set_offset_and_value_000017dc": {
                    "1": "set_offset_value",
                    "2": "set_memory_offset_and_value",
                    "24": "set_offset_and_value"
                },
                "initialize_components_00001b10": {
                    "1": "",
                    "27": "initialize_components"
                },
                "enable_ir_qinterrupts_if_privileged_00000d0c": {
                    "1": "enable_irq_interrupts",
                    "2": "enable_ir_q_interrupts_if_privileged",
                    "9": "enable_irq_interrupts_if_privileged",
                    "11": "enable_interrupts_if_privileged"
                },
                "uVar1": {
                    "24": "interrupt_status"
                },
                "_DAT_40048044": {
                    "1": "memory_register",
                    "2": "register_value",
                    "6": "memory_address"
                },
                "DAT_4006400c": {
                    "2": "component_count",
                    "1": "memory_value"
                },
                "DAT_40064000": {
                    "1": "memory_config",
                    "2": "flag2"
                },
                "DAT_40064004": {
                    "1": "variable3",
                    "2": "memory_offset"
                },
                "DAT_40064005": {
                    "1": "memory_offset",
                    "2": "flag4"
                }
            }
        },
        "FUN_00001cf0": {
            "entrypoint": "0x00001cf0",
            "current_name": "check_and_set_flag_00001cf0",
            "code": "\nvoid check_and_set_flag_00001cf0(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    set_flag();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001cf0": "check_and_set_flag_00001cf0",
                "set_flag_0000093c": "set_flag",
                "flag": "dat_1fff0354"
            },
            "calling": [
                "FUN_00002028"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001cf0": {
                    "23": "check_and_set_flag",
                    "1": "set_flag_if_not_zero",
                    "7": "check_flag_and_set"
                },
                "set_flag_0000093c": {
                    "1": "set_flag_if_condition_true",
                    "20": "set_flag"
                },
                "DAT_1fff0354": {
                    "9": "flag",
                    "1": "flag_value"
                },
                "flag": {
                    "1": "dat_1fff0354"
                }
            }
        },
        "FUN_00001d08": {
            "entrypoint": "0x00001d08",
            "current_name": "calculate_offset_00001d08",
            "code": "\nint calculate_offset_00001d08(uint input_value,int multiplier)\n\n{\n  return multiplier * 4 + (input_value & 0xf0000000 | (input_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001d08": "calculate_offset_00001d08",
                "param_1": "input_value",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001d3a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001d08": {
                    "1": "calculate_new_value",
                    "26": "calculate_offset",
                    "2": "calculate_result"
                },
                "param_1": {
                    "6": "base_address",
                    "2": "input",
                    "1": "num1",
                    "9": "input_value",
                    "3": "offset"
                },
                "param_2": {
                    "1": "constant",
                    "3": "index",
                    "22": "multiplier"
                },
                "param_3": {
                    "2": "result",
                    "1": "size"
                },
                "<original_function_name>": {
                    "1": "calculate_offset"
                },
                "0xf0000000": {
                    "1": "mask_1"
                },
                "0xfffff": {
                    "1": "mask_2"
                },
                "0x2000000": {
                    "1": "add_constant"
                },
                "param_1 & 0xf0000000": {
                    "1": "mask_top_bits"
                },
                "param_1 & 0xfffff": {
                    "1": "masked_value_2"
                },
                "mask_low_bits << 5": {
                    "1": "shifted_low_bits"
                },
                "param_2 * 4": {
                    "1": "multiplied_value"
                },
                "param_4": {
                    "1": "constant",
                    "3": "constant_offset"
                },
                "result": {
                    "2": "offset"
                },
                "param_5": {
                    "1": "shift"
                },
                "param_1 & 0xf0000000 | (param_1 & 0xfffff) << 5": {
                    "1": "masked_value"
                },
                "temporary_variable_1": {
                    "1": "high_bits"
                },
                "temporary_variable_2": {
                    "1": "low_bits"
                },
                "temporary_variable_3": {
                    "1": "shifted_low_bits"
                },
                "temporary_variable_4": {
                    "1": "result"
                },
                "local_1": {
                    "1": "mask"
                },
                "local_2": {
                    "1": "shifted_value"
                },
                "masked_input": {
                    "1": "mask_bitwise_and"
                },
                "multiplier": {
                    "1": "multiply_by_4"
                }
            }
        },
        "FUN_00001d3a": {
            "entrypoint": "0x00001d3a",
            "current_name": "set_offset_to_value_00001d3a",
            "code": "\nvoid set_offset_to_value_00001d3a(undefined4 offset,undefined value)\n\n{\n  undefined4 *offset_pointer;\n  \n  offset_pointer = (undefined4 *)calculate_offset_00001d08(offset,value);\n  *offset_pointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001d3a": "set_offset_to_value_00001d3a",
                "param_1": "offset",
                "param_2": "value",
                "puVar1": "offset_pointer"
            },
            "calling": [
                "FUN_00001ddc"
            ],
            "called": [
                "FUN_00001d08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001d3a": {
                    "1": "set_result_to1",
                    "7": "set_offset_to_one",
                    "3": "set_offset_to1",
                    "2": "set_offset_value",
                    "10": "set_offset_to_value"
                },
                "param_1": {
                    "2": "base_address",
                    "1": "param_offset1",
                    "17": "offset"
                },
                "param_2": {
                    "2": "offset",
                    "4": "data",
                    "1": "arg2",
                    "16": "value"
                },
                "puVar1": {
                    "1": "offset_ptr_calculation_result",
                    "9": "offset_ptr",
                    "15": "offset_pointer",
                    "2": "result_pointer"
                }
            }
        },
        "FUN_00001d5e": {
            "entrypoint": "0x00001d5e",
            "current_name": "apply_mask_and_set_bits_00001d5e",
            "code": "\nuint apply_mask_and_set_bits_00001d5e(ushort input_value)\n\n{\n  return input_value & 0x7000 | 0x40048000;\n}\n\n",
            "renaming": {
                "FUN_00001d5e": "apply_mask_and_set_bits_00001d5e",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001f80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001d5e": {
                    "1": "get_filtered_value",
                    "3": "apply_mask_and_offset"
                },
                "param_1": {
                    "3": "input",
                    "21": "input_value",
                    "4": "value",
                    "1": "input_data"
                },
                "0x7000": {
                    "2": "mask"
                },
                "0x40048000": {
                    "1": "offset"
                },
                "PTR_XXXX": {
                    "1": "new_variable_name"
                },
                "DAT_XXXX": {
                    "1": "another_variable_name"
                },
                "param_2": {
                    "1": "value"
                },
                "param_n": {
                    "1": "value"
                }
            }
        },
        "FUN_00001d80": {
            "entrypoint": "0x00001d80",
            "current_name": "apply_mask_00001d80",
            "code": "\nuint apply_mask_00001d80(ushort input_value)\n\n{\n  result input_value & 0x1c0 | 0x400ff000;\n}\n\n",
            "renaming": {
                "FUN_00001d80": "apply_mask_00001d80",
                "param_1": "input_value",
                "return": "result"
            },
            "calling": [
                "FUN_00001ff6",
                "FUN_00001eea"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001d80": {
                    "1": "combine_param_and_constant",
                    "2": "apply_mask_and_value",
                    "5": "apply_mask"
                },
                "param_1": {
                    "5": "input",
                    "1": "original_value",
                    "21": "input_value",
                    "2": "flags"
                },
                "param_2": {
                    "1": "output"
                },
                "param_3": {
                    "1": "unused"
                },
                "param_4": {
                    "1": "unused"
                },
                "0x1c0": {
                    "1": "mask"
                },
                "0x400ff000": {
                    "1": "default_value"
                },
                "return": {
                    "1": "result"
                }
            }
        },
        "FUN_00001da2": {
            "entrypoint": "0x00001da2",
            "current_name": "extract_bits_00001da2",
            "code": "\nushort extract_bits_00001da2(ushort input_value)\n\n{\n  extracted_bits input_value >> 6 & 7;\n}\n\n",
            "renaming": {
                "FUN_00001da2": "extract_bits_00001da2",
                "param_1": "input_value",
                "return": "extracted_bits"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001ddc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001da2": {
                    "2": "extract_bits_from_value",
                    "1": "extract_three_bits",
                    "3": "get_three_least_significant_bits",
                    "16": "extract_bits"
                },
                "param_1": {
                    "10": "input",
                    "2": "bits",
                    "14": "input_value",
                    "1": "original_value"
                },
                "return": {
                    "2": "extracted_bits"
                },
                "param_1 >> 6 & 7": {
                    "1": "extracted_bits"
                },
                "": {
                    "2": ""
                },
                "param_2": {
                    "1": "bits"
                },
                "var_1": {
                    "1": "shifted_input"
                },
                "var_2": {
                    "1": "masked_bits"
                },
                "param_3": {
                    "1": "bit_mask"
                },
                "param_4": {
                    "1": "shift_count"
                },
                "original_variable_name_1": {
                    "1": "result"
                },
                "return value": {
                    "1": "lower_bits"
                },
                "new_variable_name_1": {
                    "1": "shifted_value"
                },
                "new_variable_name_2": {
                    "1": "extracted_bits"
                }
            }
        },
        "FUN_00001dc0": {
            "entrypoint": "0x00001dc0",
            "current_name": "extract_least_significant_bits_00001dc0",
            "code": "\nushort extract_least_significant_bits_00001dc0(ushort input_value)\n\n{\n  lower_six_bits input_value & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_00001dc0": "extract_least_significant_bits_00001dc0",
                "param_1": "input_value",
                "return": "lower_six_bits"
            },
            "calling": [
                "FUN_00001ff6",
                "FUN_00001eea",
                "FUN_00001f80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001dc0": {
                    "2": "extract_bits",
                    "3": "extract_lower_bits",
                    "1": "clear_bits_and_keep_six_bits",
                    "9": "extract_least_significant_bits"
                },
                "param_1": {
                    "6": "input",
                    "20": "input_value",
                    "2": "value",
                    "1": "result"
                },
                "0x3f": {
                    "1": "bitmask"
                },
                "param_2": {
                    "1": "n/a"
                },
                "PTR_N/A": {
                    "1": "n/a"
                },
                "DAT_N/A": {
                    "1": "n/a"
                },
                "param_1 & 0x3f": {
                    "1": "least_significant_bits"
                },
                "& 0x3f": {
                    "1": "and_mask"
                },
                "return": {
                    "1": "lower_six_bits"
                },
                "param_1 (in return statement)": {
                    "1": "extracted_bits"
                }
            }
        },
        "FUN_00001ddc": {
            "entrypoint": "0x00001ddc",
            "current_name": "set_offset_to_extracted_bits_00001ddc",
            "code": "\nvoid set_offset_to_extracted_bits_00001ddc(undefined2 extracted_value)\n\n{\n  char extracted_bits;\n  \n  extracted_bits = extract_bits(extracted_value);\n  set_offset_to_value(&DAT_40048038,extracted_bits + '\\t');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ddc": "set_offset_to_extracted_bits_00001ddc",
                "param_1": "extracted_value",
                "cVar1": "extracted_bits",
                "set_offset_to_value_00001d3a": "set_offset_to_value",
                "extract_bits_00001da2": "extract_bits"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001da2",
                "FUN_00001d3a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001ddc": {
                    "10": "set_offset_to_extracted_value",
                    "1": "set_offset_with_value",
                    "5": "update_offset",
                    "4": "set_offset_to_value"
                },
                "param_1": {
                    "9": "extracted_value",
                    "4": "extracted_bits",
                    "1": "bits_to_extract",
                    "6": "bits",
                    "7": "input_value",
                    "2": "input_param"
                },
                "cVar1": {
                    "16": "extracted_bits",
                    "1": "bits_value",
                    "4": "bits",
                    "3": "bit_value",
                    "2": "bits_extracted"
                },
                "set_offset_to_value_00001d3a": {
                    "8": "set_offset_to_value"
                },
                "DAT_40048038": {
                    "2": "offset_value"
                },
                "extract_bits_00001da2": {
                    "4": "extract_bits"
                }
            }
        },
        "FUN_00001e0c": {
            "entrypoint": "0x00001e0c",
            "current_name": "extract_bits_00001e0c",
            "code": "\nuint extract_bits_00001e0c(int offset,uint data)\n\n{\n  return *(uint *)(bitwise_andDAT_1fff0bd8 + (((int)data >> 3) + offset * 4) * 4) >> ((data bitwise_and 7) << 2)\n         bitwise_and 0xf;\n}\n\n",
            "renaming": {
                "FUN_00001e0c": "extract_bits_00001e0c",
                "param_1": "offset",
                "param_2": "data",
                "&": "bitwise_and"
            },
            "calling": [
                "FUN_00002028",
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001e0c": {
                    "1": "reverse_bits",
                    "2": "extract_value",
                    "3": "extract_bit",
                    "19": "extract_bits"
                },
                "param_1": {
                    "1": "data_offset",
                    "2": "base_offset",
                    "15": "offset",
                    "7": "index"
                },
                "param_2": {
                    "2": "bit_index",
                    "13": "data",
                    "1": "input_data",
                    "4": "bit_position",
                    "3": "value"
                },
                "DAT_1fff0bd8": {
                    "1": "base_address"
                },
                "param_2 & 7": {
                    "5": "bit_offset",
                    "1": "bit_mask"
                },
                "&DAT_1fff0bd8": {
                    "2": "data_pointer",
                    "1": "memory",
                    "3": "data_ptr"
                },
                "&(uint *)(&DAT_1fff0bd8 + (((int)param_2 >> 3) + param_1 * 4) * 4)": {
                    "1": "data_ptr"
                },
                "*(uint *)(&DAT_1fff0bd8 + (((int)param_2 >> 3) + param_1 * 4) * 4)": {
                    "2": "value",
                    "1": "data_address"
                },
                ">>": {
                    "2": "right_shift"
                },
                "&": {
                    "1": "bitwise_and"
                },
                "0xf": {
                    "2": "bit_mask"
                },
                "param_2 >> 3": {
                    "1": "shifted_index",
                    "2": "shifted_data"
                },
                "(param_2 & 7) << 2": {
                    "1": "shift_by"
                },
                "& 0xf": {
                    "1": "bit_mask"
                },
                "((param_2 & 7) << 2)": {
                    "1": "bit_shift"
                },
                "new_variable_name_1": {
                    "1": "result"
                },
                "<no change>": {
                    "1": "result"
                },
                "param_3": {
                    "1": "shifted_value"
                },
                "param_4": {
                    "1": "data_value"
                },
                "var_1": {
                    "1": "p_address"
                },
                "var_2": {
                    "1": "shifted_offset"
                },
                "var_3": {
                    "1": "masked_value"
                },
                "param_1_4": {
                    "1": "offset_times_4"
                },
                "VAR_00001f58": {
                    "1": "shifted_offset"
                },
                "VAR_00001f5c": {
                    "1": "shift_value"
                },
                "(((int)param_2 >> 3) + param_1 * 4) * 4": {
                    "2": "index"
                },
                "bitData >> shiftBy": {
                    "1": "shifted_bits"
                },
                "shiftedBits & 0xf": {
                    "1": "result"
                },
                "new_variable_name_2": {
                    "1": "shifted"
                },
                "new_variable_name_3": {
                    "1": "mask"
                },
                "0": {
                    "1": "result"
                }
            }
        },
        "FUN_00001e44": {
            "entrypoint": "0x00001e44",
            "current_name": "update_bits_00001e44",
            "code": "\nvoid update_bits_00001e44(int index,uint bit_position,int new_value)\n\n{\n  int byte_offset;\n  \n  byte_offset = (int)bit_position >> 3;\n  *(uint *)(bitwise_andDAT_1fff0bd8 + (byte_offset + index * 4) * 4) =\n       *(uint *)(bitwise_andDAT_1fff0bd8 + (byte_offset + index * 4) * 4) bitwise_and ~(0xf << ((bit_position bitwise_and 7) << 2));\n  *(uint *)(bitwise_andDAT_1fff0bd8 + (byte_offset + index * 4) * 4) =\n       *(uint *)(bitwise_andDAT_1fff0bd8 + (byte_offset + index * 4) * 4) | new_value << ((bit_position bitwise_and 7) << 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001e44": "update_bits_00001e44",
                "param_1": "index",
                "param_2": "bit_position",
                "param_3": "new_value",
                "iVar1": "byte_offset",
                "&": "bitwise_and"
            },
            "calling": [
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001e44": {
                    "1": "update_bit_field_value",
                    "6": "update_bits",
                    "3": "update_data_bits",
                    "2": "update_value_at_offset",
                    "5": "update_data"
                },
                "param_1": {
                    "1": "bit_field_offset",
                    "2": "array_index",
                    "6": "offset",
                    "14": "index"
                },
                "param_2": {
                    "1": "offset",
                    "9": "bit_offset",
                    "2": "bit_number",
                    "10": "bit_position",
                    "6": "bit_index"
                },
                "param_3": {
                    "2": "data",
                    "5": "value",
                    "23": "new_value",
                    "1": "new_data"
                },
                "iVar1": {
                    "7": "byte_offset",
                    "6": "shifted_index",
                    "1": "num_words",
                    "2": "word_offset",
                    "4": "shift_amount"
                },
                "0xf": {
                    "1": "mask"
                },
                "&": {
                    "1": "bitwise_and"
                },
                "|": {
                    "1": "bitwise_or"
                },
                "<<": {
                    "1": "left_shift"
                },
                "*": {
                    "1": "multiply"
                },
                "& 7": {
                    "1": "bitwise_and_seven"
                },
                "2": {
                    "1": "shift_amount"
                },
                "return": {
                    "1": ""
                }
            }
        },
        "FUN_00001ec4": {
            "entrypoint": "0x00001ec4",
            "current_name": "update_bits_00001ec4",
            "code": "\nvoid update_bits_00001ec4(undefined4 input1,undefined4 input2)\n\n{\n  undefined4 extracted_bits;\n  \n  extracted_bits = extract_bits(input1,input2);\n  modify_bits(input1,input2,extracted_bits);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ec4": "update_bits_00001ec4",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "extracted_bits",
                "extract_bits_00001e0c": "extract_bits",
                "update_bits_00001e44": "modify_bits"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001e0c",
                "FUN_00001e44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001ec4": {
                    "27": "update_bits",
                    "2": "update_and_extract_bits",
                    "1": "update_bits_from_extract"
                },
                "param_1": {
                    "5": "input_1",
                    "3": "input_param",
                    "1": "input_parameter_1",
                    "6": "input_param_1",
                    "11": "input1"
                },
                "param_2": {
                    "11": "input2",
                    "1": "arg2",
                    "3": "input_param2",
                    "6": "input_param_2",
                    "5": "input_2"
                },
                "uVar1": {
                    "18": "extracted_bits",
                    "2": "bit_value",
                    "4": "bits_extracted",
                    "1": "bit_extraction_result"
                },
                "extract_bits_00001e0c": {
                    "1": "extract_bits"
                },
                "update_bits_00001e44": {
                    "1": "modify_bits"
                },
                "<original_parameter_name_1>": {
                    "1": "param_1"
                },
                "<original_parameter_name_2>": {
                    "1": "param_2"
                },
                "<original_variable_name_1>": {
                    "1": "extracted_bits"
                },
                "<original_variable_name_2>": {
                    "1": "updated_bits"
                }
            }
        },
        "FUN_00001eea": {
            "entrypoint": "0x00001eea",
            "current_name": "update_data_00001eea",
            "code": "\nundefined4 update_data_00001eea(undefined2 data,byte byte_value)\n\n{\n  uint lsb;\n  int masked_value;\n  int lsb_index;\n  \n  update_data_00001eea_00001f80(data,0);\n  if ((char)byte_value < '\\0') {\n    lsb = extract_least_significant_bits_00001dc0(data);\n    masked_value = apply_mask_00001d80(data);\n    *(uint *)(masked_value + 0x14) = *(uint *)(masked_value + 0x14) | 1 << (lsb & 0xff);\n  }\n  else {\n    lsb = extract_least_significant_bits_00001dc0(data);\n    masked_value = apply_mask_00001d80(data);\n    *(uint *)(masked_value + 0x14) = *(uint *)(masked_value + 0x14) & ~(1 << (lsb & 0xff));\n  }\n  masked_value = apply_mask_and_set_bits_00001d5e(data);\n  lsb_index = extract_least_significant_bits_00001dc0(data);\n  *(uint *)(masked_value + lsb_index * 4) = byte_value & 0x23 | 0x100;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00001eea": "update_data_00001eea",
                "param_1": "data",
                "param_2": "byte_value",
                "uVar1": "lsb",
                "iVar2": "masked_value",
                "iVar3": "lsb_index"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001d80",
                "FUN_00001f80",
                "FUN_00001d5e",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001eea": {
                    "4": "update_and_set_data",
                    "1": "update_data_with_flag",
                    "24": "update_data"
                },
                "param_1": {
                    "3": "input_param",
                    "14": "data",
                    "1": "value",
                    "4": "param"
                },
                "param_2": {
                    "6": "flag",
                    "4": "value",
                    "1": "byte_param",
                    "10": "byte_value",
                    "2": "byte_val"
                },
                "uVar1": {
                    "2": "bits",
                    "1": "lsb_value",
                    "3": "bit_index",
                    "4": "least_significant_bits",
                    "16": "lsb"
                },
                "iVar2": {
                    "12": "masked_data",
                    "1": "mask_offset",
                    "17": "masked_value"
                },
                "iVar3": {
                    "5": "extracted_bits",
                    "1": "lsb_extracted2",
                    "4": "lsb_value",
                    "13": "lsb_index"
                }
            }
        },
        "FUN_00001f80": {
            "entrypoint": "0x00001f80",
            "current_name": "update_data_00001f80",
            "code": "\nvoid update_data_00001f80(undefined2 offset,undefined4 new_value)\n\n{\n  int offset;\n  int extracted_bits;\n  undefined4 extracted_bits;\n  undefined4 extracted_bits2;\n  uint extracted_value;\n  \n  set_offset_to_extracted_bits(offset);\n  offset = apply_mask_and_set_bits(offset);\n  extracted_bits = extract_least_significant_bits(offset);\n  extracted_value = *(uint *)(offset + extracted_bits * 4);\n  offset = apply_mask_and_set_bits(offset);\n  extracted_bits = extract_least_significant_bits(offset);\n  *(undefined4 *)(offset + extracted_bits * 4) = new_value;\n  if ((extracted_value & 0xf0000) != 0) {\n    extracted_bits = extract_bits(offset);\n    extracted_bits2 = extract_least_significant_bits(offset);\n    update_bits(extracted_bits,extracted_bits2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001f80": "update_data_00001f80",
                "param_1": "offset",
                "param_2": "new_value",
                "iVar1": "offset",
                "iVar2": "extracted_bits",
                "uVar3": "extracted_bits",
                "uVar4": "extracted_bits2",
                "uVar5": "extracted_value",
                "set_offset_to_extracted_bits_00001ddc": "set_offset_to_extracted_bits",
                "apply_mask_and_set_bits_00001d5e": "apply_mask_and_set_bits",
                "extract_least_significant_bits_00001dc0": "extract_least_significant_bits",
                "extract_bits_00001da2": "extract_bits",
                "update_bits_00001ec4": "update_bits"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001448"
            ],
            "called": [
                "FUN_00001da2",
                "FUN_00001ec4",
                "FUN_00001dc0",
                "FUN_00001d5e",
                "FUN_00001ddc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001f80": {
                    "1": "update_memory_value",
                    "2": "update_extracted_value",
                    "3": "update_value",
                    "10": "update_data"
                },
                "param_1": {
                    "4": "data_offset",
                    "1": "input_param",
                    "2": "input_data",
                    "9": "offset"
                },
                "param_2": {
                    "1": "new_bit_value",
                    "19": "new_value",
                    "7": "value",
                    "3": "new_data"
                },
                "iVar1": {
                    "2": "masked_offset1",
                    "1": "mask_and_bit_value1",
                    "3": "applied_offset",
                    "9": "offset"
                },
                "iVar2": {
                    "4": "extracted_bits_offset",
                    "2": "lsb_index",
                    "1": "extracted_bits1",
                    "3": "index"
                },
                "uVar3": {
                    "16": "extracted_bits",
                    "5": "bits_to_extract",
                    "9": "extracted_bits1",
                    "1": "extracted_bits2"
                },
                "uVar4": {
                    "1": "lsb_extracted2",
                    "3": "lsb_bits",
                    "5": "least_significant_bits",
                    "7": "extracted_bits2",
                    "2": "lsb"
                },
                "uVar5": {
                    "15": "extracted_value",
                    "1": "existing_value",
                    "5": "value",
                    "2": "original_value"
                },
                "set_offset_to_extracted_bits_00001ddc": {
                    "5": "set_offset_to_extracted_bits"
                },
                "apply_mask_and_set_bits_00001d5e": {
                    "5": "apply_mask_and_set_bits"
                },
                "extract_least_significant_bits_00001dc0": {
                    "5": "extract_least_significant_bits"
                },
                "extract_bits_00001da2": {
                    "5": "extract_bits"
                },
                "update_bits_00001ec4": {
                    "5": "update_bits"
                },
                "*(uint *)(iVar1 + iVar2 * 4)": {
                    "1": "value_to_extract"
                },
                "*(undefined4 *)(iVar1 + iVar2 * 4)": {
                    "1": "extracted_value"
                }
            }
        },
        "FUN_00001ff6": {
            "entrypoint": "0x00001ff6",
            "current_name": "set_bit_at_index_00001ff6",
            "code": "\nvoid set_bit_at_index_00001ff6(undefined2 input)\n\n{\n  uint least_significant_bit;\n  int masked_value;\n  \n  least_significant_bit = extract_lsb(input);\n  masked_value = apply_mask(input);\n  *(int *)(masked_value + 4) = 1 << (least_significant_bit & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ff6": "set_bit_at_index_00001ff6",
                "param_1": "input",
                "uVar1": "least_significant_bit",
                "iVar2": "masked_value",
                "extract_least_significant_bits_00001dc0": "extract_lsb",
                "apply_mask_00001d80": "apply_mask"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001d80",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001ff6": {
                    "2": "set_bit_in_integer",
                    "3": "set_bit_in_int",
                    "1": "set_bit_on_integer",
                    "8": "set_bit_at_index"
                },
                "param_1": {
                    "18": "input",
                    "1": "input_param",
                    "10": "input_value"
                },
                "uVar1": {
                    "1": "extracted_bits",
                    "4": "least_significant_bits",
                    "2": "lsb_value",
                    "9": "least_significant_bit",
                    "7": "lsb"
                },
                "iVar2": {
                    "1": "masked_input",
                    "2": "masked_address",
                    "28": "masked_value"
                },
                "extract_least_significant_bits_00001dc0": {
                    "2": "extract_lsb"
                },
                "apply_mask_00001d80": {
                    "2": "apply_mask"
                }
            }
        },
        "FUN_00002028": {
            "entrypoint": "0x00002028",
            "current_name": "process_data_00002028",
            "code": "\nvoid process_data_00002028(int base_address,undefined4 data)\n\n{\n  int bit_index;\n  uint flags;\n  uint bit_index;\n  \n  flags = *(uint *)(base_address + 0xa0);\n  for (bit_index = 0; (int)bit_index < 0x20; bit_index = bit_index + 1) {\n    if (((flags & 1 << (bit_index & 0xff)) != 0) &&\n       ((*(uint *)(base_address + bit_index * 4) & 0xf0000) != 0)) {\n      *(int *)(base_address + 0xa0) = 1 << (bit_index & 0xff);\n      bit_index = extract_bits_00001e0c(data,bit_index);\n      (**(code **)(&DAT_1fff0b78 + bit_index * 0xc))(*(undefined4 *)(&DAT_1fff0b7c + bit_index * 0xc));\n    }\n  }\n  check_and_set_flag_00001cf0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002028": "process_data_00002028",
                "param_1": "base_address",
                "param_2": "data",
                "local_c": "bit_index",
                "iVar1": "bit_index",
                "uVar2": "flags"
            },
            "calling": [
                "FUN_000020b8",
                "FUN_00002108",
                "FUN_000020cc",
                "FUN_000020e0",
                "FUN_000020f4"
            ],
            "called": [
                "FUN_00001e0c",
                "FUN_00001cf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002028": {
                    "1": "reverse_and_execute",
                    "2": "process_bits",
                    "10": "process_data",
                    "9": "process_flags"
                },
                "param_1": {
                    "4": "input_data",
                    "1": "data_offset",
                    "3": "data_address",
                    "5": "base_address",
                    "2": "data_pointer"
                },
                "param_2": {
                    "1": "initial_value",
                    "5": "data",
                    "3": "param",
                    "2": "flag_value"
                },
                "local_c": {
                    "1": "current_bit",
                    "7": "bit_position",
                    "10": "bit_index",
                    "3": "counter",
                    "8": "index"
                },
                "iVar1": {
                    "3": "extracted_value",
                    "2": "bit_extraction_result",
                    "1": "bit_value",
                    "14": "bit_index",
                    "4": "index"
                },
                "uVar2": {
                    "6": "flag",
                    "3": "flag_value",
                    "1": "flag_data",
                    "9": "flags",
                    "4": "bit_mask"
                }
            }
        },
        "FUN_000020b8": {
            "entrypoint": "0x000020b8",
            "current_name": "initialize_data_processing_000020b8",
            "code": "\nvoid initialize_data_processing_000020b8(void)\n\n{\n  process_data(0x40049000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020b8": "initialize_data_processing_000020b8",
                "process_data_00002028": "process_data"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000020b8": {
                    "2": "initialize_data",
                    "3": "initialize_data_process",
                    "1": "process_initialization",
                    "19": "initialize_data_processing"
                },
                "process_data_00002028": {
                    "1": "initialize_data",
                    "27": "process_data"
                },
                "0x40049000": {
                    "2": "data_pointer",
                    "1": "process_data_address",
                    "3": "base_address",
                    "12": "data_address"
                },
                "0": {
                    "2": "flag",
                    "1": "initial_value"
                }
            }
        },
        "FUN_000020cc": {
            "entrypoint": "0x000020cc",
            "current_name": "process_data_000020cc",
            "code": "\nvoid process_data_000020cc(void)\n\n{\n  process_data_000020cc(0x4004a000,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020cc": "process_data_000020cc",
                "process_data_00002028": "process_data"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000020cc": {
                    "14": "process_data",
                    "1": "initialize_process",
                    "10": "initialize_data_processing",
                    "4": "process_and_send_data"
                },
                "process_data_00002028": {
                    "1": "get_data",
                    "17": "process_data",
                    "6": "process_data_helper"
                },
                "0x4004a000": {
                    "1": "input_address",
                    "12": "data_address",
                    "2": "input_data"
                },
                "1": {
                    "3": "data_size",
                    "1": "num_data_entries",
                    "2": "data_length"
                }
            }
        },
        "FUN_000020e0": {
            "entrypoint": "0x000020e0",
            "current_name": "process_data_000020e0",
            "code": "\nvoid process_data_000020e0(void)\n\n{\n  process_data_000020e0(0x4004b000,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020e0": "process_data_000020e0",
                "process_data_00002028": "process_data"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000020e0": {
                    "1": "process_and_display_data",
                    "17": "process_data",
                    "7": "initialize_data_processing"
                },
                "0x4004b000": {
                    "3": "data_pointer",
                    "2": "memory_address",
                    "1": "input_data",
                    "14": "data_address"
                },
                "2": {
                    "4": "num_iterations",
                    "8": "data_size",
                    "1": "num_of_iterations"
                },
                "process_data_00002028": {
                    "9": "process_data",
                    "1": "process_data_func",
                    "6": "process_data_helper"
                },
                "var_1": {
                    "1": "base_address"
                },
                "var_2": {
                    "1": "data_length"
                },
                "PARAM_1": {
                    "1": "base_address"
                },
                "PARAM_2": {
                    "1": "num_iterations"
                }
            }
        },
        "FUN_000020f4": {
            "entrypoint": "0x000020f4",
            "current_name": "process_data_000020f4",
            "code": "\nvoid process_data_000020f4(void)\n\n{\n  process_data_000020f4(0x4004c000,3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020f4": "process_data_000020f4",
                "process_data_00002028": "process_data"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000020f4": {
                    "1": "process_initial_data",
                    "17": "process_data",
                    "2": "process_and_return_data",
                    "6": "initialize_data_processing",
                    "3": "initialize_data"
                },
                "process_data_00002028": {
                    "3": "process_data_helper",
                    "1": "perform_data_processing",
                    "14": "process_data"
                },
                "FUN_00002028": {
                    "1": "process_data_helper"
                },
                "0x4004c000": {
                    "4": "data",
                    "3": "base_address",
                    "2": "data_pointer",
                    "8": "data_address",
                    "1": "data_memory_address"
                },
                "3": {
                    "9": "num_iterations",
                    "1": "data_count",
                    "3": "num_elements"
                },
                "PTR_00002028": {
                    "1": "data_ptr"
                },
                "r0": {
                    "1": "base_address"
                },
                "r1": {
                    "1": "data_length"
                }
            }
        },
        "FUN_00002108": {
            "entrypoint": "0x00002108",
            "current_name": "process_data_00002108",
            "code": "\nvoid process_data_00002108(void)\n\n{\n  process_data_00002108(0x4004d000,4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002108": "process_data_00002108",
                "process_data_00002028": "process_data"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002108": {
                    "13": "initialize_data_processing",
                    "1": "process_memory_data",
                    "17": "process_data"
                },
                "process_data_00002028": {
                    "15": "process_data",
                    "2": "process_data_00002028",
                    "3": "process_data_chunk",
                    "1": "process_data_function",
                    "5": "process_data_helper"
                },
                "0x4004d000": {
                    "1": "memory_address",
                    "2": "data_pointer",
                    "13": "data_address"
                },
                "4": {
                    "3": "data_length",
                    "11": "data_size",
                    "1": "block_size"
                },
                "FUN_00002028": {
                    "1": "extract_data"
                },
                "data_address": {
                    "1": "0x4004d000"
                },
                "data_length": {
                    "1": "4"
                },
                "ptr_data_00002028": {
                    "1": "data"
                },
                "ptr_address_00002028": {
                    "1": "address"
                },
                "uVar1": {
                    "1": "address"
                },
                "uVar2": {
                    "1": "size"
                }
            }
        },
        "FUN_0000211c": {
            "entrypoint": "0x0000211c",
            "current_name": "print_process_information_0000211c",
            "code": "\nvoid print_process_information_0000211c(void)\n\n{\n  int offset;\n  undefined2 format_string;\n  int stack_size;\n  int priority;\n  dword base_address;\n  uint index;\n  undefined4 *current_pointer;\n  undefined4 main_stack_pointer;\n  undefined4 memory_address;\n  int last_offset;\n  short counter;\n  int total_offset;\n  int total_stack_size;\n  \n  format_string = 0x515f;\n  total_stack_size = 0;\n  total_offset = 0;\n  process_and_initialize_data_00004c84(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",\n               &DAT_000070b8,\"state\");\n  last_offset = find_last_offset();\n  memory_address = get_memory_address();\n  main_stack_pointer = get_main_stack_pointer();\n  process_and_initialize_data_00004c84(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n               last_offset,memory_address,main_stack_pointer);\n  total_stack_size = total_stack_size + 0x200;\n  if (0 < last_offset) {\n    total_offset = last_offset + total_offset;\n  }\n  for (counter = 1; counter < 0x21; counter = counter + 1) {\n    current_pointer = *(undefined4 **)(&DAT_1fff0358 + counter * 4);\n    if (current_pointer != (undefined4 *)0x0) {\n      index = (uint)*(byte *)(current_pointer + 1);\n      base_address = (rel_offset)[index];\n      priority = (int)&format_string + (uint)(8 < index);\n      stack_size = size;\n      total_stack_size = stack_size + total_stack_size;\n      offset = calculate_offset(current);\n      stack_size = stack_size - offset;\n      total_offset = stack_size + total_offset;\n      process_and_initialize_data_00004c84(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n                   (int)*(short *)((int)current_pointer + 6),state,base_address,priority,\n                   *(undefined *)((int)current_pointer + 5),size,stack_size,current,*current_pointer);\n    }\n  }\n  process_and_initialize_data_00004c84(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,\n               &DAT_00007190,total_stack_size,total_offset);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000211c": "print_process_information_0000211c",
                "local_40": "format_string",
                "local_3c": "stack_size",
                "local_38": "priority",
                "local_34": "base_address",
                "local_30": "index",
                "local_2c": "current_pointer",
                "local_28": "main_stack_pointer",
                "local_24": "memory_address",
                "local_20": "last_offset",
                "local_1a": "counter",
                "local_18": "total_offset",
                "local_14": "total_stack_size",
                "find_last_offset_000008b8": "find_last_offset",
                "get_memory_address_0000091c": "get_memory_address",
                "get_main_stack_pointer_00000900": "get_main_stack_pointer",
                "Elf32_Rel_ARRAY_1fff0200": "rel_array",
                "calculate_offset_000010a0": "calculate_offset",
                "iVar1": "offset",
                "&Elf32_Rel_ARRAY_1fff0200": "rel_array",
                "&Elf32_Rel_ARRAY_1fff0200[4].r_offset": "rel_offset",
                "local_2c[10]": "state",
                "local_2c[9]": "current",
                "local_2c[0xb]": "size"
            },
            "calling": [
                "FUN_00002eb4",
                "FUN_00000f04"
            ],
            "called": [
                "FUN_000010a0",
                "FUN_00004c84",
                "FUN_000008b8",
                "FUN_00000900",
                "FUN_0000091c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_0000211c(void)\n\n{\n  int iVar1;\n  undefined2 local_40;\n  int local_3c;\n  int local_38;\n  dword local_34;\n  uint local_30;\n  undefined4 *local_2c;\n  undefined4 local_28;\n  undefined4 local_24;\n  int local_20;\n  short local_1a;\n  int local_18;\n  int local_14;\n  \n  local_40 = 0x515f;\n  local_14 = 0;\n  local_18 = 0;\n  FUNC_00004c84(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",\n               &DAT_000070b8,\"state\");\n  local_20 = find_last_offset_000008b8();\n  local_24 = get_memory_address_0000091c();\n  local_28 = get_main_stack_pointer_00000900();\n  FUNC_00004c84(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n               local_20,local_24,local_28);\n  local_14 = local_14 + 0x200;\n  if (0 < local_20) {\n    local_18 = local_20 + local_18;\n  }\n  for (local_1a = 1; local_1a < 0x21; local_1a = local_1a + 1) {\n    local_2c = *(undefined4 **)(&DAT_1fff0358 + local_1a * 4);\n    if (local_2c != (undefined4 *)0x0) {\n      local_30 = (uint)*(byte *)(local_2c + 1);\n      local_34 = (&Elf32_Rel_ARRAY_1fff0200[4].r_offset)[local_30];\n      local_38 = (int)&local_40 + (uint)(8 < local_30);\n      local_3c = local_2c[0xb];\n      local_14 = local_3c + local_14;\n      iVar1 = calculate_offset_000010a0(local_2c[9]);\n      local_3c = local_3c - iVar1;\n      local_18 = local_3c + local_18;\n      FUNC_00004c84(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n                   (int)*(short *)((int)local_2c + 6),local_2c[10],local_34,local_38,\n                   *(undefined *)((int)local_2c + 5),local_2c[0xb],local_3c,local_2c[9],*local_2c);\n    }\n  }\n  FUNC_00004c84(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,\n               &DAT_00007190,local_14,local_18);\n  return;\n}\n\n",
            "additional_data": {
                "FUN_0000211c": {
                    "1": "print_stack_information",
                    "2": "print_memory_info",
                    "20": "print_process_information",
                    "5": "print_process_info"
                },
                "local_40": {
                    "1": "underscored_separator",
                    "2": "format",
                    "4": "header",
                    "13": "format_string"
                },
                "local_3c": {
                    "1": "process_offset",
                    "2": "stack_usage",
                    "11": "stack_size",
                    "7": "offset"
                },
                "local_38": {
                    "2": "stack_offset",
                    "1": "current_stack_level",
                    "3": "priority"
                },
                "local_34": {
                    "2": "base_addr",
                    "1": "r_offset",
                    "4": "current_offset",
                    "6": "base_address"
                },
                "local_30": {
                    "1": "rel_table_index",
                    "2": "rel_index",
                    "15": "index",
                    "4": "byte_value"
                },
                "local_2c": {
                    "2": "function_pointer",
                    "1": "current_address",
                    "3": "entry",
                    "4": "current_pointer"
                },
                "local_28": {
                    "1": "base_addr",
                    "2": "main_stack_ptr",
                    "24": "main_stack_pointer"
                },
                "local_24": {
                    "27": "memory_address",
                    "2": "stack_pointer"
                },
                "local_20": {
                    "2": "offset",
                    "1": "total_stack_size",
                    "28": "last_offset"
                },
                "local_1a": {
                    "1": "module_index",
                    "2": "iterator",
                    "11": "counter",
                    "3": "loop_index",
                    "4": "index",
                    "6": "process_index"
                },
                "local_18": {
                    "8": "total_stack_usage",
                    "11": "total_offset",
                    "5": "total_stack_size",
                    "1": "total_size",
                    "2": "total_stack_offset"
                },
                "local_14": {
                    "1": "used_stack_size",
                    "4": "total_process_size",
                    "2": "current_offset",
                    "3": "total_stack_used"
                },
                "FUNC_00004c84": {
                    "1": "print_formatted_string",
                    "2": "print_formatted",
                    "3": "print_line"
                },
                "DAT_000070b8": {
                    "2": "pid",
                    "3": "state",
                    "1": "process_state"
                },
                "find_last_offset_000008b8": {
                    "12": "find_last_offset"
                },
                "get_memory_address_0000091c": {
                    "12": "get_memory_address"
                },
                "get_main_stack_pointer_00000900": {
                    "11": "get_main_stack_pointer",
                    "1": "get_stack_pointer"
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "1": "elf_rel_array",
                    "2": "relocation_array",
                    "3": "rel_array"
                },
                "calculate_offset_000010a0": {
                    "12": "calculate_offset"
                },
                "DAT_00007190": {
                    "1": "separator1"
                },
                "DAT_00007194": {
                    "1": "line_specifier2"
                },
                "0x200": {
                    "1": "stack_size"
                },
                "0x21": {
                    "1": "process_count"
                },
                "0x0": {
                    "1": "null_pointer"
                },
                "&DAT_1fff0358": {
                    "1": "symbol_table"
                },
                "0x5": {
                    "1": "offset"
                },
                "6": {
                    "1": "short_value_offset"
                },
                "10": {
                    "1": "name_offset"
                },
                "0xb": {
                    "1": "size_offset"
                },
                "9": {
                    "1": "address_offset"
                },
                "4": {
                    "1": "field_offset"
                },
                "5": {
                    "1": "byte_value_offset"
                },
                "0x3": {
                    "1": "name_length_offset"
                },
                "&DAT_00007190": {
                    "1": "separator1"
                },
                "&DAT_00007194": {
                    "1": "stack"
                },
                "iVar1": {
                    "1": "offset"
                },
                "&DAT_000070b8": {
                    "1": "pid_str"
                },
                "&Elf32_Rel_ARRAY_1fff0200": {
                    "1": "rel_array"
                },
                "&Elf32_Rel_ARRAY_1fff0200[4].r_offset": {
                    "1": "rel_offset"
                },
                "DAT_1fff0358": {
                    "1": "entry_table"
                },
                "*(byte *)(local_2c + 1)": {
                    "1": "index_byte"
                },
                "*(undefined *)((int)local_2c + 5)": {
                    "1": "priority_byte"
                },
                "((int)local_2c + 6)": {
                    "1": "pid"
                },
                "local_2c[10]": {
                    "1": "state"
                },
                "local_2c[9]": {
                    "1": "current"
                },
                "local_2c[0xb]": {
                    "1": "size"
                },
                "*local_2c": {
                    "1": "value"
                }
            }
        },
        "FUN_00002270": {
            "entrypoint": "0x00002270",
            "current_name": "check_equality_00002270",
            "code": "\nundefined check_equality_00002270(int input)\n\n{\n  undefined result;\n  int value1;\n  bool is_equal;\n  \n  value1 = *(int *)(input + 0xc);\n  is_equal = *(int *)(input + 8) == value1;\n  if (is_equal) {\n    value1 = 1;\n  }\n  result = (undefined)value1;\n  if (!is_equal) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002270": "check_equality_00002270",
                "param_1": "input",
                "iVar2": "value1",
                "bVar3": "is_equal",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002270": {
                    "1": "check_equal_int_values",
                    "26": "check_equality"
                },
                "param_1": {
                    "17": "input",
                    "1": "ptr",
                    "2": "input_value",
                    "6": "base_address"
                },
                "iVar2": {
                    "1": "value_at_offset_c",
                    "2": "value_at_offset",
                    "9": "value",
                    "13": "value1"
                },
                "bVar3": {
                    "2": "is_matching",
                    "1": "values_are_equal",
                    "22": "is_equal"
                },
                "uVar1": {
                    "11": "result",
                    "1": "return_value"
                },
                "F": {
                    "1": "is_reversed"
                }
            }
        },
        "FUN_00002294": {
            "entrypoint": "0x00002294",
            "current_name": "check_equality_00002294",
            "code": "\nundefined check_equality_00002294(int input)\n\n{\n  undefined result;\n  int difference;\n  bool is_equal;\n  \n  difference = *(int *)(input + 4);\n  is_equal = *(int *)(input + 0xc) - *(int *)(input + 8) == difference;\n  if (is_equal) {\n    difference = 1;\n  }\n  result = (undefined)difference;\n  if (!is_equal) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002294": "check_equality_00002294",
                "param_1": "input",
                "iVar2": "difference",
                "bVar3": "is_equal",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002294": {
                    "2": "check_if_difference_is_equal_to_value",
                    "1": "check_sum_equals",
                    "3": "check_difference",
                    "7": "check_equality"
                },
                "param_1": {
                    "25": "input",
                    "1": "input_param"
                },
                "iVar2": {
                    "3": "value1",
                    "1": "checksum",
                    "2": "sum",
                    "4": "offset",
                    "13": "difference"
                },
                "bVar3": {
                    "1": "is_sum_difference_equal",
                    "2": "is_sum_valid",
                    "6": "is_difference_equal",
                    "3": "is_difference_equal_to_value",
                    "10": "is_equal"
                },
                "uVar1": {
                    "20": "result",
                    "1": "return_val"
                }
            }
        },
        "FUN_000022be": {
            "entrypoint": "0x000022be",
            "current_name": "update_array_element_000022be",
            "code": "\nvoid update_array_element_000022be(int *array,undefined value)\n\n{\n  uint current_index;\n  \n  current_index = previous_offset;\n  previous_offset = current_index + 1;\n  *(undefined *)((current_index & array_size - 1U) + *array) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000022be": "update_array_element_000022be",
                "param_1": "array",
                "param_2": "value",
                "uVar1": "current_index",
                "param_1[3]": "previous_offset",
                "param_1[1]": "array_size"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000022be": {
                    "1": "store_byte_value",
                    "7": "update_array_element",
                    "4": "increment_and_store_value",
                    "3": "write_to_memory"
                },
                "param_1": {
                    "22": "array",
                    "1": "arr",
                    "2": "memory"
                },
                "param_2": {
                    "3": "value_to_write",
                    "2": "new_value",
                    "1": "data_to_store",
                    "21": "value"
                },
                "uVar1": {
                    "1": "offset",
                    "2": "original_value",
                    "3": "old_value",
                    "4": "current_value",
                    "8": "current_index"
                },
                "*(undefined *)((uVar1 & param_1[1] - 1U) + *param_1)": {
                    "1": "address_to_update"
                },
                "param_1[3]": {
                    "1": "old_value_index"
                },
                "param_1[1]": {
                    "1": "array_size"
                },
                "*(undefined *)((uVar1 & array[1] - 1U) + *array)": {
                    "2": "target_address",
                    "1": "target_element"
                },
                "*param_1": {
                    "1": "base_address"
                },
                "uVar1 + 1": {
                    "1": "new_index"
                },
                "& param_1[1] - 1U": {
                    "1": "mask"
                },
                "DAT_1234": {
                    "1": "constant"
                }
            }
        },
        "FUN_000022f0": {
            "entrypoint": "0x000022f0",
            "current_name": "increment_and_retrieve_value_000022f0",
            "code": "\nundefined increment_and_retrieve_value_000022f0(int *array)\n\n{\n  uint current_value;\n  \n  current_value = current_value;\n  current_value = current_value + 1;\n  result *(undefined *)((current_value & array_length - 1U) + *array);\n}\n\n",
            "renaming": {
                "FUN_000022f0": "increment_and_retrieve_value_000022f0",
                "param_1": "array",
                "uVar1": "current_value",
                "param_1[2]": "current_value",
                "return": "result",
                "param_1[1]": "array_length"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000022f0": {
                    "1": "increment_and_retrieve_data",
                    "4": "increment_and_return_element",
                    "2": "increment_and_return_value",
                    "5": "increment_and_retrieve_value"
                },
                "param_1": {
                    "2": "pointer_array",
                    "25": "array",
                    "1": "memory_pointer"
                },
                "uVar1": {
                    "1": "current_offset",
                    "4": "previous_value",
                    "3": "index",
                    "2": "current_index",
                    "9": "current_value"
                },
                "1": {
                    "1": "mask"
                },
                "return value": {
                    "1": "retrieved_value"
                },
                "*param_1": {
                    "1": "array_start",
                    "6": "base_address"
                },
                "param_1[2]": {
                    "1": "value_at_index2",
                    "3": "current_value"
                },
                "*(undefined *)((uVar1 & param_1[1] - 1U) + *param_1)": {
                    "1": "data_to_be_returned"
                },
                "return": {
                    "1": "result"
                },
                "": {
                    "1": "element"
                },
                "param_1[1]": {
                    "2": "mask"
                },
                "uVar1 & param_1[1] - 1U": {
                    "1": "masked_value"
                },
                "param_1[1] - 1U": {
                    "1": "mask_minus_one"
                },
                "(uVar1 & param_1[1] - 1U) + *param_1": {
                    "1": "address_to_access"
                }
            }
        },
        "FUN_0000231c": {
            "entrypoint": "0x0000231c",
            "current_name": "copy_and_increment_0000231c",
            "code": "\nint copy_and_increment_0000231c(undefined4 value,undefined *destination,int length)\n\n{\n  undefined value;\n  int equality_check_result;\n  undefined *dest_ptr;\n  int remaining_length;\n  \n  dest_ptr = destination;\n  remaining_length = length;\n  while ((remaining_length != 0 && (equality_check_result = check_equality_00002270(value), equality_check_result == 0))) {\n    value = increment_and_retrieve_value_000022f0(value);\n    *dest_ptr = value;\n    remaining_length = remaining_length + -1;\n    dest_ptr = dest_ptr + 1;\n  }\n  return length - remaining_length;\n}\n\n",
            "renaming": {
                "FUN_0000231c": "copy_and_increment_0000231c",
                "param_1": "value",
                "param_2": "destination",
                "param_3": "length",
                "uVar1": "value",
                "iVar2": "equality_check_result",
                "local_20": "dest_ptr",
                "local_14": "remaining_length"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002270",
                "FUN_000022f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000231c": {
                    "1": "copy_with_limit",
                    "5": "copy_and_increment_values",
                    "6": "copy_and_decrement",
                    "2": "retrieve_and_copy_values",
                    "10": "copy_and_increment"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "input_param",
                    "9": "value",
                    "5": "source",
                    "3": "source_value"
                },
                "param_2": {
                    "17": "destination",
                    "2": "output_array",
                    "1": "destination_buffer",
                    "4": "destination_array",
                    "3": "output_buffer"
                },
                "param_3": {
                    "1": "limit",
                    "3": "size",
                    "4": "num_elements",
                    "8": "length"
                },
                "uVar1": {
                    "4": "retrieved_value",
                    "5": "value",
                    "3": "incremented_value",
                    "1": "copied_value"
                },
                "iVar2": {
                    "6": "equality_check_result",
                    "1": "is_equality",
                    "5": "is_equal"
                },
                "local_20": {
                    "5": "output_ptr",
                    "4": "current_destination",
                    "1": "dst_ptr",
                    "2": "destination_pointer",
                    "15": "dest_ptr"
                },
                "local_14": {
                    "3": "remaining_count",
                    "5": "remaining_elements",
                    "2": "remaining_values",
                    "1": "remaining_buffer_size",
                    "6": "remaining_size",
                    "11": "remaining_length"
                }
            }
        },
        "FUN_00002364": {
            "entrypoint": "0x00002364",
            "current_name": "update_array_element_if_not_equal_00002364",
            "code": "\nundefined4 update_array_element_if_not_equal_00002364(undefined4 input_value,undefined element)\n\n{\n  int is_equal;\n  undefined4 return_value;\n  \n  is_equal = check_equality_00002294(input_value);\n  if (is_equal == 0) {\n    update_array_element_000022be(input_value,element);\n    return_value = 0;\n  }\n  else {\n    return_value = 0xffffffff;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00002364": "update_array_element_if_not_equal_00002364",
                "param_1": "input_value",
                "param_2": "element",
                "iVar1": "is_equal",
                "uVar2": "return_value"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_000022be",
                "FUN_00002294"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002364": {
                    "1": "process_array_element",
                    "7": "update_if_not_equal",
                    "2": "update_array_if_equal",
                    "3": "update_array_element_if_equal"
                },
                "param_1": {
                    "2": "input_parameter",
                    "1": "param",
                    "6": "array",
                    "13": "input_value",
                    "3": "input_param"
                },
                "param_2": {
                    "3": "element_to_update",
                    "2": "input_data",
                    "6": "new_value",
                    "1": "element_value",
                    "7": "element",
                    "4": "new_element"
                },
                "iVar1": {
                    "1": "equality_result",
                    "7": "equality_check_result",
                    "2": "is_value_equal",
                    "17": "is_equal"
                },
                "uVar2": {
                    "11": "result",
                    "20": "return_value"
                }
            }
        },
        "FUN_00002396": {
            "entrypoint": "0x00002396",
            "current_name": "initialize_system_00002396",
            "code": "\nvoid initialize_system_00002396(void)\n\n{\n  initialize_system_00002396();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002396": "initialize_system_00002396",
                "initialize_system_000025f4": "initialize_system"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_000025f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002396": {
                    "31": "initialize_system"
                },
                "initialize_system_000025f4": {
                    "19": "initialize_system",
                    "1": "initialize"
                },
                "<other unchanged variables>": {
                    "1": "<same_variable_name>"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                }
            }
        },
        "FUN_000023a4": {
            "entrypoint": "0x000023a4",
            "current_name": "initialize_system_000023a4",
            "code": "\nundefined4 initialize_system_000023a4(void)\n\n{\n  undefined4 return_value;\n  undefined buffer [128];\n  \n  trigger_interrupt(0);\n  display_message(\"Welcome to RIOT!\");\n  return_value = process_input_loop(0,buffer,0x80);\n  execute_software_interrupt(0x3f);\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_000023a4": "initialize_system_000023a4",
                "auStack_88": "buffer",
                "uVar1": "return_value",
                "trigger_interrupt_000023d0": "trigger_interrupt",
                "process_data_00004db8": "display_message",
                "process_input_loop_00002e6c": "process_input_loop",
                "software_interrupt": "execute_software_interrupt"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002e6c",
                "FUN_000023d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000023a4": {
                    "1": "run_application",
                    "4": "start_program",
                    "18": "initialize_system",
                    "2": "execute_program"
                },
                "auStack_88": {
                    "9": "input_buffer",
                    "5": "data_buffer",
                    "16": "buffer",
                    "1": "message_buffer"
                },
                "uVar1": {
                    "1": "status",
                    "2": "result",
                    "4": "return_value"
                },
                "trigger_interrupt_000023d0": {
                    "8": "trigger_interrupt",
                    "1": "invoke_interrupt",
                    "3": "trigger_system_interrupt",
                    "2": "trigger_hardware_interrupt"
                },
                "process_data_00004db8": {
                    "1": "display_welcome_message",
                    "3": "print_welcome_message",
                    "7": "display_message"
                },
                "process_input_loop_00002e6c": {
                    "1": "read_input_loop",
                    "6": "input_loop"
                },
                "software_interrupt": {
                    "1": "raise_interrupt",
                    "3": "execute_software_interrupt",
                    "2": "terminate_system"
                }
            }
        },
        "FUN_000023c8": {
            "entrypoint": "0x000023c8",
            "current_name": "trigger_software_interrupt_000023c8",
            "code": "\nvoid trigger_software_interrupt_000023c8(void)\n\n{\n  trigger_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000023c8": "trigger_software_interrupt_000023c8",
                "software_interrupt": "trigger_interrupt"
            },
            "calling": [
                "FUN_000023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000023c8": {
                    "5": "execute_software_interrupt",
                    "3": "execute_system_interrupt",
                    "2": "call_software_interrupt",
                    "10": "trigger_software_interrupt",
                    "7": "send_software_interrupt"
                },
                "software_interrupt": {
                    "4": "trigger_interrupt",
                    "1": "perform_interrupt",
                    "2": "send_interrupt"
                },
                "<original_variable_name_1>": {
                    "1": "data",
                    "2": "<new_variable_name_1>"
                },
                "original_dictionary_name": {
                    "1": "new_dictionary_name"
                },
                "<original_variable_name_2>": {
                    "1": "result"
                },
                "PTR_": {
                    "1": ""
                },
                "DAT_": {
                    "1": ""
                },
                "PTR_undefined": {
                    "1": "new_variable"
                },
                "PTR_00000004": {
                    "1": "interrupt_code"
                }
            }
        },
        "FUN_000023d0": {
            "entrypoint": "0x000023d0",
            "current_name": "trigger_interrupt_000023d0",
            "code": "\nundefined4 trigger_interrupt_000023d0(undefined4 input_param)\n\n{\n  undefined4 result;\n  \n  if (DAT_1fff0d98 == 0) {\n    result = trigger_software_interrupt_000023c8(1,input_param,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000023d0": "trigger_interrupt_000023d0",
                "param_1": "input_param",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_000023c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000023d0": {
                    "11": "trigger_interrupt",
                    "1": "trigger_interrupt_if_not_executed",
                    "7": "execute_interrupt",
                    "3": "execute_interrupt_handler",
                    "2": "check_interrupt"
                },
                "param_1": {
                    "2": "interrupt_param",
                    "4": "interrupt_type",
                    "7": "input_value",
                    "1": "interrupt_data",
                    "10": "input_param"
                },
                "uVar1": {
                    "1": "interrupt_result",
                    "23": "result",
                    "7": "return_value"
                }
            }
        },
        "FUN_00002400": {
            "entrypoint": "0x00002400",
            "current_name": "FUNC_00002400",
            "code": "\nvoid FUNC_00002400(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002400": "FUNC_00002400"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0000240c": {
            "entrypoint": "0x0000240c",
            "current_name": "update_pointer_0000240c",
            "code": "\nundefined4 * update_pointer_0000240c(undefined4 *pointer)\n\n{\n  undefined4 *next_pointer;\n  \n  next_pointer = (undefined4 *)*pointer;\n  if (next_pointer != (undefined4 *)0x0) {\n    *pointer = *next_pointer;\n  }\n  return next_pointer;\n}\n\n",
            "renaming": {
                "FUN_0000240c": "update_pointer_0000240c",
                "param_1": "pointer",
                "puVar1": "next_pointer"
            },
            "calling": [
                "FUN_000024bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000240c": {
                    "1": "copy_linked_list_node",
                    "2": "extract_next_element",
                    "8": "update_pointer",
                    "3": "copy_linked_list"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "source_pointer",
                    "8": "pointer"
                },
                "puVar1": {
                    "1": "temp_pointer",
                    "8": "next_pointer",
                    "2": "next_address",
                    "4": "next_node"
                }
            }
        },
        "FUN_00002434": {
            "entrypoint": "0x00002434",
            "current_name": "update_interrupt_status_00002434",
            "code": "\nundefined4 update_interrupt_status_00002434(int *interrupt_status,int flag)\n\n{\n  int previous_value;\n  undefined4 return_value;\n  \n  return_value = get_interrupt_status_00000cd0();\n  previous_value = DAT_1fff03dc;\n  if (*interrupt_status == 0) {\n    *interrupt_status = -1;\n    enable_interrupts_if_privileged(return_value);\n    return_value = 1;\n  }\n  else if (flag == 0) {\n    enable_interrupts_if_privileged(return_value);\n    return_value = 0;\n  }\n  else {\n    update_value(DAT_1fff03dc,2);\n    if (*interrupt_status == -1) {\n      *interrupt_status = previous_value + 8;\n      *(undefined4 *)*interrupt_status = 0;\n    }\n    else {\n      update_pointer_list(interrupt_status,previous_value);\n    }\n    enable_interrupts_if_privileged(return_value);\n    set_flag();\n    return_value = 1;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00002434": "update_interrupt_status_00002434",
                "param_1": "interrupt_status",
                "param_2": "flag",
                "iVar1": "previous_value",
                "uVar2": "return_value",
                "enable_ir_qinterrupts_if_privileged_00000d0c": "enable_interrupts_if_privileged",
                "update_value_00000698": "update_value",
                "update_pointer_list_00001034": "update_pointer_list",
                "set_flag_0000093c": "set_flag"
            },
            "calling": [
                "FUN_0000129c"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0",
                "FUN_00001034",
                "FUN_0000093c",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002434": {
                    "1": "initialize_interrupts",
                    "10": "handle_interrupt",
                    "15": "update_interrupt_status",
                    "2": "update_interrupt_handling"
                },
                "param_1": {
                    "9": "interrupt_flag",
                    "11": "interrupt_status",
                    "1": "interrupt_status_ptr",
                    "5": "status"
                },
                "param_2": {
                    "10": "flag",
                    "1": "flag_value",
                    "2": "condition_flag",
                    "5": "check_flag"
                },
                "iVar1": {
                    "1": "original_interrupt_status",
                    "3": "temp_value",
                    "5": "temp_var",
                    "2": "initial_value",
                    "6": "previous_value",
                    "4": "saved_value"
                },
                "uVar2": {
                    "14": "return_value",
                    "1": "interrupt_enabled",
                    "5": "interrupt_status",
                    "2": "status",
                    "6": "result"
                },
                "FUM_00002434": {
                    "1": "update_interrupt_status"
                },
                "*param_1": {
                    "1": "status_value"
                },
                "enable_ir_qinterrupts_if_privileged_00000d0c": {
                    "1": "enable_interrupts",
                    "2": "enable_interrupts_if_privileged"
                },
                "update_value_00000698": {
                    "3": "update_value"
                },
                "update_pointer_list_00001034": {
                    "1": "update_list_pointer",
                    "2": "update_pointer_list"
                },
                "set_flag_0000093c": {
                    "3": "set_flag"
                }
            }
        },
        "FUN_000024bc": {
            "entrypoint": "0x000024bc",
            "current_name": "handle_interrupt_000024bc",
            "code": "\nvoid handle_interrupt_000024bc(int *interrupt_status)\n\n{\n  undefined exception_flag;\n  undefined4 interrupt_status;\n  int updated_pointer;\n  \n  interrupt_status = get_interrupt_status();\n  if (*interrupt_status == 0) {\n    enable_irq_interrupts_if_privileged(interrupt_status);\n  }\n  else if (*interrupt_status == -1) {\n    *interrupt_status = 0;\n    enable_irq_interrupts_if_privileged(interrupt_status);\n  }\n  else {\n    updated_pointer = update_pointer(interrupt_status);\n    update_value(updated_pointer + -8,10);\n    if (*interrupt_status == 0) {\n      *interrupt_status = -1;\n    }\n    exception_flag = *(undefined *)(updated_pointer + -3);\n    enable_irq_interrupts_if_privileged(interrupt_status);\n    check_exception_and_set_flag(exception_flag);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000024bc": "handle_interrupt_000024bc",
                "param_1": "interrupt_status",
                "uVar1": "exception_flag",
                "uVar2": "interrupt_status",
                "iVar3": "updated_pointer",
                "enable_ir_qinterrupts_if_privileged_00000d0c": "enable_irq_interrupts_if_privileged",
                "update_pointer_0000240c": "update_pointer",
                "update_value_00000698": "update_value",
                "check_exception_and_set_flag_00000738": "check_exception_and_set_flag",
                "get_interrupt_status_00000cd0": "get_interrupt_status"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000738",
                "FUN_00000cd0",
                "FUN_0000240c",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000024bc": {
                    "2": "update_interrupt_status",
                    "21": "handle_interrupt",
                    "1": "enable_interrupts_and_update_value",
                    "5": "process_interrupt"
                },
                "param_1": {
                    "3": "interrupt_flag",
                    "23": "interrupt_status",
                    "1": "interrupt_status_ptr"
                },
                "uVar1": {
                    "2": "interrupt_flag",
                    "1": "previous_value",
                    "21": "exception_flag"
                },
                "uVar2": {
                    "1": "interrupt_data",
                    "2": "current_interrupt_status",
                    "7": "interrupt_status",
                    "5": "interrupt_status_value"
                },
                "iVar3": {
                    "1": "pointer_update_value",
                    "2": "pointer_offset",
                    "4": "pointer_value",
                    "3": "pointer",
                    "11": "updated_pointer"
                },
                "enable_ir_qinterrupts_if_privileged_00000d0c": {
                    "2": "enable_irq_interrupts_if_privileged",
                    "1": "enable_interrupts"
                },
                "update_pointer_0000240c": {
                    "4": "update_pointer"
                },
                "update_value_00000698": {
                    "4": "update_value"
                },
                "check_exception_and_set_flag_00000738": {
                    "4": "check_exception_and_set_flag"
                },
                "get_interrupt_status_00000cd0": {
                    "2": "get_interrupt_status"
                },
                "*param_1": {
                    "1": "interrupt_status"
                }
            }
        },
        "FUN_00002538": {
            "entrypoint": "0x00002538",
            "current_name": "update_data_00002538",
            "code": "\nvoid update_data_00002538(byte index,uint value)\n\n{\n  if (is_negative < '\\0') {\n    (&DAT_e000ed14)[index & 0xf] = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)(is_negative + -0x1fff1c00) = (char)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002538": "update_data_00002538",
                "param_1": "index",
                "param_2": "value",
                "(char)param_1": "is_negative"
            },
            "calling": [
                "FUN_0000258c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002538": {
                    "1": "set_byte",
                    "5": "update_memory",
                    "2": "store_data",
                    "8": "set_byte_value",
                    "9": "update_data"
                },
                "param_1": {
                    "2": "byte_index",
                    "1": "data_offset",
                    "5": "index",
                    "4": "offset",
                    "3": "byte_value"
                },
                "param_2": {
                    "4": "data",
                    "6": "new_value",
                    "1": "value_to_update",
                    "14": "value",
                    "2": "byte_value"
                },
                "DAT_e000ed14": {
                    "1": "output_data",
                    "2": "memory_array"
                },
                "DAT_ffffffffe000ed14": {
                    "1": "memory_array"
                },
                "PTR_01234567": {
                    "1": "pointer_1"
                },
                "&DAT_e000ed14": {
                    "1": "memory_array"
                },
                "PTR_00002538": {
                    "1": "original_function_pointer"
                },
                "PTR_": {
                    "1": "<unchanged>"
                },
                "char": {
                    "1": "<unchanged>"
                },
                "PTR_0x1fff1c00": {
                    "1": "base_address"
                },
                "&DAT_e000ed14[param_1 & 0xf]": {
                    "1": "data_element"
                },
                "*(char *)((char)param_1 + -0x1fff1c00)": {
                    "1": "memory_address"
                },
                "DAT_": {
                    "1": ""
                },
                "PTR_00002538-1": {
                    "1": "memory_address"
                },
                "0xf": {
                    "1": "mask"
                },
                "(char)param_1": {
                    "1": "is_negative"
                },
                "(param_1 & 0xf)": {
                    "1": "index"
                },
                "(param_2 & 0xff)": {
                    "1": "data_low_byte"
                },
                "(char)param_1 + -0x1fff1c00": {
                    "1": "memory_address"
                },
                "param_1 & 0xf": {
                    "1": "masked_index"
                },
                "param_2 & 0xff": {
                    "1": "masked_data"
                }
            }
        },
        "FUN_0000258c": {
            "entrypoint": "0x0000258c",
            "current_name": "initialize_data_0000258c",
            "code": "\n\n\nvoid initialize_data_0000258c(void)\n\n{\n  uint index;\n  \n  _DAT_e000ed08 = 0;\n  update_data_00002538(0xfffffffe,1);\n  update_data_00002538(0xfffffffb,1);\n  for (index = 0; index < 0x66; index = index + 1) {\n    update_data_00002538((int)(char)index,1);\n  }\n  _DAT_e000ed10 = _DAT_e000ed10 | 0x10;\n  _DAT_e000ed14 = _DAT_e000ed14 | 0x200;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000258c": "initialize_data_0000258c",
                "local_c": "index"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000258c": {
                    "30": "initialize_data",
                    "1": "initialize_registers"
                },
                "local_c": {
                    "1": "iteration_count",
                    "14": "index",
                    "2": "count",
                    "13": "counter"
                },
                "_DAT_e000ed08": {
                    "1": "data_flag1"
                },
                "_DAT_e000ed10": {
                    "1": "data_flag2"
                },
                "_DAT_e000ed14": {
                    "1": "data_flag3"
                }
            }
        },
        "FUN_000025f4": {
            "entrypoint": "0x000025f4",
            "current_name": "initialize_system_000025f4",
            "code": "\nvoid initialize_system_000025f4(void)\n\n{\n  initialize_system_000025f4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000025f4": "initialize_system_000025f4",
                "initialize_system_000027b0": "initialize_system"
            },
            "calling": [
                "FUN_00002396"
            ],
            "called": [
                "FUN_000027b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000025f4": {
                    "30": "initialize_system"
                },
                "<original_variable_name_1>": {
                    "3": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "initialize_system_000027b0": {
                    "14": "initialize_system",
                    "1": "initialize"
                },
                "<original_parameter_name_1>": {
                    "1": "<new_parameter_name_1>"
                },
                "<original_variable_name>": {
                    "1": "<new_variable_name>"
                }
            }
        },
        "FUN_00002600": {
            "entrypoint": "0x00002600",
            "current_name": "initialize_data_00002600",
            "code": "\nundefined4 initialize_data_00002600(undefined4 input_date)\n\n{\n  undefined4 updated_date;\n  \n  updated_date = calculate_updated_date_000047e4(input_date);\n  initialize_data_00002600_0000285c(updated_date);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002600": "initialize_data_00002600",
                "param_1": "input_date",
                "uVar1": "updated_date"
            },
            "calling": [
                "FUN_00003478"
            ],
            "called": [
                "FUN_0000285c",
                "FUN_000047e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002600": {
                    "5": "update_and_initialize_data",
                    "3": "initialize_and_update_data",
                    "1": "update_data",
                    "2": "update_date_and_initialize_data",
                    "4": "initialize_data_and_calculate_updated_date",
                    "7": "initialize_data"
                },
                "param_1": {
                    "4": "initial_date",
                    "2": "updated_date",
                    "1": "input_data",
                    "19": "input_date"
                },
                "uVar1": {
                    "28": "updated_date",
                    "1": "new_updated_date"
                }
            }
        },
        "FUN_00002624": {
            "entrypoint": "0x00002624",
            "current_name": "calculate_date_00002624",
            "code": "\nundefined4 calculate_date_00002624(undefined4 input_date)\n\n{\n  undefined4 base_address;\n  undefined4 result;\n  \n  base_address = get_base_address_0000281c();\n  result = 0;\n  calculate_date_00002624_components_0000443c(&base_address,input_date);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002624": "calculate_date_00002624",
                "param_1": "input_date",
                "local_10": "base_address",
                "uStack_c": "result"
            },
            "calling": [
                "FUN_00003444"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_0000281c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002624": {
                    "1": "calculate_and_initialize_date_components",
                    "2": "initialize_date_components",
                    "3": "calculate_date_components",
                    "8": "calculate_date"
                },
                "param_1": {
                    "4": "date_input",
                    "2": "input_value",
                    "1": "input_data",
                    "19": "input_date"
                },
                "local_10": {
                    "31": "base_address"
                },
                "uStack_c": {
                    "1": "stack_variable",
                    "2": "temporary_variable",
                    "4": "stack_c",
                    "7": "result"
                }
            }
        },
        "FUN_00002654": {
            "entrypoint": "0x00002654",
            "current_name": "update_data_00002654",
            "code": "\nundefined4 update_data_00002654(undefined4 input_date,undefined4 new_data,undefined4 additional_data)\n\n{\n  undefined4 updated_date;\n  \n  updated_date = calculate_updated_date(input_date);\n  DAT_1fff0d9c = new_data;\n  update_and_set_data(updated_date,0x26f1,additional_data);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002654": "update_data_00002654",
                "param_1": "input_date",
                "param_2": "new_data",
                "param_3": "additional_data",
                "uVar1": "updated_date",
                "update_and_set_data_00002894": "update_and_set_data",
                "calculate_updated_date_000047e4": "calculate_updated_date"
            },
            "calling": [
                "FUN_000033f4"
            ],
            "called": [
                "FUN_000047e4",
                "FUN_00002894"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002654": {
                    "3": "update_and_set_data",
                    "1": "update_data_with_updated_date",
                    "2": "update_date_and_data",
                    "21": "update_data"
                },
                "param_1": {
                    "1": "input_param",
                    "3": "date",
                    "2": "current_date",
                    "7": "original_date",
                    "14": "input_date"
                },
                "param_2": {
                    "4": "new_param",
                    "2": "data_value",
                    "1": "flag_value",
                    "3": "value",
                    "9": "new_data"
                },
                "param_3": {
                    "2": "data",
                    "3": "new_value",
                    "1": "new_data",
                    "9": "additional_data",
                    "4": "value"
                },
                "uVar1": {
                    "30": "updated_date"
                },
                "update_and_set_data_00002894": {
                    "2": "update_and_set_data"
                },
                "calculate_updated_date_000047e4": {
                    "1": "calculate_updated_date"
                }
            }
        },
        "FUN_00002690": {
            "entrypoint": "0x00002690",
            "current_name": "calculate_date_00002690",
            "code": "\nundefined4 calculate_date_00002690(undefined4 input_date)\n\n{\n  undefined4 incremented_value;\n  undefined4 stack_variable;\n  \n  incremented_value = increment_value_000028f0();\n  stack_variable = 0;\n  calculate_date_00002690_components_0000443c(&incremented_value,input_date);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002690": "calculate_date_00002690",
                "param_1": "input_date",
                "local_10": "incremented_value",
                "uStack_c": "stack_variable"
            },
            "calling": [
                "FUN_000033c0"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_000028f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002690": {
                    "1": "process_binary",
                    "2": "calculate_and_increment_date",
                    "11": "calculate_date",
                    "3": "calculate_and_increment"
                },
                "param_1": {
                    "1": "date_input",
                    "15": "input_date",
                    "7": "input_value",
                    "2": "input_data",
                    "3": "input_param"
                },
                "local_10": {
                    "2": "current_date",
                    "1": "increment_value",
                    "27": "incremented_value"
                },
                "uStack_c": {
                    "1": "stack_value",
                    "2": "initialized_value",
                    "3": "result",
                    "4": "stack_variable"
                }
            }
        },
        "FUN_000026c0": {
            "entrypoint": "0x000026c0",
            "current_name": "clear_flags_000026c0",
            "code": "\nvoid clear_flags_000026c0(void)\n\n{\n  clear_flags_000026c0();\n  DAT_1fff0d9c = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026c0": "clear_flags_000026c0",
                "clear_flags_00002910": "clear_flags"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002910"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000026c0": {
                    "11": "initialize_flags",
                    "1": "clear_status_flags",
                    "17": "clear_flags"
                },
                "clear_flags_00002910": {
                    "2": "clear_flags_helper",
                    "24": "clear_flags"
                },
                "DAT_1fff0d9c": {
                    "4": "flag_variable",
                    "1": "flag_value",
                    "5": "flags"
                },
                "": {
                    "1": "flags_memory"
                },
                "<original_variable_name_1>": {
                    "1": "flags"
                },
                "<original_variable_name_2>": {
                    "1": "return_value"
                }
            }
        },
        "FUN_000026d8": {
            "entrypoint": "0x000026d8",
            "current_name": "initialize_flags_000026d8",
            "code": "\nvoid initialize_flags_000026d8(void)\n\n{\n  set_flag();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026d8": "initialize_flags_000026d8",
                "set_flag_0000294c": "set_flag"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000026d8": {
                    "5": "initialize_flag",
                    "4": "set_flag",
                    "22": "initialize_flags"
                },
                "set_flag_0000294c": {
                    "1": "set_menu_flag",
                    "2": "set_flags",
                    "17": "set_flag",
                    "6": "set_initial_flag"
                },
                "flag_var": {
                    "1": "flag_variable"
                }
            }
        },
        "FUN_000026e4": {
            "entrypoint": "0x000026e4",
            "current_name": "clear_interrupt_flag_000026e4",
            "code": "\nvoid clear_interrupt_flag_000026e4(void)\n\n{\n  clear_interrupt_flag_000026e4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026e4": "clear_interrupt_flag_000026e4",
                "clear_interrupt_flag_00002970": "clear_interrupt_flag"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000026e4": {
                    "31": "clear_interrupt_flag"
                },
                "": {
                    "3": ""
                },
                "clear_interrupt_flag_00002970": {
                    "2": "clear_interrupt_flag_helper",
                    "1": "clear_interrupt_flag_helper_function",
                    "23": "clear_interrupt_flag"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "<no changes>": {
                    "1": ""
                }
            }
        },
        "FUN_000026f0": {
            "entrypoint": "0x000026f0",
            "current_name": "execute_callback_000026f0",
            "code": "\nvoid execute_callback_000026f0(undefined4 callback_parameter)\n\n{\n  if (DAT_1fff0d9c != (code *)0x0) {\n    (*DAT_1fff0d9c)(callback_parameter);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026f0": "execute_callback_000026f0",
                "param_1": "callback_parameter"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000026f0": {
                    "20": "execute_callback",
                    "1": "call_if_needed",
                    "5": "execute_callback_function"
                },
                "param_1": {
                    "2": "parameter",
                    "6": "callback_parameter",
                    "5": "callback_param",
                    "3": "callback_argument",
                    "1": "callback_function"
                },
                "DAT_1fff0d9c": {
                    "2": "function_pointer",
                    "1": "callback_func",
                    "6": "callback_function"
                },
                "(*DAT_1fff0d9c)": {
                    "1": "callback"
                }
            }
        },
        "FUN_00002714": {
            "entrypoint": "0x00002714",
            "current_name": "set_bit_in_memory_00002714",
            "code": "\nvoid set_bit_in_memory_00002714(byte_value input_byte)\n\n{\n  *(integer *)(((unsigned_integer)(integer)(character)input_byte >> 5) * 4 + -0x1fff1f00) = 1 << (input_byte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002714": "set_bit_in_memory_00002714",
                "param_1": "input_byte",
                "int": "integer",
                "char": "character",
                "uint": "unsigned_integer",
                "byte": "byte_value"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002714": {
                    "8": "set_bit",
                    "1": "set_bit_value",
                    "15": "set_bit_in_memory",
                    "2": "set_bit_at_index",
                    "3": "set_bit_in_array"
                },
                "param_1": {
                    "1": "bits_memory",
                    "3": "bit_position",
                    "14": "input_byte",
                    "7": "byte_to_set",
                    "2": "byte_value"
                },
                "*(int *)(((uint)(int)(char)param_1 >> 5) * 4 + -0x1fff1f00)": {
                    "2": "address",
                    "1": "memory_location",
                    "7": "memory_address"
                },
                "1 << (param_1 & 0x1f)": {
                    "4": "bit_to_set",
                    "9": "bit_value",
                    "1": "bit_shifted_value"
                },
                "int": {
                    "1": "integer"
                },
                "char": {
                    "1": "character"
                },
                "uint": {
                    "1": "unsigned_integer"
                },
                "PTR_": {
                    "1": ""
                },
                "DAT_": {
                    "1": ""
                },
                "param_2": {
                    "1": "bit_index"
                },
                "param_3": {
                    "1": "memory_address"
                },
                "*((uint *)(int *)(char) bitPosition >> 5) * 4 + -0x1fff1f00": {
                    "1": "array_address"
                },
                "param_1 & 0x1f": {
                    "1": "input_byte_lower5_bits",
                    "2": "bit_index"
                },
                "[param_1] >> 5": {
                    "1": "shifted_value"
                },
                "-0x1fff1f00": {
                    "1": "array_base_address"
                },
                "1 << ([param_1] & 0x1f)": {
                    "1": "bit_mask"
                },
                "*(int *)": {
                    "1": "array_pointer"
                },
                "0x1fff1f00": {
                    "1": "array_offset"
                },
                "(uint)(int)(char)param_1 >> 5": {
                    "1": "array_index"
                },
                "newBit": {
                    "1": "bit_to_set"
                },
                "bitmask": {
                    "1": "bitmask"
                },
                "byte": {
                    "1": "byte_value"
                }
            }
        },
        "FUN_00002744": {
            "entrypoint": "0x00002744",
            "current_name": "update_data_00002744",
            "code": "\nvoid update_data_00002744(byte address,uint value)\n\n{\n  check_condition ((byte)address < '\\0') {\n    (atDAT_e000ed14)[address at 0xf] = (byte)((value at 0xff) << 4);\n  }\n  else {\n    *(byte *)((byte)address + -0x1fff1c00) = (byte)((value at 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002744": "update_data_00002744",
                "param_1": "address",
                "param_2": "value",
                "char": "byte",
                "&": "at",
                "if": "check_condition"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002744": {
                    "1": "set_byte",
                    "5": "update_memory",
                    "2": "set_memory_value",
                    "3": "store_data",
                    "4": "set_byte_value",
                    "8": "update_data"
                },
                "param_1": {
                    "5": "address",
                    "2": "input",
                    "4": "index",
                    "1": "offset",
                    "3": "byte_value"
                },
                "param_2": {
                    "3": "new_value",
                    "1": "new_data",
                    "20": "value"
                },
                "param_3": {
                    "1": "increment"
                },
                "var_1": {
                    "1": "shifted_value"
                },
                "var_2": {
                    "1": "offset"
                },
                "&DAT_e000ed14": {
                    "1": "array1",
                    "2": "byte_array"
                },
                "PTR_00002744": {
                    "1": "p_data"
                },
                "char": {
                    "1": "character",
                    "6": "byte"
                },
                "DAT_e000ed14": {
                    "1": "buffer",
                    "3": "data_buffer",
                    "2": "byte_array"
                },
                "PTR_": {
                    "1": "pointer_"
                },
                "&": {
                    "1": "at"
                },
                "<<": {
                    "1": "shift_left"
                },
                "-0x1fff1c00": {
                    "1": "offset"
                },
                "PTR_-0x1fff1c00": {
                    "1": "output_buffer"
                },
                "inputIndex": {
                    "1": "index"
                },
                "value": {
                    "1": "updated_value"
                },
                "data": {
                    "1": "value"
                },
                "PTR_0x1fff1c00": {
                    "1": "memory_pointer"
                },
                "PTR_1fff1c00": {
                    "1": "stored_data"
                },
                "SET_VALUE": {
                    "1": "value_to_set"
                },
                "if": {
                    "1": "check_condition"
                },
                "param_1 & 0xf": {
                    "1": "index"
                },
                "*(char *)((char)param_1 + -0x1fff1c00)": {
                    "1": "data_ptr"
                },
                "param_2 & 0xff": {
                    "1": "value_mask"
                },
                "(param_2 & 0xff) << 4": {
                    "1": "shifted_value"
                }
            }
        },
        "FUN_00002798": {
            "entrypoint": "0x00002798",
            "current_name": "check_and_set_flag_00002798",
            "code": "\nvoid check_and_set_flag_00002798(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    set_flag();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002798": "check_and_set_flag_00002798",
                "set_flag_0000093c": "set_flag"
            },
            "calling": [
                "FUN_00002994"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002798": {
                    "22": "check_and_set_flag",
                    "1": "set_flag_if_data_not_zero",
                    "8": "check_flag_and_set"
                },
                "set_flag_0000093c": {
                    "20": "set_flag"
                },
                "DAT_1fff0354": {
                    "10": "flag",
                    "1": "flag_state"
                }
            }
        },
        "FUN_000027b0": {
            "entrypoint": "0x000027b0",
            "current_name": "initialize_system_000027b0",
            "code": "\n\n\nvoid initialize_system_000027b0(void)\n\n{\n  _DAT_4004803c = _DAT_4004803c | 0x20000000;\n  if ((_DAT_4003d014 & 1) != 0) {\n    _DAT_4003d000 = 0;\n  }\n  _DAT_4003d010 = 0x104;\n  _DAT_4003d008 = 0xffffff42;\n  _DAT_4003d01c = 0;\n  set_flag();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000027b0": "initialize_system_000027b0",
                "set_flag_0000294c": "set_flag"
            },
            "calling": [
                "FUN_000025f4"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000027b0": {
                    "1": "configure_peripheral",
                    "2": "initialize_flags",
                    "3": "initialize_hardware",
                    "4": "initialize_peripheral",
                    "11": "initialize_system"
                },
                "_DAT_4004803c": {
                    "1": "configuration_flag",
                    "3": "system_flags",
                    "4": "system_control_register",
                    "2": "flag_register"
                },
                "_DAT_4003d014": {
                    "2": "device_status",
                    "1": "device_status_register",
                    "4": "system_status",
                    "9": "status_register",
                    "5": "interrupt_status_register"
                },
                "_DAT_4003d000": {
                    "1": "status_register",
                    "2": "interrupt_clear_register",
                    "3": "interrupt_clear_flag",
                    "5": "data_register"
                },
                "_DAT_4003d010": {
                    "1": "status_register",
                    "3": "timer_control_register",
                    "6": "interrupt_control",
                    "2": "interrupt_control_register"
                },
                "_DAT_4003d008": {
                    "1": "interrupt_data",
                    "4": "config_register",
                    "2": "value"
                },
                "_DAT_4003d01c": {
                    "1": "interrupt_vector_table",
                    "2": "counter_register"
                },
                "set_flag_0000294c": {
                    "1": "set_error_flag",
                    "5": "enable_interrupts",
                    "6": "set_flag",
                    "3": "set_interrupt_flag"
                }
            }
        },
        "FUN_0000281c": {
            "entrypoint": "0x0000281c",
            "current_name": "get_base_address_0000281c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00002840) */\n/* WARNING: Removing unreachable block (ram,0x0000284c) */\n\n\nundefined4 get_base_address_0000281c(void)\n\n{\n  global_variable _DAT_4003d000;\n}\n\n",
            "renaming": {
                "FUN_0000281c": "get_base_address_0000281c",
                "return": "global_variable"
            },
            "calling": [
                "FUN_00002624"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000281c": {
                    "1": "get_stored_data",
                    "12": "get_base_address",
                    "3": "get_global_variable",
                    "5": "get_data"
                },
                "_DAT_4003d000": {
                    "4": "data",
                    "2": "global_variable",
                    "5": "global_data",
                    "12": "base_address",
                    "1": "result"
                },
                "return": {
                    "1": "global_variable"
                }
            }
        },
        "FUN_0000285c": {
            "entrypoint": "0x0000285c",
            "current_name": "initialize_data_0000285c",
            "code": "\n\n\nvoid initialize_data_0000285c(undefined4 data)\n\n{\n  _DAT_4003d000 = data;\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000285c": "initialize_data_0000285c",
                "param_1": "data"
            },
            "calling": [
                "FUN_00002600"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000285c": {
                    "1": "set_default_value",
                    "2": "set_param_and_toggle_bit",
                    "7": "initialize_data"
                },
                "param_1": {
                    "1": "config_flags",
                    "8": "data",
                    "2": "device_status",
                    "6": "value",
                    "4": "flag_value"
                },
                "_DAT_4003d014": {
                    "2": "register_value",
                    "1": "current_value",
                    "3": "status",
                    "5": "flags"
                },
                "_DAT_4003d000": {
                    "1": "register_1",
                    "2": "data"
                },
                "newFlags": {
                    "1": "new_flags"
                },
                "0xffffffef": {
                    "2": "bit_mask",
                    "1": "clear_mask"
                },
                "0x10": {
                    "1": "bit"
                }
            }
        },
        "FUN_00002894": {
            "entrypoint": "0x00002894",
            "current_name": "update_and_set_data_00002894",
            "code": "\n\n\nvoid update_and_set_data_00002894(int input_value,undefined4 data_1,undefined4 data_2)\n\n{\n  _DAT_4003d008 = input_value + -1;\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb | 4;\n  DAT_1fff0da0 = data_1;\n  DAT_1fff0da4 = data_2;\n  update_data(0x2e,10);\n  set_bit_in_memory(0x2e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002894": "update_and_set_data_00002894",
                "param_1": "input_value",
                "param_2": "data_1",
                "param_3": "data_2",
                "update_data_00002744": "update_data",
                "set_bit_in_memory_00002714": "set_bit_in_memory"
            },
            "calling": [
                "FUN_00002654"
            ],
            "called": [
                "FUN_00002714",
                "FUN_00002744"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002894": {
                    "8": "update_and_set_bit",
                    "1": "update_and_set_bits",
                    "6": "update_data_and_set_bit",
                    "4": "initialize_data",
                    "2": "update_data"
                },
                "param_1": {
                    "1": "data_offset",
                    "17": "input_value",
                    "2": "previous_value",
                    "4": "value"
                },
                "param_2": {
                    "2": "data1",
                    "1": "data_param",
                    "4": "value1",
                    "14": "data_1"
                },
                "param_3": {
                    "2": "data2",
                    "1": "config_param",
                    "14": "data_2",
                    "4": "data_value_2"
                },
                "_DAT_4003d008": {
                    "2": "updated_value1",
                    "1": "modified_data_size",
                    "6": "updated_value"
                },
                "_DAT_4003d01c": {
                    "1": "flag_value",
                    "2": "updated_value"
                },
                "update_data_00002744": {
                    "1": "update_data_1",
                    "11": "update_data"
                },
                "DAT_1fff0da0": {
                    "1": "data_value_1"
                },
                "DAT_1fff0da4": {
                    "1": "data_item_2"
                },
                "set_bit_in_memory_00002714": {
                    "3": "set_memory_bit",
                    "9": "set_bit_in_memory"
                },
                "0x2e": {
                    "1": "data_offset"
                },
                "10": {
                    "1": "data_length"
                }
            }
        },
        "FUN_000028f0": {
            "entrypoint": "0x000028f0",
            "current_name": "increment_value_000028f0",
            "code": "\n\n\nint increment_value_000028f0(void)\n\n{\n  return _DAT_4003d008 + 1;\n}\n\n",
            "renaming": {
                "FUN_000028f0": "increment_value_000028f0"
            },
            "calling": [
                "FUN_00002690"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000028f0": {
                    "1": "increment_pointer",
                    "17": "increment_value",
                    "2": "get_next_value"
                },
                "_DAT_4003d008": {
                    "1": "dat_variable",
                    "4": "value",
                    "3": "data_value",
                    "10": "original_value",
                    "6": "current_value"
                }
            }
        },
        "FUN_00002910": {
            "entrypoint": "0x00002910",
            "current_name": "clear_flags_00002910",
            "code": "\n\n\nvoid clear_flags_00002910(void)\n\n{\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n  _DAT_4003d008 = 0;\n  DAT_1fff0da0 = 0;\n  DAT_1fff0da4 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002910": "clear_flags_00002910"
            },
            "calling": [
                "FUN_000026c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002910": {
                    "4": "clear_registers",
                    "2": "clear_interrupt_flags",
                    "21": "clear_flags"
                },
                "_DAT_4003d01c": {
                    "1": "settings_flag",
                    "2": "flag_register",
                    "11": "flags"
                },
                "_DAT_4003d008": {
                    "1": "flag2",
                    "15": "counter",
                    "3": "status_register"
                },
                "DAT_1fff0da0": {
                    "11": "data1",
                    "1": "data0",
                    "2": "variable1"
                },
                "DAT_1fff0da4": {
                    "1": "data_flag2",
                    "11": "data2",
                    "2": "variable2"
                },
                "initializeData": {
                    "1": "new_function"
                },
                "DAT_4003d01c": {
                    "1": "flags"
                },
                "DAT_4003d008": {
                    "1": "counter"
                },
                "interruptFlag_2": {
                    "1": "<new_variable_name_1>"
                }
            }
        },
        "FUN_0000294c": {
            "entrypoint": "0x0000294c",
            "current_name": "set_flag_0000294c",
            "code": "\n\n\nvoid set_flag_0000294c(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000294c": "set_flag_0000294c"
            },
            "calling": [
                "FUN_000026d8",
                "FUN_000027b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000294c": {
                    "1": "set_register_bit",
                    "2": "set_flag_in_register",
                    "25": "set_flag"
                },
                "_DAT_4003d014": {
                    "20": "flag",
                    "1": "status_flags",
                    "3": "register_value"
                },
                "_dat_4003d014": {
                    "1": "flag"
                }
            }
        },
        "FUN_00002970": {
            "entrypoint": "0x00002970",
            "current_name": "clear_interrupt_flag_00002970",
            "code": "\n\n\nvoid clear_interrupt_flag_00002970(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002970": "clear_interrupt_flag_00002970"
            },
            "calling": [
                "FUN_000026e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002970": {
                    "1": "clear_bit_in_data_register",
                    "11": "clear_bit_in_register",
                    "14": "clear_interrupt_flag"
                },
                "_DAT_4003d014": {
                    "1": "configuration",
                    "2": "register",
                    "13": "interrupt_flag",
                    "9": "register_value"
                }
            }
        },
        "FUN_00002994": {
            "entrypoint": "0x00002994",
            "current_name": "execute_callbacks_00002994",
            "code": "\n\n\nvoid execute_callbacks_00002994(void)\n\n{\n  if (((_DAT_4003d014 & 4) != 0) && (DAT_1fff0da0 != (callback_function *)0x0)) {\n    _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n    (*DAT_1fff0da0)(DAT_1fff0da4);\n  }\n  if (((_DAT_4003d014 & 2) != 0) && (DAT_1fff0da8 != (callback_function *)0x0)) {\n    (*DAT_1fff0da8)(DAT_1fff0dac);\n  }\n  check_and_set_flag();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002994": "execute_callbacks_00002994",
                "code": "callback_function",
                "check_and_set_flag_00002798": "check_and_set_flag"
            },
            "calling": [],
            "called": [
                "FUN_00002798"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002994": {
                    "1": "execute_process",
                    "2": "execute_tasks",
                    "14": "execute_callbacks"
                },
                "DAT_1fff0da0": {
                    "2": "task1",
                    "1": "hook1_function_pointer",
                    "5": "callback1",
                    "3": "callback_func1"
                },
                "DAT_1fff0da4": {
                    "2": "data1",
                    "1": "parameter_1",
                    "3": "param1",
                    "6": "arg1"
                },
                "DAT_1fff0da8": {
                    "1": "hook2_function_pointer",
                    "2": "task2",
                    "3": "callback_func2",
                    "5": "callback2"
                },
                "DAT_1fff0dac": {
                    "3": "parameter2",
                    "1": "param_2",
                    "2": "data2",
                    "6": "arg2"
                },
                "code": {
                    "1": "callback_func",
                    "4": "function_pointer",
                    "2": "callback",
                    "5": "callback_function"
                },
                "check_and_set_flag_00002798": {
                    "14": "check_and_set_flag",
                    "1": "perform_flag_check_and_set"
                },
                "_DAT_4003d014": {
                    "2": "flag_register",
                    "1": "flag",
                    "3": "flags"
                },
                "_DAT_4003d01c": {
                    "1": "register_flags_modified"
                }
            }
        },
        "FUN_00002a00": {
            "entrypoint": "0x00002a00",
            "current_name": "process_data_00002a00",
            "code": "\nvoid process_data_00002a00(undefined4 data)\n\n{\n  process_data_00002a00_function(data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a00": "process_data_00002a00",
                "param_1": "data",
                "process_data_00004cb4": "process_data_function"
            },
            "calling": [
                "FUN_00002d94",
                "FUN_00002e48"
            ],
            "called": [
                "FUN_00004cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002a00": {
                    "2": "process_input_data",
                    "1": "process_and_return_result",
                    "26": "process_data"
                },
                "param_1": {
                    "1": "input",
                    "22": "data",
                    "8": "input_data"
                },
                "process_data_00004cb4": {
                    "1": "process_data"
                }
            }
        },
        "FUN_00002a18": {
            "entrypoint": "0x00002a18",
            "current_name": "find_value_in_arrays_00002a18",
            "code": "\nint find_value_in_arrays_00002a18(int *array,undefined4 target_value)\n\n{\n  int comparison_result;\n  int *current_array;\n  undefined **reboot_message;\n  uint index;\n  int *current_element;\n  \n  current_array = array;\n  reboot_message = &PTR_s_reboot_00007300;\n  index = 0;\n  do {\n    if (1 < index) {\n      return 0;\n    }\n    current_element = (&current_array)[index];\n    if (current_element != (int *)0x0) {\n      for (; *current_element != 0; current_element = current_element + 3) {\n        comparison_result = compare_arrays(*current_element,target_value);\n        if (comparison_result == 0) {\n          return current_element[2];\n        }\n      }\n    }\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002a18": "find_value_in_arrays_00002a18",
                "param_1": "array",
                "param_2": "target_value",
                "local_18": "current_array",
                "local_14": "reboot_message",
                "local_10": "index",
                "local_c": "current_element",
                "iVar1": "comparison_result",
                "compare_byte_arrays_00004e52": "compare_arrays"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002a18": {
                    "1": "find_match_and_return",
                    "3": "find_matching_value",
                    "2": "find_matched_value",
                    "9": "find_value_in_arrays"
                },
                "param_1": {
                    "1": "array_of_pointers",
                    "14": "array",
                    "6": "array_list",
                    "2": "array_pointers",
                    "3": "input_array"
                },
                "param_2": {
                    "10": "target_value",
                    "4": "search_value",
                    "1": "target_array",
                    "9": "value",
                    "5": "target",
                    "2": "compare_value"
                },
                "local_18": {
                    "1": "current_value",
                    "3": "current_element",
                    "17": "current_array",
                    "2": "input_array"
                },
                "local_14": {
                    "1": "error_messages",
                    "2": "string_pointer",
                    "3": "reboot_strings",
                    "12": "reboot_message",
                    "4": "reboot_string"
                },
                "local_10": {
                    "1": "num_arrays",
                    "12": "array_index",
                    "2": "current_index",
                    "16": "index"
                },
                "local_c": {
                    "1": "current_value",
                    "17": "current_element",
                    "6": "current_array",
                    "2": "current_string"
                },
                "iVar1": {
                    "5": "comparison_result"
                },
                "compare_byte_arrays_00004e52": {
                    "3": "compare_arrays",
                    "1": "compare_byte_arrays"
                }
            }
        },
        "FUN_00002a88": {
            "entrypoint": "0x00002a88",
            "current_name": "print_command_descriptions_00002a88",
            "code": "\nvoid print_command_descriptions_00002a88(int *commands)\n\n{\n  int *current_command;\n  undefined **command_names;\n  uint index;\n  int *current_parameter;\n  \n  process_and_initialize_data_00004c84(\"%-20s %s\\n\",\"Command\",\"Description\");\n  process_data_00004db8(\"---------------------------------------\");\n  current_command = commands;\n  command_names = &PTR_s_reboot_00007300;\n  for (index = 0; index < 2; index = index + 1) {\n    current_parameter = (&current_command)[index];\n    if (current_parameter != (int *)0x0) {\n      for (; *current_parameter != 0; current_parameter = current_parameter + 3) {\n        process_and_initialize_data_00004c84(\"%-20s %s\\n\",*current_parameter,description);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a88": "print_command_descriptions_00002a88",
                "param_1": "commands",
                "local_18": "current_command",
                "local_14": "command_names",
                "local_10": "index",
                "local_c": "current_parameter",
                "local_c[1]": "description"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002a88": {
                    "3": "display_command_descriptions",
                    "4": "print_command_description",
                    "24": "print_command_descriptions"
                },
                "param_1": {
                    "9": "command_list",
                    "16": "commands",
                    "1": "commands_array",
                    "5": "command_array"
                },
                "local_18": {
                    "30": "current_command"
                },
                "local_14": {
                    "10": "command_names",
                    "2": "command_ptr",
                    "7": "command_name",
                    "1": "command_data",
                    "6": "command_description"
                },
                "local_10": {
                    "6": "command_index",
                    "24": "index"
                },
                "local_c": {
                    "1": "current",
                    "5": "current_param",
                    "3": "current_data",
                    "13": "current_parameter",
                    "2": "current_argument"
                },
                "*local_c": {
                    "1": "command"
                },
                "local_c[1]": {
                    "1": "description"
                }
            }
        },
        "FUN_00002b10": {
            "entrypoint": "0x00002b10",
            "current_name": "process_command_00002b10",
            "code": "\nvoid process_command_00002b10(undefined4 param1,byte *input_string)\n\n{\n  int comparison_result;\n  byte *next_byte;\n  byte *string_pointers [3];\n  code *command_function;\n  char **command_args;\n  uint num_commands;\n  byte quote_char;\n  char *current_char;\n  char *current_command;\n  char **command_list;\n  uint i;\n  int escape_count;\n  uint quote_count;\n  byte *current_char;\n  \n  quote_count = 0;\n  escape_count = 0;\n  current_char = input_string;\n  while( true ) {\n    string_pointers[0] = input_string;\n    string_pointers[1] = (byte *)param1;\n    if (0x20 < *current_char) {\n      if ((*current_char == 0x22) || (*current_char == 0x27)) {\n        quote_char = *current_char;\n        do {\n          next_byte = current_char + 1;\n          if (*next_byte == 0) {\n            current_char = next_byte;\n            process_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n          if (*next_byte == 0x5c) {\n            escape_count = escape_count + 1;\n            current_char = current_char + 2;\n            next_byte = current_char;\n            if (*current_char == 0) {\n              process_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          current_char = next_byte;\n        } while (quote_char != *current_char);\n        if (0x20 < current_char[1]) {\n          process_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n          return;\n        }\n      }\n      else {\n        do {\n          if (*current_char == 0x5c) {\n            escape_count = escape_count + 1;\n            current_char = current_char + 1;\n            if (*current_char == 0) {\n              process_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          current_char = current_char + 1;\n          if (*current_char == 0x22) {\n            process_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n        } while (0x20 < *current_char);\n      }\n      quote_count = quote_count + 1;\n    }\n    if (*current_char == 0) break;\n    *current_char = 0;\n    current_char = current_char + 1;\n  }\n  if (quote_count != 0) {\n    num_commands = quote_count;\n    command_args = (char **)((int)string_pointers - ((quote_count + 1) * 4 + 7 & 0xfffffff8));\n    command_args[quote_count] = (char *)0x0;\n    current_char = input_string;\n    for (i = 0; command_list = command_args, i < quote_count; i = i + 1) {\n      for (; *current_char == 0; current_char = current_char + 1) {\n      }\n      if ((*current_char == 0x22) || (*current_char == 0x27)) {\n        current_char = current_char + 1;\n      }\n      command_args[i] = (char *)current_char;\n      for (; *current_char != 0; current_char = current_char + 1) {\n      }\n    }\n    for (; (escape_count != 0 && (*command_list != (char *)0x0)); command_list = command_list + 1) {\n      for (current_command = *command_list; *current_command != '\\0'; current_command = current_command + 1) {\n        if (*current_command == '\\') {\n          for (current_char = current_command; *current_char != '\\0'; current_char = current_char + 1) {\n            *current_char = current_char[1];\n          }\n          escape_count = escape_count + -1;\n          if (escape_count == 0) break;\n        }\n      }\n    }\n    command_function = (code *)find_value_in_arrays_00002a18(param1,*command_args);\n    if (command_function == (code *)0x0) {\n      comparison_result = compare_byte_arrays_00004e52(&DAT_00007214,*command_args);\n      if (comparison_result == 0) {\n        print_command_descriptions_00002a88(string_pointers[1]);\n      }\n      else {\n        process_and_initialize_data_00004c84(\"shell: command not found: %s\\n\",*command_args);\n      }\n    }\n    else {\n      (*command_function)(quote_count,command_args);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002b10": "process_command_00002b10",
                "param_1": "param1",
                "param_2": "input_string",
                "iVar1": "comparison_result",
                "pbVar2": "next_byte",
                "local_48": "string_pointers",
                "local_3c": "command_function",
                "local_38": "command_args",
                "local_34": "num_commands",
                "local_2d": "quote_char",
                "local_2c": "current_char",
                "local_28": "current_command",
                "local_24": "command_list",
                "local_20": "i",
                "local_1c": "escape_count",
                "local_18": "quote_count",
                "local_14": "current_char"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002a18",
                "FUN_00004e52",
                "FUN_00004c84",
                "FUN_00002a88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002b10": {
                    "1": "process_command_line",
                    "8": "process_input",
                    "2": "process_input_string",
                    "3": "parse_command_line",
                    "10": "process_command"
                },
                "param_1": {
                    "1": "cmd_function",
                    "2": "command",
                    "12": "param1",
                    "6": "param"
                },
                "param_2": {
                    "6": "input",
                    "5": "command",
                    "1": "input_array",
                    "7": "input_string",
                    "2": "command_line"
                },
                "iVar1": {
                    "9": "comparison_result",
                    "1": "compare_result"
                },
                "pbVar2": {
                    "4": "next_byte",
                    "1": "ptr",
                    "2": "next_char"
                },
                "local_48": {
                    "1": "command_strings",
                    "2": "input_ptr"
                },
                "local_3c": {
                    "7": "function_pointer",
                    "1": "command_ptr",
                    "9": "command_function",
                    "4": "function_ptr",
                    "2": "command_handler",
                    "3": "command_func"
                },
                "local_38": {
                    "1": "token_list",
                    "2": "arguments",
                    "3": "command_array",
                    "8": "command_args",
                    "4": "command_list"
                },
                "local_34": {
                    "4": "num_args",
                    "1": "num_arguments",
                    "10": "num_commands",
                    "2": "array_size",
                    "3": "argument_count"
                },
                "local_2d": {
                    "2": "quote",
                    "7": "quote_character",
                    "1": "quote_symbol",
                    "14": "quote_char",
                    "5": "quote_type"
                },
                "local_2c": {
                    "3": "current_character",
                    "1": "escape_ptr",
                    "9": "current_char",
                    "6": "escape_char"
                },
                "local_28": {
                    "1": "inner_string",
                    "5": "current_arg",
                    "3": "current_argument",
                    "6": "current_command"
                },
                "local_24": {
                    "1": "arg_ptr_array",
                    "2": "arg_ptr",
                    "4": "command_list"
                },
                "local_20": {
                    "1": "loop_index",
                    "4": "command_index",
                    "9": "i",
                    "6": "arg_index",
                    "7": "index",
                    "2": "current_index"
                },
                "local_1c": {
                    "4": "num_backslashes",
                    "1": "quote_count",
                    "7": "backslash_count",
                    "2": "num_escapes",
                    "14": "escape_count"
                },
                "local_18": {
                    "4": "num_quotes",
                    "1": "string_count",
                    "2": "num_strings",
                    "12": "quote_count"
                },
                "local_14": {
                    "1": "current_character_ptr",
                    "3": "char_ptr",
                    "9": "current_char",
                    "2": "current_position",
                    "4": "current_byte",
                    "6": "current_char_ptr"
                }
            }
        },
        "FUN_00002d94": {
            "entrypoint": "0x00002d94",
            "current_name": "process_input_00002d94",
            "code": "\nuint process_input_00002d94(undefined *input_buffer,int buffer_size)\n\n{\n  int data;\n  byte byte_value;\n  bool is_buffer_empty;\n  undefined *current_char;\n  \n  current_char = input_buffer;\n  while( true ) {\n    if (buffer_size + -1 <= (int)current_char - (int)input_buffer) {\n      return 0xffffffff;\n    }\n    data = get_data_item();\n    if (data < 0) break;\n    if ((data == 0xd) || (data == 10)) {\n      *current_char = 0;\n      process_output(0xd);\n      process_output(10);\n      is_buffer_empty = current_char == input_buffer;\n      if (is_buffer_empty) {\n        input_buffer = (undefined *)0x1;\n      }\n      byte_value = (byte)input_buffer;\n      if (!is_buffer_empty) {\n        byte_value = 0;\n      }\n      return (uint)byte_value;\n    }\n    if ((data == 8) || (data == 0x7f)) {\n      if (current_char != input_buffer) {\n        current_char = current_char + -1;\n        *current_char = 0;\n        process_output(8);\n        process_output(0x20);\n        process_output(8);\n      }\n    }\n    else {\n      *current_char = (char)data;\n      process_output(data);\n      current_char = current_char + 1;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00002d94": "process_input_00002d94",
                "param_1": "input_buffer",
                "param_2": "buffer_size",
                "iVar1": "data",
                "bVar2": "byte_value",
                "bVar3": "is_buffer_empty",
                "local_c": "current_char",
                "process_data_00004418": "get_data_item",
                "process_data_00002a00": "process_output"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004418",
                "FUN_00002a00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002d94": {
                    "1": "reverse_and_process_data",
                    "3": "process_input_data",
                    "12": "process_input",
                    "4": "process_data",
                    "2": "process_user_input"
                },
                "param_1": {
                    "15": "input_buffer",
                    "1": "output_buffer",
                    "4": "data_buffer",
                    "7": "buffer"
                },
                "param_2": {
                    "1": "data_length",
                    "2": "length",
                    "19": "buffer_size"
                },
                "iVar1": {
                    "7": "data",
                    "1": "data_processing_result",
                    "2": "processed_data",
                    "4": "input_byte"
                },
                "bVar2": {
                    "2": "byte_val",
                    "1": "is_empty",
                    "9": "byte_value",
                    "3": "output_byte"
                },
                "bVar3": {
                    "1": "is_equal",
                    "2": "is_input_buffer_empty",
                    "5": "is_first_byte",
                    "7": "is_buffer_empty"
                },
                "local_c": {
                    "1": "current_byte",
                    "3": "current_ptr",
                    "12": "current_char",
                    "10": "current_position",
                    "2": "output_buffer"
                },
                "process_data_00004418": {
                    "1": "read_byte"
                },
                "process_data_00002a00": {
                    "1": "process_output"
                },
                "F0": {
                    "1": "extract_string_from_binary"
                }
            }
        },
        "FUN_00002e48": {
            "entrypoint": "0x00002e48",
            "current_name": "process_and_relocate_data_00002e48",
            "code": "\nvoid process_and_relocate_data_00002e48(void)\n\n{\n  process_data(0x3e);\n  process_data(0x20);\n  process_relocation_entries(*(undefined4 *)(relocation_entries[16].offset + 8));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002e48": "process_and_relocate_data_00002e48",
                "process_data_00002a00": "process_data",
                "process_relocation_entries_000041d0": "process_relocation_entries",
                "Elf32_Rel_ARRAY_1fff0200": "relocation_entries",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_000041d0",
                "FUN_00002a00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002e48": {
                    "2": "process_data_and_relocation",
                    "1": "process_relocation_data",
                    "4": "initialize_data_processing",
                    "3": "process_data_and_relocate",
                    "5": "process_relocation",
                    "6": "process_and_relocate_data"
                },
                "process_data_00002a00": {
                    "1": "process_data_entry",
                    "26": "process_data"
                },
                "process_relocation_entries_000041d0": {
                    "1": "relocate_data",
                    "20": "process_relocation_entries"
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "2": "relocation_table",
                    "20": "relocation_entries",
                    "1": "rel_array"
                },
                "r_offset": {
                    "10": "offset",
                    "1": "relocation_offset"
                }
            }
        },
        "FUN_00002e6c": {
            "entrypoint": "0x00002e6c",
            "current_name": "process_input_loop_00002e6c",
            "code": "\nvoid process_input_loop_00002e6c(undefined4 param_1,undefined4 input_param,undefined4 data_param)\n\n{\n  int input_result;\n  \n  process_and_relocate_data();\n  do {\n    input_result = process_input(input_param,data_param);\n    if (input_result == 0) {\n      process_command(param_1,input_param);\n    }\n    process_and_relocate_data();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002e6c": "process_input_loop_00002e6c",
                "param_2": "input_param",
                "param_3": "data_param",
                "iVar1": "input_result",
                "process_and_relocate_data_00002e48": "process_and_relocate_data",
                "process_input_00002d94": "process_input",
                "process_command_00002b10": "process_command"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_00002d94",
                "FUN_00002b10",
                "FUN_00002e48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002e6c": {
                    "1": "process_commands",
                    "18": "process_input_loop",
                    "2": "process_data_loop",
                    "6": "process_input_and_command"
                },
                "param_1": {
                    "1": "process_param_1",
                    "4": "command_param",
                    "3": "arg1",
                    "6": "param_1",
                    "2": "input_param"
                },
                "param_2": {
                    "1": "input_data",
                    "3": "arg2",
                    "2": "input_param_2",
                    "4": "input_param_1",
                    "8": "input_param"
                },
                "param_3": {
                    "1": "command_data",
                    "3": "arg3",
                    "4": "input_param_2",
                    "2": "input_param_3"
                },
                "iVar1": {
                    "3": "process_result",
                    "1": "input_status",
                    "5": "result",
                    "19": "input_result"
                },
                "process_and_relocate_data_00002e48": {
                    "1": "process_relocate_data",
                    "2": "process_and_relocate_data"
                },
                "process_input_00002d94": {
                    "2": "process_input"
                },
                "process_command_00002b10": {
                    "2": "process_command"
                }
            }
        },
        "FUN_00002e9c": {
            "entrypoint": "0x00002e9c",
            "current_name": "execute_infinite_loop_00002e9c",
            "code": "\nint execute_infinite_loop_00002e9c(void)\n\n{\n  execute_infinite_loop_00002e9c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002e9c": "execute_infinite_loop_00002e9c",
                "execute_infinite_loop_00003688": "execute_infinite_loop",
                "undefined4": "int"
            },
            "calling": [],
            "called": [
                "FUN_00003688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002e9c": {
                    "31": "execute_infinite_loop"
                },
                "execute_infinite_loop_00003688": {
                    "16": "execute_infinite_loop",
                    "1": "infinite_loop"
                },
                "return value": {
                    "1": "result"
                },
                "return 0": {
                    "1": "end_execution"
                },
                "return 0;": {
                    "1": "return_success"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_parameter_name_1>": {
                    "1": "<new_parameter_name_1>"
                },
                "execute_infinite_loop": {
                    "1": ""
                },
                "return_value": {
                    "1": "status"
                },
                "undefined4": {
                    "1": "int"
                }
            }
        },
        "FUN_00002eb4": {
            "entrypoint": "0x00002eb4",
            "current_name": "print_process_information_00002eb4",
            "code": "\nvoid print_process_information_00002eb4(void)\n\n{\n  print_process_information_00002eb4();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002eb4": "print_process_information_00002eb4",
                "print_process_information_0000211c": "print_process_information",
                "undefined4": "void"
            },
            "calling": [],
            "called": [
                "FUN_0000211c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002eb4": {
                    "29": "print_process_information",
                    "2": "print_process_info"
                },
                "print_process_information_0000211c": {
                    "12": "print_process_information",
                    "7": "print_process_info",
                    "1": "print_proc_info"
                },
                "": {
                    "2": ""
                },
                "PTR_FUN_0000211c": {
                    "1": "process_information"
                },
                "PARAM_00000000": {
                    "1": "void"
                },
                "VAR_00000000": {
                    "1": "result"
                },
                "return 0": {
                    "1": "return_success"
                },
                "undefined4": {
                    "1": "void"
                }
            }
        },
        "FUN_00002ecc": {
            "entrypoint": "0x00002ecc",
            "current_name": "read_from_device_00002ecc",
            "code": "\nvoid read_from_device_00002ecc(undefined4 device_number,int device_data)\n\n{\n  undefined4 class_name;\n  undefined4 data_value;\n  undefined data_buffer [8];\n  uint read_result;\n  \n  read_result = execute_function_00003d64(device_data,data_buffer);\n  if ((int)read_result < 1) {\n    process_and_initialize_data_00004c84(\"error: failed to read from device #%i\\n\",device_number);\n  }\n  else {\n    data_value = *(undefined4 *)(device_data + 8);\n    class_name = get_class_name_000039e8(*(undefined *)(*(int *)(device_data + 0xc) + 8));\n    process_and_initialize_data_00004c84(\"Reading from #%i (%s|%s)\\n\",device_number,data_value,class_name);\n    display_data_object_00003694(data_buffer,read_result & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002ecc": "read_from_device_00002ecc",
                "param_1": "device_number",
                "param_2": "device_data",
                "uVar1": "class_name",
                "uVar2": "data_value",
                "auStack_1c": "data_buffer",
                "local_14": "read_result"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_00002f30"
            ],
            "called": [
                "FUN_000039e8",
                "FUN_00003694",
                "FUN_00003d64",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002ecc": {
                    "1": "read_from_device_and_display",
                    "3": "read_and_display_data",
                    "11": "read_data_from_device",
                    "12": "read_from_device"
                },
                "param_1": {
                    "1": "device",
                    "26": "device_number",
                    "2": "device_index"
                },
                "param_2": {
                    "1": "data_address",
                    "8": "device_info",
                    "3": "data_pointer",
                    "16": "device_data"
                },
                "uVar1": {
                    "29": "class_name"
                },
                "uVar2": {
                    "2": "class_object",
                    "3": "device_name",
                    "1": "data_offset",
                    "6": "data_value"
                },
                "auStack_1c": {
                    "1": "stack_data",
                    "4": "read_buffer",
                    "8": "buffer",
                    "2": "temporary_buffer"
                },
                "local_14": {
                    "11": "data_size",
                    "1": "data_length",
                    "12": "read_result",
                    "6": "read_size"
                },
                "<original_function_name>": {
                    "1": "read_from_device"
                }
            }
        },
        "FUN_00002f30": {
            "entrypoint": "0x00002f30",
            "current_name": "process_device_data_00002f30",
            "code": "\nvoid process_device_data_00002f30(void)\n\n{\n  int device_index;\n  undefined4 *device_ptr;\n  \n  device_index = 0;\n  for (device_ptr = DAT_1fff0db0; device_ptr != (undefined4 *)0x0; device_ptr = (undefined4 *)*device_ptr) {\n    read_data_from_device(device_index,device_ptr);\n    process_data(&DAT_00007380);\n    device_index = device_index + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f30": "process_device_data_00002f30",
                "local_10": "device_index",
                "local_c": "device_ptr",
                "read_from_device_00002ecc": "read_data_from_device",
                "process_data_00004db8": "process_data"
            },
            "calling": [
                "FUN_00002fe0"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002ecc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002f30": {
                    "1": "process_devices",
                    "4": "process_data_from_device",
                    "22": "process_device_data"
                },
                "local_10": {
                    "1": "data_counter",
                    "15": "device_index",
                    "10": "index",
                    "2": "device_count"
                },
                "local_c": {
                    "2": "current_device",
                    "1": "current_data_ptr",
                    "9": "device_ptr",
                    "5": "device_data_ptr"
                },
                "read_from_device_00002ecc": {
                    "1": "read_device_data",
                    "2": "read_data_from_device"
                },
                "process_data_00004db8": {
                    "3": "process_data"
                },
                "DAT_00007380": {
                    "1": "data_buffer"
                },
                "DAT_1fff0db0": {
                    "1": "device_list"
                }
            }
        },
        "FUN_00002f74": {
            "entrypoint": "0x00002f74",
            "current_name": "print_device_list_00002f74",
            "code": "\nvoid print_device_list_00002f74(void)\n\n{\n  undefined4 class_name;\n  int device_count;\n  undefined4 *device_list;\n  \n  device_list = DAT_1fff0db0;\n  device_count = 0;\n  if (DAT_1fff0db0 == (undefined4 *)0x0) {\n    print_message(\"No devices found\");\n  }\n  else {\n    print_message(\"ID\\tClass\\t\\tName\");\n  }\n  for (; device_list != (undefined4 *)0x0; device_list = (undefined4 *)*device_list) {\n    class_name = get_class_name(*(undefined *)(device_list[3] + 8));\n    process_and_initialize_data(\"#%i\\t%s\\t%s\\n\",device_count,class_name,device_list[2]);\n    device_count = device_count + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f74": "print_device_list_00002f74",
                "uVar1": "class_name",
                "local_18": "device_count",
                "local_14": "device_list",
                "process_data_00004db8": "print_message",
                "get_class_name_000039e8": "get_class_name",
                "process_and_initialize_data_00004c84": "process_and_initialize_data"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_000039e8",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002f74": {
                    "2": "display_device_info",
                    "9": "print_device_information",
                    "10": "print_device_list",
                    "6": "print_device_info"
                },
                "uVar1": {
                    "20": "class_name"
                },
                "local_18": {
                    "6": "device_index",
                    "25": "device_count"
                },
                "local_14": {
                    "27": "device_list",
                    "1": "device",
                    "2": "device_ptr"
                },
                "process_data_00004db8": {
                    "4": "display_message",
                    "6": "print_message"
                },
                "DAT_1fff0db0": {
                    "1": "device_data"
                },
                "get_class_name_000039e8": {
                    "9": "get_class_name",
                    "1": "get_device_class_name"
                },
                "process_and_initialize_data_00004c84": {
                    "1": "process_data",
                    "2": "process_data_and_initialize",
                    "5": "process_and_initialize_data"
                },
                "*local_14": {
                    "1": "next_device"
                },
                "*(undefined *)(local_14[3] + 8)": {
                    "1": "device_name"
                }
            }
        },
        "FUN_00002fe0": {
            "entrypoint": "0x00002fe0",
            "current_name": "process_device_data_00002fe0",
            "code": "\nvoid process_device_data_00002fe0(int argc,undefined4 *argv)\n\n{\n  int comparison_result;\n  undefined4 parsed_integer;\n  \n  if (argc < 3) {\n    print_usage(\"usage: %s %s <device id>|all\\n\",*argv,argv[1]);\n  }\n  else {\n    comparison_result = compare_device_id(argv[2],&DAT_000073d4);\n    if (comparison_result == 0) {\n      process_all_devices();\n    }\n    else {\n      parsed_integer = parse_and_validate_device_id(argv[2]);\n      comparison_result = find_device_index(parsed_integer);\n      if (comparison_result == 0) {\n        print_error(\"error: undefined device id given\");\n      }\n      else {\n        read_device_data(parsed_integer,comparison_result);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002fe0": "process_device_data_00002fe0",
                "param_1": "argc",
                "param_2": "argv",
                "iVar1": "comparison_result",
                "uVar2": "parsed_integer",
                "compare_byte_arrays_00004e52": "compare_device_id",
                "parse_and_validate_integer_00004042": "parse_and_validate_device_id",
                "find_nth_element_00003d24": "find_device_index",
                "process_and_initialize_data_00004c84": "print_usage",
                "process_device_data_00002f30": "process_all_devices",
                "process_data_00004db8": "print_error",
                "read_from_device_00002ecc": "read_device_data"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00004e52",
                "FUN_00003d24",
                "FUN_00002ecc",
                "FUN_00002f30",
                "FUN_00004c84",
                "FUN_00004042"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002fe0": {
                    "1": "process_command",
                    "2": "process_device_command",
                    "4": "process_device",
                    "20": "process_device_data"
                },
                "param_1": {
                    "1": "device_command_count",
                    "11": "argc",
                    "3": "num_params",
                    "4": "num_args",
                    "2": "num_arguments"
                },
                "param_2": {
                    "3": "params",
                    "5": "args",
                    "11": "argv",
                    "1": "arg2",
                    "6": "arguments"
                },
                "iVar1": {
                    "25": "comparison_result",
                    "4": "result",
                    "1": "array_comparison_result"
                },
                "uVar2": {
                    "1": "parsed_value",
                    "13": "device_id",
                    "16": "parsed_integer"
                },
                "compare_byte_arrays_00004e52": {
                    "2": "compare_byte_arrays",
                    "4": "compare_device_id",
                    "1": "compare_device_id_with_keyword"
                },
                "parse_and_validate_integer_00004042": {
                    "1": "parse_int",
                    "2": "parse_validate_integer",
                    "5": "parse_and_validate_device_id",
                    "4": "parse_and_validate_integer"
                },
                "find_nth_element_00003d24": {
                    "2": "find_nth_element",
                    "1": "find_device_id_index",
                    "9": "find_device_index"
                },
                "process_and_initialize_data_00004c84": {
                    "2": "print_usage_error",
                    "3": "print_usage",
                    "1": "print_usage_message"
                },
                "process_device_data_00002f30": {
                    "1": "process_all_device_data",
                    "3": "process_all_devices"
                },
                "process_data_00004db8": {
                    "1": "process_error",
                    "2": "print_error"
                },
                "read_from_device_00002ecc": {
                    "7": "read_device_data",
                    "5": "read_data_from_device",
                    "2": "read_from_device"
                }
            }
        },
        "FUN_0000305c": {
            "entrypoint": "0x0000305c",
            "current_name": "write_to_device_0000305c",
            "code": "\nvoid write_to_device_0000305c(int argc,undefined4 *argv)\n\n{\n  undefined2 parsed_value;\n  undefined2 values [4];\n  uint num_values;\n  int device_index;\n  undefined4 device_id;\n  int i;\n  \n  if (argc < 4) {\n    print_usage(\"usage: %s %s <device id> <value 0> [<value 1> [<value 2]]\\n\",*argv,argv[1]);\n  }\n  else {\n    device_id = parse_and_validate_integer(argv[2]);\n    device_index = find_nth_element(device_id);\n    if (device_index == 0) {\n      print_error(\"error: undefined device given\");\n    }\n    else {\n      initialize_memory(values,0,8);\n      if (5 < argc) {\n        argc = 6;\n      }\n      num_values = argc - 3;\n      for (i = 0; i < (int)num_values; i = i + 1) {\n        parsed_value = parse_and_validate_integer(argv[i + 3]);\n        values[i] = parsed_value;\n      }\n      print_usage(\"Writing to device #%i - %s\\n\",device_id,*(undefined4 *)(device_index + 8));\n      display_data(values,num_values & 0xff);\n      num_values = execute_function(device_index,values);\n      if ((int)num_values < 1) {\n        if (num_values == -0x86) {\n          print_usage(\"error: device #%i is not writable\\n\",device_id);\n        }\n        else {\n          print_usage(\"error: failure to write to device #%i\\n\",device_id);\n        }\n      }\n      else {\n        print_usage(\"data successfully written to device #%i\\n\",device_id);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000305c": "write_to_device_0000305c",
                "param_1": "argc",
                "param_2": "argv",
                "uVar1": "parsed_value",
                "auStack_20": "values",
                "local_18": "num_values",
                "local_14": "device_index",
                "local_10": "device_id",
                "local_c": "i",
                "process_and_initialize_data_00004c84": "print_usage",
                "parse_and_validate_integer_00004042": "parse_and_validate_integer",
                "find_nth_element_00003d24": "find_nth_element",
                "process_data_00004db8": "print_error",
                "fill_memory_00004622": "initialize_memory",
                "display_data_object_00003694": "display_data",
                "execute_function_00003d94": "execute_function"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00003694",
                "FUN_00003d94",
                "FUN_00003d24",
                "FUN_00004622",
                "FUN_00004c84",
                "FUN_00004042"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000305c": {
                    "29": "write_to_device",
                    "1": "write_to_device_with_data_check"
                },
                "param_1": {
                    "1": "num_arguments",
                    "23": "argc",
                    "4": "num_args"
                },
                "param_2": {
                    "3": "args",
                    "1": "cmd_args",
                    "23": "argv",
                    "2": "arguments"
                },
                "uVar1": {
                    "1": "parsed_int",
                    "18": "parsed_value",
                    "4": "parsed_integer"
                },
                "auStack_20": {
                    "1": "values_arr",
                    "18": "values",
                    "6": "device_values"
                },
                "local_18": {
                    "1": "device_count",
                    "25": "num_values",
                    "2": "value_count"
                },
                "local_14": {
                    "3": "element_index",
                    "1": "device_info_result",
                    "26": "device_index"
                },
                "local_10": {
                    "1": "parsed_integer",
                    "2": "parsed_value",
                    "26": "device_id"
                },
                "local_c": {
                    "1": "current_index",
                    "13": "i",
                    "3": "counter",
                    "8": "index",
                    "4": "value_index"
                },
                "process_and_initialize_data_00004c84": {
                    "1": "print_usage"
                },
                "parse_and_validate_integer_00004042": {
                    "1": "parse_and_validate_integer"
                },
                "find_nth_element_00003d24": {
                    "1": "find_nth_element"
                },
                "process_data_00004db8": {
                    "1": "print_error"
                },
                "fill_memory_00004622": {
                    "1": "initialize_memory"
                },
                "display_data_object_00003694": {
                    "1": "display_data"
                },
                "execute_function_00003d94": {
                    "1": "execute_function"
                }
            }
        },
        "FUN_0000316c": {
            "entrypoint": "0x0000316c",
            "current_name": "process_device_command_0000316c",
            "code": "\nundefined4 process_device_command_0000316c(int device_count,undefined4 *arguments)\n\n{\n  int comparison_result;\n  \n  if (device_count < 2) {\n    print_device_list();\n  }\n  else {\n    comparison_result = compare_byte_arrays(arguments[1],&DAT_000074ec);\n    if (comparison_result == 0) {\n      process_device_data(device_count,arguments);\n    }\n    else {\n      comparison_result = compare_byte_arrays(arguments[1],\"write\");\n      if (comparison_result == 0) {\n        write_to_device(device_count,arguments);\n      }\n      else {\n        handle_error(\"usage: %s read|write\\n\",*arguments);\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000316c": "process_device_command_0000316c",
                "param_1": "device_count",
                "param_2": "arguments",
                "iVar1": "comparison_result",
                "print_device_list_00002f74": "print_device_list",
                "compare_byte_arrays_00004e52": "compare_byte_arrays",
                "process_device_data_00002fe0": "process_device_data",
                "write_to_device_0000305c": "write_to_device",
                "process_and_initialize_data_00004c84": "handle_error"
            },
            "calling": [],
            "called": [
                "FUN_00002f74",
                "FUN_00002fe0",
                "FUN_00004e52",
                "FUN_00004c84",
                "FUN_0000305c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000316c": {
                    "1": "process_device_operation",
                    "11": "process_device_command",
                    "2": "handle_device_operation",
                    "5": "process_command"
                },
                "param_1": {
                    "1": "command_length",
                    "2": "num_devices",
                    "4": "command_type",
                    "12": "device_count"
                },
                "param_2": {
                    "2": "command_array",
                    "1": "device_arguments",
                    "6": "command_args",
                    "7": "arguments"
                },
                "iVar1": {
                    "27": "comparison_result",
                    "1": "result"
                },
                "print_device_list_00002f74": {
                    "2": "print_device_list"
                },
                "compare_byte_arrays_00004e52": {
                    "2": "compare_byte_arrays"
                },
                "process_device_data_00002fe0": {
                    "2": "process_device_data"
                },
                "write_to_device_0000305c": {
                    "2": "write_to_device"
                },
                "process_and_initialize_data_00004c84": {
                    "1": "handle_error"
                }
            }
        },
        "FUN_000031e0": {
            "entrypoint": "0x000031e0",
            "current_name": "ring_alarm_000031e0",
            "code": "\nvoid ring_alarm_000031e0(void)\n\n{\n  process_data_00004db8(\"The alarm rang\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_000031e0": "ring_alarm_000031e0"
            },
            "calling": [],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_000031e0(void)\n\n{\n  FUNC_00004db8(\"The alarm rang\");\n  return;\n}\n\n",
            "additional_data": {
                "FUN_000031e0": {
                    "3": "play_alarm_sound",
                    "1": "announce_alarm",
                    "5": "display_alarm_message",
                    "20": "ring_alarm"
                },
                "FUNC_00004db8": {
                    "16": "display_message",
                    "1": "display_notification",
                    "9": "print_message"
                }
            }
        },
        "FUN_000031fc": {
            "entrypoint": "0x000031fc",
            "current_name": "calculate_weekday_000031fc",
            "code": "\nint calculate_weekday_000031fc(int year,int month,int day)\n\n{\n  byte is_leap_year;\n  int adjusted_year;\n  \n  adjusted_year = month;\n  if (month < 3) {\n    adjusted_year = 1;\n  }\n  is_leap_year = (byte)adjusted_year;\n  if (2 < month) {\n    is_leap_year = 0;\n  }\n  year = year - (uint)is_leap_year;\n  adjusted_year = year;\n  if (year < 0) {\n    adjusted_year = year + 3;\n  }\n  return ((((adjusted_year >> 2) + year) - year / 100) + year / 400 +\n          *(int *)((int)day_offset + (month + -1) * 4 + 0x50) + day) % 7;\n}\n\n",
            "renaming": {
                "FUN_000031fc": "calculate_weekday_000031fc",
                "param_1": "year",
                "param_2": "month",
                "param_3": "day",
                "bVar1": "is_leap_year",
                "iVar2": "adjusted_year",
                "Elf32_Rel_ARRAY_1fff0200": "day_offset"
            },
            "calling": [
                "FUN_0000328c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000031fc": {
                    "1": "get_weekday",
                    "2": "day_of_week",
                    "14": "calculate_weekday",
                    "13": "calculate_day_of_week"
                },
                "param_1": {
                    "28": "year",
                    "1": "adjusted_year"
                },
                "param_2": {
                    "30": "month",
                    "1": "current_month"
                },
                "param_3": {
                    "1": "year",
                    "27": "day"
                },
                "bVar1": {
                    "1": "leap_year_modifier",
                    "26": "is_leap_year"
                },
                "iVar2": {
                    "1": "adjusted_year_value",
                    "20": "adjusted_year",
                    "9": "adjusted_month"
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "1": "week_constants_array",
                    "2": "weekday_offset"
                }
            }
        },
        "FUN_0000328c": {
            "entrypoint": "0x0000328c",
            "current_name": "parse_and_calculate_weekday_0000328c",
            "code": "\nundefined4 parse_and_calculate_weekday_0000328c(undefined4 *date_string,int *output_array)\n\n{\n  int weekday;\n  int index;\n  short parsed_value;\n  \n  parsed_value = parse_integer(*date_string,&index,10);\n  output_array[5] = parsed_value + -0x76c;\n  parsed_value = parse_integer(index + 1,&index,10);\n  output_array[4] = parsed_value + -1;\n  parsed_value = parse_integer(index + 1,&index,10);\n  output_array[3] = (int)parsed_value;\n  parsed_value = parse_integer(date_string[1],&index,10);\n  output_array[2] = (int)parsed_value;\n  parsed_value = parse_integer(index + 1,&index,10);\n  output_array[1] = (int)parsed_value;\n  parsed_value = parse_integer(index + 1,&index,10);\n  *output_array = (int)parsed_value;\n  weekday = calculate_weekday(output_array[5] + 0x76c,output_array[4] + 1,output_array[3]);\n  output_array[6] = weekday;\n  output_array[8] = -1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000328c": "parse_and_calculate_weekday_0000328c",
                "param_1": "date_string",
                "param_2": "output_array",
                "local_10": "index",
                "local_a": "parsed_value",
                "parse_integer_00004f84": "parse_integer",
                "calculate_weekday_000031fc": "calculate_weekday",
                "iVar1": "weekday"
            },
            "calling": [
                "FUN_000033f4",
                "FUN_00003478"
            ],
            "called": [
                "FUN_000031fc",
                "FUN_00004f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000328c": {
                    "2": "parse_date",
                    "16": "parse_and_calculate_weekday",
                    "1": "extract_and_calculate_weekday",
                    "5": "parse_date_and_weekday"
                },
                "param_1": {
                    "1": "input_data",
                    "10": "date_string",
                    "6": "input_strings",
                    "9": "input_array"
                },
                "param_2": {
                    "8": "output_array",
                    "4": "parsed_date",
                    "1": "date_info",
                    "6": "output_values",
                    "2": "parsed_data",
                    "3": "result_array"
                },
                "local_10": {
                    "1": "end_index",
                    "2": "parse_index",
                    "10": "index",
                    "9": "current_index"
                },
                "local_a": {
                    "2": "parsed_int",
                    "16": "parsed_value",
                    "13": "parsed_integer"
                },
                "*param_1": {
                    "2": "date_string",
                    "1": "input_string"
                },
                "*param_2": {
                    "1": "date_info"
                },
                "parse_integer_00004f84": {
                    "6": "parse_integer"
                },
                "calculate_weekday_000031fc": {
                    "6": "calculate_weekday"
                },
                "iVar1": {
                    "3": "weekday"
                },
                "10": {
                    "1": "decimal_base"
                }
            }
        },
        "FUN_00003378": {
            "entrypoint": "0x00003378",
            "current_name": "print_date_time_00003378",
            "code": "\nundefined4 print_date_time_00003378(undefined4 *date_time)\n\n{\n  process_and_initialize_data_00004c84(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",year + 0x76c,month + 1,day,\n               hour,minute,*date_time);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00003378": "print_date_time_00003378",
                "param_1": "date_time",
                "param_1[5]": "year",
                "param_1[4]": "month",
                "param_1[3]": "day",
                "param_1[2]": "hour",
                "param_1[1]": "minute"
            },
            "calling": [
                "FUN_00003444",
                "FUN_000033c0"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_00003378(undefined4 *param_1)\n\n{\n  FUNC_00004c84(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",param_1[5] + 0x76c,param_1[4] + 1,param_1[3],\n               param_1[2],param_1[1],*param_1);\n  return 0;\n}\n\n",
            "additional_data": {
                "FUN_00003378": {
                    "1": "print_date",
                    "2": "print_formatted_date_time",
                    "19": "print_date_time",
                    "7": "print_datetime"
                },
                "param_1": {
                    "1": "datetime_values",
                    "10": "date_time",
                    "9": "date_time_array",
                    "3": "date_time_params",
                    "2": "datetime"
                },
                "param_1[5]": {
                    "27": "year",
                    "1": "second"
                },
                "param_1[4]": {
                    "27": "month",
                    "1": "minute"
                },
                "param_1[3]": {
                    "1": "hour",
                    "28": "day"
                },
                "param_1[2]": {
                    "28": "hour",
                    "1": "day"
                },
                "param_1[1]": {
                    "1": "month",
                    "28": "minute"
                },
                "*param_1": {
                    "1": "year",
                    "28": "second"
                },
                "FUNC_00004c84": {
                    "1": "print_formatted_date_time"
                },
                "param_1[5] + 0x76c": {
                    "1": "year"
                },
                "param_1[4] + 1": {
                    "1": "month"
                }
            }
        },
        "FUN_000033c0": {
            "entrypoint": "0x000033c0",
            "current_name": "check_alarm_status_000033c0",
            "code": "\nbool check_alarm_status_000033c0(void)\n\n{\n  int result;\n  undefined date_time_buffer [36];\n  \n  result = get_alarm_date(date_time_buffer);\n  if (result != 0) {\n    handle_error(\"rtc: error getting alarm\");\n  }\n  else {\n    print_date_time(date_time_buffer);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_000033c0": "check_alarm_status_000033c0",
                "auStack_2c": "date_time_buffer",
                "calculate_date_00002690": "get_alarm_date",
                "iVar1": "result",
                "process_data_00004db8": "handle_error",
                "print_date_time_00003378": "print_date_time"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002690",
                "FUN_00003378"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000033c0": {
                    "7": "check_alarm_status",
                    "1": "check_alarm_and_get_date_time",
                    "3": "get_alarm_status",
                    "2": "get_alarm_or_print_date_time"
                },
                "auStack_2c": {
                    "1": "datetime_buffer",
                    "2": "date_time_array",
                    "5": "date_time",
                    "3": "date_buffer",
                    "15": "date_time_buffer"
                },
                "calculate_date_00002690": {
                    "2": "get_alarm_date"
                },
                "iVar1": {
                    "2": "error",
                    "7": "error_code",
                    "1": "status",
                    "8": "result"
                },
                "process_data_00004db8": {
                    "2": "handle_error"
                },
                "print_date_time_00003378": {
                    "3": "print_date_time",
                    "1": "display_date"
                }
            }
        },
        "FUN_000033f4": {
            "entrypoint": "0x000033f4",
            "current_name": "set_alarm_000033f4",
            "code": "\nundefined4 set_alarm_000033f4(undefined4 input)\n\n{\n  int parse_result;\n  undefined4 return_value;\n  undefined parsed_data [36];\n  \n  parse_result = parse_and_calculate_weekday(input,parsed_data);\n  if (parse_result == 0) {\n    parse_result = update_data(parsed_data,0x31e1,0);\n    if (parse_result == -1) {\n      process_data_00004db8(\"rtc: error setting alarm\");\n      return_value = 1;\n    }\n    else {\n      return_value = 0;\n    }\n  }\n  else {\n    return_value = 1;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_000033f4": "set_alarm_000033f4",
                "param_1": "input",
                "iVar1": "parse_result",
                "uVar2": "return_value",
                "auStack_2c": "parsed_data",
                "parse_and_calculate_weekday_0000328c": "parse_and_calculate_weekday",
                "update_data_00002654": "update_data"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002654",
                "FUN_0000328c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_000033f4(undefined4 param_1)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined auStack_2c [36];\n  \n  iVar1 = parse_and_calculate_weekday_0000328c(param_1,auStack_2c);\n  if (iVar1 == 0) {\n    iVar1 = update_data_00002654(auStack_2c,0x31e1,0);\n    if (iVar1 == -1) {\n      FUNC_00004db8(\"rtc: error setting alarm\");\n      uVar2 = 1;\n    }\n    else {\n      uVar2 = 0;\n    }\n  }\n  else {\n    uVar2 = 1;\n  }\n  return uVar2;\n}\n\n",
            "additional_data": {
                "FUN_000033f4": {
                    "1": "set_alarm_for_weekday",
                    "24": "set_alarm"
                },
                "param_1": {
                    "10": "input",
                    "1": "param",
                    "7": "input_value",
                    "4": "input_data",
                    "3": "weekday",
                    "2": "input_param"
                },
                "iVar1": {
                    "19": "parse_result",
                    "12": "result"
                },
                "uVar2": {
                    "20": "return_value",
                    "1": "result",
                    "6": "status",
                    "2": "success"
                },
                "auStack_2c": {
                    "3": "data_buffer",
                    "1": "stack_data",
                    "12": "parsed_data",
                    "2": "buffer"
                },
                "parse_and_calculate_weekday_0000328c": {
                    "1": "parse_and_calculate_weekday"
                },
                "update_data_00002654": {
                    "1": "update_data"
                },
                "FUNC_00004db8": {
                    "1": "report_error"
                }
            }
        },
        "FUN_00003444": {
            "entrypoint": "0x00003444",
            "current_name": "get_and_print_date_time_00003444",
            "code": "\nbool get_and_print_date_time_00003444(void)\n\n{\n  int error_code;\n  undefined date_time_buffer [36];\n  \n  error_code = calculate_date(date_time_buffer);\n  if (error_code != 0) {\n    handle_error(\"rtc: error getting time\");\n  }\n  else {\n    print_date_time(date_time_buffer);\n  }\n  return error_code != 0;\n}\n\n",
            "renaming": {
                "FUN_00003444": "get_and_print_date_time_00003444",
                "iVar1": "error_code",
                "auStack_2c": "date_time_buffer",
                "calculate_date_00002624": "calculate_date",
                "print_date_time_00003378": "print_date_time",
                "process_data_00004db8": "handle_error"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002624",
                "FUN_00003378"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00003444": {
                    "6": "get_and_print_date_time",
                    "1": "print_date_time_if_valid",
                    "5": "get_date_time_and_print",
                    "2": "get_date_time_from_rtc",
                    "3": "get_date_time"
                },
                "iVar1": {
                    "2": "error",
                    "8": "result",
                    "1": "result_code"
                },
                "auStack_2c": {
                    "3": "date_time",
                    "6": "date_buffer",
                    "1": "datetime",
                    "2": "date_time_data",
                    "14": "date_time_buffer"
                },
                "calculate_date_00002624": {
                    "1": "retrieve_date_time_from_stack",
                    "2": "calculate_date"
                },
                "print_date_time_00003378": {
                    "2": "print_date_time",
                    "1": "display_date_time"
                },
                "process_data_00004db8": {
                    "1": "handle_error"
                }
            }
        },
        "FUN_00003478": {
            "entrypoint": "0x00003478",
            "current_name": "set_time_and_calculate_weekday_00003478",
            "code": "\nundefined4 set_time_and_calculate_weekday_00003478(undefined4 input_time)\n\n{\n  int parse_result;\n  undefined4 return_value;\n  undefined parsed_data [36];\n  \n  parse_result = parse_and_calculate_weekday_0000328c(input_time,parsed_data);\n  if (parse_result == 0) {\n    parse_result = initialize_data_00002600(parsed_data);\n    if (parse_result == -1) {\n      process_data_00004db8(\"rtc: error setting time\");\n      return_value = 1;\n    }\n    else {\n      return_value = 0;\n    }\n  }\n  else {\n    return_value = 1;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00003478": "set_time_and_calculate_weekday_00003478",
                "param_1": "input_time",
                "auStack_2c": "parsed_data",
                "iVar1": "parse_result",
                "uVar2": "return_value"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002600",
                "FUN_0000328c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_00003478(undefined4 param_1)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined auStack_2c [36];\n  \n  iVar1 = parse_and_calculate_weekday_0000328c(param_1,auStack_2c);\n  if (iVar1 == 0) {\n    iVar1 = initialize_data_00002600(auStack_2c);\n    if (iVar1 == -1) {\n      FUNC_00004db8(\"rtc: error setting time\");\n      uVar2 = 1;\n    }\n    else {\n      uVar2 = 0;\n    }\n  }\n  else {\n    uVar2 = 1;\n  }\n  return uVar2;\n}\n\n",
            "additional_data": {
                "FUN_00003478": {
                    "3": "set_time",
                    "1": "set_rtc_time",
                    "2": "calculate_weekday"
                },
                "param_1": {
                    "6": "input",
                    "4": "input_data",
                    "2": "time_data",
                    "3": "input_param",
                    "1": "weekday",
                    "7": "input_time"
                },
                "auStack_2c": {
                    "2": "input_buffer",
                    "1": "parse_buffer",
                    "3": "stack_data",
                    "4": "parsed_time",
                    "7": "parsed_data"
                },
                "iVar1": {
                    "25": "parse_result",
                    "2": "result",
                    "1": "weekday_status"
                },
                "uVar2": {
                    "20": "return_value",
                    "2": "success",
                    "3": "return_code",
                    "1": "error_indicator"
                }
            }
        },
        "FUN_000034c0": {
            "entrypoint": "0x000034c0",
            "current_name": "print_usage_000034c0",
            "code": "\nundefined4 print_usage_000034c0(void)\n\n{\n  process_data_00004db8(\"usage: rtc <command> [arguments]\");\n  process_data_00004db8(\"commands:\");\n  process_data_00004db8(\"\\tpoweron\\t\\tpower the interface on\");\n  process_data_00004db8(\"\\tpoweroff\\tpower the interface off\");\n  process_data_00004db8(\"\\tclearalarm\\tdeactivate the current alarm\");\n  process_data_00004db8(\"\\tgetalarm\\tprint the currently alarm time\");\n  process_data_00004db8(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  process_data_00004db8(\"\\tgettime\\t\\tprint the current time\");\n  process_data_00004db8(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000034c0": "print_usage_000034c0"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_000034c0(void)\n\n{\n  FUNC_00004db8(\"usage: rtc <command> [arguments]\");\n  FUNC_00004db8(\"commands:\");\n  FUNC_00004db8(\"\\tpoweron\\t\\tpower the interface on\");\n  FUNC_00004db8(\"\\tpoweroff\\tpower the interface off\");\n  FUNC_00004db8(\"\\tclearalarm\\tdeactivate the current alarm\");\n  FUNC_00004db8(\"\\tgetalarm\\tprint the currently alarm time\");\n  FUNC_00004db8(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  FUNC_00004db8(\"\\tgettime\\t\\tprint the current time\");\n  FUNC_00004db8(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n",
            "additional_data": {
                "FUN_000034c0": {
                    "21": "print_usage",
                    "8": "print_rtc_usage",
                    "1": "display_usage"
                },
                "FUNC_00004db8": {
                    "1": "print_line",
                    "26": "print_message"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                }
            }
        },
        "FUN_00003524": {
            "entrypoint": "0x00003524",
            "current_name": "handle_command_00003524",
            "code": "\nundefined4 handle_command_00003524(int argc,int argv)\n\n{\n  int comparison_result;\n  undefined4 return_value;\n  \n  if (argc < 2) {\n    print_usage();\n    return_value = 1;\n  }\n  else {\n    comparison_result = compare_bytes(*(undefined4 *)(argv + 4),\"poweron\",7);\n    if (comparison_result == 0) {\n      initialize_flags();\n    }\n    else {\n      comparison_result = compare_bytes(*(undefined4 *)(argv + 4),\"poweroff\",8);\n      if (comparison_result == 0) {\n        clear_interrupt_flag();\n      }\n      else {\n        comparison_result = compare_bytes(*(undefined4 *)(argv + 4),\"clearalarm\",8);\n        if (comparison_result == 0) {\n          clear_flags();\n        }\n        else {\n          comparison_result = compare_bytes(*(undefined4 *)(argv + 4),\"getalarm\",8);\n          if (comparison_result == 0) {\n            check_alarm_status();\n          }\n          else {\n            comparison_result = compare_bytes(*(undefined4 *)(argv + 4),\"setalarm\",8);\n            if ((comparison_result == 0) && (argc == 4)) {\n              set_alarm(argv + 8);\n            }\n            else {\n              comparison_result = compare_bytes(*(undefined4 *)(argv + 4),\"gettime\",7);\n              if (comparison_result == 0) {\n                get_and_print_date_time();\n              }\n              else {\n                comparison_result = compare_bytes(*(undefined4 *)(argv + 4),\"settime\",7);\n                if ((comparison_result != 0) || (argc != 4)) {\n                  process_and_initialize_data(\"unknown command or missing parameters: %s\\n\\n\",\n                               *(undefined4 *)(argv + 4));\n                  print_usage();\n                  return 1;\n                }\n                set_time_and_calculate_weekday(argv + 8);\n              }\n            }\n          }\n        }\n      }\n    }\n    return_value = 0;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00003524": "handle_command_00003524",
                "param_1": "argc",
                "param_2": "argv",
                "print_usage_000034c0": "print_usage",
                "initialize_flags_000026d8": "initialize_flags",
                "clear_interrupt_flag_000026e4": "clear_interrupt_flag",
                "clear_flags_000026c0": "clear_flags",
                "check_alarm_status_000033c0": "check_alarm_status",
                "set_alarm_000033f4": "set_alarm",
                "get_and_print_date_time_00003444": "get_and_print_date_time",
                "set_time_and_calculate_weekday_00003478": "set_time_and_calculate_weekday",
                "process_and_initialize_data_00004c84": "process_and_initialize_data",
                "compare_bytes_00004e66": "compare_bytes",
                "iVar1": "comparison_result",
                "uVar2": "return_value"
            },
            "calling": [],
            "called": [
                "FUN_000034c0",
                "FUN_000033f4",
                "FUN_00003478",
                "FUN_00003444",
                "FUN_00004e66",
                "FUN_00004c84",
                "FUN_000026d8",
                "FUN_000026e4",
                "FUN_000033c0",
                "FUN_000026c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00003524": {
                    "3": "execute_command",
                    "1": "manage_command",
                    "19": "handle_command",
                    "6": "process_command"
                },
                "param_1": {
                    "2": "command_count",
                    "13": "argc",
                    "6": "num_params",
                    "9": "num_args",
                    "1": "command_length"
                },
                "param_2": {
                    "1": "command_data",
                    "6": "args",
                    "2": "command_buffer",
                    "13": "argv",
                    "4": "command"
                },
                "print_usage_000034c0": {
                    "5": "print_usage",
                    "2": "print_command_usage"
                },
                "initialize_flags_000026d8": {
                    "7": "initialize_flags"
                },
                "clear_interrupt_flag_000026e4": {
                    "7": "clear_interrupt_flag"
                },
                "clear_flags_000026c0": {
                    "7": "clear_flags"
                },
                "check_alarm_status_000033c0": {
                    "7": "check_alarm_status"
                },
                "set_alarm_000033f4": {
                    "7": "set_alarm"
                },
                "get_and_print_date_time_00003444": {
                    "7": "get_and_print_date_time"
                },
                "set_time_and_calculate_weekday_00003478": {
                    "7": "set_time_and_calculate_weekday"
                },
                "process_and_initialize_data_00004c84": {
                    "7": "process_and_initialize_data"
                },
                "compare_bytes_00004e66": {
                    "1": "compare_command_bytes",
                    "5": "compare_bytes"
                },
                "iVar1": {
                    "14": "comparison_result",
                    "5": "result",
                    "1": "cmp_result",
                    "7": "compare_result"
                },
                "uVar2": {
                    "16": "return_value",
                    "1": "success",
                    "3": "status",
                    "2": "result"
                }
            }
        },
        "FUN_00003658": {
            "entrypoint": "0x00003658",
            "current_name": "infinite_loop_00003658",
            "code": "\nvoid infinite_loop_00003658(void)\n\n{\n  sync_barrier(0xf);\n  sync_barrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00003658": "infinite_loop_00003658",
                "DataSynchronizationBarrier": "sync_barrier"
            },
            "calling": [
                "FUN_00003688"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00003658": {
                    "1": "loop_forever",
                    "7": "run_infinite_loop",
                    "2": "wait_forever",
                    "4": "continuous_loop",
                    "3": "endless_loop"
                },
                "DataSynchronizationBarrier": {
                    "18": "sync_barrier",
                    "4": "synchronize_data",
                    "1": "execute_sync_barrier"
                },
                "0xf": {
                    "1": "sync_value"
                }
            }
        },
        "FUN_00003688": {
            "entrypoint": "0x00003688",
            "current_name": "execute_infinite_loop_00003688",
            "code": "\nvoid execute_infinite_loop_00003688(void)\n\n{\n  infinite_loop();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003688": "execute_infinite_loop_00003688",
                "infinite_loop_00003658": "infinite_loop"
            },
            "calling": [
                "FUN_00002e9c"
            ],
            "called": [
                "FUN_00003658"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00003688": {
                    "3": "initialize_infinite_loop",
                    "20": "execute_infinite_loop",
                    "1": "call_infinite_loop",
                    "7": "run_infinite_loop"
                },
                "infinite_loop_00003658": {
                    "2": "start_infinite_loop",
                    "20": "infinite_loop",
                    "1": "execute_infinite_loop_256",
                    "6": "run_infinite_loop"
                },
                "<No changes to parameters>": {
                    "1": ""
                },
                "<No changes to variables>": {
                    "1": ""
                }
            }
        },
        "FUN_00003694": {
            "entrypoint": "0x00003694",
            "current_name": "display_data_object_00003694",
            "code": "\nvoid display_data_object_00003694(int data_object,byte data_size)\n\n{\n  undefined4 memory_address;\n  char flag;\n  uint bit_mask;\n  bool is_bit_set;\n  undefined format_buffer [8];\n  int format_length;\n  char mapped_value;\n  byte index;\n  \n  if ((data_object == 0) || (3 < data_size)) {\n    process_data_00004db8(\"Unable to display data object\");\n  }\n  else {\n    process_and_initialize_data_00004c84(\"Data:\");\n    for (index = 0; index < data_size; index = index + 1) {\n      if (*(byte *)(data_object + 6) < 0x14) {\n        bit_mask = 1 << (uint)*(byte *)(data_object + 6) & 0x8018f;\n        is_bit_set = bit_mask != 0;\n        if (is_bit_set) {\n          bit_mask = 1;\n        }\n        flag = (char)bit_mask;\n        if (!is_bit_set) {\n          flag = '\\0';\n        }\n        if (flag == '\\0') goto LAB_000036ee;\n        mapped_value = '\\0';\n      }\n      else {\nLAB_000036ee:\n        mapped_value = map_param_to_value_00003918((int)*(char *)(data_object + 7));\n      }\n      process_and_initialize_data_00004c84(&DAT_000077bc);\n      if (data_size < 2) {\n        process_and_initialize_data_00004c84(\"     \");\n      }\n      else {\n        process_and_initialize_data_00004c84(\"[%u] \",index);\n      }\n      if (mapped_value == '\\0') {\n        if (*(char *)(data_object + 7) == '\\0') {\n          process_and_initialize_data_00004c84(&DAT_000077d8,(int)*(short *)(data_object + (uint)index * 2));\n        }\n        else if ((*(char *)(data_object + 7) + 4 < 0 == SCARRY4((int)*(char *)(data_object + 7),4)) &&\n                (*(char *)(data_object + 7) < '\\0')) {\n          format_length = format_and_return_number_00003e9e(format_buffer,(int)*(short *)(data_object + (uint)index * 2),\n                                  (int)*(char *)(data_object + 7));\n          format_buffer[format_length] = 0;\n          process_and_initialize_data_00004c84(&DAT_000077dc,format_buffer);\n        }\n        else {\n          process_and_initialize_data_00004c84(\"%iE%i\",(int)*(short *)(data_object + (uint)index * 2),\n                       (int)*(char *)(data_object + 7));\n        }\n      }\n      else {\n        process_and_initialize_data_00004c84(\"%6d %c\",(int)*(short *)(data_object + (uint)index * 2),mapped_value);\n      }\n      memory_address = get_memory_address_00003810(*(undefined *)(data_object + 6));\n      process_and_initialize_data_00004c84(&DAT_000077e8,memory_address);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003694": "display_data_object_00003694",
                "param_1": "data_object",
                "param_2": "data_size",
                "auStack_18": "format_buffer",
                "local_10": "format_length",
                "local_a": "mapped_value",
                "local_9": "index",
                "uVar1": "memory_address",
                "cVar2": "flag",
                "uVar3": "bit_mask",
                "bVar4": "is_bit_set"
            },
            "calling": [
                "FUN_00002ecc",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00003e9e",
                "FUN_00003918",
                "FUN_00003810",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00003694": {
                    "5": "display_data",
                    "19": "display_data_object",
                    "1": "display_data_information",
                    "6": "display_data_objects"
                },
                "param_1": {
                    "2": "data_object_pointer",
                    "16": "data_object",
                    "1": "data_ptr",
                    "5": "data_object_address"
                },
                "param_2": {
                    "2": "data_length",
                    "9": "data_size",
                    "6": "num_elements",
                    "5": "data_object_size",
                    "1": "num_data_objects",
                    "3": "data_object_length"
                },
                "auStack_18": {
                    "5": "formatted_number",
                    "1": "output_buffer",
                    "7": "format_buffer",
                    "2": "buffer",
                    "4": "formatted_data"
                },
                "local_10": {
                    "1": "formatted_data_size",
                    "2": "buffer_index",
                    "4": "buffer_length",
                    "5": "format_length",
                    "3": "formatted_data_length"
                },
                "local_a": {
                    "2": "mapped_char",
                    "1": "value_char",
                    "5": "value",
                    "16": "mapped_value"
                },
                "local_9": {
                    "1": "loop_variable",
                    "3": "element_index",
                    "2": "byte_index",
                    "15": "index",
                    "4": "current_index"
                },
                "uVar1": {
                    "5": "address",
                    "22": "memory_address",
                    "1": "address_value"
                },
                "cVar2": {
                    "14": "flag",
                    "1": "is_bit_set",
                    "6": "bit_value",
                    "2": "flag_char"
                },
                "uVar3": {
                    "1": "bit_value",
                    "26": "bit_mask"
                },
                "bVar4": {
                    "1": "bit_flag",
                    "2": "is_flag_set",
                    "14": "is_bit_set",
                    "12": "is_set"
                }
            }
        },
        "FUN_00003810": {
            "entrypoint": "0x00003810",
            "current_name": "get_memory_address_00003810",
            "code": "\nundefined * get_memory_address_00003810(undefined input)\n\n{\n  undefined *memory_address;\n  \n  switch(input) {\n  case 2:\n    memory_address = &DAT_000077ec;\n    break;\n  case 3:\n    memory_address = &DAT_000077f0;\n    break;\n  case 4:\n    memory_address = &DAT_000077f4;\n    break;\n  case 5:\n    memory_address = &DAT_000077f8;\n    break;\n  case 6:\n    memory_address = &DAT_000077fc;\n    break;\n  case 7:\n    memory_address = (undefined *)0x7800;\n    break;\n  case 8:\n    memory_address = &DAT_00007804;\n    break;\n  case 9:\n    memory_address = &DAT_00007808;\n    break;\n  case 10:\n    memory_address = &DAT_0000780c;\n    break;\n  case 0xb:\n    memory_address = &DAT_00007810;\n    break;\n  case 0xc:\n    memory_address = &DAT_00007814;\n    break;\n  case 0xd:\n    memory_address = &DAT_00007818;\n    break;\n  case 0xe:\n    memory_address = &DAT_0000781c;\n    break;\n  case 0xf:\n    memory_address = &DAT_00007820;\n    break;\n  case 0x10:\n    memory_address = &DAT_00007824;\n    break;\n  case 0x11:\n    memory_address = &DAT_0000782c;\n    break;\n  default:\n    memory_address = &DAT_00007834;\n    break;\n  case 0x13:\n    memory_address = &DAT_00007830;\n    break;\n  case 0x15:\n    memory_address = &DAT_00007828;\n  }\n  return memory_address;\n}\n\n",
            "renaming": {
                "FUN_00003810": "get_memory_address_00003810",
                "param_1": "input",
                "puVar1": "memory_address"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00003810": {
                    "1": "map_param_to_address",
                    "4": "get_memory_location",
                    "19": "get_memory_address"
                },
                "param_1": {
                    "11": "input",
                    "1": "param",
                    "9": "input_value",
                    "6": "value"
                },
                "puVar1": {
                    "6": "address",
                    "1": "result_pointer",
                    "2": "data_pointer",
                    "3": "memory_location",
                    "11": "memory_address",
                    "5": "result"
                }
            }
        },
        "FUN_00003918": {
            "entrypoint": "0x00003918",
            "current_name": "map_param_to_value_00003918",
            "code": "\nundefined4 map_param_to_value_00003918(undefined input)\n\n{\n  undefined4 mapped_value;\n  \n  switch(input) {\n  case 2:\n    mapped_value = 0x68;\n    break;\n  case 3:\n    mapped_value = 0x6b;\n    break;\n  case 6:\n    mapped_value = 0x4d;\n    break;\n  case 9:\n    mapped_value = 0x47;\n    break;\n  case 0xc:\n    mapped_value = 0x54;\n    break;\n  case 0xf:\n    mapped_value = 0x50;\n    break;\n  case 0xf1:\n    mapped_value = 0x66;\n    break;\n  default:\n    mapped_value = 0;\n    break;\n  case 0xf4:\n    mapped_value = 0x70;\n    break;\n  case 0xf7:\n    mapped_value = 0x6e;\n    break;\n  case 0xfa:\n    mapped_value = 0x75;\n    break;\n  case 0xfd:\n    mapped_value = 0x6d;\n  }\n  return mapped_value;\n}\n\n",
            "renaming": {
                "FUN_00003918": "map_param_to_value_00003918",
                "param_1": "input",
                "uVar1": "mapped_value"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00003918": {
                    "3": "get_translated_value",
                    "1": "convert_param_to_value",
                    "10": "map_param_to_value",
                    "2": "map_input_to_value"
                },
                "param_1": {
                    "8": "input",
                    "2": "value",
                    "1": "input_param",
                    "7": "input_value",
                    "3": "parameter",
                    "6": "param"
                },
                "uVar1": {
                    "1": "value",
                    "2": "character",
                    "12": "mapped_value",
                    "5": "result",
                    "3": "output"
                },
                "0x68": {
                    "1": "character_a"
                },
                "0x6b": {
                    "1": "character_b"
                },
                "0x4d": {
                    "1": "character_c"
                },
                "0x47": {
                    "1": "character_d"
                },
                "0x54": {
                    "1": "character_e"
                },
                "0x50": {
                    "1": "character_f"
                },
                "0x66": {
                    "1": "character_g"
                },
                "0xf4": {
                    "1": "character_h"
                },
                "0x70": {
                    "1": "character_i"
                },
                "0x6e": {
                    "1": "character_j"
                },
                "0x75": {
                    "1": "character_k"
                },
                "0x6d": {
                    "1": "character_l"
                }
            }
        },
        "FUN_000039e8": {
            "entrypoint": "0x000039e8",
            "current_name": "get_class_name_000039e8",
            "code": "\nchar * get_class_name_000039e8(char class_code)\n\n{\n  char *class_name;\n  \n  switch(class_code) {\n  case '\\0':\n    class_name = \"CLASS_UNDEF\";\n    break;\n  case '@':\n    class_name = \"ACT_ANY\";\n    break;\n  case 'B':\n    class_name = \"ACT_LED_RGB\";\n    break;\n  case 'C':\n    class_name = \"ACT_SERVO\";\n    break;\n  case 'D':\n    class_name = \"ACT_MOTOR\";\n    break;\n  case 'E':\n    class_name = \"ACT_SWITCH\";\n    break;\n  case 'F':\n    class_name = \"ACT_DIMMER\";\n    break;\n  case -0x80:\n    class_name = \"SENSE_ANY\";\n    break;\n  case -0x7f:\n    class_name = \"SENSE_BTN\";\n    break;\n  case -0x7e:\n    class_name = \"SENSE_TEMP\";\n    break;\n  case -0x7d:\n    class_name = \"SENSE_HUM\";\n    break;\n  case -0x7c:\n    class_name = \"SENSE_LIGHT\";\n    break;\n  case -0x7b:\n    class_name = \"SENSE_ACCEL\";\n    break;\n  case -0x7a:\n    class_name = \"SENSE_MAG\";\n    break;\n  case -0x79:\n    class_name = \"SENSE_GYRO\";\n    break;\n  case -0x78:\n    class_name = \"SENSE_COLOR\";\n    break;\n  case -0x77:\n    class_name = \"SENSE_PRESS\";\n    break;\n  case -0x76:\n    class_name = \"SENSE_ANALOG\";\n    break;\n  case -0x75:\n    class_name = \"SENSE_UV\";\n    break;\n  case -0x74:\n    class_name = \"SENSE_OBJTEMP\";\n    break;\n  case -0x73:\n    class_name = \"SENSE_PULSE_COUNT\";\n    break;\n  case -0x72:\n    class_name = \"SENSE_DISTANCE\";\n    break;\n  case -0x71:\n    class_name = \"SENSE_CO2\";\n    break;\n  default:\n    if (class_code == -1) {\n      return \"CLASS_ANY\";\n    }\n  case '\\x01':\n  case '\\x02':\n  case '\\x03':\n  case '\\x04':\n  case '\\x05':\n  case '\\x06':\n  case '\\a':\n  case '\\b':\n  case '\\t':\n  case '\\n':\n  case '\\v':\n  case '\\f':\n  case '\\r':\n  case '\\x0e':\n  case '\\x0f':\n  case '\\x10':\n  case '\\x11':\n  case '\\x12':\n  case '\\x13':\n  case '\\x14':\n  case '\\x15':\n  case '\\x16':\n  case '\\x17':\n  case '\\x18':\n  case '\\x19':\n  case '\\x1a':\n  case '\\x1b':\n  case '\\x1c':\n  case '\\x1d':\n  case '\\x1e':\n  case '\\x1f':\n  case ' ':\n  case '!':\n  case '\\\"':\n  case '#':\n  case '$':\n  case '%':\n  case '&':\n  case '\\'':\n  case '(':\n  case ')':\n  case '*':\n  case '+':\n  case ',':\n  case '-':\n  case '.':\n  case '/':\n  case '0':\n  case '1':\n  case '2':\n  case '3':\n  case '4':\n  case '5':\n  case '6':\n  case '7':\n  case '8':\n  case '9':\n  case ':':\n  case ';':\n  case '<':\n  case '=':\n  case '>':\n  case '?':\n  case 'A':\n  case 'G':\n  case 'H':\n  case 'I':\n  case 'J':\n  case 'K':\n  case 'L':\n  case 'M':\n  case 'N':\n  case 'O':\n  case 'P':\n  case 'Q':\n  case 'R':\n  case 'S':\n  case 'T':\n  case 'U':\n  case 'V':\n  case 'W':\n  case 'X':\n  case 'Y':\n  case 'Z':\n  case '[':\n  case '\\':\n  case ']':\n  case '^':\n  case '_':\n  case '`':\n  case 'a':\n  case 'b':\n  case 'c':\n  case 'd':\n  case 'e':\n  case 'f':\n  case 'g':\n  case 'h':\n  case 'i':\n  case 'j':\n  case 'k':\n  case 'l':\n  case 'm':\n  case 'n':\n  case 'o':\n  case 'p':\n  case 'q':\n  case 'r':\n  case 's':\n  case 't':\n  case 'u':\n  case 'v':\n  case 'w':\n  case 'x':\n  case 'y':\n  case 'z':\n  case '{':\n  case '|':\n  case '}':\n  case '~':\n  case '\\x7f':\n    class_name = \"CLASS_UNKNOWN\";\n  }\n  return class_name;\n}\n\n",
            "renaming": {
                "FUN_000039e8": "get_class_name_000039e8",
                "param_1": "class_code",
                "pcVar1": "class_name"
            },
            "calling": [
                "FUN_00002f74",
                "FUN_00002ecc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000039e8": {
                    "9": "get_class_name",
                    "1": "get_description_from_code",
                    "3": "get_sensor_or_action_name"
                },
                "param_1": {
                    "2": "device_type",
                    "1": "device_class",
                    "8": "class_code",
                    "4": "input_char",
                    "3": "class_id"
                },
                "pcVar1": {
                    "10": "class_name",
                    "1": "class_string",
                    "6": "description",
                    "3": "name"
                }
            }
        },
        "FUN_00003d24": {
            "entrypoint": "0x00003d24",
            "current_name": "find_nth_element_00003d24",
            "code": "\nundefined4 * find_nth_element_00003d24(int n)\n\n{\n  int count;\n  undefined4 *current_element;\n  \n  count = 0;\n  for (current_element = DAT_1fff0db0; (count < n && (current_element != (undefined4 *)0x0));\n      current_element = (undefined4 *)*current_element) {\n    count = count + 1;\n  }\n  return current_element;\n}\n\n",
            "renaming": {
                "FUN_00003d24": "find_nth_element_00003d24",
                "param_1": "n",
                "local_10": "count",
                "local_c": "current_element"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00003d24": {
                    "14": "find_nth_element",
                    "2": "find_element_by_index",
                    "8": "find_element",
                    "1": "find_first_occurrence"
                },
                "param_1": {
                    "2": "element_count",
                    "4": "target_index",
                    "14": "n",
                    "1": "limit",
                    "3": "index"
                },
                "local_10": {
                    "18": "count",
                    "7": "counter",
                    "1": "found_count",
                    "4": "current_index"
                },
                "local_c": {
                    "1": "ptr",
                    "25": "current_element",
                    "2": "current_ptr"
                }
            }
        },
        "FUN_00003d64": {
            "entrypoint": "0x00003d64",
            "current_name": "execute_function_00003d64",
            "code": "\nundefined4 execute_function_00003d64(int function_pointer,undefined4 param)\n\n{\n  undefined4 return_value;\n  \n  if (function_pointer == 0) {\n    return_value = 0xffffffed;\n  }\n  else {\n    return_value = (***(code ***)(function_pointer + 0xc))(*(undefined4 *)(function_pointer + 4),param);\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00003d64": "execute_function_00003d64",
                "param_1": "function_pointer",
                "param_2": "param",
                "uVar1": "return_value"
            },
            "calling": [
                "FUN_00002ecc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00003d64": {
                    "1": "process_function_result",
                    "21": "execute_function",
                    "2": "perform_operation"
                },
                "param_1": {
                    "5": "function_ptr",
                    "1": "input_param",
                    "18": "function_pointer"
                },
                "param_2": {
                    "2": "input_param",
                    "5": "argument",
                    "1": "input_data",
                    "3": "arg",
                    "8": "param"
                },
                "uVar1": {
                    "15": "result",
                    "16": "return_value"
                }
            }
        },
        "FUN_00003d94": {
            "entrypoint": "0x00003d94",
            "current_name": "execute_function_00003d94",
            "code": "\nundefined4 execute_function_00003d94(int function_pointer,undefined4 param)\n\n{\n  undefined4 result;\n  \n  if (function_pointer == 0) {\n    result = 0xffffffed;\n  }\n  else {\n    result = (**(code **)(*(int *)(function_pointer + 0xc) + 4))(*(undefined4 *)(function_pointer + 4),param);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003d94": "execute_function_00003d94",
                "param_1": "function_pointer",
                "param_2": "param",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00003d94": {
                    "1": "execute_code",
                    "25": "execute_function"
                },
                "param_1": {
                    "4": "input",
                    "1": "input_param",
                    "10": "function_pointer",
                    "5": "input_value",
                    "8": "function_ptr"
                },
                "param_2": {
                    "1": "arg2",
                    "4": "arg",
                    "2": "input_param",
                    "3": "parameter",
                    "6": "param"
                },
                "uVar1": {
                    "16": "result",
                    "15": "return_value"
                }
            }
        },
        "FUN_00003dc4": {
            "entrypoint": "0x00003dc4",
            "current_name": "count_digits_00003dc4",
            "code": "\nint count_digits_00003dc4(int offset,uint number)\n\n{\n  uint remainder;\n  char *current_digit;\n  uint base;\n  int digit_count;\n  \n  digit_count = 1;\n  if (number < 1000000000) {\n    for (base = 10; base <= number; base = base * 10) {\n      digit_count = digit_count + 1;\n    }\n  }\n  else {\n    digit_count = 10;\n  }\n  if (offset != 0) {\n    current_digit = (char *)(digit_count + offset);\n    remainder = number;\n    do {\n      current_digit = current_digit + -1;\n      *current_digit = (char)(remainder % 10) + '0';\n      remainder = remainder / 10;\n    } while (remainder != 0);\n  }\n  return digit_count;\n}\n\n",
            "renaming": {
                "FUN_00003dc4": "count_digits_00003dc4",
                "param_1": "offset",
                "param_2": "number",
                "local_20": "remainder",
                "local_14": "current_digit",
                "local_10": "base",
                "local_c": "digit_count"
            },
            "calling": [
                "FUN_00003e58"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00003dc4": {
                    "1": "calculate_digits_count",
                    "20": "count_digits",
                    "3": "get_num_digits"
                },
                "param_1": {
                    "4": "base_address",
                    "2": "str_buffer",
                    "1": "start_address",
                    "3": "input_offset",
                    "5": "output_buffer"
                },
                "param_2": {
                    "1": "num",
                    "27": "number"
                },
                "local_20": {
                    "1": "remaining_number",
                    "19": "remainder",
                    "7": "temp_number"
                },
                "local_14": {
                    "1": "output_buffer",
                    "10": "current_digit",
                    "3": "str_ptr",
                    "4": "current_position",
                    "2": "digits"
                },
                "local_10": {
                    "1": "scaling_factor",
                    "2": "current_power",
                    "7": "base",
                    "3": "factor",
                    "5": "multiplier"
                },
                "local_c": {
                    "8": "num_digits",
                    "22": "digit_count",
                    "1": "result"
                }
            }
        },
        "FUN_00003e58": {
            "entrypoint": "0x00003e58",
            "current_name": "count_digits_and_sign_00003e58",
            "code": "\nint count_digits_and_sign_00003e58(undefined *input_string,int number)\n\n{\n  int digit_count;\n  int abs_number;\n  undefined *modified_string_ptr;\n  \n  abs_number = number;\n  modified_string_ptr = input_string;\n  if (-(number >> 0x1f) != 0) {\n    if (input_string != (undefined *)0x0) {\n      modified_string_ptr = input_string + 1;\n      *input_string = 0x2d;\n    }\n    abs_number = -number;\n  }\n  digit_count = count_digits(modified_string_ptr,abs_number);\n  return -(number >> 0x1f) + digit_count;\n}\n\n",
            "renaming": {
                "FUN_00003e58": "count_digits_and_sign_00003e58",
                "param_1": "input_string",
                "param_2": "number",
                "iVar1": "digit_count",
                "local_18": "abs_number",
                "local_14": "modified_string_ptr",
                "count_digits_00003dc4": "count_digits"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_00003dc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00003e58": {
                    "3": "calculate_digit_count",
                    "1": "count_and_sign",
                    "8": "count_digits_and_sign",
                    "2": "count_digits_and_negate",
                    "4": "count_digits_with_sign"
                },
                "param_1": {
                    "1": "digits_array",
                    "9": "input_string",
                    "3": "string",
                    "5": "str",
                    "2": "input_array",
                    "4": "string_ptr"
                },
                "param_2": {
                    "2": "input_num",
                    "1": "integer_value",
                    "3": "input_number",
                    "7": "num",
                    "18": "number"
                },
                "iVar1": {
                    "1": "num_digits",
                    "16": "digit_count"
                },
                "local_18": {
                    "8": "absolute_value",
                    "5": "absolute_number",
                    "1": "negated_number",
                    "2": "absolute_num",
                    "6": "abs_num"
                },
                "local_14": {
                    "2": "updated_string",
                    "1": "current_digit_pointer",
                    "3": "modified_string_ptr"
                },
                "count_digits_00003dc4": {
                    "3": "count_digits"
                }
            }
        },
        "FUN_00003e9e": {
            "entrypoint": "0x00003e9e",
            "current_name": "format_and_return_number_00003e9e",
            "code": "\nundefined4 format_and_return_number_00003e9e(undefined4 input_number,short input_short,undefined4 format_option)\n\n{\n  undefined4 formatted_number;\n  \n  formatted_number = format_number_00003ec4(input_number,(int)input_short,format_option);\n  return formatted_number;\n}\n\n",
            "renaming": {
                "FUN_00003e9e": "format_and_return_number_00003e9e",
                "param_1": "input_number",
                "param_2": "input_short",
                "param_3": "format_option",
                "uVar1": "formatted_number"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [
                "FUN_00003ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00003e9e": {
                    "29": "format_and_return_number",
                    "2": "format_number"
                },
                "param_1": {
                    "7": "input",
                    "1": "input1",
                    "9": "input_value",
                    "10": "input_number"
                },
                "param_2": {
                    "1": "num",
                    "6": "input_short",
                    "5": "number",
                    "2": "number_value"
                },
                "param_3": {
                    "1": "format_flag",
                    "3": "input_format",
                    "8": "format_option",
                    "5": "format",
                    "2": "flags"
                },
                "uVar1": {
                    "5": "result",
                    "11": "formatted_number"
                }
            }
        },
        "FUN_00003ec4": {
            "entrypoint": "0x00003ec4",
            "current_name": "format_number_00003ec4",
            "code": "\nint format_number_00003ec4(undefined *output_buffer,uint number,int decimal_places)\n\n{\n  int digit_count;\n  undefined4 digits_after_decimal;\n  uint quotient;\n  int remainder;\n  int total_digits;\n  \n  if (decimal_places + 7 < 0 != SCARRY4(decimal_places,7)) {\n    handle_kernel_panic_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  total_digits = 0;\n  if (decimal_places == 0) {\n    total_digits = count_digits_and_sign_00003e58(output_buffer,number);\n  }\n  else if (decimal_places < 1) {\n    quotient = number / *(uint *)(&DAT_00007978 + decimal_places * -4);\n    remainder = number - *(uint *)(&DAT_00007978 + decimal_places * -4) * quotient;\n    if (remainder < 0) {\n      remainder = -remainder;\n    }\n    if ((quotient == 0) && ((int)number < 0)) {\n      if (output_buffer != (undefined *)0x0) {\n        *output_buffer = 0x2d;\n      }\n      total_digits = 1;\n    }\n    if (output_buffer == (undefined *)0x0) {\n      digit_count = count_digits_and_sign_00003e58(0,quotient);\n      total_digits = digit_count + 1 + total_digits;\n    }\n    else {\n      digit_count = count_digits_and_sign_00003e58(output_buffer + total_digits,quotient);\n      digit_count = total_digits + digit_count;\n      total_digits = digit_count + 1;\n      output_buffer[digit_count] = 0x2e;\n      digits_after_decimal = count_digits_and_sign_00003e58(output_buffer + total_digits,remainder);\n      copy_and_fill_memory_00003ff4(output_buffer + total_digits,digits_after_decimal,-decimal_places,0x30);\n    }\n    total_digits = -decimal_places + total_digits;\n  }\n  else {\n    total_digits = count_digits_and_sign_00003e58(output_buffer,number);\n    if (output_buffer != (undefined *)0x0) {\n      fill_memory_00004622(output_buffer + total_digits,0x30,decimal_places);\n    }\n    total_digits = decimal_places + total_digits;\n  }\n  return total_digits;\n}\n\n",
            "renaming": {
                "FUN_00003ec4": "format_number_00003ec4",
                "param_1": "output_buffer",
                "param_2": "number",
                "param_3": "decimal_places",
                "local_c": "total_digits",
                "local_10": "remainder",
                "iVar1": "digit_count",
                "uVar2": "digits_after_decimal",
                "uVar3": "quotient"
            },
            "calling": [
                "FUN_00003e9e"
            ],
            "called": [
                "FUN_00003e58",
                "FUN_00004622",
                "FUN_00000f04",
                "FUN_00003ff4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00003ec4": {
                    "1": "extract_decimal",
                    "2": "format_number_as_string",
                    "14": "format_number",
                    "3": "format_and_count_digits"
                },
                "param_1": {
                    "1": "buffer",
                    "10": "output_string",
                    "3": "output",
                    "16": "output_buffer"
                },
                "param_2": {
                    "2": "input_integer",
                    "6": "value",
                    "5": "input_number",
                    "16": "number"
                },
                "param_3": {
                    "1": "number_of_digits",
                    "10": "precision",
                    "4": "num_digits",
                    "14": "decimal_places"
                },
                "local_c": {
                    "1": "number_of_digits",
                    "9": "total_digits",
                    "2": "length",
                    "3": "total_length",
                    "5": "output_length"
                },
                "local_10": {
                    "1": "fractional_part",
                    "29": "remainder"
                },
                "iVar1": {
                    "1": "temp_var",
                    "4": "count",
                    "2": "digits",
                    "12": "digit_count"
                },
                "uVar2": {
                    "1": "num_decimal_digits",
                    "2": "digits_count",
                    "3": "decimal_count"
                },
                "uVar3": {
                    "1": "integer_part",
                    "10": "divisor",
                    "14": "quotient"
                }
            }
        },
        "FUN_00003ff4": {
            "entrypoint": "0x00003ff4",
            "current_name": "copy_and_fill_memory_00003ff4",
            "code": "\nuint copy_and_fill_memory_00003ff4(int length,uint src_offset,uint source_end,undefined fill_value)\n\n{\n  uint result;\n  \n  result = src_offset;\n  if ((src_offset < source_end) && (result = source_end, length != 0)) {\n    copy_and_reverse_000045ee((source_end - src_offset) + length,length,src_offset);\n    fill_memory_00004622(length,fill_value,source_end - src_offset);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003ff4": "copy_and_fill_memory_00003ff4",
                "param_1": "length",
                "param_2": "src_offset",
                "param_3": "source_end",
                "param_4": "fill_value",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_000045ee",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00003ff4": {
                    "1": "copy_and_reverse",
                    "3": "copy_and_reverse_memory",
                    "23": "copy_and_fill_memory"
                },
                "param_1": {
                    "1": "src_index",
                    "2": "destination_size",
                    "6": "offset",
                    "4": "source_offset",
                    "7": "length"
                },
                "param_2": {
                    "3": "source_size",
                    "1": "start",
                    "2": "source_offset",
                    "6": "src_offset",
                    "5": "source_start"
                },
                "param_3": {
                    "3": "dst_offset",
                    "1": "end",
                    "5": "source_end",
                    "2": "dest_size"
                },
                "param_4": {
                    "17": "fill_value",
                    "11": "value",
                    "2": "fill_byte",
                    "1": "value_to_fill"
                },
                "uVar1": {
                    "1": "final_offset",
                    "6": "result"
                }
            }
        },
        "FUN_00004042": {
            "entrypoint": "0x00004042",
            "current_name": "parse_and_validate_integer_00004042",
            "code": "\nvoid parse_and_validate_integer_00004042(undefined4 input)\n\n{\n  parse_integer(input,0,10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004042": "parse_and_validate_integer_00004042",
                "param_1": "input",
                "parse_integer_00004f84": "parse_integer"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004042": {
                    "1": "parse_integer_from_binary",
                    "7": "parse_integer",
                    "2": "parse_and_process_integer",
                    "6": "parse_and_print_integer",
                    "9": "parse_and_validate_integer"
                },
                "param_1": {
                    "14": "input",
                    "1": "integer_string",
                    "7": "input_value",
                    "2": "input_integer",
                    "3": "input_number"
                },
                "parse_integer_00004f84": {
                    "1": "parse_input_number",
                    "3": "parse_integer_range",
                    "9": "parse_integer"
                },
                "0": {
                    "1": "start_base",
                    "2": "min_value"
                },
                "10": {
                    "1": "end_range",
                    "2": "end"
                },
                "param_2": {
                    "1": "start"
                },
                "param_3": {
                    "1": "end"
                }
            }
        },
        "FUN_0000404c": {
            "entrypoint": "0x0000404c",
            "current_name": "process_data_0000404c",
            "code": "\nundefined4 process_data_0000404c(uint *data_ptr,int *info_ptr)\n\n{\n  int result;\n  int *temp_ptr;\n  uint value;\n  ushort flags;\n  int increment;\n  code *function_ptr;\n  int count;\n  uint temp;\n  bool is_zero;\n  \n  flags = *(ushort *)(info_ptr + 3);\n  value = (uint)flags;\n  if ((int)(value << 0x1c) < 0) {\n    result = info_ptr[4];\n    if (result != 0) {\n      increment = value << 0x1e;\n      is_zero = increment == 0;\n      count = *info_ptr;\n      if (is_zero) {\n        increment = info_ptr[5];\n      }\n      *info_ptr = result;\n      if (!is_zero) {\n        increment = 0;\n      }\n      info_ptr[2] = increment;\n      for (count = count - result; 0 < count; count = count - increment) {\n        increment = (*(code *)info_ptr[10])(data_ptr,info_ptr[8],result,count);\n        if (increment < 1) {\n          *(ushort *)(info_ptr + 3) = *(ushort *)(info_ptr + 3) | 0x40;\n          return 0xffffffff;\n        }\n        result = result + increment;\n      }\n    }\n  }\n  else {\n    if ((info_ptr[1] < 1) && (info_ptr[0x10] < 1)) {\n      return 0;\n    }\n    function_ptr = (code *)info_ptr[0xb];\n    if (function_ptr == (code *)0x0) {\n      return 0;\n    }\n    temp = *data_ptr;\n    *data_ptr = 0;\n    if ((flags & 0x1000) == 0) {\n      result = (*function_ptr)(data_ptr,info_ptr[8],value & 0x1000,1);\n      if ((result == -1) && (value = *data_ptr, value != 0)) {\n        if ((value == 0x1d) || (value == 0x16)) {\n          *data_ptr = temp;\n          return 0;\n        }\n        flags = *(ushort *)(info_ptr + 3);\n        goto LAB_00004104;\n      }\n    }\n    else {\n      result = info_ptr[0x15];\n    }\n    if (((int)((uint)*(ushort *)(info_ptr + 3) << 0x1d) < 0) &&\n       (result = result - info_ptr[1], info_ptr[0xd] != 0)) {\n      result = result - info_ptr[0x10];\n    }\n    result = (*(code *)info_ptr[0xb])(data_ptr,info_ptr[8],result,0);\n    flags = *(ushort *)(info_ptr + 3);\n    if ((result == -1) &&\n       ((0x1d < *data_ptr || (-1 < (int)((0x20400001U >> (*data_ptr & 0xff)) << 0x1f))))) {\nLAB_00004104:\n      *(ushort *)(info_ptr + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n    info_ptr[1] = 0;\n    *info_ptr = info_ptr[4];\n    if (((int)((uint)flags << 0x13) < 0) && ((result != -1 || (*data_ptr == 0)))) {\n      info_ptr[0x15] = result;\n    }\n    temp_ptr = (int *)info_ptr[0xd];\n    *data_ptr = temp;\n    if (temp_ptr != (int *)0x0) {\n      if (temp_ptr != info_ptr + 0x11) {\n        initialize_data(data_ptr);\n      }\n      info_ptr[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000404c": "process_data_0000404c",
                "param_1": "data_ptr",
                "param_2": "info_ptr",
                "iVar1": "result",
                "piVar2": "temp_ptr",
                "uVar3": "value",
                "uVar4": "flags",
                "iVar5": "increment",
                "pcVar6": "function_ptr",
                "iVar7": "count",
                "uVar8": "temp",
                "bVar9": "is_zero",
                "initialize_data_00004b34": "initialize_data"
            },
            "calling": [
                "FUN_00004158",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000404c": {
                    "2": "decompress_data",
                    "20": "process_data",
                    "1": "perform_operation"
                },
                "param_1": {
                    "5": "data",
                    "1": "uint_array",
                    "7": "data_ptr",
                    "2": "output_buffer",
                    "6": "input_data"
                },
                "param_2": {
                    "1": "config_params",
                    "2": "config",
                    "5": "params",
                    "6": "info_ptr"
                },
                "iVar1": {
                    "1": "accumulator",
                    "2": "variable1",
                    "3": "offset",
                    "10": "result"
                },
                "piVar2": {
                    "1": "temp_pointer",
                    "3": "data_pointer",
                    "2": "variable2",
                    "8": "temp_ptr"
                },
                "uVar3": {
                    "1": "temp3",
                    "2": "data_value",
                    "4": "value"
                },
                "uVar4": {
                    "8": "flag",
                    "1": "value2",
                    "14": "flags"
                },
                "iVar5": {
                    "1": "temp4",
                    "2": "step",
                    "6": "increment",
                    "3": "offset"
                },
                "pcVar6": {
                    "1": "data_processing_function",
                    "3": "function_pointer",
                    "7": "callback",
                    "10": "function_ptr",
                    "4": "callback_func"
                },
                "iVar7": {
                    "1": "result",
                    "2": "variable4",
                    "6": "count"
                },
                "uVar8": {
                    "1": "value6",
                    "4": "temp_value",
                    "2": "original_data",
                    "5": "temp"
                },
                "bVar9": {
                    "1": "check_result",
                    "20": "is_zero",
                    "4": "condition"
                },
                "initialize_data_00004b34": {
                    "3": "initialize_data"
                },
                "uVar9": {
                    "1": "condition"
                },
                "uVar10": {
                    "1": "temp_value"
                },
                "piVar6": {
                    "1": "decompress_func"
                },
                "uVar11": {
                    "1": "return_value"
                }
            }
        },
        "FUN_00004158": {
            "entrypoint": "0x00004158",
            "current_name": "process_data_00004158",
            "code": "\nundefined4 process_data_00004158(int input,undefined4 *data)\n\n{\n  undefined4 result;\n  \n  if (data[4] != 0) {\n    if ((input != 0) && (*(int *)(input + 0x18) == 0)) {\n      initialize_memory_000042a4();\n    }\n    if (data == &DAT_000079b8) {\n      data = *(undefined4 **)(input + 4);\n    }\n    else if (data == (undefined4 *)&DAT_000079d8) {\n      data = *(undefined4 **)(input + 8);\n    }\n    else if (data == (undefined4 *)&DAT_00007998) {\n      data = *(undefined4 **)(input + 0xc);\n    }\n    if (*(short *)(data + 3) != 0) {\n      if ((-1 < (int)(data[0x19] << 0x1f)) && (-1 < (int)*(short *)(data + 3) << 0x16)) {\n        FUNC_000045e8(data_param);\n      }\n      result = process_data_00004158_2(input,data);\n      if ((int)(data[0x19] << 0x1f) < 0) {\n        return result;\n      }\n      if ((int)((uint)*(ushort *)(data + 3) << 0x16) < 0) {\n        return result;\n      }\n      FUNC_000045ec(data_param);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004158": "process_data_00004158",
                "param_1": "input",
                "param_2": "data",
                "uVar1": "result",
                "process_data_0000404c": "process_data_2",
                "param_2[0x16]": "data_param"
            },
            "calling": [
                "FUN_000041d0",
                "FUN_00005404",
                "FUN_00006768"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_0000404c",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_00004158(int param_1,undefined4 *param_2)\n\n{\n  undefined4 uVar1;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n      FUNC_000042a4();\n    }\n    if (param_2 == &DAT_000079b8) {\n      param_2 = *(undefined4 **)(param_1 + 4);\n    }\n    else if (param_2 == (undefined4 *)&DAT_000079d8) {\n      param_2 = *(undefined4 **)(param_1 + 8);\n    }\n    else if (param_2 == (undefined4 *)&DAT_00007998) {\n      param_2 = *(undefined4 **)(param_1 + 0xc);\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      if ((-1 < (int)(param_2[0x19] << 0x1f)) && (-1 < (int)*(short *)(param_2 + 3) << 0x16)) {\n        FUNC_000045e8(param_2[0x16]);\n      }\n      uVar1 = process_data_0000404c(param_1,param_2);\n      if ((int)(param_2[0x19] << 0x1f) < 0) {\n        return uVar1;\n      }\n      if ((int)((uint)*(ushort *)(param_2 + 3) << 0x16) < 0) {\n        return uVar1;\n      }\n      FUNC_000045ec(param_2[0x16]);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n",
            "additional_data": {
                "FUN_00004158": {
                    "30": "process_data",
                    "1": "process_function"
                },
                "param_1": {
                    "10": "input",
                    "4": "data",
                    "1": "data_address",
                    "3": "input_ptr",
                    "2": "input_data",
                    "5": "input_param"
                },
                "param_2": {
                    "4": "data",
                    "2": "data_pointer",
                    "3": "data_array",
                    "1": "output_param"
                },
                "uVar1": {
                    "20": "result",
                    "11": "return_value"
                },
                "FUNC_000042a4": {
                    "1": "some_function",
                    "4": "initialize",
                    "2": "perform_action"
                },
                "DAT_000079b8": {
                    "3": "data1",
                    "1": "dat_a"
                },
                "DAT_000079d8": {
                    "1": "data_pointer2",
                    "3": "data2"
                },
                "DAT_00007998": {
                    "1": "data_pointer3",
                    "3": "data3"
                },
                "FUNC_000045e8": {
                    "1": "process_config_1",
                    "2": "process_data_part1"
                },
                "process_data_0000404c": {
                    "1": "process_data_func",
                    "2": "process_data_2"
                },
                "FUNC_000045ec": {
                    "1": "cleanup_data",
                    "2": "cleanup_action"
                },
                "&DAT_000079b8": {
                    "1": "data_ptr1"
                },
                "&DAT_000079d8": {
                    "1": "data_ptr2"
                },
                "&DAT_00007998": {
                    "1": "data_ptr3"
                },
                "param_2[0x16]": {
                    "1": "data_param"
                }
            }
        },
        "FUN_000041d0": {
            "entrypoint": "0x000041d0",
            "current_name": "process_relocation_entries_000041d0",
            "code": "\nuint process_relocation_entries_000041d0(int offset,undefined4 param_2,undefined4 param_3)\n\n{\n  uint result;\n  int count;\n  dword *relocation_entry;\n  int current_entry;\n  uint combined_result;\n  int remaining_entries;\n  undefined4 *data_ptr;\n  \n  if (offset == 0) {\n    data_ptr = &DAT_000079f8;\n    relocation_entry = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n    combined_result = 0;\n    do {\n      remaining_entries = relocation_entry[1];\n      current_entry = relocation_entry[2];\n      while (remaining_entries = remaining_entries + -1, -1 < remaining_entries) {\n        if ((1 < *(ushort *)(current_entry + 0xc)) && (count = *(short *)(current_entry + 0xe) + 1, count != 0)) {\n          result = process_data_00004158(0x1fff0284,current_entry,param_3,count,data_ptr);\n          combined_result = combined_result | result;\n        }\n        current_entry = current_entry + 0x68;\n      }\n      relocation_entry = (dword *)*relocation_entry;\n    } while (relocation_entry != (dword *)0x0);\n    return combined_result;\n  }\n  combined_result = process_data_00004158(Elf32_Rel_ARRAY_1fff0200[16].r_offset,offset);\n  return combined_result;\n}\n\n",
            "renaming": {
                "FUN_000041d0": "process_relocation_entries_000041d0",
                "param_1": "offset",
                "uVar1": "result",
                "iVar2": "count",
                "pdVar3": "relocation_entry",
                "iVar4": "current_entry",
                "uVar5": "combined_result",
                "iVar6": "remaining_entries",
                "puVar7": "data_ptr"
            },
            "calling": [
                "FUN_00002e48"
            ],
            "called": [
                "FUN_00004158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000041d0": {
                    "1": "process_elf_data",
                    "6": "process_relocations",
                    "8": "process_relocation_entries",
                    "5": "process_relocation_table",
                    "2": "process_rel_data"
                },
                "param_1": {
                    "2": "address",
                    "1": "input_data",
                    "8": "base_address",
                    "10": "offset",
                    "4": "input_param"
                },
                "param_2": {
                    "2": "offset_param",
                    "1": "param",
                    "3": "size",
                    "4": "offset",
                    "6": "param_2"
                },
                "param_3": {
                    "1": "relocation_value",
                    "2": "param3",
                    "7": "param_3",
                    "4": "size"
                },
                "uVar1": {
                    "27": "result",
                    "1": "processed_data_result"
                },
                "iVar2": {
                    "2": "num_entries",
                    "1": "entry_size",
                    "6": "count",
                    "4": "index"
                },
                "pdVar3": {
                    "1": "rel_array",
                    "2": "relocation",
                    "3": "rel_entry",
                    "4": "relocation_entry"
                },
                "iVar4": {
                    "3": "entry",
                    "5": "current_entry",
                    "1": "relocation_entry",
                    "2": "entry_ptr"
                },
                "uVar5": {
                    "5": "total_result",
                    "1": "relocation_result",
                    "2": "result_mask",
                    "3": "final_result",
                    "11": "combined_result",
                    "4": "result"
                },
                "iVar6": {
                    "4": "count",
                    "2": "counter",
                    "1": "inner_loop_counter",
                    "3": "inner_counter",
                    "6": "remaining_entries"
                },
                "puVar7": {
                    "2": "data_array",
                    "1": "info_ptr",
                    "4": "symbol_table",
                    "5": "data_ptr"
                }
            }
        },
        "FUN_000041f4": {
            "entrypoint": "0x000041f4",
            "current_name": "initialize_memory_000041f4",
            "code": "\nvoid initialize_memory_000041f4(undefined4 *data_structure,undefined2 value1,undefined2 value2)\n\n{\n  *data_structure = 0;\n  data_structure[1] = 0;\n  data_structure[4] = 0;\n  data_structure[5] = 0;\n  data_structure[2] = 0;\n  *(undefined2 *)(data_structure + 3) = value1;\n  data_structure[0x19] = 0;\n  *(undefined2 *)((int)data_structure + 0xe) = value2;\n  data_structure[6] = 0;\n  fill_memory(data_structure + 0x17,0,8);\n  data_structure[9] = 0x4dc9;\n  data_structure[10] = 0x4def;\n  data_structure[0xb] = 0x4e27;\n  data_structure[8] = data_structure;\n  data_structure[0xc] = &label;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000041f4": "initialize_memory_000041f4",
                "param_1": "data_structure",
                "param_2": "value1",
                "param_3": "value2",
                "fill_memory_00004622": "fill_memory",
                "LAB_00004e4a_1": "label"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000041f4": {
                    "2": "initialize_struct",
                    "8": "initialize_data_structure",
                    "1": "initialize_function",
                    "14": "initialize_memory",
                    "3": "initialize_data"
                },
                "param_1": {
                    "2": "data",
                    "1": "memory_ptr",
                    "4": "memory_block",
                    "6": "memory",
                    "3": "memory_array",
                    "7": "data_structure"
                },
                "param_2": {
                    "1": "input_value1",
                    "2": "param2_value",
                    "27": "value1"
                },
                "param_3": {
                    "2": "param3_value",
                    "1": "parameter3",
                    "27": "value2"
                },
                "fill_memory_00004622": {
                    "24": "fill_memory",
                    "1": "initialize_memory"
                },
                "LAB_00004e4a_1": {
                    "1": "lab_variable",
                    "7": "label",
                    "4": "constant_value",
                    "2": "some_label"
                }
            }
        },
        "FUN_00004248": {
            "entrypoint": "0x00004248",
            "current_name": "allocate_and_initialize_memory_00004248",
            "code": "\nundefined4 * allocate_and_initialize_memory_00004248(undefined4 memory_size,int num_elements)\n\n{\n  undefined4 *allocated_memory;\n  int total_size;\n  \n  total_size = (num_elements + -1) * 0x68;\n  allocated_memory = (undefined4 *)allocate_memory(memory_size,total_size + 0x74);\n  if (allocated_memory != (undefined4 *)0x0) {\n    *allocated_memory = 0;\n    allocated_memory[1] = num_elements;\n    allocated_memory[2] = allocated_memory + 3;\n    fill_memory(allocated_memory + 3,0,total_size + 0x68);\n  }\n  return allocated_memory;\n}\n\n",
            "renaming": {
                "FUN_00004248": "allocate_and_initialize_memory_00004248",
                "param_1": "memory_size",
                "param_2": "num_elements",
                "iVar2": "total_size",
                "puVar1": "allocated_memory",
                "allocate_memory_00004bd0": "allocate_memory",
                "fill_memory_00004622": "fill_memory"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004248": {
                    "1": "allocate_and_initialize_data",
                    "10": "allocate_and_fill_memory",
                    "2": "allocate_and_initialize",
                    "5": "initialize_memory"
                },
                "param_1": {
                    "1": "input_param",
                    "5": "memory_size",
                    "4": "memory_address"
                },
                "param_2": {
                    "3": "num_blocks",
                    "1": "number_of_chunks",
                    "4": "count",
                    "17": "num_elements",
                    "2": "size"
                },
                "iVar2": {
                    "5": "allocation_size",
                    "9": "total_size",
                    "1": "last_index",
                    "3": "memory_size",
                    "2": "memory_offset",
                    "4": "offset"
                },
                "puVar1": {
                    "1": "array_ptr",
                    "19": "allocated_memory",
                    "2": "allocated_memory_ptr"
                },
                "allocate_memory_00004bd0": {
                    "6": "allocate_memory"
                },
                "fill_memory_00004622": {
                    "6": "fill_memory",
                    "1": "initialize_memory"
                },
                "*puVar1": {
                    "1": "allocated_memory_value"
                }
            }
        },
        "FUN_00004274": {
            "entrypoint": "0x00004274",
            "current_name": "initialize_data_00004274",
            "code": "\nvoid initialize_data_00004274(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004274": "initialize_data_00004274"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004274": {
                    "28": "initialize_data",
                    "1": "initiate_data_processing",
                    "2": "initialize_memory"
                },
                "FUNC_000045e8": {
                    "1": "set_data",
                    "23": "process_data",
                    "2": "initialize_memory"
                },
                "1fff0dec": {
                    "1": "memory_location"
                },
                "DAT_1fff0dec": {
                    "3": "data",
                    "1": "data_buffer"
                }
            }
        },
        "FUN_00004280": {
            "entrypoint": "0x00004280",
            "current_name": "initialize_data_00004280",
            "code": "\nvoid initialize_data_00004280(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004280": "initialize_data_00004280"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004280": {
                    "30": "initialize_data",
                    "1": "execute_initialization"
                },
                "FUNC_000045ec": {
                    "1": "do_something",
                    "24": "process_data"
                },
                "void": {
                    "1": "void"
                },
                "initialize_data": {
                    "1": "void"
                },
                "process_data": {
                    "1": "process_data"
                },
                "DAT_1fff0dec": {
                    "5": "data",
                    "1": "data_ptr"
                },
                "dat_1fff0dec": {
                    "1": "data_buffer"
                }
            }
        },
        "FUN_0000428c": {
            "entrypoint": "0x0000428c",
            "current_name": "initialize_memory_0000428c",
            "code": "\nvoid initialize_memory_0000428c(void)\n\n{\n  FUNC_000045e8(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000428c": "initialize_memory_0000428c"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000428c": {
                    "1": "initialize_function",
                    "2": "initialize_device",
                    "22": "initialize_memory",
                    "3": "initialize_data"
                },
                "FUNC_000045e8": {
                    "2": "write_to_memory",
                    "4": "write_data_to_memory",
                    "7": "set_memory_value",
                    "1": "configure_peripheral"
                },
                "0x1fff0de7": {
                    "1": "data_value",
                    "2": "memory_location",
                    "5": "memory_address"
                }
            }
        },
        "FUN_000042a4": {
            "entrypoint": "0x000042a4",
            "current_name": "initialize_memory_000042a4",
            "code": "\nvoid initialize_memory_000042a4(int memory_address)\n\n{\n  undefined4 return_value;\n  \n  initialize_memory_000042a4();\n  if (*(int *)(memory_address + 0x18) == 0) {\n    *(undefined4 *)(memory_address + 0x48) = 0;\n    *(undefined4 *)(memory_address + 0x4c) = 0;\n    *(undefined4 *)(memory_address + 0x50) = 0;\n    return_value = 0x1fff0284;\n    *(undefined **)(memory_address + 0x28) = &DAT_0000423d;\n    if (memory_address == 0x1fff0284) {\n      return_value = 1;\n    }\n    if (memory_address == 0x1fff0284) {\n      *(undefined4 *)(memory_address + 0x18) = return_value;\n    }\n    return_value = initialize_and_allocate_memory(memory_address);\n    *(undefined4 *)(memory_address + 4) = return_value;\n    return_value = initialize_and_allocate_memory(memory_address);\n    *(undefined4 *)(memory_address + 8) = return_value;\n    return_value = initialize_and_allocate_memory(memory_address);\n    *(undefined4 *)(memory_address + 0xc) = return_value;\n    initialize_memory_000042a4(*(undefined4 *)(memory_address + 4),4,0);\n    initialize_memory_000042a4(*(undefined4 *)(memory_address + 8),9,1);\n    initialize_memory_000042a4(*(undefined4 *)(memory_address + 0xc),0x12,2);\n    *(undefined4 *)(memory_address + 0x18) = 1;\n  }\n  FUNC_000045ec(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000042a4": "initialize_memory_000042a4",
                "param_1": "memory_address",
                "uVar1": "return_value",
                "initialize_memory_0000428c": "initialize_memory",
                "initialize_and_allocate_memory_00004314": "initialize_and_allocate_memory",
                "initialize_memory_000041f4": "initialize_memory"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004db8",
                "FUN_00004158",
                "FUN_00005404",
                "FUN_00005e10",
                "FUN_000054a8",
                "FUN_00006768",
                "FUN_00004c84",
                "FUN_00004cb4",
                "FUN_00004314",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000041f4",
                "FUN_000045ec",
                "FUN_0000428c",
                "FUN_00004314"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000042a4": {
                    "1": "initialize_and_process_data",
                    "3": "initialize_memory_and_execute",
                    "2": "initialize_function",
                    "11": "initialize_memory"
                },
                "param_1": {
                    "2": "memory_block_address",
                    "1": "data_address",
                    "6": "base_address",
                    "12": "memory_address",
                    "4": "param"
                },
                "uVar1": {
                    "1": "initialization_value",
                    "8": "return_value",
                    "2": "initial_value",
                    "7": "status"
                },
                "initialize_memory_0000428c": {
                    "1": "initialize_memory_1",
                    "2": "initialize_memory_at_address",
                    "17": "initialize_memory"
                },
                "initialize_and_allocate_memory_00004314": {
                    "1": "init_allocate_memory",
                    "2": "allocate_memory",
                    "21": "initialize_and_allocate_memory"
                },
                "initialize_memory_000041f4": {
                    "3": "initialize_memory_with_data",
                    "1": "initialize_memory_block2",
                    "2": "initialize_memory_segment",
                    "4": "initialize_memory"
                },
                "FUNC_000045ec": {
                    "1": "execute_operation",
                    "3": "perform_action",
                    "10": "execute_function",
                    "2": "perform_operation"
                },
                "DAT_0000423d": {
                    "2": "data",
                    "1": "data_value"
                },
                "CTRL_PTR": {
                    "1": "control_pointer"
                },
                "0x1fff0284": {
                    "1": "const_value"
                },
                "0x1fff0de7": {
                    "1": "other_const_value"
                }
            }
        },
        "FUN_00004314": {
            "entrypoint": "0x00004314",
            "current_name": "initialize_and_allocate_memory_00004314",
            "code": "\nundefined4 * initialize_and_allocate_memory_00004314(undefined4 *param_array)\n\n{\n  dword allocated_memory;\n  int loop_counter;\n  undefined4 *data_ptr;\n  dword *rel_info_ptr;\n  \n  initialize_data();\n  if (rel_array[19].r_info == 0) {\n    initialize_memory_000042a4(0x1fff0284);\n  }\n  rel_info_ptr = &rel_array[0x19].r_info;\n  do {\n    loop_counter = rel_info_ptr[1];\n    data_ptr = (undefined4 *)rel_info_ptr[2];\n    while (loop_counter = loop_counter + -1, -1 < loop_counter) {\n      if (*(short *)(data_ptr + 3) == 0) {\n        data_ptr[3] = 0xffff0001;\n        data_ptr[0x19] = 0;\n        FUNC_000045e4(data_ptr + 0x16);\n        initialize_data();\n        data_ptr[1] = 0;\n        data_ptr[2] = 0;\n        data_ptr[4] = 0;\n        data_ptr[5] = 0;\n        *data_ptr = 0;\n        data_ptr[6] = 0;\n        fill_memory(data_ptr + 0x17,0,8);\n        data_ptr[0xd] = 0;\n        data_ptr[0xe] = 0;\n        data_ptr[0x12] = 0;\n        data_ptr[0x13] = 0;\n        return data_ptr;\n      }\n      data_ptr = data_ptr + 0x1a;\n    }\n    if (*rel_info_ptr == 0) {\n      allocated_memory = allocate_and_initialize_memory(param_array,4);\n      *rel_info_ptr = allocated_memory;\n      if (allocated_memory == 0) {\n        initialize_data();\n        *param_array = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    rel_info_ptr = (dword *)*rel_info_ptr;\n  } while( true );\n}\n\n",
            "renaming": {
                "param_1": "param_array",
                "dVar1": "allocated_memory",
                "iVar2": "loop_counter",
                "puVar3": "data_ptr",
                "pdVar4": "rel_info_ptr",
                "FUN_00004314": "initialize_and_allocate_memory_00004314",
                "Elf32_Rel_ARRAY_1fff0200": "rel_array",
                "initialize_data_00004274": "initialize_data",
                "initialize_data_00004280": "initialize_data",
                "fill_memory_00004622": "fill_memory",
                "allocate_and_initialize_memory_00004248": "allocate_and_initialize_memory"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00004622",
                "FUN_000045e4",
                "FUN_00004280",
                "FUN_00004248",
                "FUN_00004274"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 * FUN_00004314(undefined4 *param_1)\n\n{\n  dword dVar1;\n  int iVar2;\n  undefined4 *puVar3;\n  dword *pdVar4;\n  \n  initialize_data_00004274();\n  if (Elf32_Rel_ARRAY_1fff0200[19].r_info == 0) {\n    FUNC_000042a4(0x1fff0284);\n  }\n  pdVar4 = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n  do {\n    iVar2 = pdVar4[1];\n    puVar3 = (undefined4 *)pdVar4[2];\n    while (iVar2 = iVar2 + -1, -1 < iVar2) {\n      if (*(short *)(puVar3 + 3) == 0) {\n        puVar3[3] = 0xffff0001;\n        puVar3[0x19] = 0;\n        FUNC_000045e4(puVar3 + 0x16);\n        initialize_data_00004280();\n        puVar3[1] = 0;\n        puVar3[2] = 0;\n        puVar3[4] = 0;\n        puVar3[5] = 0;\n        *puVar3 = 0;\n        puVar3[6] = 0;\n        fill_memory_00004622(puVar3 + 0x17,0,8);\n        puVar3[0xd] = 0;\n        puVar3[0xe] = 0;\n        puVar3[0x12] = 0;\n        puVar3[0x13] = 0;\n        return puVar3;\n      }\n      puVar3 = puVar3 + 0x1a;\n    }\n    if (*pdVar4 == 0) {\n      dVar1 = allocate_and_initialize_memory_00004248(param_1,4);\n      *pdVar4 = dVar1;\n      if (dVar1 == 0) {\n        initialize_data_00004280();\n        *param_1 = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    pdVar4 = (dword *)*pdVar4;\n  } while( true );\n}\n\n",
            "additional_data": {
                "param_1": {
                    "1": "result_array",
                    "7": "param_array",
                    "3": "param",
                    "5": "input_array",
                    "2": "parameter"
                },
                "dVar1": {
                    "1": "alloc",
                    "29": "allocated_memory"
                },
                "iVar2": {
                    "8": "loop_counter",
                    "2": "iteration_counter",
                    "1": "remaining_iterations",
                    "4": "iteration_count"
                },
                "puVar3": {
                    "1": "data_array_ptr",
                    "3": "current_pointer",
                    "2": "current_data",
                    "5": "data_ptr"
                },
                "pdVar4": {
                    "1": "info_ptr",
                    "3": "rel_array",
                    "2": "rel_array_pointer"
                },
                "FUN_00004314": {
                    "1": "reverse_elf32_rel_info",
                    "3": "initialize_and_allocate_memory"
                },
                "*puVar3": {
                    "1": "current_pointer"
                },
                "*pdVar4": {
                    "1": "current_rel_info"
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "1": "relocation_array",
                    "2": "rel_array"
                },
                "initialize_data_00004274": {
                    "4": "initialize_data",
                    "1": "initialize_global_data"
                },
                "FUNC_000042a4": {
                    "1": "some_function"
                },
                "FUNC_000045e4": {
                    "1": "update_data"
                },
                "initialize_data_00004280": {
                    "3": "initialize_data",
                    "1": "initialize_specific_data"
                },
                "fill_memory_00004622": {
                    "4": "fill_memory",
                    "1": "fill_memory_region"
                },
                "allocate_and_initialize_memory_00004248": {
                    "2": "allocate_and_initialize_memory"
                }
            }
        },
        "FUN_000043a0": {
            "entrypoint": "0x000043a0",
            "current_name": "process_data_000043a0",
            "code": "\nuint process_data_000043a0(int base_address,code *callback_function)\n\n{\n  uint result;\n  int *current_pointer;\n  int data_ptr;\n  uint result;\n  int loop_counter;\n  \n  current_pointer = (int *)(base_address + 0x48);\n  result = 0;\n  do {\n    loop_counter = current_pointer[1];\n    data_ptr = current_pointer[2];\n    while (loop_counter = loop_counter + -1, -1 < loop_counter) {\n      if ((1 < *(ushort *)(data_ptr + 0xc)) && (*(short *)(data_ptr + 0xe) != -1)) {\n        result = (*callback_function)(data_ptr);\n        result = result | result;\n      }\n      data_ptr = data_ptr + 0x68;\n    }\n    current_pointer = (int *)*current_pointer;\n  } while (current_pointer != (int *)0x0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000043a0": "process_data_000043a0",
                "param_1": "base_address",
                "param_2": "callback_function",
                "piVar2": "current_pointer",
                "uVar4": "result",
                "iVar5": "loop_counter",
                "iVar3": "data_ptr",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00006768"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000043a0": {
                    "1": "find_and_execute_command",
                    "13": "process_data",
                    "2": "calculate_checksum"
                },
                "param_1": {
                    "1": "array_ptr",
                    "2": "offset",
                    "14": "base_address",
                    "4": "start_address",
                    "3": "data_offset"
                },
                "param_2": {
                    "7": "function_pointer",
                    "3": "callback_func",
                    "1": "execute_func",
                    "2": "function_ptr",
                    "12": "callback_function"
                },
                "piVar2": {
                    "1": "iteration_ptr",
                    "2": "ptr",
                    "3": "current_pointer"
                },
                "uVar4": {
                    "1": "merged_value",
                    "4": "combined_results",
                    "5": "combined_result",
                    "11": "result"
                },
                "iVar5": {
                    "6": "count",
                    "1": "nested_var_2",
                    "4": "iteration_count"
                },
                "iVar3": {
                    "1": "array_index",
                    "2": "current_offset"
                },
                "uVar1": {
                    "1": "command_result",
                    "2": "function_result",
                    "8": "callback_result",
                    "10": "result"
                },
                "iVar3 + 0xc": {
                    "1": "condition_1_value"
                },
                "iVar3 + 0xe": {
                    "1": "condition_2_value"
                }
            }
        },
        "FUN_00004418": {
            "entrypoint": "0x00004418",
            "current_name": "process_data_00004418",
            "code": "\nuint process_data_00004418(void)\n\n{\n  dword relocation_offset;\n  uint result;\n  byte **data_pointer;\n  byte *byte_pointer;\n  \n  relocation_offset = relocation_array[16].offset;\n  if ((relocation_array[16].offset != 0) &&\n     (*(int *)(relocation_array[16].offset + 0x18) == 0)) {\n    initialize_memory(relocation_array[16].offset);\n  }\n  data_pointer = *(byte ***)(relocation_offset + 4);\n  if ((relocation_offset != 0) && (*(int *)(relocation_offset + 0x18) == 0)) {\n    initialize_memory();\n  }\n  if (data_pointer == (byte **)&DAT_000079b8) {\n    data_pointer = *(byte ***)(relocation_offset + 4);\n  }\n  else if (data_pointer == (byte **)&DAT_000079d8) {\n    data_pointer = *(byte ***)(relocation_offset + 8);\n  }\n  else if (data_pointer == (byte **)&DAT_00007998) {\n    data_pointer = *(byte ***)(relocation_offset + 0xc);\n  }\n  if ((-1 < (int)data_pointer[0x19] << 0x1f) && (-1 < (int)((uint)*(unsigned_short *)(data_pointer + 3) << 0x16))) {\n    FUNC_000045e8(data_pointer[0x16]);\n  }\n  byte_pointer = data_pointer[1];\n  data_pointer[1] = byte_pointer + -1;\n  if ((int)(byte_pointer + -1) < 0) {\n    result = process_data_00004418_helper(relocation_offset,data_pointer);\n  }\n  else {\n    byte_pointer = *data_pointer;\n    *data_pointer = byte_pointer + 1;\n    result = (uint)*byte_pointer;\n  }\n  if ((-1 < (int)data_pointer[0x19] << 0x1f) && (-1 < (int)((uint)*(unsigned_short *)(data_pointer + 3) << 0x16))) {\n    FUNC_000045ec(data_pointer[0x16]);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004418": "process_data_00004418",
                "Elf32_Rel_ARRAY_1fff0200": "relocation_array",
                "ppbVar3": "data_pointer",
                "pbVar4": "byte_pointer",
                "dVar1": "relocation_offset",
                "uVar2": "result",
                "initialize_memory_000042a4": "initialize_memory",
                "ushort": "unsigned_short",
                "process_data_00005e10": "process_data_helper",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00002d94"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00005e10",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004418": {
                    "1": "get_decoded_value",
                    "12": "process_data",
                    "3": "retrieve_data"
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "1": "elf_relocations",
                    "4": "rel_array",
                    "5": "relocation_array"
                },
                "ppbVar3": {
                    "1": "memory_ptr",
                    "2": "relocated_data",
                    "4": "data_ptr",
                    "3": "pointer",
                    "5": "data_pointer"
                },
                "pbVar4": {
                    "5": "byte_ptr",
                    "1": "pointer_byte",
                    "6": "byte_pointer",
                    "3": "data_pointer",
                    "2": "byte_value"
                },
                "dVar1": {
                    "1": "offset_1",
                    "9": "relocation_offset",
                    "8": "offset",
                    "3": "r_offset",
                    "2": "data_offset"
                },
                "uVar2": {
                    "1": "processed_data",
                    "3": "return_value",
                    "24": "result"
                },
                "initialize_memory_000042a4": {
                    "14": "initialize_memory"
                },
                "FUNC_000045e8": {
                    "1": "perform_operation_1",
                    "2": "process_data_a"
                },
                "FUNC_000045ec": {
                    "1": "reverse_data",
                    "2": "process_data_b"
                },
                "DAT_000079b8": {
                    "1": "data_1"
                },
                "DAT_000079d8": {
                    "1": "constant2"
                },
                "DAT_00007998": {
                    "1": "data_3"
                },
                "ushort": {
                    "1": "unsigned_short"
                },
                "process_data_00005e10": {
                    "2": "process_data_helper",
                    "1": "process_data"
                },
                "r_offset": {
                    "2": "offset"
                }
            }
        },
        "FUN_0000443c": {
            "entrypoint": "0x0000443c",
            "current_name": "calculate_date_components_0000443c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000044a8) */\n\nuint * calculate_date_components_0000443c(undefined4 *date_time,uint *result_array)\n\n{\n  int division_result;\n  uint total_days;\n  uint total_days;\n  uint years;\n  uint leap_years;\n  undefined4 year;\n  undefined4 month;\n  uint day_of_week;\n  bool is_negative;\n  \n  year = *date_time;\n  month = date_time[1];\n  division_result = perform_division(year,month,0x15180,0);\n  total_days = 0x15180;\n  perform_division(year,month,0x15180,0);\n  is_negative = (int)total_days < 0;\n  if (is_negative) {\n    total_days = total_days + 0x15180;\n  }\n  if (is_negative) {\n    total_days = division_result + 0xafa6b;\n  }\n  else {\n    total_days = division_result + 0xafa6c;\n  }\n  result_array[2] = total_days / 0xe10;\n  result_array[1] = (total_days % 0xe10) / 0x3c;\n  *result_array = (total_days % 0xe10) % 0x3c;\n  result_array[6] = (total_days + 3) % 7;\n  total_days = total_days;\n  if ((int)total_days < 0) {\n    total_days = total_days - 0x23ab0;\n  }\n  total_days = (total_days / 0x23ab1) * -0x23ab1 + total_days;\n  years = ((total_days / 0x8eac + total_days) - total_days / 0x5b4) - total_days / 0x23ab0;\n  leap_years = years / 0x16d;\n  total_days = (leap_years / 100 - years / 0x5b4) + total_days + leap_years * -0x16d;\n  day_of_week = total_days * 5 + 2;\n  years = day_of_week / 0x99;\n  if (day_of_week < 0x5fa) {\n    division_result = 2;\n  }\n  else {\n    division_result = -10;\n  }\n  day_of_week = years + division_result;\n  division_result = (total_days / 0x23ab1) * 400 + leap_years;\n  if (day_of_week < 2) {\n    division_result = division_result + 1;\n  }\n  if (total_days < 0x132) {\n    if (((leap_years & 3) == 0) && (leap_years != (leap_years / 100) * 100)) {\n      total_days = 1;\n    }\n    else {\n      total_days = (uint)(leap_years % 400 == 0);\n    }\n    total_days = total_days + 0x3b + total_days;\n  }\n  else {\n    total_days = total_days - 0x132;\n  }\n  result_array[7] = total_days;\n  result_array[3] = (total_days + 1) - (years * 0x99 + 2) / 5;\n  result_array[4] = day_of_week;\n  result_array[5] = division_result - 0x76c;\n  result_array[8] = 0;\n  return result_array;\n}\n\n",
            "renaming": {
                "FUN_0000443c": "calculate_date_components_0000443c",
                "param_1": "date_time",
                "param_2": "result_array",
                "iVar1": "division_result",
                "uVar2": "total_days",
                "uVar3": "total_days",
                "uVar4": "years",
                "uVar5": "leap_years",
                "uVar6": "year",
                "uVar7": "month",
                "uVar8": "day_of_week",
                "bVar9": "is_negative",
                "perform_division_00006974": "perform_division"
            },
            "calling": [
                "FUN_00002624",
                "FUN_00002690"
            ],
            "called": [
                "FUN_00006974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000443c": {
                    "1": "calculate_date_time_components",
                    "4": "calculate_date_time",
                    "2": "calculate_date",
                    "13": "calculate_date_components"
                },
                "param_1": {
                    "1": "input_date",
                    "6": "date_time",
                    "3": "input_params",
                    "4": "date_time_ptr"
                },
                "param_2": {
                    "1": "output_array",
                    "2": "components",
                    "3": "result",
                    "5": "result_array"
                },
                "iVar1": {
                    "1": "temp3",
                    "2": "temp_var",
                    "6": "division_result",
                    "3": "temp"
                },
                "uVar2": {
                    "1": "remaining_days",
                    "7": "total_days",
                    "3": "total_minutes"
                },
                "uVar3": {
                    "3": "adjusted_minutes",
                    "1": "total_seconds",
                    "6": "days",
                    "4": "remaining_days",
                    "2": "adjusted_days",
                    "8": "total_days"
                },
                "uVar4": {
                    "1": "calc_result1",
                    "4": "years",
                    "2": "temp"
                },
                "uVar5": {
                    "8": "leap_years",
                    "1": "year_leap_count",
                    "2": "temp_var2",
                    "3": "years"
                },
                "uVar6": {
                    "2": "param1",
                    "1": "first_param",
                    "3": "value1",
                    "9": "year"
                },
                "uVar7": {
                    "2": "var7",
                    "1": "second_parameter",
                    "8": "month",
                    "3": "value2"
                },
                "uVar8": {
                    "3": "temp_var3",
                    "1": "extra_days_correction",
                    "10": "day_of_week",
                    "2": "temp",
                    "4": "var8"
                },
                "bVar9": {
                    "1": "is_negative_year",
                    "23": "is_negative"
                },
                "uVar9": {
                    "1": "minutes"
                },
                "uVar12": {
                    "1": "temp3"
                },
                "uVar1": {
                    "1": "adjusted_days"
                },
                "uVar10": {
                    "1": "extra_days"
                },
                "uVar11": {
                    "1": "result"
                },
                "uVar13": {
                    "1": "temp4"
                },
                "*param_1": {
                    "1": "time_in_seconds_ptr"
                },
                "*param_2": {
                    "1": "date_time_components_ptr"
                },
                "perform_division_00006974": {
                    "1": "calculate_leap_years",
                    "2": "perform_division"
                },
                "uVar2_1": {
                    "1": "days_remainder"
                },
                "uVar3_1": {
                    "1": "years_remainder"
                },
                "uVar4_1": {
                    "1": "leap_years_remainder"
                },
                "uVar5_1": {
                    "1": "centuries"
                },
                "uVar6_1": {
                    "1": "temp2"
                },
                "uVar7_1": {
                    "1": "leap_year_check"
                },
                "uVar8_1": {
                    "1": "leap_year_adjustment"
                }
            }
        },
        "FUN_0000459c": {
            "entrypoint": "0x0000459c",
            "current_name": "execute_functions_0000459c",
            "code": "\nvoid execute_functions_0000459c(void)\n\n{\n  code **function_pointer;\n  int counter;\n  \n  function_pointer = (code **)&DAT_00007c58;\n  for (counter = 0; counter != 0; counter = counter + 1) {\n    (**function_pointer)();\n    function_pointer = function_pointer + 1;\n  }\n  FUNC_00000410();\n  function_pointer = (code **)&DAT_00007c58;\n  for (counter = 0; counter != 0; counter = counter + 1) {\n    (**function_pointer)();\n    function_pointer = function_pointer + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000459c": "execute_functions_0000459c",
                "ppcVar1": "function_pointer",
                "iVar2": "counter"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000410"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000459c": {
                    "4": "execute_function_twice",
                    "6": "execute_callbacks",
                    "1": "execute_all_callbacks",
                    "2": "execute_function_pointers",
                    "7": "execute_functions"
                },
                "ppcVar1": {
                    "4": "function_pointers",
                    "1": "callback_array_ptr",
                    "13": "function_pointer",
                    "2": "function_list",
                    "3": "callback_pointer"
                },
                "iVar2": {
                    "2": "loop_counter",
                    "7": "iteration_count",
                    "1": "iteration_index",
                    "4": "callback_index"
                },
                "FUNC_00000410": {
                    "1": "perform_cleanup"
                },
                "**ppcVar1": {
                    "1": "function_pointer"
                },
                "<original_function_name>": {
                    "1": "execute_code_functions"
                }
            }
        },
        "FUN_000045e4": {
            "entrypoint": "0x000045e4",
            "current_name": "FUNC_000045e4",
            "code": "\nvoid FUNC_000045e4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e4": "FUNC_000045e4"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045e8": {
            "entrypoint": "0x000045e8",
            "current_name": "FUNC_000045e8",
            "code": "\nvoid FUNC_000045e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e8": "FUNC_000045e8"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004db8",
                "FUN_00004158",
                "FUN_00005790",
                "FUN_00004cb4",
                "FUN_0000428c",
                "FUN_00005fec",
                "FUN_000057f8",
                "FUN_00004274"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ec": {
            "entrypoint": "0x000045ec",
            "current_name": "FUNC_000045ec",
            "code": "\nvoid FUNC_000045ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ec": "FUNC_000045ec"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004db8",
                "FUN_000042a4",
                "FUN_00004158",
                "FUN_00005ff8",
                "FUN_00004cb4",
                "FUN_00004280",
                "FUN_000057f8",
                "FUN_0000579c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ee": {
            "entrypoint": "0x000045ee",
            "current_name": "copy_and_reverse_000045ee",
            "code": "\nvoid copy_and_reverse_000045ee(undefined *dest,undefined *src,int length)\n\n{\n  undefined *dest_ptr;\n  undefined *src_ptr;\n  \n  src_ptr = src + length;\n  if ((src < dest) && (dest < src_ptr)) {\n    dest_ptr = dest + length;\n    while (dest_ptr != dest) {\n      src_ptr = src_ptr + -1;\n      dest_ptr = dest_ptr + -1;\n      *dest_ptr = *src_ptr;\n    }\n  }\n  else {\n    dest = dest + -1;\n    for (; src != src_ptr; src = src + 1) {\n      dest = dest + 1;\n      *dest = *src;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ee": "copy_and_reverse_000045ee",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "length",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr"
            },
            "calling": [
                "FUN_00003ff4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000045ee": {
                    "1": "copy_or_reverse_data",
                    "8": "copy_and_reverse",
                    "7": "reverse_copy",
                    "5": "copy_within"
                },
                "param_1": {
                    "4": "destination",
                    "1": "dest_start",
                    "11": "dest",
                    "9": "source",
                    "3": "target"
                },
                "param_2": {
                    "11": "src",
                    "9": "destination",
                    "1": "destination_array",
                    "4": "source",
                    "3": "start"
                },
                "param_3": {
                    "24": "length",
                    "6": "size",
                    "1": "end"
                },
                "puVar1": {
                    "1": "dst_ptr",
                    "3": "src_ptr",
                    "2": "source_end",
                    "6": "dest_end",
                    "8": "dest_ptr"
                },
                "puVar2": {
                    "6": "dest_ptr",
                    "3": "destination_ptr",
                    "8": "src_ptr",
                    "1": "src"
                }
            }
        },
        "FUN_00004622": {
            "entrypoint": "0x00004622",
            "current_name": "fill_memory_00004622",
            "code": "\nvoid fill_memory_00004622(undefined *memory,undefined value,int length)\n\n{\n  undefined *end_address;\n  \n  end_address = memory + length;\n  for (; memory != end_address; memory = memory + 1) {\n    *memory = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004622": "fill_memory_00004622",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "end_address"
            },
            "calling": [
                "FUN_00003ec4",
                "FUN_000041f4",
                "FUN_00003ff4",
                "FUN_0000305c",
                "FUN_00004314",
                "FUN_00004248"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004622": {
                    "1": "fill_with_constant",
                    "2": "fill_array_with",
                    "10": "fill_memory",
                    "3": "fill_memory_with"
                },
                "param_1": {
                    "8": "destination",
                    "5": "array",
                    "1": "ptr",
                    "11": "memory",
                    "4": "dest"
                },
                "param_2": {
                    "1": "constant",
                    "26": "value",
                    "2": "byte"
                },
                "param_3": {
                    "1": "block_size",
                    "13": "size",
                    "14": "length"
                },
                "puVar1": {
                    "3": "end_ptr",
                    "2": "end_memory",
                    "1": "end",
                    "5": "end_address"
                },
                "param_1 + param_3": {
                    "1": "end_of_memory"
                },
                "*param_1": {
                    "1": "current_memory_value"
                }
            }
        },
        "FUN_00004634": {
            "entrypoint": "0x00004634",
            "current_name": "update_date_00004634",
            "code": "\nvoid update_date_00004634(uint *date_array,uint days_to_add,undefined4 unknown)\n\n{\n  int days_in_month;\n  uint current_day;\n  uint current_month;\n  int days_in_month;\n  bool is_negative;\n  uint *quotient;\n  uint remainder;\n  undefined4 temp;\n  \n  quotient = date_array;\n  remainder = days_to_add;\n  temp = unknown;\n  if (0x3b < *date_array) {\n    divide_and_remainder(&quotient,*date_array,0x3c);\n    current_day = date_array[1] + (int)quotient;\n    date_array[1] = current_day;\n    if ((int)remainder < 0) {\n      current_day = current_day - 1;\n      *date_array = remainder + 0x3c;\n    }\n    else {\n      *date_array = remainder;\n    }\n    if ((int)remainder < 0) {\n      date_array[1] = current_day;\n    }\n  }\n  if (0x3b < date_array[1]) {\n    divide_and_remainder(&quotient,date_array[1],0x3c);\n    is_negative = (int)remainder < 0;\n    current_month = date_array[2] + (int)quotient;\n    date_array[2] = current_month;\n    current_day = remainder;\n    if (is_negative) {\n      current_day = remainder + 0x3c;\n      current_month = current_month - 1;\n    }\n    if (!is_negative) {\n      date_array[1] = current_day;\n    }\n    if (is_negative) {\n      date_array[1] = current_day;\n    }\n    if (is_negative) {\n      date_array[2] = current_month;\n    }\n  }\n  if (0x17 < date_array[2]) {\n    divide_and_remainder(&quotient,date_array[2],0x18);\n    is_negative = (int)remainder < 0;\n    current_month = date_array[3] + (int)quotient;\n    date_array[3] = current_month;\n    current_day = remainder;\n    if (is_negative) {\n      current_day = remainder + 0x18;\n      current_month = current_month - 1;\n    }\n    if (!is_negative) {\n      date_array[2] = current_day;\n    }\n    if (is_negative) {\n      date_array[2] = current_day;\n    }\n    if (is_negative) {\n      date_array[3] = current_month;\n    }\n  }\n  if (0xb < date_array[4]) {\n    divide_and_remainder(&quotient,date_array[4],0xc);\n    is_negative = (int)remainder < 0;\n    current_day = date_array[5] + (int)quotient;\n    date_array[5] = current_day;\n    if (is_negative) {\n      remainder = remainder + 0xc;\n      current_day = current_day - 1;\n    }\n    if (!is_negative) {\n      date_array[4] = remainder;\n    }\n    if (is_negative) {\n      date_array[4] = remainder;\n    }\n    if (is_negative) {\n      date_array[5] = current_day;\n    }\n  }\n  current_day = date_array[5];\n  if ((current_day & 3) == 0) {\n    if (current_day == (current_day / 100) * 100) {\n      if ((current_day + 0x76c) % 400 == 0) {\n        days_in_month = 0x1d;\n      }\n      else {\n        days_in_month = 0x1c;\n      }\n    }\n    else {\n      days_in_month = 0x1d;\n    }\n  }\n  else {\n    days_in_month = 0x1c;\n  }\n  if ((int)date_array[3] < 1) {\n    while ((int)date_array[3] < 1) {\n      current_day = date_array[4];\n      date_array[4] = current_day - 1;\n      if (current_day - 1 == 0xffffffff) {\n        current_month = date_array[5];\n        current_day = current_month - 1;\n        date_array[4] = 0xb;\n        date_array[5] = current_day;\n        if ((current_day & 3) == 0) {\n          if (current_day == (current_day / 100) * 100) {\n            if ((current_month + 0x76b) % 400 == 0) {\n              days_in_month = 0x1d;\n            }\n            else {\n              days_in_month = 0x1c;\n            }\n          }\n          else {\n            days_in_month = 0x1d;\n          }\n        }\n        else {\n          days_in_month = 0x1c;\n        }\n      }\n      days_in_month = days_in_month;\n      if (date_array[4] != 1) {\n        days_in_month = (&DAT_000079fc)[date_array[4]];\n      }\n      date_array[3] = days_in_month + date_array[3];\n    }\n  }\n  else {\n    while( true ) {\n      current_day = date_array[4];\n      days_in_month = days_in_month;\n      if (current_day != 1) {\n        days_in_month = (&DAT_000079fc)[current_day];\n      }\n      if ((int)date_array[3] <= days_in_month) break;\n      date_array[3] = date_array[3] - days_in_month;\n      date_array[4] = current_day + 1;\n      if (current_day + 1 == 0xc) {\n        current_month = date_array[5];\n        current_day = current_month + 1;\n        date_array[4] = 0;\n        date_array[5] = current_day;\n        if ((current_day & 3) == 0) {\n          if (current_day % 100 == 0) {\n            if ((current_month + 0x76d) % 400 == 0) {\n              days_in_month = 0x1d;\n            }\n            else {\n              days_in_month = 0x1c;\n            }\n          }\n          else {\n            days_in_month = 0x1d;\n          }\n        }\n        else {\n          days_in_month = 0x1c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004634": "update_date_00004634",
                "param_1": "date_array",
                "param_2": "days_to_add",
                "param_3": "unknown",
                "iVar1": "days_in_month",
                "uVar2": "current_day",
                "uVar3": "current_month",
                "iVar4": "days_in_month",
                "bVar5": "is_negative",
                "local_20": "quotient",
                "local_1c": "remainder",
                "uStack_18": "temp",
                "divide_and_remainder_00005584": "divide_and_remainder"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005584"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004634": {
                    "3": "update_date_and_time",
                    "1": "adjust_date",
                    "11": "update_date",
                    "9": "update_date_time",
                    "2": "calculate_date"
                },
                "param_1": {
                    "2": "date",
                    "3": "date_and_time",
                    "8": "date_time",
                    "12": "date_array",
                    "1": "datetime"
                },
                "param_2": {
                    "12": "days_to_add",
                    "1": "input_time",
                    "2": "year",
                    "6": "days"
                },
                "param_3": {
                    "1": "constant_value",
                    "7": "unknown",
                    "2": "is_leap_year",
                    "4": "param_3",
                    "3": "year"
                },
                "iVar1": {
                    "3": "month_index",
                    "2": "days_to_add",
                    "1": "months_to_add",
                    "14": "days_in_month"
                },
                "uVar2": {
                    "1": "day_of_year",
                    "7": "current_day",
                    "3": "day",
                    "2": "total_days"
                },
                "uVar3": {
                    "1": "years",
                    "7": "current_month",
                    "5": "year",
                    "2": "leap_year_counter"
                },
                "iVar4": {
                    "1": "leap_year_flag",
                    "4": "current_year",
                    "2": "months_in_year",
                    "5": "days_in_year",
                    "7": "days_in_month"
                },
                "bVar5": {
                    "2": "is_leap_year",
                    "26": "is_negative",
                    "1": "negative_flag"
                },
                "local_20": {
                    "5": "quotient_array",
                    "1": "tmp_array",
                    "4": "quotient_and_remainder",
                    "2": "div_result",
                    "14": "quotient"
                },
                "local_1c": {
                    "1": "temp_days",
                    "2": "remaining_days",
                    "18": "remainder"
                },
                "uStack_18": {
                    "1": "unknown2",
                    "2": "unknown_stack",
                    "5": "stack_var"
                },
                "divide_and_remainder_00005584": {
                    "1": "divide_and_remainder"
                },
                "&DAT_000079fc": {
                    "1": "month_array"
                }
            }
        },
        "FUN_000047e4": {
            "entrypoint": "0x000047e4",
            "current_name": "calculate_updated_date_000047e4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00004ab2) */\n\nundefined8 calculate_updated_date_000047e4(int *date)\n\n{\n  longlong total_days;\n  longlong updated_total_days;\n  int *memory_address;\n  uint remainder;\n  int temp_var2;\n  int temp_var3;\n  int var7;\n  uint temp_var5;\n  uint temp_var6;\n  uint temp_var7;\n  int temp_var8;\n  uint year;\n  uint is_negative;\n  uint temp_var11;\n  uint seconds;\n  bool is_leap_year;\n  \n  memory_address = (int *)get_memory_address();\n  update_date(date);\n  year = date[5];\n  temp_var8 = date[3] + -1 + *(int *)(&DAT_00007a2c + date[4] * 4);\n  if (((1 < date[4]) && ((year & 3) == 0)) &&\n     ((year != (year / 100) * 100 || (year + 0x76c == ((year + 0x76c) / 400) * 400)))) {\n    temp_var8 = temp_var8 + 1;\n  }\n  date[7] = temp_var8;\n  if (20000 < (int)&DAT_00002710 + year) {\n    var7 = -1;\n    temp_var2 = -1;\n    goto LAB_00004aba;\n  }\n  if ((int)year < 0x47) {\n    if (year != 0x46) {\n      for (temp_var6 = 0x45; (int)year < (int)temp_var6; temp_var6 = temp_var6 - 1) {\n        if ((temp_var6 & 3) == 0) {\n          if (temp_var6 == (temp_var6 / 100) * 100) {\n            if ((temp_var6 + 0x76c) % 400 == 0) {\n              var7 = 0x16e;\n            }\n            else {\n              var7 = 0x16d;\n            }\n          }\n          else {\n            var7 = 0x16e;\n          }\n        }\n        else {\n          var7 = 0x16d;\n        }\n        temp_var8 = temp_var8 - var7;\n      }\n      if ((temp_var6 & 3) == 0) {\n        if (year == (year / 100) * 100) {\n          var7 = 0x16d;\n          if ((year + 0x76c) % 400 == 0) {\n            var7 = 0x16e;\n          }\n        }\n        else {\n          var7 = 0x16e;\n        }\n      }\n      else {\n        var7 = 0x16d;\n      }\n      temp_var8 = temp_var8 - var7;\n    }\n  }\n  else {\n    temp_var6 = 0x46;\n    do {\n      if ((temp_var6 & 3) == 0) {\n        if (temp_var6 % 100 == 0) {\n          if ((temp_var6 + 0x76c) % 400 == 0) {\n            var7 = 0x16e;\n          }\n          else {\n            var7 = 0x16d;\n          }\n        }\n        else {\n          var7 = 0x16e;\n        }\n      }\n      else {\n        var7 = 0x16d;\n      }\n      temp_var6 = temp_var6 + 1;\n      temp_var8 = temp_var8 + var7;\n    } while (year != temp_var6);\n  }\n  total_days = (longlong)temp_var8 * 0x15180 + (longlong)(date[2] * 0xe10 + date[1] * 0x3c + *date)\n  ;\n  seconds = (uint)total_days;\n  var7 = (int)((ulonglong)total_days >> 0x20);\n  get_data_address();\n  process_data();\n  temp_var6 = DAT_1fff0dd8;\n  if (DAT_1fff0dd8 == 0) {\nLAB_00004934:\n    year = memory_address[10];\n    var7 = (uint)total_days + year;\n    temp_var2 = (int)((ulonglong)total_days >> 0x20) +\n            ((int)year >> 0x1f) + (uint)CARRY4((uint)total_days,year);\n  }\n  else {\n    temp_var11 = date[8];\n    is_negative = temp_var11;\n    if (0 < (int)temp_var11) {\n      is_negative = 1;\n    }\n    if ((memory_address[1] == date[5] + 0x76c) || (temp_var2 = calculate_day_of_week(), temp_var2 != 0)) {\n      temp_var7 = memory_address[0x14];\n      remainder = memory_address[0x12];\n      temp_var5 = memory_address[10];\n      temp_var6 = remainder - temp_var5;\n      temp_var2 = (memory_address[0x13] - ((int)temp_var5 >> 0x1f)) - (uint)(remainder < temp_var5);\n      if (((int)((var7 - temp_var2) - (uint)(seconds < temp_var6)) < 0 ==\n           (SBORROW4(var7,temp_var2) != SBORROW4(var7 - temp_var2,(uint)(seconds < temp_var6)))) &&\n         (temp_var3 = (memory_address[0x13] - ((int)temp_var7 >> 0x1f)) - (uint)(remainder < temp_var7),\n         is_leap_year = seconds < remainder - temp_var7,\n         (int)((var7 - temp_var3) - (uint)is_leap_year) < 0 !=\n         (SBORROW4(var7,temp_var3) != SBORROW4(var7 - temp_var3,(uint)is_leap_year)))) goto LAB_00004a88;\n      remainder = memory_address[8] - temp_var7;\n      temp_var3 = (memory_address[9] - ((int)temp_var7 >> 0x1f)) - (uint)((uint)memory_address[8] < temp_var7);\n      if (*memory_address != 0) {\n        if ((int)((var7 - temp_var3) - (uint)(seconds < remainder)) < 0 ==\n            (SBORROW4(var7,temp_var3) != SBORROW4(var7 - temp_var3,(uint)(seconds < remainder))))\n        goto LAB_0000491e;\nLAB_0000492a:\n        temp_var6 = 0;\n        if ((int)temp_var11 < 0) goto LAB_00004934;\nLAB_00004a14:\n        seconds = is_negative ^ temp_var6;\n        is_negative = temp_var6;\n        if (seconds == 1) {\n          if (temp_var6 == 0) {\n            var7 = temp_var7 - temp_var5;\n          }\n          else {\n            var7 = temp_var5 - temp_var7;\n          }\n          temp_var2 = date[3];\n          *date = *date + var7;\n          updated_total_days = total_days + var7;\n          update_date(date);\n          temp_var2 = date[3] - temp_var2;\n          total_days = total_days + var7;\n          if (temp_var2 != 0) {\n            if (temp_var2 < 2) {\n              if (temp_var2 == -2 || temp_var2 + 2 < 0 != SCARRY4(temp_var2,2)) {\n                temp_var2 = 1;\n              }\n            }\n            else {\n              temp_var2 = -1;\n            }\n            var7 = temp_var2 + date[7];\n            temp_var8 = temp_var8 + temp_var2;\n            if (var7 < 0) {\n              temp_var6 = year - 1;\n              if ((temp_var6 & 3) == 0) {\n                if (temp_var6 == (temp_var6 / 100) * 100) {\n                  var7 = 0x16d;\n                  if ((year + 0x76b) % 400 != 0) {\n                    var7 = 0x16c;\n                  }\n                }\n                else {\n                  var7 = 0x16d;\n                }\n              }\n              else {\n                var7 = 0x16c;\n              }\n            }\n            else {\n              if ((year & 3) == 0) {\n                if (year == (year / 100) * 100) {\n                  temp_var2 = 0x16d;\n                  if ((year + 0x76c) % 400 == 0) {\n                    temp_var2 = 0x16e;\n                  }\n                }\n                else {\n                  temp_var2 = 0x16e;\n                }\n              }\n              else {\n                temp_var2 = 0x16d;\n              }\n              if (temp_var2 <= var7) {\n                var7 = var7 - temp_var2;\n              }\n            }\n            date[7] = var7;\n            total_days = updated_total_days;\n          }\n        }\n        goto LAB_00004a88;\n      }\n      if ((int)((var7 - temp_var3) - (uint)(seconds < remainder)) < 0 !=\n          (SBORROW4(var7,temp_var3) != SBORROW4(var7 - temp_var3,(uint)(seconds < remainder)))) {\nLAB_0000491e:\n        if ((int)((var7 - temp_var2) - (uint)(seconds < temp_var6)) < 0 ==\n            (SBORROW4(var7,temp_var2) != SBORROW4(var7 - temp_var2,(uint)(seconds < temp_var6))))\n        goto LAB_0000492a;\n      }\n      if (-1 < (int)temp_var11) {\n        temp_var6 = 1;\n        goto LAB_00004a14;\n      }\n    }\n    else {\nLAB_00004a88:\n      temp_var6 = is_negative;\n      if (is_negative != 1) goto LAB_00004934;\n    }\n    year = memory_address[0x14];\n    var7 = (uint)total_days + year;\n    temp_var2 = (int)((ulonglong)total_days >> 0x20) +\n            ((int)year >> 0x1f) + (uint)CARRY4((uint)total_days,year);\n    temp_var6 = 1;\n  }\n  get_memory_address2();\n  date[8] = temp_var6;\n  date[6] = (temp_var8 + 4U) % 7;\nLAB_00004aba:\n  return CONCAT44(temp_var2,var7);\n}\n\n",
            "renaming": {
                "FUN_000047e4": "calculate_updated_date_000047e4",
                "param_1": "date",
                "lVar1": "total_days",
                "lVar2": "updated_total_days",
                "piVar3": "memory_address",
                "uVar4": "remainder",
                "iVar5": "temp_var2",
                "iVar6": "temp_var3",
                "iVar7": "var7",
                "uVar8": "temp_var5",
                "uVar9": "temp_var6",
                "uVar10": "temp_var7",
                "iVar11": "temp_var8",
                "uVar12": "year",
                "uVar13": "is_negative",
                "uVar14": "temp_var11",
                "uVar15": "seconds",
                "bVar16": "is_leap_year",
                "get_memory_address_000056b0": "get_memory_address",
                "update_date_00004634": "update_date",
                "get_data_address_000050e8": "get_data_address",
                "process_data_00005100": "process_data",
                "calculate_day_of_week_00004f98": "calculate_day_of_week",
                "get_memory_address_000050f4": "get_memory_address2"
            },
            "calling": [
                "FUN_00002600",
                "FUN_00002654"
            ],
            "called": [
                "FUN_00005100",
                "FUN_000050e8",
                "FUN_00004f98",
                "FUN_000050f4",
                "FUN_00004634",
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000047e4": {
                    "1": "calculate_final_date",
                    "3": "calculate_new_date",
                    "11": "calculate_updated_date",
                    "2": "calculate_date_offset",
                    "4": "calculate_date",
                    "5": "calculate_adjusted_date"
                },
                "param_1": {
                    "12": "date",
                    "2": "date_info",
                    "1": "date_params",
                    "7": "date_array",
                    "3": "input_params"
                },
                "lVar1": {
                    "1": "days_since1970",
                    "16": "total_days",
                    "8": "total_seconds"
                },
                "lVar2": {
                    "8": "updated_total_days",
                    "1": "updated_days_since1970",
                    "3": "updated_seconds",
                    "2": "adjusted_total_days",
                    "5": "new_total_days"
                },
                "piVar3": {
                    "1": "memory_address_array",
                    "23": "memory_address"
                },
                "uVar4": {
                    "1": "year_related_value",
                    "3": "var4",
                    "4": "temp1",
                    "6": "temp_var1",
                    "2": "day_of_year"
                },
                "iVar5": {
                    "1": "leap_year_adjustment",
                    "3": "temp2",
                    "6": "temp_var2"
                },
                "iVar6": {
                    "5": "temp_var3",
                    "3": "temp3",
                    "1": "day_of_year",
                    "2": "temp_var8"
                },
                "iVar7": {
                    "1": "updated_value",
                    "3": "temp_var4",
                    "2": "result"
                },
                "uVar8": {
                    "1": "temp4",
                    "2": "temp_var4",
                    "4": "temp_var5",
                    "3": "var8"
                },
                "uVar9": {
                    "1": "temp4",
                    "3": "var9",
                    "2": "is_leap_year",
                    "4": "temp_var6"
                },
                "uVar10": {
                    "1": "base_year_days",
                    "4": "temp_var7",
                    "3": "var10",
                    "2": "temp7"
                },
                "iVar11": {
                    "1": "remaining_days",
                    "2": "total_weeks",
                    "3": "temp_var8"
                },
                "uVar12": {
                    "2": "extra_days",
                    "1": "result",
                    "7": "year",
                    "3": "temp_var9"
                },
                "uVar13": {
                    "1": "var13",
                    "3": "temp_var10",
                    "6": "is_negative",
                    "4": "is_leap_year"
                },
                "uVar14": {
                    "1": "limit",
                    "2": "var14",
                    "3": "temp_var11"
                },
                "uVar15": {
                    "1": "mod_minutes",
                    "2": "temp_var12",
                    "3": "seconds"
                },
                "bVar16": {
                    "2": "flag",
                    "1": "flag2",
                    "7": "is_leap_year"
                },
                "DAT_00007a2c": {
                    "1": "constant_array1"
                },
                "DAT_000056b0": {
                    "1": "constant"
                },
                "DAT_00002710": {
                    "1": "constant1"
                },
                "DAT_1fff0dd8": {
                    "1": "constant2"
                },
                "get_memory_address_000056b0": {
                    "2": "get_memory_address"
                },
                "update_date_00004634": {
                    "2": "update_date"
                },
                "get_data_address_000050e8": {
                    "2": "get_data_address"
                },
                "process_data_00005100": {
                    "2": "process_data"
                },
                "calculate_day_of_week_00004f98": {
                    "2": "calculate_day_of_week"
                },
                "get_memory_address_000050f4": {
                    "1": "get_memory_address2"
                },
                "uVar11": {
                    "1": "temp_var5"
                },
                "uVar16": {
                    "1": "temp10"
                },
                "bVar17": {
                    "1": "is_prev_leap_year"
                },
                "bVar18": {
                    "1": "is_negative_delta"
                }
            }
        },
        "FUN_00004b34": {
            "entrypoint": "0x00004b34",
            "current_name": "initialize_data_00004b34",
            "code": "\nvoid initialize_data_00004b34(undefined4 *output_array,int size,undefined4 param_3,undefined4 param_4)\n\n{\n  int *temp_ptr;\n  int **temp2;\n  int **current_ptr;\n  int **previous_ptr;\n  int **next_ptr;\n  int **new_node;\n  bool is_equal;\n  \n  if (size == 0) {\n    return;\n  }\n  new_node = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    new_node = (int **)((int)new_node + *(int *)(size + -4));\n  }\n  initialize_data_00004b34();\n  previous_ptr = (int **)&DAT_1fff0db4;\n  if (DAT_1fff0db4 == (int **)0x0) {\n    new_node[1] = (int *)0x0;\n    current_ptr = temp2;\n    DAT_1fff0db4 = new_node;\n  }\n  else {\n    next_ptr = DAT_1fff0db4;\n    if (new_node < DAT_1fff0db4) {\n      current_ptr = (int **)*new_node;\n      previous_ptr = (int **)((int)new_node + (int)current_ptr);\n      is_equal = DAT_1fff0db4 == previous_ptr;\n      if (is_equal) {\n        previous_ptr = (int **)*DAT_1fff0db4;\n        DAT_1fff0db4 = (int **)DAT_1fff0db4[1];\n      }\n      new_node[1] = (int *)DAT_1fff0db4;\n      DAT_1fff0db4 = new_node;\n      if (is_equal) {\n        previous_ptr = (int **)((int)previous_ptr + (int)current_ptr);\n        *new_node = (int *)previous_ptr;\n      }\n    }\n    else {\n      do {\n        previous_ptr = next_ptr;\n        next_ptr = (int **)previous_ptr[1];\n        if (next_ptr == (int **)0x0) break;\n      } while (next_ptr <= new_node);\n      current_ptr = (int **)*previous_ptr;\n      if ((int **)((int)previous_ptr + (int)current_ptr) == new_node) {\n        current_ptr = (int **)((int)current_ptr + (int)*new_node);\n        *previous_ptr = (int *)current_ptr;\n        if (next_ptr == (int **)((int)previous_ptr + (int)current_ptr)) {\n          temp_ptr = *next_ptr;\n          previous_ptr[1] = next_ptr[1];\n          current_ptr = (int **)((int)current_ptr + (int)temp_ptr);\n          *previous_ptr = (int *)current_ptr;\n        }\n      }\n      else if (new_node < (int **)((int)previous_ptr + (int)current_ptr)) {\n        *output_array = 0xc;\n      }\n      else {\n        current_ptr = (int **)((int)new_node + (int)*new_node);\n        is_equal = next_ptr == current_ptr;\n        if (is_equal) {\n          current_ptr = (int **)*next_ptr;\n          next_ptr = (int **)next_ptr[1];\n        }\n        new_node[1] = (int *)next_ptr;\n        if (is_equal) {\n          current_ptr = (int **)((int)current_ptr + (int)*new_node);\n          *new_node = (int *)current_ptr;\n        }\n        previous_ptr[1] = (int *)new_node;\n      }\n    }\n  }\n  initialize_data_00004b34_2(output_array,current_ptr,previous_ptr,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004b34": "initialize_data_00004b34",
                "param_1": "output_array",
                "param_2": "size",
                "piVar1": "temp_ptr",
                "extraout_r1": "temp2",
                "ppiVar2": "current_ptr",
                "ppiVar3": "previous_ptr",
                "ppiVar4": "next_ptr",
                "ppiVar5": "new_node",
                "bVar6": "is_equal",
                "initialize_data_00005790": "initialize_data",
                "initialize_data_0000579c": "initialize_data_2"
            },
            "calling": [
                "FUN_0000404c",
                "FUN_00006192",
                "FUN_00005780",
                "FUN_000054a8",
                "FUN_00006768",
                "FUN_000060cc"
            ],
            "called": [
                "FUN_00005790",
                "FUN_0000579c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004b34": {
                    "1": "initialize_data_and_update_pointers",
                    "2": "initialize_linked_list",
                    "20": "initialize_data",
                    "4": "update_data"
                },
                "param_1": {
                    "5": "output",
                    "2": "out_param",
                    "1": "ptr_data",
                    "4": "result"
                },
                "param_2": {
                    "1": "length",
                    "5": "input_size",
                    "2": "data_length",
                    "12": "size"
                },
                "param_3": {
                    "4": "param3",
                    "1": "input_param",
                    "19": "param_3"
                },
                "param_4": {
                    "1": "value2",
                    "4": "param4",
                    "19": "param_4"
                },
                "piVar1": {
                    "1": "previous_block_size",
                    "3": "temp1",
                    "11": "temp_ptr",
                    "5": "temp_var1"
                },
                "extraout_r1": {
                    "1": "temp_pointer",
                    "2": "temp_var2",
                    "3": "extra_output"
                },
                "ppiVar2": {
                    "2": "temp3",
                    "1": "previous_pointer",
                    "6": "current_ptr"
                },
                "ppiVar3": {
                    "5": "previous_ptr",
                    "1": "previous_pointer",
                    "2": "temp4",
                    "3": "prev_ptr"
                },
                "ppiVar4": {
                    "6": "next_ptr",
                    "1": "temp_var_5",
                    "2": "temp_var5",
                    "3": "next_node"
                },
                "ppiVar5": {
                    "7": "new_ptr",
                    "1": "new_entry",
                    "2": "temp_var6",
                    "9": "new_node"
                },
                "bVar6": {
                    "2": "is_match",
                    "1": "is_end_ptr",
                    "3": "is_last_node",
                    "16": "is_equal"
                },
                "initialize_data_00005790": {
                    "1": "initialize_data_func_1",
                    "2": "initialize_data_part1"
                },
                "initialize_data_0000579c": {
                    "1": "initialize_data_with_params",
                    "2": "initialize_data_2"
                },
                "DAT_1fff0db4": {
                    "1": "global_data_head",
                    "2": "head"
                },
                "*ppiVar5": {
                    "1": "data_value"
                },
                "0x0": {
                    "1": "null"
                },
                "NULL": {
                    "1": "null"
                },
                "0xc": {
                    "1": "error_code"
                }
            }
        },
        "FUN_00004bd0": {
            "entrypoint": "0x00004bd0",
            "current_name": "allocate_memory_00004bd0",
            "code": "\nuint allocate_memory_00004bd0(undefined4 *result,uint input_size,undefined4 param_3,undefined4 param_4)\n\n{\n  uint *prev_block;\n  int difference;\n  uint difference;\n  uint *current_block;\n  uint new_block_size;\n  \n  new_block_size = (input_size + 3 & 0xfffffffc) + 8;\n  if (new_block_size < 0xc) {\n    new_block_size = 0xc;\n  }\n  if (((int)new_block_size < 0) || (new_block_size < input_size)) {\n    *result = 0xc;\n  }\n  else {\n    initialize_data1();\n    prev_block = DAT_1fff0db4;\n    for (current_block = DAT_1fff0db4; current_block != (uint *)0x0; current_block = (uint *)current_block[1]) {\n      difference = *current_block - new_block_size;\n      if (-1 < (int)difference) {\n        if (0xb < difference) {\n          *current_block = difference;\n          current_block = (uint *)((int)current_block + difference);\n          goto skip_to_next_iteration;\n        }\n        if (prev_block == current_block) {\n          DAT_1fff0db4 = (uint *)current_block[1];\n        }\n        if (prev_block != current_block) {\n          prev_block[1] = (uint)(uint *)current_block[1];\n        }\n        goto LAB_00004c42;\n      }\n      prev_block = current_block;\n    }\n    if (DAT_1fff0db8 == 0) {\n      DAT_1fff0db8 = update_offset(result,0,prev_block,0,param_4);\n    }\n    prev_block = (uint *)update_offset(result,new_block_size);\n    if ((prev_block != (uint *)0xffffffff) &&\n       ((current_block = (uint *)((int)prev_block + 3U & 0xfffffffc), prev_block == current_block ||\n        (difference = update_offset(result,(int)current_block - (int)prev_block), difference != -1)))) {\nskip_to_next_iteration:\n      *current_block = new_block_size;\nLAB_00004c42:\n      initialize_data2(result);\n      new_block_size = (int)current_block + 0xbU & 0xfffffff8;\n      difference = new_block_size - (int)(current_block + 1);\n      if (difference == 0) {\n        return new_block_size;\n      }\n      *(uint *)((int)current_block + difference) = (int)(current_block + 1) - new_block_size;\n      return new_block_size;\n    }\n    *result = 0xc;\n    initialize_data2(result);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004bd0": "allocate_memory_00004bd0",
                "param_1": "result",
                "param_2": "input_size",
                "puVar1": "prev_block",
                "iVar2": "difference",
                "uVar3": "difference",
                "puVar4": "current_block",
                "uVar5": "new_block_size",
                "initialize_data_00005790": "initialize_data1",
                "LAB_00004c34": "skip_to_next_iteration",
                "initialize_data_0000579c": "initialize_data2",
                "update_offset_00000428": "update_offset"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000068f0",
                "FUN_000060cc",
                "FUN_00005700",
                "FUN_00004248"
            ],
            "called": [
                "FUN_00005790",
                "FUN_00000428",
                "FUN_0000579c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004bd0": {
                    "1": "calculate_memory_offset",
                    "4": "initialize_memory_block",
                    "2": "initialize_and_allocate_memory",
                    "9": "allocate_memory"
                },
                "param_1": {
                    "2": "buffer",
                    "1": "ptr_to_size",
                    "3": "result_ptr",
                    "5": "output",
                    "6": "result",
                    "4": "output_buffer"
                },
                "param_2": {
                    "1": "requested_size",
                    "13": "input_size",
                    "12": "size"
                },
                "param_3": {
                    "2": "unused_param1",
                    "1": "unused_param_1",
                    "4": "arg3",
                    "3": "unused_param",
                    "10": "param_3"
                },
                "param_4": {
                    "3": "unused_param_2",
                    "4": "arg4",
                    "1": "unused2",
                    "2": "unused_param2",
                    "10": "param_4"
                },
                "puVar1": {
                    "8": "prev_block",
                    "2": "current_pointer",
                    "1": "prev_node",
                    "5": "current_block",
                    "3": "previous_block"
                },
                "iVar2": {
                    "1": "chunk_size_difference",
                    "2": "offset_diff",
                    "4": "offset",
                    "18": "difference"
                },
                "uVar3": {
                    "2": "block_size",
                    "1": "block_size_difference",
                    "5": "difference",
                    "3": "block_size_diff"
                },
                "puVar4": {
                    "1": "current_pointer",
                    "9": "current_block",
                    "2": "previous_pointer",
                    "3": "current_chunk"
                },
                "uVar5": {
                    "1": "new_buffer_size",
                    "4": "aligned_size",
                    "5": "new_size",
                    "2": "block_size",
                    "6": "new_block_size"
                },
                "<FUN_00004bd0>": {
                    "1": "<initialize_data_and_update_offset>"
                },
                "<param_1>": {
                    "1": "<output_buffer>"
                },
                "<param_2>": {
                    "1": "<buffer_size>"
                },
                "<param_3>": {
                    "1": "<unused_parameter_1>"
                },
                "<param_4>": {
                    "1": "<unused_parameter_2>"
                },
                "<puVar1>": {
                    "1": "<current_ptr>"
                },
                "<iVar2>": {
                    "1": "<temp_var>"
                },
                "<uVar3>": {
                    "1": "<difference>"
                },
                "<puVar4>": {
                    "1": "<next_ptr>"
                },
                "<uVar5>": {
                    "1": "<aligned_buffer_size>"
                },
                "*param_1": {
                    "1": "output_offset"
                },
                "initialize_data_00005790": {
                    "1": "initialize_data1"
                },
                "DAT_1fff0db4": {
                    "1": "first_chunk"
                },
                "LAB_00004c34": {
                    "1": "skip_to_next_iteration"
                },
                "initialize_data_0000579c": {
                    "1": "initialize_data2"
                },
                "DAT_1fff0db8": {
                    "1": "output_offset"
                },
                "update_offset_00000428": {
                    "1": "update_offset"
                }
            }
        },
        "FUN_00004c84": {
            "entrypoint": "0x00004c84",
            "current_name": "process_and_initialize_data_00004c84",
            "code": "\nvoid process_and_initialize_data_00004c84(undefined4 input_param,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  dword offset;\n  undefined4 input_param_copy;\n  undefined4 param_2_copy;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  input_param_copy = input_param;\n  param_2_copy = param_2;\n  param_3_copy = param_3;\n  param_4_copy = param_4;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_memory_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  process_data_000057f8(offset,*(undefined4 *)(offset + 8),input_param,&param_2_copy,input_param_copy,&param_2_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004c84": "process_and_initialize_data_00004c84",
                "param_1": "input_param",
                "dVar1": "offset",
                "uVar2": "input_param_copy",
                "uStack_c": "param_2_copy",
                "uStack_8": "param_3_copy",
                "uStack_4": "param_4_copy"
            },
            "calling": [
                "FUN_00000ed8",
                "FUN_00003694",
                "FUN_00002fe0",
                "FUN_00002b10",
                "FUN_00002a88",
                "FUN_0000211c",
                "FUN_00002f74",
                "FUN_00003524",
                "FUN_00002ecc",
                "FUN_0000316c",
                "FUN_00000f04",
                "FUN_00003378",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_000057f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004c84": {
                    "6": "process_data",
                    "2": "process_elf_data",
                    "3": "process_data_and_initialize_memory",
                    "1": "process_data_with_memory_initialization",
                    "14": "process_and_initialize_data"
                },
                "param_1": {
                    "1": "value1",
                    "2": "data_1",
                    "5": "data_param",
                    "4": "input_param_1",
                    "13": "input_param"
                },
                "param_2": {
                    "4": "input_param_2",
                    "1": "param_1",
                    "2": "input_2",
                    "12": "param_2"
                },
                "param_3": {
                    "2": "data_3",
                    "1": "param_2",
                    "4": "input_param_3",
                    "12": "param_3"
                },
                "param_4": {
                    "4": "input_param_4",
                    "1": "value4",
                    "2": "data_4",
                    "12": "param_4"
                },
                "dVar1": {
                    "9": "rel_offset",
                    "1": "array_offset",
                    "14": "offset",
                    "4": "data_offset"
                },
                "uVar2": {
                    "1": "data_var",
                    "2": "var1",
                    "4": "data_param_copy",
                    "6": "input_param_copy"
                },
                "uStack_c": {
                    "1": "param_c",
                    "2": "stack_c",
                    "4": "param_2_copy"
                },
                "uStack_8": {
                    "2": "input_param_3_copy",
                    "1": "stack_var_8",
                    "3": "param_3_copy"
                },
                "uStack_4": {
                    "1": "param_4",
                    "2": "stack_4",
                    "3": "param_4_copy"
                }
            }
        },
        "FUN_00004cb4": {
            "entrypoint": "0x00004cb4",
            "current_name": "process_data_00004cb4",
            "code": "\nuint process_data_00004cb4(uint input_data)\n\n{\n  dword rel_offset;\n  undefined4 *data_ptr;\n  uint count;\n  undefined *byte_ptr;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  \n  rel_offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_memory_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  data_ptr = *(undefined4 **)(rel_offset + 8);\n  if ((rel_offset != 0) && (*(int *)(rel_offset + 0x18) == 0)) {\n    initialize_memory_000042a4();\n  }\n  if (data_ptr == &DAT_000079b8) {\n    data_ptr = *(undefined4 **)(rel_offset + 4);\n  }\n  else if (data_ptr == (undefined4 *)&DAT_000079d8) {\n    data_ptr = *(undefined4 **)(rel_offset + 8);\n  }\n  else if (data_ptr == (undefined4 *)&DAT_00007998) {\n    data_ptr = *(undefined4 **)(rel_offset + 0xc);\n  }\n  if ((-1 < (int)(data_ptr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x16))) {\n    FUNC_000045e8(data_ptr[0x16]);\n  }\n  count = data_ptr[2] - 1;\n  data_ptr[2] = count;\n  if (((int)count < 0) && (((int)count < (int)data_ptr[6] || (count = input_data & 0xff, count == 10))))\n  {\n    input_data = process_data_00004cb4_00005404(rel_offset,input_data,data_ptr,count,unaff_r4,unaff_r5);\n  }\n  else {\n    byte_ptr = (undefined *)*data_ptr;\n    *data_ptr = byte_ptr + 1;\n    *byte_ptr = (char)input_data;\n    input_data = input_data & 0xff;\n  }\n  if ((-1 < (int)(data_ptr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x16))) {\n    FUNC_000045ec(data_ptr[0x16]);\n  }\n  return input_data;\n}\n\n",
            "renaming": {
                "FUN_00004cb4": "process_data_00004cb4",
                "param_1": "input_data",
                "dVar1": "rel_offset",
                "puVar2": "data_ptr",
                "puVar4": "byte_ptr",
                "uVar3": "count"
            },
            "calling": [
                "FUN_00002a00"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00005404",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004cb4": {
                    "4": "process_input",
                    "1": "decode_and_process_data",
                    "22": "process_data"
                },
                "param_1": {
                    "4": "input",
                    "3": "data",
                    "9": "input_value",
                    "1": "processed_data",
                    "14": "input_data"
                },
                "dVar1": {
                    "1": "data_offset",
                    "12": "offset"
                },
                "puVar2": {
                    "1": "current_pointer",
                    "14": "data_ptr",
                    "4": "pointer",
                    "3": "current_data",
                    "2": "ptr"
                },
                "puVar4": {
                    "7": "byte_ptr",
                    "3": "data_ptr",
                    "1": "next_data",
                    "2": "current_byte"
                },
                "unaff_r4": {
                    "1": "unaffected_register_4",
                    "3": "unaff_r4",
                    "2": "register_4"
                },
                "unaff_r5": {
                    "1": "arg2",
                    "2": "register_5",
                    "3": "unaff_r5"
                },
                "uVar3": {
                    "1": "count_value",
                    "15": "count",
                    "8": "counter",
                    "2": "updated_value"
                },
                "<original_function_name>": {
                    "1": "process_and_update_data"
                }
            }
        },
        "FUN_00004db8": {
            "entrypoint": "0x00004db8",
            "current_name": "process_data_00004db8",
            "code": "\nundefined4 process_data_00004db8(int input)\n\n{\n  char current_char;\n  dword offset;\n  int result;\n  char *string_ptr;\n  char **data_ptr;\n  undefined4 return_value;\n  char *char_ptr;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_memory();\n  }\n  data_ptr = *(char ***)(offset + 8);\n  if (*(int *)(offset + 0x18) == 0) {\n    initialize_memory(offset);\n  }\n  if (data_ptr == (char **)&DAT_000079b8) {\n    data_ptr = *(char ***)(offset + 4);\n  }\n  else if (data_ptr == (char **)&DAT_000079d8) {\n    data_ptr = *(char ***)(offset + 8);\n  }\n  else if (data_ptr == (char **)&DAT_00007998) {\n    data_ptr = *(char ***)(offset + 0xc);\n  }\n  if ((-1 < (int)data_ptr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x16))) {\n    FUNC_000045e8(data_ptr[0x16]);\n  }\n  if ((((int)((uint)*(ushort *)(data_ptr + 3) << 0x1c) < 0) && (data_ptr[4] != (char *)0x0)) ||\n     (result = process_data_00004db81(offset,data_ptr), result == 0)) {\n    char_ptr = (char *)(input + -1);\n    do {\n      while( true ) {\n        char_ptr = char_ptr + 1;\n        current_char = *char_ptr;\n        string_ptr = data_ptr[2] + -1;\n        data_ptr[2] = string_ptr;\n        if (current_char == '\\0') {\n          if (-1 < (int)string_ptr) {\n            char_ptr = *data_ptr;\n            return_value = 10;\n            *data_ptr = char_ptr + 1;\n            *char_ptr = '\\n';\n            goto LAB_00004d64;\n          }\n          result = process_data_00004db82(offset,10,data_ptr);\n          if (result != -1) {\n            return_value = 10;\n            goto LAB_00004d64;\n          }\n          goto LAB_00004d60;\n        }\n        if (((int)string_ptr < 0) && (((int)string_ptr < (int)data_ptr[6] || (current_char == '\\n')))) break;\n        string_ptr = *data_ptr;\n        *data_ptr = string_ptr + 1;\n        *string_ptr = current_char;\n      }\n      result = process_data_00004db82(offset,current_char,data_ptr);\n    } while (result != -1);\n  }\nLAB_00004d60:\n  return_value = 0xffffffff;\nLAB_00004d64:\n  if ((-1 < (int)data_ptr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x16))) {\n    FUNC_000045ec(data_ptr[0x16]);\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00004db8": "process_data_00004db8",
                "param_1": "input",
                "cVar1": "current_char",
                "dVar2": "offset",
                "iVar3": "result",
                "pcVar4": "string_ptr",
                "ppcVar5": "data_ptr",
                "uVar6": "return_value",
                "pcVar7": "char_ptr",
                "initialize_memory_000042a4": "initialize_memory",
                "process_data_000054a8": "process_data1",
                "process_data_00005404": "process_data2"
            },
            "calling": [
                "FUN_00003694",
                "FUN_00003478",
                "FUN_00002fe0",
                "FUN_000031e0",
                "FUN_00002b10",
                "FUN_00002a88",
                "FUN_000033f4",
                "FUN_00002f74",
                "FUN_000034c0",
                "FUN_00003444",
                "FUN_00002f30",
                "FUN_0000305c",
                "FUN_000033c0",
                "FUN_000023a4"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00005404",
                "FUN_000054a8",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004db8": {
                    "2": "process_input_data",
                    "17": "process_data",
                    "3": "process_function",
                    "1": "process_and_initialize_data"
                },
                "param_1": {
                    "11": "input",
                    "2": "input_param",
                    "1": "input_parameter",
                    "4": "input_value",
                    "3": "input_size",
                    "8": "input_data"
                },
                "cVar1": {
                    "4": "current_character",
                    "1": "char_value",
                    "3": "character",
                    "23": "current_char"
                },
                "dVar2": {
                    "5": "rel_offset",
                    "1": "data_offset",
                    "17": "offset",
                    "4": "r_offset"
                },
                "iVar3": {
                    "24": "result",
                    "4": "return_value",
                    "1": "result_code"
                },
                "pcVar4": {
                    "1": "ptr_value",
                    "4": "ptr",
                    "3": "str_ptr",
                    "6": "string_ptr"
                },
                "ppcVar5": {
                    "5": "data_pointer",
                    "1": "string_ptr",
                    "9": "data_ptr",
                    "4": "string_array"
                },
                "uVar6": {
                    "1": "output",
                    "19": "return_value",
                    "3": "return_val",
                    "5": "result"
                },
                "pcVar7": {
                    "1": "input_pointer",
                    "2": "temp_ptr",
                    "3": "char_ptr"
                },
                "FUNC_000045e8": {
                    "1": "perform_action1"
                },
                "FUNC_000045ec": {
                    "1": "perform_action2"
                },
                "initialize_memory_000042a4": {
                    "2": "initialize_memory"
                },
                "process_data_000054a8": {
                    "2": "process_data1"
                },
                "process_data_00005404": {
                    "2": "process_data2"
                }
            }
        },
        "FUN_00004dc8": {
            "entrypoint": "0x00004dc8",
            "current_name": "update_value_00004dc8",
            "code": "\nvoid update_value_00004dc8(undefined4 input_array,int data)\n\n{\n  int result;\n  uint updated_value;\n  bool is_positive;\n  \n  result = copy_and_increment_loop_00000490(input_array,(int)*(short *)(data + 0xe));\n  is_positive = -1 < result;\n  if (is_positive) {\n    updated_value = *(int *)(data + 0x54) + result;\n  }\n  else {\n    updated_value = *(ushort *)(data + 0xc) & 0xffffefff;\n  }\n  if (is_positive) {\n    *(uint *)(data + 0x54) = updated_value;\n  }\n  if (!is_positive) {\n    *(short *)(data + 0xc) = (short)updated_value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004dc8": "update_value_00004dc8",
                "param_1": "input_array",
                "param_2": "data",
                "iVar1": "result",
                "uVar2": "updated_value",
                "bVar3": "is_positive"
            },
            "calling": [],
            "called": [
                "FUN_00000490"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004dc8": {
                    "1": "copy_and_increment",
                    "7": "update_value",
                    "4": "copy_and_increment_loop",
                    "5": "update_values"
                },
                "param_1": {
                    "2": "source_array",
                    "1": "input_ptr",
                    "5": "input_array"
                },
                "param_2": {
                    "3": "data",
                    "1": "context",
                    "2": "source_array"
                },
                "iVar1": {
                    "1": "copy_return_value",
                    "2": "copied_value",
                    "15": "result"
                },
                "uVar2": {
                    "12": "new_value",
                    "17": "updated_value",
                    "1": "new_data"
                },
                "bVar3": {
                    "2": "is_copy_successful",
                    "1": "is_valid_copy",
                    "3": "is_successful",
                    "4": "is_copied",
                    "12": "is_positive"
                }
            }
        },
        "FUN_00004dee": {
            "entrypoint": "0x00004dee",
            "current_name": "initialize_and_copy_00004dee",
            "code": "\nundefined4 initialize_and_copy_00004dee(undefined4 output,int input,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 result;\n  \n  if ((int)((uint)*(ushort *)(input + 0xc) << 0x17) < 0) {\n    initialize_variable(output,(int)*(short *)(input + 0xe),0,2);\n  }\n  *(ushort *)(input + 0xc) = *(ushort *)(input + 0xc) & 0xefff;\n  result = copy_and_return_param(param_3,param_4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004dee": "initialize_and_copy_00004dee",
                "param_1": "output",
                "param_2": "input",
                "uVar1": "result",
                "initialize_variable_000004f2": "initialize_variable",
                "copy_and_return_param_00000e38": "copy_and_return_param"
            },
            "calling": [],
            "called": [
                "FUN_000004f2",
                "FUN_00000e38"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004dee": {
                    "1": "update_variable_and_copy",
                    "3": "process_data",
                    "8": "initialize_and_copy",
                    "2": "initialize_or_copy_data",
                    "5": "initialize_variable"
                },
                "param_1": {
                    "1": "dst_ptr",
                    "5": "output_param",
                    "2": "param_1",
                    "8": "output",
                    "4": "param"
                },
                "param_2": {
                    "8": "input",
                    "1": "variable2",
                    "2": "input_ptr",
                    "4": "input_param"
                },
                "param_3": {
                    "2": "copy_param_1",
                    "1": "data_1",
                    "3": "param3",
                    "5": "source",
                    "8": "param_3"
                },
                "param_4": {
                    "5": "destination",
                    "3": "param4",
                    "1": "destination_parameter",
                    "8": "param_4",
                    "2": "copy_param_2"
                },
                "uVar1": {
                    "1": "copy_result",
                    "6": "return_value",
                    "16": "result"
                },
                "initialize_variable_000004f2": {
                    "1": "initialize_variable_func",
                    "7": "initialize_variable"
                },
                "copy_and_return_param_00000e38": {
                    "1": "copy_and_return_parameter",
                    "7": "copy_and_return_param"
                },
                "*(ushort *)(param_2 + 0xc)": {
                    "1": "memory_value"
                },
                "*(short *)(param_2 + 0xe)": {
                    "1": "variable_value"
                },
                "*(ushort *)(param_2 + 0xe)": {
                    "1": "input_param1_ushort2"
                },
                "<unnamed_variable_1>": {
                    "1": "temp_1"
                },
                "<unnamed_variable_2>": {
                    "1": "temp_2"
                }
            }
        },
        "FUN_00004e26": {
            "entrypoint": "0x00004e26",
            "current_name": "initialize_variable_00004e26",
            "code": "\nvoid initialize_variable_00004e26(undefined4 arg1,int arg2)\n\n{\n  int initialized_value;\n  ushort updated_value;\n  bool is_initialized;\n  \n  initialized_value = initialize_var_func(arg1,(int)*(short *)(arg2 + 0xe));\n  is_initialized = initialized_value == -1;\n  if (is_initialized) {\n    updated_value = *(ushort *)(arg2 + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(arg2 + 0x54) = initialized_value;\n    updated_value = *(ushort *)(arg2 + 0xc) | 0x1000;\n  }\n  if (is_initialized) {\n    *(ushort *)(arg2 + 0xc) = updated_value;\n  }\n  if (!is_initialized) {\n    *(ushort *)(arg2 + 0xc) = updated_value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004e26": "initialize_variable_00004e26",
                "param_1": "arg1",
                "param_2": "arg2",
                "iVar1": "initialized_value",
                "uVar2": "updated_value",
                "bVar3": "is_initialized",
                "initialize_variable_000004f2": "initialize_var_func"
            },
            "calling": [],
            "called": [
                "FUN_000004f2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004e26": {
                    "2": "initialize_and_update_value",
                    "1": "initialize_and_set_flag",
                    "3": "update_variable",
                    "10": "initialize_variable"
                },
                "param_1": {
                    "2": "status",
                    "1": "user_input",
                    "7": "arg1",
                    "4": "input_param"
                },
                "param_2": {
                    "2": "memory_address",
                    "6": "data",
                    "1": "var2",
                    "4": "data_ptr",
                    "7": "arg2"
                },
                "iVar1": {
                    "5": "result",
                    "11": "initialized_value",
                    "8": "initialized_var",
                    "7": "initialized_variable"
                },
                "uVar2": {
                    "2": "modified_value",
                    "1": "new_var",
                    "21": "updated_value"
                },
                "bVar3": {
                    "1": "is_initialized_value_minus_one",
                    "2": "is_invalid",
                    "7": "is_error",
                    "15": "is_initialized"
                },
                "initialize_variable_000004f2": {
                    "1": "initialize_var_func"
                }
            }
        },
        "FUN_00004e52": {
            "entrypoint": "0x00004e52",
            "current_name": "compare_byte_arrays_00004e52",
            "code": "\nint compare_byte_arrays_00004e52(byte *array1,byte *array2)\n\n{\n  byte current_byte;\n  uint current_byte2;\n  bool is_equal;\n  \n  do {\n    current_byte2 = (uint)*array1;\n    current_byte = *array2;\n    is_equal = current_byte2 == 1;\n    if (current_byte2 != 0) {\n      is_equal = current_byte2 == current_byte;\n    }\n    array1 = array1 + 1;\n    array2 = array2 + 1;\n  } while (is_equal);\n  return current_byte2 - current_byte;\n}\n\n",
            "renaming": {
                "FUN_00004e52": "compare_byte_arrays_00004e52",
                "param_1": "array1",
                "param_2": "array2",
                "uVar2": "current_byte2",
                "bVar1": "current_byte",
                "bVar3": "is_equal"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00002a18",
                "FUN_00004e52",
                "FUN_00002fe0",
                "FUN_0000316c",
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004e52": {
                    "1": "compare_and_subtract_bytes",
                    "3": "compare_and_subtract",
                    "7": "compare_bytes",
                    "2": "calculate_difference",
                    "13": "compare_byte_arrays"
                },
                "param_1": {
                    "3": "data1",
                    "1": "source_bytes",
                    "2": "input1",
                    "6": "byte_array1",
                    "11": "array1"
                },
                "param_2": {
                    "3": "data2",
                    "2": "buffer2",
                    "6": "byte_array2",
                    "1": "comparison_string",
                    "11": "array2"
                },
                "uVar2": {
                    "1": "result",
                    "3": "first_byte",
                    "4": "byte1",
                    "5": "current_byte2"
                },
                "bVar1": {
                    "5": "current_byte1",
                    "1": "element2",
                    "2": "second_byte",
                    "4": "byte2",
                    "7": "current_byte"
                },
                "bVar3": {
                    "1": "is_matching",
                    "8": "is_match",
                    "17": "is_equal"
                }
            }
        },
        "FUN_00004e66": {
            "entrypoint": "0x00004e66",
            "current_name": "compare_bytes_00004e66",
            "code": "\nint compare_bytes_00004e66(byte *array1,int start_index,int length)\n\n{\n  byte *current_byte;\n  int difference;\n  byte *next_byte;\n  uint current_byte_value;\n  \n  if (length == 0) {\n    difference = 0;\n  }\n  else {\n    next_byte = (byte *)(start_index + -1);\n    current_byte = array1;\n    do {\n      current_byte_value = (uint)*current_byte;\n      next_byte = next_byte + 1;\n      if ((current_byte_value != *next_byte) || (current_byte + 1 == array1 + length)) break;\n      current_byte = current_byte + 1;\n    } while (current_byte_value != 0);\n    difference = current_byte_value - *next_byte;\n  }\n  return difference;\n}\n\n",
            "renaming": {
                "FUN_00004e66": "compare_bytes_00004e66",
                "param_1": "array1",
                "param_2": "start_index",
                "param_3": "length",
                "pbVar1": "current_byte",
                "iVar2": "difference",
                "pbVar3": "next_byte",
                "uVar4": "current_byte_value"
            },
            "calling": [
                "FUN_00003524",
                "FUN_0000562c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004e66": {
                    "7": "compare_arrays",
                    "1": "compare_and_get_difference",
                    "13": "compare_bytes",
                    "3": "compare_byte_arrays"
                },
                "param_1": {
                    "5": "data",
                    "1": "source_bytes",
                    "3": "byte_array",
                    "2": "input_array",
                    "4": "buffer",
                    "10": "array1"
                },
                "param_2": {
                    "1": "array1_length",
                    "11": "start_index",
                    "5": "offset"
                },
                "param_3": {
                    "3": "array_length",
                    "1": "array1_length",
                    "2": "array2_length",
                    "21": "length"
                },
                "pbVar1": {
                    "1": "current_element1",
                    "2": "source_ptr",
                    "3": "ptr1",
                    "14": "current_byte"
                },
                "iVar2": {
                    "23": "difference",
                    "1": "offset",
                    "4": "result"
                },
                "pbVar3": {
                    "1": "array2_byte",
                    "10": "next_byte",
                    "2": "array2",
                    "3": "ptr2"
                },
                "uVar4": {
                    "7": "current_byte_value",
                    "2": "source_byte",
                    "1": "array1_byte",
                    "3": "current_value"
                }
            }
        },
        "FUN_00004f84": {
            "entrypoint": "0x00004f84",
            "current_name": "parse_integer_00004f84",
            "code": "\nuint parse_integer_00004f84(byte *input_string,byte **output_pointer,uint base)\n\n{\n  uint result;\n  uint current_char;\n  uint is_negative;\n  uint digit_value;\n  int comparison_result;\n  uint max_value;\n  uint quotient;\n  byte *current_byte;\n  byte *next_byte;\n  \n  next_byte = input_string;\n  do {\n    current_byte = next_byte;\n    next_byte = current_byte + 1;\n    current_char = (uint)*current_byte;\n    is_negative = (byte)(&DAT_00007a99)[current_char] & 8;\n  } while (((&DAT_00007a99)[current_char] & 8) != 0);\n  if (current_char == 0x2d) {\n    current_char = (uint)*next_byte;\n    is_negative = 1;\n    next_byte = current_byte + 2;\n  }\n  else if (current_char == 0x2b) {\n    current_char = (uint)*next_byte;\n    next_byte = current_byte + 2;\n  }\n  if (base == 0) {\n    if (current_char != 0x30) {\n      base = 10;\n      goto LAB_00004ed6;\n    }\n  }\n  else if ((base != 0x10) || (current_char != 0x30)) goto LAB_00004ed6;\n  if ((*next_byte & 0xdf) == 0x58) {\n    current_char = (uint)next_byte[1];\n    base = 0x10;\n    next_byte = next_byte + 2;\n  }\n  else {\n    current_char = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00004ed6:\n  max_value = is_negative + 0x7fffffff;\n  comparison_result = 0;\n  quotient = max_value / base;\n  result = 0;\n  do {\n    digit_value = current_char - 0x30;\n    if (9 < digit_value) {\n      if (current_char - 0x41 < 0x1a) {\n        digit_value = current_char - 0x37;\n      }\n      else {\n        if (0x19 < current_char - 0x61) break;\n        digit_value = current_char - 0x57;\n      }\n    }\n    if ((int)base <= (int)digit_value) break;\n    if (comparison_result != -1) {\n      if ((quotient < result) || ((quotient == result && ((int)(max_value - base * quotient) < (int)digit_value)))) {\n        comparison_result = -1;\n      }\n      else {\n        result = result * base + digit_value;\n        comparison_result = 1;\n      }\n    }\n    current_char = (uint)*next_byte;\n    next_byte = next_byte + 1;\n  } while( true );\n  if (comparison_result == -1) {\n    *(undefined4 *)Elf32_Rel_ARRAY_1fff0200[16].r_offset = 0x22;\n    result = max_value;\n    if (output_pointer == (byte **)0x0) {\n      return max_value;\n    }\n  }\n  else {\n    if (is_negative != 0) {\n      result = -result;\n    }\n    if (output_pointer == (byte **)0x0) {\n      return result;\n    }\n    if (comparison_result == 0) goto LAB_00004f64;\n  }\n  input_string = next_byte + -1;\nLAB_00004f64:\n  *output_pointer = input_string;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004f84": "parse_integer_00004f84",
                "param_1": "input_string",
                "param_2": "output_pointer",
                "param_3": "base",
                "uVar1": "result",
                "uVar2": "current_char",
                "uVar3": "is_negative",
                "uVar4": "digit_value",
                "iVar5": "comparison_result",
                "uVar6": "max_value",
                "uVar7": "quotient",
                "pbVar8": "current_byte",
                "pbVar9": "next_byte"
            },
            "calling": [
                "FUN_00004042",
                "FUN_0000328c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004f84": {
                    "1": "parse_unsigned_int",
                    "9": "parse_integer",
                    "4": "convert_string_to_number",
                    "7": "parse_number",
                    "2": "parse_number_from_string"
                },
                "param_1": {
                    "5": "input",
                    "19": "input_string",
                    "2": "input_data",
                    "1": "input_str"
                },
                "param_2": {
                    "4": "output",
                    "2": "parsed_string",
                    "5": "output_pointer",
                    "1": "rest"
                },
                "param_3": {
                    "1": "number_base",
                    "26": "base",
                    "4": "radix"
                },
                "uVar1": {
                    "4": "parsed_number",
                    "1": "number",
                    "2": "parsed_value",
                    "22": "result"
                },
                "uVar2": {
                    "1": "current_value",
                    "5": "ch",
                    "22": "current_char"
                },
                "uVar3": {
                    "1": "char_props",
                    "25": "is_negative"
                },
                "uVar4": {
                    "20": "digit_value",
                    "2": "parsed_digit",
                    "3": "char_value",
                    "5": "digit",
                    "1": "char_flag_temp"
                },
                "iVar5": {
                    "1": "result",
                    "2": "sign",
                    "9": "comparison_result",
                    "4": "comparison"
                },
                "uVar6": {
                    "1": "int32_max",
                    "2": "max_int",
                    "15": "max_value"
                },
                "uVar7": {
                    "1": "max_div",
                    "2": "max_divisor",
                    "4": "dividend",
                    "3": "divisor",
                    "15": "quotient"
                },
                "pbVar8": {
                    "3": "current_ptr",
                    "5": "current_char",
                    "1": "current_pointer",
                    "19": "current_byte"
                },
                "pbVar9": {
                    "19": "next_byte",
                    "1": "next_pointer",
                    "4": "next_ptr",
                    "6": "next_char"
                }
            }
        },
        "FUN_00004f98": {
            "entrypoint": "0x00004f98",
            "current_name": "calculate_day_of_week_00004f98",
            "code": "\nundefined4 calculate_day_of_week_00004f98(uint year)\n\n{\n  uint *memory_address;\n  undefined4 result;\n  uint day_of_week;\n  int offset;\n  uint *ptr;\n  int year_offset;\n  uint is_leap_year;\n  int i;\n  int day_offset;\n  uint is_multiple_of400;\n  \n  memory_address = (uint *)get_memory_address();\n  if ((int)year < 0x7b2) {\n    result = 0;\n  }\n  else {\n    year_offset = (year - 0x7b2) * 0x16d + ((int)(year - 0x7b1) >> 2) +\n            (year - 0x76d) / 0xffffff9c + (year - 0x641) / 400;\n    memory_address[1] = year;\n    is_multiple_of400 = (uint)(year % 400 == 0);\n    ptr = memory_address;\n    do {\n      day_of_week = ptr[5];\n      if (*(char *)(ptr + 2) == 'J') {\n        if ((((year & 3) == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\n          if ((int)day_of_week < 0x3c) {\n            offset = 0;\n          }\n          else {\n            offset = 1;\n          }\n        }\n        else {\n          offset = 0;\n        }\n        offset = offset + year_offset + day_of_week + -1;\n      }\n      else if (*(char *)(ptr + 2) == 'D') {\n        offset = year_offset + day_of_week;\n      }\n      else {\n        is_leap_year = is_multiple_of400;\n        if (((year & 3) == 0) && (year % 100 != 0)) {\n          is_leap_year = 1;\n        }\n        i = 0;\n        offset = year_offset;\n        while( true ) {\n          i = i + 1;\n          if ((int)ptr[3] <= i) break;\n          offset = offset + *(int *)(&weekday_correction_table + i * 4 + is_leap_year * 0x30);\n        }\n        day_offset = day_of_week - (offset + 4U) % 7;\n        if (day_offset < 0) {\n          day_offset = day_offset + 7;\n        }\n        for (day_offset = (ptr[4] - 1) * 7 + day_offset;\n            *(int *)(&weekday_correction_table + i * 4 + is_leap_year * 0x30) <= day_offset; day_offset = day_offset + -7) {\n        }\n        offset = offset + day_offset;\n      }\n      day_of_week = year_adjustment + offset * 0x15180 + start_day_of_week;\n      result = day_of_week;\n      carry_bit = (int)day_of_week >> 0x1f;\n      ptr = ptr + 10;\n    } while (memory_address + 0x14 != ptr);\n    day_of_week = memory_address[9];\n    is_multiple_of400 = carry_bit;\n    *memory_address = (uint)((int)((day_of_week - is_multiple_of400) - (uint)(memory_address[8] < has_carry)) < 0 !=\n                    (SBORROW4(day_of_week,is_multiple_of400) !=\n                    SBORROW4(day_of_week - is_multiple_of400,(uint)(memory_address[8] < has_carry))));\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004f98": "calculate_day_of_week_00004f98",
                "param_1": "year",
                "puVar1": "memory_address",
                "uVar2": "result",
                "uVar3": "day_of_week",
                "iVar4": "offset",
                "puVar5": "ptr",
                "iVar6": "year_offset",
                "uVar7": "is_leap_year",
                "iVar8": "i",
                "iVar9": "day_offset",
                "uVar10": "is_multiple_of400",
                "get_memory_address_000056b0": "get_memory_address",
                "UNK_00007b98": "weekday_correction_table",
                "puVar5[10]": "year_adjustment",
                "puVar5[6]": "start_day_of_week",
                "puVar5[8]": "result",
                "puVar5[9]": "carry_bit",
                "puVar1[0x13]": "carry_bit",
                "puVar1[0x12]": "has_carry"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000047e4"
            ],
            "called": [
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004f98": {
                    "2": "calculate_day_of_year",
                    "1": "calculate_weekday_of_date",
                    "6": "calculate_weekday",
                    "17": "calculate_day_of_week"
                },
                "param_1": {
                    "29": "year",
                    "1": "input_date"
                },
                "puVar1": {
                    "1": "calendar",
                    "5": "memory",
                    "21": "memory_address"
                },
                "uVar2": {
                    "1": "is_valid",
                    "8": "is_leap_year",
                    "20": "result"
                },
                "uVar3": {
                    "16": "day_of_week",
                    "1": "weekday_index",
                    "2": "day_of_week_offset"
                },
                "iVar4": {
                    "3": "leap_year_adjustment",
                    "1": "total_days_offset",
                    "2": "day_offset",
                    "4": "offset"
                },
                "puVar5": {
                    "1": "table_pointer",
                    "2": "weekday_data",
                    "3": "calendar",
                    "4": "ptr"
                },
                "iVar6": {
                    "1": "extra_offset",
                    "3": "total_days",
                    "2": "base_offset",
                    "6": "year_offset"
                },
                "uVar7": {
                    "17": "is_leap_year",
                    "3": "leap_year_offset",
                    "6": "leap_year",
                    "1": "is_leap_year_temp"
                },
                "iVar8": {
                    "1": "array_index",
                    "3": "month_offset",
                    "9": "i",
                    "2": "counter",
                    "6": "month_index",
                    "4": "index"
                },
                "iVar9": {
                    "3": "week_offset",
                    "1": "days_of_week_offset",
                    "6": "day_offset",
                    "4": "days_offset",
                    "2": "day_of_week"
                },
                "uVar10": {
                    "1": "is_leap_year_multiple",
                    "11": "is_multiple_of400",
                    "2": "is_multiple_of_400",
                    "10": "is_divisible_by400"
                },
                "get_memory_address_000056b0": {
                    "1": "get_memory_address"
                },
                "UNK_00007b98": {
                    "1": "month_table"
                },
                "puVar5[10]": {
                    "1": "year_adjustment"
                },
                "puVar5[6]": {
                    "1": "start_day_of_week"
                },
                "puVar5[8]": {
                    "1": "result"
                },
                "puVar5[9]": {
                    "1": "carry_bit"
                },
                "puVar1[0x13]": {
                    "1": "carry_bit"
                },
                "puVar1[0x12]": {
                    "1": "has_carry"
                },
                "uVar11": {
                    "1": "day_of_week_value"
                },
                "[iVar9]": {
                    "1": "weekday_offset"
                },
                "UNK_000056b0": {
                    "2": "get_memory_address"
                }
            }
        },
        "FUN_000050e8": {
            "entrypoint": "0x000050e8",
            "current_name": "get_data_address_000050e8",
            "code": "\nvoid * get_data_address_000050e8(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050e8": "get_data_address_000050e8",
                "undefined": "void"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000050e8": {
                    "1": "get_memory_pointer",
                    "9": "get_memory_address",
                    "2": "get_data_ptr",
                    "5": "get_data_pointer",
                    "10": "get_data_address"
                },
                "DAT_1fff0deb": {
                    "1": "start_address",
                    "2": "data_address",
                    "6": "memory_address"
                },
                "undefined": {
                    "1": "void"
                },
                "&DAT_1fff0deb": {
                    "1": "memory_address"
                }
            }
        },
        "FUN_000050f4": {
            "entrypoint": "0x000050f4",
            "current_name": "get_memory_address_000050f4",
            "code": "\nvoid * get_memory_address_000050f4(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050f4": "get_memory_address_000050f4",
                "undefined": "void"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000050f4": {
                    "1": "get_address_of_data",
                    "2": "get_starting_address",
                    "13": "get_memory_address",
                    "4": "get_data_pointer",
                    "6": "get_data_address"
                },
                "": {
                    "1": ""
                },
                "DAT_1fff0deb": {
                    "1": "start_address",
                    "10": "memory_address"
                },
                "undefined": {
                    "1": "pointer"
                }
            }
        },
        "FUN_00005100": {
            "entrypoint": "0x00005100",
            "current_name": "process_data_00005100",
            "code": "\nvoid process_data_00005100(void)\n\n{\n  dword offset;\n  int memory_address;\n  char *parameter_offset;\n  int comparison_result;\n  int process_result;\n  undefined data_type;\n  char *pointer;\n  bool is_first;\n  ushort *pointer1;\n  int *pointer2;\n  ushort *pointer3;\n  int *pointer4;\n  ushort value1;\n  ushort value2;\n  ushort value3;\n  ushort value4;\n  ushort value5;\n  ushort value6;\n  int offset;\n  char *string_array [2];\n  \n  offset = offset1;\n  memory_address = get_memory_address_000056b0();\n  parameter_offset = (char *)find_parameter_offset_000056a0(offset,&DAT_00007a5c);\n  if (parameter_offset == (char *)0x0) {\n    info2 = (dword)&DAT_00007a5f;\n    offset3 = (dword)&DAT_00007a5f;\n    DAT_1fff0dd8 = parameter_offset;\n    DAT_1fff0ddc = parameter_offset;\n    initialize_data(DAT_1fff0dd4);\n    DAT_1fff0dd4 = 0;\n  }\n  else if ((DAT_1fff0dd4 == 0) || (comparison_result = compare_byte_arrays(), comparison_result != 0)) {\n    initialize_data(DAT_1fff0dd4);\n    comparison_result = find_end_of_string(parameter_offset);\n    DAT_1fff0dd4 = allocate_memory(offset,comparison_result + 1);\n    if (DAT_1fff0dd4 != 0) {\n      copy_string(DAT_1fff0dd4,parameter_offset);\n    }\n    if (*parameter_offset == ':') {\n      parameter_offset = parameter_offset + 1;\n    }\n    comparison_result = process_data_00005100(parameter_offset,\"%10[^0-9,+-]%n\",&DAT_1fff0dc7,&offset);\n    if (0 < comparison_result) {\n      pointer = parameter_offset + offset;\n      if (parameter_offset[offset] == '-') {\n        pointer = pointer + 1;\n        comparison_result = -1;\n      }\n      else {\n        if (parameter_offset[offset] == '+') {\n          pointer = pointer + 1;\n        }\n        comparison_result = 1;\n      }\n      value2 = 0;\n      value3 = 0;\n      pointer1 = &value2;\n      pointer2 = &offset;\n      pointer3 = &value3;\n      pointer4 = &offset;\n      process_result = process_data_00005100(pointer,\"%hu%n:%hu%n:%hu%n\",&value1,&offset,&value2,&offset,\n                           &value3,&offset);\n      if (0 < process_result) {\n        *(uint *)(memory_address + 0x28) =\n             ((uint)value1 * 0xe10 + (uint)value2 * 0x3c + (uint)value3) * comparison_result;\n        info2 = (dword)&DAT_1fff0dc7;\n        pointer = pointer + offset;\n        comparison_result = process_data_00005100(pointer,\"%10[^0-9,+-]%n\",&DAT_1fff0dbc,&offset,pointer1,pointer2,pointer3,\n                             pointer4);\n        if (comparison_result < 1) {\n          offset3 = info2;\n          DAT_1fff0ddc = *(char **)(memory_address + 0x28);\n          DAT_1fff0dd8 = (char *)0x0;\n        }\n        else {\n          offset3 = (dword)&DAT_1fff0dbc;\n          parameter_offset = pointer + offset;\n          if (pointer[offset] == '-') {\n            parameter_offset = parameter_offset + 1;\n            comparison_result = -1;\n          }\n          else {\n            if (pointer[offset] == '+') {\n              parameter_offset = parameter_offset + 1;\n            }\n            comparison_result = 1;\n          }\n          value1 = 0;\n          value2 = 0;\n          value3 = 0;\n          offset = 0;\n          process_result = process_data_00005100(parameter_offset,\"%hu%n:%hu%n:%hu%n\",&value1,&offset,&value2,&offset,\n                               &value3,&offset);\n          if (process_result < 1) {\n            comparison_result = *(int *)(memory_address + 0x28) + -0xe10;\n          }\n          else {\n            comparison_result = ((uint)value1 * 0xe10 + (uint)value2 * 0x3c + (uint)value3) * comparison_result;\n          }\n          *(int *)(memory_address + 0x50) = comparison_result;\n          parameter_offset = parameter_offset + offset;\n          is_first = false;\n          comparison_result = memory_address;\n          while( true ) {\n            if (*parameter_offset == ',') {\n              parameter_offset = parameter_offset + 1;\n            }\n            if (*parameter_offset == 'M') {\n              process_result = process_data_00005100(parameter_offset,\"M%hu%n.%hu%n.%hu%n\",&value4,&offset,&value5,\n                                   &offset,&value6,&offset);\n              if (process_result != 3) {\n                return;\n              }\n              if (0xb < value4 - 1) {\n                return;\n              }\n              if (4 < value5 - 1) {\n                return;\n              }\n              if (6 < value6) {\n                return;\n              }\n              *(uint *)(comparison_result + 0xc) = (uint)value4;\n              *(uint *)(comparison_result + 0x10) = (uint)value5;\n              *(undefined *)(comparison_result + 8) = 0x4d;\n              *(uint *)(comparison_result + 0x14) = (uint)value6;\n              pointer = parameter_offset + offset;\n            }\n            else {\n              if (*parameter_offset == 'J') {\n                parameter_offset = parameter_offset + 1;\n                data_type = 0x4a;\n              }\n              else {\n                data_type = 0x44;\n              }\n              value6 = parse_and_process_number(parameter_offset,string_array,10);\n              pointer = string_array[0];\n              if (string_array[0] == parameter_offset) {\n                if (is_first) {\n                  *(undefined *)(memory_address + 0x30) = 0x4d;\n                  *(undefined4 *)(memory_address + 0x34) = 0xb;\n                  *(undefined4 *)(memory_address + 0x38) = 1;\n                  *(undefined4 *)(memory_address + 0x3c) = 0;\n                }\n                else {\n                  *(undefined *)(memory_address + 8) = 0x4d;\n                  *(undefined4 *)(memory_address + 0xc) = 3;\n                  *(undefined4 *)(memory_address + 0x10) = 2;\n                  *(undefined4 *)(memory_address + 0x14) = 0;\n                }\n              }\n              else {\n                *(undefined *)(comparison_result + 8) = data_type;\n                *(uint *)(comparison_result + 0x14) = (uint)value6;\n              }\n            }\n            value1 = 2;\n            value2 = 0;\n            value3 = 0;\n            offset = 0;\n            if (*pointer == '/') {\n              process_data_00005100(pointer,&DAT_00007a85,&value1,&offset,&value2,&offset,&value3,\n                           &offset);\n            }\n            *(uint *)(comparison_result + 0x18) =\n                 (uint)value1 * 0xe10 + (uint)value2 * 0x3c + (uint)value3;\n            comparison_result = comparison_result + 0x28;\n            parameter_offset = pointer + offset;\n            if (is_first) break;\n            is_first = true;\n          }\n          calculate_day_of_week(*(undefined4 *)(memory_address + 4));\n          DAT_1fff0ddc = *(char **)(memory_address + 0x28);\n          DAT_1fff0dd8 = (char *)(*(int *)(memory_address + 0x50) - (int)DAT_1fff0ddc);\n          if (DAT_1fff0dd8 != (char *)0x0) {\n            DAT_1fff0dd8 = (char *)0x1;\n          }\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005100": "process_data_00005100",
                "dVar1": "offset",
                "iVar2": "memory_address",
                "pcVar3": "parameter_offset",
                "iVar4": "comparison_result",
                "iVar5": "process_result",
                "uVar6": "data_type",
                "pcVar7": "pointer",
                "bVar8": "is_first",
                "puVar9": "pointer1",
                "piVar10": "pointer2",
                "puVar11": "pointer3",
                "piVar12": "pointer4",
                "local_3c": "value1",
                "local_3a": "value2",
                "local_38": "value3",
                "local_36": "value4",
                "local_34": "value5",
                "local_32": "value6",
                "local_30": "offset",
                "local_2c": "string_array",
                "Elf32_Rel_ARRAY_1fff0200": "rel_array",
                "Elf32_Rel_ARRAY_1fff0200[16].r_offset": "offset1",
                "Elf32_Rel_ARRAY_1fff0200[28].r_info": "info2",
                "Elf32_Rel_ARRAY_1fff0200[29].r_offset": "offset3",
                "initialize_data_00005780": "initialize_data",
                "compare_byte_arrays_00004e52": "compare_byte_arrays",
                "find_end_of_string_00005ecc": "find_end_of_string",
                "allocate_memory_00004bd0": "allocate_memory",
                "copy_string_00005ebc": "copy_string",
                "process_data_00005e68": "process_data",
                "parse_and_process_number_00005fd8": "parse_and_process_number",
                "calculate_day_of_week_00004f98": "calculate_day_of_week"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005ecc",
                "FUN_00004e52",
                "FUN_00005e68",
                "FUN_00004bd0",
                "FUN_00005780",
                "FUN_00004f98",
                "FUN_00005fd8",
                "FUN_00005ebc",
                "FUN_000056b0",
                "FUN_000056a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00005100": {
                    "1": "parse_and_set_date_time",
                    "9": "process_data",
                    "7": "parse_date_time",
                    "4": "initialize_data"
                },
                "dVar1": {
                    "3": "rel_offset",
                    "1": "memory_address",
                    "4": "relocation_offset",
                    "20": "offset"
                },
                "iVar2": {
                    "2": "address",
                    "28": "memory_address",
                    "1": "struct_pointer"
                },
                "pcVar3": {
                    "12": "parameter_offset",
                    "9": "param_offset",
                    "1": "offset_ptr",
                    "8": "parameter"
                },
                "iVar4": {
                    "23": "comparison_result",
                    "7": "result",
                    "1": "compare_result"
                },
                "iVar5": {
                    "12": "process_result",
                    "1": "comparison_result2",
                    "2": "processing_result",
                    "4": "result"
                },
                "uVar6": {
                    "2": "flag",
                    "18": "data_type",
                    "1": "type_character"
                },
                "pcVar7": {
                    "1": "start",
                    "2": "current_char",
                    "3": "pointer"
                },
                "bVar8": {
                    "2": "is_first_param",
                    "1": "is_set",
                    "4": "is_first_iteration",
                    "3": "has_comma",
                    "8": "is_first"
                },
                "puVar9": {
                    "1": "pointer_result1",
                    "4": "hour",
                    "2": "pointer_a",
                    "3": "hours",
                    "5": "pointer1"
                },
                "piVar10": {
                    "4": "pointer2",
                    "1": "param_offset1",
                    "2": "pointer_b"
                },
                "puVar11": {
                    "1": "pointer_result3",
                    "2": "ptr3",
                    "4": "pointer3",
                    "3": "minutes"
                },
                "piVar12": {
                    "1": "pointer_4",
                    "2": "pointer_d",
                    "4": "pointer4"
                },
                "local_3c": {
                    "1": "value_c",
                    "7": "hour",
                    "2": "var1",
                    "8": "value1",
                    "5": "year"
                },
                "local_3a": {
                    "2": "var2",
                    "8": "value2",
                    "6": "minute",
                    "1": "value_d"
                },
                "local_38": {
                    "2": "year",
                    "1": "parsed_second",
                    "8": "value3",
                    "6": "day",
                    "5": "second"
                },
                "local_36": {
                    "1": "value_f",
                    "2": "month",
                    "3": "hour",
                    "6": "day",
                    "8": "value4"
                },
                "local_34": {
                    "2": "var5",
                    "8": "value5",
                    "1": "year",
                    "7": "month",
                    "3": "minute"
                },
                "local_32": {
                    "2": "var6",
                    "1": "value_f",
                    "8": "value6",
                    "7": "year",
                    "6": "second"
                },
                "local_30": {
                    "2": "var7",
                    "1": "offset_result",
                    "8": "offset",
                    "7": "length"
                },
                "local_2c": {
                    "1": "parsed_data",
                    "2": "buffer",
                    "3": "temp_array",
                    "7": "string_array"
                },
                "DAT_1fff0dd8": {
                    "1": "pointer1"
                },
                "DAT_1fff0ddc": {
                    "1": "ptr2"
                },
                "DAT_1fff0dd4": {
                    "1": "formatted_data"
                },
                "DAT_1fff0dc7": {
                    "2": "data1",
                    "1": "data2"
                },
                "DAT_1fff0dbc": {
                    "1": "minutes_offset",
                    "2": "data2"
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "1": "relocation_array",
                    "4": "rel_array"
                },
                "DAT_00007a5c": {
                    "1": "data"
                },
                "DAT_00007a5f": {
                    "1": "data"
                },
                "local_2c[2]": {
                    "1": "temp_strings"
                },
                "Elf32_Rel_ARRAY_1fff0200[16].r_offset": {
                    "1": "offset1"
                },
                "Elf32_Rel_ARRAY_1fff0200[28].r_info": {
                    "1": "info2"
                },
                "Elf32_Rel_ARRAY_1fff0200[29].r_offset": {
                    "1": "offset3"
                },
                "initialize_data_00005780": {
                    "1": "initialize_data"
                },
                "compare_byte_arrays_00004e52": {
                    "1": "compare_byte_arrays"
                },
                "find_end_of_string_00005ecc": {
                    "1": "find_end_of_string"
                },
                "allocate_memory_00004bd0": {
                    "1": "allocate_memory"
                },
                "copy_string_00005ebc": {
                    "1": "copy_string"
                },
                "process_data_00005e68": {
                    "1": "process_data"
                },
                "parse_and_process_number_00005fd8": {
                    "1": "parse_and_process_number"
                },
                "calculate_day_of_week_00004f98": {
                    "1": "calculate_day_of_week"
                }
            }
        },
        "FUN_00005404": {
            "entrypoint": "0x00005404",
            "current_name": "process_data_00005404",
            "code": "\nuint process_data_00005404(int input,uint value,int *data,undefined4 param)\n\n{\n  int result;\n  uint ushort_value;\n  undefined *ptr;\n  \n  if ((input != 0) && (*(int *)(input + 0x18) == 0)) {\n    initialize_memory();\n  }\n  if (data == &DAT_000079b8) {\n    data = *(int **)(input + 4);\n  }\n  else if (data == (int *)&DAT_000079d8) {\n    data = *(int **)(input + 8);\n  }\n  else if (data == (int *)&DAT_00007998) {\n    data = *(int **)(input + 0xc);\n  }\n  data[2] = data[6];\n  ushort_value = (uint)*(ushort *)(data + 3);\n  result = ushort_value << 0x1c;\n  if (((result < 0) && (ushort_value = data[4], ushort_value != 0)) ||\n     (result = process_data_00005404(input,data,result,ushort_value,param), result == 0)) {\n    result = *data - data[4];\n    value = value & 0xff;\n    if ((result < data[5]) || (result = process_data_000054042(input,data), result == 0)) {\n      data[2] = data[2] + -1;\n      ptr = (undefined *)*data;\n      *data = (int)(ptr + 1);\n      *ptr = (char)value;\n      if (data[5] != result + 1) {\n        if (-1 < (int)((uint)*(ushort *)(data + 3) << 0x1f)) {\n          return value;\n        }\n        if (value != 10) {\n          return value;\n        }\n      }\n      result = process_data_000054042(input,data);\n      if (result == 0) {\n        return value;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00005404": "process_data_00005404",
                "param_1": "input",
                "param_2": "value",
                "param_3": "data",
                "param_4": "param",
                "initialize_memory_000042a4": "initialize_memory",
                "process_data_000054a8": "process_data",
                "process_data_00004158": "process_data2",
                "iVar1": "result",
                "uVar2": "ushort_value",
                "puVar3": "ptr"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_000057a8",
                "FUN_00004cb4"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00004158",
                "FUN_000054a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00005404": {
                    "2": "process_input",
                    "19": "process_data",
                    "1": "process_and_initialize",
                    "3": "process_and_store_data",
                    "4": "process_and_update_data"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "ptr",
                    "6": "input",
                    "3": "input_ptr"
                },
                "param_2": {
                    "1": "key",
                    "3": "input_value",
                    "2": "byte_value",
                    "8": "value"
                },
                "param_3": {
                    "9": "data",
                    "8": "data_array",
                    "1": "array_param",
                    "4": "data_ptr",
                    "2": "input_data"
                },
                "param_4": {
                    "5": "flag",
                    "2": "config",
                    "1": "input4",
                    "3": "extra_param",
                    "10": "param"
                },
                "initialize_memory_000042a4": {
                    "16": "initialize_memory"
                },
                "DAT_000079b8": {
                    "1": "dat_a"
                },
                "DAT_000079d8": {
                    "1": "dat_buffer_2"
                },
                "DAT_00007998": {
                    "1": "dat_buffer_3"
                },
                "process_data_000054a8": {
                    "1": "process_data_step1",
                    "5": "process_data",
                    "3": "process_data_helper",
                    "2": "process_data_block"
                },
                "process_data_00004158": {
                    "1": "process_data_loop",
                    "2": "process_data_check",
                    "3": "process_data2"
                },
                "iVar1": {
                    "1": "data_offset",
                    "5": "index",
                    "8": "result"
                },
                "uVar2": {
                    "1": "value2",
                    "4": "shifted_value",
                    "2": "temp_var2",
                    "5": "ushort_value"
                },
                "puVar3": {
                    "4": "byte_ptr",
                    "1": "undefined_ptr",
                    "3": "byte_pointer",
                    "2": "char_pointer",
                    "7": "ptr"
                },
                "*param_3 - param_3[4]": {
                    "1": "difference"
                },
                "(uint)*(ushort *)(param_3 + 3)": {
                    "1": "ushort_value"
                }
            }
        },
        "FUN_000054a8": {
            "entrypoint": "0x000054a8",
            "current_name": "process_data_000054a8",
            "code": "\nuint process_data_000054a8(undefined4 *output_param,undefined4 *input_param)\n\n{\n  ushort flag;\n  dword offset;\n  ushort temp_var3;\n  uint temp_var4;\n  uint temp_var5;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_memory_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  if (input_param == &DAT_000079b8) {\n    input_param = *(undefined4 **)(offset + 4);\n  }\n  else if (input_param == (undefined4 *)&DAT_000079d8) {\n    input_param = *(undefined4 **)(offset + 8);\n  }\n  else if (input_param == (undefined4 *)&DAT_00007998) {\n    input_param = *(undefined4 **)(offset + 0xc);\n  }\n  temp_var4 = (uint)*(ushort *)(input_param + 3);\n  temp_var3 = *(ushort *)(input_param + 3);\n  if (-1 < (int)(temp_var4 << 0x1c)) {\n    if (-1 < (int)(temp_var4 << 0x1b)) {\n      *output_param = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(temp_var4 << 0x1d) < 0) {\n      if ((undefined4 *)input_param[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input_param[0xd] != input_param + 0x11) {\n          initialize_data(output_param);\n        }\n        input_param[0xd] = 0;\n      }\n      *(ushort *)(input_param + 3) = *(ushort *)(input_param + 3) & 0xffdb;\n      input_param[1] = 0;\n      *input_param = input_param[4];\n    }\n    *(ushort *)(input_param + 3) = *(ushort *)(input_param + 3) | 8;\n  }\n  if ((input_param[4] == 0) && ((*(ushort *)(input_param + 3) & 0x280) != 0x200)) {\n    process_and_allocate_memory(output_param,input_param);\n  }\n  flag = *(ushort *)(input_param + 3);\n  temp_var4 = (uint)flag;\n  temp_var3 = *(ushort *)(input_param + 3);\n  temp_var5 = temp_var4 & 1;\n  if ((flag & 1) == 0) {\n    if (-1 < (int)(temp_var4 << 0x1e)) {\n      temp_var5 = input_param[5];\n    }\n    input_param[2] = temp_var5;\n  }\n  else {\n    input_param[2] = 0;\n    input_param[6] = -input_param[5];\n  }\n  if (input_param[4] != 0) {\n    return 0;\n  }\n  if ((flag & 0x80) == 0) {\n    return temp_var4 & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(input_param + 3) = temp_var3 | 0x40;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000054a8": "process_data_000054a8",
                "param_1": "output_param",
                "param_2": "input_param",
                "uVar1": "flag",
                "dVar2": "offset",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4",
                "uVar5": "temp_var5",
                "initialize_data_00004b34": "initialize_data",
                "process_and_allocate_memory_00005700": "process_and_allocate_memory"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_00005404",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00004b34",
                "FUN_00005700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nuint FUN_000054a8(undefined4 *param_1,undefined4 *param_2)\n\n{\n  ushort uVar1;\n  dword dVar2;\n  ushort uVar3;\n  uint uVar4;\n  uint uVar5;\n  \n  dVar2 = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUNC_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  if (param_2 == &DAT_000079b8) {\n    param_2 = *(undefined4 **)(dVar2 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_000079d8) {\n    param_2 = *(undefined4 **)(dVar2 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_00007998) {\n    param_2 = *(undefined4 **)(dVar2 + 0xc);\n  }\n  uVar4 = (uint)*(ushort *)(param_2 + 3);\n  uVar3 = *(ushort *)(param_2 + 3);\n  if (-1 < (int)(uVar4 << 0x1c)) {\n    if (-1 < (int)(uVar4 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(uVar4 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          initialize_data_00004b34(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    process_and_allocate_memory_00005700(param_1,param_2);\n  }\n  uVar1 = *(ushort *)(param_2 + 3);\n  uVar4 = (uint)uVar1;\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar5 = uVar4 & 1;\n  if ((uVar1 & 1) == 0) {\n    if (-1 < (int)(uVar4 << 0x1e)) {\n      uVar5 = param_2[5];\n    }\n    param_2[2] = uVar5;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] != 0) {\n    return 0;\n  }\n  if ((uVar1 & 0x80) == 0) {\n    return uVar4 & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n  return 0xffffffff;\n}\n\n",
            "additional_data": {
                "FUN_000054a8": {
                    "1": "process_relocation_entry",
                    "13": "process_data",
                    "2": "process_relocation",
                    "4": "process_and_modify_data"
                },
                "param_1": {
                    "1": "output_buffer",
                    "15": "output_param",
                    "2": "result",
                    "5": "output"
                },
                "param_2": {
                    "5": "input",
                    "1": "input_ptr",
                    "3": "input_data",
                    "16": "input_param"
                },
                "uVar1": {
                    "6": "flag",
                    "1": "current_value",
                    "3": "temp1",
                    "5": "temp_var1"
                },
                "dVar2": {
                    "1": "data_offset",
                    "3": "var2",
                    "2": "temp2",
                    "12": "offset",
                    "6": "r_offset"
                },
                "uVar3": {
                    "3": "temp_var3",
                    "1": "temp_ushort_2",
                    "2": "temp3"
                },
                "uVar4": {
                    "1": "relocation_value",
                    "2": "temp4",
                    "3": "temp_var4"
                },
                "uVar5": {
                    "2": "value",
                    "1": "temp_value_5",
                    "3": "var5"
                },
                "initialize_data_00004b34": {
                    "5": "initialize_data"
                },
                "process_and_allocate_memory_00005700": {
                    "4": "process_and_allocate_memory",
                    "1": "allocate_memory"
                }
            }
        },
        "FUN_00005584": {
            "entrypoint": "0x00005584",
            "current_name": "divide_and_remainder_00005584",
            "code": "\nvoid divide_and_remainder_00005584(uint *quotient_and_remainder,uint dividend,uint divisor)\n\n{\n  uint remainder;\n  uint quotient;\n  \n  quotient = dividend / divisor;\n  remainder = dividend - divisor * quotient;\n  if ((int)dividend < 0) {\n    if (0 < (int)remainder) {\n      quotient = quotient - 1;\n      remainder = remainder + divisor;\n    }\n  }\n  else if ((int)remainder < 0) {\n    quotient = quotient + 1;\n    remainder = remainder - divisor;\n  }\n  *quotient_and_remainder = quotient;\n  quotient_and_remainder[1] = remainder;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005584": "divide_and_remainder_00005584",
                "param_1": "quotient_and_remainder",
                "param_2": "dividend",
                "param_3": "divisor",
                "uVar1": "remainder",
                "uVar2": "quotient"
            },
            "calling": [
                "FUN_00004634"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00005584": {
                    "1": "calculate_quotient_and_remainder",
                    "2": "divide_and_store_remainder",
                    "22": "divide_and_remainder"
                },
                "param_1": {
                    "2": "quotient_remainder",
                    "1": "divisor_and_remainder",
                    "20": "quotient_and_remainder",
                    "3": "quotient"
                },
                "param_2": {
                    "31": "dividend"
                },
                "param_3": {
                    "31": "divisor"
                },
                "uVar1": {
                    "30": "remainder",
                    "1": "reminder"
                },
                "uVar2": {
                    "1": "quotient_result",
                    "28": "quotient"
                }
            }
        },
        "FUN_0000562c": {
            "entrypoint": "0x0000562c",
            "current_name": "find_parameter_offset_0000562c",
            "code": "\nint find_parameter_offset_0000562c(undefined4 memory,char *string,int *result_offset)\n\n{\n  char current_char;\n  int *rel_offset_ptr;\n  int comparison_result;\n  char *current_position;\n  int *current_offset;\n  int string_offset;\n  \n  initialize_memory();\n  current_position = string;\n  if (offset_array[41].r_offset != 0) {\n    do {\n      current_char = *current_position;\n      if (current_char == '\\0') {\n        string_offset = (int)current_position - (int)string;\n        rel_offset_ptr = (int *)offset_array[41].r_offset;\n        while( true ) {\n          current_offset = rel_offset_ptr;\n          if (*current_offset == 0) break;\n          comparison_result = compare_bytes(*current_offset,string,string_offset);\n          rel_offset_ptr = current_offset + 1;\n          if ((comparison_result == 0) && (comparison_result = *current_offset, *(char *)(comparison_result + string_offset) == '=')) {\n            *result_offset = (int)((int)current_offset - offset_array[41].r_offset) >> 2;\n            initialize_memory(memory);\n            return comparison_result + string_offset + 1;\n          }\n        }\n        break;\n      }\n      current_position = current_position + 1;\n    } while (current_char != '=');\n  }\n  initialize_memory(memory);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000562c": "find_parameter_offset_0000562c",
                "param_1": "memory",
                "param_2": "string",
                "param_3": "result_offset",
                "cVar1": "current_char",
                "piVar2": "rel_offset_ptr",
                "iVar3": "comparison_result",
                "pcVar4": "current_position",
                "piVar5": "current_offset",
                "iVar6": "string_offset",
                "initialize_memory_00005fec": "initialize_memory",
                "Elf32_Rel_ARRAY_1fff0200": "offset_array",
                "compare_bytes_00004e66": "compare_bytes",
                "initialize_memory_00005ff8": "initialize_memory"
            },
            "calling": [
                "FUN_000056a0"
            ],
            "called": [
                "FUN_00005ff8",
                "FUN_00004e66",
                "FUN_00005fec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000562c": {
                    "1": "search_and_return_offset",
                    "9": "find_parameter_offset",
                    "2": "find_value_offset",
                    "3": "find_parameter_value"
                },
                "param_1": {
                    "1": "memory_initializer",
                    "3": "memory",
                    "2": "memory_address"
                },
                "param_2": {
                    "1": "key",
                    "9": "input_string",
                    "12": "string",
                    "4": "string_to_search"
                },
                "param_3": {
                    "1": "offset_list",
                    "2": "result",
                    "4": "output_index",
                    "3": "index",
                    "6": "result_offset"
                },
                "cVar1": {
                    "2": "current_byte",
                    "27": "current_char"
                },
                "piVar2": {
                    "1": "current_value_offset",
                    "2": "current_offset",
                    "7": "rel_offset_ptr"
                },
                "iVar3": {
                    "20": "comparison_result",
                    "3": "byte_comparison_result",
                    "7": "compare_result"
                },
                "pcVar4": {
                    "2": "current_char_pointer",
                    "1": "current_pointer",
                    "3": "current_char_ptr",
                    "4": "string_ptr",
                    "7": "current_position"
                },
                "piVar5": {
                    "1": "current_value",
                    "3": "current_rel_offset_ptr",
                    "2": "current_rel_offset",
                    "7": "current_offset"
                },
                "iVar6": {
                    "9": "string_offset",
                    "6": "string_length",
                    "1": "config_str_index",
                    "3": "string_index"
                },
                "initialize_memory_00005fec": {
                    "8": "initialize_memory"
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "2": "symbol_table",
                    "1": "rel_array"
                },
                "compare_bytes_00004e66": {
                    "4": "compare_bytes"
                },
                "initialize_memory_00005ff8": {
                    "1": "cleanup_memory",
                    "2": "initialize_memory"
                }
            }
        },
        "FUN_000056a0": {
            "entrypoint": "0x000056a0",
            "current_name": "find_parameter_offset_000056a0",
            "code": "\nvoid find_parameter_offset_000056a0(undefined4 input_param,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  undefined4 updated_offset;\n  undefined4 offset_value;\n  \n  updated_offset = input_2;\n  offset_value = input_3;\n  find_parameter_offset_000056a0_0000562c(input_param,input_2,&updated_offset,input_4,input_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000056a0": "find_parameter_offset_000056a0",
                "param_1": "input_param",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uStack_c": "updated_offset",
                "uStack_8": "offset_value"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_0000562c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000056a0": {
                    "1": "reverse_and_find_parameter_offset",
                    "2": "find_offset",
                    "23": "find_parameter_offset"
                },
                "param_1": {
                    "1": "input_value1",
                    "5": "source_param",
                    "9": "input_param"
                },
                "param_2": {
                    "1": "input_param_1",
                    "3": "param_2",
                    "5": "input_2"
                },
                "param_3": {
                    "1": "result",
                    "3": "param_3",
                    "5": "input_3",
                    "2": "address_param"
                },
                "param_4": {
                    "1": "offset",
                    "5": "input_4",
                    "4": "additional_param",
                    "2": "output_param"
                },
                "uStack_c": {
                    "2": "offset_1",
                    "1": "offset"
                },
                "uStack_8": {
                    "1": "processed_value2",
                    "2": "offset_2"
                },
                "uStack-8": {
                    "1": "updated_offset_array"
                }
            }
        },
        "FUN_000056b0": {
            "entrypoint": "0x000056b0",
            "current_name": "get_memory_address_000056b0",
            "code": "\nuint32_t get_memory_address_000056b0(void)\n\n{\n  return 0x1fff02f0;\n}\n\n",
            "renaming": {
                "FUN_000056b0": "get_memory_address_000056b0",
                "undefined4": "uint32_t"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000047e4",
                "FUN_00004f98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000056b0": {
                    "1": "get_system_status",
                    "4": "get_default_value",
                    "3": "get_base_address",
                    "5": "get_magic_number",
                    "2": "get_configuration_value",
                    "11": "get_memory_address"
                },
                "undefined4": {
                    "2": "uint32",
                    "1": "address",
                    "12": "uint32_t"
                },
                "0x1fff02f0": {
                    "1": "memory_location",
                    "3": "memory_address"
                },
                "DAT_000056b8": {
                    "1": "base_address"
                },
                "return_value": {
                    "1": "default_value"
                }
            }
        },
        "FUN_000056b8": {
            "entrypoint": "0x000056b8",
            "current_name": "process_data_000056b8",
            "code": "\nundefined4 process_data_000056b8(undefined4 input_value,int param2,undefined4 *output_value,uint *flag)\n\n{\n  int result;\n  undefined4 flag_value;\n  undefined default_value [4];\n  uint temp_value;\n  \n  if ((*(short *)(param2 + 0xe) < 0) ||\n     (result = set_default_value_00000514(input_value,(int)*(short *)(param2 + 0xe),default_value), result < 0)) {\n    *flag = 0;\n    if ((int)((uint)*(ushort *)(param2 + 0xc) << 0x18) < 0) {\n      flag_value = 0x40;\n      goto LAB_000056f8;\n    }\n  }\n  else {\n    *flag = (uint)((temp_value & 0xf000) == 0x2000);\n  }\n  flag_value = 0x400;\nLAB_000056f8:\n  *output_value = flag_value;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000056b8": "process_data_000056b8",
                "param_1": "input_value",
                "param_2": "param2",
                "param_3": "output_value",
                "param_4": "flag",
                "auStack_68": "default_value",
                "local_64": "temp_value",
                "iVar1": "result",
                "uVar2": "flag_value"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [
                "FUN_00000514"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000056b8": {
                    "1": "check_and_set_parameter_value",
                    "3": "process_data"
                },
                "param_1": {
                    "1": "input1",
                    "8": "input_value",
                    "2": "input_param",
                    "6": "param1"
                },
                "param_2": {
                    "2": "arg2",
                    "5": "param2",
                    "4": "data_pointer",
                    "1": "buffer"
                },
                "param_3": {
                    "2": "output_array",
                    "1": "result_code",
                    "4": "output",
                    "7": "output_value",
                    "5": "result"
                },
                "param_4": {
                    "7": "flag",
                    "1": "output2",
                    "2": "flag_pointer",
                    "3": "flags",
                    "4": "result"
                },
                "auStack_68": {
                    "12": "default_value",
                    "1": "temporary_buffer",
                    "7": "temp_buffer",
                    "2": "temp_array"
                },
                "local_64": {
                    "3": "value",
                    "1": "flag_data",
                    "6": "local_value",
                    "10": "temp_value",
                    "2": "flags"
                },
                "iVar1": {
                    "10": "return_value",
                    "1": "function_result",
                    "4": "status",
                    "14": "result"
                },
                "uVar2": {
                    "4": "flag_value",
                    "1": "access_mode",
                    "2": "permission",
                    "3": "value"
                }
            }
        },
        "FUN_00005700": {
            "entrypoint": "0x00005700",
            "current_name": "process_and_allocate_memory_00005700",
            "code": "\nvoid process_and_allocate_memory_00005700(int context,int *data)\n\n{\n  ushort processed_data;\n  int allocated_memory;\n  int data_size;\n  int *input_data;\n  \n  if (-1 < (int)((uint)*(ushort *)(data + 3) << 0x1e)) {\n    data_size = context;\n    input_data = data;\n    processed_data = process_data_000056b8(context,data,&data_size,&input_data);\n    allocated_memory = allocate_memory_00004bd0(context,data_size);\n    if (allocated_memory != 0) {\n      *(undefined **)(context + 0x28) = &DAT_0000423d;\n      *data = allocated_memory;\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x80;\n      data[5] = data_size;\n      data[4] = allocated_memory;\n      if ((input_data != (int *)0x0) &&\n         (allocated_memory = check_valid_input(context,(int)*(short *)((int)data + 0xe)), allocated_memory != 0)) {\n        *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(data + 3) = processed_data | *(ushort *)(data + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(data + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfffc | 2;\n  }\n  *data = (int)data + 0x47;\n  data[4] = (int)data + 0x47;\n  data[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005700": "process_and_allocate_memory_00005700",
                "param_1": "context",
                "param_2": "data",
                "uVar1": "processed_data",
                "iVar2": "allocated_memory",
                "local_18": "data_size",
                "local_14": "input_data",
                "check_valid_input_00000534": "check_valid_input"
            },
            "calling": [
                "FUN_000054a8",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_000056b8",
                "FUN_00000534"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00005700": {
                    "19": "process_and_allocate_memory",
                    "2": "process_data",
                    "7": "process_and_allocate_data",
                    "3": "process_and_allocate"
                },
                "param_1": {
                    "2": "data_ptr",
                    "1": "input_pointer",
                    "3": "context"
                },
                "param_2": {
                    "4": "output",
                    "1": "data_pointer2",
                    "2": "data_param",
                    "3": "output_param"
                },
                "uVar1": {
                    "1": "processed_value",
                    "22": "processed_data",
                    "5": "result"
                },
                "iVar2": {
                    "28": "allocated_memory",
                    "2": "memory_allocation_result"
                },
                "local_18": {
                    "4": "allocated_size",
                    "1": "local",
                    "3": "local_variable1",
                    "2": "local_param1"
                },
                "local_14": {
                    "1": "output_copy",
                    "2": "local_param2",
                    "3": "local_variable2"
                },
                "check_valid_input_00000534": {
                    "1": "is_valid_input"
                },
                "DAT_0000423d": {
                    "1": "default_data"
                }
            }
        },
        "FUN_00005780": {
            "entrypoint": "0x00005780",
            "current_name": "initialize_data_00005780",
            "code": "\nvoid initialize_data_00005780(undefined4 param)\n\n{\n  initialize_data_00005780_00004b34(relocation_offset,param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005780": "initialize_data_00005780",
                "param_1": "param",
                "Elf32_Rel_ARRAY_1fff0200": "rel_array",
                "r_offset": "offset",
                "Elf32_Rel_ARRAY_1fff0200[16].r_offset": "relocation_offset"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00005780": {
                    "1": "initialize_rel_offset",
                    "3": "initialize_rel_data",
                    "13": "initialize_data",
                    "2": "initialize_rel_array"
                },
                "param_1": {
                    "8": "data",
                    "1": "input_data",
                    "3": "parameter",
                    "11": "param",
                    "4": "input_param"
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "1": "relocation_table",
                    "6": "relocation_array",
                    "15": "rel_array"
                },
                "r_offset": {
                    "2": "offset",
                    "1": "rel_offset"
                },
                "Elf32_Rel_ARRAY_1fff0200[16].r_offset": {
                    "1": "rel_array_offset",
                    "2": "rel_offset"
                }
            }
        },
        "FUN_00005790": {
            "entrypoint": "0x00005790",
            "current_name": "initialize_data_00005790",
            "code": "\nvoid initialize_data_00005790(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005790": "initialize_data_00005790"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00005790": {
                    "27": "initialize_data",
                    "1": "init_data_processing",
                    "2": "initialize_memory"
                },
                "FUNC_000045e8": {
                    "2": "perform_initialization",
                    "20": "process_data",
                    "1": "update_data"
                },
                "DAT_1fff0de8": {
                    "4": "data",
                    "1": "source_data"
                },
                "more_descriptive_function_name": {
                    "1": "initialize_data"
                },
                "new_variable_name_1": {
                    "1": "data_ptr"
                }
            }
        },
        "FUN_0000579c": {
            "entrypoint": "0x0000579c",
            "current_name": "initialize_data_0000579c",
            "code": "\nvoid initialize_data_0000579c(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000579c": "initialize_data_0000579c"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000579c": {
                    "30": "initialize_data",
                    "1": "initialize_data_structures"
                },
                "FUNC_000045ec": {
                    "1": "perform_initialization",
                    "23": "process_data"
                },
                "DAT_1fff0de8": {
                    "9": "data",
                    "1": "data_structure"
                },
                "initializeData": {
                    "1": "initialize_data"
                },
                "processData": {
                    "1": "process_data"
                },
                "var1": {
                    "1": "data_pointer"
                },
                "&DAT_1fff0de8": {
                    "1": "data_buffer"
                },
                "new_parameter_name_1": {
                    "1": "original_parameter_name_1"
                },
                "new_variable_name_1": {
                    "1": "original_variable_name_1"
                }
            }
        },
        "FUN_000057a8": {
            "entrypoint": "0x000057a8",
            "current_name": "process_data_000057a8",
            "code": "\nint process_data_000057a8(undefined4 status,int data,undefined4 *data_array)\n\n{\n  int index;\n  undefined *current_element;\n  \n  index = data_array[2] + -1;\n  data_array[2] = index;\n  if ((index < 0) && ((index < (int)data_array[6] || (data == 10)))) {\n    index = process_data_000057a8_helper();\n    return index;\n  }\n  current_element = (undefined *)*data_array;\n  *data_array = current_element + 1;\n  *current_element = (char)data;\n  return data;\n}\n\n",
            "renaming": {
                "FUN_000057a8": "process_data_000057a8",
                "param_1": "status",
                "param_2": "data",
                "param_3": "data_array",
                "iVar1": "index",
                "puVar2": "current_element",
                "process_data_00005404": "process_data_helper"
            },
            "calling": [
                "FUN_000057d2"
            ],
            "called": [
                "FUN_00005404"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000057a8": {
                    "4": "process_input",
                    "11": "process_data",
                    "1": "process_bytes",
                    "2": "process_and_store_data",
                    "10": "process_and_update_data"
                },
                "param_1": {
                    "1": "result",
                    "3": "param",
                    "7": "status",
                    "5": "arg1"
                },
                "param_2": {
                    "2": "data_value",
                    "8": "data",
                    "5": "arg2",
                    "3": "input_value",
                    "1": "new_data"
                },
                "param_3": {
                    "17": "data_array",
                    "3": "data",
                    "1": "buffer",
                    "2": "data_buffer",
                    "5": "arg3"
                },
                "iVar1": {
                    "1": "last_index",
                    "8": "count",
                    "11": "index",
                    "3": "array_index"
                },
                "puVar2": {
                    "1": "ptr_to_data",
                    "11": "current_element",
                    "3": "data_ptr",
                    "6": "ptr",
                    "2": "current_byte"
                },
                "process_data_00005404": {
                    "1": "process_data"
                }
            }
        },
        "FUN_000057d2": {
            "entrypoint": "0x000057d2",
            "current_name": "process_data_000057d2",
            "code": "\nint process_data_000057d2(undefined4 arg1,undefined4 arg2,undefined *data,int array_length)\n\n{\n  int result;\n  undefined *end_ptr;\n  int current_index;\n  \n  end_ptr = data + array_length;\n  current_index = array_length;\n  do {\n    if (data == end_ptr) {\n      return 0;\n    }\n    result = process_data_000057d2_000057a8(arg1,*data,arg2,array_length,current_index);\n    array_length = result + 1;\n    data = data + 1;\n  } while (array_length != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000057d2": "process_data_000057d2",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "data",
                "param_4": "array_length",
                "iVar1": "result",
                "puVar2": "end_ptr",
                "iVar3": "current_index"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000057a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000057d2": {
                    "1": "process_data_batch",
                    "11": "process_data",
                    "2": "process_and_update_data",
                    "4": "process_and_count_data"
                },
                "param_1": {
                    "1": "input1",
                    "2": "input_param",
                    "14": "arg1"
                },
                "param_2": {
                    "1": "input_param",
                    "2": "param_2",
                    "14": "arg2"
                },
                "param_3": {
                    "10": "data_ptr",
                    "2": "data_pointer",
                    "9": "data_array"
                },
                "param_4": {
                    "7": "length",
                    "4": "size",
                    "6": "data_length",
                    "2": "array_size",
                    "1": "data_array_length"
                },
                "iVar1": {
                    "1": "retval",
                    "27": "result"
                },
                "puVar2": {
                    "1": "end_position",
                    "16": "end_ptr",
                    "3": "end_of_data",
                    "2": "end"
                },
                "iVar3": {
                    "1": "initial_size",
                    "2": "current_size",
                    "6": "current_length",
                    "12": "current_index"
                }
            }
        },
        "FUN_000057f8": {
            "entrypoint": "0x000057f8",
            "current_name": "process_data_000057f8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000059f0) */\n\nint process_data_000057f8(int input,undefined4 *config,byte *data,int *output)\n\n{\n  int result;\n  int process_result;\n  int *ptr;\n  bool flag;\n  byte *byte_ptr;\n  int unaff_r7;\n  byte *current_byte_ptr;\n  int *output_ptr;\n  uint flags;\n  int precision;\n  undefined4 unused;\n  int value;\n  int total_length;\n  byte format_char;\n  undefined space_char;\n  undefined plus_char;\n  undefined local_45;\n  undefined4 unused;\n  \n  if ((input != 0) && (*(int *)(input + 0x18) == 0)) {\n    initialize_memory();\n  }\n  if (config == &DAT_000079b8) {\n    config = *(undefined4 **)(input + 4);\n  }\n  else if (config == (undefined4 *)&DAT_000079d8) {\n    config = *(undefined4 **)(input + 8);\n  }\n  else if (config == (undefined4 *)&DAT_00007998) {\n    config = *(undefined4 **)(input + 0xc);\n  }\n  if ((-1 < (int)(config[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(config + 3) << 0x16))) {\n    FUNC_000045e8(config[0x16]);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(config + 3) << 0x1c)) || (config[4] == 0)) &&\n     (result = process_data_000057f8(input,config), result != 0)) {\n    if ((-1 < (int)(config[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(config + 3) << 0x16)))\n    {\n      FUNC_000045ec(config[0x16]);\n    }\n    return -1;\n  }\n  total_length = 0;\n  space_char = 0x20;\n  plus_char = 0x30;\n  current_byte_ptr = data;\n  output_ptr = output;\nLAB_0000588e:\n  byte_ptr = current_byte_ptr;\n  if (*byte_ptr != 0) goto code_r0x00005896;\n  goto LAB_0000589a;\ncode_r0x00005896:\n  current_byte_ptr = byte_ptr + 1;\n  if (*byte_ptr == 0x25) {\nLAB_0000589a:\n    result = (int)byte_ptr - (int)data;\n    if (result != 0) {\n      process_result = process_data_000057f83(input,config,data,result);\n      if (process_result == -1) {\nLAB_00005a06:\n        if ((-1 < (int)(config[0x19] << 0x1f)) &&\n           (-1 < (int)((uint)*(ushort *)(config + 3) << 0x16))) {\n          FUNC_000045ec(config[0x16]);\n        }\n        if ((int)((uint)*(ushort *)(config + 3) << 0x19) < 0) {\n          return -1;\n        }\n        return total_length;\n      }\n      total_length = total_length + result;\n    }\n    if (*byte_ptr == 0) goto LAB_00005a06;\n    precision = -1;\n    unused = 0;\n    flags = 0;\n    value = 0;\n    local_45 = 0;\n    unused = 0;\n    current_byte_ptr = byte_ptr + 1;\n    while( true ) {\n      byte_ptr = current_byte_ptr + 1;\n      result = find_byte_sequence(\"#-0+ \",*current_byte_ptr,5);\n      if (result == 0) break;\n      flags = 1 << (result - 0x7bfcU & 0xff) | flags;\n      current_byte_ptr = byte_ptr;\n    }\n    if ((int)(flags << 0x1b) < 0) {\n      local_45 = 0x20;\n    }\n    if ((int)(flags << 0x1c) < 0) {\n      local_45 = 0x2b;\n    }\n    if (*current_byte_ptr == 0x2a) {\n      ptr = output_ptr + 1;\n      value = *output_ptr;\n      output_ptr = ptr;\n      if (value < 0) {\n        value = -value;\n        flags = flags | 2;\n      }\n    }\n    else {\n      flag = false;\n      result = value;\n      byte_ptr = current_byte_ptr;\n      while( true ) {\n        if (9 < *byte_ptr - 0x30) break;\n        result = result * 10 + (*byte_ptr - 0x30);\n        flag = true;\n        byte_ptr = byte_ptr + 1;\n      }\n      if (flag) {\n        value = result;\n      }\n    }\n    if (*byte_ptr == 0x2e) {\n      if (byte_ptr[1] == 0x2a) {\n        precision = *output_ptr;\n        if (precision < 0) {\n          precision = -1;\n        }\n        byte_ptr = byte_ptr + 2;\n        output_ptr = output_ptr + 1;\n      }\n      else {\n        flag = false;\n        precision = 0;\n        result = 0;\n        while( true ) {\n          byte_ptr = byte_ptr + 1;\n          if (9 < *byte_ptr - 0x30) break;\n          result = result * 10 + (*byte_ptr - 0x30);\n          flag = true;\n        }\n        if (flag) {\n          precision = result;\n        }\n      }\n    }\n    result = find_byte_sequence(&DAT_00007c02,*byte_ptr,3);\n    if (result != 0) {\n      flags = flags | 0x40 << (result - 0x7c02U & 0xff);\n      byte_ptr = byte_ptr + 1;\n    }\n    data = byte_ptr + 1;\n    format_char = *byte_ptr;\n    result = find_byte_sequence(\"efgEFG\",format_char,6);\n    if (result == 0) {\n      unaff_r7 = format_and_process_data_000057f8(input,&flags,config,0x57d3,&output_ptr);\n      if (unaff_r7 == -1) goto LAB_00005a06;\n    }\n    else {\n      output_ptr = (int *)(((int)output_ptr + 7U & 0xfffffff8) + 8);\n    }\n    total_length = total_length + unaff_r7;\n    current_byte_ptr = data;\n  }\n  goto LAB_0000588e;\n}\n\n",
            "renaming": {
                "FUN_000057f8": "process_data_000057f8",
                "param_1": "input",
                "param_2": "config",
                "param_3": "data",
                "param_4": "output",
                "iVar1": "result",
                "iVar2": "process_result",
                "piVar3": "ptr",
                "bVar4": "flag",
                "pbVar5": "byte_ptr",
                "pbVar6": "current_byte_ptr",
                "local_8c": "output_ptr",
                "local_88": "flags",
                "local_84": "precision",
                "uStack_80": "unused",
                "local_7c": "value",
                "local_74": "total_length",
                "local_70": "format_char",
                "local_6f": "space_char",
                "local_6e": "plus_char",
                "local_30": "unused",
                "initialize_memory_000042a4": "initialize_memory",
                "process_data_000054a8": "process_data",
                "find_byte_sequence_00006010": "find_byte_sequence",
                "format_and_process_data_00005b34": "format_and_process_data",
                "process_data_000057d2": "process_data3"
            },
            "calling": [
                "FUN_00004c84"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_000057d2",
                "FUN_00005b34",
                "FUN_000054a8",
                "FUN_000045ec",
                "FUN_00006010",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000057f8": {
                    "5": "process_and_format_data",
                    "1": "reverse_and_process_data",
                    "2": "parse_and_process_data",
                    "21": "process_data"
                },
                "param_1": {
                    "13": "input",
                    "5": "input_param",
                    "2": "arg1",
                    "1": "data_pointer",
                    "3": "input_data"
                },
                "param_2": {
                    "1": "config_param",
                    "10": "config",
                    "2": "arg2"
                },
                "param_3": {
                    "4": "input",
                    "12": "data",
                    "1": "arg3",
                    "6": "byte_array",
                    "3": "buffer"
                },
                "param_4": {
                    "1": "output_length",
                    "4": "int_array",
                    "2": "length",
                    "14": "output"
                },
                "iVar1": {
                    "2": "result1",
                    "1": "temp_var1",
                    "20": "result"
                },
                "iVar2": {
                    "11": "process_result",
                    "2": "index2",
                    "1": "data_processing_result",
                    "3": "result2",
                    "4": "result"
                },
                "piVar3": {
                    "2": "temp_ptr",
                    "1": "pointer_var",
                    "4": "pointer",
                    "6": "ptr"
                },
                "bVar4": {
                    "8": "flag",
                    "4": "is_digit",
                    "3": "is_true",
                    "1": "is_valid",
                    "7": "is_numeric"
                },
                "pbVar5": {
                    "11": "byte_ptr",
                    "1": "ptr",
                    "2": "ptr2",
                    "4": "ptr_data"
                },
                "unaff_r7": {
                    "1": "format_type",
                    "2": "additional_data",
                    "8": "unaff_r7"
                },
                "pbVar6": {
                    "1": "data_pointer2",
                    "3": "next_byte",
                    "2": "ptr_data2",
                    "4": "current_byte_ptr"
                },
                "local_8c": {
                    "4": "local_array",
                    "1": "ptr_output_array2",
                    "2": "local_int_array"
                },
                "local_88": {
                    "1": "byte_mask",
                    "2": "bit_flags",
                    "5": "options",
                    "13": "flags"
                },
                "local_84": {
                    "1": "precision_val",
                    "7": "precision",
                    "2": "value"
                },
                "uStack_80": {
                    "2": "unused_stack_var",
                    "1": "constant4",
                    "4": "unused",
                    "3": "u_stack"
                },
                "local_7c": {
                    "1": "current_value",
                    "2": "temp2",
                    "3": "local_var",
                    "4": "value"
                },
                "local_74": {
                    "1": "total_processed_bytes",
                    "4": "total_size",
                    "7": "total",
                    "2": "result"
                },
                "local_70": {
                    "2": "current_char",
                    "1": "char",
                    "3": "current_byte",
                    "9": "format_char"
                },
                "local_6f": {
                    "1": "local_byte1",
                    "2": "char1",
                    "3": "local_6f"
                },
                "local_6e": {
                    "1": "start_of_conversion_flag",
                    "3": "local_6e",
                    "2": "char2"
                },
                "local_45": {
                    "1": "unused",
                    "2": "flag2",
                    "3": "local_45"
                },
                "local_30": {
                    "1": "int_var",
                    "3": "local_30",
                    "2": "unused_variable",
                    "4": "unused"
                },
                "initialize_memory_000042a4": {
                    "2": "initialize_memory"
                },
                "DAT_000079b8": {
                    "1": "constant1"
                },
                "DAT_000079d8": {
                    "1": "constant2"
                },
                "DAT_00007998": {
                    "1": "constant3"
                },
                "FUNC_000045e8": {
                    "2": "function1"
                },
                "FUNC_000045ec": {
                    "2": "function2"
                },
                "process_data_000054a8": {
                    "1": "process_data"
                },
                "find_byte_sequence_00006010": {
                    "2": "find_byte_sequence"
                },
                "format_and_process_data_00005b34": {
                    "2": "format_and_process_data"
                },
                "pbVar4": {
                    "1": "byte_ptr"
                },
                "process_data_000057d2": {
                    "1": "process_data3"
                },
                "DAT_00007c02": {
                    "1": "constant4"
                }
            }
        },
        "FUN_00005a58": {
            "entrypoint": "0x00005a58",
            "current_name": "process_data_00005a58",
            "code": "\nundefined4\nprocess_data_00005a58(undefined4 input_value,uint *data_array,uint *output_size,undefined4 param4,code *callback)\n\n{\n  int index;\n  undefined4 result;\n  int callback_result;\n  uint max_value;\n  uint counter;\n  bool is_condition_met;\n  \n  max_value = data_array[4];\n  if ((int)data_array[4] < (int)data_array[2]) {\n    max_value = data_array[2];\n  }\n  *output_size = max_value;\n  if (*(char *)((int)data_array + 0x43) != '\\0') {\n    *output_size = max_value + 1;\n  }\n  if ((int)(*data_array << 0x1a) < 0) {\n    *output_size = *output_size + 2;\n  }\n  if ((*data_array & 6) == 0) {\n    for (index = 0; index < (int)(data_array[3] - *output_size); index = index + 1) {\n      callback_result = (*callback)(input_value,param4,(int)data_array + 0x19,1);\n      if (callback_result == -1) goto LAB_00005afc;\n    }\n  }\n  max_value = (uint)*(byte *)((int)data_array + 0x43);\n  if (max_value != 0) {\n    max_value = 1;\n  }\n  if ((int)(*data_array << 0x1a) < 0) {\n    *(undefined *)((int)data_array + max_value + 0x43) = 0x30;\n    *(undefined *)((int)data_array + max_value + 0x44) = *(undefined *)((int)data_array + 0x45);\n    max_value = max_value + 2;\n  }\n  index = (*callback)(input_value,param4,(int)data_array + 0x43,max_value);\n  if (index == -1) {\nLAB_00005afc:\n    result = 0xffffffff;\n  }\n  else {\n    max_value = data_array[3];\n    is_condition_met = (*data_array & 6) == 4;\n    if (is_condition_met) {\n      max_value = max_value - *output_size;\n    }\n    if (is_condition_met) {\n      max_value = max_value & ~((int)max_value >> 0x1f);\n    }\n    else {\n      max_value = 0;\n    }\n    if ((int)data_array[4] < (int)data_array[2]) {\n      max_value = max_value + (data_array[2] - data_array[4]);\n    }\n    for (counter = 0; max_value != counter; counter = counter + 1) {\n      index = (*callback)(input_value,param4,(int)data_array + 0x1a,1);\n      if (index == -1) goto LAB_00005afc;\n    }\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00005a58": "process_data_00005a58",
                "param_1": "input_value",
                "param_2": "data_array",
                "param_3": "output_size",
                "param_4": "param4",
                "param_5": "callback",
                "iVar1": "index",
                "uVar2": "result",
                "iVar3": "callback_result",
                "uVar4": "max_value",
                "uVar5": "counter",
                "bVar6": "is_condition_met"
            },
            "calling": [
                "FUN_00005b34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00005a58": {
                    "1": "decode_and_process_data",
                    "9": "process_data",
                    "2": "update_param",
                    "3": "parse_data"
                },
                "param_1": {
                    "7": "input",
                    "1": "input1",
                    "8": "input_value",
                    "3": "param1",
                    "2": "input_data",
                    "5": "input_param"
                },
                "param_2": {
                    "8": "data_array",
                    "7": "data",
                    "4": "array",
                    "1": "metadata",
                    "3": "parameters"
                },
                "param_3": {
                    "3": "output_length",
                    "1": "result",
                    "10": "output_size",
                    "2": "output_value",
                    "5": "output"
                },
                "param_4": {
                    "1": "additional_parameter",
                    "10": "param4",
                    "3": "param_4",
                    "2": "additional_value",
                    "5": "param"
                },
                "param_5": {
                    "3": "function_pointer",
                    "7": "callback_function",
                    "5": "callback_func",
                    "16": "callback"
                },
                "iVar1": {
                    "2": "result",
                    "1": "loop_var1",
                    "7": "loop_index",
                    "10": "index"
                },
                "uVar2": {
                    "16": "result",
                    "14": "return_value"
                },
                "iVar3": {
                    "1": "temp_var1",
                    "6": "return_value",
                    "2": "temp_var",
                    "15": "callback_result"
                },
                "uVar4": {
                    "1": "max_buffer_length",
                    "4": "max_length",
                    "11": "max_value",
                    "10": "max_size",
                    "2": "max_output_length"
                },
                "uVar5": {
                    "4": "count",
                    "3": "iteration",
                    "1": "loop_var3",
                    "2": "loop_counter2",
                    "8": "counter"
                },
                "bVar6": {
                    "2": "condition_check",
                    "1": "flag_check",
                    "3": "is_condition_true",
                    "6": "is_condition_met",
                    "4": "is_flag_set"
                }
            }
        },
        "FUN_00005b34": {
            "entrypoint": "0x00005b34",
            "current_name": "format_and_process_data_00005b34",
            "code": "\ncode * format_and_process_data_00005b34(undefined4 input,uint *data,undefined4 param_3,code *callback,uint **data_ptr\n                   )\n\n{\n  bool is_positive;\n  byte byte_value;\n  int result;\n  code *output;\n  char *hex_digits;\n  int return_value;\n  char *current_char;\n  uint value;\n  uint *data_ptr;\n  uint base;\n  uint **ptr_to_ptr;\n  char **string_ptr_ptr;\n  uint length;\n  char *current_char;\n  code *local_callback;\n  \n  byte_value = *(byte *)(data + 6);\n  current_char = (char *)((int)data + 0x43);\n  local_callback = callback;\n  if (0x78 < byte_value) {\nswitchD_00005b70_caseD_65:\n    *(byte *)((int)data + 0x42) = byte_value;\nLAB_00005bdc:\n    current_char = (char *)((int)data + 0x42);\n    value = 1;\nLAB_00005d28:\n    data[4] = value;\n    *(undefined *)((int)data + 0x43) = 0;\n    goto LAB_00005c84;\n  }\n  if (byte_value < 99) {\n    if (byte_value == 0) goto LAB_00005d06;\n    if (byte_value == 0x58) {\n      hex_digits = \"0123456789ABCDEF\";\n      *(undefined *)((int)data + 0x45) = 0x58;\n      goto LAB_00005ca8;\n    }\n    goto switchD_00005b70_caseD_65;\n  }\n  switch(byte_value) {\n  case 99:\n    value = **data_ptr;\n    *data_ptr = *data_ptr + 1;\n    *(char *)((int)data + 0x42) = (char)value;\n    goto LAB_00005bdc;\n  case 100:\n  case 0x69:\n    base = *data;\n    data_ptr = *data_ptr;\n    if ((int)(base << 0x18) < 0) {\n      value = *data_ptr;\n      *data_ptr = data_ptr + 1;\n    }\n    else {\n      value = *data_ptr;\n      *data_ptr = data_ptr + 1;\n      if ((base & 0x40) != 0) {\n        value = (uint)(short)value;\n      }\n    }\n    if ((int)value < 0) {\n      value = -value;\n      *(undefined *)((int)data + 0x43) = 0x2d;\n    }\n    hex_digits = \"0123456789ABCDEF\";\n    base = 10;\n    goto LAB_00005c36;\n  default:\n    goto switchD_00005b70_caseD_65;\n  case 0x6e:\n    ptr_to_ptr = (uint **)*data_ptr;\n    base = *data;\n    value = data[5];\n    *data_ptr = (uint *)(ptr_to_ptr + 1);\n    data_ptr = *ptr_to_ptr;\n    if (((int)(base << 0x18) < 0) || (-1 < (int)(base << 0x19))) {\n      *data_ptr = value;\n    }\n    else {\n      *(short *)data_ptr = (short)value;\n    }\nLAB_00005d06:\n    data[4] = 0;\n    goto LAB_00005c84;\n  case 0x6f:\n  case 0x75:\n    data_ptr = *data_ptr;\n    value = *data;\n    *data_ptr = data_ptr + 1;\n    if (((int)(value << 0x18) < 0) || (-1 < (int)(value << 0x19))) {\n      value = *data_ptr;\n    }\n    else {\n      value = (uint)*(ushort *)data_ptr;\n    }\n    hex_digits = \"0123456789ABCDEF\";\n    if (byte_value == 0x6f) {\n      base = 8;\n    }\n    else {\n      base = 10;\n    }\n    break;\n  case 0x70:\n    *data = *data | 0x20;\n  case 0x78:\n    hex_digits = \"0123456789abcdef\";\n    *(undefined *)((int)data + 0x45) = 0x78;\nLAB_00005ca8:\n    base = *data;\n    value = **data_ptr;\n    *data_ptr = *data_ptr + 1;\n    if ((-1 < (int)(base << 0x18)) && ((int)(base << 0x19) < 0)) {\n      value = value & 0xffff;\n    }\n    if ((int)(base << 0x1f) < 0) {\n      *data = base | 0x20;\n    }\n    if (value == 0) {\n      *data = *data & 0xffffffdf;\n    }\n    base = 0x10;\n    break;\n  case 0x73:\n    string_ptr_ptr = (char **)*data_ptr;\n    *data_ptr = (uint *)(string_ptr_ptr + 1);\n    current_char = *string_ptr_ptr;\n    result = find_byte_sequence_00006010(current_char,0,data[1],string_ptr_ptr,input,data,param_3);\n    if (result != 0) {\n      data[1] = result - (int)current_char;\n    }\n    value = data[1];\n    goto LAB_00005d28;\n  }\n  *(undefined *)((int)data + 0x43) = 0;\nLAB_00005c36:\n  length = data[1];\n  data[2] = length;\n  if (-1 < (int)length) {\n    *data = *data & 0xfffffffb;\n  }\n  current_char = current_char;\n  if ((value != 0) || (length != 0)) {\n    do {\n      current_char = current_char + -1;\n      *current_char = hex_digits[value - base * (value / base)];\n      is_positive = base <= value;\n      value = value / base;\n    } while (is_positive);\n  }\n  if (((base == 8) && ((int)(*data << 0x1f) < 0)) && ((int)data[1] <= (int)data[4])) {\n    current_char[-1] = '0';\n    current_char = current_char + -1;\n  }\n  data[4] = (int)current_char - (int)current_char;\n  current_char = current_char;\nLAB_00005c84:\n  result = process_data_00005a58(input,data,&local_callback,param_3,callback);\n  if ((result == -1) || (result = (*callback)(input,param_3,current_char,data[4]), result == -1)) {\nLAB_00005c98:\n    output = (code *)0xffffffff;\n  }\n  else {\n    if ((int)(*data << 0x1e) < 0) {\n      for (result = 0; result < (int)(data[3] - (int)local_callback); result = result + 1) {\n        return_value = (*callback)(input,param_3,(int)data + 0x19,1);\n        if (return_value == -1) goto LAB_00005c98;\n      }\n    }\n    output = (code *)data[3];\n    if ((int)(code *)data[3] < (int)local_callback) {\n      output = local_callback;\n    }\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_00005b34": "format_and_process_data_00005b34",
                "param_1": "input",
                "param_2": "data",
                "param_4": "callback",
                "param_5": "data_ptr",
                "bVar1": "is_positive",
                "bVar2": "byte_value",
                "iVar3": "result",
                "pcVar4": "output",
                "pcVar5": "hex_digits",
                "iVar6": "return_value",
                "pcVar7": "current_char",
                "uVar8": "value",
                "puVar9": "data_ptr",
                "uVar10": "base",
                "uVar13": "length",
                "pcVar14": "current_char",
                "local_24": "local_callback",
                "ppuVar11": "ptr_to_ptr",
                "ppcVar12": "string_ptr_ptr"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_00006010",
                "FUN_00005a58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00005b34": {
                    "3": "format_and_process_data",
                    "1": "process_code",
                    "2": "decode_and_process_data"
                },
                "param_1": {
                    "12": "input",
                    "1": "input1",
                    "6": "input_value",
                    "3": "arg1",
                    "4": "param1",
                    "2": "input_param"
                },
                "param_2": {
                    "1": "value",
                    "6": "data",
                    "2": "output_buffer"
                },
                "param_3": {
                    "1": "arg2",
                    "5": "param3",
                    "2": "arg3",
                    "10": "param_3",
                    "6": "param"
                },
                "param_4": {
                    "2": "param4",
                    "1": "output_callback",
                    "15": "callback",
                    "5": "callback_func",
                    "4": "callback_function"
                },
                "param_5": {
                    "2": "param5",
                    "1": "ptr",
                    "4": "data_ptr"
                },
                "bVar1": {
                    "2": "is_less_than",
                    "1": "is_true",
                    "8": "is_greater",
                    "10": "is_positive"
                },
                "bVar2": {
                    "1": "format_char",
                    "16": "byte_value",
                    "10": "byte_val"
                },
                "iVar3": {
                    "1": "int_var",
                    "2": "return_value",
                    "21": "result"
                },
                "pcVar4": {
                    "3": "return_value",
                    "1": "final_result",
                    "5": "output",
                    "2": "callback_result",
                    "4": "result"
                },
                "pcVar5": {
                    "1": "numeral_system",
                    "2": "numeral_string",
                    "10": "hex_digits",
                    "5": "hex_chars",
                    "4": "digits"
                },
                "iVar6": {
                    "2": "callback_result",
                    "1": "result",
                    "5": "inner_result"
                },
                "pcVar7": {
                    "1": "string_ptr",
                    "5": "char_ptr",
                    "7": "current_char",
                    "2": "ptr"
                },
                "iVar7": {
                    "1": "index"
                },
                "uVar8": {
                    "1": "value1",
                    "11": "value",
                    "2": "quotient",
                    "3": "current_value"
                },
                "puVar9": {
                    "1": "pointer_value",
                    "2": "ptr",
                    "5": "data_ptr"
                },
                "uVar10": {
                    "2": "base_value",
                    "1": "base_num",
                    "23": "base"
                },
                "uVar13": {
                    "1": "value2",
                    "3": "string_length",
                    "15": "length"
                },
                "pcVar14": {
                    "2": "char_ptr2",
                    "1": "ptr_char",
                    "4": "current_char",
                    "3": "output_string"
                },
                "local_24": {
                    "1": "local_function_pointer",
                    "6": "local_callback",
                    "2": "local_func"
                },
                "ppuVar11": {
                    "1": "data_pptr",
                    "3": "ptr_to_ptr"
                },
                "ppcVar12": {
                    "1": "str_ptr_ptr",
                    "3": "string_ptr_ptr",
                    "2": "pp_char"
                },
                "iVar10": {
                    "1": "var10"
                },
                "iVar8": {
                    "1": "value1"
                }
            }
        },
        "FUN_00005e10": {
            "entrypoint": "0x00005e10",
            "current_name": "process_data_00005e10",
            "code": "\nuint process_data_00005e10(int input_data,byte **data_pointer)\n\n{\n  int result;\n  uint return_value;\n  byte *current_byte;\n  \n  if ((input_data != 0) && (*(int *)(input_data + 0x18) == 0)) {\n    initialize_memory();\n  }\n  if (data_pointer == (byte **)&DAT_000079b8) {\n    data_pointer = *(byte ***)(input_data + 4);\n  }\n  else if (data_pointer == (byte **)&DAT_000079d8) {\n    data_pointer = *(byte ***)(input_data + 8);\n  }\n  else if (data_pointer == (byte **)&DAT_00007998) {\n    data_pointer = *(byte ***)(input_data + 0xc);\n  }\n  result = process_data_00005e10(input_data,data_pointer);\n  if (result == 0) {\n    data_pointer[1] = data_pointer[1] + -1;\n    current_byte = *data_pointer;\n    *data_pointer = current_byte + 1;\n    return_value = (uint)*current_byte;\n  }\n  else {\n    return_value = 0xffffffff;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00005e10": "process_data_00005e10",
                "param_1": "input_data",
                "param_2": "data_pointer",
                "iVar1": "result",
                "pbVar3": "current_byte",
                "initialize_memory_000042a4": "initialize_memory",
                "process_data_00006768": "process_data",
                "uVar2": "return_value"
            },
            "calling": [
                "FUN_00004418"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00006768"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00005e10": {
                    "5": "decode_data",
                    "1": "extract_and_process_data",
                    "3": "process_and_decrement_data",
                    "2": "process_memory"
                },
                "param_1": {
                    "5": "input",
                    "2": "input_pointer",
                    "1": "data_address",
                    "3": "input_param",
                    "7": "input_data"
                },
                "param_2": {
                    "1": "input_data",
                    "3": "data",
                    "4": "data_ptr",
                    "8": "data_pointer",
                    "2": "output"
                },
                "iVar1": {
                    "2": "process_result",
                    "1": "status",
                    "28": "result"
                },
                "pbVar3": {
                    "5": "byte_ptr",
                    "2": "byte_pointer",
                    "1": "current_data",
                    "18": "current_byte",
                    "4": "byte_value"
                },
                "initialize_memory_000042a4": {
                    "10": "initialize_memory"
                },
                "process_data_00006768": {
                    "1": "process_data_with_input",
                    "7": "process_data"
                },
                "uVar2": {
                    "4": "output",
                    "5": "output_value",
                    "1": "value"
                },
                "DAT_000079b8": {
                    "1": "data1"
                },
                "DAT_000079d8": {
                    "1": "data2"
                },
                "DAT_00007998": {
                    "1": "data_c"
                },
                "PTR_": {
                    "1": ""
                },
                "DAT_": {
                    "1": ""
                }
            }
        },
        "FUN_00005e68": {
            "entrypoint": "0x00005e68",
            "current_name": "process_data_00005e68",
            "code": "\nvoid process_data_00005e68(undefined4 input_param,undefined4 output_param,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 input_copy;\n  undefined4 end_of_string;\n  undefined2 constant_value;\n  undefined2 constant_value;\n  undefined4 input1_copy2;\n  undefined4 end_of_string_copy;\n  undefined *string_ptr;\n  undefined4 zero;\n  undefined4 zero2;\n  undefined4 param3_copy;\n  undefined4 param4_copy;\n  \n  constant_value = 0x204;\n  input_copy = input_param;\n  input1_copy2 = input_param;\n  param3_copy = param_3;\n  param4_copy = param_4;\n  end_of_string = find_end_of_string_00005ecc();\n  string_ptr = &LAB_00004dea_1;\n  zero = 0;\n  zero2 = 0;\n  constant_value = 0xffff;\n  end_of_string_copy = end_of_string;\n  process_data_00005e68_000061cc(Elf32_Rel_ARRAY_1fff0200[16].r_offset,&input_copy,output_param,&param3_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005e68": "process_data_00005e68",
                "param_1": "input_param",
                "param_2": "output_param",
                "local_80": "input_copy",
                "local_7c": "end_of_string",
                "local_74": "constant_value",
                "local_72": "constant_value",
                "local_70": "input1_copy2",
                "local_6c": "end_of_string_copy",
                "local_5c": "string_ptr",
                "local_4c": "zero",
                "local_38": "zero2",
                "uStack_8": "param3_copy",
                "uStack_4": "param4_copy"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_000061cc",
                "FUN_00005ecc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00005e68": {
                    "1": "process_and_handle_data",
                    "26": "process_data",
                    "2": "process_data_and_return"
                },
                "param_1": {
                    "2": "input",
                    "1": "data_address",
                    "9": "input_data",
                    "4": "input1",
                    "11": "input_param"
                },
                "param_2": {
                    "2": "param2",
                    "1": "config_param",
                    "4": "input2",
                    "9": "output_param",
                    "3": "param_2"
                },
                "param_3": {
                    "1": "temp_param_1",
                    "5": "param3",
                    "2": "data_param",
                    "6": "param_3",
                    "4": "input3"
                },
                "param_4": {
                    "1": "parameter_4",
                    "5": "param4",
                    "6": "param_4",
                    "2": "end_index",
                    "4": "input4"
                },
                "local_80": {
                    "1": "data_copy",
                    "4": "input_data_copy",
                    "2": "processed_data",
                    "8": "input_copy"
                },
                "local_7c": {
                    "1": "end_of_str_ptr",
                    "2": "string_end",
                    "24": "end_of_string"
                },
                "local_74": {
                    "5": "string_length",
                    "1": "constant",
                    "2": "constant1",
                    "7": "constant_value"
                },
                "local_72": {
                    "2": "max_value",
                    "1": "magic_value",
                    "3": "constant2",
                    "6": "constant_value"
                },
                "local_70": {
                    "1": "data_ptr_backup",
                    "2": "processed_data_copy",
                    "3": "input_copy2",
                    "4": "input1_copy2"
                },
                "local_6c": {
                    "1": "var_f",
                    "20": "end_of_string_copy",
                    "2": "string_end_copy"
                },
                "local_5c": {
                    "11": "string_ptr",
                    "1": "string_start_address",
                    "2": "string_address"
                },
                "local_4c": {
                    "1": "temp_var1",
                    "8": "zero",
                    "6": "counter",
                    "2": "zero_value"
                },
                "local_38": {
                    "1": "var_i",
                    "2": "zero_value2",
                    "5": "zero2"
                },
                "uStack_8": {
                    "1": "additional_copy1",
                    "3": "param3_copy"
                },
                "uStack_4": {
                    "1": "parameter_4_copy",
                    "3": "param4_copy"
                }
            }
        },
        "FUN_00005ebc": {
            "entrypoint": "0x00005ebc",
            "current_name": "copy_string_00005ebc",
            "code": "\nvoid copy_string_00005ebc(char *destination,char *source)\n\n{\n  char current_char;\n  \n  do {\n    current_char = *source;\n    *destination = current_char;\n    source = source + 1;\n    destination = destination + 1;\n  } while (current_char != '\\0');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ebc": "copy_string_00005ebc",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "current_char"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00005ebc": {
                    "31": "copy_string"
                },
                "param_1": {
                    "1": "destination_string",
                    "24": "destination",
                    "6": "dest"
                },
                "param_2": {
                    "1": "source_string",
                    "24": "source",
                    "6": "src"
                },
                "cVar1": {
                    "8": "current_character",
                    "1": "character",
                    "20": "current_char"
                }
            }
        },
        "FUN_00005ecc": {
            "entrypoint": "0x00005ecc",
            "current_name": "find_end_of_string_00005ecc",
            "code": "\nchar * find_end_of_string_00005ecc(char *input_string)\n\n{\n  char current_char;\n  char *next_char;\n  char *current_char;\n  \n  current_char = input_string;\n  do {\n    next_char = current_char + 1;\n    current_char = *current_char;\n    current_char = next_char;\n  } while (current_char != '\\0');\n  return next_char + (-1 - (int)input_string);\n}\n\n",
            "renaming": {
                "FUN_00005ecc": "find_end_of_string_00005ecc",
                "param_1": "input_string",
                "cVar1": "current_char",
                "pcVar2": "next_char",
                "pcVar3": "current_char"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00005e68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00005ecc": {
                    "1": "find_last_char_position",
                    "14": "find_end_of_string",
                    "5": "reverse_string",
                    "2": "find_last_character_position",
                    "3": "get_string_length"
                },
                "param_1": {
                    "14": "input_string",
                    "7": "str",
                    "1": "string_input"
                },
                "cVar1": {
                    "9": "current_character",
                    "2": "character",
                    "18": "current_char",
                    "1": "current_character_value"
                },
                "pcVar2": {
                    "7": "next_character",
                    "1": "current_char",
                    "6": "next_char_ptr",
                    "2": "next_char_pointer",
                    "12": "next_char"
                },
                "pcVar3": {
                    "3": "current_character",
                    "1": "p_current_char",
                    "9": "current_char",
                    "4": "current_position",
                    "5": "current_char_ptr"
                }
            }
        },
        "FUN_00005edc": {
            "entrypoint": "0x00005edc",
            "current_name": "parse_number_00005edc",
            "code": "\nuint parse_number_00005edc(undefined4 *result,byte *input,byte **remaining_string,uint base)\n\n{\n  uint parsed_value;\n  uint current_char;\n  byte is_negative;\n  int status;\n  uint digit_value;\n  uint max_value;\n  byte *current_byte;\n  byte *next_byte;\n  \n  next_byte = input;\n  do {\n    current_byte = next_byte;\n    next_byte = current_byte + 1;\n    current_char = (uint)*current_byte;\n    is_negative = (&DAT_00007a99)[current_char] & 8;\n  } while (((&DAT_00007a99)[current_char] & 8) != 0);\n  if (current_char == 0x2d) {\n    current_char = (uint)*next_byte;\n    is_negative = 1;\n    next_byte = current_byte + 2;\n  }\n  else if (current_char == 0x2b) {\n    current_char = (uint)*next_byte;\n    next_byte = current_byte + 2;\n  }\n  if (base == 0) {\n    if (current_char != 0x30) {\n      base = 10;\n      goto LAB_00005f26;\n    }\n  }\n  else if ((base != 0x10) || (current_char != 0x30)) goto LAB_00005f26;\n  if ((*next_byte & 0xdf) == 0x58) {\n    current_char = (uint)next_byte[1];\n    base = 0x10;\n    next_byte = next_byte + 2;\n  }\n  else {\n    current_char = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00005f26:\n  status = 0;\n  max_value = 0xffffffff / base;\n  parsed_value = 0;\n  do {\n    digit_value = current_char - 0x30;\n    if (9 < digit_value) {\n      if (current_char - 0x41 < 0x1a) {\n        digit_value = current_char - 0x37;\n      }\n      else {\n        if (0x19 < current_char - 0x61) break;\n        digit_value = current_char - 0x57;\n      }\n    }\n    if ((int)base <= (int)digit_value) break;\n    if (((status < 0) || (max_value < parsed_value)) ||\n       ((max_value == parsed_value && ((int)~(base * max_value) < (int)digit_value)))) {\n      status = -1;\n    }\n    else {\n      parsed_value = parsed_value * base + digit_value;\n      status = 1;\n    }\n    current_char = (uint)*next_byte;\n    next_byte = next_byte + 1;\n  } while( true );\n  if (status < 0) {\n    *result = 0x22;\n    parsed_value = 0xffffffff;\n    if (remaining_string == (byte **)0x0) {\n      return 0xffffffff;\n    }\n  }\n  else {\n    if (is_negative != 0) {\n      parsed_value = -parsed_value;\n    }\n    if (remaining_string == (byte **)0x0) {\n      return parsed_value;\n    }\n    if (status == 0) goto LAB_00005fb8;\n  }\n  input = next_byte + -1;\nLAB_00005fb8:\n  *remaining_string = input;\n  return parsed_value;\n}\n\n",
            "renaming": {
                "FUN_00005edc": "parse_number_00005edc",
                "param_1": "result",
                "param_2": "input",
                "param_3": "remaining_string",
                "param_4": "base",
                "uVar1": "parsed_value",
                "uVar2": "current_char",
                "bVar3": "is_negative",
                "iVar4": "status",
                "uVar5": "digit_value",
                "uVar6": "max_value",
                "pbVar7": "current_byte",
                "pbVar8": "next_byte"
            },
            "calling": [
                "FUN_00005fd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00005edc": {
                    "7": "parse_integer",
                    "5": "convert_string_to_number",
                    "10": "parse_number",
                    "1": "convert_hex_to_string",
                    "2": "parse_integer_from_hex_string"
                },
                "param_1": {
                    "2": "out_value",
                    "1": "output_number",
                    "5": "output",
                    "22": "result"
                },
                "param_2": {
                    "15": "input",
                    "10": "input_string",
                    "2": "string",
                    "1": "input_str"
                },
                "param_3": {
                    "2": "next",
                    "1": "rest",
                    "8": "remaining_string",
                    "3": "next_input"
                },
                "param_4": {
                    "31": "base"
                },
                "uVar1": {
                    "7": "parsed_number",
                    "1": "result_value",
                    "2": "number",
                    "3": "value",
                    "8": "parsed_value",
                    "6": "result"
                },
                "uVar2": {
                    "1": "hex_char_value",
                    "2": "ch",
                    "26": "current_char"
                },
                "bVar3": {
                    "1": "is_positive",
                    "17": "is_negative",
                    "5": "negative_flag",
                    "7": "negative"
                },
                "iVar4": {
                    "5": "parse_result",
                    "1": "parse_state",
                    "3": "conversion_status",
                    "13": "status",
                    "4": "parse_status"
                },
                "uVar5": {
                    "18": "digit_value",
                    "1": "int_value",
                    "4": "char_value",
                    "6": "digit"
                },
                "uVar6": {
                    "2": "max_divisor",
                    "1": "max_digit_count",
                    "12": "max_value",
                    "3": "divisor",
                    "4": "max_digit_value"
                },
                "pbVar7": {
                    "1": "current_pointer",
                    "2": "current_ptr",
                    "4": "current_char",
                    "3": "current_position",
                    "13": "current_byte"
                },
                "pbVar8": {
                    "13": "next_byte",
                    "1": "next_hex",
                    "2": "next_ptr",
                    "3": "next_position"
                }
            }
        },
        "FUN_00005fd8": {
            "entrypoint": "0x00005fd8",
            "current_name": "parse_and_process_number_00005fd8",
            "code": "\nvoid parse_and_process_number_00005fd8(undefined4 offset,undefined4 param_1,undefined4 param_2)\n\n{\n  parse_number_00005edc(relocation_table[16].r_offset,offset,param_1,param_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fd8": "parse_and_process_number_00005fd8",
                "param_1": "offset",
                "param_2": "param_1",
                "param_3": "param_2",
                "Elf32_Rel_ARRAY_1fff0200": "relocation_table"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00005edc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00005fd8": {
                    "1": "parse_and_return_offset",
                    "3": "parse_and_return_number",
                    "2": "parse_rel_offset",
                    "5": "parse_and_process_number",
                    "4": "parse_and_process_relocation"
                },
                "param_1": {
                    "1": "input_param_1",
                    "3": "relocation_table",
                    "2": "output_buffer",
                    "14": "offset"
                },
                "param_2": {
                    "2": "arg2",
                    "4": "param2",
                    "1": "parameter_2",
                    "7": "param_1",
                    "3": "param1",
                    "6": "param_2"
                },
                "param_3": {
                    "3": "param2",
                    "1": "handler_function",
                    "4": "param3",
                    "2": "arg2",
                    "6": "param_3",
                    "7": "param_2"
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "1": "number_array",
                    "3": "relocation_table"
                },
                "ELF32_Rel_ARRAY_1fff0200": {
                    "1": "number_array"
                }
            }
        },
        "FUN_00005fec": {
            "entrypoint": "0x00005fec",
            "current_name": "initialize_memory_00005fec",
            "code": "\nvoid initialize_memory_00005fec(void)\n\n{\n  FUNC_000045e8(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fec": "initialize_memory_00005fec"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00005fec": {
                    "1": "initialize_memory_location",
                    "2": "execute_initialization",
                    "19": "initialize_memory",
                    "5": "initialize_data"
                },
                "FUNC_000045e8": {
                    "1": "execute_operation",
                    "6": "set_memory_value",
                    "3": "write_to_memory",
                    "2": "write_value_to_memory",
                    "4": "write_data_to_memory"
                },
                "0x1fff0de6": {
                    "1": "initial_value",
                    "2": "data_address",
                    "3": "memory_address"
                }
            }
        },
        "FUN_00005ff8": {
            "entrypoint": "0x00005ff8",
            "current_name": "initialize_memory_00005ff8",
            "code": "\nvoid initialize_memory_00005ff8(void)\n\n{\n  FUNC_000045ec(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ff8": "initialize_memory_00005ff8"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00005ff8": {
                    "1": "load_default_configuration",
                    "3": "execute_function",
                    "13": "initialize_memory",
                    "8": "initialize_data"
                },
                "FUNC_000045ec": {
                    "3": "set_memory_value",
                    "1": "perform_initialization",
                    "2": "write_data_to_memory"
                },
                "0x1fff0de6": {
                    "1": "configuration_value",
                    "2": "initial_value",
                    "3": "data_address",
                    "4": "memory_address"
                }
            }
        },
        "FUN_00006010": {
            "entrypoint": "0x00006010",
            "current_name": "find_byte_sequence_00006010",
            "code": "\nbyte * find_byte_sequence_00006010(uint *data,uint target_byte,uint length)\n\n{\n  byte current_byte;\n  char is_byte_zero;\n  char bit_8;\n  char bit_16;\n  char bit_24;\n  byte *next_byte;\n  uint *current_ptr;\n  byte *result;\n  uint offset;\n  uint aligned_length;\n  uint xor_result1;\n  uint xor_result2;\n  bool is_nonzero;\n  bool xor_check_2;\n  bool xor_check_3;\n  bool xor_check_4;\n  \n  target_byte = target_byte & 0xff;\n  if ((int)length < 0x10) {\njoined_r0x00006070:\n    do {\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n      current_ptr = (uint *)((int)data + 1);\n      current_byte = *(byte *)data;\n      length = length - 1;\n      data = current_ptr;\n    } while (current_byte != target_byte);\n  }\n  else {\n    offset = (uint)data & 7;\n    while( true ) {\n      if (offset == 0) {\n        offset = target_byte | target_byte << 8;\n        offset = offset | offset << 0x10;\n        aligned_length = length & 0xfffffff8;\n        do {\n          current_ptr = data + 2;\n          aligned_length = aligned_length - 8;\n          xor_result1 = *data ^ offset;\n          xor_result2 = data[1] ^ offset;\n          is_byte_zero = -((char)xor_result1 == '\\0');\n          bit_8 = -((char)(xor_result1 >> 8) == '\\0');\n          bit_16 = -((char)(xor_result1 >> 0x10) == '\\0');\n          bit_24 = -((char)(xor_result1 >> 0x18) == '\\0');\n          xor_result1 = CONCAT13(bit_24,CONCAT12(bit_16,CONCAT11(bit_8,is_byte_zero)));\n          is_nonzero = (char)xor_result2 != '\\0';\n          xor_check_2 = (char)(xor_result2 >> 8) != '\\0';\n          xor_check_3 = (char)(xor_result2 >> 0x10) != '\\0';\n          xor_check_4 = (char)(xor_result2 >> 0x18) != '\\0';\n          xor_result2 = CONCAT13(xor_check_4 * bit_24 - !xor_check_4,\n                            CONCAT12(xor_check_3 * bit_16 - !xor_check_3,\n                                     CONCAT11(xor_check_2 * bit_8 - !xor_check_2,is_nonzero * is_byte_zero - !is_nonzero)));\n          if (xor_result2 != 0) {\n            if (xor_result1 == 0) {\n              result = (byte *)((int)data + 5);\n              xor_result1 = xor_result2;\n            }\n            else {\n              result = (byte *)((int)data + 1);\n            }\n            if ((xor_result1 & 1) == 0) {\n              is_nonzero = (xor_result1 & 0x100) == 0;\n              next_byte = result + 1;\n              if (is_nonzero) {\n                is_nonzero = (xor_result1 & 0x18000) == 0;\n                next_byte = result + 2;\n              }\n              result = next_byte;\n              if (is_nonzero) {\n                result = result + 1;\n              }\n            }\n            return result + -1;\n          }\n          data = current_ptr;\n        } while (aligned_length != 0);\n        length = length & 7;\n        goto joined_r0x00006070;\n      }\n      current_ptr = (uint *)((int)data + 1);\n      length = length - 1;\n      if (*(byte *)data == target_byte) break;\n      offset = (uint)current_ptr & 7;\n      data = current_ptr;\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)current_ptr + -1);\n}\n\n",
            "renaming": {
                "FUN_00006010": "find_byte_sequence_00006010",
                "param_1": "data",
                "param_2": "target_byte",
                "param_3": "length",
                "bVar1": "current_byte",
                "cVar2": "is_byte_zero",
                "cVar3": "bit_8",
                "cVar4": "bit_16",
                "cVar5": "bit_24",
                "pbVar6": "next_byte",
                "puVar7": "current_ptr",
                "pbVar8": "result",
                "uVar9": "offset",
                "uVar10": "aligned_length",
                "uVar11": "xor_result1",
                "uVar12": "xor_result2",
                "bVar13": "is_nonzero",
                "bVar14": "xor_check_2",
                "bVar15": "xor_check_3",
                "bVar16": "xor_check_4"
            },
            "calling": [
                "FUN_000061cc",
                "FUN_00005b34",
                "FUN_0000656c",
                "FUN_000057f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00006010": {
                    "1": "reverse_and_find_byte_sequence",
                    "2": "find_next_byte",
                    "20": "find_byte_sequence"
                },
                "param_1": {
                    "1": "input_array",
                    "21": "data",
                    "2": "buffer"
                },
                "param_2": {
                    "11": "byte_to_find",
                    "1": "pattern",
                    "13": "target_byte",
                    "3": "target",
                    "2": "byte_value"
                },
                "param_3": {
                    "3": "sequence_length",
                    "2": "size",
                    "1": "buffer_length",
                    "7": "data_length",
                    "11": "length"
                },
                "bVar1": {
                    "1": "byte_val",
                    "25": "current_byte",
                    "2": "byte_value"
                },
                "cVar2": {
                    "3": "is_byte_zero",
                    "2": "mask_1",
                    "1": "bit0_result"
                },
                "cVar3": {
                    "1": "byte1_match",
                    "2": "mask_2"
                },
                "cVar4": {
                    "1": "cond3",
                    "2": "bit_16"
                },
                "cVar5": {
                    "1": "byte3",
                    "2": "mask_4"
                },
                "pbVar6": {
                    "12": "next_byte",
                    "1": "result_pointer",
                    "4": "result_ptr",
                    "6": "result"
                },
                "puVar7": {
                    "1": "current_address",
                    "5": "current_ptr",
                    "2": "data_ptr",
                    "3": "current_position"
                },
                "pbVar8": {
                    "1": "next_pos",
                    "3": "result_ptr",
                    "2": "next_position",
                    "9": "result"
                },
                "uVar9": {
                    "2": "data_offset",
                    "1": "pointer_offset",
                    "4": "alignment",
                    "5": "offset"
                },
                "uVar10": {
                    "1": "remaining_data_length",
                    "2": "length_aligned",
                    "9": "aligned_length",
                    "4": "remaining_length"
                },
                "uVar11": {
                    "2": "xor_value_1",
                    "1": "bit_0_set",
                    "3": "xor_result_1",
                    "8": "xor_result1"
                },
                "uVar12": {
                    "1": "temp_byte2",
                    "2": "xor_result",
                    "8": "xor_result2",
                    "3": "xor_result_2"
                },
                "bVar13": {
                    "2": "xor_check_1",
                    "1": "check_result"
                },
                "bVar14": {
                    "1": "xor_byte1_status",
                    "2": "xor_check_2"
                },
                "bVar15": {
                    "1": "check_3",
                    "2": "xor_check_3"
                },
                "bVar16": {
                    "1": "check_4",
                    "2": "xor_check_4"
                },
                "uVar13": {
                    "1": "temp_var_low"
                },
                "uVar14": {
                    "1": "temp_var_high"
                }
            }
        },
        "FUN_000060b0": {
            "entrypoint": "0x000060b0",
            "current_name": "copy_array_000060b0",
            "code": "\nvoid copy_array_000060b0(int dest_index,undefined *source_array,int length)\n\n{\n  undefined *source_ptr;\n  undefined *end_ptr;\n  undefined *dest_ptr;\n  \n  end_ptr = source_array + length;\n  dest_ptr = (undefined *)(dest_index + -1);\n  if (source_array != end_ptr) {\n    do {\n      source_ptr = source_array + 1;\n      dest_ptr = dest_ptr + 1;\n      *dest_ptr = *source_array;\n      source_array = source_ptr;\n    } while (source_ptr != end_ptr);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000060b0": "copy_array_000060b0",
                "param_1": "dest_index",
                "param_2": "source_array",
                "param_3": "length",
                "puVar1": "source_ptr",
                "puVar2": "end_ptr",
                "puVar3": "dest_ptr"
            },
            "calling": [
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000060b0": {
                    "4": "copy_and_shift",
                    "2": "copy_memory",
                    "1": "copy_to_buffer",
                    "6": "copy_data",
                    "18": "copy_array"
                },
                "param_1": {
                    "1": "dst_ptr",
                    "3": "dest_address",
                    "2": "dest_offset",
                    "8": "dest_index",
                    "4": "dest"
                },
                "param_2": {
                    "2": "source_address",
                    "1": "src_address",
                    "12": "source_array",
                    "5": "source",
                    "4": "src"
                },
                "param_3": {
                    "1": "source_array_size",
                    "5": "array_length",
                    "2": "data_length",
                    "8": "size",
                    "12": "length"
                },
                "puVar1": {
                    "6": "src_ptr",
                    "3": "source_index",
                    "12": "source_ptr",
                    "1": "src"
                },
                "puVar2": {
                    "1": "end_pointer",
                    "14": "end_ptr",
                    "2": "end_index"
                },
                "puVar3": {
                    "4": "destination_ptr",
                    "2": "dest_array",
                    "1": "dst_end_ptr",
                    "11": "dest_ptr",
                    "3": "dst_ptr"
                },
                "puVar4": {
                    "1": "temp_index"
                }
            }
        },
        "FUN_000060cc": {
            "entrypoint": "0x000060cc",
            "current_name": "allocate_and_copy_array_000060cc",
            "code": "\nint allocate_and_copy_array_000060cc(undefined4 arg1,int source_array,uint array_size,undefined4 extra_param)\n\n{\n  int result;\n  uint sum;\n  \n  if (source_array != 0) {\n    if (array_size == 0) {\n      initialize_data();\n      result = 0;\n    }\n    else {\n      sum = calculate_sum();\n      result = source_array;\n      if ((sum < array_size) && (result = allocate_memory(arg1,array_size), result != 0)) {\n        copy_array(result,source_array,array_size);\n        initialize_data(arg1,source_array);\n      }\n    }\n    return result;\n  }\n  result = allocate_memory(arg1,array_size,array_size,extra_param);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000060cc": "allocate_and_copy_array_000060cc",
                "param_1": "arg1",
                "param_2": "source_array",
                "param_3": "array_size",
                "param_4": "extra_param",
                "iVar1": "result",
                "uVar2": "sum",
                "initialize_data_00004b34": "initialize_data",
                "calculate_sum_00006964": "calculate_sum",
                "allocate_memory_00004bd0": "allocate_memory",
                "copy_array_000060b0": "copy_array"
            },
            "calling": [
                "FUN_000068f0"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_00006964",
                "FUN_00004b34",
                "FUN_000060b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000060cc": {
                    "1": "copy_and_initialize_data",
                    "20": "allocate_and_copy_array",
                    "4": "allocate_and_copy_data",
                    "2": "allocate_and_initialize_data"
                },
                "param_1": {
                    "1": "context",
                    "2": "ptr",
                    "7": "arg1"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "array",
                    "13": "source_array",
                    "7": "size"
                },
                "param_3": {
                    "1": "target_array_size",
                    "12": "array_size",
                    "2": "sum_threshold",
                    "5": "size",
                    "6": "sum"
                },
                "param_4": {
                    "1": "ptr_param_4",
                    "6": "param_4",
                    "2": "arg2",
                    "5": "arg4"
                },
                "iVar1": {
                    "2": "destination_array",
                    "3": "allocated_array",
                    "1": "memory_pointer",
                    "23": "result"
                },
                "uVar2": {
                    "1": "sum_of_array",
                    "2": "array_sum",
                    "7": "calculated_sum",
                    "20": "sum"
                },
                "initialize_data_00004b34": {
                    "3": "initialize_data"
                },
                "calculate_sum_00006964": {
                    "3": "calculate_sum"
                },
                "allocate_memory_00004bd0": {
                    "3": "allocate_memory"
                },
                "copy_array_000060b0": {
                    "3": "copy_array"
                }
            }
        },
        "FUN_00006192": {
            "entrypoint": "0x00006192",
            "current_name": "initialize_data_00006192",
            "code": "\nundefined4 initialize_data_00006192(undefined4 status,undefined4 *data_array)\n\n{\n  if ((undefined4 *)data_array[13] != (undefined4 *)0x0) {\n    if ((undefined4 *)data_array[13] != data_array + 0x11) {\n      initialize_data_00006192();\n    }\n    data_array[1] = data_array[16];\n    data_array[13] = 0;\n    if (data_array[16] != 0) {\n      *data_array = data_array[15];\n      return 0;\n    }\n  }\n  *data_array = data_array[4];\n  data_array[1] = 0;\n  *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) | 0x20;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006192": "initialize_data_00006192",
                "param_1": "status",
                "param_2": "data_array",
                "param_2[0xd]": "data_array[13]",
                "param_2[0x10]": "data_array[16]",
                "param_2[0xf]": "data_array[15]",
                "param_2[4]": "data_array[4]",
                "param_2[1]": "data_array[1]",
                "initialize_data_00004b34": "initialize_data"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00006192": {
                    "1": "initialize_new_data",
                    "3": "process_data",
                    "12": "initialize_data",
                    "2": "initialize_and_copy_data"
                },
                "param_1": {
                    "2": "param",
                    "1": "param_1",
                    "5": "arg1",
                    "11": "status",
                    "3": "input_param"
                },
                "param_2": {
                    "13": "data_array",
                    "4": "data",
                    "2": "parameters",
                    "1": "arguments",
                    "3": "arg2"
                },
                "data_array[0xd]": {
                    "1": "check_array"
                },
                "data_array[0x10]": {
                    "1": "check_value"
                },
                "data_array[1]": {
                    "1": "result"
                },
                "data_array[0xf]": {
                    "1": "value"
                },
                "data_array[4]": {
                    "3": "default_value"
                },
                "data_array[3]": {
                    "1": "flags"
                },
                "param_2[0xd]": {
                    "1": "param_value_d",
                    "4": "data_ptr",
                    "6": "data_array[13]",
                    "2": "array_element_d"
                },
                "param_2[0x10]": {
                    "1": "value_2",
                    "2": "condition",
                    "6": "data_array[16]"
                },
                "param_2[0xf]": {
                    "1": "value_f",
                    "2": "default_value",
                    "6": "data_array[15]"
                },
                "param_2[4]": {
                    "2": "array_element_4",
                    "1": "data_ptr[4]",
                    "4": "default_value",
                    "6": "data_array[4]"
                },
                "param_2 + 0x11": {
                    "1": "end_data_array",
                    "2": "end_pointer"
                },
                "param_2[1]": {
                    "6": "data_array[1]",
                    "1": "result",
                    "2": "output_value"
                },
                "param_2 + 3": {
                    "1": "flags"
                },
                "*(ushort *)(param_2 + 3)": {
                    "2": "flag",
                    "1": "options",
                    "3": "flags"
                },
                "*param_2": {
                    "1": "data_ptr[0]",
                    "2": "output"
                },
                "0x20": {
                    "1": "0b00100000"
                },
                "initialize_data_00004b34": {
                    "3": "initialize_data"
                },
                "data_array + 0x11": {
                    "1": "compare_array"
                },
                "*data_array": {
                    "1": "copy_result"
                },
                "*(ushort *)(data_array + 3)": {
                    "2": "flag"
                },
                "0xffffffff": {
                    "1": "error_code"
                },
                "(undefined4 *)param_2[0xd]": {
                    "1": "data_ptr[13]"
                },
                "(undefined4 *)0x0": {
                    "1": "null"
                },
                "data_array[0x11]": {
                    "1": "end_ptr"
                },
                "data_array": {
                    "1": "data"
                },
                "data[0xd]": {
                    "1": "ptr_cond"
                },
                "data + 0x11": {
                    "1": "ptr_end_data"
                },
                "data[1]": {
                    "1": "value"
                },
                "data[0x10]": {
                    "1": "ptr_value"
                },
                "*data": {
                    "1": "data_value"
                },
                "data[4]": {
                    "1": "ptr_default"
                },
                "*(ushort *)(data + 3)": {
                    "1": "flags"
                }
            }
        },
        "FUN_000061cc": {
            "entrypoint": "0x000061cc",
            "current_name": "process_data_000061cc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006482) */\n\nint process_data_000061cc(undefined4 param1,byte **param2,byte *param3,int **param4)\n\n{\n  int result;\n  uint current_byte;\n  byte *next_byte;\n  uint flag;\n  int **local_param4;\n  undefined stack_buffer [256];\n  uint flag1;\n  undefined4 base;\n  uint flag2;\n  int return_value;\n  int counter;\n  undefined *stack_buffer;\n  int data_type;\n  undefined *function_pointer;\n  code *data_pointer;\n  \n  return_value = 0;\n  counter = 0;\n  function_pointer = &label_00006118_1;\n  data_pointer = initialize_data_00006192 + 1;\n  local_param4 = param4;\n  stack_buffer = stack_buffer;\nloop_label:\n  while( true ) {\n    while( true ) {\n      flag = (uint)*param3;\n      if (flag == 0) {\n        return return_value;\n      }\n      current_byte = (byte)(&DAT_00007a99)[flag] & 8;\n      next_byte = param3 + 1;\n      if (((&DAT_00007a99)[flag] & 8) == 0) break;\n      while (((param3 = next_byte, 0 < (int)param2[1] ||\n              (result = (*data_pointer)(param1,param2), result == 0)) &&\n             ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0))) {\n        counter = counter + 1;\n        param2[1] = param2[1] + -1;\n        *param2 = *param2 + 1;\n      }\n    }\n    if (flag == 0x25) break;\nLAB_00006352:\n    if (((int)param2[1] < 1) && (result = (*data_pointer)(param1,param2), result != 0))\n    goto LAB_00006380;\n    if (**param2 != flag) {\n      return return_value;\n    }\n    *param2 = *param2 + 1;\n    counter = counter + 1;\n    param2[1] = param2[1] + -1;\n    param3 = next_byte;\n  }\n  flag2 = current_byte;\n  flag1 = current_byte;\n  if (param3[1] == 0x2a) {\n    next_byte = param3 + 2;\n    flag1 = 0x10;\n  }\n  while( true ) {\n    current_byte = (uint)*next_byte;\n    if (9 < current_byte - 0x30) break;\n    next_byte = next_byte + 1;\n    flag2 = (flag2 * 10 + current_byte) - 0x30;\n  }\n  result = find_byte_sequence_00006010(&DAT_00007c02,current_byte,3);\n  if (result != 0) {\n    flag1 = 1 << (result - 0x7c02U & 0xff) | flag1;\n    next_byte = next_byte + 1;\n  }\n  param3 = next_byte + 1;\n  current_byte = (uint)*next_byte;\n  if (current_byte < 0x79) {\n    if (0x57 < current_byte) {\n      switch(current_byte) {\n      default:\n        goto switchD_000062c0_caseD_59;\n      case 0x5b:\n        param3 = (byte *)extract_data_0000687c(stack_buffer,param3);\n        flag1 = flag1 | 0x40;\n        data_type = 1;\n        break;\n      case 99:\n        flag1 = flag1 | 0x40;\n        data_type = 0;\n        break;\n      case 100:\n      case 0x75:\n        base = 10;\nLAB_000063a0:\n        if (current_byte < 0x6f) {\n          data_type = 3;\n        }\n        else {\n          data_type = 4;\n        }\n        break;\n      case 0x65:\n      case 0x66:\n      case 0x67:\nswitchD_000062c0_caseD_65:\n        data_type = 5;\n        break;\n      case 0x69:\n        base = 0;\n        data_type = 3;\n        break;\n      case 0x6e:\n        if (-1 < (int)(flag1 << 0x1b)) {\n          if ((int)(flag1 << 0x1f) < 0) {\n            *(short *)*local_param4 = (short)counter;\n            local_param4 = local_param4 + 1;\n          }\n          else {\n            **local_param4 = counter;\n            local_param4 = local_param4 + 1;\n          }\n        }\n        goto loop_label;\n      case 0x6f:\n        base = 8;\n        data_type = 4;\n        break;\n      case 0x70:\n        flag1 = flag1 | 0x20;\n      case 0x58:\n      case 0x78:\n        flag1 = flag1 | 0x200;\n        base = 0x10;\n        goto LAB_000063a0;\n      case 0x73:\n        data_type = 2;\n      }\nLAB_000063ac:\n      if (((int)param2[1] < 1) && (result = (*data_pointer)(param1,param2), result != 0))\n      goto LAB_00006380;\n      if (-1 < (int)(flag1 << 0x19)) {\n        while ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0) {\n          counter = counter + 1;\n          next_byte = param2[1];\n          param2[1] = next_byte + -1;\n          if ((int)(next_byte + -1) < 1) {\n            result = (*data_pointer)(param1,param2);\n            if (result != 0) goto LAB_00006380;\n          }\n          else {\n            *param2 = *param2 + 1;\n          }\n        }\n      }\n      if (data_type < 3) {\n        result = process_data_000061cc_000064bc(param1,&flag1,param2,&local_param4);\n      }\n      else {\n        if (4 < data_type) goto loop_label;\n        result = process_data_000061cc_0000656c(param1,&flag1,param2,&local_param4);\n      }\n      if (result == 1) {\n        return return_value;\n      }\n      if (result == 2) {\nLAB_00006380:\n        if (return_value == 0) {\nLAB_00006388:\n          return_value = -1;\n        }\n        else if ((*(ushort *)(param2 + 3) & 0x40) != 0) {\n          return_value = -1;\n        }\n        return return_value;\n      }\n      goto loop_label;\n    }\n    next_byte = param3;\n    if (current_byte == 0x25) goto LAB_00006352;\n    if (current_byte < 0x26) {\n      if (current_byte != 0) goto switchD_000062c0_caseD_59;\n      goto LAB_00006388;\n    }\n    if (current_byte - 0x45 < 3) goto switchD_000062c0_caseD_65;\n  }\nswitchD_000062c0_caseD_59:\n  data_type = 3;\n  base = 10;\n  goto LAB_000063ac;\n}\n\n",
            "renaming": {
                "FUN_000061cc": "process_data_000061cc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "current_byte",
                "pbVar3": "next_byte",
                "uVar4": "flag",
                "local_2b0": "local_param4",
                "auStack_2ac": "stack_buffer",
                "local_1ac": "flag1",
                "local_30": "function_pointer",
                "local_2c": "data_pointer",
                "local_1a8": "base",
                "local_1a4": "flag2",
                "local_1a0": "return_value",
                "local_19c": "counter",
                "local_198": "stack_buffer",
                "local_194": "data_type",
                "LAB_00006118_1": "label_00006118_1",
                "LAB_000061f6": "loop_label"
            },
            "calling": [
                "FUN_00005e68"
            ],
            "called": [
                "FUN_0000687c",
                "FUN_00006192",
                "FUN_000064bc",
                "FUN_00006010",
                "FUN_0000656c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000061cc": {
                    "1": "parse_input",
                    "4": "process_function",
                    "13": "process_data",
                    "3": "process_binary_data",
                    "2": "parse_data"
                },
                "param_1": {
                    "1": "input1",
                    "3": "param_1",
                    "21": "param1",
                    "4": "param"
                },
                "param_2": {
                    "18": "param2",
                    "2": "data",
                    "1": "arg2"
                },
                "param_3": {
                    "3": "byte_ptr",
                    "1": "pattern",
                    "18": "param3",
                    "2": "byte_array"
                },
                "param_4": {
                    "18": "param4",
                    "1": "input4",
                    "2": "output_data",
                    "3": "output"
                },
                "iVar1": {
                    "4": "index",
                    "5": "return_value",
                    "1": "iteration_count",
                    "16": "result"
                },
                "uVar2": {
                    "2": "byte_value",
                    "1": "first_byte",
                    "3": "byte_val",
                    "9": "current_byte"
                },
                "pbVar3": {
                    "2": "next_char",
                    "13": "next_byte",
                    "1": "var2",
                    "4": "byte_pointer",
                    "3": "ptr"
                },
                "uVar4": {
                    "4": "byte_value",
                    "1": "masked_byte",
                    "2": "byte_val2",
                    "3": "temp"
                },
                "local_2b0": {
                    "3": "local_param4",
                    "1": "output_buffer",
                    "2": "output_data_ptr"
                },
                "auStack_2ac": {
                    "2": "buffer",
                    "3": "local_buffer",
                    "4": "stack_array",
                    "1": "stack_data",
                    "5": "stack_buffer"
                },
                "local_1ac": {
                    "3": "flag",
                    "1": "flag2",
                    "10": "flag1",
                    "7": "flags",
                    "2": "flag_value"
                },
                "local_30": {
                    "1": "pointer1",
                    "8": "function_pointer",
                    "2": "local_function_ptr",
                    "7": "function_ptr"
                },
                "local_2c": {
                    "1": "local_initialize_data",
                    "4": "data_initializer",
                    "2": "initialize_data_function"
                },
                "local_1a8": {
                    "2": "number_base",
                    "1": "var2",
                    "5": "flag2"
                },
                "local_1a4": {
                    "1": "temp_flag",
                    "2": "flag_copy",
                    "3": "mask",
                    "5": "flag2"
                },
                "local_1a0": {
                    "10": "result",
                    "18": "return_value",
                    "1": "local_var4"
                },
                "local_19c": {
                    "1": "count2",
                    "6": "count",
                    "18": "counter"
                },
                "local_198": {
                    "2": "buffer",
                    "3": "stack_ptr",
                    "1": "stack_pointer",
                    "5": "stack_buffer"
                },
                "local_194": {
                    "1": "state",
                    "10": "data_type",
                    "3": "data_size",
                    "5": "type",
                    "2": "flag3"
                },
                "initialize_data_00006192": {
                    "1": "data_initializer_func"
                },
                "LAB_00006118_1": {
                    "1": "label1"
                },
                "DAT_00007a99": {
                    "1": "data_00007a99"
                },
                "DAT_00007c02": {
                    "1": "data_00007c02"
                },
                "extract_data_0000687c": {
                    "1": "extract_data"
                },
                "find_byte_sequence_00006010": {
                    "1": "find_byte_sequence_00006010"
                },
                "process_data_000064bc": {
                    "1": "process_data_000064bc"
                },
                "process_data_0000656c": {
                    "1": "process_data2"
                },
                "LAB_000061f6": {
                    "1": "loop_label"
                },
                "local_168": {
                    "1": "base2"
                },
                "local_13c": {
                    "1": "extracted_data"
                }
            }
        },
        "FUN_000064bc": {
            "entrypoint": "0x000064bc",
            "current_name": "process_data_000064bc",
            "code": "\nundefined4 process_data_000064bc(undefined4 input,uint *flags,byte **buffer,undefined4 *result)\n\n{\n  int result;\n  uint temp;\n  byte **data_ptr;\n  byte *next_byte;\n  byte *current_byte;\n  byte *next_byte;\n  int counter;\n  \n  if (flags[2] == 0) {\n    if (flags[6] == 0) {\n      temp = 1;\n    }\n    else {\n      temp = 0xffffffff;\n    }\n    flags[2] = temp;\n  }\n  if (-1 < (int)(*flags << 0x1b)) {\n    data_ptr = (byte **)*result;\n    *result = data_ptr + 1;\n    current_byte = *data_ptr;\n  }\n  counter = 0;\n  do {\n    temp = flags[6];\n    if (temp != 0) {\n      if (temp == 1) {\n        if (*(char *)(flags[5] + (uint)**buffer) == '\\0') {\n          if (counter == 0) {\n            return 1;\n          }\nLAB_0000654a:\n          if (((*flags & 0x10) == 0) && (flags[3] = flags[3] + 1, flags[6] != 0)) {\n            *current_byte = 0;\n          }\n          flags[4] = counter + flags[4];\n          return 0;\n        }\n      }\n      else if ((temp != 2) || ((int)((uint)(byte)(&DAT_00007a99)[**buffer] << 0x1c) < 0))\n      goto LAB_0000654a;\n    }\n    next_byte = current_byte;\n    if (-1 < (int)(*flags << 0x1b)) {\n      next_byte = current_byte + 1;\n      *current_byte = **buffer;\n    }\n    next_byte = buffer[1];\n    *buffer = *buffer + 1;\n    temp = flags[2] - 1;\n    buffer[1] = next_byte + -1;\n    counter = counter + 1;\n    flags[2] = temp;\n    current_byte = next_byte;\n    if ((temp == 0) ||\n       (((int)(next_byte + -1) < 1 &&\n        (result = (*(code *)flags[0x60])(input,buffer,temp,(code *)flags[0x60],result),\n        result != 0)))) goto LAB_0000654a;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000064bc": "process_data_000064bc",
                "param_1": "input",
                "param_2": "flags",
                "param_3": "buffer",
                "param_4": "result",
                "iVar1": "result",
                "uVar2": "temp",
                "ppbVar3": "data_ptr",
                "pbVar4": "next_byte",
                "unaff_r6": "current_byte",
                "pbVar5": "next_byte",
                "iVar6": "counter"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000064bc": {
                    "1": "decode_and_process_data",
                    "24": "process_data",
                    "2": "decode_data"
                },
                "param_1": {
                    "7": "input",
                    "2": "param",
                    "1": "result",
                    "6": "input_value",
                    "5": "status",
                    "3": "input_param"
                },
                "param_2": {
                    "6": "data",
                    "2": "options",
                    "1": "arg2",
                    "5": "params",
                    "10": "flags"
                },
                "param_3": {
                    "1": "byte_ptr_array",
                    "7": "data",
                    "4": "data_ptr",
                    "8": "buffer"
                },
                "param_4": {
                    "2": "status",
                    "1": "counter_ptr",
                    "3": "output_param",
                    "4": "output",
                    "6": "result"
                },
                "iVar1": {
                    "3": "function_result",
                    "1": "callback_result",
                    "18": "result"
                },
                "uVar2": {
                    "5": "status",
                    "8": "temp",
                    "3": "temp_var",
                    "4": "value",
                    "1": "flag_value"
                },
                "ppbVar3": {
                    "1": "temp_pointer",
                    "2": "temp_ptr"
                },
                "pbVar4": {
                    "1": "ptr_next_byte",
                    "2": "next_buffer",
                    "3": "temp_byte_ptr",
                    "4": "next_byte"
                },
                "unaff_r6": {
                    "1": "data_ptr3",
                    "2": "temp_pointer",
                    "10": "current_byte"
                },
                "pbVar5": {
                    "1": "updated_byte",
                    "2": "temp_byte",
                    "3": "temp_byte_ptr_3",
                    "6": "next_byte"
                },
                "iVar6": {
                    "2": "loop_counter",
                    "1": "byte_count",
                    "9": "count",
                    "13": "counter",
                    "5": "iteration_count"
                },
                "data[2]": {
                    "1": "data_length"
                },
                "data[6]": {
                    "1": "data_mode"
                },
                "*param_4": {
                    "1": "byte_counter"
                },
                "(byte *)&DAT_00007a99": {
                    "1": "byte_table"
                },
                "(*(char *)(param_2[5] + (uint)**param_3)": {
                    "1": "current_byte_value"
                }
            }
        },
        "FUN_0000656c": {
            "entrypoint": "0x0000656c",
            "current_name": "process_data_0000656c",
            "code": "\nundefined4 process_data_0000656c(undefined4 input,uint *param_array,byte **data,undefined4 *output)\n\n{\n  int result;\n  undefined4 result;\n  code *function_pointer;\n  uint temp_value;\n  byte *byte_ptr;\n  uint length;\n  undefined4 *output_ptr;\n  uint *temp_ptr1;\n  uint *temp_ptr;\n  uint *temp_ptr3;\n  int unaff_r9;\n  int index;\n  undefined *sequence_array [4];\n  \n  sequence_1 = &DAT_00007c2f;\n  sequence_2 = &DAT_00007c32;\n  sequence_3 = &DAT_00007c35;\n  function_pointer = (code *)&UNK_00004f81;\n  if (param_array[6] != 3) {\n    function_pointer = (code *)&UNK_00005fd5;\n  }\n  length = param_array[2];\n  temp_value = length - 1;\n  if (0x15c < temp_value) {\n    unaff_r9 = length - 0x15d;\n    length = 0x15d;\n  }\n  if (0x15c < temp_value) {\n    param_array[2] = length;\n  }\n  temp_ptr3 = param_array + 7;\n  if (temp_value < 0x15d) {\n    unaff_r9 = 0;\n  }\n  *param_array = *param_array | 0xd00;\n  index = 0;\n  temp_ptr = temp_ptr3;\n  do {\n    result = find_byte_sequence(sequence_array[index],**data,2);\n    if (result != 0) {\n      if (index == 1) {\n        if (param_array[1] == 0) {\n          param_array[1] = 8;\n          *param_array = *param_array | 0x200;\n        }\n        temp_value = *param_array & 0xfffffaff;\nLAB_000065f4:\n        *param_array = temp_value;\n      }\n      else if (index == 2) {\n        if ((*param_array & 0x600) != 0x200) goto LAB_00006624;\n        param_array[1] = 0x10;\n        temp_value = *param_array | 0x100;\n        goto LAB_000065f4;\n      }\n      temp_value = param_array[2];\n      param_array[2] = temp_value - 1;\n      if (temp_value != 0) {\n        byte_ptr = *data;\n        *data = byte_ptr + 1;\n        temp_ptr1 = (uint *)((int)temp_ptr + 1);\n        *(byte *)temp_ptr = *byte_ptr;\n        byte_ptr = data[1];\n        data[1] = byte_ptr + -1;\n        temp_ptr = temp_ptr1;\n        if (((int)(byte_ptr + -1) < 1) &&\n           (result = (*(code *)param_array[0x60])(input,data), result != 0)) {\n          index = 0;\n          goto LAB_000066ca;\n        }\n      }\n    }\nLAB_00006624:\n    index = index + 1;\n  } while (index != 3);\n  if (param_array[1] == 0) {\n    param_array[1] = 10;\n  }\n  extract_data(param_array[5],\"01234567]\" + (8 - param_array[1]));\n  index = 0;\n  while( true ) {\n    temp_ptr1 = temp_ptr;\n    if (param_array[2] == 0) break;\n    byte_ptr = *data;\n    temp_value = (uint)*byte_ptr;\n    if (*(char *)(param_array[5] + temp_value) == '\\0') break;\n    if ((temp_value == 0x30) && ((int)(*param_array << 0x14) < 0)) {\n      index = index + 1;\n      if (unaff_r9 != 0) {\n        unaff_r9 = unaff_r9 + -1;\n        param_array[2] = param_array[2] + 1;\n      }\n    }\n    else {\n      *param_array = *param_array & 0xfffff6ff;\n      temp_ptr1 = (uint *)((int)temp_ptr + 1);\n      *(byte *)temp_ptr = *byte_ptr;\n    }\n    byte_ptr = data[1];\n    data[1] = byte_ptr + -1;\n    if ((int)(byte_ptr + -1) < 1) {\n      result = (*(code *)param_array[0x60])(input,data);\n      if (result != 0) break;\n    }\n    else {\n      *data = *data + 1;\n    }\n    param_array[2] = param_array[2] - 1;\n    temp_ptr = temp_ptr1;\n  }\nLAB_000066ca:\n  if ((int)(*param_array << 0x17) < 0) {\n    if (temp_ptr3 < temp_ptr1) {\n      (*(code *)param_array[0x5f])(input,*(byte *)((int)temp_ptr1 + -1),data);\n      temp_ptr1 = (uint *)((int)temp_ptr1 + -1);\n    }\n    if (temp_ptr1 == temp_ptr3) {\n      return 1;\n    }\n  }\n  if ((*param_array & 0x10) == 0) {\n    *(byte *)temp_ptr1 = 0;\n    result = (*function_pointer)(input,temp_ptr3,0,param_array[1]);\n    output_ptr = (undefined4 *)*output;\n    temp_value = *param_array;\n    *output = output_ptr + 1;\n    output_ptr = (undefined4 *)*output_ptr;\n    if ((temp_value & 0x20) == 0) {\n      if ((int)(temp_value << 0x1f) < 0) {\n        *(short *)output_ptr = (short)result;\n      }\n      else {\n        *output_ptr = result;\n      }\n    }\n    else {\n      *output_ptr = result;\n    }\n    param_array[3] = param_array[3] + 1;\n  }\n  param_array[4] = (uint)((int)temp_ptr1 + param_array[4] + (index - (int)temp_ptr3));\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000656c": "process_data_0000656c",
                "param_1": "input",
                "param_2": "param_array",
                "param_3": "data",
                "param_4": "output",
                "iVar1": "result",
                "uVar2": "result",
                "pcVar3": "function_pointer",
                "uVar4": "temp_value",
                "pbVar5": "byte_ptr",
                "uVar6": "length",
                "puVar7": "output_ptr",
                "puVar8": "temp_ptr1",
                "puVar9": "temp_ptr",
                "puVar10": "temp_ptr3",
                "iVar11": "index",
                "local_34": "sequence_array",
                "local_34[0]": "sequence_1",
                "local_34[1]": "sequence_2",
                "local_34[2]": "sequence_3",
                "find_byte_sequence_00006010": "find_byte_sequence",
                "extract_data_0000687c": "extract_data"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_0000687c",
                "FUN_00006010"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000656c": {
                    "3": "extract_data",
                    "6": "process_data",
                    "1": "extract_and_process_data"
                },
                "param_1": {
                    "10": "input",
                    "1": "input_data",
                    "5": "input_param",
                    "2": "result",
                    "4": "param1"
                },
                "param_2": {
                    "4": "param_array",
                    "3": "flags",
                    "2": "data_array",
                    "1": "arguments"
                },
                "param_3": {
                    "5": "data",
                    "2": "input_data",
                    "1": "byte_ptr_array",
                    "4": "buffer"
                },
                "param_4": {
                    "1": "input_variable4",
                    "4": "result",
                    "2": "return_value",
                    "10": "output"
                },
                "iVar1": {
                    "3": "index",
                    "1": "byte_sequence_index",
                    "7": "sequence_found",
                    "9": "result"
                },
                "uVar2": {
                    "2": "extracted_value",
                    "1": "decoded_data",
                    "3": "return_value",
                    "5": "updated_value",
                    "9": "result"
                },
                "pcVar3": {
                    "1": "byte_sequence_func",
                    "9": "function_pointer",
                    "2": "find_sequence",
                    "4": "function_ptr"
                },
                "uVar4": {
                    "1": "temp_variable3",
                    "12": "temp_value",
                    "3": "temp_var",
                    "2": "u_var4"
                },
                "pbVar5": {
                    "9": "byte_ptr",
                    "1": "byte",
                    "6": "byte_pointer",
                    "2": "temp_byte",
                    "5": "byte_value"
                },
                "uVar6": {
                    "1": "limit",
                    "2": "temp_var",
                    "8": "length"
                },
                "puVar7": {
                    "5": "output_ptr",
                    "1": "output_data_ptr",
                    "4": "output_pointer",
                    "2": "temp_ptr"
                },
                "puVar8": {
                    "1": "loop_pointer",
                    "2": "byte_pointer"
                },
                "puVar9": {
                    "1": "result_ptr_temp_3",
                    "3": "temp_ptr2",
                    "2": "next_byte_ptr",
                    "4": "temp_ptr"
                },
                "puVar10": {
                    "1": "temp_array3",
                    "2": "params_ptr",
                    "3": "temp_ptr3"
                },
                "unaff_r9": {
                    "2": "offset",
                    "1": "limit",
                    "4": "unaff_r9",
                    "3": "count"
                },
                "iVar11": {
                    "1": "temp_variable11",
                    "12": "index",
                    "2": "loop_index",
                    "7": "counter",
                    "3": "iteration_count"
                },
                "local_34": {
                    "1": "constants_arr",
                    "3": "sequence_array",
                    "2": "constants"
                },
                "local_34[0]": {
                    "1": "byte_sequence1"
                },
                "local_34[1]": {
                    "1": "pattern2"
                },
                "local_34[2]": {
                    "1": "byte_sequence3"
                },
                "find_byte_sequence_00006010": {
                    "1": "find_byte_sequence"
                },
                "extract_data_0000687c": {
                    "1": "extract_data"
                }
            }
        },
        "FUN_00006768": {
            "entrypoint": "0x00006768",
            "current_name": "process_data_00006768",
            "code": "\nundefined4\nprocess_data_00006768(undefined4 *input_array,undefined4 *data_array,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 temp_var1;\n  int temp_var2;\n  undefined4 temp_var3;\n  ushort flags;\n  uint temp5;\n  \n  if ((input_array != (undefined4 *)0x0) && (input_array[6] == 0)) {\n    initialize_memory();\n  }\n  if (data_array == &DAT_000079b8) {\n    data_array = (undefined4 *)input_array[1];\n  }\n  else if (data_array == (undefined4 *)&DAT_000079d8) {\n    data_array = (undefined4 *)input_array[2];\n  }\n  else if (data_array == (undefined4 *)&DAT_00007998) {\n    data_array = (undefined4 *)input_array[3];\n  }\n  flags = *(ushort *)(data_array + 3);\n  data_array[1] = 0;\n  temp5 = (uint)*(ushort *)(data_array + 3);\n  if ((int)(temp5 << 0x1a) < 0) {\n    return 0xffffffff;\n  }\n  if ((int)(temp5 << 0x1d) < 0) {\n    if ((undefined4 *)data_array[0xd] != (undefined4 *)0x0) {\n      if ((undefined4 *)data_array[0xd] != data_array + 0x11) {\n        initialize_data(input_array);\n      }\n      data_array[1] = data_array[0x10];\n      data_array[0xd] = 0;\n      if (data_array[0x10] != 0) {\n        *data_array = data_array[0xf];\n        return 0;\n      }\n    }\n  }\n  else {\n    if (-1 < (int)(temp5 << 0x1b)) {\n      *input_array = 9;\n      flags = flags | 0x40;\n      goto LAB_000067b8;\n    }\n    if ((int)(temp5 << 0x1c) < 0) {\n      temp_var2 = process_data_00006768(input_array,data_array,temp5 << 0x1c,temp5,param4);\n      if (temp_var2 != 0) {\n        return 0xffffffff;\n      }\n      data_array[2] = 0;\n      *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) & 0xfff7;\n      data_array[6] = 0;\n    }\n    *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) | 4;\n  }\n  if (data_array[4] == 0) {\n    process_and_allocate_memory(input_array,data_array);\n  }\n  flags = *(ushort *)(data_array + 3);\n  temp_var1 = *(undefined2 *)(data_array + 3);\n  if ((flags & 3) != 0) {\n    *(undefined2 *)(data_array + 3) = 1;\n    process_data_00006768(0x1fff0284,label);\n    *(undefined2 *)(data_array + 3) = temp_var1;\n    if ((flags & 9) == 9) {\n      process_data_00006768(input_array,data_array);\n    }\n  }\n  temp_var3 = data_array[4];\n  *data_array = temp_var3;\n  temp_var2 = (*(function_pointer *)data_array[9])(input_array,data_array[8],temp_var3,data_array[5]);\n  data_array[1] = temp_var2;\n  if (0 < temp_var2) {\n    return 0;\n  }\n  flags = *(ushort *)(data_array + 3);\n  if (temp_var2 != 0) {\n    temp_var3 = 0;\n  }\n  else {\n    flags = flags | 0x20;\n  }\n  if (temp_var2 != 0) {\n    data_array[1] = temp_var3;\n    flags = flags | 0x40;\n  }\nLAB_000067b8:\n  *(ushort *)(data_array + 3) = flags;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006768": "process_data_00006768",
                "param_1": "input_array",
                "param_2": "data_array",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "temp_var1",
                "iVar2": "temp_var2",
                "uVar3": "temp_var3",
                "uVar4": "flags",
                "uVar5": "temp5",
                "initialize_memory_000042a4": "initialize_memory",
                "initialize_data_00004b34": "initialize_data",
                "process_data_00004158": "process_data",
                "process_and_allocate_memory_00005700": "process_and_allocate_memory",
                "process_data_000043a0": "process_data",
                "process_data_0000404c": "process_data",
                "code": "function_pointer",
                "LAB_00006754_1": "label1",
                "&LAB_00006754_1": "label"
            },
            "calling": [
                "FUN_00005e10"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_0000404c",
                "FUN_00004158",
                "FUN_000043a0",
                "FUN_00004b34",
                "FUN_00005700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00006768": {
                    "1": "process_input_data",
                    "2": "process_and_handle_data",
                    "16": "process_data",
                    "4": "process_function"
                },
                "param_1": {
                    "2": "output_buffer",
                    "1": "input_param",
                    "3": "output_param",
                    "4": "input_params",
                    "7": "input_array",
                    "5": "input_data"
                },
                "param_2": {
                    "1": "info_array",
                    "2": "data_block",
                    "3": "input_param",
                    "5": "data_array"
                },
                "param_3": {
                    "1": "size_param",
                    "12": "param3",
                    "3": "value_1",
                    "2": "value1",
                    "4": "param_3"
                },
                "param_4": {
                    "1": "other_param",
                    "12": "param4",
                    "4": "param_4",
                    "3": "value_2",
                    "2": "value2"
                },
                "uVar1": {
                    "1": "result",
                    "7": "temp1",
                    "3": "temp_var_1",
                    "2": "value1",
                    "9": "temp_var1"
                },
                "iVar2": {
                    "3": "result",
                    "1": "value2",
                    "9": "temp_var2",
                    "2": "index",
                    "7": "temp2"
                },
                "uVar3": {
                    "9": "temp_var3",
                    "2": "result",
                    "1": "value2",
                    "3": "temp_var_3",
                    "7": "temp3"
                },
                "uVar4": {
                    "3": "temp_var4",
                    "1": "ushort_var2",
                    "12": "flags",
                    "6": "temp4"
                },
                "uVar5": {
                    "1": "data_val3",
                    "6": "shifted_value",
                    "4": "temp_var5",
                    "2": "temp_var4"
                },
                "initialize_memory_000042a4": {
                    "5": "initialize_memory"
                },
                "&DAT_000079b8": {
                    "1": "dat_value1"
                },
                "&DAT_000079d8": {
                    "1": "var_2"
                },
                "&DAT_00007998": {
                    "1": "data3"
                },
                "initialize_data_00004b34": {
                    "5": "initialize_data"
                },
                "process_data_00004158": {
                    "1": "process_data2",
                    "3": "process_data"
                },
                "process_and_allocate_memory_00005700": {
                    "4": "process_and_allocate_memory",
                    "1": "allocate_memory"
                },
                "process_data_000043a0": {
                    "1": "process_data_helper2"
                },
                "process_data_0000404c": {
                    "1": "process_data_helper3"
                },
                "code": {
                    "1": "function_code",
                    "3": "function_pointer"
                },
                "LAB_00006754_1": {
                    "1": "label1"
                },
                "*(ushort *)(param_2 + 3)": {
                    "1": "data4"
                },
                "&LAB_00006754_1": {
                    "1": "label"
                },
                "*(code *)param_2[9]": {
                    "1": "func"
                }
            }
        },
        "FUN_0000687c": {
            "entrypoint": "0x0000687c",
            "current_name": "extract_data_0000687c",
            "code": "\nbyte * extract_data_0000687c(int length,byte *data)\n\n{\n  byte *result;\n  uint temp_var;\n  int index;\n  uint current_byte;\n  uint start_index;\n  uint end_index;\n  bool is_carat;\n  \n  current_byte = (uint)*data;\n  is_carat = current_byte == 0x5e;\n  if (is_carat) {\n    current_byte = (uint)data[1];\n    data = data + 2;\n  }\n  else {\n    data = data + 1;\n  }\n  index = length + -1;\n  do {\n    index = index + 1;\n    *(bool *)index = is_carat;\n  } while (index != length + 0xff);\n  if (current_byte == 0) {\n    result = data + -1;\n  }\n  else {\nLAB_000068aa:\n    do {\n      start_index = current_byte;\n      *(bool *)(length + start_index) = !is_carat;\n      data = data + 1;\n      while( true ) {\n        current_byte = (uint)data[-1];\n        if (current_byte != 0x2d) break;\n        end_index = (uint)*data;\n        if ((end_index == 0x5d) || (temp_var = start_index, (int)end_index < (int)start_index)) goto LAB_000068aa;\n        do {\n          temp_var = temp_var + 1;\n          *(bool *)(length + temp_var) = !is_carat;\n        } while ((int)temp_var < (int)end_index);\n        index = ~start_index + end_index;\n        if ((int)end_index <= (int)start_index) {\n          index = 0;\n        }\n        start_index = start_index + 1 + index;\n        data = data + 2;\n      }\n      result = data;\n    } while ((current_byte != 0x5d) && (result = data + -1, current_byte != 0));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0000687c": "extract_data_0000687c",
                "param_1": "length",
                "param_2": "data",
                "pbVar1": "result",
                "uVar2": "temp_var",
                "iVar3": "index",
                "uVar4": "current_byte",
                "uVar5": "start_index",
                "uVar6": "end_index",
                "bVar7": "is_carat"
            },
            "calling": [
                "FUN_000061cc",
                "FUN_0000656c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000687c": {
                    "1": "reverse_and_copy_data",
                    "4": "extract_data",
                    "2": "extract_bytes"
                },
                "param_1": {
                    "6": "array_length",
                    "1": "size",
                    "2": "output_length",
                    "5": "data_length",
                    "3": "array_size",
                    "9": "length"
                },
                "param_2": {
                    "14": "data",
                    "1": "encoded_data",
                    "3": "byte_array",
                    "4": "input_array",
                    "2": "input_data"
                },
                "pbVar1": {
                    "3": "output_array",
                    "1": "decoded_string",
                    "4": "result_ptr",
                    "16": "result"
                },
                "uVar2": {
                    "1": "bracket_count",
                    "5": "temp",
                    "6": "temp_var",
                    "2": "comparison_value",
                    "3": "temp_var1"
                },
                "iVar3": {
                    "1": "array_index",
                    "3": "i",
                    "7": "counter",
                    "14": "index"
                },
                "uVar4": {
                    "1": "byte_value",
                    "2": "first_char",
                    "13": "current_byte",
                    "5": "first_byte"
                },
                "uVar5": {
                    "1": "current_char",
                    "6": "start_index",
                    "2": "start"
                },
                "uVar6": {
                    "1": "byte3",
                    "2": "next_byte",
                    "9": "end_index",
                    "3": "end_byte"
                },
                "bVar7": {
                    "2": "is_reversed",
                    "1": "is_nested_bracket",
                    "3": "is_carat"
                }
            }
        },
        "FUN_000068f0": {
            "entrypoint": "0x000068f0",
            "current_name": "allocate_and_copy_array_000068f0",
            "code": "\nundefined4 allocate_and_copy_array_000068f0(undefined4 param,int *array)\n\n{\n  int new_array;\n  int current_size;\n  \n  if ((int *)last_address == array + 0x11) {\n    new_array = allocate_memory(param,0x400);\n    if (new_array != 0) {\n      current_size = 0x400;\n      last_address = new_array;\n      *(undefined *)(new_array + 0x3ff) = *(undefined *)((int)array + 0x46);\n      *(undefined *)(new_array + 0x3fe) = *(undefined *)((int)array + 0x45);\n      *(undefined *)(new_array + 0x3fd) = *(undefined *)(array + 0x11);\n      *array = new_array + 0x3fd;\n      return 0;\n    }\n  }\n  else {\n    current_size = current_size;\n    new_array = allocate_and_copy_array_000068f0(param,(int *)last_address,current_size << 1);\n    if (new_array != 0) {\n      copy_array(new_array + current_size,new_array,current_size);\n      last_address = new_array;\n      current_size = current_size << 1;\n      *array = new_array + current_size;\n      return 0;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000068f0": "allocate_and_copy_array_000068f0",
                "param_1": "param",
                "param_2": "array",
                "iVar1": "new_array",
                "iVar2": "current_size",
                "allocate_memory_00004bd0": "allocate_memory",
                "copy_array_000060cc": "allocate_and_copy_array",
                "copy_array_000060b0": "copy_array",
                "allocate_and_copy_array_000060cc": "allocate_and_copy_array",
                "param_2[0xd]": "last_address",
                "param_2[0xe]": "current_size"
            },
            "calling": [],
            "called": [
                "FUN_00004bd0",
                "FUN_000060cc",
                "FUN_000060b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000068f0": {
                    "1": "allocate_and_copy_or_initialize_array",
                    "2": "memory_allocation_function",
                    "4": "initialize_array",
                    "3": "allocate_and_copy_memory",
                    "8": "allocate_and_copy_array"
                },
                "param_1": {
                    "1": "memory_address",
                    "2": "memory_manager",
                    "4": "param1",
                    "6": "param"
                },
                "param_2": {
                    "24": "array",
                    "1": "memory_array"
                },
                "iVar1": {
                    "2": "new_array_address",
                    "3": "new_array_ptr",
                    "5": "allocated_memory",
                    "8": "new_array",
                    "1": "new_memory_block",
                    "7": "new_memory"
                },
                "iVar2": {
                    "8": "array_length",
                    "1": "original_length",
                    "5": "array_size",
                    "11": "current_size",
                    "2": "old_size"
                },
                "allocate_memory_00004bd0": {
                    "1": "allocate_memory_and_initialize",
                    "17": "allocate_memory"
                },
                "copy_array_000060cc": {
                    "2": "allocate_and_copy_array"
                },
                "copy_array_000060b0": {
                    "18": "copy_array"
                },
                "allocate_and_copy_array_000060cc": {
                    "1": "double_array_size",
                    "10": "allocate_and_copy_array"
                },
                "param_2[0xd]": {
                    "1": "current_array"
                },
                "param_2 + 0x11": {
                    "1": "expected_next_address"
                },
                "*param_2": {
                    "1": "new_address"
                },
                "*(undefined *)((int)param_2 + 0x46)": {
                    "1": "copy_element_1"
                },
                "*(undefined *)((int)param_2 + 0x45)": {
                    "1": "value_at_param2_plus_0x45"
                },
                "*(undefined *)(param_2 + 0x11)": {
                    "1": "copy_element_3"
                },
                "iVar1 + 0x3ff": {
                    "1": "updated_address_1"
                },
                "iVar1 + 0x3fe": {
                    "1": "updated_address_2"
                },
                "iVar1 + 0x3fd": {
                    "1": "updated_address_3"
                },
                "(int *)param_2[0xd]": {
                    "1": "array[13]"
                },
                "iVar2 << 1": {
                    "1": "updated_size"
                },
                "0x400": {
                    "1": "initial_array_size",
                    "2": "new_size"
                },
                "0xd": {
                    "1": "array_size_ptr"
                },
                "0xe": {
                    "1": "current_array_size"
                },
                "0x3ff": {
                    "1": "last_element_ptr"
                },
                "0x3fe": {
                    "1": "second_last_element_ptr"
                },
                "0x3fd": {
                    "1": "element_ptr"
                },
                "0xffffffff": {
                    "1": "failure"
                },
                "param_2[0xe]": {
                    "1": "current_size"
                },
                "return 0": {
                    "1": "success"
                }
            }
        },
        "FUN_00006964": {
            "entrypoint": "0x00006964",
            "current_name": "calculate_sum_00006964",
            "code": "\nint calculate_sum_00006964(undefined4 result,int array)\n\n{\n  int sum;\n  \n  sum = *(int *)(array + -4) + -4;\n  if (*(int *)(array + -4) < 0) {\n    sum = sum + *(int *)(array + sum);\n  }\n  return sum;\n}\n\n",
            "renaming": {
                "FUN_00006964": "calculate_sum_00006964",
                "param_1": "result",
                "param_2": "array",
                "iVar1": "sum"
            },
            "calling": [
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00006964": {
                    "14": "calculate_sum",
                    "2": "calculate_modified_value",
                    "9": "calculate_result"
                },
                "param_1": {
                    "2": "input",
                    "1": "input1",
                    "11": "result",
                    "5": "param"
                },
                "param_2": {
                    "3": "input",
                    "5": "data",
                    "6": "array_index",
                    "1": "index",
                    "2": "array_address"
                },
                "iVar1": {
                    "1": "current_value",
                    "5": "result",
                    "2": "current_index",
                    "12": "sum",
                    "3": "new_index"
                },
                "*(int *)(param_2 + -4)": {
                    "1": "array_size"
                },
                "*(int *)(param_2 + iVar1)": {
                    "1": "current_value"
                }
            }
        },
        "FUN_00006974": {
            "entrypoint": "0x00006974",
            "current_name": "perform_division_00006974",
            "code": "\nundefined8 perform_division_00006974(int dividend,int divisor,int dividend_sign,int remainder)\n\n{\n  int adjusted_divisor;\n  undefined8 result;\n  undefined temp [8];\n  \n  if ((remainder == 0) && (dividend_sign == 0)) {\n    if (divisor < 0) {\n      dividend = 0;\n      divisor = -0x80000000;\n    }\n    else if (divisor != 0 || dividend != 0) {\n      divisor = 0x7fffffff;\n      dividend = -1;\n    }\n    return CONCAT44(divisor,dividend);\n  }\n  if (divisor < 0) {\n    adjusted_divisor = -divisor - (uint)(dividend != 0);\n    if (remainder < 0) {\n      result = perform_division_00006974_00006a14(-dividend,adjusted_divisor,-dividend_sign,-remainder - (uint)(dividend_sign != 0),temp);\n      return result;\n    }\n    result = perform_division_00006974_00006a14(-dividend,adjusted_divisor,dividend_sign,remainder,temp);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  if (remainder < 0) {\n    result = perform_division_00006974_00006a14(dividend,divisor,-dividend_sign,-remainder - (uint)(dividend_sign != 0),temp);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  result = perform_division_00006974_00006a14();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00006974": "perform_division_00006974",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "dividend_sign",
                "param_4": "remainder",
                "iVar1": "adjusted_divisor",
                "uVar2": "result",
                "local_8": "temp"
            },
            "calling": [
                "FUN_0000443c"
            ],
            "called": [
                "FUN_00006a14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00006974": {
                    "1": "division_with_bounds_check",
                    "2": "get_division_result",
                    "4": "calculate_result",
                    "16": "perform_division"
                },
                "param_1": {
                    "1": "numerator",
                    "22": "dividend",
                    "2": "dividend_1",
                    "3": "dividend1"
                },
                "param_2": {
                    "3": "dividend2",
                    "1": "input_num_2",
                    "22": "divisor",
                    "2": "dividend_2"
                },
                "param_3": {
                    "1": "neg_dividend",
                    "2": "divisor_1",
                    "3": "divisor1",
                    "5": "dividend_sign",
                    "4": "quotient"
                },
                "param_4": {
                    "1": "bound_2",
                    "5": "divisor_sign",
                    "3": "divisor2",
                    "2": "divisor_2"
                },
                "iVar1": {
                    "1": "negative_value",
                    "2": "negative_divisor",
                    "3": "abs_divisor",
                    "11": "adjusted_divisor"
                },
                "uVar2": {
                    "23": "result",
                    "1": "final_result",
                    "4": "quotient"
                },
                "local_8": {
                    "1": "temporary_buffer",
                    "4": "temp_buffer",
                    "6": "temp_array",
                    "3": "remainder",
                    "2": "result"
                }
            }
        },
        "FUN_00006a14": {
            "entrypoint": "0x00006a14",
            "current_name": "perform_division_00006a14",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006ca0) */\n\nulonglong perform_division_00006a14(uint dividend,uint dividend_high,uint divisor,uint divisor_high,uint *remainder)\n\n{\n  code *jump_table;\n  uint quotient;\n  int shift_amount;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  bool carry_flag;\n  ulonglong result;\n  \n  if (divisor_high == 0) {\n    if (dividend_high < divisor) {\n      shift_amount = LZCOUNT(divisor);\n      temp3 = divisor;\n      if (shift_amount != 0) {\n        temp3 = divisor << shift_amount;\n        dividend_high = dividend >> (0x20U - shift_amount & 0xff) | dividend_high << shift_amount;\n        dividend = dividend << shift_amount;\n      }\n      temp4 = temp3 >> 0x10;\n      temp6 = dividend_high / temp4;\n      temp1 = dividend >> 0x10 | (dividend_high - temp4 * temp6) * 0x10000;\n      quotient = temp6 * (temp3 & 0xffff);\n      temp2 = temp6;\n      if (temp1 <= quotient && quotient - temp1 != 0) {\n        carry_flag = CARRY4(temp3,temp1);\n        temp1 = temp3 + temp1;\n        temp2 = temp6 - 1;\n        if ((carry_flag == false) && (temp1 <= quotient && quotient - temp1 != 0)) {\n          temp2 = temp6 - 2;\n          temp1 = temp1 + temp3;\n        }\n      }\n      temp6 = (temp1 - quotient) / temp4;\n      temp4 = dividend & 0xffff | ((temp1 - quotient) - temp4 * temp6) * 0x10000;\n      temp1 = temp6 * (temp3 & 0xffff);\n      quotient = temp6;\n      if (temp4 <= temp1 && temp1 - temp4 != 0) {\n        carry_flag = CARRY4(temp3,temp4);\n        temp4 = temp3 + temp4;\n        quotient = temp6 - 1;\n        if ((carry_flag == false) && (temp4 <= temp1 && temp1 - temp4 != 0)) {\n          quotient = temp6 - 2;\n          temp4 = temp4 + temp3;\n        }\n      }\n      temp4 = temp4 - temp1;\n      quotient = quotient | temp2 << 0x10;\n      temp3 = 0;\n    }\n    else {\n      if (divisor == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        jump_table = (code *)software_udf(0xff,0x6abc);\n        result = (*jump_table)();\n        return result;\n      }\n      shift_amount = LZCOUNT(divisor);\n      if (shift_amount == 0) {\n        dividend_high = dividend_high - divisor;\n        temp7 = divisor >> 0x10;\n        temp5 = divisor & 0xffff;\n        temp3 = 1;\n        temp2 = divisor;\n      }\n      else {\n        temp2 = divisor << shift_amount;\n        temp7 = temp2 >> 0x10;\n        quotient = dividend_high >> (0x20U - shift_amount & 0xff);\n        temp3 = dividend >> (0x20U - shift_amount & 0xff) | dividend_high << shift_amount;\n        temp1 = quotient / temp7;\n        temp5 = temp2 & 0xffff;\n        temp6 = temp3 >> 0x10 | (quotient - temp7 * temp1) * 0x10000;\n        temp4 = temp1 * temp5;\n        dividend = dividend << shift_amount;\n        quotient = temp1;\n        if (temp6 <= temp4 && temp4 - temp6 != 0) {\n          carry_flag = CARRY4(temp2,temp6);\n          temp6 = temp2 + temp6;\n          quotient = temp1 - 1;\n          if ((carry_flag == false) && (temp6 <= temp4 && temp4 - temp6 != 0)) {\n            quotient = temp1 - 2;\n            temp6 = temp6 + temp2;\n          }\n        }\n        temp1 = (temp6 - temp4) / temp7;\n        dividend_high = temp3 & 0xffff | ((temp6 - temp4) - temp7 * temp1) * 0x10000;\n        temp4 = temp1 * temp5;\n        temp3 = temp1;\n        if (dividend_high <= temp4 && temp4 - dividend_high != 0) {\n          carry_flag = CARRY4(temp2,dividend_high);\n          dividend_high = temp2 + dividend_high;\n          temp3 = temp1 - 1;\n          if ((carry_flag == false) && (dividend_high <= temp4 && temp4 - dividend_high != 0)) {\n            temp3 = temp1 - 2;\n            dividend_high = dividend_high + temp2;\n          }\n        }\n        dividend_high = dividend_high - temp4;\n        temp3 = temp3 | quotient << 0x10;\n      }\n      temp6 = dividend_high / temp7;\n      temp4 = dividend >> 0x10 | (dividend_high - temp7 * temp6) * 0x10000;\n      quotient = temp5 * temp6;\n      temp1 = temp6;\n      if (temp4 <= quotient && quotient - temp4 != 0) {\n        carry_flag = CARRY4(temp2,temp4);\n        temp4 = temp2 + temp4;\n        temp1 = temp6 - 1;\n        if ((carry_flag == false) && (temp4 <= quotient && quotient - temp4 != 0)) {\n          temp1 = temp6 - 2;\n          temp4 = temp4 + temp2;\n        }\n      }\n      temp6 = (temp4 - quotient) / temp7;\n      temp4 = dividend & 0xffff | ((temp4 - quotient) - temp7 * temp6) * 0x10000;\n      temp5 = temp5 * temp6;\n      quotient = temp6;\n      if (temp4 <= temp5 && temp5 - temp4 != 0) {\n        carry_flag = CARRY4(temp2,temp4);\n        temp4 = temp2 + temp4;\n        quotient = temp6 - 1;\n        if ((carry_flag == false) && (temp4 <= temp5 && temp5 - temp4 != 0)) {\n          quotient = temp6 - 2;\n          temp4 = temp4 + temp2;\n        }\n      }\n      temp4 = temp4 - temp5;\n      quotient = quotient | temp1 << 0x10;\n    }\n    if (remainder != (uint *)0x0) {\n      *remainder = temp4 >> LZCOUNT(divisor);\n      remainder[1] = 0;\n    }\n  }\n  else if (dividend_high < divisor_high) {\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = dividend_high;\n      return 0;\n    }\n    quotient = 0;\n    temp3 = 0;\n  }\n  else {\n    shift_amount = LZCOUNT(divisor_high);\n    if (shift_amount != 0) {\n      temp5 = 0x20 - shift_amount;\n      temp1 = divisor >> (temp5 & 0xff) | divisor_high << shift_amount;\n      temp7 = temp1 >> 0x10;\n      quotient = dividend_high >> (temp5 & 0xff);\n      temp3 = dividend >> (temp5 & 0xff) | dividend_high << shift_amount;\n      temp4 = quotient / temp7;\n      temp2 = temp3 >> 0x10 | (quotient - temp7 * temp4) * 0x10000;\n      temp6 = temp4 * (temp1 & 0xffff);\n      dividend = dividend << shift_amount;\n      quotient = temp4;\n      if (temp2 <= temp6 && temp6 - temp2 != 0) {\n        carry_flag = CARRY4(temp1,temp2);\n        temp2 = temp1 + temp2;\n        quotient = temp4 - 1;\n        if ((carry_flag == false) && (temp2 <= temp6 && temp6 - temp2 != 0)) {\n          quotient = temp4 - 2;\n          temp2 = temp2 + temp1;\n        }\n      }\n      temp4 = (temp2 - temp6) / temp7;\n      temp2 = temp3 & 0xffff | ((temp2 - temp6) - temp7 * temp4) * 0x10000;\n      temp6 = temp4 * (temp1 & 0xffff);\n      temp3 = temp4;\n      if (temp2 <= temp6 && temp6 - temp2 != 0) {\n        carry_flag = CARRY4(temp1,temp2);\n        temp2 = temp1 + temp2;\n        temp3 = temp4 - 1;\n        if ((carry_flag == false) && (temp2 <= temp6 && temp6 - temp2 != 0)) {\n          temp3 = temp4 - 2;\n          temp2 = temp2 + temp1;\n        }\n      }\n      temp3 = temp3 | quotient << 0x10;\n      result = (ulonglong)temp3 * (ulonglong)(divisor << shift_amount);\n      if (CONCAT44(temp2 - temp6,dividend) < result) {\n        result = result - CONCAT44(temp1,divisor << shift_amount);\n        temp3 = temp3 - 1;\n      }\n      if (remainder != (uint *)0x0) {\n        quotient = ((temp2 - temp6) - (int)(result >> 0x20)) - (uint)(dividend < (uint)result);\n        *remainder = quotient << (temp5 & 0xff) | dividend - (uint)result >> shift_amount;\n        remainder[1] = quotient >> shift_amount;\n      }\n      return (ulonglong)temp3;\n    }\n    if ((divisor_high < dividend_high) || (divisor <= dividend)) {\n      carry_flag = dividend < divisor;\n      dividend = dividend - divisor;\n      dividend_high = (dividend_high - divisor_high) - (uint)carry_flag;\n      quotient = 1;\n    }\n    else {\n      quotient = 0;\n    }\n    temp3 = 0;\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = dividend_high;\n    }\n  }\n  return CONCAT44(temp3,quotient);\n}\n\n",
            "renaming": {
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "param_5": "remainder",
                "uVar1": "quotient",
                "iVar2": "shift_amount",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "uVar8": "temp6",
                "uVar9": "temp7",
                "bVar10": "carry_flag",
                "uVar11": "result",
                "FUN_00006a14": "perform_division_00006a14",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "calling": [
                "FUN_00006974"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "1": "input_1",
                    "2": "input1",
                    "28": "dividend"
                },
                "param_2": {
                    "6": "dividend_upper",
                    "2": "dividend_upper_bits",
                    "3": "dividend_lower",
                    "1": "input_2",
                    "5": "divisor",
                    "8": "dividend_high"
                },
                "param_3": {
                    "1": "numerator",
                    "2": "divisor_high",
                    "22": "divisor"
                },
                "param_4": {
                    "1": "divide_by_zero_check",
                    "8": "divisor_high",
                    "2": "comparison",
                    "3": "divisor_upper",
                    "4": "divisor_lower"
                },
                "param_5": {
                    "1": "output",
                    "8": "quotient_and_remainder",
                    "10": "remainder",
                    "3": "result",
                    "6": "quotient"
                },
                "uVar1": {
                    "2": "quotient_high",
                    "1": "result",
                    "6": "quotient_low",
                    "8": "quotient"
                },
                "iVar2": {
                    "1": "bits_to_shift",
                    "14": "shift_amount",
                    "5": "shift_count",
                    "6": "shift"
                },
                "uVar3": {
                    "1": "remainder_high",
                    "18": "temp1",
                    "2": "quotient_high"
                },
                "uVar4": {
                    "1": "temp4",
                    "14": "temp2",
                    "2": "quotient"
                },
                "uVar5": {
                    "1": "result",
                    "2": "quotient2",
                    "7": "temp3"
                },
                "uVar6": {
                    "1": "dividend_remainder1",
                    "4": "remainder",
                    "2": "temp3",
                    "6": "temp4"
                },
                "uVar7": {
                    "1": "temp4",
                    "3": "temp3",
                    "5": "temp5",
                    "2": "shifted_divisor"
                },
                "uVar8": {
                    "1": "temp4",
                    "3": "temp3",
                    "2": "quotient3",
                    "5": "temp6"
                },
                "uVar9": {
                    "1": "dividend_divisor_quotient",
                    "2": "temp4",
                    "4": "temp7"
                },
                "bVar10": {
                    "10": "carry",
                    "2": "is_carry",
                    "1": "condition",
                    "15": "carry_flag"
                },
                "uVar11": {
                    "2": "output",
                    "1": "return_val",
                    "23": "result"
                },
                "FUN_00006a14": {
                    "1": "calculate_quotient_and_remainder",
                    "2": "division_with_remainder",
                    "4": "calculate_division_and_remainder",
                    "5": "perform_division"
                },
                "uVar10": {
                    "1": "carry_check",
                    "3": "carry_flag"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "1": "unrecovered_jump_table"
                }
            }
        }
    },
    "used_tokens": 735552,
    "layers": [
        [
            "FUN_000004f2",
            "FUN_00000514",
            "FUN_00000534",
            "FUN_00000566",
            "FUN_0000058e",
            "FUN_000005ca",
            "FUN_000007dc",
            "FUN_000008b8",
            "FUN_00000900",
            "FUN_0000091c",
            "FUN_0000093c",
            "FUN_00000cd0",
            "FUN_00000cf0",
            "FUN_00000d0c",
            "FUN_00000d2a",
            "FUN_00000d44",
            "FUN_00000dcc",
            "FUN_000010a0",
            "FUN_00001318",
            "FUN_00001360",
            "FUN_000015d0",
            "FUN_00001696",
            "FUN_00001748",
            "FUN_00001ad4",
            "FUN_00001d08",
            "FUN_00001d5e",
            "FUN_00001d80",
            "FUN_00001da2",
            "FUN_00001dc0",
            "FUN_00001e0c",
            "FUN_00001e44",
            "FUN_00002270",
            "FUN_00002294",
            "FUN_000022be",
            "FUN_000022f0",
            "FUN_000023c8",
            "FUN_0000240c",
            "FUN_00002538",
            "FUN_000026f0",
            "FUN_00002714",
            "FUN_00002744",
            "FUN_0000281c",
            "FUN_0000285c",
            "FUN_000028f0",
            "FUN_00002910",
            "FUN_0000294c",
            "FUN_00002970",
            "FUN_000031fc",
            "FUN_00003658",
            "FUN_00003810",
            "FUN_00003918",
            "FUN_000039e8",
            "FUN_00003d24",
            "FUN_00003d64",
            "FUN_00003d94",
            "FUN_00003dc4",
            "FUN_00004274",
            "FUN_00004280",
            "FUN_0000428c",
            "FUN_000043a0",
            "FUN_000045ee",
            "FUN_00004622",
            "FUN_00004e52",
            "FUN_00004e66",
            "FUN_00004f84",
            "FUN_000050e8",
            "FUN_000050f4",
            "FUN_00005584",
            "FUN_000056b0",
            "FUN_00005790",
            "FUN_0000579c",
            "FUN_00005a58",
            "FUN_00005ebc",
            "FUN_00005ecc",
            "FUN_00005edc",
            "FUN_00005fec",
            "FUN_00005ff8",
            "FUN_00006010",
            "FUN_000060b0",
            "FUN_000064bc",
            "FUN_0000687c",
            "FUN_00006964",
            "FUN_00006a14"
        ],
        [
            "FUN_00000428",
            "FUN_00000610",
            "FUN_00000698",
            "FUN_00000738",
            "FUN_00000930",
            "FUN_00000d76",
            "FUN_00000e38",
            "FUN_00000e58",
            "FUN_00001348",
            "FUN_00001392",
            "FUN_000014c4",
            "FUN_000016c8",
            "FUN_000016ec",
            "FUN_00001710",
            "FUN_00001cf0",
            "FUN_00001d3a",
            "FUN_00001ec4",
            "FUN_00001ff6",
            "FUN_0000231c",
            "FUN_00002364",
            "FUN_000023d0",
            "FUN_0000258c",
            "FUN_000026c0",
            "FUN_000026d8",
            "FUN_000026e4",
            "FUN_00002798",
            "FUN_000027b0",
            "FUN_00002894",
            "FUN_00002a18",
            "FUN_0000328c",
            "FUN_00003688",
            "FUN_00003e58",
            "FUN_00003ff4",
            "FUN_00004042",
            "FUN_000041f4",
            "FUN_00004634",
            "FUN_00004b34",
            "FUN_00004e26",
            "FUN_00004f98",
            "FUN_0000562c",
            "FUN_000056b8",
            "FUN_00005b34",
            "FUN_00005fd8",
            "FUN_0000656c",
            "FUN_00006974"
        ],
        [
            "FUN_00000794",
            "FUN_00000d9c",
            "FUN_00001628",
            "FUN_00001734",
            "FUN_00001778",
            "FUN_000017dc",
            "FUN_0000182c",
            "FUN_000018bc",
            "FUN_00001960",
            "FUN_00001a60",
            "FUN_00001bb8",
            "FUN_00001ddc",
            "FUN_00002028",
            "FUN_000024bc",
            "FUN_000025f4",
            "FUN_00002994",
            "FUN_00002e9c",
            "FUN_0000404c",
            "FUN_0000443c",
            "FUN_00004bd0",
            "FUN_00004dee",
            "FUN_000056a0",
            "FUN_00005780",
            "FUN_00006192"
        ],
        [
            "FUN_00000db0",
            "FUN_000012b4",
            "FUN_00001688",
            "FUN_0000191c",
            "FUN_000019c0",
            "FUN_00001a18",
            "FUN_00001a3c",
            "FUN_00001f80",
            "FUN_000020b8",
            "FUN_000020cc",
            "FUN_000020e0",
            "FUN_000020f4",
            "FUN_00002108",
            "FUN_00002396",
            "FUN_00002624",
            "FUN_00002690",
            "FUN_00004248",
            "FUN_00005700",
            "FUN_000060cc",
            "FUN_000061cc"
        ],
        [
            "FUN_00001448",
            "FUN_00001b10",
            "FUN_00001eea",
            "FUN_00005e68",
            "FUN_000068f0"
        ],
        [
            "FUN_00001c84",
            "FUN_00005100"
        ],
        [
            "FUN_00001274",
            "FUN_000047e4"
        ],
        [
            "FUN_00000e64",
            "FUN_00002600",
            "FUN_00002654"
        ],
        [
            "FUN_000031e0",
            "FUN_000033f4",
            "FUN_00003478",
            "FUN_000034c0"
        ],
        [
            "FUN_00000ed8",
            "FUN_0000211c",
            "FUN_00003378"
        ],
        [
            "FUN_00002eb4"
        ],
        [
            "FUN_00004158",
            "FUN_00004314",
            "FUN_000054a8"
        ],
        [
            "FUN_000041d0",
            "FUN_000042a4"
        ],
        [
            "FUN_00005404",
            "FUN_00006768"
        ],
        [
            "FUN_00004cb4",
            "FUN_00004db8",
            "FUN_000057a8",
            "FUN_00005e10"
        ],
        [
            "FUN_00002a00",
            "FUN_000033c0",
            "FUN_00003444",
            "FUN_00004418",
            "FUN_000057d2"
        ],
        [
            "FUN_00002d94",
            "FUN_00002e48",
            "FUN_000057f8"
        ],
        [
            "FUN_00004c84"
        ],
        [
            "FUN_00002a88",
            "FUN_00002f74",
            "FUN_00003524"
        ],
        [
            "FUN_00002b10"
        ],
        [
            "FUN_00002e6c"
        ],
        [
            "FUN_000023a4"
        ],
        [
            "FUN_00000f04"
        ],
        [
            "FUN_00000a30",
            "FUN_00000cc0",
            "FUN_00000fec",
            "FUN_00001034",
            "FUN_000013b8",
            "FUN_00003ec4"
        ],
        [
            "FUN_00000dc0",
            "FUN_00000df4",
            "FUN_000010d4",
            "FUN_00002434",
            "FUN_00003e9e"
        ],
        [
            "FUN_00000410",
            "FUN_00000f8c",
            "FUN_0000129c",
            "FUN_00003694"
        ],
        [
            "FUN_000012e2",
            "FUN_00002ecc",
            "FUN_0000305c",
            "FUN_0000459c"
        ],
        [
            "FUN_00000e14",
            "FUN_00002f30"
        ],
        [
            "FUN_00000490",
            "FUN_00002fe0"
        ],
        [
            "FUN_0000316c",
            "FUN_00004dc8"
        ]
    ],
    "locked_functions": []
}