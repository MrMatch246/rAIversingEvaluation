{
    "functions": {
        "FUN_00000410": {
            "entrypoint": "0x00000410",
            "current_name": "FUNC_00000410",
            "code": "\nvoid FUNC_00000410(void)\n\n{\n  uart_stdio_init();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000410": "FUNC_00000410"
            },
            "calling": [
                "FUN_0000459c"
            ],
            "called": [
                "FUN_00000df4"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00000428": {
            "entrypoint": "0x00000428",
            "current_name": "update_offset_00000428",
            "code": "\ndword update_offset_00000428(undefined4 *result,int input_offset)\n\n{\n  undefined4 interrupt_status;\n  dword new_offset;\n  \n  interrupt_status = irq_disable();\n  new_offset = array_pointer[0].r_offset;\n  if ((input_offset + array_pointer[0].r_offset < 0x20030001) &&\n     (0x1fff0def < input_offset + array_pointer[0].r_offset)) {\n    array_pointer[0].r_offset = input_offset + array_pointer[0].r_offset;\n  }\n  else {\n    *result = 0xc;\n    new_offset = 0xffffffff;\n  }\n  irq_restore(interrupt_status);\n  return new_offset;\n}\n\n",
            "renaming": {
                "FUN_00000428": "update_offset_00000428",
                "param_1": "result",
                "param_2": "input_offset",
                "uVar1": "interrupt_status",
                "local_c": "new_offset",
                "Elf32_Rel_ARRAY_1fff0200": "array_pointer"
            },
            "calling": [
                "FUN_00004bd0"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000428": {
                    "1": "calculate_rel_offset",
                    "8": "update_offset",
                    "2": "calculate_new_offset"
                },
                "param_1": {
                    "1": "parameter_pointer",
                    "2": "output_value",
                    "3": "result_pointer",
                    "16": "result"
                },
                "param_2": {
                    "1": "new_value",
                    "5": "current_offset",
                    "9": "input_offset",
                    "2": "value",
                    "3": "new_offset"
                },
                "uVar1": {
                    "1": "previous_interrupt_status",
                    "3": "irq_disabled",
                    "4": "irq_status",
                    "6": "interrupt_status",
                    "2": "irq_state"
                },
                "local_c": {
                    "4": "updated_offset",
                    "2": "current_offset",
                    "1": "result_offset",
                    "3": "original_offset",
                    "8": "new_offset"
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "1": "array_pointer"
                }
            }
        },
        "FUN_00000490": {
            "entrypoint": "0x00000490",
            "current_name": "read_from_uart_00000490",
            "code": "\nundefined4 read_from_uart_00000490(undefined4 unused_param,undefined4 unused_param,undefined4 input_buffer,undefined4 buffer_size)\n\n{\n  undefined4 read_result;\n  \n  read_result = uart_stdio_read(input_buffer,buffer_size);\n  return read_result;\n}\n\n",
            "renaming": {
                "FUN_00000490": "read_from_uart_00000490",
                "param_1": "unused_param",
                "param_2": "unused_param",
                "param_3": "input_buffer",
                "param_4": "buffer_size",
                "uVar1": "read_result"
            },
            "calling": [
                "FUN_00004dc8"
            ],
            "called": [
                "FUN_00000e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000490": {
                    "9": "read_uart_input",
                    "1": "read_input_from_uart",
                    "8": "read_uart_data"
                },
                "param_1": {
                    "1": "input_param",
                    "5": "arg1",
                    "11": "unused_param",
                    "6": "param_1"
                },
                "param_2": {
                    "4": "unused_param_2",
                    "2": "unmodified_param_2",
                    "1": "input_param_2",
                    "8": "unused_param",
                    "6": "param_2",
                    "5": "arg2"
                },
                "param_3": {
                    "7": "input_buffer",
                    "3": "uart_input_buffer",
                    "2": "uart_buffer",
                    "4": "buffer_param",
                    "1": "uart_data_ptr",
                    "5": "buffer"
                },
                "param_4": {
                    "1": "length",
                    "19": "buffer_size",
                    "2": "size",
                    "3": "size_param"
                },
                "uVar1": {
                    "1": "bytes_read",
                    "14": "read_result",
                    "6": "result"
                },
                "FUN_00000e14": {
                    "1": "write_data_to_uart"
                }
            }
        },
        "FUN_000004f2": {
            "entrypoint": "0x000004f2",
            "current_name": "set_param_and_return_000004f2",
            "code": "\nundefined4 set_param_and_return_000004f2(undefined4 *output_value)\n\n{\n  *output_value = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000004f2": "set_param_and_return_000004f2",
                "param_1": "output_value"
            },
            "calling": [
                "FUN_00004e26",
                "FUN_00004dee"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000004f2": {
                    "1": "initialize_parameter",
                    "2": "set_default_value",
                    "3": "initialize_variable",
                    "4": "set_param_and_return"
                },
                "param_1": {
                    "2": "value_ptr",
                    "1": "result_pointer",
                    "9": "output_value",
                    "3": "result"
                },
                "*param_1": {
                    "1": "parameter_value"
                },
                "0x13": {
                    "1": "initial_value"
                },
                "param_1_value": {
                    "1": "value"
                },
                "param_1_updated": {
                    "1": "new_return_value"
                }
            }
        },
        "FUN_00000514": {
            "entrypoint": "0x00000514",
            "current_name": "set_param_and_return_00000514",
            "code": "\nundefined4 set_param_and_return_00000514(undefined4 *output_value)\n\n{\n  *output_value = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00000514": "set_param_and_return_00000514",
                "param_1": "output_value"
            },
            "calling": [
                "FUN_000056b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000514": {
                    "1": "initialize_value_and_return_negative_one",
                    "5": "set_param_and_return",
                    "2": "initialize_parameter",
                    "3": "set_default_value"
                },
                "param_1": {
                    "1": "integer_pointer",
                    "13": "output_value",
                    "2": "result_pointer",
                    "3": "value_ptr"
                },
                "*param_1": {
                    "1": "result"
                },
                "<original_function_name>": {
                    "1": "set_value_and_return_error"
                },
                "<param_1>": {
                    "1": "value"
                },
                "0x13": {
                    "1": "default_value"
                },
                "0xffffffff": {
                    "1": "error_code"
                }
            }
        },
        "FUN_00000534": {
            "entrypoint": "0x00000534",
            "current_name": "check_valid_input_00000534",
            "code": "\nundefined4 check_valid_input_00000534(undefined4 *result,int input)\n\n{\n  undefined4 is_valid;\n  \n  *result = 0;\n  if (((input == 0) || (input == 1)) || (input == 2)) {\n    is_valid = 1;\n  }\n  else {\n    is_valid = 0;\n  }\n  return is_valid;\n}\n\n",
            "renaming": {
                "FUN_00000534": "check_valid_input_00000534",
                "param_1": "result",
                "param_2": "input",
                "uVar1": "is_valid"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000534": {
                    "2": "check_input_validity",
                    "3": "check_input",
                    "1": "check_validity",
                    "17": "check_valid_input",
                    "4": "check_valid_param"
                },
                "param_1": {
                    "1": "is_valid",
                    "2": "output_result",
                    "10": "output",
                    "14": "result"
                },
                "param_2": {
                    "17": "input",
                    "11": "input_value",
                    "3": "input_param"
                },
                "uVar1": {
                    "20": "is_valid",
                    "1": "is_valid_input"
                }
            }
        },
        "FUN_00000566": {
            "entrypoint": "0x00000566",
            "current_name": "convert_byte_to_integer_00000566",
            "code": "\nint convert_byte_to_integer_00000566(int input)\n\n{\n  byte byte1;\n  byte byte2;\n  byte byte3;\n  byte byte4;\n  int result;\n  \n  byte2 = (byte)input;\n  byte3 = (byte)((uint)input >> 8);\n  byte4 = (byte)((uint)input >> 0x10);\n  byte1 = (byte)((uint)input >> 0x18);\n  result = LZCOUNT((uint)(byte)((((((((byte2 & 1) << 1 | byte2 >> 1 & 1) << 1 | byte2 >> 2 & 1) << 1\n                                  | byte2 >> 3 & 1) << 1 | byte2 >> 4 & 1) << 1 | byte2 >> 5 & 1) <<\n                                1 | byte2 >> 6 & 1) << 1 | byte2 >> 7) << 0x18 |\n                  (uint)(byte)((((((((byte3 & 1) << 1 | byte3 >> 1 & 1) << 1 | byte3 >> 2 & 1) << 1\n                                  | byte3 >> 3 & 1) << 1 | byte3 >> 4 & 1) << 1 | byte3 >> 5 & 1) <<\n                                1 | byte3 >> 6 & 1) << 1 | byte3 >> 7) << 0x10 |\n                  (uint)(byte)((((((((byte4 & 1) << 1 | byte4 >> 1 & 1) << 1 | byte4 >> 2 & 1) << 1\n                                  | byte4 >> 3 & 1) << 1 | byte4 >> 4 & 1) << 1 | byte4 >> 5 & 1) <<\n                                1 | byte4 >> 6 & 1) << 1 | byte4 >> 7) << 8 |\n                  (uint)(byte)((((((((byte1 & 1) << 1 | byte1 >> 1 & 1) << 1 | byte1 >> 2 & 1) << 1\n                                  | byte1 >> 3 & 1) << 1 | byte1 >> 4 & 1) << 1 | byte1 >> 5 & 1) <<\n                                1 | byte1 >> 6 & 1) << 1 | byte1 >> 7));\n  if (input == 0) {\n    result = -1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000566": "convert_byte_to_integer_00000566",
                "param_1": "input",
                "bVar1": "byte1",
                "bVar2": "byte2",
                "bVar3": "byte3",
                "bVar4": "byte4",
                "iVar5": "result"
            },
            "calling": [
                "FUN_00000610"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000566": {
                    "1": "decode_param",
                    "2": "decode_integer",
                    "3": "convert_byte_to_integer"
                },
                "param_1": {
                    "12": "input",
                    "10": "input_value",
                    "1": "param",
                    "3": "value"
                },
                "bVar1": {
                    "1": "byte4",
                    "13": "byte1",
                    "2": "first_byte",
                    "4": "byte3"
                },
                "bVar2": {
                    "1": "first_byte",
                    "4": "byte0",
                    "2": "second_byte",
                    "13": "byte2"
                },
                "bVar3": {
                    "1": "input_byte1",
                    "2": "second_byte",
                    "4": "byte1",
                    "13": "byte3"
                },
                "bVar4": {
                    "1": "byte3",
                    "2": "byte_4",
                    "4": "byte2",
                    "13": "byte4"
                },
                "iVar5": {
                    "2": "extracted_value",
                    "4": "converted_value",
                    "1": "integer_result",
                    "3": "decoded_value",
                    "13": "result"
                }
            }
        },
        "FUN_0000058e": {
            "entrypoint": "0x0000058e",
            "current_name": "update_pointer_0000058e",
            "code": "\nvoid update_pointer_0000058e(int *source_pointer,undefined4 *new_pointer)\n\n{\n  if (*source_pointer == 0) {\n    *new_pointer = new_pointer;\n  }\n  else {\n    *new_pointer = *(undefined4 *)*source_pointer;\n    *(undefined4 **)*source_pointer = new_pointer;\n  }\n  *source_pointer = value_as_int;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000058e": "update_pointer_0000058e",
                "param_1": "source_pointer",
                "param_2": "new_pointer",
                "(int)param_2": "value_as_int"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000058e": {
                    "1": "copy_and_update_pointer",
                    "3": "update_pointers",
                    "15": "update_pointer",
                    "2": "update_param_and_value"
                },
                "param_1": {
                    "1": "pointer1",
                    "2": "source",
                    "3": "input_pointer",
                    "9": "source_pointer",
                    "4": "value_ptr"
                },
                "param_2": {
                    "1": "new_node",
                    "2": "target_ptr",
                    "3": "new_value_ptr",
                    "6": "new_pointer",
                    "4": "target_pointer",
                    "5": "destination_pointer"
                },
                "*param_1": {
                    "1": "source_param"
                },
                "*param_2": {
                    "2": "new_value",
                    "1": "updated_data"
                },
                "*(undefined4 **)*param_1": {
                    "1": "source_ptr_value_address"
                },
                "(int)param_2": {
                    "1": "destination_value"
                },
                "*(undefined4 *)*param_1": {
                    "1": "ptr_to_source_value"
                },
                "(undefined4 **) *param_1": {
                    "1": "pointer_to_value_at_pointer"
                },
                "*param_1 == 0": {
                    "1": "is_param_zero"
                },
                "*(undefined4 **)param_1": {
                    "1": "ptr_to_destination_param"
                }
            }
        },
        "FUN_000005ca": {
            "entrypoint": "0x000005ca",
            "current_name": "extract_value_from_pointer_000005ca",
            "code": "\nundefined4 * extract_value_from_pointer_000005ca(int *input_pointer)\n\n{\n  undefined4 *extracted_value;\n  \n  if (*input_pointer == 0) {\n    extracted_value = (undefined4 *)0x0;\n  }\n  else {\n    extracted_value = *(undefined4 **)*input_pointer;\n    if (extracted_value == (undefined4 *)*input_pointer) {\n      *input_pointer = 0;\n    }\n    else {\n      *(undefined4 *)*input_pointer = *extracted_value;\n    }\n  }\n  return extracted_value;\n}\n\n",
            "renaming": {
                "FUN_000005ca": "extract_value_from_pointer_000005ca",
                "param_1": "input_pointer",
                "puVar1": "extracted_value"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000005ca": {
                    "1": "reverse_and_clear_linked_list",
                    "5": "extract_value",
                    "10": "extract_value_from_pointer",
                    "2": "reverse_linked_list"
                },
                "param_1": {
                    "1": "memory_location",
                    "2": "value_ptr",
                    "4": "pointer",
                    "3": "input_ptr",
                    "6": "input_pointer"
                },
                "puVar1": {
                    "15": "extracted_value",
                    "3": "extracted_pointer",
                    "1": "result_pointer",
                    "2": "result"
                },
                "*param_1": {
                    "1": "input_array_value"
                },
                "*(undefined4 **)*param_1": {
                    "1": "dereferenced_value"
                },
                "*(undefined4 *)*param_1": {
                    "1": "dereferenced_value_pointer"
                }
            }
        },
        "FUN_00000610": {
            "entrypoint": "0x00000610",
            "current_name": "process_data_00000610",
            "code": "\nundefined4 process_data_00000610(void)\n\n{\n  int original_value;\n  int index;\n  undefined4 result;\n  \n  original_value = DAT_1fff03dc;\n  DAT_1fff0354 = 0;\n  index = get_least_significant_bit(DAT_1fff0424);\n  index = **(int **)(&DAT_1fff03e4 + index * 4);\n  if (original_value == index + -8) {\n    result = 0;\n  }\n  else {\n    if ((original_value != 0) && (*(char *)(original_value + 4) == '\\t')) {\n      *(undefined *)(original_value + 4) = 10;\n    }\n    *(undefined *)(index + -4) = 9;\n    DAT_1fff03e0 = *(undefined2 *)(index + -2);\n    result = 1;\n    DAT_1fff03dc = index + -8;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000610": "process_data_00000610",
                "iVar1": "original_value",
                "iVar2": "index",
                "uVar3": "result",
                "bitarithm_lsb": "get_least_significant_bit"
            },
            "calling": [],
            "called": [
                "FUN_00000566"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000610": {
                    "1": "verify_and_modify",
                    "2": "reverse_and_update_value"
                },
                "iVar1": {
                    "1": "current_value",
                    "2": "old_value",
                    "13": "original_value"
                },
                "iVar2": {
                    "1": "pointer_value",
                    "2": "decoded_value",
                    "10": "index"
                },
                "uVar3": {
                    "7": "return_value",
                    "1": "is_updated",
                    "2": "output_value",
                    "19": "result"
                },
                "param_1": {
                    "3": "input_data",
                    "1": "data",
                    "2": "input_parameter",
                    "11": "input_value"
                },
                "bitarithm_lsb": {
                    "1": "find_least_significant_bit",
                    "7": "get_least_significant_bit",
                    "2": "get_lsb"
                },
                "*(int **)(&DAT_1fff03e4 + iVar2 * 4)": {
                    "1": "get_next_value"
                },
                "*(char *)(iVar1 + 4)": {
                    "1": "character_value"
                },
                "*(undefined *)(iVar1 + 4)": {
                    "1": "set_char_at_offset"
                },
                "*(undefined *)(iVar2 + -4)": {
                    "1": "flag_value"
                },
                "*(undefined2 *)(iVar2 + -2)": {
                    "1": "get_data_value"
                },
                "DAT_1fff03e0": {
                    "1": "previous_value",
                    "3": "updated_value"
                },
                "DAT_1fff03dc": {
                    "1": "current_value",
                    "4": "original_ptr"
                },
                "DAT_1fff0354": {
                    "1": "decoded_value2",
                    "2": "counter"
                },
                "DAT_1fff0424": {
                    "1": "input_ptr",
                    "3": "bitmask"
                },
                "FUN_00000566": {
                    "1": "get_lowest_bit"
                },
                "DAT_1fff03e4": {
                    "1": "ptr_array"
                },
                "*(char *)(original_value + 4)": {
                    "1": "original_value_char"
                },
                "d": {
                    "1": "data_array"
                },
                "(iVar1 != 0) && (*(char *)(iVar1 + 4) == '\t')": {
                    "1": "is_value_valid"
                },
                "9": {
                    "1": "constant1"
                },
                "10": {
                    "1": "constant2"
                },
                "iVar2 + -4": {
                    "1": "target_address"
                },
                "iVar2 + -8": {
                    "1": "updated_memory_address"
                }
            }
        },
        "FUN_00000698": {
            "entrypoint": "0x00000698",
            "current_name": "update_data_00000698",
            "code": "\nvoid update_data_00000698(int_array list_index,uint_array new_value)\n\n{\n  if (new_value < 9) {\n    if ((8 < *(byte *)(list_index + 4)) &&\n       (left_pop(&DAT_1fff03e4 + (uint_array)*(byte *)(list_index + 5) * 4),\n       *(int_array *)(&DAT_1fff03e4 + (uint_array)*(byte *)(list_index + 5) * 4) == 0)) {\n      DAT_1fff0424 = DAT_1fff0424 & ~(1 << *(signed_byte *)(list_index + 5));\n    }\n  }\n  else if (*(byte *)(list_index + 4) < 9) {\n    right_push(&DAT_1fff03e4 + (uint_array)*(byte *)(list_index + 5) * 4,list_index + 8);\n    DAT_1fff0424 = DAT_1fff0424 | 1 << *(signed_byte *)(list_index + 5);\n  }\n  *(char_type *)(list_index + 4) = new_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000698": "update_data_00000698",
                "param_1": "list_index",
                "param_2": "new_value",
                "sbyte": "signed_byte",
                "clist_lpop": "left_pop",
                "clist_rpush": "right_push",
                "char": "char_type",
                "int": "int_array",
                "(char)param_2": "new_value"
            },
            "calling": [
                "FUN_000010d4",
                "FUN_00002434",
                "FUN_000024bc",
                "FUN_00000794"
            ],
            "called": [
                "FUN_0000058e",
                "FUN_000005ca"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000698": {
                    "1": "update_element",
                    "8": "update_list",
                    "2": "update_param",
                    "3": "update_parameter",
                    "11": "update_data"
                },
                "param_1": {
                    "5": "data_pointer",
                    "1": "selection",
                    "6": "list_index",
                    "3": "data_ptr"
                },
                "param_2": {
                    "23": "new_value",
                    "1": "new_param",
                    "3": "value"
                },
                "byte": {
                    "4": "byte_value",
                    "6": "byte",
                    "1": "byte_array",
                    "3": "byte_data",
                    "2": "byte_val"
                },
                "DAT_1fff03e4": {
                    "2": "data_array",
                    "4": "data_list",
                    "1": "list_data"
                },
                "byteVal": {
                    "1": "byte_index"
                },
                "sbyte": {
                    "7": "signed_byte",
                    "1": "s_byte",
                    "3": "signed_byte_value"
                },
                "DAT_1fff0424": {
                    "2": "flag",
                    "1": "flag_value"
                },
                "clist_lpop": {
                    "1": "remove_from_left_list",
                    "2": "list_left_pop"
                },
                "byteData": {
                    "1": "data_element"
                },
                "param_1 + 5": {
                    "1": "index"
                },
                "&(dataArray + (uint)(byteValue * 4))": {
                    "1": "address"
                },
                "FUN_0000058e": {
                    "1": "update_by_index"
                },
                "param_1 + 8": {
                    "1": "new_value_address"
                },
                "*(byte *)(param_1 + 4)": {
                    "1": "data_value",
                    "3": "current_value"
                },
                "&DAT_1fff03e4 + (uint)*(byte *)(param_1 + 5) * 4": {
                    "1": "target_list"
                },
                "*(int *)(&DAT_1fff03e4 + (uint)*(byte *)(param_1 + 5) * 4)": {
                    "1": "element_value"
                },
                "*(sbyte *)(param_1 + 5)": {
                    "1": "index"
                },
                "clist_rpush": {
                    "1": "add_to_right",
                    "2": "right_push"
                },
                "char": {
                    "1": "char_type"
                },
                "clist_lpop(&DAT_1fff03e4 + (uint)*(byte *)(param_1 + 5) * 4)": {
                    "1": "remove_from_list"
                },
                "clist_rpush(&DAT_1fff03e4 + (uint)*(byte *)(param_1 + 5) * 4,param_1 + 8)": {
                    "1": "insert_to_list"
                },
                "UINT": {
                    "1": "unsigned_integer"
                },
                "(*(byte *)(param_1 + 4))": {
                    "1": "current_value"
                },
                "(*(int *)(&DAT_1fff03e4 + (uint)*(byte *)(param_1 + 5) * 4) == 0)": {
                    "1": "is_value_zero"
                },
                "(*(byte *)(param_1 + 4) < 9)": {
                    "1": "is_current_value_less_than_9"
                },
                "byte_2": {
                    "1": "index_to_update"
                },
                "byte_1": {
                    "1": "previous_value"
                },
                "byte_3": {
                    "1": "list_pointer_index"
                },
                "PTR_FUN_0000058e": {
                    "1": "lpop"
                },
                "PTR_FUN_000005ca": {
                    "1": "rpush"
                },
                "FUN_000005ca": {
                    "1": "get_list"
                },
                "*(byte *)(param_1 + 5)": {
                    "1": "index_value",
                    "2": "index"
                },
                "int": {
                    "1": "integer"
                },
                "(param_1 + 4)": {
                    "1": "data_offset"
                },
                "(param_1 + 5)": {
                    "1": "index"
                },
                "(1 << *(sbyte *)(param_1 + 5))": {
                    "1": "bit_mask"
                },
                "(char)param_2": {
                    "1": "new_value"
                },
                "byteValue": {
                    "1": "byte_data"
                }
            }
        },
        "FUN_00000738": {
            "entrypoint": "0x00000738",
            "current_name": "check_and_yield_00000738",
            "code": "\nvoid check_and_yield_00000738(ushort input_value)\n\n{\n  int is_irq_in;\n  \n  if ((*(byte *)(DAT_1fff03dc + 4) < 9) || (input_value < *(byte *)(DAT_1fff03dc + 5))) {\n    is_irq_in = is_irq_in();\n    if (is_irq_in == 0) {\n      yield_to_higher();\n    }\n    else {\n      DAT_1fff0354 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000738": "check_and_yield_00000738",
                "param_1": "input_value",
                "iVar1": "is_irq_in",
                "irq_is_in": "is_irq_in",
                "thread_yield_higher": "yield_to_higher"
            },
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "called": [
                "FUN_00000d2a",
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000738": {
                    "1": "check_and_handle_param_limits",
                    "8": "check_and_yield",
                    "2": "check_param_validity"
                },
                "param_1": {
                    "4": "param",
                    "1": "priority",
                    "15": "input_value",
                    "3": "input_param"
                },
                "iVar1": {
                    "2": "is_interrupt",
                    "1": "is_irq_in_progress",
                    "5": "is_in_irq",
                    "12": "is_irq_in"
                },
                "FUN_00000d2a": {
                    "1": "get_byte_function",
                    "3": "irq_is_in",
                    "2": "get_irq"
                },
                "FUN_0000093c": {
                    "3": "yield_higher",
                    "1": "perform_operation",
                    "2": "thread_yield_higher"
                },
                "DAT_1fff03dc": {
                    "1": "data_1",
                    "2": "data_memory"
                },
                "DAT_1fff0354": {
                    "3": "flag",
                    "1": "flag_value"
                },
                "irq_is_in": {
                    "2": "is_irq_in",
                    "1": "check_irq"
                },
                "thread_yield_higher": {
                    "1": "yield_to_higher_thread"
                }
            }
        },
        "FUN_00000794": {
            "entrypoint": "0x00000794",
            "current_name": "initialize_stack_00000794",
            "code": "\nint * initialize_stack_00000794(void)\n\n{\n  int return_value;\n  int counter;\n  undefined4 *pointer;\n  uint aligned_pointer;\n  int loop_counter1;\n  int loop_counter2;\n  int *stack_pointer;\n  \n  disable_interrupts();\n  *(undefined4 *)(&DAT_1fff0358 + DAT_1fff03e0 * 4) = 0;\n  DAT_1fff0350 = DAT_1fff0350 + -1;\n  set_thread_status(DAT_1fff03dc,0);\n  pointer = &DAT_1fff03dc;\n  counter = 0;\n  DAT_1fff03dc = 0;\n  switch_context();\n  aligned_pointer = (int)pointer + counter & 0xfffffffc;\n  stack_pointer = (int *)(aligned_pointer - 4);\n  *stack_pointer = 0x77777777;\n  if (((uint)stack_pointer & 7) != 0) {\n    stack_pointer = (int *)(aligned_pointer - 8);\n    *stack_pointer = 0x88888888;\n  }\n  stack_pointer[-1] = 0x1000000;\n  stack_pointer[-2] = counter << 0xd;\n  stack_pointer[-3] = 0x795;\n  stack_pointer = stack_pointer + -4;\n  *stack_pointer = 0;\n  for (loop_counter2 = 3; 0 < loop_counter2; loop_counter2 = loop_counter2 + -1) {\n    stack_pointer = stack_pointer + -1;\n    *stack_pointer = loop_counter2;\n  }\n  stack_pointer = stack_pointer + -1;\n  *stack_pointer = return_value;\n  for (loop_counter1 = 0xb; 3 < loop_counter1; loop_counter1 = loop_counter1 + -1) {\n    stack_pointer = stack_pointer + -1;\n    *stack_pointer = loop_counter1;\n  }\n  stack_pointer[-1] = -3;\n  return stack_pointer + -1;\n}\n\n",
            "renaming": {
                "FUN_00000794": "initialize_stack_00000794",
                "extraout_r1": "return_value",
                "iVar1": "counter",
                "puVar2": "pointer",
                "uVar3": "aligned_pointer",
                "iStack_1c": "loop_counter1",
                "iStack_18": "loop_counter2",
                "piStack_14": "stack_pointer",
                "sched_set_status": "set_thread_status",
                "cpu_switch_context_exit": "switch_context",
                "irq_disable": "disable_interrupts"
            },
            "calling": [],
            "called": [
                "FUN_00000698",
                "FUN_00000cd0",
                "FUN_00000930"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000794": {
                    "1": "initiate_context_switch",
                    "3": "initialize_stack_and_return_pointer",
                    "5": "initialize_context",
                    "2": "initialize_memory",
                    "14": "initialize_stack"
                },
                "extraout_r1": {
                    "15": "return_value",
                    "1": "extra_output",
                    "5": "result"
                },
                "iVar1": {
                    "3": "loop_counter",
                    "1": "result",
                    "10": "counter",
                    "8": "index"
                },
                "puVar2": {
                    "1": "context",
                    "2": "ptr",
                    "5": "context_ptr",
                    "8": "pointer",
                    "3": "context_pointer"
                },
                "uVar3": {
                    "1": "adjusted_status_pointer",
                    "4": "aligned_ptr",
                    "6": "aligned_pointer",
                    "3": "aligned_address"
                },
                "iStack_1c": {
                    "1": "loop_count2",
                    "2": "loop_index1",
                    "6": "loop_counter1",
                    "3": "counter1",
                    "4": "outer_loop_counter"
                },
                "iStack_18": {
                    "1": "counter_loop2",
                    "2": "loop_counter_inner",
                    "3": "counter2",
                    "7": "loop_counter2",
                    "4": "inner_loop_counter"
                },
                "piStack_14": {
                    "1": "ptr_array",
                    "7": "stack_ptr",
                    "15": "stack_pointer"
                },
                "param_1": {
                    "1": "ir_qnumber",
                    "2": "param1"
                },
                "param_2": {
                    "2": "status",
                    "1": "unused_param2"
                },
                "FUN_00000698": {
                    "1": "disable_irq",
                    "2": "disable_interrupts"
                },
                "FUN_00000cd0": {
                    "2": "get_scheduler_status",
                    "1": "get_something"
                },
                "FUN_00000930": {
                    "1": "switch_context"
                },
                "DAT_1fff0358": {
                    "1": "address1"
                },
                "DAT_1fff03e0": {
                    "1": "address2"
                },
                "DAT_1fff0350": {
                    "1": "counter"
                },
                "sched_set_status": {
                    "1": "set_scheduler_status"
                },
                "DAT_1fff03dc": {
                    "1": "thread_status"
                },
                "cpu_switch_context_exit": {
                    "1": "exit_context_switch"
                },
                "irq_disable": {
                    "1": "disable_interrupts"
                }
            }
        },
        "FUN_000007dc": {
            "entrypoint": "0x000007dc",
            "current_name": "initialize_memory_000007dc",
            "code": "\nint * initialize_memory_000007dc(undefined4 arg1,int param2,int param3,int param4)\n\n{\n  uint aligned_size;\n  int loop_counter1;\n  int loop_counter2;\n  int *ptr;\n  \n  aligned_size = param4 + param3 & 0xfffffffc;\n  ptr = (int *)(aligned_size - 4);\n  *ptr = 0x77777777;\n  if (((uint)ptr & 7) != 0) {\n    ptr = (int *)(aligned_size - 8);\n    *ptr = 0x88888888;\n  }\n  magic_number = 0x1000000;\n  param_1_copy = arg1;\n  constant = 0x795;\n  ptr = ptr + -4;\n  *ptr = 0;\n  for (loop_counter2 = 3; 0 < loop_counter2; loop_counter2 = loop_counter2 + -1) {\n    ptr = ptr + -1;\n    *ptr = loop_counter2;\n  }\n  ptr = ptr + -1;\n  *ptr = param2;\n  for (loop_counter1 = 0xb; 3 < loop_counter1; loop_counter1 = loop_counter1 + -1) {\n    ptr = ptr + -1;\n    *ptr = loop_counter1;\n  }\n  magic_number = -3;\n  return ptr + -1;\n}\n\n",
            "renaming": {
                "FUN_000007dc": "initialize_memory_000007dc",
                "param_1": "arg1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "local_c": "ptr",
                "local_10": "loop_counter2",
                "local_14": "loop_counter1",
                "uVar1": "aligned_size",
                "local_c[-1]": "magic_number",
                "local_c[-2]": "param_1_copy",
                "local_c[-3]": "constant"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000007dc": {
                    "2": "allocate_memory",
                    "1": "initialize_data_and_return_pointer",
                    "3": "initialize_buffer",
                    "17": "initialize_memory"
                },
                "param_1": {
                    "1": "param",
                    "2": "initial_value",
                    "5": "param1",
                    "6": "value"
                },
                "param_2": {
                    "6": "arg2",
                    "1": "offset",
                    "3": "size",
                    "2": "initial_value",
                    "5": "value"
                },
                "param_3": {
                    "1": "alignment",
                    "4": "size",
                    "6": "offset",
                    "5": "arg3"
                },
                "param_4": {
                    "6": "param4",
                    "1": "offset",
                    "4": "size",
                    "2": "base_address",
                    "5": "alignment"
                },
                "local_c": {
                    "2": "memory_pointer",
                    "1": "current_pointer",
                    "3": "buffer",
                    "9": "ptr",
                    "4": "memory_ptr"
                },
                "local_10": {
                    "1": "inner_loop_counter",
                    "2": "loop_variable2",
                    "4": "counter2",
                    "3": "count",
                    "5": "loop_counter2"
                },
                "local_14": {
                    "1": "count_down1",
                    "2": "loop_variable1",
                    "5": "index",
                    "4": "counter1"
                },
                "uVar1": {
                    "1": "aligned_address",
                    "2": "adjusted_size",
                    "13": "aligned_size"
                },
                "local_8": {
                    "1": "temp"
                },
                "local_c[-1]": {
                    "1": "magic_number"
                },
                "local_c[-2]": {
                    "1": "param_1_copy"
                },
                "local_c[-3]": {
                    "1": "constant"
                },
                "local_c[0]": {
                    "1": "initialized_value"
                },
                "local_c[-4]": {
                    "1": "counter"
                },
                "*local_c": {
                    "1": "value_ptr"
                }
            }
        },
        "FUN_000008b8": {
            "entrypoint": "0x000008b8",
            "current_name": "find_last_offset_000008b8",
            "code": "\nint find_last_offset_000008b8(void)\n\n{\n  array_element *rel_entry;\n  \n  for (rel_entry = (array_element *)&DAT_1fff0000;\n      (rel_entry->r_offset == 0xe7fee7fe && (rel_entry < relocation_array));\n      rel_entry = (array_element *)&rel_entry->r_info) {\n  }\n  return ((int)relocation_array - (int)rel_entry >> 2) << 2;\n}\n\n",
            "renaming": {
                "FUN_000008b8": "find_last_offset_000008b8",
                "local_c": "rel_entry",
                "Elf32_Rel": "array_element",
                "Elf32_Rel_ARRAY_1fff0200": "relocation_array"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000008b8": {
                    "1": "find_last_valid_entry_address",
                    "3": "calculate_remaining_offset",
                    "2": "count_relocations",
                    "5": "find_last_offset"
                },
                "local_c": {
                    "1": "current_reloc",
                    "4": "current_relocation",
                    "2": "rel_pointer",
                    "6": "rel_entry"
                },
                "Elf32_Rel": {
                    "1": "relocation_entry"
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "1": "relocation_array"
                }
            }
        },
        "FUN_00000900": {
            "entrypoint": "0x00000900",
            "current_name": "get_main_stack_pointer_00000900",
            "code": "\nundefined4 get_main_stack_pointer_00000900(void)\n\n{\n  undefined4 main_stack_pointer;\n  \n  main_stack_pointer = getMainStackPointer();\n  return main_stack_pointer;\n}\n\n",
            "renaming": {
                "FUN_00000900": "get_main_stack_pointer_00000900",
                "uVar1": "main_stack_pointer"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000900": {
                    "1": "get_main_stack_pointer_improved",
                    "2": "retrieve_main_stack_pointer",
                    "20": "get_main_stack_pointer",
                    "6": "get_stack_pointer"
                },
                "uVar1": {
                    "1": "result",
                    "22": "main_stack_pointer",
                    "8": "stack_pointer"
                }
            }
        },
        "FUN_0000091c": {
            "entrypoint": "0x0000091c",
            "current_name": "get_memory_address_0000091c",
            "code": "\nuint32_t get_memory_address_0000091c(void)\n\n{\n  memory_address 0x1fff0000;\n}\n\n",
            "renaming": {
                "FUN_0000091c": "get_memory_address_0000091c",
                "undefined4": "uint32_t",
                "return": "memory_address"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000091c": {
                    "5": "get_base_address",
                    "1": "get_memory_offset",
                    "3": "get_constant_value",
                    "11": "get_memory_address",
                    "2": "get_memory_size"
                },
                "undefined4": {
                    "2": "uint32",
                    "1": "int",
                    "16": "uint32_t"
                },
                "return": {
                    "1": "memory_address"
                },
                "0x1fff0000": {
                    "1": "reserved_memory_address"
                },
                "return value": {
                    "1": "base_address"
                },
                "": {
                    "1": ""
                }
            }
        },
        "FUN_00000930": {
            "entrypoint": "0x00000930",
            "current_name": "enable_interrupt_and_trigger_software_interrupt_00000930",
            "code": "\nvoid enable_interrupt_and_trigger_software_interrupt_00000930(void)\n\n{\n  irq_enable();\n  software_interrupt(1);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000930": "enable_interrupt_and_trigger_software_interrupt_00000930"
            },
            "calling": [
                "FUN_00000f8c",
                "FUN_00000794"
            ],
            "called": [
                "FUN_00000cf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000930": {
                    "1": "execute_program",
                    "2": "enable_interrupt_and_invoke_software_interrupt",
                    "3": "enable_interrupts_and_wait",
                    "4": "enable_interrupts_and_trigger_software_interrupt",
                    "6": "enable_interrupt_and_trigger_software_interrupt"
                },
                "FUN_00000cf0": {
                    "1": "initialize_device",
                    "4": "get_status",
                    "2": "initialize",
                    "5": "get_undefined_value"
                }
            }
        },
        "FUN_0000093c": {
            "entrypoint": "0x0000093c",
            "current_name": "set_memory_flag_0000093c",
            "code": "\n\n\nvoid set_memory_flag_0000093c(void)\n\n{\n  _DAT_e000ed04 = _DAT_e000ed04 | 0x10000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000093c": "set_memory_flag_0000093c"
            },
            "calling": [
                "FUN_00002798",
                "FUN_00001cf0",
                "FUN_00002434",
                "FUN_00000738",
                "FUN_00001348"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000093c": {
                    "1": "set_high_bit_in_dat_e000ed04",
                    "4": "set_flag",
                    "2": "set_memory_permission"
                },
                "_DAT_e000ed04": {
                    "1": "flag_ed04",
                    "2": "memory_protection_flag",
                    "5": "memory_flag",
                    "6": "register_value",
                    "4": "status_register"
                },
                "": {
                    "2": ""
                },
                "None": {
                    "1": "_dat_e000ed04"
                }
            }
        },
        "FUN_00000990": {
            "entrypoint": "0x00000990",
            "current_name": "FUNC_00000990",
            "code": "\nvoid FUNC_00000990(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000990": "FUNC_00000990"
            },
            "calling": [
                "FUN_0000099c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0000099c": {
            "entrypoint": "0x0000099c",
            "current_name": "initialize_system_0000099c",
            "code": "\nvoid initialize_system_0000099c(void)\n\n{\n  undefined4 temp_var;\n  undefined4 *stack_pointer;\n  dword *data_pointer;\n  relocation_entry *rel_pointer;\n  \n  stack_pointer = &temp_var;\n  data_pointer = (dword *)&DAT_00007c60;\n  pre_startup();\n  rel_pointer = (relocation_entry *)&DAT_1fff0000;\n  while (rel_pointer < &temp_var) {\n    rel_pointer->r_offset = 0xe7fee7fe;\n    rel_pointer = (relocation_entry *)((int)rel_pointer + 4);\n  }\n  rel_pointer = relocation_entry_ARRAY_1fff0200;\n  while (rel_pointer < (relocation_entry *)&DAT_1fff0350) {\n    rel_pointer->r_offset = *data_pointer;\n    data_pointer = data_pointer + 1;\n    rel_pointer = (relocation_entry *)&rel_pointer->r_info;\n  }\n  rel_pointer = (relocation_entry *)&DAT_1fff0350;\n  while (rel_pointer < (undefined4 *)0x1fff0df0) {\n    rel_pointer->r_offset = 0;\n    rel_pointer = (relocation_entry *)((int)rel_pointer + 4);\n  }\n  post_startup();\n  board_init();\n  __libc_init_array();\n  kernel_init();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000099c": "initialize_system_0000099c",
                "uStack_18": "temp_var",
                "local_14": "stack_pointer",
                "local_10": "data_pointer",
                "local_c": "rel_pointer",
                "Elf32_Rel": "relocation_entry"
            },
            "calling": [],
            "called": [
                "FUN_00000f8c",
                "FUN_00000e64",
                "FUN_00000990",
                "FUN_00000db0",
                "FUN_0000459c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000099c": {
                    "3": "initialize_board",
                    "19": "initialize_system",
                    "1": "initialize_and_start"
                },
                "uStack_18": {
                    "1": "stack_variable",
                    "3": "temp_var"
                },
                "local_14": {
                    "1": "stack_ptr",
                    "22": "stack_pointer"
                },
                "local_10": {
                    "1": "memory_pointer",
                    "3": "data_ptr",
                    "20": "data_pointer",
                    "2": "dword_array"
                },
                "local_c": {
                    "1": "rel_array",
                    "3": "rel_ptr",
                    "12": "rel_pointer",
                    "4": "rel_table_pointer"
                },
                "FUN_00000f8c": {
                    "1": "initialize_pre_startup",
                    "7": "pre_startup"
                },
                "FUN_00000e64": {
                    "1": "post_initialize",
                    "7": "post_startup"
                },
                "FUNC_00000990": {
                    "1": "board_initialization",
                    "7": "board_init"
                },
                "FUN_00000db0": {
                    "3": "libc_init_array",
                    "1": "libc_initialization",
                    "2": "kernel_init"
                },
                "FUN_0000459c": {
                    "1": "__libc_init_array",
                    "5": "kernel_init",
                    "2": "kernel_initialization"
                },
                "pre_startup": {
                    "1": "pre_startup"
                },
                "Elf32_Rel": {
                    "1": "relocation_entry"
                },
                "void FUN_00000f8c(void)": {
                    "1": "perform_pre_startup_tasks"
                },
                "void FUN_00000e64(void)": {
                    "1": "perform_post_startup_tasks"
                },
                "void FUNC_00000990(void)": {
                    "1": "board_initialization"
                },
                "void FUN_00000db0(void)": {
                    "1": "initialize_libc"
                },
                "void FUN_0000459c(void)": {
                    "1": "initialize_kernel"
                }
            }
        },
        "FUN_00000a30": {
            "entrypoint": "0x00000a30",
            "current_name": "handle_nmi_00000a30",
            "code": "\nundefined * handle_nmi_00000a30(void)\n\n{\n  int exception_context;\n  \n  core_panic(4,\"NMI HANDLER\");\n  return &stack_pointer + -*(int *)(exception_context + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_00000a30": "handle_nmi_00000a30",
                "in_r3": "exception_context",
                "stack0xe000ffe0": "stack_pointer"
            },
            "calling": [],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000a30": {
                    "2": "handle_nmi_interrupt",
                    "1": "nmi_handler",
                    "21": "handle_nmi",
                    "7": "handle_nmi_exception"
                },
                "in_r3": {
                    "1": "interrupt_handler",
                    "3": "param"
                },
                "FUN_00000f04": {
                    "3": "process_exception",
                    "1": "print_error",
                    "6": "process_data",
                    "4": "process_character",
                    "2": "process_event"
                },
                "param_1": {
                    "1": "event_data",
                    "11": "character"
                },
                "param_2": {
                    "1": "param",
                    "6": "value"
                },
                "stack0xe000ffe0": {
                    "1": "stack_base",
                    "2": "stack_pointer"
                }
            }
        },
        "FUN_00000cc0": {
            "entrypoint": "0x00000cc0",
            "current_name": "handle_dummy_interrupt_00000cc0",
            "code": "\nundefined4 handle_dummy_interrupt_00000cc0(void)\n\n{\n  bool is_privileged_mode;\n  undefined4 interrupts_enabled;\n  \n  core_panic(10,\"DUMMY HANDLER\");\n  interrupts_enabled = 0;\n  is_privileged_mode = (bool)check_privileged_mode();\n  if (is_privileged_mode) {\n    interrupts_enabled = check_ir_qinterrupts_enabled();\n  }\n  disable_ir_qinterrupts();\n  return interrupts_enabled;\n}\n\n",
            "renaming": {
                "FUN_00000cc0": "handle_dummy_interrupt_00000cc0",
                "bVar1": "is_privileged_mode",
                "uVar2": "interrupts_enabled",
                "isCurrentModePrivileged": "check_privileged_mode",
                "isIRQinterruptsEnabled": "check_ir_qinterrupts_enabled",
                "disableIRQinterrupts": "disable_ir_qinterrupts"
            },
            "calling": [
                "FUN_00000dc0"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000cc0": {
                    "1": "handle_irq",
                    "2": "handle_irq_interrupts",
                    "12": "handle_dummy_interrupt"
                },
                "bVar1": {
                    "1": "is_mode_privileged",
                    "3": "is_current_mode_privileged",
                    "19": "is_privileged_mode",
                    "6": "is_privileged"
                },
                "uVar2": {
                    "2": "irq_interrupts_enabled",
                    "1": "ir_qinterrupt_status",
                    "12": "interrupts_enabled",
                    "3": "interrupt_status"
                },
                "FUN_00000f04": {
                    "1": "process_error"
                },
                "param_1": {
                    "1": "char_input",
                    "4": "character",
                    "3": "error_code",
                    "2": "error_type"
                },
                "param_2": {
                    "2": "flags",
                    "1": "param_2",
                    "3": "error_code"
                },
                "isCurrentModePrivileged": {
                    "1": "check_current_mode_privileged",
                    "2": "check_privileged_mode"
                },
                "isIRQinterruptsEnabled": {
                    "4": "check_ir_qinterrupts_enabled"
                },
                "disableIRQinterrupts": {
                    "2": "disable_ir_qinterrupts"
                },
                "DAT_00001234": {
                    "1": "dummy_interrupt_handler_name"
                }
            }
        },
        "FUN_00000cd0": {
            "entrypoint": "0x00000cd0",
            "current_name": "get_interrupt_status_00000cd0",
            "code": "\nundefined4 get_interrupt_status_00000cd0(void)\n\n{\n  bool is_privileged_mode;\n  undefined4 interrupts_enabled;\n  \n  interrupts_enabled = 0;\n  is_privileged_mode = (bool)check_privileged_mode();\n  if (is_privileged_mode) {\n    interrupts_enabled = check_irq_interrupts_enabled();\n  }\n  disableIRQinterrupts();\n  return interrupts_enabled;\n}\n\n",
            "renaming": {
                "FUN_00000cd0": "get_interrupt_status_00000cd0",
                "uVar2": "interrupts_enabled",
                "bVar1": "is_privileged_mode",
                "isCurrentModePrivileged": "check_privileged_mode",
                "isIRQinterruptsEnabled": "check_irq_interrupts_enabled"
            },
            "calling": [
                "FUN_00000f8c",
                "FUN_00001c84",
                "FUN_00000f04",
                "FUN_00000e58",
                "FUN_000010d4",
                "FUN_00000428",
                "FUN_00002434",
                "FUN_000024bc",
                "FUN_00000794"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000cd0": {
                    "1": "check_interrupt_status",
                    "8": "get_interrupt_status",
                    "2": "check_interrupts",
                    "5": "get_irq_interrupt_status"
                },
                "uVar2": {
                    "2": "interrupt_state",
                    "13": "interrupts_enabled",
                    "1": "enabled_irq_interrupts",
                    "8": "interrupt_status"
                },
                "bVar1": {
                    "1": "is_mode_privileged",
                    "4": "is_current_mode_privileged",
                    "20": "is_privileged_mode",
                    "5": "is_privileged"
                },
                "isCurrentModePrivileged": {
                    "1": "check_if_current_mode_is_privileged"
                },
                "isIRQinterruptsEnabled": {
                    "1": "check_if_ir_qinterrupts_enabled"
                }
            }
        },
        "FUN_00000cf0": {
            "entrypoint": "0x00000cf0",
            "current_name": "check_interrupt_status_00000cf0",
            "code": "\nundefined4 check_interrupt_status_00000cf0(void)\n\n{\n  bool is_privileged_mode;\n  undefined4 interrupts_enabled;\n  \n  enable_interrupts();\n  interrupts_enabled = 0;\n  is_privileged_mode = (bool)is_privileged_mode();\n  if (is_privileged_mode) {\n    interrupts_enabled = check_ir_qinterrupts_enabled();\n  }\n  return interrupts_enabled;\n}\n\n",
            "renaming": {
                "FUN_00000cf0": "check_interrupt_status_00000cf0",
                "bVar1": "is_privileged_mode",
                "uVar2": "interrupts_enabled",
                "isCurrentModePrivileged": "is_privileged_mode",
                "isIRQinterruptsEnabled": "check_ir_qinterrupts_enabled",
                "enableIRQinterrupts": "enable_interrupts"
            },
            "calling": [
                "FUN_00000930"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000cf0": {
                    "3": "check_irq_interrupts_enabled",
                    "1": "get_enable_ir_qinterrupts_status",
                    "4": "check_irq_interrupts",
                    "2": "check_ir_qinterrupts_status",
                    "6": "check_interrupt_status"
                },
                "bVar1": {
                    "5": "is_privileged",
                    "16": "is_privileged_mode"
                },
                "uVar2": {
                    "16": "interrupts_enabled",
                    "1": "interrupts_status",
                    "3": "interrupts_enabled_status"
                },
                "isCurrentModePrivileged": {
                    "1": "get_current_mode_privilege_status",
                    "2": "is_privileged_mode"
                },
                "isIRQinterruptsEnabled": {
                    "2": "check_ir_qinterrupts_enabled",
                    "1": "check_irq_interrupts_enabled"
                },
                "enableIRQinterrupts": {
                    "1": "enable_interrupts"
                }
            }
        },
        "FUN_00000d0c": {
            "entrypoint": "0x00000d0c",
            "current_name": "enable_ir_qinterrupts_if_privileged_00000d0c",
            "code": "\nvoid enable_ir_qinterrupts_if_privileged_00000d0c(uint interrupt_flags)\n\n{\n  bool is_privileged_mode;\n  \n  is_privileged_mode = (bool)check_current_mode_privilege;\n  if (is_privileged_mode) {\n    enable_interrupts((interrupt_flags & 1) == 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d0c": "enable_ir_qinterrupts_if_privileged_00000d0c",
                "param_1": "interrupt_flags",
                "bVar1": "is_privileged_mode",
                "isCurrentModePrivileged": "check_privilege",
                "enableIRQinterrupts": "enable_interrupts",
                "isCurrentModePrivileged()": "check_current_mode_privilege"
            },
            "calling": [
                "FUN_00001c84",
                "FUN_000010d4",
                "FUN_00000428",
                "FUN_00002434",
                "FUN_000024bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000d0c": {
                    "2": "enable_irq_interrupts_if_privileged",
                    "9": "enable_ir_qinterrupts_if_privileged",
                    "4": "configure_interrupts",
                    "1": "enable_irq_if_privileged",
                    "6": "enable_interrupts_if_privileged"
                },
                "param_1": {
                    "2": "input_param",
                    "1": "input_bit",
                    "12": "interrupt_flags",
                    "3": "input_flag",
                    "4": "interrupt_flag"
                },
                "bVar1": {
                    "1": "is_current_mode_privileged",
                    "11": "is_privileged_mode",
                    "9": "is_privileged"
                },
                "isCurrentModePrivileged": {
                    "1": "check_if_current_mode_is_privileged",
                    "2": "check_privilege"
                },
                "enableIRQinterrupts": {
                    "1": "set_irq_interrupts_enabled",
                    "2": "enable_irq_interrupts",
                    "3": "enable_interrupts"
                },
                "isCurrentModePrivileged()": {
                    "1": "check_current_mode_privilege"
                },
                "enableIRQinterrupts()": {
                    "1": "enable_interrupts"
                }
            }
        },
        "FUN_00000d2a": {
            "entrypoint": "0x00000d2a",
            "current_name": "get_exception_number_00000d2a",
            "code": "\nuint get_exception_number_00000d2a(void)\n\n{\n  bool is_privileged_mode;\n  uint exception_number;\n  \n  exception_number = 0;\n  is_privileged_mode = (bool)is_privileged_mode();\n  if (is_privileged_mode) {\n    exception_number = get_current_exception_number();\n    exception_number = exception_number & 0x1f;\n  }\n  return exception_number;\n}\n\n",
            "renaming": {
                "FUN_00000d2a": "get_exception_number_00000d2a",
                "bVar1": "is_privileged_mode",
                "uVar2": "exception_number",
                "isCurrentModePrivileged": "is_privileged_mode",
                "getCurrentExceptionNumber": "get_current_exception_number"
            },
            "calling": [
                "FUN_00000738"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000d2a": {
                    "1": "get_privileged_exception_number",
                    "29": "get_exception_number"
                },
                "bVar1": {
                    "21": "is_privileged_mode",
                    "7": "is_privileged"
                },
                "uVar2": {
                    "30": "exception_number"
                },
                "isCurrentModePrivileged": {
                    "5": "is_privileged_mode",
                    "1": "is_current_mode_privileged"
                },
                "getCurrentExceptionNumber": {
                    "1": "fetch_exception_number",
                    "2": "get_current_exception_number"
                },
                "useCurrentModePrivileged": {
                    "1": "is_current_mode_privileged"
                }
            }
        },
        "FUN_00000d44": {
            "entrypoint": "0x00000d44",
            "current_name": "calculate_offset_00000d44",
            "code": "\nint calculate_offset_00000d44(uint input_value,int multiplier)\n\n{\n  return multiplier * 4 + (input_value bitwise_and 0xf0000000 | (input_value bitwise_and 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00000d44": "calculate_offset_00000d44",
                "param_1": "input_value",
                "param_2": "multiplier",
                "&": "bitwise_and"
            },
            "calling": [
                "FUN_00000d76"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000d44": {
                    "2": "calculate_value",
                    "16": "calculate_offset",
                    "1": "calculate_updated_value",
                    "8": "calculate_result"
                },
                "param_1": {
                    "1": "input_param",
                    "19": "input_value",
                    "2": "value1"
                },
                "param_2": {
                    "1": "offset",
                    "2": "value2",
                    "27": "multiplier"
                },
                "0xf0000000": {
                    "1": "mask_a"
                },
                "0xfffff": {
                    "1": "mask_2"
                },
                "0x2000000": {
                    "1": "constant_offset",
                    "3": "constant"
                },
                "param_2 * 4": {
                    "1": "multiplier_result"
                },
                "param_1 & mask_a": {
                    "1": "masked_result_a"
                },
                "param_1 & mask_b": {
                    "1": "masked_result_b"
                },
                "(masked_result_b << 5)": {
                    "1": "shifted_result_b"
                },
                "multiplier_result + masked_result_a + shifted_result_b + constant": {
                    "1": "updated_value"
                },
                "<original_function_name>": {
                    "1": "calculate_offset"
                },
                "FUND_00000d44": {
                    "1": "calculate_offset"
                },
                "param_3": {
                    "1": "const_value1"
                },
                "MASK_1": {
                    "1": "0xf0000000"
                },
                "MASK_2": {
                    "1": "0xfffff"
                },
                "shifted_value": {
                    "1": "shifted_input"
                },
                "offset": {
                    "1": "calculated_offset"
                },
                "param_4": {
                    "1": "shift_value"
                },
                "&": {
                    "1": "bitwise_and"
                },
                "<<": {
                    "1": "bitwise_left_shift"
                },
                "& 0xf0000000": {
                    "1": "high_bits"
                },
                "& 0xfffff": {
                    "1": "low_bits"
                },
                "<< 5": {
                    "1": "shifted_bits"
                }
            }
        },
        "FUN_00000d76": {
            "entrypoint": "0x00000d76",
            "current_name": "clear_memory_00000d76",
            "code": "\nvoid clear_memory_00000d76(undefined4 input_value,undefined multiplier)\n\n{\n  undefined4 *offset_ptr;\n  \n  offset_ptr = (undefined4 *)calculate_offset_00000d44(input_value,multiplier);\n  *offset_ptr = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d76": "clear_memory_00000d76",
                "param_1": "input_value",
                "param_2": "multiplier",
                "puVar1": "offset_ptr"
            },
            "calling": [
                "FUN_00000d9c"
            ],
            "called": [
                "FUN_00000d44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000d76": {
                    "8": "clear_memory",
                    "5": "clear_offset",
                    "2": "clear_offset_value",
                    "1": "reset_value",
                    "4": "initialize_memory"
                },
                "param_1": {
                    "11": "input",
                    "17": "input_value",
                    "1": "input_pointer"
                },
                "param_2": {
                    "31": "multiplier"
                },
                "puVar1": {
                    "1": "result_pointer",
                    "9": "offset_ptr",
                    "7": "offset_pointer",
                    "3": "memory_address"
                }
            }
        },
        "FUN_00000d9c": {
            "entrypoint": "0x00000d9c",
            "current_name": "clear_bit_0x40048040_00000d9c",
            "code": "\nvoid clear_bit_0x40048040_00000d9c(void)\n\n{\n  clear_bit32(0x40048040,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d9c": "clear_bit_0x40048040_00000d9c",
                "bit_clear32": "clear_bit32"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [
                "FUN_00000d76"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000d9c": {
                    "2": "disable_interrupt",
                    "7": "clear_bit_0x40048040",
                    "1": "clear_interrupt_bit",
                    "5": "clear_bit_in_register",
                    "3": "clear_interrupt_flag"
                },
                "param_1": {
                    "4": "address",
                    "1": "unknown_param",
                    "3": "param1",
                    "6": "undefined4_param"
                },
                "param_2": {
                    "3": "arg2",
                    "1": "param_2",
                    "2": "undefined",
                    "6": "undefined_param",
                    "4": "bit_position"
                },
                "FUN_00000d76": {
                    "2": "set_bit_in_register",
                    "1": "call_with_undefined_var",
                    "4": "clear_bit"
                },
                "bit_clear32": {
                    "2": "clear_bit32"
                }
            }
        },
        "FUN_00000db0": {
            "entrypoint": "0x00000db0",
            "current_name": "disable_watchdog_and_fix_cpu_errata_00000db0",
            "code": "\nvoid disable_watchdog_and_fix_cpu_errata_00000db0(void)\n\n{\n  perform_watchdog_disable();\n  perform_errata_fixes();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000db0": "disable_watchdog_and_fix_cpu_errata_00000db0",
                "wdog_disable": "perform_watchdog_disable",
                "cpu_errata_fixes": "perform_errata_fixes"
            },
            "calling": [
                "FUN_0000099c"
            ],
            "called": [
                "FUN_00000dcc",
                "FUN_00000d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000db0": {
                    "1": "disable_watchdog_cpu_errata_fixes",
                    "3": "initialize_system",
                    "9": "disable_watchdog_and_fix_errata",
                    "2": "disable_watchdog",
                    "13": "disable_watchdog_and_fix_cpu_errata"
                },
                "FUN_00000dcc": {
                    "3": "perform_watchdog_disable",
                    "1": "perform_additional_cleanup",
                    "2": "perform_errata_fixes"
                },
                "FUN_00000d9c": {
                    "1": "execute_code_after_fixes",
                    "3": "apply_cpu_errata_fixes",
                    "2": "perform_action_d9c",
                    "4": "fix_cpu_errata"
                },
                "wdog_disable": {
                    "1": "perform_watchdog_disable"
                },
                "cpu_errata_fixes": {
                    "1": "perform_errata_fixes"
                }
            }
        },
        "FUN_00000dc0": {
            "entrypoint": "0x00000dc0",
            "current_name": "initialize_default_handler_00000dc0",
            "code": "\nvoid initialize_default_handler_00000dc0(void)\n\n{\n  default_handler();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dc0": "initialize_default_handler_00000dc0",
                "dummy_handler_default": "default_handler"
            },
            "calling": [],
            "called": [
                "FUN_00000cc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000dc0": {
                    "2": "handle_dummy",
                    "3": "dummy_handler",
                    "1": "handle_dummy_default",
                    "6": "initialize_dummy_handler",
                    "8": "initialize_default_handler"
                },
                "FUN_00000cc0": {
                    "8": "get_default_value",
                    "1": "get_status",
                    "16": "get_default_handler",
                    "3": "retrieve_data"
                },
                "dummy_handler_default": {
                    "1": "handle_default_behavior"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                }
            }
        },
        "FUN_00000dcc": {
            "entrypoint": "0x00000dcc",
            "current_name": "initialize_data_00000dcc",
            "code": "\n\n\nvoid initialize_data_00000dcc(void)\n\n{\n  _DAT_4005200e = 0xd928;\n  _DAT_40052000 = 0xd2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dcc": "initialize_data_00000dcc"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000dcc": {
                    "7": "initialize_registers",
                    "1": "initialize_device_info",
                    "8": "initialize_memory",
                    "11": "initialize_data"
                },
                "_DAT_4005200e": {
                    "1": "buffer_address",
                    "3": "memory_value",
                    "5": "memory_address",
                    "2": "data_address"
                },
                "_DAT_40052000": {
                    "1": "setting_flag",
                    "2": "data_flag",
                    "3": "memory_address"
                },
                "<FUN_00000dcc>": {
                    "1": "<initialize_memory>"
                },
                "<_DAT_4005200e>": {
                    "1": "<memory_address>"
                },
                "<_DAT_40052000>": {
                    "1": "<byte_value>"
                },
                "": {
                    "1": ""
                }
            }
        },
        "FUN_00000df4": {
            "entrypoint": "0x00000df4",
            "current_name": "initialize_uart_00000df4",
            "code": "\nvoid initialize_uart_00000df4(void)\n\n{\n  initialize_uart_00000df4_port(0,0x1c200,0x12b5,0x1fff0204);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000df4": "initialize_uart_00000df4",
                "uart_init": "initialize_uart_port"
            },
            "calling": [
                "FUN_00000410"
            ],
            "called": [
                "FUN_000013b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000df4": {
                    "31": "initialize_uart"
                },
                "FUN_000013b8": {
                    "1": "process_input_data",
                    "12": "process_data"
                },
                "param_1": {
                    "3": "arg1",
                    "5": "data",
                    "1": "input_data",
                    "2": "uart_instance",
                    "6": "input_param"
                },
                "param_2": {
                    "2": "unused_param",
                    "3": "arg2",
                    "7": "baud_rate",
                    "1": "input_2",
                    "5": "param1"
                },
                "param_3": {
                    "2": "arg3",
                    "5": "param2",
                    "1": "data_param",
                    "6": "data_bits",
                    "3": "param_3"
                },
                "param_4": {
                    "2": "config_param_3",
                    "1": "setting_param",
                    "5": "param3",
                    "3": "config_3"
                },
                "undefined4": {
                    "1": "return_type"
                },
                "int": {
                    "1": "input_type"
                },
                "uart_init": {
                    "1": "initialize_uart_port"
                },
                "pointer_param": {
                    "1": "ptr_param"
                },
                "undefined4_param": {
                    "1": "value_param"
                },
                "arg1": {
                    "1": "param1"
                },
                "arg2": {
                    "1": "param2"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "DAT_": {
                    "1": "dat_"
                }
            }
        },
        "FUN_00000e14": {
            "entrypoint": "0x00000e14",
            "current_name": "read_from_isrpipe_00000e14",
            "code": "\nundefined4 read_from_isrpipe_00000e14(undefined4 buffer,undefined4 size)\n\n{\n  undefined4 result;\n  \n  result = isrpipe_read(0x1fff0204,buffer,size);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000e14": "read_from_isrpipe_00000e14",
                "param_1": "buffer",
                "param_2": "size",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00000490"
            ],
            "called": [
                "FUN_000012e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000e14": {
                    "2": "read_pipe_data",
                    "8": "read_from_isrpipe",
                    "6": "read_isrpipe",
                    "1": "read_pipe"
                },
                "param_1": {
                    "1": "buf",
                    "3": "data_buffer",
                    "20": "buffer"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "buffer_size",
                    "24": "size"
                },
                "uVar1": {
                    "2": "read_result",
                    "1": "read_status",
                    "9": "result"
                }
            }
        },
        "FUN_00000e38": {
            "entrypoint": "0x00000e38",
            "current_name": "write_to_uart_00000e38",
            "code": "\nundefined4 write_to_uart_00000e38(undefined4 data,undefined4 length)\n\n{\n  uart_write(0,data,length);\n  return length;\n}\n\n",
            "renaming": {
                "FUN_00000e38": "write_to_uart_00000e38",
                "param_1": "data",
                "param_2": "length"
            },
            "calling": [
                "FUN_00004dee"
            ],
            "called": [
                "FUN_000015d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000e38": {
                    "5": "write_data",
                    "12": "write_to_uart",
                    "1": "transmit_data",
                    "11": "write_data_to_uart"
                },
                "param_1": {
                    "17": "data",
                    "7": "data_buffer",
                    "2": "data_ptr",
                    "1": "output_buffer"
                },
                "param_2": {
                    "3": "data_size",
                    "1": "param_2",
                    "9": "data_length",
                    "15": "length"
                },
                "FUN_000015d0": {
                    "1": "write_uart_buffer",
                    "2": "process_data"
                },
                "param_3": {
                    "1": "param_3"
                }
            }
        },
        "FUN_00000e58": {
            "entrypoint": "0x00000e58",
            "current_name": "disable_interrupts_00000e58",
            "code": "\nvoid disable_interrupts_00000e58(void)\n\n{\n  disable_irq();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000e58": "disable_interrupts_00000e58",
                "irq_disable": "disable_irq"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00000cd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000e58": {
                    "1": "disable_interrupts_and_infinite_loop",
                    "2": "disable_irq_and_loop",
                    "19": "disable_interrupts"
                },
                "FUN_00000cd0": {
                    "5": "get_undefined4",
                    "3": "initialize_system",
                    "1": "get_data",
                    "2": "undefined4",
                    "4": "get_status"
                },
                "irq_disable": {
                    "1": "disable_irq"
                },
                "undefined4": {
                    "1": "status"
                }
            }
        },
        "FUN_00000e64": {
            "entrypoint": "0x00000e64",
            "current_name": "initialize_system_00000e64",
            "code": "\n\n\nvoid initialize_system_00000e64(void)\n\n{\n  _DAT_40048038 = _DAT_40048038 | 0x200;\n  _DAT_40049048 = _DAT_40049048 & 0xfefff8ff;\n  initialize_cpu();\n  initialize_gpio(0x2056,0x80);\n  initialize_gpio(0x511a,0x80);\n  initialize_gpio(0x2055,0x80);\n  set_gpio(0x2056);\n  set_gpio(0x511a);\n  set_gpio(0x2055);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000e64": "initialize_system_00000e64",
                "cpu_init": "initialize_cpu",
                "gpio_init": "initialize_gpio",
                "gpio_set": "set_gpio"
            },
            "calling": [
                "FUN_0000099c"
            ],
            "called": [
                "FUN_00001eea",
                "FUN_00001ff6",
                "FUN_00001274"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000e64": {
                    "6": "initialize_hardware",
                    "12": "initialize_system",
                    "3": "initialize_device",
                    "7": "initialize_peripherals",
                    "2": "initialize_peripheral_devices",
                    "1": "initialize_gpios"
                },
                "FUN_00001eea": {
                    "8": "configure_gpio",
                    "1": "initialize_gpio",
                    "7": "set_gpio_state",
                    "2": "set_flag"
                },
                "FUN_00001ff6": {
                    "2": "set_gpio_high",
                    "1": "setup_gpio",
                    "3": "set_gpio",
                    "4": "initialize_cpu",
                    "6": "initialize_gpio"
                },
                "FUN_00001274": {
                    "16": "cpu_init",
                    "1": "gpio_clear",
                    "3": "initialize_gpio",
                    "4": "initialize_cpu"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "param_1",
                    "9": "param1"
                },
                "param_2": {
                    "4": "flag",
                    "9": "param2",
                    "1": "byte_param",
                    "2": "param_2"
                },
                "_DAT_40048038": {
                    "1": "global_variable1"
                },
                "_DAT_40049048": {
                    "1": "global_variable2"
                },
                "cpu_init": {
                    "1": "initialize_cpu"
                },
                "gpio_init": {
                    "1": "initialize_gpio_pin",
                    "5": "initialize_gpio"
                },
                "gpio_set": {
                    "4": "set_gpio",
                    "1": "set_gpio_pin_state"
                },
                "undefined2 param_1": {
                    "1": "parameter_1"
                },
                "byte param_2": {
                    "1": "parameter_2"
                }
            }
        },
        "FUN_00000ed8": {
            "entrypoint": "0x00000ed8",
            "current_name": "print_message_00000ed8",
            "code": "\nvoid print_message_00000ed8(void)\n\n{\n  undefined4 return_address;\n  \n  print_formatted(&DAT_00006f58,return_address);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ed8": "print_message_00000ed8",
                "in_lr": "return_address",
                "iprintf": "print_formatted"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000ed8": {
                    "2": "print_information",
                    "1": "print_ip",
                    "4": "print_formatted_message",
                    "12": "print_message",
                    "3": "print_debug_message"
                },
                "in_lr": {
                    "2": "interrupt_link_register",
                    "4": "return_address",
                    "1": "input_param"
                },
                "param_1": {
                    "1": "format_string",
                    "2": "input_param1",
                    "11": "arg1"
                },
                "param_2": {
                    "2": "input_param2",
                    "1": "unused_param2",
                    "11": "arg2"
                },
                "param_3": {
                    "1": "data3",
                    "2": "param3",
                    "11": "arg3"
                },
                "param_4": {
                    "2": "input_param4",
                    "1": "data4",
                    "11": "arg4"
                },
                "FUN_00004c84": {
                    "1": "handle_sub_function",
                    "4": "process_data"
                },
                "iprintf": {
                    "1": "print_formatted"
                }
            }
        },
        "FUN_00000ef8": {
            "entrypoint": "0x00000ef8",
            "current_name": "FUNC_00000ef8",
            "code": "\nvoid FUNC_00000ef8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ef8": "FUNC_00000ef8"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00000f04": {
            "entrypoint": "0x00000f04",
            "current_name": "handle_panic_00000f04",
            "code": "\nvoid handle_panic_00000f04(char error_code,undefined4 error_message)\n\n{\n  undefined4 stack_variable;\n  code *jump_table;\n  undefined4 param_2_copy;\n  char param_1_copy;\n  \n  param_2_copy = error_message;\n  param_1_copy = error_code;\n  if (DAT_1fff0468 == 0) {\n    DAT_1fff0468 = 1;\n    if (error_code == '\\x03') {\n      print_last_instruction();\n    }\n    print_formatted_output(\"*** RIOT kernel panic:\\n%s\\n\\n\",param_2_copy);\n    print_status();\n    print_formatted_output(&DAT_00006f78);\n    print_formatted_output(\"*** halted.\\n\\n\");\n  }\n  disable_interrupts();\n  architecture_panic();\n  jump_table = (code *)0xf4d;\n  power_management_off();\n  stack_variable = (int)&stack_variable + 1;\n  initialize_auto();\n  print_formatted_output(\"run_main(): This is RIOT! (Version: 2018.04-vm-HEAD)\\n\");\n  run_main();\n                    /* WARNING: Could not recover jumptable at 0x00000f7a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f04": "handle_panic_00000f04",
                "param_1": "error_code",
                "param_2": "error_message",
                "local_10": "param_2_copy",
                "local_9": "param_1_copy",
                "iprintf": "print_formatted_output",
                "cpu_print_last_instruction": "print_last_instruction",
                "ps": "print_status",
                "irq_disable": "disable_interrupts",
                "panic_arch": "architecture_panic",
                "pm_off": "power_management_off",
                "auto_init": "initialize_auto",
                "main": "run_main",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "uStack_18": "stack_variable"
            },
            "calling": [
                "FUN_00000cc0",
                "FUN_000013b8",
                "FUN_00000fec",
                "FUN_00000a30",
                "FUN_00003ec4",
                "FUN_00001034"
            ],
            "called": [
                "FUN_00000ed8",
                "FUN_00004c84",
                "FUN_00000ef8",
                "FUN_00000e58",
                "FUN_0000211c",
                "FUN_000023a4",
                "FUN_00002400",
                "FUN_00000cd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000f04": {
                    "5": "kernel_panic",
                    "9": "kernel_panic_handler",
                    "6": "handle_kernel_panic",
                    "1": "panic_and_restart",
                    "10": "handle_panic"
                },
                "param_1": {
                    "10": "panic_type",
                    "1": "status",
                    "12": "error_code",
                    "2": "error_type"
                },
                "param_2": {
                    "11": "panic_message",
                    "1": "input_param",
                    "6": "message"
                },
                "local_10": {
                    "4": "param_2_copy",
                    "1": "message_copy",
                    "2": "panic_message_copy",
                    "3": "error_message_ptr"
                },
                "local_9": {
                    "1": "panic_type_char",
                    "2": "type",
                    "3": "error_code_copy",
                    "4": "param_1_copy"
                },
                "iprintf": {
                    "1": "print_formatted_output"
                },
                "DAT_1fff0468": {
                    "1": "panic_flag"
                },
                "cpu_print_last_instruction": {
                    "1": "print_last_instruction"
                },
                "ps": {
                    "1": "print_status"
                },
                "DAT_00006f78": {
                    "1": "kernel_version"
                },
                "irq_disable": {
                    "1": "disable_interrupts"
                },
                "panic_arch": {
                    "1": "architecture_panic"
                },
                "pm_off": {
                    "1": "power_management_off"
                },
                "auto_init": {
                    "1": "initialize_auto"
                },
                "main": {
                    "1": "run_main"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "5": "jump_table",
                    "3": "unrecovered_jump_table",
                    "1": "jumptable"
                },
                "FUN_00000ed8": {
                    "6": "print_last_instruction",
                    "1": "print_instruction",
                    "2": "print_cpu_last_instruction"
                },
                "FUN_00004c84": {
                    "1": "print_last_instruction",
                    "2": "panic_arch"
                },
                "FUNC_00000ef8": {
                    "3": "power_management_off",
                    "4": "disable_interrupts",
                    "1": "print_stack"
                },
                "FUN_00000e58": {
                    "1": "pause_scheduler",
                    "2": "arch_specific_panic"
                },
                "FUN_0000211c": {
                    "1": "system_status",
                    "2": "power_off"
                },
                "FUN_000023a4": {
                    "3": "initialize",
                    "1": "get_kernel_version"
                },
                "FUNC_00002400": {
                    "2": "initialize_main",
                    "1": "print_welcome_message",
                    "3": "auto_initialize"
                },
                "FUN_00000cd0": {
                    "2": "get_version",
                    "1": "get_kernel_version",
                    "4": "main"
                },
                "uStack_18": {
                    "1": "stack_pointer",
                    "2": "stack_var",
                    "4": "stack_variable"
                }
            }
        },
        "FUN_00000f8c": {
            "entrypoint": "0x00000f8c",
            "current_name": "initialize_system_00000f8c",
            "code": "\nvoid initialize_system_00000f8c(void)\n\n{\n  uint context_switch_result;\n  undefined4 *context_pointer;\n  uint thread_count;\n  int stack_var1;\n  int *stack_pointer;\n  undefined4 switch_context_flag;\n  undefined4 value3;\n  undefined4 value2;\n  dword r_info;\n  \n  irq_disable();\n  r_info = elf_rel_array[3].r_info;\n  value2 = 0;\n  value3 = 0xf81;\n  create_thread(&DAT_1fff0a6c,0x100,0xf,0xc);\n  r_info = elf_rel_array[3].r_offset;\n  value2 = 0;\n  value3 = 0xf5d;\n  thread_count = 0xc;\n  create_thread(&DAT_1fff046c,0x600,7);\n  switch_context_flag = 0xfd3;\n  context_switch_result = exit_cpu_context();\n  context_switch_result = context_switch_result >> 0x1e;\n  context_pointer = (undefined4 *)(thread_count * 0x100);\n  stack_var1 = (thread_count >> 0x1d) << 0x11;\n  stack_pointer = &stack_var1;\n  if ((context_switch_result & context_switch_result - 1) != 0) {\n    panic(3,\"FAILED ASSERTION.\");\n  }\n  *context_pointer = 0;\n  context_pointer[1] = 0;\n  context_pointer[2] = context_switch_result - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f8c": "initialize_system_00000f8c",
                "uVar1": "context_switch_result",
                "puVar2": "context_pointer",
                "uVar3": "thread_count",
                "iStack_24": "stack_var1",
                "piStack_20": "stack_pointer",
                "uStack_1c": "switch_context_flag",
                "local_18": "value3",
                "local_14": "value2",
                "local_10": "r_info",
                "Elf32_Rel_ARRAY_1fff0200": "elf_rel_array",
                "thread_create": "create_thread",
                "cpu_switch_context_exit": "exit_cpu_context",
                "core_panic": "panic"
            },
            "calling": [
                "FUN_0000099c"
            ],
            "called": [
                "FUN_000010d4",
                "FUN_00000cd0",
                "FUN_00000930"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000f8c": {
                    "30": "initialize_system",
                    "1": "configure_interrupts"
                },
                "param_1": {
                    "1": "info1",
                    "2": "data"
                },
                "param_2": {
                    "3": "param2",
                    "1": "length",
                    "6": "size"
                },
                "param_3": {
                    "6": "flag",
                    "1": "byte_param"
                },
                "param_4": {
                    "2": "size",
                    "1": "thread_stack_size",
                    "3": "offset"
                },
                "param_5": {
                    "1": "param",
                    "3": "param5"
                },
                "FUN_00000cd0": {
                    "1": "get_config_data",
                    "3": "get_configuration",
                    "2": "get_data"
                },
                "FUN_000010d4": {
                    "2": "perform_task",
                    "1": "perform_operation"
                },
                "FUN_00000930": {
                    "1": "perform_initialization",
                    "2": "panic"
                },
                "uVar1": {
                    "1": "context",
                    "2": "context_flag",
                    "5": "context_switch_result"
                },
                "puVar2": {
                    "1": "context_switch_params",
                    "3": "ptr",
                    "4": "context_pointer"
                },
                "uVar3": {
                    "3": "count",
                    "1": "thread_counter",
                    "6": "thread_count",
                    "5": "thread_id",
                    "4": "counter"
                },
                "iStack_24": {
                    "1": "stack_info",
                    "4": "stack_var1",
                    "2": "stack_variable1",
                    "3": "stack_value"
                },
                "piStack_20": {
                    "2": "stack_variable2",
                    "1": "stack_var_2",
                    "7": "stack_pointer"
                },
                "uStack_1c": {
                    "1": "cpu_switch_code",
                    "2": "cpu_switch_flag"
                },
                "local_18": {
                    "1": "temp2",
                    "2": "thread_stack_size"
                },
                "local_14": {
                    "1": "size_value2",
                    "3": "value2"
                },
                "local_10": {
                    "1": "local_var3",
                    "2": "r_info"
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "2": "elf_rel_array"
                },
                "dword local_10": {
                    "1": "r_offset"
                },
                "ThreadData_Struct": {
                    "1": "thread_data"
                },
                "thread_create": {
                    "1": "create_thread"
                },
                "cpu_switch_context_exit": {
                    "1": "exit_cpu_context"
                },
                "core_panic": {
                    "1": "panic"
                }
            }
        },
        "FUN_00000fec": {
            "entrypoint": "0x00000fec",
            "current_name": "initialize_array_00000fec",
            "code": "\nvoid initialize_array_00000fec(undefined4 *array,uint size)\n\n{\n  if ((size & size - 1) != 0) {\n    handle_error(3,\"FAILED ASSERTION.\");\n  }\n  *array = 0;\n  output_ptr_1 = 0;\n  output_ptr_2 = size - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000fec": "initialize_array_00000fec",
                "param_1": "array",
                "param_2": "size",
                "core_panic": "handle_error",
                "param_1[1]": "output_ptr_1",
                "param_1[2]": "output_ptr_2"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00000fec": {
                    "1": "initializearray",
                    "10": "initialize_array",
                    "2": "initialize_bitmask",
                    "9": "initialize_memory"
                },
                "param_1": {
                    "4": "memory",
                    "9": "array",
                    "1": "output_buffer",
                    "2": "output",
                    "3": "memory_pointer"
                },
                "param_2": {
                    "1": "chunk_size",
                    "2": "block_size",
                    "3": "value",
                    "14": "size"
                },
                "core_panic": {
                    "4": "handle_error",
                    "1": "trigger_error",
                    "3": "panic",
                    "2": "report_error"
                },
                "FUN_00000f04": {
                    "1": "process_char_param"
                },
                "*param_1": {
                    "1": "output_ptr"
                },
                "param_1[1]": {
                    "1": "output_ptr_1"
                },
                "param_1[2]": {
                    "1": "output_ptr_2"
                },
                "param_2 - 1": {
                    "1": "value_minus_one"
                }
            }
        },
        "FUN_00001034": {
            "entrypoint": "0x00001034",
            "current_name": "update_linked_list_00001034",
            "code": "\nvoid update_linked_list_00001034(int **pointer_list,int index)\n\n{\n  int **current_node;\n  \n  if (8 < *(byte *)(index + 4)) {\n    handle_error(3,\"FAILED ASSERTION.\");\n  }\n  for (current_node = pointer_list;\n      (*current_node != (int *)0x0 && (*(byte *)((int)*current_node + -3) <= *(byte *)(index + 5)));\n      current_node = (int **)*current_node) {\n  }\n  *(int **)(index + 8) = *current_node;\n  *current_node = (int *)(int **)(index + 8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001034": "update_linked_list_00001034",
                "param_1": "pointer_list",
                "param_2": "index",
                "local_1c": "current_node",
                "core_panic": "handle_error"
            },
            "calling": [
                "FUN_00002434"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001034": {
                    "1": "assign_linked_list_node",
                    "4": "update_linked_list",
                    "2": "find_insert_position"
                },
                "param_1": {
                    "1": "pointer_array",
                    "4": "list",
                    "5": "linked_list",
                    "2": "array_of_pointers",
                    "7": "pointer_list"
                },
                "param_2": {
                    "1": "byte_list_size",
                    "3": "data",
                    "2": "search_value",
                    "9": "index"
                },
                "local_1c": {
                    "12": "current_node",
                    "1": "next_node",
                    "2": "current_ptr",
                    "3": "current_item",
                    "11": "current_pointer"
                },
                "core_panic": {
                    "1": "handle_error"
                }
            }
        },
        "FUN_000010a0": {
            "entrypoint": "0x000010a0",
            "current_name": "calculate_offset_000010a0",
            "code": "\nint calculate_offset_000010a0(int *array)\n\n{\n  int *current_element;\n  \n  for (current_element = array; (int *)*current_element == current_element; current_element = current_element + 1) {\n  }\n  return (int)current_element - (int)array;\n}\n\n",
            "renaming": {
                "FUN_000010a0": "calculate_offset_000010a0",
                "param_1": "array",
                "local_c": "current_element"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000010a0": {
                    "1": "find_pointer_difference",
                    "3": "calculate_distance",
                    "16": "calculate_offset",
                    "2": "find_offset"
                },
                "param_1": {
                    "1": "pointer_array",
                    "21": "array",
                    "3": "input_array"
                },
                "local_c": {
                    "24": "current_element",
                    "2": "current_pointer",
                    "1": "current_address"
                }
            }
        },
        "FUN_000010d4": {
            "entrypoint": "0x000010d4",
            "current_name": "initialize_thread_000010d4",
            "code": "\nint initialize_thread_000010d4(uint start_address,int stack_size,byte priority,uint flags,undefined4 arg1,\n                undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 irq_flags;\n  undefined4 thread_id;\n  int return_value;\n  uint aligned_stack_size;\n  undefined4 *thread_data;\n  int adjusted_stack_size;\n  uint aligned_address;\n  uint loop_counter;\n  short thread_id;\n  short available_index;\n  \n  if (priority < 0x10) {\n    adjusted_stack_size = stack_size;\n    aligned_address = start_address;\n    if ((start_address & 3) != 0) {\n      adjusted_stack_size = 4 - (start_address & 3);\n      aligned_address = adjusted_stack_size + start_address;\n      adjusted_stack_size = stack_size - adjusted_stack_size;\n    }\n    aligned_stack_size = adjusted_stack_size - 0x30U & 0xfffffffc;\n    thread_data = (undefined4 *)(aligned_stack_size + aligned_address);\n    if ((flags & 8) == 0) {\n      *(uint *)aligned_address = aligned_address;\n    }\n    else {\n      for (loop_counter = aligned_address; loop_counter < aligned_stack_size + aligned_address; loop_counter = loop_counter + 4) {\n        *(uint *)loop_counter = loop_counter;\n      }\n    }\n    irq_flags = irq_disable();\n    available_index = 0;\n    for (thread_id = 1; thread_id < 0x21; thread_id = thread_id + 1) {\n      if (*(int *)(&DAT_1fff0358 + thread_id * 4) == 0) {\n        available_index = thread_id;\n        break;\n      }\n    }\n    if (available_index == 0) {\n      irq_restore(irq_flags);\n      return_value = -0x8b;\n    }\n    else {\n      *(undefined4 **)(&DAT_1fff0358 + available_index * 4) = thread_data;\n      *(short *)((int)thread_data + 6) = available_index;\n      thread_id = thread_stack_init(arg1,arg2,aligned_address,aligned_stack_size);\n      *thread_data = thread_id;\n      thread_data[9] = aligned_address;\n      thread_data[0xb] = stack_size;\n      thread_data[10] = arg3;\n      *(byte *)((int)thread_data + 5) = priority;\n      *(undefined *)(thread_data + 1) = 0;\n      thread_data[2] = 0;\n      thread_data[3] = 0;\n      thread_data[4] = 0;\n      cib_init(thread_data + 5,0);\n      thread_data[8] = 0;\n      DAT_1fff0350 = DAT_1fff0350 + 1;\n      if ((flags & 1) == 0) {\n        sched_set_status(thread_data,10);\n        if ((flags & 4) == 0) {\n          irq_restore(irq_flags);\n          sched_switch(priority);\n          return (int)available_index;\n        }\n      }\n      else {\n        sched_set_status(thread_data,1);\n      }\n      irq_restore(irq_flags);\n      return_value = (int)available_index;\n    }\n  }\n  else {\n    return_value = -0x16;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_000010d4": "initialize_thread_000010d4",
                "param_1": "start_address",
                "param_2": "stack_size",
                "param_3": "priority",
                "param_4": "flags",
                "param_5": "arg1",
                "param_6": "arg2",
                "param_7": "arg3",
                "uVar1": "irq_flags",
                "uVar2": "thread_id",
                "iVar3": "return_value",
                "uVar4": "aligned_stack_size",
                "puVar5": "thread_data",
                "local_30": "adjusted_stack_size",
                "local_2c": "aligned_address",
                "local_10": "loop_counter",
                "local_c": "thread_id",
                "local_a": "available_index"
            },
            "calling": [
                "FUN_00000f8c"
            ],
            "called": [
                "FUN_000007dc",
                "FUN_00000698",
                "FUN_00000fec",
                "FUN_00000d0c",
                "FUN_00000738",
                "FUN_00000cd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000010d4": {
                    "5": "initialize_thread_stack",
                    "1": "init_thread",
                    "24": "initialize_thread"
                },
                "param_1": {
                    "2": "address",
                    "1": "base_addr",
                    "6": "thread_id",
                    "5": "base_address",
                    "11": "start_address"
                },
                "param_2": {
                    "1": "thread_stack_size",
                    "2": "size",
                    "27": "stack_size"
                },
                "param_3": {
                    "1": "byte_count",
                    "22": "priority",
                    "6": "thread_priority"
                },
                "param_4": {
                    "3": "thread_flags",
                    "2": "thread_options",
                    "23": "flags",
                    "1": "param"
                },
                "param_5": {
                    "1": "entry_point",
                    "21": "arg1",
                    "5": "param_5"
                },
                "param_6": {
                    "1": "entry_point",
                    "2": "arg",
                    "5": "param_6",
                    "21": "arg2"
                },
                "param_7": {
                    "1": "parameter",
                    "21": "arg3",
                    "5": "param_7",
                    "2": "arg2"
                },
                "uVar1": {
                    "5": "irq_flag",
                    "1": "disabled_interrupts",
                    "4": "irq_status",
                    "2": "irq_state",
                    "6": "irq_flags"
                },
                "uVar2": {
                    "1": "thread_status",
                    "2": "stack_init_result",
                    "4": "thread_stack_init_result",
                    "3": "thread_stack",
                    "5": "thread_id"
                },
                "iVar3": {
                    "15": "result",
                    "16": "return_value"
                },
                "uVar4": {
                    "11": "adjusted_stack_size",
                    "14": "aligned_stack_size",
                    "3": "aligned_size",
                    "1": "var1"
                },
                "puVar5": {
                    "1": "thread_entry",
                    "9": "thread_data",
                    "2": "thread_pointer",
                    "3": "thread",
                    "4": "thread_control_block",
                    "6": "thread_ptr"
                },
                "local_30": {
                    "1": "aligned_stack_size_diff",
                    "11": "adjusted_stack_size",
                    "4": "aligned_size",
                    "2": "aligned_offset"
                },
                "local_2c": {
                    "1": "aligned_stack_ptr",
                    "2": "aligned_start_address",
                    "6": "aligned_address",
                    "5": "adjusted_start_address"
                },
                "local_10": {
                    "17": "loop_counter",
                    "3": "loop_var",
                    "2": "local_10",
                    "1": "end_address",
                    "5": "loop_index"
                },
                "local_c": {
                    "2": "loop_condition",
                    "4": "thread_id",
                    "1": "free_slot",
                    "3": "thread_index"
                },
                "local_a": {
                    "1": "empty_thread",
                    "2": "found_thread_index",
                    "6": "available_index"
                },
                "DAT_1fff0358": {
                    "1": "thread_control_block_array",
                    "2": "thread_array"
                },
                "DAT_1fff0350": {
                    "1": "number_of_threads",
                    "4": "thread_count"
                },
                "schedulerFunctions": {
                    "1": "scheduler_functions"
                }
            }
        },
        "FUN_00001274": {
            "entrypoint": "0x00001274",
            "current_name": "initialize_system_00001274",
            "code": "\nvoid initialize_system_00001274(void)\n\n{\n  cortexm_init();\n  DAT_4007e000 = DAT_4007e000 | 0x28;\n  kinetis_mcg_init();\n  periph_init();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001274": "initialize_system_00001274"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001c84",
                "FUN_0000258c",
                "FUN_00002396"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001274": {
                    "30": "initialize_system",
                    "1": "initialize"
                },
                "FUN_00001c84": {
                    "1": "initialize_cortex_m",
                    "4": "configure_cortexm",
                    "2": "init_cortexm",
                    "20": "initialize_cortexm"
                },
                "FUN_0000258c": {
                    "2": "init_kinetis_mcg",
                    "4": "initialize_mcg",
                    "1": "initialize_peripherals",
                    "21": "initialize_kinetis_mcg"
                },
                "FUN_00002396": {
                    "1": "initialize_clock",
                    "25": "initialize_peripherals"
                }
            }
        },
        "FUN_0000129c": {
            "entrypoint": "0x0000129c",
            "current_name": "lock_mutex_0000129c",
            "code": "\nvoid lock_mutex_0000129c(undefined4 array)\n\n{\n  _mutex_lock(array,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000129c": "lock_mutex_0000129c",
                "param_1": "array"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002434"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000129c": {
                    "1": "lock_resource",
                    "28": "lock_mutex",
                    "2": "acquire_mutex"
                },
                "param_1": {
                    "3": "data",
                    "8": "array",
                    "1": "param",
                    "2": "int_array",
                    "7": "mutex"
                },
                "FUN_00002434": {
                    "1": "handle_array",
                    "7": "do_something",
                    "2": "perform_operation",
                    "4": "some_function"
                },
                "param_2": {
                    "2": "array_length",
                    "1": "length",
                    "4": "data_size",
                    "3": "param",
                    "9": "size"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "DAT_": {
                    "1": "dat_"
                }
            }
        },
        "FUN_000012b4": {
            "entrypoint": "0x000012b4",
            "current_name": "unlock_and_add_one_000012b4",
            "code": "\nundefined4 unlock_and_add_one_000012b4(int mutex_address,undefined data)\n\n{\n  undefined4 result;\n  \n  result = tsrb_add_one(mutex_address + 4,data);\n  mutex_unlock(mutex_address);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000012b4": "unlock_and_add_one_000012b4",
                "param_1": "mutex_address",
                "param_2": "data",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_000024bc",
                "FUN_00002364"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000012b4": {
                    "6": "unlock_and_add",
                    "16": "unlock_and_add_one",
                    "1": "unlock_and_return"
                },
                "param_1": {
                    "2": "mutex_lock_address",
                    "5": "mutex_ptr",
                    "1": "mutex_lock_ptr",
                    "4": "mutex_handle",
                    "9": "mutex_address",
                    "3": "mutex"
                },
                "param_2": {
                    "1": "buffer",
                    "7": "data",
                    "3": "unknown_param",
                    "6": "undefined_param",
                    "2": "param"
                },
                "uVar1": {
                    "29": "result",
                    "1": "return_value"
                }
            }
        },
        "FUN_000012e2": {
            "entrypoint": "0x000012e2",
            "current_name": "wait_for_data_000012e2",
            "code": "\nint wait_for_data_000012e2(int buffer,undefined4 size,undefined4 timeout)\n\n{\n  int result;\n  \n  while( true ) {\n    result = retrieve_from_tsrb(buffer + 4,size,timeout);\n    if (result != 0) break;\n    lock_mutex(buffer);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000012e2": "wait_for_data_000012e2",
                "param_1": "buffer",
                "param_2": "size",
                "param_3": "timeout",
                "iVar1": "result",
                "tsrb_get": "retrieve_from_tsrb",
                "mutex_lock": "lock_mutex"
            },
            "calling": [
                "FUN_00000e14"
            ],
            "called": [
                "FUN_0000231c",
                "FUN_0000129c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000012e2": {
                    "1": "read_and_lock",
                    "2": "retrieve_data",
                    "3": "reverse_and_lock",
                    "5": "wait_for_data"
                },
                "param_1": {
                    "2": "buffer_ptr",
                    "4": "data_ptr",
                    "1": "input_array",
                    "3": "buffer_address",
                    "13": "buffer"
                },
                "param_2": {
                    "1": "param_ptr",
                    "2": "param_2",
                    "22": "size"
                },
                "param_3": {
                    "1": "length",
                    "2": "flags",
                    "7": "count",
                    "4": "offset"
                },
                "iVar1": {
                    "1": "status",
                    "3": "error_code",
                    "24": "result"
                },
                "tsrb_get": {
                    "1": "read_from_array"
                },
                "mutex_lock": {
                    "3": "lock_mutex",
                    "1": "acquire_lock"
                },
                "F_000012e2": {
                    "1": "read_data_from_buffer"
                }
            }
        },
        "FUN_00001318": {
            "entrypoint": "0x00001318",
            "current_name": "set_bit_in_memory_00001318",
            "code": "\nvoid set_bit_in_memory_00001318(byte input_byte)\n\n{\n  *(int *)((unsigned_byte_value >> 5) * 4 + -0x1fff1f00) = 1 << (input_byte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001318": "set_bit_in_memory_00001318",
                "param_1": "input_byte",
                "(uint)(int)(char)param_1": "unsigned_byte_value"
            },
            "calling": [
                "FUN_000014c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001318": {
                    "9": "set_bit",
                    "1": "set_bit_in_array",
                    "13": "set_bit_in_memory",
                    "2": "set_bit_at_index",
                    "3": "set_bit_value"
                },
                "param_1": {
                    "2": "bit_position",
                    "1": "index",
                    "13": "input_byte",
                    "4": "byte_to_set",
                    "9": "byte_value"
                },
                "*(int *)(((uint)(int)(char)param_1 >> 5) * 4 + -0x1fff1f00)": {
                    "1": "bit_array",
                    "2": "target_address",
                    "3": "memory_address"
                },
                "1 << (param_1 & 0x1f)": {
                    "1": "bit_value_to_set",
                    "5": "bit_value",
                    "3": "bit_mask"
                },
                "((uint)(int)(char)param_1 >> 5) * 4 + -0x1fff1f00": {
                    "1": "memory_address"
                },
                "PTR_": {
                    "1": "remove"
                },
                "DAT_": {
                    "1": "remove"
                },
                "int *": {
                    "1": "bits_memory"
                },
                "(uint)(int)(char)param_1 >> 5": {
                    "1": "index_shifted"
                },
                "param_2": {
                    "1": "value"
                },
                "param_3": {
                    "1": "mask"
                },
                "param_4": {
                    "1": "shifted_value"
                },
                "param_5": {
                    "1": "base_address"
                },
                "param_6": {
                    "1": "ptr"
                },
                "param_7": {
                    "1": "data"
                },
                "param_8": {
                    "1": "pointer"
                },
                "param_9": {
                    "1": "value_at_index"
                },
                "param_10": {
                    "1": "new_bit"
                },
                "param_11": {
                    "1": "old_value"
                },
                "param_12": {
                    "1": "shifted_mask"
                },
                "param_13": {
                    "1": "offset"
                },
                "param_14": {
                    "1": "new_value"
                },
                "param_15": {
                    "1": "byte_value"
                },
                "param_16": {
                    "1": "int_value"
                },
                "param_17": {
                    "1": "int_value_ptr"
                },
                "param_18": {
                    "1": "bit_mask"
                },
                "param_19": {
                    "1": "bit_shift"
                },
                "param_20": {
                    "1": "byte_index"
                },
                "param_21": {
                    "1": "byte_index_shift"
                },
                "param_22": {
                    "1": "byte_offset"
                },
                "param_23": {
                    "1": "base_value"
                },
                "param_24": {
                    "1": "shifted_index"
                },
                "param_25": {
                    "1": "shifted_base_index"
                },
                "param_26": {
                    "1": "modified_index"
                },
                "param_27": {
                    "1": "address"
                },
                "param_29": {
                    "1": "bit_index"
                },
                "param_31": {
                    "1": "bit_value"
                },
                "param_32": {
                    "1": "result"
                },
                "param_1 >> 5": {
                    "1": "shifted_value"
                },
                "(uint)(int)(char)param_1": {
                    "1": "unsigned_byte_value"
                },
                "(param_1 & 0x1f)": {
                    "1": "bit_position"
                },
                "param_1 & 0x1f": {
                    "1": "bit_position"
                }
            }
        },
        "FUN_00001348": {
            "entrypoint": "0x00001348",
            "current_name": "check_and_yield_00001348",
            "code": "\nvoid check_and_yield_00001348(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    thread_yield_higher();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001348": "check_and_yield_00001348"
            },
            "calling": [
                "FUN_00001628"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001348": {
                    "1": "check_yield_and_yield_higher",
                    "20": "check_and_yield",
                    "2": "yield_if_not_zero"
                },
                "FUN_0000093c": {
                    "1": "perform_initialization",
                    "3": "execute_sub_function",
                    "7": "perform_cleanup",
                    "2": "perform_operation"
                },
                "DAT_1fff0354": {
                    "1": "status"
                }
            }
        },
        "FUN_00001360": {
            "entrypoint": "0x00001360",
            "current_name": "calculate_offset_00001360",
            "code": "\nint calculate_offset_00001360(uint input_value,int multiplier)\n\n{\n  return multiplier * 4 + (input_value & 0xf0000000 | (input_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001360": "calculate_offset_00001360",
                "param_1": "input_value",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001392"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001360": {
                    "1": "calculate_modified_value",
                    "2": "calculate_new_value",
                    "19": "calculate_offset",
                    "3": "calculate_result"
                },
                "param_1": {
                    "4": "address",
                    "1": "input1",
                    "11": "input_value",
                    "3": "base_address",
                    "2": "input_value1"
                },
                "param_2": {
                    "1": "input_2",
                    "2": "offset_multiplier",
                    "21": "multiplier"
                },
                "param_1 & 0xf0000000 | (param_1 & 0xfffff) << 5": {
                    "1": "masked_input"
                },
                "param_2 * 4 + masked_input + 0x2000000": {
                    "1": "calculated_offset"
                },
                "0xf0000000": {
                    "1": "bitmask1"
                },
                "0xfffff": {
                    "1": "bitmask2"
                },
                "0x2000000": {
                    "1": "constant"
                },
                "var_1": {
                    "1": "high_bits"
                },
                "var_2": {
                    "1": "low_bits"
                },
                "var_3": {
                    "1": "shifted_low_bits"
                },
                "param_1.temp1": {
                    "1": "temp1"
                },
                "param_1.temp2": {
                    "1": "temp2"
                },
                "multiplier": {
                    "1": "temp3"
                },
                "inputValue": {
                    "1": "input_value"
                },
                "temp1": {
                    "1": "mask_bits"
                },
                "temp2": {
                    "1": "shifted_value"
                },
                "temp3": {
                    "1": "constant_offset"
                }
            }
        },
        "FUN_00001392": {
            "entrypoint": "0x00001392",
            "current_name": "set_offset_to_value_00001392",
            "code": "\nvoid set_offset_to_value_00001392(undefined4 input_value,undefined multiplier)\n\n{\n  undefined4 *offset_ptr;\n  \n  offset_ptr = (undefined4 *)calculate_offset(input_value,multiplier);\n  *offset_ptr = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001392": "set_offset_to_value_00001392",
                "param_1": "input_value",
                "param_2": "multiplier",
                "puVar1": "offset_ptr",
                "calculate_offset_00001360": "calculate_offset"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001360"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001392": {
                    "1": "set_offset_to_value_one",
                    "6": "set_offset_to_one",
                    "8": "set_offset_to1",
                    "10": "set_offset_to_value"
                },
                "param_1": {
                    "31": "input_value"
                },
                "param_2": {
                    "31": "multiplier"
                },
                "puVar1": {
                    "1": "output_pointer",
                    "12": "offset_pointer",
                    "2": "result_pointer"
                },
                "calculate_offset_00001360": {
                    "1": "calculate_offset"
                }
            }
        },
        "FUN_000013b8": {
            "entrypoint": "0x000013b8",
            "current_name": "initialize_uart_000013b8",
            "code": "\nundefined4 initialize_uart_000013b8(int port_index,undefined4 uart_config,undefined4 pin_config_1,undefined4 pin_config_2)\n\n{\n  undefined4 result;\n  \n  if (port_index != 0) {\n    handle_panic_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *(undefined4 *)(&DAT_1fff0b6c + port_index * 8) = pin_config_1;\n  *(undefined4 *)(&DAT_1fff0b70 + port_index * 8) = pin_config_2;\n  initialize_uart_000013b8_pins(port_index);\n  set_offset_to_value(*(undefined4 *)(&DAT_00006ffc + port_index * 0x20),\n               *(undefined *)(port_index * 0x20 + 0x7000));\n  if ((&DAT_00007002)[port_index * 0x20] == '\\0') {\n    initialize_uart_000013b8_uart(port_index,uart_config);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000013b8": "initialize_uart_000013b8",
                "param_1": "port_index",
                "param_2": "uart_config",
                "param_3": "pin_config_1",
                "param_4": "pin_config_2",
                "uVar1": "result",
                "core_panic": "handle_panic_00000f04",
                "uart_init_pins": "initialize_uart_pins",
                "set_offset_to_value_00001392": "set_offset_to_value",
                "uart_init_uart": "initialize_uart_uart"
            },
            "calling": [
                "FUN_00000df4"
            ],
            "called": [
                "FUN_00001392",
                "FUN_00000f04",
                "FUN_000014c4",
                "FUN_00001448"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000013b8": {
                    "30": "initialize_uart",
                    "1": "init_uart_and_pins"
                },
                "param_1": {
                    "1": "uart_number",
                    "15": "port_index",
                    "10": "index",
                    "3": "uart_index"
                },
                "param_2": {
                    "2": "uart_baudrate",
                    "1": "uart_baud_rate",
                    "4": "baud_rate",
                    "17": "uart_config",
                    "3": "uart_mode"
                },
                "param_3": {
                    "1": "pin_set",
                    "4": "pin_config",
                    "6": "pin_config_1",
                    "2": "multiplier"
                },
                "param_4": {
                    "2": "uart_init_val",
                    "1": "gpio_multiplier",
                    "6": "pin_config_2",
                    "3": "offset_value",
                    "4": "multiplier"
                },
                "uVar1": {
                    "1": "return_val",
                    "22": "result",
                    "6": "return_value"
                },
                "core_panic": {
                    "9": "handle_panic_00000f04",
                    "3": "handle_panic"
                },
                "uart_init_pins": {
                    "11": "initialize_uart_pins",
                    "1": "initialize_pins",
                    "3": "initialize_gpio_ports_00001448"
                },
                "set_offset_to_value_00001392": {
                    "1": "set_offset",
                    "6": "set_offset_value",
                    "17": "set_offset_to_value"
                },
                "uart_init_uart": {
                    "1": "initialize_uart_peripheral",
                    "3": "initialize_uart_module",
                    "6": "initialize_uart_uart"
                },
                "&DAT_00007002": {
                    "1": "uart_enabled"
                },
                "PTR_DAT_1fff0b6c": {
                    "1": "uart_param_3_array"
                },
                "PTR_DAT_1fff0b70": {
                    "1": "uart_param_4_array"
                },
                "PTR_DAT_00006ffc": {
                    "1": "uart_param_1_array"
                },
                "FUNC_set_offset_to_value_00001392": {
                    "1": "set_offset_to_value"
                },
                "PTR_DAT_00007002": {
                    "1": "uart_check_condition"
                },
                "DAT_00006ffc": {
                    "1": "uart_config_base"
                },
                "DAT_1fff0b6c": {
                    "1": "uart_pin_config"
                },
                "DAT_1fff0b70": {
                    "1": "uart_offset_config"
                },
                "DAT_00007002": {
                    "1": "uart_flag"
                },
                "handle_panic_00000f04": {
                    "1": "handle_assertion_failure",
                    "15": "handle_panic"
                },
                "update_memory_000014c4": {
                    "17": "update_memory"
                },
                "initialize_gpio_ports_00001448": {
                    "17": "initialize_gpio_ports",
                    "1": "init_gpio_ports"
                },
                "char": {
                    "1": "error_code"
                },
                "error_message": {
                    "1": "error_message"
                },
                "&DAT_1fff0b6c": {
                    "1": "data_array1"
                },
                "&DAT_1fff0b70": {
                    "1": "data_array2"
                },
                "&DAT_00006ffc": {
                    "1": "memory_array"
                }
            }
        },
        "FUN_00001448": {
            "entrypoint": "0x00001448",
            "current_name": "initialize_gpio_ports_00001448",
            "code": "\nvoid initialize_gpio_ports_00001448(int port_index)\n\n{\n  if (*(short *)(&DAT_00006fec + port_index * 0x20) != -1) {\n    initialize_gpio_port(*(port_type *)(&DAT_00006fec + port_index * 0x20),\n                   *(port_config *)(&DAT_00006ff0 + port_index * 0x20));\n  }\n  if (*(short *)(&DAT_00006fee + port_index * 0x20) != -1) {\n    initialize_gpio_port(*(port_type *)(&DAT_00006fee + port_index * 0x20),\n                   *(port_config *)(&DAT_00006ff4 + port_index * 0x20));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001448": "initialize_gpio_ports_00001448",
                "param_1": "port_index",
                "gpio_init_port": "initialize_gpio_port",
                "undefined2": "port_type",
                "undefined4": "port_config"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001f80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001448": {
                    "1": "initialize_io_ports",
                    "2": "init_gpio_ports",
                    "18": "initialize_gpio_ports",
                    "7": "initialize_gpio"
                },
                "param_1": {
                    "15": "port_index",
                    "2": "device_index",
                    "14": "index"
                },
                "FUN_00001f80": {
                    "1": "configure_gpio_port",
                    "11": "gpio_init_port"
                },
                "param_2": {
                    "1": "pin",
                    "3": "port_config"
                },
                "(&DAT_00006fec + param_1 * 0x20)": {
                    "1": "port_address"
                },
                "(&DAT_00006ff0 + param_1 * 0x20)": {
                    "1": "configuration_address"
                },
                "(&DAT_00006fee + param_1 * 0x20)": {
                    "1": "port2_address"
                },
                "(&DAT_00006ff4 + param_1 * 0x20)": {
                    "1": "configuration2_address"
                },
                "gpio_init_port": {
                    "1": "initialize_single_gpio_port",
                    "3": "initialize_gpio_port",
                    "2": "initialize_port"
                },
                "&DAT_00006fec": {
                    "1": "port_config_1"
                },
                "&DAT_00006fef": {
                    "1": "port_value_first"
                },
                "&DAT_00006cee": {
                    "1": "port_address_second"
                },
                "&DAT_00006ff1": {
                    "1": "port_value_second"
                },
                "*(short *)(&DAT_00006fec + param_1 * 0x20)": {
                    "1": "gpio_pin1",
                    "2": "port1_value"
                },
                "*(undefined2 *)(&DAT_00006fec + param_1 * 0x20)": {
                    "1": "port_a",
                    "5": "port1_address"
                },
                "*(undefined4 *)(&DAT_00006ff0 + param_1 * 0x20)": {
                    "2": "port1_configuration",
                    "1": "port_a_configuration"
                },
                "*(short *)(&DAT_00006fee + param_1 * 0x20)": {
                    "1": "port2_status",
                    "2": "port2_value"
                },
                "*(undefined2 *)(&DAT_00006fee + param_1 * 0x20)": {
                    "1": "port2",
                    "5": "port2_address"
                },
                "*(undefined4 *)(&DAT_00006ff4 + param_1 * 0x20)": {
                    "1": "port2_value",
                    "2": "port2_configuration"
                },
                "&DAT_00006fee": {
                    "1": "port2_data"
                },
                "PTR_00006ff0": {
                    "1": "pin_config_1"
                },
                "PTR_00006ff4": {
                    "1": "pin_config_2"
                },
                "&DAT_00006ff0": {
                    "1": "port1_param_address"
                },
                "&DAT_00006ff4": {
                    "1": "port2_param_address"
                },
                "DAT_00006fec": {
                    "2": "port_array1",
                    "1": "port_array"
                },
                "DAT_00006fee": {
                    "2": "port_array2",
                    "1": "port2_config"
                },
                "PTR_FUN_00001f80": {
                    "1": "gpio_init_port"
                },
                "PTR_FUN_00001f80.param_1": {
                    "1": "port"
                },
                "PTR_FUN_00001f80.param_2": {
                    "1": "config"
                },
                "DAT_00006ff0": {
                    "1": "port1_param",
                    "2": "port_config_1"
                },
                "DAT_00006ff4": {
                    "1": "port2_param",
                    "2": "port_config_2"
                },
                "0x20": {
                    "1": "data_offset"
                },
                "index": {
                    "2": "index"
                },
                "pin": {
                    "1": "pin"
                },
                "FUN_00001f80_param_1": {
                    "1": "port"
                },
                "FUN_00001f80_param_2": {
                    "1": "config"
                },
                "portArray": {
                    "1": "port_array"
                },
                "pinArray": {
                    "1": "pin_array"
                },
                "*((short *)(&DAT_00006fec + param_1 * 0x20))": {
                    "1": "port1_status"
                },
                "*((short *)(&DAT_00006fee + param_1 * 0x20))": {
                    "1": "port2_status"
                },
                "*(&DAT_00006fec + param_1 * 0x20)": {
                    "2": "port1"
                },
                "*(&DAT_00006fee + param_1 * 0x20)": {
                    "2": "port2"
                },
                "*(&DAT_00006ff0 + param_1 * 0x20)": {
                    "1": "param1_1"
                },
                "*(&DAT_00006ff4 + param_1 * 0x20)": {
                    "1": "param1_2"
                },
                "undefined2": {
                    "1": "port_type"
                },
                "undefined4": {
                    "1": "port_config"
                }
            }
        },
        "FUN_000014c4": {
            "entrypoint": "0x000014c4",
            "current_name": "update_memory_000014c4",
            "code": "\nvoid update_memory_000014c4(int index,uint value)\n\n{\n  byte *data_ptr;\n  uint value1;\n  uint value2;\n  \n  data_ptr = *(byte **)(&DAT_00006fe4 + index * 0x20);\n  value1 = *(uint *)(&DAT_00006fe8 + index * 0x20);\n  data_ptr[3] = data_ptr[3] & 0xf3;\n  data_ptr[2] = (&DAT_00007001)[index * 0x20];\n  value2 = value1 / (value << 4);\n  *data_ptr = (byte)(value2 >> 8) & 0x1f;\n  data_ptr[1] = (byte)value2;\n  data_ptr[10] = (byte)((value1 << 2) / value + 1 >> 1) & 0x1f;\n  data_ptr[0x10] = data_ptr[0x10] | 0x88;\n  if ((data_ptr[0x10] & 0x70) == 0) {\n    data_ptr[0x13] = 0;\n  }\n  else {\n    data_ptr[0x13] = (char)(2 << (data_ptr[0x10] >> 4 & 7)) - 1;\n  }\n  data_ptr[0x15] = 1;\n  data_ptr[0x11] = 0xc0;\n  data_ptr[3] = data_ptr[3] | 0x2c;\n  set_bit_in_memory((int)(char)(&DAT_00006ff8)[index * 0x20]);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000014c4": "update_memory_000014c4",
                "param_1": "index",
                "param_2": "value",
                "pbVar1": "data_ptr",
                "uVar2": "value1",
                "uVar3": "value2",
                "set_bit_in_memory_00001318": "set_bit_in_memory"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000014c4": {
                    "2": "update_parameters",
                    "5": "update_memory",
                    "1": "improve_and_set_bit",
                    "4": "update_configuration"
                },
                "param_1": {
                    "1": "memory_index",
                    "28": "index"
                },
                "param_2": {
                    "2": "divider",
                    "1": "block_size",
                    "14": "value",
                    "9": "divisor",
                    "3": "factor"
                },
                "pbVar1": {
                    "1": "memory_byte",
                    "4": "data_ptr",
                    "2": "ptr"
                },
                "uVar2": {
                    "1": "data_1",
                    "2": "value",
                    "5": "config_value",
                    "11": "value1",
                    "3": "data_value"
                },
                "uVar3": {
                    "3": "new_value",
                    "1": "quotient",
                    "4": "result",
                    "11": "value2"
                },
                "set_bit_in_memory_00001318": {
                    "2": "set_bit_in_memory"
                }
            }
        },
        "FUN_000015d0": {
            "entrypoint": "0x000015d0",
            "current_name": "copy_data_000015d0",
            "code": "\nvoid copy_data_000015d0(int index,int source,uint length)\n\n{\n  int destination_address;\n  uint counter;\n  \n  destination_address = *(int *)(&DAT_00006fe4 + index * 0x20);\n  for (counter = 0; counter < length; counter = counter + 1) {\n    do {\n    } while (-1 < *(char *)(destination_address + 4));\n    *(undefined *)(destination_address + 7) = *(undefined *)(counter + source);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000015d0": "copy_data_000015d0",
                "param_1": "index",
                "param_2": "source",
                "param_3": "length",
                "iVar1": "destination_address",
                "local_c": "counter"
            },
            "calling": [
                "FUN_00000e38"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000015d0": {
                    "1": "copy_data_to_array",
                    "2": "copy_data_to_pointer",
                    "15": "copy_data",
                    "5": "copy_data_to_memory"
                },
                "param_1": {
                    "1": "data_offset",
                    "2": "offset",
                    "22": "index"
                },
                "param_2": {
                    "3": "source_array",
                    "1": "source_offset",
                    "12": "source",
                    "9": "source_address"
                },
                "param_3": {
                    "1": "data_length",
                    "6": "num_elements",
                    "2": "size",
                    "15": "length"
                },
                "iVar1": {
                    "1": "destination_start",
                    "4": "data_address",
                    "6": "destination_address",
                    "2": "data_offset"
                },
                "local_c": {
                    "1": "loop_index",
                    "9": "counter",
                    "2": "element_index",
                    "3": "index",
                    "4": "current_index"
                }
            }
        },
        "FUN_00001628": {
            "entrypoint": "0x00001628",
            "current_name": "execute_function_00001628",
            "code": "\nvoid execute_function_00001628(function_address index)\n\n{\n  if (((*(flags *)(*(function_address *)(&DAT_00006fe4 + index * 0x20) + 4) & 0x20) != 0) &&\n     (*(function_address *)(&DAT_1fff0b6c + index * 8) != 0)) {\n    (**(pointer_to_function **)(&DAT_1fff0b6c + index * 8))\n              (*(arg1 *)(&DAT_1fff0b70 + index * 8),\n               *(arg2 *)(*(function_address *)(&DAT_00006fe4 + index * 0x20) + 7));\n  }\n  check_and_yield();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001628": "execute_function_00001628",
                "param_1": "index",
                "check_and_yield_00001348": "check_and_yield",
                "byte": "flags",
                "code": "pointer_to_function",
                "int": "function_address",
                "undefined4": "arg1",
                "undefined": "arg2"
            },
            "calling": [
                "FUN_00001688"
            ],
            "called": [
                "FUN_00001348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001628": {
                    "1": "execute_program",
                    "3": "execute_and_check",
                    "2": "process_data",
                    "6": "execute_function",
                    "4": "execute_function_if_condition_met"
                },
                "param_1": {
                    "1": "command_index",
                    "28": "index"
                },
                "DAT_00006fe4": {
                    "1": "data_1",
                    "3": "data_array",
                    "2": "function_table"
                },
                "DAT_1fff0b6c": {
                    "2": "function_array",
                    "1": "data_2"
                },
                "check_and_yield_00001348": {
                    "15": "check_and_yield",
                    "1": "perform_yield_check",
                    "4": "perform_check_and_yield"
                },
                "*(&DAT_00006fe4 + param_1 * 0x20)": {
                    "1": "cv_data_address"
                },
                "(***(&DAT_1fff0b6c + param_1 * 8))": {
                    "1": "cv_function"
                },
                "(&DAT_1fff0b70 + param_1 * 8)": {
                    "1": "cv_param_1_address"
                },
                "*(undefined *)(*(&DAT_00006fe4 + param_1 * 0x20) + 7)": {
                    "1": "cv_param_2_value"
                },
                "byte": {
                    "1": "status",
                    "7": "flags"
                },
                "code": {
                    "1": "function_pointer"
                },
                "DAT_1fff0b70": {
                    "2": "function_data",
                    "1": "data_3"
                },
                "*(byte *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 4)": {
                    "1": "flags"
                },
                "*(int *)(&DAT_1fff0b6c + index * 8)": {
                    "2": "function_ptr",
                    "1": "function_address"
                },
                "**(code **)(&DAT_1fff0b6c + index * 8)": {
                    "1": "function"
                },
                "*(undefined4 *)(&DAT_1fff0b70 + index * 8)": {
                    "1": "argument_1"
                },
                "*(undefined *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 7)": {
                    "1": "argument_2"
                },
                "&DAT_00006fe4": {
                    "1": "data_ptr"
                },
                "&DAT_1fff0b6c": {
                    "2": "function_array",
                    "1": "function_table"
                },
                "&DAT_1fff0b70": {
                    "1": "argument_array"
                },
                "0x20": {
                    "1": "offset"
                },
                "0x08": {
                    "1": "function_pointer_offset"
                },
                "0x04": {
                    "1": "flags_offset"
                },
                "0x7": {
                    "1": "argument_offset"
                },
                "int": {
                    "1": "pointer"
                },
                "undefined4": {
                    "1": "arg1"
                },
                "undefined": {
                    "1": "arg2"
                },
                "(*(byte *)(*(int *)(&function_address + index * 0x20) + 4) & 0x20)": {
                    "1": "is_flag_set"
                },
                "(*(int *)(&DAT_1fff0b6c + index * 8) != 0)": {
                    "1": "has_valid_function"
                },
                "(**(code **)(&DAT_1fff0b6c + index * 8))": {
                    "1": "function_to_call"
                },
                "(*(undefined *)(*(int *)(&function_address + index * 0x20) + 7))": {
                    "1": "call_argument"
                },
                "(&DAT_00006fe4 + param_1 * 0x20)": {
                    "1": "data_ptr"
                },
                "(&DAT_1fff0b6c + param_1 * 8)": {
                    "1": "function_ptr"
                },
                "*(byte *)(data_ptr + 4)": {
                    "1": "byte4_val"
                },
                "*(int *)(data_ptr)": {
                    "1": "int_val"
                },
                "*(int *)(&DAT_1fff0b70 + param_1 * 8)": {
                    "1": "int_ptr"
                },
                "*(undefined4 *)(int_ptr)": {
                    "1": "undefined4_val"
                },
                "*(undefined *)(data_ptr + 7)": {
                    "1": "undefined_val"
                },
                "(*(code **)(&DAT_1fff0b6c + index * 8))": {
                    "1": "function"
                },
                "(*(byte *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 4) & 0x20)": {
                    "1": "has_flag"
                },
                "(*(undefined4 *)(&DAT_1fff0b70 + index * 8), *(undefined *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 7))": {
                    "1": "call_function"
                },
                "**(*(code **)(&DAT_1fff0b6c + param_1 * 8))": {
                    "1": "callback"
                },
                "*(undefined4 *)(&DAT_1fff0b70 + param_1 * 8)": {
                    "1": "data_ptr"
                },
                "*(undefined *)(*(int *)(&DAT_00006fe4 + param_1 * 0x20) + 7)": {
                    "1": "flag"
                }
            }
        },
        "FUN_00001688": {
            "entrypoint": "0x00001688",
            "current_name": "initialize_uart_irq_handler_00001688",
            "code": "\nvoid initialize_uart_irq_handler_00001688(void)\n\n{\n  handle_uart_interrupt(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001688": "initialize_uart_irq_handler_00001688",
                "irq_handler_uart": "handle_uart_interrupt"
            },
            "calling": [],
            "called": [
                "FUN_00001628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001688": {
                    "10": "initialize_uart_irq_handler",
                    "2": "handle_uart_interrupt",
                    "1": "initialize_interrupts",
                    "3": "initialize_uart_interrupts",
                    "4": "initialize_uart_interrupt",
                    "5": "initialize_uart_handler"
                },
                "param_1": {
                    "1": "handler_id",
                    "2": "interrupt_flag",
                    "3": "interrupt_number"
                },
                "FUN_00001628": {
                    "2": "process_uart_data",
                    "1": "set_uart_irq_handler",
                    "6": "handle_uart_interrupt"
                },
                "irq_handler_uart": {
                    "2": "handle_uart_interrupt"
                },
                "IRQ_handler_UART": {
                    "1": "handle_interrupt"
                }
            }
        },
        "FUN_00001696": {
            "entrypoint": "0x00001696",
            "current_name": "calculate_offset_00001696",
            "code": "\nint calculate_offset_00001696(uint input_value,int multiplier)\n\n{\n  return multiplier * 4 + (input_value & 0xf0000000 | (input_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001696": "calculate_offset_00001696",
                "param_1": "input_value",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_000016c8",
                "FUN_00001710",
                "FUN_000016ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001696": {
                    "26": "calculate_offset",
                    "3": "calculate_result",
                    "2": "calculate_new_value"
                },
                "param_1": {
                    "6": "address",
                    "3": "base_address",
                    "2": "data",
                    "13": "input_value",
                    "1": "number"
                },
                "param_2": {
                    "2": "offset_multiplier",
                    "1": "value2",
                    "3": "index",
                    "24": "multiplier"
                },
                "param_1 & 0xf0000000 | (param_1 & 0xfffff) << 5": {
                    "1": "extract_bits_and_shift"
                },
                "0x2000000": {
                    "2": "constant_offset"
                },
                "0xf0000000": {
                    "1": "bitmask_1"
                },
                "0xfffff": {
                    "1": "bitmask_2"
                }
            }
        },
        "FUN_000016c8": {
            "entrypoint": "0x000016c8",
            "current_name": "set_offset_to_one_000016c8",
            "code": "\nvoid set_offset_to_one_000016c8(undefined4 input_value,undefined multiplier)\n\n{\n  undefined4 *offset_pointer;\n  \n  offset_pointer = (undefined4 *)calculate_offset_00001696(input_value,multiplier);\n  *offset_pointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016c8": "set_offset_to_one_000016c8",
                "param_1": "input_value",
                "param_2": "multiplier",
                "puVar1": "offset_pointer"
            },
            "calling": [
                "FUN_000017dc"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000016c8": {
                    "1": "set_result_to1",
                    "13": "set_offset_to_one",
                    "4": "set_offset_to1",
                    "8": "set_offset_to_value"
                },
                "param_1": {
                    "1": "value",
                    "29": "input_value"
                },
                "param_2": {
                    "31": "multiplier"
                },
                "puVar1": {
                    "1": "result_pointer",
                    "15": "offset_pointer",
                    "9": "offset_ptr"
                }
            }
        },
        "FUN_000016ec": {
            "entrypoint": "0x000016ec",
            "current_name": "set_offset_to_value_000016ec",
            "code": "\nvoid set_offset_to_value_000016ec(undefined4 input_value,undefined multiplier)\n\n{\n  undefined *offset_pointer;\n  \n  offset_pointer = (undefined *)calculate_offset(input_value,multiplier);\n  *offset_pointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016ec": "set_offset_to_value_000016ec",
                "param_1": "input_value",
                "param_2": "multiplier",
                "puVar1": "offset_pointer",
                "calculate_offset_00001696": "calculate_offset"
            },
            "calling": [
                "FUN_0000182c",
                "FUN_00001778",
                "FUN_00001a60",
                "FUN_00001a3c",
                "FUN_00001a18"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000016ec": {
                    "8": "set_offset_to_one",
                    "1": "set_offset_to_value_one",
                    "2": "initialize_memory",
                    "10": "set_offset_to_value"
                },
                "param_1": {
                    "3": "input",
                    "27": "input_value",
                    "1": "input_val"
                },
                "param_2": {
                    "31": "multiplier"
                },
                "puVar1": {
                    "1": "result_pointer",
                    "10": "offset_ptr",
                    "12": "offset_pointer",
                    "2": "memory_address"
                },
                "calculate_offset_00001696": {
                    "1": "calculate_offset"
                }
            }
        },
        "FUN_00001710": {
            "entrypoint": "0x00001710",
            "current_name": "clear_memory_00001710",
            "code": "\nvoid clear_memory_00001710(undefined4 input_value,undefined multiplier)\n\n{\n  undefined *memory_address;\n  \n  memory_address = (undefined *)calculate_offset(input_value,multiplier);\n  *memory_address = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001710": "clear_memory_00001710",
                "param_1": "input_value",
                "param_2": "multiplier",
                "puVar1": "memory_address",
                "calculate_offset_00001696": "calculate_offset"
            },
            "calling": [
                "FUN_0000182c",
                "FUN_00001778",
                "FUN_000019c0",
                "FUN_000018bc",
                "FUN_00001a60",
                "FUN_00001960",
                "FUN_00001734",
                "FUN_00001bb8"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001710": {
                    "1": "clear_offset_value",
                    "25": "clear_memory",
                    "3": "set_offset_to_zero",
                    "2": "initialize_memory"
                },
                "param_1": {
                    "6": "input",
                    "1": "value",
                    "22": "input_value",
                    "2": "input_val"
                },
                "param_2": {
                    "31": "multiplier"
                },
                "puVar1": {
                    "2": "offset_ptr",
                    "1": "memory_offset",
                    "3": "offset_pointer",
                    "4": "memory_location",
                    "6": "memory_address"
                },
                "calculate_offset_00001696": {
                    "1": "calculate_offset"
                }
            }
        },
        "FUN_00001734": {
            "entrypoint": "0x00001734",
            "current_name": "clear_bit_6_00001734",
            "code": "\nvoid clear_bit_6_00001734(void)\n\n{\n  bit_clear8(&DAT_40064005,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001734": "clear_bit_6_00001734"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_00001a3c",
                "FUN_00001a18"
            ],
            "called": [
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001734": {
                    "2": "clear_bit_in_port",
                    "1": "clear_bit_at_position6",
                    "3": "clear_sixth_bit",
                    "6": "clear_bit6"
                },
                "FUN_00001710": {
                    "1": "set_bit_unchecked",
                    "7": "set_bit",
                    "6": "clear_bit",
                    "3": "update_bit",
                    "2": "set_bit_in_memory"
                },
                "param_1": {
                    "4": "address",
                    "3": "arg1",
                    "1": "input_param"
                },
                "param_2": {
                    "1": "setup_param_2",
                    "3": "arg2",
                    "8": "bit_position",
                    "2": "bit_index"
                }
            }
        },
        "FUN_00001748": {
            "entrypoint": "0x00001748",
            "current_name": "update_flags_00001748",
            "code": "\nvoid update_flags_00001748(byte input_byte)\n\n{\n  DAT_40064003 = input_byte | DAT_40064003 & 0x1f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001748": "update_flags_00001748",
                "param_1": "input_byte"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_000018bc",
                "FUN_00001960",
                "FUN_0000191c",
                "FUN_00001bb8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001748": {
                    "1": "update_bit_mask",
                    "2": "update_value",
                    "9": "update_flags"
                },
                "param_1": {
                    "3": "input",
                    "1": "new_data",
                    "5": "input_value",
                    "2": "value",
                    "8": "input_byte"
                },
                "DAT_40064003": {
                    "1": "flag_value",
                    "2": "original_value",
                    "3": "flags"
                },
                "param_2": {
                    "1": "unused_parameter"
                },
                "0x1f": {
                    "1": "bit_mask"
                }
            }
        },
        "FUN_00001778": {
            "entrypoint": "0x00001778",
            "current_name": "update_flags_00001778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000179c) */\n/* WARNING: Removing unreachable block (ram,0x000017b2) */\n/* WARNING: Removing unreachable block (ram,0x000017c0) */\n\nvoid update_flags_00001778(void)\n\n{\n  DAT_40064001 = DAT_40064001 & 0xcf | 0x20;\n  clear_bit(&DAT_40064001,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001778": "update_flags_00001778",
                "bit_clear8": "clear_bit"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_0000191c"
            ],
            "called": [
                "FUN_00001710",
                "FUN_000016ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001778": {
                    "1": "update_status_register",
                    "2": "update_flags_and_clear_bit",
                    "3": "update_flags"
                },
                "param_1": {
                    "1": "unknown_param_1",
                    "7": "arg1",
                    "2": "param_1",
                    "3": "param1"
                },
                "param_2": {
                    "1": "config2",
                    "4": "param2",
                    "2": "param_2",
                    "7": "arg2"
                },
                "DAT_40064001": {
                    "1": "flags",
                    "2": "register_value"
                },
                "FUN_00001710": {
                    "1": "set_bits",
                    "3": "clear_bit"
                },
                "FUN_000016ec": {
                    "1": "update_value_with_mask",
                    "2": "clear_bit"
                },
                "bit_clear8": {
                    "1": "clear_bit"
                }
            }
        },
        "FUN_000017dc": {
            "entrypoint": "0x000017dc",
            "current_name": "initialize_offset_000017dc",
            "code": "\n\n\nvoid initialize_offset_000017dc(void)\n\n{\n  set_offset_to_one(&DAT_4004803c,0x1d);\n  if ((_DAT_4003d010 & 0x100) == 0) {\n    _DAT_4003d010 = 0x104;\n  }\n  _DAT_40047000 = _DAT_40047000 & 0xfff3ffff | 0x80000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000017dc": "initialize_offset_000017dc",
                "set_offset_to_one_000016c8": "set_offset_to_one"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000017dc": {
                    "1": "set_offset_and_check_status",
                    "6": "update_offset",
                    "3": "update_offset_and_flag",
                    "2": "set_offset_and_check"
                },
                "set_offset_to_one_000016c8": {
                    "24": "set_offset_to_one"
                },
                "input_value": {
                    "1": "memory_address",
                    "2": "offset_value",
                    "15": "value",
                    "4": "offset"
                },
                "multiplier": {
                    "5": "offset_multiplier",
                    "1": "multiplier_value",
                    "2": "offset",
                    "9": "factor",
                    "10": "multiplier"
                },
                "_DAT_4003d010": {
                    "1": "register_value",
                    "2": "status_register"
                },
                "_DAT_40047000": {
                    "1": "memory_address",
                    "2": "memory_register"
                },
                "multipier": {
                    "1": "multiplier"
                }
            }
        },
        "FUN_0000182c": {
            "entrypoint": "0x0000182c",
            "current_name": "update_data_0000182c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000187c) */\n/* WARNING: Removing unreachable block (ram,0x0000186a) */\n/* WARNING: Removing unreachable block (ram,0x00001898) */\n\nvoid update_data_0000182c(void)\n\n{\n  DAT_40064008 = DAT_40064008 & 0xd0;\n  set_bit(&DAT_40064001,0);\n  clear_bit(&DAT_40064000,1);\n  clear_bit(&DAT_40064000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000182c": "update_data_0000182c",
                "bit_set8": "set_bit",
                "bit_clear8": "clear_bit"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001710",
                "FUN_000016ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000182c": {
                    "6": "update_data",
                    "1": "update_data_and_set_bits",
                    "2": "set_bits_and_clear_bits",
                    "3": "clear_bits_and_set_bit"
                },
                "FUN_00001710": {
                    "1": "bit_set_register",
                    "10": "set_bit",
                    "2": "set_bit8"
                },
                "FUN_000016ec": {
                    "1": "bit_clear_register",
                    "11": "clear_bit",
                    "2": "clear_bit8"
                },
                "param_1": {
                    "1": "first_parameter",
                    "2": "param_1",
                    "4": "param1"
                },
                "param_2": {
                    "4": "param2",
                    "1": "second_parameter",
                    "2": "arg2"
                },
                "DAT_40064008": {
                    "3": "data",
                    "1": "peripheral_data"
                },
                "DAT_40064001": {
                    "1": "bit_field1"
                },
                "DAT_40064000": {
                    "1": "bit_clear_mask"
                },
                "bit_set8": {
                    "3": "set_bit8"
                },
                "bit_clear8": {
                    "3": "clear_bit8"
                },
                "BITMASK": {
                    "1": "0xd0"
                }
            }
        },
        "FUN_000018bc": {
            "entrypoint": "0x000018bc",
            "current_name": "initialize_system_000018bc",
            "code": "\nvoid initialize_system_000018bc(void)\n\n{\n  set_fll_factor(0xa0);\n  DAT_40064000 = DAT_40064000 bitwise_and 0x3b | 4;\n  clear_bit8(bitwise_andDAT_40064001,1);\n  do {\n  } while ((DAT_40064006 bitwise_and 0x10) equals 0);\n  do {\n  } while ((DAT_40064006 bitwise_and 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000018bc": "initialize_system_000018bc",
                "kinetis_mcg_set_fll_factor": "set_fll_factor",
                "bit_clear8": "clear_bit8",
                "&": "bitwise_and",
                "==": "equals"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000018bc": {
                    "1": "initialize_mcu",
                    "2": "initialize_fll",
                    "23": "initialize_system"
                },
                "FUN_00001748": {
                    "9": "clear_bit",
                    "1": "clear_bit_in_register",
                    "12": "set_fll_factor"
                },
                "FUN_00001710": {
                    "2": "bit_clear8",
                    "1": "set_bit_delay",
                    "6": "clear_bit",
                    "8": "set_fll_factor"
                },
                "param_1": {
                    "1": "byte_param",
                    "4": "byte_value",
                    "3": "input_byte",
                    "2": "factor"
                },
                "param_2": {
                    "4": "flag",
                    "1": "undefined_parameter",
                    "3": "unused_param"
                },
                "DAT_40064000": {
                    "1": "register_a",
                    "2": "register_value"
                },
                "DAT_40064001": {
                    "2": "register_2",
                    "1": "register2"
                },
                "DAT_40064006": {
                    "1": "status_register",
                    "2": "register_3"
                },
                "DAT_1fff0b74": {
                    "1": "variable1",
                    "4": "counter",
                    "2": "register_4"
                },
                "byte param_1": {
                    "1": "status"
                },
                "undefined4 param_1": {
                    "1": "param_1"
                },
                "undefined param_2": {
                    "1": "param_2"
                },
                "kinetis_mcg_set_fll_factor": {
                    "1": "set_clock_fll_factor",
                    "2": "set_fll_factor"
                },
                "bit_clear8": {
                    "3": "clear_bit8"
                },
                "byte DAT_40064001": {
                    "1": "register_value"
                },
                "byte DAT_40064006": {
                    "1": "control_register"
                },
                "initializeMCU": {
                    "1": "clear_bit8"
                },
                "initializeClock": {
                    "1": "initialize_clock"
                },
                "setFLLFactor": {
                    "1": "set_fll_factor"
                },
                "bitClear8": {
                    "1": "void"
                },
                "inputByte": {
                    "1": "byte"
                },
                "inputValue": {
                    "1": "input_value"
                },
                "new_variable_name_1": {
                    "1": "flag"
                },
                "new_variable_name_2": {
                    "1": "wait_counter"
                },
                "0xa0": {
                    "2": "fll_factor_value"
                },
                "0x3b": {
                    "1": "mask_value"
                },
                "0x10": {
                    "1": "mask1_value"
                },
                "0xc": {
                    "1": "flag_mask_2"
                },
                "4": {
                    "1": "set_value"
                },
                "1": {
                    "1": "bit_position"
                },
                "&": {
                    "1": "bitwise_and"
                },
                "|": {
                    "1": "bitwise_or"
                },
                "==": {
                    "1": "equals"
                },
                "0": {
                    "1": "zero_value"
                },
                "byte_input": {
                    "1": "value"
                },
                "initialize_system": {
                    "1": "initialize_system"
                },
                "set_fll_factor": {
                    "1": "set_fll_factor"
                },
                "bit_clear": {
                    "1": "bit_clear"
                },
                "value": {
                    "1": "value"
                },
                "initializeSystem": {
                    "1": "void"
                }
            }
        },
        "FUN_0000191c": {
            "entrypoint": "0x0000191c",
            "current_name": "initialize_system_0000191c",
            "code": "\nvoid initialize_system_0000191c(void)\n\n{\n  enable_oscillator();\n  set_fll_factor(0x40);\n  DAT_40064000 = DAT_40064000 & 0x3b;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000191c": "initialize_system_0000191c",
                "kinetis_mcg_enable_osc": "enable_oscillator",
                "kinetis_mcg_set_fll_factor": "set_fll_factor"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001748",
                "FUN_00001778"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000191c": {
                    "1": "initialize_microcontroller",
                    "2": "initialize_system_clock",
                    "21": "initialize_system"
                },
                "FUN_00001748": {
                    "3": "configure_oscillator",
                    "1": "configure_mcg",
                    "2": "configure_clock",
                    "13": "set_fll_factor"
                },
                "FUN_00001778": {
                    "1": "perform_initialization",
                    "10": "wait_for_condition",
                    "3": "wait_for_completion",
                    "6": "wait_until_condition_met",
                    "2": "wait_completion"
                },
                "param_1": {
                    "4": "data",
                    "2": "unused_parameter",
                    "1": "byte_parameter",
                    "9": "byte_value",
                    "3": "byte_param"
                },
                "fun_00001748": {
                    "1": "configure_oscillator"
                },
                "fun_00001778": {
                    "1": "wait_until_condition_met"
                },
                "DAT_40064000": {
                    "1": "system_flags",
                    "2": "oscillator_setting"
                },
                "DAT_40064006": {
                    "1": "mcg_status_register",
                    "4": "status_register",
                    "2": "status_flags"
                },
                "DAT_1fff0b74": {
                    "8": "flag",
                    "1": "status_register"
                },
                "kinetis_mcg_enable_osc": {
                    "1": "enable_oscillator"
                },
                "kinetis_mcg_set_fll_factor": {
                    "1": "set_fll_factor"
                },
                "data": {
                    "1": "system_configuration"
                }
            }
        },
        "FUN_00001960": {
            "entrypoint": "0x00001960",
            "current_name": "initialize_system_00001960",
            "code": "\nvoid initialize_system_00001960(void)\n\n{\n  set_fll_factor(0xa0);\n  clear_bit(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x44;\n  do {\n  } while ((DAT_40064006 & 0xc) != 4);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  DAT_1fff0b74 = 2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001960": "initialize_system_00001960",
                "kinetis_mcg_set_fll_factor": "set_fll_factor",
                "bit_clear8": "clear_bit"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001960": {
                    "28": "initialize_system",
                    "2": "initialize_hardware",
                    "1": "configure_system"
                },
                "FUN_00001710": {
                    "1": "set_fll_parameters",
                    "3": "configure_clock",
                    "11": "set_fll_factor"
                },
                "FUN_00001748": {
                    "1": "clear_interrupt_flag",
                    "17": "clear_bit"
                },
                "param_1": {
                    "1": "byte_param",
                    "2": "undefined4",
                    "10": "param1"
                },
                "param_2": {
                    "1": "undefined_parameter",
                    "9": "param2",
                    "3": "undefined",
                    "2": "undefined_param2"
                },
                "byte": {
                    "1": "byte_param",
                    "2": "bit_value"
                },
                "kinetis_mcg_set_fll_factor": {
                    "3": "set_fll_factor"
                },
                "bit_clear8": {
                    "1": "clear_bit8",
                    "2": "clear_bit"
                },
                "initializeSystem": {
                    "1": "initialize_system"
                },
                "byteParam": {
                    "1": "byte_param"
                },
                "undefinedParam1": {
                    "1": "undefined_param1"
                },
                "undefinedParam2": {
                    "1": "undefined_param2"
                },
                "byte param_1": {
                    "1": "byte_param"
                },
                "0xa0": {
                    "1": "fll_factor"
                },
                "&DAT_40064001": {
                    "1": "bit_address"
                },
                "0x3b": {
                    "1": "mask1"
                },
                "0x44": {
                    "1": "mask2"
                },
                "&DAT_40064006": {
                    "1": "status_address"
                },
                "4": {
                    "1": "status_mask1"
                },
                "0x10": {
                    "1": "status_mask2"
                },
                "2": {
                    "1": "new_value"
                },
                "DAT_40064001": {
                    "2": "register1",
                    "1": "status_register",
                    "3": "flag_register"
                },
                "DAT_40064000": {
                    "1": "register_value",
                    "4": "data_register",
                    "2": "register2"
                },
                "DAT_40064006": {
                    "1": "condition_register",
                    "2": "register3",
                    "3": "status_register"
                },
                "DAT_1fff0b74": {
                    "1": "register_4",
                    "2": "result"
                },
                "undefined4 param_1": {
                    "1": "initialization_flags"
                },
                "undefined param_2": {
                    "1": "unused_parameter"
                },
                "void FUN_00001710": {
                    "1": "configure_clock"
                },
                "void FUN_00001748": {
                    "1": "clear_bit"
                },
                "setFLLFactor": {
                    "1": "set_fll_factor(0xa0)"
                }
            }
        },
        "FUN_000019c0": {
            "entrypoint": "0x000019c0",
            "current_name": "initialize_system_000019c0",
            "code": "\nvoid initialize_system_000019c0(void)\n\n{\n  enable_oscillator();\n  set_fll_factor(0x40);\n  clear_bit8(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  disable_pll();\n  DAT_1fff0b74 = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000019c0": "initialize_system_000019c0",
                "kinetis_mcg_enable_osc": "enable_oscillator",
                "kinetis_mcg_set_fll_factor": "set_fll_factor",
                "bit_clear8": "clear_bit8",
                "kinetis_mcg_disable_pll": "disable_pll"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001748",
                "FUN_00001778",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000019c0": {
                    "1": "initialize_and_configure_clock",
                    "20": "initialize_system",
                    "2": "configure_clock"
                },
                "FUN_00001710": {
                    "1": "undefined_function_1",
                    "4": "set_fll_factor",
                    "5": "configure_oscillator",
                    "2": "configure_clock"
                },
                "FUN_00001748": {
                    "1": "configure_gpio",
                    "9": "clear_bit",
                    "2": "process_byte",
                    "5": "set_fll_factor"
                },
                "FUN_00001778": {
                    "1": "perform_operation",
                    "6": "wait_for_condition",
                    "3": "wait",
                    "2": "wait_condition"
                },
                "FUN_00001734": {
                    "14": "disable_pll",
                    "1": "disable"
                },
                "kinetis_mcg_enable_osc": {
                    "3": "enable_main_oscillator",
                    "5": "enable_oscillator",
                    "2": "enable_system_oscillator"
                },
                "kinetis_mcg_set_fll_factor": {
                    "10": "set_fll_factor"
                },
                "bit_clear8": {
                    "3": "clear_bit_8",
                    "4": "clear_bit8"
                },
                "param_1": {
                    "1": "config_param",
                    "2": "undefined_param1",
                    "4": "undefined_param_1",
                    "3": "undefined_1"
                },
                "param_2": {
                    "1": "param_2",
                    "3": "undefined_2",
                    "5": "undefined_param_2",
                    "2": "unused_param"
                },
                "byte": {
                    "1": "param_byte_1",
                    "6": "param_byte"
                },
                "DAT_40064001": {
                    "1": "temp_var1",
                    "2": "data_40064001"
                },
                "DAT_40064000": {
                    "1": "variable_2",
                    "2": "control_register"
                },
                "DAT_40064006": {
                    "1": "device_register2",
                    "2": "data_40064006",
                    "3": "status_register"
                },
                "kinetis_mcg_disable_pll": {
                    "7": "disable_pll"
                },
                "DAT_1fff0b74": {
                    "1": "reg4",
                    "2": "data_1fff0b74"
                },
                "initialize_system": {
                    "1": "initialize_system"
                },
                "enable_oscillator": {
                    "1": "enable_oscillator"
                },
                "set_fll_factor": {
                    "1": "set_fll_factor"
                },
                "clear_bit8": {
                    "1": "clear_bit8"
                },
                "disable_pll": {
                    "1": "disable_pll"
                },
                "byte_param_1": {
                    "1": "param_1"
                },
                "initialize_and_configure_clock": {
                    "1": "initialize_and_configure_clock"
                },
                "undefined_param_1": {
                    "1": "undefined_param_1"
                },
                "undefined_param_2": {
                    "1": "undefined_param_2"
                },
                "undefined": {
                    "1": "undefined"
                },
                "undefined_param1": {
                    "1": "new_undefined_param1"
                },
                "param_3": {
                    "1": "byte_param"
                },
                "iVar1": {
                    "1": "temp"
                }
            }
        },
        "FUN_00001a18": {
            "entrypoint": "0x00001a18",
            "current_name": "initialize_system_00001a18",
            "code": "\nvoid initialize_system_00001a18(void)\n\n{\n  bit_set8(&DAT_40064001,1);\n  kinetis_mcg_disable_pll();\n  DAT_1fff0b74 = 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a18": "initialize_system_00001a18"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001a18": {
                    "4": "enable_pll",
                    "1": "enable_pll_and_set_frequency",
                    "8": "initialize_system",
                    "2": "configure_clock"
                },
                "FUN_000016ec": {
                    "1": "configure_peripheral",
                    "12": "set_bit",
                    "2": "bit_set8"
                },
                "FUN_00001734": {
                    "2": "disable_mcg",
                    "1": "function_without_parameters",
                    "15": "disable_pll"
                },
                "param_1": {
                    "1": "first_param",
                    "4": "param1",
                    "2": "param_1"
                },
                "param_2": {
                    "1": "unused2",
                    "4": "undefined_param",
                    "2": "param_2"
                },
                "DAT_40064001": {
                    "1": "pll_register"
                },
                "DAT_1fff0b74": {
                    "1": "config_value"
                }
            }
        },
        "FUN_00001a3c": {
            "entrypoint": "0x00001a3c",
            "current_name": "initialize_system_00001a3c",
            "code": "\nvoid initialize_system_00001a3c(void)\n\n{\n  set_bit_to_1(&DAT_40064001,1);\n  disable_pll();\n  DAT_1fff0b74 = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a3c": "initialize_system_00001a3c",
                "bit_set8": "set_bit_to_1",
                "kinetis_mcg_disable_pll": "disable_pll"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001a3c": {
                    "1": "set_pll_disable_kinetis_mcg",
                    "4": "set_pll_disable",
                    "12": "initialize_system",
                    "2": "set_pll_disable_mcg"
                },
                "FUN_000016ec": {
                    "14": "set_bit",
                    "1": "param_function",
                    "3": "set_bit8",
                    "5": "set_flag"
                },
                "FUN_00001734": {
                    "1": "disable_clock",
                    "19": "disable_pll",
                    "2": "disable_mcg_pll"
                },
                "param_1": {
                    "1": "first_param",
                    "2": "unused_param",
                    "6": "param1"
                },
                "param_2": {
                    "1": "other_parameter",
                    "6": "param2",
                    "2": "unused_param"
                },
                "bit_set8": {
                    "1": "set_bit_to_1"
                },
                "kinetis_mcg_disable_pll": {
                    "1": "disable_pll"
                },
                "DAT_40064001": {
                    "1": "flag_bit"
                },
                "DAT_1fff0b74": {
                    "1": "constant_value"
                }
            }
        },
        "FUN_00001a60": {
            "entrypoint": "0x00001a60",
            "current_name": "initialize_device_00001a60",
            "code": "\nvoid initialize_device_00001a60(void)\n\n{\n  bit_clear8(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  bit_set8(&DAT_40064005,6);\n  do {\n  } while ((DAT_40064006 & 0x20) == 0);\n  do {\n  } while ((DAT_40064006 & 0x40) == 0);\n  DAT_1fff0b74 = 6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a60": "initialize_device_00001a60"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001710",
                "FUN_000016ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001a60": {
                    "1": "perform_initialization",
                    "6": "initialize_hardware",
                    "2": "clear_flags_and_set_mode",
                    "10": "initialize_device",
                    "3": "initialize_communication"
                },
                "FUN_00001710": {
                    "1": "clear_interrupt_flag",
                    "11": "clear_bit",
                    "4": "clear_bit8",
                    "2": "set_bit_to_zero"
                },
                "FUN_000016ec": {
                    "1": "wait_for_bit_set",
                    "12": "set_bit",
                    "4": "set_bit8",
                    "2": "set_bit_to_one"
                },
                "param_1": {
                    "1": "config_param",
                    "2": "data",
                    "11": "param1"
                },
                "param_2": {
                    "11": "param2",
                    "1": "arg2"
                },
                "DAT_40064001": {
                    "1": "status_register",
                    "2": "config_register"
                },
                "DAT_40064000": {
                    "1": "device_status_register",
                    "4": "control_register"
                },
                "DAT_40064006": {
                    "1": "flags_register6",
                    "4": "status_register"
                },
                "DAT_40064005": {
                    "1": "device_control",
                    "2": "flag_register"
                },
                "DAT_1fff0b74": {
                    "1": "register_a",
                    "2": "return_value",
                    "5": "counter"
                },
                "BIT_40064001": {
                    "1": "device_control_register"
                },
                "BIT_40064005": {
                    "1": "device_status_register"
                },
                "BIT_40064006": {
                    "1": "device_status_flags"
                },
                "BIT_1fff0b74": {
                    "1": "interrupt_flag"
                }
            }
        },
        "FUN_00001ad4": {
            "entrypoint": "0x00001ad4",
            "current_name": "initialize_data_00001ad4",
            "code": "\nvoid initialize_data_00001ad4(void)\n\n{\n  DAT_40064000 = DAT_40064000 & 0x3f;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0xc);\n  DAT_1fff0b74 = 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ad4": "initialize_data_00001ad4"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001ad4": {
                    "1": "initialize_variable",
                    "2": "update_data",
                    "15": "initialize_data"
                },
                "DAT_40064000": {
                    "1": "input_data",
                    "3": "data_flags",
                    "2": "config_flags",
                    "5": "flags",
                    "10": "data_flag"
                },
                "DAT_40064006": {
                    "2": "status_flags",
                    "1": "check_flags",
                    "7": "control_flag",
                    "4": "control",
                    "3": "status"
                },
                "DAT_1fff0b74": {
                    "1": "flag_value",
                    "3": "count",
                    "14": "counter",
                    "2": "result"
                }
            }
        },
        "FUN_00001b10": {
            "entrypoint": "0x00001b10",
            "current_name": "set_mcg_mode_00001b10",
            "code": "\nundefined4 set_mcg_mode_00001b10(byte mode)\n\n{\n  undefined4 result;\n  \n  if (mode < 8) {\n    do {\n      switch((&DAT_00007004)[(uint)mode + (uint)DAT_1fff0b74 * 8]) {\n      case 0:\n        set_fei_clock_mode();\n        break;\n      case 1:\n        set_fee_clock_mode();\n        break;\n      case 2:\n        set_fbi_clock_mode();\n        break;\n      case 3:\n        set_fbe_clock_mode();\n        break;\n      case 4:\n        set_blpi_clock_mode();\n        break;\n      case 5:\n        set_blpe_clock_mode();\n        break;\n      case 6:\n        set_pbe_clock_mode();\n        break;\n      case 7:\n        set_pee_clock_mode();\n        break;\n      default:\n        return 0xffffffff;\n      }\n    } while (mode != DAT_1fff0b74);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00001b10": "set_mcg_mode_00001b10",
                "param_1": "mode",
                "uVar1": "result",
                "kinetis_mcg_set_fei": "set_fei_clock_mode",
                "kinetis_mcg_set_fee": "set_fee_clock_mode",
                "kinetis_mcg_set_fbi": "set_fbi_clock_mode",
                "kinetis_mcg_set_fbe": "set_fbe_clock_mode",
                "kinetis_mcg_set_blpi": "set_blpi_clock_mode",
                "kinetis_mcg_set_blpe": "set_blpe_clock_mode",
                "kinetis_mcg_set_pbe": "set_pbe_clock_mode",
                "kinetis_mcg_set_pee": "set_pee_clock_mode"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001ad4",
                "FUN_000019c0",
                "FUN_000018bc",
                "FUN_00001a60",
                "FUN_00001960",
                "FUN_00001a3c",
                "FUN_0000191c",
                "FUN_00001a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001b10": {
                    "1": "configure_clock_mode",
                    "21": "set_mcg_mode",
                    "3": "configure_mcg_mode"
                },
                "param_1": {
                    "1": "config_index",
                    "28": "mode"
                },
                "uVar1": {
                    "29": "result",
                    "2": "return_value"
                },
                "kinetis_mcg_set_fei": {
                    "1": "set_fei_clock_mode"
                },
                "kinetis_mcg_set_fee": {
                    "1": "set_fee_clock_mode"
                },
                "kinetis_mcg_set_fbi": {
                    "1": "set_fbi_clock_mode"
                },
                "kinetis_mcg_set_fbe": {
                    "1": "set_fbe_mode"
                },
                "kinetis_mcg_set_blpi": {
                    "1": "set_blpi_mode"
                },
                "kinetis_mcg_set_blpe": {
                    "1": "set_blpe_clock_mode"
                },
                "kinetis_mcg_set_pbe": {
                    "1": "set_pbe_clock_mode"
                },
                "kinetis_mcg_set_pee": {
                    "1": "set_pee_mode"
                },
                "DAT_00007004": {
                    "1": "mode_mapping"
                },
                "DAT_1fff0b74": {
                    "1": "max_mode"
                }
            }
        },
        "FUN_00001bb8": {
            "entrypoint": "0x00001bb8",
            "current_name": "initialize_system_00001bb8",
            "code": "\nvoid initialize_system_00001bb8(void)\n\n{\n  if ((DAT_40064001 & 2) != 0) {\n    clear_bit(&DAT_40064001,1);\n  }\n  if ((DAT_40064005 & 0x40) != 0) {\n    if ((DAT_40064000 & 0xc0) == 0) {\n      DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n      do {\n      } while ((DAT_40064006 & 0xc) != 8);\n    }\n    clear_bit(&DAT_40064005,6);\n    do {\n    } while ((DAT_40064006 & 0x20) != 0);\n  }\n  set_fll_factor(0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001bb8": "initialize_system_00001bb8",
                "kinetis_mcg_set_fll_factor": "set_fll_factor",
                "bit_clear8": "clear_bit"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001bb8": {
                    "29": "initialize_system",
                    "1": "reset_system"
                },
                "FUN_00001710": {
                    "2": "configure_peripheral",
                    "1": "initialize_sub_function",
                    "6": "set_fll_factor"
                },
                "FUN_00001748": {
                    "1": "process_byte",
                    "15": "clear_bit",
                    "6": "clear_flag",
                    "4": "clear_interrupt_flag"
                },
                "param_1": {
                    "1": "config_param",
                    "2": "undefined4",
                    "16": "param1"
                },
                "param_2": {
                    "1": "bit_mask",
                    "16": "param2",
                    "2": "undefined"
                },
                "DAT_40064001": {
                    "1": "config_register1",
                    "7": "register1",
                    "3": "flag1",
                    "2": "status_register"
                },
                "DAT_40064000": {
                    "1": "register2",
                    "2": "control_register",
                    "6": "register3"
                },
                "DAT_40064005": {
                    "1": "flags_reg2",
                    "2": "control_register",
                    "6": "register2",
                    "3": "flag2"
                },
                "DAT_40064006": {
                    "1": "data_register4",
                    "7": "register4",
                    "4": "status_register",
                    "2": "register2"
                },
                "DAT_1fff0b74": {
                    "1": "memory_register",
                    "2": "result",
                    "6": "register5"
                },
                "kinetis_mcg_set_fll_factor": {
                    "6": "set_fll_factor"
                },
                "byte": {
                    "1": "param_byte"
                },
                "bit_clear8": {
                    "2": "clear_bit"
                }
            }
        },
        "FUN_00001c84": {
            "entrypoint": "0x00001c84",
            "current_name": "initialize_system_00001c84",
            "code": "\n\n\nvoid initialize_system_00001c84(void)\n\n{\n  undefined4 irq_flags;\n  \n  irq_flags = disable_interrupts();\n  set_safe_mode();\n  _DAT_40048044 = 0x220000;\n  DAT_4006400c = 0;\n  DAT_40064000 = DAT_40064000 & 199 | 0x38;\n  DAT_40064004 = 0x13;\n  DAT_40064005 = 0;\n  initialize_mcgirclk();\n  initialize_erclk32_k();\n  set_mode(7);\n  restore_interrupts(irq_flags);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001c84": "initialize_system_00001c84",
                "uVar1": "irq_flags",
                "kinetis_mcg_set_safe_mode": "set_safe_mode",
                "kinetis_mcg_init_mcgirclk": "initialize_mcgirclk",
                "kinetis_mcg_init_erclk32k": "initialize_erclk32_k",
                "kinetis_mcg_set_mode": "set_mode",
                "irq_restore": "restore_interrupts",
                "irq_disable": "disable_interrupts"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_0000182c",
                "FUN_00000d0c",
                "FUN_00000cd0",
                "FUN_00001b10",
                "FUN_00001bb8",
                "FUN_000017dc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001c84": {
                    "1": "configure_system",
                    "2": "initialize_microcontroller",
                    "25": "initialize_system"
                },
                "uVar1": {
                    "2": "irq_status",
                    "1": "interrupt_status",
                    "3": "irq_state",
                    "5": "irq_flags"
                },
                "FUN_0000182c": {
                    "1": "function1",
                    "15": "disable_interrupts",
                    "5": "disable_irq"
                },
                "FUN_00000d0c": {
                    "1": "set_mcg_irc",
                    "2": "initialize_mcg",
                    "3": "kinetis_mcg_set_safe_mode",
                    "12": "set_safe_mode"
                },
                "FUN_00000cd0": {
                    "1": "disable_interrupts_and_return_status",
                    "2": "initialize_clock",
                    "6": "initialize_mcgirclk"
                },
                "FUN_00001b10": {
                    "2": "kinetis_mcg_init_erclk32k",
                    "1": "function4",
                    "4": "initialize_erclk32_k"
                },
                "FUN_00001bb8": {
                    "7": "set_mode",
                    "1": "initialize_mcgir_clock",
                    "2": "set_safe_mode"
                },
                "FUN_000017dc": {
                    "3": "restore_irq",
                    "1": "set_safe_mode",
                    "7": "restore_interrupts",
                    "2": "initialize_erclk32_k"
                },
                "kinetis_mcg_set_safe_mode": {
                    "10": "set_safe_mode"
                },
                "_DAT_40048044": {
                    "1": "register_a",
                    "4": "register1"
                },
                "DAT_4006400c": {
                    "1": "some_data",
                    "4": "variable1",
                    "3": "register2"
                },
                "DAT_40064000": {
                    "1": "register_b",
                    "3": "register3",
                    "4": "variable2"
                },
                "DAT_40064004": {
                    "3": "register4",
                    "1": "reg3"
                },
                "DAT_40064005": {
                    "3": "variable4",
                    "1": "extra_data"
                },
                "kinetis_mcg_init_mcgirclk": {
                    "7": "initialize_mcgirclk",
                    "1": "init_internal_clock"
                },
                "kinetis_mcg_init_erclk32k": {
                    "1": "init_erclk32_k",
                    "7": "initialize_erclk32_k"
                },
                "kinetis_mcg_set_mode": {
                    "10": "set_mode"
                },
                "irq_restore": {
                    "2": "restore_irq",
                    "7": "restore_interrupts"
                },
                "param_1": {
                    "1": "byte_param"
                },
                "irq_disable": {
                    "7": "disable_interrupts"
                }
            }
        },
        "FUN_00001cf0": {
            "entrypoint": "0x00001cf0",
            "current_name": "check_and_yield_00001cf0",
            "code": "\nvoid check_and_yield_00001cf0(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    yield_higher();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001cf0": "check_and_yield_00001cf0",
                "thread_yield_higher": "yield_higher"
            },
            "calling": [
                "FUN_00002028"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001cf0": {
                    "1": "check_and_yield_if_non_zero",
                    "3": "check_and_yield_thread",
                    "19": "check_and_yield",
                    "2": "yield_if_not_zero"
                },
                "FUN_0000093c": {
                    "1": "execute_miscellaneous_tasks",
                    "2": "perform_task",
                    "3": "do_something",
                    "6": "perform_cleanup"
                },
                "thread_yield_higher": {
                    "1": "yield_to_higher_priority_thread",
                    "2": "yield_higher"
                },
                "DAT_1fff0354": {
                    "1": "data_variable"
                }
            }
        },
        "FUN_00001d08": {
            "entrypoint": "0x00001d08",
            "current_name": "calculate_offset_00001d08",
            "code": "\nint calculate_offset_00001d08(uint input_value,int multiplier)\n\n{\n  return multiplier * 4 + (input_value & 0xf0000000 | (input_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001d08": "calculate_offset_00001d08",
                "param_1": "input_value",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001d3a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001d08": {
                    "2": "calculate_value",
                    "19": "calculate_offset",
                    "1": "calculate_updated_value",
                    "5": "calculate_result"
                },
                "param_1": {
                    "2": "value",
                    "1": "input_param",
                    "14": "input_value",
                    "4": "base_address"
                },
                "param_2": {
                    "1": "index",
                    "25": "multiplier"
                },
                "param_1 & 0xf0000000 | (param_1 & 0xfffff) << 5": {
                    "1": "modified_input"
                },
                "0x2000000": {
                    "2": "constant_offset",
                    "1": "constant"
                },
                "param_3": {
                    "1": "constant_value",
                    "2": "result"
                },
                "param_4": {
                    "1": "shifted_value"
                },
                "param_5": {
                    "1": "shifted_value"
                },
                "param_6": {
                    "1": "constant"
                },
                "param_7": {
                    "1": "offset"
                },
                "param_1 & 0xf0000000": {
                    "1": "high_bits"
                },
                "param_1 & 0xfffff": {
                    "1": "low_bits"
                },
                "multiplier * 4": {
                    "1": "product"
                },
                "high_bits | (low_bits << 5)": {
                    "1": "combined_bits"
                }
            }
        },
        "FUN_00001d3a": {
            "entrypoint": "0x00001d3a",
            "current_name": "set_bit_to1_00001d3a",
            "code": "\nvoid set_bit_to1_00001d3a(undefined4 address,undefined bit_position)\n\n{\n  undefined4 *bit_address;\n  \n  bit_address = (undefined4 *)bitband_addr(address,bit_position);\n  *bit_address = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001d3a": "set_bit_to1_00001d3a",
                "param_1": "address",
                "param_2": "bit_position",
                "puVar1": "bit_address"
            },
            "calling": [
                "FUN_00001ddc"
            ],
            "called": [
                "FUN_00001d08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001d3a": {
                    "6": "set_bit_to_one",
                    "1": "set_bit_in_param",
                    "2": "set_bit_in_memory",
                    "9": "set_bit_to1"
                },
                "param_1": {
                    "18": "address",
                    "3": "memory_address",
                    "2": "addr",
                    "1": "input_pointer"
                },
                "param_2": {
                    "2": "bit_number",
                    "20": "bit_position",
                    "7": "bit_index",
                    "1": "bit"
                },
                "puVar1": {
                    "3": "bit_ptr",
                    "17": "bit_address",
                    "1": "bit_addr"
                }
            }
        },
        "FUN_00001d5e": {
            "entrypoint": "0x00001d5e",
            "current_name": "apply_mask_00001d5e",
            "code": "\nuint apply_mask_00001d5e(ushort input_value)\n\n{\n  return input_value & 0x7000 | 0x40048000;\n}\n\n",
            "renaming": {
                "FUN_00001d5e": "apply_mask_00001d5e",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001f80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001d5e": {
                    "1": "apply_flags_and_offset",
                    "9": "apply_mask",
                    "2": "extract_bits"
                },
                "param_1": {
                    "2": "flags",
                    "1": "input_param",
                    "20": "input_value"
                },
                "0x7000": {
                    "1": "mask"
                },
                "0x40048000": {
                    "1": "base_value"
                }
            }
        },
        "FUN_00001d80": {
            "entrypoint": "0x00001d80",
            "current_name": "apply_bitmask_00001d80",
            "code": "\nuint apply_bitmask_00001d80(ushort input_value)\n\n{\n  return input_value & 0x1c0 | 0x400ff000;\n}\n\n",
            "renaming": {
                "FUN_00001d80": "apply_bitmask_00001d80",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001ff6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001d80": {
                    "1": "combine_param_with_mask",
                    "3": "apply_bitmask",
                    "2": "get_modified_value"
                },
                "param_1": {
                    "3": "input",
                    "1": "input_data",
                    "18": "input_value"
                },
                "param_2": {
                    "1": "unused_parameter"
                },
                "param_n": {
                    "1": "unused_parameter"
                },
                "var_1": {
                    "1": "logical_and_result"
                },
                "var_2": {
                    "1": "address_offset"
                },
                "0x1c0": {
                    "2": "bit_mask",
                    "1": "flag_mask"
                },
                "0x400ff000": {
                    "1": "constant"
                }
            }
        },
        "FUN_00001da2": {
            "entrypoint": "0x00001da2",
            "current_name": "extract_bits_00001da2",
            "code": "\nushort extract_bits_00001da2(ushort input_value)\n\n{\n  bit_pattern input_value >> 6 bitwise_and 7;\n}\n\n",
            "renaming": {
                "FUN_00001da2": "extract_bits_00001da2",
                "param_1": "input_value",
                "&": "bitwise_and",
                "return": "bit_pattern"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001ddc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001da2": {
                    "1": "extract_bits_from_lsb",
                    "2": "get_bits_from_param",
                    "22": "extract_bits"
                },
                "param_1": {
                    "7": "input",
                    "1": "bits_to_extract",
                    "18": "input_value",
                    "2": "output"
                },
                "<<REDUNDANT_VARIABLE>>": {
                    "1": "<<new_variable_name>>"
                },
                "&": {
                    "1": "bitwise_and"
                },
                ">>": {
                    "1": "bitwise_right_shift"
                },
                "6": {
                    "1": "shift_amount"
                },
                "7": {
                    "1": "bitmask"
                },
                "param_2": {
                    "1": "new_param_name_2"
                },
                "param_3": {
                    "1": "bits_extracted"
                },
                "<original_variable_name>": {
                    "1": "bits_extracted"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "param_1 >> 6 & 7": {
                    "1": "extracted_bits"
                },
                "return": {
                    "1": "bit_pattern"
                },
                "param_n": {
                    "1": "new_param_name_n"
                },
                "new_variable_name_1": {
                    "1": "bitmask"
                },
                "new_variable_name_2": {
                    "1": "shifted_value"
                },
                "new_variable_name_n": {
                    "1": "new_var_name_n"
                },
                "return_value": {
                    "1": "result"
                }
            }
        },
        "FUN_00001dc0": {
            "entrypoint": "0x00001dc0",
            "current_name": "extract_lower_bits_00001dc0",
            "code": "\nushort extract_lower_bits_00001dc0(ushort input_value)\n\n{\n  lower_bits input_value & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_00001dc0": "extract_lower_bits_00001dc0",
                "param_1": "input_value",
                "return": "lower_bits"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001f80",
                "FUN_00001ff6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001dc0": {
                    "1": "extract_bits",
                    "6": "extract_least_significant_bits",
                    "2": "extract_lowest6_bits"
                },
                "param_1": {
                    "4": "input",
                    "2": "value",
                    "1": "result",
                    "20": "input_value"
                },
                "return": {
                    "1": "lower_bits"
                },
                "param_n": {
                    "1": "new_parameter_name_n"
                },
                "new_variable_name_1": {
                    "1": "temp"
                },
                "new_variable_name_2": {
                    "1": "result"
                },
                "new_variable_name_n": {
                    "1": "new_variable_name_n"
                },
                "& 0x3f": {
                    "1": "masked_value"
                },
                "0x3f": {
                    "1": "mask"
                },
                "param_2": {
                    "1": "new_param_name"
                }
            }
        },
        "FUN_00001ddc": {
            "entrypoint": "0x00001ddc",
            "current_name": "set_port_bit_00001ddc",
            "code": "\nvoid set_port_bit_00001ddc(undefined2 port_number)\n\n{\n  char port_number;\n  \n  port_number = get_port_number(port_number);\n  set_bit32(&DAT_40048038,port_number + '\\t');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ddc": "set_port_bit_00001ddc",
                "param_1": "port_number",
                "cVar1": "port_number",
                "bit_set32": "set_bit32",
                "port_num": "get_port_number"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001d3a",
                "FUN_00001da2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001ddc": {
                    "1": "update_data",
                    "6": "update_port_number",
                    "2": "update_port_num",
                    "3": "set_bit_in_port_num",
                    "9": "set_port_bit"
                },
                "param_1": {
                    "1": "port_num",
                    "3": "input_port",
                    "2": "input_param",
                    "17": "port_number"
                },
                "cVar1": {
                    "2": "port_char",
                    "5": "result",
                    "3": "port_index",
                    "1": "port_num_result",
                    "6": "port_number"
                },
                "FUN_00001d3a": {
                    "1": "configure_port",
                    "2": "initialize_port"
                },
                "param_2": {
                    "1": "port_config_param",
                    "3": "undefined_param"
                },
                "FUN_00001da2": {
                    "1": "update_param"
                },
                "cVar_1": {
                    "1": "port_number"
                },
                "bit_set32": {
                    "2": "set_bit32"
                },
                "port_num": {
                    "2": "get_port_number"
                },
                "void": {
                    "1": "void"
                }
            }
        },
        "FUN_00001e0c": {
            "entrypoint": "0x00001e0c",
            "current_name": "extract_bits_00001e0c",
            "code": "\nresult extract_bits_00001e0c(offset offset,result data)\n\n{\n  return *(result *)(bitwise_andDAT_1fff0bd8 + (((offset)data >> 3) + offset * 4) * 4) >> ((data bitwise_and 7) << 2)\n         bitwise_and 0xf;\n}\n\n",
            "renaming": {
                "FUN_00001e0c": "extract_bits_00001e0c",
                "param_1": "offset",
                "param_2": "data",
                "&": "bitwise_and",
                "int": "offset",
                "uint": "result"
            },
            "calling": [
                "FUN_00002028",
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001e0c": {
                    "1": "reverse_bits",
                    "2": "extract_bits_from_memory",
                    "21": "extract_bits"
                },
                "param_1": {
                    "2": "byte_offset",
                    "1": "memory_offset",
                    "15": "offset",
                    "7": "index"
                },
                "param_2": {
                    "12": "data",
                    "3": "bit_position",
                    "1": "data_value",
                    "2": "bit_value",
                    "5": "value"
                },
                "param_3": {
                    "1": "result"
                },
                "(*&)(&DAT_1fff0bd8 + (((int)param_2 >> 3) + param_1 * 4) * 4)": {
                    "1": "memory_address"
                },
                "(param_2 & 7)": {
                    "2": "bit_offset"
                },
                "0xf": {
                    "3": "bit_mask"
                },
                "*(uint *)(&DAT_1fff0bd8 + (((int)param_2 >> 3) + param_1 * 4) * 4)": {
                    "1": "result"
                },
                "param_1 * 4": {
                    "1": "byte_offset"
                },
                "param_2 >> 3": {
                    "2": "shifted_data",
                    "1": "byte_index"
                },
                "param_2 & 7": {
                    "7": "bit_offset",
                    "1": "bit_position"
                },
                "&DAT_1fff0bd8": {
                    "3": "data_array",
                    "1": "data_pointer"
                },
                "(byteIndex + byteOffset) * 4": {
                    "1": "relative_offset"
                },
                "(bitOffset << 2)": {
                    "1": "shift_amount"
                },
                ">>": {
                    "1": "right_shift"
                },
                "&": {
                    "1": "bitwise_and"
                },
                "((param_2 & 7) << 2)": {
                    "1": "shift_amount"
                },
                "(param_2 & 7) << 2": {
                    "1": "bit_shift"
                },
                "new_variable_name_1": {
                    "1": "decoded_value"
                },
                "int": {
                    "1": "offset"
                },
                "uint": {
                    "1": "result"
                },
                "DAT_1fff0bd8": {
                    "1": "memory_address"
                },
                "memory_value >> ((param_2 & 7) << 2) & 0xf": {
                    "1": "extracted_bits"
                },
                "(int)param_2 >> 3) + param_1 * 4": {
                    "1": "array_index"
                },
                "param_2 & 7) << 2": {
                    "1": "bit_shift"
                },
                "result >> bit_shift & 0xf": {
                    "1": "extracted_bits"
                },
                "<Intermediary_variable>": {
                    "1": "result"
                }
            }
        },
        "FUN_00001e44": {
            "entrypoint": "0x00001e44",
            "current_name": "update_data_00001e44",
            "code": "\nvoid update_data_00001e44(int index,uint bit_offset,int new_value)\n\n{\n  int byte_offset;\n  \n  byte_offset = (int)bit_offset >> 3;\n  *(uint *)(&DAT_1fff0bd8 + (byte_offset + index * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (byte_offset + index * 4) * 4) & ~(0xf << ((bit_offset & 7) << 2));\n  *(uint *)(&DAT_1fff0bd8 + (byte_offset + index * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (byte_offset + index * 4) * 4) | new_value << ((bit_offset & 7) << 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001e44": "update_data_00001e44",
                "param_1": "index",
                "param_2": "bit_offset",
                "param_3": "new_value",
                "iVar1": "byte_offset"
            },
            "calling": [
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001e44": {
                    "4": "update_data",
                    "1": "update_bit_field_value",
                    "3": "update_value",
                    "2": "update_data_at_offset"
                },
                "param_1": {
                    "1": "data_offset",
                    "2": "array_index",
                    "5": "offset",
                    "16": "index"
                },
                "param_2": {
                    "13": "bit_offset",
                    "8": "bit_position",
                    "4": "bit_index",
                    "2": "position",
                    "3": "offset",
                    "1": "bit_mask"
                },
                "param_3": {
                    "2": "new_data",
                    "7": "value",
                    "20": "new_value"
                },
                "iVar1": {
                    "1": "shift",
                    "9": "byte_offset",
                    "5": "shifted_index",
                    "2": "word_offset"
                },
                "*(uint *)(&DAT_1fff0bd8 + (iVar1 + offset * 4) * 4)": {
                    "1": "data"
                },
                "0xf << ((bitIndex & 7) << 2)": {
                    "1": "mask"
                },
                "param_3 << ((bitIndex & 7) << 2)": {
                    "1": "bits_to_update"
                },
                "*(uint *)(&DAT_1fff0bd8 + (iVar1 + param_1 * 4) * 4)": {
                    "1": "target"
                },
                "(0xf << ((param_2 & 7) << 2))": {
                    "1": "mask"
                },
                "(param_2 & 7)": {
                    "1": "bit_index"
                }
            }
        },
        "FUN_00001ec4": {
            "entrypoint": "0x00001ec4",
            "current_name": "write_context_to_map_00001ec4",
            "code": "\nvoid write_context_to_map_00001ec4(undefined4 ctx_param_1,undefined4 ctx_param_2)\n\n{\n  undefined4 ctx_value;\n  \n  ctx_value = get_context(ctx_param_1,ctx_param_2);\n  write_to_map(ctx_param_1,ctx_param_2,ctx_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ec4": "write_context_to_map_00001ec4",
                "param_1": "ctx_param_1",
                "param_2": "ctx_param_2",
                "uVar1": "ctx_value",
                "get_ctx": "get_context",
                "write_map": "write_to_map"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001e0c",
                "FUN_00001e44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001ec4": {
                    "1": "process_and_write_map",
                    "8": "write_map_to_context",
                    "10": "write_context_to_map",
                    "5": "write_ctx_to_map",
                    "3": "write_map_to_ctx"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "context_param",
                    "4": "ctx_param",
                    "6": "arg1",
                    "8": "ctx_param_1"
                },
                "param_2": {
                    "1": "input_param",
                    "2": "input_param_2",
                    "8": "ctx_param_2",
                    "6": "arg2"
                },
                "uVar1": {
                    "1": "ctx_return_value",
                    "5": "context_value",
                    "8": "ctx_value",
                    "2": "ctx_result",
                    "4": "context"
                },
                "FUN_00001e0c": {
                    "1": "reverse_data"
                },
                "FUN_00001e44": {
                    "2": "write_value_to_map",
                    "1": "write_modified_value"
                },
                "get_ctx": {
                    "1": "retrieve_ctx",
                    "3": "get_context"
                },
                "write_map": {
                    "1": "write_map_to_context",
                    "2": "write_to_map"
                },
                "param_3": {
                    "1": "reverse_param_3"
                }
            }
        },
        "FUN_00001eea": {
            "entrypoint": "0x00001eea",
            "current_name": "initialize_gpio_pin_00001eea",
            "code": "\nundefined4 initialize_gpio_pin_00001eea(undefined2 port,byte pin_state)\n\n{\n  uint pin_number;\n  int gpio_address;\n  int pin_index;\n  \n  initialize_gpio_port(port,0);\n  if ((char)pin_state < '\\0') {\n    pin_number = get_pin_number(port);\n    gpio_address = get_gpio(port);\n    *(uint *)(gpio_address + 0x14) = *(uint *)(gpio_address + 0x14) | 1 << (pin_number & 0xff);\n  }\n  else {\n    pin_number = get_pin_number(port);\n    gpio_address = get_gpio(port);\n    *(uint *)(gpio_address + 0x14) = *(uint *)(gpio_address + 0x14) & ~(1 << (pin_number & 0xff));\n  }\n  gpio_address = get_port(port);\n  pin_index = get_pin_number(port);\n  *(uint *)(gpio_address + pin_index * 4) = pin_state & 0x23 | 0x100;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00001eea": "initialize_gpio_pin_00001eea",
                "param_1": "port",
                "param_2": "pin_state",
                "uVar1": "pin_number",
                "iVar2": "gpio_address",
                "iVar3": "pin_index",
                "pin_num": "get_pin_number",
                "gpio": "get_gpio",
                "port": "get_port",
                "gpio_init_port": "initialize_gpio_port"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001d5e",
                "FUN_00001f80",
                "FUN_00001d80",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001eea": {
                    "2": "set_gpio_pin_state",
                    "1": "configure_gpio_pin",
                    "7": "configure_pin",
                    "4": "set_pin_state"
                },
                "param_1": {
                    "12": "port",
                    "1": "port_param",
                    "4": "port_address",
                    "2": "port_num",
                    "8": "port_number"
                },
                "param_2": {
                    "1": "byte_param",
                    "7": "pin_value",
                    "2": "value",
                    "18": "pin_state"
                },
                "uVar1": {
                    "3": "pin_num",
                    "1": "pin_index",
                    "25": "pin_number"
                },
                "iVar2": {
                    "4": "gpio_ptr",
                    "9": "gpio_address",
                    "1": "gpio_base",
                    "3": "gpio_port",
                    "2": "gpio_register"
                },
                "iVar3": {
                    "1": "port_number",
                    "11": "pin_index",
                    "2": "pin_number2",
                    "5": "pin_offset"
                },
                "pin_num": {
                    "3": "get_pin_number"
                },
                "gpio": {
                    "2": "get_gpio",
                    "1": "get_gpio_address"
                },
                "port": {
                    "1": "get_port_address",
                    "2": "get_port"
                },
                "undefined2 param_1": {
                    "1": "pin_type"
                },
                "byte param_2": {
                    "1": "pin_state"
                },
                "gpio_init_port": {
                    "2": "initialize_gpio_port"
                },
                "configure_pin": {
                    "1": "set_pin_value"
                }
            }
        },
        "FUN_00001f80": {
            "entrypoint": "0x00001f80",
            "current_name": "update_pin_value_00001f80",
            "code": "\nvoid update_pin_value_00001f80(undefined2 pin_config,undefined4 new_value)\n\n{\n  int port_address;\n  int pin_number;\n  undefined4 port_number;\n  undefined4 pin_num;\n  uint old_value;\n  \n  enable_clock(pin_config);\n  port_address = get_port(pin_config);\n  pin_number = get_pin_number(pin_config);\n  old_value = *(uint *)(port_address + pin_number * 4);\n  port_address = get_port(pin_config);\n  pin_number = get_pin_number(pin_config);\n  *(undefined4 *)(port_address + pin_number * 4) = new_value;\n  if ((old_value & 0xf0000) != 0) {\n    port_number = get_port_num(pin_config);\n    pin_num = get_pin_number(pin_config);\n    clear_context(port_number,pin_num);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001f80": "update_pin_value_00001f80",
                "param_1": "pin_config",
                "param_2": "new_value",
                "iVar1": "port_address",
                "iVar2": "pin_number",
                "uVar3": "port_number",
                "uVar4": "pin_num",
                "uVar5": "old_value",
                "clk_en": "enable_clock",
                "port": "get_port",
                "pin_num": "get_pin_number",
                "ctx_clear": "clear_context"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001448"
            ],
            "called": [
                "FUN_00001d5e",
                "FUN_00001ddc",
                "FUN_00001da2",
                "FUN_00001ec4",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001f80": {
                    "1": "update_pin_configuration",
                    "19": "update_pin_value",
                    "2": "update_pin_state",
                    "5": "update_pin"
                },
                "param_1": {
                    "1": "param",
                    "4": "device",
                    "2": "pin_info",
                    "17": "pin_config",
                    "3": "pin"
                },
                "param_2": {
                    "1": "new_data",
                    "21": "new_value",
                    "3": "new_pin_value",
                    "2": "pin_value"
                },
                "iVar1": {
                    "1": "port_num",
                    "19": "port_address"
                },
                "iVar2": {
                    "3": "pin_num",
                    "2": "pin_index",
                    "20": "pin_number"
                },
                "uVar3": {
                    "23": "port_number",
                    "1": "current_port_num",
                    "6": "port_num"
                },
                "uVar4": {
                    "2": "cleared_pin_number",
                    "1": "old_pin_number",
                    "6": "pin_number2",
                    "9": "pin_num"
                },
                "uVar5": {
                    "3": "old_pin_value",
                    "1": "original_value",
                    "2": "pin_value",
                    "8": "old_value",
                    "4": "previous_value",
                    "5": "current_value"
                },
                "clk_en": {
                    "1": "enable_pin_clock",
                    "4": "enable_clock"
                },
                "port": {
                    "1": "get_port_address",
                    "5": "get_port"
                },
                "pin_num": {
                    "4": "get_pin_number",
                    "2": "get_pin_num"
                },
                "ctx_clear": {
                    "5": "clear_context",
                    "1": "clear_ctx"
                },
                "CLK_EN": {
                    "1": "enable_clock"
                },
                "*(undefined4 *)(iVar1 + iVar2 * 4)": {
                    "1": "pin_value_address"
                },
                "FUN_00001d5e": {
                    "1": "get_port_value"
                },
                "FUN_00001ddc": {
                    "1": "disable_clock"
                },
                "FUN_00001da2": {
                    "1": "reverse_bits"
                },
                "FUN_00001ec4": {
                    "1": "set_pin_context"
                },
                "FUN_00001dc0": {
                    "1": "set_port_value"
                }
            }
        },
        "FUN_00001ff6": {
            "entrypoint": "0x00001ff6",
            "current_name": "set_gpio_pin_00001ff6",
            "code": "\nvoid set_gpio_pin_00001ff6(undefined2 pin_number)\n\n{\n  uint mapped_pin;\n  int gpio_address;\n  \n  mapped_pin = pin_num(pin_number);\n  gpio_address = gpio(pin_number);\n  *(int *)(gpio_address + 4) = 1 << (mapped_pin & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ff6": "set_gpio_pin_00001ff6",
                "param_1": "pin_number",
                "uVar1": "mapped_pin",
                "iVar2": "gpio_address"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001d80",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00001ff6": {
                    "1": "set_gpio_pin_state",
                    "4": "set_pin_high",
                    "5": "configure_pin",
                    "2": "set_pin_output"
                },
                "param_1": {
                    "4": "pin_num",
                    "2": "pin",
                    "25": "pin_number"
                },
                "uVar1": {
                    "3": "pin_mask",
                    "4": "pin_number",
                    "1": "derived_pin_number",
                    "2": "pin_num_result"
                },
                "iVar2": {
                    "14": "gpio_address",
                    "2": "gpio_offset",
                    "1": "gpio_addr",
                    "7": "gpio_result"
                }
            }
        },
        "FUN_00002028": {
            "entrypoint": "0x00002028",
            "current_name": "process_data_00002028",
            "code": "\nvoid process_data_00002028(int base_address,undefined4 context)\n\n{\n  int ctx_index;\n  uint flag;\n  uint bit_index;\n  \n  flag = *(uint *)(base_address + 0xa0);\n  for (bit_index = 0; (int)bit_index < 0x20; bit_index = bit_index + 1) {\n    if (((flag & 1 << (bit_index & 0xff)) != 0) &&\n       ((*(uint *)(base_address + bit_index * 4) & 0xf0000) != 0)) {\n      *(int *)(base_address + 0xa0) = 1 << (bit_index & 0xff);\n      ctx_index = get_ctx(context,bit_index);\n      (**(code **)(&DAT_1fff0b78 + ctx_index * 0xc))(*(undefined4 *)(&DAT_1fff0b7c + ctx_index * 0xc));\n    }\n  }\n  check_and_yield();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002028": "process_data_00002028",
                "param_1": "base_address",
                "param_2": "context",
                "iVar1": "ctx_index",
                "uVar2": "flag",
                "local_c": "bit_index",
                "check_and_yield_00001cf0": "check_and_yield"
            },
            "calling": [
                "FUN_000020f4",
                "FUN_000020b8",
                "FUN_00002108",
                "FUN_000020cc",
                "FUN_000020e0"
            ],
            "called": [
                "FUN_00001e0c",
                "FUN_00001cf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002028": {
                    "1": "process_and_execute",
                    "12": "process_data",
                    "8": "process_bits",
                    "2": "process_flags"
                },
                "param_1": {
                    "3": "input",
                    "1": "input_param",
                    "2": "data_offset",
                    "5": "data_ptr",
                    "6": "base_address",
                    "4": "data_address"
                },
                "param_2": {
                    "1": "param",
                    "7": "ctx",
                    "16": "context"
                },
                "iVar1": {
                    "9": "context_index",
                    "10": "ctx_index",
                    "1": "ctx_var",
                    "2": "context",
                    "3": "index"
                },
                "uVar2": {
                    "7": "flag",
                    "1": "bits_value",
                    "3": "bits",
                    "2": "bits_data",
                    "6": "bit_mask"
                },
                "local_c": {
                    "3": "bit_position",
                    "23": "bit_index",
                    "2": "index",
                    "1": "offset"
                },
                "extract_bits_00001e0c": {
                    "1": "extract_bits"
                },
                "check_and_yield_00001cf0": {
                    "1": "check_and_yield"
                }
            }
        },
        "FUN_000020b8": {
            "entrypoint": "0x000020b8",
            "current_name": "disable_irq_handler_000020b8",
            "code": "\nvoid disable_irq_handler_000020b8(void)\n\n{\n  irq_handler(0x40049000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020b8": "disable_irq_handler_000020b8"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000020b8": {
                    "3": "disable_irq",
                    "4": "initialize_irq_handler",
                    "7": "disable_interrupts",
                    "1": "disable_interrupt_handler",
                    "12": "disable_irq_handler"
                },
                "FUN_00002028": {
                    "1": "perform_operation",
                    "2": "handle_interrupt",
                    "6": "irq_handler",
                    "11": "handle_irq"
                },
                "param_1": {
                    "1": "irq_register",
                    "3": "device_address",
                    "2": "irq_address",
                    "9": "irq_number"
                },
                "param_2": {
                    "1": "arg2",
                    "3": "param2",
                    "6": "param",
                    "2": "irq_data"
                },
                "0x40049000": {
                    "1": "device_address",
                    "2": "irq_address"
                },
                "irq_handler": {
                    "1": "disable_irq"
                },
                "PTR_40049000": {
                    "1": "device_address"
                }
            }
        },
        "FUN_000020cc": {
            "entrypoint": "0x000020cc",
            "current_name": "initialize_irq_handler_000020cc",
            "code": "\nvoid initialize_irq_handler_000020cc(void)\n\n{\n  handle_irq(0x4004a000,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020cc": "initialize_irq_handler_000020cc",
                "irq_handler": "handle_irq"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000020cc": {
                    "1": "handle_irq",
                    "23": "initialize_irq_handler",
                    "4": "initialize_irq"
                },
                "FUN_00002028": {
                    "1": "set_irq_handler_params",
                    "2": "process_data",
                    "3": "set_irq_parameters",
                    "10": "handle_irq"
                },
                "param_1": {
                    "2": "irq_type",
                    "1": "arg1",
                    "9": "irq_number"
                },
                "param_2": {
                    "1": "interrupt_data",
                    "4": "irq_flag",
                    "2": "irq_data",
                    "3": "irq_flags"
                },
                "0x4004a000": {
                    "1": "irq_handler_address"
                },
                "irq_handler": {
                    "1": "handle_irq"
                },
                "undefined4 param_2": {
                    "1": "unused_parameter"
                }
            }
        },
        "FUN_000020e0": {
            "entrypoint": "0x000020e0",
            "current_name": "initialize_irq_handler_000020e0",
            "code": "\nvoid initialize_irq_handler_000020e0(void)\n\n{\n  irq_handler(0x4004b000,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020e0": "initialize_irq_handler_000020e0"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000020e0": {
                    "2": "initialize_interrupt",
                    "4": "initialize_interrupt_handler",
                    "23": "initialize_irq_handler",
                    "1": "configure_irq_handler"
                },
                "FUN_00002028": {
                    "4": "handle_interrupt",
                    "1": "set_irq_parameters",
                    "9": "handle_irq"
                },
                "param_1": {
                    "3": "arg1",
                    "2": "irq_handler_param1",
                    "1": "irq_priority",
                    "6": "irq_number"
                },
                "param_2": {
                    "1": "irq_data",
                    "3": "arg2",
                    "2": "irq_priority"
                },
                "0x4004b000": {
                    "1": "irq_address"
                }
            }
        },
        "FUN_000020f4": {
            "entrypoint": "0x000020f4",
            "current_name": "initialize_irq_handler_000020f4",
            "code": "\nvoid initialize_irq_handler_000020f4(void)\n\n{\n  handle_interrupt(0x4004c000,3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020f4": "initialize_irq_handler_000020f4",
                "irq_handler": "handle_interrupt"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000020f4": {
                    "4": "initialize_interrupt_handler",
                    "14": "initialize_irq_handler",
                    "1": "initialize_device",
                    "7": "initialize_irq"
                },
                "param_1": {
                    "1": "irq_base_address",
                    "6": "irq_number",
                    "3": "base_address",
                    "2": "handler_id"
                },
                "param_2": {
                    "1": "irq_data",
                    "2": "param",
                    "4": "irq_number"
                },
                "FUN_00002028": {
                    "1": "configure_irq_handler",
                    "3": "handle_irq",
                    "2": "irq_handler"
                },
                "irq_handler": {
                    "1": "handle_interrupt"
                },
                "IRQHandler": {
                    "1": "irq_handler"
                },
                "DAT_00002024": {
                    "1": "irq_manager"
                },
                "DAT_00002030": {
                    "1": "handler_table"
                }
            }
        },
        "FUN_00002108": {
            "entrypoint": "0x00002108",
            "current_name": "initialize_irq_handler_00002108",
            "code": "\nvoid initialize_irq_handler_00002108(void)\n\n{\n  handle_interrupt(0x4004d000,4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002108": "initialize_irq_handler_00002108",
                "irq_handler": "handle_interrupt"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002108": {
                    "2": "initialize_irq_handlers",
                    "20": "initialize_irq_handler",
                    "1": "initialize_device",
                    "4": "initialize_irq"
                },
                "FUN_00002028": {
                    "1": "subfunction",
                    "3": "process_irq",
                    "2": "set_irq_handler",
                    "12": "handle_irq"
                },
                "param_1": {
                    "1": "irq_base_address",
                    "5": "device_address",
                    "2": "memory_address",
                    "11": "irq_number"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "data",
                    "3": "irq_type",
                    "5": "irq_number",
                    "6": "irq_data"
                },
                "irq_handler": {
                    "2": "handle_interrupt",
                    "1": "handle_irq"
                },
                "0x4004d000": {
                    "1": "interrupt_address"
                }
            }
        },
        "FUN_0000211c": {
            "entrypoint": "0x0000211c",
            "current_name": "print_thread_info_0000211c",
            "code": "\nvoid print_thread_info_0000211c(void)\n\n{\n  int stack_free;\n  undefined2 thread_name;\n  int stack_size;\n  int priority;\n  dword base_address;\n  uint index;\n  undefined4 *thread_info;\n  undefined4 stack_pointer;\n  undefined4 stack_start;\n  int total_stack_usage;\n  short thread_index;\n  int total_stack_usage;\n  int total_stack_size;\n  \n  thread_name = 0x515f;\n  total_stack_size = 0;\n  total_stack_usage = 0;\n  print_formatted_output(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",&DAT_000070b8,\n          \"state\");\n  total_stack_usage = get_isr_stack_usage();\n  stack_start = get_isr_stack_start();\n  stack_pointer = get_isr_stack_pointer();\n  print_formatted_output(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n          total_stack_usage,stack_start,stack_pointer);\n  total_stack_size = total_stack_size + 0x200;\n  if (0 < total_stack_usage) {\n    total_stack_usage = total_stack_usage + total_stack_usage;\n  }\n  for (thread_index = 1; thread_index < 0x21; thread_index = thread_index + 1) {\n    thread_info = *(undefined4 **)(&DAT_1fff0358 + thread_index * 4);\n    if (thread_info != (undefined4 *)0x0) {\n      index = (uint)*(byte *)(thread_info + 1);\n      base_address = (thread_offset)[index];\n      priority = (int)&thread_name + (uint)(8 < index);\n      stack_size = stack_size_origin;\n      total_stack_size = stack_size + total_stack_size;\n      stack_free = measure_stack_free(stack_pointer_origin);\n      stack_size = stack_size - stack_free;\n      total_stack_usage = stack_size + total_stack_usage;\n      print_formatted_output(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n              (int)*(short *)((int)thread_info + 6),thread_name,base_address,priority,\n              *(undefined *)((int)thread_info + 5),stack_size_origin,stack_size,stack_pointer_origin,*thread_info);\n    }\n  }\n  print_formatted_output(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,&DAT_00007190,\n          total_stack_size,total_stack_usage);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000211c": "print_thread_info_0000211c",
                "local_40": "thread_name",
                "local_3c": "stack_size",
                "local_38": "priority",
                "local_34": "base_address",
                "local_30": "index",
                "local_2c": "thread_info",
                "local_28": "stack_pointer",
                "local_24": "stack_start",
                "local_20": "total_stack_usage",
                "local_1a": "thread_index",
                "local_18": "total_stack_usage",
                "local_14": "total_stack_size",
                "iprintf": "print_formatted_output",
                "thread_isr_stack_usage": "get_isr_stack_usage",
                "thread_isr_stack_start": "get_isr_stack_start",
                "thread_isr_stack_pointer": "get_isr_stack_pointer",
                "thread_measure_stack_free": "measure_stack_free",
                "Elf32_Rel_ARRAY_1fff0200": "elf_rel_array",
                "iVar1": "stack_free",
                "&Elf32_Rel_ARRAY_1fff0200": "elf_rel_array",
                "&Elf32_Rel_ARRAY_1fff0200[4].r_offset": "thread_offset",
                "local_2c[10]": "thread_name",
                "local_2c[9]": "stack_pointer_origin",
                "local_2c[0xb]": "stack_size_origin",
                "Elf32_Rel_ARRAY_1fff0200[4].r_offset": "get_relocation_offset(local_30)"
            },
            "calling": [
                "FUN_00000f04",
                "FUN_00002eb4"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_0000091c",
                "FUN_000008b8",
                "FUN_00000900",
                "FUN_000010a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000211c": {
                    "4": "print_thread_stack_info",
                    "1": "print_thread_states",
                    "11": "print_thread_info",
                    "7": "print_thread_information",
                    "3": "print_thread_stack_usage",
                    "2": "print_thread_state"
                },
                "local_40": {
                    "1": "state_name",
                    "15": "thread_name"
                },
                "local_3c": {
                    "1": "thread_stack_size",
                    "13": "stack_size",
                    "11": "stack_usage"
                },
                "local_38": {
                    "1": "current_stack_byte",
                    "2": "isr_priority",
                    "3": "thread_priority",
                    "6": "priority"
                },
                "local_34": {
                    "1": "base_addr",
                    "10": "base_address",
                    "3": "r_offset",
                    "2": "state"
                },
                "local_30": {
                    "1": "stack_number",
                    "5": "thread_state",
                    "4": "thread_priority",
                    "8": "index",
                    "3": "rel_index",
                    "2": "byte_value"
                },
                "local_2c": {
                    "4": "thread",
                    "2": "thread_ptr",
                    "1": "thread_addr",
                    "5": "thread_info"
                },
                "local_28": {
                    "1": "stack_start_address",
                    "2": "stack_ptr",
                    "19": "stack_pointer",
                    "3": "isr_stack_pointer"
                },
                "local_24": {
                    "1": "stack_pointer",
                    "21": "stack_start",
                    "3": "isr_stack_start"
                },
                "local_20": {
                    "11": "total_stack_usage",
                    "6": "total_stack_size",
                    "1": "interrupt_stack_size",
                    "9": "isr_stack_usage",
                    "2": "stack_usage"
                },
                "local_1a": {
                    "24": "thread_index",
                    "1": "loop_index",
                    "2": "thread_count",
                    "3": "thread_id"
                },
                "local_18": {
                    "15": "total_stack_usage",
                    "2": "total_stack_free",
                    "3": "total_usage",
                    "1": "total_stack_usage_including_isr"
                },
                "local_14": {
                    "3": "total_size",
                    "6": "total_stack_size",
                    "1": "thread_usage",
                    "4": "current_stack_usage"
                },
                "iprintf": {
                    "3": "print_formatted_text",
                    "5": "print_formatted_output",
                    "1": "print_format",
                    "4": "print_formatted"
                },
                "thread_isr_stack_usage": {
                    "6": "get_isr_stack_usage",
                    "2": "measure_isr_stack_usage",
                    "1": "get_interrupt_stack_usage"
                },
                "thread_isr_stack_start": {
                    "7": "get_isr_stack_start",
                    "1": "get_thread_isr_stack_start",
                    "2": "get_stack_start"
                },
                "thread_isr_stack_pointer": {
                    "1": "get_interrupt_stack_pointer",
                    "8": "get_isr_stack_pointer",
                    "2": "get_stack_pointer"
                },
                "thread_measure_stack_free": {
                    "8": "measure_stack_free",
                    "1": "get_stack_free_measure"
                },
                "FUN_00004c84": {
                    "3": "sub_function1",
                    "2": "some_function",
                    "1": "print_header"
                },
                "FUN_0000091c": {
                    "3": "sub_function2",
                    "2": "get_some_value",
                    "1": "thread_isr_stack_usage"
                },
                "FUN_000008b8": {
                    "3": "sub_function3",
                    "1": "calculate_something"
                },
                "FUN_00000900": {
                    "1": "get_some_other_value",
                    "3": "sub_function4"
                },
                "FUN_000010a0": {
                    "1": "thread_measure_stack_free",
                    "3": "sub_function5"
                },
                "DAT_000070b8": {
                    "1": "pid_label",
                    "2": "thread_state_label"
                },
                "DAT_00007190": {
                    "1": "some_string"
                },
                "DAT_00007194": {
                    "1": "some_other_string"
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "1": "array2",
                    "2": "elf_rel_array"
                },
                "DAT_1fff0358": {
                    "1": "array1"
                },
                "iVar1": {
                    "7": "stack_free",
                    "1": "measure"
                },
                "&DAT_1fff0358": {
                    "2": "thread_array",
                    "1": "elf_module_array"
                },
                "&Elf32_Rel_ARRAY_1fff0200": {
                    "1": "stack_info"
                },
                "&DAT_000070b8": {
                    "1": "thread_state",
                    "2": "state_header"
                },
                "&DAT_00007190": {
                    "1": "separator1"
                },
                "&DAT_00007194": {
                    "1": "padding_header"
                },
                "&Elf32_Rel_ARRAY_1fff0200[4].r_offset": {
                    "1": "thread_offset"
                },
                "(int)local_2c + 6": {
                    "1": "thread_id"
                },
                "local_2c[10]": {
                    "1": "thread_name"
                },
                "local_2c[9]": {
                    "1": "stack_pointer_origin"
                },
                "local_2c[0xb]": {
                    "1": "get_stack_start_addr(thread_addr)"
                },
                "(int)local_2c + 5": {
                    "1": "thread_priority"
                },
                "*local_2c": {
                    "1": "get_thread_priority(thread_addr)"
                },
                "param_1": {
                    "1": "pointer_array"
                },
                "local_58": {
                    "1": "stack_base_address"
                },
                "local_5c": {
                    "1": "current_address"
                },
                "&(DAT_1fff0358 + local_1a * 4)": {
                    "1": "get_thread_entry(local_1a)"
                },
                "Elf32_Rel_ARRAY_1fff0200[4].r_offset": {
                    "1": "get_relocation_offset(local_30)"
                }
            }
        },
        "FUN_00002270": {
            "entrypoint": "0x00002270",
            "current_name": "check_equality_00002270",
            "code": "\nundefined check_equality_00002270(int input)\n\n{\n  undefined result;\n  int value;\n  bool is_equal;\n  \n  value = *(int *)(input + 0xc);\n  is_equal = *(int *)(input + 8) == value;\n  if (is_equal) {\n    value = 1;\n  }\n  result = (undefined)value;\n  if (!is_equal) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002270": "check_equality_00002270",
                "param_1": "input",
                "iVar2": "value",
                "bVar3": "is_equal",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002270": {
                    "1": "check_value_equality",
                    "2": "check_if_equal",
                    "27": "check_equality"
                },
                "param_1": {
                    "22": "input",
                    "1": "input_param",
                    "6": "input_value"
                },
                "iVar2": {
                    "1": "ptr_value",
                    "3": "stored_value",
                    "17": "value",
                    "2": "comparison_value",
                    "4": "value1"
                },
                "bVar3": {
                    "1": "is_equality",
                    "2": "is_matching",
                    "4": "is_match",
                    "21": "is_equal"
                },
                "uVar1": {
                    "10": "result",
                    "1": "is_equal"
                }
            }
        },
        "FUN_00002294": {
            "entrypoint": "0x00002294",
            "current_name": "check_equality_00002294",
            "code": "\nundefined check_equality_00002294(int input)\n\n{\n  undefined result;\n  int difference;\n  bool is_equal;\n  \n  difference = *(int *)(input + 4);\n  is_equal = *(int *)(input + 0xc) - *(int *)(input + 8) == difference;\n  if (is_equal) {\n    difference = 1;\n  }\n  result = (undefined)difference;\n  if (!is_equal) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002294": "check_equality_00002294",
                "param_1": "input",
                "iVar2": "difference",
                "bVar3": "is_equal",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002294": {
                    "1": "check_validity",
                    "2": "check_if_difference_is_equal",
                    "5": "check_difference",
                    "9": "check_equality"
                },
                "param_1": {
                    "16": "input",
                    "2": "checksum",
                    "1": "ptr_to_data"
                },
                "iVar2": {
                    "1": "checksum",
                    "2": "checksum_difference",
                    "7": "offset",
                    "15": "difference"
                },
                "bVar3": {
                    "2": "is_difference_valid",
                    "1": "is_match",
                    "4": "is_difference_equal",
                    "15": "is_equal"
                },
                "uVar1": {
                    "1": "output",
                    "18": "result"
                }
            }
        },
        "FUN_000022be": {
            "entrypoint": "0x000022be",
            "current_name": "increment_and_store_value_000022be",
            "code": "\nvoid increment_and_store_value_000022be(int *array,undefined value)\n\n{\n  uint current_value;\n  \n  current_value = current_offset;\n  current_offset = current_value + 1;\n  *(undefined *)((current_value & array_length - 1U) + *array) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000022be": "increment_and_store_value_000022be",
                "param_1": "array",
                "param_2": "value",
                "uVar1": "current_value",
                "param_1[3]": "current_offset",
                "param_1[1]": "array_length"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000022be": {
                    "3": "update_array_with_param",
                    "1": "increment_and_update_array",
                    "5": "increment_and_store_value",
                    "2": "store_value_at_offset"
                },
                "param_1": {
                    "1": "memory",
                    "28": "array"
                },
                "param_2": {
                    "1": "byte_to_set",
                    "3": "new_value",
                    "24": "value"
                },
                "uVar1": {
                    "1": "original_value",
                    "2": "previous_count",
                    "3": "index",
                    "5": "previous_value",
                    "6": "current_index",
                    "7": "current_value"
                },
                "*(undefined *)": {
                    "1": "ptr_to_value"
                },
                "*(undefined *)((uVar1 & param_1[1] - 1U) + *param_1)": {
                    "1": "target_addr"
                },
                "*param_1": {
                    "1": "array_base_addr",
                    "2": "base_address"
                },
                "*(undefined *)((uVar1 & array[1] - 1U) + *array)": {
                    "1": "offset"
                },
                "param_1[3]": {
                    "1": "current_offset"
                },
                "param_1[1]": {
                    "1": "array_size"
                }
            }
        },
        "FUN_000022f0": {
            "entrypoint": "0x000022f0",
            "current_name": "increment_and_return_element_000022f0",
            "code": "\nundefined increment_and_return_element_000022f0(int *array)\n\n{\n  uint current_index;\n  \n  current_index = value;\n  value = current_index + 1;\n  value *(undefined *)((current_index & mask - 1U) + *array);\n}\n\n",
            "renaming": {
                "FUN_000022f0": "increment_and_return_element_000022f0",
                "param_1": "array",
                "uVar1": "current_index",
                "param_1[1]": "mask",
                "param_1[2]": "value",
                "return": "value"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000022f0": {
                    "3": "increment_value_and_return",
                    "1": "retrieve_and_increment_byte",
                    "2": "increment_and_return_byte_value",
                    "4": "increment_and_return_element"
                },
                "param_1": {
                    "1": "array_ptr",
                    "29": "array"
                },
                "uVar1": {
                    "1": "previous_value",
                    "2": "offset",
                    "3": "value",
                    "9": "current_index",
                    "5": "current_value"
                },
                "*param_1": {
                    "1": "base_pointer",
                    "5": "base_address"
                },
                "param_1[1]": {
                    "3": "mask"
                },
                "param_1[2]": {
                    "1": "current_value"
                },
                "*(undefined *)((uVar1 & array[1] - 1U) + *array)": {
                    "1": "updated_value"
                },
                "return": {
                    "1": "value"
                },
                "*(undefined *)((uVar1 & param_1[1] - 1U) + *param_1)": {
                    "1": "value_to_return"
                },
                "uVar1 + 1": {
                    "1": "new_value"
                },
                "uVar1 & param_1[1] - 1U": {
                    "1": "offset"
                },
                "PTR_": {
                    "1": "unchanged"
                },
                "DAT_": {
                    "1": "unchanged"
                },
                "return_value": {
                    "1": "byte_value"
                }
            }
        },
        "FUN_0000231c": {
            "entrypoint": "0x0000231c",
            "current_name": "copy_data_0000231c",
            "code": "\nint copy_data_0000231c(undefined4 buffer,undefined *destination,int size)\n\n{\n  undefined popped_value;\n  int is_buffer_empty;\n  undefined *dest_ptr;\n  int remaining_size;\n  \n  dest_ptr = destination;\n  remaining_size = size;\n  while ((remaining_size != 0 && (is_buffer_empty = is_buffer_empty(buffer), is_buffer_empty == 0))) {\n    popped_value = pop_from_buffer(buffer);\n    *dest_ptr = popped_value;\n    remaining_size = remaining_size + -1;\n    dest_ptr = dest_ptr + 1;\n  }\n  return size - remaining_size;\n}\n\n",
            "renaming": {
                "FUN_0000231c": "copy_data_0000231c",
                "param_1": "buffer",
                "param_2": "destination",
                "param_3": "size",
                "local_20": "dest_ptr",
                "local_14": "remaining_size",
                "uVar1": "popped_value",
                "iVar2": "is_buffer_empty",
                "tsrb_empty": "is_buffer_empty",
                "_pop": "pop_from_buffer"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_000022f0",
                "FUN_00002270"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000231c": {
                    "1": "process_and_extract",
                    "6": "extract_data",
                    "3": "extract_bytes",
                    "2": "extract_data_from_buffer",
                    "13": "copy_data"
                },
                "param_1": {
                    "1": "src",
                    "3": "param",
                    "2": "tsrb",
                    "12": "buffer"
                },
                "param_2": {
                    "13": "destination",
                    "1": "target_array",
                    "3": "dest_ptr",
                    "2": "output_buffer",
                    "6": "output"
                },
                "param_3": {
                    "5": "length",
                    "3": "count",
                    "1": "output_buffer_size",
                    "4": "num_elements",
                    "10": "size"
                },
                "local_20": {
                    "7": "output_ptr",
                    "1": "dest_pointer",
                    "4": "current_position",
                    "15": "dest_ptr"
                },
                "local_14": {
                    "3": "remaining_count",
                    "4": "remaining_elements",
                    "6": "remaining_bytes",
                    "1": "bytes_copied",
                    "12": "remaining_size",
                    "5": "remaining_length"
                },
                "uVar1": {
                    "3": "byte",
                    "2": "popped_byte",
                    "1": "byte_value",
                    "5": "value",
                    "7": "popped_value"
                },
                "iVar2": {
                    "1": "empty_flag",
                    "11": "is_empty"
                },
                "tsrb_empty": {
                    "3": "is_buffer_empty"
                },
                "_pop": {
                    "1": "pop_value",
                    "2": "pop_from_buffer"
                }
            }
        },
        "FUN_00002364": {
            "entrypoint": "0x00002364",
            "current_name": "push_if_not_full_00002364",
            "code": "\nundefined4 push_if_not_full_00002364(undefined4 buffer,undefined data)\n\n{\n  int is_full;\n  undefined4 result;\n  \n  is_full = tsrb_full(buffer);\n  if (is_full == 0) {\n    _push(buffer,data);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002364": "push_if_not_full_00002364",
                "param_1": "buffer",
                "param_2": "data",
                "iVar1": "is_full",
                "uVar2": "result"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_000022be",
                "FUN_00002294"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002364": {
                    "1": "handle_push_function",
                    "2": "push_data_if_not_full",
                    "8": "push_if_not_full",
                    "4": "push_or_fail"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "buffer_ptr",
                    "21": "buffer"
                },
                "param_2": {
                    "14": "data",
                    "1": "arg2",
                    "10": "value",
                    "2": "new_data"
                },
                "iVar1": {
                    "14": "is_full",
                    "2": "tsrb_full_result",
                    "1": "buffer_full"
                },
                "uVar2": {
                    "20": "result",
                    "11": "return_value"
                }
            }
        },
        "FUN_00002396": {
            "entrypoint": "0x00002396",
            "current_name": "initialize_rtc_00002396",
            "code": "\nvoid initialize_rtc_00002396(void)\n\n{\n  initialize_rtc_00002396();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002396": "initialize_rtc_00002396",
                "rtc_init": "initialize_rtc"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_000025f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002396": {
                    "15": "initialize_real_time_clock",
                    "1": "initialize_real-time_clock"
                },
                "FUN_000025f4": {
                    "4": "perform_additional_operations",
                    "3": "perform_additional_setup",
                    "1": "update_rtc",
                    "5": "perform_additional_tasks"
                },
                "rtc_init": {
                    "5": "initialize_rtc",
                    "1": "initialize_real_time_clock"
                }
            }
        },
        "FUN_000023a4": {
            "entrypoint": "0x000023a4",
            "current_name": "initialize_riot_000023a4",
            "code": "\nundefined4 initialize_riot_000023a4(void)\n\n{\n  undefined4 result;\n  undefined buffer [128];\n  \n  start_fork_server(0);\n  print_welcome_message(\"Welcome to RIOT!\");\n  result = execute_shell(0,buffer,0x80);\n  perform_interrupt(0x3f);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000023a4": "initialize_riot_000023a4",
                "auStack_88": "buffer",
                "uVar1": "result",
                "startForkserver": "start_fork_server",
                "puts": "print_welcome_message",
                "shell_run": "execute_shell",
                "software_interrupt": "perform_interrupt"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_000023d0",
                "FUN_00002e6c",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000023a4": {
                    "6": "initialize_riot",
                    "1": "execute_riot",
                    "3": "run_shell_command",
                    "2": "initialize"
                },
                "auStack_88": {
                    "2": "input_buffer",
                    "1": "command_buffer",
                    "18": "buffer"
                },
                "FUN_000023d0": {
                    "2": "run_shell_command",
                    "5": "execute_command",
                    "1": "print_welcome_message"
                },
                "FUN_00002e6c": {
                    "1": "execute_riot",
                    "6": "execute_command",
                    "2": "execute_shell"
                },
                "FUN_00004db8": {
                    "1": "reverse_data",
                    "2": "perform_operation",
                    "3": "process_data"
                },
                "param_1": {
                    "2": "input",
                    "1": "error_code"
                },
                "param_2": {
                    "1": "param_2"
                },
                "param_3": {
                    "1": "param_3"
                },
                "uVar1": {
                    "2": "result",
                    "1": "return_value"
                },
                "startForkserver": {
                    "1": "start_fork_server"
                },
                "puts": {
                    "1": "print_welcome_message"
                },
                "shell_run": {
                    "1": "execute_shell"
                },
                "software_interrupt": {
                    "1": "perform_interrupt"
                }
            }
        },
        "FUN_000023c8": {
            "entrypoint": "0x000023c8",
            "current_name": "invoke_software_interrupt_000023c8",
            "code": "\nvoid invoke_software_interrupt_000023c8(void)\n\n{\n  execute_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000023c8": "invoke_software_interrupt_000023c8",
                "software_interrupt": "execute_interrupt"
            },
            "calling": [
                "FUN_000023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000023c8": {
                    "2": "call_software_interrupt",
                    "5": "execute_software_interrupt",
                    "1": "trigger_system_interrupt",
                    "7": "invoke_software_interrupt",
                    "6": "trigger_software_interrupt"
                },
                "software_interrupt": {
                    "3": "trigger_software_interrupt",
                    "1": "send_interrupt",
                    "6": "execute_interrupt",
                    "2": "perform_interrupt"
                },
                "PTR_00000080": {
                    "1": "new_pointer"
                },
                "DAT_00000040": {
                    "1": "new_data"
                },
                "": {
                    "2": ""
                },
                "PTR_00000010": {
                    "1": "return_address"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "DAT_": {
                    "1": "dat_"
                },
                "PTR_00000000": {
                    "1": "ptr_data"
                },
                "DAT_00000001": {
                    "1": "data1"
                }
            }
        },
        "FUN_000023d0": {
            "entrypoint": "0x000023d0",
            "current_name": "execute_function_000023d0",
            "code": "\nundefined4 execute_function_000023d0(undefined4 input)\n\n{\n  undefined4 result;\n  \n  if (DAT_1fff0d98 == 0) {\n    result = aflCall(1,input,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000023d0": "execute_function_000023d0",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_000023c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000023d0": {
                    "1": "execute_afl_if_available",
                    "10": "execute_function",
                    "7": "execute_afl_call",
                    "3": "call_afl_or_zero"
                },
                "param_1": {
                    "11": "input",
                    "2": "input_parameter",
                    "1": "data",
                    "7": "input_value",
                    "3": "input_data",
                    "6": "input_param"
                },
                "uVar1": {
                    "1": "output",
                    "19": "result",
                    "11": "return_value"
                },
                "FUN_000023c8": {
                    "1": "initialize"
                }
            }
        },
        "FUN_00002400": {
            "entrypoint": "0x00002400",
            "current_name": "FUNC_00002400",
            "code": "\nvoid FUNC_00002400(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002400": "FUNC_00002400"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0000240c": {
            "entrypoint": "0x0000240c",
            "current_name": "update_pointer_0000240c",
            "code": "\nundefined4 * update_pointer_0000240c(undefined4 *pointer)\n\n{\n  undefined4 *next_pointer;\n  \n  next_pointer = (undefined4 *)*pointer;\n  if (next_pointer != (undefined4 *)0x0) {\n    *pointer = *next_pointer;\n  }\n  return next_pointer;\n}\n\n",
            "renaming": {
                "FUN_0000240c": "update_pointer_0000240c",
                "param_1": "pointer",
                "puVar1": "next_pointer"
            },
            "calling": [
                "FUN_000024bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000240c": {
                    "1": "extract_next_element",
                    "7": "update_pointer",
                    "2": "extract_next_pointer",
                    "3": "copy_linked_list"
                },
                "param_1": {
                    "1": "input_pointer",
                    "3": "current_ptr",
                    "5": "current_pointer",
                    "2": "input_ptr"
                },
                "puVar1": {
                    "1": "value_ptr",
                    "6": "next_node",
                    "9": "next_pointer"
                }
            }
        },
        "FUN_00002434": {
            "entrypoint": "0x00002434",
            "current_name": "initialize_thread_00002434",
            "code": "\nundefined4 initialize_thread_00002434(int *thread_status,int flag)\n\n{\n  int initial_value;\n  undefined4 result;\n  \n  result = irq_disable();\n  initial_value = DAT_1fff03dc;\n  if (*thread_status == 0) {\n    *thread_status = -1;\n    irq_restore(result);\n    result = 1;\n  }\n  else if (flag == 0) {\n    irq_restore(result);\n    result = 0;\n  }\n  else {\n    sched_set_status(DAT_1fff03dc,2);\n    if (*thread_status == -1) {\n      *thread_status = initial_value + 8;\n      *(undefined4 *)*thread_status = 0;\n    }\n    else {\n      thread_add_to_list(thread_status,initial_value);\n    }\n    irq_restore(result);\n    yield_higher_priority();\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002434": "initialize_thread_00002434",
                "param_1": "thread_status",
                "param_2": "flag",
                "iVar1": "initial_value",
                "uVar2": "result",
                "thread_yield_higher": "yield_higher_priority"
            },
            "calling": [
                "FUN_0000129c"
            ],
            "called": [
                "FUN_0000093c",
                "FUN_00000698",
                "FUN_00000d0c",
                "FUN_00000cd0",
                "FUN_00001034"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002434": {
                    "1": "thread_scheduler",
                    "4": "set_thread_status",
                    "10": "initialize_thread",
                    "9": "update_thread_status"
                },
                "param_1": {
                    "2": "status_pointer",
                    "1": "priority",
                    "20": "thread_status"
                },
                "param_2": {
                    "11": "flag",
                    "1": "is_interrupt",
                    "5": "priority",
                    "6": "condition"
                },
                "iVar1": {
                    "1": "current_value",
                    "3": "initial_thread_status",
                    "7": "initial_value",
                    "2": "saved_thread_status"
                },
                "uVar2": {
                    "1": "irq_value",
                    "2": "prev_interrupt_state",
                    "5": "interrupt_status",
                    "7": "irq_status",
                    "9": "result"
                },
                "F_0000093c": {
                    "1": "disable_irq"
                },
                "F_00000698": {
                    "1": "set_status"
                },
                "F_00000d0c": {
                    "1": "restore_irq"
                },
                "F_00000cd0": {
                    "1": "enable_irq"
                },
                "F_00001034": {
                    "1": "add_to_thread_list"
                },
                "FUN_0000093c": {
                    "1": "disable_interrupt",
                    "5": "disable_interrupts",
                    "4": "disable_irq"
                },
                "FUN_00000698": {
                    "2": "restore_irq",
                    "1": "set_thread_status",
                    "4": "restore_interrupts"
                },
                "FUN_00000d0c": {
                    "1": "set_thread_status_to_running",
                    "2": "restore_irq",
                    "4": "set_thread_status"
                },
                "FUN_00000cd0": {
                    "1": "yield_to_higher_thread",
                    "5": "get_thread_status"
                },
                "FUN_00001034": {
                    "1": "thread_yield_higher",
                    "8": "add_thread_to_list"
                },
                "thread_yield_higher": {
                    "1": "yield_higher_priority"
                },
                "DAT_1fff03dc": {
                    "1": "default_thread_status"
                }
            }
        },
        "FUN_000024bc": {
            "entrypoint": "0x000024bc",
            "current_name": "update_status_and_switch_000024bc",
            "code": "\nvoid update_status_and_switch_000024bc(int *list)\n\n{\n  undefined status;\n  undefined4 irq_status;\n  int removed_item;\n  \n  irq_status = disable_irq();\n  if (*list == 0) {\n    restore_irq(irq_status);\n  }\n  else if (*list == -1) {\n    *list = 0;\n    restore_irq(irq_status);\n  }\n  else {\n    removed_item = remove_head_from_list(list);\n    set_task_status(removed_item + -8,10);\n    if (*list == 0) {\n      *list = -1;\n    }\n    status = *(undefined *)(removed_item + -3);\n    restore_irq(irq_status);\n    switch_task(status);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000024bc": "update_status_and_switch_000024bc",
                "param_1": "list",
                "uVar1": "status",
                "uVar2": "irq_status",
                "iVar3": "removed_item",
                "sched_set_status": "set_task_status",
                "list_remove_head": "remove_head_from_list",
                "sched_switch": "switch_task",
                "irq_disable": "disable_irq",
                "irq_restore": "restore_irq"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_00000698",
                "FUN_00000d0c",
                "FUN_00000738",
                "FUN_00000cd0",
                "FUN_0000240c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000024bc": {
                    "1": "process_list_head",
                    "5": "update_status_and_switch",
                    "2": "update_scheduler",
                    "3": "process_list_entry"
                },
                "param_1": {
                    "1": "schedule_list",
                    "4": "list",
                    "2": "task_list",
                    "3": "status_pointer"
                },
                "uVar1": {
                    "1": "schedule_status",
                    "3": "current_status",
                    "20": "status",
                    "4": "status_value"
                },
                "uVar2": {
                    "3": "interrupt_state",
                    "2": "interrupt_flags",
                    "1": "disabled_interrupts",
                    "4": "irq_flags",
                    "6": "irq_status",
                    "5": "irq_state"
                },
                "iVar3": {
                    "1": "head_data",
                    "3": "item",
                    "2": "head_node",
                    "4": "removed_item"
                },
                "FUN_00000698": {
                    "1": "update_scheduler",
                    "3": "set_status"
                },
                "param_2": {
                    "1": "item_status"
                },
                "FUN_00000d0c": {
                    "2": "irq_restore",
                    "1": "reset_interrupt_flag"
                },
                "FUN_00000738": {
                    "2": "set_priority",
                    "1": "set_task_status"
                },
                "FUN_00000cd0": {
                    "1": "get_status",
                    "2": "initialize",
                    "3": "get_default_value"
                },
                "FUN_0000240c": {
                    "1": "get_next_entry",
                    "2": "remove_head_element"
                },
                "sched_set_status": {
                    "1": "set_status",
                    "3": "set_task_status"
                },
                "list_remove_head": {
                    "2": "remove_head_from_list",
                    "1": "remove_head_element_from_list"
                },
                "sched_switch": {
                    "1": "switch_schedule",
                    "3": "switch_task"
                },
                "*param_1": {
                    "1": "status"
                },
                "irq_disable": {
                    "1": "disable_irq"
                },
                "irq_restore": {
                    "1": "restore_interrupts"
                }
            }
        },
        "FUN_00002538": {
            "entrypoint": "0x00002538",
            "current_name": "update_memory_00002538",
            "code": "\nvoid update_memory_00002538(byte index,uint value)\n\n{\n  if ((char)byte_index < '\\0') {\n    (atDAT_e000ed14)[index at 0xf] = (byte)((value at 0xff) << 4);\n  }\n  else {\n    *(byte *)((char)byte_index + -0x1fff1c00) = (byte)((value at 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002538": "update_memory_00002538",
                "param_1": "index",
                "param_2": "value",
                "(char)param_1": "(char)byte_index",
                "char": "byte",
                "&": "at"
            },
            "calling": [
                "FUN_0000258c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002538": {
                    "1": "set_byte",
                    "7": "update_data",
                    "2": "set_memory_value",
                    "4": "set_byte_value"
                },
                "param_1": {
                    "5": "input_byte",
                    "1": "data_address",
                    "2": "byte_index",
                    "7": "index",
                    "4": "byte_value"
                },
                "param_2": {
                    "7": "data",
                    "3": "input_value",
                    "2": "uint_value",
                    "1": "byte_value",
                    "14": "value"
                },
                "param_3": {
                    "1": "memory_location"
                },
                "param_4": {
                    "1": "value"
                },
                "0xf": {
                    "1": "0b00001111"
                },
                "0xff": {
                    "1": "0b11111111"
                },
                "_DAT_e000ed14": {
                    "1": "some_array"
                },
                "_DAT_1fff1bec": {
                    "1": "memory_address"
                },
                "&DAT_e000ed14": {
                    "1": "data_buffer",
                    "2": "memory_array"
                },
                "(char)param_1": {
                    "1": "address_value"
                },
                "&DAT_e000ed14[param_1 & 0xf]": {
                    "1": "byte_array_element"
                },
                "*(char *)((char)param_1 + -0x1fff1c00)": {
                    "1": "memory_byte"
                },
                "(char)param_1 < '\\0'": {
                    "1": "is_negative_byte"
                },
                "(param_2 & 0xff) << 4": {
                    "2": "shifted_value"
                },
                "(char)param_1 + -0x1fff1c00": {
                    "1": "buffer_address"
                },
                "DAT_e000ed14": {
                    "1": "buffer",
                    "2": "data_array"
                },
                "PTR_1fff1c00": {
                    "1": "target_address"
                },
                "PTR_0x1fff1c00": {
                    "1": "base_address"
                },
                "&(DAT_e000ed14)[param_1 & 0xf]": {
                    "1": "updated_data1"
                },
                "(char)param_1 + -0x1fff1c00)": {
                    "1": "updated_data2"
                },
                "0x1fff1c00": {
                    "1": "data_offset"
                },
                "(&DAT_e000ed14)[param_1 & 0xf]": {
                    "1": "result_byte"
                },
                "char": {
                    "1": "byte"
                },
                "&": {
                    "1": "at"
                }
            }
        },
        "FUN_0000258c": {
            "entrypoint": "0x0000258c",
            "current_name": "initialize_memory_0000258c",
            "code": "\n\n\nvoid initialize_memory_0000258c(void)\n\n{\n  uint index;\n  \n  _DAT_e000ed08 = 0;\n  update_memory(0xfffffffe,1);\n  update_memory(0xfffffffb,1);\n  for (index = 0; index < 0x66; index = index + 1) {\n    update_memory((int)(char)index,1);\n  }\n  _DAT_e000ed10 = _DAT_e000ed10 | 0x10;\n  _DAT_e000ed14 = _DAT_e000ed14 | 0x200;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000258c": "initialize_memory_0000258c",
                "local_c": "index",
                "update_memory_00002538": "update_memory"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000258c": {
                    "30": "initialize_memory",
                    "1": "set_memory_values"
                },
                "local_c": {
                    "1": "i",
                    "7": "counter",
                    "22": "index"
                },
                "update_memory_00002538": {
                    "10": "update_memory"
                },
                "index": {
                    "1": "byte_index",
                    "5": "memory_index"
                },
                "value": {
                    "1": "data_value",
                    "5": "memory_value"
                }
            }
        },
        "FUN_000025f4": {
            "entrypoint": "0x000025f4",
            "current_name": "initialize_rtt_000025f4",
            "code": "\nvoid initialize_rtt_000025f4(void)\n\n{\n  initialize_rtt_000025f4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000025f4": "initialize_rtt_000025f4",
                "rtt_init": "initialize_rtt"
            },
            "calling": [
                "FUN_00002396"
            ],
            "called": [
                "FUN_000027b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000025f4": {
                    "2": "initialize_real_time_transmission",
                    "1": "initialize_real_time_timer",
                    "26": "initialize_rtt"
                },
                "FUN_000027b0": {
                    "3": "perform_additional_task",
                    "4": "perform_additional_tasks",
                    "1": "subfunction",
                    "2": "perform_additional_operations"
                },
                "rtt_init": {
                    "1": "initialize_rtt"
                }
            }
        },
        "FUN_00002600": {
            "entrypoint": "0x00002600",
            "current_name": "set_counter_00002600",
            "code": "\nundefined4 set_counter_00002600(undefined4 time_struct)\n\n{\n  undefined4 timestamp;\n  \n  timestamp = convert_to_time(time_struct);\n  set_counter_00002600(timestamp);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002600": "set_counter_00002600",
                "param_1": "time_struct",
                "uVar1": "timestamp",
                "rtt_set_counter": "set_counter",
                "mktime": "convert_to_time"
            },
            "calling": [
                "FUN_00003478"
            ],
            "called": [
                "FUN_0000285c",
                "FUN_000047e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002600": {
                    "1": "set_timestamp_and_counter",
                    "2": "set_unix_timestamp",
                    "10": "set_counter",
                    "3": "set_counter_from_param",
                    "5": "set_counter_from_time"
                },
                "param_1": {
                    "9": "time_struct",
                    "2": "unix_time",
                    "1": "time_array"
                },
                "uVar1": {
                    "1": "converted_unix_time",
                    "2": "time_stamp",
                    "4": "time_value",
                    "8": "timestamp",
                    "3": "epoch_time"
                },
                "rtt_set_counter": {
                    "3": "set_counter"
                },
                "FUN_0000285c": {
                    "1": "initialize_rtt"
                },
                "FUN_000047e4": {
                    "1": "extract_data"
                },
                "mktime": {
                    "1": "convert_to_time"
                }
            }
        },
        "FUN_00002624": {
            "entrypoint": "0x00002624",
            "current_name": "convert_counter_to_time_00002624",
            "code": "\nundefined4 convert_counter_to_time_00002624(undefined4 output_time)\n\n{\n  undefined4 counter;\n  undefined4 unused_variable;\n  \n  counter = rtt_get_counter();\n  unused_variable = 0;\n  gmtime_r(&counter,output_time);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002624": "convert_counter_to_time_00002624",
                "param_1": "output_time",
                "local_10": "counter",
                "uStack_c": "unused_variable"
            },
            "calling": [
                "FUN_00003444"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_0000281c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002624": {
                    "1": "get_formatted_time",
                    "2": "get_local_time",
                    "4": "get_current_time",
                    "8": "convert_counter_to_time"
                },
                "param_1": {
                    "10": "output_time",
                    "1": "time_array",
                    "2": "converted_time",
                    "3": "time_struct"
                },
                "local_10": {
                    "5": "counter_value",
                    "1": "unix_time",
                    "9": "counter",
                    "2": "current_counter"
                },
                "uStack_c": {
                    "6": "unused_variable",
                    "2": "zero_value",
                    "3": "stack_counter",
                    "4": "unused_var",
                    "1": "unused_stack_var",
                    "5": "zero"
                },
                "FUN_0000443c": {
                    "1": "calculate_time_difference"
                },
                "param_2": {
                    "1": "time2_pointer"
                },
                "FUN_0000281c": {
                    "1": "initialize_time",
                    "4": "get_current_time"
                }
            }
        },
        "FUN_00002654": {
            "entrypoint": "0x00002654",
            "current_name": "set_alarm_00002654",
            "code": "\nundefined4 set_alarm_00002654(undefined4 time,undefined4 alarm_value,undefined4 alarm_type)\n\n{\n  undefined4 timestamp;\n  \n  timestamp = mktime(time);\n  DAT_1fff0d9c = alarm_value;\n  rtt_set_alarm_00002654(timestamp,0x26f1,alarm_type);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002654": "set_alarm_00002654",
                "param_1": "time",
                "param_2": "alarm_value",
                "param_3": "alarm_type",
                "uVar1": "timestamp"
            },
            "calling": [
                "FUN_000033f4"
            ],
            "called": [
                "FUN_000047e4",
                "FUN_00002894"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002654": {
                    "1": "set_alarm_and_update",
                    "13": "set_alarm",
                    "7": "set_alarm_with_time",
                    "2": "configure_alarm"
                },
                "param_1": {
                    "1": "unix_time",
                    "2": "time_in_seconds",
                    "3": "time_data",
                    "6": "time",
                    "4": "time_param"
                },
                "param_2": {
                    "1": "alarm_type",
                    "5": "alarm_param",
                    "3": "value",
                    "2": "param_2",
                    "9": "alarm_value"
                },
                "param_3": {
                    "3": "alarm_flag",
                    "1": "rtt_param",
                    "2": "option",
                    "5": "alarm_type"
                },
                "uVar1": {
                    "1": "time_in_seconds",
                    "2": "time_stamp",
                    "5": "time_value",
                    "9": "timestamp",
                    "3": "epoch_time"
                },
                "FUN_000047e4": {
                    "1": "get_alarm_status"
                },
                "FUN_00002894": {
                    "2": "set_alarm",
                    "1": "configure_alarm"
                }
            }
        },
        "FUN_00002690": {
            "entrypoint": "0x00002690",
            "current_name": "convert_alarm_to_local_time_00002690",
            "code": "\nundefined4 convert_alarm_to_local_time_00002690(undefined4 output_time)\n\n{\n  undefined4 alarm_time;\n  undefined4 zero;\n  \n  alarm_time = rtt_get_alarm();\n  zero = 0;\n  gmtime_r(&alarm_time,output_time);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002690": "convert_alarm_to_local_time_00002690",
                "param_1": "output_time",
                "local_10": "alarm_time",
                "uStack_c": "zero"
            },
            "calling": [
                "FUN_000033c0"
            ],
            "called": [
                "FUN_000028f0",
                "FUN_0000443c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002690": {
                    "1": "get_alarm_and_convert_to_gmtime",
                    "4": "convert_alarm_to_time",
                    "3": "convert_rtt_alarm_to_time",
                    "5": "convert_alarm_to_local_time",
                    "2": "convert_time_to_gmt"
                },
                "param_1": {
                    "1": "time_in_utc",
                    "11": "output_time",
                    "2": "result",
                    "3": "local_time",
                    "5": "time_struct"
                },
                "local_10": {
                    "1": "epoch_time",
                    "2": "alarm",
                    "20": "alarm_time"
                },
                "uStack_c": {
                    "5": "unused_var",
                    "1": "conversion_result",
                    "2": "unused",
                    "3": "temp",
                    "6": "zero"
                },
                "FUN_000028f0": {
                    "1": "get_alarm",
                    "2": "get_current_alarm"
                },
                "FUN_0000443c": {
                    "1": "convert_to_utc"
                }
            }
        },
        "FUN_000026c0": {
            "entrypoint": "0x000026c0",
            "current_name": "clear_alarm_and_reset_000026c0",
            "code": "\nvoid clear_alarm_and_reset_000026c0(void)\n\n{\n  rtt_clear_alarm();\n  DAT_1fff0d9c = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026c0": "clear_alarm_and_reset_000026c0"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002910"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000026c0": {
                    "5": "clear_alarm",
                    "2": "clear_alarm_and_reset_variable",
                    "1": "clear_alarm_and_reset_value",
                    "6": "clear_alarm_and_reset_counter",
                    "8": "clear_alarm_and_reset"
                },
                "FUN_00002910": {
                    "1": "clear_alarm_state",
                    "2": "reset_counter"
                }
            }
        },
        "FUN_000026d8": {
            "entrypoint": "0x000026d8",
            "current_name": "power_on_rtt_000026d8",
            "code": "\nvoid power_on_rtt_000026d8(void)\n\n{\n  rtt_poweron();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026d8": "power_on_rtt_000026d8"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000026d8": {
                    "1": "power_on_init",
                    "2": "initialize_power",
                    "15": "power_on_rtt",
                    "4": "power_on"
                },
                "FUN_0000294c": {
                    "6": "initialize",
                    "1": "perform_operation",
                    "8": "initialize_rtt",
                    "2": "initialize_components"
                }
            }
        },
        "FUN_000026e4": {
            "entrypoint": "0x000026e4",
            "current_name": "power_off_000026e4",
            "code": "\nvoid power_off_000026e4(void)\n\n{\n  rtt_poweroff();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026e4": "power_off_000026e4"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000026e4": {
                    "1": "poweroff_system",
                    "5": "power_off_device",
                    "2": "power_off_function",
                    "7": "power_off"
                },
                "FUN_00002970": {
                    "1": "shutdown_rtt",
                    "2": "sub_function",
                    "5": "perform_shutdown",
                    "7": "perform_cleanup"
                }
            }
        },
        "FUN_000026f0": {
            "entrypoint": "0x000026f0",
            "current_name": "execute_callback_000026f0",
            "code": "\nvoid execute_callback_000026f0(undefined4 callback_parameter)\n\n{\n  if (DAT_1fff0d9c != (code *)0x0) {\n    (*DAT_1fff0d9c)(callback_parameter);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026f0": "execute_callback_000026f0",
                "param_1": "callback_parameter"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000026f0": {
                    "1": "invoke_callback_if_exists",
                    "14": "execute_callback",
                    "2": "execute_callback_function",
                    "3": "execute_function"
                },
                "param_1": {
                    "3": "data",
                    "6": "callback_parameter",
                    "1": "param",
                    "2": "input_param"
                },
                "DAT_1fff0d9c": {
                    "6": "callback_function",
                    "1": "optional_function_ptr",
                    "2": "callback_pointer"
                },
                "(*DAT_1fff0d9c)": {
                    "1": "callback"
                },
                "FUN_000026F0": {
                    "1": "execute_if_not_null"
                }
            }
        },
        "FUN_00002714": {
            "entrypoint": "0x00002714",
            "current_name": "set_bit_in_memory_00002714",
            "code": "\nvoid set_bit_in_memory_00002714(byte input_byte)\n\n{\n  *(integer *)((shifted_byte >> 5) * 4 + -0x1fff1f00) = 1 << (input_byte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002714": "set_bit_in_memory_00002714",
                "param_1": "input_byte",
                "char": "character",
                "int": "integer",
                "uint": "unsigned_integer",
                "(uint)(int)(char)param_1": "shifted_byte"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002714": {
                    "9": "set_bit",
                    "10": "set_bit_in_memory",
                    "3": "set_bit_at_index",
                    "1": "store_bitwise_shifted_value"
                },
                "param_1": {
                    "2": "input",
                    "1": "offset",
                    "12": "input_byte",
                    "5": "byte_to_set",
                    "6": "byte_value"
                },
                "*(int *)(((uint)(int)(char)param_1 >> 5) * 4 + -0x1fff1f00)": {
                    "1": "int_pointer",
                    "5": "target_address",
                    "2": "memory_address"
                },
                "1 << (param_1 & 0x1f)": {
                    "4": "bit_value",
                    "7": "bit_mask"
                },
                "char": {
                    "2": "character"
                },
                "int": {
                    "1": "uint32_t"
                },
                "uint": {
                    "1": "unsigned_integer"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "DAT_": {
                    "1": "dat_"
                },
                "PTR_*": {
                    "1": "unchanged"
                },
                "DAT_*": {
                    "1": "unchanged"
                },
                "(uint)(int)(char)param_1": {
                    "1": "shifted_byte"
                },
                "0x1f": {
                    "1": "bit_mask"
                },
                "1": {
                    "1": "bit_to_set"
                },
                "param_1 & 0x1f": {
                    "1": "bit_index"
                },
                "((uint)(int)(char)byteValue >> 5) * 4 + -0x1fff1f00": {
                    "1": "address"
                }
            }
        },
        "FUN_00002744": {
            "entrypoint": "0x00002744",
            "current_name": "set_byte_value_00002744",
            "code": "\nvoid set_byte_value_00002744(byte address,uint value)\n\n{\n  if (signed_byte_value < '\\0') {\n    (&DAT_e000ed14)[address & 0xf] = (byte)((value & 0xff) << 4);\n  }\n  else {\n    *(byte *)(signed_byte_value + -0x1fff1c00) = (byte)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002744": "set_byte_value_00002744",
                "param_1": "address",
                "param_2": "value",
                "char": "byte",
                "(char)param_1": "signed_byte_value"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002744": {
                    "2": "store_value",
                    "5": "update_memory",
                    "1": "store_byte",
                    "10": "set_byte_value",
                    "4": "update_data"
                },
                "param_1": {
                    "6": "address",
                    "1": "byte_val",
                    "2": "input_value",
                    "4": "byte_value",
                    "3": "byte_index"
                },
                "param_2": {
                    "8": "data",
                    "5": "new_value",
                    "1": "uint_val",
                    "3": "input_value",
                    "10": "value"
                },
                "param_1 & 0xf": {
                    "1": "byte_value_masked"
                },
                "DAT_e000ed14": {
                    "1": "buffer"
                },
                "param_2 & 0xff": {
                    "1": "value_masked"
                },
                "(param_2 & 0xff) << 4": {
                    "2": "shifted_value"
                },
                "*(char *)((char)param_1 + -0x1fff1c00)": {
                    "1": "pointer"
                },
                "char": {
                    "2": "byte"
                },
                "&DAT_e000ed14": {
                    "1": "buffer",
                    "2": "array"
                },
                "array[param_1 & 0xf]": {
                    "1": "array_element"
                },
                "(char)((param_2 & 0xff) << 4)": {
                    "1": "shifted_value"
                },
                "PTR_ffffffff80000000": {
                    "1": "constant_offset"
                },
                "PTR_ffffffffffffffff": {
                    "1": "negative_offset"
                },
                "0xf": {
                    "2": "mask"
                },
                "0xff": {
                    "1": "mask_data"
                },
                "0x1fff1c00": {
                    "1": "offset"
                },
                "&DAT_e000ed14[param_1 & 0xf]": {
                    "1": "output_element"
                },
                "(char)param_1": {
                    "1": "signed_byte_value"
                },
                "(char)param_1 < '\\0'": {
                    "1": "is_negative_byte_value"
                },
                "param_3": {
                    "1": "byte_index"
                },
                "PTR_00002744": {
                    "1": "original_function"
                }
            }
        },
        "FUN_00002798": {
            "entrypoint": "0x00002798",
            "current_name": "check_and_yield_00002798",
            "code": "\nvoid check_and_yield_00002798(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    thread_yield_higher();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002798": "check_and_yield_00002798"
            },
            "calling": [
                "FUN_00002994"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002798": {
                    "1": "yield_if_data_available",
                    "2": "check_and_yield_higher",
                    "23": "check_and_yield"
                },
                "FUN_0000093c": {
                    "1": "perform_actions",
                    "5": "perform_additional_task",
                    "2": "perform_cleanup",
                    "3": "perform_action",
                    "4": "do_something"
                }
            }
        },
        "FUN_000027b0": {
            "entrypoint": "0x000027b0",
            "current_name": "initialize_system_000027b0",
            "code": "\n\n\nvoid initialize_system_000027b0(void)\n\n{\n  _DAT_4004803c = _DAT_4004803c | 0x20000000;\n  if ((_DAT_4003d014 & 1) != 0) {\n    _DAT_4003d000 = 0;\n  }\n  _DAT_4003d010 = 0x104;\n  _DAT_4003d008 = 0xffffff42;\n  _DAT_4003d01c = 0;\n  power_on_rtt();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000027b0": "initialize_system_000027b0",
                "rtt_poweron": "power_on_rtt"
            },
            "calling": [
                "FUN_000025f4"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000027b0": {
                    "1": "power_on_init",
                    "22": "initialize_system",
                    "3": "initialize_rtt",
                    "2": "initialize_device"
                },
                "_DAT_4004803c": {
                    "1": "hardware_config",
                    "2": "system_configuration_register",
                    "3": "system_status",
                    "6": "system_flags"
                },
                "_DAT_4003d014": {
                    "1": "status_flags",
                    "6": "system_status",
                    "10": "status_register"
                },
                "_DAT_4003d000": {
                    "2": "system_data",
                    "1": "device_configuration",
                    "6": "data_register"
                },
                "_DAT_4003d010": {
                    "1": "interrupt_enable_register",
                    "3": "interrupt_control_register",
                    "4": "timer_config",
                    "5": "control_register",
                    "2": "timer_control"
                },
                "_DAT_4003d008": {
                    "1": "control_register2",
                    "4": "configuration_register",
                    "2": "data_register"
                },
                "_DAT_4003d01c": {
                    "3": "interrupt_register",
                    "1": "status_register",
                    "2": "counter_register"
                },
                "rtt_poweron": {
                    "1": "power_on_real-_time_timer",
                    "2": "power_on_real-time_timer",
                    "10": "power_on_rtt"
                },
                "FUN_0000294c": {
                    "1": "initialize_rtt"
                }
            }
        },
        "FUN_0000281c": {
            "entrypoint": "0x0000281c",
            "current_name": "get_base_address_0000281c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00002840) */\n/* WARNING: Removing unreachable block (ram,0x0000284c) */\n\n\nundefined4 get_base_address_0000281c(void)\n\n{\n  base_address _DAT_4003d000;\n}\n\n",
            "renaming": {
                "FUN_0000281c": "get_base_address_0000281c",
                "return": "base_address"
            },
            "calling": [
                "FUN_00002624"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000281c": {
                    "1": "get_data_address",
                    "10": "get_base_address",
                    "3": "get_global_variable",
                    "2": "get_global_data",
                    "4": "get_data"
                },
                "_DAT_4003d000": {
                    "1": "data_address",
                    "5": "data",
                    "2": "memory_address",
                    "8": "base_address"
                },
                "return": {
                    "1": "base_address"
                }
            }
        },
        "FUN_0000285c": {
            "entrypoint": "0x0000285c",
            "current_name": "initialize_data_0000285c",
            "code": "\n\n\nvoid initialize_data_0000285c(undefined4 value)\n\n{\n  _DAT_4003d000 = value;\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000285c": "initialize_data_0000285c",
                "param_1": "value"
            },
            "calling": [
                "FUN_00002600"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000285c": {
                    "1": "set_system_permission",
                    "3": "set_flag",
                    "7": "initialize_data"
                },
                "param_1": {
                    "1": "data_flag",
                    "4": "flag_value",
                    "5": "new_value",
                    "7": "value",
                    "2": "configuration"
                },
                "_DAT_4003d014": {
                    "1": "permissions",
                    "2": "flag_value",
                    "5": "flags",
                    "4": "register_value",
                    "3": "status_register"
                },
                "newParameterValue": {
                    "1": "new_value"
                },
                "_DAT_4003d000": {
                    "2": "data",
                    "1": "base_address"
                },
                "0xffffffef": {
                    "1": "clear_mask"
                },
                "0x10": {
                    "1": "set_mask"
                }
            }
        },
        "FUN_00002894": {
            "entrypoint": "0x00002894",
            "current_name": "initialize_peripheral_00002894",
            "code": "\n\n\nvoid initialize_peripheral_00002894(int input_value,undefined4 data1,undefined4 data2)\n\n{\n  _DAT_4003d008 = input_value + -1;\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb | 4;\n  DAT_1fff0da0 = data1;\n  DAT_1fff0da4 = data2;\n  set_interrupt_priority(0x2e,10);\n  enable_interrupt(0x2e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002894": "initialize_peripheral_00002894",
                "param_1": "input_value",
                "param_2": "data1",
                "param_3": "data2",
                "NVIC_SetPriority": "set_interrupt_priority",
                "NVIC_EnableIRQ": "enable_interrupt"
            },
            "calling": [
                "FUN_00002654"
            ],
            "called": [
                "FUN_00002714",
                "FUN_00002744"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002894": {
                    "6": "initialize_interrupt",
                    "2": "initialize_interrupt_handler",
                    "1": "setup_interrupt",
                    "10": "initialize_peripheral",
                    "3": "initialize_device",
                    "7": "initialize_interrupts"
                },
                "param_1": {
                    "9": "input_value",
                    "1": "base_addr",
                    "2": "initial_value",
                    "4": "value",
                    "3": "param"
                },
                "param_2": {
                    "9": "data1",
                    "1": "config_data1",
                    "3": "data_1",
                    "2": "data_value1"
                },
                "param_3": {
                    "3": "data_2",
                    "9": "data2",
                    "2": "value2",
                    "1": "arg2"
                },
                "FUN_00002714": {
                    "1": "set_peripheral_mode"
                },
                "FUN_00002744": {
                    "1": "configure_peripheral"
                },
                "_DAT_4003d008": {
                    "1": "adjusted_input_value",
                    "4": "adjusted_value",
                    "3": "updated_value"
                },
                "_DAT_4003d01c": {
                    "1": "irq_handler_settings",
                    "5": "control_register",
                    "3": "interrupt_config"
                },
                "NVIC_SetPriority": {
                    "15": "set_interrupt_priority",
                    "1": "set_priority"
                },
                "NVIC_EnableIRQ": {
                    "16": "enable_interrupt"
                }
            }
        },
        "FUN_000028f0": {
            "entrypoint": "0x000028f0",
            "current_name": "increment_value_000028f0",
            "code": "\n\n\nint increment_value_000028f0(void)\n\n{\n  result _DAT_4003d008 + 1;\n}\n\n",
            "renaming": {
                "FUN_000028f0": "increment_value_000028f0",
                "return": "result"
            },
            "calling": [
                "FUN_00002690"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000028f0": {
                    "1": "increment_and_return",
                    "4": "get_incremented_value",
                    "3": "increment_data",
                    "14": "increment_value",
                    "2": "get_next_value"
                },
                "_DAT_4003d008": {
                    "3": "data",
                    "1": "original_variable",
                    "5": "value",
                    "2": "data_value",
                    "8": "current_value"
                },
                "return": {
                    "1": "result"
                },
                "": {
                    "1": ""
                }
            }
        },
        "FUN_00002910": {
            "entrypoint": "0x00002910",
            "current_name": "clear_flags_00002910",
            "code": "\n\n\nvoid clear_flags_00002910(void)\n\n{\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n  _DAT_4003d008 = 0;\n  DAT_1fff0da0 = 0;\n  DAT_1fff0da4 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002910": "clear_flags_00002910"
            },
            "calling": [
                "FUN_000026c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002910": {
                    "3": "clear_data",
                    "1": "clear_global_flags",
                    "22": "clear_flags"
                },
                "_DAT_4003d01c": {
                    "1": "system_flags",
                    "2": "data_flag",
                    "19": "flags"
                },
                "_DAT_4003d008": {
                    "1": "flag_value",
                    "23": "counter"
                },
                "DAT_1fff0da0": {
                    "11": "data1",
                    "1": "data0",
                    "3": "variable_a",
                    "5": "variable1"
                },
                "DAT_1fff0da4": {
                    "1": "data_variable2",
                    "11": "data2",
                    "3": "variable_b",
                    "5": "variable2"
                }
            }
        },
        "FUN_0000294c": {
            "entrypoint": "0x0000294c",
            "current_name": "set_flag_0000294c",
            "code": "\n\n\nvoid set_flag_0000294c(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000294c": "set_flag_0000294c"
            },
            "calling": [
                "FUN_000027b0",
                "FUN_000026d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000294c": {
                    "1": "set_bit_to_enable_interrupt",
                    "2": "set_flag_in_memory",
                    "19": "set_flag",
                    "4": "set_flag_bit"
                },
                "_DAT_4003d014": {
                    "14": "flag",
                    "1": "status_register",
                    "2": "status_flag",
                    "4": "flag_register"
                },
                "return": {
                    "1": ""
                },
                "DAT_4003d014": {
                    "2": "flag"
                }
            }
        },
        "FUN_00002970": {
            "entrypoint": "0x00002970",
            "current_name": "clear_interrupt_flag_00002970",
            "code": "\n\n\nvoid clear_interrupt_flag_00002970(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002970": "clear_interrupt_flag_00002970"
            },
            "calling": [
                "FUN_000026e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002970": {
                    "1": "clear_interrupt_flags",
                    "2": "disable_interrupts",
                    "10": "clear_interrupt_flag"
                },
                "_DAT_4003d014": {
                    "2": "interrupt_flags",
                    "1": "status_register",
                    "10": "register_value"
                },
                "0xffffffef": {
                    "1": "bit_mask"
                },
                "": {
                    "1": ""
                }
            }
        },
        "FUN_00002994": {
            "entrypoint": "0x00002994",
            "current_name": "execute_interrupt_handlers_00002994",
            "code": "\n\n\nvoid execute_interrupt_handlers_00002994(void)\n\n{\n  if (((_DAT_4003d014 & 4) != 0) && (DAT_1fff0da0 != (code *)0x0)) {\n    _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n    (*DAT_1fff0da0)(DAT_1fff0da4);\n  }\n  if (((_DAT_4003d014 & 2) != 0) && (DAT_1fff0da8 != (code *)0x0)) {\n    (*DAT_1fff0da8)(DAT_1fff0dac);\n  }\n  cortexm_isr_end();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002994": "execute_interrupt_handlers_00002994"
            },
            "calling": [],
            "called": [
                "FUN_00002798"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002994": {
                    "1": "perform_interrupt_handler",
                    "13": "execute_interrupt_handlers",
                    "5": "execute_interrupt_handler",
                    "3": "execute_isr"
                },
                "FUN_00002798": {
                    "2": "initialize_interrupt_handler",
                    "1": "initialize_peripherals"
                },
                "DAT_1fff0da0": {
                    "1": "first_interrupt_handler",
                    "3": "interrupt_handler_1",
                    "2": "handler1"
                },
                "DAT_1fff0da4": {
                    "1": "data_1",
                    "2": "interrupt_data1"
                },
                "DAT_1fff0da8": {
                    "1": "second_interrupt_handler",
                    "3": "handler_2",
                    "2": "handler2"
                },
                "DAT_1fff0dac": {
                    "1": "handler_2_data",
                    "2": "parameter_2"
                },
                "_DAT_4003d014": {
                    "1": "interrupt_status_register",
                    "6": "interrupt_flags"
                },
                "_DAT_4003d01c": {
                    "1": "interrupt_control1"
                },
                "code *DAT_1fff0da0": {
                    "1": "callback_function_1"
                },
                "code *DAT_1fff0da4": {
                    "1": "callback_parameter_1"
                },
                "code *DAT_1fff0da8": {
                    "1": "callback_function_2"
                },
                "code *DAT_1fff0dac": {
                    "1": "callback_parameter_2"
                }
            }
        },
        "FUN_00002a00": {
            "entrypoint": "0x00002a00",
            "current_name": "print_character_00002a00",
            "code": "\nvoid print_character_00002a00(undefined4 character)\n\n{\n  print(character);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a00": "print_character_00002a00",
                "param_1": "character",
                "putchar": "print"
            },
            "calling": [
                "FUN_00002e48",
                "FUN_00002d94"
            ],
            "called": [
                "FUN_00004cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002a00": {
                    "26": "print_character",
                    "2": "output_character",
                    "3": "print_char"
                },
                "param_1": {
                    "4": "input",
                    "11": "character",
                    "2": "number",
                    "1": "character_to_print",
                    "6": "value"
                },
                "putchar": {
                    "2": "print_char",
                    "4": "print_character",
                    "1": "print_to_console",
                    "6": "print"
                },
                "FUN_00004cb4": {
                    "1": "calculate_something",
                    "14": "reverse_bits"
                }
            }
        },
        "FUN_00002a18": {
            "entrypoint": "0x00002a18",
            "current_name": "find_value_index_00002a18",
            "code": "\nint find_value_index_00002a18(int *array,undefined4 target_value)\n\n{\n  int comparison_result;\n  int *current_array;\n  undefined **reboot_strings;\n  uint index;\n  int *current_string;\n  \n  current_array = array;\n  reboot_strings = &PTR_s_reboot_00007300;\n  index = 0;\n  do {\n    if (1 < index) {\n      return 0;\n    }\n    current_string = (&current_array)[index];\n    if (current_string != (int *)0x0) {\n      for (; *current_string != 0; current_string = current_string + 3) {\n        comparison_result = compare_strings(*current_string,target_value);\n        if (comparison_result == 0) {\n          return current_string[2];\n        }\n      }\n    }\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002a18": "find_value_index_00002a18",
                "param_1": "array",
                "param_2": "target_value",
                "local_18": "current_array",
                "local_14": "reboot_strings",
                "local_10": "index",
                "local_c": "current_string",
                "iVar1": "comparison_result",
                "strcmp": "compare_strings"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002a18": {
                    "1": "find_value_in_list",
                    "2": "find_value_by_key",
                    "4": "find_value_by_string",
                    "3": "find_matching_value"
                },
                "param_1": {
                    "2": "input_array",
                    "16": "array",
                    "1": "code_list"
                },
                "param_2": {
                    "6": "target_string",
                    "1": "search_term",
                    "7": "target_value",
                    "4": "value",
                    "3": "target",
                    "2": "key"
                },
                "local_18": {
                    "1": "ptr_array",
                    "3": "input_array",
                    "7": "current_array",
                    "2": "current_value",
                    "5": "array_ptr"
                },
                "local_14": {
                    "2": "reboot_codes",
                    "1": "search_array",
                    "7": "reboot_strings",
                    "5": "string_array",
                    "3": "reboot_message",
                    "4": "reboot_string"
                },
                "local_10": {
                    "21": "index",
                    "1": "iteration_count",
                    "7": "array_index"
                },
                "local_c": {
                    "1": "current_key_value",
                    "2": "current_element",
                    "11": "current_string",
                    "5": "current_value"
                },
                "iVar1": {
                    "1": "strcmp_result",
                    "6": "comparison_result"
                },
                "FUN_00004e52": {
                    "1": "compare_bytes"
                },
                "strcmp": {
                    "2": "compare_strings"
                }
            }
        },
        "FUN_00002a88": {
            "entrypoint": "0x00002a88",
            "current_name": "print_command_descriptions_00002a88",
            "code": "\nvoid print_command_descriptions_00002a88(int *commands)\n\n{\n  int *current_command;\n  undefined **command_description;\n  uint index;\n  int *current_parameter;\n  \n  iprintf(\"%-20s %s\\n\",\"Command\",\"Description\");\n  puts(\"---------------------------------------\");\n  current_command = commands;\n  command_description = &PTR_s_reboot_00007300;\n  for (index = 0; index < 2; index = index + 1) {\n    current_parameter = (&current_command)[index];\n    if (current_parameter != (int *)0x0) {\n      for (; *current_parameter != 0; current_parameter = current_parameter + 3) {\n        iprintf(\"%-20s %s\\n\",*current_parameter,current_parameter[1]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a88": "print_command_descriptions_00002a88",
                "param_1": "commands",
                "local_18": "current_command",
                "local_14": "command_description",
                "local_10": "index",
                "local_c": "current_parameter"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002a88": {
                    "22": "print_command_descriptions",
                    "1": "print_commands",
                    "5": "print_command_description",
                    "2": "display_command_description"
                },
                "param_1": {
                    "16": "commands",
                    "1": "param1",
                    "2": "command_array",
                    "10": "command_list"
                },
                "local_18": {
                    "31": "current_command"
                },
                "local_14": {
                    "3": "command_names",
                    "2": "reboot_string",
                    "1": "reboot_description",
                    "15": "command_description"
                },
                "local_10": {
                    "2": "counter",
                    "10": "command_index",
                    "3": "i",
                    "16": "index"
                },
                "local_c": {
                    "4": "current_param",
                    "2": "command",
                    "1": "current_argument",
                    "10": "current_parameter",
                    "5": "current_description"
                },
                "FUN_00004c84": {
                    "1": "reboot"
                },
                "param_2": {
                    "1": "param2"
                },
                "param_3": {
                    "1": "param3"
                },
                "param_4": {
                    "1": "param4"
                },
                "FUN_00004db8": {
                    "1": "check_param"
                }
            }
        },
        "FUN_00002b10": {
            "entrypoint": "0x00002b10",
            "current_name": "parse_command_00002b10",
            "code": "\nvoid parse_command_00002b10(undefined4 param1,byte *input_string)\n\n{\n  int comparison_result;\n  byte *next_byte;\n  byte *command_array [3];\n  code *command_handler;\n  char **command_args;\n  uint num_args;\n  byte quote_char;\n  char *current_char;\n  char *current_arg;\n  char **arg_array;\n  uint index;\n  int escape_count;\n  uint quote_count;\n  byte *current_char_ptr;\n  \n  quote_count = 0;\n  escape_count = 0;\n  current_char_ptr = input_string;\n  while( true ) {\n    input_copy = input_string;\n    handler_id = (byte *)param1;\n    if (0x20 < *current_char_ptr) {\n      if ((*current_char_ptr == 0x22) || (*current_char_ptr == 0x27)) {\n        quote_char = *current_char_ptr;\n        do {\n          next_byte = current_char_ptr + 1;\n          if (*next_byte == 0) {\n            current_char_ptr = next_byte;\n            print_message(error_message);\n            return;\n          }\n          if (*next_byte == 0x5c) {\n            escape_count = escape_count + 1;\n            current_char_ptr = current_char_ptr + 2;\n            next_byte = current_char_ptr;\n            if (*current_char_ptr == 0) {\n              print_message(error_message);\n              return;\n            }\n          }\n          current_char_ptr = next_byte;\n        } while (quote_char != *current_char_ptr);\n        if (0x20 < current_char_ptr[1]) {\n          print_message(error_message);\n          return;\n        }\n      }\n      else {\n        do {\n          if (*current_char_ptr == 0x5c) {\n            escape_count = escape_count + 1;\n            current_char_ptr = current_char_ptr + 1;\n            if (*current_char_ptr == 0) {\n              print_message(error_message);\n              return;\n            }\n          }\n          current_char_ptr = current_char_ptr + 1;\n          if (*current_char_ptr == 0x22) {\n            print_message(error_message);\n            return;\n          }\n        } while (0x20 < *current_char_ptr);\n      }\n      quote_count = quote_count + 1;\n    }\n    if (*current_char_ptr == 0) break;\n    *current_char_ptr = 0;\n    current_char_ptr = current_char_ptr + 1;\n  }\n  if (quote_count != 0) {\n    num_args = quote_count;\n    command_args = (char **)((int)command_array - ((quote_count + 1) * 4 + 7 & 0xfffffff8));\n    command_args[quote_count] = (char *)0x0;\n    current_char_ptr = input_string;\n    for (index = 0; arg_array = command_args, index < quote_count; index = index + 1) {\n      for (; *current_char_ptr == 0; current_char_ptr = current_char_ptr + 1) {\n      }\n      if ((*current_char_ptr == 0x22) || (*current_char_ptr == 0x27)) {\n        current_char_ptr = current_char_ptr + 1;\n      }\n      command_args[index] = (char *)current_char_ptr;\n      for (; *current_char_ptr != 0; current_char_ptr = current_char_ptr + 1) {\n      }\n    }\n    for (; (escape_count != 0 && (*arg_array != (char *)0x0)); arg_array = arg_array + 1) {\n      for (current_arg = *arg_array; *current_arg != '\\0'; current_arg = current_arg + 1) {\n        if (*current_arg == '\\') {\n          for (current_char = current_arg; *current_char != '\\0'; current_char = current_char + 1) {\n            *current_char = current_char[1];\n          }\n          escape_count = escape_count + -1;\n          if (escape_count == 0) break;\n        }\n      }\n    }\n    command_handler = (code *)find_command_handler(param1,*command_args);\n    if (command_handler == (code *)0x0) {\n      comparison_result = compare_strings(&DAT_00007214,*command_args);\n      if (comparison_result == 0) {\n        print_command_help(handler_id);\n      }\n      else {\n        print_formatted_message(\"shell: command not found: %s\\n\",*command_args);\n      }\n    }\n    else {\n      (*command_handler)(quote_count,command_args);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002b10": "parse_command_00002b10",
                "param_1": "param1",
                "param_2": "input_string",
                "local_48": "command_array",
                "local_3c": "command_handler",
                "local_38": "command_args",
                "local_34": "num_args",
                "local_2d": "quote_char",
                "local_2c": "current_char",
                "local_28": "current_arg",
                "local_24": "arg_array",
                "local_20": "index",
                "local_1c": "escape_count",
                "local_18": "quote_count",
                "local_14": "current_char_ptr",
                "iVar1": "comparison_result",
                "pbVar2": "next_byte",
                "puts": "print_message",
                "Elf32_Rel_ARRAY_1fff0200": "error_messages",
                "strcmp": "compare_strings",
                "print_help": "print_command_help",
                "iprintf": "print_formatted_message",
                "find_handler": "find_command_handler",
                "Elf32_Rel_ARRAY_1fff0200[9].r_info": "error_message",
                "local_48[0]": "input_copy",
                "local_48[1]": "handler_id",
                "local_4": "temp_character"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00002a18",
                "FUN_00004db8",
                "FUN_00004e52",
                "FUN_00002a88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002b10": {
                    "12": "parse_command",
                    "7": "process_input",
                    "1": "parse_shell_command",
                    "4": "process_command"
                },
                "param_1": {
                    "1": "command_list",
                    "4": "argc",
                    "6": "param_1",
                    "7": "param1",
                    "5": "param"
                },
                "param_2": {
                    "2": "command_string",
                    "3": "param2",
                    "1": "input_data",
                    "10": "input_string",
                    "4": "argv",
                    "8": "command"
                },
                "local_48": {
                    "1": "command_strings",
                    "4": "command_args",
                    "2": "parameters"
                },
                "local_3c": {
                    "9": "handler",
                    "6": "handler_function",
                    "16": "command_handler"
                },
                "local_38": {
                    "1": "args_array",
                    "2": "command_list",
                    "8": "command_args",
                    "7": "arguments",
                    "3": "command_array"
                },
                "local_34": {
                    "3": "args_count",
                    "1": "command_list_size",
                    "2": "argument_count",
                    "4": "num_arguments",
                    "6": "num_args"
                },
                "local_2d": {
                    "3": "quote",
                    "5": "quote_character",
                    "1": "delimiter",
                    "15": "quote_char",
                    "6": "quote_type"
                },
                "local_2c": {
                    "1": "curr_char",
                    "18": "current_char",
                    "6": "escape_char"
                },
                "local_28": {
                    "2": "arg",
                    "1": "inner_string",
                    "9": "current_arg",
                    "3": "current_string",
                    "4": "current_argument"
                },
                "local_24": {
                    "1": "arg_ptr_list",
                    "2": "arg_ptr_array",
                    "4": "arg_array"
                },
                "local_20": {
                    "2": "command_index",
                    "3": "current_index",
                    "1": "arg_ptr_count",
                    "10": "index"
                },
                "local_1c": {
                    "2": "backslash_count",
                    "4": "num_escapes",
                    "1": "slash_count",
                    "21": "escape_count"
                },
                "local_18": {
                    "1": "num_quoted",
                    "6": "num_quotes",
                    "2": "string_count",
                    "13": "quote_count"
                },
                "local_14": {
                    "1": "input_pointer",
                    "2": "input_ptr",
                    "7": "current_char",
                    "4": "current_byte",
                    "10": "current_char_ptr"
                },
                "FUN_00004c84": {
                    "1": "handle_command_1",
                    "4": "find_handler"
                },
                "FUN_00002a18": {
                    "1": "check_input",
                    "3": "print_help"
                },
                "FUN_00004db8": {
                    "3": "strcmp",
                    "1": "find_index"
                },
                "FUN_00004e52": {
                    "2": "execute_command",
                    "1": "replace_backslashes"
                },
                "FUN_00002a88": {
                    "1": "process_command"
                },
                "iVar1": {
                    "1": "result",
                    "8": "comparison_result"
                },
                "pbVar2": {
                    "1": "next_character",
                    "5": "next_byte",
                    "4": "next_char"
                },
                "puts": {
                    "1": "print_message"
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "1": "error_messages"
                },
                "strcmp": {
                    "2": "compare_strings",
                    "1": "string_compare"
                },
                "DAT_00007214": {
                    "1": "help_command"
                },
                "print_help": {
                    "1": "display_help"
                },
                "iprintf": {
                    "1": "print_formatted"
                },
                "find_handler": {
                    "1": "find_handler"
                },
                "Elf32_Rel_ARRAY_1fff0200[9].r_info": {
                    "1": "error_message"
                },
                "local_48[0]": {
                    "1": "input_copy"
                },
                "local_48[1]": {
                    "1": "handler_id"
                },
                "&DAT_00007214": {
                    "1": "help_command"
                },
                "shell: command not found: %s\n": {
                    "1": "error_message"
                },
                "local_30": {
                    "1": "command_args"
                },
                "local_4": {
                    "1": "temp_character"
                }
            }
        },
        "FUN_00002d94": {
            "entrypoint": "0x00002d94",
            "current_name": "read_line_00002d94",
            "code": "\nuint read_line_00002d94(undefined *buffer,int buffer_size)\n\n{\n  int input_char;\n  byte buffer_byte;\n  bool is_buffer_empty;\n  undefined *current_char;\n  \n  current_char = buffer;\n  while( true ) {\n    if (buffer_size + -1 <= (int)current_char - (int)buffer) {\n      return 0xffffffff;\n    }\n    input_char = input_char();\n    if (input_char < 0) break;\n    if ((input_char == 0xd) || (input_char == 10)) {\n      *current_char = 0;\n      print_character(0xd);\n      print_character(10);\n      is_buffer_empty = current_char == buffer;\n      if (is_buffer_empty) {\n        buffer = (undefined *)0x1;\n      }\n      buffer_byte = (byte)buffer;\n      if (!is_buffer_empty) {\n        buffer_byte = 0;\n      }\n      return (uint)buffer_byte;\n    }\n    if ((input_char == 8) || (input_char == 0x7f)) {\n      if (current_char != buffer) {\n        current_char = current_char + -1;\n        *current_char = 0;\n        print_character(8);\n        print_character(0x20);\n        print_character(8);\n      }\n    }\n    else {\n      *current_char = (char)input_char;\n      print_character(input_char);\n      current_char = current_char + 1;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00002d94": "read_line_00002d94",
                "param_1": "buffer",
                "param_2": "buffer_size",
                "local_c": "current_char",
                "iVar1": "input_char",
                "bVar2": "buffer_byte",
                "bVar3": "is_buffer_empty",
                "_putchar": "print_character",
                "getchar": "input_char"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00002a00",
                "FUN_00004418"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002d94": {
                    "1": "get_input",
                    "2": "process_input",
                    "13": "read_line",
                    "5": "read_input"
                },
                "param_1": {
                    "4": "input_buffer",
                    "1": "input_array",
                    "22": "buffer",
                    "2": "output_buffer"
                },
                "param_2": {
                    "20": "buffer_size",
                    "2": "max_length",
                    "5": "size",
                    "1": "max_string_length",
                    "3": "max_size"
                },
                "local_c": {
                    "5": "current_position",
                    "1": "ptr",
                    "25": "current_char"
                },
                "iVar1": {
                    "4": "input",
                    "1": "char_code",
                    "17": "input_char",
                    "2": "input_character"
                },
                "bVar2": {
                    "1": "first_byte",
                    "2": "is_buffer_empty",
                    "3": "output_byte",
                    "6": "buffer_byte",
                    "4": "byte_value"
                },
                "bVar3": {
                    "1": "is_newline",
                    "8": "is_first_char",
                    "10": "is_buffer_empty"
                },
                "_putchar": {
                    "3": "print_character",
                    "2": "output_char",
                    "1": "output_character"
                },
                "getchar": {
                    "1": "get_input_character"
                },
                "FUN_00002a00": {
                    "1": "print_char"
                },
                "FUN_00004418": {
                    "1": "get_char"
                }
            }
        },
        "FUN_00002e48": {
            "entrypoint": "0x00002e48",
            "current_name": "print_arrow_and_space_00002e48",
            "code": "\nvoid print_arrow_and_space_00002e48(void)\n\n{\n  print_character(0x3e);\n  print_character(0x20);\n  flush_output(*(undefined4 *)(array[16].offset + 8));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002e48": "print_arrow_and_space_00002e48",
                "_putchar": "print_character",
                "Elf32_Rel_ARRAY_1fff0200": "array",
                "r_offset": "offset",
                "fflush": "flush_output"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_000041d0",
                "FUN_00002a00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002e48": {
                    "1": "print_greater_than_or_equal",
                    "14": "print_arrow_and_space",
                    "5": "print_arrow",
                    "4": "print_greater_than_space",
                    "2": "print_symbols"
                },
                "_putchar": {
                    "4": "print_character"
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "1": "elf_rel_array",
                    "2": "array"
                },
                "r_offset": {
                    "3": "offset"
                },
                "param_1": {
                    "4": "input",
                    "1": "number",
                    "3": "value",
                    "2": "input_param"
                },
                "param_2": {
                    "3": "param2",
                    "1": "output",
                    "2": "param_2"
                },
                "param_3": {
                    "1": "arg2",
                    "3": "param3",
                    "2": "param_3"
                },
                "FUN_000041d0": {
                    "1": "reverse_integer",
                    "2": "perform_operation",
                    "6": "process_data"
                },
                "FUN_00002a00": {
                    "1": "initialize_output",
                    "3": "print_char",
                    "20": "print_character"
                },
                "fflush": {
                    "1": "flush_output"
                },
                "PTR_": {
                    "1": "pointer"
                },
                "DAT_": {
                    "1": "data"
                },
                "FFlush": {
                    "1": "flush_stream"
                }
            }
        },
        "FUN_00002e6c": {
            "entrypoint": "0x00002e6c",
            "current_name": "read_and_handle_input_00002e6c",
            "code": "\nvoid read_and_handle_input_00002e6c(undefined4 arg1,undefined4 arg2,undefined4 buffer_size)\n\n{\n  int read_result;\n  \n  display_prompt();\n  do {\n    read_result = get_user_input(arg2,buffer_size);\n    if (read_result == 0) {\n      process_input_line(arg1,arg2);\n    }\n    display_prompt();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002e6c": "read_and_handle_input_00002e6c",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "buffer_size",
                "iVar1": "read_result",
                "handle_input_line": "process_input_line",
                "print_prompt": "display_prompt",
                "readline": "get_user_input"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_00002b10",
                "FUN_00002e48",
                "FUN_00002d94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002e6c": {
                    "5": "read_and_handle_input",
                    "3": "read_input_lines",
                    "1": "read_input",
                    "2": "handle_input_loop",
                    "4": "readline_and_handle_input"
                },
                "param_1": {
                    "2": "input_param",
                    "1": "prompt",
                    "8": "arg1",
                    "7": "param_1"
                },
                "param_2": {
                    "6": "input_buffer",
                    "1": "param_2",
                    "2": "param_buffer",
                    "5": "buffer",
                    "7": "arg2"
                },
                "param_3": {
                    "1": "handle_input_param",
                    "10": "buffer_size",
                    "2": "param_length",
                    "7": "arg3"
                },
                "iVar1": {
                    "11": "read_result",
                    "6": "readline_result",
                    "1": "read_status"
                },
                "handle_input_line": {
                    "1": "handle_input_line",
                    "5": "process_input_line"
                },
                "print_prompt": {
                    "1": "print_input_prompt",
                    "4": "display_prompt"
                },
                "readline": {
                    "1": "get_input"
                },
                "FUN_00002b10": {
                    "2": "handle_input_line",
                    "1": "print_func_and_buffer"
                },
                "FUN_00002e48": {
                    "1": "clear_screen",
                    "4": "print_prompt",
                    "2": "handle_input_line"
                },
                "FUN_00002d94": {
                    "1": "find_pattern",
                    "5": "readline"
                }
            }
        },
        "FUN_00002e9c": {
            "entrypoint": "0x00002e9c",
            "current_name": "reboot_system_00002e9c",
            "code": "\nundefined4 reboot_system_00002e9c(void)\n\n{\n  reboot();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002e9c": "reboot_system_00002e9c",
                "pm_reboot": "reboot"
            },
            "calling": [],
            "called": [
                "FUN_00003688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002e9c": {
                    "1": "reboot_device",
                    "28": "reboot_system",
                    "2": "reboot_and_return"
                },
                "FUN_00003688": {
                    "1": "execute_shutdown",
                    "18": "perform_cleanup",
                    "5": "perform_additional_tasks"
                },
                "pm_reboot": {
                    "1": "reboot"
                }
            }
        },
        "FUN_00002eb4": {
            "entrypoint": "0x00002eb4",
            "current_name": "execute_ps_function_00002eb4",
            "code": "\nundefined4 execute_ps_function_00002eb4(void)\n\n{\n  print_status();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002eb4": "execute_ps_function_00002eb4",
                "ps": "print_status"
            },
            "calling": [],
            "called": [
                "FUN_0000211c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002eb4": {
                    "1": "execute_process",
                    "4": "initialize_application",
                    "10": "execute_ps_function",
                    "6": "initialize_system"
                },
                "ps": {
                    "1": "print_something",
                    "5": "print_status",
                    "2": "perform_initialization"
                },
                "FUN_0000211c": {
                    "1": "perform_initial_setup",
                    "2": "execute_subroutine",
                    "3": "perform_additional_task"
                }
            }
        },
        "FUN_00002ecc": {
            "entrypoint": "0x00002ecc",
            "current_name": "read_from_device_00002ecc",
            "code": "\nvoid read_from_device_00002ecc(undefined4 device_number,int device_address)\n\n{\n  undefined4 class_string;\n  undefined4 device_type;\n  undefined data_buffer [8];\n  uint data_size;\n  \n  data_size = saul_reg_read(device_address,data_buffer);\n  if ((int)data_size < 1) {\n    iprintf(\"error: failed to read from device #%i\\n\",device_number);\n  }\n  else {\n    device_type = *(undefined4 *)(device_address + 8);\n    class_string = saul_class_to_str(*(undefined *)(*(int *)(device_address + 0xc) + 8));\n    iprintf(\"Reading from #%i (%s|%s)\\n\",device_number,device_type,class_string);\n    phydat_dump(data_buffer,data_size & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002ecc": "read_from_device_00002ecc",
                "param_1": "device_number",
                "param_2": "device_address",
                "uVar1": "class_string",
                "uVar2": "device_type",
                "auStack_1c": "data_buffer",
                "local_14": "data_size"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_00002f30"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_000039e8",
                "FUN_00003d64",
                "FUN_00003694"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002ecc": {
                    "1": "read_and_dump_phydata",
                    "4": "read_data_from_device",
                    "2": "read_and_dump_sensor_data",
                    "7": "read_device_data",
                    "11": "read_from_device"
                },
                "param_1": {
                    "27": "device_number",
                    "1": "device_id",
                    "3": "device_index"
                },
                "param_2": {
                    "1": "device_location",
                    "25": "device_address"
                },
                "uVar1": {
                    "4": "class_name",
                    "1": "str_device_type",
                    "3": "class_to_string",
                    "13": "class_string"
                },
                "uVar2": {
                    "1": "device_data",
                    "7": "device_name",
                    "2": "device_string",
                    "14": "device_type"
                },
                "auStack_1c": {
                    "1": "sensor_buffer",
                    "26": "data_buffer",
                    "2": "buffer"
                },
                "local_14": {
                    "13": "data_size",
                    "1": "num_readings",
                    "11": "read_result",
                    "3": "data_length",
                    "2": "read_size"
                }
            }
        },
        "FUN_00002f30": {
            "entrypoint": "0x00002f30",
            "current_name": "iterate_and_probe_00002f30",
            "code": "\nvoid iterate_and_probe_00002f30(void)\n\n{\n  int iteration_count;\n  undefined4 *current_probe;\n  \n  iteration_count = 0;\n  for (current_probe = DAT_1fff0db0; current_probe != (undefined4 *)0x0; current_probe = (undefined4 *)*current_probe) {\n    perform_probe(iteration_count,current_probe);\n    puts(&DAT_00007380);\n    iteration_count = iteration_count + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f30": "iterate_and_probe_00002f30",
                "local_10": "iteration_count",
                "local_c": "current_probe",
                "probe": "perform_probe"
            },
            "calling": [
                "FUN_00002fe0"
            ],
            "called": [
                "FUN_00002ecc",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002f30": {
                    "1": "print_probed_values",
                    "17": "iterate_and_probe",
                    "3": "print_probes",
                    "2": "iterate_probes_and_print"
                },
                "param_1": {
                    "1": "start_address",
                    "2": "param1"
                },
                "param_2": {
                    "1": "counter_limit",
                    "2": "probe_value",
                    "4": "index"
                },
                "local_10": {
                    "1": "item_count",
                    "2": "probe_count",
                    "6": "index",
                    "7": "iteration_count"
                },
                "local_c": {
                    "1": "current_device",
                    "2": "current_item",
                    "5": "current_probe",
                    "4": "current_address"
                },
                "FUN_00002ecc": {
                    "1": "do_probe",
                    "4": "probe"
                },
                "FUN_00004db8": {
                    "1": "convert_value",
                    "2": "process_data"
                },
                "probe": {
                    "1": "perform_probe"
                }
            }
        },
        "FUN_00002f74": {
            "entrypoint": "0x00002f74",
            "current_name": "print_device_info_00002f74",
            "code": "\nvoid print_device_info_00002f74(void)\n\n{\n  undefined4 class_str;\n  int device_count;\n  undefined4 *device_list;\n  \n  device_list = DAT_1fff0db0;\n  device_count = 0;\n  if (DAT_1fff0db0 == (undefined4 *)0x0) {\n    print_string(\"No devices found\");\n  }\n  else {\n    print_string(\"ID\\tClass\\t\\tName\");\n  }\n  for (; device_list != (undefined4 *)0x0; device_list = (undefined4 *)*device_list) {\n    class_str = get_class_string(*(undefined *)(device_ptr[3] + 8));\n    print_device_info_00002f74rmation(\"#%i\\t%s\\t%s\\n\",device_count,class_str,device_ptr[2]);\n    device_count = device_count + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f74": "print_device_info_00002f74",
                "local_18": "device_count",
                "local_14": "device_list",
                "uVar1": "class_str",
                "saul_class_to_str": "get_class_string",
                "local_14[3]": "device_ptr[3]",
                "local_14[2]": "device_ptr[2]",
                "iprintf": "print_device_information",
                "puts": "print_string"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_000039e8",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002f74": {
                    "1": "enumerate_devices",
                    "10": "print_device_information",
                    "7": "print_device_list",
                    "11": "print_device_info"
                },
                "local_18": {
                    "7": "device_index",
                    "1": "device_counter",
                    "23": "device_count"
                },
                "local_14": {
                    "1": "devices_array",
                    "19": "device_list",
                    "4": "current_device"
                },
                "uVar1": {
                    "1": "device_class_str",
                    "8": "class_str",
                    "4": "device_class",
                    "3": "class_string"
                },
                "FUN_00004c84": {
                    "1": "print_class_str"
                },
                "FUN_000039e8": {
                    "1": "saul_class_to_string",
                    "2": "saul_class_to_str"
                },
                "FUN_00004db8": {
                    "1": "get_class_from_device"
                },
                "param_1": {
                    "1": "param",
                    "2": "device_list"
                },
                "param_2": {
                    "2": "device_count",
                    "1": "param_2"
                },
                "param_3": {
                    "1": "undefined_var3",
                    "2": "param3"
                },
                "param_4": {
                    "1": "undefined_var4",
                    "2": "param4"
                },
                "DAT_1fff0db0": {
                    "1": "device_ptr"
                },
                "saul_class_to_str": {
                    "1": "get_device_class_string",
                    "4": "get_class_string"
                },
                "local_14[3]": {
                    "1": "device_ptr[3]"
                },
                "local_14[2]": {
                    "1": "device_ptr[2]"
                },
                "iprintf": {
                    "1": "print_formatted"
                },
                "puts": {
                    "2": "print_string"
                }
            }
        },
        "FUN_00002fe0": {
            "entrypoint": "0x00002fe0",
            "current_name": "device_probe_00002fe0",
            "code": "\nvoid device_probe_00002fe0(int argc,undefined4 *argv)\n\n{\n  int comparison_result;\n  undefined4 device_id;\n  \n  if (argc < 3) {\n    print_usage(\"usage: %s %s <device id>|all\\n\",*argv,argv[1]);\n  }\n  else {\n    comparison_result = compare_strings(selected_device,&DAT_000073d4);\n    if (comparison_result == 0) {\n      probe_all_devices();\n    }\n    else {\n      device_id = string_to_int(selected_device);\n      comparison_result = find_device_index(device_id);\n      if (comparison_result == 0) {\n        print_error(\"error: undefined device id given\");\n      }\n      else {\n        probe_device(device_id,comparison_result);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002fe0": "device_probe_00002fe0",
                "param_1": "argc",
                "param_2": "argv",
                "iVar1": "comparison_result",
                "uVar2": "device_id",
                "probe_all": "probe_all_devices",
                "saul_reg_find_nth": "find_device_index",
                "probe": "probe_device",
                "probe_all()": "probe_all_devices()",
                "iprintf": "print_usage",
                "strcmp": "compare_strings",
                "atoi": "string_to_int",
                "puts": "print_error",
                "param_2[2]": "selected_device"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00002ecc",
                "FUN_00003d24",
                "FUN_00002f30",
                "FUN_00004db8",
                "FUN_00004e52",
                "FUN_00004042"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00002fe0": {
                    "3": "process_device",
                    "1": "check_device",
                    "2": "process_device_information",
                    "4": "handle_device_probe",
                    "8": "device_probe"
                },
                "param_1": {
                    "1": "status",
                    "25": "argc",
                    "5": "device_count"
                },
                "param_2": {
                    "3": "arguments",
                    "27": "argv",
                    "1": "command_args"
                },
                "iVar1": {
                    "1": "device_compare_result",
                    "3": "strcmp_result",
                    "2": "result",
                    "10": "device_id",
                    "12": "comparison_result"
                },
                "uVar2": {
                    "1": "device_number",
                    "7": "parsed_id",
                    "21": "device_id"
                },
                "probe_all": {
                    "9": "probe_all_devices"
                },
                "saul_reg_find_nth": {
                    "2": "find_device",
                    "1": "find_device_id",
                    "3": "find_device_index"
                },
                "probe": {
                    "9": "probe_device"
                },
                "&DAT_000073d4": {
                    "1": "all",
                    "2": "all_device_id"
                },
                "probe_all()": {
                    "1": "probe_all_devices()"
                },
                "saul_reg_find_nth()": {
                    "1": "find_nth_saul_device()"
                },
                "probe()": {
                    "1": "probe_device()"
                },
                "iprintf()": {
                    "1": "print_usage()"
                },
                "strcmp()": {
                    "1": "compare_strings()"
                },
                "atoi()": {
                    "1": "convert_to_integer()"
                },
                "puts()": {
                    "1": "print_error()"
                },
                "DAT_000073d4": {
                    "1": "all_device",
                    "2": "undefined_device_id"
                },
                "iprintf": {
                    "4": "print_usage"
                },
                "strcmp": {
                    "2": "compare_strings",
                    "1": "compare_ids"
                },
                "atoi": {
                    "1": "parse_int",
                    "2": "string_to_int"
                },
                "puts": {
                    "6": "print_error"
                },
                "FUN_00004c84": {
                    "1": "function_1",
                    "4": "probe_all",
                    "2": "print_usage"
                },
                "FUN_00002ecc": {
                    "1": "function_2",
                    "2": "find_device_index",
                    "6": "saul_reg_find_nth"
                },
                "FUN_00003d24": {
                    "1": "retrieve_device_information",
                    "3": "atoi"
                },
                "FUN_00002f30": {
                    "1": "puts_error_message",
                    "2": "puts",
                    "4": "print_usage"
                },
                "FUN_00004db8": {
                    "1": "parse_device_id",
                    "3": "probe",
                    "2": "atoi"
                },
                "FUN_00004e52": {
                    "4": "strcmp",
                    "1": "compare_byte_arrays"
                },
                "FUN_00004042": {
                    "2": "iprintf",
                    "1": "print_usage",
                    "4": "print_error"
                },
                "saoul_reg_find_nth": {
                    "1": "find_nth_saul_reg"
                },
                "param_2[2]": {
                    "1": "selected_device"
                }
            }
        },
        "FUN_0000305c": {
            "entrypoint": "0x0000305c",
            "current_name": "write_to_device_0000305c",
            "code": "\nvoid write_to_device_0000305c(int argc,undefined4 *argv)\n\n{\n  undefined2 device_id;\n  undefined2 values [4];\n  uint num_values;\n  int device_index;\n  undefined4 device_id;\n  int i;\n  \n  if (argc < 4) {\n    iprintf(\"usage: %s %s <device id> <value 0> [<value 1> [<value 2]]\\n\",*argv,device_id_description);\n  }\n  else {\n    device_id = atoi(value_0);\n    device_index = saul_reg_find_nth(device_id);\n    if (device_index == 0) {\n      puts(\"error: undefined device given\");\n    }\n    else {\n      memset(values,0,8);\n      if (5 < argc) {\n        argc = 6;\n      }\n      num_values = argc - 3;\n      for (i = 0; i < (int)num_values; i = i + 1) {\n        device_id = atoi(argv[i + 3]);\n        values[i] = device_id;\n      }\n      iprintf(\"Writing to device #%i - %s\\n\",device_id,*(undefined4 *)(device_index + 8));\n      phydat_dump(values,num_values & 0xff);\n      num_values = saul_reg_write(device_index,values);\n      if ((int)num_values < 1) {\n        if (num_values == -0x86) {\n          iprintf(\"error: device #%i is not writable\\n\",device_id);\n        }\n        else {\n          iprintf(\"error: failure to write to device #%i\\n\",device_id);\n        }\n      }\n      else {\n        iprintf(\"data successfully written to device #%i\\n\",device_id);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000305c": "write_to_device_0000305c",
                "param_1": "argc",
                "param_2": "argv",
                "uVar1": "device_id",
                "auStack_20": "values",
                "local_18": "num_values",
                "local_14": "device_index",
                "local_10": "device_id",
                "local_c": "i",
                "param_2[1]": "device_id_description",
                "param_2[2]": "value_0"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00003d94",
                "FUN_00004622",
                "FUN_00003d24",
                "FUN_00004db8",
                "FUN_00003694",
                "FUN_00004042"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000305c": {
                    "27": "write_to_device",
                    "4": "write_device_data"
                },
                "param_1": {
                    "30": "argc",
                    "1": "num_arguments"
                },
                "param_2": {
                    "1": "arguments",
                    "30": "argv"
                },
                "uVar1": {
                    "9": "value",
                    "16": "device_id",
                    "2": "device_value",
                    "1": "device_index"
                },
                "auStack_20": {
                    "22": "values",
                    "5": "values_array",
                    "1": "values_arr"
                },
                "local_18": {
                    "24": "num_values",
                    "1": "num_values_clamped",
                    "4": "value_count"
                },
                "local_14": {
                    "2": "device_id",
                    "1": "device_found",
                    "26": "device_index"
                },
                "local_10": {
                    "1": "value_0",
                    "2": "device_id_string",
                    "3": "value0",
                    "4": "device_value",
                    "11": "device_id"
                },
                "local_c": {
                    "1": "current_index",
                    "17": "i",
                    "9": "index",
                    "2": "value_index"
                },
                "local_8": {
                    "1": "temp"
                },
                "param_2[1]": {
                    "1": "device_id"
                },
                "param_2[2]": {
                    "1": "value_0"
                },
                "param_2[3]": {
                    "1": "value_1"
                },
                "param_2[4]": {
                    "1": "value_2"
                },
                "local_18 & 0xff": {
                    "1": "num_values_clamped_masked"
                },
                "*(undefined4 *)(local_14 + 8)": {
                    "1": "device_name"
                },
                "local_18 = saul_reg_write(local_14,auStack_20)": {
                    "1": "write_success"
                },
                "param_1 - 3": {
                    "1": "num_values"
                },
                "local_14 + 8": {
                    "1": "device_name_ptr"
                },
                "local_18 == -0x86": {
                    "1": "is_not_writable_error"
                }
            }
        },
        "FUN_0000316c": {
            "entrypoint": "0x0000316c",
            "current_name": "process_command_0000316c",
            "code": "\nundefined4 process_command_0000316c(int argc,undefined4 *argv)\n\n{\n  int comparison_result;\n  \n  if (argc < 2) {\n    display_help();\n  }\n  else {\n    comparison_result = compare_strings(argv[1],&DAT_000074ec);\n    if (comparison_result == 0) {\n      perform_read(argc,argv);\n    }\n    else {\n      comparison_result = compare_strings(argv[1],\"perform_write\");\n      if (comparison_result == 0) {\n        perform_write(argc,argv);\n      }\n      else {\n        print_usage(\"usage: %s perform_read|perform_write\\n\",*argv);\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000316c": "process_command_0000316c",
                "param_1": "argc",
                "param_2": "argv",
                "iVar1": "comparison_result",
                "list": "display_help",
                "read": "perform_read",
                "write": "perform_write",
                "iprintf": "print_usage",
                "strcmp": "compare_strings"
            },
            "calling": [],
            "called": [
                "FUN_00002f74",
                "FUN_00004c84",
                "FUN_00002fe0",
                "FUN_00004e52",
                "FUN_0000305c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000316c": {
                    "3": "handle_command",
                    "2": "handle_read_write",
                    "4": "handle_operation",
                    "1": "perform_operation",
                    "6": "process_command"
                },
                "param_1": {
                    "2": "operation_count",
                    "1": "operation_type",
                    "15": "argc",
                    "3": "num_params",
                    "4": "num_args"
                },
                "param_2": {
                    "3": "arguments",
                    "4": "args",
                    "1": "command_array",
                    "15": "argv"
                },
                "iVar1": {
                    "16": "comparison_result",
                    "3": "result",
                    "1": "cmp_result",
                    "7": "strcmp_result"
                },
                "list": {
                    "1": "print_available_operations"
                },
                "DAT_000074ec": {
                    "1": "read_command"
                },
                "read": {
                    "1": "perform_read"
                },
                "write": {
                    "1": "perform_write"
                },
                "iprintf": {
                    "2": "print_usage"
                },
                "strcmp": {
                    "1": "compare_strings"
                },
                "FUN_00002f74": {
                    "1": "list"
                }
            }
        },
        "FUN_000031e0": {
            "entrypoint": "0x000031e0",
            "current_name": "print_alarm_message_000031e0",
            "code": "\nvoid print_alarm_message_000031e0(void)\n\n{\n  print_message(\"The alarm rang\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_000031e0": "print_alarm_message_000031e0",
                "puts": "print_message"
            },
            "calling": [],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000031e0": {
                    "2": "print_alarm",
                    "1": "display_alarm_message",
                    "28": "print_alarm_message"
                },
                "param_1": {
                    "3": "value",
                    "7": "input_value",
                    "1": "parameter"
                },
                "FUN_00004db8": {
                    "10": "process_parameter",
                    "2": "check_condition",
                    "1": "reverse_integer",
                    "5": "calculate_something"
                },
                "puts": {
                    "1": "print",
                    "2": "print_message"
                },
                "undefined4 FUN_00004db8": {
                    "1": "analyze_input"
                }
            }
        },
        "FUN_000031fc": {
            "entrypoint": "0x000031fc",
            "current_name": "calculate_day_of_week_000031fc",
            "code": "\nint calculate_day_of_week_000031fc(int year,int month,int day)\n\n{\n  byte is_leap_year;\n  int adjusted_year;\n  \n  adjusted_year = month;\n  if (month < 3) {\n    adjusted_year = 1;\n  }\n  is_leap_year = (byte)adjusted_year;\n  if (2 < month) {\n    is_leap_year = 0;\n  }\n  year = year - (uint)is_leap_year;\n  adjusted_year = year;\n  if (year < 0) {\n    adjusted_year = year + 3;\n  }\n  return ((((adjusted_year >> 2) + year) - year / 100) + year / 400 +\n          *(int *)((int)weekday_offsets + (month + -1) * 4 + 0x50) + day) % 7;\n}\n\n",
            "renaming": {
                "FUN_000031fc": "calculate_day_of_week_000031fc",
                "param_1": "year",
                "param_2": "month",
                "param_3": "day",
                "bVar1": "is_leap_year",
                "iVar2": "adjusted_year",
                "Elf32_Rel_ARRAY_1fff0200": "weekday_offsets"
            },
            "calling": [
                "FUN_0000328c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000031fc": {
                    "1": "find_weekday",
                    "11": "calculate_weekday",
                    "16": "calculate_day_of_week"
                },
                "param_1": {
                    "28": "year",
                    "1": "adjusted_year"
                },
                "param_2": {
                    "30": "month",
                    "1": "current_month"
                },
                "param_3": {
                    "1": "current_year",
                    "28": "day"
                },
                "bVar1": {
                    "1": "month_adjustment",
                    "22": "is_leap_year"
                },
                "iVar2": {
                    "1": "month_adjustment",
                    "19": "adjusted_year",
                    "9": "adjusted_month"
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "3": "weekday_offsets",
                    "1": "calendar_table",
                    "2": "week_days"
                },
                "new_variable_name": {
                    "1": "result"
                }
            }
        },
        "FUN_0000328c": {
            "entrypoint": "0x0000328c",
            "current_name": "parse_input_0000328c",
            "code": "\nundefined4 parse_input_0000328c(undefined4 *input_strings,int *output_array)\n\n{\n  int result;\n  int remaining_string;\n  short parsed_value;\n  \n  parsed_value = convert_string_to_number(*input_strings,&remaining_string,10);\n  result_array[5] = parsed_value + -0x76c;\n  parsed_value = convert_string_to_number(remaining_string + 1,&remaining_string,10);\n  result_array[4] = parsed_value + -1;\n  parsed_value = convert_string_to_number(remaining_string + 1,&remaining_string,10);\n  result_array[3] = parsed_value_3;\n  parsed_value = convert_string_to_number(data_input[1],&remaining_string,10);\n  result_array[2] = parsed_value_3;\n  parsed_value = convert_string_to_number(remaining_string + 1,&remaining_string,10);\n  result_array[1] = parsed_value_3;\n  parsed_value = convert_string_to_number(remaining_string + 1,&remaining_string,10);\n  *output_array = parsed_value_3;\n  result = calculate_dow(result_array[5] + 0x76c,result_array[4] + 1,result_array[3]);\n  result_array[6] = result;\n  result_array[8] = -1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000328c": "parse_input_0000328c",
                "param_1": "input_strings",
                "param_2": "output_array",
                "local_10": "remaining_string",
                "local_a": "parsed_value",
                "param_2[5]": "result_array[5]",
                "param_2[4]": "result_array[4]",
                "param_2[3]": "result_array[3]",
                "param_2[2]": "result_array[2]",
                "param_2[1]": "result_array[1]",
                "dow": "calculate_dow",
                "param_2[6]": "result_array[6]",
                "param_2[8]": "result_array[8]",
                "iVar1": "result",
                "strtol": "convert_string_to_number",
                "(int)local_a": "parsed_value_3",
                "param_1[1]": "data_input[1]"
            },
            "calling": [
                "FUN_000033f4",
                "FUN_00003478"
            ],
            "called": [
                "FUN_000031fc",
                "FUN_00004f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000328c": {
                    "1": "parse_data_and_compute",
                    "4": "parse_and_calculate_values",
                    "6": "parse_input",
                    "5": "parse_and_calculate",
                    "2": "parse_input_and_calculate"
                },
                "param_1": {
                    "1": "strings",
                    "2": "str_array",
                    "21": "input_strings"
                },
                "param_2": {
                    "12": "output_array",
                    "1": "result_list",
                    "7": "output_values",
                    "2": "parsed_output",
                    "3": "result_array"
                },
                "local_10": {
                    "1": "end_of_integer",
                    "4": "remainder",
                    "2": "next_token",
                    "3": "endptr"
                },
                "local_a": {
                    "1": "parsed_num",
                    "20": "parsed_value",
                    "3": "current_value"
                },
                "param_2[5]": {
                    "1": "output_array[5]",
                    "2": "result_array[5]"
                },
                "param_2[4]": {
                    "2": "result_array[4]",
                    "1": "output_array[4]"
                },
                "param_2[3]": {
                    "2": "result_array[3]",
                    "1": "output_array[3]"
                },
                "param_2[2]": {
                    "2": "result_array[2]",
                    "1": "output_array[2]"
                },
                "param_2[1]": {
                    "1": "output_array[1]",
                    "2": "result_array[1]"
                },
                "*param_2": {
                    "2": "result_array[0]",
                    "1": "output_array[0]"
                },
                "dow": {
                    "4": "calculate_dow",
                    "1": "get_day_of_week",
                    "3": "calculate_day_of_week"
                },
                "param_2[6]": {
                    "2": "result_array[6]"
                },
                "param_2[8]": {
                    "2": "result_array[8]"
                },
                "iVar1": {
                    "1": "result1",
                    "3": "day_of_week",
                    "8": "result",
                    "5": "dow_result"
                },
                "FUN_000031fc": {
                    "1": "dow"
                },
                "FUN_00004f84": {
                    "1": "process_bytes"
                },
                "strtol": {
                    "1": "convert_string_to_number"
                },
                "local_a + -0x76c": {
                    "1": "parsed_value_1"
                },
                "local_a + -1": {
                    "1": "parsed_value_2"
                },
                "(int)local_a": {
                    "1": "parsed_value_3"
                },
                "param_1[1]": {
                    "1": "data_input[1]"
                }
            }
        },
        "FUN_00003378": {
            "entrypoint": "0x00003378",
            "current_name": "print_date_time_00003378",
            "code": "\nundefined4 print_date_time_00003378(undefined4 *date_time)\n\n{\n  print_formatted_date_time(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",year + 0x76c,month + 1,day,hour,\n          minute,*date_time);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00003378": "print_date_time_00003378",
                "param_1": "date_time",
                "param_1[5]": "year",
                "param_1[4]": "month",
                "param_1[3]": "day",
                "param_1[2]": "hour",
                "param_1[1]": "minute",
                "iprintf": "print_formatted_date_time"
            },
            "calling": [
                "FUN_00003444",
                "FUN_000033c0"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00003378": {
                    "27": "print_date_time",
                    "1": "print_formatted_date_time",
                    "2": "print_datetime"
                },
                "param_1": {
                    "1": "datetime",
                    "13": "date_time",
                    "11": "date_time_array",
                    "3": "date_time_params"
                },
                "param_1[5]": {
                    "20": "year"
                },
                "param_1[4]": {
                    "20": "month"
                },
                "param_1[3]": {
                    "21": "day"
                },
                "param_1[2]": {
                    "21": "hour"
                },
                "param_1[1]": {
                    "21": "minute"
                },
                "*param_1": {
                    "1": "date_time",
                    "21": "second"
                },
                "iprintf": {
                    "1": "formatted_print",
                    "6": "print_formatted_date_time"
                },
                "param_1[5] + 0x76c": {
                    "1": "year"
                },
                "param_1[4] + 1": {
                    "1": "month"
                }
            }
        },
        "FUN_000033c0": {
            "entrypoint": "0x000033c0",
            "current_name": "get_and_print_rtc_alarm_000033c0",
            "code": "\nbool get_and_print_rtc_alarm_000033c0(void)\n\n{\n  int result;\n  undefined alarm_data [36];\n  \n  result = rtc_get_alarm(alarm_data);\n  if (result != 0) {\n    puts(\"rtc: error getting alarm\");\n  }\n  else {\n    display_alarm_time(alarm_data);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_000033c0": "get_and_print_rtc_alarm_000033c0",
                "auStack_2c": "alarm_data",
                "iVar1": "result",
                "_print_time": "display_alarm_time"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002690",
                "FUN_00004db8",
                "FUN_00003378"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000033c0": {
                    "1": "get_and_print_rtc_alarm_status",
                    "5": "get_and_print_alarm_time",
                    "6": "get_and_print_rtc_alarm",
                    "3": "get_alarm_and_print_time",
                    "4": "get_and_print_alarm_status"
                },
                "auStack_2c": {
                    "5": "alarm_status",
                    "1": "rtc_alarm_data",
                    "3": "alarm_buffer",
                    "9": "alarm_data",
                    "7": "alarm_time"
                },
                "iVar1": {
                    "4": "error_code",
                    "1": "return_val",
                    "12": "result"
                },
                "_print_time": {
                    "1": "display_alarm_time"
                }
            }
        },
        "FUN_000033f4": {
            "entrypoint": "0x000033f4",
            "current_name": "set_alarm_000033f4",
            "code": "\nundefined4 set_alarm_000033f4(undefined4 input_time)\n\n{\n  int parse_result;\n  undefined4 return_value;\n  undefined parsed_time [36];\n  \n  parse_result = parse_time(input_time,parsed_time);\n  if (parse_result == 0) {\n    parse_result = set_alarm_000033f4(parsed_time,0x31e1,0);\n    if (parse_result == -1) {\n      print_error(\"rtc: error setting alarm\");\n      return_value = 1;\n    }\n    else {\n      return_value = 0;\n    }\n  }\n  else {\n    return_value = 1;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_000033f4": "set_alarm_000033f4",
                "param_1": "input_time",
                "iVar1": "parse_result",
                "uVar2": "return_value",
                "auStack_2c": "parsed_time",
                "_parse_time": "parse_time",
                "rtc_set_alarm": "set_alarm",
                "puts": "print_error"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_0000328c",
                "FUN_00002654"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000033f4": {
                    "1": "set_alarm_on_rtc",
                    "12": "set_alarm",
                    "10": "set_alarm_if_valid_time"
                },
                "param_1": {
                    "6": "time_input",
                    "1": "time",
                    "8": "time_string",
                    "2": "alarm_time",
                    "13": "input_time"
                },
                "iVar1": {
                    "30": "parse_result",
                    "1": "result"
                },
                "uVar2": {
                    "23": "return_value",
                    "1": "success_flag",
                    "2": "status"
                },
                "auStack_2c": {
                    "1": "time_array",
                    "12": "time_buffer",
                    "14": "parsed_time"
                },
                "_parse_time": {
                    "4": "parse_time"
                },
                "rtc_set_alarm": {
                    "4": "set_alarm"
                },
                "puts": {
                    "1": "print_error"
                }
            }
        },
        "FUN_00003444": {
            "entrypoint": "0x00003444",
            "current_name": "get_and_print_time_00003444",
            "code": "\nbool get_and_print_time_00003444(void)\n\n{\n  int result;\n  undefined time_data [36];\n  \n  result = rtc_get_time(time_data);\n  if (result != 0) {\n    puts(\"rtc: error getting time\");\n  }\n  else {\n    _print_time(time_data);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_00003444": "get_and_print_time_00003444",
                "auStack_2c": "time_data",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002624",
                "FUN_00004db8",
                "FUN_00003378"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00003444": {
                    "4": "get_and_print_rtc_time",
                    "1": "print_time_check_error",
                    "2": "print_time_or_error",
                    "10": "get_and_print_time",
                    "5": "print_rtc_time"
                },
                "auStack_2c": {
                    "15": "time_data",
                    "1": "date_time_buffer",
                    "12": "time_buffer"
                },
                "iVar1": {
                    "13": "result",
                    "1": "return_value",
                    "3": "error_code"
                }
            }
        },
        "FUN_00003478": {
            "entrypoint": "0x00003478",
            "current_name": "set_rtc_time_00003478",
            "code": "\nundefined4 set_rtc_time_00003478(undefined4 time_string)\n\n{\n  int parse_result;\n  undefined4 return_value;\n  undefined parsed_time [36];\n  \n  parse_result = parse_time(time_string,parsed_time);\n  if (parse_result == 0) {\n    parse_result = set_rtc_time_00003478(parsed_time);\n    if (parse_result == -1) {\n      puts(\"rtc: error setting time\");\n      return_value = 1;\n    }\n    else {\n      return_value = 0;\n    }\n  }\n  else {\n    return_value = 1;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00003478": "set_rtc_time_00003478",
                "param_1": "time_string",
                "iVar1": "parse_result",
                "uVar2": "return_value",
                "auStack_2c": "parsed_time",
                "_parse_time": "parse_time",
                "rtc_set_time": "set_rtc_time"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002600",
                "FUN_00004db8",
                "FUN_0000328c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00003478": {
                    "1": "set_and_check_time",
                    "11": "set_rtc_time",
                    "2": "set_system_time",
                    "10": "set_and_validate_time"
                },
                "param_1": {
                    "1": "system_time",
                    "13": "time_string",
                    "9": "input_time"
                },
                "iVar1": {
                    "28": "parse_result",
                    "1": "result"
                },
                "uVar2": {
                    "20": "return_value",
                    "1": "success",
                    "4": "return_code"
                },
                "auStack_2c": {
                    "7": "time_buffer",
                    "12": "parsed_time",
                    "1": "time_array"
                },
                "_parse_time": {
                    "4": "parse_time"
                },
                "rtc_set_time": {
                    "1": "set_time",
                    "2": "set_rtc_time"
                }
            }
        },
        "FUN_000034c0": {
            "entrypoint": "0x000034c0",
            "current_name": "print_usage_000034c0",
            "code": "\nundefined4 print_usage_000034c0(void)\n\n{\n  print(\"usage: rtc <command> [arguments]\");\n  print(\"commands:\");\n  print(\"\\tpoweron\\t\\tpower the interface on\");\n  print(\"\\tpoweroff\\tpower the interface off\");\n  print(\"\\tclearalarm\\tdeactivate the current alarm\");\n  print(\"\\tgetalarm\\tprint the currently alarm time\");\n  print(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  print(\"\\tgettime\\t\\tprint the current time\");\n  print(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000034c0": "print_usage_000034c0",
                "puts": "print"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000034c0": {
                    "1": "display_usage",
                    "28": "print_usage"
                },
                "FUN_00004db8": {
                    "1": "perform_operation",
                    "2": "some_sub_function",
                    "3": "handle_command",
                    "6": "process_command"
                },
                "param_1": {
                    "1": "dummy_parameter",
                    "3": "unused_parameter",
                    "7": "command"
                },
                "PTR_": {
                    "2": "ptr_"
                },
                "DAT_": {
                    "2": "dat_"
                },
                "puts": {
                    "1": "print_string",
                    "2": "print"
                },
                "PTR_XXXX": {
                    "1": "alarm_time"
                },
                "PTR_YYYY": {
                    "1": "current_time"
                },
                "PTR_FUN_00004db8": {
                    "1": "execute_command"
                },
                "PTR_<variable_name>": {
                    "1": "ptr_<variable_name>"
                },
                "DAT_<variable_name>": {
                    "1": "dat_<variable_name>"
                },
                "PTR_XXXXXXXX": {
                    "1": "unused"
                },
                "PTR_FUN_00002830": {
                    "1": "print_power_on"
                },
                "PTR_FUN_00002880": {
                    "1": "print_power_off"
                },
                "PTR_FUN_00002894": {
                    "1": "print_clear_alarm"
                },
                "PTR_FUN_000028d4": {
                    "1": "print_get_alarm"
                },
                "PTR_FUN_000028f0": {
                    "1": "print_set_alarm"
                },
                "PTR_FUN_0000294c": {
                    "1": "print_get_time"
                },
                "PTR_FUN_000029e0": {
                    "1": "print_set_time"
                },
                "PTR_12345": {
                    "1": "alarm_time"
                },
                "PTR_67890": {
                    "1": "current_time"
                },
                "DAT_XXXXXXXX": {
                    "1": "xxxxxxxx"
                }
            }
        },
        "FUN_00003524": {
            "entrypoint": "0x00003524",
            "current_name": "handle_rtc_command_00003524",
            "code": "\nundefined4 handle_rtc_command_00003524(int argc,int argv)\n\n{\n  int comparison_result;\n  undefined4 return_value;\n  \n  if (argc < 2) {\n    print_rtc_usage();\n    return_value = 1;\n  }\n  else {\n    comparison_result = compare_strings(*(undefined4 *)(argv + 4),\"poweron\",7);\n    if (comparison_result == 0) {\n      power_on_rtc();\n    }\n    else {\n      comparison_result = compare_strings(*(undefined4 *)(argv + 4),\"poweroff\",8);\n      if (comparison_result == 0) {\n        power_off_rtc();\n      }\n      else {\n        comparison_result = compare_strings(*(undefined4 *)(argv + 4),\"clearalarm\",8);\n        if (comparison_result == 0) {\n          clear_rtc_alarm();\n        }\n        else {\n          comparison_result = compare_strings(*(undefined4 *)(argv + 4),\"getalarm\",8);\n          if (comparison_result == 0) {\n            get_rtc_alarm();\n          }\n          else {\n            comparison_result = compare_strings(*(undefined4 *)(argv + 4),\"setalarm\",8);\n            if ((comparison_result == 0) && (argc == 4)) {\n              set_rtc_alarm(argv + 8);\n            }\n            else {\n              comparison_result = compare_strings(*(undefined4 *)(argv + 4),\"gettime\",7);\n              if (comparison_result == 0) {\n                get_rtc_time();\n              }\n              else {\n                comparison_result = compare_strings(*(undefined4 *)(argv + 4),\"settime\",7);\n                if ((comparison_result != 0) || (argc != 4)) {\n                  print_message(\"unknown command or missing parameters: %s\\n\\n\",\n                          *(undefined4 *)(argv + 4));\n                  print_rtc_usage();\n                  return 1;\n                }\n                set_rtc_time(argv + 8);\n              }\n            }\n          }\n        }\n      }\n    }\n    return_value = 0;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00003524": "handle_rtc_command_00003524",
                "param_1": "argc",
                "param_2": "argv",
                "iVar1": "comparison_result",
                "uVar2": "return_value",
                "_rtc_usage": "print_rtc_usage",
                "strncmp": "compare_strings",
                "rtc_poweron": "power_on_rtc",
                "rtc_poweroff": "power_off_rtc",
                "rtc_clear_alarm": "clear_rtc_alarm",
                "_rtc_getalarm": "get_rtc_alarm",
                "_rtc_setalarm": "set_rtc_alarm",
                "_rtc_gettime": "get_rtc_time",
                "_rtc_settime": "set_rtc_time",
                "iprintf": "print_message"
            },
            "calling": [],
            "called": [
                "FUN_00004c84",
                "FUN_000033f4",
                "FUN_000026c0",
                "FUN_00004e66",
                "FUN_00003444",
                "FUN_000033c0",
                "FUN_000026d8",
                "FUN_000026e4",
                "FUN_00003478",
                "FUN_000034c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00003524": {
                    "1": "execute_rtc_command",
                    "3": "execute_command",
                    "2": "manage_rtc_command",
                    "9": "process_command",
                    "4": "handle_command"
                },
                "param_1": {
                    "1": "num_arguments",
                    "14": "argc",
                    "13": "num_params",
                    "2": "num_args"
                },
                "param_2": {
                    "1": "command_data",
                    "2": "params",
                    "14": "argv",
                    "6": "command"
                },
                "iVar1": {
                    "3": "command_result",
                    "1": "command_match",
                    "14": "comparison_result",
                    "8": "result"
                },
                "uVar2": {
                    "10": "return_value",
                    "3": "error_code",
                    "1": "is_error",
                    "8": "status",
                    "5": "result",
                    "2": "success"
                },
                "_rtc_usage": {
                    "5": "print_rtc_usage",
                    "2": "print_usage",
                    "1": "print_command_usage"
                },
                "strncmp": {
                    "3": "compare_strings"
                },
                "rtc_poweron": {
                    "1": "power_on",
                    "4": "power_on_rtc"
                },
                "rtc_poweroff": {
                    "1": "turn_rtc_off",
                    "4": "power_off_rtc"
                },
                "rtc_clear_alarm": {
                    "6": "clear_rtc_alarm",
                    "1": "clear_alarm"
                },
                "_rtc_getalarm": {
                    "2": "get_alarm",
                    "6": "get_rtc_alarm"
                },
                "_rtc_setalarm": {
                    "6": "set_rtc_alarm",
                    "2": "set_alarm"
                },
                "_rtc_gettime": {
                    "2": "get_time",
                    "6": "get_rtc_time"
                },
                "_rtc_settime": {
                    "6": "set_rtc_time",
                    "2": "set_time"
                },
                "iprintf": {
                    "3": "print_message",
                    "2": "print_formatted",
                    "1": "print"
                },
                "unknown command or missing parameters: %s\n\n": {
                    "1": "unknown_command_error"
                },
                "_rtc_poweron": {
                    "1": "power_on"
                },
                "_rtc_poweroff": {
                    "1": "power_off"
                },
                "_rtc_clear_alarm": {
                    "1": "clear_alarm"
                }
            }
        },
        "FUN_00003658": {
            "entrypoint": "0x00003658",
            "current_name": "infinite_loop_00003658",
            "code": "\nvoid infinite_loop_00003658(void)\n\n{\n  sync_barrier(0xf);\n  sync_barrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00003658": "infinite_loop_00003658",
                "DataSynchronizationBarrier": "sync_barrier"
            },
            "calling": [
                "FUN_00003688"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00003658": {
                    "1": "loop_forever",
                    "9": "infinite_loop",
                    "2": "continuous_loop",
                    "5": "run_infinite_loop",
                    "6": "endless_loop"
                },
                "DataSynchronizationBarrier": {
                    "15": "sync_barrier",
                    "1": "barrier",
                    "7": "synchronize_data",
                    "2": "wait_for_data_sync"
                },
                "0xf": {
                    "1": "barrier_flag"
                }
            }
        },
        "FUN_00003688": {
            "entrypoint": "0x00003688",
            "current_name": "reset_system_00003688",
            "code": "\nvoid reset_system_00003688(void)\n\n{\n  NVIC_SystemReset();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003688": "reset_system_00003688"
            },
            "calling": [
                "FUN_00002e9c"
            ],
            "called": [
                "FUN_00003658"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00003688": {
                    "25": "reset_system",
                    "1": "perform_system_reset",
                    "3": "system_reset"
                },
                "FUN_00003658": {
                    "1": "reset_interrupt_vector",
                    "2": "perform_initialization",
                    "16": "perform_reset",
                    "3": "perform_system_reset"
                }
            }
        },
        "FUN_00003694": {
            "entrypoint": "0x00003694",
            "current_name": "display_data_object_00003694",
            "code": "\nvoid display_data_object_00003694(int data_object_address,byte data_object_size)\n\n{\n  undefined4 unit_str;\n  char flag;\n  uint bit_mask;\n  bool is_bit_set;\n  undefined format_buffer [8];\n  int buffer_index;\n  char prefix_char;\n  byte index;\n  \n  if ((data_object_address == 0) || (3 < data_object_size)) {\n    puts(\"Unable to display data object\");\n  }\n  else {\n    print_formatted(\"Data:\");\n    for (index = 0; index < data_object_size; index = index + 1) {\n      if (*(byte *)(data_object_address + 6) < 0x14) {\n        bit_mask = 1 << (uint)*(byte *)(data_object_address + 6) & 0x8018f;\n        is_bit_set = bit_mask != 0;\n        if (is_bit_set) {\n          bit_mask = 1;\n        }\n        flag = (char)bit_mask;\n        if (!is_bit_set) {\n          flag = '\\0';\n        }\n        if (flag == '\\0') goto LAB_000036ee;\n        prefix_char = '\\0';\n      }\n      else {\nLAB_000036ee:\n        prefix_char = get_prefix_from_scale((int)*(char *)(data_object_address + 7));\n      }\n      print_formatted(&DAT_000077bc);\n      if (data_object_size < 2) {\n        print_formatted(\"     \");\n      }\n      else {\n        print_formatted(\"[%u] \",index);\n      }\n      if (prefix_char == '\\0') {\n        if (*(char *)(data_object_address + 7) == '\\0') {\n          print_formatted(&DAT_000077d8,(int)*(short *)(data_object_address + (uint)index * 2));\n        }\n        else if ((*(char *)(data_object_address + 7) + 4 < 0 == signed_addition_overflow_check((int)*(char *)(data_object_address + 7),4)) &&\n                (*(char *)(data_object_address + 7) < '\\0')) {\n          buffer_index = format_s16_dfp(format_buffer,(int)*(short *)(data_object_address + (uint)index * 2),\n                                 (int)*(char *)(data_object_address + 7));\n          format_buffer[buffer_index] = 0;\n          print_formatted(&DAT_000077dc,format_buffer);\n        }\n        else {\n          print_formatted(\"%iE%i\",(int)*(short *)(data_object_address + (uint)index * 2),(int)*(char *)(data_object_address + 7));\n        }\n      }\n      else {\n        print_formatted(\"%6d %c\",(int)*(short *)(data_object_address + (uint)index * 2),prefix_char);\n      }\n      unit_str = get_unit_string(*(undefined *)(data_object_address + 6));\n      print_formatted(&DAT_000077e8,unit_str);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003694": "display_data_object_00003694",
                "param_1": "data_object_address",
                "param_2": "data_object_size",
                "cVar2": "flag",
                "uVar3": "bit_mask",
                "bVar4": "is_bit_set",
                "local_10": "buffer_index",
                "local_a": "prefix_char",
                "local_9": "index",
                "uVar1": "unit_str",
                "auStack_18": "format_buffer",
                "iprintf": "print_formatted",
                "phydat_prefix_from_scale": "get_prefix_from_scale",
                "phydat_unit_to_str": "get_unit_string",
                "fmt_s16_dfp": "format_s16_dfp",
                "SCARRY4": "signed_addition_overflow_check"
            },
            "calling": [
                "FUN_00002ecc",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00003918",
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00003e9e",
                "FUN_00003810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00003694": {
                    "1": "display_data",
                    "30": "display_data_object"
                },
                "param_1": {
                    "1": "data_obj_ptr",
                    "12": "data_object",
                    "5": "data_address",
                    "13": "data_object_address"
                },
                "param_2": {
                    "2": "data_object_length",
                    "10": "data_size",
                    "1": "length",
                    "4": "num_elements",
                    "11": "data_object_size"
                },
                "cVar2": {
                    "9": "flag",
                    "4": "flag_char",
                    "1": "is_valid_bit",
                    "2": "conversion_flag"
                },
                "uVar3": {
                    "3": "bit_value",
                    "25": "bit_mask",
                    "1": "bitwise_shift_result"
                },
                "bVar4": {
                    "1": "boolean_result",
                    "2": "is_flag_set",
                    "3": "bit_flag",
                    "11": "is_bit_set",
                    "8": "is_set"
                },
                "local_10": {
                    "1": "format_buffer_size",
                    "4": "buffer_size",
                    "5": "format_length",
                    "6": "buffer_index",
                    "2": "formatted_data_length"
                },
                "local_a": {
                    "1": "scale_prefix",
                    "15": "prefix_char",
                    "2": "unit_prefix",
                    "8": "prefix"
                },
                "local_9": {
                    "1": "data_object_index",
                    "2": "current_index",
                    "3": "element_index",
                    "18": "index"
                },
                "uVar1": {
                    "2": "unit",
                    "1": "unit_value",
                    "15": "unit_str",
                    "3": "unit_string"
                },
                "auStack_18": {
                    "1": "output_buffer",
                    "2": "buffer",
                    "15": "format_buffer",
                    "3": "formatted_data"
                },
                "iprintf": {
                    "2": "print_formatted"
                },
                "phydat_prefix_from_scale": {
                    "3": "get_prefix_from_scale"
                },
                "PHYDAT_SCALE_INVALID": {
                    "1": "invalid_scale"
                },
                "phydat_unit_to_str": {
                    "3": "get_unit_string",
                    "1": "unit_to_string"
                },
                "phydat_s16_dfp": {
                    "1": "format_s16_with_dp"
                },
                "fmt_s16_dfp": {
                    "2": "format_s16_dfp"
                },
                "PUTS_string": {
                    "1": "error_message"
                },
                "IPH_STRING_Data": {
                    "1": "data_string"
                },
                "IPH_STRING_FormatValue": {
                    "1": "formatted_value_string"
                },
                "IPH_STRING_DataWithPrefix": {
                    "1": "prefixed_data_string"
                },
                "IPH_STRING_Unit": {
                    "1": "unit_string"
                },
                "PHYDAT_prefix_from_scale": {
                    "1": "get_prefix_from_scale"
                },
                "SCARRY4": {
                    "1": "signed_addition_overflow_check"
                },
                "DAT_000077bc": {
                    "1": "format_string1"
                },
                "DAT_000077d8": {
                    "1": "format_string2"
                },
                "DAT_000077dc": {
                    "1": "format_string3"
                },
                "DAT_000077e8": {
                    "1": "format_string4"
                },
                "*(byte *)(param_1 + 6)": {
                    "1": "data_object_size"
                },
                "*(byte *)(param_1 + 7)": {
                    "1": "scale_factor"
                },
                "*(short *)(param_1 + (uint)local_9 * 2)": {
                    "1": "data_value"
                }
            }
        },
        "FUN_00003810": {
            "entrypoint": "0x00003810",
            "current_name": "get_memory_address_00003810",
            "code": "\nundefined * get_memory_address_00003810(undefined input)\n\n{\n  undefined *result;\n  \n  switch(input) {\n  case 2:\n    result = &DAT_000077ec;\n    break;\n  case 3:\n    result = &DAT_000077f0;\n    break;\n  case 4:\n    result = &DAT_000077f4;\n    break;\n  case 5:\n    result = &DAT_000077f8;\n    break;\n  case 6:\n    result = &DAT_000077fc;\n    break;\n  case 7:\n    result = (undefined *)0x7800;\n    break;\n  case 8:\n    result = &DAT_00007804;\n    break;\n  case 9:\n    result = &DAT_00007808;\n    break;\n  case 10:\n    result = &DAT_0000780c;\n    break;\n  case 0xb:\n    result = &DAT_00007810;\n    break;\n  case 0xc:\n    result = &DAT_00007814;\n    break;\n  case 0xd:\n    result = &DAT_00007818;\n    break;\n  case 0xe:\n    result = &DAT_0000781c;\n    break;\n  case 0xf:\n    result = &DAT_00007820;\n    break;\n  case 0x10:\n    result = &DAT_00007824;\n    break;\n  case 0x11:\n    result = &DAT_0000782c;\n    break;\n  default:\n    result = &DAT_00007834;\n    break;\n  case 0x13:\n    result = &DAT_00007830;\n    break;\n  case 0x15:\n    result = &DAT_00007828;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003810": "get_memory_address_00003810",
                "param_1": "input",
                "puVar1": "result"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00003810": {
                    "2": "get_memory_location",
                    "1": "get_data_address",
                    "19": "get_memory_address",
                    "3": "get_data_pointer"
                },
                "param_1": {
                    "13": "input",
                    "6": "input_value",
                    "2": "index",
                    "4": "value",
                    "1": "param"
                },
                "puVar1": {
                    "1": "result_pointer",
                    "2": "data_pointer",
                    "9": "memory_address",
                    "13": "result"
                },
                "&DAT_000077ec": {
                    "1": "memory_address_2"
                },
                "&DAT_000077f0": {
                    "1": "memory_address_3"
                },
                "&DAT_000077f4": {
                    "1": "memory_address_4"
                },
                "&DAT_000077f8": {
                    "1": "memory_address_5"
                },
                "&DAT_000077fc": {
                    "1": "memory_address_6"
                },
                "(undefined *)0x7800": {
                    "1": "memory_address_7"
                },
                "&DAT_00007804": {
                    "1": "memory_address_8"
                },
                "&DAT_00007808": {
                    "1": "memory_address_9"
                },
                "&DAT_0000780c": {
                    "1": "memory_address_10"
                },
                "&DAT_00007810": {
                    "1": "memory_address_11"
                },
                "&DAT_00007814": {
                    "1": "memory_address_12"
                },
                "&DAT_00007818": {
                    "1": "memory_address_13"
                },
                "&DAT_0000781c": {
                    "1": "memory_address_14"
                },
                "&DAT_00007820": {
                    "1": "memory_address_15"
                },
                "&DAT_00007824": {
                    "1": "memory_address_16"
                },
                "&DAT_0000782c": {
                    "1": "memory_address_17"
                },
                "&DAT_00007834": {
                    "1": "memory_address_default"
                },
                "&DAT_00007830": {
                    "1": "memory_address_19"
                },
                "&DAT_00007828": {
                    "1": "memory_address_21"
                }
            }
        },
        "FUN_00003918": {
            "entrypoint": "0x00003918",
            "current_name": "map_param_to_value_00003918",
            "code": "\nundefined4 map_param_to_value_00003918(undefined input)\n\n{\n  undefined4 mapped_value;\n  \n  switch(input) {\n  case 2:\n    mapped_value = 0x68;\n    break;\n  case 3:\n    mapped_value = 0x6b;\n    break;\n  case 6:\n    mapped_value = 0x4d;\n    break;\n  case 9:\n    mapped_value = 0x47;\n    break;\n  case 0xc:\n    mapped_value = 0x54;\n    break;\n  case 0xf:\n    mapped_value = 0x50;\n    break;\n  case 0xf1:\n    mapped_value = 0x66;\n    break;\n  default:\n    mapped_value = 0;\n    break;\n  case 0xf4:\n    mapped_value = 0x70;\n    break;\n  case 0xf7:\n    mapped_value = 0x6e;\n    break;\n  case 0xfa:\n    mapped_value = 0x75;\n    break;\n  case 0xfd:\n    mapped_value = 0x6d;\n  }\n  return mapped_value;\n}\n\n",
            "renaming": {
                "FUN_00003918": "map_param_to_value_00003918",
                "param_1": "input",
                "uVar1": "mapped_value"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00003918": {
                    "3": "map_parameter_value",
                    "1": "get_byte_from_param",
                    "2": "convert_param_to_value",
                    "10": "map_param_to_value",
                    "4": "get_char_code"
                },
                "param_1": {
                    "11": "input",
                    "1": "char_index",
                    "2": "character_code",
                    "3": "input_param",
                    "5": "input_value"
                },
                "uVar1": {
                    "1": "result_code",
                    "4": "char_code",
                    "3": "result",
                    "9": "mapped_value"
                }
            }
        },
        "FUN_000039e8": {
            "entrypoint": "0x000039e8",
            "current_name": "get_class_name_000039e8",
            "code": "\nchar * get_class_name_000039e8(char device_type)\n\n{\n  char *class_name;\n  \n  switch(device_type) {\n  case '\\0':\n    class_name = \"CLASS_UNDEF\";\n    break;\n  case '@':\n    class_name = \"ACT_ANY\";\n    break;\n  case 'B':\n    class_name = \"ACT_LED_RGB\";\n    break;\n  case 'C':\n    class_name = \"ACT_SERVO\";\n    break;\n  case 'D':\n    class_name = \"ACT_MOTOR\";\n    break;\n  case 'E':\n    class_name = \"ACT_SWITCH\";\n    break;\n  case 'F':\n    class_name = \"ACT_DIMMER\";\n    break;\n  case -0x80:\n    class_name = \"SENSE_ANY\";\n    break;\n  case -0x7f:\n    class_name = \"SENSE_BTN\";\n    break;\n  case -0x7e:\n    class_name = \"SENSE_TEMP\";\n    break;\n  case -0x7d:\n    class_name = \"SENSE_HUM\";\n    break;\n  case -0x7c:\n    class_name = \"SENSE_LIGHT\";\n    break;\n  case -0x7b:\n    class_name = \"SENSE_ACCEL\";\n    break;\n  case -0x7a:\n    class_name = \"SENSE_MAG\";\n    break;\n  case -0x79:\n    class_name = \"SENSE_GYRO\";\n    break;\n  case -0x78:\n    class_name = \"SENSE_COLOR\";\n    break;\n  case -0x77:\n    class_name = \"SENSE_PRESS\";\n    break;\n  case -0x76:\n    class_name = \"SENSE_ANALOG\";\n    break;\n  case -0x75:\n    class_name = \"SENSE_UV\";\n    break;\n  case -0x74:\n    class_name = \"SENSE_OBJTEMP\";\n    break;\n  case -0x73:\n    class_name = \"SENSE_PULSE_COUNT\";\n    break;\n  case -0x72:\n    class_name = \"SENSE_DISTANCE\";\n    break;\n  case -0x71:\n    class_name = \"SENSE_CO2\";\n    break;\n  default:\n    if (device_type == -1) {\n      return \"CLASS_ANY\";\n    }\n  case '\\x01':\n  case '\\x02':\n  case '\\x03':\n  case '\\x04':\n  case '\\x05':\n  case '\\x06':\n  case '\\a':\n  case '\\b':\n  case '\\t':\n  case '\\n':\n  case '\\v':\n  case '\\f':\n  case '\\r':\n  case '\\x0e':\n  case '\\x0f':\n  case '\\x10':\n  case '\\x11':\n  case '\\x12':\n  case '\\x13':\n  case '\\x14':\n  case '\\x15':\n  case '\\x16':\n  case '\\x17':\n  case '\\x18':\n  case '\\x19':\n  case '\\x1a':\n  case '\\x1b':\n  case '\\x1c':\n  case '\\x1d':\n  case '\\x1e':\n  case '\\x1f':\n  case ' ':\n  case '!':\n  case '\\\"':\n  case '#':\n  case '$':\n  case '%':\n  case '&':\n  case '\\'':\n  case '(':\n  case ')':\n  case '*':\n  case '+':\n  case ',':\n  case '-':\n  case '.':\n  case '/':\n  case '0':\n  case '1':\n  case '2':\n  case '3':\n  case '4':\n  case '5':\n  case '6':\n  case '7':\n  case '8':\n  case '9':\n  case ':':\n  case ';':\n  case '<':\n  case '=':\n  case '>':\n  case '?':\n  case 'A':\n  case 'G':\n  case 'H':\n  case 'I':\n  case 'J':\n  case 'K':\n  case 'L':\n  case 'M':\n  case 'N':\n  case 'O':\n  case 'P':\n  case 'Q':\n  case 'R':\n  case 'S':\n  case 'T':\n  case 'U':\n  case 'V':\n  case 'W':\n  case 'X':\n  case 'Y':\n  case 'Z':\n  case '[':\n  case '\\':\n  case ']':\n  case '^':\n  case '_':\n  case '`':\n  case 'a':\n  case 'b':\n  case 'c':\n  case 'd':\n  case 'e':\n  case 'f':\n  case 'g':\n  case 'h':\n  case 'i':\n  case 'j':\n  case 'k':\n  case 'l':\n  case 'm':\n  case 'n':\n  case 'o':\n  case 'p':\n  case 'q':\n  case 'r':\n  case 's':\n  case 't':\n  case 'u':\n  case 'v':\n  case 'w':\n  case 'x':\n  case 'y':\n  case 'z':\n  case '{':\n  case '|':\n  case '}':\n  case '~':\n  case '\\x7f':\n    class_name = \"CLASS_UNKNOWN\";\n  }\n  return class_name;\n}\n\n",
            "renaming": {
                "FUN_000039e8": "get_class_name_000039e8",
                "param_1": "device_type",
                "pcVar1": "class_name"
            },
            "calling": [
                "FUN_00002f74",
                "FUN_00002ecc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000039e8": {
                    "6": "get_class_name",
                    "4": "get_device_class",
                    "1": "get_class_string",
                    "2": "get_device_class_name",
                    "3": "get_description"
                },
                "param_1": {
                    "1": "class",
                    "5": "device_code",
                    "4": "class_code",
                    "6": "device_type",
                    "2": "class_type"
                },
                "pcVar1": {
                    "12": "class_name",
                    "4": "device_name",
                    "1": "output",
                    "2": "device_class"
                }
            }
        },
        "FUN_00003d24": {
            "entrypoint": "0x00003d24",
            "current_name": "find_nth_element_00003d24",
            "code": "\nundefined4 * find_nth_element_00003d24(int n)\n\n{\n  int count;\n  undefined4 *current_element;\n  \n  count = 0;\n  for (current_element = DAT_1fff0db0; (count < n && (current_element != (undefined4 *)0x0));\n      current_element = (undefined4 *)*current_element) {\n    count = count + 1;\n  }\n  return current_element;\n}\n\n",
            "renaming": {
                "FUN_00003d24": "find_nth_element_00003d24",
                "param_1": "n",
                "local_10": "count",
                "local_c": "current_element"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00003d24": {
                    "1": "find_element_in_list",
                    "18": "find_nth_element",
                    "5": "find_element",
                    "2": "find_element_by_index"
                },
                "param_1": {
                    "1": "max_iterations",
                    "7": "num_elements",
                    "13": "n",
                    "4": "index"
                },
                "local_10": {
                    "1": "iteration_count",
                    "19": "count",
                    "8": "counter"
                },
                "local_c": {
                    "2": "element",
                    "21": "current_element",
                    "3": "current_item",
                    "1": "current_element_ptr"
                },
                "DAT_1fff0db0": {
                    "1": "head"
                }
            }
        },
        "FUN_00003d64": {
            "entrypoint": "0x00003d64",
            "current_name": "execute_function_00003d64",
            "code": "\nundefined4 execute_function_00003d64(int function_pointer,undefined4 argument)\n\n{\n  undefined4 return_value;\n  \n  if (function_pointer == 0) {\n    return_value = 0xffffffed;\n  }\n  else {\n    return_value = (***(code ***)(function_pointer + 0xc))(*(undefined4 *)(function_pointer + 4),argument);\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00003d64": "execute_function_00003d64",
                "param_1": "function_pointer",
                "param_2": "argument",
                "uVar1": "return_value"
            },
            "calling": [
                "FUN_00002ecc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00003d64": {
                    "1": "execute_operation",
                    "3": "execute_code",
                    "21": "execute_function"
                },
                "param_1": {
                    "1": "command",
                    "17": "function_pointer",
                    "6": "function_ptr"
                },
                "param_2": {
                    "5": "input_parameter",
                    "2": "input_value",
                    "8": "argument",
                    "1": "additional_param",
                    "4": "arg",
                    "3": "input_param"
                },
                "uVar1": {
                    "14": "result",
                    "16": "return_value"
                },
                "(param_1 + 0xc)": {
                    "1": "function_address"
                },
                "(param_1 + 4)": {
                    "1": "argument_address"
                }
            }
        },
        "FUN_00003d94": {
            "entrypoint": "0x00003d94",
            "current_name": "execute_function_00003d94",
            "code": "\nundefined4 execute_function_00003d94(int function_pointer,undefined4 param)\n\n{\n  undefined4 return_value;\n  \n  if (function_pointer == 0) {\n    return_value = 0xffffffed;\n  }\n  else {\n    return_value = (**(code **)(*(int *)(function_pointer + 0xc) + 4))(*(undefined4 *)(function_pointer + 4),param);\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00003d94": "execute_function_00003d94",
                "param_1": "function_pointer",
                "param_2": "param",
                "uVar1": "return_value"
            },
            "calling": [
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00003d94": {
                    "1": "process_data",
                    "25": "execute_function"
                },
                "param_1": {
                    "7": "input",
                    "1": "function_handle",
                    "13": "function_pointer",
                    "2": "input_value"
                },
                "param_2": {
                    "1": "arg2",
                    "6": "argument",
                    "3": "input_value",
                    "10": "param"
                },
                "uVar1": {
                    "9": "result",
                    "22": "return_value"
                }
            }
        },
        "FUN_00003dc4": {
            "entrypoint": "0x00003dc4",
            "current_name": "count_digits_00003dc4",
            "code": "\nint count_digits_00003dc4(int start_position,uint number)\n\n{\n  uint remainder;\n  char *current_position;\n  uint multiplier;\n  int digit_count;\n  \n  digit_count = 1;\n  if (number < 1000000000) {\n    for (multiplier = 10; multiplier <= number; multiplier = multiplier * 10) {\n      digit_count = digit_count + 1;\n    }\n  }\n  else {\n    digit_count = 10;\n  }\n  if (start_position != 0) {\n    current_position = (char *)(digit_count + start_position);\n    remainder = number;\n    do {\n      current_position = current_position + -1;\n      *current_position = (char)(remainder % 10) + '0';\n      remainder = remainder / 10;\n    } while (remainder != 0);\n  }\n  return digit_count;\n}\n\n",
            "renaming": {
                "FUN_00003dc4": "count_digits_00003dc4",
                "param_1": "start_position",
                "param_2": "number",
                "local_20": "remainder",
                "local_14": "current_position",
                "local_10": "multiplier",
                "local_c": "digit_count"
            },
            "calling": [
                "FUN_00003e58"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00003dc4": {
                    "1": "calculate_digit_count",
                    "21": "count_digits",
                    "2": "calculate_digits"
                },
                "param_1": {
                    "1": "output_buffer",
                    "2": "start_address",
                    "6": "start_position",
                    "4": "base_address",
                    "3": "offset"
                },
                "param_2": {
                    "1": "num",
                    "28": "number"
                },
                "local_20": {
                    "1": "dividend",
                    "21": "remainder",
                    "7": "remaining_number"
                },
                "local_14": {
                    "1": "str_position",
                    "4": "current_position",
                    "3": "result_string",
                    "2": "output_buffer"
                },
                "local_10": {
                    "1": "factor",
                    "4": "power_of_ten",
                    "2": "current_power_of_ten",
                    "6": "base",
                    "7": "multiplier"
                },
                "local_c": {
                    "1": "result",
                    "4": "num_digits",
                    "22": "digit_count"
                }
            }
        },
        "FUN_00003e58": {
            "entrypoint": "0x00003e58",
            "current_name": "convert_integer_to_ascii_00003e58",
            "code": "\nint convert_integer_to_ascii_00003e58(undefined *input_string,int number)\n\n{\n  int formatted_string_length;\n  int absolute_value;\n  undefined *formatted_string;\n  \n  absolute_value = number;\n  formatted_string = input_string;\n  if (-(number >> 0x1f) != 0) {\n    if (input_string != (undefined *)0x0) {\n      formatted_string = input_string + 1;\n      *input_string = 0x2d;\n    }\n    absolute_value = -number;\n  }\n  formatted_string_length = format_unsigned_integer(formatted_string,absolute_value);\n  return -(number >> 0x1f) + formatted_string_length;\n}\n\n",
            "renaming": {
                "FUN_00003e58": "convert_integer_to_ascii_00003e58",
                "param_1": "input_string",
                "param_2": "number",
                "local_18": "absolute_value",
                "local_14": "formatted_string",
                "iVar1": "formatted_string_length",
                "fmt_u32_dec": "format_unsigned_integer"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_00003dc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00003e58": {
                    "2": "convert_integer_to_decimal_string",
                    "1": "convert_integer_to_decimal",
                    "3": "convert_to_decimal",
                    "4": "format_and_count_digits"
                },
                "param_1": {
                    "1": "str_target",
                    "10": "input_string",
                    "2": "output_buffer",
                    "4": "string",
                    "3": "buffer"
                },
                "param_2": {
                    "2": "value",
                    "1": "integer",
                    "8": "input_number",
                    "5": "num",
                    "12": "number"
                },
                "local_18": {
                    "1": "converted_int",
                    "3": "abs_num",
                    "4": "absolute_number",
                    "14": "absolute_value"
                },
                "local_14": {
                    "1": "result",
                    "2": "string_ptr",
                    "3": "str_ptr",
                    "4": "string_pointer",
                    "5": "formatted_string"
                },
                "FUN_00003dc4": {
                    "1": "format_unsigned_integer_to_decimal"
                },
                "iVar1": {
                    "1": "result",
                    "3": "formatted_string_length",
                    "2": "number_of_digits"
                },
                "fmt_u32_dec": {
                    "1": "format_unsigned_integer"
                }
            }
        },
        "FUN_00003e9e": {
            "entrypoint": "0x00003e9e",
            "current_name": "format_and_return_00003e9e",
            "code": "\nundefined4 format_and_return_00003e9e(undefined4 value,short short_value,undefined4 format_specifier)\n\n{\n  undefined4 result;\n  \n  result = fmt_s32_dfp(value,(int)short_value,format_specifier);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003e9e": "format_and_return_00003e9e",
                "param_1": "value",
                "param_2": "short_value",
                "param_3": "format_specifier",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [
                "FUN_00003ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00003e9e": {
                    "1": "convert_s32_to_dfp",
                    "4": "format_and_return_integer",
                    "3": "format_number",
                    "10": "format_and_return"
                },
                "param_1": {
                    "2": "param1",
                    "1": "output_buffer",
                    "7": "input_value",
                    "3": "number",
                    "10": "value"
                },
                "param_2": {
                    "9": "short_value",
                    "3": "input_short",
                    "2": "num",
                    "1": "precision",
                    "4": "number"
                },
                "param_3": {
                    "2": "flags",
                    "1": "option",
                    "3": "format_flags",
                    "4": "format_specifier"
                },
                "uVar1": {
                    "2": "formatted_value",
                    "1": "conversion_result",
                    "13": "result"
                },
                "FUN_00003ec4": {
                    "1": "process_data"
                }
            }
        },
        "FUN_00003ec4": {
            "entrypoint": "0x00003ec4",
            "current_name": "format_number_00003ec4",
            "code": "\nint format_number_00003ec4(undefined *output_buffer,uint number,int decimal_places)\n\n{\n  int result;\n  undefined4 decimal_result;\n  uint quotient;\n  int remainder;\n  int length;\n  \n  if (decimal_places + 7 < 0 != signed_carry(decimal_places,7)) {\n    panic(3,\"FAILED ASSERTION.\");\n  }\n  length = 0;\n  if (decimal_places == 0) {\n    length = format_signed_dec(output_buffer,number);\n  }\n  else if (decimal_places < 1) {\n    quotient = number / *(uint *)(&DAT_00007978 + decimal_places * -4);\n    remainder = number - *(uint *)(&DAT_00007978 + decimal_places * -4) * quotient;\n    if (remainder < 0) {\n      remainder = -remainder;\n    }\n    if ((quotient == 0) && ((int)number < 0)) {\n      if (output_buffer != (undefined *)0x0) {\n        *output_buffer = 0x2d;\n      }\n      length = 1;\n    }\n    if (output_buffer == (undefined *)0x0) {\n      result = format_signed_dec(0,quotient);\n      length = result + 1 + length;\n    }\n    else {\n      result = format_signed_dec(output_buffer + length,quotient);\n      result = length + result;\n      length = result + 1;\n      output_buffer[result] = 0x2e;\n      decimal_result = format_signed_dec(output_buffer + length,remainder);\n      left_pad_with_zeros(output_buffer + length,decimal_result,-decimal_places,0x30);\n    }\n    length = -decimal_places + length;\n  }\n  else {\n    length = format_signed_dec(output_buffer,number);\n    if (output_buffer != (undefined *)0x0) {\n      fill_with_zeros(output_buffer + length,0x30,decimal_places);\n    }\n    length = decimal_places + length;\n  }\n  return length;\n}\n\n",
            "renaming": {
                "FUN_00003ec4": "format_number_00003ec4",
                "param_1": "output_buffer",
                "param_2": "number",
                "param_3": "decimal_places",
                "iVar1": "result",
                "uVar2": "decimal_result",
                "uVar3": "quotient",
                "local_10": "remainder",
                "local_c": "length",
                "SCARRY4": "signed_carry",
                "core_panic": "panic",
                "fmt_s32_dec": "format_signed_dec",
                "memset": "fill_with_zeros",
                "fmt_lpad": "left_pad_with_zeros"
            },
            "calling": [
                "FUN_00003e9e"
            ],
            "called": [
                "FUN_00000f04",
                "FUN_00004622",
                "FUN_00003ff4",
                "FUN_00003e58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00003ec4": {
                    "1": "format_number_as_string",
                    "22": "format_number"
                },
                "param_1": {
                    "1": "string_buffer",
                    "2": "buffer",
                    "3": "output_string",
                    "7": "output",
                    "17": "output_buffer"
                },
                "param_2": {
                    "3": "input_number",
                    "1": "input_num",
                    "26": "number"
                },
                "param_3": {
                    "2": "width",
                    "3": "padding",
                    "4": "num_digits",
                    "9": "decimal_places",
                    "1": "num_decimal_places",
                    "6": "precision"
                },
                "iVar1": {
                    "2": "integer_result",
                    "1": "digits_count",
                    "3": "decimal_digits",
                    "11": "result"
                },
                "uVar2": {
                    "1": "num_digits_decimal_part",
                    "2": "digits_written",
                    "3": "num_digits",
                    "5": "decimal_result"
                },
                "uVar3": {
                    "1": "num_whole_parts",
                    "2": "whole_part",
                    "6": "divisor",
                    "17": "quotient"
                },
                "local_10": {
                    "29": "remainder",
                    "1": "remaining_number"
                },
                "local_c": {
                    "1": "digits_written",
                    "4": "output_length",
                    "2": "count",
                    "3": "total_length",
                    "6": "length"
                },
                "SCARRY4": {
                    "1": "is_signed_overflow"
                },
                "core_panic": {
                    "4": "panic"
                },
                "fmt_s32_dec": {
                    "1": "int_to_str"
                },
                "DAT_00007978": {
                    "1": "decimal_powers_of_ten"
                },
                "memset": {
                    "1": "fill_with_zeros"
                },
                "fmt_lpad": {
                    "1": "left_pad_with_zeros"
                },
                "undefined *param_1": {
                    "1": "output_buffer"
                },
                "uint param_2": {
                    "1": "input_number"
                },
                "int param_3": {
                    "1": "decimal_places"
                },
                "int iVar1": {
                    "1": "integer_part"
                },
                "undefined4 uVar2": {
                    "1": "char_count_u_var"
                },
                "uint uVar3": {
                    "1": "division_result"
                },
                "int local_10": {
                    "1": "remainder"
                },
                "int local_c": {
                    "1": "char_count"
                }
            }
        },
        "FUN_00003ff4": {
            "entrypoint": "0x00003ff4",
            "current_name": "copy_and_fill_buffer_00003ff4",
            "code": "\nuint copy_and_fill_buffer_00003ff4(int destination,uint source_size,uint dest_size,undefined fill_value)\n\n{\n  uint copied_length;\n  \n  copied_length = source_size;\n  if ((source_size < dest_size) && (copied_length = dest_size, destination != 0)) {\n    memmove((dest_size - source_size) + destination,destination,source_size);\n    memset(destination,fill_value,dest_size - source_size);\n  }\n  return copied_length;\n}\n\n",
            "renaming": {
                "FUN_00003ff4": "copy_and_fill_buffer_00003ff4",
                "param_1": "destination",
                "param_2": "source_size",
                "param_3": "dest_size",
                "param_4": "fill_value",
                "uVar1": "copied_length"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_00004622",
                "FUN_000045ee"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00003ff4": {
                    "1": "reverse_and_fill",
                    "4": "move_and_fill_memory",
                    "2": "copy_and_fill_memory",
                    "5": "copy_and_fill",
                    "10": "copy_and_fill_buffer"
                },
                "param_1": {
                    "15": "destination",
                    "8": "dest",
                    "1": "destination_pointer",
                    "4": "destination_buffer"
                },
                "param_2": {
                    "7": "source_length",
                    "1": "src_length",
                    "3": "source_buffer_length",
                    "9": "src_size"
                },
                "param_3": {
                    "7": "destination_size",
                    "1": "dest_length",
                    "3": "destination_buffer_length",
                    "6": "destination_length",
                    "9": "dest_size"
                },
                "param_4": {
                    "1": "pattern",
                    "13": "fill_value",
                    "3": "padding_byte"
                },
                "uVar1": {
                    "6": "copied_length",
                    "1": "new_size",
                    "2": "new_source_size",
                    "3": "copied_size"
                }
            }
        },
        "FUN_00004042": {
            "entrypoint": "0x00004042",
            "current_name": "convert_string_to_int_00004042",
            "code": "\nvoid convert_string_to_int_00004042(undefined4 input_string)\n\n{\n  strtol(input_string,0,10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004042": "convert_string_to_int_00004042",
                "param_1": "input_string"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004042": {
                    "3": "parse_input_string",
                    "1": "parse_string_to_number",
                    "7": "convert_string_to_number",
                    "2": "convert_string_to_long",
                    "9": "convert_string_to_int"
                },
                "param_1": {
                    "2": "buffer",
                    "15": "input_string",
                    "1": "input_array",
                    "5": "byte_array"
                },
                "FUN_00004f84": {
                    "4": "process_byte_array",
                    "1": "find_substring",
                    "2": "process_bytes"
                },
                "param_2": {
                    "1": "byte_array",
                    "2": "byte_array_pointer"
                },
                "param_3": {
                    "3": "array_length",
                    "1": "byte_arr_size",
                    "4": "array_size"
                }
            }
        },
        "FUN_0000404c": {
            "entrypoint": "0x0000404c",
            "current_name": "process_data_0000404c",
            "code": "\nundefined4 process_data_0000404c(uint *input_array,int *info_ptr)\n\n{\n  int temp_var1;\n  int *temp_ptr;\n  uint ushort_value;\n  ushort flags;\n  int temp_var3;\n  code *function_ptr;\n  int temp_var4;\n  uint temp_value;\n  bool is_zero;\n  \n  flags = *(ushort *)(info_ptr + 3);\n  ushort_value = (uint)flags;\n  if ((int)(ushort_value << 0x1c) < 0) {\n    temp_var1 = info_ptr[4];\n    if (temp_var1 != 0) {\n      temp_var3 = ushort_value << 0x1e;\n      is_zero = temp_var3 == 0;\n      temp_var4 = *info_ptr;\n      if (is_zero) {\n        temp_var3 = info_ptr[5];\n      }\n      *info_ptr = temp_var1;\n      if (!is_zero) {\n        temp_var3 = 0;\n      }\n      info_ptr[2] = temp_var3;\n      for (temp_var4 = temp_var4 - temp_var1; 0 < temp_var4; temp_var4 = temp_var4 - temp_var3) {\n        temp_var3 = (*(code *)info_ptr[10])(input_array,info_ptr[8],temp_var1,temp_var4);\n        if (temp_var3 < 1) {\n          *(ushort *)(info_ptr + 3) = *(ushort *)(info_ptr + 3) | 0x40;\n          return 0xffffffff;\n        }\n        temp_var1 = temp_var1 + temp_var3;\n      }\n    }\n  }\n  else {\n    if ((info_ptr[1] < 1) && (info_ptr[0x10] < 1)) {\n      return 0;\n    }\n    function_ptr = (code *)info_ptr[0xb];\n    if (function_ptr == (code *)0x0) {\n      return 0;\n    }\n    temp_value = *input_array;\n    *input_array = 0;\n    if ((flags & 0x1000) == 0) {\n      temp_var1 = (*function_ptr)(input_array,info_ptr[8],ushort_value & 0x1000,1);\n      if ((temp_var1 == -1) && (ushort_value = *input_array, ushort_value != 0)) {\n        if ((ushort_value == 0x1d) || (ushort_value == 0x16)) {\n          *input_array = temp_value;\n          return 0;\n        }\n        flags = *(ushort *)(info_ptr + 3);\n        goto LAB_00004104;\n      }\n    }\n    else {\n      temp_var1 = info_ptr[0x15];\n    }\n    if (((int)((uint)*(ushort *)(info_ptr + 3) << 0x1d) < 0) &&\n       (temp_var1 = temp_var1 - info_ptr[1], info_ptr[0xd] != 0)) {\n      temp_var1 = temp_var1 - info_ptr[0x10];\n    }\n    temp_var1 = (*(code *)info_ptr[0xb])(input_array,info_ptr[8],temp_var1,0);\n    flags = *(ushort *)(info_ptr + 3);\n    if ((temp_var1 == -1) &&\n       ((0x1d < *input_array || (-1 < (int)((0x20400001U >> (*input_array & 0xff)) << 0x1f))))) {\nLAB_00004104:\n      *(ushort *)(info_ptr + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n    info_ptr[1] = 0;\n    *info_ptr = info_ptr[4];\n    if (((int)((uint)flags << 0x13) < 0) && ((temp_var1 != -1 || (*input_array == 0)))) {\n      info_ptr[0x15] = temp_var1;\n    }\n    temp_ptr = (int *)info_ptr[0xd];\n    *input_array = temp_value;\n    if (temp_ptr != (int *)0x0) {\n      if (temp_ptr != info_ptr + 0x11) {\n        _free_r(input_array);\n      }\n      info_ptr[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "param_1": "input_array",
                "param_2": "info_ptr",
                "iVar1": "temp_var1",
                "piVar2": "temp_ptr",
                "uVar3": "ushort_value",
                "uVar4": "flags",
                "iVar5": "temp_var3",
                "pcVar6": "function_ptr",
                "iVar7": "temp_var4",
                "uVar8": "temp_value",
                "bVar9": "is_zero",
                "FUN_0000404c": "process_data_0000404c"
            },
            "calling": [
                "FUN_00004158",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "1": "output_buffer",
                    "4": "input_array",
                    "2": "uint_array",
                    "3": "input_data"
                },
                "param_2": {
                    "1": "info_array",
                    "2": "int_array",
                    "3": "data_array",
                    "4": "info_ptr"
                },
                "iVar1": {
                    "1": "callback_result",
                    "3": "result",
                    "2": "temp_var_1",
                    "5": "temp_var1"
                },
                "piVar2": {
                    "2": "pointer",
                    "1": "temporary_ptr",
                    "5": "temp_ptr",
                    "3": "var2",
                    "4": "ptr"
                },
                "uVar3": {
                    "1": "data_value",
                    "5": "ushort_value",
                    "2": "temp_var",
                    "3": "ushort_var"
                },
                "uVar4": {
                    "2": "metadata_flags",
                    "1": "ushort_value2",
                    "10": "flags"
                },
                "iVar5": {
                    "1": "sub_offset",
                    "4": "temp_var3",
                    "2": "increment",
                    "3": "offset"
                },
                "pcVar6": {
                    "6": "function_pointer",
                    "1": "function",
                    "5": "callback",
                    "10": "function_ptr",
                    "4": "callback_function"
                },
                "iVar7": {
                    "1": "temp_length",
                    "2": "temp_var_4",
                    "4": "temp_var4",
                    "3": "counter"
                },
                "uVar8": {
                    "1": "uint_val",
                    "2": "original_data",
                    "3": "uint_value",
                    "4": "temp_value"
                },
                "bVar9": {
                    "3": "flag",
                    "1": "temp_var8",
                    "2": "bool_var",
                    "17": "is_zero"
                },
                "FUN_0000404c": {
                    "2": "decompress_data",
                    "5": "decode_and_process_data",
                    "12": "process_data",
                    "1": "process_function"
                },
                "iVar11": {
                    "1": "temp_var_7"
                },
                "fun": {
                    "1": "sub_function"
                },
                "FUN_00004b34": {
                    "1": "sub_function"
                },
                "param_3": {
                    "1": "param3"
                },
                "param_4": {
                    "1": "param4"
                },
                "iVar10": {
                    "1": "temp_var_6"
                },
                "F_00004b34": {
                    "1": "sub_function"
                }
            }
        },
        "FUN_00004158": {
            "entrypoint": "0x00004158",
            "current_name": "flush_and_release_lock_00004158",
            "code": "\nundefined4 flush_and_release_lock_00004158(int file_descriptor,undefined4 *stream)\n\n{\n  undefined4 result;\n  \n  if (stream[4] != 0) {\n    if ((file_descriptor != 0) && (*(int *)(file_descriptor + 0x18) == 0)) {\n      initialize();\n    }\n    if (stream == &DAT_000079b8) {\n      stream = *(undefined4 **)(file_descriptor + 4);\n    }\n    else if (stream == (undefined4 *)&DAT_000079d8) {\n      stream = *(undefined4 **)(file_descriptor + 8);\n    }\n    else if (stream == (undefined4 *)&DAT_00007998) {\n      stream = *(undefined4 **)(file_descriptor + 0xc);\n    }\n    if (*(short *)(stream + 3) != 0) {\n      if ((-1 < (int)(flag1 << 0x1f)) && (-1 < (int)*(short *)(stream + 3) << 0x16)) {\n        acquire_lock(lock);\n      }\n      result = flush_data(file_descriptor,stream);\n      if ((int)(flag1 << 0x1f) < 0) {\n        return result;\n      }\n      if ((int)((uint)*(ushort *)(stream + 3) << 0x16) < 0) {\n        return result;\n      }\n      release_lock(lock);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004158": "flush_and_release_lock_00004158",
                "param_1": "file_descriptor",
                "param_2": "stream",
                "uVar1": "result",
                "__sinit": "initialize",
                "__retarget_lock_acquire_recursive": "acquire_lock",
                "__sflush_r": "flush_data",
                "__retarget_lock_release_recursive": "release_lock",
                "param_2[0x16]": "lock",
                "param_2[0x19]": "flag1"
            },
            "calling": [
                "FUN_000041d0",
                "FUN_00005404",
                "FUN_00006768"
            ],
            "called": [
                "FUN_000045e8",
                "FUN_000045ec",
                "FUN_0000404c",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004158": {
                    "1": "validate_and_flush_output",
                    "5": "flush_buffer",
                    "4": "flush_stream",
                    "10": "flush_and_release_lock",
                    "2": "flush_if_not_empty"
                },
                "param_1": {
                    "1": "stream_value",
                    "2": "handle",
                    "4": "input_param"
                },
                "param_2": {
                    "4": "stream",
                    "1": "file_descriptor",
                    "2": "stream_info"
                },
                "uVar1": {
                    "22": "result",
                    "8": "return_value",
                    "1": "ret_val"
                },
                "__sinit": {
                    "6": "initialize_stream",
                    "3": "initialize_streams",
                    "1": "initialize_buffer"
                },
                "&DAT_000079b8": {
                    "2": "constant_buffer1",
                    "1": "data_1"
                },
                "&DAT_000079d8": {
                    "1": "stdout_ptr",
                    "2": "constant2"
                },
                "&DAT_00007998": {
                    "1": "default_stream_buf3",
                    "2": "constant3"
                },
                "FUNC_000045e8": {
                    "1": "initialize"
                },
                "FUNC_000045ec": {
                    "1": "function_b"
                },
                "FUN_0000404c": {
                    "1": "function_c",
                    "2": "process_data"
                },
                "FUN_000042a4": {
                    "3": "release_lock",
                    "1": "function_d"
                },
                "*param_2": {
                    "1": "current_buffer"
                },
                "__retarget_lock_acquire_recursive": {
                    "3": "acquire_lock_recursive",
                    "5": "acquire_recursive_lock",
                    "7": "acquire_lock",
                    "1": "lock_acquire"
                },
                "__sflush_r": {
                    "1": "flush_output",
                    "3": "flush_buffer",
                    "4": "flush_data"
                },
                "*(ushort *)(param_2 + 3)": {
                    "1": "short_file_state_field"
                },
                "__retarget_lock_release_recursive": {
                    "8": "release_lock",
                    "1": "lock_release",
                    "5": "release_recursive_lock",
                    "2": "release_lock_recursive"
                },
                "*(undefined4 **)(param_1 + 4)": {
                    "1": "stream1_ptr"
                },
                "(undefined4 *)&DAT_000079d8": {
                    "1": "ptr_data_2"
                },
                "*(undefined4 **)(param_1 + 8)": {
                    "1": "stream2_ptr"
                },
                "(undefined4 *)&DAT_00007998": {
                    "1": "constant_buffer3"
                },
                "*(undefined4 **)(param_1 + 0xc)": {
                    "1": "stream3_ptr"
                },
                "*(short *)(param_2 + 3)": {
                    "1": "flag_value"
                },
                "param_2[0x16]": {
                    "1": "lock"
                },
                "(uint)*(ushort *)(param_2 + 3) << 0x16": {
                    "1": "stream_size_shifted"
                },
                "param_1 + 0x18": {
                    "1": "stream_flags"
                },
                "*(int *)(param_1 + 0x18)": {
                    "1": "stream_flags_value"
                },
                "param_1 + 4": {
                    "1": "stdin_ptr_value"
                },
                "param_1 + 8": {
                    "1": "stdout_ptr_value"
                },
                "param_1 + 0xc": {
                    "1": "stderr_ptr_value"
                },
                "(int)(param_2[0x19] << 0x1f)": {
                    "1": "lock_condition1"
                },
                "(int)*(short *)(param_2 + 3) << 0x16": {
                    "1": "lock_condition2"
                },
                "&FUNC_000045e8": {
                    "1": "initialize_function_1"
                },
                "&FUNC_000045ec": {
                    "1": "initialize_function_2"
                },
                "DAT_000079b8": {
                    "1": "dat_buffer1"
                },
                "DAT_000079d8": {
                    "1": "dat_buffer2"
                },
                "DAT_00007998": {
                    "1": "dat_buffer3"
                },
                "*PTR_handle + 4": {
                    "1": "stream1"
                },
                "*PTR_handle + 8": {
                    "1": "stream2"
                },
                "*PTR_handle + 0xC": {
                    "1": "stream3"
                },
                "param_2[0x19]": {
                    "1": "file_state_flag"
                }
            }
        },
        "FUN_000041d0": {
            "entrypoint": "0x000041d0",
            "current_name": "flush_files_000041d0",
            "code": "\nuint flush_files_000041d0(int file_descriptor,undefined4 offset,undefined4 param3)\n\n{\n  uint result;\n  int index;\n  dword *rel_array;\n  int rel_offset;\n  uint total_result;\n  int loop_counter;\n  undefined4 *data_ptr;\n  \n  if (file_descriptor == 0) {\n    data_ptr = &DAT_000079f8;\n    rel_array = &rel_info;\n    total_result = 0;\n    do {\n      loop_counter = rel_array[1];\n      rel_offset = rel_array[2];\n      while (loop_counter = loop_counter + -1, -1 < loop_counter) {\n        if ((1 < *(ushort *)(rel_offset + 0xc)) && (index = *(short *)(rel_offset + 0xe) + 1, index != 0)) {\n          result = flush_stream(0x1fff0284,rel_offset,param3,index,data_ptr);\n          total_result = total_result | result;\n        }\n        rel_offset = rel_offset + 0x68;\n      }\n      rel_array = (dword *)*rel_array;\n    } while (rel_array != (dword *)0x0);\n    return total_result;\n  }\n  total_result = flush_stream(rel_offset,file_descriptor);\n  return total_result;\n}\n\n",
            "renaming": {
                "FUN_000041d0": "flush_files_000041d0",
                "param_1": "file_descriptor",
                "param_2": "offset",
                "param_3": "param3",
                "uVar1": "result",
                "iVar2": "index",
                "pdVar3": "rel_array",
                "iVar4": "rel_offset",
                "uVar5": "total_result",
                "iVar6": "loop_counter",
                "puVar7": "data_ptr",
                "_fflush_r": "flush_stream",
                "Elf32_Rel_ARRAY_1fff0200[0x19].r_info": "rel_info",
                "Elf32_Rel_ARRAY_1fff0200[16].r_offset": "rel_offset",
                "Elf32_Rel_ARRAY_1fff0200": "relocation_array"
            },
            "calling": [
                "FUN_00002e48"
            ],
            "called": [
                "FUN_00004158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000041d0": {
                    "7": "flush_files",
                    "1": "flush_relocation_entries",
                    "2": "flush_buffers",
                    "5": "flush_data",
                    "3": "flush_relocations"
                },
                "param_1": {
                    "2": "offset",
                    "1": "buffer",
                    "15": "file_descriptor"
                },
                "param_2": {
                    "1": "file_offset",
                    "9": "param2",
                    "11": "offset",
                    "5": "param_2"
                },
                "param_3": {
                    "1": "max_reloc_entries",
                    "9": "param3",
                    "7": "size",
                    "5": "param_3",
                    "2": "length"
                },
                "uVar1": {
                    "1": "status",
                    "2": "return_value",
                    "24": "result"
                },
                "iVar2": {
                    "3": "num_elements",
                    "1": "num_files",
                    "2": "loop_counter",
                    "4": "index"
                },
                "pdVar3": {
                    "1": "entry",
                    "4": "rel_ptr",
                    "2": "rel_table",
                    "3": "rel_table_ptr",
                    "5": "rel_array"
                },
                "iVar4": {
                    "5": "rel_offset",
                    "1": "relocation_entry",
                    "2": "entry_offset",
                    "3": "rel_entry",
                    "4": "offset"
                },
                "uVar5": {
                    "1": "aggregate_result",
                    "2": "overall_result",
                    "10": "total_result",
                    "6": "combined_result",
                    "5": "result"
                },
                "iVar6": {
                    "7": "loop_counter",
                    "1": "rel_index",
                    "3": "count",
                    "2": "inner_loop_counter",
                    "4": "counter"
                },
                "puVar7": {
                    "1": "string_list_pointer",
                    "2": "buffer_pointer",
                    "4": "data_ptr"
                },
                "_fflush_r": {
                    "1": "flush_section_data",
                    "2": "flush_stream"
                },
                "FUN_00004158": {
                    "1": "calculate_flush_status"
                },
                "DAT_000079f8": {
                    "1": "data_source"
                },
                "Elf32_Rel_ARRAY_1fff0200[0x19].r_info": {
                    "1": "rel_info"
                },
                "Elf32_Rel_ARRAY_1fff0200[16].r_offset": {
                    "1": "rel_offset"
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "1": "relocation_array"
                }
            }
        },
        "FUN_000041f4": {
            "entrypoint": "0x000041f4",
            "current_name": "initialize_data_structure_000041f4",
            "code": "\nvoid initialize_data_structure_000041f4(undefined4 *data_structure,undefined2 value1,undefined2 value2)\n\n{\n  *data_structure = 0;\n  data_structure[1] = 0;\n  data_structure[4] = 0;\n  data_structure[5] = 0;\n  memory[2] = 0;\n  *(undefined2 *)(data_structure + 3) = value1;\n  memory[25] = 0;\n  *(undefined2 *)(memory_address + 0xe) = value2;\n  data_structure[6] = 0;\n  clear_memory(data_structure + 0x17,0,8);\n  memory[9] = 0x4dc9;\n  memory[10] = 0x4def;\n  memory[11] = 0x4e27;\n  memory[8] = data_structure;\n  memory[12] = &some_label;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000041f4": "initialize_data_structure_000041f4",
                "param_1": "data_structure",
                "param_2": "value1",
                "param_3": "value2",
                "memset": "clear_memory",
                "LAB_00004e4a_1": "some_label",
                "param_1[0x19]": "memory[25]",
                "(int)param_1": "memory_address",
                "param_1[2]": "memory[2]",
                "param_1[9]": "memory[9]",
                "param_1[10]": "memory[10]",
                "param_1[0xb]": "memory[11]",
                "param_1[8]": "memory[8]",
                "param_1[0xc]": "memory[12]",
                "param_1[1]": "data_structure[1]",
                "param_1[4]": "data_structure[4]",
                "param_1[5]": "data_structure[5]",
                "param_1[6]": "data_structure[6]"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000041f4": {
                    "1": "initialize_param_struct",
                    "16": "initialize_data_structure",
                    "4": "initialize_parameters",
                    "2": "initialize_data_struct",
                    "3": "initialize_data"
                },
                "param_1": {
                    "2": "parameters",
                    "1": "data_struct_ptr",
                    "15": "data_structure"
                },
                "param_2": {
                    "2": "param2_value",
                    "24": "value1",
                    "1": "input_value1"
                },
                "param_3": {
                    "1": "param_value2",
                    "2": "value_2",
                    "24": "value2"
                },
                "memset": {
                    "2": "clear_memory"
                },
                "LAB_00004e4a_1": {
                    "1": "label_1",
                    "2": "some_label"
                },
                "param_1[0x19]": {
                    "1": "memory[25]"
                },
                "(int)param_1": {
                    "1": "memory_address"
                },
                "param_1[2]": {
                    "1": "memory[2]"
                },
                "param_1[9]": {
                    "1": "output_data10"
                },
                "param_1[10]": {
                    "1": "output_data11"
                },
                "param_1[0xb]": {
                    "1": "memory[11]"
                },
                "param_1[8]": {
                    "1": "data_structure[8]"
                },
                "param_1[0xc]": {
                    "1": "memory[12]"
                },
                "param_1[1]": {
                    "1": "output_data1"
                },
                "param_1[4]": {
                    "1": "data_structure[4]"
                },
                "param_1[5]": {
                    "1": "data_structure[5]"
                },
                "param_1 + 3": {
                    "1": "data_structure_pointer"
                },
                "(int)param_1 + 0xe": {
                    "1": "computed_value"
                },
                "param_1[6]": {
                    "1": "output_data8"
                },
                "param_1 + 0x17": {
                    "1": "output_data9"
                },
                "*(undefined2 *)(param_1 + 3)": {
                    "1": "output_data5"
                },
                "*(undefined2 *)((int)param_1 + 0xe)": {
                    "1": "output_data7"
                },
                "FUN_00004622": {
                    "1": "process_data"
                }
            }
        },
        "FUN_00004248": {
            "entrypoint": "0x00004248",
            "current_name": "allocate_memory_00004248",
            "code": "\nundefined4 * allocate_memory_00004248(undefined4 size,int num_elements)\n\n{\n  undefined4 *allocated_memory;\n  int total_size;\n  \n  total_size = (num_elements + -1) * 0x68;\n  allocated_memory = (undefined4 *)allocate_dynamic_memory(size,total_size + 0x74);\n  if (allocated_memory != (undefined4 *)0x0) {\n    *allocated_memory = 0;\n    allocated_memory[1] = num_elements;\n    allocated_memory[2] = allocated_memory + 3;\n    initialize_memory(allocated_memory + 3,0,total_size + 0x68);\n  }\n  return allocated_memory;\n}\n\n",
            "renaming": {
                "FUN_00004248": "allocate_memory_00004248",
                "param_1": "size",
                "param_2": "num_elements",
                "puVar1": "allocated_memory",
                "iVar2": "total_size",
                "_malloc_r": "allocate_dynamic_memory",
                "memset": "initialize_memory"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_00004622",
                "FUN_00004bd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004248": {
                    "2": "allocate_memory_block",
                    "1": "allocate_memory_for_array",
                    "3": "allocate_memory_and_initialize",
                    "14": "allocate_memory"
                },
                "param_1": {
                    "1": "memory_block_size",
                    "2": "block_ptr",
                    "3": "size_of_element",
                    "10": "size"
                },
                "param_2": {
                    "2": "index",
                    "1": "element_size",
                    "6": "count",
                    "14": "num_elements"
                },
                "puVar1": {
                    "1": "memory_ptr",
                    "11": "allocated_memory",
                    "7": "ptr",
                    "6": "array_ptr"
                },
                "iVar2": {
                    "1": "size_multiplier",
                    "13": "total_size",
                    "4": "memory_size",
                    "2": "allocated_size"
                },
                "FUN_00004622": {
                    "1": "initialize_block",
                    "2": "initialize_element",
                    "3": "initialize_memory"
                },
                "param_3": {
                    "1": "source_value",
                    "3": "value1"
                },
                "FUN_00004bd0": {
                    "1": "copy_data_to_memory",
                    "2": "set_memory"
                },
                "param_4": {
                    "1": "size",
                    "3": "value2"
                },
                "_malloc_r": {
                    "1": "allocate_dynamic_memory"
                },
                "memset": {
                    "1": "initialize_memory"
                }
            }
        },
        "FUN_00004274": {
            "entrypoint": "0x00004274",
            "current_name": "acquire_recursive_lock_00004274",
            "code": "\nvoid acquire_recursive_lock_00004274(void)\n\n{\n  acquire_recursive_lock_00004274(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004274": "acquire_recursive_lock_00004274",
                "__retarget_lock_acquire_recursive": "acquire_recursive_lock"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004274": {
                    "3": "acquire_recursive_retarget_lock",
                    "27": "acquire_recursive_lock",
                    "1": "lock_acquire_recursive"
                },
                "FUNC_000045e8": {
                    "2": "perform_cleanup",
                    "1": "perform_additional_operation",
                    "7": "perform_additional_task",
                    "3": "execute_subfunction",
                    "6": "do_something"
                },
                "__retarget_lock_acquire_recursive": {
                    "1": "acquire_recursive_lock"
                }
            }
        },
        "FUN_00004280": {
            "entrypoint": "0x00004280",
            "current_name": "release_recursive_lock_00004280",
            "code": "\nvoid release_recursive_lock_00004280(void)\n\n{\n  release_recursive_lock_00004280(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004280": "release_recursive_lock_00004280",
                "__retarget_lock_release_recursive": "release_recursive_lock"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004280": {
                    "2": "release_lock",
                    "27": "release_recursive_lock",
                    "1": "release_lock_recursive"
                },
                "FUNC_000045ec": {
                    "1": "perform_additional_cleanup",
                    "4": "sub_function",
                    "6": "perform_cleanup",
                    "3": "execute_function",
                    "2": "additional_function"
                },
                "__retarget_lock_release_recursive": {
                    "2": "release_recursive_lock"
                }
            }
        },
        "FUN_0000428c": {
            "entrypoint": "0x0000428c",
            "current_name": "acquire_recursive_lock_0000428c",
            "code": "\nvoid acquire_recursive_lock_0000428c(void)\n\n{\n  acquire_recursive_lock_0000428c(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000428c": "acquire_recursive_lock_0000428c",
                "__retarget_lock_acquire_recursive": "acquire_recursive_lock",
                "__retarget_lock_acquire": "acquire_lock"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000428c": {
                    "1": "acquire_recursive_retarget_lock",
                    "27": "acquire_recursive_lock",
                    "2": "acquire_lock"
                },
                "FUNC_000045e8": {
                    "1": "decompile_and_improve",
                    "2": "execute_subfunction",
                    "8": "do_something",
                    "3": "perform_cleanup"
                },
                "__retarget_lock_acquire_recursive": {
                    "1": "__retarget_lock_acquire_recursive",
                    "14": "acquire_recursive_lock"
                },
                "__retarget_lock_acquire": {
                    "1": "acquire_lock"
                }
            }
        },
        "FUN_000042a4": {
            "entrypoint": "0x000042a4",
            "current_name": "FUNC_000042a4",
            "code": "\nvoid FUNC_000042a4(int param_1)\n\n{\n  undefined4 uVar1;\n  \n  __sinit_lock_acquire();\n  if (*(int *)(param_1 + 0x18) == 0) {\n    *(undefined4 *)(param_1 + 0x48) = 0;\n    *(undefined4 *)(param_1 + 0x4c) = 0;\n    *(undefined4 *)(param_1 + 0x50) = 0;\n    uVar1 = 0x1fff0284;\n    *(undefined **)(param_1 + 0x28) = &DAT_0000423d;\n    if (param_1 == 0x1fff0284) {\n      uVar1 = 1;\n    }\n    if (param_1 == 0x1fff0284) {\n      *(undefined4 *)(param_1 + 0x18) = uVar1;\n    }\n    uVar1 = __sfp(param_1);\n    *(undefined4 *)(param_1 + 4) = uVar1;\n    uVar1 = __sfp(param_1);\n    *(undefined4 *)(param_1 + 8) = uVar1;\n    uVar1 = __sfp(param_1);\n    *(undefined4 *)(param_1 + 0xc) = uVar1;\n    std(*(undefined4 *)(param_1 + 4),4,0);\n    std(*(undefined4 *)(param_1 + 8),9,1);\n    std(*(undefined4 *)(param_1 + 0xc),0x12,2);\n    *(undefined4 *)(param_1 + 0x18) = 1;\n  }\n  __retarget_lock_release_recursive(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000042a4": "FUNC_000042a4"
            },
            "calling": [
                "FUN_00004c84",
                "FUN_00004158",
                "FUN_00005404",
                "FUN_000057f8",
                "FUN_00006768",
                "FUN_00004314",
                "FUN_00004db8",
                "FUN_00005e10",
                "FUN_000054a8",
                "FUN_00004418",
                "FUN_00004cb4"
            ],
            "called": [
                "FUN_000041f4",
                "FUN_0000428c",
                "FUN_00004314",
                "FUN_000045ec"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00004314": {
            "entrypoint": "0x00004314",
            "current_name": "initialize_module_00004314",
            "code": "\nundefined4 * initialize_module_00004314(undefined4 *result)\n\n{\n  dword new_size;\n  int count;\n  undefined4 *current_pointer;\n  dword *linked_list_ptr;\n  \n  acquire_lock();\n  if (elf_rel_array[19].r_info == 0) {\n    initialize(0x1fff0284);\n  }\n  linked_list_ptr = &elf_rel_array[0x19].r_info;\n  do {\n    count = linked_list_ptr[1];\n    current_pointer = (undefined4 *)linked_list_ptr[2];\n    while (count = count + -1, -1 < count) {\n      if (*(short *)(current_pointer + 3) == 0) {\n        current_pointer[3] = 0xffff0001;\n        current_pointer[0x19] = 0;\n        initialize_recursive_lock(current_pointer + 0x16);\n        release_lock();\n        current_pointer[1] = 0;\n        current_pointer[2] = 0;\n        current_pointer[4] = 0;\n        current_pointer[5] = 0;\n        *current_pointer = 0;\n        current_pointer[6] = 0;\n        clear_memory(current_pointer + 0x17,0,8);\n        current_pointer[0xd] = 0;\n        current_pointer[0xe] = 0;\n        current_pointer[0x12] = 0;\n        current_pointer[0x13] = 0;\n        return current_pointer;\n      }\n      current_pointer = current_pointer + 0x1a;\n    }\n    if (*linked_list_ptr == 0) {\n      new_size = allocate_memory(result,4);\n      *linked_list_ptr = new_size;\n      if (new_size == 0) {\n        release_lock();\n        *result = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    linked_list_ptr = (dword *)*linked_list_ptr;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00004314": "initialize_module_00004314",
                "param_1": "result",
                "dVar1": "new_size",
                "iVar2": "count",
                "puVar3": "current_pointer",
                "pdVar4": "linked_list_ptr",
                "__sfp_lock_acquire": "acquire_lock",
                "Elf32_Rel_ARRAY_1fff0200": "elf_rel_array",
                "__sinit": "initialize",
                "__retarget_lock_init_recursive": "initialize_recursive_lock",
                "__sfp_lock_release": "release_lock",
                "memset": "clear_memory",
                "__sfmoreglue": "allocate_memory"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_00004274",
                "FUN_00004622",
                "FUN_00004280",
                "FUN_00004248",
                "FUN_000042a4",
                "FUN_000045e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004314": {
                    "1": "initialize_subsystems",
                    "2": "initialize_elf_relocations",
                    "5": "initialize_module"
                },
                "param_1": {
                    "1": "result_pointer",
                    "3": "param",
                    "2": "result_ptr",
                    "8": "result"
                },
                "dVar1": {
                    "1": "dynamic_memory",
                    "2": "new_data",
                    "3": "new_size"
                },
                "iVar2": {
                    "7": "loop_counter",
                    "2": "counter",
                    "1": "iteration_count",
                    "8": "count",
                    "3": "num_elements"
                },
                "puVar3": {
                    "1": "relocation_entry",
                    "3": "current_entry",
                    "2": "pointer_var",
                    "5": "current_pointer"
                },
                "pdVar4": {
                    "1": "current_rel_info_pointer",
                    "2": "rel_array",
                    "3": "linked_list_ptr"
                },
                "__sfp_lock_acquire": {
                    "5": "acquire_lock"
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "2": "elf_rel_array",
                    "1": "rel_array"
                },
                "__sinit": {
                    "5": "initialize"
                },
                "__retarget_lock_init_recursive": {
                    "1": "recursive_lock_init",
                    "3": "initialize_recursive_lock"
                },
                "__sfp_lock_release": {
                    "5": "release_lock"
                },
                "memset": {
                    "2": "clear_memory",
                    "1": "initialize_memory"
                },
                "__sfmoreglue": {
                    "3": "allocate_memory"
                },
                "FUN_00004274": {
                    "1": "helper_function1"
                },
                "FUN_00004622": {
                    "1": "helper_function2"
                },
                "FUN_00004280": {
                    "1": "function3"
                },
                "FUN_00004248": {
                    "1": "function4"
                },
                "FUN_000042a4": {
                    "1": "function5"
                },
                "FUNC_000045e4": {
                    "1": "helper_function6"
                }
            }
        },
        "FUN_000043a0": {
            "entrypoint": "0x000043a0",
            "current_name": "process_data_000043a0",
            "code": "\nuint process_data_000043a0(int base_address,code *callback_function)\n\n{\n  uint result;\n  int *pointer;\n  int inner_var1;\n  uint result;\n  int count;\n  \n  pointer = (int *)(base_address + 0x48);\n  result = 0;\n  do {\n    count = pointer[1];\n    inner_var1 = pointer[2];\n    while (count = count + -1, -1 < count) {\n      if ((1 < *(ushort *)(inner_var1 + 0xc)) && (*(short *)(inner_var1 + 0xe) != -1)) {\n        result = (*callback_function)(inner_var1);\n        result = result | result;\n      }\n      inner_var1 = inner_var1 + 0x68;\n    }\n    pointer = (int *)*pointer;\n  } while (pointer != (int *)0x0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000043a0": "process_data_000043a0",
                "param_1": "base_address",
                "param_2": "callback_function",
                "piVar2": "pointer",
                "iVar5": "count",
                "iVar3": "inner_var1",
                "uVar1": "result",
                "uVar4": "result",
                "_": "temp"
            },
            "calling": [
                "FUN_00006768"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000043a0": {
                    "1": "calculate_result",
                    "11": "process_data",
                    "3": "find_and_execute_code"
                },
                "param_1": {
                    "1": "offset",
                    "4": "input_value",
                    "11": "base_address",
                    "3": "data_offset",
                    "2": "input_param"
                },
                "param_2": {
                    "1": "function_to_call",
                    "2": "function_pointer",
                    "3": "callback_fn",
                    "4": "callback_func",
                    "12": "callback_function"
                },
                "piVar2": {
                    "1": "current_callback_node",
                    "3": "current_node",
                    "2": "current_address",
                    "4": "current_pointer"
                },
                "iVar5": {
                    "4": "loop_counter",
                    "2": "inner_loop_counter",
                    "1": "callback_count",
                    "5": "count",
                    "3": "counter"
                },
                "iVar3": {
                    "1": "current_record",
                    "3": "data_address",
                    "2": "current_address"
                },
                "uVar1": {
                    "2": "return_value",
                    "1": "execution_result",
                    "8": "callback_result",
                    "15": "result"
                },
                "uVar4": {
                    "1": "aggregate_result",
                    "4": "combined_results",
                    "3": "final_result",
                    "6": "combined_result",
                    "13": "result"
                },
                "_": {
                    "1": "temp"
                }
            }
        },
        "FUN_00004418": {
            "entrypoint": "0x00004418",
            "current_name": "read_byte_from_memory_00004418",
            "code": "\nuint read_byte_from_memory_00004418(void)\n\n{\n  dword offset;\n  uint result;\n  byte **byte_ptr_ptr;\n  byte *byte_ptr;\n  \n  offset = memory_offset;\n  if ((memory_offset != 0) &&\n     (*(int *)(memory_offset + 0x18) == 0)) {\n    initialize(memory_offset);\n  }\n  byte_ptr_ptr = *(byte ***)(offset + 4);\n  if ((offset != 0) && (*(int *)(offset + 0x18) == 0)) {\n    initialize();\n  }\n  if (byte_ptr_ptr == (byte **)&DAT_000079b8) {\n    byte_ptr_ptr = *(byte ***)(offset + 4);\n  }\n  else if (byte_ptr_ptr == (byte **)&DAT_000079d8) {\n    byte_ptr_ptr = *(byte ***)(offset + 8);\n  }\n  else if (byte_ptr_ptr == (byte **)&DAT_00007998) {\n    byte_ptr_ptr = *(byte ***)(offset + 0xc);\n  }\n  if ((-1 < (int)array_length << 0x1f) && (-1 < (int)((uint)*(ushort *)(byte_ptr_ptr + 3) << 0x16))) {\n    acquire_recursive_lock(recursive_lock);\n  }\n  byte_ptr = byte_ptr_ptr[1];\n  byte_ptr_ptr[1] = byte_ptr + -1;\n  if ((int)(byte_ptr + -1) < 0) {\n    result = get_next_byte(offset,byte_ptr_ptr);\n  }\n  else {\n    byte_ptr = *byte_ptr_ptr;\n    *byte_ptr_ptr = byte_ptr + 1;\n    result = (uint)*byte_ptr;\n  }\n  if ((-1 < (int)array_length << 0x1f) && (-1 < (int)((uint)*(ushort *)(byte_ptr_ptr + 3) << 0x16))) {\n    release_recursive_lock(recursive_lock);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004418": "read_byte_from_memory_00004418",
                "ppbVar3": "byte_ptr_ptr",
                "pbVar4": "byte_ptr",
                "dVar1": "offset",
                "uVar2": "result",
                "__sinit": "initialize",
                "__retarget_lock_acquire_recursive": "acquire_recursive_lock",
                "__srget_r": "get_next_byte",
                "__retarget_lock_release_recursive": "release_recursive_lock",
                "Elf32_Rel_ARRAY_1fff0200": "rel_array",
                "r_offset": "offset",
                "Elf32_Rel_ARRAY_1fff0200[16].r_offset": "memory_offset",
                "ppbVar3[0x19]": "array_length",
                "ppbVar3[0x16]": "recursive_lock"
            },
            "calling": [
                "FUN_00002d94"
            ],
            "called": [
                "FUN_000045e8",
                "FUN_00005e10",
                "FUN_000045ec",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004418": {
                    "3": "read_byte_from_buffer",
                    "1": "get_decoded_value",
                    "10": "read_byte_from_memory",
                    "2": "read_byte_from_array"
                },
                "ppbVar3": {
                    "1": "relocation_entry",
                    "3": "buffer_pointer"
                },
                "pbVar4": {
                    "6": "byte_ptr",
                    "5": "byte_pointer",
                    "1": "pointer_byte",
                    "2": "pointer",
                    "4": "current_byte",
                    "3": "byte_value"
                },
                "dVar1": {
                    "1": "memory_offset",
                    "4": "relocation_offset",
                    "9": "offset",
                    "6": "r_offset"
                },
                "uVar2": {
                    "1": "read_byte_value",
                    "2": "byte_value",
                    "12": "result"
                },
                "__sinit": {
                    "1": "initialize_value",
                    "8": "initialize"
                },
                "__retarget_lock_acquire_recursive": {
                    "1": "",
                    "3": "acquire_recursive_lock",
                    "2": "lock_acquire_recursive"
                },
                "__srget_r": {
                    "1": "read_byte_from_stream"
                },
                "__retarget_lock_release_recursive": {
                    "2": "lock_release_recursive",
                    "3": "release_recursive_lock",
                    "1": ""
                },
                "FUNC_000045e8": {
                    "1": "lock_acquire"
                },
                "FUN_00005e10": {
                    "1": "get_data",
                    "2": "get_value"
                },
                "FUNC_000045ec": {
                    "1": "release_resources"
                },
                "FUN_000042a4": {
                    "1": "initialize_value"
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "1": "memory_array",
                    "3": "rel_array",
                    "2": "relocation_array"
                },
                "FUN_000045e8": {
                    "1": "initialize"
                },
                "FUN_000045ec": {
                    "1": "decrement"
                },
                "DAT_000079b8": {
                    "1": "data_pointer1"
                },
                "DAT_000079d8": {
                    "1": "data_pointer2"
                },
                "DAT_00007998": {
                    "1": "data_pointer3"
                },
                "r_offset": {
                    "1": "offset"
                },
                "Elf32_Rel_ARRAY_1fff0200[16].r_offset": {
                    "1": "memory_offset"
                },
                "*ppbVar3": {
                    "1": "pointer_to_byte_array"
                },
                "ppbVar3[0x19]": {
                    "1": "array_length"
                },
                "*(ushort *)(ppbVar3 + 3)": {
                    "1": "array_value"
                },
                "ppbVar3[0x16]": {
                    "1": "recursive_lock"
                }
            }
        },
        "FUN_0000443c": {
            "entrypoint": "0x0000443c",
            "current_name": "extract_date_time_components_0000443c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000044a8) */\n\nuint * extract_date_time_components_0000443c(undefined4 *date_time,uint *result)\n\n{\n  int quotient;\n  uint days;\n  uint days;\n  uint days;\n  uint leap_years;\n  undefined4 dividend;\n  undefined4 divisor;\n  uint temp3;\n  bool is_negative;\n  \n  dividend = *date_time;\n  divisor = date_time[1];\n  quotient = calculate_days(dividend,divisor,0x15180,0);\n  days = 0x15180;\n  calculate_days(dividend,divisor,0x15180,0);\n  is_negative = (int)days < 0;\n  if (is_negative) {\n    days = days + 0x15180;\n  }\n  if (is_negative) {\n    days = quotient + 0xafa6b;\n  }\n  else {\n    days = quotient + 0xafa6c;\n  }\n  years = days / 0xe10;\n  months = (days % 0xe10) / 0x3c;\n  *result = (days % 0xe10) % 0x3c;\n  day_of_week = (days + 3) % 7;\n  days = days;\n  if ((int)days < 0) {\n    days = days - 0x23ab0;\n  }\n  days = (days / 0x23ab1) * -0x23ab1 + days;\n  days = ((days / 0x8eac + days) - days / 0x5b4) - days / 0x23ab0;\n  leap_years = days / 0x16d;\n  days = (leap_years / 100 - days / 0x5b4) + days + leap_years * -0x16d;\n  temp3 = days * 5 + 2;\n  days = temp3 / 0x99;\n  if (temp3 < 0x5fa) {\n    quotient = 2;\n  }\n  else {\n    quotient = -10;\n  }\n  temp3 = days + quotient;\n  quotient = (days / 0x23ab1) * 400 + leap_years;\n  if (temp3 < 2) {\n    quotient = quotient + 1;\n  }\n  if (days < 0x132) {\n    if (((leap_years & 3) == 0) && (leap_years != (leap_years / 100) * 100)) {\n      days = 1;\n    }\n    else {\n      days = (uint)(leap_years % 400 == 0);\n    }\n    days = days + 0x3b + days;\n  }\n  else {\n    days = days - 0x132;\n  }\n  adjusted_days = days;\n  num_day = (days + 1) - (days * 0x99 + 2) / 5;\n  num_month = temp3;\n  num_year = quotient - 0x76c;\n  unused = 0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0000443c": "extract_date_time_components_0000443c",
                "param_1": "date_time",
                "param_2": "result",
                "uVar6": "dividend",
                "uVar7": "divisor",
                "uVar2": "days",
                "uVar3": "days",
                "iVar1": "quotient",
                "uVar8": "temp3",
                "uVar4": "days",
                "uVar5": "leap_years",
                "bVar9": "is_negative",
                "param_2[2]": "years",
                "param_2[1]": "months",
                "param_2[6]": "day_of_week",
                "param_2[7]": "adjusted_days",
                "param_2[3]": "num_day",
                "param_2[4]": "num_month",
                "param_2[5]": "num_year",
                "param_2[8]": "unused",
                "__aeabi_ldivmod": "calculate_days"
            },
            "calling": [
                "FUN_00002690",
                "FUN_00002624"
            ],
            "called": [
                "FUN_00006974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000443c": {
                    "2": "calculate_date_components",
                    "4": "decode_date_time",
                    "3": "calculate_date_time",
                    "1": "convert_timestamp_to_date_time",
                    "7": "extract_date_time_components"
                },
                "param_1": {
                    "1": "input_date",
                    "2": "timestamp",
                    "12": "date_time"
                },
                "param_2": {
                    "2": "components",
                    "1": "output_date",
                    "4": "decoded_date_time",
                    "6": "result"
                },
                "uVar6": {
                    "1": "value1",
                    "11": "dividend",
                    "2": "quotient",
                    "8": "year"
                },
                "uVar7": {
                    "1": "minute",
                    "6": "month",
                    "2": "temp2",
                    "11": "divisor"
                },
                "uVar2": {
                    "1": "days_since_base",
                    "2": "year_offset",
                    "4": "days"
                },
                "uVar3": {
                    "1": "temp3",
                    "3": "remainder",
                    "2": "total_minutes",
                    "6": "days"
                },
                "iVar1": {
                    "1": "temp4",
                    "2": "div_mod_result",
                    "14": "quotient"
                },
                "uVar8": {
                    "1": "extra_adjustment",
                    "2": "temp_var",
                    "3": "temp",
                    "5": "temp3"
                },
                "uVar4": {
                    "1": "temp4",
                    "2": "temp3",
                    "3": "days"
                },
                "uVar5": {
                    "3": "temp2",
                    "1": "temp3",
                    "2": "temp4"
                },
                "bVar9": {
                    "1": "negative",
                    "28": "is_negative"
                },
                "param_2[2]": {
                    "1": "output_time[2]",
                    "2": "years"
                },
                "param_2[1]": {
                    "2": "months",
                    "1": "num_days_in_month"
                },
                "*param_2": {
                    "2": "days",
                    "1": "output_time[0]"
                },
                "param_2[6]": {
                    "1": "weekday_index",
                    "3": "day_of_week"
                },
                "param_2[7]": {
                    "1": "adjusted_days"
                },
                "param_2[3]": {
                    "1": "output_time[3]"
                },
                "param_2[4]": {
                    "1": "output_time[4]"
                },
                "param_2[5]": {
                    "1": "day_of_year"
                },
                "param_2[8]": {
                    "1": "num_seconds",
                    "2": "unused"
                },
                "uVar10": {
                    "1": "century_code"
                },
                "uVar11": {
                    "1": "century_offset"
                },
                "uVar12": {
                    "1": "year_offset"
                },
                "uVar13": {
                    "1": "days_offset"
                },
                "uVar9": {
                    "1": "leap_year_adjustment"
                },
                "__aeabi_ldivmod": {
                    "1": "calculate_days"
                }
            }
        },
        "FUN_0000459c": {
            "entrypoint": "0x0000459c",
            "current_name": "execute_sub_functions_0000459c",
            "code": "\nvoid execute_sub_functions_0000459c(void)\n\n{\n  code **function_pointers;\n  int index;\n  \n  function_pointers = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**function_pointers)();\n    function_pointers = function_pointers + 1;\n  }\n  _init();\n  function_pointers = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**function_pointers)();\n    function_pointers = function_pointers + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000459c": "execute_sub_functions_0000459c",
                "ppcVar1": "function_pointers",
                "iVar2": "index"
            },
            "calling": [
                "FUN_0000099c"
            ],
            "called": [
                "FUN_00000410"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000459c": {
                    "2": "execute_functions_twice",
                    "3": "execute_initialization",
                    "1": "execute_all_functions",
                    "9": "execute_sub_functions",
                    "4": "execute_init_functions",
                    "6": "execute_functions"
                },
                "FUN_00000410": {
                    "2": "initialize",
                    "1": "initialize_subsystem"
                },
                "ppcVar1": {
                    "1": "function_list_ptr",
                    "15": "function_pointers",
                    "3": "function_list",
                    "2": "function_pointer_array"
                },
                "iVar2": {
                    "1": "sub_function_index",
                    "14": "index",
                    "4": "iterator",
                    "2": "counter",
                    "7": "iteration_count"
                }
            }
        },
        "FUN_000045e4": {
            "entrypoint": "0x000045e4",
            "current_name": "FUNC_000045e4",
            "code": "\nvoid FUNC_000045e4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e4": "FUNC_000045e4"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045e8": {
            "entrypoint": "0x000045e8",
            "current_name": "FUNC_000045e8",
            "code": "\nvoid FUNC_000045e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e8": "FUNC_000045e8"
            },
            "calling": [
                "FUN_0000428c",
                "FUN_00004158",
                "FUN_00005fec",
                "FUN_00004274",
                "FUN_00005790",
                "FUN_000057f8",
                "FUN_00004db8",
                "FUN_00004418",
                "FUN_00004cb4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ec": {
            "entrypoint": "0x000045ec",
            "current_name": "FUNC_000045ec",
            "code": "\nvoid FUNC_000045ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ec": "FUNC_000045ec"
            },
            "calling": [
                "FUN_00005ff8",
                "FUN_00004158",
                "FUN_0000579c",
                "FUN_000057f8",
                "FUN_00004db8",
                "FUN_00004280",
                "FUN_000042a4",
                "FUN_00004418",
                "FUN_00004cb4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ee": {
            "entrypoint": "0x000045ee",
            "current_name": "copy_and_reverse_000045ee",
            "code": "\nvoid copy_and_reverse_000045ee(undefined *source,undefined *destination,int length)\n\n{\n  undefined *dest_ptr;\n  undefined *src_ptr;\n  \n  src_ptr = destination + length;\n  if ((destination < source) && (source < src_ptr)) {\n    dest_ptr = source + length;\n    while (dest_ptr != source) {\n      src_ptr = src_ptr + -1;\n      dest_ptr = dest_ptr + -1;\n      *dest_ptr = *src_ptr;\n    }\n  }\n  else {\n    source = source + -1;\n    for (; destination != src_ptr; destination = destination + 1) {\n      source = source + 1;\n      *source = *destination;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ee": "copy_and_reverse_000045ee",
                "param_1": "source",
                "param_2": "destination",
                "param_3": "length",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr"
            },
            "calling": [
                "FUN_00003ff4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000045ee": {
                    "1": "copy_range_memory",
                    "2": "copy_data",
                    "8": "copy_and_reverse",
                    "5": "copy_range",
                    "6": "reverse_copy"
                },
                "param_1": {
                    "6": "destination",
                    "1": "target_array",
                    "7": "dest",
                    "13": "source",
                    "3": "source_start"
                },
                "param_2": {
                    "12": "destination",
                    "3": "source_end",
                    "1": "dest",
                    "6": "source",
                    "7": "src"
                },
                "param_3": {
                    "23": "length",
                    "1": "buffer_size",
                    "6": "size"
                },
                "puVar1": {
                    "1": "source_iterator",
                    "6": "source_end",
                    "5": "source_ptr",
                    "3": "dest_end",
                    "8": "dest_ptr"
                },
                "puVar2": {
                    "3": "src_end",
                    "1": "dst_ptr",
                    "8": "src_ptr",
                    "2": "destination_end",
                    "6": "dest_end",
                    "4": "dest_ptr"
                }
            }
        },
        "FUN_00004622": {
            "entrypoint": "0x00004622",
            "current_name": "fill_memory_00004622",
            "code": "\nvoid fill_memory_00004622(undefined *destination,undefined value,int size)\n\n{\n  undefined *end_address;\n  \n  end_address = destination + size;\n  for (; destination != end_address; destination = destination + 1) {\n    *destination = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004622": "fill_memory_00004622",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "end_address"
            },
            "calling": [
                "FUN_000041f4",
                "FUN_00003ff4",
                "FUN_00004314",
                "FUN_00003ec4",
                "FUN_00004248",
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004622": {
                    "1": "fill_array_with_value",
                    "8": "memset",
                    "3": "fill_memory_with_byte"
                },
                "param_1": {
                    "14": "destination",
                    "3": "array",
                    "2": "memory_block",
                    "6": "memory",
                    "4": "dest",
                    "1": "memory_ptr"
                },
                "param_2": {
                    "27": "value",
                    "1": "value_to_set",
                    "2": "byte"
                },
                "param_3": {
                    "2": "num_bytes",
                    "4": "count",
                    "1": "block_size",
                    "15": "size",
                    "6": "length"
                },
                "puVar1": {
                    "5": "end_ptr",
                    "1": "end_position",
                    "8": "end_address",
                    "2": "end_of_memory",
                    "3": "end"
                },
                "param_1+param_3": {
                    "1": "end_address"
                }
            }
        },
        "FUN_00004634": {
            "entrypoint": "0x00004634",
            "current_name": "update_date_time_00004634",
            "code": "\nvoid update_date_time_00004634(uint *date_array,uint days,undefined4 param_3)\n\n{\n  int days_in_month;\n  uint year;\n  uint current_month;\n  int days_in_month;\n  bool is_negative;\n  uint *quotient;\n  uint remainder;\n  undefined4 temp;\n  \n  quotient = date_array;\n  remainder = days;\n  temp = param_3;\n  if (0x3b < *date_array) {\n    divide(&quotient,*date_array,0x3c);\n    year = date_array[1] + (int)quotient;\n    date_array[1] = year;\n    if ((int)remainder < 0) {\n      year = year - 1;\n      *date_array = remainder + 0x3c;\n    }\n    else {\n      *date_array = remainder;\n    }\n    if ((int)remainder < 0) {\n      date_array[1] = year;\n    }\n  }\n  if (0x3b < date_array[1]) {\n    divide(&quotient,date_array[1],0x3c);\n    is_negative = (int)remainder < 0;\n    current_month = date_array[2] + (int)quotient;\n    date_array[2] = current_month;\n    year = remainder;\n    if (is_negative) {\n      year = remainder + 0x3c;\n      current_month = current_month - 1;\n    }\n    if (!is_negative) {\n      date_array[1] = year;\n    }\n    if (is_negative) {\n      date_array[1] = year;\n    }\n    if (is_negative) {\n      date_array[2] = current_month;\n    }\n  }\n  if (0x17 < date_array[2]) {\n    divide(&quotient,date_array[2],0x18);\n    is_negative = (int)remainder < 0;\n    current_month = date_array[3] + (int)quotient;\n    date_array[3] = current_month;\n    year = remainder;\n    if (is_negative) {\n      year = remainder + 0x18;\n      current_month = current_month - 1;\n    }\n    if (!is_negative) {\n      date_array[2] = year;\n    }\n    if (is_negative) {\n      date_array[2] = year;\n    }\n    if (is_negative) {\n      date_array[3] = current_month;\n    }\n  }\n  if (0xb < date_array[4]) {\n    divide(&quotient,date_array[4],0xc);\n    is_negative = (int)remainder < 0;\n    year = date_array[5] + (int)quotient;\n    date_array[5] = year;\n    if (is_negative) {\n      remainder = remainder + 0xc;\n      year = year - 1;\n    }\n    if (!is_negative) {\n      date_array[4] = remainder;\n    }\n    if (is_negative) {\n      date_array[4] = remainder;\n    }\n    if (is_negative) {\n      date_array[5] = year;\n    }\n  }\n  year = date_array[5];\n  if ((year & 3) == 0) {\n    if (year == (year / 100) * 100) {\n      if ((year + 0x76c) % 400 == 0) {\n        days_in_month = 0x1d;\n      }\n      else {\n        days_in_month = 0x1c;\n      }\n    }\n    else {\n      days_in_month = 0x1d;\n    }\n  }\n  else {\n    days_in_month = 0x1c;\n  }\n  if ((int)date_array[3] < 1) {\n    while ((int)date_array[3] < 1) {\n      year = date_array[4];\n      date_array[4] = year - 1;\n      if (year - 1 == 0xffffffff) {\n        current_month = date_array[5];\n        year = current_month - 1;\n        date_array[4] = 0xb;\n        date_array[5] = year;\n        if ((year & 3) == 0) {\n          if (year == (year / 100) * 100) {\n            if ((current_month + 0x76b) % 400 == 0) {\n              days_in_month = 0x1d;\n            }\n            else {\n              days_in_month = 0x1c;\n            }\n          }\n          else {\n            days_in_month = 0x1d;\n          }\n        }\n        else {\n          days_in_month = 0x1c;\n        }\n      }\n      days_in_month = days_in_month;\n      if (date_array[4] != 1) {\n        days_in_month = (&DAT_000079fc)[date_array[4]];\n      }\n      date_array[3] = days_in_month + date_array[3];\n    }\n  }\n  else {\n    while( true ) {\n      year = date_array[4];\n      days_in_month = days_in_month;\n      if (year != 1) {\n        days_in_month = (&DAT_000079fc)[year];\n      }\n      if ((int)date_array[3] <= days_in_month) break;\n      date_array[3] = date_array[3] - days_in_month;\n      date_array[4] = year + 1;\n      if (year + 1 == 0xc) {\n        current_month = date_array[5];\n        year = current_month + 1;\n        date_array[4] = 0;\n        date_array[5] = year;\n        if ((year & 3) == 0) {\n          if (year % 100 == 0) {\n            if ((current_month + 0x76d) % 400 == 0) {\n              days_in_month = 0x1d;\n            }\n            else {\n              days_in_month = 0x1c;\n            }\n          }\n          else {\n            days_in_month = 0x1d;\n          }\n        }\n        else {\n          days_in_month = 0x1c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004634": "update_date_time_00004634",
                "param_1": "date_array",
                "param_2": "days",
                "iVar1": "days_in_month",
                "uVar2": "year",
                "uVar3": "current_month",
                "iVar4": "days_in_month",
                "bVar5": "is_negative",
                "local_20": "quotient",
                "local_1c": "remainder",
                "uStack_18": "temp",
                "div": "divide"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005584"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004634": {
                    "1": "adjust_date_time",
                    "10": "update_date",
                    "14": "update_date_time",
                    "2": "calculate_date",
                    "3": "adjust_date"
                },
                "param_1": {
                    "7": "date",
                    "1": "array",
                    "5": "date_time_array",
                    "9": "date_array"
                },
                "param_2": {
                    "5": "days_to_add",
                    "1": "months_to_add",
                    "13": "days",
                    "2": "day",
                    "6": "year"
                },
                "param_3": {
                    "1": "value",
                    "3": "param_3",
                    "2": "is_leap_year"
                },
                "iVar1": {
                    "1": "index",
                    "2": "days_to_add",
                    "16": "days_in_month"
                },
                "uVar2": {
                    "3": "temp1",
                    "1": "temp_var1",
                    "2": "total_days",
                    "4": "year"
                },
                "uVar3": {
                    "1": "temp_value2",
                    "2": "day",
                    "3": "temp_var2",
                    "4": "temp2"
                },
                "iVar4": {
                    "1": "current_month",
                    "3": "current_year",
                    "2": "days",
                    "6": "days_in_year",
                    "7": "days_in_month"
                },
                "bVar5": {
                    "1": "is_negative_days",
                    "24": "is_negative",
                    "2": "is_leap_year"
                },
                "local_20": {
                    "2": "temp_divisor",
                    "4": "temp_array",
                    "1": "div_result",
                    "17": "quotient"
                },
                "local_1c": {
                    "1": "temp_size",
                    "21": "remainder"
                },
                "uStack_18": {
                    "1": "dummy2",
                    "3": "unused",
                    "4": "temp"
                },
                "div": {
                    "1": "divide"
                },
                "FUN_00005584": {
                    "1": "get_days_in_month"
                }
            }
        },
        "FUN_000047e4": {
            "entrypoint": "0x000047e4",
            "current_name": "calculate_date_000047e4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00004ab2) */\n\nundefined8 calculate_date_000047e4(int *date_array)\n\n{\n  longlong total_days;\n  longlong updated_total_days;\n  int *timezone_info;\n  uint remainder;\n  int temp_var2;\n  int temp_var3;\n  int day_of_week;\n  uint days_in_year;\n  uint temp_var6;\n  uint temp_var7;\n  int year;\n  uint year;\n  uint is_negative;\n  uint temp_var8;\n  uint seconds;\n  bool is_leap_year;\n  \n  timezone_info = (int *)get_tz_info();\n  validate_structure(date_array);\n  year = date_array[5];\n  year = date_array[3] + -1 + *(int *)(&DAT_00007a2c + date_array[4] * 4);\n  if (((1 < date_array[4]) && ((year & 3) == 0)) &&\n     ((year != (year / 100) * 100 || (year + 0x76c == ((year + 0x76c) / 400) * 400)))) {\n    year = year + 1;\n  }\n  date_array[7] = year;\n  if (20000 < (int)&DAT_00002710 + year) {\n    day_of_week = -1;\n    temp_var2 = -1;\n    goto LAB_00004aba;\n  }\n  if ((int)year < 0x47) {\n    if (year != 0x46) {\n      for (temp_var6 = 0x45; (int)year < (int)temp_var6; temp_var6 = temp_var6 - 1) {\n        if ((temp_var6 & 3) == 0) {\n          if (temp_var6 == (temp_var6 / 100) * 100) {\n            if ((temp_var6 + 0x76c) % 400 == 0) {\n              day_of_week = 0x16e;\n            }\n            else {\n              day_of_week = 0x16d;\n            }\n          }\n          else {\n            day_of_week = 0x16e;\n          }\n        }\n        else {\n          day_of_week = 0x16d;\n        }\n        year = year - day_of_week;\n      }\n      if ((temp_var6 & 3) == 0) {\n        if (year == (year / 100) * 100) {\n          day_of_week = 0x16d;\n          if ((year + 0x76c) % 400 == 0) {\n            day_of_week = 0x16e;\n          }\n        }\n        else {\n          day_of_week = 0x16e;\n        }\n      }\n      else {\n        day_of_week = 0x16d;\n      }\n      year = year - day_of_week;\n    }\n  }\n  else {\n    temp_var6 = 0x46;\n    do {\n      if ((temp_var6 & 3) == 0) {\n        if (temp_var6 % 100 == 0) {\n          if ((temp_var6 + 0x76c) % 400 == 0) {\n            day_of_week = 0x16e;\n          }\n          else {\n            day_of_week = 0x16d;\n          }\n        }\n        else {\n          day_of_week = 0x16e;\n        }\n      }\n      else {\n        day_of_week = 0x16d;\n      }\n      temp_var6 = temp_var6 + 1;\n      year = year + day_of_week;\n    } while (year != temp_var6);\n  }\n  total_days = (longlong)year * 0x15180 + (longlong)(date_array[2] * 0xe10 + date_array[1] * 0x3c + *date_array)\n  ;\n  seconds = (uint)total_days;\n  day_of_week = (int)((ulonglong)total_days >> 0x20);\n  acquire_tz_lock();\n  set_timezone_unlocked();\n  temp_var6 = DAT_1fff0dd8;\n  if (DAT_1fff0dd8 == 0) {\nLAB_00004934:\n    year = timezone_info[10];\n    day_of_week = (uint)total_days + year;\n    temp_var2 = (int)((ulonglong)total_days >> 0x20) +\n            ((int)year >> 0x1f) + (uint)CARRY4((uint)total_days,year);\n  }\n  else {\n    temp_var8 = date_array[8];\n    is_negative = temp_var8;\n    if (0 < (int)temp_var8) {\n      is_negative = 1;\n    }\n    if ((timezone_info[1] == date_array[5] + 0x76c) || (temp_var2 = __tzcalc_limits(), temp_var2 != 0)) {\n      temp_var7 = timezone_info[0x14];\n      remainder = timezone_info[0x12];\n      days_in_year = timezone_info[10];\n      temp_var6 = remainder - days_in_year;\n      temp_var2 = (timezone_info[0x13] - ((int)days_in_year >> 0x1f)) - (uint)(remainder < days_in_year);\n      if (((int)((day_of_week - temp_var2) - (uint)(seconds < temp_var6)) < 0 ==\n           (SBORROW4(day_of_week,temp_var2) != SBORROW4(day_of_week - temp_var2,(uint)(seconds < temp_var6)))) &&\n         (temp_var3 = (timezone_info[0x13] - ((int)temp_var7 >> 0x1f)) - (uint)(remainder < temp_var7),\n         is_leap_year = seconds < remainder - temp_var7,\n         (int)((day_of_week - temp_var3) - (uint)is_leap_year) < 0 !=\n         (SBORROW4(day_of_week,temp_var3) != SBORROW4(day_of_week - temp_var3,(uint)is_leap_year)))) goto LAB_00004a88;\n      remainder = timezone_info[8] - temp_var7;\n      temp_var3 = (timezone_info[9] - ((int)temp_var7 >> 0x1f)) - (uint)((uint)timezone_info[8] < temp_var7);\n      if (*timezone_info != 0) {\n        if ((int)((day_of_week - temp_var3) - (uint)(seconds < remainder)) < 0 ==\n            (SBORROW4(day_of_week,temp_var3) != SBORROW4(day_of_week - temp_var3,(uint)(seconds < remainder))))\n        goto LAB_0000491e;\nLAB_0000492a:\n        temp_var6 = 0;\n        if ((int)temp_var8 < 0) goto LAB_00004934;\nLAB_00004a14:\n        seconds = is_negative ^ temp_var6;\n        is_negative = temp_var6;\n        if (seconds == 1) {\n          if (temp_var6 == 0) {\n            day_of_week = temp_var7 - days_in_year;\n          }\n          else {\n            day_of_week = days_in_year - temp_var7;\n          }\n          temp_var2 = date_array[3];\n          *date_array = *date_array + day_of_week;\n          updated_total_days = total_days + day_of_week;\n          validate_structure(date_array);\n          temp_var2 = date_array[3] - temp_var2;\n          total_days = total_days + day_of_week;\n          if (temp_var2 != 0) {\n            if (temp_var2 < 2) {\n              if (temp_var2 == -2 || temp_var2 + 2 < 0 != SCARRY4(temp_var2,2)) {\n                temp_var2 = 1;\n              }\n            }\n            else {\n              temp_var2 = -1;\n            }\n            day_of_week = temp_var2 + date_array[7];\n            year = year + temp_var2;\n            if (day_of_week < 0) {\n              temp_var6 = year - 1;\n              if ((temp_var6 & 3) == 0) {\n                if (temp_var6 == (temp_var6 / 100) * 100) {\n                  day_of_week = 0x16d;\n                  if ((year + 0x76b) % 400 != 0) {\n                    day_of_week = 0x16c;\n                  }\n                }\n                else {\n                  day_of_week = 0x16d;\n                }\n              }\n              else {\n                day_of_week = 0x16c;\n              }\n            }\n            else {\n              if ((year & 3) == 0) {\n                if (year == (year / 100) * 100) {\n                  temp_var2 = 0x16d;\n                  if ((year + 0x76c) % 400 == 0) {\n                    temp_var2 = 0x16e;\n                  }\n                }\n                else {\n                  temp_var2 = 0x16e;\n                }\n              }\n              else {\n                temp_var2 = 0x16d;\n              }\n              if (temp_var2 <= day_of_week) {\n                day_of_week = day_of_week - temp_var2;\n              }\n            }\n            date_array[7] = day_of_week;\n            total_days = updated_total_days;\n          }\n        }\n        goto LAB_00004a88;\n      }\n      if ((int)((day_of_week - temp_var3) - (uint)(seconds < remainder)) < 0 !=\n          (SBORROW4(day_of_week,temp_var3) != SBORROW4(day_of_week - temp_var3,(uint)(seconds < remainder)))) {\nLAB_0000491e:\n        if ((int)((day_of_week - temp_var2) - (uint)(seconds < temp_var6)) < 0 ==\n            (SBORROW4(day_of_week,temp_var2) != SBORROW4(day_of_week - temp_var2,(uint)(seconds < temp_var6))))\n        goto LAB_0000492a;\n      }\n      if (-1 < (int)temp_var8) {\n        temp_var6 = 1;\n        goto LAB_00004a14;\n      }\n    }\n    else {\nLAB_00004a88:\n      temp_var6 = is_negative;\n      if (is_negative != 1) goto LAB_00004934;\n    }\n    year = timezone_info[0x14];\n    day_of_week = (uint)total_days + year;\n    temp_var2 = (int)((ulonglong)total_days >> 0x20) +\n            ((int)year >> 0x1f) + (uint)CARRY4((uint)total_days,year);\n    temp_var6 = 1;\n  }\n  release_tz_lock();\n  date_array[8] = temp_var6;\n  date_array[6] = (year + 4U) % 7;\nLAB_00004aba:\n  return concatenate_integers(temp_var2,day_of_week);\n}\n\n",
            "renaming": {
                "FUN_000047e4": "calculate_date_000047e4",
                "param_1": "date_array",
                "piVar3": "timezone_info",
                "uVar4": "remainder",
                "iVar5": "temp_var2",
                "iVar6": "temp_var3",
                "iVar7": "day_of_week",
                "uVar8": "days_in_year",
                "uVar9": "temp_var6",
                "uVar10": "temp_var7",
                "iVar11": "year",
                "uVar12": "year",
                "uVar13": "is_negative",
                "uVar14": "temp_var8",
                "uVar15": "seconds",
                "bVar16": "is_leap_year",
                "lVar1": "total_days",
                "lVar2": "updated_total_days",
                "__gettzinfo": "get_tz_info",
                "__tz_lock": "acquire_tz_lock",
                "_tzset_unlocked": "set_timezone_unlocked",
                "__tz_unlock": "release_tz_lock",
                "CONCAT44": "concatenate_integers"
            },
            "calling": [
                "FUN_00002600",
                "FUN_00002654"
            ],
            "called": [
                "FUN_00005100",
                "FUN_000050f4",
                "FUN_000056b0",
                "FUN_000050e8",
                "FUN_00004f98",
                "FUN_00004634"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000047e4": {
                    "1": "calculate_leap_days",
                    "2": "calculate_day_of_week",
                    "6": "calculate_date_time",
                    "4": "calculate_date_offset",
                    "9": "calculate_date"
                },
                "param_1": {
                    "4": "date",
                    "2": "date_params",
                    "8": "date_array",
                    "1": "time_array",
                    "3": "date_info"
                },
                "piVar3": {
                    "11": "timezone_info",
                    "2": "timezone",
                    "4": "time_zone_info",
                    "9": "tzinfo",
                    "5": "tz_info"
                },
                "uVar4": {
                    "2": "year",
                    "1": "mod",
                    "3": "temp1",
                    "6": "remainder",
                    "5": "temp_var1"
                },
                "iVar5": {
                    "2": "var5",
                    "1": "days_in_month",
                    "4": "temp_var2",
                    "3": "temp2"
                },
                "iVar6": {
                    "5": "temp_var3",
                    "2": "i_var6",
                    "1": "days_in_month",
                    "3": "temp3"
                },
                "iVar7": {
                    "1": "result",
                    "2": "temp4",
                    "3": "temp_var4",
                    "4": "day_of_week"
                },
                "uVar8": {
                    "1": "limit1",
                    "5": "days_in_year",
                    "2": "var8",
                    "3": "temp_var5"
                },
                "uVar9": {
                    "2": "temp_var2",
                    "1": "temp_variable_1",
                    "3": "temp_var6"
                },
                "uVar10": {
                    "1": "diff_tz_days",
                    "2": "temp_var6",
                    "3": "temp_var7"
                },
                "iVar11": {
                    "3": "year",
                    "1": "start_days_offset",
                    "2": "days_since1900"
                },
                "uVar12": {
                    "2": "temp_var9",
                    "9": "year",
                    "1": "temp_var6"
                },
                "uVar13": {
                    "1": "negative_value",
                    "2": "temp_var10",
                    "3": "negative_flag",
                    "5": "is_negative",
                    "4": "is_leap_year"
                },
                "uVar14": {
                    "1": "limit",
                    "2": "var14"
                },
                "uVar15": {
                    "1": "lower_limit",
                    "5": "seconds",
                    "2": "days"
                },
                "bVar16": {
                    "1": "is_prior_to_tz",
                    "15": "is_leap_year",
                    "2": "is_divisible"
                },
                "lVar1": {
                    "1": "days_since_epoch",
                    "3": "total_minutes",
                    "15": "total_days",
                    "10": "total_seconds"
                },
                "lVar2": {
                    "8": "updated_total_days",
                    "1": "updated_days_since_epoch",
                    "3": "new_total_seconds",
                    "2": "adjusted_timestamp",
                    "5": "new_total_days"
                },
                "DAT_00007a2c": {
                    "1": "day_of_year_values",
                    "2": "months_offset"
                },
                "DAT_00002710": {
                    "1": "max_seconds"
                },
                "DAT_1fff0dd8": {
                    "1": "tzcalc_status"
                },
                "uVar16": {
                    "1": "is_divisible_by_4"
                },
                "uVar17": {
                    "1": "is_divisible_by_400"
                },
                "__gettzinfo": {
                    "1": "get_tz_info"
                },
                "__tz_lock": {
                    "1": "acquire_tz_lock"
                },
                "_tzset_unlocked": {
                    "1": "set_timezone_unlocked"
                },
                "__tz_unlock": {
                    "1": "release_tz_lock"
                },
                "validate_structure": {
                    "2": "validate_structure",
                    "1": "validate_timestamp_components"
                },
                "CONCAT44": {
                    "1": "concatenate_integers"
                },
                "FUN_00005100": {
                    "1": "function1"
                },
                "FUN_000050f4": {
                    "1": "function2"
                },
                "FUN_000056b0": {
                    "1": "function3"
                },
                "FUN_000050e8": {
                    "1": "function4"
                },
                "FUN_00004f98": {
                    "1": "function5"
                },
                "FUN_00004634": {
                    "1": "function6"
                },
                "param_2": {
                    "1": "param2"
                },
                "param_3": {
                    "1": "param3"
                },
                "uVar30": {
                    "1": "days_per_month"
                },
                "uVar31": {
                    "1": "days_of_week"
                },
                "uVar32": {
                    "1": "num_days"
                },
                "dVar33": {
                    "1": "tz_adjustment"
                },
                "dVar34": {
                    "1": "conversion_factor"
                },
                "uVar35": {
                    "1": "max_seconds_in_day"
                },
                "uVar36": {
                    "1": "min_seconds_in_day"
                },
                "sVar37": {
                    "1": "tz_info"
                },
                "bVar17": {
                    "1": "is_leap_year"
                },
                "iParam_1[5]": {
                    "1": "year"
                },
                "(*piVar3)[10]": {
                    "1": "timezone_adjustment"
                },
                "&(DAT_00007a2c + iParam_1[4] * 4)": {
                    "1": "days_in_year_adjustment"
                },
                "*(int *)(&DAT_00007a2c + iParam_1[4] * 4)": {
                    "1": "days_in_year_adjustment_value"
                },
                "iParam_1[3]": {
                    "1": "day"
                },
                "(uVar12 & 3)": {
                    "1": "is_leap_year1"
                },
                "20000": {
                    "1": "max_days"
                },
                "(int)&DAT_00002710 + uVar12": {
                    "1": "total_days_out_of_range"
                },
                "0x47": {
                    "1": "boundary1"
                },
                "(piVar3[1] == iParam[5] + 0x76c)": {
                    "1": "is_leap_year_calculation_valid"
                },
                "(uVar4 < uVar8)": {
                    "1": "is_less_than_days_in_year"
                },
                "uVar11": {
                    "1": "days_in_year_adjustment1"
                },
                "(piVar3[0] != 0)": {
                    "1": "is_dst_compensation_required"
                },
                "(iVar7 == 0)": {
                    "1": "is_in_limit"
                },
                "(int)uVar14 < 0": {
                    "1": "is_negative_days_in_limit"
                },
                "(int)uVar12 < 2)": {
                    "1": "is_between0_to1"
                },
                "(iVar11 == -2 || (iVar11 + 2) < 0 != SCARRY4(iVar11,2))": {
                    "1": "is_between_minus2_or_more"
                },
                "(iVar11 < 2)": {
                    "1": "is_between_minus1_to1"
                },
                "(iVar11 >= 2)": {
                    "1": "is_between2_or_more"
                },
                "(uVar9 & 3)": {
                    "1": "is_leap_year2"
                },
                "(uVar12 == (uVar12 / 100) * 100)": {
                    "1": "is_century_leap_year1"
                },
                "(uVar12 + 0x76c) % 400 == 0": {
                    "1": "is_quad_century1"
                },
                "(uVar9 == (uVar9 / 100) * 100)": {
                    "1": "is_century_leap_year2"
                },
                "(uVar9 + 0x76c) % 400 == 0": {
                    "1": "is_quad_century2"
                },
                "(iVar11 + 4U) % 7": {
                    "1": "day_of_week"
                }
            }
        },
        "FUN_00004b34": {
            "entrypoint": "0x00004b34",
            "current_name": "allocate_memory_00004b34",
            "code": "\nvoid allocate_memory_00004b34(undefined4 *result,int size,undefined4 param3,undefined4 param4)\n\n{\n  int *temp_ptr;\n  int **temp_var2;\n  int **current_ptr;\n  int **current_node;\n  int **next_node;\n  int **new_node;\n  bool is_equal;\n  \n  if (size == 0) {\n    return;\n  }\n  new_node = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    new_node = (int **)((int)new_node + *(int *)(size + -4));\n  }\n  lock_memory_allocation();\n  current_node = (int **)&DAT_1fff0db4;\n  if (DAT_1fff0db4 == (int **)0x0) {\n    new_node[1] = (int *)0x0;\n    current_ptr = temp_var2;\n    DAT_1fff0db4 = new_node;\n  }\n  else {\n    next_node = DAT_1fff0db4;\n    if (new_node < DAT_1fff0db4) {\n      current_ptr = (int **)*new_node;\n      current_node = (int **)((int)new_node + (int)current_ptr);\n      is_equal = DAT_1fff0db4 == current_node;\n      if (is_equal) {\n        current_node = (int **)*DAT_1fff0db4;\n        DAT_1fff0db4 = (int **)DAT_1fff0db4[1];\n      }\n      new_node[1] = (int *)DAT_1fff0db4;\n      DAT_1fff0db4 = new_node;\n      if (is_equal) {\n        current_node = (int **)((int)current_node + (int)current_ptr);\n        *new_node = (int *)current_node;\n      }\n    }\n    else {\n      do {\n        current_node = next_node;\n        next_node = (int **)current_node[1];\n        if (next_node == (int **)0x0) break;\n      } while (next_node <= new_node);\n      current_ptr = (int **)*current_node;\n      if ((int **)((int)current_node + (int)current_ptr) == new_node) {\n        current_ptr = (int **)((int)current_ptr + (int)*new_node);\n        *current_node = (int *)current_ptr;\n        if (next_node == (int **)((int)current_node + (int)current_ptr)) {\n          temp_ptr = *next_node;\n          current_node[1] = next_node[1];\n          current_ptr = (int **)((int)current_ptr + (int)temp_ptr);\n          *current_node = (int *)current_ptr;\n        }\n      }\n      else if (new_node < (int **)((int)current_node + (int)current_ptr)) {\n        *result = 0xc;\n      }\n      else {\n        current_ptr = (int **)((int)new_node + (int)*new_node);\n        is_equal = next_node == current_ptr;\n        if (is_equal) {\n          current_ptr = (int **)*next_node;\n          next_node = (int **)next_node[1];\n        }\n        new_node[1] = (int *)next_node;\n        if (is_equal) {\n          current_ptr = (int **)((int)current_ptr + (int)*new_node);\n          *new_node = (int *)current_ptr;\n        }\n        current_node[1] = (int *)new_node;\n      }\n    }\n  }\n  unlock_memory_allocation(result,current_ptr,current_node,param4);\n  return;\n}\n\n",
            "renaming": {
                "param_1": "result",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "param4",
                "piVar1": "temp_ptr",
                "ppiVar2": "current_ptr",
                "ppiVar3": "current_node",
                "ppiVar4": "next_node",
                "ppiVar5": "new_node",
                "bVar6": "is_equal",
                "__malloc_lock": "lock_memory_allocation",
                "extraout_r1": "temp_var2",
                "__malloc_unlock": "unlock_memory_allocation",
                "FUN_00004b34": "allocate_memory_00004b34"
            },
            "calling": [
                "FUN_00006192",
                "FUN_00006768",
                "FUN_00005780",
                "FUN_000054a8",
                "FUN_000060cc",
                "FUN_0000404c"
            ],
            "called": [
                "FUN_0000579c",
                "FUN_00005790"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "1": "lock",
                    "2": "param_array",
                    "4": "result_ptr",
                    "11": "result"
                },
                "param_2": {
                    "1": "param_array_size",
                    "2": "count",
                    "4": "array_size",
                    "17": "size"
                },
                "param_3": {
                    "1": "extra_arg1",
                    "11": "param3",
                    "2": "arg3",
                    "5": "param_3"
                },
                "param_4": {
                    "1": "var2",
                    "11": "param4",
                    "5": "param_4",
                    "2": "arg2"
                },
                "piVar1": {
                    "1": "current_pointer",
                    "2": "temp",
                    "8": "temp_ptr",
                    "4": "temp_pointer",
                    "6": "temp_var1"
                },
                "ppiVar2": {
                    "1": "last_node",
                    "3": "current",
                    "2": "current_block_ptr"
                },
                "ppiVar3": {
                    "2": "prev",
                    "1": "new_var_3",
                    "4": "current_node",
                    "3": "prev_ptr"
                },
                "ppiVar4": {
                    "2": "temp_var4",
                    "4": "next_ptr",
                    "1": "loop_pointer",
                    "5": "next_node"
                },
                "ppiVar5": {
                    "4": "new_ptr",
                    "2": "new_node_ptr",
                    "1": "current2",
                    "7": "new_node"
                },
                "bVar6": {
                    "3": "flag",
                    "1": "bool_flag",
                    "6": "is_equal",
                    "2": "is_match",
                    "4": "is_last_node"
                },
                "__malloc_lock": {
                    "5": "acquire_lock",
                    "3": "lock_malloc",
                    "7": "lock_memory_allocation",
                    "2": "lock_memory",
                    "1": "acquire_memory_lock"
                },
                "DAT_1fff0db4": {
                    "3": "head",
                    "2": "head_ptr",
                    "1": "first_node"
                },
                "extraout_r1": {
                    "3": "temp_var2",
                    "1": "extra_out"
                },
                "__malloc_unlock": {
                    "5": "release_lock",
                    "1": "release_memory_lock",
                    "7": "unlock_memory_allocation",
                    "2": "unlock_memory"
                },
                "*ppiVar5": {
                    "1": "temp_var6_ptr"
                },
                "*ppiVar2": {
                    "1": "temp_var3_ptr"
                },
                "(int)ppiVar5 + *(int *)(param_2 + -4)": {
                    "1": "new_ptr"
                },
                "(int)ppiVar5 + (int)ppiVar2": {
                    "1": "new_ptr2"
                },
                "(int)ppiVar3 + (int)ppiVar2": {
                    "1": "new_ptr3"
                },
                "(int)ppiVar2 + (int)*ppiVar5": {
                    "1": "new_ptr4"
                },
                "(int)ppiVar5 + (int)*ppiVar5": {
                    "1": "new_ptr5"
                },
                "FUN_00004b34": {
                    "1": "update_data_structure",
                    "2": "update_linked_list",
                    "6": "allocate_memory"
                },
                "FUN_0000579c": {
                    "2": "sub_function_1",
                    "1": "lock_memory"
                },
                "FUN_00005790": {
                    "1": "unlock_memory",
                    "2": "sub_function_2"
                }
            }
        },
        "FUN_00004bd0": {
            "entrypoint": "0x00004bd0",
            "current_name": "allocate_memory_00004bd0",
            "code": "\nuint allocate_memory_00004bd0(undefined4 *size,uint size,undefined4 param_3,undefined4 param_4)\n\n{\n  uint *previous_block;\n  int difference;\n  uint block_size_diff;\n  uint *current_block;\n  uint aligned_size;\n  \n  aligned_size = (size + 3 & 0xfffffffc) + 8;\n  if (aligned_size < 0xc) {\n    aligned_size = 0xc;\n  }\n  if (((int)aligned_size < 0) || (aligned_size < size)) {\n    *size = 0xc;\n  }\n  else {\n    lock_memory();\n    previous_block = DAT_1fff0db4;\n    for (current_block = DAT_1fff0db4; current_block != (uint *)0x0; current_block = (uint *)current_block[1]) {\n      block_size_diff = *current_block - aligned_size;\n      if (-1 < (int)block_size_diff) {\n        if (0xb < block_size_diff) {\n          *current_block = block_size_diff;\n          current_block = (uint *)((int)current_block + block_size_diff);\n          goto LAB_00004c34;\n        }\n        if (previous_block == current_block) {\n          DAT_1fff0db4 = (uint *)current_block[1];\n        }\n        if (previous_block != current_block) {\n          previous_block[1] = (uint)(uint *)current_block[1];\n        }\n        goto LAB_00004c42;\n      }\n      previous_block = current_block;\n    }\n    if (DAT_1fff0db8 == 0) {\n      DAT_1fff0db8 = get_heap_start;\n    }\n    previous_block = (uint *)increment_and_get_heap;\n    if ((previous_block != (uint *)0xffffffff) &&\n       ((current_block = (uint *)((int)previous_block + 3U & 0xfffffffc), previous_block == current_block ||\n        (difference = increment_heap(size,(int)current_block - (int)previous_block), difference != -1)))) {\nLAB_00004c34:\n      *current_block = aligned_size;\nLAB_00004c42:\n      unlock_memory(size);\n      aligned_size = (int)current_block + 0xbU & 0xfffffff8;\n      difference = aligned_size - (int)(current_block + 1);\n      if (difference == 0) {\n        return aligned_size;\n      }\n      *(uint *)((int)current_block + difference) = (int)(current_block + 1) - aligned_size;\n      return aligned_size;\n    }\n    *size = 0xc;\n    unlock_memory(size);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004bd0": "allocate_memory_00004bd0",
                "param_1": "size",
                "param_2": "size",
                "puVar1": "previous_block",
                "iVar2": "difference",
                "uVar3": "block_size_diff",
                "puVar4": "current_block",
                "uVar5": "aligned_size",
                "__malloc_lock": "lock_memory",
                "__malloc_unlock": "unlock_memory",
                "_sbrk_r": "increment_heap",
                "_sbrk_r(param_1,0,puVar1,0,param_4)": "get_heap_start",
                "_sbrk_r(param_1,uVar5)": "increment_and_get_heap"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00005700",
                "FUN_000068f0",
                "FUN_000060cc",
                "FUN_00004248"
            ],
            "called": [
                "FUN_0000579c",
                "FUN_00000428",
                "FUN_00005790"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004bd0": {
                    "24": "allocate_memory",
                    "6": "allocate_memory_block"
                },
                "param_1": {
                    "1": "block_size",
                    "2": "ptr_size",
                    "3": "result",
                    "7": "size"
                },
                "param_2": {
                    "1": "size_requested",
                    "6": "alignment",
                    "9": "size",
                    "7": "requested_size",
                    "2": "block_size"
                },
                "param_3": {
                    "1": "unused_param_1",
                    "3": "arg3",
                    "2": "unused_param",
                    "16": "param_3"
                },
                "param_4": {
                    "1": "unused2",
                    "3": "arg4",
                    "16": "param_4"
                },
                "puVar1": {
                    "6": "prev_block",
                    "2": "current_ptr",
                    "7": "current_block",
                    "1": "current_pointer",
                    "11": "previous_block"
                },
                "iVar2": {
                    "1": "free_bytes",
                    "2": "remaining_space",
                    "3": "offset",
                    "14": "difference"
                },
                "uVar3": {
                    "2": "block_size",
                    "1": "chunk_size",
                    "4": "block_size_diff",
                    "3": "difference"
                },
                "puVar4": {
                    "2": "current_chunk",
                    "1": "ptr2",
                    "14": "current_block",
                    "3": "curr_block",
                    "4": "previous_block"
                },
                "uVar5": {
                    "5": "total_size",
                    "6": "aligned_size",
                    "1": "block_size",
                    "4": "allocated_size",
                    "2": "required_size",
                    "3": "new_size"
                },
                "__malloc_lock": {
                    "1": "acquire_memory_lock"
                },
                "__malloc_unlock": {
                    "1": "release_memory_lock"
                },
                "_sbrk_r": {
                    "1": "increment_heap"
                },
                "_sbrk_r(param_1,0,puVar1,0,param_4)": {
                    "1": "get_heap_start"
                },
                "_sbrk_r(param_1,uVar5)": {
                    "1": "increment_and_get_heap"
                },
                "DAT_1fff0db4": {
                    "1": "head",
                    "5": "first_block"
                },
                "DAT_1fff0db8": {
                    "2": "sbrk_result",
                    "1": "sbrk_pointer"
                },
                "FUN_0000579c": {
                    "1": "lock_memory"
                },
                "FUN_00000428": {
                    "1": "sbrk_r"
                },
                "FUN_00005790": {
                    "1": "sub_function3"
                },
                "<original_function_name>": {
                    "1": "allocate_memory_block"
                },
                "<param_1>": {
                    "1": "size"
                },
                "<param_2>": {
                    "1": "min_size"
                },
                "<param_3>": {
                    "1": "param3"
                },
                "<param_4>": {
                    "1": "param4"
                }
            }
        },
        "FUN_00004c84": {
            "entrypoint": "0x00004c84",
            "current_name": "print_formatted_output_00004c84",
            "code": "\nvoid print_formatted_output_00004c84(undefined4 format_string,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  dword offset;\n  undefined4 param_1_copy;\n  undefined4 arg1_copy;\n  undefined4 arg2_copy;\n  undefined4 arg3_copy;\n  \n  offset = symbol_table[16].r_offset;\n  param_1_copy = format_string;\n  arg1_copy = arg1;\n  arg2_copy = arg2;\n  arg3_copy = arg3;\n  if ((symbol_table[16].r_offset != 0) &&\n     (*(int *)(symbol_table[16].r_offset + 0x18) == 0)) {\n    initialize_symbol_table(symbol_table[16].r_offset);\n  }\n  print_formatted_string_internal(offset,*(undefined4 *)(offset + 8),format_string,&arg1_copy,param_1_copy,&arg1_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004c84": "print_formatted_output_00004c84",
                "param_1": "format_string",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "dVar1": "offset",
                "uVar2": "param_1_copy",
                "uStack_c": "arg1_copy",
                "uStack_8": "arg2_copy",
                "uStack_4": "arg3_copy",
                "Elf32_Rel_ARRAY_1fff0200": "symbol_table",
                "__sinit": "initialize_symbol_table",
                "_vfprintf_r": "print_formatted_string_internal"
            },
            "calling": [
                "FUN_00000ed8",
                "FUN_00002b10",
                "FUN_0000211c",
                "FUN_00003378",
                "FUN_00003694",
                "FUN_0000305c",
                "FUN_00002f74",
                "FUN_00002ecc",
                "FUN_00000f04",
                "FUN_0000316c",
                "FUN_00002fe0",
                "FUN_00003524",
                "FUN_00002a88"
            ],
            "called": [
                "FUN_000057f8",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004c84": {
                    "1": "print_with_offset_and_check",
                    "4": "print_formatted_text",
                    "3": "print_formatted_message",
                    "2": "print_formatted_string",
                    "18": "print_formatted_output"
                },
                "param_1": {
                    "1": "format",
                    "27": "format_string"
                },
                "param_2": {
                    "2": "arg2",
                    "24": "arg1",
                    "1": "format_params"
                },
                "param_3": {
                    "2": "arg3",
                    "1": "buffer",
                    "24": "arg2"
                },
                "param_4": {
                    "2": "arg2",
                    "1": "int_params",
                    "24": "arg3"
                },
                "dVar1": {
                    "11": "rel_offset",
                    "3": "relocation_offset",
                    "15": "offset",
                    "1": "symbol_table_offset"
                },
                "uVar2": {
                    "1": "temp_var1",
                    "8": "param_1_copy",
                    "3": "format_string_copy",
                    "7": "param1_copy"
                },
                "uStack_c": {
                    "4": "arg1_copy",
                    "1": "temp_var1"
                },
                "uStack_8": {
                    "1": "arg3_saved",
                    "4": "arg2_copy"
                },
                "uStack_4": {
                    "1": "param4_copy",
                    "4": "arg3_copy"
                },
                "FUN_000057f8": {
                    "1": "process_format_params"
                },
                "FUN_000042a4": {
                    "1": "cleanup_function"
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "1": "symbol_table"
                },
                "__sinit": {
                    "1": "initialize_symbol_table"
                },
                "_vfprintf_r": {
                    "1": "print_formatted_string_internal"
                }
            }
        },
        "FUN_00004cb4": {
            "entrypoint": "0x00004cb4",
            "current_name": "write_character_00004cb4",
            "code": "\nuint write_character_00004cb4(uint character)\n\n{\n  dword rel_offset;\n  undefined4 *buffer;\n  uint count;\n  undefined *buffer;\n  undefined4 var1;\n  undefined4 var2;\n  \n  rel_offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    __sinit(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  buffer = *(undefined4 **)(rel_offset + 8);\n  if ((rel_offset != 0) && (*(int *)(rel_offset + 0x18) == 0)) {\n    __sinit();\n  }\n  if (buffer == &DAT_000079b8) {\n    buffer = *(undefined4 **)(rel_offset + 4);\n  }\n  else if (buffer == (undefined4 *)&DAT_000079d8) {\n    buffer = *(undefined4 **)(rel_offset + 8);\n  }\n  else if (buffer == (undefined4 *)&DAT_00007998) {\n    buffer = *(undefined4 **)(rel_offset + 0xc);\n  }\n  if ((-1 < (int)(buffer[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x16))) {\n    __retarget_lock_acquire_recursive(buffer[0x16]);\n  }\n  count = buffer[2] - 1;\n  buffer[2] = count;\n  if (((int)count < 0) && (((int)count < (int)buffer[6] || (count = character & 0xff, count == 10))))\n  {\n    character = __swbuf_r(rel_offset,character,buffer,count,var1,var2);\n  }\n  else {\n    buffer = (undefined *)*buffer;\n    *buffer = buffer + 1;\n    *buffer = (char)character;\n    character = character & 0xff;\n  }\n  if ((-1 < (int)(buffer[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x16))) {\n    __retarget_lock_release_recursive(buffer[0x16]);\n  }\n  return character;\n}\n\n",
            "renaming": {
                "FUN_00004cb4": "write_character_00004cb4",
                "param_1": "character",
                "dVar1": "rel_offset",
                "puVar2": "buffer",
                "uVar3": "count",
                "puVar4": "buffer",
                "unaff_r4": "var1",
                "unaff_r5": "var2"
            },
            "calling": [
                "FUN_00002a00"
            ],
            "called": [
                "FUN_000045e8",
                "FUN_00005404",
                "FUN_000045ec",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004cb4": {
                    "1": "write_char_to_stream",
                    "3": "write_char",
                    "7": "write_character",
                    "4": "write_char_to_buffer",
                    "2": "write_character_to_output"
                },
                "param_1": {
                    "1": "value",
                    "4": "data",
                    "19": "character",
                    "2": "char_to_write"
                },
                "dVar1": {
                    "19": "rel_offset",
                    "2": "relocation_offset",
                    "5": "offset",
                    "1": "array_index"
                },
                "puVar2": {
                    "1": "stream_ptr",
                    "3": "buffer_ptr",
                    "2": "ptr",
                    "10": "buffer"
                },
                "uVar3": {
                    "1": "new_character_value",
                    "2": "buffer_size",
                    "13": "count",
                    "5": "counter"
                },
                "puVar4": {
                    "2": "buffer_ptr",
                    "1": "output_buffer",
                    "5": "ptr",
                    "3": "buffer_pointer",
                    "9": "buffer"
                },
                "unaff_r4": {
                    "1": "unknown_1",
                    "4": "var1",
                    "3": "arg1",
                    "2": "value1"
                },
                "unaff_r5": {
                    "1": "param_5_unused",
                    "2": "value2",
                    "4": "var2",
                    "3": "arg2"
                },
                "<original_function_name>": {
                    "1": "write_character"
                },
                "<original_parameter_name_1>": {
                    "1": "character"
                },
                "<original_variable_name_1>": {
                    "1": "relocation_offset"
                },
                "<original_variable_name_2>": {
                    "1": "relocation_offset_ptr"
                },
                "<original_variable_name_3>": {
                    "1": "relocation_offset_ptr_minus_1"
                },
                "<original_variable_name_4>": {
                    "1": "buffer_ptr"
                },
                "<original_variable_name_5>": {
                    "1": "buffer_size"
                },
                "<original_variable_name_6>": {
                    "1": "stream_lock"
                },
                "<original_variable_name_7>": {
                    "1": "stream_lock_recursive"
                },
                "<original_variable_name_8>": {
                    "1": "stream_lock_recursive_condition"
                }
            }
        },
        "FUN_00004db8": {
            "entrypoint": "0x00004db8",
            "current_name": "print_string_00004db8",
            "code": "newlineundefined4 print_string_00004db8(int input)newlinenewline{newline  char current_char;newline  dword offset;newline  int result;newline  char *string_ptr;newline  char **string_array;newline  undefined4 return_value;newline  char *current_position;newline  newline  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;newline  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&newline     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {newline    initialize();newline  }newline  string_array = *(char ***)(offset + 8);newline  if (*(int *)(offset + 0x18) == 0) {newline    initialize(offset);newline  }newline  if (string_array == (char **)&DAT_000079b8) {newline    string_array = *(char ***)(offset + 4);newline  }newline  else if (string_array == (char **)&DAT_000079d8) {newline    string_array = *(char ***)(offset + 8);newline  }newline  else if (string_array == (char **)&DAT_00007998) {newline    string_array = *(char ***)(offset + 0xc);newline  }newline  if ((-1 < (int)string_array[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(string_array + 3) << 0x16))) {newline    acquire_lock(string_array[0x16]);newline  }newline  if ((((int)((uint)*(ushort *)(string_array + 3) << 0x1c) < 0) && (string_array[4] != (char *)0x0)) ||newline     (result = setup_stream(offset,string_array), result == 0)) {newline    current_position = (char *)(input + -1);newline    do {newline      while( true ) {newline        current_position = current_position + 1;newline        current_char = *current_position;newline        string_ptr = string_array[2] + -1;newline        string_array[2] = string_ptr;newline        if (current_char == '\\0') {newline          if (-1 < (int)string_ptr) {newline            current_position = *string_array;newline            return_value = 10;newline            *string_array = current_position + 1;newline            *current_position = '\\n';newline            goto LAB_00004d64;newline          }newline          result = buffer_stream(offset,10,string_array);newline          if (result != -1) {newline            return_value = 10;newline            goto LAB_00004d64;newline          }newline          goto LAB_00004d60;newline        }newline        if (((int)string_ptr < 0) && (((int)string_ptr < (int)string_array[6] || (current_char == '\\n')))) break;newline        string_ptr = *string_array;newline        *string_array = string_ptr + 1;newline        *string_ptr = current_char;newline      }newline      result = buffer_stream(offset,current_char,string_array);newline    } while (result != -1);newline  }newlineLAB_00004d60:newline  return_value = 0xffffffff;newlineLAB_00004d64:newline  if ((-1 < (int)string_array[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(string_array + 3) << 0x16))) {newline    __retarget_lock_release_recursive(string_array[0x16]);newline  }newline  return return_value;newline}newlinenewline",
            "renaming": {
                "FUN_00004db8": "print_string_00004db8",
                "param_1": "input",
                "cVar1": "current_char",
                "dVar2": "offset",
                "iVar3": "result",
                "pcVar4": "string_ptr",
                "ppcVar5": "string_array",
                "uVar6": "return_value",
                "pcVar7": "current_position",
                "__sinit": "initialize",
                "__retarget_lock_acquire_recursive": "acquire_lock",
                "__swsetup_r": "setup_stream",
                "__swbuf_r": "buffer_stream",
                "\n": "newline"
            },
            "calling": [
                "FUN_00002b10",
                "FUN_000023a4",
                "FUN_00003694",
                "FUN_00003478",
                "FUN_000034c0",
                "FUN_0000305c",
                "FUN_00002f74",
                "FUN_000033f4",
                "FUN_00002fe0",
                "FUN_00003444",
                "FUN_000033c0",
                "FUN_00002f30",
                "FUN_000031e0",
                "FUN_00002a88"
            ],
            "called": [
                "FUN_000045e8",
                "FUN_00005404",
                "FUN_000045ec",
                "FUN_000054a8",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004db8": {
                    "8": "print_string",
                    "1": "process_string",
                    "5": "process_input",
                    "4": "process_data"
                },
                "param_1": {
                    "9": "input",
                    "1": "input_str",
                    "2": "input_param",
                    "3": "str_length"
                },
                "cVar1": {
                    "2": "char",
                    "4": "character",
                    "21": "current_char"
                },
                "dVar2": {
                    "6": "rel_offset",
                    "2": "base_offset",
                    "1": "data_offset",
                    "15": "offset",
                    "5": "elf_offset"
                },
                "iVar3": {
                    "2": "status",
                    "5": "return_value",
                    "3": "setup_result",
                    "1": "return_val",
                    "16": "result"
                },
                "pcVar4": {
                    "3": "string_pointer",
                    "1": "text_pointer",
                    "5": "str_ptr",
                    "11": "string_ptr"
                },
                "ppcVar5": {
                    "1": "relocation_table_entry",
                    "2": "ptr_array",
                    "3": "pointer_array",
                    "4": "data_ptr"
                },
                "uVar6": {
                    "19": "return_value",
                    "2": "return_val",
                    "1": "output",
                    "5": "result"
                },
                "pcVar7": {
                    "1": "pointer3",
                    "4": "current_char",
                    "3": "current_string",
                    "5": "current_position"
                },
                "FUNC_000045e8": {
                    "1": "initialize"
                },
                "FUN_00005404": {
                    "1": "process_buffer"
                },
                "FUNC_000045ec": {
                    "1": "cleanup"
                },
                "FUN_000054a8": {
                    "1": "swap_values"
                },
                "FUN_000042a4": {
                    "1": "release_lock"
                },
                "__sinit": {
                    "1": "initialize"
                },
                "__retarget_lock_acquire_recursive": {
                    "1": "acquire_lock"
                },
                "__swsetup_r": {
                    "1": "setup_stream"
                },
                "__swbuf_r": {
                    "1": "buffer_stream"
                },
                "\n": {
                    "1": "newline"
                },
                "elf32_Rel_ARRAY_1fff0200": {
                    "1": "rel_array"
                }
            }
        },
        "FUN_00004dc8": {
            "entrypoint": "0x00004dc8",
            "current_name": "update_data_00004dc8",
            "code": "\nvoid update_data_00004dc8(undefined4 buffer,int data)\n\n{\n  int read_result;\n  uint updated_value;\n  bool is_read_successful;\n  \n  read_result = _read_r(buffer,(int)*(short *)(data + 0xe));\n  is_read_successful = -1 < read_result;\n  if (is_read_successful) {\n    updated_value = *(int *)(data + 0x54) + read_result;\n  }\n  else {\n    updated_value = *(ushort *)(data + 0xc) & 0xffffefff;\n  }\n  if (is_read_successful) {\n    *(uint *)(data + 0x54) = updated_value;\n  }\n  if (!is_read_successful) {\n    *(short *)(data + 0xc) = (short)updated_value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004dc8": "update_data_00004dc8",
                "param_1": "buffer",
                "param_2": "data",
                "iVar1": "read_result",
                "uVar2": "updated_value",
                "bVar3": "is_read_successful"
            },
            "calling": [],
            "called": [
                "FUN_00000490"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004dc8": {
                    "1": "update_values",
                    "3": "process_data",
                    "7": "update_value",
                    "15": "update_data"
                },
                "param_1": {
                    "1": "param",
                    "3": "data_pointer",
                    "12": "buffer"
                },
                "param_2": {
                    "9": "data",
                    "1": "memory_offset",
                    "3": "data_ptr",
                    "4": "data_offset"
                },
                "iVar1": {
                    "22": "read_result",
                    "3": "bytes_read"
                },
                "uVar2": {
                    "9": "new_value",
                    "1": "adjusted_value",
                    "18": "updated_value",
                    "2": "new_data"
                },
                "bVar3": {
                    "1": "is_positive_read",
                    "5": "is_positive",
                    "4": "is_successful",
                    "7": "is_read_successful",
                    "3": "is_successful_read"
                }
            }
        },
        "FUN_00004dee": {
            "entrypoint": "0x00004dee",
            "current_name": "write_to_uart_00004dee",
            "code": "\nundefined4 write_to_uart_00004dee(undefined4 file_descriptor,int buffer_address,undefined4 data_address,undefined4 data_size)\n\n{\n  undefined4 result;\n  \n  if ((int)((uint)*(ushort *)(buffer_address + 0xc) << 0x17) < 0) {\n    reposition_file_pointer(file_descriptor,(int)*(short *)(buffer_address + 0xe),0,2);\n  }\n  *(ushort *)(buffer_address + 0xc) = *(ushort *)(buffer_address + 0xc) & 0xefff;\n  result = write_to_uart_00004dee(data_address,data_size);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004dee": "write_to_uart_00004dee",
                "param_1": "file_descriptor",
                "param_2": "buffer_address",
                "param_3": "data_address",
                "param_4": "data_size",
                "uVar1": "result",
                "_lseek_r": "reposition_file_pointer",
                "uart_stdio_write": "write_to_uart"
            },
            "calling": [],
            "called": [
                "FUN_000004f2",
                "FUN_00000e38"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004dee": {
                    "2": "write_data",
                    "4": "read_and_write_data",
                    "12": "write_to_uart",
                    "1": "write_data_and_reposition",
                    "3": "write_uart_data"
                },
                "param_1": {
                    "1": "file_handle",
                    "30": "file_descriptor"
                },
                "param_2": {
                    "1": "buffer",
                    "5": "data_pointer",
                    "2": "data_ptr",
                    "16": "buffer_address"
                },
                "param_3": {
                    "3": "data",
                    "2": "data_start",
                    "1": "buffer_address",
                    "4": "buffer",
                    "16": "data_address"
                },
                "param_4": {
                    "11": "data_size",
                    "4": "size",
                    "2": "length",
                    "6": "data_length",
                    "1": "write_length"
                },
                "uVar1": {
                    "1": "status",
                    "3": "write_status",
                    "12": "result"
                },
                "FUN_000004f2": {
                    "1": "update_buffer"
                },
                "FUN_00000e38": {
                    "1": "seek_end"
                },
                "_lseek_r": {
                    "1": "reposition_file_pointer"
                },
                "uart_stdio_write": {
                    "1": "write_to_uart"
                }
            }
        },
        "FUN_00004e26": {
            "entrypoint": "0x00004e26",
            "current_name": "seek_and_set_flag_00004e26",
            "code": "\nvoid seek_and_set_flag_00004e26(undefined4 file_descriptor,int data_struct)\n\n{\n  int seek_result;\n  ushort modified_flag;\n  bool is_error;\n  \n  seek_result = _lseek_r(file_descriptor,(int)*(short *)(data_struct + 0xe));\n  is_error = seek_result == -1;\n  if (is_error) {\n    modified_flag = *(ushort *)(data_struct + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(data_struct + 0x54) = seek_result;\n    modified_flag = *(ushort *)(data_struct + 0xc) | 0x1000;\n  }\n  if (is_error) {\n    *(ushort *)(data_struct + 0xc) = modified_flag;\n  }\n  if (!is_error) {\n    *(ushort *)(data_struct + 0xc) = modified_flag;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004e26": "seek_and_set_flag_00004e26",
                "param_1": "file_descriptor",
                "param_2": "data_struct",
                "iVar1": "seek_result",
                "uVar2": "modified_flag",
                "bVar3": "is_error"
            },
            "calling": [],
            "called": [
                "FUN_000004f2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004e26": {
                    "1": "update_file_permissions",
                    "2": "handle_file_seek",
                    "3": "update_file_pointer",
                    "5": "seek_and_set_flag"
                },
                "param_1": {
                    "31": "file_descriptor"
                },
                "param_2": {
                    "1": "memory_address",
                    "5": "data_struct",
                    "4": "buffer",
                    "2": "context"
                },
                "iVar1": {
                    "27": "seek_result",
                    "1": "file_result"
                },
                "uVar2": {
                    "4": "flag",
                    "1": "flag_value",
                    "2": "updated_status",
                    "8": "modified_flag",
                    "3": "new_flags"
                },
                "bVar3": {
                    "7": "is_seek_failed",
                    "10": "is_error",
                    "1": "is_error_case",
                    "5": "seek_failed"
                }
            }
        },
        "FUN_00004e52": {
            "entrypoint": "0x00004e52",
            "current_name": "compare_byte_arrays_00004e52",
            "code": "\nint compare_byte_arrays_00004e52(byte *array1,byte *array2)\n\n{\n  byte current_byte;\n  uint byte1;\n  bool is_equal;\n  \n  do {\n    byte1 = (uint)*array1;\n    current_byte = *array2;\n    is_equal = byte1 == 1;\n    if (byte1 != 0) {\n      is_equal = byte1 == current_byte;\n    }\n    array1 = array1 + 1;\n    array2 = array2 + 1;\n  } while (is_equal);\n  return byte1 - current_byte;\n}\n\n",
            "renaming": {
                "FUN_00004e52": "compare_byte_arrays_00004e52",
                "param_1": "array1",
                "param_2": "array2",
                "bVar1": "current_byte",
                "uVar2": "byte1",
                "bVar3": "is_equal"
            },
            "calling": [
                "FUN_00002b10",
                "FUN_0000316c",
                "FUN_00005100",
                "FUN_00002fe0",
                "FUN_00002a18",
                "FUN_00004e52"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004e52": {
                    "2": "compare_and_subtract",
                    "1": "compare_parameters",
                    "7": "compare_bytes",
                    "17": "compare_byte_arrays"
                },
                "param_1": {
                    "2": "input1",
                    "1": "byte_array_1",
                    "3": "bytes1",
                    "15": "array1"
                },
                "param_2": {
                    "2": "input_bytes2",
                    "1": "input_bytes_2",
                    "3": "bytes2",
                    "15": "array2"
                },
                "bVar1": {
                    "5": "current_byte1",
                    "2": "current_byte_2",
                    "3": "array2_element",
                    "4": "byte2",
                    "1": "element2",
                    "8": "current_byte"
                },
                "uVar2": {
                    "4": "current_byte2",
                    "1": "first_byte",
                    "2": "result",
                    "3": "array1_byte"
                },
                "bVar3": {
                    "1": "equal_bytes_flag",
                    "2": "equal_bytes",
                    "3": "is_matching",
                    "19": "is_equal"
                }
            }
        },
        "FUN_00004e66": {
            "entrypoint": "0x00004e66",
            "current_name": "compare_bytes_00004e66",
            "code": "\nint compare_bytes_00004e66(byte *data,int offset,int length)\n\n{\n  byte *current_byte;\n  int difference;\n  byte *next_byte;\n  uint current_byte_value;\n  \n  if (length == 0) {\n    difference = 0;\n  }\n  else {\n    next_byte = (byte *)(offset + -1);\n    current_byte = data;\n    do {\n      current_byte_value = (uint)*current_byte;\n      next_byte = next_byte + 1;\n      if ((current_byte_value != *next_byte) || (current_byte + 1 == data + length)) break;\n      current_byte = current_byte + 1;\n    } while (current_byte_value != 0);\n    difference = current_byte_value - *next_byte;\n  }\n  return difference;\n}\n\n",
            "renaming": {
                "FUN_00004e66": "compare_bytes_00004e66",
                "param_1": "data",
                "param_2": "offset",
                "param_3": "length",
                "pbVar1": "current_byte",
                "iVar2": "difference",
                "pbVar3": "next_byte",
                "uVar4": "current_byte_value"
            },
            "calling": [
                "FUN_0000562c",
                "FUN_00003524"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004e66": {
                    "1": "compare_and_offset_difference",
                    "2": "find_difference",
                    "8": "compare_bytes",
                    "6": "compare_and_calculate_difference",
                    "4": "compare_byte_arrays"
                },
                "param_1": {
                    "3": "array1",
                    "5": "input_data",
                    "1": "input_array",
                    "2": "source"
                },
                "param_2": {
                    "1": "start_offset",
                    "9": "start_index",
                    "10": "offset",
                    "2": "index"
                },
                "param_3": {
                    "3": "array_length",
                    "1": "size",
                    "23": "length"
                },
                "pbVar1": {
                    "1": "ptr1",
                    "3": "source_ptr",
                    "21": "current_byte"
                },
                "iVar2": {
                    "27": "difference",
                    "1": "offset",
                    "2": "result"
                },
                "pbVar3": {
                    "2": "dest_ptr",
                    "18": "next_byte",
                    "1": "compare_ptr"
                },
                "uVar4": {
                    "13": "current_byte_value",
                    "1": "temp",
                    "2": "byte_value",
                    "9": "current_value"
                },
                "FUNC_extract_difference": {
                    "1": "extract_difference"
                }
            }
        },
        "FUN_00004f84": {
            "entrypoint": "0x00004f84",
            "current_name": "parse_integer_00004f84",
            "code": "\nuint parse_integer_00004f84(byte *input_string,byte **output,uint base)\n\n{\n  uint result;\n  uint current_char;\n  uint is_negative;\n  uint digit_value;\n  int comparison;\n  uint max_value;\n  uint quotient;\n  byte *current_byte;\n  byte *next_byte;\n  \n  next_byte = input_string;\n  do {\n    current_byte = next_byte;\n    next_byte = current_byte + 1;\n    current_char = (uint)*current_byte;\n    is_negative = (byte)(&DAT_00007a99)[current_char] & 8;\n  } while (((&DAT_00007a99)[current_char] & 8) != 0);\n  if (current_char == 0x2d) {\n    current_char = (uint)*next_byte;\n    is_negative = 1;\n    next_byte = current_byte + 2;\n  }\n  else if (current_char == 0x2b) {\n    current_char = (uint)*next_byte;\n    next_byte = current_byte + 2;\n  }\n  if (base == 0) {\n    if (current_char != 0x30) {\n      base = 10;\n      goto base_check;\n    }\n  }\n  else if ((base != 0x10) || (current_char != 0x30)) goto base_check;\n  if ((*next_byte & 0xdf) == 0x58) {\n    current_char = (uint)next_byte[1];\n    base = 0x10;\n    next_byte = next_byte + 2;\n  }\n  else {\n    current_char = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nbase_check:\n  max_value = is_negative + 0x7fffffff;\n  comparison = 0;\n  quotient = max_value / base;\n  result = 0;\n  do {\n    digit_value = current_char - 0x30;\n    if (9 < digit_value) {\n      if (current_char - 0x41 < 0x1a) {\n        digit_value = current_char - 0x37;\n      }\n      else {\n        if (0x19 < current_char - 0x61) break;\n        digit_value = current_char - 0x57;\n      }\n    }\n    if ((int)base <= (int)digit_value) break;\n    if (comparison != -1) {\n      if ((quotient < result) || ((quotient == result && ((int)(max_value - base * quotient) < (int)digit_value)))) {\n        comparison = -1;\n      }\n      else {\n        result = result * base + digit_value;\n        comparison = 1;\n      }\n    }\n    current_char = (uint)*next_byte;\n    next_byte = next_byte + 1;\n  } while( true );\n  if (comparison == -1) {\n    *(undefined4 *)elf_rel_array[16].r_offset = 0x22;\n    result = max_value;\n    if (output == (byte **)0x0) {\n      return max_value;\n    }\n  }\n  else {\n    if (is_negative != 0) {\n      result = -result;\n    }\n    if (output == (byte **)0x0) {\n      return result;\n    }\n    if (comparison == 0) goto LAB_00004f64;\n  }\n  input_string = next_byte + -1;\nLAB_00004f64:\n  *output = input_string;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004f84": "parse_integer_00004f84",
                "param_1": "input_string",
                "param_2": "output",
                "param_3": "base",
                "uVar1": "result",
                "uVar2": "current_char",
                "uVar3": "is_negative",
                "uVar4": "digit_value",
                "iVar5": "comparison",
                "uVar6": "max_value",
                "uVar7": "quotient",
                "pbVar8": "current_byte",
                "pbVar9": "next_byte",
                "LAB_00004ed6": "base_check",
                "Elf32_Rel_ARRAY_1fff0200": "elf_rel_array"
            },
            "calling": [
                "FUN_0000328c",
                "FUN_00004042"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004f84": {
                    "1": "convert_hex_string_to_integer",
                    "11": "parse_integer",
                    "3": "convert_string_to_number",
                    "6": "parse_number",
                    "2": "convert_string_to_int"
                },
                "param_1": {
                    "9": "input",
                    "14": "input_string",
                    "2": "hex_string",
                    "1": "input_chars",
                    "3": "input_str"
                },
                "param_2": {
                    "3": "output_pointer",
                    "2": "remaining_string",
                    "1": "remainder_pointer",
                    "5": "output_string",
                    "6": "output"
                },
                "param_3": {
                    "31": "base"
                },
                "uVar1": {
                    "2": "parsed_integer",
                    "1": "decimal_result",
                    "4": "parsed_value",
                    "20": "result"
                },
                "uVar2": {
                    "1": "current_byte",
                    "4": "ch",
                    "25": "current_char"
                },
                "uVar3": {
                    "4": "flag",
                    "21": "is_negative",
                    "1": "result"
                },
                "uVar4": {
                    "15": "digit_value",
                    "2": "parsed_digit",
                    "1": "character_value",
                    "12": "digit"
                },
                "iVar5": {
                    "1": "result",
                    "2": "sign",
                    "3": "compare",
                    "4": "compare_result",
                    "7": "comparison",
                    "5": "comparison_result"
                },
                "uVar6": {
                    "1": "limit",
                    "2": "max_integer",
                    "18": "max_value",
                    "3": "max_result"
                },
                "uVar7": {
                    "1": "multiplier",
                    "3": "max_quotient",
                    "2": "max_divisor",
                    "15": "quotient"
                },
                "pbVar8": {
                    "2": "curr_char",
                    "1": "current_char_ptr",
                    "5": "current_ptr",
                    "3": "current_char",
                    "17": "current_byte"
                },
                "pbVar9": {
                    "16": "next_byte",
                    "1": "current_byte",
                    "5": "next_char",
                    "2": "next_char_pointer"
                },
                "LAB_00004ed6": {
                    "1": "process_base"
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "1": "some_array"
                }
            }
        },
        "FUN_00004f98": {
            "entrypoint": "0x00004f98",
            "current_name": "calculate_day_of_week_00004f98",
            "code": "\nundefindexned4 calculate_day_of_week_00004f98(uindexnt year)\n\n{\n  uindexnt *time_zone_info;\n  undefindexned4 is_leap_year;\n  uindexnt day_of_week;\n  indexnt days_to_add;\n  uindexnt *date_info;\n  indexnt total_days;\n  uindexnt is_leap_year;\n  indexnt month_index;\n  indexnt days_offset;\n  uindexnt is_divisible_by400;\n  \n  time_zone_info = (uindexnt *)get_timezone_info();\n  indexf ((indexnt)year < 0x7b2) {\n    is_leap_year = 0;\n  }\n  else {\n    total_days = (year - 0x7b2) * 0x16d + ((indexnt)(year - 0x7b1) >> 2) +\n            (year - 0x76d) / 0xffffff9c + (year - 0x641) / 400;\n    timezone_info.year = year;\n    is_divisible_by400 = (uindexnt)(year % 400 == 0);\n    date_info = time_zone_info;\n    do {\n      day_of_week = date_info.month;\n      indexf (*(char *)(date_info + 2) == 'J') {\n        indexf ((((year & 3) == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\n          indexf ((indexnt)day_of_week < 0x3c) {\n            days_to_add = 0;\n          }\n          else {\n            days_to_add = 1;\n          }\n        }\n        else {\n          days_to_add = 0;\n        }\n        days_to_add = days_to_add + total_days + day_of_week + -1;\n      }\n      else indexf (*(char *)(date_info + 2) == 'D') {\n        days_to_add = total_days + day_of_week;\n      }\n      else {\n        is_leap_year = is_divisible_by400;\n        indexf (((year & 3) == 0) && (year % 100 != 0)) {\n          is_leap_year = 1;\n        }\n        month_index = 0;\n        days_to_add = total_days;\n        whindexle( true ) {\n          month_index = month_index + 1;\n          indexf ((indexnt)month_index <= month_index) break;\n          days_to_add = days_to_add + *(indexnt *)(&month_data + month_index * 4 + is_leap_year * 0x30);\n        }\n        days_offset = day_of_week - (days_to_add + 4U) % 7;\n        indexf (days_offset < 0) {\n          days_offset = days_offset + 7;\n        }\n        for (days_offset = (week_start - 1) * 7 + days_offset;\n            *(indexnt *)(&month_data + month_index * 4 + is_leap_year * 0x30) <= days_offset; days_offset = days_offset + -7) {\n        }\n        days_to_add = days_to_add + days_offset;\n      }\n      day_of_week = date_info.year_offset + days_to_add * 0x15180 + date_info.total_days;\n      date_info.adjusted_days = day_of_week;\n      date_info.is_negative = (indexnt)day_of_week >> 0x1f;\n      date_info = date_info + 10;\n    } whindexle (time_zone_info + 0x14 != date_info);\n    day_of_week = is_negative_shift;\n    is_divisible_by400 = previous_year_negative_shift;\n    *time_zone_info = (uindexnt)((indexnt)((day_of_week - is_divisible_by400) - (uindexnt)(total_shift < previous_year_shift)) < 0 !=\n                    (SBORROW4(day_of_week,is_divisible_by400) !=\n                    SBORROW4(day_of_week - is_divisible_by400,(uindexnt)(total_shift < previous_year_shift))));\n    is_leap_year = 1;\n  }\n  return is_leap_year;\n}\n\n",
            "renaming": {
                "FUN_00004f98": "calculate_day_of_week_00004f98",
                "param_1": "year",
                "puVar1": "time_zone_info",
                "uVar2": "is_leap_year",
                "uVar3": "day_of_week",
                "iVar4": "days_to_add",
                "puVar5": "date_info",
                "iVar6": "total_days",
                "uVar7": "is_leap_year",
                "iVar8": "month_index",
                "iVar9": "days_offset",
                "uVar10": "is_divisible_by400",
                "UNK_00007b98": "month_data",
                "puVar1[1]": "timezone_info.year",
                "puVar5[5]": "date_info.month",
                "puVar5[10]": "date_info.year_offset",
                "puVar5[6]": "date_info.total_days",
                "puVar5[8]": "date_info.adjusted_days",
                "puVar5[9]": "date_info.is_negative",
                "puVar5[3]": "month_index",
                "puVar5[4]": "week_start",
                "puVar1[8]": "total_shift",
                "puVar1[9]": "is_negative_shift",
                "puVar1[0x12]": "previous_year_shift",
                "puVar1[0x13]": "previous_year_negative_shift",
                "__gettzinfo": "get_timezone_info",
                "i": "index",
                "uVar5": "divisor100_remainder"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000047e4"
            ],
            "called": [
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00004f98": {
                    "1": "calculate_date_info",
                    "3": "calculate_date_offset",
                    "2": "calculate_week_day",
                    "18": "calculate_day_of_week"
                },
                "param_1": {
                    "30": "year",
                    "1": "input_year"
                },
                "puVar1": {
                    "1": "timezone",
                    "7": "tzinfo",
                    "10": "time_zone_info",
                    "4": "tz_info"
                },
                "uVar2": {
                    "15": "is_leap_year",
                    "2": "is_leap",
                    "13": "result",
                    "1": "is_leap_year6"
                },
                "uVar3": {
                    "1": "day_of_year",
                    "13": "day_of_week",
                    "3": "day_of_week_offset"
                },
                "iVar4": {
                    "3": "extra_days",
                    "4": "days_to_add",
                    "1": "days_in_month",
                    "2": "day_of_week"
                },
                "puVar5": {
                    "1": "time_zone_entry",
                    "2": "ptr",
                    "5": "date_info",
                    "3": "month_data"
                },
                "iVar6": {
                    "1": "offset",
                    "9": "total_days",
                    "2": "days_since_start"
                },
                "uVar7": {
                    "1": "leap_year_flag",
                    "14": "is_leap_year",
                    "3": "leap_year",
                    "4": "is_leap",
                    "2": "is_leap_year_check"
                },
                "iVar8": {
                    "3": "index",
                    "1": "temp3",
                    "12": "i",
                    "13": "month_index"
                },
                "iVar9": {
                    "1": "days_in_month_offset",
                    "2": "month_offset",
                    "3": "day_offset",
                    "4": "days_offset"
                },
                "uVar10": {
                    "1": "days_so_far",
                    "8": "is_leap_year",
                    "2": "is_leap_year_increment",
                    "9": "is_divisible_by400"
                },
                "uVar11": {
                    "1": "total_seconds",
                    "2": "days_in_month"
                },
                "uVar12": {
                    "1": "temp2"
                },
                "uVar13": {
                    "1": "temp3"
                },
                "uVar14": {
                    "1": "days_since_epoch"
                },
                "uVar15": {
                    "1": "is_last_day_of_previous_month"
                },
                "FUN_000056b0": {
                    "1": "get_current_timezone"
                },
                "UNK_00007b98": {
                    "1": "month_data"
                },
                "uVar16": {
                    "1": "is_last_day_of_current_month"
                },
                "puVar1[1]": {
                    "1": "year"
                },
                "puVar5[5]": {
                    "1": "date_info.month"
                },
                "*(char *)(puVar5 + 2)": {
                    "1": "date_info.first_char_of_month"
                },
                "puVar5[10]": {
                    "1": "year_shift"
                },
                "puVar5[6]": {
                    "1": "date_info.total_days"
                },
                "puVar5[8]": {
                    "1": "date_info.adjusted_days"
                },
                "puVar5[9]": {
                    "1": "is_negative_shift"
                },
                "puVar5[2]": {
                    "1": "month_code"
                },
                "puVar5[3]": {
                    "1": "month_index"
                },
                "puVar5[4]": {
                    "1": "week_start"
                },
                "puVar1[8]": {
                    "1": "total_shift"
                },
                "puVar1[9]": {
                    "1": "is_negative_shift"
                },
                "puVar1[0x12]": {
                    "1": "previous_year_shift"
                },
                "puVar1[0x13]": {
                    "1": "previous_year_negative_shift"
                },
                "__gettzinfo": {
                    "1": "get_timezone_info"
                },
                "i": {
                    "1": "index"
                },
                "uVar17": {
                    "1": "is_last_day"
                },
                "uVar18": {
                    "1": "is_leap_day"
                },
                "uVar19": {
                    "1": "is_end_of_february"
                },
                "uVar20": {
                    "1": "is_end_of_leap_month"
                },
                "uVar21": {
                    "1": "is_end_of_month"
                },
                "uVar22": {
                    "1": "is_end_of_last_month_of_year"
                },
                "uVar23": {
                    "1": "is_end_of_year"
                },
                "\u79fb\u76f8": {
                    "1": "deconstruct"
                },
                "\u65b9\u4f4d": {
                    "1": "direction"
                },
                "\u5236\u5283": {
                    "1": "division"
                },
                "\u6703\u52d9": {
                    "1": "function"
                },
                "\u76df\u773e": {
                    "1": "function"
                },
                "\u6240\u898b": {
                    "1": "function"
                },
                "\u652f\u90a3": {
                    "1": "january"
                },
                "\u6771\u65b9": {
                    "1": "january"
                },
                "\u5ba3\u7a31": {
                    "1": "january"
                },
                "\u7532\u7533": {
                    "1": "january"
                },
                "\u65e5\u9670": {
                    "1": "january"
                },
                "\u5eff\u4e00": {
                    "1": "february"
                },
                "\u65b9\u5411": {
                    "1": "march"
                },
                "\u6771\u65e5": {
                    "1": "april"
                },
                "\u76ee\u6085": {
                    "1": "may"
                },
                "\u5982\u662f": {
                    "1": "june"
                },
                "\u82b1\u671d": {
                    "1": "july"
                },
                "\u6b63\u6714": {
                    "1": "august"
                },
                "\u516d\u767e": {
                    "1": "100"
                },
                "\u79d2\u8ba1": {
                    "1": "240"
                },
                "\u5236\u7ea6": {
                    "1": "400"
                },
                "\u9886\u6d77": {
                    "1": "1"
                },
                "\u8cf4\u4ee5": {
                    "1": "7"
                },
                "\u4e2d\u592e": {
                    "1": "31"
                },
                "\u8ba1\u5206": {
                    "1": "15180"
                },
                "\u6642\u5c1a": {
                    "1": "10"
                },
                "\u821e\u8e48": {
                    "1": "8"
                },
                "\u6226\u95d8": {
                    "1": "9"
                },
                "\u9320\u524d": {
                    "1": "8"
                },
                "\u4f5c\u6226": {
                    "1": "19"
                },
                "uVar4": {
                    "1": "divisor400_remainder"
                },
                "uVar5": {
                    "1": "divisor100_remainder"
                },
                "uVar6": {
                    "1": "divisor4_remainder"
                }
            }
        },
        "FUN_000050e8": {
            "entrypoint": "0x000050e8",
            "current_name": "get_memory_address_000050e8",
            "code": "\nundefined * get_memory_address_000050e8(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050e8": "get_memory_address_000050e8"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000050e8": {
                    "3": "get_data_address",
                    "16": "get_memory_address",
                    "1": "get_reversed_data",
                    "2": "get_data_ptr",
                    "5": "get_data_pointer"
                },
                "DAT_1fff0deb": {
                    "1": "data_memory_address",
                    "2": "starting_address",
                    "15": "memory_address"
                },
                "&DAT_1fff0deb": {
                    "1": "starting_address"
                }
            }
        },
        "FUN_000050f4": {
            "entrypoint": "0x000050f4",
            "current_name": "get_data_address_000050f4",
            "code": "\nundefined * get_data_address_000050f4(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050f4": "get_data_address_000050f4"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000050f4": {
                    "1": "get_data_reference",
                    "3": "get_data_ptr",
                    "9": "get_data_address",
                    "5": "get_data_pointer"
                },
                "DAT_1fff0deb": {
                    "2": "data_ptr",
                    "1": "data_reference",
                    "3": "data_address",
                    "5": "memory_address"
                }
            }
        },
        "FUN_00005100": {
            "entrypoint": "0x00005100",
            "current_name": "parse_time_zone_info_00005100",
            "code": "\nvoid parse_time_zone_info_00005100(void)\n\n{\n  unsigned_int offset;\n  integer tzinfo;\n  character *env_var;\n  integer result;\n  integer scan_result;\n  undefined data_type;\n  character *scan_string;\n  boolean is_first_scan;\n  unsigned_short *hour;\n  integer *offset_ptr;\n  unsigned_short *minute;\n  integer *end_ptr2;\n  unsigned_short hour;\n  unsigned_short minute;\n  unsigned_short second;\n  unsigned_short month;\n  unsigned_short day;\n  unsigned_short year;\n  integer scan_offset;\n  character *temp_string [2];\n  \n  offset = relocation_table[16].r_offset;\n  tzinfo = get_timezone();\n  env_var = (character *)get_environment_variable(offset,&DAT_00007a5c);\n  if (env_var == (character *)0x0) {\n    relocation_table[28].r_info = (unsigned_int)&DAT_00007a5f;\n    relocation_table[29].r_offset = (unsigned_int)&DAT_00007a5f;\n    DAT_1fff0dd8 = env_var;\n    DAT_1fff0ddc = env_var;\n    release_memory(DAT_1fff0dd4);\n    DAT_1fff0dd4 = 0;\n  }\n  else if ((DAT_1fff0dd4 == 0) || (result = compare_strings(), result != 0)) {\n    release_memory(DAT_1fff0dd4);\n    result = get_string_length(env_var);\n    DAT_1fff0dd4 = allocate_memory(offset,result + 1);\n    if (DAT_1fff0dd4 != 0) {\n      copy_string(DAT_1fff0dd4,env_var);\n    }\n    if (*env_var == ':') {\n      env_var = env_var + 1;\n    }\n    result = scan_formatted_input(env_var,\"%10[^0-9,+-]%n\",&DAT_1fff0dc7,&scan_offset);\n    if (0 < result) {\n      scan_string = env_var + scan_offset;\n      if (env_var[scan_offset] == '-') {\n        scan_string = scan_string + 1;\n        result = -1;\n      }\n      else {\n        if (env_var[scan_offset] == '+') {\n          scan_string = scan_string + 1;\n        }\n        result = 1;\n      }\n      minute = 0;\n      second = 0;\n      hour = &minute;\n      offset_ptr = &scan_offset;\n      minute = &second;\n      end_ptr2 = &scan_offset;\n      scan_result = scan_formatted_input(scan_string,\"%hu%n:%hu%n:%hu%n\",&hour,&scan_offset,&minute,&scan_offset,&second,\n                      &scan_offset);\n      if (0 < scan_result) {\n        *(unsigned_integer *)(tzinfo + 0x28) =\n             ((unsigned_integer)hour * 0xe10 + (unsigned_integer)minute * 0x3c + (unsigned_integer)second) * result;\n        relocation_table[28].r_info = (unsigned_int)&DAT_1fff0dc7;\n        scan_string = scan_string + scan_offset;\n        result = scan_formatted_input(scan_string,\"%10[^0-9,+-]%n\",&DAT_1fff0dbc,&scan_offset,hour,offset_ptr,minute,\n                        end_ptr2);\n        if (result < 1) {\n          relocation_table[29].r_offset = relocation_table[28].r_info;\n          DAT_1fff0ddc = *(character **)(tzinfo + 0x28);\n          DAT_1fff0dd8 = (character *)0x0;\n        }\n        else {\n          relocation_table[29].r_offset = (unsigned_int)&DAT_1fff0dbc;\n          env_var = scan_string + scan_offset;\n          if (scan_string[scan_offset] == '-') {\n            env_var = env_var + 1;\n            result = -1;\n          }\n          else {\n            if (scan_string[scan_offset] == '+') {\n              env_var = env_var + 1;\n            }\n            result = 1;\n          }\n          hour = 0;\n          minute = 0;\n          second = 0;\n          scan_offset = 0;\n          scan_result = scan_formatted_input(env_var,\"%hu%n:%hu%n:%hu%n\",&hour,&scan_offset,&minute,&scan_offset,\n                          &second,&scan_offset);\n          if (scan_result < 1) {\n            result = *(integer *)(tzinfo + 0x28) + -0xe10;\n          }\n          else {\n            result = ((unsigned_integer)hour * 0xe10 + (unsigned_integer)minute * 0x3c + (unsigned_integer)second) * result;\n          }\n          *(integer *)(tzinfo + 0x50) = result;\n          env_var = env_var + scan_offset;\n          is_first_scan = false;\n          result = tzinfo;\n          while( true ) {\n            if (*env_var == ',') {\n              env_var = env_var + 1;\n            }\n            if (*env_var == 'M') {\n              scan_result = scan_formatted_input(env_var,\"M%hu%n.%hu%n.%hu%n\",&month,&scan_offset,&day,&scan_offset,\n                              &year,&scan_offset);\n              if (scan_result != 3) {\n                return;\n              }\n              if (0xb < month - 1) {\n                return;\n              }\n              if (4 < day - 1) {\n                return;\n              }\n              if (6 < year) {\n                return;\n              }\n              *(unsigned_integer *)(result + 0xc) = (unsigned_integer)month;\n              *(unsigned_integer *)(result + 0x10) = (unsigned_integer)day;\n              *(undefined *)(result + 8) = 0x4d;\n              *(unsigned_integer *)(result + 0x14) = (unsigned_integer)year;\n              scan_string = env_var + scan_offset;\n            }\n            else {\n              if (*env_var == 'J') {\n                env_var = env_var + 1;\n                data_type = 0x4a;\n              }\n              else {\n                data_type = 0x44;\n              }\n              year = string_to_unsigned_long(env_var,temp_string,10);\n              scan_string = temp_string[0];\n              if (temp_string[0] == env_var) {\n                if (is_first_scan) {\n                  *(undefined *)(tzinfo + 0x30) = 0x4d;\n                  *(undefined4 *)(tzinfo + 0x34) = 0xb;\n                  *(undefined4 *)(tzinfo + 0x38) = 1;\n                  *(undefined4 *)(tzinfo + 0x3c) = 0;\n                }\n                else {\n                  *(undefined *)(tzinfo + 8) = 0x4d;\n                  *(undefined4 *)(tzinfo + 0xc) = 3;\n                  *(undefined4 *)(tzinfo + 0x10) = 2;\n                  *(undefined4 *)(tzinfo + 0x14) = 0;\n                }\n              }\n              else {\n                *(undefined *)(result + 8) = data_type;\n                *(unsigned_integer *)(result + 0x14) = (unsigned_integer)year;\n              }\n            }\n            hour = 2;\n            minute = 0;\n            second = 0;\n            scan_offset = 0;\n            if (*scan_string == '/') {\n              scan_formatted_input(scan_string,&DAT_00007a85,&hour,&scan_offset,&minute,&scan_offset,&second,\n                      &scan_offset);\n            }\n            *(unsigned_integer *)(result + 0x18) =\n                 (unsigned_integer)hour * 0xe10 + (unsigned_integer)minute * 0x3c + (unsigned_integer)second;\n            result = result + 0x28;\n            env_var = scan_string + scan_offset;\n            if (is_first_scan) break;\n            is_first_scan = true;\n          }\n          calculate_timezone_limits(*(undefined4 *)(tzinfo + 4));\n          DAT_1fff0ddc = *(character **)(tzinfo + 0x28);\n          DAT_1fff0dd8 = (character *)(*(integer *)(tzinfo + 0x50) - (integer)DAT_1fff0ddc);\n          if (DAT_1fff0dd8 != (character *)0x0) {\n            DAT_1fff0dd8 = (character *)0x1;\n          }\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005100": "parse_time_zone_info_00005100",
                "dVar1": "offset",
                "iVar2": "tzinfo",
                "pcVar3": "env_var",
                "iVar4": "result",
                "iVar5": "scan_result",
                "uVar6": "data_type",
                "pcVar7": "scan_string",
                "bVar8": "is_first_scan",
                "puVar9": "hour",
                "piVar10": "offset_ptr",
                "puVar11": "minute",
                "piVar12": "end_ptr2",
                "local_3c": "hour",
                "local_3a": "minute",
                "local_38": "second",
                "local_36": "month",
                "local_34": "day",
                "local_32": "year",
                "local_30": "scan_offset",
                "local_2c": "temp_string",
                "siscanf": "scan_formatted_input",
                "_getenv_r": "get_environment_variable",
                "__gettzinfo": "get_timezone",
                "_malloc_r": "allocate_memory",
                "free": "release_memory",
                "strcpy": "copy_string",
                "strcmp": "compare_strings",
                "strlen": "get_string_length",
                "strtoul": "string_to_unsigned_long",
                "Elf32_Rel_ARRAY_1fff0200": "relocation_table",
                "__tzcalc_limits": "calculate_timezone_limits",
                "dword": "unsigned_int",
                "int": "integer",
                "char": "character",
                "ushort": "unsigned_short",
                "bool": "boolean",
                "uint": "unsigned_integer"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_000056a0",
                "FUN_00005ecc",
                "FUN_00005ebc",
                "FUN_00005e68",
                "FUN_000056b0",
                "FUN_00005780",
                "FUN_00004bd0",
                "FUN_00005fd8",
                "FUN_00004e52",
                "FUN_00004f98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00005100": {
                    "6": "parse_time_zone_info",
                    "1": "parse_datetime_string",
                    "3": "parse_timezone",
                    "2": "parse_timezone_info"
                },
                "dVar1": {
                    "3": "rel_offset",
                    "1": "data_offset",
                    "16": "offset"
                },
                "iVar2": {
                    "3": "timezone_info",
                    "1": "time_info",
                    "9": "tzinfo",
                    "8": "tz_info"
                },
                "pcVar3": {
                    "1": "env_variable",
                    "13": "env_var",
                    "8": "env_value"
                },
                "iVar4": {
                    "1": "comparison",
                    "3": "cmp_result",
                    "5": "comparison_result",
                    "6": "result"
                },
                "iVar5": {
                    "2": "scanf_result",
                    "1": "scanning_result",
                    "17": "scan_result"
                },
                "uVar6": {
                    "2": "char_type",
                    "3": "type_flag",
                    "1": "datatype"
                },
                "pcVar7": {
                    "1": "temp_str",
                    "2": "scan_ptr",
                    "5": "scan_string"
                },
                "bVar8": {
                    "1": "is_first_token",
                    "2": "is_first"
                },
                "puVar9": {
                    "1": "parsed_hour",
                    "6": "hour",
                    "5": "hours",
                    "2": "hours_ptr"
                },
                "piVar10": {
                    "1": "scan_count_ptr",
                    "2": "offset_ptr"
                },
                "puVar11": {
                    "1": "second",
                    "2": "minutes_ptr",
                    "3": "min_ptr",
                    "4": "minutes",
                    "6": "minute"
                },
                "piVar12": {
                    "1": "token_len_ptr2"
                },
                "local_3c": {
                    "1": "hour_a",
                    "12": "hour",
                    "2": "hours1"
                },
                "local_3a": {
                    "1": "minute_temp",
                    "3": "minutes",
                    "2": "minutes1",
                    "5": "min",
                    "7": "minute"
                },
                "local_38": {
                    "1": "parsed_second",
                    "5": "sec",
                    "2": "seconds1",
                    "7": "second"
                },
                "local_36": {
                    "1": "millisecond_temp",
                    "2": "hours2",
                    "3": "hour2",
                    "4": "month"
                },
                "local_34": {
                    "1": "local_min",
                    "2": "min2",
                    "3": "month",
                    "4": "day"
                },
                "local_32": {
                    "1": "nanosecond_temp",
                    "2": "day",
                    "5": "year"
                },
                "local_30": {
                    "2": "scan_pos",
                    "1": "num_chars_read3",
                    "7": "scan_offset"
                },
                "local_2c": {
                    "2": "local_buffer",
                    "1": "scan_result_array",
                    "3": "temp_string"
                },
                "DAT_00007a5c": {
                    "1": "default_env",
                    "3": "env_var_name"
                },
                "DAT_00007a5f": {
                    "1": "default_var_value",
                    "2": "default_env_value"
                },
                "DAT_1fff0dd8": {
                    "2": "parsed_offset",
                    "1": "offset_env"
                },
                "DAT_1fff0ddc": {
                    "1": "dst_end_ptr"
                },
                "DAT_1fff0dd4": {
                    "1": "buffer"
                },
                "DAT_1fff0db4": {
                    "1": "tzinfo"
                },
                "DAT_1fff0db8": {
                    "1": "tzlimits"
                },
                "DAT_1fff0dbc": {
                    "1": "timezone_str2"
                },
                "DAT_1fff0dc7": {
                    "1": "time_zone"
                },
                "siscanf": {
                    "1": "sscanf",
                    "2": "scan_formatted_input"
                },
                "_getenv_r": {
                    "5": "get_environment_variable",
                    "1": "get_env_r"
                },
                "__gettzinfo": {
                    "1": "get_timezone_information",
                    "2": "get_timezone"
                },
                "_malloc_r": {
                    "1": "malloc_r",
                    "5": "allocate_memory"
                },
                "free": {
                    "1": "free_memory",
                    "4": "release_memory"
                },
                "strcpy": {
                    "5": "copy_string"
                },
                "strcmp": {
                    "1": "strcmp",
                    "2": "compare_string",
                    "3": "compare_strings"
                },
                "strlen": {
                    "3": "get_string_length",
                    "1": "strlen"
                },
                "strtoul": {
                    "2": "string_to_unsigned_long",
                    "1": "strtoul"
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "1": "elf_relocations",
                    "2": "relocation_table"
                },
                "FUN_000056a0": {
                    "1": "calculate_limits"
                },
                "FUN_00005780": {
                    "1": "convert_to_seconds"
                },
                "FUN_00004bd0": {
                    "1": "scan_for_numbers"
                },
                "FUN_00004e52": {
                    "1": "compare_bytes"
                },
                "FUN_00004f98": {
                    "1": "convert_to_unsigned"
                },
                "__tzcalc_limits": {
                    "4": "calculate_timezone_limits"
                },
                "param_1": {
                    "1": "env_var_name"
                },
                "param_2": {
                    "1": "tzinfo_ptr"
                },
                "local_2c [2]": {
                    "1": "scan_buf"
                },
                "ptr_fun_00002008": {
                    "1": "time_var1"
                },
                "ptr_fun_0000202c": {
                    "1": "time_var2"
                },
                "ptr_00007a5c": {
                    "1": "environment_var"
                },
                "ptr_00007a5f": {
                    "1": "default_env_var1"
                },
                "ptr_00007a63": {
                    "1": "default_env_var2"
                },
                "ptr_00007a67": {
                    "1": "default_env_var3"
                },
                "ptr_00007a85": {
                    "1": "formatted_string"
                },
                "ptr_1fff0dd4": {
                    "1": "memory_pointer1"
                },
                "ptr_1fff0dd8": {
                    "1": "memory_pointer2"
                },
                "ptr_1fff0ddc": {
                    "1": "memory_pointer3"
                },
                "ptr_1fff0dbc": {
                    "1": "memory_pointer4"
                },
                "ptr_1fff0dc7": {
                    "1": "memory_pointer5"
                },
                "dword": {
                    "1": "unsigned_int"
                },
                "int": {
                    "1": "integer"
                },
                "char": {
                    "1": "character"
                },
                "ushort": {
                    "1": "unsigned_short"
                },
                "bool": {
                    "1": "boolean"
                },
                "undefined": {
                    "1": "undefined"
                },
                "uint": {
                    "1": "unsigned_integer"
                },
                "byte": {
                    "1": "byte"
                },
                "F_00005100": {
                    "1": "initialize_time_zone_info"
                }
            }
        },
        "FUN_00005404": {
            "entrypoint": "0x00005404",
            "current_name": "write_to_file_00005404",
            "code": "\nuint write_to_file_00005404(int stream,uint character,int *buffer,undefined4 buffer_size)\n\n{\n  int difference;\n  uint ushort_value;\n  undefined *byte_pointer;\n  \n  if ((stream != 0) && (*(int *)(stream + 0x18) == 0)) {\n    initialize();\n  }\n  if (buffer == &DAT_000079b8) {\n    buffer = *(int **)(stream + 4);\n  }\n  else if (buffer == (int *)&DAT_000079d8) {\n    buffer = *(int **)(stream + 8);\n  }\n  else if (buffer == (int *)&DAT_00007998) {\n    buffer = *(int **)(stream + 0xc);\n  }\n  buffer[2] = buffer[6];\n  ushort_value = (uint)*(ushort *)(buffer + 3);\n  difference = ushort_value << 0x1c;\n  if (((difference < 0) && (ushort_value = buffer[4], ushort_value != 0)) ||\n     (difference = setup_stream(stream,buffer,difference,ushort_value,buffer_size), difference == 0)) {\n    difference = *buffer - buffer[4];\n    character = character & 0xff;\n    if ((difference < buffer[5]) || (difference = flush_stream(stream,buffer), difference == 0)) {\n      buffer[2] = buffer[2] + -1;\n      byte_pointer = (undefined *)*buffer;\n      *buffer = (int)(byte_pointer + 1);\n      *byte_pointer = (char)character;\n      if (buffer[5] != difference + 1) {\n        if (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x1f)) {\n          return character;\n        }\n        if (character != 10) {\n          return character;\n        }\n      }\n      difference = flush_stream(stream,buffer);\n      if (difference == 0) {\n        return character;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00005404": "write_to_file_00005404",
                "param_1": "stream",
                "param_2": "character",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "iVar1": "difference",
                "uVar2": "ushort_value",
                "puVar3": "byte_pointer",
                "__sinit": "initialize",
                "__swsetup_r": "setup_stream",
                "_fflush_r": "flush_stream"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_00004cb4",
                "FUN_000057a8"
            ],
            "called": [
                "FUN_00004158",
                "FUN_000054a8",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00005404": {
                    "6": "write_to_stream",
                    "3": "process_input",
                    "1": "process_stream",
                    "9": "write_to_file",
                    "5": "write_to_buffer"
                },
                "param_1": {
                    "2": "buffer",
                    "6": "stream",
                    "3": "file_handle",
                    "1": "input_param",
                    "4": "file_descriptor"
                },
                "param_2": {
                    "2": "flag",
                    "7": "data",
                    "1": "arg2",
                    "11": "character",
                    "3": "value"
                },
                "param_3": {
                    "1": "output_buffer",
                    "2": "file_pointer",
                    "4": "stream",
                    "3": "file_buffer",
                    "14": "buffer"
                },
                "param_4": {
                    "1": "stream_ptr",
                    "2": "flags",
                    "7": "buffer_size",
                    "3": "mode",
                    "5": "param"
                },
                "iVar1": {
                    "3": "write_result",
                    "1": "conversion_result",
                    "5": "offset",
                    "2": "index",
                    "8": "difference"
                },
                "uVar2": {
                    "1": "unicode_value",
                    "10": "ushort_value",
                    "5": "value",
                    "2": "length"
                },
                "puVar3": {
                    "2": "current_byte",
                    "5": "byte_pointer",
                    "1": "character_ptr",
                    "3": "pointer",
                    "4": "ptr"
                },
                "__sinit": {
                    "4": "initialize",
                    "3": "initialize_stream",
                    "1": "initialize_values"
                },
                "&DAT_000079b8": {
                    "1": "dat_000079b8"
                },
                "&DAT_000079d8": {
                    "1": "data_2"
                },
                "&DAT_00007998": {
                    "1": "data3"
                },
                "__swsetup_r": {
                    "1": "setup_r",
                    "3": "setup_stream"
                },
                "_fflush_r": {
                    "1": "flush_writer",
                    "3": "flush_stream",
                    "2": "flush"
                },
                "0xffffffff": {
                    "1": "error"
                },
                "FUN_00004158": {
                    "1": "sub_function_a"
                },
                "FUN_000054a8": {
                    "1": "sub_function_b"
                },
                "FUN_000042a4": {
                    "1": "sub_function_c"
                }
            }
        },
        "FUN_000054a8": {
            "entrypoint": "0x000054a8",
            "current_name": "process_data_000054a8",
            "code": "\nuint process_data_000054a8(undefined4 *output_param,undefined4 *input_param)\n\n{\n  ushort temp_var1;\n  dword offset;\n  ushort temp_var3;\n  uint temp_var4;\n  uint temp_var5;\n  \n  offset = relocation_array[16].r_offset;\n  if ((relocation_array[16].r_offset != 0) &&\n     (*(int *)(relocation_array[16].r_offset + 0x18) == 0)) {\n    initialize(relocation_array[16].r_offset);\n  }\n  if (input_param == &DAT_000079b8) {\n    input_param = *(undefined4 **)(offset + 4);\n  }\n  else if (input_param == (undefined4 *)&DAT_000079d8) {\n    input_param = *(undefined4 **)(offset + 8);\n  }\n  else if (input_param == (undefined4 *)&DAT_00007998) {\n    input_param = *(undefined4 **)(offset + 0xc);\n  }\n  temp_var4 = (uint)*(ushort *)(input_param + 3);\n  temp_var3 = *(ushort *)(input_param + 3);\n  if (-1 < (int)(temp_var4 << 0x1c)) {\n    if (-1 < (int)(temp_var4 << 0x1b)) {\n      *output_param = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(temp_var4 << 0x1d) < 0) {\n      if ((undefined4 *)param_2_related != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2_related != input_param + 0x11) {\n          free_memory(output_param);\n        }\n        param_2_related = 0;\n      }\n      *(ushort *)(input_param + 3) = *(ushort *)(input_param + 3) & 0xffdb;\n      input_param[1] = 0;\n      *input_param = param_2_offset4;\n    }\n    *(ushort *)(input_param + 3) = *(ushort *)(input_param + 3) | 8;\n  }\n  if ((param_2_offset4 == 0) && ((*(ushort *)(input_param + 3) & 0x280) != 0x200)) {\n    create_buffer(output_param,input_param);\n  }\n  temp_var1 = *(ushort *)(input_param + 3);\n  temp_var4 = (uint)temp_var1;\n  temp_var3 = *(ushort *)(input_param + 3);\n  temp_var5 = temp_var4 & 1;\n  if ((temp_var1 & 1) == 0) {\n    if (-1 < (int)(temp_var4 << 0x1e)) {\n      temp_var5 = param_2_offset5;\n    }\n    param_2_offset2 = temp_var5;\n  }\n  else {\n    param_2_offset2 = 0;\n    param_2_offset6 = -param_2_offset5;\n  }\n  if (param_2_offset4 != 0) {\n    return 0;\n  }\n  if ((temp_var1 & 0x80) == 0) {\n    return temp_var4 & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(input_param + 3) = temp_var3 | 0x40;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "param_1": "output_param",
                "param_2": "input_param",
                "uVar1": "temp_var1",
                "dVar2": "offset",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4",
                "uVar5": "temp_var5",
                "FUN_000054a8": "process_data_000054a8",
                "__sinit": "initialize",
                "_free_r": "free_memory",
                "__smakebuf_r": "create_buffer",
                "param_2[0xd]": "param_2_related",
                "param_2[4]": "param_2_offset4",
                "param_2[5]": "param_2_offset5",
                "param_2[2]": "param_2_offset2",
                "param_2[6]": "param_2_offset6",
                "Elf32_Rel_ARRAY_1fff0200": "relocation_array"
            },
            "calling": [
                "FUN_00005404",
                "FUN_000057f8",
                "FUN_00004db8"
            ],
            "called": [
                "FUN_00005700",
                "FUN_00004b34",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "6": "output_ptr",
                    "1": "param1",
                    "2": "output1",
                    "7": "output_param",
                    "3": "output",
                    "5": "output_buffer"
                },
                "param_2": {
                    "4": "input_buffer",
                    "3": "input",
                    "1": "input1",
                    "6": "input_ptr",
                    "2": "input_data",
                    "7": "input_param"
                },
                "uVar1": {
                    "1": "first_flag",
                    "2": "flags",
                    "4": "temp1",
                    "7": "temp_var1"
                },
                "dVar2": {
                    "1": "temp2",
                    "2": "relocation_offset",
                    "5": "temp_var2",
                    "8": "offset",
                    "3": "r_offset",
                    "4": "var2"
                },
                "uVar3": {
                    "4": "var3",
                    "5": "temp_var3",
                    "2": "flag2",
                    "1": "value_3",
                    "3": "temp2"
                },
                "uVar4": {
                    "1": "result",
                    "2": "temp3",
                    "4": "var4",
                    "5": "temp_var4"
                },
                "uVar5": {
                    "1": "uint_var_2",
                    "5": "temp_var5",
                    "2": "temp4",
                    "4": "var5"
                },
                "FUN_000054a8": {
                    "10": "process_data",
                    "1": "process_function",
                    "3": "process_parameters",
                    "2": "decode_and_process_data"
                },
                "__sinit": {
                    "2": "initialize"
                },
                "_free_r": {
                    "1": "free_resource"
                },
                "__smakebuf_r": {
                    "1": "make_buffer"
                },
                "param_2[0xd]": {
                    "1": "param_2_related"
                },
                "param_2 + 0x11": {
                    "1": "param_2_offset"
                },
                "param_2[4]": {
                    "1": "param_2_offset4"
                },
                "param_2[5]": {
                    "1": "param_2_offset5"
                },
                "param_2[2]": {
                    "1": "param_2_offset2"
                },
                "param_2[6]": {
                    "1": "param_2_offset6"
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "1": "relocation_array"
                },
                "&DAT_000079b8": {
                    "1": "pointer_1"
                },
                "&DAT_000079d8": {
                    "1": "pointer_2"
                },
                "&DAT_00007998": {
                    "1": "pointer_3"
                },
                "FUN_00005700": {
                    "1": "handle_data"
                },
                "FUN_00004b34": {
                    "1": "process_data"
                },
                "FUN_000042a4": {
                    "1": "cleanup"
                },
                "F_000054a8": {
                    "1": "process_function"
                }
            }
        },
        "FUN_00005584": {
            "entrypoint": "0x00005584",
            "current_name": "divide_and_remainder_00005584",
            "code": "\nvoid divide_and_remainder_00005584(uint *quotient_and_remainder,uint dividend,uint divisor)\n\n{\n  uint remainder;\n  uint quotient;\n  \n  quotient = dividend / divisor;\n  remainder = dividend - divisor * quotient;\n  if ((int)dividend < 0) {\n    if (0 < (int)remainder) {\n      quotient = quotient - 1;\n      remainder = remainder + divisor;\n    }\n  }\n  else if ((int)remainder < 0) {\n    quotient = quotient + 1;\n    remainder = remainder - divisor;\n  }\n  *quotient_and_remainder = quotient;\n  quotient_and_remainder[1] = remainder;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005584": "divide_and_remainder_00005584",
                "param_1": "quotient_and_remainder",
                "param_2": "dividend",
                "param_3": "divisor",
                "uVar1": "remainder",
                "uVar2": "quotient"
            },
            "calling": [
                "FUN_00004634"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00005584": {
                    "1": "divide_and_mod",
                    "6": "divide_and_store_remainder",
                    "21": "divide_and_remainder",
                    "2": "calculate_division_remainder"
                },
                "param_1": {
                    "1": "quotient_pointer",
                    "2": "quotient_ptr",
                    "22": "quotient_and_remainder",
                    "3": "quotient"
                },
                "param_2": {
                    "31": "dividend"
                },
                "param_3": {
                    "31": "divisor"
                },
                "uVar1": {
                    "31": "remainder"
                },
                "uVar2": {
                    "1": "quotient_after_division",
                    "28": "quotient",
                    "2": "quotient_result"
                }
            }
        },
        "FUN_0000562c": {
            "entrypoint": "0x0000562c",
            "current_name": "find_variable_offset_0000562c",
            "code": "\nint find_variable_offset_0000562c(undefined4 env_lock,char *string,int *result_index)\n\n{\n  char current_char;\n  int *rel_offset_ptr;\n  int comparison_result;\n  char *current_char_ptr;\n  int *current_rel_offset_ptr;\n  int string_offset;\n  \n  acquire_environment_lock;\n  current_char_ptr assignment_operator string;\n  if (relocation_array[41].r_offset !assignment_operator 0) {\n    do {\n      current_char assignment_operator *current_char_ptr;\n      if (current_char assignment_operatorassignment_operator '\\0') {\n        string_offset assignment_operator (int)current_char_ptr - (int)string;\n        rel_offset_ptr assignment_operator (int *)relocation_array[41].r_offset;\n        while( true ) {\n          current_rel_offset_ptr assignment_operator rel_offset_ptr;\n          if (*current_rel_offset_ptr assignment_operatorassignment_operator 0) break;\n          comparison_result assignment_operator compare_strings(*current_rel_offset_ptr,string,string_offset);\n          rel_offset_ptr assignment_operator current_rel_offset_ptr + 1;\n          if ((comparison_result assignment_operatorassignment_operator 0) && (comparison_result assignment_operator *current_rel_offset_ptr, *(char *)(comparison_result + string_offset) assignment_operatorassignment_operator 'assignment_operator')) {\n            *result_index assignment_operator (int)((int)current_rel_offset_ptr - relocation_array[41].r_offset) >> 2;\n            unlock_environment(env_lock);\n            return comparison_result + string_offset + 1;\n          }\n        }\n        break;\n      }\n      current_char_ptr assignment_operator current_char_ptr + 1;\n    } while (current_char !assignment_operator 'assignment_operator');\n  }\n  unlock_environment(env_lock);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000562c": "find_variable_offset_0000562c",
                "param_1": "env_lock",
                "param_2": "string",
                "param_3": "result_index",
                "cVar1": "current_char",
                "piVar2": "rel_offset_ptr",
                "iVar3": "comparison_result",
                "pcVar4": "current_char_ptr",
                "piVar5": "current_rel_offset_ptr",
                "iVar6": "string_offset",
                "__env_lock": "lock_environment",
                "Elf32_Rel_ARRAY_1fff0200": "relocation_array",
                "__env_unlock": "unlock_environment",
                "__env_lock()": "acquire_environment_lock",
                "strncmp": "compare_strings",
                "_env_lock()": "acquire_environment_lock()",
                "=": "assignment_operator"
            },
            "calling": [
                "FUN_000056a0"
            ],
            "called": [
                "FUN_00005ff8",
                "FUN_00005fec",
                "FUN_00004e66"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000562c": {
                    "1": "find_string_offset",
                    "5": "find_variable_offset",
                    "4": "find_environment_variable",
                    "3": "find_variable_value"
                },
                "param_1": {
                    "1": "param",
                    "7": "lock",
                    "4": "param_1",
                    "2": "param_lock"
                },
                "param_2": {
                    "2": "env_string",
                    "1": "env_variable",
                    "9": "input_string",
                    "10": "string"
                },
                "param_3": {
                    "2": "output_offset",
                    "1": "variable_index",
                    "6": "result",
                    "3": "output_index",
                    "5": "index"
                },
                "cVar1": {
                    "1": "current_character",
                    "3": "character",
                    "27": "current_char"
                },
                "piVar2": {
                    "1": "rel_array_offset",
                    "3": "rel_array",
                    "2": "current_variable",
                    "4": "rel_offset_ptr"
                },
                "iVar3": {
                    "1": "string_compare_result",
                    "10": "strncmp_result",
                    "4": "string_comparison_result",
                    "13": "comparison_result"
                },
                "pcVar4": {
                    "1": "current_input_char_ptr",
                    "3": "current_ptr",
                    "2": "current_string",
                    "6": "current_position",
                    "10": "current_char_ptr"
                },
                "piVar5": {
                    "1": "array_element_ptr",
                    "2": "current_offset",
                    "5": "current_rel_offset_ptr",
                    "3": "current_offset_ptr"
                },
                "iVar6": {
                    "1": "input_string_index",
                    "5": "string_length",
                    "2": "input_length",
                    "6": "string_offset"
                },
                "__env_lock": {
                    "2": "acquire_environment_lock",
                    "1": "lock_environments"
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "1": "dynamic_array",
                    "2": "rel_array"
                },
                "__env_unlock": {
                    "1": "unlock_environments",
                    "2": "release_environment_lock"
                },
                "__env_lock()": {
                    "1": "acquire_environment_lock"
                },
                "__env_unlock()": {
                    "1": "release_environment_lock"
                },
                "strncmp": {
                    "4": "compare_strings"
                },
                "FUN_00005ff8": {
                    "1": "unlock_environment"
                },
                "FUN_00005fec": {
                    "1": "lock_environment"
                },
                "FUN_00004e66": {
                    "1": "compare_strings"
                },
                "_env_lock()": {
                    "1": "acquire_environment_lock()"
                },
                "_env_unlock()": {
                    "1": "release_environment_lock()"
                },
                "=": {
                    "1": "assignment_operator"
                }
            }
        },
        "FUN_000056a0": {
            "entrypoint": "0x000056a0",
            "current_name": "find_environment_variables_000056a0",
            "code": "\nvoid find_environment_variables_000056a0(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  undefined4 updated_arg2;\n  undefined4 updated_arg3;\n  \n  updated_arg2 = arg2;\n  updated_arg3 = arg3;\n  _findenv_r(arg1,arg2,&updated_arg2,arg4,arg1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000056a0": "find_environment_variables_000056a0",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "uStack_c": "updated_arg2",
                "uStack_8": "updated_arg3"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_0000562c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000056a0": {
                    "1": "search_environmental_variables",
                    "3": "find_environment",
                    "4": "find_and_update_environment",
                    "7": "find_environment_variables",
                    "2": "find_and_update_environment_variables"
                },
                "param_1": {
                    "1": "env_var_name",
                    "21": "arg1",
                    "2": "environment"
                },
                "param_2": {
                    "1": "env_buffer",
                    "2": "env_var",
                    "3": "param_2",
                    "17": "arg2"
                },
                "param_3": {
                    "1": "env_size",
                    "3": "param_3",
                    "17": "arg3"
                },
                "param_4": {
                    "1": "arg2",
                    "3": "param_4",
                    "19": "arg4"
                },
                "uStack_c": {
                    "1": "stack_param_1",
                    "3": "updated_arg2",
                    "2": "env_var_ptr"
                },
                "uStack_8": {
                    "1": "stack_var2",
                    "3": "updated_arg3",
                    "2": "param3_copy"
                }
            }
        },
        "FUN_000056b0": {
            "entrypoint": "0x000056b0",
            "current_name": "get_memory_address_000056b0",
            "code": "\nuint32_t get_memory_address_000056b0(void)\n\n{\n  result 0x1fff02f0;\n}\n\n",
            "renaming": {
                "FUN_000056b0": "get_memory_address_000056b0",
                "undefined4": "uint32_t",
                "return": "result"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000047e4",
                "FUN_00004f98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000056b0": {
                    "6": "get_default_value",
                    "2": "get_memory_offset",
                    "4": "get_magic_number",
                    "1": "get_constant_value",
                    "13": "get_memory_address"
                },
                "undefined4": {
                    "19": "uint32_t"
                },
                "0x1fff02f0": {
                    "2": "memory_address",
                    "1": "default_value"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "DAT_": {
                    "1": "dat_"
                },
                "retVal": {
                    "1": "memory_address"
                },
                "return": {
                    "1": "result"
                }
            }
        },
        "FUN_000056b8": {
            "entrypoint": "0x000056b8",
            "current_name": "check_file_permissions_000056b8",
            "code": "\nundefined4 check_file_permissions_000056b8(undefined4 file_descriptor,int file_info,undefined4 *result,uint *is_executable)\n\n{\n  int status;\n  undefined4 permission_value;\n  undefined stat_buffer [4];\n  uint file_mode;\n  \n  if ((*(short *)(file_info + 0xe) < 0) ||\n     (status = _fstat_r(file_descriptor,(int)*(short *)(file_info + 0xe),stat_buffer), status < 0)) {\n    *is_executable = 0;\n    if ((int)((uint)*(ushort *)(file_info + 0xc) << 0x18) < 0) {\n      permission_value = 0x40;\n      goto LAB_000056f8;\n    }\n  }\n  else {\n    *is_executable = (uint)((file_mode & 0xf000) == 0x2000);\n  }\n  permission_value = 0x400;\nLAB_000056f8:\n  *result = permission_value;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000056b8": "check_file_permissions_000056b8",
                "param_1": "file_descriptor",
                "param_2": "file_info",
                "param_3": "result",
                "param_4": "is_executable",
                "iVar1": "status",
                "auStack_68": "stat_buffer",
                "local_64": "file_mode",
                "uVar2": "permission_value"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [
                "FUN_00000514"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000056b8": {
                    "1": "check_file_properties",
                    "6": "check_file_permission",
                    "2": "get_file_attributes",
                    "17": "check_file_permissions"
                },
                "param_1": {
                    "1": "param1",
                    "28": "file_descriptor"
                },
                "param_2": {
                    "2": "file_stat",
                    "1": "buffer",
                    "18": "file_info"
                },
                "param_3": {
                    "1": "file_attributes",
                    "2": "output",
                    "3": "permission_result",
                    "6": "result"
                },
                "param_4": {
                    "1": "file_permissions",
                    "2": "output_result",
                    "16": "is_executable",
                    "3": "result"
                },
                "iVar1": {
                    "1": "fstat_result",
                    "6": "file_status",
                    "10": "status",
                    "8": "result",
                    "3": "stat_result"
                },
                "auStack_68": {
                    "1": "temporary_buffer",
                    "2": "fstat_buffer",
                    "6": "file_stat_buffer",
                    "4": "buffer",
                    "9": "stat_buffer"
                },
                "local_64": {
                    "2": "file_attributes",
                    "1": "file_perm_bits",
                    "20": "file_mode",
                    "3": "file_permissions"
                },
                "uVar2": {
                    "4": "permission_flag",
                    "1": "access_mode",
                    "6": "permission_value",
                    "5": "permission",
                    "2": "permissions",
                    "3": "result"
                }
            }
        },
        "FUN_00005700": {
            "entrypoint": "0x00005700",
            "current_name": "process_data_00005700",
            "code": "\nvoid process_data_00005700(int context,int *data)\n\n{\n  ushort result;\n  int allocated_memory;\n  int data_size;\n  int *local_data;\n  \n  if (-1 < (int)((uint)*(ushort *)(data + 3) << 0x1e)) {\n    data_size = context;\n    local_data = data;\n    result = __swhatbuf_r(context,data,&data_size,&local_data);\n    allocated_memory = _malloc_r(context,data_size);\n    if (allocated_memory != 0) {\n      *(undefined **)(context + 0x28) = &DAT_0000423d;\n      *data = allocated_memory;\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x80;\n      data[5] = data_size;\n      data[4] = allocated_memory;\n      if ((local_data != (int *)0x0) &&\n         (allocated_memory = _isatty_r(context,(int)*(short *)((int)data + 0xe)), allocated_memory != 0)) {\n        *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(data + 3) = result | *(ushort *)(data + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(data + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfffc | 2;\n  }\n  *data = (int)data + 0x47;\n  data[4] = (int)data + 0x47;\n  data[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005700": "process_data_00005700",
                "param_1": "context",
                "param_2": "data",
                "local_18": "data_size",
                "local_14": "local_data",
                "uVar1": "result",
                "iVar2": "allocated_memory"
            },
            "calling": [
                "FUN_00006768",
                "FUN_000054a8"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_00000534",
                "FUN_000056b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00005700": {
                    "1": "decode_and_process_data",
                    "2": "initialize_connection",
                    "8": "process_data",
                    "3": "initialize_buffer",
                    "4": "parse_input",
                    "5": "parse_data"
                },
                "param_1": {
                    "2": "data_size",
                    "1": "memory_pool",
                    "4": "buffer_size",
                    "11": "context"
                },
                "param_2": {
                    "11": "data",
                    "1": "input_data",
                    "3": "input_array",
                    "2": "buffer"
                },
                "local_18": {
                    "1": "length",
                    "6": "data_size",
                    "4": "local_size",
                    "2": "local_buffer_size"
                },
                "local_14": {
                    "2": "temp_ptr",
                    "1": "input_data_copy",
                    "5": "local_data",
                    "3": "buffer"
                },
                "uVar1": {
                    "2": "flags",
                    "1": "data_flag",
                    "9": "status",
                    "15": "result"
                },
                "iVar2": {
                    "1": "memory_ptr",
                    "2": "malloc_result",
                    "15": "allocated_memory",
                    "6": "allocation_result"
                }
            }
        },
        "FUN_00005780": {
            "entrypoint": "0x00005780",
            "current_name": "free_elf32_rel_00005780",
            "code": "\nvoid free_elf32_rel_00005780(undefined4 offset)\n\n{\n  _free_r(rel_array[16].offset,offset);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005780": "free_elf32_rel_00005780",
                "param_1": "offset",
                "Elf32_Rel_ARRAY_1fff0200": "rel_array",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00005780": {
                    "4": "free_elf32_rel_offset",
                    "1": "free_elf_relocation_entries",
                    "2": "free_elf32_rel_array",
                    "8": "free_elf32_rel"
                },
                "param_1": {
                    "1": "buffer",
                    "2": "r_offset",
                    "3": "pointer",
                    "6": "offset",
                    "4": "param"
                },
                "FUN_00004b34": {
                    "1": "perform_operation",
                    "6": "process_data",
                    "2": "process_parameters"
                },
                "param_2": {
                    "1": "input_array",
                    "2": "param_array",
                    "3": "count",
                    "4": "size"
                },
                "param_3": {
                    "1": "arg3",
                    "6": "param3",
                    "2": "param_3"
                },
                "param_4": {
                    "1": "value_2",
                    "6": "param4",
                    "2": "value2"
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "2": "elf32_rel_array",
                    "1": "elf_relocations",
                    "7": "rel_array",
                    "3": "elf_rel_array"
                },
                "PTR_FUN_00004b34": {
                    "1": "fun_ptr"
                },
                "PTR_DAT_1fff0200": {
                    "1": "relocation_pointer"
                },
                "16": {
                    "1": "relocation_index"
                },
                "PTR": {
                    "1": "ptr"
                },
                "DAT": {
                    "1": "dat"
                },
                "r_offset": {
                    "2": "offset"
                },
                "F_UNDECOMP_00005780": {
                    "1": "free_r_at_offset"
                }
            }
        },
        "FUN_00005790": {
            "entrypoint": "0x00005790",
            "current_name": "acquire_recursive_lock_00005790",
            "code": "\nvoid acquire_recursive_lock_00005790(void)\n\n{\n  __retarget_lock_acquire_recursive(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005790": "acquire_recursive_lock_00005790"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00005790": {
                    "2": "lock_acquire_recursive",
                    "26": "acquire_recursive_lock",
                    "1": "acquire_lock"
                },
                "FUNC_000045e8": {
                    "2": "execute_subfunction",
                    "1": "initialize_function",
                    "7": "do_something",
                    "4": "perform_additional_task",
                    "3": "function_000045e8"
                }
            }
        },
        "FUN_0000579c": {
            "entrypoint": "0x0000579c",
            "current_name": "release_recursive_lock_0000579c",
            "code": "\nvoid release_recursive_lock_0000579c(void)\n\n{\n  release_recursive_lock_0000579c(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000579c": "release_recursive_lock_0000579c",
                "__retarget_lock_release_recursive": "release_recursive_lock"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000579c": {
                    "7": "release_lock",
                    "20": "release_recursive_lock",
                    "2": "release_lock_recursive"
                },
                "FUNC_000045ec": {
                    "4": "release_lock",
                    "1": "subfunction",
                    "3": "do_something",
                    "2": "perform_cleanup"
                },
                "__retarget_lock_release_recursive": {
                    "2": "release_recursive_lock"
                },
                "DAT_1fff0de8": {
                    "1": "recursive_lock"
                }
            }
        },
        "FUN_000057a8": {
            "entrypoint": "0x000057a8",
            "current_name": "write_character_000057a8",
            "code": "\nint write_character_000057a8(undefined4 file_descriptor,int character,undefined4 *buffer)\n\n{\n  int index;\n  undefined *current_position;\n  \n  index = buffer[2] + -1;\n  buffer[2] = index;\n  if ((index < 0) && ((index < (int)buffer[6] || (character == 10)))) {\n    index = write_to_stream();\n    return index;\n  }\n  current_position = (undefined *)*buffer;\n  *buffer = current_position + 1;\n  *current_position = (char)character;\n  return character;\n}\n\n",
            "renaming": {
                "FUN_000057a8": "write_character_000057a8",
                "param_1": "file_descriptor",
                "param_2": "character",
                "param_3": "buffer",
                "iVar1": "index",
                "puVar2": "current_position",
                "__swbuf_r": "write_to_stream"
            },
            "calling": [
                "FUN_000057d2"
            ],
            "called": [
                "FUN_00005404"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000057a8": {
                    "1": "write_character_to_output",
                    "3": "write_char_to_file",
                    "9": "write_character",
                    "7": "write_to_buffer"
                },
                "param_1": {
                    "8": "stream",
                    "1": "buffer",
                    "10": "file_descriptor",
                    "3": "status",
                    "2": "param1"
                },
                "param_2": {
                    "1": "input_char",
                    "30": "character"
                },
                "param_3": {
                    "1": "file",
                    "3": "file_buffer",
                    "6": "stream_buffer",
                    "19": "buffer"
                },
                "iVar1": {
                    "2": "remaining_space",
                    "1": "last_index",
                    "3": "current_index",
                    "5": "index"
                },
                "puVar2": {
                    "1": "buffer",
                    "2": "current_address",
                    "4": "buffer_pointer",
                    "5": "current_position",
                    "3": "current_pointer"
                },
                "__swbuf_r": {
                    "1": "write_character"
                },
                "param_4": {
                    "1": "unknown"
                }
            }
        },
        "FUN_000057d2": {
            "entrypoint": "0x000057d2",
            "current_name": "write_to_stream_000057d2",
            "code": "\nint write_to_stream_000057d2(undefined4 stream,undefined4 buffer_size,undefined *data,int length)\n\n{\n  int result;\n  undefined *end_of_data;\n  int remaining_size;\n  \n  end_of_data = data + length;\n  remaining_size = length;\n  do {\n    if (data == end_of_data) {\n      return 0;\n    }\n    result = __sfputc_r(stream,*data,buffer_size,length,remaining_size);\n    length = result + 1;\n    data = data + 1;\n  } while (length != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000057d2": "write_to_stream_000057d2",
                "param_1": "stream",
                "param_2": "buffer_size",
                "param_3": "data",
                "param_4": "length",
                "iVar1": "result",
                "puVar2": "end_of_data",
                "iVar3": "remaining_size"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000057a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000057d2": {
                    "1": "convert_string",
                    "13": "write_to_stream",
                    "4": "write_data",
                    "3": "process_data"
                },
                "param_1": {
                    "20": "stream",
                    "1": "param_1",
                    "2": "file_descriptor",
                    "3": "file"
                },
                "param_2": {
                    "6": "character",
                    "10": "buffer_size",
                    "1": "param_2",
                    "2": "param",
                    "4": "buffer"
                },
                "param_3": {
                    "1": "source_buffer",
                    "14": "data",
                    "10": "buffer"
                },
                "param_4": {
                    "2": "buffer_length",
                    "1": "source_size",
                    "4": "data_length",
                    "7": "size",
                    "9": "length"
                },
                "iVar1": {
                    "1": "output_result",
                    "3": "write_result",
                    "2": "write_count",
                    "22": "result"
                },
                "puVar2": {
                    "1": "end_position",
                    "3": "end_ptr",
                    "8": "end_of_buffer",
                    "11": "end_of_data",
                    "2": "buffer_end"
                },
                "iVar3": {
                    "4": "remaining_bytes",
                    "1": "remaining_data_length",
                    "10": "remaining_size",
                    "9": "remaining_length",
                    "2": "current_length"
                }
            }
        },
        "FUN_000057f8": {
            "entrypoint": "0x000057f8",
            "current_name": "print_formatted_string_000057f8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000059f0) */\n\nint print_formatted_string_000057f8(int stream,undefined4 *format,byte *format_string,int *args)\n\n{\n  int result;\n  int result;\n  int *arg_ptr;\n  bool is_digit;\n  byte *current_char;\n  int recursive_lock;\n  byte *next_char;\n  int *arg_ptr;\n  uint flags;\n  int precision;\n  undefined4 width;\n  int width;\n  int total_length;\n  byte conversion_specifier;\n  undefined space_flag;\n  undefined plus_flag;\n  undefined zero_flag;\n  undefined4 length_modifier;\n  \n  if ((stream != 0) && (*(int *)(stream + 0x18) == 0)) {\n    initialize();\n  }\n  if (format == &DAT_000079b8) {\n    format = *(undefined4 **)(stream + 4);\n  }\n  else if (format == (undefined4 *)&DAT_000079d8) {\n    format = *(undefined4 **)(stream + 8);\n  }\n  else if (format == (undefined4 *)&DAT_00007998) {\n    format = *(undefined4 **)(stream + 0xc);\n  }\n  if ((-1 < (int)(format_specifiers[25] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(format + 3) << 0x16))) {\n    acquire_recursive_lock(format[0x16]);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(format + 3) << 0x1c)) || (format[4] == 0)) &&\n     (result = swsetup_r(stream,format), result != 0)) {\n    if ((-1 < (int)(format_specifiers[25] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(format + 3) << 0x16)))\n    {\n      release_recursive_lock(format[0x16]);\n    }\n    return -1;\n  }\n  total_length = 0;\n  space_flag = 0x20;\n  plus_flag = 0x30;\n  next_char = format_string;\n  arg_ptr = args;\nLAB_0000588e:\n  current_char = next_char;\n  if (*current_char != 0) goto function_pointer_r0x00005896;\n  goto LAB_0000589a;\nfunction_pointer_r0x00005896:\n  next_char = current_char + 1;\n  if (*current_char == 0x25) {\nLAB_0000589a:\n    result = (int)current_char - (int)format_string;\n    if (result != 0) {\n      result = sfputs_r(stream,format,format_string,result);\n      if (result == -1) {\nLAB_00005a06:\n        if ((-1 < (int)(format_specifiers[25] << 0x1f)) &&\n           (-1 < (int)((uint)*(ushort *)(format + 3) << 0x16))) {\n          release_recursive_lock(format[0x16]);\n        }\n        if ((int)((uint)*(ushort *)(format + 3) << 0x19) < 0) {\n          return -1;\n        }\n        return total_length;\n      }\n      total_length = total_length + result;\n    }\n    if (*current_char == 0) goto LAB_00005a06;\n    precision = -1;\n    width = 0;\n    flags = 0;\n    width = 0;\n    zero_flag = 0;\n    length_modifier = 0;\n    next_char = current_char + 1;\n    while( true ) {\n      current_char = next_char + 1;\n      result = find_char(\"#-0+ \",*next_char,5);\n      if (result == 0) break;\n      flags = 1 << (result - 0x7bfcU & 0xff) | flags;\n      next_char = current_char;\n    }\n    if ((int)(flags << 0x1b) < 0) {\n      zero_flag = 0x20;\n    }\n    if ((int)(flags << 0x1c) < 0) {\n      zero_flag = 0x2b;\n    }\n    if (*next_char == 0x2a) {\n      arg_ptr = arg_ptr + 1;\n      width = *arg_ptr;\n      arg_ptr = arg_ptr;\n      if (width < 0) {\n        width = -width;\n        flags = flags | 2;\n      }\n    }\n    else {\n      is_digit = false;\n      result = width;\n      current_char = next_char;\n      while( true ) {\n        if (9 < *current_char - 0x30) break;\n        result = result * 10 + (*current_char - 0x30);\n        is_digit = true;\n        current_char = current_char + 1;\n      }\n      if (is_digit) {\n        width = result;\n      }\n    }\n    if (*current_char == 0x2e) {\n      if (current_char[1] == 0x2a) {\n        precision = *arg_ptr;\n        if (precision < 0) {\n          precision = -1;\n        }\n        current_char = current_char + 2;\n        arg_ptr = arg_ptr + 1;\n      }\n      else {\n        is_digit = false;\n        precision = 0;\n        result = 0;\n        while( true ) {\n          current_char = current_char + 1;\n          if (9 < *current_char - 0x30) break;\n          result = result * 10 + (*current_char - 0x30);\n          is_digit = true;\n        }\n        if (is_digit) {\n          precision = result;\n        }\n      }\n    }\n    result = find_char(&DAT_00007c02,*current_char,3);\n    if (result != 0) {\n      flags = flags | 0x40 << (result - 0x7c02U & 0xff);\n      current_char = current_char + 1;\n    }\n    format_string = current_char + 1;\n    conversion_specifier = *current_char;\n    result = find_char(\"efgEFG\",conversion_specifier,6);\n    if (result == 0) {\n      recursive_lock = printf_i(stream,&flags,format,0x57d3,&arg_ptr);\n      if (recursive_lock == -1) goto LAB_00005a06;\n    }\n    else {\n      arg_ptr = (int *)(((int)arg_ptr + 7U & 0xfffffff8) + 8);\n    }\n    total_length = total_length + recursive_lock;\n    next_char = format_string;\n  }\n  goto LAB_0000588e;\n}\n\n",
            "renaming": {
                "FUN_000057f8": "print_formatted_string_000057f8",
                "param_1": "stream",
                "param_2": "format",
                "param_3": "format_string",
                "param_4": "args",
                "iVar1": "result",
                "iVar2": "result",
                "piVar3": "arg_ptr",
                "bVar4": "is_digit",
                "pbVar5": "current_char",
                "unaff_r7": "recursive_lock",
                "pbVar6": "next_char",
                "local_8c": "arg_ptr",
                "local_88": "flags",
                "local_84": "precision",
                "uStack_80": "width",
                "local_7c": "width",
                "local_74": "total_length",
                "local_70": "conversion_specifier",
                "local_6f": "space_flag",
                "local_6e": "plus_flag",
                "local_45": "zero_flag",
                "local_30": "length_modifier",
                "__sinit": "initialize",
                "__retarget_lock_acquire_recursive": "acquire_recursive_lock",
                "__swsetup_r": "swsetup_r",
                "__retarget_lock_release_recursive": "release_recursive_lock",
                "__sfputs_r": "sfputs_r",
                "memchr": "find_char",
                "_printf_i": "printf_i",
                "param_2[0x19]": "format_specifiers[25]",
                "code": "function_pointer"
            },
            "calling": [
                "FUN_00004c84"
            ],
            "called": [
                "FUN_000057d2",
                "FUN_000045e8",
                "FUN_000045ec",
                "FUN_000054a8",
                "FUN_00006010",
                "FUN_000042a4",
                "FUN_00005b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000057f8": {
                    "1": "process_printf_format",
                    "4": "print_formatted_text",
                    "2": "format_and_print",
                    "6": "print_formatted_string"
                },
                "param_1": {
                    "2": "input",
                    "7": "stream",
                    "1": "param",
                    "3": "input_param"
                },
                "param_2": {
                    "3": "param2",
                    "1": "arg2",
                    "4": "format_specifiers",
                    "2": "param_array",
                    "6": "format",
                    "5": "format_string"
                },
                "param_3": {
                    "1": "format",
                    "2": "byte_array",
                    "3": "output_buffer",
                    "7": "format_string"
                },
                "param_4": {
                    "1": "arg_size",
                    "3": "arg_list",
                    "2": "int_array",
                    "5": "args"
                },
                "iVar1": {
                    "1": "iterator1",
                    "3": "length",
                    "2": "var1",
                    "6": "index",
                    "11": "result"
                },
                "iVar2": {
                    "3": "temp_result",
                    "1": "temp2",
                    "4": "temp",
                    "2": "var2",
                    "11": "result"
                },
                "piVar3": {
                    "1": "output_buffer",
                    "2": "arg",
                    "3": "arg_pointer",
                    "4": "arg_ptr"
                },
                "bVar4": {
                    "5": "is_digit",
                    "4": "found",
                    "2": "is_true",
                    "1": "boolean_variable"
                },
                "pbVar5": {
                    "2": "ptr",
                    "1": "pointer_byte_var1",
                    "13": "current_char"
                },
                "unaff_r7": {
                    "1": "register_unaff_r7",
                    "3": "unaff_r7",
                    "5": "recursive_lock"
                },
                "pbVar6": {
                    "2": "byte_ptr2",
                    "1": "temp_pointer",
                    "3": "current_position",
                    "7": "next_char"
                },
                "local_8c": {
                    "1": "arg_pointer_array",
                    "3": "arg_ptr",
                    "2": "arg_index"
                },
                "local_88": {
                    "1": "modifiers",
                    "2": "flag_bits",
                    "21": "flags"
                },
                "local_84": {
                    "1": "local_var3",
                    "2": "prec_width",
                    "24": "precision"
                },
                "uStack_80": {
                    "1": "precision_value",
                    "2": "unused",
                    "11": "width",
                    "3": "u_stack_80"
                },
                "local_7c": {
                    "1": "arg_size",
                    "5": "width",
                    "2": "arg_width"
                },
                "local_74": {
                    "1": "local_var6",
                    "9": "total_length",
                    "3": "total_chars",
                    "2": "total_characters"
                },
                "local_70": {
                    "1": "local_byte",
                    "3": "conversion",
                    "8": "specifier",
                    "2": "format_char",
                    "9": "conversion_specifier"
                },
                "local_6f": {
                    "2": "char1",
                    "1": "space_padding",
                    "11": "space_flag"
                },
                "local_6e": {
                    "2": "char2",
                    "11": "plus_flag",
                    "1": "constant2"
                },
                "local_45": {
                    "1": "space_or_plus_flag",
                    "4": "zero_flag"
                },
                "local_30": {
                    "1": "local_variable_4",
                    "2": "zero_flag",
                    "3": "length_modifier"
                },
                "FLOOOOOF": {
                    "1": "print_formatted_string"
                },
                "PARAM_1": {
                    "1": "param1"
                },
                "PARAM_2": {
                    "1": "param2"
                },
                "PARAM_3": {
                    "1": "param3"
                },
                "PARAM_4": {
                    "1": "param4"
                },
                "__sinit": {
                    "1": "initialize_stdio",
                    "2": "initialize"
                },
                "DAT_000079b8": {
                    "1": "var1"
                },
                "DAT_000079d8": {
                    "1": "var2"
                },
                "DAT_00007998": {
                    "1": "var3"
                },
                "__retarget_lock_acquire_recursive": {
                    "2": "acquire_recursive_lock",
                    "1": "lock_acquire_recursive"
                },
                "__swsetup_r": {
                    "1": "setup_r"
                },
                "__retarget_lock_release_recursive": {
                    "1": "release_lock",
                    "2": "release_recursive_lock"
                },
                "__sfputs_r": {
                    "2": "sfputs_r",
                    "1": "write_to_output"
                },
                "memchr": {
                    "1": "find_character_in_string"
                },
                "_printf_i": {
                    "2": "printf_i",
                    "1": "perform_integer_printing"
                },
                "FUNC_000045e8": {
                    "1": "acquire_recursive_lock"
                },
                "FUNC_000045ec": {
                    "1": "perform_operation_2"
                },
                "FUN_000054a8": {
                    "1": "descriptive_name4"
                },
                "FUN_00006010": {
                    "1": "perform_string_conversion"
                },
                "FUN_000042a4": {
                    "1": "handle_error"
                },
                "FUN_00005b34": {
                    "1": "func_6"
                },
                "FUN_000057d2": {
                    "1": "descriptive_name1"
                },
                "&DAT_000079b8": {
                    "1": "placeholder_1"
                },
                "&DAT_000079d8": {
                    "1": "data2"
                },
                "&DAT_00007998": {
                    "1": "data3"
                },
                "FUN_000045e8": {
                    "1": "descriptive_name2"
                },
                "FUN_000045ec": {
                    "1": "descriptive_name3"
                },
                "param_2[0x19]": {
                    "1": "format_specifiers[25]"
                },
                "param_2[3]": {
                    "1": "format_specifiers[3]"
                },
                "param_3[0]": {
                    "1": "format_string[0]"
                },
                "&DAT_00007c02": {
                    "1": "valid_conversion_specifiers"
                },
                "code": {
                    "1": "function_pointer"
                }
            }
        },
        "FUN_00005a58": {
            "entrypoint": "0x00005a58",
            "current_name": "process_data_00005a58",
            "code": "\nundefined4\nprocess_data_00005a58(undefined4 input,uint *data,uint *output,undefined4 param4,code *callback)\n\n{\n  int index;\n  undefined4 return_value;\n  int callback_result;\n  uint max_value;\n  uint counter;\n  bool is_flag_set;\n  \n  max_value = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    max_value = data[2];\n  }\n  *output = max_value;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *output = max_value + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *output = *output + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (index = 0; index < (int)(data[3] - *output); index = index + 1) {\n      callback_result = (*callback)(input,param4,(int)data + 0x19,1);\n      if (callback_result == -1) goto LAB_00005afc;\n    }\n  }\n  max_value = (uint)*(byte *)((int)data + 0x43);\n  if (max_value != 0) {\n    max_value = 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + max_value + 0x43) = 0x30;\n    *(undefined *)((int)data + max_value + 0x44) = *(undefined *)((int)data + 0x45);\n    max_value = max_value + 2;\n  }\n  index = (*callback)(input,param4,(int)data + 0x43,max_value);\n  if (index == -1) {\nLAB_00005afc:\n    return_value = 0xffffffff;\n  }\n  else {\n    max_value = data[3];\n    is_flag_set = (*data & 6) == 4;\n    if (is_flag_set) {\n      max_value = max_value - *output;\n    }\n    if (is_flag_set) {\n      max_value = max_value & ~((int)max_value >> 0x1f);\n    }\n    else {\n      max_value = 0;\n    }\n    if ((int)data[4] < (int)data[2]) {\n      max_value = max_value + (data[2] - data[4]);\n    }\n    for (counter = 0; max_value != counter; counter = counter + 1) {\n      index = (*callback)(input,param4,(int)data + 0x1a,1);\n      if (index == -1) goto LAB_00005afc;\n    }\n    return_value = 0;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00005a58": "process_data_00005a58",
                "param_1": "input",
                "param_2": "data",
                "param_3": "output",
                "param_4": "param4",
                "param_5": "callback",
                "iVar1": "index",
                "uVar2": "return_value",
                "iVar3": "callback_result",
                "uVar4": "max_value",
                "uVar5": "counter",
                "bVar6": "is_flag_set"
            },
            "calling": [
                "FUN_00005b34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00005a58": {
                    "1": "update_parameters",
                    "2": "calculate_string_length",
                    "12": "process_data",
                    "4": "update_param_values"
                },
                "param_1": {
                    "13": "input",
                    "3": "data",
                    "7": "input_value",
                    "1": "input_value1",
                    "2": "input_param"
                },
                "param_2": {
                    "1": "input_data",
                    "9": "data",
                    "4": "input_array",
                    "2": "buffer",
                    "3": "param_array"
                },
                "param_3": {
                    "1": "size",
                    "5": "output_size",
                    "3": "result",
                    "4": "output_value",
                    "9": "output"
                },
                "param_4": {
                    "10": "param4",
                    "1": "param4_value",
                    "3": "param_4",
                    "2": "constant",
                    "7": "param"
                },
                "param_5": {
                    "1": "handler_function",
                    "17": "callback",
                    "2": "callback_func",
                    "10": "callback_function"
                },
                "iVar1": {
                    "3": "iteration",
                    "1": "iteration_index",
                    "2": "result",
                    "5": "loop_index",
                    "13": "index"
                },
                "uVar2": {
                    "1": "status",
                    "11": "result",
                    "17": "return_value",
                    "2": "return_val"
                },
                "iVar3": {
                    "1": "index",
                    "2": "callback_return_value",
                    "5": "temp_var",
                    "10": "callback_result",
                    "6": "result"
                },
                "uVar4": {
                    "1": "max",
                    "16": "max_value",
                    "6": "max_size",
                    "2": "max_output_length"
                },
                "uVar5": {
                    "2": "index",
                    "1": "current_number",
                    "4": "count",
                    "13": "counter"
                },
                "bVar6": {
                    "2": "check_flag",
                    "1": "is_case_two",
                    "4": "condition",
                    "3": "is_condition_met",
                    "8": "is_flag_set"
                },
                "array": {
                    "1": "param_array"
                },
                "result": {
                    "1": "output_result"
                },
                "constant": {
                    "1": "param_constant"
                },
                "callback": {
                    "1": "param_callback"
                },
                "index1": {
                    "1": "loop_index1"
                },
                "returnValue": {
                    "1": "return_code"
                },
                "index2": {
                    "1": "loop_index2"
                },
                "max": {
                    "1": "max_value"
                },
                "count": {
                    "1": "loop_count"
                },
                "check": {
                    "1": "condition"
                }
            }
        },
        "FUN_00005b34": {
            "entrypoint": "0x00005b34",
            "current_name": "print_formatted_value_00005b34",
            "code": "\ncode * print_formatted_value_00005b34(undefined4 format_string,uint *arg_list,undefined4 stream,code *print_function,uint **arg_ptr\n                   )\n\n{\n  bool is_negative;\n  byte byte_value;\n  int result;\n  code *return_value;\n  char *hex_digits;\n  int printf_result;\n  char *current_char;\n  uint value;\n  uint *arg_ptr;\n  uint base;\n  uint **arg_ptr_ptr;\n  char **string_ptr;\n  uint string_length;\n  char *formatted_string;\n  code *local_output_function;\n  \n  byte_value = *(byte *)(arg_list + 6);\n  current_char = (char *)((int)arg_list + 0x43);\n  local_output_function = print_function;\n  if (0x78 < byte_value) {\nswitchD_00005b70_caseD_65:\n    *(byte *)((int)arg_list + 0x42) = byte_value;\nLAB_00005bdc:\n    current_char = (char *)((int)arg_list + 0x42);\n    value = 1;\nLAB_00005d28:\n    arg_list[4] = value;\n    *(undefined *)((int)arg_list + 0x43) = 0;\n    goto LAB_00005c84;\n  }\n  if (byte_value < 99) {\n    if (byte_value == 0) goto LAB_00005d06;\n    if (byte_value == 0x58) {\n      hex_digits = \"0123456789ABCDEF\";\n      *(undefined *)((int)arg_list + 0x45) = 0x58;\n      goto LAB_00005ca8;\n    }\n    goto switchD_00005b70_caseD_65;\n  }\n  switch(byte_value) {\n  case 99:\n    value = **arg_ptr;\n    *arg_ptr = *arg_ptr + 1;\n    *(char *)((int)arg_list + 0x42) = (char)value;\n    goto LAB_00005bdc;\n  case 100:\n  case 0x69:\n    base = *arg_list;\n    arg_ptr = *arg_ptr;\n    if ((int)(base << 0x18) < 0) {\n      value = *arg_ptr;\n      *arg_ptr = arg_ptr + 1;\n    }\n    else {\n      value = *arg_ptr;\n      *arg_ptr = arg_ptr + 1;\n      if ((base & 0x40) != 0) {\n        value = (uint)(short)value;\n      }\n    }\n    if ((int)value < 0) {\n      value = -value;\n      *(undefined *)((int)arg_list + 0x43) = 0x2d;\n    }\n    hex_digits = \"0123456789ABCDEF\";\n    base = 10;\n    goto LAB_00005c36;\n  default:\n    goto switchD_00005b70_caseD_65;\n  case 0x6e:\n    arg_ptr_ptr = (uint **)*arg_ptr;\n    base = *arg_list;\n    value = arg_list[5];\n    *arg_ptr = (uint *)(arg_ptr_ptr + 1);\n    arg_ptr = *arg_ptr_ptr;\n    if (((int)(base << 0x18) < 0) || (-1 < (int)(base << 0x19))) {\n      *arg_ptr = value;\n    }\n    else {\n      *(short *)arg_ptr = (short)value;\n    }\nLAB_00005d06:\n    arg_list[4] = 0;\n    goto LAB_00005c84;\n  case 0x6f:\n  case 0x75:\n    arg_ptr = *arg_ptr;\n    value = *arg_list;\n    *arg_ptr = arg_ptr + 1;\n    if (((int)(value << 0x18) < 0) || (-1 < (int)(value << 0x19))) {\n      value = *arg_ptr;\n    }\n    else {\n      value = (uint)*(ushort *)arg_ptr;\n    }\n    hex_digits = \"0123456789ABCDEF\";\n    if (byte_value == 0x6f) {\n      base = 8;\n    }\n    else {\n      base = 10;\n    }\n    break;\n  case 0x70:\n    *arg_list = *arg_list | 0x20;\n  case 0x78:\n    hex_digits = \"0123456789abcdef\";\n    *(undefined *)((int)arg_list + 0x45) = 0x78;\nLAB_00005ca8:\n    base = *arg_list;\n    value = **arg_ptr;\n    *arg_ptr = *arg_ptr + 1;\n    if ((-1 < (int)(base << 0x18)) && ((int)(base << 0x19) < 0)) {\n      value = value & 0xffff;\n    }\n    if ((int)(base << 0x1f) < 0) {\n      *arg_list = base | 0x20;\n    }\n    if (value == 0) {\n      *arg_list = *arg_list & 0xffffffdf;\n    }\n    base = 0x10;\n    break;\n  case 0x73:\n    string_ptr = (char **)*arg_ptr;\n    *arg_ptr = (uint *)(string_ptr + 1);\n    current_char = *string_ptr;\n    result = memchr(current_char,0,arg_list[1],string_ptr,format_string,arg_list,stream);\n    if (result != 0) {\n      arg_list[1] = result - (int)current_char;\n    }\n    value = arg_list[1];\n    goto LAB_00005d28;\n  }\n  *(undefined *)((int)arg_list + 0x43) = 0;\nLAB_00005c36:\n  string_length = arg_list[1];\n  arg_list[2] = string_length;\n  if (-1 < (int)string_length) {\n    *arg_list = *arg_list & 0xfffffffb;\n  }\n  formatted_string = current_char;\n  if ((value != 0) || (string_length != 0)) {\n    do {\n      formatted_string = formatted_string + -1;\n      *formatted_string = hex_digits[value - base * (value / base)];\n      is_negative = base <= value;\n      value = value / base;\n    } while (is_negative);\n  }\n  if (((base == 8) && ((int)(*arg_list << 0x1f) < 0)) && ((int)arg_list[1] <= (int)arg_list[4])) {\n    formatted_string[-1] = '0';\n    formatted_string = formatted_string + -1;\n  }\n  arg_list[4] = (int)current_char - (int)formatted_string;\n  current_char = formatted_string;\nLAB_00005c84:\n  result = _printf_common(format_string,arg_list,&local_output_function,stream,print_function);\n  if ((result == -1) || (result = (*print_function)(format_string,stream,current_char,arg_list[4]), result == -1)) {\nLAB_00005c98:\n    return_value = (code *)0xffffffff;\n  }\n  else {\n    if ((int)(*arg_list << 0x1e) < 0) {\n      for (result = 0; result < (int)(arg_list[3] - (int)local_output_function); result = result + 1) {\n        printf_result = (*print_function)(format_string,stream,(int)arg_list + 0x19,1);\n        if (printf_result == -1) goto LAB_00005c98;\n      }\n    }\n    return_value = (code *)arg_list[3];\n    if ((int)(code *)arg_list[3] < (int)local_output_function) {\n      return_value = local_output_function;\n    }\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00005b34": "print_formatted_value_00005b34",
                "param_1": "format_string",
                "param_2": "arg_list",
                "param_3": "stream",
                "param_4": "print_function",
                "param_5": "arg_ptr",
                "bVar1": "is_negative",
                "bVar2": "byte_value",
                "iVar3": "result",
                "pcVar4": "return_value",
                "pcVar5": "hex_digits",
                "iVar6": "printf_result",
                "local_24": "local_output_function",
                "ppuVar11": "arg_ptr_ptr",
                "ppcVar12": "string_ptr",
                "uVar8": "value",
                "uVar10": "base",
                "uVar13": "string_length",
                "pcVar14": "formatted_string",
                "pcVar7": "current_char",
                "puVar9": "arg_ptr"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_00005a58",
                "FUN_00006010"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00005b34": {
                    "4": "print_formatted_data",
                    "2": "print_formatted",
                    "5": "print_formatted_output",
                    "13": "print_formatted_value"
                },
                "param_1": {
                    "1": "param_1",
                    "8": "format_specifier",
                    "3": "format",
                    "9": "format_string"
                },
                "param_2": {
                    "1": "value_ptr",
                    "6": "args",
                    "11": "arg_list",
                    "3": "value"
                },
                "param_3": {
                    "8": "stream",
                    "3": "arg3",
                    "1": "output_flag",
                    "4": "width",
                    "2": "num_args"
                },
                "param_4": {
                    "1": "putc_func",
                    "3": "print_func",
                    "2": "callback_function",
                    "6": "print_function",
                    "4": "output_function"
                },
                "param_5": {
                    "1": "arg_table",
                    "2": "arg5",
                    "5": "arg_ptr"
                },
                "bVar1": {
                    "10": "is_negative",
                    "5": "is_greater",
                    "1": "has_remainder",
                    "4": "is_divisible",
                    "2": "is_less_than",
                    "6": "is_positive"
                },
                "bVar2": {
                    "1": "format_flag",
                    "2": "format_specifier",
                    "4": "byte_val",
                    "7": "byte_value"
                },
                "iVar3": {
                    "1": "int_var",
                    "3": "return_value",
                    "2": "printf_result",
                    "16": "result"
                },
                "pcVar4": {
                    "1": "ptr_var",
                    "7": "return_value",
                    "2": "output_function",
                    "4": "output",
                    "3": "result"
                },
                "pcVar5": {
                    "1": "hex_values",
                    "2": "digit_table",
                    "7": "hex_digits",
                    "3": "hex_chars",
                    "4": "digit_string",
                    "5": "digits"
                },
                "iVar6": {
                    "1": "loop_iterator",
                    "2": "char_count",
                    "4": "print_result",
                    "3": "output_result"
                },
                "local_24": {
                    "1": "result",
                    "2": "local_output_function"
                },
                "ppuVar11": {
                    "1": "pp_arg_pointer",
                    "3": "arg_ptr_ptr"
                },
                "ppcVar12": {
                    "1": "cpp",
                    "2": "string_ptr"
                },
                "uVar8": {
                    "2": "current_value",
                    "6": "dividend",
                    "1": "quotient",
                    "13": "value"
                },
                "uVar10": {
                    "2": "num_base",
                    "1": "value2",
                    "25": "base"
                },
                "uVar13": {
                    "1": "original_width",
                    "2": "num_length",
                    "6": "string_length",
                    "3": "length"
                },
                "pcVar14": {
                    "1": "p",
                    "2": "result_ptr",
                    "3": "digit_ptr",
                    "4": "formatted_string"
                },
                "pcVar7": {
                    "2": "output_buffer",
                    "1": "current_value_string",
                    "7": "current_char"
                },
                "puVar9": {
                    "1": "pointer_value",
                    "2": "arg_pointer",
                    "10": "arg_ptr"
                },
                "iVar7": {
                    "1": "loop_variable"
                },
                "uVar14": {
                    "1": "divisor"
                },
                "uVar15": {
                    "1": "remainder"
                },
                "iVar4": {
                    "1": "temp"
                }
            }
        },
        "FUN_00005e10": {
            "entrypoint": "0x00005e10",
            "current_name": "read_byte_from_stream_00005e10",
            "code": "\nuint read_byte_from_stream_00005e10(int stream,byte **buffer)\n\n{\n  int result;\n  uint byte_value;\n  byte *current_byte;\n  \n  if ((stream != 0) && (*(int *)(stream + 0x18) == 0)) {\n    __sinit();\n  }\n  if (buffer == (byte **)&DAT_000079b8) {\n    buffer = *(byte ***)(stream + 4);\n  }\n  else if (buffer == (byte **)&DAT_000079d8) {\n    buffer = *(byte ***)(stream + 8);\n  }\n  else if (buffer == (byte **)&DAT_00007998) {\n    buffer = *(byte ***)(stream + 0xc);\n  }\n  result = __srefill_r(stream,buffer);\n  if (result == 0) {\n    buffer[1] = buffer[1] + -1;\n    current_byte = *buffer;\n    *buffer = current_byte + 1;\n    byte_value = (uint)*current_byte;\n  }\n  else {\n    byte_value = 0xffffffff;\n  }\n  return byte_value;\n}\n\n",
            "renaming": {
                "FUN_00005e10": "read_byte_from_stream_00005e10",
                "param_1": "stream",
                "param_2": "buffer",
                "iVar1": "result",
                "uVar2": "byte_value",
                "pbVar3": "current_byte"
            },
            "calling": [
                "FUN_00004418"
            ],
            "called": [
                "FUN_00006768",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00005e10": {
                    "4": "read_next_byte",
                    "1": "read_byte_from_input_stream",
                    "9": "read_byte",
                    "14": "read_byte_from_stream"
                },
                "param_1": {
                    "10": "stream",
                    "2": "file_pointer",
                    "4": "file_handle",
                    "1": "stream_info",
                    "3": "file"
                },
                "param_2": {
                    "1": "stream_ptr",
                    "2": "stream_data",
                    "5": "stream_buffer",
                    "15": "buffer"
                },
                "iVar1": {
                    "1": "srefill_result",
                    "4": "read_result",
                    "2": "read_status",
                    "5": "status",
                    "3": "refill_result",
                    "14": "result"
                },
                "uVar2": {
                    "3": "next_byte",
                    "6": "byte_read",
                    "1": "result",
                    "2": "read_value",
                    "15": "byte_value"
                },
                "pbVar3": {
                    "2": "byte_ptr",
                    "1": "stream_byte",
                    "25": "current_byte"
                },
                "*pbVar3": {
                    "1": "current_byte"
                }
            }
        },
        "FUN_00005e68": {
            "entrypoint": "0x00005e68",
            "current_name": "parse_input_00005e68",
            "code": "\nvoid parse_input_00005e68(undefined4 input_param,undefined4 input2,undefined4 input3,undefined4 param_4)\n\n{\n  undefined4 input_copy;\n  undefined4 string_length;\n  undefined2 constant_value;\n  undefined2 constant2;\n  undefined4 input_copy2;\n  undefined4 string_length_copy;\n  undefined *string_pointer;\n  undefined4 zero;\n  undefined4 zero2;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  \n  constant_value = 0x204;\n  input_copy = input_param;\n  input_copy2 = input_param;\n  param_3_copy = input3;\n  param_4_copy = param_4;\n  string_length = strlen();\n  string_pointer = &LAB_00004dea_1;\n  zero = 0;\n  zero2 = 0;\n  constant2 = 0xffff;\n  string_length_copy = string_length;\n  custom_scanf_function(Elf32_Rel_ARRAY_1fff0200[16].r_offset,&input_copy,input2,&param_3_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005e68": "parse_input_00005e68",
                "param_1": "input_param",
                "param_2": "input2",
                "param_3": "input3",
                "local_80": "input_copy",
                "local_7c": "string_length",
                "local_74": "constant_value",
                "local_72": "constant2",
                "local_70": "input_copy2",
                "local_6c": "string_length_copy",
                "local_5c": "string_pointer",
                "local_4c": "zero",
                "local_38": "zero2",
                "uStack_8": "param_3_copy",
                "uStack_4": "param_4_copy",
                "__ssvfiscanf_r": "custom_scanf_function"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_000061cc",
                "FUN_00005ecc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00005e68": {
                    "2": "scan_and_process_data",
                    "1": "scan_and_store",
                    "3": "parse_and_scan_input",
                    "10": "parse_input"
                },
                "param_1": {
                    "3": "input_param1",
                    "2": "input_param_1",
                    "1": "arg1",
                    "5": "input1",
                    "4": "input_data",
                    "6": "input_param"
                },
                "param_2": {
                    "5": "input2",
                    "1": "input_pointer",
                    "3": "input_param2",
                    "2": "input_param_2",
                    "4": "format_string"
                },
                "param_3": {
                    "1": "scanner_value",
                    "3": "length_param",
                    "2": "input_param_3",
                    "4": "input3"
                },
                "param_4": {
                    "1": "length_pointer",
                    "3": "arg2",
                    "5": "param_4",
                    "2": "input_param_4",
                    "4": "input4"
                },
                "local_80": {
                    "1": "local_var1",
                    "3": "input_data_copy",
                    "2": "parsed_param1",
                    "7": "input_copy"
                },
                "local_7c": {
                    "9": "string_length",
                    "1": "temp2",
                    "5": "input_length",
                    "2": "str_length",
                    "6": "length"
                },
                "local_74": {
                    "1": "local_var3",
                    "4": "buffer_size",
                    "2": "constant_1",
                    "5": "constant",
                    "7": "constant_value"
                },
                "local_72": {
                    "1": "local_var4",
                    "3": "constant_value_2",
                    "4": "constant_value",
                    "2": "local_var3",
                    "6": "constant2"
                },
                "local_70": {
                    "1": "parsed_param2",
                    "4": "input_copy2",
                    "2": "input_copy_2"
                },
                "local_6c": {
                    "6": "length_copy",
                    "1": "parsed_input_length",
                    "2": "input_length_copy",
                    "8": "string_length_copy"
                },
                "local_5c": {
                    "2": "local_string",
                    "1": "constant3",
                    "9": "string_pointer",
                    "3": "string_ptr"
                },
                "local_4c": {
                    "1": "constant3",
                    "2": "counter",
                    "5": "zero"
                },
                "local_38": {
                    "2": "unused2",
                    "1": "variable2",
                    "3": "zero2"
                },
                "uStack_8": {
                    "1": "input_param_3_copy",
                    "4": "param_3_copy",
                    "2": "parsed_param3"
                },
                "uStack_4": {
                    "1": "output_param_copy",
                    "2": "parsed_param4",
                    "4": "param_4_copy"
                },
                "__ssvfiscanf_r": {
                    "1": "process_input_format"
                },
                "FUN_000061cc": {
                    "1": "parse_input_data"
                },
                "FUN_00005ecc": {
                    "1": "sanitize_string"
                }
            }
        },
        "FUN_00005ebc": {
            "entrypoint": "0x00005ebc",
            "current_name": "copy_string_00005ebc",
            "code": "\nvoid copy_string_00005ebc(char *destination,char *source)\n\n{\n  char current_char;\n  \n  do {\n    current_char = *source;\n    *destination = current_char;\n    source = source + 1;\n    destination = destination + 1;\n  } while (current_char != '\\0');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ebc": "copy_string_00005ebc",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "current_char"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00005ebc": {
                    "31": "copy_string"
                },
                "param_1": {
                    "1": "destination_string",
                    "24": "destination",
                    "6": "dest"
                },
                "param_2": {
                    "1": "source_string",
                    "24": "source",
                    "6": "src"
                },
                "cVar1": {
                    "9": "current_character",
                    "21": "current_char"
                }
            }
        },
        "FUN_00005ecc": {
            "entrypoint": "0x00005ecc",
            "current_name": "find_end_of_string_00005ecc",
            "code": "\nchar * find_end_of_string_00005ecc(char *input_string)\n\n{\n  char current_character;\n  char *next_char;\n  char *current_char;\n  \n  current_char = input_string;\n  do {\n    next_char = current_char + 1;\n    current_character = *current_char;\n    current_char = next_char;\n  } while (current_character != '\\0');\n  return next_char + (-1 - (int)input_string);\n}\n\n",
            "renaming": {
                "FUN_00005ecc": "find_end_of_string_00005ecc",
                "param_1": "input_string",
                "cVar1": "current_character",
                "pcVar2": "next_char",
                "pcVar3": "current_char"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00005e68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00005ecc": {
                    "1": "find_null_terminated",
                    "10": "find_end_of_string",
                    "3": "find_string_length",
                    "5": "reverse_string",
                    "4": "get_string_length"
                },
                "param_1": {
                    "6": "string",
                    "8": "str",
                    "17": "input_string"
                },
                "cVar1": {
                    "12": "current_character",
                    "1": "char",
                    "10": "current_char",
                    "3": "current_char_value",
                    "2": "current_value"
                },
                "pcVar2": {
                    "1": "next_character_pointer",
                    "9": "next_character",
                    "2": "next_char_pointer",
                    "12": "next_char"
                },
                "pcVar3": {
                    "2": "current_char_ptr",
                    "1": "current_character_ptr",
                    "8": "current_char",
                    "7": "current_position"
                }
            }
        },
        "FUN_00005edc": {
            "entrypoint": "0x00005edc",
            "current_name": "parse_number_00005edc",
            "code": "\nuint parse_number_00005edc(undefined4 *result,byte *input_string,byte **remaining_string,uint base)\n\n{\n  uint parsed_value;\n  uint current_char;\n  byte is_negative;\n  int status;\n  uint digit_value;\n  uint max_value;\n  byte *current_byte;\n  byte *next_byte;\n  \n  next_byte = input_string;\n  do {\n    current_byte = next_byte;\n    next_byte = current_byte + 1;\n    current_char = (uint)*current_byte;\n    is_negative = (&DAT_00007a99)[current_char] & 8;\n  } while (((&DAT_00007a99)[current_char] & 8) != 0);\n  if (current_char == 0x2d) {\n    current_char = (uint)*next_byte;\n    is_negative = 1;\n    next_byte = current_byte + 2;\n  }\n  else if (current_char == 0x2b) {\n    current_char = (uint)*next_byte;\n    next_byte = current_byte + 2;\n  }\n  if (base == 0) {\n    if (current_char != 0x30) {\n      base = 10;\n      goto LAB_00005f26;\n    }\n  }\n  else if ((base != 0x10) || (current_char != 0x30)) goto LAB_00005f26;\n  if ((*next_byte & 0xdf) == 0x58) {\n    current_char = (uint)next_byte[1];\n    base = 0x10;\n    next_byte = next_byte + 2;\n  }\n  else {\n    current_char = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00005f26:\n  status = 0;\n  max_value = 0xffffffff / base;\n  parsed_value = 0;\n  do {\n    digit_value = current_char - 0x30;\n    if (9 < digit_value) {\n      if (current_char - 0x41 < 0x1a) {\n        digit_value = current_char - 0x37;\n      }\n      else {\n        if (0x19 < current_char - 0x61) break;\n        digit_value = current_char - 0x57;\n      }\n    }\n    if ((int)base <= (int)digit_value) break;\n    if (((status < 0) || (max_value < parsed_value)) ||\n       ((max_value == parsed_value && ((int)~(base * max_value) < (int)digit_value)))) {\n      status = -1;\n    }\n    else {\n      parsed_value = parsed_value * base + digit_value;\n      status = 1;\n    }\n    current_char = (uint)*next_byte;\n    next_byte = next_byte + 1;\n  } while( true );\n  if (status < 0) {\n    *result = 0x22;\n    parsed_value = 0xffffffff;\n    if (remaining_string == (byte **)0x0) {\n      return 0xffffffff;\n    }\n  }\n  else {\n    if (is_negative != 0) {\n      parsed_value = -parsed_value;\n    }\n    if (remaining_string == (byte **)0x0) {\n      return parsed_value;\n    }\n    if (status == 0) goto LAB_00005fb8;\n  }\n  input_string = next_byte + -1;\nLAB_00005fb8:\n  *remaining_string = input_string;\n  return parsed_value;\n}\n\n",
            "renaming": {
                "FUN_00005edc": "parse_number_00005edc",
                "param_1": "result",
                "param_2": "input_string",
                "param_3": "remaining_string",
                "param_4": "base",
                "uVar1": "parsed_value",
                "uVar2": "current_char",
                "bVar3": "is_negative",
                "iVar4": "status",
                "uVar5": "digit_value",
                "uVar6": "max_value",
                "pbVar7": "current_byte",
                "pbVar8": "next_byte"
            },
            "calling": [
                "FUN_00005fd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00005edc": {
                    "2": "convert_string_to_int",
                    "7": "parse_integer",
                    "9": "parse_number",
                    "1": "convert_to_unsigned_integer",
                    "3": "parse_integer_from_string"
                },
                "param_1": {
                    "3": "out_value",
                    "1": "result_ptr",
                    "7": "output",
                    "18": "result"
                },
                "param_2": {
                    "13": "input",
                    "14": "input_string",
                    "2": "str",
                    "1": "input_str"
                },
                "param_3": {
                    "1": "rest",
                    "4": "remaining",
                    "10": "remaining_string",
                    "3": "next_pointer"
                },
                "param_4": {
                    "31": "base"
                },
                "uVar1": {
                    "6": "parsed_number",
                    "2": "converted_value",
                    "3": "value",
                    "1": "number",
                    "10": "parsed_value",
                    "8": "result"
                },
                "uVar2": {
                    "6": "ch",
                    "2": "current_digit",
                    "1": "current",
                    "19": "current_char"
                },
                "bVar3": {
                    "1": "sign_flag",
                    "18": "is_negative",
                    "9": "negative"
                },
                "iVar4": {
                    "1": "success",
                    "4": "is_valid",
                    "14": "status",
                    "2": "parse_status"
                },
                "uVar5": {
                    "16": "digit_value",
                    "1": "value",
                    "10": "digit",
                    "2": "converted_digit"
                },
                "uVar6": {
                    "1": "quotient",
                    "15": "max_value",
                    "7": "max_divisor",
                    "2": "max_digit_value"
                },
                "pbVar7": {
                    "3": "current_position",
                    "1": "current_pointer",
                    "8": "ptr",
                    "9": "current_byte",
                    "2": "current_char_ptr"
                },
                "pbVar8": {
                    "1": "next_ptr_backup",
                    "9": "next_byte",
                    "4": "ptr_next",
                    "2": "next_char_ptr",
                    "6": "next_ptr",
                    "3": "next_position"
                }
            }
        },
        "FUN_00005fd8": {
            "entrypoint": "0x00005fd8",
            "current_name": "parse_unsigned_long_00005fd8",
            "code": "\nvoid parse_unsigned_long_00005fd8(undefined4 result,undefined4 input_string,undefined4 endptr)\n\n{\n  _strtoul_l_isra_0(relocation_table[16].r_offset,result,input_string,endptr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fd8": "parse_unsigned_long_00005fd8",
                "param_1": "result",
                "param_2": "input_string",
                "param_3": "endptr",
                "Elf32_Rel_ARRAY_1fff0200": "relocation_table"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00005edc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00005fd8": {
                    "1": "convert_string_to_unsigned_integer",
                    "2": "parse_and_convert",
                    "3": "convert_string_to_unsigned_long",
                    "4": "parse_unsigned_long"
                },
                "param_1": {
                    "1": "result_pointer",
                    "4": "destination",
                    "2": "output",
                    "5": "result_ptr",
                    "6": "result"
                },
                "param_2": {
                    "3": "str",
                    "1": "input_byte_array",
                    "6": "input_string",
                    "2": "string",
                    "4": "source",
                    "5": "byte_array"
                },
                "param_3": {
                    "2": "byte_array_ptr",
                    "6": "end_ptr",
                    "1": "next_source",
                    "3": "next_byte_ptr",
                    "5": "end_pointer",
                    "7": "endptr"
                },
                "FUN_00005edc": {
                    "5": "parse_unsigned_integer",
                    "1": "parse_bytes",
                    "4": "parse_unsigned_int",
                    "2": "convert_string_to_unsigned_int"
                },
                "param_4": {
                    "3": "max_length",
                    "1": "size",
                    "2": "base"
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "1": "rel_array",
                    "3": "relocation_table"
                },
                "16": {
                    "1": "relocation_index"
                }
            }
        },
        "FUN_00005fec": {
            "entrypoint": "0x00005fec",
            "current_name": "acquire_recursive_lock_00005fec",
            "code": "\nvoid acquire_recursive_lock_00005fec(void)\n\n{\n  acquire_recursive_lock_00005fec(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fec": "acquire_recursive_lock_00005fec",
                "__retarget_lock_acquire_recursive": "acquire_recursive_lock"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00005fec": {
                    "1": "acquire_lock_recursive",
                    "30": "acquire_recursive_lock"
                },
                "FUNC_000045e8": {
                    "1": "decompile_function",
                    "3": "perform_additional_task",
                    "2": "initialize_lock",
                    "4": "initialize"
                },
                "__retarget_lock_acquire_recursive": {
                    "1": "",
                    "8": "acquire_recursive_lock"
                },
                "0x1fff0de6": {
                    "1": ""
                }
            }
        },
        "FUN_00005ff8": {
            "entrypoint": "0x00005ff8",
            "current_name": "release_recursive_lock_00005ff8",
            "code": "\nvoid release_recursive_lock_00005ff8(void)\n\n{\n  release_recursive_lock_00005ff8(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ff8": "release_recursive_lock_00005ff8",
                "__retarget_lock_release_recursive": "release_recursive_lock"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00005ff8": {
                    "8": "release_lock",
                    "18": "release_recursive_lock",
                    "2": "release_lock_recursive"
                },
                "FUNC_000045ec": {
                    "1": "cleanup_function",
                    "3": "reset_function",
                    "2": "some_function",
                    "5": "recursive_lock"
                },
                "__retarget_lock_release_recursive": {
                    "2": "release_recursive_lock",
                    "1": "unlock_function"
                }
            }
        },
        "FUN_00006010": {
            "entrypoint": "0x00006010",
            "current_name": "find_byte_sequence_00006010",
            "code": "\nbyte * find_byte_sequence_00006010(uint *data,uint target_byte,uint length)\n\n{\n  byte current_byte;\n  char mask_1;\n  char mask_2;\n  char mask_3;\n  char mask_4;\n  byte *next_byte;\n  uint *data_ptr;\n  byte *result;\n  uint alignment;\n  uint aligned_length;\n  uint xor_result_1;\n  uint xor_result_2;\n  bool check_1;\n  bool check_2;\n  bool check_3;\n  bool check_4;\n  \n  target_byte = target_byte & 0xff;\n  if ((int)length < 0x10) {\njoined_r0x00006070:\n    do {\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n      data_ptr = (uint *)((int)data + 1);\n      current_byte = *(byte *)data;\n      length = length - 1;\n      data = data_ptr;\n    } while (current_byte != target_byte);\n  }\n  else {\n    alignment = (uint)data & 7;\n    while( true ) {\n      if (alignment == 0) {\n        alignment = target_byte | target_byte << 8;\n        alignment = alignment | alignment << 0x10;\n        aligned_length = length & 0xfffffff8;\n        do {\n          data_ptr = data + 2;\n          aligned_length = aligned_length - 8;\n          xor_result_1 = *data ^ alignment;\n          xor_result_2 = data[1] ^ alignment;\n          mask_1 = -((char)xor_result_1 == '\\0');\n          mask_2 = -((char)(xor_result_1 >> 8) == '\\0');\n          mask_3 = -((char)(xor_result_1 >> 0x10) == '\\0');\n          mask_4 = -((char)(xor_result_1 >> 0x18) == '\\0');\n          xor_result_1 = CONCAT13(mask_4,CONCAT12(mask_3,CONCAT11(mask_2,mask_1)));\n          check_1 = (char)xor_result_2 != '\\0';\n          check_2 = (char)(xor_result_2 >> 8) != '\\0';\n          check_3 = (char)(xor_result_2 >> 0x10) != '\\0';\n          check_4 = (char)(xor_result_2 >> 0x18) != '\\0';\n          xor_result_2 = CONCAT13(check_4 * mask_4 - !check_4,\n                            CONCAT12(check_3 * mask_3 - !check_3,\n                                     CONCAT11(check_2 * mask_2 - !check_2,check_1 * mask_1 - !check_1)));\n          if (xor_result_2 != 0) {\n            if (xor_result_1 == 0) {\n              result = (byte *)((int)data + 5);\n              xor_result_1 = xor_result_2;\n            }\n            else {\n              result = (byte *)((int)data + 1);\n            }\n            if ((xor_result_1 & 1) == 0) {\n              check_1 = (xor_result_1 & 0x100) == 0;\n              next_byte = result + 1;\n              if (check_1) {\n                check_1 = (xor_result_1 & 0x18000) == 0;\n                next_byte = result + 2;\n              }\n              result = next_byte;\n              if (check_1) {\n                result = result + 1;\n              }\n            }\n            return result + -1;\n          }\n          data = data_ptr;\n        } while (aligned_length != 0);\n        length = length & 7;\n        goto joined_r0x00006070;\n      }\n      data_ptr = (uint *)((int)data + 1);\n      length = length - 1;\n      if (*(byte *)data == target_byte) break;\n      alignment = (uint)data_ptr & 7;\n      data = data_ptr;\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)data_ptr + -1);\n}\n\n",
            "renaming": {
                "FUN_00006010": "find_byte_sequence_00006010",
                "param_1": "data",
                "param_2": "target_byte",
                "param_3": "length",
                "bVar1": "current_byte",
                "cVar2": "mask_1",
                "cVar3": "mask_2",
                "cVar4": "mask_3",
                "cVar5": "mask_4",
                "pbVar6": "next_byte",
                "puVar7": "data_ptr",
                "pbVar8": "result",
                "uVar9": "alignment",
                "uVar10": "aligned_length",
                "uVar11": "xor_result_1",
                "uVar12": "xor_result_2",
                "bVar13": "check_1",
                "bVar14": "check_2",
                "bVar15": "check_3",
                "bVar16": "check_4"
            },
            "calling": [
                "FUN_000061cc",
                "FUN_000057f8",
                "FUN_00005b34",
                "FUN_0000656c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00006010": {
                    "1": "find_first_occurrence",
                    "2": "find_next_byte",
                    "16": "find_byte_sequence",
                    "5": "find_next_occurrence"
                },
                "param_1": {
                    "1": "array_ptr",
                    "19": "data",
                    "2": "array",
                    "4": "input_array",
                    "3": "buffer"
                },
                "param_2": {
                    "5": "target",
                    "2": "search_value",
                    "17": "target_byte",
                    "1": "pattern"
                },
                "param_3": {
                    "6": "array_length",
                    "2": "buffer_size",
                    "7": "data_length",
                    "1": "array_size",
                    "12": "length"
                },
                "bVar1": {
                    "1": "byte_found",
                    "29": "current_byte"
                },
                "cVar2": {
                    "2": "mask_1",
                    "1": "is_zero1"
                },
                "cVar3": {
                    "1": "byte1_check",
                    "2": "mask_2"
                },
                "cVar4": {
                    "1": "byte3",
                    "2": "mask_3"
                },
                "cVar5": {
                    "1": "byte3",
                    "2": "mask_4"
                },
                "pbVar6": {
                    "11": "next_byte",
                    "1": "result_pointer",
                    "3": "result_ptr",
                    "2": "current_address",
                    "4": "result"
                },
                "puVar7": {
                    "1": "ptr",
                    "2": "current_pointer",
                    "4": "current_ptr",
                    "5": "data_ptr"
                },
                "pbVar8": {
                    "1": "check_ptr",
                    "2": "result_pointer",
                    "5": "result_ptr",
                    "8": "result",
                    "3": "result_byte"
                },
                "uVar9": {
                    "1": "ptr_offset",
                    "3": "offset",
                    "2": "alignment_check",
                    "5": "alignment"
                },
                "uVar10": {
                    "1": "aligned_data_size",
                    "2": "aligned_data_length",
                    "8": "aligned_length",
                    "4": "length_aligned"
                },
                "uVar11": {
                    "1": "byte_xor",
                    "6": "xor_result_1",
                    "3": "xor1",
                    "2": "temp1"
                },
                "uVar12": {
                    "1": "result_2",
                    "2": "xored_byte_2",
                    "6": "xor_result_2",
                    "3": "xor2"
                },
                "bVar13": {
                    "1": "char1_found",
                    "2": "check_1"
                },
                "bVar14": {
                    "1": "bit8_temp",
                    "2": "check_2"
                },
                "bVar15": {
                    "1": "not_null_byte3",
                    "2": "check_3"
                },
                "bVar16": {
                    "1": "is_match_4",
                    "2": "check_4"
                },
                "uVar14": {
                    "1": "temp_byte"
                },
                "uVar15": {
                    "1": "temp_mask"
                }
            }
        },
        "FUN_000060b0": {
            "entrypoint": "0x000060b0",
            "current_name": "copy_array_000060b0",
            "code": "\nvoid copy_array_000060b0(int destination,undefined *source,int length)\n\n{\n  undefined *src_ptr;\n  undefined *end_ptr;\n  undefined *dest_ptr;\n  \n  end_ptr = source + length;\n  dest_ptr = (undefined *)(destination + -1);\n  if (source != end_ptr) {\n    do {\n      src_ptr = source + 1;\n      dest_ptr = dest_ptr + 1;\n      *dest_ptr = *source;\n      source = src_ptr;\n    } while (src_ptr != end_ptr);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000060b0": "copy_array_000060b0",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "src_ptr",
                "puVar2": "end_ptr",
                "puVar3": "dest_ptr"
            },
            "calling": [
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000060b0": {
                    "1": "copy_and_shift_forward",
                    "2": "copy_to_destination",
                    "4": "copy_data",
                    "18": "copy_array"
                },
                "param_1": {
                    "8": "destination",
                    "2": "dest_address",
                    "1": "dest_ptr",
                    "6": "dest_index",
                    "3": "dest_array"
                },
                "param_2": {
                    "1": "src_index",
                    "9": "source_array",
                    "4": "src_array",
                    "10": "source",
                    "2": "src_address"
                },
                "param_3": {
                    "2": "num_bytes",
                    "5": "array_length",
                    "3": "size",
                    "1": "source_array_size",
                    "15": "length"
                },
                "puVar1": {
                    "1": "source_array_ptr",
                    "8": "src_ptr",
                    "3": "source_index",
                    "6": "source_ptr",
                    "2": "source_pointer"
                },
                "puVar2": {
                    "1": "end_index",
                    "13": "end_ptr",
                    "2": "source_end_ptr",
                    "3": "end_pointer"
                },
                "puVar3": {
                    "2": "destination_ptr",
                    "1": "destination_pointer",
                    "3": "dst_ptr",
                    "12": "dest_ptr"
                }
            }
        },
        "FUN_000060cc": {
            "entrypoint": "0x000060cc",
            "current_name": "allocate_and_copy_memory_000060cc",
            "code": "\nint allocate_and_copy_memory_000060cc(undefined4 context,int source,uint size,undefined4 additional_param)\n\n{\n  int result;\n  uint usable_size;\n  \n  if (source != 0) {\n    if (size == 0) {\n      free_memory();\n      result = 0;\n    }\n    else {\n      usable_size = get_usable_size();\n      result = source;\n      if ((usable_size < size) && (result = allocate_memory(context,size), result != 0)) {\n        copy_memory(result,source,size);\n        free_memory(context,source);\n      }\n    }\n    return result;\n  }\n  result = allocate_memory(context,size,size,additional_param);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000060cc": "allocate_and_copy_memory_000060cc",
                "param_1": "context",
                "param_2": "source",
                "param_3": "size",
                "param_4": "additional_param",
                "iVar1": "result",
                "uVar2": "usable_size",
                "_free_r": "free_memory",
                "_malloc_usable_size_r": "get_usable_size",
                "_malloc_r": "allocate_memory",
                "memcpy": "copy_memory"
            },
            "calling": [
                "FUN_000068f0"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_00004b34",
                "FUN_000060b0",
                "FUN_00006964"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000060cc": {
                    "1": "resize_memory_block",
                    "2": "allocate_or_copy_data",
                    "10": "allocate_and_copy_memory",
                    "6": "allocate_or_copy_memory",
                    "3": "reallocate_memory",
                    "4": "allocate_memory"
                },
                "param_1": {
                    "1": "buffer",
                    "17": "context"
                },
                "param_2": {
                    "1": "old_ptr",
                    "2": "source_address",
                    "11": "source",
                    "4": "src"
                },
                "param_3": {
                    "7": "source_size",
                    "3": "new_size",
                    "18": "size"
                },
                "param_4": {
                    "3": "extra_param",
                    "1": "arg4",
                    "2": "unused",
                    "6": "additional_param"
                },
                "iVar1": {
                    "1": "destination_pointer",
                    "3": "destination",
                    "2": "new_memory_block",
                    "13": "result"
                },
                "uVar2": {
                    "1": "src_size",
                    "26": "usable_size"
                },
                "_free_r": {
                    "5": "free_memory",
                    "2": "release_memory",
                    "1": "free_memory_block"
                },
                "_malloc_usable_size_r": {
                    "1": "get_usable_size_of_allocated_block",
                    "8": "get_usable_size"
                },
                "_malloc_r": {
                    "1": "allocate_memory_block",
                    "6": "allocate_memory"
                },
                "memcpy": {
                    "1": "copy_mem",
                    "8": "copy_memory"
                },
                "FUN_00004bd0": {
                    "2": "calculate_usable_size"
                },
                "FUN_00004b34": {
                    "4": "free_memory"
                },
                "FUN_000060b0": {
                    "1": "memcpy_to_allocated_buffer",
                    "2": "copy_memory"
                },
                "FUN_00006964": {
                    "1": "free_memory_with_additional_param",
                    "2": "malloc_memory"
                }
            }
        },
        "FUN_00006192": {
            "entrypoint": "0x00006192",
            "current_name": "process_data_00006192",
            "code": "\nundefined4 process_data_00006192(undefined4 param1,undefined4 *data)\n\n{\n  if ((undefined4 *)data[13] != (undefined4 *)0x0) {\n    if ((undefined4 *)data[13] != data + 0x11) {\n      _release_memory;\n    }\n    data[1] = data[16];\n    data[13] = 0;\n    if (data[16] != 0) {\n      *data = data[15];\n      return 0;\n    }\n  }\n  *data = default_data;\n  data[1] = 0;\n  *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x20;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006192": "process_data_00006192",
                "param_1": "param1",
                "param_2": "data",
                "param_2[0xd]": "data[13]",
                "param_2[1]": "data[1]",
                "param_2[0x10]": "data[16]",
                "param_2[0xf]": "data[15]",
                "param_2[4]": "default_data",
                "free_r()": "release_memory"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00006192": {
                    "1": "reverse_and_cleanup",
                    "8": "process_data",
                    "5": "extract_data",
                    "3": "update_data",
                    "2": "update_parameters"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "input_value",
                    "6": "param1",
                    "3": "param"
                },
                "param_2": {
                    "8": "data",
                    "4": "arg2",
                    "1": "output",
                    "3": "param_array"
                },
                "param_2[0xd]": {
                    "1": "pointer_d",
                    "4": "data[13]",
                    "3": "temp_ptr",
                    "2": "data_array[13]"
                },
                "param_2[1]": {
                    "1": "result",
                    "2": "data_array[1]",
                    "4": "data[1]"
                },
                "param_2[0x10]": {
                    "1": "null_check_element",
                    "2": "value",
                    "4": "data[16]"
                },
                "param_2[0xf]": {
                    "1": "data_value_3",
                    "4": "data[15]"
                },
                "*param_2": {
                    "1": "arg2_deref",
                    "2": "data_array[0]",
                    "3": "result"
                },
                "param_2[4]": {
                    "1": "temp4",
                    "4": "default_data",
                    "2": "data_array[4]"
                },
                "*(ushort *)(param_2 + 3)": {
                    "3": "flags",
                    "1": "ushort_deref"
                },
                "return 0xffffffff": {
                    "1": "return_value"
                },
                "param_2[3]": {
                    "1": "param_flag"
                },
                "FUN_00004b34": {
                    "1": "process_sub_function"
                },
                "param_3": {
                    "1": "param_3"
                },
                "param_4": {
                    "1": "param_val2"
                },
                "param_2 + 0x11": {
                    "1": "pointer_offset",
                    "4": "end_ptr"
                },
                "ptr1": {
                    "1": "temp_ptr"
                },
                "ptr2": {
                    "1": "temp_ptr2"
                },
                "param_2 + 3": {
                    "1": "short_array_pointer"
                },
                "DAT_00002044": {
                    "1": "data_ptr"
                },
                "PTR_free_r": {
                    "1": "free_memory"
                },
                "(ushort *)(param_2 + 3)": {
                    "1": "ushort_ptr"
                },
                "PTR_0": {
                    "1": "nullptr"
                },
                "DAT_20": {
                    "1": "mask_20"
                },
                "free_r()": {
                    "1": "release_memory"
                },
                "0x20": {
                    "1": "bit_mask"
                }
            }
        },
        "FUN_000061cc": {
            "entrypoint": "0x000061cc",
            "current_name": "parse_format_string_000061cc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006482) */\n\nint parse_format_string_000061cc(undefined4 param1,byte **param2,byte *param3,int **param4)\n\n{\n  int result;\n  uint current_char;\n  byte *next_char;\n  uint temp;\n  int **output_list;\n  undefined buffer [256];\n  uint flags;\n  undefined4 base;\n  uint flag;\n  int return_value;\n  int counter;\n  undefined *stack_buffer;\n  int type;\n  undefined *function_pointer;\n  code *refill_function;\n  \n  return_value = 0;\n  counter = 0;\n  function_pointer = &LAB_00006118_1;\n  refill_function = __ssrefill_r + 1;\n  output_list = param4;\n  stack_buffer = buffer;\nLAB_000061f6:\n  while( true ) {\n    while( true ) {\n      temp = (uint)*param3;\n      if (temp == 0) {\n        return return_value;\n      }\n      current_char = (byte)(&DAT_00007a99)[temp] & 8;\n      next_char = param3 + 1;\n      if (((&DAT_00007a99)[temp] & 8) == 0) break;\n      while (((param3 = next_char, 0 < (int)param2[1] ||\n              (result = (*refill_function)(param1,param2), result == 0)) &&\n             ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0))) {\n        counter = counter + 1;\n        param2[1] = param2[1] + -1;\n        *param2 = *param2 + 1;\n      }\n    }\n    if (temp == 0x25) break;\nLAB_00006352:\n    if (((int)param2[1] < 1) && (result = (*refill_function)(param1,param2), result != 0))\n    goto LAB_00006380;\n    if (**param2 != temp) {\n      return return_value;\n    }\n    *param2 = *param2 + 1;\n    counter = counter + 1;\n    param2[1] = param2[1] + -1;\n    param3 = next_char;\n  }\n  flag = current_char;\n  flags = current_char;\n  if (param3[1] == 0x2a) {\n    next_char = param3 + 2;\n    flags = 0x10;\n  }\n  while( true ) {\n    current_char = (uint)*next_char;\n    if (9 < current_char - 0x30) break;\n    next_char = next_char + 1;\n    flag = (flag * 10 + current_char) - 0x30;\n  }\n  result = memchr(&DAT_00007c02,current_char,3);\n  if (result != 0) {\n    flags = 1 << (result - 0x7c02U & 0xff) | flags;\n    next_char = next_char + 1;\n  }\n  param3 = next_char + 1;\n  current_char = (uint)*next_char;\n  if (current_char < 0x79) {\n    if (0x57 < current_char) {\n      switch(current_char) {\n      default:\n        goto switchD_000062c0_caseD_59;\n      case 0x5b:\n        param3 = (byte *)__sccl(buffer,param3);\n        flags = flags | 0x40;\n        type = 1;\n        break;\n      case 99:\n        flags = flags | 0x40;\n        type = 0;\n        break;\n      case 100:\n      case 0x75:\n        base = 10;\nLAB_000063a0:\n        if (current_char < 0x6f) {\n          type = 3;\n        }\n        else {\n          type = 4;\n        }\n        break;\n      case 0x65:\n      case 0x66:\n      case 0x67:\nswitchD_000062c0_caseD_65:\n        type = 5;\n        break;\n      case 0x69:\n        base = 0;\n        type = 3;\n        break;\n      case 0x6e:\n        if (-1 < (int)(flags << 0x1b)) {\n          if ((int)(flags << 0x1f) < 0) {\n            *(short *)*output_list = (short)counter;\n            output_list = output_list + 1;\n          }\n          else {\n            **output_list = counter;\n            output_list = output_list + 1;\n          }\n        }\n        goto LAB_000061f6;\n      case 0x6f:\n        base = 8;\n        type = 4;\n        break;\n      case 0x70:\n        flags = flags | 0x20;\n      case 0x58:\n      case 0x78:\n        flags = flags | 0x200;\n        base = 0x10;\n        goto LAB_000063a0;\n      case 0x73:\n        type = 2;\n      }\nLAB_000063ac:\n      if (((int)param2[1] < 1) && (result = (*refill_function)(param1,param2), result != 0))\n      goto LAB_00006380;\n      if (-1 < (int)(flags << 0x19)) {\n        while ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0) {\n          counter = counter + 1;\n          next_char = param2[1];\n          param2[1] = next_char + -1;\n          if ((int)(next_char + -1) < 1) {\n            result = (*refill_function)(param1,param2);\n            if (result != 0) goto LAB_00006380;\n          }\n          else {\n            *param2 = *param2 + 1;\n          }\n        }\n      }\n      if (type < 3) {\n        result = _scanf_chars(param1,&flags,param2,&output_list);\n      }\n      else {\n        if (4 < type) goto LAB_000061f6;\n        result = _scanf_i(param1,&flags,param2,&output_list);\n      }\n      if (result == 1) {\n        return return_value;\n      }\n      if (result == 2) {\nLAB_00006380:\n        if (return_value == 0) {\nLAB_00006388:\n          return_value = -1;\n        }\n        else if ((*(ushort *)(param2 + 3) & 0x40) != 0) {\n          return_value = -1;\n        }\n        return return_value;\n      }\n      goto LAB_000061f6;\n    }\n    next_char = param3;\n    if (current_char == 0x25) goto LAB_00006352;\n    if (current_char < 0x26) {\n      if (current_char != 0) goto switchD_000062c0_caseD_59;\n      goto LAB_00006388;\n    }\n    if (current_char - 0x45 < 3) goto switchD_000062c0_caseD_65;\n  }\nswitchD_000062c0_caseD_59:\n  type = 3;\n  base = 10;\n  goto LAB_000063ac;\n}\n\n",
            "renaming": {
                "FUN_000061cc": "parse_format_string_000061cc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "current_char",
                "pbVar3": "next_char",
                "uVar4": "temp",
                "local_2b0": "output_list",
                "auStack_2ac": "buffer",
                "local_1ac": "flags",
                "local_1a8": "base",
                "local_1a4": "flag",
                "local_1a0": "return_value",
                "local_19c": "counter",
                "local_198": "stack_buffer",
                "local_194": "type",
                "local_30": "function_pointer",
                "local_2c": "refill_function"
            },
            "calling": [
                "FUN_00005e68"
            ],
            "called": [
                "FUN_00006192",
                "FUN_0000687c",
                "FUN_00006010",
                "FUN_000064bc",
                "FUN_0000656c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000061cc": {
                    "12": "parse_format_string",
                    "1": "parse_data",
                    "7": "parse_input",
                    "2": "parse_string"
                },
                "param_1": {
                    "1": "input_param",
                    "7": "arg1",
                    "14": "param1",
                    "2": "param"
                },
                "param_2": {
                    "14": "param2",
                    "1": "input_array",
                    "4": "format",
                    "2": "format_string",
                    "6": "arg2"
                },
                "param_3": {
                    "1": "input_data",
                    "2": "format_specifier",
                    "10": "param3",
                    "4": "arg3",
                    "6": "format_string"
                },
                "param_4": {
                    "1": "result",
                    "13": "param4",
                    "2": "args",
                    "4": "arg4"
                },
                "iVar1": {
                    "1": "temp_var1",
                    "4": "return_value",
                    "2": "index",
                    "20": "result"
                },
                "uVar2": {
                    "3": "ch",
                    "1": "var2",
                    "4": "char_value",
                    "2": "char_val",
                    "9": "current_char"
                },
                "pbVar3": {
                    "1": "current_byte",
                    "2": "ptr",
                    "15": "next_char"
                },
                "uVar4": {
                    "2": "lookup",
                    "1": "current_char",
                    "3": "temp"
                },
                "local_2b0": {
                    "1": "result_ptr_ptr",
                    "3": "output_list"
                },
                "auStack_2ac": {
                    "1": "str_buffer",
                    "2": "char_array",
                    "3": "buffer"
                },
                "local_1ac": {
                    "1": "bitmask1",
                    "2": "modifier",
                    "8": "flags",
                    "3": "modifiers"
                },
                "local_1a8": {
                    "1": "format_flag",
                    "2": "format",
                    "15": "base"
                },
                "local_1a4": {
                    "3": "flag",
                    "1": "curr_ch_flag",
                    "2": "temp_flag"
                },
                "local_1a0": {
                    "1": "total_characters",
                    "4": "result",
                    "5": "return_value",
                    "2": "num_successful_scans"
                },
                "local_19c": {
                    "1": "non_whitespace_characters",
                    "4": "count",
                    "3": "char_count",
                    "5": "counter",
                    "2": "count2"
                },
                "local_198": {
                    "1": "stack_ptr",
                    "2": "stack_array",
                    "3": "buffer_ptr",
                    "7": "stack_buffer"
                },
                "local_194": {
                    "1": "type_length",
                    "2": "format_specifier",
                    "6": "type",
                    "3": "format_type"
                },
                "local_30": {
                    "1": "scanf_success_func",
                    "2": "func_ptr",
                    "3": "function_ptr",
                    "5": "function_pointer"
                },
                "local_2c": {
                    "1": "refill_function_ptr",
                    "6": "refill_function",
                    "4": "refill_func"
                },
                "F_000061cc": {
                    "1": "parse_input"
                },
                "local_2ac": {
                    "1": "func_array"
                }
            }
        },
        "FUN_000064bc": {
            "entrypoint": "0x000064bc",
            "current_name": "process_data_000064bc",
            "code": "\nundefined4 process_data_000064bc(undefined4 input,uint *data,byte **buffer,undefined4 *output)\n\n{\n  int result;\n  uint temp;\n  byte **ptr_to_buffer;\n  byte *byte_ptr;\n  byte *current_byte;\n  byte *next_byte;\n  int counter;\n  \n  if (data[2] == 0) {\n    if (data[6] == 0) {\n      temp = 1;\n    }\n    else {\n      temp = 0xffffffff;\n    }\n    data[2] = temp;\n  }\n  if (-1 < (int)(*data << 0x1b)) {\n    ptr_to_buffer = (byte **)*output;\n    *output = ptr_to_buffer + 1;\n    current_byte = *ptr_to_buffer;\n  }\n  counter = 0;\n  do {\n    temp = data[6];\n    if (temp != 0) {\n      if (temp == 1) {\n        if (*(char *)(data[5] + (uint)**buffer) == '\\0') {\n          if (counter == 0) {\n            return 1;\n          }\nLAB_0000654a:\n          if (((*data & 0x10) == 0) && (data[3] = data[3] + 1, data[6] != 0)) {\n            *current_byte = 0;\n          }\n          data[4] = counter + data[4];\n          return 0;\n        }\n      }\n      else if ((temp != 2) || ((int)((uint)(byte)(&DAT_00007a99)[**buffer] << 0x1c) < 0))\n      goto LAB_0000654a;\n    }\n    next_byte = current_byte;\n    if (-1 < (int)(*data << 0x1b)) {\n      next_byte = current_byte + 1;\n      *current_byte = **buffer;\n    }\n    byte_ptr = buffer[1];\n    *buffer = *buffer + 1;\n    temp = data[2] - 1;\n    buffer[1] = byte_ptr + -1;\n    counter = counter + 1;\n    data[2] = temp;\n    current_byte = next_byte;\n    if ((temp == 0) ||\n       (((int)(byte_ptr + -1) < 1 &&\n        (result = (*(code *)data[0x60])(input,buffer,temp,(code *)data[0x60],output),\n        result != 0)))) goto LAB_0000654a;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000064bc": "process_data_000064bc",
                "param_1": "input",
                "param_2": "data",
                "param_3": "buffer",
                "param_4": "output",
                "iVar1": "result",
                "uVar2": "temp",
                "ppbVar3": "ptr_to_buffer",
                "pbVar4": "byte_ptr",
                "unaff_r6": "current_byte",
                "pbVar5": "next_byte",
                "iVar6": "counter"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000064bc": {
                    "1": "decode_data",
                    "26": "process_data"
                },
                "param_1": {
                    "8": "input_value",
                    "1": "input_data",
                    "2": "status",
                    "6": "input_param"
                },
                "param_2": {
                    "8": "data",
                    "4": "flags",
                    "1": "info",
                    "5": "params",
                    "2": "parameters"
                },
                "param_3": {
                    "3": "byte_array",
                    "4": "byte_array_ptr",
                    "1": "arg3",
                    "5": "data_ptr",
                    "9": "buffer"
                },
                "param_4": {
                    "1": "data_ptr_status",
                    "3": "status",
                    "4": "result",
                    "2": "counter",
                    "5": "output"
                },
                "iVar1": {
                    "4": "return_value",
                    "1": "result_value",
                    "3": "function_result",
                    "2": "status",
                    "21": "result"
                },
                "uVar2": {
                    "1": "temp_uint",
                    "4": "status",
                    "11": "temp"
                },
                "ppbVar3": {
                    "1": "byte_arr_ptr_ptr",
                    "2": "temp_ptr"
                },
                "pbVar4": {
                    "2": "byte_ptr_2",
                    "1": "next_buffer",
                    "5": "byte_ptr",
                    "4": "next_byte"
                },
                "unaff_r6": {
                    "2": "byte_ptr2",
                    "1": "ptr_var6",
                    "3": "current_byte_ptr",
                    "8": "current_byte"
                },
                "pbVar5": {
                    "1": "next_buffer",
                    "2": "current_byte_temp",
                    "3": "temp_byte",
                    "5": "next_byte"
                },
                "iVar6": {
                    "3": "loop_counter",
                    "8": "count",
                    "12": "counter",
                    "1": "iteration_counter",
                    "6": "iteration_count"
                },
                "<original_function_name>": {
                    "1": "decode_and_process_data"
                }
            }
        },
        "FUN_0000656c": {
            "entrypoint": "0x0000656c",
            "current_name": "process_data_0000656c",
            "code": "\nundefined4 process_data_0000656c(undefined4 input,uint *flags,byte **data,undefined4 *output)\n\n{\n  int index;\n  undefined4 result;\n  code *function_pointer;\n  uint temp_value;\n  byte *byte_ptr;\n  uint count;\n  undefined4 *output_ptr;\n  uint *temp_ptr;\n  uint *temp_ptr;\n  uint *temp_pointer3;\n  int temp_variable;\n  int counter;\n  undefined *lookup_table [4];\n  \n  string1 = &DAT_00007c2f;\n  string2 = &DAT_00007c32;\n  string3 = &DAT_00007c35;\n  function_pointer = (code *)&UNK_00004f81;\n  if (flags[6] != 3) {\n    function_pointer = (code *)&UNK_00005fd5;\n  }\n  count = flags[2];\n  temp_value = count - 1;\n  if (0x15c < temp_value) {\n    temp_variable = count - 0x15d;\n    count = 0x15d;\n  }\n  if (0x15c < temp_value) {\n    flags[2] = count;\n  }\n  temp_pointer3 = flags + 7;\n  if (temp_value < 0x15d) {\n    temp_variable = 0;\n  }\n  *flags = *flags | 0xd00;\n  counter = 0;\n  temp_ptr = temp_pointer3;\n  do {\n    index = memchr(lookup_table[counter],**data,2);\n    if (index != 0) {\n      if (counter == 1) {\n        if (flags[1] == 0) {\n          flags[1] = 8;\n          *flags = *flags | 0x200;\n        }\n        temp_value = *flags & 0xfffffaff;\nLAB_000065f4:\n        *flags = temp_value;\n      }\n      else if (counter == 2) {\n        if ((*flags & 0x600) != 0x200) goto LAB_00006624;\n        flags[1] = 0x10;\n        temp_value = *flags | 0x100;\n        goto LAB_000065f4;\n      }\n      temp_value = flags[2];\n      flags[2] = temp_value - 1;\n      if (temp_value != 0) {\n        byte_ptr = *data;\n        *data = byte_ptr + 1;\n        temp_ptr = (uint *)((int)temp_ptr + 1);\n        *(byte *)temp_ptr = *byte_ptr;\n        byte_ptr = data[1];\n        data[1] = byte_ptr + -1;\n        temp_ptr = temp_ptr;\n        if (((int)(byte_ptr + -1) < 1) &&\n           (index = (*(code *)flags[0x60])(input,data), index != 0)) {\n          counter = 0;\n          goto LAB_000066ca;\n        }\n      }\n    }\nLAB_00006624:\n    counter = counter + 1;\n  } while (counter != 3);\n  if (flags[1] == 0) {\n    flags[1] = 10;\n  }\n  __sccl(flags[5],\"01234567]\" + (8 - flags[1]));\n  counter = 0;\n  while( true ) {\n    temp_ptr = temp_ptr;\n    if (flags[2] == 0) break;\n    byte_ptr = *data;\n    temp_value = (uint)*byte_ptr;\n    if (*(char *)(flags[5] + temp_value) == '\\0') break;\n    if ((temp_value == 0x30) && ((int)(*flags << 0x14) < 0)) {\n      counter = counter + 1;\n      if (temp_variable != 0) {\n        temp_variable = temp_variable + -1;\n        flags[2] = flags[2] + 1;\n      }\n    }\n    else {\n      *flags = *flags & 0xfffff6ff;\n      temp_ptr = (uint *)((int)temp_ptr + 1);\n      *(byte *)temp_ptr = *byte_ptr;\n    }\n    byte_ptr = data[1];\n    data[1] = byte_ptr + -1;\n    if ((int)(byte_ptr + -1) < 1) {\n      index = (*(code *)flags[0x60])(input,data);\n      if (index != 0) break;\n    }\n    else {\n      *data = *data + 1;\n    }\n    flags[2] = flags[2] - 1;\n    temp_ptr = temp_ptr;\n  }\nLAB_000066ca:\n  if ((int)(*flags << 0x17) < 0) {\n    if (temp_pointer3 < temp_ptr) {\n      (*(code *)flags[0x5f])(input,*(byte *)((int)temp_ptr + -1),data);\n      temp_ptr = (uint *)((int)temp_ptr + -1);\n    }\n    if (temp_ptr == temp_pointer3) {\n      return 1;\n    }\n  }\n  if ((*flags & 0x10) == 0) {\n    *(byte *)temp_ptr = 0;\n    result = (*function_pointer)(input,temp_pointer3,0,flags[1]);\n    output_ptr = (undefined4 *)*output;\n    temp_value = *flags;\n    *output = output_ptr + 1;\n    output_ptr = (undefined4 *)*output_ptr;\n    if ((temp_value & 0x20) == 0) {\n      if ((int)(temp_value << 0x1f) < 0) {\n        *(short *)output_ptr = (short)result;\n      }\n      else {\n        *output_ptr = result;\n      }\n    }\n    else {\n      *output_ptr = result;\n    }\n    flags[3] = flags[3] + 1;\n  }\n  flags[4] = (uint)((int)temp_ptr + flags[4] + (counter - (int)temp_pointer3));\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000656c": "process_data_0000656c",
                "param_1": "input",
                "param_2": "flags",
                "param_3": "data",
                "param_4": "output",
                "iVar1": "index",
                "uVar2": "result",
                "pcVar3": "function_pointer",
                "uVar4": "temp_value",
                "pbVar5": "byte_ptr",
                "uVar6": "count",
                "puVar7": "output_ptr",
                "puVar8": "temp_ptr",
                "puVar9": "temp_ptr",
                "puVar10": "temp_pointer3",
                "unaff_r9": "temp_variable",
                "iVar11": "counter",
                "local_34": "lookup_table",
                "local_34[0]": "string1",
                "local_34[1]": "string2",
                "local_34[2]": "string3"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_0000687c",
                "FUN_00006010"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000656c": {
                    "1": "extract_and_process_data",
                    "10": "process_data",
                    "2": "parse_data"
                },
                "param_1": {
                    "11": "input",
                    "10": "input_value",
                    "1": "arg1",
                    "2": "param1",
                    "3": "input_param"
                },
                "param_2": {
                    "1": "arg2",
                    "4": "data",
                    "2": "parameters",
                    "3": "input_array",
                    "8": "flags"
                },
                "param_3": {
                    "7": "data",
                    "1": "input_pointer",
                    "2": "bytes",
                    "6": "byte_array",
                    "3": "buffer"
                },
                "param_4": {
                    "4": "output_value",
                    "1": "result_array",
                    "2": "output_params",
                    "3": "output_param",
                    "11": "output"
                },
                "iVar1": {
                    "9": "result",
                    "2": "temp_var",
                    "1": "temp_var1",
                    "12": "index",
                    "4": "search_result"
                },
                "uVar2": {
                    "1": "decoded_data",
                    "2": "temp",
                    "3": "value",
                    "5": "updated_value",
                    "12": "result"
                },
                "pcVar3": {
                    "1": "some_code",
                    "2": "conversion_function",
                    "7": "function_pointer"
                },
                "uVar4": {
                    "1": "temp_val",
                    "13": "temp_value",
                    "2": "count",
                    "5": "value"
                },
                "pbVar5": {
                    "9": "byte_ptr",
                    "1": "byte_val",
                    "5": "temp_byte",
                    "4": "byte_value"
                },
                "uVar6": {
                    "1": "value_2",
                    "3": "count",
                    "2": "length"
                },
                "puVar7": {
                    "7": "output_ptr",
                    "2": "output_array_ptr",
                    "1": "temp_pointer",
                    "4": "output_pointer",
                    "3": "result_pointer"
                },
                "puVar8": {
                    "1": "temp_var8",
                    "2": "data_pointer",
                    "6": "temp_ptr",
                    "4": "temp_pointer"
                },
                "puVar9": {
                    "1": "temp_array_pointer_2",
                    "2": "current_pointer",
                    "3": "temp_pointer",
                    "4": "temp_ptr"
                },
                "puVar10": {
                    "2": "temp_ptr2",
                    "1": "data_array_ptr"
                },
                "unaff_r9": {
                    "1": "offset",
                    "2": "limit",
                    "3": "temp_variable"
                },
                "iVar11": {
                    "5": "loop_counter",
                    "1": "temp_index2",
                    "2": "i",
                    "11": "counter",
                    "3": "index"
                },
                "local_34": {
                    "3": "strings",
                    "2": "char_array",
                    "1": "search_array"
                },
                "local_34[0]": {
                    "1": "byte_array1"
                },
                "local_34[1]": {
                    "1": "pattern2"
                },
                "local_34[2]": {
                    "1": "pattern3"
                },
                "undefined4 param_1": {
                    "1": "input"
                },
                "uint *param_2": {
                    "1": "flags"
                },
                "byte **param_3": {
                    "1": "data"
                },
                "undefined4 *param_4": {
                    "1": "output"
                },
                "int iVar1": {
                    "1": "index"
                },
                "undefined4 uVar2": {
                    "1": "return_value"
                },
                "code *pcVar3": {
                    "1": "callback"
                },
                "uint uVar4": {
                    "1": "count"
                },
                "byte *pbVar5": {
                    "1": "current_byte"
                },
                "uint uVar6": {
                    "1": "tmp_count"
                },
                "undefined4 *puVar7": {
                    "1": "output_ptr"
                },
                "uint *puVar8": {
                    "1": "ptr1"
                },
                "uint *puVar9": {
                    "1": "ptr2"
                },
                "uint *puVar10": {
                    "1": "ptr3"
                },
                "int unaff_r9": {
                    "1": "unaffected"
                },
                "int iVar11": {
                    "1": "index2"
                },
                "undefined *local_34 [4]": {
                    "1": "local_array"
                }
            }
        },
        "FUN_00006768": {
            "entrypoint": "0x00006768",
            "current_name": "process_data_00006768",
            "code": "\nundefined4\nprocess_data_00006768(undefined4 *output_buffer,undefined4 *input_buffer,undefined4 param3,undefined4 param_4)\n\n{\n  undefined2 var1;\n  int var2;\n  undefined4 var3;\n  ushort var4;\n  uint var5;\n  \n  if ((output_buffer != (undefined4 *)0x0) && (output_buffer[6] == 0)) {\n    initialize();\n  }\n  if (input_buffer == &DAT_000079b8) {\n    input_buffer = (undefined4 *)output_buffer[1];\n  }\n  else if (input_buffer == (undefined4 *)&DAT_000079d8) {\n    input_buffer = (undefined4 *)output_buffer[2];\n  }\n  else if (input_buffer == (undefined4 *)&DAT_00007998) {\n    input_buffer = (undefined4 *)output_buffer[3];\n  }\n  var4 = *(ushort *)(input_buffer + 3);\n  input_buffer[1] = 0;\n  var5 = (uint)*(ushort *)(input_buffer + 3);\n  if ((int)(var5 << 0x1a) < 0) {\n    return 0xffffffff;\n  }\n  if ((int)(var5 << 0x1d) < 0) {\n    if ((undefined4 *)file[0xd] != (undefined4 *)0x0) {\n      if ((undefined4 *)file[0xd] != input_buffer + 0x11) {\n        free_memory(output_buffer);\n      }\n      input_buffer[1] = file[0x10];\n      file[0xd] = 0;\n      if (file[0x10] != 0) {\n        *input_buffer = file[0xf];\n        return 0;\n      }\n    }\n  }\n  else {\n    if (-1 < (int)(var5 << 0x1b)) {\n      *output_buffer = 9;\n      var4 = var4 | 0x40;\n      goto LAB_000067b8;\n    }\n    if ((int)(var5 << 0x1c) < 0) {\n      var2 = flush_memory(output_buffer,input_buffer,var5 << 0x1c,var5,param_4);\n      if (var2 != 0) {\n        return 0xffffffff;\n      }\n      value2 = 0;\n      *(ushort *)(input_buffer + 3) = *(ushort *)(input_buffer + 3) & 0xfff7;\n      value4 = 0;\n    }\n    *(ushort *)(input_buffer + 3) = *(ushort *)(input_buffer + 3) | 4;\n  }\n  if (file[4] == 0) {\n    create_buffer(output_buffer,input_buffer);\n  }\n  var4 = *(ushort *)(input_buffer + 3);\n  var1 = *(undefined2 *)(input_buffer + 3);\n  if ((var4 & 3) != 0) {\n    *(undefined2 *)(input_buffer + 3) = 1;\n    walk(0x1fff0284,&label);\n    *(undefined2 *)(input_buffer + 3) = var1;\n    if ((var4 & 9) == 9) {\n      flush_stream(output_buffer,input_buffer);\n    }\n  }\n  var3 = file[4];\n  *input_buffer = var3;\n  var2 = (*(function_ptr *)function_ptr2)(output_buffer,file[8],var3,file[5]);\n  input_buffer[1] = var2;\n  if (0 < var2) {\n    return 0;\n  }\n  var4 = *(ushort *)(input_buffer + 3);\n  if (var2 != 0) {\n    var3 = 0;\n  }\n  else {\n    var4 = var4 | 0x20;\n  }\n  if (var2 != 0) {\n    input_buffer[1] = var3;\n    var4 = var4 | 0x40;\n  }\nLAB_000067b8:\n  *(ushort *)(input_buffer + 3) = var4;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "param_1": "output_buffer",
                "param_2": "input_buffer",
                "param_3": "param3",
                "uVar1": "var1",
                "iVar2": "var2",
                "uVar3": "var3",
                "uVar4": "var4",
                "uVar5": "var5",
                "FUN_00006768": "process_data_00006768",
                "__sinit": "initialize",
                "_free_r": "free_memory",
                "param_2[0xd]": "file[0xd]",
                "param_2[0x10]": "file[0x10]",
                "param_2[0xf]": "file[0xf]",
                "__smakebuf_r": "create_buffer",
                "_fwalk": "walk",
                "__sflush_r": "flush_stream",
                "param_2[4]": "file[4]",
                "param_2[8]": "file[8]",
                "param_2[5]": "file[5]",
                "walk": "walk_file",
                "code": "function_ptr",
                "_fflush_r": "flush_memory",
                "_smakebuf_r": "make_buffer",
                "fwalk": "walk",
                "_sflush_r": "flush_stream",
                "param_2[2]": "value2",
                "param_2[6]": "value4",
                "param_2[9]": "function_ptr2",
                "LAB_00006754_1": "label"
            },
            "calling": [
                "FUN_00005e10"
            ],
            "called": [
                "FUN_00004158",
                "FUN_000043a0",
                "FUN_00005700",
                "FUN_00004b34",
                "FUN_0000404c",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "2": "output",
                    "1": "input_pointer",
                    "4": "input_array",
                    "6": "output_buffer"
                },
                "param_2": {
                    "6": "input_buffer",
                    "4": "stream",
                    "2": "file",
                    "1": "arg2"
                },
                "param_3": {
                    "1": "size_data",
                    "8": "param3",
                    "4": "value1",
                    "2": "arg3",
                    "7": "param_3"
                },
                "param_4": {
                    "1": "arg2",
                    "8": "param_4",
                    "2": "arg4",
                    "4": "value2"
                },
                "uVar1": {
                    "2": "status",
                    "1": "flags",
                    "7": "var1",
                    "6": "temp1",
                    "5": "temp_var1"
                },
                "iVar2": {
                    "1": "temp_variable2",
                    "5": "temp2",
                    "6": "result",
                    "7": "var2"
                },
                "uVar3": {
                    "7": "var3",
                    "5": "temp3",
                    "1": "result_var",
                    "2": "tmp"
                },
                "uVar4": {
                    "3": "temp4",
                    "1": "flag2",
                    "7": "var4",
                    "6": "flags",
                    "4": "temp_var4"
                },
                "uVar5": {
                    "3": "temp5",
                    "1": "uint_var",
                    "4": "temp_var5",
                    "2": "value",
                    "7": "var5"
                },
                "FUN_00006768": {
                    "1": "execute_operation",
                    "6": "process_data",
                    "2": "stream_io"
                },
                "__sinit": {
                    "3": "initialize",
                    "1": "initialize_stream"
                },
                "&DAT_000079b8": {
                    "1": "stream_ptr1"
                },
                "&DAT_000079d8": {
                    "1": "data2"
                },
                "&DAT_00007998": {
                    "1": "data_3"
                },
                "_free_r": {
                    "4": "free_memory",
                    "1": "deallocate"
                },
                "param_2[0xd]": {
                    "1": "ptr_d"
                },
                "param_2[0x10]": {
                    "1": "file[0x10]"
                },
                "*param_2": {
                    "1": "file[0]"
                },
                "param_2[0xf]": {
                    "1": "file[0xf]"
                },
                "__smakebuf_r": {
                    "2": "create_buffer",
                    "1": "make_buffer"
                },
                "_fwalk": {
                    "1": "walk"
                },
                "__sflush_r": {
                    "2": "flush_stream"
                },
                "(*param_2[9])": {
                    "1": "callback"
                },
                "param_2[4]": {
                    "1": "file[4]"
                },
                "param_2[8]": {
                    "1": "arg3"
                },
                "param_2[5]": {
                    "1": "file[5]"
                },
                "streamIO": {
                    "1": "improved_stream_io"
                },
                "initializeStream": {
                    "1": "init_stream"
                },
                "freeMemory": {
                    "1": "release_memory"
                },
                "makeBuffer": {
                    "1": "create_buffer"
                },
                "walk": {
                    "1": "walk_file"
                },
                "flushStream": {
                    "1": "flush_stream_data"
                },
                "callback": {
                    "1": "stream_callback"
                },
                "FUN_00004158": {
                    "1": "sub_function1"
                },
                "FUN_000043a0": {
                    "1": "sub_function2"
                },
                "FUN_00005700": {
                    "1": "sub_function3"
                },
                "FUN_00004b34": {
                    "1": "sub_function4"
                },
                "FUN_0000404c": {
                    "1": "sub_function5"
                },
                "FUN_000042a4": {
                    "1": "sub_function6"
                },
                "code": {
                    "2": "function_ptr",
                    "1": "function_pointer"
                },
                "*(code *)param_2[9]": {
                    "1": "function_call"
                },
                "_fflush_r": {
                    "1": "flush_memory"
                },
                "_smakebuf_r": {
                    "2": "make_buffer"
                },
                "(code *)param_2[9]": {
                    "1": "callback_function"
                },
                "F_00004158": {
                    "1": "function1"
                },
                "F_000043a0": {
                    "1": "function2"
                },
                "F_00005700": {
                    "1": "function3"
                },
                "F_00004b34": {
                    "1": "function4"
                },
                "F_0000404c": {
                    "1": "function5"
                },
                "F_000042a4": {
                    "1": "function6"
                },
                "fwalk": {
                    "1": "walk"
                },
                "_sflush_r": {
                    "1": "flush_stream"
                },
                "param_2[2]": {
                    "1": "value2"
                },
                "param_2[3]": {
                    "1": "value3"
                },
                "param_2[6]": {
                    "1": "value4"
                },
                "param_2[9]": {
                    "1": "function_ptr2"
                },
                "0x1fff0284": {
                    "1": "constant1"
                },
                "LAB_00006754_1": {
                    "1": "label"
                },
                "0xffffffff": {
                    "1": "error"
                }
            }
        },
        "FUN_0000687c": {
            "entrypoint": "0x0000687c",
            "current_name": "extract_byte_sequence_0000687c",
            "code": "\nbyte * extract_byte_sequence_0000687c(int length,byte *data)\n\n{\n  byte *result;\n  uint temp1;\n  int index;\n  uint current_byte;\n  uint start_index;\n  uint end_index;\n  bool is_carrot;\n  \n  current_byte = (uint)*data;\n  is_carrot = current_byte == 0x5e;\n  if (is_carrot) {\n    current_byte = (uint)data[1];\n    data = data + 2;\n  }\n  else {\n    data = data + 1;\n  }\n  index = length + -1;\n  do {\n    index = index + 1;\n    *(bool *)index = is_carrot;\n  } while (index != length + 0xff);\n  if (current_byte == 0) {\n    result = data + -1;\n  }\n  else {\nloop_start:\n    do {\n      start_index = current_byte;\n      *(bool *)(length + start_index) = !is_carrot;\n      data = data + 1;\n      while( true ) {\n        current_byte = (uint)data[-1];\n        if (current_byte != 0x2d) break;\n        end_index = (uint)*data;\n        if ((end_index == 0x5d) || (temp1 = start_index, (int)end_index < (int)start_index)) goto loop_start;\n        do {\n          temp1 = temp1 + 1;\n          *(bool *)(length + temp1) = !is_carrot;\n        } while ((int)temp1 < (int)end_index);\n        index = ~start_index + end_index;\n        if ((int)end_index <= (int)start_index) {\n          index = 0;\n        }\n        start_index = start_index + 1 + index;\n        data = data + 2;\n      }\n      result = data;\n    } while ((current_byte != 0x5d) && (result = data + -1, current_byte != 0));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0000687c": "extract_byte_sequence_0000687c",
                "param_1": "length",
                "param_2": "data",
                "pbVar1": "result",
                "uVar2": "temp1",
                "iVar3": "index",
                "uVar4": "current_byte",
                "uVar5": "start_index",
                "uVar6": "end_index",
                "bVar7": "is_carrot",
                "LAB_000068aa": "loop_start"
            },
            "calling": [
                "FUN_000061cc",
                "FUN_0000656c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0000687c": {
                    "1": "process_bytes",
                    "2": "decode_data"
                },
                "param_1": {
                    "1": "chunk_size",
                    "3": "array_length",
                    "4": "data_length",
                    "5": "size",
                    "2": "pattern_length",
                    "6": "length"
                },
                "param_2": {
                    "3": "byte_sequence",
                    "13": "data",
                    "1": "pattern",
                    "2": "byte_array"
                },
                "pbVar1": {
                    "1": "result_pointer",
                    "2": "output",
                    "23": "result"
                },
                "uVar2": {
                    "6": "temp1",
                    "3": "temp",
                    "2": "current_value",
                    "5": "next_char",
                    "1": "upper_bound"
                },
                "iVar3": {
                    "2": "current_index",
                    "4": "counter",
                    "17": "index"
                },
                "uVar4": {
                    "1": "byte_val",
                    "4": "current_char",
                    "13": "current_byte",
                    "2": "first_byte"
                },
                "uVar5": {
                    "1": "end_value",
                    "2": "end_index",
                    "9": "start_index",
                    "4": "start"
                },
                "uVar6": {
                    "1": "end_value",
                    "2": "temp4",
                    "10": "end_index",
                    "4": "end"
                },
                "bVar7": {
                    "1": "is_inverted",
                    "4": "is_reversed",
                    "3": "is_match",
                    "2": "is_range"
                },
                "LAB_000068aa": {
                    "1": "loop_start"
                }
            }
        },
        "FUN_000068f0": {
            "entrypoint": "0x000068f0",
            "current_name": "resize_buffer_000068f0",
            "code": "\nundefined4 resize_buffer_000068f0(undefined4 param,int *buffer)\n\n{\n  int new_buffer;\n  int current_size;\n  \n  if ((int *)buffer_size == buffer + 0x11) {\n    new_buffer = allocate_memory(param,0x400);\n    if (new_buffer != 0) {\n      current_buffer_size = 0x400;\n      buffer_size = new_buffer;\n      *(undefined *)(new_buffer + 0x3ff) = *(undefined *)((int)buffer + 0x46);\n      *(undefined *)(new_buffer + 0x3fe) = *(undefined *)((int)buffer + 0x45);\n      *(undefined *)(new_buffer + 0x3fd) = *(undefined *)(buffer + 0x11);\n      *buffer = new_buffer + 0x3fd;\n      return 0;\n    }\n  }\n  else {\n    current_size = current_buffer_size;\n    new_buffer = reallocate_memory(param,(int *)buffer_size,current_size << 1);\n    if (new_buffer != 0) {\n      copy_memory(new_buffer + current_size,new_buffer,current_size);\n      buffer_size = new_buffer;\n      current_buffer_size = current_size << 1;\n      *buffer = new_buffer + current_size;\n      return 0;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000068f0": "resize_buffer_000068f0",
                "param_1": "param",
                "param_2": "buffer",
                "iVar1": "new_buffer",
                "iVar2": "current_size",
                "_malloc_r": "allocate_memory",
                "_realloc_r": "reallocate_memory",
                "memcpy": "copy_memory",
                "param_2[0xd]": "buffer_size",
                "param_2[0xe]": "current_buffer_size"
            },
            "calling": [],
            "called": [
                "FUN_00004bd0",
                "FUN_000060b0",
                "FUN_000060cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_000068f0": {
                    "1": "resize_array",
                    "4": "resize_buffer",
                    "2": "resize_memory_block",
                    "3": "allocate_memory"
                },
                "param_1": {
                    "1": "length",
                    "2": "param1",
                    "3": "memory_pool",
                    "4": "context",
                    "5": "param"
                },
                "param_2": {
                    "1": "buffer_info",
                    "2": "memory_data",
                    "3": "array",
                    "5": "memory_block",
                    "8": "buffer"
                },
                "iVar1": {
                    "3": "allocated_memory",
                    "1": "new_data",
                    "2": "new_block",
                    "9": "new_buffer",
                    "5": "new_memory"
                },
                "iVar2": {
                    "1": "previous_size",
                    "3": "current_memory_size",
                    "5": "old_buffer_size",
                    "2": "current_buffer_size",
                    "12": "current_size",
                    "4": "old_size"
                },
                "FUN_00004bd0": {
                    "1": "copy_buffer",
                    "2": "reverse_bytes",
                    "4": "copy_data"
                },
                "FUNK_000060b0": {
                    "1": "copy_data_within_buffer"
                },
                "FUN_000060cc": {
                    "1": "copy_data_from_buffer",
                    "2": "realloc_memory"
                },
                "param_3": {
                    "1": "block_size"
                },
                "FUN_000060b0": {
                    "1": "copy_to_memory",
                    "2": "copy_bytes"
                },
                "param_4": {
                    "1": "param"
                },
                "_malloc_r": {
                    "5": "allocate_memory",
                    "1": "allocate_memory_r"
                },
                "_realloc_r": {
                    "1": "reallocate_memory_r",
                    "2": "resize_memory",
                    "3": "reallocate_memory"
                },
                "memcpy": {
                    "1": "copy_data",
                    "4": "copy_memory"
                },
                "param_2[0xd]": {
                    "1": "array[13]"
                },
                "param_2 + 0x11": {
                    "1": "end_of_buffer"
                },
                "param_2[0xe]": {
                    "2": "current_buffer_size",
                    "1": "memory_data[14]"
                },
                "(int *)param_2[0xd]": {
                    "1": "pointer_to_buffer_size"
                },
                "*(undefined *)(iVar1 + 0x3ff)": {
                    "1": "new_data_1"
                },
                "*(undefined *)(iVar1 + 0x3fe)": {
                    "1": "new_data_2"
                },
                "*(undefined *)(iVar1 + 0x3fd)": {
                    "1": "new_data_3"
                },
                "*(undefined *)((int)param_2 + 0x46)": {
                    "1": "byte1"
                },
                "*(undefined *)((int)param_2 + 0x45)": {
                    "1": "buffer_data_2"
                },
                "*(undefined *)(param_2 + 0x11)": {
                    "1": "byte3"
                },
                "*param_2": {
                    "1": "new_end_of_buffer"
                },
                "iVar2 << 1": {
                    "1": "new_buffer_size"
                },
                "iVar1 + iVar2": {
                    "1": "destination"
                },
                "0xffffffff": {
                    "2": "error_value",
                    "1": "allocation_failure"
                },
                "param_2[0x11]": {
                    "1": "memory_data[17]"
                },
                "_memcpy": {
                    "1": "copy_memory"
                },
                "(int)param_2 + 0x46": {
                    "1": "value_at_buffer_offset_0x46"
                },
                "(int)param_2 + 0x45": {
                    "1": "value_at_buffer_offset_0x45"
                },
                "0x400": {
                    "1": "new_buffer_size"
                },
                "iVar1 + 0x3ff": {
                    "1": "new_buffer_end"
                },
                "iVar1 + 0x3fe": {
                    "1": "new_buffer_offset_0x3fe"
                },
                "iVar1 + 0x3fd": {
                    "1": "new_buffer_offset_0x3fd"
                }
            }
        },
        "FUN_00006964": {
            "entrypoint": "0x00006964",
            "current_name": "calculate_sum_00006964",
            "code": "\nint calculate_sum_00006964(undefined4 result,int array)\n\n{\n  int sum;\n  \n  sum = *(int *)(array + -4) + -4;\n  if (*(int *)(array + -4) < 0) {\n    sum = sum + *(int *)(array + sum);\n  }\n  return sum;\n}\n\n",
            "renaming": {
                "FUN_00006964": "calculate_sum_00006964",
                "param_1": "result",
                "param_2": "array",
                "iVar1": "sum"
            },
            "calling": [
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00006964": {
                    "18": "calculate_sum",
                    "1": "calculate_sum_with_condition",
                    "3": "calculate_result",
                    "2": "calculate_updated_value"
                },
                "param_1": {
                    "5": "param",
                    "1": "input1",
                    "3": "param1",
                    "8": "result"
                },
                "param_2": {
                    "2": "offset",
                    "3": "param2",
                    "11": "array",
                    "1": "data_offset"
                },
                "iVar1": {
                    "1": "updated_sum",
                    "2": "current_index",
                    "11": "sum",
                    "8": "result"
                },
                "*(int *)(param_2 + -4)": {
                    "2": "array_length"
                },
                "iVar1 + *(int *)(param_2 + iVar1)": {
                    "1": "sum_with_offset"
                },
                "*(int *)(param_2 + iVar1)": {
                    "1": "element"
                }
            }
        },
        "FUN_00006974": {
            "entrypoint": "0x00006974",
            "current_name": "divide_and_conquer_00006974",
            "code": "\nundefined8 divide_and_conquer_00006974(int dividend,int divisor,int remainder,int modulus)\n\n{\n  int adjusted_divisor;\n  undefined8 result;\n  undefined remainder [8];\n  \n  if ((modulus == 0) && (remainder == 0)) {\n    if (divisor < 0) {\n      dividend = 0;\n      divisor = -0x80000000;\n    }\n    else if (divisor != 0 || dividend != 0) {\n      divisor = 0x7fffffff;\n      dividend = -1;\n    }\n    return combine_integers(divisor,dividend);\n  }\n  if (divisor < 0) {\n    adjusted_divisor = -divisor - (uint)(dividend != 0);\n    if (modulus < 0) {\n      result = divide_and_modulo(-dividend,adjusted_divisor,-remainder,-modulus - (uint)(remainder != 0),remainder);\n      return result;\n    }\n    result = divide_and_modulo(-dividend,adjusted_divisor,remainder,modulus,remainder);\n    return combine_integers(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  if (modulus < 0) {\n    result = divide_and_modulo(dividend,divisor,-remainder,-modulus - (uint)(remainder != 0),remainder);\n    return combine_integers(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  result = divide_and_modulo();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00006974": "divide_and_conquer_00006974",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "remainder",
                "param_4": "modulus",
                "iVar1": "adjusted_divisor",
                "uVar2": "result",
                "local_8": "remainder",
                "__udivmoddi4": "divide_and_modulo",
                "CONCAT44": "combine_integers"
            },
            "calling": [
                "FUN_0000443c"
            ],
            "called": [
                "FUN_00006a14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00006974": {
                    "1": "divide_signed_numbers",
                    "6": "divide_and_conquer",
                    "2": "calculate_bounds",
                    "4": "divmod"
                },
                "param_1": {
                    "1": "input1",
                    "21": "dividend",
                    "2": "dividend1"
                },
                "param_2": {
                    "1": "numerator_lower_bits",
                    "2": "dividend2",
                    "19": "divisor"
                },
                "param_3": {
                    "1": "denominator_upper_bits",
                    "2": "divisor1",
                    "5": "remainder"
                },
                "param_4": {
                    "1": "remainder_part",
                    "3": "modulus",
                    "2": "rem_low"
                },
                "iVar1": {
                    "2": "abs_divisor",
                    "1": "temp_int1",
                    "4": "adjusted_divisor"
                },
                "uVar2": {
                    "2": "quotient_remainder",
                    "1": "quot_rem",
                    "16": "result",
                    "7": "quotient"
                },
                "local_8": {
                    "2": "result",
                    "1": "temporary_buffer",
                    "5": "temp_array",
                    "9": "remainder"
                },
                "__udivmoddi4": {
                    "1": "divide_and_modulo"
                },
                "CONCAT44": {
                    "1": "combine_integers"
                }
            }
        },
        "FUN_00006a14": {
            "entrypoint": "0x00006a14",
            "current_name": "divide_and_remainder_00006a14",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006ca0) */\n\nulonglong divide_and_remainder_00006a14(uint dividend,uint dividend_high,uint divisor,uint remainder,uint *remainder)\n\n{\n  code *jump_table;\n  uint quotient;\n  int shift_amount;\n  uint temp1;\n  uint temp2;\n  uint quotient;\n  uint temp4;\n  uint u_var7;\n  uint u_var8;\n  uint u_var9;\n  bool carry_flag;\n  ulonglong result;\n  \n  if (remainder == 0) {\n    if (dividend_high < divisor) {\n      shift_amount = leading_zero_bit_count(divisor);\n      quotient = divisor;\n      if (shift_amount != 0) {\n        quotient = divisor << shift_amount;\n        dividend_high = dividend >> (0x20U - shift_amount & 0xff) | dividend_high << shift_amount;\n        dividend = dividend << shift_amount;\n      }\n      temp4 = quotient >> 0x10;\n      u_var8 = dividend_high / temp4;\n      temp1 = dividend >> 0x10 | (dividend_high - temp4 * u_var8) * 0x10000;\n      quotient = u_var8 * (quotient & 0xffff);\n      temp2 = u_var8;\n      if (temp1 <= quotient && quotient - temp1 != 0) {\n        carry_flag = carry_4_bit_operation(quotient,temp1);\n        temp1 = quotient + temp1;\n        temp2 = u_var8 - 1;\n        if ((carry_flag == false) && (temp1 <= quotient && quotient - temp1 != 0)) {\n          temp2 = u_var8 - 2;\n          temp1 = temp1 + quotient;\n        }\n      }\n      u_var8 = (temp1 - quotient) / temp4;\n      temp4 = dividend & 0xffff | ((temp1 - quotient) - temp4 * u_var8) * 0x10000;\n      temp1 = u_var8 * (quotient & 0xffff);\n      quotient = u_var8;\n      if (temp4 <= temp1 && temp1 - temp4 != 0) {\n        carry_flag = carry_4_bit_operation(quotient,temp4);\n        temp4 = quotient + temp4;\n        quotient = u_var8 - 1;\n        if ((carry_flag == false) && (temp4 <= temp1 && temp1 - temp4 != 0)) {\n          quotient = u_var8 - 2;\n          temp4 = temp4 + quotient;\n        }\n      }\n      temp4 = temp4 - temp1;\n      quotient = quotient | temp2 << 0x10;\n      quotient = 0;\n    }\n    else {\n      if (divisor == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        jump_table = (code *)software_undefined_function(0xff,0x6abc);\n        result = (*jump_table)();\n        return result;\n      }\n      shift_amount = leading_zero_bit_count(divisor);\n      if (shift_amount == 0) {\n        dividend_high = dividend_high - divisor;\n        u_var9 = divisor >> 0x10;\n        u_var7 = divisor & 0xffff;\n        quotient = 1;\n        temp2 = divisor;\n      }\n      else {\n        temp2 = divisor << shift_amount;\n        u_var9 = temp2 >> 0x10;\n        quotient = dividend_high >> (0x20U - shift_amount & 0xff);\n        quotient = dividend >> (0x20U - shift_amount & 0xff) | dividend_high << shift_amount;\n        temp1 = quotient / u_var9;\n        u_var7 = temp2 & 0xffff;\n        u_var8 = quotient >> 0x10 | (quotient - u_var9 * temp1) * 0x10000;\n        temp4 = temp1 * u_var7;\n        dividend = dividend << shift_amount;\n        quotient = temp1;\n        if (u_var8 <= temp4 && temp4 - u_var8 != 0) {\n          carry_flag = carry_4_bit_operation(temp2,u_var8);\n          u_var8 = temp2 + u_var8;\n          quotient = temp1 - 1;\n          if ((carry_flag == false) && (u_var8 <= temp4 && temp4 - u_var8 != 0)) {\n            quotient = temp1 - 2;\n            u_var8 = u_var8 + temp2;\n          }\n        }\n        temp1 = (u_var8 - temp4) / u_var9;\n        dividend_high = quotient & 0xffff | ((u_var8 - temp4) - u_var9 * temp1) * 0x10000;\n        temp4 = temp1 * u_var7;\n        quotient = temp1;\n        if (dividend_high <= temp4 && temp4 - dividend_high != 0) {\n          carry_flag = carry_4_bit_operation(temp2,dividend_high);\n          dividend_high = temp2 + dividend_high;\n          quotient = temp1 - 1;\n          if ((carry_flag == false) && (dividend_high <= temp4 && temp4 - dividend_high != 0)) {\n            quotient = temp1 - 2;\n            dividend_high = dividend_high + temp2;\n          }\n        }\n        dividend_high = dividend_high - temp4;\n        quotient = quotient | quotient << 0x10;\n      }\n      u_var8 = dividend_high / u_var9;\n      temp4 = dividend >> 0x10 | (dividend_high - u_var9 * u_var8) * 0x10000;\n      quotient = u_var7 * u_var8;\n      temp1 = u_var8;\n      if (temp4 <= quotient && quotient - temp4 != 0) {\n        carry_flag = carry_4_bit_operation(temp2,temp4);\n        temp4 = temp2 + temp4;\n        temp1 = u_var8 - 1;\n        if ((carry_flag == false) && (temp4 <= quotient && quotient - temp4 != 0)) {\n          temp1 = u_var8 - 2;\n          temp4 = temp4 + temp2;\n        }\n      }\n      u_var8 = (temp4 - quotient) / u_var9;\n      temp4 = dividend & 0xffff | ((temp4 - quotient) - u_var9 * u_var8) * 0x10000;\n      u_var7 = u_var7 * u_var8;\n      quotient = u_var8;\n      if (temp4 <= u_var7 && u_var7 - temp4 != 0) {\n        carry_flag = carry_4_bit_operation(temp2,temp4);\n        temp4 = temp2 + temp4;\n        quotient = u_var8 - 1;\n        if ((carry_flag == false) && (temp4 <= u_var7 && u_var7 - temp4 != 0)) {\n          quotient = u_var8 - 2;\n          temp4 = temp4 + temp2;\n        }\n      }\n      temp4 = temp4 - u_var7;\n      quotient = quotient | temp1 << 0x10;\n    }\n    if (remainder != (uint *)0x0) {\n      *remainder = temp4 >> leading_zero_bit_count(divisor);\n      remainder[1] = 0;\n    }\n  }\n  else if (dividend_high < remainder) {\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = dividend_high;\n      return 0;\n    }\n    quotient = 0;\n    quotient = 0;\n  }\n  else {\n    shift_amount = leading_zero_bit_count(remainder);\n    if (shift_amount != 0) {\n      u_var7 = 0x20 - shift_amount;\n      temp1 = divisor >> (u_var7 & 0xff) | remainder << shift_amount;\n      u_var9 = temp1 >> 0x10;\n      quotient = dividend_high >> (u_var7 & 0xff);\n      quotient = dividend >> (u_var7 & 0xff) | dividend_high << shift_amount;\n      temp4 = quotient / u_var9;\n      temp2 = quotient >> 0x10 | (quotient - u_var9 * temp4) * 0x10000;\n      u_var8 = temp4 * (temp1 & 0xffff);\n      dividend = dividend << shift_amount;\n      quotient = temp4;\n      if (temp2 <= u_var8 && u_var8 - temp2 != 0) {\n        carry_flag = carry_4_bit_operation(temp1,temp2);\n        temp2 = temp1 + temp2;\n        quotient = temp4 - 1;\n        if ((carry_flag == false) && (temp2 <= u_var8 && u_var8 - temp2 != 0)) {\n          quotient = temp4 - 2;\n          temp2 = temp2 + temp1;\n        }\n      }\n      temp4 = (temp2 - u_var8) / u_var9;\n      temp2 = quotient & 0xffff | ((temp2 - u_var8) - u_var9 * temp4) * 0x10000;\n      u_var8 = temp4 * (temp1 & 0xffff);\n      quotient = temp4;\n      if (temp2 <= u_var8 && u_var8 - temp2 != 0) {\n        carry_flag = carry_4_bit_operation(temp1,temp2);\n        temp2 = temp1 + temp2;\n        quotient = temp4 - 1;\n        if ((carry_flag == false) && (temp2 <= u_var8 && u_var8 - temp2 != 0)) {\n          quotient = temp4 - 2;\n          temp2 = temp2 + temp1;\n        }\n      }\n      quotient = quotient | quotient << 0x10;\n      result = (ulonglong)quotient * (ulonglong)(divisor << shift_amount);\n      if (concatenate_64bit(temp2 - u_var8,dividend) < result) {\n        result = result - concatenate_64bit(temp1,divisor << shift_amount);\n        quotient = quotient - 1;\n      }\n      if (remainder != (uint *)0x0) {\n        quotient = ((temp2 - u_var8) - (int)(result >> 0x20)) - (uint)(dividend < (uint)result);\n        *remainder = quotient << (u_var7 & 0xff) | dividend - (uint)result >> shift_amount;\n        remainder[1] = quotient >> shift_amount;\n      }\n      return (ulonglong)quotient;\n    }\n    if ((remainder < dividend_high) || (divisor <= dividend)) {\n      carry_flag = dividend < divisor;\n      dividend = dividend - divisor;\n      dividend_high = (dividend_high - remainder) - (uint)carry_flag;\n      quotient = 1;\n    }\n    else {\n      quotient = 0;\n    }\n    quotient = 0;\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = dividend_high;\n    }\n  }\n  return concatenate_64bit(quotient,quotient);\n}\n\n",
            "renaming": {
                "FUN_00006a14": "divide_and_remainder_00006a14",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "remainder",
                "param_5": "remainder",
                "uVar1": "quotient",
                "iVar2": "shift_amount",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "quotient",
                "uVar6": "temp4",
                "uVar7": "u_var7",
                "uVar8": "u_var8",
                "uVar9": "u_var9",
                "bVar10": "carry_flag",
                "uVar11": "result",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "CONCAT44": "concatenate_64bit",
                "LZCOUNT": "leading_zero_bit_count",
                "CARRY4": "carry_4_bit_operation",
                "software_udf": "software_undefined_function"
            },
            "calling": [
                "FUN_00006974"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00006a14": {
                    "2": "perform_division",
                    "3": "calculate_division",
                    "1": "dividing_function",
                    "7": "divide_and_remainder",
                    "5": "calculate_quotient_and_remainder"
                },
                "param_1": {
                    "1": "numerator",
                    "29": "dividend"
                },
                "param_2": {
                    "5": "dividend_upper",
                    "1": "dividend_upper32",
                    "2": "dividend_lower_bits",
                    "4": "dividend_low",
                    "3": "divisor",
                    "7": "dividend_high"
                },
                "param_3": {
                    "2": "divisor1",
                    "23": "divisor",
                    "4": "quotient"
                },
                "param_4": {
                    "2": "divisor_low",
                    "1": "divisor_upper32",
                    "5": "divisor_high",
                    "9": "remainder",
                    "4": "divisor_upper"
                },
                "param_5": {
                    "1": "result_array",
                    "5": "quotient",
                    "8": "remainder",
                    "2": "output",
                    "4": "result"
                },
                "uVar1": {
                    "1": "quotient_extra",
                    "2": "quotient_low",
                    "5": "quotient1",
                    "8": "quotient"
                },
                "iVar2": {
                    "1": "num_bits",
                    "11": "shift_amount",
                    "5": "shift_count",
                    "7": "shift"
                },
                "uVar3": {
                    "2": "temp2",
                    "1": "dividend_extended",
                    "11": "temp1"
                },
                "uVar4": {
                    "1": "dividend_remainder",
                    "6": "temp2",
                    "2": "temp3",
                    "3": "quotient2"
                },
                "uVar5": {
                    "1": "u_var5",
                    "2": "temp4",
                    "4": "quotient",
                    "3": "temp3"
                },
                "uVar6": {
                    "1": "quotient_mod",
                    "3": "temp4",
                    "2": "temp3"
                },
                "uVar7": {
                    "1": "temp4",
                    "4": "u_var7",
                    "2": "temp6"
                },
                "uVar8": {
                    "1": "partial_quotient_divisor",
                    "3": "u_var8",
                    "2": "temp4"
                },
                "uVar9": {
                    "1": "divisor_quotient_rem",
                    "2": "quotient3",
                    "3": "u_var9"
                },
                "bVar10": {
                    "2": "is_carry",
                    "1": "is_borrowed",
                    "5": "carry",
                    "18": "carry_flag"
                },
                "uVar11": {
                    "3": "return_value",
                    "1": "remainder_low",
                    "22": "result"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "1": "udf_function",
                    "5": "jump_table"
                },
                "uVar10": {
                    "1": "carry_flag"
                },
                "uVar2": {
                    "1": "temp_remainder"
                },
                "iVar12": {
                    "1": "bit_shift"
                },
                "bVar13": {
                    "1": "has_remainder"
                },
                "bVar14": {
                    "1": "carry_status"
                },
                "CONCAT44": {
                    "1": "concatenate_64bit"
                },
                "LZCOUNT": {
                    "1": "leading_zeros"
                },
                "CARRY4": {
                    "1": "check_carry"
                },
                "software_udf": {
                    "1": "software_undefined_function"
                },
                "uVar12": {
                    "1": "temp3"
                },
                "uVar13": {
                    "1": "temp4"
                },
                "uVar14": {
                    "1": "temp5"
                }
            }
        }
    },
    "used_tokens": 772393,
    "layers": [
        [
            "FUN_00000410",
            "FUN_00000428",
            "FUN_00000490",
            "FUN_000004f2",
            "FUN_00000514",
            "FUN_00000534",
            "FUN_00000566",
            "FUN_0000058e",
            "FUN_000005ca",
            "FUN_00000610",
            "FUN_00000698",
            "FUN_00000738",
            "FUN_00000794",
            "FUN_000007dc",
            "FUN_000008b8",
            "FUN_00000900",
            "FUN_0000091c",
            "FUN_00000930",
            "FUN_0000093c",
            "FUN_0000099c",
            "FUN_00000a30",
            "FUN_00000cc0",
            "FUN_00000cd0",
            "FUN_00000cf0",
            "FUN_00000d0c",
            "FUN_00000d2a",
            "FUN_00000d44",
            "FUN_00000d9c",
            "FUN_00000db0",
            "FUN_00000dc0",
            "FUN_00000dcc",
            "FUN_00000df4",
            "FUN_00000e14",
            "FUN_00000e38",
            "FUN_00000e58",
            "FUN_00000e64",
            "FUN_00000ed8",
            "FUN_00000f04",
            "FUN_00000f8c",
            "FUN_00000fec",
            "FUN_00001034",
            "FUN_000010a0",
            "FUN_000010d4",
            "FUN_00001274",
            "FUN_0000129c",
            "FUN_000012b4",
            "FUN_000012e2",
            "FUN_00001318",
            "FUN_00001348",
            "FUN_00001360",
            "FUN_00001448",
            "FUN_000015d0",
            "FUN_00001688",
            "FUN_00001696",
            "FUN_00001734",
            "FUN_00001748",
            "FUN_00001778",
            "FUN_0000182c",
            "FUN_000018bc",
            "FUN_0000191c",
            "FUN_00001960",
            "FUN_000019c0",
            "FUN_00001a18",
            "FUN_00001a3c",
            "FUN_00001a60",
            "FUN_00001ad4",
            "FUN_00001b10",
            "FUN_00001bb8",
            "FUN_00001c84",
            "FUN_00001cf0",
            "FUN_00001d08",
            "FUN_00001d3a",
            "FUN_00001d5e",
            "FUN_00001d80",
            "FUN_00001da2",
            "FUN_00001dc0",
            "FUN_00001ddc",
            "FUN_00001e0c",
            "FUN_00001e44",
            "FUN_00001ec4",
            "FUN_00001eea",
            "FUN_00001f80",
            "FUN_00001ff6",
            "FUN_000020b8",
            "FUN_000020cc",
            "FUN_000020e0",
            "FUN_000020f4",
            "FUN_00002108",
            "FUN_0000211c",
            "FUN_00002270",
            "FUN_00002294",
            "FUN_000022be",
            "FUN_000022f0",
            "FUN_0000231c",
            "FUN_00002364",
            "FUN_00002396",
            "FUN_000023a4",
            "FUN_000023c8",
            "FUN_000023d0",
            "FUN_0000240c",
            "FUN_00002434",
            "FUN_000024bc",
            "FUN_00002538",
            "FUN_000025f4",
            "FUN_00002600",
            "FUN_00002624",
            "FUN_00002654",
            "FUN_00002690",
            "FUN_000026c0",
            "FUN_000026d8",
            "FUN_000026e4",
            "FUN_000026f0",
            "FUN_00002714",
            "FUN_00002744",
            "FUN_00002798",
            "FUN_000027b0",
            "FUN_0000281c",
            "FUN_0000285c",
            "FUN_00002894",
            "FUN_000028f0",
            "FUN_00002910",
            "FUN_0000294c",
            "FUN_00002970",
            "FUN_00002994",
            "FUN_00002a00",
            "FUN_00002a18",
            "FUN_00002a88",
            "FUN_00002b10",
            "FUN_00002d94",
            "FUN_00002e48",
            "FUN_00002e6c",
            "FUN_00002e9c",
            "FUN_00002eb4",
            "FUN_00002ecc",
            "FUN_00002f30",
            "FUN_00002f74",
            "FUN_00002fe0",
            "FUN_0000305c",
            "FUN_0000316c",
            "FUN_000031e0",
            "FUN_000031fc",
            "FUN_0000328c",
            "FUN_00003378",
            "FUN_000033c0",
            "FUN_000033f4",
            "FUN_00003444",
            "FUN_00003478",
            "FUN_000034c0",
            "FUN_00003524",
            "FUN_00003658",
            "FUN_00003688",
            "FUN_00003694",
            "FUN_00003810",
            "FUN_00003918",
            "FUN_000039e8",
            "FUN_00003d24",
            "FUN_00003d64",
            "FUN_00003d94",
            "FUN_00003dc4",
            "FUN_00003e58",
            "FUN_00003e9e",
            "FUN_00003ec4",
            "FUN_00003ff4",
            "FUN_00004042",
            "FUN_0000404c",
            "FUN_00004158",
            "FUN_000041d0",
            "FUN_000041f4",
            "FUN_00004248",
            "FUN_00004274",
            "FUN_00004280",
            "FUN_0000428c",
            "FUN_000042a4",
            "FUN_00004314",
            "FUN_000043a0",
            "FUN_00004418",
            "FUN_0000443c",
            "FUN_0000459c",
            "FUN_000045ee",
            "FUN_00004622",
            "FUN_00004634",
            "FUN_000047e4",
            "FUN_00004b34",
            "FUN_00004bd0",
            "FUN_00004c84",
            "FUN_00004cb4",
            "FUN_00004db8",
            "FUN_00004dc8",
            "FUN_00004dee",
            "FUN_00004e26",
            "FUN_00004e52",
            "FUN_00004e66",
            "FUN_00004f84",
            "FUN_00004f98",
            "FUN_000050e8",
            "FUN_000050f4",
            "FUN_00005100",
            "FUN_00005404",
            "FUN_000054a8",
            "FUN_00005584",
            "FUN_0000562c",
            "FUN_000056a0",
            "FUN_000056b0",
            "FUN_000056b8",
            "FUN_00005700",
            "FUN_00005780",
            "FUN_00005790",
            "FUN_0000579c",
            "FUN_000057a8",
            "FUN_000057d2",
            "FUN_000057f8",
            "FUN_00005a58",
            "FUN_00005b34",
            "FUN_00005e10",
            "FUN_00005e68",
            "FUN_00005ebc",
            "FUN_00005ecc",
            "FUN_00005edc",
            "FUN_00005fd8",
            "FUN_00005fec",
            "FUN_00005ff8",
            "FUN_00006010",
            "FUN_000060b0",
            "FUN_000060cc",
            "FUN_00006192",
            "FUN_000061cc",
            "FUN_000064bc",
            "FUN_0000656c",
            "FUN_00006768",
            "FUN_0000687c",
            "FUN_000068f0",
            "FUN_00006964",
            "FUN_00006974",
            "FUN_00006a14"
        ],
        [
            "FUN_00000d76",
            "FUN_00001392",
            "FUN_000014c4",
            "FUN_00001628",
            "FUN_000016c8",
            "FUN_000016ec",
            "FUN_00001710",
            "FUN_00002028",
            "FUN_0000258c"
        ],
        [
            "FUN_000013b8",
            "FUN_000017dc"
        ]
    ],
    "locked_functions": []
}