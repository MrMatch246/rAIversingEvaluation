{
    "functions": {
        "FUN_000026c0": {
            "renaming": {
                "FUN_000026c0": "initialize_data_000026c0",
                "FUN_00002910": "clear_data",
                "PTR_DAT_000026d4": "data_ptr"
            },
            "code": "void initialize_data_000026c0(void)\n{\n  clear_data();\n  *PTR_DAT_000026d4 = 0;\n  return;\n}",
            "called": [
                "FUN_00002910"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000026c0",
            "calling": [
                "FUN_00003524"
            ],
            "imported": false,
            "current_name": "initialize_data_000026c0"
        },
        "FUN_00004bd0": {
            "renaming": {
                "FUN_00004bd0": "allocate_memory_00004bd0",
                "param_1": "out_address",
                "param_2": "size",
                "param_3": "arg3",
                "param_4": "arg4",
                "puVar1": "current_block",
                "uVar2": "result",
                "puVar3": "next_block",
                "iVar4": "space_left",
                "uVar5": "space_left",
                "puVar6": "current_block",
                "uVar7": "aligned_size",
                "PTR_DAT_00004c80": "block",
                "PTR_DAT_00004c7c": "CURRENT_BLOCK_PTR",
                "FUN_00005790": "find_suitable_block",
                "FUN_0000579c": "remove_block"
            },
            "code": "uint allocate_memory_00004bd0(uint *out_address, uint size, uint arg3, uint arg4)\n{\n    uint *current_PTR_DAT_00004c80 = *(uint **)PTR_DAT_00004c7c;\n    uint aligned_size = (size + 3) & 0xfffffffc;\n    aligned_size += 8;\n    if (aligned_size < 0xc) {\n        aligned_size = 0xc;\n    }\n    if (((int)aligned_size < 0) || (aligned_size < size)) {\n        *out_address = 0xc;\n        return 0;\n    }\n    find_suitable_PTR_DAT_00004c80(&current_PTR_DAT_00004c80, &aligned_size);\n    if (*PTR_DAT_00004c7c == 0) {\n        uint result = allocate_new_PTR_DAT_00004c80(out_address, &current_PTR_DAT_00004c80, arg4);\n        if (result != -1) {\n            *current_PTR_DAT_00004c80 = aligned_size;\n            return result;\n        }\n    }\n    else {\n        uint *next_PTR_DAT_00004c80 = current_PTR_DAT_00004c80 + 1;\n        uint space_left = (uint)next_PTR_DAT_00004c80 - (uint)current_PTR_DAT_00004c80 - *current_PTR_DAT_00004c80;\n        if (space_left >= aligned_size + 8) {\n            *next_PTR_DAT_00004c80 = *current_PTR_DAT_00004c80 - aligned_size;\n            *current_PTR_DAT_00004c80 = aligned_size;\n            return (uint)current_PTR_DAT_00004c80 + 8;\n        }\n        else {\n            remove_PTR_DAT_00004c80(current_PTR_DAT_00004c80, next_PTR_DAT_00004c80);\n        }\n    }\n    *out_address = 0xc;\n    return 0;\n}\n\nvoid find_suitable_PTR_DAT_00004c80(uint **PTR_DAT_00004c80_ptr, uint *size_ptr) {\n    uint *current_PTR_DAT_00004c80 = *PTR_DAT_00004c80_ptr;\n    while (current_PTR_DAT_00004c80 != NULL) {\n        uint space_left = *current_PTR_DAT_00004c80 - *size_ptr;\n        if (space_left >= 0) {\n            if (space_left > 0xb) {\n                *current_PTR_DAT_00004c80 = space_left;\n                *PTR_DAT_00004c80_ptr = (uint *)((uint)current_PTR_DAT_00004c80 + *current_PTR_DAT_00004c80);\n                return;\n            }\n            remove_PTR_DAT_00004c80(PTR_DAT_00004c80_ptr, &current_PTR_DAT_00004c80[1]);\n            return;\n        }\n        PTR_DAT_00004c80_ptr = current_PTR_DAT_00004c80;\n        current_PTR_DAT_00004c80 = (uint *)*current_PTR_DAT_00004c80;\n    }\n}\n\nuint allocate_new_PTR_DAT_00004c80(uint *out_address, uint **PTR_DAT_00004c80_ptr, uint arg3) {\n    uint *PTR_DAT_00004c80 = (uint *)allocate_memory_00004bd0(out_address, arg3, 0, 0);\n    if (*out_address != 0) {\n        return -1;\n    }\n    *PTR_DAT_00004c80_ptr = PTR_DAT_00004c80;\n    *PTR_DAT_00004c80 = 0;\n    return (uint)PTR_DAT_00004c80 + 8;\n}\n\nvoid remove_PTR_DAT_00004c80(uint **prev_PTR_DAT_00004c80_ptr, uint **PTR_DAT_00004c80_ptr) {\n    *prev_PTR_DAT_00004c80_ptr = *PTR_DAT_00004c80_ptr;\n    if (*PTR_DAT_00004c7c == *PTR_DAT_00004c80_ptr) {\n        *PTR_DAT_00004c7c = **prev_PTR_DAT_00004c80_ptr;\n    }\n}\n",
            "called": [
                "FUN_00000428",
                "FUN_0000579c",
                "FUN_00005790"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004bd0",
            "calling": [
                "FUN_000068f0",
                "FUN_00005100",
                "FUN_00004248",
                "FUN_000060cc",
                "FUN_00005700"
            ],
            "imported": false,
            "current_name": "allocate_memory_00004bd0"
        },
        "FUN_00000794": {
            "renaming": {
                "FUN_00000794": "create_array_00000794",
                "extraout_r1": "extra_out",
                "iVar1": "index1",
                "puVar2": "array_ptr",
                "uVar3": "array_ptr_int",
                "iStack_1c": "stack_var1",
                "iStack_18": "stack_var2",
                "piStack_14": "array"
            },
            "code": "int * create_array_00000794(void)\n{\n  int extraout_r1;\n  int index1;\n  undefined4 *array_ptr;\n  uint array_ptr_int;\n  int stack_var1;\n  int stack_var2;\n  int *array;\n  create_random_seed();\n  *(undefined4 *)(iRam000007d0 + *psRam000007cc * 4) = 0;\n  *piRam000007d4 = *piRam000007d4 - 1;\n  create_random_number(*puRam000007d8, 0);\n  array_ptr = puRam000007d8;\n  index1 = 0;\n  *puRam000007d8 = 0;\n  create_random_string();\n  array_ptr_int = (int)array_ptr + index1 & 0xfffffffc;\n  array = (int *)(array_ptr_int - 4);\n  *array = 0x77777777;\n  if (((uint)array & 7) != 0) {\n    array = (int *)(array_ptr_int - 8);\n    *array = 0x88888888;\n  }\n  array[-1] = 0x1000000;\n  array[-2] = index1 << 0xd;\n  array[-3] = PTR_DAT_000008b4;\n  array = array - 4;\n  *array = 0;\n  for (stack_var2 = 3; 0 < stack_var2; stack_var2 = stack_var2 - 1) {\n    array = array - 1;\n    *array = stack_var2;\n  }\n  array = array - 1;\n  *array = extraout_r1;\n  for (stack_var1 = 0xb; 3 < stack_var1; stack_var1 = stack_var1 - 1) {\n    array = array - 1;\n    *array = stack_var1;\n  }\n  array[-1] = -3;\n  return array - 1;\n}",
            "called": [
                "FUN_00000cd0",
                "FUN_00000930",
                "FUN_00000698"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000794",
            "calling": [],
            "imported": false,
            "current_name": "create_array_00000794"
        },
        "FUN_000064bc": {
            "renaming": {
                "process_data": "process_data",
                "param_1": "data",
                "param_2": "index",
                "param_3": "buffer",
                "param_4": "callback",
                "puVar1": "data_ptr",
                "iVar2": "callback_result",
                "uVar3": "operation_result",
                "ppbVar4": "callback_buffer",
                "pbVar5": "next_byte",
                "unaff_r6": "current_byte",
                "pbVar6": "callback_byte",
                "iVar7": "byte_count",
                "FUN_000064bc": "process_data_000064bc"
            },
            "code": "int process_data_000064bc(int data, uint *index, byte **buffer, int *callback) {\n  byte *current_byte;\n  int byte_count = 0;\n  uint remaining_bytes = index[2];\n  byte **buffer_ptr = buffer;\n  int callback_result;\n  if (remaining_bytes == 0) {\n    remaining_bytes = index[6] == 0 ? 1 : 0xffffffff;\n    index[2] = remaining_bytes;\n  }\n  if (-1 < (int)(*index << 0x1b)) {\n    byte **callback_buffer = (byte **)*callback;\n    *callback = (int)(callback_buffer + 1);\n    current_byte = *callback_buffer;\n  }\n  do {\n    uint operation_code = index[6];\n    if (operation_code != 0) {\n      if (operation_code == 1) {\n        if (*(char *)(index[5] + (uint)**buffer) == '\\0') {\n          if (byte_count == 0) {\n            return 1;\n          }\n          if (((*index & 0x10) == 0) && (index[3] = index[3] + 1, index[6] != 0)) {\n            *current_byte = 0;\n          }\n          index[4] = byte_count + index[4];\n          return 0;\n        }\n      }\n      else if ((operation_code != 2) || ((int)((uint)(byte)PTR_DAT_00006568[**buffer] << 0x1c) < 0)) {\n        if (byte_count == 0) {\n          return 0;\n        }\n        if (((*index & 0x10) == 0) && (index[3] = index[3] + 1, index[6] != 0)) {\n          *current_byte = 0;\n        }\n        index[4] = byte_count + index[4];\n        return 0;\n      }\n    }\n    byte *callback_byte = current_byte;\n    if (-1 < (int)(*index << 0x1b)) {\n      callback_byte = current_byte + 1;\n      *current_byte = **buffer;\n    }\n    byte *next_byte = (*buffer)[1];\n    *buffer = *buffer + 1;\n    remaining_bytes = remaining_bytes - 1;\n    (*buffer)[1] = next_byte - 1;\n    byte_count = byte_count + 1;\n    index[2] = remaining_bytes;\n    current_byte = callback_byte;\n    if ((remaining_bytes == 0) || ((int)(next_byte - 1) < 1 && (callback_result = (*(code *)index[0x60])(data, buffer, remaining_bytes, (code *)index[0x60], callback), callback_result != 0))) {\n      if (byte_count == 0) {\n        return 0;\n      }\n      if (((*index & 0x10) == 0) && (index[3] = index[3] + 1, index[6] != 0)) {\n        *current_byte = 0;\n      }\n      index[4] = byte_count + index[4];\n      return 0;\n    }\n  } while(true);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000064bc",
            "calling": [
                "FUN_000061cc"
            ],
            "imported": false,
            "current_name": "process_data_000064bc"
        },
        "FUN_00002970": {
            "renaming": {
                "FUN_00002970": "set_flag_to_false_00002970",
                "DAT_00002990": "data_ptr"
            },
            "code": "void set_flag_to_false_00002970() \n{\n  uint *flag_ptr = (uint *)(DAT_00002990 + 0x14);\n  *flag_ptr &= 0xffffffef;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002970",
            "calling": [
                "FUN_000026e4"
            ],
            "imported": false,
            "current_name": "set_flag_to_false_00002970"
        },
        "FUN_00000dc0": {
            "renaming": {
                "FUN_00000dc0": "execute_function_00000dc0",
                "FUN_00000cc0": "call_another_function"
            },
            "code": "void execute_function_00000dc0(void)\n{\n  call_another_function();\n  return;\n}",
            "called": [
                "FUN_00000cc0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000dc0",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_00000dc0"
        },
        "FUN_00000d0c": {
            "renaming": {
                "FUN_00000d0c": "enable_irq_interrupts_if_privileged_00000d0c",
                "param_1": "irq_bit",
                "bVar1": "is_privileged_mode"
            },
            "code": "void enable_irq_interrupts_if_privileged_00000d0c(uint irq_bit)\n{\n  bool is_privileged_mode = (bool)isCurrentModePrivileged();\n  if (is_privileged_mode) {\n    enableIRQinterrupts((irq_bit & 1) == 1);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000d0c",
            "calling": [
                "FUN_00001c84",
                "FUN_00000428",
                "FUN_000024bc",
                "FUN_000010d4",
                "FUN_00002434"
            ],
            "imported": false,
            "current_name": "enable_irq_interrupts_if_privileged_00000d0c"
        },
        "FUN_00003d94": {
            "renaming": {
                "FUN_00003d94": "get_result_00003d94",
                "param_1": "data_ptr",
                "param_2": "param",
                "uVar1": "result"
            },
            "code": "int get_result_00003d94(int data_ptr, int param) {\n    int result;\n    if (data_ptr == 0) {\n        result = -19;\n    }\n    else {\n        result = (**(code **)(*(int *)(data_ptr + 0xc) + 4))(*(int *)(data_ptr + 4), param);\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003d94",
            "calling": [
                "FUN_0000305c"
            ],
            "imported": false,
            "current_name": "get_result_00003d94"
        },
        "FUN_0000579c": {
            "renaming": {
                "FUN_0000579c": "do_nothing_with_pointer_0000579c",
                "PTR_DAT_000057a4": "PTR_DATA"
            },
            "code": "void do_nothing_with_pointer_0000579c(void)\n{\n  do_nothing(PTR_DAT_000057a4);\n  return;\n}",
            "called": [
                "FUN_000045ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000579c",
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "imported": false,
            "current_name": "do_nothing_with_pointer_0000579c"
        },
        "FUN_000015d0": {
            "renaming": {
                "FUN_000015d0": "copy_data_to_buffer_000015d0",
                "param_1": "offset",
                "param_2": "source_address",
                "param_3": "length",
                "iVar1": "buffer_address",
                "local_c": "i"
            },
            "code": "void copy_data_to_buffer_000015d0(int offset, int source_address, uint32_t length)\n{\n  int buffer_address = *(int *)(PTR_DAT_00001624 + offset * 0x20);\n  for (uint32_t i = 0; i < length; i++) {\n    while (*(char *)(buffer_address + 4) >= 0) {};\n    *(uint8_t *)(buffer_address + 7) = *(uint8_t *)(source_address + i);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000015d0",
            "calling": [
                "FUN_00000e38"
            ],
            "imported": false,
            "current_name": "copy_data_to_buffer_000015d0"
        },
        "FUN_00005e68": {
            "renaming": {
                "FUN_00005e68": "process_data_00005e68",
                "param_1": "data_size",
                "param_2": "data_array",
                "param_3": "arg_1",
                "param_4": "arg_2",
                "local_74": "local_var_1",
                "local_80": "param_1",
                "local_70": "local_var_2",
                "uStack_8": "param_3",
                "uStack_4": "param_4",
                "local_7c": "local_var_3",
                "local_5c": "local_var_4",
                "local_4c": "local_var_5",
                "local_38": "local_var_6",
                "local_72": "local_var_7",
                "local_6c": "local_var_8",
                "FUN_000061cc": "process_data_internal"
            },
            "code": "void process_data_00005e68(int data_size, int *data_array, int arg_1, int arg_2)\n{\n  int local_var_1 = 0x204;\n  int param_1 = arg_1;\n  int local_var_2 = arg_1;\n  int param_3 = arg_2;\n  int param_4 = arg_3;\n  int local_var_3 = get_value();\n  int *local_var_4 = PTR_LAB_00004dea_1_00005eb4;\n  int local_var_5 = 0;\n  int local_var_6 = 0;\n  int local_var_7 = 0xffff;\n  int local_var_8 = local_var_3;\n  process_data_00005e68_internal(*DAT_00005eb8, &param_1, data_array, &param_3);\n  return;\n}",
            "called": [
                "FUN_00005ecc",
                "FUN_000061cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005e68",
            "calling": [
                "FUN_00005100"
            ],
            "imported": false,
            "current_name": "process_data_00005e68"
        },
        "FUN_00000dcc": {
            "renaming": {
                "FUN_00000dcc": "set_data_in_array_00000dcc",
                "DAT_00000df0": "data_array"
            },
            "code": "void set_data_in_array_00000dcc(void)\n{\n    int16_t *DAT_00000df0 = DAT_00000df0;\n    DAT_00000df0[7] = 0xc520;\n    DAT_00000df0[7] = 0xd928;\n    *DAT_00000df0 = 0xd2;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000dcc",
            "calling": [
                "FUN_00000db0"
            ],
            "imported": false,
            "current_name": "set_data_in_array_00000dcc"
        },
        "FUN_0000285c": {
            "renaming": {
                "FUN_0000285c": "set_param_and_flag_0000285c",
                "param_1": "param",
                "puVar1": "param_ptr"
            },
            "code": "void set_param_and_flag_0000285c(undefined4 param)\n{\n  undefined4 *param_ptr;\n  param_ptr = DAT_00002890;\n  DAT_00002890[5] &= 0xffffffef;\n  *param_ptr = param;\n  param_ptr[5] |= 0x10;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000285c",
            "calling": [
                "FUN_00002600"
            ],
            "imported": false,
            "current_name": "set_param_and_flag_0000285c"
        },
        "FUN_00000e58": {
            "renaming": {
                "FUN_00000e58": "do_nothing_loop_00000e58",
                "FUN_00000cd0": "call_another_function"
            },
            "code": "void do_nothing_loop_00000e58(void)\n{\n  call_another_function();\n  while(true)\n  {\n    // Do nothing\n  }\n}",
            "called": [
                "FUN_00000cd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000e58",
            "calling": [
                "FUN_00000f04"
            ],
            "imported": false,
            "current_name": "do_nothing_loop_00000e58"
        },
        "FUN_00001778": {
            "renaming": {
                "FUN_00001778": "set_bit_in_byte_after_4th_bit_00001778",
                "DAT_000017d0": "data_pointer",
                "DAT_000017d8": "parameter_data",
                "byte": "uint8_t",
                "FUN_00001710": "call_another_function"
            },
            "code": "void set_bit_in_byte_after_4th_bit_00001778(void)\n{\n  byte *DAT_000017d0 = DAT_000017d0;\n  *(DAT_000017d0 + 1) = (*(DAT_000017d0 + 1) & 0xcf) | 0x20;\n  call_another_function(DAT_000017d8, 2);\n  return;\n}",
            "called": [
                "FUN_00001710",
                "FUN_000016ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001778",
            "calling": [
                "FUN_000019c0",
                "FUN_0000191c"
            ],
            "imported": false,
            "current_name": "set_bit_in_byte_after_4th_bit_00001778"
        },
        "FUN_000026d8": {
            "renaming": {
                "FUN_000026d8": "run_function_000026d8",
                "FUN_0000294c": "call_another_function"
            },
            "code": "void run_function_000026d8(void)\n{\n  call_another_function();\n  return;\n}",
            "called": [
                "FUN_0000294c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000026d8",
            "calling": [
                "FUN_00003524"
            ],
            "imported": false,
            "current_name": "run_function_000026d8"
        },
        "FUN_00000566": {
            "renaming": {
                "FUN_00000566": "count_leading_zeroes_of_32bit_00000566",
                "param_1": "num",
                "bVar1": "byte1",
                "bVar2": "byte2",
                "bVar3": "byte3",
                "bVar4": "byte4",
                "uVar5": "leading_zeroes"
            },
            "code": "uint32_t count_leading_zeroes_of_32bit_00000566(uint32_t num)\n{\n    uint32_t mask = 0x80000000;\n    uint32_t leading_zeroes = 0;\n    while (mask != 0 && (num & mask) == 0) {\n        leading_zeroes++;\n        mask >>= 1;\n    }\n    return leading_zeroes;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000566",
            "calling": [
                "FUN_00000610"
            ],
            "imported": false,
            "current_name": "count_leading_zeroes_of_32bit_00000566"
        },
        "FUN_00001d08": {
            "renaming": {
                "FUN_00001d08": "calculate_offset_00001d08",
                "param_1": "base_address",
                "param_2": "index",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "int calculate_offset_00001d08(uint32_t base_address, int index) {\n    uint32_t masked_base = base_address & 0xf0000000;\n    uint32_t masked_offset = (base_address & 0xfffff) << 5;\n    int scaled_index = index * 4;\n    return masked_base | masked_offset | scaled_index | 0x2000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001d08",
            "calling": [
                "FUN_00001d3a"
            ],
            "imported": false,
            "current_name": "calculate_offset_00001d08"
        },
        "FUN_000031fc": {
            "renaming": {
                "FUN_000031fc": "calculate_result_000031fc",
                "param_1": "input_value",
                "param_2": "input_range",
                "param_3": "initial_value",
                "iVar2": "range",
                "bVar1": "range_byte",
                "iVar3": "value",
                "param_4": "result"
            },
            "code": "int calculate_result_000031fc(int input_value, int input_range, int initial_value) {\n    int range = input_range;\n    if (input_range < 3) {\n        range = 1;\n    }\n    byte range_byte = (byte)range;\n    if (range > 2) {\n        range_byte = 0;\n    }\n    input_value = input_value - (uint)range_byte;\n    int value = input_value;\n    if (input_value < 0) {\n        value = input_value + 3;\n    }\n    int result = (((value >> 2) + input_value) - (int)((longlong)DAT_00003280 * (longlong)input_value >> 0x25)) + (int)((longlong)DAT_00003280 * (longlong)input_value >> 0x27) + *(int *)(DAT_00003284 + (range + -1) * 4) + initial_value;\n    return result + (((int)((ulonglong)((longlong)DAT_00003288 * (longlong)result) >> 0x20) + result >> 2) - (result >> 0x1f)) * -7;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000031fc",
            "calling": [
                "FUN_0000328c"
            ],
            "imported": false,
            "current_name": "calculate_result_000031fc"
        },
        "FUN_000016ec": {
            "renaming": {
                "FUN_000016ec": "set_flag_to_true_000016ec",
                "param_1": "id",
                "param_2": "flag",
                "puVar1": "flag_ptr",
                "*puVar1": "*flag_ptr",
                "undefined": "char",
                "undefined4": "int",
                "FUN_00001696": "get_flag_pointer"
            },
            "code": "void set_flag_to_true_000016ec(int id, char flag) {\n  char *flag_ptr = (char *)get_flag_pointer(id, flag);\n  *flag_ptr = 1;\n  return;\n}",
            "called": [
                "FUN_00001696"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000016ec",
            "calling": [
                "FUN_0000182c",
                "FUN_00001a18",
                "FUN_00001a60",
                "FUN_00001778",
                "FUN_00001a3c"
            ],
            "imported": false,
            "current_name": "set_flag_to_true_000016ec"
        },
        "FUN_00005100": {
            "renaming": {
                "FUN_00005100": "FUNC_00005100"
            },
            "code": "\nvoid FUNC_00005100(void)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  undefined4 *puVar3;\n  undefined4 uVar4;\n  int iVar5;\n  char *pcVar6;\n  int iVar7;\n  int iVar8;\n  char cVar9;\n  char *pcVar10;\n  bool bVar11;\n  ushort *puVar12;\n  int *piVar13;\n  ushort *puVar14;\n  int *piVar15;\n  ushort local_3c;\n  ushort local_3a;\n  ushort local_38;\n  ushort local_36;\n  ushort local_34;\n  ushort local_32;\n  int local_30;\n  char *local_2c [2];\n  \n  uVar4 = *DAT_00005108;\n  iVar5 = FUN_000056b0();\n  puVar1 = PTR_DAT_000053d8;\n  pcVar6 = (char *)FUN_000056a0(uVar4,PTR_DAT_000053d4);\n  puVar2 = PTR_DAT_000053e0;\n  if (pcVar6 == (char *)0x0) {\n    *(undefined4 *)PTR_DAT_000053dc = 0;\n    *(undefined4 *)PTR_DAT_000053e4 = 0;\n    puVar3 = DAT_000053e8;\n    uVar4 = *(undefined4 *)puVar1;\n    *DAT_000053e8 = puVar2;\n    puVar3[1] = puVar2;\n    FUN_00005780(uVar4);\n    *(undefined4 *)puVar1 = 0;\n  }\n  else if ((*(int *)puVar1 == 0) || (iVar7 = FUN_00004e52(), iVar7 != 0)) {\n    FUN_00005780(*(undefined4 *)puVar1);\n    iVar7 = FUN_00005ecc(pcVar6);\n    iVar7 = FUN_00004bd0(uVar4,iVar7 + 1);\n    *(int *)puVar1 = iVar7;\n    if (iVar7 != 0) {\n      FUN_00005ebc(iVar7,pcVar6);\n    }\n    if (*pcVar6 == ':') {\n      pcVar6 = pcVar6 + 1;\n    }\n    iVar7 = FUN_00005e68(pcVar6,PTR_s__10__0_9_____n_000053f0,PTR_DAT_000053ec,&local_30);\n    if (0 < iVar7) {\n      pcVar10 = pcVar6 + local_30;\n      if (pcVar6[local_30] == '-') {\n        pcVar10 = pcVar10 + 1;\n        iVar7 = -1;\n      }\n      else {\n        if (pcVar6[local_30] == '+') {\n          pcVar10 = pcVar10 + 1;\n        }\n        iVar7 = 1;\n      }\n      local_3a = 0;\n      local_38 = 0;\n      puVar12 = &local_3a;\n      piVar13 = &local_30;\n      puVar14 = &local_38;\n      piVar15 = &local_30;\n      iVar8 = FUN_00005e68(pcVar10,PTR_s__hu_n__hu_n__hu_n_000053f4,&local_3c,&local_30,&local_3a,\n                           &local_30,&local_38,&local_30);\n      puVar1 = PTR_DAT_00005400;\n      if (0 < iVar8) {\n        *(uint *)(iVar5 + 0x28) =\n             ((uint)local_3c * 0xe10 + (uint)local_3a * 0x3c + (uint)local_38) * iVar7;\n        puVar3 = DAT_000053e8;\n        *DAT_000053e8 = PTR_DAT_000053ec;\n        pcVar10 = pcVar10 + local_30;\n        iVar7 = FUN_00005e68(pcVar10,PTR_s__10__0_9_____n_000053f0,puVar1,&local_30,puVar12,piVar13,\n                             puVar14,piVar15);\n        if (iVar7 < 1) {\n          puVar3[1] = *puVar3;\n          *(undefined4 *)PTR_DAT_000053dc = *(undefined4 *)(iVar5 + 0x28);\n          *(undefined4 *)PTR_DAT_000053e4 = 0;\n        }\n        else {\n          puVar3[1] = puVar1;\n          pcVar6 = pcVar10 + local_30;\n          if (pcVar10[local_30] == '-') {\n            pcVar6 = pcVar6 + 1;\n            iVar7 = -1;\n          }\n          else {\n            if (pcVar10[local_30] == '+') {\n              pcVar6 = pcVar6 + 1;\n            }\n            iVar7 = 1;\n          }\n          local_3c = 0;\n          local_3a = 0;\n          local_38 = 0;\n          local_30 = 0;\n          iVar8 = FUN_00005e68(pcVar6,PTR_s__hu_n__hu_n__hu_n_000053f4,&local_3c,&local_30,&local_3a\n                               ,&local_30,&local_38,&local_30);\n          if (iVar8 < 1) {\n            iVar7 = *(int *)(iVar5 + 0x28) + -0xe10;\n          }\n          else {\n            iVar7 = ((uint)local_3c * 0xe10 + (uint)local_3a * 0x3c + (uint)local_38) * iVar7;\n          }\n          *(int *)(iVar5 + 0x50) = iVar7;\n          pcVar6 = pcVar6 + local_30;\n          bVar11 = false;\n          iVar7 = iVar5;\n          while( true ) {\n            if (*pcVar6 == ',') {\n              pcVar6 = pcVar6 + 1;\n            }\n            cVar9 = *pcVar6;\n            if (cVar9 == 'M') {\n              iVar8 = FUN_00005e68(pcVar6,PTR_s_M_hu_n__hu_n__hu_n_000053f8,&local_36,&local_30,\n                                   &local_34,&local_30,&local_32,&local_30);\n              if (iVar8 != 3) {\n                return;\n              }\n              if (0xb < local_36 - 1) {\n                return;\n              }\n              if (4 < local_34 - 1) {\n                return;\n              }\n              if (6 < local_32) {\n                return;\n              }\n              *(uint *)(iVar7 + 0xc) = (uint)local_36;\n              *(uint *)(iVar7 + 0x10) = (uint)local_34;\n              *(undefined *)(iVar7 + 8) = 0x4d;\n              *(uint *)(iVar7 + 0x14) = (uint)local_32;\n              pcVar10 = pcVar6 + local_30;\n            }\n            else {\n              if (cVar9 == 'J') {\n                pcVar6 = pcVar6 + 1;\n              }\n              else {\n                cVar9 = 'D';\n              }\n              local_32 = FUN_00005fd8(pcVar6,local_2c,10);\n              pcVar10 = local_2c[0];\n              if (local_2c[0] == pcVar6) {\n                if (bVar11) {\n                  *(undefined *)(iVar5 + 0x30) = 0x4d;\n                  *(undefined4 *)(iVar5 + 0x34) = 0xb;\n                  *(undefined4 *)(iVar5 + 0x38) = 1;\n                  *(undefined4 *)(iVar5 + 0x3c) = 0;\n                }\n                else {\n                  *(undefined *)(iVar5 + 8) = 0x4d;\n                  *(undefined4 *)(iVar5 + 0xc) = 3;\n                  *(undefined4 *)(iVar5 + 0x10) = 2;\n                  *(undefined4 *)(iVar5 + 0x14) = 0;\n                }\n              }\n              else {\n                *(char *)(iVar7 + 8) = cVar9;\n                *(uint *)(iVar7 + 0x14) = (uint)local_32;\n              }\n            }\n            local_3c = 2;\n            local_3a = 0;\n            local_38 = 0;\n            local_30 = 0;\n            if (*pcVar10 == '/') {\n              FUN_00005e68(pcVar10,PTR_DAT_000053fc,&local_3c,&local_30,&local_3a,&local_30,\n                           &local_38,&local_30);\n            }\n            *(uint *)(iVar7 + 0x18) =\n                 (uint)local_3c * 0xe10 + (uint)local_3a * 0x3c + (uint)local_38;\n            iVar7 = iVar7 + 0x28;\n            pcVar6 = pcVar10 + local_30;\n            if (bVar11) break;\n            bVar11 = true;\n          }\n          FUN_00004f98(*(undefined4 *)(iVar5 + 4));\n          iVar7 = *(int *)(iVar5 + 0x28);\n          *(int *)PTR_DAT_000053dc = iVar7;\n          iVar7 = *(int *)(iVar5 + 0x50) - iVar7;\n          if (iVar7 != 0) {\n            iVar7 = 1;\n          }\n          *(int *)PTR_DAT_000053e4 = iVar7;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00005780",
                "FUN_00005ecc",
                "FUN_00004bd0",
                "FUN_00005e68",
                "FUN_00004e52",
                "FUN_00005fd8",
                "FUN_000056b0",
                "FUN_00005ebc",
                "FUN_00004f98",
                "FUN_000056a0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00005100",
            "calling": [
                "FUN_000047e4"
            ],
            "imported": false,
            "current_name": "FUNC_00005100"
        },
        "FUN_00005584": {
            "renaming": {
                "FUN_00005584": "divide_and_remainder_00005584",
                "param_1": "result",
                "param_2": "dividend",
                "param_3": "divisor",
                "uVar1": "remainder",
                "uVar2": "quotient"
            },
            "code": "void divide_and_remainder_00005584(uint *result, uint dividend, uint divisor)\n{\n  uint quotient;\n  uint remainder;\n  quotient = dividend / divisor;\n  remainder = dividend % divisor;\n  if (dividend < 0) {\n    if (remainder > 0) {\n      quotient--;\n      remainder += divisor;\n    }\n  }\n  else if (remainder < 0) {\n    quotient++;\n    remainder -= divisor;\n  }\n  *result = quotient;\n  result[1] = remainder;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005584",
            "calling": [
                "FUN_00004634"
            ],
            "imported": false,
            "current_name": "divide_and_remainder_00005584"
        },
        "FUN_00004248": {
            "renaming": {
                "FUN_00004248": "allocate_and_initialize_memory_block_00004248",
                "param_1": "memory_block_address",
                "param_2": "block_size",
                "puVar1": "memory_block_pointer",
                "iVar2": "memory_block_offset"
            },
            "code": "undefined4* allocate_and_initialize_memory_block_00004248(undefined4 memory_block_address, int block_size)\n{\n    undefined4* memory_block_pointer;\n    int memory_block_offset = (block_size - 1) * 0x68;\n    memory_block_pointer = (undefined4*)FUN_00004bd0(memory_block_address, memory_block_offset + 0x74);\n    if (memory_block_pointer != (undefined4*)0x0) {\n        *memory_block_pointer = 0;\n        memory_block_pointer[1] = block_size;\n        memory_block_pointer[2] = memory_block_pointer + 3;\n        FUN_00004622(memory_block_pointer + 3, 0, memory_block_offset + 0x68);\n    }\n    return memory_block_pointer;\n}",
            "called": [
                "FUN_00004bd0",
                "FUN_00004622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004248",
            "calling": [
                "FUN_00004314"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_memory_block_00004248"
        },
        "FUN_00001da2": {
            "renaming": {
                "FUN_00001da2": "get_last_three_bits_of_value_00001da2",
                "param_1": "value",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "ushort get_last_three_bits_of_value_00001da2(ushort value) {\n    ushort shifted_value = value >> 6;\n    ushort last_three_bits = shifted_value & 7;\n    return last_three_bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001da2",
            "calling": [
                "FUN_00001f80",
                "FUN_00001ddc"
            ],
            "imported": false,
            "current_name": "get_last_three_bits_of_value_00001da2"
        },
        "FUN_00001ec4": {
            "renaming": {
                "FUN_00001ec4": "calculate_and_store_result_00001ec4",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "FUN_00001e0c": "calculate",
                "FUN_00001e44": "store_result"
            },
            "code": "void calculate_and_store_result_00001ec4(int input1, int input2)\n{\n  int result = calculate(input1, input2);\n  store_result(input1, input2, result);\n  return;\n}",
            "called": [
                "FUN_00001e44",
                "FUN_00001e0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001ec4",
            "calling": [
                "FUN_00001f80"
            ],
            "imported": false,
            "current_name": "calculate_and_store_result_00001ec4"
        },
        "FUN_00002744": {
            "renaming": {
                "FUN_00002744": "update_data_00002744",
                "param_1": "data",
                "param_2": "value",
                "DAT_00002790": "data_00002790",
                "DAT_00002794": "data_00002794"
            },
            "code": "void update_data_00002744(byte data, uint value) {\n    if (data < 0) {\n        *(char *)((data & 0xf) + DAT_00002790 + 0x14) = (char)((value & 0xff) << 4);\n    }\n    else {\n        *(char *)((char)data + DAT_00002794 + 0x300) = (char)((value & 0xff) << 4);\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002744",
            "calling": [
                "FUN_00002894"
            ],
            "imported": false,
            "current_name": "update_data_00002744"
        },
        "FUN_00002624": {
            "renaming": {
                "FUN_00002624": "send_data_to_server_00002624",
                "param_1": "data",
                "local_10": "server_address",
                "uStack_c": "return_val",
                "FUN_0000281c": "get_server_address",
                "FUN_0000443c": "send_data"
            },
            "code": "int send_data_to_server_00002624(int data)\n{\n  int server_address;\n  int return_val;\n  \n  server_address = get_server_address();\n  return_val = 0;\n  send_data(&server_address, data);\n  return return_val;\n}",
            "called": [
                "FUN_0000443c",
                "FUN_0000281c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002624",
            "calling": [
                "FUN_00003444"
            ],
            "imported": false,
            "current_name": "send_data_to_server_00002624"
        },
        "FUN_00001e0c": {
            "renaming": {
                "FUN_00001e0c": "get_bits_from_array_00001e0c",
                "param_1": "index",
                "param_2": "bit_offset"
            },
            "code": "uint get_bits_from_array_00001e0c(int index, uint bit_offset)\n{\n    uint* array_ptr = (uint*)(PTR_DAT_00001e40 + (((int)bit_offset >> 3) + index * 4) * 4);\n    uint bits_to_shift = (bit_offset & 7) << 2;\n    uint bits_to_return = (*array_ptr >> bits_to_shift) & 0xf;\n    return bits_to_return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001e0c",
            "calling": [
                "FUN_00002028",
                "FUN_00001ec4"
            ],
            "imported": false,
            "current_name": "get_bits_from_array_00001e0c"
        },
        "FUN_00000ef8": {
            "renaming": {
                "FUN_00000ef8": "do_nothing_00000ef8"
            },
            "code": "\nvoid do_nothing_00000ef8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000ef8",
            "calling": [
                "FUN_00000f04"
            ],
            "imported": false,
            "current_name": "do_nothing_00000ef8"
        },
        "FUN_000041d0": {
            "renaming": {
                "FUN_000041d0": "get_data_000041d0",
                "param_1": "input_param",
                "param_2": "undefined_param_1",
                "param_3": "undefined_param_2",
                "pcVar1": "callback_function_ptr",
                "iVar2": "data_ptr",
                "piVar5": "ptr_to_list",
                "uVar7": "result",
                "puVar9": "data_start_ptr",
                "iVar8": "data_ptr_2",
                "iVar6": "data_ptr_3",
                "iVar4": "increment_value"
            },
            "code": "uint get_data_000041d0(int param_1, undefined4 param_2, undefined4 param_3)\n{\n  code *callback_function_ptr = DAT_000041ec;\n  if (param_1 == 0) {\n    int data_ptr = *(int *)PTR_DAT_000041e8;\n    int *ptr_to_list = (int *)(data_ptr + 0x48);\n    uint result = 0;\n    undefined *data_start_ptr = PTR_DAT_000041e8;\n    do {\n      int data_ptr_2 = ptr_to_list[1];\n      int data_ptr_3 = ptr_to_list[2];\n      while (data_ptr_2 = data_ptr_2 + -1, -1 < data_ptr_2) {\n        if ((1 < *(ushort *)(data_ptr_3 + 0xc)) && (*(short *)(data_ptr_3 + 0xe) + 1 != 0)) {\n          uint callback_result = (*callback_function_ptr)(data_ptr,data_ptr_3,param_3,*(short *)(data_ptr_3 + 0xe) + 1,data_start_ptr);\n          result = result | callback_result;\n        }\n        data_ptr_3 = data_ptr_3 + 0x68;\n      }\n      ptr_to_list = (int *)*ptr_to_list;\n    } while (ptr_to_list != (int *)0x0);\n    return result;\n  }\n  uint result_2 = FUN_00004158(*DAT_000041f0,param_1);\n  return result_2;\n}",
            "called": [
                "FUN_00004158"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000041d0",
            "calling": [
                "FUN_00002e48"
            ],
            "imported": false,
            "current_name": "get_data_000041d0"
        },
        "FUN_0000459c": {
            "renaming": {
                "FUN_0000459c": "execute_functions_in_range_0000459c",
                "puVar1": "start_pointer",
                "puVar2": "end_pointer",
                "iVar3": "function_count",
                "ppcVar4": "function_pointer_array",
                "iVar5": "i"
            },
            "code": "void execute_functions_in_range_0000459c(void)\n{\n  undefined *start_pointer;\n  undefined *end_pointer;\n  int function_count;\n  code **function_pointer_array;\n  int i;\n  \n  function_count = (int)PTR_DAT_000045d8 - (int)PTR_DAT_000045d4;\n  function_pointer_array = (code **)PTR_DAT_000045d4;\n  for (i = 0; end_pointer = PTR_DAT_000045e0, start_pointer = PTR_DAT_000045dc, i != function_count >> 2;\n      i = i + 1) {\n    (**function_pointer_array)();\n    function_pointer_array = function_pointer_array + 1;\n  }\n  FUN_00000410();\n  function_pointer_array = (code **)start_pointer;\n  for (function_count = 0; function_count != (int)end_pointer - (int)start_pointer >> 2; function_count = function_count + 1) {\n    (**function_pointer_array)();\n    function_pointer_array = function_pointer_array + 1;\n  }\n  return;\n}",
            "called": [
                "FUN_00000410"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000459c",
            "calling": [
                "FUN_0000099c"
            ],
            "imported": false,
            "current_name": "execute_functions_in_range_0000459c"
        },
        "FUN_000014c4": {
            "renaming": {
                "FUN_000014c4": "update_data_at_index_000014c4",
                "param_1": "index",
                "param_2": "divisor",
                "pbVar1": "data_pointer",
                "uVar2": "data_value",
                "uVar3": "quotient"
            },
            "code": "void update_data_at_index_000014c4(int index, uint divisor) {\\n\\\n    byte *data_pointer;\\n\\\n    uint data_value;\\n\\\n    \\n\\\n    data_pointer = *(byte **)(PTR_DAT_000015cc + index * 0x20);\\n\\\n    data_value = *(uint *)(PTR_DAT_000015cc + index * 0x20 + 4);\\n\\\n    data_pointer[3] = data_pointer[3] & 0xf3;\\n\\\n    data_pointer[2] = PTR_DAT_000015cc[index * 0x20 + 0x1d];\\n\\\n    uint quotient = data_value / (divisor << 4);\\n\\\n    *data_pointer = (byte)(quotient >> 8) & 0x1f;\\n\\\n    data_pointer[1] = (byte)quotient;\\n\\\n    data_pointer[10] = (byte)((data_value << 2) / divisor + 1 >> 1) & 0x1f;\\n\\\n    data_pointer[0x10] = data_pointer[0x10] | 0x88;\\n\\\n    if ((data_pointer[0x10] & 0x70) == 0) {\\n\\\n        data_pointer[0x13] = 0;\\n\\\n    }\\n\\\n    else {\\n\\\n        data_pointer[0x13] = (char)(2 << (data_pointer[0x10] >> 4 & 7)) - 1;\\n\\\n    }\\n\\\n    data_pointer[0x15] = 1;\\n\\\n    data_pointer[0x11] = 0xc0;\\n\\\n    data_pointer[3] = data_pointer[3] | 0x2c;\\n\\\n    process_data((int)(char)PTR_DAT_000015cc[index * 0x20 + 0x14]);\\n\\\n    return;\\n\\\n}",
            "called": [
                "FUN_00001318"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000014c4",
            "calling": [
                "FUN_000013b8"
            ],
            "imported": false,
            "current_name": "update_data_at_index_000014c4"
        },
        "FUN_00004b34": {
            "renaming": {
                "FUN_00004b34": "insert_node_00004b34",
                "param_1": "error_code",
                "param_2": "node_address",
                "param_3": "node_size",
                "param_4": "unused",
                "puVar1": "pointer_variable_1",
                "piVar2": "pointer_variable_2",
                "extraout_r1": "pointer_variable_3",
                "ppiVar3": "pointer_to_pointer_variable_3",
                "ppiVar4": "pointer_to_pointer_variable_4",
                "ppiVar5": "pointer_to_pointer_variable_5",
                "ppiVar6": "pointer_to_pointer_variable_6",
                "bVar7": "boolean_variable",
                "PTR_DAT_00004bcc": "NODE_LIST_HEAD_POINTER"
            },
            "code": "void insert_node_00004b34(int* error_code, int* node_address, int node_size, int unused) {\n    int** previous_node_pointer;\n    int** current_node_pointer;\n    int** head_node_pointer;\n    bool is_head_node_empty;\n  \n    if (node_size == 0) {\n        return;\n    }\n  \n    current_node_pointer = (int**)(node_size + -4 + node_address);\n    if (*(int*)(node_size + -4 + node_address) < 0) {\n        current_node_pointer = (int**)((int)current_node_pointer + *(int*)(node_size + -4 + node_address));\n    }\n  \n    initialize_node_list();\n    head_node_pointer = *(int***)PTR_DAT_00004bcc;\n    is_head_node_empty = (head_node_pointer == NULL);\n  \n    if (is_head_node_empty) {\n        current_node_pointer[1] = NULL;\n        *(int***)PTR_DAT_00004bcc = current_node_pointer;\n        previous_node_pointer = (int**)unused;\n        current_node_pointer = (int**)PTR_DAT_00004bcc;\n    }\n    else if (current_node_pointer < head_node_pointer) {\n        previous_node_pointer = (int**)*current_node_pointer;\n        current_node_pointer = (int**)((int)current_node_pointer + (int)previous_node_pointer);\n        bool is_current_node_head = (head_node_pointer == current_node_pointer);\n        if (is_current_node_head) {\n            previous_node_pointer = (int**)*head_node_pointer;\n            head_node_pointer = (int**)head_node_pointer[1];\n        }\n        current_node_pointer[1] = (int*)head_node_pointer;\n        if (is_current_node_head) {\n            current_node_pointer = (int**)((int)previous_node_pointer + (int)current_node_pointer);\n            *current_node_pointer = (int*)previous_node_pointer;\n        }\n        *(int***)PTR_DAT_00004bcc = current_node_pointer;\n    }\n    else {\n        do {\n            previous_node_pointer = head_node_pointer;\n            head_node_pointer = (int**)previous_node_pointer[1];\n            if (head_node_pointer == NULL) break;\n        } while (head_node_pointer <= current_node_pointer);\n        int** previous_node = (int**)*previous_node_pointer;\n        if ((int**)((int)previous_node_pointer + (int)previous_node) == current_node_pointer) {\n            previous_node = (int**)((int)previous_node + (int)*current_node_pointer);\n            *previous_node_pointer = (int*)previous_node;\n            if (head_node_pointer == (int**)((int)previous_node_pointer + (int)previous_node)) {\n                int* next_node = *head_node_pointer;\n                previous_node_pointer[1] = head_node_pointer[1];\n                previous_node = (int**)((int)previous_node + (int)next_node);\n                *previous_node_pointer = (int*)previous_node;\n            }\n        }\n        else if (current_node_pointer < (int**)((int)previous_node_pointer + (int)previous_node)) {\n            *error_code = 0xc;\n        }\n        else {\n            int** next_node_pointer = (int**)((int)current_node_pointer + (int)*current_node_pointer);\n            bool is_current_node_head = (head_node_pointer == next_node_pointer);\n            if (is_current_node_head) {\n                next_node_pointer = (int**)*head_node_pointer;\n                head_node_pointer = (int**)head_node_pointer[1];\n            }\n            current_node_pointer[1] = (int*)head_node_pointer;\n            if (is_current_node_head) {\n                next_node_pointer = (int**)((int)next_node_pointer + (int)*current_node_pointer);\n                *current_node_pointer = (int*)next_node_pointer;\n            }\n            previous_node_pointer[1] = (int*)current_node_pointer;\n        }\n    }\n    finalize_node_list(error_code, previous_node_pointer, current_node_pointer, unused);\n    return;\n}",
            "called": [
                "FUN_0000579c",
                "FUN_00005790"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004b34",
            "calling": [
                "FUN_00005780",
                "FUN_00006192",
                "FUN_0000404c",
                "FUN_00006768",
                "FUN_000054a8",
                "FUN_000060cc"
            ],
            "imported": false,
            "current_name": "insert_node_00004b34"
        },
        "FUN_000004f2": {
            "renaming": {
                "FUN_000004f2": "set_param_to_19_000004f2",
                "param_1": "param_value"
            },
            "code": "uint32_t set_param_to_19_000004f2(uint32_t *param_value)\n{\n    *param_value = 19;\n    return 0xFFFFFFFF;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000004f2",
            "calling": [
                "FUN_00004e26",
                "FUN_00004dee"
            ],
            "imported": false,
            "current_name": "set_param_to_19_000004f2"
        },
        "FUN_00004e66": {
            "renaming": {
                "FUN_00004e66": "compare_strings_00004e66",
                "param_1": "string_1",
                "param_2": "length_1",
                "param_3": "length_2",
                "pbVar1": "current_char_1",
                "pbVar2": "current_char_2",
                "uVar3": "char_code_1"
            },
            "code": "int compare_strings_00004e66(byte *string_1, int length_1, byte *string_2, int length_2)\n{\n  byte *current_char_1;\n  byte *current_char_2;\n  uint char_code_1;\n  uint char_code_2;\n  if (length_2 != 0) {\n    current_char_2 = (byte *)(length_2 + string_2 - 1);\n    current_char_1 = string_1;\n    do {\n      char_code_1 = (uint)*current_char_1;\n      char_code_2 = (uint)*current_char_2;\n      current_char_2 = current_char_2 + 1;\n      if ((char_code_1 != char_code_2) || (current_char_1 + 1 == string_1 + length_1)) break;\n      current_char_1 = current_char_1 + 1;\n    } while (char_code_1 != 0);\n    length_2 = char_code_1 - char_code_2;\n  }\n  return length_2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004e66",
            "calling": [
                "FUN_00003524",
                "FUN_0000562c"
            ],
            "imported": false,
            "current_name": "compare_strings_00004e66"
        },
        "FUN_00005ecc": {
            "renaming": {
                "FUN_00005ecc": "find_end_of_null_terminated_string_00005ecc",
                "param_1": "str",
                "pcVar2": "current_char",
                "pcVar3": "current_char_pointer",
                "cVar1": "current_char_value"
            },
            "code": "char* find_end_of_null_terminated_string_00005ecc(char* str) {\n  char* current_char = str;\n  while (*current_char != '\\0') {\n    current_char++;\n  }\n  return current_char;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005ecc",
            "calling": [
                "FUN_00005100",
                "FUN_00005e68"
            ],
            "imported": false,
            "current_name": "find_end_of_null_terminated_string_00005ecc"
        },
        "FUN_0000129c": {
            "renaming": {
                "FUN_0000129c": "process_data_0000129c",
                "param_1": "data",
                "FUN_00002434": "send_data"
            },
            "code": "void process_data_0000129c(void *data)\n{\n  send_data(data, 1);\n  return;\n}",
            "called": [
                "FUN_00002434"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000129c",
            "calling": [
                "FUN_000012e2"
            ],
            "imported": false,
            "current_name": "process_data_0000129c"
        },
        "FUN_00001628": {
            "renaming": {
                "FUN_00001628": "check_and_call_function_00001628",
                "param_1": "index",
                "PTR_DAT_00001680": "ptr_data_1",
                "PTR_DAT_00001684": "ptr_data_2"
            },
            "code": "void check_and_call_function_00001628(int index)\n{\n    int* ptr = *(int**)(PTR_DAT_00001680 + index * 0x20);\n    byte flags = *(byte*)(ptr + 4);\n    bool is_flag_set = (flags & 0x20) != 0;\n    int* func_ptr = *(int**)(PTR_DAT_00001684 + index * 8);\n    bool is_func_ptr_valid = (func_ptr != 0);\n    if (is_flag_set && is_func_ptr_valid) {\n        code* func = *(code**)func_ptr;\n        undefined4 arg1 = *(undefined4*)(func_ptr + 1);\n        undefined arg2 = *(undefined*)(ptr + 7);\n        func(arg1, arg2);\n    }\n    call_another_function();\n    return;\n}",
            "called": [
                "FUN_00001348"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001628",
            "calling": [
                "FUN_00001688"
            ],
            "imported": false,
            "current_name": "check_and_call_function_00001628"
        },
        "FUN_00001748": {
            "renaming": {
                "FUN_00001748": "set_param_value_00001748",
                "param_1": "new_value",
                "*(byte *)(DAT_00001774 + 3)": "current_value",
                "masked_new_value": "masked_new_value",
                "data_ptr": "data_ptr"
            },
            "code": "void set_param_value_00001748(byte new_value) {\n    byte* data_ptr = (byte*)(DAT_00001774 + 3);\n    byte *(byte *)(DAT_00001774 + 3) = *data_ptr;\n    byte masked_new_value = new_value | (*(byte *)(DAT_00001774 + 3) & 0x1f);\n    *data_ptr = masked_new_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001748",
            "calling": [
                "FUN_000019c0",
                "FUN_00001bb8",
                "FUN_000018bc",
                "FUN_00001960",
                "FUN_0000191c"
            ],
            "imported": false,
            "current_name": "set_param_value_00001748"
        },
        "FUN_0000294c": {
            "renaming": {
                "FUN_0000294c": "set_flag_on_data_0000294c",
                "DAT_0000296c": "data_ptr"
            },
            "code": "void set_flag_on_data_0000294c(void)\n{\n  uint* DAT_0000296c = (uint*)(DAT_0000296c + 0x14);\n  uint flag = 0x10;\n  *DAT_0000296c |= flag;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000294c",
            "calling": [
                "FUN_000027b0",
                "FUN_000026d8"
            ],
            "imported": false,
            "current_name": "set_flag_on_data_0000294c"
        },
        "FUN_00005790": {
            "renaming": {
                "FUN_00005790": "do_nothing_with_pointer_00005790",
                "PTR_DAT_00005798": "ptr"
            },
            "code": "void do_nothing_with_pointer_00005790(void* PTR_DAT_00005798) {\n  do_nothing(PTR_DAT_00005798);\n  return;\n}",
            "called": [
                "FUN_000045e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005790",
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "imported": false,
            "current_name": "do_nothing_with_pointer_00005790"
        },
        "FUN_00000534": {
            "renaming": {
                "FUN_00000534": "check_valid_input_00000534",
                "param_1": "input",
                "param_2": "input_size",
                "uVar1": "valid_input"
            },
            "code": "int check_valid_input_00000534(int *input, int input_size) {\n    *input = 0;\n    if (input_size >= 0 && input_size <= 2) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000534",
            "calling": [
                "FUN_00005700"
            ],
            "imported": false,
            "current_name": "check_valid_input_00000534"
        },
        "FUN_000017dc": {
            "renaming": {
                "FUN_000017dc": "set_flag_and_mask_000017dc",
                "FUN_000016c8": "set_value",
                "DAT_00001820": "ptr_data_1",
                "DAT_00001824": "ptr_data_2",
                "DAT_00001828": "ptr_data_3"
            },
            "code": "void set_flag_and_mask_000017dc(void)\n{\n  set_value(DAT_00001820,0x1d);\n  if ((*(uint *)(DAT_00001824 + 0x10) & 0x100) == 0) {\n    *(undefined4 *)(DAT_00001824 + 0x10) = 0x104;\n  }\n  *DAT_00001828 = (*DAT_00001828 & 0xfff3ffff) | 0x80000;\n  return;\n}",
            "called": [
                "FUN_000016c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000017dc",
            "calling": [
                "FUN_00001c84"
            ],
            "imported": false,
            "current_name": "set_flag_and_mask_000017dc"
        },
        "FUN_00000410": {
            "renaming": {
                "FUN_00000410": "execute_function_00000410",
                "FUN_00000df4": "call_another_function"
            },
            "code": "void execute_function_00000410(void)\n{\n  call_another_function();\n  return;\n}",
            "called": [
                "FUN_00000df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000410",
            "calling": [
                "FUN_0000459c"
            ],
            "imported": false,
            "current_name": "execute_function_00000410"
        },
        "FUN_000005ca": {
            "renaming": {
                "FUN_000005ca": "get_first_element_000005ca",
                "param_1": "list_ptr",
                "puVar1": "first_element_ptr"
            },
            "code": "undefined4 get_first_element_000005ca(int *list_ptr)\n{\n  undefined4 *first_element_ptr;\n  \n  if (*list_ptr == 0) {\n    first_element_ptr = (undefined4 *)0x0;\n  }\n  else {\n    first_element_ptr = *(undefined4 **)*list_ptr;\n    if (first_element_ptr == (undefined4 *)*list_ptr) {\n      *list_ptr = 0;\n    }\n    else {\n      *(undefined4 *)*list_ptr = *first_element_ptr;\n    }\n  }\n  return first_element_ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000005ca",
            "calling": [
                "FUN_00000698"
            ],
            "imported": false,
            "current_name": "get_first_element_000005ca"
        },
        "FUN_00005ff8": {
            "renaming": {
                "FUN_00005ff8": "do_nothing_with_data_00005ff8"
            },
            "code": "void do_nothing_with_data_00005ff8(void)\n{\n  do_nothing(DAT_00006000);\n  return;\n}",
            "called": [
                "FUN_000045ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005ff8",
            "calling": [
                "FUN_0000562c"
            ],
            "imported": false,
            "current_name": "do_nothing_with_data_00005ff8"
        },
        "FUN_00002714": {
            "renaming": {
                "FUN_00002714": "set_bit_in_array_00002714",
                "param_1": "bit_position",
                "DAT_00002740": "array_start_address"
            },
            "code": "void set_bit_in_array_00002714(uint8_t bit_position){\n    uint32_t* array_pointer = (uint32_t*)(DAT_00002740 + ((uint32_t)bit_position >> 5) * 4);\n    uint8_t bit_offset = bit_position & 0x1f;\n    uint32_t bit_mask = 1 << bit_offset;\n    *array_pointer = bit_mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002714",
            "calling": [
                "FUN_00002894"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_00002714"
        },
        "FUN_000020e0": {
            "renaming": {
                "FUN_000020e0": "process_data_000020e0",
                "DAT_000020f0": "data_array",
                "FUN_00002028": "send_data_to_server"
            },
            "code": "void process_data_000020e0(void)\n{\n  send_data_to_server(DAT_000020f0, 2);\n  return;\n}",
            "called": [
                "FUN_00002028"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000020e0",
            "calling": [],
            "imported": false,
            "current_name": "process_data_000020e0"
        },
        "FUN_00005fec": {
            "renaming": {
                "FUN_00005fec": "do_nothing_with_data_00005fec",
                "DAT_00005ff4": "data",
                "do_nothing_000045e8": "do_nothing"
            },
            "code": "void do_nothing_with_data_00005fec(void* DAT_00005ff4)\n{\n    do_nothing(DAT_00005ff4);\n    return;\n}",
            "called": [
                "FUN_000045e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005fec",
            "calling": [
                "FUN_0000562c"
            ],
            "imported": false,
            "current_name": "do_nothing_with_data_00005fec"
        },
        "FUN_00004f84": {
            "renaming": {
                "FUN_00004f84": "parse_uint_00004f84",
                "param_1": "input",
                "param_2": "endptr",
                "param_3": "base",
                "uVar1": "result",
                "uVar2": "digit",
                "uVar3": "flag",
                "uVar4": "digit_value",
                "iVar5": "status",
                "uVar6": "max_uint",
                "uVar7": "max_quotient",
                "pbVar8": "current",
                "pbVar9": "next",
                "PTR_DAT_00004f7c": "digit_values"
            },
            "code": "uint parse_uint_00004f84(byte *input, byte **endptr, uint base) {\n  uint result = 0;\n  int sign = 1;\n  byte *current = input;\n  while (*current == ' ') current++;\n  if (*current == '-') {\n    sign = -1;\n    current++;\n  } else if (*current == '+') {\n    current++;\n  }\n  if (base == 0) {\n    if (*current == '0') {\n      base = 8;\n      current++;\n      if ((*current == 'x') || (*current == 'X')) {\n        base = 16;\n        current++;\n      }\n    } else {\n      base = 10;\n    }\n  } else if (base == 16) {\n    if ((*current == '0') && ((*(current + 1) == 'x') || (*(current + 1) == 'X'))) {\n      current += 2;\n    }\n  }\n  while (*current != 0) {\n    uint digit = *current - '0';\n    if ((*current >= 'a') && (*current <= 'z')) {\n      digit = *current - 'a' + 10;\n    } else if ((*current >= 'A') && (*current <= 'Z')) {\n      digit = *current - 'A' + 10;\n    }\n    if (digit >= base) break;\n    result = result * base + digit;\n    current++;\n  }\n  if (endptr != 0) {\n    *endptr = current;\n  }\n  return sign * result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004f84",
            "calling": [
                "FUN_0000328c",
                "FUN_00004042"
            ],
            "imported": false,
            "current_name": "parse_uint_00004f84"
        },
        "FUN_000028f0": {
            "renaming": {
                "FUN_000028f0": "get_dat_value_plus_one_000028f0",
                "DAT_0000290c": "PTR_DAT_0000290c"
            },
            "code": "int get_dat_value_plus_one_000028f0(void)\n{\n    int* dat_address = (int*)(DAT_0000290c + 8);\n    int dat_value = *dat_address;\n    int result = dat_value + 1;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000028f0",
            "calling": [
                "FUN_00002690"
            ],
            "imported": false,
            "current_name": "get_dat_value_plus_one_000028f0"
        },
        "FUN_00004f98": {
            "renaming": {
                "FUN_00004f98": "validate_date_00004f98",
                "param_1": "year",
                "puVar1": "date_info",
                "uVar2": "result",
                "uVar3": "leap_years",
                "iVar4": "is_february",
                "puVar5": "current_date_info",
                "iVar6": "non_leap_years",
                "iVar8": "days_until_month_start",
                "iVar9": "days_until_week_start",
                "uVar10": "days_until_year_start",
                "uVar7": "shift_amount",
                "days_since_1900": "days_since_1900",
                "month": "month",
                "day": "day",
                "weekday": "weekday",
                "week_number": "week_number",
                "date_code": "date_code",
                "is_valid_date": "is_valid_date",
                "days_since_last_valid_date": "days_since_last_valid_date",
                "is_not_too_early": "is_not_too_early",
                "is_not_too_late": "is_not_too_late",
                "is_valid_weekday": "is_valid_weekday",
                "is_valid_week_number": "is_valid_week_number",
                "is_valid_date_code": "is_valid_date_code",
                "is_valid": "is_valid"
            },
            "code": "uint validate_date_00004f98(uint x);\n\nuint validate_date_00004f98(uint year)\n{\n    uint *date_info = (uint *)FUN_000056b0();\n    if (year < 1900 || year > 9999) {\n        return 0;\n    }\n    uint leap_years = year / 4 - year / 100 + year / 400;\n    uint non_leap_years = year - 1900 - leap_years;\n    uint days_since_1900 = non_leap_years * 365 + leap_years * 366;\n    uint days_until_year_start = validate_date_00004f98(year % 4 ? year % 100 : year % 400);\n    days_since_1900 += days_until_year_start;\n    date_info[1] = year;\n    uint month = 1;\n    uint day = 1;\n    while (days_since_1900 > 0)\n    {\n        uint days_in_month = calculate_days_in_month(year, month);\n        if (days_since_1900 >= days_in_month)\n        {\n            days_since_1900 -= days_in_month;\n            month++;\n            if (month > 12)\n            {\n                month = 1;\n                year++;\n            }\n        }\n        else\n        {\n            day += days_since_1900;\n            days_since_1900 = 0;\n        }\n    }\n    uint weekday = calculate_weekday(year, month, day);\n    uint week_number = calculate_week_number(year, month, day);\n    uint date_code = calculate_date_code(year, month, day);\n    uint is_valid_date = (uint)(date_info[8] >= date_info[18]);\n    uint days_since_last_valid_date = date_info[9] - date_info[19];\n    uint is_not_too_early = (uint)(days_since_last_valid_date >= 0);\n    uint is_not_too_late = (uint)(days_since_last_valid_date <= 6);\n    uint is_valid_weekday = (uint)(weekday == date_info[13]);\n    uint is_valid_week_number = (uint)(week_number == date_info[14]);\n    uint is_valid_date_code = (uint)(date_code == date_info[15]);\n    uint is_valid = is_valid_date && is_not_too_early && is_not_too_late && is_valid_weekday && is_valid_week_number && is_valid_date_code;\n    date_info[0] = is_valid;\n    return 1;\n}\n",
            "called": [
                "FUN_000056b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004f98",
            "calling": [
                "FUN_000047e4",
                "FUN_00005100"
            ],
            "imported": false,
            "current_name": "validate_date_00004f98"
        },
        "FUN_00004dee": {
            "renaming": {
                "FUN_00004dee": "process_data_00004dee",
                "param_1": "data_ptr",
                "param_2": "data_offset",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "result",
                "ushort": "ushort",
                "FUN_000004f2": "do_something",
                "short": "short",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "undefined4 process_data_00004dee(undefined4 data_ptr, int data_offset, undefined4 param_3, undefined4 param_4) {\n  \n  ushort* data_ptr_short = (ushort*)(data_offset + 0xc);\n  \n  if ((int)((uint)*data_ptr_short << 0x17) < 0) {\n    FUN_000004f2(data_ptr, (int)*(short *)(data_offset + 0xe), 0, 2);\n  }\n  \n  *data_ptr_short = *data_ptr_short & 0xefff;\n  undefined4 result = FUN_00000e38(param_3, param_4);\n  return result;\n}",
            "called": [
                "FUN_00000e38",
                "FUN_000004f2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004dee",
            "calling": [],
            "imported": false,
            "current_name": "process_data_00004dee"
        },
        "FUN_00000fec": {
            "renaming": {
                "FUN_00000fec": "initialize_memory_00000fec",
                "param_1": "memory",
                "param_2": "size_minus_one",
                "PTR_s_FAILED_ASSERTION__00001030": "failed_assertion_message"
            },
            "code": "void initialize_memory_00000fec(uint32_t* memory, uint32_t size_minus_one) {\n    if ((size_minus_one & (size_minus_one - 1)) != 0) {\n        assert(false && \"Size must be a power of 2\");\n    }\n    memory[0] = 0;\n    memory[1] = 0;\n    memory[2] = size_minus_one;\n    return;\n}",
            "called": [
                "FUN_00000f04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000fec",
            "calling": [
                "FUN_000010d4"
            ],
            "imported": false,
            "current_name": "initialize_memory_00000fec"
        },
        "FUN_00000428": {
            "renaming": {
                "FUN_00000428": "validate_range_and_update_offset_00000428",
                "*param_1": "*result",
                "param_2": "offset",
                "uVar1": "status",
                "local_c": "rel_array_ptr_value"
            },
            "code": "undefined4 validate_range_and_update_offset_00000428(undefined4 *result, int offset)\n{\n    undefined4 status;\n    undefined4 rel_array_ptr_value;\n    status = FUN_00000cd0();\n    rel_array_ptr_value = *(undefined4*)PTR_Elf32_Rel_ARRAY_00000484;\n    if ((DAT_00000488 < (uint)(offset + *(int*)PTR_Elf32_Rel_ARRAY_00000484)) || ((uint)(offset + *(int*)PTR_Elf32_Rel_ARRAY_00000484) < DAT_0000048c))\n    {\n        *result = 0xc;\n        rel_array_ptr_value = 0xffffffff;\n    }\n    else\n    {\n        *(int*)PTR_Elf32_Rel_ARRAY_00000484 = offset + *(int*)PTR_Elf32_Rel_ARRAY_00000484;\n    }\n    FUN_00000d0c(status);\n    return rel_array_ptr_value;\n}",
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000428",
            "calling": [
                "FUN_00004bd0"
            ],
            "imported": false,
            "current_name": "validate_range_and_update_offset_00000428"
        },
        "FUN_000039e8": {
            "renaming": {
                "FUN_000039e8": "map_char_to_class_000039e8",
                "param_1": "ch",
                "puVar1": "class_ptr"
            },
            "code": "undefined * map_char_to_class_000039e8(char ch) {\n    undefined *class_ptr;\n    class_ptr = PTR_s_CLASS_UNKNOWN_00003d20;\n    switch(ch) {\n        case '\\0':\n            class_ptr = DAT_00003cc0;\n            break;\n        case '@':\n            class_ptr = DAT_00003cc4;\n            break;\n        case 'B':\n            class_ptr = DAT_00003cc8;\n            break;\n        case 'C':\n            class_ptr = PTR_s_ACT_SERVO_00003ccc;\n            break;\n        case 'D':\n            class_ptr = PTR_s_ACT_MOTOR_00003cd0;\n            break;\n        case 'E':\n            class_ptr = PTR_s_ACT_SWITCH_00003cd4;\n            break;\n        case 'F':\n            class_ptr = PTR_s_ACT_DIMMER_00003cd8;\n            break;\n        case -0x80:\n            class_ptr = PTR_s_SENSE_ANY_00003cdc;\n            break;\n        case -0x7f:\n            class_ptr = PTR_s_SENSE_BTN_00003ce0;\n            break;\n        case -0x7e:\n            class_ptr = PTR_s_SENSE_TEMP_00003ce4;\n            break;\n        case -0x7d:\n            class_ptr = PTR_s_SENSE_HUM_00003ce8;\n            break;\n        case -0x7c:\n            class_ptr = PTR_s_SENSE_LIGHT_00003cec;\n            break;\n        case -0x7b:\n            class_ptr = PTR_s_SENSE_ACCEL_00003cf0;\n            break;\n        case -0x7a:\n            class_ptr = PTR_s_SENSE_MAG_00003cf4;\n            break;\n        case -0x79:\n            class_ptr = PTR_s_SENSE_GYRO_00003cf8;\n            break;\n        case -0x78:\n            class_ptr = PTR_s_SENSE_COLOR_00003cfc;\n            break;\n        case -0x77:\n            class_ptr = PTR_s_SENSE_PRESS_00003d00;\n            break;\n        case -0x76:\n            class_ptr = PTR_s_SENSE_ANALOG_00003d04;\n            break;\n        case -0x75:\n            class_ptr = PTR_s_SENSE_UV_00003d08;\n            break;\n        case -0x74:\n            class_ptr = PTR_s_SENSE_OBJTEMP_00003d0c;\n            break;\n        case -0x73:\n            class_ptr = PTR_s_SENSE_PULSE_COUNT_00003d10;\n            break;\n        case -0x72:\n            class_ptr = PTR_s_SENSE_DISTANCE_00003d14;\n            break;\n        case -0x71:\n            class_ptr = PTR_s_SENSE_CO2_00003d18;\n            break;\n        default:\n            if (ch == -1) {\n                return PTR_s_CLASS_ANY_00003d1c;\n            }\n    }\n    return class_ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000039e8",
            "calling": [
                "FUN_00002ecc",
                "FUN_00002f74"
            ],
            "imported": false,
            "current_name": "map_char_to_class_000039e8"
        },
        "FUN_00000e38": {
            "renaming": {
                "FUN_00000e38": "process_data_00000e38",
                "param_1": "data",
                "param_2": "result",
                "FUN_000015d0": "execute_function"
            },
            "code": "int32_t process_data_00000e38(int32_t data, int32_t result){\n  execute_function(0, data, result);\n  return result;\n}",
            "called": [
                "FUN_000015d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000e38",
            "calling": [
                "FUN_00004dee"
            ],
            "imported": false,
            "current_name": "process_data_00000e38"
        },
        "FUN_00002294": {
            "renaming": {
                "FUN_00002294": "is_difference_equal_to_third_00002294",
                "param_1": "input_param",
                "uVar1": "result",
                "iVar2": "second_value",
                "bVar3": "is_equal"
            },
            "code": "bool is_difference_equal_to_third_00002294(int input_param){\n  int second_value = *(int *)(input_param + 4);\n  bool is_equal = *(int *)(input_param + 0xc) - *(int *)(input_param + 8) == second_value;\n  if (is_equal) {\n    second_value = 1;\n  }\n  return (bool)second_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002294",
            "calling": [
                "FUN_00002364"
            ],
            "imported": false,
            "current_name": "is_difference_equal_to_third_00002294"
        },
        "FUN_00003e9e": {
            "renaming": {
                "FUN_00003e9e": "calculate_result_00003e9e",
                "param_1": "data",
                "param_2": "length",
                "param_3": "config",
                "uVar1": "result",
                "FUN_00003ec4": "calculate"
            },
            "code": "int calculate_result_00003e9e(void *data, int length, void *config) {\n  int result = calculate(data, length, config);\n  return result;\n}",
            "called": [
                "FUN_00003ec4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003e9e",
            "calling": [
                "FUN_00003694"
            ],
            "imported": false,
            "current_name": "calculate_result_00003e9e"
        },
        "FUN_00003378": {
            "renaming": {
                "FUN_00003378": "convert_params_to_values_00003378",
                "*param_1": "arg4",
                "param_1[5] + 0x76c": "offset",
                "param_1[4] + 1": "length",
                "param_1[3]": "arg1",
                "param_1[2]": "arg2",
                "param_1[1]": "arg3"
            },
            "code": "int convert_params_to_values_00003378(int *data)\n{\n    int offset = 0x76c;\n    int length = data[4] + 1;\n    int arg1 = data[3];\n    int arg2 = data[2];\n    int arg3 = data[1];\n    int arg4 = data[0];\n    convert_data(PTR_s__04i__02i__02i__02i__02i__02i_000033bc, offset, length, arg1, arg2, arg3, arg4);\n    return 0;\n}",
            "called": [
                "FUN_00004c84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003378",
            "calling": [
                "FUN_000033c0",
                "FUN_00003444"
            ],
            "imported": false,
            "current_name": "convert_params_to_values_00003378"
        },
        "FUN_00006768": {
            "renaming": {
                "FUN_00006768": "process_data_00006768",
                "param_1": "input_buffer",
                "param_2": "output_buffer",
                "param_3": "data_length",
                "param_4": "unknown_value",
                "uVar1": "flags",
                "iVar2": "result",
                "uVar3": "function_return_value",
                "uVar4": "data_flags",
                "uVar5": "data_value"
            },
            "code": "undefined4 process_data_00006768(undefined4 *input_buffer, undefined4 *output_buffer, undefined4 data_length, undefined4 unknown_value)\n{\n  undefined2 flags;\n  int result;\n  undefined4 function_return_value;\n  ushort data_flags;\n  uint data_value;\n\n  if ((input_buffer != NULL) && (input_buffer[6] == 0)) {\n    initialize();\n  }\n  if (output_buffer == (undefined4 *)PTR_DAT_00006868) {\n    output_buffer = (undefined4 *)input_buffer[1];\n  }\n  else if (output_buffer == (undefined4 *)PTR_DAT_0000686c) {\n    output_buffer = (undefined4 *)input_buffer[2];\n  }\n  else if (output_buffer == (undefined4 *)PTR_DAT_00006870) {\n    output_buffer = (undefined4 *)input_buffer[3];\n  }\n  data_flags = *(ushort *)(output_buffer + 3);\n  output_buffer[1] = 0;\n  data_value = (uint)*(ushort *)(output_buffer + 3);\n  if ((int)(data_value << 0x1a) < 0) {\n    return 0xffffffff;\n  }\n  if ((int)(data_value << 0x1d) < 0) {\n    if ((undefined4 *)output_buffer[0xd] != NULL) {\n      if ((undefined4 *)output_buffer[0xd] != output_buffer + 0x11) {\n        cleanup(input_buffer);\n      }\n      output_buffer[1] = output_buffer[0x10];\n      output_buffer[0xd] = 0;\n      if (output_buffer[0x10] != 0) {\n        *output_buffer = output_buffer[0xf];\n        return 0;\n      }\n    }\n  }\n  else {\n    if (-1 < (int)(data_value << 0x1b)) {\n      *input_buffer = 9;\n      data_flags |= 0x40;\n      goto LAB_000067b8;\n    }\n    if ((int)(data_value << 0x1c) < 0) {\n      result = process_data_00006768_helper(input_buffer, output_buffer, data_value << 0x1c, data_value, unknown_value);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      output_buffer[2] = 0;\n      *(ushort *)(output_buffer + 3) &= 0xfff7;\n      output_buffer[6] = 0;\n    }\n    *(ushort *)(output_buffer + 3) |= 4;\n  }\n  if (output_buffer[4] == 0) {\n    do_something(input_buffer, output_buffer);\n  }\n  data_flags = *(ushort *)(output_buffer + 3);\n  flags = *(undefined2 *)(output_buffer + 3);\n  if ((data_flags & 3) != 0) {\n    *(undefined2 *)(output_buffer + 3) = 1;\n    do_something_else(*(undefined4 *)PTR_DAT_00006874,PTR_LAB_00006754_1_00006878);\n    *(undefined2 *)(output_buffer + 3) = flags;\n    if ((data_flags & 9) == 9) {\n      do_something_special(input_buffer, output_buffer);\n    }\n  }\n  function_return_value = output_buffer[4];\n  *output_buffer = function_return_value;\n  result = (*(code *)output_buffer[9])(input_buffer,output_buffer[8],function_return_value,output_buffer[5]);\n  output_buffer[1] = result;\n  if (0 < result) {\n    return 0;\n  }\n  data_flags = *(ushort *)(output_buffer + 3);\n  if (result != 0) {\n    function_return_value = 0;\n  }\n  else {\n    data_flags |= 0x20;\n  }\n  if (result != 0) {\n    output_buffer[1] = function_return_value;\n    data_flags |= 0x40;\n  }\nLAB_000067b8:\n  *(ushort *)(output_buffer + 3) = data_flags;\n  return 0xffffffff;\n}\n",
            "called": [
                "FUN_00004158",
                "FUN_0000404c",
                "FUN_00004b34",
                "FUN_000043a0",
                "FUN_000042a4",
                "FUN_00005700"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00006768",
            "calling": [
                "FUN_00005e10"
            ],
            "imported": false,
            "current_name": "process_data_00006768"
        },
        "FUN_00000db0": {
            "renaming": {
                "FUN_00000db0": "call_two_functions_00000db0",
                "FUN_00000dcc": "call_function_one",
                "FUN_00000d9c": "call_function_two"
            },
            "code": "void call_two_functions_00000db0(void)\n{\n  call_function_one();\n  call_function_two();\n  return;\n}",
            "called": [
                "FUN_00000d9c",
                "FUN_00000dcc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000db0",
            "calling": [
                "FUN_0000099c"
            ],
            "imported": false,
            "current_name": "call_two_functions_00000db0"
        },
        "FUN_00002600": {
            "renaming": {
                "FUN_00002600": "process_data_and_return_zero_00002600",
                "param_1": "data",
                "uVar1": "processed_data",
                "FUNC_000047e4": "process_data",
                "FUN_0000285c": "print_processed_data"
            },
            "code": "int process_data_and_return_zero_00002600(int data)\n{\n  int processed_data = process_data(data);\n  print_processed_data(processed_data);\n  return 0;\n}",
            "called": [
                "FUN_000047e4",
                "FUN_0000285c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002600",
            "calling": [
                "FUN_00003478"
            ],
            "imported": false,
            "current_name": "process_data_and_return_zero_00002600"
        },
        "FUN_00003810": {
            "renaming": {
                "FUN_00003810": "get_label_for_param_00003810",
                "param_1": "param",
                "puVar1": "label"
            },
            "code": "undefined* get_label_for_param_00003810(undefined param){\n    undefined* label = PTR_LAB_00003914;\n    switch(param) {\n        case 2:\n            label = PTR_LAB_000038cc;\n            break;\n        case 3:\n            label = PTR_LAB_000038d0;\n            break;\n        case 4:\n            label = PTR_LAB_000038d4;\n            break;\n        case 5:\n            label = PTR_LAB_000038d8;\n            break;\n        case 6:\n            label = PTR_LAB_000038dc;\n            break;\n        case 7:\n            label = PTR_LAB_000038e0;\n            break;\n        case 8:\n            label = PTR_LAB_000038e4;\n            break;\n        case 9:\n            label = PTR_LAB_000038e8;\n            break;\n        case 10:\n            label = PTR_LAB_000038ec;\n            break;\n        case 0xb:\n            label = PTR_LAB_000038f0;\n            break;\n        case 0xc:\n            label = PTR_LAB_000038f4;\n            break;\n        case 0xd:\n            label = PTR_LAB_000038f8;\n            break;\n        case 0xe:\n            label = PTR_LAB_000038fc;\n            break;\n        case 0xf:\n            label = PTR_LAB_00003900;\n            break;\n        case 0x10:\n            label = PTR_LAB_00003904;\n            break;\n        case 0x11:\n            label = PTR_LAB_0000390c;\n            break;\n        case 0x13:\n            label = PTR_LAB_00003910;\n            break;\n        case 0x15:\n            label = PTR_LAB_00003908;\n    }\n    return label;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003810",
            "calling": [
                "FUN_00003694"
            ],
            "imported": false,
            "current_name": "get_label_for_param_00003810"
        },
        "FUN_00000ed8": {
            "renaming": {
                "FUN_00000ed8": "execute_function_with_pointer_and_link_register_00000ed8",
                "PTR_DAT_00000ef4": "PTR_DATA",
                "in_lr": "link_register",
                "FUN_00004c84": "get_function_pointer"
            },
            "code": "void execute_function_with_pointer_and_link_register_00000ed8(void)\n{\n  undefined4 link_register;\n  void (*function_pointer)(void);\n  function_pointer = PTR_FUNCTION_POINTER;\n  link_register = get_link_register();\n  function_pointer(PTR_DAT_00000ef4, link_register);\n  return;\n}",
            "called": [
                "FUN_00004c84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000ed8",
            "calling": [
                "FUN_00000f04"
            ],
            "imported": false,
            "current_name": "execute_function_with_pointer_and_link_register_00000ed8"
        },
        "FUN_000031e0": {
            "renaming": {
                "FUN_000031e0": "play_alarm_sound_000031e0",
                "PTR_s_The_alarm_rang_000031f8": "s_The_alarm_rang",
                "FUN_00004db8": "trigger_alarm_sound"
            },
            "code": "void play_alarm_sound_000031e0(void)\n{\n  trigger_alarm_sound(PTR_s_The_alarm_rang_000031f8);\n  return;\n}",
            "called": [
                "FUN_00004db8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000031e0",
            "calling": [],
            "imported": false,
            "current_name": "play_alarm_sound_000031e0"
        },
        "FUN_000020f4": {
            "renaming": {
                "FUN_000020f4": "initialize_data_000020f4",
                "DAT_00002104": "PTR_data",
                "FUN_00002028": "initialize_array"
            },
            "code": "void initialize_data_000020f4(void)\n{\n  initialize_array(DAT_00002104, 3);\n  return;\n}",
            "called": [
                "FUN_00002028"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000020f4",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_000020f4"
        },
        "FUN_0000687c": {
            "renaming": {
                "FUN_0000687c": "decode_brackets_0000687c",
                "param_1": "length",
                "param_2": "input",
                "pbVar1": "output",
                "uVar4": "current_char_code",
                "iVar3": "i",
                "uVar5": "end_char_code",
                "uVar6": "range_end",
                "bVar7": "is_caret"
            },
            "code": "byte* decode_brackets_0000687c(int length, byte* input){\n  byte* output;\n  uint current_char_code;\n  bool is_caret = false;\n  current_char_code = (uint)*input;\n  is_caret = current_char_code == 0x5e;\n  if (is_caret) {\n    current_char_code = (uint)input[1];\n    input = input + 2;\n  }\n  else {\n    input++;\n  }\n  int i = length - 1;\n  do {\n    i++;\n    *(bool*)i = is_caret;\n  } while (i != length + 0xff);\n  if (current_char_code == 0) {\n    output = input - 1;\n  }\n  else {\n    do {\n      uint end_char_code = current_char_code;\n      *(bool*)(length + end_char_code) = !is_caret;\n      input++;\n      while (true) {\n        current_char_code = (uint)input[-1];\n        if (current_char_code != 0x2d) break;\n        uint range_end = (uint)*input;\n        if ((range_end == 0x5d) || ((int)range_end < (int)end_char_code)) goto LAB_000068aa;\n        do {\n          end_char_code++;\n          *(bool*)(length + end_char_code) = !is_caret;\n        } while ((int)end_char_code < (int)range_end);\n        int j = ~current_char_code + range_end;\n        if ((int)range_end <= (int)current_char_code) {\n          j = 0;\n        }\n        current_char_code = current_char_code + 1 + j;\n        input = input + 2;\n      }\n      output = input - 1;\n    } while ((current_char_code != 0x5d) && (output = input - 1, current_char_code != 0));\n  }\n  return output;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000687c",
            "calling": [
                "FUN_0000656c",
                "FUN_000061cc"
            ],
            "imported": false,
            "current_name": "decode_brackets_0000687c"
        },
        "FUN_00005edc": {
            "renaming": {
                "FUN_00005edc": "parse_uint_from_string_00005edc",
                "param_1": "output",
                "param_2": "input",
                "param_3": "end_ptr",
                "param_4": "base",
                "uVar1": "parsed_value",
                "uVar2": "digit_value",
                "uVar5": "parsed_digit",
                "uVar6": "overflow_threshold",
                "bVar3": "is_negative",
                "iVar4": "parse_error",
                "pbVar7": "current_char",
                "pbVar8": "next_char"
            },
            "code": "uint parse_uint_from_string_00005edc(undefined4 *output, byte *input, byte **end_ptr, uint base) {\n  uint digit_value, overflow_threshold, parsed_value, sign;\n  byte *current_char;\n  \n  current_char = input;\n  do {\n    digit_value = (uint)(*current_char);\n    current_char++;\n  } while ((PTR_DAT_00005fd0[digit_value] & 8) != 0);\n  \n  if (digit_value == 0x2d) {\n    sign = 1;\n    digit_value = (uint)(*current_char);\n    current_char++;\n  }\n  else if (digit_value == 0x2b) {\n    sign = 0;\n    digit_value = (uint)(*current_char);\n    current_char++;\n  }\n  else {\n    sign = 0;\n  }\n  \n  if (base == 0) {\n    if (digit_value != 0x30) {\n      base = 10;\n      goto parse_digits;\n    }\n  }\n  else if (base == 16 && digit_value == 0x30 && ((*current_char & 0xdf) == 0x58)) {\n    base = 16;\n    current_char++;\n    digit_value = (uint)(*current_char);\n    current_char++;\n  }\n  else if (base != 16 && digit_value == 0x30) {\n    base = 8;\n  }\n  \n  parse_digits:\n  parsed_value = 0;\n  overflow_threshold = 0xffffffff / base;\n  sign = (sign == 1) ? -1 : 1;\n  \n  while (true) {\n    digit_value = (uint)(*current_char);\n    if (digit_value >= 0x30 && digit_value <= 0x39) {\n      digit_value -= 0x30;\n    }\n    else if (digit_value >= 0x41 && digit_value <= 0x5a) {\n      digit_value -= 0x37;\n    }\n    else if (digit_value >= 0x61 && digit_value <= 0x7a) {\n      digit_value -= 0x57;\n    }\n    else {\n      break;\n    }\n    \n    if (digit_value >= base) {\n      break;\n    }\n    \n    if (parsed_value > overflow_threshold) {\n      parsed_value = 0xffffffff;\n      sign = -1;\n      current_char--;\n      break;\n    }\n    \n    parsed_value = parsed_value * base + digit_value;\n    current_char++;\n  }\n  \n  if (output != NULL) {\n    *output = (parsed_value * sign);\n  }\n  \n  if (end_ptr != NULL) {\n    *end_ptr = current_char;\n  }\n  \n  return parsed_value * sign;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005edc",
            "calling": [
                "FUN_00005fd8"
            ],
            "imported": false,
            "current_name": "parse_uint_from_string_00005edc"
        },
        "FUN_00001eea": {
            "renaming": {
                "FUN_00001eea": "set_bit_in_array_00001eea",
                "param_1": "array",
                "param_2": "bit_index",
                "uVar1": "mask",
                "iVar2": "array_start",
                "iVar3": "array_index"
            },
            "code": "int set_bit_in_array_00001eea(uint16_t* array, uint8_t bit_index, bool value) {\n  uint16_t mask = 1 << (bit_index & 0xff);\n  uint16_t* array_start = array;\n  if (value) {\n    *array_start |= mask;\n  }\n  else {\n    *array_start &= ~mask;\n  }\n  uint16_t* array_index = array + (bit_index >> 8);\n  *array_index = (uint8_t)(*array_index & 0x23) | 0x100;\n  return 0;\n}",
            "called": [
                "FUN_00001d5e",
                "FUN_00001f80",
                "FUN_00001d80",
                "FUN_00001dc0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001eea",
            "calling": [
                "FUN_00000e64"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_00001eea"
        },
        "FUN_000023a4": {
            "renaming": {
                "FUN_000023a4": "initialize_system_000023a4",
                "FUN_000023d0": "initialize_hardware",
                "FUN_00004db8": "initialize_memory",
                "FUN_00002e6c": "initialize_network",
                "software_interrupt": "trigger_interrupt",
                "uVar1": "result",
                "auStack_88": "buffer"
            },
            "code": "  \n    void initialize_system_000023a4(void)\n    {\n        undefined4 result;\n        undefined buffer[128];\n        initialize_hardware(0);\n        initialize_memory(uRam000023c4);\n        result = initialize_network(0,buffer,0x80);\n        trigger_interrupt(0x3f);\n        return result;\n    }\n    ",
            "called": [
                "FUN_00004db8",
                "FUN_00002e6c",
                "FUN_000023d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000023a4",
            "calling": [
                "FUN_00000f04"
            ],
            "imported": false,
            "current_name": "initialize_system_000023a4"
        },
        "FUN_0000240c": {
            "renaming": {
                "FUN_0000240c": "get_next_node_0000240c",
                "param_1": "current_node_ptr",
                "puVar1": "next_node_ptr"
            },
            "code": "undefined4* get_next_node_0000240c(undefined4 *current_node_ptr) {\n  undefined4 *next_node_ptr;\n  next_node_ptr = (undefined4 *) *current_node_ptr;\n  if (next_node_ptr != (undefined4 *) 0x0) {\n    *current_node_ptr = *next_node_ptr;\n  }\n  return next_node_ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000240c",
            "calling": [
                "FUN_000024bc"
            ],
            "imported": false,
            "current_name": "get_next_node_0000240c"
        },
        "FUN_00004280": {
            "renaming": {
                "FUN_00004280": "do_nothing_with_pointer_00004280",
                "PTR_DAT_00004288": "PTR_data"
            },
            "code": "void do_nothing_with_pointer_00004280(void)\n{\n  do_nothing(PTR_DAT_00004288);\n  return;\n}",
            "called": [
                "FUN_000045ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004280",
            "calling": [
                "FUN_00004314"
            ],
            "imported": false,
            "current_name": "do_nothing_with_pointer_00004280"
        },
        "FUN_00001448": {
            "renaming": {
                "FUN_00001448": "check_and_call_functions_00001448",
                "param_1": "index",
                "first_index": "first_index",
                "second_index": "second_index",
                "first_param": "first_param",
                "second_param": "second_param"
            },
            "code": "void check_and_call_functions_00001448(int index)\n{\n    short first_index = *(short *)(PTR_DAT_000014c0 + index * 0x20 + 8);\n    short second_index = *(short *)(PTR_DAT_000014c0 + index * 0x20 + 10);\n    if (first_index != -1)\n    {\n        undefined2 first_param = *(undefined2 *)(PTR_DAT_000014c0 + index * 0x20 + 8);\n        undefined4 second_param = *(undefined4 *)(PTR_DAT_000014c0 + index * 0x20 + 0xc);\n        FUN_00001f80(first_param, second_param);\n    }\n    if (second_index != -1)\n    {\n        undefined2 first_param = *(undefined2 *)(PTR_DAT_000014c0 + index * 0x20 + 10);\n        undefined4 second_param = *(undefined4 *)(PTR_DAT_000014c0 + index * 0x20 + 0x10);\n        FUN_00001f80(first_param, second_param);\n    }\n    return;\n}",
            "called": [
                "FUN_00001f80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001448",
            "calling": [
                "FUN_000013b8"
            ],
            "imported": false,
            "current_name": "check_and_call_functions_00001448"
        },
        "FUN_00001688": {
            "renaming": {
                "FUN_00001688": "execute_function_00001688",
                "FUN_00001628": "call_another_function"
            },
            "code": "void execute_function_00001688(void)\n{\n    call_another_function(0);\n    return;\n}",
            "called": [
                "FUN_00001628"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001688",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_00001688"
        },
        "FUN_00004042": {
            "renaming": {
                "FUN_00004042": "set_default_values_to_param_00004042",
                "param_1": "input_param",
                "FUN_00004f84": "set_values_to_param"
            },
            "code": "void set_default_values_to_param_00004042(undefined4 input_param)\n{\n  set_values_to_param(input_param, 0, 10);\n  return;\n}",
            "called": [
                "FUN_00004f84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004042",
            "calling": [
                "FUN_0000305c",
                "FUN_00002fe0"
            ],
            "imported": false,
            "current_name": "set_default_values_to_param_00004042"
        },
        "FUN_00000cf0": {
            "renaming": {
                "FUN_00000cf0": "is_interrupt_enabled_in_privileged_mode_00000cf0",
                "uVar2": "is_interrupt_enabled",
                "bVar1": "is_privileged_mode"
            },
            "code": "bool is_interrupt_enabled_in_privileged_mode_00000cf0(void)\n{\n  bool is_privileged_mode = isCurrentModePrivileged();\n  bool is_interrupt_enabled = false;\n  if (is_privileged_mode) {\n    is_interrupt_enabled = isIRQinterruptsEnabled();\n  }\n  return is_interrupt_enabled;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000cf0",
            "calling": [
                "FUN_00000930"
            ],
            "imported": false,
            "current_name": "is_interrupt_enabled_in_privileged_mode_00000cf0"
        },
        "FUN_00000f8c": {
            "renaming": {
                "FUN_00000f8c": "initialize_data_00000f8c",
                "uVar1": "num_bits_set",
                "puVar2": "data_ptr",
                "uVar3": "data_size",
                "iStack_24": "stack_var_1",
                "piStack_20": "stack_var_2",
                "uStack_1c": "stack_var_3",
                "local_18": "local_var_1",
                "local_14": "local_var_2",
                "local_10": "local_var_3"
            },
            "code": "void initialize_data_00000f8c(void)\n{\n    uint num_bits_set;\n    undefined4 *data_ptr;\n    uint data_size;\n    int stack_var_1;\n    int *stack_var_2;\n    undefined4 stack_var_3;\n    undefined4 local_var_1;\n    undefined4 local_var_2;\n    undefined4 local_var_3;\n\n    FUN_00000cd0();\n    local_var_3 = *puRam00000fd4;\n    local_var_2 = 0;\n    local_var_1 = uRam00000fd8;\n    FUN_000010d4(uRam00000fdc, 256, 15, 12);\n    local_var_3 = *puRam00000fe0;\n    local_var_2 = 0;\n    local_var_1 = uRam00000fe4;\n    data_size = 12;\n    FUN_000010d4(uRam00000fe8, 1536, 7);\n    stack_var_3 = 0xfd3;\n    num_bits_set = FUN_00000930();\n    num_bits_set = num_bits_set >> 0x1e;\n    data_ptr = (undefined4 *)(data_size * 0x100);\n    stack_var_1 = (data_size >> 0x1d) << 0x11;\n    stack_var_2 = &stack_var_1;\n    if ((num_bits_set & num_bits_set - 1) != 0)\n    {\n        FUN_00000f04(3, PTR_s_FAILED_ASSERTION__00001030);\n    }\n    *data_ptr = 0;\n    data_ptr[1] = 0;\n    data_ptr[2] = num_bits_set - 1;\n    return;\n}",
            "called": [
                "FUN_00000cd0",
                "FUN_000010d4",
                "FUN_00000930"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000f8c",
            "calling": [
                "FUN_0000099c"
            ],
            "imported": false,
            "current_name": "initialize_data_00000f8c"
        },
        "FUN_00002894": {
            "renaming": {
                "FUN_00002894": "update_parameter_00002894",
                "param_1": "new_param_value",
                "param_2": "param_2",
                "param_3": "param_3",
                "DAT_000028e8": "DATA_SECTION_START",
                "PTR_DAT_000028ec": "PTR_TO_PARAM_2",
                "iVar1": "data_address",
                "*(uint *)(DAT_000028e8 + 0x1c)": "*(uint *)(data_address + PARAM_1_OFFSET)",
                "*(int *)(iVar1 + 8)": "*(int *)(data_address + NEW_PARAM_VALUE_OFFSET)",
                "*(undefined4 *)PTR_DAT_000028ec": "*(uint32_t *)PTR_TO_PARAM_2",
                "*(undefined4 *)(PTR_DAT_000028ec + 4)": "*(uint32_t *)(PTR_TO_PARAM_2 + 4)",
                "FUN_00002744": "call_function_1",
                "FUN_00002714": "call_function_2",
                "0x2e": "function_parameter"
            },
            "code": "void update_parameter_00002894(int new_param_value, uint32_t param_2, uint32_t param_3)\n{\n  int data_address = DAT_000028e8;\n  \n  *(uint *)(DAT_000028e8 + 0x1c) = *(uint *)(DAT_000028e8 + 0x1c) & PARAM_1_MASK;\n  *(int *)(data_address + NEW_PARAM_VALUE_OFFSET) = new_param_value - 1;\n  *(undefined4 *)PTR_DAT_000028ec = param_2;\n  *(undefined4 *)(PTR_DAT_000028ec + 4) = param_3;\n  *(uint *)(DAT_000028e8 + 0x1c) = *(uint *)(DAT_000028e8 + 0x1c) | PARAM_1_MASK;\n  call_function_1(0x2e,10);\n  call_function_2(0x2e);\n  return;\n}",
            "called": [
                "FUN_00002744",
                "FUN_00002714"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002894",
            "calling": [
                "FUN_00002654"
            ],
            "imported": false,
            "current_name": "update_parameter_00002894"
        },
        "FUN_00004158": {
            "renaming": {
                "FUN_00004158": "process_data_00004158",
                "param_1": "data_size",
                "param_2": "data_buffer",
                "uVar1": "result",
                "initialize_data": "do_nothing_000045e8",
                "process_data_internal": "FUN_0000404c",
                "do_nothing_000045ec": "do_something_else"
            },
            "code": "int process_data_00004158(int data_size, char* data_buffer) {\n    int result = 0;\n    if (*(int*)(data_buffer + 0x10) != 0) {\n        if ((data_size != 0) && (*(int*)(data_size + 0x18) == 0)) {\n            initialize_data();\n        }\n        if (data_buffer == PTR_DAT_000041c4) {\n            data_buffer = *(char**)(data_size + 4);\n        }\n        else if (data_buffer == PTR_DAT_000041c8) {\n            data_buffer = *(char**)(data_size + 8);\n        }\n        else if (data_buffer == PTR_DAT_000041cc) {\n            data_buffer = *(char**)(data_size + 0xc);\n        }\n        if (*(short*)(data_buffer + 0xc) != 0) {\n            if ((-1 < *(int*)(data_buffer + 100) << 0x1f) && (-1 < (int)*(short*)(data_buffer + 0xc) << 0x16)) {\n                do_nothing(*(int*)(data_buffer + 0x58));\n            }\n            result = process_data_00004158_internal(data_size, data_buffer);\n            if (*(int*)(data_buffer + 100) << 0x1f >= 0 && (int)((uint)*(ushort*)(data_buffer + 0xc) << 0x16) >= 0) {\n                do_something_else(*(int*)(data_buffer + 0x58));\n            }\n        }\n    }\n    return result;\n}",
            "called": [
                "FUN_0000404c",
                "FUN_000045ec",
                "FUN_000045e8",
                "FUN_000042a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004158",
            "calling": [
                "FUN_000041d0",
                "FUN_00006768",
                "FUN_00005404"
            ],
            "imported": false,
            "current_name": "process_data_00004158"
        },
        "FUN_00002654": {
            "renaming": {
                "FUN_00002654": "process_data_00002654",
                "param_1": "data",
                "param_2": "data_ptr",
                "param_3": "size",
                "uVar1": "processed_data",
                "PTR_DAT_00002688": "data_ptr",
                "FUN_00002894": "apply_processing",
                "PTR_FUN_000026f0_1_0000268c": "processing_function_ptr"
            },
            "code": "int process_data_00002654(int data, int* PTR_DAT_00002688, int size)\n{\n  int processed_data = get_processed_data(data);\n  *PTR_DAT_00002688 = data;\n  apply_processing(processed_data, PTR_FUN_000026f0_1_0000268c, size);\n  return 0;\n}",
            "called": [
                "FUN_00002894",
                "FUN_000047e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002654",
            "calling": [
                "FUN_000033f4"
            ],
            "imported": false,
            "current_name": "process_data_00002654"
        },
        "FUN_00002538": {
            "renaming": {
                "FUN_00002538": "update_data_00002538",
                "param_1": "data",
                "param_2": "value",
                "DAT_00002584": "data_ptr_1",
                "DAT_00002588": "data_ptr_2"
            },
            "code": "void update_data_00002538(byte data, uint value) {\n  if (data < 0) {\n    *(char *)((data & 0xf) + DAT_00002584 + 0x14) = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)data + DAT_00002588 + 0x300) = (char)((value & 0xff) << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002538",
            "calling": [
                "FUN_0000258c"
            ],
            "imported": false,
            "current_name": "update_data_00002538"
        },
        "FUN_00004c84": {
            "renaming": {
                "FUN_00004c84": "process_data_00004c84",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "data_3",
                "param_4": "data_4",
                "iVar1": "data_ptr",
                "uVar2": "var_1",
                "uStack_c": "var_2",
                "uStack_8": "var_3",
                "uStack_4": "var_4",
                "DAT_00004cb0": "DAT_00004cb0",
                "FUNC_000057f8": "process_data_internal",
                "FUN_000042a4": "cleanup_data"
            },
            "code": "void process_data_00004c84(undefined4 data_1, undefined4 data_2, undefined4 data_3, undefined4 data_4) {\n  int data_ptr = *DAT_00004cb0;\n  undefined4 var_1 = data_1;\n  undefined4 var_2 = data_2;\n  undefined4 var_3 = data_3;\n  undefined4 var_4 = data_4;\n  if ((data_ptr != 0) && (*(int *)(data_ptr + 0x18) == 0)) {\n    cleanup_data(data_ptr);\n  }\n  process_data_00004c84_internal(data_ptr, *(undefined4 *)(data_ptr + 8), data_1, &var_2, var_1, &var_2);\n  return;\n}",
            "called": [
                "FUN_000057f8",
                "FUN_000042a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004c84",
            "calling": [
                "FUN_00002ecc",
                "FUN_0000305c",
                "FUN_00003524",
                "FUN_00003694",
                "FUN_00002fe0",
                "FUN_00000f04",
                "FUN_00002a88",
                "FUN_0000211c",
                "FUN_00003378",
                "FUN_00002f74",
                "FUN_0000316c",
                "FUN_00000ed8",
                "FUN_00002b10"
            ],
            "imported": false,
            "current_name": "process_data_00004c84"
        },
        "FUN_0000305c": {
            "renaming": {
                "FUN_0000305c": "write_data_to_device_0000305c",
                "param_1": "num_params",
                "param_2": "params",
                "uVar1": "data",
                "auStack_20": "data_array",
                "local_18": "num_data",
                "local_14": "device_id",
                "local_10": "device_info",
                "local_c": "i",
                "FUN_00004c84": "print_status",
                "FUN_00004db8": "print_error",
                "FUN_00004042": "initialize_data_array",
                "FUN_00003d24": "get_device_id",
                "FUN_00004622": "initialize_data_array",
                "FUN_00003694": "write_data_to_device",
                "FUN_00003d94": "write_data_to_device",
                "PTR_s_usage___s__s__device_id___value_0_00003154": "PTR_s_usage___s__s__device_id___value_0_00003154",
                "PTR_s_error__undefined_device_given_00003158": "PTR_s_error__undefined_device_given_00003158",
                "PTR_s_Writing_to_device___i____s_0000315c": "PTR_s_Writing_to_device___i____s_0000315c",
                "PTR_s_error__device___i_is_not_writabl_00003160": "PTR_s_error__device___i_is_not_writabl_00003160",
                "PTR_s_error__failure_to_write_to_devic_00003164": "PTR_s_error__failure_to_write_to_devic_00003164",
                "PTR_s_data_successfully_written_to_dev_00003168": "PTR_s_data_successfully_written_to_dev_00003168"
            },
            "code": "void write_data_to_device_0000305c(int num_params, undefined4 *params)\n{\n  undefined2 data_array[4];\n  uint num_data;\n  int device_id;\n  undefined4 device_info;\n  int i;\n  \n  if (num_params < 4) {\n    print_usage(PTR_s_usage___s__s__device_id___value_0_00003154,*params,params[1]);\n  }\n  else {\n    device_info = FUN_00004042(params[2]);\n    device_id = FUN_00003d24(device_info);\n    if (device_id == 0) {\n      print_error(PTR_s_error__undefined_device_given_00003158);\n    }\n    else {\n      initialize_data_array(data_array, num_params, params);\n      if (num_params > 5) {\n        num_data = 6;\n      }\n      else {\n        num_data = num_params;\n      }\n      num_data -= 3;\n      for (i = 0; i < (int)num_data; i++) {\n        data_array[i] = FUN_00004042(params[i + 3]);\n      }\n      print_status(PTR_s_Writing_to_device___i____s_0000315c,device_info,*(undefined4 *)(device_id + 8));\n      write_data_to_device_0000305c(data_array, num_data & 0xff);\n      num_data = FUN_00003d94(device_id, data_array);\n      if ((int)num_data < 1) {\n        if (num_data == -0x86) {\n          print_error(PTR_s_error__device___i_is_not_writabl_00003160,device_info);\n        }\n        else {\n          print_error(PTR_s_error__failure_to_write_to_devic_00003164,device_info);\n        }\n      }\n      else {\n        print_status(PTR_s_data_successfully_written_to_dev_00003168,device_info);\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_00003d24",
                "FUN_00004db8",
                "FUN_00004042",
                "FUN_00004c84",
                "FUN_00003d94",
                "FUN_00003694",
                "FUN_00004622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000305c",
            "calling": [
                "FUN_0000316c"
            ],
            "imported": false,
            "current_name": "write_data_to_device_0000305c"
        },
        "FUN_000012b4": {
            "renaming": {
                "FUN_000012b4": "calculate_result_000012b4",
                "param_1": "input_value",
                "param_2": "input_char",
                "uVar1": "result",
                "FUN_00002364": "call_function",
                "FUN_000024bc": "clean_up"
            },
            "code": "int calculate_result_000012b4(int input_value, char input_char) {\n    int result = call_function(input_value + 4, input_char);\n    clean_up(input_value);\n    return result;\n}",
            "called": [
                "FUN_000024bc",
                "FUN_00002364"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000012b4",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_000012b4"
        },
        "FUN_00005b34": {
            "renaming": {
                "FUN_00005b34": "FUNC_00005b34"
            },
            "code": "\ncode * FUNC_00005b34(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5\n                   )\n\n{\n  bool bVar1;\n  byte bVar2;\n  undefined *puVar3;\n  int iVar4;\n  code *pcVar5;\n  int iVar6;\n  undefined *puVar7;\n  uint uVar8;\n  uint *puVar9;\n  uint uVar10;\n  uint **ppuVar11;\n  uint uVar12;\n  undefined *puVar13;\n  code *local_24;\n  \n  puVar3 = PTR_s_0123456789ABCDEF_00005d78;\n  bVar2 = *(byte *)(param_2 + 6);\n  puVar7 = (undefined *)((int)param_2 + 0x43);\n  local_24 = param_4;\n  if (0x78 < bVar2) {\nswitchD_00005b70_caseD_65:\n    *(byte *)((int)param_2 + 0x42) = bVar2;\nLAB_00005bdc:\n    puVar7 = (undefined *)((int)param_2 + 0x42);\n    uVar8 = 1;\nLAB_00005d28:\n    param_2[4] = uVar8;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_00005c84;\n  }\n  if (bVar2 < 99) {\n    if (bVar2 == 0) goto LAB_00005d06;\n    if (bVar2 == 0x58) {\n      *(undefined *)((int)param_2 + 0x45) = 0x58;\n      goto LAB_00005ca8;\n    }\n    goto switchD_00005b70_caseD_65;\n  }\n  switch(bVar2) {\n  case 99:\n    uVar8 = **param_5;\n    *param_5 = *param_5 + 1;\n    *(char *)((int)param_2 + 0x42) = (char)uVar8;\n    goto LAB_00005bdc;\n  case 100:\n  case 0x69:\n    uVar10 = *param_2;\n    puVar9 = *param_5;\n    if ((int)(uVar10 << 0x18) < 0) {\n      uVar8 = *puVar9;\n      *param_5 = puVar9 + 1;\n    }\n    else {\n      uVar8 = *puVar9;\n      *param_5 = puVar9 + 1;\n      if ((uVar10 & 0x40) != 0) {\n        uVar8 = (uint)(short)uVar8;\n      }\n    }\n    if ((int)uVar8 < 0) {\n      uVar8 = -uVar8;\n      *(undefined *)((int)param_2 + 0x43) = 0x2d;\n    }\n    uVar10 = 10;\n    puVar3 = PTR_s_0123456789ABCDEF_00005d78;\n    goto LAB_00005c36;\n  default:\n    goto switchD_00005b70_caseD_65;\n  case 0x6e:\n    ppuVar11 = (uint **)*param_5;\n    uVar10 = *param_2;\n    uVar8 = param_2[5];\n    *param_5 = (uint *)(ppuVar11 + 1);\n    puVar9 = *ppuVar11;\n    if (((int)(uVar10 << 0x18) < 0) || (-1 < (int)(uVar10 << 0x19))) {\n      *puVar9 = uVar8;\n    }\n    else {\n      *(short *)puVar9 = (short)uVar8;\n    }\nLAB_00005d06:\n    param_2[4] = 0;\n    goto LAB_00005c84;\n  case 0x6f:\n  case 0x75:\n    puVar9 = *param_5;\n    uVar8 = *param_2;\n    *param_5 = puVar9 + 1;\n    if (((int)(uVar8 << 0x18) < 0) || (-1 < (int)(uVar8 << 0x19))) {\n      uVar8 = *puVar9;\n    }\n    else {\n      uVar8 = (uint)*(ushort *)puVar9;\n    }\n    puVar3 = PTR_s_0123456789ABCDEF_00005d78;\n    if (bVar2 == 0x6f) {\n      uVar10 = 8;\n    }\n    else {\n      uVar10 = 10;\n    }\n    break;\n  case 0x70:\n    *param_2 = *param_2 | 0x20;\n  case 0x78:\n    puVar3 = PTR_s_0123456789abcdef_00005d7c;\n    *(undefined *)((int)param_2 + 0x45) = 0x78;\nLAB_00005ca8:\n    uVar10 = *param_2;\n    uVar8 = **param_5;\n    *param_5 = *param_5 + 1;\n    if ((-1 < (int)(uVar10 << 0x18)) && ((int)(uVar10 << 0x19) < 0)) {\n      uVar8 = uVar8 & 0xffff;\n    }\n    if ((int)(uVar10 << 0x1f) < 0) {\n      *param_2 = uVar10 | 0x20;\n    }\n    if (uVar8 == 0) {\n      *param_2 = *param_2 & 0xffffffdf;\n    }\n    uVar10 = 0x10;\n    break;\n  case 0x73:\n    puVar9 = *param_5;\n    *param_5 = puVar9 + 1;\n    puVar7 = (undefined *)*puVar9;\n    iVar4 = FUN_00006010(puVar7,0,param_2[1],puVar9,param_1,param_2,param_3);\n    if (iVar4 != 0) {\n      param_2[1] = iVar4 - (int)puVar7;\n    }\n    uVar8 = param_2[1];\n    goto LAB_00005d28;\n  }\n  *(undefined *)((int)param_2 + 0x43) = 0;\nLAB_00005c36:\n  uVar12 = param_2[1];\n  param_2[2] = uVar12;\n  if (-1 < (int)uVar12) {\n    *param_2 = *param_2 & 0xfffffffb;\n  }\n  puVar13 = puVar7;\n  if ((uVar8 != 0) || (uVar12 != 0)) {\n    do {\n      puVar13 = puVar13 + -1;\n      *puVar13 = puVar3[uVar8 - uVar10 * (uVar8 / uVar10)];\n      bVar1 = uVar10 <= uVar8;\n      uVar8 = uVar8 / uVar10;\n    } while (bVar1);\n  }\n  if (((uVar10 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4])) {\n    puVar13[-1] = 0x30;\n    puVar13 = puVar13 + -1;\n  }\n  param_2[4] = (int)puVar7 - (int)puVar13;\n  puVar7 = puVar13;\nLAB_00005c84:\n  iVar4 = FUN_00005a58(param_1,param_2,&local_24,param_3,param_4);\n  if ((iVar4 == -1) || (iVar4 = (*param_4)(param_1,param_3,puVar7,param_2[4]), iVar4 == -1)) {\nLAB_00005c98:\n    pcVar5 = (code *)0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar4 = 0; iVar4 < (int)(param_2[3] - (int)local_24); iVar4 = iVar4 + 1) {\n        iVar6 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar6 == -1) goto LAB_00005c98;\n      }\n    }\n    pcVar5 = (code *)param_2[3];\n    if ((int)(code *)param_2[3] < (int)local_24) {\n      pcVar5 = local_24;\n    }\n  }\n  return pcVar5;\n}\n\n",
            "called": [
                "FUN_00006010",
                "FUN_00005a58"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00005b34",
            "calling": [
                "FUN_000057f8"
            ],
            "imported": false,
            "current_name": "FUNC_00005b34"
        },
        "FUN_0000058e": {
            "renaming": {
                "FUN_0000058e": "update_pointer_0000058e",
                "param_1": "ptr_value",
                "param_2": "data_ptr",
                "*param_1": "*ptr_value",
                "*param_2": "*data_ptr",
                "undefined4": "data_type"
            },
            "code": "void update_pointer_0000058e(int *ptr_value, undefined4 *data_ptr) {\n  if (*ptr_value == 0) {\n    *data_ptr = data_ptr;\n  }\n  else {\n    *data_ptr = *(undefined4 *)*ptr_value;\n    *(undefined4 **) *ptr_value = data_ptr;\n  }\n  *ptr_value = (int)data_ptr;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000058e",
            "calling": [
                "FUN_00000698"
            ],
            "imported": false,
            "current_name": "update_pointer_0000058e"
        },
        "FUN_0000656c": {
            "renaming": {
                "FUN_0000656c": "FUNC_0000656c"
            },
            "code": "\nundefined4 FUNC_0000656c(undefined4 param_1,uint *param_2,byte **param_3,undefined4 *param_4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  code *pcVar3;\n  uint uVar4;\n  byte *pbVar5;\n  uint uVar6;\n  undefined4 *puVar7;\n  uint *puVar8;\n  uint *puVar9;\n  uint *puVar10;\n  int unaff_r9;\n  int iVar11;\n  undefined4 local_34 [4];\n  \n  local_34[0] = *(undefined4 *)PTR_PTR_DAT_00006744;\n  local_34[1] = *(undefined4 *)(PTR_PTR_DAT_00006744 + 4);\n  local_34[2] = *(undefined4 *)(PTR_PTR_DAT_00006744 + 8);\n  pcVar3 = (code *)PTR_LAB_00004f80_1_0000674c;\n  if (param_2[6] != 3) {\n    pcVar3 = (code *)PTR_LAB_00005fd4_1_00006748;\n  }\n  uVar6 = param_2[2];\n  uVar4 = uVar6 - 1;\n  if (0x15c < uVar4) {\n    unaff_r9 = uVar6 - 0x15d;\n    uVar6 = 0x15d;\n  }\n  if (0x15c < uVar4) {\n    param_2[2] = uVar6;\n  }\n  puVar10 = param_2 + 7;\n  if (uVar4 < 0x15d) {\n    unaff_r9 = 0;\n  }\n  *param_2 = *param_2 | 0xd00;\n  iVar11 = 0;\n  puVar9 = puVar10;\n  do {\n    iVar1 = FUN_00006010(local_34[iVar11],**param_3,2);\n    if (iVar1 != 0) {\n      if (iVar11 == 1) {\n        if (param_2[1] == 0) {\n          param_2[1] = 8;\n          *param_2 = *param_2 | 0x200;\n        }\n        uVar4 = *param_2 & 0xfffffaff;\nLAB_000065f4:\n        *param_2 = uVar4;\n      }\n      else if (iVar11 == 2) {\n        if ((*param_2 & 0x600) != 0x200) goto LAB_00006624;\n        param_2[1] = 0x10;\n        uVar4 = *param_2 | 0x100;\n        goto LAB_000065f4;\n      }\n      uVar4 = param_2[2];\n      param_2[2] = uVar4 - 1;\n      if (uVar4 != 0) {\n        pbVar5 = *param_3;\n        *param_3 = pbVar5 + 1;\n        puVar8 = (uint *)((int)puVar9 + 1);\n        *(byte *)puVar9 = *pbVar5;\n        pbVar5 = param_3[1];\n        param_3[1] = pbVar5 + -1;\n        puVar9 = puVar8;\n        if (((int)(pbVar5 + -1) < 1) &&\n           (iVar1 = (*(code *)param_2[0x60])(param_1,param_3), iVar1 != 0)) {\n          iVar11 = 0;\n          goto LAB_000066ca;\n        }\n      }\n    }\nLAB_00006624:\n    iVar11 = iVar11 + 1;\n  } while (iVar11 != 3);\n  if (param_2[1] == 0) {\n    param_2[1] = 10;\n  }\n  FUN_0000687c(param_2[5],(int)PTR_DAT_00006750 - param_2[1]);\n  iVar11 = 0;\n  while( true ) {\n    puVar8 = puVar9;\n    if (param_2[2] == 0) break;\n    pbVar5 = *param_3;\n    uVar4 = (uint)*pbVar5;\n    if (*(char *)(param_2[5] + uVar4) == '\\0') break;\n    if ((uVar4 == 0x30) && ((int)(*param_2 << 0x14) < 0)) {\n      iVar11 = iVar11 + 1;\n      if (unaff_r9 != 0) {\n        unaff_r9 = unaff_r9 + -1;\n        param_2[2] = param_2[2] + 1;\n      }\n    }\n    else {\n      *param_2 = *param_2 & 0xfffff6ff;\n      puVar8 = (uint *)((int)puVar9 + 1);\n      *(byte *)puVar9 = *pbVar5;\n    }\n    pbVar5 = param_3[1];\n    param_3[1] = pbVar5 + -1;\n    if ((int)(pbVar5 + -1) < 1) {\n      iVar1 = (*(code *)param_2[0x60])(param_1,param_3);\n      if (iVar1 != 0) break;\n    }\n    else {\n      *param_3 = *param_3 + 1;\n    }\n    param_2[2] = param_2[2] - 1;\n    puVar9 = puVar8;\n  }\nLAB_000066ca:\n  if ((int)(*param_2 << 0x17) < 0) {\n    if (puVar10 < puVar8) {\n      (*(code *)param_2[0x5f])(param_1,*(byte *)((int)puVar8 + -1),param_3);\n      puVar8 = (uint *)((int)puVar8 + -1);\n    }\n    if (puVar8 == puVar10) {\n      return 1;\n    }\n  }\n  if ((*param_2 & 0x10) == 0) {\n    *(byte *)puVar8 = 0;\n    uVar2 = (*pcVar3)(param_1,puVar10,0,param_2[1]);\n    puVar7 = (undefined4 *)*param_4;\n    uVar4 = *param_2;\n    *param_4 = puVar7 + 1;\n    puVar7 = (undefined4 *)*puVar7;\n    if ((uVar4 & 0x20) == 0) {\n      if ((int)(uVar4 << 0x1f) < 0) {\n        *(short *)puVar7 = (short)uVar2;\n      }\n      else {\n        *puVar7 = uVar2;\n      }\n    }\n    else {\n      *puVar7 = uVar2;\n    }\n    param_2[3] = param_2[3] + 1;\n  }\n  param_2[4] = (uint)((int)puVar8 + param_2[4] + (iVar11 - (int)puVar10));\n  return 0;\n}\n\n",
            "called": [
                "FUN_0000687c",
                "FUN_00006010"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0000656c",
            "calling": [
                "FUN_000061cc"
            ],
            "imported": false,
            "current_name": "FUNC_0000656c"
        },
        "FUN_000025f4": {
            "renaming": {
                "FUN_000025f4": "call_function_000025f4",
                "FUN_000027b0": "execute_function"
            },
            "code": "void call_function_000025f4(void)\n{\n  execute_function();\n  return;\n}",
            "called": [
                "FUN_000027b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000025f4",
            "calling": [
                "FUN_00002396"
            ],
            "imported": false,
            "current_name": "call_function_000025f4"
        },
        "FUN_00001ddc": {
            "renaming": {
                "FUN_00001ddc": "print_character_with_tabulation_00001ddc",
                "param_1": "character",
                "cVar1": "character_result",
                "FUN_00001da2": "get_character_from_function",
                "FUN_00001d3a": "print_string_with_character_and_tabulation",
                "DAT_00001e08": "global_string"
            },
            "code": "void print_character_with_tabulation_00001ddc(undefined2 character) {\n  char character_result = get_character_from_function(character);\n  print_string_with_character_and_tabulation(DAT_00001e08, character_result);\n  return;\n}",
            "called": [
                "FUN_00001d3a",
                "FUN_00001da2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001ddc",
            "calling": [
                "FUN_00001f80"
            ],
            "imported": false,
            "current_name": "print_character_with_tabulation_00001ddc"
        },
        "FUN_00002ecc": {
            "renaming": {
                "FUN_00002ecc": "read_data_from_device_and_print_to_console_00002ecc",
                "param_1": "device_address",
                "param_2": "data_address",
                "uVar1": "device_type_name",
                "uVar2": "device_data",
                "auStack_1c": "data_buffer",
                "local_14": "data_length"
            },
            "code": "void read_data_from_device_and_print_to_console_00002ecc(undefined4 device_address, int data_address)\n{\n    undefined4 device_data;\n    undefined4 data_length;\n    undefined data_buffer[8];\n\n    data_length = FUN_00003d64(data_address, data_buffer);\n\n    if ((int)data_length < 1) {\n        FUN_00004c84(PTR_s_error__failed_to_read_from_devic_00002f28, device_address);\n    }\n    else {\n        device_data = *(undefined4 *)(data_address + 8);\n        undefined4 device_type = *(undefined *)(*(int *)(data_address + 0xc) + 8);\n        undefined4 device_type_name = FUN_000039e8(device_type);\n        FUN_00004c84(PTR_s_Reading_from___i___s__s__00002f2c, device_address, device_data, device_type_name);\n        FUN_00003694(data_buffer, data_length & 0xff);\n    }\n    return;\n}",
            "called": [
                "FUN_00003d64",
                "FUN_00004c84",
                "FUN_000039e8",
                "FUN_00003694"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002ecc",
            "calling": [
                "FUN_00002f30",
                "FUN_00002fe0"
            ],
            "imported": false,
            "current_name": "read_data_from_device_and_print_to_console_00002ecc"
        },
        "FUN_00000d76": {
            "renaming": {
                "FUN_00000d76": "set_to_zero_after_function_call_00000d76",
                "param_1": "address",
                "param_2": "value",
                "puVar1": "result_address",
                "*puVar1": "*result_address",
                "FUN_00000d44": "get_result_address"
            },
            "code": "void set_to_zero_after_function_call_00000d76(undefined4 address, undefined value)\n{\n    undefined4 *result_address;\n    result_address = (undefined4 *)get_result_address(address, value);\n    *result_address = 0;\n    return;\n}",
            "called": [
                "FUN_00000d44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000d76",
            "calling": [
                "FUN_00000d9c"
            ],
            "imported": false,
            "current_name": "set_to_zero_after_function_call_00000d76"
        },
        "FUN_000057a8": {
            "renaming": {
                "FUN_000057a8": "decrement_and_store_000057a8",
                "param_1": "count",
                "param_2": "value",
                "param_3": "buffer",
                "iVar1": "new_count",
                "puVar2": "ptr",
                "*puVar2": "*ptr"
            },
            "code": "int decrement_and_store_000057a8(int count, int value, int *buffer)\n{\n  int new_count = buffer[2] - 1;\n  buffer[2] = new_count;\n  if ((new_count < 0) && ((new_count < (int)buffer[6] || (value == 10)))) {\n    return generate_error();\n  }\n  undefined *ptr = (undefined *)*buffer;\n  *buffer = ptr + 1;\n  *ptr = (char)value;\n  return value;\n}",
            "called": [
                "FUN_00005404"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000057a8",
            "calling": [
                "FUN_000057d2"
            ],
            "imported": false,
            "current_name": "decrement_and_store_000057a8"
        },
        "FUN_00001696": {
            "renaming": {
                "FUN_00001696": "multiply_param2_by_4_and_add_param1_00001696",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int multiply_param2_by_4_and_add_param1_00001696(uint input_param_1, int input_param_2) {\n    int shifted_input_param_1 = (input_param_1 & 0xfffff) << 5;\n    int masked_input_param_1 = input_param_1 & 0xf0000000;\n    int result = input_param_2 * 4 + shifted_input_param_1 + masked_input_param_1 + 0x2000000;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001696",
            "calling": [
                "FUN_00001710",
                "FUN_000016c8",
                "FUN_000016ec"
            ],
            "imported": false,
            "current_name": "multiply_param2_by_4_and_add_param1_00001696"
        },
        "FUN_000008b8": {
            "renaming": {
                "FUN_000008b8": "count_elf32_rel_array_entries_000008b8",
                "local_c": "current_entry"
            },
            "code": "int count_elf32_rel_array_entries_000008b8(void)\n{\n  int *current_entry;\n  for (current_entry = (int *)PTR_DAT_000008f4; (*current_entry == DAT_000008f8 && (current_entry < PTR_Elf32_Rel_ARRAY_000008fc)); current_entry++)\n  {\n  }\n  return ((int)PTR_Elf32_Rel_ARRAY_000008fc - (int)current_entry) / sizeof(int);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000008b8",
            "calling": [
                "FUN_0000211c"
            ],
            "imported": false,
            "current_name": "count_elf32_rel_array_entries_000008b8"
        },
        "FUN_000024bc": {
            "renaming": {
                "FUN_000024bc": "check_and_print_string_000024bc",
                "param_1": "string_length_ptr",
                "uVar1": "character",
                "uVar2": "random_value",
                "iVar3": "string_address"
            },
            "code": "void check_and_print_string_000024bc(int *string_length_ptr)\n{\n  undefined uVar1;\n  undefined4 random_value = generate_random_number();\n  if (*string_length_ptr == 0) {\n    print_empty_string(random_value);\n  }\n  else if (*string_length_ptr == -1) {\n    *string_length_ptr = 0;\n    print_empty_string(random_value);\n  }\n  else {\n    int string_address = get_string_address(string_length_ptr);\n    print_string(string_address - 8, 10);\n    if (*string_length_ptr == 0) {\n      *string_length_ptr = -1;\n    }\n    uVar1 = *(undefined *)(string_address - 3);\n    print_empty_string(random_value);\n    print_character(uVar1);\n  }\n  return;\n}",
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0",
                "FUN_0000240c",
                "FUN_00000738",
                "FUN_00000698"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000024bc",
            "calling": [
                "FUN_000012b4"
            ],
            "imported": false,
            "current_name": "check_and_print_string_000024bc"
        },
        "FUN_00000490": {
            "renaming": {
                "FUN_00000490": "calculate_result_of_function_00000490",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "uVar1": "result",
                "FUN_00000e14": "calculate"
            },
            "code": "int calculate_result_of_function_00000490(int input_param_1, int input_param_2, int input_param_3, int input_param_4) {\n  int result = calculate(input_param_3, input_param_4);\n  return result;\n}",
            "called": [
                "FUN_00000e14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000490",
            "calling": [
                "FUN_00004dc8"
            ],
            "imported": false,
            "current_name": "calculate_result_of_function_00000490"
        },
        "FUN_0000091c": {
            "renaming": {
                "FUN_0000091c": "get_pointer_to_data_0000091c",
                "PTR_DAT_0000092c": "data_pointer"
            },
            "code": "char* get_pointer_to_data_0000091c(){\n    return PTR_DAT_0000092c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000091c",
            "calling": [
                "FUN_0000211c"
            ],
            "imported": false,
            "current_name": "get_pointer_to_data_0000091c"
        },
        "FUN_00001f80": {
            "renaming": {
                "FUN_00001f80": "update_data_at_index_00001f80",
                "param_1": "data_struct_ptr",
                "param_2": "new_data",
                "iVar1": "data_array_ptr",
                "iVar2": "index",
                "uVar3": "func_ptr",
                "uVar4": "func_index",
                "uVar5": "old_data",
                "FUN_00001ddc": "initialize_data_struct",
                "FUN_00001d5e": "get_data_array_ptr",
                "FUN_00001dc0": "get_index_offset",
                "FUN_00001da2": "get_function_pointer",
                "FUN_00001ec4": "call_function"
            },
            "code": "void update_data_at_index_00001f80(void* data_struct_ptr, uint32_t index, uint32_t new_data){\n    uint32_t* data_array_ptr = (uint32_t*)data_struct_ptr;\n    uint32_t old_data = data_array_ptr[index];\n    data_array_ptr[index] = new_data;\n    if((old_data & 0xf0000) != 0){\n        void* func_ptr = get_function_pointer(data_struct_ptr);\n        uint32_t func_index = get_function_index(data_struct_ptr);\n        call_function(func_ptr, func_index);\n    }\n}",
            "called": [
                "FUN_00001d5e",
                "FUN_00001ec4",
                "FUN_00001da2",
                "FUN_00001ddc",
                "FUN_00001dc0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001f80",
            "calling": [
                "FUN_00001eea",
                "FUN_00001448"
            ],
            "imported": false,
            "current_name": "update_data_at_index_00001f80"
        },
        "FUN_00000e64": {
            "renaming": {
                "FUN_00000e64": "set_flags_and_call_functions_00000e64",
                "FUN_00001274": "call_function_1",
                "FUN_00001eea": "call_function_2",
                "FUN_00001ff6": "call_function_3",
                "DAT_00000ed0": "data_offset_1",
                "DAT_00000ed4": "data_offset_2",
                "PTR_": "ptr_"
            },
            "code": "void set_flags_and_call_functions_00000e64(void)\n{\n  uint32_t* PTR_1 = (uint32_t*)(FUN_00001034 + DAT_00000ed0 + 4);\n  uint32_t* PTR_2 = (uint32_t*)(DAT_00000ed4 + 0x48);\n  *PTR_1 |= 0x200;\n  *PTR_2 &= 0xfefff8ff;\n  call_function_1();\n  call_function_2(0x2056, 0x80);\n  call_function_2(0x511a, 0x80);\n  call_function_2(0x2055, 0x80);\n  call_function_3(0x2056);\n  call_function_3(0x511a);\n  call_function_3(0x2055);\n  return;\n}",
            "called": [
                "FUN_00001eea",
                "FUN_00001274",
                "FUN_00001ff6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000e64",
            "calling": [
                "FUN_0000099c"
            ],
            "imported": false,
            "current_name": "set_flags_and_call_functions_00000e64"
        },
        "FUN_000026e4": {
            "renaming": {
                "FUN_000026e4": "call_function_000026e4",
                "FUN_00002970": "execute_function"
            },
            "code": "void call_function_000026e4(void)\n{\n  execute_function();\n  return;\n}",
            "called": [
                "FUN_00002970"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000026e4",
            "calling": [
                "FUN_00003524"
            ],
            "imported": false,
            "current_name": "call_function_000026e4"
        },
        "FUN_00000d44": {
            "renaming": {
                "FUN_00000d44": "calculate_offset_00000d44",
                "param_1": "address",
                "param_2": "offset"
            },
            "code": "int calculate_offset_00000d44(uint32_t address, int offset) {\n  uint32_t msb = address & 0xf0000000;\n  uint32_t lsb = address & 0xfffff;\n  uint32_t shifted_lsb = lsb << 5;\n  uint32_t result = (offset * 4) + msb + shifted_lsb + 0x2000000;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000d44",
            "calling": [
                "FUN_00000d76"
            ],
            "imported": false,
            "current_name": "calculate_offset_00000d44"
        },
        "FUN_00000698": {
            "renaming": {
                "FUN_00000698": "update_data_00000698",
                "param_1": "data_index",
                "param_2": "new_data",
                "PTR_DAT_00000730": "PTR_DATA",
                "PTR_DAT_00000734": "PTR_DATA_INDEX"
            },
            "code": "void update_data_00000698(int data_index, uint8_t new_data)\n{\n    if (new_data < 9) {\n        uint8_t current_data_index = *(uint8_t *)(data_index + 4);\n        if ((8 < current_data_index) &&\n            (is_data_at_index_zero(PTR_DAT_00000730 + *(uint8_t *)(data_index + 5) * 4),\n            *(int *)(PTR_DAT_00000730 + *(uint8_t *)(data_index + 5) * 4) == 0)) {\n            *(uint32_t *)PTR_DAT_00000734 = *(uint32_t *)PTR_DAT_00000734 & ~(1 << *(int8_t *)(data_index + 5));\n        }\n    }\n    else if (*(uint8_t *)(data_index + 4) < 9) {\n        update_data_00000698_at_index(PTR_DAT_00000730 + *(uint8_t *)(data_index + 5) * 4, data_index + 8);\n        *(uint32_t *)PTR_DAT_00000734 = *(uint32_t *)PTR_DAT_00000734 | 1 << *(int8_t *)(data_index + 5);\n    }\n    *(uint8_t *)(data_index + 4) = new_data;\n    return;\n}",
            "called": [
                "FUN_0000058e",
                "FUN_000005ca"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000698",
            "calling": [
                "FUN_000024bc",
                "FUN_00000794",
                "FUN_000010d4",
                "FUN_00002434"
            ],
            "imported": false,
            "current_name": "update_data_00000698"
        },
        "FUN_00000cd0": {
            "renaming": {
                "FUN_00000cd0": "has_interrupts_enabled_00000cd0",
                "uVar2": "interrupts_enabled",
                "bVar1": "is_privileged_mode"
            },
            "code": "bool has_interrupts_enabled_00000cd0(void)\n{\n    bool is_privileged_mode = (bool)isCurrentModePrivileged();\n    bool interrupts_enabled = false;\n    if (is_privileged_mode) {\n        interrupts_enabled = isIRQinterruptsEnabled();\n    }\n    disableIRQinterrupts();\n    return interrupts_enabled;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000cd0",
            "calling": [
                "FUN_00001c84",
                "FUN_00000f04",
                "FUN_00000f8c",
                "FUN_00000e58",
                "FUN_00000428",
                "FUN_000024bc",
                "FUN_00000794",
                "FUN_000010d4",
                "FUN_00002434"
            ],
            "imported": false,
            "current_name": "has_interrupts_enabled_00000cd0"
        },
        "FUN_00000cc0": {
            "renaming": {
                "FUN_00000cc0": "is_interrupt_enabled_00000cc0",
                "uVar2": "is_enabled",
                "bVar1": "is_privileged"
            },
            "code": "bool is_interrupt_enabled_00000cc0(void)\n{\n    bool is_privileged = (bool) isCurrentModePrivileged();\n    bool is_enabled = false;\n\n    if (is_privileged)\n    {\n        is_enabled = isIRQinterruptsEnabled();\n    }\n\n    disableIRQinterrupts();\n    return is_enabled;\n}",
            "called": [
                "FUN_00000f04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000cc0",
            "calling": [
                "FUN_00000dc0"
            ],
            "imported": false,
            "current_name": "is_interrupt_enabled_00000cc0"
        },
        "FUN_00002994": {
            "renaming": {
                "FUN_00002994": "execute_function_if_flag_set_00002994",
                "iVar1": "data",
                "is_flag_set": "is_flag_set",
                "PTR_DAT_000029fc": "function_pointer",
                "DAT_000029f8": "data_pointer",
                "is_another_flag_set": "is_another_flag_set",
                "execute_another_function": "execute_another_function"
            },
            "code": "void execute_function_if_flag_set_00002994(void)\n{\n  int data = DAT_000029f8;\n  bool is_flag_set = (*(uint *)(DAT_000029f8 + 0x14) & 4) != 0;\n  if (is_flag_set && (*(int *)PTR_DAT_000029fc != 0)) {\n    *(uint *)(DAT_000029f8 + 0x1c) = *(uint *)(DAT_000029f8 + 0x1c) & 0xfffffffb;\n    (**(code **)PTR_DAT_000029fc)(*(undefined4 *)(PTR_DAT_000029fc + 4));\n  }\n  bool is_another_flag_set = (*(uint *)(data + 0x14) & 2) != 0;\n  if (is_another_flag_set && (*(int *)(PTR_DAT_000029fc + 8) != 0)) {\n    (**(code **)(PTR_DAT_000029fc + 8))(*(undefined4 *)(PTR_DAT_000029fc + 0xc));\n  }\n  execute_another_function();\n  return;\n}",
            "called": [
                "FUN_00002798"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002994",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_if_flag_set_00002994"
        },
        "FUN_00000d2a": {
            "renaming": {
                "FUN_00000d2a": "get_exception_number_if_privileged_00000d2a",
                "bVar1": "is_privileged_mode",
                "uVar2": "exception_number"
            },
            "code": "uint get_exception_number_if_privileged_00000d2a(void)\n{\n  bool is_privileged_mode = (bool)isCurrentModePrivileged();\n  uint exception_number = 0;\n  if (is_privileged_mode) {\n    exception_number = getCurrentExceptionNumber();\n    exception_number &= 0x1f;\n  }\n  return exception_number;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000d2a",
            "calling": [
                "FUN_00000738"
            ],
            "imported": false,
            "current_name": "get_exception_number_if_privileged_00000d2a"
        },
        "FUN_00001ff6": {
            "renaming": {
                "FUN_00001ff6": "set_bit_in_int_after_bitwise_and_00001ff6",
                "param_1": "input_value",
                "uVar1": "bit_position",
                "iVar2": "int_ptr"
            },
            "code": "void set_bit_in_int_after_bitwise_and_00001ff6(uint16_t param_1)\n{\n  uint8_t bit_position = get_bit_position(param_1);\n  int32_t int_ptr = get_int_ptr(param_1);\n  *(int32_t *)(int_ptr + 4) = 1 << (bit_position & 0xff);\n  return;\n}",
            "called": [
                "FUN_00001d80",
                "FUN_00001dc0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001ff6",
            "calling": [
                "FUN_00000e64"
            ],
            "imported": false,
            "current_name": "set_bit_in_int_after_bitwise_and_00001ff6"
        },
        "FUN_000013b8": {
            "renaming": {
                "FUN_000013b8": "set_param_000013b8",
                "param_1": "index",
                "param_2": "value",
                "param_3": "flag",
                "param_4": "param_4",
                "uVar1": "result",
                "PTR_s_FAILED_ASSERTION__0000143c": "FAILED_ASSERTION_MSG",
                "PTR_DAT_00001440": "PARAMS_PTR",
                "FUN_00000f04": "print_error",
                "FUN_00001448": "do_something",
                "FUN_00001392": "do_something_else",
                "PTR_DAT_00001444": "ANOTHER_PTR"
            },
            "code": "int set_param_000013b8(int index, int value, int flag, int param_4)\n{\n  int result;\n  if (index != 0) {\n    print_error(3, PTR_s_FAILED_ASSERTION__0000143c);\n  }\n  *(int *)(PTR_DAT_00001440 + index * 8) = value;\n  *(int *)(PTR_DAT_00001440 + index * 8 + 4) = param_4;\n  do_something(index);\n  do_something_else(*(int *)(PTR_DAT_00001444 + index * 0x20 + 0x18), PTR_DAT_00001444[index * 0x20 + 0x1c]);\n  if (PTR_DAT_00001444[index * 0x20 + 0x1e] == 0) {\n    do_something_more(index, flag);\n    result = 0;\n  }\n  else {\n    result = -1;\n  }\n  return result;\n}\n",
            "called": [
                "FUN_00000f04",
                "FUN_00001392",
                "FUN_00001448",
                "FUN_000014c4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000013b8",
            "calling": [
                "FUN_00000df4"
            ],
            "imported": false,
            "current_name": "set_param_000013b8"
        },
        "FUN_00002a88": {
            "renaming": {
                "FUN_00002a88": "print_commands_00002a88",
                "param_1": "command_list",
                "local_18": "commands",
                "local_10": "index",
                "local_c": "current_command",
                "PTR_s___20s__s_00002b04": "header_format_string",
                "PTR_s_Command_00002b00": "command_format_string",
                "PTR_s_Description_00002afc": "description_format_string",
                "PTR_s__________________________________00002b08": "separator_format_string",
                "PTR_PTR_s_reboot_00002b0c": "reboot_command_string",
                "FUN_00004c84": "print_command",
                "FUN_00004db8": "print_separator"
            },
            "code": "void print_commands_00002a88(int *command_list)\n{\n  int *commands[2];\n  uint index;\n  int *current_command;\n\n  print_header(PTR_s___20s__s_00002b04, PTR_s_Command_00002b00, PTR_s_Description_00002afc);\n  print_separator(PTR_s__________________________________00002b08);\n  commands[0] = command_list;\n  commands[1] = (int *)PTR_PTR_s_reboot_00002b0c;\n  for (index = 0; index < 2; index++) {\n    current_command = commands[index];\n    if (current_command != (int *)0x0) {\n      for (; *current_command != 0; current_command += 3) {\n        print_command(PTR_s___20s__s_00002b04, *current_command, current_command[1]);\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_00004db8",
                "FUN_00004c84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002a88",
            "calling": [
                "FUN_00002b10"
            ],
            "imported": false,
            "current_name": "print_commands_00002a88"
        },
        "FUN_00002f30": {
            "renaming": {
                "FUN_00002f30": "iterate_linked_list_00002f30",
                "local_10": "index",
                "local_c": "current_node",
                "FUN_00002ecc": "process_node",
                "FUN_00004db8": "print_message"
            },
            "code": "void iterate_linked_list_00002f30(void)\n{\n  int index = 0;\n  undefined4 *current_node = *(undefined4 **)PTR_DAT_00002f6c;\n  while(current_node != (undefined4 *)0x0)\n  {\n    process_node(index, current_node);\n    print_message(PTR_DAT_00002f70);\n    index++;\n    current_node = (undefined4 *)*current_node;\n  }\n  return;\n}",
            "called": [
                "FUN_00002ecc",
                "FUN_00004db8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002f30",
            "calling": [
                "FUN_00002fe0"
            ],
            "imported": false,
            "current_name": "iterate_linked_list_00002f30"
        },
        "FUN_00001e44": {
            "renaming": {
                "FUN_00001e44": "set_bits_in_uint_at_index_00001e44",
                "param_1": "data",
                "param_2": "index",
                "param_3": "value_to_set",
                "iVar1": "starting_index",
                "PTR_DAT_00001ec0": "data"
            },
            "code": "void set_bits_in_uint_at_index_00001e44(uint32_t *PTR_DAT_00001ec0, uint32_t index, uint32_t num_bits_to_set, uint32_t value_to_set) {\n    uint32_t starting_index = index >> 3;\n    uint32_t bit_offset = index & 7;\n    uint32_t mask = ~(0xf << (bit_offset << 2));\n    PTR_DAT_00001ec0[starting_index] = (PTR_DAT_00001ec0[starting_index] & mask) | (value_to_set << (bit_offset << 2));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001e44",
            "calling": [
                "FUN_00001ec4"
            ],
            "imported": false,
            "current_name": "set_bits_in_uint_at_index_00001e44"
        },
        "FUN_00001318": {
            "renaming": {
                "FUN_00001318": "set_bit_in_array_00001318",
                "param_1": "bit_index",
                "DAT_00001344": "array_ptr"
            },
            "code": "void set_bit_in_array_00001318(uint8_t bit_index) {\n    uint32_t *DAT_00001344 = (uint32_t *)(DAT_00001344 + ((uint32_t)bit_index >> 5) * 4);\n    uint32_t bit_mask = 1 << (bit_index & 0x1f);\n    *DAT_00001344 = bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001318",
            "calling": [
                "FUN_000014c4"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_00001318"
        },
        "FUN_00000900": {
            "renaming": {
                "FUN_00000900": "get_main_stack_pointer_00000900",
                "uVar1": "main_stack_pointer"
            },
            "code": "int32_t get_main_stack_pointer_00000900() {\n  int32_t main_stack_pointer = getMainStackPointer();\n  return main_stack_pointer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000900",
            "calling": [
                "FUN_0000211c"
            ],
            "imported": false,
            "current_name": "get_main_stack_pointer_00000900"
        },
        "FUN_00004274": {
            "renaming": {
                "FUN_00004274": "do_nothing_with_pointer_00004274",
                "PTR_DAT_0000427c": "some_pointer",
                "do_nothing_000045e8": "do_nothing"
            },
            "code": "void do_nothing_with_pointer_00004274(void* PTR_DAT_0000427c)\n{\n  do_nothing(PTR_DAT_0000427c);\n  return;\n}",
            "called": [
                "FUN_000045e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004274",
            "calling": [
                "FUN_00004314"
            ],
            "imported": false,
            "current_name": "do_nothing_with_pointer_00004274"
        },
        "FUN_00002fe0": {
            "renaming": {
                "FUN_00002fe0": "check_device_id_00002fe0",
                "param_1": "num_params",
                "param_2": "params",
                "iVar1": "is_valid",
                "uVar2": "device_id"
            },
            "code": "void check_device_id_00002fe0(int num_params, undefined4 *params)\n{\n    int device_id = params[2];\n    if (num_params < 3)\n    {\n        print_usage(PTR_s_usage___s__s__device_id__all_00003050, *params, params[1]);\n    }\n    else\n    {\n        int is_valid = check_device_id_00002fe0_validity(device_id, PTR_DAT_00003054);\n        if (is_valid == 0)\n        {\n            print_error(PTR_s_error__undefined_device_id_given_00003058);\n        }\n        else\n        {\n            set_device_id(device_id, is_valid);\n        }\n    }\n    return;\n}",
            "called": [
                "FUN_00002ecc",
                "FUN_00003d24",
                "FUN_00004db8",
                "FUN_00004042",
                "FUN_00004c84",
                "FUN_00002f30",
                "FUN_00004e52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002fe0",
            "calling": [
                "FUN_0000316c"
            ],
            "imported": false,
            "current_name": "check_device_id_00002fe0"
        },
        "FUN_00001dc0": {
            "renaming": {
                "FUN_00001dc0": "extract_six_bits_from_input_00001dc0",
                "param_1": "input_value",
                "return": "extracted_bits"
            },
            "code": "ushort extract_six_bits_from_input_00001dc0(ushort input_value) {\n    ushort extracted_bits = input_value & 0x3f;\n    return extracted_bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001dc0",
            "calling": [
                "FUN_00001eea",
                "FUN_00001f80",
                "FUN_00001ff6"
            ],
            "imported": false,
            "current_name": "extract_six_bits_from_input_00001dc0"
        },
        "FUN_00000df4": {
            "renaming": {
                "FUN_00000df4": "call_function_with_parameters_00000df4",
                "param1": "param_1",
                "param2": "param_2",
                "PTR_FUN_000012b4_1_00000e10": "fun_ptr",
                "data": "data"
            },
            "code": "void call_function_with_parameters_00000df4(void)\n{\n  int param1 = 0;\n  int param2 = 0x1c200;\n  void (*PTR_FUN_000012b4_1_00000e10)(int) = PTR_FUN_000012b4_1_00000e10;\n  int data = DAT_00000e0c;\n  PTR_FUN_000012b4_1_00000e10(param1, param2, data);\n  return;\n}",
            "called": [
                "FUN_000013b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000df4",
            "calling": [
                "FUN_00000410"
            ],
            "imported": false,
            "current_name": "call_function_with_parameters_00000df4"
        },
        "FUN_00002400": {
            "renaming": {
                "FUN_00002400": "do_nothing_00002400"
            },
            "code": "\nvoid do_nothing_00002400(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002400",
            "calling": [
                "FUN_00000f04"
            ],
            "imported": false,
            "current_name": "do_nothing_00002400"
        },
        "FUN_00002eb4": {
            "renaming": {
                "FUN_00002eb4": "execute_function_00002eb4",
                "FUN_0000211c": "call_another_function"
            },
            "code": "undefined4 execute_function_00002eb4(void)\n{\n  call_another_function();\n  return 0;\n}",
            "called": [
                "FUN_0000211c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002eb4",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_00002eb4"
        },
        "FUN_0000328c": {
            "renaming": {
                "FUN_0000328c": "decode_data_0000328c",
                "param_1": "data",
                "param_2": "decoded_data",
                "local_10": "index",
                "local_a": "value",
                "FUN_00004f84": "decode_value",
                "iVar1": "checksum"
            },
            "code": "int decode_data_0000328c(int* data, int* decoded_data){\n    int index = 0;\n    int length = 10;\n    short value;\n    value = decode_value(*data, &index, length);\n    decoded_data[5] = value - 0x76c;\n    value = decode_value(index + 1, &index, length);\n    decoded_data[4] = value - 1;\n    value = decode_value(index + 1, &index, length);\n    decoded_data[3] = (int)value;\n    value = decode_value(data[1], &index, length);\n    decoded_data[2] = (int)value;\n    value = decode_value(index + 1, &index, length);\n    decoded_data[1] = (int)value;\n    value = decode_value(index + 1, &index, length);\n    *decoded_data = (int)value;\n    int decoded_data_length = decoded_data[4] + 1;\n    int decoded_data_offset = decoded_data[5] + 0x76c;\n    int checksum = calculate_checksum(decoded_data_offset, decoded_data_length, decoded_data[3]);\n    decoded_data[6] = checksum;\n    decoded_data[8] = -1;\n    return 0;\n}\n\n",
            "called": [
                "FUN_000031fc",
                "FUN_00004f84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000328c",
            "calling": [
                "FUN_00003478",
                "FUN_000033f4"
            ],
            "imported": false,
            "current_name": "decode_data_0000328c"
        },
        "FUN_000041f4": {
            "renaming": {
                "FUN_000041f4": "initialize_data_000041f4",
                "param_1": "data_array",
                "param_2": "value1",
                "param_3": "value2",
                "puVar1": "pointer1"
            },
            "code": "void initialize_data_000041f4(undefined4 *data_array, undefined2 value1, undefined2 value2)\n{\n  undefined *pointer1;\n  data_array[0] = 0;\n  data_array[1] = 0;\n  data_array[2] = 0;\n  data_array[3] = value1;\n  data_array[4] = 0;\n  data_array[5] = 0;\n  data_array[6] = 0;\n  data_array[7] = data_array;\n  data_array[8] = data_array;\n  data_array[9] = PTR_FUN_00004dc8_1_0000422c;\n  data_array[10] = DAT_00004230;\n  data_array[11] = PTR_FUN_00004e26_1_00004234;\n  pointer1 = PTR_LAB_00004e4a_1_00004238;\n  data_array[12] = pointer1;\n}",
            "called": [
                "FUN_00004622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000041f4",
            "calling": [
                "FUN_000042a4"
            ],
            "imported": false,
            "current_name": "initialize_data_000041f4"
        },
        "FUN_0000316c": {
            "renaming": {
                "FUN_0000316c": "check_data_0000316c",
                "param_1": "data_count",
                "param_2": "data_array",
                "iVar1": "cmp_result",
                "PTR_DAT_000031d4": "PTR_DAT_000031d4",
                "FUN_00002f74": "print_error",
                "FUN_00004e52": "strcmp",
                "FUN_00002fe0": "process_data",
                "PTR_s_write_000031d8": "PTR_s_write_000031d8",
                "FUN_0000305c": "write_data",
                "FUN_00004c84": "print_usage_error",
                "PTR_s_usage___s_read_write_000031dc": "PTR_s_usage___s_read_write_000031dc"
            },
            "code": "int check_data_0000316c(int data_count, unsigned int *data_array) {\n  int result = 0;\n  if (data_count < 2) {\n    print_error();\n  }\n  else {\n    int cmp_result = strcmp(data_array[1], PTR_DAT_000031d4);\n    if (cmp_result == 0) {\n      process_data(data_count, data_array);\n    }\n    else {\n      cmp_result = strcmp(data_array[1], PTR_s_write_000031d8);\n      if (cmp_result == 0) {\n        write_data(data_count, data_array);\n      }\n      else {\n        print_usage_error(PTR_s_usage___s_read_write_000031dc, *data_array);\n      }\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_0000305c",
                "FUN_00004c84",
                "FUN_00004e52",
                "FUN_00002f74",
                "FUN_00002fe0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000316c",
            "calling": [],
            "imported": false,
            "current_name": "check_data_0000316c"
        },
        "FUN_000026f0": {
            "renaming": {
                "FUN_000026f0": "execute_function_if_not_null_000026f0",
                "param_1": "function_pointer",
                "PTR_DAT_00002710": "function_pointer",
                "int": "int",
                "DAT_00002710": "function_pointer"
            },
            "code": "void execute_function_if_not_null_000026f0(int* PTR_DAT_00002710) {\n  if (*PTR_DAT_00002710 != 0) {\n    (**(void (**)())PTR_DAT_00002710)();\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000026f0",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_if_not_null_000026f0"
        },
        "FUN_000057d2": {
            "renaming": {
                "FUN_000057d2": "process_data_000057d2",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "data_ptr",
                "param_4": "data_len",
                "iVar1": "result",
                "puVar2": "end_ptr",
                "iVar3": "current_index",
                "FUN_000057a8": "process_byte"
            },
            "code": "int process_data_000057d2(undefined4 arg1, undefined4 arg2, undefined *data_ptr, int data_len) {\n  int result = 0;\n  undefined *end_ptr = data_ptr + data_len;\n  int current_index = data_len;\n  do {\n    if (data_ptr == end_ptr) {\n      return 0;\n    }\n    result = process_byte(arg1, *data_ptr, arg2, data_len, current_index);\n    data_len = result + 1;\n    data_ptr = data_ptr + 1;\n  } while (data_len != 0);\n  return result;\n}",
            "called": [
                "FUN_000057a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000057d2",
            "calling": [
                "FUN_000057f8"
            ],
            "imported": false,
            "current_name": "process_data_000057d2"
        },
        "FUN_000056b8": {
            "renaming": {
                "FUN_000056b8": "check_status_of_device_000056b8",
                "param_1": "device_status",
                "param_2": "device_type",
                "param_3": "device_flags",
                "param_4": "device_flags_value",
                "iVar1": "status",
                "uVar2": "device_flags_value",
                "auStack_68": "status_buffer",
                "local_64": "device_status_value"
            },
            "code": "int check_status_of_device_000056b8(uint16_t *device_status, uint16_t *device_type, uint32_t *device_flags) {\n  int status = 0;\n  uint16_t device_status_value = *(device_type + 0x0E);\n  uint32_t device_flags_value = 0x400;\n  if (device_status_value < 0) {\n    status = get_status(device_status, device_status_value, &device_flags_value);\n    if (status < 0) {\n      *device_flags = 0;\n      if ((*(uint16_t *)(device_type + 0x0C) << 0x18) < 0) {\n        device_flags_value = 0x40;\n      }\n    }\n  }\n  else {\n    *device_flags = ((device_flags_value & 0xF000) == 0x2000) ? 1 : 0;\n  }\n  *device_flags = device_flags_value;\n  return 0;\n}",
            "called": [
                "FUN_00000514"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000056b8",
            "calling": [
                "FUN_00005700"
            ],
            "imported": false,
            "current_name": "check_status_of_device_000056b8"
        },
        "FUN_00001a18": {
            "renaming": {
                "FUN_00001a18": "set_value_to_four_00001a18",
                "FUN_000016ec": "set_value",
                "FUN_00001734": "do_something",
                "DAT_00001a34": "value",
                "PTR_DAT_00001a38": "value_pointer"
            },
            "code": "void set_value_to_four_00001a18(void)\n{\n  set_DAT_00001a34(DAT_DAT_00001a34,1);\n  do_something();\n  *PTR_PTR_DAT_00001a38 = 4;\n  return;\n}",
            "called": [
                "FUN_00001734",
                "FUN_000016ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001a18",
            "calling": [
                "FUN_00001b10"
            ],
            "imported": false,
            "current_name": "set_value_to_four_00001a18"
        },
        "FUN_00000d9c": {
            "renaming": {
                "FUN_00000d9c": "initialize_data_00000d9c",
                "DAT_00000dac": "data_ptr",
                "FUN_00000d76": "set_data_to_zero"
            },
            "code": "void initialize_data_00000d9c(void)\n{\n    set_data_to_zero(DAT_00000dac, 0);\n    return;\n}",
            "called": [
                "FUN_00000d76"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000d9c",
            "calling": [
                "FUN_00000db0"
            ],
            "imported": false,
            "current_name": "initialize_data_00000d9c"
        },
        "FUN_00003ff4": {
            "renaming": {
                "FUN_00003ff4": "calculate_new_value_00003ff4",
                "param_1": "input_value",
                "param_2": "min_value",
                "param_3": "max_value",
                "param_4": "some_value",
                "uVar1": "new_value"
            },
            "code": "uint calculate_new_value_00003ff4(int input_value, uint min_value, uint max_value, undefined some_value) {\n  uint new_value = min_value;\n  if ((min_value < max_value) && (input_value != 0)) {\n    FUN_000045ee((max_value - min_value) + input_value, input_value, min_value);\n    FUN_00004622(input_value, some_value, max_value - min_value);\n  }\n  return new_value;\n}",
            "called": [
                "FUN_000045ee",
                "FUN_00004622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003ff4",
            "calling": [
                "FUN_00003ec4"
            ],
            "imported": false,
            "current_name": "calculate_new_value_00003ff4"
        },
        "FUN_00004634": {
            "renaming": {
                "FUN_00004634": "FUNC_00004634"
            },
            "code": "\nvoid FUNC_00004634(uint *param_1,uint param_2,undefined4 param_3)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  bool bVar6;\n  uint *local_20;\n  uint local_1c;\n  undefined4 uStack_18;\n  \n  local_20 = param_1;\n  local_1c = param_2;\n  uStack_18 = param_3;\n  if (0x3b < *param_1) {\n    FUN_00005584(&local_20,*param_1,0x3c);\n    uVar3 = param_1[1] + (int)local_20;\n    param_1[1] = uVar3;\n    if ((int)local_1c < 0) {\n      uVar3 = uVar3 - 1;\n      *param_1 = local_1c + 0x3c;\n    }\n    else {\n      *param_1 = local_1c;\n    }\n    if ((int)local_1c < 0) {\n      param_1[1] = uVar3;\n    }\n  }\n  if (0x3b < param_1[1]) {\n    FUN_00005584(&local_20,param_1[1],0x3c);\n    bVar6 = (int)local_1c < 0;\n    uVar4 = param_1[2] + (int)local_20;\n    param_1[2] = uVar4;\n    uVar3 = local_1c;\n    if (bVar6) {\n      uVar3 = local_1c + 0x3c;\n      uVar4 = uVar4 - 1;\n    }\n    if (!bVar6) {\n      param_1[1] = uVar3;\n    }\n    if (bVar6) {\n      param_1[1] = uVar3;\n    }\n    if (bVar6) {\n      param_1[2] = uVar4;\n    }\n  }\n  if (0x17 < param_1[2]) {\n    FUN_00005584(&local_20,param_1[2],0x18);\n    bVar6 = (int)local_1c < 0;\n    uVar4 = param_1[3] + (int)local_20;\n    param_1[3] = uVar4;\n    uVar3 = local_1c;\n    if (bVar6) {\n      uVar3 = local_1c + 0x18;\n      uVar4 = uVar4 - 1;\n    }\n    if (!bVar6) {\n      param_1[2] = uVar3;\n    }\n    if (bVar6) {\n      param_1[2] = uVar3;\n    }\n    if (bVar6) {\n      param_1[3] = uVar4;\n    }\n  }\n  if (0xb < param_1[4]) {\n    FUN_00005584(&local_20,param_1[4],0xc);\n    bVar6 = (int)local_1c < 0;\n    uVar3 = param_1[5] + (int)local_20;\n    param_1[5] = uVar3;\n    if (bVar6) {\n      local_1c = local_1c + 0xc;\n      uVar3 = uVar3 - 1;\n    }\n    if (!bVar6) {\n      param_1[4] = local_1c;\n    }\n    if (bVar6) {\n      param_1[4] = local_1c;\n    }\n    if (bVar6) {\n      param_1[5] = uVar3;\n    }\n  }\n  puVar1 = PTR_DAT_000047e0;\n  uVar3 = param_1[5];\n  if ((uVar3 & 3) == 0) {\n    if (uVar3 == (uVar3 / 100) * 100) {\n      if ((uVar3 + 0x76c) % 400 == 0) {\n        iVar5 = 0x1d;\n      }\n      else {\n        iVar5 = 0x1c;\n      }\n    }\n    else {\n      iVar5 = 0x1d;\n    }\n  }\n  else {\n    iVar5 = 0x1c;\n  }\n  if ((int)param_1[3] < 1) {\n    while ((int)param_1[3] < 1) {\n      uVar3 = param_1[4];\n      param_1[4] = uVar3 - 1;\n      if (uVar3 - 1 == 0xffffffff) {\n        uVar4 = param_1[5];\n        uVar3 = uVar4 - 1;\n        param_1[4] = 0xb;\n        param_1[5] = uVar3;\n        if ((uVar3 & 3) == 0) {\n          if (uVar3 == (uVar3 / 100) * 100) {\n            if ((uVar4 + 0x76b) % 400 == 0) {\n              iVar5 = 0x1d;\n            }\n            else {\n              iVar5 = 0x1c;\n            }\n          }\n          else {\n            iVar5 = 0x1d;\n          }\n        }\n        else {\n          iVar5 = 0x1c;\n        }\n      }\n      iVar2 = iVar5;\n      if (param_1[4] != 1) {\n        iVar2 = *(int *)(puVar1 + param_1[4] * 4);\n      }\n      param_1[3] = iVar2 + param_1[3];\n    }\n  }\n  else {\n    while( true ) {\n      uVar3 = param_1[4];\n      iVar2 = iVar5;\n      if (uVar3 != 1) {\n        iVar2 = *(int *)(puVar1 + uVar3 * 4);\n      }\n      if ((int)param_1[3] <= iVar2) break;\n      param_1[3] = param_1[3] - iVar2;\n      param_1[4] = uVar3 + 1;\n      if (uVar3 + 1 == 0xc) {\n        uVar4 = param_1[5];\n        uVar3 = uVar4 + 1;\n        param_1[4] = 0;\n        param_1[5] = uVar3;\n        if ((uVar3 & 3) == 0) {\n          if (uVar3 % 100 == 0) {\n            if ((uVar4 + 0x76d) % 400 == 0) {\n              iVar5 = 0x1d;\n            }\n            else {\n              iVar5 = 0x1c;\n            }\n          }\n          else {\n            iVar5 = 0x1d;\n          }\n        }\n        else {\n          iVar5 = 0x1c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00005584"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00004634",
            "calling": [
                "FUN_000047e4"
            ],
            "imported": false,
            "current_name": "FUNC_00004634"
        },
        "FUN_00001d5e": {
            "renaming": {
                "FUN_00001d5e": "get_upper_bits_of_param1_00001d5e",
                "param_1": "param_1"
            },
            "code": "uint get_upper_bits_of_param1_00001d5e(ushort param_1)\n{\n    uint upper_bits = param_1 & 0x7000;\n    uint result = upper_bits | 0x40048000;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001d5e",
            "calling": [
                "FUN_00001eea",
                "FUN_00001f80"
            ],
            "imported": false,
            "current_name": "get_upper_bits_of_param1_00001d5e"
        },
        "FUN_0000191c": {
            "renaming": {
                "FUN_0000191c": "initialize_system_0000191c",
                "FUN_00001778": "setup_uart",
                "FUN_00001748": "set_system_clock",
                "DAT_00001958": "status_register",
                "PTR_DAT_0000195c": "system_ready_flag"
            },
            "code": "void initialize_system_0000191c(void)\n{\n  setup_uart();\n  set_system_clock(0x40);\n  *DAT_00001958 = *DAT_00001958 & 0x3b;\n  do {\n  } while ((*DAT_00001958 & 0xc) != 0);\n  *PTR_DAT_0000195c = 1;\n  return;\n}",
            "called": [
                "FUN_00001748",
                "FUN_00001778"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000191c",
            "calling": [
                "FUN_00001b10"
            ],
            "imported": false,
            "current_name": "initialize_system_0000191c"
        },
        "FUN_000050f4": {
            "renaming": {
                "FUN_000050f4": "get_pointer_to_data_000050f4",
                "PTR_DAT_000050fc": "data_pointer"
            },
            "code": "char* get_pointer_to_data_000050f4() {\n    return PTR_DAT_000050fc;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000050f4",
            "calling": [
                "FUN_000047e4"
            ],
            "imported": false,
            "current_name": "get_pointer_to_data_000050f4"
        },
        "FUN_00005a58": {
            "renaming": {
                "FUN_00005a58": "calculate_param_00005a58",
                "param_1": "input_param",
                "param_2": "input_array",
                "param_3": "output_array",
                "param_4": "undefined_param",
                "param_5": "callback_func",
                "iVar1": "status",
                "uVar2": "result",
                "uVar3": "max_value",
                "uVar4": "min_value",
                "bVar5": "flag"
            },
            "code": "undefined4 calculate_param_00005a58(uint32_t param_1, uint32_t *param_2, uint32_t *param_3, undefined4 param_4, code *param_5) {\\n  int status;\\n  undefined4 result;\\n  uint32_t max_value;\\n  uint32_t min_value;\\n  bool flag;\\n  \\n  max_value = param_2[4];\\n  if ((int)param_2[4] < (int)param_2[2]) {\\n    max_value = param_2[2];\\n  }\\n  *param_3 = max_value;\\n  if (*(char *)((int)param_2 + 0x43) != \"\\0\") {\\n    *param_3 = max_value + 1;\\n  }\\n  if ((int)(*param_2 << 0x1a) < 0) {\\n    *param_3 += 2;\\n  }\\n  min_value = *param_2 & 6;\\n  if (min_value == 0) {\\n    for (; (int)min_value < (int)(param_2[3] - *param_3); min_value++) {\\n      status = (*param_5)(param_1, param_4, (int)param_2 + 0x19, 1);\\n      if (status == -1) goto LAB_00005afc;\\n    }\\n  }\\n  min_value = (uint32_t)*(byte *)((int)param_2 + 0x43);\\n  if (min_value != 0) {\\n    min_value = 1;\\n  }\\n  if ((int)(*param_2 << 0x1a) < 0) {\\n    *(undefined *)((int)param_2 + min_value + 0x43) = 0x30;\\n    *(undefined *)((int)param_2 + min_value + 0x44) = *(undefined *)((int)param_2 + 0x45);\\n    min_value += 2;\\n  }\\n  status = (*param_5)(param_1, param_4, (int)param_2 + 0x43, min_value);\\n  if (status == -1) {\\n    goto LAB_00005afc;\\n  }\\n  max_value = param_2[3];\\n  flag = (*param_2 & 6) == 4;\\n  if (flag) {\\n    max_value -= *param_3;\\n  }\\n  if (flag) {\\n    max_value &= ~((int)max_value >> 0x1f);\\n  }\\n  else {\\n    max_value = 0;\\n  }\\n  if ((int)param_2[4] < (int)param_2[2]) {\\n    max_value += (param_2[2] - param_2[4]);\\n  }\\n  for (uint32_t i = 0; max_value != i; i++) {\\n    status = (*param_5)(param_1, param_4, (int)param_2 + 0x1a, 1);\\n    if (status == -1) goto LAB_00005afc;\\n  }\\n  result = 0;\\n  return result;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005a58",
            "calling": [
                "FUN_00005b34"
            ],
            "imported": false,
            "current_name": "calculate_param_00005a58"
        },
        "FUN_000056b0": {
            "renaming": {
                "FUN_000056b0": "get_dat_value_000056b0",
                "DAT_000056b4": "data_value"
            },
            "code": "int get_dat_value_000056b0(void)\n{\n  return DAT_000056b4;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000056b0",
            "calling": [
                "FUN_000047e4",
                "FUN_00005100",
                "FUN_00004f98"
            ],
            "imported": false,
            "current_name": "get_dat_value_000056b0"
        },
        "FUN_00003d24": {
            "renaming": {
                "FUN_00003d24": "find_nth_element_00003d24",
                "param_1": "n",
                "local_10": "count",
                "local_c": "current_element"
            },
            "code": "undefined4* find_nth_element_00003d24(int n) {\n    int count = 0;\n    undefined4* current_element = *(undefined4**)PTR_DAT_00003d60;\n    while (count < n && current_element != (undefined4*)0x0) {\n        current_element = (undefined4*)*current_element;\n        count++;\n    }\n    return current_element;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003d24",
            "calling": [
                "FUN_0000305c",
                "FUN_00002fe0"
            ],
            "imported": false,
            "current_name": "find_nth_element_00003d24"
        },
        "FUN_000060cc": {
            "renaming": {
                "FUN_000060cc": "calculate_result_000060cc",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "uVar1": "result",
                "uVar2": "comparison_result",
                "FUN_00004b34": "call_function_1",
                "FUN_00006964": "call_function_2",
                "FUN_00004bd0": "call_function_3",
                "FUN_000060b0": "call_function_4"
            },
            "code": "uint calculate_result_000060cc(undefined4 first_param, uint second_param, uint third_param, undefined4 fourth_param) {\n  uint result;\n  uint comparison_result;\n\n  if (second_param != 0) {\n    if (third_param == 0) {\n      call_function_1();\n      result = third_param;\n    }\n    else {\n      comparison_result = call_function_2();\n      result = second_param;\n      if ((comparison_result < third_param) && (result = call_function_3(first_param, third_param), result != 0)) {\n        call_function_4(result, second_param, third_param);\n        call_function_1(first_param, second_param);\n      }\n    }\n    return result;\n  }\n  result = call_function_3(first_param, third_param, third_param, fourth_param);\n  return result;\n}",
            "called": [
                "FUN_00004bd0",
                "FUN_00004b34",
                "FUN_000060b0",
                "FUN_00006964"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000060cc",
            "calling": [
                "FUN_000068f0"
            ],
            "imported": false,
            "current_name": "calculate_result_000060cc"
        },
        "FUN_00003dc4": {
            "renaming": {
                "FUN_00003dc4": "calculate_num_digits_00003dc4",
                "param_1": "starting_index",
                "param_2": "number",
                "local_20": "quotient",
                "local_14": "current_digit",
                "local_10": "power_of_ten",
                "local_c": "num_digits"
            },
            "code": "int calculate_num_digits_00003dc4(int starting_index, uint number) {\n    uint quotient;\n    char *current_digit;\n    uint power_of_ten;\n    int num_digits = 1;\n    if (DAT_00003e50 < number) {\n        num_digits = 10;\n    }\n    else {\n        for (power_of_ten = 10; power_of_ten <= number; power_of_ten = power_of_ten * 10) {\n            num_digits++;\n        }\n    }\n    if (starting_index != 0) {\n        current_digit = (char *)(num_digits + starting_index);\n        quotient = number;\n        do {\n            current_digit--;\n            *current_digit = (char)quotient + (char)(uint)((ulonglong)DAT_00003e54 * (ulonglong)quotient >> 0x23) * -10 + '0';\n            quotient = (uint)((ulonglong)DAT_00003e54 * (ulonglong)quotient >> 0x23);\n        } while (quotient != 0);\n    }\n    return num_digits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003dc4",
            "calling": [
                "FUN_00003e58"
            ],
            "imported": false,
            "current_name": "calculate_num_digits_00003dc4"
        },
        "FUN_000022be": {
            "renaming": {
                "FUN_000022be": "increment_and_store_value_at_offset_000022be",
                "param_1": "array",
                "param_2": "value",
                "uVar1": "offset",
                "PTR_": "array_",
                "DAT_": "data_"
            },
            "code": "void increment_and_store_value_at_offset_000022be(int *array, undefined value) {\n  uint offset = array[3];\n  array[3] = offset + 1;\n  uint PTR_start = *array;\n  uint PTR_end = array[1];\n  uint masked_offset = offset & (PTR_end - 1U);\n  uint address = masked_offset + PTR_start;\n  *(undefined *)(address) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000022be",
            "calling": [
                "FUN_00002364"
            ],
            "imported": false,
            "current_name": "increment_and_store_value_at_offset_000022be"
        },
        "FUN_00002108": {
            "renaming": {
                "FUN_00002108": "call_function_with_data_00002108",
                "FUN_00002028": "call_function",
                "DAT_00002118": "DATA_PTR"
            },
            "code": "void call_function_with_data_00002108(void)\n{\n    call_function(DAT_00002118, 4);\n    return;\n}",
            "called": [
                "FUN_00002028"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002108",
            "calling": [],
            "imported": false,
            "current_name": "call_function_with_data_00002108"
        },
        "FUN_00001d80": {
            "renaming": {
                "FUN_00001d80": "calculate_value_from_param_00001d80",
                "param_1": "input_value"
            },
            "code": "uint calculate_value_from_param_00001d80(ushort input_value) {\n    uint result = (input_value & 0x1c0) | 0x400ff000;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001d80",
            "calling": [
                "FUN_00001eea",
                "FUN_00001ff6"
            ],
            "imported": false,
            "current_name": "calculate_value_from_param_00001d80"
        },
        "FUN_000033c0": {
            "renaming": {
                "FUN_000033c0": "check_alarm_set_000033c0",
                "iVar1": "error_code",
                "auStack_2c": "alarm_data",
                "FUN_00002690": "get_alarm_data",
                "FUN_00004db8": "log_error",
                "PTR_s_rtc__error_getting_alarm_000033f0": "PTR_s_rtc__error_getting_alarm_000033f0",
                "FUN_00003378": "process_alarm_data"
            },
            "code": "bool check_alarm_set_000033c0(void)\n{\n    int error_code;\n    undefined alarm_data[36];\n\n    error_code = get_alarm_data(alarm_data);\n    if (error_code != 0) {\n        log_error(PTR_s_rtc__error_getting_alarm_000033f0);\n    }\n    else {\n        process_alarm_data(alarm_data);\n    }\n    return error_code != 0;\n}",
            "called": [
                "FUN_00004db8",
                "FUN_00003378",
                "FUN_00002690"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000033c0",
            "calling": [
                "FUN_00003524"
            ],
            "imported": false,
            "current_name": "check_alarm_set_000033c0"
        },
        "FUN_00002b10": {
            "renaming": {
                "FUN_00002b10": "parse_arguments_00002b10",
                "param_1": "arg1",
                "param_2": "arg2",
                "local_48": "arg_ptrs",
                "local_3c": "function_ptr",
                "local_38": "curr_arg_ptr",
                "local_34": "i",
                "local_2d": "curr_char",
                "local_2c": "curr_char_ptr",
                "local_28": "curr_arg_start",
                "local_24": "arg_ptr",
                "local_20": "num_args",
                "local_1c": "num_slashes",
                "local_18": "num_args",
                "local_14": "curr_arg_start"
            },
            "code": "void parse_arguments_00002b10(undefined4 arg1, byte *arg2) {\\n  int num_args = 0;\\n  int num_slashes = 0;\\n  byte *curr_arg_start = arg2;\\n  byte curr_char;\\n  char **arg_ptrs[3];\\n  char **arg_ptr;\\n  char *curr_char_ptr;\\n  char **curr_arg_ptr;\\n  uint i;\\n\\n  while (true) {\\n    curr_char = *curr_arg_start;\\n    if (curr_char == 0) {\\n      break;\\n    }\\n    else if (curr_char > 0x20) {\\n      if (curr_char == 0x22 || curr_char == 0x27) {\\n        curr_char = *++curr_arg_start;\\n        while (curr_char != curr_arg_start[-1]) {\\n          if (curr_char == \"\\\\\") {\\n            num_slashes++;\\n            curr_arg_start++;\\n          }\\n          curr_char = *++curr_arg_start;\\n          if (curr_char == 0) {\\n            return;\\n          }\\n        }\\n        if (*++curr_arg_start > 0x20) {\\n          return;\\n        }\\n      }\\n      else {\\n        while (*curr_arg_start != 0) {\\n          if (*curr_arg_start == \"\\\\\") {\\n            num_slashes++;\\n            curr_arg_start++;\\n            if (*curr_arg_start == 0) {\\n              return;\\n            }\\n          }\\n          curr_arg_start++;\\n          if (*curr_arg_start == 0x22) {\\n            return;\\n          }\\n        }\\n      }\\n      num_args++;\\n    }\\n    *curr_arg_start = 0;\\n    curr_arg_start++;\\n  }\\n\\n  if (num_args > 0) {\\n    arg_ptrs[num_args] = NULL;\\n    curr_arg_start = arg2;\\n    curr_arg_ptr = arg_ptrs;\\n    for (i = 0; i < num_args; i++) {\\n      while (*curr_arg_start == 0) {\\n        curr_arg_start++;\\n      }\\n      if (*curr_arg_start == 0x22 || *curr_arg_start == 0x27) {\\n        curr_arg_start++;\\n      }\\n      *curr_arg_ptr++ = curr_arg_start;\\n      while (*curr_arg_start != 0) {\\n        curr_arg_start++;\\n      }\\n    }\\n    arg_ptr = arg_ptrs;\\n    while (*arg_ptr != NULL) {\\n      curr_char_ptr = *arg_ptr;\\n      while (*curr_char_ptr != \"\\0\") {\\n        if (*curr_char_ptr == \"\\\\\") {\\n          curr_char_ptr++;\\n          num_slashes--;\\n          if (num_slashes == 0) {\\n            break;\\n          }\\n        }\\n        curr_char_ptr++;\\n      }\\n      *arg_ptr++ = NULL;\\n    }\\n    code *function_ptr = (code *)FUN_00002a18(arg1, arg_ptrs);\\n    if (function_ptr == NULL) {\\n      int error_code = FUN_00004e52(PTR_DAT_00002d8c, arg_ptrs);\\n      if (error_code == 0) {\\n        FUN_00002a88(arg2);\\n      }\\n      else {\\n        FUN_00004c84(PTR_s_shell__command_not_found___s_00002d90, arg_ptrs);\\n      }\\n    }\\n    else {\\n      (*function_ptr)(num_args, arg_ptrs);\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "FUN_00002a18",
                "FUN_00004db8",
                "FUN_00002a88",
                "FUN_00004c84",
                "FUN_00004e52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002b10",
            "calling": [
                "FUN_00002e6c"
            ],
            "imported": false,
            "current_name": "parse_arguments_00002b10"
        },
        "FUN_00001b10": {
            "renaming": {
                "FUN_00001b10": "execute_command_00001b10",
                "param_1": "command_index",
                "uVar1": "result",
                "PTR_DAT_00001bb4": "command_data_ptr",
                "PTR_DAT_00001bb0": "command_index_ptr",
                "FUN_000018bc": "execute_command_0",
                "FUN_0000191c": "execute_command_1",
                "FUN_00001960": "execute_command_2",
                "FUN_000019c0": "execute_command_3",
                "FUN_00001a18": "execute_command_4",
                "FUN_00001a3c": "execute_command_5",
                "FUN_00001a60": "execute_command_6",
                "FUN_00001ad4": "execute_command_7"
            },
            "code": "int execute_command_00001b10(byte command_index) {\n  if (command_index >= 8) {\n    return -1;\n  }\n\n  byte* command_ptr = PTR_DAT_00001bb4 + (uint)command_index + (uint)(*PTR_DAT_00001bb0 * 8);\n  while (command_index != *PTR_DAT_00001bb0) {\n    switch (*command_ptr) {\n      case 0:\n        execute_command_00001b10_0();\n        break;\n      case 1:\n        execute_command_00001b10_1();\n        break;\n      case 2:\n        execute_command_00001b10_2();\n        break;\n      case 3:\n        execute_command_00001b10_3();\n        break;\n      case 4:\n        execute_command_00001b10_4();\n        break;\n      case 5:\n        execute_command_00001b10_5();\n        break;\n      case 6:\n        execute_command_00001b10_6();\n        break;\n      case 7:\n        execute_command_00001b10_7();\n        break;\n      default:\n        return -1;\n    }\n    command_index = *command_ptr;\n    command_ptr = PTR_DAT_00001bb4 + (uint)command_index + (uint)(*PTR_DAT_00001bb0 * 8);\n  }\n\n  return 0;\n}",
            "called": [
                "FUN_00001a18",
                "FUN_00001ad4",
                "FUN_000019c0",
                "FUN_00001a60",
                "FUN_00001960",
                "FUN_000018bc",
                "FUN_00001a3c",
                "FUN_0000191c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001b10",
            "calling": [
                "FUN_00001c84"
            ],
            "imported": false,
            "current_name": "execute_command_00001b10"
        },
        "FUN_000047e4": {
            "renaming": {
                "FUN_000047e4": "FUNC_000047e4"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00004ab2) */\n\nundefined8 FUNC_000047e4(int *param_1)\n\n{\n  longlong lVar1;\n  longlong lVar2;\n  int *piVar3;\n  uint uVar4;\n  int iVar5;\n  int iVar6;\n  int iVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  int iVar11;\n  uint uVar12;\n  uint uVar13;\n  uint uVar14;\n  uint uVar15;\n  bool bVar16;\n  \n  piVar3 = (int *)FUN_000056b0();\n  FUNC_00004634(param_1);\n  uVar12 = param_1[5];\n  iVar11 = param_1[3] + -1 + *(int *)(PTR_DAT_00004adc + param_1[4] * 4);\n  if (((1 < param_1[4]) && ((uVar12 & 3) == 0)) &&\n     ((uVar12 != (uVar12 / 100) * 100 || (uVar12 + 0x76c == ((uVar12 + 0x76c) / 400) * 400)))) {\n    iVar11 = iVar11 + 1;\n  }\n  param_1[7] = iVar11;\n  if (20000 < (int)&PTR_DAT_00002710 + uVar12) {\n    iVar7 = -1;\n    iVar5 = -1;\n    goto LAB_00004aba;\n  }\n  if ((int)uVar12 < 0x47) {\n    if (uVar12 != 0x46) {\n      for (uVar9 = 0x45; (int)uVar12 < (int)uVar9; uVar9 = uVar9 - 1) {\n        if ((uVar9 & 3) == 0) {\n          if (uVar9 == (uVar9 / 100) * 100) {\n            if ((uVar9 + 0x76c) % 400 == 0) {\n              iVar7 = 0x16e;\n            }\n            else {\n              iVar7 = 0x16d;\n            }\n          }\n          else {\n            iVar7 = 0x16e;\n          }\n        }\n        else {\n          iVar7 = 0x16d;\n        }\n        iVar11 = iVar11 - iVar7;\n      }\n      if ((uVar9 & 3) == 0) {\n        if (uVar12 == (uVar12 / 100) * 100) {\n          iVar7 = 0x16d;\n          if ((uVar12 + 0x76c) % 400 == 0) {\n            iVar7 = 0x16e;\n          }\n        }\n        else {\n          iVar7 = 0x16e;\n        }\n      }\n      else {\n        iVar7 = 0x16d;\n      }\n      iVar11 = iVar11 - iVar7;\n    }\n  }\n  else {\n    uVar9 = 0x46;\n    do {\n      if ((uVar9 & 3) == 0) {\n        if (uVar9 % 100 == 0) {\n          if ((uVar9 + 0x76c) % 400 == 0) {\n            iVar7 = 0x16e;\n          }\n          else {\n            iVar7 = 0x16d;\n          }\n        }\n        else {\n          iVar7 = 0x16e;\n        }\n      }\n      else {\n        iVar7 = 0x16d;\n      }\n      uVar9 = uVar9 + 1;\n      iVar11 = iVar11 + iVar7;\n    } while (uVar12 != uVar9);\n  }\n  lVar1 = (longlong)DAT_00004ae0 * (longlong)iVar11 +\n          (longlong)(param_1[2] * 0xe10 + param_1[1] * 0x3c + *param_1);\n  uVar15 = (uint)lVar1;\n  iVar7 = (int)((ulonglong)lVar1 >> 0x20);\n  FUN_000050e8();\n  FUNC_00005100();\n  uVar9 = *(uint *)PTR_DAT_00004ae4;\n  if (*(uint *)PTR_DAT_00004ae4 == 0) {\nLAB_00004934:\n    uVar12 = piVar3[10];\n    iVar7 = (uint)lVar1 + uVar12;\n    iVar5 = (int)((ulonglong)lVar1 >> 0x20) +\n            ((int)uVar12 >> 0x1f) + (uint)CARRY4((uint)lVar1,uVar12);\n  }\n  else {\n    uVar14 = param_1[8];\n    uVar13 = uVar14;\n    if (0 < (int)uVar14) {\n      uVar13 = 1;\n    }\n    if ((piVar3[1] == param_1[5] + 0x76c) || (iVar5 = FUN_00004f98(), iVar5 != 0)) {\n      uVar10 = piVar3[0x14];\n      uVar4 = piVar3[0x12];\n      uVar8 = piVar3[10];\n      uVar9 = uVar4 - uVar8;\n      iVar5 = (piVar3[0x13] - ((int)uVar8 >> 0x1f)) - (uint)(uVar4 < uVar8);\n      if (((int)((iVar7 - iVar5) - (uint)(uVar15 < uVar9)) < 0 ==\n           (SBORROW4(iVar7,iVar5) != SBORROW4(iVar7 - iVar5,(uint)(uVar15 < uVar9)))) &&\n         (iVar6 = (piVar3[0x13] - ((int)uVar10 >> 0x1f)) - (uint)(uVar4 < uVar10),\n         bVar16 = uVar15 < uVar4 - uVar10,\n         (int)((iVar7 - iVar6) - (uint)bVar16) < 0 !=\n         (SBORROW4(iVar7,iVar6) != SBORROW4(iVar7 - iVar6,(uint)bVar16)))) goto LAB_00004a88;\n      uVar4 = piVar3[8] - uVar10;\n      iVar6 = (piVar3[9] - ((int)uVar10 >> 0x1f)) - (uint)((uint)piVar3[8] < uVar10);\n      if (*piVar3 != 0) {\n        if ((int)((iVar7 - iVar6) - (uint)(uVar15 < uVar4)) < 0 ==\n            (SBORROW4(iVar7,iVar6) != SBORROW4(iVar7 - iVar6,(uint)(uVar15 < uVar4))))\n        goto LAB_0000491e;\nLAB_0000492a:\n        uVar9 = 0;\n        if ((int)uVar14 < 0) goto LAB_00004934;\nLAB_00004a14:\n        uVar15 = uVar13 ^ uVar9;\n        uVar13 = uVar9;\n        if (uVar15 == 1) {\n          if (uVar9 == 0) {\n            iVar7 = uVar10 - uVar8;\n          }\n          else {\n            iVar7 = uVar8 - uVar10;\n          }\n          iVar5 = param_1[3];\n          *param_1 = *param_1 + iVar7;\n          lVar2 = lVar1 + iVar7;\n          FUNC_00004634(param_1);\n          iVar5 = param_1[3] - iVar5;\n          lVar1 = lVar1 + iVar7;\n          if (iVar5 != 0) {\n            if (iVar5 < 2) {\n              if (iVar5 == -2 || iVar5 + 2 < 0 != SCARRY4(iVar5,2)) {\n                iVar5 = 1;\n              }\n            }\n            else {\n              iVar5 = -1;\n            }\n            iVar7 = iVar5 + param_1[7];\n            iVar11 = iVar11 + iVar5;\n            if (iVar7 < 0) {\n              uVar9 = uVar12 - 1;\n              if ((uVar9 & 3) == 0) {\n                if (uVar9 == (uVar9 / 100) * 100) {\n                  iVar7 = 0x16d;\n                  if ((uVar12 + 0x76b) % 400 != 0) {\n                    iVar7 = 0x16c;\n                  }\n                }\n                else {\n                  iVar7 = 0x16d;\n                }\n              }\n              else {\n                iVar7 = 0x16c;\n              }\n            }\n            else {\n              if ((uVar12 & 3) == 0) {\n                if (uVar12 == (uVar12 / 100) * 100) {\n                  iVar5 = 0x16d;\n                  if ((uVar12 + 0x76c) % 400 == 0) {\n                    iVar5 = 0x16e;\n                  }\n                }\n                else {\n                  iVar5 = 0x16e;\n                }\n              }\n              else {\n                iVar5 = 0x16d;\n              }\n              if (iVar5 <= iVar7) {\n                iVar7 = iVar7 - iVar5;\n              }\n            }\n            param_1[7] = iVar7;\n            lVar1 = lVar2;\n          }\n        }\n        goto LAB_00004a88;\n      }\n      if ((int)((iVar7 - iVar6) - (uint)(uVar15 < uVar4)) < 0 !=\n          (SBORROW4(iVar7,iVar6) != SBORROW4(iVar7 - iVar6,(uint)(uVar15 < uVar4)))) {\nLAB_0000491e:\n        if ((int)((iVar7 - iVar5) - (uint)(uVar15 < uVar9)) < 0 ==\n            (SBORROW4(iVar7,iVar5) != SBORROW4(iVar7 - iVar5,(uint)(uVar15 < uVar9))))\n        goto LAB_0000492a;\n      }\n      if (-1 < (int)uVar14) {\n        uVar9 = 1;\n        goto LAB_00004a14;\n      }\n    }\n    else {\nLAB_00004a88:\n      uVar9 = uVar13;\n      if (uVar13 != 1) goto LAB_00004934;\n    }\n    uVar12 = piVar3[0x14];\n    iVar7 = (uint)lVar1 + uVar12;\n    iVar5 = (int)((ulonglong)lVar1 >> 0x20) +\n            ((int)uVar12 >> 0x1f) + (uint)CARRY4((uint)lVar1,uVar12);\n    uVar9 = 1;\n  }\n  FUN_000050f4();\n  param_1[8] = uVar9;\n  param_1[6] = (iVar11 + 4U) % 7;\nLAB_00004aba:\n  return CONCAT44(iVar5,iVar7);\n}\n\n",
            "called": [
                "FUN_00005100",
                "FUN_00004634",
                "FUN_000050f4",
                "FUN_000050e8",
                "FUN_000056b0",
                "FUN_00004f98"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000047e4",
            "calling": [
                "FUN_00002600",
                "FUN_00002654"
            ],
            "imported": false,
            "current_name": "FUNC_000047e4"
        },
        "FUN_000023c8": {
            "renaming": {
                "FUN_000023c8": "trigger_software_interrupt_000023c8",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void trigger_software_interrupt_000023c8(void)\n{\n  software_interrupt(SOFTWARE_INTERRUPT_CODE);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000023c8",
            "calling": [
                "FUN_000023d0"
            ],
            "imported": false,
            "current_name": "trigger_software_interrupt_000023c8"
        },
        "FUN_00002e48": {
            "renaming": {
                "FUN_00002e48": "print_ascii_art_00002e48",
                "FUN_00002a00": "print_character",
                "FUN_000041d0": "print_string"
            },
            "code": "void print_ascii_art_00002e48(void)\n{\n    print_character(0x3e);\n    print_character(0x20);\n    print_string(*(unsigned int *)(*PTR_DAT_00002e68 + 8));\n    return;\n}",
            "called": [
                "FUN_000041d0",
                "FUN_00002a00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002e48",
            "calling": [
                "FUN_00002e6c"
            ],
            "imported": false,
            "current_name": "print_ascii_art_00002e48"
        },
        "FUN_00000930": {
            "renaming": {
                "FUN_00000930": "run_software_interrupt_and_loop_forever_00000930",
                "FUN_00000cf0": "run_software_interrupt",
                "software_interrupt": "run_software_interrupt"
            },
            "code": "void run_software_interrupt_and_loop_forever_00000930(void)\n{\n  run_software_interrupt();\n  while(1){\n    // loop forever\n  }\n}",
            "called": [
                "FUN_00000cf0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000930",
            "calling": [
                "FUN_00000f8c",
                "FUN_00000794"
            ],
            "imported": false,
            "current_name": "run_software_interrupt_and_loop_forever_00000930"
        },
        "FUN_00001348": {
            "renaming": {
                "FUN_00001348": "check_data_validity_00001348",
                "PTR_DAT_0000135c": "data_pointer",
                "FUN_0000093c": "perform_data_validation"
            },
            "code": "void check_data_validity_00001348(void)\n{\n    int* PTR_DAT_0000135c = (int*)PTR_DAT_0000135c;\n    if (*PTR_DAT_0000135c != 0)\n    {\n        perform_data_validation();\n    }\n    return;\n}",
            "called": [
                "FUN_0000093c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001348",
            "calling": [
                "FUN_00001628"
            ],
            "imported": false,
            "current_name": "check_data_validity_00001348"
        },
        "FUN_00001d3a": {
            "renaming": {
                "FUN_00001d3a": "set_value_to_one_00001d3a",
                "param_1": "value_ptr",
                "param_2": "param_2",
                "puVar1": "ptr_to_value",
                "*puVar1": "*ptr_to_value",
                "undefined4": "int32_t",
                "undefined": "uint8_t",
                "FUN_00001d08": "get_value_ptr"
            },
            "code": "void set_value_to_one_00001d3a(int32_t* value_ptr, uint8_t param_2) {\n    int32_t* ptr_to_value = (int32_t*) get_value_ptr(param_1, param_2);\n    *ptr_to_value = 1;\n    return;\n}",
            "called": [
                "FUN_00001d08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001d3a",
            "calling": [
                "FUN_00001ddc"
            ],
            "imported": false,
            "current_name": "set_value_to_one_00001d3a"
        },
        "FUN_00002434": {
            "renaming": {
                "FUN_00002434": "set_or_get_value_00002434",
                "param_1": "value_ptr",
                "param_2": "new_value",
                "uVar1": "return_value",
                "iVar2": "data_ptr",
                "PTR_DAT_000024b8": "data_ptr_ptr",
                "clean_up": "cleanup_temp_value",
                "allocate_memory": "allocate_memory_with_size",
                "set_value": "set_value_at_data_ptr",
                "release_memory": "free_allocated_memory"
            },
            "code": "int set_or_get_value_00002434(int *value_ptr, int new_value) {\n  int return_value = 0;\n  int temp_value = get_temp_value();\n  if (*value_ptr == 0) {\n    *value_ptr = -1;\n    clean_up(temp_value);\n    return_value = 1;\n  }\n  else if (new_value == 0) {\n    clean_up(temp_value);\n    return_value = 0;\n  }\n  else {\n    int data_ptr = *(int *)PTR_DAT_000024b8;\n    allocate_memory(data_ptr, 2);\n    if (*value_ptr == -1) {\n      *value_ptr = data_ptr + 8;\n      *(int *)*value_ptr = 0;\n    }\n    else {\n      set_value(value_ptr, data_ptr);\n    }\n    clean_up(temp_value);\n    release_memory();\n    return_value = 1;\n  }\n  return return_value;\n}",
            "called": [
                "FUN_00000d0c",
                "FUN_0000093c",
                "FUN_00000cd0",
                "FUN_00001034",
                "FUN_00000698"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002434",
            "calling": [
                "FUN_0000129c"
            ],
            "imported": false,
            "current_name": "set_or_get_value_00002434"
        },
        "FUN_00005700": {
            "renaming": {
                "process_data": "process_data",
                "param_1": "data",
                "param_2": "data_array",
                "uVar1": "flag_1",
                "iVar2": "temp_1",
                "local_18": "local_data",
                "local_14": "local_array",
                "FUN_00005700": "process_data_00005700"
            },
            "code": "void process_data_00005700(int data, int *data_array)\n{\n  ushort flag_1;\n  int temp_1;\n  int local_data;\n  int *local_array;\n  \n  if (-1 < (int)((uint)*(ushort *)(data_array + 3) << 0x1e)) {\n    local_data = data;\n    local_array = data_array;\n    flag_1 = extract_data(data, data_array, &local_data, &local_array);\n    temp_1 = check_data(data, local_data);\n    if (temp_1 != 0) {\n      *(undefined **)(data + 0x28) = PTR_DAT_0000577c;\n      *data_array = temp_1;\n      *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) | 0x80;\n      data_array[5] = local_data;\n      data_array[4] = temp_1;\n      if ((local_array != (int *)0x0) &&\n         (temp_1 = check_data(data, (int)*(short *)((int)data_array + 0xe)), temp_1 != 0)) {\n        *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(data_array + 3) = flag_1 | *(ushort *)(data_array + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(data_array + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) & 0xfffc | 2;\n  }\n  *data_array = (int)data_array + 0x47;\n  data_array[4] = (int)data_array + 0x47;\n  data_array[5] = 1;\n  return;\n}",
            "called": [
                "FUN_00004bd0",
                "FUN_00000534",
                "FUN_000056b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005700",
            "calling": [
                "FUN_00006768",
                "FUN_000054a8"
            ],
            "imported": false,
            "current_name": "process_data_00005700"
        },
        "FUN_00002798": {
            "renaming": {
                "FUN_00002798": "check_and_call_function_00002798",
                "PTR_DAT_000027ac": "ptr_data",
                "FUN_0000093c": "call_another_function"
            },
            "code": "void check_and_call_function_00002798(void)\n{\n  int *PTR_DAT_000027ac = (int *)PTR_DAT_000027ac;\n  if (*PTR_DAT_000027ac != 0) {\n    call_another_function();\n  }\n  return;\n}",
            "called": [
                "FUN_0000093c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002798",
            "calling": [
                "FUN_00002994"
            ],
            "imported": false,
            "current_name": "check_and_call_function_00002798"
        },
        "FUN_00003524": {
            "renaming": {
                "FUN_00003524": "handle_command_00003524",
                "param_1": "num_args",
                "param_2": "command_ptr",
                "iVar1": "status",
                "uVar2": "result",
                "FUN_000034c0": "print_usage",
                "FUN_000026d8": "print_error",
                "FUN_000026e4": "print_error",
                "FUN_000026c0": "print_error",
                "FUN_000033c0": "print_error",
                "FUN_000033f4": "handle_setalarm",
                "FUN_00003444": "print_error",
                "FUN_00004c84": "print_error_unknown_command_or_missing_param",
                "PTR_s_poweron_00003638": "PTR_s_poweron_00003638",
                "PTR_s_poweroff_0000363c": "PTR_s_poweroff_0000363c",
                "PTR_s_clearalarm_00003640": "PTR_s_clearalarm_00003640",
                "PTR_s_getalarm_00003644": "PTR_s_getalarm_00003644",
                "PTR_s_setalarm_00003648": "PTR_s_setalarm_00003648",
                "PTR_s_gettime_0000364c": "PTR_s_gettime_0000364c",
                "PTR_s_settime_00003650": "PTR_s_settime_00003650"
            },
            "code": "int handle_command_00003524(int num_args, int command_ptr)\n{\n  int result;\n  if (num_args < 2) {\n    print_usage();\n    result = 1;\n  }\n  else {\n    int status = execute_command(*(int *)(command_ptr + 4), PTR_s_poweron_00003638, 7);\n    if (status == 0) {\n      print_error();\n    }\n    else {\n      status = execute_command(*(int *)(command_ptr + 4), PTR_s_poweroff_0000363c, 8);\n      if (status == 0) {\n        print_error();\n      }\n      else {\n        status = execute_command(*(int *)(command_ptr + 4), PTR_s_clearalarm_00003640, 8);\n        if (status == 0) {\n          print_error();\n        }\n        else {\n          status = execute_command(*(int *)(command_ptr + 4), PTR_s_getalarm_00003644, 8);\n          if (status == 0) {\n            print_error();\n          }\n          else {\n            status = execute_command(*(int *)(command_ptr + 4), PTR_s_setalarm_00003648, 8);\n            if ((status == 0) && (num_args == 4)) {\n              handle_setalarm(command_ptr + 8);\n            }\n            else {\n              status = execute_command(*(int *)(command_ptr + 4), PTR_s_gettime_0000364c, 7);\n              if (status == 0) {\n                print_error();\n              }\n              else {\n                status = execute_command(*(int *)(command_ptr + 4), PTR_s_settime_00003650, 7);\n                if ((status != 0) || (num_args != 4)) {\n                  print_error_unknown_command_or_missing_param(*(int *)(command_ptr + 4));\n                  print_usage();\n                  return 1;\n                }\n                handle_settime(command_ptr + 8);\n              }\n            }\n          }\n        }\n      }\n    }\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_000026e4",
                "FUN_000026c0",
                "FUN_000033c0",
                "FUN_000034c0",
                "FUN_00004e66",
                "FUN_00004c84",
                "FUN_000026d8",
                "FUN_00003444",
                "FUN_00003478",
                "FUN_000033f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003524",
            "calling": [],
            "imported": false,
            "current_name": "handle_command_00003524"
        },
        "FUN_00001bb8": {
            "renaming": {
                "FUN_00001bb8": "process_data_00001bb8",
                "DAT_00001c74": "data",
                "DAT_00001c78": "data_1",
                "DAT_00001c7c": "data_2",
                "PTR_DAT_00001c80": "data_ptr",
                "FUN_00001710": "send_data",
                "FUN_00001748": "finish_process"
            },
            "code": "void process_data_00001bb8(void)\n{\n  if ((DAT_00001c74[1] & 2) != 0) {\n    send_DAT_00001c74(DAT_00001c74[2], 1);\n  }\n  if ((DAT_00001c74[5] & 0x40) != 0) {\n    if ((*DAT_00001c74 & 0xc0) == 0) {\n      *DAT_00001c74 = *DAT_00001c74 & 0x3f | 0x80;\n      while ((DAT_00001c74[6] & 0xc) != 8);\n    }\n    send_DAT_00001c74(DAT_00001c74[6], 6);\n    while ((DAT_00001c74[6] & 0x20) != 0);\n  }\n  finish_process(0);\n  *DAT_00001c74 = *DAT_00001c74 & 0x3b | 4;\n  while ((DAT_00001c74[6] & 0x10) == 0);\n  while ((DAT_00001c74[6] & 0xc) != 0);\n  *PTR_DAT_00001c80 = 0;\n  return;\n}",
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001bb8",
            "calling": [
                "FUN_00001c84"
            ],
            "imported": false,
            "current_name": "process_data_00001bb8"
        },
        "FUN_0000428c": {
            "renaming": {
                "FUN_0000428c": "do_nothing_with_data_0000428c",
                "DAT_00004294": "data_ptr"
            },
            "code": "void do_nothing_with_data_0000428c(int* DAT_00004294)\n{\n  do_nothing(DAT_00004294);\n  return;\n}",
            "called": [
                "FUN_000045e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000428c",
            "calling": [
                "FUN_000042a4"
            ],
            "imported": false,
            "current_name": "do_nothing_with_data_0000428c"
        },
        "FUN_0000404c": {
            "renaming": {
                "FUN_0000404c": "decode_data_0000404c",
                "param_1": "data_ptr",
                "param_2": "params_ptr",
                "iVar1": "total_bytes_read",
                "piVar2": "current_param_ptr",
                "uVar3": "current_data_value",
                "uVar4": "current_data_flags",
                "iVar5": "current_read_size",
                "iVar7": "current_decoded_bytes",
                "pcVar6": "decoder_function",
                "remaining_data_size": "remaining_data_size",
                "uVar8": "current_data_flags_shifted",
                "bVar9": "is_first_block",
                "current_block_size": "current_block_size",
                "current_block_offset": "current_block_offset",
                "current_block_decoded_bytes": "current_block_decoded_bytes",
                "current_bytes_read": "current_bytes_read",
                "current_block_data_size": "current_block_data_size",
                "block_data_size_ptr": "block_data_size_ptr",
                "current_data_flags_shifted_2": "current_data_flags_shifted_2",
                "current_block_size_2": "current_block_size_2",
                "current_block_offset_2": "current_block_offset_2",
                "current_block_decoded_bytes_2": "current_block_decoded_bytes_2",
                "current_bytes_read_2": "current_bytes_read_2",
                "block_data_size_ptr_2": "block_data_size_ptr_2",
                "is_error": "is_error"
            },
            "code": "int decode_data_0000404c(uint *data_ptr, int *params_ptr) {\n  int total_bytes_read;\n  int *current_param_ptr;\n  uint current_data_value;\n  ushort current_data_flags;\n  int current_read_size;\n  int current_decoded_bytes;\n  code *decoder_function;\n  int remaining_data_size;\n  uint current_data_flags_shifted;\n  bool is_first_block;\n  int current_block_size;\n  int current_block_offset;\n  int current_block_decoded_bytes;\n  int current_bytes_read;\n  int current_block_data_size;\n  int *block_data_size_ptr;\n  uint current_data_flags_shifted_2;\n  int current_block_size_2;\n  int current_block_offset_2;\n  int current_block_decoded_bytes_2;\n  int current_bytes_read_2;\n  int *block_data_size_ptr_2;\n  bool is_error;\n  \n  current_data_flags = *(ushort *)(params_ptr + 3);\n  current_data_flags_shifted = (uint)current_data_flags << 0x1c;\n  if ((int)current_data_flags_shifted < 0) {\n    current_block_size = params_ptr[4];\n    if (current_block_size != 0) {\n      current_read_size = (int)current_data_flags << 0x1e;\n      is_first_block = current_read_size == 0;\n      remaining_data_size = *params_ptr;\n      if (is_first_block) {\n        current_read_size = params_ptr[5];\n      }\n      *params_ptr = current_block_size;\n      if (!is_first_block) {\n        current_read_size = 0;\n      }\n      params_ptr[2] = current_read_size;\n      current_block_offset = remaining_data_size - current_block_size;\n      while (current_block_offset > 0) {\n        current_decoded_bytes = (*(code *)params_ptr[10])(data_ptr, params_ptr[8], current_block_size, current_block_offset);\n        if (current_decoded_bytes < 1) {\n          current_data_flags = *(ushort *)(params_ptr + 3) | 0x40;\n          return -1;\n        }\n        current_block_size_2 = current_block_size + current_decoded_bytes;\n        current_block_offset_2 = current_block_offset - current_block_size;\n        current_block_decoded_bytes_2 = current_decoded_bytes;\n        current_bytes_read_2 = current_decoded_bytes;\n        block_data_size_ptr_2 = &current_read_size;\n        while (current_block_offset_2 > 0) {\n          current_bytes_read = (*(code *)params_ptr[10])(data_ptr, params_ptr[8], current_block_size_2, current_block_offset_2);\n          if (current_bytes_read < 1) {\n            *(ushort *)(params_ptr + 3) = current_data_flags | 0x40;\n            return -1;\n          }\n          current_block_offset_2 = current_block_offset_2 - current_bytes_read;\n          current_block_decoded_bytes_2 = current_block_decoded_bytes_2 + current_bytes_read;\n          current_bytes_read_2 = current_bytes_read_2 + current_bytes_read;\n          if (current_block_offset_2 <= 0) {\n            break;\n          }\n          current_block_size_2 = current_block_size_2 + current_bytes_read;\n          if (block_data_size_ptr_2 != (int *)0x0) {\n            if (block_data_size_ptr_2 != params_ptr + 0x11) {\n              FUN_00004b34(data_ptr);\n            }\n            *block_data_size_ptr_2 = 0;\n          }\n        }\n        current_block_size = current_block_size_2;\n        current_block_offset = current_block_offset_2;\n        current_decoded_bytes = current_block_decoded_bytes_2;\n        current_read_size = current_read_size + current_decoded_bytes;\n        remaining_data_size = remaining_data_size - current_decoded_bytes;\n        if (block_data_size_ptr_2 != (int *)0x0) {\n          if (block_data_size_ptr_2 != params_ptr + 0x11) {\n            FUN_00004b34(data_ptr);\n          }\n          *block_data_size_ptr_2 = 0;\n        }\n      }\n    }\n  }\n  else {\n    if ((params_ptr[1] < 1) && (params_ptr[0x10] < 1)) {\n      return 0;\n    }\n    decoder_function = (code *)params_ptr[0xb];\n    if (decoder_function == (code *)0x0) {\n      return 0;\n    }\n    current_data_value = *data_ptr;\n    *data_ptr = 0;\n    if ((current_data_flags & 0x1000) == 0) {\n      current_decoded_bytes = (*decoder_function)(data_ptr, params_ptr[8], current_data_flags & 0x1000, 1);\n      if ((current_decoded_bytes == -1) && (current_data_value = *data_ptr, current_data_value != 0)) {\n        if ((current_data_value == 0x1d) || (current_data_value == 0x16)) {\n          *data_ptr = current_data_value;\n          return 0;\n        }\n        current_data_flags_shifted_2 = *(ushort *)(params_ptr + 3);\n        goto LAB_00004104;\n      }\n    }\n    else {\n      current_decoded_bytes = params_ptr[0x15];\n    }\n    if (((int)((uint)*(ushort *)(params_ptr + 3) << 0x1d) < 0) && (current_decoded_bytes = current_decoded_bytes - params_ptr[1], params_ptr[0xd] != 0)) {\n      current_decoded_bytes = current_decoded_bytes - params_ptr[0x10];\n    }\n    current_decoded_bytes = (*(code *)params_ptr[0xb])(data_ptr, params_ptr[8], current_decoded_bytes, 0);\n    current_data_flags_shifted_2 = *(ushort *)(params_ptr + 3);\n    if ((current_decoded_bytes == -1) && ((0x1d < *data_ptr || (-1 < (int)((DAT_00004154 >> (*data_ptr & 0xff)) << 0x1f)))) {\n      *(ushort *)(params_ptr + 3) = current_data_flags_shifted_2 | 0x40;\n      return current_decoded_bytes;\n    }\n    params_ptr[1] = 0;\n    *params_ptr = params_ptr[4];\n    if (((int)((uint)current_data_flags_shifted << 0x13) < 0) && ((current_decoded_bytes != -1 || (*data_ptr == 0)))) {\n      params_ptr[0x15] = current_decoded_bytes;\n    }\n    current_param_ptr = (int *)params_ptr[0xd];\n    *data_ptr = current_data_value;\n    if (current_param_ptr != (int *)0x0) {\n      if (current_param_ptr != params_ptr + 0x11) {\n        FUN_00004b34(data_ptr);\n      }\n      params_ptr[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_00004b34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000404c",
            "calling": [
                "FUN_00004158",
                "FUN_00006768"
            ],
            "imported": false,
            "current_name": "decode_data_0000404c"
        },
        "FUN_00002f74": {
            "renaming": {
                "FUN_00002f74": "print_devices_found_00002f74",
                "local_18": "device_count",
                "local_14": "device_list",
                "PTR_DAT_00002fd0": "device_list_pointer",
                "PTR_s_No_devices_found_00002fd8": "no_devices_found_string",
                "PTR_s_ID_Class_Name_00002fd4": "id_class_name_string",
                "PTR_s___i__s__s_00002fdc": "device_info_string",
                "FUN_000039e8": "get_device_name",
                "*(undefined *)(local_14[3] + 8)": "device_name_pointer",
                "device_name": "device_name"
            },
            "code": "void print_devices_found_00002f74(void)\n{\n  undefined4 device_count = 0;\n  undefined4 *device_list = *(undefined4 **)PTR_DAT_00002fd0;\n  \n  if (device_list == (undefined4 *)0x0) {\n    print_string(PTR_s_No_devices_found_00002fd8);\n  }\n  else {\n    print_string(PTR_s_ID_Class_Name_00002fd4);\n  }\n  \n  for (; device_list != (undefined4 *)0x0; device_list = (undefined4 *)*device_list) {\n    undefined4 device_name = get_device_name(*(undefined *)(device_list[3] + 8));\n    print_string(PTR_s___i__s__s_00002fdc, device_count, device_name, device_list[2]);\n    device_count++;\n  }\n  return;\n}\n",
            "called": [
                "FUN_00004db8",
                "FUN_00004c84",
                "FUN_000039e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002f74",
            "calling": [
                "FUN_0000316c"
            ],
            "imported": false,
            "current_name": "print_devices_found_00002f74"
        },
        "FUN_000010a0": {
            "renaming": {
                "FUN_000010a0": "get_offset_to_last_element_000010a0",
                "param_1": "arr",
                "local_c": "current_element"
            },
            "code": "int get_offset_to_last_element_000010a0(int *arr) {\n  int *current_element = arr;\n  while ((int *)*current_element == current_element) {\n    current_element++;\n  }\n  return (int)current_element - (int)arr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000010a0",
            "calling": [
                "FUN_0000211c"
            ],
            "imported": false,
            "current_name": "get_offset_to_last_element_000010a0"
        },
        "FUN_000012e2": {
            "renaming": {
                "FUN_000012e2": "find_nonzero_value_after_offset_000012e2",
                "param_1": "ptr_data",
                "param_2": "offset",
                "param_3": "size",
                "iVar1": "value",
                "FUN_0000231c": "get_value_at_offset",
                "FUN_0000129c": "clear_value_at_offset"
            },
            "code": "int find_nonzero_value_after_offset_000012e2(int ptr_data, int offset, int size) {\n  int value;\n  while(true) {\n    value = get_value_at_offset(ptr_data + offset, size);\n    if (value != 0) {\n      break;\n    }\n    clear_value_at_offset(ptr_data);\n  }\n  return value;\n}",
            "called": [
                "FUN_0000231c",
                "FUN_0000129c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000012e2",
            "calling": [
                "FUN_00000e14"
            ],
            "imported": false,
            "current_name": "find_nonzero_value_after_offset_000012e2"
        },
        "FUN_000056a0": {
            "renaming": {
                "FUN_000056a0": "process_data_000056a0",
                "param_1": "data",
                "param_2": "data_size",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "uStack_c": "buffer_ptr",
                "uStack_8": "data_ptr",
                "FUN_0000562c": "copy_data"
            },
            "code": "void process_data_000056a0(void* data, int data_size, void* buffer, int buffer_size)\n{\n  int* buffer_ptr = (int*)buffer;\n  int* data_ptr = (int*)data;\n  *buffer_ptr = data_size;\n  *(buffer_ptr + 1) = buffer_size;\n  copy_data(data_ptr, data_size, buffer_ptr + 2, buffer_size, data_ptr);\n  return;\n}",
            "called": [
                "FUN_0000562c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000056a0",
            "calling": [
                "FUN_00005100"
            ],
            "imported": false,
            "current_name": "process_data_000056a0"
        },
        "FUN_0000231c": {
            "renaming": {
                "FUN_0000231c": "copy_bytes_from_memory_0000231c",
                "param_1": "source_address",
                "param_2": "destination",
                "param_3": "num_bytes",
                "uVar1": "byte_to_copy",
                "iVar2": "copy_status",
                "local_20": "destination_ptr",
                "local_14": "bytes_left_to_copy"
            },
            "code": "int copy_bytes_from_memory_0000231c(undefined4 source_address, undefined *destination, int num_bytes) {\n  undefined byte_to_copy;\n  int bytes_copied = 0;\n  undefined *destination_ptr = destination;\n  int bytes_left_to_copy = num_bytes;\n  while ((bytes_left_to_copy != 0 && (bytes_copied = check_copy_status(source_address), bytes_copied == 0))) {\n    byte_to_copy = get_next_byte(source_address);\n    *destination_ptr = byte_to_copy;\n    bytes_left_to_copy--;\n    destination_ptr++;\n  }\n  return num_bytes - bytes_left_to_copy;\n}",
            "called": [
                "FUN_00002270",
                "FUN_000022f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000231c",
            "calling": [
                "FUN_000012e2"
            ],
            "imported": false,
            "current_name": "copy_bytes_from_memory_0000231c"
        },
        "FUN_000061cc": {
            "renaming": {
                "FUN_000061cc": "FUNC_000061cc"
            },
            "code": "\nint FUNC_000061cc(int param_1,byte **param_2,byte *param_3,int **param_4)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  int iVar3;\n  uint uVar4;\n  byte *pbVar5;\n  uint uVar6;\n  int **local_2b0;\n  undefined auStack_2ac [256];\n  uint local_1ac;\n  undefined4 local_1a8;\n  uint local_1a4;\n  int local_1a0;\n  int local_19c;\n  undefined *local_198;\n  int local_194;\n  undefined *local_30;\n  code *local_2c;\n  \n  puVar2 = PTR_DAT_000064b4;\n  puVar1 = PTR_DAT_000064b0;\n  local_1a0 = 0;\n  local_19c = 0;\n  local_30 = PTR_LAB_00006118_1_000064a8;\n  local_2c = DAT_000064ac;\n  local_2b0 = param_4;\n  local_198 = auStack_2ac;\nLAB_000061f6:\n  while( true ) {\n    while( true ) {\n      uVar6 = (uint)*param_3;\n      if (uVar6 == 0) {\n        return local_1a0;\n      }\n      uVar4 = (byte)puVar1[uVar6] & 8;\n      pbVar5 = param_3 + 1;\n      if ((puVar1[uVar6] & 8) == 0) break;\n      while (((param_3 = pbVar5, 0 < (int)param_2[1] ||\n              (iVar3 = (*local_2c)(param_1,param_2), iVar3 == 0)) &&\n             ((int)((uint)(byte)puVar1[**param_2] << 0x1c) < 0))) {\n        local_19c = local_19c + 1;\n        param_2[1] = param_2[1] + -1;\n        *param_2 = *param_2 + 1;\n      }\n    }\n    if (uVar6 == 0x25) break;\nLAB_00006352:\n    if (((int)param_2[1] < 1) && (iVar3 = (*local_2c)(param_1,param_2), iVar3 != 0))\n    goto LAB_00006380;\n    if (**param_2 != uVar6) {\n      return local_1a0;\n    }\n    *param_2 = *param_2 + 1;\n    local_19c = local_19c + 1;\n    param_2[1] = param_2[1] + -1;\n    param_3 = pbVar5;\n  }\n  local_1a4 = uVar4;\n  local_1ac = uVar4;\n  if (param_3[1] == 0x2a) {\n    pbVar5 = param_3 + 2;\n    local_1ac = 0x10;\n  }\n  while( true ) {\n    uVar4 = (uint)*pbVar5;\n    if (9 < uVar4 - 0x30) break;\n    pbVar5 = pbVar5 + 1;\n    local_1a4 = (local_1a4 * 10 + uVar4) - 0x30;\n  }\n  iVar3 = FUN_00006010(PTR_DAT_000064b4,uVar4,3);\n  if (iVar3 != 0) {\n    local_1ac = 1 << (iVar3 - (int)puVar2 & 0xffU) | local_1ac;\n    pbVar5 = pbVar5 + 1;\n  }\n  param_3 = pbVar5 + 1;\n  uVar4 = (uint)*pbVar5;\n  if (uVar4 < 0x79) {\n    if (0x57 < uVar4) {\n      switch(uVar4) {\n      default:\n        goto switchD_000062c0_caseD_59;\n      case 0x5b:\n        param_3 = (byte *)FUN_0000687c(auStack_2ac,param_3);\n        local_1ac = local_1ac | 0x40;\n        local_194 = 1;\n        break;\n      case 99:\n        local_1ac = local_1ac | 0x40;\n        local_194 = 0;\n        break;\n      case 100:\n      case 0x75:\n        local_1a8 = 10;\nLAB_000063a0:\n        if (uVar4 < 0x6f) {\n          local_194 = 3;\n        }\n        else {\n          local_194 = 4;\n        }\n        break;\n      case 0x65:\n      case 0x66:\n      case 0x67:\nswitchD_000062c0_caseD_65:\n        local_194 = 5;\n        break;\n      case 0x69:\n        local_1a8 = 0;\n        local_194 = 3;\n        break;\n      case 0x6e:\n        if (-1 < (int)(local_1ac << 0x1b)) {\n          if ((int)(local_1ac << 0x1f) < 0) {\n            *(short *)*local_2b0 = (short)local_19c;\n            local_2b0 = local_2b0 + 1;\n          }\n          else {\n            **local_2b0 = local_19c;\n            local_2b0 = local_2b0 + 1;\n          }\n        }\n        goto LAB_000061f6;\n      case 0x6f:\n        local_1a8 = 8;\n        local_194 = 4;\n        break;\n      case 0x70:\n        local_1ac = local_1ac | 0x20;\n      case 0x58:\n      case 0x78:\n        local_1ac = local_1ac | 0x200;\n        local_1a8 = 0x10;\n        goto LAB_000063a0;\n      case 0x73:\n        local_194 = 2;\n      }\nLAB_000063ac:\n      if (((int)param_2[1] < 1) && (iVar3 = (*local_2c)(param_1,param_2), iVar3 != 0))\n      goto LAB_00006380;\n      if (-1 < (int)(local_1ac << 0x19)) {\n        while ((int)((uint)(byte)puVar1[**param_2] << 0x1c) < 0) {\n          local_19c = local_19c + 1;\n          pbVar5 = param_2[1];\n          param_2[1] = pbVar5 + -1;\n          if ((int)(pbVar5 + -1) < 1) {\n            iVar3 = (*local_2c)(param_1,param_2);\n            if (iVar3 != 0) goto LAB_00006380;\n          }\n          else {\n            *param_2 = *param_2 + 1;\n          }\n        }\n      }\n      if (local_194 < 3) {\n        iVar3 = process_data(param_1,&local_1ac,param_2,&local_2b0);\n      }\n      else if (local_194 < 5) {\n        iVar3 = FUNC_0000656c(param_1,&local_1ac,param_2,&local_2b0);\n      }\n      else {\n        iVar3 = param_1;\n        if (DAT_000064b8 == 0) goto LAB_000061f6;\n      }\n      if (iVar3 == 1) {\n        return local_1a0;\n      }\n      if (iVar3 == 2) {\nLAB_00006380:\n        if (local_1a0 == 0) {\nLAB_00006388:\n          local_1a0 = -1;\n        }\n        else if ((*(ushort *)(param_2 + 3) & 0x40) != 0) {\n          local_1a0 = -1;\n        }\n        return local_1a0;\n      }\n      goto LAB_000061f6;\n    }\n    pbVar5 = param_3;\n    if (uVar4 == 0x25) goto LAB_00006352;\n    if (uVar4 < 0x26) {\n      if (uVar4 != 0) goto switchD_000062c0_caseD_59;\n      goto LAB_00006388;\n    }\n    if (uVar4 - 0x45 < 3) goto switchD_000062c0_caseD_65;\n  }\nswitchD_000062c0_caseD_59:\n  local_194 = 3;\n  local_1a8 = 10;\n  goto LAB_000063ac;\n}\n\n",
            "called": [
                "FUN_0000687c",
                "FUN_00006192",
                "FUN_00006010",
                "FUN_0000656c",
                "FUN_000064bc"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000061cc",
            "calling": [
                "FUN_00005e68"
            ],
            "imported": false,
            "current_name": "FUNC_000061cc"
        },
        "FUN_00002690": {
            "renaming": {
                "processData": "processData",
                "param_1": "input",
                "local_10": "result",
                "uStack_c": "temp",
                "FUN_000028f0": "getInitialValue",
                "FUN_0000443c": "processDataHelper",
                "FUN_00002690": "processData_00002690"
            },
            "code": "int processData_00002690(undefined4 input)\n{\n  int result = getInitialValue();\n  int temp = 0;\n  processData_00002690Helper(&result, input);\n  return 0;\n}",
            "called": [
                "FUN_0000443c",
                "FUN_000028f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002690",
            "calling": [
                "FUN_000033c0"
            ],
            "imported": false,
            "current_name": "processData_00002690"
        },
        "FUN_00006010": {
            "renaming": {
                "FUN_00006010": "find_byte_in_buffer_00006010",
                "param_1": "buffer",
                "param_2": "target_byte",
                "param_3": "buffer_size",
                "bVar1": "current_byte",
                "cVar2": "mask_1",
                "cVar3": "mask_2",
                "cVar4": "mask_3",
                "cVar5": "mask_4",
                "pbVar6": "next_byte",
                "puVar7": "current_word",
                "pbVar8": "result_pointer",
                "uVar9": "buffer_alignment",
                "uVar10": "buffer_size_aligned",
                "uVar11": "buffer_word_1",
                "uVar12": "buffer_word_2",
                "bVar13": "buffer_word_2_byte_1_is_nonzero",
                "bVar14": "buffer_word_2_byte_2_is_nonzero",
                "bVar15": "buffer_word_2_byte_3_is_nonzero",
                "bVar16": "buffer_word_2_byte_4_is_nonzero"
            },
            "code": "byte* find_byte_in_buffer_00006010(uint* buffer, uint target_byte, uint buffer_size) {\n    target_byte = target_byte & 0xff;\n    if ((int)buffer_size < 0x10) {\n        while (buffer_size > 0) {\n            if (*buffer == target_byte) {\n                return (byte*)buffer;\n            }\n            buffer++;\n            buffer_size--;\n        }\n    }\n    else {\n        uint buffer_alignment = (uint)buffer & 7;\n        uint target_word = target_byte | (target_byte << 8) | (target_byte << 16) | (target_byte << 24);\n        uint buffer_size_aligned = buffer_size & 0xfffffff8;\n        while (buffer_alignment != 0) {\n            if (*buffer == target_byte) {\n                return (byte*)buffer;\n            }\n            buffer++;\n            buffer_size--;\n            buffer_alignment = (uint)buffer & 7;\n        }\n        while (buffer_size_aligned != 0) {\n            uint buffer_word_1 = *buffer ^ target_word;\n            uint buffer_word_2 = *(buffer + 1) ^ target_word;\n            bool buffer_word_1_is_zero = buffer_word_1 == 0;\n            bool buffer_word_2_is_zero = buffer_word_2 == 0;\n            uint mask_1 = (buffer_word_1_is_zero - 1) << 31 >> 31;\n            uint mask_2 = (buffer_word_1 >> 8 == 0) * (buffer_word_1_is_zero - 1) << 31 >> 31;\n            uint mask_3 = (buffer_word_1 >> 16 == 0) * (buffer_word_1_is_zero - 1) << 31 >> 31;\n            uint mask_4 = (buffer_word_1 >> 24 == 0) * (buffer_word_1_is_zero - 1) << 31 >> 31;\n            uint mask_5 = (buffer_word_2 != 0) << 31 >> 31;\n            uint mask_6 = (buffer_word_2 >> 8 != 0) * mask_5;\n            uint mask_7 = (buffer_word_2 >> 16 != 0) * mask_6;\n            uint mask_8 = (buffer_word_2 >> 24 != 0) * mask_7;\n            uint mask_9 = mask_8 | mask_4 | mask_3 | mask_2 | mask_1;\n            if (mask_9 != 0) {\n                if (buffer_word_1_is_zero) {\n                    buffer++;\n                    buffer_size_aligned--;\n                }\n                else {\n                    buffer += 5 - ((mask_9 >> 24) & 1) - ((mask_9 >> 16) & 1) - ((mask_9 >> 8) & 1) - (mask_9 & 1);\n                    return (byte*)buffer;\n                }\n            }\n            else {\n                buffer += 2;\n                buffer_size_aligned -= 8;\n            }\n        }\n        while (buffer_size != 0) {\n            if (*buffer == target_byte) {\n                return (byte*)buffer;\n            }\n            buffer++;\n            buffer_size--;\n        }\n    }\n    return (byte*)0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00006010",
            "calling": [
                "FUN_000061cc",
                "FUN_0000656c",
                "FUN_000057f8",
                "FUN_00005b34"
            ],
            "imported": false,
            "current_name": "find_byte_in_buffer_00006010"
        },
        "FUN_00001cf0": {
            "renaming": {
                "FUN_00001cf0": "check_ptr_dat_00001cf0",
                "PTR_DAT_00001d04": "ptr",
                "FUN_0000093c": "do_something"
            },
            "code": "void check_ptr_dat_00001cf0() {\n  int* PTR_DAT_00001d04 = (int *)PTR_DAT_00001d04;\n  if (*PTR_DAT_00001d04 != 0) {\n    FUN_0000093c();\n  }\n  return;\n}",
            "called": [
                "FUN_0000093c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001cf0",
            "calling": [
                "FUN_00002028"
            ],
            "imported": false,
            "current_name": "check_ptr_dat_00001cf0"
        },
        "FUN_00003ec4": {
            "renaming": {
                "FUN_00003ec4": "format_number_in_string_00003ec4",
                "param_1": "output_string",
                "param_2": "number",
                "param_3": "decimal_places",
                "iVar1": "integer_part_length",
                "uVar2": "unused_variable",
                "uVar3": "quotient",
                "local_10": "remainder",
                "local_c": "length"
            },
            "code": "int format_number_in_string_00003ec4(char *output_string, uint32_t number, int decimal_places) {\n  int length = 0;\n  if (decimal_places + 7 < 0 != __builtin_sadd_overflow(decimal_places, 7, &length)) {\n    assert(0 && \"Failed assertion: decimal_places + 7 < 0\");\n  }\n  int integer_part_length = 0;\n  if (decimal_places == 0) {\n    integer_part_length = format_unsigned_integer(output_string, number);\n  }\n  else if (decimal_places < 1) {\n    uint32_t divisor = *(uint32_t *)(PTR_DAT_00003ff0 + decimal_places * -4);\n    uint32_t quotient = number / divisor;\n    uint32_t remainder = number - divisor * quotient;\n    if (remainder < 0) {\n      remainder = -remainder;\n    }\n    if ((quotient == 0) && ((int32_t)number < 0)) {\n      if (output_string != NULL) {\n        *output_string = '-';\n      }\n      integer_part_length = 1;\n    }\n    if (output_string == NULL) {\n      int quotient_length = format_unsigned_integer(NULL, quotient);\n      integer_part_length = quotient_length + 1 + integer_part_length;\n    }\n    else {\n      int quotient_length = format_unsigned_integer(output_string + integer_part_length, quotient);\n      integer_part_length = integer_part_length + quotient_length + 1;\n      output_string[integer_part_length - 1] = '.';\n      int remainder_length = format_unsigned_integer(output_string + integer_part_length, remainder);\n      format_padding(output_string + integer_part_length, remainder_length, -decimal_places, '0');\n    }\n    integer_part_length = -decimal_places + integer_part_length;\n  }\n  else {\n    integer_part_length = format_unsigned_integer(output_string, number);\n    if (output_string != NULL) {\n      format_padding(output_string + integer_part_length, 0, decimal_places, '0');\n    }\n    integer_part_length = decimal_places + integer_part_length;\n  }\n  return integer_part_length;\n}",
            "called": [
                "FUN_00003e58",
                "FUN_00000f04",
                "FUN_00003ff4",
                "FUN_00004622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003ec4",
            "calling": [
                "FUN_00003e9e"
            ],
            "imported": false,
            "current_name": "format_number_in_string_00003ec4"
        },
        "FUN_00001360": {
            "renaming": {
                "FUN_00001360": "calculate_offset_00001360",
                "param_1": "address",
                "param_2": "offset",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int calculate_offset_00001360(uint32_t address, int offset){\n    uint32_t upper_bits = address & 0xf0000000;\n    uint32_t lower_bits = address & 0xfffff;\n    int calculated_offset = (offset * 4) + (upper_bits | (lower_bits << 5)) + 0x2000000;\n    return calculated_offset;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001360",
            "calling": [
                "FUN_00001392"
            ],
            "imported": false,
            "current_name": "calculate_offset_00001360"
        },
        "FUN_00004622": {
            "renaming": {
                "FUN_00004622": "fill_memory_with_value_00004622",
                "param_1": "memory_start",
                "param_2": "value_to_fill",
                "param_3": "memory_size",
                "puVar1": "memory_end",
                "*param_1": "*memory_start"
            },
            "code": "void fill_memory_with_value_00004622(void* memory_start, char value_to_fill, int memory_size) {\n  void* memory_end = memory_start + memory_size;\n  for (; memory_start != memory_end; memory_start++) {\n    *memory_start = value_to_fill;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004622",
            "calling": [
                "FUN_00004314",
                "FUN_0000305c",
                "FUN_00003ff4",
                "FUN_00003ec4",
                "FUN_00004248",
                "FUN_000041f4"
            ],
            "imported": false,
            "current_name": "fill_memory_with_value_00004622"
        },
        "FUN_0000093c": {
            "renaming": {
                "FUN_0000093c": "set_flag_on_register_0000093c",
                "DAT_00000954": "register_data"
            },
            "code": "void set_flag_on_register_0000093c(void)\n{\n    uint32_t *register_ptr = (uint32_t *)(DAT_00000954 + 4);\n    uint32_t flag_value = 0x10000000;\n    *register_ptr |= flag_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000093c",
            "calling": [
                "FUN_00002434",
                "FUN_00002798",
                "FUN_00000738",
                "FUN_00001cf0",
                "FUN_00001348"
            ],
            "imported": false,
            "current_name": "set_flag_on_register_0000093c"
        },
        "FUN_00003658": {
            "renaming": {
                "FUN_00003658": "data_sync_barrier_00003658",
                "PTR_00003680": "ptr",
                "DAT_00003684": "val",
                "DAT_00003680": "data"
            },
            "code": "void data_sync_barrier_00003658(void)\n{\n    DataSynchronizationBarrier(0xf);\n    uint* PTR_00003680 = (uint*)(DAT_00003680 + 0xc);\n    uint DAT_00003684 = *(uint*)(DAT_00003680 + 0xc) & 0x700;\n    *PTR_00003680 = DAT_00003684 | DAT_00003684;\n    DataSynchronizationBarrier(0xf);\n    while (true) {}\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003658",
            "calling": [
                "FUN_00003688"
            ],
            "imported": false,
            "current_name": "data_sync_barrier_00003658"
        },
        "FUN_000019c0": {
            "renaming": {
                "FUN_000019c0": "initialize_wifi_connection_000019c0",
                "FUN_00001778": "enable_wifi",
                "FUN_00001748": "set_wifi_timeout",
                "FUN_00001710": "set_wifi_mode",
                "DAT_00001a0c": "DAT_WIFI_CONFIG",
                "DAT_00001a10": "DAT_WIFI_CONFIG_2",
                "PTR_DAT_00001a14": "PTR_WIFI_CONNECTION_STATUS"
            },
            "code": "void initialize_wifi_connection_000019c0(void)\n{\n  enable_wifi();\n  set_wifi_timeout(0x40);\n  set_wifi_mode(DAT_WIFI_MODE_STA,1);\n  *DAT_00001a0c = (*DAT_00001a0c & 0x3b) | 0x80;\n  do {\n  } while ((DAT_00001a0c[6] & 0xc) != DAT_WIFI_STATUS_CONNECTED);\n  disable_wifi_timeout();\n  *PTR_DAT_00001a14 = WIFI_CONNECTED;\n  return;\n}",
            "called": [
                "FUN_00001710",
                "FUN_00001748",
                "FUN_00001734",
                "FUN_00001778"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000019c0",
            "calling": [
                "FUN_00001b10"
            ],
            "imported": false,
            "current_name": "initialize_wifi_connection_000019c0"
        },
        "FUN_000060b0": {
            "renaming": {
                "FUN_000060b0": "copy_memory_000060b0",
                "param_1": "dest_start",
                "param_2": "src_start",
                "param_3": "num_bytes",
                "puVar1": "next_src",
                "puVar2": "src_end",
                "puVar3": "dest_end"
            },
            "code": "void copy_memory_000060b0(int dest_start, undefined *src_start, int num_bytes) {\n  undefined *src_end = src_start + num_bytes;\n  undefined *dest_end = (undefined *)(dest_start - 1);\n  if (src_start != src_end) {\n    do {\n      undefined *next_src = src_start + 1;\n      dest_end = dest_end + 1;\n      *dest_end = *src_start;\n      src_start = next_src;\n    } while (next_src != src_end);\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000060b0",
            "calling": [
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "imported": false,
            "current_name": "copy_memory_000060b0"
        },
        "FUN_00006a14": {
            "renaming": {
                "FUN_00006a14": "FUNC_00006a14"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006ca0) */\n\nulonglong FUNC_00006a14(uint param_1,uint param_2,uint param_3,uint param_4,uint *param_5)\n\n{\n  code *UNRECOVERED_JUMPTABLE;\n  uint uVar1;\n  uint *puVar2;\n  uint *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar4 = count_leading_zeroes(param_3);\n      if (uVar4 != 0) {\n        param_3 = param_3 << (uVar4 & 0xff);\n        param_2 = param_1 >> (0x20 - uVar4 & 0xff) | param_2 << (uVar4 & 0xff);\n        param_1 = param_1 << (uVar4 & 0xff);\n      }\n      uVar7 = param_3 >> 0x10;\n      uVar9 = param_2 / uVar7;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar7 * uVar9) * 0x10000;\n      uVar1 = uVar9 * (param_3 & 0xffff);\n      uVar6 = uVar9;\n      if (uVar5 <= uVar1 && uVar1 - uVar5 != 0) {\n        bVar11 = CARRY4(param_3,uVar5);\n        uVar5 = param_3 + uVar5;\n        uVar6 = uVar9 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar1 && uVar1 - uVar5 != 0)) {\n          uVar6 = uVar9 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar9 = (uVar5 - uVar1) / uVar7;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar1) - uVar7 * uVar9) * 0x10000;\n      uVar7 = uVar9 * (param_3 & 0xffff);\n      uVar1 = uVar9;\n      if (uVar5 <= uVar7 && uVar7 - uVar5 != 0) {\n        bVar11 = CARRY4(param_3,uVar5);\n        uVar5 = param_3 + uVar5;\n        uVar1 = uVar9 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar7 && uVar7 - uVar5 != 0)) {\n          uVar1 = uVar9 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar5 = uVar5 - uVar7;\n      puVar2 = (uint *)(uVar1 | uVar6 << 0x10);\n      puVar3 = (uint *)0x0;\n    }\n    else {\n      if (param_3 == 0) {\n                    /* WARNING: Could not recover jumptable at 0x00006abc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n        UNRECOVERED_JUMPTABLE = (code *)software_udf(0xff,0x6abc);\n        uVar12 = (*UNRECOVERED_JUMPTABLE)();\n        return uVar12;\n      }\n      uVar4 = count_leading_zeroes(param_3);\n      if (uVar4 == 0) {\n        param_2 = param_2 - param_3;\n        uVar10 = param_3 >> 0x10;\n        uVar8 = param_3 & 0xffff;\n        puVar3 = (uint *)0x1;\n      }\n      else {\n        param_3 = param_3 << (uVar4 & 0xff);\n        uVar10 = param_3 >> 0x10;\n        uVar6 = param_2 >> (0x20 - uVar4 & 0xff);\n        uVar1 = param_1 >> (0x20 - uVar4 & 0xff) | param_2 << (uVar4 & 0xff);\n        uVar5 = uVar6 / uVar10;\n        uVar8 = param_3 & 0xffff;\n        uVar9 = uVar1 >> 0x10 | (uVar6 - uVar10 * uVar5) * 0x10000;\n        uVar7 = uVar5 * uVar8;\n        param_1 = param_1 << (uVar4 & 0xff);\n        uVar6 = uVar5;\n        if (uVar9 <= uVar7 && uVar7 - uVar9 != 0) {\n          bVar11 = CARRY4(param_3,uVar9);\n          uVar9 = param_3 + uVar9;\n          uVar6 = uVar5 - 1;\n          if ((bVar11 == false) && (uVar9 <= uVar7 && uVar7 - uVar9 != 0)) {\n            uVar6 = uVar5 - 2;\n            uVar9 = uVar9 + param_3;\n          }\n        }\n        uVar5 = (uVar9 - uVar7) / uVar10;\n        param_2 = uVar1 & 0xffff | ((uVar9 - uVar7) - uVar10 * uVar5) * 0x10000;\n        uVar7 = uVar5 * uVar8;\n        uVar1 = uVar5;\n        if (param_2 <= uVar7 && uVar7 - param_2 != 0) {\n          bVar11 = CARRY4(param_3,param_2);\n          param_2 = param_3 + param_2;\n          uVar1 = uVar5 - 1;\n          if ((bVar11 == false) && (param_2 <= uVar7 && uVar7 - param_2 != 0)) {\n            uVar1 = uVar5 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar7;\n        puVar3 = (uint *)(uVar1 | uVar6 << 0x10);\n      }\n      uVar7 = param_2 / uVar10;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar10 * uVar7) * 0x10000;\n      uVar1 = uVar8 * uVar7;\n      uVar6 = uVar7;\n      if (uVar5 <= uVar1 && uVar1 - uVar5 != 0) {\n        bVar11 = CARRY4(param_3,uVar5);\n        uVar5 = param_3 + uVar5;\n        uVar6 = uVar7 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar1 && uVar1 - uVar5 != 0)) {\n          uVar6 = uVar7 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar7 = (uVar5 - uVar1) / uVar10;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar1) - uVar10 * uVar7) * 0x10000;\n      uVar8 = uVar8 * uVar7;\n      uVar1 = uVar7;\n      if (uVar5 <= uVar8 && uVar8 - uVar5 != 0) {\n        bVar11 = CARRY4(param_3,uVar5);\n        uVar5 = param_3 + uVar5;\n        uVar1 = uVar7 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar8 && uVar8 - uVar5 != 0)) {\n          uVar1 = uVar7 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar5 = uVar5 - uVar8;\n      puVar2 = (uint *)(uVar1 | uVar6 << 0x10);\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = uVar5 >> (uVar4 & 0xff);\n      param_5[1] = 0;\n    }\n  }\n  else if (param_2 < param_4) {\n    puVar2 = param_5;\n    puVar3 = param_5;\n    if (param_5 != (uint *)0x0) {\n      *param_5 = param_1;\n      param_5[1] = param_2;\n      return 0;\n    }\n  }\n  else {\n    puVar3 = (uint *)count_leading_zeroes(param_4);\n    if (puVar3 != (uint *)0x0) {\n      uVar8 = 0x20 - (int)puVar3;\n      uVar5 = param_3 >> (uVar8 & 0xff) | param_4 << ((uint)puVar3 & 0xff);\n      uVar10 = uVar5 >> 0x10;\n      uVar4 = param_2 >> (uVar8 & 0xff);\n      uVar6 = param_1 >> (uVar8 & 0xff) | param_2 << ((uint)puVar3 & 0xff);\n      uVar7 = uVar4 / uVar10;\n      uVar1 = uVar6 >> 0x10 | (uVar4 - uVar10 * uVar7) * 0x10000;\n      uVar9 = uVar7 * (uVar5 & 0xffff);\n      param_3 = param_3 << ((uint)puVar3 & 0xff);\n      param_1 = param_1 << ((uint)puVar3 & 0xff);\n      uVar4 = uVar7;\n      if (uVar1 <= uVar9 && uVar9 - uVar1 != 0) {\n        bVar11 = CARRY4(uVar5,uVar1);\n        uVar1 = uVar5 + uVar1;\n        uVar4 = uVar7 - 1;\n        if ((bVar11 == false) && (uVar1 <= uVar9 && uVar9 - uVar1 != 0)) {\n          uVar4 = uVar7 - 2;\n          uVar1 = uVar1 + uVar5;\n        }\n      }\n      uVar7 = (uVar1 - uVar9) / uVar10;\n      uVar1 = uVar6 & 0xffff | ((uVar1 - uVar9) - uVar10 * uVar7) * 0x10000;\n      uVar9 = uVar7 * (uVar5 & 0xffff);\n      uVar6 = uVar7;\n      if (uVar1 <= uVar9 && uVar9 - uVar1 != 0) {\n        bVar11 = CARRY4(uVar5,uVar1);\n        uVar1 = uVar5 + uVar1;\n        uVar6 = uVar7 - 1;\n        if ((bVar11 == false) && (uVar1 <= uVar9 && uVar9 - uVar1 != 0)) {\n          uVar6 = uVar7 - 2;\n          uVar1 = uVar1 + uVar5;\n        }\n      }\n      uVar6 = uVar6 | uVar4 << 0x10;\n      uVar12 = (ulonglong)uVar6 * (ulonglong)param_3;\n      if (CONCAT44(uVar1 - uVar9,param_1) < uVar12) {\n        uVar12 = uVar12 - CONCAT44(uVar5,param_3);\n        uVar6 = uVar6 - 1;\n      }\n      if (param_5 != (uint *)0x0) {\n        uVar4 = ((uVar1 - uVar9) - (int)(uVar12 >> 0x20)) - (uint)(param_1 < (uint)uVar12);\n        *param_5 = uVar4 << (uVar8 & 0xff) | param_1 - (uint)uVar12 >> ((uint)puVar3 & 0xff);\n        param_5[1] = uVar4 >> ((uint)puVar3 & 0xff);\n      }\n      return (ulonglong)uVar6;\n    }\n    if ((param_4 < param_2) || (puVar2 = puVar3, param_3 <= param_1)) {\n      bVar11 = param_1 < param_3;\n      param_1 = param_1 - param_3;\n      param_2 = (param_2 - param_4) - (uint)bVar11;\n      puVar2 = (uint *)0x1;\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = param_1;\n      param_5[1] = param_2;\n    }\n  }\n  return CONCAT44(puVar3,puVar2);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00006a14",
            "calling": [
                "FUN_00006974"
            ],
            "imported": false,
            "current_name": "FUNC_00006a14"
        },
        "FUN_000023d0": {
            "renaming": {
                "FUN_000023d0": "check_if_ptr_dat_is_null_000023d0",
                "param_1": "input_param",
                "uVar1": "return_value",
                "PTR_DAT_000023fc": "ptr_dat",
                "FUN_000023c8": "some_other_function"
            },
            "code": "int check_if_ptr_dat_is_null_000023d0(int input_param)\n{\n    int* PTR_DAT_000023fc = (int*) PTR_DAT_000023fc;\n    int is_PTR_DAT_000023fc_null = (*PTR_DAT_000023fc == 0);\n    if (is_PTR_DAT_000023fc_null) {\n        return FUN_000023c8(1, input_param, 0);\n    }\n    else {\n        return 0;\n    }\n}",
            "called": [
                "FUN_000023c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000023d0",
            "calling": [
                "FUN_000023a4"
            ],
            "imported": false,
            "current_name": "check_if_ptr_dat_is_null_000023d0"
        },
        "FUN_00000a30": {
            "renaming": {
                "FUN_00000a30": "get_stack_pointer_00000a30",
                "in_r3": "current_frame_pointer",
                "auStack_20": "stack_pointer"
            },
            "code": "char* get_stack_pointer_00000a30(void)\n{\n  int current_frame_pointer;\n  char* stack_pointer;\n  current_frame_pointer = get_register_value(52);\n  stack_pointer = (char*)(&stack_pointer) + 0x4;\n  return stack_pointer - (PTR_DAT_00000a60 - *(int *)(current_frame_pointer + 0x4c));\n}",
            "called": [
                "FUN_00000f04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000a30",
            "calling": [],
            "imported": false,
            "current_name": "get_stack_pointer_00000a30"
        },
        "FUN_000034c0": {
            "renaming": {
                "FUN_000034c0": "initialize_rtc_commands_000034c0",
                "PTR_s_usage__rtc__command___arguments__00003500": "usage_rtc_command_arguments",
                "PTR_s_commands__00003504": "commands",
                "PTR_s__poweron_power_the_interface_on_00003508": "power_on_interface",
                "PTR_s__poweroff_power_the_interface_of_0000350c": "power_off_interface",
                "PTR_s__clearalarm_deactivate_the_curre_00003510": "deactivate_current_alarm",
                "PTR_s__getalarm_print_the_currently_al_00003514": "print_current_alarm",
                "PTR_s__setalarm_YYYY_MM_DD_HH_MM_SS_se_00003518": "set_alarm",
                "PTR_s__gettime_print_the_current_time_0000351c": "print_current_time",
                "PTR_s__settime_YYYY_MM_DD_HH_MM_SS_set_00003520": "set_time"
            },
            "code": "int initialize_rtc_commands_000034c0(void)\n{\n  execute_rtc_command(PTR_s_usage__rtc__command___arguments__00003500);\n  execute_rtc_command(PTR_s_commands__00003504);\n  execute_rtc_command(PTR_s__poweron_power_the_interface_on_00003508);\n  execute_rtc_command(PTR_s__poweroff_power_the_interface_of_0000350c);\n  execute_rtc_command(PTR_s__clearalarm_deactivate_the_curre_00003510);\n  execute_rtc_command(PTR_s__getalarm_print_the_currently_al_00003514);\n  execute_rtc_command(PTR_s__setalarm_YYYY_MM_DD_HH_MM_SS_se_00003518);\n  execute_rtc_command(PTR_s__gettime_print_the_current_time_0000351c);\n  execute_rtc_command(PTR_s__settime_YYYY_MM_DD_HH_MM_SS_set_00003520);\n  return 0;\n}",
            "called": [
                "FUN_00004db8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000034c0",
            "calling": [
                "FUN_00003524"
            ],
            "imported": false,
            "current_name": "initialize_rtc_commands_000034c0"
        },
        "FUN_000050e8": {
            "renaming": {
                "FUN_000050e8": "get_data_pointer_000050e8",
                "PTR_DAT_000050f0": "data_pointer"
            },
            "code": "char* get_data_pointer_000050e8(void)\n{\n  return PTR_DAT_000050f0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000050e8",
            "calling": [
                "FUN_000047e4"
            ],
            "imported": false,
            "current_name": "get_data_pointer_000050e8"
        },
        "FUN_000042a4": {
            "renaming": {
                "FUN_000042a4": "initialize_device_000042a4",
                "param_1": "device_id",
                "uVar1": "result",
                "iVar2": "first_device_id",
                "bVar3": "is_device_initialized"
            },
            "code": "void initialize_device_000042a4(int device_id)\n{\n  bool is_device_initialized = *(int *)(device_id + 0x18) != 0;\n  if (!is_device_initialized) {\n    *(int *)(device_id + 0x48) = 0;\n    *(int *)(device_id + 0x4c) = 0;\n    *(int *)(device_id + 0x50) = 0;\n    int first_device_id = *(int *)FIRST_DEVICE_ID_PTR;\n    *(undefined **)(device_id + 0x28) = FIRST_DEVICE_PTR;\n    if (first_device_id == device_id) {\n      first_device_id = 1;\n      *(int *)(device_id + 0x18) = first_device_id;\n    }\n    int result = initialize_device_000042a4_component(device_id);\n    *(int *)(device_id + 4) = result;\n    result = initialize_device_000042a4_component(device_id);\n    *(int *)(device_id + 8) = result;\n    result = initialize_device_000042a4_component(device_id);\n    *(int *)(device_id + 0xc) = result;\n    initialize_device_000042a4_component(*(int *)(device_id + 4), 4, 0);\n    initialize_device_000042a4_component(*(int *)(device_id + 8), 9, 1);\n    initialize_device_000042a4_component(*(int *)(device_id + 0xc), 0x12, 2);\n    *(int *)(device_id + 0x18) = 1;\n  }\n  do_nothing(DAT_000042a0);\n  return;\n}",
            "called": [
                "FUN_00004314",
                "FUN_000045ec",
                "FUN_0000428c",
                "FUN_000041f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000042a4",
            "calling": [
                "FUN_00004158",
                "FUN_00004418",
                "FUN_00004314",
                "FUN_00004db8",
                "FUN_000057f8",
                "FUN_00006768",
                "FUN_00004c84",
                "FUN_000054a8",
                "FUN_00005404",
                "FUN_00005e10",
                "FUN_00004cb4"
            ],
            "imported": false,
            "current_name": "initialize_device_000042a4"
        },
        "FUN_00000514": {
            "renaming": {
                "FUN_00000514": "set_param_to_19_00000514",
                "*param_1": "*param_array",
                "0x13": "19",
                "0xffffffff": "-1"
            },
            "code": "int set_param_to_19_00000514(int *param_array)\n{\n  *param_array = 19;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000514",
            "calling": [
                "FUN_000056b8"
            ],
            "imported": false,
            "current_name": "set_param_to_19_00000514"
        },
        "FUN_00002e9c": {
            "renaming": {
                "FUN_00002e9c": "call_function_and_return_00002e9c",
                "FUN_00003688": "call_another_function"
            },
            "code": "void call_function_and_return_00002e9c(void)\n{\n  call_another_function();\n  return;\n}",
            "called": [
                "FUN_00003688"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002e9c",
            "calling": [],
            "imported": false,
            "current_name": "call_function_and_return_00002e9c"
        },
        "FUN_00001960": {
            "renaming": {
                "FUN_00001960": "initialize_device_00001960",
                "FUN_00001748": "set_device_mode",
                "FUN_00001710": "set_device_configuration",
                "DAT_000019b4": "DAT_device_config",
                "DAT_000019b8": "DAT_device_status",
                "PTR_DAT_000019bc": "PTR_device_mode"
            },
            "code": "void initialize_device_00001960(void)\n{\n  set_device_mode(0xa0);\n  set_device_configuration(DAT_000019b4, 1);\n  *DAT_000019b8 = (*DAT_000019b8 & 0x3b) | 0x44;\n  do {\n  } while ((DAT_000019b8[6] & 0xc) != 4);\n  do {\n  } while ((DAT_000019b8[6] & 0x10) == 0);\n  *PTR_DAT_000019bc = 2;\n  return;\n}",
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001960",
            "calling": [
                "FUN_00001b10"
            ],
            "imported": false,
            "current_name": "initialize_device_00001960"
        },
        "FUN_00000990": {
            "renaming": {
                "FUN_00000990": "do_nothing_00000990"
            },
            "code": "\nvoid do_nothing_00000990(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000990",
            "calling": [
                "FUN_0000099c"
            ],
            "imported": false,
            "current_name": "do_nothing_00000990"
        },
        "FUN_00001a3c": {
            "renaming": {
                "FUN_00001a3c": "set_data_and_value_00001a3c",
                "FUN_000016ec": "set_data",
                "FUN_00001734": "set_flag",
                "DAT_00001a58": "DAT_value",
                "PTR_DAT_00001a5c": "PTR_result"
            },
            "code": "void set_data_and_value_00001a3c(void)\n{\n  set_data(DAT_00001a58, 1);\n  set_flag();\n  *PTR_DAT_00001a5c = 5;\n  return;\n}",
            "called": [
                "FUN_00001734",
                "FUN_000016ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001a3c",
            "calling": [
                "FUN_00001b10"
            ],
            "imported": false,
            "current_name": "set_data_and_value_00001a3c"
        },
        "FUN_000045ee": {
            "renaming": {
                "FUN_000045ee": "reverse_copy_within_bounds_000045ee",
                "param_1": "source",
                "param_2": "destination",
                "param_3": "size",
                "puVar1": "source_ptr",
                "puVar2": "destination_end"
            },
            "code": "void reverse_copy_within_bounds_000045ee(undefined *source, undefined *destination, int size) {\n  undefined *source_end = source + size;\n  undefined *destination_end = destination + size;\n  if ((destination < source) && (source < destination_end)) {\n    undefined *source_ptr = source + size;\n    while (source_ptr != source) {\n      destination_end--;\n      source_ptr--;\n      *source_ptr = *destination_end;\n    }\n  }\n  else {\n    source--;\n    for (; destination != destination_end; destination++) {\n      source++;\n      *source = *destination;\n    }\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000045ee",
            "calling": [
                "FUN_00003ff4"
            ],
            "imported": false,
            "current_name": "reverse_copy_within_bounds_000045ee"
        },
        "FUN_00005404": {
            "renaming": {
                "FUN_00005404": "decode_message_00005404",
                "param_1": "message_address",
                "param_2": "message_length",
                "param_3": "message_buffer",
                "param_4": "unknown_param",
                "iVar1": "message_offset",
                "uVar2": "message_value",
                "puVar3": "message_byte"
            },
            "code": "uint decode_message_00005404(int message_address, uint message_length, int *message_buffer, undefined4 unknown_param)\n{\n  int message_offset;\n  uint message_value;\n  undefined *message_byte;\n  \n  if ((message_address != 0) && (*(int *)(message_address + 0x18) == 0)) {\n    initialize_message_decoder();\n  }\n  if (message_buffer == (int *)PTR_DAT_0000549c) {\n    message_buffer = *(int **)(message_address + 4);\n  }\n  else if (message_buffer == (int *)PTR_DAT_000054a0) {\n    message_buffer = *(int **)(message_address + 8);\n  }\n  else if (message_buffer == (int *)PTR_DAT_000054a4) {\n    message_buffer = *(int **)(message_address + 0xc);\n  }\n  message_buffer[2] = message_buffer[6];\n  message_value = (uint)*(ushort *)(message_buffer + 3);\n  message_offset = message_value << 0x1c;\n  if (((message_offset < 0) && (message_value = message_buffer[4], message_value != 0)) ||\n     (message_offset = decode_message_00005404_helper(message_address, message_buffer, message_offset, message_value, unknown_param), message_offset == 0)) {\n    message_offset = *message_buffer - message_buffer[4];\n    message_length = message_length & 0xff;\n    if ((message_offset < message_buffer[5]) || (message_offset = validate_message(message_address, message_buffer), message_offset == 0)) {\n      message_buffer[2] = message_buffer[2] + -1;\n      message_byte = (undefined *)*message_buffer;\n      *message_buffer = (int)(message_byte + 1);\n      *message_byte = (char)message_length;\n      if (message_buffer[5] != message_offset + 1) {\n        if (-1 < (int)((uint)*(ushort *)(message_buffer + 3) << 0x1f)) {\n          return message_length;\n        }\n        if (message_length != 10) {\n          return message_length;\n        }\n      }\n      message_offset = validate_message(message_address, message_buffer);\n      if (message_offset == 0) {\n        return message_length;\n      }\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [
                "FUN_00004158",
                "FUN_000054a8",
                "FUN_000042a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005404",
            "calling": [
                "FUN_00004db8",
                "FUN_000057a8",
                "FUN_00004cb4"
            ],
            "imported": false,
            "current_name": "decode_message_00005404"
        },
        "FUN_00006974": {
            "renaming": {
                "FUN_00006974": "convert_signed_to_unsigned_00006974",
                "param_1": "signed_high",
                "param_2": "signed_low",
                "param_3": "is_negative_high",
                "param_4": "is_negative_low",
                "iVar1": "temp_unsigned_low",
                "uVar2": "result",
                "local_8": "local_array"
            },
            "code": "undefined8 convert_signed_to_unsigned_00006974(int signed_high, int signed_low, int is_negative_high, int is_negative_low)\n{\n  int unsigned_low = 0;\n  int unsigned_high = 0;\n  if (is_negative_high == 0 && is_negative_low == 0) {\n    unsigned_high = signed_high;\n    unsigned_low = signed_low;\n  }\n  else if (signed_high < 0) {\n    int temp_unsigned_low = -signed_low - (int)(signed_high != 0);\n    if (is_negative_low < 0) {\n      unsigned_long result = FUNC_00006a14(-signed_high,temp_unsigned_low,-is_negative_high,-is_negative_low - (int)(is_negative_high != 0),local_8);\n      unsigned_high = -(int)((unsigned_long long)result >> 32) - (int)(result != 0);\n      unsigned_low = -(int)result;\n    }\n    else {\n      unsigned_long result = FUNC_00006a14(-signed_high,temp_unsigned_low,is_negative_high,is_negative_low,local_8);\n      unsigned_high = -(int)((unsigned_long long)result >> 32) - (int)(result != 0);\n      unsigned_low = -(int)result;\n    }\n  }\n  else if (is_negative_low < 0) {\n    unsigned_long result = FUNC_00006a14(signed_high,signed_low,-is_negative_high,-is_negative_low - (int)(is_negative_high != 0),local_8);\n    unsigned_high = -(int)((unsigned_long long)result >> 32) - (int)(result != 0);\n    unsigned_low = -(int)result;\n  }\n  else {\n    unsigned_long result = FUNC_00006a14();\n    unsigned_high = -(int)((unsigned_long long)result >> 32) - (int)(result != 0);\n    unsigned_low = -(int)result;\n  }\n  return CONCAT44(unsigned_high,unsigned_low);\n}\n",
            "called": [
                "FUN_00006a14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00006974",
            "calling": [
                "FUN_0000443c"
            ],
            "imported": false,
            "current_name": "convert_signed_to_unsigned_00006974"
        },
        "FUN_00004314": {
            "renaming": {
                "FUN_00004314": "find_matching_data_00004314",
                "param_1": "error_code",
                "piVar1": "matching_data_ptr",
                "piVar2": "current_data_ptr",
                "iVar3": "data_structure_ptr",
                "ppiVar4": "next_data_structure_ptr_ptr",
                "FUN_00004274": "initialize_data_structure",
                "PTR_DAT_00004398": "DATA_STRUCTURE_PTR",
                "FUN_000042a4": "allocate_data_structure",
                "DAT_0000439c": "MATCHING_DATA_VALUE",
                "do_nothing_000045e4": "do_nothing",
                "FUN_00004280": "finalize_data_structure",
                "FUN_00004622": "initialize_data"
            },
            "code": "int* find_matching_data_00004314(undefined4 *error_code) {\n  int *matching_data_ptr;\n  int *current_data_ptr;\n  int data_structure_ptr;\n  int **next_data_structure_ptr_ptr;\n  initialize_data_structure();\n  data_structure_ptr = *(int*)PTR_DAT_00004398;\n  if (*(int*)(data_structure_ptr + 0x18) == 0) {\n    allocate_data_structure(data_structure_ptr);\n  }\n  next_data_structure_ptr_ptr = (int**)(data_structure_ptr + 0x48);\n  do {\n    matching_data_ptr = next_data_structure_ptr_ptr[1];\n    current_data_ptr = next_data_structure_ptr_ptr[2];\n    while (matching_data_ptr = (int*)((int)matching_data_ptr + -1), -1 < (int)matching_data_ptr) {\n      if (*(short*)(current_data_ptr + 3) == 0) {\n        current_data_ptr[3] = DAT_0000439c;\n        current_data_ptr[0x19] = 0;\n        do_nothing(current_data_ptr + 0x16);\n        finalize_data_structure();\n        current_data_ptr[1] = 0;\n        current_data_ptr[2] = 0;\n        current_data_ptr[4] = 0;\n        current_data_ptr[5] = 0;\n        *current_data_ptr = 0;\n        current_data_ptr[6] = 0;\n        initialize_data(current_data_ptr + 0x17, 0, 8);\n        current_data_ptr[0xd] = 0;\n        current_data_ptr[0xe] = 0;\n        current_data_ptr[0x12] = 0;\n        current_data_ptr[0x13] = 0;\n        return current_data_ptr;\n      }\n      current_data_ptr = current_data_ptr + 0x1a;\n    }\n    if (*next_data_structure_ptr_ptr == (int*)0x0) {\n      matching_data_ptr = (int*)allocate_data(error_code, 4);\n      *next_data_structure_ptr_ptr = matching_data_ptr;\n      if (matching_data_ptr == (int*)0x0) {\n        finalize_data_structure();\n        *error_code = 0xc;\n        return (int*)0x0;\n      }\n    }\n    next_data_structure_ptr_ptr = (int**)*next_data_structure_ptr_ptr;\n  } while(true);\n}",
            "called": [
                "FUN_00004274",
                "FUN_00004280",
                "FUN_000045e4",
                "FUN_00004248",
                "FUN_00004622",
                "FUN_000042a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004314",
            "calling": [
                "FUN_000042a4"
            ],
            "imported": false,
            "current_name": "find_matching_data_00004314"
        },
        "FUN_00004dc8": {
            "renaming": {
                "FUN_00004dc8": "update_value_at_offset_00004dc8",
                "param_1": "data",
                "param_2": "offset",
                "iVar1": "value",
                "uVar2": "updated_value",
                "bVar3": "is_positive"
            },
            "code": "void update_value_at_offset_00004dc8(void* data, int offset)\n{\n    int value = get_value_at_offset(data, *(short*)(offset + 0xE));\n    bool is_positive = value >= 0;\n    uint updated_value;\n    if (is_positive) {\n        updated_value = *(int*)(offset + 0x54) + value;\n    }\n    else {\n        updated_value = *(ushort*)(offset + 0xC) & 0xFFFFEFFF;\n    }\n    if (is_positive) {\n        *(uint*)(offset + 0x54) = updated_value;\n    }\n    else {\n        *(short*)(offset + 0xC) = (short)updated_value;\n    }\n}",
            "called": [
                "FUN_00000490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004dc8",
            "calling": [],
            "imported": false,
            "current_name": "update_value_at_offset_00004dc8"
        },
        "FUN_00005fd8": {
            "renaming": {
                "FUN_00005fd8": "process_data_00005fd8",
                "param_1": "data_size",
                "param_2": "param_1",
                "param_3": "param_2",
                "*DAT_00005fe8": "data_ptr",
                "FUN_00005edc": "call_data_processor"
            },
            "code": "void process_data_00005fd8(int* *DAT_00005fe8, int param_1, int param_2, int param_3)\n{\n  call_data_processor(**DAT_00005fe8, param_1, param_2, param_3);\n  return;\n}",
            "called": [
                "FUN_00005edc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005fd8",
            "calling": [
                "FUN_00005100"
            ],
            "imported": false,
            "current_name": "process_data_00005fd8"
        },
        "FUN_00005e10": {
            "renaming": {
                "FUN_00005e10": "extract_byte_from_array_00005e10",
                "param_1": "array_address",
                "param_2": "array_pointer",
                "iVar1": "is_extraction_successful",
                "uVar2": "extracted_byte",
                "pbVar3": "byte_pointer"
            },
            "code": "uint extract_byte_from_array_00005e10(int array_address, byte **array_pointer)\n{\n  int is_array_initialized = *(int *)(array_address + 0x18);\n  if ((array_address != 0) && (is_array_initialized == 0)) {\n    initialize_array();\n  }\n  if (array_pointer == PTR_DAT_00005e5c) {\n    array_pointer = *(byte ***)(array_address + 4);\n  }\n  else if (array_pointer == PTR_DAT_00005e60) {\n    array_pointer = *(byte ***)(array_address + 8);\n  }\n  else if (array_pointer == PTR_DAT_00005e64) {\n    array_pointer = *(byte ***)(array_address + 0xc);\n  }\n  int is_extraction_successful = extract_byte(array_address, array_pointer);\n  if (is_extraction_successful == 0) {\n    array_pointer[1] = array_pointer[1] - 1;\n    byte *byte_pointer = *array_pointer;\n    *array_pointer = byte_pointer + 1;\n    uint extracted_byte = (uint)*byte_pointer;\n    return extracted_byte;\n  }\n  else {\n    return 0xffffffff;\n  }\n}",
            "called": [
                "FUN_00006768",
                "FUN_000042a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005e10",
            "calling": [
                "FUN_00004418"
            ],
            "imported": false,
            "current_name": "extract_byte_from_array_00005e10"
        },
        "FUN_000033f4": {
            "renaming": {
                "FUN_000033f4": "set_alarm_000033f4",
                "param_1": "alarm_time",
                "iVar1": "status",
                "auStack_2c": "alarm_buffer",
                "FUN_0000328c": "get_alarm_buffer",
                "FUN_00002654": "set_rtc_alarm",
                "PTR_FUN_000031e0_1_0000343c": "ALARM_CONFIG",
                "FUN_00004db8": "print_error",
                "PTR_s_rtc__error_setting_alarm_00003440": "ERROR_SETTING_ALARM_MSG",
                "uVar2": "return_value"
            },
            "code": "int set_alarm_000033f4(int alarm_time)\n{\n  int status;\n  char alarm_buffer[36];\n  status = get_alarm_buffer(alarm_time, alarm_buffer);\n  if (status == 0) {\n    status = set_rtc_alarm(alarm_buffer, PTR_FUN_000031e0_1_0000343c, 0);\n    if (status == -1) {\n      print_error(PTR_s_rtc__error_setting_alarm_00003440);\n      return 1;\n    }\n    else {\n      return 0;\n    }\n  }\n  else {\n    return 1;\n  }\n}",
            "called": [
                "FUN_0000328c",
                "FUN_00004db8",
                "FUN_00002654"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000033f4",
            "calling": [
                "FUN_00003524"
            ],
            "imported": false,
            "current_name": "set_alarm_000033f4"
        },
        "FUN_0000443c": {
            "renaming": {
                "FUN_0000443c": "calculate_date_components_0000443c",
                "*param_1": "*date",
                "*param_2": "*components",
                "iVar1": "days_since_1900",
                "uVar2": "day_of_week",
                "uVar3": "days_since_1900_adjusted",
                "uVar4": "num_leap_years",
                "uVar5": "num_years",
                "uVar6": "unused",
                "uVar7": "unused",
                "uVar8": "days_since_jan_1",
                "bVar9": "is_negative"
            },
            "code": "uint * calculate_date_components_0000443c(undefined4 *date, uint *components)\n{\n  int days_since_1900 = FUN_00006974(*date, date[1], DAT_0000458c, 0);\n  bool is_negative = (int)DAT_0000458c < 0;\n  uint days_since_1900_adjusted = is_negative ? DAT_0000458c + 0x15180 : DAT_0000458c;\n  uint day_of_week = is_negative ? days_since_1900 + 0xafa6b : days_since_1900 + 0xafa6c;\n  components[2] = days_since_1900_adjusted / 0xe10;\n  components[1] = (days_since_1900_adjusted % 0xe10) / 0x3c;\n  *components = (days_since_1900_adjusted % 0xe10) % 0x3c;\n  components[6] = (day_of_week + 3) % 7;\n  uint days_since_1800 = day_of_week < 0 ? day_of_week - 0x23ab0 : day_of_week;\n  uint days_since_0000 = DAT_00004594 * (days_since_1800 / DAT_00004590) + day_of_week;\n  uint num_leap_years = ((days_since_0000 / 0x8eac + days_since_0000) - days_since_0000 / 0x5b4) - days_since_0000 / DAT_00004598;\n  uint num_years = num_leap_years / 0x16d;\n  days_since_0000 = (num_years / 100 - num_leap_years / 0x5b4) + days_since_0000 + num_years * -0x16d;\n  uint days_since_jan_1 = days_since_0000 * 5 + 2;\n  uint num_centuries = days_since_jan_1 / 0x99;\n  int leap_year_adjustment = num_centuries < 2 ? 1 : -10;\n  uint year = (days_since_1800 / DAT_00004590) * 400 + num_years;\n  if (num_centuries < 2 && days_since_jan_1 < 0x132)\n  {\n    uint days_since_feb_29 = ((num_years & 3) == 0) && (num_years != (num_years / 100) * 100) ? 1 : count_leading_zeroes(num_years % 400) >> 5;\n    components[7] = days_since_jan_1 + 0x3b + days_since_feb_29;\n  }\n  else\n  {\n    components[7] = days_since_jan_1 - 0x132;\n  }\n  components[3] = (days_since_jan_1 + 1) - (num_centuries * 0x99 + 2) / 5;\n  components[4] = num_centuries + leap_year_adjustment;\n  components[5] = year - 0x76c;\n  components[8] = 0;\n  return components;\n}",
            "called": [
                "FUN_00006974"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000443c",
            "calling": [
                "FUN_00002624",
                "FUN_00002690"
            ],
            "imported": false,
            "current_name": "calculate_date_components_0000443c"
        },
        "FUN_000027b0": {
            "renaming": {
                "FUN_000027b0": "update_data_register_000027b0",
                "puVar1": "data_register",
                "register_address": "register_address",
                "DAT_00002814": "data_register",
                "DAT_00002818": "register_address"
            },
            "code": "void update_data_register_000027b0(void)\n{\n    uint32_t *DAT_00002814 = DAT_00002814;\n    uint32_t *DAT_00002818 = DAT_00002818 + 0x103c;\n    *DAT_00002818 |= 0x20000000;\n    DAT_00002814[4] = 1;\n    DAT_00002814[4] = 0;\n    if ((DAT_00002814[5] & 1) != 0) {\n        *DAT_00002814 = 0;\n    }\n    DAT_00002814[4] = 0x104;\n    DAT_00002814[2] = 0xffffff42;\n    DAT_00002814[7] = 0;\n    update_data();\n    return;\n}",
            "called": [
                "FUN_0000294c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000027b0",
            "calling": [
                "FUN_000025f4"
            ],
            "imported": false,
            "current_name": "update_data_register_000027b0"
        },
        "FUN_00005ebc": {
            "renaming": {
                "FUN_00005ebc": "copy_string_00005ebc",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "current_char"
            },
            "code": "void copy_string_00005ebc(char *destination, char *source)\n{\n  char current_char;\n  do {\n    current_char = *source;\n    *destination = current_char;\n    source++;\n    destination++;\n  } while (current_char != '\\0');\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005ebc",
            "calling": [
                "FUN_00005100"
            ],
            "imported": false,
            "current_name": "copy_string_00005ebc"
        },
        "FUN_00006192": {
            "renaming": {
                "FUN_00006192": "clear_flag_00006192",
                "param_1": "flag",
                "param_2": "data",
                "PTR_": "ptr_",
                "DAT_": "data_"
            },
            "code": "unsigned int clear_flag_00006192(unsigned int flag, unsigned int *data)\n{\n    unsigned int *PTR_d = (unsigned int *)data[0xd];\n    if (PTR_d != NULL)\n    {\n        if (PTR_d != (data + 0x11))\n        {\n            reset();\n        }\n        data[1] = data[0x10];\n        data[0xd] = 0;\n        if (data[0x10] != 0)\n        {\n            *data = data[0xf];\n            return 0;\n        }\n    }\n    *data = data[4];\n    data[1] = 0;\n    *(unsigned short *)(data + 3) |= flag;\n    return 0xffffffff;\n}",
            "called": [
                "FUN_00004b34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00006192",
            "calling": [
                "FUN_000061cc"
            ],
            "imported": false,
            "current_name": "clear_flag_00006192"
        },
        "FUN_00001734": {
            "renaming": {
                "FUN_00001734": "initialize_data_00001734",
                "FUN_00001710": "initialize_buffer",
                "DAT_00001744": "PTR_buffer_data"
            },
            "code": "void initialize_data_00001734(void)\n{\n    initialize_buffer(DAT_00001744, 6);\n    return;\n}",
            "called": [
                "FUN_00001710"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001734",
            "calling": [
                "FUN_00001a18",
                "FUN_000019c0",
                "FUN_00001a3c"
            ],
            "imported": false,
            "current_name": "initialize_data_00001734"
        },
        "FUN_00000e14": {
            "renaming": {
                "FUN_00000e14": "calculate_result_from_params_00000e14",
                "param_1": "param_1",
                "param_2": "param_2",
                "uVar1": "result",
                "DAT_00000e34": "DAT_00000e34"
            },
            "code": "int calculate_result_from_params_00000e14(int param_1, int param_2)\n{\n  int result = function_with_params(DAT_00000e34,param_1,param_2);\n  return result;\n}",
            "called": [
                "FUN_000012e2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000e14",
            "calling": [
                "FUN_00000490"
            ],
            "imported": false,
            "current_name": "calculate_result_from_params_00000e14"
        },
        "FUN_0000281c": {
            "renaming": {
                "FUN_0000281c": "find_first_different_value_in_array_0000281c",
                "local_10": "index",
                "local_c": "value"
            },
            "code": "int find_first_different_value_in_array_0000281c(void)\n{\n  int index = 0;\n  int value = 0;\n  while ((index < 3 && (value = *DAT_00002858, value != *DAT_00002858))) {\n    index++;\n  }\n  return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000281c",
            "calling": [
                "FUN_00002624"
            ],
            "imported": false,
            "current_name": "find_first_different_value_in_array_0000281c"
        },
        "FUN_00002270": {
            "renaming": {
                "FUN_00002270": "check_if_equal_00002270",
                "param_1": "param",
                "uVar1": "value",
                "iVar2": "value_at_c",
                "bVar3": "is_equal"
            },
            "code": "int check_if_equal_00002270(int param){\n    int value_at_c = *(int *)(param + 0xc);\n    bool is_equal = *(int *)(param + 8) == value_at_c;\n    if (is_equal) {\n        value_at_c = 1;\n    }\n    return value_at_c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002270",
            "calling": [
                "FUN_0000231c"
            ],
            "imported": false,
            "current_name": "check_if_equal_00002270"
        },
        "FUN_00005780": {
            "renaming": {
                "FUN_00005780": "process_data_00005780",
                "param_1": "data",
                "*DAT_0000578c": "data_pointer",
                "FUN_00004b34": "call_function"
            },
            "code": "void process_data_00005780(undefined4 data){\n    call_function(**DAT_0000578c, data);\n    return;\n}",
            "called": [
                "FUN_00004b34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005780",
            "calling": [
                "FUN_00005100"
            ],
            "imported": false,
            "current_name": "process_data_00005780"
        },
        "FUN_000020cc": {
            "renaming": {
                "FUN_000020cc": "initialize_data_000020cc",
                "FUN_00002028": "initialize_buffer",
                "DAT_000020dc": "data_buffer"
            },
            "code": "void initialize_data_000020cc(void)\n{\n  initialize_buffer(DAT_000020dc, 1);\n  return;\n}",
            "called": [
                "FUN_00002028"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000020cc",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_000020cc"
        },
        "FUN_00002396": {
            "renaming": {
                "FUN_00002396": "call_function_at_address_00002396",
                "FUN_000025f4": "call_function",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void call_function_at_address_00002396(void)\n{\n  call_function(FUNCTION_ADDRESS);\n  return;\n}",
            "called": [
                "FUN_000025f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002396",
            "calling": [
                "FUN_00001274"
            ],
            "imported": false,
            "current_name": "call_function_at_address_00002396"
        },
        "FUN_00004cb4": {
            "renaming": {
                "FUN_00004cb4": "write_byte_to_buffer_00004cb4",
                "param_1": "byte_to_write",
                "puVar1": "buffer",
                "puVar3": "buffer_ptr",
                "unaff_r4": "buffer_start",
                "iVar4": "buffer_pointer",
                "unaff_r5": "buffer_end"
            },
            "code": "uint write_byte_to_buffer_00004cb4(uint byte_to_write)\n{\n  int buffer_address = *buffer_pointer;\n  if ((buffer_address != 0) && (*(int *)(buffer_address + 0x18) == 0)) {\n    clear_buffer(buffer_address);\n  }\n  uint *buffer = *(uint **)(buffer_address + 8);\n  if ((buffer_address != 0) && (*(int *)(buffer_address + 0x18) == 0)) {\n    clear_buffer(buffer_address);\n  }\n  if (buffer == (uint *)buffer_start) {\n    buffer = *(uint **)(buffer_address + 4);\n  }\n  else if (buffer == (uint *)buffer_middle) {\n    buffer = *(uint **)(buffer_address + 8);\n  }\n  else if (buffer == (uint *)buffer_end) {\n    buffer = *(uint **)(buffer_address + 0xc);\n  }\n  if ((-1 < (int)(buffer[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x16))) {\n    do_nothing(buffer[0x16]);\n  }\n  uint buffer_size = buffer[2] - 1;\n  buffer[2] = buffer_size;\n  if (((int)buffer_size < 0) && (((int)buffer_size < (int)buffer[6] || (byte_to_write == 10))))\n  {\n    byte_to_write = write_buffer_to_file(buffer_address, byte_to_write, buffer, buffer_size, buffer_start, buffer_end);\n  }\n  else {\n    char *buffer_ptr = (char *)*buffer;\n    *buffer = buffer_ptr + 1;\n    *buffer_ptr = (char)byte_to_write;\n    byte_to_write = byte_to_write & 0xff;\n  }\n  if ((-1 < (int)(buffer[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x16))) {\n    do_nothing(buffer[0x16]);\n  }\n  return byte_to_write;\n}\n",
            "called": [
                "FUN_000045ec",
                "FUN_000045e8",
                "FUN_00005404",
                "FUN_000042a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004cb4",
            "calling": [
                "FUN_00002a00"
            ],
            "imported": false,
            "current_name": "write_byte_to_buffer_00004cb4"
        },
        "FUN_00003478": {
            "renaming": {
                "FUN_00003478": "set_rtc_time_00003478",
                "param_1": "time_to_set",
                "iVar1": "rtc_status",
                "uVar2": "success_flag",
                "auStack_2c": "rtc_time_data",
                "FUN_0000328c": "get_rtc_time_data",
                "FUN_00002600": "set_rtc_time_data"
            },
            "code": "undefined4 set_rtc_time_00003478(undefined4 time_to_set)\n{\n  int rtc_status;\n  undefined4 success_flag;\n  undefined rtc_time_data[36];\n  \n  rtc_status = get_rtc_time_data(time_to_set, rtc_time_data);\n  if (rtc_status == 0) {\n    rtc_status = set_rtc_time_00003478_data(rtc_time_data);\n    if (rtc_status == -1) {\n      print_error_message(PTR_s_rtc__error_setting_time_000034bc);\n      success_flag = 1;\n    }\n    else {\n      success_flag = 0;\n    }\n  }\n  else {\n    success_flag = 1;\n  }\n  return success_flag;\n}",
            "called": [
                "FUN_00002600",
                "FUN_0000328c",
                "FUN_00004db8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003478",
            "calling": [
                "FUN_00003524"
            ],
            "imported": false,
            "current_name": "set_rtc_time_00003478"
        },
        "FUN_00002028": {
            "renaming": {
                "FUN_00002028": "process_requests_00002028",
                "param_1": "request_list",
                "param_2": "flags",
                "iVar1": "request_handler_index",
                "uVar2": "request_flags",
                "local_c": "request_index",
                "flag_value": "flag_value"
            },
            "code": "void process_requests_00002028(int request_list, uint32_t flags) {\n    int request_index;\n    uint32_t flag_value;\n    uint32_t request_flags;\n    \n    request_flags = *(uint32_t *)(request_list + 0xa0);\n    for (request_index = 0; request_index < 0x20; request_index++) {\n        flag_value = 1 << (request_index & 0xff);\n        if (((request_flags & flag_value) != 0) && ((*(uint32_t *)(request_list + request_index * 4) & 0xf0000) != 0)) {\n            *(uint32_t *)(request_list + 0xa0) = flag_value;\n            int request_handler_index = get_request_handler_index(flags, request_index);\n            (**(code **)(PTR_DAT_000020b4 + request_handler_index * 0xc))(*(uint32_t *)(PTR_DAT_000020b4 + request_handler_index * 0xc + 4));\n        }\n    }\n    finalize_requests();\n    return;\n}",
            "called": [
                "FUN_00001e0c",
                "FUN_00001cf0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002028",
            "calling": [
                "FUN_000020b8",
                "FUN_00002108",
                "FUN_000020f4",
                "FUN_000020cc",
                "FUN_000020e0"
            ],
            "imported": false,
            "current_name": "process_requests_00002028"
        },
        "FUN_000016c8": {
            "renaming": {
                "FUN_000016c8": "set_value_of_first_pointer_to_one_000016c8",
                "param_1": "first_param",
                "param_2": "second_param",
                "puVar1": "ptr_to_first_int",
                "FUN_00001696": "get_pointer_to_first_int"
            },
            "code": "void set_value_of_first_pointer_to_one_000016c8(undefined4 first_param, undefined second_param)\n{\n  undefined4 *ptr_to_first_int;\n  ptr_to_first_int = (undefined4 *)get_pointer_to_first_int(first_param, second_param);\n  *ptr_to_first_int = 1;\n  return;\n}",
            "called": [
                "FUN_00001696"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000016c8",
            "calling": [
                "FUN_000017dc"
            ],
            "imported": false,
            "current_name": "set_value_of_first_pointer_to_one_000016c8"
        },
        "FUN_00001a60": {
            "renaming": {
                "FUN_00001a60": "process_data_00001a60",
                "DAT_00001ac4": "data_buffer",
                "DAT_00001ac8": "control_byte",
                "FUN_00001710": "send_data",
                "DAT_00001acc": "data_buffer",
                "PTR_DAT_00001ad0": "process_status"
            },
            "code": "void process_data_00001a60(void)\n{\n  send_data(DAT_00001ac4, 1);\n  *DAT_00001ac8 = *DAT_00001ac8 & 0x3f | 0x80;\n  do {\n  } while ((DAT_00001ac8[6] & 0xc) != 8);\n  process_data_00001a60(DAT_00001ac4, 6);\n  do {\n  } while ((DAT_00001ac8[6] & 0x20) == 0);\n  do {\n  } while ((DAT_00001ac8[6] & 0x40) == 0);\n  *PTR_DAT_00001ad0 = 6;\n  return;\n}",
            "called": [
                "FUN_00001710",
                "FUN_000016ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001a60",
            "calling": [
                "FUN_00001b10"
            ],
            "imported": false,
            "current_name": "process_data_00001a60"
        },
        "FUN_0000099c": {
            "renaming": {
                "FUN_0000099c": "initialize_elf_sections_0000099c",
                "local_14": "local_stack_pointer",
                "local_10": "relocation_section_pointer",
                "local_c": "bss_section_pointer",
                "DAT_00000a14": "relocation_section_start_pointer",
                "PTR_DAT_00000a18": "data_section_pointer",
                "PTR_Elf32_Rel_ARRAY_00000a20": "relocation_section_end_pointer",
                "PTR_DAT_00000a24": "stack_pointer",
                "PTR_DAT_00000a28": "bss_section_start_pointer",
                "DAT_00000a1c": "bss_section_default_value",
                "DAT_00000a2c": "bss_section_end_pointer",
                "do_nothing_00000990": "do_nothing",
                "FUN_00000db0": "initialize_memory",
                "FUN_00000e64": "initialize_heap",
                "FUN_0000459c": "initialize_global_variables",
                "FUN_00000f8c": "initialize_dynamic_memory"
            },
            "code": "void initialize_elf_sections_0000099c(void)\n{\n  undefined4 uStack_18;\n  undefined4 *local_PTR_DAT_00000a24;\n  undefined4 *relocation_section_pointer;\n  undefined4 *bss_section_pointer;\n  local_PTR_DAT_00000a24 = &uStack_18;\n  relocation_section_pointer = DAT_00000a14;\n  initialize_memory();\n  bss_section_pointer = (undefined4 *)PTR_DAT_00000a28;\n  while (bss_section_pointer < &uStack_18) {\n    *bss_section_pointer = DAT_00000a1c;\n    bss_section_pointer++;\n  }\n  while (relocation_section_pointer < PTR_Elf32_Rel_ARRAY_00000a20) {\n    *relocation_section_pointer = *local_PTR_DAT_00000a24;\n    relocation_section_pointer++;\n    local_PTR_DAT_00000a24++;\n  }\n  while (PTR_DAT_00000a18 < data_section_end_pointer) {\n    *PTR_DAT_00000a18 = 0;\n    PTR_DAT_00000a18++;\n  }\n  do_nothing();\n  initialize_heap();\n  initialize_global_variables();\n  initialize_dynamic_memory();\n  return;\n}",
            "called": [
                "FUN_0000459c",
                "FUN_00000f8c",
                "FUN_00000e64",
                "FUN_00000990",
                "FUN_00000db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000099c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_elf_sections_0000099c"
        },
        "FUN_00002d94": {
            "renaming": {
                "FUN_00002d94": "convert_input_to_byte_string_00002d94",
                "param_1": "input_string",
                "param_2": "string_length",
                "iVar1": "input_char",
                "bVar2": "byte_value",
                "bVar3": "is_first_char",
                "local_c": "output_string"
            },
            "code": "uint convert_input_to_byte_string_00002d94(undefined *input_string, int string_length) {\n  int input_char;\n  byte byte_value;\n  bool is_first_char = true;\n  undefined *output_string = input_string;\n  while (true) {\n    if (string_length + -1 <= (int)output_string - (int)input_string) {\n      return 0xffffffff;\n    }\n    input_char = FUN_00004418();\n    if (input_char < 0) break;\n    if ((input_char == 0xd) || (input_char == 10)) {\n      *output_string = 0;\n      FUN_00002a00(0xd);\n      FUN_00002a00(10);\n      if (is_first_char) {\n        input_string = (undefined *)0x1;\n      }\n      byte_value = (byte)input_string;\n      if (!is_first_char) {\n        byte_value = 0;\n      }\n      return (uint)byte_value;\n    }\n    if ((input_char == 8) || (input_char == 0x7f)) {\n      if (output_string != input_string) {\n        output_string = output_string - 1;\n        *output_string = 0;\n        FUN_00002a00(8);\n        FUN_00002a00(0x20);\n        FUN_00002a00(8);\n      }\n    }\n    else {\n      *output_string = (char)input_char;\n      FUN_00002a00(input_char);\n      output_string = output_string + 1;\n      is_first_char = false;\n    }\n  }\n  return 1;\n}",
            "called": [
                "FUN_00004418",
                "FUN_00002a00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002d94",
            "calling": [
                "FUN_00002e6c"
            ],
            "imported": false,
            "current_name": "convert_input_to_byte_string_00002d94"
        },
        "FUN_00003918": {
            "renaming": {
                "FUN_00003918": "get_value_from_param_00003918",
                "param_1": "param",
                "uVar1": "value"
            },
            "code": "int get_value_from_param_00003918(int param) {\n  int value;\n  switch(param) {\n    case 2:\n      value = 0x68;\n      break;\n    case 3:\n      value = 0x6b;\n      break;\n    case 6:\n      value = 0x4d;\n      break;\n    case 9:\n      value = 0x47;\n      break;\n    case 0xc:\n      value = 0x54;\n      break;\n    case 0xf:\n      value = 0x50;\n      break;\n    case 0xf1:\n      value = 0x66;\n      break;\n    case 0xf4:\n      value = 0x70;\n      break;\n    case 0xf7:\n      value = 0x6e;\n      break;\n    case 0xfa:\n      value = 0x75;\n      break;\n    case 0xfd:\n      value = 0x6d;\n      break;\n    default:\n      value = 0;\n      break;\n  }\n  return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003918",
            "calling": [
                "FUN_00003694"
            ],
            "imported": false,
            "current_name": "get_value_from_param_00003918"
        },
        "FUN_00003d64": {
            "renaming": {
                "FUN_00003d64": "get_result_00003d64",
                "param_1": "object_ptr",
                "param_2": "input_value",
                "uVar1": "result"
            },
            "code": "int get_result_00003d64(int object_ptr, int input_value) {\n  int result = -19;\n  if (object_ptr != 0) {\n    result = (***(code ***)(object_ptr + 0xc))(*(int *)(object_ptr + 4), input_value);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003d64",
            "calling": [
                "FUN_00002ecc"
            ],
            "imported": false,
            "current_name": "get_result_00003d64"
        },
        "FUN_00004e52": {
            "renaming": {
                "FUN_00004e52": "compare_bytes_00004e52",
                "param_1": "first_byte_array",
                "param_2": "second_byte_array",
                "uVar2": "byte_count",
                "bVar1": "first_byte",
                "bVar3": "is_equal"
            },
            "code": "int compare_bytes_00004e52(byte* first_byte_array, byte* second_byte_array) {\n    byte first_byte, second_byte;\n    uint byte_count;\n    bool is_equal = true;\n    \n    do {\n        byte_count = (uint)*first_byte_array;\n        first_byte = *second_byte_array;\n        if (byte_count != 0) {\n            is_equal = byte_count == first_byte;\n        }\n        first_byte_array++;\n        second_byte_array++;\n    } while (is_equal);\n    \n    return byte_count - first_byte;\n}",
            "called": [
                "FUN_00004e52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004e52",
            "calling": [
                "FUN_00002a18",
                "FUN_00005100",
                "FUN_00004e52",
                "FUN_00002fe0",
                "FUN_0000316c",
                "FUN_00002b10"
            ],
            "imported": false,
            "current_name": "compare_bytes_00004e52"
        },
        "FUN_000010d4": {
            "renaming": {
                "FUN_000010d4": "parse_data_000010d4",
                "param_1": "data_offset",
                "param_2": "data_length",
                "param_3": "data_type",
                "param_4": "flags",
                "uVar1": "allocation_result",
                "uVar2": "processing_result",
                "iVar3": "return_value",
                "uVar4": "data_length_aligned",
                "puVar5": "data_pointer",
                "local_30": "unused_bytes",
                "local_2c": "data_offset_aligned",
                "local_10": "loop_index",
                "local_c": "loop_variable",
                "local_a": "unused_index",
                "PTR_DAT_0000126c": "data_array_pointer",
                "param_5": "param_5",
                "param_6": "param_6",
                "param_7": "param_7"
            },
            "code": "int parse_data_000010d4(uint data_offset, int data_length, byte data_type, uint flags, undefined4 param_5, undefined4 param_6, undefined4 param_7)\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  int return_value;\n  uint uVar4;\n  undefined4 *data_pointer;\n  int local_data_length;\n  uint local_data_offset;\n  uint local_10;\n  short local_data_type;\n  short local_unused;\n  if (data_type < 0x10) {\n    local_data_length = data_length;\n    local_data_offset = data_offset;\n    if ((data_offset & 3) != 0) {\n      local_data_length = 4 - (data_offset & 3);\n      local_data_offset = local_data_length + data_offset;\n      local_data_length = data_length - local_data_length;\n    }\n    uVar4 = local_data_length - 0x30U & 0xfffffffc;\n    data_pointer = (undefined4 *)(uVar4 + local_data_offset);\n    if ((flags & 8) == 0) {\n      *(uint *)local_data_offset = local_data_offset;\n    }\n    else {\n      for (local_10 = local_data_offset; local_10 < uVar4 + local_data_offset; local_10 = local_10 + 4) {\n        *(uint *)local_10 = local_10;\n      }\n    }\n    uVar1 = allocate_memory();\n    local_unused = 0;\n    for (local_data_type = 1; local_data_type < 0x21; local_data_type = local_data_type + 1) {\n      if (*(int *)(DAT_0000126c + local_data_type * 4) == 0) {\n        local_unused = local_data_type;\n        break;\n      }\n    }\n    if (local_unused == 0) {\n      free_memory(uVar1);\n      return_value = -0x8b;\n    }\n    else {\n      *(undefined4 **)(DAT_0000126c + local_unused * 4) = data_pointer;\n      *(short *)((int)data_pointer + 6) = local_unused;\n      uVar2 = process_data(param_5,param_6,local_data_offset,uVar4);\n      *data_pointer = uVar2;\n      data_pointer[9] = local_data_offset;\n      data_pointer[0xb] = data_length;\n      data_pointer[10] = param_7;\n      *(byte *)((int)data_pointer + 5) = data_type;\n      *(undefined *)(data_pointer + 1) = 0;\n      data_pointer[2] = 0;\n      data_pointer[3] = 0;\n      data_pointer[4] = 0;\n      clear_memory(data_pointer + 5,0);\n      data_pointer[8] = 0;\n      *(int *)DAT_00001270 = *(int *)DAT_00001270 + 1;\n      if ((flags & 1) == 0) {\n        generate_output(data_pointer,10);\n        if ((flags & 4) == 0) {\n          free_memory(uVar1);\n          free_data(data_type);\n          return (int)local_unused;\n        }\n      }\n      else {\n        generate_output(data_pointer,1);\n      }\n      free_memory(uVar1);\n      return_value = (int)local_unused;\n    }\n  }\n  else {\n    return_value = -0x16;\n  }\n  return return_value;\n}",
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0",
                "FUN_00000fec",
                "FUN_000007dc",
                "FUN_00000738",
                "FUN_00000698"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000010d4",
            "calling": [
                "FUN_00000f8c"
            ],
            "imported": false,
            "current_name": "parse_data_000010d4"
        },
        "FUN_000045e4": {
            "renaming": {
                "FUN_000045e4": "do_nothing_000045e4"
            },
            "code": "\nvoid do_nothing_000045e4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000045e4",
            "calling": [
                "FUN_00004314"
            ],
            "imported": false,
            "current_name": "do_nothing_000045e4"
        },
        "FUN_00000738": {
            "renaming": {
                "FUN_00000738": "check_param_00000738",
                "param_1": "param",
                "iVar1": "result",
                "num_of_bytes": "num_bytes",
                "min_param": "min_param"
            },
            "code": "void check_param_00000738(ushort param)\n{\n  int num_of_bytes = *(byte *)(*(int *)PTR_DAT_0000078c + 4);\n  int min_param = *(byte *)(*(int *)PTR_DAT_0000078c + 5);\n  \n  if (num_of_bytes < 9 || param < min_param) {\n    int result = FUN_00000d2a();\n    if (result == 0) {\n      FUN_0000093c();\n    }\n    else {\n      *(undefined4 *)PTR_DAT_00000790 = 1;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_00000d2a",
                "FUN_0000093c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000738",
            "calling": [
                "FUN_000024bc",
                "FUN_000010d4"
            ],
            "imported": false,
            "current_name": "check_param_00000738"
        },
        "FUN_00003e58": {
            "renaming": {
                "FUN_00003e58": "calculate_absolute_value_with_sign_00003e58",
                "param_1": "string",
                "param_2": "value",
                "iVar1": "result",
                "local_18": "absolute_value",
                "local_14": "string_ptr"
            },
            "code": "int calculate_absolute_value_with_sign_00003e58(char *string, int value) {\n  int absolute_value;\n  char *string_ptr;\n\n  absolute_value = value;\n  string_ptr = string;\n\n  if (value < 0) {\n    if (string != NULL) {\n      string_ptr = string + 1;\n      *string = '-';\n    }\n    absolute_value = -value;\n  }\n\n  int result = calculate_string_length(string_ptr, absolute_value);\n\n  if (value < 0) {\n    result++;\n  }\n\n  return result;\n}\n",
            "called": [
                "FUN_00003dc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003e58",
            "calling": [
                "FUN_00003ec4"
            ],
            "imported": false,
            "current_name": "calculate_absolute_value_with_sign_00003e58"
        },
        "FUN_00004e26": {
            "renaming": {
                "FUN_00004e26": "check_connection_status_00004e26",
                "param_1": "socket_fd",
                "param_2": "connection_status_address",
                "iVar1": "connection_status",
                "uVar2": "connection_status_flags",
                "bVar3": "is_connection_failed"
            },
            "code": "void check_connection_status_00004e26(undefined4 socket_fd, int connection_status_address)\n{\n  int connection_status = check_socket_status(socket_fd, *(short *)(connection_status_address + 0xe));\n  bool is_connection_failed = connection_status == -1;\n  ushort connection_status_flags;\n  if (is_connection_failed) {\n    connection_status_flags = *(ushort *)(connection_status_address + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(connection_status_address + 0x54) = connection_status;\n    connection_status_flags = *(ushort *)(connection_status_address + 0xc) | 0x1000;\n  }\n  *(ushort *)(connection_status_address + 0xc) = connection_status_flags;\n}\n",
            "called": [
                "FUN_000004f2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004e26",
            "calling": [],
            "imported": false,
            "current_name": "check_connection_status_00004e26"
        },
        "FUN_000045e8": {
            "renaming": {
                "FUN_000045e8": "do_nothing_000045e8"
            },
            "code": "\nvoid do_nothing_000045e8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000045e8",
            "calling": [
                "FUN_00004274",
                "FUN_00004158",
                "FUN_00004418",
                "FUN_00004db8",
                "FUN_000057f8",
                "FUN_00005fec",
                "FUN_0000428c",
                "FUN_00005790",
                "FUN_00004cb4"
            ],
            "imported": false,
            "current_name": "do_nothing_000045e8"
        },
        "FUN_000057f8": {
            "renaming": {
                "FUN_000057f8": "FUNC_000057f8"
            },
            "code": "\nint FUNC_000057f8(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  int iVar3;\n  int iVar4;\n  int *piVar5;\n  bool bVar6;\n  byte *pbVar7;\n  int unaff_r7;\n  byte *pbVar8;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 uStack_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (param_2 == PTR_DAT_00005a38) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR_DAT_00005a3c) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR_DAT_00005a40) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if ((-1 < *(int *)(param_2 + 100) << 0x1f) &&\n     (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x16))) {\n    do_nothing_000045e8(*(undefined4 *)(param_2 + 0x58));\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar3 = FUN_000054a8(param_1,param_2), iVar3 != 0)) {\n    if ((-1 < *(int *)(param_2 + 100) << 0x1f) &&\n       (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x16))) {\n      do_nothing_000045ec(*(undefined4 *)(param_2 + 0x58));\n    }\n    return -1;\n  }\n  puVar1 = PTR_s___0__00005a44;\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar8 = param_3;\n  local_8c = param_4;\nLAB_0000588e:\n  pbVar7 = pbVar8;\n  if (*pbVar7 != 0) goto code_r0x00005896;\n  goto LAB_0000589a;\ncode_r0x00005896:\n  pbVar8 = pbVar7 + 1;\n  if (*pbVar7 != 0x25) goto LAB_0000588e;\nLAB_0000589a:\n  iVar3 = (int)pbVar7 - (int)param_3;\n  if (iVar3 != 0) {\n    iVar4 = FUN_000057d2(param_1,param_2,param_3,iVar3);\n    if (iVar4 == -1) {\nLAB_00005a06:\n      if ((-1 < *(int *)(param_2 + 100) << 0x1f) &&\n         (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x16))) {\n        do_nothing_000045ec(*(undefined4 *)(param_2 + 0x58));\n      }\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar3;\n  }\n  if (*pbVar7 == 0) goto LAB_00005a06;\n  local_84 = -1;\n  uStack_80 = 0;\n  local_88 = 0;\n  local_7c = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar8 = pbVar7 + 1;\n  while( true ) {\n    pbVar7 = pbVar8 + 1;\n    iVar3 = FUN_00006010(PTR_s___0__00005a44,*pbVar8,5);\n    puVar2 = PTR_DAT_00005a54;\n    if (iVar3 == 0) break;\n    local_88 = 1 << (iVar3 - (int)puVar1 & 0xffU) | local_88;\n    pbVar8 = pbVar7;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar8 == 0x2a) {\n    piVar5 = local_8c + 1;\n    local_7c = *local_8c;\n    local_8c = piVar5;\n    if (local_7c < 0) {\n      local_7c = -local_7c;\n      local_88 = local_88 | 2;\n    }\n  }\n  else {\n    bVar6 = false;\n    iVar3 = local_7c;\n    pbVar7 = pbVar8;\n    while( true ) {\n      if (9 < *pbVar7 - 0x30) break;\n      iVar3 = iVar3 * 10 + (*pbVar7 - 0x30);\n      bVar6 = true;\n      pbVar7 = pbVar7 + 1;\n    }\n    if (bVar6) {\n      local_7c = iVar3;\n    }\n  }\n  if (*pbVar7 == 0x2e) {\n    if (pbVar7[1] == 0x2a) {\n      local_84 = *local_8c;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n      pbVar7 = pbVar7 + 2;\n      local_8c = local_8c + 1;\n    }\n    else {\n      bVar6 = false;\n      local_84 = 0;\n      iVar3 = 0;\n      while( true ) {\n        pbVar7 = pbVar7 + 1;\n        if (9 < *pbVar7 - 0x30) break;\n        iVar3 = iVar3 * 10 + (*pbVar7 - 0x30);\n        bVar6 = true;\n      }\n      if (bVar6) {\n        local_84 = iVar3;\n      }\n    }\n  }\n  iVar3 = FUN_00006010(PTR_DAT_00005a54,*pbVar7,3);\n  if (iVar3 != 0) {\n    local_88 = local_88 | 0x40 << (iVar3 - (int)puVar2 & 0xffU);\n    pbVar7 = pbVar7 + 1;\n  }\n  param_3 = pbVar7 + 1;\n  local_70 = *pbVar7;\n  iVar3 = FUN_00006010(PTR_s_efgEFG_00005a48,local_70,6);\n  if (iVar3 == 0) {\n    iVar3 = FUNC_00005b34(param_1,&local_88,param_2,DAT_00005a50,&local_8c);\n  }\n  else {\n    iVar3 = param_1;\n    if (DAT_00005a4c == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar3 = unaff_r7;\n      goto LAB_000059b4;\n    }\n  }\n  if (iVar3 == -1) goto LAB_00005a06;\nLAB_000059b4:\n  local_74 = local_74 + iVar3;\n  pbVar8 = param_3;\n  unaff_r7 = iVar3;\n  goto LAB_0000588e;\n}\n\n",
            "called": [
                "FUN_00006010",
                "FUN_000057d2",
                "FUN_000045ec",
                "FUN_000054a8",
                "FUN_00005b34",
                "FUN_000045e8",
                "FUN_000042a4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000057f8",
            "calling": [
                "FUN_00004c84"
            ],
            "imported": false,
            "current_name": "FUNC_000057f8"
        },
        "FUN_000018bc": {
            "renaming": {
                "FUN_000018bc": "initialize_device_000018bc",
                "FUN_00001748": "set_device_mode",
                "DAT_00001910": "device_register",
                "FUN_00001710": "set_device_address",
                "DAT_00001914": "device_address",
                "PTR_DAT_00001918": "device_pointer"
            },
            "code": "void initialize_device_000018bc(void)\n{\n  set_device_mode(0xa0);\n  *DAT_00001910 = (*DAT_00001910 & 0x3b) | 4;\n  set_DAT_00001914(DAT_00001914, 1);\n  while ((DAT_00001910[6] & 0x10) == 0);\n  while ((DAT_00001910[6] & 0xc) != 0);\n  *PTR_DAT_00001918 = 0;\n  return;\n}",
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000018bc",
            "calling": [
                "FUN_00001b10"
            ],
            "imported": false,
            "current_name": "initialize_device_000018bc"
        },
        "FUN_00000f04": {
            "renaming": {
                "FUN_00000f04": "process_input_00000f04",
                "param_1": "input_char",
                "param_2": "input_int",
                "piRam00000f4c": "flag",
                "local_10": "local_int",
                "local_9": "local_char",
                "FUN_00000ed8": "initialize",
                "FUN_00004c84": "do_something",
                "uRam00000f50": "data_ptr_1",
                "FUN_0000211c": "do_something_else",
                "uRam00000f54": "data_ptr_2",
                "uRam00000f58": "data_ptr_3",
                "FUN_00000cd0": "do_something_2",
                "do_nothing_00000ef8": "do_nothing_1",
                "FUN_00000e58": "do_something_3",
                "do_nothing_00002400": "do_nothing_2",
                "PTR_s_main____This_is_RIOT___Version__2_00000f7c": "data_ptr_4",
                "FUN_000023a4": "do_something_4",
                "UNRECOVERED_JUMPTABLE": "jump_table_ptr"
            },
            "code": "void process_input_00000f04(char input_char, int input_int) {\n  int flag_ptr = *flag;\n  code *jump_table_ptr;\n  int local_int = input_int;\n  char local_char = input_char;\n  if (flag_ptr == 0) {\n    *flag = 1;\n    if (local_char == '\\x03') {\n      initialize();\n    }\n    do_something(uRam00000f50, local_int);\n    do_something_else();\n    do_something(uRam00000f54);\n    do_something(uRam00000f58);\n  }\n  do_something_2();\n  do_nothing_00000ef8();\n  jump_table_ptr = (code *)0xf4d;\n  do_something_3();\n  int stack_ptr = (int)&stack_ptr + 1;\n  do_nothing_00002400();\n  do_something(PTR_s_main____This_is_RIOT___Version__2_00000f7c);\n  do_something_4();\n  (*jump_table_ptr)(0);\n  return;\n}",
            "called": [
                "FUN_00000e58",
                "FUN_00000ef8",
                "FUN_00000cd0",
                "FUN_0000211c",
                "FUN_000023a4",
                "FUN_00002400",
                "FUN_00004c84",
                "FUN_00000ed8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000f04",
            "calling": [
                "FUN_000013b8",
                "FUN_00000fec",
                "FUN_00003ec4",
                "FUN_00000cc0",
                "FUN_00000a30",
                "FUN_00001034"
            ],
            "imported": false,
            "current_name": "process_input_00000f04"
        },
        "FUN_00000610": {
            "renaming": {
                "FUN_00000610": "reset_if_tab_00000610",
                "iVar1": "current_index",
                "iVar2": "index",
                "uVar3": "return_value",
                "PTR_DAT_00000684": "ptr_dat_00000684",
                "PTR_DAT_00000688": "ptr_dat_00000688",
                "PTR_DAT_0000068c": "ptr_dat_0000068c",
                "PTR_DAT_00000690": "ptr_dat_00000690",
                "PTR_DAT_00000694": "ptr_dat_00000694"
            },
            "code": "int reset_if_tab_00000610(int *PTR_DAT_00000684, int *PTR_DAT_00000688, int *PTR_DAT_0000068c, int *PTR_DAT_00000690, short *PTR_DAT_00000694) {\n    int current_index = *PTR_DAT_00000688;\n    int index = FUN_00000566(*PTR_DAT_0000068c);\n    int target_index = **(int **)(PTR_DAT_00000690 + index * 4);\n    if (current_index == target_index + -8) {\n        return 0;\n    }\n    else {\n        if ((current_index != 0) && (*(char *)(current_index + 4) == '\t')) {\n            *(undefined *)(current_index + 4) = 10;\n        }\n        *(undefined *)(target_index + -4) = 9;\n        *PTR_DAT_00000694 = *(short *)(target_index + -2);\n        *PTR_DAT_00000688 = target_index + -8;\n        return 1;\n    }\n}",
            "called": [
                "FUN_00000566"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000610",
            "calling": [],
            "imported": false,
            "current_name": "reset_if_tab_00000610"
        },
        "FUN_00003694": {
            "renaming": {
                "FUN_00003694": "display_data_object_00003694",
                "param_1": "object_address",
                "param_2": "object_size",
                "uVar1": "display_error_message",
                "cVar2": "flag",
                "uVar3": "bit_mask",
                "bVar4": "bit_set",
                "auStack_18": "stack_buffer",
                "local_10": "buffer_index",
                "local_a": "character_buffer",
                "local_9": "byte_index"
            },
            "code": "void display_data_object_00003694(int object_address, int object_size) {\n    undefined4 display_error_message;\n    char flag;\n    uint bit_mask;\n    bool bit_set;\n    undefined stack_buffer[8];\n    int buffer_index;\n    char character_buffer;\n    byte byte_index;\n    if ((object_address == 0) || (object_size > 3)) {\n        display_error_message = 0x00004db8;\n        display_error_message(PTR_s_Unable_to_display_data_object_00003694_000037e4);\n    }\n    else {\n        display_error_message = 0x00004c84;\n        display_error_message(PTR_s_Data__000037e8);\n        for (byte_index = 0; byte_index < object_size; byte_index++) {\n            if (*(byte *)(object_address + 6) < 0x14) {\n                bit_mask = DAT_000037ec & 1 << (uint)*(byte *)(object_address + 6);\n                bit_set = bit_mask != 0;\n                if (bit_set) {\n                    bit_mask = 1;\n                }\n                flag = (char)bit_mask;\n                if (!bit_set) {\n                    flag = '\\0';\n                }\n                if (flag == '\\0') goto LAB_000036ee;\n                character_buffer = '\\0';\n            }\n            else {\n                LAB_000036ee:\n                character_buffer = get_character((int)*(char *)(object_address + 7));\n            }\n            display_error_message(PTR_LAB_000037f0);\n            if (object_size < 2) {\n                display_error_message(PTR_s__000037f8);\n            }\n            else {\n                display_error_message(PTR_s___u__000037f4, byte_index);\n            }\n            if (character_buffer == '\\0') {\n                if (*(char *)(object_address + 7) == '\\0') {\n                    display_error_message(PTR_LAB_00003800, (int)*(short *)(object_address + (uint)byte_index * 2));\n                }\n                else if ((*(char *)(object_address + 7) + 4 < 0 == SCARRY4((int)*(char *)(object_address + 7), 4)) && (*(char *)(object_address + 7) < '\\0')) {\n                    buffer_index = format_string(stack_buffer, (int)*(short *)(object_address + (uint)byte_index * 2), (int)*(char *)(object_address + 7));\n                    stack_buffer[buffer_index] = 0;\n                    display_error_message(PTR_LAB_00003804, stack_buffer);\n                }\n                else {\n                    display_error_message(PTR_s__iE_i_00003808, (int)*(short *)(object_address + (uint)byte_index * 2), (int)*(char *)(object_address + 7));\n                }\n            }\n            else {\n                display_error_message(PTR_s__6d__c_000037fc, (int)*(short *)(object_address + (uint)byte_index * 2), character_buffer);\n            }\n            display_error_message(0x00003810, *(undefined *)(object_address + 6));\n        }\n    }\n}",
            "called": [
                "FUN_00004db8",
                "FUN_00003810",
                "FUN_00003e9e",
                "FUN_00004c84",
                "FUN_00003918"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003694",
            "calling": [
                "FUN_00002ecc",
                "FUN_0000305c"
            ],
            "imported": false,
            "current_name": "display_data_object_00003694"
        },
        "FUN_00002364": {
            "renaming": {
                "FUN_00002364": "check_parameter_and_perform_action_00002364",
                "param_1": "parameter_1",
                "param_2": "parameter_2",
                "iVar1": "check_result",
                "uVar2": "return_value",
                "FUN_00002294": "check_parameter",
                "FUN_000022be": "perform_action"
            },
            "code": "undefined4 check_parameter_and_perform_action_00002364(undefined4 parameter_1, undefined parameter_2)\n{\n  int check_result = check_parameter(parameter_1);\n  if (check_result == 0) {\n    perform_action(parameter_1, parameter_2);\n    return 0;\n  }\n  else {\n    return 0xffffffff;\n  }\n}",
            "called": [
                "FUN_00002294",
                "FUN_000022be"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002364",
            "calling": [
                "FUN_000012b4"
            ],
            "imported": false,
            "current_name": "check_parameter_and_perform_action_00002364"
        },
        "FUN_00001ad4": {
            "renaming": {
                "FUN_00001ad4": "set_bitmask_and_wait_until_condition_met_00001ad4",
                "DAT_00001b08": "bitmask_ptr",
                "PTR_DAT_00001b0c": "ptr_dat"
            },
            "code": "void set_bitmask_and_wait_until_condition_met_00001ad4(void)\n{\n  uint8_t* DAT_00001b08 = DAT_00001b08;\n  *DAT_00001b08 = *DAT_00001b08 & 0x3f;\n  while ((*DAT_00001b08 & 0xc) != 0xc);\n  *PTR_DAT_00001b0c = 7;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001ad4",
            "calling": [
                "FUN_00001b10"
            ],
            "imported": false,
            "current_name": "set_bitmask_and_wait_until_condition_met_00001ad4"
        },
        "FUN_00001274": {
            "renaming": {
                "FUN_00001274": "initialize_device_00001274",
                "FUN_0000258c": "setup_clock",
                "FUN_00001c84": "initialize_peripherals",
                "FUN_00002396": "enable_interrupts",
                "DAT_00001298": "data_register"
            },
            "code": "void initialize_device_00001274(void)\n{\n  setup_clock();\n  *DAT_00001298 = *DAT_00001298 | 0x28;\n  initialize_peripherals();\n  enable_interrupts();\n  return;\n}",
            "called": [
                "FUN_00001c84",
                "FUN_0000258c",
                "FUN_00002396"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001274",
            "calling": [
                "FUN_00000e64"
            ],
            "imported": false,
            "current_name": "initialize_device_00001274"
        },
        "FUN_00002e6c": {
            "renaming": {
                "FUN_00002e6c": "check_and_execute_request_00002e6c",
                "param_1": "request",
                "param_2": "data",
                "param_3": "param",
                "iVar1": "status",
                "FUN_00002e48": "initialize_request",
                "FUN_00002d94": "process_request",
                "FUN_00002b10": "execute_request"
            },
            "code": "void check_and_execute_request_00002e6c(void* request, void* data, void* param)\n{\n    int status;\n    initialize_request();\n    do {\n        status = process_request(data, param);\n        if (status == 0) {\n            execute_request(request, data);\n        }\n        initialize_request();\n    } while(true);\n}",
            "called": [
                "FUN_00002e48",
                "FUN_00002d94",
                "FUN_00002b10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002e6c",
            "calling": [
                "FUN_000023a4"
            ],
            "imported": false,
            "current_name": "check_and_execute_request_00002e6c"
        },
        "FUN_00003444": {
            "renaming": {
                "FUN_00003444": "get_time_from_rtc_00003444",
                "iVar1": "rtc_error",
                "auStack_2c": "rtc_data",
                "FUN_00002624": "read_rtc_data",
                "FUN_00004db8": "log_error",
                "FUN_00003378": "process_rtc_data"
            },
            "code": "bool get_time_from_rtc_00003444(void)\n{\n  int rtc_error;\n  undefined rtc_data[36];\n  rtc_error = read_rtc_data(rtc_data);\n  if (rtc_error != 0) {\n    log_error(PTR_s_rtc__error_getting_time_00003474);\n  }\n  else {\n    process_rtc_data(rtc_data);\n  }\n  return rtc_error != 0;\n}",
            "called": [
                "FUN_00002624",
                "FUN_00004db8",
                "FUN_00003378"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003444",
            "calling": [
                "FUN_00003524"
            ],
            "imported": false,
            "current_name": "get_time_from_rtc_00003444"
        },
        "FUN_00003688": {
            "renaming": {
                "FUN_00003688": "execute_function_00003688",
                "FUN_00003658": "call_another_function"
            },
            "code": "void execute_function_00003688(void)\n{\n  call_another_function();\n  return;\n}",
            "called": [
                "FUN_00003658"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003688",
            "calling": [
                "FUN_00002e9c"
            ],
            "imported": false,
            "current_name": "execute_function_00003688"
        },
        "FUN_00001392": {
            "renaming": {
                "FUN_00001392": "set_value_to_1_00001392",
                "param_1": "address",
                "param_2": "size",
                "puVar1": "address_pointer",
                "*puVar1": "*address_pointer",
                "FUN_00001360": "get_address_pointer"
            },
            "code": "void set_value_to_1_00001392(void *address, int size){\n  void **address_pointer = (void **)get_address_pointer(address, size);\n  *address_pointer = (void *)1;\n  return;\n}",
            "called": [
                "FUN_00001360"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001392",
            "calling": [
                "FUN_000013b8"
            ],
            "imported": false,
            "current_name": "set_value_to_1_00001392"
        },
        "FUN_00002910": {
            "renaming": {
                "FUN_00002910": "clear_flags_00002910",
                "DAT_00002944": "data_address",
                "PTR_DAT_00002948": "flag_pointer",
                "iVar1": "data_address",
                "*(uint *)(DAT_00002944 + 0x1c)": "*flag_address",
                "*(undefined4 *)(iVar1 + 8)": "*(undefined4 *)(data_address + 8)"
            },
            "code": "void clear_flags_00002910(void)\n{\n  int DAT_00002944 = DAT_00002944;\n  uint* flag_address = (uint*)(DAT_00002944 + 0x1c);\n  *(uint *)(DAT_00002944 + 0x1c) &= 0xfffffffb;\n  *(undefined4 *)(DAT_00002944 + 8) = 0;\n  *(undefined4 *)PTR_DAT_00002948 = 0;\n  *(undefined4 *)(PTR_DAT_00002948 + 4) = 0;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002910",
            "calling": [
                "FUN_000026c0"
            ],
            "imported": false,
            "current_name": "clear_flags_00002910"
        },
        "FUN_00004418": {
            "renaming": {
                "FUN_00004418": "get_byte_from_ppbVar2_00004418",
                "uVar1": "byte_value",
                "ppbVar2": "byte_pointer_pointer",
                "pbVar3": "byte_pointer",
                "iVar4": "data_pointer",
                "DAT_00004438": "data_pointer",
                "PTR_DAT_00005620": "data_pointer_1",
                "PTR_DAT_00005624": "data_pointer_2",
                "PTR_DAT_00005628": "data_pointer_3"
            },
            "code": "uint get_byte_from_ppbVar2_00004418(void)\n{\n  uint byte_value;\n  byte **byte_pointer_pointer;\n  byte *byte_pointer;\n  int iVar4;\n  \n  iVar4 = *DAT_00004438;\n  if ((iVar4 != 0) && (*(int *)(iVar4 + 0x18) == 0)) {\n    free(iVar4);\n  }\n  byte_pointer_pointer = *(byte ***)(iVar4 + 4);\n  if ((iVar4 != 0) && (*(int *)(iVar4 + 0x18) == 0)) {\n    free(iVar4);\n  }\n  if (byte_pointer_pointer == (byte **)PTR_DAT_00005620) {\n    byte_pointer_pointer = *(byte ***)(iVar4 + 4);\n  }\n  else if (byte_pointer_pointer == (byte **)PTR_DAT_00005624) {\n    byte_pointer_pointer = *(byte ***)(iVar4 + 8);\n  }\n  else if (byte_pointer_pointer == (byte **)PTR_DAT_00005628) {\n    byte_pointer_pointer = *(byte ***)(iVar4 + 0xc);\n  }\n  if ((-1 < (int)byte_pointer_pointer[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(byte_pointer_pointer + 3) << 0x16))) {\n    do_nothing_1(byte_pointer_pointer[0x16]);\n  }\n  byte_pointer = byte_pointer_pointer[1];\n  byte_pointer_pointer[1] = byte_pointer - 1;\n  if ((int)(byte_pointer - 1) < 0) {\n    byte_value = get_byte_from_ppbVar2_00004418(iVar4, byte_pointer_pointer);\n  }\n  else {\n    byte_pointer = *byte_pointer_pointer;\n    *byte_pointer_pointer = byte_pointer + 1;\n    byte_value = (uint)*byte_pointer;\n  }\n  if ((-1 < (int)byte_pointer_pointer[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(byte_pointer_pointer + 3) << 0x16))) {\n    do_nothing_2(byte_pointer_pointer[0x16]);\n  }\n  return byte_value;\n}\n",
            "called": [
                "FUN_000045ec",
                "FUN_000045e8",
                "FUN_000042a4",
                "FUN_00005e10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004418",
            "calling": [
                "FUN_00002d94"
            ],
            "imported": false,
            "current_name": "get_byte_from_ppbVar2_00004418"
        },
        "FUN_0000258c": {
            "renaming": {
                "FUN_0000258c": "initialize_data_0000258c",
                "local_c": "counter",
                "FUN_00002538": "set_flag",
                "PTR_000025ec": "data_pointer",
                "DAT_000025f0": "data_value"
            },
            "code": "void initialize_data_0000258c(void)\n{\n  uint32_t counter;\n  *(uint32_t *)(DAT_000025ec + 8) = DAT_000025f0;\n  set_flag(0xfffffffe,1);\n  set_flag(0xfffffffb,1);\n  for (counter = 0; counter < 0x66; counter++) {\n    set_flag((int)(char)counter,1);\n  }\n  *(uint32_t *)(DAT_000025ec + 0x10) |= 0x10;\n  *(uint32_t *)(DAT_000025ec + 0x14) |= 0x200;\n  return;\n}",
            "called": [
                "FUN_00002538"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000258c",
            "calling": [
                "FUN_00001274"
            ],
            "imported": false,
            "current_name": "initialize_data_0000258c"
        },
        "FUN_00002a00": {
            "renaming": {
                "FUN_00002a00": "call_fun_with_param_00002a00",
                "param_1": "param",
                "FUN_00004cb4": "call_fun"
            },
            "code": "void call_fun_with_param_00002a00(undefined4 param){\n  call_fun(param);\n  return;\n}",
            "called": [
                "FUN_00004cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002a00",
            "calling": [
                "FUN_00002e48",
                "FUN_00002d94"
            ],
            "imported": false,
            "current_name": "call_fun_with_param_00002a00"
        },
        "FUN_000043a0": {
            "renaming": {
                "FUN_000043a0": "find_flagged_items_000043a0",
                "param_1": "base_address",
                "param_2": "callback_function",
                "piVar2": "current_item",
                "uVar1": "callback_result",
                "iVar3": "item_address",
                "uVar4": "result",
                "iVar5": "item_count"
            },
            "code": "uint find_flagged_items_000043a0(int base_address, code *callback_function)\n{\n  uint result = 0;\n  int *current_item = (int *)(base_address + 0x48);\n  do {\n    int item_count = current_item[1];\n    int item_address = current_item[2];\n    while (item_count > 0) {\n      if ((*(ushort *)(item_address + 0xc) > 1) && (*(short *)(item_address + 0xe) != -1)) {\n        uint callback_result = (*callback_function)(item_address);\n        result |= callback_result;\n      }\n      item_address += 0x68;\n      item_count--;\n    }\n    current_item = (int *)*current_item;\n  } while (current_item != (int *)0x0);\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000043a0",
            "calling": [
                "FUN_00006768"
            ],
            "imported": false,
            "current_name": "find_flagged_items_000043a0"
        },
        "FUN_0000211c": {
            "renaming": {
                "FUN_0000211c": "process_data_0000211c",
                "local_40": "header_template",
                "local_3c": "message_id",
                "local_38": "data_ptr",
                "local_34": "message_data",
                "local_30": "message_type",
                "local_2c": "message_ptr",
                "local_28": "header_ptr",
                "local_24": "total_duration",
                "local_20": "total_size",
                "local_1a": "i",
                "local_18": "header_length",
                "local_14": "message_length",
                "PTR_s__pid_____21s____9sQ___pri___stac_00002250": "HEADER_START",
                "PTR_DAT_0000224c": "HEADER_TEMPLATE",
                "PTR_s_state_00002248": "HEADER_TEMPLATE_LENGTH",
                "PTR_s______isr_stack______________6i___00002254": "MESSAGE_START",
                "PTR_DAT_00002258": "message_table",
                "DAT_0000225c": "message_data_table",
                "FUN_000008b8": "get_total_size",
                "FUN_0000091c": "get_total_duration",
                "FUN_00000900": "send_message",
                "FUN_000010a0": "get_message_length",
                "PTR_s___3hi_____20s_____8s___1s____3i___00002260": "message_template"
            },
            "code": "void process_data_0000211c(void)\n{\n  int total_size = 0;\n  int total_duration = 0;\n  uint8_t header_length = 8;\n  uint8_t *header_ptr;\n  uint8_t message_type;\n  uint8_t message_length;\n  uint8_t *message_ptr;\n  uint8_t message_id;\n  uint32_t message_data;\n  uint8_t *data_ptr;\n  uint8_t *current_message_ptr;\n  uint8_t i;\n  header_ptr = (uint8_t *)PTR_s__pid_____21s____9sQ___pri___stac_00002250;\n  memcpy(header_ptr, PTR_DAT_0000224c, PTR_s_state_00002248);\n  *(uint16_t *)(header_ptr + 4) = htons(total_size);\n  *(uint16_t *)(header_ptr + 6) = htons(total_duration);\n  current_message_ptr = (uint8_t *)PTR_s______isr_stack______________6i___00002254;\n  for (i = 0; i < MAX_MESSAGES; i++) {\n    message_ptr = (uint8_t *)PTR_DAT_00002258[i];\n    if (message_ptr != NULL) {\n      header_length = 8;\n      message_type = message_ptr[0];\n      message_length = message_ptr[1];\n      message_id = message_ptr[2];\n      message_data = *(uint32_t *)(message_ptr + 3);\n      data_ptr = message_ptr + 7;\n      memcpy(current_message_ptr, message_ptr, message_length + header_length);\n      current_message_ptr += message_length + header_length;\n      total_size += message_length + header_length;\n      total_duration += message_data;\n    }\n  }\n  *(uint16_t *)(header_ptr + 4) = htons(total_size);\n  *(uint16_t *)(header_ptr + 6) = htons(total_duration);\n  send_message();\n}\n",
            "called": [
                "FUN_0000091c",
                "FUN_00000900",
                "FUN_000010a0",
                "FUN_00004c84",
                "FUN_000008b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000211c",
            "calling": [
                "FUN_00000f04",
                "FUN_00002eb4"
            ],
            "imported": false,
            "current_name": "process_data_0000211c"
        },
        "FUN_0000562c": {
            "renaming": {
                "FUN_0000562c": "find_key_value_pair_index_0000562c",
                "param_1": "key",
                "param_2": "string",
                "param_3": "result_index",
                "cVar1": "current_char",
                "ppiVar2": "key_value_pair_list",
                "piVar3": "current_key_value_pair",
                "iVar4": "current_key_value_pair_key",
                "pcVar5": "current_char_ptr",
                "piVar6": "current_key_value_pair_ptr",
                "iVar7": "string_index"
            },
            "code": "int find_key_value_pair_index_0000562c(undefined4 key, char *string, int *result_index)\n{\n  char current_char;\n  int **key_value_pair_list;\n  int *current_key_value_pair;\n  int string_index;\n  char *current_char_ptr;\n  int *current_key_value_pair_ptr;\n  int current_key_value_pair_key;\n\n  initialize_key_value_pair_list();\n  key_value_pair_list = DAT_0000569c;\n  current_char_ptr = string;\n\n  if (*DAT_0000569c != (int *)0x0) {\n    do {\n      current_char = *current_char_ptr;\n      if (current_char == '\\0') {\n        string_index = (int)current_char_ptr - (int)string;\n        current_key_value_pair = *DAT_0000569c;\n        while (true) {\n          current_key_value_pair_ptr = current_key_value_pair;\n          if (*current_key_value_pair_ptr == 0) break;\n          current_key_value_pair_key = FUN_00004e66(*current_key_value_pair_ptr, string, string_index);\n          current_key_value_pair = current_key_value_pair_ptr + 1;\n          if ((current_key_value_pair_key == 0) && (current_key_value_pair_key = *current_key_value_pair_ptr, *(char *)(current_key_value_pair_key + string_index) == '=')) {\n            *result_index = (int)current_key_value_pair_ptr - (int)*key_value_pair_list >> 2;\n            finalize_key_value_pair_list();\n            return current_key_value_pair_key + string_index + 1;\n          }\n        }\n        break;\n      }\n      current_char_ptr = current_char_ptr + 1;\n    } while (current_char != '=');\n  }\n  finalize_key_value_pair_list();\n  return 0;\n}",
            "called": [
                "FUN_00005ff8",
                "FUN_00004e66",
                "FUN_00005fec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000562c",
            "calling": [
                "FUN_000056a0"
            ],
            "imported": false,
            "current_name": "find_key_value_pair_index_0000562c"
        },
        "FUN_000020b8": {
            "renaming": {
                "FUN_000020b8": "initialize_data_000020b8",
                "FUN_00002028": "set_data_to_zero",
                "DAT_000020c8": "data_ptr"
            },
            "code": "void initialize_data_000020b8(void)\n{\n  set_data_to_zero(DAT_000020c8, 0);\n  return;\n}",
            "called": [
                "FUN_00002028"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000020b8",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_000020b8"
        },
        "FUN_00002a18": {
            "renaming": {
                "FUN_00002a18": "find_value_00002a18",
                "param_1": "array",
                "param_2": "value_to_find",
                "local_18": "current_array",
                "local_10": "index",
                "local_c": "current_element",
                "PTR_PTR_s_reboot_00002a84": "PTR_PTR_s_reboot_00002a84"
            },
            "code": "int find_value_00002a18(int *array, uint32_t value_to_find) {\n  int *current_array[2];\n  uint32_t index = 0;\n  current_array[0] = array;\n  current_array[1] = (int *)PTR_PTR_s_reboot_00002a84;\n  while (true) {\n    if (index > 1) {\n      return 0;\n    }\n    int *current_element = current_array[index];\n    if (current_element != (int *)0x0) {\n      for (; *current_element != 0; current_element += 3) {\n        int result = FUN_00004e52(*current_element, value_to_find);\n        if (result == 0) {\n          return current_element[2];\n        }\n      }\n    }\n    index++;\n  }\n}",
            "called": [
                "FUN_00004e52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002a18",
            "calling": [
                "FUN_00002b10"
            ],
            "imported": false,
            "current_name": "find_value_00002a18"
        },
        "FUN_000054a8": {
            "renaming": {
                "FUN_000054a8": "extract_value_from_packet_000054a8",
                "param_1": "output",
                "param_2": "input",
                "uVar1": "flags_2",
                "uVar2": "flags_3",
                "uVar3": "value",
                "uVar4": "value_3",
                "iVar5": "packet_start"
            },
            "code": "uint extract_value_from_packet_000054a8(uint *output, uint *input)\n{\n  uint packet_start = *DAT_00005574;\n  if ((packet_start != 0) && (*(int *)(packet_start + 0x18) == 0)) {\n    release_packet(packet_start);\n  }\n  if (input == (uint *)PTR_DAT_00005578) {\n    input = *(uint **)(packet_start + 4);\n  }\n  else if (input == (uint *)PTR_DAT_0000557c) {\n    input = *(uint **)(packet_start + 8);\n  }\n  else if (input == (uint *)PTR_DAT_00005580) {\n    input = *(uint **)(packet_start + 0xc);\n  }\n  uint value = (uint)*(ushort *)(input + 3);\n  ushort flags = *(ushort *)(input + 3);\n  if (-1 < (int)(value << 0x1c)) {\n    if (-1 < (int)(value << 0x1b)) {\n      *output = 9;\n      goto LAB_000054d8;\n    }\n    if ((uint *)(input[0xd]) != (uint *)0x0) {\n      if ((uint *)(input[0xd]) != input + 0x11) {\n        cleanup_packet(output);\n      }\n      input[0xd] = 0;\n    }\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xffdb;\n    input[1] = 0;\n    *input = input[4];\n  }\n  if ((input[4] == 0) && ((*(ushort *)(input + 3) & 0x280) != 0x200)) {\n    handle_packet(output, input);\n  }\n  ushort flags_2 = *(ushort *)(input + 3);\n  uint value_2 = (uint)flags_2;\n  ushort flags_3 = *(ushort *)(input + 3);\n  uint value_3 = value_2 & 1;\n  if ((flags_2 & 1) == 0) {\n    if (-1 < (int)(value_2 << 0x1e)) {\n      value_3 = input[5];\n    }\n    input[2] = value_3;\n  }\n  else {\n    input[2] = 0;\n    input[6] = -input[5];\n  }\n  if (input[4] != 0) {\n    return 0;\n  }\n  if ((flags_2 & 0x80) == 0) {\n    return value_2 & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(input + 3) = flags | 0x40;\n  return 0xffffffff;\n}",
            "called": [
                "FUN_00004b34",
                "FUN_000042a4",
                "FUN_00005700"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000054a8",
            "calling": [
                "FUN_00004db8",
                "FUN_000057f8",
                "FUN_00005404"
            ],
            "imported": false,
            "current_name": "extract_value_from_packet_000054a8"
        },
        "FUN_000007dc": {
            "renaming": {
                "FUN_000007dc": "initialize_memory_block_000007dc",
                "param_1": "param_1",
                "param_2": "num_1",
                "param_3": "num_2",
                "param_4": "num_3",
                "uVar1": "aligned_size",
                "local_14": "i",
                "local_10": "i",
                "local_c": "memory_block"
            },
            "code": "int* initialize_memory_block_000007dc(undefined4 param_1, int num_1, int num_2, int num_3)\n{\n  uint aligned_size = num_3 + num_2 & 0xFFFFFFFC;\n  int* memory_block = (int*)(aligned_size - 4);\n  *memory_block = 0x77777777;\n  if (((uint)memory_block & 7) != 0) {\n    memory_block = (int*)(aligned_size - 8);\n    *memory_block = 0x88888888;\n  }\n  memory_block[-1] = 0x1000000;\n  memory_block[-2] = param_1;\n  memory_block[-3] = DAT_000008b4;\n  memory_block = memory_block - 4;\n  *memory_block = 0;\n  for (int i = 3; i > 0; --i) {\n    memory_block--;\n    *memory_block = i;\n  }\n  memory_block--;\n  *memory_block = num_1;\n  for (int i = 0xB; i > 3; --i) {\n    memory_block--;\n    *memory_block = i;\n  }\n  memory_block[-1] = -3;\n  return memory_block - 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000007dc",
            "calling": [
                "FUN_000010d4"
            ],
            "imported": false,
            "current_name": "initialize_memory_block_000007dc"
        },
        "FUN_00001710": {
            "renaming": {
                "FUN_00001710": "clear_buffer_00001710",
                "param_1": "buffer",
                "param_2": "size",
                "puVar1": "buffer_ptr"
            },
            "code": "void clear_buffer_00001710(void* buffer, size_t size) {\n  unsigned char* buffer_ptr = (unsigned char*)buffer;\n  memset(buffer_ptr, 0, size);\n  return;\n}",
            "called": [
                "FUN_00001696"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001710",
            "calling": [
                "FUN_0000182c",
                "FUN_000019c0",
                "FUN_00001a60",
                "FUN_00001734",
                "FUN_00001bb8",
                "FUN_000018bc",
                "FUN_00001778",
                "FUN_00001960"
            ],
            "imported": false,
            "current_name": "clear_buffer_00001710"
        },
        "FUN_000045ec": {
            "renaming": {
                "FUN_000045ec": "do_nothing_000045ec"
            },
            "code": "\nvoid do_nothing_000045ec(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000045ec",
            "calling": [
                "FUN_00004280",
                "FUN_00005ff8",
                "FUN_00004158",
                "FUN_00004418",
                "FUN_00004db8",
                "FUN_000057f8",
                "FUN_0000579c",
                "FUN_000042a4",
                "FUN_00004cb4"
            ],
            "imported": false,
            "current_name": "do_nothing_000045ec"
        },
        "FUN_00001034": {
            "renaming": {
                "FUN_00001034": "find_and_insert_00001034",
                "param_1": "list",
                "param_2": "index",
                "local_1c": "current_node"
            },
            "code": "void find_and_insert_00001034(int **list, int index){\n  int **current_node;\n  if (index >= 8){\n    assert(0 && \"Index out of bounds\");\n  }\n  for (current_node = list; (*current_node != (int *)0x0 && ((int)(*current_node)[-3] <= index)); current_node = (int **)*current_node){\n  }\n  *(int **)(index + 8) = *current_node;\n  *current_node = (int *)(int **)(index + 8);\n  return;\n}",
            "called": [
                "FUN_00000f04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001034",
            "calling": [
                "FUN_00002434"
            ],
            "imported": false,
            "current_name": "find_and_insert_00001034"
        },
        "FUN_00006964": {
            "renaming": {
                "FUN_00006964": "calculate_result_00006964",
                "param_1": "count",
                "param_2": "data",
                "iVar1": "result"
            },
            "code": "int calculate_result_00006964(int count, int* data)\n{\n  int result = *(data + count - 1) - 4;\n  if (*(data + count - 1) < 0) {\n    result += *(data + result);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00006964",
            "calling": [
                "FUN_000060cc"
            ],
            "imported": false,
            "current_name": "calculate_result_00006964"
        },
        "FUN_0000182c": {
            "renaming": {
                "FUN_0000182c": "set_flag_and_call_functions_0000182c",
                "DAT_000018b4": "data_block",
                "DAT_000018b8": "data_block_2",
                "PTR_000018d0": "pointer_block",
                "PTR_000018d4": "pointer_block_2",
                "byte": "unsigned char",
                "FUN_000016ec": "call_function_with_arg",
                "FUN_00001710": "set_flag"
            },
            "code": "void set_flag_and_call_functions_0000182c(void)\n{\n  byte* flag_ptr = (byte *)(DAT_000018b4 + 8);\n  *flag_ptr &= 0xd0;\n  call_function_with_arg(DAT_000018b8, 0);\n  set_flag(DAT_000018b4, 1);\n  set_flag(DAT_000018b4, 0);\n  return;\n}",
            "called": [
                "FUN_00001710",
                "FUN_000016ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000182c",
            "calling": [
                "FUN_00001c84"
            ],
            "imported": false,
            "current_name": "set_flag_and_call_functions_0000182c"
        },
        "FUN_00004db8": {
            "renaming": {
                "FUN_00004db8": "convert_to_newline_terminated_string_00004db8",
                "param_1": "input",
                "cVar1": "current_char",
                "iVar2": "temp_var",
                "iVar3": "data_structure",
                "pcVar4": "string_pointer",
                "ppcVar5": "char_pointer_pointer",
                "uVar6": "return_value",
                "pcVar7": "output_string_pointer"
            },
            "code": "undefined4 convert_to_newline_terminated_string_00004db8(int input)\n{\n  char current_char;\n  int data_structure;\n  int temp_var;\n  char *string_pointer;\n  char **char_pointer_pointer;\n  undefined4 return_value;\n  char *output_string_pointer;\n  \n  data_structure = *DAT_00004dc4;\n  if ((data_structure != 0) && (*(int *)(data_structure + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  char_pointer_pointer = *(char ***)(data_structure + 8);\n  if (*(int *)(data_structure + 0x18) == 0) {\n    FUN_000042a4(data_structure);\n  }\n  if (char_pointer_pointer == (char **)PTR_DAT_00004dac) {\n    char_pointer_pointer = *(char ***)(data_structure + 4);\n  }\n  else if (char_pointer_pointer == (char **)PTR_DAT_00004db0) {\n    char_pointer_pointer = *(char ***)(data_structure + 8);\n  }\n  else if (char_pointer_pointer == (char **)PTR_DAT_00004db4) {\n    char_pointer_pointer = *(char ***)(data_structure + 0xc);\n  }\n  if ((-1 < (int)char_pointer_pointer[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(char_pointer_pointer + 3) << 0x16))) {\n    do_nothing_000045e8(char_pointer_pointer[0x16]);\n  }\n  if ((((int)((uint)*(ushort *)(char_pointer_pointer + 3) << 0x1c) < 0) && (char_pointer_pointer[4] != (char *)0x0)) || (temp_var = FUN_000054a8(data_structure,char_pointer_pointer), temp_var == 0)) {\n    output_string_pointer = (char *)(input + -1);\n    do {\n      while( true ) {\n        output_string_pointer = output_string_pointer + 1;\n        current_char = *output_string_pointer;\n        string_pointer = char_pointer_pointer[2] + -1;\n        char_pointer_pointer[2] = string_pointer;\n        if (current_char == '\\0') {\n          if (-1 < (int)string_pointer) {\n            output_string_pointer = *char_pointer_pointer;\n            return_value = 10;\n            *char_pointer_pointer = output_string_pointer + 1;\n            *output_string_pointer = '\\n';\n            goto LAB_00004d64;\n          }\n          temp_var = FUN_00005404(data_structure,10,char_pointer_pointer);\n          if (temp_var != -1) {\n            return_value = 10;\n            goto LAB_00004d64;\n          }\n          goto LAB_00004d60;\n        }\n        if (((int)string_pointer < 0) && (((int)string_pointer < (int)char_pointer_pointer[6] || (current_char == '\\n')))) break;\n        string_pointer = *char_pointer_pointer;\n        *char_pointer_pointer = string_pointer + 1;\n        *string_pointer = current_char;\n      }\n      temp_var = FUN_00005404(data_structure,current_char,char_pointer_pointer);\n    } while (temp_var != -1);\n  }\nLAB_00004d60:\n  return_value = 0xffffffff;\nLAB_00004d64:\n  if ((-1 < (int)char_pointer_pointer[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(char_pointer_pointer + 3) << 0x16))) {\n    do_nothing_000045ec(char_pointer_pointer[0x16]);\n  }\n  return return_value;\n}",
            "called": [
                "FUN_000045ec",
                "FUN_000054a8",
                "FUN_00005404",
                "FUN_000045e8",
                "FUN_000042a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004db8",
            "calling": [
                "FUN_000034c0",
                "FUN_0000305c",
                "FUN_000023a4",
                "FUN_00003444",
                "FUN_00003694",
                "FUN_000031e0",
                "FUN_00003478",
                "FUN_00002fe0",
                "FUN_000033c0",
                "FUN_00002a88",
                "FUN_00002f30",
                "FUN_00002f74",
                "FUN_000033f4",
                "FUN_00002b10"
            ],
            "imported": false,
            "current_name": "convert_to_newline_terminated_string_00004db8"
        },
        "FUN_000022f0": {
            "renaming": {
                "FUN_000022f0": "increment_value_000022f0",
                "param_1": "array",
                "uVar1": "index"
            },
            "code": "undefined increment_value_000022f0(int *array)\n{\n  uint index = array[2];\n  array[2] = index + 1;\n  return *(undefined *)((index & array[1] - 1U) + *array);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000022f0",
            "calling": [
                "FUN_0000231c"
            ],
            "imported": false,
            "current_name": "increment_value_000022f0"
        },
        "FUN_00001c84": {
            "renaming": {
                "FUN_00001c84": "initialize_device_00001c84",
                "uVar1": "device_id",
                "FUN_00000cd0": "get_device_id",
                "FUN_00001bb8": "set_device_defaults",
                "DAT_00001ce8": "device_config",
                "DAT_00001cec": "device_registers",
                "FUN_0000182c": "configure_device",
                "FUN_000017dc": "enable_device",
                "FUN_00001b10": "set_device_mode",
                "FUN_00000d0c": "enable_device_interrupts"
            },
            "code": "void initialize_device_00001c84(void)\n{\n  undefined4 device_id;\n  device_id = get_device_id();\n  set_device_defaults();\n  *(undefined4 *)(DAT_00001ce8 + 0x1044) = 0x220000;\n  DAT_00001ce8[0xc] = 0;\n  *DAT_00001ce8 = *DAT_00001ce8 & 199 | 0x38;\n  DAT_00001ce8[4] = 0x13;\n  DAT_00001ce8[5] = 0;\n  configure_device();\n  enable_device();\n  set_device_mode(7);\n  enable_device_interrupts(device_id);\n  return;\n}",
            "called": [
                "FUN_00000d0c",
                "FUN_0000182c",
                "FUN_00001b10",
                "FUN_00000cd0",
                "FUN_000017dc",
                "FUN_00001bb8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001c84",
            "calling": [
                "FUN_00001274"
            ],
            "imported": false,
            "current_name": "initialize_device_00001c84"
        },
        "FUN_000068f0": {
            "renaming": {
                "FUN_000068f0": "allocate_memory_and_copy_data_to_it_000068f0",
                "param_1": "size",
                "param_2": "memory",
                "iVar1": "new_memory",
                "iVar2": "current_size",
                "memory[0xd]": "memory[13]",
                "memory + 0x11": "memory + 17",
                "memory[0xe]": "memory[14]",
                "FUN_00004bd0": "allocate_memory",
                "*(undefined *)((int)memory + 0x46)": "*(undefined *)(new_memory + 0x3ff)",
                "*(undefined *)((int)memory + 0x45)": "*(undefined *)(new_memory + 0x3fe)",
                "*(undefined *)(memory + 0x11)": "*(undefined *)(new_memory + 0x3fd)",
                "*memory": "*memory",
                "FUN_000060cc": "resize_memory",
                "FUN_000060b0": "copy_memory",
                "0x400": "initial_size",
                "new_memory + 0x3fd": "*memory"
            },
            "code": "undefined4 allocate_memory_and_copy_data_to_it_000068f0(undefined4 size, int *memory)\n{\n  int current_size = memory[13];\n  int new_size;\n  \n  if ((int *)current_size == memory + 17) {\n    int new_memory = FUN_00004bd0(size,0x400);\n    if (new_memory != 0) {\n      memory[14] = 0x400;\n      memory[13] = new_memory;\n      *(undefined *)(new_memory + 0x3ff) = *(undefined *)((int)memory + 0x46);\n      *(undefined *)(new_memory + 0x3fe) = *(undefined *)((int)memory + 0x45);\n      *(undefined *)(new_memory + 0x3fd) = *(undefined *)(memory + 17);\n      *memory = new_memory + 0x3fd;\n      return 0;\n    }\n  }\n  else {\n    new_size = memory[14];\n    int new_memory = FUN_000060cc(size,(int *)current_size,new_size << 1);\n    if (new_memory != 0) {\n      FUN_000060b0(new_memory + new_size,new_memory,new_size);\n      memory[13] = new_memory;\n      memory[14] = new_size << 1;\n      *memory = new_memory + new_size;\n      return 0;\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [
                "FUN_00004bd0",
                "FUN_000060b0",
                "FUN_000060cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000068f0",
            "calling": [],
            "imported": false,
            "current_name": "allocate_memory_and_copy_data_to_it_000068f0"
        }
    },
    "used_tokens": 190241,
    "layers": [
        [
            "FUN_000026c0",
            "FUN_00004bd0",
            "FUN_00000794",
            "FUN_000064bc",
            "FUN_00002970",
            "FUN_00000dc0",
            "FUN_00000d0c",
            "FUN_00003d94",
            "FUN_0000579c",
            "FUN_000015d0",
            "FUN_00005e68",
            "FUN_00000dcc",
            "FUN_0000285c",
            "FUN_00000e58",
            "FUN_00001778",
            "FUN_000026d8",
            "FUN_00000566",
            "FUN_00001d08",
            "FUN_000031fc",
            "FUN_000016ec",
            "FUN_00005584",
            "FUN_00004248",
            "FUN_00001da2",
            "FUN_00001ec4",
            "FUN_00002744",
            "FUN_00002624",
            "FUN_00001e0c",
            "FUN_000041d0",
            "FUN_0000459c",
            "FUN_000014c4",
            "FUN_00004b34",
            "FUN_000004f2",
            "FUN_00004e66",
            "FUN_00005ecc",
            "FUN_0000129c",
            "FUN_00001628",
            "FUN_00001748",
            "FUN_0000294c",
            "FUN_00005790",
            "FUN_00000534",
            "FUN_000017dc",
            "FUN_00000410",
            "FUN_000005ca",
            "FUN_00005ff8",
            "FUN_00002714",
            "FUN_000020e0",
            "FUN_00005fec",
            "FUN_00004f84",
            "FUN_000028f0",
            "FUN_00004f98",
            "FUN_00004dee",
            "FUN_00000fec",
            "FUN_00000428",
            "FUN_000039e8",
            "FUN_00000e38",
            "FUN_00002294",
            "FUN_00003e9e",
            "FUN_00003378",
            "FUN_00006768",
            "FUN_00000db0",
            "FUN_00002600",
            "FUN_00003810",
            "FUN_00000ed8",
            "FUN_000031e0",
            "FUN_000020f4",
            "FUN_0000687c",
            "FUN_00005edc",
            "FUN_00001eea",
            "FUN_000023a4",
            "FUN_0000240c",
            "FUN_00004280",
            "FUN_00001448",
            "FUN_00001688",
            "FUN_00004042",
            "FUN_00000cf0",
            "FUN_00000f8c",
            "FUN_00002894",
            "FUN_00004158",
            "FUN_00002654",
            "FUN_00002538",
            "FUN_00004c84",
            "FUN_0000305c",
            "FUN_000012b4",
            "FUN_0000058e",
            "FUN_000025f4",
            "FUN_00001ddc",
            "FUN_00002ecc",
            "FUN_00000d76",
            "FUN_000057a8",
            "FUN_00001696",
            "FUN_000008b8",
            "FUN_000024bc",
            "FUN_00000490",
            "FUN_0000091c",
            "FUN_00001f80",
            "FUN_00000e64",
            "FUN_000026e4",
            "FUN_00000d44",
            "FUN_00000698",
            "FUN_00000cd0",
            "FUN_00000cc0",
            "FUN_00002994",
            "FUN_00000d2a",
            "FUN_00001ff6",
            "FUN_000013b8",
            "FUN_00002a88",
            "FUN_00002f30",
            "FUN_00001e44",
            "FUN_00001318",
            "FUN_00000900",
            "FUN_00004274",
            "FUN_00002fe0",
            "FUN_00001dc0",
            "FUN_00000df4",
            "FUN_00002eb4",
            "FUN_0000328c",
            "FUN_000041f4",
            "FUN_0000316c",
            "FUN_000026f0",
            "FUN_000057d2",
            "FUN_000056b8",
            "FUN_00001a18",
            "FUN_00000d9c",
            "FUN_00003ff4",
            "FUN_00001d5e",
            "FUN_0000191c",
            "FUN_000050f4",
            "FUN_00005a58",
            "FUN_000056b0",
            "FUN_00003d24",
            "FUN_000060cc",
            "FUN_00003dc4",
            "FUN_000022be",
            "FUN_00002108",
            "FUN_00001d80",
            "FUN_000033c0",
            "FUN_00002b10",
            "FUN_00001b10",
            "FUN_000023c8",
            "FUN_00002e48",
            "FUN_00000930",
            "FUN_00001348",
            "FUN_00001d3a",
            "FUN_00002434",
            "FUN_00005700",
            "FUN_00002798",
            "FUN_00003524",
            "FUN_00001bb8",
            "FUN_0000428c",
            "FUN_0000404c",
            "FUN_00002f74",
            "FUN_000010a0",
            "FUN_000012e2",
            "FUN_000056a0",
            "FUN_0000231c",
            "FUN_00002690",
            "FUN_00006010",
            "FUN_00001cf0",
            "FUN_00003ec4",
            "FUN_00001360",
            "FUN_00004622",
            "FUN_0000093c",
            "FUN_00003658",
            "FUN_000019c0",
            "FUN_000060b0",
            "FUN_000023d0",
            "FUN_00000a30",
            "FUN_000034c0",
            "FUN_000050e8",
            "FUN_000042a4",
            "FUN_00000514",
            "FUN_00002e9c",
            "FUN_00001960",
            "FUN_00001a3c",
            "FUN_000045ee",
            "FUN_00005404",
            "FUN_00006974",
            "FUN_00004314",
            "FUN_00004dc8",
            "FUN_00005fd8",
            "FUN_00005e10",
            "FUN_000033f4",
            "FUN_0000443c",
            "FUN_000027b0",
            "FUN_00005ebc",
            "FUN_00006192",
            "FUN_00001734",
            "FUN_00000e14",
            "FUN_0000281c",
            "FUN_00002270",
            "FUN_00005780",
            "FUN_000020cc",
            "FUN_00002396",
            "FUN_00004cb4",
            "FUN_00003478",
            "FUN_00002028",
            "FUN_000016c8",
            "FUN_00001a60",
            "FUN_0000099c",
            "FUN_00002d94",
            "FUN_00003918",
            "FUN_00003d64",
            "FUN_00004e52",
            "FUN_000010d4",
            "FUN_00000738",
            "FUN_00003e58",
            "FUN_00004e26",
            "FUN_000018bc",
            "FUN_00000f04",
            "FUN_00000610",
            "FUN_00003694",
            "FUN_00002364",
            "FUN_00001ad4",
            "FUN_00001274",
            "FUN_00002e6c",
            "FUN_00003444",
            "FUN_00003688",
            "FUN_00001392",
            "FUN_00002910",
            "FUN_00004418",
            "FUN_0000258c",
            "FUN_00002a00",
            "FUN_000043a0",
            "FUN_0000211c",
            "FUN_0000562c",
            "FUN_000020b8",
            "FUN_00002a18",
            "FUN_000054a8",
            "FUN_000007dc",
            "FUN_00001710",
            "FUN_00001034",
            "FUN_00006964",
            "FUN_0000182c",
            "FUN_00004db8",
            "FUN_000022f0",
            "FUN_00001c84",
            "FUN_000068f0"
        ],
        [
            "FUN_000064bc",
            "FUN_00005700",
            "FUN_00002690"
        ]
    ],
    "locked_functions": []
}