{
    "functions": {
        "FUN_00000410": {
            "entrypoint": "0x00000410",
            "current_name": "initialize_application_00000410",
            "code": "\nvoid initializeApplication_00000410(void)\n\n{\n  FUN_00000df4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000410": "initialize_application_00000410"
            },
            "calling": [
                "FUN_0000459c"
            ],
            "called": [
                "FUN_00000df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000428": {
            "entrypoint": "0x00000428",
            "current_name": "validate_offset_00000428",
            "code": "\ndword validateOffset_00000428(undefined4 *outputPointer,int inputOffset)\n\n{\n  undefined4 randomValue;\n  dword result;\n  \n  randomValue = FUN_00000cd0();\n  result = Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  if ((inputOffset + Elf32_Rel_ARRAY_1fff0200[0].r_offset < 0x20030001) &&\n     (0x1fff0def < inputOffset + Elf32_Rel_ARRAY_1fff0200[0].r_offset)) {\n    Elf32_Rel_ARRAY_1fff0200[0].r_offset = inputOffset + Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  }\n  else {\n    *outputPointer = 0xc;\n    result = 0xffffffff;\n  }\n  FUN_00000d0c(randomValue);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000428": "validate_offset_00000428",
                "param_1": "outputPointer",
                "param_2": "inputOffset",
                "uVar1": "randomValue",
                "local_c": "result"
            },
            "calling": [
                "FUN_00004bd0"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000490": {
            "entrypoint": "0x00000490",
            "current_name": "process_data_00000490",
            "code": "\nundefined4 process_data_00000490(undefined4 input_1,undefined4 input_2,undefined4 data_1,undefined4 data_2)\n\n{\n  undefined4 result;\n  \n  result = FUN_00000e14(data_1,data_2);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000490": "process_data_00000490",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "data_1",
                "param_4": "data_2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00004dc8"
            ],
            "called": [
                "FUN_00000e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000004f2": {
            "entrypoint": "0x000004f2",
            "current_name": "reset_variable_and_set_error_000004f2",
            "code": "\nundefined4 reset_variable_and_set_error_000004f2(undefined4 *output_value)\n\n{\n  *output_value = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000004f2": "reset_variable_and_set_error_000004f2",
                "param_1": "output_value"
            },
            "calling": [
                "FUN_00004dee",
                "FUN_00004e26"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000514": {
            "entrypoint": "0x00000514",
            "current_name": "set_default_value_00000514",
            "code": "\nundefined4 setDefaultValue_00000514(undefined4 *outputValue)\n\n{\n  *outputValue = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00000514": "set_default_value_00000514",
                "param_1": "outputValue"
            },
            "calling": [
                "FUN_000056b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000534": {
            "entrypoint": "0x00000534",
            "current_name": "check_valid_input_00000534",
            "code": "\nundefined4 checkValidInput_00000534(undefined4 *result,int input)\n\n{\n  undefined4 isValid;\n  \n  *result = 0;\n  if (((input == 0) || (input == 1)) || (input == 2)) {\n    isValid = 1;\n  }\n  else {\n    isValid = 0;\n  }\n  return isValid;\n}\n\n",
            "renaming": {
                "FUN_00000534": "check_valid_input_00000534",
                "param_1": "result",
                "param_2": "input",
                "uVar1": "isValid"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000566": {
            "entrypoint": "0x00000566",
            "current_name": "convert_byte_to_int_00000566",
            "code": "\nint convertByteToInt_00000566(int input)\n\n{\n  byte byte1;\n  byte byte2;\n  byte byte3;\n  byte byte4;\n  int result;\n  \n  byte2 = (byte)input;\n  byte3 = (byte)((uint)input >> 8);\n  byte4 = (byte)((uint)input >> 0x10);\n  byte1 = (byte)((uint)input >> 0x18);\n  result = LZCOUNT((uint)(byte)((((((((byte2 & 1) << 1 | byte2 >> 1 & 1) << 1 | byte2 >> 2 & 1) << 1\n                                  | byte2 >> 3 & 1) << 1 | byte2 >> 4 & 1) << 1 | byte2 >> 5 & 1) <<\n                                1 | byte2 >> 6 & 1) << 1 | byte2 >> 7) << 0x18 |\n                  (uint)(byte)((((((((byte3 & 1) << 1 | byte3 >> 1 & 1) << 1 | byte3 >> 2 & 1) << 1\n                                  | byte3 >> 3 & 1) << 1 | byte3 >> 4 & 1) << 1 | byte3 >> 5 & 1) <<\n                                1 | byte3 >> 6 & 1) << 1 | byte3 >> 7) << 0x10 |\n                  (uint)(byte)((((((((byte4 & 1) << 1 | byte4 >> 1 & 1) << 1 | byte4 >> 2 & 1) << 1\n                                  | byte4 >> 3 & 1) << 1 | byte4 >> 4 & 1) << 1 | byte4 >> 5 & 1) <<\n                                1 | byte4 >> 6 & 1) << 1 | byte4 >> 7) << 8 |\n                  (uint)(byte)((((((((byte1 & 1) << 1 | byte1 >> 1 & 1) << 1 | byte1 >> 2 & 1) << 1\n                                  | byte1 >> 3 & 1) << 1 | byte1 >> 4 & 1) << 1 | byte1 >> 5 & 1) <<\n                                1 | byte1 >> 6 & 1) << 1 | byte1 >> 7));\n  if (input == 0) {\n    result = -1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000566": "convert_byte_to_int_00000566",
                "param_1": "input",
                "bVar1": "byte1",
                "bVar2": "byte2",
                "bVar3": "byte3",
                "bVar4": "byte4",
                "iVar5": "result"
            },
            "calling": [
                "FUN_00000610"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000058e": {
            "entrypoint": "0x0000058e",
            "current_name": "update_pointer_0000058e",
            "code": "\nvoid updatePointer_0000058e(int *sourcePointer,undefined4 *destinationPointer)\n\n{\n  if (*sourcePointer == 0) {\n    *destinationPointer = destinationPointer;\n  }\n  else {\n    *destinationPointer = *(undefined4 *)*sourcePointer;\n    *(undefined4 **)*sourcePointer = destinationPointer;\n  }\n  *sourcePointer = destinationValueCasted;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000058e": "update_pointer_0000058e",
                "param_1": "sourcePointer",
                "param_2": "destinationPointer",
                "(int)param_2": "destinationValueCasted"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000005ca": {
            "entrypoint": "0x000005ca",
            "current_name": "extract_element_from_pointer_000005ca",
            "code": "\nundefined4 * extractElementFromPointer_000005ca(int *arrayPointer)\n\n{\n  undefined4 *extractedElement;\n  \n  if (*arrayPointer == 0) {\n    extractedElement = (undefined4 *)0x0;\n  }\n  else {\n    extractedElement = *(undefined4 **)*arrayPointer;\n    if (extractedElement == (undefined4 *)*arrayPointer) {\n      *arrayPointer = 0;\n    }\n    else {\n      *(undefined4 *)*arrayPointer = *extractedElement;\n    }\n  }\n  return extractedElement;\n}\n\n",
            "renaming": {
                "FUN_000005ca": "extract_element_from_pointer_000005ca",
                "param_1": "arrayPointer",
                "puVar1": "extractedElement"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000610": {
            "entrypoint": "0x00000610",
            "current_name": "check_and_modify_data_00000610",
            "code": "\nundefined4 checkAndModifyData_00000610(void)\n\n{\n  int originalValue;\n  int newValue;\n  undefined4 result;\n  \n  originalValue = DAT_1fff03dc;\n  DAT_1fff0354 = 0;\n  newValue = FUN_00000566(DAT_1fff0424);\n  newValue = **(int **)(&DAT_1fff03e4 + newValue * 4);\n  if (originalValue == newValue + -8) {\n    result = 0;\n  }\n  else {\n    if ((originalValue != 0) && (*(char *)(originalValue + 4) == '\\t')) {\n      *(undefined *)(originalValue + 4) = 10;\n    }\n    *(undefined *)(newValue + -4) = 9;\n    DAT_1fff03e0 = *(undefined2 *)(newValue + -2);\n    result = 1;\n    DAT_1fff03dc = newValue + -8;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000610": "check_and_modify_data_00000610",
                "iVar1": "originalValue",
                "iVar2": "newValue",
                "uVar3": "result"
            },
            "calling": [],
            "called": [
                "FUN_00000566"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000698": {
            "entrypoint": "0x00000698",
            "current_name": "update_data_00000698",
            "code": "\nvoid updateData_00000698(int dataPtr,uint newValue)\n\n{\n  if (newValue < 9) {\n    if ((8 < *(byte *)(dataPtr + 4)) &&\n       (FUN_000005ca(&DAT_1fff03e4 + (uint)*(byte *)(dataPtr + 5) * 4),\n       *(int *)(&DAT_1fff03e4 + (uint)*(byte *)(dataPtr + 5) * 4) == 0)) {\n      DAT_1fff0424 = DAT_1fff0424 & ~(1 << *(sbyte *)(dataPtr + 5));\n    }\n  }\n  else if (*(byte *)(dataPtr + 4) < 9) {\n    FUN_0000058e(&DAT_1fff03e4 + (uint)*(byte *)(dataPtr + 5) * 4,dataPtr + 8);\n    DAT_1fff0424 = DAT_1fff0424 | 1 << *(sbyte *)(dataPtr + 5);\n  }\n  *(char *)(dataPtr + 4) = (char)newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000698": "update_data_00000698",
                "param_1": "dataPtr",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc",
                "FUN_00002434",
                "FUN_00000794"
            ],
            "called": [
                "FUN_000005ca",
                "FUN_0000058e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000738": {
            "entrypoint": "0x00000738",
            "current_name": "check_and_execute_function_00000738",
            "code": "\nvoid checkAndExecuteFunction_00000738(ushort inputValue)\n\n{\n  int result;\n  \n  if ((*(byte *)(DAT_1fff03dc + 4) < 9) || (inputValue < *(byte *)(DAT_1fff03dc + 5))) {\n    result = FUN_00000d2a();\n    if (result == 0) {\n      FUN_0000093c();\n    }\n    else {\n      DAT_1fff0354 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000738": "check_and_execute_function_00000738",
                "param_1": "inputValue",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "called": [
                "FUN_00000d2a",
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000794": {
            "entrypoint": "0x00000794",
            "current_name": "initialize_integer_array_00000794",
            "code": "\nint * initializeIntegerArray_00000794(void)\n\n{\n  int result;\n  int index;\n  undefined4 *startAddress;\n  uint alignedAddress;\n  int loopCounter1;\n  int loopCounter2;\n  int *currentPointer;\n  \n  FUN_00000cd0();\n  *(undefined4 *)(&DAT_1fff0358 + DAT_1fff03e0 * 4) = 0;\n  DAT_1fff0350 = DAT_1fff0350 + -1;\n  FUN_00000698(DAT_1fff03dc,0);\n  startAddress = &DAT_1fff03dc;\n  index = 0;\n  DAT_1fff03dc = 0;\n  FUN_00000930();\n  alignedAddress = (int)startAddress + index & 0xfffffffc;\n  currentPointer = (int *)(alignedAddress - 4);\n  *currentPointer = 0x77777777;\n  if (((uint)currentPointer & 7) != 0) {\n    currentPointer = (int *)(alignedAddress - 8);\n    *currentPointer = 0x88888888;\n  }\n  currentPointer[-1] = 0x1000000;\n  currentPointer[-2] = index << 0xd;\n  currentPointer[-3] = 0x795;\n  currentPointer = currentPointer + -4;\n  *currentPointer = 0;\n  for (loopCounter2 = 3; 0 < loopCounter2; loopCounter2 = loopCounter2 + -1) {\n    currentPointer = currentPointer + -1;\n    *currentPointer = loopCounter2;\n  }\n  currentPointer = currentPointer + -1;\n  *currentPointer = result;\n  for (loopCounter1 = 0xb; 3 < loopCounter1; loopCounter1 = loopCounter1 + -1) {\n    currentPointer = currentPointer + -1;\n    *currentPointer = loopCounter1;\n  }\n  currentPointer[-1] = -3;\n  return currentPointer + -1;\n}\n\n",
            "renaming": {
                "FUN_00000794": "initialize_integer_array_00000794",
                "extraout_r1": "result",
                "iVar1": "index",
                "puVar2": "startAddress",
                "uVar3": "alignedAddress",
                "iStack_1c": "loopCounter1",
                "iStack_18": "loopCounter2",
                "piStack_14": "currentPointer"
            },
            "calling": [],
            "called": [
                "FUN_00000cd0",
                "FUN_00000930",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000007dc": {
            "entrypoint": "0x000007dc",
            "current_name": "initialize_memory_000007dc",
            "code": "\nint * initializeMemory_000007dc(undefined4 baseAddress,int value,int size1,int size2)\n\n{\n  uint alignedSize;\n  int i;\n  int j;\n  int *ptr;\n  \n  alignedSize = size2 + size1 & 0xfffffffc;\n  ptr = (int *)(alignedSize - 4);\n  *ptr = 0x77777777;\n  if (((uint)ptr & 7) != 0) {\n    ptr = (int *)(alignedSize - 8);\n    *ptr = 0x88888888;\n  }\n  ptr[-1] = 0x1000000;\n  ptr[-2] = baseAddress;\n  ptr[-3] = 0x795;\n  ptr = ptr + -4;\n  *ptr = 0;\n  for (j = 3; 0 < j; j = j + -1) {\n    ptr = ptr + -1;\n    *ptr = j;\n  }\n  ptr = ptr + -1;\n  *ptr = value;\n  for (i = 0xb; 3 < i; i = i + -1) {\n    ptr = ptr + -1;\n    *ptr = i;\n  }\n  ptr[-1] = -3;\n  return ptr + -1;\n}\n\n",
            "renaming": {
                "FUN_000007dc": "initialize_memory_000007dc",
                "param_1": "baseAddress",
                "param_2": "value",
                "param_3": "size1",
                "param_4": "size2",
                "local_14": "i",
                "local_10": "j",
                "local_c": "ptr",
                "uVar1": "alignedSize"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000008b8": {
            "entrypoint": "0x000008b8",
            "current_name": "calculate_remaining_size_000008b8",
            "code": "\nint calculateRemainingSize_000008b8(void)\n\n{\n  Elf32_Rel *currentRelocation;\n  \n  for (currentRelocation = (Elf32_Rel *)&DAT_1fff0000;\n      (currentRelocation->relocationOffset == 0xe7fee7fe && (currentRelocation < endRelocationArray));\n      currentRelocation = (Elf32_Rel *)&currentRelocation->nextRelocation) {\n  }\n  return ((int)endRelocationArray - (int)currentRelocation >> 2) << 2;\n}\n\n",
            "renaming": {
                "FUN_000008b8": "calculate_remaining_size_000008b8",
                "local_c": "currentRelocation",
                "r_offset": "relocationOffset",
                "Elf32_Rel_ARRAY_1fff0200": "endRelocationArray",
                "r_info": "nextRelocation"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000900": {
            "entrypoint": "0x00000900",
            "current_name": "get_main_stack_pointer_00000900",
            "code": "\nundefined4 get_main_stack_pointer_00000900(void)\n\n{\n  undefined4 main_stack_pointer;\n  \n  main_stack_pointer = getMainStackPointer();\n  return main_stack_pointer;\n}\n\n",
            "renaming": {
                "FUN_00000900": "get_main_stack_pointer_00000900",
                "uVar1": "main_stack_pointer"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000091c": {
            "entrypoint": "0x0000091c",
            "current_name": "get_memory_address_0000091c",
            "code": "\nundefined4 getMemoryAddress_0000091c(void)\n\n{\n  return 0x1fff0000;\n}\n\n",
            "renaming": {
                "FUN_0000091c": "get_memory_address_0000091c"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000930": {
            "entrypoint": "0x00000930",
            "current_name": "execute_forever_00000930",
            "code": "\nvoid execute_forever_00000930(void)\n\n{\n  FUN_00000cf0();\n  trigger_interrupt(1);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000930": "execute_forever_00000930",
                "software_interrupt": "trigger_interrupt"
            },
            "calling": [
                "FUN_00000f8c",
                "FUN_00000794"
            ],
            "called": [
                "FUN_00000cf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000093c": {
            "entrypoint": "0x0000093c",
            "current_name": "enable_interrupt_0000093c",
            "code": "\n\n\nvoid enableInterrupt_0000093c(void)\n\n{\n  _DAT_e000ed04 = _DAT_e000ed04 | 0x10000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000093c": "enable_interrupt_0000093c"
            },
            "calling": [
                "FUN_00002798",
                "FUN_00001cf0",
                "FUN_00000738",
                "FUN_00002434",
                "FUN_00001348"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000990": {
            "entrypoint": "0x00000990",
            "current_name": "FUNC_00000990",
            "code": "\nvoid FUNC_00000990(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000990": "FUNC_00000990"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x0000099c",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  undefined4 uStack_18;\n  undefined4 *local_14;\n  dword *local_10;\n  Elf32_Rel *local_c;\n  \n  local_14 = &uStack_18;\n  local_10 = (dword *)&DAT_00007c60;\n  FUN_00000db0();\n  local_c = (Elf32_Rel *)&DAT_1fff0000;\n  while (local_c < &uStack_18) {\n    local_c->r_offset = 0xe7fee7fe;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  local_c = Elf32_Rel_ARRAY_1fff0200;\n  while (local_c < (Elf32_Rel *)&DAT_1fff0350) {\n    local_c->r_offset = *local_10;\n    local_10 = local_10 + 1;\n    local_c = (Elf32_Rel *)&local_c->r_info;\n  }\n  local_c = (Elf32_Rel *)&DAT_1fff0350;\n  while (local_c < (undefined4 *)0x1fff0df0) {\n    local_c->r_offset = 0;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  FUNC_00000990();\n  FUN_00000e64();\n  FUN_0000459c();\n  FUN_00000f8c();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_00000f8c",
                "FUN_00000990",
                "FUN_0000459c",
                "FUN_00000e64",
                "FUN_00000db0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000a30": {
            "entrypoint": "0x00000a30",
            "current_name": "get_nmi_handler_address_00000a30",
            "code": "\nundefined * getNMIHandlerAddress_00000a30(void)\n\n{\n  int offset;\n  \n  FUN_00000f04(4,\"NMI HANDLER\");\n  return NMI_STACK_BASE + -*(int *)(offset + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_00000a30": "get_nmi_handler_address_00000a30",
                "in_r3": "offset",
                "&stack0xe000ffe0": "NMI_STACK_BASE"
            },
            "calling": [],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cc0": {
            "entrypoint": "0x00000cc0",
            "current_name": "disable_ir_qand_return_interrupt_status_00000cc0",
            "code": "\nundefined4 disableIRQandReturnInterruptStatus_00000cc0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 interruptStatus;\n  \n  FUN_00000f04(10,\"DUMMY HANDLER\");\n  interruptStatus = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    interruptStatus = isIRQinterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return interruptStatus;\n}\n\n",
            "renaming": {
                "FUN_00000cc0": "disable_ir_qand_return_interrupt_status_00000cc0",
                "bVar1": "isPrivilegedMode",
                "uVar2": "interruptStatus"
            },
            "calling": [
                "FUN_00000dc0"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cd0": {
            "entrypoint": "0x00000cd0",
            "current_name": "check_irq_interrupts_status_00000cd0",
            "code": "\nundefined4 checkIRQInterruptsStatus_00000cd0(void)\n\n{\n  bool isModePrivileged;\n  undefined4 irqInterruptsEnabled;\n  \n  irqInterruptsEnabled = 0;\n  isModePrivileged = (bool)isCurrentModePrivileged();\n  if (isModePrivileged) {\n    irqInterruptsEnabled = isIRQinterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return irqInterruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cd0": "check_irq_interrupts_status_00000cd0",
                "bVar1": "isModePrivileged",
                "uVar2": "irqInterruptsEnabled"
            },
            "calling": [
                "FUN_00000428",
                "FUN_00000f8c",
                "FUN_00000f04",
                "FUN_000010d4",
                "FUN_00001c84",
                "FUN_000024bc",
                "FUN_00002434",
                "FUN_00000e58",
                "FUN_00000794"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cf0": {
            "entrypoint": "0x00000cf0",
            "current_name": "check_irq_interrupts_00000cf0",
            "code": "\nundefined4 checkIRQInterrupts_00000cf0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 interruptsEnabled;\n  \n  enableIRQinterrupts();\n  interruptsEnabled = 0;\n  isPrivilegedMode = (bool)checkPrivilegedMode();\n  if (isPrivilegedMode) {\n    interruptsEnabled = checkInterruptsEnabled();\n  }\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cf0": "check_irq_interrupts_00000cf0",
                "uVar2": "interruptsEnabled",
                "bVar1": "isPrivilegedMode",
                "isCurrentModePrivileged": "checkPrivilegedMode",
                "isIRQinterruptsEnabled": "checkInterruptsEnabled"
            },
            "calling": [
                "FUN_00000930"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d0c": {
            "entrypoint": "0x00000d0c",
            "current_name": "enable_interrupts_with_privilege_check_00000d0c",
            "code": "\nvoid enableInterruptsWithPrivilegeCheck_00000d0c(uint interruptFlag)\n\n{\n  bool isPrivileged;\n  \n  isPrivileged = (bool)checkPrivilegedMode();\n  if (isPrivileged) {\n    enableInterrupts((interruptFlag & 1) == 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d0c": "enable_interrupts_with_privilege_check_00000d0c",
                "param_1": "interruptFlag",
                "bVar1": "isPrivileged",
                "isCurrentModePrivileged": "checkPrivilegedMode",
                "enableIRQinterrupts": "enableInterrupts"
            },
            "calling": [
                "FUN_00000428",
                "FUN_000010d4",
                "FUN_00001c84",
                "FUN_000024bc",
                "FUN_00002434"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d2a": {
            "entrypoint": "0x00000d2a",
            "current_name": "get_exception_number_00000d2a",
            "code": "\nuint getExceptionNumber_00000d2a(void)\n\n{\n  bool isPrivileged;\n  uint exceptionNumber;\n  \n  exceptionNumber = 0;\n  isPrivileged = (bool)isCurrentModePrivileged();\n  if (isPrivileged) {\n    exceptionNumber = getCurrentExceptionNumber();\n    exceptionNumber = exceptionNumber & 0x1f;\n  }\n  return exceptionNumber;\n}\n\n",
            "renaming": {
                "FUN_00000d2a": "get_exception_number_00000d2a",
                "bVar1": "isPrivileged",
                "uVar2": "exceptionNumber"
            },
            "calling": [
                "FUN_00000738"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d44": {
            "entrypoint": "0x00000d44",
            "current_name": "calculate_result_00000d44",
            "code": "\nint calculateResult_00000d44(uint inputValue,int multiplier)\n\n{\n  return multiplier * 4 + (inputValue & 0xf0000000 | (inputValue & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00000d44": "calculate_result_00000d44",
                "param_1": "inputValue",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00000d76"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d76": {
            "entrypoint": "0x00000d76",
            "current_name": "initialize_memory_00000d76",
            "code": "\nvoid initializeMemory_00000d76(undefined4 memoryPointer,undefined size)\n\n{\n  undefined4 *initializedPointer;\n  \n  initializedPointer = (undefined4 *)FUN_00000d44(memoryPointer,size);\n  *initializedPointer = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d76": "initialize_memory_00000d76",
                "param_1": "memoryPointer",
                "param_2": "size",
                "puVar1": "initializedPointer"
            },
            "calling": [
                "FUN_00000d9c"
            ],
            "called": [
                "FUN_00000d44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d9c": {
            "entrypoint": "0x00000d9c",
            "current_name": "initialize_device_00000d9c",
            "code": "\nvoid initialize_device_00000d9c(void)\n\n{\n  FUN_00000d76(0x40048040,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d9c": "initialize_device_00000d9c"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [
                "FUN_00000d76"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000db0": {
            "entrypoint": "0x00000db0",
            "current_name": "initialize_system_00000db0",
            "code": "\nvoid initializeSystem_00000db0(void)\n\n{\n  FUN_00000dcc();\n  FUN_00000d9c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000db0": "initialize_system_00000db0"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000d9c",
                "FUN_00000dcc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dc0": {
            "entrypoint": "0x00000dc0",
            "current_name": "execute_startup_routine_00000dc0",
            "code": "\nvoid execute_startup_routine_00000dc0(void)\n\n{\n  FUN_00000cc0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dc0": "execute_startup_routine_00000dc0"
            },
            "calling": [],
            "called": [
                "FUN_00000cc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dcc": {
            "entrypoint": "0x00000dcc",
            "current_name": "initialize_memory_00000dcc",
            "code": "\n\n\nvoid initializeMemory_00000dcc(void)\n\n{\n  _DAT_4005200e = 0xd928;\n  _DAT_40052000 = 0xd2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dcc": "initialize_memory_00000dcc"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000df4": {
            "entrypoint": "0x00000df4",
            "current_name": "initialize_communication_00000df4",
            "code": "\nvoid initializeCommunication_00000df4(void)\n\n{\n  FUN_000013b8(0,0x1c200,0x12b5,0x1fff0204);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000df4": "initialize_communication_00000df4"
            },
            "calling": [
                "FUN_00000410"
            ],
            "called": [
                "FUN_000013b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e14": {
            "entrypoint": "0x00000e14",
            "current_name": "initialize_connection_00000e14",
            "code": "\nundefined4 initializeConnection_00000e14(undefined4 connectionStatus,undefined4 connectionID)\n\n{\n  undefined4 result;\n  \n  result = FUN_000012e2(0x1fff0204,connectionStatus,connectionID);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000e14": "initialize_connection_00000e14",
                "param_1": "connectionStatus",
                "param_2": "connectionID",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00000490"
            ],
            "called": [
                "FUN_000012e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e38": {
            "entrypoint": "0x00000e38",
            "current_name": "execute_function_with_params_00000e38",
            "code": "\nundefined4 executeFunctionWithParams_00000e38(undefined4 inputParameter,undefined4 outputParameter)\n\n{\n  FUN_000015d0(0,inputParameter,outputParameter);\n  return outputParameter;\n}\n\n",
            "renaming": {
                "FUN_00000e38": "execute_function_with_params_00000e38",
                "param_1": "inputParameter",
                "param_2": "outputParameter"
            },
            "calling": [
                "FUN_00004dee"
            ],
            "called": [
                "FUN_000015d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e58": {
            "entrypoint": "0x00000e58",
            "current_name": "run_forever_00000e58",
            "code": "\nvoid run_forever_00000e58(void)\n\n{\n  FUN_00000cd0();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000e58": "run_forever_00000e58"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00000cd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e64": {
            "entrypoint": "0x00000e64",
            "current_name": "initialize_peripheral_00000e64",
            "code": "\n\n\nvoid initializePeripheral_00000e64(void)\n\n{\n  _DAT_40048038 = _DAT_40048038 | 0x200;\n  _DAT_40049048 = _DAT_40049048 & 0xfefff8ff;\n  FUN_00001274();\n  FUN_00001eea(0x2056,0x80);\n  FUN_00001eea(0x511a,0x80);\n  FUN_00001eea(0x2055,0x80);\n  FUN_00001ff6(0x2056);\n  FUN_00001ff6(0x511a);\n  FUN_00001ff6(0x2055);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000e64": "initialize_peripheral_00000e64"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00001eea",
                "FUN_00001274",
                "FUN_00001ff6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ed8": {
            "entrypoint": "0x00000ed8",
            "current_name": "initialize_data_00000ed8",
            "code": "\nvoid initializeData_00000ed8(void)\n\n{\n  undefined4 inputLinkRegister;\n  \n  FUN_00004c84(&DAT_00006f58,inputLinkRegister);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ed8": "initialize_data_00000ed8",
                "in_lr": "inputLinkRegister"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ef8": {
            "entrypoint": "0x00000ef8",
            "current_name": "FUNC_00000ef8",
            "code": "\nvoid FUNC_00000ef8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ef8": "FUNC_00000ef8"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00000f04": {
            "entrypoint": "0x00000f04",
            "current_name": "handle_kernel_panic_00000f04",
            "code": "\nvoid handleKernelPanic_00000f04(char panicType,undefined4 panicMessage)\n\n{\n  undefined4 stackFrame;\n  code *jumpTable;\n  undefined4 panicMsgLen;\n  char panicTypeCopy;\n  \n  panicMsgLen = panicMessage;\n  panicTypeCopy = panicType;\n  if (DAT_1fff0468 == 0) {\n    DAT_1fff0468 = 1;\n    if (panicType == '\\x03') {\n      FUN_00000ed8();\n    }\n    FUN_00004c84(\"*** RIOT kernel panic:\\n%s\\n\\n\",panicMsgLen);\n    FUN_0000211c();\n    FUN_00004c84(&DAT_00006f78);\n    FUN_00004c84(\"*** halted.\\n\\n\");\n  }\n  FUN_00000cd0();\n  FUNC_00000ef8();\n  jumpTable = (code *)0xf4d;\n  FUN_00000e58();\n  stackFrame = (int)&stackFrame + 1;\n  FUNC_00002400();\n  FUN_00004c84(\"main(): This is RIOT! (Version: 2018.04-vm-HEAD)\\n\");\n  FUN_000023a4();\n                    /* WARNING: Could not recover jumptable at 0x00000f7a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f04": "handle_kernel_panic_00000f04",
                "param_1": "panicType",
                "param_2": "panicMessage",
                "uStack_18": "stackFrame",
                "UNRECOVERED_JUMPTABLE": "jumpTable",
                "local_10": "panicMsgLen",
                "local_9": "panicTypeCopy"
            },
            "calling": [
                "FUN_00000a30",
                "FUN_000013b8",
                "FUN_00000cc0",
                "FUN_00003ec4",
                "FUN_00001034",
                "FUN_00000fec"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00004c84",
                "FUN_000023a4",
                "FUN_00000ef8",
                "FUN_00002400",
                "FUN_00000ed8",
                "FUN_0000211c",
                "FUN_00000e58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000f8c": {
            "entrypoint": "0x00000f8c",
            "current_name": "initialize_memory_00000f8c",
            "code": "\nvoid initializeMemory_00000f8c(void)\n\n{\n  uint result;\n  undefined4 *memoryLocation;\n  uint numberOfChunks;\n  int shiftedBits;\n  int *shiftedBitsAddress;\n  undefined4 constantValue;\n  undefined4 flagValue;\n  undefined4 startValue;\n  dword Elf32_Rel_value;\n  \n  FUN_00000cd0();\n  Elf32_Rel_value = Elf32_Rel_ARRAY_1fff0200[3].r_info;\n  startValue = 0;\n  flagValue = 0xf81;\n  FUN_000010d4(&DAT_1fff0a6c,0x100,0xf,0xc);\n  Elf32_Rel_value = Elf32_Rel_ARRAY_1fff0200[3].r_offset;\n  startValue = 0;\n  flagValue = 0xf5d;\n  numberOfChunks = 0xc;\n  FUN_000010d4(&DAT_1fff046c,0x600,7);\n  constantValue = 0xfd3;\n  result = FUN_00000930();\n  result = result >> 0x1e;\n  memoryLocation = (undefined4 *)(numberOfChunks * 0x100);\n  shiftedBits = (numberOfChunks >> 0x1d) << 0x11;\n  shiftedBitsAddress = &shiftedBits;\n  if ((result & result - 1) != 0) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *memoryLocation = 0;\n  memoryLocation[1] = 0;\n  memoryLocation[2] = result - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f8c": "initialize_memory_00000f8c",
                "uVar1": "result",
                "puVar2": "memoryLocation",
                "uVar3": "numberOfChunks",
                "iStack_24": "shiftedBits",
                "piStack_20": "shiftedBitsAddress",
                "uStack_1c": "constantValue",
                "local_18": "flagValue",
                "local_14": "startValue",
                "local_10": "Elf32_Rel_value"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000930",
                "FUN_000010d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000fec": {
            "entrypoint": "0x00000fec",
            "current_name": "initialize_array_00000fec",
            "code": "\nvoid initializeArray_00000fec(undefined4 *array,uint size)\n\n{\n  if ((size & size - 1) != 0) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *array = 0;\n  array[1] = 0;\n  array[2] = size - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000fec": "initialize_array_00000fec",
                "param_1": "array",
                "param_2": "size",
                "param_1[1]": "array[1]",
                "param_1[2]": "array[2]"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001034": {
            "entrypoint": "0x00001034",
            "current_name": "find_largest_less_than_00001034",
            "code": "\nvoid find_largest_less_than_00001034(int **array,int index)\n\n{\n  int **current_ptr;\n  \n  if (8 < *(byte *)(index + 4)) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  for (current_ptr = array;\n      (*current_ptr != (int *)0x0 && (*(byte *)((int)*current_ptr + -3) <= *(byte *)(index + 5)));\n      current_ptr = (int **)*current_ptr) {\n  }\n  *(int **)(index + 8) = *current_ptr;\n  *current_ptr = (int *)(int **)(index + 8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001034": "find_largest_less_than_00001034",
                "param_1": "array",
                "param_2": "index",
                "local_1c": "current_ptr"
            },
            "calling": [
                "FUN_00002434"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010a0": {
            "entrypoint": "0x000010a0",
            "current_name": "count_pointer_distance_000010a0",
            "code": "\nint countPointerDistance_000010a0(int *array)\n\n{\n  int *currentPointer;\n  \n  for (currentPointer = array; (int *)*currentPointer == currentPointer; currentPointer = currentPointer + 1) {\n  }\n  return (int)currentPointer - (int)array;\n}\n\n",
            "renaming": {
                "FUN_000010a0": "count_pointer_distance_000010a0",
                "param_1": "array",
                "local_c": "currentPointer"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010d4": {
            "entrypoint": "0x000010d4",
            "current_name": "process_data_000010d4",
            "code": "\nint processData_000010d4(uint inputSize,int bufferSize,byte byteToCheck,uint flags,undefined4 param5,\n                undefined4 param6,undefined4 param7)\n\n{\n  undefined4 result;\n  undefined4 returnValue;\n  int errorCode;\n  uint alignedSize;\n  undefined4 *alignedBuffer;\n  int bufferOffset;\n  uint alignedOffset;\n  uint endOffset;\n  short indexC;\n  short indexA;\n  \n  if (byteToCheck < 0x10) {\n    bufferOffset = bufferSize;\n    alignedOffset = inputSize;\n    if ((inputSize & 3) != 0) {\n      bufferOffset = 4 - (inputSize & 3);\n      alignedOffset = bufferOffset + inputSize;\n      bufferOffset = bufferSize - bufferOffset;\n    }\n    alignedSize = bufferOffset - 0x30U & 0xfffffffc;\n    alignedBuffer = (undefined4 *)(alignedSize + alignedOffset);\n    if ((flags & 8) == 0) {\n      *(uint *)alignedOffset = alignedOffset;\n    }\n    else {\n      for (endOffset = alignedOffset; endOffset < alignedSize + alignedOffset; endOffset = endOffset + 4) {\n        *(uint *)endOffset = endOffset;\n      }\n    }\n    result = FUN_00000cd0();\n    indexA = 0;\n    for (indexC = 1; indexC < 0x21; indexC = indexC + 1) {\n      if (*(int *)(&DAT_1fff0358 + indexC * 4) == 0) {\n        indexA = indexC;\n        break;\n      }\n    }\n    if (indexA == 0) {\n      FUN_00000d0c(result);\n      errorCode = -0x8b;\n    }\n    else {\n      *(undefined4 **)(&DAT_1fff0358 + indexA * 4) = alignedBuffer;\n      *(short *)((int)alignedBuffer + 6) = indexA;\n      returnValue = FUN_000007dc(param5,param6,alignedOffset,alignedSize);\n      *alignedBuffer = returnValue;\n      alignedBuffer[9] = alignedOffset;\n      alignedBuffer[0xb] = bufferSize;\n      alignedBuffer[10] = param7;\n      *(byte *)((int)alignedBuffer + 5) = byteToCheck;\n      *(undefined *)(alignedBuffer + 1) = 0;\n      alignedBuffer[2] = 0;\n      alignedBuffer[3] = 0;\n      alignedBuffer[4] = 0;\n      FUN_00000fec(alignedBuffer + 5,0);\n      alignedBuffer[8] = 0;\n      DAT_1fff0350 = DAT_1fff0350 + 1;\n      if ((flags & 1) == 0) {\n        FUN_00000698(alignedBuffer,10);\n        if ((flags & 4) == 0) {\n          FUN_00000d0c(result);\n          FUN_00000738(byteToCheck);\n          return (int)indexA;\n        }\n      }\n      else {\n        FUN_00000698(alignedBuffer,1);\n      }\n      FUN_00000d0c(result);\n      errorCode = (int)indexA;\n    }\n  }\n  else {\n    errorCode = -0x16;\n  }\n  return errorCode;\n}\n\n",
            "renaming": {
                "FUN_000010d4": "process_data_000010d4",
                "param_1": "inputSize",
                "param_2": "bufferSize",
                "param_3": "byteToCheck",
                "param_4": "flags",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "uVar1": "result",
                "uVar2": "returnValue",
                "iVar3": "errorCode",
                "uVar4": "alignedSize",
                "puVar5": "alignedBuffer",
                "local_30": "bufferOffset",
                "local_2c": "alignedOffset",
                "local_10": "endOffset",
                "local_c": "indexC",
                "local_a": "indexA"
            },
            "calling": [
                "FUN_00000f8c"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c",
                "FUN_000007dc",
                "FUN_00000738",
                "FUN_00000fec",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001274": {
            "entrypoint": "0x00001274",
            "current_name": "initialize_system_00001274",
            "code": "\nvoid initializeSystem_00001274(void)\n\n{\n  FUN_0000258c();\n  DAT_4007e000 = DAT_4007e000 | 0x28;\n  FUN_00001c84();\n  FUN_00002396();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001274": "initialize_system_00001274"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_0000258c",
                "FUN_00001c84",
                "FUN_00002396"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000129c": {
            "entrypoint": "0x0000129c",
            "current_name": "initialize_device_0000129c",
            "code": "\nvoid initializeDevice_0000129c(undefined4 device)\n\n{\n  FUN_00002434(device,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000129c": "initialize_device_0000129c",
                "param_1": "device"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002434"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012b4": {
            "entrypoint": "0x000012b4",
            "current_name": "process_data_000012b4",
            "code": "\nundefined4 processData_000012b4(int inputValue,undefined inputData)\n\n{\n  undefined4 result;\n  \n  result = FUN_00002364(inputValue + 4,inputData);\n  FUN_000024bc(inputValue);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000012b4": "process_data_000012b4",
                "param_1": "inputValue",
                "param_2": "inputData",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_000024bc",
                "FUN_00002364"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012e2": {
            "entrypoint": "0x000012e2",
            "current_name": "check_while_loop_000012e2",
            "code": "\nint check_while_loop_000012e2(int input_value,undefined4 param_2,undefined4 param_3)\n\n{\n  int result;\n  \n  while( true ) {\n    result = FUN_0000231c(input_value + 4,param_2,param_3);\n    if (result != 0) break;\n    FUN_0000129c(input_value);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000012e2": "check_while_loop_000012e2",
                "param_1": "input_value",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00000e14"
            ],
            "called": [
                "FUN_0000231c",
                "FUN_0000129c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001318": {
            "entrypoint": "0x00001318",
            "current_name": "set_bit_at_index_00001318",
            "code": "\nvoid setBitAtIndex_00001318(byte byteValue)\n\n{\n  *(int *)(((uint)(int)(char)byteValue >> 5) * 4 + -0x1fff1f00) = 1 << (byteValue & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001318": "set_bit_at_index_00001318",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_000014c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001348": {
            "entrypoint": "0x00001348",
            "current_name": "check_and_invoke_function_00001348",
            "code": "\nvoid checkAndInvokeFunction_00001348(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    FUN_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001348": "check_and_invoke_function_00001348"
            },
            "calling": [
                "FUN_00001628"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001360": {
            "entrypoint": "0x00001360",
            "current_name": "calculate_result_00001360",
            "code": "\nint calculateResult_00001360(uint input1,int input2)\n\n{\n  return input2 * 4 + (input1 & 0xf0000000 | (input1 & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001360": "calculate_result_00001360",
                "param_1": "input1",
                "param_2": "input2"
            },
            "calling": [
                "FUN_00001392"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001392": {
            "entrypoint": "0x00001392",
            "current_name": "set_pointer_to_value_00001392",
            "code": "\nvoid setPointerToValue_00001392(undefined4 pointer,undefined value)\n\n{\n  undefined4 *resultPointer;\n  \n  resultPointer = (undefined4 *)FUN_00001360(pointer,value);\n  *resultPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001392": "set_pointer_to_value_00001392",
                "param_1": "pointer",
                "param_2": "value",
                "puVar1": "resultPointer"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001360"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000013b8": {
            "entrypoint": "0x000013b8",
            "current_name": "update_data_000013b8",
            "code": "\nundefined4 updateData_000013b8(int index,undefined4 value,undefined4 data1,undefined4 data2)\n\n{\n  undefined4 returnValue;\n  \n  if (index != 0) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *(undefined4 *)(&DAT_1fff0b6c + index * 8) = data1;\n  *(undefined4 *)(&DAT_1fff0b70 + index * 8) = data2;\n  FUN_00001448(index);\n  FUN_00001392(*(undefined4 *)(&DAT_00006ffc + index * 0x20),\n               *(undefined *)(index * 0x20 + 0x7000));\n  if ((&DAT_00007002)[index * 0x20] == '\\0') {\n    FUN_000014c4(index,value);\n    returnValue = 0;\n  }\n  else {\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000013b8": "update_data_000013b8",
                "param_1": "index",
                "param_2": "value",
                "param_3": "data1",
                "param_4": "data2",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00000df4"
            ],
            "called": [
                "FUN_00000f04",
                "FUN_00001448",
                "FUN_000014c4",
                "FUN_00001392"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001448": {
            "entrypoint": "0x00001448",
            "current_name": "process_data_00001448",
            "code": "\nvoid processData_00001448(int index)\n\n{\n  if (*(short *)(&DAT_00006fec + index * 0x20) != -1) {\n    FUN_00001f80(*(undefined2 *)(&DAT_00006fec + index * 0x20),\n                 *(undefined4 *)(&DAT_00006ff0 + index * 0x20));\n  }\n  if (*(short *)(&DAT_00006fee + index * 0x20) != -1) {\n    FUN_00001f80(*(undefined2 *)(&DAT_00006fee + index * 0x20),\n                 *(undefined4 *)(&DAT_00006ff4 + index * 0x20));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001448": "process_data_00001448",
                "param_1": "index"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001f80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000014c4": {
            "entrypoint": "0x000014c4",
            "current_name": "modify_data_000014c4",
            "code": "\nvoid modifyData_000014c4(int index,uint value)\n\n{\n  byte *dataPtr;\n  uint length;\n  uint divisor;\n  \n  dataPtr = *(byte **)(&DAT_00006fe4 + index * 0x20);\n  length = *(uint *)(&DAT_00006fe8 + index * 0x20);\n  dataPtr[3] = dataPtr[3] & 0xf3;\n  dataPtr[2] = (&DAT_00007001)[index * 0x20];\n  divisor = length / (value << 4);\n  *dataPtr = (byte)(divisor >> 8) & 0x1f;\n  dataPtr[1] = (byte)divisor;\n  dataPtr[10] = (byte)((length << 2) / value + 1 >> 1) & 0x1f;\n  dataPtr[0x10] = dataPtr[0x10] | 0x88;\n  if ((dataPtr[0x10] & 0x70) == 0) {\n    dataPtr[0x13] = 0;\n  }\n  else {\n    dataPtr[0x13] = (char)(2 << (dataPtr[0x10] >> 4 & 7)) - 1;\n  }\n  dataPtr[0x15] = 1;\n  dataPtr[0x11] = 0xc0;\n  dataPtr[3] = dataPtr[3] | 0x2c;\n  FUN_00001318((int)(char)(&DAT_00006ff8)[index * 0x20]);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000014c4": "modify_data_000014c4",
                "param_1": "index",
                "param_2": "value",
                "pbVar1": "dataPtr",
                "uVar2": "length",
                "uVar3": "divisor"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000015d0": {
            "entrypoint": "0x000015d0",
            "current_name": "copy_data_000015d0",
            "code": "\nvoid copyData_000015d0(int index,int sourceAddress,uint length)\n\n{\n  int dataAddress;\n  uint counter;\n  \n  dataAddress = *(int *)(&DAT_00006fe4 + index * 0x20);\n  for (counter = 0; counter < length; counter = counter + 1) {\n    do {\n    } while (-1 < *(char *)(dataAddress + 4));\n    *(undefined *)(dataAddress + 7) = *(undefined *)(counter + sourceAddress);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000015d0": "copy_data_000015d0",
                "param_1": "index",
                "param_2": "sourceAddress",
                "param_3": "length",
                "iVar1": "dataAddress",
                "local_c": "counter"
            },
            "calling": [
                "FUN_00000e38"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001628": {
            "entrypoint": "0x00001628",
            "current_name": "execute_function_based_on_condition_00001628",
            "code": "\nvoid executeFunctionBasedOnCondition_00001628(int index)\n\n{\n  if (((*(byte *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 4) & 0x20) != 0) &&\n     (*(int *)(&DAT_1fff0b6c + index * 8) != 0)) {\n    (**(code **)(&DAT_1fff0b6c + index * 8))\n              (*(undefined4 *)(&DAT_1fff0b70 + index * 8),\n               *(undefined *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 7));\n  }\n  FUN_00001348();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001628": "execute_function_based_on_condition_00001628",
                "param_1": "index"
            },
            "calling": [
                "FUN_00001688"
            ],
            "called": [
                "FUN_00001348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001688": {
            "entrypoint": "0x00001688",
            "current_name": "initialize_device_00001688",
            "code": "\nvoid initializeDevice_00001688(void)\n\n{\n  FUN_00001628(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001688": "initialize_device_00001688"
            },
            "calling": [],
            "called": [
                "FUN_00001628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001696": {
            "entrypoint": "0x00001696",
            "current_name": "calculate_result_00001696",
            "code": "\nint calculateResult_00001696(uint inputValue,int multiplier)\n\n{\n  return multiplier * 4 + (inputValue & 0xf0000000 | (inputValue & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001696": "calculate_result_00001696",
                "param_1": "inputValue",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_000016ec",
                "FUN_000016c8",
                "FUN_00001710"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016c8": {
            "entrypoint": "0x000016c8",
            "current_name": "initialize_flag_000016c8",
            "code": "\nvoid initializeFlag_000016c8(undefined4 flagPtr,undefined undefinedParam)\n\n{\n  undefined4 *flagPtrNew;\n  \n  flagPtrNew = (undefined4 *)FUN_00001696(flagPtr,undefinedParam);\n  *flagPtrNew = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016c8": "initialize_flag_000016c8",
                "param_1": "flagPtr",
                "param_2": "undefinedParam",
                "puVar1": "flagPtrNew"
            },
            "calling": [
                "FUN_000017dc"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016ec": {
            "entrypoint": "0x000016ec",
            "current_name": "set_flag_000016ec",
            "code": "\nvoid setFlag_000016ec(undefined4 flagPointer,undefined undefinedParam)\n\n{\n  undefined *flagAddress;\n  \n  flagAddress = (undefined *)FUN_00001696(flagPointer,undefinedParam);\n  *flagAddress = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016ec": "set_flag_000016ec",
                "param_1": "flagPointer",
                "param_2": "undefinedParam",
                "puVar1": "flagAddress"
            },
            "calling": [
                "FUN_00001a60",
                "FUN_00001778",
                "FUN_0000182c",
                "FUN_00001a3c",
                "FUN_00001a18"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001710": {
            "entrypoint": "0x00001710",
            "current_name": "clear_memory_00001710",
            "code": "\nvoid clearMemory_00001710(undefined4 address,undefined value)\n\n{\n  undefined *pointer;\n  \n  pointer = (undefined *)FUN_00001696(address,value);\n  *pointer = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001710": "clear_memory_00001710",
                "param_1": "address",
                "param_2": "value",
                "puVar1": "pointer"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_00001a60",
                "FUN_00001778",
                "FUN_0000182c",
                "FUN_00001734",
                "FUN_00001bb8",
                "FUN_00001960",
                "FUN_000018bc"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001734": {
            "entrypoint": "0x00001734",
            "current_name": "initialize_data_00001734",
            "code": "\nvoid initializeData_00001734(void)\n\n{\n  FUN_00001710(&DAT_40064005,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001734": "initialize_data_00001734"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_00001a3c",
                "FUN_00001a18"
            ],
            "called": [
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001748": {
            "entrypoint": "0x00001748",
            "current_name": "update_register_00001748",
            "code": "\nvoid updateRegister_00001748(byte input)\n\n{\n  DAT_40064003 = input | DAT_40064003 & 0x1f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001748": "update_register_00001748",
                "param_1": "input"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_0000191c",
                "FUN_00001bb8",
                "FUN_00001960",
                "FUN_000018bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001778": {
            "entrypoint": "0x00001778",
            "current_name": "update_flags_and_call_function_00001778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000179c) */\n/* WARNING: Removing unreachable block (ram,0x000017b2) */\n/* WARNING: Removing unreachable block (ram,0x000017c0) */\n\nvoid updateFlagsAndCallFunction_00001778(void)\n\n{\n  DAT_40064001 = DAT_40064001 & 0xcf | 0x20;\n  FUN_00001710(&DAT_40064001,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001778": "update_flags_and_call_function_00001778"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_0000191c"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000017dc": {
            "entrypoint": "0x000017dc",
            "current_name": "initialize_system_000017dc",
            "code": "\n\n\nvoid initializeSystem_000017dc(void)\n\n{\n  FUN_000016c8(&DAT_4004803c,0x1d);\n  if ((_DAT_4003d010 & 0x100) == 0) {\n    _DAT_4003d010 = 0x104;\n  }\n  _DAT_40047000 = _DAT_40047000 & 0xfff3ffff | 0x80000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000017dc": "initialize_system_000017dc"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000182c": {
            "entrypoint": "0x0000182c",
            "current_name": "initialize_data_0000182c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000187c) */\n/* WARNING: Removing unreachable block (ram,0x0000186a) */\n/* WARNING: Removing unreachable block (ram,0x00001898) */\n\nvoid initializeData_0000182c(void)\n\n{\n  DAT_40064008 = DAT_40064008 & 0xd0;\n  FUN_000016ec(&DAT_40064001,0);\n  FUN_00001710(&DAT_40064000,1);\n  FUN_00001710(&DAT_40064000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000182c": "initialize_data_0000182c"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000018bc": {
            "entrypoint": "0x000018bc",
            "current_name": "initialize_hardware_000018bc",
            "code": "\nvoid initializeHardware_000018bc(void)\n\n{\n  FUN_00001748(0xa0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  FUN_00001710(&DAT_40064001,1);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000018bc": "initialize_hardware_000018bc"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000191c": {
            "entrypoint": "0x0000191c",
            "current_name": "initialize_data_0000191c",
            "code": "\nvoid initializeData_0000191c(void)\n\n{\n  FUN_00001778();\n  FUN_00001748(0x40);\n  DAT_40064000 = DAT_40064000 & 0x3b;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000191c": "initialize_data_0000191c"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001778",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001960": {
            "entrypoint": "0x00001960",
            "current_name": "initialize_hardware_00001960",
            "code": "\nvoid initializeHardware_00001960(void)\n\n{\n  FUN_00001748(0xa0);\n  FUN_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x44;\n  do {\n  } while ((DAT_40064006 & 0xc) != 4);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  DAT_1fff0b74 = 2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001960": "initialize_hardware_00001960"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000019c0": {
            "entrypoint": "0x000019c0",
            "current_name": "initialize_system_000019c0",
            "code": "\nvoid initializeSystem_000019c0(void)\n\n{\n  FUN_00001778();\n  FUN_00001748(0x40);\n  FUN_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  FUN_00001734();\n  DAT_1fff0b74 = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000019c0": "initialize_system_000019c0"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001778",
                "FUN_00001748",
                "FUN_00001734",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a18": {
            "entrypoint": "0x00001a18",
            "current_name": "initialize_data_00001a18",
            "code": "\nvoid initializeData_00001a18(void)\n\n{\n  FUN_000016ec(&DAT_40064001,1);\n  FUN_00001734();\n  DAT_1fff0b74 = 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a18": "initialize_data_00001a18"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a3c": {
            "entrypoint": "0x00001a3c",
            "current_name": "initialize_data_00001a3c",
            "code": "\nvoid initializeData_00001a3c(void)\n\n{\n  FUN_000016ec(&DAT_40064001,1);\n  FUN_00001734();\n  DAT_1fff0b74 = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a3c": "initialize_data_00001a3c"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a60": {
            "entrypoint": "0x00001a60",
            "current_name": "initialize_hardware_00001a60",
            "code": "\nvoid initializeHardware_00001a60(void)\n\n{\n  FUN_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  FUN_000016ec(&DAT_40064005,6);\n  do {\n  } while ((DAT_40064006 & 0x20) == 0);\n  do {\n  } while ((DAT_40064006 & 0x40) == 0);\n  DAT_1fff0b74 = 6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a60": "initialize_hardware_00001a60"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ad4": {
            "entrypoint": "0x00001ad4",
            "current_name": "initialize_data_00001ad4",
            "code": "\nvoid initializeData_00001ad4(void)\n\n{\n  DAT_40064000 = DAT_40064000 & 0x3f;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0xc);\n  DAT_1fff0b74 = 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ad4": "initialize_data_00001ad4"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001b10": {
            "entrypoint": "0x00001b10",
            "current_name": "process_byte_00001b10",
            "code": "\nundefined4 processByte_00001b10(byte inputByte)\n\n{\n  undefined4 returnValue;\n  \n  if (inputByte < 8) {\n    do {\n      switch((&DAT_00007004)[(uint)inputByte + (uint)DAT_1fff0b74 * 8]) {\n      case 0:\n        FUN_000018bc();\n        break;\n      case 1:\n        FUN_0000191c();\n        break;\n      case 2:\n        FUN_00001960();\n        break;\n      case 3:\n        FUN_000019c0();\n        break;\n      case 4:\n        FUN_00001a18();\n        break;\n      case 5:\n        FUN_00001a3c();\n        break;\n      case 6:\n        FUN_00001a60();\n        break;\n      case 7:\n        FUN_00001ad4();\n        break;\n      default:\n        return 0xffffffff;\n      }\n    } while (inputByte != DAT_1fff0b74);\n    returnValue = 0;\n  }\n  else {\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00001b10": "process_byte_00001b10",
                "param_1": "inputByte",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001ad4",
                "FUN_000019c0",
                "FUN_00001a60",
                "FUN_0000191c",
                "FUN_00001a3c",
                "FUN_00001960",
                "FUN_00001a18",
                "FUN_000018bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001bb8": {
            "entrypoint": "0x00001bb8",
            "current_name": "initialize_system_00001bb8",
            "code": "\nvoid initializeSystem_00001bb8(void)\n\n{\n  if ((DAT_40064001 & 2) != 0) {\n    FUN_00001710(&DAT_40064001,1);\n  }\n  if ((DAT_40064005 & 0x40) != 0) {\n    if ((DAT_40064000 & 0xc0) == 0) {\n      DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n      do {\n      } while ((DAT_40064006 & 0xc) != 8);\n    }\n    FUN_00001710(&DAT_40064005,6);\n    do {\n    } while ((DAT_40064006 & 0x20) != 0);\n  }\n  FUN_00001748(0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001bb8": "initialize_system_00001bb8"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001c84": {
            "entrypoint": "0x00001c84",
            "current_name": "initialize_system_00001c84",
            "code": "\n\n\nvoid initializeSystem_00001c84(void)\n\n{\n  undefined4 result;\n  \n  result = FUN_00000cd0();\n  FUN_00001bb8();\n  _DAT_40048044 = 0x220000;\n  DAT_4006400c = 0;\n  DAT_40064000 = DAT_40064000 & 199 | 0x38;\n  DAT_40064004 = 0x13;\n  DAT_40064005 = 0;\n  FUN_0000182c();\n  FUN_000017dc();\n  FUN_00001b10(7);\n  FUN_00000d0c(result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001c84": "initialize_system_00001c84",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_000017dc",
                "FUN_00000d0c",
                "FUN_0000182c",
                "FUN_00001bb8",
                "FUN_00001b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001cf0": {
            "entrypoint": "0x00001cf0",
            "current_name": "check_if_data_exists_00001cf0",
            "code": "\nvoid checkIfDataExists_00001cf0(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    FUN_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001cf0": "check_if_data_exists_00001cf0"
            },
            "calling": [
                "FUN_00002028"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d08": {
            "entrypoint": "0x00001d08",
            "current_name": "calculate_offset_00001d08",
            "code": "\nint calculate_offset_00001d08(uint address,int multiplier)\n\n{\n  return multiplier * 4 + (address & 0xf0000000 | (address & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001d08": "calculate_offset_00001d08",
                "param_1": "address",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001d3a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d3a": {
            "entrypoint": "0x00001d3a",
            "current_name": "set_flag_to_true_00001d3a",
            "code": "\nvoid setFlagToTrue_00001d3a(undefined4 input1,undefined input2)\n\n{\n  undefined4 *resultPointer;\n  \n  resultPointer = (undefined4 *)FUN_00001d08(input1,input2);\n  *resultPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001d3a": "set_flag_to_true_00001d3a",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "resultPointer"
            },
            "calling": [
                "FUN_00001ddc"
            ],
            "called": [
                "FUN_00001d08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d5e": {
            "entrypoint": "0x00001d5e",
            "current_name": "get_modified_value_00001d5e",
            "code": "\nuint getModifiedValue_00001d5e(ushort inputValue)\n\n{\n  return inputValue & 0x7000 | 0x40048000;\n}\n\n",
            "renaming": {
                "FUN_00001d5e": "get_modified_value_00001d5e",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001eea"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d80": {
            "entrypoint": "0x00001d80",
            "current_name": "apply_mask_00001d80",
            "code": "\nuint applyMask_00001d80(ushort inputValue)\n\n{\n  return inputValue & 0x1c0 | 0x400ff000;\n}\n\n",
            "renaming": {
                "FUN_00001d80": "apply_mask_00001d80",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001ff6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001da2": {
            "entrypoint": "0x00001da2",
            "current_name": "extract_bits_00001da2",
            "code": "\nushort extractBits_00001da2(ushort inputValue)\n\n{\n  return inputValue >> 6 & 7;\n}\n\n",
            "renaming": {
                "FUN_00001da2": "extract_bits_00001da2",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001ddc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001dc0": {
            "entrypoint": "0x00001dc0",
            "current_name": "truncate_to_six_bits_00001dc0",
            "code": "\nushort truncateToSixBits_00001dc0(ushort inputValue)\n\n{\n  return inputValue & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_00001dc0": "truncate_to_six_bits_00001dc0",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001eea",
                "FUN_00001ff6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ddc": {
            "entrypoint": "0x00001ddc",
            "current_name": "update_data_00001ddc",
            "code": "\nvoid updateData_00001ddc(undefined2 inputData)\n\n{\n  char processedData;\n  \n  processedData = FUN_00001da2(inputData);\n  FUN_00001d3a(&DAT_40048038,processedData + '\\t');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ddc": "update_data_00001ddc",
                "param_1": "inputData",
                "cVar1": "processedData"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001d3a",
                "FUN_00001da2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e0c": {
            "entrypoint": "0x00001e0c",
            "current_name": "extract_bits_00001e0c",
            "code": "\nuint extract_bits_00001e0c(int offset,uint data)\n\n{\n  return *(uint *)(&DAT_1fff0bd8 + (((int)data >> 3) + offset * 4) * 4) >> ((data & 7) << 2)\n         & 0xf;\n}\n\n",
            "renaming": {
                "FUN_00001e0c": "extract_bits_00001e0c",
                "param_1": "offset",
                "param_2": "data"
            },
            "calling": [
                "FUN_00002028",
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e44": {
            "entrypoint": "0x00001e44",
            "current_name": "update_bit_value_00001e44",
            "code": "\nvoid updateBitValue_00001e44(int index,uint bitOffset,int newValue)\n\n{\n  int wordOffset;\n  \n  wordOffset = (int)bitOffset >> 3;\n  *(uint *)(&DAT_1fff0bd8 + (wordOffset + index * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (wordOffset + index * 4) * 4) & ~(0xf << ((bitOffset & 7) << 2));\n  *(uint *)(&DAT_1fff0bd8 + (wordOffset + index * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (wordOffset + index * 4) * 4) | newValue << ((bitOffset & 7) << 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001e44": "update_bit_value_00001e44",
                "param_1": "index",
                "param_2": "bitOffset",
                "param_3": "newValue",
                "iVar1": "wordOffset"
            },
            "calling": [
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ec4": {
            "entrypoint": "0x00001ec4",
            "current_name": "process_data_00001ec4",
            "code": "\nvoid processData_00001ec4(undefined4 input1,undefined4 input2)\n\n{\n  undefined4 output1;\n  \n  output1 = FUN_00001e0c(input1,input2);\n  FUN_00001e44(input1,input2,output1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ec4": "process_data_00001ec4",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "output1"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001e0c",
                "FUN_00001e44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001eea": {
            "entrypoint": "0x00001eea",
            "current_name": "update_data_00001eea",
            "code": "\nundefined4 updateData_00001eea(undefined2 param,byte byte)\n\n{\n  uint index;\n  int dataPtr;\n  int dataIndex;\n  \n  FUN_00001f80(param,0);\n  if ((char)byte < '\\0') {\n    index = FUN_00001dc0(param);\n    dataPtr = FUN_00001d80(param);\n    *(uint *)(dataPtr + 0x14) = *(uint *)(dataPtr + 0x14) | 1 << (index & 0xff);\n  }\n  else {\n    index = FUN_00001dc0(param);\n    dataPtr = FUN_00001d80(param);\n    *(uint *)(dataPtr + 0x14) = *(uint *)(dataPtr + 0x14) & ~(1 << (index & 0xff));\n  }\n  dataPtr = FUN_00001d5e(param);\n  dataIndex = FUN_00001dc0(param);\n  *(uint *)(dataPtr + dataIndex * 4) = byte & 0x23 | 0x100;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00001eea": "update_data_00001eea",
                "param_1": "param",
                "param_2": "byte",
                "uVar1": "index",
                "iVar2": "dataPtr",
                "iVar3": "dataIndex"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001f80",
                "FUN_00001d80",
                "FUN_00001d5e",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001f80": {
            "entrypoint": "0x00001f80",
            "current_name": "update_data_00001f80",
            "code": "\nvoid updateData_00001f80(undefined2 param1,undefined4 param2)\n\n{\n  int var1;\n  int var2;\n  undefined4 temp1;\n  undefined4 temp2;\n  uint dataValue;\n  \n  FUN_00001ddc(param1);\n  var1 = FUN_00001d5e(param1);\n  var2 = FUN_00001dc0(param1);\n  dataValue = *(uint *)(var1 + var2 * 4);\n  var1 = FUN_00001d5e(param1);\n  var2 = FUN_00001dc0(param1);\n  *(undefined4 *)(var1 + var2 * 4) = param2;\n  if ((dataValue & 0xf0000) != 0) {\n    temp1 = FUN_00001da2(param1);\n    temp2 = FUN_00001dc0(param1);\n    FUN_00001ec4(temp1,temp2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001f80": "update_data_00001f80",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "var1",
                "iVar2": "var2",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "dataValue"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001448"
            ],
            "called": [
                "FUN_00001ddc",
                "FUN_00001d5e",
                "FUN_00001ec4",
                "FUN_00001da2",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ff6": {
            "entrypoint": "0x00001ff6",
            "current_name": "set_bit_in_int_00001ff6",
            "code": "\nvoid setBitInInt_00001ff6(undefined2 input)\n\n{\n  uint bitPosition;\n  int result;\n  \n  bitPosition = FUN_00001dc0(input);\n  result = FUN_00001d80(input);\n  *(int *)(result + 4) = 1 << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ff6": "set_bit_in_int_00001ff6",
                "param_1": "input",
                "uVar1": "bitPosition",
                "iVar2": "result"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001d80",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002028": {
            "entrypoint": "0x00002028",
            "current_name": "process_data_00002028",
            "code": "\nvoid processData_00002028(int dataAddress,undefined4 param2)\n\n{\n  int result;\n  uint mask;\n  uint index;\n  \n  mask = *(uint *)(dataAddress + 0xa0);\n  for (index = 0; (int)index < 0x20; index = index + 1) {\n    if (((mask & 1 << (index & 0xff)) != 0) &&\n       ((*(uint *)(dataAddress + index * 4) & 0xf0000) != 0)) {\n      *(int *)(dataAddress + 0xa0) = 1 << (index & 0xff);\n      result = FUN_00001e0c(param2,index);\n      (**(code **)(&DAT_1fff0b78 + result * 0xc))(*(undefined4 *)(&DAT_1fff0b7c + result * 0xc));\n    }\n  }\n  FUN_00001cf0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002028": "process_data_00002028",
                "param_1": "dataAddress",
                "param_2": "param2",
                "iVar1": "result",
                "uVar2": "mask",
                "local_c": "index"
            },
            "calling": [
                "FUN_000020e0",
                "FUN_00002108",
                "FUN_000020cc",
                "FUN_000020f4",
                "FUN_000020b8"
            ],
            "called": [
                "FUN_00001cf0",
                "FUN_00001e0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020b8": {
            "entrypoint": "0x000020b8",
            "current_name": "initialize_memory_000020b8",
            "code": "\nvoid initializeMemory_000020b8(void)\n\n{\n  FUN_00002028(0x40049000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020b8": "initialize_memory_000020b8"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020cc": {
            "entrypoint": "0x000020cc",
            "current_name": "initialize_hardware_000020cc",
            "code": "\nvoid initializeHardware_000020cc(void)\n\n{\n  FUN_00002028(0x4004a000,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020cc": "initialize_hardware_000020cc"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020e0": {
            "entrypoint": "0x000020e0",
            "current_name": "initialize_memory_000020e0",
            "code": "\nvoid initializeMemory_000020e0(void)\n\n{\n  FUN_00002028(0x4004b000,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020e0": "initialize_memory_000020e0"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020f4": {
            "entrypoint": "0x000020f4",
            "current_name": "initialize_memory_000020f4",
            "code": "\nvoid initializeMemory_000020f4(void)\n\n{\n  FUN_00002028(0x4004c000,3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020f4": "initialize_memory_000020f4"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002108": {
            "entrypoint": "0x00002108",
            "current_name": "initialize_device_00002108",
            "code": "\nvoid initializeDevice_00002108(void)\n\n{\n  FUN_00002028(0x4004d000,4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002108": "initialize_device_00002108"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000211c": {
            "entrypoint": "0x0000211c",
            "current_name": "print_process_information_0000211c",
            "code": "\nvoid printProcessInformation_0000211c(void)\n\n{\n  int iVar1;\n  undefined2 formatString;\n  int stackSize;\n  int stackAddress;\n  dword baseAddress;\n  uint index;\n  undefined4 *functionPointer;\n  undefined4 stackBase;\n  undefined4 stackUsed;\n  int totalStackUsed;\n  short loopCounter;\n  int totalStackSize;\n  int local_14;\n  \n  formatString = 0x515f;\n  local_14 = 0;\n  totalStackSize = 0;\n  FUN_00004c84(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",\n               &DAT_000070b8,\"state\");\n  totalStackUsed = FUN_000008b8();\n  stackUsed = FUN_0000091c();\n  stackBase = FUN_00000900();\n  FUN_00004c84(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n               totalStackUsed,stackUsed,stackBase);\n  local_14 = local_14 + 0x200;\n  if (0 < totalStackUsed) {\n    totalStackSize = totalStackUsed + totalStackSize;\n  }\n  for (loopCounter = 1; loopCounter < 0x21; loopCounter = loopCounter + 1) {\n    functionPointer = *(undefined4 **)(&DAT_1fff0358 + loopCounter * 4);\n    if (functionPointer != (undefined4 *)0x0) {\n      index = (uint)*(byte *)(functionPointer + 1);\n      baseAddress = (&Elf32_Rel_ARRAY_1fff0200[4].r_offset)[index];\n      stackAddress = (int)&formatString + (uint)(8 < index);\n      stackSize = functionPointer[0xb];\n      local_14 = stackSize + local_14;\n      iVar1 = FUN_000010a0(functionPointer[9]);\n      stackSize = stackSize - iVar1;\n      totalStackSize = stackSize + totalStackSize;\n      FUN_00004c84(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n                   (int)*(short *)((int)functionPointer + 6),functionPointer[10],baseAddress,stackAddress,\n                   *(undefined *)((int)functionPointer + 5),functionPointer[0xb],stackSize,functionPointer[9],*functionPointer);\n    }\n  }\n  FUN_00004c84(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,\n               &DAT_00007190,local_14,totalStackSize);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000211c": "print_process_information_0000211c",
                "local_40": "formatString",
                "local_3c": "stackSize",
                "local_38": "stackAddress",
                "local_34": "baseAddress",
                "local_30": "index",
                "local_2c": "functionPointer",
                "local_28": "stackBase",
                "local_24": "stackUsed",
                "local_20": "totalStackUsed",
                "local_1a": "loopCounter",
                "local_18": "totalStackSize"
            },
            "calling": [
                "FUN_00000f04",
                "FUN_00002eb4"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_0000091c",
                "FUN_000010a0",
                "FUN_00000900",
                "FUN_000008b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002270": {
            "entrypoint": "0x00002270",
            "current_name": "check_equality_00002270",
            "code": "\nundefined checkEquality_00002270(int input)\n\n{\n  undefined result;\n  int value1;\n  bool isEqual;\n  \n  value1 = *(int *)(input + 0xc);\n  isEqual = *(int *)(input + 8) == value1;\n  if (isEqual) {\n    value1 = 1;\n  }\n  result = (undefined)value1;\n  if (!isEqual) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002270": "check_equality_00002270",
                "param_1": "input",
                "uVar1": "result",
                "iVar2": "value1",
                "bVar3": "isEqual"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002294": {
            "entrypoint": "0x00002294",
            "current_name": "check_if_sum_is_equal_00002294",
            "code": "\nundefined checkIfSumIsEqual_00002294(int array)\n\n{\n  undefined uVar1;\n  int sum;\n  bool isSumEqual;\n  \n  sum = *(int *)(array + 4);\n  isSumEqual = *(int *)(array + 0xc) - *(int *)(array + 8) == sum;\n  if (isSumEqual) {\n    sum = 1;\n  }\n  uVar1 = (undefined)sum;\n  if (!isSumEqual) {\n    uVar1 = 0;\n  }\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_00002294": "check_if_sum_is_equal_00002294",
                "param_1": "array",
                "iVar2": "sum",
                "bVar3": "isSumEqual"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022be": {
            "entrypoint": "0x000022be",
            "current_name": "update_array_element_000022be",
            "code": "\nvoid updateArrayElement_000022be(int *array,undefined newElement)\n\n{\n  uint currentValue;\n  \n  currentValue = array[3];\n  array[3] = currentValue + 1;\n  *(undefined *)((currentValue & array[1] - 1U) + *array) = newElement;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000022be": "update_array_element_000022be",
                "param_1": "array",
                "param_2": "newElement",
                "uVar1": "currentValue"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022f0": {
            "entrypoint": "0x000022f0",
            "current_name": "increase_and_return_value_000022f0",
            "code": "\nundefined increase_and_return_value_000022f0(int *array)\n\n{\n  uint current_value;\n  \n  current_value = array[2];\n  array[2] = current_value + 1;\n  return *(undefined *)((current_value & array[1] - 1U) + *array);\n}\n\n",
            "renaming": {
                "FUN_000022f0": "increase_and_return_value_000022f0",
                "param_1": "array",
                "uVar1": "current_value"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000231c": {
            "entrypoint": "0x0000231c",
            "current_name": "copy_and_count_0000231c",
            "code": "\nint copyAndCount_0000231c(undefined4 param,undefined *destination,int length)\n\n{\n  undefined byteValue;\n  int result;\n  undefined *destPtr;\n  int remaining;\n  \n  destPtr = destination;\n  remaining = length;\n  while ((remaining != 0 && (result = FUN_00002270(param), result == 0))) {\n    byteValue = FUN_000022f0(param);\n    *destPtr = byteValue;\n    remaining = remaining + -1;\n    destPtr = destPtr + 1;\n  }\n  return length - remaining;\n}\n\n",
            "renaming": {
                "FUN_0000231c": "copy_and_count_0000231c",
                "param_1": "param",
                "param_2": "destination",
                "param_3": "length",
                "uVar1": "byteValue",
                "iVar2": "result",
                "local_20": "destPtr",
                "local_14": "remaining"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002270",
                "FUN_000022f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002364": {
            "entrypoint": "0x00002364",
            "current_name": "check_status_00002364",
            "code": "\nundefined4 checkStatus_00002364(undefined4 inputData,undefined additionalData)\n\n{\n  int status;\n  undefined4 result;\n  \n  status = FUN_00002294(inputData);\n  if (status == 0) {\n    FUN_000022be(inputData,additionalData);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002364": "check_status_00002364",
                "param_1": "inputData",
                "param_2": "additionalData",
                "iVar1": "status",
                "uVar2": "result"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_00002294",
                "FUN_000022be"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002396": {
            "entrypoint": "0x00002396",
            "current_name": "initialize_system_00002396",
            "code": "\nvoid initialize_system_00002396(void)\n\n{\n  FUN_000025f4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002396": "initialize_system_00002396"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_000025f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023a4": {
            "entrypoint": "0x000023a4",
            "current_name": "initialize_system_000023a4",
            "code": "\nundefined4 initializeSystem_000023a4(void)\n\n{\n  undefined4 uVar1;\n  undefined buffer [128];\n  \n  FUN_000023d0(0);\n  FUN_00004db8(\"Welcome to RIOT!\");\n  uVar1 = FUN_00002e6c(0,buffer,0x80);\n  triggerInterrupt(0x3f);\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_000023a4": "initialize_system_000023a4",
                "auStack_88": "buffer",
                "software_interrupt": "triggerInterrupt"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_000023d0",
                "FUN_00002e6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023c8": {
            "entrypoint": "0x000023c8",
            "current_name": "send_software_interrupt_000023c8",
            "code": "\nvoid sendSoftwareInterrupt_000023c8(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000023c8": "send_software_interrupt_000023c8"
            },
            "calling": [
                "FUN_000023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023d0": {
            "entrypoint": "0x000023d0",
            "current_name": "check_initialization_000023d0",
            "code": "\nundefined4 checkInitialization_000023d0(undefined4 inputParam)\n\n{\n  undefined4 returnValue;\n  \n  if (DAT_1fff0d98 == 0) {\n    returnValue = FUN_000023c8(1,inputParam,0);\n  }\n  else {\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000023d0": "check_initialization_000023d0",
                "param_1": "inputParam",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_000023c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002400": {
            "entrypoint": "0x00002400",
            "current_name": "FUNC_00002400",
            "code": "\nvoid FUNC_00002400(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002400": "FUNC_00002400"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0000240c": {
            "entrypoint": "0x0000240c",
            "current_name": "copy_value_to_next_node_0000240c",
            "code": "\nundefined4 * copyValueToNextNode_0000240c(undefined4 *node)\n\n{\n  undefined4 *nextNode;\n  \n  nextNode = (undefined4 *)*node;\n  if (nextNode != (undefined4 *)0x0) {\n    *node = *nextNode;\n  }\n  return nextNode;\n}\n\n",
            "renaming": {
                "FUN_0000240c": "copy_value_to_next_node_0000240c",
                "param_1": "node",
                "puVar1": "nextNode"
            },
            "calling": [
                "FUN_000024bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002434": {
            "entrypoint": "0x00002434",
            "current_name": "update_param_and_return_status_00002434",
            "code": "\nundefined4 updateParamAndReturnStatus_00002434(int *statusPointer,int updateFlag)\n\n{\n  int initialValue;\n  undefined4 result;\n  \n  result = FUN_00000cd0();\n  initialValue = DAT_1fff03dc;\n  if (*statusPointer == 0) {\n    *statusPointer = -1;\n    FUN_00000d0c(result);\n    result = 1;\n  }\n  else if (updateFlag == 0) {\n    FUN_00000d0c(result);\n    result = 0;\n  }\n  else {\n    FUN_00000698(DAT_1fff03dc,2);\n    if (*statusPointer == -1) {\n      *statusPointer = initialValue + 8;\n      *(undefined4 *)*statusPointer = 0;\n    }\n    else {\n      FUN_00001034(statusPointer,initialValue);\n    }\n    FUN_00000d0c(result);\n    FUN_0000093c();\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002434": "update_param_and_return_status_00002434",
                "param_1": "statusPointer",
                "param_2": "updateFlag",
                "iVar1": "initialValue",
                "uVar2": "result"
            },
            "calling": [
                "FUN_0000129c"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c",
                "FUN_00001034",
                "FUN_0000093c",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000024bc": {
            "entrypoint": "0x000024bc",
            "current_name": "process_function_000024bc",
            "code": "\nvoid processFunction_000024bc(int *input)\n\n{\n  undefined temp1;\n  undefined4 temp2;\n  int temp3;\n  \n  temp2 = FUN_00000cd0();\n  if (*input == 0) {\n    FUN_00000d0c(temp2);\n  }\n  else if (*input == -1) {\n    *input = 0;\n    FUN_00000d0c(temp2);\n  }\n  else {\n    temp3 = FUN_0000240c(input);\n    FUN_00000698(temp3 + -8,10);\n    if (*input == 0) {\n      *input = -1;\n    }\n    temp1 = *(undefined *)(temp3 + -3);\n    FUN_00000d0c(temp2);\n    FUN_00000738(temp1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000024bc": "process_function_000024bc",
                "param_1": "input",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "temp3"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c",
                "FUN_00000738",
                "FUN_00000698",
                "FUN_0000240c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002538": {
            "entrypoint": "0x00002538",
            "current_name": "update_data_00002538",
            "code": "\nvoid updateData_00002538(byte byteValue,uint uintValue)\n\n{\n  if ((char)byteValue < '\\0') {\n    (&DAT_e000ed14)[byteValue & 0xf] = (char)((uintValue & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)byteValue + -0x1fff1c00) = (char)((uintValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002538": "update_data_00002538",
                "param_1": "byteValue",
                "param_2": "uintValue"
            },
            "calling": [
                "FUN_0000258c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000258c": {
            "entrypoint": "0x0000258c",
            "current_name": "initialize_hardware_0000258c",
            "code": "\n\n\nvoid initializeHardware_0000258c(void)\n\n{\n  uint counter;\n  \n  _DAT_e000ed08 = 0;\n  FUN_00002538(0xfffffffe,1);\n  FUN_00002538(0xfffffffb,1);\n  for (counter = 0; counter < 0x66; counter = counter + 1) {\n    FUN_00002538((int)(char)counter,1);\n  }\n  _DAT_e000ed10 = _DAT_e000ed10 | 0x10;\n  _DAT_e000ed14 = _DAT_e000ed14 | 0x200;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000258c": "initialize_hardware_0000258c",
                "local_c": "counter"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000025f4": {
            "entrypoint": "0x000025f4",
            "current_name": "initialize_system_000025f4",
            "code": "\nvoid initialize_system_000025f4(void)\n\n{\n  FUN_000027b0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000025f4": "initialize_system_000025f4"
            },
            "calling": [
                "FUN_00002396"
            ],
            "called": [
                "FUN_000027b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002600": {
            "entrypoint": "0x00002600",
            "current_name": "process_binary_00002600",
            "code": "\nundefined4 processBinary_00002600(undefined4 binaryData)\n\n{\n  undefined4 result;\n  \n  result = FUN_000047e4(binaryData);\n  FUN_0000285c(result);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002600": "process_binary_00002600",
                "param_1": "binaryData",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00003478"
            ],
            "called": [
                "FUN_000047e4",
                "FUN_0000285c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002624": {
            "entrypoint": "0x00002624",
            "current_name": "initialize_function_00002624",
            "code": "\nundefined4 initializeFunction_00002624(undefined4 inputParameter)\n\n{\n  undefined4 outputValue;\n  undefined4 stackVariable;\n  \n  outputValue = FUN_0000281c();\n  stackVariable = 0;\n  FUN_0000443c(&outputValue,inputParameter);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002624": "initialize_function_00002624",
                "param_1": "inputParameter",
                "local_10": "outputValue",
                "uStack_c": "stackVariable"
            },
            "calling": [
                "FUN_00003444"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_0000281c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002654": {
            "entrypoint": "0x00002654",
            "current_name": "initialize_function_00002654",
            "code": "\nundefined4 initializeFunction_00002654(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3)\n\n{\n  undefined4 result;\n  \n  result = FUN_000047e4(inputParam1);\n  DAT_1fff0d9c = inputParam2;\n  FUN_00002894(result,0x26f1,inputParam3);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002654": "initialize_function_00002654",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000033f4"
            ],
            "called": [
                "FUN_00002894",
                "FUN_000047e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002690": {
            "entrypoint": "0x00002690",
            "current_name": "initialize_function_00002690",
            "code": "\nundefined4 initialize_function_00002690(undefined4 input_parameter)\n\n{\n  undefined4 initialized_value;\n  undefined4 temporary_variable;\n  \n  initialized_value = FUN_000028f0();\n  temporary_variable = 0;\n  FUN_0000443c(&initialized_value,input_parameter);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002690": "initialize_function_00002690",
                "param_1": "input_parameter",
                "local_10": "initialized_value",
                "uStack_c": "temporary_variable"
            },
            "calling": [
                "FUN_000033c0"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_000028f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026c0": {
            "entrypoint": "0x000026c0",
            "current_name": "initialize_data_000026c0",
            "code": "\nvoid initializeData_000026c0(void)\n\n{\n  FUN_00002910();\n  DAT_1fff0d9c = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026c0": "initialize_data_000026c0"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002910"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026d8": {
            "entrypoint": "0x000026d8",
            "current_name": "execute_initialization_000026d8",
            "code": "\nvoid executeInitialization_000026d8(void)\n\n{\n  FUN_0000294c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026d8": "execute_initialization_000026d8"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026e4": {
            "entrypoint": "0x000026e4",
            "current_name": "initialize_application_000026e4",
            "code": "\nvoid initializeApplication_000026e4(void)\n\n{\n  FUN_00002970();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026e4": "initialize_application_000026e4"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026f0": {
            "entrypoint": "0x000026f0",
            "current_name": "execute_callback_000026f0",
            "code": "\nvoid executeCallback_000026f0(undefined4 callbackFunction)\n\n{\n  if (DAT_1fff0d9c != (code *)0x0) {\n    (*DAT_1fff0d9c)(callbackFunction);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026f0": "execute_callback_000026f0",
                "param_1": "callbackFunction"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002714": {
            "entrypoint": "0x00002714",
            "current_name": "set_bit_00002714",
            "code": "\nvoid setBit_00002714(byte byteData)\n\n{\n  *(int *)(((uint)(int)(char)byteData >> 5) * 4 + -0x1fff1f00) = 1 << (byteData & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002714": "set_bit_00002714",
                "param_1": "byteData"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002744": {
            "entrypoint": "0x00002744",
            "current_name": "set_byte_value_00002744",
            "code": "\nvoid setByteValue_00002744(byte byteIndex,uint value)\n\n{\n  if ((char)byteIndex < '\\0') {\n    (&DAT_e000ed14)[byteIndex & 0xf] = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)byteIndex + -0x1fff1c00) = (char)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002744": "set_byte_value_00002744",
                "param_1": "byteIndex",
                "param_2": "value"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002798": {
            "entrypoint": "0x00002798",
            "current_name": "check_and_execute_function_00002798",
            "code": "\nvoid checkAndExecuteFunction_00002798(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    FUN_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002798": "check_and_execute_function_00002798"
            },
            "calling": [
                "FUN_00002994"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000027b0": {
            "entrypoint": "0x000027b0",
            "current_name": "initialize_system_000027b0",
            "code": "\n\n\nvoid initializeSystem_000027b0(void)\n\n{\n  _DAT_4004803c = _DAT_4004803c | 0x20000000;\n  if ((_DAT_4003d014 & 1) != 0) {\n    _DAT_4003d000 = 0;\n  }\n  _DAT_4003d010 = 0x104;\n  _DAT_4003d008 = 0xffffff42;\n  _DAT_4003d01c = 0;\n  FUN_0000294c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000027b0": "initialize_system_000027b0"
            },
            "calling": [
                "FUN_000025f4"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000281c": {
            "entrypoint": "0x0000281c",
            "current_name": "get_base_address_0000281c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00002840) */\n/* WARNING: Removing unreachable block (ram,0x0000284c) */\n\n\nundefined4 getBaseAddress_0000281c(void)\n\n{\n  return _DAT_4003d000;\n}\n\n",
            "renaming": {
                "FUN_0000281c": "get_base_address_0000281c"
            },
            "calling": [
                "FUN_00002624"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000285c": {
            "entrypoint": "0x0000285c",
            "current_name": "set_global_flag_0000285c",
            "code": "\n\n\nvoid setGlobalFlag_0000285c(undefined4 flagValue)\n\n{\n  _DAT_4003d000 = flagValue;\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000285c": "set_global_flag_0000285c",
                "param_1": "flagValue"
            },
            "calling": [
                "FUN_00002600"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002894": {
            "entrypoint": "0x00002894",
            "current_name": "initialize_data_00002894",
            "code": "\n\n\nvoid initializeData_00002894(int inputValue,undefined4 parameter1,undefined4 parameter2)\n\n{\n  _DAT_4003d008 = inputValue + -1;\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb | 4;\n  DAT_1fff0da0 = parameter1;\n  DAT_1fff0da4 = parameter2;\n  FUN_00002744(0x2e,10);\n  FUN_00002714(0x2e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002894": "initialize_data_00002894",
                "param_1": "inputValue",
                "param_2": "parameter1",
                "param_3": "parameter2"
            },
            "calling": [
                "FUN_00002654"
            ],
            "called": [
                "FUN_00002714",
                "FUN_00002744"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000028f0": {
            "entrypoint": "0x000028f0",
            "current_name": "increment_data_by_one_000028f0",
            "code": "\n\n\nint incrementDataByOne_000028f0(void)\n\n{\n  return _DAT_4003d008 + 1;\n}\n\n",
            "renaming": {
                "FUN_000028f0": "increment_data_by_one_000028f0"
            },
            "calling": [
                "FUN_00002690"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002910": {
            "entrypoint": "0x00002910",
            "current_name": "clear_flags_00002910",
            "code": "\n\n\nvoid clearFlags_00002910(void)\n\n{\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n  _DAT_4003d008 = 0;\n  DAT_1fff0da0 = 0;\n  DAT_1fff0da4 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002910": "clear_flags_00002910"
            },
            "calling": [
                "FUN_000026c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000294c": {
            "entrypoint": "0x0000294c",
            "current_name": "set_flag_0000294c",
            "code": "\n\n\nvoid setFlag_0000294c(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000294c": "set_flag_0000294c"
            },
            "calling": [
                "FUN_000027b0",
                "FUN_000026d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002970": {
            "entrypoint": "0x00002970",
            "current_name": "clear_interrupt_flag_00002970",
            "code": "\n\n\nvoid clearInterruptFlag_00002970(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002970": "clear_interrupt_flag_00002970"
            },
            "calling": [
                "FUN_000026e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002994": {
            "entrypoint": "0x00002994",
            "current_name": "execute_logical_operations_00002994",
            "code": "\n\n\nvoid execute_logical_operations_00002994(void)\n\n{\n  if (((_DAT_4003d014 & 4) != 0) && (DAT_1fff0da0 != (function_pointer *)0x0)) {\n    _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n    (*DAT_1fff0da0)(DAT_1fff0da4);\n  }\n  if (((_DAT_4003d014 & 2) != 0) && (DAT_1fff0da8 != (function_pointer *)0x0)) {\n    (*DAT_1fff0da8)(DAT_1fff0dac);\n  }\n  FUN_00002798();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002994": "execute_logical_operations_00002994",
                "code": "function_pointer"
            },
            "calling": [],
            "called": [
                "FUN_00002798"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a00": {
            "entrypoint": "0x00002a00",
            "current_name": "execute_initialization_00002a00",
            "code": "\nvoid executeInitialization_00002a00(undefined4 param)\n\n{\n  FUN_00004cb4(param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a00": "execute_initialization_00002a00",
                "param_1": "param"
            },
            "calling": [
                "FUN_00002e48",
                "FUN_00002d94"
            ],
            "called": [
                "FUN_00004cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a18": {
            "entrypoint": "0x00002a18",
            "current_name": "find_reboot_value_00002a18",
            "code": "\nint findRebootValue_00002a18(int *array,undefined4 value)\n\n{\n  int result;\n  int *inputArray;\n  undefined **rebootPointer;\n  uint index;\n  int *element;\n  \n  inputArray = array;\n  rebootPointer = &PTR_s_reboot_00007300;\n  index = 0;\n  do {\n    if (1 < index) {\n      return 0;\n    }\n    element = (&inputArray)[index];\n    if (element != (int *)0x0) {\n      for (; *element != 0; element = element + 3) {\n        result = FUN_00004e52(*element,value);\n        if (result == 0) {\n          return element[2];\n        }\n      }\n    }\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002a18": "find_reboot_value_00002a18",
                "param_1": "array",
                "param_2": "value",
                "iVar1": "result",
                "local_18": "inputArray",
                "local_14": "rebootPointer",
                "local_10": "index",
                "local_c": "element"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a88": {
            "entrypoint": "0x00002a88",
            "current_name": "print_command_descriptions_00002a88",
            "code": "\nvoid printCommandDescriptions_00002a88(int *commandArrayPtr)\n\n{\n  int *currentCommandPtr;\n  undefined **commandDescriptionPtr;\n  uint commandIndex;\n  int *currentCommandPtr;\n  \n  FUN_00004c84(\"%-20s %s\\n\",\"Command\",\"Description\");\n  FUN_00004db8(\"---------------------------------------\");\n  currentCommandPtr = commandArrayPtr;\n  commandDescriptionPtr = &PTR_s_reboot_00007300;\n  for (commandIndex = 0; commandIndex < 2; commandIndex = commandIndex + 1) {\n    currentCommandPtr = (&currentCommandPtr)[commandIndex];\n    if (currentCommandPtr != (int *)0x0) {\n      for (; *currentCommandPtr != 0; currentCommandPtr = currentCommandPtr + 3) {\n        FUN_00004c84(\"%-20s %s\\n\",*currentCommandPtr,currentCommandPtr[1]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a88": "print_command_descriptions_00002a88",
                "param_1": "commandArrayPtr",
                "local_18": "currentCommandPtr",
                "local_14": "commandDescriptionPtr",
                "local_10": "commandIndex",
                "local_c": "currentCommandPtr"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002b10": {
            "entrypoint": "0x00002b10",
            "current_name": "process_input_string_00002b10",
            "code": "\nvoid processInputString_00002b10(undefined4 param1,byte *inputString)\n\n{\n  int result;\n  byte *nextByte;\n  byte *inputStringPtr [3];\n  code *commandFunction;\n  char **commandParams;\n  uint numCommands;\n  byte quoteChar;\n  char *escapedChar;\n  char *currentCommand;\n  char **commandList;\n  uint commandIndex;\n  int numEscapedChars;\n  uint numQuotes;\n  byte *currentByte;\n  \n  numQuotes = 0;\n  numEscapedChars = 0;\n  currentByte = inputString;\n  while( true ) {\n    inputStringPtr[0] = inputString;\n    inputStringPtr[1] = (byte *)param1;\n    if (0x20 < *currentByte) {\n      if ((*currentByte == 0x22) || (*currentByte == 0x27)) {\n        quoteChar = *currentByte;\n        do {\n          nextByte = currentByte + 1;\n          if (*nextByte == 0) {\n            currentByte = nextByte;\n            FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n          if (*nextByte == 0x5c) {\n            numEscapedChars = numEscapedChars + 1;\n            currentByte = currentByte + 2;\n            nextByte = currentByte;\n            if (*currentByte == 0) {\n              FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          currentByte = nextByte;\n        } while (quoteChar != *currentByte);\n        if (0x20 < currentByte[1]) {\n          FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n          return;\n        }\n      }\n      else {\n        do {\n          if (*currentByte == 0x5c) {\n            numEscapedChars = numEscapedChars + 1;\n            currentByte = currentByte + 1;\n            if (*currentByte == 0) {\n              FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          currentByte = currentByte + 1;\n          if (*currentByte == 0x22) {\n            FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n        } while (0x20 < *currentByte);\n      }\n      numQuotes = numQuotes + 1;\n    }\n    if (*currentByte == 0) break;\n    *currentByte = 0;\n    currentByte = currentByte + 1;\n  }\n  if (numQuotes != 0) {\n    numCommands = numQuotes;\n    commandParams = (char **)((int)inputStringPtr - ((numQuotes + 1) * 4 + 7 & 0xfffffff8));\n    commandParams[numQuotes] = (char *)0x0;\n    currentByte = inputString;\n    for (commandIndex = 0; commandList = commandParams, commandIndex < numQuotes; commandIndex = commandIndex + 1) {\n      for (; *currentByte == 0; currentByte = currentByte + 1) {\n      }\n      if ((*currentByte == 0x22) || (*currentByte == 0x27)) {\n        currentByte = currentByte + 1;\n      }\n      commandParams[commandIndex] = (char *)currentByte;\n      for (; *currentByte != 0; currentByte = currentByte + 1) {\n      }\n    }\n    for (; (numEscapedChars != 0 && (*commandList != (char *)0x0)); commandList = commandList + 1) {\n      for (currentCommand = *commandList; *currentCommand != '\\0'; currentCommand = currentCommand + 1) {\n        if (*currentCommand == '\\') {\n          for (escapedChar = currentCommand; *escapedChar != '\\0'; escapedChar = escapedChar + 1) {\n            *escapedChar = escapedChar[1];\n          }\n          numEscapedChars = numEscapedChars + -1;\n          if (numEscapedChars == 0) break;\n        }\n      }\n    }\n    commandFunction = (code *)FUN_00002a18(param1,*commandParams);\n    if (commandFunction == (code *)0x0) {\n      result = FUN_00004e52(&DAT_00007214,*commandParams);\n      if (result == 0) {\n        FUN_00002a88(inputStringPtr[1]);\n      }\n      else {\n        FUN_00004c84(\"shell: command not found: %s\\n\",*commandParams);\n      }\n    }\n    else {\n      (*commandFunction)(numQuotes,commandParams);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002b10": "process_input_string_00002b10",
                "param_1": "param1",
                "param_2": "inputString",
                "iVar1": "result",
                "pbVar2": "nextByte",
                "local_48": "inputStringPtr",
                "local_3c": "commandFunction",
                "local_38": "commandParams",
                "local_34": "numCommands",
                "local_2d": "quoteChar",
                "local_2c": "escapedChar",
                "local_28": "currentCommand",
                "local_24": "commandList",
                "local_20": "commandIndex",
                "local_1c": "numEscapedChars",
                "local_18": "numQuotes",
                "local_14": "currentByte"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00002a88",
                "FUN_00004e52",
                "FUN_00002a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002d94": {
            "entrypoint": "0x00002d94",
            "current_name": "process_input_00002d94",
            "code": "\nuint process_input_00002d94(undefined *input_data,int input_length)\n\n{\n  int input_code;\n  byte byte_value;\n  bool is_first_char;\n  undefined *current_char;\n  \n  current_char = input_data;\n  while( true ) {\n    if (input_length + -1 <= (int)current_char - (int)input_data) {\n      return 0xffffffff;\n    }\n    input_code = FUN_00004418();\n    if (input_code < 0) break;\n    if ((input_code == 0xd) || (input_code == 10)) {\n      *current_char = 0;\n      FUN_00002a00(0xd);\n      FUN_00002a00(10);\n      is_first_char = current_char == input_data;\n      if (is_first_char) {\n        input_data = (undefined *)0x1;\n      }\n      byte_value = (byte)input_data;\n      if (!is_first_char) {\n        byte_value = 0;\n      }\n      return (uint)byte_value;\n    }\n    if ((input_code == 8) || (input_code == 0x7f)) {\n      if (current_char != input_data) {\n        current_char = current_char + -1;\n        *current_char = 0;\n        FUN_00002a00(8);\n        FUN_00002a00(0x20);\n        FUN_00002a00(8);\n      }\n    }\n    else {\n      *current_char = (char)input_code;\n      FUN_00002a00(input_code);\n      current_char = current_char + 1;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00002d94": "process_input_00002d94",
                "param_1": "input_data",
                "param_2": "input_length",
                "iVar1": "input_code",
                "bVar2": "byte_value",
                "bVar3": "is_first_char",
                "local_c": "current_char"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004418",
                "FUN_00002a00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e48": {
            "entrypoint": "0x00002e48",
            "current_name": "initialize_system_00002e48",
            "code": "\nvoid initializeSystem_00002e48(void)\n\n{\n  FUN_00002a00(0x3e);\n  FUN_00002a00(0x20);\n  FUN_000041d0(*(undefined4 *)(relocationTable[16].offset + 8));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002e48": "initialize_system_00002e48",
                "Elf32_Rel_ARRAY_1fff0200": "relocationTable",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00002a00",
                "FUN_000041d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e6c": {
            "entrypoint": "0x00002e6c",
            "current_name": "process_data_00002e6c",
            "code": "\nvoid processData_00002e6c(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int result;\n  \n  FUN_00002e48();\n  do {\n    result = FUN_00002d94(input2,input3);\n    if (result == 0) {\n      FUN_00002b10(input1,input2);\n    }\n    FUN_00002e48();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002e6c": "process_data_00002e6c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_00002b10",
                "FUN_00002e48",
                "FUN_00002d94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e9c": {
            "entrypoint": "0x00002e9c",
            "current_name": "initialize_application_00002e9c",
            "code": "\nundefined4 initialize_application_00002e9c(void)\n\n{\n  FUN_00003688();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002e9c": "initialize_application_00002e9c"
            },
            "calling": [],
            "called": [
                "FUN_00003688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002eb4": {
            "entrypoint": "0x00002eb4",
            "current_name": "initialize_application_00002eb4",
            "code": "\nundefined4 initializeApplication_00002eb4(void)\n\n{\n  FUN_0000211c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002eb4": "initialize_application_00002eb4"
            },
            "calling": [],
            "called": [
                "FUN_0000211c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002ecc": {
            "entrypoint": "0x00002ecc",
            "current_name": "read_from_device_00002ecc",
            "code": "\nvoid readFromDevice_00002ecc(undefined4 deviceNumber,int deviceInfo)\n\n{\n  undefined4 deviceType;\n  undefined4 deviceName;\n  undefined buffer [8];\n  uint readResult;\n  \n  readResult = FUN_00003d64(deviceInfo,buffer);\n  if ((int)readResult < 1) {\n    FUN_00004c84(\"error: failed to read from device #%i\\n\",deviceNumber);\n  }\n  else {\n    deviceName = *(undefined4 *)(deviceInfo + 8);\n    deviceType = FUN_000039e8(*(undefined *)(*(int *)(deviceInfo + 0xc) + 8));\n    FUN_00004c84(\"Reading from #%i (%s|%s)\\n\",deviceNumber,deviceName,deviceType);\n    FUN_00003694(buffer,readResult & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002ecc": "read_from_device_00002ecc",
                "param_1": "deviceNumber",
                "param_2": "deviceInfo",
                "uVar1": "deviceType",
                "uVar2": "deviceName",
                "auStack_1c": "buffer",
                "local_14": "readResult"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_00002f30"
            ],
            "called": [
                "FUN_00003d64",
                "FUN_00004c84",
                "FUN_000039e8",
                "FUN_00003694"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f30": {
            "entrypoint": "0x00002f30",
            "current_name": "iterate_over_pointers_00002f30",
            "code": "\nvoid iterateOverPointers_00002f30(void)\n\n{\n  int iterationCount;\n  undefined4 *currentPointer;\n  \n  iterationCount = 0;\n  for (currentPointer = DAT_1fff0db0; currentPointer != (undefined4 *)0x0; currentPointer = (undefined4 *)*currentPointer) {\n    FUN_00002ecc(iterationCount,currentPointer);\n    FUN_00004db8(&DAT_00007380);\n    iterationCount = iterationCount + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f30": "iterate_over_pointers_00002f30",
                "local_10": "iterationCount",
                "local_c": "currentPointer"
            },
            "calling": [
                "FUN_00002fe0"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002ecc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f74": {
            "entrypoint": "0x00002f74",
            "current_name": "print_device_details_00002f74",
            "code": "\nvoid printDeviceDetails_00002f74(void)\n\n{\n  undefined4 deviceClass;\n  int deviceIndex;\n  undefined4 *deviceList;\n  \n  deviceList = DAT_1fff0db0;\n  deviceIndex = 0;\n  if (DAT_1fff0db0 == (undefined4 *)0x0) {\n    FUN_00004db8(\"No devices found\");\n  }\n  else {\n    FUN_00004db8(\"ID\\tClass\\t\\tName\");\n  }\n  for (; deviceList != (undefined4 *)0x0; deviceList = (undefined4 *)*deviceList) {\n    deviceClass = FUN_000039e8(*(undefined *)(deviceList[3] + 8));\n    FUN_00004c84(\"#%i\\t%s\\t%s\\n\",deviceIndex,deviceClass,deviceList[2]);\n    deviceIndex = deviceIndex + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f74": "print_device_details_00002f74",
                "local_18": "deviceIndex",
                "local_14": "deviceList",
                "uVar1": "deviceClass"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_000039e8",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002fe0": {
            "entrypoint": "0x00002fe0",
            "current_name": "check_and_handle_device_00002fe0",
            "code": "\nvoid checkAndHandleDevice_00002fe0(int deviceCount,undefined4 *arguments)\n\n{\n  int result;\n  undefined4 deviceId;\n  \n  if (deviceCount < 3) {\n    FUN_00004c84(\"usage: %s %s <device id>|all\\n\",*arguments,arguments[1]);\n  }\n  else {\n    result = FUN_00004e52(arguments[2],&DAT_000073d4);\n    if (result == 0) {\n      FUN_00002f30();\n    }\n    else {\n      deviceId = FUN_00004042(arguments[2]);\n      result = FUN_00003d24(deviceId);\n      if (result == 0) {\n        FUN_00004db8(\"error: undefined device id given\");\n      }\n      else {\n        FUN_00002ecc(deviceId,result);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002fe0": "check_and_handle_device_00002fe0",
                "param_1": "deviceCount",
                "param_2": "arguments",
                "iVar1": "result",
                "uVar2": "deviceId"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00002ecc",
                "FUN_00004042",
                "FUN_00003d24",
                "FUN_00004e52",
                "FUN_00002f30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000305c": {
            "entrypoint": "0x0000305c",
            "current_name": "write_to_device_0000305c",
            "code": "\nvoid writeToDevice_0000305c(int argc,undefined4 *argv)\n\n{\n  undefined2 value;\n  undefined2 deviceValues [4];\n  uint numValues;\n  int deviceId;\n  undefined4 deviceName;\n  int i;\n  \n  if (argc < 4) {\n    FUN_00004c84(\"usage: %s %s <device id> <value 0> [<value 1> [<value 2]]\\n\",*argv,argv[1]);\n  }\n  else {\n    deviceName = FUN_00004042(argv[2]);\n    deviceId = FUN_00003d24(deviceName);\n    if (deviceId == 0) {\n      FUN_00004db8(\"error: undefined device given\");\n    }\n    else {\n      FUN_00004622(deviceValues,0,8);\n      if (5 < argc) {\n        argc = 6;\n      }\n      numValues = argc - 3;\n      for (i = 0; i < (int)numValues; i = i + 1) {\n        value = FUN_00004042(argv[i + 3]);\n        deviceValues[i] = value;\n      }\n      FUN_00004c84(\"Writing to device #%i - %s\\n\",deviceName,*(undefined4 *)(deviceId + 8));\n      FUN_00003694(deviceValues,numValues & 0xff);\n      numValues = FUN_00003d94(deviceId,deviceValues);\n      if ((int)numValues < 1) {\n        if (numValues == -0x86) {\n          FUN_00004c84(\"error: device #%i is not writable\\n\",deviceName);\n        }\n        else {\n          FUN_00004c84(\"error: failure to write to device #%i\\n\",deviceName);\n        }\n      }\n      else {\n        FUN_00004c84(\"data successfully written to device #%i\\n\",deviceName);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000305c": "write_to_device_0000305c",
                "param_1": "argc",
                "param_2": "argv",
                "uVar1": "value",
                "auStack_20": "deviceValues",
                "local_18": "numValues",
                "local_14": "deviceId",
                "local_10": "deviceName",
                "local_c": "i"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00003694",
                "FUN_00004042",
                "FUN_00003d24",
                "FUN_00003d94",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000316c": {
            "entrypoint": "0x0000316c",
            "current_name": "handle_read_write_operation_0000316c",
            "code": "\nundefined4 handleReadWriteOperation_0000316c(int numArgs,undefined4 *args)\n\n{\n  int result;\n  \n  if (numArgs < 2) {\n    FUN_00002f74();\n  }\n  else {\n    result = FUN_00004e52(args[1],&DAT_000074ec);\n    if (result == 0) {\n      FUN_00002fe0(numArgs,args);\n    }\n    else {\n      result = FUN_00004e52(args[1],\"write\");\n      if (result == 0) {\n        FUN_0000305c(numArgs,args);\n      }\n      else {\n        FUN_00004c84(\"usage: %s read|write\\n\",*args);\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000316c": "handle_read_write_operation_0000316c",
                "param_1": "numArgs",
                "param_2": "args",
                "iVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_00004c84",
                "FUN_00002fe0",
                "FUN_0000305c",
                "FUN_00004e52",
                "FUN_00002f74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000031e0": {
            "entrypoint": "0x000031e0",
            "current_name": "ring_alarm_000031e0",
            "code": "\nvoid ringAlarm_000031e0(void)\n\n{\n  FUN_00004db8(\"The alarm rang\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_000031e0": "ring_alarm_000031e0"
            },
            "calling": [],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000031fc": {
            "entrypoint": "0x000031fc",
            "current_name": "calculate_day_of_week_000031fc",
            "code": "\nint calculateDayOfWeek_000031fc(int year,int month,int day)\n\n{\n  byte isLeapYear;\n  int adjustedYear;\n  \n  adjustedYear = month;\n  if (month < 3) {\n    adjustedYear = 1;\n  }\n  isLeapYear = (byte)adjustedYear;\n  if (2 < month) {\n    isLeapYear = 0;\n  }\n  year = year - (uint)isLeapYear;\n  adjustedYear = year;\n  if (year < 0) {\n    adjustedYear = year + 3;\n  }\n  return ((((adjustedYear >> 2) + year) - year / 100) + year / 400 +\n          *(int *)((int)dayOffsets + (month + -1) * 4 + 0x50) + day) % 7;\n}\n\n",
            "renaming": {
                "FUN_000031fc": "calculate_day_of_week_000031fc",
                "param_1": "year",
                "param_2": "month",
                "param_3": "day",
                "bVar1": "isLeapYear",
                "iVar2": "adjustedYear",
                "Elf32_Rel_ARRAY_1fff0200": "dayOffsets"
            },
            "calling": [
                "FUN_0000328c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000328c": {
            "entrypoint": "0x0000328c",
            "current_name": "parse_data_0000328c",
            "code": "\nundefined4 parse_data_0000328c(undefined4 *data,int *parsed_data)\n\n{\n  int result;\n  int counter;\n  short value;\n  \n  value = FUN_00004f84(*data,&counter,10);\n  parsed_data[5] = value + -0x76c;\n  value = FUN_00004f84(counter + 1,&counter,10);\n  parsed_data[4] = value + -1;\n  value = FUN_00004f84(counter + 1,&counter,10);\n  parsed_data[3] = (int)value;\n  value = FUN_00004f84(data[1],&counter,10);\n  parsed_data[2] = (int)value;\n  value = FUN_00004f84(counter + 1,&counter,10);\n  parsed_data[1] = (int)value;\n  value = FUN_00004f84(counter + 1,&counter,10);\n  *parsed_data = (int)value;\n  result = FUN_000031fc(parsed_data[5] + 0x76c,parsed_data[4] + 1,parsed_data[3]);\n  parsed_data[6] = result;\n  parsed_data[8] = -1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000328c": "parse_data_0000328c",
                "param_1": "data",
                "param_2": "parsed_data",
                "iVar1": "result",
                "local_10": "counter",
                "local_a": "value"
            },
            "calling": [
                "FUN_000033f4",
                "FUN_00003478"
            ],
            "called": [
                "FUN_00004f84",
                "FUN_000031fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003378": {
            "entrypoint": "0x00003378",
            "current_name": "print_date_time_00003378",
            "code": "\nundefined4 printDateTime_00003378(undefined4 *dateTimeArray)\n\n{\n  FUN_00004c84(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",year + 0x76c,month + 1,day,\n               hour,minute,*dateTimeArray);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00003378": "print_date_time_00003378",
                "param_1": "dateTimeArray",
                "param_1[5]": "year",
                "param_1[4]": "month",
                "param_1[3]": "day",
                "param_1[2]": "hour",
                "param_1[1]": "minute"
            },
            "calling": [
                "FUN_00003444",
                "FUN_000033c0"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033c0": {
            "entrypoint": "0x000033c0",
            "current_name": "check_alarm_000033c0",
            "code": "\nbool checkAlarm_000033c0(void)\n\n{\n  int result;\n  undefined alarmData [36];\n  \n  result = FUN_00002690(alarmData);\n  if (result != 0) {\n    FUN_00004db8(\"rtc: error getting alarm\");\n  }\n  else {\n    FUN_00003378(alarmData);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_000033c0": "check_alarm_000033c0",
                "auStack_2c": "alarmData",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002690",
                "FUN_00003378",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033f4": {
            "entrypoint": "0x000033f4",
            "current_name": "set_alarm_000033f4",
            "code": "\nundefined4 set_alarm_000033f4(undefined4 input)\n\n{\n  int result;\n  undefined4 success;\n  undefined stack_buffer [36];\n  \n  result = FUN_0000328c(input,stack_buffer);\n  if (result == 0) {\n    result = FUN_00002654(stack_buffer,0x31e1,0);\n    if (result == -1) {\n      FUN_00004db8(\"rtc: error setting alarm\");\n      success = 1;\n    }\n    else {\n      success = 0;\n    }\n  }\n  else {\n    success = 1;\n  }\n  return success;\n}\n\n",
            "renaming": {
                "FUN_000033f4": "set_alarm_000033f4",
                "param_1": "input",
                "iVar1": "result",
                "uVar2": "success",
                "auStack_2c": "stack_buffer"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000328c",
                "FUN_00002654",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003444": {
            "entrypoint": "0x00003444",
            "current_name": "get_time_and_handle_error_00003444",
            "code": "\nbool getTimeAndHandleError_00003444(void)\n\n{\n  int result;\n  undefined buffer [36];\n  \n  result = FUN_00002624(buffer);\n  if (result != 0) {\n    FUN_00004db8(\"rtc: error getting time\");\n  }\n  else {\n    FUN_00003378(buffer);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_00003444": "get_time_and_handle_error_00003444",
                "auStack_2c": "buffer",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00003378",
                "FUN_00004db8",
                "FUN_00002624"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003478": {
            "entrypoint": "0x00003478",
            "current_name": "set_time_00003478",
            "code": "\nundefined4 setTime_00003478(undefined4 timeValue)\n\n{\n  int result;\n  undefined4 returnValue;\n  undefined stackBuffer [36];\n  \n  result = FUN_0000328c(timeValue,stackBuffer);\n  if (result == 0) {\n    result = FUN_00002600(stackBuffer);\n    if (result == -1) {\n      FUN_00004db8(\"rtc: error setting time\");\n      returnValue = 1;\n    }\n    else {\n      returnValue = 0;\n    }\n  }\n  else {\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003478": "set_time_00003478",
                "param_1": "timeValue",
                "iVar1": "result",
                "uVar2": "returnValue",
                "auStack_2c": "stackBuffer"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000328c",
                "FUN_00002600",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000034c0": {
            "entrypoint": "0x000034c0",
            "current_name": "print_usage_000034c0",
            "code": "\nundefined4 printUsage_000034c0(void)\n\n{\n  FUN_00004db8(\"usage: rtc <command> [arguments]\");\n  FUN_00004db8(\"commands:\");\n  FUN_00004db8(\"\\tpoweron\\t\\tpower the interface on\");\n  FUN_00004db8(\"\\tpoweroff\\tpower the interface off\");\n  FUN_00004db8(\"\\tclearalarm\\tdeactivate the current alarm\");\n  FUN_00004db8(\"\\tgetalarm\\tprint the currently alarm time\");\n  FUN_00004db8(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  FUN_00004db8(\"\\tgettime\\t\\tprint the current time\");\n  FUN_00004db8(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000034c0": "print_usage_000034c0"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003524": {
            "entrypoint": "0x00003524",
            "current_name": "execute_command_00003524",
            "code": "\nundefined4 executeCommand_00003524(int commandCount,int commandArray)\n\n{\n  int errorCode;\n  undefined4 result;\n  \n  if (commandCount < 2) {\n    FUN_000034c0();\n    result = 1;\n  }\n  else {\n    errorCode = FUN_00004e66(*(undefined4 *)(commandArray + 4),\"poweron\",7);\n    if (errorCode == 0) {\n      FUN_000026d8();\n    }\n    else {\n      errorCode = FUN_00004e66(*(undefined4 *)(commandArray + 4),\"poweroff\",8);\n      if (errorCode == 0) {\n        FUN_000026e4();\n      }\n      else {\n        errorCode = FUN_00004e66(*(undefined4 *)(commandArray + 4),\"clearalarm\",8);\n        if (errorCode == 0) {\n          FUN_000026c0();\n        }\n        else {\n          errorCode = FUN_00004e66(*(undefined4 *)(commandArray + 4),\"getalarm\",8);\n          if (errorCode == 0) {\n            FUN_000033c0();\n          }\n          else {\n            errorCode = FUN_00004e66(*(undefined4 *)(commandArray + 4),\"setalarm\",8);\n            if ((errorCode == 0) && (commandCount == 4)) {\n              FUN_000033f4(commandArray + 8);\n            }\n            else {\n              errorCode = FUN_00004e66(*(undefined4 *)(commandArray + 4),\"gettime\",7);\n              if (errorCode == 0) {\n                FUN_00003444();\n              }\n              else {\n                errorCode = FUN_00004e66(*(undefined4 *)(commandArray + 4),\"settime\",7);\n                if ((errorCode != 0) || (commandCount != 4)) {\n                  FUN_00004c84(\"unknown command or missing parameters: %s\\n\\n\",\n                               *(undefined4 *)(commandArray + 4));\n                  FUN_000034c0();\n                  return 1;\n                }\n                FUN_00003478(commandArray + 8);\n              }\n            }\n          }\n        }\n      }\n    }\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003524": "execute_command_00003524",
                "param_1": "commandCount",
                "param_2": "commandArray",
                "iVar1": "errorCode",
                "uVar2": "result"
            },
            "calling": [],
            "called": [
                "FUN_000034c0",
                "FUN_00004c84",
                "FUN_00004e66",
                "FUN_000026c0",
                "FUN_000033f4",
                "FUN_00003444",
                "FUN_000033c0",
                "FUN_000026d8",
                "FUN_00003478",
                "FUN_000026e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003658": {
            "entrypoint": "0x00003658",
            "current_name": "run_infinite_loop_00003658",
            "code": "\nvoid runInfiniteLoop_00003658(void)\n\n{\n  syncBarrier(0xf);\n  syncBarrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00003658": "run_infinite_loop_00003658",
                "DataSynchronizationBarrier": "syncBarrier"
            },
            "calling": [
                "FUN_00003688"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003688": {
            "entrypoint": "0x00003688",
            "current_name": "execute_initialization_00003688",
            "code": "\nvoid executeInitialization_00003688(void)\n\n{\n  FUN_00003658();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003688": "execute_initialization_00003688"
            },
            "calling": [
                "FUN_00002e9c"
            ],
            "called": [
                "FUN_00003658"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003694": {
            "entrypoint": "0x00003694",
            "current_name": "display_data_00003694",
            "code": "\nvoid displayData_00003694(int dataAddress,byte dataLength)\n\n{\n  undefined4 displayFormat;\n  char displayChar;\n  uint bitMask;\n  bool isBitSet;\n  undefined temporaryBuffer [8];\n  int bufferSize;\n  char displayFlag;\n  byte i;\n  \n  if ((dataAddress == 0) || (3 < dataLength)) {\n    FUN_00004db8(\"Unable to display data object\");\n  }\n  else {\n    FUN_00004c84(\"Data:\");\n    for (i = 0; i < dataLength; i = i + 1) {\n      if (*(byte *)(dataAddress + 6) < 0x14) {\n        bitMask = 1 << (uint)*(byte *)(dataAddress + 6) & 0x8018f;\n        isBitSet = bitMask != 0;\n        if (isBitSet) {\n          bitMask = 1;\n        }\n        displayChar = (char)bitMask;\n        if (!isBitSet) {\n          displayChar = '\\0';\n        }\n        if (displayChar == '\\0') goto LAB_000036ee;\n        displayFlag = '\\0';\n      }\n      else {\nLAB_000036ee:\n        displayFlag = FUN_00003918((int)*(char *)(dataAddress + 7));\n      }\n      FUN_00004c84(&DAT_000077bc);\n      if (dataLength < 2) {\n        FUN_00004c84(\"     \");\n      }\n      else {\n        FUN_00004c84(\"[%u] \",i);\n      }\n      if (displayFlag == '\\0') {\n        if (*(char *)(dataAddress + 7) == '\\0') {\n          FUN_00004c84(&DAT_000077d8,(int)*(short *)(dataAddress + (uint)i * 2));\n        }\n        else if ((*(char *)(dataAddress + 7) + 4 < 0 == SCARRY4((int)*(char *)(dataAddress + 7),4)) &&\n                (*(char *)(dataAddress + 7) < '\\0')) {\n          bufferSize = FUN_00003e9e(temporaryBuffer,(int)*(short *)(dataAddress + (uint)i * 2),\n                                  (int)*(char *)(dataAddress + 7));\n          temporaryBuffer[bufferSize] = 0;\n          FUN_00004c84(&DAT_000077dc,temporaryBuffer);\n        }\n        else {\n          FUN_00004c84(\"%iE%i\",(int)*(short *)(dataAddress + (uint)i * 2),\n                       (int)*(char *)(dataAddress + 7));\n        }\n      }\n      else {\n        FUN_00004c84(\"%6d %c\",(int)*(short *)(dataAddress + (uint)i * 2),displayFlag);\n      }\n      displayFormat = FUN_00003810(*(undefined *)(dataAddress + 6));\n      FUN_00004c84(&DAT_000077e8,displayFormat);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003694": "display_data_00003694",
                "param_1": "dataAddress",
                "param_2": "dataLength",
                "uVar1": "displayFormat",
                "cVar2": "displayChar",
                "uVar3": "bitMask",
                "bVar4": "isBitSet",
                "auStack_18": "temporaryBuffer",
                "local_10": "bufferSize",
                "local_a": "displayFlag",
                "local_9": "i"
            },
            "calling": [
                "FUN_00002ecc",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00003918",
                "FUN_00003e9e",
                "FUN_00003810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003810": {
            "entrypoint": "0x00003810",
            "current_name": "get_memory_address_00003810",
            "code": "\nundefined * getMemoryAddress_00003810(undefined value)\n\n{\n  undefined *memoryAddress;\n  \n  switch(value) {\n  case 2:\n    memoryAddress = &DAT_000077ec;\n    break;\n  case 3:\n    memoryAddress = &DAT_000077f0;\n    break;\n  case 4:\n    memoryAddress = &DAT_000077f4;\n    break;\n  case 5:\n    memoryAddress = &DAT_000077f8;\n    break;\n  case 6:\n    memoryAddress = &DAT_000077fc;\n    break;\n  case 7:\n    memoryAddress = (undefined *)0x7800;\n    break;\n  case 8:\n    memoryAddress = &DAT_00007804;\n    break;\n  case 9:\n    memoryAddress = &DAT_00007808;\n    break;\n  case 10:\n    memoryAddress = &DAT_0000780c;\n    break;\n  case 0xb:\n    memoryAddress = &DAT_00007810;\n    break;\n  case 0xc:\n    memoryAddress = &DAT_00007814;\n    break;\n  case 0xd:\n    memoryAddress = &DAT_00007818;\n    break;\n  case 0xe:\n    memoryAddress = &DAT_0000781c;\n    break;\n  case 0xf:\n    memoryAddress = &DAT_00007820;\n    break;\n  case 0x10:\n    memoryAddress = &DAT_00007824;\n    break;\n  case 0x11:\n    memoryAddress = &DAT_0000782c;\n    break;\n  default:\n    memoryAddress = &DAT_00007834;\n    break;\n  case 0x13:\n    memoryAddress = &DAT_00007830;\n    break;\n  case 0x15:\n    memoryAddress = &DAT_00007828;\n  }\n  return memoryAddress;\n}\n\n",
            "renaming": {
                "FUN_00003810": "get_memory_address_00003810",
                "param_1": "value",
                "puVar1": "memoryAddress"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003918": {
            "entrypoint": "0x00003918",
            "current_name": "get_mapped_value_00003918",
            "code": "\nundefined4 getMappedValue_00003918(undefined inputValue)\n\n{\n  undefined4 mappedValue;\n  \n  switch(inputValue) {\n  case 2:\n    mappedValue = 0x68;\n    break;\n  case 3:\n    mappedValue = 0x6b;\n    break;\n  case 6:\n    mappedValue = 0x4d;\n    break;\n  case 9:\n    mappedValue = 0x47;\n    break;\n  case 0xc:\n    mappedValue = 0x54;\n    break;\n  case 0xf:\n    mappedValue = 0x50;\n    break;\n  case 0xf1:\n    mappedValue = 0x66;\n    break;\n  default:\n    mappedValue = 0;\n    break;\n  case 0xf4:\n    mappedValue = 0x70;\n    break;\n  case 0xf7:\n    mappedValue = 0x6e;\n    break;\n  case 0xfa:\n    mappedValue = 0x75;\n    break;\n  case 0xfd:\n    mappedValue = 0x6d;\n  }\n  return mappedValue;\n}\n\n",
            "renaming": {
                "FUN_00003918": "get_mapped_value_00003918",
                "param_1": "inputValue",
                "uVar1": "mappedValue"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000039e8": {
            "entrypoint": "0x000039e8",
            "current_name": "get_class_from_code_000039e8",
            "code": "\nchar * getClassFromCode_000039e8(char code)\n\n{\n  char *className;\n  \n  switch(code) {\n  case '\\0':\n    className = \"CLASS_UNDEF\";\n    break;\n  case '@':\n    className = \"ACT_ANY\";\n    break;\n  case 'B':\n    className = \"ACT_LED_RGB\";\n    break;\n  case 'C':\n    className = \"ACT_SERVO\";\n    break;\n  case 'D':\n    className = \"ACT_MOTOR\";\n    break;\n  case 'E':\n    className = \"ACT_SWITCH\";\n    break;\n  case 'F':\n    className = \"ACT_DIMMER\";\n    break;\n  case -0x80:\n    className = \"SENSE_ANY\";\n    break;\n  case -0x7f:\n    className = \"SENSE_BTN\";\n    break;\n  case -0x7e:\n    className = \"SENSE_TEMP\";\n    break;\n  case -0x7d:\n    className = \"SENSE_HUM\";\n    break;\n  case -0x7c:\n    className = \"SENSE_LIGHT\";\n    break;\n  case -0x7b:\n    className = \"SENSE_ACCEL\";\n    break;\n  case -0x7a:\n    className = \"SENSE_MAG\";\n    break;\n  case -0x79:\n    className = \"SENSE_GYRO\";\n    break;\n  case -0x78:\n    className = \"SENSE_COLOR\";\n    break;\n  case -0x77:\n    className = \"SENSE_PRESS\";\n    break;\n  case -0x76:\n    className = \"SENSE_ANALOG\";\n    break;\n  case -0x75:\n    className = \"SENSE_UV\";\n    break;\n  case -0x74:\n    className = \"SENSE_OBJTEMP\";\n    break;\n  case -0x73:\n    className = \"SENSE_PULSE_COUNT\";\n    break;\n  case -0x72:\n    className = \"SENSE_DISTANCE\";\n    break;\n  case -0x71:\n    className = \"SENSE_CO2\";\n    break;\n  default:\n    if (code == -1) {\n      return \"CLASS_ANY\";\n    }\n  case '\\x01':\n  case '\\x02':\n  case '\\x03':\n  case '\\x04':\n  case '\\x05':\n  case '\\x06':\n  case '\\a':\n  case '\\b':\n  case '\\t':\n  case '\\n':\n  case '\\v':\n  case '\\f':\n  case '\\r':\n  case '\\x0e':\n  case '\\x0f':\n  case '\\x10':\n  case '\\x11':\n  case '\\x12':\n  case '\\x13':\n  case '\\x14':\n  case '\\x15':\n  case '\\x16':\n  case '\\x17':\n  case '\\x18':\n  case '\\x19':\n  case '\\x1a':\n  case '\\x1b':\n  case '\\x1c':\n  case '\\x1d':\n  case '\\x1e':\n  case '\\x1f':\n  case ' ':\n  case '!':\n  case '\\\"':\n  case '#':\n  case '$':\n  case '%':\n  case '&':\n  case '\\'':\n  case '(':\n  case ')':\n  case '*':\n  case '+':\n  case ',':\n  case '-':\n  case '.':\n  case '/':\n  case '0':\n  case '1':\n  case '2':\n  case '3':\n  case '4':\n  case '5':\n  case '6':\n  case '7':\n  case '8':\n  case '9':\n  case ':':\n  case ';':\n  case '<':\n  case '=':\n  case '>':\n  case '?':\n  case 'A':\n  case 'G':\n  case 'H':\n  case 'I':\n  case 'J':\n  case 'K':\n  case 'L':\n  case 'M':\n  case 'N':\n  case 'O':\n  case 'P':\n  case 'Q':\n  case 'R':\n  case 'S':\n  case 'T':\n  case 'U':\n  case 'V':\n  case 'W':\n  case 'X':\n  case 'Y':\n  case 'Z':\n  case '[':\n  case '\\':\n  case ']':\n  case '^':\n  case '_':\n  case '`':\n  case 'a':\n  case 'b':\n  case 'c':\n  case 'd':\n  case 'e':\n  case 'f':\n  case 'g':\n  case 'h':\n  case 'i':\n  case 'j':\n  case 'k':\n  case 'l':\n  case 'm':\n  case 'n':\n  case 'o':\n  case 'p':\n  case 'q':\n  case 'r':\n  case 's':\n  case 't':\n  case 'u':\n  case 'v':\n  case 'w':\n  case 'x':\n  case 'y':\n  case 'z':\n  case '{':\n  case '|':\n  case '}':\n  case '~':\n  case '\\x7f':\n    className = \"CLASS_UNKNOWN\";\n  }\n  return className;\n}\n\n",
            "renaming": {
                "FUN_000039e8": "get_class_from_code_000039e8",
                "param_1": "code",
                "pcVar1": "className"
            },
            "calling": [
                "FUN_00002ecc",
                "FUN_00002f74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d24": {
            "entrypoint": "0x00003d24",
            "current_name": "find_nth_element_00003d24",
            "code": "\nundefined4 * find_nth_element_00003d24(int n)\n\n{\n  int count;\n  undefined4 *current_element;\n  \n  count = 0;\n  for (current_element = DAT_1fff0db0; (count < n && (current_element != (undefined4 *)0x0));\n      current_element = (undefined4 *)*current_element) {\n    count = count + 1;\n  }\n  return current_element;\n}\n\n",
            "renaming": {
                "FUN_00003d24": "find_nth_element_00003d24",
                "param_1": "n",
                "local_10": "count",
                "local_c": "current_element"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d64": {
            "entrypoint": "0x00003d64",
            "current_name": "execute_function_00003d64",
            "code": "\nundefined4 executeFunction_00003d64(int functionPtr,undefined4 inputParam)\n\n{\n  undefined4 returnValue;\n  \n  if (functionPtr == 0) {\n    returnValue = 0xffffffed;\n  }\n  else {\n    returnValue = (***(code ***)(functionPtr + 0xc))(*(undefined4 *)(functionPtr + 4),inputParam);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003d64": "execute_function_00003d64",
                "param_1": "functionPtr",
                "param_2": "inputParam",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00002ecc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d94": {
            "entrypoint": "0x00003d94",
            "current_name": "execute_operation_00003d94",
            "code": "\nundefined4 executeOperation_00003d94(int operationPtr,undefined4 argument)\n\n{\n  undefined4 returnValue;\n  \n  if (operationPtr == 0) {\n    returnValue = 0xffffffed;\n  }\n  else {\n    returnValue = (**(code **)(*(int *)(operationPtr + 0xc) + 4))(*(undefined4 *)(operationPtr + 4),argument);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003d94": "execute_operation_00003d94",
                "param_1": "operationPtr",
                "param_2": "argument",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003dc4": {
            "entrypoint": "0x00003dc4",
            "current_name": "count_digits_00003dc4",
            "code": "\nint countDigits_00003dc4(int startIndex,uint number)\n\n{\n  uint tempNumber;\n  char *destination;\n  uint base;\n  int digitCount;\n  \n  digitCount = 1;\n  if (number < 1000000000) {\n    for (base = 10; base <= number; base = base * 10) {\n      digitCount = digitCount + 1;\n    }\n  }\n  else {\n    digitCount = 10;\n  }\n  if (startIndex != 0) {\n    destination = (char *)(digitCount + startIndex);\n    tempNumber = number;\n    do {\n      destination = destination + -1;\n      *destination = (char)(tempNumber % 10) + '0';\n      tempNumber = tempNumber / 10;\n    } while (tempNumber != 0);\n  }\n  return digitCount;\n}\n\n",
            "renaming": {
                "FUN_00003dc4": "count_digits_00003dc4",
                "param_1": "startIndex",
                "param_2": "number",
                "local_20": "tempNumber",
                "local_14": "destination",
                "local_10": "base",
                "local_c": "digitCount"
            },
            "calling": [
                "FUN_00003e58"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e58": {
            "entrypoint": "0x00003e58",
            "current_name": "calculate_sum_00003e58",
            "code": "\nint calculate_sum_00003e58(undefined *input_array,int array_length)\n\n{\n  int result;\n  int abs_length;\n  undefined *modified_input_array;\n  \n  abs_length = array_length;\n  modified_input_array = input_array;\n  if (-(array_length >> 0x1f) != 0) {\n    if (input_array != (undefined *)0x0) {\n      modified_input_array = input_array + 1;\n      *input_array = 0x2d;\n    }\n    abs_length = -array_length;\n  }\n  result = FUN_00003dc4(modified_input_array,abs_length);\n  return -(array_length >> 0x1f) + result;\n}\n\n",
            "renaming": {
                "FUN_00003e58": "calculate_sum_00003e58",
                "param_1": "input_array",
                "param_2": "array_length",
                "iVar1": "result",
                "local_18": "abs_length",
                "local_14": "modified_input_array"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_00003dc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e9e": {
            "entrypoint": "0x00003e9e",
            "current_name": "process_data_00003e9e",
            "code": "\nundefined4 processData_00003e9e(undefined4 input,short count,undefined4 config)\n\n{\n  undefined4 result;\n  \n  result = FUN_00003ec4(input,(int)count,config);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003e9e": "process_data_00003e9e",
                "param_1": "input",
                "param_2": "count",
                "param_3": "config",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [
                "FUN_00003ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ec4": {
            "entrypoint": "0x00003ec4",
            "current_name": "calculate_result_00003ec4",
            "code": "\nint calculateResult_00003ec4(undefined *outputBuffer,uint inputValue,int numOperations)\n\n{\n  int result;\n  undefined4 length;\n  uint quotient;\n  int remainder;\n  int totalLength;\n  \n  if (numOperations + 7 < 0 != SCARRY4(numOperations,7)) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  totalLength = 0;\n  if (numOperations == 0) {\n    totalLength = FUN_00003e58(outputBuffer,inputValue);\n  }\n  else if (numOperations < 1) {\n    quotient = inputValue / *(uint *)(&DAT_00007978 + numOperations * -4);\n    remainder = inputValue - *(uint *)(&DAT_00007978 + numOperations * -4) * quotient;\n    if (remainder < 0) {\n      remainder = -remainder;\n    }\n    if ((quotient == 0) && ((int)inputValue < 0)) {\n      if (outputBuffer != (undefined *)0x0) {\n        *outputBuffer = 0x2d;\n      }\n      totalLength = 1;\n    }\n    if (outputBuffer == (undefined *)0x0) {\n      result = FUN_00003e58(0,quotient);\n      totalLength = result + 1 + totalLength;\n    }\n    else {\n      result = FUN_00003e58(outputBuffer + totalLength,quotient);\n      result = totalLength + result;\n      totalLength = result + 1;\n      outputBuffer[result] = 0x2e;\n      length = FUN_00003e58(outputBuffer + totalLength,remainder);\n      FUN_00003ff4(outputBuffer + totalLength,length,-numOperations,0x30);\n    }\n    totalLength = -numOperations + totalLength;\n  }\n  else {\n    totalLength = FUN_00003e58(outputBuffer,inputValue);\n    if (outputBuffer != (undefined *)0x0) {\n      FUN_00004622(outputBuffer + totalLength,0x30,numOperations);\n    }\n    totalLength = numOperations + totalLength;\n  }\n  return totalLength;\n}\n\n",
            "renaming": {
                "FUN_00003ec4": "calculate_result_00003ec4",
                "param_1": "outputBuffer",
                "param_2": "inputValue",
                "param_3": "numOperations",
                "iVar1": "result",
                "uVar2": "length",
                "uVar3": "quotient",
                "local_10": "remainder",
                "local_c": "totalLength"
            },
            "calling": [
                "FUN_00003e9e"
            ],
            "called": [
                "FUN_00000f04",
                "FUN_00003e58",
                "FUN_00003ff4",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ff4": {
            "entrypoint": "0x00003ff4",
            "current_name": "calculate_difference_and_execute_00003ff4",
            "code": "\nuint calculateDifferenceAndExecute_00003ff4(int startingValue,uint lowerBound,uint upperBound,undefined undefinedParam)\n\n{\n  uint resultValue;\n  \n  resultValue = lowerBound;\n  if ((lowerBound < upperBound) && (resultValue = upperBound, startingValue != 0)) {\n    FUN_000045ee((upperBound - lowerBound) + startingValue,startingValue,lowerBound);\n    FUN_00004622(startingValue,undefinedParam,upperBound - lowerBound);\n  }\n  return resultValue;\n}\n\n",
            "renaming": {
                "FUN_00003ff4": "calculate_difference_and_execute_00003ff4",
                "param_1": "startingValue",
                "param_2": "lowerBound",
                "param_3": "upperBound",
                "param_4": "undefinedParam",
                "uVar1": "resultValue"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_000045ee",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004042": {
            "entrypoint": "0x00004042",
            "current_name": "initialize_range_00004042",
            "code": "\nvoid initializeRange_00004042(undefined4 input)\n\n{\n  FUN_00004f84(input,0,10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004042": "initialize_range_00004042",
                "param_1": "input"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000404c": {
            "entrypoint": "0x0000404c",
            "current_name": "process_data_0000404c",
            "code": "\nundefined4 processData_0000404c(uint *data,int *info)\n\n{\n  int count;\n  int *tempPtr;\n  uint size;\n  ushort flags;\n  int tempVar;\n  code *callback;\n  int total;\n  uint originalData;\n  bool isZero;\n  \n  flags = *(ushort *)(info + 3);\n  size = (uint)flags;\n  if ((int)(size << 0x1c) < 0) {\n    count = info[4];\n    if (count != 0) {\n      tempVar = size << 0x1e;\n      isZero = tempVar == 0;\n      total = *info;\n      if (isZero) {\n        tempVar = info[5];\n      }\n      *info = count;\n      if (!isZero) {\n        tempVar = 0;\n      }\n      info[2] = tempVar;\n      for (total = total - count; 0 < total; total = total - tempVar) {\n        tempVar = (*(code *)info[10])(data,info[8],count,total);\n        if (tempVar < 1) {\n          *(ushort *)(info + 3) = *(ushort *)(info + 3) | 0x40;\n          return 0xffffffff;\n        }\n        count = count + tempVar;\n      }\n    }\n  }\n  else {\n    if ((info[1] < 1) && (info[0x10] < 1)) {\n      return 0;\n    }\n    callback = (code *)info[0xb];\n    if (callback == (code *)0x0) {\n      return 0;\n    }\n    originalData = *data;\n    *data = 0;\n    if ((flags & 0x1000) == 0) {\n      count = (*callback)(data,info[8],size & 0x1000,1);\n      if ((count == -1) && (size = *data, size != 0)) {\n        if ((size == 0x1d) || (size == 0x16)) {\n          *data = originalData;\n          return 0;\n        }\n        flags = *(ushort *)(info + 3);\n        goto LAB_00004104;\n      }\n    }\n    else {\n      count = info[0x15];\n    }\n    if (((int)((uint)*(ushort *)(info + 3) << 0x1d) < 0) &&\n       (count = count - info[1], info[0xd] != 0)) {\n      count = count - info[0x10];\n    }\n    count = (*(code *)info[0xb])(data,info[8],count,0);\n    flags = *(ushort *)(info + 3);\n    if ((count == -1) &&\n       ((0x1d < *data || (-1 < (int)((0x20400001U >> (*data & 0xff)) << 0x1f))))) {\nLAB_00004104:\n      *(ushort *)(info + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n    info[1] = 0;\n    *info = info[4];\n    if (((int)((uint)flags << 0x13) < 0) && ((count != -1 || (*data == 0)))) {\n      info[0x15] = count;\n    }\n    tempPtr = (int *)info[0xd];\n    *data = originalData;\n    if (tempPtr != (int *)0x0) {\n      if (tempPtr != info + 0x11) {\n        FUN_00004b34(data);\n      }\n      info[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000404c": "process_data_0000404c",
                "param_1": "data",
                "param_2": "info",
                "iVar1": "count",
                "piVar2": "tempPtr",
                "uVar3": "size",
                "uVar4": "flags",
                "iVar5": "tempVar",
                "pcVar6": "callback",
                "iVar7": "total",
                "uVar8": "originalData",
                "bVar9": "isZero"
            },
            "calling": [
                "FUN_00004158",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004158": {
            "entrypoint": "0x00004158",
            "current_name": "check_and_process_data_00004158",
            "code": "\nundefined4 checkAndProcessData_00004158(int inputData,undefined4 *parameters)\n\n{\n  undefined4 returnValue;\n  \n  if (parameters[4] != 0) {\n    if ((inputData != 0) && (*(int *)(inputData + 0x18) == 0)) {\n      FUN_000042a4();\n    }\n    if (parameters == &DAT_000079b8) {\n      parameters = *(undefined4 **)(inputData + 4);\n    }\n    else if (parameters == (undefined4 *)&DAT_000079d8) {\n      parameters = *(undefined4 **)(inputData + 8);\n    }\n    else if (parameters == (undefined4 *)&DAT_00007998) {\n      parameters = *(undefined4 **)(inputData + 0xc);\n    }\n    if (*(short *)(parameters + 3) != 0) {\n      if ((-1 < (int)(parameters[0x19] << 0x1f)) && (-1 < (int)*(short *)(parameters + 3) << 0x16)) {\n        FUNC_000045e8(parameters[0x16]);\n      }\n      returnValue = FUN_0000404c(inputData,parameters);\n      if ((int)(parameters[0x19] << 0x1f) < 0) {\n        return returnValue;\n      }\n      if ((int)((uint)*(ushort *)(parameters + 3) << 0x16) < 0) {\n        return returnValue;\n      }\n      FUNC_000045ec(parameters[0x16]);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004158": "check_and_process_data_00004158",
                "param_1": "inputData",
                "param_2": "parameters",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_000041d0",
                "FUN_00005404",
                "FUN_00006768"
            ],
            "called": [
                "FUN_0000404c",
                "FUN_000045ec",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041d0": {
            "entrypoint": "0x000041d0",
            "current_name": "process_relocation_table_000041d0",
            "code": "\nuint processRelocationTable_000041d0(int address,undefined4 offset,undefined4 size)\n\n{\n  uint result;\n  int numEntries;\n  dword *relocationTable;\n  int entry;\n  uint combinedResult;\n  int counter;\n  undefined4 *relocationAddend;\n  \n  if (address == 0) {\n    relocationAddend = &DAT_000079f8;\n    relocationTable = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n    combinedResult = 0;\n    do {\n      counter = relocationTable[1];\n      entry = relocationTable[2];\n      while (counter = counter + -1, -1 < counter) {\n        if ((1 < *(ushort *)(entry + 0xc)) && (numEntries = *(short *)(entry + 0xe) + 1, numEntries != 0)) {\n          result = FUN_00004158(0x1fff0284,entry,size,numEntries,relocationAddend);\n          combinedResult = combinedResult | result;\n        }\n        entry = entry + 0x68;\n      }\n      relocationTable = (dword *)*relocationTable;\n    } while (relocationTable != (dword *)0x0);\n    return combinedResult;\n  }\n  combinedResult = FUN_00004158(Elf32_Rel_ARRAY_1fff0200[16].r_offset,address);\n  return combinedResult;\n}\n\n",
            "renaming": {
                "FUN_000041d0": "process_relocation_table_000041d0",
                "param_1": "address",
                "param_2": "offset",
                "param_3": "size",
                "uVar1": "result",
                "iVar2": "numEntries",
                "pdVar3": "relocationTable",
                "iVar4": "entry",
                "uVar5": "combinedResult",
                "iVar6": "counter",
                "puVar7": "relocationAddend"
            },
            "calling": [
                "FUN_00002e48"
            ],
            "called": [
                "FUN_00004158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041f4": {
            "entrypoint": "0x000041f4",
            "current_name": "initialize_param_array_000041f4",
            "code": "\nvoid initializeParamArray_000041f4(undefined4 *paramArray,undefined2 value1,undefined2 value2)\n\n{\n  *paramArray = 0;\n  paramArray[1] = 0;\n  paramArray[4] = 0;\n  paramArray[5] = 0;\n  paramArray[2] = 0;\n  *(undefined2 *)(paramArray + 3) = value1;\n  paramArray[0x19] = 0;\n  *(undefined2 *)((int)paramArray + 0xe) = value2;\n  paramArray[6] = 0;\n  FUN_00004622(paramArray + 0x17,0,8);\n  paramArray[9] = 0x4dc9;\n  paramArray[10] = 0x4def;\n  paramArray[0xb] = 0x4e27;\n  paramArray[8] = paramArray;\n  paramArray[0xc] = &label;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000041f4": "initialize_param_array_000041f4",
                "param_1": "paramArray",
                "param_2": "value1",
                "param_3": "value2",
                "LAB_00004e4a_1": "label"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004248": {
            "entrypoint": "0x00004248",
            "current_name": "initialize_data_00004248",
            "code": "\nundefined4 * initializeData_00004248(undefined4 dataPointer,int size)\n\n{\n  undefined4 *resultPointer;\n  int offset;\n  \n  offset = (size + -1) * 0x68;\n  resultPointer = (undefined4 *)FUN_00004bd0(dataPointer,offset + 0x74);\n  if (resultPointer != (undefined4 *)0x0) {\n    *resultPointer = 0;\n    resultPointer[1] = size;\n    resultPointer[2] = resultPointer + 3;\n    FUN_00004622(resultPointer + 3,0,offset + 0x68);\n  }\n  return resultPointer;\n}\n\n",
            "renaming": {
                "FUN_00004248": "initialize_data_00004248",
                "param_1": "dataPointer",
                "param_2": "size",
                "puVar1": "resultPointer",
                "iVar2": "offset"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004274": {
            "entrypoint": "0x00004274",
            "current_name": "initialize_data_00004274",
            "code": "\nvoid initializeData_00004274(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004274": "initialize_data_00004274"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004280": {
            "entrypoint": "0x00004280",
            "current_name": "initialize_data_00004280",
            "code": "\nvoid initializeData_00004280(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004280": "initialize_data_00004280"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000428c": {
            "entrypoint": "0x0000428c",
            "current_name": "initialize_sensor_0000428c",
            "code": "\nvoid initializeSensor_0000428c(void)\n\n{\n  FUNC_000045e8(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000428c": "initialize_sensor_0000428c"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000042a4": {
            "entrypoint": "0x000042a4",
            "current_name": "initialize_params_000042a4",
            "code": "\nvoid initializeParams_000042a4(int param)\n\n{\n  undefined4 defaultValue;\n  \n  FUN_0000428c();\n  if (*(int *)(param + 0x18) == 0) {\n    *(undefined4 *)(param + 0x48) = 0;\n    *(undefined4 *)(param + 0x4c) = 0;\n    *(undefined4 *)(param + 0x50) = 0;\n    defaultValue = 0x1fff0284;\n    *(undefined **)(param + 0x28) = &DAT_0000423d;\n    if (param == 0x1fff0284) {\n      defaultValue = 1;\n    }\n    if (param == 0x1fff0284) {\n      *(undefined4 *)(param + 0x18) = defaultValue;\n    }\n    defaultValue = FUN_00004314(param);\n    *(undefined4 *)(param + 4) = defaultValue;\n    defaultValue = FUN_00004314(param);\n    *(undefined4 *)(param + 8) = defaultValue;\n    defaultValue = FUN_00004314(param);\n    *(undefined4 *)(param + 0xc) = defaultValue;\n    FUN_000041f4(*(undefined4 *)(param + 4),4,0);\n    FUN_000041f4(*(undefined4 *)(param + 8),9,1);\n    FUN_000041f4(*(undefined4 *)(param + 0xc),0x12,2);\n    *(undefined4 *)(param + 0x18) = 1;\n  }\n  FUNC_000045ec(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000042a4": "initialize_params_000042a4",
                "param_1": "param",
                "uVar1": "defaultValue"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004c84",
                "FUN_00004158",
                "FUN_00004db8",
                "FUN_00005e10",
                "FUN_000054a8",
                "FUN_00004314",
                "FUN_00004cb4",
                "FUN_00005404",
                "FUN_00006768",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000041f4",
                "FUN_000045ec",
                "FUN_00004314",
                "FUN_0000428c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004314": {
            "entrypoint": "0x00004314",
            "current_name": "process_relocations_00004314",
            "code": "\nundefined4 * processRelocations_00004314(undefined4 *result)\n\n{\n  dword newEntry;\n  int count;\n  undefined4 *entryPtr;\n  dword *relPtr;\n  \n  FUN_00004274();\n  if (Elf32_Rel_ARRAY_1fff0200[19].r_info == 0) {\n    FUN_000042a4(0x1fff0284);\n  }\n  relPtr = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n  do {\n    count = relPtr[1];\n    entryPtr = (undefined4 *)relPtr[2];\n    while (count = count + -1, -1 < count) {\n      if (*(short *)(entryPtr + 3) == 0) {\n        entryPtr[3] = 0xffff0001;\n        entryPtr[0x19] = 0;\n        FUNC_000045e4(entryPtr + 0x16);\n        FUN_00004280();\n        entryPtr[1] = 0;\n        entryPtr[2] = 0;\n        entryPtr[4] = 0;\n        entryPtr[5] = 0;\n        *entryPtr = 0;\n        entryPtr[6] = 0;\n        FUN_00004622(entryPtr + 0x17,0,8);\n        entryPtr[0xd] = 0;\n        entryPtr[0xe] = 0;\n        entryPtr[0x12] = 0;\n        entryPtr[0x13] = 0;\n        return entryPtr;\n      }\n      entryPtr = entryPtr + 0x1a;\n    }\n    if (*relPtr == 0) {\n      newEntry = FUN_00004248(result,4);\n      *relPtr = newEntry;\n      if (newEntry == 0) {\n        FUN_00004280();\n        *result = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    relPtr = (dword *)*relPtr;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00004314": "process_relocations_00004314",
                "param_1": "result",
                "dVar1": "newEntry",
                "iVar2": "count",
                "puVar3": "entryPtr",
                "pdVar4": "relPtr"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_00004248",
                "FUN_00004274",
                "FUN_000042a4",
                "FUN_00004280",
                "FUN_00004622",
                "FUN_000045e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000043a0": {
            "entrypoint": "0x000043a0",
            "current_name": "find_and_execute_callbacks_000043a0",
            "code": "\nuint find_and_execute_callbacks_000043a0(int callback_list,code *callback_function)\n\n{\n  uint uVar1;\n  int *current_node;\n  int current_callback;\n  uint result;\n  int callback_count;\n  \n  current_node = (int *)(callback_list + 0x48);\n  result = 0;\n  do {\n    callback_count = current_node[1];\n    current_callback = current_node[2];\n    while (callback_count = callback_count + -1, -1 < callback_count) {\n      if ((1 < *(ushort *)(current_callback + 0xc)) && (*(short *)(current_callback + 0xe) != -1)) {\n        uVar1 = (*callback_function)(current_callback);\n        result = result | uVar1;\n      }\n      current_callback = current_callback + 0x68;\n    }\n    current_node = (int *)*current_node;\n  } while (current_node != (int *)0x0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000043a0": "find_and_execute_callbacks_000043a0",
                "param_1": "callback_list",
                "param_2": "callback_function",
                "piVar2": "current_node",
                "iVar3": "current_callback",
                "uVar4": "result",
                "iVar5": "callback_count"
            },
            "calling": [
                "FUN_00006768"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004418": {
            "entrypoint": "0x00004418",
            "current_name": "process_data_00004418",
            "code": "\nuint processData_00004418(void)\n\n{\n  dword relocationOffset;\n  uint returnValue;\n  byte **dataPointer;\n  byte *bytePointer;\n  \n  relocationOffset = relocationTable[16].r_offset;\n  if ((relocationTable[16].r_offset != 0) &&\n     (*(int *)(relocationTable[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(relocationTable[16].r_offset);\n  }\n  dataPointer = *(byte ***)(relocationOffset + 4);\n  if ((relocationOffset != 0) && (*(int *)(relocationOffset + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (dataPointer == (byte **)&DAT_000079b8) {\n    dataPointer = *(byte ***)(relocationOffset + 4);\n  }\n  else if (dataPointer == (byte **)&DAT_000079d8) {\n    dataPointer = *(byte ***)(relocationOffset + 8);\n  }\n  else if (dataPointer == (byte **)&DAT_00007998) {\n    dataPointer = *(byte ***)(relocationOffset + 0xc);\n  }\n  if ((-1 < (int)dataPointer[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(dataPointer + 3) << 0x16))) {\n    FUNC_000045e8(dataPointer[0x16]);\n  }\n  bytePointer = dataPointer[1];\n  dataPointer[1] = bytePointer + -1;\n  if ((int)(bytePointer + -1) < 0) {\n    returnValue = FUN_00005e10(relocationOffset,dataPointer);\n  }\n  else {\n    bytePointer = *dataPointer;\n    *dataPointer = bytePointer + 1;\n    returnValue = (uint)*bytePointer;\n  }\n  if ((-1 < (int)dataPointer[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(dataPointer + 3) << 0x16))) {\n    FUNC_000045ec(dataPointer[0x16]);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00004418": "process_data_00004418",
                "Elf32_Rel_ARRAY_1fff0200": "relocationTable",
                "dVar1": "relocationOffset",
                "uVar2": "returnValue",
                "ppbVar3": "dataPointer",
                "pbVar4": "bytePointer"
            },
            "calling": [
                "FUN_00002d94"
            ],
            "called": [
                "FUN_00005e10",
                "FUN_000045ec",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000443c": {
            "entrypoint": "0x0000443c",
            "current_name": "decode_date_time_0000443c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000044a8) */\n\nuint * decodeDateTime_0000443c(undefined4 *dateTimeInput,uint *decodedDateTime)\n\n{\n  int convertedValue;\n  uint days;\n  uint remainingSeconds;\n  uint uVar4;\n  uint uVar5;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  uint uVar8;\n  bool isNegativeDays;\n  \n  uVar6 = *dateTimeInput;\n  uVar7 = dateTimeInput[1];\n  convertedValue = FUN_00006974(uVar6,uVar7,0x15180,0);\n  remainingSeconds = 0x15180;\n  FUN_00006974(uVar6,uVar7,0x15180,0);\n  isNegativeDays = (int)remainingSeconds < 0;\n  if (isNegativeDays) {\n    remainingSeconds = remainingSeconds + 0x15180;\n  }\n  if (isNegativeDays) {\n    days = convertedValue + 0xafa6b;\n  }\n  else {\n    days = convertedValue + 0xafa6c;\n  }\n  decodedDateTime[2] = remainingSeconds / 0xe10;\n  decodedDateTime[1] = (remainingSeconds % 0xe10) / 0x3c;\n  *decodedDateTime = (remainingSeconds % 0xe10) % 0x3c;\n  decodedDateTime[6] = (days + 3) % 7;\n  remainingSeconds = days;\n  if ((int)days < 0) {\n    remainingSeconds = days - 0x23ab0;\n  }\n  days = (remainingSeconds / 0x23ab1) * -0x23ab1 + days;\n  uVar4 = ((days / 0x8eac + days) - days / 0x5b4) - days / 0x23ab0;\n  uVar5 = uVar4 / 0x16d;\n  days = (uVar5 / 100 - uVar4 / 0x5b4) + days + uVar5 * -0x16d;\n  uVar8 = days * 5 + 2;\n  uVar4 = uVar8 / 0x99;\n  if (uVar8 < 0x5fa) {\n    convertedValue = 2;\n  }\n  else {\n    convertedValue = -10;\n  }\n  uVar8 = uVar4 + convertedValue;\n  convertedValue = (remainingSeconds / 0x23ab1) * 400 + uVar5;\n  if (uVar8 < 2) {\n    convertedValue = convertedValue + 1;\n  }\n  if (days < 0x132) {\n    if (((uVar5 & 3) == 0) && (uVar5 != (uVar5 / 100) * 100)) {\n      remainingSeconds = 1;\n    }\n    else {\n      remainingSeconds = (uint)(uVar5 % 400 == 0);\n    }\n    remainingSeconds = days + 0x3b + remainingSeconds;\n  }\n  else {\n    remainingSeconds = days - 0x132;\n  }\n  decodedDateTime[7] = remainingSeconds;\n  decodedDateTime[3] = (days + 1) - (uVar4 * 0x99 + 2) / 5;\n  decodedDateTime[4] = uVar8;\n  decodedDateTime[5] = convertedValue - 0x76c;\n  decodedDateTime[8] = 0;\n  return decodedDateTime;\n}\n\n",
            "renaming": {
                "FUN_0000443c": "decode_date_time_0000443c",
                "param_1": "dateTimeInput",
                "param_2": "decodedDateTime",
                "iVar1": "convertedValue",
                "uVar2": "days",
                "uVar3": "remainingSeconds",
                "bVar9": "isNegativeDays"
            },
            "calling": [
                "FUN_00002690",
                "FUN_00002624"
            ],
            "called": [
                "FUN_00006974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000459c": {
            "entrypoint": "0x0000459c",
            "current_name": "execute_registered_functions_0000459c",
            "code": "\nvoid execute_registered_functions_0000459c(void)\n\n{\n  code **function_array;\n  int index;\n  \n  function_array = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**function_array)();\n    function_array = function_array + 1;\n  }\n  FUN_00000410();\n  function_array = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**function_array)();\n    function_array = function_array + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000459c": "execute_registered_functions_0000459c",
                "ppcVar1": "function_array",
                "iVar2": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000410"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000045e4": {
            "entrypoint": "0x000045e4",
            "current_name": "FUNC_000045e4",
            "code": "\nvoid FUNC_000045e4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e4": "FUNC_000045e4"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045e8": {
            "entrypoint": "0x000045e8",
            "current_name": "FUNC_000045e8",
            "code": "\nvoid FUNC_000045e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e8": "FUNC_000045e8"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004158",
                "FUN_00004db8",
                "FUN_00004274",
                "FUN_00005fec",
                "FUN_00004cb4",
                "FUN_0000428c",
                "FUN_000057f8",
                "FUN_00005790"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ec": {
            "entrypoint": "0x000045ec",
            "current_name": "FUNC_000045ec",
            "code": "\nvoid FUNC_000045ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ec": "FUNC_000045ec"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00005ff8",
                "FUN_0000579c",
                "FUN_00004158",
                "FUN_00004db8",
                "FUN_00004cb4",
                "FUN_000042a4",
                "FUN_000057f8",
                "FUN_00004280"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ee": {
            "entrypoint": "0x000045ee",
            "current_name": "copy_and_reverse_array_000045ee",
            "code": "\nvoid copyAndReverseArray_000045ee(undefined *sourceArray,undefined *destinationArray,int arrayLength)\n\n{\n  undefined *sourceElement;\n  undefined *destinationElement;\n  \n  destinationElement = destinationArray + arrayLength;\n  if ((destinationArray < sourceArray) && (sourceArray < destinationElement)) {\n    sourceElement = sourceArray + arrayLength;\n    while (sourceElement != sourceArray) {\n      destinationElement = destinationElement + -1;\n      sourceElement = sourceElement + -1;\n      *sourceElement = *destinationElement;\n    }\n  }\n  else {\n    sourceArray = sourceArray + -1;\n    for (; destinationArray != destinationElement; destinationArray = destinationArray + 1) {\n      sourceArray = sourceArray + 1;\n      *sourceArray = *destinationArray;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ee": "copy_and_reverse_array_000045ee",
                "param_1": "sourceArray",
                "param_2": "destinationArray",
                "param_3": "arrayLength",
                "puVar1": "sourceElement",
                "puVar2": "destinationElement"
            },
            "calling": [
                "FUN_00003ff4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004622": {
            "entrypoint": "0x00004622",
            "current_name": "fill_memory_with_value_00004622",
            "code": "\nvoid fillMemoryWithValue_00004622(undefined *memory,undefined value,int size)\n\n{\n  undefined *endAddress;\n  \n  endAddress = memory + size;\n  for (; memory != endAddress; memory = memory + 1) {\n    *memory = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004622": "fill_memory_with_value_00004622",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "endAddress"
            },
            "calling": [
                "FUN_00004248",
                "FUN_000041f4",
                "FUN_00004314",
                "FUN_00003ec4",
                "FUN_00003ff4",
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004634": {
            "entrypoint": "0x00004634",
            "current_name": "update_date_time_00004634",
            "code": "\nvoid updateDateTime_00004634(uint *dateTime,uint days,undefined4 flag)\n\n{\n  int daysInMonth;\n  uint currentDays;\n  uint currentMonth;\n  int daysInYear;\n  bool isNegative;\n  uint *temp;\n  uint currentDay;\n  undefined4 temp2;\n  \n  temp = dateTime;\n  currentDay = days;\n  temp2 = flag;\n  if (0x3b < *dateTime) {\n    FUN_00005584(&temp,*dateTime,0x3c);\n    currentDays = dateTime[1] + (int)temp;\n    dateTime[1] = currentDays;\n    if ((int)currentDay < 0) {\n      currentDays = currentDays - 1;\n      *dateTime = currentDay + 0x3c;\n    }\n    else {\n      *dateTime = currentDay;\n    }\n    if ((int)currentDay < 0) {\n      dateTime[1] = currentDays;\n    }\n  }\n  if (0x3b < dateTime[1]) {\n    FUN_00005584(&temp,dateTime[1],0x3c);\n    isNegative = (int)currentDay < 0;\n    currentMonth = dateTime[2] + (int)temp;\n    dateTime[2] = currentMonth;\n    currentDays = currentDay;\n    if (isNegative) {\n      currentDays = currentDay + 0x3c;\n      currentMonth = currentMonth - 1;\n    }\n    if (!isNegative) {\n      dateTime[1] = currentDays;\n    }\n    if (isNegative) {\n      dateTime[1] = currentDays;\n    }\n    if (isNegative) {\n      dateTime[2] = currentMonth;\n    }\n  }\n  if (0x17 < dateTime[2]) {\n    FUN_00005584(&temp,dateTime[2],0x18);\n    isNegative = (int)currentDay < 0;\n    currentMonth = dateTime[3] + (int)temp;\n    dateTime[3] = currentMonth;\n    currentDays = currentDay;\n    if (isNegative) {\n      currentDays = currentDay + 0x18;\n      currentMonth = currentMonth - 1;\n    }\n    if (!isNegative) {\n      dateTime[2] = currentDays;\n    }\n    if (isNegative) {\n      dateTime[2] = currentDays;\n    }\n    if (isNegative) {\n      dateTime[3] = currentMonth;\n    }\n  }\n  if (0xb < dateTime[4]) {\n    FUN_00005584(&temp,dateTime[4],0xc);\n    isNegative = (int)currentDay < 0;\n    currentDays = dateTime[5] + (int)temp;\n    dateTime[5] = currentDays;\n    if (isNegative) {\n      currentDay = currentDay + 0xc;\n      currentDays = currentDays - 1;\n    }\n    if (!isNegative) {\n      dateTime[4] = currentDay;\n    }\n    if (isNegative) {\n      dateTime[4] = currentDay;\n    }\n    if (isNegative) {\n      dateTime[5] = currentDays;\n    }\n  }\n  currentDays = dateTime[5];\n  if ((currentDays & 3) == 0) {\n    if (currentDays == (currentDays / 100) * 100) {\n      if ((currentDays + 0x76c) % 400 == 0) {\n        daysInYear = 0x1d;\n      }\n      else {\n        daysInYear = 0x1c;\n      }\n    }\n    else {\n      daysInYear = 0x1d;\n    }\n  }\n  else {\n    daysInYear = 0x1c;\n  }\n  if ((int)dateTime[3] < 1) {\n    while ((int)dateTime[3] < 1) {\n      currentDays = dateTime[4];\n      dateTime[4] = currentDays - 1;\n      if (currentDays - 1 == 0xffffffff) {\n        currentMonth = dateTime[5];\n        currentDays = currentMonth - 1;\n        dateTime[4] = 0xb;\n        dateTime[5] = currentDays;\n        if ((currentDays & 3) == 0) {\n          if (currentDays == (currentDays / 100) * 100) {\n            if ((currentMonth + 0x76b) % 400 == 0) {\n              daysInYear = 0x1d;\n            }\n            else {\n              daysInYear = 0x1c;\n            }\n          }\n          else {\n            daysInYear = 0x1d;\n          }\n        }\n        else {\n          daysInYear = 0x1c;\n        }\n      }\n      daysInMonth = daysInYear;\n      if (dateTime[4] != 1) {\n        daysInMonth = (&DAT_000079fc)[dateTime[4]];\n      }\n      dateTime[3] = daysInMonth + dateTime[3];\n    }\n  }\n  else {\n    while( true ) {\n      currentDays = dateTime[4];\n      daysInMonth = daysInYear;\n      if (currentDays != 1) {\n        daysInMonth = (&DAT_000079fc)[currentDays];\n      }\n      if ((int)dateTime[3] <= daysInMonth) break;\n      dateTime[3] = dateTime[3] - daysInMonth;\n      dateTime[4] = currentDays + 1;\n      if (currentDays + 1 == 0xc) {\n        currentMonth = dateTime[5];\n        currentDays = currentMonth + 1;\n        dateTime[4] = 0;\n        dateTime[5] = currentDays;\n        if ((currentDays & 3) == 0) {\n          if (currentDays % 100 == 0) {\n            if ((currentMonth + 0x76d) % 400 == 0) {\n              daysInYear = 0x1d;\n            }\n            else {\n              daysInYear = 0x1c;\n            }\n          }\n          else {\n            daysInYear = 0x1d;\n          }\n        }\n        else {\n          daysInYear = 0x1c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004634": "update_date_time_00004634",
                "param_1": "dateTime",
                "param_2": "days",
                "param_3": "flag",
                "iVar1": "daysInMonth",
                "uVar2": "currentDays",
                "uVar3": "currentMonth",
                "iVar4": "daysInYear",
                "bVar5": "isNegative",
                "local_20": "temp",
                "local_1c": "currentDay",
                "uStack_18": "temp2"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005584"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000047e4": {
            "entrypoint": "0x000047e4",
            "current_name": "calculate_date_offset_000047e4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00004ab2) */\n\nundefined8 calculateDateOffset_000047e4(int *dateParams)\n\n{\n  longlong totalDays;\n  longlong newTotalDays;\n  int *pointer;\n  uint tempVar4;\n  int tempVar5;\n  int tempVar6;\n  int tempVar7;\n  uint tempVar8;\n  uint tempVar9;\n  uint tempVar10;\n  int tempVar11;\n  uint tempVar12;\n  uint tempVar13;\n  uint tempVar14;\n  uint tempVar15;\n  bool boolVar16;\n  \n  pointer = (int *)FUN_000056b0();\n  FUN_00004634(dateParams);\n  tempVar12 = dateParams[5];\n  tempVar11 = dateParams[3] + -1 + *(int *)(&DAT_00007a2c + dateParams[4] * 4);\n  if (((1 < dateParams[4]) && ((tempVar12 & 3) == 0)) &&\n     ((tempVar12 != (tempVar12 / 100) * 100 || (tempVar12 + 0x76c == ((tempVar12 + 0x76c) / 400) * 400)))) {\n    tempVar11 = tempVar11 + 1;\n  }\n  dateParams[7] = tempVar11;\n  if (20000 < (int)&DAT_00002710 + tempVar12) {\n    tempVar7 = -1;\n    tempVar5 = -1;\n    goto LAB_00004aba;\n  }\n  if ((int)tempVar12 < 0x47) {\n    if (tempVar12 != 0x46) {\n      for (tempVar9 = 0x45; (int)tempVar12 < (int)tempVar9; tempVar9 = tempVar9 - 1) {\n        if ((tempVar9 & 3) == 0) {\n          if (tempVar9 == (tempVar9 / 100) * 100) {\n            if ((tempVar9 + 0x76c) % 400 == 0) {\n              tempVar7 = 0x16e;\n            }\n            else {\n              tempVar7 = 0x16d;\n            }\n          }\n          else {\n            tempVar7 = 0x16e;\n          }\n        }\n        else {\n          tempVar7 = 0x16d;\n        }\n        tempVar11 = tempVar11 - tempVar7;\n      }\n      if ((tempVar9 & 3) == 0) {\n        if (tempVar12 == (tempVar12 / 100) * 100) {\n          tempVar7 = 0x16d;\n          if ((tempVar12 + 0x76c) % 400 == 0) {\n            tempVar7 = 0x16e;\n          }\n        }\n        else {\n          tempVar7 = 0x16e;\n        }\n      }\n      else {\n        tempVar7 = 0x16d;\n      }\n      tempVar11 = tempVar11 - tempVar7;\n    }\n  }\n  else {\n    tempVar9 = 0x46;\n    do {\n      if ((tempVar9 & 3) == 0) {\n        if (tempVar9 % 100 == 0) {\n          if ((tempVar9 + 0x76c) % 400 == 0) {\n            tempVar7 = 0x16e;\n          }\n          else {\n            tempVar7 = 0x16d;\n          }\n        }\n        else {\n          tempVar7 = 0x16e;\n        }\n      }\n      else {\n        tempVar7 = 0x16d;\n      }\n      tempVar9 = tempVar9 + 1;\n      tempVar11 = tempVar11 + tempVar7;\n    } while (tempVar12 != tempVar9);\n  }\n  totalDays = (longlong)tempVar11 * 0x15180 + (longlong)(dateParams[2] * 0xe10 + dateParams[1] * 0x3c + *dateParams)\n  ;\n  tempVar15 = (uint)totalDays;\n  tempVar7 = (int)((ulonglong)totalDays >> 0x20);\n  FUN_000050e8();\n  FUN_00005100();\n  tempVar9 = DAT_1fff0dd8;\n  if (DAT_1fff0dd8 == 0) {\nLAB_00004934:\n    tempVar12 = pointer[10];\n    tempVar7 = (uint)totalDays + tempVar12;\n    tempVar5 = (int)((ulonglong)totalDays >> 0x20) +\n            ((int)tempVar12 >> 0x1f) + (uint)CARRY4((uint)totalDays,tempVar12);\n  }\n  else {\n    tempVar14 = dateParams[8];\n    tempVar13 = tempVar14;\n    if (0 < (int)tempVar14) {\n      tempVar13 = 1;\n    }\n    if ((pointer[1] == dateParams[5] + 0x76c) || (tempVar5 = FUN_00004f98(), tempVar5 != 0)) {\n      tempVar10 = pointer[0x14];\n      tempVar4 = pointer[0x12];\n      tempVar8 = pointer[10];\n      tempVar9 = tempVar4 - tempVar8;\n      tempVar5 = (pointer[0x13] - ((int)tempVar8 >> 0x1f)) - (uint)(tempVar4 < tempVar8);\n      if (((int)((tempVar7 - tempVar5) - (uint)(tempVar15 < tempVar9)) < 0 ==\n           (SBORROW4(tempVar7,tempVar5) != SBORROW4(tempVar7 - tempVar5,(uint)(tempVar15 < tempVar9)))) &&\n         (tempVar6 = (pointer[0x13] - ((int)tempVar10 >> 0x1f)) - (uint)(tempVar4 < tempVar10),\n         boolVar16 = tempVar15 < tempVar4 - tempVar10,\n         (int)((tempVar7 - tempVar6) - (uint)boolVar16) < 0 !=\n         (SBORROW4(tempVar7,tempVar6) != SBORROW4(tempVar7 - tempVar6,(uint)boolVar16)))) goto LAB_00004a88;\n      tempVar4 = pointer[8] - tempVar10;\n      tempVar6 = (pointer[9] - ((int)tempVar10 >> 0x1f)) - (uint)((uint)pointer[8] < tempVar10);\n      if (*pointer != 0) {\n        if ((int)((tempVar7 - tempVar6) - (uint)(tempVar15 < tempVar4)) < 0 ==\n            (SBORROW4(tempVar7,tempVar6) != SBORROW4(tempVar7 - tempVar6,(uint)(tempVar15 < tempVar4))))\n        goto LAB_0000491e;\nLAB_0000492a:\n        tempVar9 = 0;\n        if ((int)tempVar14 < 0) goto LAB_00004934;\nLAB_00004a14:\n        tempVar15 = tempVar13 ^ tempVar9;\n        tempVar13 = tempVar9;\n        if (tempVar15 == 1) {\n          if (tempVar9 == 0) {\n            tempVar7 = tempVar10 - tempVar8;\n          }\n          else {\n            tempVar7 = tempVar8 - tempVar10;\n          }\n          tempVar5 = dateParams[3];\n          *dateParams = *dateParams + tempVar7;\n          newTotalDays = totalDays + tempVar7;\n          FUN_00004634(dateParams);\n          tempVar5 = dateParams[3] - tempVar5;\n          totalDays = totalDays + tempVar7;\n          if (tempVar5 != 0) {\n            if (tempVar5 < 2) {\n              if (tempVar5 == -2 || tempVar5 + 2 < 0 != SCARRY4(tempVar5,2)) {\n                tempVar5 = 1;\n              }\n            }\n            else {\n              tempVar5 = -1;\n            }\n            tempVar7 = tempVar5 + dateParams[7];\n            tempVar11 = tempVar11 + tempVar5;\n            if (tempVar7 < 0) {\n              tempVar9 = tempVar12 - 1;\n              if ((tempVar9 & 3) == 0) {\n                if (tempVar9 == (tempVar9 / 100) * 100) {\n                  tempVar7 = 0x16d;\n                  if ((tempVar12 + 0x76b) % 400 != 0) {\n                    tempVar7 = 0x16c;\n                  }\n                }\n                else {\n                  tempVar7 = 0x16d;\n                }\n              }\n              else {\n                tempVar7 = 0x16c;\n              }\n            }\n            else {\n              if ((tempVar12 & 3) == 0) {\n                if (tempVar12 == (tempVar12 / 100) * 100) {\n                  tempVar5 = 0x16d;\n                  if ((tempVar12 + 0x76c) % 400 == 0) {\n                    tempVar5 = 0x16e;\n                  }\n                }\n                else {\n                  tempVar5 = 0x16e;\n                }\n              }\n              else {\n                tempVar5 = 0x16d;\n              }\n              if (tempVar5 <= tempVar7) {\n                tempVar7 = tempVar7 - tempVar5;\n              }\n            }\n            dateParams[7] = tempVar7;\n            totalDays = newTotalDays;\n          }\n        }\n        goto LAB_00004a88;\n      }\n      if ((int)((tempVar7 - tempVar6) - (uint)(tempVar15 < tempVar4)) < 0 !=\n          (SBORROW4(tempVar7,tempVar6) != SBORROW4(tempVar7 - tempVar6,(uint)(tempVar15 < tempVar4)))) {\nLAB_0000491e:\n        if ((int)((tempVar7 - tempVar5) - (uint)(tempVar15 < tempVar9)) < 0 ==\n            (SBORROW4(tempVar7,tempVar5) != SBORROW4(tempVar7 - tempVar5,(uint)(tempVar15 < tempVar9))))\n        goto LAB_0000492a;\n      }\n      if (-1 < (int)tempVar14) {\n        tempVar9 = 1;\n        goto LAB_00004a14;\n      }\n    }\n    else {\nLAB_00004a88:\n      tempVar9 = tempVar13;\n      if (tempVar13 != 1) goto LAB_00004934;\n    }\n    tempVar12 = pointer[0x14];\n    tempVar7 = (uint)totalDays + tempVar12;\n    tempVar5 = (int)((ulonglong)totalDays >> 0x20) +\n            ((int)tempVar12 >> 0x1f) + (uint)CARRY4((uint)totalDays,tempVar12);\n    tempVar9 = 1;\n  }\n  FUN_000050f4();\n  dateParams[8] = tempVar9;\n  dateParams[6] = (tempVar11 + 4U) % 7;\nLAB_00004aba:\n  return CONCAT44(tempVar5,tempVar7);\n}\n\n",
            "renaming": {
                "FUN_000047e4": "calculate_date_offset_000047e4",
                "param_1": "dateParams",
                "lVar1": "totalDays",
                "lVar2": "newTotalDays",
                "piVar3": "pointer",
                "uVar4": "tempVar4",
                "iVar5": "tempVar5",
                "iVar6": "tempVar6",
                "iVar7": "tempVar7",
                "uVar8": "tempVar8",
                "uVar9": "tempVar9",
                "uVar10": "tempVar10",
                "iVar11": "tempVar11",
                "uVar12": "tempVar12",
                "uVar13": "tempVar13",
                "uVar14": "tempVar14",
                "uVar15": "tempVar15",
                "bVar16": "boolVar16"
            },
            "calling": [
                "FUN_00002654",
                "FUN_00002600"
            ],
            "called": [
                "FUN_00004f98",
                "FUN_00005100",
                "FUN_000050e8",
                "FUN_000050f4",
                "FUN_00004634",
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004b34": {
            "entrypoint": "0x00004b34",
            "current_name": "update_data_structure_00004b34",
            "code": "\nvoid updateDataStructure_00004b34(undefined4 *result,int size,undefined4 arg3,undefined4 arg4)\n\n{\n  int *temp;\n  int **tempPtr;\n  int **currentNode;\n  int **prevNode;\n  int **tempNode;\n  int **newNode;\n  bool isLastNode;\n  \n  if (size == 0) {\n    return;\n  }\n  newNode = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    newNode = (int **)((int)newNode + *(int *)(size + -4));\n  }\n  FUN_00005790();\n  prevNode = (int **)&DAT_1fff0db4;\n  if (DAT_1fff0db4 == (int **)0x0) {\n    newNode[1] = (int *)0x0;\n    currentNode = tempPtr;\n    DAT_1fff0db4 = newNode;\n  }\n  else {\n    tempNode = DAT_1fff0db4;\n    if (newNode < DAT_1fff0db4) {\n      currentNode = (int **)*newNode;\n      prevNode = (int **)((int)newNode + (int)currentNode);\n      isLastNode = DAT_1fff0db4 == prevNode;\n      if (isLastNode) {\n        prevNode = (int **)*DAT_1fff0db4;\n        DAT_1fff0db4 = (int **)DAT_1fff0db4[1];\n      }\n      newNode[1] = (int *)DAT_1fff0db4;\n      DAT_1fff0db4 = newNode;\n      if (isLastNode) {\n        prevNode = (int **)((int)prevNode + (int)currentNode);\n        *newNode = (int *)prevNode;\n      }\n    }\n    else {\n      do {\n        prevNode = tempNode;\n        tempNode = (int **)prevNode[1];\n        if (tempNode == (int **)0x0) break;\n      } while (tempNode <= newNode);\n      currentNode = (int **)*prevNode;\n      if ((int **)((int)prevNode + (int)currentNode) == newNode) {\n        currentNode = (int **)((int)currentNode + (int)*newNode);\n        *prevNode = (int *)currentNode;\n        if (tempNode == (int **)((int)prevNode + (int)currentNode)) {\n          temp = *tempNode;\n          prevNode[1] = tempNode[1];\n          currentNode = (int **)((int)currentNode + (int)temp);\n          *prevNode = (int *)currentNode;\n        }\n      }\n      else if (newNode < (int **)((int)prevNode + (int)currentNode)) {\n        *result = 0xc;\n      }\n      else {\n        currentNode = (int **)((int)newNode + (int)*newNode);\n        isLastNode = tempNode == currentNode;\n        if (isLastNode) {\n          currentNode = (int **)*tempNode;\n          tempNode = (int **)tempNode[1];\n        }\n        newNode[1] = (int *)tempNode;\n        if (isLastNode) {\n          currentNode = (int **)((int)currentNode + (int)*newNode);\n          *newNode = (int *)currentNode;\n        }\n        prevNode[1] = (int *)newNode;\n      }\n    }\n  }\n  FUN_0000579c(result,currentNode,prevNode,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004b34": "update_data_structure_00004b34",
                "param_1": "result",
                "param_2": "size",
                "param_3": "arg3",
                "param_4": "arg4",
                "piVar1": "temp",
                "extraout_r1": "tempPtr",
                "ppiVar2": "currentNode",
                "ppiVar3": "prevNode",
                "ppiVar4": "tempNode",
                "ppiVar5": "newNode",
                "bVar6": "isLastNode"
            },
            "calling": [
                "FUN_0000404c",
                "FUN_000054a8",
                "FUN_00006192",
                "FUN_00006768",
                "FUN_000060cc",
                "FUN_00005780"
            ],
            "called": [
                "FUN_0000579c",
                "FUN_00005790"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004bd0": {
            "entrypoint": "0x00004bd0",
            "current_name": "allocate_memory_00004bd0",
            "code": "\nuint allocate_memory_00004bd0(undefined4 *output_ptr,uint size,undefined4 param_3,undefined4 param_4)\n\n{\n  uint *prev_block;\n  int difference;\n  uint block_size;\n  uint *curr_block;\n  uint requested_size;\n  \n  requested_size = (size + 3 & 0xfffffffc) + 8;\n  if (requested_size < 0xc) {\n    requested_size = 0xc;\n  }\n  if (((int)requested_size < 0) || (requested_size < size)) {\n    *output_ptr = 0xc;\n  }\n  else {\n    FUN_00005790();\n    prev_block = DAT_1fff0db4;\n    for (curr_block = DAT_1fff0db4; curr_block != (uint *)0x0; curr_block = (uint *)curr_block[1]) {\n      block_size = *curr_block - requested_size;\n      if (-1 < (int)block_size) {\n        if (0xb < block_size) {\n          *curr_block = block_size;\n          curr_block = (uint *)((int)curr_block + block_size);\n          goto LAB_00004c34;\n        }\n        if (prev_block == curr_block) {\n          DAT_1fff0db4 = (uint *)curr_block[1];\n        }\n        if (prev_block != curr_block) {\n          prev_block[1] = (uint)(uint *)curr_block[1];\n        }\n        goto LAB_00004c42;\n      }\n      prev_block = curr_block;\n    }\n    if (DAT_1fff0db8 == 0) {\n      DAT_1fff0db8 = FUN_00000428(output_ptr,0,prev_block,0,param_4);\n    }\n    prev_block = (uint *)FUN_00000428(output_ptr,requested_size);\n    if ((prev_block != (uint *)0xffffffff) &&\n       ((curr_block = (uint *)((int)prev_block + 3U & 0xfffffffc), prev_block == curr_block ||\n        (difference = FUN_00000428(output_ptr,(int)curr_block - (int)prev_block), difference != -1)))) {\nLAB_00004c34:\n      *curr_block = requested_size;\nLAB_00004c42:\n      FUN_0000579c(output_ptr);\n      requested_size = (int)curr_block + 0xbU & 0xfffffff8;\n      difference = requested_size - (int)(curr_block + 1);\n      if (difference == 0) {\n        return requested_size;\n      }\n      *(uint *)((int)curr_block + difference) = (int)(curr_block + 1) - requested_size;\n      return requested_size;\n    }\n    *output_ptr = 0xc;\n    FUN_0000579c(output_ptr);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004bd0": "allocate_memory_00004bd0",
                "param_1": "output_ptr",
                "param_2": "size",
                "puVar1": "prev_block",
                "iVar2": "difference",
                "uVar3": "block_size",
                "puVar4": "curr_block",
                "uVar5": "requested_size"
            },
            "calling": [
                "FUN_00005700",
                "FUN_00004248",
                "FUN_00005100",
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "called": [
                "FUN_00000428",
                "FUN_0000579c",
                "FUN_00005790"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004c84": {
            "entrypoint": "0x00004c84",
            "current_name": "process_relocation_00004c84",
            "code": "\nvoid processRelocation_00004c84(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  dword relocationOffset;\n  undefined4 tempVar;\n  undefined4 tempStackVar1;\n  undefined4 tempStackVar2;\n  undefined4 tempStackVar3;\n  \n  relocationOffset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  tempVar = input1;\n  tempStackVar1 = input2;\n  tempStackVar2 = input3;\n  tempStackVar3 = input4;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  FUN_000057f8(relocationOffset,*(undefined4 *)(relocationOffset + 8),input1,&tempStackVar1,tempVar,&tempStackVar1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004c84": "process_relocation_00004c84",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "dVar1": "relocationOffset",
                "uVar2": "tempVar",
                "uStack_c": "tempStackVar1",
                "uStack_8": "tempStackVar2",
                "uStack_4": "tempStackVar3"
            },
            "calling": [
                "FUN_00003694",
                "FUN_00002b10",
                "FUN_00000ed8",
                "FUN_0000211c",
                "FUN_0000305c",
                "FUN_00002a88",
                "FUN_00002f74",
                "FUN_00000f04",
                "FUN_00003378",
                "FUN_00002ecc",
                "FUN_00002fe0",
                "FUN_00003524",
                "FUN_0000316c"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_000057f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004cb4": {
            "entrypoint": "0x00004cb4",
            "current_name": "decode_and_update_value_00004cb4",
            "code": "\nuint decode_and_update_value_00004cb4(uint input_value)\n\n{\n  dword offset;\n  undefined4 *data_ptr;\n  uint updated_value;\n  undefined *data_byte_ptr;\n  undefined4 reserved_r4;\n  undefined4 reserved_r5;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  data_ptr = *(undefined4 **)(offset + 8);\n  if ((offset != 0) && (*(int *)(offset + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (data_ptr == &DAT_000079b8) {\n    data_ptr = *(undefined4 **)(offset + 4);\n  }\n  else if (data_ptr == (undefined4 *)&DAT_000079d8) {\n    data_ptr = *(undefined4 **)(offset + 8);\n  }\n  else if (data_ptr == (undefined4 *)&DAT_00007998) {\n    data_ptr = *(undefined4 **)(offset + 0xc);\n  }\n  if ((-1 < (int)(data_ptr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x16))) {\n    FUNC_000045e8(data_ptr[0x16]);\n  }\n  updated_value = data_ptr[2] - 1;\n  data_ptr[2] = updated_value;\n  if (((int)updated_value < 0) && (((int)updated_value < (int)data_ptr[6] || (updated_value = input_value & 0xff, updated_value == 10))))\n  {\n    input_value = FUN_00005404(offset,input_value,data_ptr,updated_value,reserved_r4,reserved_r5);\n  }\n  else {\n    data_byte_ptr = (undefined *)*data_ptr;\n    *data_ptr = data_byte_ptr + 1;\n    *data_byte_ptr = (char)input_value;\n    input_value = input_value & 0xff;\n  }\n  if ((-1 < (int)(data_ptr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x16))) {\n    FUNC_000045ec(data_ptr[0x16]);\n  }\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_00004cb4": "decode_and_update_value_00004cb4",
                "param_1": "input_value",
                "dVar1": "offset",
                "puVar2": "data_ptr",
                "uVar3": "updated_value",
                "puVar4": "data_byte_ptr",
                "unaff_r4": "reserved_r4",
                "unaff_r5": "reserved_r5"
            },
            "calling": [
                "FUN_00002a00"
            ],
            "called": [
                "FUN_000045ec",
                "FUN_00005404",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004db8": {
            "entrypoint": "0x00004db8",
            "current_name": "parse_and_process_data_00004db8",
            "code": "\nundefined4 parse_and_process_data_00004db8(int input_data)\n\n{\n  char current_char;\n  dword rel_offset;\n  int result;\n  char *string_ptr;\n  char **data_ptr_ptr;\n  undefined4 return_value;\n  char *char_ptr;\n  \n  rel_offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  data_ptr_ptr = *(char ***)(rel_offset + 8);\n  if (*(int *)(rel_offset + 0x18) == 0) {\n    FUN_000042a4(rel_offset);\n  }\n  if (data_ptr_ptr == (char **)&DAT_000079b8) {\n    data_ptr_ptr = *(char ***)(rel_offset + 4);\n  }\n  else if (data_ptr_ptr == (char **)&DAT_000079d8) {\n    data_ptr_ptr = *(char ***)(rel_offset + 8);\n  }\n  else if (data_ptr_ptr == (char **)&DAT_00007998) {\n    data_ptr_ptr = *(char ***)(rel_offset + 0xc);\n  }\n  if ((-1 < (int)data_ptr_ptr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(data_ptr_ptr + 3) << 0x16))) {\n    FUNC_000045e8(data_ptr_ptr[0x16]);\n  }\n  if ((((int)((uint)*(ushort *)(data_ptr_ptr + 3) << 0x1c) < 0) && (data_ptr_ptr[4] != (char *)0x0)) ||\n     (result = FUN_000054a8(rel_offset,data_ptr_ptr), result == 0)) {\n    char_ptr = (char *)(input_data + -1);\n    do {\n      while( true ) {\n        char_ptr = char_ptr + 1;\n        current_char = *char_ptr;\n        string_ptr = data_ptr_ptr[2] + -1;\n        data_ptr_ptr[2] = string_ptr;\n        if (current_char == '\\0') {\n          if (-1 < (int)string_ptr) {\n            char_ptr = *data_ptr_ptr;\n            return_value = 10;\n            *data_ptr_ptr = char_ptr + 1;\n            *char_ptr = '\\n';\n            goto LAB_00004d64;\n          }\n          result = FUN_00005404(rel_offset,10,data_ptr_ptr);\n          if (result != -1) {\n            return_value = 10;\n            goto LAB_00004d64;\n          }\n          goto LAB_00004d60;\n        }\n        if (((int)string_ptr < 0) && (((int)string_ptr < (int)data_ptr_ptr[6] || (current_char == '\\n')))) break;\n        string_ptr = *data_ptr_ptr;\n        *data_ptr_ptr = string_ptr + 1;\n        *string_ptr = current_char;\n      }\n      result = FUN_00005404(rel_offset,current_char,data_ptr_ptr);\n    } while (result != -1);\n  }\nLAB_00004d60:\n  return_value = 0xffffffff;\nLAB_00004d64:\n  if ((-1 < (int)data_ptr_ptr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(data_ptr_ptr + 3) << 0x16))) {\n    FUNC_000045ec(data_ptr_ptr[0x16]);\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00004db8": "parse_and_process_data_00004db8",
                "param_1": "input_data",
                "cVar1": "current_char",
                "dVar2": "rel_offset",
                "iVar3": "result",
                "pcVar4": "string_ptr",
                "ppcVar5": "data_ptr_ptr",
                "uVar6": "return_value",
                "pcVar7": "char_ptr"
            },
            "calling": [
                "FUN_000023a4",
                "FUN_00003694",
                "FUN_00002b10",
                "FUN_000033c0",
                "FUN_0000305c",
                "FUN_00002a88",
                "FUN_00003478",
                "FUN_00002f74",
                "FUN_000034c0",
                "FUN_000033f4",
                "FUN_00003444",
                "FUN_00002fe0",
                "FUN_000031e0",
                "FUN_00002f30"
            ],
            "called": [
                "FUN_000054a8",
                "FUN_000045ec",
                "FUN_00005404",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dc8": {
            "entrypoint": "0x00004dc8",
            "current_name": "update_value_00004dc8",
            "code": "\nvoid updateValue_00004dc8(undefined4 input,int data)\n\n{\n  int result;\n  uint newValue;\n  bool isPositive;\n  \n  result = FUN_00000490(input,(int)*(short *)(data + 0xe));\n  isPositive = -1 < result;\n  if (isPositive) {\n    newValue = *(int *)(data + 0x54) + result;\n  }\n  else {\n    newValue = *(ushort *)(data + 0xc) & 0xffffefff;\n  }\n  if (isPositive) {\n    *(uint *)(data + 0x54) = newValue;\n  }\n  if (!isPositive) {\n    *(short *)(data + 0xc) = (short)newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004dc8": "update_value_00004dc8",
                "param_1": "input",
                "param_2": "data",
                "iVar1": "result",
                "uVar2": "newValue",
                "bVar3": "isPositive"
            },
            "calling": [],
            "called": [
                "FUN_00000490"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dee": {
            "entrypoint": "0x00004dee",
            "current_name": "process_data_00004dee",
            "code": "\nundefined4 processData_00004dee(undefined4 data,int ptr,undefined4 input,undefined4 output)\n\n{\n  undefined4 result;\n  \n  if ((int)((uint)*(ushort *)(ptr + 0xc) << 0x17) < 0) {\n    FUN_000004f2(data,(int)*(short *)(ptr + 0xe),0,2);\n  }\n  *(ushort *)(ptr + 0xc) = *(ushort *)(ptr + 0xc) & 0xefff;\n  result = FUN_00000e38(input,output);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004dee": "process_data_00004dee",
                "param_1": "data",
                "param_2": "ptr",
                "param_3": "input",
                "param_4": "output",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_000004f2",
                "FUN_00000e38"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e26": {
            "entrypoint": "0x00004e26",
            "current_name": "update_status_00004e26",
            "code": "\nvoid updateStatus_00004e26(undefined4 unknownParam,int dataAddress)\n\n{\n  int result;\n  ushort statusFlags;\n  bool isFailure;\n  \n  result = FUN_000004f2(unknownParam,(int)*(short *)(dataAddress + 0xe));\n  isFailure = result == -1;\n  if (isFailure) {\n    statusFlags = *(ushort *)(dataAddress + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(dataAddress + 0x54) = result;\n    statusFlags = *(ushort *)(dataAddress + 0xc) | 0x1000;\n  }\n  if (isFailure) {\n    *(ushort *)(dataAddress + 0xc) = statusFlags;\n  }\n  if (!isFailure) {\n    *(ushort *)(dataAddress + 0xc) = statusFlags;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004e26": "update_status_00004e26",
                "param_1": "unknownParam",
                "param_2": "dataAddress",
                "iVar1": "result",
                "uVar2": "statusFlags",
                "bVar3": "isFailure"
            },
            "calling": [],
            "called": [
                "FUN_000004f2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e52": {
            "entrypoint": "0x00004e52",
            "current_name": "compare_and_subtract_00004e52",
            "code": "\nint compareAndSubtract_00004e52(byte *input1,byte *input2)\n\n{\n  byte input2Val;\n  uint input1Val;\n  bool isMatch;\n  \n  do {\n    input1Val = (uint)*input1;\n    input2Val = *input2;\n    isMatch = input1Val == 1;\n    if (input1Val != 0) {\n      isMatch = input1Val == input2Val;\n    }\n    input1 = input1 + 1;\n    input2 = input2 + 1;\n  } while (isMatch);\n  return input1Val - input2Val;\n}\n\n",
            "renaming": {
                "FUN_00004e52": "compare_and_subtract_00004e52",
                "param_1": "input1",
                "param_2": "input2",
                "uVar2": "input1Val",
                "bVar1": "input2Val",
                "bVar3": "isMatch"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00002fe0",
                "FUN_00002b10",
                "FUN_0000316c",
                "FUN_00004e52",
                "FUN_00002a18"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e66": {
            "entrypoint": "0x00004e66",
            "current_name": "compare_byte_arrays_00004e66",
            "code": "\nint compareByteArrays_00004e66(byte *array1,int array1StartIndex,int array1Length)\n\n{\n  byte *currentByte1;\n  int difference;\n  byte *currentByte2;\n  uint byteValue;\n  \n  if (array1Length == 0) {\n    difference = 0;\n  }\n  else {\n    currentByte2 = (byte *)(array1StartIndex + -1);\n    currentByte1 = array1;\n    do {\n      byteValue = (uint)*currentByte1;\n      currentByte2 = currentByte2 + 1;\n      if ((byteValue != *currentByte2) || (currentByte1 + 1 == array1 + array1Length)) break;\n      currentByte1 = currentByte1 + 1;\n    } while (byteValue != 0);\n    difference = byteValue - *currentByte2;\n  }\n  return difference;\n}\n\n",
            "renaming": {
                "FUN_00004e66": "compare_byte_arrays_00004e66",
                "param_1": "array1",
                "param_2": "array1StartIndex",
                "param_3": "array1Length",
                "pbVar1": "currentByte1",
                "iVar2": "difference",
                "pbVar3": "currentByte2",
                "uVar4": "byteValue"
            },
            "calling": [
                "FUN_0000562c",
                "FUN_00003524"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f84": {
            "entrypoint": "0x00004f84",
            "current_name": "parse_integer_00004f84",
            "code": "\nuint parseInteger_00004f84(byte *input,byte **parsedValue,uint base)\n\n{\n  uint result;\n  uint charValue;\n  uint isNegative;\n  uint digitValue;\n  int compareResult;\n  uint maxValue;\n  uint divisor;\n  byte *currentChar;\n  byte *nextChar;\n  \n  nextChar = input;\n  do {\n    currentChar = nextChar;\n    nextChar = currentChar + 1;\n    charValue = (uint)*currentChar;\n    isNegative = (byte)(&DAT_00007a99)[charValue] & 8;\n  } while (((&DAT_00007a99)[charValue] & 8) != 0);\n  if (charValue == 0x2d) {\n    charValue = (uint)*nextChar;\n    isNegative = 1;\n    nextChar = currentChar + 2;\n  }\n  else if (charValue == 0x2b) {\n    charValue = (uint)*nextChar;\n    nextChar = currentChar + 2;\n  }\n  if (base == 0) {\n    if (charValue != 0x30) {\n      base = 10;\n      goto LAB_00004ed6;\n    }\n  }\n  else if ((base != 0x10) || (charValue != 0x30)) goto LAB_00004ed6;\n  if ((*nextChar & 0xdf) == 0x58) {\n    charValue = (uint)nextChar[1];\n    base = 0x10;\n    nextChar = nextChar + 2;\n  }\n  else {\n    charValue = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00004ed6:\n  maxValue = isNegative + 0x7fffffff;\n  compareResult = 0;\n  divisor = maxValue / base;\n  result = 0;\n  do {\n    digitValue = charValue - 0x30;\n    if (9 < digitValue) {\n      if (charValue - 0x41 < 0x1a) {\n        digitValue = charValue - 0x37;\n      }\n      else {\n        if (0x19 < charValue - 0x61) break;\n        digitValue = charValue - 0x57;\n      }\n    }\n    if ((int)base <= (int)digitValue) break;\n    if (compareResult != -1) {\n      if ((divisor < result) || ((divisor == result && ((int)(maxValue - base * divisor) < (int)digitValue)))) {\n        compareResult = -1;\n      }\n      else {\n        result = result * base + digitValue;\n        compareResult = 1;\n      }\n    }\n    charValue = (uint)*nextChar;\n    nextChar = nextChar + 1;\n  } while( true );\n  if (compareResult == -1) {\n    *(undefined4 *)Elf32_Rel_ARRAY_1fff0200[16].r_offset = 0x22;\n    result = maxValue;\n    if (parsedValue == (byte **)0x0) {\n      return maxValue;\n    }\n  }\n  else {\n    if (isNegative != 0) {\n      result = -result;\n    }\n    if (parsedValue == (byte **)0x0) {\n      return result;\n    }\n    if (compareResult == 0) goto LAB_00004f64;\n  }\n  input = nextChar + -1;\nLAB_00004f64:\n  *parsedValue = input;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004f84": "parse_integer_00004f84",
                "param_1": "input",
                "param_2": "parsedValue",
                "param_3": "base",
                "uVar1": "result",
                "uVar2": "charValue",
                "uVar3": "isNegative",
                "uVar4": "digitValue",
                "iVar5": "compareResult",
                "uVar6": "maxValue",
                "uVar7": "divisor",
                "pbVar8": "currentChar",
                "pbVar9": "nextChar"
            },
            "calling": [
                "FUN_0000328c",
                "FUN_00004042"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f98": {
            "entrypoint": "0x00004f98",
            "current_name": "calculate_day_of_week_00004f98",
            "code": "\nundefined4 calculateDayOfWeek_00004f98(uint year)\n\n{\n  uint *result;\n  undefined4 isLeapYear;\n  uint dayOfWeekOffset;\n  int dayOfWeek;\n  uint *monthData;\n  int yearOffset;\n  uint leapYearOffset;\n  int monthOffset;\n  int startDayOffset;\n  uint isDivisibleBy400;\n  \n  result = (uint *)FUN_000056b0();\n  if ((int)year < 0x7b2) {\n    isLeapYear = 0;\n  }\n  else {\n    yearOffset = (year - 0x7b2) * 0x16d + ((int)(year - 0x7b1) >> 2) +\n            (year - 0x76d) / 0xffffff9c + (year - 0x641) / 400;\n    result[1] = year;\n    isDivisibleBy400 = (uint)(year % 400 == 0);\n    monthData = result;\n    do {\n      dayOfWeekOffset = monthData[5];\n      if (*(char *)(monthData + 2) == 'J') {\n        if ((((year & 3) == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\n          if ((int)dayOfWeekOffset < 0x3c) {\n            dayOfWeek = 0;\n          }\n          else {\n            dayOfWeek = 1;\n          }\n        }\n        else {\n          dayOfWeek = 0;\n        }\n        dayOfWeek = dayOfWeek + yearOffset + dayOfWeekOffset + -1;\n      }\n      else if (*(char *)(monthData + 2) == 'D') {\n        dayOfWeek = yearOffset + dayOfWeekOffset;\n      }\n      else {\n        leapYearOffset = isDivisibleBy400;\n        if (((year & 3) == 0) && (year % 100 != 0)) {\n          leapYearOffset = 1;\n        }\n        monthOffset = 0;\n        dayOfWeek = yearOffset;\n        while( true ) {\n          monthOffset = monthOffset + 1;\n          if ((int)monthData[3] <= monthOffset) break;\n          dayOfWeek = dayOfWeek + *(int *)(&UNK_00007b98 + monthOffset * 4 + leapYearOffset * 0x30);\n        }\n        startDayOffset = dayOfWeekOffset - (dayOfWeek + 4U) % 7;\n        if (startDayOffset < 0) {\n          startDayOffset = startDayOffset + 7;\n        }\n        for (startDayOffset = (monthData[4] - 1) * 7 + startDayOffset;\n            *(int *)(&UNK_00007b98 + monthOffset * 4 + leapYearOffset * 0x30) <= startDayOffset; startDayOffset = startDayOffset + -7) {\n        }\n        dayOfWeek = dayOfWeek + startDayOffset;\n      }\n      dayOfWeekOffset = monthData[10] + dayOfWeek * 0x15180 + monthData[6];\n      monthData[8] = dayOfWeekOffset;\n      monthData[9] = (int)dayOfWeekOffset >> 0x1f;\n      monthData = monthData + 10;\n    } while (result + 0x14 != monthData);\n    dayOfWeekOffset = result[9];\n    isDivisibleBy400 = result[0x13];\n    *result = (uint)((int)((dayOfWeekOffset - isDivisibleBy400) - (uint)(result[8] < result[0x12])) < 0 !=\n                    (SBORROW4(dayOfWeekOffset,isDivisibleBy400) !=\n                    SBORROW4(dayOfWeekOffset - isDivisibleBy400,(uint)(result[8] < result[0x12]))));\n    isLeapYear = 1;\n  }\n  return isLeapYear;\n}\n\n",
            "renaming": {
                "FUN_00004f98": "calculate_day_of_week_00004f98",
                "param_1": "year",
                "puVar1": "result",
                "uVar2": "isLeapYear",
                "uVar3": "dayOfWeekOffset",
                "iVar4": "dayOfWeek",
                "puVar5": "monthData",
                "iVar6": "yearOffset",
                "uVar7": "leapYearOffset",
                "iVar8": "monthOffset",
                "iVar9": "startDayOffset",
                "uVar10": "isDivisibleBy400"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000047e4"
            ],
            "called": [
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050e8": {
            "entrypoint": "0x000050e8",
            "current_name": "get_memory_address_000050e8",
            "code": "\nundefined * get_memory_address_000050e8(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050e8": "get_memory_address_000050e8"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050f4": {
            "entrypoint": "0x000050f4",
            "current_name": "get_data_address_000050f4",
            "code": "\nundefined * get_data_address_000050f4(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050f4": "get_data_address_000050f4"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005100": {
            "entrypoint": "0x00005100",
            "current_name": "parse_config_data_00005100",
            "code": "\nvoid parseConfigData_00005100(void)\n\n{\n  dword offset;\n  int configStruct;\n  char *configData;\n  int result;\n  int length;\n  undefined type;\n  char *parsePtr;\n  bool isFirst;\n  ushort *ptr1;\n  int *parseIndex1;\n  ushort *ptr2;\n  int *parseIndex2;\n  ushort segment1;\n  ushort segment2;\n  ushort segment3;\n  ushort segment4;\n  ushort segment5;\n  ushort segment6;\n  int parseIndex3;\n  char *parseResult [2];\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  configStruct = FUN_000056b0();\n  configData = (char *)FUN_000056a0(offset,&DAT_00007a5c);\n  if (configData == (char *)0x0) {\n    Elf32_Rel_ARRAY_1fff0200[28].r_info = (dword)&DAT_00007a5f;\n    Elf32_Rel_ARRAY_1fff0200[29].r_offset = (dword)&DAT_00007a5f;\n    DAT_1fff0dd8 = configData;\n    DAT_1fff0ddc = configData;\n    FUN_00005780(DAT_1fff0dd4);\n    DAT_1fff0dd4 = 0;\n  }\n  else if ((DAT_1fff0dd4 == 0) || (result = FUN_00004e52(), result != 0)) {\n    FUN_00005780(DAT_1fff0dd4);\n    result = FUN_00005ecc(configData);\n    DAT_1fff0dd4 = FUN_00004bd0(offset,result + 1);\n    if (DAT_1fff0dd4 != 0) {\n      FUN_00005ebc(DAT_1fff0dd4,configData);\n    }\n    if (*configData == ':') {\n      configData = configData + 1;\n    }\n    result = FUN_00005e68(configData,\"%10[^0-9,+-]%n\",&DAT_1fff0dc7,&parseIndex3);\n    if (0 < result) {\n      parsePtr = configData + parseIndex3;\n      if (configData[parseIndex3] == '-') {\n        parsePtr = parsePtr + 1;\n        result = -1;\n      }\n      else {\n        if (configData[parseIndex3] == '+') {\n          parsePtr = parsePtr + 1;\n        }\n        result = 1;\n      }\n      segment2 = 0;\n      segment3 = 0;\n      ptr1 = &segment2;\n      parseIndex1 = &parseIndex3;\n      ptr2 = &segment3;\n      parseIndex2 = &parseIndex3;\n      length = FUN_00005e68(parsePtr,\"%hu%n:%hu%n:%hu%n\",&segment1,&parseIndex3,&segment2,&parseIndex3,\n                           &segment3,&parseIndex3);\n      if (0 < length) {\n        *(uint *)(configStruct + 0x28) =\n             ((uint)segment1 * 0xe10 + (uint)segment2 * 0x3c + (uint)segment3) * result;\n        Elf32_Rel_ARRAY_1fff0200[28].r_info = (dword)&DAT_1fff0dc7;\n        parsePtr = parsePtr + parseIndex3;\n        result = FUN_00005e68(parsePtr,\"%10[^0-9,+-]%n\",&DAT_1fff0dbc,&parseIndex3,ptr1,parseIndex1,ptr2,\n                             parseIndex2);\n        if (result < 1) {\n          Elf32_Rel_ARRAY_1fff0200[29].r_offset = Elf32_Rel_ARRAY_1fff0200[28].r_info;\n          DAT_1fff0ddc = *(char **)(configStruct + 0x28);\n          DAT_1fff0dd8 = (char *)0x0;\n        }\n        else {\n          Elf32_Rel_ARRAY_1fff0200[29].r_offset = (dword)&DAT_1fff0dbc;\n          configData = parsePtr + parseIndex3;\n          if (parsePtr[parseIndex3] == '-') {\n            configData = configData + 1;\n            result = -1;\n          }\n          else {\n            if (parsePtr[parseIndex3] == '+') {\n              configData = configData + 1;\n            }\n            result = 1;\n          }\n          segment1 = 0;\n          segment2 = 0;\n          segment3 = 0;\n          parseIndex3 = 0;\n          length = FUN_00005e68(configData,\"%hu%n:%hu%n:%hu%n\",&segment1,&parseIndex3,&segment2,&parseIndex3,\n                               &segment3,&parseIndex3);\n          if (length < 1) {\n            result = *(int *)(configStruct + 0x28) + -0xe10;\n          }\n          else {\n            result = ((uint)segment1 * 0xe10 + (uint)segment2 * 0x3c + (uint)segment3) * result;\n          }\n          *(int *)(configStruct + 0x50) = result;\n          configData = configData + parseIndex3;\n          isFirst = false;\n          result = configStruct;\n          while( true ) {\n            if (*configData == ',') {\n              configData = configData + 1;\n            }\n            if (*configData == 'M') {\n              length = FUN_00005e68(configData,\"M%hu%n.%hu%n.%hu%n\",&segment4,&parseIndex3,&segment5,\n                                   &parseIndex3,&segment6,&parseIndex3);\n              if (length != 3) {\n                return;\n              }\n              if (0xb < segment4 - 1) {\n                return;\n              }\n              if (4 < segment5 - 1) {\n                return;\n              }\n              if (6 < segment6) {\n                return;\n              }\n              *(uint *)(result + 0xc) = (uint)segment4;\n              *(uint *)(result + 0x10) = (uint)segment5;\n              *(undefined *)(result + 8) = 0x4d;\n              *(uint *)(result + 0x14) = (uint)segment6;\n              parsePtr = configData + parseIndex3;\n            }\n            else {\n              if (*configData == 'J') {\n                configData = configData + 1;\n                type = 0x4a;\n              }\n              else {\n                type = 0x44;\n              }\n              segment6 = FUN_00005fd8(configData,parseResult,10);\n              parsePtr = parseResult[0];\n              if (parseResult[0] == configData) {\n                if (isFirst) {\n                  *(undefined *)(configStruct + 0x30) = 0x4d;\n                  *(undefined4 *)(configStruct + 0x34) = 0xb;\n                  *(undefined4 *)(configStruct + 0x38) = 1;\n                  *(undefined4 *)(configStruct + 0x3c) = 0;\n                }\n                else {\n                  *(undefined *)(configStruct + 8) = 0x4d;\n                  *(undefined4 *)(configStruct + 0xc) = 3;\n                  *(undefined4 *)(configStruct + 0x10) = 2;\n                  *(undefined4 *)(configStruct + 0x14) = 0;\n                }\n              }\n              else {\n                *(undefined *)(result + 8) = type;\n                *(uint *)(result + 0x14) = (uint)segment6;\n              }\n            }\n            segment1 = 2;\n            segment2 = 0;\n            segment3 = 0;\n            parseIndex3 = 0;\n            if (*parsePtr == '/') {\n              FUN_00005e68(parsePtr,&DAT_00007a85,&segment1,&parseIndex3,&segment2,&parseIndex3,&segment3,\n                           &parseIndex3);\n            }\n            *(uint *)(result + 0x18) =\n                 (uint)segment1 * 0xe10 + (uint)segment2 * 0x3c + (uint)segment3;\n            result = result + 0x28;\n            configData = parsePtr + parseIndex3;\n            if (isFirst) break;\n            isFirst = true;\n          }\n          FUN_00004f98(*(undefined4 *)(configStruct + 4));\n          DAT_1fff0ddc = *(char **)(configStruct + 0x28);\n          DAT_1fff0dd8 = (char *)(*(int *)(configStruct + 0x50) - (int)DAT_1fff0ddc);\n          if (DAT_1fff0dd8 != (char *)0x0) {\n            DAT_1fff0dd8 = (char *)0x1;\n          }\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005100": "parse_config_data_00005100",
                "dVar1": "offset",
                "iVar2": "configStruct",
                "pcVar3": "configData",
                "iVar4": "result",
                "iVar5": "length",
                "uVar6": "type",
                "pcVar7": "parsePtr",
                "bVar8": "isFirst",
                "puVar9": "ptr1",
                "piVar10": "parseIndex1",
                "puVar11": "ptr2",
                "piVar12": "parseIndex2",
                "local_3c": "segment1",
                "local_3a": "segment2",
                "local_38": "segment3",
                "local_36": "segment4",
                "local_34": "segment5",
                "local_32": "segment6",
                "local_30": "parseIndex3",
                "local_2c": "parseResult"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005ecc",
                "FUN_00005fd8",
                "FUN_00004f98",
                "FUN_00005ebc",
                "FUN_00004bd0",
                "FUN_00005e68",
                "FUN_000056b0",
                "FUN_00005780",
                "FUN_000056a0",
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005404": {
            "entrypoint": "0x00005404",
            "current_name": "process_data_00005404",
            "code": "\nuint processData_00005404(int dataPointer,uint value,int *array,undefined4 param)\n\n{\n  int tempVar1;\n  uint tempVar2;\n  undefined *ptr;\n  \n  if ((dataPointer != 0) && (*(int *)(dataPointer + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (array == &DAT_000079b8) {\n    array = *(int **)(dataPointer + 4);\n  }\n  else if (array == (int *)&DAT_000079d8) {\n    array = *(int **)(dataPointer + 8);\n  }\n  else if (array == (int *)&DAT_00007998) {\n    array = *(int **)(dataPointer + 0xc);\n  }\n  array[2] = array[6];\n  tempVar2 = (uint)*(ushort *)(array + 3);\n  tempVar1 = tempVar2 << 0x1c;\n  if (((tempVar1 < 0) && (tempVar2 = array[4], tempVar2 != 0)) ||\n     (tempVar1 = FUN_000054a8(dataPointer,array,tempVar1,tempVar2,param), tempVar1 == 0)) {\n    tempVar1 = *array - array[4];\n    value = value & 0xff;\n    if ((tempVar1 < array[5]) || (tempVar1 = FUN_00004158(dataPointer,array), tempVar1 == 0)) {\n      array[2] = array[2] + -1;\n      ptr = (undefined *)*array;\n      *array = (int)(ptr + 1);\n      *ptr = (char)value;\n      if (array[5] != tempVar1 + 1) {\n        if (-1 < (int)((uint)*(ushort *)(array + 3) << 0x1f)) {\n          return value;\n        }\n        if (value != 10) {\n          return value;\n        }\n      }\n      tempVar1 = FUN_00004158(dataPointer,array);\n      if (tempVar1 == 0) {\n        return value;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00005404": "process_data_00005404",
                "param_1": "dataPointer",
                "param_2": "value",
                "param_3": "array",
                "param_4": "param",
                "iVar1": "tempVar1",
                "uVar2": "tempVar2",
                "puVar3": "ptr",
                "param_3[2]": "array[2]"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_00004cb4",
                "FUN_000057a8"
            ],
            "called": [
                "FUN_00004158",
                "FUN_000054a8",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000054a8": {
            "entrypoint": "0x000054a8",
            "current_name": "process_data_000054a8",
            "code": "\nuint processData_000054a8(undefined4 *outputPtr,undefined4 *inputPtr)\n\n{\n  ushort flag;\n  dword offset;\n  ushort temp;\n  uint value;\n  uint temp2;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  if (inputPtr == &DAT_000079b8) {\n    inputPtr = *(undefined4 **)(offset + 4);\n  }\n  else if (inputPtr == (undefined4 *)&DAT_000079d8) {\n    inputPtr = *(undefined4 **)(offset + 8);\n  }\n  else if (inputPtr == (undefined4 *)&DAT_00007998) {\n    inputPtr = *(undefined4 **)(offset + 0xc);\n  }\n  value = (uint)*(ushort *)(inputPtr + 3);\n  temp = *(ushort *)(inputPtr + 3);\n  if (-1 < (int)(value << 0x1c)) {\n    if (-1 < (int)(value << 0x1b)) {\n      *outputPtr = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(value << 0x1d) < 0) {\n      if ((undefined4 *)inputPtr[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)inputPtr[0xd] != inputPtr + 0x11) {\n          FUN_00004b34(outputPtr);\n        }\n        inputPtr[0xd] = 0;\n      }\n      *(ushort *)(inputPtr + 3) = *(ushort *)(inputPtr + 3) & 0xffdb;\n      inputPtr[1] = 0;\n      *inputPtr = inputPtr[4];\n    }\n    *(ushort *)(inputPtr + 3) = *(ushort *)(inputPtr + 3) | 8;\n  }\n  if ((inputPtr[4] == 0) && ((*(ushort *)(inputPtr + 3) & 0x280) != 0x200)) {\n    FUN_00005700(outputPtr,inputPtr);\n  }\n  flag = *(ushort *)(inputPtr + 3);\n  value = (uint)flag;\n  temp = *(ushort *)(inputPtr + 3);\n  temp2 = value & 1;\n  if ((flag & 1) == 0) {\n    if (-1 < (int)(value << 0x1e)) {\n      temp2 = inputPtr[5];\n    }\n    inputPtr[2] = temp2;\n  }\n  else {\n    inputPtr[2] = 0;\n    inputPtr[6] = -inputPtr[5];\n  }\n  if (inputPtr[4] != 0) {\n    return 0;\n  }\n  if ((flag & 0x80) == 0) {\n    return value & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(inputPtr + 3) = temp | 0x40;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000054a8": "process_data_000054a8",
                "param_1": "outputPtr",
                "param_2": "inputPtr",
                "uVar1": "flag",
                "dVar2": "offset",
                "uVar3": "temp",
                "uVar4": "value",
                "uVar5": "temp2"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_00005404",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_00005700",
                "FUN_00004b34",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005584": {
            "entrypoint": "0x00005584",
            "current_name": "divide_and_remainder_00005584",
            "code": "\nvoid divideAndRemainder_00005584(uint *quotientAndRemainder,uint dividend,uint divisor)\n\n{\n  uint remainder;\n  uint quotient;\n  \n  quotient = dividend / divisor;\n  remainder = dividend - divisor * quotient;\n  if ((int)dividend < 0) {\n    if (0 < (int)remainder) {\n      quotient = quotient - 1;\n      remainder = remainder + divisor;\n    }\n  }\n  else if ((int)remainder < 0) {\n    quotient = quotient + 1;\n    remainder = remainder - divisor;\n  }\n  *quotientAndRemainder = quotient;\n  quotientAndRemainder[1] = remainder;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005584": "divide_and_remainder_00005584",
                "param_1": "quotientAndRemainder",
                "param_2": "dividend",
                "param_3": "divisor",
                "uVar1": "remainder",
                "uVar2": "quotient"
            },
            "calling": [
                "FUN_00004634"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000562c": {
            "entrypoint": "0x0000562c",
            "current_name": "find_and_parse_key_value_0000562c",
            "code": "\nint find_and_parse_key_value_0000562c(undefined4 param_1,char *key_value_string,int *result_index)\n\n{\n  char current_char;\n  int *current_entry;\n  int entry_result;\n  char *current_char_ptr;\n  int *entry_ptr;\n  int string_offset;\n  \n  FUN_00005fec();\n  current_char_ptr = key_value_string;\n  if (Elf32_Rel_ARRAY_1fff0200[41].r_offset != 0) {\n    do {\n      current_char = *current_char_ptr;\n      if (current_char == '\\0') {\n        string_offset = (int)current_char_ptr - (int)key_value_string;\n        current_entry = (int *)Elf32_Rel_ARRAY_1fff0200[41].r_offset;\n        while( true ) {\n          entry_ptr = current_entry;\n          if (*entry_ptr == 0) break;\n          entry_result = FUN_00004e66(*entry_ptr,key_value_string,string_offset);\n          current_entry = entry_ptr + 1;\n          if ((entry_result == 0) && (entry_result = *entry_ptr, *(char *)(entry_result + string_offset) == '=')) {\n            *result_index = (int)((int)entry_ptr - Elf32_Rel_ARRAY_1fff0200[41].r_offset) >> 2;\n            FUN_00005ff8(param_1);\n            return entry_result + string_offset + 1;\n          }\n        }\n        break;\n      }\n      current_char_ptr = current_char_ptr + 1;\n    } while (current_char != '=');\n  }\n  FUN_00005ff8(param_1);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000562c": "find_and_parse_key_value_0000562c",
                "param_2": "key_value_string",
                "param_3": "result_index",
                "cVar1": "current_char",
                "piVar2": "current_entry",
                "iVar3": "entry_result",
                "pcVar4": "current_char_ptr",
                "piVar5": "entry_ptr",
                "iVar6": "string_offset"
            },
            "calling": [
                "FUN_000056a0"
            ],
            "called": [
                "FUN_00005ff8",
                "FUN_00004e66",
                "FUN_00005fec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056a0": {
            "entrypoint": "0x000056a0",
            "current_name": "function_name_000056a0",
            "code": "\nvoid functionName_000056a0(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 temp1;\n  undefined4 temp2;\n  \n  temp1 = input2;\n  temp2 = input3;\n  FUN_0000562c(input1,input2,&temp1,input4,input1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000056a0": "function_name_000056a0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uStack_c": "temp1",
                "uStack_8": "temp2"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_0000562c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b0": {
            "entrypoint": "0x000056b0",
            "current_name": "get_default_value_000056b0",
            "code": "\nundefined4 get_default_value_000056b0(void)\n\n{\n  return 0x1fff02f0;\n}\n\n",
            "renaming": {
                "FUN_000056b0": "get_default_value_000056b0"
            },
            "calling": [
                "FUN_00004f98",
                "FUN_00005100",
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b8": {
            "entrypoint": "0x000056b8",
            "current_name": "check_and_set_permissions_000056b8",
            "code": "\nundefined4 check_and_set_permissions_000056b8(undefined4 param_1,int input,undefined4 *result,uint *flag)\n\n{\n  int status;\n  undefined4 permission;\n  undefined temp_buffer [4];\n  uint temp;\n  \n  if ((*(short *)(input + 0xe) < 0) ||\n     (status = FUN_00000514(param_1,(int)*(short *)(input + 0xe),temp_buffer), status < 0)) {\n    *flag = 0;\n    if ((int)((uint)*(ushort *)(input + 0xc) << 0x18) < 0) {\n      permission = 0x40;\n      goto set_permission;\n    }\n  }\n  else {\n    *flag = (uint)((temp & 0xf000) == 0x2000);\n  }\n  permission = 0x400;\nset_permission:\n  *result = permission;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000056b8": "check_and_set_permissions_000056b8",
                "param_2": "input",
                "param_3": "result",
                "param_4": "flag",
                "iVar1": "status",
                "uVar2": "permission",
                "auStack_68": "temp_buffer",
                "local_64": "temp",
                "LAB_000056f8": "set_permission"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [
                "FUN_00000514"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005700": {
            "entrypoint": "0x00005700",
            "current_name": "process_data_00005700",
            "code": "\nvoid processData_00005700(int inputValue,int *buffer)\n\n{\n  ushort temp1;\n  int temp2;\n  int localValue1;\n  int *localValue2;\n  \n  if (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x1e)) {\n    localValue1 = inputValue;\n    localValue2 = buffer;\n    temp1 = FUN_000056b8(inputValue,buffer,&localValue1,&localValue2);\n    temp2 = FUN_00004bd0(inputValue,localValue1);\n    if (temp2 != 0) {\n      *(undefined **)(inputValue + 0x28) = &DAT_0000423d;\n      *buffer = temp2;\n      *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x80;\n      buffer[5] = localValue1;\n      buffer[4] = temp2;\n      if ((localValue2 != (int *)0x0) &&\n         (temp2 = FUN_00000534(inputValue,(int)*(short *)((int)buffer + 0xe)), temp2 != 0)) {\n        *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(buffer + 3) = temp1 | *(ushort *)(buffer + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(buffer + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) & 0xfffc | 2;\n  }\n  *buffer = (int)buffer + 0x47;\n  buffer[4] = (int)buffer + 0x47;\n  buffer[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005700": "process_data_00005700",
                "param_1": "inputValue",
                "param_2": "buffer",
                "uVar1": "temp1",
                "iVar2": "temp2",
                "local_18": "localValue1",
                "local_14": "localValue2"
            },
            "calling": [
                "FUN_000054a8",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00000534",
                "FUN_00004bd0",
                "FUN_000056b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005780": {
            "entrypoint": "0x00005780",
            "current_name": "execute_relocation_00005780",
            "code": "\nvoid executeRelocation_00005780(undefined4 data)\n\n{\n  FUN_00004b34(relocationTable[16].r_offset,data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005780": "execute_relocation_00005780",
                "param_1": "data",
                "Elf32_Rel_ARRAY_1fff0200": "relocationTable"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005790": {
            "entrypoint": "0x00005790",
            "current_name": "initialize_data_00005790",
            "code": "\nvoid initializeData_00005790(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005790": "initialize_data_00005790"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000579c": {
            "entrypoint": "0x0000579c",
            "current_name": "initialize_data_0000579c",
            "code": "\nvoid initializeData_0000579c(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000579c": "initialize_data_0000579c"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057a8": {
            "entrypoint": "0x000057a8",
            "current_name": "decrement_and_store_000057a8",
            "code": "\nint decrementAndStore_000057a8(undefined4 inputParam,int value,undefined4 *arrayParam)\n\n{\n  int index;\n  undefined *ptr;\n  \n  index = arrayParam[2] + -1;\n  arrayParam[2] = index;\n  if ((index < 0) && ((index < (int)arrayParam[6] || (value == 10)))) {\n    index = FUN_00005404();\n    return index;\n  }\n  ptr = (undefined *)*arrayParam;\n  *arrayParam = ptr + 1;\n  *ptr = (char)value;\n  return value;\n}\n\n",
            "renaming": {
                "FUN_000057a8": "decrement_and_store_000057a8",
                "param_1": "inputParam",
                "param_2": "value",
                "param_3": "arrayParam",
                "iVar1": "index",
                "puVar2": "ptr"
            },
            "calling": [
                "FUN_000057d2"
            ],
            "called": [
                "FUN_00005404"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057d2": {
            "entrypoint": "0x000057d2",
            "current_name": "process_data_000057d2",
            "code": "\nint process_data_000057d2(undefined4 input_param1,undefined4 input_param2,undefined *data_array,int array_size)\n\n{\n  int result;\n  undefined *end_ptr;\n  int index;\n  \n  end_ptr = data_array + array_size;\n  index = array_size;\n  do {\n    if (data_array == end_ptr) {\n      return 0;\n    }\n    result = FUN_000057a8(input_param1,*data_array,input_param2,array_size,index);\n    array_size = result + 1;\n    data_array = data_array + 1;\n  } while (array_size != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000057d2": "process_data_000057d2",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "data_array",
                "param_4": "array_size",
                "iVar1": "result",
                "puVar2": "end_ptr",
                "iVar3": "index"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000057a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057f8": {
            "entrypoint": "0x000057f8",
            "current_name": "parse_and_process_data_000057f8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000059f0) */\n\nint parseAndProcessData_000057f8(int dataStruct,undefined4 *header,byte *payload,int *result)\n\n{\n  int index;\n  int returnValue;\n  int *ptrResult;\n  bool isValid;\n  byte *ptrPayload;\n  int tempVar;\n  byte *ptr;\n  int *ptrResult;\n  uint flag;\n  int precision;\n  undefined4 unusedVariable;\n  int length;\n  int totalLength;\n  byte formatSpecifier;\n  undefined spaceFlag;\n  undefined plusFlag;\n  undefined alternateFormFlag;\n  undefined4 alignmentFlags;\n  \n  if ((dataStruct != 0) && (*(int *)(dataStruct + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (header == &DAT_000079b8) {\n    header = *(undefined4 **)(dataStruct + 4);\n  }\n  else if (header == (undefined4 *)&DAT_000079d8) {\n    header = *(undefined4 **)(dataStruct + 8);\n  }\n  else if (header == (undefined4 *)&DAT_00007998) {\n    header = *(undefined4 **)(dataStruct + 0xc);\n  }\n  if ((-1 < (int)(header[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(header + 3) << 0x16))) {\n    FUNC_000045e8(header[0x16]);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(header + 3) << 0x1c)) || (header[4] == 0)) &&\n     (index = FUN_000054a8(dataStruct,header), index != 0)) {\n    if ((-1 < (int)(header[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(header + 3) << 0x16)))\n    {\n      FUNC_000045ec(header[0x16]);\n    }\n    return -1;\n  }\n  totalLength = 0;\n  spaceFlag = 0x20;\n  plusFlag = 0x30;\n  ptr = payload;\n  ptrResult = result;\nLAB_0000588e:\n  ptrPayload = ptr;\n  if (*ptrPayload != 0) goto code_r0x00005896;\n  goto LAB_0000589a;\ncode_r0x00005896:\n  ptr = ptrPayload + 1;\n  if (*ptrPayload == 0x25) {\nLAB_0000589a:\n    index = (int)ptrPayload - (int)payload;\n    if (index != 0) {\n      returnValue = FUN_000057d2(dataStruct,header,payload,index);\n      if (returnValue == -1) {\nLAB_00005a06:\n        if ((-1 < (int)(header[0x19] << 0x1f)) &&\n           (-1 < (int)((uint)*(ushort *)(header + 3) << 0x16))) {\n          FUNC_000045ec(header[0x16]);\n        }\n        if ((int)((uint)*(ushort *)(header + 3) << 0x19) < 0) {\n          return -1;\n        }\n        return totalLength;\n      }\n      totalLength = totalLength + index;\n    }\n    if (*ptrPayload == 0) goto LAB_00005a06;\n    precision = -1;\n    unusedVariable = 0;\n    flag = 0;\n    length = 0;\n    alternateFormFlag = 0;\n    alignmentFlags = 0;\n    ptr = ptrPayload + 1;\n    while( true ) {\n      ptrPayload = ptr + 1;\n      index = FUN_00006010(\"#-0+ \",*ptr,5);\n      if (index == 0) break;\n      flag = 1 << (index - 0x7bfcU & 0xff) | flag;\n      ptr = ptrPayload;\n    }\n    if ((int)(flag << 0x1b) < 0) {\n      alternateFormFlag = 0x20;\n    }\n    if ((int)(flag << 0x1c) < 0) {\n      alternateFormFlag = 0x2b;\n    }\n    if (*ptr == 0x2a) {\n      ptrResult = ptrResult + 1;\n      length = *ptrResult;\n      ptrResult = ptrResult;\n      if (length < 0) {\n        length = -length;\n        flag = flag | 2;\n      }\n    }\n    else {\n      isValid = false;\n      index = length;\n      ptrPayload = ptr;\n      while( true ) {\n        if (9 < *ptrPayload - 0x30) break;\n        index = index * 10 + (*ptrPayload - 0x30);\n        isValid = true;\n        ptrPayload = ptrPayload + 1;\n      }\n      if (isValid) {\n        length = index;\n      }\n    }\n    if (*ptrPayload == 0x2e) {\n      if (ptrPayload[1] == 0x2a) {\n        precision = *ptrResult;\n        if (precision < 0) {\n          precision = -1;\n        }\n        ptrPayload = ptrPayload + 2;\n        ptrResult = ptrResult + 1;\n      }\n      else {\n        isValid = false;\n        precision = 0;\n        index = 0;\n        while( true ) {\n          ptrPayload = ptrPayload + 1;\n          if (9 < *ptrPayload - 0x30) break;\n          index = index * 10 + (*ptrPayload - 0x30);\n          isValid = true;\n        }\n        if (isValid) {\n          precision = index;\n        }\n      }\n    }\n    index = FUN_00006010(&DAT_00007c02,*ptrPayload,3);\n    if (index != 0) {\n      flag = flag | 0x40 << (index - 0x7c02U & 0xff);\n      ptrPayload = ptrPayload + 1;\n    }\n    payload = ptrPayload + 1;\n    formatSpecifier = *ptrPayload;\n    index = FUN_00006010(\"efgEFG\",formatSpecifier,6);\n    if (index == 0) {\n      tempVar = FUN_00005b34(dataStruct,&flag,header,0x57d3,&ptrResult);\n      if (tempVar == -1) goto LAB_00005a06;\n    }\n    else {\n      ptrResult = (int *)(((int)ptrResult + 7U & 0xfffffff8) + 8);\n    }\n    totalLength = totalLength + tempVar;\n    ptr = payload;\n  }\n  goto LAB_0000588e;\n}\n\n",
            "renaming": {
                "FUN_000057f8": "parse_and_process_data_000057f8",
                "param_1": "dataStruct",
                "param_2": "header",
                "param_3": "payload",
                "param_4": "result",
                "iVar1": "index",
                "iVar2": "returnValue",
                "piVar3": "ptrResult",
                "bVar4": "isValid",
                "pbVar5": "ptrPayload",
                "unaff_r7": "tempVar",
                "pbVar6": "ptr",
                "local_8c": "ptrResult",
                "local_88": "flag",
                "local_84": "precision",
                "uStack_80": "unusedVariable",
                "local_7c": "length",
                "local_74": "totalLength",
                "local_70": "formatSpecifier",
                "local_6f": "spaceFlag",
                "local_6e": "plusFlag",
                "local_45": "alternateFormFlag",
                "local_30": "alignmentFlags"
            },
            "calling": [
                "FUN_00004c84"
            ],
            "called": [
                "FUN_00005b34",
                "FUN_000045ec",
                "FUN_000054a8",
                "FUN_000042a4",
                "FUN_000057d2",
                "FUN_00006010",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005a58": {
            "entrypoint": "0x00005a58",
            "current_name": "calculate_adjusted_length_00005a58",
            "code": "\nundefined4\ncalculateAdjustedLength_00005a58(undefined4 input_param,uint *data_array,uint *adjusted_length,undefined4 another_param,code *callback_func)\n\n{\n  int loop_index;\n  undefined4 return_value;\n  int callback_result;\n  uint max_length;\n  uint loop_counter;\n  bool condition_check;\n  \n  max_length = data_array[4];\n  if ((int)data_array[4] < (int)data_array[2]) {\n    max_length = data_array[2];\n  }\n  *adjusted_length = max_length;\n  if (*(char *)((int)data_array + 0x43) != '\\0') {\n    *adjusted_length = max_length + 1;\n  }\n  if ((int)(*data_array << 0x1a) < 0) {\n    *adjusted_length = *adjusted_length + 2;\n  }\n  if ((*data_array & 6) == 0) {\n    for (loop_index = 0; loop_index < (int)(data_array[3] - *adjusted_length); loop_index = loop_index + 1) {\n      callback_result = (*callback_func)(input_param,another_param,(int)data_array + 0x19,1);\n      if (callback_result == -1) goto LAB_00005afc;\n    }\n  }\n  max_length = (uint)*(byte *)((int)data_array + 0x43);\n  if (max_length != 0) {\n    max_length = 1;\n  }\n  if ((int)(*data_array << 0x1a) < 0) {\n    *(undefined *)((int)data_array + max_length + 0x43) = 0x30;\n    *(undefined *)((int)data_array + max_length + 0x44) = *(undefined *)((int)data_array + 0x45);\n    max_length = max_length + 2;\n  }\n  loop_index = (*callback_func)(input_param,another_param,(int)data_array + 0x43,max_length);\n  if (loop_index == -1) {\nLAB_00005afc:\n    return_value = 0xffffffff;\n  }\n  else {\n    max_length = data_array[3];\n    condition_check = (*data_array & 6) == 4;\n    if (condition_check) {\n      max_length = max_length - *adjusted_length;\n    }\n    if (condition_check) {\n      max_length = max_length & ~((int)max_length >> 0x1f);\n    }\n    else {\n      max_length = 0;\n    }\n    if ((int)data_array[4] < (int)data_array[2]) {\n      max_length = max_length + (data_array[2] - data_array[4]);\n    }\n    for (loop_counter = 0; max_length != loop_counter; loop_counter = loop_counter + 1) {\n      loop_index = (*callback_func)(input_param,another_param,(int)data_array + 0x1a,1);\n      if (loop_index == -1) goto LAB_00005afc;\n    }\n    return_value = 0;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00005a58": "calculate_adjusted_length_00005a58",
                "param_1": "input_param",
                "param_2": "data_array",
                "param_3": "adjusted_length",
                "param_4": "another_param",
                "param_5": "callback_func",
                "iVar1": "loop_index",
                "uVar2": "return_value",
                "iVar3": "callback_result",
                "uVar4": "max_length",
                "uVar5": "loop_counter",
                "bVar6": "condition_check"
            },
            "calling": [
                "FUN_00005b34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005b34": {
            "entrypoint": "0x00005b34",
            "current_name": "convert_to_hexadecimal_00005b34",
            "code": "\ncode * convertToHexadecimal_00005b34(undefined4 param_1,uint *inputArray,undefined4 param_3,code *conversionFunction,uint **outputPointer\n                   )\n\n{\n  bool isGreater;\n  byte byteValue;\n  int index;\n  code *result;\n  char *hexDigits;\n  int status;\n  char *currentChar;\n  uint digit;\n  uint *pointer;\n  uint base;\n  uint **doublePointer;\n  char **charPointer;\n  uint length;\n  char *currentDigit;\n  code *finalResult;\n  \n  byteValue = *(byte *)(inputArray + 6);\n  currentChar = (char *)((int)inputArray + 0x43);\n  finalResult = conversionFunction;\n  if (0x78 < byteValue) {\nswitchD_00005b70_caseD_65:\n    *(byte *)((int)inputArray + 0x42) = byteValue;\nLAB_00005bdc:\n    currentChar = (char *)((int)inputArray + 0x42);\n    digit = 1;\nLAB_00005d28:\n    inputArray[4] = digit;\n    *(undefined *)((int)inputArray + 0x43) = 0;\n    goto LAB_00005c84;\n  }\n  if (byteValue < 99) {\n    if (byteValue == 0) goto LAB_00005d06;\n    if (byteValue == 0x58) {\n      hexDigits = \"0123456789ABCDEF\";\n      *(undefined *)((int)inputArray + 0x45) = 0x58;\n      goto LAB_00005ca8;\n    }\n    goto switchD_00005b70_caseD_65;\n  }\n  switch(byteValue) {\n  case 99:\n    digit = **outputPointer;\n    *outputPointer = *outputPointer + 1;\n    *(char *)((int)inputArray + 0x42) = (char)digit;\n    goto LAB_00005bdc;\n  case 100:\n  case 0x69:\n    base = *inputArray;\n    pointer = *outputPointer;\n    if ((int)(base << 0x18) < 0) {\n      digit = *pointer;\n      *outputPointer = pointer + 1;\n    }\n    else {\n      digit = *pointer;\n      *outputPointer = pointer + 1;\n      if ((base & 0x40) != 0) {\n        digit = (uint)(short)digit;\n      }\n    }\n    if ((int)digit < 0) {\n      digit = -digit;\n      *(undefined *)((int)inputArray + 0x43) = 0x2d;\n    }\n    hexDigits = \"0123456789ABCDEF\";\n    base = 10;\n    goto LAB_00005c36;\n  default:\n    goto switchD_00005b70_caseD_65;\n  case 0x6e:\n    doublePointer = (uint **)*outputPointer;\n    base = *inputArray;\n    digit = inputArray[5];\n    *outputPointer = (uint *)(doublePointer + 1);\n    pointer = *doublePointer;\n    if (((int)(base << 0x18) < 0) || (-1 < (int)(base << 0x19))) {\n      *pointer = digit;\n    }\n    else {\n      *(short *)pointer = (short)digit;\n    }\nLAB_00005d06:\n    inputArray[4] = 0;\n    goto LAB_00005c84;\n  case 0x6f:\n  case 0x75:\n    pointer = *outputPointer;\n    digit = *inputArray;\n    *outputPointer = pointer + 1;\n    if (((int)(digit << 0x18) < 0) || (-1 < (int)(digit << 0x19))) {\n      digit = *pointer;\n    }\n    else {\n      digit = (uint)*(ushort *)pointer;\n    }\n    hexDigits = \"0123456789ABCDEF\";\n    if (byteValue == 0x6f) {\n      base = 8;\n    }\n    else {\n      base = 10;\n    }\n    break;\n  case 0x70:\n    *inputArray = *inputArray | 0x20;\n  case 0x78:\n    hexDigits = \"0123456789abcdef\";\n    *(undefined *)((int)inputArray + 0x45) = 0x78;\nLAB_00005ca8:\n    base = *inputArray;\n    digit = **outputPointer;\n    *outputPointer = *outputPointer + 1;\n    if ((-1 < (int)(base << 0x18)) && ((int)(base << 0x19) < 0)) {\n      digit = digit & 0xffff;\n    }\n    if ((int)(base << 0x1f) < 0) {\n      *inputArray = base | 0x20;\n    }\n    if (digit == 0) {\n      *inputArray = *inputArray & 0xffffffdf;\n    }\n    base = 0x10;\n    break;\n  case 0x73:\n    charPointer = (char **)*outputPointer;\n    *outputPointer = (uint *)(charPointer + 1);\n    currentChar = *charPointer;\n    index = FUN_00006010(currentChar,0,inputArray[1],charPointer,param_1,inputArray,param_3);\n    if (index != 0) {\n      inputArray[1] = index - (int)currentChar;\n    }\n    digit = inputArray[1];\n    goto LAB_00005d28;\n  }\n  *(undefined *)((int)inputArray + 0x43) = 0;\nLAB_00005c36:\n  length = inputArray[1];\n  inputArray[2] = length;\n  if (-1 < (int)length) {\n    *inputArray = *inputArray & 0xfffffffb;\n  }\n  currentDigit = currentChar;\n  if ((digit != 0) || (length != 0)) {\n    do {\n      currentDigit = currentDigit + -1;\n      *currentDigit = hexDigits[digit - base * (digit / base)];\n      isGreater = base <= digit;\n      digit = digit / base;\n    } while (isGreater);\n  }\n  if (((base == 8) && ((int)(*inputArray << 0x1f) < 0)) && ((int)inputArray[1] <= (int)inputArray[4])) {\n    currentDigit[-1] = '0';\n    currentDigit = currentDigit + -1;\n  }\n  inputArray[4] = (int)currentChar - (int)currentDigit;\n  currentChar = currentDigit;\nLAB_00005c84:\n  index = FUN_00005a58(param_1,inputArray,&finalResult,param_3,conversionFunction);\n  if ((index == -1) || (index = (*conversionFunction)(param_1,param_3,currentChar,inputArray[4]), index == -1)) {\nLAB_00005c98:\n    result = (code *)0xffffffff;\n  }\n  else {\n    if ((int)(*inputArray << 0x1e) < 0) {\n      for (index = 0; index < (int)(inputArray[3] - (int)finalResult); index = index + 1) {\n        status = (*conversionFunction)(param_1,param_3,(int)inputArray + 0x19,1);\n        if (status == -1) goto LAB_00005c98;\n      }\n    }\n    result = (code *)inputArray[3];\n    if ((int)(code *)inputArray[3] < (int)finalResult) {\n      result = finalResult;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00005b34": "convert_to_hexadecimal_00005b34",
                "param_2": "inputArray",
                "param_4": "conversionFunction",
                "param_5": "outputPointer",
                "bVar1": "isGreater",
                "bVar2": "byteValue",
                "iVar3": "index",
                "pcVar4": "result",
                "pcVar5": "hexDigits",
                "iVar6": "status",
                "pcVar7": "currentChar",
                "uVar8": "digit",
                "puVar9": "pointer",
                "uVar10": "base",
                "uVar13": "length",
                "pcVar14": "currentDigit",
                "local_24": "finalResult",
                "ppuVar11": "doublePointer",
                "ppcVar12": "charPointer"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_00005a58",
                "FUN_00006010"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e10": {
            "entrypoint": "0x00005e10",
            "current_name": "parse_data_00005e10",
            "code": "\nuint parse_data_00005e10(int data_ptr,byte **data)\n\n{\n  int result;\n  uint value;\n  byte *byte_ptr;\n  \n  if ((data_ptr != 0) && (*(int *)(data_ptr + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (data == (byte **)&DAT_000079b8) {\n    data = *(byte ***)(data_ptr + 4);\n  }\n  else if (data == (byte **)&DAT_000079d8) {\n    data = *(byte ***)(data_ptr + 8);\n  }\n  else if (data == (byte **)&DAT_00007998) {\n    data = *(byte ***)(data_ptr + 0xc);\n  }\n  result = FUN_00006768(data_ptr,data);\n  if (result == 0) {\n    data[1] = data[1] + -1;\n    byte_ptr = *data;\n    *data = byte_ptr + 1;\n    value = (uint)*byte_ptr;\n  }\n  else {\n    value = 0xffffffff;\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_00005e10": "parse_data_00005e10",
                "param_1": "data_ptr",
                "param_2": "data",
                "iVar1": "result",
                "uVar2": "value",
                "pbVar3": "byte_ptr"
            },
            "calling": [
                "FUN_00004418"
            ],
            "called": [
                "FUN_00006768",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e68": {
            "entrypoint": "0x00005e68",
            "current_name": "extract_data_00005e68",
            "code": "\nvoid extractData_00005e68(undefined4 input1,undefined4 input2,undefined4 inputOffset1,undefined4 inputOffset2)\n\n{\n  undefined4 extractedData;\n  undefined4 localVar1;\n  undefined2 constant1;\n  undefined2 constant2;\n  undefined4 copyData1;\n  undefined4 copyData2;\n  undefined *pointer1;\n  undefined4 initialValue1;\n  undefined4 initialValue2;\n  undefined4 copyOffset1;\n  undefined4 copyOffset2;\n  \n  constant1 = 0x204;\n  extractedData = input1;\n  copyData1 = input1;\n  copyOffset1 = inputOffset1;\n  copyOffset2 = inputOffset2;\n  localVar1 = FUN_00005ecc();\n  pointer1 = &LAB_00004dea_1;\n  initialValue1 = 0;\n  initialValue2 = 0;\n  constant2 = 0xffff;\n  copyData2 = localVar1;\n  FUN_000061cc(Elf32_Rel_ARRAY_1fff0200[16].r_offset,&extractedData,input2,&copyOffset1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005e68": "extract_data_00005e68",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "inputOffset1",
                "param_4": "inputOffset2",
                "local_80": "extractedData",
                "local_7c": "localVar1",
                "local_74": "constant1",
                "local_72": "constant2",
                "local_70": "copyData1",
                "local_6c": "copyData2",
                "local_5c": "pointer1",
                "local_4c": "initialValue1",
                "local_38": "initialValue2",
                "uStack_8": "copyOffset1",
                "uStack_4": "copyOffset2"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00005ecc",
                "FUN_000061cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ebc": {
            "entrypoint": "0x00005ebc",
            "current_name": "copy_string_00005ebc",
            "code": "\nvoid copyString_00005ebc(char *dest,char *src)\n\n{\n  char currentChar;\n  \n  do {\n    currentChar = *src;\n    *dest = currentChar;\n    src = src + 1;\n    dest = dest + 1;\n  } while (currentChar != '\\0');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ebc": "copy_string_00005ebc",
                "param_1": "dest",
                "param_2": "src",
                "cVar1": "currentChar"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ecc": {
            "entrypoint": "0x00005ecc",
            "current_name": "find_null_terminator_00005ecc",
            "code": "\nchar * find_null_terminator_00005ecc(char *input_string)\n\n{\n  char current_character;\n  char *next_character;\n  char *current_position;\n  \n  current_position = input_string;\n  do {\n    next_character = current_position + 1;\n    current_character = *current_position;\n    current_position = next_character;\n  } while (current_character != '\\0');\n  return next_character + (-1 - (int)input_string);\n}\n\n",
            "renaming": {
                "FUN_00005ecc": "find_null_terminator_00005ecc",
                "param_1": "input_string",
                "cVar1": "current_character",
                "pcVar2": "next_character",
                "pcVar3": "current_position"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00005e68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005edc": {
            "entrypoint": "0x00005edc",
            "current_name": "convert_string_to_number_00005edc",
            "code": "\nuint convertStringToNumber_00005edc(undefined4 *result,byte *string,byte **remainingString,uint base)\n\n{\n  uint convertedValue;\n  uint currentChar;\n  byte isNegative;\n  int status;\n  uint digitValue;\n  uint maxValue;\n  byte *currentByte;\n  byte *nextByte;\n  \n  nextByte = string;\n  do {\n    currentByte = nextByte;\n    nextByte = currentByte + 1;\n    currentChar = (uint)*currentByte;\n    isNegative = (&DAT_00007a99)[currentChar] & 8;\n  } while (((&DAT_00007a99)[currentChar] & 8) != 0);\n  if (currentChar == 0x2d) {\n    currentChar = (uint)*nextByte;\n    isNegative = 1;\n    nextByte = currentByte + 2;\n  }\n  else if (currentChar == 0x2b) {\n    currentChar = (uint)*nextByte;\n    nextByte = currentByte + 2;\n  }\n  if (base == 0) {\n    if (currentChar != 0x30) {\n      base = 10;\n      goto LAB_00005f26;\n    }\n  }\n  else if ((base != 0x10) || (currentChar != 0x30)) goto LAB_00005f26;\n  if ((*nextByte & 0xdf) == 0x58) {\n    currentChar = (uint)nextByte[1];\n    base = 0x10;\n    nextByte = nextByte + 2;\n  }\n  else {\n    currentChar = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00005f26:\n  status = 0;\n  maxValue = 0xffffffff / base;\n  convertedValue = 0;\n  do {\n    digitValue = currentChar - 0x30;\n    if (9 < digitValue) {\n      if (currentChar - 0x41 < 0x1a) {\n        digitValue = currentChar - 0x37;\n      }\n      else {\n        if (0x19 < currentChar - 0x61) break;\n        digitValue = currentChar - 0x57;\n      }\n    }\n    if ((int)base <= (int)digitValue) break;\n    if (((status < 0) || (maxValue < convertedValue)) ||\n       ((maxValue == convertedValue && ((int)~(base * maxValue) < (int)digitValue)))) {\n      status = -1;\n    }\n    else {\n      convertedValue = convertedValue * base + digitValue;\n      status = 1;\n    }\n    currentChar = (uint)*nextByte;\n    nextByte = nextByte + 1;\n  } while( true );\n  if (status < 0) {\n    *result = 0x22;\n    convertedValue = 0xffffffff;\n    if (remainingString == (byte **)0x0) {\n      return 0xffffffff;\n    }\n  }\n  else {\n    if (isNegative != 0) {\n      convertedValue = -convertedValue;\n    }\n    if (remainingString == (byte **)0x0) {\n      return convertedValue;\n    }\n    if (status == 0) goto LAB_00005fb8;\n  }\n  string = nextByte + -1;\nLAB_00005fb8:\n  *remainingString = string;\n  return convertedValue;\n}\n\n",
            "renaming": {
                "FUN_00005edc": "convert_string_to_number_00005edc",
                "param_1": "result",
                "param_2": "string",
                "param_3": "remainingString",
                "param_4": "base",
                "uVar1": "convertedValue",
                "uVar2": "currentChar",
                "bVar3": "isNegative",
                "iVar4": "status",
                "uVar5": "digitValue",
                "uVar6": "maxValue",
                "pbVar7": "currentByte",
                "pbVar8": "nextByte"
            },
            "calling": [
                "FUN_00005fd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fd8": {
            "entrypoint": "0x00005fd8",
            "current_name": "initialize_relocation_00005fd8",
            "code": "\nvoid initializeRelocation_00005fd8(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  FUN_00005edc(Elf32_Rel_ARRAY_1fff0200[16].r_offset,param1,param2,param3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fd8": "initialize_relocation_00005fd8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00005edc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fec": {
            "entrypoint": "0x00005fec",
            "current_name": "initialize_hardware_00005fec",
            "code": "\nvoid initializeHardware_00005fec(void)\n\n{\n  FUNC_000045e8(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fec": "initialize_hardware_00005fec"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ff8": {
            "entrypoint": "0x00005ff8",
            "current_name": "initialize_system_00005ff8",
            "code": "\nvoid initializeSystem_00005ff8(void)\n\n{\n  FUNC_000045ec(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ff8": "initialize_system_00005ff8"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006010": {
            "entrypoint": "0x00006010",
            "current_name": "find_byte_sequence_00006010",
            "code": "\nbyte * find_byte_sequence_00006010(uint *input_data,uint byte_to_find,uint size_of_input)\n\n{\n  byte current_byte;\n  char check_bit_0;\n  char check_bit_8;\n  char check_bit_16;\n  char check_bit_24;\n  byte *pointer_to_next_byte;\n  uint *pointer_to_current_byte;\n  byte *result_pointer;\n  uint remaining_bytes;\n  uint aligned_size;\n  uint xored_byte_1;\n  uint xored_byte_2;\n  bool current_byte3;\n  bool current_byte4;\n  bool current_byte5;\n  bool current_byte6;\n  \n  byte_to_find = byte_to_find & 0xff;\n  if ((int)size_of_input < 0x10) {\njoined_r0x00006070:\n    do {\n      if (size_of_input == 0) {\n        return (byte *)0x0;\n      }\n      pointer_to_current_byte = (uint *)((int)input_data + 1);\n      current_byte = *(byte *)input_data;\n      size_of_input = size_of_input - 1;\n      input_data = pointer_to_current_byte;\n    } while (current_byte != byte_to_find);\n  }\n  else {\n    remaining_bytes = (uint)input_data & 7;\n    while( true ) {\n      if (remaining_bytes == 0) {\n        remaining_bytes = byte_to_find | byte_to_find << 8;\n        remaining_bytes = remaining_bytes | remaining_bytes << 0x10;\n        aligned_size = size_of_input & 0xfffffff8;\n        do {\n          pointer_to_current_byte = input_data + 2;\n          aligned_size = aligned_size - 8;\n          xored_byte_1 = *input_data ^ remaining_bytes;\n          xored_byte_2 = input_data[1] ^ remaining_bytes;\n          check_bit_0 = -((char)xored_byte_1 == '\\0');\n          check_bit_8 = -((char)(xored_byte_1 >> 8) == '\\0');\n          check_bit_16 = -((char)(xored_byte_1 >> 0x10) == '\\0');\n          check_bit_24 = -((char)(xored_byte_1 >> 0x18) == '\\0');\n          xored_byte_1 = CONCAT13(check_bit_24,CONCAT12(check_bit_16,CONCAT11(check_bit_8,check_bit_0)));\n          current_byte3 = (char)xored_byte_2 != '\\0';\n          current_byte4 = (char)(xored_byte_2 >> 8) != '\\0';\n          current_byte5 = (char)(xored_byte_2 >> 0x10) != '\\0';\n          current_byte6 = (char)(xored_byte_2 >> 0x18) != '\\0';\n          xored_byte_2 = CONCAT13(current_byte6 * check_bit_24 - !current_byte6,\n                            CONCAT12(current_byte5 * check_bit_16 - !current_byte5,\n                                     CONCAT11(current_byte4 * check_bit_8 - !current_byte4,current_byte3 * check_bit_0 - !current_byte3)));\n          if (xored_byte_2 != 0) {\n            if (xored_byte_1 == 0) {\n              result_pointer = (byte *)((int)input_data + 5);\n              xored_byte_1 = xored_byte_2;\n            }\n            else {\n              result_pointer = (byte *)((int)input_data + 1);\n            }\n            if ((xored_byte_1 & 1) == 0) {\n              current_byte3 = (xored_byte_1 & 0x100) == 0;\n              pointer_to_next_byte = result_pointer + 1;\n              if (current_byte3) {\n                current_byte3 = (xored_byte_1 & 0x18000) == 0;\n                pointer_to_next_byte = result_pointer + 2;\n              }\n              result_pointer = pointer_to_next_byte;\n              if (current_byte3) {\n                result_pointer = result_pointer + 1;\n              }\n            }\n            return result_pointer + -1;\n          }\n          input_data = pointer_to_current_byte;\n        } while (aligned_size != 0);\n        size_of_input = size_of_input & 7;\n        goto joined_r0x00006070;\n      }\n      pointer_to_current_byte = (uint *)((int)input_data + 1);\n      size_of_input = size_of_input - 1;\n      if (*(byte *)input_data == byte_to_find) break;\n      remaining_bytes = (uint)pointer_to_current_byte & 7;\n      input_data = pointer_to_current_byte;\n      if (size_of_input == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)pointer_to_current_byte + -1);\n}\n\n",
            "renaming": {
                "FUN_00006010": "find_byte_sequence_00006010",
                "param_1": "input_data",
                "param_2": "byte_to_find",
                "param_3": "size_of_input",
                "bVar1": "current_byte",
                "cVar2": "check_bit_0",
                "cVar3": "check_bit_8",
                "cVar4": "check_bit_16",
                "cVar5": "check_bit_24",
                "pbVar6": "pointer_to_next_byte",
                "puVar7": "pointer_to_current_byte",
                "pbVar8": "result_pointer",
                "uVar9": "remaining_bytes",
                "uVar10": "aligned_size",
                "uVar11": "xored_byte_1",
                "uVar12": "xored_byte_2"
            },
            "calling": [
                "FUN_00005b34",
                "FUN_0000656c",
                "FUN_000057f8",
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060b0": {
            "entrypoint": "0x000060b0",
            "current_name": "copy_bytes_000060b0",
            "code": "\nvoid copyBytes_000060b0(int destinationSize,undefined *sourceData,int sourceSize)\n\n{\n  undefined *sourcePtr;\n  undefined *sourceEndPtr;\n  undefined *destinationPtr;\n  \n  sourceEndPtr = sourceData + sourceSize;\n  destinationPtr = (undefined *)(destinationSize + -1);\n  if (sourceData != sourceEndPtr) {\n    do {\n      sourcePtr = sourceData + 1;\n      destinationPtr = destinationPtr + 1;\n      *destinationPtr = *sourceData;\n      sourceData = sourcePtr;\n    } while (sourcePtr != sourceEndPtr);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000060b0": "copy_bytes_000060b0",
                "param_1": "destinationSize",
                "param_2": "sourceData",
                "param_3": "sourceSize",
                "puVar1": "sourcePtr",
                "puVar2": "sourceEndPtr",
                "puVar3": "destinationPtr"
            },
            "calling": [
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060cc": {
            "entrypoint": "0x000060cc",
            "current_name": "check_and_execute_operation_000060cc",
            "code": "\nint checkAndExecuteOperation_000060cc(undefined4 firstParameter,int secondParameter,uint thirdParameter,undefined4 fourthParameter)\n\n{\n  int result;\n  uint comparisonResult;\n  \n  if (secondParameter != 0) {\n    if (thirdParameter == 0) {\n      FUN_00004b34();\n      result = 0;\n    }\n    else {\n      comparisonResult = FUN_00006964();\n      result = secondParameter;\n      if ((comparisonResult < thirdParameter) && (result = FUN_00004bd0(firstParameter,thirdParameter), result != 0)) {\n        FUN_000060b0(result,secondParameter,thirdParameter);\n        FUN_00004b34(firstParameter,secondParameter);\n      }\n    }\n    return result;\n  }\n  result = FUN_00004bd0(firstParameter,thirdParameter,thirdParameter,fourthParameter);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000060cc": "check_and_execute_operation_000060cc",
                "param_1": "firstParameter",
                "param_2": "secondParameter",
                "param_3": "thirdParameter",
                "param_4": "fourthParameter",
                "iVar1": "result",
                "uVar2": "comparisonResult"
            },
            "calling": [
                "FUN_000068f0"
            ],
            "called": [
                "FUN_000060b0",
                "FUN_00004bd0",
                "FUN_00004b34",
                "FUN_00006964"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006192": {
            "entrypoint": "0x00006192",
            "current_name": "process_data_00006192",
            "code": "\nundefined4 processData_00006192(undefined4 input,undefined4 *data)\n\n{\n  if ((undefined4 *)ptr_address != (undefined4 *)0x0) {\n    if ((undefined4 *)ptr_address != data + 0x11) {\n      FUN_00004b34();\n    }\n    result_1 = result_2;\n    ptr_address = 0;\n    if (result_2 != 0) {\n      *data = result_3;\n      return 0;\n    }\n  }\n  *data = result_5;\n  result_1 = 0;\n  *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x20;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006192": "process_data_00006192",
                "param_1": "input",
                "param_2": "data",
                "param_2[0xd]": "ptr_address",
                "param_2[1]": "result_1",
                "param_2[0x10]": "result_2",
                "param_2[0xf]": "result_3",
                "param_2[4]": "result_5"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000061cc": {
            "entrypoint": "0x000061cc",
            "current_name": "parse_expression_000061cc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006482) */\n\nint parseExpression_000061cc(undefined4 param1,byte **param2,byte *expression,int **outputList)\n\n{\n  int result;\n  uint currentChar;\n  byte *nextChar;\n  uint check;\n  int **outputListPtr;\n  undefined evalStackMemory [256];\n  uint flag1;\n  undefined4 flag2;\n  uint tempFlag;\n  int returnValue;\n  int counter;\n  undefined *evalStack;\n  int operationType;\n  undefined *functionPtr;\n  code *nextFunctionPtr;\n  \n  returnValue = 0;\n  counter = 0;\n  functionPtr = &LAB_00006118_1;\n  nextFunctionPtr = FUN_00006192 + 1;\n  outputListPtr = outputList;\n  evalStack = evalStackMemory;\nLAB_000061f6:\n  while( true ) {\n    while( true ) {\n      check = (uint)*expression;\n      if (check == 0) {\n        return returnValue;\n      }\n      currentChar = (byte)(&DAT_00007a99)[check] & 8;\n      nextChar = expression + 1;\n      if (((&DAT_00007a99)[check] & 8) == 0) break;\n      while (((expression = nextChar, 0 < (int)param2[1] ||\n              (result = (*nextFunctionPtr)(param1,param2), result == 0)) &&\n             ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0))) {\n        counter = counter + 1;\n        param2[1] = param2[1] + -1;\n        *param2 = *param2 + 1;\n      }\n    }\n    if (check == 0x25) break;\nLAB_00006352:\n    if (((int)param2[1] < 1) && (result = (*nextFunctionPtr)(param1,param2), result != 0))\n    goto LAB_00006380;\n    if (**param2 != check) {\n      return returnValue;\n    }\n    *param2 = *param2 + 1;\n    counter = counter + 1;\n    param2[1] = param2[1] + -1;\n    expression = nextChar;\n  }\n  tempFlag = currentChar;\n  flag1 = currentChar;\n  if (expression[1] == 0x2a) {\n    nextChar = expression + 2;\n    flag1 = 0x10;\n  }\n  while( true ) {\n    currentChar = (uint)*nextChar;\n    if (9 < currentChar - 0x30) break;\n    nextChar = nextChar + 1;\n    tempFlag = (tempFlag * 10 + currentChar) - 0x30;\n  }\n  result = FUN_00006010(&DAT_00007c02,currentChar,3);\n  if (result != 0) {\n    flag1 = 1 << (result - 0x7c02U & 0xff) | flag1;\n    nextChar = nextChar + 1;\n  }\n  expression = nextChar + 1;\n  currentChar = (uint)*nextChar;\n  if (currentChar < 0x79) {\n    if (0x57 < currentChar) {\n      switch(currentChar) {\n      default:\n        goto switchD_000062c0_caseD_59;\n      case 0x5b:\n        expression = (byte *)FUN_0000687c(evalStackMemory,expression);\n        flag1 = flag1 | 0x40;\n        operationType = 1;\n        break;\n      case 99:\n        flag1 = flag1 | 0x40;\n        operationType = 0;\n        break;\n      case 100:\n      case 0x75:\n        flag2 = 10;\nLAB_000063a0:\n        if (currentChar < 0x6f) {\n          operationType = 3;\n        }\n        else {\n          operationType = 4;\n        }\n        break;\n      case 0x65:\n      case 0x66:\n      case 0x67:\nswitchD_000062c0_caseD_65:\n        operationType = 5;\n        break;\n      case 0x69:\n        flag2 = 0;\n        operationType = 3;\n        break;\n      case 0x6e:\n        if (-1 < (int)(flag1 << 0x1b)) {\n          if ((int)(flag1 << 0x1f) < 0) {\n            *(short *)*outputListPtr = (short)counter;\n            outputListPtr = outputListPtr + 1;\n          }\n          else {\n            **outputListPtr = counter;\n            outputListPtr = outputListPtr + 1;\n          }\n        }\n        goto LAB_000061f6;\n      case 0x6f:\n        flag2 = 8;\n        operationType = 4;\n        break;\n      case 0x70:\n        flag1 = flag1 | 0x20;\n      case 0x58:\n      case 0x78:\n        flag1 = flag1 | 0x200;\n        flag2 = 0x10;\n        goto LAB_000063a0;\n      case 0x73:\n        operationType = 2;\n      }\nLAB_000063ac:\n      if (((int)param2[1] < 1) && (result = (*nextFunctionPtr)(param1,param2), result != 0))\n      goto LAB_00006380;\n      if (-1 < (int)(flag1 << 0x19)) {\n        while ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0) {\n          counter = counter + 1;\n          nextChar = param2[1];\n          param2[1] = nextChar + -1;\n          if ((int)(nextChar + -1) < 1) {\n            result = (*nextFunctionPtr)(param1,param2);\n            if (result != 0) goto LAB_00006380;\n          }\n          else {\n            *param2 = *param2 + 1;\n          }\n        }\n      }\n      if (operationType < 3) {\n        result = FUN_000064bc(param1,&flag1,param2,&outputListPtr);\n      }\n      else {\n        if (4 < operationType) goto LAB_000061f6;\n        result = FUN_0000656c(param1,&flag1,param2,&outputListPtr);\n      }\n      if (result == 1) {\n        return returnValue;\n      }\n      if (result == 2) {\nLAB_00006380:\n        if (returnValue == 0) {\nLAB_00006388:\n          returnValue = -1;\n        }\n        else if ((*(ushort *)(param2 + 3) & 0x40) != 0) {\n          returnValue = -1;\n        }\n        return returnValue;\n      }\n      goto LAB_000061f6;\n    }\n    nextChar = expression;\n    if (currentChar == 0x25) goto LAB_00006352;\n    if (currentChar < 0x26) {\n      if (currentChar != 0) goto switchD_000062c0_caseD_59;\n      goto LAB_00006388;\n    }\n    if (currentChar - 0x45 < 3) goto switchD_000062c0_caseD_65;\n  }\nswitchD_000062c0_caseD_59:\n  operationType = 3;\n  flag2 = 10;\n  goto LAB_000063ac;\n}\n\n",
            "renaming": {
                "FUN_000061cc": "parse_expression_000061cc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "expression",
                "param_4": "outputList",
                "iVar1": "result",
                "uVar2": "currentChar",
                "pbVar3": "nextChar",
                "uVar4": "check",
                "local_2b0": "outputListPtr",
                "auStack_2ac": "evalStackMemory",
                "local_1ac": "flag1",
                "local_1a8": "flag2",
                "local_1a4": "tempFlag",
                "local_1a0": "returnValue",
                "local_19c": "counter",
                "local_198": "evalStack",
                "local_194": "operationType",
                "local_30": "functionPtr",
                "local_2c": "nextFunctionPtr"
            },
            "calling": [
                "FUN_00005e68"
            ],
            "called": [
                "FUN_000064bc",
                "FUN_0000656c",
                "FUN_00006192",
                "FUN_00006010",
                "FUN_0000687c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000064bc": {
            "entrypoint": "0x000064bc",
            "current_name": "process_data_000064bc",
            "code": "\nundefined4 processData_000064bc(undefined4 input,uint *flags,byte **dataArray,undefined4 *status)\n\n{\n  int result;\n  uint tempVar;\n  byte **PtrToData;\n  byte *ptr1;\n  byte *ptr2;\n  byte *ptr3;\n  int counter;\n  \n  if (flags[2] == 0) {\n    if (flags[6] == 0) {\n      tempVar = 1;\n    }\n    else {\n      tempVar = 0xffffffff;\n    }\n    flags[2] = tempVar;\n  }\n  if (-1 < (int)(*flags << 0x1b)) {\n    PtrToData = (byte **)*status;\n    *status = PtrToData + 1;\n    ptr2 = *PtrToData;\n  }\n  counter = 0;\n  do {\n    tempVar = flags[6];\n    if (tempVar != 0) {\n      if (tempVar == 1) {\n        if (*(char *)(flags[5] + (uint)**dataArray) == '\\0') {\n          if (counter == 0) {\n            return 1;\n          }\nLAB_0000654a:\n          if (((*flags & 0x10) == 0) && (flags[3] = flags[3] + 1, flags[6] != 0)) {\n            *ptr2 = 0;\n          }\n          flags[4] = counter + flags[4];\n          return 0;\n        }\n      }\n      else if ((tempVar != 2) || ((int)((uint)(byte)(&DAT_00007a99)[**dataArray] << 0x1c) < 0))\n      goto LAB_0000654a;\n    }\n    ptr3 = ptr2;\n    if (-1 < (int)(*flags << 0x1b)) {\n      ptr3 = ptr2 + 1;\n      *ptr2 = **dataArray;\n    }\n    ptr1 = dataArray[1];\n    *dataArray = *dataArray + 1;\n    tempVar = flags[2] - 1;\n    dataArray[1] = ptr1 + -1;\n    counter = counter + 1;\n    flags[2] = tempVar;\n    ptr2 = ptr3;\n    if ((tempVar == 0) ||\n       (((int)(ptr1 + -1) < 1 &&\n        (result = (*(code *)flags[0x60])(input,dataArray,tempVar,(code *)flags[0x60],status),\n        result != 0)))) goto LAB_0000654a;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000064bc": "process_data_000064bc",
                "param_1": "input",
                "param_2": "flags",
                "param_3": "dataArray",
                "param_4": "status",
                "iVar1": "result",
                "uVar2": "tempVar",
                "ppbVar3": "PtrToData",
                "pbVar4": "ptr1",
                "unaff_r6": "ptr2",
                "pbVar5": "ptr3",
                "iVar6": "counter"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000656c": {
            "entrypoint": "0x0000656c",
            "current_name": "process_data_0000656c",
            "code": "\nundefined4 processData_0000656c(undefined4 inputData,uint *flags,byte **dataPtr,undefined4 *outputPtr)\n\n{\n  int result;\n  undefined4 tempVar;\n  code *funcPtr;\n  uint tempVar2;\n  byte *bytePtr;\n  uint sizeVar;\n  undefined4 *outputData;\n  uint *tempPtr;\n  uint *tempPtr2;\n  uint *tempPtr3;\n  int tempVar3;\n  int index;\n  undefined *localData [4];\n  \n  localData[0] = &DAT_00007c2f;\n  localData[1] = &DAT_00007c32;\n  localData[2] = &DAT_00007c35;\n  funcPtr = (code *)&UNK_00004f81;\n  if (flags[6] != 3) {\n    funcPtr = (code *)&UNK_00005fd5;\n  }\n  sizeVar = flags[2];\n  tempVar2 = sizeVar - 1;\n  if (0x15c < tempVar2) {\n    tempVar3 = sizeVar - 0x15d;\n    sizeVar = 0x15d;\n  }\n  if (0x15c < tempVar2) {\n    flags[2] = sizeVar;\n  }\n  tempPtr3 = flags + 7;\n  if (tempVar2 < 0x15d) {\n    tempVar3 = 0;\n  }\n  *flags = *flags | 0xd00;\n  index = 0;\n  tempPtr2 = tempPtr3;\n  do {\n    result = FUN_00006010(localData[index],**dataPtr,2);\n    if (result != 0) {\n      if (index == 1) {\n        if (flags[1] == 0) {\n          flags[1] = 8;\n          *flags = *flags | 0x200;\n        }\n        tempVar2 = *flags & 0xfffffaff;\nLAB_000065f4:\n        *flags = tempVar2;\n      }\n      else if (index == 2) {\n        if ((*flags & 0x600) != 0x200) goto LAB_00006624;\n        flags[1] = 0x10;\n        tempVar2 = *flags | 0x100;\n        goto LAB_000065f4;\n      }\n      tempVar2 = flags[2];\n      flags[2] = tempVar2 - 1;\n      if (tempVar2 != 0) {\n        bytePtr = *dataPtr;\n        *dataPtr = bytePtr + 1;\n        tempPtr = (uint *)((int)tempPtr2 + 1);\n        *(byte *)tempPtr2 = *bytePtr;\n        bytePtr = dataPtr[1];\n        dataPtr[1] = bytePtr + -1;\n        tempPtr2 = tempPtr;\n        if (((int)(bytePtr + -1) < 1) &&\n           (result = (*(code *)flags[0x60])(inputData,dataPtr), result != 0)) {\n          index = 0;\n          goto LAB_000066ca;\n        }\n      }\n    }\nLAB_00006624:\n    index = index + 1;\n  } while (index != 3);\n  if (flags[1] == 0) {\n    flags[1] = 10;\n  }\n  FUN_0000687c(flags[5],\"01234567]\" + (8 - flags[1]));\n  index = 0;\n  while( true ) {\n    tempPtr = tempPtr2;\n    if (flags[2] == 0) break;\n    bytePtr = *dataPtr;\n    tempVar2 = (uint)*bytePtr;\n    if (*(char *)(flags[5] + tempVar2) == '\\0') break;\n    if ((tempVar2 == 0x30) && ((int)(*flags << 0x14) < 0)) {\n      index = index + 1;\n      if (tempVar3 != 0) {\n        tempVar3 = tempVar3 + -1;\n        flags[2] = flags[2] + 1;\n      }\n    }\n    else {\n      *flags = *flags & 0xfffff6ff;\n      tempPtr = (uint *)((int)tempPtr2 + 1);\n      *(byte *)tempPtr2 = *bytePtr;\n    }\n    bytePtr = dataPtr[1];\n    dataPtr[1] = bytePtr + -1;\n    if ((int)(bytePtr + -1) < 1) {\n      result = (*(code *)flags[0x60])(inputData,dataPtr);\n      if (result != 0) break;\n    }\n    else {\n      *dataPtr = *dataPtr + 1;\n    }\n    flags[2] = flags[2] - 1;\n    tempPtr2 = tempPtr;\n  }\nLAB_000066ca:\n  if ((int)(*flags << 0x17) < 0) {\n    if (tempPtr3 < tempPtr) {\n      (*(code *)flags[0x5f])(inputData,*(byte *)((int)tempPtr + -1),dataPtr);\n      tempPtr = (uint *)((int)tempPtr + -1);\n    }\n    if (tempPtr == tempPtr3) {\n      return 1;\n    }\n  }\n  if ((*flags & 0x10) == 0) {\n    *(byte *)tempPtr = 0;\n    tempVar = (*funcPtr)(inputData,tempPtr3,0,flags[1]);\n    outputData = (undefined4 *)*outputPtr;\n    tempVar2 = *flags;\n    *outputPtr = outputData + 1;\n    outputData = (undefined4 *)*outputData;\n    if ((tempVar2 & 0x20) == 0) {\n      if ((int)(tempVar2 << 0x1f) < 0) {\n        *(short *)outputData = (short)tempVar;\n      }\n      else {\n        *outputData = tempVar;\n      }\n    }\n    else {\n      *outputData = tempVar;\n    }\n    flags[3] = flags[3] + 1;\n  }\n  flags[4] = (uint)((int)tempPtr + flags[4] + (index - (int)tempPtr3));\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000656c": "process_data_0000656c",
                "param_1": "inputData",
                "param_2": "flags",
                "param_3": "dataPtr",
                "param_4": "outputPtr",
                "iVar1": "result",
                "uVar2": "tempVar",
                "pcVar3": "funcPtr",
                "uVar4": "tempVar2",
                "pbVar5": "bytePtr",
                "uVar6": "sizeVar",
                "puVar7": "outputData",
                "puVar8": "tempPtr",
                "puVar9": "tempPtr2",
                "puVar10": "tempPtr3",
                "unaff_r9": "tempVar3",
                "iVar11": "index",
                "local_34": "localData"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_00006010",
                "FUN_0000687c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006768": {
            "entrypoint": "0x00006768",
            "current_name": "process_data_00006768",
            "code": "\nundefined4\nprocessData_00006768(undefined4 *inputData,undefined4 *outputData,undefined4 value1,undefined4 value2)\n\n{\n  undefined2 status;\n  int result;\n  undefined4 tempVar;\n  ushort flags;\n  uint shiftedValue;\n  \n  if ((inputData != (undefined4 *)0x0) && (inputData[6] == 0)) {\n    FUN_000042a4();\n  }\n  if (outputData == &DAT_000079b8) {\n    outputData = (undefined4 *)inputData[1];\n  }\n  else if (outputData == (undefined4 *)&DAT_000079d8) {\n    outputData = (undefined4 *)inputData[2];\n  }\n  else if (outputData == (undefined4 *)&DAT_00007998) {\n    outputData = (undefined4 *)inputData[3];\n  }\n  flags = *(ushort *)(outputData + 3);\n  outputData[1] = 0;\n  shiftedValue = (uint)*(ushort *)(outputData + 3);\n  if ((int)(shiftedValue << 0x1a) < 0) {\n    return 0xffffffff;\n  }\n  if ((int)(shiftedValue << 0x1d) < 0) {\n    if ((undefined4 *)outputData[0xd] != (undefined4 *)0x0) {\n      if ((undefined4 *)outputData[0xd] != outputData + 0x11) {\n        FUN_00004b34(inputData);\n      }\n      outputData[1] = outputData[0x10];\n      outputData[0xd] = 0;\n      if (outputData[0x10] != 0) {\n        *outputData = outputData[0xf];\n        return 0;\n      }\n    }\n  }\n  else {\n    if (-1 < (int)(shiftedValue << 0x1b)) {\n      *inputData = 9;\n      flags = flags | 0x40;\n      goto LAB_000067b8;\n    }\n    if ((int)(shiftedValue << 0x1c) < 0) {\n      result = FUN_00004158(inputData,outputData,shiftedValue << 0x1c,shiftedValue,value2);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      outputData[2] = 0;\n      *(ushort *)(outputData + 3) = *(ushort *)(outputData + 3) & 0xfff7;\n      outputData[6] = 0;\n    }\n    *(ushort *)(outputData + 3) = *(ushort *)(outputData + 3) | 4;\n  }\n  if (outputData[4] == 0) {\n    FUN_00005700(inputData,outputData);\n  }\n  flags = *(ushort *)(outputData + 3);\n  status = *(undefined2 *)(outputData + 3);\n  if ((flags & 3) != 0) {\n    *(undefined2 *)(outputData + 3) = 1;\n    FUN_000043a0(0x1fff0284,&LAB_00006754_1);\n    *(undefined2 *)(outputData + 3) = status;\n    if ((flags & 9) == 9) {\n      FUN_0000404c(inputData,outputData);\n    }\n  }\n  tempVar = outputData[4];\n  *outputData = tempVar;\n  result = (*(code *)outputData[9])(inputData,outputData[8],tempVar,outputData[5]);\n  outputData[1] = result;\n  if (0 < result) {\n    return 0;\n  }\n  flags = *(ushort *)(outputData + 3);\n  if (result != 0) {\n    tempVar = 0;\n  }\n  else {\n    flags = flags | 0x20;\n  }\n  if (result != 0) {\n    outputData[1] = tempVar;\n    flags = flags | 0x40;\n  }\nLAB_000067b8:\n  *(ushort *)(outputData + 3) = flags;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006768": "process_data_00006768",
                "param_1": "inputData",
                "param_2": "outputData",
                "param_3": "value1",
                "param_4": "value2",
                "uVar1": "status",
                "iVar2": "result",
                "uVar3": "tempVar",
                "uVar4": "flags",
                "uVar5": "shiftedValue"
            },
            "calling": [
                "FUN_00005e10"
            ],
            "called": [
                "FUN_00005700",
                "FUN_000043a0",
                "FUN_0000404c",
                "FUN_00004158",
                "FUN_00004b34",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000687c": {
            "entrypoint": "0x0000687c",
            "current_name": "extract_and_fill_bits_0000687c",
            "code": "\nbyte * extract_and_fill_bits_0000687c(int bit_array_length,byte *bit_array)\n\n{\n  byte *result;\n  uint temp_var;\n  int index;\n  uint current_byte;\n  uint current_bit;\n  uint next_bit;\n  bool bit_value;\n  \n  current_byte = (uint)*bit_array;\n  bit_value = current_byte == 0x5e;\n  if (bit_value) {\n    current_byte = (uint)bit_array[1];\n    bit_array = bit_array + 2;\n  }\n  else {\n    bit_array = bit_array + 1;\n  }\n  index = bit_array_length + -1;\n  do {\n    index = index + 1;\n    *(bool *)index = bit_value;\n  } while (index != bit_array_length + 0xff);\n  if (current_byte == 0) {\n    result = bit_array + -1;\n  }\n  else {\nLAB_000068aa:\n    do {\n      current_bit = current_byte;\n      *(bool *)(bit_array_length + current_bit) = !bit_value;\n      bit_array = bit_array + 1;\n      while( true ) {\n        current_byte = (uint)bit_array[-1];\n        if (current_byte != 0x2d) break;\n        next_bit = (uint)*bit_array;\n        if ((next_bit == 0x5d) || (temp_var = current_bit, (int)next_bit < (int)current_bit)) goto LAB_000068aa;\n        do {\n          temp_var = temp_var + 1;\n          *(bool *)(bit_array_length + temp_var) = !bit_value;\n        } while ((int)temp_var < (int)next_bit);\n        index = ~current_bit + next_bit;\n        if ((int)next_bit <= (int)current_bit) {\n          index = 0;\n        }\n        current_bit = current_bit + 1 + index;\n        bit_array = bit_array + 2;\n      }\n      result = bit_array;\n    } while ((current_byte != 0x5d) && (result = bit_array + -1, current_byte != 0));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0000687c": "extract_and_fill_bits_0000687c",
                "param_1": "bit_array_length",
                "param_2": "bit_array",
                "pbVar1": "result",
                "uVar2": "temp_var",
                "iVar3": "index",
                "uVar4": "current_byte",
                "uVar5": "current_bit",
                "uVar6": "next_bit",
                "bVar7": "bit_value"
            },
            "calling": [
                "FUN_0000656c",
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000068f0": {
            "entrypoint": "0x000068f0",
            "current_name": "process_data_000068f0",
            "code": "\nundefined4 processData_000068f0(undefined4 input,int *dataArray)\n\n{\n  int tempVar1;\n  int tempVar2;\n  \n  if ((int *)dataArray[0xd] == dataArray + 0x11) {\n    tempVar1 = FUN_00004bd0(input,0x400);\n    if (tempVar1 != 0) {\n      dataArray[0xe] = 0x400;\n      dataArray[0xd] = tempVar1;\n      *(undefined *)(tempVar1 + 0x3ff) = *(undefined *)((int)dataArray + 0x46);\n      *(undefined *)(tempVar1 + 0x3fe) = *(undefined *)((int)dataArray + 0x45);\n      *(undefined *)(tempVar1 + 0x3fd) = *(undefined *)(dataArray + 0x11);\n      *dataArray = tempVar1 + 0x3fd;\n      return 0;\n    }\n  }\n  else {\n    tempVar2 = dataArray[0xe];\n    tempVar1 = FUN_000060cc(input,(int *)dataArray[0xd],tempVar2 << 1);\n    if (tempVar1 != 0) {\n      FUN_000060b0(tempVar1 + tempVar2,tempVar1,tempVar2);\n      dataArray[0xd] = tempVar1;\n      dataArray[0xe] = tempVar2 << 1;\n      *dataArray = tempVar1 + tempVar2;\n      return 0;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000068f0": "process_data_000068f0",
                "param_1": "input",
                "param_2": "dataArray",
                "iVar1": "tempVar1",
                "iVar2": "tempVar2"
            },
            "calling": [],
            "called": [
                "FUN_000060b0",
                "FUN_00004bd0",
                "FUN_000060cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006964": {
            "entrypoint": "0x00006964",
            "current_name": "calculate_offset_00006964",
            "code": "\nint calculateOffset_00006964(undefined4 param1,int offset)\n\n{\n  int newOffset;\n  \n  newOffset = *(int *)(offset + -4) + -4;\n  if (*(int *)(offset + -4) < 0) {\n    newOffset = newOffset + *(int *)(offset + newOffset);\n  }\n  return newOffset;\n}\n\n",
            "renaming": {
                "FUN_00006964": "calculate_offset_00006964",
                "param_1": "param1",
                "param_2": "offset",
                "iVar1": "newOffset"
            },
            "calling": [
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006974": {
            "entrypoint": "0x00006974",
            "current_name": "extract_maximum_range_00006974",
            "code": "\nundefined8 extractMaximumRange_00006974(int startValue,int endValue,int minOffset,int maxOffset)\n\n{\n  int adjustedEndValue;\n  undefined8 result;\n  undefined temporaryBuffer [8];\n  \n  if ((maxOffset == 0) && (minOffset == 0)) {\n    if (endValue < 0) {\n      startValue = 0;\n      endValue = -0x80000000;\n    }\n    else if (endValue != 0 || startValue != 0) {\n      endValue = 0x7fffffff;\n      startValue = -1;\n    }\n    return CONCAT44(endValue,startValue);\n  }\n  if (endValue < 0) {\n    adjustedEndValue = -endValue - (uint)(startValue != 0);\n    if (maxOffset < 0) {\n      result = FUN_00006a14(-startValue,adjustedEndValue,-minOffset,-maxOffset - (uint)(minOffset != 0),temporaryBuffer);\n      return result;\n    }\n    result = FUN_00006a14(-startValue,adjustedEndValue,minOffset,maxOffset,temporaryBuffer);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  if (maxOffset < 0) {\n    result = FUN_00006a14(startValue,endValue,-minOffset,-maxOffset - (uint)(minOffset != 0),temporaryBuffer);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  result = FUN_00006a14();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00006974": "extract_maximum_range_00006974",
                "param_1": "startValue",
                "param_2": "endValue",
                "param_3": "minOffset",
                "param_4": "maxOffset",
                "iVar1": "adjustedEndValue",
                "uVar2": "result",
                "local_8": "temporaryBuffer"
            },
            "calling": [
                "FUN_0000443c"
            ],
            "called": [
                "FUN_00006a14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006a14": {
            "entrypoint": "0x00006a14",
            "current_name": "divide_and_remainder_00006a14",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006ca0) */\n\nulonglong divideAndRemainder_00006a14(uint dividend,uint divisor,uint quotientHigh,uint quotientLow,uint *remainder)\n\n{\n  code *jumpTable;\n  uint quotientDigit;\n  int shiftCount;\n  uint currentQuotientHigh;\n  uint currentQuotientLow;\n  uint tempQuotientLow;\n  uint tempRemainderHigh;\n  uint tempRemainderLow;\n  uint tempDivisorHigh;\n  uint tempDivisorLow;\n  bool carryFlag;\n  ulonglong returnValue;\n  \n  if (quotientLow == 0) {\n    if (divisor < quotientHigh) {\n      shiftCount = LZCOUNT(quotientHigh);\n      tempQuotientLow = quotientHigh;\n      if (shiftCount != 0) {\n        tempQuotientLow = quotientHigh << shiftCount;\n        divisor = dividend >> (0x20U - shiftCount & 0xff) | divisor << shiftCount;\n        dividend = dividend << shiftCount;\n      }\n      tempRemainderHigh = tempQuotientLow >> 0x10;\n      tempDivisorHigh = divisor / tempRemainderHigh;\n      currentQuotientHigh = dividend >> 0x10 | (divisor - tempRemainderHigh * tempDivisorHigh) * 0x10000;\n      quotientDigit = tempDivisorHigh * (tempQuotientLow & 0xffff);\n      currentQuotientLow = tempDivisorHigh;\n      if (currentQuotientHigh <= quotientDigit && quotientDigit - currentQuotientHigh != 0) {\n        carryFlag = CARRY4(tempQuotientLow,currentQuotientHigh);\n        currentQuotientHigh = tempQuotientLow + currentQuotientHigh;\n        currentQuotientLow = tempDivisorHigh - 1;\n        if ((carryFlag == false) && (currentQuotientHigh <= quotientDigit && quotientDigit - currentQuotientHigh != 0)) {\n          currentQuotientLow = tempDivisorHigh - 2;\n          currentQuotientHigh = currentQuotientHigh + tempQuotientLow;\n        }\n      }\n      tempDivisorHigh = (currentQuotientHigh - quotientDigit) / tempRemainderHigh;\n      tempRemainderHigh = dividend & 0xffff | ((currentQuotientHigh - quotientDigit) - tempRemainderHigh * tempDivisorHigh) * 0x10000;\n      currentQuotientHigh = tempDivisorHigh * (tempQuotientLow & 0xffff);\n      quotientDigit = tempDivisorHigh;\n      if (tempRemainderHigh <= currentQuotientHigh && currentQuotientHigh - tempRemainderHigh != 0) {\n        carryFlag = CARRY4(tempQuotientLow,tempRemainderHigh);\n        tempRemainderHigh = tempQuotientLow + tempRemainderHigh;\n        quotientDigit = tempDivisorHigh - 1;\n        if ((carryFlag == false) && (tempRemainderHigh <= currentQuotientHigh && currentQuotientHigh - tempRemainderHigh != 0)) {\n          quotientDigit = tempDivisorHigh - 2;\n          tempRemainderHigh = tempRemainderHigh + tempQuotientLow;\n        }\n      }\n      tempRemainderHigh = tempRemainderHigh - currentQuotientHigh;\n      quotientDigit = quotientDigit | currentQuotientLow << 0x10;\n      tempQuotientLow = 0;\n    }\n    else {\n      if (quotientHigh == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        jumpTable = (code *)software_udf(0xff,0x6abc);\n        returnValue = (*jumpTable)();\n        return returnValue;\n      }\n      shiftCount = LZCOUNT(quotientHigh);\n      if (shiftCount == 0) {\n        divisor = divisor - quotientHigh;\n        tempDivisorLow = quotientHigh >> 0x10;\n        tempRemainderLow = quotientHigh & 0xffff;\n        tempQuotientLow = 1;\n        currentQuotientLow = quotientHigh;\n      }\n      else {\n        currentQuotientLow = quotientHigh << shiftCount;\n        tempDivisorLow = currentQuotientLow >> 0x10;\n        quotientDigit = divisor >> (0x20U - shiftCount & 0xff);\n        tempQuotientLow = dividend >> (0x20U - shiftCount & 0xff) | divisor << shiftCount;\n        currentQuotientHigh = quotientDigit / tempDivisorLow;\n        tempRemainderLow = currentQuotientLow & 0xffff;\n        tempDivisorHigh = tempQuotientLow >> 0x10 | (quotientDigit - tempDivisorLow * currentQuotientHigh) * 0x10000;\n        tempRemainderHigh = currentQuotientHigh * tempRemainderLow;\n        dividend = dividend << shiftCount;\n        quotientDigit = currentQuotientHigh;\n        if (tempDivisorHigh <= tempRemainderHigh && tempRemainderHigh - tempDivisorHigh != 0) {\n          carryFlag = CARRY4(currentQuotientLow,tempDivisorHigh);\n          tempDivisorHigh = currentQuotientLow + tempDivisorHigh;\n          quotientDigit = currentQuotientHigh - 1;\n          if ((carryFlag == false) && (tempDivisorHigh <= tempRemainderHigh && tempRemainderHigh - tempDivisorHigh != 0)) {\n            quotientDigit = currentQuotientHigh - 2;\n            tempDivisorHigh = tempDivisorHigh + currentQuotientLow;\n          }\n        }\n        currentQuotientHigh = (tempDivisorHigh - tempRemainderHigh) / tempDivisorLow;\n        divisor = tempQuotientLow & 0xffff | ((tempDivisorHigh - tempRemainderHigh) - tempDivisorLow * currentQuotientHigh) * 0x10000;\n        tempRemainderHigh = currentQuotientHigh * tempRemainderLow;\n        tempQuotientLow = currentQuotientHigh;\n        if (divisor <= tempRemainderHigh && tempRemainderHigh - divisor != 0) {\n          carryFlag = CARRY4(currentQuotientLow,divisor);\n          divisor = currentQuotientLow + divisor;\n          tempQuotientLow = currentQuotientHigh - 1;\n          if ((carryFlag == false) && (divisor <= tempRemainderHigh && tempRemainderHigh - divisor != 0)) {\n            tempQuotientLow = currentQuotientHigh - 2;\n            divisor = divisor + currentQuotientLow;\n          }\n        }\n        divisor = divisor - tempRemainderHigh;\n        tempQuotientLow = tempQuotientLow | quotientDigit << 0x10;\n      }\n      tempDivisorHigh = divisor / tempDivisorLow;\n      tempRemainderHigh = dividend >> 0x10 | (divisor - tempDivisorLow * tempDivisorHigh) * 0x10000;\n      quotientDigit = tempRemainderLow * tempDivisorHigh;\n      currentQuotientHigh = tempDivisorHigh;\n      if (tempRemainderHigh <= quotientDigit && quotientDigit - tempRemainderHigh != 0) {\n        carryFlag = CARRY4(currentQuotientLow,tempRemainderHigh);\n        tempRemainderHigh = currentQuotientLow + tempRemainderHigh;\n        currentQuotientHigh = tempDivisorHigh - 1;\n        if ((carryFlag == false) && (tempRemainderHigh <= quotientDigit && quotientDigit - tempRemainderHigh != 0)) {\n          currentQuotientHigh = tempDivisorHigh - 2;\n          tempRemainderHigh = tempRemainderHigh + currentQuotientLow;\n        }\n      }\n      tempDivisorHigh = (tempRemainderHigh - quotientDigit) / tempDivisorLow;\n      tempRemainderHigh = dividend & 0xffff | ((tempRemainderHigh - quotientDigit) - tempDivisorLow * tempDivisorHigh) * 0x10000;\n      tempRemainderLow = tempRemainderLow * tempDivisorHigh;\n      quotientDigit = tempDivisorHigh;\n      if (tempRemainderHigh <= tempRemainderLow && tempRemainderLow - tempRemainderHigh != 0) {\n        carryFlag = CARRY4(currentQuotientLow,tempRemainderHigh);\n        tempRemainderHigh = currentQuotientLow + tempRemainderHigh;\n        quotientDigit = tempDivisorHigh - 1;\n        if ((carryFlag == false) && (tempRemainderHigh <= tempRemainderLow && tempRemainderLow - tempRemainderHigh != 0)) {\n          quotientDigit = tempDivisorHigh - 2;\n          tempRemainderHigh = tempRemainderHigh + currentQuotientLow;\n        }\n      }\n      tempRemainderHigh = tempRemainderHigh - tempRemainderLow;\n      quotientDigit = quotientDigit | currentQuotientHigh << 0x10;\n    }\n    if (remainder != (uint *)0x0) {\n      *remainder = tempRemainderHigh >> LZCOUNT(quotientHigh);\n      remainder[1] = 0;\n    }\n  }\n  else if (divisor < quotientLow) {\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = divisor;\n      return 0;\n    }\n    quotientDigit = 0;\n    tempQuotientLow = 0;\n  }\n  else {\n    shiftCount = LZCOUNT(quotientLow);\n    if (shiftCount != 0) {\n      tempRemainderLow = 0x20 - shiftCount;\n      currentQuotientHigh = quotientHigh >> (tempRemainderLow & 0xff) | quotientLow << shiftCount;\n      tempDivisorLow = currentQuotientHigh >> 0x10;\n      quotientDigit = divisor >> (tempRemainderLow & 0xff);\n      tempQuotientLow = dividend >> (tempRemainderLow & 0xff) | divisor << shiftCount;\n      tempRemainderHigh = quotientDigit / tempDivisorLow;\n      currentQuotientLow = tempQuotientLow >> 0x10 | (quotientDigit - tempDivisorLow * tempRemainderHigh) * 0x10000;\n      tempDivisorHigh = tempRemainderHigh * (currentQuotientHigh & 0xffff);\n      dividend = dividend << shiftCount;\n      quotientDigit = tempRemainderHigh;\n      if (currentQuotientLow <= tempDivisorHigh && tempDivisorHigh - currentQuotientLow != 0) {\n        carryFlag = CARRY4(currentQuotientHigh,currentQuotientLow);\n        currentQuotientLow = currentQuotientHigh + currentQuotientLow;\n        quotientDigit = tempRemainderHigh - 1;\n        if ((carryFlag == false) && (currentQuotientLow <= tempDivisorHigh && tempDivisorHigh - currentQuotientLow != 0)) {\n          quotientDigit = tempRemainderHigh - 2;\n          currentQuotientLow = currentQuotientLow + currentQuotientHigh;\n        }\n      }\n      tempRemainderHigh = (currentQuotientLow - tempDivisorHigh) / tempDivisorLow;\n      currentQuotientLow = tempQuotientLow & 0xffff | ((currentQuotientLow - tempDivisorHigh) - tempDivisorLow * tempRemainderHigh) * 0x10000;\n      tempDivisorHigh = tempRemainderHigh * (currentQuotientHigh & 0xffff);\n      tempQuotientLow = tempRemainderHigh;\n      if (currentQuotientLow <= tempDivisorHigh && tempDivisorHigh - currentQuotientLow != 0) {\n        carryFlag = CARRY4(currentQuotientHigh,currentQuotientLow);\n        currentQuotientLow = currentQuotientHigh + currentQuotientLow;\n        tempQuotientLow = tempRemainderHigh - 1;\n        if ((carryFlag == false) && (currentQuotientLow <= tempDivisorHigh && tempDivisorHigh - currentQuotientLow != 0)) {\n          tempQuotientLow = tempRemainderHigh - 2;\n          currentQuotientLow = currentQuotientLow + currentQuotientHigh;\n        }\n      }\n      tempQuotientLow = tempQuotientLow | quotientDigit << 0x10;\n      returnValue = (ulonglong)tempQuotientLow * (ulonglong)(quotientHigh << shiftCount);\n      if (CONCAT44(currentQuotientLow - tempDivisorHigh,dividend) < returnValue) {\n        returnValue = returnValue - CONCAT44(currentQuotientHigh,quotientHigh << shiftCount);\n        tempQuotientLow = tempQuotientLow - 1;\n      }\n      if (remainder != (uint *)0x0) {\n        quotientDigit = ((currentQuotientLow - tempDivisorHigh) - (int)(returnValue >> 0x20)) - (uint)(dividend < (uint)returnValue);\n        *remainder = quotientDigit << (tempRemainderLow & 0xff) | dividend - (uint)returnValue >> shiftCount;\n        remainder[1] = quotientDigit >> shiftCount;\n      }\n      return (ulonglong)tempQuotientLow;\n    }\n    if ((quotientLow < divisor) || (quotientHigh <= dividend)) {\n      carryFlag = dividend < quotientHigh;\n      dividend = dividend - quotientHigh;\n      divisor = (divisor - quotientLow) - (uint)carryFlag;\n      quotientDigit = 1;\n    }\n    else {\n      quotientDigit = 0;\n    }\n    tempQuotientLow = 0;\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = divisor;\n    }\n  }\n  return CONCAT44(tempQuotientLow,quotientDigit);\n}\n\n",
            "renaming": {
                "FUN_00006a14": "divide_and_remainder_00006a14",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotientHigh",
                "param_4": "quotientLow",
                "param_5": "remainder",
                "UNRECOVERED_JUMPTABLE": "jumpTable",
                "uVar1": "quotientDigit",
                "iVar2": "shiftCount",
                "uVar3": "currentQuotientHigh",
                "uVar4": "currentQuotientLow",
                "uVar5": "tempQuotientLow",
                "uVar6": "tempRemainderHigh",
                "uVar7": "tempRemainderLow",
                "uVar8": "tempDivisorHigh",
                "uVar9": "tempDivisorLow",
                "bVar10": "carryFlag",
                "uVar11": "returnValue"
            },
            "calling": [
                "FUN_00006974"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 136644,
    "layers": [
        [
            "FUN_00000410",
            "FUN_00000428",
            "FUN_00000490",
            "FUN_000004f2",
            "FUN_00000514",
            "FUN_00000534",
            "FUN_00000566",
            "FUN_0000058e",
            "FUN_000005ca",
            "FUN_00000610",
            "FUN_00000698",
            "FUN_00000738",
            "FUN_00000794",
            "FUN_000007dc",
            "FUN_000008b8",
            "FUN_00000900",
            "FUN_0000091c",
            "FUN_00000930",
            "FUN_0000093c",
            "FUN_00000a30",
            "FUN_00000cc0",
            "FUN_00000cd0",
            "FUN_00000cf0",
            "FUN_00000d0c",
            "FUN_00000d2a",
            "FUN_00000d44",
            "FUN_00000d76",
            "FUN_00000d9c",
            "FUN_00000db0",
            "FUN_00000dc0",
            "FUN_00000dcc",
            "FUN_00000df4",
            "FUN_00000e14",
            "FUN_00000e38",
            "FUN_00000e58",
            "FUN_00000e64",
            "FUN_00000ed8",
            "FUN_00000f04",
            "FUN_00000f8c",
            "FUN_00000fec",
            "FUN_00001034",
            "FUN_000010a0",
            "FUN_000010d4",
            "FUN_00001274",
            "FUN_0000129c",
            "FUN_000012b4",
            "FUN_000012e2",
            "FUN_00001318",
            "FUN_00001348",
            "FUN_00001360",
            "FUN_00001392",
            "FUN_000013b8",
            "FUN_00001448",
            "FUN_000014c4",
            "FUN_000015d0",
            "FUN_00001628",
            "FUN_00001688",
            "FUN_00001696",
            "FUN_000016c8",
            "FUN_000016ec",
            "FUN_00001710",
            "FUN_00001734",
            "FUN_00001748",
            "FUN_00001778",
            "FUN_000017dc",
            "FUN_0000182c",
            "FUN_000018bc",
            "FUN_0000191c",
            "FUN_00001960",
            "FUN_000019c0",
            "FUN_00001a18",
            "FUN_00001a3c",
            "FUN_00001a60",
            "FUN_00001ad4",
            "FUN_00001b10",
            "FUN_00001bb8",
            "FUN_00001c84",
            "FUN_00001cf0",
            "FUN_00001d08",
            "FUN_00001d3a",
            "FUN_00001d5e",
            "FUN_00001d80",
            "FUN_00001da2",
            "FUN_00001dc0",
            "FUN_00001ddc",
            "FUN_00001e0c",
            "FUN_00001e44",
            "FUN_00001ec4",
            "FUN_00001eea",
            "FUN_00001f80",
            "FUN_00001ff6",
            "FUN_00002028",
            "FUN_000020b8",
            "FUN_000020cc",
            "FUN_000020e0",
            "FUN_000020f4",
            "FUN_00002108",
            "FUN_0000211c",
            "FUN_00002270",
            "FUN_00002294",
            "FUN_000022be",
            "FUN_000022f0",
            "FUN_0000231c",
            "FUN_00002364",
            "FUN_00002396",
            "FUN_000023a4",
            "FUN_000023c8",
            "FUN_000023d0",
            "FUN_0000240c",
            "FUN_00002434",
            "FUN_000024bc",
            "FUN_00002538",
            "FUN_0000258c",
            "FUN_000025f4",
            "FUN_00002600",
            "FUN_00002624",
            "FUN_00002654",
            "FUN_00002690",
            "FUN_000026c0",
            "FUN_000026d8",
            "FUN_000026e4",
            "FUN_000026f0",
            "FUN_00002714",
            "FUN_00002744",
            "FUN_00002798",
            "FUN_000027b0",
            "FUN_0000281c",
            "FUN_0000285c",
            "FUN_00002894",
            "FUN_000028f0",
            "FUN_00002910",
            "FUN_0000294c",
            "FUN_00002970",
            "FUN_00002994",
            "FUN_00002a00",
            "FUN_00002a18",
            "FUN_00002a88",
            "FUN_00002b10",
            "FUN_00002d94",
            "FUN_00002e48",
            "FUN_00002e6c",
            "FUN_00002e9c",
            "FUN_00002eb4",
            "FUN_00002ecc",
            "FUN_00002f30",
            "FUN_00002f74",
            "FUN_00002fe0",
            "FUN_0000305c",
            "FUN_0000316c",
            "FUN_000031e0",
            "FUN_000031fc",
            "FUN_0000328c",
            "FUN_00003378",
            "FUN_000033c0",
            "FUN_000033f4",
            "FUN_00003444",
            "FUN_00003478",
            "FUN_000034c0",
            "FUN_00003524",
            "FUN_00003658",
            "FUN_00003688",
            "FUN_00003694",
            "FUN_00003810",
            "FUN_00003918",
            "FUN_000039e8",
            "FUN_00003d24",
            "FUN_00003d64",
            "FUN_00003d94",
            "FUN_00003dc4",
            "FUN_00003e58",
            "FUN_00003e9e",
            "FUN_00003ec4",
            "FUN_00003ff4",
            "FUN_00004042",
            "FUN_0000404c",
            "FUN_00004158",
            "FUN_000041d0",
            "FUN_000041f4",
            "FUN_00004248",
            "FUN_00004274",
            "FUN_00004280",
            "FUN_0000428c",
            "FUN_000042a4",
            "FUN_00004314",
            "FUN_000043a0",
            "FUN_00004418",
            "FUN_0000443c",
            "FUN_0000459c",
            "FUN_000045ee",
            "FUN_00004622",
            "FUN_00004634",
            "FUN_000047e4",
            "FUN_00004b34",
            "FUN_00004bd0",
            "FUN_00004c84",
            "FUN_00004cb4",
            "FUN_00004db8",
            "FUN_00004dc8",
            "FUN_00004dee",
            "FUN_00004e26",
            "FUN_00004e52",
            "FUN_00004e66",
            "FUN_00004f84",
            "FUN_00004f98",
            "FUN_000050e8",
            "FUN_000050f4",
            "FUN_00005100",
            "FUN_00005404",
            "FUN_000054a8",
            "FUN_00005584",
            "FUN_0000562c",
            "FUN_000056a0",
            "FUN_000056b0",
            "FUN_000056b8",
            "FUN_00005700",
            "FUN_00005780",
            "FUN_00005790",
            "FUN_0000579c",
            "FUN_000057a8",
            "FUN_000057d2",
            "FUN_000057f8",
            "FUN_00005a58",
            "FUN_00005b34",
            "FUN_00005e10",
            "FUN_00005e68",
            "FUN_00005ebc",
            "FUN_00005ecc",
            "FUN_00005edc",
            "FUN_00005fd8",
            "FUN_00005fec",
            "FUN_00005ff8",
            "FUN_00006010",
            "FUN_000060b0",
            "FUN_000060cc",
            "FUN_00006192",
            "FUN_000061cc",
            "FUN_000064bc",
            "FUN_0000656c",
            "FUN_00006768",
            "FUN_0000687c",
            "FUN_000068f0",
            "FUN_00006964",
            "FUN_00006974",
            "FUN_00006a14"
        ]
    ],
    "locked_functions": []
}